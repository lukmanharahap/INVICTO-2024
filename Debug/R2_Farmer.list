
R2_Farmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0800fb58  0800fb58  00010b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010330  08010330  000122b8  2**0
                  CONTENTS
  4 .ARM          00000008  08010330  08010330  00011330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010338  08010338  000122b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010338  08010338  00011338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801033c  0801033c  0001133c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b8  20000000  08010340  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122b8  2**0
                  CONTENTS
 10 .bss          000005e0  200002b8  200002b8  000122b8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  000122b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013dee  00000000  00000000  000122e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c2c  00000000  00000000  000260d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00028d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3b  00000000  00000000  00029f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012038  00000000  00000000  0002ad4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000541b  00000000  00000000  0003cd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0004219e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066d8  00000000  00000000  000421e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000488bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b8 	.word	0x200002b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fb40 	.word	0x0800fb40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002bc 	.word	0x200002bc
 80001cc:	0800fb40 	.word	0x0800fb40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <motorDirection>:
        {GPIOD, GPIO_PIN_3, GPIOD, GPIO_PIN_4, TIM_CHANNEL_3, &htim2},		//9
        {GPIOB, GPIO_PIN_1, GPIOB, GPIO_PIN_0, TIM_CHANNEL_4, &htim2}		//10
};

void motorDirection(uint8_t motor, uint8_t direction)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
    Motor *currentMotor = &motors[motor - 1];
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <motorDirection+0x74>)
 8001002:	4413      	add	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
    GPIO_PinState dir1_state;
    GPIO_PinState dir2_state;
    switch (direction)
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d006      	beq.n	800101a <motorDirection+0x36>
 800100c:	2b02      	cmp	r3, #2
 800100e:	d109      	bne.n	8001024 <motorDirection+0x40>
    {
    case forward:
        dir1_state = GPIO_PIN_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_SET;
 8001014:	2301      	movs	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
        break;
 8001018:	e009      	b.n	800102e <motorDirection+0x4a>
    case backward:
        dir1_state = GPIO_PIN_SET;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	73bb      	strb	r3, [r7, #14]
        break;
 8001022:	e004      	b.n	800102e <motorDirection+0x4a>
    default:
        dir1_state = GPIO_PIN_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
        break;
 800102c:	bf00      	nop
    }
    HAL_GPIO_WritePin(currentMotor->dir1_port, currentMotor->dir1_pin, dir1_state);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	4619      	mov	r1, r3
 800103a:	f005 fac5 	bl	80065c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(currentMotor->dir2_port, currentMotor->dir2_pin, dir2_state);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	6898      	ldr	r0, [r3, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	899b      	ldrh	r3, [r3, #12]
 8001046:	7bba      	ldrb	r2, [r7, #14]
 8001048:	4619      	mov	r1, r3
 800104a:	f005 fabd 	bl	80065c8 <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000

0800105c <setMotorSpeed>:

void setMotorSpeed(uint8_t motor, double speed)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	ed87 0b00 	vstr	d0, [r7]
 8001068:	73fb      	strb	r3, [r7, #15]
    Motor *currentMotor = &motors[motor - 1];
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4a33      	ldr	r2, [pc, #204]	@ (8001144 <setMotorSpeed+0xe8>)
 8001078:	4413      	add	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
    if (speed > 0)
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001088:	f7ff fd46 	bl	8000b18 <__aeabi_dcmpgt>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <setMotorSpeed+0x42>
    {
        motorDirection(motor, forward);
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffa4 	bl	8000fe4 <motorDirection>
 800109c:	e01b      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else if (speed < 0)
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010aa:	f7ff fd17 	bl	8000adc <__aeabi_dcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <setMotorSpeed+0x70>
    {
        motorDirection(motor, backward);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2101      	movs	r1, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff93 	bl	8000fe4 <motorDirection>
        speed = -speed;
 80010be:	683c      	ldr	r4, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80010c6:	e9c7 4500 	strd	r4, r5, [r7]
 80010ca:	e004      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else
    {
        motorDirection(motor, stop);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff87 	bl	8000fe4 <motorDirection>
    }
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	7b9b      	ldrb	r3, [r3, #14]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <setMotorSpeed+0x96>
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	681c      	ldr	r4, [r3, #0]
 80010e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010e8:	f7ff fd5e 	bl	8000ba8 <__aeabi_d2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80010f0:	e024      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	7b9b      	ldrb	r3, [r3, #14]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d109      	bne.n	800110e <setMotorSpeed+0xb2>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800110c:	e016      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	7b9b      	ldrb	r3, [r3, #14]
 8001112:	2b08      	cmp	r3, #8
 8001114:	d109      	bne.n	800112a <setMotorSpeed+0xce>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001120:	f7ff fd42 	bl	8000ba8 <__aeabi_d2uiz>
 8001124:	4603      	mov	r3, r0
 8001126:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001128:	e008      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001134:	f7ff fd38 	bl	8000ba8 <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bdb0      	pop	{r4, r5, r7, pc}
 8001144:	20000000 	.word	0x20000000

08001148 <Inverse_Kinematics>:

void Inverse_Kinematics(int Vx, int Vy, int W)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b096      	sub	sp, #88	@ 0x58
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
     double R = 7.6;
 8001154:	f20f 433c 	addw	r3, pc, #1084	@ 0x43c
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

     double M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff f9df 	bl	8000524 <__aeabi_i2d>
 8001166:	f20f 4334 	addw	r3, pc, #1076	@ 0x434
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff fa43 	bl	80005f8 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4614      	mov	r4, r2
 8001178:	461d      	mov	r5, r3
 800117a:	68b8      	ldr	r0, [r7, #8]
 800117c:	f7ff f9d2 	bl	8000524 <__aeabi_i2d>
 8001180:	f20f 4320 	addw	r3, pc, #1056	@ 0x420
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fa36 	bl	80005f8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4620      	mov	r0, r4
 8001192:	4629      	mov	r1, r5
 8001194:	f7ff f87a 	bl	800028c <__adddf3>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4614      	mov	r4, r2
 800119e:	461d      	mov	r5, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff f9bf 	bl	8000524 <__aeabi_i2d>
 80011a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80011aa:	f7ff fa25 	bl	80005f8 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff f867 	bl	8000288 <__aeabi_dsub>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
     double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff f9ae 	bl	8000524 <__aeabi_i2d>
 80011c8:	a3f8      	add	r3, pc, #992	@ (adr r3, 80015ac <Inverse_Kinematics+0x464>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff fa13 	bl	80005f8 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4614      	mov	r4, r2
 80011d8:	461d      	mov	r5, r3
 80011da:	68b8      	ldr	r0, [r7, #8]
 80011dc:	f7ff f9a2 	bl	8000524 <__aeabi_i2d>
 80011e0:	a3ee      	add	r3, pc, #952	@ (adr r3, 800159c <Inverse_Kinematics+0x454>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff fa07 	bl	80005f8 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7ff f84b 	bl	800028c <__adddf3>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff f990 	bl	8000524 <__aeabi_i2d>
 8001204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001208:	f7ff f9f6 	bl	80005f8 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4620      	mov	r0, r4
 8001212:	4629      	mov	r1, r5
 8001214:	f7ff f838 	bl	8000288 <__aeabi_dsub>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
     double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff f97f 	bl	8000524 <__aeabi_i2d>
 8001226:	a3e3      	add	r3, pc, #908	@ (adr r3, 80015b4 <Inverse_Kinematics+0x46c>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f9e4 	bl	80005f8 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4614      	mov	r4, r2
 8001236:	461d      	mov	r5, r3
 8001238:	68b8      	ldr	r0, [r7, #8]
 800123a:	f7ff f973 	bl	8000524 <__aeabi_i2d>
 800123e:	a3df      	add	r3, pc, #892	@ (adr r3, 80015bc <Inverse_Kinematics+0x474>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f9d8 	bl	80005f8 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	f7ff f81c 	bl	800028c <__adddf3>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4614      	mov	r4, r2
 800125a:	461d      	mov	r5, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff f961 	bl	8000524 <__aeabi_i2d>
 8001262:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001266:	f7ff f9c7 	bl	80005f8 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7ff f809 	bl	8000288 <__aeabi_dsub>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
     double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff f950 	bl	8000524 <__aeabi_i2d>
 8001284:	a3cf      	add	r3, pc, #828	@ (adr r3, 80015c4 <Inverse_Kinematics+0x47c>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9b5 	bl	80005f8 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4614      	mov	r4, r2
 8001294:	461d      	mov	r5, r3
 8001296:	68b8      	ldr	r0, [r7, #8]
 8001298:	f7ff f944 	bl	8000524 <__aeabi_i2d>
 800129c:	a3cb      	add	r3, pc, #812	@ (adr r3, 80015cc <Inverse_Kinematics+0x484>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f9a9 	bl	80005f8 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4620      	mov	r0, r4
 80012ac:	4629      	mov	r1, r5
 80012ae:	f7fe ffed 	bl	800028c <__adddf3>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff f932 	bl	8000524 <__aeabi_i2d>
 80012c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80012c4:	f7ff f998 	bl	80005f8 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7fe ffda 	bl	8000288 <__aeabi_dsub>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

     double V1 = (M1 > 550 || M1 < -550) ? fmin(fmax(M1, -2600), 2600) : ((M1 < 0) ? -550 : ((M1 > 0) ? 550 : 0));
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4bab      	ldr	r3, [pc, #684]	@ (8001590 <Inverse_Kinematics+0x448>)
 80012e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80012e6:	f7ff fc17 	bl	8000b18 <__aeabi_dcmpgt>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d109      	bne.n	8001304 <Inverse_Kinematics+0x1bc>
 80012f0:	a39d      	add	r3, pc, #628	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80012fa:	f7ff fbef 	bl	8000adc <__aeabi_dcmplt>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d016      	beq.n	8001332 <Inverse_Kinematics+0x1ea>
 8001304:	ed9f 1b9a 	vldr	d1, [pc, #616]	@ 8001570 <Inverse_Kinematics+0x428>
 8001308:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 800130c:	f00c ff6f 	bl	800e1ee <fmax>
 8001310:	eeb0 7a40 	vmov.f32	s14, s0
 8001314:	eef0 7a60 	vmov.f32	s15, s1
 8001318:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 8001578 <Inverse_Kinematics+0x430>
 800131c:	eeb0 0a47 	vmov.f32	s0, s14
 8001320:	eef0 0a67 	vmov.f32	s1, s15
 8001324:	f00c ff8d 	bl	800e242 <fmin>
 8001328:	eeb0 7a40 	vmov.f32	s14, s0
 800132c:	eef0 7a60 	vmov.f32	s15, s1
 8001330:	e01d      	b.n	800136e <Inverse_Kinematics+0x226>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800133e:	f7ff fbcd 	bl	8000adc <__aeabi_dcmplt>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <Inverse_Kinematics+0x206>
 8001348:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8001568 <Inverse_Kinematics+0x420>
 800134c:	e00f      	b.n	800136e <Inverse_Kinematics+0x226>
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800135a:	f7ff fbdd 	bl	8000b18 <__aeabi_dcmpgt>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <Inverse_Kinematics+0x222>
 8001364:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8001580 <Inverse_Kinematics+0x438>
 8001368:	e001      	b.n	800136e <Inverse_Kinematics+0x226>
 800136a:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8001588 <Inverse_Kinematics+0x440>
 800136e:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
     double V2 = (M2 > 550 || M2 < -550) ? fmin(fmax(M2, -2600), 2600) : ((M2 < 0) ? -550 : ((M2 > 0) ? 550 : 0));
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b86      	ldr	r3, [pc, #536]	@ (8001590 <Inverse_Kinematics+0x448>)
 8001378:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800137c:	f7ff fbcc 	bl	8000b18 <__aeabi_dcmpgt>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <Inverse_Kinematics+0x252>
 8001386:	a378      	add	r3, pc, #480	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001390:	f7ff fba4 	bl	8000adc <__aeabi_dcmplt>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d016      	beq.n	80013c8 <Inverse_Kinematics+0x280>
 800139a:	ed9f 1b75 	vldr	d1, [pc, #468]	@ 8001570 <Inverse_Kinematics+0x428>
 800139e:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80013a2:	f00c ff24 	bl	800e1ee <fmax>
 80013a6:	eeb0 7a40 	vmov.f32	s14, s0
 80013aa:	eef0 7a60 	vmov.f32	s15, s1
 80013ae:	ed9f 1b72 	vldr	d1, [pc, #456]	@ 8001578 <Inverse_Kinematics+0x430>
 80013b2:	eeb0 0a47 	vmov.f32	s0, s14
 80013b6:	eef0 0a67 	vmov.f32	s1, s15
 80013ba:	f00c ff42 	bl	800e242 <fmin>
 80013be:	eeb0 7a40 	vmov.f32	s14, s0
 80013c2:	eef0 7a60 	vmov.f32	s15, s1
 80013c6:	e01d      	b.n	8001404 <Inverse_Kinematics+0x2bc>
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80013d4:	f7ff fb82 	bl	8000adc <__aeabi_dcmplt>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <Inverse_Kinematics+0x29c>
 80013de:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8001568 <Inverse_Kinematics+0x420>
 80013e2:	e00f      	b.n	8001404 <Inverse_Kinematics+0x2bc>
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80013f0:	f7ff fb92 	bl	8000b18 <__aeabi_dcmpgt>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <Inverse_Kinematics+0x2b8>
 80013fa:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001580 <Inverse_Kinematics+0x438>
 80013fe:	e001      	b.n	8001404 <Inverse_Kinematics+0x2bc>
 8001400:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001588 <Inverse_Kinematics+0x440>
 8001404:	ed87 7b08 	vstr	d7, [r7, #32]
     double V3 = (M3 > 550 || M3 < -550) ? fmin(fmax(M3, -2600), 2600) : ((M3 < 0) ? -550 : ((M3 > 0) ? 550 : 0));
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b60      	ldr	r3, [pc, #384]	@ (8001590 <Inverse_Kinematics+0x448>)
 800140e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001412:	f7ff fb81 	bl	8000b18 <__aeabi_dcmpgt>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d109      	bne.n	8001430 <Inverse_Kinematics+0x2e8>
 800141c:	a352      	add	r3, pc, #328	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001426:	f7ff fb59 	bl	8000adc <__aeabi_dcmplt>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d016      	beq.n	800145e <Inverse_Kinematics+0x316>
 8001430:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001570 <Inverse_Kinematics+0x428>
 8001434:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001438:	f00c fed9 	bl	800e1ee <fmax>
 800143c:	eeb0 7a40 	vmov.f32	s14, s0
 8001440:	eef0 7a60 	vmov.f32	s15, s1
 8001444:	ed9f 1b4c 	vldr	d1, [pc, #304]	@ 8001578 <Inverse_Kinematics+0x430>
 8001448:	eeb0 0a47 	vmov.f32	s0, s14
 800144c:	eef0 0a67 	vmov.f32	s1, s15
 8001450:	f00c fef7 	bl	800e242 <fmin>
 8001454:	eeb0 7a40 	vmov.f32	s14, s0
 8001458:	eef0 7a60 	vmov.f32	s15, s1
 800145c:	e01d      	b.n	800149a <Inverse_Kinematics+0x352>
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800146a:	f7ff fb37 	bl	8000adc <__aeabi_dcmplt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <Inverse_Kinematics+0x332>
 8001474:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8001568 <Inverse_Kinematics+0x420>
 8001478:	e00f      	b.n	800149a <Inverse_Kinematics+0x352>
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001486:	f7ff fb47 	bl	8000b18 <__aeabi_dcmpgt>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <Inverse_Kinematics+0x34e>
 8001490:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8001580 <Inverse_Kinematics+0x438>
 8001494:	e001      	b.n	800149a <Inverse_Kinematics+0x352>
 8001496:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8001588 <Inverse_Kinematics+0x440>
 800149a:	ed87 7b06 	vstr	d7, [r7, #24]
     double V4 = (M4 > 550 || M4 < -550) ? fmin(fmax(M4, -2600), 2600) : ((M4 < 0) ? -550 : ((M4 > 0) ? 550 : 0));
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001590 <Inverse_Kinematics+0x448>)
 80014a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80014a8:	f7ff fb36 	bl	8000b18 <__aeabi_dcmpgt>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <Inverse_Kinematics+0x37e>
 80014b2:	a32d      	add	r3, pc, #180	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80014bc:	f7ff fb0e 	bl	8000adc <__aeabi_dcmplt>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d016      	beq.n	80014f4 <Inverse_Kinematics+0x3ac>
 80014c6:	ed9f 1b2a 	vldr	d1, [pc, #168]	@ 8001570 <Inverse_Kinematics+0x428>
 80014ca:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80014ce:	f00c fe8e 	bl	800e1ee <fmax>
 80014d2:	eeb0 7a40 	vmov.f32	s14, s0
 80014d6:	eef0 7a60 	vmov.f32	s15, s1
 80014da:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8001578 <Inverse_Kinematics+0x430>
 80014de:	eeb0 0a47 	vmov.f32	s0, s14
 80014e2:	eef0 0a67 	vmov.f32	s1, s15
 80014e6:	f00c feac 	bl	800e242 <fmin>
 80014ea:	eeb0 7a40 	vmov.f32	s14, s0
 80014ee:	eef0 7a60 	vmov.f32	s15, s1
 80014f2:	e01d      	b.n	8001530 <Inverse_Kinematics+0x3e8>
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001500:	f7ff faec 	bl	8000adc <__aeabi_dcmplt>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <Inverse_Kinematics+0x3c8>
 800150a:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8001568 <Inverse_Kinematics+0x420>
 800150e:	e00f      	b.n	8001530 <Inverse_Kinematics+0x3e8>
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800151c:	f7ff fafc 	bl	8000b18 <__aeabi_dcmpgt>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <Inverse_Kinematics+0x3e4>
 8001526:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001580 <Inverse_Kinematics+0x438>
 800152a:	e001      	b.n	8001530 <Inverse_Kinematics+0x3e8>
 800152c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001588 <Inverse_Kinematics+0x440>
 8001530:	ed87 7b04 	vstr	d7, [r7, #16]

     setMotorSpeed(6, V1);
 8001534:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001538:	2006      	movs	r0, #6
 800153a:	f7ff fd8f 	bl	800105c <setMotorSpeed>
     setMotorSpeed(8, V2);
 800153e:	ed97 0b08 	vldr	d0, [r7, #32]
 8001542:	2008      	movs	r0, #8
 8001544:	f7ff fd8a 	bl	800105c <setMotorSpeed>
     setMotorSpeed(4, V3);
 8001548:	ed97 0b06 	vldr	d0, [r7, #24]
 800154c:	2004      	movs	r0, #4
 800154e:	f7ff fd85 	bl	800105c <setMotorSpeed>
     setMotorSpeed(5, V4);
 8001552:	ed97 0b04 	vldr	d0, [r7, #16]
 8001556:	2005      	movs	r0, #5
 8001558:	f7ff fd80 	bl	800105c <setMotorSpeed>
}
 800155c:	bf00      	nop
 800155e:	3758      	adds	r7, #88	@ 0x58
 8001560:	46bd      	mov	sp, r7
 8001562:	bdb0      	pop	{r4, r5, r7, pc}
 8001564:	f3af 8000 	nop.w
 8001568:	00000000 	.word	0x00000000
 800156c:	c0813000 	.word	0xc0813000
 8001570:	00000000 	.word	0x00000000
 8001574:	c0a45000 	.word	0xc0a45000
 8001578:	00000000 	.word	0x00000000
 800157c:	40a45000 	.word	0x40a45000
 8001580:	00000000 	.word	0x00000000
 8001584:	40813000 	.word	0x40813000
	...
 8001590:	40813000 	.word	0x40813000
 8001594:	66666666 	.word	0x66666666
 8001598:	401e6666 	.word	0x401e6666
 800159c:	667f3bcc 	.word	0x667f3bcc
 80015a0:	bfe6a09e 	.word	0xbfe6a09e
 80015a4:	667f3bcd 	.word	0x667f3bcd
 80015a8:	3fe6a09e 	.word	0x3fe6a09e
 80015ac:	667f3bcd 	.word	0x667f3bcd
 80015b0:	bfe6a09e 	.word	0xbfe6a09e
 80015b4:	667f3bcc 	.word	0x667f3bcc
 80015b8:	3fe6a09e 	.word	0x3fe6a09e
 80015bc:	667f3bce 	.word	0x667f3bce
 80015c0:	bfe6a09e 	.word	0xbfe6a09e
 80015c4:	667f3bce 	.word	0x667f3bce
 80015c8:	3fe6a09e 	.word	0x3fe6a09e
 80015cc:	667f3bcb 	.word	0x667f3bcb
 80015d0:	3fe6a09e 	.word	0x3fe6a09e
 80015d4:	00000000 	.word	0x00000000

080015d8 <baru>:

void baru(double Vx, double Vy, double W)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b0b8      	sub	sp, #224	@ 0xe0
 80015dc:	af00      	add	r7, sp, #0
 80015de:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
 80015e2:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 80015e6:	ed87 2b18 	vstr	d2, [r7, #96]	@ 0x60
    double R = 7.6; // Radius or distance from the center to the wheel, in centimeters
 80015ea:	f20f 5328 	addw	r3, pc, #1320	@ 0x528
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
    double wheelMaxSpeed = 2500; // Max speed for each wheel
 80015f6:	f20f 5324 	addw	r3, pc, #1316	@ 0x524
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0

    // Calculate the raw motor speeds based on inverse kinematics
    double M1 = -sin(M_PI_4) * Vx + cos(M_PI_4) * Vy - R * W;
 8001602:	f20f 5320 	addw	r3, pc, #1312	@ 0x520
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800160e:	f7fe fff3 	bl	80005f8 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4614      	mov	r4, r2
 8001618:	461d      	mov	r5, r3
 800161a:	f20f 5310 	addw	r3, pc, #1296	@ 0x510
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001626:	f7fe ffe7 	bl	80005f8 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4620      	mov	r0, r4
 8001630:	4629      	mov	r1, r5
 8001632:	f7fe fe2b 	bl	800028c <__adddf3>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4614      	mov	r4, r2
 800163c:	461d      	mov	r5, r3
 800163e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001642:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001646:	f7fe ffd7 	bl	80005f8 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4620      	mov	r0, r4
 8001650:	4629      	mov	r1, r5
 8001652:	f7fe fe19 	bl	8000288 <__aeabi_dsub>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 800165e:	f20f 43d4 	addw	r3, pc, #1236	@ 0x4d4
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800166a:	f7fe ffc5 	bl	80005f8 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4614      	mov	r4, r2
 8001674:	461d      	mov	r5, r3
 8001676:	f20f 43ac 	addw	r3, pc, #1196	@ 0x4ac
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001682:	f7fe ffb9 	bl	80005f8 <__aeabi_dmul>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4620      	mov	r0, r4
 800168c:	4629      	mov	r1, r5
 800168e:	f7fe fdfd 	bl	800028c <__adddf3>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4614      	mov	r4, r2
 8001698:	461d      	mov	r5, r3
 800169a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800169e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80016a2:	f7fe ffa9 	bl	80005f8 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4620      	mov	r0, r4
 80016ac:	4629      	mov	r1, r5
 80016ae:	f7fe fdeb 	bl	8000288 <__aeabi_dsub>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 80016ba:	f20f 4380 	addw	r3, pc, #1152	@ 0x480
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80016c6:	f7fe ff97 	bl	80005f8 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4614      	mov	r4, r2
 80016d0:	461d      	mov	r5, r3
 80016d2:	f20f 4370 	addw	r3, pc, #1136	@ 0x470
 80016d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80016de:	f7fe ff8b 	bl	80005f8 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4620      	mov	r0, r4
 80016e8:	4629      	mov	r1, r5
 80016ea:	f7fe fdcf 	bl	800028c <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4614      	mov	r4, r2
 80016f4:	461d      	mov	r5, r3
 80016f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80016fa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80016fe:	f7fe ff7b 	bl	80005f8 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4620      	mov	r0, r4
 8001708:	4629      	mov	r1, r5
 800170a:	f7fe fdbd 	bl	8000288 <__aeabi_dsub>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
    double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8001716:	f20f 4334 	addw	r3, pc, #1076	@ 0x434
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001722:	f7fe ff69 	bl	80005f8 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4614      	mov	r4, r2
 800172c:	461d      	mov	r5, r3
 800172e:	f20f 4324 	addw	r3, pc, #1060	@ 0x424
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800173a:	f7fe ff5d 	bl	80005f8 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	f7fe fda1 	bl	800028c <__adddf3>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4614      	mov	r4, r2
 8001750:	461d      	mov	r5, r3
 8001752:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001756:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800175a:	f7fe ff4d 	bl	80005f8 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe fd8f 	bl	8000288 <__aeabi_dsub>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0

    // Find the maximum absolute value among the motor speeds
    double maxM = fmax(fabs(M1), fmax(fabs(M2), fmax(fabs(M3), fabs(M4))));
 8001772:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001776:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800177c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001780:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001782:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001786:	633b      	str	r3, [r7, #48]	@ 0x30
 8001788:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800178c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001790:	637b      	str	r3, [r7, #52]	@ 0x34
 8001792:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001796:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800179c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80017a6:	623b      	str	r3, [r7, #32]
 80017a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80017ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b2:	ed97 1b08 	vldr	d1, [r7, #32]
 80017b6:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80017ba:	f00c fd18 	bl	800e1ee <fmax>
 80017be:	eeb0 7a40 	vmov.f32	s14, s0
 80017c2:	eef0 7a60 	vmov.f32	s15, s1
 80017c6:	eeb0 1a47 	vmov.f32	s2, s14
 80017ca:	eef0 1a67 	vmov.f32	s3, s15
 80017ce:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80017d2:	f00c fd0c 	bl	800e1ee <fmax>
 80017d6:	eeb0 7a40 	vmov.f32	s14, s0
 80017da:	eef0 7a60 	vmov.f32	s15, s1
 80017de:	eeb0 1a47 	vmov.f32	s2, s14
 80017e2:	eef0 1a67 	vmov.f32	s3, s15
 80017e6:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80017ea:	f00c fd00 	bl	800e1ee <fmax>
 80017ee:	ed87 0b2a 	vstr	d0, [r7, #168]	@ 0xa8

    // Scale the motor speeds to fit within the allowed range if necessary
    if (maxM > wheelMaxSpeed) {
 80017f2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 80017f6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80017fa:	f7ff f98d 	bl	8000b18 <__aeabi_dcmpgt>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d031      	beq.n	8001868 <baru+0x290>
        double scale = wheelMaxSpeed / maxM;
 8001804:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001808:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800180c:	f7ff f81e 	bl	800084c <__aeabi_ddiv>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
        M1 *= scale;
 8001818:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800181c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001820:	f7fe feea 	bl	80005f8 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
        M2 *= scale;
 800182c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001830:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001834:	f7fe fee0 	bl	80005f8 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
        M3 *= scale;
 8001840:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001844:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001848:	f7fe fed6 	bl	80005f8 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
        M4 *= scale;
 8001854:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001858:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800185c:	f7fe fecc 	bl	80005f8 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
    }

    // Apply a minimum threshold for movement to overcome static friction
    double minThreshold = 500;
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	4ba8      	ldr	r3, [pc, #672]	@ (8001b10 <baru+0x538>)
 800186e:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    double V1 = (fabs(M1) > minThreshold) ? M1 : (M1 < 0) ? -minThreshold : ((M1 > 0) ? minThreshold : 0);
 8001872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800187c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001886:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800188a:	f7ff f927 	bl	8000adc <__aeabi_dcmplt>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <baru+0x2c6>
 8001894:	ed97 7b36 	vldr	d7, [r7, #216]	@ 0xd8
 8001898:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800189c:	e027      	b.n	80018ee <baru+0x316>
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80018aa:	f7ff f917 	bl	8000adc <__aeabi_dcmplt>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <baru+0x2ee>
 80018b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80018b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80018be:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80018c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80018c4:	e013      	b.n	80018ee <baru+0x316>
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80018d2:	f7ff f921 	bl	8000b18 <__aeabi_dcmpgt>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <baru+0x30e>
 80018dc:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 80018e0:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80018e4:	e003      	b.n	80018ee <baru+0x316>
 80018e6:	ed9f 7b88 	vldr	d7, [pc, #544]	@ 8001b08 <baru+0x530>
 80018ea:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80018ee:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80018f2:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
    double V2 = (fabs(M2) > minThreshold) ? M2 : (M2 < 0) ? -minThreshold : ((M2 > 0) ? minThreshold : 0);
 80018f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800190a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800190e:	f7ff f8e5 	bl	8000adc <__aeabi_dcmplt>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d004      	beq.n	8001922 <baru+0x34a>
 8001918:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 800191c:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001920:	e027      	b.n	8001972 <baru+0x39a>
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800192e:	f7ff f8d5 	bl	8000adc <__aeabi_dcmplt>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <baru+0x372>
 8001938:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800193c:	653b      	str	r3, [r7, #80]	@ 0x50
 800193e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001942:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001946:	657b      	str	r3, [r7, #84]	@ 0x54
 8001948:	e013      	b.n	8001972 <baru+0x39a>
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001956:	f7ff f8df 	bl	8000b18 <__aeabi_dcmpgt>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <baru+0x392>
 8001960:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 8001964:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001968:	e003      	b.n	8001972 <baru+0x39a>
 800196a:	ed9f 7b67 	vldr	d7, [pc, #412]	@ 8001b08 <baru+0x530>
 800196e:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001972:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001976:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    double V3 = (fabs(M3) > minThreshold) ? M3 : (M3 < 0) ? -minThreshold : ((M3 > 0) ? minThreshold : 0);
 800197a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001984:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800198e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001992:	f7ff f8a3 	bl	8000adc <__aeabi_dcmplt>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <baru+0x3ce>
 800199c:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 80019a0:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80019a4:	e027      	b.n	80019f6 <baru+0x41e>
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80019b2:	f7ff f893 	bl	8000adc <__aeabi_dcmplt>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <baru+0x3f6>
 80019bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019c6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80019ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019cc:	e013      	b.n	80019f6 <baru+0x41e>
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80019da:	f7ff f89d 	bl	8000b18 <__aeabi_dcmpgt>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <baru+0x416>
 80019e4:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 80019e8:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80019ec:	e003      	b.n	80019f6 <baru+0x41e>
 80019ee:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 8001b08 <baru+0x530>
 80019f2:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80019f6:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80019fa:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    double V4 = (fabs(M4) > minThreshold) ? M4 : (M4 < 0) ? -minThreshold : ((M4 > 0) ? minThreshold : 0);
 80019fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a12:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001a16:	f7ff f861 	bl	8000adc <__aeabi_dcmplt>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <baru+0x452>
 8001a20:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 8001a24:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001a28:	e027      	b.n	8001a7a <baru+0x4a2>
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001a36:	f7ff f851 	bl	8000adc <__aeabi_dcmplt>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <baru+0x47a>
 8001a40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a4a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001a4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a50:	e013      	b.n	8001a7a <baru+0x4a2>
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001a5e:	f7ff f85b 	bl	8000b18 <__aeabi_dcmpgt>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d004      	beq.n	8001a72 <baru+0x49a>
 8001a68:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 8001a6c:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001a70:	e003      	b.n	8001a7a <baru+0x4a2>
 8001a72:	ed9f 7b25 	vldr	d7, [pc, #148]	@ 8001b08 <baru+0x530>
 8001a76:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001a7a:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001a7e:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78

    // Set the motor speeds
    setMotorSpeed(6, (int)V1);
 8001a82:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001a86:	f7ff f867 	bl	8000b58 <__aeabi_d2iz>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd49 	bl	8000524 <__aeabi_i2d>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	ec43 2b10 	vmov	d0, r2, r3
 8001a9a:	2006      	movs	r0, #6
 8001a9c:	f7ff fade 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, (int)V2);
 8001aa0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001aa4:	f7ff f858 	bl	8000b58 <__aeabi_d2iz>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fd3a 	bl	8000524 <__aeabi_i2d>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	ec43 2b10 	vmov	d0, r2, r3
 8001ab8:	2008      	movs	r0, #8
 8001aba:	f7ff facf 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, (int)V3);
 8001abe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001ac2:	f7ff f849 	bl	8000b58 <__aeabi_d2iz>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd2b 	bl	8000524 <__aeabi_i2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	ec43 2b10 	vmov	d0, r2, r3
 8001ad6:	2004      	movs	r0, #4
 8001ad8:	f7ff fac0 	bl	800105c <setMotorSpeed>
    setMotorSpeed(5, (int)V4);
 8001adc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001ae0:	f7ff f83a 	bl	8000b58 <__aeabi_d2iz>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd1c 	bl	8000524 <__aeabi_i2d>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	ec43 2b10 	vmov	d0, r2, r3
 8001af4:	2005      	movs	r0, #5
 8001af6:	f7ff fab1 	bl	800105c <setMotorSpeed>
}
 8001afa:	bf00      	nop
 8001afc:	37e0      	adds	r7, #224	@ 0xe0
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bdb0      	pop	{r4, r5, r7, pc}
 8001b02:	bf00      	nop
 8001b04:	f3af 8000 	nop.w
	...
 8001b10:	407f4000 	.word	0x407f4000
 8001b14:	66666666 	.word	0x66666666
 8001b18:	401e6666 	.word	0x401e6666
 8001b1c:	00000000 	.word	0x00000000
 8001b20:	40a38800 	.word	0x40a38800
 8001b24:	667f3bcc 	.word	0x667f3bcc
 8001b28:	bfe6a09e 	.word	0xbfe6a09e
 8001b2c:	667f3bcd 	.word	0x667f3bcd
 8001b30:	3fe6a09e 	.word	0x3fe6a09e
 8001b34:	667f3bcd 	.word	0x667f3bcd
 8001b38:	bfe6a09e 	.word	0xbfe6a09e
 8001b3c:	667f3bcc 	.word	0x667f3bcc
 8001b40:	3fe6a09e 	.word	0x3fe6a09e
 8001b44:	667f3bce 	.word	0x667f3bce
 8001b48:	bfe6a09e 	.word	0xbfe6a09e
 8001b4c:	667f3bce 	.word	0x667f3bce
 8001b50:	3fe6a09e 	.word	0x3fe6a09e
 8001b54:	667f3bcb 	.word	0x667f3bcb
 8001b58:	3fe6a09e 	.word	0x3fe6a09e
 8001b5c:	00000000 	.word	0x00000000

08001b60 <putar>:

void putar(int Vx, int Vy, int W)
{
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	ed2d 8b02 	vpush	{d8}
 8001b66:	b098      	sub	sp, #96	@ 0x60
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
     double R = 7.6;
 8001b70:	f20f 43f4 	addw	r3, pc, #1268	@ 0x4f4
 8001b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b78:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
     int minSpeed = 400;
 8001b7c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001b80:	657b      	str	r3, [r7, #84]	@ 0x54
     int maxSpeed = 1000;
 8001b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b86:	653b      	str	r3, [r7, #80]	@ 0x50

     double M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f7fe fccb 	bl	8000524 <__aeabi_i2d>
 8001b8e:	f20f 43e0 	addw	r3, pc, #1248	@ 0x4e0
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fd2f 	bl	80005f8 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4614      	mov	r4, r2
 8001ba0:	461d      	mov	r5, r3
 8001ba2:	68b8      	ldr	r0, [r7, #8]
 8001ba4:	f7fe fcbe 	bl	8000524 <__aeabi_i2d>
 8001ba8:	f20f 43cc 	addw	r3, pc, #1228	@ 0x4cc
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	f7fe fd22 	bl	80005f8 <__aeabi_dmul>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4620      	mov	r0, r4
 8001bba:	4629      	mov	r1, r5
 8001bbc:	f7fe fb66 	bl	800028c <__adddf3>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4614      	mov	r4, r2
 8001bc6:	461d      	mov	r5, r3
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7fe fcab 	bl	8000524 <__aeabi_i2d>
 8001bce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001bd2:	f7fe fd11 	bl	80005f8 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fb53 	bl	8000288 <__aeabi_dsub>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
     double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7fe fc9a 	bl	8000524 <__aeabi_i2d>
 8001bf0:	f20f 438c 	addw	r3, pc, #1164	@ 0x48c
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	f7fe fcfe 	bl	80005f8 <__aeabi_dmul>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4614      	mov	r4, r2
 8001c02:	461d      	mov	r5, r3
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f7fe fc8d 	bl	8000524 <__aeabi_i2d>
 8001c0a:	f20f 4364 	addw	r3, pc, #1124	@ 0x464
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fcf1 	bl	80005f8 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	f7fe fb35 	bl	800028c <__adddf3>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4614      	mov	r4, r2
 8001c28:	461d      	mov	r5, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fc7a 	bl	8000524 <__aeabi_i2d>
 8001c30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c34:	f7fe fce0 	bl	80005f8 <__aeabi_dmul>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	4629      	mov	r1, r5
 8001c40:	f7fe fb22 	bl	8000288 <__aeabi_dsub>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
     double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7fe fc69 	bl	8000524 <__aeabi_i2d>
 8001c52:	f20f 4334 	addw	r3, pc, #1076	@ 0x434
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f7fe fccd 	bl	80005f8 <__aeabi_dmul>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4614      	mov	r4, r2
 8001c64:	461d      	mov	r5, r3
 8001c66:	68b8      	ldr	r0, [r7, #8]
 8001c68:	f7fe fc5c 	bl	8000524 <__aeabi_i2d>
 8001c6c:	f20f 4320 	addw	r3, pc, #1056	@ 0x420
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe fcc0 	bl	80005f8 <__aeabi_dmul>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	4629      	mov	r1, r5
 8001c80:	f7fe fb04 	bl	800028c <__adddf3>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4614      	mov	r4, r2
 8001c8a:	461d      	mov	r5, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7fe fc49 	bl	8000524 <__aeabi_i2d>
 8001c92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c96:	f7fe fcaf 	bl	80005f8 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	f7fe faf1 	bl	8000288 <__aeabi_dsub>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
     double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f7fe fc38 	bl	8000524 <__aeabi_i2d>
 8001cb4:	a3f8      	add	r3, pc, #992	@ (adr r3, 8002098 <putar+0x538>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fc9d 	bl	80005f8 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4614      	mov	r4, r2
 8001cc4:	461d      	mov	r5, r3
 8001cc6:	68b8      	ldr	r0, [r7, #8]
 8001cc8:	f7fe fc2c 	bl	8000524 <__aeabi_i2d>
 8001ccc:	a3f4      	add	r3, pc, #976	@ (adr r3, 80020a0 <putar+0x540>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fc91 	bl	80005f8 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4620      	mov	r0, r4
 8001cdc:	4629      	mov	r1, r5
 8001cde:	f7fe fad5 	bl	800028c <__adddf3>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4614      	mov	r4, r2
 8001ce8:	461d      	mov	r5, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fc1a 	bl	8000524 <__aeabi_i2d>
 8001cf0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001cf4:	f7fe fc80 	bl	80005f8 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	4629      	mov	r1, r5
 8001d00:	f7fe fac2 	bl	8000288 <__aeabi_dsub>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

     double V1 = (M1 > minSpeed || M1 < -minSpeed) ? fmin(fmax(M1, -maxSpeed), maxSpeed) : ((M1 < -0) ? -minSpeed : ((M1 > 0) ? minSpeed : 0));
 8001d0c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001d0e:	f7fe fc09 	bl	8000524 <__aeabi_i2d>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001d1a:	f7fe fefd 	bl	8000b18 <__aeabi_dcmpgt>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10d      	bne.n	8001d40 <putar+0x1e0>
 8001d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d26:	425b      	negs	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fbfb 	bl	8000524 <__aeabi_i2d>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001d36:	f7fe fed1 	bl	8000adc <__aeabi_dcmplt>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d020      	beq.n	8001d82 <putar+0x222>
 8001d40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d42:	425b      	negs	r3, r3
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fbed 	bl	8000524 <__aeabi_i2d>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	ec43 2b11 	vmov	d1, r2, r3
 8001d52:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001d56:	f00c fa4a 	bl	800e1ee <fmax>
 8001d5a:	eeb0 8a40 	vmov.f32	s16, s0
 8001d5e:	eef0 8a60 	vmov.f32	s17, s1
 8001d62:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001d64:	f7fe fbde 	bl	8000524 <__aeabi_i2d>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	ec43 2b11 	vmov	d1, r2, r3
 8001d70:	eeb0 0a48 	vmov.f32	s0, s16
 8001d74:	eef0 0a68 	vmov.f32	s1, s17
 8001d78:	f00c fa63 	bl	800e242 <fmin>
 8001d7c:	ec53 2b10 	vmov	r2, r3, d0
 8001d80:	e027      	b.n	8001dd2 <putar+0x272>
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001d8e:	f7fe fea5 	bl	8000adc <__aeabi_dcmplt>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <putar+0x248>
 8001d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d9a:	425b      	negs	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbc1 	bl	8000524 <__aeabi_i2d>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	e014      	b.n	8001dd2 <putar+0x272>
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001db4:	f7fe feb0 	bl	8000b18 <__aeabi_dcmpgt>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <putar+0x26a>
 8001dbe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001dc0:	f7fe fbb0 	bl	8000524 <__aeabi_i2d>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	e003      	b.n	8001dd2 <putar+0x272>
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
     double V2 = (M2 > minSpeed || M2 < -minSpeed) ? fmin(fmax(M2, -maxSpeed), maxSpeed) : ((M2 < -0) ? -minSpeed : ((M2 > 0) ? minSpeed : 0));
 8001dd6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001dd8:	f7fe fba4 	bl	8000524 <__aeabi_i2d>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001de4:	f7fe fe98 	bl	8000b18 <__aeabi_dcmpgt>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10d      	bne.n	8001e0a <putar+0x2aa>
 8001dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df0:	425b      	negs	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fb96 	bl	8000524 <__aeabi_i2d>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001e00:	f7fe fe6c 	bl	8000adc <__aeabi_dcmplt>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d020      	beq.n	8001e4c <putar+0x2ec>
 8001e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e0c:	425b      	negs	r3, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fb88 	bl	8000524 <__aeabi_i2d>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	ec43 2b11 	vmov	d1, r2, r3
 8001e1c:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8001e20:	f00c f9e5 	bl	800e1ee <fmax>
 8001e24:	eeb0 8a40 	vmov.f32	s16, s0
 8001e28:	eef0 8a60 	vmov.f32	s17, s1
 8001e2c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001e2e:	f7fe fb79 	bl	8000524 <__aeabi_i2d>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	ec43 2b11 	vmov	d1, r2, r3
 8001e3a:	eeb0 0a48 	vmov.f32	s0, s16
 8001e3e:	eef0 0a68 	vmov.f32	s1, s17
 8001e42:	f00c f9fe 	bl	800e242 <fmin>
 8001e46:	ec53 2b10 	vmov	r2, r3, d0
 8001e4a:	e027      	b.n	8001e9c <putar+0x33c>
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001e58:	f7fe fe40 	bl	8000adc <__aeabi_dcmplt>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <putar+0x312>
 8001e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e64:	425b      	negs	r3, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fb5c 	bl	8000524 <__aeabi_i2d>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e014      	b.n	8001e9c <putar+0x33c>
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001e7e:	f7fe fe4b 	bl	8000b18 <__aeabi_dcmpgt>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <putar+0x334>
 8001e88:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001e8a:	f7fe fb4b 	bl	8000524 <__aeabi_i2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	e003      	b.n	8001e9c <putar+0x33c>
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
     double V3 = (M3 > minSpeed || M3 < -minSpeed) ? fmin(fmax(M3, -maxSpeed), maxSpeed) : ((M3 < -0) ? -minSpeed : ((M3 > 0) ? minSpeed : 0));
 8001ea0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001ea2:	f7fe fb3f 	bl	8000524 <__aeabi_i2d>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001eae:	f7fe fe33 	bl	8000b18 <__aeabi_dcmpgt>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10d      	bne.n	8001ed4 <putar+0x374>
 8001eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eba:	425b      	negs	r3, r3
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fb31 	bl	8000524 <__aeabi_i2d>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001eca:	f7fe fe07 	bl	8000adc <__aeabi_dcmplt>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <putar+0x3b6>
 8001ed4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ed6:	425b      	negs	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb23 	bl	8000524 <__aeabi_i2d>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	ec43 2b11 	vmov	d1, r2, r3
 8001ee6:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001eea:	f00c f980 	bl	800e1ee <fmax>
 8001eee:	eeb0 8a40 	vmov.f32	s16, s0
 8001ef2:	eef0 8a60 	vmov.f32	s17, s1
 8001ef6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001ef8:	f7fe fb14 	bl	8000524 <__aeabi_i2d>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	ec43 2b11 	vmov	d1, r2, r3
 8001f04:	eeb0 0a48 	vmov.f32	s0, s16
 8001f08:	eef0 0a68 	vmov.f32	s1, s17
 8001f0c:	f00c f999 	bl	800e242 <fmin>
 8001f10:	ec53 2b10 	vmov	r2, r3, d0
 8001f14:	e027      	b.n	8001f66 <putar+0x406>
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001f22:	f7fe fddb 	bl	8000adc <__aeabi_dcmplt>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <putar+0x3dc>
 8001f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f2e:	425b      	negs	r3, r3
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe faf7 	bl	8000524 <__aeabi_i2d>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	e014      	b.n	8001f66 <putar+0x406>
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001f48:	f7fe fde6 	bl	8000b18 <__aeabi_dcmpgt>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <putar+0x3fe>
 8001f52:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001f54:	f7fe fae6 	bl	8000524 <__aeabi_i2d>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	e003      	b.n	8001f66 <putar+0x406>
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	e9c7 2306 	strd	r2, r3, [r7, #24]
     double V4 = (M4 > minSpeed || M4 < -minSpeed) ? fmin(fmax(M4, -maxSpeed), maxSpeed) : ((M4 < -0) ? -minSpeed : ((M4 > 0) ? minSpeed : 0));
 8001f6a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001f6c:	f7fe fada 	bl	8000524 <__aeabi_i2d>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f78:	f7fe fdce 	bl	8000b18 <__aeabi_dcmpgt>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10d      	bne.n	8001f9e <putar+0x43e>
 8001f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f84:	425b      	negs	r3, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe facc 	bl	8000524 <__aeabi_i2d>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f94:	f7fe fda2 	bl	8000adc <__aeabi_dcmplt>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d020      	beq.n	8001fe0 <putar+0x480>
 8001f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fa0:	425b      	negs	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fabe 	bl	8000524 <__aeabi_i2d>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	ec43 2b11 	vmov	d1, r2, r3
 8001fb0:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8001fb4:	f00c f91b 	bl	800e1ee <fmax>
 8001fb8:	eeb0 8a40 	vmov.f32	s16, s0
 8001fbc:	eef0 8a60 	vmov.f32	s17, s1
 8001fc0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001fc2:	f7fe faaf 	bl	8000524 <__aeabi_i2d>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	ec43 2b11 	vmov	d1, r2, r3
 8001fce:	eeb0 0a48 	vmov.f32	s0, s16
 8001fd2:	eef0 0a68 	vmov.f32	s1, s17
 8001fd6:	f00c f934 	bl	800e242 <fmin>
 8001fda:	ec53 2b10 	vmov	r2, r3, d0
 8001fde:	e027      	b.n	8002030 <putar+0x4d0>
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001fec:	f7fe fd76 	bl	8000adc <__aeabi_dcmplt>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <putar+0x4a6>
 8001ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff8:	425b      	negs	r3, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fa92 	bl	8000524 <__aeabi_i2d>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	e014      	b.n	8002030 <putar+0x4d0>
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002012:	f7fe fd81 	bl	8000b18 <__aeabi_dcmpgt>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <putar+0x4c8>
 800201c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800201e:	f7fe fa81 	bl	8000524 <__aeabi_i2d>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	e003      	b.n	8002030 <putar+0x4d0>
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	e9c7 2304 	strd	r2, r3, [r7, #16]

     setMotorSpeed(6, V1);
 8002034:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8002038:	2006      	movs	r0, #6
 800203a:	f7ff f80f 	bl	800105c <setMotorSpeed>
     setMotorSpeed(8, V2);
 800203e:	ed97 0b08 	vldr	d0, [r7, #32]
 8002042:	2008      	movs	r0, #8
 8002044:	f7ff f80a 	bl	800105c <setMotorSpeed>
     setMotorSpeed(4, V3);
 8002048:	ed97 0b06 	vldr	d0, [r7, #24]
 800204c:	2004      	movs	r0, #4
 800204e:	f7ff f805 	bl	800105c <setMotorSpeed>
     setMotorSpeed(5, V4);
 8002052:	ed97 0b04 	vldr	d0, [r7, #16]
 8002056:	2005      	movs	r0, #5
 8002058:	f7ff f800 	bl	800105c <setMotorSpeed>
}
 800205c:	bf00      	nop
 800205e:	3760      	adds	r7, #96	@ 0x60
 8002060:	46bd      	mov	sp, r7
 8002062:	ecbd 8b02 	vpop	{d8}
 8002066:	bdb0      	pop	{r4, r5, r7, pc}
 8002068:	66666666 	.word	0x66666666
 800206c:	401e6666 	.word	0x401e6666
 8002070:	667f3bcc 	.word	0x667f3bcc
 8002074:	bfe6a09e 	.word	0xbfe6a09e
 8002078:	667f3bcd 	.word	0x667f3bcd
 800207c:	3fe6a09e 	.word	0x3fe6a09e
 8002080:	667f3bcd 	.word	0x667f3bcd
 8002084:	bfe6a09e 	.word	0xbfe6a09e
 8002088:	667f3bcc 	.word	0x667f3bcc
 800208c:	3fe6a09e 	.word	0x3fe6a09e
 8002090:	667f3bce 	.word	0x667f3bce
 8002094:	bfe6a09e 	.word	0xbfe6a09e
 8002098:	667f3bce 	.word	0x667f3bce
 800209c:	3fe6a09e 	.word	0x3fe6a09e
 80020a0:	667f3bcb 	.word	0x667f3bcb
 80020a4:	3fe6a09e 	.word	0x3fe6a09e

080020a8 <lcd_write_nibble>:
#define D7_BIT 7      // Data 7 bit

uint8_t backlight_state = 1;

void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	4603      	mov	r3, r0
 80020b0:	460a      	mov	r2, r1
 80020b2:	71fb      	strb	r3, [r7, #7]
 80020b4:	4613      	mov	r3, r2
 80020b6:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	79bb      	ldrb	r3, [r7, #6]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 80020ca:	4b16      	ldr	r3, [pc, #88]	@ (8002124 <lcd_write_nibble+0x7c>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	b25a      	sxtb	r2, r3
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	b25b      	sxtb	r3, r3
 80020d6:	4313      	orrs	r3, r2
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 80020e8:	f107 020f 	add.w	r2, r7, #15
 80020ec:	2364      	movs	r3, #100	@ 0x64
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	2301      	movs	r3, #1
 80020f2:	214e      	movs	r1, #78	@ 0x4e
 80020f4:	480c      	ldr	r0, [pc, #48]	@ (8002128 <lcd_write_nibble+0x80>)
 80020f6:	f004 fbdd 	bl	80068b4 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 80020fa:	2001      	movs	r0, #1
 80020fc:	f003 fee8 	bl	8005ed0 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	f023 0304 	bic.w	r3, r3, #4
 8002106:	b2db      	uxtb	r3, r3
 8002108:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 800210a:	f107 020f 	add.w	r2, r7, #15
 800210e:	2364      	movs	r3, #100	@ 0x64
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2301      	movs	r3, #1
 8002114:	214e      	movs	r1, #78	@ 0x4e
 8002116:	4804      	ldr	r0, [pc, #16]	@ (8002128 <lcd_write_nibble+0x80>)
 8002118:	f004 fbcc 	bl	80068b4 <HAL_I2C_Master_Transmit>
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200000c8 	.word	0x200000c8
 8002128:	200002d4 	.word	0x200002d4

0800212c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ffad 	bl	80020a8 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 800214e:	7bbb      	ldrb	r3, [r7, #14]
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff ffa8 	bl	80020a8 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d002      	beq.n	8002164 <lcd_send_cmd+0x38>
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d102      	bne.n	800216a <lcd_send_cmd+0x3e>
  {
    HAL_Delay(2);
 8002164:	2002      	movs	r0, #2
 8002166:	f003 feb3 	bl	8005ed0 <HAL_Delay>
  }
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	2101      	movs	r1, #1
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff8a 	bl	80020a8 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	2101      	movs	r1, #1
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff85 	bl	80020a8 <lcd_write_nibble>
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <lcd_init>:

void lcd_init()
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 80021aa:	2032      	movs	r0, #50	@ 0x32
 80021ac:	f003 fe90 	bl	8005ed0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80021b0:	2100      	movs	r1, #0
 80021b2:	2003      	movs	r0, #3
 80021b4:	f7ff ff78 	bl	80020a8 <lcd_write_nibble>
  HAL_Delay(5);
 80021b8:	2005      	movs	r0, #5
 80021ba:	f003 fe89 	bl	8005ed0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80021be:	2100      	movs	r1, #0
 80021c0:	2003      	movs	r0, #3
 80021c2:	f7ff ff71 	bl	80020a8 <lcd_write_nibble>
  HAL_Delay(1);
 80021c6:	2001      	movs	r0, #1
 80021c8:	f003 fe82 	bl	8005ed0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80021cc:	2100      	movs	r1, #0
 80021ce:	2003      	movs	r0, #3
 80021d0:	f7ff ff6a 	bl	80020a8 <lcd_write_nibble>
  HAL_Delay(1);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f003 fe7b 	bl	8005ed0 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 80021da:	2100      	movs	r1, #0
 80021dc:	2002      	movs	r0, #2
 80021de:	f7ff ff63 	bl	80020a8 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 80021e2:	2028      	movs	r0, #40	@ 0x28
 80021e4:	f7ff ffa2 	bl	800212c <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 80021e8:	200c      	movs	r0, #12
 80021ea:	f7ff ff9f 	bl	800212c <lcd_send_cmd>
  lcd_send_cmd(0x06);
 80021ee:	2006      	movs	r0, #6
 80021f0:	f7ff ff9c 	bl	800212c <lcd_send_cmd>
  lcd_send_cmd(0x01);
 80021f4:	2001      	movs	r0, #1
 80021f6:	f7ff ff99 	bl	800212c <lcd_send_cmd>
  HAL_Delay(2);
 80021fa:	2002      	movs	r0, #2
 80021fc:	f003 fe68 	bl	8005ed0 <HAL_Delay>
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  while (*str)
 800220c:	e006      	b.n	800221c <lcd_write_string+0x18>
  {
    lcd_send_data(*str++);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ffab 	bl	8002172 <lcd_send_data>
  while (*str)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f4      	bne.n	800220e <lcd_write_string+0xa>
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	460a      	mov	r2, r1
 800223a:	71fb      	strb	r3, [r7, #7]
 800223c:	4613      	mov	r3, r2
 800223e:	71bb      	strb	r3, [r7, #6]
  uint8_t address;
  switch (row)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d816      	bhi.n	8002274 <lcd_set_cursor+0x44>
 8002246:	a201      	add	r2, pc, #4	@ (adr r2, 800224c <lcd_set_cursor+0x1c>)
 8002248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224c:	0800225d 	.word	0x0800225d
 8002250:	08002263 	.word	0x08002263
 8002254:	08002269 	.word	0x08002269
 8002258:	0800226f 	.word	0x0800226f
  {
  case 0:
    address = 0x00;
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
    break;
 8002260:	e00a      	b.n	8002278 <lcd_set_cursor+0x48>
  case 1:
    address = 0x40;
 8002262:	2340      	movs	r3, #64	@ 0x40
 8002264:	73fb      	strb	r3, [r7, #15]
    break;
 8002266:	e007      	b.n	8002278 <lcd_set_cursor+0x48>
  case 2:
    address = 0x14;
 8002268:	2314      	movs	r3, #20
 800226a:	73fb      	strb	r3, [r7, #15]
    break;
 800226c:	e004      	b.n	8002278 <lcd_set_cursor+0x48>
  case 3:
    address = 0x54;
 800226e:	2354      	movs	r3, #84	@ 0x54
 8002270:	73fb      	strb	r3, [r7, #15]
    break;
 8002272:	e001      	b.n	8002278 <lcd_set_cursor+0x48>
  default:
    address = 0x00;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
  }
  address += column;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	79bb      	ldrb	r3, [r7, #6]
 800227c:	4413      	add	r3, r2
 800227e:	73fb      	strb	r3, [r7, #15]
  lcd_send_cmd(0x80 | address);
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002286:	b2db      	uxtb	r3, r3
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff4f 	bl	800212c <lcd_send_cmd>
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop

08002298 <lcd_clear>:

void lcd_clear(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x01);
 800229c:	2001      	movs	r0, #1
 800229e:	f7ff ff45 	bl	800212c <lcd_send_cmd>
  HAL_Delay(2);
 80022a2:	2002      	movs	r0, #2
 80022a4:	f003 fe14 	bl	8005ed0 <HAL_Delay>
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
movingState mode = VOID;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	80fb      	strh	r3, [r7, #6]
	// ENCODER
	if((GPIO_Pin == EB_1_Pin) && (HAL_GPIO_ReadPin(EB_1_GPIO_Port, EB_1_Pin) == GPIO_PIN_SET))
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d11d      	bne.n	80022f8 <HAL_GPIO_EXTI_Callback+0x4c>
 80022bc:	2108      	movs	r1, #8
 80022be:	4890      	ldr	r0, [pc, #576]	@ (8002500 <HAL_GPIO_EXTI_Callback+0x254>)
 80022c0:	f004 f96a 	bl	8006598 <HAL_GPIO_ReadPin>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d116      	bne.n	80022f8 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		HAL_GPIO_ReadPin(EA_1_GPIO_Port, EA_1_Pin) ? counter1-- : counter1++;
 80022ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022ce:	488d      	ldr	r0, [pc, #564]	@ (8002504 <HAL_GPIO_EXTI_Callback+0x258>)
 80022d0:	f004 f962 	bl	8006598 <HAL_GPIO_ReadPin>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_GPIO_EXTI_Callback+0x3a>
 80022da:	4b8b      	ldr	r3, [pc, #556]	@ (8002508 <HAL_GPIO_EXTI_Callback+0x25c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3b01      	subs	r3, #1
 80022e0:	4a89      	ldr	r2, [pc, #548]	@ (8002508 <HAL_GPIO_EXTI_Callback+0x25c>)
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e004      	b.n	80022f0 <HAL_GPIO_EXTI_Callback+0x44>
 80022e6:	4b88      	ldr	r3, [pc, #544]	@ (8002508 <HAL_GPIO_EXTI_Callback+0x25c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	3301      	adds	r3, #1
 80022ec:	4a86      	ldr	r2, [pc, #536]	@ (8002508 <HAL_GPIO_EXTI_Callback+0x25c>)
 80022ee:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_1_Pin);
 80022f0:	4b86      	ldr	r3, [pc, #536]	@ (800250c <HAL_GPIO_EXTI_Callback+0x260>)
 80022f2:	2208      	movs	r2, #8
 80022f4:	615a      	str	r2, [r3, #20]
 80022f6:	e15b      	b.n	80025b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_2_Pin) && (HAL_GPIO_ReadPin(EB_2_GPIO_Port, EB_2_Pin) == GPIO_PIN_SET))
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d11c      	bne.n	8002338 <HAL_GPIO_EXTI_Callback+0x8c>
 80022fe:	2102      	movs	r1, #2
 8002300:	4883      	ldr	r0, [pc, #524]	@ (8002510 <HAL_GPIO_EXTI_Callback+0x264>)
 8002302:	f004 f949 	bl	8006598 <HAL_GPIO_ReadPin>
 8002306:	4603      	mov	r3, r0
 8002308:	2b01      	cmp	r3, #1
 800230a:	d115      	bne.n	8002338 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		HAL_GPIO_ReadPin(EA_2_GPIO_Port, EA_2_Pin) ? counter2-- : counter2++;
 800230c:	2101      	movs	r1, #1
 800230e:	4880      	ldr	r0, [pc, #512]	@ (8002510 <HAL_GPIO_EXTI_Callback+0x264>)
 8002310:	f004 f942 	bl	8006598 <HAL_GPIO_ReadPin>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_GPIO_EXTI_Callback+0x7a>
 800231a:	4b7e      	ldr	r3, [pc, #504]	@ (8002514 <HAL_GPIO_EXTI_Callback+0x268>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3b01      	subs	r3, #1
 8002320:	4a7c      	ldr	r2, [pc, #496]	@ (8002514 <HAL_GPIO_EXTI_Callback+0x268>)
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e004      	b.n	8002330 <HAL_GPIO_EXTI_Callback+0x84>
 8002326:	4b7b      	ldr	r3, [pc, #492]	@ (8002514 <HAL_GPIO_EXTI_Callback+0x268>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3301      	adds	r3, #1
 800232c:	4a79      	ldr	r2, [pc, #484]	@ (8002514 <HAL_GPIO_EXTI_Callback+0x268>)
 800232e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_2_Pin);
 8002330:	4b76      	ldr	r3, [pc, #472]	@ (800250c <HAL_GPIO_EXTI_Callback+0x260>)
 8002332:	2202      	movs	r2, #2
 8002334:	615a      	str	r2, [r3, #20]
 8002336:	e13b      	b.n	80025b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_3_Pin) && (HAL_GPIO_ReadPin(EB_3_GPIO_Port, EB_3_Pin) == GPIO_PIN_SET))
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	2b20      	cmp	r3, #32
 800233c:	d11c      	bne.n	8002378 <HAL_GPIO_EXTI_Callback+0xcc>
 800233e:	2120      	movs	r1, #32
 8002340:	486f      	ldr	r0, [pc, #444]	@ (8002500 <HAL_GPIO_EXTI_Callback+0x254>)
 8002342:	f004 f929 	bl	8006598 <HAL_GPIO_ReadPin>
 8002346:	4603      	mov	r3, r0
 8002348:	2b01      	cmp	r3, #1
 800234a:	d115      	bne.n	8002378 <HAL_GPIO_EXTI_Callback+0xcc>
	{
		HAL_GPIO_ReadPin(EA_3_GPIO_Port, EA_3_Pin) ? counter3-- : counter3++;
 800234c:	2110      	movs	r1, #16
 800234e:	486c      	ldr	r0, [pc, #432]	@ (8002500 <HAL_GPIO_EXTI_Callback+0x254>)
 8002350:	f004 f922 	bl	8006598 <HAL_GPIO_ReadPin>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_GPIO_EXTI_Callback+0xba>
 800235a:	4b6f      	ldr	r3, [pc, #444]	@ (8002518 <HAL_GPIO_EXTI_Callback+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3b01      	subs	r3, #1
 8002360:	4a6d      	ldr	r2, [pc, #436]	@ (8002518 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	e004      	b.n	8002370 <HAL_GPIO_EXTI_Callback+0xc4>
 8002366:	4b6c      	ldr	r3, [pc, #432]	@ (8002518 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3301      	adds	r3, #1
 800236c:	4a6a      	ldr	r2, [pc, #424]	@ (8002518 <HAL_GPIO_EXTI_Callback+0x26c>)
 800236e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_3_Pin);
 8002370:	4b66      	ldr	r3, [pc, #408]	@ (800250c <HAL_GPIO_EXTI_Callback+0x260>)
 8002372:	2220      	movs	r2, #32
 8002374:	615a      	str	r2, [r3, #20]
 8002376:	e11b      	b.n	80025b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_1_Pin) && (HAL_GPIO_ReadPin(EinB_1_GPIO_Port, EinB_1_Pin) == GPIO_PIN_SET))
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	2b04      	cmp	r3, #4
 800237c:	d11c      	bne.n	80023b8 <HAL_GPIO_EXTI_Callback+0x10c>
 800237e:	2104      	movs	r1, #4
 8002380:	4863      	ldr	r0, [pc, #396]	@ (8002510 <HAL_GPIO_EXTI_Callback+0x264>)
 8002382:	f004 f909 	bl	8006598 <HAL_GPIO_ReadPin>
 8002386:	4603      	mov	r3, r0
 8002388:	2b01      	cmp	r3, #1
 800238a:	d115      	bne.n	80023b8 <HAL_GPIO_EXTI_Callback+0x10c>
	{
		HAL_GPIO_ReadPin(EinA_1_GPIO_Port, EinA_1_Pin) ? counterIN1++ : counterIN1--;
 800238c:	2108      	movs	r1, #8
 800238e:	4860      	ldr	r0, [pc, #384]	@ (8002510 <HAL_GPIO_EXTI_Callback+0x264>)
 8002390:	f004 f902 	bl	8006598 <HAL_GPIO_ReadPin>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_GPIO_EXTI_Callback+0xfa>
 800239a:	4b60      	ldr	r3, [pc, #384]	@ (800251c <HAL_GPIO_EXTI_Callback+0x270>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3301      	adds	r3, #1
 80023a0:	4a5e      	ldr	r2, [pc, #376]	@ (800251c <HAL_GPIO_EXTI_Callback+0x270>)
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	e004      	b.n	80023b0 <HAL_GPIO_EXTI_Callback+0x104>
 80023a6:	4b5d      	ldr	r3, [pc, #372]	@ (800251c <HAL_GPIO_EXTI_Callback+0x270>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	4a5b      	ldr	r2, [pc, #364]	@ (800251c <HAL_GPIO_EXTI_Callback+0x270>)
 80023ae:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_1_Pin);
 80023b0:	4b56      	ldr	r3, [pc, #344]	@ (800250c <HAL_GPIO_EXTI_Callback+0x260>)
 80023b2:	2204      	movs	r2, #4
 80023b4:	615a      	str	r2, [r3, #20]
 80023b6:	e0fb      	b.n	80025b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_2_Pin) && (HAL_GPIO_ReadPin(EinB_2_GPIO_Port, EinB_2_Pin) == GPIO_PIN_SET))
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d11c      	bne.n	80023f8 <HAL_GPIO_EXTI_Callback+0x14c>
 80023be:	2101      	movs	r1, #1
 80023c0:	4850      	ldr	r0, [pc, #320]	@ (8002504 <HAL_GPIO_EXTI_Callback+0x258>)
 80023c2:	f004 f8e9 	bl	8006598 <HAL_GPIO_ReadPin>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d115      	bne.n	80023f8 <HAL_GPIO_EXTI_Callback+0x14c>
	{
		HAL_GPIO_ReadPin(EinA_2_GPIO_Port, EinA_2_Pin) ? counterIN2-- : counterIN2++;
 80023cc:	2102      	movs	r1, #2
 80023ce:	484d      	ldr	r0, [pc, #308]	@ (8002504 <HAL_GPIO_EXTI_Callback+0x258>)
 80023d0:	f004 f8e2 	bl	8006598 <HAL_GPIO_ReadPin>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_GPIO_EXTI_Callback+0x13a>
 80023da:	4b51      	ldr	r3, [pc, #324]	@ (8002520 <HAL_GPIO_EXTI_Callback+0x274>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3b01      	subs	r3, #1
 80023e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002520 <HAL_GPIO_EXTI_Callback+0x274>)
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	e004      	b.n	80023f0 <HAL_GPIO_EXTI_Callback+0x144>
 80023e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002520 <HAL_GPIO_EXTI_Callback+0x274>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	3301      	adds	r3, #1
 80023ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002520 <HAL_GPIO_EXTI_Callback+0x274>)
 80023ee:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_2_Pin);
 80023f0:	4b46      	ldr	r3, [pc, #280]	@ (800250c <HAL_GPIO_EXTI_Callback+0x260>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	615a      	str	r2, [r3, #20]
 80023f6:	e0db      	b.n	80025b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_3_Pin) && (HAL_GPIO_ReadPin(EinB_3_GPIO_Port, EinB_3_Pin) == GPIO_PIN_SET))
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023fe:	d11f      	bne.n	8002440 <HAL_GPIO_EXTI_Callback+0x194>
 8002400:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002404:	4847      	ldr	r0, [pc, #284]	@ (8002524 <HAL_GPIO_EXTI_Callback+0x278>)
 8002406:	f004 f8c7 	bl	8006598 <HAL_GPIO_ReadPin>
 800240a:	4603      	mov	r3, r0
 800240c:	2b01      	cmp	r3, #1
 800240e:	d117      	bne.n	8002440 <HAL_GPIO_EXTI_Callback+0x194>
	{
		HAL_GPIO_ReadPin(EinA_3_GPIO_Port, EinA_3_Pin) ? counterIN3++ : counterIN3--;
 8002410:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002414:	4843      	ldr	r0, [pc, #268]	@ (8002524 <HAL_GPIO_EXTI_Callback+0x278>)
 8002416:	f004 f8bf 	bl	8006598 <HAL_GPIO_ReadPin>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_GPIO_EXTI_Callback+0x180>
 8002420:	4b41      	ldr	r3, [pc, #260]	@ (8002528 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	4a40      	ldr	r2, [pc, #256]	@ (8002528 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e004      	b.n	8002436 <HAL_GPIO_EXTI_Callback+0x18a>
 800242c:	4b3e      	ldr	r3, [pc, #248]	@ (8002528 <HAL_GPIO_EXTI_Callback+0x27c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3b01      	subs	r3, #1
 8002432:	4a3d      	ldr	r2, [pc, #244]	@ (8002528 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002434:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_3_Pin);
 8002436:	4b35      	ldr	r3, [pc, #212]	@ (800250c <HAL_GPIO_EXTI_Callback+0x260>)
 8002438:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800243c:	615a      	str	r2, [r3, #20]
 800243e:	e0b7      	b.n	80025b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_4_Pin) && (HAL_GPIO_ReadPin(EinB_4_GPIO_Port, EinB_4_Pin) == GPIO_PIN_SET))
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002446:	d11f      	bne.n	8002488 <HAL_GPIO_EXTI_Callback+0x1dc>
 8002448:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800244c:	482d      	ldr	r0, [pc, #180]	@ (8002504 <HAL_GPIO_EXTI_Callback+0x258>)
 800244e:	f004 f8a3 	bl	8006598 <HAL_GPIO_ReadPin>
 8002452:	4603      	mov	r3, r0
 8002454:	2b01      	cmp	r3, #1
 8002456:	d117      	bne.n	8002488 <HAL_GPIO_EXTI_Callback+0x1dc>
	{
		HAL_GPIO_ReadPin(EinA_4_GPIO_Port, EinA_4_Pin) ? counterIN4-- : counterIN4++;
 8002458:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800245c:	4829      	ldr	r0, [pc, #164]	@ (8002504 <HAL_GPIO_EXTI_Callback+0x258>)
 800245e:	f004 f89b 	bl	8006598 <HAL_GPIO_ReadPin>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_GPIO_EXTI_Callback+0x1c8>
 8002468:	4b30      	ldr	r3, [pc, #192]	@ (800252c <HAL_GPIO_EXTI_Callback+0x280>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3b01      	subs	r3, #1
 800246e:	4a2f      	ldr	r2, [pc, #188]	@ (800252c <HAL_GPIO_EXTI_Callback+0x280>)
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e004      	b.n	800247e <HAL_GPIO_EXTI_Callback+0x1d2>
 8002474:	4b2d      	ldr	r3, [pc, #180]	@ (800252c <HAL_GPIO_EXTI_Callback+0x280>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3301      	adds	r3, #1
 800247a:	4a2c      	ldr	r2, [pc, #176]	@ (800252c <HAL_GPIO_EXTI_Callback+0x280>)
 800247c:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_4_Pin);
 800247e:	4b23      	ldr	r3, [pc, #140]	@ (800250c <HAL_GPIO_EXTI_Callback+0x260>)
 8002480:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002484:	615a      	str	r2, [r3, #20]
 8002486:	e093      	b.n	80025b0 <HAL_GPIO_EXTI_Callback+0x304>
	}

	// BUTTON
	else if((GPIO_Pin == Button_1_Pin) && (HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin) == GPIO_PIN_RESET))
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800248e:	d119      	bne.n	80024c4 <HAL_GPIO_EXTI_Callback+0x218>
 8002490:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002494:	4826      	ldr	r0, [pc, #152]	@ (8002530 <HAL_GPIO_EXTI_Callback+0x284>)
 8002496:	f004 f87f 	bl	8006598 <HAL_GPIO_ReadPin>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d111      	bne.n	80024c4 <HAL_GPIO_EXTI_Callback+0x218>
	{
		mode = mode + STEP1;
 80024a0:	4b24      	ldr	r3, [pc, #144]	@ (8002534 <HAL_GPIO_EXTI_Callback+0x288>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	3301      	adds	r3, #1
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b22      	ldr	r3, [pc, #136]	@ (8002534 <HAL_GPIO_EXTI_Callback+0x288>)
 80024aa:	701a      	strb	r2, [r3, #0]
		if(mode > STEP1)
 80024ac:	4b21      	ldr	r3, [pc, #132]	@ (8002534 <HAL_GPIO_EXTI_Callback+0x288>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d902      	bls.n	80024ba <HAL_GPIO_EXTI_Callback+0x20e>
		{
			mode = VOID;
 80024b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002534 <HAL_GPIO_EXTI_Callback+0x288>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_1_Pin);
 80024ba:	4b14      	ldr	r3, [pc, #80]	@ (800250c <HAL_GPIO_EXTI_Callback+0x260>)
 80024bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024c0:	615a      	str	r2, [r3, #20]
 80024c2:	e075      	b.n	80025b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_2_Pin) && (HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin) == GPIO_PIN_RESET))
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ca:	d135      	bne.n	8002538 <HAL_GPIO_EXTI_Callback+0x28c>
 80024cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024d0:	4817      	ldr	r0, [pc, #92]	@ (8002530 <HAL_GPIO_EXTI_Callback+0x284>)
 80024d2:	f004 f861 	bl	8006598 <HAL_GPIO_ReadPin>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d12d      	bne.n	8002538 <HAL_GPIO_EXTI_Callback+0x28c>
	{
		mode = mode + STEP1;
 80024dc:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <HAL_GPIO_EXTI_Callback+0x288>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <HAL_GPIO_EXTI_Callback+0x288>)
 80024e6:	701a      	strb	r2, [r3, #0]
		if(mode > STEP1)
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_GPIO_EXTI_Callback+0x288>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d902      	bls.n	80024f6 <HAL_GPIO_EXTI_Callback+0x24a>
		{
			mode = VOID;
 80024f0:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <HAL_GPIO_EXTI_Callback+0x288>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_2_Pin);
 80024f6:	4b05      	ldr	r3, [pc, #20]	@ (800250c <HAL_GPIO_EXTI_Callback+0x260>)
 80024f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024fc:	615a      	str	r2, [r3, #20]
 80024fe:	e057      	b.n	80025b0 <HAL_GPIO_EXTI_Callback+0x304>
 8002500:	40020400 	.word	0x40020400
 8002504:	40020000 	.word	0x40020000
 8002508:	200004d8 	.word	0x200004d8
 800250c:	40013c00 	.word	0x40013c00
 8002510:	40020800 	.word	0x40020800
 8002514:	200004dc 	.word	0x200004dc
 8002518:	200004e0 	.word	0x200004e0
 800251c:	200004e4 	.word	0x200004e4
 8002520:	200004e8 	.word	0x200004e8
 8002524:	40020c00 	.word	0x40020c00
 8002528:	200004ec 	.word	0x200004ec
 800252c:	200004f0 	.word	0x200004f0
 8002530:	40021000 	.word	0x40021000
 8002534:	20000600 	.word	0x20000600
	}
	else if((GPIO_Pin == Button_3_Pin) && (HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin) == GPIO_PIN_RESET))
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800253e:	d119      	bne.n	8002574 <HAL_GPIO_EXTI_Callback+0x2c8>
 8002540:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002544:	481c      	ldr	r0, [pc, #112]	@ (80025b8 <HAL_GPIO_EXTI_Callback+0x30c>)
 8002546:	f004 f827 	bl	8006598 <HAL_GPIO_ReadPin>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d111      	bne.n	8002574 <HAL_GPIO_EXTI_Callback+0x2c8>
	{
		mode = mode + MAJU;
 8002550:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <HAL_GPIO_EXTI_Callback+0x310>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	3305      	adds	r3, #5
 8002556:	b2da      	uxtb	r2, r3
 8002558:	4b18      	ldr	r3, [pc, #96]	@ (80025bc <HAL_GPIO_EXTI_Callback+0x310>)
 800255a:	701a      	strb	r2, [r3, #0]
		if(mode > MAJU)
 800255c:	4b17      	ldr	r3, [pc, #92]	@ (80025bc <HAL_GPIO_EXTI_Callback+0x310>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b05      	cmp	r3, #5
 8002562:	d902      	bls.n	800256a <HAL_GPIO_EXTI_Callback+0x2be>
		{
			mode = VOID;
 8002564:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <HAL_GPIO_EXTI_Callback+0x310>)
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_3_Pin);
 800256a:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x314>)
 800256c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002570:	615a      	str	r2, [r3, #20]
 8002572:	e01d      	b.n	80025b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_4_Pin) && (HAL_GPIO_ReadPin(Button_4_GPIO_Port, Button_4_Pin) == GPIO_PIN_RESET))
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800257a:	d119      	bne.n	80025b0 <HAL_GPIO_EXTI_Callback+0x304>
 800257c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002580:	4810      	ldr	r0, [pc, #64]	@ (80025c4 <HAL_GPIO_EXTI_Callback+0x318>)
 8002582:	f004 f809 	bl	8006598 <HAL_GPIO_ReadPin>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d111      	bne.n	80025b0 <HAL_GPIO_EXTI_Callback+0x304>
	{
		mode = mode + MAJU;
 800258c:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <HAL_GPIO_EXTI_Callback+0x310>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	3305      	adds	r3, #5
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <HAL_GPIO_EXTI_Callback+0x310>)
 8002596:	701a      	strb	r2, [r3, #0]
		if(mode > MAJU)
 8002598:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <HAL_GPIO_EXTI_Callback+0x310>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b05      	cmp	r3, #5
 800259e:	d902      	bls.n	80025a6 <HAL_GPIO_EXTI_Callback+0x2fa>
		{
			mode = VOID;
 80025a0:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_GPIO_EXTI_Callback+0x310>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_4_Pin);
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x314>)
 80025a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80025ac:	615a      	str	r2, [r3, #20]
	}
}
 80025ae:	e7ff      	b.n	80025b0 <HAL_GPIO_EXTI_Callback+0x304>
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	20000600 	.word	0x20000600
 80025c0:	40013c00 	.word	0x40013c00
 80025c4:	40020c00 	.word	0x40020c00

080025c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025cc:	f5ad 7d5f 	sub.w	sp, sp, #892	@ 0x37c
 80025d0:	af24      	add	r7, sp, #144	@ 0x90
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025d2:	f003 fc0b 	bl	8005dec <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025d6:	f000 fc5b 	bl	8002e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025da:	f000 ff79 	bl	80034d0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80025de:	f000 fcc1 	bl	8002f64 <MX_I2C2_Init>
  MX_TIM1_Init();
 80025e2:	f000 fced 	bl	8002fc0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80025e6:	f000 fdaf 	bl	8003148 <MX_TIM2_Init>
  MX_TIM8_Init();
 80025ea:	f000 fe2f 	bl	800324c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80025ee:	f000 fef1 	bl	80033d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025f2:	f000 ff19 	bl	8003428 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025f6:	f000 ff41 	bl	800347c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80025fa:	2100      	movs	r1, #0
 80025fc:	48d2      	ldr	r0, [pc, #840]	@ (8002948 <main+0x380>)
 80025fe:	f005 f9f3 	bl	80079e8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8002602:	2104      	movs	r1, #4
 8002604:	48d0      	ldr	r0, [pc, #832]	@ (8002948 <main+0x380>)
 8002606:	f005 f9ef 	bl	80079e8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 800260a:	2108      	movs	r1, #8
 800260c:	48ce      	ldr	r0, [pc, #824]	@ (8002948 <main+0x380>)
 800260e:	f005 f9eb 	bl	80079e8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8002612:	210c      	movs	r1, #12
 8002614:	48cc      	ldr	r0, [pc, #816]	@ (8002948 <main+0x380>)
 8002616:	f005 f9e7 	bl	80079e8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 800261a:	2100      	movs	r1, #0
 800261c:	48cb      	ldr	r0, [pc, #812]	@ (800294c <main+0x384>)
 800261e:	f005 f9e3 	bl	80079e8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2);
 8002622:	2104      	movs	r1, #4
 8002624:	48c9      	ldr	r0, [pc, #804]	@ (800294c <main+0x384>)
 8002626:	f005 f9df 	bl	80079e8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 800262a:	2108      	movs	r1, #8
 800262c:	48c7      	ldr	r0, [pc, #796]	@ (800294c <main+0x384>)
 800262e:	f005 f9db 	bl	80079e8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4);
 8002632:	210c      	movs	r1, #12
 8002634:	48c5      	ldr	r0, [pc, #788]	@ (800294c <main+0x384>)
 8002636:	f005 f9d7 	bl	80079e8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 800263a:	2108      	movs	r1, #8
 800263c:	48c4      	ldr	r0, [pc, #784]	@ (8002950 <main+0x388>)
 800263e:	f005 f9d3 	bl	80079e8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8002642:	210c      	movs	r1, #12
 8002644:	48c2      	ldr	r0, [pc, #776]	@ (8002950 <main+0x388>)
 8002646:	f005 f9cf 	bl	80079e8 <HAL_TIM_PWM_Start_IT>

  HAL_UART_Receive_IT(&huart1, receive, 1);
 800264a:	2201      	movs	r2, #1
 800264c:	49c1      	ldr	r1, [pc, #772]	@ (8002954 <main+0x38c>)
 800264e:	48c2      	ldr	r0, [pc, #776]	@ (8002958 <main+0x390>)
 8002650:	f006 f9da 	bl	8008a08 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, receiveCAM, 1);
 8002654:	2201      	movs	r2, #1
 8002656:	49c1      	ldr	r1, [pc, #772]	@ (800295c <main+0x394>)
 8002658:	48c1      	ldr	r0, [pc, #772]	@ (8002960 <main+0x398>)
 800265a:	f006 f9d5 	bl	8008a08 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, receiveMEGA, 1);
 800265e:	2201      	movs	r2, #1
 8002660:	49c0      	ldr	r1, [pc, #768]	@ (8002964 <main+0x39c>)
 8002662:	48c1      	ldr	r0, [pc, #772]	@ (8002968 <main+0x3a0>)
 8002664:	f006 f9d0 	bl	8008a08 <HAL_UART_Receive_IT>

  initializeSilos();
 8002668:	f002 fad6 	bl	8004c18 <initializeSilos>

  robotPosition step1 = {0.0, 6700.0, 0.0};
 800266c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002670:	2250      	movs	r2, #80	@ 0x50
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f008 ff20 	bl	800b4ba <memset>
 800267a:	a3a7      	add	r3, pc, #668	@ (adr r3, 8002918 <main+0x350>)
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	e9c7 23a2 	strd	r2, r3, [r7, #648]	@ 0x288
  robotPosition step2 = {4200.0, 6700.0, 0.0};
 8002684:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8002688:	2250      	movs	r2, #80	@ 0x50
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f008 ff14 	bl	800b4ba <memset>
 8002692:	a3a3      	add	r3, pc, #652	@ (adr r3, 8002920 <main+0x358>)
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
 800269c:	a39e      	add	r3, pc, #632	@ (adr r3, 8002918 <main+0x350>)
 800269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a2:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
  robotPosition step3 = {4200.0, 9500.0, 0.0};
 80026a6:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80026aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80026ae:	4618      	mov	r0, r3
 80026b0:	2350      	movs	r3, #80	@ 0x50
 80026b2:	461a      	mov	r2, r3
 80026b4:	2100      	movs	r1, #0
 80026b6:	f008 ff00 	bl	800b4ba <memset>
 80026ba:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80026be:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80026c2:	a397      	add	r3, pc, #604	@ (adr r3, 8002920 <main+0x358>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	e9c1 2300 	strd	r2, r3, [r1]
 80026cc:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80026d0:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80026d4:	a394      	add	r3, pc, #592	@ (adr r3, 8002928 <main+0x360>)
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	e9c1 2302 	strd	r2, r3, [r1, #8]
  robotPosition step4 = {4200.0, 9500.0, -90.0};
 80026de:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80026e2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80026e6:	4618      	mov	r0, r3
 80026e8:	2350      	movs	r3, #80	@ 0x50
 80026ea:	461a      	mov	r2, r3
 80026ec:	2100      	movs	r1, #0
 80026ee:	f008 fee4 	bl	800b4ba <memset>
 80026f2:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80026f6:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 80026fa:	a389      	add	r3, pc, #548	@ (adr r3, 8002920 <main+0x358>)
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	e9c1 2300 	strd	r2, r3, [r1]
 8002704:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002708:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 800270c:	a386      	add	r3, pc, #536	@ (adr r3, 8002928 <main+0x360>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002716:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800271a:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	4b92      	ldr	r3, [pc, #584]	@ (800296c <main+0x3a4>)
 8002724:	e9c1 2304 	strd	r2, r3, [r1, #16]
  robotPosition tes = {0.0, 2000.0, 0.0};
 8002728:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800272c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002730:	4618      	mov	r0, r3
 8002732:	2350      	movs	r3, #80	@ 0x50
 8002734:	461a      	mov	r2, r3
 8002736:	2100      	movs	r1, #0
 8002738:	f008 febf 	bl	800b4ba <memset>
 800273c:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002740:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	4b89      	ldr	r3, [pc, #548]	@ (8002970 <main+0x3a8>)
 800274a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  robotPosition maju = {-2600.0, 0.0, -90.0};
 800274e:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002752:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002756:	4618      	mov	r0, r3
 8002758:	2350      	movs	r3, #80	@ 0x50
 800275a:	461a      	mov	r2, r3
 800275c:	2100      	movs	r1, #0
 800275e:	f008 feac 	bl	800b4ba <memset>
 8002762:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002766:	f5a3 71fc 	sub.w	r1, r3, #504	@ 0x1f8
 800276a:	a371      	add	r3, pc, #452	@ (adr r3, 8002930 <main+0x368>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	e9c1 2300 	strd	r2, r3, [r1]
 8002774:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002778:	f5a3 71fc 	sub.w	r1, r3, #504	@ 0x1f8
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	4b7a      	ldr	r3, [pc, #488]	@ (800296c <main+0x3a4>)
 8002782:	e9c1 2304 	strd	r2, r3, [r1, #16]
  robotPosition initialPos = {0.0, 0.0, 90.0};
 8002786:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800278a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800278e:	4618      	mov	r0, r3
 8002790:	2350      	movs	r3, #80	@ 0x50
 8002792:	461a      	mov	r2, r3
 8002794:	2100      	movs	r1, #0
 8002796:	f008 fe90 	bl	800b4ba <memset>
 800279a:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800279e:	f5a3 7112 	sub.w	r1, r3, #584	@ 0x248
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	4b73      	ldr	r3, [pc, #460]	@ (8002974 <main+0x3ac>)
 80027a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
  robotPosition findBall = {-500.0, 0.0, -90.0};
 80027ac:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80027b0:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80027b4:	4618      	mov	r0, r3
 80027b6:	2350      	movs	r3, #80	@ 0x50
 80027b8:	461a      	mov	r2, r3
 80027ba:	2100      	movs	r1, #0
 80027bc:	f008 fe7d 	bl	800b4ba <memset>
 80027c0:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80027c4:	f5a3 7126 	sub.w	r1, r3, #664	@ 0x298
 80027c8:	a35b      	add	r3, pc, #364	@ (adr r3, 8002938 <main+0x370>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	e9c1 2300 	strd	r2, r3, [r1]
 80027d2:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80027d6:	f5a3 7126 	sub.w	r1, r3, #664	@ 0x298
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	4b63      	ldr	r3, [pc, #396]	@ (800296c <main+0x3a4>)
 80027e0:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_init();
 80027e4:	f7ff fcdf 	bl	80021a6 <lcd_init>
	  robotPosition position = odometry();
 80027e8:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80027ec:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80027f0:	4618      	mov	r0, r3
 80027f2:	f001 f925 	bl	8003a40 <odometry>
	  displayPosition(position, global);
 80027f6:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80027fa:	f5a3 763a 	sub.w	r6, r3, #744	@ 0x2e8
 80027fe:	2301      	movs	r3, #1
 8002800:	9310      	str	r3, [sp, #64]	@ 0x40
 8002802:	466d      	mov	r5, sp
 8002804:	f106 0410 	add.w	r4, r6, #16
 8002808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002814:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002818:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800281c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002820:	f001 fc80 	bl	8004124 <displayPosition>
//	  displayKalman(position);
//	  displayCounter();

	  int frontLeftDistance = sensorMEGA[0];
 8002824:	4b54      	ldr	r3, [pc, #336]	@ (8002978 <main+0x3b0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
	  int frontRightDistance = sensorMEGA[1];
 800282c:	4b52      	ldr	r3, [pc, #328]	@ (8002978 <main+0x3b0>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
	  int tolerance = 400;
 8002834:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002838:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc

	  bool step1_check = atTargetPosition(step1, position, tolerance, 1);
 800283c:	f8d7 02dc 	ldr.w	r0, [r7, #732]	@ 0x2dc
 8002840:	f7fd fe70 	bl	8000524 <__aeabi_i2d>
 8002844:	4680      	mov	r8, r0
 8002846:	4689      	mov	r9, r1
 8002848:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800284c:	f5a3 723a 	sub.w	r2, r3, #744	@ 0x2e8
 8002850:	ab10      	add	r3, sp, #64	@ 0x40
 8002852:	4611      	mov	r1, r2
 8002854:	2250      	movs	r2, #80	@ 0x50
 8002856:	4618      	mov	r0, r3
 8002858:	f008 ff1d 	bl	800b696 <memcpy>
 800285c:	466d      	mov	r5, sp
 800285e:	f507 7424 	add.w	r4, r7, #656	@ 0x290
 8002862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002872:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002876:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800287a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800287c:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 8002940 <main+0x378>
 8002880:	ec49 8b10 	vmov	d0, r8, r9
 8002884:	f001 ff6c 	bl	8004760 <atTargetPosition>
 8002888:	4603      	mov	r3, r0
 800288a:	f887 32db 	strb.w	r3, [r7, #731]	@ 0x2db
	  bool step2_check = atTargetPosition(step2, position, tolerance, 1);
 800288e:	f8d7 02dc 	ldr.w	r0, [r7, #732]	@ 0x2dc
 8002892:	f7fd fe47 	bl	8000524 <__aeabi_i2d>
 8002896:	4680      	mov	r8, r0
 8002898:	4689      	mov	r9, r1
 800289a:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800289e:	f5a3 723a 	sub.w	r2, r3, #744	@ 0x2e8
 80028a2:	ab10      	add	r3, sp, #64	@ 0x40
 80028a4:	4611      	mov	r1, r2
 80028a6:	2250      	movs	r2, #80	@ 0x50
 80028a8:	4618      	mov	r0, r3
 80028aa:	f008 fef4 	bl	800b696 <memcpy>
 80028ae:	466d      	mov	r5, sp
 80028b0:	f507 7410 	add.w	r4, r7, #576	@ 0x240
 80028b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80028c8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80028cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ce:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8002940 <main+0x378>
 80028d2:	ec49 8b10 	vmov	d0, r8, r9
 80028d6:	f001 ff43 	bl	8004760 <atTargetPosition>
 80028da:	4603      	mov	r3, r0
 80028dc:	f887 32da 	strb.w	r3, [r7, #730]	@ 0x2da
	  bool step3_check = atTargetPosition(step3, position, tolerance, 1);
 80028e0:	f8d7 02dc 	ldr.w	r0, [r7, #732]	@ 0x2dc
 80028e4:	f7fd fe1e 	bl	8000524 <__aeabi_i2d>
 80028e8:	4680      	mov	r8, r0
 80028ea:	4689      	mov	r9, r1
 80028ec:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80028f0:	f5a3 7684 	sub.w	r6, r3, #264	@ 0x108
 80028f4:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80028f8:	f5a3 723a 	sub.w	r2, r3, #744	@ 0x2e8
 80028fc:	ab10      	add	r3, sp, #64	@ 0x40
 80028fe:	4611      	mov	r1, r2
 8002900:	2250      	movs	r2, #80	@ 0x50
 8002902:	4618      	mov	r0, r3
 8002904:	f008 fec7 	bl	800b696 <memcpy>
 8002908:	466d      	mov	r5, sp
 800290a:	f106 0410 	add.w	r4, r6, #16
 800290e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002910:	e034      	b.n	800297c <main+0x3b4>
 8002912:	bf00      	nop
 8002914:	f3af 8000 	nop.w
 8002918:	00000000 	.word	0x00000000
 800291c:	40ba2c00 	.word	0x40ba2c00
 8002920:	00000000 	.word	0x00000000
 8002924:	40b06800 	.word	0x40b06800
 8002928:	00000000 	.word	0x00000000
 800292c:	40c28e00 	.word	0x40c28e00
 8002930:	00000000 	.word	0x00000000
 8002934:	c0a45000 	.word	0xc0a45000
 8002938:	00000000 	.word	0x00000000
 800293c:	c07f4000 	.word	0xc07f4000
 8002940:	00000000 	.word	0x00000000
 8002944:	3ff00000 	.word	0x3ff00000
 8002948:	20000328 	.word	0x20000328
 800294c:	200003b8 	.word	0x200003b8
 8002950:	20000370 	.word	0x20000370
 8002954:	200004f4 	.word	0x200004f4
 8002958:	20000400 	.word	0x20000400
 800295c:	20000540 	.word	0x20000540
 8002960:	20000448 	.word	0x20000448
 8002964:	200005b0 	.word	0x200005b0
 8002968:	20000490 	.word	0x20000490
 800296c:	c0568000 	.word	0xc0568000
 8002970:	409f4000 	.word	0x409f4000
 8002974:	40568000 	.word	0x40568000
 8002978:	200005ec 	.word	0x200005ec
 800297c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800297e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002986:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800298a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800298e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002992:	ed9f 1bc7 	vldr	d1, [pc, #796]	@ 8002cb0 <main+0x6e8>
 8002996:	ec49 8b10 	vmov	d0, r8, r9
 800299a:	f001 fee1 	bl	8004760 <atTargetPosition>
 800299e:	4603      	mov	r3, r0
 80029a0:	f887 32d9 	strb.w	r3, [r7, #729]	@ 0x2d9
	  bool step4_check = atTargetPosition(step4, position, tolerance, 1);
 80029a4:	f8d7 02dc 	ldr.w	r0, [r7, #732]	@ 0x2dc
 80029a8:	f7fd fdbc 	bl	8000524 <__aeabi_i2d>
 80029ac:	4680      	mov	r8, r0
 80029ae:	4689      	mov	r9, r1
 80029b0:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80029b4:	f5a3 76ac 	sub.w	r6, r3, #344	@ 0x158
 80029b8:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80029bc:	f5a3 723a 	sub.w	r2, r3, #744	@ 0x2e8
 80029c0:	ab10      	add	r3, sp, #64	@ 0x40
 80029c2:	4611      	mov	r1, r2
 80029c4:	2250      	movs	r2, #80	@ 0x50
 80029c6:	4618      	mov	r0, r3
 80029c8:	f008 fe65 	bl	800b696 <memcpy>
 80029cc:	466d      	mov	r5, sp
 80029ce:	f106 0410 	add.w	r4, r6, #16
 80029d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80029e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029ea:	ed9f 1bb1 	vldr	d1, [pc, #708]	@ 8002cb0 <main+0x6e8>
 80029ee:	ec49 8b10 	vmov	d0, r8, r9
 80029f2:	f001 feb5 	bl	8004760 <atTargetPosition>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f887 32d8 	strb.w	r3, [r7, #728]	@ 0x2d8
	  bool maju_check = atTargetPosition(maju, position, tolerance+200, 1);
 80029fc:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8002a00:	33c8      	adds	r3, #200	@ 0xc8
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd fd8e 	bl	8000524 <__aeabi_i2d>
 8002a08:	4680      	mov	r8, r0
 8002a0a:	4689      	mov	r9, r1
 8002a0c:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002a10:	f5a3 76fc 	sub.w	r6, r3, #504	@ 0x1f8
 8002a14:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002a18:	f5a3 723a 	sub.w	r2, r3, #744	@ 0x2e8
 8002a1c:	ab10      	add	r3, sp, #64	@ 0x40
 8002a1e:	4611      	mov	r1, r2
 8002a20:	2250      	movs	r2, #80	@ 0x50
 8002a22:	4618      	mov	r0, r3
 8002a24:	f008 fe37 	bl	800b696 <memcpy>
 8002a28:	466d      	mov	r5, sp
 8002a2a:	f106 0410 	add.w	r4, r6, #16
 8002a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a3e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a42:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a46:	ed9f 1b9a 	vldr	d1, [pc, #616]	@ 8002cb0 <main+0x6e8>
 8002a4a:	ec49 8b10 	vmov	d0, r8, r9
 8002a4e:	f001 fe87 	bl	8004760 <atTargetPosition>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f887 32d7 	strb.w	r3, [r7, #727]	@ 0x2d7
	  bool initialPos_check = atTargetPosition(initialPos, position, tolerance+200, 1);
 8002a58:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8002a5c:	33c8      	adds	r3, #200	@ 0xc8
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd fd60 	bl	8000524 <__aeabi_i2d>
 8002a64:	4680      	mov	r8, r0
 8002a66:	4689      	mov	r9, r1
 8002a68:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002a6c:	f5a3 7612 	sub.w	r6, r3, #584	@ 0x248
 8002a70:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002a74:	f5a3 723a 	sub.w	r2, r3, #744	@ 0x2e8
 8002a78:	ab10      	add	r3, sp, #64	@ 0x40
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	2250      	movs	r2, #80	@ 0x50
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f008 fe09 	bl	800b696 <memcpy>
 8002a84:	466d      	mov	r5, sp
 8002a86:	f106 0410 	add.w	r4, r6, #16
 8002a8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a9a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a9e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002aa2:	ed9f 1b83 	vldr	d1, [pc, #524]	@ 8002cb0 <main+0x6e8>
 8002aa6:	ec49 8b10 	vmov	d0, r8, r9
 8002aaa:	f001 fe59 	bl	8004760 <atTargetPosition>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f887 32d6 	strb.w	r3, [r7, #726]	@ 0x2d6

	  switch(mode)
 8002ab4:	4b86      	ldr	r3, [pc, #536]	@ (8002cd0 <main+0x708>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	f200 819f 	bhi.w	8002dfe <main+0x836>
 8002ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac8 <main+0x500>)
 8002ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac6:	bf00      	nop
 8002ac8:	08002aed 	.word	0x08002aed
 8002acc:	08002b2b 	.word	0x08002b2b
 8002ad0:	08002b69 	.word	0x08002b69
 8002ad4:	08002bad 	.word	0x08002bad
 8002ad8:	08002bf1 	.word	0x08002bf1
 8002adc:	08002c5f 	.word	0x08002c5f
 8002ae0:	08002cdd 	.word	0x08002cdd
 8002ae4:	08002d45 	.word	0x08002d45
 8002ae8:	08002dcb 	.word	0x08002dcb
	  {
	  case STEP1:
		  PID_KFtocoordinate(step1, 1, 0.8);
 8002aec:	2301      	movs	r3, #1
 8002aee:	9310      	str	r3, [sp, #64]	@ 0x40
 8002af0:	466d      	mov	r5, sp
 8002af2:	f507 7424 	add.w	r4, r7, #656	@ 0x290
 8002af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002afe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b06:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002b0a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b10:	ed9f 0b69 	vldr	d0, [pc, #420]	@ 8002cb8 <main+0x6f0>
 8002b14:	f001 fe90 	bl	8004838 <PID_KFtocoordinate>
		  if(step1_check)
 8002b18:	f897 32db 	ldrb.w	r3, [r7, #731]	@ 0x2db
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8189 	beq.w	8002e34 <main+0x86c>
		  {
			  mode = STEP2;
 8002b22:	4b6b      	ldr	r3, [pc, #428]	@ (8002cd0 <main+0x708>)
 8002b24:	2202      	movs	r2, #2
 8002b26:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002b28:	e184      	b.n	8002e34 <main+0x86c>
	  case STEP2:
		  PID_KFtocoordinate(step2, 1, 0.8);
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	9310      	str	r3, [sp, #64]	@ 0x40
 8002b2e:	466d      	mov	r5, sp
 8002b30:	f507 7410 	add.w	r4, r7, #576	@ 0x240
 8002b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b44:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002b48:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8002b4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b4e:	ed9f 0b5a 	vldr	d0, [pc, #360]	@ 8002cb8 <main+0x6f0>
 8002b52:	f001 fe71 	bl	8004838 <PID_KFtocoordinate>
		  if(step2_check)
 8002b56:	f897 32da 	ldrb.w	r3, [r7, #730]	@ 0x2da
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 816c 	beq.w	8002e38 <main+0x870>
		  {
			  mode = STEP3;
 8002b60:	4b5b      	ldr	r3, [pc, #364]	@ (8002cd0 <main+0x708>)
 8002b62:	2203      	movs	r2, #3
 8002b64:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002b66:	e167      	b.n	8002e38 <main+0x870>
	  case STEP3:
		  PID_KFtocoordinate(step3, 1, 0.8);
 8002b68:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002b6c:	f5a3 7684 	sub.w	r6, r3, #264	@ 0x108
 8002b70:	2301      	movs	r3, #1
 8002b72:	9310      	str	r3, [sp, #64]	@ 0x40
 8002b74:	466d      	mov	r5, sp
 8002b76:	f106 0410 	add.w	r4, r6, #16
 8002b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b8a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002b8e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002b92:	ed9f 0b49 	vldr	d0, [pc, #292]	@ 8002cb8 <main+0x6f0>
 8002b96:	f001 fe4f 	bl	8004838 <PID_KFtocoordinate>
		  if(step3_check)
 8002b9a:	f897 32d9 	ldrb.w	r3, [r7, #729]	@ 0x2d9
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 814c 	beq.w	8002e3c <main+0x874>
		  {
			  mode = STEP4;
 8002ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd0 <main+0x708>)
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002baa:	e147      	b.n	8002e3c <main+0x874>
	  case STEP4:
		  PID_KFtocoordinate(step4, 1, 0.8);
 8002bac:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002bb0:	f5a3 76ac 	sub.w	r6, r3, #344	@ 0x158
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8002bb8:	466d      	mov	r5, sp
 8002bba:	f106 0410 	add.w	r4, r6, #16
 8002bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002bce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002bd2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002bd6:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 8002cb8 <main+0x6f0>
 8002bda:	f001 fe2d 	bl	8004838 <PID_KFtocoordinate>
		  if(step4_check)
 8002bde:	f897 32d8 	ldrb.w	r3, [r7, #728]	@ 0x2d8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 812c 	beq.w	8002e40 <main+0x878>
		  {
			  mode = FIND_BALL;
 8002be8:	4b39      	ldr	r3, [pc, #228]	@ (8002cd0 <main+0x708>)
 8002bea:	2206      	movs	r2, #6
 8002bec:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002bee:	e127      	b.n	8002e40 <main+0x878>
	  case MAJU:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002bf6:	4837      	ldr	r0, [pc, #220]	@ (8002cd4 <main+0x70c>)
 8002bf8:	f003 fce6 	bl	80065c8 <HAL_GPIO_WritePin>
		  setMotorSpeed(1, 0);
 8002bfc:	ed9f 0b30 	vldr	d0, [pc, #192]	@ 8002cc0 <main+0x6f8>
 8002c00:	2001      	movs	r0, #1
 8002c02:	f7fe fa2b 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8002c06:	ed9f 0b2e 	vldr	d0, [pc, #184]	@ 8002cc0 <main+0x6f8>
 8002c0a:	2002      	movs	r0, #2
 8002c0c:	f7fe fa26 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 8002c10:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8002cc0 <main+0x6f8>
 8002c14:	2007      	movs	r0, #7
 8002c16:	f7fe fa21 	bl	800105c <setMotorSpeed>
		  PID_KFtocoordinate(maju, 1, 0.5);
 8002c1a:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002c1e:	f5a3 76fc 	sub.w	r6, r3, #504	@ 0x1f8
 8002c22:	2301      	movs	r3, #1
 8002c24:	9310      	str	r3, [sp, #64]	@ 0x40
 8002c26:	466d      	mov	r5, sp
 8002c28:	f106 0410 	add.w	r4, r6, #16
 8002c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c3c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002c40:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002c44:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 8002cc8 <main+0x700>
 8002c48:	f001 fdf6 	bl	8004838 <PID_KFtocoordinate>
		  if(maju_check)
 8002c4c:	f897 32d7 	ldrb.w	r3, [r7, #727]	@ 0x2d7
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80f7 	beq.w	8002e44 <main+0x87c>
		  {
			  mode = FIND_BALL;
 8002c56:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd0 <main+0x708>)
 8002c58:	2206      	movs	r2, #6
 8002c5a:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002c5c:	e0f2      	b.n	8002e44 <main+0x87c>
	  case FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c64:	481b      	ldr	r0, [pc, #108]	@ (8002cd4 <main+0x70c>)
 8002c66:	f003 fcaf 	bl	80065c8 <HAL_GPIO_WritePin>
		  findAndTakeBall(findBall, 2);
 8002c6a:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002c6e:	f5a3 7626 	sub.w	r6, r3, #664	@ 0x298
 8002c72:	2302      	movs	r3, #2
 8002c74:	9310      	str	r3, [sp, #64]	@ 0x40
 8002c76:	466d      	mov	r5, sp
 8002c78:	f106 0410 	add.w	r4, r6, #16
 8002c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c8c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002c90:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002c94:	f002 fafc 	bl	8005290 <findAndTakeBall>
		  if(sensorMEGA[4] == 0)
 8002c98:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd8 <main+0x710>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f040 80d3 	bne.w	8002e48 <main+0x880>
		  {
			  mode = FACING_SILO;
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <main+0x708>)
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002ca8:	e0ce      	b.n	8002e48 <main+0x880>
 8002caa:	bf00      	nop
 8002cac:	f3af 8000 	nop.w
 8002cb0:	00000000 	.word	0x00000000
 8002cb4:	3ff00000 	.word	0x3ff00000
 8002cb8:	9999999a 	.word	0x9999999a
 8002cbc:	3fe99999 	.word	0x3fe99999
	...
 8002ccc:	3fe00000 	.word	0x3fe00000
 8002cd0:	20000600 	.word	0x20000600
 8002cd4:	40020c00 	.word	0x40020c00
 8002cd8:	200005ec 	.word	0x200005ec
	  case FACING_SILO:
		  setMotorSpeed(1, 0);
 8002cdc:	ed9f 0b5e 	vldr	d0, [pc, #376]	@ 8002e58 <main+0x890>
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f7fe f9bb 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8002ce6:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 8002e58 <main+0x890>
 8002cea:	2002      	movs	r0, #2
 8002cec:	f7fe f9b6 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 8002cf0:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 8002e58 <main+0x890>
 8002cf4:	2007      	movs	r0, #7
 8002cf6:	f7fe f9b1 	bl	800105c <setMotorSpeed>
		  servo_write(126);
 8002cfa:	207e      	movs	r0, #126	@ 0x7e
 8002cfc:	f001 fd82 	bl	8004804 <servo_write>
		  PID_KFtocoordinate(initialPos, 2, 0.6);
 8002d00:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002d04:	f5a3 7612 	sub.w	r6, r3, #584	@ 0x248
 8002d08:	2302      	movs	r3, #2
 8002d0a:	9310      	str	r3, [sp, #64]	@ 0x40
 8002d0c:	466d      	mov	r5, sp
 8002d0e:	f106 0410 	add.w	r4, r6, #16
 8002d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d22:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002d26:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d2a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8002e60 <main+0x898>
 8002d2e:	f001 fd83 	bl	8004838 <PID_KFtocoordinate>
		  if(initialPos_check)
 8002d32:	f897 32d6 	ldrb.w	r3, [r7, #726]	@ 0x2d6
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 8088 	beq.w	8002e4c <main+0x884>
		  {
			  mode = FIND_SILO;
 8002d3c:	4b52      	ldr	r3, [pc, #328]	@ (8002e88 <main+0x8c0>)
 8002d3e:	2208      	movs	r2, #8
 8002d40:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002d42:	e083      	b.n	8002e4c <main+0x884>
	  case FIND_SILO:
		  placeBallInSilo(initialPos, 1);
 8002d44:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002d48:	f5a3 7612 	sub.w	r6, r3, #584	@ 0x248
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8002d50:	466d      	mov	r5, sp
 8002d52:	f106 0410 	add.w	r4, r6, #16
 8002d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d66:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002d6a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d6e:	f002 f9ab 	bl	80050c8 <placeBallInSilo>
		  if((frontLeftDistance > 0 && frontLeftDistance <= 10) || (frontRightDistance > 0 && frontRightDistance <= 10))
 8002d72:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	dd03      	ble.n	8002d82 <main+0x7ba>
 8002d7a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8002d7e:	2b0a      	cmp	r3, #10
 8002d80:	dd07      	ble.n	8002d92 <main+0x7ca>
 8002d82:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	dd62      	ble.n	8002e50 <main+0x888>
 8002d8a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8002d8e:	2b0a      	cmp	r3, #10
 8002d90:	dc5e      	bgt.n	8002e50 <main+0x888>
		  {
			  Inverse_Kinematics(0, 0, 0);
 8002d92:	2200      	movs	r2, #0
 8002d94:	2100      	movs	r1, #0
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7fe f9d6 	bl	8001148 <Inverse_Kinematics>
			  setMotorSpeed(1, -700);
 8002d9c:	ed9f 0b32 	vldr	d0, [pc, #200]	@ 8002e68 <main+0x8a0>
 8002da0:	2001      	movs	r0, #1
 8002da2:	f7fe f95b 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -900);
 8002da6:	ed9f 0b32 	vldr	d0, [pc, #200]	@ 8002e70 <main+0x8a8>
 8002daa:	2002      	movs	r0, #2
 8002dac:	f7fe f956 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -1200);
 8002db0:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 8002e78 <main+0x8b0>
 8002db4:	2007      	movs	r0, #7
 8002db6:	f7fe f951 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 8002dba:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002dbe:	f003 f887 	bl	8005ed0 <HAL_Delay>
			  mode = MAJU;
 8002dc2:	4b31      	ldr	r3, [pc, #196]	@ (8002e88 <main+0x8c0>)
 8002dc4:	2205      	movs	r2, #5
 8002dc6:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002dc8:	e042      	b.n	8002e50 <main+0x888>
	  case TES:
//		  PID_Kalman(tes, 1);
		  PID_KFtocoordinate(tes, 1, 0.8);
 8002dca:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8002dce:	f5a3 76d4 	sub.w	r6, r3, #424	@ 0x1a8
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	9310      	str	r3, [sp, #64]	@ 0x40
 8002dd6:	466d      	mov	r5, sp
 8002dd8:	f106 0410 	add.w	r4, r6, #16
 8002ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002dec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002df0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002df4:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 8002e80 <main+0x8b8>
 8002df8:	f001 fd1e 	bl	8004838 <PID_KFtocoordinate>
		  break;
 8002dfc:	e029      	b.n	8002e52 <main+0x88a>
	  default:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002e04:	4821      	ldr	r0, [pc, #132]	@ (8002e8c <main+0x8c4>)
 8002e06:	f003 fbdf 	bl	80065c8 <HAL_GPIO_WritePin>
		  Inverse_Kinematics(0, 0, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f7fe f99a 	bl	8001148 <Inverse_Kinematics>
		  setMotorSpeed(1, 0);
 8002e14:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 8002e58 <main+0x890>
 8002e18:	2001      	movs	r0, #1
 8002e1a:	f7fe f91f 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8002e1e:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8002e58 <main+0x890>
 8002e22:	2002      	movs	r0, #2
 8002e24:	f7fe f91a 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 8002e28:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 8002e58 <main+0x890>
 8002e2c:	2007      	movs	r0, #7
 8002e2e:	f7fe f915 	bl	800105c <setMotorSpeed>
		  break;
 8002e32:	e00e      	b.n	8002e52 <main+0x88a>
		  break;
 8002e34:	bf00      	nop
 8002e36:	e00c      	b.n	8002e52 <main+0x88a>
		  break;
 8002e38:	bf00      	nop
 8002e3a:	e00a      	b.n	8002e52 <main+0x88a>
		  break;
 8002e3c:	bf00      	nop
 8002e3e:	e008      	b.n	8002e52 <main+0x88a>
		  break;
 8002e40:	bf00      	nop
 8002e42:	e006      	b.n	8002e52 <main+0x88a>
		  break;
 8002e44:	bf00      	nop
 8002e46:	e004      	b.n	8002e52 <main+0x88a>
		  break;
 8002e48:	bf00      	nop
 8002e4a:	e002      	b.n	8002e52 <main+0x88a>
		  break;
 8002e4c:	bf00      	nop
 8002e4e:	e000      	b.n	8002e52 <main+0x88a>
		  break;
 8002e50:	bf00      	nop
	  }
	  lcd_clear();
 8002e52:	f7ff fa21 	bl	8002298 <lcd_clear>
  {
 8002e56:	e4c5      	b.n	80027e4 <main+0x21c>
	...
 8002e60:	33333333 	.word	0x33333333
 8002e64:	3fe33333 	.word	0x3fe33333
 8002e68:	00000000 	.word	0x00000000
 8002e6c:	c085e000 	.word	0xc085e000
 8002e70:	00000000 	.word	0x00000000
 8002e74:	c08c2000 	.word	0xc08c2000
 8002e78:	00000000 	.word	0x00000000
 8002e7c:	c092c000 	.word	0xc092c000
 8002e80:	9999999a 	.word	0x9999999a
 8002e84:	3fe99999 	.word	0x3fe99999
 8002e88:	20000600 	.word	0x20000600
 8002e8c:	40020c00 	.word	0x40020c00

08002e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b094      	sub	sp, #80	@ 0x50
 8002e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e96:	f107 0320 	add.w	r3, r7, #32
 8002e9a:	2230      	movs	r2, #48	@ 0x30
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f008 fb0b 	bl	800b4ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ea4:	f107 030c 	add.w	r3, r7, #12
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	60da      	str	r2, [r3, #12]
 8002eb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	4b28      	ldr	r3, [pc, #160]	@ (8002f5c <SystemClock_Config+0xcc>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebc:	4a27      	ldr	r2, [pc, #156]	@ (8002f5c <SystemClock_Config+0xcc>)
 8002ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ec4:	4b25      	ldr	r3, [pc, #148]	@ (8002f5c <SystemClock_Config+0xcc>)
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	607b      	str	r3, [r7, #4]
 8002ed4:	4b22      	ldr	r3, [pc, #136]	@ (8002f60 <SystemClock_Config+0xd0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a21      	ldr	r2, [pc, #132]	@ (8002f60 <SystemClock_Config+0xd0>)
 8002eda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f60 <SystemClock_Config+0xd0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ee8:	607b      	str	r3, [r7, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002eec:	2301      	movs	r3, #1
 8002eee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ef0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002efa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f00:	2308      	movs	r3, #8
 8002f02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002f04:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002f08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002f0e:	2307      	movs	r3, #7
 8002f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f12:	f107 0320 	add.w	r3, r7, #32
 8002f16:	4618      	mov	r0, r3
 8002f18:	f004 f826 	bl	8006f68 <HAL_RCC_OscConfig>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002f22:	f000 fd87 	bl	8003a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f26:	230f      	movs	r3, #15
 8002f28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f32:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f3e:	f107 030c 	add.w	r3, r7, #12
 8002f42:	2105      	movs	r1, #5
 8002f44:	4618      	mov	r0, r3
 8002f46:	f004 fa87 	bl	8007458 <HAL_RCC_ClockConfig>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002f50:	f000 fd70 	bl	8003a34 <Error_Handler>
  }
}
 8002f54:	bf00      	nop
 8002f56:	3750      	adds	r7, #80	@ 0x50
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40007000 	.word	0x40007000

08002f64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002f68:	4b12      	ldr	r3, [pc, #72]	@ (8002fb4 <MX_I2C2_Init+0x50>)
 8002f6a:	4a13      	ldr	r2, [pc, #76]	@ (8002fb8 <MX_I2C2_Init+0x54>)
 8002f6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002f6e:	4b11      	ldr	r3, [pc, #68]	@ (8002fb4 <MX_I2C2_Init+0x50>)
 8002f70:	4a12      	ldr	r2, [pc, #72]	@ (8002fbc <MX_I2C2_Init+0x58>)
 8002f72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f74:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb4 <MX_I2C2_Init+0x50>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb4 <MX_I2C2_Init+0x50>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f80:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb4 <MX_I2C2_Init+0x50>)
 8002f82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f88:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb4 <MX_I2C2_Init+0x50>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002f8e:	4b09      	ldr	r3, [pc, #36]	@ (8002fb4 <MX_I2C2_Init+0x50>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f94:	4b07      	ldr	r3, [pc, #28]	@ (8002fb4 <MX_I2C2_Init+0x50>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f9a:	4b06      	ldr	r3, [pc, #24]	@ (8002fb4 <MX_I2C2_Init+0x50>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002fa0:	4804      	ldr	r0, [pc, #16]	@ (8002fb4 <MX_I2C2_Init+0x50>)
 8002fa2:	f003 fb43 	bl	800662c <HAL_I2C_Init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002fac:	f000 fd42 	bl	8003a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	200002d4 	.word	0x200002d4
 8002fb8:	40005800 	.word	0x40005800
 8002fbc:	000186a0 	.word	0x000186a0

08002fc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b096      	sub	sp, #88	@ 0x58
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fc6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	60da      	str	r2, [r3, #12]
 8002fec:	611a      	str	r2, [r3, #16]
 8002fee:	615a      	str	r2, [r3, #20]
 8002ff0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ff2:	1d3b      	adds	r3, r7, #4
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f008 fa5e 	bl	800b4ba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ffe:	4b50      	ldr	r3, [pc, #320]	@ (8003140 <MX_TIM1_Init+0x180>)
 8003000:	4a50      	ldr	r2, [pc, #320]	@ (8003144 <MX_TIM1_Init+0x184>)
 8003002:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 33;
 8003004:	4b4e      	ldr	r3, [pc, #312]	@ (8003140 <MX_TIM1_Init+0x180>)
 8003006:	2221      	movs	r2, #33	@ 0x21
 8003008:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300a:	4b4d      	ldr	r3, [pc, #308]	@ (8003140 <MX_TIM1_Init+0x180>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8003010:	4b4b      	ldr	r3, [pc, #300]	@ (8003140 <MX_TIM1_Init+0x180>)
 8003012:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003016:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003018:	4b49      	ldr	r3, [pc, #292]	@ (8003140 <MX_TIM1_Init+0x180>)
 800301a:	2200      	movs	r2, #0
 800301c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800301e:	4b48      	ldr	r3, [pc, #288]	@ (8003140 <MX_TIM1_Init+0x180>)
 8003020:	2200      	movs	r2, #0
 8003022:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003024:	4b46      	ldr	r3, [pc, #280]	@ (8003140 <MX_TIM1_Init+0x180>)
 8003026:	2200      	movs	r2, #0
 8003028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800302a:	4845      	ldr	r0, [pc, #276]	@ (8003140 <MX_TIM1_Init+0x180>)
 800302c:	f004 fc34 	bl	8007898 <HAL_TIM_Base_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003036:	f000 fcfd 	bl	8003a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800303a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800303e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003040:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003044:	4619      	mov	r1, r3
 8003046:	483e      	ldr	r0, [pc, #248]	@ (8003140 <MX_TIM1_Init+0x180>)
 8003048:	f004 ff96 	bl	8007f78 <HAL_TIM_ConfigClockSource>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003052:	f000 fcef 	bl	8003a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003056:	483a      	ldr	r0, [pc, #232]	@ (8003140 <MX_TIM1_Init+0x180>)
 8003058:	f004 fc6d 	bl	8007936 <HAL_TIM_PWM_Init>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003062:	f000 fce7 	bl	8003a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003066:	2300      	movs	r3, #0
 8003068:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800306a:	2300      	movs	r3, #0
 800306c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800306e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003072:	4619      	mov	r1, r3
 8003074:	4832      	ldr	r0, [pc, #200]	@ (8003140 <MX_TIM1_Init+0x180>)
 8003076:	f005 fb95 	bl	80087a4 <HAL_TIMEx_MasterConfigSynchronization>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003080:	f000 fcd8 	bl	8003a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003084:	2360      	movs	r3, #96	@ 0x60
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800308c:	2300      	movs	r3, #0
 800308e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003090:	2300      	movs	r3, #0
 8003092:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003094:	2300      	movs	r3, #0
 8003096:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003098:	2300      	movs	r3, #0
 800309a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800309c:	2300      	movs	r3, #0
 800309e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030a4:	2200      	movs	r2, #0
 80030a6:	4619      	mov	r1, r3
 80030a8:	4825      	ldr	r0, [pc, #148]	@ (8003140 <MX_TIM1_Init+0x180>)
 80030aa:	f004 fea3 	bl	8007df4 <HAL_TIM_PWM_ConfigChannel>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80030b4:	f000 fcbe 	bl	8003a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030bc:	2204      	movs	r2, #4
 80030be:	4619      	mov	r1, r3
 80030c0:	481f      	ldr	r0, [pc, #124]	@ (8003140 <MX_TIM1_Init+0x180>)
 80030c2:	f004 fe97 	bl	8007df4 <HAL_TIM_PWM_ConfigChannel>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80030cc:	f000 fcb2 	bl	8003a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030d4:	2208      	movs	r2, #8
 80030d6:	4619      	mov	r1, r3
 80030d8:	4819      	ldr	r0, [pc, #100]	@ (8003140 <MX_TIM1_Init+0x180>)
 80030da:	f004 fe8b 	bl	8007df4 <HAL_TIM_PWM_ConfigChannel>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80030e4:	f000 fca6 	bl	8003a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030ec:	220c      	movs	r2, #12
 80030ee:	4619      	mov	r1, r3
 80030f0:	4813      	ldr	r0, [pc, #76]	@ (8003140 <MX_TIM1_Init+0x180>)
 80030f2:	f004 fe7f 	bl	8007df4 <HAL_TIM_PWM_ConfigChannel>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80030fc:	f000 fc9a 	bl	8003a34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003100:	2300      	movs	r3, #0
 8003102:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003104:	2300      	movs	r3, #0
 8003106:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003114:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003118:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800311a:	2300      	movs	r3, #0
 800311c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	4619      	mov	r1, r3
 8003122:	4807      	ldr	r0, [pc, #28]	@ (8003140 <MX_TIM1_Init+0x180>)
 8003124:	f005 fbba 	bl	800889c <HAL_TIMEx_ConfigBreakDeadTime>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800312e:	f000 fc81 	bl	8003a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003132:	4803      	ldr	r0, [pc, #12]	@ (8003140 <MX_TIM1_Init+0x180>)
 8003134:	f002 fb58 	bl	80057e8 <HAL_TIM_MspPostInit>

}
 8003138:	bf00      	nop
 800313a:	3758      	adds	r7, #88	@ 0x58
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000328 	.word	0x20000328
 8003144:	40010000 	.word	0x40010000

08003148 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08e      	sub	sp, #56	@ 0x38
 800314c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800314e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800315c:	f107 0320 	add.w	r3, r7, #32
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003166:	1d3b      	adds	r3, r7, #4
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	611a      	str	r2, [r3, #16]
 8003174:	615a      	str	r2, [r3, #20]
 8003176:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003178:	4b33      	ldr	r3, [pc, #204]	@ (8003248 <MX_TIM2_Init+0x100>)
 800317a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800317e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3359;
 8003180:	4b31      	ldr	r3, [pc, #196]	@ (8003248 <MX_TIM2_Init+0x100>)
 8003182:	f640 521f 	movw	r2, #3359	@ 0xd1f
 8003186:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003188:	4b2f      	ldr	r3, [pc, #188]	@ (8003248 <MX_TIM2_Init+0x100>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800318e:	4b2e      	ldr	r3, [pc, #184]	@ (8003248 <MX_TIM2_Init+0x100>)
 8003190:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003194:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003196:	4b2c      	ldr	r3, [pc, #176]	@ (8003248 <MX_TIM2_Init+0x100>)
 8003198:	2200      	movs	r2, #0
 800319a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800319c:	4b2a      	ldr	r3, [pc, #168]	@ (8003248 <MX_TIM2_Init+0x100>)
 800319e:	2200      	movs	r2, #0
 80031a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031a2:	4829      	ldr	r0, [pc, #164]	@ (8003248 <MX_TIM2_Init+0x100>)
 80031a4:	f004 fb78 	bl	8007898 <HAL_TIM_Base_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80031ae:	f000 fc41 	bl	8003a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80031b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031bc:	4619      	mov	r1, r3
 80031be:	4822      	ldr	r0, [pc, #136]	@ (8003248 <MX_TIM2_Init+0x100>)
 80031c0:	f004 feda 	bl	8007f78 <HAL_TIM_ConfigClockSource>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80031ca:	f000 fc33 	bl	8003a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80031ce:	481e      	ldr	r0, [pc, #120]	@ (8003248 <MX_TIM2_Init+0x100>)
 80031d0:	f004 fbb1 	bl	8007936 <HAL_TIM_PWM_Init>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80031da:	f000 fc2b 	bl	8003a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031de:	2300      	movs	r3, #0
 80031e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031e6:	f107 0320 	add.w	r3, r7, #32
 80031ea:	4619      	mov	r1, r3
 80031ec:	4816      	ldr	r0, [pc, #88]	@ (8003248 <MX_TIM2_Init+0x100>)
 80031ee:	f005 fad9 	bl	80087a4 <HAL_TIMEx_MasterConfigSynchronization>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80031f8:	f000 fc1c 	bl	8003a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031fc:	2360      	movs	r3, #96	@ 0x60
 80031fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	2208      	movs	r2, #8
 8003210:	4619      	mov	r1, r3
 8003212:	480d      	ldr	r0, [pc, #52]	@ (8003248 <MX_TIM2_Init+0x100>)
 8003214:	f004 fdee 	bl	8007df4 <HAL_TIM_PWM_ConfigChannel>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800321e:	f000 fc09 	bl	8003a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	220c      	movs	r2, #12
 8003226:	4619      	mov	r1, r3
 8003228:	4807      	ldr	r0, [pc, #28]	@ (8003248 <MX_TIM2_Init+0x100>)
 800322a:	f004 fde3 	bl	8007df4 <HAL_TIM_PWM_ConfigChannel>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003234:	f000 fbfe 	bl	8003a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003238:	4803      	ldr	r0, [pc, #12]	@ (8003248 <MX_TIM2_Init+0x100>)
 800323a:	f002 fad5 	bl	80057e8 <HAL_TIM_MspPostInit>

}
 800323e:	bf00      	nop
 8003240:	3738      	adds	r7, #56	@ 0x38
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000370 	.word	0x20000370

0800324c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b096      	sub	sp, #88	@ 0x58
 8003250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003252:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	605a      	str	r2, [r3, #4]
 800325c:	609a      	str	r2, [r3, #8]
 800325e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003260:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800326a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	60da      	str	r2, [r3, #12]
 8003278:	611a      	str	r2, [r3, #16]
 800327a:	615a      	str	r2, [r3, #20]
 800327c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	2220      	movs	r2, #32
 8003282:	2100      	movs	r1, #0
 8003284:	4618      	mov	r0, r3
 8003286:	f008 f918 	bl	800b4ba <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800328a:	4b50      	ldr	r3, [pc, #320]	@ (80033cc <MX_TIM8_Init+0x180>)
 800328c:	4a50      	ldr	r2, [pc, #320]	@ (80033d0 <MX_TIM8_Init+0x184>)
 800328e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 33;
 8003290:	4b4e      	ldr	r3, [pc, #312]	@ (80033cc <MX_TIM8_Init+0x180>)
 8003292:	2221      	movs	r2, #33	@ 0x21
 8003294:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003296:	4b4d      	ldr	r3, [pc, #308]	@ (80033cc <MX_TIM8_Init+0x180>)
 8003298:	2200      	movs	r2, #0
 800329a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 800329c:	4b4b      	ldr	r3, [pc, #300]	@ (80033cc <MX_TIM8_Init+0x180>)
 800329e:	f241 3287 	movw	r2, #4999	@ 0x1387
 80032a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a4:	4b49      	ldr	r3, [pc, #292]	@ (80033cc <MX_TIM8_Init+0x180>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80032aa:	4b48      	ldr	r3, [pc, #288]	@ (80033cc <MX_TIM8_Init+0x180>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b0:	4b46      	ldr	r3, [pc, #280]	@ (80033cc <MX_TIM8_Init+0x180>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80032b6:	4845      	ldr	r0, [pc, #276]	@ (80033cc <MX_TIM8_Init+0x180>)
 80032b8:	f004 faee 	bl	8007898 <HAL_TIM_Base_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80032c2:	f000 fbb7 	bl	8003a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80032cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80032d0:	4619      	mov	r1, r3
 80032d2:	483e      	ldr	r0, [pc, #248]	@ (80033cc <MX_TIM8_Init+0x180>)
 80032d4:	f004 fe50 	bl	8007f78 <HAL_TIM_ConfigClockSource>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80032de:	f000 fba9 	bl	8003a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80032e2:	483a      	ldr	r0, [pc, #232]	@ (80033cc <MX_TIM8_Init+0x180>)
 80032e4:	f004 fb27 	bl	8007936 <HAL_TIM_PWM_Init>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80032ee:	f000 fba1 	bl	8003a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032f2:	2300      	movs	r3, #0
 80032f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80032fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80032fe:	4619      	mov	r1, r3
 8003300:	4832      	ldr	r0, [pc, #200]	@ (80033cc <MX_TIM8_Init+0x180>)
 8003302:	f005 fa4f 	bl	80087a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800330c:	f000 fb92 	bl	8003a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003310:	2360      	movs	r3, #96	@ 0x60
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003318:	2300      	movs	r3, #0
 800331a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800331c:	2300      	movs	r3, #0
 800331e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003320:	2300      	movs	r3, #0
 8003322:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003324:	2300      	movs	r3, #0
 8003326:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003328:	2300      	movs	r3, #0
 800332a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800332c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003330:	2200      	movs	r2, #0
 8003332:	4619      	mov	r1, r3
 8003334:	4825      	ldr	r0, [pc, #148]	@ (80033cc <MX_TIM8_Init+0x180>)
 8003336:	f004 fd5d 	bl	8007df4 <HAL_TIM_PWM_ConfigChannel>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8003340:	f000 fb78 	bl	8003a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003348:	2204      	movs	r2, #4
 800334a:	4619      	mov	r1, r3
 800334c:	481f      	ldr	r0, [pc, #124]	@ (80033cc <MX_TIM8_Init+0x180>)
 800334e:	f004 fd51 	bl	8007df4 <HAL_TIM_PWM_ConfigChannel>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8003358:	f000 fb6c 	bl	8003a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800335c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003360:	2208      	movs	r2, #8
 8003362:	4619      	mov	r1, r3
 8003364:	4819      	ldr	r0, [pc, #100]	@ (80033cc <MX_TIM8_Init+0x180>)
 8003366:	f004 fd45 	bl	8007df4 <HAL_TIM_PWM_ConfigChannel>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8003370:	f000 fb60 	bl	8003a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003374:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003378:	220c      	movs	r2, #12
 800337a:	4619      	mov	r1, r3
 800337c:	4813      	ldr	r0, [pc, #76]	@ (80033cc <MX_TIM8_Init+0x180>)
 800337e:	f004 fd39 	bl	8007df4 <HAL_TIM_PWM_ConfigChannel>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8003388:	f000 fb54 	bl	8003a34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800338c:	2300      	movs	r3, #0
 800338e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003390:	2300      	movs	r3, #0
 8003392:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	4619      	mov	r1, r3
 80033ae:	4807      	ldr	r0, [pc, #28]	@ (80033cc <MX_TIM8_Init+0x180>)
 80033b0:	f005 fa74 	bl	800889c <HAL_TIMEx_ConfigBreakDeadTime>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80033ba:	f000 fb3b 	bl	8003a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80033be:	4803      	ldr	r0, [pc, #12]	@ (80033cc <MX_TIM8_Init+0x180>)
 80033c0:	f002 fa12 	bl	80057e8 <HAL_TIM_MspPostInit>

}
 80033c4:	bf00      	nop
 80033c6:	3758      	adds	r7, #88	@ 0x58
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	200003b8 	.word	0x200003b8
 80033d0:	40010400 	.word	0x40010400

080033d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033d8:	4b11      	ldr	r3, [pc, #68]	@ (8003420 <MX_USART1_UART_Init+0x4c>)
 80033da:	4a12      	ldr	r2, [pc, #72]	@ (8003424 <MX_USART1_UART_Init+0x50>)
 80033dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80033de:	4b10      	ldr	r3, [pc, #64]	@ (8003420 <MX_USART1_UART_Init+0x4c>)
 80033e0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80033e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003420 <MX_USART1_UART_Init+0x4c>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003420 <MX_USART1_UART_Init+0x4c>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <MX_USART1_UART_Init+0x4c>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033f8:	4b09      	ldr	r3, [pc, #36]	@ (8003420 <MX_USART1_UART_Init+0x4c>)
 80033fa:	220c      	movs	r2, #12
 80033fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033fe:	4b08      	ldr	r3, [pc, #32]	@ (8003420 <MX_USART1_UART_Init+0x4c>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003404:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <MX_USART1_UART_Init+0x4c>)
 8003406:	2200      	movs	r2, #0
 8003408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800340a:	4805      	ldr	r0, [pc, #20]	@ (8003420 <MX_USART1_UART_Init+0x4c>)
 800340c:	f005 faac 	bl	8008968 <HAL_UART_Init>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003416:	f000 fb0d 	bl	8003a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000400 	.word	0x20000400
 8003424:	40011000 	.word	0x40011000

08003428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800342c:	4b11      	ldr	r3, [pc, #68]	@ (8003474 <MX_USART2_UART_Init+0x4c>)
 800342e:	4a12      	ldr	r2, [pc, #72]	@ (8003478 <MX_USART2_UART_Init+0x50>)
 8003430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003432:	4b10      	ldr	r3, [pc, #64]	@ (8003474 <MX_USART2_UART_Init+0x4c>)
 8003434:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800343a:	4b0e      	ldr	r3, [pc, #56]	@ (8003474 <MX_USART2_UART_Init+0x4c>)
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003440:	4b0c      	ldr	r3, [pc, #48]	@ (8003474 <MX_USART2_UART_Init+0x4c>)
 8003442:	2200      	movs	r2, #0
 8003444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003446:	4b0b      	ldr	r3, [pc, #44]	@ (8003474 <MX_USART2_UART_Init+0x4c>)
 8003448:	2200      	movs	r2, #0
 800344a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800344c:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <MX_USART2_UART_Init+0x4c>)
 800344e:	220c      	movs	r2, #12
 8003450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003452:	4b08      	ldr	r3, [pc, #32]	@ (8003474 <MX_USART2_UART_Init+0x4c>)
 8003454:	2200      	movs	r2, #0
 8003456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <MX_USART2_UART_Init+0x4c>)
 800345a:	2200      	movs	r2, #0
 800345c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800345e:	4805      	ldr	r0, [pc, #20]	@ (8003474 <MX_USART2_UART_Init+0x4c>)
 8003460:	f005 fa82 	bl	8008968 <HAL_UART_Init>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800346a:	f000 fae3 	bl	8003a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000448 	.word	0x20000448
 8003478:	40004400 	.word	0x40004400

0800347c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003480:	4b11      	ldr	r3, [pc, #68]	@ (80034c8 <MX_USART3_UART_Init+0x4c>)
 8003482:	4a12      	ldr	r2, [pc, #72]	@ (80034cc <MX_USART3_UART_Init+0x50>)
 8003484:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8003486:	4b10      	ldr	r3, [pc, #64]	@ (80034c8 <MX_USART3_UART_Init+0x4c>)
 8003488:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800348c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800348e:	4b0e      	ldr	r3, [pc, #56]	@ (80034c8 <MX_USART3_UART_Init+0x4c>)
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003494:	4b0c      	ldr	r3, [pc, #48]	@ (80034c8 <MX_USART3_UART_Init+0x4c>)
 8003496:	2200      	movs	r2, #0
 8003498:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800349a:	4b0b      	ldr	r3, [pc, #44]	@ (80034c8 <MX_USART3_UART_Init+0x4c>)
 800349c:	2200      	movs	r2, #0
 800349e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034a0:	4b09      	ldr	r3, [pc, #36]	@ (80034c8 <MX_USART3_UART_Init+0x4c>)
 80034a2:	220c      	movs	r2, #12
 80034a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034a6:	4b08      	ldr	r3, [pc, #32]	@ (80034c8 <MX_USART3_UART_Init+0x4c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034ac:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <MX_USART3_UART_Init+0x4c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80034b2:	4805      	ldr	r0, [pc, #20]	@ (80034c8 <MX_USART3_UART_Init+0x4c>)
 80034b4:	f005 fa58 	bl	8008968 <HAL_UART_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80034be:	f000 fab9 	bl	8003a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000490 	.word	0x20000490
 80034cc:	40004800 	.word	0x40004800

080034d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08c      	sub	sp, #48	@ 0x30
 80034d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d6:	f107 031c 	add.w	r3, r7, #28
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	605a      	str	r2, [r3, #4]
 80034e0:	609a      	str	r2, [r3, #8]
 80034e2:	60da      	str	r2, [r3, #12]
 80034e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	4bbb      	ldr	r3, [pc, #748]	@ (80037d8 <MX_GPIO_Init+0x308>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	4aba      	ldr	r2, [pc, #744]	@ (80037d8 <MX_GPIO_Init+0x308>)
 80034f0:	f043 0310 	orr.w	r3, r3, #16
 80034f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f6:	4bb8      	ldr	r3, [pc, #736]	@ (80037d8 <MX_GPIO_Init+0x308>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	4bb4      	ldr	r3, [pc, #720]	@ (80037d8 <MX_GPIO_Init+0x308>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	4ab3      	ldr	r2, [pc, #716]	@ (80037d8 <MX_GPIO_Init+0x308>)
 800350c:	f043 0304 	orr.w	r3, r3, #4
 8003510:	6313      	str	r3, [r2, #48]	@ 0x30
 8003512:	4bb1      	ldr	r3, [pc, #708]	@ (80037d8 <MX_GPIO_Init+0x308>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	4bad      	ldr	r3, [pc, #692]	@ (80037d8 <MX_GPIO_Init+0x308>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	4aac      	ldr	r2, [pc, #688]	@ (80037d8 <MX_GPIO_Init+0x308>)
 8003528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800352c:	6313      	str	r3, [r2, #48]	@ 0x30
 800352e:	4baa      	ldr	r3, [pc, #680]	@ (80037d8 <MX_GPIO_Init+0x308>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	4ba6      	ldr	r3, [pc, #664]	@ (80037d8 <MX_GPIO_Init+0x308>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	4aa5      	ldr	r2, [pc, #660]	@ (80037d8 <MX_GPIO_Init+0x308>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	6313      	str	r3, [r2, #48]	@ 0x30
 800354a:	4ba3      	ldr	r3, [pc, #652]	@ (80037d8 <MX_GPIO_Init+0x308>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	4b9f      	ldr	r3, [pc, #636]	@ (80037d8 <MX_GPIO_Init+0x308>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355e:	4a9e      	ldr	r2, [pc, #632]	@ (80037d8 <MX_GPIO_Init+0x308>)
 8003560:	f043 0302 	orr.w	r3, r3, #2
 8003564:	6313      	str	r3, [r2, #48]	@ 0x30
 8003566:	4b9c      	ldr	r3, [pc, #624]	@ (80037d8 <MX_GPIO_Init+0x308>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	607b      	str	r3, [r7, #4]
 8003576:	4b98      	ldr	r3, [pc, #608]	@ (80037d8 <MX_GPIO_Init+0x308>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357a:	4a97      	ldr	r2, [pc, #604]	@ (80037d8 <MX_GPIO_Init+0x308>)
 800357c:	f043 0308 	orr.w	r3, r3, #8
 8003580:	6313      	str	r3, [r2, #48]	@ 0x30
 8003582:	4b95      	ldr	r3, [pc, #596]	@ (80037d8 <MX_GPIO_Init+0x308>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	607b      	str	r3, [r7, #4]
 800358c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800358e:	2200      	movs	r2, #0
 8003590:	217f      	movs	r1, #127	@ 0x7f
 8003592:	4892      	ldr	r0, [pc, #584]	@ (80037dc <MX_GPIO_Init+0x30c>)
 8003594:	f003 f818 	bl	80065c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8003598:	2200      	movs	r2, #0
 800359a:	f24f 0130 	movw	r1, #61488	@ 0xf030
 800359e:	4890      	ldr	r0, [pc, #576]	@ (80037e0 <MX_GPIO_Init+0x310>)
 80035a0:	f003 f812 	bl	80065c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80035a4:	2200      	movs	r2, #0
 80035a6:	2103      	movs	r1, #3
 80035a8:	488e      	ldr	r0, [pc, #568]	@ (80037e4 <MX_GPIO_Init+0x314>)
 80035aa:	f003 f80d 	bl	80065c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80035ae:	2200      	movs	r2, #0
 80035b0:	f244 011f 	movw	r1, #16415	@ 0x401f
 80035b4:	488c      	ldr	r0, [pc, #560]	@ (80037e8 <MX_GPIO_Init+0x318>)
 80035b6:	f003 f807 	bl	80065c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80035ba:	237f      	movs	r3, #127	@ 0x7f
 80035bc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80035be:	2311      	movs	r3, #17
 80035c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c6:	2303      	movs	r3, #3
 80035c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035ca:	f107 031c 	add.w	r3, r7, #28
 80035ce:	4619      	mov	r1, r3
 80035d0:	4882      	ldr	r0, [pc, #520]	@ (80037dc <MX_GPIO_Init+0x30c>)
 80035d2:	f002 fe45 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80035d6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80035da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80035dc:	2311      	movs	r3, #17
 80035de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e4:	2300      	movs	r3, #0
 80035e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e8:	f107 031c 	add.w	r3, r7, #28
 80035ec:	4619      	mov	r1, r3
 80035ee:	487c      	ldr	r0, [pc, #496]	@ (80037e0 <MX_GPIO_Init+0x310>)
 80035f0:	f002 fe36 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pins : EA_2_Pin EinA_1_Pin */
  GPIO_InitStruct.Pin = EA_2_Pin|EinA_1_Pin;
 80035f4:	2309      	movs	r3, #9
 80035f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f8:	2300      	movs	r3, #0
 80035fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035fc:	2301      	movs	r3, #1
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003600:	f107 031c 	add.w	r3, r7, #28
 8003604:	4619      	mov	r1, r3
 8003606:	4876      	ldr	r0, [pc, #472]	@ (80037e0 <MX_GPIO_Init+0x310>)
 8003608:	f002 fe2a 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_2_Pin EinB_1_Pin */
  GPIO_InitStruct.Pin = EB_2_Pin|EinB_1_Pin;
 800360c:	2306      	movs	r3, #6
 800360e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003610:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003616:	2301      	movs	r3, #1
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800361a:	f107 031c 	add.w	r3, r7, #28
 800361e:	4619      	mov	r1, r3
 8003620:	486f      	ldr	r0, [pc, #444]	@ (80037e0 <MX_GPIO_Init+0x310>)
 8003622:	f002 fe1d 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinB_2_Pin EinB_4_Pin */
  GPIO_InitStruct.Pin = EinB_2_Pin|EinB_4_Pin;
 8003626:	f244 0301 	movw	r3, #16385	@ 0x4001
 800362a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800362c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003632:	2301      	movs	r3, #1
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003636:	f107 031c 	add.w	r3, r7, #28
 800363a:	4619      	mov	r1, r3
 800363c:	486b      	ldr	r0, [pc, #428]	@ (80037ec <MX_GPIO_Init+0x31c>)
 800363e:	f002 fe0f 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinA_2_Pin EinA_4_Pin EA_1_Pin */
  GPIO_InitStruct.Pin = EinA_2_Pin|EinA_4_Pin|EA_1_Pin;
 8003642:	f248 4302 	movw	r3, #33794	@ 0x8402
 8003646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003648:	2300      	movs	r3, #0
 800364a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800364c:	2301      	movs	r3, #1
 800364e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003650:	f107 031c 	add.w	r3, r7, #28
 8003654:	4619      	mov	r1, r3
 8003656:	4865      	ldr	r0, [pc, #404]	@ (80037ec <MX_GPIO_Init+0x31c>)
 8003658:	f002 fe02 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 800365c:	f241 0330 	movw	r3, #4144	@ 0x1030
 8003660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003662:	2311      	movs	r3, #17
 8003664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366a:	2303      	movs	r3, #3
 800366c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800366e:	f107 031c 	add.w	r3, r7, #28
 8003672:	4619      	mov	r1, r3
 8003674:	485a      	ldr	r0, [pc, #360]	@ (80037e0 <MX_GPIO_Init+0x310>)
 8003676:	f002 fdf3 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800367a:	2303      	movs	r3, #3
 800367c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800367e:	2311      	movs	r3, #17
 8003680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	2300      	movs	r3, #0
 8003684:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003686:	2303      	movs	r3, #3
 8003688:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368a:	f107 031c 	add.w	r3, r7, #28
 800368e:	4619      	mov	r1, r3
 8003690:	4854      	ldr	r0, [pc, #336]	@ (80037e4 <MX_GPIO_Init+0x314>)
 8003692:	f002 fde5 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 8003696:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 800369a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800369c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80036a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036a2:	2301      	movs	r3, #1
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036a6:	f107 031c 	add.w	r3, r7, #28
 80036aa:	4619      	mov	r1, r3
 80036ac:	484b      	ldr	r0, [pc, #300]	@ (80037dc <MX_GPIO_Init+0x30c>)
 80036ae:	f002 fdd7 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinA_3_Pin */
  GPIO_InitStruct.Pin = EinA_3_Pin;
 80036b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036b8:	2300      	movs	r3, #0
 80036ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036bc:	2301      	movs	r3, #1
 80036be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinA_3_GPIO_Port, &GPIO_InitStruct);
 80036c0:	f107 031c 	add.w	r3, r7, #28
 80036c4:	4619      	mov	r1, r3
 80036c6:	4848      	ldr	r0, [pc, #288]	@ (80037e8 <MX_GPIO_Init+0x318>)
 80036c8:	f002 fdca 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinB_3_Pin */
  GPIO_InitStruct.Pin = EinB_3_Pin;
 80036cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80036d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036d8:	2301      	movs	r3, #1
 80036da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinB_3_GPIO_Port, &GPIO_InitStruct);
 80036dc:	f107 031c 	add.w	r3, r7, #28
 80036e0:	4619      	mov	r1, r3
 80036e2:	4841      	ldr	r0, [pc, #260]	@ (80037e8 <MX_GPIO_Init+0x318>)
 80036e4:	f002 fdbc 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ee:	2301      	movs	r3, #1
 80036f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036f2:	2302      	movs	r3, #2
 80036f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f6:	2300      	movs	r3, #0
 80036f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036fa:	f107 031c 	add.w	r3, r7, #28
 80036fe:	4619      	mov	r1, r3
 8003700:	4839      	ldr	r0, [pc, #228]	@ (80037e8 <MX_GPIO_Init+0x318>)
 8003702:	f002 fdad 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_4_Pin */
  GPIO_InitStruct.Pin = Button_4_Pin;
 8003706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800370a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800370c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003712:	2301      	movs	r3, #1
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_4_GPIO_Port, &GPIO_InitStruct);
 8003716:	f107 031c 	add.w	r3, r7, #28
 800371a:	4619      	mov	r1, r3
 800371c:	4832      	ldr	r0, [pc, #200]	@ (80037e8 <MX_GPIO_Init+0x318>)
 800371e:	f002 fd9f 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003722:	231f      	movs	r3, #31
 8003724:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003726:	2311      	movs	r3, #17
 8003728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372e:	2303      	movs	r3, #3
 8003730:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003732:	f107 031c 	add.w	r3, r7, #28
 8003736:	4619      	mov	r1, r3
 8003738:	482b      	ldr	r0, [pc, #172]	@ (80037e8 <MX_GPIO_Init+0x318>)
 800373a:	f002 fd91 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_1_Pin EB_3_Pin */
  GPIO_InitStruct.Pin = EB_1_Pin|EB_3_Pin;
 800373e:	2328      	movs	r3, #40	@ 0x28
 8003740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003742:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003748:	2301      	movs	r3, #1
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374c:	f107 031c 	add.w	r3, r7, #28
 8003750:	4619      	mov	r1, r3
 8003752:	4824      	ldr	r0, [pc, #144]	@ (80037e4 <MX_GPIO_Init+0x314>)
 8003754:	f002 fd84 	bl	8006260 <HAL_GPIO_Init>

  /*Configure GPIO pin : EA_3_Pin */
  GPIO_InitStruct.Pin = EA_3_Pin;
 8003758:	2310      	movs	r3, #16
 800375a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800375c:	2300      	movs	r3, #0
 800375e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003760:	2301      	movs	r3, #1
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EA_3_GPIO_Port, &GPIO_InitStruct);
 8003764:	f107 031c 	add.w	r3, r7, #28
 8003768:	4619      	mov	r1, r3
 800376a:	481e      	ldr	r0, [pc, #120]	@ (80037e4 <MX_GPIO_Init+0x314>)
 800376c:	f002 fd78 	bl	8006260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003770:	2200      	movs	r2, #0
 8003772:	2100      	movs	r1, #0
 8003774:	2006      	movs	r0, #6
 8003776:	f002 fcaa 	bl	80060ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800377a:	2006      	movs	r0, #6
 800377c:	f002 fcc3 	bl	8006106 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003780:	2200      	movs	r2, #0
 8003782:	2100      	movs	r1, #0
 8003784:	2007      	movs	r0, #7
 8003786:	f002 fca2 	bl	80060ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800378a:	2007      	movs	r0, #7
 800378c:	f002 fcbb 	bl	8006106 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003790:	2200      	movs	r2, #0
 8003792:	2100      	movs	r1, #0
 8003794:	2008      	movs	r0, #8
 8003796:	f002 fc9a 	bl	80060ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800379a:	2008      	movs	r0, #8
 800379c:	f002 fcb3 	bl	8006106 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80037a0:	2200      	movs	r2, #0
 80037a2:	2100      	movs	r1, #0
 80037a4:	2009      	movs	r0, #9
 80037a6:	f002 fc92 	bl	80060ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80037aa:	2009      	movs	r0, #9
 80037ac:	f002 fcab 	bl	8006106 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80037b0:	2200      	movs	r2, #0
 80037b2:	2100      	movs	r1, #0
 80037b4:	2017      	movs	r0, #23
 80037b6:	f002 fc8a 	bl	80060ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80037ba:	2017      	movs	r0, #23
 80037bc:	f002 fca3 	bl	8006106 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	2100      	movs	r1, #0
 80037c4:	2028      	movs	r0, #40	@ 0x28
 80037c6:	f002 fc82 	bl	80060ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037ca:	2028      	movs	r0, #40	@ 0x28
 80037cc:	f002 fc9b 	bl	8006106 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80037d0:	bf00      	nop
 80037d2:	3730      	adds	r7, #48	@ 0x30
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40020800 	.word	0x40020800
 80037e4:	40020400 	.word	0x40020400
 80037e8:	40020c00 	.word	0x40020c00
 80037ec:	40020000 	.word	0x40020000

080037f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a7a      	ldr	r2, [pc, #488]	@ (80039e8 <HAL_UART_RxCpltCallback+0x1f8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d14e      	bne.n	80038a0 <HAL_UART_RxCpltCallback+0xb0>
	{
		if(receive[rxIndex] == '\r' || receive[rxIndex] == '\n')
 8003802:	4b7a      	ldr	r3, [pc, #488]	@ (80039ec <HAL_UART_RxCpltCallback+0x1fc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a7a      	ldr	r2, [pc, #488]	@ (80039f0 <HAL_UART_RxCpltCallback+0x200>)
 8003808:	5cd3      	ldrb	r3, [r2, r3]
 800380a:	2b0d      	cmp	r3, #13
 800380c:	d005      	beq.n	800381a <HAL_UART_RxCpltCallback+0x2a>
 800380e:	4b77      	ldr	r3, [pc, #476]	@ (80039ec <HAL_UART_RxCpltCallback+0x1fc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a77      	ldr	r2, [pc, #476]	@ (80039f0 <HAL_UART_RxCpltCallback+0x200>)
 8003814:	5cd3      	ldrb	r3, [r2, r3]
 8003816:	2b0a      	cmp	r3, #10
 8003818:	d134      	bne.n	8003884 <HAL_UART_RxCpltCallback+0x94>
		{
			receive[rxIndex] = '\0';
 800381a:	4b74      	ldr	r3, [pc, #464]	@ (80039ec <HAL_UART_RxCpltCallback+0x1fc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a74      	ldr	r2, [pc, #464]	@ (80039f0 <HAL_UART_RxCpltCallback+0x200>)
 8003820:	2100      	movs	r1, #0
 8003822:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receive, ",");
 8003824:	4973      	ldr	r1, [pc, #460]	@ (80039f4 <HAL_UART_RxCpltCallback+0x204>)
 8003826:	4872      	ldr	r0, [pc, #456]	@ (80039f0 <HAL_UART_RxCpltCallback+0x200>)
 8003828:	f007 fe62 	bl	800b4f0 <strtok>
 800382c:	6178      	str	r0, [r7, #20]
			dataIndex = 0;
 800382e:	4b72      	ldr	r3, [pc, #456]	@ (80039f8 <HAL_UART_RxCpltCallback+0x208>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8003834:	e015      	b.n	8003862 <HAL_UART_RxCpltCallback+0x72>
			{
				sensorData[dataIndex++] = atof(token);
 8003836:	4b70      	ldr	r3, [pc, #448]	@ (80039f8 <HAL_UART_RxCpltCallback+0x208>)
 8003838:	681c      	ldr	r4, [r3, #0]
 800383a:	1c63      	adds	r3, r4, #1
 800383c:	4a6e      	ldr	r2, [pc, #440]	@ (80039f8 <HAL_UART_RxCpltCallback+0x208>)
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	6978      	ldr	r0, [r7, #20]
 8003842:	f006 f805 	bl	8009850 <atof>
 8003846:	eeb0 7a40 	vmov.f32	s14, s0
 800384a:	eef0 7a60 	vmov.f32	s15, s1
 800384e:	4a6b      	ldr	r2, [pc, #428]	@ (80039fc <HAL_UART_RxCpltCallback+0x20c>)
 8003850:	00e3      	lsls	r3, r4, #3
 8003852:	4413      	add	r3, r2
 8003854:	ed83 7b00 	vstr	d7, [r3]
				token = strtok(NULL, ",");
 8003858:	4966      	ldr	r1, [pc, #408]	@ (80039f4 <HAL_UART_RxCpltCallback+0x204>)
 800385a:	2000      	movs	r0, #0
 800385c:	f007 fe48 	bl	800b4f0 <strtok>
 8003860:	6178      	str	r0, [r7, #20]
			while(token != NULL)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e6      	bne.n	8003836 <HAL_UART_RxCpltCallback+0x46>
			}
			memset(receive, 0, sizeof(receive));
 8003868:	2232      	movs	r2, #50	@ 0x32
 800386a:	2100      	movs	r1, #0
 800386c:	4860      	ldr	r0, [pc, #384]	@ (80039f0 <HAL_UART_RxCpltCallback+0x200>)
 800386e:	f007 fe24 	bl	800b4ba <memset>
			rxIndex = 0;
 8003872:	4b5e      	ldr	r3, [pc, #376]	@ (80039ec <HAL_UART_RxCpltCallback+0x1fc>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, receive, 1);
 8003878:	2201      	movs	r2, #1
 800387a:	495d      	ldr	r1, [pc, #372]	@ (80039f0 <HAL_UART_RxCpltCallback+0x200>)
 800387c:	4860      	ldr	r0, [pc, #384]	@ (8003a00 <HAL_UART_RxCpltCallback+0x210>)
 800387e:	f005 f8c3 	bl	8008a08 <HAL_UART_Receive_IT>
		{
 8003882:	e00d      	b.n	80038a0 <HAL_UART_RxCpltCallback+0xb0>
		}
		else
		{
			rxIndex++;
 8003884:	4b59      	ldr	r3, [pc, #356]	@ (80039ec <HAL_UART_RxCpltCallback+0x1fc>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	4a58      	ldr	r2, [pc, #352]	@ (80039ec <HAL_UART_RxCpltCallback+0x1fc>)
 800388c:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart1, receive + rxIndex, 1);
 800388e:	4b57      	ldr	r3, [pc, #348]	@ (80039ec <HAL_UART_RxCpltCallback+0x1fc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a57      	ldr	r2, [pc, #348]	@ (80039f0 <HAL_UART_RxCpltCallback+0x200>)
 8003894:	4413      	add	r3, r2
 8003896:	2201      	movs	r2, #1
 8003898:	4619      	mov	r1, r3
 800389a:	4859      	ldr	r0, [pc, #356]	@ (8003a00 <HAL_UART_RxCpltCallback+0x210>)
 800389c:	f005 f8b4 	bl	8008a08 <HAL_UART_Receive_IT>
		}
	}
	if(huart->Instance == USART2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a57      	ldr	r2, [pc, #348]	@ (8003a04 <HAL_UART_RxCpltCallback+0x214>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d149      	bne.n	800393e <HAL_UART_RxCpltCallback+0x14e>
	{
		if(receiveCAM[indexCAM] == '\r' || receiveCAM[indexCAM] == '\n')
 80038aa:	4b57      	ldr	r3, [pc, #348]	@ (8003a08 <HAL_UART_RxCpltCallback+0x218>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a57      	ldr	r2, [pc, #348]	@ (8003a0c <HAL_UART_RxCpltCallback+0x21c>)
 80038b0:	5cd3      	ldrb	r3, [r2, r3]
 80038b2:	2b0d      	cmp	r3, #13
 80038b4:	d005      	beq.n	80038c2 <HAL_UART_RxCpltCallback+0xd2>
 80038b6:	4b54      	ldr	r3, [pc, #336]	@ (8003a08 <HAL_UART_RxCpltCallback+0x218>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a54      	ldr	r2, [pc, #336]	@ (8003a0c <HAL_UART_RxCpltCallback+0x21c>)
 80038bc:	5cd3      	ldrb	r3, [r2, r3]
 80038be:	2b0a      	cmp	r3, #10
 80038c0:	d12f      	bne.n	8003922 <HAL_UART_RxCpltCallback+0x132>
		{
			receiveCAM[indexCAM] = '\0';
 80038c2:	4b51      	ldr	r3, [pc, #324]	@ (8003a08 <HAL_UART_RxCpltCallback+0x218>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a51      	ldr	r2, [pc, #324]	@ (8003a0c <HAL_UART_RxCpltCallback+0x21c>)
 80038c8:	2100      	movs	r1, #0
 80038ca:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveCAM, ",");
 80038cc:	4949      	ldr	r1, [pc, #292]	@ (80039f4 <HAL_UART_RxCpltCallback+0x204>)
 80038ce:	484f      	ldr	r0, [pc, #316]	@ (8003a0c <HAL_UART_RxCpltCallback+0x21c>)
 80038d0:	f007 fe0e 	bl	800b4f0 <strtok>
 80038d4:	6138      	str	r0, [r7, #16]
			dataindexCAM = 0;
 80038d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003a10 <HAL_UART_RxCpltCallback+0x220>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 80038dc:	e010      	b.n	8003900 <HAL_UART_RxCpltCallback+0x110>
			{
				camera[dataindexCAM++] = atoi(token);
 80038de:	4b4c      	ldr	r3, [pc, #304]	@ (8003a10 <HAL_UART_RxCpltCallback+0x220>)
 80038e0:	681c      	ldr	r4, [r3, #0]
 80038e2:	1c63      	adds	r3, r4, #1
 80038e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003a10 <HAL_UART_RxCpltCallback+0x220>)
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	6938      	ldr	r0, [r7, #16]
 80038ea:	f005 ffb4 	bl	8009856 <atoi>
 80038ee:	4603      	mov	r3, r0
 80038f0:	4a48      	ldr	r2, [pc, #288]	@ (8003a14 <HAL_UART_RxCpltCallback+0x224>)
 80038f2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 80038f6:	493f      	ldr	r1, [pc, #252]	@ (80039f4 <HAL_UART_RxCpltCallback+0x204>)
 80038f8:	2000      	movs	r0, #0
 80038fa:	f007 fdf9 	bl	800b4f0 <strtok>
 80038fe:	6138      	str	r0, [r7, #16]
			while(token != NULL)
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1eb      	bne.n	80038de <HAL_UART_RxCpltCallback+0xee>
			}
			memset(receiveCAM, 0, sizeof(receiveCAM));
 8003906:	2232      	movs	r2, #50	@ 0x32
 8003908:	2100      	movs	r1, #0
 800390a:	4840      	ldr	r0, [pc, #256]	@ (8003a0c <HAL_UART_RxCpltCallback+0x21c>)
 800390c:	f007 fdd5 	bl	800b4ba <memset>
			indexCAM = 0;
 8003910:	4b3d      	ldr	r3, [pc, #244]	@ (8003a08 <HAL_UART_RxCpltCallback+0x218>)
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, receiveCAM, 1);
 8003916:	2201      	movs	r2, #1
 8003918:	493c      	ldr	r1, [pc, #240]	@ (8003a0c <HAL_UART_RxCpltCallback+0x21c>)
 800391a:	483f      	ldr	r0, [pc, #252]	@ (8003a18 <HAL_UART_RxCpltCallback+0x228>)
 800391c:	f005 f874 	bl	8008a08 <HAL_UART_Receive_IT>
		{
 8003920:	e00d      	b.n	800393e <HAL_UART_RxCpltCallback+0x14e>
		}
		else
		{
			indexCAM++;
 8003922:	4b39      	ldr	r3, [pc, #228]	@ (8003a08 <HAL_UART_RxCpltCallback+0x218>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3301      	adds	r3, #1
 8003928:	4a37      	ldr	r2, [pc, #220]	@ (8003a08 <HAL_UART_RxCpltCallback+0x218>)
 800392a:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2, receiveCAM + indexCAM, 1);
 800392c:	4b36      	ldr	r3, [pc, #216]	@ (8003a08 <HAL_UART_RxCpltCallback+0x218>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a36      	ldr	r2, [pc, #216]	@ (8003a0c <HAL_UART_RxCpltCallback+0x21c>)
 8003932:	4413      	add	r3, r2
 8003934:	2201      	movs	r2, #1
 8003936:	4619      	mov	r1, r3
 8003938:	4837      	ldr	r0, [pc, #220]	@ (8003a18 <HAL_UART_RxCpltCallback+0x228>)
 800393a:	f005 f865 	bl	8008a08 <HAL_UART_Receive_IT>
		}
	}
	if(huart->Instance == USART3)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a36      	ldr	r2, [pc, #216]	@ (8003a1c <HAL_UART_RxCpltCallback+0x22c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d14a      	bne.n	80039de <HAL_UART_RxCpltCallback+0x1ee>
	{
		if(receiveMEGA[indexMEGA] == '\r' || receiveMEGA[indexMEGA] == '\n')
 8003948:	4b35      	ldr	r3, [pc, #212]	@ (8003a20 <HAL_UART_RxCpltCallback+0x230>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a35      	ldr	r2, [pc, #212]	@ (8003a24 <HAL_UART_RxCpltCallback+0x234>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	2b0d      	cmp	r3, #13
 8003952:	d005      	beq.n	8003960 <HAL_UART_RxCpltCallback+0x170>
 8003954:	4b32      	ldr	r3, [pc, #200]	@ (8003a20 <HAL_UART_RxCpltCallback+0x230>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a32      	ldr	r2, [pc, #200]	@ (8003a24 <HAL_UART_RxCpltCallback+0x234>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	2b0a      	cmp	r3, #10
 800395e:	d130      	bne.n	80039c2 <HAL_UART_RxCpltCallback+0x1d2>
		{
			receiveMEGA[indexMEGA] = '\0';
 8003960:	4b2f      	ldr	r3, [pc, #188]	@ (8003a20 <HAL_UART_RxCpltCallback+0x230>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2f      	ldr	r2, [pc, #188]	@ (8003a24 <HAL_UART_RxCpltCallback+0x234>)
 8003966:	2100      	movs	r1, #0
 8003968:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveMEGA, ",");
 800396a:	4922      	ldr	r1, [pc, #136]	@ (80039f4 <HAL_UART_RxCpltCallback+0x204>)
 800396c:	482d      	ldr	r0, [pc, #180]	@ (8003a24 <HAL_UART_RxCpltCallback+0x234>)
 800396e:	f007 fdbf 	bl	800b4f0 <strtok>
 8003972:	60f8      	str	r0, [r7, #12]
			dataindexMEGA = 0;
 8003974:	4b2c      	ldr	r3, [pc, #176]	@ (8003a28 <HAL_UART_RxCpltCallback+0x238>)
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 800397a:	e010      	b.n	800399e <HAL_UART_RxCpltCallback+0x1ae>
			{
				sensorMEGA[dataindexMEGA++] = atoi(token);
 800397c:	4b2a      	ldr	r3, [pc, #168]	@ (8003a28 <HAL_UART_RxCpltCallback+0x238>)
 800397e:	681c      	ldr	r4, [r3, #0]
 8003980:	1c63      	adds	r3, r4, #1
 8003982:	4a29      	ldr	r2, [pc, #164]	@ (8003a28 <HAL_UART_RxCpltCallback+0x238>)
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f005 ff65 	bl	8009856 <atoi>
 800398c:	4603      	mov	r3, r0
 800398e:	4a27      	ldr	r2, [pc, #156]	@ (8003a2c <HAL_UART_RxCpltCallback+0x23c>)
 8003990:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 8003994:	4917      	ldr	r1, [pc, #92]	@ (80039f4 <HAL_UART_RxCpltCallback+0x204>)
 8003996:	2000      	movs	r0, #0
 8003998:	f007 fdaa 	bl	800b4f0 <strtok>
 800399c:	60f8      	str	r0, [r7, #12]
			while(token != NULL)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1eb      	bne.n	800397c <HAL_UART_RxCpltCallback+0x18c>
			}
			memset(receiveMEGA, 0, sizeof(receiveMEGA));
 80039a4:	2232      	movs	r2, #50	@ 0x32
 80039a6:	2100      	movs	r1, #0
 80039a8:	481e      	ldr	r0, [pc, #120]	@ (8003a24 <HAL_UART_RxCpltCallback+0x234>)
 80039aa:	f007 fd86 	bl	800b4ba <memset>
			indexMEGA = 0;
 80039ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003a20 <HAL_UART_RxCpltCallback+0x230>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, receiveMEGA, 1);
 80039b4:	2201      	movs	r2, #1
 80039b6:	491b      	ldr	r1, [pc, #108]	@ (8003a24 <HAL_UART_RxCpltCallback+0x234>)
 80039b8:	481d      	ldr	r0, [pc, #116]	@ (8003a30 <HAL_UART_RxCpltCallback+0x240>)
 80039ba:	f005 f825 	bl	8008a08 <HAL_UART_Receive_IT>
		{
 80039be:	bf00      	nop
		{
			indexMEGA++;
			HAL_UART_Receive_IT(&huart3, receiveMEGA + indexMEGA, 1);
		}
	}
}
 80039c0:	e00d      	b.n	80039de <HAL_UART_RxCpltCallback+0x1ee>
			indexMEGA++;
 80039c2:	4b17      	ldr	r3, [pc, #92]	@ (8003a20 <HAL_UART_RxCpltCallback+0x230>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3301      	adds	r3, #1
 80039c8:	4a15      	ldr	r2, [pc, #84]	@ (8003a20 <HAL_UART_RxCpltCallback+0x230>)
 80039ca:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart3, receiveMEGA + indexMEGA, 1);
 80039cc:	4b14      	ldr	r3, [pc, #80]	@ (8003a20 <HAL_UART_RxCpltCallback+0x230>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a14      	ldr	r2, [pc, #80]	@ (8003a24 <HAL_UART_RxCpltCallback+0x234>)
 80039d2:	4413      	add	r3, r2
 80039d4:	2201      	movs	r2, #1
 80039d6:	4619      	mov	r1, r3
 80039d8:	4815      	ldr	r0, [pc, #84]	@ (8003a30 <HAL_UART_RxCpltCallback+0x240>)
 80039da:	f005 f815 	bl	8008a08 <HAL_UART_Receive_IT>
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd90      	pop	{r4, r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40011000 	.word	0x40011000
 80039ec:	20000528 	.word	0x20000528
 80039f0:	200004f4 	.word	0x200004f4
 80039f4:	0800fb58 	.word	0x0800fb58
 80039f8:	2000052c 	.word	0x2000052c
 80039fc:	20000530 	.word	0x20000530
 8003a00:	20000400 	.word	0x20000400
 8003a04:	40004400 	.word	0x40004400
 8003a08:	20000574 	.word	0x20000574
 8003a0c:	20000540 	.word	0x20000540
 8003a10:	20000578 	.word	0x20000578
 8003a14:	2000057c 	.word	0x2000057c
 8003a18:	20000448 	.word	0x20000448
 8003a1c:	40004800 	.word	0x40004800
 8003a20:	200005e4 	.word	0x200005e4
 8003a24:	200005b0 	.word	0x200005b0
 8003a28:	200005e8 	.word	0x200005e8
 8003a2c:	200005ec 	.word	0x200005ec
 8003a30:	20000490 	.word	0x20000490

08003a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a38:	b672      	cpsid	i
}
 8003a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a3c:	bf00      	nop
 8003a3e:	e7fd      	b.n	8003a3c <Error_Handler+0x8>

08003a40 <odometry>:

extern int camera[13];
extern int sensorMEGA[4];

robotPosition odometry()
{
 8003a40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a44:	b0bc      	sub	sp, #240	@ 0xf0
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
    robotPosition currentPosition;

    /* ENCODER INTERNAL */
    int dn1_in = counterIN1 - oldEncIN1;
 8003a4a:	4bc5      	ldr	r3, [pc, #788]	@ (8003d60 <odometry+0x320>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4bc5      	ldr	r3, [pc, #788]	@ (8003d64 <odometry+0x324>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int dn2_in = counterIN2 - oldEncIN2;
 8003a58:	4bc3      	ldr	r3, [pc, #780]	@ (8003d68 <odometry+0x328>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4bc3      	ldr	r3, [pc, #780]	@ (8003d6c <odometry+0x32c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    int dn3_in = counterIN3 - oldEncIN3;
 8003a66:	4bc2      	ldr	r3, [pc, #776]	@ (8003d70 <odometry+0x330>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4bc2      	ldr	r3, [pc, #776]	@ (8003d74 <odometry+0x334>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    int dn4_in = counterIN4 - oldEncIN4;
 8003a74:	4bc0      	ldr	r3, [pc, #768]	@ (8003d78 <odometry+0x338>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4bc0      	ldr	r3, [pc, #768]	@ (8003d7c <odometry+0x33c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    oldEncIN1 = counterIN1;
 8003a82:	4bb7      	ldr	r3, [pc, #732]	@ (8003d60 <odometry+0x320>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4ab7      	ldr	r2, [pc, #732]	@ (8003d64 <odometry+0x324>)
 8003a88:	6013      	str	r3, [r2, #0]
    oldEncIN2 = counterIN2;
 8003a8a:	4bb7      	ldr	r3, [pc, #732]	@ (8003d68 <odometry+0x328>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4ab7      	ldr	r2, [pc, #732]	@ (8003d6c <odometry+0x32c>)
 8003a90:	6013      	str	r3, [r2, #0]
    oldEncIN3 = counterIN3;
 8003a92:	4bb7      	ldr	r3, [pc, #732]	@ (8003d70 <odometry+0x330>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4ab7      	ldr	r2, [pc, #732]	@ (8003d74 <odometry+0x334>)
 8003a98:	6013      	str	r3, [r2, #0]
    oldEncIN4 = counterIN4;
 8003a9a:	4bb7      	ldr	r3, [pc, #732]	@ (8003d78 <odometry+0x338>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4ab7      	ldr	r2, [pc, #732]	@ (8003d7c <odometry+0x33c>)
 8003aa0:	6013      	str	r3, [r2, #0]

    double dthetaIN = mm_per_tick_IN * ((-dn1_in + dn3_in) + (dn2_in - dn4_in))/(m1_m3 * 4);
 8003aa2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003aa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003aaa:	1ad2      	subs	r2, r2, r3
 8003aac:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ab4:	1acb      	subs	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fc fd33 	bl	8000524 <__aeabi_i2d>
 8003abe:	a3a0      	add	r3, pc, #640	@ (adr r3, 8003d40 <odometry+0x300>)
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f7fc fd98 	bl	80005f8 <__aeabi_dmul>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4610      	mov	r0, r2
 8003ace:	4619      	mov	r1, r3
 8003ad0:	a39d      	add	r3, pc, #628	@ (adr r3, 8003d48 <odometry+0x308>)
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	f7fc feb9 	bl	800084c <__aeabi_ddiv>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double dxIN = mm_per_tick_IN * (-dn1_in + dn2_in - dn3_in + dn4_in)/4 * cos(M_PI_4);
 8003ae2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003ae6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003aea:	1ad2      	subs	r2, r2, r3
 8003aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af0:	1ad2      	subs	r2, r2, r3
 8003af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af6:	4413      	add	r3, r2
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fc fd13 	bl	8000524 <__aeabi_i2d>
 8003afe:	a390      	add	r3, pc, #576	@ (adr r3, 8003d40 <odometry+0x300>)
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	f7fc fd78 	bl	80005f8 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	4b9a      	ldr	r3, [pc, #616]	@ (8003d80 <odometry+0x340>)
 8003b16:	f7fc fe99 	bl	800084c <__aeabi_ddiv>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	a38b      	add	r3, pc, #556	@ (adr r3, 8003d50 <odometry+0x310>)
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f7fc fd66 	bl	80005f8 <__aeabi_dmul>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    double dyIN = mm_per_tick_IN * (dn1_in + dn2_in + dn3_in + dn4_in)/4 * sin(M_PI_4);
 8003b34:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003b38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003b3c:	441a      	add	r2, r3
 8003b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b42:	441a      	add	r2, r3
 8003b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b48:	4413      	add	r3, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fc fcea 	bl	8000524 <__aeabi_i2d>
 8003b50:	a37b      	add	r3, pc, #492	@ (adr r3, 8003d40 <odometry+0x300>)
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	f7fc fd4f 	bl	80005f8 <__aeabi_dmul>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4619      	mov	r1, r3
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	4b86      	ldr	r3, [pc, #536]	@ (8003d80 <odometry+0x340>)
 8003b68:	f7fc fe70 	bl	800084c <__aeabi_ddiv>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	a378      	add	r3, pc, #480	@ (adr r3, 8003d58 <odometry+0x318>)
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	f7fc fd3d 	bl	80005f8 <__aeabi_dmul>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8

    double distanceIN = hypot(dxIN, dyIN);
 8003b86:	ed97 1b32 	vldr	d1, [r7, #200]	@ 0xc8
 8003b8a:	ed97 0b34 	vldr	d0, [r7, #208]	@ 0xd0
 8003b8e:	f00a fa47 	bl	800e020 <hypot>
 8003b92:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0
	double directionIN = atan2(dyIN, dxIN);
 8003b96:	ed97 1b34 	vldr	d1, [r7, #208]	@ 0xd0
 8003b9a:	ed97 0b32 	vldr	d0, [r7, #200]	@ 0xc8
 8003b9e:	f00a fa3b 	bl	800e018 <atan2>
 8003ba2:	ed87 0b2e 	vstr	d0, [r7, #184]	@ 0xb8
	double theta_localIN = directionIN - dthetaIN;
 8003ba6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8003baa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003bae:	f7fc fb6b 	bl	8000288 <__aeabi_dsub>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0

	xLocalIN += distanceIN * cos(theta_localIN);
 8003bba:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8003bbe:	f00a fa63 	bl	800e088 <cos>
 8003bc2:	ec51 0b10 	vmov	r0, r1, d0
 8003bc6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8003bca:	f7fc fd15 	bl	80005f8 <__aeabi_dmul>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4b6b      	ldr	r3, [pc, #428]	@ (8003d84 <odometry+0x344>)
 8003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bdc:	f7fc fb56 	bl	800028c <__adddf3>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4967      	ldr	r1, [pc, #412]	@ (8003d84 <odometry+0x344>)
 8003be6:	e9c1 2300 	strd	r2, r3, [r1]
	yLocalIN += distanceIN * sin(theta_localIN);
 8003bea:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8003bee:	f00a fa9f 	bl	800e130 <sin>
 8003bf2:	ec51 0b10 	vmov	r0, r1, d0
 8003bf6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8003bfa:	f7fc fcfd 	bl	80005f8 <__aeabi_dmul>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4610      	mov	r0, r2
 8003c04:	4619      	mov	r1, r3
 8003c06:	4b60      	ldr	r3, [pc, #384]	@ (8003d88 <odometry+0x348>)
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f7fc fb3e 	bl	800028c <__adddf3>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	495c      	ldr	r1, [pc, #368]	@ (8003d88 <odometry+0x348>)
 8003c16:	e9c1 2300 	strd	r2, r3, [r1]

    double thetaIN = headingIN + (dthetaIN / 2.0);
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003c22:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8003c26:	f7fc fe11 	bl	800084c <__aeabi_ddiv>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4610      	mov	r0, r2
 8003c30:	4619      	mov	r1, r3
 8003c32:	4b56      	ldr	r3, [pc, #344]	@ (8003d8c <odometry+0x34c>)
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f7fc fb28 	bl	800028c <__adddf3>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
    xGlobalIN += dxIN * cos(thetaIN) + dyIN * sin(thetaIN);
 8003c44:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8003c48:	f00a fa1e 	bl	800e088 <cos>
 8003c4c:	ec51 0b10 	vmov	r0, r1, d0
 8003c50:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8003c54:	f7fc fcd0 	bl	80005f8 <__aeabi_dmul>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4690      	mov	r8, r2
 8003c5e:	4699      	mov	r9, r3
 8003c60:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8003c64:	f00a fa64 	bl	800e130 <sin>
 8003c68:	ec51 0b10 	vmov	r0, r1, d0
 8003c6c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8003c70:	f7fc fcc2 	bl	80005f8 <__aeabi_dmul>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4640      	mov	r0, r8
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	f7fc fb06 	bl	800028c <__adddf3>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4610      	mov	r0, r2
 8003c86:	4619      	mov	r1, r3
 8003c88:	4b41      	ldr	r3, [pc, #260]	@ (8003d90 <odometry+0x350>)
 8003c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8e:	f7fc fafd 	bl	800028c <__adddf3>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	493e      	ldr	r1, [pc, #248]	@ (8003d90 <odometry+0x350>)
 8003c98:	e9c1 2300 	strd	r2, r3, [r1]
    yGlobalIN += -dxIN * sin(thetaIN) + dyIN * cos(thetaIN);
 8003c9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ca6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003caa:	607b      	str	r3, [r7, #4]
 8003cac:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8003cb0:	f00a fa3e 	bl	800e130 <sin>
 8003cb4:	ec53 2b10 	vmov	r2, r3, d0
 8003cb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cbc:	f7fc fc9c 	bl	80005f8 <__aeabi_dmul>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4690      	mov	r8, r2
 8003cc6:	4699      	mov	r9, r3
 8003cc8:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8003ccc:	f00a f9dc 	bl	800e088 <cos>
 8003cd0:	ec51 0b10 	vmov	r0, r1, d0
 8003cd4:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8003cd8:	f7fc fc8e 	bl	80005f8 <__aeabi_dmul>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4640      	mov	r0, r8
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	f7fc fad2 	bl	800028c <__adddf3>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4610      	mov	r0, r2
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4b28      	ldr	r3, [pc, #160]	@ (8003d94 <odometry+0x354>)
 8003cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf6:	f7fc fac9 	bl	800028c <__adddf3>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4925      	ldr	r1, [pc, #148]	@ (8003d94 <odometry+0x354>)
 8003d00:	e9c1 2300 	strd	r2, r3, [r1]
    headingIN += dthetaIN;
 8003d04:	4b21      	ldr	r3, [pc, #132]	@ (8003d8c <odometry+0x34c>)
 8003d06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d0a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8003d0e:	f7fc fabd 	bl	800028c <__adddf3>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	491d      	ldr	r1, [pc, #116]	@ (8003d8c <odometry+0x34c>)
 8003d18:	e9c1 2300 	strd	r2, r3, [r1]
    /* END */

    /* ENCODER EXTERNAL */
    int dn1 = counter1 - oldEnc1;
 8003d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8003d98 <odometry+0x358>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b1e      	ldr	r3, [pc, #120]	@ (8003d9c <odometry+0x35c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    int dn2 = counter2 - oldEnc2;
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003da0 <odometry+0x360>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <odometry+0x364>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d38:	e036      	b.n	8003da8 <odometry+0x368>
 8003d3a:	bf00      	nop
 8003d3c:	f3af 8000 	nop.w
 8003d40:	458bd930 	.word	0x458bd930
 8003d44:	401b4977 	.word	0x401b4977
 8003d48:	00000000 	.word	0x00000000
 8003d4c:	40a45000 	.word	0x40a45000
 8003d50:	667f3bcd 	.word	0x667f3bcd
 8003d54:	3fe6a09e 	.word	0x3fe6a09e
 8003d58:	667f3bcc 	.word	0x667f3bcc
 8003d5c:	3fe6a09e 	.word	0x3fe6a09e
 8003d60:	200004e4 	.word	0x200004e4
 8003d64:	20000648 	.word	0x20000648
 8003d68:	200004e8 	.word	0x200004e8
 8003d6c:	2000064c 	.word	0x2000064c
 8003d70:	200004ec 	.word	0x200004ec
 8003d74:	20000650 	.word	0x20000650
 8003d78:	200004f0 	.word	0x200004f0
 8003d7c:	20000654 	.word	0x20000654
 8003d80:	40100000 	.word	0x40100000
 8003d84:	20000668 	.word	0x20000668
 8003d88:	20000670 	.word	0x20000670
 8003d8c:	20000678 	.word	0x20000678
 8003d90:	20000658 	.word	0x20000658
 8003d94:	20000660 	.word	0x20000660
 8003d98:	200004d8 	.word	0x200004d8
 8003d9c:	20000630 	.word	0x20000630
 8003da0:	200004dc 	.word	0x200004dc
 8003da4:	20000634 	.word	0x20000634
    int dn3 = counter3 - oldEnc3;
 8003da8:	4bbb      	ldr	r3, [pc, #748]	@ (8004098 <odometry+0x658>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4bbb      	ldr	r3, [pc, #748]	@ (800409c <odometry+0x65c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    oldEnc1 = counter1;
 8003db6:	4bba      	ldr	r3, [pc, #744]	@ (80040a0 <odometry+0x660>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4aba      	ldr	r2, [pc, #744]	@ (80040a4 <odometry+0x664>)
 8003dbc:	6013      	str	r3, [r2, #0]
    oldEnc2 = counter2;
 8003dbe:	4bba      	ldr	r3, [pc, #744]	@ (80040a8 <odometry+0x668>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4aba      	ldr	r2, [pc, #744]	@ (80040ac <odometry+0x66c>)
 8003dc4:	6013      	str	r3, [r2, #0]
    oldEnc3 = counter3;
 8003dc6:	4bb4      	ldr	r3, [pc, #720]	@ (8004098 <odometry+0x658>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4ab4      	ldr	r2, [pc, #720]	@ (800409c <odometry+0x65c>)
 8003dcc:	6013      	str	r3, [r2, #0]

    double dtheta = mm_per_tick * (dn2 - dn1) / e1_e2;
 8003dce:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003dd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fc fba3 	bl	8000524 <__aeabi_i2d>
 8003dde:	a3aa      	add	r3, pc, #680	@ (adr r3, 8004088 <odometry+0x648>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fc08 	bl	80005f8 <__aeabi_dmul>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	a3a7      	add	r3, pc, #668	@ (adr r3, 8004090 <odometry+0x650>)
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	f7fc fd29 	bl	800084c <__aeabi_ddiv>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    double dx = mm_per_tick * (dn3 + (dn2 - dn1) * e12_e3 / e1_e2);
 8003e02:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	22e6      	movs	r2, #230	@ 0xe6
 8003e0e:	fb02 f303 	mul.w	r3, r2, r3
 8003e12:	4aa7      	ldr	r2, [pc, #668]	@ (80040b0 <odometry+0x670>)
 8003e14:	fb82 1203 	smull	r1, r2, r2, r3
 8003e18:	441a      	add	r2, r3
 8003e1a:	1212      	asrs	r2, r2, #8
 8003e1c:	17db      	asrs	r3, r3, #31
 8003e1e:	1ad2      	subs	r2, r2, r3
 8003e20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e24:	4413      	add	r3, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fc fb7c 	bl	8000524 <__aeabi_i2d>
 8003e2c:	a396      	add	r3, pc, #600	@ (adr r3, 8004088 <odometry+0x648>)
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	f7fc fbe1 	bl	80005f8 <__aeabi_dmul>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    double dy = mm_per_tick * (dn1 + dn2) / 2.0;
 8003e3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e46:	4413      	add	r3, r2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fc fb6b 	bl	8000524 <__aeabi_i2d>
 8003e4e:	a38e      	add	r3, pc, #568	@ (adr r3, 8004088 <odometry+0x648>)
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	f7fc fbd0 	bl	80005f8 <__aeabi_dmul>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003e68:	f7fc fcf0 	bl	800084c <__aeabi_ddiv>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    double distance = hypot(dx, dy);
 8003e74:	ed97 1b20 	vldr	d1, [r7, #128]	@ 0x80
 8003e78:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 8003e7c:	f00a f8d0 	bl	800e020 <hypot>
 8003e80:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
	double direction = atan2(dy, dx);
 8003e84:	ed97 1b22 	vldr	d1, [r7, #136]	@ 0x88
 8003e88:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8003e8c:	f00a f8c4 	bl	800e018 <atan2>
 8003e90:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
	double theta_local = direction - dtheta;
 8003e94:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003e98:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003e9c:	f7fc f9f4 	bl	8000288 <__aeabi_dsub>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

	xLocal += distance * cos(theta_local);
 8003ea8:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8003eac:	f00a f8ec 	bl	800e088 <cos>
 8003eb0:	ec51 0b10 	vmov	r0, r1, d0
 8003eb4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8003eb8:	f7fc fb9e 	bl	80005f8 <__aeabi_dmul>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4b7b      	ldr	r3, [pc, #492]	@ (80040b4 <odometry+0x674>)
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	f7fc f9df 	bl	800028c <__adddf3>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4978      	ldr	r1, [pc, #480]	@ (80040b4 <odometry+0x674>)
 8003ed4:	e9c1 2300 	strd	r2, r3, [r1]
	yLocal += distance * sin(theta_local);
 8003ed8:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8003edc:	f00a f928 	bl	800e130 <sin>
 8003ee0:	ec51 0b10 	vmov	r0, r1, d0
 8003ee4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8003ee8:	f7fc fb86 	bl	80005f8 <__aeabi_dmul>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4b70      	ldr	r3, [pc, #448]	@ (80040b8 <odometry+0x678>)
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f7fc f9c7 	bl	800028c <__adddf3>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	496d      	ldr	r1, [pc, #436]	@ (80040b8 <odometry+0x678>)
 8003f04:	e9c1 2300 	strd	r2, r3, [r1]

    double theta = heading + (dtheta / 2.0);
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003f10:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8003f14:	f7fc fc9a 	bl	800084c <__aeabi_ddiv>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4b66      	ldr	r3, [pc, #408]	@ (80040bc <odometry+0x67c>)
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f26:	f7fc f9b1 	bl	800028c <__adddf3>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    xGlobal += dx * cos(theta) + dy * sin(theta);
 8003f32:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8003f36:	f00a f8a7 	bl	800e088 <cos>
 8003f3a:	ec51 0b10 	vmov	r0, r1, d0
 8003f3e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f42:	f7fc fb59 	bl	80005f8 <__aeabi_dmul>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4690      	mov	r8, r2
 8003f4c:	4699      	mov	r9, r3
 8003f4e:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8003f52:	f00a f8ed 	bl	800e130 <sin>
 8003f56:	ec51 0b10 	vmov	r0, r1, d0
 8003f5a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8003f5e:	f7fc fb4b 	bl	80005f8 <__aeabi_dmul>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4640      	mov	r0, r8
 8003f68:	4649      	mov	r1, r9
 8003f6a:	f7fc f98f 	bl	800028c <__adddf3>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	4b52      	ldr	r3, [pc, #328]	@ (80040c0 <odometry+0x680>)
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f7fc f986 	bl	800028c <__adddf3>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	494e      	ldr	r1, [pc, #312]	@ (80040c0 <odometry+0x680>)
 8003f86:	e9c1 2300 	strd	r2, r3, [r1]
    yGlobal += -dx * sin(theta) + dy * cos(theta);
 8003f8a:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 8003f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f92:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003f96:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8003f9a:	f00a f8c9 	bl	800e130 <sin>
 8003f9e:	ec53 2b10 	vmov	r2, r3, d0
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	f7fc fb27 	bl	80005f8 <__aeabi_dmul>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4614      	mov	r4, r2
 8003fb0:	461d      	mov	r5, r3
 8003fb2:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8003fb6:	f00a f867 	bl	800e088 <cos>
 8003fba:	ec51 0b10 	vmov	r0, r1, d0
 8003fbe:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8003fc2:	f7fc fb19 	bl	80005f8 <__aeabi_dmul>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4620      	mov	r0, r4
 8003fcc:	4629      	mov	r1, r5
 8003fce:	f7fc f95d 	bl	800028c <__adddf3>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4b3a      	ldr	r3, [pc, #232]	@ (80040c4 <odometry+0x684>)
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f7fc f954 	bl	800028c <__adddf3>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4936      	ldr	r1, [pc, #216]	@ (80040c4 <odometry+0x684>)
 8003fea:	e9c1 2300 	strd	r2, r3, [r1]
    heading += dtheta;
 8003fee:	4b33      	ldr	r3, [pc, #204]	@ (80040bc <odometry+0x67c>)
 8003ff0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ff4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003ff8:	f7fc f948 	bl	800028c <__adddf3>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	492e      	ldr	r1, [pc, #184]	@ (80040bc <odometry+0x67c>)
 8004002:	e9c1 2300 	strd	r2, r3, [r1]
    /* END */

    currentPosition.x_global = xGlobal;
 8004006:	4b2e      	ldr	r3, [pc, #184]	@ (80040c0 <odometry+0x680>)
 8004008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    currentPosition.y_global = yGlobal;
 8004010:	4b2c      	ldr	r3, [pc, #176]	@ (80040c4 <odometry+0x684>)
 8004012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004016:	e9c7 2306 	strd	r2, r3, [r7, #24]
    currentPosition.x_local = xLocal;
 800401a:	4b26      	ldr	r3, [pc, #152]	@ (80040b4 <odometry+0x674>)
 800401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004020:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    currentPosition.y_local = yLocal;
 8004024:	4b24      	ldr	r3, [pc, #144]	@ (80040b8 <odometry+0x678>)
 8004026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    currentPosition.x_in_global = xGlobalIN;
 800402e:	4b26      	ldr	r3, [pc, #152]	@ (80040c8 <odometry+0x688>)
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    currentPosition.y_in_global = yGlobalIN;
 8004038:	4b24      	ldr	r3, [pc, #144]	@ (80040cc <odometry+0x68c>)
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    currentPosition.x_in_local = xLocalIN;
 8004042:	4b23      	ldr	r3, [pc, #140]	@ (80040d0 <odometry+0x690>)
 8004044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004048:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    currentPosition.y_in_local = yLocalIN;
 800404c:	4b21      	ldr	r3, [pc, #132]	@ (80040d4 <odometry+0x694>)
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004052:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    currentPosition.h_en = (heading + headingIN) * 90/M_PI;
 8004056:	4b19      	ldr	r3, [pc, #100]	@ (80040bc <odometry+0x67c>)
 8004058:	e9d3 0100 	ldrd	r0, r1, [r3]
 800405c:	4b1e      	ldr	r3, [pc, #120]	@ (80040d8 <odometry+0x698>)
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	f7fc f913 	bl	800028c <__adddf3>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4610      	mov	r0, r2
 800406c:	4619      	mov	r1, r3
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	4b1a      	ldr	r3, [pc, #104]	@ (80040dc <odometry+0x69c>)
 8004074:	f7fc fac0 	bl	80005f8 <__aeabi_dmul>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4610      	mov	r0, r2
 800407e:	4619      	mov	r1, r3
 8004080:	e02e      	b.n	80040e0 <odometry+0x6a0>
 8004082:	bf00      	nop
 8004084:	f3af 8000 	nop.w
 8004088:	2d6e5f19 	.word	0x2d6e5f19
 800408c:	3fb752bc 	.word	0x3fb752bc
 8004090:	00000000 	.word	0x00000000
 8004094:	4077c000 	.word	0x4077c000
 8004098:	200004e0 	.word	0x200004e0
 800409c:	20000638 	.word	0x20000638
 80040a0:	200004d8 	.word	0x200004d8
 80040a4:	20000630 	.word	0x20000630
 80040a8:	200004dc 	.word	0x200004dc
 80040ac:	20000634 	.word	0x20000634
 80040b0:	ac769185 	.word	0xac769185
 80040b4:	20000618 	.word	0x20000618
 80040b8:	20000620 	.word	0x20000620
 80040bc:	20000628 	.word	0x20000628
 80040c0:	20000608 	.word	0x20000608
 80040c4:	20000610 	.word	0x20000610
 80040c8:	20000658 	.word	0x20000658
 80040cc:	20000660 	.word	0x20000660
 80040d0:	20000668 	.word	0x20000668
 80040d4:	20000670 	.word	0x20000670
 80040d8:	20000678 	.word	0x20000678
 80040dc:	40568000 	.word	0x40568000
 80040e0:	a30e      	add	r3, pc, #56	@ (adr r3, 800411c <odometry+0x6dc>)
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	f7fc fbb1 	bl	800084c <__aeabi_ddiv>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    currentPosition.h = sensorData[0];
 80040f2:	4b09      	ldr	r3, [pc, #36]	@ (8004118 <odometry+0x6d8>)
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	e9c7 2308 	strd	r2, r3, [r7, #32]

    return currentPosition;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4618      	mov	r0, r3
 8004100:	f107 0310 	add.w	r3, r7, #16
 8004104:	2250      	movs	r2, #80	@ 0x50
 8004106:	4619      	mov	r1, r3
 8004108:	f007 fac5 	bl	800b696 <memcpy>
}
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	37f0      	adds	r7, #240	@ 0xf0
 8004110:	46bd      	mov	sp, r7
 8004112:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004116:	bf00      	nop
 8004118:	20000530 	.word	0x20000530
 800411c:	54442d18 	.word	0x54442d18
 8004120:	400921fb 	.word	0x400921fb

08004124 <displayPosition>:
	sprintf(buffer, "E3:%d", counter3);
	lcd_write_string(buffer);
}

void displayPosition(robotPosition position, uint8_t type)
{
 8004124:	b084      	sub	sp, #16
 8004126:	b580      	push	{r7, lr}
 8004128:	af00      	add	r7, sp, #0
 800412a:	f107 0c08 	add.w	ip, r7, #8
 800412e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch (type)
 8004132:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8004136:	3b01      	subs	r3, #1
 8004138:	2b03      	cmp	r3, #3
 800413a:	d877      	bhi.n	800422c <displayPosition+0x108>
 800413c:	a201      	add	r2, pc, #4	@ (adr r2, 8004144 <displayPosition+0x20>)
 800413e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004142:	bf00      	nop
 8004144:	08004155 	.word	0x08004155
 8004148:	0800418b 	.word	0x0800418b
 800414c:	080041c1 	.word	0x080041c1
 8004150:	080041f7 	.word	0x080041f7
	{
		case global:
			lcd_set_cursor(0, 0);
 8004154:	2100      	movs	r1, #0
 8004156:	2000      	movs	r0, #0
 8004158:	f7fe f86a 	bl	8002230 <lcd_set_cursor>
			sprintf(buffer, "X:%.2f", position.x_global);
 800415c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004160:	4943      	ldr	r1, [pc, #268]	@ (8004270 <displayPosition+0x14c>)
 8004162:	4844      	ldr	r0, [pc, #272]	@ (8004274 <displayPosition+0x150>)
 8004164:	f007 f946 	bl	800b3f4 <siprintf>
			lcd_write_string(buffer);
 8004168:	4842      	ldr	r0, [pc, #264]	@ (8004274 <displayPosition+0x150>)
 800416a:	f7fe f84b 	bl	8002204 <lcd_write_string>
			lcd_set_cursor(1, 0);
 800416e:	2100      	movs	r1, #0
 8004170:	2001      	movs	r0, #1
 8004172:	f7fe f85d 	bl	8002230 <lcd_set_cursor>
			sprintf(buffer, "Y:%.2f", position.y_global);
 8004176:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800417a:	493f      	ldr	r1, [pc, #252]	@ (8004278 <displayPosition+0x154>)
 800417c:	483d      	ldr	r0, [pc, #244]	@ (8004274 <displayPosition+0x150>)
 800417e:	f007 f939 	bl	800b3f4 <siprintf>
			lcd_write_string(buffer);
 8004182:	483c      	ldr	r0, [pc, #240]	@ (8004274 <displayPosition+0x150>)
 8004184:	f7fe f83e 	bl	8002204 <lcd_write_string>
			break;
 8004188:	e050      	b.n	800422c <displayPosition+0x108>
		case local:
			lcd_set_cursor(0, 0);
 800418a:	2100      	movs	r1, #0
 800418c:	2000      	movs	r0, #0
 800418e:	f7fe f84f 	bl	8002230 <lcd_set_cursor>
			sprintf(buffer, "X:%.2f", position.x_local);
 8004192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004196:	4936      	ldr	r1, [pc, #216]	@ (8004270 <displayPosition+0x14c>)
 8004198:	4836      	ldr	r0, [pc, #216]	@ (8004274 <displayPosition+0x150>)
 800419a:	f007 f92b 	bl	800b3f4 <siprintf>
			lcd_write_string(buffer);
 800419e:	4835      	ldr	r0, [pc, #212]	@ (8004274 <displayPosition+0x150>)
 80041a0:	f7fe f830 	bl	8002204 <lcd_write_string>
			lcd_set_cursor(1, 0);
 80041a4:	2100      	movs	r1, #0
 80041a6:	2001      	movs	r0, #1
 80041a8:	f7fe f842 	bl	8002230 <lcd_set_cursor>
			sprintf(buffer, "Y:%.2f", position.y_local);
 80041ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041b0:	4931      	ldr	r1, [pc, #196]	@ (8004278 <displayPosition+0x154>)
 80041b2:	4830      	ldr	r0, [pc, #192]	@ (8004274 <displayPosition+0x150>)
 80041b4:	f007 f91e 	bl	800b3f4 <siprintf>
			lcd_write_string(buffer);
 80041b8:	482e      	ldr	r0, [pc, #184]	@ (8004274 <displayPosition+0x150>)
 80041ba:	f7fe f823 	bl	8002204 <lcd_write_string>
			break;
 80041be:	e035      	b.n	800422c <displayPosition+0x108>
		case in_global:
			lcd_set_cursor(0, 0);
 80041c0:	2100      	movs	r1, #0
 80041c2:	2000      	movs	r0, #0
 80041c4:	f7fe f834 	bl	8002230 <lcd_set_cursor>
			sprintf(buffer, "X:%.2f", position.x_in_global);
 80041c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80041cc:	4928      	ldr	r1, [pc, #160]	@ (8004270 <displayPosition+0x14c>)
 80041ce:	4829      	ldr	r0, [pc, #164]	@ (8004274 <displayPosition+0x150>)
 80041d0:	f007 f910 	bl	800b3f4 <siprintf>
			lcd_write_string(buffer);
 80041d4:	4827      	ldr	r0, [pc, #156]	@ (8004274 <displayPosition+0x150>)
 80041d6:	f7fe f815 	bl	8002204 <lcd_write_string>
			lcd_set_cursor(1, 0);
 80041da:	2100      	movs	r1, #0
 80041dc:	2001      	movs	r0, #1
 80041de:	f7fe f827 	bl	8002230 <lcd_set_cursor>
			sprintf(buffer, "Y:%.2f", position.y_in_global);
 80041e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041e6:	4924      	ldr	r1, [pc, #144]	@ (8004278 <displayPosition+0x154>)
 80041e8:	4822      	ldr	r0, [pc, #136]	@ (8004274 <displayPosition+0x150>)
 80041ea:	f007 f903 	bl	800b3f4 <siprintf>
			lcd_write_string(buffer);
 80041ee:	4821      	ldr	r0, [pc, #132]	@ (8004274 <displayPosition+0x150>)
 80041f0:	f7fe f808 	bl	8002204 <lcd_write_string>
			break;
 80041f4:	e01a      	b.n	800422c <displayPosition+0x108>
		case in_local:
			lcd_set_cursor(0, 0);
 80041f6:	2100      	movs	r1, #0
 80041f8:	2000      	movs	r0, #0
 80041fa:	f7fe f819 	bl	8002230 <lcd_set_cursor>
			sprintf(buffer, "X:%.2f", position.x_in_local);
 80041fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004202:	491b      	ldr	r1, [pc, #108]	@ (8004270 <displayPosition+0x14c>)
 8004204:	481b      	ldr	r0, [pc, #108]	@ (8004274 <displayPosition+0x150>)
 8004206:	f007 f8f5 	bl	800b3f4 <siprintf>
			lcd_write_string(buffer);
 800420a:	481a      	ldr	r0, [pc, #104]	@ (8004274 <displayPosition+0x150>)
 800420c:	f7fd fffa 	bl	8002204 <lcd_write_string>
			lcd_set_cursor(1, 0);
 8004210:	2100      	movs	r1, #0
 8004212:	2001      	movs	r0, #1
 8004214:	f7fe f80c 	bl	8002230 <lcd_set_cursor>
			sprintf(buffer, "Y:%.2f", position.y_in_local);
 8004218:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800421c:	4916      	ldr	r1, [pc, #88]	@ (8004278 <displayPosition+0x154>)
 800421e:	4815      	ldr	r0, [pc, #84]	@ (8004274 <displayPosition+0x150>)
 8004220:	f007 f8e8 	bl	800b3f4 <siprintf>
			lcd_write_string(buffer);
 8004224:	4813      	ldr	r0, [pc, #76]	@ (8004274 <displayPosition+0x150>)
 8004226:	f7fd ffed 	bl	8002204 <lcd_write_string>
			break;
 800422a:	bf00      	nop
	}
	lcd_set_cursor(2, 0);
 800422c:	2100      	movs	r1, #0
 800422e:	2002      	movs	r0, #2
 8004230:	f7fd fffe 	bl	8002230 <lcd_set_cursor>
	sprintf(buffer, "Yaw:%.2f", position.h);
 8004234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004238:	4910      	ldr	r1, [pc, #64]	@ (800427c <displayPosition+0x158>)
 800423a:	480e      	ldr	r0, [pc, #56]	@ (8004274 <displayPosition+0x150>)
 800423c:	f007 f8da 	bl	800b3f4 <siprintf>
	lcd_write_string(buffer);
 8004240:	480c      	ldr	r0, [pc, #48]	@ (8004274 <displayPosition+0x150>)
 8004242:	f7fd ffdf 	bl	8002204 <lcd_write_string>
	lcd_set_cursor(3, 0);
 8004246:	2100      	movs	r1, #0
 8004248:	2003      	movs	r0, #3
 800424a:	f7fd fff1 	bl	8002230 <lcd_set_cursor>
	sprintf(buffer, "Pitch:%.2f", sensorData[1]);
 800424e:	4b0c      	ldr	r3, [pc, #48]	@ (8004280 <displayPosition+0x15c>)
 8004250:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004254:	490b      	ldr	r1, [pc, #44]	@ (8004284 <displayPosition+0x160>)
 8004256:	4807      	ldr	r0, [pc, #28]	@ (8004274 <displayPosition+0x150>)
 8004258:	f007 f8cc 	bl	800b3f4 <siprintf>
	lcd_write_string(buffer);
 800425c:	4805      	ldr	r0, [pc, #20]	@ (8004274 <displayPosition+0x150>)
 800425e:	f7fd ffd1 	bl	8002204 <lcd_write_string>
}
 8004262:	bf00      	nop
 8004264:	46bd      	mov	sp, r7
 8004266:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800426a:	b004      	add	sp, #16
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	0800fba8 	.word	0x0800fba8
 8004274:	2000063c 	.word	0x2000063c
 8004278:	0800fbb0 	.word	0x0800fbb0
 800427c:	0800fbb8 	.word	0x0800fbb8
 8004280:	20000530 	.word	0x20000530
 8004284:	0800fc34 	.word	0x0800fc34

08004288 <PID_controller>:
/* Variable for PID*/
double integral = 0.0, derivative = 0.0, prev_error = 0.0;
/* END */

double PID_controller(double setpoint, double actual_position, uint8_t pidMode)
{
 8004288:	b5b0      	push	{r4, r5, r7, lr}
 800428a:	b092      	sub	sp, #72	@ 0x48
 800428c:	af00      	add	r7, sp, #0
 800428e:	ed87 0b04 	vstr	d0, [r7, #16]
 8004292:	ed87 1b02 	vstr	d1, [r7, #8]
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
	double Kp = 1.0, Ki = 0.0, Kd = 0.0;
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	4b70      	ldr	r3, [pc, #448]	@ (8004460 <PID_controller+0x1d8>)
 80042a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double dt = 0.01;
 80042bc:	a364      	add	r3, pc, #400	@ (adr r3, 8004450 <PID_controller+0x1c8>)
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	switch(pidMode)
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d84f      	bhi.n	800436e <PID_controller+0xe6>
 80042ce:	a201      	add	r2, pc, #4	@ (adr r2, 80042d4 <PID_controller+0x4c>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	080042e5 	.word	0x080042e5
 80042d8:	08004307 	.word	0x08004307
 80042dc:	08004329 	.word	0x08004329
 80042e0:	0800434b 	.word	0x0800434b
	{
	case 1:
		Kp = 0.8, Ki = 0.5, Kd = 0.0;
 80042e4:	a35c      	add	r3, pc, #368	@ (adr r3, 8004458 <PID_controller+0x1d0>)
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	4b5c      	ldr	r3, [pc, #368]	@ (8004464 <PID_controller+0x1dc>)
 80042f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		break;
 8004304:	e033      	b.n	800436e <PID_controller+0xe6>
	case 2:
		Kp = 1.2, Ki = 1.2, Kd = 0.0;
 8004306:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800430a:	4b57      	ldr	r3, [pc, #348]	@ (8004468 <PID_controller+0x1e0>)
 800430c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8004310:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8004314:	4b54      	ldr	r3, [pc, #336]	@ (8004468 <PID_controller+0x1e0>)
 8004316:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		break;
 8004326:	e022      	b.n	800436e <PID_controller+0xe6>
	case 3:
		Kp = 1.5, Ki = 1.5, Kd = 0.0;
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	4b4f      	ldr	r3, [pc, #316]	@ (800446c <PID_controller+0x1e4>)
 800432e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	4b4d      	ldr	r3, [pc, #308]	@ (800446c <PID_controller+0x1e4>)
 8004338:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		break;
 8004348:	e011      	b.n	800436e <PID_controller+0xe6>
	case 4:
		Kp = 1.2, Ki = 0.0, Kd = 0.0;
 800434a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800434e:	4b46      	ldr	r3, [pc, #280]	@ (8004468 <PID_controller+0x1e0>)
 8004350:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		break;
 800436c:	bf00      	nop
	}
    // Proportional
    double error = setpoint - actual_position;
 800436e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004372:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004376:	f7fb ff87 	bl	8000288 <__aeabi_dsub>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	e9c7 2308 	strd	r2, r3, [r7, #32]

//    if(fabs(error) < 200) error = 0;
    // Integral
    integral += error * dt;
 8004382:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004386:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800438a:	f7fc f935 	bl	80005f8 <__aeabi_dmul>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	4b36      	ldr	r3, [pc, #216]	@ (8004470 <PID_controller+0x1e8>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f7fb ff76 	bl	800028c <__adddf3>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4932      	ldr	r1, [pc, #200]	@ (8004470 <PID_controller+0x1e8>)
 80043a6:	e9c1 2300 	strd	r2, r3, [r1]

    // Derivative
	derivative = (error - prev_error) / dt;
 80043aa:	4b32      	ldr	r3, [pc, #200]	@ (8004474 <PID_controller+0x1ec>)
 80043ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80043b4:	f7fb ff68 	bl	8000288 <__aeabi_dsub>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043c4:	f7fc fa42 	bl	800084c <__aeabi_ddiv>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	492a      	ldr	r1, [pc, #168]	@ (8004478 <PID_controller+0x1f0>)
 80043ce:	e9c1 2300 	strd	r2, r3, [r1]

    double output = Kp * error + Ki * integral + Kd * derivative;
 80043d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80043da:	f7fc f90d 	bl	80005f8 <__aeabi_dmul>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4614      	mov	r4, r2
 80043e4:	461d      	mov	r5, r3
 80043e6:	4b22      	ldr	r3, [pc, #136]	@ (8004470 <PID_controller+0x1e8>)
 80043e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043f0:	f7fc f902 	bl	80005f8 <__aeabi_dmul>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4620      	mov	r0, r4
 80043fa:	4629      	mov	r1, r5
 80043fc:	f7fb ff46 	bl	800028c <__adddf3>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4614      	mov	r4, r2
 8004406:	461d      	mov	r5, r3
 8004408:	4b1b      	ldr	r3, [pc, #108]	@ (8004478 <PID_controller+0x1f0>)
 800440a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800440e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004412:	f7fc f8f1 	bl	80005f8 <__aeabi_dmul>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4620      	mov	r0, r4
 800441c:	4629      	mov	r1, r5
 800441e:	f7fb ff35 	bl	800028c <__adddf3>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	e9c7 2306 	strd	r2, r3, [r7, #24]

    prev_error = error;
 800442a:	4912      	ldr	r1, [pc, #72]	@ (8004474 <PID_controller+0x1ec>)
 800442c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004430:	e9c1 2300 	strd	r2, r3, [r1]

    return output;
 8004434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004438:	ec43 2b17 	vmov	d7, r2, r3
}
 800443c:	eeb0 0a47 	vmov.f32	s0, s14
 8004440:	eef0 0a67 	vmov.f32	s1, s15
 8004444:	3748      	adds	r7, #72	@ 0x48
 8004446:	46bd      	mov	sp, r7
 8004448:	bdb0      	pop	{r4, r5, r7, pc}
 800444a:	bf00      	nop
 800444c:	f3af 8000 	nop.w
 8004450:	47ae147b 	.word	0x47ae147b
 8004454:	3f847ae1 	.word	0x3f847ae1
 8004458:	9999999a 	.word	0x9999999a
 800445c:	3fe99999 	.word	0x3fe99999
 8004460:	3ff00000 	.word	0x3ff00000
 8004464:	3fe00000 	.word	0x3fe00000
 8004468:	3ff33333 	.word	0x3ff33333
 800446c:	3ff80000 	.word	0x3ff80000
 8004470:	20000680 	.word	0x20000680
 8004474:	20000690 	.word	0x20000690
 8004478:	20000688 	.word	0x20000688
 800447c:	00000000 	.word	0x00000000

08004480 <PID_controllerH>:

double PID_controllerH(double setpoint, double actual_position, uint8_t pidMode)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08c      	sub	sp, #48	@ 0x30
 8004484:	af00      	add	r7, sp, #0
 8004486:	ed87 0b04 	vstr	d0, [r7, #16]
 800448a:	ed87 1b02 	vstr	d1, [r7, #8]
 800448e:	4603      	mov	r3, r0
 8004490:	71fb      	strb	r3, [r7, #7]
	double Kp = 1.0;
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	4b3a      	ldr	r3, [pc, #232]	@ (8004580 <PID_controllerH+0x100>)
 8004498:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double error = setpoint - actual_position;
 800449c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044a4:	f7fb fef0 	bl	8000288 <__aeabi_dsub>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	e9c7 2308 	strd	r2, r3, [r7, #32]

	switch(pidMode)
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d012      	beq.n	80044dc <PID_controllerH+0x5c>
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	dc16      	bgt.n	80044e8 <PID_controllerH+0x68>
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d002      	beq.n	80044c4 <PID_controllerH+0x44>
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d006      	beq.n	80044d0 <PID_controllerH+0x50>
 80044c2:	e011      	b.n	80044e8 <PID_controllerH+0x68>
	{
	case 1:
		Kp = 1.4;
 80044c4:	a32c      	add	r3, pc, #176	@ (adr r3, 8004578 <PID_controllerH+0xf8>)
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		break;
 80044ce:	e011      	b.n	80044f4 <PID_controllerH+0x74>
	case 2:
		Kp = 1.2;
 80044d0:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80044d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004584 <PID_controllerH+0x104>)
 80044d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		break;
 80044da:	e00b      	b.n	80044f4 <PID_controllerH+0x74>
	case 3:
		Kp = 1.5;
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	4b29      	ldr	r3, [pc, #164]	@ (8004588 <PID_controllerH+0x108>)
 80044e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		break;
 80044e6:	e005      	b.n	80044f4 <PID_controllerH+0x74>
	default:
		Kp = 0.5;
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	4b27      	ldr	r3, [pc, #156]	@ (800458c <PID_controllerH+0x10c>)
 80044ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		break;
 80044f2:	bf00      	nop
	}

	if(error > 180)
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	4b25      	ldr	r3, [pc, #148]	@ (8004590 <PID_controllerH+0x110>)
 80044fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80044fe:	f7fc fb0b 	bl	8000b18 <__aeabi_dcmpgt>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00b      	beq.n	8004520 <PID_controllerH+0xa0>
	{
		error -= 360;
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	4b21      	ldr	r3, [pc, #132]	@ (8004594 <PID_controllerH+0x114>)
 800450e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004512:	f7fb feb9 	bl	8000288 <__aeabi_dsub>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800451e:	e014      	b.n	800454a <PID_controllerH+0xca>
	}
	else if(error < -180)
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	4b1c      	ldr	r3, [pc, #112]	@ (8004598 <PID_controllerH+0x118>)
 8004526:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800452a:	f7fc fad7 	bl	8000adc <__aeabi_dcmplt>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <PID_controllerH+0xca>
	{
		error += 360;
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	4b16      	ldr	r3, [pc, #88]	@ (8004594 <PID_controllerH+0x114>)
 800453a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800453e:	f7fb fea5 	bl	800028c <__adddf3>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

//	if(fabs(error) < 1) error = 0;

    // Proportional
	double P = Kp * error;
 800454a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800454e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004552:	f7fc f851 	bl	80005f8 <__aeabi_dmul>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return P;
 800455e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004562:	ec43 2b17 	vmov	d7, r2, r3
}
 8004566:	eeb0 0a47 	vmov.f32	s0, s14
 800456a:	eef0 0a67 	vmov.f32	s1, s15
 800456e:	3730      	adds	r7, #48	@ 0x30
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	f3af 8000 	nop.w
 8004578:	66666666 	.word	0x66666666
 800457c:	3ff66666 	.word	0x3ff66666
 8004580:	3ff00000 	.word	0x3ff00000
 8004584:	3ff33333 	.word	0x3ff33333
 8004588:	3ff80000 	.word	0x3ff80000
 800458c:	3fe00000 	.word	0x3fe00000
 8004590:	40668000 	.word	0x40668000
 8004594:	40768000 	.word	0x40768000
 8004598:	c0668000 	.word	0xc0668000

0800459c <map>:
char buffCAM[10];

Silo silos[MAX_SILOS];

int map(int st1, int fn1, int st2, int fn2, int value)
{
 800459c:	b5b0      	push	{r4, r5, r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
    return (1.0 * (value - st1)) / ((fn1 - st1) * 1.0) * (fn2 - st2) + st2;
 80045aa:	6a3a      	ldr	r2, [r7, #32]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fb ffb7 	bl	8000524 <__aeabi_i2d>
 80045b6:	4604      	mov	r4, r0
 80045b8:	460d      	mov	r5, r1
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fb ffaf 	bl	8000524 <__aeabi_i2d>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4620      	mov	r0, r4
 80045cc:	4629      	mov	r1, r5
 80045ce:	f7fc f93d 	bl	800084c <__aeabi_ddiv>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4614      	mov	r4, r2
 80045d8:	461d      	mov	r5, r3
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fb ff9f 	bl	8000524 <__aeabi_i2d>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4620      	mov	r0, r4
 80045ec:	4629      	mov	r1, r5
 80045ee:	f7fc f803 	bl	80005f8 <__aeabi_dmul>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4614      	mov	r4, r2
 80045f8:	461d      	mov	r5, r3
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fb ff92 	bl	8000524 <__aeabi_i2d>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4620      	mov	r0, r4
 8004606:	4629      	mov	r1, r5
 8004608:	f7fb fe40 	bl	800028c <__adddf3>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4610      	mov	r0, r2
 8004612:	4619      	mov	r1, r3
 8004614:	f7fc faa0 	bl	8000b58 <__aeabi_d2iz>
 8004618:	4603      	mov	r3, r0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004624 <smoothVelocity>:
    }
    return target;
}

void smoothVelocity(double* Vx, double* Vy, double* W, double smoothingFactor)
{
 8004624:	b5b0      	push	{r4, r5, r7, lr}
 8004626:	b08c      	sub	sp, #48	@ 0x30
 8004628:	af00      	add	r7, sp, #0
 800462a:	6178      	str	r0, [r7, #20]
 800462c:	6139      	str	r1, [r7, #16]
 800462e:	60fa      	str	r2, [r7, #12]
 8004630:	ed87 0b00 	vstr	d0, [r7]
	double prevVx = 0.0;
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double prevVy = 0.0;
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double prevW = 0.0;
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *Vx = (1.0 - smoothingFactor) * prevVx + smoothingFactor * (*Vx);
 8004658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800465c:	f04f 0000 	mov.w	r0, #0
 8004660:	493e      	ldr	r1, [pc, #248]	@ (800475c <smoothVelocity+0x138>)
 8004662:	f7fb fe11 	bl	8000288 <__aeabi_dsub>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4610      	mov	r0, r2
 800466c:	4619      	mov	r1, r3
 800466e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004672:	f7fb ffc1 	bl	80005f8 <__aeabi_dmul>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4614      	mov	r4, r2
 800467c:	461d      	mov	r5, r3
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004688:	f7fb ffb6 	bl	80005f8 <__aeabi_dmul>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4620      	mov	r0, r4
 8004692:	4629      	mov	r1, r5
 8004694:	f7fb fdfa 	bl	800028c <__adddf3>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	6979      	ldr	r1, [r7, #20]
 800469e:	e9c1 2300 	strd	r2, r3, [r1]
    *Vy = (1.0 - smoothingFactor) * prevVy + smoothingFactor * (*Vy);
 80046a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a6:	f04f 0000 	mov.w	r0, #0
 80046aa:	492c      	ldr	r1, [pc, #176]	@ (800475c <smoothVelocity+0x138>)
 80046ac:	f7fb fdec 	bl	8000288 <__aeabi_dsub>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4610      	mov	r0, r2
 80046b6:	4619      	mov	r1, r3
 80046b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046bc:	f7fb ff9c 	bl	80005f8 <__aeabi_dmul>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4614      	mov	r4, r2
 80046c6:	461d      	mov	r5, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046d2:	f7fb ff91 	bl	80005f8 <__aeabi_dmul>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4620      	mov	r0, r4
 80046dc:	4629      	mov	r1, r5
 80046de:	f7fb fdd5 	bl	800028c <__adddf3>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	6939      	ldr	r1, [r7, #16]
 80046e8:	e9c1 2300 	strd	r2, r3, [r1]
    *W = (1.0 - smoothingFactor) * prevW + smoothingFactor * (*W);
 80046ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046f0:	f04f 0000 	mov.w	r0, #0
 80046f4:	4919      	ldr	r1, [pc, #100]	@ (800475c <smoothVelocity+0x138>)
 80046f6:	f7fb fdc7 	bl	8000288 <__aeabi_dsub>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4610      	mov	r0, r2
 8004700:	4619      	mov	r1, r3
 8004702:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004706:	f7fb ff77 	bl	80005f8 <__aeabi_dmul>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4614      	mov	r4, r2
 8004710:	461d      	mov	r5, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800471c:	f7fb ff6c 	bl	80005f8 <__aeabi_dmul>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4620      	mov	r0, r4
 8004726:	4629      	mov	r1, r5
 8004728:	f7fb fdb0 	bl	800028c <__adddf3>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	68f9      	ldr	r1, [r7, #12]
 8004732:	e9c1 2300 	strd	r2, r3, [r1]

    prevVx = *Vx;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    prevVy = *Vy;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	e9c7 2308 	strd	r2, r3, [r7, #32]
    prevW = *W;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	e9c7 2306 	strd	r2, r3, [r7, #24]
}
 8004754:	bf00      	nop
 8004756:	3730      	adds	r7, #48	@ 0x30
 8004758:	46bd      	mov	sp, r7
 800475a:	bdb0      	pop	{r4, r5, r7, pc}
 800475c:	3ff00000 	.word	0x3ff00000

08004760 <atTargetPosition>:

bool atTargetPosition(robotPosition setpoint, robotPosition position, double xyTolerance, double Htolerance)
{
 8004760:	b084      	sub	sp, #16
 8004762:	b580      	push	{r7, lr}
 8004764:	b08c      	sub	sp, #48	@ 0x30
 8004766:	af00      	add	r7, sp, #0
 8004768:	f107 0c38 	add.w	ip, r7, #56	@ 0x38
 800476c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8004770:	ed87 0b02 	vstr	d0, [r7, #8]
 8004774:	ed87 1b00 	vstr	d1, [r7]
	double error_x = setpoint.x_global - position.x_global;
 8004778:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800477c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004780:	f7fb fd82 	bl	8000288 <__aeabi_dsub>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double error_y = setpoint.y_global - position.y_global;
 800478c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8004790:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8004794:	f7fb fd78 	bl	8000288 <__aeabi_dsub>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double error_h = setpoint.h - position.h;
 80047a0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80047a4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80047a8:	f7fb fd6e 	bl	8000288 <__aeabi_dsub>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double distance = hypot(error_x, error_y);
 80047b4:	ed97 1b08 	vldr	d1, [r7, #32]
 80047b8:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80047bc:	f009 fc30 	bl	800e020 <hypot>
 80047c0:	ed87 0b04 	vstr	d0, [r7, #16]
//    return fabs(setpoint.x_global - position.x_global) < xyTolerance &&
//           fabs(setpoint.y_global - position.y_global) < xyTolerance &&
//           fabs(setpoint.h - position.h) < Htolerance;
	return distance < xyTolerance && error_h < Htolerance;
 80047c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047cc:	f7fc f986 	bl	8000adc <__aeabi_dcmplt>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <atTargetPosition+0x8c>
 80047d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80047de:	f7fc f97d 	bl	8000adc <__aeabi_dcmplt>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <atTargetPosition+0x8c>
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <atTargetPosition+0x8e>
 80047ec:	2300      	movs	r3, #0
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	b2db      	uxtb	r3, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3730      	adds	r7, #48	@ 0x30
 80047f8:	46bd      	mov	sp, r7
 80047fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047fe:	b004      	add	sp, #16
 8004800:	4770      	bx	lr
	...

08004804 <servo_write>:
    }
    return targetVelocity;
}

void servo_write(int angle)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af02      	add	r7, sp, #8
 800480a:	6078      	str	r0, [r7, #4]
	int i = map(0, 180, 10, 65, angle);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	2341      	movs	r3, #65	@ 0x41
 8004812:	220a      	movs	r2, #10
 8004814:	21b4      	movs	r1, #180	@ 0xb4
 8004816:	2000      	movs	r0, #0
 8004818:	f7ff fec0 	bl	800459c <map>
 800481c:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, i);
 800481e:	4b04      	ldr	r3, [pc, #16]	@ (8004830 <servo_write+0x2c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20000370 	.word	0x20000370
 8004834:	00000000 	.word	0x00000000

08004838 <PID_KFtocoordinate>:

    baru(Vx, Vy, W);
}

void PID_KFtocoordinate(robotPosition setpoint, uint8_t pidMode, double smoothingFactor)
{
 8004838:	b084      	sub	sp, #16
 800483a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800483e:	b0aa      	sub	sp, #168	@ 0xa8
 8004840:	af00      	add	r7, sp, #0
 8004842:	f107 0cc0 	add.w	ip, r7, #192	@ 0xc0
 8004846:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800484a:	ed87 0b00 	vstr	d0, [r7]
//    EKF currentPosition = extendedKalmanFilter();
	robotPosition currentPosition = odometry();
 800484e:	f107 0320 	add.w	r3, r7, #32
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff f8f4 	bl	8003a40 <odometry>

	double gain = sensorData[1] * 300; // IMU pitch
 8004858:	4b97      	ldr	r3, [pc, #604]	@ (8004ab8 <PID_KFtocoordinate+0x280>)
 800485a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800485e:	a392      	add	r3, pc, #584	@ (adr r3, 8004aa8 <PID_KFtocoordinate+0x270>)
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f7fb fec8 	bl	80005f8 <__aeabi_dmul>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
    double error_x = setpoint.x_global - currentPosition.x_global;
 8004870:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8004874:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004878:	f7fb fd06 	bl	8000288 <__aeabi_dsub>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    double error_y = setpoint.y_global - currentPosition.y_global;
 8004884:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004888:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800488c:	f7fb fcfc 	bl	8000288 <__aeabi_dsub>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    double heading = atan2(error_y, error_x);
 8004898:	ed97 1b26 	vldr	d1, [r7, #152]	@ 0x98
 800489c:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 80048a0:	f009 fbba 	bl	800e018 <atan2>
 80048a4:	ed87 0b22 	vstr	d0, [r7, #136]	@ 0x88
    double current_heading_rad = currentPosition.h * M_PI / 180.0;
 80048a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80048ac:	a380      	add	r3, pc, #512	@ (adr r3, 8004ab0 <PID_KFtocoordinate+0x278>)
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	f7fb fea1 	bl	80005f8 <__aeabi_dmul>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	4b7e      	ldr	r3, [pc, #504]	@ (8004abc <PID_KFtocoordinate+0x284>)
 80048c4:	f7fb ffc2 	bl	800084c <__aeabi_ddiv>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    double Vx_local = fabs(PID_controller(setpoint.x_global, currentPosition.x_global, pidMode)) * cos(heading);
 80048d0:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 80048d4:	ed97 6b08 	vldr	d6, [r7, #32]
 80048d8:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 80048dc:	4618      	mov	r0, r3
 80048de:	eeb0 1a46 	vmov.f32	s2, s12
 80048e2:	eef0 1a66 	vmov.f32	s3, s13
 80048e6:	eeb0 0a47 	vmov.f32	s0, s14
 80048ea:	eef0 0a67 	vmov.f32	s1, s15
 80048ee:	f7ff fccb 	bl	8004288 <PID_controller>
 80048f2:	ec53 2b10 	vmov	r2, r3, d0
 80048f6:	4690      	mov	r8, r2
 80048f8:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80048fc:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 8004900:	f009 fbc2 	bl	800e088 <cos>
 8004904:	ec53 2b10 	vmov	r2, r3, d0
 8004908:	4640      	mov	r0, r8
 800490a:	4649      	mov	r1, r9
 800490c:	f7fb fe74 	bl	80005f8 <__aeabi_dmul>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    double Vy_local = fabs(PID_controller(setpoint.y_global, currentPosition.y_global, pidMode)) * sin(heading);
 8004918:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 800491c:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8004920:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 8004924:	4618      	mov	r0, r3
 8004926:	eeb0 1a46 	vmov.f32	s2, s12
 800492a:	eef0 1a66 	vmov.f32	s3, s13
 800492e:	eeb0 0a47 	vmov.f32	s0, s14
 8004932:	eef0 0a67 	vmov.f32	s1, s15
 8004936:	f7ff fca7 	bl	8004288 <PID_controller>
 800493a:	ec53 2b10 	vmov	r2, r3, d0
 800493e:	4614      	mov	r4, r2
 8004940:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8004944:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 8004948:	f009 fbf2 	bl	800e130 <sin>
 800494c:	ec53 2b10 	vmov	r2, r3, d0
 8004950:	4620      	mov	r0, r4
 8004952:	4629      	mov	r1, r5
 8004954:	f7fb fe50 	bl	80005f8 <__aeabi_dmul>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    double Vx = Vx_local * cos(current_heading_rad) - Vy_local * sin(current_heading_rad);
 8004960:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8004964:	f009 fb90 	bl	800e088 <cos>
 8004968:	ec51 0b10 	vmov	r0, r1, d0
 800496c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8004970:	f7fb fe42 	bl	80005f8 <__aeabi_dmul>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4614      	mov	r4, r2
 800497a:	461d      	mov	r5, r3
 800497c:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8004980:	f009 fbd6 	bl	800e130 <sin>
 8004984:	ec51 0b10 	vmov	r0, r1, d0
 8004988:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800498c:	f7fb fe34 	bl	80005f8 <__aeabi_dmul>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4620      	mov	r0, r4
 8004996:	4629      	mov	r1, r5
 8004998:	f7fb fc76 	bl	8000288 <__aeabi_dsub>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double Vy = Vx_local * sin(current_heading_rad) + Vy_local * cos(current_heading_rad);
 80049a4:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 80049a8:	f009 fbc2 	bl	800e130 <sin>
 80049ac:	ec51 0b10 	vmov	r0, r1, d0
 80049b0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80049b4:	f7fb fe20 	bl	80005f8 <__aeabi_dmul>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4614      	mov	r4, r2
 80049be:	461d      	mov	r5, r3
 80049c0:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 80049c4:	f009 fb60 	bl	800e088 <cos>
 80049c8:	ec51 0b10 	vmov	r0, r1, d0
 80049cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80049d0:	f7fb fe12 	bl	80005f8 <__aeabi_dmul>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4620      	mov	r0, r4
 80049da:	4629      	mov	r1, r5
 80049dc:	f7fb fc56 	bl	800028c <__adddf3>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double W = PID_controllerH(setpoint.h, currentPosition.h, pidMode);
 80049e8:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 80049ec:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 80049f0:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 80049f4:	4618      	mov	r0, r3
 80049f6:	eeb0 1a46 	vmov.f32	s2, s12
 80049fa:	eef0 1a66 	vmov.f32	s3, s13
 80049fe:	eeb0 0a47 	vmov.f32	s0, s14
 8004a02:	eef0 0a67 	vmov.f32	s1, s15
 8004a06:	f7ff fd3b 	bl	8004480 <PID_controllerH>
 8004a0a:	eeb0 7a40 	vmov.f32	s14, s0
 8004a0e:	eef0 7a60 	vmov.f32	s15, s1
 8004a12:	ed87 7b02 	vstr	d7, [r7, #8]

    if(gain > 0)	{Vy += gain;}
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8004a22:	f7fc f879 	bl	8000b18 <__aeabi_dcmpgt>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <PID_KFtocoordinate+0x20a>
 8004a2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a30:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8004a34:	f7fb fc2a 	bl	800028c <__adddf3>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004a40:	e009      	b.n	8004a56 <PID_KFtocoordinate+0x21e>
    else			{Vy -= gain;}
 8004a42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a46:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8004a4a:	f7fb fc1d 	bl	8000288 <__aeabi_dsub>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	e9c7 2304 	strd	r2, r3, [r7, #16]

//    Vy += (gain > 0) ? gain : -gain;

    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
 8004a56:	f107 0208 	add.w	r2, r7, #8
 8004a5a:	f107 0110 	add.w	r1, r7, #16
 8004a5e:	f107 0318 	add.w	r3, r7, #24
 8004a62:	ed97 0b00 	vldr	d0, [r7]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff fddc 	bl	8004624 <smoothVelocity>
    baru(Vx, Vy, W);
 8004a6c:	ed97 7b06 	vldr	d7, [r7, #24]
 8004a70:	ed97 6b04 	vldr	d6, [r7, #16]
 8004a74:	ed97 5b02 	vldr	d5, [r7, #8]
 8004a78:	eeb0 2a45 	vmov.f32	s4, s10
 8004a7c:	eef0 2a65 	vmov.f32	s5, s11
 8004a80:	eeb0 1a46 	vmov.f32	s2, s12
 8004a84:	eef0 1a66 	vmov.f32	s3, s13
 8004a88:	eeb0 0a47 	vmov.f32	s0, s14
 8004a8c:	eef0 0a67 	vmov.f32	s1, s15
 8004a90:	f7fc fda2 	bl	80015d8 <baru>
}
 8004a94:	bf00      	nop
 8004a96:	37a8      	adds	r7, #168	@ 0xa8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8004a9e:	b004      	add	sp, #16
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	f3af 8000 	nop.w
 8004aa8:	00000000 	.word	0x00000000
 8004aac:	4072c000 	.word	0x4072c000
 8004ab0:	54442d18 	.word	0x54442d18
 8004ab4:	400921fb 	.word	0x400921fb
 8004ab8:	20000530 	.word	0x20000530
 8004abc:	40668000 	.word	0x40668000

08004ac0 <focusToTheBall>:
    putar(0, 0, W);
//    Inverse_Kinematics(0, 0, W);
}

void focusToTheBall()
{
 8004ac0:	b5b0      	push	{r4, r5, r7, lr}
 8004ac2:	b08c      	sub	sp, #48	@ 0x30
 8004ac4:	af02      	add	r7, sp, #8
    int ballDistance = camera[0] * 10; // convert to mm
 8004ac6:	4b50      	ldr	r3, [pc, #320]	@ (8004c08 <focusToTheBall+0x148>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    int ballAngle = camera[1];
 8004ad4:	4b4c      	ldr	r3, [pc, #304]	@ (8004c08 <focusToTheBall+0x148>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	623b      	str	r3, [r7, #32]
    int ballExistence = camera[2];
 8004ada:	4b4b      	ldr	r3, [pc, #300]	@ (8004c08 <focusToTheBall+0x148>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	61fb      	str	r3, [r7, #28]
    int yBALL = cos(ballAngle * M_PI / 180.0) * ballDistance;
 8004ae0:	6a38      	ldr	r0, [r7, #32]
 8004ae2:	f7fb fd1f 	bl	8000524 <__aeabi_i2d>
 8004ae6:	a346      	add	r3, pc, #280	@ (adr r3, 8004c00 <focusToTheBall+0x140>)
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	f7fb fd84 	bl	80005f8 <__aeabi_dmul>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4610      	mov	r0, r2
 8004af6:	4619      	mov	r1, r3
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	4b43      	ldr	r3, [pc, #268]	@ (8004c0c <focusToTheBall+0x14c>)
 8004afe:	f7fb fea5 	bl	800084c <__aeabi_ddiv>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	ec43 2b17 	vmov	d7, r2, r3
 8004b0a:	eeb0 0a47 	vmov.f32	s0, s14
 8004b0e:	eef0 0a67 	vmov.f32	s1, s15
 8004b12:	f009 fab9 	bl	800e088 <cos>
 8004b16:	ec55 4b10 	vmov	r4, r5, d0
 8004b1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b1c:	f7fb fd02 	bl	8000524 <__aeabi_i2d>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4620      	mov	r0, r4
 8004b26:	4629      	mov	r1, r5
 8004b28:	f7fb fd66 	bl	80005f8 <__aeabi_dmul>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	f7fc f810 	bl	8000b58 <__aeabi_d2iz>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	61bb      	str	r3, [r7, #24]

    int gndtoCam = 518; // in mm
 8004b3c:	f240 2306 	movw	r3, #518	@ 0x206
 8004b40:	617b      	str	r3, [r7, #20]
    static bool increasing = true;
    static int i = 95;

    if(ballExistence != 0)
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d034      	beq.n	8004bb2 <focusToTheBall+0xf2>
    {
        double focus = atan2(yBALL, gndtoCam) * 180.0 / M_PI;
 8004b48:	69b8      	ldr	r0, [r7, #24]
 8004b4a:	f7fb fceb 	bl	8000524 <__aeabi_i2d>
 8004b4e:	4604      	mov	r4, r0
 8004b50:	460d      	mov	r5, r1
 8004b52:	6978      	ldr	r0, [r7, #20]
 8004b54:	f7fb fce6 	bl	8000524 <__aeabi_i2d>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	ec43 2b11 	vmov	d1, r2, r3
 8004b60:	ec45 4b10 	vmov	d0, r4, r5
 8004b64:	f009 fa58 	bl	800e018 <atan2>
 8004b68:	ec51 0b10 	vmov	r0, r1, d0
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	4b26      	ldr	r3, [pc, #152]	@ (8004c0c <focusToTheBall+0x14c>)
 8004b72:	f7fb fd41 	bl	80005f8 <__aeabi_dmul>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	a320      	add	r3, pc, #128	@ (adr r3, 8004c00 <focusToTheBall+0x140>)
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f7fb fe62 	bl	800084c <__aeabi_ddiv>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        int focusMapping = map(0, 90, 50, 134, focus); // 50, 134
 8004b90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b94:	f7fb ffe0 	bl	8000b58 <__aeabi_d2iz>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	2386      	movs	r3, #134	@ 0x86
 8004b9e:	2232      	movs	r2, #50	@ 0x32
 8004ba0:	215a      	movs	r1, #90	@ 0x5a
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	f7ff fcfa 	bl	800459c <map>
 8004ba8:	6078      	str	r0, [r7, #4]
        servo_write(focusMapping);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff fe2a 	bl	8004804 <servo_write>
    		i--;
    		if(i <= 95) increasing = true;
    	}
    	servo_write(i);
    }
}
 8004bb0:	e021      	b.n	8004bf6 <focusToTheBall+0x136>
    	if(increasing)
 8004bb2:	4b17      	ldr	r3, [pc, #92]	@ (8004c10 <focusToTheBall+0x150>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <focusToTheBall+0x114>
    		i++;
 8004bba:	4b16      	ldr	r3, [pc, #88]	@ (8004c14 <focusToTheBall+0x154>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	4a14      	ldr	r2, [pc, #80]	@ (8004c14 <focusToTheBall+0x154>)
 8004bc2:	6013      	str	r3, [r2, #0]
    		if(i >= 125) increasing = false;
 8004bc4:	4b13      	ldr	r3, [pc, #76]	@ (8004c14 <focusToTheBall+0x154>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b7c      	cmp	r3, #124	@ 0x7c
 8004bca:	dd0f      	ble.n	8004bec <focusToTheBall+0x12c>
 8004bcc:	4b10      	ldr	r3, [pc, #64]	@ (8004c10 <focusToTheBall+0x150>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	e00b      	b.n	8004bec <focusToTheBall+0x12c>
    		i--;
 8004bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8004c14 <focusToTheBall+0x154>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	4a0e      	ldr	r2, [pc, #56]	@ (8004c14 <focusToTheBall+0x154>)
 8004bdc:	6013      	str	r3, [r2, #0]
    		if(i <= 95) increasing = true;
 8004bde:	4b0d      	ldr	r3, [pc, #52]	@ (8004c14 <focusToTheBall+0x154>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b5f      	cmp	r3, #95	@ 0x5f
 8004be4:	dc02      	bgt.n	8004bec <focusToTheBall+0x12c>
 8004be6:	4b0a      	ldr	r3, [pc, #40]	@ (8004c10 <focusToTheBall+0x150>)
 8004be8:	2201      	movs	r2, #1
 8004bea:	701a      	strb	r2, [r3, #0]
    	servo_write(i);
 8004bec:	4b09      	ldr	r3, [pc, #36]	@ (8004c14 <focusToTheBall+0x154>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff fe07 	bl	8004804 <servo_write>
}
 8004bf6:	bf00      	nop
 8004bf8:	3728      	adds	r7, #40	@ 0x28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	54442d18 	.word	0x54442d18
 8004c04:	400921fb 	.word	0x400921fb
 8004c08:	2000057c 	.word	0x2000057c
 8004c0c:	40668000 	.word	0x40668000
 8004c10:	200000c9 	.word	0x200000c9
 8004c14:	200000cc 	.word	0x200000cc

08004c18 <initializeSilos>:

// Initialize silos array
void initializeSilos()
{
 8004c18:	b5b0      	push	{r4, r5, r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_SILOS; i++)
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	e092      	b.n	8004d4a <initializeSilos+0x132>
    {
        silos[i].distance = SILO_NOT_DETECTED_DISTANCE;
 8004c24:	4a50      	ldr	r2, [pc, #320]	@ (8004d68 <initializeSilos+0x150>)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	015b      	lsls	r3, r3, #5
 8004c2a:	4413      	add	r3, r2
 8004c2c:	4a4f      	ldr	r2, [pc, #316]	@ (8004d6c <initializeSilos+0x154>)
 8004c2e:	601a      	str	r2, [r3, #0]
        silos[i].angle = SILO_NOT_DETECTED_ANGLE;
 8004c30:	4a4d      	ldr	r2, [pc, #308]	@ (8004d68 <initializeSilos+0x150>)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	015b      	lsls	r3, r3, #5
 8004c36:	4413      	add	r3, r2
 8004c38:	3304      	adds	r3, #4
 8004c3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004c3e:	601a      	str	r2, [r3, #0]
        silos[i].detected = false;
 8004c40:	4a49      	ldr	r2, [pc, #292]	@ (8004d68 <initializeSilos+0x150>)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	015b      	lsls	r3, r3, #5
 8004c46:	4413      	add	r3, r2
 8004c48:	3308      	adds	r3, #8
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]
        silos[i].ballInSilo = 0;
 8004c4e:	4a46      	ldr	r2, [pc, #280]	@ (8004d68 <initializeSilos+0x150>)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	015b      	lsls	r3, r3, #5
 8004c54:	4413      	add	r3, r2
 8004c56:	330c      	adds	r3, #12
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
        silos[i].x = silos[i].distance * sin(silos[i].angle * M_PI/180);
 8004c5c:	4a42      	ldr	r2, [pc, #264]	@ (8004d68 <initializeSilos+0x150>)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	015b      	lsls	r3, r3, #5
 8004c62:	4413      	add	r3, r2
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fb fc5c 	bl	8000524 <__aeabi_i2d>
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	460d      	mov	r5, r1
 8004c70:	4a3d      	ldr	r2, [pc, #244]	@ (8004d68 <initializeSilos+0x150>)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	015b      	lsls	r3, r3, #5
 8004c76:	4413      	add	r3, r2
 8004c78:	3304      	adds	r3, #4
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fb fc51 	bl	8000524 <__aeabi_i2d>
 8004c82:	a337      	add	r3, pc, #220	@ (adr r3, 8004d60 <initializeSilos+0x148>)
 8004c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c88:	f7fb fcb6 	bl	80005f8 <__aeabi_dmul>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4610      	mov	r0, r2
 8004c92:	4619      	mov	r1, r3
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	4b35      	ldr	r3, [pc, #212]	@ (8004d70 <initializeSilos+0x158>)
 8004c9a:	f7fb fdd7 	bl	800084c <__aeabi_ddiv>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	ec43 2b17 	vmov	d7, r2, r3
 8004ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8004caa:	eef0 0a67 	vmov.f32	s1, s15
 8004cae:	f009 fa3f 	bl	800e130 <sin>
 8004cb2:	ec53 2b10 	vmov	r2, r3, d0
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	4629      	mov	r1, r5
 8004cba:	f7fb fc9d 	bl	80005f8 <__aeabi_dmul>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4829      	ldr	r0, [pc, #164]	@ (8004d68 <initializeSilos+0x150>)
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	0149      	lsls	r1, r1, #5
 8004cc8:	4401      	add	r1, r0
 8004cca:	3110      	adds	r1, #16
 8004ccc:	e9c1 2300 	strd	r2, r3, [r1]
        silos[i].y = silos[i].distance * cos(silos[i].angle * M_PI/180);
 8004cd0:	4a25      	ldr	r2, [pc, #148]	@ (8004d68 <initializeSilos+0x150>)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	015b      	lsls	r3, r3, #5
 8004cd6:	4413      	add	r3, r2
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fb fc22 	bl	8000524 <__aeabi_i2d>
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	460d      	mov	r5, r1
 8004ce4:	4a20      	ldr	r2, [pc, #128]	@ (8004d68 <initializeSilos+0x150>)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	015b      	lsls	r3, r3, #5
 8004cea:	4413      	add	r3, r2
 8004cec:	3304      	adds	r3, #4
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fb fc17 	bl	8000524 <__aeabi_i2d>
 8004cf6:	a31a      	add	r3, pc, #104	@ (adr r3, 8004d60 <initializeSilos+0x148>)
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f7fb fc7c 	bl	80005f8 <__aeabi_dmul>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4610      	mov	r0, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	4b18      	ldr	r3, [pc, #96]	@ (8004d70 <initializeSilos+0x158>)
 8004d0e:	f7fb fd9d 	bl	800084c <__aeabi_ddiv>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	ec43 2b17 	vmov	d7, r2, r3
 8004d1a:	eeb0 0a47 	vmov.f32	s0, s14
 8004d1e:	eef0 0a67 	vmov.f32	s1, s15
 8004d22:	f009 f9b1 	bl	800e088 <cos>
 8004d26:	ec53 2b10 	vmov	r2, r3, d0
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	f7fb fc63 	bl	80005f8 <__aeabi_dmul>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	480c      	ldr	r0, [pc, #48]	@ (8004d68 <initializeSilos+0x150>)
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	0149      	lsls	r1, r1, #5
 8004d3c:	4401      	add	r1, r0
 8004d3e:	3118      	adds	r1, #24
 8004d40:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < MAX_SILOS; i++)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3301      	adds	r3, #1
 8004d48:	607b      	str	r3, [r7, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	f77f af69 	ble.w	8004c24 <initializeSilos+0xc>
    }
}
 8004d52:	bf00      	nop
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d5c:	f3af 8000 	nop.w
 8004d60:	54442d18 	.word	0x54442d18
 8004d64:	400921fb 	.word	0x400921fb
 8004d68:	20000698 	.word	0x20000698
 8004d6c:	00018696 	.word	0x00018696
 8004d70:	40668000 	.word	0x40668000
 8004d74:	00000000 	.word	0x00000000

08004d78 <detectAndStoreSilo>:

Silo detectAndStoreSilo()
{
 8004d78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d7c:	b0ae      	sub	sp, #184	@ 0xb8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
    Silo bestSilo;
    bestSilo.distance = SILO_NOT_DETECTED_DISTANCE;
 8004d82:	4bcd      	ldr	r3, [pc, #820]	@ (80050b8 <detectAndStoreSilo+0x340>)
 8004d84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    bestSilo.angle = SILO_NOT_DETECTED_ANGLE;
 8004d88:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8004d8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    bestSilo.detected = false;
 8004d90:	2300      	movs	r3, #0
 8004d92:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
    servo_write(126);
 8004d96:	207e      	movs	r0, #126	@ 0x7e
 8004d98:	f7ff fd34 	bl	8004804 <servo_write>

    robotPosition position = odometry();
 8004d9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fe fe4d 	bl	8003a40 <odometry>
    int siloDistances[MAX_SILOS] = {camera[3] * 10, camera[5] * 10, camera[7] * 10, camera[9] * 10, camera[11] * 10}; // convert to mm
 8004da6:	4bc5      	ldr	r3, [pc, #788]	@ (80050bc <detectAndStoreSilo+0x344>)
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	4bc1      	ldr	r3, [pc, #772]	@ (80050bc <detectAndStoreSilo+0x344>)
 8004db6:	695a      	ldr	r2, [r3, #20]
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	623b      	str	r3, [r7, #32]
 8004dc2:	4bbe      	ldr	r3, [pc, #760]	@ (80050bc <detectAndStoreSilo+0x344>)
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dd0:	4bba      	ldr	r3, [pc, #744]	@ (80050bc <detectAndStoreSilo+0x344>)
 8004dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dde:	4bb7      	ldr	r3, [pc, #732]	@ (80050bc <detectAndStoreSilo+0x344>)
 8004de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int siloAngles[MAX_SILOS] = {camera[4], camera[6], camera[8], camera[10], camera[12]};
 8004dec:	4bb3      	ldr	r3, [pc, #716]	@ (80050bc <detectAndStoreSilo+0x344>)
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	4bb2      	ldr	r3, [pc, #712]	@ (80050bc <detectAndStoreSilo+0x344>)
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	4bb0      	ldr	r3, [pc, #704]	@ (80050bc <detectAndStoreSilo+0x344>)
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	4baf      	ldr	r3, [pc, #700]	@ (80050bc <detectAndStoreSilo+0x344>)
 8004e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	4bad      	ldr	r3, [pc, #692]	@ (80050bc <detectAndStoreSilo+0x344>)
 8004e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e08:	61bb      	str	r3, [r7, #24]

    int ballDistance = camera[0] * 10; // convert to mm
 8004e0a:	4bac      	ldr	r3, [pc, #688]	@ (80050bc <detectAndStoreSilo+0x344>)
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    int ballAngle = camera[1];
 8004e1a:	4ba8      	ldr	r3, [pc, #672]	@ (80050bc <detectAndStoreSilo+0x344>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    int ballExistence = camera[2];
 8004e22:	4ba6      	ldr	r3, [pc, #664]	@ (80050bc <detectAndStoreSilo+0x344>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    double xBall = position.x_global + ballDistance * sin(ballAngle * M_PI / 180.0);
 8004e2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e2e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8004e32:	f7fb fb77 	bl	8000524 <__aeabi_i2d>
 8004e36:	4680      	mov	r8, r0
 8004e38:	4689      	mov	r9, r1
 8004e3a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8004e3e:	f7fb fb71 	bl	8000524 <__aeabi_i2d>
 8004e42:	a39b      	add	r3, pc, #620	@ (adr r3, 80050b0 <detectAndStoreSilo+0x338>)
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f7fb fbd6 	bl	80005f8 <__aeabi_dmul>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4610      	mov	r0, r2
 8004e52:	4619      	mov	r1, r3
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	4b99      	ldr	r3, [pc, #612]	@ (80050c0 <detectAndStoreSilo+0x348>)
 8004e5a:	f7fb fcf7 	bl	800084c <__aeabi_ddiv>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	ec43 2b17 	vmov	d7, r2, r3
 8004e66:	eeb0 0a47 	vmov.f32	s0, s14
 8004e6a:	eef0 0a67 	vmov.f32	s1, s15
 8004e6e:	f009 f95f 	bl	800e130 <sin>
 8004e72:	ec53 2b10 	vmov	r2, r3, d0
 8004e76:	4640      	mov	r0, r8
 8004e78:	4649      	mov	r1, r9
 8004e7a:	f7fb fbbd 	bl	80005f8 <__aeabi_dmul>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4620      	mov	r0, r4
 8004e84:	4629      	mov	r1, r5
 8004e86:	f7fb fa01 	bl	800028c <__adddf3>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

    for (int i = 0; i < MAX_SILOS; i++)
 8004e92:	2300      	movs	r3, #0
 8004e94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e98:	e0f5      	b.n	8005086 <detectAndStoreSilo+0x30e>
    {
        if (siloDistances[i] != SILO_NOT_DETECTED_DISTANCE && siloAngles[i] != SILO_NOT_DETECTED_ANGLE)
 8004e9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	33b8      	adds	r3, #184	@ 0xb8
 8004ea2:	443b      	add	r3, r7
 8004ea4:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8004ea8:	4a83      	ldr	r2, [pc, #524]	@ (80050b8 <detectAndStoreSilo+0x340>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	f000 80de 	beq.w	800506c <detectAndStoreSilo+0x2f4>
 8004eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	33b8      	adds	r3, #184	@ 0xb8
 8004eb8:	443b      	add	r3, r7
 8004eba:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8004ebe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	f000 80d2 	beq.w	800506c <detectAndStoreSilo+0x2f4>
        {
            silos[i].distance = siloDistances[i];
 8004ec8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	33b8      	adds	r3, #184	@ 0xb8
 8004ed0:	443b      	add	r3, r7
 8004ed2:	f853 2c9c 	ldr.w	r2, [r3, #-156]
 8004ed6:	497b      	ldr	r1, [pc, #492]	@ (80050c4 <detectAndStoreSilo+0x34c>)
 8004ed8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004edc:	015b      	lsls	r3, r3, #5
 8004ede:	440b      	add	r3, r1
 8004ee0:	601a      	str	r2, [r3, #0]
            silos[i].angle = siloAngles[i];
 8004ee2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	33b8      	adds	r3, #184	@ 0xb8
 8004eea:	443b      	add	r3, r7
 8004eec:	f853 2cb0 	ldr.w	r2, [r3, #-176]
 8004ef0:	4974      	ldr	r1, [pc, #464]	@ (80050c4 <detectAndStoreSilo+0x34c>)
 8004ef2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ef6:	015b      	lsls	r3, r3, #5
 8004ef8:	440b      	add	r3, r1
 8004efa:	3304      	adds	r3, #4
 8004efc:	601a      	str	r2, [r3, #0]
            silos[i].detected = true;
 8004efe:	4a71      	ldr	r2, [pc, #452]	@ (80050c4 <detectAndStoreSilo+0x34c>)
 8004f00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f04:	015b      	lsls	r3, r3, #5
 8004f06:	4413      	add	r3, r2
 8004f08:	3308      	adds	r3, #8
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	701a      	strb	r2, [r3, #0]
            silos[i].ballInSilo = ballExistence;
 8004f0e:	4a6d      	ldr	r2, [pc, #436]	@ (80050c4 <detectAndStoreSilo+0x34c>)
 8004f10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f14:	015b      	lsls	r3, r3, #5
 8004f16:	4413      	add	r3, r2
 8004f18:	330c      	adds	r3, #12
 8004f1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f1e:	601a      	str	r2, [r3, #0]
            // Calculate global coordinates of the detected silo
            silos[i].x = position.x_global + siloDistances[i] * sin(siloAngles[i] * M_PI / 180.0);
 8004f20:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	33b8      	adds	r3, #184	@ 0xb8
 8004f2c:	443b      	add	r3, r7
 8004f2e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fb faf6 	bl	8000524 <__aeabi_i2d>
 8004f38:	4680      	mov	r8, r0
 8004f3a:	4689      	mov	r9, r1
 8004f3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	33b8      	adds	r3, #184	@ 0xb8
 8004f44:	443b      	add	r3, r7
 8004f46:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fb faea 	bl	8000524 <__aeabi_i2d>
 8004f50:	a357      	add	r3, pc, #348	@ (adr r3, 80050b0 <detectAndStoreSilo+0x338>)
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	f7fb fb4f 	bl	80005f8 <__aeabi_dmul>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4610      	mov	r0, r2
 8004f60:	4619      	mov	r1, r3
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	4b56      	ldr	r3, [pc, #344]	@ (80050c0 <detectAndStoreSilo+0x348>)
 8004f68:	f7fb fc70 	bl	800084c <__aeabi_ddiv>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	ec43 2b17 	vmov	d7, r2, r3
 8004f74:	eeb0 0a47 	vmov.f32	s0, s14
 8004f78:	eef0 0a67 	vmov.f32	s1, s15
 8004f7c:	f009 f8d8 	bl	800e130 <sin>
 8004f80:	ec53 2b10 	vmov	r2, r3, d0
 8004f84:	4640      	mov	r0, r8
 8004f86:	4649      	mov	r1, r9
 8004f88:	f7fb fb36 	bl	80005f8 <__aeabi_dmul>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4620      	mov	r0, r4
 8004f92:	4629      	mov	r1, r5
 8004f94:	f7fb f97a 	bl	800028c <__adddf3>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4849      	ldr	r0, [pc, #292]	@ (80050c4 <detectAndStoreSilo+0x34c>)
 8004f9e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8004fa2:	0149      	lsls	r1, r1, #5
 8004fa4:	4401      	add	r1, r0
 8004fa6:	3110      	adds	r1, #16
 8004fa8:	e9c1 2300 	strd	r2, r3, [r1]
            silos[i].y = position.y_global + siloDistances[i] * cos(siloAngles[i] * M_PI / 180.0);
 8004fac:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8004fb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	33b8      	adds	r3, #184	@ 0xb8
 8004fb8:	443b      	add	r3, r7
 8004fba:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fb fab0 	bl	8000524 <__aeabi_i2d>
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	4689      	mov	r9, r1
 8004fc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	33b8      	adds	r3, #184	@ 0xb8
 8004fd0:	443b      	add	r3, r7
 8004fd2:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fb faa4 	bl	8000524 <__aeabi_i2d>
 8004fdc:	a334      	add	r3, pc, #208	@ (adr r3, 80050b0 <detectAndStoreSilo+0x338>)
 8004fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe2:	f7fb fb09 	bl	80005f8 <__aeabi_dmul>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4610      	mov	r0, r2
 8004fec:	4619      	mov	r1, r3
 8004fee:	f04f 0200 	mov.w	r2, #0
 8004ff2:	4b33      	ldr	r3, [pc, #204]	@ (80050c0 <detectAndStoreSilo+0x348>)
 8004ff4:	f7fb fc2a 	bl	800084c <__aeabi_ddiv>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	ec43 2b17 	vmov	d7, r2, r3
 8005000:	eeb0 0a47 	vmov.f32	s0, s14
 8005004:	eef0 0a67 	vmov.f32	s1, s15
 8005008:	f009 f83e 	bl	800e088 <cos>
 800500c:	ec53 2b10 	vmov	r2, r3, d0
 8005010:	4640      	mov	r0, r8
 8005012:	4649      	mov	r1, r9
 8005014:	f7fb faf0 	bl	80005f8 <__aeabi_dmul>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4620      	mov	r0, r4
 800501e:	4629      	mov	r1, r5
 8005020:	f7fb f934 	bl	800028c <__adddf3>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4826      	ldr	r0, [pc, #152]	@ (80050c4 <detectAndStoreSilo+0x34c>)
 800502a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800502e:	0149      	lsls	r1, r1, #5
 8005030:	4401      	add	r1, r0
 8005032:	3118      	adds	r1, #24
 8005034:	e9c1 2300 	strd	r2, r3, [r1]

            // Check if this is the nearest silo
            if (silos[i].angle < bestSilo.angle)
 8005038:	4a22      	ldr	r2, [pc, #136]	@ (80050c4 <detectAndStoreSilo+0x34c>)
 800503a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800503e:	015b      	lsls	r3, r3, #5
 8005040:	4413      	add	r3, r2
 8005042:	3304      	adds	r3, #4
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800504a:	429a      	cmp	r2, r3
 800504c:	da16      	bge.n	800507c <detectAndStoreSilo+0x304>
            {
                bestSilo = silos[i];
 800504e:	4a1d      	ldr	r2, [pc, #116]	@ (80050c4 <detectAndStoreSilo+0x34c>)
 8005050:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005054:	015b      	lsls	r3, r3, #5
 8005056:	4413      	add	r3, r2
 8005058:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 800505c:	461d      	mov	r5, r3
 800505e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005062:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (silos[i].angle < bestSilo.angle)
 800506a:	e007      	b.n	800507c <detectAndStoreSilo+0x304>
            }
        }
        else
        {
            silos[i].detected = false;
 800506c:	4a15      	ldr	r2, [pc, #84]	@ (80050c4 <detectAndStoreSilo+0x34c>)
 800506e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005072:	015b      	lsls	r3, r3, #5
 8005074:	4413      	add	r3, r2
 8005076:	3308      	adds	r3, #8
 8005078:	2200      	movs	r2, #0
 800507a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAX_SILOS; i++)
 800507c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005080:	3301      	adds	r3, #1
 8005082:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005086:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800508a:	2b04      	cmp	r3, #4
 800508c:	f77f af05 	ble.w	8004e9a <detectAndStoreSilo+0x122>
        }
    }
    return bestSilo;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	461d      	mov	r5, r3
 8005094:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8005098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800509a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800509c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80050a0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	37b8      	adds	r7, #184	@ 0xb8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80050ae:	bf00      	nop
 80050b0:	54442d18 	.word	0x54442d18
 80050b4:	400921fb 	.word	0x400921fb
 80050b8:	00018696 	.word	0x00018696
 80050bc:	2000057c 	.word	0x2000057c
 80050c0:	40668000 	.word	0x40668000
 80050c4:	20000698 	.word	0x20000698

080050c8 <placeBallInSilo>:

void placeBallInSilo(robotPosition setpoint, uint8_t pidMode)
{
 80050c8:	b084      	sub	sp, #16
 80050ca:	b5b0      	push	{r4, r5, r7, lr}
 80050cc:	b0ba      	sub	sp, #232	@ 0xe8
 80050ce:	af12      	add	r7, sp, #72	@ 0x48
 80050d0:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 80050d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    robotPosition position = odometry();
 80050d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fe fcaf 	bl	8003a40 <odometry>
    Silo bestSilo = detectAndStoreSilo();
 80050e2:	f107 0318 	add.w	r3, r7, #24
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff fe46 	bl	8004d78 <detectAndStoreSilo>
    double Vx = 0.0, Vy = 0.0, W = 0.0;
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	e9c7 2300 	strd	r2, r3, [r7]

    static uint32_t lastTime = 0;
    uint32_t timer = HAL_GetTick();
 8005110:	f000 fed2 	bl	8005eb8 <HAL_GetTick>
 8005114:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    setMotorSpeed(1, 0);
 8005118:	ed9f 0b51 	vldr	d0, [pc, #324]	@ 8005260 <placeBallInSilo+0x198>
 800511c:	2001      	movs	r0, #1
 800511e:	f7fb ff9d 	bl	800105c <setMotorSpeed>
    setMotorSpeed(2, 0);
 8005122:	ed9f 0b4f 	vldr	d0, [pc, #316]	@ 8005260 <placeBallInSilo+0x198>
 8005126:	2002      	movs	r0, #2
 8005128:	f7fb ff98 	bl	800105c <setMotorSpeed>
    setMotorSpeed(7, 0);
 800512c:	ed9f 0b4c 	vldr	d0, [pc, #304]	@ 8005260 <placeBallInSilo+0x198>
 8005130:	2007      	movs	r0, #7
 8005132:	f7fb ff93 	bl	800105c <setMotorSpeed>

    if(bestSilo.detected && bestSilo.ballInSilo < 3)
 8005136:	f897 3020 	ldrb.w	r3, [r7, #32]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d061      	beq.n	8005202 <placeBallInSilo+0x13a>
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	2b02      	cmp	r3, #2
 8005142:	dc5e      	bgt.n	8005202 <placeBallInSilo+0x13a>
    {
        lastTime = timer;
 8005144:	4a50      	ldr	r2, [pc, #320]	@ (8005288 <placeBallInSilo+0x1c0>)
 8005146:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800514a:	6013      	str	r3, [r2, #0]

        double targetX = bestSilo.x;
 800514c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005150:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
        double targetY = bestSilo.y;
 8005154:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005158:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    //    double targetH = atan2(targetY - position.y_global, targetX - position.x_global) * 180.0 / M_PI;

        Vx = PID_controller(targetX, position.x_global, 1);
 800515c:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8005160:	2001      	movs	r0, #1
 8005162:	eeb0 1a47 	vmov.f32	s2, s14
 8005166:	eef0 1a67 	vmov.f32	s3, s15
 800516a:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800516e:	f7ff f88b 	bl	8004288 <PID_controller>
 8005172:	eeb0 7a40 	vmov.f32	s14, s0
 8005176:	eef0 7a60 	vmov.f32	s15, s1
 800517a:	ed87 7b04 	vstr	d7, [r7, #16]
        Vy = PID_controller(targetY, position.y_global, 1);
 800517e:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8005182:	2001      	movs	r0, #1
 8005184:	eeb0 1a47 	vmov.f32	s2, s14
 8005188:	eef0 1a67 	vmov.f32	s3, s15
 800518c:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 8005190:	f7ff f87a 	bl	8004288 <PID_controller>
 8005194:	eeb0 7a40 	vmov.f32	s14, s0
 8005198:	eef0 7a60 	vmov.f32	s15, s1
 800519c:	ed87 7b02 	vstr	d7, [r7, #8]
        W = PID_controllerH(90.0, position.h, 2);
 80051a0:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80051a4:	2002      	movs	r0, #2
 80051a6:	eeb0 1a47 	vmov.f32	s2, s14
 80051aa:	eef0 1a67 	vmov.f32	s3, s15
 80051ae:	ed9f 0b2e 	vldr	d0, [pc, #184]	@ 8005268 <placeBallInSilo+0x1a0>
 80051b2:	f7ff f965 	bl	8004480 <PID_controllerH>
 80051b6:	eeb0 7a40 	vmov.f32	s14, s0
 80051ba:	eef0 7a60 	vmov.f32	s15, s1
 80051be:	ed87 7b00 	vstr	d7, [r7]

        smoothVelocity(&Vx, &Vy, &W, 0.65);
 80051c2:	463a      	mov	r2, r7
 80051c4:	f107 0108 	add.w	r1, r7, #8
 80051c8:	f107 0310 	add.w	r3, r7, #16
 80051cc:	ed9f 0b28 	vldr	d0, [pc, #160]	@ 8005270 <placeBallInSilo+0x1a8>
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fa27 	bl	8004624 <smoothVelocity>
        baru(Vx, Vy, W);
 80051d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80051da:	ed97 6b02 	vldr	d6, [r7, #8]
 80051de:	ed97 5b00 	vldr	d5, [r7]
 80051e2:	eeb0 2a45 	vmov.f32	s4, s10
 80051e6:	eef0 2a65 	vmov.f32	s5, s11
 80051ea:	eeb0 1a46 	vmov.f32	s2, s12
 80051ee:	eef0 1a66 	vmov.f32	s3, s13
 80051f2:	eeb0 0a47 	vmov.f32	s0, s14
 80051f6:	eef0 0a67 	vmov.f32	s1, s15
 80051fa:	f7fc f9ed 	bl	80015d8 <baru>
    {
 80051fe:	bf00      	nop
    }
    else
    {
    	PID_KFtocoordinate(setpoint, pidMode, 0.6);
    }
}
 8005200:	e027      	b.n	8005252 <placeBallInSilo+0x18a>
    else if(timer - lastTime <= 600)
 8005202:	4b21      	ldr	r3, [pc, #132]	@ (8005288 <placeBallInSilo+0x1c0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8005210:	d808      	bhi.n	8005224 <placeBallInSilo+0x15c>
        baru(0, 1300, 0);
 8005212:	ed9f 2b13 	vldr	d2, [pc, #76]	@ 8005260 <placeBallInSilo+0x198>
 8005216:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8005278 <placeBallInSilo+0x1b0>
 800521a:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8005260 <placeBallInSilo+0x198>
 800521e:	f7fc f9db 	bl	80015d8 <baru>
}
 8005222:	e016      	b.n	8005252 <placeBallInSilo+0x18a>
    	PID_KFtocoordinate(setpoint, pidMode, 0.6);
 8005224:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8005228:	9310      	str	r3, [sp, #64]	@ 0x40
 800522a:	466d      	mov	r5, sp
 800522c:	f107 04c0 	add.w	r4, r7, #192	@ 0xc0
 8005230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800523a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800523c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005240:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005244:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8005248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800524a:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 8005280 <placeBallInSilo+0x1b8>
 800524e:	f7ff faf3 	bl	8004838 <PID_KFtocoordinate>
}
 8005252:	bf00      	nop
 8005254:	37a0      	adds	r7, #160	@ 0xa0
 8005256:	46bd      	mov	sp, r7
 8005258:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800525c:	b004      	add	sp, #16
 800525e:	4770      	bx	lr
	...
 800526c:	40568000 	.word	0x40568000
 8005270:	cccccccd 	.word	0xcccccccd
 8005274:	3fe4cccc 	.word	0x3fe4cccc
 8005278:	00000000 	.word	0x00000000
 800527c:	40945000 	.word	0x40945000
 8005280:	33333333 	.word	0x33333333
 8005284:	3fe33333 	.word	0x3fe33333
 8005288:	20000738 	.word	0x20000738
 800528c:	00000000 	.word	0x00000000

08005290 <findAndTakeBall>:

void findAndTakeBall(robotPosition setpoint, uint8_t pidMode)
{
 8005290:	b084      	sub	sp, #16
 8005292:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005296:	b0b4      	sub	sp, #208	@ 0xd0
 8005298:	af12      	add	r7, sp, #72	@ 0x48
 800529a:	f107 0ca0 	add.w	ip, r7, #160	@ 0xa0
 800529e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
     * camera[2]: ball existence (number of balls)
     * camera[3]: silo distance (in cm)
     * camera[4]: silo angle (in degree)
     */

    robotPosition position = odometry();
 80052a2:	463b      	mov	r3, r7
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fe fbcb 	bl	8003a40 <odometry>

    static uint32_t lastTimeBallSeen = 0;
    static uint32_t searchStartTime = 0;
    static uint8_t searchMode = 1;
    uint32_t timer = HAL_GetTick();
 80052aa:	f000 fe05 	bl	8005eb8 <HAL_GetTick>
 80052ae:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

    int ballDistance = camera[0] * 10; // convert to mm
 80052b2:	4bb5      	ldr	r3, [pc, #724]	@ (8005588 <findAndTakeBall+0x2f8>)
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    int ballAngle = camera[1];
 80052c2:	4bb1      	ldr	r3, [pc, #708]	@ (8005588 <findAndTakeBall+0x2f8>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int ballExistence = camera[2];
 80052c8:	4baf      	ldr	r3, [pc, #700]	@ (8005588 <findAndTakeBall+0x2f8>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	67bb      	str	r3, [r7, #120]	@ 0x78

    double Vx = 0.0;
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    double Vy = 0.0;
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    double W = 0.0;
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

    focusToTheBall();
 80052f2:	f7ff fbe5 	bl	8004ac0 <focusToTheBall>

    if (ballExistence != 0)
 80052f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 8097 	beq.w	800542c <findAndTakeBall+0x19c>
    {
        lastTimeBallSeen = timer;
 80052fe:	4aa3      	ldr	r2, [pc, #652]	@ (800558c <findAndTakeBall+0x2fc>)
 8005300:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005304:	6013      	str	r3, [r2, #0]
        searchStartTime = timer;
 8005306:	4aa2      	ldr	r2, [pc, #648]	@ (8005590 <findAndTakeBall+0x300>)
 8005308:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800530c:	6013      	str	r3, [r2, #0]

        double xBall = ballDistance * sin(ballAngle * M_PI / 180.0);
 800530e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8005312:	f7fb f907 	bl	8000524 <__aeabi_i2d>
 8005316:	4604      	mov	r4, r0
 8005318:	460d      	mov	r5, r1
 800531a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800531c:	f7fb f902 	bl	8000524 <__aeabi_i2d>
 8005320:	a38b      	add	r3, pc, #556	@ (adr r3, 8005550 <findAndTakeBall+0x2c0>)
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	f7fb f967 	bl	80005f8 <__aeabi_dmul>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4610      	mov	r0, r2
 8005330:	4619      	mov	r1, r3
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	4b97      	ldr	r3, [pc, #604]	@ (8005594 <findAndTakeBall+0x304>)
 8005338:	f7fb fa88 	bl	800084c <__aeabi_ddiv>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	ec43 2b17 	vmov	d7, r2, r3
 8005344:	eeb0 0a47 	vmov.f32	s0, s14
 8005348:	eef0 0a67 	vmov.f32	s1, s15
 800534c:	f008 fef0 	bl	800e130 <sin>
 8005350:	ec53 2b10 	vmov	r2, r3, d0
 8005354:	4620      	mov	r0, r4
 8005356:	4629      	mov	r1, r5
 8005358:	f7fb f94e 	bl	80005f8 <__aeabi_dmul>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
        double yBall = ballDistance * cos(ballAngle * M_PI / 180.0);
 8005364:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8005368:	f7fb f8dc 	bl	8000524 <__aeabi_i2d>
 800536c:	4604      	mov	r4, r0
 800536e:	460d      	mov	r5, r1
 8005370:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8005372:	f7fb f8d7 	bl	8000524 <__aeabi_i2d>
 8005376:	a376      	add	r3, pc, #472	@ (adr r3, 8005550 <findAndTakeBall+0x2c0>)
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	f7fb f93c 	bl	80005f8 <__aeabi_dmul>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4610      	mov	r0, r2
 8005386:	4619      	mov	r1, r3
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	4b81      	ldr	r3, [pc, #516]	@ (8005594 <findAndTakeBall+0x304>)
 800538e:	f7fb fa5d 	bl	800084c <__aeabi_ddiv>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	ec43 2b17 	vmov	d7, r2, r3
 800539a:	eeb0 0a47 	vmov.f32	s0, s14
 800539e:	eef0 0a67 	vmov.f32	s1, s15
 80053a2:	f008 fe71 	bl	800e088 <cos>
 80053a6:	ec53 2b10 	vmov	r2, r3, d0
 80053aa:	4620      	mov	r0, r4
 80053ac:	4629      	mov	r1, r5
 80053ae:	f7fb f923 	bl	80005f8 <__aeabi_dmul>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

        Vx = PID_controller(xBall, 0.0, 4);
 80053ba:	2004      	movs	r0, #4
 80053bc:	ed9f 1b66 	vldr	d1, [pc, #408]	@ 8005558 <findAndTakeBall+0x2c8>
 80053c0:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 80053c4:	f7fe ff60 	bl	8004288 <PID_controller>
 80053c8:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
        Vy = PID_controller(yBall, 0.0, 4);
 80053cc:	2004      	movs	r0, #4
 80053ce:	ed9f 1b62 	vldr	d1, [pc, #392]	@ 8005558 <findAndTakeBall+0x2c8>
 80053d2:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 80053d6:	f7fe ff57 	bl	8004288 <PID_controller>
 80053da:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68
        W = PID_controllerH(ballAngle, 0.0, 2);
 80053de:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80053e0:	f7fb f8a0 	bl	8000524 <__aeabi_i2d>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	2002      	movs	r0, #2
 80053ea:	ed9f 1b5b 	vldr	d1, [pc, #364]	@ 8005558 <findAndTakeBall+0x2c8>
 80053ee:	ec43 2b10 	vmov	d0, r2, r3
 80053f2:	f7ff f845 	bl	8004480 <PID_controllerH>
 80053f6:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60

        Vy *= 1.3;
 80053fa:	a359      	add	r3, pc, #356	@ (adr r3, 8005560 <findAndTakeBall+0x2d0>)
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005404:	f7fb f8f8 	bl	80005f8 <__aeabi_dmul>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

        baru(Vx, Vy, W);
 8005410:	ed97 2b18 	vldr	d2, [r7, #96]	@ 0x60
 8005414:	ed97 1b1a 	vldr	d1, [r7, #104]	@ 0x68
 8005418:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 800541c:	f7fc f8dc 	bl	80015d8 <baru>
        setMotorSpeed(1, -700);
 8005420:	ed9f 0b51 	vldr	d0, [pc, #324]	@ 8005568 <findAndTakeBall+0x2d8>
 8005424:	2001      	movs	r0, #1
 8005426:	f7fb fe19 	bl	800105c <setMotorSpeed>
                    }
                    break;
            }
        }
    }
}
 800542a:	e0f8      	b.n	800561e <findAndTakeBall+0x38e>
    else if (timer - lastTimeBallSeen <= 700)
 800542c:	4b57      	ldr	r3, [pc, #348]	@ (800558c <findAndTakeBall+0x2fc>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800543a:	d80d      	bhi.n	8005458 <findAndTakeBall+0x1c8>
        baru(0, 1300, 0);
 800543c:	ed9f 2b46 	vldr	d2, [pc, #280]	@ 8005558 <findAndTakeBall+0x2c8>
 8005440:	ed9f 1b4b 	vldr	d1, [pc, #300]	@ 8005570 <findAndTakeBall+0x2e0>
 8005444:	ed9f 0b44 	vldr	d0, [pc, #272]	@ 8005558 <findAndTakeBall+0x2c8>
 8005448:	f7fc f8c6 	bl	80015d8 <baru>
        setMotorSpeed(1, -700);
 800544c:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005568 <findAndTakeBall+0x2d8>
 8005450:	2001      	movs	r0, #1
 8005452:	f7fb fe03 	bl	800105c <setMotorSpeed>
}
 8005456:	e0e2      	b.n	800561e <findAndTakeBall+0x38e>
        setMotorSpeed(1, -700);
 8005458:	ed9f 0b43 	vldr	d0, [pc, #268]	@ 8005568 <findAndTakeBall+0x2d8>
 800545c:	2001      	movs	r0, #1
 800545e:	f7fb fdfd 	bl	800105c <setMotorSpeed>
        setMotorSpeed(2, 0);
 8005462:	ed9f 0b3d 	vldr	d0, [pc, #244]	@ 8005558 <findAndTakeBall+0x2c8>
 8005466:	2002      	movs	r0, #2
 8005468:	f7fb fdf8 	bl	800105c <setMotorSpeed>
        setMotorSpeed(7, 0);
 800546c:	ed9f 0b3a 	vldr	d0, [pc, #232]	@ 8005558 <findAndTakeBall+0x2c8>
 8005470:	2007      	movs	r0, #7
 8005472:	f7fb fdf3 	bl	800105c <setMotorSpeed>
        if (searchStartTime == 0)
 8005476:	4b46      	ldr	r3, [pc, #280]	@ (8005590 <findAndTakeBall+0x300>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d103      	bne.n	8005486 <findAndTakeBall+0x1f6>
            searchStartTime = timer;
 800547e:	4a44      	ldr	r2, [pc, #272]	@ (8005590 <findAndTakeBall+0x300>)
 8005480:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005484:	6013      	str	r3, [r2, #0]
        if (timer - searchStartTime >= 8000)
 8005486:	4b42      	ldr	r3, [pc, #264]	@ (8005590 <findAndTakeBall+0x300>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8005494:	d317      	bcc.n	80054c6 <findAndTakeBall+0x236>
            PID_KFtocoordinate(setpoint, pidMode, 0.7);
 8005496:	f897 30f0 	ldrb.w	r3, [r7, #240]	@ 0xf0
 800549a:	9310      	str	r3, [sp, #64]	@ 0x40
 800549c:	466d      	mov	r5, sp
 800549e:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 80054a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80054b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80054b6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80054ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054bc:	ed9f 0b2e 	vldr	d0, [pc, #184]	@ 8005578 <findAndTakeBall+0x2e8>
 80054c0:	f7ff f9ba 	bl	8004838 <PID_KFtocoordinate>
}
 80054c4:	e0ab      	b.n	800561e <findAndTakeBall+0x38e>
            switch(searchMode)
 80054c6:	4b34      	ldr	r3, [pc, #208]	@ (8005598 <findAndTakeBall+0x308>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d002      	beq.n	80054d4 <findAndTakeBall+0x244>
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d06a      	beq.n	80055a8 <findAndTakeBall+0x318>
}
 80054d2:	e0a4      	b.n	800561e <findAndTakeBall+0x38e>
                    W = PID_controllerH(-10.0, position.h, 1) / 4;
 80054d4:	ed97 7b04 	vldr	d7, [r7, #16]
 80054d8:	2001      	movs	r0, #1
 80054da:	eeb0 1a47 	vmov.f32	s2, s14
 80054de:	eef0 1a67 	vmov.f32	s3, s15
 80054e2:	ed9f 0b27 	vldr	d0, [pc, #156]	@ 8005580 <findAndTakeBall+0x2f0>
 80054e6:	f7fe ffcb 	bl	8004480 <PID_controllerH>
 80054ea:	ec51 0b10 	vmov	r0, r1, d0
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	4b2a      	ldr	r3, [pc, #168]	@ (800559c <findAndTakeBall+0x30c>)
 80054f4:	f7fb f9aa 	bl	800084c <__aeabi_ddiv>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                    putar(0, 0, W);
 8005500:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8005504:	f7fb fb28 	bl	8000b58 <__aeabi_d2iz>
 8005508:	4603      	mov	r3, r0
 800550a:	461a      	mov	r2, r3
 800550c:	2100      	movs	r1, #0
 800550e:	2000      	movs	r0, #0
 8005510:	f7fc fb26 	bl	8001b60 <putar>
                    if (fabs(-10.0 - position.h) < 5.0)
 8005514:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005518:	f04f 0000 	mov.w	r0, #0
 800551c:	4920      	ldr	r1, [pc, #128]	@ (80055a0 <findAndTakeBall+0x310>)
 800551e:	f7fa feb3 	bl	8000288 <__aeabi_dsub>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4690      	mov	r8, r2
 8005528:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	4b1c      	ldr	r3, [pc, #112]	@ (80055a4 <findAndTakeBall+0x314>)
 8005532:	4640      	mov	r0, r8
 8005534:	4649      	mov	r1, r9
 8005536:	f7fb fad1 	bl	8000adc <__aeabi_dcmplt>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d100      	bne.n	8005542 <findAndTakeBall+0x2b2>
                    break;
 8005540:	e06d      	b.n	800561e <findAndTakeBall+0x38e>
                        searchMode = 2;
 8005542:	4b15      	ldr	r3, [pc, #84]	@ (8005598 <findAndTakeBall+0x308>)
 8005544:	2202      	movs	r2, #2
 8005546:	701a      	strb	r2, [r3, #0]
                    break;
 8005548:	e069      	b.n	800561e <findAndTakeBall+0x38e>
 800554a:	bf00      	nop
 800554c:	f3af 8000 	nop.w
 8005550:	54442d18 	.word	0x54442d18
 8005554:	400921fb 	.word	0x400921fb
	...
 8005560:	cccccccd 	.word	0xcccccccd
 8005564:	3ff4cccc 	.word	0x3ff4cccc
 8005568:	00000000 	.word	0x00000000
 800556c:	c085e000 	.word	0xc085e000
 8005570:	00000000 	.word	0x00000000
 8005574:	40945000 	.word	0x40945000
 8005578:	66666666 	.word	0x66666666
 800557c:	3fe66666 	.word	0x3fe66666
 8005580:	00000000 	.word	0x00000000
 8005584:	c0240000 	.word	0xc0240000
 8005588:	2000057c 	.word	0x2000057c
 800558c:	2000073c 	.word	0x2000073c
 8005590:	20000740 	.word	0x20000740
 8005594:	40668000 	.word	0x40668000
 8005598:	200000d0 	.word	0x200000d0
 800559c:	40100000 	.word	0x40100000
 80055a0:	c0240000 	.word	0xc0240000
 80055a4:	40140000 	.word	0x40140000
                    W = PID_controllerH(-170.0, position.h, 1) / 4;
 80055a8:	ed97 7b04 	vldr	d7, [r7, #16]
 80055ac:	2001      	movs	r0, #1
 80055ae:	eeb0 1a47 	vmov.f32	s2, s14
 80055b2:	eef0 1a67 	vmov.f32	s3, s15
 80055b6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8005630 <findAndTakeBall+0x3a0>
 80055ba:	f7fe ff61 	bl	8004480 <PID_controllerH>
 80055be:	ec51 0b10 	vmov	r0, r1, d0
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005638 <findAndTakeBall+0x3a8>)
 80055c8:	f7fb f940 	bl	800084c <__aeabi_ddiv>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                    putar(0, 0, W);
 80055d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80055d8:	f7fb fabe 	bl	8000b58 <__aeabi_d2iz>
 80055dc:	4603      	mov	r3, r0
 80055de:	461a      	mov	r2, r3
 80055e0:	2100      	movs	r1, #0
 80055e2:	2000      	movs	r0, #0
 80055e4:	f7fc fabc 	bl	8001b60 <putar>
                    if (fabs(-170.0 - position.h) < 5.0)
 80055e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055ec:	a110      	add	r1, pc, #64	@ (adr r1, 8005630 <findAndTakeBall+0x3a0>)
 80055ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055f2:	f7fa fe49 	bl	8000288 <__aeabi_dsub>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	4614      	mov	r4, r2
 80055fc:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	4b0d      	ldr	r3, [pc, #52]	@ (800563c <findAndTakeBall+0x3ac>)
 8005606:	4620      	mov	r0, r4
 8005608:	4629      	mov	r1, r5
 800560a:	f7fb fa67 	bl	8000adc <__aeabi_dcmplt>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d100      	bne.n	8005616 <findAndTakeBall+0x386>
                    break;
 8005614:	e002      	b.n	800561c <findAndTakeBall+0x38c>
                        searchMode = 1;
 8005616:	4b0a      	ldr	r3, [pc, #40]	@ (8005640 <findAndTakeBall+0x3b0>)
 8005618:	2201      	movs	r2, #1
 800561a:	701a      	strb	r2, [r3, #0]
                    break;
 800561c:	bf00      	nop
}
 800561e:	bf00      	nop
 8005620:	3788      	adds	r7, #136	@ 0x88
 8005622:	46bd      	mov	sp, r7
 8005624:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8005628:	b004      	add	sp, #16
 800562a:	4770      	bx	lr
 800562c:	f3af 8000 	nop.w
 8005630:	00000000 	.word	0x00000000
 8005634:	c0654000 	.word	0xc0654000
 8005638:	40100000 	.word	0x40100000
 800563c:	40140000 	.word	0x40140000
 8005640:	200000d0 	.word	0x200000d0

08005644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800564a:	2300      	movs	r3, #0
 800564c:	607b      	str	r3, [r7, #4]
 800564e:	4b10      	ldr	r3, [pc, #64]	@ (8005690 <HAL_MspInit+0x4c>)
 8005650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005652:	4a0f      	ldr	r2, [pc, #60]	@ (8005690 <HAL_MspInit+0x4c>)
 8005654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005658:	6453      	str	r3, [r2, #68]	@ 0x44
 800565a:	4b0d      	ldr	r3, [pc, #52]	@ (8005690 <HAL_MspInit+0x4c>)
 800565c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800565e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005662:	607b      	str	r3, [r7, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005666:	2300      	movs	r3, #0
 8005668:	603b      	str	r3, [r7, #0]
 800566a:	4b09      	ldr	r3, [pc, #36]	@ (8005690 <HAL_MspInit+0x4c>)
 800566c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566e:	4a08      	ldr	r2, [pc, #32]	@ (8005690 <HAL_MspInit+0x4c>)
 8005670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005674:	6413      	str	r3, [r2, #64]	@ 0x40
 8005676:	4b06      	ldr	r3, [pc, #24]	@ (8005690 <HAL_MspInit+0x4c>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005682:	2007      	movs	r0, #7
 8005684:	f000 fd18 	bl	80060b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005688:	bf00      	nop
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40023800 	.word	0x40023800

08005694 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08a      	sub	sp, #40	@ 0x28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800569c:	f107 0314 	add.w	r3, r7, #20
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	605a      	str	r2, [r3, #4]
 80056a6:	609a      	str	r2, [r3, #8]
 80056a8:	60da      	str	r2, [r3, #12]
 80056aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a19      	ldr	r2, [pc, #100]	@ (8005718 <HAL_I2C_MspInit+0x84>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d12c      	bne.n	8005710 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056b6:	2300      	movs	r3, #0
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	4b18      	ldr	r3, [pc, #96]	@ (800571c <HAL_I2C_MspInit+0x88>)
 80056bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056be:	4a17      	ldr	r2, [pc, #92]	@ (800571c <HAL_I2C_MspInit+0x88>)
 80056c0:	f043 0302 	orr.w	r3, r3, #2
 80056c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80056c6:	4b15      	ldr	r3, [pc, #84]	@ (800571c <HAL_I2C_MspInit+0x88>)
 80056c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80056d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80056d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056d8:	2312      	movs	r3, #18
 80056da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056e0:	2303      	movs	r3, #3
 80056e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80056e4:	2304      	movs	r3, #4
 80056e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056e8:	f107 0314 	add.w	r3, r7, #20
 80056ec:	4619      	mov	r1, r3
 80056ee:	480c      	ldr	r0, [pc, #48]	@ (8005720 <HAL_I2C_MspInit+0x8c>)
 80056f0:	f000 fdb6 	bl	8006260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	4b08      	ldr	r3, [pc, #32]	@ (800571c <HAL_I2C_MspInit+0x88>)
 80056fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fc:	4a07      	ldr	r2, [pc, #28]	@ (800571c <HAL_I2C_MspInit+0x88>)
 80056fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005702:	6413      	str	r3, [r2, #64]	@ 0x40
 8005704:	4b05      	ldr	r3, [pc, #20]	@ (800571c <HAL_I2C_MspInit+0x88>)
 8005706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005710:	bf00      	nop
 8005712:	3728      	adds	r7, #40	@ 0x28
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40005800 	.word	0x40005800
 800571c:	40023800 	.word	0x40023800
 8005720:	40020400 	.word	0x40020400

08005724 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a2a      	ldr	r2, [pc, #168]	@ (80057dc <HAL_TIM_Base_MspInit+0xb8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d116      	bne.n	8005764 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	4b29      	ldr	r3, [pc, #164]	@ (80057e0 <HAL_TIM_Base_MspInit+0xbc>)
 800573c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573e:	4a28      	ldr	r2, [pc, #160]	@ (80057e0 <HAL_TIM_Base_MspInit+0xbc>)
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	6453      	str	r3, [r2, #68]	@ 0x44
 8005746:	4b26      	ldr	r3, [pc, #152]	@ (80057e0 <HAL_TIM_Base_MspInit+0xbc>)
 8005748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005752:	2200      	movs	r2, #0
 8005754:	2100      	movs	r1, #0
 8005756:	201b      	movs	r0, #27
 8005758:	f000 fcb9 	bl	80060ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800575c:	201b      	movs	r0, #27
 800575e:	f000 fcd2 	bl	8006106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005762:	e036      	b.n	80057d2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800576c:	d116      	bne.n	800579c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800576e:	2300      	movs	r3, #0
 8005770:	613b      	str	r3, [r7, #16]
 8005772:	4b1b      	ldr	r3, [pc, #108]	@ (80057e0 <HAL_TIM_Base_MspInit+0xbc>)
 8005774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005776:	4a1a      	ldr	r2, [pc, #104]	@ (80057e0 <HAL_TIM_Base_MspInit+0xbc>)
 8005778:	f043 0301 	orr.w	r3, r3, #1
 800577c:	6413      	str	r3, [r2, #64]	@ 0x40
 800577e:	4b18      	ldr	r3, [pc, #96]	@ (80057e0 <HAL_TIM_Base_MspInit+0xbc>)
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	613b      	str	r3, [r7, #16]
 8005788:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800578a:	2200      	movs	r2, #0
 800578c:	2100      	movs	r1, #0
 800578e:	201c      	movs	r0, #28
 8005790:	f000 fc9d 	bl	80060ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005794:	201c      	movs	r0, #28
 8005796:	f000 fcb6 	bl	8006106 <HAL_NVIC_EnableIRQ>
}
 800579a:	e01a      	b.n	80057d2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a10      	ldr	r2, [pc, #64]	@ (80057e4 <HAL_TIM_Base_MspInit+0xc0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d115      	bne.n	80057d2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80057a6:	2300      	movs	r3, #0
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	4b0d      	ldr	r3, [pc, #52]	@ (80057e0 <HAL_TIM_Base_MspInit+0xbc>)
 80057ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ae:	4a0c      	ldr	r2, [pc, #48]	@ (80057e0 <HAL_TIM_Base_MspInit+0xbc>)
 80057b0:	f043 0302 	orr.w	r3, r3, #2
 80057b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80057b6:	4b0a      	ldr	r3, [pc, #40]	@ (80057e0 <HAL_TIM_Base_MspInit+0xbc>)
 80057b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80057c2:	2200      	movs	r2, #0
 80057c4:	2100      	movs	r1, #0
 80057c6:	202e      	movs	r0, #46	@ 0x2e
 80057c8:	f000 fc81 	bl	80060ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80057cc:	202e      	movs	r0, #46	@ 0x2e
 80057ce:	f000 fc9a 	bl	8006106 <HAL_NVIC_EnableIRQ>
}
 80057d2:	bf00      	nop
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40010000 	.word	0x40010000
 80057e0:	40023800 	.word	0x40023800
 80057e4:	40010400 	.word	0x40010400

080057e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08a      	sub	sp, #40	@ 0x28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057f0:	f107 0314 	add.w	r3, r7, #20
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	605a      	str	r2, [r3, #4]
 80057fa:	609a      	str	r2, [r3, #8]
 80057fc:	60da      	str	r2, [r3, #12]
 80057fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a37      	ldr	r2, [pc, #220]	@ (80058e4 <HAL_TIM_MspPostInit+0xfc>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d11f      	bne.n	800584a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800580a:	2300      	movs	r3, #0
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	4b36      	ldr	r3, [pc, #216]	@ (80058e8 <HAL_TIM_MspPostInit+0x100>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005812:	4a35      	ldr	r2, [pc, #212]	@ (80058e8 <HAL_TIM_MspPostInit+0x100>)
 8005814:	f043 0310 	orr.w	r3, r3, #16
 8005818:	6313      	str	r3, [r2, #48]	@ 0x30
 800581a:	4b33      	ldr	r3, [pc, #204]	@ (80058e8 <HAL_TIM_MspPostInit+0x100>)
 800581c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581e:	f003 0310 	and.w	r3, r3, #16
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8005826:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800582a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800582c:	2312      	movs	r3, #18
 800582e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005830:	2302      	movs	r3, #2
 8005832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005834:	2303      	movs	r3, #3
 8005836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005838:	2301      	movs	r3, #1
 800583a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800583c:	f107 0314 	add.w	r3, r7, #20
 8005840:	4619      	mov	r1, r3
 8005842:	482a      	ldr	r0, [pc, #168]	@ (80058ec <HAL_TIM_MspPostInit+0x104>)
 8005844:	f000 fd0c 	bl	8006260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005848:	e047      	b.n	80058da <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005852:	d11e      	bne.n	8005892 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	4b23      	ldr	r3, [pc, #140]	@ (80058e8 <HAL_TIM_MspPostInit+0x100>)
 800585a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585c:	4a22      	ldr	r2, [pc, #136]	@ (80058e8 <HAL_TIM_MspPostInit+0x100>)
 800585e:	f043 0301 	orr.w	r3, r3, #1
 8005862:	6313      	str	r3, [r2, #48]	@ 0x30
 8005864:	4b20      	ldr	r3, [pc, #128]	@ (80058e8 <HAL_TIM_MspPostInit+0x100>)
 8005866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005870:	230c      	movs	r3, #12
 8005872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005874:	2312      	movs	r3, #18
 8005876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005878:	2302      	movs	r3, #2
 800587a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800587c:	2303      	movs	r3, #3
 800587e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005880:	2301      	movs	r3, #1
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005884:	f107 0314 	add.w	r3, r7, #20
 8005888:	4619      	mov	r1, r3
 800588a:	4819      	ldr	r0, [pc, #100]	@ (80058f0 <HAL_TIM_MspPostInit+0x108>)
 800588c:	f000 fce8 	bl	8006260 <HAL_GPIO_Init>
}
 8005890:	e023      	b.n	80058da <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a17      	ldr	r2, [pc, #92]	@ (80058f4 <HAL_TIM_MspPostInit+0x10c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d11e      	bne.n	80058da <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800589c:	2300      	movs	r3, #0
 800589e:	60bb      	str	r3, [r7, #8]
 80058a0:	4b11      	ldr	r3, [pc, #68]	@ (80058e8 <HAL_TIM_MspPostInit+0x100>)
 80058a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a4:	4a10      	ldr	r2, [pc, #64]	@ (80058e8 <HAL_TIM_MspPostInit+0x100>)
 80058a6:	f043 0304 	orr.w	r3, r3, #4
 80058aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80058ac:	4b0e      	ldr	r3, [pc, #56]	@ (80058e8 <HAL_TIM_MspPostInit+0x100>)
 80058ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80058b8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80058bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058be:	2312      	movs	r3, #18
 80058c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058c2:	2302      	movs	r3, #2
 80058c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058c6:	2303      	movs	r3, #3
 80058c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80058ca:	2303      	movs	r3, #3
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058ce:	f107 0314 	add.w	r3, r7, #20
 80058d2:	4619      	mov	r1, r3
 80058d4:	4808      	ldr	r0, [pc, #32]	@ (80058f8 <HAL_TIM_MspPostInit+0x110>)
 80058d6:	f000 fcc3 	bl	8006260 <HAL_GPIO_Init>
}
 80058da:	bf00      	nop
 80058dc:	3728      	adds	r7, #40	@ 0x28
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40010000 	.word	0x40010000
 80058e8:	40023800 	.word	0x40023800
 80058ec:	40021000 	.word	0x40021000
 80058f0:	40020000 	.word	0x40020000
 80058f4:	40010400 	.word	0x40010400
 80058f8:	40020800 	.word	0x40020800

080058fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08e      	sub	sp, #56	@ 0x38
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005908:	2200      	movs	r2, #0
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	609a      	str	r2, [r3, #8]
 8005910:	60da      	str	r2, [r3, #12]
 8005912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a57      	ldr	r2, [pc, #348]	@ (8005a78 <HAL_UART_MspInit+0x17c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d134      	bne.n	8005988 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800591e:	2300      	movs	r3, #0
 8005920:	623b      	str	r3, [r7, #32]
 8005922:	4b56      	ldr	r3, [pc, #344]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 8005924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005926:	4a55      	ldr	r2, [pc, #340]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 8005928:	f043 0310 	orr.w	r3, r3, #16
 800592c:	6453      	str	r3, [r2, #68]	@ 0x44
 800592e:	4b53      	ldr	r3, [pc, #332]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 8005930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005932:	f003 0310 	and.w	r3, r3, #16
 8005936:	623b      	str	r3, [r7, #32]
 8005938:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800593a:	2300      	movs	r3, #0
 800593c:	61fb      	str	r3, [r7, #28]
 800593e:	4b4f      	ldr	r3, [pc, #316]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005942:	4a4e      	ldr	r2, [pc, #312]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 8005944:	f043 0302 	orr.w	r3, r3, #2
 8005948:	6313      	str	r3, [r2, #48]	@ 0x30
 800594a:	4b4c      	ldr	r3, [pc, #304]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	61fb      	str	r3, [r7, #28]
 8005954:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005956:	23c0      	movs	r3, #192	@ 0xc0
 8005958:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595a:	2302      	movs	r3, #2
 800595c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595e:	2300      	movs	r3, #0
 8005960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005962:	2303      	movs	r3, #3
 8005964:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005966:	2307      	movs	r3, #7
 8005968:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800596a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800596e:	4619      	mov	r1, r3
 8005970:	4843      	ldr	r0, [pc, #268]	@ (8005a80 <HAL_UART_MspInit+0x184>)
 8005972:	f000 fc75 	bl	8006260 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005976:	2200      	movs	r2, #0
 8005978:	2100      	movs	r1, #0
 800597a:	2025      	movs	r0, #37	@ 0x25
 800597c:	f000 fba7 	bl	80060ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005980:	2025      	movs	r0, #37	@ 0x25
 8005982:	f000 fbc0 	bl	8006106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005986:	e073      	b.n	8005a70 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a3d      	ldr	r2, [pc, #244]	@ (8005a84 <HAL_UART_MspInit+0x188>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d134      	bne.n	80059fc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005992:	2300      	movs	r3, #0
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	4b39      	ldr	r3, [pc, #228]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 8005998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599a:	4a38      	ldr	r2, [pc, #224]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 800599c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80059a2:	4b36      	ldr	r3, [pc, #216]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	4b32      	ldr	r3, [pc, #200]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 80059b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b6:	4a31      	ldr	r2, [pc, #196]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 80059b8:	f043 0308 	orr.w	r3, r3, #8
 80059bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80059be:	4b2f      	ldr	r3, [pc, #188]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 80059c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80059ca:	2360      	movs	r3, #96	@ 0x60
 80059cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ce:	2302      	movs	r3, #2
 80059d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059d6:	2303      	movs	r3, #3
 80059d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80059da:	2307      	movs	r3, #7
 80059dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059e2:	4619      	mov	r1, r3
 80059e4:	4828      	ldr	r0, [pc, #160]	@ (8005a88 <HAL_UART_MspInit+0x18c>)
 80059e6:	f000 fc3b 	bl	8006260 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80059ea:	2200      	movs	r2, #0
 80059ec:	2100      	movs	r1, #0
 80059ee:	2026      	movs	r0, #38	@ 0x26
 80059f0:	f000 fb6d 	bl	80060ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80059f4:	2026      	movs	r0, #38	@ 0x26
 80059f6:	f000 fb86 	bl	8006106 <HAL_NVIC_EnableIRQ>
}
 80059fa:	e039      	b.n	8005a70 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a22      	ldr	r2, [pc, #136]	@ (8005a8c <HAL_UART_MspInit+0x190>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d134      	bne.n	8005a70 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005a06:	2300      	movs	r3, #0
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 8005a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a16:	4b19      	ldr	r3, [pc, #100]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 8005a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	4b15      	ldr	r3, [pc, #84]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 8005a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2a:	4a14      	ldr	r2, [pc, #80]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 8005a2c:	f043 0304 	orr.w	r3, r3, #4
 8005a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a32:	4b12      	ldr	r3, [pc, #72]	@ (8005a7c <HAL_UART_MspInit+0x180>)
 8005a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005a3e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a44:	2302      	movs	r3, #2
 8005a46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a50:	2307      	movs	r3, #7
 8005a52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a58:	4619      	mov	r1, r3
 8005a5a:	480d      	ldr	r0, [pc, #52]	@ (8005a90 <HAL_UART_MspInit+0x194>)
 8005a5c:	f000 fc00 	bl	8006260 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005a60:	2200      	movs	r2, #0
 8005a62:	2100      	movs	r1, #0
 8005a64:	2027      	movs	r0, #39	@ 0x27
 8005a66:	f000 fb32 	bl	80060ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005a6a:	2027      	movs	r0, #39	@ 0x27
 8005a6c:	f000 fb4b 	bl	8006106 <HAL_NVIC_EnableIRQ>
}
 8005a70:	bf00      	nop
 8005a72:	3738      	adds	r7, #56	@ 0x38
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40011000 	.word	0x40011000
 8005a7c:	40023800 	.word	0x40023800
 8005a80:	40020400 	.word	0x40020400
 8005a84:	40004400 	.word	0x40004400
 8005a88:	40020c00 	.word	0x40020c00
 8005a8c:	40004800 	.word	0x40004800
 8005a90:	40020800 	.word	0x40020800

08005a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005a98:	bf00      	nop
 8005a9a:	e7fd      	b.n	8005a98 <NMI_Handler+0x4>

08005a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005aa0:	bf00      	nop
 8005aa2:	e7fd      	b.n	8005aa0 <HardFault_Handler+0x4>

08005aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005aa8:	bf00      	nop
 8005aaa:	e7fd      	b.n	8005aa8 <MemManage_Handler+0x4>

08005aac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ab0:	bf00      	nop
 8005ab2:	e7fd      	b.n	8005ab0 <BusFault_Handler+0x4>

08005ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ab8:	bf00      	nop
 8005aba:	e7fd      	b.n	8005ab8 <UsageFault_Handler+0x4>

08005abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ac0:	bf00      	nop
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005aca:	b480      	push	{r7}
 8005acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ace:	bf00      	nop
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005adc:	bf00      	nop
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005aea:	f000 f9d1 	bl	8005e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005aee:	bf00      	nop
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_2_Pin);
 8005af6:	2001      	movs	r0, #1
 8005af8:	f000 fd80 	bl	80065fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005afc:	bf00      	nop
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_2_Pin);
 8005b04:	2002      	movs	r0, #2
 8005b06:	f000 fd79 	bl	80065fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005b0a:	bf00      	nop
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_1_Pin);
 8005b12:	2004      	movs	r0, #4
 8005b14:	f000 fd72 	bl	80065fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005b18:	bf00      	nop
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_1_Pin);
 8005b20:	2008      	movs	r0, #8
 8005b22:	f000 fd6b 	bl	80065fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005b26:	bf00      	nop
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_3_Pin);
 8005b2e:	2020      	movs	r0, #32
 8005b30:	f000 fd64 	bl	80065fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8005b34:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005b38:	f000 fd60 	bl	80065fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005b3c:	bf00      	nop
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005b44:	4802      	ldr	r0, [pc, #8]	@ (8005b50 <TIM1_CC_IRQHandler+0x10>)
 8005b46:	f002 f865 	bl	8007c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005b4a:	bf00      	nop
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000328 	.word	0x20000328

08005b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005b58:	4802      	ldr	r0, [pc, #8]	@ (8005b64 <TIM2_IRQHandler+0x10>)
 8005b5a:	f002 f85b 	bl	8007c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005b5e:	bf00      	nop
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20000370 	.word	0x20000370

08005b68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
//		pitch = sensorData[1];
//		ax = sensorData[2];
//		ay = sensorData[3];
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005b6c:	4802      	ldr	r0, [pc, #8]	@ (8005b78 <USART1_IRQHandler+0x10>)
 8005b6e:	f002 ff71 	bl	8008a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005b72:	bf00      	nop
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000400 	.word	0x20000400

08005b7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005b80:	4802      	ldr	r0, [pc, #8]	@ (8005b8c <USART2_IRQHandler+0x10>)
 8005b82:	f002 ff67 	bl	8008a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005b86:	bf00      	nop
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000448 	.word	0x20000448

08005b90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005b94:	4802      	ldr	r0, [pc, #8]	@ (8005ba0 <USART3_IRQHandler+0x10>)
 8005b96:	f002 ff5d 	bl	8008a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005b9a:	bf00      	nop
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000490 	.word	0x20000490

08005ba4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8005ba8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005bac:	f000 fd26 	bl	80065fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8005bb0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005bb4:	f000 fd22 	bl	80065fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_3_Pin);
 8005bb8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005bbc:	f000 fd1e 	bl	80065fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_4_Pin);
 8005bc0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005bc4:	f000 fd1a 	bl	80065fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_4_Pin);
 8005bc8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005bcc:	f000 fd16 	bl	80065fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005bd0:	bf00      	nop
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005bd8:	4802      	ldr	r0, [pc, #8]	@ (8005be4 <TIM8_CC_IRQHandler+0x10>)
 8005bda:	f002 f81b 	bl	8007c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8005bde:	bf00      	nop
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	200003b8 	.word	0x200003b8

08005be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
  return 1;
 8005bec:	2301      	movs	r3, #1
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <_kill>:

int _kill(int pid, int sig)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005c02:	f005 fd1b 	bl	800b63c <__errno>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2216      	movs	r2, #22
 8005c0a:	601a      	str	r2, [r3, #0]
  return -1;
 8005c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <_exit>:

void _exit (int status)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005c20:	f04f 31ff 	mov.w	r1, #4294967295
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff ffe7 	bl	8005bf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005c2a:	bf00      	nop
 8005c2c:	e7fd      	b.n	8005c2a <_exit+0x12>

08005c2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b086      	sub	sp, #24
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	60b9      	str	r1, [r7, #8]
 8005c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	e00a      	b.n	8005c56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005c40:	f3af 8000 	nop.w
 8005c44:	4601      	mov	r1, r0
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	60ba      	str	r2, [r7, #8]
 8005c4c:	b2ca      	uxtb	r2, r1
 8005c4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	3301      	adds	r3, #1
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	dbf0      	blt.n	8005c40 <_read+0x12>
  }

  return len;
 8005c5e:	687b      	ldr	r3, [r7, #4]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c74:	2300      	movs	r3, #0
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	e009      	b.n	8005c8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	60ba      	str	r2, [r7, #8]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	dbf1      	blt.n	8005c7a <_write+0x12>
  }
  return len;
 8005c96:	687b      	ldr	r3, [r7, #4]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <_close>:

int _close(int file)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005cc8:	605a      	str	r2, [r3, #4]
  return 0;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <_isatty>:

int _isatty(int file)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005ce0:	2301      	movs	r3, #1
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d10:	4a14      	ldr	r2, [pc, #80]	@ (8005d64 <_sbrk+0x5c>)
 8005d12:	4b15      	ldr	r3, [pc, #84]	@ (8005d68 <_sbrk+0x60>)
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d1c:	4b13      	ldr	r3, [pc, #76]	@ (8005d6c <_sbrk+0x64>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d102      	bne.n	8005d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d24:	4b11      	ldr	r3, [pc, #68]	@ (8005d6c <_sbrk+0x64>)
 8005d26:	4a12      	ldr	r2, [pc, #72]	@ (8005d70 <_sbrk+0x68>)
 8005d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d2a:	4b10      	ldr	r3, [pc, #64]	@ (8005d6c <_sbrk+0x64>)
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4413      	add	r3, r2
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d207      	bcs.n	8005d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d38:	f005 fc80 	bl	800b63c <__errno>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	220c      	movs	r2, #12
 8005d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d42:	f04f 33ff 	mov.w	r3, #4294967295
 8005d46:	e009      	b.n	8005d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d48:	4b08      	ldr	r3, [pc, #32]	@ (8005d6c <_sbrk+0x64>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d4e:	4b07      	ldr	r3, [pc, #28]	@ (8005d6c <_sbrk+0x64>)
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4413      	add	r3, r2
 8005d56:	4a05      	ldr	r2, [pc, #20]	@ (8005d6c <_sbrk+0x64>)
 8005d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	20020000 	.word	0x20020000
 8005d68:	00000400 	.word	0x00000400
 8005d6c:	20000744 	.word	0x20000744
 8005d70:	20000898 	.word	0x20000898

08005d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d78:	4b06      	ldr	r3, [pc, #24]	@ (8005d94 <SystemInit+0x20>)
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7e:	4a05      	ldr	r2, [pc, #20]	@ (8005d94 <SystemInit+0x20>)
 8005d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d88:	bf00      	nop
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	e000ed00 	.word	0xe000ed00

08005d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005d98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005dd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005d9c:	f7ff ffea 	bl	8005d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005da0:	480c      	ldr	r0, [pc, #48]	@ (8005dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005da2:	490d      	ldr	r1, [pc, #52]	@ (8005dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005da4:	4a0d      	ldr	r2, [pc, #52]	@ (8005ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005da8:	e002      	b.n	8005db0 <LoopCopyDataInit>

08005daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dae:	3304      	adds	r3, #4

08005db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005db4:	d3f9      	bcc.n	8005daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005db6:	4a0a      	ldr	r2, [pc, #40]	@ (8005de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005db8:	4c0a      	ldr	r4, [pc, #40]	@ (8005de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dbc:	e001      	b.n	8005dc2 <LoopFillZerobss>

08005dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005dc0:	3204      	adds	r2, #4

08005dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005dc4:	d3fb      	bcc.n	8005dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005dc6:	f005 fc3f 	bl	800b648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005dca:	f7fc fbfd 	bl	80025c8 <main>
  bx  lr    
 8005dce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005dd8:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8005ddc:	08010340 	.word	0x08010340
  ldr r2, =_sbss
 8005de0:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8005de4:	20000898 	.word	0x20000898

08005de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005de8:	e7fe      	b.n	8005de8 <ADC_IRQHandler>
	...

08005dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005df0:	4b0e      	ldr	r3, [pc, #56]	@ (8005e2c <HAL_Init+0x40>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a0d      	ldr	r2, [pc, #52]	@ (8005e2c <HAL_Init+0x40>)
 8005df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005e2c <HAL_Init+0x40>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a0a      	ldr	r2, [pc, #40]	@ (8005e2c <HAL_Init+0x40>)
 8005e02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e08:	4b08      	ldr	r3, [pc, #32]	@ (8005e2c <HAL_Init+0x40>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a07      	ldr	r2, [pc, #28]	@ (8005e2c <HAL_Init+0x40>)
 8005e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e14:	2003      	movs	r0, #3
 8005e16:	f000 f94f 	bl	80060b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	f000 f808 	bl	8005e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e20:	f7ff fc10 	bl	8005644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40023c00 	.word	0x40023c00

08005e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e38:	4b12      	ldr	r3, [pc, #72]	@ (8005e84 <HAL_InitTick+0x54>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	4b12      	ldr	r3, [pc, #72]	@ (8005e88 <HAL_InitTick+0x58>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	4619      	mov	r1, r3
 8005e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 f967 	bl	8006122 <HAL_SYSTICK_Config>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e00e      	b.n	8005e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b0f      	cmp	r3, #15
 8005e62:	d80a      	bhi.n	8005e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e64:	2200      	movs	r2, #0
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6c:	f000 f92f 	bl	80060ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e70:	4a06      	ldr	r2, [pc, #24]	@ (8005e8c <HAL_InitTick+0x5c>)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	e000      	b.n	8005e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	200000d4 	.word	0x200000d4
 8005e88:	200000dc 	.word	0x200000dc
 8005e8c:	200000d8 	.word	0x200000d8

08005e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e94:	4b06      	ldr	r3, [pc, #24]	@ (8005eb0 <HAL_IncTick+0x20>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	4b06      	ldr	r3, [pc, #24]	@ (8005eb4 <HAL_IncTick+0x24>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	4a04      	ldr	r2, [pc, #16]	@ (8005eb4 <HAL_IncTick+0x24>)
 8005ea2:	6013      	str	r3, [r2, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	200000dc 	.word	0x200000dc
 8005eb4:	20000748 	.word	0x20000748

08005eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  return uwTick;
 8005ebc:	4b03      	ldr	r3, [pc, #12]	@ (8005ecc <HAL_GetTick+0x14>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	20000748 	.word	0x20000748

08005ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ed8:	f7ff ffee 	bl	8005eb8 <HAL_GetTick>
 8005edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee8:	d005      	beq.n	8005ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005eea:	4b0a      	ldr	r3, [pc, #40]	@ (8005f14 <HAL_Delay+0x44>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005ef6:	bf00      	nop
 8005ef8:	f7ff ffde 	bl	8005eb8 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d8f7      	bhi.n	8005ef8 <HAL_Delay+0x28>
  {
  }
}
 8005f08:	bf00      	nop
 8005f0a:	bf00      	nop
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	200000dc 	.word	0x200000dc

08005f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f28:	4b0c      	ldr	r3, [pc, #48]	@ (8005f5c <__NVIC_SetPriorityGrouping+0x44>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f34:	4013      	ands	r3, r2
 8005f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f4a:	4a04      	ldr	r2, [pc, #16]	@ (8005f5c <__NVIC_SetPriorityGrouping+0x44>)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	60d3      	str	r3, [r2, #12]
}
 8005f50:	bf00      	nop
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	e000ed00 	.word	0xe000ed00

08005f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f64:	4b04      	ldr	r3, [pc, #16]	@ (8005f78 <__NVIC_GetPriorityGrouping+0x18>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	0a1b      	lsrs	r3, r3, #8
 8005f6a:	f003 0307 	and.w	r3, r3, #7
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	e000ed00 	.word	0xe000ed00

08005f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	db0b      	blt.n	8005fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	f003 021f 	and.w	r2, r3, #31
 8005f94:	4907      	ldr	r1, [pc, #28]	@ (8005fb4 <__NVIC_EnableIRQ+0x38>)
 8005f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	2001      	movs	r0, #1
 8005f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8005fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	e000e100 	.word	0xe000e100

08005fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	6039      	str	r1, [r7, #0]
 8005fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	db0a      	blt.n	8005fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	490c      	ldr	r1, [pc, #48]	@ (8006004 <__NVIC_SetPriority+0x4c>)
 8005fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd6:	0112      	lsls	r2, r2, #4
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	440b      	add	r3, r1
 8005fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fe0:	e00a      	b.n	8005ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	4908      	ldr	r1, [pc, #32]	@ (8006008 <__NVIC_SetPriority+0x50>)
 8005fe8:	79fb      	ldrb	r3, [r7, #7]
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	3b04      	subs	r3, #4
 8005ff0:	0112      	lsls	r2, r2, #4
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	761a      	strb	r2, [r3, #24]
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	e000e100 	.word	0xe000e100
 8006008:	e000ed00 	.word	0xe000ed00

0800600c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800600c:	b480      	push	{r7}
 800600e:	b089      	sub	sp, #36	@ 0x24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	f1c3 0307 	rsb	r3, r3, #7
 8006026:	2b04      	cmp	r3, #4
 8006028:	bf28      	it	cs
 800602a:	2304      	movcs	r3, #4
 800602c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	3304      	adds	r3, #4
 8006032:	2b06      	cmp	r3, #6
 8006034:	d902      	bls.n	800603c <NVIC_EncodePriority+0x30>
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	3b03      	subs	r3, #3
 800603a:	e000      	b.n	800603e <NVIC_EncodePriority+0x32>
 800603c:	2300      	movs	r3, #0
 800603e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006040:	f04f 32ff 	mov.w	r2, #4294967295
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	43da      	mvns	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	401a      	ands	r2, r3
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006054:	f04f 31ff 	mov.w	r1, #4294967295
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	fa01 f303 	lsl.w	r3, r1, r3
 800605e:	43d9      	mvns	r1, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006064:	4313      	orrs	r3, r2
         );
}
 8006066:	4618      	mov	r0, r3
 8006068:	3724      	adds	r7, #36	@ 0x24
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3b01      	subs	r3, #1
 8006080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006084:	d301      	bcc.n	800608a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006086:	2301      	movs	r3, #1
 8006088:	e00f      	b.n	80060aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800608a:	4a0a      	ldr	r2, [pc, #40]	@ (80060b4 <SysTick_Config+0x40>)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	3b01      	subs	r3, #1
 8006090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006092:	210f      	movs	r1, #15
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
 8006098:	f7ff ff8e 	bl	8005fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800609c:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <SysTick_Config+0x40>)
 800609e:	2200      	movs	r2, #0
 80060a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060a2:	4b04      	ldr	r3, [pc, #16]	@ (80060b4 <SysTick_Config+0x40>)
 80060a4:	2207      	movs	r2, #7
 80060a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	e000e010 	.word	0xe000e010

080060b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff ff29 	bl	8005f18 <__NVIC_SetPriorityGrouping>
}
 80060c6:	bf00      	nop
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b086      	sub	sp, #24
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	4603      	mov	r3, r0
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
 80060da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060e0:	f7ff ff3e 	bl	8005f60 <__NVIC_GetPriorityGrouping>
 80060e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	6978      	ldr	r0, [r7, #20]
 80060ec:	f7ff ff8e 	bl	800600c <NVIC_EncodePriority>
 80060f0:	4602      	mov	r2, r0
 80060f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060f6:	4611      	mov	r1, r2
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff ff5d 	bl	8005fb8 <__NVIC_SetPriority>
}
 80060fe:	bf00      	nop
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b082      	sub	sp, #8
 800610a:	af00      	add	r7, sp, #0
 800610c:	4603      	mov	r3, r0
 800610e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff ff31 	bl	8005f7c <__NVIC_EnableIRQ>
}
 800611a:	bf00      	nop
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff ffa2 	bl	8006074 <SysTick_Config>
 8006130:	4603      	mov	r3, r0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006146:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006148:	f7ff feb6 	bl	8005eb8 <HAL_GetTick>
 800614c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d008      	beq.n	800616c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2280      	movs	r2, #128	@ 0x80
 800615e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e052      	b.n	8006212 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0216 	bic.w	r2, r2, #22
 800617a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695a      	ldr	r2, [r3, #20]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800618a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d103      	bne.n	800619c <HAL_DMA_Abort+0x62>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006198:	2b00      	cmp	r3, #0
 800619a:	d007      	beq.n	80061ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0208 	bic.w	r2, r2, #8
 80061aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0201 	bic.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061bc:	e013      	b.n	80061e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061be:	f7ff fe7b 	bl	8005eb8 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b05      	cmp	r3, #5
 80061ca:	d90c      	bls.n	80061e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2203      	movs	r2, #3
 80061d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e015      	b.n	8006212 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e4      	bne.n	80061be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f8:	223f      	movs	r2, #63	@ 0x3f
 80061fa:	409a      	lsls	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d004      	beq.n	8006238 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2280      	movs	r2, #128	@ 0x80
 8006232:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e00c      	b.n	8006252 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2205      	movs	r2, #5
 800623c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0201 	bic.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006260:	b480      	push	{r7}
 8006262:	b089      	sub	sp, #36	@ 0x24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800626e:	2300      	movs	r3, #0
 8006270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006272:	2300      	movs	r3, #0
 8006274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006276:	2300      	movs	r3, #0
 8006278:	61fb      	str	r3, [r7, #28]
 800627a:	e16b      	b.n	8006554 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800627c:	2201      	movs	r2, #1
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	fa02 f303 	lsl.w	r3, r2, r3
 8006284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	4013      	ands	r3, r2
 800628e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	429a      	cmp	r2, r3
 8006296:	f040 815a 	bne.w	800654e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d005      	beq.n	80062b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d130      	bne.n	8006314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	2203      	movs	r2, #3
 80062be:	fa02 f303 	lsl.w	r3, r2, r3
 80062c2:	43db      	mvns	r3, r3
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	4013      	ands	r3, r2
 80062c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	4313      	orrs	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062e8:	2201      	movs	r2, #1
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	fa02 f303 	lsl.w	r3, r2, r3
 80062f0:	43db      	mvns	r3, r3
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	4013      	ands	r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	091b      	lsrs	r3, r3, #4
 80062fe:	f003 0201 	and.w	r2, r3, #1
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	fa02 f303 	lsl.w	r3, r2, r3
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	4313      	orrs	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	2b03      	cmp	r3, #3
 800631e:	d017      	beq.n	8006350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	2203      	movs	r2, #3
 800632c:	fa02 f303 	lsl.w	r3, r2, r3
 8006330:	43db      	mvns	r3, r3
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	4013      	ands	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	4313      	orrs	r3, r2
 8006348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d123      	bne.n	80063a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	08da      	lsrs	r2, r3, #3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3208      	adds	r2, #8
 8006364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	220f      	movs	r2, #15
 8006374:	fa02 f303 	lsl.w	r3, r2, r3
 8006378:	43db      	mvns	r3, r3
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	4013      	ands	r3, r2
 800637e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	4313      	orrs	r3, r2
 8006394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	08da      	lsrs	r2, r3, #3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3208      	adds	r2, #8
 800639e:	69b9      	ldr	r1, [r7, #24]
 80063a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	2203      	movs	r2, #3
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	43db      	mvns	r3, r3
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	4013      	ands	r3, r2
 80063ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f003 0203 	and.w	r2, r3, #3
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80b4 	beq.w	800654e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	4b60      	ldr	r3, [pc, #384]	@ (800656c <HAL_GPIO_Init+0x30c>)
 80063ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ee:	4a5f      	ldr	r2, [pc, #380]	@ (800656c <HAL_GPIO_Init+0x30c>)
 80063f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80063f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80063f6:	4b5d      	ldr	r3, [pc, #372]	@ (800656c <HAL_GPIO_Init+0x30c>)
 80063f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006402:	4a5b      	ldr	r2, [pc, #364]	@ (8006570 <HAL_GPIO_Init+0x310>)
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	089b      	lsrs	r3, r3, #2
 8006408:	3302      	adds	r3, #2
 800640a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	220f      	movs	r2, #15
 800641a:	fa02 f303 	lsl.w	r3, r2, r3
 800641e:	43db      	mvns	r3, r3
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	4013      	ands	r3, r2
 8006424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a52      	ldr	r2, [pc, #328]	@ (8006574 <HAL_GPIO_Init+0x314>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d02b      	beq.n	8006486 <HAL_GPIO_Init+0x226>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a51      	ldr	r2, [pc, #324]	@ (8006578 <HAL_GPIO_Init+0x318>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d025      	beq.n	8006482 <HAL_GPIO_Init+0x222>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a50      	ldr	r2, [pc, #320]	@ (800657c <HAL_GPIO_Init+0x31c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d01f      	beq.n	800647e <HAL_GPIO_Init+0x21e>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a4f      	ldr	r2, [pc, #316]	@ (8006580 <HAL_GPIO_Init+0x320>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d019      	beq.n	800647a <HAL_GPIO_Init+0x21a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a4e      	ldr	r2, [pc, #312]	@ (8006584 <HAL_GPIO_Init+0x324>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <HAL_GPIO_Init+0x216>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a4d      	ldr	r2, [pc, #308]	@ (8006588 <HAL_GPIO_Init+0x328>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00d      	beq.n	8006472 <HAL_GPIO_Init+0x212>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a4c      	ldr	r2, [pc, #304]	@ (800658c <HAL_GPIO_Init+0x32c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d007      	beq.n	800646e <HAL_GPIO_Init+0x20e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a4b      	ldr	r2, [pc, #300]	@ (8006590 <HAL_GPIO_Init+0x330>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d101      	bne.n	800646a <HAL_GPIO_Init+0x20a>
 8006466:	2307      	movs	r3, #7
 8006468:	e00e      	b.n	8006488 <HAL_GPIO_Init+0x228>
 800646a:	2308      	movs	r3, #8
 800646c:	e00c      	b.n	8006488 <HAL_GPIO_Init+0x228>
 800646e:	2306      	movs	r3, #6
 8006470:	e00a      	b.n	8006488 <HAL_GPIO_Init+0x228>
 8006472:	2305      	movs	r3, #5
 8006474:	e008      	b.n	8006488 <HAL_GPIO_Init+0x228>
 8006476:	2304      	movs	r3, #4
 8006478:	e006      	b.n	8006488 <HAL_GPIO_Init+0x228>
 800647a:	2303      	movs	r3, #3
 800647c:	e004      	b.n	8006488 <HAL_GPIO_Init+0x228>
 800647e:	2302      	movs	r3, #2
 8006480:	e002      	b.n	8006488 <HAL_GPIO_Init+0x228>
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <HAL_GPIO_Init+0x228>
 8006486:	2300      	movs	r3, #0
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	f002 0203 	and.w	r2, r2, #3
 800648e:	0092      	lsls	r2, r2, #2
 8006490:	4093      	lsls	r3, r2
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	4313      	orrs	r3, r2
 8006496:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006498:	4935      	ldr	r1, [pc, #212]	@ (8006570 <HAL_GPIO_Init+0x310>)
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	089b      	lsrs	r3, r3, #2
 800649e:	3302      	adds	r3, #2
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006594 <HAL_GPIO_Init+0x334>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	43db      	mvns	r3, r3
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	4013      	ands	r3, r2
 80064b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064ca:	4a32      	ldr	r2, [pc, #200]	@ (8006594 <HAL_GPIO_Init+0x334>)
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064d0:	4b30      	ldr	r3, [pc, #192]	@ (8006594 <HAL_GPIO_Init+0x334>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	43db      	mvns	r3, r3
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	4013      	ands	r3, r2
 80064de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064f4:	4a27      	ldr	r2, [pc, #156]	@ (8006594 <HAL_GPIO_Init+0x334>)
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064fa:	4b26      	ldr	r3, [pc, #152]	@ (8006594 <HAL_GPIO_Init+0x334>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	43db      	mvns	r3, r3
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	4013      	ands	r3, r2
 8006508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800651e:	4a1d      	ldr	r2, [pc, #116]	@ (8006594 <HAL_GPIO_Init+0x334>)
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006524:	4b1b      	ldr	r3, [pc, #108]	@ (8006594 <HAL_GPIO_Init+0x334>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	43db      	mvns	r3, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4013      	ands	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006548:	4a12      	ldr	r2, [pc, #72]	@ (8006594 <HAL_GPIO_Init+0x334>)
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	3301      	adds	r3, #1
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	2b0f      	cmp	r3, #15
 8006558:	f67f ae90 	bls.w	800627c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	3724      	adds	r7, #36	@ 0x24
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40023800 	.word	0x40023800
 8006570:	40013800 	.word	0x40013800
 8006574:	40020000 	.word	0x40020000
 8006578:	40020400 	.word	0x40020400
 800657c:	40020800 	.word	0x40020800
 8006580:	40020c00 	.word	0x40020c00
 8006584:	40021000 	.word	0x40021000
 8006588:	40021400 	.word	0x40021400
 800658c:	40021800 	.word	0x40021800
 8006590:	40021c00 	.word	0x40021c00
 8006594:	40013c00 	.word	0x40013c00

08006598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	887b      	ldrh	r3, [r7, #2]
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80065b0:	2301      	movs	r3, #1
 80065b2:	73fb      	strb	r3, [r7, #15]
 80065b4:	e001      	b.n	80065ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80065b6:	2300      	movs	r3, #0
 80065b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	807b      	strh	r3, [r7, #2]
 80065d4:	4613      	mov	r3, r2
 80065d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065d8:	787b      	ldrb	r3, [r7, #1]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065de:	887a      	ldrh	r2, [r7, #2]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065e4:	e003      	b.n	80065ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065e6:	887b      	ldrh	r3, [r7, #2]
 80065e8:	041a      	lsls	r2, r3, #16
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	619a      	str	r2, [r3, #24]
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
	...

080065fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	4603      	mov	r3, r0
 8006604:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006606:	4b08      	ldr	r3, [pc, #32]	@ (8006628 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006608:	695a      	ldr	r2, [r3, #20]
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	4013      	ands	r3, r2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d006      	beq.n	8006620 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006612:	4a05      	ldr	r2, [pc, #20]	@ (8006628 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006614:	88fb      	ldrh	r3, [r7, #6]
 8006616:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006618:	88fb      	ldrh	r3, [r7, #6]
 800661a:	4618      	mov	r0, r3
 800661c:	f7fb fe46 	bl	80022ac <HAL_GPIO_EXTI_Callback>
  }
}
 8006620:	bf00      	nop
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	40013c00 	.word	0x40013c00

0800662c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e12b      	b.n	8006896 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d106      	bne.n	8006658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff f81e 	bl	8005694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2224      	movs	r2, #36	@ 0x24
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800667e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800668e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006690:	f001 f8da 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 8006694:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	4a81      	ldr	r2, [pc, #516]	@ (80068a0 <HAL_I2C_Init+0x274>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d807      	bhi.n	80066b0 <HAL_I2C_Init+0x84>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4a80      	ldr	r2, [pc, #512]	@ (80068a4 <HAL_I2C_Init+0x278>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	bf94      	ite	ls
 80066a8:	2301      	movls	r3, #1
 80066aa:	2300      	movhi	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	e006      	b.n	80066be <HAL_I2C_Init+0x92>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4a7d      	ldr	r2, [pc, #500]	@ (80068a8 <HAL_I2C_Init+0x27c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	bf94      	ite	ls
 80066b8:	2301      	movls	r3, #1
 80066ba:	2300      	movhi	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e0e7      	b.n	8006896 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4a78      	ldr	r2, [pc, #480]	@ (80068ac <HAL_I2C_Init+0x280>)
 80066ca:	fba2 2303 	umull	r2, r3, r2, r3
 80066ce:	0c9b      	lsrs	r3, r3, #18
 80066d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	4a6a      	ldr	r2, [pc, #424]	@ (80068a0 <HAL_I2C_Init+0x274>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d802      	bhi.n	8006700 <HAL_I2C_Init+0xd4>
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	3301      	adds	r3, #1
 80066fe:	e009      	b.n	8006714 <HAL_I2C_Init+0xe8>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006706:	fb02 f303 	mul.w	r3, r2, r3
 800670a:	4a69      	ldr	r2, [pc, #420]	@ (80068b0 <HAL_I2C_Init+0x284>)
 800670c:	fba2 2303 	umull	r2, r3, r2, r3
 8006710:	099b      	lsrs	r3, r3, #6
 8006712:	3301      	adds	r3, #1
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6812      	ldr	r2, [r2, #0]
 8006718:	430b      	orrs	r3, r1
 800671a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006726:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	495c      	ldr	r1, [pc, #368]	@ (80068a0 <HAL_I2C_Init+0x274>)
 8006730:	428b      	cmp	r3, r1
 8006732:	d819      	bhi.n	8006768 <HAL_I2C_Init+0x13c>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	1e59      	subs	r1, r3, #1
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006742:	1c59      	adds	r1, r3, #1
 8006744:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006748:	400b      	ands	r3, r1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <HAL_I2C_Init+0x138>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	1e59      	subs	r1, r3, #1
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	fbb1 f3f3 	udiv	r3, r1, r3
 800675c:	3301      	adds	r3, #1
 800675e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006762:	e051      	b.n	8006808 <HAL_I2C_Init+0x1dc>
 8006764:	2304      	movs	r3, #4
 8006766:	e04f      	b.n	8006808 <HAL_I2C_Init+0x1dc>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d111      	bne.n	8006794 <HAL_I2C_Init+0x168>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	1e58      	subs	r0, r3, #1
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6859      	ldr	r1, [r3, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	440b      	add	r3, r1
 800677e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006782:	3301      	adds	r3, #1
 8006784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006788:	2b00      	cmp	r3, #0
 800678a:	bf0c      	ite	eq
 800678c:	2301      	moveq	r3, #1
 800678e:	2300      	movne	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	e012      	b.n	80067ba <HAL_I2C_Init+0x18e>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	1e58      	subs	r0, r3, #1
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6859      	ldr	r1, [r3, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	0099      	lsls	r1, r3, #2
 80067a4:	440b      	add	r3, r1
 80067a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80067aa:	3301      	adds	r3, #1
 80067ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bf0c      	ite	eq
 80067b4:	2301      	moveq	r3, #1
 80067b6:	2300      	movne	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <HAL_I2C_Init+0x196>
 80067be:	2301      	movs	r3, #1
 80067c0:	e022      	b.n	8006808 <HAL_I2C_Init+0x1dc>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10e      	bne.n	80067e8 <HAL_I2C_Init+0x1bc>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	1e58      	subs	r0, r3, #1
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6859      	ldr	r1, [r3, #4]
 80067d2:	460b      	mov	r3, r1
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	440b      	add	r3, r1
 80067d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80067dc:	3301      	adds	r3, #1
 80067de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067e6:	e00f      	b.n	8006808 <HAL_I2C_Init+0x1dc>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	1e58      	subs	r0, r3, #1
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6859      	ldr	r1, [r3, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	0099      	lsls	r1, r3, #2
 80067f8:	440b      	add	r3, r1
 80067fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80067fe:	3301      	adds	r3, #1
 8006800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006804:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	6809      	ldr	r1, [r1, #0]
 800680c:	4313      	orrs	r3, r2
 800680e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69da      	ldr	r2, [r3, #28]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006836:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6911      	ldr	r1, [r2, #16]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	68d2      	ldr	r2, [r2, #12]
 8006842:	4311      	orrs	r1, r2
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6812      	ldr	r2, [r2, #0]
 8006848:	430b      	orrs	r3, r1
 800684a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0201 	orr.w	r2, r2, #1
 8006876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	000186a0 	.word	0x000186a0
 80068a4:	001e847f 	.word	0x001e847f
 80068a8:	003d08ff 	.word	0x003d08ff
 80068ac:	431bde83 	.word	0x431bde83
 80068b0:	10624dd3 	.word	0x10624dd3

080068b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	461a      	mov	r2, r3
 80068c0:	460b      	mov	r3, r1
 80068c2:	817b      	strh	r3, [r7, #10]
 80068c4:	4613      	mov	r3, r2
 80068c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068c8:	f7ff faf6 	bl	8005eb8 <HAL_GetTick>
 80068cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	f040 80e0 	bne.w	8006a9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	2319      	movs	r3, #25
 80068e2:	2201      	movs	r2, #1
 80068e4:	4970      	ldr	r1, [pc, #448]	@ (8006aa8 <HAL_I2C_Master_Transmit+0x1f4>)
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 f964 	bl	8006bb4 <I2C_WaitOnFlagUntilTimeout>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80068f2:	2302      	movs	r3, #2
 80068f4:	e0d3      	b.n	8006a9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_I2C_Master_Transmit+0x50>
 8006900:	2302      	movs	r3, #2
 8006902:	e0cc      	b.n	8006a9e <HAL_I2C_Master_Transmit+0x1ea>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b01      	cmp	r3, #1
 8006918:	d007      	beq.n	800692a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 0201 	orr.w	r2, r2, #1
 8006928:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006938:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2221      	movs	r2, #33	@ 0x21
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2210      	movs	r2, #16
 8006946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	893a      	ldrh	r2, [r7, #8]
 800695a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006960:	b29a      	uxth	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4a50      	ldr	r2, [pc, #320]	@ (8006aac <HAL_I2C_Master_Transmit+0x1f8>)
 800696a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800696c:	8979      	ldrh	r1, [r7, #10]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	6a3a      	ldr	r2, [r7, #32]
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 f89c 	bl	8006ab0 <I2C_MasterRequestWrite>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e08d      	b.n	8006a9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006982:	2300      	movs	r3, #0
 8006984:	613b      	str	r3, [r7, #16]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	613b      	str	r3, [r7, #16]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006998:	e066      	b.n	8006a68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	6a39      	ldr	r1, [r7, #32]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 fa22 	bl	8006de8 <I2C_WaitOnTXEFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00d      	beq.n	80069c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d107      	bne.n	80069c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e06b      	b.n	8006a9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ca:	781a      	ldrb	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d11b      	bne.n	8006a3c <HAL_I2C_Master_Transmit+0x188>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d017      	beq.n	8006a3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a10:	781a      	ldrb	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	6a39      	ldr	r1, [r7, #32]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fa19 	bl	8006e78 <I2C_WaitOnBTFFlagUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00d      	beq.n	8006a68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d107      	bne.n	8006a64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e01a      	b.n	8006a9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d194      	bne.n	800699a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e000      	b.n	8006a9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006a9c:	2302      	movs	r3, #2
  }
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	00100002 	.word	0x00100002
 8006aac:	ffff0000 	.word	0xffff0000

08006ab0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	607a      	str	r2, [r7, #4]
 8006aba:	603b      	str	r3, [r7, #0]
 8006abc:	460b      	mov	r3, r1
 8006abe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d006      	beq.n	8006ada <I2C_MasterRequestWrite+0x2a>
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d003      	beq.n	8006ada <I2C_MasterRequestWrite+0x2a>
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ad8:	d108      	bne.n	8006aec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ae8:	601a      	str	r2, [r3, #0]
 8006aea:	e00b      	b.n	8006b04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af0:	2b12      	cmp	r3, #18
 8006af2:	d107      	bne.n	8006b04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 f84f 	bl	8006bb4 <I2C_WaitOnFlagUntilTimeout>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00d      	beq.n	8006b38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b2a:	d103      	bne.n	8006b34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e035      	b.n	8006ba4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b40:	d108      	bne.n	8006b54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b42:	897b      	ldrh	r3, [r7, #10]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	461a      	mov	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b50:	611a      	str	r2, [r3, #16]
 8006b52:	e01b      	b.n	8006b8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006b54:	897b      	ldrh	r3, [r7, #10]
 8006b56:	11db      	asrs	r3, r3, #7
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	f003 0306 	and.w	r3, r3, #6
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	f063 030f 	orn	r3, r3, #15
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	490e      	ldr	r1, [pc, #56]	@ (8006bac <I2C_MasterRequestWrite+0xfc>)
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 f898 	bl	8006ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e010      	b.n	8006ba4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006b82:	897b      	ldrh	r3, [r7, #10]
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	4907      	ldr	r1, [pc, #28]	@ (8006bb0 <I2C_MasterRequestWrite+0x100>)
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 f888 	bl	8006ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e000      	b.n	8006ba4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	00010008 	.word	0x00010008
 8006bb0:	00010002 	.word	0x00010002

08006bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bc4:	e048      	b.n	8006c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bcc:	d044      	beq.n	8006c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bce:	f7ff f973 	bl	8005eb8 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d302      	bcc.n	8006be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d139      	bne.n	8006c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	0c1b      	lsrs	r3, r3, #16
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d10d      	bne.n	8006c0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	43da      	mvns	r2, r3
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	bf0c      	ite	eq
 8006c00:	2301      	moveq	r3, #1
 8006c02:	2300      	movne	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	461a      	mov	r2, r3
 8006c08:	e00c      	b.n	8006c24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	43da      	mvns	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	4013      	ands	r3, r2
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	bf0c      	ite	eq
 8006c1c:	2301      	moveq	r3, #1
 8006c1e:	2300      	movne	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	461a      	mov	r2, r3
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d116      	bne.n	8006c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c44:	f043 0220 	orr.w	r2, r3, #32
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e023      	b.n	8006ca0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	0c1b      	lsrs	r3, r3, #16
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d10d      	bne.n	8006c7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	43da      	mvns	r2, r3
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	bf0c      	ite	eq
 8006c74:	2301      	moveq	r3, #1
 8006c76:	2300      	movne	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	e00c      	b.n	8006c98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	43da      	mvns	r2, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	bf0c      	ite	eq
 8006c90:	2301      	moveq	r3, #1
 8006c92:	2300      	movne	r3, #0
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	461a      	mov	r2, r3
 8006c98:	79fb      	ldrb	r3, [r7, #7]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d093      	beq.n	8006bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cb6:	e071      	b.n	8006d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc6:	d123      	bne.n	8006d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ce0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfc:	f043 0204 	orr.w	r2, r3, #4
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e067      	b.n	8006de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d16:	d041      	beq.n	8006d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d18:	f7ff f8ce 	bl	8005eb8 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d302      	bcc.n	8006d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d136      	bne.n	8006d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	0c1b      	lsrs	r3, r3, #16
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d10c      	bne.n	8006d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	43da      	mvns	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	4013      	ands	r3, r2
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bf14      	ite	ne
 8006d4a:	2301      	movne	r3, #1
 8006d4c:	2300      	moveq	r3, #0
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	e00b      	b.n	8006d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	43da      	mvns	r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	bf14      	ite	ne
 8006d64:	2301      	movne	r3, #1
 8006d66:	2300      	moveq	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d016      	beq.n	8006d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d88:	f043 0220 	orr.w	r2, r3, #32
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e021      	b.n	8006de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	0c1b      	lsrs	r3, r3, #16
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d10c      	bne.n	8006dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	43da      	mvns	r2, r3
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	4013      	ands	r3, r2
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	bf14      	ite	ne
 8006db8:	2301      	movne	r3, #1
 8006dba:	2300      	moveq	r3, #0
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	e00b      	b.n	8006dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	43da      	mvns	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	bf14      	ite	ne
 8006dd2:	2301      	movne	r3, #1
 8006dd4:	2300      	moveq	r3, #0
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f47f af6d 	bne.w	8006cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006df4:	e034      	b.n	8006e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f886 	bl	8006f08 <I2C_IsAcknowledgeFailed>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e034      	b.n	8006e70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0c:	d028      	beq.n	8006e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e0e:	f7ff f853 	bl	8005eb8 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d302      	bcc.n	8006e24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d11d      	bne.n	8006e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e2e:	2b80      	cmp	r3, #128	@ 0x80
 8006e30:	d016      	beq.n	8006e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4c:	f043 0220 	orr.w	r2, r3, #32
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e007      	b.n	8006e70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e6a:	2b80      	cmp	r3, #128	@ 0x80
 8006e6c:	d1c3      	bne.n	8006df6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e84:	e034      	b.n	8006ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 f83e 	bl	8006f08 <I2C_IsAcknowledgeFailed>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e034      	b.n	8006f00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9c:	d028      	beq.n	8006ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e9e:	f7ff f80b 	bl	8005eb8 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d302      	bcc.n	8006eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d11d      	bne.n	8006ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	f003 0304 	and.w	r3, r3, #4
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d016      	beq.n	8006ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006edc:	f043 0220 	orr.w	r2, r3, #32
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e007      	b.n	8006f00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d1c3      	bne.n	8006e86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f1e:	d11b      	bne.n	8006f58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f44:	f043 0204 	orr.w	r2, r3, #4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e000      	b.n	8006f5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e267      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d075      	beq.n	8007072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f86:	4b88      	ldr	r3, [pc, #544]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 030c 	and.w	r3, r3, #12
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d00c      	beq.n	8006fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f92:	4b85      	ldr	r3, [pc, #532]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f9a:	2b08      	cmp	r3, #8
 8006f9c:	d112      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f9e:	4b82      	ldr	r3, [pc, #520]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006faa:	d10b      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fac:	4b7e      	ldr	r3, [pc, #504]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d05b      	beq.n	8007070 <HAL_RCC_OscConfig+0x108>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d157      	bne.n	8007070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e242      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fcc:	d106      	bne.n	8006fdc <HAL_RCC_OscConfig+0x74>
 8006fce:	4b76      	ldr	r3, [pc, #472]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a75      	ldr	r2, [pc, #468]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	e01d      	b.n	8007018 <HAL_RCC_OscConfig+0xb0>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fe4:	d10c      	bne.n	8007000 <HAL_RCC_OscConfig+0x98>
 8006fe6:	4b70      	ldr	r3, [pc, #448]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a6f      	ldr	r2, [pc, #444]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	4b6d      	ldr	r3, [pc, #436]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a6c      	ldr	r2, [pc, #432]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8006ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	e00b      	b.n	8007018 <HAL_RCC_OscConfig+0xb0>
 8007000:	4b69      	ldr	r3, [pc, #420]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a68      	ldr	r2, [pc, #416]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	4b66      	ldr	r3, [pc, #408]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a65      	ldr	r2, [pc, #404]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d013      	beq.n	8007048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007020:	f7fe ff4a 	bl	8005eb8 <HAL_GetTick>
 8007024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007028:	f7fe ff46 	bl	8005eb8 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b64      	cmp	r3, #100	@ 0x64
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e207      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800703a:	4b5b      	ldr	r3, [pc, #364]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0f0      	beq.n	8007028 <HAL_RCC_OscConfig+0xc0>
 8007046:	e014      	b.n	8007072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007048:	f7fe ff36 	bl	8005eb8 <HAL_GetTick>
 800704c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800704e:	e008      	b.n	8007062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007050:	f7fe ff32 	bl	8005eb8 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b64      	cmp	r3, #100	@ 0x64
 800705c:	d901      	bls.n	8007062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e1f3      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007062:	4b51      	ldr	r3, [pc, #324]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1f0      	bne.n	8007050 <HAL_RCC_OscConfig+0xe8>
 800706e:	e000      	b.n	8007072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d063      	beq.n	8007146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800707e:	4b4a      	ldr	r3, [pc, #296]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 030c 	and.w	r3, r3, #12
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00b      	beq.n	80070a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800708a:	4b47      	ldr	r3, [pc, #284]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007092:	2b08      	cmp	r3, #8
 8007094:	d11c      	bne.n	80070d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007096:	4b44      	ldr	r3, [pc, #272]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d116      	bne.n	80070d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070a2:	4b41      	ldr	r3, [pc, #260]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d005      	beq.n	80070ba <HAL_RCC_OscConfig+0x152>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d001      	beq.n	80070ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e1c7      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ba:	4b3b      	ldr	r3, [pc, #236]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	4937      	ldr	r1, [pc, #220]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070ce:	e03a      	b.n	8007146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d020      	beq.n	800711a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070d8:	4b34      	ldr	r3, [pc, #208]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 80070da:	2201      	movs	r2, #1
 80070dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070de:	f7fe feeb 	bl	8005eb8 <HAL_GetTick>
 80070e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070e4:	e008      	b.n	80070f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070e6:	f7fe fee7 	bl	8005eb8 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e1a8      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f8:	4b2b      	ldr	r3, [pc, #172]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0f0      	beq.n	80070e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007104:	4b28      	ldr	r3, [pc, #160]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	4925      	ldr	r1, [pc, #148]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 8007114:	4313      	orrs	r3, r2
 8007116:	600b      	str	r3, [r1, #0]
 8007118:	e015      	b.n	8007146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800711a:	4b24      	ldr	r3, [pc, #144]	@ (80071ac <HAL_RCC_OscConfig+0x244>)
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007120:	f7fe feca 	bl	8005eb8 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007128:	f7fe fec6 	bl	8005eb8 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e187      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800713a:	4b1b      	ldr	r3, [pc, #108]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f0      	bne.n	8007128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d036      	beq.n	80071c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d016      	beq.n	8007188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800715a:	4b15      	ldr	r3, [pc, #84]	@ (80071b0 <HAL_RCC_OscConfig+0x248>)
 800715c:	2201      	movs	r2, #1
 800715e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007160:	f7fe feaa 	bl	8005eb8 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007168:	f7fe fea6 	bl	8005eb8 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e167      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800717a:	4b0b      	ldr	r3, [pc, #44]	@ (80071a8 <HAL_RCC_OscConfig+0x240>)
 800717c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0f0      	beq.n	8007168 <HAL_RCC_OscConfig+0x200>
 8007186:	e01b      	b.n	80071c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007188:	4b09      	ldr	r3, [pc, #36]	@ (80071b0 <HAL_RCC_OscConfig+0x248>)
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800718e:	f7fe fe93 	bl	8005eb8 <HAL_GetTick>
 8007192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007194:	e00e      	b.n	80071b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007196:	f7fe fe8f 	bl	8005eb8 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d907      	bls.n	80071b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e150      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
 80071a8:	40023800 	.word	0x40023800
 80071ac:	42470000 	.word	0x42470000
 80071b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071b4:	4b88      	ldr	r3, [pc, #544]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 80071b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1ea      	bne.n	8007196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0304 	and.w	r3, r3, #4
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 8097 	beq.w	80072fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071ce:	2300      	movs	r3, #0
 80071d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071d2:	4b81      	ldr	r3, [pc, #516]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 80071d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10f      	bne.n	80071fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071de:	2300      	movs	r3, #0
 80071e0:	60bb      	str	r3, [r7, #8]
 80071e2:	4b7d      	ldr	r3, [pc, #500]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e6:	4a7c      	ldr	r2, [pc, #496]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 80071e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80071ee:	4b7a      	ldr	r3, [pc, #488]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 80071f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071f6:	60bb      	str	r3, [r7, #8]
 80071f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071fa:	2301      	movs	r3, #1
 80071fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071fe:	4b77      	ldr	r3, [pc, #476]	@ (80073dc <HAL_RCC_OscConfig+0x474>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007206:	2b00      	cmp	r3, #0
 8007208:	d118      	bne.n	800723c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800720a:	4b74      	ldr	r3, [pc, #464]	@ (80073dc <HAL_RCC_OscConfig+0x474>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a73      	ldr	r2, [pc, #460]	@ (80073dc <HAL_RCC_OscConfig+0x474>)
 8007210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007216:	f7fe fe4f 	bl	8005eb8 <HAL_GetTick>
 800721a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800721c:	e008      	b.n	8007230 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800721e:	f7fe fe4b 	bl	8005eb8 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	2b02      	cmp	r3, #2
 800722a:	d901      	bls.n	8007230 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e10c      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007230:	4b6a      	ldr	r3, [pc, #424]	@ (80073dc <HAL_RCC_OscConfig+0x474>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007238:	2b00      	cmp	r3, #0
 800723a:	d0f0      	beq.n	800721e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d106      	bne.n	8007252 <HAL_RCC_OscConfig+0x2ea>
 8007244:	4b64      	ldr	r3, [pc, #400]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007248:	4a63      	ldr	r2, [pc, #396]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 800724a:	f043 0301 	orr.w	r3, r3, #1
 800724e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007250:	e01c      	b.n	800728c <HAL_RCC_OscConfig+0x324>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	2b05      	cmp	r3, #5
 8007258:	d10c      	bne.n	8007274 <HAL_RCC_OscConfig+0x30c>
 800725a:	4b5f      	ldr	r3, [pc, #380]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 800725c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800725e:	4a5e      	ldr	r2, [pc, #376]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007260:	f043 0304 	orr.w	r3, r3, #4
 8007264:	6713      	str	r3, [r2, #112]	@ 0x70
 8007266:	4b5c      	ldr	r3, [pc, #368]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800726a:	4a5b      	ldr	r2, [pc, #364]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 800726c:	f043 0301 	orr.w	r3, r3, #1
 8007270:	6713      	str	r3, [r2, #112]	@ 0x70
 8007272:	e00b      	b.n	800728c <HAL_RCC_OscConfig+0x324>
 8007274:	4b58      	ldr	r3, [pc, #352]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007278:	4a57      	ldr	r2, [pc, #348]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 800727a:	f023 0301 	bic.w	r3, r3, #1
 800727e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007280:	4b55      	ldr	r3, [pc, #340]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007284:	4a54      	ldr	r2, [pc, #336]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007286:	f023 0304 	bic.w	r3, r3, #4
 800728a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d015      	beq.n	80072c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007294:	f7fe fe10 	bl	8005eb8 <HAL_GetTick>
 8007298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800729a:	e00a      	b.n	80072b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800729c:	f7fe fe0c 	bl	8005eb8 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d901      	bls.n	80072b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e0cb      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072b2:	4b49      	ldr	r3, [pc, #292]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 80072b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d0ee      	beq.n	800729c <HAL_RCC_OscConfig+0x334>
 80072be:	e014      	b.n	80072ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072c0:	f7fe fdfa 	bl	8005eb8 <HAL_GetTick>
 80072c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072c6:	e00a      	b.n	80072de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072c8:	f7fe fdf6 	bl	8005eb8 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d901      	bls.n	80072de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e0b5      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072de:	4b3e      	ldr	r3, [pc, #248]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 80072e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1ee      	bne.n	80072c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d105      	bne.n	80072fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072f0:	4b39      	ldr	r3, [pc, #228]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 80072f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f4:	4a38      	ldr	r2, [pc, #224]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 80072f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 80a1 	beq.w	8007448 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007306:	4b34      	ldr	r3, [pc, #208]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f003 030c 	and.w	r3, r3, #12
 800730e:	2b08      	cmp	r3, #8
 8007310:	d05c      	beq.n	80073cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	2b02      	cmp	r3, #2
 8007318:	d141      	bne.n	800739e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800731a:	4b31      	ldr	r3, [pc, #196]	@ (80073e0 <HAL_RCC_OscConfig+0x478>)
 800731c:	2200      	movs	r2, #0
 800731e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007320:	f7fe fdca 	bl	8005eb8 <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007328:	f7fe fdc6 	bl	8005eb8 <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e087      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800733a:	4b27      	ldr	r3, [pc, #156]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f0      	bne.n	8007328 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69da      	ldr	r2, [r3, #28]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007354:	019b      	lsls	r3, r3, #6
 8007356:	431a      	orrs	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735c:	085b      	lsrs	r3, r3, #1
 800735e:	3b01      	subs	r3, #1
 8007360:	041b      	lsls	r3, r3, #16
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007368:	061b      	lsls	r3, r3, #24
 800736a:	491b      	ldr	r1, [pc, #108]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 800736c:	4313      	orrs	r3, r2
 800736e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007370:	4b1b      	ldr	r3, [pc, #108]	@ (80073e0 <HAL_RCC_OscConfig+0x478>)
 8007372:	2201      	movs	r2, #1
 8007374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007376:	f7fe fd9f 	bl	8005eb8 <HAL_GetTick>
 800737a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800737c:	e008      	b.n	8007390 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800737e:	f7fe fd9b 	bl	8005eb8 <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b02      	cmp	r3, #2
 800738a:	d901      	bls.n	8007390 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e05c      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007390:	4b11      	ldr	r3, [pc, #68]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0f0      	beq.n	800737e <HAL_RCC_OscConfig+0x416>
 800739c:	e054      	b.n	8007448 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800739e:	4b10      	ldr	r3, [pc, #64]	@ (80073e0 <HAL_RCC_OscConfig+0x478>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a4:	f7fe fd88 	bl	8005eb8 <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073ac:	f7fe fd84 	bl	8005eb8 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e045      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073be:	4b06      	ldr	r3, [pc, #24]	@ (80073d8 <HAL_RCC_OscConfig+0x470>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1f0      	bne.n	80073ac <HAL_RCC_OscConfig+0x444>
 80073ca:	e03d      	b.n	8007448 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d107      	bne.n	80073e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e038      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
 80073d8:	40023800 	.word	0x40023800
 80073dc:	40007000 	.word	0x40007000
 80073e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007454 <HAL_RCC_OscConfig+0x4ec>)
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d028      	beq.n	8007444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d121      	bne.n	8007444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800740a:	429a      	cmp	r2, r3
 800740c:	d11a      	bne.n	8007444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007414:	4013      	ands	r3, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800741a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800741c:	4293      	cmp	r3, r2
 800741e:	d111      	bne.n	8007444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	3b01      	subs	r3, #1
 800742e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007430:	429a      	cmp	r2, r3
 8007432:	d107      	bne.n	8007444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007440:	429a      	cmp	r2, r3
 8007442:	d001      	beq.n	8007448 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e000      	b.n	800744a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	40023800 	.word	0x40023800

08007458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e0cc      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800746c:	4b68      	ldr	r3, [pc, #416]	@ (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0307 	and.w	r3, r3, #7
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d90c      	bls.n	8007494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800747a:	4b65      	ldr	r3, [pc, #404]	@ (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007482:	4b63      	ldr	r3, [pc, #396]	@ (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0307 	and.w	r3, r3, #7
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	429a      	cmp	r2, r3
 800748e:	d001      	beq.n	8007494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e0b8      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d020      	beq.n	80074e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074ac:	4b59      	ldr	r3, [pc, #356]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	4a58      	ldr	r2, [pc, #352]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80074b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074c4:	4b53      	ldr	r3, [pc, #332]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	4a52      	ldr	r2, [pc, #328]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80074ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074d0:	4b50      	ldr	r3, [pc, #320]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	494d      	ldr	r1, [pc, #308]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d044      	beq.n	8007578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d107      	bne.n	8007506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074f6:	4b47      	ldr	r3, [pc, #284]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d119      	bne.n	8007536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e07f      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	2b02      	cmp	r3, #2
 800750c:	d003      	beq.n	8007516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007512:	2b03      	cmp	r3, #3
 8007514:	d107      	bne.n	8007526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007516:	4b3f      	ldr	r3, [pc, #252]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d109      	bne.n	8007536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e06f      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007526:	4b3b      	ldr	r3, [pc, #236]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e067      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007536:	4b37      	ldr	r3, [pc, #220]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f023 0203 	bic.w	r2, r3, #3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	4934      	ldr	r1, [pc, #208]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 8007544:	4313      	orrs	r3, r2
 8007546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007548:	f7fe fcb6 	bl	8005eb8 <HAL_GetTick>
 800754c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800754e:	e00a      	b.n	8007566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007550:	f7fe fcb2 	bl	8005eb8 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800755e:	4293      	cmp	r3, r2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e04f      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007566:	4b2b      	ldr	r3, [pc, #172]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f003 020c 	and.w	r2, r3, #12
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	429a      	cmp	r2, r3
 8007576:	d1eb      	bne.n	8007550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007578:	4b25      	ldr	r3, [pc, #148]	@ (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d20c      	bcs.n	80075a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007586:	4b22      	ldr	r3, [pc, #136]	@ (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800758e:	4b20      	ldr	r3, [pc, #128]	@ (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	429a      	cmp	r2, r3
 800759a:	d001      	beq.n	80075a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e032      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d008      	beq.n	80075be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075ac:	4b19      	ldr	r3, [pc, #100]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	4916      	ldr	r1, [pc, #88]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0308 	and.w	r3, r3, #8
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d009      	beq.n	80075de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075ca:	4b12      	ldr	r3, [pc, #72]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	490e      	ldr	r1, [pc, #56]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80075de:	f000 f821 	bl	8007624 <HAL_RCC_GetSysClockFreq>
 80075e2:	4602      	mov	r2, r0
 80075e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	091b      	lsrs	r3, r3, #4
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	490a      	ldr	r1, [pc, #40]	@ (8007618 <HAL_RCC_ClockConfig+0x1c0>)
 80075f0:	5ccb      	ldrb	r3, [r1, r3]
 80075f2:	fa22 f303 	lsr.w	r3, r2, r3
 80075f6:	4a09      	ldr	r2, [pc, #36]	@ (800761c <HAL_RCC_ClockConfig+0x1c4>)
 80075f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075fa:	4b09      	ldr	r3, [pc, #36]	@ (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe fc16 	bl	8005e30 <HAL_InitTick>

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	40023c00 	.word	0x40023c00
 8007614:	40023800 	.word	0x40023800
 8007618:	0800fc40 	.word	0x0800fc40
 800761c:	200000d4 	.word	0x200000d4
 8007620:	200000d8 	.word	0x200000d8

08007624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007628:	b094      	sub	sp, #80	@ 0x50
 800762a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007630:	2300      	movs	r3, #0
 8007632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007634:	2300      	movs	r3, #0
 8007636:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800763c:	4b79      	ldr	r3, [pc, #484]	@ (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f003 030c 	and.w	r3, r3, #12
 8007644:	2b08      	cmp	r3, #8
 8007646:	d00d      	beq.n	8007664 <HAL_RCC_GetSysClockFreq+0x40>
 8007648:	2b08      	cmp	r3, #8
 800764a:	f200 80e1 	bhi.w	8007810 <HAL_RCC_GetSysClockFreq+0x1ec>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <HAL_RCC_GetSysClockFreq+0x34>
 8007652:	2b04      	cmp	r3, #4
 8007654:	d003      	beq.n	800765e <HAL_RCC_GetSysClockFreq+0x3a>
 8007656:	e0db      	b.n	8007810 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007658:	4b73      	ldr	r3, [pc, #460]	@ (8007828 <HAL_RCC_GetSysClockFreq+0x204>)
 800765a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800765c:	e0db      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800765e:	4b73      	ldr	r3, [pc, #460]	@ (800782c <HAL_RCC_GetSysClockFreq+0x208>)
 8007660:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007662:	e0d8      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007664:	4b6f      	ldr	r3, [pc, #444]	@ (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800766c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800766e:	4b6d      	ldr	r3, [pc, #436]	@ (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d063      	beq.n	8007742 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800767a:	4b6a      	ldr	r3, [pc, #424]	@ (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	099b      	lsrs	r3, r3, #6
 8007680:	2200      	movs	r2, #0
 8007682:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007684:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768c:	633b      	str	r3, [r7, #48]	@ 0x30
 800768e:	2300      	movs	r3, #0
 8007690:	637b      	str	r3, [r7, #52]	@ 0x34
 8007692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007696:	4622      	mov	r2, r4
 8007698:	462b      	mov	r3, r5
 800769a:	f04f 0000 	mov.w	r0, #0
 800769e:	f04f 0100 	mov.w	r1, #0
 80076a2:	0159      	lsls	r1, r3, #5
 80076a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076a8:	0150      	lsls	r0, r2, #5
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4621      	mov	r1, r4
 80076b0:	1a51      	subs	r1, r2, r1
 80076b2:	6139      	str	r1, [r7, #16]
 80076b4:	4629      	mov	r1, r5
 80076b6:	eb63 0301 	sbc.w	r3, r3, r1
 80076ba:	617b      	str	r3, [r7, #20]
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076c8:	4659      	mov	r1, fp
 80076ca:	018b      	lsls	r3, r1, #6
 80076cc:	4651      	mov	r1, sl
 80076ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80076d2:	4651      	mov	r1, sl
 80076d4:	018a      	lsls	r2, r1, #6
 80076d6:	4651      	mov	r1, sl
 80076d8:	ebb2 0801 	subs.w	r8, r2, r1
 80076dc:	4659      	mov	r1, fp
 80076de:	eb63 0901 	sbc.w	r9, r3, r1
 80076e2:	f04f 0200 	mov.w	r2, #0
 80076e6:	f04f 0300 	mov.w	r3, #0
 80076ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076f6:	4690      	mov	r8, r2
 80076f8:	4699      	mov	r9, r3
 80076fa:	4623      	mov	r3, r4
 80076fc:	eb18 0303 	adds.w	r3, r8, r3
 8007700:	60bb      	str	r3, [r7, #8]
 8007702:	462b      	mov	r3, r5
 8007704:	eb49 0303 	adc.w	r3, r9, r3
 8007708:	60fb      	str	r3, [r7, #12]
 800770a:	f04f 0200 	mov.w	r2, #0
 800770e:	f04f 0300 	mov.w	r3, #0
 8007712:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007716:	4629      	mov	r1, r5
 8007718:	024b      	lsls	r3, r1, #9
 800771a:	4621      	mov	r1, r4
 800771c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007720:	4621      	mov	r1, r4
 8007722:	024a      	lsls	r2, r1, #9
 8007724:	4610      	mov	r0, r2
 8007726:	4619      	mov	r1, r3
 8007728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800772a:	2200      	movs	r2, #0
 800772c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800772e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007734:	f7f9 faa8 	bl	8000c88 <__aeabi_uldivmod>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4613      	mov	r3, r2
 800773e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007740:	e058      	b.n	80077f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007742:	4b38      	ldr	r3, [pc, #224]	@ (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	099b      	lsrs	r3, r3, #6
 8007748:	2200      	movs	r2, #0
 800774a:	4618      	mov	r0, r3
 800774c:	4611      	mov	r1, r2
 800774e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007752:	623b      	str	r3, [r7, #32]
 8007754:	2300      	movs	r3, #0
 8007756:	627b      	str	r3, [r7, #36]	@ 0x24
 8007758:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800775c:	4642      	mov	r2, r8
 800775e:	464b      	mov	r3, r9
 8007760:	f04f 0000 	mov.w	r0, #0
 8007764:	f04f 0100 	mov.w	r1, #0
 8007768:	0159      	lsls	r1, r3, #5
 800776a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800776e:	0150      	lsls	r0, r2, #5
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4641      	mov	r1, r8
 8007776:	ebb2 0a01 	subs.w	sl, r2, r1
 800777a:	4649      	mov	r1, r9
 800777c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007780:	f04f 0200 	mov.w	r2, #0
 8007784:	f04f 0300 	mov.w	r3, #0
 8007788:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800778c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007790:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007794:	ebb2 040a 	subs.w	r4, r2, sl
 8007798:	eb63 050b 	sbc.w	r5, r3, fp
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	00eb      	lsls	r3, r5, #3
 80077a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077aa:	00e2      	lsls	r2, r4, #3
 80077ac:	4614      	mov	r4, r2
 80077ae:	461d      	mov	r5, r3
 80077b0:	4643      	mov	r3, r8
 80077b2:	18e3      	adds	r3, r4, r3
 80077b4:	603b      	str	r3, [r7, #0]
 80077b6:	464b      	mov	r3, r9
 80077b8:	eb45 0303 	adc.w	r3, r5, r3
 80077bc:	607b      	str	r3, [r7, #4]
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077ca:	4629      	mov	r1, r5
 80077cc:	028b      	lsls	r3, r1, #10
 80077ce:	4621      	mov	r1, r4
 80077d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077d4:	4621      	mov	r1, r4
 80077d6:	028a      	lsls	r2, r1, #10
 80077d8:	4610      	mov	r0, r2
 80077da:	4619      	mov	r1, r3
 80077dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077de:	2200      	movs	r2, #0
 80077e0:	61bb      	str	r3, [r7, #24]
 80077e2:	61fa      	str	r2, [r7, #28]
 80077e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077e8:	f7f9 fa4e 	bl	8000c88 <__aeabi_uldivmod>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4613      	mov	r3, r2
 80077f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80077f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	0c1b      	lsrs	r3, r3, #16
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	3301      	adds	r3, #1
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007804:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007808:	fbb2 f3f3 	udiv	r3, r2, r3
 800780c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800780e:	e002      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007810:	4b05      	ldr	r3, [pc, #20]	@ (8007828 <HAL_RCC_GetSysClockFreq+0x204>)
 8007812:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007818:	4618      	mov	r0, r3
 800781a:	3750      	adds	r7, #80	@ 0x50
 800781c:	46bd      	mov	sp, r7
 800781e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007822:	bf00      	nop
 8007824:	40023800 	.word	0x40023800
 8007828:	00f42400 	.word	0x00f42400
 800782c:	007a1200 	.word	0x007a1200

08007830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007834:	4b03      	ldr	r3, [pc, #12]	@ (8007844 <HAL_RCC_GetHCLKFreq+0x14>)
 8007836:	681b      	ldr	r3, [r3, #0]
}
 8007838:	4618      	mov	r0, r3
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	200000d4 	.word	0x200000d4

08007848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800784c:	f7ff fff0 	bl	8007830 <HAL_RCC_GetHCLKFreq>
 8007850:	4602      	mov	r2, r0
 8007852:	4b05      	ldr	r3, [pc, #20]	@ (8007868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	0a9b      	lsrs	r3, r3, #10
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	4903      	ldr	r1, [pc, #12]	@ (800786c <HAL_RCC_GetPCLK1Freq+0x24>)
 800785e:	5ccb      	ldrb	r3, [r1, r3]
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007864:	4618      	mov	r0, r3
 8007866:	bd80      	pop	{r7, pc}
 8007868:	40023800 	.word	0x40023800
 800786c:	0800fc50 	.word	0x0800fc50

08007870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007874:	f7ff ffdc 	bl	8007830 <HAL_RCC_GetHCLKFreq>
 8007878:	4602      	mov	r2, r0
 800787a:	4b05      	ldr	r3, [pc, #20]	@ (8007890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	0b5b      	lsrs	r3, r3, #13
 8007880:	f003 0307 	and.w	r3, r3, #7
 8007884:	4903      	ldr	r1, [pc, #12]	@ (8007894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007886:	5ccb      	ldrb	r3, [r1, r3]
 8007888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800788c:	4618      	mov	r0, r3
 800788e:	bd80      	pop	{r7, pc}
 8007890:	40023800 	.word	0x40023800
 8007894:	0800fc50 	.word	0x0800fc50

08007898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e041      	b.n	800792e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d106      	bne.n	80078c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7fd ff30 	bl	8005724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	3304      	adds	r3, #4
 80078d4:	4619      	mov	r1, r3
 80078d6:	4610      	mov	r0, r2
 80078d8:	f000 fc48 	bl	800816c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b082      	sub	sp, #8
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e041      	b.n	80079cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d106      	bne.n	8007962 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f839 	bl	80079d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2202      	movs	r2, #2
 8007966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3304      	adds	r3, #4
 8007972:	4619      	mov	r1, r3
 8007974:	4610      	mov	r0, r2
 8007976:	f000 fbf9 	bl	800816c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d109      	bne.n	8007a10 <HAL_TIM_PWM_Start_IT+0x28>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	bf14      	ite	ne
 8007a08:	2301      	movne	r3, #1
 8007a0a:	2300      	moveq	r3, #0
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	e022      	b.n	8007a56 <HAL_TIM_PWM_Start_IT+0x6e>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	d109      	bne.n	8007a2a <HAL_TIM_PWM_Start_IT+0x42>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	bf14      	ite	ne
 8007a22:	2301      	movne	r3, #1
 8007a24:	2300      	moveq	r3, #0
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	e015      	b.n	8007a56 <HAL_TIM_PWM_Start_IT+0x6e>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d109      	bne.n	8007a44 <HAL_TIM_PWM_Start_IT+0x5c>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	bf14      	ite	ne
 8007a3c:	2301      	movne	r3, #1
 8007a3e:	2300      	moveq	r3, #0
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	e008      	b.n	8007a56 <HAL_TIM_PWM_Start_IT+0x6e>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	bf14      	ite	ne
 8007a50:	2301      	movne	r3, #1
 8007a52:	2300      	moveq	r3, #0
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e0c7      	b.n	8007bee <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <HAL_TIM_PWM_Start_IT+0x86>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a6c:	e013      	b.n	8007a96 <HAL_TIM_PWM_Start_IT+0xae>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	d104      	bne.n	8007a7e <HAL_TIM_PWM_Start_IT+0x96>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a7c:	e00b      	b.n	8007a96 <HAL_TIM_PWM_Start_IT+0xae>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d104      	bne.n	8007a8e <HAL_TIM_PWM_Start_IT+0xa6>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2202      	movs	r2, #2
 8007a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a8c:	e003      	b.n	8007a96 <HAL_TIM_PWM_Start_IT+0xae>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2202      	movs	r2, #2
 8007a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b0c      	cmp	r3, #12
 8007a9a:	d841      	bhi.n	8007b20 <HAL_TIM_PWM_Start_IT+0x138>
 8007a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa4 <HAL_TIM_PWM_Start_IT+0xbc>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007ad9 	.word	0x08007ad9
 8007aa8:	08007b21 	.word	0x08007b21
 8007aac:	08007b21 	.word	0x08007b21
 8007ab0:	08007b21 	.word	0x08007b21
 8007ab4:	08007aeb 	.word	0x08007aeb
 8007ab8:	08007b21 	.word	0x08007b21
 8007abc:	08007b21 	.word	0x08007b21
 8007ac0:	08007b21 	.word	0x08007b21
 8007ac4:	08007afd 	.word	0x08007afd
 8007ac8:	08007b21 	.word	0x08007b21
 8007acc:	08007b21 	.word	0x08007b21
 8007ad0:	08007b21 	.word	0x08007b21
 8007ad4:	08007b0f 	.word	0x08007b0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f042 0202 	orr.w	r2, r2, #2
 8007ae6:	60da      	str	r2, [r3, #12]
      break;
 8007ae8:	e01d      	b.n	8007b26 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68da      	ldr	r2, [r3, #12]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f042 0204 	orr.w	r2, r2, #4
 8007af8:	60da      	str	r2, [r3, #12]
      break;
 8007afa:	e014      	b.n	8007b26 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0208 	orr.w	r2, r2, #8
 8007b0a:	60da      	str	r2, [r3, #12]
      break;
 8007b0c:	e00b      	b.n	8007b26 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f042 0210 	orr.w	r2, r2, #16
 8007b1c:	60da      	str	r2, [r3, #12]
      break;
 8007b1e:	e002      	b.n	8007b26 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	73fb      	strb	r3, [r7, #15]
      break;
 8007b24:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d15f      	bne.n	8007bec <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2201      	movs	r2, #1
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 fe0f 	bl	8008758 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a2e      	ldr	r2, [pc, #184]	@ (8007bf8 <HAL_TIM_PWM_Start_IT+0x210>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d004      	beq.n	8007b4e <HAL_TIM_PWM_Start_IT+0x166>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a2c      	ldr	r2, [pc, #176]	@ (8007bfc <HAL_TIM_PWM_Start_IT+0x214>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d101      	bne.n	8007b52 <HAL_TIM_PWM_Start_IT+0x16a>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e000      	b.n	8007b54 <HAL_TIM_PWM_Start_IT+0x16c>
 8007b52:	2300      	movs	r3, #0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d007      	beq.n	8007b68 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b66:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a22      	ldr	r2, [pc, #136]	@ (8007bf8 <HAL_TIM_PWM_Start_IT+0x210>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d022      	beq.n	8007bb8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b7a:	d01d      	beq.n	8007bb8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a1f      	ldr	r2, [pc, #124]	@ (8007c00 <HAL_TIM_PWM_Start_IT+0x218>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d018      	beq.n	8007bb8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8007c04 <HAL_TIM_PWM_Start_IT+0x21c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d013      	beq.n	8007bb8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a1c      	ldr	r2, [pc, #112]	@ (8007c08 <HAL_TIM_PWM_Start_IT+0x220>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d00e      	beq.n	8007bb8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a17      	ldr	r2, [pc, #92]	@ (8007bfc <HAL_TIM_PWM_Start_IT+0x214>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d009      	beq.n	8007bb8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a18      	ldr	r2, [pc, #96]	@ (8007c0c <HAL_TIM_PWM_Start_IT+0x224>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d004      	beq.n	8007bb8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a17      	ldr	r2, [pc, #92]	@ (8007c10 <HAL_TIM_PWM_Start_IT+0x228>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d111      	bne.n	8007bdc <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f003 0307 	and.w	r3, r3, #7
 8007bc2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b06      	cmp	r3, #6
 8007bc8:	d010      	beq.n	8007bec <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f042 0201 	orr.w	r2, r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bda:	e007      	b.n	8007bec <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f042 0201 	orr.w	r2, r2, #1
 8007bea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	40010400 	.word	0x40010400
 8007c00:	40000400 	.word	0x40000400
 8007c04:	40000800 	.word	0x40000800
 8007c08:	40000c00 	.word	0x40000c00
 8007c0c:	40014000 	.word	0x40014000
 8007c10:	40001800 	.word	0x40001800

08007c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d020      	beq.n	8007c78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01b      	beq.n	8007c78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f06f 0202 	mvn.w	r2, #2
 8007c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	f003 0303 	and.w	r3, r3, #3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fa65 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007c64:	e005      	b.n	8007c72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa57 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fa68 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d020      	beq.n	8007cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01b      	beq.n	8007cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f06f 0204 	mvn.w	r2, #4
 8007c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2202      	movs	r2, #2
 8007c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa3f 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007cb0:	e005      	b.n	8007cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fa31 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fa42 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f003 0308 	and.w	r3, r3, #8
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d020      	beq.n	8007d10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d01b      	beq.n	8007d10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f06f 0208 	mvn.w	r2, #8
 8007ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2204      	movs	r2, #4
 8007ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	f003 0303 	and.w	r3, r3, #3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa19 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007cfc:	e005      	b.n	8007d0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fa0b 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fa1c 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f003 0310 	and.w	r3, r3, #16
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d020      	beq.n	8007d5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f003 0310 	and.w	r3, r3, #16
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d01b      	beq.n	8007d5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f06f 0210 	mvn.w	r2, #16
 8007d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2208      	movs	r2, #8
 8007d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d003      	beq.n	8007d4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f9f3 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007d48:	e005      	b.n	8007d56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f9e5 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f9f6 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00c      	beq.n	8007d80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d007      	beq.n	8007d80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f06f 0201 	mvn.w	r2, #1
 8007d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f9c3 	bl	8008106 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00c      	beq.n	8007da4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d007      	beq.n	8007da4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fdd8 	bl	8008954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00c      	beq.n	8007dc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d007      	beq.n	8007dc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f9c7 	bl	8008156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00c      	beq.n	8007dec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f003 0320 	and.w	r3, r3, #32
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d007      	beq.n	8007dec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f06f 0220 	mvn.w	r2, #32
 8007de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fdaa 	bl	8008940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dec:	bf00      	nop
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d101      	bne.n	8007e12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e0e:	2302      	movs	r3, #2
 8007e10:	e0ae      	b.n	8007f70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b0c      	cmp	r3, #12
 8007e1e:	f200 809f 	bhi.w	8007f60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e22:	a201      	add	r2, pc, #4	@ (adr r2, 8007e28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e28:	08007e5d 	.word	0x08007e5d
 8007e2c:	08007f61 	.word	0x08007f61
 8007e30:	08007f61 	.word	0x08007f61
 8007e34:	08007f61 	.word	0x08007f61
 8007e38:	08007e9d 	.word	0x08007e9d
 8007e3c:	08007f61 	.word	0x08007f61
 8007e40:	08007f61 	.word	0x08007f61
 8007e44:	08007f61 	.word	0x08007f61
 8007e48:	08007edf 	.word	0x08007edf
 8007e4c:	08007f61 	.word	0x08007f61
 8007e50:	08007f61 	.word	0x08007f61
 8007e54:	08007f61 	.word	0x08007f61
 8007e58:	08007f1f 	.word	0x08007f1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68b9      	ldr	r1, [r7, #8]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fa2e 	bl	80082c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0208 	orr.w	r2, r2, #8
 8007e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699a      	ldr	r2, [r3, #24]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0204 	bic.w	r2, r2, #4
 8007e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6999      	ldr	r1, [r3, #24]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	691a      	ldr	r2, [r3, #16]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	619a      	str	r2, [r3, #24]
      break;
 8007e9a:	e064      	b.n	8007f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68b9      	ldr	r1, [r7, #8]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 fa7e 	bl	80083a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6999      	ldr	r1, [r3, #24]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	021a      	lsls	r2, r3, #8
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	619a      	str	r2, [r3, #24]
      break;
 8007edc:	e043      	b.n	8007f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68b9      	ldr	r1, [r7, #8]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 fad3 	bl	8008490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69da      	ldr	r2, [r3, #28]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f042 0208 	orr.w	r2, r2, #8
 8007ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69da      	ldr	r2, [r3, #28]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0204 	bic.w	r2, r2, #4
 8007f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69d9      	ldr	r1, [r3, #28]
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	691a      	ldr	r2, [r3, #16]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	61da      	str	r2, [r3, #28]
      break;
 8007f1c:	e023      	b.n	8007f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fb27 	bl	8008578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69da      	ldr	r2, [r3, #28]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69da      	ldr	r2, [r3, #28]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69d9      	ldr	r1, [r3, #28]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	021a      	lsls	r2, r3, #8
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	61da      	str	r2, [r3, #28]
      break;
 8007f5e:	e002      	b.n	8007f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	75fb      	strb	r3, [r7, #23]
      break;
 8007f64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d101      	bne.n	8007f94 <HAL_TIM_ConfigClockSource+0x1c>
 8007f90:	2302      	movs	r3, #2
 8007f92:	e0b4      	b.n	80080fe <HAL_TIM_ConfigClockSource+0x186>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fcc:	d03e      	beq.n	800804c <HAL_TIM_ConfigClockSource+0xd4>
 8007fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fd2:	f200 8087 	bhi.w	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fda:	f000 8086 	beq.w	80080ea <HAL_TIM_ConfigClockSource+0x172>
 8007fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fe2:	d87f      	bhi.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fe4:	2b70      	cmp	r3, #112	@ 0x70
 8007fe6:	d01a      	beq.n	800801e <HAL_TIM_ConfigClockSource+0xa6>
 8007fe8:	2b70      	cmp	r3, #112	@ 0x70
 8007fea:	d87b      	bhi.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fec:	2b60      	cmp	r3, #96	@ 0x60
 8007fee:	d050      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x11a>
 8007ff0:	2b60      	cmp	r3, #96	@ 0x60
 8007ff2:	d877      	bhi.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff4:	2b50      	cmp	r3, #80	@ 0x50
 8007ff6:	d03c      	beq.n	8008072 <HAL_TIM_ConfigClockSource+0xfa>
 8007ff8:	2b50      	cmp	r3, #80	@ 0x50
 8007ffa:	d873      	bhi.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ffc:	2b40      	cmp	r3, #64	@ 0x40
 8007ffe:	d058      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x13a>
 8008000:	2b40      	cmp	r3, #64	@ 0x40
 8008002:	d86f      	bhi.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 8008004:	2b30      	cmp	r3, #48	@ 0x30
 8008006:	d064      	beq.n	80080d2 <HAL_TIM_ConfigClockSource+0x15a>
 8008008:	2b30      	cmp	r3, #48	@ 0x30
 800800a:	d86b      	bhi.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 800800c:	2b20      	cmp	r3, #32
 800800e:	d060      	beq.n	80080d2 <HAL_TIM_ConfigClockSource+0x15a>
 8008010:	2b20      	cmp	r3, #32
 8008012:	d867      	bhi.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
 8008014:	2b00      	cmp	r3, #0
 8008016:	d05c      	beq.n	80080d2 <HAL_TIM_ConfigClockSource+0x15a>
 8008018:	2b10      	cmp	r3, #16
 800801a:	d05a      	beq.n	80080d2 <HAL_TIM_ConfigClockSource+0x15a>
 800801c:	e062      	b.n	80080e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800802e:	f000 fb73 	bl	8008718 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008040:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	609a      	str	r2, [r3, #8]
      break;
 800804a:	e04f      	b.n	80080ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800805c:	f000 fb5c 	bl	8008718 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800806e:	609a      	str	r2, [r3, #8]
      break;
 8008070:	e03c      	b.n	80080ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800807e:	461a      	mov	r2, r3
 8008080:	f000 fad0 	bl	8008624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2150      	movs	r1, #80	@ 0x50
 800808a:	4618      	mov	r0, r3
 800808c:	f000 fb29 	bl	80086e2 <TIM_ITRx_SetConfig>
      break;
 8008090:	e02c      	b.n	80080ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800809e:	461a      	mov	r2, r3
 80080a0:	f000 faef 	bl	8008682 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2160      	movs	r1, #96	@ 0x60
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 fb19 	bl	80086e2 <TIM_ITRx_SetConfig>
      break;
 80080b0:	e01c      	b.n	80080ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080be:	461a      	mov	r2, r3
 80080c0:	f000 fab0 	bl	8008624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2140      	movs	r1, #64	@ 0x40
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fb09 	bl	80086e2 <TIM_ITRx_SetConfig>
      break;
 80080d0:	e00c      	b.n	80080ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4619      	mov	r1, r3
 80080dc:	4610      	mov	r0, r2
 80080de:	f000 fb00 	bl	80086e2 <TIM_ITRx_SetConfig>
      break;
 80080e2:	e003      	b.n	80080ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	73fb      	strb	r3, [r7, #15]
      break;
 80080e8:	e000      	b.n	80080ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008106:	b480      	push	{r7}
 8008108:	b083      	sub	sp, #12
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800810e:	bf00      	nop
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800814a:	bf00      	nop
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008156:	b480      	push	{r7}
 8008158:	b083      	sub	sp, #12
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800815e:	bf00      	nop
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
	...

0800816c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a46      	ldr	r2, [pc, #280]	@ (8008298 <TIM_Base_SetConfig+0x12c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d013      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818a:	d00f      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a43      	ldr	r2, [pc, #268]	@ (800829c <TIM_Base_SetConfig+0x130>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d00b      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a42      	ldr	r2, [pc, #264]	@ (80082a0 <TIM_Base_SetConfig+0x134>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d007      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a41      	ldr	r2, [pc, #260]	@ (80082a4 <TIM_Base_SetConfig+0x138>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d003      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a40      	ldr	r2, [pc, #256]	@ (80082a8 <TIM_Base_SetConfig+0x13c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d108      	bne.n	80081be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a35      	ldr	r2, [pc, #212]	@ (8008298 <TIM_Base_SetConfig+0x12c>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d02b      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081cc:	d027      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a32      	ldr	r2, [pc, #200]	@ (800829c <TIM_Base_SetConfig+0x130>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d023      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a31      	ldr	r2, [pc, #196]	@ (80082a0 <TIM_Base_SetConfig+0x134>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d01f      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a30      	ldr	r2, [pc, #192]	@ (80082a4 <TIM_Base_SetConfig+0x138>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d01b      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a2f      	ldr	r2, [pc, #188]	@ (80082a8 <TIM_Base_SetConfig+0x13c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d017      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a2e      	ldr	r2, [pc, #184]	@ (80082ac <TIM_Base_SetConfig+0x140>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d013      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a2d      	ldr	r2, [pc, #180]	@ (80082b0 <TIM_Base_SetConfig+0x144>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00f      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a2c      	ldr	r2, [pc, #176]	@ (80082b4 <TIM_Base_SetConfig+0x148>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00b      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a2b      	ldr	r2, [pc, #172]	@ (80082b8 <TIM_Base_SetConfig+0x14c>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d007      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a2a      	ldr	r2, [pc, #168]	@ (80082bc <TIM_Base_SetConfig+0x150>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d003      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a29      	ldr	r2, [pc, #164]	@ (80082c0 <TIM_Base_SetConfig+0x154>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d108      	bne.n	8008230 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a10      	ldr	r2, [pc, #64]	@ (8008298 <TIM_Base_SetConfig+0x12c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d003      	beq.n	8008264 <TIM_Base_SetConfig+0xf8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a12      	ldr	r2, [pc, #72]	@ (80082a8 <TIM_Base_SetConfig+0x13c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d103      	bne.n	800826c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	691a      	ldr	r2, [r3, #16]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b01      	cmp	r3, #1
 800827c:	d105      	bne.n	800828a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	f023 0201 	bic.w	r2, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	611a      	str	r2, [r3, #16]
  }
}
 800828a:	bf00      	nop
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	40010000 	.word	0x40010000
 800829c:	40000400 	.word	0x40000400
 80082a0:	40000800 	.word	0x40000800
 80082a4:	40000c00 	.word	0x40000c00
 80082a8:	40010400 	.word	0x40010400
 80082ac:	40014000 	.word	0x40014000
 80082b0:	40014400 	.word	0x40014400
 80082b4:	40014800 	.word	0x40014800
 80082b8:	40001800 	.word	0x40001800
 80082bc:	40001c00 	.word	0x40001c00
 80082c0:	40002000 	.word	0x40002000

080082c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	f023 0201 	bic.w	r2, r3, #1
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 0303 	bic.w	r3, r3, #3
 80082fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	4313      	orrs	r3, r2
 8008304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f023 0302 	bic.w	r3, r3, #2
 800830c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	697a      	ldr	r2, [r7, #20]
 8008314:	4313      	orrs	r3, r2
 8008316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a20      	ldr	r2, [pc, #128]	@ (800839c <TIM_OC1_SetConfig+0xd8>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d003      	beq.n	8008328 <TIM_OC1_SetConfig+0x64>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a1f      	ldr	r2, [pc, #124]	@ (80083a0 <TIM_OC1_SetConfig+0xdc>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d10c      	bne.n	8008342 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f023 0308 	bic.w	r3, r3, #8
 800832e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	4313      	orrs	r3, r2
 8008338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f023 0304 	bic.w	r3, r3, #4
 8008340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a15      	ldr	r2, [pc, #84]	@ (800839c <TIM_OC1_SetConfig+0xd8>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d003      	beq.n	8008352 <TIM_OC1_SetConfig+0x8e>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a14      	ldr	r2, [pc, #80]	@ (80083a0 <TIM_OC1_SetConfig+0xdc>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d111      	bne.n	8008376 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	4313      	orrs	r3, r2
 800836a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	4313      	orrs	r3, r2
 8008374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	697a      	ldr	r2, [r7, #20]
 800838e:	621a      	str	r2, [r3, #32]
}
 8008390:	bf00      	nop
 8008392:	371c      	adds	r7, #28
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	40010000 	.word	0x40010000
 80083a0:	40010400 	.word	0x40010400

080083a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a1b      	ldr	r3, [r3, #32]
 80083b8:	f023 0210 	bic.w	r2, r3, #16
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	021b      	lsls	r3, r3, #8
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f023 0320 	bic.w	r3, r3, #32
 80083ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	011b      	lsls	r3, r3, #4
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a22      	ldr	r2, [pc, #136]	@ (8008488 <TIM_OC2_SetConfig+0xe4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d003      	beq.n	800840c <TIM_OC2_SetConfig+0x68>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a21      	ldr	r2, [pc, #132]	@ (800848c <TIM_OC2_SetConfig+0xe8>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d10d      	bne.n	8008428 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	011b      	lsls	r3, r3, #4
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	4313      	orrs	r3, r2
 800841e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008426:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a17      	ldr	r2, [pc, #92]	@ (8008488 <TIM_OC2_SetConfig+0xe4>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d003      	beq.n	8008438 <TIM_OC2_SetConfig+0x94>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a16      	ldr	r2, [pc, #88]	@ (800848c <TIM_OC2_SetConfig+0xe8>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d113      	bne.n	8008460 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800843e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	4313      	orrs	r3, r2
 8008452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	4313      	orrs	r3, r2
 800845e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	621a      	str	r2, [r3, #32]
}
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	40010000 	.word	0x40010000
 800848c:	40010400 	.word	0x40010400

08008490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0303 	bic.w	r3, r3, #3
 80084c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	021b      	lsls	r3, r3, #8
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a21      	ldr	r2, [pc, #132]	@ (8008570 <TIM_OC3_SetConfig+0xe0>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d003      	beq.n	80084f6 <TIM_OC3_SetConfig+0x66>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a20      	ldr	r2, [pc, #128]	@ (8008574 <TIM_OC3_SetConfig+0xe4>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d10d      	bne.n	8008512 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	021b      	lsls	r3, r3, #8
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	4313      	orrs	r3, r2
 8008508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a16      	ldr	r2, [pc, #88]	@ (8008570 <TIM_OC3_SetConfig+0xe0>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d003      	beq.n	8008522 <TIM_OC3_SetConfig+0x92>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a15      	ldr	r2, [pc, #84]	@ (8008574 <TIM_OC3_SetConfig+0xe4>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d113      	bne.n	800854a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	011b      	lsls	r3, r3, #4
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	4313      	orrs	r3, r2
 800853c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	011b      	lsls	r3, r3, #4
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	4313      	orrs	r3, r2
 8008548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	685a      	ldr	r2, [r3, #4]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	621a      	str	r2, [r3, #32]
}
 8008564:	bf00      	nop
 8008566:	371c      	adds	r7, #28
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	40010000 	.word	0x40010000
 8008574:	40010400 	.word	0x40010400

08008578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008578:	b480      	push	{r7}
 800857a:	b087      	sub	sp, #28
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a1b      	ldr	r3, [r3, #32]
 800858c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	021b      	lsls	r3, r3, #8
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	031b      	lsls	r3, r3, #12
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a12      	ldr	r2, [pc, #72]	@ (800861c <TIM_OC4_SetConfig+0xa4>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d003      	beq.n	80085e0 <TIM_OC4_SetConfig+0x68>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a11      	ldr	r2, [pc, #68]	@ (8008620 <TIM_OC4_SetConfig+0xa8>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d109      	bne.n	80085f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	019b      	lsls	r3, r3, #6
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	621a      	str	r2, [r3, #32]
}
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	40010000 	.word	0x40010000
 8008620:	40010400 	.word	0x40010400

08008624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6a1b      	ldr	r3, [r3, #32]
 8008634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	f023 0201 	bic.w	r2, r3, #1
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800864e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	011b      	lsls	r3, r3, #4
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	4313      	orrs	r3, r2
 8008658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f023 030a 	bic.w	r3, r3, #10
 8008660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	4313      	orrs	r3, r2
 8008668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	621a      	str	r2, [r3, #32]
}
 8008676:	bf00      	nop
 8008678:	371c      	adds	r7, #28
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008682:	b480      	push	{r7}
 8008684:	b087      	sub	sp, #28
 8008686:	af00      	add	r7, sp, #0
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	60b9      	str	r1, [r7, #8]
 800868c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	f023 0210 	bic.w	r2, r3, #16
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	031b      	lsls	r3, r3, #12
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	011b      	lsls	r3, r3, #4
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	621a      	str	r2, [r3, #32]
}
 80086d6:	bf00      	nop
 80086d8:	371c      	adds	r7, #28
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b085      	sub	sp, #20
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4313      	orrs	r3, r2
 8008700:	f043 0307 	orr.w	r3, r3, #7
 8008704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	609a      	str	r2, [r3, #8]
}
 800870c:	bf00      	nop
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	021a      	lsls	r2, r3, #8
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	431a      	orrs	r2, r3
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	4313      	orrs	r3, r2
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	4313      	orrs	r3, r2
 8008744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	609a      	str	r2, [r3, #8]
}
 800874c:	bf00      	nop
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f003 031f 	and.w	r3, r3, #31
 800876a:	2201      	movs	r2, #1
 800876c:	fa02 f303 	lsl.w	r3, r2, r3
 8008770:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a1a      	ldr	r2, [r3, #32]
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	43db      	mvns	r3, r3
 800877a:	401a      	ands	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a1a      	ldr	r2, [r3, #32]
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f003 031f 	and.w	r3, r3, #31
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	fa01 f303 	lsl.w	r3, r1, r3
 8008790:	431a      	orrs	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	621a      	str	r2, [r3, #32]
}
 8008796:	bf00      	nop
 8008798:	371c      	adds	r7, #28
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
	...

080087a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d101      	bne.n	80087bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087b8:	2302      	movs	r3, #2
 80087ba:	e05a      	b.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a21      	ldr	r2, [pc, #132]	@ (8008880 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d022      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008808:	d01d      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a1d      	ldr	r2, [pc, #116]	@ (8008884 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d018      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a1b      	ldr	r2, [pc, #108]	@ (8008888 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d013      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a1a      	ldr	r2, [pc, #104]	@ (800888c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d00e      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a18      	ldr	r2, [pc, #96]	@ (8008890 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d009      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a17      	ldr	r2, [pc, #92]	@ (8008894 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d004      	beq.n	8008846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a15      	ldr	r2, [pc, #84]	@ (8008898 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d10c      	bne.n	8008860 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800884c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	4313      	orrs	r3, r2
 8008856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40010000 	.word	0x40010000
 8008884:	40000400 	.word	0x40000400
 8008888:	40000800 	.word	0x40000800
 800888c:	40000c00 	.word	0x40000c00
 8008890:	40010400 	.word	0x40010400
 8008894:	40014000 	.word	0x40014000
 8008898:	40001800 	.word	0x40001800

0800889c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d101      	bne.n	80088b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80088b4:	2302      	movs	r3, #2
 80088b6:	e03d      	b.n	8008934 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	4313      	orrs	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	4313      	orrs	r3, r2
 8008920:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e042      	b.n	8008a00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d106      	bne.n	8008994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7fc ffb4 	bl	80058fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2224      	movs	r2, #36	@ 0x24
 8008998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80089aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fcdb 	bl	8009368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	691a      	ldr	r2, [r3, #16]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	695a      	ldr	r2, [r3, #20]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68da      	ldr	r2, [r3, #12]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80089e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2220      	movs	r2, #32
 80089ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2220      	movs	r2, #32
 80089f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	4613      	mov	r3, r2
 8008a14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b20      	cmp	r3, #32
 8008a20:	d112      	bne.n	8008a48 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <HAL_UART_Receive_IT+0x26>
 8008a28:	88fb      	ldrh	r3, [r7, #6]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e00b      	b.n	8008a4a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a38:	88fb      	ldrh	r3, [r7, #6]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	68b9      	ldr	r1, [r7, #8]
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 faba 	bl	8008fb8 <UART_Start_Receive_IT>
 8008a44:	4603      	mov	r3, r0
 8008a46:	e000      	b.n	8008a4a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008a48:	2302      	movs	r3, #2
  }
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
	...

08008a54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b0ba      	sub	sp, #232	@ 0xe8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a8a:	f003 030f 	and.w	r3, r3, #15
 8008a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10f      	bne.n	8008aba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a9e:	f003 0320 	and.w	r3, r3, #32
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d009      	beq.n	8008aba <HAL_UART_IRQHandler+0x66>
 8008aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d003      	beq.n	8008aba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fb99 	bl	80091ea <UART_Receive_IT>
      return;
 8008ab8:	e25b      	b.n	8008f72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f000 80de 	beq.w	8008c80 <HAL_UART_IRQHandler+0x22c>
 8008ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d106      	bne.n	8008ade <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ad4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 80d1 	beq.w	8008c80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00b      	beq.n	8008b02 <HAL_UART_IRQHandler+0xae>
 8008aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008afa:	f043 0201 	orr.w	r2, r3, #1
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b06:	f003 0304 	and.w	r3, r3, #4
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00b      	beq.n	8008b26 <HAL_UART_IRQHandler+0xd2>
 8008b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d005      	beq.n	8008b26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b1e:	f043 0202 	orr.w	r2, r3, #2
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00b      	beq.n	8008b4a <HAL_UART_IRQHandler+0xf6>
 8008b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d005      	beq.n	8008b4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b42:	f043 0204 	orr.w	r2, r3, #4
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b4e:	f003 0308 	and.w	r3, r3, #8
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d011      	beq.n	8008b7a <HAL_UART_IRQHandler+0x126>
 8008b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b5a:	f003 0320 	and.w	r3, r3, #32
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d105      	bne.n	8008b6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d005      	beq.n	8008b7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b72:	f043 0208 	orr.w	r2, r3, #8
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 81f2 	beq.w	8008f68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b88:	f003 0320 	and.w	r3, r3, #32
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d008      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x14e>
 8008b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b94:	f003 0320 	and.w	r3, r3, #32
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d002      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fb24 	bl	80091ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bac:	2b40      	cmp	r3, #64	@ 0x40
 8008bae:	bf0c      	ite	eq
 8008bb0:	2301      	moveq	r3, #1
 8008bb2:	2300      	movne	r3, #0
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bbe:	f003 0308 	and.w	r3, r3, #8
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d103      	bne.n	8008bce <HAL_UART_IRQHandler+0x17a>
 8008bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d04f      	beq.n	8008c6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fa2c 	bl	800902c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bde:	2b40      	cmp	r3, #64	@ 0x40
 8008be0:	d141      	bne.n	8008c66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3314      	adds	r3, #20
 8008be8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008bf0:	e853 3f00 	ldrex	r3, [r3]
 8008bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008bfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3314      	adds	r3, #20
 8008c0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c1e:	e841 2300 	strex	r3, r2, [r1]
 8008c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1d9      	bne.n	8008be2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d013      	beq.n	8008c5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8008e34 <HAL_UART_IRQHandler+0x3e0>)
 8008c3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fd fae9 	bl	800621a <HAL_DMA_Abort_IT>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d016      	beq.n	8008c7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008c58:	4610      	mov	r0, r2
 8008c5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c5c:	e00e      	b.n	8008c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f994 	bl	8008f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c64:	e00a      	b.n	8008c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f990 	bl	8008f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c6c:	e006      	b.n	8008c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f98c 	bl	8008f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008c7a:	e175      	b.n	8008f68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c7c:	bf00      	nop
    return;
 8008c7e:	e173      	b.n	8008f68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	f040 814f 	bne.w	8008f28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c8e:	f003 0310 	and.w	r3, r3, #16
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 8148 	beq.w	8008f28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c9c:	f003 0310 	and.w	r3, r3, #16
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 8141 	beq.w	8008f28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60bb      	str	r3, [r7, #8]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	60bb      	str	r3, [r7, #8]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	60bb      	str	r3, [r7, #8]
 8008cba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc6:	2b40      	cmp	r3, #64	@ 0x40
 8008cc8:	f040 80b6 	bne.w	8008e38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 8145 	beq.w	8008f6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cea:	429a      	cmp	r2, r3
 8008cec:	f080 813e 	bcs.w	8008f6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cf6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d02:	f000 8088 	beq.w	8008e16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	330c      	adds	r3, #12
 8008d0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	330c      	adds	r3, #12
 8008d2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008d32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008d36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1d9      	bne.n	8008d06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3314      	adds	r3, #20
 8008d58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d64:	f023 0301 	bic.w	r3, r3, #1
 8008d68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3314      	adds	r3, #20
 8008d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e1      	bne.n	8008d52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3314      	adds	r3, #20
 8008d94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d98:	e853 3f00 	ldrex	r3, [r3]
 8008d9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008da0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008da4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3314      	adds	r3, #20
 8008dae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008db2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008db4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008db8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008dba:	e841 2300 	strex	r3, r2, [r1]
 8008dbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e3      	bne.n	8008d8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	330c      	adds	r3, #12
 8008dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dde:	e853 3f00 	ldrex	r3, [r3]
 8008de2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008de4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008de6:	f023 0310 	bic.w	r3, r3, #16
 8008dea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	330c      	adds	r3, #12
 8008df4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008df8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008dfa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008dfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e00:	e841 2300 	strex	r3, r2, [r1]
 8008e04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1e3      	bne.n	8008dd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fd f992 	bl	800613a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f8b7 	bl	8008fa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e32:	e09b      	b.n	8008f6c <HAL_UART_IRQHandler+0x518>
 8008e34:	080090f3 	.word	0x080090f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 808e 	beq.w	8008f70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008e54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 8089 	beq.w	8008f70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	330c      	adds	r3, #12
 8008e64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e68:	e853 3f00 	ldrex	r3, [r3]
 8008e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	330c      	adds	r3, #12
 8008e7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008e82:	647a      	str	r2, [r7, #68]	@ 0x44
 8008e84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e8a:	e841 2300 	strex	r3, r2, [r1]
 8008e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1e3      	bne.n	8008e5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3314      	adds	r3, #20
 8008e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	e853 3f00 	ldrex	r3, [r3]
 8008ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	f023 0301 	bic.w	r3, r3, #1
 8008eac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3314      	adds	r3, #20
 8008eb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008eba:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ec2:	e841 2300 	strex	r3, r2, [r1]
 8008ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1e3      	bne.n	8008e96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	330c      	adds	r3, #12
 8008ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f023 0310 	bic.w	r3, r3, #16
 8008ef2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	330c      	adds	r3, #12
 8008efc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008f00:	61fa      	str	r2, [r7, #28]
 8008f02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f04:	69b9      	ldr	r1, [r7, #24]
 8008f06:	69fa      	ldr	r2, [r7, #28]
 8008f08:	e841 2300 	strex	r3, r2, [r1]
 8008f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1e3      	bne.n	8008edc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f83d 	bl	8008fa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f26:	e023      	b.n	8008f70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d009      	beq.n	8008f48 <HAL_UART_IRQHandler+0x4f4>
 8008f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d003      	beq.n	8008f48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f8ea 	bl	800911a <UART_Transmit_IT>
    return;
 8008f46:	e014      	b.n	8008f72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00e      	beq.n	8008f72 <HAL_UART_IRQHandler+0x51e>
 8008f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d008      	beq.n	8008f72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f92a 	bl	80091ba <UART_EndTransmit_IT>
    return;
 8008f66:	e004      	b.n	8008f72 <HAL_UART_IRQHandler+0x51e>
    return;
 8008f68:	bf00      	nop
 8008f6a:	e002      	b.n	8008f72 <HAL_UART_IRQHandler+0x51e>
      return;
 8008f6c:	bf00      	nop
 8008f6e:	e000      	b.n	8008f72 <HAL_UART_IRQHandler+0x51e>
      return;
 8008f70:	bf00      	nop
  }
}
 8008f72:	37e8      	adds	r7, #232	@ 0xe8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	88fa      	ldrh	r2, [r7, #6]
 8008fd0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	88fa      	ldrh	r2, [r7, #6]
 8008fd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2222      	movs	r2, #34	@ 0x22
 8008fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d007      	beq.n	8008ffe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68da      	ldr	r2, [r3, #12]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ffc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	695a      	ldr	r2, [r3, #20]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f042 0201 	orr.w	r2, r2, #1
 800900c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68da      	ldr	r2, [r3, #12]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f042 0220 	orr.w	r2, r2, #32
 800901c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800902c:	b480      	push	{r7}
 800902e:	b095      	sub	sp, #84	@ 0x54
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	330c      	adds	r3, #12
 800903a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800903e:	e853 3f00 	ldrex	r3, [r3]
 8009042:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009046:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800904a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	330c      	adds	r3, #12
 8009052:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009054:	643a      	str	r2, [r7, #64]	@ 0x40
 8009056:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009058:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800905a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800905c:	e841 2300 	strex	r3, r2, [r1]
 8009060:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e5      	bne.n	8009034 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3314      	adds	r3, #20
 800906e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	61fb      	str	r3, [r7, #28]
   return(result);
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	f023 0301 	bic.w	r3, r3, #1
 800907e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3314      	adds	r3, #20
 8009086:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009088:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800908a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800908e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e5      	bne.n	8009068 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d119      	bne.n	80090d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	330c      	adds	r3, #12
 80090aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	e853 3f00 	ldrex	r3, [r3]
 80090b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f023 0310 	bic.w	r3, r3, #16
 80090ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	330c      	adds	r3, #12
 80090c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090c4:	61ba      	str	r2, [r7, #24]
 80090c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	6979      	ldr	r1, [r7, #20]
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	613b      	str	r3, [r7, #16]
   return(result);
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e5      	bne.n	80090a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2220      	movs	r2, #32
 80090dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80090e6:	bf00      	nop
 80090e8:	3754      	adds	r7, #84	@ 0x54
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f7ff ff3d 	bl	8008f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009112:	bf00      	nop
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800911a:	b480      	push	{r7}
 800911c:	b085      	sub	sp, #20
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b21      	cmp	r3, #33	@ 0x21
 800912c:	d13e      	bne.n	80091ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009136:	d114      	bne.n	8009162 <UART_Transmit_IT+0x48>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d110      	bne.n	8009162 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009154:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	1c9a      	adds	r2, r3, #2
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	621a      	str	r2, [r3, #32]
 8009160:	e008      	b.n	8009174 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	1c59      	adds	r1, r3, #1
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	6211      	str	r1, [r2, #32]
 800916c:	781a      	ldrb	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009178:	b29b      	uxth	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	b29b      	uxth	r3, r3
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	4619      	mov	r1, r3
 8009182:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10f      	bne.n	80091a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68da      	ldr	r2, [r3, #12]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009196:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	e000      	b.n	80091ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091ac:	2302      	movs	r3, #2
  }
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b082      	sub	sp, #8
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68da      	ldr	r2, [r3, #12]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2220      	movs	r2, #32
 80091d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7ff fecc 	bl	8008f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b08c      	sub	sp, #48	@ 0x30
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2b22      	cmp	r3, #34	@ 0x22
 80091fc:	f040 80ae 	bne.w	800935c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009208:	d117      	bne.n	800923a <UART_Receive_IT+0x50>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d113      	bne.n	800923a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009212:	2300      	movs	r3, #0
 8009214:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800921a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	b29b      	uxth	r3, r3
 8009224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009228:	b29a      	uxth	r2, r3
 800922a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009232:	1c9a      	adds	r2, r3, #2
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	629a      	str	r2, [r3, #40]	@ 0x28
 8009238:	e026      	b.n	8009288 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800923e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009240:	2300      	movs	r3, #0
 8009242:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800924c:	d007      	beq.n	800925e <UART_Receive_IT+0x74>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10a      	bne.n	800926c <UART_Receive_IT+0x82>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d106      	bne.n	800926c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	b2da      	uxtb	r2, r3
 8009266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009268:	701a      	strb	r2, [r3, #0]
 800926a:	e008      	b.n	800927e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	b2db      	uxtb	r3, r3
 8009274:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009278:	b2da      	uxtb	r2, r3
 800927a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009282:	1c5a      	adds	r2, r3, #1
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800928c:	b29b      	uxth	r3, r3
 800928e:	3b01      	subs	r3, #1
 8009290:	b29b      	uxth	r3, r3
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	4619      	mov	r1, r3
 8009296:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009298:	2b00      	cmp	r3, #0
 800929a:	d15d      	bne.n	8009358 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f022 0220 	bic.w	r2, r2, #32
 80092aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80092ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	695a      	ldr	r2, [r3, #20]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f022 0201 	bic.w	r2, r2, #1
 80092ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2220      	movs	r2, #32
 80092d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d135      	bne.n	800934e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	330c      	adds	r3, #12
 80092ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	e853 3f00 	ldrex	r3, [r3]
 80092f6:	613b      	str	r3, [r7, #16]
   return(result);
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f023 0310 	bic.w	r3, r3, #16
 80092fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	330c      	adds	r3, #12
 8009306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009308:	623a      	str	r2, [r7, #32]
 800930a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930c:	69f9      	ldr	r1, [r7, #28]
 800930e:	6a3a      	ldr	r2, [r7, #32]
 8009310:	e841 2300 	strex	r3, r2, [r1]
 8009314:	61bb      	str	r3, [r7, #24]
   return(result);
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1e5      	bne.n	80092e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0310 	and.w	r3, r3, #16
 8009326:	2b10      	cmp	r3, #16
 8009328:	d10a      	bne.n	8009340 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800932a:	2300      	movs	r3, #0
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	60fb      	str	r3, [r7, #12]
 800933e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f7ff fe2a 	bl	8008fa0 <HAL_UARTEx_RxEventCallback>
 800934c:	e002      	b.n	8009354 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7fa fa4e 	bl	80037f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	e002      	b.n	800935e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	e000      	b.n	800935e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800935c:	2302      	movs	r3, #2
  }
}
 800935e:	4618      	mov	r0, r3
 8009360:	3730      	adds	r7, #48	@ 0x30
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800936c:	b0c0      	sub	sp, #256	@ 0x100
 800936e:	af00      	add	r7, sp, #0
 8009370:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009384:	68d9      	ldr	r1, [r3, #12]
 8009386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	ea40 0301 	orr.w	r3, r0, r1
 8009390:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009396:	689a      	ldr	r2, [r3, #8]
 8009398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	431a      	orrs	r2, r3
 80093a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093a4:	695b      	ldr	r3, [r3, #20]
 80093a6:	431a      	orrs	r2, r3
 80093a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80093b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80093c0:	f021 010c 	bic.w	r1, r1, #12
 80093c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80093ce:	430b      	orrs	r3, r1
 80093d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80093de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093e2:	6999      	ldr	r1, [r3, #24]
 80093e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	ea40 0301 	orr.w	r3, r0, r1
 80093ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80093f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	4b8f      	ldr	r3, [pc, #572]	@ (8009634 <UART_SetConfig+0x2cc>)
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d005      	beq.n	8009408 <UART_SetConfig+0xa0>
 80093fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	4b8d      	ldr	r3, [pc, #564]	@ (8009638 <UART_SetConfig+0x2d0>)
 8009404:	429a      	cmp	r2, r3
 8009406:	d104      	bne.n	8009412 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009408:	f7fe fa32 	bl	8007870 <HAL_RCC_GetPCLK2Freq>
 800940c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009410:	e003      	b.n	800941a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009412:	f7fe fa19 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 8009416:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800941a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800941e:	69db      	ldr	r3, [r3, #28]
 8009420:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009424:	f040 810c 	bne.w	8009640 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800942c:	2200      	movs	r2, #0
 800942e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009432:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009436:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800943a:	4622      	mov	r2, r4
 800943c:	462b      	mov	r3, r5
 800943e:	1891      	adds	r1, r2, r2
 8009440:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009442:	415b      	adcs	r3, r3
 8009444:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009446:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800944a:	4621      	mov	r1, r4
 800944c:	eb12 0801 	adds.w	r8, r2, r1
 8009450:	4629      	mov	r1, r5
 8009452:	eb43 0901 	adc.w	r9, r3, r1
 8009456:	f04f 0200 	mov.w	r2, #0
 800945a:	f04f 0300 	mov.w	r3, #0
 800945e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800946a:	4690      	mov	r8, r2
 800946c:	4699      	mov	r9, r3
 800946e:	4623      	mov	r3, r4
 8009470:	eb18 0303 	adds.w	r3, r8, r3
 8009474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009478:	462b      	mov	r3, r5
 800947a:	eb49 0303 	adc.w	r3, r9, r3
 800947e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800948e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009492:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009496:	460b      	mov	r3, r1
 8009498:	18db      	adds	r3, r3, r3
 800949a:	653b      	str	r3, [r7, #80]	@ 0x50
 800949c:	4613      	mov	r3, r2
 800949e:	eb42 0303 	adc.w	r3, r2, r3
 80094a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80094a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80094a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80094ac:	f7f7 fbec 	bl	8000c88 <__aeabi_uldivmod>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	4b61      	ldr	r3, [pc, #388]	@ (800963c <UART_SetConfig+0x2d4>)
 80094b6:	fba3 2302 	umull	r2, r3, r3, r2
 80094ba:	095b      	lsrs	r3, r3, #5
 80094bc:	011c      	lsls	r4, r3, #4
 80094be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80094cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80094d0:	4642      	mov	r2, r8
 80094d2:	464b      	mov	r3, r9
 80094d4:	1891      	adds	r1, r2, r2
 80094d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80094d8:	415b      	adcs	r3, r3
 80094da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80094e0:	4641      	mov	r1, r8
 80094e2:	eb12 0a01 	adds.w	sl, r2, r1
 80094e6:	4649      	mov	r1, r9
 80094e8:	eb43 0b01 	adc.w	fp, r3, r1
 80094ec:	f04f 0200 	mov.w	r2, #0
 80094f0:	f04f 0300 	mov.w	r3, #0
 80094f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80094f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80094fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009500:	4692      	mov	sl, r2
 8009502:	469b      	mov	fp, r3
 8009504:	4643      	mov	r3, r8
 8009506:	eb1a 0303 	adds.w	r3, sl, r3
 800950a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800950e:	464b      	mov	r3, r9
 8009510:	eb4b 0303 	adc.w	r3, fp, r3
 8009514:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009524:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009528:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800952c:	460b      	mov	r3, r1
 800952e:	18db      	adds	r3, r3, r3
 8009530:	643b      	str	r3, [r7, #64]	@ 0x40
 8009532:	4613      	mov	r3, r2
 8009534:	eb42 0303 	adc.w	r3, r2, r3
 8009538:	647b      	str	r3, [r7, #68]	@ 0x44
 800953a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800953e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009542:	f7f7 fba1 	bl	8000c88 <__aeabi_uldivmod>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4611      	mov	r1, r2
 800954c:	4b3b      	ldr	r3, [pc, #236]	@ (800963c <UART_SetConfig+0x2d4>)
 800954e:	fba3 2301 	umull	r2, r3, r3, r1
 8009552:	095b      	lsrs	r3, r3, #5
 8009554:	2264      	movs	r2, #100	@ 0x64
 8009556:	fb02 f303 	mul.w	r3, r2, r3
 800955a:	1acb      	subs	r3, r1, r3
 800955c:	00db      	lsls	r3, r3, #3
 800955e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009562:	4b36      	ldr	r3, [pc, #216]	@ (800963c <UART_SetConfig+0x2d4>)
 8009564:	fba3 2302 	umull	r2, r3, r3, r2
 8009568:	095b      	lsrs	r3, r3, #5
 800956a:	005b      	lsls	r3, r3, #1
 800956c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009570:	441c      	add	r4, r3
 8009572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009576:	2200      	movs	r2, #0
 8009578:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800957c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009580:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009584:	4642      	mov	r2, r8
 8009586:	464b      	mov	r3, r9
 8009588:	1891      	adds	r1, r2, r2
 800958a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800958c:	415b      	adcs	r3, r3
 800958e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009590:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009594:	4641      	mov	r1, r8
 8009596:	1851      	adds	r1, r2, r1
 8009598:	6339      	str	r1, [r7, #48]	@ 0x30
 800959a:	4649      	mov	r1, r9
 800959c:	414b      	adcs	r3, r1
 800959e:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a0:	f04f 0200 	mov.w	r2, #0
 80095a4:	f04f 0300 	mov.w	r3, #0
 80095a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80095ac:	4659      	mov	r1, fp
 80095ae:	00cb      	lsls	r3, r1, #3
 80095b0:	4651      	mov	r1, sl
 80095b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095b6:	4651      	mov	r1, sl
 80095b8:	00ca      	lsls	r2, r1, #3
 80095ba:	4610      	mov	r0, r2
 80095bc:	4619      	mov	r1, r3
 80095be:	4603      	mov	r3, r0
 80095c0:	4642      	mov	r2, r8
 80095c2:	189b      	adds	r3, r3, r2
 80095c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095c8:	464b      	mov	r3, r9
 80095ca:	460a      	mov	r2, r1
 80095cc:	eb42 0303 	adc.w	r3, r2, r3
 80095d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80095e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80095e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80095e8:	460b      	mov	r3, r1
 80095ea:	18db      	adds	r3, r3, r3
 80095ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095ee:	4613      	mov	r3, r2
 80095f0:	eb42 0303 	adc.w	r3, r2, r3
 80095f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80095fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80095fe:	f7f7 fb43 	bl	8000c88 <__aeabi_uldivmod>
 8009602:	4602      	mov	r2, r0
 8009604:	460b      	mov	r3, r1
 8009606:	4b0d      	ldr	r3, [pc, #52]	@ (800963c <UART_SetConfig+0x2d4>)
 8009608:	fba3 1302 	umull	r1, r3, r3, r2
 800960c:	095b      	lsrs	r3, r3, #5
 800960e:	2164      	movs	r1, #100	@ 0x64
 8009610:	fb01 f303 	mul.w	r3, r1, r3
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	00db      	lsls	r3, r3, #3
 8009618:	3332      	adds	r3, #50	@ 0x32
 800961a:	4a08      	ldr	r2, [pc, #32]	@ (800963c <UART_SetConfig+0x2d4>)
 800961c:	fba2 2303 	umull	r2, r3, r2, r3
 8009620:	095b      	lsrs	r3, r3, #5
 8009622:	f003 0207 	and.w	r2, r3, #7
 8009626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4422      	add	r2, r4
 800962e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009630:	e106      	b.n	8009840 <UART_SetConfig+0x4d8>
 8009632:	bf00      	nop
 8009634:	40011000 	.word	0x40011000
 8009638:	40011400 	.word	0x40011400
 800963c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009644:	2200      	movs	r2, #0
 8009646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800964a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800964e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009652:	4642      	mov	r2, r8
 8009654:	464b      	mov	r3, r9
 8009656:	1891      	adds	r1, r2, r2
 8009658:	6239      	str	r1, [r7, #32]
 800965a:	415b      	adcs	r3, r3
 800965c:	627b      	str	r3, [r7, #36]	@ 0x24
 800965e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009662:	4641      	mov	r1, r8
 8009664:	1854      	adds	r4, r2, r1
 8009666:	4649      	mov	r1, r9
 8009668:	eb43 0501 	adc.w	r5, r3, r1
 800966c:	f04f 0200 	mov.w	r2, #0
 8009670:	f04f 0300 	mov.w	r3, #0
 8009674:	00eb      	lsls	r3, r5, #3
 8009676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800967a:	00e2      	lsls	r2, r4, #3
 800967c:	4614      	mov	r4, r2
 800967e:	461d      	mov	r5, r3
 8009680:	4643      	mov	r3, r8
 8009682:	18e3      	adds	r3, r4, r3
 8009684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009688:	464b      	mov	r3, r9
 800968a:	eb45 0303 	adc.w	r3, r5, r3
 800968e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800969e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80096a2:	f04f 0200 	mov.w	r2, #0
 80096a6:	f04f 0300 	mov.w	r3, #0
 80096aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80096ae:	4629      	mov	r1, r5
 80096b0:	008b      	lsls	r3, r1, #2
 80096b2:	4621      	mov	r1, r4
 80096b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096b8:	4621      	mov	r1, r4
 80096ba:	008a      	lsls	r2, r1, #2
 80096bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80096c0:	f7f7 fae2 	bl	8000c88 <__aeabi_uldivmod>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	4b60      	ldr	r3, [pc, #384]	@ (800984c <UART_SetConfig+0x4e4>)
 80096ca:	fba3 2302 	umull	r2, r3, r3, r2
 80096ce:	095b      	lsrs	r3, r3, #5
 80096d0:	011c      	lsls	r4, r3, #4
 80096d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096d6:	2200      	movs	r2, #0
 80096d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80096dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80096e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80096e4:	4642      	mov	r2, r8
 80096e6:	464b      	mov	r3, r9
 80096e8:	1891      	adds	r1, r2, r2
 80096ea:	61b9      	str	r1, [r7, #24]
 80096ec:	415b      	adcs	r3, r3
 80096ee:	61fb      	str	r3, [r7, #28]
 80096f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096f4:	4641      	mov	r1, r8
 80096f6:	1851      	adds	r1, r2, r1
 80096f8:	6139      	str	r1, [r7, #16]
 80096fa:	4649      	mov	r1, r9
 80096fc:	414b      	adcs	r3, r1
 80096fe:	617b      	str	r3, [r7, #20]
 8009700:	f04f 0200 	mov.w	r2, #0
 8009704:	f04f 0300 	mov.w	r3, #0
 8009708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800970c:	4659      	mov	r1, fp
 800970e:	00cb      	lsls	r3, r1, #3
 8009710:	4651      	mov	r1, sl
 8009712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009716:	4651      	mov	r1, sl
 8009718:	00ca      	lsls	r2, r1, #3
 800971a:	4610      	mov	r0, r2
 800971c:	4619      	mov	r1, r3
 800971e:	4603      	mov	r3, r0
 8009720:	4642      	mov	r2, r8
 8009722:	189b      	adds	r3, r3, r2
 8009724:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009728:	464b      	mov	r3, r9
 800972a:	460a      	mov	r2, r1
 800972c:	eb42 0303 	adc.w	r3, r2, r3
 8009730:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800973e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009740:	f04f 0200 	mov.w	r2, #0
 8009744:	f04f 0300 	mov.w	r3, #0
 8009748:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800974c:	4649      	mov	r1, r9
 800974e:	008b      	lsls	r3, r1, #2
 8009750:	4641      	mov	r1, r8
 8009752:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009756:	4641      	mov	r1, r8
 8009758:	008a      	lsls	r2, r1, #2
 800975a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800975e:	f7f7 fa93 	bl	8000c88 <__aeabi_uldivmod>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	4611      	mov	r1, r2
 8009768:	4b38      	ldr	r3, [pc, #224]	@ (800984c <UART_SetConfig+0x4e4>)
 800976a:	fba3 2301 	umull	r2, r3, r3, r1
 800976e:	095b      	lsrs	r3, r3, #5
 8009770:	2264      	movs	r2, #100	@ 0x64
 8009772:	fb02 f303 	mul.w	r3, r2, r3
 8009776:	1acb      	subs	r3, r1, r3
 8009778:	011b      	lsls	r3, r3, #4
 800977a:	3332      	adds	r3, #50	@ 0x32
 800977c:	4a33      	ldr	r2, [pc, #204]	@ (800984c <UART_SetConfig+0x4e4>)
 800977e:	fba2 2303 	umull	r2, r3, r2, r3
 8009782:	095b      	lsrs	r3, r3, #5
 8009784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009788:	441c      	add	r4, r3
 800978a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800978e:	2200      	movs	r2, #0
 8009790:	673b      	str	r3, [r7, #112]	@ 0x70
 8009792:	677a      	str	r2, [r7, #116]	@ 0x74
 8009794:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009798:	4642      	mov	r2, r8
 800979a:	464b      	mov	r3, r9
 800979c:	1891      	adds	r1, r2, r2
 800979e:	60b9      	str	r1, [r7, #8]
 80097a0:	415b      	adcs	r3, r3
 80097a2:	60fb      	str	r3, [r7, #12]
 80097a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80097a8:	4641      	mov	r1, r8
 80097aa:	1851      	adds	r1, r2, r1
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	4649      	mov	r1, r9
 80097b0:	414b      	adcs	r3, r1
 80097b2:	607b      	str	r3, [r7, #4]
 80097b4:	f04f 0200 	mov.w	r2, #0
 80097b8:	f04f 0300 	mov.w	r3, #0
 80097bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80097c0:	4659      	mov	r1, fp
 80097c2:	00cb      	lsls	r3, r1, #3
 80097c4:	4651      	mov	r1, sl
 80097c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097ca:	4651      	mov	r1, sl
 80097cc:	00ca      	lsls	r2, r1, #3
 80097ce:	4610      	mov	r0, r2
 80097d0:	4619      	mov	r1, r3
 80097d2:	4603      	mov	r3, r0
 80097d4:	4642      	mov	r2, r8
 80097d6:	189b      	adds	r3, r3, r2
 80097d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80097da:	464b      	mov	r3, r9
 80097dc:	460a      	mov	r2, r1
 80097de:	eb42 0303 	adc.w	r3, r2, r3
 80097e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80097e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80097ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80097f0:	f04f 0200 	mov.w	r2, #0
 80097f4:	f04f 0300 	mov.w	r3, #0
 80097f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80097fc:	4649      	mov	r1, r9
 80097fe:	008b      	lsls	r3, r1, #2
 8009800:	4641      	mov	r1, r8
 8009802:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009806:	4641      	mov	r1, r8
 8009808:	008a      	lsls	r2, r1, #2
 800980a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800980e:	f7f7 fa3b 	bl	8000c88 <__aeabi_uldivmod>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4b0d      	ldr	r3, [pc, #52]	@ (800984c <UART_SetConfig+0x4e4>)
 8009818:	fba3 1302 	umull	r1, r3, r3, r2
 800981c:	095b      	lsrs	r3, r3, #5
 800981e:	2164      	movs	r1, #100	@ 0x64
 8009820:	fb01 f303 	mul.w	r3, r1, r3
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	011b      	lsls	r3, r3, #4
 8009828:	3332      	adds	r3, #50	@ 0x32
 800982a:	4a08      	ldr	r2, [pc, #32]	@ (800984c <UART_SetConfig+0x4e4>)
 800982c:	fba2 2303 	umull	r2, r3, r2, r3
 8009830:	095b      	lsrs	r3, r3, #5
 8009832:	f003 020f 	and.w	r2, r3, #15
 8009836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4422      	add	r2, r4
 800983e:	609a      	str	r2, [r3, #8]
}
 8009840:	bf00      	nop
 8009842:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009846:	46bd      	mov	sp, r7
 8009848:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800984c:	51eb851f 	.word	0x51eb851f

08009850 <atof>:
 8009850:	2100      	movs	r1, #0
 8009852:	f000 be0f 	b.w	800a474 <strtod>

08009856 <atoi>:
 8009856:	220a      	movs	r2, #10
 8009858:	2100      	movs	r1, #0
 800985a:	f000 be93 	b.w	800a584 <strtol>

0800985e <sulp>:
 800985e:	b570      	push	{r4, r5, r6, lr}
 8009860:	4604      	mov	r4, r0
 8009862:	460d      	mov	r5, r1
 8009864:	ec45 4b10 	vmov	d0, r4, r5
 8009868:	4616      	mov	r6, r2
 800986a:	f003 fd5d 	bl	800d328 <__ulp>
 800986e:	ec51 0b10 	vmov	r0, r1, d0
 8009872:	b17e      	cbz	r6, 8009894 <sulp+0x36>
 8009874:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009878:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800987c:	2b00      	cmp	r3, #0
 800987e:	dd09      	ble.n	8009894 <sulp+0x36>
 8009880:	051b      	lsls	r3, r3, #20
 8009882:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009886:	2400      	movs	r4, #0
 8009888:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800988c:	4622      	mov	r2, r4
 800988e:	462b      	mov	r3, r5
 8009890:	f7f6 feb2 	bl	80005f8 <__aeabi_dmul>
 8009894:	ec41 0b10 	vmov	d0, r0, r1
 8009898:	bd70      	pop	{r4, r5, r6, pc}
 800989a:	0000      	movs	r0, r0
 800989c:	0000      	movs	r0, r0
	...

080098a0 <_strtod_l>:
 80098a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	b09f      	sub	sp, #124	@ 0x7c
 80098a6:	460c      	mov	r4, r1
 80098a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80098aa:	2200      	movs	r2, #0
 80098ac:	921a      	str	r2, [sp, #104]	@ 0x68
 80098ae:	9005      	str	r0, [sp, #20]
 80098b0:	f04f 0a00 	mov.w	sl, #0
 80098b4:	f04f 0b00 	mov.w	fp, #0
 80098b8:	460a      	mov	r2, r1
 80098ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80098bc:	7811      	ldrb	r1, [r2, #0]
 80098be:	292b      	cmp	r1, #43	@ 0x2b
 80098c0:	d04a      	beq.n	8009958 <_strtod_l+0xb8>
 80098c2:	d838      	bhi.n	8009936 <_strtod_l+0x96>
 80098c4:	290d      	cmp	r1, #13
 80098c6:	d832      	bhi.n	800992e <_strtod_l+0x8e>
 80098c8:	2908      	cmp	r1, #8
 80098ca:	d832      	bhi.n	8009932 <_strtod_l+0x92>
 80098cc:	2900      	cmp	r1, #0
 80098ce:	d03b      	beq.n	8009948 <_strtod_l+0xa8>
 80098d0:	2200      	movs	r2, #0
 80098d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80098d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80098d6:	782a      	ldrb	r2, [r5, #0]
 80098d8:	2a30      	cmp	r2, #48	@ 0x30
 80098da:	f040 80b3 	bne.w	8009a44 <_strtod_l+0x1a4>
 80098de:	786a      	ldrb	r2, [r5, #1]
 80098e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80098e4:	2a58      	cmp	r2, #88	@ 0x58
 80098e6:	d16e      	bne.n	80099c6 <_strtod_l+0x126>
 80098e8:	9302      	str	r3, [sp, #8]
 80098ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	ab1a      	add	r3, sp, #104	@ 0x68
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	4a8e      	ldr	r2, [pc, #568]	@ (8009b2c <_strtod_l+0x28c>)
 80098f4:	9805      	ldr	r0, [sp, #20]
 80098f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80098f8:	a919      	add	r1, sp, #100	@ 0x64
 80098fa:	f002 fe07 	bl	800c50c <__gethex>
 80098fe:	f010 060f 	ands.w	r6, r0, #15
 8009902:	4604      	mov	r4, r0
 8009904:	d005      	beq.n	8009912 <_strtod_l+0x72>
 8009906:	2e06      	cmp	r6, #6
 8009908:	d128      	bne.n	800995c <_strtod_l+0xbc>
 800990a:	3501      	adds	r5, #1
 800990c:	2300      	movs	r3, #0
 800990e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009910:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009912:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009914:	2b00      	cmp	r3, #0
 8009916:	f040 858e 	bne.w	800a436 <_strtod_l+0xb96>
 800991a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800991c:	b1cb      	cbz	r3, 8009952 <_strtod_l+0xb2>
 800991e:	4652      	mov	r2, sl
 8009920:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009924:	ec43 2b10 	vmov	d0, r2, r3
 8009928:	b01f      	add	sp, #124	@ 0x7c
 800992a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800992e:	2920      	cmp	r1, #32
 8009930:	d1ce      	bne.n	80098d0 <_strtod_l+0x30>
 8009932:	3201      	adds	r2, #1
 8009934:	e7c1      	b.n	80098ba <_strtod_l+0x1a>
 8009936:	292d      	cmp	r1, #45	@ 0x2d
 8009938:	d1ca      	bne.n	80098d0 <_strtod_l+0x30>
 800993a:	2101      	movs	r1, #1
 800993c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800993e:	1c51      	adds	r1, r2, #1
 8009940:	9119      	str	r1, [sp, #100]	@ 0x64
 8009942:	7852      	ldrb	r2, [r2, #1]
 8009944:	2a00      	cmp	r2, #0
 8009946:	d1c5      	bne.n	80098d4 <_strtod_l+0x34>
 8009948:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800994a:	9419      	str	r4, [sp, #100]	@ 0x64
 800994c:	2b00      	cmp	r3, #0
 800994e:	f040 8570 	bne.w	800a432 <_strtod_l+0xb92>
 8009952:	4652      	mov	r2, sl
 8009954:	465b      	mov	r3, fp
 8009956:	e7e5      	b.n	8009924 <_strtod_l+0x84>
 8009958:	2100      	movs	r1, #0
 800995a:	e7ef      	b.n	800993c <_strtod_l+0x9c>
 800995c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800995e:	b13a      	cbz	r2, 8009970 <_strtod_l+0xd0>
 8009960:	2135      	movs	r1, #53	@ 0x35
 8009962:	a81c      	add	r0, sp, #112	@ 0x70
 8009964:	f003 fdda 	bl	800d51c <__copybits>
 8009968:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800996a:	9805      	ldr	r0, [sp, #20]
 800996c:	f003 f9a8 	bl	800ccc0 <_Bfree>
 8009970:	3e01      	subs	r6, #1
 8009972:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009974:	2e04      	cmp	r6, #4
 8009976:	d806      	bhi.n	8009986 <_strtod_l+0xe6>
 8009978:	e8df f006 	tbb	[pc, r6]
 800997c:	201d0314 	.word	0x201d0314
 8009980:	14          	.byte	0x14
 8009981:	00          	.byte	0x00
 8009982:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009986:	05e1      	lsls	r1, r4, #23
 8009988:	bf48      	it	mi
 800998a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800998e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009992:	0d1b      	lsrs	r3, r3, #20
 8009994:	051b      	lsls	r3, r3, #20
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1bb      	bne.n	8009912 <_strtod_l+0x72>
 800999a:	f001 fe4f 	bl	800b63c <__errno>
 800999e:	2322      	movs	r3, #34	@ 0x22
 80099a0:	6003      	str	r3, [r0, #0]
 80099a2:	e7b6      	b.n	8009912 <_strtod_l+0x72>
 80099a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80099a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80099ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80099b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80099b4:	e7e7      	b.n	8009986 <_strtod_l+0xe6>
 80099b6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009b34 <_strtod_l+0x294>
 80099ba:	e7e4      	b.n	8009986 <_strtod_l+0xe6>
 80099bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80099c0:	f04f 3aff 	mov.w	sl, #4294967295
 80099c4:	e7df      	b.n	8009986 <_strtod_l+0xe6>
 80099c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099c8:	1c5a      	adds	r2, r3, #1
 80099ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80099cc:	785b      	ldrb	r3, [r3, #1]
 80099ce:	2b30      	cmp	r3, #48	@ 0x30
 80099d0:	d0f9      	beq.n	80099c6 <_strtod_l+0x126>
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d09d      	beq.n	8009912 <_strtod_l+0x72>
 80099d6:	2301      	movs	r3, #1
 80099d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80099da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80099de:	2300      	movs	r3, #0
 80099e0:	9308      	str	r3, [sp, #32]
 80099e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80099e4:	461f      	mov	r7, r3
 80099e6:	220a      	movs	r2, #10
 80099e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80099ea:	7805      	ldrb	r5, [r0, #0]
 80099ec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80099f0:	b2d9      	uxtb	r1, r3
 80099f2:	2909      	cmp	r1, #9
 80099f4:	d928      	bls.n	8009a48 <_strtod_l+0x1a8>
 80099f6:	494e      	ldr	r1, [pc, #312]	@ (8009b30 <_strtod_l+0x290>)
 80099f8:	2201      	movs	r2, #1
 80099fa:	f001 fd66 	bl	800b4ca <strncmp>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d032      	beq.n	8009a68 <_strtod_l+0x1c8>
 8009a02:	2000      	movs	r0, #0
 8009a04:	462a      	mov	r2, r5
 8009a06:	4681      	mov	r9, r0
 8009a08:	463d      	mov	r5, r7
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2a65      	cmp	r2, #101	@ 0x65
 8009a0e:	d001      	beq.n	8009a14 <_strtod_l+0x174>
 8009a10:	2a45      	cmp	r2, #69	@ 0x45
 8009a12:	d114      	bne.n	8009a3e <_strtod_l+0x19e>
 8009a14:	b91d      	cbnz	r5, 8009a1e <_strtod_l+0x17e>
 8009a16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a18:	4302      	orrs	r2, r0
 8009a1a:	d095      	beq.n	8009948 <_strtod_l+0xa8>
 8009a1c:	2500      	movs	r5, #0
 8009a1e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009a20:	1c62      	adds	r2, r4, #1
 8009a22:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a24:	7862      	ldrb	r2, [r4, #1]
 8009a26:	2a2b      	cmp	r2, #43	@ 0x2b
 8009a28:	d077      	beq.n	8009b1a <_strtod_l+0x27a>
 8009a2a:	2a2d      	cmp	r2, #45	@ 0x2d
 8009a2c:	d07b      	beq.n	8009b26 <_strtod_l+0x286>
 8009a2e:	f04f 0c00 	mov.w	ip, #0
 8009a32:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009a36:	2909      	cmp	r1, #9
 8009a38:	f240 8082 	bls.w	8009b40 <_strtod_l+0x2a0>
 8009a3c:	9419      	str	r4, [sp, #100]	@ 0x64
 8009a3e:	f04f 0800 	mov.w	r8, #0
 8009a42:	e0a2      	b.n	8009b8a <_strtod_l+0x2ea>
 8009a44:	2300      	movs	r3, #0
 8009a46:	e7c7      	b.n	80099d8 <_strtod_l+0x138>
 8009a48:	2f08      	cmp	r7, #8
 8009a4a:	bfd5      	itete	le
 8009a4c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009a4e:	9908      	ldrgt	r1, [sp, #32]
 8009a50:	fb02 3301 	mlale	r3, r2, r1, r3
 8009a54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009a58:	f100 0001 	add.w	r0, r0, #1
 8009a5c:	bfd4      	ite	le
 8009a5e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009a60:	9308      	strgt	r3, [sp, #32]
 8009a62:	3701      	adds	r7, #1
 8009a64:	9019      	str	r0, [sp, #100]	@ 0x64
 8009a66:	e7bf      	b.n	80099e8 <_strtod_l+0x148>
 8009a68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a6a:	1c5a      	adds	r2, r3, #1
 8009a6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a6e:	785a      	ldrb	r2, [r3, #1]
 8009a70:	b37f      	cbz	r7, 8009ad2 <_strtod_l+0x232>
 8009a72:	4681      	mov	r9, r0
 8009a74:	463d      	mov	r5, r7
 8009a76:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009a7a:	2b09      	cmp	r3, #9
 8009a7c:	d912      	bls.n	8009aa4 <_strtod_l+0x204>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e7c4      	b.n	8009a0c <_strtod_l+0x16c>
 8009a82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a84:	1c5a      	adds	r2, r3, #1
 8009a86:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a88:	785a      	ldrb	r2, [r3, #1]
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	2a30      	cmp	r2, #48	@ 0x30
 8009a8e:	d0f8      	beq.n	8009a82 <_strtod_l+0x1e2>
 8009a90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009a94:	2b08      	cmp	r3, #8
 8009a96:	f200 84d3 	bhi.w	800a440 <_strtod_l+0xba0>
 8009a9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a9e:	4681      	mov	r9, r0
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	3a30      	subs	r2, #48	@ 0x30
 8009aa6:	f100 0301 	add.w	r3, r0, #1
 8009aaa:	d02a      	beq.n	8009b02 <_strtod_l+0x262>
 8009aac:	4499      	add	r9, r3
 8009aae:	eb00 0c05 	add.w	ip, r0, r5
 8009ab2:	462b      	mov	r3, r5
 8009ab4:	210a      	movs	r1, #10
 8009ab6:	4563      	cmp	r3, ip
 8009ab8:	d10d      	bne.n	8009ad6 <_strtod_l+0x236>
 8009aba:	1c69      	adds	r1, r5, #1
 8009abc:	4401      	add	r1, r0
 8009abe:	4428      	add	r0, r5
 8009ac0:	2808      	cmp	r0, #8
 8009ac2:	dc16      	bgt.n	8009af2 <_strtod_l+0x252>
 8009ac4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009ac6:	230a      	movs	r3, #10
 8009ac8:	fb03 2300 	mla	r3, r3, r0, r2
 8009acc:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ace:	2300      	movs	r3, #0
 8009ad0:	e018      	b.n	8009b04 <_strtod_l+0x264>
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	e7da      	b.n	8009a8c <_strtod_l+0x1ec>
 8009ad6:	2b08      	cmp	r3, #8
 8009ad8:	f103 0301 	add.w	r3, r3, #1
 8009adc:	dc03      	bgt.n	8009ae6 <_strtod_l+0x246>
 8009ade:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009ae0:	434e      	muls	r6, r1
 8009ae2:	960a      	str	r6, [sp, #40]	@ 0x28
 8009ae4:	e7e7      	b.n	8009ab6 <_strtod_l+0x216>
 8009ae6:	2b10      	cmp	r3, #16
 8009ae8:	bfde      	ittt	le
 8009aea:	9e08      	ldrle	r6, [sp, #32]
 8009aec:	434e      	mulle	r6, r1
 8009aee:	9608      	strle	r6, [sp, #32]
 8009af0:	e7e1      	b.n	8009ab6 <_strtod_l+0x216>
 8009af2:	280f      	cmp	r0, #15
 8009af4:	dceb      	bgt.n	8009ace <_strtod_l+0x22e>
 8009af6:	9808      	ldr	r0, [sp, #32]
 8009af8:	230a      	movs	r3, #10
 8009afa:	fb03 2300 	mla	r3, r3, r0, r2
 8009afe:	9308      	str	r3, [sp, #32]
 8009b00:	e7e5      	b.n	8009ace <_strtod_l+0x22e>
 8009b02:	4629      	mov	r1, r5
 8009b04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b06:	1c50      	adds	r0, r2, #1
 8009b08:	9019      	str	r0, [sp, #100]	@ 0x64
 8009b0a:	7852      	ldrb	r2, [r2, #1]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	460d      	mov	r5, r1
 8009b10:	e7b1      	b.n	8009a76 <_strtod_l+0x1d6>
 8009b12:	f04f 0900 	mov.w	r9, #0
 8009b16:	2301      	movs	r3, #1
 8009b18:	e77d      	b.n	8009a16 <_strtod_l+0x176>
 8009b1a:	f04f 0c00 	mov.w	ip, #0
 8009b1e:	1ca2      	adds	r2, r4, #2
 8009b20:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b22:	78a2      	ldrb	r2, [r4, #2]
 8009b24:	e785      	b.n	8009a32 <_strtod_l+0x192>
 8009b26:	f04f 0c01 	mov.w	ip, #1
 8009b2a:	e7f8      	b.n	8009b1e <_strtod_l+0x27e>
 8009b2c:	0800fc70 	.word	0x0800fc70
 8009b30:	0800fc58 	.word	0x0800fc58
 8009b34:	7ff00000 	.word	0x7ff00000
 8009b38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b3a:	1c51      	adds	r1, r2, #1
 8009b3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009b3e:	7852      	ldrb	r2, [r2, #1]
 8009b40:	2a30      	cmp	r2, #48	@ 0x30
 8009b42:	d0f9      	beq.n	8009b38 <_strtod_l+0x298>
 8009b44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009b48:	2908      	cmp	r1, #8
 8009b4a:	f63f af78 	bhi.w	8009a3e <_strtod_l+0x19e>
 8009b4e:	3a30      	subs	r2, #48	@ 0x30
 8009b50:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b54:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009b56:	f04f 080a 	mov.w	r8, #10
 8009b5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b5c:	1c56      	adds	r6, r2, #1
 8009b5e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009b60:	7852      	ldrb	r2, [r2, #1]
 8009b62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009b66:	f1be 0f09 	cmp.w	lr, #9
 8009b6a:	d939      	bls.n	8009be0 <_strtod_l+0x340>
 8009b6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009b6e:	1a76      	subs	r6, r6, r1
 8009b70:	2e08      	cmp	r6, #8
 8009b72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009b76:	dc03      	bgt.n	8009b80 <_strtod_l+0x2e0>
 8009b78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009b7a:	4588      	cmp	r8, r1
 8009b7c:	bfa8      	it	ge
 8009b7e:	4688      	movge	r8, r1
 8009b80:	f1bc 0f00 	cmp.w	ip, #0
 8009b84:	d001      	beq.n	8009b8a <_strtod_l+0x2ea>
 8009b86:	f1c8 0800 	rsb	r8, r8, #0
 8009b8a:	2d00      	cmp	r5, #0
 8009b8c:	d14e      	bne.n	8009c2c <_strtod_l+0x38c>
 8009b8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b90:	4308      	orrs	r0, r1
 8009b92:	f47f aebe 	bne.w	8009912 <_strtod_l+0x72>
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f47f aed6 	bne.w	8009948 <_strtod_l+0xa8>
 8009b9c:	2a69      	cmp	r2, #105	@ 0x69
 8009b9e:	d028      	beq.n	8009bf2 <_strtod_l+0x352>
 8009ba0:	dc25      	bgt.n	8009bee <_strtod_l+0x34e>
 8009ba2:	2a49      	cmp	r2, #73	@ 0x49
 8009ba4:	d025      	beq.n	8009bf2 <_strtod_l+0x352>
 8009ba6:	2a4e      	cmp	r2, #78	@ 0x4e
 8009ba8:	f47f aece 	bne.w	8009948 <_strtod_l+0xa8>
 8009bac:	499b      	ldr	r1, [pc, #620]	@ (8009e1c <_strtod_l+0x57c>)
 8009bae:	a819      	add	r0, sp, #100	@ 0x64
 8009bb0:	f002 fece 	bl	800c950 <__match>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	f43f aec7 	beq.w	8009948 <_strtod_l+0xa8>
 8009bba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	2b28      	cmp	r3, #40	@ 0x28
 8009bc0:	d12e      	bne.n	8009c20 <_strtod_l+0x380>
 8009bc2:	4997      	ldr	r1, [pc, #604]	@ (8009e20 <_strtod_l+0x580>)
 8009bc4:	aa1c      	add	r2, sp, #112	@ 0x70
 8009bc6:	a819      	add	r0, sp, #100	@ 0x64
 8009bc8:	f002 fed6 	bl	800c978 <__hexnan>
 8009bcc:	2805      	cmp	r0, #5
 8009bce:	d127      	bne.n	8009c20 <_strtod_l+0x380>
 8009bd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009bd2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009bd6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009bda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009bde:	e698      	b.n	8009912 <_strtod_l+0x72>
 8009be0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009be2:	fb08 2101 	mla	r1, r8, r1, r2
 8009be6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009bea:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bec:	e7b5      	b.n	8009b5a <_strtod_l+0x2ba>
 8009bee:	2a6e      	cmp	r2, #110	@ 0x6e
 8009bf0:	e7da      	b.n	8009ba8 <_strtod_l+0x308>
 8009bf2:	498c      	ldr	r1, [pc, #560]	@ (8009e24 <_strtod_l+0x584>)
 8009bf4:	a819      	add	r0, sp, #100	@ 0x64
 8009bf6:	f002 feab 	bl	800c950 <__match>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	f43f aea4 	beq.w	8009948 <_strtod_l+0xa8>
 8009c00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c02:	4989      	ldr	r1, [pc, #548]	@ (8009e28 <_strtod_l+0x588>)
 8009c04:	3b01      	subs	r3, #1
 8009c06:	a819      	add	r0, sp, #100	@ 0x64
 8009c08:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c0a:	f002 fea1 	bl	800c950 <__match>
 8009c0e:	b910      	cbnz	r0, 8009c16 <_strtod_l+0x376>
 8009c10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c12:	3301      	adds	r3, #1
 8009c14:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c16:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009e38 <_strtod_l+0x598>
 8009c1a:	f04f 0a00 	mov.w	sl, #0
 8009c1e:	e678      	b.n	8009912 <_strtod_l+0x72>
 8009c20:	4882      	ldr	r0, [pc, #520]	@ (8009e2c <_strtod_l+0x58c>)
 8009c22:	f001 fd49 	bl	800b6b8 <nan>
 8009c26:	ec5b ab10 	vmov	sl, fp, d0
 8009c2a:	e672      	b.n	8009912 <_strtod_l+0x72>
 8009c2c:	eba8 0309 	sub.w	r3, r8, r9
 8009c30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c34:	2f00      	cmp	r7, #0
 8009c36:	bf08      	it	eq
 8009c38:	462f      	moveq	r7, r5
 8009c3a:	2d10      	cmp	r5, #16
 8009c3c:	462c      	mov	r4, r5
 8009c3e:	bfa8      	it	ge
 8009c40:	2410      	movge	r4, #16
 8009c42:	f7f6 fc5f 	bl	8000504 <__aeabi_ui2d>
 8009c46:	2d09      	cmp	r5, #9
 8009c48:	4682      	mov	sl, r0
 8009c4a:	468b      	mov	fp, r1
 8009c4c:	dc13      	bgt.n	8009c76 <_strtod_l+0x3d6>
 8009c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f43f ae5e 	beq.w	8009912 <_strtod_l+0x72>
 8009c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c58:	dd78      	ble.n	8009d4c <_strtod_l+0x4ac>
 8009c5a:	2b16      	cmp	r3, #22
 8009c5c:	dc5f      	bgt.n	8009d1e <_strtod_l+0x47e>
 8009c5e:	4974      	ldr	r1, [pc, #464]	@ (8009e30 <_strtod_l+0x590>)
 8009c60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c68:	4652      	mov	r2, sl
 8009c6a:	465b      	mov	r3, fp
 8009c6c:	f7f6 fcc4 	bl	80005f8 <__aeabi_dmul>
 8009c70:	4682      	mov	sl, r0
 8009c72:	468b      	mov	fp, r1
 8009c74:	e64d      	b.n	8009912 <_strtod_l+0x72>
 8009c76:	4b6e      	ldr	r3, [pc, #440]	@ (8009e30 <_strtod_l+0x590>)
 8009c78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009c80:	f7f6 fcba 	bl	80005f8 <__aeabi_dmul>
 8009c84:	4682      	mov	sl, r0
 8009c86:	9808      	ldr	r0, [sp, #32]
 8009c88:	468b      	mov	fp, r1
 8009c8a:	f7f6 fc3b 	bl	8000504 <__aeabi_ui2d>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	460b      	mov	r3, r1
 8009c92:	4650      	mov	r0, sl
 8009c94:	4659      	mov	r1, fp
 8009c96:	f7f6 faf9 	bl	800028c <__adddf3>
 8009c9a:	2d0f      	cmp	r5, #15
 8009c9c:	4682      	mov	sl, r0
 8009c9e:	468b      	mov	fp, r1
 8009ca0:	ddd5      	ble.n	8009c4e <_strtod_l+0x3ae>
 8009ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca4:	1b2c      	subs	r4, r5, r4
 8009ca6:	441c      	add	r4, r3
 8009ca8:	2c00      	cmp	r4, #0
 8009caa:	f340 8096 	ble.w	8009dda <_strtod_l+0x53a>
 8009cae:	f014 030f 	ands.w	r3, r4, #15
 8009cb2:	d00a      	beq.n	8009cca <_strtod_l+0x42a>
 8009cb4:	495e      	ldr	r1, [pc, #376]	@ (8009e30 <_strtod_l+0x590>)
 8009cb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009cba:	4652      	mov	r2, sl
 8009cbc:	465b      	mov	r3, fp
 8009cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cc2:	f7f6 fc99 	bl	80005f8 <__aeabi_dmul>
 8009cc6:	4682      	mov	sl, r0
 8009cc8:	468b      	mov	fp, r1
 8009cca:	f034 040f 	bics.w	r4, r4, #15
 8009cce:	d073      	beq.n	8009db8 <_strtod_l+0x518>
 8009cd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009cd4:	dd48      	ble.n	8009d68 <_strtod_l+0x4c8>
 8009cd6:	2400      	movs	r4, #0
 8009cd8:	46a0      	mov	r8, r4
 8009cda:	940a      	str	r4, [sp, #40]	@ 0x28
 8009cdc:	46a1      	mov	r9, r4
 8009cde:	9a05      	ldr	r2, [sp, #20]
 8009ce0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009e38 <_strtod_l+0x598>
 8009ce4:	2322      	movs	r3, #34	@ 0x22
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	f04f 0a00 	mov.w	sl, #0
 8009cec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f43f ae0f 	beq.w	8009912 <_strtod_l+0x72>
 8009cf4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cf6:	9805      	ldr	r0, [sp, #20]
 8009cf8:	f002 ffe2 	bl	800ccc0 <_Bfree>
 8009cfc:	9805      	ldr	r0, [sp, #20]
 8009cfe:	4649      	mov	r1, r9
 8009d00:	f002 ffde 	bl	800ccc0 <_Bfree>
 8009d04:	9805      	ldr	r0, [sp, #20]
 8009d06:	4641      	mov	r1, r8
 8009d08:	f002 ffda 	bl	800ccc0 <_Bfree>
 8009d0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d0e:	9805      	ldr	r0, [sp, #20]
 8009d10:	f002 ffd6 	bl	800ccc0 <_Bfree>
 8009d14:	9805      	ldr	r0, [sp, #20]
 8009d16:	4621      	mov	r1, r4
 8009d18:	f002 ffd2 	bl	800ccc0 <_Bfree>
 8009d1c:	e5f9      	b.n	8009912 <_strtod_l+0x72>
 8009d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009d24:	4293      	cmp	r3, r2
 8009d26:	dbbc      	blt.n	8009ca2 <_strtod_l+0x402>
 8009d28:	4c41      	ldr	r4, [pc, #260]	@ (8009e30 <_strtod_l+0x590>)
 8009d2a:	f1c5 050f 	rsb	r5, r5, #15
 8009d2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009d32:	4652      	mov	r2, sl
 8009d34:	465b      	mov	r3, fp
 8009d36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d3a:	f7f6 fc5d 	bl	80005f8 <__aeabi_dmul>
 8009d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d40:	1b5d      	subs	r5, r3, r5
 8009d42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009d46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009d4a:	e78f      	b.n	8009c6c <_strtod_l+0x3cc>
 8009d4c:	3316      	adds	r3, #22
 8009d4e:	dba8      	blt.n	8009ca2 <_strtod_l+0x402>
 8009d50:	4b37      	ldr	r3, [pc, #220]	@ (8009e30 <_strtod_l+0x590>)
 8009d52:	eba9 0808 	sub.w	r8, r9, r8
 8009d56:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009d5a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009d5e:	4650      	mov	r0, sl
 8009d60:	4659      	mov	r1, fp
 8009d62:	f7f6 fd73 	bl	800084c <__aeabi_ddiv>
 8009d66:	e783      	b.n	8009c70 <_strtod_l+0x3d0>
 8009d68:	4b32      	ldr	r3, [pc, #200]	@ (8009e34 <_strtod_l+0x594>)
 8009d6a:	9308      	str	r3, [sp, #32]
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	1124      	asrs	r4, r4, #4
 8009d70:	4650      	mov	r0, sl
 8009d72:	4659      	mov	r1, fp
 8009d74:	461e      	mov	r6, r3
 8009d76:	2c01      	cmp	r4, #1
 8009d78:	dc21      	bgt.n	8009dbe <_strtod_l+0x51e>
 8009d7a:	b10b      	cbz	r3, 8009d80 <_strtod_l+0x4e0>
 8009d7c:	4682      	mov	sl, r0
 8009d7e:	468b      	mov	fp, r1
 8009d80:	492c      	ldr	r1, [pc, #176]	@ (8009e34 <_strtod_l+0x594>)
 8009d82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009d86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009d8a:	4652      	mov	r2, sl
 8009d8c:	465b      	mov	r3, fp
 8009d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d92:	f7f6 fc31 	bl	80005f8 <__aeabi_dmul>
 8009d96:	4b28      	ldr	r3, [pc, #160]	@ (8009e38 <_strtod_l+0x598>)
 8009d98:	460a      	mov	r2, r1
 8009d9a:	400b      	ands	r3, r1
 8009d9c:	4927      	ldr	r1, [pc, #156]	@ (8009e3c <_strtod_l+0x59c>)
 8009d9e:	428b      	cmp	r3, r1
 8009da0:	4682      	mov	sl, r0
 8009da2:	d898      	bhi.n	8009cd6 <_strtod_l+0x436>
 8009da4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009da8:	428b      	cmp	r3, r1
 8009daa:	bf86      	itte	hi
 8009dac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009e40 <_strtod_l+0x5a0>
 8009db0:	f04f 3aff 	movhi.w	sl, #4294967295
 8009db4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009db8:	2300      	movs	r3, #0
 8009dba:	9308      	str	r3, [sp, #32]
 8009dbc:	e07a      	b.n	8009eb4 <_strtod_l+0x614>
 8009dbe:	07e2      	lsls	r2, r4, #31
 8009dc0:	d505      	bpl.n	8009dce <_strtod_l+0x52e>
 8009dc2:	9b08      	ldr	r3, [sp, #32]
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	f7f6 fc16 	bl	80005f8 <__aeabi_dmul>
 8009dcc:	2301      	movs	r3, #1
 8009dce:	9a08      	ldr	r2, [sp, #32]
 8009dd0:	3208      	adds	r2, #8
 8009dd2:	3601      	adds	r6, #1
 8009dd4:	1064      	asrs	r4, r4, #1
 8009dd6:	9208      	str	r2, [sp, #32]
 8009dd8:	e7cd      	b.n	8009d76 <_strtod_l+0x4d6>
 8009dda:	d0ed      	beq.n	8009db8 <_strtod_l+0x518>
 8009ddc:	4264      	negs	r4, r4
 8009dde:	f014 020f 	ands.w	r2, r4, #15
 8009de2:	d00a      	beq.n	8009dfa <_strtod_l+0x55a>
 8009de4:	4b12      	ldr	r3, [pc, #72]	@ (8009e30 <_strtod_l+0x590>)
 8009de6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dea:	4650      	mov	r0, sl
 8009dec:	4659      	mov	r1, fp
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	f7f6 fd2b 	bl	800084c <__aeabi_ddiv>
 8009df6:	4682      	mov	sl, r0
 8009df8:	468b      	mov	fp, r1
 8009dfa:	1124      	asrs	r4, r4, #4
 8009dfc:	d0dc      	beq.n	8009db8 <_strtod_l+0x518>
 8009dfe:	2c1f      	cmp	r4, #31
 8009e00:	dd20      	ble.n	8009e44 <_strtod_l+0x5a4>
 8009e02:	2400      	movs	r4, #0
 8009e04:	46a0      	mov	r8, r4
 8009e06:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e08:	46a1      	mov	r9, r4
 8009e0a:	9a05      	ldr	r2, [sp, #20]
 8009e0c:	2322      	movs	r3, #34	@ 0x22
 8009e0e:	f04f 0a00 	mov.w	sl, #0
 8009e12:	f04f 0b00 	mov.w	fp, #0
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	e768      	b.n	8009cec <_strtod_l+0x44c>
 8009e1a:	bf00      	nop
 8009e1c:	0800fdbe 	.word	0x0800fdbe
 8009e20:	0800fc5c 	.word	0x0800fc5c
 8009e24:	0800fdb6 	.word	0x0800fdb6
 8009e28:	0800fea2 	.word	0x0800fea2
 8009e2c:	0800fe9e 	.word	0x0800fe9e
 8009e30:	08010008 	.word	0x08010008
 8009e34:	0800ffe0 	.word	0x0800ffe0
 8009e38:	7ff00000 	.word	0x7ff00000
 8009e3c:	7ca00000 	.word	0x7ca00000
 8009e40:	7fefffff 	.word	0x7fefffff
 8009e44:	f014 0310 	ands.w	r3, r4, #16
 8009e48:	bf18      	it	ne
 8009e4a:	236a      	movne	r3, #106	@ 0x6a
 8009e4c:	4ea9      	ldr	r6, [pc, #676]	@ (800a0f4 <_strtod_l+0x854>)
 8009e4e:	9308      	str	r3, [sp, #32]
 8009e50:	4650      	mov	r0, sl
 8009e52:	4659      	mov	r1, fp
 8009e54:	2300      	movs	r3, #0
 8009e56:	07e2      	lsls	r2, r4, #31
 8009e58:	d504      	bpl.n	8009e64 <_strtod_l+0x5c4>
 8009e5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e5e:	f7f6 fbcb 	bl	80005f8 <__aeabi_dmul>
 8009e62:	2301      	movs	r3, #1
 8009e64:	1064      	asrs	r4, r4, #1
 8009e66:	f106 0608 	add.w	r6, r6, #8
 8009e6a:	d1f4      	bne.n	8009e56 <_strtod_l+0x5b6>
 8009e6c:	b10b      	cbz	r3, 8009e72 <_strtod_l+0x5d2>
 8009e6e:	4682      	mov	sl, r0
 8009e70:	468b      	mov	fp, r1
 8009e72:	9b08      	ldr	r3, [sp, #32]
 8009e74:	b1b3      	cbz	r3, 8009ea4 <_strtod_l+0x604>
 8009e76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009e7a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	4659      	mov	r1, fp
 8009e82:	dd0f      	ble.n	8009ea4 <_strtod_l+0x604>
 8009e84:	2b1f      	cmp	r3, #31
 8009e86:	dd55      	ble.n	8009f34 <_strtod_l+0x694>
 8009e88:	2b34      	cmp	r3, #52	@ 0x34
 8009e8a:	bfde      	ittt	le
 8009e8c:	f04f 33ff 	movle.w	r3, #4294967295
 8009e90:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009e94:	4093      	lslle	r3, r2
 8009e96:	f04f 0a00 	mov.w	sl, #0
 8009e9a:	bfcc      	ite	gt
 8009e9c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009ea0:	ea03 0b01 	andle.w	fp, r3, r1
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	4650      	mov	r0, sl
 8009eaa:	4659      	mov	r1, fp
 8009eac:	f7f6 fe0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d1a6      	bne.n	8009e02 <_strtod_l+0x562>
 8009eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009eba:	9805      	ldr	r0, [sp, #20]
 8009ebc:	462b      	mov	r3, r5
 8009ebe:	463a      	mov	r2, r7
 8009ec0:	f002 ff66 	bl	800cd90 <__s2b>
 8009ec4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	f43f af05 	beq.w	8009cd6 <_strtod_l+0x436>
 8009ecc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ece:	2a00      	cmp	r2, #0
 8009ed0:	eba9 0308 	sub.w	r3, r9, r8
 8009ed4:	bfa8      	it	ge
 8009ed6:	2300      	movge	r3, #0
 8009ed8:	9312      	str	r3, [sp, #72]	@ 0x48
 8009eda:	2400      	movs	r4, #0
 8009edc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009ee0:	9316      	str	r3, [sp, #88]	@ 0x58
 8009ee2:	46a0      	mov	r8, r4
 8009ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ee6:	9805      	ldr	r0, [sp, #20]
 8009ee8:	6859      	ldr	r1, [r3, #4]
 8009eea:	f002 fea9 	bl	800cc40 <_Balloc>
 8009eee:	4681      	mov	r9, r0
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	f43f aef4 	beq.w	8009cde <_strtod_l+0x43e>
 8009ef6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ef8:	691a      	ldr	r2, [r3, #16]
 8009efa:	3202      	adds	r2, #2
 8009efc:	f103 010c 	add.w	r1, r3, #12
 8009f00:	0092      	lsls	r2, r2, #2
 8009f02:	300c      	adds	r0, #12
 8009f04:	f001 fbc7 	bl	800b696 <memcpy>
 8009f08:	ec4b ab10 	vmov	d0, sl, fp
 8009f0c:	9805      	ldr	r0, [sp, #20]
 8009f0e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009f10:	a91b      	add	r1, sp, #108	@ 0x6c
 8009f12:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009f16:	f003 fa77 	bl	800d408 <__d2b>
 8009f1a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	f43f aede 	beq.w	8009cde <_strtod_l+0x43e>
 8009f22:	9805      	ldr	r0, [sp, #20]
 8009f24:	2101      	movs	r1, #1
 8009f26:	f002 ffc9 	bl	800cebc <__i2b>
 8009f2a:	4680      	mov	r8, r0
 8009f2c:	b948      	cbnz	r0, 8009f42 <_strtod_l+0x6a2>
 8009f2e:	f04f 0800 	mov.w	r8, #0
 8009f32:	e6d4      	b.n	8009cde <_strtod_l+0x43e>
 8009f34:	f04f 32ff 	mov.w	r2, #4294967295
 8009f38:	fa02 f303 	lsl.w	r3, r2, r3
 8009f3c:	ea03 0a0a 	and.w	sl, r3, sl
 8009f40:	e7b0      	b.n	8009ea4 <_strtod_l+0x604>
 8009f42:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009f44:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009f46:	2d00      	cmp	r5, #0
 8009f48:	bfab      	itete	ge
 8009f4a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009f4c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009f4e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009f50:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009f52:	bfac      	ite	ge
 8009f54:	18ef      	addge	r7, r5, r3
 8009f56:	1b5e      	sublt	r6, r3, r5
 8009f58:	9b08      	ldr	r3, [sp, #32]
 8009f5a:	1aed      	subs	r5, r5, r3
 8009f5c:	4415      	add	r5, r2
 8009f5e:	4b66      	ldr	r3, [pc, #408]	@ (800a0f8 <_strtod_l+0x858>)
 8009f60:	3d01      	subs	r5, #1
 8009f62:	429d      	cmp	r5, r3
 8009f64:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009f68:	da50      	bge.n	800a00c <_strtod_l+0x76c>
 8009f6a:	1b5b      	subs	r3, r3, r5
 8009f6c:	2b1f      	cmp	r3, #31
 8009f6e:	eba2 0203 	sub.w	r2, r2, r3
 8009f72:	f04f 0101 	mov.w	r1, #1
 8009f76:	dc3d      	bgt.n	8009ff4 <_strtod_l+0x754>
 8009f78:	fa01 f303 	lsl.w	r3, r1, r3
 8009f7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f7e:	2300      	movs	r3, #0
 8009f80:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f82:	18bd      	adds	r5, r7, r2
 8009f84:	9b08      	ldr	r3, [sp, #32]
 8009f86:	42af      	cmp	r7, r5
 8009f88:	4416      	add	r6, r2
 8009f8a:	441e      	add	r6, r3
 8009f8c:	463b      	mov	r3, r7
 8009f8e:	bfa8      	it	ge
 8009f90:	462b      	movge	r3, r5
 8009f92:	42b3      	cmp	r3, r6
 8009f94:	bfa8      	it	ge
 8009f96:	4633      	movge	r3, r6
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	bfc2      	ittt	gt
 8009f9c:	1aed      	subgt	r5, r5, r3
 8009f9e:	1af6      	subgt	r6, r6, r3
 8009fa0:	1aff      	subgt	r7, r7, r3
 8009fa2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	dd16      	ble.n	8009fd6 <_strtod_l+0x736>
 8009fa8:	4641      	mov	r1, r8
 8009faa:	9805      	ldr	r0, [sp, #20]
 8009fac:	461a      	mov	r2, r3
 8009fae:	f003 f845 	bl	800d03c <__pow5mult>
 8009fb2:	4680      	mov	r8, r0
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d0ba      	beq.n	8009f2e <_strtod_l+0x68e>
 8009fb8:	4601      	mov	r1, r0
 8009fba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009fbc:	9805      	ldr	r0, [sp, #20]
 8009fbe:	f002 ff93 	bl	800cee8 <__multiply>
 8009fc2:	900e      	str	r0, [sp, #56]	@ 0x38
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	f43f ae8a 	beq.w	8009cde <_strtod_l+0x43e>
 8009fca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009fcc:	9805      	ldr	r0, [sp, #20]
 8009fce:	f002 fe77 	bl	800ccc0 <_Bfree>
 8009fd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fd6:	2d00      	cmp	r5, #0
 8009fd8:	dc1d      	bgt.n	800a016 <_strtod_l+0x776>
 8009fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	dd23      	ble.n	800a028 <_strtod_l+0x788>
 8009fe0:	4649      	mov	r1, r9
 8009fe2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009fe4:	9805      	ldr	r0, [sp, #20]
 8009fe6:	f003 f829 	bl	800d03c <__pow5mult>
 8009fea:	4681      	mov	r9, r0
 8009fec:	b9e0      	cbnz	r0, 800a028 <_strtod_l+0x788>
 8009fee:	f04f 0900 	mov.w	r9, #0
 8009ff2:	e674      	b.n	8009cde <_strtod_l+0x43e>
 8009ff4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009ff8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009ffc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a000:	35e2      	adds	r5, #226	@ 0xe2
 800a002:	fa01 f305 	lsl.w	r3, r1, r5
 800a006:	9310      	str	r3, [sp, #64]	@ 0x40
 800a008:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a00a:	e7ba      	b.n	8009f82 <_strtod_l+0x6e2>
 800a00c:	2300      	movs	r3, #0
 800a00e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a010:	2301      	movs	r3, #1
 800a012:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a014:	e7b5      	b.n	8009f82 <_strtod_l+0x6e2>
 800a016:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a018:	9805      	ldr	r0, [sp, #20]
 800a01a:	462a      	mov	r2, r5
 800a01c:	f003 f868 	bl	800d0f0 <__lshift>
 800a020:	901a      	str	r0, [sp, #104]	@ 0x68
 800a022:	2800      	cmp	r0, #0
 800a024:	d1d9      	bne.n	8009fda <_strtod_l+0x73a>
 800a026:	e65a      	b.n	8009cde <_strtod_l+0x43e>
 800a028:	2e00      	cmp	r6, #0
 800a02a:	dd07      	ble.n	800a03c <_strtod_l+0x79c>
 800a02c:	4649      	mov	r1, r9
 800a02e:	9805      	ldr	r0, [sp, #20]
 800a030:	4632      	mov	r2, r6
 800a032:	f003 f85d 	bl	800d0f0 <__lshift>
 800a036:	4681      	mov	r9, r0
 800a038:	2800      	cmp	r0, #0
 800a03a:	d0d8      	beq.n	8009fee <_strtod_l+0x74e>
 800a03c:	2f00      	cmp	r7, #0
 800a03e:	dd08      	ble.n	800a052 <_strtod_l+0x7b2>
 800a040:	4641      	mov	r1, r8
 800a042:	9805      	ldr	r0, [sp, #20]
 800a044:	463a      	mov	r2, r7
 800a046:	f003 f853 	bl	800d0f0 <__lshift>
 800a04a:	4680      	mov	r8, r0
 800a04c:	2800      	cmp	r0, #0
 800a04e:	f43f ae46 	beq.w	8009cde <_strtod_l+0x43e>
 800a052:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a054:	9805      	ldr	r0, [sp, #20]
 800a056:	464a      	mov	r2, r9
 800a058:	f003 f8d2 	bl	800d200 <__mdiff>
 800a05c:	4604      	mov	r4, r0
 800a05e:	2800      	cmp	r0, #0
 800a060:	f43f ae3d 	beq.w	8009cde <_strtod_l+0x43e>
 800a064:	68c3      	ldr	r3, [r0, #12]
 800a066:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a068:	2300      	movs	r3, #0
 800a06a:	60c3      	str	r3, [r0, #12]
 800a06c:	4641      	mov	r1, r8
 800a06e:	f003 f8ab 	bl	800d1c8 <__mcmp>
 800a072:	2800      	cmp	r0, #0
 800a074:	da46      	bge.n	800a104 <_strtod_l+0x864>
 800a076:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a078:	ea53 030a 	orrs.w	r3, r3, sl
 800a07c:	d16c      	bne.n	800a158 <_strtod_l+0x8b8>
 800a07e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a082:	2b00      	cmp	r3, #0
 800a084:	d168      	bne.n	800a158 <_strtod_l+0x8b8>
 800a086:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a08a:	0d1b      	lsrs	r3, r3, #20
 800a08c:	051b      	lsls	r3, r3, #20
 800a08e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a092:	d961      	bls.n	800a158 <_strtod_l+0x8b8>
 800a094:	6963      	ldr	r3, [r4, #20]
 800a096:	b913      	cbnz	r3, 800a09e <_strtod_l+0x7fe>
 800a098:	6923      	ldr	r3, [r4, #16]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	dd5c      	ble.n	800a158 <_strtod_l+0x8b8>
 800a09e:	4621      	mov	r1, r4
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	9805      	ldr	r0, [sp, #20]
 800a0a4:	f003 f824 	bl	800d0f0 <__lshift>
 800a0a8:	4641      	mov	r1, r8
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	f003 f88c 	bl	800d1c8 <__mcmp>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	dd51      	ble.n	800a158 <_strtod_l+0x8b8>
 800a0b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a0b8:	9a08      	ldr	r2, [sp, #32]
 800a0ba:	0d1b      	lsrs	r3, r3, #20
 800a0bc:	051b      	lsls	r3, r3, #20
 800a0be:	2a00      	cmp	r2, #0
 800a0c0:	d06b      	beq.n	800a19a <_strtod_l+0x8fa>
 800a0c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a0c6:	d868      	bhi.n	800a19a <_strtod_l+0x8fa>
 800a0c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a0cc:	f67f ae9d 	bls.w	8009e0a <_strtod_l+0x56a>
 800a0d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a0fc <_strtod_l+0x85c>)
 800a0d2:	4650      	mov	r0, sl
 800a0d4:	4659      	mov	r1, fp
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f7f6 fa8e 	bl	80005f8 <__aeabi_dmul>
 800a0dc:	4b08      	ldr	r3, [pc, #32]	@ (800a100 <_strtod_l+0x860>)
 800a0de:	400b      	ands	r3, r1
 800a0e0:	4682      	mov	sl, r0
 800a0e2:	468b      	mov	fp, r1
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f47f ae05 	bne.w	8009cf4 <_strtod_l+0x454>
 800a0ea:	9a05      	ldr	r2, [sp, #20]
 800a0ec:	2322      	movs	r3, #34	@ 0x22
 800a0ee:	6013      	str	r3, [r2, #0]
 800a0f0:	e600      	b.n	8009cf4 <_strtod_l+0x454>
 800a0f2:	bf00      	nop
 800a0f4:	0800fc88 	.word	0x0800fc88
 800a0f8:	fffffc02 	.word	0xfffffc02
 800a0fc:	39500000 	.word	0x39500000
 800a100:	7ff00000 	.word	0x7ff00000
 800a104:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a108:	d165      	bne.n	800a1d6 <_strtod_l+0x936>
 800a10a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a10c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a110:	b35a      	cbz	r2, 800a16a <_strtod_l+0x8ca>
 800a112:	4a9f      	ldr	r2, [pc, #636]	@ (800a390 <_strtod_l+0xaf0>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d12b      	bne.n	800a170 <_strtod_l+0x8d0>
 800a118:	9b08      	ldr	r3, [sp, #32]
 800a11a:	4651      	mov	r1, sl
 800a11c:	b303      	cbz	r3, 800a160 <_strtod_l+0x8c0>
 800a11e:	4b9d      	ldr	r3, [pc, #628]	@ (800a394 <_strtod_l+0xaf4>)
 800a120:	465a      	mov	r2, fp
 800a122:	4013      	ands	r3, r2
 800a124:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a128:	f04f 32ff 	mov.w	r2, #4294967295
 800a12c:	d81b      	bhi.n	800a166 <_strtod_l+0x8c6>
 800a12e:	0d1b      	lsrs	r3, r3, #20
 800a130:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a134:	fa02 f303 	lsl.w	r3, r2, r3
 800a138:	4299      	cmp	r1, r3
 800a13a:	d119      	bne.n	800a170 <_strtod_l+0x8d0>
 800a13c:	4b96      	ldr	r3, [pc, #600]	@ (800a398 <_strtod_l+0xaf8>)
 800a13e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a140:	429a      	cmp	r2, r3
 800a142:	d102      	bne.n	800a14a <_strtod_l+0x8aa>
 800a144:	3101      	adds	r1, #1
 800a146:	f43f adca 	beq.w	8009cde <_strtod_l+0x43e>
 800a14a:	4b92      	ldr	r3, [pc, #584]	@ (800a394 <_strtod_l+0xaf4>)
 800a14c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a14e:	401a      	ands	r2, r3
 800a150:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a154:	f04f 0a00 	mov.w	sl, #0
 800a158:	9b08      	ldr	r3, [sp, #32]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1b8      	bne.n	800a0d0 <_strtod_l+0x830>
 800a15e:	e5c9      	b.n	8009cf4 <_strtod_l+0x454>
 800a160:	f04f 33ff 	mov.w	r3, #4294967295
 800a164:	e7e8      	b.n	800a138 <_strtod_l+0x898>
 800a166:	4613      	mov	r3, r2
 800a168:	e7e6      	b.n	800a138 <_strtod_l+0x898>
 800a16a:	ea53 030a 	orrs.w	r3, r3, sl
 800a16e:	d0a1      	beq.n	800a0b4 <_strtod_l+0x814>
 800a170:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a172:	b1db      	cbz	r3, 800a1ac <_strtod_l+0x90c>
 800a174:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a176:	4213      	tst	r3, r2
 800a178:	d0ee      	beq.n	800a158 <_strtod_l+0x8b8>
 800a17a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a17c:	9a08      	ldr	r2, [sp, #32]
 800a17e:	4650      	mov	r0, sl
 800a180:	4659      	mov	r1, fp
 800a182:	b1bb      	cbz	r3, 800a1b4 <_strtod_l+0x914>
 800a184:	f7ff fb6b 	bl	800985e <sulp>
 800a188:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a18c:	ec53 2b10 	vmov	r2, r3, d0
 800a190:	f7f6 f87c 	bl	800028c <__adddf3>
 800a194:	4682      	mov	sl, r0
 800a196:	468b      	mov	fp, r1
 800a198:	e7de      	b.n	800a158 <_strtod_l+0x8b8>
 800a19a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a19e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a1a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a1a6:	f04f 3aff 	mov.w	sl, #4294967295
 800a1aa:	e7d5      	b.n	800a158 <_strtod_l+0x8b8>
 800a1ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a1ae:	ea13 0f0a 	tst.w	r3, sl
 800a1b2:	e7e1      	b.n	800a178 <_strtod_l+0x8d8>
 800a1b4:	f7ff fb53 	bl	800985e <sulp>
 800a1b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1bc:	ec53 2b10 	vmov	r2, r3, d0
 800a1c0:	f7f6 f862 	bl	8000288 <__aeabi_dsub>
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	4682      	mov	sl, r0
 800a1ca:	468b      	mov	fp, r1
 800a1cc:	f7f6 fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d0c1      	beq.n	800a158 <_strtod_l+0x8b8>
 800a1d4:	e619      	b.n	8009e0a <_strtod_l+0x56a>
 800a1d6:	4641      	mov	r1, r8
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f003 f96d 	bl	800d4b8 <__ratio>
 800a1de:	ec57 6b10 	vmov	r6, r7, d0
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	4639      	mov	r1, r7
 800a1ec:	f7f6 fc80 	bl	8000af0 <__aeabi_dcmple>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d06f      	beq.n	800a2d4 <_strtod_l+0xa34>
 800a1f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d17a      	bne.n	800a2f0 <_strtod_l+0xa50>
 800a1fa:	f1ba 0f00 	cmp.w	sl, #0
 800a1fe:	d158      	bne.n	800a2b2 <_strtod_l+0xa12>
 800a200:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a202:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a206:	2b00      	cmp	r3, #0
 800a208:	d15a      	bne.n	800a2c0 <_strtod_l+0xa20>
 800a20a:	4b64      	ldr	r3, [pc, #400]	@ (800a39c <_strtod_l+0xafc>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	4630      	mov	r0, r6
 800a210:	4639      	mov	r1, r7
 800a212:	f7f6 fc63 	bl	8000adc <__aeabi_dcmplt>
 800a216:	2800      	cmp	r0, #0
 800a218:	d159      	bne.n	800a2ce <_strtod_l+0xa2e>
 800a21a:	4630      	mov	r0, r6
 800a21c:	4639      	mov	r1, r7
 800a21e:	4b60      	ldr	r3, [pc, #384]	@ (800a3a0 <_strtod_l+0xb00>)
 800a220:	2200      	movs	r2, #0
 800a222:	f7f6 f9e9 	bl	80005f8 <__aeabi_dmul>
 800a226:	4606      	mov	r6, r0
 800a228:	460f      	mov	r7, r1
 800a22a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a22e:	9606      	str	r6, [sp, #24]
 800a230:	9307      	str	r3, [sp, #28]
 800a232:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a236:	4d57      	ldr	r5, [pc, #348]	@ (800a394 <_strtod_l+0xaf4>)
 800a238:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a23c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a23e:	401d      	ands	r5, r3
 800a240:	4b58      	ldr	r3, [pc, #352]	@ (800a3a4 <_strtod_l+0xb04>)
 800a242:	429d      	cmp	r5, r3
 800a244:	f040 80b2 	bne.w	800a3ac <_strtod_l+0xb0c>
 800a248:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a24a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a24e:	ec4b ab10 	vmov	d0, sl, fp
 800a252:	f003 f869 	bl	800d328 <__ulp>
 800a256:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a25a:	ec51 0b10 	vmov	r0, r1, d0
 800a25e:	f7f6 f9cb 	bl	80005f8 <__aeabi_dmul>
 800a262:	4652      	mov	r2, sl
 800a264:	465b      	mov	r3, fp
 800a266:	f7f6 f811 	bl	800028c <__adddf3>
 800a26a:	460b      	mov	r3, r1
 800a26c:	4949      	ldr	r1, [pc, #292]	@ (800a394 <_strtod_l+0xaf4>)
 800a26e:	4a4e      	ldr	r2, [pc, #312]	@ (800a3a8 <_strtod_l+0xb08>)
 800a270:	4019      	ands	r1, r3
 800a272:	4291      	cmp	r1, r2
 800a274:	4682      	mov	sl, r0
 800a276:	d942      	bls.n	800a2fe <_strtod_l+0xa5e>
 800a278:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a27a:	4b47      	ldr	r3, [pc, #284]	@ (800a398 <_strtod_l+0xaf8>)
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d103      	bne.n	800a288 <_strtod_l+0x9e8>
 800a280:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a282:	3301      	adds	r3, #1
 800a284:	f43f ad2b 	beq.w	8009cde <_strtod_l+0x43e>
 800a288:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a398 <_strtod_l+0xaf8>
 800a28c:	f04f 3aff 	mov.w	sl, #4294967295
 800a290:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a292:	9805      	ldr	r0, [sp, #20]
 800a294:	f002 fd14 	bl	800ccc0 <_Bfree>
 800a298:	9805      	ldr	r0, [sp, #20]
 800a29a:	4649      	mov	r1, r9
 800a29c:	f002 fd10 	bl	800ccc0 <_Bfree>
 800a2a0:	9805      	ldr	r0, [sp, #20]
 800a2a2:	4641      	mov	r1, r8
 800a2a4:	f002 fd0c 	bl	800ccc0 <_Bfree>
 800a2a8:	9805      	ldr	r0, [sp, #20]
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	f002 fd08 	bl	800ccc0 <_Bfree>
 800a2b0:	e618      	b.n	8009ee4 <_strtod_l+0x644>
 800a2b2:	f1ba 0f01 	cmp.w	sl, #1
 800a2b6:	d103      	bne.n	800a2c0 <_strtod_l+0xa20>
 800a2b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f43f ada5 	beq.w	8009e0a <_strtod_l+0x56a>
 800a2c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a370 <_strtod_l+0xad0>
 800a2c4:	4f35      	ldr	r7, [pc, #212]	@ (800a39c <_strtod_l+0xafc>)
 800a2c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a2ca:	2600      	movs	r6, #0
 800a2cc:	e7b1      	b.n	800a232 <_strtod_l+0x992>
 800a2ce:	4f34      	ldr	r7, [pc, #208]	@ (800a3a0 <_strtod_l+0xb00>)
 800a2d0:	2600      	movs	r6, #0
 800a2d2:	e7aa      	b.n	800a22a <_strtod_l+0x98a>
 800a2d4:	4b32      	ldr	r3, [pc, #200]	@ (800a3a0 <_strtod_l+0xb00>)
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	4639      	mov	r1, r7
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f7f6 f98c 	bl	80005f8 <__aeabi_dmul>
 800a2e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	460f      	mov	r7, r1
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d09f      	beq.n	800a22a <_strtod_l+0x98a>
 800a2ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a2ee:	e7a0      	b.n	800a232 <_strtod_l+0x992>
 800a2f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a378 <_strtod_l+0xad8>
 800a2f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a2f8:	ec57 6b17 	vmov	r6, r7, d7
 800a2fc:	e799      	b.n	800a232 <_strtod_l+0x992>
 800a2fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a302:	9b08      	ldr	r3, [sp, #32]
 800a304:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1c1      	bne.n	800a290 <_strtod_l+0x9f0>
 800a30c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a310:	0d1b      	lsrs	r3, r3, #20
 800a312:	051b      	lsls	r3, r3, #20
 800a314:	429d      	cmp	r5, r3
 800a316:	d1bb      	bne.n	800a290 <_strtod_l+0x9f0>
 800a318:	4630      	mov	r0, r6
 800a31a:	4639      	mov	r1, r7
 800a31c:	f7f6 fccc 	bl	8000cb8 <__aeabi_d2lz>
 800a320:	f7f6 f93c 	bl	800059c <__aeabi_l2d>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	4630      	mov	r0, r6
 800a32a:	4639      	mov	r1, r7
 800a32c:	f7f5 ffac 	bl	8000288 <__aeabi_dsub>
 800a330:	460b      	mov	r3, r1
 800a332:	4602      	mov	r2, r0
 800a334:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a338:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a33c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a33e:	ea46 060a 	orr.w	r6, r6, sl
 800a342:	431e      	orrs	r6, r3
 800a344:	d06f      	beq.n	800a426 <_strtod_l+0xb86>
 800a346:	a30e      	add	r3, pc, #56	@ (adr r3, 800a380 <_strtod_l+0xae0>)
 800a348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34c:	f7f6 fbc6 	bl	8000adc <__aeabi_dcmplt>
 800a350:	2800      	cmp	r0, #0
 800a352:	f47f accf 	bne.w	8009cf4 <_strtod_l+0x454>
 800a356:	a30c      	add	r3, pc, #48	@ (adr r3, 800a388 <_strtod_l+0xae8>)
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a360:	f7f6 fbda 	bl	8000b18 <__aeabi_dcmpgt>
 800a364:	2800      	cmp	r0, #0
 800a366:	d093      	beq.n	800a290 <_strtod_l+0x9f0>
 800a368:	e4c4      	b.n	8009cf4 <_strtod_l+0x454>
 800a36a:	bf00      	nop
 800a36c:	f3af 8000 	nop.w
 800a370:	00000000 	.word	0x00000000
 800a374:	bff00000 	.word	0xbff00000
 800a378:	00000000 	.word	0x00000000
 800a37c:	3ff00000 	.word	0x3ff00000
 800a380:	94a03595 	.word	0x94a03595
 800a384:	3fdfffff 	.word	0x3fdfffff
 800a388:	35afe535 	.word	0x35afe535
 800a38c:	3fe00000 	.word	0x3fe00000
 800a390:	000fffff 	.word	0x000fffff
 800a394:	7ff00000 	.word	0x7ff00000
 800a398:	7fefffff 	.word	0x7fefffff
 800a39c:	3ff00000 	.word	0x3ff00000
 800a3a0:	3fe00000 	.word	0x3fe00000
 800a3a4:	7fe00000 	.word	0x7fe00000
 800a3a8:	7c9fffff 	.word	0x7c9fffff
 800a3ac:	9b08      	ldr	r3, [sp, #32]
 800a3ae:	b323      	cbz	r3, 800a3fa <_strtod_l+0xb5a>
 800a3b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a3b4:	d821      	bhi.n	800a3fa <_strtod_l+0xb5a>
 800a3b6:	a328      	add	r3, pc, #160	@ (adr r3, 800a458 <_strtod_l+0xbb8>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	4630      	mov	r0, r6
 800a3be:	4639      	mov	r1, r7
 800a3c0:	f7f6 fb96 	bl	8000af0 <__aeabi_dcmple>
 800a3c4:	b1a0      	cbz	r0, 800a3f0 <_strtod_l+0xb50>
 800a3c6:	4639      	mov	r1, r7
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	f7f6 fbed 	bl	8000ba8 <__aeabi_d2uiz>
 800a3ce:	2801      	cmp	r0, #1
 800a3d0:	bf38      	it	cc
 800a3d2:	2001      	movcc	r0, #1
 800a3d4:	f7f6 f896 	bl	8000504 <__aeabi_ui2d>
 800a3d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3da:	4606      	mov	r6, r0
 800a3dc:	460f      	mov	r7, r1
 800a3de:	b9fb      	cbnz	r3, 800a420 <_strtod_l+0xb80>
 800a3e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a3e4:	9014      	str	r0, [sp, #80]	@ 0x50
 800a3e6:	9315      	str	r3, [sp, #84]	@ 0x54
 800a3e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a3ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a3f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a3f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a3f6:	1b5b      	subs	r3, r3, r5
 800a3f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a3fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a3fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a402:	f002 ff91 	bl	800d328 <__ulp>
 800a406:	4650      	mov	r0, sl
 800a408:	ec53 2b10 	vmov	r2, r3, d0
 800a40c:	4659      	mov	r1, fp
 800a40e:	f7f6 f8f3 	bl	80005f8 <__aeabi_dmul>
 800a412:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a416:	f7f5 ff39 	bl	800028c <__adddf3>
 800a41a:	4682      	mov	sl, r0
 800a41c:	468b      	mov	fp, r1
 800a41e:	e770      	b.n	800a302 <_strtod_l+0xa62>
 800a420:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a424:	e7e0      	b.n	800a3e8 <_strtod_l+0xb48>
 800a426:	a30e      	add	r3, pc, #56	@ (adr r3, 800a460 <_strtod_l+0xbc0>)
 800a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42c:	f7f6 fb56 	bl	8000adc <__aeabi_dcmplt>
 800a430:	e798      	b.n	800a364 <_strtod_l+0xac4>
 800a432:	2300      	movs	r3, #0
 800a434:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a436:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a438:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a43a:	6013      	str	r3, [r2, #0]
 800a43c:	f7ff ba6d 	b.w	800991a <_strtod_l+0x7a>
 800a440:	2a65      	cmp	r2, #101	@ 0x65
 800a442:	f43f ab66 	beq.w	8009b12 <_strtod_l+0x272>
 800a446:	2a45      	cmp	r2, #69	@ 0x45
 800a448:	f43f ab63 	beq.w	8009b12 <_strtod_l+0x272>
 800a44c:	2301      	movs	r3, #1
 800a44e:	f7ff bb9e 	b.w	8009b8e <_strtod_l+0x2ee>
 800a452:	bf00      	nop
 800a454:	f3af 8000 	nop.w
 800a458:	ffc00000 	.word	0xffc00000
 800a45c:	41dfffff 	.word	0x41dfffff
 800a460:	94a03595 	.word	0x94a03595
 800a464:	3fcfffff 	.word	0x3fcfffff

0800a468 <_strtod_r>:
 800a468:	4b01      	ldr	r3, [pc, #4]	@ (800a470 <_strtod_r+0x8>)
 800a46a:	f7ff ba19 	b.w	80098a0 <_strtod_l>
 800a46e:	bf00      	nop
 800a470:	200000ec 	.word	0x200000ec

0800a474 <strtod>:
 800a474:	460a      	mov	r2, r1
 800a476:	4601      	mov	r1, r0
 800a478:	4802      	ldr	r0, [pc, #8]	@ (800a484 <strtod+0x10>)
 800a47a:	4b03      	ldr	r3, [pc, #12]	@ (800a488 <strtod+0x14>)
 800a47c:	6800      	ldr	r0, [r0, #0]
 800a47e:	f7ff ba0f 	b.w	80098a0 <_strtod_l>
 800a482:	bf00      	nop
 800a484:	20000258 	.word	0x20000258
 800a488:	200000ec 	.word	0x200000ec

0800a48c <_strtol_l.constprop.0>:
 800a48c:	2b24      	cmp	r3, #36	@ 0x24
 800a48e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a492:	4686      	mov	lr, r0
 800a494:	4690      	mov	r8, r2
 800a496:	d801      	bhi.n	800a49c <_strtol_l.constprop.0+0x10>
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d106      	bne.n	800a4aa <_strtol_l.constprop.0+0x1e>
 800a49c:	f001 f8ce 	bl	800b63c <__errno>
 800a4a0:	2316      	movs	r3, #22
 800a4a2:	6003      	str	r3, [r0, #0]
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4aa:	4834      	ldr	r0, [pc, #208]	@ (800a57c <_strtol_l.constprop.0+0xf0>)
 800a4ac:	460d      	mov	r5, r1
 800a4ae:	462a      	mov	r2, r5
 800a4b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4b4:	5d06      	ldrb	r6, [r0, r4]
 800a4b6:	f016 0608 	ands.w	r6, r6, #8
 800a4ba:	d1f8      	bne.n	800a4ae <_strtol_l.constprop.0+0x22>
 800a4bc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a4be:	d12d      	bne.n	800a51c <_strtol_l.constprop.0+0x90>
 800a4c0:	782c      	ldrb	r4, [r5, #0]
 800a4c2:	2601      	movs	r6, #1
 800a4c4:	1c95      	adds	r5, r2, #2
 800a4c6:	f033 0210 	bics.w	r2, r3, #16
 800a4ca:	d109      	bne.n	800a4e0 <_strtol_l.constprop.0+0x54>
 800a4cc:	2c30      	cmp	r4, #48	@ 0x30
 800a4ce:	d12a      	bne.n	800a526 <_strtol_l.constprop.0+0x9a>
 800a4d0:	782a      	ldrb	r2, [r5, #0]
 800a4d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a4d6:	2a58      	cmp	r2, #88	@ 0x58
 800a4d8:	d125      	bne.n	800a526 <_strtol_l.constprop.0+0x9a>
 800a4da:	786c      	ldrb	r4, [r5, #1]
 800a4dc:	2310      	movs	r3, #16
 800a4de:	3502      	adds	r5, #2
 800a4e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a4e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	fbbc f9f3 	udiv	r9, ip, r3
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	fb03 ca19 	mls	sl, r3, r9, ip
 800a4f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a4f8:	2f09      	cmp	r7, #9
 800a4fa:	d81b      	bhi.n	800a534 <_strtol_l.constprop.0+0xa8>
 800a4fc:	463c      	mov	r4, r7
 800a4fe:	42a3      	cmp	r3, r4
 800a500:	dd27      	ble.n	800a552 <_strtol_l.constprop.0+0xc6>
 800a502:	1c57      	adds	r7, r2, #1
 800a504:	d007      	beq.n	800a516 <_strtol_l.constprop.0+0x8a>
 800a506:	4581      	cmp	r9, r0
 800a508:	d320      	bcc.n	800a54c <_strtol_l.constprop.0+0xc0>
 800a50a:	d101      	bne.n	800a510 <_strtol_l.constprop.0+0x84>
 800a50c:	45a2      	cmp	sl, r4
 800a50e:	db1d      	blt.n	800a54c <_strtol_l.constprop.0+0xc0>
 800a510:	fb00 4003 	mla	r0, r0, r3, r4
 800a514:	2201      	movs	r2, #1
 800a516:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a51a:	e7eb      	b.n	800a4f4 <_strtol_l.constprop.0+0x68>
 800a51c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a51e:	bf04      	itt	eq
 800a520:	782c      	ldrbeq	r4, [r5, #0]
 800a522:	1c95      	addeq	r5, r2, #2
 800a524:	e7cf      	b.n	800a4c6 <_strtol_l.constprop.0+0x3a>
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1da      	bne.n	800a4e0 <_strtol_l.constprop.0+0x54>
 800a52a:	2c30      	cmp	r4, #48	@ 0x30
 800a52c:	bf0c      	ite	eq
 800a52e:	2308      	moveq	r3, #8
 800a530:	230a      	movne	r3, #10
 800a532:	e7d5      	b.n	800a4e0 <_strtol_l.constprop.0+0x54>
 800a534:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a538:	2f19      	cmp	r7, #25
 800a53a:	d801      	bhi.n	800a540 <_strtol_l.constprop.0+0xb4>
 800a53c:	3c37      	subs	r4, #55	@ 0x37
 800a53e:	e7de      	b.n	800a4fe <_strtol_l.constprop.0+0x72>
 800a540:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a544:	2f19      	cmp	r7, #25
 800a546:	d804      	bhi.n	800a552 <_strtol_l.constprop.0+0xc6>
 800a548:	3c57      	subs	r4, #87	@ 0x57
 800a54a:	e7d8      	b.n	800a4fe <_strtol_l.constprop.0+0x72>
 800a54c:	f04f 32ff 	mov.w	r2, #4294967295
 800a550:	e7e1      	b.n	800a516 <_strtol_l.constprop.0+0x8a>
 800a552:	1c53      	adds	r3, r2, #1
 800a554:	d108      	bne.n	800a568 <_strtol_l.constprop.0+0xdc>
 800a556:	2322      	movs	r3, #34	@ 0x22
 800a558:	f8ce 3000 	str.w	r3, [lr]
 800a55c:	4660      	mov	r0, ip
 800a55e:	f1b8 0f00 	cmp.w	r8, #0
 800a562:	d0a0      	beq.n	800a4a6 <_strtol_l.constprop.0+0x1a>
 800a564:	1e69      	subs	r1, r5, #1
 800a566:	e006      	b.n	800a576 <_strtol_l.constprop.0+0xea>
 800a568:	b106      	cbz	r6, 800a56c <_strtol_l.constprop.0+0xe0>
 800a56a:	4240      	negs	r0, r0
 800a56c:	f1b8 0f00 	cmp.w	r8, #0
 800a570:	d099      	beq.n	800a4a6 <_strtol_l.constprop.0+0x1a>
 800a572:	2a00      	cmp	r2, #0
 800a574:	d1f6      	bne.n	800a564 <_strtol_l.constprop.0+0xd8>
 800a576:	f8c8 1000 	str.w	r1, [r8]
 800a57a:	e794      	b.n	800a4a6 <_strtol_l.constprop.0+0x1a>
 800a57c:	0800fcb1 	.word	0x0800fcb1

0800a580 <_strtol_r>:
 800a580:	f7ff bf84 	b.w	800a48c <_strtol_l.constprop.0>

0800a584 <strtol>:
 800a584:	4613      	mov	r3, r2
 800a586:	460a      	mov	r2, r1
 800a588:	4601      	mov	r1, r0
 800a58a:	4802      	ldr	r0, [pc, #8]	@ (800a594 <strtol+0x10>)
 800a58c:	6800      	ldr	r0, [r0, #0]
 800a58e:	f7ff bf7d 	b.w	800a48c <_strtol_l.constprop.0>
 800a592:	bf00      	nop
 800a594:	20000258 	.word	0x20000258

0800a598 <__cvt>:
 800a598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a59c:	ec57 6b10 	vmov	r6, r7, d0
 800a5a0:	2f00      	cmp	r7, #0
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	463b      	mov	r3, r7
 800a5a8:	bfbb      	ittet	lt
 800a5aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a5ae:	461f      	movlt	r7, r3
 800a5b0:	2300      	movge	r3, #0
 800a5b2:	232d      	movlt	r3, #45	@ 0x2d
 800a5b4:	700b      	strb	r3, [r1, #0]
 800a5b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a5bc:	4691      	mov	r9, r2
 800a5be:	f023 0820 	bic.w	r8, r3, #32
 800a5c2:	bfbc      	itt	lt
 800a5c4:	4632      	movlt	r2, r6
 800a5c6:	4616      	movlt	r6, r2
 800a5c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a5cc:	d005      	beq.n	800a5da <__cvt+0x42>
 800a5ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a5d2:	d100      	bne.n	800a5d6 <__cvt+0x3e>
 800a5d4:	3401      	adds	r4, #1
 800a5d6:	2102      	movs	r1, #2
 800a5d8:	e000      	b.n	800a5dc <__cvt+0x44>
 800a5da:	2103      	movs	r1, #3
 800a5dc:	ab03      	add	r3, sp, #12
 800a5de:	9301      	str	r3, [sp, #4]
 800a5e0:	ab02      	add	r3, sp, #8
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	ec47 6b10 	vmov	d0, r6, r7
 800a5e8:	4653      	mov	r3, sl
 800a5ea:	4622      	mov	r2, r4
 800a5ec:	f001 f918 	bl	800b820 <_dtoa_r>
 800a5f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	d119      	bne.n	800a62c <__cvt+0x94>
 800a5f8:	f019 0f01 	tst.w	r9, #1
 800a5fc:	d00e      	beq.n	800a61c <__cvt+0x84>
 800a5fe:	eb00 0904 	add.w	r9, r0, r4
 800a602:	2200      	movs	r2, #0
 800a604:	2300      	movs	r3, #0
 800a606:	4630      	mov	r0, r6
 800a608:	4639      	mov	r1, r7
 800a60a:	f7f6 fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a60e:	b108      	cbz	r0, 800a614 <__cvt+0x7c>
 800a610:	f8cd 900c 	str.w	r9, [sp, #12]
 800a614:	2230      	movs	r2, #48	@ 0x30
 800a616:	9b03      	ldr	r3, [sp, #12]
 800a618:	454b      	cmp	r3, r9
 800a61a:	d31e      	bcc.n	800a65a <__cvt+0xc2>
 800a61c:	9b03      	ldr	r3, [sp, #12]
 800a61e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a620:	1b5b      	subs	r3, r3, r5
 800a622:	4628      	mov	r0, r5
 800a624:	6013      	str	r3, [r2, #0]
 800a626:	b004      	add	sp, #16
 800a628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a630:	eb00 0904 	add.w	r9, r0, r4
 800a634:	d1e5      	bne.n	800a602 <__cvt+0x6a>
 800a636:	7803      	ldrb	r3, [r0, #0]
 800a638:	2b30      	cmp	r3, #48	@ 0x30
 800a63a:	d10a      	bne.n	800a652 <__cvt+0xba>
 800a63c:	2200      	movs	r2, #0
 800a63e:	2300      	movs	r3, #0
 800a640:	4630      	mov	r0, r6
 800a642:	4639      	mov	r1, r7
 800a644:	f7f6 fa40 	bl	8000ac8 <__aeabi_dcmpeq>
 800a648:	b918      	cbnz	r0, 800a652 <__cvt+0xba>
 800a64a:	f1c4 0401 	rsb	r4, r4, #1
 800a64e:	f8ca 4000 	str.w	r4, [sl]
 800a652:	f8da 3000 	ldr.w	r3, [sl]
 800a656:	4499      	add	r9, r3
 800a658:	e7d3      	b.n	800a602 <__cvt+0x6a>
 800a65a:	1c59      	adds	r1, r3, #1
 800a65c:	9103      	str	r1, [sp, #12]
 800a65e:	701a      	strb	r2, [r3, #0]
 800a660:	e7d9      	b.n	800a616 <__cvt+0x7e>

0800a662 <__exponent>:
 800a662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a664:	2900      	cmp	r1, #0
 800a666:	bfba      	itte	lt
 800a668:	4249      	neglt	r1, r1
 800a66a:	232d      	movlt	r3, #45	@ 0x2d
 800a66c:	232b      	movge	r3, #43	@ 0x2b
 800a66e:	2909      	cmp	r1, #9
 800a670:	7002      	strb	r2, [r0, #0]
 800a672:	7043      	strb	r3, [r0, #1]
 800a674:	dd29      	ble.n	800a6ca <__exponent+0x68>
 800a676:	f10d 0307 	add.w	r3, sp, #7
 800a67a:	461d      	mov	r5, r3
 800a67c:	270a      	movs	r7, #10
 800a67e:	461a      	mov	r2, r3
 800a680:	fbb1 f6f7 	udiv	r6, r1, r7
 800a684:	fb07 1416 	mls	r4, r7, r6, r1
 800a688:	3430      	adds	r4, #48	@ 0x30
 800a68a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a68e:	460c      	mov	r4, r1
 800a690:	2c63      	cmp	r4, #99	@ 0x63
 800a692:	f103 33ff 	add.w	r3, r3, #4294967295
 800a696:	4631      	mov	r1, r6
 800a698:	dcf1      	bgt.n	800a67e <__exponent+0x1c>
 800a69a:	3130      	adds	r1, #48	@ 0x30
 800a69c:	1e94      	subs	r4, r2, #2
 800a69e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a6a2:	1c41      	adds	r1, r0, #1
 800a6a4:	4623      	mov	r3, r4
 800a6a6:	42ab      	cmp	r3, r5
 800a6a8:	d30a      	bcc.n	800a6c0 <__exponent+0x5e>
 800a6aa:	f10d 0309 	add.w	r3, sp, #9
 800a6ae:	1a9b      	subs	r3, r3, r2
 800a6b0:	42ac      	cmp	r4, r5
 800a6b2:	bf88      	it	hi
 800a6b4:	2300      	movhi	r3, #0
 800a6b6:	3302      	adds	r3, #2
 800a6b8:	4403      	add	r3, r0
 800a6ba:	1a18      	subs	r0, r3, r0
 800a6bc:	b003      	add	sp, #12
 800a6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a6c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a6c8:	e7ed      	b.n	800a6a6 <__exponent+0x44>
 800a6ca:	2330      	movs	r3, #48	@ 0x30
 800a6cc:	3130      	adds	r1, #48	@ 0x30
 800a6ce:	7083      	strb	r3, [r0, #2]
 800a6d0:	70c1      	strb	r1, [r0, #3]
 800a6d2:	1d03      	adds	r3, r0, #4
 800a6d4:	e7f1      	b.n	800a6ba <__exponent+0x58>
	...

0800a6d8 <_printf_float>:
 800a6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6dc:	b08d      	sub	sp, #52	@ 0x34
 800a6de:	460c      	mov	r4, r1
 800a6e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a6e4:	4616      	mov	r6, r2
 800a6e6:	461f      	mov	r7, r3
 800a6e8:	4605      	mov	r5, r0
 800a6ea:	f000 ff5d 	bl	800b5a8 <_localeconv_r>
 800a6ee:	6803      	ldr	r3, [r0, #0]
 800a6f0:	9304      	str	r3, [sp, #16]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7f5 fdbc 	bl	8000270 <strlen>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6fc:	f8d8 3000 	ldr.w	r3, [r8]
 800a700:	9005      	str	r0, [sp, #20]
 800a702:	3307      	adds	r3, #7
 800a704:	f023 0307 	bic.w	r3, r3, #7
 800a708:	f103 0208 	add.w	r2, r3, #8
 800a70c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a710:	f8d4 b000 	ldr.w	fp, [r4]
 800a714:	f8c8 2000 	str.w	r2, [r8]
 800a718:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a71c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a720:	9307      	str	r3, [sp, #28]
 800a722:	f8cd 8018 	str.w	r8, [sp, #24]
 800a726:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a72a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a72e:	4b9c      	ldr	r3, [pc, #624]	@ (800a9a0 <_printf_float+0x2c8>)
 800a730:	f04f 32ff 	mov.w	r2, #4294967295
 800a734:	f7f6 f9fa 	bl	8000b2c <__aeabi_dcmpun>
 800a738:	bb70      	cbnz	r0, 800a798 <_printf_float+0xc0>
 800a73a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a73e:	4b98      	ldr	r3, [pc, #608]	@ (800a9a0 <_printf_float+0x2c8>)
 800a740:	f04f 32ff 	mov.w	r2, #4294967295
 800a744:	f7f6 f9d4 	bl	8000af0 <__aeabi_dcmple>
 800a748:	bb30      	cbnz	r0, 800a798 <_printf_float+0xc0>
 800a74a:	2200      	movs	r2, #0
 800a74c:	2300      	movs	r3, #0
 800a74e:	4640      	mov	r0, r8
 800a750:	4649      	mov	r1, r9
 800a752:	f7f6 f9c3 	bl	8000adc <__aeabi_dcmplt>
 800a756:	b110      	cbz	r0, 800a75e <_printf_float+0x86>
 800a758:	232d      	movs	r3, #45	@ 0x2d
 800a75a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a75e:	4a91      	ldr	r2, [pc, #580]	@ (800a9a4 <_printf_float+0x2cc>)
 800a760:	4b91      	ldr	r3, [pc, #580]	@ (800a9a8 <_printf_float+0x2d0>)
 800a762:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a766:	bf94      	ite	ls
 800a768:	4690      	movls	r8, r2
 800a76a:	4698      	movhi	r8, r3
 800a76c:	2303      	movs	r3, #3
 800a76e:	6123      	str	r3, [r4, #16]
 800a770:	f02b 0304 	bic.w	r3, fp, #4
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	f04f 0900 	mov.w	r9, #0
 800a77a:	9700      	str	r7, [sp, #0]
 800a77c:	4633      	mov	r3, r6
 800a77e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a780:	4621      	mov	r1, r4
 800a782:	4628      	mov	r0, r5
 800a784:	f000 f9d2 	bl	800ab2c <_printf_common>
 800a788:	3001      	adds	r0, #1
 800a78a:	f040 808d 	bne.w	800a8a8 <_printf_float+0x1d0>
 800a78e:	f04f 30ff 	mov.w	r0, #4294967295
 800a792:	b00d      	add	sp, #52	@ 0x34
 800a794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a798:	4642      	mov	r2, r8
 800a79a:	464b      	mov	r3, r9
 800a79c:	4640      	mov	r0, r8
 800a79e:	4649      	mov	r1, r9
 800a7a0:	f7f6 f9c4 	bl	8000b2c <__aeabi_dcmpun>
 800a7a4:	b140      	cbz	r0, 800a7b8 <_printf_float+0xe0>
 800a7a6:	464b      	mov	r3, r9
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	bfbc      	itt	lt
 800a7ac:	232d      	movlt	r3, #45	@ 0x2d
 800a7ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a7b2:	4a7e      	ldr	r2, [pc, #504]	@ (800a9ac <_printf_float+0x2d4>)
 800a7b4:	4b7e      	ldr	r3, [pc, #504]	@ (800a9b0 <_printf_float+0x2d8>)
 800a7b6:	e7d4      	b.n	800a762 <_printf_float+0x8a>
 800a7b8:	6863      	ldr	r3, [r4, #4]
 800a7ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a7be:	9206      	str	r2, [sp, #24]
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	d13b      	bne.n	800a83c <_printf_float+0x164>
 800a7c4:	2306      	movs	r3, #6
 800a7c6:	6063      	str	r3, [r4, #4]
 800a7c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	6022      	str	r2, [r4, #0]
 800a7d0:	9303      	str	r3, [sp, #12]
 800a7d2:	ab0a      	add	r3, sp, #40	@ 0x28
 800a7d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a7d8:	ab09      	add	r3, sp, #36	@ 0x24
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	6861      	ldr	r1, [r4, #4]
 800a7de:	ec49 8b10 	vmov	d0, r8, r9
 800a7e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	f7ff fed6 	bl	800a598 <__cvt>
 800a7ec:	9b06      	ldr	r3, [sp, #24]
 800a7ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a7f0:	2b47      	cmp	r3, #71	@ 0x47
 800a7f2:	4680      	mov	r8, r0
 800a7f4:	d129      	bne.n	800a84a <_printf_float+0x172>
 800a7f6:	1cc8      	adds	r0, r1, #3
 800a7f8:	db02      	blt.n	800a800 <_printf_float+0x128>
 800a7fa:	6863      	ldr	r3, [r4, #4]
 800a7fc:	4299      	cmp	r1, r3
 800a7fe:	dd41      	ble.n	800a884 <_printf_float+0x1ac>
 800a800:	f1aa 0a02 	sub.w	sl, sl, #2
 800a804:	fa5f fa8a 	uxtb.w	sl, sl
 800a808:	3901      	subs	r1, #1
 800a80a:	4652      	mov	r2, sl
 800a80c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a810:	9109      	str	r1, [sp, #36]	@ 0x24
 800a812:	f7ff ff26 	bl	800a662 <__exponent>
 800a816:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a818:	1813      	adds	r3, r2, r0
 800a81a:	2a01      	cmp	r2, #1
 800a81c:	4681      	mov	r9, r0
 800a81e:	6123      	str	r3, [r4, #16]
 800a820:	dc02      	bgt.n	800a828 <_printf_float+0x150>
 800a822:	6822      	ldr	r2, [r4, #0]
 800a824:	07d2      	lsls	r2, r2, #31
 800a826:	d501      	bpl.n	800a82c <_printf_float+0x154>
 800a828:	3301      	adds	r3, #1
 800a82a:	6123      	str	r3, [r4, #16]
 800a82c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a830:	2b00      	cmp	r3, #0
 800a832:	d0a2      	beq.n	800a77a <_printf_float+0xa2>
 800a834:	232d      	movs	r3, #45	@ 0x2d
 800a836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a83a:	e79e      	b.n	800a77a <_printf_float+0xa2>
 800a83c:	9a06      	ldr	r2, [sp, #24]
 800a83e:	2a47      	cmp	r2, #71	@ 0x47
 800a840:	d1c2      	bne.n	800a7c8 <_printf_float+0xf0>
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1c0      	bne.n	800a7c8 <_printf_float+0xf0>
 800a846:	2301      	movs	r3, #1
 800a848:	e7bd      	b.n	800a7c6 <_printf_float+0xee>
 800a84a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a84e:	d9db      	bls.n	800a808 <_printf_float+0x130>
 800a850:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a854:	d118      	bne.n	800a888 <_printf_float+0x1b0>
 800a856:	2900      	cmp	r1, #0
 800a858:	6863      	ldr	r3, [r4, #4]
 800a85a:	dd0b      	ble.n	800a874 <_printf_float+0x19c>
 800a85c:	6121      	str	r1, [r4, #16]
 800a85e:	b913      	cbnz	r3, 800a866 <_printf_float+0x18e>
 800a860:	6822      	ldr	r2, [r4, #0]
 800a862:	07d0      	lsls	r0, r2, #31
 800a864:	d502      	bpl.n	800a86c <_printf_float+0x194>
 800a866:	3301      	adds	r3, #1
 800a868:	440b      	add	r3, r1
 800a86a:	6123      	str	r3, [r4, #16]
 800a86c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a86e:	f04f 0900 	mov.w	r9, #0
 800a872:	e7db      	b.n	800a82c <_printf_float+0x154>
 800a874:	b913      	cbnz	r3, 800a87c <_printf_float+0x1a4>
 800a876:	6822      	ldr	r2, [r4, #0]
 800a878:	07d2      	lsls	r2, r2, #31
 800a87a:	d501      	bpl.n	800a880 <_printf_float+0x1a8>
 800a87c:	3302      	adds	r3, #2
 800a87e:	e7f4      	b.n	800a86a <_printf_float+0x192>
 800a880:	2301      	movs	r3, #1
 800a882:	e7f2      	b.n	800a86a <_printf_float+0x192>
 800a884:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a88a:	4299      	cmp	r1, r3
 800a88c:	db05      	blt.n	800a89a <_printf_float+0x1c2>
 800a88e:	6823      	ldr	r3, [r4, #0]
 800a890:	6121      	str	r1, [r4, #16]
 800a892:	07d8      	lsls	r0, r3, #31
 800a894:	d5ea      	bpl.n	800a86c <_printf_float+0x194>
 800a896:	1c4b      	adds	r3, r1, #1
 800a898:	e7e7      	b.n	800a86a <_printf_float+0x192>
 800a89a:	2900      	cmp	r1, #0
 800a89c:	bfd4      	ite	le
 800a89e:	f1c1 0202 	rsble	r2, r1, #2
 800a8a2:	2201      	movgt	r2, #1
 800a8a4:	4413      	add	r3, r2
 800a8a6:	e7e0      	b.n	800a86a <_printf_float+0x192>
 800a8a8:	6823      	ldr	r3, [r4, #0]
 800a8aa:	055a      	lsls	r2, r3, #21
 800a8ac:	d407      	bmi.n	800a8be <_printf_float+0x1e6>
 800a8ae:	6923      	ldr	r3, [r4, #16]
 800a8b0:	4642      	mov	r2, r8
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	47b8      	blx	r7
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	d12b      	bne.n	800a914 <_printf_float+0x23c>
 800a8bc:	e767      	b.n	800a78e <_printf_float+0xb6>
 800a8be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a8c2:	f240 80dd 	bls.w	800aa80 <_printf_float+0x3a8>
 800a8c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	f7f6 f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d033      	beq.n	800a93e <_printf_float+0x266>
 800a8d6:	4a37      	ldr	r2, [pc, #220]	@ (800a9b4 <_printf_float+0x2dc>)
 800a8d8:	2301      	movs	r3, #1
 800a8da:	4631      	mov	r1, r6
 800a8dc:	4628      	mov	r0, r5
 800a8de:	47b8      	blx	r7
 800a8e0:	3001      	adds	r0, #1
 800a8e2:	f43f af54 	beq.w	800a78e <_printf_float+0xb6>
 800a8e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a8ea:	4543      	cmp	r3, r8
 800a8ec:	db02      	blt.n	800a8f4 <_printf_float+0x21c>
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	07d8      	lsls	r0, r3, #31
 800a8f2:	d50f      	bpl.n	800a914 <_printf_float+0x23c>
 800a8f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	47b8      	blx	r7
 800a8fe:	3001      	adds	r0, #1
 800a900:	f43f af45 	beq.w	800a78e <_printf_float+0xb6>
 800a904:	f04f 0900 	mov.w	r9, #0
 800a908:	f108 38ff 	add.w	r8, r8, #4294967295
 800a90c:	f104 0a1a 	add.w	sl, r4, #26
 800a910:	45c8      	cmp	r8, r9
 800a912:	dc09      	bgt.n	800a928 <_printf_float+0x250>
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	079b      	lsls	r3, r3, #30
 800a918:	f100 8103 	bmi.w	800ab22 <_printf_float+0x44a>
 800a91c:	68e0      	ldr	r0, [r4, #12]
 800a91e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a920:	4298      	cmp	r0, r3
 800a922:	bfb8      	it	lt
 800a924:	4618      	movlt	r0, r3
 800a926:	e734      	b.n	800a792 <_printf_float+0xba>
 800a928:	2301      	movs	r3, #1
 800a92a:	4652      	mov	r2, sl
 800a92c:	4631      	mov	r1, r6
 800a92e:	4628      	mov	r0, r5
 800a930:	47b8      	blx	r7
 800a932:	3001      	adds	r0, #1
 800a934:	f43f af2b 	beq.w	800a78e <_printf_float+0xb6>
 800a938:	f109 0901 	add.w	r9, r9, #1
 800a93c:	e7e8      	b.n	800a910 <_printf_float+0x238>
 800a93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a940:	2b00      	cmp	r3, #0
 800a942:	dc39      	bgt.n	800a9b8 <_printf_float+0x2e0>
 800a944:	4a1b      	ldr	r2, [pc, #108]	@ (800a9b4 <_printf_float+0x2dc>)
 800a946:	2301      	movs	r3, #1
 800a948:	4631      	mov	r1, r6
 800a94a:	4628      	mov	r0, r5
 800a94c:	47b8      	blx	r7
 800a94e:	3001      	adds	r0, #1
 800a950:	f43f af1d 	beq.w	800a78e <_printf_float+0xb6>
 800a954:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a958:	ea59 0303 	orrs.w	r3, r9, r3
 800a95c:	d102      	bne.n	800a964 <_printf_float+0x28c>
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	07d9      	lsls	r1, r3, #31
 800a962:	d5d7      	bpl.n	800a914 <_printf_float+0x23c>
 800a964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a968:	4631      	mov	r1, r6
 800a96a:	4628      	mov	r0, r5
 800a96c:	47b8      	blx	r7
 800a96e:	3001      	adds	r0, #1
 800a970:	f43f af0d 	beq.w	800a78e <_printf_float+0xb6>
 800a974:	f04f 0a00 	mov.w	sl, #0
 800a978:	f104 0b1a 	add.w	fp, r4, #26
 800a97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a97e:	425b      	negs	r3, r3
 800a980:	4553      	cmp	r3, sl
 800a982:	dc01      	bgt.n	800a988 <_printf_float+0x2b0>
 800a984:	464b      	mov	r3, r9
 800a986:	e793      	b.n	800a8b0 <_printf_float+0x1d8>
 800a988:	2301      	movs	r3, #1
 800a98a:	465a      	mov	r2, fp
 800a98c:	4631      	mov	r1, r6
 800a98e:	4628      	mov	r0, r5
 800a990:	47b8      	blx	r7
 800a992:	3001      	adds	r0, #1
 800a994:	f43f aefb 	beq.w	800a78e <_printf_float+0xb6>
 800a998:	f10a 0a01 	add.w	sl, sl, #1
 800a99c:	e7ee      	b.n	800a97c <_printf_float+0x2a4>
 800a99e:	bf00      	nop
 800a9a0:	7fefffff 	.word	0x7fefffff
 800a9a4:	0800fdb1 	.word	0x0800fdb1
 800a9a8:	0800fdb5 	.word	0x0800fdb5
 800a9ac:	0800fdb9 	.word	0x0800fdb9
 800a9b0:	0800fdbd 	.word	0x0800fdbd
 800a9b4:	0800fdc1 	.word	0x0800fdc1
 800a9b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a9be:	4553      	cmp	r3, sl
 800a9c0:	bfa8      	it	ge
 800a9c2:	4653      	movge	r3, sl
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	4699      	mov	r9, r3
 800a9c8:	dc36      	bgt.n	800aa38 <_printf_float+0x360>
 800a9ca:	f04f 0b00 	mov.w	fp, #0
 800a9ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9d2:	f104 021a 	add.w	r2, r4, #26
 800a9d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9d8:	9306      	str	r3, [sp, #24]
 800a9da:	eba3 0309 	sub.w	r3, r3, r9
 800a9de:	455b      	cmp	r3, fp
 800a9e0:	dc31      	bgt.n	800aa46 <_printf_float+0x36e>
 800a9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9e4:	459a      	cmp	sl, r3
 800a9e6:	dc3a      	bgt.n	800aa5e <_printf_float+0x386>
 800a9e8:	6823      	ldr	r3, [r4, #0]
 800a9ea:	07da      	lsls	r2, r3, #31
 800a9ec:	d437      	bmi.n	800aa5e <_printf_float+0x386>
 800a9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f0:	ebaa 0903 	sub.w	r9, sl, r3
 800a9f4:	9b06      	ldr	r3, [sp, #24]
 800a9f6:	ebaa 0303 	sub.w	r3, sl, r3
 800a9fa:	4599      	cmp	r9, r3
 800a9fc:	bfa8      	it	ge
 800a9fe:	4699      	movge	r9, r3
 800aa00:	f1b9 0f00 	cmp.w	r9, #0
 800aa04:	dc33      	bgt.n	800aa6e <_printf_float+0x396>
 800aa06:	f04f 0800 	mov.w	r8, #0
 800aa0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa0e:	f104 0b1a 	add.w	fp, r4, #26
 800aa12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa14:	ebaa 0303 	sub.w	r3, sl, r3
 800aa18:	eba3 0309 	sub.w	r3, r3, r9
 800aa1c:	4543      	cmp	r3, r8
 800aa1e:	f77f af79 	ble.w	800a914 <_printf_float+0x23c>
 800aa22:	2301      	movs	r3, #1
 800aa24:	465a      	mov	r2, fp
 800aa26:	4631      	mov	r1, r6
 800aa28:	4628      	mov	r0, r5
 800aa2a:	47b8      	blx	r7
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	f43f aeae 	beq.w	800a78e <_printf_float+0xb6>
 800aa32:	f108 0801 	add.w	r8, r8, #1
 800aa36:	e7ec      	b.n	800aa12 <_printf_float+0x33a>
 800aa38:	4642      	mov	r2, r8
 800aa3a:	4631      	mov	r1, r6
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	47b8      	blx	r7
 800aa40:	3001      	adds	r0, #1
 800aa42:	d1c2      	bne.n	800a9ca <_printf_float+0x2f2>
 800aa44:	e6a3      	b.n	800a78e <_printf_float+0xb6>
 800aa46:	2301      	movs	r3, #1
 800aa48:	4631      	mov	r1, r6
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	9206      	str	r2, [sp, #24]
 800aa4e:	47b8      	blx	r7
 800aa50:	3001      	adds	r0, #1
 800aa52:	f43f ae9c 	beq.w	800a78e <_printf_float+0xb6>
 800aa56:	9a06      	ldr	r2, [sp, #24]
 800aa58:	f10b 0b01 	add.w	fp, fp, #1
 800aa5c:	e7bb      	b.n	800a9d6 <_printf_float+0x2fe>
 800aa5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa62:	4631      	mov	r1, r6
 800aa64:	4628      	mov	r0, r5
 800aa66:	47b8      	blx	r7
 800aa68:	3001      	adds	r0, #1
 800aa6a:	d1c0      	bne.n	800a9ee <_printf_float+0x316>
 800aa6c:	e68f      	b.n	800a78e <_printf_float+0xb6>
 800aa6e:	9a06      	ldr	r2, [sp, #24]
 800aa70:	464b      	mov	r3, r9
 800aa72:	4442      	add	r2, r8
 800aa74:	4631      	mov	r1, r6
 800aa76:	4628      	mov	r0, r5
 800aa78:	47b8      	blx	r7
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	d1c3      	bne.n	800aa06 <_printf_float+0x32e>
 800aa7e:	e686      	b.n	800a78e <_printf_float+0xb6>
 800aa80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa84:	f1ba 0f01 	cmp.w	sl, #1
 800aa88:	dc01      	bgt.n	800aa8e <_printf_float+0x3b6>
 800aa8a:	07db      	lsls	r3, r3, #31
 800aa8c:	d536      	bpl.n	800aafc <_printf_float+0x424>
 800aa8e:	2301      	movs	r3, #1
 800aa90:	4642      	mov	r2, r8
 800aa92:	4631      	mov	r1, r6
 800aa94:	4628      	mov	r0, r5
 800aa96:	47b8      	blx	r7
 800aa98:	3001      	adds	r0, #1
 800aa9a:	f43f ae78 	beq.w	800a78e <_printf_float+0xb6>
 800aa9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaa2:	4631      	mov	r1, r6
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	47b8      	blx	r7
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	f43f ae70 	beq.w	800a78e <_printf_float+0xb6>
 800aaae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aab2:	2200      	movs	r2, #0
 800aab4:	2300      	movs	r3, #0
 800aab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aaba:	f7f6 f805 	bl	8000ac8 <__aeabi_dcmpeq>
 800aabe:	b9c0      	cbnz	r0, 800aaf2 <_printf_float+0x41a>
 800aac0:	4653      	mov	r3, sl
 800aac2:	f108 0201 	add.w	r2, r8, #1
 800aac6:	4631      	mov	r1, r6
 800aac8:	4628      	mov	r0, r5
 800aaca:	47b8      	blx	r7
 800aacc:	3001      	adds	r0, #1
 800aace:	d10c      	bne.n	800aaea <_printf_float+0x412>
 800aad0:	e65d      	b.n	800a78e <_printf_float+0xb6>
 800aad2:	2301      	movs	r3, #1
 800aad4:	465a      	mov	r2, fp
 800aad6:	4631      	mov	r1, r6
 800aad8:	4628      	mov	r0, r5
 800aada:	47b8      	blx	r7
 800aadc:	3001      	adds	r0, #1
 800aade:	f43f ae56 	beq.w	800a78e <_printf_float+0xb6>
 800aae2:	f108 0801 	add.w	r8, r8, #1
 800aae6:	45d0      	cmp	r8, sl
 800aae8:	dbf3      	blt.n	800aad2 <_printf_float+0x3fa>
 800aaea:	464b      	mov	r3, r9
 800aaec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aaf0:	e6df      	b.n	800a8b2 <_printf_float+0x1da>
 800aaf2:	f04f 0800 	mov.w	r8, #0
 800aaf6:	f104 0b1a 	add.w	fp, r4, #26
 800aafa:	e7f4      	b.n	800aae6 <_printf_float+0x40e>
 800aafc:	2301      	movs	r3, #1
 800aafe:	4642      	mov	r2, r8
 800ab00:	e7e1      	b.n	800aac6 <_printf_float+0x3ee>
 800ab02:	2301      	movs	r3, #1
 800ab04:	464a      	mov	r2, r9
 800ab06:	4631      	mov	r1, r6
 800ab08:	4628      	mov	r0, r5
 800ab0a:	47b8      	blx	r7
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	f43f ae3e 	beq.w	800a78e <_printf_float+0xb6>
 800ab12:	f108 0801 	add.w	r8, r8, #1
 800ab16:	68e3      	ldr	r3, [r4, #12]
 800ab18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab1a:	1a5b      	subs	r3, r3, r1
 800ab1c:	4543      	cmp	r3, r8
 800ab1e:	dcf0      	bgt.n	800ab02 <_printf_float+0x42a>
 800ab20:	e6fc      	b.n	800a91c <_printf_float+0x244>
 800ab22:	f04f 0800 	mov.w	r8, #0
 800ab26:	f104 0919 	add.w	r9, r4, #25
 800ab2a:	e7f4      	b.n	800ab16 <_printf_float+0x43e>

0800ab2c <_printf_common>:
 800ab2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab30:	4616      	mov	r6, r2
 800ab32:	4698      	mov	r8, r3
 800ab34:	688a      	ldr	r2, [r1, #8]
 800ab36:	690b      	ldr	r3, [r1, #16]
 800ab38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	bfb8      	it	lt
 800ab40:	4613      	movlt	r3, r2
 800ab42:	6033      	str	r3, [r6, #0]
 800ab44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab48:	4607      	mov	r7, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	b10a      	cbz	r2, 800ab52 <_printf_common+0x26>
 800ab4e:	3301      	adds	r3, #1
 800ab50:	6033      	str	r3, [r6, #0]
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	0699      	lsls	r1, r3, #26
 800ab56:	bf42      	ittt	mi
 800ab58:	6833      	ldrmi	r3, [r6, #0]
 800ab5a:	3302      	addmi	r3, #2
 800ab5c:	6033      	strmi	r3, [r6, #0]
 800ab5e:	6825      	ldr	r5, [r4, #0]
 800ab60:	f015 0506 	ands.w	r5, r5, #6
 800ab64:	d106      	bne.n	800ab74 <_printf_common+0x48>
 800ab66:	f104 0a19 	add.w	sl, r4, #25
 800ab6a:	68e3      	ldr	r3, [r4, #12]
 800ab6c:	6832      	ldr	r2, [r6, #0]
 800ab6e:	1a9b      	subs	r3, r3, r2
 800ab70:	42ab      	cmp	r3, r5
 800ab72:	dc26      	bgt.n	800abc2 <_printf_common+0x96>
 800ab74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab78:	6822      	ldr	r2, [r4, #0]
 800ab7a:	3b00      	subs	r3, #0
 800ab7c:	bf18      	it	ne
 800ab7e:	2301      	movne	r3, #1
 800ab80:	0692      	lsls	r2, r2, #26
 800ab82:	d42b      	bmi.n	800abdc <_printf_common+0xb0>
 800ab84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab88:	4641      	mov	r1, r8
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	47c8      	blx	r9
 800ab8e:	3001      	adds	r0, #1
 800ab90:	d01e      	beq.n	800abd0 <_printf_common+0xa4>
 800ab92:	6823      	ldr	r3, [r4, #0]
 800ab94:	6922      	ldr	r2, [r4, #16]
 800ab96:	f003 0306 	and.w	r3, r3, #6
 800ab9a:	2b04      	cmp	r3, #4
 800ab9c:	bf02      	ittt	eq
 800ab9e:	68e5      	ldreq	r5, [r4, #12]
 800aba0:	6833      	ldreq	r3, [r6, #0]
 800aba2:	1aed      	subeq	r5, r5, r3
 800aba4:	68a3      	ldr	r3, [r4, #8]
 800aba6:	bf0c      	ite	eq
 800aba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abac:	2500      	movne	r5, #0
 800abae:	4293      	cmp	r3, r2
 800abb0:	bfc4      	itt	gt
 800abb2:	1a9b      	subgt	r3, r3, r2
 800abb4:	18ed      	addgt	r5, r5, r3
 800abb6:	2600      	movs	r6, #0
 800abb8:	341a      	adds	r4, #26
 800abba:	42b5      	cmp	r5, r6
 800abbc:	d11a      	bne.n	800abf4 <_printf_common+0xc8>
 800abbe:	2000      	movs	r0, #0
 800abc0:	e008      	b.n	800abd4 <_printf_common+0xa8>
 800abc2:	2301      	movs	r3, #1
 800abc4:	4652      	mov	r2, sl
 800abc6:	4641      	mov	r1, r8
 800abc8:	4638      	mov	r0, r7
 800abca:	47c8      	blx	r9
 800abcc:	3001      	adds	r0, #1
 800abce:	d103      	bne.n	800abd8 <_printf_common+0xac>
 800abd0:	f04f 30ff 	mov.w	r0, #4294967295
 800abd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abd8:	3501      	adds	r5, #1
 800abda:	e7c6      	b.n	800ab6a <_printf_common+0x3e>
 800abdc:	18e1      	adds	r1, r4, r3
 800abde:	1c5a      	adds	r2, r3, #1
 800abe0:	2030      	movs	r0, #48	@ 0x30
 800abe2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800abe6:	4422      	add	r2, r4
 800abe8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800abec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800abf0:	3302      	adds	r3, #2
 800abf2:	e7c7      	b.n	800ab84 <_printf_common+0x58>
 800abf4:	2301      	movs	r3, #1
 800abf6:	4622      	mov	r2, r4
 800abf8:	4641      	mov	r1, r8
 800abfa:	4638      	mov	r0, r7
 800abfc:	47c8      	blx	r9
 800abfe:	3001      	adds	r0, #1
 800ac00:	d0e6      	beq.n	800abd0 <_printf_common+0xa4>
 800ac02:	3601      	adds	r6, #1
 800ac04:	e7d9      	b.n	800abba <_printf_common+0x8e>
	...

0800ac08 <_printf_i>:
 800ac08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac0c:	7e0f      	ldrb	r7, [r1, #24]
 800ac0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac10:	2f78      	cmp	r7, #120	@ 0x78
 800ac12:	4691      	mov	r9, r2
 800ac14:	4680      	mov	r8, r0
 800ac16:	460c      	mov	r4, r1
 800ac18:	469a      	mov	sl, r3
 800ac1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac1e:	d807      	bhi.n	800ac30 <_printf_i+0x28>
 800ac20:	2f62      	cmp	r7, #98	@ 0x62
 800ac22:	d80a      	bhi.n	800ac3a <_printf_i+0x32>
 800ac24:	2f00      	cmp	r7, #0
 800ac26:	f000 80d2 	beq.w	800adce <_printf_i+0x1c6>
 800ac2a:	2f58      	cmp	r7, #88	@ 0x58
 800ac2c:	f000 80b9 	beq.w	800ada2 <_printf_i+0x19a>
 800ac30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac38:	e03a      	b.n	800acb0 <_printf_i+0xa8>
 800ac3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac3e:	2b15      	cmp	r3, #21
 800ac40:	d8f6      	bhi.n	800ac30 <_printf_i+0x28>
 800ac42:	a101      	add	r1, pc, #4	@ (adr r1, 800ac48 <_printf_i+0x40>)
 800ac44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac48:	0800aca1 	.word	0x0800aca1
 800ac4c:	0800acb5 	.word	0x0800acb5
 800ac50:	0800ac31 	.word	0x0800ac31
 800ac54:	0800ac31 	.word	0x0800ac31
 800ac58:	0800ac31 	.word	0x0800ac31
 800ac5c:	0800ac31 	.word	0x0800ac31
 800ac60:	0800acb5 	.word	0x0800acb5
 800ac64:	0800ac31 	.word	0x0800ac31
 800ac68:	0800ac31 	.word	0x0800ac31
 800ac6c:	0800ac31 	.word	0x0800ac31
 800ac70:	0800ac31 	.word	0x0800ac31
 800ac74:	0800adb5 	.word	0x0800adb5
 800ac78:	0800acdf 	.word	0x0800acdf
 800ac7c:	0800ad6f 	.word	0x0800ad6f
 800ac80:	0800ac31 	.word	0x0800ac31
 800ac84:	0800ac31 	.word	0x0800ac31
 800ac88:	0800add7 	.word	0x0800add7
 800ac8c:	0800ac31 	.word	0x0800ac31
 800ac90:	0800acdf 	.word	0x0800acdf
 800ac94:	0800ac31 	.word	0x0800ac31
 800ac98:	0800ac31 	.word	0x0800ac31
 800ac9c:	0800ad77 	.word	0x0800ad77
 800aca0:	6833      	ldr	r3, [r6, #0]
 800aca2:	1d1a      	adds	r2, r3, #4
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6032      	str	r2, [r6, #0]
 800aca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800acb0:	2301      	movs	r3, #1
 800acb2:	e09d      	b.n	800adf0 <_printf_i+0x1e8>
 800acb4:	6833      	ldr	r3, [r6, #0]
 800acb6:	6820      	ldr	r0, [r4, #0]
 800acb8:	1d19      	adds	r1, r3, #4
 800acba:	6031      	str	r1, [r6, #0]
 800acbc:	0606      	lsls	r6, r0, #24
 800acbe:	d501      	bpl.n	800acc4 <_printf_i+0xbc>
 800acc0:	681d      	ldr	r5, [r3, #0]
 800acc2:	e003      	b.n	800accc <_printf_i+0xc4>
 800acc4:	0645      	lsls	r5, r0, #25
 800acc6:	d5fb      	bpl.n	800acc0 <_printf_i+0xb8>
 800acc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800accc:	2d00      	cmp	r5, #0
 800acce:	da03      	bge.n	800acd8 <_printf_i+0xd0>
 800acd0:	232d      	movs	r3, #45	@ 0x2d
 800acd2:	426d      	negs	r5, r5
 800acd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acd8:	4859      	ldr	r0, [pc, #356]	@ (800ae40 <_printf_i+0x238>)
 800acda:	230a      	movs	r3, #10
 800acdc:	e011      	b.n	800ad02 <_printf_i+0xfa>
 800acde:	6821      	ldr	r1, [r4, #0]
 800ace0:	6833      	ldr	r3, [r6, #0]
 800ace2:	0608      	lsls	r0, r1, #24
 800ace4:	f853 5b04 	ldr.w	r5, [r3], #4
 800ace8:	d402      	bmi.n	800acf0 <_printf_i+0xe8>
 800acea:	0649      	lsls	r1, r1, #25
 800acec:	bf48      	it	mi
 800acee:	b2ad      	uxthmi	r5, r5
 800acf0:	2f6f      	cmp	r7, #111	@ 0x6f
 800acf2:	4853      	ldr	r0, [pc, #332]	@ (800ae40 <_printf_i+0x238>)
 800acf4:	6033      	str	r3, [r6, #0]
 800acf6:	bf14      	ite	ne
 800acf8:	230a      	movne	r3, #10
 800acfa:	2308      	moveq	r3, #8
 800acfc:	2100      	movs	r1, #0
 800acfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad02:	6866      	ldr	r6, [r4, #4]
 800ad04:	60a6      	str	r6, [r4, #8]
 800ad06:	2e00      	cmp	r6, #0
 800ad08:	bfa2      	ittt	ge
 800ad0a:	6821      	ldrge	r1, [r4, #0]
 800ad0c:	f021 0104 	bicge.w	r1, r1, #4
 800ad10:	6021      	strge	r1, [r4, #0]
 800ad12:	b90d      	cbnz	r5, 800ad18 <_printf_i+0x110>
 800ad14:	2e00      	cmp	r6, #0
 800ad16:	d04b      	beq.n	800adb0 <_printf_i+0x1a8>
 800ad18:	4616      	mov	r6, r2
 800ad1a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad1e:	fb03 5711 	mls	r7, r3, r1, r5
 800ad22:	5dc7      	ldrb	r7, [r0, r7]
 800ad24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad28:	462f      	mov	r7, r5
 800ad2a:	42bb      	cmp	r3, r7
 800ad2c:	460d      	mov	r5, r1
 800ad2e:	d9f4      	bls.n	800ad1a <_printf_i+0x112>
 800ad30:	2b08      	cmp	r3, #8
 800ad32:	d10b      	bne.n	800ad4c <_printf_i+0x144>
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	07df      	lsls	r7, r3, #31
 800ad38:	d508      	bpl.n	800ad4c <_printf_i+0x144>
 800ad3a:	6923      	ldr	r3, [r4, #16]
 800ad3c:	6861      	ldr	r1, [r4, #4]
 800ad3e:	4299      	cmp	r1, r3
 800ad40:	bfde      	ittt	le
 800ad42:	2330      	movle	r3, #48	@ 0x30
 800ad44:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad48:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad4c:	1b92      	subs	r2, r2, r6
 800ad4e:	6122      	str	r2, [r4, #16]
 800ad50:	f8cd a000 	str.w	sl, [sp]
 800ad54:	464b      	mov	r3, r9
 800ad56:	aa03      	add	r2, sp, #12
 800ad58:	4621      	mov	r1, r4
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	f7ff fee6 	bl	800ab2c <_printf_common>
 800ad60:	3001      	adds	r0, #1
 800ad62:	d14a      	bne.n	800adfa <_printf_i+0x1f2>
 800ad64:	f04f 30ff 	mov.w	r0, #4294967295
 800ad68:	b004      	add	sp, #16
 800ad6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad6e:	6823      	ldr	r3, [r4, #0]
 800ad70:	f043 0320 	orr.w	r3, r3, #32
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	4833      	ldr	r0, [pc, #204]	@ (800ae44 <_printf_i+0x23c>)
 800ad78:	2778      	movs	r7, #120	@ 0x78
 800ad7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	6831      	ldr	r1, [r6, #0]
 800ad82:	061f      	lsls	r7, r3, #24
 800ad84:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad88:	d402      	bmi.n	800ad90 <_printf_i+0x188>
 800ad8a:	065f      	lsls	r7, r3, #25
 800ad8c:	bf48      	it	mi
 800ad8e:	b2ad      	uxthmi	r5, r5
 800ad90:	6031      	str	r1, [r6, #0]
 800ad92:	07d9      	lsls	r1, r3, #31
 800ad94:	bf44      	itt	mi
 800ad96:	f043 0320 	orrmi.w	r3, r3, #32
 800ad9a:	6023      	strmi	r3, [r4, #0]
 800ad9c:	b11d      	cbz	r5, 800ada6 <_printf_i+0x19e>
 800ad9e:	2310      	movs	r3, #16
 800ada0:	e7ac      	b.n	800acfc <_printf_i+0xf4>
 800ada2:	4827      	ldr	r0, [pc, #156]	@ (800ae40 <_printf_i+0x238>)
 800ada4:	e7e9      	b.n	800ad7a <_printf_i+0x172>
 800ada6:	6823      	ldr	r3, [r4, #0]
 800ada8:	f023 0320 	bic.w	r3, r3, #32
 800adac:	6023      	str	r3, [r4, #0]
 800adae:	e7f6      	b.n	800ad9e <_printf_i+0x196>
 800adb0:	4616      	mov	r6, r2
 800adb2:	e7bd      	b.n	800ad30 <_printf_i+0x128>
 800adb4:	6833      	ldr	r3, [r6, #0]
 800adb6:	6825      	ldr	r5, [r4, #0]
 800adb8:	6961      	ldr	r1, [r4, #20]
 800adba:	1d18      	adds	r0, r3, #4
 800adbc:	6030      	str	r0, [r6, #0]
 800adbe:	062e      	lsls	r6, r5, #24
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	d501      	bpl.n	800adc8 <_printf_i+0x1c0>
 800adc4:	6019      	str	r1, [r3, #0]
 800adc6:	e002      	b.n	800adce <_printf_i+0x1c6>
 800adc8:	0668      	lsls	r0, r5, #25
 800adca:	d5fb      	bpl.n	800adc4 <_printf_i+0x1bc>
 800adcc:	8019      	strh	r1, [r3, #0]
 800adce:	2300      	movs	r3, #0
 800add0:	6123      	str	r3, [r4, #16]
 800add2:	4616      	mov	r6, r2
 800add4:	e7bc      	b.n	800ad50 <_printf_i+0x148>
 800add6:	6833      	ldr	r3, [r6, #0]
 800add8:	1d1a      	adds	r2, r3, #4
 800adda:	6032      	str	r2, [r6, #0]
 800addc:	681e      	ldr	r6, [r3, #0]
 800adde:	6862      	ldr	r2, [r4, #4]
 800ade0:	2100      	movs	r1, #0
 800ade2:	4630      	mov	r0, r6
 800ade4:	f7f5 f9f4 	bl	80001d0 <memchr>
 800ade8:	b108      	cbz	r0, 800adee <_printf_i+0x1e6>
 800adea:	1b80      	subs	r0, r0, r6
 800adec:	6060      	str	r0, [r4, #4]
 800adee:	6863      	ldr	r3, [r4, #4]
 800adf0:	6123      	str	r3, [r4, #16]
 800adf2:	2300      	movs	r3, #0
 800adf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adf8:	e7aa      	b.n	800ad50 <_printf_i+0x148>
 800adfa:	6923      	ldr	r3, [r4, #16]
 800adfc:	4632      	mov	r2, r6
 800adfe:	4649      	mov	r1, r9
 800ae00:	4640      	mov	r0, r8
 800ae02:	47d0      	blx	sl
 800ae04:	3001      	adds	r0, #1
 800ae06:	d0ad      	beq.n	800ad64 <_printf_i+0x15c>
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	079b      	lsls	r3, r3, #30
 800ae0c:	d413      	bmi.n	800ae36 <_printf_i+0x22e>
 800ae0e:	68e0      	ldr	r0, [r4, #12]
 800ae10:	9b03      	ldr	r3, [sp, #12]
 800ae12:	4298      	cmp	r0, r3
 800ae14:	bfb8      	it	lt
 800ae16:	4618      	movlt	r0, r3
 800ae18:	e7a6      	b.n	800ad68 <_printf_i+0x160>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	4632      	mov	r2, r6
 800ae1e:	4649      	mov	r1, r9
 800ae20:	4640      	mov	r0, r8
 800ae22:	47d0      	blx	sl
 800ae24:	3001      	adds	r0, #1
 800ae26:	d09d      	beq.n	800ad64 <_printf_i+0x15c>
 800ae28:	3501      	adds	r5, #1
 800ae2a:	68e3      	ldr	r3, [r4, #12]
 800ae2c:	9903      	ldr	r1, [sp, #12]
 800ae2e:	1a5b      	subs	r3, r3, r1
 800ae30:	42ab      	cmp	r3, r5
 800ae32:	dcf2      	bgt.n	800ae1a <_printf_i+0x212>
 800ae34:	e7eb      	b.n	800ae0e <_printf_i+0x206>
 800ae36:	2500      	movs	r5, #0
 800ae38:	f104 0619 	add.w	r6, r4, #25
 800ae3c:	e7f5      	b.n	800ae2a <_printf_i+0x222>
 800ae3e:	bf00      	nop
 800ae40:	0800fdc3 	.word	0x0800fdc3
 800ae44:	0800fdd4 	.word	0x0800fdd4

0800ae48 <_scanf_float>:
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	b087      	sub	sp, #28
 800ae4e:	4617      	mov	r7, r2
 800ae50:	9303      	str	r3, [sp, #12]
 800ae52:	688b      	ldr	r3, [r1, #8]
 800ae54:	1e5a      	subs	r2, r3, #1
 800ae56:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ae5a:	bf81      	itttt	hi
 800ae5c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ae60:	eb03 0b05 	addhi.w	fp, r3, r5
 800ae64:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ae68:	608b      	strhi	r3, [r1, #8]
 800ae6a:	680b      	ldr	r3, [r1, #0]
 800ae6c:	460a      	mov	r2, r1
 800ae6e:	f04f 0500 	mov.w	r5, #0
 800ae72:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ae76:	f842 3b1c 	str.w	r3, [r2], #28
 800ae7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ae7e:	4680      	mov	r8, r0
 800ae80:	460c      	mov	r4, r1
 800ae82:	bf98      	it	ls
 800ae84:	f04f 0b00 	movls.w	fp, #0
 800ae88:	9201      	str	r2, [sp, #4]
 800ae8a:	4616      	mov	r6, r2
 800ae8c:	46aa      	mov	sl, r5
 800ae8e:	46a9      	mov	r9, r5
 800ae90:	9502      	str	r5, [sp, #8]
 800ae92:	68a2      	ldr	r2, [r4, #8]
 800ae94:	b152      	cbz	r2, 800aeac <_scanf_float+0x64>
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	2b4e      	cmp	r3, #78	@ 0x4e
 800ae9c:	d864      	bhi.n	800af68 <_scanf_float+0x120>
 800ae9e:	2b40      	cmp	r3, #64	@ 0x40
 800aea0:	d83c      	bhi.n	800af1c <_scanf_float+0xd4>
 800aea2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800aea6:	b2c8      	uxtb	r0, r1
 800aea8:	280e      	cmp	r0, #14
 800aeaa:	d93a      	bls.n	800af22 <_scanf_float+0xda>
 800aeac:	f1b9 0f00 	cmp.w	r9, #0
 800aeb0:	d003      	beq.n	800aeba <_scanf_float+0x72>
 800aeb2:	6823      	ldr	r3, [r4, #0]
 800aeb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aeb8:	6023      	str	r3, [r4, #0]
 800aeba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aebe:	f1ba 0f01 	cmp.w	sl, #1
 800aec2:	f200 8117 	bhi.w	800b0f4 <_scanf_float+0x2ac>
 800aec6:	9b01      	ldr	r3, [sp, #4]
 800aec8:	429e      	cmp	r6, r3
 800aeca:	f200 8108 	bhi.w	800b0de <_scanf_float+0x296>
 800aece:	2001      	movs	r0, #1
 800aed0:	b007      	add	sp, #28
 800aed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800aeda:	2a0d      	cmp	r2, #13
 800aedc:	d8e6      	bhi.n	800aeac <_scanf_float+0x64>
 800aede:	a101      	add	r1, pc, #4	@ (adr r1, 800aee4 <_scanf_float+0x9c>)
 800aee0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aee4:	0800b02b 	.word	0x0800b02b
 800aee8:	0800aead 	.word	0x0800aead
 800aeec:	0800aead 	.word	0x0800aead
 800aef0:	0800aead 	.word	0x0800aead
 800aef4:	0800b08b 	.word	0x0800b08b
 800aef8:	0800b063 	.word	0x0800b063
 800aefc:	0800aead 	.word	0x0800aead
 800af00:	0800aead 	.word	0x0800aead
 800af04:	0800b039 	.word	0x0800b039
 800af08:	0800aead 	.word	0x0800aead
 800af0c:	0800aead 	.word	0x0800aead
 800af10:	0800aead 	.word	0x0800aead
 800af14:	0800aead 	.word	0x0800aead
 800af18:	0800aff1 	.word	0x0800aff1
 800af1c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800af20:	e7db      	b.n	800aeda <_scanf_float+0x92>
 800af22:	290e      	cmp	r1, #14
 800af24:	d8c2      	bhi.n	800aeac <_scanf_float+0x64>
 800af26:	a001      	add	r0, pc, #4	@ (adr r0, 800af2c <_scanf_float+0xe4>)
 800af28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800af2c:	0800afe1 	.word	0x0800afe1
 800af30:	0800aead 	.word	0x0800aead
 800af34:	0800afe1 	.word	0x0800afe1
 800af38:	0800b077 	.word	0x0800b077
 800af3c:	0800aead 	.word	0x0800aead
 800af40:	0800af89 	.word	0x0800af89
 800af44:	0800afc7 	.word	0x0800afc7
 800af48:	0800afc7 	.word	0x0800afc7
 800af4c:	0800afc7 	.word	0x0800afc7
 800af50:	0800afc7 	.word	0x0800afc7
 800af54:	0800afc7 	.word	0x0800afc7
 800af58:	0800afc7 	.word	0x0800afc7
 800af5c:	0800afc7 	.word	0x0800afc7
 800af60:	0800afc7 	.word	0x0800afc7
 800af64:	0800afc7 	.word	0x0800afc7
 800af68:	2b6e      	cmp	r3, #110	@ 0x6e
 800af6a:	d809      	bhi.n	800af80 <_scanf_float+0x138>
 800af6c:	2b60      	cmp	r3, #96	@ 0x60
 800af6e:	d8b2      	bhi.n	800aed6 <_scanf_float+0x8e>
 800af70:	2b54      	cmp	r3, #84	@ 0x54
 800af72:	d07b      	beq.n	800b06c <_scanf_float+0x224>
 800af74:	2b59      	cmp	r3, #89	@ 0x59
 800af76:	d199      	bne.n	800aeac <_scanf_float+0x64>
 800af78:	2d07      	cmp	r5, #7
 800af7a:	d197      	bne.n	800aeac <_scanf_float+0x64>
 800af7c:	2508      	movs	r5, #8
 800af7e:	e02c      	b.n	800afda <_scanf_float+0x192>
 800af80:	2b74      	cmp	r3, #116	@ 0x74
 800af82:	d073      	beq.n	800b06c <_scanf_float+0x224>
 800af84:	2b79      	cmp	r3, #121	@ 0x79
 800af86:	e7f6      	b.n	800af76 <_scanf_float+0x12e>
 800af88:	6821      	ldr	r1, [r4, #0]
 800af8a:	05c8      	lsls	r0, r1, #23
 800af8c:	d51b      	bpl.n	800afc6 <_scanf_float+0x17e>
 800af8e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800af92:	6021      	str	r1, [r4, #0]
 800af94:	f109 0901 	add.w	r9, r9, #1
 800af98:	f1bb 0f00 	cmp.w	fp, #0
 800af9c:	d003      	beq.n	800afa6 <_scanf_float+0x15e>
 800af9e:	3201      	adds	r2, #1
 800afa0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800afa4:	60a2      	str	r2, [r4, #8]
 800afa6:	68a3      	ldr	r3, [r4, #8]
 800afa8:	3b01      	subs	r3, #1
 800afaa:	60a3      	str	r3, [r4, #8]
 800afac:	6923      	ldr	r3, [r4, #16]
 800afae:	3301      	adds	r3, #1
 800afb0:	6123      	str	r3, [r4, #16]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3b01      	subs	r3, #1
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	607b      	str	r3, [r7, #4]
 800afba:	f340 8087 	ble.w	800b0cc <_scanf_float+0x284>
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	3301      	adds	r3, #1
 800afc2:	603b      	str	r3, [r7, #0]
 800afc4:	e765      	b.n	800ae92 <_scanf_float+0x4a>
 800afc6:	eb1a 0105 	adds.w	r1, sl, r5
 800afca:	f47f af6f 	bne.w	800aeac <_scanf_float+0x64>
 800afce:	6822      	ldr	r2, [r4, #0]
 800afd0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800afd4:	6022      	str	r2, [r4, #0]
 800afd6:	460d      	mov	r5, r1
 800afd8:	468a      	mov	sl, r1
 800afda:	f806 3b01 	strb.w	r3, [r6], #1
 800afde:	e7e2      	b.n	800afa6 <_scanf_float+0x15e>
 800afe0:	6822      	ldr	r2, [r4, #0]
 800afe2:	0610      	lsls	r0, r2, #24
 800afe4:	f57f af62 	bpl.w	800aeac <_scanf_float+0x64>
 800afe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800afec:	6022      	str	r2, [r4, #0]
 800afee:	e7f4      	b.n	800afda <_scanf_float+0x192>
 800aff0:	f1ba 0f00 	cmp.w	sl, #0
 800aff4:	d10e      	bne.n	800b014 <_scanf_float+0x1cc>
 800aff6:	f1b9 0f00 	cmp.w	r9, #0
 800affa:	d10e      	bne.n	800b01a <_scanf_float+0x1d2>
 800affc:	6822      	ldr	r2, [r4, #0]
 800affe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b002:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b006:	d108      	bne.n	800b01a <_scanf_float+0x1d2>
 800b008:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b00c:	6022      	str	r2, [r4, #0]
 800b00e:	f04f 0a01 	mov.w	sl, #1
 800b012:	e7e2      	b.n	800afda <_scanf_float+0x192>
 800b014:	f1ba 0f02 	cmp.w	sl, #2
 800b018:	d055      	beq.n	800b0c6 <_scanf_float+0x27e>
 800b01a:	2d01      	cmp	r5, #1
 800b01c:	d002      	beq.n	800b024 <_scanf_float+0x1dc>
 800b01e:	2d04      	cmp	r5, #4
 800b020:	f47f af44 	bne.w	800aeac <_scanf_float+0x64>
 800b024:	3501      	adds	r5, #1
 800b026:	b2ed      	uxtb	r5, r5
 800b028:	e7d7      	b.n	800afda <_scanf_float+0x192>
 800b02a:	f1ba 0f01 	cmp.w	sl, #1
 800b02e:	f47f af3d 	bne.w	800aeac <_scanf_float+0x64>
 800b032:	f04f 0a02 	mov.w	sl, #2
 800b036:	e7d0      	b.n	800afda <_scanf_float+0x192>
 800b038:	b97d      	cbnz	r5, 800b05a <_scanf_float+0x212>
 800b03a:	f1b9 0f00 	cmp.w	r9, #0
 800b03e:	f47f af38 	bne.w	800aeb2 <_scanf_float+0x6a>
 800b042:	6822      	ldr	r2, [r4, #0]
 800b044:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b048:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b04c:	f040 8108 	bne.w	800b260 <_scanf_float+0x418>
 800b050:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b054:	6022      	str	r2, [r4, #0]
 800b056:	2501      	movs	r5, #1
 800b058:	e7bf      	b.n	800afda <_scanf_float+0x192>
 800b05a:	2d03      	cmp	r5, #3
 800b05c:	d0e2      	beq.n	800b024 <_scanf_float+0x1dc>
 800b05e:	2d05      	cmp	r5, #5
 800b060:	e7de      	b.n	800b020 <_scanf_float+0x1d8>
 800b062:	2d02      	cmp	r5, #2
 800b064:	f47f af22 	bne.w	800aeac <_scanf_float+0x64>
 800b068:	2503      	movs	r5, #3
 800b06a:	e7b6      	b.n	800afda <_scanf_float+0x192>
 800b06c:	2d06      	cmp	r5, #6
 800b06e:	f47f af1d 	bne.w	800aeac <_scanf_float+0x64>
 800b072:	2507      	movs	r5, #7
 800b074:	e7b1      	b.n	800afda <_scanf_float+0x192>
 800b076:	6822      	ldr	r2, [r4, #0]
 800b078:	0591      	lsls	r1, r2, #22
 800b07a:	f57f af17 	bpl.w	800aeac <_scanf_float+0x64>
 800b07e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b082:	6022      	str	r2, [r4, #0]
 800b084:	f8cd 9008 	str.w	r9, [sp, #8]
 800b088:	e7a7      	b.n	800afda <_scanf_float+0x192>
 800b08a:	6822      	ldr	r2, [r4, #0]
 800b08c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b090:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b094:	d006      	beq.n	800b0a4 <_scanf_float+0x25c>
 800b096:	0550      	lsls	r0, r2, #21
 800b098:	f57f af08 	bpl.w	800aeac <_scanf_float+0x64>
 800b09c:	f1b9 0f00 	cmp.w	r9, #0
 800b0a0:	f000 80de 	beq.w	800b260 <_scanf_float+0x418>
 800b0a4:	0591      	lsls	r1, r2, #22
 800b0a6:	bf58      	it	pl
 800b0a8:	9902      	ldrpl	r1, [sp, #8]
 800b0aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b0ae:	bf58      	it	pl
 800b0b0:	eba9 0101 	subpl.w	r1, r9, r1
 800b0b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b0b8:	bf58      	it	pl
 800b0ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b0be:	6022      	str	r2, [r4, #0]
 800b0c0:	f04f 0900 	mov.w	r9, #0
 800b0c4:	e789      	b.n	800afda <_scanf_float+0x192>
 800b0c6:	f04f 0a03 	mov.w	sl, #3
 800b0ca:	e786      	b.n	800afda <_scanf_float+0x192>
 800b0cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b0d0:	4639      	mov	r1, r7
 800b0d2:	4640      	mov	r0, r8
 800b0d4:	4798      	blx	r3
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	f43f aedb 	beq.w	800ae92 <_scanf_float+0x4a>
 800b0dc:	e6e6      	b.n	800aeac <_scanf_float+0x64>
 800b0de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b0e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b0e6:	463a      	mov	r2, r7
 800b0e8:	4640      	mov	r0, r8
 800b0ea:	4798      	blx	r3
 800b0ec:	6923      	ldr	r3, [r4, #16]
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	6123      	str	r3, [r4, #16]
 800b0f2:	e6e8      	b.n	800aec6 <_scanf_float+0x7e>
 800b0f4:	1e6b      	subs	r3, r5, #1
 800b0f6:	2b06      	cmp	r3, #6
 800b0f8:	d824      	bhi.n	800b144 <_scanf_float+0x2fc>
 800b0fa:	2d02      	cmp	r5, #2
 800b0fc:	d836      	bhi.n	800b16c <_scanf_float+0x324>
 800b0fe:	9b01      	ldr	r3, [sp, #4]
 800b100:	429e      	cmp	r6, r3
 800b102:	f67f aee4 	bls.w	800aece <_scanf_float+0x86>
 800b106:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b10a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b10e:	463a      	mov	r2, r7
 800b110:	4640      	mov	r0, r8
 800b112:	4798      	blx	r3
 800b114:	6923      	ldr	r3, [r4, #16]
 800b116:	3b01      	subs	r3, #1
 800b118:	6123      	str	r3, [r4, #16]
 800b11a:	e7f0      	b.n	800b0fe <_scanf_float+0x2b6>
 800b11c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b120:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b124:	463a      	mov	r2, r7
 800b126:	4640      	mov	r0, r8
 800b128:	4798      	blx	r3
 800b12a:	6923      	ldr	r3, [r4, #16]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	6123      	str	r3, [r4, #16]
 800b130:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b134:	fa5f fa8a 	uxtb.w	sl, sl
 800b138:	f1ba 0f02 	cmp.w	sl, #2
 800b13c:	d1ee      	bne.n	800b11c <_scanf_float+0x2d4>
 800b13e:	3d03      	subs	r5, #3
 800b140:	b2ed      	uxtb	r5, r5
 800b142:	1b76      	subs	r6, r6, r5
 800b144:	6823      	ldr	r3, [r4, #0]
 800b146:	05da      	lsls	r2, r3, #23
 800b148:	d530      	bpl.n	800b1ac <_scanf_float+0x364>
 800b14a:	055b      	lsls	r3, r3, #21
 800b14c:	d511      	bpl.n	800b172 <_scanf_float+0x32a>
 800b14e:	9b01      	ldr	r3, [sp, #4]
 800b150:	429e      	cmp	r6, r3
 800b152:	f67f aebc 	bls.w	800aece <_scanf_float+0x86>
 800b156:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b15a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b15e:	463a      	mov	r2, r7
 800b160:	4640      	mov	r0, r8
 800b162:	4798      	blx	r3
 800b164:	6923      	ldr	r3, [r4, #16]
 800b166:	3b01      	subs	r3, #1
 800b168:	6123      	str	r3, [r4, #16]
 800b16a:	e7f0      	b.n	800b14e <_scanf_float+0x306>
 800b16c:	46aa      	mov	sl, r5
 800b16e:	46b3      	mov	fp, r6
 800b170:	e7de      	b.n	800b130 <_scanf_float+0x2e8>
 800b172:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b176:	6923      	ldr	r3, [r4, #16]
 800b178:	2965      	cmp	r1, #101	@ 0x65
 800b17a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b17e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b182:	6123      	str	r3, [r4, #16]
 800b184:	d00c      	beq.n	800b1a0 <_scanf_float+0x358>
 800b186:	2945      	cmp	r1, #69	@ 0x45
 800b188:	d00a      	beq.n	800b1a0 <_scanf_float+0x358>
 800b18a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b18e:	463a      	mov	r2, r7
 800b190:	4640      	mov	r0, r8
 800b192:	4798      	blx	r3
 800b194:	6923      	ldr	r3, [r4, #16]
 800b196:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b19a:	3b01      	subs	r3, #1
 800b19c:	1eb5      	subs	r5, r6, #2
 800b19e:	6123      	str	r3, [r4, #16]
 800b1a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1a4:	463a      	mov	r2, r7
 800b1a6:	4640      	mov	r0, r8
 800b1a8:	4798      	blx	r3
 800b1aa:	462e      	mov	r6, r5
 800b1ac:	6822      	ldr	r2, [r4, #0]
 800b1ae:	f012 0210 	ands.w	r2, r2, #16
 800b1b2:	d001      	beq.n	800b1b8 <_scanf_float+0x370>
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	e68b      	b.n	800aed0 <_scanf_float+0x88>
 800b1b8:	7032      	strb	r2, [r6, #0]
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b1c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1c4:	d11c      	bne.n	800b200 <_scanf_float+0x3b8>
 800b1c6:	9b02      	ldr	r3, [sp, #8]
 800b1c8:	454b      	cmp	r3, r9
 800b1ca:	eba3 0209 	sub.w	r2, r3, r9
 800b1ce:	d123      	bne.n	800b218 <_scanf_float+0x3d0>
 800b1d0:	9901      	ldr	r1, [sp, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	4640      	mov	r0, r8
 800b1d6:	f7ff f947 	bl	800a468 <_strtod_r>
 800b1da:	9b03      	ldr	r3, [sp, #12]
 800b1dc:	6821      	ldr	r1, [r4, #0]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f011 0f02 	tst.w	r1, #2
 800b1e4:	ec57 6b10 	vmov	r6, r7, d0
 800b1e8:	f103 0204 	add.w	r2, r3, #4
 800b1ec:	d01f      	beq.n	800b22e <_scanf_float+0x3e6>
 800b1ee:	9903      	ldr	r1, [sp, #12]
 800b1f0:	600a      	str	r2, [r1, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	e9c3 6700 	strd	r6, r7, [r3]
 800b1f8:	68e3      	ldr	r3, [r4, #12]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	60e3      	str	r3, [r4, #12]
 800b1fe:	e7d9      	b.n	800b1b4 <_scanf_float+0x36c>
 800b200:	9b04      	ldr	r3, [sp, #16]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d0e4      	beq.n	800b1d0 <_scanf_float+0x388>
 800b206:	9905      	ldr	r1, [sp, #20]
 800b208:	230a      	movs	r3, #10
 800b20a:	3101      	adds	r1, #1
 800b20c:	4640      	mov	r0, r8
 800b20e:	f7ff f9b7 	bl	800a580 <_strtol_r>
 800b212:	9b04      	ldr	r3, [sp, #16]
 800b214:	9e05      	ldr	r6, [sp, #20]
 800b216:	1ac2      	subs	r2, r0, r3
 800b218:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b21c:	429e      	cmp	r6, r3
 800b21e:	bf28      	it	cs
 800b220:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b224:	4910      	ldr	r1, [pc, #64]	@ (800b268 <_scanf_float+0x420>)
 800b226:	4630      	mov	r0, r6
 800b228:	f000 f8e4 	bl	800b3f4 <siprintf>
 800b22c:	e7d0      	b.n	800b1d0 <_scanf_float+0x388>
 800b22e:	f011 0f04 	tst.w	r1, #4
 800b232:	9903      	ldr	r1, [sp, #12]
 800b234:	600a      	str	r2, [r1, #0]
 800b236:	d1dc      	bne.n	800b1f2 <_scanf_float+0x3aa>
 800b238:	681d      	ldr	r5, [r3, #0]
 800b23a:	4632      	mov	r2, r6
 800b23c:	463b      	mov	r3, r7
 800b23e:	4630      	mov	r0, r6
 800b240:	4639      	mov	r1, r7
 800b242:	f7f5 fc73 	bl	8000b2c <__aeabi_dcmpun>
 800b246:	b128      	cbz	r0, 800b254 <_scanf_float+0x40c>
 800b248:	4808      	ldr	r0, [pc, #32]	@ (800b26c <_scanf_float+0x424>)
 800b24a:	f000 fa3d 	bl	800b6c8 <nanf>
 800b24e:	ed85 0a00 	vstr	s0, [r5]
 800b252:	e7d1      	b.n	800b1f8 <_scanf_float+0x3b0>
 800b254:	4630      	mov	r0, r6
 800b256:	4639      	mov	r1, r7
 800b258:	f7f5 fcc6 	bl	8000be8 <__aeabi_d2f>
 800b25c:	6028      	str	r0, [r5, #0]
 800b25e:	e7cb      	b.n	800b1f8 <_scanf_float+0x3b0>
 800b260:	f04f 0900 	mov.w	r9, #0
 800b264:	e629      	b.n	800aeba <_scanf_float+0x72>
 800b266:	bf00      	nop
 800b268:	0800fde5 	.word	0x0800fde5
 800b26c:	0800fe9e 	.word	0x0800fe9e

0800b270 <std>:
 800b270:	2300      	movs	r3, #0
 800b272:	b510      	push	{r4, lr}
 800b274:	4604      	mov	r4, r0
 800b276:	e9c0 3300 	strd	r3, r3, [r0]
 800b27a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b27e:	6083      	str	r3, [r0, #8]
 800b280:	8181      	strh	r1, [r0, #12]
 800b282:	6643      	str	r3, [r0, #100]	@ 0x64
 800b284:	81c2      	strh	r2, [r0, #14]
 800b286:	6183      	str	r3, [r0, #24]
 800b288:	4619      	mov	r1, r3
 800b28a:	2208      	movs	r2, #8
 800b28c:	305c      	adds	r0, #92	@ 0x5c
 800b28e:	f000 f914 	bl	800b4ba <memset>
 800b292:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c8 <std+0x58>)
 800b294:	6263      	str	r3, [r4, #36]	@ 0x24
 800b296:	4b0d      	ldr	r3, [pc, #52]	@ (800b2cc <std+0x5c>)
 800b298:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b29a:	4b0d      	ldr	r3, [pc, #52]	@ (800b2d0 <std+0x60>)
 800b29c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b29e:	4b0d      	ldr	r3, [pc, #52]	@ (800b2d4 <std+0x64>)
 800b2a0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b2d8 <std+0x68>)
 800b2a4:	6224      	str	r4, [r4, #32]
 800b2a6:	429c      	cmp	r4, r3
 800b2a8:	d006      	beq.n	800b2b8 <std+0x48>
 800b2aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b2ae:	4294      	cmp	r4, r2
 800b2b0:	d002      	beq.n	800b2b8 <std+0x48>
 800b2b2:	33d0      	adds	r3, #208	@ 0xd0
 800b2b4:	429c      	cmp	r4, r3
 800b2b6:	d105      	bne.n	800b2c4 <std+0x54>
 800b2b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2c0:	f000 b9e6 	b.w	800b690 <__retarget_lock_init_recursive>
 800b2c4:	bd10      	pop	{r4, pc}
 800b2c6:	bf00      	nop
 800b2c8:	0800b435 	.word	0x0800b435
 800b2cc:	0800b457 	.word	0x0800b457
 800b2d0:	0800b48f 	.word	0x0800b48f
 800b2d4:	0800b4b3 	.word	0x0800b4b3
 800b2d8:	2000074c 	.word	0x2000074c

0800b2dc <stdio_exit_handler>:
 800b2dc:	4a02      	ldr	r2, [pc, #8]	@ (800b2e8 <stdio_exit_handler+0xc>)
 800b2de:	4903      	ldr	r1, [pc, #12]	@ (800b2ec <stdio_exit_handler+0x10>)
 800b2e0:	4803      	ldr	r0, [pc, #12]	@ (800b2f0 <stdio_exit_handler+0x14>)
 800b2e2:	f000 b869 	b.w	800b3b8 <_fwalk_sglue>
 800b2e6:	bf00      	nop
 800b2e8:	200000e0 	.word	0x200000e0
 800b2ec:	0800d975 	.word	0x0800d975
 800b2f0:	2000025c 	.word	0x2000025c

0800b2f4 <cleanup_stdio>:
 800b2f4:	6841      	ldr	r1, [r0, #4]
 800b2f6:	4b0c      	ldr	r3, [pc, #48]	@ (800b328 <cleanup_stdio+0x34>)
 800b2f8:	4299      	cmp	r1, r3
 800b2fa:	b510      	push	{r4, lr}
 800b2fc:	4604      	mov	r4, r0
 800b2fe:	d001      	beq.n	800b304 <cleanup_stdio+0x10>
 800b300:	f002 fb38 	bl	800d974 <_fflush_r>
 800b304:	68a1      	ldr	r1, [r4, #8]
 800b306:	4b09      	ldr	r3, [pc, #36]	@ (800b32c <cleanup_stdio+0x38>)
 800b308:	4299      	cmp	r1, r3
 800b30a:	d002      	beq.n	800b312 <cleanup_stdio+0x1e>
 800b30c:	4620      	mov	r0, r4
 800b30e:	f002 fb31 	bl	800d974 <_fflush_r>
 800b312:	68e1      	ldr	r1, [r4, #12]
 800b314:	4b06      	ldr	r3, [pc, #24]	@ (800b330 <cleanup_stdio+0x3c>)
 800b316:	4299      	cmp	r1, r3
 800b318:	d004      	beq.n	800b324 <cleanup_stdio+0x30>
 800b31a:	4620      	mov	r0, r4
 800b31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b320:	f002 bb28 	b.w	800d974 <_fflush_r>
 800b324:	bd10      	pop	{r4, pc}
 800b326:	bf00      	nop
 800b328:	2000074c 	.word	0x2000074c
 800b32c:	200007b4 	.word	0x200007b4
 800b330:	2000081c 	.word	0x2000081c

0800b334 <global_stdio_init.part.0>:
 800b334:	b510      	push	{r4, lr}
 800b336:	4b0b      	ldr	r3, [pc, #44]	@ (800b364 <global_stdio_init.part.0+0x30>)
 800b338:	4c0b      	ldr	r4, [pc, #44]	@ (800b368 <global_stdio_init.part.0+0x34>)
 800b33a:	4a0c      	ldr	r2, [pc, #48]	@ (800b36c <global_stdio_init.part.0+0x38>)
 800b33c:	601a      	str	r2, [r3, #0]
 800b33e:	4620      	mov	r0, r4
 800b340:	2200      	movs	r2, #0
 800b342:	2104      	movs	r1, #4
 800b344:	f7ff ff94 	bl	800b270 <std>
 800b348:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b34c:	2201      	movs	r2, #1
 800b34e:	2109      	movs	r1, #9
 800b350:	f7ff ff8e 	bl	800b270 <std>
 800b354:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b358:	2202      	movs	r2, #2
 800b35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b35e:	2112      	movs	r1, #18
 800b360:	f7ff bf86 	b.w	800b270 <std>
 800b364:	20000884 	.word	0x20000884
 800b368:	2000074c 	.word	0x2000074c
 800b36c:	0800b2dd 	.word	0x0800b2dd

0800b370 <__sfp_lock_acquire>:
 800b370:	4801      	ldr	r0, [pc, #4]	@ (800b378 <__sfp_lock_acquire+0x8>)
 800b372:	f000 b98e 	b.w	800b692 <__retarget_lock_acquire_recursive>
 800b376:	bf00      	nop
 800b378:	2000088d 	.word	0x2000088d

0800b37c <__sfp_lock_release>:
 800b37c:	4801      	ldr	r0, [pc, #4]	@ (800b384 <__sfp_lock_release+0x8>)
 800b37e:	f000 b989 	b.w	800b694 <__retarget_lock_release_recursive>
 800b382:	bf00      	nop
 800b384:	2000088d 	.word	0x2000088d

0800b388 <__sinit>:
 800b388:	b510      	push	{r4, lr}
 800b38a:	4604      	mov	r4, r0
 800b38c:	f7ff fff0 	bl	800b370 <__sfp_lock_acquire>
 800b390:	6a23      	ldr	r3, [r4, #32]
 800b392:	b11b      	cbz	r3, 800b39c <__sinit+0x14>
 800b394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b398:	f7ff bff0 	b.w	800b37c <__sfp_lock_release>
 800b39c:	4b04      	ldr	r3, [pc, #16]	@ (800b3b0 <__sinit+0x28>)
 800b39e:	6223      	str	r3, [r4, #32]
 800b3a0:	4b04      	ldr	r3, [pc, #16]	@ (800b3b4 <__sinit+0x2c>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1f5      	bne.n	800b394 <__sinit+0xc>
 800b3a8:	f7ff ffc4 	bl	800b334 <global_stdio_init.part.0>
 800b3ac:	e7f2      	b.n	800b394 <__sinit+0xc>
 800b3ae:	bf00      	nop
 800b3b0:	0800b2f5 	.word	0x0800b2f5
 800b3b4:	20000884 	.word	0x20000884

0800b3b8 <_fwalk_sglue>:
 800b3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3bc:	4607      	mov	r7, r0
 800b3be:	4688      	mov	r8, r1
 800b3c0:	4614      	mov	r4, r2
 800b3c2:	2600      	movs	r6, #0
 800b3c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3c8:	f1b9 0901 	subs.w	r9, r9, #1
 800b3cc:	d505      	bpl.n	800b3da <_fwalk_sglue+0x22>
 800b3ce:	6824      	ldr	r4, [r4, #0]
 800b3d0:	2c00      	cmp	r4, #0
 800b3d2:	d1f7      	bne.n	800b3c4 <_fwalk_sglue+0xc>
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3da:	89ab      	ldrh	r3, [r5, #12]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d907      	bls.n	800b3f0 <_fwalk_sglue+0x38>
 800b3e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	d003      	beq.n	800b3f0 <_fwalk_sglue+0x38>
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	47c0      	blx	r8
 800b3ee:	4306      	orrs	r6, r0
 800b3f0:	3568      	adds	r5, #104	@ 0x68
 800b3f2:	e7e9      	b.n	800b3c8 <_fwalk_sglue+0x10>

0800b3f4 <siprintf>:
 800b3f4:	b40e      	push	{r1, r2, r3}
 800b3f6:	b500      	push	{lr}
 800b3f8:	b09c      	sub	sp, #112	@ 0x70
 800b3fa:	ab1d      	add	r3, sp, #116	@ 0x74
 800b3fc:	9002      	str	r0, [sp, #8]
 800b3fe:	9006      	str	r0, [sp, #24]
 800b400:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b404:	4809      	ldr	r0, [pc, #36]	@ (800b42c <siprintf+0x38>)
 800b406:	9107      	str	r1, [sp, #28]
 800b408:	9104      	str	r1, [sp, #16]
 800b40a:	4909      	ldr	r1, [pc, #36]	@ (800b430 <siprintf+0x3c>)
 800b40c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b410:	9105      	str	r1, [sp, #20]
 800b412:	6800      	ldr	r0, [r0, #0]
 800b414:	9301      	str	r3, [sp, #4]
 800b416:	a902      	add	r1, sp, #8
 800b418:	f002 f92c 	bl	800d674 <_svfiprintf_r>
 800b41c:	9b02      	ldr	r3, [sp, #8]
 800b41e:	2200      	movs	r2, #0
 800b420:	701a      	strb	r2, [r3, #0]
 800b422:	b01c      	add	sp, #112	@ 0x70
 800b424:	f85d eb04 	ldr.w	lr, [sp], #4
 800b428:	b003      	add	sp, #12
 800b42a:	4770      	bx	lr
 800b42c:	20000258 	.word	0x20000258
 800b430:	ffff0208 	.word	0xffff0208

0800b434 <__sread>:
 800b434:	b510      	push	{r4, lr}
 800b436:	460c      	mov	r4, r1
 800b438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b43c:	f000 f8da 	bl	800b5f4 <_read_r>
 800b440:	2800      	cmp	r0, #0
 800b442:	bfab      	itete	ge
 800b444:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b446:	89a3      	ldrhlt	r3, [r4, #12]
 800b448:	181b      	addge	r3, r3, r0
 800b44a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b44e:	bfac      	ite	ge
 800b450:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b452:	81a3      	strhlt	r3, [r4, #12]
 800b454:	bd10      	pop	{r4, pc}

0800b456 <__swrite>:
 800b456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b45a:	461f      	mov	r7, r3
 800b45c:	898b      	ldrh	r3, [r1, #12]
 800b45e:	05db      	lsls	r3, r3, #23
 800b460:	4605      	mov	r5, r0
 800b462:	460c      	mov	r4, r1
 800b464:	4616      	mov	r6, r2
 800b466:	d505      	bpl.n	800b474 <__swrite+0x1e>
 800b468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b46c:	2302      	movs	r3, #2
 800b46e:	2200      	movs	r2, #0
 800b470:	f000 f8ae 	bl	800b5d0 <_lseek_r>
 800b474:	89a3      	ldrh	r3, [r4, #12]
 800b476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b47a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b47e:	81a3      	strh	r3, [r4, #12]
 800b480:	4632      	mov	r2, r6
 800b482:	463b      	mov	r3, r7
 800b484:	4628      	mov	r0, r5
 800b486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b48a:	f000 b8c5 	b.w	800b618 <_write_r>

0800b48e <__sseek>:
 800b48e:	b510      	push	{r4, lr}
 800b490:	460c      	mov	r4, r1
 800b492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b496:	f000 f89b 	bl	800b5d0 <_lseek_r>
 800b49a:	1c43      	adds	r3, r0, #1
 800b49c:	89a3      	ldrh	r3, [r4, #12]
 800b49e:	bf15      	itete	ne
 800b4a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b4a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b4a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b4aa:	81a3      	strheq	r3, [r4, #12]
 800b4ac:	bf18      	it	ne
 800b4ae:	81a3      	strhne	r3, [r4, #12]
 800b4b0:	bd10      	pop	{r4, pc}

0800b4b2 <__sclose>:
 800b4b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b6:	f000 b87b 	b.w	800b5b0 <_close_r>

0800b4ba <memset>:
 800b4ba:	4402      	add	r2, r0
 800b4bc:	4603      	mov	r3, r0
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d100      	bne.n	800b4c4 <memset+0xa>
 800b4c2:	4770      	bx	lr
 800b4c4:	f803 1b01 	strb.w	r1, [r3], #1
 800b4c8:	e7f9      	b.n	800b4be <memset+0x4>

0800b4ca <strncmp>:
 800b4ca:	b510      	push	{r4, lr}
 800b4cc:	b16a      	cbz	r2, 800b4ea <strncmp+0x20>
 800b4ce:	3901      	subs	r1, #1
 800b4d0:	1884      	adds	r4, r0, r2
 800b4d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d103      	bne.n	800b4e6 <strncmp+0x1c>
 800b4de:	42a0      	cmp	r0, r4
 800b4e0:	d001      	beq.n	800b4e6 <strncmp+0x1c>
 800b4e2:	2a00      	cmp	r2, #0
 800b4e4:	d1f5      	bne.n	800b4d2 <strncmp+0x8>
 800b4e6:	1ad0      	subs	r0, r2, r3
 800b4e8:	bd10      	pop	{r4, pc}
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	e7fc      	b.n	800b4e8 <strncmp+0x1e>
	...

0800b4f0 <strtok>:
 800b4f0:	4b16      	ldr	r3, [pc, #88]	@ (800b54c <strtok+0x5c>)
 800b4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f6:	681f      	ldr	r7, [r3, #0]
 800b4f8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b4fa:	4605      	mov	r5, r0
 800b4fc:	460e      	mov	r6, r1
 800b4fe:	b9ec      	cbnz	r4, 800b53c <strtok+0x4c>
 800b500:	2050      	movs	r0, #80	@ 0x50
 800b502:	f001 fad5 	bl	800cab0 <malloc>
 800b506:	4602      	mov	r2, r0
 800b508:	6478      	str	r0, [r7, #68]	@ 0x44
 800b50a:	b920      	cbnz	r0, 800b516 <strtok+0x26>
 800b50c:	4b10      	ldr	r3, [pc, #64]	@ (800b550 <strtok+0x60>)
 800b50e:	4811      	ldr	r0, [pc, #68]	@ (800b554 <strtok+0x64>)
 800b510:	215b      	movs	r1, #91	@ 0x5b
 800b512:	f000 f8df 	bl	800b6d4 <__assert_func>
 800b516:	e9c0 4400 	strd	r4, r4, [r0]
 800b51a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b51e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b522:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b526:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b52a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b52e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b532:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b536:	6184      	str	r4, [r0, #24]
 800b538:	7704      	strb	r4, [r0, #28]
 800b53a:	6244      	str	r4, [r0, #36]	@ 0x24
 800b53c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b53e:	4631      	mov	r1, r6
 800b540:	4628      	mov	r0, r5
 800b542:	2301      	movs	r3, #1
 800b544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b548:	f000 b806 	b.w	800b558 <__strtok_r>
 800b54c:	20000258 	.word	0x20000258
 800b550:	0800fdea 	.word	0x0800fdea
 800b554:	0800fe01 	.word	0x0800fe01

0800b558 <__strtok_r>:
 800b558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b55a:	4604      	mov	r4, r0
 800b55c:	b908      	cbnz	r0, 800b562 <__strtok_r+0xa>
 800b55e:	6814      	ldr	r4, [r2, #0]
 800b560:	b144      	cbz	r4, 800b574 <__strtok_r+0x1c>
 800b562:	4620      	mov	r0, r4
 800b564:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b568:	460f      	mov	r7, r1
 800b56a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b56e:	b91e      	cbnz	r6, 800b578 <__strtok_r+0x20>
 800b570:	b965      	cbnz	r5, 800b58c <__strtok_r+0x34>
 800b572:	6015      	str	r5, [r2, #0]
 800b574:	2000      	movs	r0, #0
 800b576:	e005      	b.n	800b584 <__strtok_r+0x2c>
 800b578:	42b5      	cmp	r5, r6
 800b57a:	d1f6      	bne.n	800b56a <__strtok_r+0x12>
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d1f0      	bne.n	800b562 <__strtok_r+0xa>
 800b580:	6014      	str	r4, [r2, #0]
 800b582:	7003      	strb	r3, [r0, #0]
 800b584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b586:	461c      	mov	r4, r3
 800b588:	e00c      	b.n	800b5a4 <__strtok_r+0x4c>
 800b58a:	b915      	cbnz	r5, 800b592 <__strtok_r+0x3a>
 800b58c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b590:	460e      	mov	r6, r1
 800b592:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b596:	42ab      	cmp	r3, r5
 800b598:	d1f7      	bne.n	800b58a <__strtok_r+0x32>
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d0f3      	beq.n	800b586 <__strtok_r+0x2e>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b5a4:	6014      	str	r4, [r2, #0]
 800b5a6:	e7ed      	b.n	800b584 <__strtok_r+0x2c>

0800b5a8 <_localeconv_r>:
 800b5a8:	4800      	ldr	r0, [pc, #0]	@ (800b5ac <_localeconv_r+0x4>)
 800b5aa:	4770      	bx	lr
 800b5ac:	200001dc 	.word	0x200001dc

0800b5b0 <_close_r>:
 800b5b0:	b538      	push	{r3, r4, r5, lr}
 800b5b2:	4d06      	ldr	r5, [pc, #24]	@ (800b5cc <_close_r+0x1c>)
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	4608      	mov	r0, r1
 800b5ba:	602b      	str	r3, [r5, #0]
 800b5bc:	f7fa fb70 	bl	8005ca0 <_close>
 800b5c0:	1c43      	adds	r3, r0, #1
 800b5c2:	d102      	bne.n	800b5ca <_close_r+0x1a>
 800b5c4:	682b      	ldr	r3, [r5, #0]
 800b5c6:	b103      	cbz	r3, 800b5ca <_close_r+0x1a>
 800b5c8:	6023      	str	r3, [r4, #0]
 800b5ca:	bd38      	pop	{r3, r4, r5, pc}
 800b5cc:	20000888 	.word	0x20000888

0800b5d0 <_lseek_r>:
 800b5d0:	b538      	push	{r3, r4, r5, lr}
 800b5d2:	4d07      	ldr	r5, [pc, #28]	@ (800b5f0 <_lseek_r+0x20>)
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	4608      	mov	r0, r1
 800b5d8:	4611      	mov	r1, r2
 800b5da:	2200      	movs	r2, #0
 800b5dc:	602a      	str	r2, [r5, #0]
 800b5de:	461a      	mov	r2, r3
 800b5e0:	f7fa fb85 	bl	8005cee <_lseek>
 800b5e4:	1c43      	adds	r3, r0, #1
 800b5e6:	d102      	bne.n	800b5ee <_lseek_r+0x1e>
 800b5e8:	682b      	ldr	r3, [r5, #0]
 800b5ea:	b103      	cbz	r3, 800b5ee <_lseek_r+0x1e>
 800b5ec:	6023      	str	r3, [r4, #0]
 800b5ee:	bd38      	pop	{r3, r4, r5, pc}
 800b5f0:	20000888 	.word	0x20000888

0800b5f4 <_read_r>:
 800b5f4:	b538      	push	{r3, r4, r5, lr}
 800b5f6:	4d07      	ldr	r5, [pc, #28]	@ (800b614 <_read_r+0x20>)
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	4608      	mov	r0, r1
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	2200      	movs	r2, #0
 800b600:	602a      	str	r2, [r5, #0]
 800b602:	461a      	mov	r2, r3
 800b604:	f7fa fb13 	bl	8005c2e <_read>
 800b608:	1c43      	adds	r3, r0, #1
 800b60a:	d102      	bne.n	800b612 <_read_r+0x1e>
 800b60c:	682b      	ldr	r3, [r5, #0]
 800b60e:	b103      	cbz	r3, 800b612 <_read_r+0x1e>
 800b610:	6023      	str	r3, [r4, #0]
 800b612:	bd38      	pop	{r3, r4, r5, pc}
 800b614:	20000888 	.word	0x20000888

0800b618 <_write_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	4d07      	ldr	r5, [pc, #28]	@ (800b638 <_write_r+0x20>)
 800b61c:	4604      	mov	r4, r0
 800b61e:	4608      	mov	r0, r1
 800b620:	4611      	mov	r1, r2
 800b622:	2200      	movs	r2, #0
 800b624:	602a      	str	r2, [r5, #0]
 800b626:	461a      	mov	r2, r3
 800b628:	f7fa fb1e 	bl	8005c68 <_write>
 800b62c:	1c43      	adds	r3, r0, #1
 800b62e:	d102      	bne.n	800b636 <_write_r+0x1e>
 800b630:	682b      	ldr	r3, [r5, #0]
 800b632:	b103      	cbz	r3, 800b636 <_write_r+0x1e>
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	20000888 	.word	0x20000888

0800b63c <__errno>:
 800b63c:	4b01      	ldr	r3, [pc, #4]	@ (800b644 <__errno+0x8>)
 800b63e:	6818      	ldr	r0, [r3, #0]
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	20000258 	.word	0x20000258

0800b648 <__libc_init_array>:
 800b648:	b570      	push	{r4, r5, r6, lr}
 800b64a:	4d0d      	ldr	r5, [pc, #52]	@ (800b680 <__libc_init_array+0x38>)
 800b64c:	4c0d      	ldr	r4, [pc, #52]	@ (800b684 <__libc_init_array+0x3c>)
 800b64e:	1b64      	subs	r4, r4, r5
 800b650:	10a4      	asrs	r4, r4, #2
 800b652:	2600      	movs	r6, #0
 800b654:	42a6      	cmp	r6, r4
 800b656:	d109      	bne.n	800b66c <__libc_init_array+0x24>
 800b658:	4d0b      	ldr	r5, [pc, #44]	@ (800b688 <__libc_init_array+0x40>)
 800b65a:	4c0c      	ldr	r4, [pc, #48]	@ (800b68c <__libc_init_array+0x44>)
 800b65c:	f004 fa70 	bl	800fb40 <_init>
 800b660:	1b64      	subs	r4, r4, r5
 800b662:	10a4      	asrs	r4, r4, #2
 800b664:	2600      	movs	r6, #0
 800b666:	42a6      	cmp	r6, r4
 800b668:	d105      	bne.n	800b676 <__libc_init_array+0x2e>
 800b66a:	bd70      	pop	{r4, r5, r6, pc}
 800b66c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b670:	4798      	blx	r3
 800b672:	3601      	adds	r6, #1
 800b674:	e7ee      	b.n	800b654 <__libc_init_array+0xc>
 800b676:	f855 3b04 	ldr.w	r3, [r5], #4
 800b67a:	4798      	blx	r3
 800b67c:	3601      	adds	r6, #1
 800b67e:	e7f2      	b.n	800b666 <__libc_init_array+0x1e>
 800b680:	08010338 	.word	0x08010338
 800b684:	08010338 	.word	0x08010338
 800b688:	08010338 	.word	0x08010338
 800b68c:	0801033c 	.word	0x0801033c

0800b690 <__retarget_lock_init_recursive>:
 800b690:	4770      	bx	lr

0800b692 <__retarget_lock_acquire_recursive>:
 800b692:	4770      	bx	lr

0800b694 <__retarget_lock_release_recursive>:
 800b694:	4770      	bx	lr

0800b696 <memcpy>:
 800b696:	440a      	add	r2, r1
 800b698:	4291      	cmp	r1, r2
 800b69a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b69e:	d100      	bne.n	800b6a2 <memcpy+0xc>
 800b6a0:	4770      	bx	lr
 800b6a2:	b510      	push	{r4, lr}
 800b6a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6ac:	4291      	cmp	r1, r2
 800b6ae:	d1f9      	bne.n	800b6a4 <memcpy+0xe>
 800b6b0:	bd10      	pop	{r4, pc}
 800b6b2:	0000      	movs	r0, r0
 800b6b4:	0000      	movs	r0, r0
	...

0800b6b8 <nan>:
 800b6b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b6c0 <nan+0x8>
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	00000000 	.word	0x00000000
 800b6c4:	7ff80000 	.word	0x7ff80000

0800b6c8 <nanf>:
 800b6c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b6d0 <nanf+0x8>
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	7fc00000 	.word	0x7fc00000

0800b6d4 <__assert_func>:
 800b6d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6d6:	4614      	mov	r4, r2
 800b6d8:	461a      	mov	r2, r3
 800b6da:	4b09      	ldr	r3, [pc, #36]	@ (800b700 <__assert_func+0x2c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4605      	mov	r5, r0
 800b6e0:	68d8      	ldr	r0, [r3, #12]
 800b6e2:	b954      	cbnz	r4, 800b6fa <__assert_func+0x26>
 800b6e4:	4b07      	ldr	r3, [pc, #28]	@ (800b704 <__assert_func+0x30>)
 800b6e6:	461c      	mov	r4, r3
 800b6e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6ec:	9100      	str	r1, [sp, #0]
 800b6ee:	462b      	mov	r3, r5
 800b6f0:	4905      	ldr	r1, [pc, #20]	@ (800b708 <__assert_func+0x34>)
 800b6f2:	f002 f967 	bl	800d9c4 <fiprintf>
 800b6f6:	f002 f9a1 	bl	800da3c <abort>
 800b6fa:	4b04      	ldr	r3, [pc, #16]	@ (800b70c <__assert_func+0x38>)
 800b6fc:	e7f4      	b.n	800b6e8 <__assert_func+0x14>
 800b6fe:	bf00      	nop
 800b700:	20000258 	.word	0x20000258
 800b704:	0800fe9e 	.word	0x0800fe9e
 800b708:	0800fe70 	.word	0x0800fe70
 800b70c:	0800fe63 	.word	0x0800fe63

0800b710 <quorem>:
 800b710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	6903      	ldr	r3, [r0, #16]
 800b716:	690c      	ldr	r4, [r1, #16]
 800b718:	42a3      	cmp	r3, r4
 800b71a:	4607      	mov	r7, r0
 800b71c:	db7e      	blt.n	800b81c <quorem+0x10c>
 800b71e:	3c01      	subs	r4, #1
 800b720:	f101 0814 	add.w	r8, r1, #20
 800b724:	00a3      	lsls	r3, r4, #2
 800b726:	f100 0514 	add.w	r5, r0, #20
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b730:	9301      	str	r3, [sp, #4]
 800b732:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b736:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b73a:	3301      	adds	r3, #1
 800b73c:	429a      	cmp	r2, r3
 800b73e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b742:	fbb2 f6f3 	udiv	r6, r2, r3
 800b746:	d32e      	bcc.n	800b7a6 <quorem+0x96>
 800b748:	f04f 0a00 	mov.w	sl, #0
 800b74c:	46c4      	mov	ip, r8
 800b74e:	46ae      	mov	lr, r5
 800b750:	46d3      	mov	fp, sl
 800b752:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b756:	b298      	uxth	r0, r3
 800b758:	fb06 a000 	mla	r0, r6, r0, sl
 800b75c:	0c02      	lsrs	r2, r0, #16
 800b75e:	0c1b      	lsrs	r3, r3, #16
 800b760:	fb06 2303 	mla	r3, r6, r3, r2
 800b764:	f8de 2000 	ldr.w	r2, [lr]
 800b768:	b280      	uxth	r0, r0
 800b76a:	b292      	uxth	r2, r2
 800b76c:	1a12      	subs	r2, r2, r0
 800b76e:	445a      	add	r2, fp
 800b770:	f8de 0000 	ldr.w	r0, [lr]
 800b774:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b778:	b29b      	uxth	r3, r3
 800b77a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b77e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b782:	b292      	uxth	r2, r2
 800b784:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b788:	45e1      	cmp	r9, ip
 800b78a:	f84e 2b04 	str.w	r2, [lr], #4
 800b78e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b792:	d2de      	bcs.n	800b752 <quorem+0x42>
 800b794:	9b00      	ldr	r3, [sp, #0]
 800b796:	58eb      	ldr	r3, [r5, r3]
 800b798:	b92b      	cbnz	r3, 800b7a6 <quorem+0x96>
 800b79a:	9b01      	ldr	r3, [sp, #4]
 800b79c:	3b04      	subs	r3, #4
 800b79e:	429d      	cmp	r5, r3
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	d32f      	bcc.n	800b804 <quorem+0xf4>
 800b7a4:	613c      	str	r4, [r7, #16]
 800b7a6:	4638      	mov	r0, r7
 800b7a8:	f001 fd0e 	bl	800d1c8 <__mcmp>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	db25      	blt.n	800b7fc <quorem+0xec>
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7b8:	f8d1 c000 	ldr.w	ip, [r1]
 800b7bc:	fa1f fe82 	uxth.w	lr, r2
 800b7c0:	fa1f f38c 	uxth.w	r3, ip
 800b7c4:	eba3 030e 	sub.w	r3, r3, lr
 800b7c8:	4403      	add	r3, r0
 800b7ca:	0c12      	lsrs	r2, r2, #16
 800b7cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b7d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7da:	45c1      	cmp	r9, r8
 800b7dc:	f841 3b04 	str.w	r3, [r1], #4
 800b7e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b7e4:	d2e6      	bcs.n	800b7b4 <quorem+0xa4>
 800b7e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7ee:	b922      	cbnz	r2, 800b7fa <quorem+0xea>
 800b7f0:	3b04      	subs	r3, #4
 800b7f2:	429d      	cmp	r5, r3
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	d30b      	bcc.n	800b810 <quorem+0x100>
 800b7f8:	613c      	str	r4, [r7, #16]
 800b7fa:	3601      	adds	r6, #1
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	b003      	add	sp, #12
 800b800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b804:	6812      	ldr	r2, [r2, #0]
 800b806:	3b04      	subs	r3, #4
 800b808:	2a00      	cmp	r2, #0
 800b80a:	d1cb      	bne.n	800b7a4 <quorem+0x94>
 800b80c:	3c01      	subs	r4, #1
 800b80e:	e7c6      	b.n	800b79e <quorem+0x8e>
 800b810:	6812      	ldr	r2, [r2, #0]
 800b812:	3b04      	subs	r3, #4
 800b814:	2a00      	cmp	r2, #0
 800b816:	d1ef      	bne.n	800b7f8 <quorem+0xe8>
 800b818:	3c01      	subs	r4, #1
 800b81a:	e7ea      	b.n	800b7f2 <quorem+0xe2>
 800b81c:	2000      	movs	r0, #0
 800b81e:	e7ee      	b.n	800b7fe <quorem+0xee>

0800b820 <_dtoa_r>:
 800b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b824:	69c7      	ldr	r7, [r0, #28]
 800b826:	b099      	sub	sp, #100	@ 0x64
 800b828:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b82c:	ec55 4b10 	vmov	r4, r5, d0
 800b830:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b832:	9109      	str	r1, [sp, #36]	@ 0x24
 800b834:	4683      	mov	fp, r0
 800b836:	920e      	str	r2, [sp, #56]	@ 0x38
 800b838:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b83a:	b97f      	cbnz	r7, 800b85c <_dtoa_r+0x3c>
 800b83c:	2010      	movs	r0, #16
 800b83e:	f001 f937 	bl	800cab0 <malloc>
 800b842:	4602      	mov	r2, r0
 800b844:	f8cb 001c 	str.w	r0, [fp, #28]
 800b848:	b920      	cbnz	r0, 800b854 <_dtoa_r+0x34>
 800b84a:	4ba7      	ldr	r3, [pc, #668]	@ (800bae8 <_dtoa_r+0x2c8>)
 800b84c:	21ef      	movs	r1, #239	@ 0xef
 800b84e:	48a7      	ldr	r0, [pc, #668]	@ (800baec <_dtoa_r+0x2cc>)
 800b850:	f7ff ff40 	bl	800b6d4 <__assert_func>
 800b854:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b858:	6007      	str	r7, [r0, #0]
 800b85a:	60c7      	str	r7, [r0, #12]
 800b85c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b860:	6819      	ldr	r1, [r3, #0]
 800b862:	b159      	cbz	r1, 800b87c <_dtoa_r+0x5c>
 800b864:	685a      	ldr	r2, [r3, #4]
 800b866:	604a      	str	r2, [r1, #4]
 800b868:	2301      	movs	r3, #1
 800b86a:	4093      	lsls	r3, r2
 800b86c:	608b      	str	r3, [r1, #8]
 800b86e:	4658      	mov	r0, fp
 800b870:	f001 fa26 	bl	800ccc0 <_Bfree>
 800b874:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b878:	2200      	movs	r2, #0
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	1e2b      	subs	r3, r5, #0
 800b87e:	bfb9      	ittee	lt
 800b880:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b884:	9303      	strlt	r3, [sp, #12]
 800b886:	2300      	movge	r3, #0
 800b888:	6033      	strge	r3, [r6, #0]
 800b88a:	9f03      	ldr	r7, [sp, #12]
 800b88c:	4b98      	ldr	r3, [pc, #608]	@ (800baf0 <_dtoa_r+0x2d0>)
 800b88e:	bfbc      	itt	lt
 800b890:	2201      	movlt	r2, #1
 800b892:	6032      	strlt	r2, [r6, #0]
 800b894:	43bb      	bics	r3, r7
 800b896:	d112      	bne.n	800b8be <_dtoa_r+0x9e>
 800b898:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b89a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8a4:	4323      	orrs	r3, r4
 800b8a6:	f000 854d 	beq.w	800c344 <_dtoa_r+0xb24>
 800b8aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bb04 <_dtoa_r+0x2e4>
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f000 854f 	beq.w	800c354 <_dtoa_r+0xb34>
 800b8b6:	f10a 0303 	add.w	r3, sl, #3
 800b8ba:	f000 bd49 	b.w	800c350 <_dtoa_r+0xb30>
 800b8be:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	ec51 0b17 	vmov	r0, r1, d7
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b8ce:	f7f5 f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8d2:	4680      	mov	r8, r0
 800b8d4:	b158      	cbz	r0, 800b8ee <_dtoa_r+0xce>
 800b8d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b8d8:	2301      	movs	r3, #1
 800b8da:	6013      	str	r3, [r2, #0]
 800b8dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8de:	b113      	cbz	r3, 800b8e6 <_dtoa_r+0xc6>
 800b8e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b8e2:	4b84      	ldr	r3, [pc, #528]	@ (800baf4 <_dtoa_r+0x2d4>)
 800b8e4:	6013      	str	r3, [r2, #0]
 800b8e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bb08 <_dtoa_r+0x2e8>
 800b8ea:	f000 bd33 	b.w	800c354 <_dtoa_r+0xb34>
 800b8ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b8f2:	aa16      	add	r2, sp, #88	@ 0x58
 800b8f4:	a917      	add	r1, sp, #92	@ 0x5c
 800b8f6:	4658      	mov	r0, fp
 800b8f8:	f001 fd86 	bl	800d408 <__d2b>
 800b8fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b900:	4681      	mov	r9, r0
 800b902:	2e00      	cmp	r6, #0
 800b904:	d077      	beq.n	800b9f6 <_dtoa_r+0x1d6>
 800b906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b908:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b90c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b914:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b918:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b91c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b920:	4619      	mov	r1, r3
 800b922:	2200      	movs	r2, #0
 800b924:	4b74      	ldr	r3, [pc, #464]	@ (800baf8 <_dtoa_r+0x2d8>)
 800b926:	f7f4 fcaf 	bl	8000288 <__aeabi_dsub>
 800b92a:	a369      	add	r3, pc, #420	@ (adr r3, 800bad0 <_dtoa_r+0x2b0>)
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	f7f4 fe62 	bl	80005f8 <__aeabi_dmul>
 800b934:	a368      	add	r3, pc, #416	@ (adr r3, 800bad8 <_dtoa_r+0x2b8>)
 800b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93a:	f7f4 fca7 	bl	800028c <__adddf3>
 800b93e:	4604      	mov	r4, r0
 800b940:	4630      	mov	r0, r6
 800b942:	460d      	mov	r5, r1
 800b944:	f7f4 fdee 	bl	8000524 <__aeabi_i2d>
 800b948:	a365      	add	r3, pc, #404	@ (adr r3, 800bae0 <_dtoa_r+0x2c0>)
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	f7f4 fe53 	bl	80005f8 <__aeabi_dmul>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	4620      	mov	r0, r4
 800b958:	4629      	mov	r1, r5
 800b95a:	f7f4 fc97 	bl	800028c <__adddf3>
 800b95e:	4604      	mov	r4, r0
 800b960:	460d      	mov	r5, r1
 800b962:	f7f5 f8f9 	bl	8000b58 <__aeabi_d2iz>
 800b966:	2200      	movs	r2, #0
 800b968:	4607      	mov	r7, r0
 800b96a:	2300      	movs	r3, #0
 800b96c:	4620      	mov	r0, r4
 800b96e:	4629      	mov	r1, r5
 800b970:	f7f5 f8b4 	bl	8000adc <__aeabi_dcmplt>
 800b974:	b140      	cbz	r0, 800b988 <_dtoa_r+0x168>
 800b976:	4638      	mov	r0, r7
 800b978:	f7f4 fdd4 	bl	8000524 <__aeabi_i2d>
 800b97c:	4622      	mov	r2, r4
 800b97e:	462b      	mov	r3, r5
 800b980:	f7f5 f8a2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b984:	b900      	cbnz	r0, 800b988 <_dtoa_r+0x168>
 800b986:	3f01      	subs	r7, #1
 800b988:	2f16      	cmp	r7, #22
 800b98a:	d851      	bhi.n	800ba30 <_dtoa_r+0x210>
 800b98c:	4b5b      	ldr	r3, [pc, #364]	@ (800bafc <_dtoa_r+0x2dc>)
 800b98e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b99a:	f7f5 f89f 	bl	8000adc <__aeabi_dcmplt>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d048      	beq.n	800ba34 <_dtoa_r+0x214>
 800b9a2:	3f01      	subs	r7, #1
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b9a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b9aa:	1b9b      	subs	r3, r3, r6
 800b9ac:	1e5a      	subs	r2, r3, #1
 800b9ae:	bf44      	itt	mi
 800b9b0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b9b4:	2300      	movmi	r3, #0
 800b9b6:	9208      	str	r2, [sp, #32]
 800b9b8:	bf54      	ite	pl
 800b9ba:	f04f 0800 	movpl.w	r8, #0
 800b9be:	9308      	strmi	r3, [sp, #32]
 800b9c0:	2f00      	cmp	r7, #0
 800b9c2:	db39      	blt.n	800ba38 <_dtoa_r+0x218>
 800b9c4:	9b08      	ldr	r3, [sp, #32]
 800b9c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b9c8:	443b      	add	r3, r7
 800b9ca:	9308      	str	r3, [sp, #32]
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9d2:	2b09      	cmp	r3, #9
 800b9d4:	d864      	bhi.n	800baa0 <_dtoa_r+0x280>
 800b9d6:	2b05      	cmp	r3, #5
 800b9d8:	bfc4      	itt	gt
 800b9da:	3b04      	subgt	r3, #4
 800b9dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e0:	f1a3 0302 	sub.w	r3, r3, #2
 800b9e4:	bfcc      	ite	gt
 800b9e6:	2400      	movgt	r4, #0
 800b9e8:	2401      	movle	r4, #1
 800b9ea:	2b03      	cmp	r3, #3
 800b9ec:	d863      	bhi.n	800bab6 <_dtoa_r+0x296>
 800b9ee:	e8df f003 	tbb	[pc, r3]
 800b9f2:	372a      	.short	0x372a
 800b9f4:	5535      	.short	0x5535
 800b9f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b9fa:	441e      	add	r6, r3
 800b9fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ba00:	2b20      	cmp	r3, #32
 800ba02:	bfc1      	itttt	gt
 800ba04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ba08:	409f      	lslgt	r7, r3
 800ba0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ba0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ba12:	bfd6      	itet	le
 800ba14:	f1c3 0320 	rsble	r3, r3, #32
 800ba18:	ea47 0003 	orrgt.w	r0, r7, r3
 800ba1c:	fa04 f003 	lslle.w	r0, r4, r3
 800ba20:	f7f4 fd70 	bl	8000504 <__aeabi_ui2d>
 800ba24:	2201      	movs	r2, #1
 800ba26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ba2a:	3e01      	subs	r6, #1
 800ba2c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ba2e:	e777      	b.n	800b920 <_dtoa_r+0x100>
 800ba30:	2301      	movs	r3, #1
 800ba32:	e7b8      	b.n	800b9a6 <_dtoa_r+0x186>
 800ba34:	9012      	str	r0, [sp, #72]	@ 0x48
 800ba36:	e7b7      	b.n	800b9a8 <_dtoa_r+0x188>
 800ba38:	427b      	negs	r3, r7
 800ba3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	eba8 0807 	sub.w	r8, r8, r7
 800ba42:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba44:	e7c4      	b.n	800b9d0 <_dtoa_r+0x1b0>
 800ba46:	2300      	movs	r3, #0
 800ba48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	dc35      	bgt.n	800babc <_dtoa_r+0x29c>
 800ba50:	2301      	movs	r3, #1
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	9307      	str	r3, [sp, #28]
 800ba56:	461a      	mov	r2, r3
 800ba58:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba5a:	e00b      	b.n	800ba74 <_dtoa_r+0x254>
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e7f3      	b.n	800ba48 <_dtoa_r+0x228>
 800ba60:	2300      	movs	r3, #0
 800ba62:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba66:	18fb      	adds	r3, r7, r3
 800ba68:	9300      	str	r3, [sp, #0]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	9307      	str	r3, [sp, #28]
 800ba70:	bfb8      	it	lt
 800ba72:	2301      	movlt	r3, #1
 800ba74:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ba78:	2100      	movs	r1, #0
 800ba7a:	2204      	movs	r2, #4
 800ba7c:	f102 0514 	add.w	r5, r2, #20
 800ba80:	429d      	cmp	r5, r3
 800ba82:	d91f      	bls.n	800bac4 <_dtoa_r+0x2a4>
 800ba84:	6041      	str	r1, [r0, #4]
 800ba86:	4658      	mov	r0, fp
 800ba88:	f001 f8da 	bl	800cc40 <_Balloc>
 800ba8c:	4682      	mov	sl, r0
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d13c      	bne.n	800bb0c <_dtoa_r+0x2ec>
 800ba92:	4b1b      	ldr	r3, [pc, #108]	@ (800bb00 <_dtoa_r+0x2e0>)
 800ba94:	4602      	mov	r2, r0
 800ba96:	f240 11af 	movw	r1, #431	@ 0x1af
 800ba9a:	e6d8      	b.n	800b84e <_dtoa_r+0x2e>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e7e0      	b.n	800ba62 <_dtoa_r+0x242>
 800baa0:	2401      	movs	r4, #1
 800baa2:	2300      	movs	r3, #0
 800baa4:	9309      	str	r3, [sp, #36]	@ 0x24
 800baa6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800baa8:	f04f 33ff 	mov.w	r3, #4294967295
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	9307      	str	r3, [sp, #28]
 800bab0:	2200      	movs	r2, #0
 800bab2:	2312      	movs	r3, #18
 800bab4:	e7d0      	b.n	800ba58 <_dtoa_r+0x238>
 800bab6:	2301      	movs	r3, #1
 800bab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baba:	e7f5      	b.n	800baa8 <_dtoa_r+0x288>
 800babc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800babe:	9300      	str	r3, [sp, #0]
 800bac0:	9307      	str	r3, [sp, #28]
 800bac2:	e7d7      	b.n	800ba74 <_dtoa_r+0x254>
 800bac4:	3101      	adds	r1, #1
 800bac6:	0052      	lsls	r2, r2, #1
 800bac8:	e7d8      	b.n	800ba7c <_dtoa_r+0x25c>
 800baca:	bf00      	nop
 800bacc:	f3af 8000 	nop.w
 800bad0:	636f4361 	.word	0x636f4361
 800bad4:	3fd287a7 	.word	0x3fd287a7
 800bad8:	8b60c8b3 	.word	0x8b60c8b3
 800badc:	3fc68a28 	.word	0x3fc68a28
 800bae0:	509f79fb 	.word	0x509f79fb
 800bae4:	3fd34413 	.word	0x3fd34413
 800bae8:	0800fdea 	.word	0x0800fdea
 800baec:	0800feac 	.word	0x0800feac
 800baf0:	7ff00000 	.word	0x7ff00000
 800baf4:	0800fdc2 	.word	0x0800fdc2
 800baf8:	3ff80000 	.word	0x3ff80000
 800bafc:	08010008 	.word	0x08010008
 800bb00:	0800ff04 	.word	0x0800ff04
 800bb04:	0800fea8 	.word	0x0800fea8
 800bb08:	0800fdc1 	.word	0x0800fdc1
 800bb0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb10:	6018      	str	r0, [r3, #0]
 800bb12:	9b07      	ldr	r3, [sp, #28]
 800bb14:	2b0e      	cmp	r3, #14
 800bb16:	f200 80a4 	bhi.w	800bc62 <_dtoa_r+0x442>
 800bb1a:	2c00      	cmp	r4, #0
 800bb1c:	f000 80a1 	beq.w	800bc62 <_dtoa_r+0x442>
 800bb20:	2f00      	cmp	r7, #0
 800bb22:	dd33      	ble.n	800bb8c <_dtoa_r+0x36c>
 800bb24:	4bad      	ldr	r3, [pc, #692]	@ (800bddc <_dtoa_r+0x5bc>)
 800bb26:	f007 020f 	and.w	r2, r7, #15
 800bb2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb2e:	ed93 7b00 	vldr	d7, [r3]
 800bb32:	05f8      	lsls	r0, r7, #23
 800bb34:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb38:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bb3c:	d516      	bpl.n	800bb6c <_dtoa_r+0x34c>
 800bb3e:	4ba8      	ldr	r3, [pc, #672]	@ (800bde0 <_dtoa_r+0x5c0>)
 800bb40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb48:	f7f4 fe80 	bl	800084c <__aeabi_ddiv>
 800bb4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb50:	f004 040f 	and.w	r4, r4, #15
 800bb54:	2603      	movs	r6, #3
 800bb56:	4da2      	ldr	r5, [pc, #648]	@ (800bde0 <_dtoa_r+0x5c0>)
 800bb58:	b954      	cbnz	r4, 800bb70 <_dtoa_r+0x350>
 800bb5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb62:	f7f4 fe73 	bl	800084c <__aeabi_ddiv>
 800bb66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb6a:	e028      	b.n	800bbbe <_dtoa_r+0x39e>
 800bb6c:	2602      	movs	r6, #2
 800bb6e:	e7f2      	b.n	800bb56 <_dtoa_r+0x336>
 800bb70:	07e1      	lsls	r1, r4, #31
 800bb72:	d508      	bpl.n	800bb86 <_dtoa_r+0x366>
 800bb74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb7c:	f7f4 fd3c 	bl	80005f8 <__aeabi_dmul>
 800bb80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb84:	3601      	adds	r6, #1
 800bb86:	1064      	asrs	r4, r4, #1
 800bb88:	3508      	adds	r5, #8
 800bb8a:	e7e5      	b.n	800bb58 <_dtoa_r+0x338>
 800bb8c:	f000 80d2 	beq.w	800bd34 <_dtoa_r+0x514>
 800bb90:	427c      	negs	r4, r7
 800bb92:	4b92      	ldr	r3, [pc, #584]	@ (800bddc <_dtoa_r+0x5bc>)
 800bb94:	4d92      	ldr	r5, [pc, #584]	@ (800bde0 <_dtoa_r+0x5c0>)
 800bb96:	f004 020f 	and.w	r2, r4, #15
 800bb9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bba6:	f7f4 fd27 	bl	80005f8 <__aeabi_dmul>
 800bbaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbae:	1124      	asrs	r4, r4, #4
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	2602      	movs	r6, #2
 800bbb4:	2c00      	cmp	r4, #0
 800bbb6:	f040 80b2 	bne.w	800bd1e <_dtoa_r+0x4fe>
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1d3      	bne.n	800bb66 <_dtoa_r+0x346>
 800bbbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bbc0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f000 80b7 	beq.w	800bd38 <_dtoa_r+0x518>
 800bbca:	4b86      	ldr	r3, [pc, #536]	@ (800bde4 <_dtoa_r+0x5c4>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	4620      	mov	r0, r4
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	f7f4 ff83 	bl	8000adc <__aeabi_dcmplt>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	f000 80ae 	beq.w	800bd38 <_dtoa_r+0x518>
 800bbdc:	9b07      	ldr	r3, [sp, #28]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f000 80aa 	beq.w	800bd38 <_dtoa_r+0x518>
 800bbe4:	9b00      	ldr	r3, [sp, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	dd37      	ble.n	800bc5a <_dtoa_r+0x43a>
 800bbea:	1e7b      	subs	r3, r7, #1
 800bbec:	9304      	str	r3, [sp, #16]
 800bbee:	4620      	mov	r0, r4
 800bbf0:	4b7d      	ldr	r3, [pc, #500]	@ (800bde8 <_dtoa_r+0x5c8>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	f7f4 fcff 	bl	80005f8 <__aeabi_dmul>
 800bbfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbfe:	9c00      	ldr	r4, [sp, #0]
 800bc00:	3601      	adds	r6, #1
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7f4 fc8e 	bl	8000524 <__aeabi_i2d>
 800bc08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc0c:	f7f4 fcf4 	bl	80005f8 <__aeabi_dmul>
 800bc10:	4b76      	ldr	r3, [pc, #472]	@ (800bdec <_dtoa_r+0x5cc>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	f7f4 fb3a 	bl	800028c <__adddf3>
 800bc18:	4605      	mov	r5, r0
 800bc1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bc1e:	2c00      	cmp	r4, #0
 800bc20:	f040 808d 	bne.w	800bd3e <_dtoa_r+0x51e>
 800bc24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc28:	4b71      	ldr	r3, [pc, #452]	@ (800bdf0 <_dtoa_r+0x5d0>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f7f4 fb2c 	bl	8000288 <__aeabi_dsub>
 800bc30:	4602      	mov	r2, r0
 800bc32:	460b      	mov	r3, r1
 800bc34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc38:	462a      	mov	r2, r5
 800bc3a:	4633      	mov	r3, r6
 800bc3c:	f7f4 ff6c 	bl	8000b18 <__aeabi_dcmpgt>
 800bc40:	2800      	cmp	r0, #0
 800bc42:	f040 828b 	bne.w	800c15c <_dtoa_r+0x93c>
 800bc46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc4a:	462a      	mov	r2, r5
 800bc4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc50:	f7f4 ff44 	bl	8000adc <__aeabi_dcmplt>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	f040 8128 	bne.w	800beaa <_dtoa_r+0x68a>
 800bc5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bc5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bc62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	f2c0 815a 	blt.w	800bf1e <_dtoa_r+0x6fe>
 800bc6a:	2f0e      	cmp	r7, #14
 800bc6c:	f300 8157 	bgt.w	800bf1e <_dtoa_r+0x6fe>
 800bc70:	4b5a      	ldr	r3, [pc, #360]	@ (800bddc <_dtoa_r+0x5bc>)
 800bc72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc76:	ed93 7b00 	vldr	d7, [r3]
 800bc7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	ed8d 7b00 	vstr	d7, [sp]
 800bc82:	da03      	bge.n	800bc8c <_dtoa_r+0x46c>
 800bc84:	9b07      	ldr	r3, [sp, #28]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	f340 8101 	ble.w	800be8e <_dtoa_r+0x66e>
 800bc8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc90:	4656      	mov	r6, sl
 800bc92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc96:	4620      	mov	r0, r4
 800bc98:	4629      	mov	r1, r5
 800bc9a:	f7f4 fdd7 	bl	800084c <__aeabi_ddiv>
 800bc9e:	f7f4 ff5b 	bl	8000b58 <__aeabi_d2iz>
 800bca2:	4680      	mov	r8, r0
 800bca4:	f7f4 fc3e 	bl	8000524 <__aeabi_i2d>
 800bca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcac:	f7f4 fca4 	bl	80005f8 <__aeabi_dmul>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bcbc:	f7f4 fae4 	bl	8000288 <__aeabi_dsub>
 800bcc0:	f806 4b01 	strb.w	r4, [r6], #1
 800bcc4:	9d07      	ldr	r5, [sp, #28]
 800bcc6:	eba6 040a 	sub.w	r4, r6, sl
 800bcca:	42a5      	cmp	r5, r4
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	f040 8117 	bne.w	800bf02 <_dtoa_r+0x6e2>
 800bcd4:	f7f4 fada 	bl	800028c <__adddf3>
 800bcd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcdc:	4604      	mov	r4, r0
 800bcde:	460d      	mov	r5, r1
 800bce0:	f7f4 ff1a 	bl	8000b18 <__aeabi_dcmpgt>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	f040 80f9 	bne.w	800bedc <_dtoa_r+0x6bc>
 800bcea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcee:	4620      	mov	r0, r4
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	f7f4 fee9 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcf6:	b118      	cbz	r0, 800bd00 <_dtoa_r+0x4e0>
 800bcf8:	f018 0f01 	tst.w	r8, #1
 800bcfc:	f040 80ee 	bne.w	800bedc <_dtoa_r+0x6bc>
 800bd00:	4649      	mov	r1, r9
 800bd02:	4658      	mov	r0, fp
 800bd04:	f000 ffdc 	bl	800ccc0 <_Bfree>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	7033      	strb	r3, [r6, #0]
 800bd0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd0e:	3701      	adds	r7, #1
 800bd10:	601f      	str	r7, [r3, #0]
 800bd12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f000 831d 	beq.w	800c354 <_dtoa_r+0xb34>
 800bd1a:	601e      	str	r6, [r3, #0]
 800bd1c:	e31a      	b.n	800c354 <_dtoa_r+0xb34>
 800bd1e:	07e2      	lsls	r2, r4, #31
 800bd20:	d505      	bpl.n	800bd2e <_dtoa_r+0x50e>
 800bd22:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd26:	f7f4 fc67 	bl	80005f8 <__aeabi_dmul>
 800bd2a:	3601      	adds	r6, #1
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	1064      	asrs	r4, r4, #1
 800bd30:	3508      	adds	r5, #8
 800bd32:	e73f      	b.n	800bbb4 <_dtoa_r+0x394>
 800bd34:	2602      	movs	r6, #2
 800bd36:	e742      	b.n	800bbbe <_dtoa_r+0x39e>
 800bd38:	9c07      	ldr	r4, [sp, #28]
 800bd3a:	9704      	str	r7, [sp, #16]
 800bd3c:	e761      	b.n	800bc02 <_dtoa_r+0x3e2>
 800bd3e:	4b27      	ldr	r3, [pc, #156]	@ (800bddc <_dtoa_r+0x5bc>)
 800bd40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd4a:	4454      	add	r4, sl
 800bd4c:	2900      	cmp	r1, #0
 800bd4e:	d053      	beq.n	800bdf8 <_dtoa_r+0x5d8>
 800bd50:	4928      	ldr	r1, [pc, #160]	@ (800bdf4 <_dtoa_r+0x5d4>)
 800bd52:	2000      	movs	r0, #0
 800bd54:	f7f4 fd7a 	bl	800084c <__aeabi_ddiv>
 800bd58:	4633      	mov	r3, r6
 800bd5a:	462a      	mov	r2, r5
 800bd5c:	f7f4 fa94 	bl	8000288 <__aeabi_dsub>
 800bd60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd64:	4656      	mov	r6, sl
 800bd66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd6a:	f7f4 fef5 	bl	8000b58 <__aeabi_d2iz>
 800bd6e:	4605      	mov	r5, r0
 800bd70:	f7f4 fbd8 	bl	8000524 <__aeabi_i2d>
 800bd74:	4602      	mov	r2, r0
 800bd76:	460b      	mov	r3, r1
 800bd78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd7c:	f7f4 fa84 	bl	8000288 <__aeabi_dsub>
 800bd80:	3530      	adds	r5, #48	@ 0x30
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd8a:	f806 5b01 	strb.w	r5, [r6], #1
 800bd8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd92:	f7f4 fea3 	bl	8000adc <__aeabi_dcmplt>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d171      	bne.n	800be7e <_dtoa_r+0x65e>
 800bd9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd9e:	4911      	ldr	r1, [pc, #68]	@ (800bde4 <_dtoa_r+0x5c4>)
 800bda0:	2000      	movs	r0, #0
 800bda2:	f7f4 fa71 	bl	8000288 <__aeabi_dsub>
 800bda6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdaa:	f7f4 fe97 	bl	8000adc <__aeabi_dcmplt>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	f040 8095 	bne.w	800bede <_dtoa_r+0x6be>
 800bdb4:	42a6      	cmp	r6, r4
 800bdb6:	f43f af50 	beq.w	800bc5a <_dtoa_r+0x43a>
 800bdba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bdbe:	4b0a      	ldr	r3, [pc, #40]	@ (800bde8 <_dtoa_r+0x5c8>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f7f4 fc19 	bl	80005f8 <__aeabi_dmul>
 800bdc6:	4b08      	ldr	r3, [pc, #32]	@ (800bde8 <_dtoa_r+0x5c8>)
 800bdc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdcc:	2200      	movs	r2, #0
 800bdce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdd2:	f7f4 fc11 	bl	80005f8 <__aeabi_dmul>
 800bdd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdda:	e7c4      	b.n	800bd66 <_dtoa_r+0x546>
 800bddc:	08010008 	.word	0x08010008
 800bde0:	0800ffe0 	.word	0x0800ffe0
 800bde4:	3ff00000 	.word	0x3ff00000
 800bde8:	40240000 	.word	0x40240000
 800bdec:	401c0000 	.word	0x401c0000
 800bdf0:	40140000 	.word	0x40140000
 800bdf4:	3fe00000 	.word	0x3fe00000
 800bdf8:	4631      	mov	r1, r6
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	f7f4 fbfc 	bl	80005f8 <__aeabi_dmul>
 800be00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be04:	9415      	str	r4, [sp, #84]	@ 0x54
 800be06:	4656      	mov	r6, sl
 800be08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be0c:	f7f4 fea4 	bl	8000b58 <__aeabi_d2iz>
 800be10:	4605      	mov	r5, r0
 800be12:	f7f4 fb87 	bl	8000524 <__aeabi_i2d>
 800be16:	4602      	mov	r2, r0
 800be18:	460b      	mov	r3, r1
 800be1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be1e:	f7f4 fa33 	bl	8000288 <__aeabi_dsub>
 800be22:	3530      	adds	r5, #48	@ 0x30
 800be24:	f806 5b01 	strb.w	r5, [r6], #1
 800be28:	4602      	mov	r2, r0
 800be2a:	460b      	mov	r3, r1
 800be2c:	42a6      	cmp	r6, r4
 800be2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be32:	f04f 0200 	mov.w	r2, #0
 800be36:	d124      	bne.n	800be82 <_dtoa_r+0x662>
 800be38:	4bac      	ldr	r3, [pc, #688]	@ (800c0ec <_dtoa_r+0x8cc>)
 800be3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be3e:	f7f4 fa25 	bl	800028c <__adddf3>
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be4a:	f7f4 fe65 	bl	8000b18 <__aeabi_dcmpgt>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d145      	bne.n	800bede <_dtoa_r+0x6be>
 800be52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be56:	49a5      	ldr	r1, [pc, #660]	@ (800c0ec <_dtoa_r+0x8cc>)
 800be58:	2000      	movs	r0, #0
 800be5a:	f7f4 fa15 	bl	8000288 <__aeabi_dsub>
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be66:	f7f4 fe39 	bl	8000adc <__aeabi_dcmplt>
 800be6a:	2800      	cmp	r0, #0
 800be6c:	f43f aef5 	beq.w	800bc5a <_dtoa_r+0x43a>
 800be70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800be72:	1e73      	subs	r3, r6, #1
 800be74:	9315      	str	r3, [sp, #84]	@ 0x54
 800be76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be7a:	2b30      	cmp	r3, #48	@ 0x30
 800be7c:	d0f8      	beq.n	800be70 <_dtoa_r+0x650>
 800be7e:	9f04      	ldr	r7, [sp, #16]
 800be80:	e73e      	b.n	800bd00 <_dtoa_r+0x4e0>
 800be82:	4b9b      	ldr	r3, [pc, #620]	@ (800c0f0 <_dtoa_r+0x8d0>)
 800be84:	f7f4 fbb8 	bl	80005f8 <__aeabi_dmul>
 800be88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be8c:	e7bc      	b.n	800be08 <_dtoa_r+0x5e8>
 800be8e:	d10c      	bne.n	800beaa <_dtoa_r+0x68a>
 800be90:	4b98      	ldr	r3, [pc, #608]	@ (800c0f4 <_dtoa_r+0x8d4>)
 800be92:	2200      	movs	r2, #0
 800be94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be98:	f7f4 fbae 	bl	80005f8 <__aeabi_dmul>
 800be9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bea0:	f7f4 fe30 	bl	8000b04 <__aeabi_dcmpge>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	f000 8157 	beq.w	800c158 <_dtoa_r+0x938>
 800beaa:	2400      	movs	r4, #0
 800beac:	4625      	mov	r5, r4
 800beae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beb0:	43db      	mvns	r3, r3
 800beb2:	9304      	str	r3, [sp, #16]
 800beb4:	4656      	mov	r6, sl
 800beb6:	2700      	movs	r7, #0
 800beb8:	4621      	mov	r1, r4
 800beba:	4658      	mov	r0, fp
 800bebc:	f000 ff00 	bl	800ccc0 <_Bfree>
 800bec0:	2d00      	cmp	r5, #0
 800bec2:	d0dc      	beq.n	800be7e <_dtoa_r+0x65e>
 800bec4:	b12f      	cbz	r7, 800bed2 <_dtoa_r+0x6b2>
 800bec6:	42af      	cmp	r7, r5
 800bec8:	d003      	beq.n	800bed2 <_dtoa_r+0x6b2>
 800beca:	4639      	mov	r1, r7
 800becc:	4658      	mov	r0, fp
 800bece:	f000 fef7 	bl	800ccc0 <_Bfree>
 800bed2:	4629      	mov	r1, r5
 800bed4:	4658      	mov	r0, fp
 800bed6:	f000 fef3 	bl	800ccc0 <_Bfree>
 800beda:	e7d0      	b.n	800be7e <_dtoa_r+0x65e>
 800bedc:	9704      	str	r7, [sp, #16]
 800bede:	4633      	mov	r3, r6
 800bee0:	461e      	mov	r6, r3
 800bee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bee6:	2a39      	cmp	r2, #57	@ 0x39
 800bee8:	d107      	bne.n	800befa <_dtoa_r+0x6da>
 800beea:	459a      	cmp	sl, r3
 800beec:	d1f8      	bne.n	800bee0 <_dtoa_r+0x6c0>
 800beee:	9a04      	ldr	r2, [sp, #16]
 800bef0:	3201      	adds	r2, #1
 800bef2:	9204      	str	r2, [sp, #16]
 800bef4:	2230      	movs	r2, #48	@ 0x30
 800bef6:	f88a 2000 	strb.w	r2, [sl]
 800befa:	781a      	ldrb	r2, [r3, #0]
 800befc:	3201      	adds	r2, #1
 800befe:	701a      	strb	r2, [r3, #0]
 800bf00:	e7bd      	b.n	800be7e <_dtoa_r+0x65e>
 800bf02:	4b7b      	ldr	r3, [pc, #492]	@ (800c0f0 <_dtoa_r+0x8d0>)
 800bf04:	2200      	movs	r2, #0
 800bf06:	f7f4 fb77 	bl	80005f8 <__aeabi_dmul>
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4604      	mov	r4, r0
 800bf10:	460d      	mov	r5, r1
 800bf12:	f7f4 fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	f43f aebb 	beq.w	800bc92 <_dtoa_r+0x472>
 800bf1c:	e6f0      	b.n	800bd00 <_dtoa_r+0x4e0>
 800bf1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf20:	2a00      	cmp	r2, #0
 800bf22:	f000 80db 	beq.w	800c0dc <_dtoa_r+0x8bc>
 800bf26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf28:	2a01      	cmp	r2, #1
 800bf2a:	f300 80bf 	bgt.w	800c0ac <_dtoa_r+0x88c>
 800bf2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf30:	2a00      	cmp	r2, #0
 800bf32:	f000 80b7 	beq.w	800c0a4 <_dtoa_r+0x884>
 800bf36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bf3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf3c:	4646      	mov	r6, r8
 800bf3e:	9a08      	ldr	r2, [sp, #32]
 800bf40:	2101      	movs	r1, #1
 800bf42:	441a      	add	r2, r3
 800bf44:	4658      	mov	r0, fp
 800bf46:	4498      	add	r8, r3
 800bf48:	9208      	str	r2, [sp, #32]
 800bf4a:	f000 ffb7 	bl	800cebc <__i2b>
 800bf4e:	4605      	mov	r5, r0
 800bf50:	b15e      	cbz	r6, 800bf6a <_dtoa_r+0x74a>
 800bf52:	9b08      	ldr	r3, [sp, #32]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	dd08      	ble.n	800bf6a <_dtoa_r+0x74a>
 800bf58:	42b3      	cmp	r3, r6
 800bf5a:	9a08      	ldr	r2, [sp, #32]
 800bf5c:	bfa8      	it	ge
 800bf5e:	4633      	movge	r3, r6
 800bf60:	eba8 0803 	sub.w	r8, r8, r3
 800bf64:	1af6      	subs	r6, r6, r3
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	9308      	str	r3, [sp, #32]
 800bf6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf6c:	b1f3      	cbz	r3, 800bfac <_dtoa_r+0x78c>
 800bf6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f000 80b7 	beq.w	800c0e4 <_dtoa_r+0x8c4>
 800bf76:	b18c      	cbz	r4, 800bf9c <_dtoa_r+0x77c>
 800bf78:	4629      	mov	r1, r5
 800bf7a:	4622      	mov	r2, r4
 800bf7c:	4658      	mov	r0, fp
 800bf7e:	f001 f85d 	bl	800d03c <__pow5mult>
 800bf82:	464a      	mov	r2, r9
 800bf84:	4601      	mov	r1, r0
 800bf86:	4605      	mov	r5, r0
 800bf88:	4658      	mov	r0, fp
 800bf8a:	f000 ffad 	bl	800cee8 <__multiply>
 800bf8e:	4649      	mov	r1, r9
 800bf90:	9004      	str	r0, [sp, #16]
 800bf92:	4658      	mov	r0, fp
 800bf94:	f000 fe94 	bl	800ccc0 <_Bfree>
 800bf98:	9b04      	ldr	r3, [sp, #16]
 800bf9a:	4699      	mov	r9, r3
 800bf9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf9e:	1b1a      	subs	r2, r3, r4
 800bfa0:	d004      	beq.n	800bfac <_dtoa_r+0x78c>
 800bfa2:	4649      	mov	r1, r9
 800bfa4:	4658      	mov	r0, fp
 800bfa6:	f001 f849 	bl	800d03c <__pow5mult>
 800bfaa:	4681      	mov	r9, r0
 800bfac:	2101      	movs	r1, #1
 800bfae:	4658      	mov	r0, fp
 800bfb0:	f000 ff84 	bl	800cebc <__i2b>
 800bfb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 81cf 	beq.w	800c35c <_dtoa_r+0xb3c>
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	4601      	mov	r1, r0
 800bfc2:	4658      	mov	r0, fp
 800bfc4:	f001 f83a 	bl	800d03c <__pow5mult>
 800bfc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	4604      	mov	r4, r0
 800bfce:	f300 8095 	bgt.w	800c0fc <_dtoa_r+0x8dc>
 800bfd2:	9b02      	ldr	r3, [sp, #8]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f040 8087 	bne.w	800c0e8 <_dtoa_r+0x8c8>
 800bfda:	9b03      	ldr	r3, [sp, #12]
 800bfdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f040 8089 	bne.w	800c0f8 <_dtoa_r+0x8d8>
 800bfe6:	9b03      	ldr	r3, [sp, #12]
 800bfe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bfec:	0d1b      	lsrs	r3, r3, #20
 800bfee:	051b      	lsls	r3, r3, #20
 800bff0:	b12b      	cbz	r3, 800bffe <_dtoa_r+0x7de>
 800bff2:	9b08      	ldr	r3, [sp, #32]
 800bff4:	3301      	adds	r3, #1
 800bff6:	9308      	str	r3, [sp, #32]
 800bff8:	f108 0801 	add.w	r8, r8, #1
 800bffc:	2301      	movs	r3, #1
 800bffe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c002:	2b00      	cmp	r3, #0
 800c004:	f000 81b0 	beq.w	800c368 <_dtoa_r+0xb48>
 800c008:	6923      	ldr	r3, [r4, #16]
 800c00a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c00e:	6918      	ldr	r0, [r3, #16]
 800c010:	f000 ff08 	bl	800ce24 <__hi0bits>
 800c014:	f1c0 0020 	rsb	r0, r0, #32
 800c018:	9b08      	ldr	r3, [sp, #32]
 800c01a:	4418      	add	r0, r3
 800c01c:	f010 001f 	ands.w	r0, r0, #31
 800c020:	d077      	beq.n	800c112 <_dtoa_r+0x8f2>
 800c022:	f1c0 0320 	rsb	r3, r0, #32
 800c026:	2b04      	cmp	r3, #4
 800c028:	dd6b      	ble.n	800c102 <_dtoa_r+0x8e2>
 800c02a:	9b08      	ldr	r3, [sp, #32]
 800c02c:	f1c0 001c 	rsb	r0, r0, #28
 800c030:	4403      	add	r3, r0
 800c032:	4480      	add	r8, r0
 800c034:	4406      	add	r6, r0
 800c036:	9308      	str	r3, [sp, #32]
 800c038:	f1b8 0f00 	cmp.w	r8, #0
 800c03c:	dd05      	ble.n	800c04a <_dtoa_r+0x82a>
 800c03e:	4649      	mov	r1, r9
 800c040:	4642      	mov	r2, r8
 800c042:	4658      	mov	r0, fp
 800c044:	f001 f854 	bl	800d0f0 <__lshift>
 800c048:	4681      	mov	r9, r0
 800c04a:	9b08      	ldr	r3, [sp, #32]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	dd05      	ble.n	800c05c <_dtoa_r+0x83c>
 800c050:	4621      	mov	r1, r4
 800c052:	461a      	mov	r2, r3
 800c054:	4658      	mov	r0, fp
 800c056:	f001 f84b 	bl	800d0f0 <__lshift>
 800c05a:	4604      	mov	r4, r0
 800c05c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d059      	beq.n	800c116 <_dtoa_r+0x8f6>
 800c062:	4621      	mov	r1, r4
 800c064:	4648      	mov	r0, r9
 800c066:	f001 f8af 	bl	800d1c8 <__mcmp>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	da53      	bge.n	800c116 <_dtoa_r+0x8f6>
 800c06e:	1e7b      	subs	r3, r7, #1
 800c070:	9304      	str	r3, [sp, #16]
 800c072:	4649      	mov	r1, r9
 800c074:	2300      	movs	r3, #0
 800c076:	220a      	movs	r2, #10
 800c078:	4658      	mov	r0, fp
 800c07a:	f000 fe43 	bl	800cd04 <__multadd>
 800c07e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c080:	4681      	mov	r9, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 8172 	beq.w	800c36c <_dtoa_r+0xb4c>
 800c088:	2300      	movs	r3, #0
 800c08a:	4629      	mov	r1, r5
 800c08c:	220a      	movs	r2, #10
 800c08e:	4658      	mov	r0, fp
 800c090:	f000 fe38 	bl	800cd04 <__multadd>
 800c094:	9b00      	ldr	r3, [sp, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	4605      	mov	r5, r0
 800c09a:	dc67      	bgt.n	800c16c <_dtoa_r+0x94c>
 800c09c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	dc41      	bgt.n	800c126 <_dtoa_r+0x906>
 800c0a2:	e063      	b.n	800c16c <_dtoa_r+0x94c>
 800c0a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c0a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c0aa:	e746      	b.n	800bf3a <_dtoa_r+0x71a>
 800c0ac:	9b07      	ldr	r3, [sp, #28]
 800c0ae:	1e5c      	subs	r4, r3, #1
 800c0b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0b2:	42a3      	cmp	r3, r4
 800c0b4:	bfbf      	itttt	lt
 800c0b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c0b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c0ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c0bc:	1ae3      	sublt	r3, r4, r3
 800c0be:	bfb4      	ite	lt
 800c0c0:	18d2      	addlt	r2, r2, r3
 800c0c2:	1b1c      	subge	r4, r3, r4
 800c0c4:	9b07      	ldr	r3, [sp, #28]
 800c0c6:	bfbc      	itt	lt
 800c0c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c0ca:	2400      	movlt	r4, #0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	bfb5      	itete	lt
 800c0d0:	eba8 0603 	sublt.w	r6, r8, r3
 800c0d4:	9b07      	ldrge	r3, [sp, #28]
 800c0d6:	2300      	movlt	r3, #0
 800c0d8:	4646      	movge	r6, r8
 800c0da:	e730      	b.n	800bf3e <_dtoa_r+0x71e>
 800c0dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c0de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c0e0:	4646      	mov	r6, r8
 800c0e2:	e735      	b.n	800bf50 <_dtoa_r+0x730>
 800c0e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0e6:	e75c      	b.n	800bfa2 <_dtoa_r+0x782>
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	e788      	b.n	800bffe <_dtoa_r+0x7de>
 800c0ec:	3fe00000 	.word	0x3fe00000
 800c0f0:	40240000 	.word	0x40240000
 800c0f4:	40140000 	.word	0x40140000
 800c0f8:	9b02      	ldr	r3, [sp, #8]
 800c0fa:	e780      	b.n	800bffe <_dtoa_r+0x7de>
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c100:	e782      	b.n	800c008 <_dtoa_r+0x7e8>
 800c102:	d099      	beq.n	800c038 <_dtoa_r+0x818>
 800c104:	9a08      	ldr	r2, [sp, #32]
 800c106:	331c      	adds	r3, #28
 800c108:	441a      	add	r2, r3
 800c10a:	4498      	add	r8, r3
 800c10c:	441e      	add	r6, r3
 800c10e:	9208      	str	r2, [sp, #32]
 800c110:	e792      	b.n	800c038 <_dtoa_r+0x818>
 800c112:	4603      	mov	r3, r0
 800c114:	e7f6      	b.n	800c104 <_dtoa_r+0x8e4>
 800c116:	9b07      	ldr	r3, [sp, #28]
 800c118:	9704      	str	r7, [sp, #16]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	dc20      	bgt.n	800c160 <_dtoa_r+0x940>
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c122:	2b02      	cmp	r3, #2
 800c124:	dd1e      	ble.n	800c164 <_dtoa_r+0x944>
 800c126:	9b00      	ldr	r3, [sp, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f47f aec0 	bne.w	800beae <_dtoa_r+0x68e>
 800c12e:	4621      	mov	r1, r4
 800c130:	2205      	movs	r2, #5
 800c132:	4658      	mov	r0, fp
 800c134:	f000 fde6 	bl	800cd04 <__multadd>
 800c138:	4601      	mov	r1, r0
 800c13a:	4604      	mov	r4, r0
 800c13c:	4648      	mov	r0, r9
 800c13e:	f001 f843 	bl	800d1c8 <__mcmp>
 800c142:	2800      	cmp	r0, #0
 800c144:	f77f aeb3 	ble.w	800beae <_dtoa_r+0x68e>
 800c148:	4656      	mov	r6, sl
 800c14a:	2331      	movs	r3, #49	@ 0x31
 800c14c:	f806 3b01 	strb.w	r3, [r6], #1
 800c150:	9b04      	ldr	r3, [sp, #16]
 800c152:	3301      	adds	r3, #1
 800c154:	9304      	str	r3, [sp, #16]
 800c156:	e6ae      	b.n	800beb6 <_dtoa_r+0x696>
 800c158:	9c07      	ldr	r4, [sp, #28]
 800c15a:	9704      	str	r7, [sp, #16]
 800c15c:	4625      	mov	r5, r4
 800c15e:	e7f3      	b.n	800c148 <_dtoa_r+0x928>
 800c160:	9b07      	ldr	r3, [sp, #28]
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c166:	2b00      	cmp	r3, #0
 800c168:	f000 8104 	beq.w	800c374 <_dtoa_r+0xb54>
 800c16c:	2e00      	cmp	r6, #0
 800c16e:	dd05      	ble.n	800c17c <_dtoa_r+0x95c>
 800c170:	4629      	mov	r1, r5
 800c172:	4632      	mov	r2, r6
 800c174:	4658      	mov	r0, fp
 800c176:	f000 ffbb 	bl	800d0f0 <__lshift>
 800c17a:	4605      	mov	r5, r0
 800c17c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d05a      	beq.n	800c238 <_dtoa_r+0xa18>
 800c182:	6869      	ldr	r1, [r5, #4]
 800c184:	4658      	mov	r0, fp
 800c186:	f000 fd5b 	bl	800cc40 <_Balloc>
 800c18a:	4606      	mov	r6, r0
 800c18c:	b928      	cbnz	r0, 800c19a <_dtoa_r+0x97a>
 800c18e:	4b84      	ldr	r3, [pc, #528]	@ (800c3a0 <_dtoa_r+0xb80>)
 800c190:	4602      	mov	r2, r0
 800c192:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c196:	f7ff bb5a 	b.w	800b84e <_dtoa_r+0x2e>
 800c19a:	692a      	ldr	r2, [r5, #16]
 800c19c:	3202      	adds	r2, #2
 800c19e:	0092      	lsls	r2, r2, #2
 800c1a0:	f105 010c 	add.w	r1, r5, #12
 800c1a4:	300c      	adds	r0, #12
 800c1a6:	f7ff fa76 	bl	800b696 <memcpy>
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	4631      	mov	r1, r6
 800c1ae:	4658      	mov	r0, fp
 800c1b0:	f000 ff9e 	bl	800d0f0 <__lshift>
 800c1b4:	f10a 0301 	add.w	r3, sl, #1
 800c1b8:	9307      	str	r3, [sp, #28]
 800c1ba:	9b00      	ldr	r3, [sp, #0]
 800c1bc:	4453      	add	r3, sl
 800c1be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1c0:	9b02      	ldr	r3, [sp, #8]
 800c1c2:	f003 0301 	and.w	r3, r3, #1
 800c1c6:	462f      	mov	r7, r5
 800c1c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1ca:	4605      	mov	r5, r0
 800c1cc:	9b07      	ldr	r3, [sp, #28]
 800c1ce:	4621      	mov	r1, r4
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	4648      	mov	r0, r9
 800c1d4:	9300      	str	r3, [sp, #0]
 800c1d6:	f7ff fa9b 	bl	800b710 <quorem>
 800c1da:	4639      	mov	r1, r7
 800c1dc:	9002      	str	r0, [sp, #8]
 800c1de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c1e2:	4648      	mov	r0, r9
 800c1e4:	f000 fff0 	bl	800d1c8 <__mcmp>
 800c1e8:	462a      	mov	r2, r5
 800c1ea:	9008      	str	r0, [sp, #32]
 800c1ec:	4621      	mov	r1, r4
 800c1ee:	4658      	mov	r0, fp
 800c1f0:	f001 f806 	bl	800d200 <__mdiff>
 800c1f4:	68c2      	ldr	r2, [r0, #12]
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	bb02      	cbnz	r2, 800c23c <_dtoa_r+0xa1c>
 800c1fa:	4601      	mov	r1, r0
 800c1fc:	4648      	mov	r0, r9
 800c1fe:	f000 ffe3 	bl	800d1c8 <__mcmp>
 800c202:	4602      	mov	r2, r0
 800c204:	4631      	mov	r1, r6
 800c206:	4658      	mov	r0, fp
 800c208:	920e      	str	r2, [sp, #56]	@ 0x38
 800c20a:	f000 fd59 	bl	800ccc0 <_Bfree>
 800c20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c210:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c212:	9e07      	ldr	r6, [sp, #28]
 800c214:	ea43 0102 	orr.w	r1, r3, r2
 800c218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c21a:	4319      	orrs	r1, r3
 800c21c:	d110      	bne.n	800c240 <_dtoa_r+0xa20>
 800c21e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c222:	d029      	beq.n	800c278 <_dtoa_r+0xa58>
 800c224:	9b08      	ldr	r3, [sp, #32]
 800c226:	2b00      	cmp	r3, #0
 800c228:	dd02      	ble.n	800c230 <_dtoa_r+0xa10>
 800c22a:	9b02      	ldr	r3, [sp, #8]
 800c22c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c230:	9b00      	ldr	r3, [sp, #0]
 800c232:	f883 8000 	strb.w	r8, [r3]
 800c236:	e63f      	b.n	800beb8 <_dtoa_r+0x698>
 800c238:	4628      	mov	r0, r5
 800c23a:	e7bb      	b.n	800c1b4 <_dtoa_r+0x994>
 800c23c:	2201      	movs	r2, #1
 800c23e:	e7e1      	b.n	800c204 <_dtoa_r+0x9e4>
 800c240:	9b08      	ldr	r3, [sp, #32]
 800c242:	2b00      	cmp	r3, #0
 800c244:	db04      	blt.n	800c250 <_dtoa_r+0xa30>
 800c246:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c248:	430b      	orrs	r3, r1
 800c24a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c24c:	430b      	orrs	r3, r1
 800c24e:	d120      	bne.n	800c292 <_dtoa_r+0xa72>
 800c250:	2a00      	cmp	r2, #0
 800c252:	dded      	ble.n	800c230 <_dtoa_r+0xa10>
 800c254:	4649      	mov	r1, r9
 800c256:	2201      	movs	r2, #1
 800c258:	4658      	mov	r0, fp
 800c25a:	f000 ff49 	bl	800d0f0 <__lshift>
 800c25e:	4621      	mov	r1, r4
 800c260:	4681      	mov	r9, r0
 800c262:	f000 ffb1 	bl	800d1c8 <__mcmp>
 800c266:	2800      	cmp	r0, #0
 800c268:	dc03      	bgt.n	800c272 <_dtoa_r+0xa52>
 800c26a:	d1e1      	bne.n	800c230 <_dtoa_r+0xa10>
 800c26c:	f018 0f01 	tst.w	r8, #1
 800c270:	d0de      	beq.n	800c230 <_dtoa_r+0xa10>
 800c272:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c276:	d1d8      	bne.n	800c22a <_dtoa_r+0xa0a>
 800c278:	9a00      	ldr	r2, [sp, #0]
 800c27a:	2339      	movs	r3, #57	@ 0x39
 800c27c:	7013      	strb	r3, [r2, #0]
 800c27e:	4633      	mov	r3, r6
 800c280:	461e      	mov	r6, r3
 800c282:	3b01      	subs	r3, #1
 800c284:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c288:	2a39      	cmp	r2, #57	@ 0x39
 800c28a:	d052      	beq.n	800c332 <_dtoa_r+0xb12>
 800c28c:	3201      	adds	r2, #1
 800c28e:	701a      	strb	r2, [r3, #0]
 800c290:	e612      	b.n	800beb8 <_dtoa_r+0x698>
 800c292:	2a00      	cmp	r2, #0
 800c294:	dd07      	ble.n	800c2a6 <_dtoa_r+0xa86>
 800c296:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c29a:	d0ed      	beq.n	800c278 <_dtoa_r+0xa58>
 800c29c:	9a00      	ldr	r2, [sp, #0]
 800c29e:	f108 0301 	add.w	r3, r8, #1
 800c2a2:	7013      	strb	r3, [r2, #0]
 800c2a4:	e608      	b.n	800beb8 <_dtoa_r+0x698>
 800c2a6:	9b07      	ldr	r3, [sp, #28]
 800c2a8:	9a07      	ldr	r2, [sp, #28]
 800c2aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c2ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d028      	beq.n	800c306 <_dtoa_r+0xae6>
 800c2b4:	4649      	mov	r1, r9
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	220a      	movs	r2, #10
 800c2ba:	4658      	mov	r0, fp
 800c2bc:	f000 fd22 	bl	800cd04 <__multadd>
 800c2c0:	42af      	cmp	r7, r5
 800c2c2:	4681      	mov	r9, r0
 800c2c4:	f04f 0300 	mov.w	r3, #0
 800c2c8:	f04f 020a 	mov.w	r2, #10
 800c2cc:	4639      	mov	r1, r7
 800c2ce:	4658      	mov	r0, fp
 800c2d0:	d107      	bne.n	800c2e2 <_dtoa_r+0xac2>
 800c2d2:	f000 fd17 	bl	800cd04 <__multadd>
 800c2d6:	4607      	mov	r7, r0
 800c2d8:	4605      	mov	r5, r0
 800c2da:	9b07      	ldr	r3, [sp, #28]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	9307      	str	r3, [sp, #28]
 800c2e0:	e774      	b.n	800c1cc <_dtoa_r+0x9ac>
 800c2e2:	f000 fd0f 	bl	800cd04 <__multadd>
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	4607      	mov	r7, r0
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	220a      	movs	r2, #10
 800c2ee:	4658      	mov	r0, fp
 800c2f0:	f000 fd08 	bl	800cd04 <__multadd>
 800c2f4:	4605      	mov	r5, r0
 800c2f6:	e7f0      	b.n	800c2da <_dtoa_r+0xaba>
 800c2f8:	9b00      	ldr	r3, [sp, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	bfcc      	ite	gt
 800c2fe:	461e      	movgt	r6, r3
 800c300:	2601      	movle	r6, #1
 800c302:	4456      	add	r6, sl
 800c304:	2700      	movs	r7, #0
 800c306:	4649      	mov	r1, r9
 800c308:	2201      	movs	r2, #1
 800c30a:	4658      	mov	r0, fp
 800c30c:	f000 fef0 	bl	800d0f0 <__lshift>
 800c310:	4621      	mov	r1, r4
 800c312:	4681      	mov	r9, r0
 800c314:	f000 ff58 	bl	800d1c8 <__mcmp>
 800c318:	2800      	cmp	r0, #0
 800c31a:	dcb0      	bgt.n	800c27e <_dtoa_r+0xa5e>
 800c31c:	d102      	bne.n	800c324 <_dtoa_r+0xb04>
 800c31e:	f018 0f01 	tst.w	r8, #1
 800c322:	d1ac      	bne.n	800c27e <_dtoa_r+0xa5e>
 800c324:	4633      	mov	r3, r6
 800c326:	461e      	mov	r6, r3
 800c328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c32c:	2a30      	cmp	r2, #48	@ 0x30
 800c32e:	d0fa      	beq.n	800c326 <_dtoa_r+0xb06>
 800c330:	e5c2      	b.n	800beb8 <_dtoa_r+0x698>
 800c332:	459a      	cmp	sl, r3
 800c334:	d1a4      	bne.n	800c280 <_dtoa_r+0xa60>
 800c336:	9b04      	ldr	r3, [sp, #16]
 800c338:	3301      	adds	r3, #1
 800c33a:	9304      	str	r3, [sp, #16]
 800c33c:	2331      	movs	r3, #49	@ 0x31
 800c33e:	f88a 3000 	strb.w	r3, [sl]
 800c342:	e5b9      	b.n	800beb8 <_dtoa_r+0x698>
 800c344:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c346:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c3a4 <_dtoa_r+0xb84>
 800c34a:	b11b      	cbz	r3, 800c354 <_dtoa_r+0xb34>
 800c34c:	f10a 0308 	add.w	r3, sl, #8
 800c350:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c352:	6013      	str	r3, [r2, #0]
 800c354:	4650      	mov	r0, sl
 800c356:	b019      	add	sp, #100	@ 0x64
 800c358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c35e:	2b01      	cmp	r3, #1
 800c360:	f77f ae37 	ble.w	800bfd2 <_dtoa_r+0x7b2>
 800c364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c366:	930a      	str	r3, [sp, #40]	@ 0x28
 800c368:	2001      	movs	r0, #1
 800c36a:	e655      	b.n	800c018 <_dtoa_r+0x7f8>
 800c36c:	9b00      	ldr	r3, [sp, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f77f aed6 	ble.w	800c120 <_dtoa_r+0x900>
 800c374:	4656      	mov	r6, sl
 800c376:	4621      	mov	r1, r4
 800c378:	4648      	mov	r0, r9
 800c37a:	f7ff f9c9 	bl	800b710 <quorem>
 800c37e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c382:	f806 8b01 	strb.w	r8, [r6], #1
 800c386:	9b00      	ldr	r3, [sp, #0]
 800c388:	eba6 020a 	sub.w	r2, r6, sl
 800c38c:	4293      	cmp	r3, r2
 800c38e:	ddb3      	ble.n	800c2f8 <_dtoa_r+0xad8>
 800c390:	4649      	mov	r1, r9
 800c392:	2300      	movs	r3, #0
 800c394:	220a      	movs	r2, #10
 800c396:	4658      	mov	r0, fp
 800c398:	f000 fcb4 	bl	800cd04 <__multadd>
 800c39c:	4681      	mov	r9, r0
 800c39e:	e7ea      	b.n	800c376 <_dtoa_r+0xb56>
 800c3a0:	0800ff04 	.word	0x0800ff04
 800c3a4:	0800fe9f 	.word	0x0800fe9f

0800c3a8 <_free_r>:
 800c3a8:	b538      	push	{r3, r4, r5, lr}
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	2900      	cmp	r1, #0
 800c3ae:	d041      	beq.n	800c434 <_free_r+0x8c>
 800c3b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3b4:	1f0c      	subs	r4, r1, #4
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	bfb8      	it	lt
 800c3ba:	18e4      	addlt	r4, r4, r3
 800c3bc:	f000 fc34 	bl	800cc28 <__malloc_lock>
 800c3c0:	4a1d      	ldr	r2, [pc, #116]	@ (800c438 <_free_r+0x90>)
 800c3c2:	6813      	ldr	r3, [r2, #0]
 800c3c4:	b933      	cbnz	r3, 800c3d4 <_free_r+0x2c>
 800c3c6:	6063      	str	r3, [r4, #4]
 800c3c8:	6014      	str	r4, [r2, #0]
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3d0:	f000 bc30 	b.w	800cc34 <__malloc_unlock>
 800c3d4:	42a3      	cmp	r3, r4
 800c3d6:	d908      	bls.n	800c3ea <_free_r+0x42>
 800c3d8:	6820      	ldr	r0, [r4, #0]
 800c3da:	1821      	adds	r1, r4, r0
 800c3dc:	428b      	cmp	r3, r1
 800c3de:	bf01      	itttt	eq
 800c3e0:	6819      	ldreq	r1, [r3, #0]
 800c3e2:	685b      	ldreq	r3, [r3, #4]
 800c3e4:	1809      	addeq	r1, r1, r0
 800c3e6:	6021      	streq	r1, [r4, #0]
 800c3e8:	e7ed      	b.n	800c3c6 <_free_r+0x1e>
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	b10b      	cbz	r3, 800c3f4 <_free_r+0x4c>
 800c3f0:	42a3      	cmp	r3, r4
 800c3f2:	d9fa      	bls.n	800c3ea <_free_r+0x42>
 800c3f4:	6811      	ldr	r1, [r2, #0]
 800c3f6:	1850      	adds	r0, r2, r1
 800c3f8:	42a0      	cmp	r0, r4
 800c3fa:	d10b      	bne.n	800c414 <_free_r+0x6c>
 800c3fc:	6820      	ldr	r0, [r4, #0]
 800c3fe:	4401      	add	r1, r0
 800c400:	1850      	adds	r0, r2, r1
 800c402:	4283      	cmp	r3, r0
 800c404:	6011      	str	r1, [r2, #0]
 800c406:	d1e0      	bne.n	800c3ca <_free_r+0x22>
 800c408:	6818      	ldr	r0, [r3, #0]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	6053      	str	r3, [r2, #4]
 800c40e:	4408      	add	r0, r1
 800c410:	6010      	str	r0, [r2, #0]
 800c412:	e7da      	b.n	800c3ca <_free_r+0x22>
 800c414:	d902      	bls.n	800c41c <_free_r+0x74>
 800c416:	230c      	movs	r3, #12
 800c418:	602b      	str	r3, [r5, #0]
 800c41a:	e7d6      	b.n	800c3ca <_free_r+0x22>
 800c41c:	6820      	ldr	r0, [r4, #0]
 800c41e:	1821      	adds	r1, r4, r0
 800c420:	428b      	cmp	r3, r1
 800c422:	bf04      	itt	eq
 800c424:	6819      	ldreq	r1, [r3, #0]
 800c426:	685b      	ldreq	r3, [r3, #4]
 800c428:	6063      	str	r3, [r4, #4]
 800c42a:	bf04      	itt	eq
 800c42c:	1809      	addeq	r1, r1, r0
 800c42e:	6021      	streq	r1, [r4, #0]
 800c430:	6054      	str	r4, [r2, #4]
 800c432:	e7ca      	b.n	800c3ca <_free_r+0x22>
 800c434:	bd38      	pop	{r3, r4, r5, pc}
 800c436:	bf00      	nop
 800c438:	20000894 	.word	0x20000894

0800c43c <rshift>:
 800c43c:	6903      	ldr	r3, [r0, #16]
 800c43e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c442:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c446:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c44a:	f100 0414 	add.w	r4, r0, #20
 800c44e:	dd45      	ble.n	800c4dc <rshift+0xa0>
 800c450:	f011 011f 	ands.w	r1, r1, #31
 800c454:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c458:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c45c:	d10c      	bne.n	800c478 <rshift+0x3c>
 800c45e:	f100 0710 	add.w	r7, r0, #16
 800c462:	4629      	mov	r1, r5
 800c464:	42b1      	cmp	r1, r6
 800c466:	d334      	bcc.n	800c4d2 <rshift+0x96>
 800c468:	1a9b      	subs	r3, r3, r2
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	1eea      	subs	r2, r5, #3
 800c46e:	4296      	cmp	r6, r2
 800c470:	bf38      	it	cc
 800c472:	2300      	movcc	r3, #0
 800c474:	4423      	add	r3, r4
 800c476:	e015      	b.n	800c4a4 <rshift+0x68>
 800c478:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c47c:	f1c1 0820 	rsb	r8, r1, #32
 800c480:	40cf      	lsrs	r7, r1
 800c482:	f105 0e04 	add.w	lr, r5, #4
 800c486:	46a1      	mov	r9, r4
 800c488:	4576      	cmp	r6, lr
 800c48a:	46f4      	mov	ip, lr
 800c48c:	d815      	bhi.n	800c4ba <rshift+0x7e>
 800c48e:	1a9a      	subs	r2, r3, r2
 800c490:	0092      	lsls	r2, r2, #2
 800c492:	3a04      	subs	r2, #4
 800c494:	3501      	adds	r5, #1
 800c496:	42ae      	cmp	r6, r5
 800c498:	bf38      	it	cc
 800c49a:	2200      	movcc	r2, #0
 800c49c:	18a3      	adds	r3, r4, r2
 800c49e:	50a7      	str	r7, [r4, r2]
 800c4a0:	b107      	cbz	r7, 800c4a4 <rshift+0x68>
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	1b1a      	subs	r2, r3, r4
 800c4a6:	42a3      	cmp	r3, r4
 800c4a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4ac:	bf08      	it	eq
 800c4ae:	2300      	moveq	r3, #0
 800c4b0:	6102      	str	r2, [r0, #16]
 800c4b2:	bf08      	it	eq
 800c4b4:	6143      	streq	r3, [r0, #20]
 800c4b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4ba:	f8dc c000 	ldr.w	ip, [ip]
 800c4be:	fa0c fc08 	lsl.w	ip, ip, r8
 800c4c2:	ea4c 0707 	orr.w	r7, ip, r7
 800c4c6:	f849 7b04 	str.w	r7, [r9], #4
 800c4ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c4ce:	40cf      	lsrs	r7, r1
 800c4d0:	e7da      	b.n	800c488 <rshift+0x4c>
 800c4d2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c4d6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c4da:	e7c3      	b.n	800c464 <rshift+0x28>
 800c4dc:	4623      	mov	r3, r4
 800c4de:	e7e1      	b.n	800c4a4 <rshift+0x68>

0800c4e0 <__hexdig_fun>:
 800c4e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c4e4:	2b09      	cmp	r3, #9
 800c4e6:	d802      	bhi.n	800c4ee <__hexdig_fun+0xe>
 800c4e8:	3820      	subs	r0, #32
 800c4ea:	b2c0      	uxtb	r0, r0
 800c4ec:	4770      	bx	lr
 800c4ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c4f2:	2b05      	cmp	r3, #5
 800c4f4:	d801      	bhi.n	800c4fa <__hexdig_fun+0x1a>
 800c4f6:	3847      	subs	r0, #71	@ 0x47
 800c4f8:	e7f7      	b.n	800c4ea <__hexdig_fun+0xa>
 800c4fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c4fe:	2b05      	cmp	r3, #5
 800c500:	d801      	bhi.n	800c506 <__hexdig_fun+0x26>
 800c502:	3827      	subs	r0, #39	@ 0x27
 800c504:	e7f1      	b.n	800c4ea <__hexdig_fun+0xa>
 800c506:	2000      	movs	r0, #0
 800c508:	4770      	bx	lr
	...

0800c50c <__gethex>:
 800c50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c510:	b085      	sub	sp, #20
 800c512:	468a      	mov	sl, r1
 800c514:	9302      	str	r3, [sp, #8]
 800c516:	680b      	ldr	r3, [r1, #0]
 800c518:	9001      	str	r0, [sp, #4]
 800c51a:	4690      	mov	r8, r2
 800c51c:	1c9c      	adds	r4, r3, #2
 800c51e:	46a1      	mov	r9, r4
 800c520:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c524:	2830      	cmp	r0, #48	@ 0x30
 800c526:	d0fa      	beq.n	800c51e <__gethex+0x12>
 800c528:	eba9 0303 	sub.w	r3, r9, r3
 800c52c:	f1a3 0b02 	sub.w	fp, r3, #2
 800c530:	f7ff ffd6 	bl	800c4e0 <__hexdig_fun>
 800c534:	4605      	mov	r5, r0
 800c536:	2800      	cmp	r0, #0
 800c538:	d168      	bne.n	800c60c <__gethex+0x100>
 800c53a:	49a0      	ldr	r1, [pc, #640]	@ (800c7bc <__gethex+0x2b0>)
 800c53c:	2201      	movs	r2, #1
 800c53e:	4648      	mov	r0, r9
 800c540:	f7fe ffc3 	bl	800b4ca <strncmp>
 800c544:	4607      	mov	r7, r0
 800c546:	2800      	cmp	r0, #0
 800c548:	d167      	bne.n	800c61a <__gethex+0x10e>
 800c54a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c54e:	4626      	mov	r6, r4
 800c550:	f7ff ffc6 	bl	800c4e0 <__hexdig_fun>
 800c554:	2800      	cmp	r0, #0
 800c556:	d062      	beq.n	800c61e <__gethex+0x112>
 800c558:	4623      	mov	r3, r4
 800c55a:	7818      	ldrb	r0, [r3, #0]
 800c55c:	2830      	cmp	r0, #48	@ 0x30
 800c55e:	4699      	mov	r9, r3
 800c560:	f103 0301 	add.w	r3, r3, #1
 800c564:	d0f9      	beq.n	800c55a <__gethex+0x4e>
 800c566:	f7ff ffbb 	bl	800c4e0 <__hexdig_fun>
 800c56a:	fab0 f580 	clz	r5, r0
 800c56e:	096d      	lsrs	r5, r5, #5
 800c570:	f04f 0b01 	mov.w	fp, #1
 800c574:	464a      	mov	r2, r9
 800c576:	4616      	mov	r6, r2
 800c578:	3201      	adds	r2, #1
 800c57a:	7830      	ldrb	r0, [r6, #0]
 800c57c:	f7ff ffb0 	bl	800c4e0 <__hexdig_fun>
 800c580:	2800      	cmp	r0, #0
 800c582:	d1f8      	bne.n	800c576 <__gethex+0x6a>
 800c584:	498d      	ldr	r1, [pc, #564]	@ (800c7bc <__gethex+0x2b0>)
 800c586:	2201      	movs	r2, #1
 800c588:	4630      	mov	r0, r6
 800c58a:	f7fe ff9e 	bl	800b4ca <strncmp>
 800c58e:	2800      	cmp	r0, #0
 800c590:	d13f      	bne.n	800c612 <__gethex+0x106>
 800c592:	b944      	cbnz	r4, 800c5a6 <__gethex+0x9a>
 800c594:	1c74      	adds	r4, r6, #1
 800c596:	4622      	mov	r2, r4
 800c598:	4616      	mov	r6, r2
 800c59a:	3201      	adds	r2, #1
 800c59c:	7830      	ldrb	r0, [r6, #0]
 800c59e:	f7ff ff9f 	bl	800c4e0 <__hexdig_fun>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d1f8      	bne.n	800c598 <__gethex+0x8c>
 800c5a6:	1ba4      	subs	r4, r4, r6
 800c5a8:	00a7      	lsls	r7, r4, #2
 800c5aa:	7833      	ldrb	r3, [r6, #0]
 800c5ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c5b0:	2b50      	cmp	r3, #80	@ 0x50
 800c5b2:	d13e      	bne.n	800c632 <__gethex+0x126>
 800c5b4:	7873      	ldrb	r3, [r6, #1]
 800c5b6:	2b2b      	cmp	r3, #43	@ 0x2b
 800c5b8:	d033      	beq.n	800c622 <__gethex+0x116>
 800c5ba:	2b2d      	cmp	r3, #45	@ 0x2d
 800c5bc:	d034      	beq.n	800c628 <__gethex+0x11c>
 800c5be:	1c71      	adds	r1, r6, #1
 800c5c0:	2400      	movs	r4, #0
 800c5c2:	7808      	ldrb	r0, [r1, #0]
 800c5c4:	f7ff ff8c 	bl	800c4e0 <__hexdig_fun>
 800c5c8:	1e43      	subs	r3, r0, #1
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	2b18      	cmp	r3, #24
 800c5ce:	d830      	bhi.n	800c632 <__gethex+0x126>
 800c5d0:	f1a0 0210 	sub.w	r2, r0, #16
 800c5d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c5d8:	f7ff ff82 	bl	800c4e0 <__hexdig_fun>
 800c5dc:	f100 3cff 	add.w	ip, r0, #4294967295
 800c5e0:	fa5f fc8c 	uxtb.w	ip, ip
 800c5e4:	f1bc 0f18 	cmp.w	ip, #24
 800c5e8:	f04f 030a 	mov.w	r3, #10
 800c5ec:	d91e      	bls.n	800c62c <__gethex+0x120>
 800c5ee:	b104      	cbz	r4, 800c5f2 <__gethex+0xe6>
 800c5f0:	4252      	negs	r2, r2
 800c5f2:	4417      	add	r7, r2
 800c5f4:	f8ca 1000 	str.w	r1, [sl]
 800c5f8:	b1ed      	cbz	r5, 800c636 <__gethex+0x12a>
 800c5fa:	f1bb 0f00 	cmp.w	fp, #0
 800c5fe:	bf0c      	ite	eq
 800c600:	2506      	moveq	r5, #6
 800c602:	2500      	movne	r5, #0
 800c604:	4628      	mov	r0, r5
 800c606:	b005      	add	sp, #20
 800c608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c60c:	2500      	movs	r5, #0
 800c60e:	462c      	mov	r4, r5
 800c610:	e7b0      	b.n	800c574 <__gethex+0x68>
 800c612:	2c00      	cmp	r4, #0
 800c614:	d1c7      	bne.n	800c5a6 <__gethex+0x9a>
 800c616:	4627      	mov	r7, r4
 800c618:	e7c7      	b.n	800c5aa <__gethex+0x9e>
 800c61a:	464e      	mov	r6, r9
 800c61c:	462f      	mov	r7, r5
 800c61e:	2501      	movs	r5, #1
 800c620:	e7c3      	b.n	800c5aa <__gethex+0x9e>
 800c622:	2400      	movs	r4, #0
 800c624:	1cb1      	adds	r1, r6, #2
 800c626:	e7cc      	b.n	800c5c2 <__gethex+0xb6>
 800c628:	2401      	movs	r4, #1
 800c62a:	e7fb      	b.n	800c624 <__gethex+0x118>
 800c62c:	fb03 0002 	mla	r0, r3, r2, r0
 800c630:	e7ce      	b.n	800c5d0 <__gethex+0xc4>
 800c632:	4631      	mov	r1, r6
 800c634:	e7de      	b.n	800c5f4 <__gethex+0xe8>
 800c636:	eba6 0309 	sub.w	r3, r6, r9
 800c63a:	3b01      	subs	r3, #1
 800c63c:	4629      	mov	r1, r5
 800c63e:	2b07      	cmp	r3, #7
 800c640:	dc0a      	bgt.n	800c658 <__gethex+0x14c>
 800c642:	9801      	ldr	r0, [sp, #4]
 800c644:	f000 fafc 	bl	800cc40 <_Balloc>
 800c648:	4604      	mov	r4, r0
 800c64a:	b940      	cbnz	r0, 800c65e <__gethex+0x152>
 800c64c:	4b5c      	ldr	r3, [pc, #368]	@ (800c7c0 <__gethex+0x2b4>)
 800c64e:	4602      	mov	r2, r0
 800c650:	21e4      	movs	r1, #228	@ 0xe4
 800c652:	485c      	ldr	r0, [pc, #368]	@ (800c7c4 <__gethex+0x2b8>)
 800c654:	f7ff f83e 	bl	800b6d4 <__assert_func>
 800c658:	3101      	adds	r1, #1
 800c65a:	105b      	asrs	r3, r3, #1
 800c65c:	e7ef      	b.n	800c63e <__gethex+0x132>
 800c65e:	f100 0a14 	add.w	sl, r0, #20
 800c662:	2300      	movs	r3, #0
 800c664:	4655      	mov	r5, sl
 800c666:	469b      	mov	fp, r3
 800c668:	45b1      	cmp	r9, r6
 800c66a:	d337      	bcc.n	800c6dc <__gethex+0x1d0>
 800c66c:	f845 bb04 	str.w	fp, [r5], #4
 800c670:	eba5 050a 	sub.w	r5, r5, sl
 800c674:	10ad      	asrs	r5, r5, #2
 800c676:	6125      	str	r5, [r4, #16]
 800c678:	4658      	mov	r0, fp
 800c67a:	f000 fbd3 	bl	800ce24 <__hi0bits>
 800c67e:	016d      	lsls	r5, r5, #5
 800c680:	f8d8 6000 	ldr.w	r6, [r8]
 800c684:	1a2d      	subs	r5, r5, r0
 800c686:	42b5      	cmp	r5, r6
 800c688:	dd54      	ble.n	800c734 <__gethex+0x228>
 800c68a:	1bad      	subs	r5, r5, r6
 800c68c:	4629      	mov	r1, r5
 800c68e:	4620      	mov	r0, r4
 800c690:	f000 ff67 	bl	800d562 <__any_on>
 800c694:	4681      	mov	r9, r0
 800c696:	b178      	cbz	r0, 800c6b8 <__gethex+0x1ac>
 800c698:	1e6b      	subs	r3, r5, #1
 800c69a:	1159      	asrs	r1, r3, #5
 800c69c:	f003 021f 	and.w	r2, r3, #31
 800c6a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c6a4:	f04f 0901 	mov.w	r9, #1
 800c6a8:	fa09 f202 	lsl.w	r2, r9, r2
 800c6ac:	420a      	tst	r2, r1
 800c6ae:	d003      	beq.n	800c6b8 <__gethex+0x1ac>
 800c6b0:	454b      	cmp	r3, r9
 800c6b2:	dc36      	bgt.n	800c722 <__gethex+0x216>
 800c6b4:	f04f 0902 	mov.w	r9, #2
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f7ff febe 	bl	800c43c <rshift>
 800c6c0:	442f      	add	r7, r5
 800c6c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6c6:	42bb      	cmp	r3, r7
 800c6c8:	da42      	bge.n	800c750 <__gethex+0x244>
 800c6ca:	9801      	ldr	r0, [sp, #4]
 800c6cc:	4621      	mov	r1, r4
 800c6ce:	f000 faf7 	bl	800ccc0 <_Bfree>
 800c6d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	6013      	str	r3, [r2, #0]
 800c6d8:	25a3      	movs	r5, #163	@ 0xa3
 800c6da:	e793      	b.n	800c604 <__gethex+0xf8>
 800c6dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c6e0:	2a2e      	cmp	r2, #46	@ 0x2e
 800c6e2:	d012      	beq.n	800c70a <__gethex+0x1fe>
 800c6e4:	2b20      	cmp	r3, #32
 800c6e6:	d104      	bne.n	800c6f2 <__gethex+0x1e6>
 800c6e8:	f845 bb04 	str.w	fp, [r5], #4
 800c6ec:	f04f 0b00 	mov.w	fp, #0
 800c6f0:	465b      	mov	r3, fp
 800c6f2:	7830      	ldrb	r0, [r6, #0]
 800c6f4:	9303      	str	r3, [sp, #12]
 800c6f6:	f7ff fef3 	bl	800c4e0 <__hexdig_fun>
 800c6fa:	9b03      	ldr	r3, [sp, #12]
 800c6fc:	f000 000f 	and.w	r0, r0, #15
 800c700:	4098      	lsls	r0, r3
 800c702:	ea4b 0b00 	orr.w	fp, fp, r0
 800c706:	3304      	adds	r3, #4
 800c708:	e7ae      	b.n	800c668 <__gethex+0x15c>
 800c70a:	45b1      	cmp	r9, r6
 800c70c:	d8ea      	bhi.n	800c6e4 <__gethex+0x1d8>
 800c70e:	492b      	ldr	r1, [pc, #172]	@ (800c7bc <__gethex+0x2b0>)
 800c710:	9303      	str	r3, [sp, #12]
 800c712:	2201      	movs	r2, #1
 800c714:	4630      	mov	r0, r6
 800c716:	f7fe fed8 	bl	800b4ca <strncmp>
 800c71a:	9b03      	ldr	r3, [sp, #12]
 800c71c:	2800      	cmp	r0, #0
 800c71e:	d1e1      	bne.n	800c6e4 <__gethex+0x1d8>
 800c720:	e7a2      	b.n	800c668 <__gethex+0x15c>
 800c722:	1ea9      	subs	r1, r5, #2
 800c724:	4620      	mov	r0, r4
 800c726:	f000 ff1c 	bl	800d562 <__any_on>
 800c72a:	2800      	cmp	r0, #0
 800c72c:	d0c2      	beq.n	800c6b4 <__gethex+0x1a8>
 800c72e:	f04f 0903 	mov.w	r9, #3
 800c732:	e7c1      	b.n	800c6b8 <__gethex+0x1ac>
 800c734:	da09      	bge.n	800c74a <__gethex+0x23e>
 800c736:	1b75      	subs	r5, r6, r5
 800c738:	4621      	mov	r1, r4
 800c73a:	9801      	ldr	r0, [sp, #4]
 800c73c:	462a      	mov	r2, r5
 800c73e:	f000 fcd7 	bl	800d0f0 <__lshift>
 800c742:	1b7f      	subs	r7, r7, r5
 800c744:	4604      	mov	r4, r0
 800c746:	f100 0a14 	add.w	sl, r0, #20
 800c74a:	f04f 0900 	mov.w	r9, #0
 800c74e:	e7b8      	b.n	800c6c2 <__gethex+0x1b6>
 800c750:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c754:	42bd      	cmp	r5, r7
 800c756:	dd6f      	ble.n	800c838 <__gethex+0x32c>
 800c758:	1bed      	subs	r5, r5, r7
 800c75a:	42ae      	cmp	r6, r5
 800c75c:	dc34      	bgt.n	800c7c8 <__gethex+0x2bc>
 800c75e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c762:	2b02      	cmp	r3, #2
 800c764:	d022      	beq.n	800c7ac <__gethex+0x2a0>
 800c766:	2b03      	cmp	r3, #3
 800c768:	d024      	beq.n	800c7b4 <__gethex+0x2a8>
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d115      	bne.n	800c79a <__gethex+0x28e>
 800c76e:	42ae      	cmp	r6, r5
 800c770:	d113      	bne.n	800c79a <__gethex+0x28e>
 800c772:	2e01      	cmp	r6, #1
 800c774:	d10b      	bne.n	800c78e <__gethex+0x282>
 800c776:	9a02      	ldr	r2, [sp, #8]
 800c778:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c77c:	6013      	str	r3, [r2, #0]
 800c77e:	2301      	movs	r3, #1
 800c780:	6123      	str	r3, [r4, #16]
 800c782:	f8ca 3000 	str.w	r3, [sl]
 800c786:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c788:	2562      	movs	r5, #98	@ 0x62
 800c78a:	601c      	str	r4, [r3, #0]
 800c78c:	e73a      	b.n	800c604 <__gethex+0xf8>
 800c78e:	1e71      	subs	r1, r6, #1
 800c790:	4620      	mov	r0, r4
 800c792:	f000 fee6 	bl	800d562 <__any_on>
 800c796:	2800      	cmp	r0, #0
 800c798:	d1ed      	bne.n	800c776 <__gethex+0x26a>
 800c79a:	9801      	ldr	r0, [sp, #4]
 800c79c:	4621      	mov	r1, r4
 800c79e:	f000 fa8f 	bl	800ccc0 <_Bfree>
 800c7a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	6013      	str	r3, [r2, #0]
 800c7a8:	2550      	movs	r5, #80	@ 0x50
 800c7aa:	e72b      	b.n	800c604 <__gethex+0xf8>
 800c7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d1f3      	bne.n	800c79a <__gethex+0x28e>
 800c7b2:	e7e0      	b.n	800c776 <__gethex+0x26a>
 800c7b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d1dd      	bne.n	800c776 <__gethex+0x26a>
 800c7ba:	e7ee      	b.n	800c79a <__gethex+0x28e>
 800c7bc:	0800fc58 	.word	0x0800fc58
 800c7c0:	0800ff04 	.word	0x0800ff04
 800c7c4:	0800ff15 	.word	0x0800ff15
 800c7c8:	1e6f      	subs	r7, r5, #1
 800c7ca:	f1b9 0f00 	cmp.w	r9, #0
 800c7ce:	d130      	bne.n	800c832 <__gethex+0x326>
 800c7d0:	b127      	cbz	r7, 800c7dc <__gethex+0x2d0>
 800c7d2:	4639      	mov	r1, r7
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	f000 fec4 	bl	800d562 <__any_on>
 800c7da:	4681      	mov	r9, r0
 800c7dc:	117a      	asrs	r2, r7, #5
 800c7de:	2301      	movs	r3, #1
 800c7e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c7e4:	f007 071f 	and.w	r7, r7, #31
 800c7e8:	40bb      	lsls	r3, r7
 800c7ea:	4213      	tst	r3, r2
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	bf18      	it	ne
 800c7f2:	f049 0902 	orrne.w	r9, r9, #2
 800c7f6:	f7ff fe21 	bl	800c43c <rshift>
 800c7fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c7fe:	1b76      	subs	r6, r6, r5
 800c800:	2502      	movs	r5, #2
 800c802:	f1b9 0f00 	cmp.w	r9, #0
 800c806:	d047      	beq.n	800c898 <__gethex+0x38c>
 800c808:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c80c:	2b02      	cmp	r3, #2
 800c80e:	d015      	beq.n	800c83c <__gethex+0x330>
 800c810:	2b03      	cmp	r3, #3
 800c812:	d017      	beq.n	800c844 <__gethex+0x338>
 800c814:	2b01      	cmp	r3, #1
 800c816:	d109      	bne.n	800c82c <__gethex+0x320>
 800c818:	f019 0f02 	tst.w	r9, #2
 800c81c:	d006      	beq.n	800c82c <__gethex+0x320>
 800c81e:	f8da 3000 	ldr.w	r3, [sl]
 800c822:	ea49 0903 	orr.w	r9, r9, r3
 800c826:	f019 0f01 	tst.w	r9, #1
 800c82a:	d10e      	bne.n	800c84a <__gethex+0x33e>
 800c82c:	f045 0510 	orr.w	r5, r5, #16
 800c830:	e032      	b.n	800c898 <__gethex+0x38c>
 800c832:	f04f 0901 	mov.w	r9, #1
 800c836:	e7d1      	b.n	800c7dc <__gethex+0x2d0>
 800c838:	2501      	movs	r5, #1
 800c83a:	e7e2      	b.n	800c802 <__gethex+0x2f6>
 800c83c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c83e:	f1c3 0301 	rsb	r3, r3, #1
 800c842:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c846:	2b00      	cmp	r3, #0
 800c848:	d0f0      	beq.n	800c82c <__gethex+0x320>
 800c84a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c84e:	f104 0314 	add.w	r3, r4, #20
 800c852:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c856:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c85a:	f04f 0c00 	mov.w	ip, #0
 800c85e:	4618      	mov	r0, r3
 800c860:	f853 2b04 	ldr.w	r2, [r3], #4
 800c864:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c868:	d01b      	beq.n	800c8a2 <__gethex+0x396>
 800c86a:	3201      	adds	r2, #1
 800c86c:	6002      	str	r2, [r0, #0]
 800c86e:	2d02      	cmp	r5, #2
 800c870:	f104 0314 	add.w	r3, r4, #20
 800c874:	d13c      	bne.n	800c8f0 <__gethex+0x3e4>
 800c876:	f8d8 2000 	ldr.w	r2, [r8]
 800c87a:	3a01      	subs	r2, #1
 800c87c:	42b2      	cmp	r2, r6
 800c87e:	d109      	bne.n	800c894 <__gethex+0x388>
 800c880:	1171      	asrs	r1, r6, #5
 800c882:	2201      	movs	r2, #1
 800c884:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c888:	f006 061f 	and.w	r6, r6, #31
 800c88c:	fa02 f606 	lsl.w	r6, r2, r6
 800c890:	421e      	tst	r6, r3
 800c892:	d13a      	bne.n	800c90a <__gethex+0x3fe>
 800c894:	f045 0520 	orr.w	r5, r5, #32
 800c898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c89a:	601c      	str	r4, [r3, #0]
 800c89c:	9b02      	ldr	r3, [sp, #8]
 800c89e:	601f      	str	r7, [r3, #0]
 800c8a0:	e6b0      	b.n	800c604 <__gethex+0xf8>
 800c8a2:	4299      	cmp	r1, r3
 800c8a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c8a8:	d8d9      	bhi.n	800c85e <__gethex+0x352>
 800c8aa:	68a3      	ldr	r3, [r4, #8]
 800c8ac:	459b      	cmp	fp, r3
 800c8ae:	db17      	blt.n	800c8e0 <__gethex+0x3d4>
 800c8b0:	6861      	ldr	r1, [r4, #4]
 800c8b2:	9801      	ldr	r0, [sp, #4]
 800c8b4:	3101      	adds	r1, #1
 800c8b6:	f000 f9c3 	bl	800cc40 <_Balloc>
 800c8ba:	4681      	mov	r9, r0
 800c8bc:	b918      	cbnz	r0, 800c8c6 <__gethex+0x3ba>
 800c8be:	4b1a      	ldr	r3, [pc, #104]	@ (800c928 <__gethex+0x41c>)
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	2184      	movs	r1, #132	@ 0x84
 800c8c4:	e6c5      	b.n	800c652 <__gethex+0x146>
 800c8c6:	6922      	ldr	r2, [r4, #16]
 800c8c8:	3202      	adds	r2, #2
 800c8ca:	f104 010c 	add.w	r1, r4, #12
 800c8ce:	0092      	lsls	r2, r2, #2
 800c8d0:	300c      	adds	r0, #12
 800c8d2:	f7fe fee0 	bl	800b696 <memcpy>
 800c8d6:	4621      	mov	r1, r4
 800c8d8:	9801      	ldr	r0, [sp, #4]
 800c8da:	f000 f9f1 	bl	800ccc0 <_Bfree>
 800c8de:	464c      	mov	r4, r9
 800c8e0:	6923      	ldr	r3, [r4, #16]
 800c8e2:	1c5a      	adds	r2, r3, #1
 800c8e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c8e8:	6122      	str	r2, [r4, #16]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	615a      	str	r2, [r3, #20]
 800c8ee:	e7be      	b.n	800c86e <__gethex+0x362>
 800c8f0:	6922      	ldr	r2, [r4, #16]
 800c8f2:	455a      	cmp	r2, fp
 800c8f4:	dd0b      	ble.n	800c90e <__gethex+0x402>
 800c8f6:	2101      	movs	r1, #1
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	f7ff fd9f 	bl	800c43c <rshift>
 800c8fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c902:	3701      	adds	r7, #1
 800c904:	42bb      	cmp	r3, r7
 800c906:	f6ff aee0 	blt.w	800c6ca <__gethex+0x1be>
 800c90a:	2501      	movs	r5, #1
 800c90c:	e7c2      	b.n	800c894 <__gethex+0x388>
 800c90e:	f016 061f 	ands.w	r6, r6, #31
 800c912:	d0fa      	beq.n	800c90a <__gethex+0x3fe>
 800c914:	4453      	add	r3, sl
 800c916:	f1c6 0620 	rsb	r6, r6, #32
 800c91a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c91e:	f000 fa81 	bl	800ce24 <__hi0bits>
 800c922:	42b0      	cmp	r0, r6
 800c924:	dbe7      	blt.n	800c8f6 <__gethex+0x3ea>
 800c926:	e7f0      	b.n	800c90a <__gethex+0x3fe>
 800c928:	0800ff04 	.word	0x0800ff04

0800c92c <L_shift>:
 800c92c:	f1c2 0208 	rsb	r2, r2, #8
 800c930:	0092      	lsls	r2, r2, #2
 800c932:	b570      	push	{r4, r5, r6, lr}
 800c934:	f1c2 0620 	rsb	r6, r2, #32
 800c938:	6843      	ldr	r3, [r0, #4]
 800c93a:	6804      	ldr	r4, [r0, #0]
 800c93c:	fa03 f506 	lsl.w	r5, r3, r6
 800c940:	432c      	orrs	r4, r5
 800c942:	40d3      	lsrs	r3, r2
 800c944:	6004      	str	r4, [r0, #0]
 800c946:	f840 3f04 	str.w	r3, [r0, #4]!
 800c94a:	4288      	cmp	r0, r1
 800c94c:	d3f4      	bcc.n	800c938 <L_shift+0xc>
 800c94e:	bd70      	pop	{r4, r5, r6, pc}

0800c950 <__match>:
 800c950:	b530      	push	{r4, r5, lr}
 800c952:	6803      	ldr	r3, [r0, #0]
 800c954:	3301      	adds	r3, #1
 800c956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c95a:	b914      	cbnz	r4, 800c962 <__match+0x12>
 800c95c:	6003      	str	r3, [r0, #0]
 800c95e:	2001      	movs	r0, #1
 800c960:	bd30      	pop	{r4, r5, pc}
 800c962:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c966:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c96a:	2d19      	cmp	r5, #25
 800c96c:	bf98      	it	ls
 800c96e:	3220      	addls	r2, #32
 800c970:	42a2      	cmp	r2, r4
 800c972:	d0f0      	beq.n	800c956 <__match+0x6>
 800c974:	2000      	movs	r0, #0
 800c976:	e7f3      	b.n	800c960 <__match+0x10>

0800c978 <__hexnan>:
 800c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97c:	680b      	ldr	r3, [r1, #0]
 800c97e:	6801      	ldr	r1, [r0, #0]
 800c980:	115e      	asrs	r6, r3, #5
 800c982:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c986:	f013 031f 	ands.w	r3, r3, #31
 800c98a:	b087      	sub	sp, #28
 800c98c:	bf18      	it	ne
 800c98e:	3604      	addne	r6, #4
 800c990:	2500      	movs	r5, #0
 800c992:	1f37      	subs	r7, r6, #4
 800c994:	4682      	mov	sl, r0
 800c996:	4690      	mov	r8, r2
 800c998:	9301      	str	r3, [sp, #4]
 800c99a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c99e:	46b9      	mov	r9, r7
 800c9a0:	463c      	mov	r4, r7
 800c9a2:	9502      	str	r5, [sp, #8]
 800c9a4:	46ab      	mov	fp, r5
 800c9a6:	784a      	ldrb	r2, [r1, #1]
 800c9a8:	1c4b      	adds	r3, r1, #1
 800c9aa:	9303      	str	r3, [sp, #12]
 800c9ac:	b342      	cbz	r2, 800ca00 <__hexnan+0x88>
 800c9ae:	4610      	mov	r0, r2
 800c9b0:	9105      	str	r1, [sp, #20]
 800c9b2:	9204      	str	r2, [sp, #16]
 800c9b4:	f7ff fd94 	bl	800c4e0 <__hexdig_fun>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d151      	bne.n	800ca60 <__hexnan+0xe8>
 800c9bc:	9a04      	ldr	r2, [sp, #16]
 800c9be:	9905      	ldr	r1, [sp, #20]
 800c9c0:	2a20      	cmp	r2, #32
 800c9c2:	d818      	bhi.n	800c9f6 <__hexnan+0x7e>
 800c9c4:	9b02      	ldr	r3, [sp, #8]
 800c9c6:	459b      	cmp	fp, r3
 800c9c8:	dd13      	ble.n	800c9f2 <__hexnan+0x7a>
 800c9ca:	454c      	cmp	r4, r9
 800c9cc:	d206      	bcs.n	800c9dc <__hexnan+0x64>
 800c9ce:	2d07      	cmp	r5, #7
 800c9d0:	dc04      	bgt.n	800c9dc <__hexnan+0x64>
 800c9d2:	462a      	mov	r2, r5
 800c9d4:	4649      	mov	r1, r9
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f7ff ffa8 	bl	800c92c <L_shift>
 800c9dc:	4544      	cmp	r4, r8
 800c9de:	d952      	bls.n	800ca86 <__hexnan+0x10e>
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	f1a4 0904 	sub.w	r9, r4, #4
 800c9e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9ea:	f8cd b008 	str.w	fp, [sp, #8]
 800c9ee:	464c      	mov	r4, r9
 800c9f0:	461d      	mov	r5, r3
 800c9f2:	9903      	ldr	r1, [sp, #12]
 800c9f4:	e7d7      	b.n	800c9a6 <__hexnan+0x2e>
 800c9f6:	2a29      	cmp	r2, #41	@ 0x29
 800c9f8:	d157      	bne.n	800caaa <__hexnan+0x132>
 800c9fa:	3102      	adds	r1, #2
 800c9fc:	f8ca 1000 	str.w	r1, [sl]
 800ca00:	f1bb 0f00 	cmp.w	fp, #0
 800ca04:	d051      	beq.n	800caaa <__hexnan+0x132>
 800ca06:	454c      	cmp	r4, r9
 800ca08:	d206      	bcs.n	800ca18 <__hexnan+0xa0>
 800ca0a:	2d07      	cmp	r5, #7
 800ca0c:	dc04      	bgt.n	800ca18 <__hexnan+0xa0>
 800ca0e:	462a      	mov	r2, r5
 800ca10:	4649      	mov	r1, r9
 800ca12:	4620      	mov	r0, r4
 800ca14:	f7ff ff8a 	bl	800c92c <L_shift>
 800ca18:	4544      	cmp	r4, r8
 800ca1a:	d936      	bls.n	800ca8a <__hexnan+0x112>
 800ca1c:	f1a8 0204 	sub.w	r2, r8, #4
 800ca20:	4623      	mov	r3, r4
 800ca22:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca26:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca2a:	429f      	cmp	r7, r3
 800ca2c:	d2f9      	bcs.n	800ca22 <__hexnan+0xaa>
 800ca2e:	1b3b      	subs	r3, r7, r4
 800ca30:	f023 0303 	bic.w	r3, r3, #3
 800ca34:	3304      	adds	r3, #4
 800ca36:	3401      	adds	r4, #1
 800ca38:	3e03      	subs	r6, #3
 800ca3a:	42b4      	cmp	r4, r6
 800ca3c:	bf88      	it	hi
 800ca3e:	2304      	movhi	r3, #4
 800ca40:	4443      	add	r3, r8
 800ca42:	2200      	movs	r2, #0
 800ca44:	f843 2b04 	str.w	r2, [r3], #4
 800ca48:	429f      	cmp	r7, r3
 800ca4a:	d2fb      	bcs.n	800ca44 <__hexnan+0xcc>
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	b91b      	cbnz	r3, 800ca58 <__hexnan+0xe0>
 800ca50:	4547      	cmp	r7, r8
 800ca52:	d128      	bne.n	800caa6 <__hexnan+0x12e>
 800ca54:	2301      	movs	r3, #1
 800ca56:	603b      	str	r3, [r7, #0]
 800ca58:	2005      	movs	r0, #5
 800ca5a:	b007      	add	sp, #28
 800ca5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca60:	3501      	adds	r5, #1
 800ca62:	2d08      	cmp	r5, #8
 800ca64:	f10b 0b01 	add.w	fp, fp, #1
 800ca68:	dd06      	ble.n	800ca78 <__hexnan+0x100>
 800ca6a:	4544      	cmp	r4, r8
 800ca6c:	d9c1      	bls.n	800c9f2 <__hexnan+0x7a>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca74:	2501      	movs	r5, #1
 800ca76:	3c04      	subs	r4, #4
 800ca78:	6822      	ldr	r2, [r4, #0]
 800ca7a:	f000 000f 	and.w	r0, r0, #15
 800ca7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ca82:	6020      	str	r0, [r4, #0]
 800ca84:	e7b5      	b.n	800c9f2 <__hexnan+0x7a>
 800ca86:	2508      	movs	r5, #8
 800ca88:	e7b3      	b.n	800c9f2 <__hexnan+0x7a>
 800ca8a:	9b01      	ldr	r3, [sp, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d0dd      	beq.n	800ca4c <__hexnan+0xd4>
 800ca90:	f1c3 0320 	rsb	r3, r3, #32
 800ca94:	f04f 32ff 	mov.w	r2, #4294967295
 800ca98:	40da      	lsrs	r2, r3
 800ca9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ca9e:	4013      	ands	r3, r2
 800caa0:	f846 3c04 	str.w	r3, [r6, #-4]
 800caa4:	e7d2      	b.n	800ca4c <__hexnan+0xd4>
 800caa6:	3f04      	subs	r7, #4
 800caa8:	e7d0      	b.n	800ca4c <__hexnan+0xd4>
 800caaa:	2004      	movs	r0, #4
 800caac:	e7d5      	b.n	800ca5a <__hexnan+0xe2>
	...

0800cab0 <malloc>:
 800cab0:	4b02      	ldr	r3, [pc, #8]	@ (800cabc <malloc+0xc>)
 800cab2:	4601      	mov	r1, r0
 800cab4:	6818      	ldr	r0, [r3, #0]
 800cab6:	f000 b825 	b.w	800cb04 <_malloc_r>
 800caba:	bf00      	nop
 800cabc:	20000258 	.word	0x20000258

0800cac0 <sbrk_aligned>:
 800cac0:	b570      	push	{r4, r5, r6, lr}
 800cac2:	4e0f      	ldr	r6, [pc, #60]	@ (800cb00 <sbrk_aligned+0x40>)
 800cac4:	460c      	mov	r4, r1
 800cac6:	6831      	ldr	r1, [r6, #0]
 800cac8:	4605      	mov	r5, r0
 800caca:	b911      	cbnz	r1, 800cad2 <sbrk_aligned+0x12>
 800cacc:	f000 ffa6 	bl	800da1c <_sbrk_r>
 800cad0:	6030      	str	r0, [r6, #0]
 800cad2:	4621      	mov	r1, r4
 800cad4:	4628      	mov	r0, r5
 800cad6:	f000 ffa1 	bl	800da1c <_sbrk_r>
 800cada:	1c43      	adds	r3, r0, #1
 800cadc:	d103      	bne.n	800cae6 <sbrk_aligned+0x26>
 800cade:	f04f 34ff 	mov.w	r4, #4294967295
 800cae2:	4620      	mov	r0, r4
 800cae4:	bd70      	pop	{r4, r5, r6, pc}
 800cae6:	1cc4      	adds	r4, r0, #3
 800cae8:	f024 0403 	bic.w	r4, r4, #3
 800caec:	42a0      	cmp	r0, r4
 800caee:	d0f8      	beq.n	800cae2 <sbrk_aligned+0x22>
 800caf0:	1a21      	subs	r1, r4, r0
 800caf2:	4628      	mov	r0, r5
 800caf4:	f000 ff92 	bl	800da1c <_sbrk_r>
 800caf8:	3001      	adds	r0, #1
 800cafa:	d1f2      	bne.n	800cae2 <sbrk_aligned+0x22>
 800cafc:	e7ef      	b.n	800cade <sbrk_aligned+0x1e>
 800cafe:	bf00      	nop
 800cb00:	20000890 	.word	0x20000890

0800cb04 <_malloc_r>:
 800cb04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb08:	1ccd      	adds	r5, r1, #3
 800cb0a:	f025 0503 	bic.w	r5, r5, #3
 800cb0e:	3508      	adds	r5, #8
 800cb10:	2d0c      	cmp	r5, #12
 800cb12:	bf38      	it	cc
 800cb14:	250c      	movcc	r5, #12
 800cb16:	2d00      	cmp	r5, #0
 800cb18:	4606      	mov	r6, r0
 800cb1a:	db01      	blt.n	800cb20 <_malloc_r+0x1c>
 800cb1c:	42a9      	cmp	r1, r5
 800cb1e:	d904      	bls.n	800cb2a <_malloc_r+0x26>
 800cb20:	230c      	movs	r3, #12
 800cb22:	6033      	str	r3, [r6, #0]
 800cb24:	2000      	movs	r0, #0
 800cb26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc00 <_malloc_r+0xfc>
 800cb2e:	f000 f87b 	bl	800cc28 <__malloc_lock>
 800cb32:	f8d8 3000 	ldr.w	r3, [r8]
 800cb36:	461c      	mov	r4, r3
 800cb38:	bb44      	cbnz	r4, 800cb8c <_malloc_r+0x88>
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	f7ff ffbf 	bl	800cac0 <sbrk_aligned>
 800cb42:	1c43      	adds	r3, r0, #1
 800cb44:	4604      	mov	r4, r0
 800cb46:	d158      	bne.n	800cbfa <_malloc_r+0xf6>
 800cb48:	f8d8 4000 	ldr.w	r4, [r8]
 800cb4c:	4627      	mov	r7, r4
 800cb4e:	2f00      	cmp	r7, #0
 800cb50:	d143      	bne.n	800cbda <_malloc_r+0xd6>
 800cb52:	2c00      	cmp	r4, #0
 800cb54:	d04b      	beq.n	800cbee <_malloc_r+0xea>
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	4639      	mov	r1, r7
 800cb5a:	4630      	mov	r0, r6
 800cb5c:	eb04 0903 	add.w	r9, r4, r3
 800cb60:	f000 ff5c 	bl	800da1c <_sbrk_r>
 800cb64:	4581      	cmp	r9, r0
 800cb66:	d142      	bne.n	800cbee <_malloc_r+0xea>
 800cb68:	6821      	ldr	r1, [r4, #0]
 800cb6a:	1a6d      	subs	r5, r5, r1
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	4630      	mov	r0, r6
 800cb70:	f7ff ffa6 	bl	800cac0 <sbrk_aligned>
 800cb74:	3001      	adds	r0, #1
 800cb76:	d03a      	beq.n	800cbee <_malloc_r+0xea>
 800cb78:	6823      	ldr	r3, [r4, #0]
 800cb7a:	442b      	add	r3, r5
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	f8d8 3000 	ldr.w	r3, [r8]
 800cb82:	685a      	ldr	r2, [r3, #4]
 800cb84:	bb62      	cbnz	r2, 800cbe0 <_malloc_r+0xdc>
 800cb86:	f8c8 7000 	str.w	r7, [r8]
 800cb8a:	e00f      	b.n	800cbac <_malloc_r+0xa8>
 800cb8c:	6822      	ldr	r2, [r4, #0]
 800cb8e:	1b52      	subs	r2, r2, r5
 800cb90:	d420      	bmi.n	800cbd4 <_malloc_r+0xd0>
 800cb92:	2a0b      	cmp	r2, #11
 800cb94:	d917      	bls.n	800cbc6 <_malloc_r+0xc2>
 800cb96:	1961      	adds	r1, r4, r5
 800cb98:	42a3      	cmp	r3, r4
 800cb9a:	6025      	str	r5, [r4, #0]
 800cb9c:	bf18      	it	ne
 800cb9e:	6059      	strne	r1, [r3, #4]
 800cba0:	6863      	ldr	r3, [r4, #4]
 800cba2:	bf08      	it	eq
 800cba4:	f8c8 1000 	streq.w	r1, [r8]
 800cba8:	5162      	str	r2, [r4, r5]
 800cbaa:	604b      	str	r3, [r1, #4]
 800cbac:	4630      	mov	r0, r6
 800cbae:	f000 f841 	bl	800cc34 <__malloc_unlock>
 800cbb2:	f104 000b 	add.w	r0, r4, #11
 800cbb6:	1d23      	adds	r3, r4, #4
 800cbb8:	f020 0007 	bic.w	r0, r0, #7
 800cbbc:	1ac2      	subs	r2, r0, r3
 800cbbe:	bf1c      	itt	ne
 800cbc0:	1a1b      	subne	r3, r3, r0
 800cbc2:	50a3      	strne	r3, [r4, r2]
 800cbc4:	e7af      	b.n	800cb26 <_malloc_r+0x22>
 800cbc6:	6862      	ldr	r2, [r4, #4]
 800cbc8:	42a3      	cmp	r3, r4
 800cbca:	bf0c      	ite	eq
 800cbcc:	f8c8 2000 	streq.w	r2, [r8]
 800cbd0:	605a      	strne	r2, [r3, #4]
 800cbd2:	e7eb      	b.n	800cbac <_malloc_r+0xa8>
 800cbd4:	4623      	mov	r3, r4
 800cbd6:	6864      	ldr	r4, [r4, #4]
 800cbd8:	e7ae      	b.n	800cb38 <_malloc_r+0x34>
 800cbda:	463c      	mov	r4, r7
 800cbdc:	687f      	ldr	r7, [r7, #4]
 800cbde:	e7b6      	b.n	800cb4e <_malloc_r+0x4a>
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	42a3      	cmp	r3, r4
 800cbe6:	d1fb      	bne.n	800cbe0 <_malloc_r+0xdc>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	6053      	str	r3, [r2, #4]
 800cbec:	e7de      	b.n	800cbac <_malloc_r+0xa8>
 800cbee:	230c      	movs	r3, #12
 800cbf0:	6033      	str	r3, [r6, #0]
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	f000 f81e 	bl	800cc34 <__malloc_unlock>
 800cbf8:	e794      	b.n	800cb24 <_malloc_r+0x20>
 800cbfa:	6005      	str	r5, [r0, #0]
 800cbfc:	e7d6      	b.n	800cbac <_malloc_r+0xa8>
 800cbfe:	bf00      	nop
 800cc00:	20000894 	.word	0x20000894

0800cc04 <__ascii_mbtowc>:
 800cc04:	b082      	sub	sp, #8
 800cc06:	b901      	cbnz	r1, 800cc0a <__ascii_mbtowc+0x6>
 800cc08:	a901      	add	r1, sp, #4
 800cc0a:	b142      	cbz	r2, 800cc1e <__ascii_mbtowc+0x1a>
 800cc0c:	b14b      	cbz	r3, 800cc22 <__ascii_mbtowc+0x1e>
 800cc0e:	7813      	ldrb	r3, [r2, #0]
 800cc10:	600b      	str	r3, [r1, #0]
 800cc12:	7812      	ldrb	r2, [r2, #0]
 800cc14:	1e10      	subs	r0, r2, #0
 800cc16:	bf18      	it	ne
 800cc18:	2001      	movne	r0, #1
 800cc1a:	b002      	add	sp, #8
 800cc1c:	4770      	bx	lr
 800cc1e:	4610      	mov	r0, r2
 800cc20:	e7fb      	b.n	800cc1a <__ascii_mbtowc+0x16>
 800cc22:	f06f 0001 	mvn.w	r0, #1
 800cc26:	e7f8      	b.n	800cc1a <__ascii_mbtowc+0x16>

0800cc28 <__malloc_lock>:
 800cc28:	4801      	ldr	r0, [pc, #4]	@ (800cc30 <__malloc_lock+0x8>)
 800cc2a:	f7fe bd32 	b.w	800b692 <__retarget_lock_acquire_recursive>
 800cc2e:	bf00      	nop
 800cc30:	2000088c 	.word	0x2000088c

0800cc34 <__malloc_unlock>:
 800cc34:	4801      	ldr	r0, [pc, #4]	@ (800cc3c <__malloc_unlock+0x8>)
 800cc36:	f7fe bd2d 	b.w	800b694 <__retarget_lock_release_recursive>
 800cc3a:	bf00      	nop
 800cc3c:	2000088c 	.word	0x2000088c

0800cc40 <_Balloc>:
 800cc40:	b570      	push	{r4, r5, r6, lr}
 800cc42:	69c6      	ldr	r6, [r0, #28]
 800cc44:	4604      	mov	r4, r0
 800cc46:	460d      	mov	r5, r1
 800cc48:	b976      	cbnz	r6, 800cc68 <_Balloc+0x28>
 800cc4a:	2010      	movs	r0, #16
 800cc4c:	f7ff ff30 	bl	800cab0 <malloc>
 800cc50:	4602      	mov	r2, r0
 800cc52:	61e0      	str	r0, [r4, #28]
 800cc54:	b920      	cbnz	r0, 800cc60 <_Balloc+0x20>
 800cc56:	4b18      	ldr	r3, [pc, #96]	@ (800ccb8 <_Balloc+0x78>)
 800cc58:	4818      	ldr	r0, [pc, #96]	@ (800ccbc <_Balloc+0x7c>)
 800cc5a:	216b      	movs	r1, #107	@ 0x6b
 800cc5c:	f7fe fd3a 	bl	800b6d4 <__assert_func>
 800cc60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc64:	6006      	str	r6, [r0, #0]
 800cc66:	60c6      	str	r6, [r0, #12]
 800cc68:	69e6      	ldr	r6, [r4, #28]
 800cc6a:	68f3      	ldr	r3, [r6, #12]
 800cc6c:	b183      	cbz	r3, 800cc90 <_Balloc+0x50>
 800cc6e:	69e3      	ldr	r3, [r4, #28]
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc76:	b9b8      	cbnz	r0, 800cca8 <_Balloc+0x68>
 800cc78:	2101      	movs	r1, #1
 800cc7a:	fa01 f605 	lsl.w	r6, r1, r5
 800cc7e:	1d72      	adds	r2, r6, #5
 800cc80:	0092      	lsls	r2, r2, #2
 800cc82:	4620      	mov	r0, r4
 800cc84:	f000 fee1 	bl	800da4a <_calloc_r>
 800cc88:	b160      	cbz	r0, 800cca4 <_Balloc+0x64>
 800cc8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc8e:	e00e      	b.n	800ccae <_Balloc+0x6e>
 800cc90:	2221      	movs	r2, #33	@ 0x21
 800cc92:	2104      	movs	r1, #4
 800cc94:	4620      	mov	r0, r4
 800cc96:	f000 fed8 	bl	800da4a <_calloc_r>
 800cc9a:	69e3      	ldr	r3, [r4, #28]
 800cc9c:	60f0      	str	r0, [r6, #12]
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1e4      	bne.n	800cc6e <_Balloc+0x2e>
 800cca4:	2000      	movs	r0, #0
 800cca6:	bd70      	pop	{r4, r5, r6, pc}
 800cca8:	6802      	ldr	r2, [r0, #0]
 800ccaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccae:	2300      	movs	r3, #0
 800ccb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccb4:	e7f7      	b.n	800cca6 <_Balloc+0x66>
 800ccb6:	bf00      	nop
 800ccb8:	0800fdea 	.word	0x0800fdea
 800ccbc:	0800ff75 	.word	0x0800ff75

0800ccc0 <_Bfree>:
 800ccc0:	b570      	push	{r4, r5, r6, lr}
 800ccc2:	69c6      	ldr	r6, [r0, #28]
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	460c      	mov	r4, r1
 800ccc8:	b976      	cbnz	r6, 800cce8 <_Bfree+0x28>
 800ccca:	2010      	movs	r0, #16
 800cccc:	f7ff fef0 	bl	800cab0 <malloc>
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	61e8      	str	r0, [r5, #28]
 800ccd4:	b920      	cbnz	r0, 800cce0 <_Bfree+0x20>
 800ccd6:	4b09      	ldr	r3, [pc, #36]	@ (800ccfc <_Bfree+0x3c>)
 800ccd8:	4809      	ldr	r0, [pc, #36]	@ (800cd00 <_Bfree+0x40>)
 800ccda:	218f      	movs	r1, #143	@ 0x8f
 800ccdc:	f7fe fcfa 	bl	800b6d4 <__assert_func>
 800cce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cce4:	6006      	str	r6, [r0, #0]
 800cce6:	60c6      	str	r6, [r0, #12]
 800cce8:	b13c      	cbz	r4, 800ccfa <_Bfree+0x3a>
 800ccea:	69eb      	ldr	r3, [r5, #28]
 800ccec:	6862      	ldr	r2, [r4, #4]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ccf4:	6021      	str	r1, [r4, #0]
 800ccf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccfa:	bd70      	pop	{r4, r5, r6, pc}
 800ccfc:	0800fdea 	.word	0x0800fdea
 800cd00:	0800ff75 	.word	0x0800ff75

0800cd04 <__multadd>:
 800cd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd08:	690d      	ldr	r5, [r1, #16]
 800cd0a:	4607      	mov	r7, r0
 800cd0c:	460c      	mov	r4, r1
 800cd0e:	461e      	mov	r6, r3
 800cd10:	f101 0c14 	add.w	ip, r1, #20
 800cd14:	2000      	movs	r0, #0
 800cd16:	f8dc 3000 	ldr.w	r3, [ip]
 800cd1a:	b299      	uxth	r1, r3
 800cd1c:	fb02 6101 	mla	r1, r2, r1, r6
 800cd20:	0c1e      	lsrs	r6, r3, #16
 800cd22:	0c0b      	lsrs	r3, r1, #16
 800cd24:	fb02 3306 	mla	r3, r2, r6, r3
 800cd28:	b289      	uxth	r1, r1
 800cd2a:	3001      	adds	r0, #1
 800cd2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd30:	4285      	cmp	r5, r0
 800cd32:	f84c 1b04 	str.w	r1, [ip], #4
 800cd36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd3a:	dcec      	bgt.n	800cd16 <__multadd+0x12>
 800cd3c:	b30e      	cbz	r6, 800cd82 <__multadd+0x7e>
 800cd3e:	68a3      	ldr	r3, [r4, #8]
 800cd40:	42ab      	cmp	r3, r5
 800cd42:	dc19      	bgt.n	800cd78 <__multadd+0x74>
 800cd44:	6861      	ldr	r1, [r4, #4]
 800cd46:	4638      	mov	r0, r7
 800cd48:	3101      	adds	r1, #1
 800cd4a:	f7ff ff79 	bl	800cc40 <_Balloc>
 800cd4e:	4680      	mov	r8, r0
 800cd50:	b928      	cbnz	r0, 800cd5e <__multadd+0x5a>
 800cd52:	4602      	mov	r2, r0
 800cd54:	4b0c      	ldr	r3, [pc, #48]	@ (800cd88 <__multadd+0x84>)
 800cd56:	480d      	ldr	r0, [pc, #52]	@ (800cd8c <__multadd+0x88>)
 800cd58:	21ba      	movs	r1, #186	@ 0xba
 800cd5a:	f7fe fcbb 	bl	800b6d4 <__assert_func>
 800cd5e:	6922      	ldr	r2, [r4, #16]
 800cd60:	3202      	adds	r2, #2
 800cd62:	f104 010c 	add.w	r1, r4, #12
 800cd66:	0092      	lsls	r2, r2, #2
 800cd68:	300c      	adds	r0, #12
 800cd6a:	f7fe fc94 	bl	800b696 <memcpy>
 800cd6e:	4621      	mov	r1, r4
 800cd70:	4638      	mov	r0, r7
 800cd72:	f7ff ffa5 	bl	800ccc0 <_Bfree>
 800cd76:	4644      	mov	r4, r8
 800cd78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd7c:	3501      	adds	r5, #1
 800cd7e:	615e      	str	r6, [r3, #20]
 800cd80:	6125      	str	r5, [r4, #16]
 800cd82:	4620      	mov	r0, r4
 800cd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd88:	0800ff04 	.word	0x0800ff04
 800cd8c:	0800ff75 	.word	0x0800ff75

0800cd90 <__s2b>:
 800cd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd94:	460c      	mov	r4, r1
 800cd96:	4615      	mov	r5, r2
 800cd98:	461f      	mov	r7, r3
 800cd9a:	2209      	movs	r2, #9
 800cd9c:	3308      	adds	r3, #8
 800cd9e:	4606      	mov	r6, r0
 800cda0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cda4:	2100      	movs	r1, #0
 800cda6:	2201      	movs	r2, #1
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	db09      	blt.n	800cdc0 <__s2b+0x30>
 800cdac:	4630      	mov	r0, r6
 800cdae:	f7ff ff47 	bl	800cc40 <_Balloc>
 800cdb2:	b940      	cbnz	r0, 800cdc6 <__s2b+0x36>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	4b19      	ldr	r3, [pc, #100]	@ (800ce1c <__s2b+0x8c>)
 800cdb8:	4819      	ldr	r0, [pc, #100]	@ (800ce20 <__s2b+0x90>)
 800cdba:	21d3      	movs	r1, #211	@ 0xd3
 800cdbc:	f7fe fc8a 	bl	800b6d4 <__assert_func>
 800cdc0:	0052      	lsls	r2, r2, #1
 800cdc2:	3101      	adds	r1, #1
 800cdc4:	e7f0      	b.n	800cda8 <__s2b+0x18>
 800cdc6:	9b08      	ldr	r3, [sp, #32]
 800cdc8:	6143      	str	r3, [r0, #20]
 800cdca:	2d09      	cmp	r5, #9
 800cdcc:	f04f 0301 	mov.w	r3, #1
 800cdd0:	6103      	str	r3, [r0, #16]
 800cdd2:	dd16      	ble.n	800ce02 <__s2b+0x72>
 800cdd4:	f104 0909 	add.w	r9, r4, #9
 800cdd8:	46c8      	mov	r8, r9
 800cdda:	442c      	add	r4, r5
 800cddc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cde0:	4601      	mov	r1, r0
 800cde2:	3b30      	subs	r3, #48	@ 0x30
 800cde4:	220a      	movs	r2, #10
 800cde6:	4630      	mov	r0, r6
 800cde8:	f7ff ff8c 	bl	800cd04 <__multadd>
 800cdec:	45a0      	cmp	r8, r4
 800cdee:	d1f5      	bne.n	800cddc <__s2b+0x4c>
 800cdf0:	f1a5 0408 	sub.w	r4, r5, #8
 800cdf4:	444c      	add	r4, r9
 800cdf6:	1b2d      	subs	r5, r5, r4
 800cdf8:	1963      	adds	r3, r4, r5
 800cdfa:	42bb      	cmp	r3, r7
 800cdfc:	db04      	blt.n	800ce08 <__s2b+0x78>
 800cdfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce02:	340a      	adds	r4, #10
 800ce04:	2509      	movs	r5, #9
 800ce06:	e7f6      	b.n	800cdf6 <__s2b+0x66>
 800ce08:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce0c:	4601      	mov	r1, r0
 800ce0e:	3b30      	subs	r3, #48	@ 0x30
 800ce10:	220a      	movs	r2, #10
 800ce12:	4630      	mov	r0, r6
 800ce14:	f7ff ff76 	bl	800cd04 <__multadd>
 800ce18:	e7ee      	b.n	800cdf8 <__s2b+0x68>
 800ce1a:	bf00      	nop
 800ce1c:	0800ff04 	.word	0x0800ff04
 800ce20:	0800ff75 	.word	0x0800ff75

0800ce24 <__hi0bits>:
 800ce24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ce28:	4603      	mov	r3, r0
 800ce2a:	bf36      	itet	cc
 800ce2c:	0403      	lslcc	r3, r0, #16
 800ce2e:	2000      	movcs	r0, #0
 800ce30:	2010      	movcc	r0, #16
 800ce32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce36:	bf3c      	itt	cc
 800ce38:	021b      	lslcc	r3, r3, #8
 800ce3a:	3008      	addcc	r0, #8
 800ce3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce40:	bf3c      	itt	cc
 800ce42:	011b      	lslcc	r3, r3, #4
 800ce44:	3004      	addcc	r0, #4
 800ce46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce4a:	bf3c      	itt	cc
 800ce4c:	009b      	lslcc	r3, r3, #2
 800ce4e:	3002      	addcc	r0, #2
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	db05      	blt.n	800ce60 <__hi0bits+0x3c>
 800ce54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ce58:	f100 0001 	add.w	r0, r0, #1
 800ce5c:	bf08      	it	eq
 800ce5e:	2020      	moveq	r0, #32
 800ce60:	4770      	bx	lr

0800ce62 <__lo0bits>:
 800ce62:	6803      	ldr	r3, [r0, #0]
 800ce64:	4602      	mov	r2, r0
 800ce66:	f013 0007 	ands.w	r0, r3, #7
 800ce6a:	d00b      	beq.n	800ce84 <__lo0bits+0x22>
 800ce6c:	07d9      	lsls	r1, r3, #31
 800ce6e:	d421      	bmi.n	800ceb4 <__lo0bits+0x52>
 800ce70:	0798      	lsls	r0, r3, #30
 800ce72:	bf49      	itett	mi
 800ce74:	085b      	lsrmi	r3, r3, #1
 800ce76:	089b      	lsrpl	r3, r3, #2
 800ce78:	2001      	movmi	r0, #1
 800ce7a:	6013      	strmi	r3, [r2, #0]
 800ce7c:	bf5c      	itt	pl
 800ce7e:	6013      	strpl	r3, [r2, #0]
 800ce80:	2002      	movpl	r0, #2
 800ce82:	4770      	bx	lr
 800ce84:	b299      	uxth	r1, r3
 800ce86:	b909      	cbnz	r1, 800ce8c <__lo0bits+0x2a>
 800ce88:	0c1b      	lsrs	r3, r3, #16
 800ce8a:	2010      	movs	r0, #16
 800ce8c:	b2d9      	uxtb	r1, r3
 800ce8e:	b909      	cbnz	r1, 800ce94 <__lo0bits+0x32>
 800ce90:	3008      	adds	r0, #8
 800ce92:	0a1b      	lsrs	r3, r3, #8
 800ce94:	0719      	lsls	r1, r3, #28
 800ce96:	bf04      	itt	eq
 800ce98:	091b      	lsreq	r3, r3, #4
 800ce9a:	3004      	addeq	r0, #4
 800ce9c:	0799      	lsls	r1, r3, #30
 800ce9e:	bf04      	itt	eq
 800cea0:	089b      	lsreq	r3, r3, #2
 800cea2:	3002      	addeq	r0, #2
 800cea4:	07d9      	lsls	r1, r3, #31
 800cea6:	d403      	bmi.n	800ceb0 <__lo0bits+0x4e>
 800cea8:	085b      	lsrs	r3, r3, #1
 800ceaa:	f100 0001 	add.w	r0, r0, #1
 800ceae:	d003      	beq.n	800ceb8 <__lo0bits+0x56>
 800ceb0:	6013      	str	r3, [r2, #0]
 800ceb2:	4770      	bx	lr
 800ceb4:	2000      	movs	r0, #0
 800ceb6:	4770      	bx	lr
 800ceb8:	2020      	movs	r0, #32
 800ceba:	4770      	bx	lr

0800cebc <__i2b>:
 800cebc:	b510      	push	{r4, lr}
 800cebe:	460c      	mov	r4, r1
 800cec0:	2101      	movs	r1, #1
 800cec2:	f7ff febd 	bl	800cc40 <_Balloc>
 800cec6:	4602      	mov	r2, r0
 800cec8:	b928      	cbnz	r0, 800ced6 <__i2b+0x1a>
 800ceca:	4b05      	ldr	r3, [pc, #20]	@ (800cee0 <__i2b+0x24>)
 800cecc:	4805      	ldr	r0, [pc, #20]	@ (800cee4 <__i2b+0x28>)
 800cece:	f240 1145 	movw	r1, #325	@ 0x145
 800ced2:	f7fe fbff 	bl	800b6d4 <__assert_func>
 800ced6:	2301      	movs	r3, #1
 800ced8:	6144      	str	r4, [r0, #20]
 800ceda:	6103      	str	r3, [r0, #16]
 800cedc:	bd10      	pop	{r4, pc}
 800cede:	bf00      	nop
 800cee0:	0800ff04 	.word	0x0800ff04
 800cee4:	0800ff75 	.word	0x0800ff75

0800cee8 <__multiply>:
 800cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceec:	4614      	mov	r4, r2
 800ceee:	690a      	ldr	r2, [r1, #16]
 800cef0:	6923      	ldr	r3, [r4, #16]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	bfa8      	it	ge
 800cef6:	4623      	movge	r3, r4
 800cef8:	460f      	mov	r7, r1
 800cefa:	bfa4      	itt	ge
 800cefc:	460c      	movge	r4, r1
 800cefe:	461f      	movge	r7, r3
 800cf00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cf04:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cf08:	68a3      	ldr	r3, [r4, #8]
 800cf0a:	6861      	ldr	r1, [r4, #4]
 800cf0c:	eb0a 0609 	add.w	r6, sl, r9
 800cf10:	42b3      	cmp	r3, r6
 800cf12:	b085      	sub	sp, #20
 800cf14:	bfb8      	it	lt
 800cf16:	3101      	addlt	r1, #1
 800cf18:	f7ff fe92 	bl	800cc40 <_Balloc>
 800cf1c:	b930      	cbnz	r0, 800cf2c <__multiply+0x44>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	4b44      	ldr	r3, [pc, #272]	@ (800d034 <__multiply+0x14c>)
 800cf22:	4845      	ldr	r0, [pc, #276]	@ (800d038 <__multiply+0x150>)
 800cf24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cf28:	f7fe fbd4 	bl	800b6d4 <__assert_func>
 800cf2c:	f100 0514 	add.w	r5, r0, #20
 800cf30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf34:	462b      	mov	r3, r5
 800cf36:	2200      	movs	r2, #0
 800cf38:	4543      	cmp	r3, r8
 800cf3a:	d321      	bcc.n	800cf80 <__multiply+0x98>
 800cf3c:	f107 0114 	add.w	r1, r7, #20
 800cf40:	f104 0214 	add.w	r2, r4, #20
 800cf44:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cf48:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cf4c:	9302      	str	r3, [sp, #8]
 800cf4e:	1b13      	subs	r3, r2, r4
 800cf50:	3b15      	subs	r3, #21
 800cf52:	f023 0303 	bic.w	r3, r3, #3
 800cf56:	3304      	adds	r3, #4
 800cf58:	f104 0715 	add.w	r7, r4, #21
 800cf5c:	42ba      	cmp	r2, r7
 800cf5e:	bf38      	it	cc
 800cf60:	2304      	movcc	r3, #4
 800cf62:	9301      	str	r3, [sp, #4]
 800cf64:	9b02      	ldr	r3, [sp, #8]
 800cf66:	9103      	str	r1, [sp, #12]
 800cf68:	428b      	cmp	r3, r1
 800cf6a:	d80c      	bhi.n	800cf86 <__multiply+0x9e>
 800cf6c:	2e00      	cmp	r6, #0
 800cf6e:	dd03      	ble.n	800cf78 <__multiply+0x90>
 800cf70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d05b      	beq.n	800d030 <__multiply+0x148>
 800cf78:	6106      	str	r6, [r0, #16]
 800cf7a:	b005      	add	sp, #20
 800cf7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf80:	f843 2b04 	str.w	r2, [r3], #4
 800cf84:	e7d8      	b.n	800cf38 <__multiply+0x50>
 800cf86:	f8b1 a000 	ldrh.w	sl, [r1]
 800cf8a:	f1ba 0f00 	cmp.w	sl, #0
 800cf8e:	d024      	beq.n	800cfda <__multiply+0xf2>
 800cf90:	f104 0e14 	add.w	lr, r4, #20
 800cf94:	46a9      	mov	r9, r5
 800cf96:	f04f 0c00 	mov.w	ip, #0
 800cf9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf9e:	f8d9 3000 	ldr.w	r3, [r9]
 800cfa2:	fa1f fb87 	uxth.w	fp, r7
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	fb0a 330b 	mla	r3, sl, fp, r3
 800cfac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cfb0:	f8d9 7000 	ldr.w	r7, [r9]
 800cfb4:	4463      	add	r3, ip
 800cfb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cfba:	fb0a c70b 	mla	r7, sl, fp, ip
 800cfbe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cfc8:	4572      	cmp	r2, lr
 800cfca:	f849 3b04 	str.w	r3, [r9], #4
 800cfce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cfd2:	d8e2      	bhi.n	800cf9a <__multiply+0xb2>
 800cfd4:	9b01      	ldr	r3, [sp, #4]
 800cfd6:	f845 c003 	str.w	ip, [r5, r3]
 800cfda:	9b03      	ldr	r3, [sp, #12]
 800cfdc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cfe0:	3104      	adds	r1, #4
 800cfe2:	f1b9 0f00 	cmp.w	r9, #0
 800cfe6:	d021      	beq.n	800d02c <__multiply+0x144>
 800cfe8:	682b      	ldr	r3, [r5, #0]
 800cfea:	f104 0c14 	add.w	ip, r4, #20
 800cfee:	46ae      	mov	lr, r5
 800cff0:	f04f 0a00 	mov.w	sl, #0
 800cff4:	f8bc b000 	ldrh.w	fp, [ip]
 800cff8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cffc:	fb09 770b 	mla	r7, r9, fp, r7
 800d000:	4457      	add	r7, sl
 800d002:	b29b      	uxth	r3, r3
 800d004:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d008:	f84e 3b04 	str.w	r3, [lr], #4
 800d00c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d010:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d014:	f8be 3000 	ldrh.w	r3, [lr]
 800d018:	fb09 330a 	mla	r3, r9, sl, r3
 800d01c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d020:	4562      	cmp	r2, ip
 800d022:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d026:	d8e5      	bhi.n	800cff4 <__multiply+0x10c>
 800d028:	9f01      	ldr	r7, [sp, #4]
 800d02a:	51eb      	str	r3, [r5, r7]
 800d02c:	3504      	adds	r5, #4
 800d02e:	e799      	b.n	800cf64 <__multiply+0x7c>
 800d030:	3e01      	subs	r6, #1
 800d032:	e79b      	b.n	800cf6c <__multiply+0x84>
 800d034:	0800ff04 	.word	0x0800ff04
 800d038:	0800ff75 	.word	0x0800ff75

0800d03c <__pow5mult>:
 800d03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d040:	4615      	mov	r5, r2
 800d042:	f012 0203 	ands.w	r2, r2, #3
 800d046:	4607      	mov	r7, r0
 800d048:	460e      	mov	r6, r1
 800d04a:	d007      	beq.n	800d05c <__pow5mult+0x20>
 800d04c:	4c25      	ldr	r4, [pc, #148]	@ (800d0e4 <__pow5mult+0xa8>)
 800d04e:	3a01      	subs	r2, #1
 800d050:	2300      	movs	r3, #0
 800d052:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d056:	f7ff fe55 	bl	800cd04 <__multadd>
 800d05a:	4606      	mov	r6, r0
 800d05c:	10ad      	asrs	r5, r5, #2
 800d05e:	d03d      	beq.n	800d0dc <__pow5mult+0xa0>
 800d060:	69fc      	ldr	r4, [r7, #28]
 800d062:	b97c      	cbnz	r4, 800d084 <__pow5mult+0x48>
 800d064:	2010      	movs	r0, #16
 800d066:	f7ff fd23 	bl	800cab0 <malloc>
 800d06a:	4602      	mov	r2, r0
 800d06c:	61f8      	str	r0, [r7, #28]
 800d06e:	b928      	cbnz	r0, 800d07c <__pow5mult+0x40>
 800d070:	4b1d      	ldr	r3, [pc, #116]	@ (800d0e8 <__pow5mult+0xac>)
 800d072:	481e      	ldr	r0, [pc, #120]	@ (800d0ec <__pow5mult+0xb0>)
 800d074:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d078:	f7fe fb2c 	bl	800b6d4 <__assert_func>
 800d07c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d080:	6004      	str	r4, [r0, #0]
 800d082:	60c4      	str	r4, [r0, #12]
 800d084:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d088:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d08c:	b94c      	cbnz	r4, 800d0a2 <__pow5mult+0x66>
 800d08e:	f240 2171 	movw	r1, #625	@ 0x271
 800d092:	4638      	mov	r0, r7
 800d094:	f7ff ff12 	bl	800cebc <__i2b>
 800d098:	2300      	movs	r3, #0
 800d09a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d09e:	4604      	mov	r4, r0
 800d0a0:	6003      	str	r3, [r0, #0]
 800d0a2:	f04f 0900 	mov.w	r9, #0
 800d0a6:	07eb      	lsls	r3, r5, #31
 800d0a8:	d50a      	bpl.n	800d0c0 <__pow5mult+0x84>
 800d0aa:	4631      	mov	r1, r6
 800d0ac:	4622      	mov	r2, r4
 800d0ae:	4638      	mov	r0, r7
 800d0b0:	f7ff ff1a 	bl	800cee8 <__multiply>
 800d0b4:	4631      	mov	r1, r6
 800d0b6:	4680      	mov	r8, r0
 800d0b8:	4638      	mov	r0, r7
 800d0ba:	f7ff fe01 	bl	800ccc0 <_Bfree>
 800d0be:	4646      	mov	r6, r8
 800d0c0:	106d      	asrs	r5, r5, #1
 800d0c2:	d00b      	beq.n	800d0dc <__pow5mult+0xa0>
 800d0c4:	6820      	ldr	r0, [r4, #0]
 800d0c6:	b938      	cbnz	r0, 800d0d8 <__pow5mult+0x9c>
 800d0c8:	4622      	mov	r2, r4
 800d0ca:	4621      	mov	r1, r4
 800d0cc:	4638      	mov	r0, r7
 800d0ce:	f7ff ff0b 	bl	800cee8 <__multiply>
 800d0d2:	6020      	str	r0, [r4, #0]
 800d0d4:	f8c0 9000 	str.w	r9, [r0]
 800d0d8:	4604      	mov	r4, r0
 800d0da:	e7e4      	b.n	800d0a6 <__pow5mult+0x6a>
 800d0dc:	4630      	mov	r0, r6
 800d0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0e2:	bf00      	nop
 800d0e4:	0800ffd0 	.word	0x0800ffd0
 800d0e8:	0800fdea 	.word	0x0800fdea
 800d0ec:	0800ff75 	.word	0x0800ff75

0800d0f0 <__lshift>:
 800d0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0f4:	460c      	mov	r4, r1
 800d0f6:	6849      	ldr	r1, [r1, #4]
 800d0f8:	6923      	ldr	r3, [r4, #16]
 800d0fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d0fe:	68a3      	ldr	r3, [r4, #8]
 800d100:	4607      	mov	r7, r0
 800d102:	4691      	mov	r9, r2
 800d104:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d108:	f108 0601 	add.w	r6, r8, #1
 800d10c:	42b3      	cmp	r3, r6
 800d10e:	db0b      	blt.n	800d128 <__lshift+0x38>
 800d110:	4638      	mov	r0, r7
 800d112:	f7ff fd95 	bl	800cc40 <_Balloc>
 800d116:	4605      	mov	r5, r0
 800d118:	b948      	cbnz	r0, 800d12e <__lshift+0x3e>
 800d11a:	4602      	mov	r2, r0
 800d11c:	4b28      	ldr	r3, [pc, #160]	@ (800d1c0 <__lshift+0xd0>)
 800d11e:	4829      	ldr	r0, [pc, #164]	@ (800d1c4 <__lshift+0xd4>)
 800d120:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d124:	f7fe fad6 	bl	800b6d4 <__assert_func>
 800d128:	3101      	adds	r1, #1
 800d12a:	005b      	lsls	r3, r3, #1
 800d12c:	e7ee      	b.n	800d10c <__lshift+0x1c>
 800d12e:	2300      	movs	r3, #0
 800d130:	f100 0114 	add.w	r1, r0, #20
 800d134:	f100 0210 	add.w	r2, r0, #16
 800d138:	4618      	mov	r0, r3
 800d13a:	4553      	cmp	r3, sl
 800d13c:	db33      	blt.n	800d1a6 <__lshift+0xb6>
 800d13e:	6920      	ldr	r0, [r4, #16]
 800d140:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d144:	f104 0314 	add.w	r3, r4, #20
 800d148:	f019 091f 	ands.w	r9, r9, #31
 800d14c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d150:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d154:	d02b      	beq.n	800d1ae <__lshift+0xbe>
 800d156:	f1c9 0e20 	rsb	lr, r9, #32
 800d15a:	468a      	mov	sl, r1
 800d15c:	2200      	movs	r2, #0
 800d15e:	6818      	ldr	r0, [r3, #0]
 800d160:	fa00 f009 	lsl.w	r0, r0, r9
 800d164:	4310      	orrs	r0, r2
 800d166:	f84a 0b04 	str.w	r0, [sl], #4
 800d16a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d16e:	459c      	cmp	ip, r3
 800d170:	fa22 f20e 	lsr.w	r2, r2, lr
 800d174:	d8f3      	bhi.n	800d15e <__lshift+0x6e>
 800d176:	ebac 0304 	sub.w	r3, ip, r4
 800d17a:	3b15      	subs	r3, #21
 800d17c:	f023 0303 	bic.w	r3, r3, #3
 800d180:	3304      	adds	r3, #4
 800d182:	f104 0015 	add.w	r0, r4, #21
 800d186:	4584      	cmp	ip, r0
 800d188:	bf38      	it	cc
 800d18a:	2304      	movcc	r3, #4
 800d18c:	50ca      	str	r2, [r1, r3]
 800d18e:	b10a      	cbz	r2, 800d194 <__lshift+0xa4>
 800d190:	f108 0602 	add.w	r6, r8, #2
 800d194:	3e01      	subs	r6, #1
 800d196:	4638      	mov	r0, r7
 800d198:	612e      	str	r6, [r5, #16]
 800d19a:	4621      	mov	r1, r4
 800d19c:	f7ff fd90 	bl	800ccc0 <_Bfree>
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	e7c5      	b.n	800d13a <__lshift+0x4a>
 800d1ae:	3904      	subs	r1, #4
 800d1b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1b8:	459c      	cmp	ip, r3
 800d1ba:	d8f9      	bhi.n	800d1b0 <__lshift+0xc0>
 800d1bc:	e7ea      	b.n	800d194 <__lshift+0xa4>
 800d1be:	bf00      	nop
 800d1c0:	0800ff04 	.word	0x0800ff04
 800d1c4:	0800ff75 	.word	0x0800ff75

0800d1c8 <__mcmp>:
 800d1c8:	690a      	ldr	r2, [r1, #16]
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	6900      	ldr	r0, [r0, #16]
 800d1ce:	1a80      	subs	r0, r0, r2
 800d1d0:	b530      	push	{r4, r5, lr}
 800d1d2:	d10e      	bne.n	800d1f2 <__mcmp+0x2a>
 800d1d4:	3314      	adds	r3, #20
 800d1d6:	3114      	adds	r1, #20
 800d1d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d1dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d1e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d1e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d1e8:	4295      	cmp	r5, r2
 800d1ea:	d003      	beq.n	800d1f4 <__mcmp+0x2c>
 800d1ec:	d205      	bcs.n	800d1fa <__mcmp+0x32>
 800d1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f2:	bd30      	pop	{r4, r5, pc}
 800d1f4:	42a3      	cmp	r3, r4
 800d1f6:	d3f3      	bcc.n	800d1e0 <__mcmp+0x18>
 800d1f8:	e7fb      	b.n	800d1f2 <__mcmp+0x2a>
 800d1fa:	2001      	movs	r0, #1
 800d1fc:	e7f9      	b.n	800d1f2 <__mcmp+0x2a>
	...

0800d200 <__mdiff>:
 800d200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d204:	4689      	mov	r9, r1
 800d206:	4606      	mov	r6, r0
 800d208:	4611      	mov	r1, r2
 800d20a:	4648      	mov	r0, r9
 800d20c:	4614      	mov	r4, r2
 800d20e:	f7ff ffdb 	bl	800d1c8 <__mcmp>
 800d212:	1e05      	subs	r5, r0, #0
 800d214:	d112      	bne.n	800d23c <__mdiff+0x3c>
 800d216:	4629      	mov	r1, r5
 800d218:	4630      	mov	r0, r6
 800d21a:	f7ff fd11 	bl	800cc40 <_Balloc>
 800d21e:	4602      	mov	r2, r0
 800d220:	b928      	cbnz	r0, 800d22e <__mdiff+0x2e>
 800d222:	4b3f      	ldr	r3, [pc, #252]	@ (800d320 <__mdiff+0x120>)
 800d224:	f240 2137 	movw	r1, #567	@ 0x237
 800d228:	483e      	ldr	r0, [pc, #248]	@ (800d324 <__mdiff+0x124>)
 800d22a:	f7fe fa53 	bl	800b6d4 <__assert_func>
 800d22e:	2301      	movs	r3, #1
 800d230:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d234:	4610      	mov	r0, r2
 800d236:	b003      	add	sp, #12
 800d238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23c:	bfbc      	itt	lt
 800d23e:	464b      	movlt	r3, r9
 800d240:	46a1      	movlt	r9, r4
 800d242:	4630      	mov	r0, r6
 800d244:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d248:	bfba      	itte	lt
 800d24a:	461c      	movlt	r4, r3
 800d24c:	2501      	movlt	r5, #1
 800d24e:	2500      	movge	r5, #0
 800d250:	f7ff fcf6 	bl	800cc40 <_Balloc>
 800d254:	4602      	mov	r2, r0
 800d256:	b918      	cbnz	r0, 800d260 <__mdiff+0x60>
 800d258:	4b31      	ldr	r3, [pc, #196]	@ (800d320 <__mdiff+0x120>)
 800d25a:	f240 2145 	movw	r1, #581	@ 0x245
 800d25e:	e7e3      	b.n	800d228 <__mdiff+0x28>
 800d260:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d264:	6926      	ldr	r6, [r4, #16]
 800d266:	60c5      	str	r5, [r0, #12]
 800d268:	f109 0310 	add.w	r3, r9, #16
 800d26c:	f109 0514 	add.w	r5, r9, #20
 800d270:	f104 0e14 	add.w	lr, r4, #20
 800d274:	f100 0b14 	add.w	fp, r0, #20
 800d278:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d27c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d280:	9301      	str	r3, [sp, #4]
 800d282:	46d9      	mov	r9, fp
 800d284:	f04f 0c00 	mov.w	ip, #0
 800d288:	9b01      	ldr	r3, [sp, #4]
 800d28a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d28e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d292:	9301      	str	r3, [sp, #4]
 800d294:	fa1f f38a 	uxth.w	r3, sl
 800d298:	4619      	mov	r1, r3
 800d29a:	b283      	uxth	r3, r0
 800d29c:	1acb      	subs	r3, r1, r3
 800d29e:	0c00      	lsrs	r0, r0, #16
 800d2a0:	4463      	add	r3, ip
 800d2a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d2a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d2b0:	4576      	cmp	r6, lr
 800d2b2:	f849 3b04 	str.w	r3, [r9], #4
 800d2b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d2ba:	d8e5      	bhi.n	800d288 <__mdiff+0x88>
 800d2bc:	1b33      	subs	r3, r6, r4
 800d2be:	3b15      	subs	r3, #21
 800d2c0:	f023 0303 	bic.w	r3, r3, #3
 800d2c4:	3415      	adds	r4, #21
 800d2c6:	3304      	adds	r3, #4
 800d2c8:	42a6      	cmp	r6, r4
 800d2ca:	bf38      	it	cc
 800d2cc:	2304      	movcc	r3, #4
 800d2ce:	441d      	add	r5, r3
 800d2d0:	445b      	add	r3, fp
 800d2d2:	461e      	mov	r6, r3
 800d2d4:	462c      	mov	r4, r5
 800d2d6:	4544      	cmp	r4, r8
 800d2d8:	d30e      	bcc.n	800d2f8 <__mdiff+0xf8>
 800d2da:	f108 0103 	add.w	r1, r8, #3
 800d2de:	1b49      	subs	r1, r1, r5
 800d2e0:	f021 0103 	bic.w	r1, r1, #3
 800d2e4:	3d03      	subs	r5, #3
 800d2e6:	45a8      	cmp	r8, r5
 800d2e8:	bf38      	it	cc
 800d2ea:	2100      	movcc	r1, #0
 800d2ec:	440b      	add	r3, r1
 800d2ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d2f2:	b191      	cbz	r1, 800d31a <__mdiff+0x11a>
 800d2f4:	6117      	str	r7, [r2, #16]
 800d2f6:	e79d      	b.n	800d234 <__mdiff+0x34>
 800d2f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d2fc:	46e6      	mov	lr, ip
 800d2fe:	0c08      	lsrs	r0, r1, #16
 800d300:	fa1c fc81 	uxtah	ip, ip, r1
 800d304:	4471      	add	r1, lr
 800d306:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d30a:	b289      	uxth	r1, r1
 800d30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d310:	f846 1b04 	str.w	r1, [r6], #4
 800d314:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d318:	e7dd      	b.n	800d2d6 <__mdiff+0xd6>
 800d31a:	3f01      	subs	r7, #1
 800d31c:	e7e7      	b.n	800d2ee <__mdiff+0xee>
 800d31e:	bf00      	nop
 800d320:	0800ff04 	.word	0x0800ff04
 800d324:	0800ff75 	.word	0x0800ff75

0800d328 <__ulp>:
 800d328:	b082      	sub	sp, #8
 800d32a:	ed8d 0b00 	vstr	d0, [sp]
 800d32e:	9a01      	ldr	r2, [sp, #4]
 800d330:	4b0f      	ldr	r3, [pc, #60]	@ (800d370 <__ulp+0x48>)
 800d332:	4013      	ands	r3, r2
 800d334:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d338:	2b00      	cmp	r3, #0
 800d33a:	dc08      	bgt.n	800d34e <__ulp+0x26>
 800d33c:	425b      	negs	r3, r3
 800d33e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d342:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d346:	da04      	bge.n	800d352 <__ulp+0x2a>
 800d348:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d34c:	4113      	asrs	r3, r2
 800d34e:	2200      	movs	r2, #0
 800d350:	e008      	b.n	800d364 <__ulp+0x3c>
 800d352:	f1a2 0314 	sub.w	r3, r2, #20
 800d356:	2b1e      	cmp	r3, #30
 800d358:	bfda      	itte	le
 800d35a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d35e:	40da      	lsrle	r2, r3
 800d360:	2201      	movgt	r2, #1
 800d362:	2300      	movs	r3, #0
 800d364:	4619      	mov	r1, r3
 800d366:	4610      	mov	r0, r2
 800d368:	ec41 0b10 	vmov	d0, r0, r1
 800d36c:	b002      	add	sp, #8
 800d36e:	4770      	bx	lr
 800d370:	7ff00000 	.word	0x7ff00000

0800d374 <__b2d>:
 800d374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d378:	6906      	ldr	r6, [r0, #16]
 800d37a:	f100 0814 	add.w	r8, r0, #20
 800d37e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d382:	1f37      	subs	r7, r6, #4
 800d384:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d388:	4610      	mov	r0, r2
 800d38a:	f7ff fd4b 	bl	800ce24 <__hi0bits>
 800d38e:	f1c0 0320 	rsb	r3, r0, #32
 800d392:	280a      	cmp	r0, #10
 800d394:	600b      	str	r3, [r1, #0]
 800d396:	491b      	ldr	r1, [pc, #108]	@ (800d404 <__b2d+0x90>)
 800d398:	dc15      	bgt.n	800d3c6 <__b2d+0x52>
 800d39a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d39e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d3a2:	45b8      	cmp	r8, r7
 800d3a4:	ea43 0501 	orr.w	r5, r3, r1
 800d3a8:	bf34      	ite	cc
 800d3aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d3ae:	2300      	movcs	r3, #0
 800d3b0:	3015      	adds	r0, #21
 800d3b2:	fa02 f000 	lsl.w	r0, r2, r0
 800d3b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800d3ba:	4303      	orrs	r3, r0
 800d3bc:	461c      	mov	r4, r3
 800d3be:	ec45 4b10 	vmov	d0, r4, r5
 800d3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3c6:	45b8      	cmp	r8, r7
 800d3c8:	bf3a      	itte	cc
 800d3ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d3ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800d3d2:	2300      	movcs	r3, #0
 800d3d4:	380b      	subs	r0, #11
 800d3d6:	d012      	beq.n	800d3fe <__b2d+0x8a>
 800d3d8:	f1c0 0120 	rsb	r1, r0, #32
 800d3dc:	fa23 f401 	lsr.w	r4, r3, r1
 800d3e0:	4082      	lsls	r2, r0
 800d3e2:	4322      	orrs	r2, r4
 800d3e4:	4547      	cmp	r7, r8
 800d3e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d3ea:	bf8c      	ite	hi
 800d3ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d3f0:	2200      	movls	r2, #0
 800d3f2:	4083      	lsls	r3, r0
 800d3f4:	40ca      	lsrs	r2, r1
 800d3f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	e7de      	b.n	800d3bc <__b2d+0x48>
 800d3fe:	ea42 0501 	orr.w	r5, r2, r1
 800d402:	e7db      	b.n	800d3bc <__b2d+0x48>
 800d404:	3ff00000 	.word	0x3ff00000

0800d408 <__d2b>:
 800d408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d40c:	460f      	mov	r7, r1
 800d40e:	2101      	movs	r1, #1
 800d410:	ec59 8b10 	vmov	r8, r9, d0
 800d414:	4616      	mov	r6, r2
 800d416:	f7ff fc13 	bl	800cc40 <_Balloc>
 800d41a:	4604      	mov	r4, r0
 800d41c:	b930      	cbnz	r0, 800d42c <__d2b+0x24>
 800d41e:	4602      	mov	r2, r0
 800d420:	4b23      	ldr	r3, [pc, #140]	@ (800d4b0 <__d2b+0xa8>)
 800d422:	4824      	ldr	r0, [pc, #144]	@ (800d4b4 <__d2b+0xac>)
 800d424:	f240 310f 	movw	r1, #783	@ 0x30f
 800d428:	f7fe f954 	bl	800b6d4 <__assert_func>
 800d42c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d430:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d434:	b10d      	cbz	r5, 800d43a <__d2b+0x32>
 800d436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d43a:	9301      	str	r3, [sp, #4]
 800d43c:	f1b8 0300 	subs.w	r3, r8, #0
 800d440:	d023      	beq.n	800d48a <__d2b+0x82>
 800d442:	4668      	mov	r0, sp
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	f7ff fd0c 	bl	800ce62 <__lo0bits>
 800d44a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d44e:	b1d0      	cbz	r0, 800d486 <__d2b+0x7e>
 800d450:	f1c0 0320 	rsb	r3, r0, #32
 800d454:	fa02 f303 	lsl.w	r3, r2, r3
 800d458:	430b      	orrs	r3, r1
 800d45a:	40c2      	lsrs	r2, r0
 800d45c:	6163      	str	r3, [r4, #20]
 800d45e:	9201      	str	r2, [sp, #4]
 800d460:	9b01      	ldr	r3, [sp, #4]
 800d462:	61a3      	str	r3, [r4, #24]
 800d464:	2b00      	cmp	r3, #0
 800d466:	bf0c      	ite	eq
 800d468:	2201      	moveq	r2, #1
 800d46a:	2202      	movne	r2, #2
 800d46c:	6122      	str	r2, [r4, #16]
 800d46e:	b1a5      	cbz	r5, 800d49a <__d2b+0x92>
 800d470:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d474:	4405      	add	r5, r0
 800d476:	603d      	str	r5, [r7, #0]
 800d478:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d47c:	6030      	str	r0, [r6, #0]
 800d47e:	4620      	mov	r0, r4
 800d480:	b003      	add	sp, #12
 800d482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d486:	6161      	str	r1, [r4, #20]
 800d488:	e7ea      	b.n	800d460 <__d2b+0x58>
 800d48a:	a801      	add	r0, sp, #4
 800d48c:	f7ff fce9 	bl	800ce62 <__lo0bits>
 800d490:	9b01      	ldr	r3, [sp, #4]
 800d492:	6163      	str	r3, [r4, #20]
 800d494:	3020      	adds	r0, #32
 800d496:	2201      	movs	r2, #1
 800d498:	e7e8      	b.n	800d46c <__d2b+0x64>
 800d49a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d49e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d4a2:	6038      	str	r0, [r7, #0]
 800d4a4:	6918      	ldr	r0, [r3, #16]
 800d4a6:	f7ff fcbd 	bl	800ce24 <__hi0bits>
 800d4aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4ae:	e7e5      	b.n	800d47c <__d2b+0x74>
 800d4b0:	0800ff04 	.word	0x0800ff04
 800d4b4:	0800ff75 	.word	0x0800ff75

0800d4b8 <__ratio>:
 800d4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4bc:	b085      	sub	sp, #20
 800d4be:	e9cd 1000 	strd	r1, r0, [sp]
 800d4c2:	a902      	add	r1, sp, #8
 800d4c4:	f7ff ff56 	bl	800d374 <__b2d>
 800d4c8:	9800      	ldr	r0, [sp, #0]
 800d4ca:	a903      	add	r1, sp, #12
 800d4cc:	ec55 4b10 	vmov	r4, r5, d0
 800d4d0:	f7ff ff50 	bl	800d374 <__b2d>
 800d4d4:	9b01      	ldr	r3, [sp, #4]
 800d4d6:	6919      	ldr	r1, [r3, #16]
 800d4d8:	9b00      	ldr	r3, [sp, #0]
 800d4da:	691b      	ldr	r3, [r3, #16]
 800d4dc:	1ac9      	subs	r1, r1, r3
 800d4de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d4e2:	1a9b      	subs	r3, r3, r2
 800d4e4:	ec5b ab10 	vmov	sl, fp, d0
 800d4e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	bfce      	itee	gt
 800d4f0:	462a      	movgt	r2, r5
 800d4f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d4f6:	465a      	movle	r2, fp
 800d4f8:	462f      	mov	r7, r5
 800d4fa:	46d9      	mov	r9, fp
 800d4fc:	bfcc      	ite	gt
 800d4fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d502:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d506:	464b      	mov	r3, r9
 800d508:	4652      	mov	r2, sl
 800d50a:	4620      	mov	r0, r4
 800d50c:	4639      	mov	r1, r7
 800d50e:	f7f3 f99d 	bl	800084c <__aeabi_ddiv>
 800d512:	ec41 0b10 	vmov	d0, r0, r1
 800d516:	b005      	add	sp, #20
 800d518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d51c <__copybits>:
 800d51c:	3901      	subs	r1, #1
 800d51e:	b570      	push	{r4, r5, r6, lr}
 800d520:	1149      	asrs	r1, r1, #5
 800d522:	6914      	ldr	r4, [r2, #16]
 800d524:	3101      	adds	r1, #1
 800d526:	f102 0314 	add.w	r3, r2, #20
 800d52a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d52e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d532:	1f05      	subs	r5, r0, #4
 800d534:	42a3      	cmp	r3, r4
 800d536:	d30c      	bcc.n	800d552 <__copybits+0x36>
 800d538:	1aa3      	subs	r3, r4, r2
 800d53a:	3b11      	subs	r3, #17
 800d53c:	f023 0303 	bic.w	r3, r3, #3
 800d540:	3211      	adds	r2, #17
 800d542:	42a2      	cmp	r2, r4
 800d544:	bf88      	it	hi
 800d546:	2300      	movhi	r3, #0
 800d548:	4418      	add	r0, r3
 800d54a:	2300      	movs	r3, #0
 800d54c:	4288      	cmp	r0, r1
 800d54e:	d305      	bcc.n	800d55c <__copybits+0x40>
 800d550:	bd70      	pop	{r4, r5, r6, pc}
 800d552:	f853 6b04 	ldr.w	r6, [r3], #4
 800d556:	f845 6f04 	str.w	r6, [r5, #4]!
 800d55a:	e7eb      	b.n	800d534 <__copybits+0x18>
 800d55c:	f840 3b04 	str.w	r3, [r0], #4
 800d560:	e7f4      	b.n	800d54c <__copybits+0x30>

0800d562 <__any_on>:
 800d562:	f100 0214 	add.w	r2, r0, #20
 800d566:	6900      	ldr	r0, [r0, #16]
 800d568:	114b      	asrs	r3, r1, #5
 800d56a:	4298      	cmp	r0, r3
 800d56c:	b510      	push	{r4, lr}
 800d56e:	db11      	blt.n	800d594 <__any_on+0x32>
 800d570:	dd0a      	ble.n	800d588 <__any_on+0x26>
 800d572:	f011 011f 	ands.w	r1, r1, #31
 800d576:	d007      	beq.n	800d588 <__any_on+0x26>
 800d578:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d57c:	fa24 f001 	lsr.w	r0, r4, r1
 800d580:	fa00 f101 	lsl.w	r1, r0, r1
 800d584:	428c      	cmp	r4, r1
 800d586:	d10b      	bne.n	800d5a0 <__any_on+0x3e>
 800d588:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d803      	bhi.n	800d598 <__any_on+0x36>
 800d590:	2000      	movs	r0, #0
 800d592:	bd10      	pop	{r4, pc}
 800d594:	4603      	mov	r3, r0
 800d596:	e7f7      	b.n	800d588 <__any_on+0x26>
 800d598:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d59c:	2900      	cmp	r1, #0
 800d59e:	d0f5      	beq.n	800d58c <__any_on+0x2a>
 800d5a0:	2001      	movs	r0, #1
 800d5a2:	e7f6      	b.n	800d592 <__any_on+0x30>

0800d5a4 <__ascii_wctomb>:
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	4608      	mov	r0, r1
 800d5a8:	b141      	cbz	r1, 800d5bc <__ascii_wctomb+0x18>
 800d5aa:	2aff      	cmp	r2, #255	@ 0xff
 800d5ac:	d904      	bls.n	800d5b8 <__ascii_wctomb+0x14>
 800d5ae:	228a      	movs	r2, #138	@ 0x8a
 800d5b0:	601a      	str	r2, [r3, #0]
 800d5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b6:	4770      	bx	lr
 800d5b8:	700a      	strb	r2, [r1, #0]
 800d5ba:	2001      	movs	r0, #1
 800d5bc:	4770      	bx	lr

0800d5be <__ssputs_r>:
 800d5be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c2:	688e      	ldr	r6, [r1, #8]
 800d5c4:	461f      	mov	r7, r3
 800d5c6:	42be      	cmp	r6, r7
 800d5c8:	680b      	ldr	r3, [r1, #0]
 800d5ca:	4682      	mov	sl, r0
 800d5cc:	460c      	mov	r4, r1
 800d5ce:	4690      	mov	r8, r2
 800d5d0:	d82d      	bhi.n	800d62e <__ssputs_r+0x70>
 800d5d2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5d6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d5da:	d026      	beq.n	800d62a <__ssputs_r+0x6c>
 800d5dc:	6965      	ldr	r5, [r4, #20]
 800d5de:	6909      	ldr	r1, [r1, #16]
 800d5e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5e4:	eba3 0901 	sub.w	r9, r3, r1
 800d5e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5ec:	1c7b      	adds	r3, r7, #1
 800d5ee:	444b      	add	r3, r9
 800d5f0:	106d      	asrs	r5, r5, #1
 800d5f2:	429d      	cmp	r5, r3
 800d5f4:	bf38      	it	cc
 800d5f6:	461d      	movcc	r5, r3
 800d5f8:	0553      	lsls	r3, r2, #21
 800d5fa:	d527      	bpl.n	800d64c <__ssputs_r+0x8e>
 800d5fc:	4629      	mov	r1, r5
 800d5fe:	f7ff fa81 	bl	800cb04 <_malloc_r>
 800d602:	4606      	mov	r6, r0
 800d604:	b360      	cbz	r0, 800d660 <__ssputs_r+0xa2>
 800d606:	6921      	ldr	r1, [r4, #16]
 800d608:	464a      	mov	r2, r9
 800d60a:	f7fe f844 	bl	800b696 <memcpy>
 800d60e:	89a3      	ldrh	r3, [r4, #12]
 800d610:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d618:	81a3      	strh	r3, [r4, #12]
 800d61a:	6126      	str	r6, [r4, #16]
 800d61c:	6165      	str	r5, [r4, #20]
 800d61e:	444e      	add	r6, r9
 800d620:	eba5 0509 	sub.w	r5, r5, r9
 800d624:	6026      	str	r6, [r4, #0]
 800d626:	60a5      	str	r5, [r4, #8]
 800d628:	463e      	mov	r6, r7
 800d62a:	42be      	cmp	r6, r7
 800d62c:	d900      	bls.n	800d630 <__ssputs_r+0x72>
 800d62e:	463e      	mov	r6, r7
 800d630:	6820      	ldr	r0, [r4, #0]
 800d632:	4632      	mov	r2, r6
 800d634:	4641      	mov	r1, r8
 800d636:	f000 f9d7 	bl	800d9e8 <memmove>
 800d63a:	68a3      	ldr	r3, [r4, #8]
 800d63c:	1b9b      	subs	r3, r3, r6
 800d63e:	60a3      	str	r3, [r4, #8]
 800d640:	6823      	ldr	r3, [r4, #0]
 800d642:	4433      	add	r3, r6
 800d644:	6023      	str	r3, [r4, #0]
 800d646:	2000      	movs	r0, #0
 800d648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d64c:	462a      	mov	r2, r5
 800d64e:	f000 fa10 	bl	800da72 <_realloc_r>
 800d652:	4606      	mov	r6, r0
 800d654:	2800      	cmp	r0, #0
 800d656:	d1e0      	bne.n	800d61a <__ssputs_r+0x5c>
 800d658:	6921      	ldr	r1, [r4, #16]
 800d65a:	4650      	mov	r0, sl
 800d65c:	f7fe fea4 	bl	800c3a8 <_free_r>
 800d660:	230c      	movs	r3, #12
 800d662:	f8ca 3000 	str.w	r3, [sl]
 800d666:	89a3      	ldrh	r3, [r4, #12]
 800d668:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d66c:	81a3      	strh	r3, [r4, #12]
 800d66e:	f04f 30ff 	mov.w	r0, #4294967295
 800d672:	e7e9      	b.n	800d648 <__ssputs_r+0x8a>

0800d674 <_svfiprintf_r>:
 800d674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d678:	4698      	mov	r8, r3
 800d67a:	898b      	ldrh	r3, [r1, #12]
 800d67c:	061b      	lsls	r3, r3, #24
 800d67e:	b09d      	sub	sp, #116	@ 0x74
 800d680:	4607      	mov	r7, r0
 800d682:	460d      	mov	r5, r1
 800d684:	4614      	mov	r4, r2
 800d686:	d510      	bpl.n	800d6aa <_svfiprintf_r+0x36>
 800d688:	690b      	ldr	r3, [r1, #16]
 800d68a:	b973      	cbnz	r3, 800d6aa <_svfiprintf_r+0x36>
 800d68c:	2140      	movs	r1, #64	@ 0x40
 800d68e:	f7ff fa39 	bl	800cb04 <_malloc_r>
 800d692:	6028      	str	r0, [r5, #0]
 800d694:	6128      	str	r0, [r5, #16]
 800d696:	b930      	cbnz	r0, 800d6a6 <_svfiprintf_r+0x32>
 800d698:	230c      	movs	r3, #12
 800d69a:	603b      	str	r3, [r7, #0]
 800d69c:	f04f 30ff 	mov.w	r0, #4294967295
 800d6a0:	b01d      	add	sp, #116	@ 0x74
 800d6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a6:	2340      	movs	r3, #64	@ 0x40
 800d6a8:	616b      	str	r3, [r5, #20]
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6ae:	2320      	movs	r3, #32
 800d6b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6b8:	2330      	movs	r3, #48	@ 0x30
 800d6ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d858 <_svfiprintf_r+0x1e4>
 800d6be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6c2:	f04f 0901 	mov.w	r9, #1
 800d6c6:	4623      	mov	r3, r4
 800d6c8:	469a      	mov	sl, r3
 800d6ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6ce:	b10a      	cbz	r2, 800d6d4 <_svfiprintf_r+0x60>
 800d6d0:	2a25      	cmp	r2, #37	@ 0x25
 800d6d2:	d1f9      	bne.n	800d6c8 <_svfiprintf_r+0x54>
 800d6d4:	ebba 0b04 	subs.w	fp, sl, r4
 800d6d8:	d00b      	beq.n	800d6f2 <_svfiprintf_r+0x7e>
 800d6da:	465b      	mov	r3, fp
 800d6dc:	4622      	mov	r2, r4
 800d6de:	4629      	mov	r1, r5
 800d6e0:	4638      	mov	r0, r7
 800d6e2:	f7ff ff6c 	bl	800d5be <__ssputs_r>
 800d6e6:	3001      	adds	r0, #1
 800d6e8:	f000 80a7 	beq.w	800d83a <_svfiprintf_r+0x1c6>
 800d6ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6ee:	445a      	add	r2, fp
 800d6f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6f2:	f89a 3000 	ldrb.w	r3, [sl]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	f000 809f 	beq.w	800d83a <_svfiprintf_r+0x1c6>
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d706:	f10a 0a01 	add.w	sl, sl, #1
 800d70a:	9304      	str	r3, [sp, #16]
 800d70c:	9307      	str	r3, [sp, #28]
 800d70e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d712:	931a      	str	r3, [sp, #104]	@ 0x68
 800d714:	4654      	mov	r4, sl
 800d716:	2205      	movs	r2, #5
 800d718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d71c:	484e      	ldr	r0, [pc, #312]	@ (800d858 <_svfiprintf_r+0x1e4>)
 800d71e:	f7f2 fd57 	bl	80001d0 <memchr>
 800d722:	9a04      	ldr	r2, [sp, #16]
 800d724:	b9d8      	cbnz	r0, 800d75e <_svfiprintf_r+0xea>
 800d726:	06d0      	lsls	r0, r2, #27
 800d728:	bf44      	itt	mi
 800d72a:	2320      	movmi	r3, #32
 800d72c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d730:	0711      	lsls	r1, r2, #28
 800d732:	bf44      	itt	mi
 800d734:	232b      	movmi	r3, #43	@ 0x2b
 800d736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d73a:	f89a 3000 	ldrb.w	r3, [sl]
 800d73e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d740:	d015      	beq.n	800d76e <_svfiprintf_r+0xfa>
 800d742:	9a07      	ldr	r2, [sp, #28]
 800d744:	4654      	mov	r4, sl
 800d746:	2000      	movs	r0, #0
 800d748:	f04f 0c0a 	mov.w	ip, #10
 800d74c:	4621      	mov	r1, r4
 800d74e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d752:	3b30      	subs	r3, #48	@ 0x30
 800d754:	2b09      	cmp	r3, #9
 800d756:	d94b      	bls.n	800d7f0 <_svfiprintf_r+0x17c>
 800d758:	b1b0      	cbz	r0, 800d788 <_svfiprintf_r+0x114>
 800d75a:	9207      	str	r2, [sp, #28]
 800d75c:	e014      	b.n	800d788 <_svfiprintf_r+0x114>
 800d75e:	eba0 0308 	sub.w	r3, r0, r8
 800d762:	fa09 f303 	lsl.w	r3, r9, r3
 800d766:	4313      	orrs	r3, r2
 800d768:	9304      	str	r3, [sp, #16]
 800d76a:	46a2      	mov	sl, r4
 800d76c:	e7d2      	b.n	800d714 <_svfiprintf_r+0xa0>
 800d76e:	9b03      	ldr	r3, [sp, #12]
 800d770:	1d19      	adds	r1, r3, #4
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	9103      	str	r1, [sp, #12]
 800d776:	2b00      	cmp	r3, #0
 800d778:	bfbb      	ittet	lt
 800d77a:	425b      	neglt	r3, r3
 800d77c:	f042 0202 	orrlt.w	r2, r2, #2
 800d780:	9307      	strge	r3, [sp, #28]
 800d782:	9307      	strlt	r3, [sp, #28]
 800d784:	bfb8      	it	lt
 800d786:	9204      	strlt	r2, [sp, #16]
 800d788:	7823      	ldrb	r3, [r4, #0]
 800d78a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d78c:	d10a      	bne.n	800d7a4 <_svfiprintf_r+0x130>
 800d78e:	7863      	ldrb	r3, [r4, #1]
 800d790:	2b2a      	cmp	r3, #42	@ 0x2a
 800d792:	d132      	bne.n	800d7fa <_svfiprintf_r+0x186>
 800d794:	9b03      	ldr	r3, [sp, #12]
 800d796:	1d1a      	adds	r2, r3, #4
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	9203      	str	r2, [sp, #12]
 800d79c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7a0:	3402      	adds	r4, #2
 800d7a2:	9305      	str	r3, [sp, #20]
 800d7a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d868 <_svfiprintf_r+0x1f4>
 800d7a8:	7821      	ldrb	r1, [r4, #0]
 800d7aa:	2203      	movs	r2, #3
 800d7ac:	4650      	mov	r0, sl
 800d7ae:	f7f2 fd0f 	bl	80001d0 <memchr>
 800d7b2:	b138      	cbz	r0, 800d7c4 <_svfiprintf_r+0x150>
 800d7b4:	9b04      	ldr	r3, [sp, #16]
 800d7b6:	eba0 000a 	sub.w	r0, r0, sl
 800d7ba:	2240      	movs	r2, #64	@ 0x40
 800d7bc:	4082      	lsls	r2, r0
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	3401      	adds	r4, #1
 800d7c2:	9304      	str	r3, [sp, #16]
 800d7c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c8:	4824      	ldr	r0, [pc, #144]	@ (800d85c <_svfiprintf_r+0x1e8>)
 800d7ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7ce:	2206      	movs	r2, #6
 800d7d0:	f7f2 fcfe 	bl	80001d0 <memchr>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d036      	beq.n	800d846 <_svfiprintf_r+0x1d2>
 800d7d8:	4b21      	ldr	r3, [pc, #132]	@ (800d860 <_svfiprintf_r+0x1ec>)
 800d7da:	bb1b      	cbnz	r3, 800d824 <_svfiprintf_r+0x1b0>
 800d7dc:	9b03      	ldr	r3, [sp, #12]
 800d7de:	3307      	adds	r3, #7
 800d7e0:	f023 0307 	bic.w	r3, r3, #7
 800d7e4:	3308      	adds	r3, #8
 800d7e6:	9303      	str	r3, [sp, #12]
 800d7e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ea:	4433      	add	r3, r6
 800d7ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7ee:	e76a      	b.n	800d6c6 <_svfiprintf_r+0x52>
 800d7f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7f4:	460c      	mov	r4, r1
 800d7f6:	2001      	movs	r0, #1
 800d7f8:	e7a8      	b.n	800d74c <_svfiprintf_r+0xd8>
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	3401      	adds	r4, #1
 800d7fe:	9305      	str	r3, [sp, #20]
 800d800:	4619      	mov	r1, r3
 800d802:	f04f 0c0a 	mov.w	ip, #10
 800d806:	4620      	mov	r0, r4
 800d808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d80c:	3a30      	subs	r2, #48	@ 0x30
 800d80e:	2a09      	cmp	r2, #9
 800d810:	d903      	bls.n	800d81a <_svfiprintf_r+0x1a6>
 800d812:	2b00      	cmp	r3, #0
 800d814:	d0c6      	beq.n	800d7a4 <_svfiprintf_r+0x130>
 800d816:	9105      	str	r1, [sp, #20]
 800d818:	e7c4      	b.n	800d7a4 <_svfiprintf_r+0x130>
 800d81a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d81e:	4604      	mov	r4, r0
 800d820:	2301      	movs	r3, #1
 800d822:	e7f0      	b.n	800d806 <_svfiprintf_r+0x192>
 800d824:	ab03      	add	r3, sp, #12
 800d826:	9300      	str	r3, [sp, #0]
 800d828:	462a      	mov	r2, r5
 800d82a:	4b0e      	ldr	r3, [pc, #56]	@ (800d864 <_svfiprintf_r+0x1f0>)
 800d82c:	a904      	add	r1, sp, #16
 800d82e:	4638      	mov	r0, r7
 800d830:	f7fc ff52 	bl	800a6d8 <_printf_float>
 800d834:	1c42      	adds	r2, r0, #1
 800d836:	4606      	mov	r6, r0
 800d838:	d1d6      	bne.n	800d7e8 <_svfiprintf_r+0x174>
 800d83a:	89ab      	ldrh	r3, [r5, #12]
 800d83c:	065b      	lsls	r3, r3, #25
 800d83e:	f53f af2d 	bmi.w	800d69c <_svfiprintf_r+0x28>
 800d842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d844:	e72c      	b.n	800d6a0 <_svfiprintf_r+0x2c>
 800d846:	ab03      	add	r3, sp, #12
 800d848:	9300      	str	r3, [sp, #0]
 800d84a:	462a      	mov	r2, r5
 800d84c:	4b05      	ldr	r3, [pc, #20]	@ (800d864 <_svfiprintf_r+0x1f0>)
 800d84e:	a904      	add	r1, sp, #16
 800d850:	4638      	mov	r0, r7
 800d852:	f7fd f9d9 	bl	800ac08 <_printf_i>
 800d856:	e7ed      	b.n	800d834 <_svfiprintf_r+0x1c0>
 800d858:	080100d0 	.word	0x080100d0
 800d85c:	080100da 	.word	0x080100da
 800d860:	0800a6d9 	.word	0x0800a6d9
 800d864:	0800d5bf 	.word	0x0800d5bf
 800d868:	080100d6 	.word	0x080100d6

0800d86c <__sflush_r>:
 800d86c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d874:	0716      	lsls	r6, r2, #28
 800d876:	4605      	mov	r5, r0
 800d878:	460c      	mov	r4, r1
 800d87a:	d454      	bmi.n	800d926 <__sflush_r+0xba>
 800d87c:	684b      	ldr	r3, [r1, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	dc02      	bgt.n	800d888 <__sflush_r+0x1c>
 800d882:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d884:	2b00      	cmp	r3, #0
 800d886:	dd48      	ble.n	800d91a <__sflush_r+0xae>
 800d888:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d88a:	2e00      	cmp	r6, #0
 800d88c:	d045      	beq.n	800d91a <__sflush_r+0xae>
 800d88e:	2300      	movs	r3, #0
 800d890:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d894:	682f      	ldr	r7, [r5, #0]
 800d896:	6a21      	ldr	r1, [r4, #32]
 800d898:	602b      	str	r3, [r5, #0]
 800d89a:	d030      	beq.n	800d8fe <__sflush_r+0x92>
 800d89c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d89e:	89a3      	ldrh	r3, [r4, #12]
 800d8a0:	0759      	lsls	r1, r3, #29
 800d8a2:	d505      	bpl.n	800d8b0 <__sflush_r+0x44>
 800d8a4:	6863      	ldr	r3, [r4, #4]
 800d8a6:	1ad2      	subs	r2, r2, r3
 800d8a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d8aa:	b10b      	cbz	r3, 800d8b0 <__sflush_r+0x44>
 800d8ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8ae:	1ad2      	subs	r2, r2, r3
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8b4:	6a21      	ldr	r1, [r4, #32]
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	47b0      	blx	r6
 800d8ba:	1c43      	adds	r3, r0, #1
 800d8bc:	89a3      	ldrh	r3, [r4, #12]
 800d8be:	d106      	bne.n	800d8ce <__sflush_r+0x62>
 800d8c0:	6829      	ldr	r1, [r5, #0]
 800d8c2:	291d      	cmp	r1, #29
 800d8c4:	d82b      	bhi.n	800d91e <__sflush_r+0xb2>
 800d8c6:	4a2a      	ldr	r2, [pc, #168]	@ (800d970 <__sflush_r+0x104>)
 800d8c8:	410a      	asrs	r2, r1
 800d8ca:	07d6      	lsls	r6, r2, #31
 800d8cc:	d427      	bmi.n	800d91e <__sflush_r+0xb2>
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	6062      	str	r2, [r4, #4]
 800d8d2:	04d9      	lsls	r1, r3, #19
 800d8d4:	6922      	ldr	r2, [r4, #16]
 800d8d6:	6022      	str	r2, [r4, #0]
 800d8d8:	d504      	bpl.n	800d8e4 <__sflush_r+0x78>
 800d8da:	1c42      	adds	r2, r0, #1
 800d8dc:	d101      	bne.n	800d8e2 <__sflush_r+0x76>
 800d8de:	682b      	ldr	r3, [r5, #0]
 800d8e0:	b903      	cbnz	r3, 800d8e4 <__sflush_r+0x78>
 800d8e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d8e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8e6:	602f      	str	r7, [r5, #0]
 800d8e8:	b1b9      	cbz	r1, 800d91a <__sflush_r+0xae>
 800d8ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8ee:	4299      	cmp	r1, r3
 800d8f0:	d002      	beq.n	800d8f8 <__sflush_r+0x8c>
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	f7fe fd58 	bl	800c3a8 <_free_r>
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8fc:	e00d      	b.n	800d91a <__sflush_r+0xae>
 800d8fe:	2301      	movs	r3, #1
 800d900:	4628      	mov	r0, r5
 800d902:	47b0      	blx	r6
 800d904:	4602      	mov	r2, r0
 800d906:	1c50      	adds	r0, r2, #1
 800d908:	d1c9      	bne.n	800d89e <__sflush_r+0x32>
 800d90a:	682b      	ldr	r3, [r5, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d0c6      	beq.n	800d89e <__sflush_r+0x32>
 800d910:	2b1d      	cmp	r3, #29
 800d912:	d001      	beq.n	800d918 <__sflush_r+0xac>
 800d914:	2b16      	cmp	r3, #22
 800d916:	d11e      	bne.n	800d956 <__sflush_r+0xea>
 800d918:	602f      	str	r7, [r5, #0]
 800d91a:	2000      	movs	r0, #0
 800d91c:	e022      	b.n	800d964 <__sflush_r+0xf8>
 800d91e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d922:	b21b      	sxth	r3, r3
 800d924:	e01b      	b.n	800d95e <__sflush_r+0xf2>
 800d926:	690f      	ldr	r7, [r1, #16]
 800d928:	2f00      	cmp	r7, #0
 800d92a:	d0f6      	beq.n	800d91a <__sflush_r+0xae>
 800d92c:	0793      	lsls	r3, r2, #30
 800d92e:	680e      	ldr	r6, [r1, #0]
 800d930:	bf08      	it	eq
 800d932:	694b      	ldreq	r3, [r1, #20]
 800d934:	600f      	str	r7, [r1, #0]
 800d936:	bf18      	it	ne
 800d938:	2300      	movne	r3, #0
 800d93a:	eba6 0807 	sub.w	r8, r6, r7
 800d93e:	608b      	str	r3, [r1, #8]
 800d940:	f1b8 0f00 	cmp.w	r8, #0
 800d944:	dde9      	ble.n	800d91a <__sflush_r+0xae>
 800d946:	6a21      	ldr	r1, [r4, #32]
 800d948:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d94a:	4643      	mov	r3, r8
 800d94c:	463a      	mov	r2, r7
 800d94e:	4628      	mov	r0, r5
 800d950:	47b0      	blx	r6
 800d952:	2800      	cmp	r0, #0
 800d954:	dc08      	bgt.n	800d968 <__sflush_r+0xfc>
 800d956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d95a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d95e:	81a3      	strh	r3, [r4, #12]
 800d960:	f04f 30ff 	mov.w	r0, #4294967295
 800d964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d968:	4407      	add	r7, r0
 800d96a:	eba8 0800 	sub.w	r8, r8, r0
 800d96e:	e7e7      	b.n	800d940 <__sflush_r+0xd4>
 800d970:	dfbffffe 	.word	0xdfbffffe

0800d974 <_fflush_r>:
 800d974:	b538      	push	{r3, r4, r5, lr}
 800d976:	690b      	ldr	r3, [r1, #16]
 800d978:	4605      	mov	r5, r0
 800d97a:	460c      	mov	r4, r1
 800d97c:	b913      	cbnz	r3, 800d984 <_fflush_r+0x10>
 800d97e:	2500      	movs	r5, #0
 800d980:	4628      	mov	r0, r5
 800d982:	bd38      	pop	{r3, r4, r5, pc}
 800d984:	b118      	cbz	r0, 800d98e <_fflush_r+0x1a>
 800d986:	6a03      	ldr	r3, [r0, #32]
 800d988:	b90b      	cbnz	r3, 800d98e <_fflush_r+0x1a>
 800d98a:	f7fd fcfd 	bl	800b388 <__sinit>
 800d98e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d0f3      	beq.n	800d97e <_fflush_r+0xa>
 800d996:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d998:	07d0      	lsls	r0, r2, #31
 800d99a:	d404      	bmi.n	800d9a6 <_fflush_r+0x32>
 800d99c:	0599      	lsls	r1, r3, #22
 800d99e:	d402      	bmi.n	800d9a6 <_fflush_r+0x32>
 800d9a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9a2:	f7fd fe76 	bl	800b692 <__retarget_lock_acquire_recursive>
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	4621      	mov	r1, r4
 800d9aa:	f7ff ff5f 	bl	800d86c <__sflush_r>
 800d9ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9b0:	07da      	lsls	r2, r3, #31
 800d9b2:	4605      	mov	r5, r0
 800d9b4:	d4e4      	bmi.n	800d980 <_fflush_r+0xc>
 800d9b6:	89a3      	ldrh	r3, [r4, #12]
 800d9b8:	059b      	lsls	r3, r3, #22
 800d9ba:	d4e1      	bmi.n	800d980 <_fflush_r+0xc>
 800d9bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9be:	f7fd fe69 	bl	800b694 <__retarget_lock_release_recursive>
 800d9c2:	e7dd      	b.n	800d980 <_fflush_r+0xc>

0800d9c4 <fiprintf>:
 800d9c4:	b40e      	push	{r1, r2, r3}
 800d9c6:	b503      	push	{r0, r1, lr}
 800d9c8:	4601      	mov	r1, r0
 800d9ca:	ab03      	add	r3, sp, #12
 800d9cc:	4805      	ldr	r0, [pc, #20]	@ (800d9e4 <fiprintf+0x20>)
 800d9ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9d2:	6800      	ldr	r0, [r0, #0]
 800d9d4:	9301      	str	r3, [sp, #4]
 800d9d6:	f000 f8a3 	bl	800db20 <_vfiprintf_r>
 800d9da:	b002      	add	sp, #8
 800d9dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9e0:	b003      	add	sp, #12
 800d9e2:	4770      	bx	lr
 800d9e4:	20000258 	.word	0x20000258

0800d9e8 <memmove>:
 800d9e8:	4288      	cmp	r0, r1
 800d9ea:	b510      	push	{r4, lr}
 800d9ec:	eb01 0402 	add.w	r4, r1, r2
 800d9f0:	d902      	bls.n	800d9f8 <memmove+0x10>
 800d9f2:	4284      	cmp	r4, r0
 800d9f4:	4623      	mov	r3, r4
 800d9f6:	d807      	bhi.n	800da08 <memmove+0x20>
 800d9f8:	1e43      	subs	r3, r0, #1
 800d9fa:	42a1      	cmp	r1, r4
 800d9fc:	d008      	beq.n	800da10 <memmove+0x28>
 800d9fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da06:	e7f8      	b.n	800d9fa <memmove+0x12>
 800da08:	4402      	add	r2, r0
 800da0a:	4601      	mov	r1, r0
 800da0c:	428a      	cmp	r2, r1
 800da0e:	d100      	bne.n	800da12 <memmove+0x2a>
 800da10:	bd10      	pop	{r4, pc}
 800da12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da1a:	e7f7      	b.n	800da0c <memmove+0x24>

0800da1c <_sbrk_r>:
 800da1c:	b538      	push	{r3, r4, r5, lr}
 800da1e:	4d06      	ldr	r5, [pc, #24]	@ (800da38 <_sbrk_r+0x1c>)
 800da20:	2300      	movs	r3, #0
 800da22:	4604      	mov	r4, r0
 800da24:	4608      	mov	r0, r1
 800da26:	602b      	str	r3, [r5, #0]
 800da28:	f7f8 f96e 	bl	8005d08 <_sbrk>
 800da2c:	1c43      	adds	r3, r0, #1
 800da2e:	d102      	bne.n	800da36 <_sbrk_r+0x1a>
 800da30:	682b      	ldr	r3, [r5, #0]
 800da32:	b103      	cbz	r3, 800da36 <_sbrk_r+0x1a>
 800da34:	6023      	str	r3, [r4, #0]
 800da36:	bd38      	pop	{r3, r4, r5, pc}
 800da38:	20000888 	.word	0x20000888

0800da3c <abort>:
 800da3c:	b508      	push	{r3, lr}
 800da3e:	2006      	movs	r0, #6
 800da40:	f000 fa42 	bl	800dec8 <raise>
 800da44:	2001      	movs	r0, #1
 800da46:	f7f8 f8e7 	bl	8005c18 <_exit>

0800da4a <_calloc_r>:
 800da4a:	b570      	push	{r4, r5, r6, lr}
 800da4c:	fba1 5402 	umull	r5, r4, r1, r2
 800da50:	b93c      	cbnz	r4, 800da62 <_calloc_r+0x18>
 800da52:	4629      	mov	r1, r5
 800da54:	f7ff f856 	bl	800cb04 <_malloc_r>
 800da58:	4606      	mov	r6, r0
 800da5a:	b928      	cbnz	r0, 800da68 <_calloc_r+0x1e>
 800da5c:	2600      	movs	r6, #0
 800da5e:	4630      	mov	r0, r6
 800da60:	bd70      	pop	{r4, r5, r6, pc}
 800da62:	220c      	movs	r2, #12
 800da64:	6002      	str	r2, [r0, #0]
 800da66:	e7f9      	b.n	800da5c <_calloc_r+0x12>
 800da68:	462a      	mov	r2, r5
 800da6a:	4621      	mov	r1, r4
 800da6c:	f7fd fd25 	bl	800b4ba <memset>
 800da70:	e7f5      	b.n	800da5e <_calloc_r+0x14>

0800da72 <_realloc_r>:
 800da72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da76:	4680      	mov	r8, r0
 800da78:	4615      	mov	r5, r2
 800da7a:	460c      	mov	r4, r1
 800da7c:	b921      	cbnz	r1, 800da88 <_realloc_r+0x16>
 800da7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da82:	4611      	mov	r1, r2
 800da84:	f7ff b83e 	b.w	800cb04 <_malloc_r>
 800da88:	b92a      	cbnz	r2, 800da96 <_realloc_r+0x24>
 800da8a:	f7fe fc8d 	bl	800c3a8 <_free_r>
 800da8e:	2400      	movs	r4, #0
 800da90:	4620      	mov	r0, r4
 800da92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da96:	f000 fa33 	bl	800df00 <_malloc_usable_size_r>
 800da9a:	4285      	cmp	r5, r0
 800da9c:	4606      	mov	r6, r0
 800da9e:	d802      	bhi.n	800daa6 <_realloc_r+0x34>
 800daa0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800daa4:	d8f4      	bhi.n	800da90 <_realloc_r+0x1e>
 800daa6:	4629      	mov	r1, r5
 800daa8:	4640      	mov	r0, r8
 800daaa:	f7ff f82b 	bl	800cb04 <_malloc_r>
 800daae:	4607      	mov	r7, r0
 800dab0:	2800      	cmp	r0, #0
 800dab2:	d0ec      	beq.n	800da8e <_realloc_r+0x1c>
 800dab4:	42b5      	cmp	r5, r6
 800dab6:	462a      	mov	r2, r5
 800dab8:	4621      	mov	r1, r4
 800daba:	bf28      	it	cs
 800dabc:	4632      	movcs	r2, r6
 800dabe:	f7fd fdea 	bl	800b696 <memcpy>
 800dac2:	4621      	mov	r1, r4
 800dac4:	4640      	mov	r0, r8
 800dac6:	f7fe fc6f 	bl	800c3a8 <_free_r>
 800daca:	463c      	mov	r4, r7
 800dacc:	e7e0      	b.n	800da90 <_realloc_r+0x1e>

0800dace <__sfputc_r>:
 800dace:	6893      	ldr	r3, [r2, #8]
 800dad0:	3b01      	subs	r3, #1
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	b410      	push	{r4}
 800dad6:	6093      	str	r3, [r2, #8]
 800dad8:	da08      	bge.n	800daec <__sfputc_r+0x1e>
 800dada:	6994      	ldr	r4, [r2, #24]
 800dadc:	42a3      	cmp	r3, r4
 800dade:	db01      	blt.n	800dae4 <__sfputc_r+0x16>
 800dae0:	290a      	cmp	r1, #10
 800dae2:	d103      	bne.n	800daec <__sfputc_r+0x1e>
 800dae4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dae8:	f000 b932 	b.w	800dd50 <__swbuf_r>
 800daec:	6813      	ldr	r3, [r2, #0]
 800daee:	1c58      	adds	r0, r3, #1
 800daf0:	6010      	str	r0, [r2, #0]
 800daf2:	7019      	strb	r1, [r3, #0]
 800daf4:	4608      	mov	r0, r1
 800daf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <__sfputs_r>:
 800dafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dafe:	4606      	mov	r6, r0
 800db00:	460f      	mov	r7, r1
 800db02:	4614      	mov	r4, r2
 800db04:	18d5      	adds	r5, r2, r3
 800db06:	42ac      	cmp	r4, r5
 800db08:	d101      	bne.n	800db0e <__sfputs_r+0x12>
 800db0a:	2000      	movs	r0, #0
 800db0c:	e007      	b.n	800db1e <__sfputs_r+0x22>
 800db0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db12:	463a      	mov	r2, r7
 800db14:	4630      	mov	r0, r6
 800db16:	f7ff ffda 	bl	800dace <__sfputc_r>
 800db1a:	1c43      	adds	r3, r0, #1
 800db1c:	d1f3      	bne.n	800db06 <__sfputs_r+0xa>
 800db1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db20 <_vfiprintf_r>:
 800db20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db24:	460d      	mov	r5, r1
 800db26:	b09d      	sub	sp, #116	@ 0x74
 800db28:	4614      	mov	r4, r2
 800db2a:	4698      	mov	r8, r3
 800db2c:	4606      	mov	r6, r0
 800db2e:	b118      	cbz	r0, 800db38 <_vfiprintf_r+0x18>
 800db30:	6a03      	ldr	r3, [r0, #32]
 800db32:	b90b      	cbnz	r3, 800db38 <_vfiprintf_r+0x18>
 800db34:	f7fd fc28 	bl	800b388 <__sinit>
 800db38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db3a:	07d9      	lsls	r1, r3, #31
 800db3c:	d405      	bmi.n	800db4a <_vfiprintf_r+0x2a>
 800db3e:	89ab      	ldrh	r3, [r5, #12]
 800db40:	059a      	lsls	r2, r3, #22
 800db42:	d402      	bmi.n	800db4a <_vfiprintf_r+0x2a>
 800db44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db46:	f7fd fda4 	bl	800b692 <__retarget_lock_acquire_recursive>
 800db4a:	89ab      	ldrh	r3, [r5, #12]
 800db4c:	071b      	lsls	r3, r3, #28
 800db4e:	d501      	bpl.n	800db54 <_vfiprintf_r+0x34>
 800db50:	692b      	ldr	r3, [r5, #16]
 800db52:	b99b      	cbnz	r3, 800db7c <_vfiprintf_r+0x5c>
 800db54:	4629      	mov	r1, r5
 800db56:	4630      	mov	r0, r6
 800db58:	f000 f938 	bl	800ddcc <__swsetup_r>
 800db5c:	b170      	cbz	r0, 800db7c <_vfiprintf_r+0x5c>
 800db5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db60:	07dc      	lsls	r4, r3, #31
 800db62:	d504      	bpl.n	800db6e <_vfiprintf_r+0x4e>
 800db64:	f04f 30ff 	mov.w	r0, #4294967295
 800db68:	b01d      	add	sp, #116	@ 0x74
 800db6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db6e:	89ab      	ldrh	r3, [r5, #12]
 800db70:	0598      	lsls	r0, r3, #22
 800db72:	d4f7      	bmi.n	800db64 <_vfiprintf_r+0x44>
 800db74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db76:	f7fd fd8d 	bl	800b694 <__retarget_lock_release_recursive>
 800db7a:	e7f3      	b.n	800db64 <_vfiprintf_r+0x44>
 800db7c:	2300      	movs	r3, #0
 800db7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800db80:	2320      	movs	r3, #32
 800db82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db86:	f8cd 800c 	str.w	r8, [sp, #12]
 800db8a:	2330      	movs	r3, #48	@ 0x30
 800db8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dd3c <_vfiprintf_r+0x21c>
 800db90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db94:	f04f 0901 	mov.w	r9, #1
 800db98:	4623      	mov	r3, r4
 800db9a:	469a      	mov	sl, r3
 800db9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dba0:	b10a      	cbz	r2, 800dba6 <_vfiprintf_r+0x86>
 800dba2:	2a25      	cmp	r2, #37	@ 0x25
 800dba4:	d1f9      	bne.n	800db9a <_vfiprintf_r+0x7a>
 800dba6:	ebba 0b04 	subs.w	fp, sl, r4
 800dbaa:	d00b      	beq.n	800dbc4 <_vfiprintf_r+0xa4>
 800dbac:	465b      	mov	r3, fp
 800dbae:	4622      	mov	r2, r4
 800dbb0:	4629      	mov	r1, r5
 800dbb2:	4630      	mov	r0, r6
 800dbb4:	f7ff ffa2 	bl	800dafc <__sfputs_r>
 800dbb8:	3001      	adds	r0, #1
 800dbba:	f000 80a7 	beq.w	800dd0c <_vfiprintf_r+0x1ec>
 800dbbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbc0:	445a      	add	r2, fp
 800dbc2:	9209      	str	r2, [sp, #36]	@ 0x24
 800dbc4:	f89a 3000 	ldrb.w	r3, [sl]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f000 809f 	beq.w	800dd0c <_vfiprintf_r+0x1ec>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f04f 32ff 	mov.w	r2, #4294967295
 800dbd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbd8:	f10a 0a01 	add.w	sl, sl, #1
 800dbdc:	9304      	str	r3, [sp, #16]
 800dbde:	9307      	str	r3, [sp, #28]
 800dbe0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dbe4:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbe6:	4654      	mov	r4, sl
 800dbe8:	2205      	movs	r2, #5
 800dbea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbee:	4853      	ldr	r0, [pc, #332]	@ (800dd3c <_vfiprintf_r+0x21c>)
 800dbf0:	f7f2 faee 	bl	80001d0 <memchr>
 800dbf4:	9a04      	ldr	r2, [sp, #16]
 800dbf6:	b9d8      	cbnz	r0, 800dc30 <_vfiprintf_r+0x110>
 800dbf8:	06d1      	lsls	r1, r2, #27
 800dbfa:	bf44      	itt	mi
 800dbfc:	2320      	movmi	r3, #32
 800dbfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc02:	0713      	lsls	r3, r2, #28
 800dc04:	bf44      	itt	mi
 800dc06:	232b      	movmi	r3, #43	@ 0x2b
 800dc08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc0c:	f89a 3000 	ldrb.w	r3, [sl]
 800dc10:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc12:	d015      	beq.n	800dc40 <_vfiprintf_r+0x120>
 800dc14:	9a07      	ldr	r2, [sp, #28]
 800dc16:	4654      	mov	r4, sl
 800dc18:	2000      	movs	r0, #0
 800dc1a:	f04f 0c0a 	mov.w	ip, #10
 800dc1e:	4621      	mov	r1, r4
 800dc20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc24:	3b30      	subs	r3, #48	@ 0x30
 800dc26:	2b09      	cmp	r3, #9
 800dc28:	d94b      	bls.n	800dcc2 <_vfiprintf_r+0x1a2>
 800dc2a:	b1b0      	cbz	r0, 800dc5a <_vfiprintf_r+0x13a>
 800dc2c:	9207      	str	r2, [sp, #28]
 800dc2e:	e014      	b.n	800dc5a <_vfiprintf_r+0x13a>
 800dc30:	eba0 0308 	sub.w	r3, r0, r8
 800dc34:	fa09 f303 	lsl.w	r3, r9, r3
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	9304      	str	r3, [sp, #16]
 800dc3c:	46a2      	mov	sl, r4
 800dc3e:	e7d2      	b.n	800dbe6 <_vfiprintf_r+0xc6>
 800dc40:	9b03      	ldr	r3, [sp, #12]
 800dc42:	1d19      	adds	r1, r3, #4
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	9103      	str	r1, [sp, #12]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	bfbb      	ittet	lt
 800dc4c:	425b      	neglt	r3, r3
 800dc4e:	f042 0202 	orrlt.w	r2, r2, #2
 800dc52:	9307      	strge	r3, [sp, #28]
 800dc54:	9307      	strlt	r3, [sp, #28]
 800dc56:	bfb8      	it	lt
 800dc58:	9204      	strlt	r2, [sp, #16]
 800dc5a:	7823      	ldrb	r3, [r4, #0]
 800dc5c:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc5e:	d10a      	bne.n	800dc76 <_vfiprintf_r+0x156>
 800dc60:	7863      	ldrb	r3, [r4, #1]
 800dc62:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc64:	d132      	bne.n	800dccc <_vfiprintf_r+0x1ac>
 800dc66:	9b03      	ldr	r3, [sp, #12]
 800dc68:	1d1a      	adds	r2, r3, #4
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	9203      	str	r2, [sp, #12]
 800dc6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc72:	3402      	adds	r4, #2
 800dc74:	9305      	str	r3, [sp, #20]
 800dc76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dd4c <_vfiprintf_r+0x22c>
 800dc7a:	7821      	ldrb	r1, [r4, #0]
 800dc7c:	2203      	movs	r2, #3
 800dc7e:	4650      	mov	r0, sl
 800dc80:	f7f2 faa6 	bl	80001d0 <memchr>
 800dc84:	b138      	cbz	r0, 800dc96 <_vfiprintf_r+0x176>
 800dc86:	9b04      	ldr	r3, [sp, #16]
 800dc88:	eba0 000a 	sub.w	r0, r0, sl
 800dc8c:	2240      	movs	r2, #64	@ 0x40
 800dc8e:	4082      	lsls	r2, r0
 800dc90:	4313      	orrs	r3, r2
 800dc92:	3401      	adds	r4, #1
 800dc94:	9304      	str	r3, [sp, #16]
 800dc96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc9a:	4829      	ldr	r0, [pc, #164]	@ (800dd40 <_vfiprintf_r+0x220>)
 800dc9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dca0:	2206      	movs	r2, #6
 800dca2:	f7f2 fa95 	bl	80001d0 <memchr>
 800dca6:	2800      	cmp	r0, #0
 800dca8:	d03f      	beq.n	800dd2a <_vfiprintf_r+0x20a>
 800dcaa:	4b26      	ldr	r3, [pc, #152]	@ (800dd44 <_vfiprintf_r+0x224>)
 800dcac:	bb1b      	cbnz	r3, 800dcf6 <_vfiprintf_r+0x1d6>
 800dcae:	9b03      	ldr	r3, [sp, #12]
 800dcb0:	3307      	adds	r3, #7
 800dcb2:	f023 0307 	bic.w	r3, r3, #7
 800dcb6:	3308      	adds	r3, #8
 800dcb8:	9303      	str	r3, [sp, #12]
 800dcba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcbc:	443b      	add	r3, r7
 800dcbe:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcc0:	e76a      	b.n	800db98 <_vfiprintf_r+0x78>
 800dcc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcc6:	460c      	mov	r4, r1
 800dcc8:	2001      	movs	r0, #1
 800dcca:	e7a8      	b.n	800dc1e <_vfiprintf_r+0xfe>
 800dccc:	2300      	movs	r3, #0
 800dcce:	3401      	adds	r4, #1
 800dcd0:	9305      	str	r3, [sp, #20]
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	f04f 0c0a 	mov.w	ip, #10
 800dcd8:	4620      	mov	r0, r4
 800dcda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcde:	3a30      	subs	r2, #48	@ 0x30
 800dce0:	2a09      	cmp	r2, #9
 800dce2:	d903      	bls.n	800dcec <_vfiprintf_r+0x1cc>
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d0c6      	beq.n	800dc76 <_vfiprintf_r+0x156>
 800dce8:	9105      	str	r1, [sp, #20]
 800dcea:	e7c4      	b.n	800dc76 <_vfiprintf_r+0x156>
 800dcec:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcf0:	4604      	mov	r4, r0
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	e7f0      	b.n	800dcd8 <_vfiprintf_r+0x1b8>
 800dcf6:	ab03      	add	r3, sp, #12
 800dcf8:	9300      	str	r3, [sp, #0]
 800dcfa:	462a      	mov	r2, r5
 800dcfc:	4b12      	ldr	r3, [pc, #72]	@ (800dd48 <_vfiprintf_r+0x228>)
 800dcfe:	a904      	add	r1, sp, #16
 800dd00:	4630      	mov	r0, r6
 800dd02:	f7fc fce9 	bl	800a6d8 <_printf_float>
 800dd06:	4607      	mov	r7, r0
 800dd08:	1c78      	adds	r0, r7, #1
 800dd0a:	d1d6      	bne.n	800dcba <_vfiprintf_r+0x19a>
 800dd0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd0e:	07d9      	lsls	r1, r3, #31
 800dd10:	d405      	bmi.n	800dd1e <_vfiprintf_r+0x1fe>
 800dd12:	89ab      	ldrh	r3, [r5, #12]
 800dd14:	059a      	lsls	r2, r3, #22
 800dd16:	d402      	bmi.n	800dd1e <_vfiprintf_r+0x1fe>
 800dd18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd1a:	f7fd fcbb 	bl	800b694 <__retarget_lock_release_recursive>
 800dd1e:	89ab      	ldrh	r3, [r5, #12]
 800dd20:	065b      	lsls	r3, r3, #25
 800dd22:	f53f af1f 	bmi.w	800db64 <_vfiprintf_r+0x44>
 800dd26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd28:	e71e      	b.n	800db68 <_vfiprintf_r+0x48>
 800dd2a:	ab03      	add	r3, sp, #12
 800dd2c:	9300      	str	r3, [sp, #0]
 800dd2e:	462a      	mov	r2, r5
 800dd30:	4b05      	ldr	r3, [pc, #20]	@ (800dd48 <_vfiprintf_r+0x228>)
 800dd32:	a904      	add	r1, sp, #16
 800dd34:	4630      	mov	r0, r6
 800dd36:	f7fc ff67 	bl	800ac08 <_printf_i>
 800dd3a:	e7e4      	b.n	800dd06 <_vfiprintf_r+0x1e6>
 800dd3c:	080100d0 	.word	0x080100d0
 800dd40:	080100da 	.word	0x080100da
 800dd44:	0800a6d9 	.word	0x0800a6d9
 800dd48:	0800dafd 	.word	0x0800dafd
 800dd4c:	080100d6 	.word	0x080100d6

0800dd50 <__swbuf_r>:
 800dd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd52:	460e      	mov	r6, r1
 800dd54:	4614      	mov	r4, r2
 800dd56:	4605      	mov	r5, r0
 800dd58:	b118      	cbz	r0, 800dd62 <__swbuf_r+0x12>
 800dd5a:	6a03      	ldr	r3, [r0, #32]
 800dd5c:	b90b      	cbnz	r3, 800dd62 <__swbuf_r+0x12>
 800dd5e:	f7fd fb13 	bl	800b388 <__sinit>
 800dd62:	69a3      	ldr	r3, [r4, #24]
 800dd64:	60a3      	str	r3, [r4, #8]
 800dd66:	89a3      	ldrh	r3, [r4, #12]
 800dd68:	071a      	lsls	r2, r3, #28
 800dd6a:	d501      	bpl.n	800dd70 <__swbuf_r+0x20>
 800dd6c:	6923      	ldr	r3, [r4, #16]
 800dd6e:	b943      	cbnz	r3, 800dd82 <__swbuf_r+0x32>
 800dd70:	4621      	mov	r1, r4
 800dd72:	4628      	mov	r0, r5
 800dd74:	f000 f82a 	bl	800ddcc <__swsetup_r>
 800dd78:	b118      	cbz	r0, 800dd82 <__swbuf_r+0x32>
 800dd7a:	f04f 37ff 	mov.w	r7, #4294967295
 800dd7e:	4638      	mov	r0, r7
 800dd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd82:	6823      	ldr	r3, [r4, #0]
 800dd84:	6922      	ldr	r2, [r4, #16]
 800dd86:	1a98      	subs	r0, r3, r2
 800dd88:	6963      	ldr	r3, [r4, #20]
 800dd8a:	b2f6      	uxtb	r6, r6
 800dd8c:	4283      	cmp	r3, r0
 800dd8e:	4637      	mov	r7, r6
 800dd90:	dc05      	bgt.n	800dd9e <__swbuf_r+0x4e>
 800dd92:	4621      	mov	r1, r4
 800dd94:	4628      	mov	r0, r5
 800dd96:	f7ff fded 	bl	800d974 <_fflush_r>
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	d1ed      	bne.n	800dd7a <__swbuf_r+0x2a>
 800dd9e:	68a3      	ldr	r3, [r4, #8]
 800dda0:	3b01      	subs	r3, #1
 800dda2:	60a3      	str	r3, [r4, #8]
 800dda4:	6823      	ldr	r3, [r4, #0]
 800dda6:	1c5a      	adds	r2, r3, #1
 800dda8:	6022      	str	r2, [r4, #0]
 800ddaa:	701e      	strb	r6, [r3, #0]
 800ddac:	6962      	ldr	r2, [r4, #20]
 800ddae:	1c43      	adds	r3, r0, #1
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d004      	beq.n	800ddbe <__swbuf_r+0x6e>
 800ddb4:	89a3      	ldrh	r3, [r4, #12]
 800ddb6:	07db      	lsls	r3, r3, #31
 800ddb8:	d5e1      	bpl.n	800dd7e <__swbuf_r+0x2e>
 800ddba:	2e0a      	cmp	r6, #10
 800ddbc:	d1df      	bne.n	800dd7e <__swbuf_r+0x2e>
 800ddbe:	4621      	mov	r1, r4
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	f7ff fdd7 	bl	800d974 <_fflush_r>
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d0d9      	beq.n	800dd7e <__swbuf_r+0x2e>
 800ddca:	e7d6      	b.n	800dd7a <__swbuf_r+0x2a>

0800ddcc <__swsetup_r>:
 800ddcc:	b538      	push	{r3, r4, r5, lr}
 800ddce:	4b29      	ldr	r3, [pc, #164]	@ (800de74 <__swsetup_r+0xa8>)
 800ddd0:	4605      	mov	r5, r0
 800ddd2:	6818      	ldr	r0, [r3, #0]
 800ddd4:	460c      	mov	r4, r1
 800ddd6:	b118      	cbz	r0, 800dde0 <__swsetup_r+0x14>
 800ddd8:	6a03      	ldr	r3, [r0, #32]
 800ddda:	b90b      	cbnz	r3, 800dde0 <__swsetup_r+0x14>
 800dddc:	f7fd fad4 	bl	800b388 <__sinit>
 800dde0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dde4:	0719      	lsls	r1, r3, #28
 800dde6:	d422      	bmi.n	800de2e <__swsetup_r+0x62>
 800dde8:	06da      	lsls	r2, r3, #27
 800ddea:	d407      	bmi.n	800ddfc <__swsetup_r+0x30>
 800ddec:	2209      	movs	r2, #9
 800ddee:	602a      	str	r2, [r5, #0]
 800ddf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddf4:	81a3      	strh	r3, [r4, #12]
 800ddf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddfa:	e033      	b.n	800de64 <__swsetup_r+0x98>
 800ddfc:	0758      	lsls	r0, r3, #29
 800ddfe:	d512      	bpl.n	800de26 <__swsetup_r+0x5a>
 800de00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de02:	b141      	cbz	r1, 800de16 <__swsetup_r+0x4a>
 800de04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de08:	4299      	cmp	r1, r3
 800de0a:	d002      	beq.n	800de12 <__swsetup_r+0x46>
 800de0c:	4628      	mov	r0, r5
 800de0e:	f7fe facb 	bl	800c3a8 <_free_r>
 800de12:	2300      	movs	r3, #0
 800de14:	6363      	str	r3, [r4, #52]	@ 0x34
 800de16:	89a3      	ldrh	r3, [r4, #12]
 800de18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800de1c:	81a3      	strh	r3, [r4, #12]
 800de1e:	2300      	movs	r3, #0
 800de20:	6063      	str	r3, [r4, #4]
 800de22:	6923      	ldr	r3, [r4, #16]
 800de24:	6023      	str	r3, [r4, #0]
 800de26:	89a3      	ldrh	r3, [r4, #12]
 800de28:	f043 0308 	orr.w	r3, r3, #8
 800de2c:	81a3      	strh	r3, [r4, #12]
 800de2e:	6923      	ldr	r3, [r4, #16]
 800de30:	b94b      	cbnz	r3, 800de46 <__swsetup_r+0x7a>
 800de32:	89a3      	ldrh	r3, [r4, #12]
 800de34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800de38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de3c:	d003      	beq.n	800de46 <__swsetup_r+0x7a>
 800de3e:	4621      	mov	r1, r4
 800de40:	4628      	mov	r0, r5
 800de42:	f000 f88b 	bl	800df5c <__smakebuf_r>
 800de46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de4a:	f013 0201 	ands.w	r2, r3, #1
 800de4e:	d00a      	beq.n	800de66 <__swsetup_r+0x9a>
 800de50:	2200      	movs	r2, #0
 800de52:	60a2      	str	r2, [r4, #8]
 800de54:	6962      	ldr	r2, [r4, #20]
 800de56:	4252      	negs	r2, r2
 800de58:	61a2      	str	r2, [r4, #24]
 800de5a:	6922      	ldr	r2, [r4, #16]
 800de5c:	b942      	cbnz	r2, 800de70 <__swsetup_r+0xa4>
 800de5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800de62:	d1c5      	bne.n	800ddf0 <__swsetup_r+0x24>
 800de64:	bd38      	pop	{r3, r4, r5, pc}
 800de66:	0799      	lsls	r1, r3, #30
 800de68:	bf58      	it	pl
 800de6a:	6962      	ldrpl	r2, [r4, #20]
 800de6c:	60a2      	str	r2, [r4, #8]
 800de6e:	e7f4      	b.n	800de5a <__swsetup_r+0x8e>
 800de70:	2000      	movs	r0, #0
 800de72:	e7f7      	b.n	800de64 <__swsetup_r+0x98>
 800de74:	20000258 	.word	0x20000258

0800de78 <_raise_r>:
 800de78:	291f      	cmp	r1, #31
 800de7a:	b538      	push	{r3, r4, r5, lr}
 800de7c:	4605      	mov	r5, r0
 800de7e:	460c      	mov	r4, r1
 800de80:	d904      	bls.n	800de8c <_raise_r+0x14>
 800de82:	2316      	movs	r3, #22
 800de84:	6003      	str	r3, [r0, #0]
 800de86:	f04f 30ff 	mov.w	r0, #4294967295
 800de8a:	bd38      	pop	{r3, r4, r5, pc}
 800de8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de8e:	b112      	cbz	r2, 800de96 <_raise_r+0x1e>
 800de90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de94:	b94b      	cbnz	r3, 800deaa <_raise_r+0x32>
 800de96:	4628      	mov	r0, r5
 800de98:	f000 f830 	bl	800defc <_getpid_r>
 800de9c:	4622      	mov	r2, r4
 800de9e:	4601      	mov	r1, r0
 800dea0:	4628      	mov	r0, r5
 800dea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dea6:	f000 b817 	b.w	800ded8 <_kill_r>
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d00a      	beq.n	800dec4 <_raise_r+0x4c>
 800deae:	1c59      	adds	r1, r3, #1
 800deb0:	d103      	bne.n	800deba <_raise_r+0x42>
 800deb2:	2316      	movs	r3, #22
 800deb4:	6003      	str	r3, [r0, #0]
 800deb6:	2001      	movs	r0, #1
 800deb8:	e7e7      	b.n	800de8a <_raise_r+0x12>
 800deba:	2100      	movs	r1, #0
 800debc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dec0:	4620      	mov	r0, r4
 800dec2:	4798      	blx	r3
 800dec4:	2000      	movs	r0, #0
 800dec6:	e7e0      	b.n	800de8a <_raise_r+0x12>

0800dec8 <raise>:
 800dec8:	4b02      	ldr	r3, [pc, #8]	@ (800ded4 <raise+0xc>)
 800deca:	4601      	mov	r1, r0
 800decc:	6818      	ldr	r0, [r3, #0]
 800dece:	f7ff bfd3 	b.w	800de78 <_raise_r>
 800ded2:	bf00      	nop
 800ded4:	20000258 	.word	0x20000258

0800ded8 <_kill_r>:
 800ded8:	b538      	push	{r3, r4, r5, lr}
 800deda:	4d07      	ldr	r5, [pc, #28]	@ (800def8 <_kill_r+0x20>)
 800dedc:	2300      	movs	r3, #0
 800dede:	4604      	mov	r4, r0
 800dee0:	4608      	mov	r0, r1
 800dee2:	4611      	mov	r1, r2
 800dee4:	602b      	str	r3, [r5, #0]
 800dee6:	f7f7 fe87 	bl	8005bf8 <_kill>
 800deea:	1c43      	adds	r3, r0, #1
 800deec:	d102      	bne.n	800def4 <_kill_r+0x1c>
 800deee:	682b      	ldr	r3, [r5, #0]
 800def0:	b103      	cbz	r3, 800def4 <_kill_r+0x1c>
 800def2:	6023      	str	r3, [r4, #0]
 800def4:	bd38      	pop	{r3, r4, r5, pc}
 800def6:	bf00      	nop
 800def8:	20000888 	.word	0x20000888

0800defc <_getpid_r>:
 800defc:	f7f7 be74 	b.w	8005be8 <_getpid>

0800df00 <_malloc_usable_size_r>:
 800df00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df04:	1f18      	subs	r0, r3, #4
 800df06:	2b00      	cmp	r3, #0
 800df08:	bfbc      	itt	lt
 800df0a:	580b      	ldrlt	r3, [r1, r0]
 800df0c:	18c0      	addlt	r0, r0, r3
 800df0e:	4770      	bx	lr

0800df10 <__swhatbuf_r>:
 800df10:	b570      	push	{r4, r5, r6, lr}
 800df12:	460c      	mov	r4, r1
 800df14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df18:	2900      	cmp	r1, #0
 800df1a:	b096      	sub	sp, #88	@ 0x58
 800df1c:	4615      	mov	r5, r2
 800df1e:	461e      	mov	r6, r3
 800df20:	da0d      	bge.n	800df3e <__swhatbuf_r+0x2e>
 800df22:	89a3      	ldrh	r3, [r4, #12]
 800df24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800df28:	f04f 0100 	mov.w	r1, #0
 800df2c:	bf14      	ite	ne
 800df2e:	2340      	movne	r3, #64	@ 0x40
 800df30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800df34:	2000      	movs	r0, #0
 800df36:	6031      	str	r1, [r6, #0]
 800df38:	602b      	str	r3, [r5, #0]
 800df3a:	b016      	add	sp, #88	@ 0x58
 800df3c:	bd70      	pop	{r4, r5, r6, pc}
 800df3e:	466a      	mov	r2, sp
 800df40:	f000 f848 	bl	800dfd4 <_fstat_r>
 800df44:	2800      	cmp	r0, #0
 800df46:	dbec      	blt.n	800df22 <__swhatbuf_r+0x12>
 800df48:	9901      	ldr	r1, [sp, #4]
 800df4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800df4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800df52:	4259      	negs	r1, r3
 800df54:	4159      	adcs	r1, r3
 800df56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df5a:	e7eb      	b.n	800df34 <__swhatbuf_r+0x24>

0800df5c <__smakebuf_r>:
 800df5c:	898b      	ldrh	r3, [r1, #12]
 800df5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df60:	079d      	lsls	r5, r3, #30
 800df62:	4606      	mov	r6, r0
 800df64:	460c      	mov	r4, r1
 800df66:	d507      	bpl.n	800df78 <__smakebuf_r+0x1c>
 800df68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800df6c:	6023      	str	r3, [r4, #0]
 800df6e:	6123      	str	r3, [r4, #16]
 800df70:	2301      	movs	r3, #1
 800df72:	6163      	str	r3, [r4, #20]
 800df74:	b003      	add	sp, #12
 800df76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df78:	ab01      	add	r3, sp, #4
 800df7a:	466a      	mov	r2, sp
 800df7c:	f7ff ffc8 	bl	800df10 <__swhatbuf_r>
 800df80:	9f00      	ldr	r7, [sp, #0]
 800df82:	4605      	mov	r5, r0
 800df84:	4639      	mov	r1, r7
 800df86:	4630      	mov	r0, r6
 800df88:	f7fe fdbc 	bl	800cb04 <_malloc_r>
 800df8c:	b948      	cbnz	r0, 800dfa2 <__smakebuf_r+0x46>
 800df8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df92:	059a      	lsls	r2, r3, #22
 800df94:	d4ee      	bmi.n	800df74 <__smakebuf_r+0x18>
 800df96:	f023 0303 	bic.w	r3, r3, #3
 800df9a:	f043 0302 	orr.w	r3, r3, #2
 800df9e:	81a3      	strh	r3, [r4, #12]
 800dfa0:	e7e2      	b.n	800df68 <__smakebuf_r+0xc>
 800dfa2:	89a3      	ldrh	r3, [r4, #12]
 800dfa4:	6020      	str	r0, [r4, #0]
 800dfa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfaa:	81a3      	strh	r3, [r4, #12]
 800dfac:	9b01      	ldr	r3, [sp, #4]
 800dfae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dfb2:	b15b      	cbz	r3, 800dfcc <__smakebuf_r+0x70>
 800dfb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfb8:	4630      	mov	r0, r6
 800dfba:	f000 f81d 	bl	800dff8 <_isatty_r>
 800dfbe:	b128      	cbz	r0, 800dfcc <__smakebuf_r+0x70>
 800dfc0:	89a3      	ldrh	r3, [r4, #12]
 800dfc2:	f023 0303 	bic.w	r3, r3, #3
 800dfc6:	f043 0301 	orr.w	r3, r3, #1
 800dfca:	81a3      	strh	r3, [r4, #12]
 800dfcc:	89a3      	ldrh	r3, [r4, #12]
 800dfce:	431d      	orrs	r5, r3
 800dfd0:	81a5      	strh	r5, [r4, #12]
 800dfd2:	e7cf      	b.n	800df74 <__smakebuf_r+0x18>

0800dfd4 <_fstat_r>:
 800dfd4:	b538      	push	{r3, r4, r5, lr}
 800dfd6:	4d07      	ldr	r5, [pc, #28]	@ (800dff4 <_fstat_r+0x20>)
 800dfd8:	2300      	movs	r3, #0
 800dfda:	4604      	mov	r4, r0
 800dfdc:	4608      	mov	r0, r1
 800dfde:	4611      	mov	r1, r2
 800dfe0:	602b      	str	r3, [r5, #0]
 800dfe2:	f7f7 fe69 	bl	8005cb8 <_fstat>
 800dfe6:	1c43      	adds	r3, r0, #1
 800dfe8:	d102      	bne.n	800dff0 <_fstat_r+0x1c>
 800dfea:	682b      	ldr	r3, [r5, #0]
 800dfec:	b103      	cbz	r3, 800dff0 <_fstat_r+0x1c>
 800dfee:	6023      	str	r3, [r4, #0]
 800dff0:	bd38      	pop	{r3, r4, r5, pc}
 800dff2:	bf00      	nop
 800dff4:	20000888 	.word	0x20000888

0800dff8 <_isatty_r>:
 800dff8:	b538      	push	{r3, r4, r5, lr}
 800dffa:	4d06      	ldr	r5, [pc, #24]	@ (800e014 <_isatty_r+0x1c>)
 800dffc:	2300      	movs	r3, #0
 800dffe:	4604      	mov	r4, r0
 800e000:	4608      	mov	r0, r1
 800e002:	602b      	str	r3, [r5, #0]
 800e004:	f7f7 fe68 	bl	8005cd8 <_isatty>
 800e008:	1c43      	adds	r3, r0, #1
 800e00a:	d102      	bne.n	800e012 <_isatty_r+0x1a>
 800e00c:	682b      	ldr	r3, [r5, #0]
 800e00e:	b103      	cbz	r3, 800e012 <_isatty_r+0x1a>
 800e010:	6023      	str	r3, [r4, #0]
 800e012:	bd38      	pop	{r3, r4, r5, pc}
 800e014:	20000888 	.word	0x20000888

0800e018 <atan2>:
 800e018:	f000 bbc6 	b.w	800e7a8 <__ieee754_atan2>
 800e01c:	0000      	movs	r0, r0
	...

0800e020 <hypot>:
 800e020:	b508      	push	{r3, lr}
 800e022:	ed2d 8b06 	vpush	{d8-d10}
 800e026:	eeb0 aa40 	vmov.f32	s20, s0
 800e02a:	eef0 aa60 	vmov.f32	s21, s1
 800e02e:	eeb0 9a41 	vmov.f32	s18, s2
 800e032:	eef0 9a61 	vmov.f32	s19, s3
 800e036:	f000 fc7d 	bl	800e934 <__ieee754_hypot>
 800e03a:	eeb0 8a40 	vmov.f32	s16, s0
 800e03e:	eef0 8a60 	vmov.f32	s17, s1
 800e042:	f000 f8c9 	bl	800e1d8 <finite>
 800e046:	b998      	cbnz	r0, 800e070 <hypot+0x50>
 800e048:	eeb0 0a4a 	vmov.f32	s0, s20
 800e04c:	eef0 0a6a 	vmov.f32	s1, s21
 800e050:	f000 f8c2 	bl	800e1d8 <finite>
 800e054:	b160      	cbz	r0, 800e070 <hypot+0x50>
 800e056:	eeb0 0a49 	vmov.f32	s0, s18
 800e05a:	eef0 0a69 	vmov.f32	s1, s19
 800e05e:	f000 f8bb 	bl	800e1d8 <finite>
 800e062:	b128      	cbz	r0, 800e070 <hypot+0x50>
 800e064:	f7fd faea 	bl	800b63c <__errno>
 800e068:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800e080 <hypot+0x60>
 800e06c:	2322      	movs	r3, #34	@ 0x22
 800e06e:	6003      	str	r3, [r0, #0]
 800e070:	eeb0 0a48 	vmov.f32	s0, s16
 800e074:	eef0 0a68 	vmov.f32	s1, s17
 800e078:	ecbd 8b06 	vpop	{d8-d10}
 800e07c:	bd08      	pop	{r3, pc}
 800e07e:	bf00      	nop
 800e080:	00000000 	.word	0x00000000
 800e084:	7ff00000 	.word	0x7ff00000

0800e088 <cos>:
 800e088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e08a:	ec53 2b10 	vmov	r2, r3, d0
 800e08e:	4826      	ldr	r0, [pc, #152]	@ (800e128 <cos+0xa0>)
 800e090:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e094:	4281      	cmp	r1, r0
 800e096:	d806      	bhi.n	800e0a6 <cos+0x1e>
 800e098:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800e120 <cos+0x98>
 800e09c:	b005      	add	sp, #20
 800e09e:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0a2:	f000 b9fd 	b.w	800e4a0 <__kernel_cos>
 800e0a6:	4821      	ldr	r0, [pc, #132]	@ (800e12c <cos+0xa4>)
 800e0a8:	4281      	cmp	r1, r0
 800e0aa:	d908      	bls.n	800e0be <cos+0x36>
 800e0ac:	4610      	mov	r0, r2
 800e0ae:	4619      	mov	r1, r3
 800e0b0:	f7f2 f8ea 	bl	8000288 <__aeabi_dsub>
 800e0b4:	ec41 0b10 	vmov	d0, r0, r1
 800e0b8:	b005      	add	sp, #20
 800e0ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800e0be:	4668      	mov	r0, sp
 800e0c0:	f000 fd4e 	bl	800eb60 <__ieee754_rem_pio2>
 800e0c4:	f000 0003 	and.w	r0, r0, #3
 800e0c8:	2801      	cmp	r0, #1
 800e0ca:	d00b      	beq.n	800e0e4 <cos+0x5c>
 800e0cc:	2802      	cmp	r0, #2
 800e0ce:	d015      	beq.n	800e0fc <cos+0x74>
 800e0d0:	b9d8      	cbnz	r0, 800e10a <cos+0x82>
 800e0d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0d6:	ed9d 0b00 	vldr	d0, [sp]
 800e0da:	f000 f9e1 	bl	800e4a0 <__kernel_cos>
 800e0de:	ec51 0b10 	vmov	r0, r1, d0
 800e0e2:	e7e7      	b.n	800e0b4 <cos+0x2c>
 800e0e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0e8:	ed9d 0b00 	vldr	d0, [sp]
 800e0ec:	f000 faa0 	bl	800e630 <__kernel_sin>
 800e0f0:	ec53 2b10 	vmov	r2, r3, d0
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e0fa:	e7db      	b.n	800e0b4 <cos+0x2c>
 800e0fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e100:	ed9d 0b00 	vldr	d0, [sp]
 800e104:	f000 f9cc 	bl	800e4a0 <__kernel_cos>
 800e108:	e7f2      	b.n	800e0f0 <cos+0x68>
 800e10a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e10e:	ed9d 0b00 	vldr	d0, [sp]
 800e112:	2001      	movs	r0, #1
 800e114:	f000 fa8c 	bl	800e630 <__kernel_sin>
 800e118:	e7e1      	b.n	800e0de <cos+0x56>
 800e11a:	bf00      	nop
 800e11c:	f3af 8000 	nop.w
	...
 800e128:	3fe921fb 	.word	0x3fe921fb
 800e12c:	7fefffff 	.word	0x7fefffff

0800e130 <sin>:
 800e130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e132:	ec53 2b10 	vmov	r2, r3, d0
 800e136:	4826      	ldr	r0, [pc, #152]	@ (800e1d0 <sin+0xa0>)
 800e138:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e13c:	4281      	cmp	r1, r0
 800e13e:	d807      	bhi.n	800e150 <sin+0x20>
 800e140:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800e1c8 <sin+0x98>
 800e144:	2000      	movs	r0, #0
 800e146:	b005      	add	sp, #20
 800e148:	f85d eb04 	ldr.w	lr, [sp], #4
 800e14c:	f000 ba70 	b.w	800e630 <__kernel_sin>
 800e150:	4820      	ldr	r0, [pc, #128]	@ (800e1d4 <sin+0xa4>)
 800e152:	4281      	cmp	r1, r0
 800e154:	d908      	bls.n	800e168 <sin+0x38>
 800e156:	4610      	mov	r0, r2
 800e158:	4619      	mov	r1, r3
 800e15a:	f7f2 f895 	bl	8000288 <__aeabi_dsub>
 800e15e:	ec41 0b10 	vmov	d0, r0, r1
 800e162:	b005      	add	sp, #20
 800e164:	f85d fb04 	ldr.w	pc, [sp], #4
 800e168:	4668      	mov	r0, sp
 800e16a:	f000 fcf9 	bl	800eb60 <__ieee754_rem_pio2>
 800e16e:	f000 0003 	and.w	r0, r0, #3
 800e172:	2801      	cmp	r0, #1
 800e174:	d00c      	beq.n	800e190 <sin+0x60>
 800e176:	2802      	cmp	r0, #2
 800e178:	d011      	beq.n	800e19e <sin+0x6e>
 800e17a:	b9e8      	cbnz	r0, 800e1b8 <sin+0x88>
 800e17c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e180:	ed9d 0b00 	vldr	d0, [sp]
 800e184:	2001      	movs	r0, #1
 800e186:	f000 fa53 	bl	800e630 <__kernel_sin>
 800e18a:	ec51 0b10 	vmov	r0, r1, d0
 800e18e:	e7e6      	b.n	800e15e <sin+0x2e>
 800e190:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e194:	ed9d 0b00 	vldr	d0, [sp]
 800e198:	f000 f982 	bl	800e4a0 <__kernel_cos>
 800e19c:	e7f5      	b.n	800e18a <sin+0x5a>
 800e19e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e1a2:	ed9d 0b00 	vldr	d0, [sp]
 800e1a6:	2001      	movs	r0, #1
 800e1a8:	f000 fa42 	bl	800e630 <__kernel_sin>
 800e1ac:	ec53 2b10 	vmov	r2, r3, d0
 800e1b0:	4610      	mov	r0, r2
 800e1b2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e1b6:	e7d2      	b.n	800e15e <sin+0x2e>
 800e1b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e1bc:	ed9d 0b00 	vldr	d0, [sp]
 800e1c0:	f000 f96e 	bl	800e4a0 <__kernel_cos>
 800e1c4:	e7f2      	b.n	800e1ac <sin+0x7c>
 800e1c6:	bf00      	nop
	...
 800e1d0:	3fe921fb 	.word	0x3fe921fb
 800e1d4:	7fefffff 	.word	0x7fefffff

0800e1d8 <finite>:
 800e1d8:	b082      	sub	sp, #8
 800e1da:	ed8d 0b00 	vstr	d0, [sp]
 800e1de:	9801      	ldr	r0, [sp, #4]
 800e1e0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800e1e4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800e1e8:	0fc0      	lsrs	r0, r0, #31
 800e1ea:	b002      	add	sp, #8
 800e1ec:	4770      	bx	lr

0800e1ee <fmax>:
 800e1ee:	b508      	push	{r3, lr}
 800e1f0:	ed2d 8b04 	vpush	{d8-d9}
 800e1f4:	eeb0 8a40 	vmov.f32	s16, s0
 800e1f8:	eef0 8a60 	vmov.f32	s17, s1
 800e1fc:	eeb0 9a41 	vmov.f32	s18, s2
 800e200:	eef0 9a61 	vmov.f32	s19, s3
 800e204:	f000 f848 	bl	800e298 <__fpclassifyd>
 800e208:	b950      	cbnz	r0, 800e220 <fmax+0x32>
 800e20a:	eeb0 8a49 	vmov.f32	s16, s18
 800e20e:	eef0 8a69 	vmov.f32	s17, s19
 800e212:	eeb0 0a48 	vmov.f32	s0, s16
 800e216:	eef0 0a68 	vmov.f32	s1, s17
 800e21a:	ecbd 8b04 	vpop	{d8-d9}
 800e21e:	bd08      	pop	{r3, pc}
 800e220:	eeb0 0a49 	vmov.f32	s0, s18
 800e224:	eef0 0a69 	vmov.f32	s1, s19
 800e228:	f000 f836 	bl	800e298 <__fpclassifyd>
 800e22c:	2800      	cmp	r0, #0
 800e22e:	d0f0      	beq.n	800e212 <fmax+0x24>
 800e230:	ec53 2b19 	vmov	r2, r3, d9
 800e234:	ec51 0b18 	vmov	r0, r1, d8
 800e238:	f7f2 fc6e 	bl	8000b18 <__aeabi_dcmpgt>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d0e4      	beq.n	800e20a <fmax+0x1c>
 800e240:	e7e7      	b.n	800e212 <fmax+0x24>

0800e242 <fmin>:
 800e242:	b508      	push	{r3, lr}
 800e244:	ed2d 8b04 	vpush	{d8-d9}
 800e248:	eeb0 8a40 	vmov.f32	s16, s0
 800e24c:	eef0 8a60 	vmov.f32	s17, s1
 800e250:	eeb0 9a41 	vmov.f32	s18, s2
 800e254:	eef0 9a61 	vmov.f32	s19, s3
 800e258:	f000 f81e 	bl	800e298 <__fpclassifyd>
 800e25c:	b950      	cbnz	r0, 800e274 <fmin+0x32>
 800e25e:	eeb0 8a49 	vmov.f32	s16, s18
 800e262:	eef0 8a69 	vmov.f32	s17, s19
 800e266:	eeb0 0a48 	vmov.f32	s0, s16
 800e26a:	eef0 0a68 	vmov.f32	s1, s17
 800e26e:	ecbd 8b04 	vpop	{d8-d9}
 800e272:	bd08      	pop	{r3, pc}
 800e274:	eeb0 0a49 	vmov.f32	s0, s18
 800e278:	eef0 0a69 	vmov.f32	s1, s19
 800e27c:	f000 f80c 	bl	800e298 <__fpclassifyd>
 800e280:	2800      	cmp	r0, #0
 800e282:	d0f0      	beq.n	800e266 <fmin+0x24>
 800e284:	ec53 2b19 	vmov	r2, r3, d9
 800e288:	ec51 0b18 	vmov	r0, r1, d8
 800e28c:	f7f2 fc26 	bl	8000adc <__aeabi_dcmplt>
 800e290:	2800      	cmp	r0, #0
 800e292:	d0e4      	beq.n	800e25e <fmin+0x1c>
 800e294:	e7e7      	b.n	800e266 <fmin+0x24>
	...

0800e298 <__fpclassifyd>:
 800e298:	ec51 0b10 	vmov	r0, r1, d0
 800e29c:	b510      	push	{r4, lr}
 800e29e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	d019      	beq.n	800e2da <__fpclassifyd+0x42>
 800e2a6:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800e2aa:	490e      	ldr	r1, [pc, #56]	@ (800e2e4 <__fpclassifyd+0x4c>)
 800e2ac:	428a      	cmp	r2, r1
 800e2ae:	d90e      	bls.n	800e2ce <__fpclassifyd+0x36>
 800e2b0:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800e2b4:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800e2b8:	428a      	cmp	r2, r1
 800e2ba:	d908      	bls.n	800e2ce <__fpclassifyd+0x36>
 800e2bc:	4a0a      	ldr	r2, [pc, #40]	@ (800e2e8 <__fpclassifyd+0x50>)
 800e2be:	4213      	tst	r3, r2
 800e2c0:	d007      	beq.n	800e2d2 <__fpclassifyd+0x3a>
 800e2c2:	4294      	cmp	r4, r2
 800e2c4:	d107      	bne.n	800e2d6 <__fpclassifyd+0x3e>
 800e2c6:	fab0 f080 	clz	r0, r0
 800e2ca:	0940      	lsrs	r0, r0, #5
 800e2cc:	bd10      	pop	{r4, pc}
 800e2ce:	2004      	movs	r0, #4
 800e2d0:	e7fc      	b.n	800e2cc <__fpclassifyd+0x34>
 800e2d2:	2003      	movs	r0, #3
 800e2d4:	e7fa      	b.n	800e2cc <__fpclassifyd+0x34>
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	e7f8      	b.n	800e2cc <__fpclassifyd+0x34>
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	d1ee      	bne.n	800e2bc <__fpclassifyd+0x24>
 800e2de:	2002      	movs	r0, #2
 800e2e0:	e7f4      	b.n	800e2cc <__fpclassifyd+0x34>
 800e2e2:	bf00      	nop
 800e2e4:	7fdfffff 	.word	0x7fdfffff
 800e2e8:	7ff00000 	.word	0x7ff00000

0800e2ec <__ieee754_sqrt>:
 800e2ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f0:	4a68      	ldr	r2, [pc, #416]	@ (800e494 <__ieee754_sqrt+0x1a8>)
 800e2f2:	ec55 4b10 	vmov	r4, r5, d0
 800e2f6:	43aa      	bics	r2, r5
 800e2f8:	462b      	mov	r3, r5
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	d110      	bne.n	800e320 <__ieee754_sqrt+0x34>
 800e2fe:	4622      	mov	r2, r4
 800e300:	4620      	mov	r0, r4
 800e302:	4629      	mov	r1, r5
 800e304:	f7f2 f978 	bl	80005f8 <__aeabi_dmul>
 800e308:	4602      	mov	r2, r0
 800e30a:	460b      	mov	r3, r1
 800e30c:	4620      	mov	r0, r4
 800e30e:	4629      	mov	r1, r5
 800e310:	f7f1 ffbc 	bl	800028c <__adddf3>
 800e314:	4604      	mov	r4, r0
 800e316:	460d      	mov	r5, r1
 800e318:	ec45 4b10 	vmov	d0, r4, r5
 800e31c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e320:	2d00      	cmp	r5, #0
 800e322:	dc0e      	bgt.n	800e342 <__ieee754_sqrt+0x56>
 800e324:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e328:	4322      	orrs	r2, r4
 800e32a:	d0f5      	beq.n	800e318 <__ieee754_sqrt+0x2c>
 800e32c:	b19d      	cbz	r5, 800e356 <__ieee754_sqrt+0x6a>
 800e32e:	4622      	mov	r2, r4
 800e330:	4620      	mov	r0, r4
 800e332:	4629      	mov	r1, r5
 800e334:	f7f1 ffa8 	bl	8000288 <__aeabi_dsub>
 800e338:	4602      	mov	r2, r0
 800e33a:	460b      	mov	r3, r1
 800e33c:	f7f2 fa86 	bl	800084c <__aeabi_ddiv>
 800e340:	e7e8      	b.n	800e314 <__ieee754_sqrt+0x28>
 800e342:	152a      	asrs	r2, r5, #20
 800e344:	d115      	bne.n	800e372 <__ieee754_sqrt+0x86>
 800e346:	2000      	movs	r0, #0
 800e348:	e009      	b.n	800e35e <__ieee754_sqrt+0x72>
 800e34a:	0acb      	lsrs	r3, r1, #11
 800e34c:	3a15      	subs	r2, #21
 800e34e:	0549      	lsls	r1, r1, #21
 800e350:	2b00      	cmp	r3, #0
 800e352:	d0fa      	beq.n	800e34a <__ieee754_sqrt+0x5e>
 800e354:	e7f7      	b.n	800e346 <__ieee754_sqrt+0x5a>
 800e356:	462a      	mov	r2, r5
 800e358:	e7fa      	b.n	800e350 <__ieee754_sqrt+0x64>
 800e35a:	005b      	lsls	r3, r3, #1
 800e35c:	3001      	adds	r0, #1
 800e35e:	02dc      	lsls	r4, r3, #11
 800e360:	d5fb      	bpl.n	800e35a <__ieee754_sqrt+0x6e>
 800e362:	1e44      	subs	r4, r0, #1
 800e364:	1b12      	subs	r2, r2, r4
 800e366:	f1c0 0420 	rsb	r4, r0, #32
 800e36a:	fa21 f404 	lsr.w	r4, r1, r4
 800e36e:	4323      	orrs	r3, r4
 800e370:	4081      	lsls	r1, r0
 800e372:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e376:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e37a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e37e:	07d2      	lsls	r2, r2, #31
 800e380:	bf5c      	itt	pl
 800e382:	005b      	lslpl	r3, r3, #1
 800e384:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e388:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e38c:	bf58      	it	pl
 800e38e:	0049      	lslpl	r1, r1, #1
 800e390:	2600      	movs	r6, #0
 800e392:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e396:	106d      	asrs	r5, r5, #1
 800e398:	0049      	lsls	r1, r1, #1
 800e39a:	2016      	movs	r0, #22
 800e39c:	4632      	mov	r2, r6
 800e39e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e3a2:	1917      	adds	r7, r2, r4
 800e3a4:	429f      	cmp	r7, r3
 800e3a6:	bfde      	ittt	le
 800e3a8:	193a      	addle	r2, r7, r4
 800e3aa:	1bdb      	suble	r3, r3, r7
 800e3ac:	1936      	addle	r6, r6, r4
 800e3ae:	0fcf      	lsrs	r7, r1, #31
 800e3b0:	3801      	subs	r0, #1
 800e3b2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e3b6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e3ba:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e3be:	d1f0      	bne.n	800e3a2 <__ieee754_sqrt+0xb6>
 800e3c0:	4604      	mov	r4, r0
 800e3c2:	2720      	movs	r7, #32
 800e3c4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	eb00 0e0c 	add.w	lr, r0, ip
 800e3ce:	db02      	blt.n	800e3d6 <__ieee754_sqrt+0xea>
 800e3d0:	d113      	bne.n	800e3fa <__ieee754_sqrt+0x10e>
 800e3d2:	458e      	cmp	lr, r1
 800e3d4:	d811      	bhi.n	800e3fa <__ieee754_sqrt+0x10e>
 800e3d6:	f1be 0f00 	cmp.w	lr, #0
 800e3da:	eb0e 000c 	add.w	r0, lr, ip
 800e3de:	da42      	bge.n	800e466 <__ieee754_sqrt+0x17a>
 800e3e0:	2800      	cmp	r0, #0
 800e3e2:	db40      	blt.n	800e466 <__ieee754_sqrt+0x17a>
 800e3e4:	f102 0801 	add.w	r8, r2, #1
 800e3e8:	1a9b      	subs	r3, r3, r2
 800e3ea:	458e      	cmp	lr, r1
 800e3ec:	bf88      	it	hi
 800e3ee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e3f2:	eba1 010e 	sub.w	r1, r1, lr
 800e3f6:	4464      	add	r4, ip
 800e3f8:	4642      	mov	r2, r8
 800e3fa:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e3fe:	3f01      	subs	r7, #1
 800e400:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e404:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e408:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e40c:	d1dc      	bne.n	800e3c8 <__ieee754_sqrt+0xdc>
 800e40e:	4319      	orrs	r1, r3
 800e410:	d01b      	beq.n	800e44a <__ieee754_sqrt+0x15e>
 800e412:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e498 <__ieee754_sqrt+0x1ac>
 800e416:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e49c <__ieee754_sqrt+0x1b0>
 800e41a:	e9da 0100 	ldrd	r0, r1, [sl]
 800e41e:	e9db 2300 	ldrd	r2, r3, [fp]
 800e422:	f7f1 ff31 	bl	8000288 <__aeabi_dsub>
 800e426:	e9da 8900 	ldrd	r8, r9, [sl]
 800e42a:	4602      	mov	r2, r0
 800e42c:	460b      	mov	r3, r1
 800e42e:	4640      	mov	r0, r8
 800e430:	4649      	mov	r1, r9
 800e432:	f7f2 fb5d 	bl	8000af0 <__aeabi_dcmple>
 800e436:	b140      	cbz	r0, 800e44a <__ieee754_sqrt+0x15e>
 800e438:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e43c:	e9da 0100 	ldrd	r0, r1, [sl]
 800e440:	e9db 2300 	ldrd	r2, r3, [fp]
 800e444:	d111      	bne.n	800e46a <__ieee754_sqrt+0x17e>
 800e446:	3601      	adds	r6, #1
 800e448:	463c      	mov	r4, r7
 800e44a:	1072      	asrs	r2, r6, #1
 800e44c:	0863      	lsrs	r3, r4, #1
 800e44e:	07f1      	lsls	r1, r6, #31
 800e450:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e454:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e458:	bf48      	it	mi
 800e45a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e45e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e462:	4618      	mov	r0, r3
 800e464:	e756      	b.n	800e314 <__ieee754_sqrt+0x28>
 800e466:	4690      	mov	r8, r2
 800e468:	e7be      	b.n	800e3e8 <__ieee754_sqrt+0xfc>
 800e46a:	f7f1 ff0f 	bl	800028c <__adddf3>
 800e46e:	e9da 8900 	ldrd	r8, r9, [sl]
 800e472:	4602      	mov	r2, r0
 800e474:	460b      	mov	r3, r1
 800e476:	4640      	mov	r0, r8
 800e478:	4649      	mov	r1, r9
 800e47a:	f7f2 fb2f 	bl	8000adc <__aeabi_dcmplt>
 800e47e:	b120      	cbz	r0, 800e48a <__ieee754_sqrt+0x19e>
 800e480:	1ca0      	adds	r0, r4, #2
 800e482:	bf08      	it	eq
 800e484:	3601      	addeq	r6, #1
 800e486:	3402      	adds	r4, #2
 800e488:	e7df      	b.n	800e44a <__ieee754_sqrt+0x15e>
 800e48a:	1c63      	adds	r3, r4, #1
 800e48c:	f023 0401 	bic.w	r4, r3, #1
 800e490:	e7db      	b.n	800e44a <__ieee754_sqrt+0x15e>
 800e492:	bf00      	nop
 800e494:	7ff00000 	.word	0x7ff00000
 800e498:	200002b0 	.word	0x200002b0
 800e49c:	200002a8 	.word	0x200002a8

0800e4a0 <__kernel_cos>:
 800e4a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a4:	ec57 6b10 	vmov	r6, r7, d0
 800e4a8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e4ac:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800e4b0:	ed8d 1b00 	vstr	d1, [sp]
 800e4b4:	d206      	bcs.n	800e4c4 <__kernel_cos+0x24>
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	4639      	mov	r1, r7
 800e4ba:	f7f2 fb4d 	bl	8000b58 <__aeabi_d2iz>
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	f000 8088 	beq.w	800e5d4 <__kernel_cos+0x134>
 800e4c4:	4632      	mov	r2, r6
 800e4c6:	463b      	mov	r3, r7
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	4639      	mov	r1, r7
 800e4cc:	f7f2 f894 	bl	80005f8 <__aeabi_dmul>
 800e4d0:	4b51      	ldr	r3, [pc, #324]	@ (800e618 <__kernel_cos+0x178>)
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	4604      	mov	r4, r0
 800e4d6:	460d      	mov	r5, r1
 800e4d8:	f7f2 f88e 	bl	80005f8 <__aeabi_dmul>
 800e4dc:	a340      	add	r3, pc, #256	@ (adr r3, 800e5e0 <__kernel_cos+0x140>)
 800e4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e2:	4682      	mov	sl, r0
 800e4e4:	468b      	mov	fp, r1
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	f7f2 f885 	bl	80005f8 <__aeabi_dmul>
 800e4ee:	a33e      	add	r3, pc, #248	@ (adr r3, 800e5e8 <__kernel_cos+0x148>)
 800e4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f4:	f7f1 feca 	bl	800028c <__adddf3>
 800e4f8:	4622      	mov	r2, r4
 800e4fa:	462b      	mov	r3, r5
 800e4fc:	f7f2 f87c 	bl	80005f8 <__aeabi_dmul>
 800e500:	a33b      	add	r3, pc, #236	@ (adr r3, 800e5f0 <__kernel_cos+0x150>)
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	f7f1 febf 	bl	8000288 <__aeabi_dsub>
 800e50a:	4622      	mov	r2, r4
 800e50c:	462b      	mov	r3, r5
 800e50e:	f7f2 f873 	bl	80005f8 <__aeabi_dmul>
 800e512:	a339      	add	r3, pc, #228	@ (adr r3, 800e5f8 <__kernel_cos+0x158>)
 800e514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e518:	f7f1 feb8 	bl	800028c <__adddf3>
 800e51c:	4622      	mov	r2, r4
 800e51e:	462b      	mov	r3, r5
 800e520:	f7f2 f86a 	bl	80005f8 <__aeabi_dmul>
 800e524:	a336      	add	r3, pc, #216	@ (adr r3, 800e600 <__kernel_cos+0x160>)
 800e526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52a:	f7f1 fead 	bl	8000288 <__aeabi_dsub>
 800e52e:	4622      	mov	r2, r4
 800e530:	462b      	mov	r3, r5
 800e532:	f7f2 f861 	bl	80005f8 <__aeabi_dmul>
 800e536:	a334      	add	r3, pc, #208	@ (adr r3, 800e608 <__kernel_cos+0x168>)
 800e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53c:	f7f1 fea6 	bl	800028c <__adddf3>
 800e540:	4622      	mov	r2, r4
 800e542:	462b      	mov	r3, r5
 800e544:	f7f2 f858 	bl	80005f8 <__aeabi_dmul>
 800e548:	4622      	mov	r2, r4
 800e54a:	462b      	mov	r3, r5
 800e54c:	f7f2 f854 	bl	80005f8 <__aeabi_dmul>
 800e550:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e554:	4604      	mov	r4, r0
 800e556:	460d      	mov	r5, r1
 800e558:	4630      	mov	r0, r6
 800e55a:	4639      	mov	r1, r7
 800e55c:	f7f2 f84c 	bl	80005f8 <__aeabi_dmul>
 800e560:	460b      	mov	r3, r1
 800e562:	4602      	mov	r2, r0
 800e564:	4629      	mov	r1, r5
 800e566:	4620      	mov	r0, r4
 800e568:	f7f1 fe8e 	bl	8000288 <__aeabi_dsub>
 800e56c:	4b2b      	ldr	r3, [pc, #172]	@ (800e61c <__kernel_cos+0x17c>)
 800e56e:	4598      	cmp	r8, r3
 800e570:	4606      	mov	r6, r0
 800e572:	460f      	mov	r7, r1
 800e574:	d810      	bhi.n	800e598 <__kernel_cos+0xf8>
 800e576:	4602      	mov	r2, r0
 800e578:	460b      	mov	r3, r1
 800e57a:	4650      	mov	r0, sl
 800e57c:	4659      	mov	r1, fp
 800e57e:	f7f1 fe83 	bl	8000288 <__aeabi_dsub>
 800e582:	460b      	mov	r3, r1
 800e584:	4926      	ldr	r1, [pc, #152]	@ (800e620 <__kernel_cos+0x180>)
 800e586:	4602      	mov	r2, r0
 800e588:	2000      	movs	r0, #0
 800e58a:	f7f1 fe7d 	bl	8000288 <__aeabi_dsub>
 800e58e:	ec41 0b10 	vmov	d0, r0, r1
 800e592:	b003      	add	sp, #12
 800e594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e598:	4b22      	ldr	r3, [pc, #136]	@ (800e624 <__kernel_cos+0x184>)
 800e59a:	4921      	ldr	r1, [pc, #132]	@ (800e620 <__kernel_cos+0x180>)
 800e59c:	4598      	cmp	r8, r3
 800e59e:	bf8c      	ite	hi
 800e5a0:	4d21      	ldrhi	r5, [pc, #132]	@ (800e628 <__kernel_cos+0x188>)
 800e5a2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800e5a6:	2400      	movs	r4, #0
 800e5a8:	4622      	mov	r2, r4
 800e5aa:	462b      	mov	r3, r5
 800e5ac:	2000      	movs	r0, #0
 800e5ae:	f7f1 fe6b 	bl	8000288 <__aeabi_dsub>
 800e5b2:	4622      	mov	r2, r4
 800e5b4:	4680      	mov	r8, r0
 800e5b6:	4689      	mov	r9, r1
 800e5b8:	462b      	mov	r3, r5
 800e5ba:	4650      	mov	r0, sl
 800e5bc:	4659      	mov	r1, fp
 800e5be:	f7f1 fe63 	bl	8000288 <__aeabi_dsub>
 800e5c2:	4632      	mov	r2, r6
 800e5c4:	463b      	mov	r3, r7
 800e5c6:	f7f1 fe5f 	bl	8000288 <__aeabi_dsub>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	4640      	mov	r0, r8
 800e5d0:	4649      	mov	r1, r9
 800e5d2:	e7da      	b.n	800e58a <__kernel_cos+0xea>
 800e5d4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800e610 <__kernel_cos+0x170>
 800e5d8:	e7db      	b.n	800e592 <__kernel_cos+0xf2>
 800e5da:	bf00      	nop
 800e5dc:	f3af 8000 	nop.w
 800e5e0:	be8838d4 	.word	0xbe8838d4
 800e5e4:	bda8fae9 	.word	0xbda8fae9
 800e5e8:	bdb4b1c4 	.word	0xbdb4b1c4
 800e5ec:	3e21ee9e 	.word	0x3e21ee9e
 800e5f0:	809c52ad 	.word	0x809c52ad
 800e5f4:	3e927e4f 	.word	0x3e927e4f
 800e5f8:	19cb1590 	.word	0x19cb1590
 800e5fc:	3efa01a0 	.word	0x3efa01a0
 800e600:	16c15177 	.word	0x16c15177
 800e604:	3f56c16c 	.word	0x3f56c16c
 800e608:	5555554c 	.word	0x5555554c
 800e60c:	3fa55555 	.word	0x3fa55555
 800e610:	00000000 	.word	0x00000000
 800e614:	3ff00000 	.word	0x3ff00000
 800e618:	3fe00000 	.word	0x3fe00000
 800e61c:	3fd33332 	.word	0x3fd33332
 800e620:	3ff00000 	.word	0x3ff00000
 800e624:	3fe90000 	.word	0x3fe90000
 800e628:	3fd20000 	.word	0x3fd20000
 800e62c:	00000000 	.word	0x00000000

0800e630 <__kernel_sin>:
 800e630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e634:	ec55 4b10 	vmov	r4, r5, d0
 800e638:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e63c:	b085      	sub	sp, #20
 800e63e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800e642:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e646:	4680      	mov	r8, r0
 800e648:	d205      	bcs.n	800e656 <__kernel_sin+0x26>
 800e64a:	4620      	mov	r0, r4
 800e64c:	4629      	mov	r1, r5
 800e64e:	f7f2 fa83 	bl	8000b58 <__aeabi_d2iz>
 800e652:	2800      	cmp	r0, #0
 800e654:	d052      	beq.n	800e6fc <__kernel_sin+0xcc>
 800e656:	4622      	mov	r2, r4
 800e658:	462b      	mov	r3, r5
 800e65a:	4620      	mov	r0, r4
 800e65c:	4629      	mov	r1, r5
 800e65e:	f7f1 ffcb 	bl	80005f8 <__aeabi_dmul>
 800e662:	4682      	mov	sl, r0
 800e664:	468b      	mov	fp, r1
 800e666:	4602      	mov	r2, r0
 800e668:	460b      	mov	r3, r1
 800e66a:	4620      	mov	r0, r4
 800e66c:	4629      	mov	r1, r5
 800e66e:	f7f1 ffc3 	bl	80005f8 <__aeabi_dmul>
 800e672:	a342      	add	r3, pc, #264	@ (adr r3, 800e77c <__kernel_sin+0x14c>)
 800e674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e678:	e9cd 0100 	strd	r0, r1, [sp]
 800e67c:	4650      	mov	r0, sl
 800e67e:	4659      	mov	r1, fp
 800e680:	f7f1 ffba 	bl	80005f8 <__aeabi_dmul>
 800e684:	a33f      	add	r3, pc, #252	@ (adr r3, 800e784 <__kernel_sin+0x154>)
 800e686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e68a:	f7f1 fdfd 	bl	8000288 <__aeabi_dsub>
 800e68e:	4652      	mov	r2, sl
 800e690:	465b      	mov	r3, fp
 800e692:	f7f1 ffb1 	bl	80005f8 <__aeabi_dmul>
 800e696:	a33d      	add	r3, pc, #244	@ (adr r3, 800e78c <__kernel_sin+0x15c>)
 800e698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69c:	f7f1 fdf6 	bl	800028c <__adddf3>
 800e6a0:	4652      	mov	r2, sl
 800e6a2:	465b      	mov	r3, fp
 800e6a4:	f7f1 ffa8 	bl	80005f8 <__aeabi_dmul>
 800e6a8:	a33a      	add	r3, pc, #232	@ (adr r3, 800e794 <__kernel_sin+0x164>)
 800e6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ae:	f7f1 fdeb 	bl	8000288 <__aeabi_dsub>
 800e6b2:	4652      	mov	r2, sl
 800e6b4:	465b      	mov	r3, fp
 800e6b6:	f7f1 ff9f 	bl	80005f8 <__aeabi_dmul>
 800e6ba:	a338      	add	r3, pc, #224	@ (adr r3, 800e79c <__kernel_sin+0x16c>)
 800e6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c0:	f7f1 fde4 	bl	800028c <__adddf3>
 800e6c4:	4606      	mov	r6, r0
 800e6c6:	460f      	mov	r7, r1
 800e6c8:	f1b8 0f00 	cmp.w	r8, #0
 800e6cc:	d11b      	bne.n	800e706 <__kernel_sin+0xd6>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	4650      	mov	r0, sl
 800e6d4:	4659      	mov	r1, fp
 800e6d6:	f7f1 ff8f 	bl	80005f8 <__aeabi_dmul>
 800e6da:	a325      	add	r3, pc, #148	@ (adr r3, 800e770 <__kernel_sin+0x140>)
 800e6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e0:	f7f1 fdd2 	bl	8000288 <__aeabi_dsub>
 800e6e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6e8:	f7f1 ff86 	bl	80005f8 <__aeabi_dmul>
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	4629      	mov	r1, r5
 800e6f4:	f7f1 fdca 	bl	800028c <__adddf3>
 800e6f8:	4604      	mov	r4, r0
 800e6fa:	460d      	mov	r5, r1
 800e6fc:	ec45 4b10 	vmov	d0, r4, r5
 800e700:	b005      	add	sp, #20
 800e702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e70a:	4b1b      	ldr	r3, [pc, #108]	@ (800e778 <__kernel_sin+0x148>)
 800e70c:	2200      	movs	r2, #0
 800e70e:	f7f1 ff73 	bl	80005f8 <__aeabi_dmul>
 800e712:	4632      	mov	r2, r6
 800e714:	4680      	mov	r8, r0
 800e716:	4689      	mov	r9, r1
 800e718:	463b      	mov	r3, r7
 800e71a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e71e:	f7f1 ff6b 	bl	80005f8 <__aeabi_dmul>
 800e722:	4602      	mov	r2, r0
 800e724:	460b      	mov	r3, r1
 800e726:	4640      	mov	r0, r8
 800e728:	4649      	mov	r1, r9
 800e72a:	f7f1 fdad 	bl	8000288 <__aeabi_dsub>
 800e72e:	4652      	mov	r2, sl
 800e730:	465b      	mov	r3, fp
 800e732:	f7f1 ff61 	bl	80005f8 <__aeabi_dmul>
 800e736:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e73a:	f7f1 fda5 	bl	8000288 <__aeabi_dsub>
 800e73e:	a30c      	add	r3, pc, #48	@ (adr r3, 800e770 <__kernel_sin+0x140>)
 800e740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e744:	4606      	mov	r6, r0
 800e746:	460f      	mov	r7, r1
 800e748:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e74c:	f7f1 ff54 	bl	80005f8 <__aeabi_dmul>
 800e750:	4602      	mov	r2, r0
 800e752:	460b      	mov	r3, r1
 800e754:	4630      	mov	r0, r6
 800e756:	4639      	mov	r1, r7
 800e758:	f7f1 fd98 	bl	800028c <__adddf3>
 800e75c:	4602      	mov	r2, r0
 800e75e:	460b      	mov	r3, r1
 800e760:	4620      	mov	r0, r4
 800e762:	4629      	mov	r1, r5
 800e764:	f7f1 fd90 	bl	8000288 <__aeabi_dsub>
 800e768:	e7c6      	b.n	800e6f8 <__kernel_sin+0xc8>
 800e76a:	bf00      	nop
 800e76c:	f3af 8000 	nop.w
 800e770:	55555549 	.word	0x55555549
 800e774:	3fc55555 	.word	0x3fc55555
 800e778:	3fe00000 	.word	0x3fe00000
 800e77c:	5acfd57c 	.word	0x5acfd57c
 800e780:	3de5d93a 	.word	0x3de5d93a
 800e784:	8a2b9ceb 	.word	0x8a2b9ceb
 800e788:	3e5ae5e6 	.word	0x3e5ae5e6
 800e78c:	57b1fe7d 	.word	0x57b1fe7d
 800e790:	3ec71de3 	.word	0x3ec71de3
 800e794:	19c161d5 	.word	0x19c161d5
 800e798:	3f2a01a0 	.word	0x3f2a01a0
 800e79c:	1110f8a6 	.word	0x1110f8a6
 800e7a0:	3f811111 	.word	0x3f811111
 800e7a4:	00000000 	.word	0x00000000

0800e7a8 <__ieee754_atan2>:
 800e7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7ac:	ec57 6b11 	vmov	r6, r7, d1
 800e7b0:	4273      	negs	r3, r6
 800e7b2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e930 <__ieee754_atan2+0x188>
 800e7b6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800e7ba:	4333      	orrs	r3, r6
 800e7bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e7c0:	4543      	cmp	r3, r8
 800e7c2:	ec51 0b10 	vmov	r0, r1, d0
 800e7c6:	4635      	mov	r5, r6
 800e7c8:	d809      	bhi.n	800e7de <__ieee754_atan2+0x36>
 800e7ca:	4244      	negs	r4, r0
 800e7cc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e7d0:	4304      	orrs	r4, r0
 800e7d2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e7d6:	4544      	cmp	r4, r8
 800e7d8:	468e      	mov	lr, r1
 800e7da:	4681      	mov	r9, r0
 800e7dc:	d907      	bls.n	800e7ee <__ieee754_atan2+0x46>
 800e7de:	4632      	mov	r2, r6
 800e7e0:	463b      	mov	r3, r7
 800e7e2:	f7f1 fd53 	bl	800028c <__adddf3>
 800e7e6:	ec41 0b10 	vmov	d0, r0, r1
 800e7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7ee:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800e7f2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800e7f6:	4334      	orrs	r4, r6
 800e7f8:	d103      	bne.n	800e802 <__ieee754_atan2+0x5a>
 800e7fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7fe:	f000 bbab 	b.w	800ef58 <atan>
 800e802:	17bc      	asrs	r4, r7, #30
 800e804:	f004 0402 	and.w	r4, r4, #2
 800e808:	ea53 0909 	orrs.w	r9, r3, r9
 800e80c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e810:	d107      	bne.n	800e822 <__ieee754_atan2+0x7a>
 800e812:	2c02      	cmp	r4, #2
 800e814:	d05f      	beq.n	800e8d6 <__ieee754_atan2+0x12e>
 800e816:	2c03      	cmp	r4, #3
 800e818:	d1e5      	bne.n	800e7e6 <__ieee754_atan2+0x3e>
 800e81a:	a141      	add	r1, pc, #260	@ (adr r1, 800e920 <__ieee754_atan2+0x178>)
 800e81c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e820:	e7e1      	b.n	800e7e6 <__ieee754_atan2+0x3e>
 800e822:	4315      	orrs	r5, r2
 800e824:	d106      	bne.n	800e834 <__ieee754_atan2+0x8c>
 800e826:	f1be 0f00 	cmp.w	lr, #0
 800e82a:	da5f      	bge.n	800e8ec <__ieee754_atan2+0x144>
 800e82c:	a13e      	add	r1, pc, #248	@ (adr r1, 800e928 <__ieee754_atan2+0x180>)
 800e82e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e832:	e7d8      	b.n	800e7e6 <__ieee754_atan2+0x3e>
 800e834:	4542      	cmp	r2, r8
 800e836:	d10f      	bne.n	800e858 <__ieee754_atan2+0xb0>
 800e838:	4293      	cmp	r3, r2
 800e83a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e83e:	d107      	bne.n	800e850 <__ieee754_atan2+0xa8>
 800e840:	2c02      	cmp	r4, #2
 800e842:	d84c      	bhi.n	800e8de <__ieee754_atan2+0x136>
 800e844:	4b34      	ldr	r3, [pc, #208]	@ (800e918 <__ieee754_atan2+0x170>)
 800e846:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e84a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e84e:	e7ca      	b.n	800e7e6 <__ieee754_atan2+0x3e>
 800e850:	2c02      	cmp	r4, #2
 800e852:	d848      	bhi.n	800e8e6 <__ieee754_atan2+0x13e>
 800e854:	4b31      	ldr	r3, [pc, #196]	@ (800e91c <__ieee754_atan2+0x174>)
 800e856:	e7f6      	b.n	800e846 <__ieee754_atan2+0x9e>
 800e858:	4543      	cmp	r3, r8
 800e85a:	d0e4      	beq.n	800e826 <__ieee754_atan2+0x7e>
 800e85c:	1a9b      	subs	r3, r3, r2
 800e85e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e862:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e866:	da1e      	bge.n	800e8a6 <__ieee754_atan2+0xfe>
 800e868:	2f00      	cmp	r7, #0
 800e86a:	da01      	bge.n	800e870 <__ieee754_atan2+0xc8>
 800e86c:	323c      	adds	r2, #60	@ 0x3c
 800e86e:	db1e      	blt.n	800e8ae <__ieee754_atan2+0x106>
 800e870:	4632      	mov	r2, r6
 800e872:	463b      	mov	r3, r7
 800e874:	f7f1 ffea 	bl	800084c <__aeabi_ddiv>
 800e878:	ec41 0b10 	vmov	d0, r0, r1
 800e87c:	f000 fd04 	bl	800f288 <fabs>
 800e880:	f000 fb6a 	bl	800ef58 <atan>
 800e884:	ec51 0b10 	vmov	r0, r1, d0
 800e888:	2c01      	cmp	r4, #1
 800e88a:	d013      	beq.n	800e8b4 <__ieee754_atan2+0x10c>
 800e88c:	2c02      	cmp	r4, #2
 800e88e:	d015      	beq.n	800e8bc <__ieee754_atan2+0x114>
 800e890:	2c00      	cmp	r4, #0
 800e892:	d0a8      	beq.n	800e7e6 <__ieee754_atan2+0x3e>
 800e894:	a318      	add	r3, pc, #96	@ (adr r3, 800e8f8 <__ieee754_atan2+0x150>)
 800e896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89a:	f7f1 fcf5 	bl	8000288 <__aeabi_dsub>
 800e89e:	a318      	add	r3, pc, #96	@ (adr r3, 800e900 <__ieee754_atan2+0x158>)
 800e8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a4:	e014      	b.n	800e8d0 <__ieee754_atan2+0x128>
 800e8a6:	a118      	add	r1, pc, #96	@ (adr r1, 800e908 <__ieee754_atan2+0x160>)
 800e8a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8ac:	e7ec      	b.n	800e888 <__ieee754_atan2+0xe0>
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	2100      	movs	r1, #0
 800e8b2:	e7e9      	b.n	800e888 <__ieee754_atan2+0xe0>
 800e8b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	e794      	b.n	800e7e6 <__ieee754_atan2+0x3e>
 800e8bc:	a30e      	add	r3, pc, #56	@ (adr r3, 800e8f8 <__ieee754_atan2+0x150>)
 800e8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c2:	f7f1 fce1 	bl	8000288 <__aeabi_dsub>
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	a10d      	add	r1, pc, #52	@ (adr r1, 800e900 <__ieee754_atan2+0x158>)
 800e8cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8d0:	f7f1 fcda 	bl	8000288 <__aeabi_dsub>
 800e8d4:	e787      	b.n	800e7e6 <__ieee754_atan2+0x3e>
 800e8d6:	a10a      	add	r1, pc, #40	@ (adr r1, 800e900 <__ieee754_atan2+0x158>)
 800e8d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8dc:	e783      	b.n	800e7e6 <__ieee754_atan2+0x3e>
 800e8de:	a10c      	add	r1, pc, #48	@ (adr r1, 800e910 <__ieee754_atan2+0x168>)
 800e8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8e4:	e77f      	b.n	800e7e6 <__ieee754_atan2+0x3e>
 800e8e6:	2000      	movs	r0, #0
 800e8e8:	2100      	movs	r1, #0
 800e8ea:	e77c      	b.n	800e7e6 <__ieee754_atan2+0x3e>
 800e8ec:	a106      	add	r1, pc, #24	@ (adr r1, 800e908 <__ieee754_atan2+0x160>)
 800e8ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8f2:	e778      	b.n	800e7e6 <__ieee754_atan2+0x3e>
 800e8f4:	f3af 8000 	nop.w
 800e8f8:	33145c07 	.word	0x33145c07
 800e8fc:	3ca1a626 	.word	0x3ca1a626
 800e900:	54442d18 	.word	0x54442d18
 800e904:	400921fb 	.word	0x400921fb
 800e908:	54442d18 	.word	0x54442d18
 800e90c:	3ff921fb 	.word	0x3ff921fb
 800e910:	54442d18 	.word	0x54442d18
 800e914:	3fe921fb 	.word	0x3fe921fb
 800e918:	08010100 	.word	0x08010100
 800e91c:	080100e8 	.word	0x080100e8
 800e920:	54442d18 	.word	0x54442d18
 800e924:	c00921fb 	.word	0xc00921fb
 800e928:	54442d18 	.word	0x54442d18
 800e92c:	bff921fb 	.word	0xbff921fb
 800e930:	7ff00000 	.word	0x7ff00000

0800e934 <__ieee754_hypot>:
 800e934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e938:	ec51 0b10 	vmov	r0, r1, d0
 800e93c:	ec53 2b11 	vmov	r2, r3, d1
 800e940:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800e944:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800e948:	42a5      	cmp	r5, r4
 800e94a:	b087      	sub	sp, #28
 800e94c:	da05      	bge.n	800e95a <__ieee754_hypot+0x26>
 800e94e:	462e      	mov	r6, r5
 800e950:	4625      	mov	r5, r4
 800e952:	4634      	mov	r4, r6
 800e954:	4606      	mov	r6, r0
 800e956:	4610      	mov	r0, r2
 800e958:	4632      	mov	r2, r6
 800e95a:	1b2b      	subs	r3, r5, r4
 800e95c:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800e960:	4629      	mov	r1, r5
 800e962:	4682      	mov	sl, r0
 800e964:	46ab      	mov	fp, r5
 800e966:	4616      	mov	r6, r2
 800e968:	4627      	mov	r7, r4
 800e96a:	dd05      	ble.n	800e978 <__ieee754_hypot+0x44>
 800e96c:	4623      	mov	r3, r4
 800e96e:	f7f1 fc8d 	bl	800028c <__adddf3>
 800e972:	4682      	mov	sl, r0
 800e974:	468b      	mov	fp, r1
 800e976:	e016      	b.n	800e9a6 <__ieee754_hypot+0x72>
 800e978:	4b75      	ldr	r3, [pc, #468]	@ (800eb50 <__ieee754_hypot+0x21c>)
 800e97a:	429d      	cmp	r5, r3
 800e97c:	f340 8096 	ble.w	800eaac <__ieee754_hypot+0x178>
 800e980:	4b74      	ldr	r3, [pc, #464]	@ (800eb54 <__ieee754_hypot+0x220>)
 800e982:	429d      	cmp	r5, r3
 800e984:	dd14      	ble.n	800e9b0 <__ieee754_hypot+0x7c>
 800e986:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e98a:	4305      	orrs	r5, r0
 800e98c:	d004      	beq.n	800e998 <__ieee754_hypot+0x64>
 800e98e:	4623      	mov	r3, r4
 800e990:	f7f1 fc7c 	bl	800028c <__adddf3>
 800e994:	4682      	mov	sl, r0
 800e996:	468b      	mov	fp, r1
 800e998:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800e99c:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800e9a0:	4334      	orrs	r4, r6
 800e9a2:	f000 80d2 	beq.w	800eb4a <__ieee754_hypot+0x216>
 800e9a6:	ec4b ab10 	vmov	d0, sl, fp
 800e9aa:	b007      	add	sp, #28
 800e9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b0:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800e9b4:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800e9b8:	46ab      	mov	fp, r5
 800e9ba:	4627      	mov	r7, r4
 800e9bc:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800e9c0:	9301      	str	r3, [sp, #4]
 800e9c2:	4b65      	ldr	r3, [pc, #404]	@ (800eb58 <__ieee754_hypot+0x224>)
 800e9c4:	429c      	cmp	r4, r3
 800e9c6:	dc19      	bgt.n	800e9fc <__ieee754_hypot+0xc8>
 800e9c8:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800e9cc:	da70      	bge.n	800eab0 <__ieee754_hypot+0x17c>
 800e9ce:	4633      	mov	r3, r6
 800e9d0:	4323      	orrs	r3, r4
 800e9d2:	d0e8      	beq.n	800e9a6 <__ieee754_hypot+0x72>
 800e9d4:	4b61      	ldr	r3, [pc, #388]	@ (800eb5c <__ieee754_hypot+0x228>)
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	4630      	mov	r0, r6
 800e9da:	4639      	mov	r1, r7
 800e9dc:	f7f1 fe0c 	bl	80005f8 <__aeabi_dmul>
 800e9e0:	4b5e      	ldr	r3, [pc, #376]	@ (800eb5c <__ieee754_hypot+0x228>)
 800e9e2:	4606      	mov	r6, r0
 800e9e4:	460f      	mov	r7, r1
 800e9e6:	4650      	mov	r0, sl
 800e9e8:	4659      	mov	r1, fp
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f7f1 fe04 	bl	80005f8 <__aeabi_dmul>
 800e9f0:	9b01      	ldr	r3, [sp, #4]
 800e9f2:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800e9f6:	4682      	mov	sl, r0
 800e9f8:	468b      	mov	fp, r1
 800e9fa:	9301      	str	r3, [sp, #4]
 800e9fc:	4632      	mov	r2, r6
 800e9fe:	463b      	mov	r3, r7
 800ea00:	4650      	mov	r0, sl
 800ea02:	4659      	mov	r1, fp
 800ea04:	f7f1 fc40 	bl	8000288 <__aeabi_dsub>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	4680      	mov	r8, r0
 800ea0e:	4689      	mov	r9, r1
 800ea10:	4630      	mov	r0, r6
 800ea12:	4639      	mov	r1, r7
 800ea14:	f7f2 f862 	bl	8000adc <__aeabi_dcmplt>
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	d053      	beq.n	800eac6 <__ieee754_hypot+0x192>
 800ea1e:	462b      	mov	r3, r5
 800ea20:	4610      	mov	r0, r2
 800ea22:	4629      	mov	r1, r5
 800ea24:	4614      	mov	r4, r2
 800ea26:	f7f1 fde7 	bl	80005f8 <__aeabi_dmul>
 800ea2a:	4632      	mov	r2, r6
 800ea2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea30:	463b      	mov	r3, r7
 800ea32:	4630      	mov	r0, r6
 800ea34:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800ea38:	f7f1 fdde 	bl	80005f8 <__aeabi_dmul>
 800ea3c:	4622      	mov	r2, r4
 800ea3e:	4606      	mov	r6, r0
 800ea40:	460f      	mov	r7, r1
 800ea42:	462b      	mov	r3, r5
 800ea44:	4650      	mov	r0, sl
 800ea46:	4659      	mov	r1, fp
 800ea48:	f7f1 fc20 	bl	800028c <__adddf3>
 800ea4c:	4622      	mov	r2, r4
 800ea4e:	4680      	mov	r8, r0
 800ea50:	4689      	mov	r9, r1
 800ea52:	462b      	mov	r3, r5
 800ea54:	4650      	mov	r0, sl
 800ea56:	4659      	mov	r1, fp
 800ea58:	f7f1 fc16 	bl	8000288 <__aeabi_dsub>
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	460b      	mov	r3, r1
 800ea60:	4640      	mov	r0, r8
 800ea62:	4649      	mov	r1, r9
 800ea64:	f7f1 fdc8 	bl	80005f8 <__aeabi_dmul>
 800ea68:	4602      	mov	r2, r0
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	4630      	mov	r0, r6
 800ea6e:	4639      	mov	r1, r7
 800ea70:	f7f1 fc0a 	bl	8000288 <__aeabi_dsub>
 800ea74:	4602      	mov	r2, r0
 800ea76:	460b      	mov	r3, r1
 800ea78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea7c:	f7f1 fc04 	bl	8000288 <__aeabi_dsub>
 800ea80:	ec41 0b10 	vmov	d0, r0, r1
 800ea84:	f7ff fc32 	bl	800e2ec <__ieee754_sqrt>
 800ea88:	9b01      	ldr	r3, [sp, #4]
 800ea8a:	ec5b ab10 	vmov	sl, fp, d0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d089      	beq.n	800e9a6 <__ieee754_hypot+0x72>
 800ea92:	051b      	lsls	r3, r3, #20
 800ea94:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800ea98:	2000      	movs	r0, #0
 800ea9a:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	4650      	mov	r0, sl
 800eaa4:	4659      	mov	r1, fp
 800eaa6:	f7f1 fda7 	bl	80005f8 <__aeabi_dmul>
 800eaaa:	e762      	b.n	800e972 <__ieee754_hypot+0x3e>
 800eaac:	2300      	movs	r3, #0
 800eaae:	e787      	b.n	800e9c0 <__ieee754_hypot+0x8c>
 800eab0:	9b01      	ldr	r3, [sp, #4]
 800eab2:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800eab6:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800eaba:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800eabe:	9301      	str	r3, [sp, #4]
 800eac0:	46ab      	mov	fp, r5
 800eac2:	4627      	mov	r7, r4
 800eac4:	e79a      	b.n	800e9fc <__ieee754_hypot+0xc8>
 800eac6:	4623      	mov	r3, r4
 800eac8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eacc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ead0:	2200      	movs	r2, #0
 800ead2:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800ead6:	4614      	mov	r4, r2
 800ead8:	461d      	mov	r5, r3
 800eada:	f7f1 fd8d 	bl	80005f8 <__aeabi_dmul>
 800eade:	4642      	mov	r2, r8
 800eae0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eae4:	464b      	mov	r3, r9
 800eae6:	4640      	mov	r0, r8
 800eae8:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800eaec:	f7f1 fd84 	bl	80005f8 <__aeabi_dmul>
 800eaf0:	4652      	mov	r2, sl
 800eaf2:	465b      	mov	r3, fp
 800eaf4:	4680      	mov	r8, r0
 800eaf6:	4689      	mov	r9, r1
 800eaf8:	4650      	mov	r0, sl
 800eafa:	4659      	mov	r1, fp
 800eafc:	f7f1 fbc6 	bl	800028c <__adddf3>
 800eb00:	4622      	mov	r2, r4
 800eb02:	462b      	mov	r3, r5
 800eb04:	f7f1 fbc0 	bl	8000288 <__aeabi_dsub>
 800eb08:	4632      	mov	r2, r6
 800eb0a:	463b      	mov	r3, r7
 800eb0c:	f7f1 fd74 	bl	80005f8 <__aeabi_dmul>
 800eb10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb14:	4682      	mov	sl, r0
 800eb16:	468b      	mov	fp, r1
 800eb18:	4630      	mov	r0, r6
 800eb1a:	4639      	mov	r1, r7
 800eb1c:	f7f1 fbb4 	bl	8000288 <__aeabi_dsub>
 800eb20:	4622      	mov	r2, r4
 800eb22:	462b      	mov	r3, r5
 800eb24:	f7f1 fd68 	bl	80005f8 <__aeabi_dmul>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	4650      	mov	r0, sl
 800eb2e:	4659      	mov	r1, fp
 800eb30:	f7f1 fbac 	bl	800028c <__adddf3>
 800eb34:	4602      	mov	r2, r0
 800eb36:	460b      	mov	r3, r1
 800eb38:	4640      	mov	r0, r8
 800eb3a:	4649      	mov	r1, r9
 800eb3c:	f7f1 fba4 	bl	8000288 <__aeabi_dsub>
 800eb40:	4602      	mov	r2, r0
 800eb42:	460b      	mov	r3, r1
 800eb44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb48:	e798      	b.n	800ea7c <__ieee754_hypot+0x148>
 800eb4a:	46b2      	mov	sl, r6
 800eb4c:	46bb      	mov	fp, r7
 800eb4e:	e72a      	b.n	800e9a6 <__ieee754_hypot+0x72>
 800eb50:	5f300000 	.word	0x5f300000
 800eb54:	7fefffff 	.word	0x7fefffff
 800eb58:	20afffff 	.word	0x20afffff
 800eb5c:	7fd00000 	.word	0x7fd00000

0800eb60 <__ieee754_rem_pio2>:
 800eb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb64:	ec57 6b10 	vmov	r6, r7, d0
 800eb68:	4bc5      	ldr	r3, [pc, #788]	@ (800ee80 <__ieee754_rem_pio2+0x320>)
 800eb6a:	b08d      	sub	sp, #52	@ 0x34
 800eb6c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800eb70:	4598      	cmp	r8, r3
 800eb72:	4604      	mov	r4, r0
 800eb74:	9704      	str	r7, [sp, #16]
 800eb76:	d807      	bhi.n	800eb88 <__ieee754_rem_pio2+0x28>
 800eb78:	2200      	movs	r2, #0
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	ed80 0b00 	vstr	d0, [r0]
 800eb80:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eb84:	2500      	movs	r5, #0
 800eb86:	e028      	b.n	800ebda <__ieee754_rem_pio2+0x7a>
 800eb88:	4bbe      	ldr	r3, [pc, #760]	@ (800ee84 <__ieee754_rem_pio2+0x324>)
 800eb8a:	4598      	cmp	r8, r3
 800eb8c:	d878      	bhi.n	800ec80 <__ieee754_rem_pio2+0x120>
 800eb8e:	9b04      	ldr	r3, [sp, #16]
 800eb90:	4dbd      	ldr	r5, [pc, #756]	@ (800ee88 <__ieee754_rem_pio2+0x328>)
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	4630      	mov	r0, r6
 800eb96:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ee48 <__ieee754_rem_pio2+0x2e8>)
 800eb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9c:	4639      	mov	r1, r7
 800eb9e:	dd38      	ble.n	800ec12 <__ieee754_rem_pio2+0xb2>
 800eba0:	f7f1 fb72 	bl	8000288 <__aeabi_dsub>
 800eba4:	45a8      	cmp	r8, r5
 800eba6:	4606      	mov	r6, r0
 800eba8:	460f      	mov	r7, r1
 800ebaa:	d01a      	beq.n	800ebe2 <__ieee754_rem_pio2+0x82>
 800ebac:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ee50 <__ieee754_rem_pio2+0x2f0>)
 800ebae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb2:	f7f1 fb69 	bl	8000288 <__aeabi_dsub>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	460b      	mov	r3, r1
 800ebba:	4680      	mov	r8, r0
 800ebbc:	4689      	mov	r9, r1
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	4639      	mov	r1, r7
 800ebc2:	f7f1 fb61 	bl	8000288 <__aeabi_dsub>
 800ebc6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ee50 <__ieee754_rem_pio2+0x2f0>)
 800ebc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebcc:	f7f1 fb5c 	bl	8000288 <__aeabi_dsub>
 800ebd0:	e9c4 8900 	strd	r8, r9, [r4]
 800ebd4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ebd8:	2501      	movs	r5, #1
 800ebda:	4628      	mov	r0, r5
 800ebdc:	b00d      	add	sp, #52	@ 0x34
 800ebde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe2:	a39d      	add	r3, pc, #628	@ (adr r3, 800ee58 <__ieee754_rem_pio2+0x2f8>)
 800ebe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe8:	f7f1 fb4e 	bl	8000288 <__aeabi_dsub>
 800ebec:	a39c      	add	r3, pc, #624	@ (adr r3, 800ee60 <__ieee754_rem_pio2+0x300>)
 800ebee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	460f      	mov	r7, r1
 800ebf6:	f7f1 fb47 	bl	8000288 <__aeabi_dsub>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	4680      	mov	r8, r0
 800ec00:	4689      	mov	r9, r1
 800ec02:	4630      	mov	r0, r6
 800ec04:	4639      	mov	r1, r7
 800ec06:	f7f1 fb3f 	bl	8000288 <__aeabi_dsub>
 800ec0a:	a395      	add	r3, pc, #596	@ (adr r3, 800ee60 <__ieee754_rem_pio2+0x300>)
 800ec0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec10:	e7dc      	b.n	800ebcc <__ieee754_rem_pio2+0x6c>
 800ec12:	f7f1 fb3b 	bl	800028c <__adddf3>
 800ec16:	45a8      	cmp	r8, r5
 800ec18:	4606      	mov	r6, r0
 800ec1a:	460f      	mov	r7, r1
 800ec1c:	d018      	beq.n	800ec50 <__ieee754_rem_pio2+0xf0>
 800ec1e:	a38c      	add	r3, pc, #560	@ (adr r3, 800ee50 <__ieee754_rem_pio2+0x2f0>)
 800ec20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec24:	f7f1 fb32 	bl	800028c <__adddf3>
 800ec28:	4602      	mov	r2, r0
 800ec2a:	460b      	mov	r3, r1
 800ec2c:	4680      	mov	r8, r0
 800ec2e:	4689      	mov	r9, r1
 800ec30:	4630      	mov	r0, r6
 800ec32:	4639      	mov	r1, r7
 800ec34:	f7f1 fb28 	bl	8000288 <__aeabi_dsub>
 800ec38:	a385      	add	r3, pc, #532	@ (adr r3, 800ee50 <__ieee754_rem_pio2+0x2f0>)
 800ec3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec3e:	f7f1 fb25 	bl	800028c <__adddf3>
 800ec42:	f04f 35ff 	mov.w	r5, #4294967295
 800ec46:	e9c4 8900 	strd	r8, r9, [r4]
 800ec4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ec4e:	e7c4      	b.n	800ebda <__ieee754_rem_pio2+0x7a>
 800ec50:	a381      	add	r3, pc, #516	@ (adr r3, 800ee58 <__ieee754_rem_pio2+0x2f8>)
 800ec52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec56:	f7f1 fb19 	bl	800028c <__adddf3>
 800ec5a:	a381      	add	r3, pc, #516	@ (adr r3, 800ee60 <__ieee754_rem_pio2+0x300>)
 800ec5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec60:	4606      	mov	r6, r0
 800ec62:	460f      	mov	r7, r1
 800ec64:	f7f1 fb12 	bl	800028c <__adddf3>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	4680      	mov	r8, r0
 800ec6e:	4689      	mov	r9, r1
 800ec70:	4630      	mov	r0, r6
 800ec72:	4639      	mov	r1, r7
 800ec74:	f7f1 fb08 	bl	8000288 <__aeabi_dsub>
 800ec78:	a379      	add	r3, pc, #484	@ (adr r3, 800ee60 <__ieee754_rem_pio2+0x300>)
 800ec7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7e:	e7de      	b.n	800ec3e <__ieee754_rem_pio2+0xde>
 800ec80:	4b82      	ldr	r3, [pc, #520]	@ (800ee8c <__ieee754_rem_pio2+0x32c>)
 800ec82:	4598      	cmp	r8, r3
 800ec84:	f200 80d1 	bhi.w	800ee2a <__ieee754_rem_pio2+0x2ca>
 800ec88:	f000 fafe 	bl	800f288 <fabs>
 800ec8c:	ec57 6b10 	vmov	r6, r7, d0
 800ec90:	a375      	add	r3, pc, #468	@ (adr r3, 800ee68 <__ieee754_rem_pio2+0x308>)
 800ec92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec96:	4630      	mov	r0, r6
 800ec98:	4639      	mov	r1, r7
 800ec9a:	f7f1 fcad 	bl	80005f8 <__aeabi_dmul>
 800ec9e:	4b7c      	ldr	r3, [pc, #496]	@ (800ee90 <__ieee754_rem_pio2+0x330>)
 800eca0:	2200      	movs	r2, #0
 800eca2:	f7f1 faf3 	bl	800028c <__adddf3>
 800eca6:	f7f1 ff57 	bl	8000b58 <__aeabi_d2iz>
 800ecaa:	4605      	mov	r5, r0
 800ecac:	f7f1 fc3a 	bl	8000524 <__aeabi_i2d>
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	460b      	mov	r3, r1
 800ecb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ecb8:	a363      	add	r3, pc, #396	@ (adr r3, 800ee48 <__ieee754_rem_pio2+0x2e8>)
 800ecba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecbe:	f7f1 fc9b 	bl	80005f8 <__aeabi_dmul>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	4630      	mov	r0, r6
 800ecc8:	4639      	mov	r1, r7
 800ecca:	f7f1 fadd 	bl	8000288 <__aeabi_dsub>
 800ecce:	a360      	add	r3, pc, #384	@ (adr r3, 800ee50 <__ieee754_rem_pio2+0x2f0>)
 800ecd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd4:	4682      	mov	sl, r0
 800ecd6:	468b      	mov	fp, r1
 800ecd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecdc:	f7f1 fc8c 	bl	80005f8 <__aeabi_dmul>
 800ece0:	2d1f      	cmp	r5, #31
 800ece2:	4606      	mov	r6, r0
 800ece4:	460f      	mov	r7, r1
 800ece6:	dc0c      	bgt.n	800ed02 <__ieee754_rem_pio2+0x1a2>
 800ece8:	4b6a      	ldr	r3, [pc, #424]	@ (800ee94 <__ieee754_rem_pio2+0x334>)
 800ecea:	1e6a      	subs	r2, r5, #1
 800ecec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecf0:	4543      	cmp	r3, r8
 800ecf2:	d006      	beq.n	800ed02 <__ieee754_rem_pio2+0x1a2>
 800ecf4:	4632      	mov	r2, r6
 800ecf6:	463b      	mov	r3, r7
 800ecf8:	4650      	mov	r0, sl
 800ecfa:	4659      	mov	r1, fp
 800ecfc:	f7f1 fac4 	bl	8000288 <__aeabi_dsub>
 800ed00:	e00e      	b.n	800ed20 <__ieee754_rem_pio2+0x1c0>
 800ed02:	463b      	mov	r3, r7
 800ed04:	4632      	mov	r2, r6
 800ed06:	4650      	mov	r0, sl
 800ed08:	4659      	mov	r1, fp
 800ed0a:	f7f1 fabd 	bl	8000288 <__aeabi_dsub>
 800ed0e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ed12:	9305      	str	r3, [sp, #20]
 800ed14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ed18:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ed1c:	2b10      	cmp	r3, #16
 800ed1e:	dc02      	bgt.n	800ed26 <__ieee754_rem_pio2+0x1c6>
 800ed20:	e9c4 0100 	strd	r0, r1, [r4]
 800ed24:	e039      	b.n	800ed9a <__ieee754_rem_pio2+0x23a>
 800ed26:	a34c      	add	r3, pc, #304	@ (adr r3, 800ee58 <__ieee754_rem_pio2+0x2f8>)
 800ed28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed30:	f7f1 fc62 	bl	80005f8 <__aeabi_dmul>
 800ed34:	4606      	mov	r6, r0
 800ed36:	460f      	mov	r7, r1
 800ed38:	4602      	mov	r2, r0
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	4650      	mov	r0, sl
 800ed3e:	4659      	mov	r1, fp
 800ed40:	f7f1 faa2 	bl	8000288 <__aeabi_dsub>
 800ed44:	4602      	mov	r2, r0
 800ed46:	460b      	mov	r3, r1
 800ed48:	4680      	mov	r8, r0
 800ed4a:	4689      	mov	r9, r1
 800ed4c:	4650      	mov	r0, sl
 800ed4e:	4659      	mov	r1, fp
 800ed50:	f7f1 fa9a 	bl	8000288 <__aeabi_dsub>
 800ed54:	4632      	mov	r2, r6
 800ed56:	463b      	mov	r3, r7
 800ed58:	f7f1 fa96 	bl	8000288 <__aeabi_dsub>
 800ed5c:	a340      	add	r3, pc, #256	@ (adr r3, 800ee60 <__ieee754_rem_pio2+0x300>)
 800ed5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed62:	4606      	mov	r6, r0
 800ed64:	460f      	mov	r7, r1
 800ed66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed6a:	f7f1 fc45 	bl	80005f8 <__aeabi_dmul>
 800ed6e:	4632      	mov	r2, r6
 800ed70:	463b      	mov	r3, r7
 800ed72:	f7f1 fa89 	bl	8000288 <__aeabi_dsub>
 800ed76:	4602      	mov	r2, r0
 800ed78:	460b      	mov	r3, r1
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	460f      	mov	r7, r1
 800ed7e:	4640      	mov	r0, r8
 800ed80:	4649      	mov	r1, r9
 800ed82:	f7f1 fa81 	bl	8000288 <__aeabi_dsub>
 800ed86:	9a05      	ldr	r2, [sp, #20]
 800ed88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ed8c:	1ad3      	subs	r3, r2, r3
 800ed8e:	2b31      	cmp	r3, #49	@ 0x31
 800ed90:	dc20      	bgt.n	800edd4 <__ieee754_rem_pio2+0x274>
 800ed92:	e9c4 0100 	strd	r0, r1, [r4]
 800ed96:	46c2      	mov	sl, r8
 800ed98:	46cb      	mov	fp, r9
 800ed9a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ed9e:	4650      	mov	r0, sl
 800eda0:	4642      	mov	r2, r8
 800eda2:	464b      	mov	r3, r9
 800eda4:	4659      	mov	r1, fp
 800eda6:	f7f1 fa6f 	bl	8000288 <__aeabi_dsub>
 800edaa:	463b      	mov	r3, r7
 800edac:	4632      	mov	r2, r6
 800edae:	f7f1 fa6b 	bl	8000288 <__aeabi_dsub>
 800edb2:	9b04      	ldr	r3, [sp, #16]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800edba:	f6bf af0e 	bge.w	800ebda <__ieee754_rem_pio2+0x7a>
 800edbe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800edc2:	6063      	str	r3, [r4, #4]
 800edc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800edc8:	f8c4 8000 	str.w	r8, [r4]
 800edcc:	60a0      	str	r0, [r4, #8]
 800edce:	60e3      	str	r3, [r4, #12]
 800edd0:	426d      	negs	r5, r5
 800edd2:	e702      	b.n	800ebda <__ieee754_rem_pio2+0x7a>
 800edd4:	a326      	add	r3, pc, #152	@ (adr r3, 800ee70 <__ieee754_rem_pio2+0x310>)
 800edd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edde:	f7f1 fc0b 	bl	80005f8 <__aeabi_dmul>
 800ede2:	4606      	mov	r6, r0
 800ede4:	460f      	mov	r7, r1
 800ede6:	4602      	mov	r2, r0
 800ede8:	460b      	mov	r3, r1
 800edea:	4640      	mov	r0, r8
 800edec:	4649      	mov	r1, r9
 800edee:	f7f1 fa4b 	bl	8000288 <__aeabi_dsub>
 800edf2:	4602      	mov	r2, r0
 800edf4:	460b      	mov	r3, r1
 800edf6:	4682      	mov	sl, r0
 800edf8:	468b      	mov	fp, r1
 800edfa:	4640      	mov	r0, r8
 800edfc:	4649      	mov	r1, r9
 800edfe:	f7f1 fa43 	bl	8000288 <__aeabi_dsub>
 800ee02:	4632      	mov	r2, r6
 800ee04:	463b      	mov	r3, r7
 800ee06:	f7f1 fa3f 	bl	8000288 <__aeabi_dsub>
 800ee0a:	a31b      	add	r3, pc, #108	@ (adr r3, 800ee78 <__ieee754_rem_pio2+0x318>)
 800ee0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee10:	4606      	mov	r6, r0
 800ee12:	460f      	mov	r7, r1
 800ee14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee18:	f7f1 fbee 	bl	80005f8 <__aeabi_dmul>
 800ee1c:	4632      	mov	r2, r6
 800ee1e:	463b      	mov	r3, r7
 800ee20:	f7f1 fa32 	bl	8000288 <__aeabi_dsub>
 800ee24:	4606      	mov	r6, r0
 800ee26:	460f      	mov	r7, r1
 800ee28:	e764      	b.n	800ecf4 <__ieee754_rem_pio2+0x194>
 800ee2a:	4b1b      	ldr	r3, [pc, #108]	@ (800ee98 <__ieee754_rem_pio2+0x338>)
 800ee2c:	4598      	cmp	r8, r3
 800ee2e:	d935      	bls.n	800ee9c <__ieee754_rem_pio2+0x33c>
 800ee30:	4632      	mov	r2, r6
 800ee32:	463b      	mov	r3, r7
 800ee34:	4630      	mov	r0, r6
 800ee36:	4639      	mov	r1, r7
 800ee38:	f7f1 fa26 	bl	8000288 <__aeabi_dsub>
 800ee3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ee40:	e9c4 0100 	strd	r0, r1, [r4]
 800ee44:	e69e      	b.n	800eb84 <__ieee754_rem_pio2+0x24>
 800ee46:	bf00      	nop
 800ee48:	54400000 	.word	0x54400000
 800ee4c:	3ff921fb 	.word	0x3ff921fb
 800ee50:	1a626331 	.word	0x1a626331
 800ee54:	3dd0b461 	.word	0x3dd0b461
 800ee58:	1a600000 	.word	0x1a600000
 800ee5c:	3dd0b461 	.word	0x3dd0b461
 800ee60:	2e037073 	.word	0x2e037073
 800ee64:	3ba3198a 	.word	0x3ba3198a
 800ee68:	6dc9c883 	.word	0x6dc9c883
 800ee6c:	3fe45f30 	.word	0x3fe45f30
 800ee70:	2e000000 	.word	0x2e000000
 800ee74:	3ba3198a 	.word	0x3ba3198a
 800ee78:	252049c1 	.word	0x252049c1
 800ee7c:	397b839a 	.word	0x397b839a
 800ee80:	3fe921fb 	.word	0x3fe921fb
 800ee84:	4002d97b 	.word	0x4002d97b
 800ee88:	3ff921fb 	.word	0x3ff921fb
 800ee8c:	413921fb 	.word	0x413921fb
 800ee90:	3fe00000 	.word	0x3fe00000
 800ee94:	08010118 	.word	0x08010118
 800ee98:	7fefffff 	.word	0x7fefffff
 800ee9c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800eea0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800eea4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800eea8:	4630      	mov	r0, r6
 800eeaa:	460f      	mov	r7, r1
 800eeac:	f7f1 fe54 	bl	8000b58 <__aeabi_d2iz>
 800eeb0:	f7f1 fb38 	bl	8000524 <__aeabi_i2d>
 800eeb4:	4602      	mov	r2, r0
 800eeb6:	460b      	mov	r3, r1
 800eeb8:	4630      	mov	r0, r6
 800eeba:	4639      	mov	r1, r7
 800eebc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eec0:	f7f1 f9e2 	bl	8000288 <__aeabi_dsub>
 800eec4:	4b22      	ldr	r3, [pc, #136]	@ (800ef50 <__ieee754_rem_pio2+0x3f0>)
 800eec6:	2200      	movs	r2, #0
 800eec8:	f7f1 fb96 	bl	80005f8 <__aeabi_dmul>
 800eecc:	460f      	mov	r7, r1
 800eece:	4606      	mov	r6, r0
 800eed0:	f7f1 fe42 	bl	8000b58 <__aeabi_d2iz>
 800eed4:	f7f1 fb26 	bl	8000524 <__aeabi_i2d>
 800eed8:	4602      	mov	r2, r0
 800eeda:	460b      	mov	r3, r1
 800eedc:	4630      	mov	r0, r6
 800eede:	4639      	mov	r1, r7
 800eee0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eee4:	f7f1 f9d0 	bl	8000288 <__aeabi_dsub>
 800eee8:	4b19      	ldr	r3, [pc, #100]	@ (800ef50 <__ieee754_rem_pio2+0x3f0>)
 800eeea:	2200      	movs	r2, #0
 800eeec:	f7f1 fb84 	bl	80005f8 <__aeabi_dmul>
 800eef0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800eef4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800eef8:	f04f 0803 	mov.w	r8, #3
 800eefc:	2600      	movs	r6, #0
 800eefe:	2700      	movs	r7, #0
 800ef00:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ef04:	4632      	mov	r2, r6
 800ef06:	463b      	mov	r3, r7
 800ef08:	46c2      	mov	sl, r8
 800ef0a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef0e:	f7f1 fddb 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef12:	2800      	cmp	r0, #0
 800ef14:	d1f4      	bne.n	800ef00 <__ieee754_rem_pio2+0x3a0>
 800ef16:	4b0f      	ldr	r3, [pc, #60]	@ (800ef54 <__ieee754_rem_pio2+0x3f4>)
 800ef18:	9301      	str	r3, [sp, #4]
 800ef1a:	2302      	movs	r3, #2
 800ef1c:	9300      	str	r3, [sp, #0]
 800ef1e:	462a      	mov	r2, r5
 800ef20:	4653      	mov	r3, sl
 800ef22:	4621      	mov	r1, r4
 800ef24:	a806      	add	r0, sp, #24
 800ef26:	f000 f9b7 	bl	800f298 <__kernel_rem_pio2>
 800ef2a:	9b04      	ldr	r3, [sp, #16]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	4605      	mov	r5, r0
 800ef30:	f6bf ae53 	bge.w	800ebda <__ieee754_rem_pio2+0x7a>
 800ef34:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ef38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ef3c:	e9c4 2300 	strd	r2, r3, [r4]
 800ef40:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ef44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ef48:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ef4c:	e740      	b.n	800edd0 <__ieee754_rem_pio2+0x270>
 800ef4e:	bf00      	nop
 800ef50:	41700000 	.word	0x41700000
 800ef54:	08010198 	.word	0x08010198

0800ef58 <atan>:
 800ef58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef5c:	ec55 4b10 	vmov	r4, r5, d0
 800ef60:	4bbf      	ldr	r3, [pc, #764]	@ (800f260 <atan+0x308>)
 800ef62:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ef66:	429e      	cmp	r6, r3
 800ef68:	46ab      	mov	fp, r5
 800ef6a:	d918      	bls.n	800ef9e <atan+0x46>
 800ef6c:	4bbd      	ldr	r3, [pc, #756]	@ (800f264 <atan+0x30c>)
 800ef6e:	429e      	cmp	r6, r3
 800ef70:	d801      	bhi.n	800ef76 <atan+0x1e>
 800ef72:	d109      	bne.n	800ef88 <atan+0x30>
 800ef74:	b144      	cbz	r4, 800ef88 <atan+0x30>
 800ef76:	4622      	mov	r2, r4
 800ef78:	462b      	mov	r3, r5
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	4629      	mov	r1, r5
 800ef7e:	f7f1 f985 	bl	800028c <__adddf3>
 800ef82:	4604      	mov	r4, r0
 800ef84:	460d      	mov	r5, r1
 800ef86:	e006      	b.n	800ef96 <atan+0x3e>
 800ef88:	f1bb 0f00 	cmp.w	fp, #0
 800ef8c:	f340 812b 	ble.w	800f1e6 <atan+0x28e>
 800ef90:	a597      	add	r5, pc, #604	@ (adr r5, 800f1f0 <atan+0x298>)
 800ef92:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ef96:	ec45 4b10 	vmov	d0, r4, r5
 800ef9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef9e:	4bb2      	ldr	r3, [pc, #712]	@ (800f268 <atan+0x310>)
 800efa0:	429e      	cmp	r6, r3
 800efa2:	d813      	bhi.n	800efcc <atan+0x74>
 800efa4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800efa8:	429e      	cmp	r6, r3
 800efaa:	d80c      	bhi.n	800efc6 <atan+0x6e>
 800efac:	a392      	add	r3, pc, #584	@ (adr r3, 800f1f8 <atan+0x2a0>)
 800efae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb2:	4620      	mov	r0, r4
 800efb4:	4629      	mov	r1, r5
 800efb6:	f7f1 f969 	bl	800028c <__adddf3>
 800efba:	4bac      	ldr	r3, [pc, #688]	@ (800f26c <atan+0x314>)
 800efbc:	2200      	movs	r2, #0
 800efbe:	f7f1 fdab 	bl	8000b18 <__aeabi_dcmpgt>
 800efc2:	2800      	cmp	r0, #0
 800efc4:	d1e7      	bne.n	800ef96 <atan+0x3e>
 800efc6:	f04f 3aff 	mov.w	sl, #4294967295
 800efca:	e029      	b.n	800f020 <atan+0xc8>
 800efcc:	f000 f95c 	bl	800f288 <fabs>
 800efd0:	4ba7      	ldr	r3, [pc, #668]	@ (800f270 <atan+0x318>)
 800efd2:	429e      	cmp	r6, r3
 800efd4:	ec55 4b10 	vmov	r4, r5, d0
 800efd8:	f200 80bc 	bhi.w	800f154 <atan+0x1fc>
 800efdc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800efe0:	429e      	cmp	r6, r3
 800efe2:	f200 809e 	bhi.w	800f122 <atan+0x1ca>
 800efe6:	4622      	mov	r2, r4
 800efe8:	462b      	mov	r3, r5
 800efea:	4620      	mov	r0, r4
 800efec:	4629      	mov	r1, r5
 800efee:	f7f1 f94d 	bl	800028c <__adddf3>
 800eff2:	4b9e      	ldr	r3, [pc, #632]	@ (800f26c <atan+0x314>)
 800eff4:	2200      	movs	r2, #0
 800eff6:	f7f1 f947 	bl	8000288 <__aeabi_dsub>
 800effa:	2200      	movs	r2, #0
 800effc:	4606      	mov	r6, r0
 800effe:	460f      	mov	r7, r1
 800f000:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f004:	4620      	mov	r0, r4
 800f006:	4629      	mov	r1, r5
 800f008:	f7f1 f940 	bl	800028c <__adddf3>
 800f00c:	4602      	mov	r2, r0
 800f00e:	460b      	mov	r3, r1
 800f010:	4630      	mov	r0, r6
 800f012:	4639      	mov	r1, r7
 800f014:	f7f1 fc1a 	bl	800084c <__aeabi_ddiv>
 800f018:	f04f 0a00 	mov.w	sl, #0
 800f01c:	4604      	mov	r4, r0
 800f01e:	460d      	mov	r5, r1
 800f020:	4622      	mov	r2, r4
 800f022:	462b      	mov	r3, r5
 800f024:	4620      	mov	r0, r4
 800f026:	4629      	mov	r1, r5
 800f028:	f7f1 fae6 	bl	80005f8 <__aeabi_dmul>
 800f02c:	4602      	mov	r2, r0
 800f02e:	460b      	mov	r3, r1
 800f030:	4680      	mov	r8, r0
 800f032:	4689      	mov	r9, r1
 800f034:	f7f1 fae0 	bl	80005f8 <__aeabi_dmul>
 800f038:	a371      	add	r3, pc, #452	@ (adr r3, 800f200 <atan+0x2a8>)
 800f03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03e:	4606      	mov	r6, r0
 800f040:	460f      	mov	r7, r1
 800f042:	f7f1 fad9 	bl	80005f8 <__aeabi_dmul>
 800f046:	a370      	add	r3, pc, #448	@ (adr r3, 800f208 <atan+0x2b0>)
 800f048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04c:	f7f1 f91e 	bl	800028c <__adddf3>
 800f050:	4632      	mov	r2, r6
 800f052:	463b      	mov	r3, r7
 800f054:	f7f1 fad0 	bl	80005f8 <__aeabi_dmul>
 800f058:	a36d      	add	r3, pc, #436	@ (adr r3, 800f210 <atan+0x2b8>)
 800f05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05e:	f7f1 f915 	bl	800028c <__adddf3>
 800f062:	4632      	mov	r2, r6
 800f064:	463b      	mov	r3, r7
 800f066:	f7f1 fac7 	bl	80005f8 <__aeabi_dmul>
 800f06a:	a36b      	add	r3, pc, #428	@ (adr r3, 800f218 <atan+0x2c0>)
 800f06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f070:	f7f1 f90c 	bl	800028c <__adddf3>
 800f074:	4632      	mov	r2, r6
 800f076:	463b      	mov	r3, r7
 800f078:	f7f1 fabe 	bl	80005f8 <__aeabi_dmul>
 800f07c:	a368      	add	r3, pc, #416	@ (adr r3, 800f220 <atan+0x2c8>)
 800f07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f082:	f7f1 f903 	bl	800028c <__adddf3>
 800f086:	4632      	mov	r2, r6
 800f088:	463b      	mov	r3, r7
 800f08a:	f7f1 fab5 	bl	80005f8 <__aeabi_dmul>
 800f08e:	a366      	add	r3, pc, #408	@ (adr r3, 800f228 <atan+0x2d0>)
 800f090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f094:	f7f1 f8fa 	bl	800028c <__adddf3>
 800f098:	4642      	mov	r2, r8
 800f09a:	464b      	mov	r3, r9
 800f09c:	f7f1 faac 	bl	80005f8 <__aeabi_dmul>
 800f0a0:	a363      	add	r3, pc, #396	@ (adr r3, 800f230 <atan+0x2d8>)
 800f0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a6:	4680      	mov	r8, r0
 800f0a8:	4689      	mov	r9, r1
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	4639      	mov	r1, r7
 800f0ae:	f7f1 faa3 	bl	80005f8 <__aeabi_dmul>
 800f0b2:	a361      	add	r3, pc, #388	@ (adr r3, 800f238 <atan+0x2e0>)
 800f0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b8:	f7f1 f8e6 	bl	8000288 <__aeabi_dsub>
 800f0bc:	4632      	mov	r2, r6
 800f0be:	463b      	mov	r3, r7
 800f0c0:	f7f1 fa9a 	bl	80005f8 <__aeabi_dmul>
 800f0c4:	a35e      	add	r3, pc, #376	@ (adr r3, 800f240 <atan+0x2e8>)
 800f0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ca:	f7f1 f8dd 	bl	8000288 <__aeabi_dsub>
 800f0ce:	4632      	mov	r2, r6
 800f0d0:	463b      	mov	r3, r7
 800f0d2:	f7f1 fa91 	bl	80005f8 <__aeabi_dmul>
 800f0d6:	a35c      	add	r3, pc, #368	@ (adr r3, 800f248 <atan+0x2f0>)
 800f0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0dc:	f7f1 f8d4 	bl	8000288 <__aeabi_dsub>
 800f0e0:	4632      	mov	r2, r6
 800f0e2:	463b      	mov	r3, r7
 800f0e4:	f7f1 fa88 	bl	80005f8 <__aeabi_dmul>
 800f0e8:	a359      	add	r3, pc, #356	@ (adr r3, 800f250 <atan+0x2f8>)
 800f0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ee:	f7f1 f8cb 	bl	8000288 <__aeabi_dsub>
 800f0f2:	4632      	mov	r2, r6
 800f0f4:	463b      	mov	r3, r7
 800f0f6:	f7f1 fa7f 	bl	80005f8 <__aeabi_dmul>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	460b      	mov	r3, r1
 800f0fe:	4640      	mov	r0, r8
 800f100:	4649      	mov	r1, r9
 800f102:	f7f1 f8c3 	bl	800028c <__adddf3>
 800f106:	4622      	mov	r2, r4
 800f108:	462b      	mov	r3, r5
 800f10a:	f7f1 fa75 	bl	80005f8 <__aeabi_dmul>
 800f10e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f112:	4602      	mov	r2, r0
 800f114:	460b      	mov	r3, r1
 800f116:	d148      	bne.n	800f1aa <atan+0x252>
 800f118:	4620      	mov	r0, r4
 800f11a:	4629      	mov	r1, r5
 800f11c:	f7f1 f8b4 	bl	8000288 <__aeabi_dsub>
 800f120:	e72f      	b.n	800ef82 <atan+0x2a>
 800f122:	4b52      	ldr	r3, [pc, #328]	@ (800f26c <atan+0x314>)
 800f124:	2200      	movs	r2, #0
 800f126:	4620      	mov	r0, r4
 800f128:	4629      	mov	r1, r5
 800f12a:	f7f1 f8ad 	bl	8000288 <__aeabi_dsub>
 800f12e:	4b4f      	ldr	r3, [pc, #316]	@ (800f26c <atan+0x314>)
 800f130:	4606      	mov	r6, r0
 800f132:	460f      	mov	r7, r1
 800f134:	2200      	movs	r2, #0
 800f136:	4620      	mov	r0, r4
 800f138:	4629      	mov	r1, r5
 800f13a:	f7f1 f8a7 	bl	800028c <__adddf3>
 800f13e:	4602      	mov	r2, r0
 800f140:	460b      	mov	r3, r1
 800f142:	4630      	mov	r0, r6
 800f144:	4639      	mov	r1, r7
 800f146:	f7f1 fb81 	bl	800084c <__aeabi_ddiv>
 800f14a:	f04f 0a01 	mov.w	sl, #1
 800f14e:	4604      	mov	r4, r0
 800f150:	460d      	mov	r5, r1
 800f152:	e765      	b.n	800f020 <atan+0xc8>
 800f154:	4b47      	ldr	r3, [pc, #284]	@ (800f274 <atan+0x31c>)
 800f156:	429e      	cmp	r6, r3
 800f158:	d21c      	bcs.n	800f194 <atan+0x23c>
 800f15a:	4b47      	ldr	r3, [pc, #284]	@ (800f278 <atan+0x320>)
 800f15c:	2200      	movs	r2, #0
 800f15e:	4620      	mov	r0, r4
 800f160:	4629      	mov	r1, r5
 800f162:	f7f1 f891 	bl	8000288 <__aeabi_dsub>
 800f166:	4b44      	ldr	r3, [pc, #272]	@ (800f278 <atan+0x320>)
 800f168:	4606      	mov	r6, r0
 800f16a:	460f      	mov	r7, r1
 800f16c:	2200      	movs	r2, #0
 800f16e:	4620      	mov	r0, r4
 800f170:	4629      	mov	r1, r5
 800f172:	f7f1 fa41 	bl	80005f8 <__aeabi_dmul>
 800f176:	4b3d      	ldr	r3, [pc, #244]	@ (800f26c <atan+0x314>)
 800f178:	2200      	movs	r2, #0
 800f17a:	f7f1 f887 	bl	800028c <__adddf3>
 800f17e:	4602      	mov	r2, r0
 800f180:	460b      	mov	r3, r1
 800f182:	4630      	mov	r0, r6
 800f184:	4639      	mov	r1, r7
 800f186:	f7f1 fb61 	bl	800084c <__aeabi_ddiv>
 800f18a:	f04f 0a02 	mov.w	sl, #2
 800f18e:	4604      	mov	r4, r0
 800f190:	460d      	mov	r5, r1
 800f192:	e745      	b.n	800f020 <atan+0xc8>
 800f194:	4622      	mov	r2, r4
 800f196:	462b      	mov	r3, r5
 800f198:	4938      	ldr	r1, [pc, #224]	@ (800f27c <atan+0x324>)
 800f19a:	2000      	movs	r0, #0
 800f19c:	f7f1 fb56 	bl	800084c <__aeabi_ddiv>
 800f1a0:	f04f 0a03 	mov.w	sl, #3
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	460d      	mov	r5, r1
 800f1a8:	e73a      	b.n	800f020 <atan+0xc8>
 800f1aa:	4b35      	ldr	r3, [pc, #212]	@ (800f280 <atan+0x328>)
 800f1ac:	4e35      	ldr	r6, [pc, #212]	@ (800f284 <atan+0x32c>)
 800f1ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b6:	f7f1 f867 	bl	8000288 <__aeabi_dsub>
 800f1ba:	4622      	mov	r2, r4
 800f1bc:	462b      	mov	r3, r5
 800f1be:	f7f1 f863 	bl	8000288 <__aeabi_dsub>
 800f1c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f1ce:	f7f1 f85b 	bl	8000288 <__aeabi_dsub>
 800f1d2:	f1bb 0f00 	cmp.w	fp, #0
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	460d      	mov	r5, r1
 800f1da:	f6bf aedc 	bge.w	800ef96 <atan+0x3e>
 800f1de:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f1e2:	461d      	mov	r5, r3
 800f1e4:	e6d7      	b.n	800ef96 <atan+0x3e>
 800f1e6:	a51c      	add	r5, pc, #112	@ (adr r5, 800f258 <atan+0x300>)
 800f1e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f1ec:	e6d3      	b.n	800ef96 <atan+0x3e>
 800f1ee:	bf00      	nop
 800f1f0:	54442d18 	.word	0x54442d18
 800f1f4:	3ff921fb 	.word	0x3ff921fb
 800f1f8:	8800759c 	.word	0x8800759c
 800f1fc:	7e37e43c 	.word	0x7e37e43c
 800f200:	e322da11 	.word	0xe322da11
 800f204:	3f90ad3a 	.word	0x3f90ad3a
 800f208:	24760deb 	.word	0x24760deb
 800f20c:	3fa97b4b 	.word	0x3fa97b4b
 800f210:	a0d03d51 	.word	0xa0d03d51
 800f214:	3fb10d66 	.word	0x3fb10d66
 800f218:	c54c206e 	.word	0xc54c206e
 800f21c:	3fb745cd 	.word	0x3fb745cd
 800f220:	920083ff 	.word	0x920083ff
 800f224:	3fc24924 	.word	0x3fc24924
 800f228:	5555550d 	.word	0x5555550d
 800f22c:	3fd55555 	.word	0x3fd55555
 800f230:	2c6a6c2f 	.word	0x2c6a6c2f
 800f234:	bfa2b444 	.word	0xbfa2b444
 800f238:	52defd9a 	.word	0x52defd9a
 800f23c:	3fadde2d 	.word	0x3fadde2d
 800f240:	af749a6d 	.word	0xaf749a6d
 800f244:	3fb3b0f2 	.word	0x3fb3b0f2
 800f248:	fe231671 	.word	0xfe231671
 800f24c:	3fbc71c6 	.word	0x3fbc71c6
 800f250:	9998ebc4 	.word	0x9998ebc4
 800f254:	3fc99999 	.word	0x3fc99999
 800f258:	54442d18 	.word	0x54442d18
 800f25c:	bff921fb 	.word	0xbff921fb
 800f260:	440fffff 	.word	0x440fffff
 800f264:	7ff00000 	.word	0x7ff00000
 800f268:	3fdbffff 	.word	0x3fdbffff
 800f26c:	3ff00000 	.word	0x3ff00000
 800f270:	3ff2ffff 	.word	0x3ff2ffff
 800f274:	40038000 	.word	0x40038000
 800f278:	3ff80000 	.word	0x3ff80000
 800f27c:	bff00000 	.word	0xbff00000
 800f280:	080102a0 	.word	0x080102a0
 800f284:	080102c0 	.word	0x080102c0

0800f288 <fabs>:
 800f288:	ec51 0b10 	vmov	r0, r1, d0
 800f28c:	4602      	mov	r2, r0
 800f28e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f292:	ec43 2b10 	vmov	d0, r2, r3
 800f296:	4770      	bx	lr

0800f298 <__kernel_rem_pio2>:
 800f298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f29c:	ed2d 8b02 	vpush	{d8}
 800f2a0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f2a4:	f112 0f14 	cmn.w	r2, #20
 800f2a8:	9306      	str	r3, [sp, #24]
 800f2aa:	9104      	str	r1, [sp, #16]
 800f2ac:	4bbe      	ldr	r3, [pc, #760]	@ (800f5a8 <__kernel_rem_pio2+0x310>)
 800f2ae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800f2b0:	9008      	str	r0, [sp, #32]
 800f2b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	9b06      	ldr	r3, [sp, #24]
 800f2ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800f2be:	bfa8      	it	ge
 800f2c0:	1ed4      	subge	r4, r2, #3
 800f2c2:	9305      	str	r3, [sp, #20]
 800f2c4:	bfb2      	itee	lt
 800f2c6:	2400      	movlt	r4, #0
 800f2c8:	2318      	movge	r3, #24
 800f2ca:	fb94 f4f3 	sdivge	r4, r4, r3
 800f2ce:	f06f 0317 	mvn.w	r3, #23
 800f2d2:	fb04 3303 	mla	r3, r4, r3, r3
 800f2d6:	eb03 0b02 	add.w	fp, r3, r2
 800f2da:	9b00      	ldr	r3, [sp, #0]
 800f2dc:	9a05      	ldr	r2, [sp, #20]
 800f2de:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800f598 <__kernel_rem_pio2+0x300>
 800f2e2:	eb03 0802 	add.w	r8, r3, r2
 800f2e6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f2e8:	1aa7      	subs	r7, r4, r2
 800f2ea:	ae20      	add	r6, sp, #128	@ 0x80
 800f2ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f2f0:	2500      	movs	r5, #0
 800f2f2:	4545      	cmp	r5, r8
 800f2f4:	dd13      	ble.n	800f31e <__kernel_rem_pio2+0x86>
 800f2f6:	9b06      	ldr	r3, [sp, #24]
 800f2f8:	aa20      	add	r2, sp, #128	@ 0x80
 800f2fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f2fe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800f302:	f04f 0800 	mov.w	r8, #0
 800f306:	9b00      	ldr	r3, [sp, #0]
 800f308:	4598      	cmp	r8, r3
 800f30a:	dc31      	bgt.n	800f370 <__kernel_rem_pio2+0xd8>
 800f30c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800f598 <__kernel_rem_pio2+0x300>
 800f310:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f314:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f318:	462f      	mov	r7, r5
 800f31a:	2600      	movs	r6, #0
 800f31c:	e01b      	b.n	800f356 <__kernel_rem_pio2+0xbe>
 800f31e:	42ef      	cmn	r7, r5
 800f320:	d407      	bmi.n	800f332 <__kernel_rem_pio2+0x9a>
 800f322:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f326:	f7f1 f8fd 	bl	8000524 <__aeabi_i2d>
 800f32a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f32e:	3501      	adds	r5, #1
 800f330:	e7df      	b.n	800f2f2 <__kernel_rem_pio2+0x5a>
 800f332:	ec51 0b18 	vmov	r0, r1, d8
 800f336:	e7f8      	b.n	800f32a <__kernel_rem_pio2+0x92>
 800f338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f33c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f340:	f7f1 f95a 	bl	80005f8 <__aeabi_dmul>
 800f344:	4602      	mov	r2, r0
 800f346:	460b      	mov	r3, r1
 800f348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f34c:	f7f0 ff9e 	bl	800028c <__adddf3>
 800f350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f354:	3601      	adds	r6, #1
 800f356:	9b05      	ldr	r3, [sp, #20]
 800f358:	429e      	cmp	r6, r3
 800f35a:	f1a7 0708 	sub.w	r7, r7, #8
 800f35e:	ddeb      	ble.n	800f338 <__kernel_rem_pio2+0xa0>
 800f360:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f364:	f108 0801 	add.w	r8, r8, #1
 800f368:	ecaa 7b02 	vstmia	sl!, {d7}
 800f36c:	3508      	adds	r5, #8
 800f36e:	e7ca      	b.n	800f306 <__kernel_rem_pio2+0x6e>
 800f370:	9b00      	ldr	r3, [sp, #0]
 800f372:	f8dd 8000 	ldr.w	r8, [sp]
 800f376:	aa0c      	add	r2, sp, #48	@ 0x30
 800f378:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f37c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f37e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f380:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f384:	9309      	str	r3, [sp, #36]	@ 0x24
 800f386:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800f38a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f38c:	ab98      	add	r3, sp, #608	@ 0x260
 800f38e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f392:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800f396:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f39a:	ac0c      	add	r4, sp, #48	@ 0x30
 800f39c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f39e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800f3a2:	46a1      	mov	r9, r4
 800f3a4:	46c2      	mov	sl, r8
 800f3a6:	f1ba 0f00 	cmp.w	sl, #0
 800f3aa:	f1a5 0508 	sub.w	r5, r5, #8
 800f3ae:	dc77      	bgt.n	800f4a0 <__kernel_rem_pio2+0x208>
 800f3b0:	4658      	mov	r0, fp
 800f3b2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f3b6:	f000 fac7 	bl	800f948 <scalbn>
 800f3ba:	ec57 6b10 	vmov	r6, r7, d0
 800f3be:	2200      	movs	r2, #0
 800f3c0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	4639      	mov	r1, r7
 800f3c8:	f7f1 f916 	bl	80005f8 <__aeabi_dmul>
 800f3cc:	ec41 0b10 	vmov	d0, r0, r1
 800f3d0:	f000 fb3a 	bl	800fa48 <floor>
 800f3d4:	4b75      	ldr	r3, [pc, #468]	@ (800f5ac <__kernel_rem_pio2+0x314>)
 800f3d6:	ec51 0b10 	vmov	r0, r1, d0
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f7f1 f90c 	bl	80005f8 <__aeabi_dmul>
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	460b      	mov	r3, r1
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	4639      	mov	r1, r7
 800f3e8:	f7f0 ff4e 	bl	8000288 <__aeabi_dsub>
 800f3ec:	460f      	mov	r7, r1
 800f3ee:	4606      	mov	r6, r0
 800f3f0:	f7f1 fbb2 	bl	8000b58 <__aeabi_d2iz>
 800f3f4:	9002      	str	r0, [sp, #8]
 800f3f6:	f7f1 f895 	bl	8000524 <__aeabi_i2d>
 800f3fa:	4602      	mov	r2, r0
 800f3fc:	460b      	mov	r3, r1
 800f3fe:	4630      	mov	r0, r6
 800f400:	4639      	mov	r1, r7
 800f402:	f7f0 ff41 	bl	8000288 <__aeabi_dsub>
 800f406:	f1bb 0f00 	cmp.w	fp, #0
 800f40a:	4606      	mov	r6, r0
 800f40c:	460f      	mov	r7, r1
 800f40e:	dd6c      	ble.n	800f4ea <__kernel_rem_pio2+0x252>
 800f410:	f108 31ff 	add.w	r1, r8, #4294967295
 800f414:	ab0c      	add	r3, sp, #48	@ 0x30
 800f416:	9d02      	ldr	r5, [sp, #8]
 800f418:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f41c:	f1cb 0018 	rsb	r0, fp, #24
 800f420:	fa43 f200 	asr.w	r2, r3, r0
 800f424:	4415      	add	r5, r2
 800f426:	4082      	lsls	r2, r0
 800f428:	1a9b      	subs	r3, r3, r2
 800f42a:	aa0c      	add	r2, sp, #48	@ 0x30
 800f42c:	9502      	str	r5, [sp, #8]
 800f42e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f432:	f1cb 0217 	rsb	r2, fp, #23
 800f436:	fa43 f902 	asr.w	r9, r3, r2
 800f43a:	f1b9 0f00 	cmp.w	r9, #0
 800f43e:	dd64      	ble.n	800f50a <__kernel_rem_pio2+0x272>
 800f440:	9b02      	ldr	r3, [sp, #8]
 800f442:	2200      	movs	r2, #0
 800f444:	3301      	adds	r3, #1
 800f446:	9302      	str	r3, [sp, #8]
 800f448:	4615      	mov	r5, r2
 800f44a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800f44e:	4590      	cmp	r8, r2
 800f450:	f300 80b8 	bgt.w	800f5c4 <__kernel_rem_pio2+0x32c>
 800f454:	f1bb 0f00 	cmp.w	fp, #0
 800f458:	dd07      	ble.n	800f46a <__kernel_rem_pio2+0x1d2>
 800f45a:	f1bb 0f01 	cmp.w	fp, #1
 800f45e:	f000 80bf 	beq.w	800f5e0 <__kernel_rem_pio2+0x348>
 800f462:	f1bb 0f02 	cmp.w	fp, #2
 800f466:	f000 80c6 	beq.w	800f5f6 <__kernel_rem_pio2+0x35e>
 800f46a:	f1b9 0f02 	cmp.w	r9, #2
 800f46e:	d14c      	bne.n	800f50a <__kernel_rem_pio2+0x272>
 800f470:	4632      	mov	r2, r6
 800f472:	463b      	mov	r3, r7
 800f474:	494e      	ldr	r1, [pc, #312]	@ (800f5b0 <__kernel_rem_pio2+0x318>)
 800f476:	2000      	movs	r0, #0
 800f478:	f7f0 ff06 	bl	8000288 <__aeabi_dsub>
 800f47c:	4606      	mov	r6, r0
 800f47e:	460f      	mov	r7, r1
 800f480:	2d00      	cmp	r5, #0
 800f482:	d042      	beq.n	800f50a <__kernel_rem_pio2+0x272>
 800f484:	4658      	mov	r0, fp
 800f486:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800f5a0 <__kernel_rem_pio2+0x308>
 800f48a:	f000 fa5d 	bl	800f948 <scalbn>
 800f48e:	4630      	mov	r0, r6
 800f490:	4639      	mov	r1, r7
 800f492:	ec53 2b10 	vmov	r2, r3, d0
 800f496:	f7f0 fef7 	bl	8000288 <__aeabi_dsub>
 800f49a:	4606      	mov	r6, r0
 800f49c:	460f      	mov	r7, r1
 800f49e:	e034      	b.n	800f50a <__kernel_rem_pio2+0x272>
 800f4a0:	4b44      	ldr	r3, [pc, #272]	@ (800f5b4 <__kernel_rem_pio2+0x31c>)
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4a8:	f7f1 f8a6 	bl	80005f8 <__aeabi_dmul>
 800f4ac:	f7f1 fb54 	bl	8000b58 <__aeabi_d2iz>
 800f4b0:	f7f1 f838 	bl	8000524 <__aeabi_i2d>
 800f4b4:	4b40      	ldr	r3, [pc, #256]	@ (800f5b8 <__kernel_rem_pio2+0x320>)
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	4606      	mov	r6, r0
 800f4ba:	460f      	mov	r7, r1
 800f4bc:	f7f1 f89c 	bl	80005f8 <__aeabi_dmul>
 800f4c0:	4602      	mov	r2, r0
 800f4c2:	460b      	mov	r3, r1
 800f4c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4c8:	f7f0 fede 	bl	8000288 <__aeabi_dsub>
 800f4cc:	f7f1 fb44 	bl	8000b58 <__aeabi_d2iz>
 800f4d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f4d4:	f849 0b04 	str.w	r0, [r9], #4
 800f4d8:	4639      	mov	r1, r7
 800f4da:	4630      	mov	r0, r6
 800f4dc:	f7f0 fed6 	bl	800028c <__adddf3>
 800f4e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f4e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4e8:	e75d      	b.n	800f3a6 <__kernel_rem_pio2+0x10e>
 800f4ea:	d107      	bne.n	800f4fc <__kernel_rem_pio2+0x264>
 800f4ec:	f108 33ff 	add.w	r3, r8, #4294967295
 800f4f0:	aa0c      	add	r2, sp, #48	@ 0x30
 800f4f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4f6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800f4fa:	e79e      	b.n	800f43a <__kernel_rem_pio2+0x1a2>
 800f4fc:	4b2f      	ldr	r3, [pc, #188]	@ (800f5bc <__kernel_rem_pio2+0x324>)
 800f4fe:	2200      	movs	r2, #0
 800f500:	f7f1 fb00 	bl	8000b04 <__aeabi_dcmpge>
 800f504:	2800      	cmp	r0, #0
 800f506:	d143      	bne.n	800f590 <__kernel_rem_pio2+0x2f8>
 800f508:	4681      	mov	r9, r0
 800f50a:	2200      	movs	r2, #0
 800f50c:	2300      	movs	r3, #0
 800f50e:	4630      	mov	r0, r6
 800f510:	4639      	mov	r1, r7
 800f512:	f7f1 fad9 	bl	8000ac8 <__aeabi_dcmpeq>
 800f516:	2800      	cmp	r0, #0
 800f518:	f000 80bf 	beq.w	800f69a <__kernel_rem_pio2+0x402>
 800f51c:	f108 33ff 	add.w	r3, r8, #4294967295
 800f520:	2200      	movs	r2, #0
 800f522:	9900      	ldr	r1, [sp, #0]
 800f524:	428b      	cmp	r3, r1
 800f526:	da6e      	bge.n	800f606 <__kernel_rem_pio2+0x36e>
 800f528:	2a00      	cmp	r2, #0
 800f52a:	f000 8089 	beq.w	800f640 <__kernel_rem_pio2+0x3a8>
 800f52e:	f108 38ff 	add.w	r8, r8, #4294967295
 800f532:	ab0c      	add	r3, sp, #48	@ 0x30
 800f534:	f1ab 0b18 	sub.w	fp, fp, #24
 800f538:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d0f6      	beq.n	800f52e <__kernel_rem_pio2+0x296>
 800f540:	4658      	mov	r0, fp
 800f542:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800f5a0 <__kernel_rem_pio2+0x308>
 800f546:	f000 f9ff 	bl	800f948 <scalbn>
 800f54a:	f108 0301 	add.w	r3, r8, #1
 800f54e:	00da      	lsls	r2, r3, #3
 800f550:	9205      	str	r2, [sp, #20]
 800f552:	ec55 4b10 	vmov	r4, r5, d0
 800f556:	aa70      	add	r2, sp, #448	@ 0x1c0
 800f558:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800f5b4 <__kernel_rem_pio2+0x31c>
 800f55c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800f560:	4646      	mov	r6, r8
 800f562:	f04f 0a00 	mov.w	sl, #0
 800f566:	2e00      	cmp	r6, #0
 800f568:	f280 80cf 	bge.w	800f70a <__kernel_rem_pio2+0x472>
 800f56c:	4644      	mov	r4, r8
 800f56e:	2c00      	cmp	r4, #0
 800f570:	f2c0 80fd 	blt.w	800f76e <__kernel_rem_pio2+0x4d6>
 800f574:	4b12      	ldr	r3, [pc, #72]	@ (800f5c0 <__kernel_rem_pio2+0x328>)
 800f576:	461f      	mov	r7, r3
 800f578:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f57a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f57e:	9306      	str	r3, [sp, #24]
 800f580:	f04f 0a00 	mov.w	sl, #0
 800f584:	f04f 0b00 	mov.w	fp, #0
 800f588:	2600      	movs	r6, #0
 800f58a:	eba8 0504 	sub.w	r5, r8, r4
 800f58e:	e0e2      	b.n	800f756 <__kernel_rem_pio2+0x4be>
 800f590:	f04f 0902 	mov.w	r9, #2
 800f594:	e754      	b.n	800f440 <__kernel_rem_pio2+0x1a8>
 800f596:	bf00      	nop
	...
 800f5a4:	3ff00000 	.word	0x3ff00000
 800f5a8:	08010320 	.word	0x08010320
 800f5ac:	40200000 	.word	0x40200000
 800f5b0:	3ff00000 	.word	0x3ff00000
 800f5b4:	3e700000 	.word	0x3e700000
 800f5b8:	41700000 	.word	0x41700000
 800f5bc:	3fe00000 	.word	0x3fe00000
 800f5c0:	080102e0 	.word	0x080102e0
 800f5c4:	f854 3b04 	ldr.w	r3, [r4], #4
 800f5c8:	b945      	cbnz	r5, 800f5dc <__kernel_rem_pio2+0x344>
 800f5ca:	b123      	cbz	r3, 800f5d6 <__kernel_rem_pio2+0x33e>
 800f5cc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800f5d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	3201      	adds	r2, #1
 800f5d8:	461d      	mov	r5, r3
 800f5da:	e738      	b.n	800f44e <__kernel_rem_pio2+0x1b6>
 800f5dc:	1acb      	subs	r3, r1, r3
 800f5de:	e7f7      	b.n	800f5d0 <__kernel_rem_pio2+0x338>
 800f5e0:	f108 32ff 	add.w	r2, r8, #4294967295
 800f5e4:	ab0c      	add	r3, sp, #48	@ 0x30
 800f5e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f5ee:	a90c      	add	r1, sp, #48	@ 0x30
 800f5f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f5f4:	e739      	b.n	800f46a <__kernel_rem_pio2+0x1d2>
 800f5f6:	f108 32ff 	add.w	r2, r8, #4294967295
 800f5fa:	ab0c      	add	r3, sp, #48	@ 0x30
 800f5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f600:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f604:	e7f3      	b.n	800f5ee <__kernel_rem_pio2+0x356>
 800f606:	a90c      	add	r1, sp, #48	@ 0x30
 800f608:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f60c:	3b01      	subs	r3, #1
 800f60e:	430a      	orrs	r2, r1
 800f610:	e787      	b.n	800f522 <__kernel_rem_pio2+0x28a>
 800f612:	3401      	adds	r4, #1
 800f614:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f618:	2a00      	cmp	r2, #0
 800f61a:	d0fa      	beq.n	800f612 <__kernel_rem_pio2+0x37a>
 800f61c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f61e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f622:	eb0d 0503 	add.w	r5, sp, r3
 800f626:	9b06      	ldr	r3, [sp, #24]
 800f628:	aa20      	add	r2, sp, #128	@ 0x80
 800f62a:	4443      	add	r3, r8
 800f62c:	f108 0701 	add.w	r7, r8, #1
 800f630:	3d98      	subs	r5, #152	@ 0x98
 800f632:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800f636:	4444      	add	r4, r8
 800f638:	42bc      	cmp	r4, r7
 800f63a:	da04      	bge.n	800f646 <__kernel_rem_pio2+0x3ae>
 800f63c:	46a0      	mov	r8, r4
 800f63e:	e6a2      	b.n	800f386 <__kernel_rem_pio2+0xee>
 800f640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f642:	2401      	movs	r4, #1
 800f644:	e7e6      	b.n	800f614 <__kernel_rem_pio2+0x37c>
 800f646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f648:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f64c:	f7f0 ff6a 	bl	8000524 <__aeabi_i2d>
 800f650:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800f918 <__kernel_rem_pio2+0x680>
 800f654:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f658:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f65c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f660:	46b2      	mov	sl, r6
 800f662:	f04f 0800 	mov.w	r8, #0
 800f666:	9b05      	ldr	r3, [sp, #20]
 800f668:	4598      	cmp	r8, r3
 800f66a:	dd05      	ble.n	800f678 <__kernel_rem_pio2+0x3e0>
 800f66c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f670:	3701      	adds	r7, #1
 800f672:	eca5 7b02 	vstmia	r5!, {d7}
 800f676:	e7df      	b.n	800f638 <__kernel_rem_pio2+0x3a0>
 800f678:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800f67c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f680:	f7f0 ffba 	bl	80005f8 <__aeabi_dmul>
 800f684:	4602      	mov	r2, r0
 800f686:	460b      	mov	r3, r1
 800f688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f68c:	f7f0 fdfe 	bl	800028c <__adddf3>
 800f690:	f108 0801 	add.w	r8, r8, #1
 800f694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f698:	e7e5      	b.n	800f666 <__kernel_rem_pio2+0x3ce>
 800f69a:	f1cb 0000 	rsb	r0, fp, #0
 800f69e:	ec47 6b10 	vmov	d0, r6, r7
 800f6a2:	f000 f951 	bl	800f948 <scalbn>
 800f6a6:	ec55 4b10 	vmov	r4, r5, d0
 800f6aa:	4b9d      	ldr	r3, [pc, #628]	@ (800f920 <__kernel_rem_pio2+0x688>)
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	4629      	mov	r1, r5
 800f6b2:	f7f1 fa27 	bl	8000b04 <__aeabi_dcmpge>
 800f6b6:	b300      	cbz	r0, 800f6fa <__kernel_rem_pio2+0x462>
 800f6b8:	4b9a      	ldr	r3, [pc, #616]	@ (800f924 <__kernel_rem_pio2+0x68c>)
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	4620      	mov	r0, r4
 800f6be:	4629      	mov	r1, r5
 800f6c0:	f7f0 ff9a 	bl	80005f8 <__aeabi_dmul>
 800f6c4:	f7f1 fa48 	bl	8000b58 <__aeabi_d2iz>
 800f6c8:	4606      	mov	r6, r0
 800f6ca:	f7f0 ff2b 	bl	8000524 <__aeabi_i2d>
 800f6ce:	4b94      	ldr	r3, [pc, #592]	@ (800f920 <__kernel_rem_pio2+0x688>)
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	f7f0 ff91 	bl	80005f8 <__aeabi_dmul>
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	4602      	mov	r2, r0
 800f6da:	4629      	mov	r1, r5
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f7f0 fdd3 	bl	8000288 <__aeabi_dsub>
 800f6e2:	f7f1 fa39 	bl	8000b58 <__aeabi_d2iz>
 800f6e6:	ab0c      	add	r3, sp, #48	@ 0x30
 800f6e8:	f10b 0b18 	add.w	fp, fp, #24
 800f6ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f6f0:	f108 0801 	add.w	r8, r8, #1
 800f6f4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f6f8:	e722      	b.n	800f540 <__kernel_rem_pio2+0x2a8>
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	4629      	mov	r1, r5
 800f6fe:	f7f1 fa2b 	bl	8000b58 <__aeabi_d2iz>
 800f702:	ab0c      	add	r3, sp, #48	@ 0x30
 800f704:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f708:	e71a      	b.n	800f540 <__kernel_rem_pio2+0x2a8>
 800f70a:	ab0c      	add	r3, sp, #48	@ 0x30
 800f70c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f710:	f7f0 ff08 	bl	8000524 <__aeabi_i2d>
 800f714:	4622      	mov	r2, r4
 800f716:	462b      	mov	r3, r5
 800f718:	f7f0 ff6e 	bl	80005f8 <__aeabi_dmul>
 800f71c:	4652      	mov	r2, sl
 800f71e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800f722:	465b      	mov	r3, fp
 800f724:	4620      	mov	r0, r4
 800f726:	4629      	mov	r1, r5
 800f728:	f7f0 ff66 	bl	80005f8 <__aeabi_dmul>
 800f72c:	3e01      	subs	r6, #1
 800f72e:	4604      	mov	r4, r0
 800f730:	460d      	mov	r5, r1
 800f732:	e718      	b.n	800f566 <__kernel_rem_pio2+0x2ce>
 800f734:	9906      	ldr	r1, [sp, #24]
 800f736:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800f73a:	9106      	str	r1, [sp, #24]
 800f73c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800f740:	f7f0 ff5a 	bl	80005f8 <__aeabi_dmul>
 800f744:	4602      	mov	r2, r0
 800f746:	460b      	mov	r3, r1
 800f748:	4650      	mov	r0, sl
 800f74a:	4659      	mov	r1, fp
 800f74c:	f7f0 fd9e 	bl	800028c <__adddf3>
 800f750:	3601      	adds	r6, #1
 800f752:	4682      	mov	sl, r0
 800f754:	468b      	mov	fp, r1
 800f756:	9b00      	ldr	r3, [sp, #0]
 800f758:	429e      	cmp	r6, r3
 800f75a:	dc01      	bgt.n	800f760 <__kernel_rem_pio2+0x4c8>
 800f75c:	42b5      	cmp	r5, r6
 800f75e:	dae9      	bge.n	800f734 <__kernel_rem_pio2+0x49c>
 800f760:	ab48      	add	r3, sp, #288	@ 0x120
 800f762:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f766:	e9c5 ab00 	strd	sl, fp, [r5]
 800f76a:	3c01      	subs	r4, #1
 800f76c:	e6ff      	b.n	800f56e <__kernel_rem_pio2+0x2d6>
 800f76e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f770:	2b02      	cmp	r3, #2
 800f772:	dc0b      	bgt.n	800f78c <__kernel_rem_pio2+0x4f4>
 800f774:	2b00      	cmp	r3, #0
 800f776:	dc39      	bgt.n	800f7ec <__kernel_rem_pio2+0x554>
 800f778:	d05d      	beq.n	800f836 <__kernel_rem_pio2+0x59e>
 800f77a:	9b02      	ldr	r3, [sp, #8]
 800f77c:	f003 0007 	and.w	r0, r3, #7
 800f780:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f784:	ecbd 8b02 	vpop	{d8}
 800f788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f78c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f78e:	2b03      	cmp	r3, #3
 800f790:	d1f3      	bne.n	800f77a <__kernel_rem_pio2+0x4e2>
 800f792:	9b05      	ldr	r3, [sp, #20]
 800f794:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f798:	eb0d 0403 	add.w	r4, sp, r3
 800f79c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800f7a0:	4625      	mov	r5, r4
 800f7a2:	46c2      	mov	sl, r8
 800f7a4:	f1ba 0f00 	cmp.w	sl, #0
 800f7a8:	f1a5 0508 	sub.w	r5, r5, #8
 800f7ac:	dc6b      	bgt.n	800f886 <__kernel_rem_pio2+0x5ee>
 800f7ae:	4645      	mov	r5, r8
 800f7b0:	2d01      	cmp	r5, #1
 800f7b2:	f1a4 0408 	sub.w	r4, r4, #8
 800f7b6:	f300 8087 	bgt.w	800f8c8 <__kernel_rem_pio2+0x630>
 800f7ba:	9c05      	ldr	r4, [sp, #20]
 800f7bc:	ab48      	add	r3, sp, #288	@ 0x120
 800f7be:	441c      	add	r4, r3
 800f7c0:	2000      	movs	r0, #0
 800f7c2:	2100      	movs	r1, #0
 800f7c4:	f1b8 0f01 	cmp.w	r8, #1
 800f7c8:	f300 809c 	bgt.w	800f904 <__kernel_rem_pio2+0x66c>
 800f7cc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800f7d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800f7d4:	f1b9 0f00 	cmp.w	r9, #0
 800f7d8:	f040 80a6 	bne.w	800f928 <__kernel_rem_pio2+0x690>
 800f7dc:	9b04      	ldr	r3, [sp, #16]
 800f7de:	e9c3 7800 	strd	r7, r8, [r3]
 800f7e2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f7e6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f7ea:	e7c6      	b.n	800f77a <__kernel_rem_pio2+0x4e2>
 800f7ec:	9d05      	ldr	r5, [sp, #20]
 800f7ee:	ab48      	add	r3, sp, #288	@ 0x120
 800f7f0:	441d      	add	r5, r3
 800f7f2:	4644      	mov	r4, r8
 800f7f4:	2000      	movs	r0, #0
 800f7f6:	2100      	movs	r1, #0
 800f7f8:	2c00      	cmp	r4, #0
 800f7fa:	da35      	bge.n	800f868 <__kernel_rem_pio2+0x5d0>
 800f7fc:	f1b9 0f00 	cmp.w	r9, #0
 800f800:	d038      	beq.n	800f874 <__kernel_rem_pio2+0x5dc>
 800f802:	4602      	mov	r2, r0
 800f804:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f808:	9c04      	ldr	r4, [sp, #16]
 800f80a:	e9c4 2300 	strd	r2, r3, [r4]
 800f80e:	4602      	mov	r2, r0
 800f810:	460b      	mov	r3, r1
 800f812:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800f816:	f7f0 fd37 	bl	8000288 <__aeabi_dsub>
 800f81a:	ad4a      	add	r5, sp, #296	@ 0x128
 800f81c:	2401      	movs	r4, #1
 800f81e:	45a0      	cmp	r8, r4
 800f820:	da2b      	bge.n	800f87a <__kernel_rem_pio2+0x5e2>
 800f822:	f1b9 0f00 	cmp.w	r9, #0
 800f826:	d002      	beq.n	800f82e <__kernel_rem_pio2+0x596>
 800f828:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f82c:	4619      	mov	r1, r3
 800f82e:	9b04      	ldr	r3, [sp, #16]
 800f830:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f834:	e7a1      	b.n	800f77a <__kernel_rem_pio2+0x4e2>
 800f836:	9c05      	ldr	r4, [sp, #20]
 800f838:	ab48      	add	r3, sp, #288	@ 0x120
 800f83a:	441c      	add	r4, r3
 800f83c:	2000      	movs	r0, #0
 800f83e:	2100      	movs	r1, #0
 800f840:	f1b8 0f00 	cmp.w	r8, #0
 800f844:	da09      	bge.n	800f85a <__kernel_rem_pio2+0x5c2>
 800f846:	f1b9 0f00 	cmp.w	r9, #0
 800f84a:	d002      	beq.n	800f852 <__kernel_rem_pio2+0x5ba>
 800f84c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f850:	4619      	mov	r1, r3
 800f852:	9b04      	ldr	r3, [sp, #16]
 800f854:	e9c3 0100 	strd	r0, r1, [r3]
 800f858:	e78f      	b.n	800f77a <__kernel_rem_pio2+0x4e2>
 800f85a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f85e:	f7f0 fd15 	bl	800028c <__adddf3>
 800f862:	f108 38ff 	add.w	r8, r8, #4294967295
 800f866:	e7eb      	b.n	800f840 <__kernel_rem_pio2+0x5a8>
 800f868:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800f86c:	f7f0 fd0e 	bl	800028c <__adddf3>
 800f870:	3c01      	subs	r4, #1
 800f872:	e7c1      	b.n	800f7f8 <__kernel_rem_pio2+0x560>
 800f874:	4602      	mov	r2, r0
 800f876:	460b      	mov	r3, r1
 800f878:	e7c6      	b.n	800f808 <__kernel_rem_pio2+0x570>
 800f87a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f87e:	f7f0 fd05 	bl	800028c <__adddf3>
 800f882:	3401      	adds	r4, #1
 800f884:	e7cb      	b.n	800f81e <__kernel_rem_pio2+0x586>
 800f886:	ed95 7b00 	vldr	d7, [r5]
 800f88a:	ed8d 7b00 	vstr	d7, [sp]
 800f88e:	ed95 7b02 	vldr	d7, [r5, #8]
 800f892:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f896:	ec53 2b17 	vmov	r2, r3, d7
 800f89a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f89e:	f7f0 fcf5 	bl	800028c <__adddf3>
 800f8a2:	4602      	mov	r2, r0
 800f8a4:	460b      	mov	r3, r1
 800f8a6:	4606      	mov	r6, r0
 800f8a8:	460f      	mov	r7, r1
 800f8aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8ae:	f7f0 fceb 	bl	8000288 <__aeabi_dsub>
 800f8b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f8b6:	f7f0 fce9 	bl	800028c <__adddf3>
 800f8ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8be:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800f8c2:	e9c5 6700 	strd	r6, r7, [r5]
 800f8c6:	e76d      	b.n	800f7a4 <__kernel_rem_pio2+0x50c>
 800f8c8:	ed94 7b00 	vldr	d7, [r4]
 800f8cc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800f8d0:	ec51 0b17 	vmov	r0, r1, d7
 800f8d4:	4652      	mov	r2, sl
 800f8d6:	465b      	mov	r3, fp
 800f8d8:	ed8d 7b00 	vstr	d7, [sp]
 800f8dc:	f7f0 fcd6 	bl	800028c <__adddf3>
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	460b      	mov	r3, r1
 800f8e4:	4606      	mov	r6, r0
 800f8e6:	460f      	mov	r7, r1
 800f8e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8ec:	f7f0 fccc 	bl	8000288 <__aeabi_dsub>
 800f8f0:	4652      	mov	r2, sl
 800f8f2:	465b      	mov	r3, fp
 800f8f4:	f7f0 fcca 	bl	800028c <__adddf3>
 800f8f8:	3d01      	subs	r5, #1
 800f8fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f8fe:	e9c4 6700 	strd	r6, r7, [r4]
 800f902:	e755      	b.n	800f7b0 <__kernel_rem_pio2+0x518>
 800f904:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f908:	f7f0 fcc0 	bl	800028c <__adddf3>
 800f90c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f910:	e758      	b.n	800f7c4 <__kernel_rem_pio2+0x52c>
 800f912:	bf00      	nop
 800f914:	f3af 8000 	nop.w
	...
 800f920:	41700000 	.word	0x41700000
 800f924:	3e700000 	.word	0x3e700000
 800f928:	9b04      	ldr	r3, [sp, #16]
 800f92a:	9a04      	ldr	r2, [sp, #16]
 800f92c:	601f      	str	r7, [r3, #0]
 800f92e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800f932:	605c      	str	r4, [r3, #4]
 800f934:	609d      	str	r5, [r3, #8]
 800f936:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f93a:	60d3      	str	r3, [r2, #12]
 800f93c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f940:	6110      	str	r0, [r2, #16]
 800f942:	6153      	str	r3, [r2, #20]
 800f944:	e719      	b.n	800f77a <__kernel_rem_pio2+0x4e2>
 800f946:	bf00      	nop

0800f948 <scalbn>:
 800f948:	b570      	push	{r4, r5, r6, lr}
 800f94a:	ec55 4b10 	vmov	r4, r5, d0
 800f94e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f952:	4606      	mov	r6, r0
 800f954:	462b      	mov	r3, r5
 800f956:	b991      	cbnz	r1, 800f97e <scalbn+0x36>
 800f958:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f95c:	4323      	orrs	r3, r4
 800f95e:	d03d      	beq.n	800f9dc <scalbn+0x94>
 800f960:	4b35      	ldr	r3, [pc, #212]	@ (800fa38 <scalbn+0xf0>)
 800f962:	4620      	mov	r0, r4
 800f964:	4629      	mov	r1, r5
 800f966:	2200      	movs	r2, #0
 800f968:	f7f0 fe46 	bl	80005f8 <__aeabi_dmul>
 800f96c:	4b33      	ldr	r3, [pc, #204]	@ (800fa3c <scalbn+0xf4>)
 800f96e:	429e      	cmp	r6, r3
 800f970:	4604      	mov	r4, r0
 800f972:	460d      	mov	r5, r1
 800f974:	da0f      	bge.n	800f996 <scalbn+0x4e>
 800f976:	a328      	add	r3, pc, #160	@ (adr r3, 800fa18 <scalbn+0xd0>)
 800f978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97c:	e01e      	b.n	800f9bc <scalbn+0x74>
 800f97e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f982:	4291      	cmp	r1, r2
 800f984:	d10b      	bne.n	800f99e <scalbn+0x56>
 800f986:	4622      	mov	r2, r4
 800f988:	4620      	mov	r0, r4
 800f98a:	4629      	mov	r1, r5
 800f98c:	f7f0 fc7e 	bl	800028c <__adddf3>
 800f990:	4604      	mov	r4, r0
 800f992:	460d      	mov	r5, r1
 800f994:	e022      	b.n	800f9dc <scalbn+0x94>
 800f996:	460b      	mov	r3, r1
 800f998:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f99c:	3936      	subs	r1, #54	@ 0x36
 800f99e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f9a2:	4296      	cmp	r6, r2
 800f9a4:	dd0d      	ble.n	800f9c2 <scalbn+0x7a>
 800f9a6:	2d00      	cmp	r5, #0
 800f9a8:	a11d      	add	r1, pc, #116	@ (adr r1, 800fa20 <scalbn+0xd8>)
 800f9aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9ae:	da02      	bge.n	800f9b6 <scalbn+0x6e>
 800f9b0:	a11d      	add	r1, pc, #116	@ (adr r1, 800fa28 <scalbn+0xe0>)
 800f9b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9b6:	a31a      	add	r3, pc, #104	@ (adr r3, 800fa20 <scalbn+0xd8>)
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	f7f0 fe1c 	bl	80005f8 <__aeabi_dmul>
 800f9c0:	e7e6      	b.n	800f990 <scalbn+0x48>
 800f9c2:	1872      	adds	r2, r6, r1
 800f9c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f9c8:	428a      	cmp	r2, r1
 800f9ca:	dcec      	bgt.n	800f9a6 <scalbn+0x5e>
 800f9cc:	2a00      	cmp	r2, #0
 800f9ce:	dd08      	ble.n	800f9e2 <scalbn+0x9a>
 800f9d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f9d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f9d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f9dc:	ec45 4b10 	vmov	d0, r4, r5
 800f9e0:	bd70      	pop	{r4, r5, r6, pc}
 800f9e2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f9e6:	da08      	bge.n	800f9fa <scalbn+0xb2>
 800f9e8:	2d00      	cmp	r5, #0
 800f9ea:	a10b      	add	r1, pc, #44	@ (adr r1, 800fa18 <scalbn+0xd0>)
 800f9ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9f0:	dac1      	bge.n	800f976 <scalbn+0x2e>
 800f9f2:	a10f      	add	r1, pc, #60	@ (adr r1, 800fa30 <scalbn+0xe8>)
 800f9f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9f8:	e7bd      	b.n	800f976 <scalbn+0x2e>
 800f9fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f9fe:	3236      	adds	r2, #54	@ 0x36
 800fa00:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fa04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fa08:	4620      	mov	r0, r4
 800fa0a:	4b0d      	ldr	r3, [pc, #52]	@ (800fa40 <scalbn+0xf8>)
 800fa0c:	4629      	mov	r1, r5
 800fa0e:	2200      	movs	r2, #0
 800fa10:	e7d4      	b.n	800f9bc <scalbn+0x74>
 800fa12:	bf00      	nop
 800fa14:	f3af 8000 	nop.w
 800fa18:	c2f8f359 	.word	0xc2f8f359
 800fa1c:	01a56e1f 	.word	0x01a56e1f
 800fa20:	8800759c 	.word	0x8800759c
 800fa24:	7e37e43c 	.word	0x7e37e43c
 800fa28:	8800759c 	.word	0x8800759c
 800fa2c:	fe37e43c 	.word	0xfe37e43c
 800fa30:	c2f8f359 	.word	0xc2f8f359
 800fa34:	81a56e1f 	.word	0x81a56e1f
 800fa38:	43500000 	.word	0x43500000
 800fa3c:	ffff3cb0 	.word	0xffff3cb0
 800fa40:	3c900000 	.word	0x3c900000
 800fa44:	00000000 	.word	0x00000000

0800fa48 <floor>:
 800fa48:	ec51 0b10 	vmov	r0, r1, d0
 800fa4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fa50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa54:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800fa58:	2e13      	cmp	r6, #19
 800fa5a:	460c      	mov	r4, r1
 800fa5c:	4605      	mov	r5, r0
 800fa5e:	4680      	mov	r8, r0
 800fa60:	dc34      	bgt.n	800facc <floor+0x84>
 800fa62:	2e00      	cmp	r6, #0
 800fa64:	da17      	bge.n	800fa96 <floor+0x4e>
 800fa66:	a332      	add	r3, pc, #200	@ (adr r3, 800fb30 <floor+0xe8>)
 800fa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6c:	f7f0 fc0e 	bl	800028c <__adddf3>
 800fa70:	2200      	movs	r2, #0
 800fa72:	2300      	movs	r3, #0
 800fa74:	f7f1 f850 	bl	8000b18 <__aeabi_dcmpgt>
 800fa78:	b150      	cbz	r0, 800fa90 <floor+0x48>
 800fa7a:	2c00      	cmp	r4, #0
 800fa7c:	da55      	bge.n	800fb2a <floor+0xe2>
 800fa7e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800fa82:	432c      	orrs	r4, r5
 800fa84:	2500      	movs	r5, #0
 800fa86:	42ac      	cmp	r4, r5
 800fa88:	4c2b      	ldr	r4, [pc, #172]	@ (800fb38 <floor+0xf0>)
 800fa8a:	bf08      	it	eq
 800fa8c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800fa90:	4621      	mov	r1, r4
 800fa92:	4628      	mov	r0, r5
 800fa94:	e023      	b.n	800fade <floor+0x96>
 800fa96:	4f29      	ldr	r7, [pc, #164]	@ (800fb3c <floor+0xf4>)
 800fa98:	4137      	asrs	r7, r6
 800fa9a:	ea01 0307 	and.w	r3, r1, r7
 800fa9e:	4303      	orrs	r3, r0
 800faa0:	d01d      	beq.n	800fade <floor+0x96>
 800faa2:	a323      	add	r3, pc, #140	@ (adr r3, 800fb30 <floor+0xe8>)
 800faa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa8:	f7f0 fbf0 	bl	800028c <__adddf3>
 800faac:	2200      	movs	r2, #0
 800faae:	2300      	movs	r3, #0
 800fab0:	f7f1 f832 	bl	8000b18 <__aeabi_dcmpgt>
 800fab4:	2800      	cmp	r0, #0
 800fab6:	d0eb      	beq.n	800fa90 <floor+0x48>
 800fab8:	2c00      	cmp	r4, #0
 800faba:	bfbe      	ittt	lt
 800fabc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800fac0:	4133      	asrlt	r3, r6
 800fac2:	18e4      	addlt	r4, r4, r3
 800fac4:	ea24 0407 	bic.w	r4, r4, r7
 800fac8:	2500      	movs	r5, #0
 800faca:	e7e1      	b.n	800fa90 <floor+0x48>
 800facc:	2e33      	cmp	r6, #51	@ 0x33
 800face:	dd0a      	ble.n	800fae6 <floor+0x9e>
 800fad0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800fad4:	d103      	bne.n	800fade <floor+0x96>
 800fad6:	4602      	mov	r2, r0
 800fad8:	460b      	mov	r3, r1
 800fada:	f7f0 fbd7 	bl	800028c <__adddf3>
 800fade:	ec41 0b10 	vmov	d0, r0, r1
 800fae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fae6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800faea:	f04f 37ff 	mov.w	r7, #4294967295
 800faee:	40df      	lsrs	r7, r3
 800faf0:	4207      	tst	r7, r0
 800faf2:	d0f4      	beq.n	800fade <floor+0x96>
 800faf4:	a30e      	add	r3, pc, #56	@ (adr r3, 800fb30 <floor+0xe8>)
 800faf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafa:	f7f0 fbc7 	bl	800028c <__adddf3>
 800fafe:	2200      	movs	r2, #0
 800fb00:	2300      	movs	r3, #0
 800fb02:	f7f1 f809 	bl	8000b18 <__aeabi_dcmpgt>
 800fb06:	2800      	cmp	r0, #0
 800fb08:	d0c2      	beq.n	800fa90 <floor+0x48>
 800fb0a:	2c00      	cmp	r4, #0
 800fb0c:	da0a      	bge.n	800fb24 <floor+0xdc>
 800fb0e:	2e14      	cmp	r6, #20
 800fb10:	d101      	bne.n	800fb16 <floor+0xce>
 800fb12:	3401      	adds	r4, #1
 800fb14:	e006      	b.n	800fb24 <floor+0xdc>
 800fb16:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	40b3      	lsls	r3, r6
 800fb1e:	441d      	add	r5, r3
 800fb20:	4545      	cmp	r5, r8
 800fb22:	d3f6      	bcc.n	800fb12 <floor+0xca>
 800fb24:	ea25 0507 	bic.w	r5, r5, r7
 800fb28:	e7b2      	b.n	800fa90 <floor+0x48>
 800fb2a:	2500      	movs	r5, #0
 800fb2c:	462c      	mov	r4, r5
 800fb2e:	e7af      	b.n	800fa90 <floor+0x48>
 800fb30:	8800759c 	.word	0x8800759c
 800fb34:	7e37e43c 	.word	0x7e37e43c
 800fb38:	bff00000 	.word	0xbff00000
 800fb3c:	000fffff 	.word	0x000fffff

0800fb40 <_init>:
 800fb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb42:	bf00      	nop
 800fb44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb46:	bc08      	pop	{r3}
 800fb48:	469e      	mov	lr, r3
 800fb4a:	4770      	bx	lr

0800fb4c <_fini>:
 800fb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb4e:	bf00      	nop
 800fb50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb52:	bc08      	pop	{r3}
 800fb54:	469e      	mov	lr, r3
 800fb56:	4770      	bx	lr
