
R2_Farmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f168  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  0800f2f8  0800f2f8  000102f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb90  0800fb90  000112b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb90  0800fb90  00010b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb98  0800fb98  000112b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb98  0800fb98  00010b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fb9c  0800fb9c  00010b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b0  20000000  0800fba0  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000112b0  2**0
                  CONTENTS
 10 .bss          00000598  200002b0  200002b0  000112b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000848  20000848  000112b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000112b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000149fc  00000000  00000000  000112e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c45  00000000  00000000  00025cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  00028928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e91  00000000  00000000  00029b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012276  00000000  00000000  0002aa21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000055cf  00000000  00000000  0003cc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00042266  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000688c  00000000  00000000  000422ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00048b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b0 	.word	0x200002b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f2e0 	.word	0x0800f2e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b4 	.word	0x200002b4
 80001cc:	0800f2e0 	.word	0x0800f2e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <motorDirection>:
        {GPIOD, GPIO_PIN_3, GPIOD, GPIO_PIN_4, TIM_CHANNEL_3, &htim2},		//9
        {GPIOB, GPIO_PIN_1, GPIOB, GPIO_PIN_0, TIM_CHANNEL_4, &htim2}		//10
};

void motorDirection(uint8_t motor, uint8_t direction)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
    Motor *currentMotor = &motors[motor - 1];
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <motorDirection+0x74>)
 8001002:	4413      	add	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
    GPIO_PinState dir1_state;
    GPIO_PinState dir2_state;
    switch (direction)
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d006      	beq.n	800101a <motorDirection+0x36>
 800100c:	2b02      	cmp	r3, #2
 800100e:	d109      	bne.n	8001024 <motorDirection+0x40>
    {
    case forward:
        dir1_state = GPIO_PIN_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_SET;
 8001014:	2301      	movs	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
        break;
 8001018:	e009      	b.n	800102e <motorDirection+0x4a>
    case backward:
        dir1_state = GPIO_PIN_SET;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	73bb      	strb	r3, [r7, #14]
        break;
 8001022:	e004      	b.n	800102e <motorDirection+0x4a>
    default:
        dir1_state = GPIO_PIN_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
        break;
 800102c:	bf00      	nop
    }
    HAL_GPIO_WritePin(currentMotor->dir1_port, currentMotor->dir1_pin, dir1_state);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	4619      	mov	r1, r3
 800103a:	f004 fe95 	bl	8005d68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(currentMotor->dir2_port, currentMotor->dir2_pin, dir2_state);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	6898      	ldr	r0, [r3, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	899b      	ldrh	r3, [r3, #12]
 8001046:	7bba      	ldrb	r2, [r7, #14]
 8001048:	4619      	mov	r1, r3
 800104a:	f004 fe8d 	bl	8005d68 <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000

0800105c <setMotorSpeed>:

void setMotorSpeed(uint8_t motor, double speed)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	ed87 0b00 	vstr	d0, [r7]
 8001068:	73fb      	strb	r3, [r7, #15]
    Motor *currentMotor = &motors[motor - 1];
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4a33      	ldr	r2, [pc, #204]	@ (8001144 <setMotorSpeed+0xe8>)
 8001078:	4413      	add	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
    if (speed > 0)
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001088:	f7ff fd46 	bl	8000b18 <__aeabi_dcmpgt>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <setMotorSpeed+0x42>
    {
        motorDirection(motor, forward);
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffa4 	bl	8000fe4 <motorDirection>
 800109c:	e01b      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else if (speed < 0)
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010aa:	f7ff fd17 	bl	8000adc <__aeabi_dcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <setMotorSpeed+0x70>
    {
        motorDirection(motor, backward);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2101      	movs	r1, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff93 	bl	8000fe4 <motorDirection>
        speed = -speed;
 80010be:	683c      	ldr	r4, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80010c6:	e9c7 4500 	strd	r4, r5, [r7]
 80010ca:	e004      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else
    {
        motorDirection(motor, stop);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff87 	bl	8000fe4 <motorDirection>
    }
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	7b9b      	ldrb	r3, [r3, #14]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <setMotorSpeed+0x96>
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	681c      	ldr	r4, [r3, #0]
 80010e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010e8:	f7ff fd5e 	bl	8000ba8 <__aeabi_d2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80010f0:	e024      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	7b9b      	ldrb	r3, [r3, #14]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d109      	bne.n	800110e <setMotorSpeed+0xb2>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800110c:	e016      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	7b9b      	ldrb	r3, [r3, #14]
 8001112:	2b08      	cmp	r3, #8
 8001114:	d109      	bne.n	800112a <setMotorSpeed+0xce>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001120:	f7ff fd42 	bl	8000ba8 <__aeabi_d2uiz>
 8001124:	4603      	mov	r3, r0
 8001126:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001128:	e008      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001134:	f7ff fd38 	bl	8000ba8 <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bdb0      	pop	{r4, r5, r7, pc}
 8001144:	20000000 	.word	0x20000000

08001148 <Inverse_Kinematics>:

void Inverse_Kinematics(double Vx, double Vy, double W)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b0b8      	sub	sp, #224	@ 0xe0
 800114c:	af00      	add	r7, sp, #0
 800114e:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
 8001152:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8001156:	ed87 2b18 	vstr	d2, [r7, #96]	@ 0x60
    double R = 7.6;
 800115a:	a3c2      	add	r3, pc, #776	@ (adr r3, 8001464 <Inverse_Kinematics+0x31c>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
    double minThreshold = 1000;
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4bbd      	ldr	r3, [pc, #756]	@ (8001460 <Inverse_Kinematics+0x318>)
 800116a:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
    double wheelMaxSpeed = 5500;
 800116e:	a3a6      	add	r3, pc, #664	@ (adr r3, 8001408 <Inverse_Kinematics+0x2c0>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double M1 = (-sin(M_PI_4) * Vx + cos(M_PI_4) * Vy - R * W)*1.016985; // 1.016985
 8001178:	a3a5      	add	r3, pc, #660	@ (adr r3, 8001410 <Inverse_Kinematics+0x2c8>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001182:	f7ff fa39 	bl	80005f8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4614      	mov	r4, r2
 800118c:	461d      	mov	r5, r3
 800118e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8001418 <Inverse_Kinematics+0x2d0>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001198:	f7ff fa2e 	bl	80005f8 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4620      	mov	r0, r4
 80011a2:	4629      	mov	r1, r5
 80011a4:	f7ff f872 	bl	800028c <__adddf3>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4614      	mov	r4, r2
 80011ae:	461d      	mov	r5, r3
 80011b0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80011b4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80011b8:	f7ff fa1e 	bl	80005f8 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff f860 	bl	8000288 <__aeabi_dsub>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	a393      	add	r3, pc, #588	@ (adr r3, 8001420 <Inverse_Kinematics+0x2d8>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fa0f 	bl	80005f8 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W);
 80011e2:	a391      	add	r3, pc, #580	@ (adr r3, 8001428 <Inverse_Kinematics+0x2e0>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4614      	mov	r4, r2
 80011f6:	461d      	mov	r5, r3
 80011f8:	a385      	add	r3, pc, #532	@ (adr r3, 8001410 <Inverse_Kinematics+0x2c8>)
 80011fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001202:	f7ff f9f9 	bl	80005f8 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4620      	mov	r0, r4
 800120c:	4629      	mov	r1, r5
 800120e:	f7ff f83d 	bl	800028c <__adddf3>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4614      	mov	r4, r2
 8001218:	461d      	mov	r5, r3
 800121a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800121e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001222:	f7ff f9e9 	bl	80005f8 <__aeabi_dmul>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4620      	mov	r0, r4
 800122c:	4629      	mov	r1, r5
 800122e:	f7ff f82b 	bl	8000288 <__aeabi_dsub>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    double M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.05296; // 1.05296
 800123a:	a37d      	add	r3, pc, #500	@ (adr r3, 8001430 <Inverse_Kinematics+0x2e8>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001244:	f7ff f9d8 	bl	80005f8 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4614      	mov	r4, r2
 800124e:	461d      	mov	r5, r3
 8001250:	a379      	add	r3, pc, #484	@ (adr r3, 8001438 <Inverse_Kinematics+0x2f0>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800125a:	f7ff f9cd 	bl	80005f8 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff f811 	bl	800028c <__adddf3>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4614      	mov	r4, r2
 8001270:	461d      	mov	r5, r3
 8001272:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001276:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800127a:	f7ff f9bd 	bl	80005f8 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4620      	mov	r0, r4
 8001284:	4629      	mov	r1, r5
 8001286:	f7fe ffff 	bl	8000288 <__aeabi_dsub>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	a36b      	add	r3, pc, #428	@ (adr r3, 8001440 <Inverse_Kinematics+0x2f8>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9ae 	bl	80005f8 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
    double M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W)*0.95038; // 0.95038
 80012a4:	a368      	add	r3, pc, #416	@ (adr r3, 8001448 <Inverse_Kinematics+0x300>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80012ae:	f7ff f9a3 	bl	80005f8 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	a365      	add	r3, pc, #404	@ (adr r3, 8001450 <Inverse_Kinematics+0x308>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80012c4:	f7ff f998 	bl	80005f8 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7fe ffdc 	bl	800028c <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4614      	mov	r4, r2
 80012da:	461d      	mov	r5, r3
 80012dc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80012e0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80012e4:	f7ff f988 	bl	80005f8 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4620      	mov	r0, r4
 80012ee:	4629      	mov	r1, r5
 80012f0:	f7fe ffca 	bl	8000288 <__aeabi_dsub>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	a356      	add	r3, pc, #344	@ (adr r3, 8001458 <Inverse_Kinematics+0x310>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff f979 	bl	80005f8 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0

    double maxM = fmax(fabs(M1), fmax(fabs(M2), fmax(fabs(M3), fabs(M4))));
 800130e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001312:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800131c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800131e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001322:	633b      	str	r3, [r7, #48]	@ 0x30
 8001324:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800132c:	637b      	str	r3, [r7, #52]	@ 0x34
 800132e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001334:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001338:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800133e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001342:	623b      	str	r3, [r7, #32]
 8001344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001348:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
 800134e:	ed97 1b08 	vldr	d1, [r7, #32]
 8001352:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001356:	f00c fb1a 	bl	800d98e <fmax>
 800135a:	eeb0 7a40 	vmov.f32	s14, s0
 800135e:	eef0 7a60 	vmov.f32	s15, s1
 8001362:	eeb0 1a47 	vmov.f32	s2, s14
 8001366:	eef0 1a67 	vmov.f32	s3, s15
 800136a:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800136e:	f00c fb0e 	bl	800d98e <fmax>
 8001372:	eeb0 7a40 	vmov.f32	s14, s0
 8001376:	eef0 7a60 	vmov.f32	s15, s1
 800137a:	eeb0 1a47 	vmov.f32	s2, s14
 800137e:	eef0 1a67 	vmov.f32	s3, s15
 8001382:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001386:	f00c fb02 	bl	800d98e <fmax>
 800138a:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0

    if (maxM > wheelMaxSpeed) {
 800138e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001392:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001396:	f7ff fbbf 	bl	8000b18 <__aeabi_dcmpgt>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d069      	beq.n	8001474 <Inverse_Kinematics+0x32c>
        double scale = wheelMaxSpeed / maxM;
 80013a0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80013a4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80013a8:	f7ff fa50 	bl	800084c <__aeabi_ddiv>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        M1 *= scale;
 80013b4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013b8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80013bc:	f7ff f91c 	bl	80005f8 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
        M2 *= scale;
 80013c8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013cc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80013d0:	f7ff f912 	bl	80005f8 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
        M3 *= scale;
 80013dc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013e0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80013e4:	f7ff f908 	bl	80005f8 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
        M4 *= scale;
 80013f0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013f4:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80013f8:	f7ff f8fe 	bl	80005f8 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
 8001404:	e036      	b.n	8001474 <Inverse_Kinematics+0x32c>
 8001406:	bf00      	nop
 8001408:	00000000 	.word	0x00000000
 800140c:	40b57c00 	.word	0x40b57c00
 8001410:	667f3bcc 	.word	0x667f3bcc
 8001414:	bfe6a09e 	.word	0xbfe6a09e
 8001418:	667f3bcd 	.word	0x667f3bcd
 800141c:	3fe6a09e 	.word	0x3fe6a09e
 8001420:	10385c68 	.word	0x10385c68
 8001424:	3ff04592 	.word	0x3ff04592
 8001428:	667f3bcd 	.word	0x667f3bcd
 800142c:	bfe6a09e 	.word	0xbfe6a09e
 8001430:	667f3bcc 	.word	0x667f3bcc
 8001434:	3fe6a09e 	.word	0x3fe6a09e
 8001438:	667f3bce 	.word	0x667f3bce
 800143c:	bfe6a09e 	.word	0xbfe6a09e
 8001440:	95bff045 	.word	0x95bff045
 8001444:	3ff0d8ec 	.word	0x3ff0d8ec
 8001448:	667f3bce 	.word	0x667f3bce
 800144c:	3fe6a09e 	.word	0x3fe6a09e
 8001450:	667f3bcb 	.word	0x667f3bcb
 8001454:	3fe6a09e 	.word	0x3fe6a09e
 8001458:	5158b828 	.word	0x5158b828
 800145c:	3fee6983 	.word	0x3fee6983
 8001460:	408f4000 	.word	0x408f4000
 8001464:	66666666 	.word	0x66666666
 8001468:	401e6666 	.word	0x401e6666
	...
    }

    double V1 = (fabs(M1) > minThreshold) ? M1 : (M1 < 0) ? -minThreshold : ((M1 > 0) ? minThreshold : 0);
 8001474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800147e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001488:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800148c:	f7ff fb26 	bl	8000adc <__aeabi_dcmplt>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d004      	beq.n	80014a0 <Inverse_Kinematics+0x358>
 8001496:	ed97 7b36 	vldr	d7, [r7, #216]	@ 0xd8
 800149a:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800149e:	e027      	b.n	80014f0 <Inverse_Kinematics+0x3a8>
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80014ac:	f7ff fb16 	bl	8000adc <__aeabi_dcmplt>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d008      	beq.n	80014c8 <Inverse_Kinematics+0x380>
 80014b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80014ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80014bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80014c6:	e013      	b.n	80014f0 <Inverse_Kinematics+0x3a8>
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80014d4:	f7ff fb20 	bl	8000b18 <__aeabi_dcmpgt>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d004      	beq.n	80014e8 <Inverse_Kinematics+0x3a0>
 80014de:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 80014e2:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80014e6:	e003      	b.n	80014f0 <Inverse_Kinematics+0x3a8>
 80014e8:	ed1f 7b20 	vldr	d7, [pc, #-128]	@ 800146c <Inverse_Kinematics+0x324>
 80014ec:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80014f0:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80014f4:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
    double V2 = (fabs(M2) > minThreshold) ? M2 : (M2 < 0) ? -minThreshold : ((M2 > 0) ? minThreshold : 0);
 80014f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001502:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800150c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001510:	f7ff fae4 	bl	8000adc <__aeabi_dcmplt>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d004      	beq.n	8001524 <Inverse_Kinematics+0x3dc>
 800151a:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 800151e:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001522:	e027      	b.n	8001574 <Inverse_Kinematics+0x42c>
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001530:	f7ff fad4 	bl	8000adc <__aeabi_dcmplt>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <Inverse_Kinematics+0x404>
 800153a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800153e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001540:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001544:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001548:	657b      	str	r3, [r7, #84]	@ 0x54
 800154a:	e013      	b.n	8001574 <Inverse_Kinematics+0x42c>
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001558:	f7ff fade 	bl	8000b18 <__aeabi_dcmpgt>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <Inverse_Kinematics+0x424>
 8001562:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8001566:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 800156a:	e003      	b.n	8001574 <Inverse_Kinematics+0x42c>
 800156c:	ed1f 7b41 	vldr	d7, [pc, #-260]	@ 800146c <Inverse_Kinematics+0x324>
 8001570:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001574:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001578:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    double V3 = (fabs(M3) > minThreshold) ? M3 : (M3 < 0) ? -minThreshold : ((M3 > 0) ? minThreshold : 0);
 800157c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001586:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001590:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001594:	f7ff faa2 	bl	8000adc <__aeabi_dcmplt>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <Inverse_Kinematics+0x460>
 800159e:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 80015a2:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80015a6:	e027      	b.n	80015f8 <Inverse_Kinematics+0x4b0>
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80015b4:	f7ff fa92 	bl	8000adc <__aeabi_dcmplt>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d008      	beq.n	80015d0 <Inverse_Kinematics+0x488>
 80015be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80015c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80015c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015ce:	e013      	b.n	80015f8 <Inverse_Kinematics+0x4b0>
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80015dc:	f7ff fa9c 	bl	8000b18 <__aeabi_dcmpgt>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d004      	beq.n	80015f0 <Inverse_Kinematics+0x4a8>
 80015e6:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 80015ea:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80015ee:	e003      	b.n	80015f8 <Inverse_Kinematics+0x4b0>
 80015f0:	ed1f 7b62 	vldr	d7, [pc, #-392]	@ 800146c <Inverse_Kinematics+0x324>
 80015f4:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80015f8:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80015fc:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    double V4 = (fabs(M4) > minThreshold) ? M4 : (M4 < 0) ? -minThreshold : ((M4 > 0) ? minThreshold : 0);
 8001600:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800160a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001614:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001618:	f7ff fa60 	bl	8000adc <__aeabi_dcmplt>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d004      	beq.n	800162c <Inverse_Kinematics+0x4e4>
 8001622:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 8001626:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 800162a:	e027      	b.n	800167c <Inverse_Kinematics+0x534>
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001638:	f7ff fa50 	bl	8000adc <__aeabi_dcmplt>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <Inverse_Kinematics+0x50c>
 8001642:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001646:	643b      	str	r3, [r7, #64]	@ 0x40
 8001648:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800164c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001650:	647b      	str	r3, [r7, #68]	@ 0x44
 8001652:	e013      	b.n	800167c <Inverse_Kinematics+0x534>
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001660:	f7ff fa5a 	bl	8000b18 <__aeabi_dcmpgt>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d004      	beq.n	8001674 <Inverse_Kinematics+0x52c>
 800166a:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 800166e:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001672:	e003      	b.n	800167c <Inverse_Kinematics+0x534>
 8001674:	ed1f 7b83 	vldr	d7, [pc, #-524]	@ 800146c <Inverse_Kinematics+0x324>
 8001678:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 800167c:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001680:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78

    setMotorSpeed(6, (int)V1);
 8001684:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001688:	f7ff fa66 	bl	8000b58 <__aeabi_d2iz>
 800168c:	4603      	mov	r3, r0
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff48 	bl	8000524 <__aeabi_i2d>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	ec43 2b10 	vmov	d0, r2, r3
 800169c:	2006      	movs	r0, #6
 800169e:	f7ff fcdd 	bl	800105c <setMotorSpeed>
    setMotorSpeed(5, (int)V2);
 80016a2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80016a6:	f7ff fa57 	bl	8000b58 <__aeabi_d2iz>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff39 	bl	8000524 <__aeabi_i2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	ec43 2b10 	vmov	d0, r2, r3
 80016ba:	2005      	movs	r0, #5
 80016bc:	f7ff fcce 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, (int)V3);
 80016c0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80016c4:	f7ff fa48 	bl	8000b58 <__aeabi_d2iz>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff2a 	bl	8000524 <__aeabi_i2d>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	ec43 2b10 	vmov	d0, r2, r3
 80016d8:	2004      	movs	r0, #4
 80016da:	f7ff fcbf 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, (int)V4);
 80016de:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80016e2:	f7ff fa39 	bl	8000b58 <__aeabi_d2iz>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff1b 	bl	8000524 <__aeabi_i2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	ec43 2b10 	vmov	d0, r2, r3
 80016f6:	2008      	movs	r0, #8
 80016f8:	f7ff fcb0 	bl	800105c <setMotorSpeed>
}
 80016fc:	bf00      	nop
 80016fe:	37e0      	adds	r7, #224	@ 0xe0
 8001700:	46bd      	mov	sp, r7
 8001702:	bdb0      	pop	{r4, r5, r7, pc}
 8001704:	0000      	movs	r0, r0
	...

08001708 <putar>:
    setMotorSpeed(4, (int)V3);
    setMotorSpeed(8, (int)V4);
}

void putar(int Vx, int Vy, int W)
{
 8001708:	b5b0      	push	{r4, r5, r7, lr}
 800170a:	ed2d 8b02 	vpush	{d8}
 800170e:	b098      	sub	sp, #96	@ 0x60
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
     double R = 7.6;
 8001718:	f20f 534c 	addw	r3, pc, #1356	@ 0x54c
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
     int minSpeed = 750;
 8001724:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8001728:	657b      	str	r3, [r7, #84]	@ 0x54
     int maxSpeed = 1000;
 800172a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172e:	653b      	str	r3, [r7, #80]	@ 0x50

     double M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f7fe fef7 	bl	8000524 <__aeabi_i2d>
 8001736:	f20f 5338 	addw	r3, pc, #1336	@ 0x538
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff5b 	bl	80005f8 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4614      	mov	r4, r2
 8001748:	461d      	mov	r5, r3
 800174a:	68b8      	ldr	r0, [r7, #8]
 800174c:	f7fe feea 	bl	8000524 <__aeabi_i2d>
 8001750:	f20f 5324 	addw	r3, pc, #1316	@ 0x524
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe ff4e 	bl	80005f8 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4620      	mov	r0, r4
 8001762:	4629      	mov	r1, r5
 8001764:	f7fe fd92 	bl	800028c <__adddf3>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4614      	mov	r4, r2
 800176e:	461d      	mov	r5, r3
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7fe fed7 	bl	8000524 <__aeabi_i2d>
 8001776:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800177a:	f7fe ff3d 	bl	80005f8 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe fd7f 	bl	8000288 <__aeabi_dsub>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
     double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f7fe fec6 	bl	8000524 <__aeabi_i2d>
 8001798:	f20f 43e4 	addw	r3, pc, #1252	@ 0x4e4
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7fe ff2a 	bl	80005f8 <__aeabi_dmul>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4614      	mov	r4, r2
 80017aa:	461d      	mov	r5, r3
 80017ac:	68b8      	ldr	r0, [r7, #8]
 80017ae:	f7fe feb9 	bl	8000524 <__aeabi_i2d>
 80017b2:	f20f 43bc 	addw	r3, pc, #1212	@ 0x4bc
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	f7fe ff1d 	bl	80005f8 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4620      	mov	r0, r4
 80017c4:	4629      	mov	r1, r5
 80017c6:	f7fe fd61 	bl	800028c <__adddf3>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4614      	mov	r4, r2
 80017d0:	461d      	mov	r5, r3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7fe fea6 	bl	8000524 <__aeabi_i2d>
 80017d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80017dc:	f7fe ff0c 	bl	80005f8 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4620      	mov	r0, r4
 80017e6:	4629      	mov	r1, r5
 80017e8:	f7fe fd4e 	bl	8000288 <__aeabi_dsub>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
     double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f7fe fe95 	bl	8000524 <__aeabi_i2d>
 80017fa:	f20f 438c 	addw	r3, pc, #1164	@ 0x48c
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	f7fe fef9 	bl	80005f8 <__aeabi_dmul>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4614      	mov	r4, r2
 800180c:	461d      	mov	r5, r3
 800180e:	68b8      	ldr	r0, [r7, #8]
 8001810:	f7fe fe88 	bl	8000524 <__aeabi_i2d>
 8001814:	f20f 4378 	addw	r3, pc, #1144	@ 0x478
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe feec 	bl	80005f8 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4620      	mov	r0, r4
 8001826:	4629      	mov	r1, r5
 8001828:	f7fe fd30 	bl	800028c <__adddf3>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4614      	mov	r4, r2
 8001832:	461d      	mov	r5, r3
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7fe fe75 	bl	8000524 <__aeabi_i2d>
 800183a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800183e:	f7fe fedb 	bl	80005f8 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4620      	mov	r0, r4
 8001848:	4629      	mov	r1, r5
 800184a:	f7fe fd1d 	bl	8000288 <__aeabi_dsub>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
     double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f7fe fe64 	bl	8000524 <__aeabi_i2d>
 800185c:	f20f 4338 	addw	r3, pc, #1080	@ 0x438
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fec8 	bl	80005f8 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4614      	mov	r4, r2
 800186e:	461d      	mov	r5, r3
 8001870:	68b8      	ldr	r0, [r7, #8]
 8001872:	f7fe fe57 	bl	8000524 <__aeabi_i2d>
 8001876:	f20f 4328 	addw	r3, pc, #1064	@ 0x428
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe febb 	bl	80005f8 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4620      	mov	r0, r4
 8001888:	4629      	mov	r1, r5
 800188a:	f7fe fcff 	bl	800028c <__adddf3>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4614      	mov	r4, r2
 8001894:	461d      	mov	r5, r3
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7fe fe44 	bl	8000524 <__aeabi_i2d>
 800189c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018a0:	f7fe feaa 	bl	80005f8 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4620      	mov	r0, r4
 80018aa:	4629      	mov	r1, r5
 80018ac:	f7fe fcec 	bl	8000288 <__aeabi_dsub>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

     double V1 = (M1 > minSpeed || M1 < -minSpeed) ? fmin(fmax(M1, -maxSpeed), maxSpeed) : ((M1 < -0) ? -minSpeed : ((M1 > 0) ? minSpeed : 0));
 80018b8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80018ba:	f7fe fe33 	bl	8000524 <__aeabi_i2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80018c6:	f7ff f927 	bl	8000b18 <__aeabi_dcmpgt>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10d      	bne.n	80018ec <putar+0x1e4>
 80018d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018d2:	425b      	negs	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe25 	bl	8000524 <__aeabi_i2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80018e2:	f7ff f8fb 	bl	8000adc <__aeabi_dcmplt>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d020      	beq.n	800192e <putar+0x226>
 80018ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018ee:	425b      	negs	r3, r3
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe17 	bl	8000524 <__aeabi_i2d>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	ec43 2b11 	vmov	d1, r2, r3
 80018fe:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001902:	f00c f844 	bl	800d98e <fmax>
 8001906:	eeb0 8a40 	vmov.f32	s16, s0
 800190a:	eef0 8a60 	vmov.f32	s17, s1
 800190e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001910:	f7fe fe08 	bl	8000524 <__aeabi_i2d>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	ec43 2b11 	vmov	d1, r2, r3
 800191c:	eeb0 0a48 	vmov.f32	s0, s16
 8001920:	eef0 0a68 	vmov.f32	s1, s17
 8001924:	f00c f85d 	bl	800d9e2 <fmin>
 8001928:	ec53 2b10 	vmov	r2, r3, d0
 800192c:	e027      	b.n	800197e <putar+0x276>
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800193a:	f7ff f8cf 	bl	8000adc <__aeabi_dcmplt>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d007      	beq.n	8001954 <putar+0x24c>
 8001944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001946:	425b      	negs	r3, r3
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fdeb 	bl	8000524 <__aeabi_i2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	e014      	b.n	800197e <putar+0x276>
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001960:	f7ff f8da 	bl	8000b18 <__aeabi_dcmpgt>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <putar+0x26e>
 800196a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800196c:	f7fe fdda 	bl	8000524 <__aeabi_i2d>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	e003      	b.n	800197e <putar+0x276>
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
     double V2 = (M2 > minSpeed || M2 < -minSpeed) ? fmin(fmax(M2, -maxSpeed), maxSpeed) : ((M2 < -0) ? -minSpeed : ((M2 > 0) ? minSpeed : 0));
 8001982:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001984:	f7fe fdce 	bl	8000524 <__aeabi_i2d>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001990:	f7ff f8c2 	bl	8000b18 <__aeabi_dcmpgt>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10d      	bne.n	80019b6 <putar+0x2ae>
 800199a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800199c:	425b      	negs	r3, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fdc0 	bl	8000524 <__aeabi_i2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80019ac:	f7ff f896 	bl	8000adc <__aeabi_dcmplt>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d020      	beq.n	80019f8 <putar+0x2f0>
 80019b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019b8:	425b      	negs	r3, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fdb2 	bl	8000524 <__aeabi_i2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	ec43 2b11 	vmov	d1, r2, r3
 80019c8:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80019cc:	f00b ffdf 	bl	800d98e <fmax>
 80019d0:	eeb0 8a40 	vmov.f32	s16, s0
 80019d4:	eef0 8a60 	vmov.f32	s17, s1
 80019d8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80019da:	f7fe fda3 	bl	8000524 <__aeabi_i2d>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	ec43 2b11 	vmov	d1, r2, r3
 80019e6:	eeb0 0a48 	vmov.f32	s0, s16
 80019ea:	eef0 0a68 	vmov.f32	s1, s17
 80019ee:	f00b fff8 	bl	800d9e2 <fmin>
 80019f2:	ec53 2b10 	vmov	r2, r3, d0
 80019f6:	e027      	b.n	8001a48 <putar+0x340>
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001a04:	f7ff f86a 	bl	8000adc <__aeabi_dcmplt>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <putar+0x316>
 8001a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a10:	425b      	negs	r3, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd86 	bl	8000524 <__aeabi_i2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	e014      	b.n	8001a48 <putar+0x340>
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001a2a:	f7ff f875 	bl	8000b18 <__aeabi_dcmpgt>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <putar+0x338>
 8001a34:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001a36:	f7fe fd75 	bl	8000524 <__aeabi_i2d>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	e003      	b.n	8001a48 <putar+0x340>
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	e9c7 2308 	strd	r2, r3, [r7, #32]
     double V3 = (M3 > minSpeed || M3 < -minSpeed) ? fmin(fmax(M3, -maxSpeed), maxSpeed) : ((M3 < -0) ? -minSpeed : ((M3 > 0) ? minSpeed : 0));
 8001a4c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001a4e:	f7fe fd69 	bl	8000524 <__aeabi_i2d>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a5a:	f7ff f85d 	bl	8000b18 <__aeabi_dcmpgt>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10d      	bne.n	8001a80 <putar+0x378>
 8001a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a66:	425b      	negs	r3, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd5b 	bl	8000524 <__aeabi_i2d>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a76:	f7ff f831 	bl	8000adc <__aeabi_dcmplt>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <putar+0x3ba>
 8001a80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a82:	425b      	negs	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd4d 	bl	8000524 <__aeabi_i2d>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	ec43 2b11 	vmov	d1, r2, r3
 8001a92:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001a96:	f00b ff7a 	bl	800d98e <fmax>
 8001a9a:	eeb0 8a40 	vmov.f32	s16, s0
 8001a9e:	eef0 8a60 	vmov.f32	s17, s1
 8001aa2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001aa4:	f7fe fd3e 	bl	8000524 <__aeabi_i2d>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	ec43 2b11 	vmov	d1, r2, r3
 8001ab0:	eeb0 0a48 	vmov.f32	s0, s16
 8001ab4:	eef0 0a68 	vmov.f32	s1, s17
 8001ab8:	f00b ff93 	bl	800d9e2 <fmin>
 8001abc:	ec53 2b10 	vmov	r2, r3, d0
 8001ac0:	e027      	b.n	8001b12 <putar+0x40a>
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001ace:	f7ff f805 	bl	8000adc <__aeabi_dcmplt>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d007      	beq.n	8001ae8 <putar+0x3e0>
 8001ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ada:	425b      	negs	r3, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fd21 	bl	8000524 <__aeabi_i2d>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	e014      	b.n	8001b12 <putar+0x40a>
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001af4:	f7ff f810 	bl	8000b18 <__aeabi_dcmpgt>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <putar+0x402>
 8001afe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001b00:	f7fe fd10 	bl	8000524 <__aeabi_i2d>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	e003      	b.n	8001b12 <putar+0x40a>
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9c7 2306 	strd	r2, r3, [r7, #24]
     double V4 = (M4 > minSpeed || M4 < -minSpeed) ? fmin(fmax(M4, -maxSpeed), maxSpeed) : ((M4 < -0) ? -minSpeed : ((M4 > 0) ? minSpeed : 0));
 8001b16:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001b18:	f7fe fd04 	bl	8000524 <__aeabi_i2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001b24:	f7fe fff8 	bl	8000b18 <__aeabi_dcmpgt>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10d      	bne.n	8001b4a <putar+0x442>
 8001b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b30:	425b      	negs	r3, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fcf6 	bl	8000524 <__aeabi_i2d>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001b40:	f7fe ffcc 	bl	8000adc <__aeabi_dcmplt>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d020      	beq.n	8001b8c <putar+0x484>
 8001b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fce8 	bl	8000524 <__aeabi_i2d>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	ec43 2b11 	vmov	d1, r2, r3
 8001b5c:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8001b60:	f00b ff15 	bl	800d98e <fmax>
 8001b64:	eeb0 8a40 	vmov.f32	s16, s0
 8001b68:	eef0 8a60 	vmov.f32	s17, s1
 8001b6c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001b6e:	f7fe fcd9 	bl	8000524 <__aeabi_i2d>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	ec43 2b11 	vmov	d1, r2, r3
 8001b7a:	eeb0 0a48 	vmov.f32	s0, s16
 8001b7e:	eef0 0a68 	vmov.f32	s1, s17
 8001b82:	f00b ff2e 	bl	800d9e2 <fmin>
 8001b86:	ec53 2b10 	vmov	r2, r3, d0
 8001b8a:	e027      	b.n	8001bdc <putar+0x4d4>
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001b98:	f7fe ffa0 	bl	8000adc <__aeabi_dcmplt>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <putar+0x4aa>
 8001ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba4:	425b      	negs	r3, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcbc 	bl	8000524 <__aeabi_i2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	e014      	b.n	8001bdc <putar+0x4d4>
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001bbe:	f7fe ffab 	bl	8000b18 <__aeabi_dcmpgt>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <putar+0x4cc>
 8001bc8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001bca:	f7fe fcab 	bl	8000524 <__aeabi_i2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	e003      	b.n	8001bdc <putar+0x4d4>
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	e9c7 2304 	strd	r2, r3, [r7, #16]

     setMotorSpeed(6, (int)V1);
 8001be0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001be4:	f7fe ffb8 	bl	8000b58 <__aeabi_d2iz>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fc9a 	bl	8000524 <__aeabi_i2d>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	ec43 2b10 	vmov	d0, r2, r3
 8001bf8:	2006      	movs	r0, #6
 8001bfa:	f7ff fa2f 	bl	800105c <setMotorSpeed>
     setMotorSpeed(5, (int)V2);
 8001bfe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c02:	f7fe ffa9 	bl	8000b58 <__aeabi_d2iz>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fc8b 	bl	8000524 <__aeabi_i2d>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	ec43 2b10 	vmov	d0, r2, r3
 8001c16:	2005      	movs	r0, #5
 8001c18:	f7ff fa20 	bl	800105c <setMotorSpeed>
     setMotorSpeed(4, (int)V3);
 8001c1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c20:	f7fe ff9a 	bl	8000b58 <__aeabi_d2iz>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fc7c 	bl	8000524 <__aeabi_i2d>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	ec43 2b10 	vmov	d0, r2, r3
 8001c34:	2004      	movs	r0, #4
 8001c36:	f7ff fa11 	bl	800105c <setMotorSpeed>
     setMotorSpeed(8, (int)V4);
 8001c3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c3e:	f7fe ff8b 	bl	8000b58 <__aeabi_d2iz>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc6d 	bl	8000524 <__aeabi_i2d>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	ec43 2b10 	vmov	d0, r2, r3
 8001c52:	2008      	movs	r0, #8
 8001c54:	f7ff fa02 	bl	800105c <setMotorSpeed>
}
 8001c58:	bf00      	nop
 8001c5a:	3760      	adds	r7, #96	@ 0x60
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	ecbd 8b02 	vpop	{d8}
 8001c62:	bdb0      	pop	{r4, r5, r7, pc}
 8001c64:	f3af 8000 	nop.w
 8001c68:	66666666 	.word	0x66666666
 8001c6c:	401e6666 	.word	0x401e6666
 8001c70:	667f3bcc 	.word	0x667f3bcc
 8001c74:	bfe6a09e 	.word	0xbfe6a09e
 8001c78:	667f3bcd 	.word	0x667f3bcd
 8001c7c:	3fe6a09e 	.word	0x3fe6a09e
 8001c80:	667f3bcd 	.word	0x667f3bcd
 8001c84:	bfe6a09e 	.word	0xbfe6a09e
 8001c88:	667f3bcc 	.word	0x667f3bcc
 8001c8c:	3fe6a09e 	.word	0x3fe6a09e
 8001c90:	667f3bce 	.word	0x667f3bce
 8001c94:	bfe6a09e 	.word	0xbfe6a09e
 8001c98:	667f3bce 	.word	0x667f3bce
 8001c9c:	3fe6a09e 	.word	0x3fe6a09e
 8001ca0:	667f3bcb 	.word	0x667f3bcb
 8001ca4:	3fe6a09e 	.word	0x3fe6a09e

08001ca8 <lcd_write_nibble>:
#define D7_BIT 7      // Data 7 bit

uint8_t backlight_state = 1;

void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	4603      	mov	r3, r0
 8001cb0:	460a      	mov	r2, r1
 8001cb2:	71fb      	strb	r3, [r7, #7]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8001cc0:	7bfa      	ldrb	r2, [r7, #15]
 8001cc2:	79bb      	ldrb	r3, [r7, #6]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8001cca:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <lcd_write_nibble+0x7c>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	b25a      	sxtb	r2, r3
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	b25b      	sxtb	r3, r3
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	b25b      	sxtb	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8001ce8:	f107 020f 	add.w	r2, r7, #15
 8001cec:	2364      	movs	r3, #100	@ 0x64
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	214e      	movs	r1, #78	@ 0x4e
 8001cf4:	480c      	ldr	r0, [pc, #48]	@ (8001d28 <lcd_write_nibble+0x80>)
 8001cf6:	f004 f9ad 	bl	8006054 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f003 fcb8 	bl	8005670 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	f023 0304 	bic.w	r3, r3, #4
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8001d0a:	f107 020f 	add.w	r2, r7, #15
 8001d0e:	2364      	movs	r3, #100	@ 0x64
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2301      	movs	r3, #1
 8001d14:	214e      	movs	r1, #78	@ 0x4e
 8001d16:	4804      	ldr	r0, [pc, #16]	@ (8001d28 <lcd_write_nibble+0x80>)
 8001d18:	f004 f99c 	bl	8006054 <HAL_I2C_Master_Transmit>
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200000c8 	.word	0x200000c8
 8001d28:	200002cc 	.word	0x200002cc

08001d2c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ffad 	bl	8001ca8 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 8001d4e:	7bbb      	ldrb	r3, [r7, #14]
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ffa8 	bl	8001ca8 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d002      	beq.n	8001d64 <lcd_send_cmd+0x38>
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d102      	bne.n	8001d6a <lcd_send_cmd+0x3e>
  {
    HAL_Delay(2);
 8001d64:	2002      	movs	r0, #2
 8001d66:	f003 fc83 	bl	8005670 <HAL_Delay>
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff8a 	bl	8001ca8 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 8001d94:	7bbb      	ldrb	r3, [r7, #14]
 8001d96:	2101      	movs	r1, #1
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff85 	bl	8001ca8 <lcd_write_nibble>
}
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <lcd_init>:

void lcd_init()
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8001daa:	2032      	movs	r0, #50	@ 0x32
 8001dac:	f003 fc60 	bl	8005670 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001db0:	2100      	movs	r1, #0
 8001db2:	2003      	movs	r0, #3
 8001db4:	f7ff ff78 	bl	8001ca8 <lcd_write_nibble>
  HAL_Delay(5);
 8001db8:	2005      	movs	r0, #5
 8001dba:	f003 fc59 	bl	8005670 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f7ff ff71 	bl	8001ca8 <lcd_write_nibble>
  HAL_Delay(1);
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f003 fc52 	bl	8005670 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2003      	movs	r0, #3
 8001dd0:	f7ff ff6a 	bl	8001ca8 <lcd_write_nibble>
  HAL_Delay(1);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f003 fc4b 	bl	8005670 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2002      	movs	r0, #2
 8001dde:	f7ff ff63 	bl	8001ca8 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 8001de2:	2028      	movs	r0, #40	@ 0x28
 8001de4:	f7ff ffa2 	bl	8001d2c <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8001de8:	200c      	movs	r0, #12
 8001dea:	f7ff ff9f 	bl	8001d2c <lcd_send_cmd>
  lcd_send_cmd(0x06);
 8001dee:	2006      	movs	r0, #6
 8001df0:	f7ff ff9c 	bl	8001d2c <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8001df4:	2001      	movs	r0, #1
 8001df6:	f7ff ff99 	bl	8001d2c <lcd_send_cmd>
  HAL_Delay(2);
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	f003 fc38 	bl	8005670 <HAL_Delay>
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  while (*str)
 8001e0c:	e006      	b.n	8001e1c <lcd_write_string+0x18>
  {
    lcd_send_data(*str++);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ffab 	bl	8001d72 <lcd_send_data>
  while (*str)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f4      	bne.n	8001e0e <lcd_write_string+0xa>
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	460a      	mov	r2, r1
 8001e3a:	71fb      	strb	r3, [r7, #7]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	71bb      	strb	r3, [r7, #6]
  uint8_t address;
  switch (row)
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d816      	bhi.n	8001e74 <lcd_set_cursor+0x44>
 8001e46:	a201      	add	r2, pc, #4	@ (adr r2, 8001e4c <lcd_set_cursor+0x1c>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001e5d 	.word	0x08001e5d
 8001e50:	08001e63 	.word	0x08001e63
 8001e54:	08001e69 	.word	0x08001e69
 8001e58:	08001e6f 	.word	0x08001e6f
  {
  case 0:
    address = 0x00;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8001e60:	e00a      	b.n	8001e78 <lcd_set_cursor+0x48>
  case 1:
    address = 0x40;
 8001e62:	2340      	movs	r3, #64	@ 0x40
 8001e64:	73fb      	strb	r3, [r7, #15]
    break;
 8001e66:	e007      	b.n	8001e78 <lcd_set_cursor+0x48>
  case 2:
    address = 0x14;
 8001e68:	2314      	movs	r3, #20
 8001e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8001e6c:	e004      	b.n	8001e78 <lcd_set_cursor+0x48>
  case 3:
    address = 0x54;
 8001e6e:	2354      	movs	r3, #84	@ 0x54
 8001e70:	73fb      	strb	r3, [r7, #15]
    break;
 8001e72:	e001      	b.n	8001e78 <lcd_set_cursor+0x48>
  default:
    address = 0x00;
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]
  }
  address += column;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	79bb      	ldrb	r3, [r7, #6]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	73fb      	strb	r3, [r7, #15]
  lcd_send_cmd(0x80 | address);
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff4f 	bl	8001d2c <lcd_send_cmd>
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop

08001e98 <lcd_clear>:

void lcd_clear(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x01);
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f7ff ff45 	bl	8001d2c <lcd_send_cmd>
  HAL_Delay(2);
 8001ea2:	2002      	movs	r0, #2
 8001ea4:	f003 fbe4 	bl	8005670 <HAL_Delay>
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
movingState mode = VOID;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
	// ENCODER
	if((GPIO_Pin == EB_1_Pin) && (HAL_GPIO_ReadPin(EB_1_GPIO_Port, EB_1_Pin) == GPIO_PIN_SET))
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d11d      	bne.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x4c>
 8001ebc:	2108      	movs	r1, #8
 8001ebe:	4890      	ldr	r0, [pc, #576]	@ (8002100 <HAL_GPIO_EXTI_Callback+0x254>)
 8001ec0:	f003 ff3a 	bl	8005d38 <HAL_GPIO_ReadPin>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d116      	bne.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		HAL_GPIO_ReadPin(EA_1_GPIO_Port, EA_1_Pin) ? counter1-- : counter1++;
 8001eca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ece:	488d      	ldr	r0, [pc, #564]	@ (8002104 <HAL_GPIO_EXTI_Callback+0x258>)
 8001ed0:	f003 ff32 	bl	8005d38 <HAL_GPIO_ReadPin>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_GPIO_EXTI_Callback+0x3a>
 8001eda:	4b8b      	ldr	r3, [pc, #556]	@ (8002108 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	4a89      	ldr	r2, [pc, #548]	@ (8002108 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	e004      	b.n	8001ef0 <HAL_GPIO_EXTI_Callback+0x44>
 8001ee6:	4b88      	ldr	r3, [pc, #544]	@ (8002108 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3301      	adds	r3, #1
 8001eec:	4a86      	ldr	r2, [pc, #536]	@ (8002108 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001eee:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_1_Pin);
 8001ef0:	4b86      	ldr	r3, [pc, #536]	@ (800210c <HAL_GPIO_EXTI_Callback+0x260>)
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	615a      	str	r2, [r3, #20]
 8001ef6:	e15b      	b.n	80021b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_2_Pin) && (HAL_GPIO_ReadPin(EB_2_GPIO_Port, EB_2_Pin) == GPIO_PIN_SET))
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d11c      	bne.n	8001f38 <HAL_GPIO_EXTI_Callback+0x8c>
 8001efe:	2102      	movs	r1, #2
 8001f00:	4883      	ldr	r0, [pc, #524]	@ (8002110 <HAL_GPIO_EXTI_Callback+0x264>)
 8001f02:	f003 ff19 	bl	8005d38 <HAL_GPIO_ReadPin>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d115      	bne.n	8001f38 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		HAL_GPIO_ReadPin(EA_2_GPIO_Port, EA_2_Pin) ? counter2-- : counter2++;
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	4880      	ldr	r0, [pc, #512]	@ (8002110 <HAL_GPIO_EXTI_Callback+0x264>)
 8001f10:	f003 ff12 	bl	8005d38 <HAL_GPIO_ReadPin>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <HAL_GPIO_EXTI_Callback+0x7a>
 8001f1a:	4b7e      	ldr	r3, [pc, #504]	@ (8002114 <HAL_GPIO_EXTI_Callback+0x268>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	4a7c      	ldr	r2, [pc, #496]	@ (8002114 <HAL_GPIO_EXTI_Callback+0x268>)
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	e004      	b.n	8001f30 <HAL_GPIO_EXTI_Callback+0x84>
 8001f26:	4b7b      	ldr	r3, [pc, #492]	@ (8002114 <HAL_GPIO_EXTI_Callback+0x268>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	4a79      	ldr	r2, [pc, #484]	@ (8002114 <HAL_GPIO_EXTI_Callback+0x268>)
 8001f2e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_2_Pin);
 8001f30:	4b76      	ldr	r3, [pc, #472]	@ (800210c <HAL_GPIO_EXTI_Callback+0x260>)
 8001f32:	2202      	movs	r2, #2
 8001f34:	615a      	str	r2, [r3, #20]
 8001f36:	e13b      	b.n	80021b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_3_Pin) && (HAL_GPIO_ReadPin(EB_3_GPIO_Port, EB_3_Pin) == GPIO_PIN_SET))
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	d11c      	bne.n	8001f78 <HAL_GPIO_EXTI_Callback+0xcc>
 8001f3e:	2120      	movs	r1, #32
 8001f40:	486f      	ldr	r0, [pc, #444]	@ (8002100 <HAL_GPIO_EXTI_Callback+0x254>)
 8001f42:	f003 fef9 	bl	8005d38 <HAL_GPIO_ReadPin>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d115      	bne.n	8001f78 <HAL_GPIO_EXTI_Callback+0xcc>
	{
		HAL_GPIO_ReadPin(EA_3_GPIO_Port, EA_3_Pin) ? counter3-- : counter3++;
 8001f4c:	2110      	movs	r1, #16
 8001f4e:	486c      	ldr	r0, [pc, #432]	@ (8002100 <HAL_GPIO_EXTI_Callback+0x254>)
 8001f50:	f003 fef2 	bl	8005d38 <HAL_GPIO_ReadPin>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_GPIO_EXTI_Callback+0xba>
 8001f5a:	4b6f      	ldr	r3, [pc, #444]	@ (8002118 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	4a6d      	ldr	r2, [pc, #436]	@ (8002118 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	e004      	b.n	8001f70 <HAL_GPIO_EXTI_Callback+0xc4>
 8001f66:	4b6c      	ldr	r3, [pc, #432]	@ (8002118 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	4a6a      	ldr	r2, [pc, #424]	@ (8002118 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001f6e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_3_Pin);
 8001f70:	4b66      	ldr	r3, [pc, #408]	@ (800210c <HAL_GPIO_EXTI_Callback+0x260>)
 8001f72:	2220      	movs	r2, #32
 8001f74:	615a      	str	r2, [r3, #20]
 8001f76:	e11b      	b.n	80021b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_1_Pin) && (HAL_GPIO_ReadPin(EinB_1_GPIO_Port, EinB_1_Pin) == GPIO_PIN_SET))
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d11c      	bne.n	8001fb8 <HAL_GPIO_EXTI_Callback+0x10c>
 8001f7e:	2104      	movs	r1, #4
 8001f80:	4863      	ldr	r0, [pc, #396]	@ (8002110 <HAL_GPIO_EXTI_Callback+0x264>)
 8001f82:	f003 fed9 	bl	8005d38 <HAL_GPIO_ReadPin>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d115      	bne.n	8001fb8 <HAL_GPIO_EXTI_Callback+0x10c>
	{
		HAL_GPIO_ReadPin(EinA_1_GPIO_Port, EinA_1_Pin) ? counterIN1++ : counterIN1--;
 8001f8c:	2108      	movs	r1, #8
 8001f8e:	4860      	ldr	r0, [pc, #384]	@ (8002110 <HAL_GPIO_EXTI_Callback+0x264>)
 8001f90:	f003 fed2 	bl	8005d38 <HAL_GPIO_ReadPin>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_GPIO_EXTI_Callback+0xfa>
 8001f9a:	4b60      	ldr	r3, [pc, #384]	@ (800211c <HAL_GPIO_EXTI_Callback+0x270>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	4a5e      	ldr	r2, [pc, #376]	@ (800211c <HAL_GPIO_EXTI_Callback+0x270>)
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	e004      	b.n	8001fb0 <HAL_GPIO_EXTI_Callback+0x104>
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800211c <HAL_GPIO_EXTI_Callback+0x270>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	4a5b      	ldr	r2, [pc, #364]	@ (800211c <HAL_GPIO_EXTI_Callback+0x270>)
 8001fae:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_1_Pin);
 8001fb0:	4b56      	ldr	r3, [pc, #344]	@ (800210c <HAL_GPIO_EXTI_Callback+0x260>)
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	615a      	str	r2, [r3, #20]
 8001fb6:	e0fb      	b.n	80021b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_2_Pin) && (HAL_GPIO_ReadPin(EinB_2_GPIO_Port, EinB_2_Pin) == GPIO_PIN_SET))
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d11c      	bne.n	8001ff8 <HAL_GPIO_EXTI_Callback+0x14c>
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	4850      	ldr	r0, [pc, #320]	@ (8002104 <HAL_GPIO_EXTI_Callback+0x258>)
 8001fc2:	f003 feb9 	bl	8005d38 <HAL_GPIO_ReadPin>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d115      	bne.n	8001ff8 <HAL_GPIO_EXTI_Callback+0x14c>
	{
		HAL_GPIO_ReadPin(EinA_2_GPIO_Port, EinA_2_Pin) ? counterIN2-- : counterIN2++;
 8001fcc:	2102      	movs	r1, #2
 8001fce:	484d      	ldr	r0, [pc, #308]	@ (8002104 <HAL_GPIO_EXTI_Callback+0x258>)
 8001fd0:	f003 feb2 	bl	8005d38 <HAL_GPIO_ReadPin>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <HAL_GPIO_EXTI_Callback+0x13a>
 8001fda:	4b51      	ldr	r3, [pc, #324]	@ (8002120 <HAL_GPIO_EXTI_Callback+0x274>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	4a4f      	ldr	r2, [pc, #316]	@ (8002120 <HAL_GPIO_EXTI_Callback+0x274>)
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	e004      	b.n	8001ff0 <HAL_GPIO_EXTI_Callback+0x144>
 8001fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8002120 <HAL_GPIO_EXTI_Callback+0x274>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	3301      	adds	r3, #1
 8001fec:	4a4c      	ldr	r2, [pc, #304]	@ (8002120 <HAL_GPIO_EXTI_Callback+0x274>)
 8001fee:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_2_Pin);
 8001ff0:	4b46      	ldr	r3, [pc, #280]	@ (800210c <HAL_GPIO_EXTI_Callback+0x260>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	615a      	str	r2, [r3, #20]
 8001ff6:	e0db      	b.n	80021b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_3_Pin) && (HAL_GPIO_ReadPin(EinB_3_GPIO_Port, EinB_3_Pin) == GPIO_PIN_SET))
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ffe:	d11f      	bne.n	8002040 <HAL_GPIO_EXTI_Callback+0x194>
 8002000:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002004:	4847      	ldr	r0, [pc, #284]	@ (8002124 <HAL_GPIO_EXTI_Callback+0x278>)
 8002006:	f003 fe97 	bl	8005d38 <HAL_GPIO_ReadPin>
 800200a:	4603      	mov	r3, r0
 800200c:	2b01      	cmp	r3, #1
 800200e:	d117      	bne.n	8002040 <HAL_GPIO_EXTI_Callback+0x194>
	{
		HAL_GPIO_ReadPin(EinA_3_GPIO_Port, EinA_3_Pin) ? counterIN3++ : counterIN3--;
 8002010:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002014:	4843      	ldr	r0, [pc, #268]	@ (8002124 <HAL_GPIO_EXTI_Callback+0x278>)
 8002016:	f003 fe8f 	bl	8005d38 <HAL_GPIO_ReadPin>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_GPIO_EXTI_Callback+0x180>
 8002020:	4b41      	ldr	r3, [pc, #260]	@ (8002128 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	4a40      	ldr	r2, [pc, #256]	@ (8002128 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e004      	b.n	8002036 <HAL_GPIO_EXTI_Callback+0x18a>
 800202c:	4b3e      	ldr	r3, [pc, #248]	@ (8002128 <HAL_GPIO_EXTI_Callback+0x27c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	3b01      	subs	r3, #1
 8002032:	4a3d      	ldr	r2, [pc, #244]	@ (8002128 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002034:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_3_Pin);
 8002036:	4b35      	ldr	r3, [pc, #212]	@ (800210c <HAL_GPIO_EXTI_Callback+0x260>)
 8002038:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800203c:	615a      	str	r2, [r3, #20]
 800203e:	e0b7      	b.n	80021b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_4_Pin) && (HAL_GPIO_ReadPin(EinB_4_GPIO_Port, EinB_4_Pin) == GPIO_PIN_SET))
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002046:	d11f      	bne.n	8002088 <HAL_GPIO_EXTI_Callback+0x1dc>
 8002048:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800204c:	482d      	ldr	r0, [pc, #180]	@ (8002104 <HAL_GPIO_EXTI_Callback+0x258>)
 800204e:	f003 fe73 	bl	8005d38 <HAL_GPIO_ReadPin>
 8002052:	4603      	mov	r3, r0
 8002054:	2b01      	cmp	r3, #1
 8002056:	d117      	bne.n	8002088 <HAL_GPIO_EXTI_Callback+0x1dc>
	{
		HAL_GPIO_ReadPin(EinA_4_GPIO_Port, EinA_4_Pin) ? counterIN4-- : counterIN4++;
 8002058:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800205c:	4829      	ldr	r0, [pc, #164]	@ (8002104 <HAL_GPIO_EXTI_Callback+0x258>)
 800205e:	f003 fe6b 	bl	8005d38 <HAL_GPIO_ReadPin>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_GPIO_EXTI_Callback+0x1c8>
 8002068:	4b30      	ldr	r3, [pc, #192]	@ (800212c <HAL_GPIO_EXTI_Callback+0x280>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3b01      	subs	r3, #1
 800206e:	4a2f      	ldr	r2, [pc, #188]	@ (800212c <HAL_GPIO_EXTI_Callback+0x280>)
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e004      	b.n	800207e <HAL_GPIO_EXTI_Callback+0x1d2>
 8002074:	4b2d      	ldr	r3, [pc, #180]	@ (800212c <HAL_GPIO_EXTI_Callback+0x280>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3301      	adds	r3, #1
 800207a:	4a2c      	ldr	r2, [pc, #176]	@ (800212c <HAL_GPIO_EXTI_Callback+0x280>)
 800207c:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_4_Pin);
 800207e:	4b23      	ldr	r3, [pc, #140]	@ (800210c <HAL_GPIO_EXTI_Callback+0x260>)
 8002080:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002084:	615a      	str	r2, [r3, #20]
 8002086:	e093      	b.n	80021b0 <HAL_GPIO_EXTI_Callback+0x304>
	}

	// BUTTON
	else if((GPIO_Pin == Button_1_Pin) && (HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin) == GPIO_PIN_RESET))
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800208e:	d119      	bne.n	80020c4 <HAL_GPIO_EXTI_Callback+0x218>
 8002090:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002094:	4826      	ldr	r0, [pc, #152]	@ (8002130 <HAL_GPIO_EXTI_Callback+0x284>)
 8002096:	f003 fe4f 	bl	8005d38 <HAL_GPIO_ReadPin>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d111      	bne.n	80020c4 <HAL_GPIO_EXTI_Callback+0x218>
	{
		mode = mode + BLUE_STEP1;
 80020a0:	4b24      	ldr	r3, [pc, #144]	@ (8002134 <HAL_GPIO_EXTI_Callback+0x288>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b22      	ldr	r3, [pc, #136]	@ (8002134 <HAL_GPIO_EXTI_Callback+0x288>)
 80020aa:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_STEP1)
 80020ac:	4b21      	ldr	r3, [pc, #132]	@ (8002134 <HAL_GPIO_EXTI_Callback+0x288>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d902      	bls.n	80020ba <HAL_GPIO_EXTI_Callback+0x20e>
		{
			mode = VOID;
 80020b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002134 <HAL_GPIO_EXTI_Callback+0x288>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_1_Pin);
 80020ba:	4b14      	ldr	r3, [pc, #80]	@ (800210c <HAL_GPIO_EXTI_Callback+0x260>)
 80020bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020c0:	615a      	str	r2, [r3, #20]
 80020c2:	e075      	b.n	80021b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_2_Pin) && (HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin) == GPIO_PIN_RESET))
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ca:	d135      	bne.n	8002138 <HAL_GPIO_EXTI_Callback+0x28c>
 80020cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020d0:	4817      	ldr	r0, [pc, #92]	@ (8002130 <HAL_GPIO_EXTI_Callback+0x284>)
 80020d2:	f003 fe31 	bl	8005d38 <HAL_GPIO_ReadPin>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d12d      	bne.n	8002138 <HAL_GPIO_EXTI_Callback+0x28c>
	{
		mode = mode + BLUE_STEP1;
 80020dc:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <HAL_GPIO_EXTI_Callback+0x288>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	3301      	adds	r3, #1
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	4b13      	ldr	r3, [pc, #76]	@ (8002134 <HAL_GPIO_EXTI_Callback+0x288>)
 80020e6:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_STEP1)
 80020e8:	4b12      	ldr	r3, [pc, #72]	@ (8002134 <HAL_GPIO_EXTI_Callback+0x288>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d902      	bls.n	80020f6 <HAL_GPIO_EXTI_Callback+0x24a>
		{
			mode = VOID;
 80020f0:	4b10      	ldr	r3, [pc, #64]	@ (8002134 <HAL_GPIO_EXTI_Callback+0x288>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_2_Pin);
 80020f6:	4b05      	ldr	r3, [pc, #20]	@ (800210c <HAL_GPIO_EXTI_Callback+0x260>)
 80020f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020fc:	615a      	str	r2, [r3, #20]
 80020fe:	e057      	b.n	80021b0 <HAL_GPIO_EXTI_Callback+0x304>
 8002100:	40020400 	.word	0x40020400
 8002104:	40020000 	.word	0x40020000
 8002108:	200004d0 	.word	0x200004d0
 800210c:	40013c00 	.word	0x40013c00
 8002110:	40020800 	.word	0x40020800
 8002114:	200004d4 	.word	0x200004d4
 8002118:	200004d8 	.word	0x200004d8
 800211c:	200004dc 	.word	0x200004dc
 8002120:	200004e0 	.word	0x200004e0
 8002124:	40020c00 	.word	0x40020c00
 8002128:	200004e4 	.word	0x200004e4
 800212c:	200004e8 	.word	0x200004e8
 8002130:	40021000 	.word	0x40021000
 8002134:	200005fc 	.word	0x200005fc
	}
	else if((GPIO_Pin == Button_3_Pin) && (HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin) == GPIO_PIN_RESET))
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800213e:	d119      	bne.n	8002174 <HAL_GPIO_EXTI_Callback+0x2c8>
 8002140:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002144:	481c      	ldr	r0, [pc, #112]	@ (80021b8 <HAL_GPIO_EXTI_Callback+0x30c>)
 8002146:	f003 fdf7 	bl	8005d38 <HAL_GPIO_ReadPin>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d111      	bne.n	8002174 <HAL_GPIO_EXTI_Callback+0x2c8>
	{
		mode = mode + BLUE_STORAGE;
 8002150:	4b1a      	ldr	r3, [pc, #104]	@ (80021bc <HAL_GPIO_EXTI_Callback+0x310>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	3305      	adds	r3, #5
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b18      	ldr	r3, [pc, #96]	@ (80021bc <HAL_GPIO_EXTI_Callback+0x310>)
 800215a:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_STORAGE)
 800215c:	4b17      	ldr	r3, [pc, #92]	@ (80021bc <HAL_GPIO_EXTI_Callback+0x310>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b05      	cmp	r3, #5
 8002162:	d902      	bls.n	800216a <HAL_GPIO_EXTI_Callback+0x2be>
		{
			mode = VOID;
 8002164:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <HAL_GPIO_EXTI_Callback+0x310>)
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_3_Pin);
 800216a:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <HAL_GPIO_EXTI_Callback+0x314>)
 800216c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002170:	615a      	str	r2, [r3, #20]
 8002172:	e01d      	b.n	80021b0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_4_Pin) && (HAL_GPIO_ReadPin(Button_4_GPIO_Port, Button_4_Pin) == GPIO_PIN_RESET))
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800217a:	d119      	bne.n	80021b0 <HAL_GPIO_EXTI_Callback+0x304>
 800217c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002180:	4810      	ldr	r0, [pc, #64]	@ (80021c4 <HAL_GPIO_EXTI_Callback+0x318>)
 8002182:	f003 fdd9 	bl	8005d38 <HAL_GPIO_ReadPin>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d111      	bne.n	80021b0 <HAL_GPIO_EXTI_Callback+0x304>
	{
		mode = mode + BLUE_STORAGE;
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <HAL_GPIO_EXTI_Callback+0x310>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	3305      	adds	r3, #5
 8002192:	b2da      	uxtb	r2, r3
 8002194:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <HAL_GPIO_EXTI_Callback+0x310>)
 8002196:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_STORAGE)
 8002198:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <HAL_GPIO_EXTI_Callback+0x310>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b05      	cmp	r3, #5
 800219e:	d902      	bls.n	80021a6 <HAL_GPIO_EXTI_Callback+0x2fa>
		{
			mode = VOID;
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_GPIO_EXTI_Callback+0x310>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_4_Pin);
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_GPIO_EXTI_Callback+0x314>)
 80021a8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021ac:	615a      	str	r2, [r3, #20]
	}
}
 80021ae:	e7ff      	b.n	80021b0 <HAL_GPIO_EXTI_Callback+0x304>
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40021000 	.word	0x40021000
 80021bc:	200005fc 	.word	0x200005fc
 80021c0:	40013c00 	.word	0x40013c00
 80021c4:	40020c00 	.word	0x40020c00

080021c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c8:	b5b0      	push	{r4, r5, r7, lr}
 80021ca:	b0c4      	sub	sp, #272	@ 0x110
 80021cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ce:	f003 f9dd 	bl	800558c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021d2:	f000 fbed 	bl	80029b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021d6:	f000 ff0b 	bl	8002ff0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80021da:	f000 fc53 	bl	8002a84 <MX_I2C2_Init>
  MX_TIM1_Init();
 80021de:	f000 fc7f 	bl	8002ae0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80021e2:	f000 fd41 	bl	8002c68 <MX_TIM2_Init>
  MX_TIM8_Init();
 80021e6:	f000 fdc1 	bl	8002d6c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80021ea:	f000 fe83 	bl	8002ef4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80021ee:	f000 feab 	bl	8002f48 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80021f2:	f000 fed3 	bl	8002f9c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80021f6:	2100      	movs	r1, #0
 80021f8:	48d5      	ldr	r0, [pc, #852]	@ (8002550 <main+0x388>)
 80021fa:	f004 ffc5 	bl	8007188 <HAL_TIM_PWM_Start_IT>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <main+0x40>
  {
	  Error_Handler();
 8002204:	f001 f9c8 	bl	8003598 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8002208:	2104      	movs	r1, #4
 800220a:	48d1      	ldr	r0, [pc, #836]	@ (8002550 <main+0x388>)
 800220c:	f004 ffbc 	bl	8007188 <HAL_TIM_PWM_Start_IT>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <main+0x52>
  {
	  Error_Handler();
 8002216:	f001 f9bf 	bl	8003598 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3) != HAL_OK)
 800221a:	2108      	movs	r1, #8
 800221c:	48cc      	ldr	r0, [pc, #816]	@ (8002550 <main+0x388>)
 800221e:	f004 ffb3 	bl	8007188 <HAL_TIM_PWM_Start_IT>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <main+0x64>
  {
	  Error_Handler();
 8002228:	f001 f9b6 	bl	8003598 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 800222c:	210c      	movs	r1, #12
 800222e:	48c8      	ldr	r0, [pc, #800]	@ (8002550 <main+0x388>)
 8002230:	f004 ffaa 	bl	8007188 <HAL_TIM_PWM_Start_IT>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <main+0x76>
  {
	  Error_Handler();
 800223a:	f001 f9ad 	bl	8003598 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1) != HAL_OK)
 800223e:	2100      	movs	r1, #0
 8002240:	48c4      	ldr	r0, [pc, #784]	@ (8002554 <main+0x38c>)
 8002242:	f004 ffa1 	bl	8007188 <HAL_TIM_PWM_Start_IT>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <main+0x88>
  {
	  Error_Handler();
 800224c:	f001 f9a4 	bl	8003598 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2) != HAL_OK)
 8002250:	2104      	movs	r1, #4
 8002252:	48c0      	ldr	r0, [pc, #768]	@ (8002554 <main+0x38c>)
 8002254:	f004 ff98 	bl	8007188 <HAL_TIM_PWM_Start_IT>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <main+0x9a>
  {
	  Error_Handler();
 800225e:	f001 f99b 	bl	8003598 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3) != HAL_OK)
 8002262:	2108      	movs	r1, #8
 8002264:	48bb      	ldr	r0, [pc, #748]	@ (8002554 <main+0x38c>)
 8002266:	f004 ff8f 	bl	8007188 <HAL_TIM_PWM_Start_IT>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <main+0xac>
  {
	  Error_Handler();
 8002270:	f001 f992 	bl	8003598 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4) != HAL_OK)
 8002274:	210c      	movs	r1, #12
 8002276:	48b7      	ldr	r0, [pc, #732]	@ (8002554 <main+0x38c>)
 8002278:	f004 ff86 	bl	8007188 <HAL_TIM_PWM_Start_IT>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <main+0xbe>
  {
	  Error_Handler();
 8002282:	f001 f989 	bl	8003598 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3) != HAL_OK)
 8002286:	2108      	movs	r1, #8
 8002288:	48b3      	ldr	r0, [pc, #716]	@ (8002558 <main+0x390>)
 800228a:	f004 ff7d 	bl	8007188 <HAL_TIM_PWM_Start_IT>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <main+0xd0>
  {
	  Error_Handler();
 8002294:	f001 f980 	bl	8003598 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4) != HAL_OK)
 8002298:	210c      	movs	r1, #12
 800229a:	48af      	ldr	r0, [pc, #700]	@ (8002558 <main+0x390>)
 800229c:	f004 ff74 	bl	8007188 <HAL_TIM_PWM_Start_IT>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <main+0xe2>
  {
	  Error_Handler();
 80022a6:	f001 f977 	bl	8003598 <Error_Handler>
  }

  if(HAL_UART_Receive_IT(&huart1, receive, 1) != HAL_OK)
 80022aa:	2201      	movs	r2, #1
 80022ac:	49ab      	ldr	r1, [pc, #684]	@ (800255c <main+0x394>)
 80022ae:	48ac      	ldr	r0, [pc, #688]	@ (8002560 <main+0x398>)
 80022b0:	f005 ff7a 	bl	80081a8 <HAL_UART_Receive_IT>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <main+0xf6>
  {
	  Error_Handler();
 80022ba:	f001 f96d 	bl	8003598 <Error_Handler>
  }
  if(HAL_UART_Receive_IT(&huart2, receiveCAM, 1) != HAL_OK)
 80022be:	2201      	movs	r2, #1
 80022c0:	49a8      	ldr	r1, [pc, #672]	@ (8002564 <main+0x39c>)
 80022c2:	48a9      	ldr	r0, [pc, #676]	@ (8002568 <main+0x3a0>)
 80022c4:	f005 ff70 	bl	80081a8 <HAL_UART_Receive_IT>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <main+0x10a>
  {
	  Error_Handler();
 80022ce:	f001 f963 	bl	8003598 <Error_Handler>
  }
  if(HAL_UART_Receive_IT(&huart3, receiveMEGA, 1) != HAL_OK)
 80022d2:	2201      	movs	r2, #1
 80022d4:	49a5      	ldr	r1, [pc, #660]	@ (800256c <main+0x3a4>)
 80022d6:	48a6      	ldr	r0, [pc, #664]	@ (8002570 <main+0x3a8>)
 80022d8:	f005 ff66 	bl	80081a8 <HAL_UART_Receive_IT>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <main+0x11e>
  {
	  Error_Handler();
 80022e2:	f001 f959 	bl	8003598 <Error_Handler>
  }

  initializeSilos();
 80022e6:	f001 ffc7 	bl	8004278 <initializeSilos>
  external_global blue_step1 = {0.0, 6000.0, 0.0};
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
 80022f6:	a390      	add	r3, pc, #576	@ (adr r3, 8002538 <main+0x370>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
  external_global blue_step2 = {3770.0, 6000.0, 0.0};
 800230c:	4b99      	ldr	r3, [pc, #612]	@ (8002574 <main+0x3ac>)
 800230e:	f107 04c0 	add.w	r4, r7, #192	@ 0xc0
 8002312:	461d      	mov	r5, r3
 8002314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002318:	e895 0003 	ldmia.w	r5, {r0, r1}
 800231c:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_step3 = {3770.0, 9500.0, 0.0};
 8002320:	4b95      	ldr	r3, [pc, #596]	@ (8002578 <main+0x3b0>)
 8002322:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8002326:	461d      	mov	r5, r3
 8002328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800232a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800232c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002330:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_step4 = {3770.0, 9500.0, -90.0};
 8002334:	4b91      	ldr	r3, [pc, #580]	@ (800257c <main+0x3b4>)
 8002336:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 800233a:	461d      	mov	r5, r3
 800233c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800233e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002340:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002344:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_storage = {1100.0, 9500.0, 0.0};
 8002348:	4b8d      	ldr	r3, [pc, #564]	@ (8002580 <main+0x3b8>)
 800234a:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 800234e:	461d      	mov	r5, r3
 8002350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002354:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002358:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_silo = {3700.0, 9500.0, 90.0};
 800235c:	4b89      	ldr	r3, [pc, #548]	@ (8002584 <main+0x3bc>)
 800235e:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8002362:	461d      	mov	r5, r3
 8002364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002368:	e895 0003 	ldmia.w	r5, {r0, r1}
 800236c:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blueBall[3] = {
 8002370:	4a85      	ldr	r2, [pc, #532]	@ (8002588 <main+0x3c0>)
 8002372:	f107 0318 	add.w	r3, r7, #24
 8002376:	4611      	mov	r1, r2
 8002378:	2248      	movs	r2, #72	@ 0x48
 800237a:	4618      	mov	r0, r3
 800237c:	f008 fd5b 	bl	800ae36 <memcpy>
  };

//  external_global blue_storage = {-2600.0, 0.0, 0.0};
//  external_global blue_silo = {0.0, 0.0, 90.0};

  double tolerance = 200.0;
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	4b81      	ldr	r3, [pc, #516]	@ (800258c <main+0x3c4>)
 8002386:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_init();
 800238a:	f7ff fd0c 	bl	8001da6 <lcd_init>

	  int FL_distance = sensorMEGA[0];
 800238e:	4b80      	ldr	r3, [pc, #512]	@ (8002590 <main+0x3c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	  int FR_distance = sensorMEGA[2];
 8002396:	4b7e      	ldr	r3, [pc, #504]	@ (8002590 <main+0x3c8>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

	  external_global position = odometry_eg();
 800239e:	f001 f91f 	bl	80035e0 <odometry_eg>
 80023a2:	eeb0 5a40 	vmov.f32	s10, s0
 80023a6:	eef0 5a60 	vmov.f32	s11, s1
 80023aa:	eeb0 6a41 	vmov.f32	s12, s2
 80023ae:	eef0 6a61 	vmov.f32	s13, s3
 80023b2:	eeb0 7a42 	vmov.f32	s14, s4
 80023b6:	eef0 7a62 	vmov.f32	s15, s5
 80023ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023c2:	ed83 5b00 	vstr	d5, [r3]
 80023c6:	ed83 6b02 	vstr	d6, [r3, #8]
 80023ca:	ed83 7b04 	vstr	d7, [r3, #16]
//	  EKF position_ekf = odometry_fusion();
	  display_EG();
 80023ce:	f001 fa4b 	bl	8003868 <display_EG>
//	  displayKalman(position_ekf);
//	  displayCounter();

	  bool blue_step1_check = atTargetEG(blue_step1, position, tolerance+300, 1);
 80023d2:	a35b      	add	r3, pc, #364	@ (adr r3, 8002540 <main+0x378>)
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 80023dc:	f7fd ff56 	bl	800028c <__adddf3>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	ec43 2b16 	vmov	d6, r2, r3
 80023e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023f0:	ed93 3b00 	vldr	d3, [r3]
 80023f4:	ed93 4b02 	vldr	d4, [r3, #8]
 80023f8:	ed93 5b04 	vldr	d5, [r3, #16]
 80023fc:	ed97 0b36 	vldr	d0, [r7, #216]	@ 0xd8
 8002400:	ed97 1b38 	vldr	d1, [r7, #224]	@ 0xe0
 8002404:	ed97 2b3a 	vldr	d2, [r7, #232]	@ 0xe8
 8002408:	ed9f 7b4f 	vldr	d7, [pc, #316]	@ 8002548 <main+0x380>
 800240c:	f001 fc5e 	bl	8003ccc <atTargetEG>
 8002410:	4603      	mov	r3, r0
 8002412:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
	  bool blue_step2_check = atTargetEG(blue_step2, position, tolerance, 1);
 8002416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800241a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800241e:	ed93 3b00 	vldr	d3, [r3]
 8002422:	ed93 4b02 	vldr	d4, [r3, #8]
 8002426:	ed93 5b04 	vldr	d5, [r3, #16]
 800242a:	ed97 0b30 	vldr	d0, [r7, #192]	@ 0xc0
 800242e:	ed97 1b32 	vldr	d1, [r7, #200]	@ 0xc8
 8002432:	ed97 2b34 	vldr	d2, [r7, #208]	@ 0xd0
 8002436:	ed9f 7b44 	vldr	d7, [pc, #272]	@ 8002548 <main+0x380>
 800243a:	ed97 6b40 	vldr	d6, [r7, #256]	@ 0x100
 800243e:	f001 fc45 	bl	8003ccc <atTargetEG>
 8002442:	4603      	mov	r3, r0
 8002444:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
	  bool blue_step3_check = atTargetEG(blue_step3, position, tolerance, 1);
 8002448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800244c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002450:	ed93 3b00 	vldr	d3, [r3]
 8002454:	ed93 4b02 	vldr	d4, [r3, #8]
 8002458:	ed93 5b04 	vldr	d5, [r3, #16]
 800245c:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8002460:	ed97 1b2c 	vldr	d1, [r7, #176]	@ 0xb0
 8002464:	ed97 2b2e 	vldr	d2, [r7, #184]	@ 0xb8
 8002468:	ed9f 7b37 	vldr	d7, [pc, #220]	@ 8002548 <main+0x380>
 800246c:	ed97 6b40 	vldr	d6, [r7, #256]	@ 0x100
 8002470:	f001 fc2c 	bl	8003ccc <atTargetEG>
 8002474:	4603      	mov	r3, r0
 8002476:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
	  bool blue_step4_check = atTargetEG(blue_step4, position, tolerance, 1);
 800247a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800247e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002482:	ed93 3b00 	vldr	d3, [r3]
 8002486:	ed93 4b02 	vldr	d4, [r3, #8]
 800248a:	ed93 5b04 	vldr	d5, [r3, #16]
 800248e:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8002492:	ed97 1b26 	vldr	d1, [r7, #152]	@ 0x98
 8002496:	ed97 2b28 	vldr	d2, [r7, #160]	@ 0xa0
 800249a:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8002548 <main+0x380>
 800249e:	ed97 6b40 	vldr	d6, [r7, #256]	@ 0x100
 80024a2:	f001 fc13 	bl	8003ccc <atTargetEG>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
	  bool blue_storage_check = atTargetEG(blue_storage, position, tolerance+300, 1);
 80024ac:	a324      	add	r3, pc, #144	@ (adr r3, 8002540 <main+0x378>)
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 80024b6:	f7fd fee9 	bl	800028c <__adddf3>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	ec43 2b16 	vmov	d6, r2, r3
 80024c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80024c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024ca:	ed93 3b00 	vldr	d3, [r3]
 80024ce:	ed93 4b02 	vldr	d4, [r3, #8]
 80024d2:	ed93 5b04 	vldr	d5, [r3, #16]
 80024d6:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 80024da:	ed97 1b20 	vldr	d1, [r7, #128]	@ 0x80
 80024de:	ed97 2b22 	vldr	d2, [r7, #136]	@ 0x88
 80024e2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8002548 <main+0x380>
 80024e6:	f001 fbf1 	bl	8003ccc <atTargetEG>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3
	  bool blue_silo_check = atTargetEG(blue_silo, position, tolerance+300, 1);
 80024f0:	a313      	add	r3, pc, #76	@ (adr r3, 8002540 <main+0x378>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 80024fa:	f7fd fec7 	bl	800028c <__adddf3>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	ec43 2b16 	vmov	d6, r2, r3
 8002506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800250a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800250e:	ed93 3b00 	vldr	d3, [r3]
 8002512:	ed93 4b02 	vldr	d4, [r3, #8]
 8002516:	ed93 5b04 	vldr	d5, [r3, #16]
 800251a:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 800251e:	ed97 1b1a 	vldr	d1, [r7, #104]	@ 0x68
 8002522:	ed97 2b1c 	vldr	d2, [r7, #112]	@ 0x70
 8002526:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8002548 <main+0x380>
 800252a:	f001 fbcf 	bl	8003ccc <atTargetEG>
 800252e:	4603      	mov	r3, r0
 8002530:	e030      	b.n	8002594 <main+0x3cc>
 8002532:	bf00      	nop
 8002534:	f3af 8000 	nop.w
 8002538:	00000000 	.word	0x00000000
 800253c:	40b77000 	.word	0x40b77000
 8002540:	00000000 	.word	0x00000000
 8002544:	4072c000 	.word	0x4072c000
 8002548:	00000000 	.word	0x00000000
 800254c:	3ff00000 	.word	0x3ff00000
 8002550:	20000320 	.word	0x20000320
 8002554:	200003b0 	.word	0x200003b0
 8002558:	20000368 	.word	0x20000368
 800255c:	200004ec 	.word	0x200004ec
 8002560:	200003f8 	.word	0x200003f8
 8002564:	20000540 	.word	0x20000540
 8002568:	20000440 	.word	0x20000440
 800256c:	200005b0 	.word	0x200005b0
 8002570:	20000488 	.word	0x20000488
 8002574:	0800f2f8 	.word	0x0800f2f8
 8002578:	0800f310 	.word	0x0800f310
 800257c:	0800f328 	.word	0x0800f328
 8002580:	0800f340 	.word	0x0800f340
 8002584:	0800f358 	.word	0x0800f358
 8002588:	0800f370 	.word	0x0800f370
 800258c:	40690000 	.word	0x40690000
 8002590:	200005ec 	.word	0x200005ec
 8002594:	f887 30f2 	strb.w	r3, [r7, #242]	@ 0xf2

	  switch(mode)
 8002598:	4bb7      	ldr	r3, [pc, #732]	@ (8002878 <main+0x6b0>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	3b01      	subs	r3, #1
 800259e:	2b10      	cmp	r3, #16
 80025a0:	f200 81b5 	bhi.w	800290e <main+0x746>
 80025a4:	a201      	add	r2, pc, #4	@ (adr r2, 80025ac <main+0x3e4>)
 80025a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025aa:	bf00      	nop
 80025ac:	080025f1 	.word	0x080025f1
 80025b0:	0800263d 	.word	0x0800263d
 80025b4:	08002689 	.word	0x08002689
 80025b8:	080026d5 	.word	0x080026d5
 80025bc:	08002721 	.word	0x08002721
 80025c0:	0800278b 	.word	0x0800278b
 80025c4:	080027b3 	.word	0x080027b3
 80025c8:	08002889 	.word	0x08002889
 80025cc:	0800294b 	.word	0x0800294b
 80025d0:	0800294b 	.word	0x0800294b
 80025d4:	0800294b 	.word	0x0800294b
 80025d8:	0800294b 	.word	0x0800294b
 80025dc:	0800294b 	.word	0x0800294b
 80025e0:	0800294b 	.word	0x0800294b
 80025e4:	0800294b 	.word	0x0800294b
 80025e8:	0800294b 	.word	0x0800294b
 80025ec:	0800294b 	.word	0x0800294b
	  {
	  case BLUE_STEP1:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80025f0:	2201      	movs	r2, #1
 80025f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025f6:	48a1      	ldr	r0, [pc, #644]	@ (800287c <main+0x6b4>)
 80025f8:	f003 fbb6 	bl	8005d68 <HAL_GPIO_WritePin>
		  PID_EG(blue_step1, 1.2, 0.0, 0.0, 2.5, 0.8, 4000);
 80025fc:	ed97 0b36 	vldr	d0, [r7, #216]	@ 0xd8
 8002600:	ed97 1b38 	vldr	d1, [r7, #224]	@ 0xe0
 8002604:	ed97 2b3a 	vldr	d2, [r7, #232]	@ 0xe8
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	4b9c      	ldr	r3, [pc, #624]	@ (8002880 <main+0x6b8>)
 800260e:	e9cd 2300 	strd	r2, r3, [sp]
 8002612:	ed9f 7b7d 	vldr	d7, [pc, #500]	@ 8002808 <main+0x640>
 8002616:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8002810 <main+0x648>
 800261a:	ed9f 5b7f 	vldr	d5, [pc, #508]	@ 8002818 <main+0x650>
 800261e:	ed9f 4b7e 	vldr	d4, [pc, #504]	@ 8002818 <main+0x650>
 8002622:	ed9f 3b7f 	vldr	d3, [pc, #508]	@ 8002820 <main+0x658>
 8002626:	f001 fc1b 	bl	8003e60 <PID_EG>
		  if(blue_step1_check)
 800262a:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 818d 	beq.w	800294e <main+0x786>
		  {
			  mode = BLUE_STEP2;
 8002634:	4b90      	ldr	r3, [pc, #576]	@ (8002878 <main+0x6b0>)
 8002636:	2202      	movs	r2, #2
 8002638:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800263a:	e188      	b.n	800294e <main+0x786>
	  case BLUE_STEP2:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800263c:	2200      	movs	r2, #0
 800263e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002642:	488e      	ldr	r0, [pc, #568]	@ (800287c <main+0x6b4>)
 8002644:	f003 fb90 	bl	8005d68 <HAL_GPIO_WritePin>
		  PID_EG(blue_step2, 1.9, 0.0, 0.0, 2.5, 0.9, 5500);
 8002648:	ed97 0b30 	vldr	d0, [r7, #192]	@ 0xc0
 800264c:	ed97 1b32 	vldr	d1, [r7, #200]	@ 0xc8
 8002650:	ed97 2b34 	vldr	d2, [r7, #208]	@ 0xd0
 8002654:	a374      	add	r3, pc, #464	@ (adr r3, 8002828 <main+0x660>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	e9cd 2300 	strd	r2, r3, [sp]
 800265e:	ed9f 7b74 	vldr	d7, [pc, #464]	@ 8002830 <main+0x668>
 8002662:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8002810 <main+0x648>
 8002666:	ed9f 5b6c 	vldr	d5, [pc, #432]	@ 8002818 <main+0x650>
 800266a:	ed9f 4b6b 	vldr	d4, [pc, #428]	@ 8002818 <main+0x650>
 800266e:	ed9f 3b72 	vldr	d3, [pc, #456]	@ 8002838 <main+0x670>
 8002672:	f001 fbf5 	bl	8003e60 <PID_EG>
		  if(blue_step2_check)
 8002676:	f897 30f6 	ldrb.w	r3, [r7, #246]	@ 0xf6
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8169 	beq.w	8002952 <main+0x78a>
		  {
			  mode = BLUE_STEP3;
 8002680:	4b7d      	ldr	r3, [pc, #500]	@ (8002878 <main+0x6b0>)
 8002682:	2203      	movs	r2, #3
 8002684:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002686:	e164      	b.n	8002952 <main+0x78a>
	  case BLUE_STEP3:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002688:	2201      	movs	r2, #1
 800268a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800268e:	487b      	ldr	r0, [pc, #492]	@ (800287c <main+0x6b4>)
 8002690:	f003 fb6a 	bl	8005d68 <HAL_GPIO_WritePin>
		  PID_EG(blue_step3, 1.5, 0.0, 0.0, 2.5, 0.8, 3500);
 8002694:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8002698:	ed97 1b2c 	vldr	d1, [r7, #176]	@ 0xb0
 800269c:	ed97 2b2e 	vldr	d2, [r7, #184]	@ 0xb8
 80026a0:	a367      	add	r3, pc, #412	@ (adr r3, 8002840 <main+0x678>)
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	e9cd 2300 	strd	r2, r3, [sp]
 80026aa:	ed9f 7b57 	vldr	d7, [pc, #348]	@ 8002808 <main+0x640>
 80026ae:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8002810 <main+0x648>
 80026b2:	ed9f 5b59 	vldr	d5, [pc, #356]	@ 8002818 <main+0x650>
 80026b6:	ed9f 4b58 	vldr	d4, [pc, #352]	@ 8002818 <main+0x650>
 80026ba:	ed9f 3b63 	vldr	d3, [pc, #396]	@ 8002848 <main+0x680>
 80026be:	f001 fbcf 	bl	8003e60 <PID_EG>
		  if(blue_step3_check)
 80026c2:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8145 	beq.w	8002956 <main+0x78e>
		  {
			  mode = BLUE_STORAGE;
 80026cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002878 <main+0x6b0>)
 80026ce:	2205      	movs	r2, #5
 80026d0:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80026d2:	e140      	b.n	8002956 <main+0x78e>
	  case BLUE_STEP4:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80026d4:	2200      	movs	r2, #0
 80026d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026da:	4868      	ldr	r0, [pc, #416]	@ (800287c <main+0x6b4>)
 80026dc:	f003 fb44 	bl	8005d68 <HAL_GPIO_WritePin>
		  PID_EG(blue_step4, 1.0, 0.0, 0.0, 1.0, 0.8, 1500);
 80026e0:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 80026e4:	ed97 1b26 	vldr	d1, [r7, #152]	@ 0x98
 80026e8:	ed97 2b28 	vldr	d2, [r7, #160]	@ 0xa0
 80026ec:	a358      	add	r3, pc, #352	@ (adr r3, 8002850 <main+0x688>)
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	e9cd 2300 	strd	r2, r3, [sp]
 80026f6:	ed9f 7b44 	vldr	d7, [pc, #272]	@ 8002808 <main+0x640>
 80026fa:	ed9f 6b57 	vldr	d6, [pc, #348]	@ 8002858 <main+0x690>
 80026fe:	ed9f 5b46 	vldr	d5, [pc, #280]	@ 8002818 <main+0x650>
 8002702:	ed9f 4b45 	vldr	d4, [pc, #276]	@ 8002818 <main+0x650>
 8002706:	ed9f 3b54 	vldr	d3, [pc, #336]	@ 8002858 <main+0x690>
 800270a:	f001 fba9 	bl	8003e60 <PID_EG>
		  if(blue_step4_check)
 800270e:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8121 	beq.w	800295a <main+0x792>
		  {
			  mode = BLUE_STORAGE;
 8002718:	4b57      	ldr	r3, [pc, #348]	@ (8002878 <main+0x6b0>)
 800271a:	2205      	movs	r2, #5
 800271c:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800271e:	e11c      	b.n	800295a <main+0x792>
	  case BLUE_STORAGE:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002720:	2201      	movs	r2, #1
 8002722:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002726:	4855      	ldr	r0, [pc, #340]	@ (800287c <main+0x6b4>)
 8002728:	f003 fb1e 	bl	8005d68 <HAL_GPIO_WritePin>
		  setMotorSpeed(1, 0);
 800272c:	ed9f 0b3a 	vldr	d0, [pc, #232]	@ 8002818 <main+0x650>
 8002730:	2001      	movs	r0, #1
 8002732:	f7fe fc93 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8002736:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 8002818 <main+0x650>
 800273a:	2002      	movs	r0, #2
 800273c:	f7fe fc8e 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 8002740:	ed9f 0b35 	vldr	d0, [pc, #212]	@ 8002818 <main+0x650>
 8002744:	2007      	movs	r0, #7
 8002746:	f7fe fc89 	bl	800105c <setMotorSpeed>
		  PID_EG(blue_storage, 1.8, 0.0, 0.0, 1.5, 0.7, 3500);
 800274a:	ed97 0b1e 	vldr	d0, [r7, #120]	@ 0x78
 800274e:	ed97 1b20 	vldr	d1, [r7, #128]	@ 0x80
 8002752:	ed97 2b22 	vldr	d2, [r7, #136]	@ 0x88
 8002756:	a33a      	add	r3, pc, #232	@ (adr r3, 8002840 <main+0x678>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	e9cd 2300 	strd	r2, r3, [sp]
 8002760:	ed9f 7b3f 	vldr	d7, [pc, #252]	@ 8002860 <main+0x698>
 8002764:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8002848 <main+0x680>
 8002768:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8002818 <main+0x650>
 800276c:	ed9f 4b2a 	vldr	d4, [pc, #168]	@ 8002818 <main+0x650>
 8002770:	ed9f 3b3d 	vldr	d3, [pc, #244]	@ 8002868 <main+0x6a0>
 8002774:	f001 fb74 	bl	8003e60 <PID_EG>
		  if(blue_storage_check)
 8002778:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80ee 	beq.w	800295e <main+0x796>
		  {
			  mode = BLUE_FIND_BALL;
 8002782:	4b3d      	ldr	r3, [pc, #244]	@ (8002878 <main+0x6b0>)
 8002784:	2206      	movs	r2, #6
 8002786:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002788:	e0e9      	b.n	800295e <main+0x796>
	  case BLUE_FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800278a:	2200      	movs	r2, #0
 800278c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002790:	483a      	ldr	r0, [pc, #232]	@ (800287c <main+0x6b4>)
 8002792:	f003 fae9 	bl	8005d68 <HAL_GPIO_WritePin>
		  findAndTakeBall(blueBall);
 8002796:	f107 0318 	add.w	r3, r7, #24
 800279a:	4618      	mov	r0, r3
 800279c:	f002 f89c 	bl	80048d8 <findAndTakeBall>
		  if(sensorMEGA[3] == 0)
 80027a0:	4b38      	ldr	r3, [pc, #224]	@ (8002884 <main+0x6bc>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f040 80dc 	bne.w	8002962 <main+0x79a>
		  {
			  mode = BLUE_FACING_SILO;
 80027aa:	4b33      	ldr	r3, [pc, #204]	@ (8002878 <main+0x6b0>)
 80027ac:	2207      	movs	r2, #7
 80027ae:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80027b0:	e0d7      	b.n	8002962 <main+0x79a>
	  case BLUE_FACING_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80027b2:	2201      	movs	r2, #1
 80027b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027b8:	4830      	ldr	r0, [pc, #192]	@ (800287c <main+0x6b4>)
 80027ba:	f003 fad5 	bl	8005d68 <HAL_GPIO_WritePin>
		  servo_write(120);
 80027be:	2078      	movs	r0, #120	@ 0x78
 80027c0:	f001 fb36 	bl	8003e30 <servo_write>
		  PID_EG(blue_silo, 1.8, 0.0, 0.0, 1.5, 0.8, 3000);
 80027c4:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80027c8:	ed97 1b1a 	vldr	d1, [r7, #104]	@ 0x68
 80027cc:	ed97 2b1c 	vldr	d2, [r7, #112]	@ 0x70
 80027d0:	a327      	add	r3, pc, #156	@ (adr r3, 8002870 <main+0x6a8>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	e9cd 2300 	strd	r2, r3, [sp]
 80027da:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8002808 <main+0x640>
 80027de:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8002848 <main+0x680>
 80027e2:	ed9f 5b0d 	vldr	d5, [pc, #52]	@ 8002818 <main+0x650>
 80027e6:	ed9f 4b0c 	vldr	d4, [pc, #48]	@ 8002818 <main+0x650>
 80027ea:	ed9f 3b1f 	vldr	d3, [pc, #124]	@ 8002868 <main+0x6a0>
 80027ee:	f001 fb37 	bl	8003e60 <PID_EG>
		  if(blue_silo_check)
 80027f2:	f897 30f2 	ldrb.w	r3, [r7, #242]	@ 0xf2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80b5 	beq.w	8002966 <main+0x79e>
		  {
			  mode = BLUE_FIND_SILO;
 80027fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002878 <main+0x6b0>)
 80027fe:	2208      	movs	r2, #8
 8002800:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002802:	e0b0      	b.n	8002966 <main+0x79e>
 8002804:	f3af 8000 	nop.w
 8002808:	9999999a 	.word	0x9999999a
 800280c:	3fe99999 	.word	0x3fe99999
 8002810:	00000000 	.word	0x00000000
 8002814:	40040000 	.word	0x40040000
	...
 8002820:	33333333 	.word	0x33333333
 8002824:	3ff33333 	.word	0x3ff33333
 8002828:	00000000 	.word	0x00000000
 800282c:	40b57c00 	.word	0x40b57c00
 8002830:	cccccccd 	.word	0xcccccccd
 8002834:	3feccccc 	.word	0x3feccccc
 8002838:	66666666 	.word	0x66666666
 800283c:	3ffe6666 	.word	0x3ffe6666
 8002840:	00000000 	.word	0x00000000
 8002844:	40ab5800 	.word	0x40ab5800
 8002848:	00000000 	.word	0x00000000
 800284c:	3ff80000 	.word	0x3ff80000
 8002850:	00000000 	.word	0x00000000
 8002854:	40977000 	.word	0x40977000
 8002858:	00000000 	.word	0x00000000
 800285c:	3ff00000 	.word	0x3ff00000
 8002860:	66666666 	.word	0x66666666
 8002864:	3fe66666 	.word	0x3fe66666
 8002868:	cccccccd 	.word	0xcccccccd
 800286c:	3ffccccc 	.word	0x3ffccccc
 8002870:	00000000 	.word	0x00000000
 8002874:	40a77000 	.word	0x40a77000
 8002878:	200005fc 	.word	0x200005fc
 800287c:	40020c00 	.word	0x40020c00
 8002880:	40af4000 	.word	0x40af4000
 8002884:	200005ec 	.word	0x200005ec
	  case BLUE_FIND_SILO:
		  placeBallInSilo(blue_silo, 1.3, 0.0, 0.0, 1.5);
 8002888:	ed97 1b18 	vldr	d1, [r7, #96]	@ 0x60
 800288c:	ed97 2b1a 	vldr	d2, [r7, #104]	@ 0x68
 8002890:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 8002894:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8002978 <main+0x7b0>
 8002898:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 8002980 <main+0x7b8>
 800289c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8002980 <main+0x7b8>
 80028a0:	ed9f 3b39 	vldr	d3, [pc, #228]	@ 8002988 <main+0x7c0>
 80028a4:	eeb0 0a41 	vmov.f32	s0, s2
 80028a8:	eef0 0a61 	vmov.f32	s1, s3
 80028ac:	eeb0 1a42 	vmov.f32	s2, s4
 80028b0:	eef0 1a62 	vmov.f32	s3, s5
 80028b4:	eeb0 2a47 	vmov.f32	s4, s14
 80028b8:	eef0 2a67 	vmov.f32	s5, s15
 80028bc:	f001 fee8 	bl	8004690 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 80028c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	dd03      	ble.n	80028d0 <main+0x708>
 80028c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028cc:	2b0a      	cmp	r3, #10
 80028ce:	dd07      	ble.n	80028e0 <main+0x718>
 80028d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	dd48      	ble.n	800296a <main+0x7a2>
 80028d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028dc:	2b0a      	cmp	r3, #10
 80028de:	dc44      	bgt.n	800296a <main+0x7a2>
		  {
			  setMotorSpeed(1, -2000);
 80028e0:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8002990 <main+0x7c8>
 80028e4:	2001      	movs	r0, #1
 80028e6:	f7fe fbb9 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2500);
 80028ea:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8002998 <main+0x7d0>
 80028ee:	2002      	movs	r0, #2
 80028f0:	f7fe fbb4 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -3000);
 80028f4:	ed9f 0b2a 	vldr	d0, [pc, #168]	@ 80029a0 <main+0x7d8>
 80028f8:	2007      	movs	r0, #7
 80028fa:	f7fe fbaf 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 80028fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002902:	f002 feb5 	bl	8005670 <HAL_Delay>
			  mode = BLUE_STORAGE;
 8002906:	4b28      	ldr	r3, [pc, #160]	@ (80029a8 <main+0x7e0>)
 8002908:	2205      	movs	r2, #5
 800290a:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800290c:	e02d      	b.n	800296a <main+0x7a2>
	  case RED_FIND_SILO:
		  break;
	  case TES:
		  break;
	  default:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800290e:	2200      	movs	r2, #0
 8002910:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002914:	4825      	ldr	r0, [pc, #148]	@ (80029ac <main+0x7e4>)
 8002916:	f003 fa27 	bl	8005d68 <HAL_GPIO_WritePin>
		  Inverse_Kinematics(0, 0, 0);
 800291a:	ed9f 2b19 	vldr	d2, [pc, #100]	@ 8002980 <main+0x7b8>
 800291e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8002980 <main+0x7b8>
 8002922:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8002980 <main+0x7b8>
 8002926:	f7fe fc0f 	bl	8001148 <Inverse_Kinematics>
		  setMotorSpeed(1, 0);
 800292a:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 8002980 <main+0x7b8>
 800292e:	2001      	movs	r0, #1
 8002930:	f7fe fb94 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8002934:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8002980 <main+0x7b8>
 8002938:	2002      	movs	r0, #2
 800293a:	f7fe fb8f 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 800293e:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 8002980 <main+0x7b8>
 8002942:	2007      	movs	r0, #7
 8002944:	f7fe fb8a 	bl	800105c <setMotorSpeed>
		  break;
 8002948:	e010      	b.n	800296c <main+0x7a4>
		  break;
 800294a:	bf00      	nop
 800294c:	e00e      	b.n	800296c <main+0x7a4>
		  break;
 800294e:	bf00      	nop
 8002950:	e00c      	b.n	800296c <main+0x7a4>
		  break;
 8002952:	bf00      	nop
 8002954:	e00a      	b.n	800296c <main+0x7a4>
		  break;
 8002956:	bf00      	nop
 8002958:	e008      	b.n	800296c <main+0x7a4>
		  break;
 800295a:	bf00      	nop
 800295c:	e006      	b.n	800296c <main+0x7a4>
		  break;
 800295e:	bf00      	nop
 8002960:	e004      	b.n	800296c <main+0x7a4>
		  break;
 8002962:	bf00      	nop
 8002964:	e002      	b.n	800296c <main+0x7a4>
		  break;
 8002966:	bf00      	nop
 8002968:	e000      	b.n	800296c <main+0x7a4>
		  break;
 800296a:	bf00      	nop
	  }
	  lcd_clear();
 800296c:	f7ff fa94 	bl	8001e98 <lcd_clear>
  {
 8002970:	e50b      	b.n	800238a <main+0x1c2>
 8002972:	bf00      	nop
 8002974:	f3af 8000 	nop.w
 8002978:	00000000 	.word	0x00000000
 800297c:	3ff80000 	.word	0x3ff80000
	...
 8002988:	cccccccd 	.word	0xcccccccd
 800298c:	3ff4cccc 	.word	0x3ff4cccc
 8002990:	00000000 	.word	0x00000000
 8002994:	c09f4000 	.word	0xc09f4000
 8002998:	00000000 	.word	0x00000000
 800299c:	c0a38800 	.word	0xc0a38800
 80029a0:	00000000 	.word	0x00000000
 80029a4:	c0a77000 	.word	0xc0a77000
 80029a8:	200005fc 	.word	0x200005fc
 80029ac:	40020c00 	.word	0x40020c00

080029b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b094      	sub	sp, #80	@ 0x50
 80029b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029b6:	f107 0320 	add.w	r3, r7, #32
 80029ba:	2230      	movs	r2, #48	@ 0x30
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f008 f94b 	bl	800ac5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	4b28      	ldr	r3, [pc, #160]	@ (8002a7c <SystemClock_Config+0xcc>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029dc:	4a27      	ldr	r2, [pc, #156]	@ (8002a7c <SystemClock_Config+0xcc>)
 80029de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80029e4:	4b25      	ldr	r3, [pc, #148]	@ (8002a7c <SystemClock_Config+0xcc>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029f0:	2300      	movs	r3, #0
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	4b22      	ldr	r3, [pc, #136]	@ (8002a80 <SystemClock_Config+0xd0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a21      	ldr	r2, [pc, #132]	@ (8002a80 <SystemClock_Config+0xd0>)
 80029fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b1f      	ldr	r3, [pc, #124]	@ (8002a80 <SystemClock_Config+0xd0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a16:	2302      	movs	r3, #2
 8002a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a20:	2308      	movs	r3, #8
 8002a22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002a24:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002a28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a2e:	2307      	movs	r3, #7
 8002a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a32:	f107 0320 	add.w	r3, r7, #32
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 fe66 	bl	8006708 <HAL_RCC_OscConfig>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002a42:	f000 fda9 	bl	8003598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a46:	230f      	movs	r3, #15
 8002a48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a52:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a5e:	f107 030c 	add.w	r3, r7, #12
 8002a62:	2105      	movs	r1, #5
 8002a64:	4618      	mov	r0, r3
 8002a66:	f004 f8c7 	bl	8006bf8 <HAL_RCC_ClockConfig>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002a70:	f000 fd92 	bl	8003598 <Error_Handler>
  }
}
 8002a74:	bf00      	nop
 8002a76:	3750      	adds	r7, #80	@ 0x50
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000

08002a84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a88:	4b12      	ldr	r3, [pc, #72]	@ (8002ad4 <MX_I2C2_Init+0x50>)
 8002a8a:	4a13      	ldr	r2, [pc, #76]	@ (8002ad8 <MX_I2C2_Init+0x54>)
 8002a8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002a8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <MX_I2C2_Init+0x50>)
 8002a90:	4a12      	ldr	r2, [pc, #72]	@ (8002adc <MX_I2C2_Init+0x58>)
 8002a92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad4 <MX_I2C2_Init+0x50>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <MX_I2C2_Init+0x50>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <MX_I2C2_Init+0x50>)
 8002aa2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002aa6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad4 <MX_I2C2_Init+0x50>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002aae:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <MX_I2C2_Init+0x50>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ab4:	4b07      	ldr	r3, [pc, #28]	@ (8002ad4 <MX_I2C2_Init+0x50>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <MX_I2C2_Init+0x50>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002ac0:	4804      	ldr	r0, [pc, #16]	@ (8002ad4 <MX_I2C2_Init+0x50>)
 8002ac2:	f003 f983 	bl	8005dcc <HAL_I2C_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002acc:	f000 fd64 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	200002cc 	.word	0x200002cc
 8002ad8:	40005800 	.word	0x40005800
 8002adc:	000186a0 	.word	0x000186a0

08002ae0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b096      	sub	sp, #88	@ 0x58
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ae6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	609a      	str	r2, [r3, #8]
 8002af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	609a      	str	r2, [r3, #8]
 8002b0a:	60da      	str	r2, [r3, #12]
 8002b0c:	611a      	str	r2, [r3, #16]
 8002b0e:	615a      	str	r2, [r3, #20]
 8002b10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	2220      	movs	r2, #32
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f008 f89e 	bl	800ac5a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b1e:	4b50      	ldr	r3, [pc, #320]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002b20:	4a50      	ldr	r2, [pc, #320]	@ (8002c64 <MX_TIM1_Init+0x184>)
 8002b22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8002b24:	4b4e      	ldr	r3, [pc, #312]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002b26:	2214      	movs	r2, #20
 8002b28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2a:	4b4d      	ldr	r3, [pc, #308]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000-1;
 8002b30:	4b4b      	ldr	r3, [pc, #300]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002b32:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002b36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b38:	4b49      	ldr	r3, [pc, #292]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b3e:	4b48      	ldr	r3, [pc, #288]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b44:	4b46      	ldr	r3, [pc, #280]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b4a:	4845      	ldr	r0, [pc, #276]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002b4c:	f004 fa74 	bl	8007038 <HAL_TIM_Base_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002b56:	f000 fd1f 	bl	8003598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b60:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002b64:	4619      	mov	r1, r3
 8002b66:	483e      	ldr	r0, [pc, #248]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002b68:	f004 fdd6 	bl	8007718 <HAL_TIM_ConfigClockSource>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002b72:	f000 fd11 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b76:	483a      	ldr	r0, [pc, #232]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002b78:	f004 faad 	bl	80070d6 <HAL_TIM_PWM_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002b82:	f000 fd09 	bl	8003598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b8e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b92:	4619      	mov	r1, r3
 8002b94:	4832      	ldr	r0, [pc, #200]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002b96:	f005 f9d5 	bl	8007f44 <HAL_TIMEx_MasterConfigSynchronization>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002ba0:	f000 fcfa 	bl	8003598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ba4:	2360      	movs	r3, #96	@ 0x60
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4825      	ldr	r0, [pc, #148]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002bca:	f004 fce3 	bl	8007594 <HAL_TIM_PWM_ConfigChannel>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002bd4:	f000 fce0 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bdc:	2204      	movs	r2, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	481f      	ldr	r0, [pc, #124]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002be2:	f004 fcd7 	bl	8007594 <HAL_TIM_PWM_ConfigChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002bec:	f000 fcd4 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4819      	ldr	r0, [pc, #100]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002bfa:	f004 fccb 	bl	8007594 <HAL_TIM_PWM_ConfigChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002c04:	f000 fcc8 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c0c:	220c      	movs	r2, #12
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4813      	ldr	r0, [pc, #76]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002c12:	f004 fcbf 	bl	8007594 <HAL_TIM_PWM_ConfigChannel>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002c1c:	f000 fcbc 	bl	8003598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4807      	ldr	r0, [pc, #28]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002c44:	f005 f9fa 	bl	800803c <HAL_TIMEx_ConfigBreakDeadTime>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002c4e:	f000 fca3 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c52:	4803      	ldr	r0, [pc, #12]	@ (8002c60 <MX_TIM1_Init+0x180>)
 8002c54:	f002 f998 	bl	8004f88 <HAL_TIM_MspPostInit>

}
 8002c58:	bf00      	nop
 8002c5a:	3758      	adds	r7, #88	@ 0x58
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000320 	.word	0x20000320
 8002c64:	40010000 	.word	0x40010000

08002c68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08e      	sub	sp, #56	@ 0x38
 8002c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c7c:	f107 0320 	add.w	r3, r7, #32
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]
 8002c94:	615a      	str	r2, [r3, #20]
 8002c96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c98:	4b33      	ldr	r3, [pc, #204]	@ (8002d68 <MX_TIM2_Init+0x100>)
 8002c9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8002ca0:	4b31      	ldr	r3, [pc, #196]	@ (8002d68 <MX_TIM2_Init+0x100>)
 8002ca2:	f240 628f 	movw	r2, #1679	@ 0x68f
 8002ca6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d68 <MX_TIM2_Init+0x100>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002cae:	4b2e      	ldr	r3, [pc, #184]	@ (8002d68 <MX_TIM2_Init+0x100>)
 8002cb0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8002d68 <MX_TIM2_Init+0x100>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d68 <MX_TIM2_Init+0x100>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cc2:	4829      	ldr	r0, [pc, #164]	@ (8002d68 <MX_TIM2_Init+0x100>)
 8002cc4:	f004 f9b8 	bl	8007038 <HAL_TIM_Base_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002cce:	f000 fc63 	bl	8003598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cd8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4822      	ldr	r0, [pc, #136]	@ (8002d68 <MX_TIM2_Init+0x100>)
 8002ce0:	f004 fd1a 	bl	8007718 <HAL_TIM_ConfigClockSource>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002cea:	f000 fc55 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002cee:	481e      	ldr	r0, [pc, #120]	@ (8002d68 <MX_TIM2_Init+0x100>)
 8002cf0:	f004 f9f1 	bl	80070d6 <HAL_TIM_PWM_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002cfa:	f000 fc4d 	bl	8003598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d06:	f107 0320 	add.w	r3, r7, #32
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4816      	ldr	r0, [pc, #88]	@ (8002d68 <MX_TIM2_Init+0x100>)
 8002d0e:	f005 f919 	bl	8007f44 <HAL_TIMEx_MasterConfigSynchronization>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002d18:	f000 fc3e 	bl	8003598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d1c:	2360      	movs	r3, #96	@ 0x60
 8002d1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	2208      	movs	r2, #8
 8002d30:	4619      	mov	r1, r3
 8002d32:	480d      	ldr	r0, [pc, #52]	@ (8002d68 <MX_TIM2_Init+0x100>)
 8002d34:	f004 fc2e 	bl	8007594 <HAL_TIM_PWM_ConfigChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002d3e:	f000 fc2b 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	220c      	movs	r2, #12
 8002d46:	4619      	mov	r1, r3
 8002d48:	4807      	ldr	r0, [pc, #28]	@ (8002d68 <MX_TIM2_Init+0x100>)
 8002d4a:	f004 fc23 	bl	8007594 <HAL_TIM_PWM_ConfigChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002d54:	f000 fc20 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d58:	4803      	ldr	r0, [pc, #12]	@ (8002d68 <MX_TIM2_Init+0x100>)
 8002d5a:	f002 f915 	bl	8004f88 <HAL_TIM_MspPostInit>

}
 8002d5e:	bf00      	nop
 8002d60:	3738      	adds	r7, #56	@ 0x38
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000368 	.word	0x20000368

08002d6c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b096      	sub	sp, #88	@ 0x58
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d72:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d80:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	60da      	str	r2, [r3, #12]
 8002d98:	611a      	str	r2, [r3, #16]
 8002d9a:	615a      	str	r2, [r3, #20]
 8002d9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	2220      	movs	r2, #32
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f007 ff58 	bl	800ac5a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002daa:	4b50      	ldr	r3, [pc, #320]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002dac:	4a50      	ldr	r2, [pc, #320]	@ (8002ef0 <MX_TIM8_Init+0x184>)
 8002dae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 20;
 8002db0:	4b4e      	ldr	r3, [pc, #312]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002db2:	2214      	movs	r2, #20
 8002db4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db6:	4b4d      	ldr	r3, [pc, #308]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000-1;
 8002dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002dbe:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002dc2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc4:	4b49      	ldr	r3, [pc, #292]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002dca:	4b48      	ldr	r3, [pc, #288]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd0:	4b46      	ldr	r3, [pc, #280]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002dd6:	4845      	ldr	r0, [pc, #276]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002dd8:	f004 f92e 	bl	8007038 <HAL_TIM_Base_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002de2:	f000 fbd9 	bl	8003598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002de6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002dec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002df0:	4619      	mov	r1, r3
 8002df2:	483e      	ldr	r0, [pc, #248]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002df4:	f004 fc90 	bl	8007718 <HAL_TIM_ConfigClockSource>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002dfe:	f000 fbcb 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002e02:	483a      	ldr	r0, [pc, #232]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002e04:	f004 f967 	bl	80070d6 <HAL_TIM_PWM_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002e0e:	f000 fbc3 	bl	8003598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e12:	2300      	movs	r3, #0
 8002e14:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e16:	2300      	movs	r3, #0
 8002e18:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002e1a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4832      	ldr	r0, [pc, #200]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002e22:	f005 f88f 	bl	8007f44 <HAL_TIMEx_MasterConfigSynchronization>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002e2c:	f000 fbb4 	bl	8003598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e30:	2360      	movs	r3, #96	@ 0x60
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e44:	2300      	movs	r3, #0
 8002e46:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e50:	2200      	movs	r2, #0
 8002e52:	4619      	mov	r1, r3
 8002e54:	4825      	ldr	r0, [pc, #148]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002e56:	f004 fb9d 	bl	8007594 <HAL_TIM_PWM_ConfigChannel>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002e60:	f000 fb9a 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e68:	2204      	movs	r2, #4
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	481f      	ldr	r0, [pc, #124]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002e6e:	f004 fb91 	bl	8007594 <HAL_TIM_PWM_ConfigChannel>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002e78:	f000 fb8e 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e80:	2208      	movs	r2, #8
 8002e82:	4619      	mov	r1, r3
 8002e84:	4819      	ldr	r0, [pc, #100]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002e86:	f004 fb85 	bl	8007594 <HAL_TIM_PWM_ConfigChannel>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002e90:	f000 fb82 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e98:	220c      	movs	r2, #12
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4813      	ldr	r0, [pc, #76]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002e9e:	f004 fb79 	bl	8007594 <HAL_TIM_PWM_ConfigChannel>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002ea8:	f000 fb76 	bl	8003598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ec0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ec4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4807      	ldr	r0, [pc, #28]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002ed0:	f005 f8b4 	bl	800803c <HAL_TIMEx_ConfigBreakDeadTime>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002eda:	f000 fb5d 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002ede:	4803      	ldr	r0, [pc, #12]	@ (8002eec <MX_TIM8_Init+0x180>)
 8002ee0:	f002 f852 	bl	8004f88 <HAL_TIM_MspPostInit>

}
 8002ee4:	bf00      	nop
 8002ee6:	3758      	adds	r7, #88	@ 0x58
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	200003b0 	.word	0x200003b0
 8002ef0:	40010400 	.word	0x40010400

08002ef4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ef8:	4b11      	ldr	r3, [pc, #68]	@ (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002efa:	4a12      	ldr	r2, [pc, #72]	@ (8002f44 <MX_USART1_UART_Init+0x50>)
 8002efc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8002efe:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f00:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002f04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f06:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f12:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f18:	4b09      	ldr	r3, [pc, #36]	@ (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1e:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f24:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f2a:	4805      	ldr	r0, [pc, #20]	@ (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f2c:	f005 f8ec 	bl	8008108 <HAL_UART_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f36:	f000 fb2f 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200003f8 	.word	0x200003f8
 8002f44:	40011000 	.word	0x40011000

08002f48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f4c:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <MX_USART2_UART_Init+0x4c>)
 8002f4e:	4a12      	ldr	r2, [pc, #72]	@ (8002f98 <MX_USART2_UART_Init+0x50>)
 8002f50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f52:	4b10      	ldr	r3, [pc, #64]	@ (8002f94 <MX_USART2_UART_Init+0x4c>)
 8002f54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f94 <MX_USART2_UART_Init+0x4c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f60:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <MX_USART2_UART_Init+0x4c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f66:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <MX_USART2_UART_Init+0x4c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f6c:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <MX_USART2_UART_Init+0x4c>)
 8002f6e:	220c      	movs	r2, #12
 8002f70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f72:	4b08      	ldr	r3, [pc, #32]	@ (8002f94 <MX_USART2_UART_Init+0x4c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f78:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <MX_USART2_UART_Init+0x4c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f7e:	4805      	ldr	r0, [pc, #20]	@ (8002f94 <MX_USART2_UART_Init+0x4c>)
 8002f80:	f005 f8c2 	bl	8008108 <HAL_UART_Init>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f8a:	f000 fb05 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000440 	.word	0x20000440
 8002f98:	40004400 	.word	0x40004400

08002f9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fa0:	4b11      	ldr	r3, [pc, #68]	@ (8002fe8 <MX_USART3_UART_Init+0x4c>)
 8002fa2:	4a12      	ldr	r2, [pc, #72]	@ (8002fec <MX_USART3_UART_Init+0x50>)
 8002fa4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002fa6:	4b10      	ldr	r3, [pc, #64]	@ (8002fe8 <MX_USART3_UART_Init+0x4c>)
 8002fa8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002fac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fae:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe8 <MX_USART3_UART_Init+0x4c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe8 <MX_USART3_UART_Init+0x4c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fba:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe8 <MX_USART3_UART_Init+0x4c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fc0:	4b09      	ldr	r3, [pc, #36]	@ (8002fe8 <MX_USART3_UART_Init+0x4c>)
 8002fc2:	220c      	movs	r2, #12
 8002fc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fc6:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <MX_USART3_UART_Init+0x4c>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <MX_USART3_UART_Init+0x4c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fd2:	4805      	ldr	r0, [pc, #20]	@ (8002fe8 <MX_USART3_UART_Init+0x4c>)
 8002fd4:	f005 f898 	bl	8008108 <HAL_UART_Init>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002fde:	f000 fadb 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000488 	.word	0x20000488
 8002fec:	40004800 	.word	0x40004800

08002ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08c      	sub	sp, #48	@ 0x30
 8002ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff6:	f107 031c 	add.w	r3, r7, #28
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	609a      	str	r2, [r3, #8]
 8003002:	60da      	str	r2, [r3, #12]
 8003004:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	4bbb      	ldr	r3, [pc, #748]	@ (80032f8 <MX_GPIO_Init+0x308>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	4aba      	ldr	r2, [pc, #744]	@ (80032f8 <MX_GPIO_Init+0x308>)
 8003010:	f043 0310 	orr.w	r3, r3, #16
 8003014:	6313      	str	r3, [r2, #48]	@ 0x30
 8003016:	4bb8      	ldr	r3, [pc, #736]	@ (80032f8 <MX_GPIO_Init+0x308>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	4bb4      	ldr	r3, [pc, #720]	@ (80032f8 <MX_GPIO_Init+0x308>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	4ab3      	ldr	r2, [pc, #716]	@ (80032f8 <MX_GPIO_Init+0x308>)
 800302c:	f043 0304 	orr.w	r3, r3, #4
 8003030:	6313      	str	r3, [r2, #48]	@ 0x30
 8003032:	4bb1      	ldr	r3, [pc, #708]	@ (80032f8 <MX_GPIO_Init+0x308>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	4bad      	ldr	r3, [pc, #692]	@ (80032f8 <MX_GPIO_Init+0x308>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	4aac      	ldr	r2, [pc, #688]	@ (80032f8 <MX_GPIO_Init+0x308>)
 8003048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800304c:	6313      	str	r3, [r2, #48]	@ 0x30
 800304e:	4baa      	ldr	r3, [pc, #680]	@ (80032f8 <MX_GPIO_Init+0x308>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	4ba6      	ldr	r3, [pc, #664]	@ (80032f8 <MX_GPIO_Init+0x308>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	4aa5      	ldr	r2, [pc, #660]	@ (80032f8 <MX_GPIO_Init+0x308>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6313      	str	r3, [r2, #48]	@ 0x30
 800306a:	4ba3      	ldr	r3, [pc, #652]	@ (80032f8 <MX_GPIO_Init+0x308>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	4b9f      	ldr	r3, [pc, #636]	@ (80032f8 <MX_GPIO_Init+0x308>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	4a9e      	ldr	r2, [pc, #632]	@ (80032f8 <MX_GPIO_Init+0x308>)
 8003080:	f043 0302 	orr.w	r3, r3, #2
 8003084:	6313      	str	r3, [r2, #48]	@ 0x30
 8003086:	4b9c      	ldr	r3, [pc, #624]	@ (80032f8 <MX_GPIO_Init+0x308>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	4b98      	ldr	r3, [pc, #608]	@ (80032f8 <MX_GPIO_Init+0x308>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	4a97      	ldr	r2, [pc, #604]	@ (80032f8 <MX_GPIO_Init+0x308>)
 800309c:	f043 0308 	orr.w	r3, r3, #8
 80030a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a2:	4b95      	ldr	r3, [pc, #596]	@ (80032f8 <MX_GPIO_Init+0x308>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80030ae:	2200      	movs	r2, #0
 80030b0:	217f      	movs	r1, #127	@ 0x7f
 80030b2:	4892      	ldr	r0, [pc, #584]	@ (80032fc <MX_GPIO_Init+0x30c>)
 80030b4:	f002 fe58 	bl	8005d68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 80030b8:	2200      	movs	r2, #0
 80030ba:	f24f 0130 	movw	r1, #61488	@ 0xf030
 80030be:	4890      	ldr	r0, [pc, #576]	@ (8003300 <MX_GPIO_Init+0x310>)
 80030c0:	f002 fe52 	bl	8005d68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80030c4:	2200      	movs	r2, #0
 80030c6:	2103      	movs	r1, #3
 80030c8:	488e      	ldr	r0, [pc, #568]	@ (8003304 <MX_GPIO_Init+0x314>)
 80030ca:	f002 fe4d 	bl	8005d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80030ce:	2200      	movs	r2, #0
 80030d0:	f244 011f 	movw	r1, #16415	@ 0x401f
 80030d4:	488c      	ldr	r0, [pc, #560]	@ (8003308 <MX_GPIO_Init+0x318>)
 80030d6:	f002 fe47 	bl	8005d68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80030da:	237f      	movs	r3, #127	@ 0x7f
 80030dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80030de:	2311      	movs	r3, #17
 80030e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e6:	2303      	movs	r3, #3
 80030e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030ea:	f107 031c 	add.w	r3, r7, #28
 80030ee:	4619      	mov	r1, r3
 80030f0:	4882      	ldr	r0, [pc, #520]	@ (80032fc <MX_GPIO_Init+0x30c>)
 80030f2:	f002 fc85 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80030f6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80030fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80030fc:	2311      	movs	r3, #17
 80030fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003104:	2300      	movs	r3, #0
 8003106:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003108:	f107 031c 	add.w	r3, r7, #28
 800310c:	4619      	mov	r1, r3
 800310e:	487c      	ldr	r0, [pc, #496]	@ (8003300 <MX_GPIO_Init+0x310>)
 8003110:	f002 fc76 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : EA_2_Pin EinA_1_Pin */
  GPIO_InitStruct.Pin = EA_2_Pin|EinA_1_Pin;
 8003114:	2309      	movs	r3, #9
 8003116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003118:	2300      	movs	r3, #0
 800311a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800311c:	2301      	movs	r3, #1
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003120:	f107 031c 	add.w	r3, r7, #28
 8003124:	4619      	mov	r1, r3
 8003126:	4876      	ldr	r0, [pc, #472]	@ (8003300 <MX_GPIO_Init+0x310>)
 8003128:	f002 fc6a 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_2_Pin EinB_1_Pin */
  GPIO_InitStruct.Pin = EB_2_Pin|EinB_1_Pin;
 800312c:	2306      	movs	r3, #6
 800312e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003130:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003136:	2301      	movs	r3, #1
 8003138:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800313a:	f107 031c 	add.w	r3, r7, #28
 800313e:	4619      	mov	r1, r3
 8003140:	486f      	ldr	r0, [pc, #444]	@ (8003300 <MX_GPIO_Init+0x310>)
 8003142:	f002 fc5d 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinB_2_Pin EinB_4_Pin */
  GPIO_InitStruct.Pin = EinB_2_Pin|EinB_4_Pin;
 8003146:	f244 0301 	movw	r3, #16385	@ 0x4001
 800314a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800314c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003152:	2301      	movs	r3, #1
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003156:	f107 031c 	add.w	r3, r7, #28
 800315a:	4619      	mov	r1, r3
 800315c:	486b      	ldr	r0, [pc, #428]	@ (800330c <MX_GPIO_Init+0x31c>)
 800315e:	f002 fc4f 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinA_2_Pin EinA_4_Pin EA_1_Pin */
  GPIO_InitStruct.Pin = EinA_2_Pin|EinA_4_Pin|EA_1_Pin;
 8003162:	f248 4302 	movw	r3, #33794	@ 0x8402
 8003166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003168:	2300      	movs	r3, #0
 800316a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800316c:	2301      	movs	r3, #1
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003170:	f107 031c 	add.w	r3, r7, #28
 8003174:	4619      	mov	r1, r3
 8003176:	4865      	ldr	r0, [pc, #404]	@ (800330c <MX_GPIO_Init+0x31c>)
 8003178:	f002 fc42 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 800317c:	f241 0330 	movw	r3, #4144	@ 0x1030
 8003180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003182:	2311      	movs	r3, #17
 8003184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318a:	2303      	movs	r3, #3
 800318c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800318e:	f107 031c 	add.w	r3, r7, #28
 8003192:	4619      	mov	r1, r3
 8003194:	485a      	ldr	r0, [pc, #360]	@ (8003300 <MX_GPIO_Init+0x310>)
 8003196:	f002 fc33 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800319a:	2303      	movs	r3, #3
 800319c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800319e:	2311      	movs	r3, #17
 80031a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a6:	2303      	movs	r3, #3
 80031a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031aa:	f107 031c 	add.w	r3, r7, #28
 80031ae:	4619      	mov	r1, r3
 80031b0:	4854      	ldr	r0, [pc, #336]	@ (8003304 <MX_GPIO_Init+0x314>)
 80031b2:	f002 fc25 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 80031b6:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 80031ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031bc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80031c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031c2:	2301      	movs	r3, #1
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031c6:	f107 031c 	add.w	r3, r7, #28
 80031ca:	4619      	mov	r1, r3
 80031cc:	484b      	ldr	r0, [pc, #300]	@ (80032fc <MX_GPIO_Init+0x30c>)
 80031ce:	f002 fc17 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinA_3_Pin */
  GPIO_InitStruct.Pin = EinA_3_Pin;
 80031d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031d8:	2300      	movs	r3, #0
 80031da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031dc:	2301      	movs	r3, #1
 80031de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinA_3_GPIO_Port, &GPIO_InitStruct);
 80031e0:	f107 031c 	add.w	r3, r7, #28
 80031e4:	4619      	mov	r1, r3
 80031e6:	4848      	ldr	r0, [pc, #288]	@ (8003308 <MX_GPIO_Init+0x318>)
 80031e8:	f002 fc0a 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinB_3_Pin */
  GPIO_InitStruct.Pin = EinB_3_Pin;
 80031ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80031f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031f8:	2301      	movs	r3, #1
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinB_3_GPIO_Port, &GPIO_InitStruct);
 80031fc:	f107 031c 	add.w	r3, r7, #28
 8003200:	4619      	mov	r1, r3
 8003202:	4841      	ldr	r0, [pc, #260]	@ (8003308 <MX_GPIO_Init+0x318>)
 8003204:	f002 fbfc 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003208:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800320c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800320e:	2301      	movs	r3, #1
 8003210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003212:	2302      	movs	r3, #2
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003216:	2300      	movs	r3, #0
 8003218:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800321a:	f107 031c 	add.w	r3, r7, #28
 800321e:	4619      	mov	r1, r3
 8003220:	4839      	ldr	r0, [pc, #228]	@ (8003308 <MX_GPIO_Init+0x318>)
 8003222:	f002 fbed 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_4_Pin */
  GPIO_InitStruct.Pin = Button_4_Pin;
 8003226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800322a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800322c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003232:	2301      	movs	r3, #1
 8003234:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_4_GPIO_Port, &GPIO_InitStruct);
 8003236:	f107 031c 	add.w	r3, r7, #28
 800323a:	4619      	mov	r1, r3
 800323c:	4832      	ldr	r0, [pc, #200]	@ (8003308 <MX_GPIO_Init+0x318>)
 800323e:	f002 fbdf 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003242:	231f      	movs	r3, #31
 8003244:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003246:	2311      	movs	r3, #17
 8003248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324e:	2303      	movs	r3, #3
 8003250:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003252:	f107 031c 	add.w	r3, r7, #28
 8003256:	4619      	mov	r1, r3
 8003258:	482b      	ldr	r0, [pc, #172]	@ (8003308 <MX_GPIO_Init+0x318>)
 800325a:	f002 fbd1 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_1_Pin EB_3_Pin */
  GPIO_InitStruct.Pin = EB_1_Pin|EB_3_Pin;
 800325e:	2328      	movs	r3, #40	@ 0x28
 8003260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003262:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003268:	2301      	movs	r3, #1
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326c:	f107 031c 	add.w	r3, r7, #28
 8003270:	4619      	mov	r1, r3
 8003272:	4824      	ldr	r0, [pc, #144]	@ (8003304 <MX_GPIO_Init+0x314>)
 8003274:	f002 fbc4 	bl	8005a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : EA_3_Pin */
  GPIO_InitStruct.Pin = EA_3_Pin;
 8003278:	2310      	movs	r3, #16
 800327a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800327c:	2300      	movs	r3, #0
 800327e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003280:	2301      	movs	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EA_3_GPIO_Port, &GPIO_InitStruct);
 8003284:	f107 031c 	add.w	r3, r7, #28
 8003288:	4619      	mov	r1, r3
 800328a:	481e      	ldr	r0, [pc, #120]	@ (8003304 <MX_GPIO_Init+0x314>)
 800328c:	f002 fbb8 	bl	8005a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003290:	2200      	movs	r2, #0
 8003292:	2100      	movs	r1, #0
 8003294:	2006      	movs	r0, #6
 8003296:	f002 faea 	bl	800586e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800329a:	2006      	movs	r0, #6
 800329c:	f002 fb03 	bl	80058a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80032a0:	2200      	movs	r2, #0
 80032a2:	2100      	movs	r1, #0
 80032a4:	2007      	movs	r0, #7
 80032a6:	f002 fae2 	bl	800586e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80032aa:	2007      	movs	r0, #7
 80032ac:	f002 fafb 	bl	80058a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80032b0:	2200      	movs	r2, #0
 80032b2:	2100      	movs	r1, #0
 80032b4:	2008      	movs	r0, #8
 80032b6:	f002 fada 	bl	800586e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80032ba:	2008      	movs	r0, #8
 80032bc:	f002 faf3 	bl	80058a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2100      	movs	r1, #0
 80032c4:	2009      	movs	r0, #9
 80032c6:	f002 fad2 	bl	800586e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80032ca:	2009      	movs	r0, #9
 80032cc:	f002 faeb 	bl	80058a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2100      	movs	r1, #0
 80032d4:	2017      	movs	r0, #23
 80032d6:	f002 faca 	bl	800586e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80032da:	2017      	movs	r0, #23
 80032dc:	f002 fae3 	bl	80058a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80032e0:	2200      	movs	r2, #0
 80032e2:	2100      	movs	r1, #0
 80032e4:	2028      	movs	r0, #40	@ 0x28
 80032e6:	f002 fac2 	bl	800586e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80032ea:	2028      	movs	r0, #40	@ 0x28
 80032ec:	f002 fadb 	bl	80058a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032f0:	bf00      	nop
 80032f2:	3730      	adds	r7, #48	@ 0x30
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40021000 	.word	0x40021000
 8003300:	40020800 	.word	0x40020800
 8003304:	40020400 	.word	0x40020400
 8003308:	40020c00 	.word	0x40020c00
 800330c:	40020000 	.word	0x40020000

08003310 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a8b      	ldr	r2, [pc, #556]	@ (800354c <HAL_UART_RxCpltCallback+0x23c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d15a      	bne.n	80033d8 <HAL_UART_RxCpltCallback+0xc8>
	{
		if(receive[rxIndex] == '\r' || receive[rxIndex] == '\n')
 8003322:	4b8b      	ldr	r3, [pc, #556]	@ (8003550 <HAL_UART_RxCpltCallback+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a8b      	ldr	r2, [pc, #556]	@ (8003554 <HAL_UART_RxCpltCallback+0x244>)
 8003328:	5cd3      	ldrb	r3, [r2, r3]
 800332a:	2b0d      	cmp	r3, #13
 800332c:	d005      	beq.n	800333a <HAL_UART_RxCpltCallback+0x2a>
 800332e:	4b88      	ldr	r3, [pc, #544]	@ (8003550 <HAL_UART_RxCpltCallback+0x240>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a88      	ldr	r2, [pc, #544]	@ (8003554 <HAL_UART_RxCpltCallback+0x244>)
 8003334:	5cd3      	ldrb	r3, [r2, r3]
 8003336:	2b0a      	cmp	r3, #10
 8003338:	d139      	bne.n	80033ae <HAL_UART_RxCpltCallback+0x9e>
		{
			receive[rxIndex] = '\0';
 800333a:	4b85      	ldr	r3, [pc, #532]	@ (8003550 <HAL_UART_RxCpltCallback+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a85      	ldr	r2, [pc, #532]	@ (8003554 <HAL_UART_RxCpltCallback+0x244>)
 8003340:	2100      	movs	r1, #0
 8003342:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receive, ",");
 8003344:	4984      	ldr	r1, [pc, #528]	@ (8003558 <HAL_UART_RxCpltCallback+0x248>)
 8003346:	4883      	ldr	r0, [pc, #524]	@ (8003554 <HAL_UART_RxCpltCallback+0x244>)
 8003348:	f007 fca2 	bl	800ac90 <strtok>
 800334c:	6178      	str	r0, [r7, #20]
			dataIndex = 0;
 800334e:	4b83      	ldr	r3, [pc, #524]	@ (800355c <HAL_UART_RxCpltCallback+0x24c>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8003354:	e015      	b.n	8003382 <HAL_UART_RxCpltCallback+0x72>
			{
				sensorData[dataIndex++] = atof(token);
 8003356:	4b81      	ldr	r3, [pc, #516]	@ (800355c <HAL_UART_RxCpltCallback+0x24c>)
 8003358:	681c      	ldr	r4, [r3, #0]
 800335a:	1c63      	adds	r3, r4, #1
 800335c:	4a7f      	ldr	r2, [pc, #508]	@ (800355c <HAL_UART_RxCpltCallback+0x24c>)
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	6978      	ldr	r0, [r7, #20]
 8003362:	f005 fe45 	bl	8008ff0 <atof>
 8003366:	eeb0 7a40 	vmov.f32	s14, s0
 800336a:	eef0 7a60 	vmov.f32	s15, s1
 800336e:	4a7c      	ldr	r2, [pc, #496]	@ (8003560 <HAL_UART_RxCpltCallback+0x250>)
 8003370:	00e3      	lsls	r3, r4, #3
 8003372:	4413      	add	r3, r2
 8003374:	ed83 7b00 	vstr	d7, [r3]
				token = strtok(NULL, ",");
 8003378:	4977      	ldr	r1, [pc, #476]	@ (8003558 <HAL_UART_RxCpltCallback+0x248>)
 800337a:	2000      	movs	r0, #0
 800337c:	f007 fc88 	bl	800ac90 <strtok>
 8003380:	6178      	str	r0, [r7, #20]
			while(token != NULL)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e6      	bne.n	8003356 <HAL_UART_RxCpltCallback+0x46>
			}
			memset(receive, 0, sizeof(receive));
 8003388:	2232      	movs	r2, #50	@ 0x32
 800338a:	2100      	movs	r1, #0
 800338c:	4871      	ldr	r0, [pc, #452]	@ (8003554 <HAL_UART_RxCpltCallback+0x244>)
 800338e:	f007 fc64 	bl	800ac5a <memset>
			rxIndex = 0;
 8003392:	4b6f      	ldr	r3, [pc, #444]	@ (8003550 <HAL_UART_RxCpltCallback+0x240>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart1, receive, 1) != HAL_OK)
 8003398:	2201      	movs	r2, #1
 800339a:	496e      	ldr	r1, [pc, #440]	@ (8003554 <HAL_UART_RxCpltCallback+0x244>)
 800339c:	4871      	ldr	r0, [pc, #452]	@ (8003564 <HAL_UART_RxCpltCallback+0x254>)
 800339e:	f004 ff03 	bl	80081a8 <HAL_UART_Receive_IT>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d016      	beq.n	80033d6 <HAL_UART_RxCpltCallback+0xc6>
			{
				Error_Handler();
 80033a8:	f000 f8f6 	bl	8003598 <Error_Handler>
		{
 80033ac:	e013      	b.n	80033d6 <HAL_UART_RxCpltCallback+0xc6>
			}
		}
		else
		{
			rxIndex++;
 80033ae:	4b68      	ldr	r3, [pc, #416]	@ (8003550 <HAL_UART_RxCpltCallback+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	4a66      	ldr	r2, [pc, #408]	@ (8003550 <HAL_UART_RxCpltCallback+0x240>)
 80033b6:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart1, receive + rxIndex, 1) != HAL_OK)
 80033b8:	4b65      	ldr	r3, [pc, #404]	@ (8003550 <HAL_UART_RxCpltCallback+0x240>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a65      	ldr	r2, [pc, #404]	@ (8003554 <HAL_UART_RxCpltCallback+0x244>)
 80033be:	4413      	add	r3, r2
 80033c0:	2201      	movs	r2, #1
 80033c2:	4619      	mov	r1, r3
 80033c4:	4867      	ldr	r0, [pc, #412]	@ (8003564 <HAL_UART_RxCpltCallback+0x254>)
 80033c6:	f004 feef 	bl	80081a8 <HAL_UART_Receive_IT>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_UART_RxCpltCallback+0xc8>
			{
				Error_Handler();
 80033d0:	f000 f8e2 	bl	8003598 <Error_Handler>
 80033d4:	e000      	b.n	80033d8 <HAL_UART_RxCpltCallback+0xc8>
		{
 80033d6:	bf00      	nop
			}
		}
	}
	if(huart->Instance == USART2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a62      	ldr	r2, [pc, #392]	@ (8003568 <HAL_UART_RxCpltCallback+0x258>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d155      	bne.n	800348e <HAL_UART_RxCpltCallback+0x17e>
	{
		if(receiveCAM[indexCAM] == '\r' || receiveCAM[indexCAM] == '\n')
 80033e2:	4b62      	ldr	r3, [pc, #392]	@ (800356c <HAL_UART_RxCpltCallback+0x25c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a62      	ldr	r2, [pc, #392]	@ (8003570 <HAL_UART_RxCpltCallback+0x260>)
 80033e8:	5cd3      	ldrb	r3, [r2, r3]
 80033ea:	2b0d      	cmp	r3, #13
 80033ec:	d005      	beq.n	80033fa <HAL_UART_RxCpltCallback+0xea>
 80033ee:	4b5f      	ldr	r3, [pc, #380]	@ (800356c <HAL_UART_RxCpltCallback+0x25c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a5f      	ldr	r2, [pc, #380]	@ (8003570 <HAL_UART_RxCpltCallback+0x260>)
 80033f4:	5cd3      	ldrb	r3, [r2, r3]
 80033f6:	2b0a      	cmp	r3, #10
 80033f8:	d134      	bne.n	8003464 <HAL_UART_RxCpltCallback+0x154>
		{
			receiveCAM[indexCAM] = '\0';
 80033fa:	4b5c      	ldr	r3, [pc, #368]	@ (800356c <HAL_UART_RxCpltCallback+0x25c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003570 <HAL_UART_RxCpltCallback+0x260>)
 8003400:	2100      	movs	r1, #0
 8003402:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveCAM, ",");
 8003404:	4954      	ldr	r1, [pc, #336]	@ (8003558 <HAL_UART_RxCpltCallback+0x248>)
 8003406:	485a      	ldr	r0, [pc, #360]	@ (8003570 <HAL_UART_RxCpltCallback+0x260>)
 8003408:	f007 fc42 	bl	800ac90 <strtok>
 800340c:	6138      	str	r0, [r7, #16]
			dataindexCAM = 0;
 800340e:	4b59      	ldr	r3, [pc, #356]	@ (8003574 <HAL_UART_RxCpltCallback+0x264>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8003414:	e010      	b.n	8003438 <HAL_UART_RxCpltCallback+0x128>
			{
				camera[dataindexCAM++] = atoi(token);
 8003416:	4b57      	ldr	r3, [pc, #348]	@ (8003574 <HAL_UART_RxCpltCallback+0x264>)
 8003418:	681c      	ldr	r4, [r3, #0]
 800341a:	1c63      	adds	r3, r4, #1
 800341c:	4a55      	ldr	r2, [pc, #340]	@ (8003574 <HAL_UART_RxCpltCallback+0x264>)
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	6938      	ldr	r0, [r7, #16]
 8003422:	f005 fde8 	bl	8008ff6 <atoi>
 8003426:	4603      	mov	r3, r0
 8003428:	4a53      	ldr	r2, [pc, #332]	@ (8003578 <HAL_UART_RxCpltCallback+0x268>)
 800342a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 800342e:	494a      	ldr	r1, [pc, #296]	@ (8003558 <HAL_UART_RxCpltCallback+0x248>)
 8003430:	2000      	movs	r0, #0
 8003432:	f007 fc2d 	bl	800ac90 <strtok>
 8003436:	6138      	str	r0, [r7, #16]
			while(token != NULL)
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1eb      	bne.n	8003416 <HAL_UART_RxCpltCallback+0x106>
			}
			memset(receiveCAM, 0, sizeof(receiveCAM));
 800343e:	2232      	movs	r2, #50	@ 0x32
 8003440:	2100      	movs	r1, #0
 8003442:	484b      	ldr	r0, [pc, #300]	@ (8003570 <HAL_UART_RxCpltCallback+0x260>)
 8003444:	f007 fc09 	bl	800ac5a <memset>
			indexCAM = 0;
 8003448:	4b48      	ldr	r3, [pc, #288]	@ (800356c <HAL_UART_RxCpltCallback+0x25c>)
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart2, receiveCAM, 1) != HAL_OK)
 800344e:	2201      	movs	r2, #1
 8003450:	4947      	ldr	r1, [pc, #284]	@ (8003570 <HAL_UART_RxCpltCallback+0x260>)
 8003452:	484a      	ldr	r0, [pc, #296]	@ (800357c <HAL_UART_RxCpltCallback+0x26c>)
 8003454:	f004 fea8 	bl	80081a8 <HAL_UART_Receive_IT>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d016      	beq.n	800348c <HAL_UART_RxCpltCallback+0x17c>
			{
				Error_Handler();
 800345e:	f000 f89b 	bl	8003598 <Error_Handler>
		{
 8003462:	e013      	b.n	800348c <HAL_UART_RxCpltCallback+0x17c>
			}
		}
		else
		{
			indexCAM++;
 8003464:	4b41      	ldr	r3, [pc, #260]	@ (800356c <HAL_UART_RxCpltCallback+0x25c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	4a40      	ldr	r2, [pc, #256]	@ (800356c <HAL_UART_RxCpltCallback+0x25c>)
 800346c:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart2, receiveCAM + indexCAM, 1) != HAL_OK)
 800346e:	4b3f      	ldr	r3, [pc, #252]	@ (800356c <HAL_UART_RxCpltCallback+0x25c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a3f      	ldr	r2, [pc, #252]	@ (8003570 <HAL_UART_RxCpltCallback+0x260>)
 8003474:	4413      	add	r3, r2
 8003476:	2201      	movs	r2, #1
 8003478:	4619      	mov	r1, r3
 800347a:	4840      	ldr	r0, [pc, #256]	@ (800357c <HAL_UART_RxCpltCallback+0x26c>)
 800347c:	f004 fe94 	bl	80081a8 <HAL_UART_Receive_IT>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_UART_RxCpltCallback+0x17e>
			{
				Error_Handler();
 8003486:	f000 f887 	bl	8003598 <Error_Handler>
 800348a:	e000      	b.n	800348e <HAL_UART_RxCpltCallback+0x17e>
		{
 800348c:	bf00      	nop
			}
		}
	}
	if(huart->Instance == USART3)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a3b      	ldr	r2, [pc, #236]	@ (8003580 <HAL_UART_RxCpltCallback+0x270>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d155      	bne.n	8003544 <HAL_UART_RxCpltCallback+0x234>
	{
		if(receiveMEGA[indexMEGA] == '\r' || receiveMEGA[indexMEGA] == '\n')
 8003498:	4b3a      	ldr	r3, [pc, #232]	@ (8003584 <HAL_UART_RxCpltCallback+0x274>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a3a      	ldr	r2, [pc, #232]	@ (8003588 <HAL_UART_RxCpltCallback+0x278>)
 800349e:	5cd3      	ldrb	r3, [r2, r3]
 80034a0:	2b0d      	cmp	r3, #13
 80034a2:	d005      	beq.n	80034b0 <HAL_UART_RxCpltCallback+0x1a0>
 80034a4:	4b37      	ldr	r3, [pc, #220]	@ (8003584 <HAL_UART_RxCpltCallback+0x274>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a37      	ldr	r2, [pc, #220]	@ (8003588 <HAL_UART_RxCpltCallback+0x278>)
 80034aa:	5cd3      	ldrb	r3, [r2, r3]
 80034ac:	2b0a      	cmp	r3, #10
 80034ae:	d134      	bne.n	800351a <HAL_UART_RxCpltCallback+0x20a>
		{
			receiveMEGA[indexMEGA] = '\0';
 80034b0:	4b34      	ldr	r3, [pc, #208]	@ (8003584 <HAL_UART_RxCpltCallback+0x274>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a34      	ldr	r2, [pc, #208]	@ (8003588 <HAL_UART_RxCpltCallback+0x278>)
 80034b6:	2100      	movs	r1, #0
 80034b8:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveMEGA, ",");
 80034ba:	4927      	ldr	r1, [pc, #156]	@ (8003558 <HAL_UART_RxCpltCallback+0x248>)
 80034bc:	4832      	ldr	r0, [pc, #200]	@ (8003588 <HAL_UART_RxCpltCallback+0x278>)
 80034be:	f007 fbe7 	bl	800ac90 <strtok>
 80034c2:	60f8      	str	r0, [r7, #12]
			dataindexMEGA = 0;
 80034c4:	4b31      	ldr	r3, [pc, #196]	@ (800358c <HAL_UART_RxCpltCallback+0x27c>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 80034ca:	e010      	b.n	80034ee <HAL_UART_RxCpltCallback+0x1de>
			{
				sensorMEGA[dataindexMEGA++] = atoi(token);
 80034cc:	4b2f      	ldr	r3, [pc, #188]	@ (800358c <HAL_UART_RxCpltCallback+0x27c>)
 80034ce:	681c      	ldr	r4, [r3, #0]
 80034d0:	1c63      	adds	r3, r4, #1
 80034d2:	4a2e      	ldr	r2, [pc, #184]	@ (800358c <HAL_UART_RxCpltCallback+0x27c>)
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f005 fd8d 	bl	8008ff6 <atoi>
 80034dc:	4603      	mov	r3, r0
 80034de:	4a2c      	ldr	r2, [pc, #176]	@ (8003590 <HAL_UART_RxCpltCallback+0x280>)
 80034e0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 80034e4:	491c      	ldr	r1, [pc, #112]	@ (8003558 <HAL_UART_RxCpltCallback+0x248>)
 80034e6:	2000      	movs	r0, #0
 80034e8:	f007 fbd2 	bl	800ac90 <strtok>
 80034ec:	60f8      	str	r0, [r7, #12]
			while(token != NULL)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1eb      	bne.n	80034cc <HAL_UART_RxCpltCallback+0x1bc>
			}
			memset(receiveMEGA, 0, sizeof(receiveMEGA));
 80034f4:	2232      	movs	r2, #50	@ 0x32
 80034f6:	2100      	movs	r1, #0
 80034f8:	4823      	ldr	r0, [pc, #140]	@ (8003588 <HAL_UART_RxCpltCallback+0x278>)
 80034fa:	f007 fbae 	bl	800ac5a <memset>
			indexMEGA = 0;
 80034fe:	4b21      	ldr	r3, [pc, #132]	@ (8003584 <HAL_UART_RxCpltCallback+0x274>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart3, receiveMEGA, 1) != HAL_OK)
 8003504:	2201      	movs	r2, #1
 8003506:	4920      	ldr	r1, [pc, #128]	@ (8003588 <HAL_UART_RxCpltCallback+0x278>)
 8003508:	4822      	ldr	r0, [pc, #136]	@ (8003594 <HAL_UART_RxCpltCallback+0x284>)
 800350a:	f004 fe4d 	bl	80081a8 <HAL_UART_Receive_IT>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d016      	beq.n	8003542 <HAL_UART_RxCpltCallback+0x232>
			{
				Error_Handler();
 8003514:	f000 f840 	bl	8003598 <Error_Handler>
		{
 8003518:	e013      	b.n	8003542 <HAL_UART_RxCpltCallback+0x232>
			}
		}
		else
		{
			indexMEGA++;
 800351a:	4b1a      	ldr	r3, [pc, #104]	@ (8003584 <HAL_UART_RxCpltCallback+0x274>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	4a18      	ldr	r2, [pc, #96]	@ (8003584 <HAL_UART_RxCpltCallback+0x274>)
 8003522:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart3, receiveMEGA + indexMEGA, 1) != HAL_OK)
 8003524:	4b17      	ldr	r3, [pc, #92]	@ (8003584 <HAL_UART_RxCpltCallback+0x274>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a17      	ldr	r2, [pc, #92]	@ (8003588 <HAL_UART_RxCpltCallback+0x278>)
 800352a:	4413      	add	r3, r2
 800352c:	2201      	movs	r2, #1
 800352e:	4619      	mov	r1, r3
 8003530:	4818      	ldr	r0, [pc, #96]	@ (8003594 <HAL_UART_RxCpltCallback+0x284>)
 8003532:	f004 fe39 	bl	80081a8 <HAL_UART_Receive_IT>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_UART_RxCpltCallback+0x234>
			{
				Error_Handler();
 800353c:	f000 f82c 	bl	8003598 <Error_Handler>
			}
		}
	}
}
 8003540:	e000      	b.n	8003544 <HAL_UART_RxCpltCallback+0x234>
		{
 8003542:	bf00      	nop
}
 8003544:	bf00      	nop
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	bd90      	pop	{r4, r7, pc}
 800354c:	40011000 	.word	0x40011000
 8003550:	20000520 	.word	0x20000520
 8003554:	200004ec 	.word	0x200004ec
 8003558:	0800f3b8 	.word	0x0800f3b8
 800355c:	20000524 	.word	0x20000524
 8003560:	20000528 	.word	0x20000528
 8003564:	200003f8 	.word	0x200003f8
 8003568:	40004400 	.word	0x40004400
 800356c:	20000574 	.word	0x20000574
 8003570:	20000540 	.word	0x20000540
 8003574:	20000578 	.word	0x20000578
 8003578:	2000057c 	.word	0x2000057c
 800357c:	20000440 	.word	0x20000440
 8003580:	40004800 	.word	0x40004800
 8003584:	200005e4 	.word	0x200005e4
 8003588:	200005b0 	.word	0x200005b0
 800358c:	200005e8 	.word	0x200005e8
 8003590:	200005ec 	.word	0x200005ec
 8003594:	20000488 	.word	0x20000488

08003598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800359c:	b672      	cpsid	i
}
 800359e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  Inverse_Kinematics(0, 0, 0);
 80035a0:	ed9f 2b0d 	vldr	d2, [pc, #52]	@ 80035d8 <Error_Handler+0x40>
 80035a4:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 80035d8 <Error_Handler+0x40>
 80035a8:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 80035d8 <Error_Handler+0x40>
 80035ac:	f7fd fdcc 	bl	8001148 <Inverse_Kinematics>
	  setMotorSpeed(1, 0);
 80035b0:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 80035d8 <Error_Handler+0x40>
 80035b4:	2001      	movs	r0, #1
 80035b6:	f7fd fd51 	bl	800105c <setMotorSpeed>
	  setMotorSpeed(2, 0);
 80035ba:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 80035d8 <Error_Handler+0x40>
 80035be:	2002      	movs	r0, #2
 80035c0:	f7fd fd4c 	bl	800105c <setMotorSpeed>
	  setMotorSpeed(7, 0);
 80035c4:	ed9f 0b04 	vldr	d0, [pc, #16]	@ 80035d8 <Error_Handler+0x40>
 80035c8:	2007      	movs	r0, #7
 80035ca:	f7fd fd47 	bl	800105c <setMotorSpeed>
	  Inverse_Kinematics(0, 0, 0);
 80035ce:	bf00      	nop
 80035d0:	e7e6      	b.n	80035a0 <Error_Handler+0x8>
 80035d2:	bf00      	nop
 80035d4:	f3af 8000 	nop.w
	...

080035e0 <odometry_eg>:

extern int camera[13];
extern int sensorMEGA[4];

external_global odometry_eg()
{
 80035e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035e4:	b09e      	sub	sp, #120	@ 0x78
 80035e6:	af00      	add	r7, sp, #0
	external_global currentPosition;
    double yaw = sensorData[0] * M_PI / 180.0;
 80035e8:	4b93      	ldr	r3, [pc, #588]	@ (8003838 <odometry_eg+0x258>)
 80035ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035ee:	a38c      	add	r3, pc, #560	@ (adr r3, 8003820 <odometry_eg+0x240>)
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f7fd f800 	bl	80005f8 <__aeabi_dmul>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	4b8d      	ldr	r3, [pc, #564]	@ (800383c <odometry_eg+0x25c>)
 8003606:	f7fd f921 	bl	800084c <__aeabi_ddiv>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    /* ENCODER EXTERNAL */
    int dn1 = counter1 - oldEnc1;
 8003612:	4b8b      	ldr	r3, [pc, #556]	@ (8003840 <odometry_eg+0x260>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4b8b      	ldr	r3, [pc, #556]	@ (8003844 <odometry_eg+0x264>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int dn2 = counter2 - oldEnc2;
 800361e:	4b8a      	ldr	r3, [pc, #552]	@ (8003848 <odometry_eg+0x268>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4b8a      	ldr	r3, [pc, #552]	@ (800384c <odometry_eg+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	66bb      	str	r3, [r7, #104]	@ 0x68
    int dn3 = counter3 - oldEnc3;
 800362a:	4b89      	ldr	r3, [pc, #548]	@ (8003850 <odometry_eg+0x270>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4b89      	ldr	r3, [pc, #548]	@ (8003854 <odometry_eg+0x274>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	667b      	str	r3, [r7, #100]	@ 0x64

    oldEnc1 = counter1;
 8003636:	4b82      	ldr	r3, [pc, #520]	@ (8003840 <odometry_eg+0x260>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a82      	ldr	r2, [pc, #520]	@ (8003844 <odometry_eg+0x264>)
 800363c:	6013      	str	r3, [r2, #0]
    oldEnc2 = counter2;
 800363e:	4b82      	ldr	r3, [pc, #520]	@ (8003848 <odometry_eg+0x268>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a82      	ldr	r2, [pc, #520]	@ (800384c <odometry_eg+0x26c>)
 8003644:	6013      	str	r3, [r2, #0]
    oldEnc3 = counter3;
 8003646:	4b82      	ldr	r3, [pc, #520]	@ (8003850 <odometry_eg+0x270>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a82      	ldr	r2, [pc, #520]	@ (8003854 <odometry_eg+0x274>)
 800364c:	6013      	str	r3, [r2, #0]

    double dtheta = mm_per_tick * (dn2 - dn1) / e1_e2;
 800364e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc ff65 	bl	8000524 <__aeabi_i2d>
 800365a:	a373      	add	r3, pc, #460	@ (adr r3, 8003828 <odometry_eg+0x248>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fc ffca 	bl	80005f8 <__aeabi_dmul>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	a370      	add	r3, pc, #448	@ (adr r3, 8003830 <odometry_eg+0x250>)
 800366e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003672:	f7fd f8eb 	bl	800084c <__aeabi_ddiv>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    double dx = mm_per_tick * (dn3 + (dn2 - dn1) * e12_e3 / e1_e2);
 800367e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	22e6      	movs	r2, #230	@ 0xe6
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	4a73      	ldr	r2, [pc, #460]	@ (8003858 <odometry_eg+0x278>)
 800368c:	fb82 1203 	smull	r1, r2, r2, r3
 8003690:	441a      	add	r2, r3
 8003692:	1212      	asrs	r2, r2, #8
 8003694:	17db      	asrs	r3, r3, #31
 8003696:	1ad2      	subs	r2, r2, r3
 8003698:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800369a:	4413      	add	r3, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f7fc ff41 	bl	8000524 <__aeabi_i2d>
 80036a2:	a361      	add	r3, pc, #388	@ (adr r3, 8003828 <odometry_eg+0x248>)
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f7fc ffa6 	bl	80005f8 <__aeabi_dmul>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double dy = mm_per_tick * (dn1 + dn2) / 2.0;
 80036b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036b8:	4413      	add	r3, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fc ff32 	bl	8000524 <__aeabi_i2d>
 80036c0:	a359      	add	r3, pc, #356	@ (adr r3, 8003828 <odometry_eg+0x248>)
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	f7fc ff97 	bl	80005f8 <__aeabi_dmul>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80036da:	f7fd f8b7 	bl	800084c <__aeabi_ddiv>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    /* END */

//	double theta = heading + (dtheta / 2.0);
	xGlobal += dx * cos(yaw) + dy * sin(yaw);
 80036e6:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 80036ea:	f00a f89d 	bl	800d828 <cos>
 80036ee:	ec51 0b10 	vmov	r0, r1, d0
 80036f2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80036f6:	f7fc ff7f 	bl	80005f8 <__aeabi_dmul>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4690      	mov	r8, r2
 8003700:	4699      	mov	r9, r3
 8003702:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8003706:	f00a f8e3 	bl	800d8d0 <sin>
 800370a:	ec51 0b10 	vmov	r0, r1, d0
 800370e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003712:	f7fc ff71 	bl	80005f8 <__aeabi_dmul>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4640      	mov	r0, r8
 800371c:	4649      	mov	r1, r9
 800371e:	f7fc fdb5 	bl	800028c <__adddf3>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4610      	mov	r0, r2
 8003728:	4619      	mov	r1, r3
 800372a:	4b4c      	ldr	r3, [pc, #304]	@ (800385c <odometry_eg+0x27c>)
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f7fc fdac 	bl	800028c <__adddf3>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4948      	ldr	r1, [pc, #288]	@ (800385c <odometry_eg+0x27c>)
 800373a:	e9c1 2300 	strd	r2, r3, [r1]
	yGlobal += -dx * sin(yaw) + dy * cos(yaw);
 800373e:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8003740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003742:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003746:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 800374a:	f00a f8c1 	bl	800d8d0 <sin>
 800374e:	ec53 2b10 	vmov	r2, r3, d0
 8003752:	4620      	mov	r0, r4
 8003754:	4629      	mov	r1, r5
 8003756:	f7fc ff4f 	bl	80005f8 <__aeabi_dmul>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4614      	mov	r4, r2
 8003760:	461d      	mov	r5, r3
 8003762:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8003766:	f00a f85f 	bl	800d828 <cos>
 800376a:	ec51 0b10 	vmov	r0, r1, d0
 800376e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003772:	f7fc ff41 	bl	80005f8 <__aeabi_dmul>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4620      	mov	r0, r4
 800377c:	4629      	mov	r1, r5
 800377e:	f7fc fd85 	bl	800028c <__adddf3>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4610      	mov	r0, r2
 8003788:	4619      	mov	r1, r3
 800378a:	4b35      	ldr	r3, [pc, #212]	@ (8003860 <odometry_eg+0x280>)
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	f7fc fd7c 	bl	800028c <__adddf3>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4931      	ldr	r1, [pc, #196]	@ (8003860 <odometry_eg+0x280>)
 800379a:	e9c1 2300 	strd	r2, r3, [r1]
	heading += dtheta;
 800379e:	4b31      	ldr	r3, [pc, #196]	@ (8003864 <odometry_eg+0x284>)
 80037a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037a8:	f7fc fd70 	bl	800028c <__adddf3>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	492c      	ldr	r1, [pc, #176]	@ (8003864 <odometry_eg+0x284>)
 80037b2:	e9c1 2300 	strd	r2, r3, [r1]

	currentPosition.x = xGlobal;
 80037b6:	4b29      	ldr	r3, [pc, #164]	@ (800385c <odometry_eg+0x27c>)
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	currentPosition.y = yGlobal;
 80037c0:	4b27      	ldr	r3, [pc, #156]	@ (8003860 <odometry_eg+0x280>)
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	currentPosition.h = sensorData[0];
 80037ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003838 <odometry_eg+0x258>)
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	return currentPosition;
 80037d4:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80037d8:	f107 0518 	add.w	r5, r7, #24
 80037dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80037e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80037e8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80037f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037f4:	ec45 4b15 	vmov	d5, r4, r5
 80037f8:	ec41 0b16 	vmov	d6, r0, r1
 80037fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8003800:	eeb0 0a45 	vmov.f32	s0, s10
 8003804:	eef0 0a65 	vmov.f32	s1, s11
 8003808:	eeb0 1a46 	vmov.f32	s2, s12
 800380c:	eef0 1a66 	vmov.f32	s3, s13
 8003810:	eeb0 2a47 	vmov.f32	s4, s14
 8003814:	eef0 2a67 	vmov.f32	s5, s15
 8003818:	3778      	adds	r7, #120	@ 0x78
 800381a:	46bd      	mov	sp, r7
 800381c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003820:	54442d18 	.word	0x54442d18
 8003824:	400921fb 	.word	0x400921fb
 8003828:	2d6e5f19 	.word	0x2d6e5f19
 800382c:	3fb752bc 	.word	0x3fb752bc
 8003830:	00000000 	.word	0x00000000
 8003834:	4077c000 	.word	0x4077c000
 8003838:	20000528 	.word	0x20000528
 800383c:	40668000 	.word	0x40668000
 8003840:	200004d0 	.word	0x200004d0
 8003844:	20000618 	.word	0x20000618
 8003848:	200004d4 	.word	0x200004d4
 800384c:	2000061c 	.word	0x2000061c
 8003850:	200004d8 	.word	0x200004d8
 8003854:	20000620 	.word	0x20000620
 8003858:	ac769185 	.word	0xac769185
 800385c:	20000600 	.word	0x20000600
 8003860:	20000608 	.word	0x20000608
 8003864:	20000610 	.word	0x20000610

08003868 <display_EG>:
	sprintf(buffer, "E3:%d", counter3);
	lcd_write_string(buffer);
}

void display_EG()
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
	external_global position = odometry_eg();
 800386e:	f7ff feb7 	bl	80035e0 <odometry_eg>
 8003872:	eeb0 5a40 	vmov.f32	s10, s0
 8003876:	eef0 5a60 	vmov.f32	s11, s1
 800387a:	eeb0 6a41 	vmov.f32	s12, s2
 800387e:	eef0 6a61 	vmov.f32	s13, s3
 8003882:	eeb0 7a42 	vmov.f32	s14, s4
 8003886:	eef0 7a62 	vmov.f32	s15, s5
 800388a:	ed87 5b00 	vstr	d5, [r7]
 800388e:	ed87 6b02 	vstr	d6, [r7, #8]
 8003892:	ed87 7b04 	vstr	d7, [r7, #16]

	lcd_set_cursor(0, 0);
 8003896:	2100      	movs	r1, #0
 8003898:	2000      	movs	r0, #0
 800389a:	f7fe fac9 	bl	8001e30 <lcd_set_cursor>
	sprintf(buffer, "X:%.2f", position.x);
 800389e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038a2:	4920      	ldr	r1, [pc, #128]	@ (8003924 <display_EG+0xbc>)
 80038a4:	4820      	ldr	r0, [pc, #128]	@ (8003928 <display_EG+0xc0>)
 80038a6:	f007 f975 	bl	800ab94 <siprintf>
	lcd_write_string(buffer);
 80038aa:	481f      	ldr	r0, [pc, #124]	@ (8003928 <display_EG+0xc0>)
 80038ac:	f7fe faaa 	bl	8001e04 <lcd_write_string>
	lcd_set_cursor(1, 0);
 80038b0:	2100      	movs	r1, #0
 80038b2:	2001      	movs	r0, #1
 80038b4:	f7fe fabc 	bl	8001e30 <lcd_set_cursor>
	sprintf(buffer, "Y:%.2f", position.y);
 80038b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038bc:	491b      	ldr	r1, [pc, #108]	@ (800392c <display_EG+0xc4>)
 80038be:	481a      	ldr	r0, [pc, #104]	@ (8003928 <display_EG+0xc0>)
 80038c0:	f007 f968 	bl	800ab94 <siprintf>
	lcd_write_string(buffer);
 80038c4:	4818      	ldr	r0, [pc, #96]	@ (8003928 <display_EG+0xc0>)
 80038c6:	f7fe fa9d 	bl	8001e04 <lcd_write_string>
	lcd_set_cursor(2, 0);
 80038ca:	2100      	movs	r1, #0
 80038cc:	2002      	movs	r0, #2
 80038ce:	f7fe faaf 	bl	8001e30 <lcd_set_cursor>
	sprintf(buffer, "H:%.2f", position.h);
 80038d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038d6:	4916      	ldr	r1, [pc, #88]	@ (8003930 <display_EG+0xc8>)
 80038d8:	4813      	ldr	r0, [pc, #76]	@ (8003928 <display_EG+0xc0>)
 80038da:	f007 f95b 	bl	800ab94 <siprintf>
	lcd_write_string(buffer);
 80038de:	4812      	ldr	r0, [pc, #72]	@ (8003928 <display_EG+0xc0>)
 80038e0:	f7fe fa90 	bl	8001e04 <lcd_write_string>
	lcd_set_cursor(3, 0);
 80038e4:	2100      	movs	r1, #0
 80038e6:	2003      	movs	r0, #3
 80038e8:	f7fe faa2 	bl	8001e30 <lcd_set_cursor>
	sprintf(buffer, "P:%.2f", sensorData[1]);
 80038ec:	4b11      	ldr	r3, [pc, #68]	@ (8003934 <display_EG+0xcc>)
 80038ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038f2:	4911      	ldr	r1, [pc, #68]	@ (8003938 <display_EG+0xd0>)
 80038f4:	480c      	ldr	r0, [pc, #48]	@ (8003928 <display_EG+0xc0>)
 80038f6:	f007 f94d 	bl	800ab94 <siprintf>
	lcd_write_string(buffer);
 80038fa:	480b      	ldr	r0, [pc, #44]	@ (8003928 <display_EG+0xc0>)
 80038fc:	f7fe fa82 	bl	8001e04 <lcd_write_string>
	lcd_set_cursor(3, 10);
 8003900:	210a      	movs	r1, #10
 8003902:	2003      	movs	r0, #3
 8003904:	f7fe fa94 	bl	8001e30 <lcd_set_cursor>
	sprintf(buffer, "R:%.2f", sensorData[2]);
 8003908:	4b0a      	ldr	r3, [pc, #40]	@ (8003934 <display_EG+0xcc>)
 800390a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800390e:	490b      	ldr	r1, [pc, #44]	@ (800393c <display_EG+0xd4>)
 8003910:	4805      	ldr	r0, [pc, #20]	@ (8003928 <display_EG+0xc0>)
 8003912:	f007 f93f 	bl	800ab94 <siprintf>
	lcd_write_string(buffer);
 8003916:	4804      	ldr	r0, [pc, #16]	@ (8003928 <display_EG+0xc0>)
 8003918:	f7fe fa74 	bl	8001e04 <lcd_write_string>
}
 800391c:	bf00      	nop
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	0800f408 	.word	0x0800f408
 8003928:	20000624 	.word	0x20000624
 800392c:	0800f410 	.word	0x0800f410
 8003930:	0800f43c 	.word	0x0800f43c
 8003934:	20000528 	.word	0x20000528
 8003938:	0800f494 	.word	0x0800f494
 800393c:	0800f49c 	.word	0x0800f49c

08003940 <PID_controller>:
/* Variable for PID*/
double integral = 0.0, derivative = 0.0, prev_error = 0.0;
/* END */

double PID_controller(double setpoint, double actual_position, double Kp, double Ki, double Kd)
{
 8003940:	b5b0      	push	{r4, r5, r7, lr}
 8003942:	b090      	sub	sp, #64	@ 0x40
 8003944:	af00      	add	r7, sp, #0
 8003946:	ed87 0b08 	vstr	d0, [r7, #32]
 800394a:	ed87 1b06 	vstr	d1, [r7, #24]
 800394e:	ed87 2b04 	vstr	d2, [r7, #16]
 8003952:	ed87 3b02 	vstr	d3, [r7, #8]
 8003956:	ed87 4b00 	vstr	d4, [r7]
	double dt = 0.01;
 800395a:	a33c      	add	r3, pc, #240	@ (adr r3, 8003a4c <PID_controller+0x10c>)
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    // Proportional
    double error = setpoint - actual_position;
 8003964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003968:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800396c:	f7fc fc8c 	bl	8000288 <__aeabi_dsub>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Integral
    integral += error * dt;
 8003978:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800397c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003980:	f7fc fe3a 	bl	80005f8 <__aeabi_dmul>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4610      	mov	r0, r2
 800398a:	4619      	mov	r1, r3
 800398c:	4b2c      	ldr	r3, [pc, #176]	@ (8003a40 <PID_controller+0x100>)
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	f7fc fc7b 	bl	800028c <__adddf3>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4929      	ldr	r1, [pc, #164]	@ (8003a40 <PID_controller+0x100>)
 800399c:	e9c1 2300 	strd	r2, r3, [r1]

    // Derivative
	derivative = (error - prev_error) / dt;
 80039a0:	4b28      	ldr	r3, [pc, #160]	@ (8003a44 <PID_controller+0x104>)
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80039aa:	f7fc fc6d 	bl	8000288 <__aeabi_dsub>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4610      	mov	r0, r2
 80039b4:	4619      	mov	r1, r3
 80039b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039ba:	f7fc ff47 	bl	800084c <__aeabi_ddiv>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4921      	ldr	r1, [pc, #132]	@ (8003a48 <PID_controller+0x108>)
 80039c4:	e9c1 2300 	strd	r2, r3, [r1]

    double output = Kp * error + Ki * integral + Kd * derivative;
 80039c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80039cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039d0:	f7fc fe12 	bl	80005f8 <__aeabi_dmul>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4614      	mov	r4, r2
 80039da:	461d      	mov	r5, r3
 80039dc:	4b18      	ldr	r3, [pc, #96]	@ (8003a40 <PID_controller+0x100>)
 80039de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039e6:	f7fc fe07 	bl	80005f8 <__aeabi_dmul>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4620      	mov	r0, r4
 80039f0:	4629      	mov	r1, r5
 80039f2:	f7fc fc4b 	bl	800028c <__adddf3>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4614      	mov	r4, r2
 80039fc:	461d      	mov	r5, r3
 80039fe:	4b12      	ldr	r3, [pc, #72]	@ (8003a48 <PID_controller+0x108>)
 8003a00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a08:	f7fc fdf6 	bl	80005f8 <__aeabi_dmul>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4620      	mov	r0, r4
 8003a12:	4629      	mov	r1, r5
 8003a14:	f7fc fc3a 	bl	800028c <__adddf3>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    prev_error = error;
 8003a20:	4908      	ldr	r1, [pc, #32]	@ (8003a44 <PID_controller+0x104>)
 8003a22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003a26:	e9c1 2300 	strd	r2, r3, [r1]

    return output;
 8003a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a2e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003a32:	eeb0 0a47 	vmov.f32	s0, s14
 8003a36:	eef0 0a67 	vmov.f32	s1, s15
 8003a3a:	3740      	adds	r7, #64	@ 0x40
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a40:	20000630 	.word	0x20000630
 8003a44:	20000640 	.word	0x20000640
 8003a48:	20000638 	.word	0x20000638
 8003a4c:	47ae147b 	.word	0x47ae147b
 8003a50:	3f847ae1 	.word	0x3f847ae1

08003a54 <PID_controllerH>:

double PID_controllerH(double setpoint, double actual_position, double Kp)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	@ 0x28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	ed87 0b04 	vstr	d0, [r7, #16]
 8003a5e:	ed87 1b02 	vstr	d1, [r7, #8]
 8003a62:	ed87 2b00 	vstr	d2, [r7]
	double error = setpoint - actual_position;
 8003a66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a6e:	f7fc fc0b 	bl	8000288 <__aeabi_dsub>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if(error > 180)
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8003afc <PID_controllerH+0xa8>)
 8003a80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a84:	f7fd f848 	bl	8000b18 <__aeabi_dcmpgt>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <PID_controllerH+0x52>
	{
		error -= 360;
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	4b1b      	ldr	r3, [pc, #108]	@ (8003b00 <PID_controllerH+0xac>)
 8003a94:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a98:	f7fc fbf6 	bl	8000288 <__aeabi_dsub>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003aa4:	e014      	b.n	8003ad0 <PID_controllerH+0x7c>
	}
	else if(error < -180)
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	4b16      	ldr	r3, [pc, #88]	@ (8003b04 <PID_controllerH+0xb0>)
 8003aac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003ab0:	f7fd f814 	bl	8000adc <__aeabi_dcmplt>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <PID_controllerH+0x7c>
	{
		error += 360;
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	4b10      	ldr	r3, [pc, #64]	@ (8003b00 <PID_controllerH+0xac>)
 8003ac0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003ac4:	f7fc fbe2 	bl	800028c <__adddf3>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

    // Proportional
	double P = Kp * error;
 8003ad0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ad4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ad8:	f7fc fd8e 	bl	80005f8 <__aeabi_dmul>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return P;
 8003ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ae8:	ec43 2b17 	vmov	d7, r2, r3
}
 8003aec:	eeb0 0a47 	vmov.f32	s0, s14
 8003af0:	eef0 0a67 	vmov.f32	s1, s15
 8003af4:	3728      	adds	r7, #40	@ 0x28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40668000 	.word	0x40668000
 8003b00:	40768000 	.word	0x40768000
 8003b04:	c0668000 	.word	0xc0668000

08003b08 <map>:
uint8_t lookingMode = 1;

Silo silos[MAX_SILOS];

int map(int st1, int fn1, int st2, int fn2, int value)
{
 8003b08:	b5b0      	push	{r4, r5, r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
    return (1.0 * (value - st1)) / ((fn1 - st1) * 1.0) * (fn2 - st2) + st2;
 8003b16:	6a3a      	ldr	r2, [r7, #32]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fc fd01 	bl	8000524 <__aeabi_i2d>
 8003b22:	4604      	mov	r4, r0
 8003b24:	460d      	mov	r5, r1
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fc fcf9 	bl	8000524 <__aeabi_i2d>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4620      	mov	r0, r4
 8003b38:	4629      	mov	r1, r5
 8003b3a:	f7fc fe87 	bl	800084c <__aeabi_ddiv>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4614      	mov	r4, r2
 8003b44:	461d      	mov	r5, r3
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fc fce9 	bl	8000524 <__aeabi_i2d>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4620      	mov	r0, r4
 8003b58:	4629      	mov	r1, r5
 8003b5a:	f7fc fd4d 	bl	80005f8 <__aeabi_dmul>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4614      	mov	r4, r2
 8003b64:	461d      	mov	r5, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fc fcdc 	bl	8000524 <__aeabi_i2d>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4620      	mov	r0, r4
 8003b72:	4629      	mov	r1, r5
 8003b74:	f7fc fb8a 	bl	800028c <__adddf3>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f7fc ffea 	bl	8000b58 <__aeabi_d2iz>
 8003b84:	4603      	mov	r3, r0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003b90 <smoothVelocity>:
    }
    return target;
}

void smoothVelocity(double* Vx, double* Vy, double* W, double smoothingFactor)
{
 8003b90:	b5b0      	push	{r4, r5, r7, lr}
 8003b92:	b08c      	sub	sp, #48	@ 0x30
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6178      	str	r0, [r7, #20]
 8003b98:	6139      	str	r1, [r7, #16]
 8003b9a:	60fa      	str	r2, [r7, #12]
 8003b9c:	ed87 0b00 	vstr	d0, [r7]
	double prevVx = 0.0;
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double prevVy = 0.0;
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double prevW = 0.0;
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *Vx = (1.0 - smoothingFactor) * prevVx + smoothingFactor * (*Vx);
 8003bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bc8:	f04f 0000 	mov.w	r0, #0
 8003bcc:	493e      	ldr	r1, [pc, #248]	@ (8003cc8 <smoothVelocity+0x138>)
 8003bce:	f7fc fb5b 	bl	8000288 <__aeabi_dsub>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bde:	f7fc fd0b 	bl	80005f8 <__aeabi_dmul>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4614      	mov	r4, r2
 8003be8:	461d      	mov	r5, r3
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bf4:	f7fc fd00 	bl	80005f8 <__aeabi_dmul>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	4629      	mov	r1, r5
 8003c00:	f7fc fb44 	bl	800028c <__adddf3>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	6979      	ldr	r1, [r7, #20]
 8003c0a:	e9c1 2300 	strd	r2, r3, [r1]
    *Vy = (1.0 - smoothingFactor) * prevVy + smoothingFactor * (*Vy);
 8003c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	492c      	ldr	r1, [pc, #176]	@ (8003cc8 <smoothVelocity+0x138>)
 8003c18:	f7fc fb36 	bl	8000288 <__aeabi_dsub>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c28:	f7fc fce6 	bl	80005f8 <__aeabi_dmul>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4614      	mov	r4, r2
 8003c32:	461d      	mov	r5, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c3e:	f7fc fcdb 	bl	80005f8 <__aeabi_dmul>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4620      	mov	r0, r4
 8003c48:	4629      	mov	r1, r5
 8003c4a:	f7fc fb1f 	bl	800028c <__adddf3>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	6939      	ldr	r1, [r7, #16]
 8003c54:	e9c1 2300 	strd	r2, r3, [r1]
    *W = (1.0 - smoothingFactor) * prevW + smoothingFactor * (*W);
 8003c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c5c:	f04f 0000 	mov.w	r0, #0
 8003c60:	4919      	ldr	r1, [pc, #100]	@ (8003cc8 <smoothVelocity+0x138>)
 8003c62:	f7fc fb11 	bl	8000288 <__aeabi_dsub>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c72:	f7fc fcc1 	bl	80005f8 <__aeabi_dmul>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4614      	mov	r4, r2
 8003c7c:	461d      	mov	r5, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c88:	f7fc fcb6 	bl	80005f8 <__aeabi_dmul>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4620      	mov	r0, r4
 8003c92:	4629      	mov	r1, r5
 8003c94:	f7fc fafa 	bl	800028c <__adddf3>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	68f9      	ldr	r1, [r7, #12]
 8003c9e:	e9c1 2300 	strd	r2, r3, [r1]

    prevVx = *Vx;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    prevVy = *Vy;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    prevW = *W;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
}
 8003cc0:	bf00      	nop
 8003cc2:	3730      	adds	r7, #48	@ 0x30
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc8:	3ff00000 	.word	0x3ff00000

08003ccc <atTargetEG>:
    }
    return targetVelocity;
}

bool atTargetEG(external_global setpoint, external_global position, double xyTolerance, double Htolerance)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b098      	sub	sp, #96	@ 0x60
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	ed87 6b02 	vstr	d6, [r7, #8]
 8003cd6:	ed87 7b00 	vstr	d7, [r7]
 8003cda:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 8003cde:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 8003ce2:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
 8003ce6:	ed87 3b04 	vstr	d3, [r7, #16]
 8003cea:	ed87 4b06 	vstr	d4, [r7, #24]
 8003cee:	ed87 5b08 	vstr	d5, [r7, #32]
	double error_x = setpoint.x - position.x;
 8003cf2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003cf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003cfa:	f7fc fac5 	bl	8000288 <__aeabi_dsub>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	double error_y = setpoint.y - position.y;
 8003d06:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003d0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d0e:	f7fc fabb 	bl	8000288 <__aeabi_dsub>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double error_h = fabs(setpoint.h - position.h);
 8003d1a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d22:	f7fc fab1 	bl	8000288 <__aeabi_dsub>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
	double distance = hypot(error_x, error_y);
 8003d34:	ed97 1b14 	vldr	d1, [r7, #80]	@ 0x50
 8003d38:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 8003d3c:	f009 fd40 	bl	800d7c0 <hypot>
 8003d40:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	return distance < xyTolerance && error_h < Htolerance;
 8003d44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d48:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003d4c:	f7fc fec6 	bl	8000adc <__aeabi_dcmplt>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <atTargetEG+0xa0>
 8003d56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8003d5e:	f7fc febd 	bl	8000adc <__aeabi_dcmplt>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <atTargetEG+0xa0>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <atTargetEG+0xa2>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	b2db      	uxtb	r3, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3760      	adds	r7, #96	@ 0x60
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	0000      	movs	r0, r0
	...

08003d80 <lookForTheBall>:
	double distance = hypot(error_x, error_y);
	return distance < xyTolerance && error_h < Htolerance;
}

void lookForTheBall(double targetAngle1, double targetAngle2, double currentAngle)
{
 8003d80:	b5b0      	push	{r4, r5, r7, lr}
 8003d82:	b08c      	sub	sp, #48	@ 0x30
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	ed87 0b04 	vstr	d0, [r7, #16]
 8003d8a:	ed87 1b02 	vstr	d1, [r7, #8]
 8003d8e:	ed87 2b00 	vstr	d2, [r7]
    double targetAngle;
    uint8_t nextMode;

    switch (lookingMode)
 8003d92:	4b25      	ldr	r3, [pc, #148]	@ (8003e28 <lookForTheBall+0xa8>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d002      	beq.n	8003da0 <lookForTheBall+0x20>
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d008      	beq.n	8003db0 <lookForTheBall+0x30>
        case 2:
        	targetAngle = targetAngle1;
            nextMode = 1;
            break;
        default:
            return; // Invalid mode, do nothing
 8003d9e:	e03c      	b.n	8003e1a <lookForTheBall+0x9a>
        	targetAngle = targetAngle2;
 8003da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003da4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            nextMode = 2;
 8003da8:	2302      	movs	r3, #2
 8003daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8003dae:	e007      	b.n	8003dc0 <lookForTheBall+0x40>
        	targetAngle = targetAngle1;
 8003db0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003db4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            nextMode = 1;
 8003db8:	2301      	movs	r3, #1
 8003dba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8003dbe:	bf00      	nop
    }

    double W = PID_controllerH(targetAngle, currentAngle, 1.0);
 8003dc0:	ed9f 2b17 	vldr	d2, [pc, #92]	@ 8003e20 <lookForTheBall+0xa0>
 8003dc4:	ed97 1b00 	vldr	d1, [r7]
 8003dc8:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8003dcc:	f7ff fe42 	bl	8003a54 <PID_controllerH>
 8003dd0:	ed87 0b06 	vstr	d0, [r7, #24]
    putar(0, 0, W);
 8003dd4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003dd8:	f7fc febe 	bl	8000b58 <__aeabi_d2iz>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	461a      	mov	r2, r3
 8003de0:	2100      	movs	r1, #0
 8003de2:	2000      	movs	r0, #0
 8003de4:	f7fd fc90 	bl	8001708 <putar>
    if (fabs(targetAngle - currentAngle) < 5.0)
 8003de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003df0:	f7fc fa4a 	bl	8000288 <__aeabi_dsub>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4614      	mov	r4, r2
 8003dfa:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	4b0a      	ldr	r3, [pc, #40]	@ (8003e2c <lookForTheBall+0xac>)
 8003e04:	4620      	mov	r0, r4
 8003e06:	4629      	mov	r1, r5
 8003e08:	f7fc fe68 	bl	8000adc <__aeabi_dcmplt>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <lookForTheBall+0x9a>
    {
        lookingMode = nextMode;
 8003e12:	4a05      	ldr	r2, [pc, #20]	@ (8003e28 <lookForTheBall+0xa8>)
 8003e14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e18:	7013      	strb	r3, [r2, #0]
    }
}
 8003e1a:	3730      	adds	r7, #48	@ 0x30
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e20:	00000000 	.word	0x00000000
 8003e24:	3ff00000 	.word	0x3ff00000
 8003e28:	200000c9 	.word	0x200000c9
 8003e2c:	40140000 	.word	0x40140000

08003e30 <servo_write>:

void servo_write(int angle)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	6078      	str	r0, [r7, #4]
	int i = map(0, 180, 30, 130, angle);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	2382      	movs	r3, #130	@ 0x82
 8003e3e:	221e      	movs	r2, #30
 8003e40:	21b4      	movs	r1, #180	@ 0xb4
 8003e42:	2000      	movs	r0, #0
 8003e44:	f7ff fe60 	bl	8003b08 <map>
 8003e48:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, i);
 8003e4a:	4b04      	ldr	r3, [pc, #16]	@ (8003e5c <servo_write+0x2c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000368 	.word	0x20000368

08003e60 <PID_EG>:

void PID_EG(external_global setpoint, double Kp, double Ki, double Kd, double KpH, double smoothingFactor, double maxVelocity)
{
 8003e60:	b5b0      	push	{r4, r5, r7, lr}
 8003e62:	b0ae      	sub	sp, #184	@ 0xb8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	ed87 3b08 	vstr	d3, [r7, #32]
 8003e6a:	ed87 4b06 	vstr	d4, [r7, #24]
 8003e6e:	ed87 5b04 	vstr	d5, [r7, #16]
 8003e72:	ed87 6b02 	vstr	d6, [r7, #8]
 8003e76:	ed87 7b00 	vstr	d7, [r7]
 8003e7a:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 8003e7e:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 8003e82:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
	external_global currentPosition = odometry_eg();
 8003e86:	f7ff fbab 	bl	80035e0 <odometry_eg>
 8003e8a:	eeb0 5a40 	vmov.f32	s10, s0
 8003e8e:	eef0 5a60 	vmov.f32	s11, s1
 8003e92:	eeb0 6a41 	vmov.f32	s12, s2
 8003e96:	eef0 6a61 	vmov.f32	s13, s3
 8003e9a:	eeb0 7a42 	vmov.f32	s14, s4
 8003e9e:	eef0 7a62 	vmov.f32	s15, s5
 8003ea2:	ed87 5b16 	vstr	d5, [r7, #88]	@ 0x58
 8003ea6:	ed87 6b18 	vstr	d6, [r7, #96]	@ 0x60
 8003eaa:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68

	double pitch = sensorData[1] * 300; // IMU pitch
 8003eae:	4bac      	ldr	r3, [pc, #688]	@ (8004160 <PID_EG+0x300>)
 8003eb0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003eb4:	a3a6      	add	r3, pc, #664	@ (adr r3, 8004150 <PID_EG+0x2f0>)
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	f7fc fb9d 	bl	80005f8 <__aeabi_dmul>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	double roll = sensorData[2] * 300; // IMU roll
 8003ec6:	4ba6      	ldr	r3, [pc, #664]	@ (8004160 <PID_EG+0x300>)
 8003ec8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003ecc:	a3a0      	add	r3, pc, #640	@ (adr r3, 8004150 <PID_EG+0x2f0>)
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	f7fc fb91 	bl	80005f8 <__aeabi_dmul>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double error_x = setpoint.x - currentPosition.x;
 8003ede:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ee2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ee6:	f7fc f9cf 	bl	8000288 <__aeabi_dsub>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
    double error_y = setpoint.y - currentPosition.y;
 8003ef2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003ef6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003efa:	f7fc f9c5 	bl	8000288 <__aeabi_dsub>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    double current_heading_rad = currentPosition.h * M_PI / 180.0;
 8003f06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f0a:	a393      	add	r3, pc, #588	@ (adr r3, 8004158 <PID_EG+0x2f8>)
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	f7fc fb72 	bl	80005f8 <__aeabi_dmul>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	4b90      	ldr	r3, [pc, #576]	@ (8004164 <PID_EG+0x304>)
 8003f22:	f7fc fc93 	bl	800084c <__aeabi_ddiv>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

    double distance = hypot(error_x, error_y);
 8003f2e:	ed97 1b26 	vldr	d1, [r7, #152]	@ 0x98
 8003f32:	ed97 0b28 	vldr	d0, [r7, #160]	@ 0xa0
 8003f36:	f009 fc43 	bl	800d7c0 <hypot>
 8003f3a:	ed87 0b22 	vstr	d0, [r7, #136]	@ 0x88
    double velocityFactor = fmin(distance, maxVelocity) / distance;
 8003f3e:	ed97 1b32 	vldr	d1, [r7, #200]	@ 0xc8
 8003f42:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 8003f46:	f009 fd4c 	bl	800d9e2 <fmin>
 8003f4a:	ec51 0b10 	vmov	r0, r1, d0
 8003f4e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f52:	f7fc fc7b 	bl	800084c <__aeabi_ddiv>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    double Vx_local = PID_controller(setpoint.x, currentPosition.x, Kp, Ki, Kd) * velocityFactor;
 8003f5e:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8003f62:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8003f66:	ed97 4b04 	vldr	d4, [r7, #16]
 8003f6a:	ed97 3b06 	vldr	d3, [r7, #24]
 8003f6e:	ed97 2b08 	vldr	d2, [r7, #32]
 8003f72:	eeb0 1a46 	vmov.f32	s2, s12
 8003f76:	eef0 1a66 	vmov.f32	s3, s13
 8003f7a:	eeb0 0a47 	vmov.f32	s0, s14
 8003f7e:	eef0 0a67 	vmov.f32	s1, s15
 8003f82:	f7ff fcdd 	bl	8003940 <PID_controller>
 8003f86:	ec53 2b10 	vmov	r2, r3, d0
 8003f8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f8e:	f7fc fb33 	bl	80005f8 <__aeabi_dmul>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    double Vy_local = PID_controller(setpoint.y, currentPosition.y, Kp, Ki, Kd) * velocityFactor;
 8003f9a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003f9e:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8003fa2:	ed97 4b04 	vldr	d4, [r7, #16]
 8003fa6:	ed97 3b06 	vldr	d3, [r7, #24]
 8003faa:	ed97 2b08 	vldr	d2, [r7, #32]
 8003fae:	eeb0 1a46 	vmov.f32	s2, s12
 8003fb2:	eef0 1a66 	vmov.f32	s3, s13
 8003fb6:	eeb0 0a47 	vmov.f32	s0, s14
 8003fba:	eef0 0a67 	vmov.f32	s1, s15
 8003fbe:	f7ff fcbf 	bl	8003940 <PID_controller>
 8003fc2:	ec53 2b10 	vmov	r2, r3, d0
 8003fc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003fca:	f7fc fb15 	bl	80005f8 <__aeabi_dmul>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    double Vx = Vx_local * cos(current_heading_rad) - Vy_local * sin(current_heading_rad);
 8003fd6:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8003fda:	f009 fc25 	bl	800d828 <cos>
 8003fde:	ec51 0b10 	vmov	r0, r1, d0
 8003fe2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8003fe6:	f7fc fb07 	bl	80005f8 <__aeabi_dmul>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4614      	mov	r4, r2
 8003ff0:	461d      	mov	r5, r3
 8003ff2:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8003ff6:	f009 fc6b 	bl	800d8d0 <sin>
 8003ffa:	ec51 0b10 	vmov	r0, r1, d0
 8003ffe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004002:	f7fc faf9 	bl	80005f8 <__aeabi_dmul>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4620      	mov	r0, r4
 800400c:	4629      	mov	r1, r5
 800400e:	f7fc f93b 	bl	8000288 <__aeabi_dsub>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double Vy = Vx_local * sin(current_heading_rad) + Vy_local * cos(current_heading_rad);
 800401a:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800401e:	f009 fc57 	bl	800d8d0 <sin>
 8004022:	ec51 0b10 	vmov	r0, r1, d0
 8004026:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800402a:	f7fc fae5 	bl	80005f8 <__aeabi_dmul>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4614      	mov	r4, r2
 8004034:	461d      	mov	r5, r3
 8004036:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800403a:	f009 fbf5 	bl	800d828 <cos>
 800403e:	ec51 0b10 	vmov	r0, r1, d0
 8004042:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004046:	f7fc fad7 	bl	80005f8 <__aeabi_dmul>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4620      	mov	r0, r4
 8004050:	4629      	mov	r1, r5
 8004052:	f7fc f91b 	bl	800028c <__adddf3>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double W = PID_controllerH(setpoint.h, currentPosition.h, KpH);
 800405e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8004062:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 8004066:	ed97 2b02 	vldr	d2, [r7, #8]
 800406a:	eeb0 1a46 	vmov.f32	s2, s12
 800406e:	eef0 1a66 	vmov.f32	s3, s13
 8004072:	eeb0 0a47 	vmov.f32	s0, s14
 8004076:	eef0 0a67 	vmov.f32	s1, s15
 800407a:	f7ff fceb 	bl	8003a54 <PID_controllerH>
 800407e:	eeb0 7a40 	vmov.f32	s14, s0
 8004082:	eef0 7a60 	vmov.f32	s15, s1
 8004086:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

    if(roll > 0)	{Vx -= roll;}
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8004096:	f7fc fd3f 	bl	8000b18 <__aeabi_dcmpgt>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <PID_EG+0x256>
 80040a0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80040a4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80040a8:	f7fc f8ee 	bl	8000288 <__aeabi_dsub>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80040b4:	e009      	b.n	80040ca <PID_EG+0x26a>
    else			{Vx += roll;}
 80040b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80040ba:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80040be:	f7fc f8e5 	bl	800028c <__adddf3>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    if(pitch > 0)	{Vy += pitch;}
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040d6:	f7fc fd1f 	bl	8000b18 <__aeabi_dcmpgt>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <PID_EG+0x296>
 80040e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80040e4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 80040e8:	f7fc f8d0 	bl	800028c <__adddf3>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80040f4:	e009      	b.n	800410a <PID_EG+0x2aa>
    else			{Vy -= pitch;}
 80040f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80040fa:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 80040fe:	f7fc f8c3 	bl	8000288 <__aeabi_dsub>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
 800410a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800410e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8004112:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004116:	ed97 0b00 	vldr	d0, [r7]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fd38 	bl	8003b90 <smoothVelocity>
    Inverse_Kinematics(Vx, Vy, W);
 8004120:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8004124:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8004128:	ed97 5b10 	vldr	d5, [r7, #64]	@ 0x40
 800412c:	eeb0 2a45 	vmov.f32	s4, s10
 8004130:	eef0 2a65 	vmov.f32	s5, s11
 8004134:	eeb0 1a46 	vmov.f32	s2, s12
 8004138:	eef0 1a66 	vmov.f32	s3, s13
 800413c:	eeb0 0a47 	vmov.f32	s0, s14
 8004140:	eef0 0a67 	vmov.f32	s1, s15
 8004144:	f7fd f800 	bl	8001148 <Inverse_Kinematics>
}
 8004148:	bf00      	nop
 800414a:	37b8      	adds	r7, #184	@ 0xb8
 800414c:	46bd      	mov	sp, r7
 800414e:	bdb0      	pop	{r4, r5, r7, pc}
 8004150:	00000000 	.word	0x00000000
 8004154:	4072c000 	.word	0x4072c000
 8004158:	54442d18 	.word	0x54442d18
 800415c:	400921fb 	.word	0x400921fb
 8004160:	20000528 	.word	0x20000528
 8004164:	40668000 	.word	0x40668000

08004168 <focusToTheBall>:
    double W = PID_controllerH(setpoint_h, currentPosition.h, KpH);
    putar(0, 0, W);
}

void focusToTheBall()
{
 8004168:	b5b0      	push	{r4, r5, r7, lr}
 800416a:	b08c      	sub	sp, #48	@ 0x30
 800416c:	af02      	add	r7, sp, #8
    int ballDistance = camera[0] * 10; // convert to mm
 800416e:	4b40      	ldr	r3, [pc, #256]	@ (8004270 <focusToTheBall+0x108>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24
    int ballAngle = camera[1];
 800417c:	4b3c      	ldr	r3, [pc, #240]	@ (8004270 <focusToTheBall+0x108>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	623b      	str	r3, [r7, #32]
    int ballExistence = camera[2];
 8004182:	4b3b      	ldr	r3, [pc, #236]	@ (8004270 <focusToTheBall+0x108>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	61fb      	str	r3, [r7, #28]
    int yBALL = cos(ballAngle * M_PI / 180.0) * ballDistance;
 8004188:	6a38      	ldr	r0, [r7, #32]
 800418a:	f7fc f9cb 	bl	8000524 <__aeabi_i2d>
 800418e:	a336      	add	r3, pc, #216	@ (adr r3, 8004268 <focusToTheBall+0x100>)
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f7fc fa30 	bl	80005f8 <__aeabi_dmul>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	4b33      	ldr	r3, [pc, #204]	@ (8004274 <focusToTheBall+0x10c>)
 80041a6:	f7fc fb51 	bl	800084c <__aeabi_ddiv>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	ec43 2b17 	vmov	d7, r2, r3
 80041b2:	eeb0 0a47 	vmov.f32	s0, s14
 80041b6:	eef0 0a67 	vmov.f32	s1, s15
 80041ba:	f009 fb35 	bl	800d828 <cos>
 80041be:	ec55 4b10 	vmov	r4, r5, d0
 80041c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80041c4:	f7fc f9ae 	bl	8000524 <__aeabi_i2d>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4620      	mov	r0, r4
 80041ce:	4629      	mov	r1, r5
 80041d0:	f7fc fa12 	bl	80005f8 <__aeabi_dmul>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4610      	mov	r0, r2
 80041da:	4619      	mov	r1, r3
 80041dc:	f7fc fcbc 	bl	8000b58 <__aeabi_d2iz>
 80041e0:	4603      	mov	r3, r0
 80041e2:	61bb      	str	r3, [r7, #24]

    int gndtoCam = 518; // in mm
 80041e4:	f240 2306 	movw	r3, #518	@ 0x206
 80041e8:	617b      	str	r3, [r7, #20]
//    static bool increasing = true;
//    static int i = 95;

    if(ballExistence != 0)
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d034      	beq.n	800425a <focusToTheBall+0xf2>
    {
        double focus = atan2(yBALL, gndtoCam) * 180.0 / M_PI;
 80041f0:	69b8      	ldr	r0, [r7, #24]
 80041f2:	f7fc f997 	bl	8000524 <__aeabi_i2d>
 80041f6:	4604      	mov	r4, r0
 80041f8:	460d      	mov	r5, r1
 80041fa:	6978      	ldr	r0, [r7, #20]
 80041fc:	f7fc f992 	bl	8000524 <__aeabi_i2d>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	ec43 2b11 	vmov	d1, r2, r3
 8004208:	ec45 4b10 	vmov	d0, r4, r5
 800420c:	f009 fad4 	bl	800d7b8 <atan2>
 8004210:	ec51 0b10 	vmov	r0, r1, d0
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	4b16      	ldr	r3, [pc, #88]	@ (8004274 <focusToTheBall+0x10c>)
 800421a:	f7fc f9ed 	bl	80005f8 <__aeabi_dmul>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4610      	mov	r0, r2
 8004224:	4619      	mov	r1, r3
 8004226:	a310      	add	r3, pc, #64	@ (adr r3, 8004268 <focusToTheBall+0x100>)
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	f7fc fb0e 	bl	800084c <__aeabi_ddiv>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	e9c7 2302 	strd	r2, r3, [r7, #8]
        int focusMapping = map(0, 90, 45, 130, focus); // 45, 130
 8004238:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800423c:	f7fc fc8c 	bl	8000b58 <__aeabi_d2iz>
 8004240:	4603      	mov	r3, r0
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	2382      	movs	r3, #130	@ 0x82
 8004246:	222d      	movs	r2, #45	@ 0x2d
 8004248:	215a      	movs	r1, #90	@ 0x5a
 800424a:	2000      	movs	r0, #0
 800424c:	f7ff fc5c 	bl	8003b08 <map>
 8004250:	6078      	str	r0, [r7, #4]
        servo_write(focusMapping);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff fdec 	bl	8003e30 <servo_write>
//    		i-=5;
//    		if(i <= 95) increasing = true;
//    	}
//    	servo_write(i);
    }
}
 8004258:	e002      	b.n	8004260 <focusToTheBall+0xf8>
    	servo_write(97); // 100
 800425a:	2061      	movs	r0, #97	@ 0x61
 800425c:	f7ff fde8 	bl	8003e30 <servo_write>
}
 8004260:	bf00      	nop
 8004262:	3728      	adds	r7, #40	@ 0x28
 8004264:	46bd      	mov	sp, r7
 8004266:	bdb0      	pop	{r4, r5, r7, pc}
 8004268:	54442d18 	.word	0x54442d18
 800426c:	400921fb 	.word	0x400921fb
 8004270:	2000057c 	.word	0x2000057c
 8004274:	40668000 	.word	0x40668000

08004278 <initializeSilos>:

// Initialize silos array
void initializeSilos()
{
 8004278:	b5b0      	push	{r4, r5, r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_SILOS; i++)
 800427e:	2300      	movs	r3, #0
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	e092      	b.n	80043aa <initializeSilos+0x132>
    {
        silos[i].distance = SILO_NOT_DETECTED_DISTANCE;
 8004284:	4a50      	ldr	r2, [pc, #320]	@ (80043c8 <initializeSilos+0x150>)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	015b      	lsls	r3, r3, #5
 800428a:	4413      	add	r3, r2
 800428c:	4a4f      	ldr	r2, [pc, #316]	@ (80043cc <initializeSilos+0x154>)
 800428e:	601a      	str	r2, [r3, #0]
        silos[i].angle = SILO_NOT_DETECTED_ANGLE;
 8004290:	4a4d      	ldr	r2, [pc, #308]	@ (80043c8 <initializeSilos+0x150>)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	015b      	lsls	r3, r3, #5
 8004296:	4413      	add	r3, r2
 8004298:	3304      	adds	r3, #4
 800429a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800429e:	601a      	str	r2, [r3, #0]
        silos[i].detected = false;
 80042a0:	4a49      	ldr	r2, [pc, #292]	@ (80043c8 <initializeSilos+0x150>)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	015b      	lsls	r3, r3, #5
 80042a6:	4413      	add	r3, r2
 80042a8:	3308      	adds	r3, #8
 80042aa:	2200      	movs	r2, #0
 80042ac:	701a      	strb	r2, [r3, #0]
        silos[i].ballInSilo = 0;
 80042ae:	4a46      	ldr	r2, [pc, #280]	@ (80043c8 <initializeSilos+0x150>)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	015b      	lsls	r3, r3, #5
 80042b4:	4413      	add	r3, r2
 80042b6:	330c      	adds	r3, #12
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
        silos[i].x = silos[i].distance * sin(silos[i].angle * M_PI/180);
 80042bc:	4a42      	ldr	r2, [pc, #264]	@ (80043c8 <initializeSilos+0x150>)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	015b      	lsls	r3, r3, #5
 80042c2:	4413      	add	r3, r2
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fc f92c 	bl	8000524 <__aeabi_i2d>
 80042cc:	4604      	mov	r4, r0
 80042ce:	460d      	mov	r5, r1
 80042d0:	4a3d      	ldr	r2, [pc, #244]	@ (80043c8 <initializeSilos+0x150>)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	015b      	lsls	r3, r3, #5
 80042d6:	4413      	add	r3, r2
 80042d8:	3304      	adds	r3, #4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fc f921 	bl	8000524 <__aeabi_i2d>
 80042e2:	a337      	add	r3, pc, #220	@ (adr r3, 80043c0 <initializeSilos+0x148>)
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f7fc f986 	bl	80005f8 <__aeabi_dmul>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4610      	mov	r0, r2
 80042f2:	4619      	mov	r1, r3
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	4b35      	ldr	r3, [pc, #212]	@ (80043d0 <initializeSilos+0x158>)
 80042fa:	f7fc faa7 	bl	800084c <__aeabi_ddiv>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	ec43 2b17 	vmov	d7, r2, r3
 8004306:	eeb0 0a47 	vmov.f32	s0, s14
 800430a:	eef0 0a67 	vmov.f32	s1, s15
 800430e:	f009 fadf 	bl	800d8d0 <sin>
 8004312:	ec53 2b10 	vmov	r2, r3, d0
 8004316:	4620      	mov	r0, r4
 8004318:	4629      	mov	r1, r5
 800431a:	f7fc f96d 	bl	80005f8 <__aeabi_dmul>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4829      	ldr	r0, [pc, #164]	@ (80043c8 <initializeSilos+0x150>)
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	0149      	lsls	r1, r1, #5
 8004328:	4401      	add	r1, r0
 800432a:	3110      	adds	r1, #16
 800432c:	e9c1 2300 	strd	r2, r3, [r1]
        silos[i].y = silos[i].distance * cos(silos[i].angle * M_PI/180);
 8004330:	4a25      	ldr	r2, [pc, #148]	@ (80043c8 <initializeSilos+0x150>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	015b      	lsls	r3, r3, #5
 8004336:	4413      	add	r3, r2
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7fc f8f2 	bl	8000524 <__aeabi_i2d>
 8004340:	4604      	mov	r4, r0
 8004342:	460d      	mov	r5, r1
 8004344:	4a20      	ldr	r2, [pc, #128]	@ (80043c8 <initializeSilos+0x150>)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	015b      	lsls	r3, r3, #5
 800434a:	4413      	add	r3, r2
 800434c:	3304      	adds	r3, #4
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f7fc f8e7 	bl	8000524 <__aeabi_i2d>
 8004356:	a31a      	add	r3, pc, #104	@ (adr r3, 80043c0 <initializeSilos+0x148>)
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f7fc f94c 	bl	80005f8 <__aeabi_dmul>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	4b18      	ldr	r3, [pc, #96]	@ (80043d0 <initializeSilos+0x158>)
 800436e:	f7fc fa6d 	bl	800084c <__aeabi_ddiv>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	ec43 2b17 	vmov	d7, r2, r3
 800437a:	eeb0 0a47 	vmov.f32	s0, s14
 800437e:	eef0 0a67 	vmov.f32	s1, s15
 8004382:	f009 fa51 	bl	800d828 <cos>
 8004386:	ec53 2b10 	vmov	r2, r3, d0
 800438a:	4620      	mov	r0, r4
 800438c:	4629      	mov	r1, r5
 800438e:	f7fc f933 	bl	80005f8 <__aeabi_dmul>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	480c      	ldr	r0, [pc, #48]	@ (80043c8 <initializeSilos+0x150>)
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	0149      	lsls	r1, r1, #5
 800439c:	4401      	add	r1, r0
 800439e:	3118      	adds	r1, #24
 80043a0:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < MAX_SILOS; i++)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3301      	adds	r3, #1
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	f77f af69 	ble.w	8004284 <initializeSilos+0xc>
    }
}
 80043b2:	bf00      	nop
 80043b4:	bf00      	nop
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bdb0      	pop	{r4, r5, r7, pc}
 80043bc:	f3af 8000 	nop.w
 80043c0:	54442d18 	.word	0x54442d18
 80043c4:	400921fb 	.word	0x400921fb
 80043c8:	20000648 	.word	0x20000648
 80043cc:	00018696 	.word	0x00018696
 80043d0:	40668000 	.word	0x40668000
 80043d4:	00000000 	.word	0x00000000

080043d8 <detectAndStoreSilo>:

Silo detectAndStoreSilo()
{
 80043d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043dc:	b09c      	sub	sp, #112	@ 0x70
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
    Silo bestSilo;
    bestSilo.distance = SILO_NOT_DETECTED_DISTANCE;
 80043e2:	4ba7      	ldr	r3, [pc, #668]	@ (8004680 <detectAndStoreSilo+0x2a8>)
 80043e4:	64bb      	str	r3, [r7, #72]	@ 0x48
    bestSilo.angle = SILO_NOT_DETECTED_ANGLE;
 80043e6:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80043ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    bestSilo.detected = false;
 80043ec:	2300      	movs	r3, #0
 80043ee:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    servo_write(120);
 80043f2:	2078      	movs	r0, #120	@ 0x78
 80043f4:	f7ff fd1c 	bl	8003e30 <servo_write>

    external_global position = odometry_eg();
 80043f8:	f7ff f8f2 	bl	80035e0 <odometry_eg>
 80043fc:	eeb0 5a40 	vmov.f32	s10, s0
 8004400:	eef0 5a60 	vmov.f32	s11, s1
 8004404:	eeb0 6a41 	vmov.f32	s12, s2
 8004408:	eef0 6a61 	vmov.f32	s13, s3
 800440c:	eeb0 7a42 	vmov.f32	s14, s4
 8004410:	eef0 7a62 	vmov.f32	s15, s5
 8004414:	ed87 5b0c 	vstr	d5, [r7, #48]	@ 0x30
 8004418:	ed87 6b0e 	vstr	d6, [r7, #56]	@ 0x38
 800441c:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
    int siloDistances[MAX_SILOS] = {camera[3] * 10, camera[5] * 10, camera[7] * 10, camera[9] * 10, camera[11] * 10}; // convert to mm
 8004420:	4b98      	ldr	r3, [pc, #608]	@ (8004684 <detectAndStoreSilo+0x2ac>)
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	4b95      	ldr	r3, [pc, #596]	@ (8004684 <detectAndStoreSilo+0x2ac>)
 8004430:	695a      	ldr	r2, [r3, #20]
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	623b      	str	r3, [r7, #32]
 800443c:	4b91      	ldr	r3, [pc, #580]	@ (8004684 <detectAndStoreSilo+0x2ac>)
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	627b      	str	r3, [r7, #36]	@ 0x24
 800444a:	4b8e      	ldr	r3, [pc, #568]	@ (8004684 <detectAndStoreSilo+0x2ac>)
 800444c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004458:	4b8a      	ldr	r3, [pc, #552]	@ (8004684 <detectAndStoreSilo+0x2ac>)
 800445a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int siloAngles[MAX_SILOS] = {camera[4], camera[6], camera[8], camera[10], camera[12]};
 8004466:	4b87      	ldr	r3, [pc, #540]	@ (8004684 <detectAndStoreSilo+0x2ac>)
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	60bb      	str	r3, [r7, #8]
 800446c:	4b85      	ldr	r3, [pc, #532]	@ (8004684 <detectAndStoreSilo+0x2ac>)
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	4b84      	ldr	r3, [pc, #528]	@ (8004684 <detectAndStoreSilo+0x2ac>)
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	4b82      	ldr	r3, [pc, #520]	@ (8004684 <detectAndStoreSilo+0x2ac>)
 800447a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	4b81      	ldr	r3, [pc, #516]	@ (8004684 <detectAndStoreSilo+0x2ac>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	61bb      	str	r3, [r7, #24]

//    int ballDistance = camera[0] * 10; // convert to mm
//    int ballAngle = camera[1];
    int ballExistence = camera[2];
 8004484:	4b7f      	ldr	r3, [pc, #508]	@ (8004684 <detectAndStoreSilo+0x2ac>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	66bb      	str	r3, [r7, #104]	@ 0x68
//    double xBall = position.x_global + ballDistance * sin(ballAngle * M_PI / 180.0);

    for (int i = 0; i < MAX_SILOS; i++)
 800448a:	2300      	movs	r3, #0
 800448c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800448e:	e0df      	b.n	8004650 <detectAndStoreSilo+0x278>
    {
        if (siloDistances[i] != SILO_NOT_DETECTED_DISTANCE && siloAngles[i] != SILO_NOT_DETECTED_ANGLE)
 8004490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	3370      	adds	r3, #112	@ 0x70
 8004496:	443b      	add	r3, r7
 8004498:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800449c:	4a78      	ldr	r2, [pc, #480]	@ (8004680 <detectAndStoreSilo+0x2a8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	f000 80cc 	beq.w	800463c <detectAndStoreSilo+0x264>
 80044a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	3370      	adds	r3, #112	@ 0x70
 80044aa:	443b      	add	r3, r7
 80044ac:	f853 3c68 	ldr.w	r3, [r3, #-104]
 80044b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80044b4:	4293      	cmp	r3, r2
 80044b6:	f000 80c1 	beq.w	800463c <detectAndStoreSilo+0x264>
        {
            silos[i].distance = siloDistances[i];
 80044ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	3370      	adds	r3, #112	@ 0x70
 80044c0:	443b      	add	r3, r7
 80044c2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80044c6:	4970      	ldr	r1, [pc, #448]	@ (8004688 <detectAndStoreSilo+0x2b0>)
 80044c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ca:	015b      	lsls	r3, r3, #5
 80044cc:	440b      	add	r3, r1
 80044ce:	601a      	str	r2, [r3, #0]
            silos[i].angle = siloAngles[i];
 80044d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	3370      	adds	r3, #112	@ 0x70
 80044d6:	443b      	add	r3, r7
 80044d8:	f853 2c68 	ldr.w	r2, [r3, #-104]
 80044dc:	496a      	ldr	r1, [pc, #424]	@ (8004688 <detectAndStoreSilo+0x2b0>)
 80044de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044e0:	015b      	lsls	r3, r3, #5
 80044e2:	440b      	add	r3, r1
 80044e4:	3304      	adds	r3, #4
 80044e6:	601a      	str	r2, [r3, #0]
            silos[i].detected = true;
 80044e8:	4a67      	ldr	r2, [pc, #412]	@ (8004688 <detectAndStoreSilo+0x2b0>)
 80044ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ec:	015b      	lsls	r3, r3, #5
 80044ee:	4413      	add	r3, r2
 80044f0:	3308      	adds	r3, #8
 80044f2:	2201      	movs	r2, #1
 80044f4:	701a      	strb	r2, [r3, #0]
            silos[i].ballInSilo = ballExistence;
 80044f6:	4a64      	ldr	r2, [pc, #400]	@ (8004688 <detectAndStoreSilo+0x2b0>)
 80044f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044fa:	015b      	lsls	r3, r3, #5
 80044fc:	4413      	add	r3, r2
 80044fe:	330c      	adds	r3, #12
 8004500:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004502:	601a      	str	r2, [r3, #0]
            // Calculate global coordinates of the detected silo
            silos[i].x = position.x + siloDistances[i] * sin(siloAngles[i] * M_PI / 180.0);
 8004504:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	3370      	adds	r3, #112	@ 0x70
 800450e:	443b      	add	r3, r7
 8004510:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004514:	4618      	mov	r0, r3
 8004516:	f7fc f805 	bl	8000524 <__aeabi_i2d>
 800451a:	4680      	mov	r8, r0
 800451c:	4689      	mov	r9, r1
 800451e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	3370      	adds	r3, #112	@ 0x70
 8004524:	443b      	add	r3, r7
 8004526:	f853 3c68 	ldr.w	r3, [r3, #-104]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fb fffa 	bl	8000524 <__aeabi_i2d>
 8004530:	a351      	add	r3, pc, #324	@ (adr r3, 8004678 <detectAndStoreSilo+0x2a0>)
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	f7fc f85f 	bl	80005f8 <__aeabi_dmul>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4610      	mov	r0, r2
 8004540:	4619      	mov	r1, r3
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	4b51      	ldr	r3, [pc, #324]	@ (800468c <detectAndStoreSilo+0x2b4>)
 8004548:	f7fc f980 	bl	800084c <__aeabi_ddiv>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	ec43 2b17 	vmov	d7, r2, r3
 8004554:	eeb0 0a47 	vmov.f32	s0, s14
 8004558:	eef0 0a67 	vmov.f32	s1, s15
 800455c:	f009 f9b8 	bl	800d8d0 <sin>
 8004560:	ec53 2b10 	vmov	r2, r3, d0
 8004564:	4640      	mov	r0, r8
 8004566:	4649      	mov	r1, r9
 8004568:	f7fc f846 	bl	80005f8 <__aeabi_dmul>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4620      	mov	r0, r4
 8004572:	4629      	mov	r1, r5
 8004574:	f7fb fe8a 	bl	800028c <__adddf3>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4842      	ldr	r0, [pc, #264]	@ (8004688 <detectAndStoreSilo+0x2b0>)
 800457e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004580:	0149      	lsls	r1, r1, #5
 8004582:	4401      	add	r1, r0
 8004584:	3110      	adds	r1, #16
 8004586:	e9c1 2300 	strd	r2, r3, [r1]
            silos[i].y = position.y + siloDistances[i] * cos(siloAngles[i] * M_PI / 180.0);
 800458a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800458e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	3370      	adds	r3, #112	@ 0x70
 8004594:	443b      	add	r3, r7
 8004596:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800459a:	4618      	mov	r0, r3
 800459c:	f7fb ffc2 	bl	8000524 <__aeabi_i2d>
 80045a0:	4680      	mov	r8, r0
 80045a2:	4689      	mov	r9, r1
 80045a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	3370      	adds	r3, #112	@ 0x70
 80045aa:	443b      	add	r3, r7
 80045ac:	f853 3c68 	ldr.w	r3, [r3, #-104]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fb ffb7 	bl	8000524 <__aeabi_i2d>
 80045b6:	a330      	add	r3, pc, #192	@ (adr r3, 8004678 <detectAndStoreSilo+0x2a0>)
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f7fc f81c 	bl	80005f8 <__aeabi_dmul>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4610      	mov	r0, r2
 80045c6:	4619      	mov	r1, r3
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	4b2f      	ldr	r3, [pc, #188]	@ (800468c <detectAndStoreSilo+0x2b4>)
 80045ce:	f7fc f93d 	bl	800084c <__aeabi_ddiv>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	ec43 2b17 	vmov	d7, r2, r3
 80045da:	eeb0 0a47 	vmov.f32	s0, s14
 80045de:	eef0 0a67 	vmov.f32	s1, s15
 80045e2:	f009 f921 	bl	800d828 <cos>
 80045e6:	ec53 2b10 	vmov	r2, r3, d0
 80045ea:	4640      	mov	r0, r8
 80045ec:	4649      	mov	r1, r9
 80045ee:	f7fc f803 	bl	80005f8 <__aeabi_dmul>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4620      	mov	r0, r4
 80045f8:	4629      	mov	r1, r5
 80045fa:	f7fb fe47 	bl	800028c <__adddf3>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4821      	ldr	r0, [pc, #132]	@ (8004688 <detectAndStoreSilo+0x2b0>)
 8004604:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004606:	0149      	lsls	r1, r1, #5
 8004608:	4401      	add	r1, r0
 800460a:	3118      	adds	r1, #24
 800460c:	e9c1 2300 	strd	r2, r3, [r1]

            // Check if this is the nearest silo
            if (silos[i].distance < bestSilo.distance)
 8004610:	4a1d      	ldr	r2, [pc, #116]	@ (8004688 <detectAndStoreSilo+0x2b0>)
 8004612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004614:	015b      	lsls	r3, r3, #5
 8004616:	4413      	add	r3, r2
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800461c:	429a      	cmp	r2, r3
 800461e:	da14      	bge.n	800464a <detectAndStoreSilo+0x272>
            {
                bestSilo = silos[i];
 8004620:	4a19      	ldr	r2, [pc, #100]	@ (8004688 <detectAndStoreSilo+0x2b0>)
 8004622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004624:	015b      	lsls	r3, r3, #5
 8004626:	4413      	add	r3, r2
 8004628:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 800462c:	461d      	mov	r5, r3
 800462e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004632:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004636:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (silos[i].distance < bestSilo.distance)
 800463a:	e006      	b.n	800464a <detectAndStoreSilo+0x272>
            }
        }
        else
        {
            silos[i].detected = false;
 800463c:	4a12      	ldr	r2, [pc, #72]	@ (8004688 <detectAndStoreSilo+0x2b0>)
 800463e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004640:	015b      	lsls	r3, r3, #5
 8004642:	4413      	add	r3, r2
 8004644:	3308      	adds	r3, #8
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAX_SILOS; i++)
 800464a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800464c:	3301      	adds	r3, #1
 800464e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004652:	2b04      	cmp	r3, #4
 8004654:	f77f af1c 	ble.w	8004490 <detectAndStoreSilo+0xb8>
        }
    }
    return bestSilo;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	461d      	mov	r5, r3
 800465c:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8004660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004664:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004668:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	3770      	adds	r7, #112	@ 0x70
 8004670:	46bd      	mov	sp, r7
 8004672:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004676:	bf00      	nop
 8004678:	54442d18 	.word	0x54442d18
 800467c:	400921fb 	.word	0x400921fb
 8004680:	00018696 	.word	0x00018696
 8004684:	2000057c 	.word	0x2000057c
 8004688:	20000648 	.word	0x20000648
 800468c:	40668000 	.word	0x40668000

08004690 <placeBallInSilo>:

void placeBallInSilo(external_global setpoint, double Kp, double Ki, double Kd, double KpH)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b0aa      	sub	sp, #168	@ 0xa8
 8004694:	af02      	add	r7, sp, #8
 8004696:	eeb0 7a42 	vmov.f32	s14, s4
 800469a:	eef0 7a62 	vmov.f32	s15, s5
 800469e:	ed87 3b06 	vstr	d3, [r7, #24]
 80046a2:	ed87 4b04 	vstr	d4, [r7, #16]
 80046a6:	ed87 5b02 	vstr	d5, [r7, #8]
 80046aa:	ed87 6b00 	vstr	d6, [r7]
 80046ae:	ed87 0b08 	vstr	d0, [r7, #32]
 80046b2:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 80046b6:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    external_global position = odometry_eg();
 80046ba:	f7fe ff91 	bl	80035e0 <odometry_eg>
 80046be:	eeb0 5a40 	vmov.f32	s10, s0
 80046c2:	eef0 5a60 	vmov.f32	s11, s1
 80046c6:	eeb0 6a41 	vmov.f32	s12, s2
 80046ca:	eef0 6a61 	vmov.f32	s13, s3
 80046ce:	eeb0 7a42 	vmov.f32	s14, s4
 80046d2:	eef0 7a62 	vmov.f32	s15, s5
 80046d6:	ed87 5b1c 	vstr	d5, [r7, #112]	@ 0x70
 80046da:	ed87 6b1e 	vstr	d6, [r7, #120]	@ 0x78
 80046de:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    Silo bestSilo = detectAndStoreSilo();
 80046e2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fe76 	bl	80043d8 <detectAndStoreSilo>
    double Vx = 0.0, Vy = 0.0, W = 0.0;
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    static uint32_t lastTime = 0;
    uint32_t timer = HAL_GetTick();
 8004710:	f000 ffa2 	bl	8005658 <HAL_GetTick>
 8004714:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    setMotorSpeed(1, 0);
 8004718:	ed9f 0b61 	vldr	d0, [pc, #388]	@ 80048a0 <placeBallInSilo+0x210>
 800471c:	2001      	movs	r0, #1
 800471e:	f7fc fc9d 	bl	800105c <setMotorSpeed>
    setMotorSpeed(2, 0);
 8004722:	ed9f 0b5f 	vldr	d0, [pc, #380]	@ 80048a0 <placeBallInSilo+0x210>
 8004726:	2002      	movs	r0, #2
 8004728:	f7fc fc98 	bl	800105c <setMotorSpeed>
    setMotorSpeed(7, 0);
 800472c:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 80048a0 <placeBallInSilo+0x210>
 8004730:	2007      	movs	r0, #7
 8004732:	f7fc fc93 	bl	800105c <setMotorSpeed>

    if(bestSilo.detected && bestSilo.ballInSilo < 3)
 8004736:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8083 	beq.w	8004846 <placeBallInSilo+0x1b6>
 8004740:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004742:	2b02      	cmp	r3, #2
 8004744:	dc7f      	bgt.n	8004846 <placeBallInSilo+0x1b6>
    {
        double targetX = bestSilo.x;
 8004746:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800474a:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
        double targetY = bestSilo.y;
 800474e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004752:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    //    double targetH = atan2(targetY - position.y_global, targetX - position.x_global) * 180.0 / M_PI;

        Vx = PID_controller(targetX, position.x, Kp, Ki, Kd);
 8004756:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 800475a:	ed97 4b02 	vldr	d4, [r7, #8]
 800475e:	ed97 3b04 	vldr	d3, [r7, #16]
 8004762:	ed97 2b06 	vldr	d2, [r7, #24]
 8004766:	eeb0 1a47 	vmov.f32	s2, s14
 800476a:	eef0 1a67 	vmov.f32	s3, s15
 800476e:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8004772:	f7ff f8e5 	bl	8003940 <PID_controller>
 8004776:	eeb0 7a40 	vmov.f32	s14, s0
 800477a:	eef0 7a60 	vmov.f32	s15, s1
 800477e:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
        Vy = PID_controller(targetY, position.y, Kp, Ki, Kd);
 8004782:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 8004786:	ed97 4b02 	vldr	d4, [r7, #8]
 800478a:	ed97 3b04 	vldr	d3, [r7, #16]
 800478e:	ed97 2b06 	vldr	d2, [r7, #24]
 8004792:	eeb0 1a47 	vmov.f32	s2, s14
 8004796:	eef0 1a67 	vmov.f32	s3, s15
 800479a:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 800479e:	f7ff f8cf 	bl	8003940 <PID_controller>
 80047a2:	eeb0 7a40 	vmov.f32	s14, s0
 80047a6:	eef0 7a60 	vmov.f32	s15, s1
 80047aa:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
        W = PID_controllerH(90.0, position.h, KpH);
 80047ae:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 80047b2:	ed97 2b00 	vldr	d2, [r7]
 80047b6:	eeb0 1a47 	vmov.f32	s2, s14
 80047ba:	eef0 1a67 	vmov.f32	s3, s15
 80047be:	ed9f 0b3a 	vldr	d0, [pc, #232]	@ 80048a8 <placeBallInSilo+0x218>
 80047c2:	f7ff f947 	bl	8003a54 <PID_controllerH>
 80047c6:	eeb0 7a40 	vmov.f32	s14, s0
 80047ca:	eef0 7a60 	vmov.f32	s15, s1
 80047ce:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

        if(bestSilo.distance <= 400) {Vx = 0; Vy = 1000; W = 0;}
 80047d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047d4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80047d8:	dc10      	bgt.n	80047fc <placeBallInSilo+0x16c>
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	4b39      	ldr	r3, [pc, #228]	@ (80048d0 <placeBallInSilo+0x240>)
 80047ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

        smoothVelocity(&Vx, &Vy, &W, 0.7);
 80047fc:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004800:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8004804:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004808:	ed9f 0b29 	vldr	d0, [pc, #164]	@ 80048b0 <placeBallInSilo+0x220>
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff f9bf 	bl	8003b90 <smoothVelocity>
        Inverse_Kinematics(Vx, Vy, W);
 8004812:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8004816:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 800481a:	ed97 5b0e 	vldr	d5, [r7, #56]	@ 0x38
 800481e:	eeb0 2a45 	vmov.f32	s4, s10
 8004822:	eef0 2a65 	vmov.f32	s5, s11
 8004826:	eeb0 1a46 	vmov.f32	s2, s12
 800482a:	eef0 1a66 	vmov.f32	s3, s13
 800482e:	eeb0 0a47 	vmov.f32	s0, s14
 8004832:	eef0 0a67 	vmov.f32	s1, s15
 8004836:	f7fc fc87 	bl	8001148 <Inverse_Kinematics>
        lastTime = timer;
 800483a:	4a26      	ldr	r2, [pc, #152]	@ (80048d4 <placeBallInSilo+0x244>)
 800483c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004840:	6013      	str	r3, [r2, #0]
    {
 8004842:	bf00      	nop
    }
    else
    {
    	PID_EG(setpoint, Kp, Ki, Kd, KpH, 0.75, 3000);
    }
}
 8004844:	e027      	b.n	8004896 <placeBallInSilo+0x206>
    else if(timer - lastTime <= 1600)
 8004846:	4b23      	ldr	r3, [pc, #140]	@ (80048d4 <placeBallInSilo+0x244>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004854:	d808      	bhi.n	8004868 <placeBallInSilo+0x1d8>
        Inverse_Kinematics(0, 2000, 0);
 8004856:	ed9f 2b12 	vldr	d2, [pc, #72]	@ 80048a0 <placeBallInSilo+0x210>
 800485a:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 80048b8 <placeBallInSilo+0x228>
 800485e:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 80048a0 <placeBallInSilo+0x210>
 8004862:	f7fc fc71 	bl	8001148 <Inverse_Kinematics>
}
 8004866:	e016      	b.n	8004896 <placeBallInSilo+0x206>
    	PID_EG(setpoint, Kp, Ki, Kd, KpH, 0.75, 3000);
 8004868:	ed97 0b08 	vldr	d0, [r7, #32]
 800486c:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 8004870:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 8004874:	a312      	add	r3, pc, #72	@ (adr r3, 80048c0 <placeBallInSilo+0x230>)
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	e9cd 2300 	strd	r2, r3, [sp]
 800487e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80048c8 <placeBallInSilo+0x238>
 8004882:	ed97 6b00 	vldr	d6, [r7]
 8004886:	ed97 5b02 	vldr	d5, [r7, #8]
 800488a:	ed97 4b04 	vldr	d4, [r7, #16]
 800488e:	ed97 3b06 	vldr	d3, [r7, #24]
 8004892:	f7ff fae5 	bl	8003e60 <PID_EG>
}
 8004896:	bf00      	nop
 8004898:	37a0      	adds	r7, #160	@ 0xa0
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
	...
 80048ac:	40568000 	.word	0x40568000
 80048b0:	66666666 	.word	0x66666666
 80048b4:	3fe66666 	.word	0x3fe66666
 80048b8:	00000000 	.word	0x00000000
 80048bc:	409f4000 	.word	0x409f4000
 80048c0:	00000000 	.word	0x00000000
 80048c4:	40a77000 	.word	0x40a77000
 80048c8:	00000000 	.word	0x00000000
 80048cc:	3fe80000 	.word	0x3fe80000
 80048d0:	408f4000 	.word	0x408f4000
 80048d4:	200006e8 	.word	0x200006e8

080048d8 <findAndTakeBall>:

void findAndTakeBall(external_global *findBall)
{
 80048d8:	b5b0      	push	{r4, r5, r7, lr}
 80048da:	b098      	sub	sp, #96	@ 0x60
 80048dc:	af02      	add	r7, sp, #8
 80048de:	6078      	str	r0, [r7, #4]
     * camera[2]: ball existence (number of balls)
     * camera[3]: silo distance (in cm)
     * camera[4]: silo angle (in degree)
     */

	external_global position = odometry_eg();
 80048e0:	f7fe fe7e 	bl	80035e0 <odometry_eg>
 80048e4:	eeb0 5a40 	vmov.f32	s10, s0
 80048e8:	eef0 5a60 	vmov.f32	s11, s1
 80048ec:	eeb0 6a41 	vmov.f32	s12, s2
 80048f0:	eef0 6a61 	vmov.f32	s13, s3
 80048f4:	eeb0 7a42 	vmov.f32	s14, s4
 80048f8:	eef0 7a62 	vmov.f32	s15, s5
 80048fc:	ed87 5b02 	vstr	d5, [r7, #8]
 8004900:	ed87 6b04 	vstr	d6, [r7, #16]
 8004904:	ed87 7b06 	vstr	d7, [r7, #24]
    static uint32_t lastTimeBallSeen = 0;
    static uint32_t searchStartTime = 0;
    static uint8_t searchMode = 1;
    static uint8_t lastSearchMode = 1;

    uint32_t timer = HAL_GetTick();
 8004908:	f000 fea6 	bl	8005658 <HAL_GetTick>
 800490c:	63f8      	str	r0, [r7, #60]	@ 0x3c

    int ballDistance = camera[0] * 10; // convert to mm
 800490e:	4bbe      	ldr	r3, [pc, #760]	@ (8004c08 <findAndTakeBall+0x330>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	63bb      	str	r3, [r7, #56]	@ 0x38
    int ballAngle = camera[1];
 800491c:	4bba      	ldr	r3, [pc, #744]	@ (8004c08 <findAndTakeBall+0x330>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	637b      	str	r3, [r7, #52]	@ 0x34
    int ballExistence = camera[2];
 8004922:	4bb9      	ldr	r3, [pc, #740]	@ (8004c08 <findAndTakeBall+0x330>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	633b      	str	r3, [r7, #48]	@ 0x30

    double Vx = 0.0;
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double Vy = 0.0;
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double W = 0.0;
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    focusToTheBall();
 800494c:	f7ff fc0c 	bl	8004168 <focusToTheBall>

    if (ballExistence != 0)
 8004950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 80a8 	beq.w	8004aa8 <findAndTakeBall+0x1d0>
    {
        double xBall = ballDistance * sin(ballAngle * M_PI / 180.0);
 8004958:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800495a:	f7fb fde3 	bl	8000524 <__aeabi_i2d>
 800495e:	4604      	mov	r4, r0
 8004960:	460d      	mov	r5, r1
 8004962:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004964:	f7fb fdde 	bl	8000524 <__aeabi_i2d>
 8004968:	a38f      	add	r3, pc, #572	@ (adr r3, 8004ba8 <findAndTakeBall+0x2d0>)
 800496a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496e:	f7fb fe43 	bl	80005f8 <__aeabi_dmul>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4610      	mov	r0, r2
 8004978:	4619      	mov	r1, r3
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	4ba3      	ldr	r3, [pc, #652]	@ (8004c0c <findAndTakeBall+0x334>)
 8004980:	f7fb ff64 	bl	800084c <__aeabi_ddiv>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	ec43 2b17 	vmov	d7, r2, r3
 800498c:	eeb0 0a47 	vmov.f32	s0, s14
 8004990:	eef0 0a67 	vmov.f32	s1, s15
 8004994:	f008 ff9c 	bl	800d8d0 <sin>
 8004998:	ec53 2b10 	vmov	r2, r3, d0
 800499c:	4620      	mov	r0, r4
 800499e:	4629      	mov	r1, r5
 80049a0:	f7fb fe2a 	bl	80005f8 <__aeabi_dmul>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        double yBall = ballDistance * cos(ballAngle * M_PI / 180.0);
 80049ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80049ae:	f7fb fdb9 	bl	8000524 <__aeabi_i2d>
 80049b2:	4604      	mov	r4, r0
 80049b4:	460d      	mov	r5, r1
 80049b6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80049b8:	f7fb fdb4 	bl	8000524 <__aeabi_i2d>
 80049bc:	a37a      	add	r3, pc, #488	@ (adr r3, 8004ba8 <findAndTakeBall+0x2d0>)
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	f7fb fe19 	bl	80005f8 <__aeabi_dmul>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4610      	mov	r0, r2
 80049cc:	4619      	mov	r1, r3
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	4b8e      	ldr	r3, [pc, #568]	@ (8004c0c <findAndTakeBall+0x334>)
 80049d4:	f7fb ff3a 	bl	800084c <__aeabi_ddiv>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	ec43 2b17 	vmov	d7, r2, r3
 80049e0:	eeb0 0a47 	vmov.f32	s0, s14
 80049e4:	eef0 0a67 	vmov.f32	s1, s15
 80049e8:	f008 ff1e 	bl	800d828 <cos>
 80049ec:	ec53 2b10 	vmov	r2, r3, d0
 80049f0:	4620      	mov	r0, r4
 80049f2:	4629      	mov	r1, r5
 80049f4:	f7fb fe00 	bl	80005f8 <__aeabi_dmul>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	e9c7 2308 	strd	r2, r3, [r7, #32]

        Vx = PID_controller(xBall, 0.0, 1.0, 0.0, 0.0);
 8004a00:	ed9f 4b6b 	vldr	d4, [pc, #428]	@ 8004bb0 <findAndTakeBall+0x2d8>
 8004a04:	ed9f 3b6a 	vldr	d3, [pc, #424]	@ 8004bb0 <findAndTakeBall+0x2d8>
 8004a08:	ed9f 2b6b 	vldr	d2, [pc, #428]	@ 8004bb8 <findAndTakeBall+0x2e0>
 8004a0c:	ed9f 1b68 	vldr	d1, [pc, #416]	@ 8004bb0 <findAndTakeBall+0x2d8>
 8004a10:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8004a14:	f7fe ff94 	bl	8003940 <PID_controller>
 8004a18:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
        Vy = PID_controller(yBall, 0.0, 1.4, 0.0, 0.0);
 8004a1c:	ed9f 4b64 	vldr	d4, [pc, #400]	@ 8004bb0 <findAndTakeBall+0x2d8>
 8004a20:	ed9f 3b63 	vldr	d3, [pc, #396]	@ 8004bb0 <findAndTakeBall+0x2d8>
 8004a24:	ed9f 2b66 	vldr	d2, [pc, #408]	@ 8004bc0 <findAndTakeBall+0x2e8>
 8004a28:	ed9f 1b61 	vldr	d1, [pc, #388]	@ 8004bb0 <findAndTakeBall+0x2d8>
 8004a2c:	ed97 0b08 	vldr	d0, [r7, #32]
 8004a30:	f7fe ff86 	bl	8003940 <PID_controller>
 8004a34:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
        W = PID_controllerH(ballAngle, 0.0, 1.0);
 8004a38:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004a3a:	f7fb fd73 	bl	8000524 <__aeabi_i2d>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	ed9f 2b5d 	vldr	d2, [pc, #372]	@ 8004bb8 <findAndTakeBall+0x2e0>
 8004a46:	ed9f 1b5a 	vldr	d1, [pc, #360]	@ 8004bb0 <findAndTakeBall+0x2d8>
 8004a4a:	ec43 2b10 	vmov	d0, r2, r3
 8004a4e:	f7ff f801 	bl	8003a54 <PID_controllerH>
 8004a52:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

        if(ballDistance <= 400) {Vx = 0; Vy = 1000; W = 0;}
 8004a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a58:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004a5c:	dc10      	bgt.n	8004a80 <findAndTakeBall+0x1a8>
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	4b68      	ldr	r3, [pc, #416]	@ (8004c10 <findAndTakeBall+0x338>)
 8004a70:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

        Inverse_Kinematics(Vx, Vy, W);
 8004a80:	ed97 2b10 	vldr	d2, [r7, #64]	@ 0x40
 8004a84:	ed97 1b12 	vldr	d1, [r7, #72]	@ 0x48
 8004a88:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8004a8c:	f7fc fb5c 	bl	8001148 <Inverse_Kinematics>
        setMotorSpeed(1, -2000);
 8004a90:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8004bc8 <findAndTakeBall+0x2f0>
 8004a94:	2001      	movs	r0, #1
 8004a96:	f7fc fae1 	bl	800105c <setMotorSpeed>
        lastTimeBallSeen = timer;
 8004a9a:	4a5e      	ldr	r2, [pc, #376]	@ (8004c14 <findAndTakeBall+0x33c>)
 8004a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a9e:	6013      	str	r3, [r2, #0]
        searchStartTime = timer;
 8004aa0:	4a5d      	ldr	r2, [pc, #372]	@ (8004c18 <findAndTakeBall+0x340>)
 8004aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa4:	6013      	str	r3, [r2, #0]
//                    }
//                    break;
//            }
//        }
    }
}
 8004aa6:	e170      	b.n	8004d8a <findAndTakeBall+0x4b2>
    else if (timer - lastTimeBallSeen <= 700)
 8004aa8:	4b5a      	ldr	r3, [pc, #360]	@ (8004c14 <findAndTakeBall+0x33c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8004ab4:	d80d      	bhi.n	8004ad2 <findAndTakeBall+0x1fa>
        Inverse_Kinematics(0, 2000, 0);
 8004ab6:	ed9f 2b3e 	vldr	d2, [pc, #248]	@ 8004bb0 <findAndTakeBall+0x2d8>
 8004aba:	ed9f 1b45 	vldr	d1, [pc, #276]	@ 8004bd0 <findAndTakeBall+0x2f8>
 8004abe:	ed9f 0b3c 	vldr	d0, [pc, #240]	@ 8004bb0 <findAndTakeBall+0x2d8>
 8004ac2:	f7fc fb41 	bl	8001148 <Inverse_Kinematics>
        setMotorSpeed(1, -2000);
 8004ac6:	ed9f 0b40 	vldr	d0, [pc, #256]	@ 8004bc8 <findAndTakeBall+0x2f0>
 8004aca:	2001      	movs	r0, #1
 8004acc:	f7fc fac6 	bl	800105c <setMotorSpeed>
}
 8004ad0:	e15b      	b.n	8004d8a <findAndTakeBall+0x4b2>
        setMotorSpeed(1, 0);
 8004ad2:	ed9f 0b37 	vldr	d0, [pc, #220]	@ 8004bb0 <findAndTakeBall+0x2d8>
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	f7fc fac0 	bl	800105c <setMotorSpeed>
        setMotorSpeed(2, 0);
 8004adc:	ed9f 0b34 	vldr	d0, [pc, #208]	@ 8004bb0 <findAndTakeBall+0x2d8>
 8004ae0:	2002      	movs	r0, #2
 8004ae2:	f7fc fabb 	bl	800105c <setMotorSpeed>
        setMotorSpeed(7, 0);
 8004ae6:	ed9f 0b32 	vldr	d0, [pc, #200]	@ 8004bb0 <findAndTakeBall+0x2d8>
 8004aea:	2007      	movs	r0, #7
 8004aec:	f7fc fab6 	bl	800105c <setMotorSpeed>
        if (searchStartTime == 0) {searchStartTime = timer;}
 8004af0:	4b49      	ldr	r3, [pc, #292]	@ (8004c18 <findAndTakeBall+0x340>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <findAndTakeBall+0x226>
 8004af8:	4a47      	ldr	r2, [pc, #284]	@ (8004c18 <findAndTakeBall+0x340>)
 8004afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004afc:	6013      	str	r3, [r2, #0]
        switch(searchMode)
 8004afe:	4b47      	ldr	r3, [pc, #284]	@ (8004c1c <findAndTakeBall+0x344>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	f200 8140 	bhi.w	8004d8a <findAndTakeBall+0x4b2>
 8004b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b10 <findAndTakeBall+0x238>)
 8004b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b10:	08004b21 	.word	0x08004b21
 8004b14:	08004c25 	.word	0x08004c25
 8004b18:	08004c99 	.word	0x08004c99
 8004b1c:	08004d0d 	.word	0x08004d0d
        	if(timer - searchStartTime >= 6000)
 8004b20:	4b3d      	ldr	r3, [pc, #244]	@ (8004c18 <findAndTakeBall+0x340>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	f241 726f 	movw	r2, #5999	@ 0x176f
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d907      	bls.n	8004b40 <findAndTakeBall+0x268>
        		searchMode += lastSearchMode;
 8004b30:	4b3a      	ldr	r3, [pc, #232]	@ (8004c1c <findAndTakeBall+0x344>)
 8004b32:	781a      	ldrb	r2, [r3, #0]
 8004b34:	4b3a      	ldr	r3, [pc, #232]	@ (8004c20 <findAndTakeBall+0x348>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	4413      	add	r3, r2
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	4b37      	ldr	r3, [pc, #220]	@ (8004c1c <findAndTakeBall+0x344>)
 8004b3e:	701a      	strb	r2, [r3, #0]
        	if(lastSearchMode == 1)
 8004b40:	4b37      	ldr	r3, [pc, #220]	@ (8004c20 <findAndTakeBall+0x348>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d10c      	bne.n	8004b62 <findAndTakeBall+0x28a>
        		lookForTheBall(-10.0, -170.0, position.h);
 8004b48:	ed97 7b06 	vldr	d7, [r7, #24]
 8004b4c:	eeb0 2a47 	vmov.f32	s4, s14
 8004b50:	eef0 2a67 	vmov.f32	s5, s15
 8004b54:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 8004bd8 <findAndTakeBall+0x300>
 8004b58:	ed9f 0b21 	vldr	d0, [pc, #132]	@ 8004be0 <findAndTakeBall+0x308>
 8004b5c:	f7ff f910 	bl	8003d80 <lookForTheBall>
        	break;
 8004b60:	e10c      	b.n	8004d7c <findAndTakeBall+0x4a4>
        	else if(lastSearchMode == 2)
 8004b62:	4b2f      	ldr	r3, [pc, #188]	@ (8004c20 <findAndTakeBall+0x348>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d10c      	bne.n	8004b84 <findAndTakeBall+0x2ac>
        		lookForTheBall(-100.0, 100.0, position.h);
 8004b6a:	ed97 7b06 	vldr	d7, [r7, #24]
 8004b6e:	eeb0 2a47 	vmov.f32	s4, s14
 8004b72:	eef0 2a67 	vmov.f32	s5, s15
 8004b76:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8004be8 <findAndTakeBall+0x310>
 8004b7a:	ed9f 0b1d 	vldr	d0, [pc, #116]	@ 8004bf0 <findAndTakeBall+0x318>
 8004b7e:	f7ff f8ff 	bl	8003d80 <lookForTheBall>
        	break;
 8004b82:	e0fb      	b.n	8004d7c <findAndTakeBall+0x4a4>
        	else if(lastSearchMode == 3)
 8004b84:	4b26      	ldr	r3, [pc, #152]	@ (8004c20 <findAndTakeBall+0x348>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	f040 80f7 	bne.w	8004d7c <findAndTakeBall+0x4a4>
        		lookForTheBall(-70.0, 70.0, position.h);
 8004b8e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004b92:	eeb0 2a47 	vmov.f32	s4, s14
 8004b96:	eef0 2a67 	vmov.f32	s5, s15
 8004b9a:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 8004bf8 <findAndTakeBall+0x320>
 8004b9e:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 8004c00 <findAndTakeBall+0x328>
 8004ba2:	f7ff f8ed 	bl	8003d80 <lookForTheBall>
        	break;
 8004ba6:	e0e9      	b.n	8004d7c <findAndTakeBall+0x4a4>
 8004ba8:	54442d18 	.word	0x54442d18
 8004bac:	400921fb 	.word	0x400921fb
	...
 8004bbc:	3ff00000 	.word	0x3ff00000
 8004bc0:	66666666 	.word	0x66666666
 8004bc4:	3ff66666 	.word	0x3ff66666
 8004bc8:	00000000 	.word	0x00000000
 8004bcc:	c09f4000 	.word	0xc09f4000
 8004bd0:	00000000 	.word	0x00000000
 8004bd4:	409f4000 	.word	0x409f4000
 8004bd8:	00000000 	.word	0x00000000
 8004bdc:	c0654000 	.word	0xc0654000
 8004be0:	00000000 	.word	0x00000000
 8004be4:	c0240000 	.word	0xc0240000
 8004be8:	00000000 	.word	0x00000000
 8004bec:	40590000 	.word	0x40590000
 8004bf0:	00000000 	.word	0x00000000
 8004bf4:	c0590000 	.word	0xc0590000
 8004bf8:	00000000 	.word	0x00000000
 8004bfc:	40518000 	.word	0x40518000
 8004c00:	00000000 	.word	0x00000000
 8004c04:	c0518000 	.word	0xc0518000
 8004c08:	2000057c 	.word	0x2000057c
 8004c0c:	40668000 	.word	0x40668000
 8004c10:	408f4000 	.word	0x408f4000
 8004c14:	200006ec 	.word	0x200006ec
 8004c18:	200006f0 	.word	0x200006f0
 8004c1c:	200000ca 	.word	0x200000ca
 8004c20:	200000cb 	.word	0x200000cb
        	lastSearchMode = 2;
 8004c24:	4b6c      	ldr	r3, [pc, #432]	@ (8004dd8 <findAndTakeBall+0x500>)
 8004c26:	2202      	movs	r2, #2
 8004c28:	701a      	strb	r2, [r3, #0]
        	PID_EG(findBall[1], 2.8, 0.0, 0.0, 1.3, 0.8, 2700);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3318      	adds	r3, #24
 8004c2e:	ed93 0b00 	vldr	d0, [r3]
 8004c32:	ed93 1b02 	vldr	d1, [r3, #8]
 8004c36:	ed93 2b04 	vldr	d2, [r3, #16]
 8004c3a:	a357      	add	r3, pc, #348	@ (adr r3, 8004d98 <findAndTakeBall+0x4c0>)
 8004c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c40:	e9cd 2300 	strd	r2, r3, [sp]
 8004c44:	ed9f 7b56 	vldr	d7, [pc, #344]	@ 8004da0 <findAndTakeBall+0x4c8>
 8004c48:	ed9f 6b57 	vldr	d6, [pc, #348]	@ 8004da8 <findAndTakeBall+0x4d0>
 8004c4c:	ed9f 5b58 	vldr	d5, [pc, #352]	@ 8004db0 <findAndTakeBall+0x4d8>
 8004c50:	ed9f 4b57 	vldr	d4, [pc, #348]	@ 8004db0 <findAndTakeBall+0x4d8>
 8004c54:	ed9f 3b58 	vldr	d3, [pc, #352]	@ 8004db8 <findAndTakeBall+0x4e0>
 8004c58:	f7ff f902 	bl	8003e60 <PID_EG>
        	searchStartTime = timer;
 8004c5c:	4a5f      	ldr	r2, [pc, #380]	@ (8004ddc <findAndTakeBall+0x504>)
 8004c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c60:	6013      	str	r3, [r2, #0]
        	if(atTargetEG(findBall[1], position, 500, 10))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3318      	adds	r3, #24
 8004c66:	ed97 3b02 	vldr	d3, [r7, #8]
 8004c6a:	ed97 4b04 	vldr	d4, [r7, #16]
 8004c6e:	ed97 5b06 	vldr	d5, [r7, #24]
 8004c72:	ed93 0b00 	vldr	d0, [r3]
 8004c76:	ed93 1b02 	vldr	d1, [r3, #8]
 8004c7a:	ed93 2b04 	vldr	d2, [r3, #16]
 8004c7e:	ed9f 7b50 	vldr	d7, [pc, #320]	@ 8004dc0 <findAndTakeBall+0x4e8>
 8004c82:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8004dc8 <findAndTakeBall+0x4f0>
 8004c86:	f7ff f821 	bl	8003ccc <atTargetEG>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d077      	beq.n	8004d80 <findAndTakeBall+0x4a8>
        		searchMode = 1;
 8004c90:	4b53      	ldr	r3, [pc, #332]	@ (8004de0 <findAndTakeBall+0x508>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	701a      	strb	r2, [r3, #0]
        	break;
 8004c96:	e073      	b.n	8004d80 <findAndTakeBall+0x4a8>
        	lastSearchMode = 3;
 8004c98:	4b4f      	ldr	r3, [pc, #316]	@ (8004dd8 <findAndTakeBall+0x500>)
 8004c9a:	2203      	movs	r2, #3
 8004c9c:	701a      	strb	r2, [r3, #0]
        	PID_EG(findBall[2], 2.0, 0.0, 0.0, 1.3, 0.8, 2700);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3330      	adds	r3, #48	@ 0x30
 8004ca2:	ed93 0b00 	vldr	d0, [r3]
 8004ca6:	ed93 1b02 	vldr	d1, [r3, #8]
 8004caa:	ed93 2b04 	vldr	d2, [r3, #16]
 8004cae:	a33a      	add	r3, pc, #232	@ (adr r3, 8004d98 <findAndTakeBall+0x4c0>)
 8004cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb4:	e9cd 2300 	strd	r2, r3, [sp]
 8004cb8:	ed9f 7b39 	vldr	d7, [pc, #228]	@ 8004da0 <findAndTakeBall+0x4c8>
 8004cbc:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8004da8 <findAndTakeBall+0x4d0>
 8004cc0:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8004db0 <findAndTakeBall+0x4d8>
 8004cc4:	ed9f 4b3a 	vldr	d4, [pc, #232]	@ 8004db0 <findAndTakeBall+0x4d8>
 8004cc8:	ed9f 3b41 	vldr	d3, [pc, #260]	@ 8004dd0 <findAndTakeBall+0x4f8>
 8004ccc:	f7ff f8c8 	bl	8003e60 <PID_EG>
        	searchStartTime = timer;
 8004cd0:	4a42      	ldr	r2, [pc, #264]	@ (8004ddc <findAndTakeBall+0x504>)
 8004cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd4:	6013      	str	r3, [r2, #0]
        	if(atTargetEG(findBall[2], position, 500, 10))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3330      	adds	r3, #48	@ 0x30
 8004cda:	ed97 3b02 	vldr	d3, [r7, #8]
 8004cde:	ed97 4b04 	vldr	d4, [r7, #16]
 8004ce2:	ed97 5b06 	vldr	d5, [r7, #24]
 8004ce6:	ed93 0b00 	vldr	d0, [r3]
 8004cea:	ed93 1b02 	vldr	d1, [r3, #8]
 8004cee:	ed93 2b04 	vldr	d2, [r3, #16]
 8004cf2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8004dc0 <findAndTakeBall+0x4e8>
 8004cf6:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8004dc8 <findAndTakeBall+0x4f0>
 8004cfa:	f7fe ffe7 	bl	8003ccc <atTargetEG>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d03f      	beq.n	8004d84 <findAndTakeBall+0x4ac>
        		searchMode = 1;
 8004d04:	4b36      	ldr	r3, [pc, #216]	@ (8004de0 <findAndTakeBall+0x508>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	701a      	strb	r2, [r3, #0]
        	break;
 8004d0a:	e03b      	b.n	8004d84 <findAndTakeBall+0x4ac>
        	lastSearchMode = 1;
 8004d0c:	4b32      	ldr	r3, [pc, #200]	@ (8004dd8 <findAndTakeBall+0x500>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	701a      	strb	r2, [r3, #0]
        	PID_EG(findBall[0], 2.8, 0.0, 0.0, 1.3, 0.8, 2700);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	ed93 0b00 	vldr	d0, [r3]
 8004d18:	ed93 1b02 	vldr	d1, [r3, #8]
 8004d1c:	ed93 2b04 	vldr	d2, [r3, #16]
 8004d20:	a31d      	add	r3, pc, #116	@ (adr r3, 8004d98 <findAndTakeBall+0x4c0>)
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	e9cd 2300 	strd	r2, r3, [sp]
 8004d2a:	ed9f 7b1d 	vldr	d7, [pc, #116]	@ 8004da0 <findAndTakeBall+0x4c8>
 8004d2e:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8004da8 <findAndTakeBall+0x4d0>
 8004d32:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 8004db0 <findAndTakeBall+0x4d8>
 8004d36:	ed9f 4b1e 	vldr	d4, [pc, #120]	@ 8004db0 <findAndTakeBall+0x4d8>
 8004d3a:	ed9f 3b1f 	vldr	d3, [pc, #124]	@ 8004db8 <findAndTakeBall+0x4e0>
 8004d3e:	f7ff f88f 	bl	8003e60 <PID_EG>
        	searchStartTime = timer;
 8004d42:	4a26      	ldr	r2, [pc, #152]	@ (8004ddc <findAndTakeBall+0x504>)
 8004d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d46:	6013      	str	r3, [r2, #0]
        	if(atTargetEG(findBall[0], position, 500, 10))
 8004d48:	ed97 3b02 	vldr	d3, [r7, #8]
 8004d4c:	ed97 4b04 	vldr	d4, [r7, #16]
 8004d50:	ed97 5b06 	vldr	d5, [r7, #24]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	ed93 0b00 	vldr	d0, [r3]
 8004d5a:	ed93 1b02 	vldr	d1, [r3, #8]
 8004d5e:	ed93 2b04 	vldr	d2, [r3, #16]
 8004d62:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8004dc0 <findAndTakeBall+0x4e8>
 8004d66:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8004dc8 <findAndTakeBall+0x4f0>
 8004d6a:	f7fe ffaf 	bl	8003ccc <atTargetEG>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <findAndTakeBall+0x4b0>
        		searchMode = 1;
 8004d74:	4b1a      	ldr	r3, [pc, #104]	@ (8004de0 <findAndTakeBall+0x508>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	701a      	strb	r2, [r3, #0]
        	break;
 8004d7a:	e005      	b.n	8004d88 <findAndTakeBall+0x4b0>
        	break;
 8004d7c:	bf00      	nop
 8004d7e:	e004      	b.n	8004d8a <findAndTakeBall+0x4b2>
        	break;
 8004d80:	bf00      	nop
 8004d82:	e002      	b.n	8004d8a <findAndTakeBall+0x4b2>
        	break;
 8004d84:	bf00      	nop
 8004d86:	e000      	b.n	8004d8a <findAndTakeBall+0x4b2>
        	break;
 8004d88:	bf00      	nop
}
 8004d8a:	bf00      	nop
 8004d8c:	3758      	adds	r7, #88	@ 0x58
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bdb0      	pop	{r4, r5, r7, pc}
 8004d92:	bf00      	nop
 8004d94:	f3af 8000 	nop.w
 8004d98:	00000000 	.word	0x00000000
 8004d9c:	40a51800 	.word	0x40a51800
 8004da0:	9999999a 	.word	0x9999999a
 8004da4:	3fe99999 	.word	0x3fe99999
 8004da8:	cccccccd 	.word	0xcccccccd
 8004dac:	3ff4cccc 	.word	0x3ff4cccc
	...
 8004db8:	66666666 	.word	0x66666666
 8004dbc:	40066666 	.word	0x40066666
 8004dc0:	00000000 	.word	0x00000000
 8004dc4:	40240000 	.word	0x40240000
 8004dc8:	00000000 	.word	0x00000000
 8004dcc:	407f4000 	.word	0x407f4000
 8004dd0:	00000000 	.word	0x00000000
 8004dd4:	40000000 	.word	0x40000000
 8004dd8:	200000cb 	.word	0x200000cb
 8004ddc:	200006f0 	.word	0x200006f0
 8004de0:	200000ca 	.word	0x200000ca

08004de4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	4b10      	ldr	r3, [pc, #64]	@ (8004e30 <HAL_MspInit+0x4c>)
 8004df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df2:	4a0f      	ldr	r2, [pc, #60]	@ (8004e30 <HAL_MspInit+0x4c>)
 8004df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004e30 <HAL_MspInit+0x4c>)
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e02:	607b      	str	r3, [r7, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	603b      	str	r3, [r7, #0]
 8004e0a:	4b09      	ldr	r3, [pc, #36]	@ (8004e30 <HAL_MspInit+0x4c>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	4a08      	ldr	r2, [pc, #32]	@ (8004e30 <HAL_MspInit+0x4c>)
 8004e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e16:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <HAL_MspInit+0x4c>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004e22:	2007      	movs	r0, #7
 8004e24:	f000 fd18 	bl	8005858 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40023800 	.word	0x40023800

08004e34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08a      	sub	sp, #40	@ 0x28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e3c:	f107 0314 	add.w	r3, r7, #20
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	605a      	str	r2, [r3, #4]
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	60da      	str	r2, [r3, #12]
 8004e4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a19      	ldr	r2, [pc, #100]	@ (8004eb8 <HAL_I2C_MspInit+0x84>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d12c      	bne.n	8004eb0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e56:	2300      	movs	r3, #0
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	4b18      	ldr	r3, [pc, #96]	@ (8004ebc <HAL_I2C_MspInit+0x88>)
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5e:	4a17      	ldr	r2, [pc, #92]	@ (8004ebc <HAL_I2C_MspInit+0x88>)
 8004e60:	f043 0302 	orr.w	r3, r3, #2
 8004e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e66:	4b15      	ldr	r3, [pc, #84]	@ (8004ebc <HAL_I2C_MspInit+0x88>)
 8004e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004e72:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e78:	2312      	movs	r3, #18
 8004e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e80:	2303      	movs	r3, #3
 8004e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004e84:	2304      	movs	r3, #4
 8004e86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e88:	f107 0314 	add.w	r3, r7, #20
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	480c      	ldr	r0, [pc, #48]	@ (8004ec0 <HAL_I2C_MspInit+0x8c>)
 8004e90:	f000 fdb6 	bl	8005a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	4b08      	ldr	r3, [pc, #32]	@ (8004ebc <HAL_I2C_MspInit+0x88>)
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	4a07      	ldr	r2, [pc, #28]	@ (8004ebc <HAL_I2C_MspInit+0x88>)
 8004e9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ea2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ea4:	4b05      	ldr	r3, [pc, #20]	@ (8004ebc <HAL_I2C_MspInit+0x88>)
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004eb0:	bf00      	nop
 8004eb2:	3728      	adds	r7, #40	@ 0x28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40005800 	.word	0x40005800
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	40020400 	.word	0x40020400

08004ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8004f7c <HAL_TIM_Base_MspInit+0xb8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d116      	bne.n	8004f04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	4b29      	ldr	r3, [pc, #164]	@ (8004f80 <HAL_TIM_Base_MspInit+0xbc>)
 8004edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ede:	4a28      	ldr	r2, [pc, #160]	@ (8004f80 <HAL_TIM_Base_MspInit+0xbc>)
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ee6:	4b26      	ldr	r3, [pc, #152]	@ (8004f80 <HAL_TIM_Base_MspInit+0xbc>)
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	201b      	movs	r0, #27
 8004ef8:	f000 fcb9 	bl	800586e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004efc:	201b      	movs	r0, #27
 8004efe:	f000 fcd2 	bl	80058a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004f02:	e036      	b.n	8004f72 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f0c:	d116      	bne.n	8004f3c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f0e:	2300      	movs	r3, #0
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	4b1b      	ldr	r3, [pc, #108]	@ (8004f80 <HAL_TIM_Base_MspInit+0xbc>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	4a1a      	ldr	r2, [pc, #104]	@ (8004f80 <HAL_TIM_Base_MspInit+0xbc>)
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f1e:	4b18      	ldr	r3, [pc, #96]	@ (8004f80 <HAL_TIM_Base_MspInit+0xbc>)
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	201c      	movs	r0, #28
 8004f30:	f000 fc9d 	bl	800586e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f34:	201c      	movs	r0, #28
 8004f36:	f000 fcb6 	bl	80058a6 <HAL_NVIC_EnableIRQ>
}
 8004f3a:	e01a      	b.n	8004f72 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a10      	ldr	r2, [pc, #64]	@ (8004f84 <HAL_TIM_Base_MspInit+0xc0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d115      	bne.n	8004f72 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f80 <HAL_TIM_Base_MspInit+0xbc>)
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8004f80 <HAL_TIM_Base_MspInit+0xbc>)
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f56:	4b0a      	ldr	r3, [pc, #40]	@ (8004f80 <HAL_TIM_Base_MspInit+0xbc>)
 8004f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8004f62:	2200      	movs	r2, #0
 8004f64:	2100      	movs	r1, #0
 8004f66:	202e      	movs	r0, #46	@ 0x2e
 8004f68:	f000 fc81 	bl	800586e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8004f6c:	202e      	movs	r0, #46	@ 0x2e
 8004f6e:	f000 fc9a 	bl	80058a6 <HAL_NVIC_EnableIRQ>
}
 8004f72:	bf00      	nop
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40023800 	.word	0x40023800
 8004f84:	40010400 	.word	0x40010400

08004f88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08a      	sub	sp, #40	@ 0x28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f90:	f107 0314 	add.w	r3, r7, #20
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	605a      	str	r2, [r3, #4]
 8004f9a:	609a      	str	r2, [r3, #8]
 8004f9c:	60da      	str	r2, [r3, #12]
 8004f9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a37      	ldr	r2, [pc, #220]	@ (8005084 <HAL_TIM_MspPostInit+0xfc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d11f      	bne.n	8004fea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	4b36      	ldr	r3, [pc, #216]	@ (8005088 <HAL_TIM_MspPostInit+0x100>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb2:	4a35      	ldr	r2, [pc, #212]	@ (8005088 <HAL_TIM_MspPostInit+0x100>)
 8004fb4:	f043 0310 	orr.w	r3, r3, #16
 8004fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fba:	4b33      	ldr	r3, [pc, #204]	@ (8005088 <HAL_TIM_MspPostInit+0x100>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8004fc6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8004fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fcc:	2312      	movs	r3, #18
 8004fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fdc:	f107 0314 	add.w	r3, r7, #20
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	482a      	ldr	r0, [pc, #168]	@ (800508c <HAL_TIM_MspPostInit+0x104>)
 8004fe4:	f000 fd0c 	bl	8005a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004fe8:	e047      	b.n	800507a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff2:	d11e      	bne.n	8005032 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	4b23      	ldr	r3, [pc, #140]	@ (8005088 <HAL_TIM_MspPostInit+0x100>)
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffc:	4a22      	ldr	r2, [pc, #136]	@ (8005088 <HAL_TIM_MspPostInit+0x100>)
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	6313      	str	r3, [r2, #48]	@ 0x30
 8005004:	4b20      	ldr	r3, [pc, #128]	@ (8005088 <HAL_TIM_MspPostInit+0x100>)
 8005006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005010:	230c      	movs	r3, #12
 8005012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005014:	2312      	movs	r3, #18
 8005016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005018:	2302      	movs	r3, #2
 800501a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800501c:	2303      	movs	r3, #3
 800501e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005020:	2301      	movs	r3, #1
 8005022:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005024:	f107 0314 	add.w	r3, r7, #20
 8005028:	4619      	mov	r1, r3
 800502a:	4819      	ldr	r0, [pc, #100]	@ (8005090 <HAL_TIM_MspPostInit+0x108>)
 800502c:	f000 fce8 	bl	8005a00 <HAL_GPIO_Init>
}
 8005030:	e023      	b.n	800507a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a17      	ldr	r2, [pc, #92]	@ (8005094 <HAL_TIM_MspPostInit+0x10c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d11e      	bne.n	800507a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800503c:	2300      	movs	r3, #0
 800503e:	60bb      	str	r3, [r7, #8]
 8005040:	4b11      	ldr	r3, [pc, #68]	@ (8005088 <HAL_TIM_MspPostInit+0x100>)
 8005042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005044:	4a10      	ldr	r2, [pc, #64]	@ (8005088 <HAL_TIM_MspPostInit+0x100>)
 8005046:	f043 0304 	orr.w	r3, r3, #4
 800504a:	6313      	str	r3, [r2, #48]	@ 0x30
 800504c:	4b0e      	ldr	r3, [pc, #56]	@ (8005088 <HAL_TIM_MspPostInit+0x100>)
 800504e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005058:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800505c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800505e:	2312      	movs	r3, #18
 8005060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005062:	2302      	movs	r3, #2
 8005064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005066:	2303      	movs	r3, #3
 8005068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800506a:	2303      	movs	r3, #3
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800506e:	f107 0314 	add.w	r3, r7, #20
 8005072:	4619      	mov	r1, r3
 8005074:	4808      	ldr	r0, [pc, #32]	@ (8005098 <HAL_TIM_MspPostInit+0x110>)
 8005076:	f000 fcc3 	bl	8005a00 <HAL_GPIO_Init>
}
 800507a:	bf00      	nop
 800507c:	3728      	adds	r7, #40	@ 0x28
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40010000 	.word	0x40010000
 8005088:	40023800 	.word	0x40023800
 800508c:	40021000 	.word	0x40021000
 8005090:	40020000 	.word	0x40020000
 8005094:	40010400 	.word	0x40010400
 8005098:	40020800 	.word	0x40020800

0800509c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08e      	sub	sp, #56	@ 0x38
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	605a      	str	r2, [r3, #4]
 80050ae:	609a      	str	r2, [r3, #8]
 80050b0:	60da      	str	r2, [r3, #12]
 80050b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a57      	ldr	r2, [pc, #348]	@ (8005218 <HAL_UART_MspInit+0x17c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d134      	bne.n	8005128 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	623b      	str	r3, [r7, #32]
 80050c2:	4b56      	ldr	r3, [pc, #344]	@ (800521c <HAL_UART_MspInit+0x180>)
 80050c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c6:	4a55      	ldr	r2, [pc, #340]	@ (800521c <HAL_UART_MspInit+0x180>)
 80050c8:	f043 0310 	orr.w	r3, r3, #16
 80050cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80050ce:	4b53      	ldr	r3, [pc, #332]	@ (800521c <HAL_UART_MspInit+0x180>)
 80050d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	623b      	str	r3, [r7, #32]
 80050d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	4b4f      	ldr	r3, [pc, #316]	@ (800521c <HAL_UART_MspInit+0x180>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e2:	4a4e      	ldr	r2, [pc, #312]	@ (800521c <HAL_UART_MspInit+0x180>)
 80050e4:	f043 0302 	orr.w	r3, r3, #2
 80050e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ea:	4b4c      	ldr	r3, [pc, #304]	@ (800521c <HAL_UART_MspInit+0x180>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	61fb      	str	r3, [r7, #28]
 80050f4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050f6:	23c0      	movs	r3, #192	@ 0xc0
 80050f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fa:	2302      	movs	r3, #2
 80050fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005102:	2303      	movs	r3, #3
 8005104:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005106:	2307      	movs	r3, #7
 8005108:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800510a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800510e:	4619      	mov	r1, r3
 8005110:	4843      	ldr	r0, [pc, #268]	@ (8005220 <HAL_UART_MspInit+0x184>)
 8005112:	f000 fc75 	bl	8005a00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005116:	2200      	movs	r2, #0
 8005118:	2100      	movs	r1, #0
 800511a:	2025      	movs	r0, #37	@ 0x25
 800511c:	f000 fba7 	bl	800586e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005120:	2025      	movs	r0, #37	@ 0x25
 8005122:	f000 fbc0 	bl	80058a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005126:	e073      	b.n	8005210 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a3d      	ldr	r2, [pc, #244]	@ (8005224 <HAL_UART_MspInit+0x188>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d134      	bne.n	800519c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	4b39      	ldr	r3, [pc, #228]	@ (800521c <HAL_UART_MspInit+0x180>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513a:	4a38      	ldr	r2, [pc, #224]	@ (800521c <HAL_UART_MspInit+0x180>)
 800513c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005140:	6413      	str	r3, [r2, #64]	@ 0x40
 8005142:	4b36      	ldr	r3, [pc, #216]	@ (800521c <HAL_UART_MspInit+0x180>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514a:	61bb      	str	r3, [r7, #24]
 800514c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	4b32      	ldr	r3, [pc, #200]	@ (800521c <HAL_UART_MspInit+0x180>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	4a31      	ldr	r2, [pc, #196]	@ (800521c <HAL_UART_MspInit+0x180>)
 8005158:	f043 0308 	orr.w	r3, r3, #8
 800515c:	6313      	str	r3, [r2, #48]	@ 0x30
 800515e:	4b2f      	ldr	r3, [pc, #188]	@ (800521c <HAL_UART_MspInit+0x180>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800516a:	2360      	movs	r3, #96	@ 0x60
 800516c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516e:	2302      	movs	r3, #2
 8005170:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005172:	2300      	movs	r3, #0
 8005174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005176:	2303      	movs	r3, #3
 8005178:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800517a:	2307      	movs	r3, #7
 800517c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800517e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005182:	4619      	mov	r1, r3
 8005184:	4828      	ldr	r0, [pc, #160]	@ (8005228 <HAL_UART_MspInit+0x18c>)
 8005186:	f000 fc3b 	bl	8005a00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800518a:	2200      	movs	r2, #0
 800518c:	2100      	movs	r1, #0
 800518e:	2026      	movs	r0, #38	@ 0x26
 8005190:	f000 fb6d 	bl	800586e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005194:	2026      	movs	r0, #38	@ 0x26
 8005196:	f000 fb86 	bl	80058a6 <HAL_NVIC_EnableIRQ>
}
 800519a:	e039      	b.n	8005210 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a22      	ldr	r2, [pc, #136]	@ (800522c <HAL_UART_MspInit+0x190>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d134      	bne.n	8005210 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 80051a6:	2300      	movs	r3, #0
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	4b1c      	ldr	r3, [pc, #112]	@ (800521c <HAL_UART_MspInit+0x180>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	4a1b      	ldr	r2, [pc, #108]	@ (800521c <HAL_UART_MspInit+0x180>)
 80051b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80051b6:	4b19      	ldr	r3, [pc, #100]	@ (800521c <HAL_UART_MspInit+0x180>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	4b15      	ldr	r3, [pc, #84]	@ (800521c <HAL_UART_MspInit+0x180>)
 80051c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ca:	4a14      	ldr	r2, [pc, #80]	@ (800521c <HAL_UART_MspInit+0x180>)
 80051cc:	f043 0304 	orr.w	r3, r3, #4
 80051d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80051d2:	4b12      	ldr	r3, [pc, #72]	@ (800521c <HAL_UART_MspInit+0x180>)
 80051d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80051de:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e4:	2302      	movs	r3, #2
 80051e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e8:	2300      	movs	r3, #0
 80051ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ec:	2303      	movs	r3, #3
 80051ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80051f0:	2307      	movs	r3, #7
 80051f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051f8:	4619      	mov	r1, r3
 80051fa:	480d      	ldr	r0, [pc, #52]	@ (8005230 <HAL_UART_MspInit+0x194>)
 80051fc:	f000 fc00 	bl	8005a00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005200:	2200      	movs	r2, #0
 8005202:	2100      	movs	r1, #0
 8005204:	2027      	movs	r0, #39	@ 0x27
 8005206:	f000 fb32 	bl	800586e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800520a:	2027      	movs	r0, #39	@ 0x27
 800520c:	f000 fb4b 	bl	80058a6 <HAL_NVIC_EnableIRQ>
}
 8005210:	bf00      	nop
 8005212:	3738      	adds	r7, #56	@ 0x38
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40011000 	.word	0x40011000
 800521c:	40023800 	.word	0x40023800
 8005220:	40020400 	.word	0x40020400
 8005224:	40004400 	.word	0x40004400
 8005228:	40020c00 	.word	0x40020c00
 800522c:	40004800 	.word	0x40004800
 8005230:	40020800 	.word	0x40020800

08005234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005238:	bf00      	nop
 800523a:	e7fd      	b.n	8005238 <NMI_Handler+0x4>

0800523c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005240:	bf00      	nop
 8005242:	e7fd      	b.n	8005240 <HardFault_Handler+0x4>

08005244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005248:	bf00      	nop
 800524a:	e7fd      	b.n	8005248 <MemManage_Handler+0x4>

0800524c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005250:	bf00      	nop
 8005252:	e7fd      	b.n	8005250 <BusFault_Handler+0x4>

08005254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005258:	bf00      	nop
 800525a:	e7fd      	b.n	8005258 <UsageFault_Handler+0x4>

0800525c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005260:	bf00      	nop
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800526a:	b480      	push	{r7}
 800526c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800526e:	bf00      	nop
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800527c:	bf00      	nop
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800528a:	f000 f9d1 	bl	8005630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800528e:	bf00      	nop
 8005290:	bd80      	pop	{r7, pc}

08005292 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_2_Pin);
 8005296:	2001      	movs	r0, #1
 8005298:	f000 fd80 	bl	8005d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800529c:	bf00      	nop
 800529e:	bd80      	pop	{r7, pc}

080052a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_2_Pin);
 80052a4:	2002      	movs	r0, #2
 80052a6:	f000 fd79 	bl	8005d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}

080052ae <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_1_Pin);
 80052b2:	2004      	movs	r0, #4
 80052b4:	f000 fd72 	bl	8005d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80052b8:	bf00      	nop
 80052ba:	bd80      	pop	{r7, pc}

080052bc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_1_Pin);
 80052c0:	2008      	movs	r0, #8
 80052c2:	f000 fd6b 	bl	8005d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80052c6:	bf00      	nop
 80052c8:	bd80      	pop	{r7, pc}

080052ca <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_3_Pin);
 80052ce:	2020      	movs	r0, #32
 80052d0:	f000 fd64 	bl	8005d9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 80052d4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80052d8:	f000 fd60 	bl	8005d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80052dc:	bf00      	nop
 80052de:	bd80      	pop	{r7, pc}

080052e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80052e4:	4802      	ldr	r0, [pc, #8]	@ (80052f0 <TIM1_CC_IRQHandler+0x10>)
 80052e6:	f002 f865 	bl	80073b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80052ea:	bf00      	nop
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000320 	.word	0x20000320

080052f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80052f8:	4802      	ldr	r0, [pc, #8]	@ (8005304 <TIM2_IRQHandler+0x10>)
 80052fa:	f002 f85b 	bl	80073b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80052fe:	bf00      	nop
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000368 	.word	0x20000368

08005308 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
//		pitch = sensorData[1];
//		ax = sensorData[2];
//		ay = sensorData[3];
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800530c:	4802      	ldr	r0, [pc, #8]	@ (8005318 <USART1_IRQHandler+0x10>)
 800530e:	f002 ff71 	bl	80081f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005312:	bf00      	nop
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	200003f8 	.word	0x200003f8

0800531c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005320:	4802      	ldr	r0, [pc, #8]	@ (800532c <USART2_IRQHandler+0x10>)
 8005322:	f002 ff67 	bl	80081f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005326:	bf00      	nop
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000440 	.word	0x20000440

08005330 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005334:	4802      	ldr	r0, [pc, #8]	@ (8005340 <USART3_IRQHandler+0x10>)
 8005336:	f002 ff5d 	bl	80081f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800533a:	bf00      	nop
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20000488 	.word	0x20000488

08005344 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8005348:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800534c:	f000 fd26 	bl	8005d9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8005350:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005354:	f000 fd22 	bl	8005d9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_3_Pin);
 8005358:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800535c:	f000 fd1e 	bl	8005d9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_4_Pin);
 8005360:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005364:	f000 fd1a 	bl	8005d9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_4_Pin);
 8005368:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800536c:	f000 fd16 	bl	8005d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005370:	bf00      	nop
 8005372:	bd80      	pop	{r7, pc}

08005374 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005378:	4802      	ldr	r0, [pc, #8]	@ (8005384 <TIM8_CC_IRQHandler+0x10>)
 800537a:	f002 f81b 	bl	80073b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800537e:	bf00      	nop
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	200003b0 	.word	0x200003b0

08005388 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  return 1;
 800538c:	2301      	movs	r3, #1
}
 800538e:	4618      	mov	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <_kill>:

int _kill(int pid, int sig)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80053a2:	f005 fd1b 	bl	800addc <__errno>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2216      	movs	r2, #22
 80053aa:	601a      	str	r2, [r3, #0]
  return -1;
 80053ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <_exit>:

void _exit (int status)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80053c0:	f04f 31ff 	mov.w	r1, #4294967295
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff ffe7 	bl	8005398 <_kill>
  while (1) {}    /* Make sure we hang here */
 80053ca:	bf00      	nop
 80053cc:	e7fd      	b.n	80053ca <_exit+0x12>

080053ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	e00a      	b.n	80053f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80053e0:	f3af 8000 	nop.w
 80053e4:	4601      	mov	r1, r0
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	60ba      	str	r2, [r7, #8]
 80053ec:	b2ca      	uxtb	r2, r1
 80053ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	3301      	adds	r3, #1
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	dbf0      	blt.n	80053e0 <_read+0x12>
  }

  return len;
 80053fe:	687b      	ldr	r3, [r7, #4]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005414:	2300      	movs	r3, #0
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e009      	b.n	800542e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	60ba      	str	r2, [r7, #8]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	3301      	adds	r3, #1
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	dbf1      	blt.n	800541a <_write+0x12>
  }
  return len;
 8005436:	687b      	ldr	r3, [r7, #4]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <_close>:

int _close(int file)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005448:	f04f 33ff 	mov.w	r3, #4294967295
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005468:	605a      	str	r2, [r3, #4]
  return 0;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <_isatty>:

int _isatty(int file)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005480:	2301      	movs	r3, #1
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054b0:	4a14      	ldr	r2, [pc, #80]	@ (8005504 <_sbrk+0x5c>)
 80054b2:	4b15      	ldr	r3, [pc, #84]	@ (8005508 <_sbrk+0x60>)
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054bc:	4b13      	ldr	r3, [pc, #76]	@ (800550c <_sbrk+0x64>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d102      	bne.n	80054ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054c4:	4b11      	ldr	r3, [pc, #68]	@ (800550c <_sbrk+0x64>)
 80054c6:	4a12      	ldr	r2, [pc, #72]	@ (8005510 <_sbrk+0x68>)
 80054c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054ca:	4b10      	ldr	r3, [pc, #64]	@ (800550c <_sbrk+0x64>)
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4413      	add	r3, r2
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d207      	bcs.n	80054e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054d8:	f005 fc80 	bl	800addc <__errno>
 80054dc:	4603      	mov	r3, r0
 80054de:	220c      	movs	r2, #12
 80054e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80054e2:	f04f 33ff 	mov.w	r3, #4294967295
 80054e6:	e009      	b.n	80054fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80054e8:	4b08      	ldr	r3, [pc, #32]	@ (800550c <_sbrk+0x64>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80054ee:	4b07      	ldr	r3, [pc, #28]	@ (800550c <_sbrk+0x64>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4413      	add	r3, r2
 80054f6:	4a05      	ldr	r2, [pc, #20]	@ (800550c <_sbrk+0x64>)
 80054f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80054fa:	68fb      	ldr	r3, [r7, #12]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	20020000 	.word	0x20020000
 8005508:	00000400 	.word	0x00000400
 800550c:	200006f4 	.word	0x200006f4
 8005510:	20000848 	.word	0x20000848

08005514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005518:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <SystemInit+0x20>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800551e:	4a05      	ldr	r2, [pc, #20]	@ (8005534 <SystemInit+0x20>)
 8005520:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005524:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005528:	bf00      	nop
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	e000ed00 	.word	0xe000ed00

08005538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005538:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005570 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800553c:	f7ff ffea 	bl	8005514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005540:	480c      	ldr	r0, [pc, #48]	@ (8005574 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005542:	490d      	ldr	r1, [pc, #52]	@ (8005578 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005544:	4a0d      	ldr	r2, [pc, #52]	@ (800557c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005548:	e002      	b.n	8005550 <LoopCopyDataInit>

0800554a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800554a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800554c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800554e:	3304      	adds	r3, #4

08005550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005554:	d3f9      	bcc.n	800554a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005556:	4a0a      	ldr	r2, [pc, #40]	@ (8005580 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005558:	4c0a      	ldr	r4, [pc, #40]	@ (8005584 <LoopFillZerobss+0x22>)
  movs r3, #0
 800555a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800555c:	e001      	b.n	8005562 <LoopFillZerobss>

0800555e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800555e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005560:	3204      	adds	r2, #4

08005562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005564:	d3fb      	bcc.n	800555e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005566:	f005 fc3f 	bl	800ade8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800556a:	f7fc fe2d 	bl	80021c8 <main>
  bx  lr    
 800556e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005570:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005578:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 800557c:	0800fba0 	.word	0x0800fba0
  ldr r2, =_sbss
 8005580:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8005584:	20000848 	.word	0x20000848

08005588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005588:	e7fe      	b.n	8005588 <ADC_IRQHandler>
	...

0800558c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005590:	4b0e      	ldr	r3, [pc, #56]	@ (80055cc <HAL_Init+0x40>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a0d      	ldr	r2, [pc, #52]	@ (80055cc <HAL_Init+0x40>)
 8005596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800559a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800559c:	4b0b      	ldr	r3, [pc, #44]	@ (80055cc <HAL_Init+0x40>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a0a      	ldr	r2, [pc, #40]	@ (80055cc <HAL_Init+0x40>)
 80055a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055a8:	4b08      	ldr	r3, [pc, #32]	@ (80055cc <HAL_Init+0x40>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a07      	ldr	r2, [pc, #28]	@ (80055cc <HAL_Init+0x40>)
 80055ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055b4:	2003      	movs	r0, #3
 80055b6:	f000 f94f 	bl	8005858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80055ba:	2000      	movs	r0, #0
 80055bc:	f000 f808 	bl	80055d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80055c0:	f7ff fc10 	bl	8004de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40023c00 	.word	0x40023c00

080055d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80055d8:	4b12      	ldr	r3, [pc, #72]	@ (8005624 <HAL_InitTick+0x54>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4b12      	ldr	r3, [pc, #72]	@ (8005628 <HAL_InitTick+0x58>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	4619      	mov	r1, r3
 80055e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80055e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80055ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 f967 	bl	80058c2 <HAL_SYSTICK_Config>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e00e      	b.n	800561c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b0f      	cmp	r3, #15
 8005602:	d80a      	bhi.n	800561a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005604:	2200      	movs	r2, #0
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	f000 f92f 	bl	800586e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005610:	4a06      	ldr	r2, [pc, #24]	@ (800562c <HAL_InitTick+0x5c>)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	e000      	b.n	800561c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	200000cc 	.word	0x200000cc
 8005628:	200000d4 	.word	0x200000d4
 800562c:	200000d0 	.word	0x200000d0

08005630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005634:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <HAL_IncTick+0x20>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	4b06      	ldr	r3, [pc, #24]	@ (8005654 <HAL_IncTick+0x24>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4413      	add	r3, r2
 8005640:	4a04      	ldr	r2, [pc, #16]	@ (8005654 <HAL_IncTick+0x24>)
 8005642:	6013      	str	r3, [r2, #0]
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	200000d4 	.word	0x200000d4
 8005654:	200006f8 	.word	0x200006f8

08005658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  return uwTick;
 800565c:	4b03      	ldr	r3, [pc, #12]	@ (800566c <HAL_GetTick+0x14>)
 800565e:	681b      	ldr	r3, [r3, #0]
}
 8005660:	4618      	mov	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	200006f8 	.word	0x200006f8

08005670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005678:	f7ff ffee 	bl	8005658 <HAL_GetTick>
 800567c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005688:	d005      	beq.n	8005696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800568a:	4b0a      	ldr	r3, [pc, #40]	@ (80056b4 <HAL_Delay+0x44>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005696:	bf00      	nop
 8005698:	f7ff ffde 	bl	8005658 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d8f7      	bhi.n	8005698 <HAL_Delay+0x28>
  {
  }
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	200000d4 	.word	0x200000d4

080056b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056c8:	4b0c      	ldr	r3, [pc, #48]	@ (80056fc <__NVIC_SetPriorityGrouping+0x44>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80056d4:	4013      	ands	r3, r2
 80056d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80056e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056ea:	4a04      	ldr	r2, [pc, #16]	@ (80056fc <__NVIC_SetPriorityGrouping+0x44>)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	60d3      	str	r3, [r2, #12]
}
 80056f0:	bf00      	nop
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	e000ed00 	.word	0xe000ed00

08005700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005704:	4b04      	ldr	r3, [pc, #16]	@ (8005718 <__NVIC_GetPriorityGrouping+0x18>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	0a1b      	lsrs	r3, r3, #8
 800570a:	f003 0307 	and.w	r3, r3, #7
}
 800570e:	4618      	mov	r0, r3
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	e000ed00 	.word	0xe000ed00

0800571c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572a:	2b00      	cmp	r3, #0
 800572c:	db0b      	blt.n	8005746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	f003 021f 	and.w	r2, r3, #31
 8005734:	4907      	ldr	r1, [pc, #28]	@ (8005754 <__NVIC_EnableIRQ+0x38>)
 8005736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	2001      	movs	r0, #1
 800573e:	fa00 f202 	lsl.w	r2, r0, r2
 8005742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	e000e100 	.word	0xe000e100

08005758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	4603      	mov	r3, r0
 8005760:	6039      	str	r1, [r7, #0]
 8005762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005768:	2b00      	cmp	r3, #0
 800576a:	db0a      	blt.n	8005782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	b2da      	uxtb	r2, r3
 8005770:	490c      	ldr	r1, [pc, #48]	@ (80057a4 <__NVIC_SetPriority+0x4c>)
 8005772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005776:	0112      	lsls	r2, r2, #4
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	440b      	add	r3, r1
 800577c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005780:	e00a      	b.n	8005798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	b2da      	uxtb	r2, r3
 8005786:	4908      	ldr	r1, [pc, #32]	@ (80057a8 <__NVIC_SetPriority+0x50>)
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	3b04      	subs	r3, #4
 8005790:	0112      	lsls	r2, r2, #4
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	440b      	add	r3, r1
 8005796:	761a      	strb	r2, [r3, #24]
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	e000e100 	.word	0xe000e100
 80057a8:	e000ed00 	.word	0xe000ed00

080057ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b089      	sub	sp, #36	@ 0x24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	f1c3 0307 	rsb	r3, r3, #7
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	bf28      	it	cs
 80057ca:	2304      	movcs	r3, #4
 80057cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	3304      	adds	r3, #4
 80057d2:	2b06      	cmp	r3, #6
 80057d4:	d902      	bls.n	80057dc <NVIC_EncodePriority+0x30>
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	3b03      	subs	r3, #3
 80057da:	e000      	b.n	80057de <NVIC_EncodePriority+0x32>
 80057dc:	2300      	movs	r3, #0
 80057de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057e0:	f04f 32ff 	mov.w	r2, #4294967295
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ea:	43da      	mvns	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	401a      	ands	r2, r3
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057f4:	f04f 31ff 	mov.w	r1, #4294967295
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	fa01 f303 	lsl.w	r3, r1, r3
 80057fe:	43d9      	mvns	r1, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005804:	4313      	orrs	r3, r2
         );
}
 8005806:	4618      	mov	r0, r3
 8005808:	3724      	adds	r7, #36	@ 0x24
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3b01      	subs	r3, #1
 8005820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005824:	d301      	bcc.n	800582a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005826:	2301      	movs	r3, #1
 8005828:	e00f      	b.n	800584a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800582a:	4a0a      	ldr	r2, [pc, #40]	@ (8005854 <SysTick_Config+0x40>)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3b01      	subs	r3, #1
 8005830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005832:	210f      	movs	r1, #15
 8005834:	f04f 30ff 	mov.w	r0, #4294967295
 8005838:	f7ff ff8e 	bl	8005758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800583c:	4b05      	ldr	r3, [pc, #20]	@ (8005854 <SysTick_Config+0x40>)
 800583e:	2200      	movs	r2, #0
 8005840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005842:	4b04      	ldr	r3, [pc, #16]	@ (8005854 <SysTick_Config+0x40>)
 8005844:	2207      	movs	r2, #7
 8005846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	e000e010 	.word	0xe000e010

08005858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff ff29 	bl	80056b8 <__NVIC_SetPriorityGrouping>
}
 8005866:	bf00      	nop
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800586e:	b580      	push	{r7, lr}
 8005870:	b086      	sub	sp, #24
 8005872:	af00      	add	r7, sp, #0
 8005874:	4603      	mov	r3, r0
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	607a      	str	r2, [r7, #4]
 800587a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800587c:	2300      	movs	r3, #0
 800587e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005880:	f7ff ff3e 	bl	8005700 <__NVIC_GetPriorityGrouping>
 8005884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	6978      	ldr	r0, [r7, #20]
 800588c:	f7ff ff8e 	bl	80057ac <NVIC_EncodePriority>
 8005890:	4602      	mov	r2, r0
 8005892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005896:	4611      	mov	r1, r2
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff ff5d 	bl	8005758 <__NVIC_SetPriority>
}
 800589e:	bf00      	nop
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	4603      	mov	r3, r0
 80058ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7ff ff31 	bl	800571c <__NVIC_EnableIRQ>
}
 80058ba:	bf00      	nop
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b082      	sub	sp, #8
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff ffa2 	bl	8005814 <SysTick_Config>
 80058d0:	4603      	mov	r3, r0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80058e8:	f7ff feb6 	bl	8005658 <HAL_GetTick>
 80058ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d008      	beq.n	800590c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2280      	movs	r2, #128	@ 0x80
 80058fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e052      	b.n	80059b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0216 	bic.w	r2, r2, #22
 800591a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695a      	ldr	r2, [r3, #20]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800592a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d103      	bne.n	800593c <HAL_DMA_Abort+0x62>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005938:	2b00      	cmp	r3, #0
 800593a:	d007      	beq.n	800594c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0208 	bic.w	r2, r2, #8
 800594a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0201 	bic.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800595c:	e013      	b.n	8005986 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800595e:	f7ff fe7b 	bl	8005658 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b05      	cmp	r3, #5
 800596a:	d90c      	bls.n	8005986 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2203      	movs	r2, #3
 8005976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e015      	b.n	80059b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e4      	bne.n	800595e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005998:	223f      	movs	r2, #63	@ 0x3f
 800599a:	409a      	lsls	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d004      	beq.n	80059d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2280      	movs	r2, #128	@ 0x80
 80059d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e00c      	b.n	80059f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2205      	movs	r2, #5
 80059dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0201 	bic.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
	...

08005a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b089      	sub	sp, #36	@ 0x24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a16:	2300      	movs	r3, #0
 8005a18:	61fb      	str	r3, [r7, #28]
 8005a1a:	e16b      	b.n	8005cf4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	f040 815a 	bne.w	8005cee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d005      	beq.n	8005a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d130      	bne.n	8005ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	43db      	mvns	r3, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4013      	ands	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a88:	2201      	movs	r2, #1
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	43db      	mvns	r3, r3
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4013      	ands	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	091b      	lsrs	r3, r3, #4
 8005a9e:	f003 0201 	and.w	r2, r3, #1
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f003 0303 	and.w	r3, r3, #3
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d017      	beq.n	8005af0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	2203      	movs	r2, #3
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f003 0303 	and.w	r3, r3, #3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d123      	bne.n	8005b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	08da      	lsrs	r2, r3, #3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3208      	adds	r2, #8
 8005b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	220f      	movs	r2, #15
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	08da      	lsrs	r2, r3, #3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3208      	adds	r2, #8
 8005b3e:	69b9      	ldr	r1, [r7, #24]
 8005b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	2203      	movs	r2, #3
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	43db      	mvns	r3, r3
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f003 0203 	and.w	r2, r3, #3
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 80b4 	beq.w	8005cee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	4b60      	ldr	r3, [pc, #384]	@ (8005d0c <HAL_GPIO_Init+0x30c>)
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8e:	4a5f      	ldr	r2, [pc, #380]	@ (8005d0c <HAL_GPIO_Init+0x30c>)
 8005b90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b96:	4b5d      	ldr	r3, [pc, #372]	@ (8005d0c <HAL_GPIO_Init+0x30c>)
 8005b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ba2:	4a5b      	ldr	r2, [pc, #364]	@ (8005d10 <HAL_GPIO_Init+0x310>)
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	089b      	lsrs	r3, r3, #2
 8005ba8:	3302      	adds	r3, #2
 8005baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	220f      	movs	r2, #15
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	43db      	mvns	r3, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a52      	ldr	r2, [pc, #328]	@ (8005d14 <HAL_GPIO_Init+0x314>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d02b      	beq.n	8005c26 <HAL_GPIO_Init+0x226>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a51      	ldr	r2, [pc, #324]	@ (8005d18 <HAL_GPIO_Init+0x318>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d025      	beq.n	8005c22 <HAL_GPIO_Init+0x222>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a50      	ldr	r2, [pc, #320]	@ (8005d1c <HAL_GPIO_Init+0x31c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d01f      	beq.n	8005c1e <HAL_GPIO_Init+0x21e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a4f      	ldr	r2, [pc, #316]	@ (8005d20 <HAL_GPIO_Init+0x320>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d019      	beq.n	8005c1a <HAL_GPIO_Init+0x21a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a4e      	ldr	r2, [pc, #312]	@ (8005d24 <HAL_GPIO_Init+0x324>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d013      	beq.n	8005c16 <HAL_GPIO_Init+0x216>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a4d      	ldr	r2, [pc, #308]	@ (8005d28 <HAL_GPIO_Init+0x328>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00d      	beq.n	8005c12 <HAL_GPIO_Init+0x212>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a4c      	ldr	r2, [pc, #304]	@ (8005d2c <HAL_GPIO_Init+0x32c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d007      	beq.n	8005c0e <HAL_GPIO_Init+0x20e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a4b      	ldr	r2, [pc, #300]	@ (8005d30 <HAL_GPIO_Init+0x330>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d101      	bne.n	8005c0a <HAL_GPIO_Init+0x20a>
 8005c06:	2307      	movs	r3, #7
 8005c08:	e00e      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c0a:	2308      	movs	r3, #8
 8005c0c:	e00c      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c0e:	2306      	movs	r3, #6
 8005c10:	e00a      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c12:	2305      	movs	r3, #5
 8005c14:	e008      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c16:	2304      	movs	r3, #4
 8005c18:	e006      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e004      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e002      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <HAL_GPIO_Init+0x228>
 8005c26:	2300      	movs	r3, #0
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	f002 0203 	and.w	r2, r2, #3
 8005c2e:	0092      	lsls	r2, r2, #2
 8005c30:	4093      	lsls	r3, r2
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c38:	4935      	ldr	r1, [pc, #212]	@ (8005d10 <HAL_GPIO_Init+0x310>)
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	089b      	lsrs	r3, r3, #2
 8005c3e:	3302      	adds	r3, #2
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c46:	4b3b      	ldr	r3, [pc, #236]	@ (8005d34 <HAL_GPIO_Init+0x334>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	43db      	mvns	r3, r3
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	4013      	ands	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c6a:	4a32      	ldr	r2, [pc, #200]	@ (8005d34 <HAL_GPIO_Init+0x334>)
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c70:	4b30      	ldr	r3, [pc, #192]	@ (8005d34 <HAL_GPIO_Init+0x334>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c94:	4a27      	ldr	r2, [pc, #156]	@ (8005d34 <HAL_GPIO_Init+0x334>)
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c9a:	4b26      	ldr	r3, [pc, #152]	@ (8005d34 <HAL_GPIO_Init+0x334>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	43db      	mvns	r3, r3
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8005d34 <HAL_GPIO_Init+0x334>)
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d34 <HAL_GPIO_Init+0x334>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ce8:	4a12      	ldr	r2, [pc, #72]	@ (8005d34 <HAL_GPIO_Init+0x334>)
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	2b0f      	cmp	r3, #15
 8005cf8:	f67f ae90 	bls.w	8005a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	bf00      	nop
 8005d00:	3724      	adds	r7, #36	@ 0x24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	40013800 	.word	0x40013800
 8005d14:	40020000 	.word	0x40020000
 8005d18:	40020400 	.word	0x40020400
 8005d1c:	40020800 	.word	0x40020800
 8005d20:	40020c00 	.word	0x40020c00
 8005d24:	40021000 	.word	0x40021000
 8005d28:	40021400 	.word	0x40021400
 8005d2c:	40021800 	.word	0x40021800
 8005d30:	40021c00 	.word	0x40021c00
 8005d34:	40013c00 	.word	0x40013c00

08005d38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	887b      	ldrh	r3, [r7, #2]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d50:	2301      	movs	r3, #1
 8005d52:	73fb      	strb	r3, [r7, #15]
 8005d54:	e001      	b.n	8005d5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	807b      	strh	r3, [r7, #2]
 8005d74:	4613      	mov	r3, r2
 8005d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d78:	787b      	ldrb	r3, [r7, #1]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d7e:	887a      	ldrh	r2, [r7, #2]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d84:	e003      	b.n	8005d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d86:	887b      	ldrh	r3, [r7, #2]
 8005d88:	041a      	lsls	r2, r3, #16
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	619a      	str	r2, [r3, #24]
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4603      	mov	r3, r0
 8005da4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005da6:	4b08      	ldr	r3, [pc, #32]	@ (8005dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005da8:	695a      	ldr	r2, [r3, #20]
 8005daa:	88fb      	ldrh	r3, [r7, #6]
 8005dac:	4013      	ands	r3, r2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d006      	beq.n	8005dc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005db2:	4a05      	ldr	r2, [pc, #20]	@ (8005dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005db4:	88fb      	ldrh	r3, [r7, #6]
 8005db6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fc f876 	bl	8001eac <HAL_GPIO_EXTI_Callback>
  }
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40013c00 	.word	0x40013c00

08005dcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e12b      	b.n	8006036 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff f81e 	bl	8004e34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2224      	movs	r2, #36	@ 0x24
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0201 	bic.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e30:	f001 f8da 	bl	8006fe8 <HAL_RCC_GetPCLK1Freq>
 8005e34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	4a81      	ldr	r2, [pc, #516]	@ (8006040 <HAL_I2C_Init+0x274>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d807      	bhi.n	8005e50 <HAL_I2C_Init+0x84>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4a80      	ldr	r2, [pc, #512]	@ (8006044 <HAL_I2C_Init+0x278>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	bf94      	ite	ls
 8005e48:	2301      	movls	r3, #1
 8005e4a:	2300      	movhi	r3, #0
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	e006      	b.n	8005e5e <HAL_I2C_Init+0x92>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4a7d      	ldr	r2, [pc, #500]	@ (8006048 <HAL_I2C_Init+0x27c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	bf94      	ite	ls
 8005e58:	2301      	movls	r3, #1
 8005e5a:	2300      	movhi	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e0e7      	b.n	8006036 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4a78      	ldr	r2, [pc, #480]	@ (800604c <HAL_I2C_Init+0x280>)
 8005e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6e:	0c9b      	lsrs	r3, r3, #18
 8005e70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	4a6a      	ldr	r2, [pc, #424]	@ (8006040 <HAL_I2C_Init+0x274>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d802      	bhi.n	8005ea0 <HAL_I2C_Init+0xd4>
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	e009      	b.n	8005eb4 <HAL_I2C_Init+0xe8>
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005ea6:	fb02 f303 	mul.w	r3, r2, r3
 8005eaa:	4a69      	ldr	r2, [pc, #420]	@ (8006050 <HAL_I2C_Init+0x284>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	099b      	lsrs	r3, r3, #6
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	430b      	orrs	r3, r1
 8005eba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005ec6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	495c      	ldr	r1, [pc, #368]	@ (8006040 <HAL_I2C_Init+0x274>)
 8005ed0:	428b      	cmp	r3, r1
 8005ed2:	d819      	bhi.n	8005f08 <HAL_I2C_Init+0x13c>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	1e59      	subs	r1, r3, #1
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ee2:	1c59      	adds	r1, r3, #1
 8005ee4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005ee8:	400b      	ands	r3, r1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <HAL_I2C_Init+0x138>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1e59      	subs	r1, r3, #1
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005efc:	3301      	adds	r3, #1
 8005efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f02:	e051      	b.n	8005fa8 <HAL_I2C_Init+0x1dc>
 8005f04:	2304      	movs	r3, #4
 8005f06:	e04f      	b.n	8005fa8 <HAL_I2C_Init+0x1dc>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d111      	bne.n	8005f34 <HAL_I2C_Init+0x168>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	1e58      	subs	r0, r3, #1
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6859      	ldr	r1, [r3, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	440b      	add	r3, r1
 8005f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f22:	3301      	adds	r3, #1
 8005f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	bf0c      	ite	eq
 8005f2c:	2301      	moveq	r3, #1
 8005f2e:	2300      	movne	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	e012      	b.n	8005f5a <HAL_I2C_Init+0x18e>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	1e58      	subs	r0, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6859      	ldr	r1, [r3, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	440b      	add	r3, r1
 8005f42:	0099      	lsls	r1, r3, #2
 8005f44:	440b      	add	r3, r1
 8005f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	bf0c      	ite	eq
 8005f54:	2301      	moveq	r3, #1
 8005f56:	2300      	movne	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <HAL_I2C_Init+0x196>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e022      	b.n	8005fa8 <HAL_I2C_Init+0x1dc>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10e      	bne.n	8005f88 <HAL_I2C_Init+0x1bc>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	1e58      	subs	r0, r3, #1
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6859      	ldr	r1, [r3, #4]
 8005f72:	460b      	mov	r3, r1
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	440b      	add	r3, r1
 8005f78:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f86:	e00f      	b.n	8005fa8 <HAL_I2C_Init+0x1dc>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	1e58      	subs	r0, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6859      	ldr	r1, [r3, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	440b      	add	r3, r1
 8005f96:	0099      	lsls	r1, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fa4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	6809      	ldr	r1, [r1, #0]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69da      	ldr	r2, [r3, #28]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005fd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	6911      	ldr	r1, [r2, #16]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	68d2      	ldr	r2, [r2, #12]
 8005fe2:	4311      	orrs	r1, r2
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6812      	ldr	r2, [r2, #0]
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	430a      	orrs	r2, r1
 8006006:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0201 	orr.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	000186a0 	.word	0x000186a0
 8006044:	001e847f 	.word	0x001e847f
 8006048:	003d08ff 	.word	0x003d08ff
 800604c:	431bde83 	.word	0x431bde83
 8006050:	10624dd3 	.word	0x10624dd3

08006054 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	607a      	str	r2, [r7, #4]
 800605e:	461a      	mov	r2, r3
 8006060:	460b      	mov	r3, r1
 8006062:	817b      	strh	r3, [r7, #10]
 8006064:	4613      	mov	r3, r2
 8006066:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006068:	f7ff faf6 	bl	8005658 <HAL_GetTick>
 800606c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b20      	cmp	r3, #32
 8006078:	f040 80e0 	bne.w	800623c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	2319      	movs	r3, #25
 8006082:	2201      	movs	r2, #1
 8006084:	4970      	ldr	r1, [pc, #448]	@ (8006248 <HAL_I2C_Master_Transmit+0x1f4>)
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f964 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006092:	2302      	movs	r3, #2
 8006094:	e0d3      	b.n	800623e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_I2C_Master_Transmit+0x50>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e0cc      	b.n	800623e <HAL_I2C_Master_Transmit+0x1ea>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d007      	beq.n	80060ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0201 	orr.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2221      	movs	r2, #33	@ 0x21
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2210      	movs	r2, #16
 80060e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	893a      	ldrh	r2, [r7, #8]
 80060fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4a50      	ldr	r2, [pc, #320]	@ (800624c <HAL_I2C_Master_Transmit+0x1f8>)
 800610a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800610c:	8979      	ldrh	r1, [r7, #10]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	6a3a      	ldr	r2, [r7, #32]
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 f89c 	bl	8006250 <I2C_MasterRequestWrite>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e08d      	b.n	800623e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006122:	2300      	movs	r3, #0
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006138:	e066      	b.n	8006208 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	6a39      	ldr	r1, [r7, #32]
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 fa22 	bl	8006588 <I2C_WaitOnTXEFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00d      	beq.n	8006166 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	2b04      	cmp	r3, #4
 8006150:	d107      	bne.n	8006162 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006160:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e06b      	b.n	800623e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616a:	781a      	ldrb	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	d11b      	bne.n	80061dc <HAL_I2C_Master_Transmit+0x188>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d017      	beq.n	80061dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b0:	781a      	ldrb	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	6a39      	ldr	r1, [r7, #32]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fa19 	bl	8006618 <I2C_WaitOnBTFFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00d      	beq.n	8006208 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d107      	bne.n	8006204 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006202:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e01a      	b.n	800623e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800620c:	2b00      	cmp	r3, #0
 800620e:	d194      	bne.n	800613a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800621e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	e000      	b.n	800623e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800623c:	2302      	movs	r3, #2
  }
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	00100002 	.word	0x00100002
 800624c:	ffff0000 	.word	0xffff0000

08006250 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af02      	add	r7, sp, #8
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	607a      	str	r2, [r7, #4]
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	460b      	mov	r3, r1
 800625e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006264:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d006      	beq.n	800627a <I2C_MasterRequestWrite+0x2a>
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d003      	beq.n	800627a <I2C_MasterRequestWrite+0x2a>
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006278:	d108      	bne.n	800628c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	e00b      	b.n	80062a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006290:	2b12      	cmp	r3, #18
 8006292:	d107      	bne.n	80062a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 f84f 	bl	8006354 <I2C_WaitOnFlagUntilTimeout>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00d      	beq.n	80062d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ca:	d103      	bne.n	80062d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e035      	b.n	8006344 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062e0:	d108      	bne.n	80062f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062e2:	897b      	ldrh	r3, [r7, #10]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	461a      	mov	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80062f0:	611a      	str	r2, [r3, #16]
 80062f2:	e01b      	b.n	800632c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80062f4:	897b      	ldrh	r3, [r7, #10]
 80062f6:	11db      	asrs	r3, r3, #7
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	f003 0306 	and.w	r3, r3, #6
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	f063 030f 	orn	r3, r3, #15
 8006304:	b2da      	uxtb	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	490e      	ldr	r1, [pc, #56]	@ (800634c <I2C_MasterRequestWrite+0xfc>)
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f898 	bl	8006448 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e010      	b.n	8006344 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006322:	897b      	ldrh	r3, [r7, #10]
 8006324:	b2da      	uxtb	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	4907      	ldr	r1, [pc, #28]	@ (8006350 <I2C_MasterRequestWrite+0x100>)
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 f888 	bl	8006448 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e000      	b.n	8006344 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3718      	adds	r7, #24
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	00010008 	.word	0x00010008
 8006350:	00010002 	.word	0x00010002

08006354 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	4613      	mov	r3, r2
 8006362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006364:	e048      	b.n	80063f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636c:	d044      	beq.n	80063f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800636e:	f7ff f973 	bl	8005658 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d302      	bcc.n	8006384 <I2C_WaitOnFlagUntilTimeout+0x30>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d139      	bne.n	80063f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	0c1b      	lsrs	r3, r3, #16
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b01      	cmp	r3, #1
 800638c:	d10d      	bne.n	80063aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	43da      	mvns	r2, r3
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	4013      	ands	r3, r2
 800639a:	b29b      	uxth	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	bf0c      	ite	eq
 80063a0:	2301      	moveq	r3, #1
 80063a2:	2300      	movne	r3, #0
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	461a      	mov	r2, r3
 80063a8:	e00c      	b.n	80063c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	43da      	mvns	r2, r3
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	4013      	ands	r3, r2
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	bf0c      	ite	eq
 80063bc:	2301      	moveq	r3, #1
 80063be:	2300      	movne	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d116      	bne.n	80063f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e4:	f043 0220 	orr.w	r2, r3, #32
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e023      	b.n	8006440 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	0c1b      	lsrs	r3, r3, #16
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d10d      	bne.n	800641e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	43da      	mvns	r2, r3
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	4013      	ands	r3, r2
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	bf0c      	ite	eq
 8006414:	2301      	moveq	r3, #1
 8006416:	2300      	movne	r3, #0
 8006418:	b2db      	uxtb	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	e00c      	b.n	8006438 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	43da      	mvns	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4013      	ands	r3, r2
 800642a:	b29b      	uxth	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	bf0c      	ite	eq
 8006430:	2301      	moveq	r3, #1
 8006432:	2300      	movne	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	461a      	mov	r2, r3
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	429a      	cmp	r2, r3
 800643c:	d093      	beq.n	8006366 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006456:	e071      	b.n	800653c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006466:	d123      	bne.n	80064b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006476:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006480:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649c:	f043 0204 	orr.w	r2, r3, #4
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e067      	b.n	8006580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b6:	d041      	beq.n	800653c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b8:	f7ff f8ce 	bl	8005658 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d302      	bcc.n	80064ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d136      	bne.n	800653c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	0c1b      	lsrs	r3, r3, #16
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d10c      	bne.n	80064f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	43da      	mvns	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4013      	ands	r3, r2
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	bf14      	ite	ne
 80064ea:	2301      	movne	r3, #1
 80064ec:	2300      	moveq	r3, #0
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	e00b      	b.n	800650a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	43da      	mvns	r2, r3
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	4013      	ands	r3, r2
 80064fe:	b29b      	uxth	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	bf14      	ite	ne
 8006504:	2301      	movne	r3, #1
 8006506:	2300      	moveq	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d016      	beq.n	800653c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006528:	f043 0220 	orr.w	r2, r3, #32
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e021      	b.n	8006580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	0c1b      	lsrs	r3, r3, #16
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b01      	cmp	r3, #1
 8006544:	d10c      	bne.n	8006560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	43da      	mvns	r2, r3
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4013      	ands	r3, r2
 8006552:	b29b      	uxth	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	bf14      	ite	ne
 8006558:	2301      	movne	r3, #1
 800655a:	2300      	moveq	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	e00b      	b.n	8006578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	43da      	mvns	r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4013      	ands	r3, r2
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	bf14      	ite	ne
 8006572:	2301      	movne	r3, #1
 8006574:	2300      	moveq	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	f47f af6d 	bne.w	8006458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006594:	e034      	b.n	8006600 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 f886 	bl	80066a8 <I2C_IsAcknowledgeFailed>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e034      	b.n	8006610 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ac:	d028      	beq.n	8006600 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ae:	f7ff f853 	bl	8005658 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d302      	bcc.n	80065c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d11d      	bne.n	8006600 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ce:	2b80      	cmp	r3, #128	@ 0x80
 80065d0:	d016      	beq.n	8006600 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ec:	f043 0220 	orr.w	r2, r3, #32
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e007      	b.n	8006610 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660a:	2b80      	cmp	r3, #128	@ 0x80
 800660c:	d1c3      	bne.n	8006596 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006624:	e034      	b.n	8006690 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 f83e 	bl	80066a8 <I2C_IsAcknowledgeFailed>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e034      	b.n	80066a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663c:	d028      	beq.n	8006690 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800663e:	f7ff f80b 	bl	8005658 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	429a      	cmp	r2, r3
 800664c:	d302      	bcc.n	8006654 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d11d      	bne.n	8006690 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b04      	cmp	r3, #4
 8006660:	d016      	beq.n	8006690 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2220      	movs	r2, #32
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667c:	f043 0220 	orr.w	r2, r3, #32
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e007      	b.n	80066a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	f003 0304 	and.w	r3, r3, #4
 800669a:	2b04      	cmp	r3, #4
 800669c:	d1c3      	bne.n	8006626 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066be:	d11b      	bne.n	80066f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e4:	f043 0204 	orr.w	r2, r3, #4
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
	...

08006708 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e267      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d075      	beq.n	8006812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006726:	4b88      	ldr	r3, [pc, #544]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 030c 	and.w	r3, r3, #12
 800672e:	2b04      	cmp	r3, #4
 8006730:	d00c      	beq.n	800674c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006732:	4b85      	ldr	r3, [pc, #532]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800673a:	2b08      	cmp	r3, #8
 800673c:	d112      	bne.n	8006764 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800673e:	4b82      	ldr	r3, [pc, #520]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006746:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800674a:	d10b      	bne.n	8006764 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800674c:	4b7e      	ldr	r3, [pc, #504]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d05b      	beq.n	8006810 <HAL_RCC_OscConfig+0x108>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d157      	bne.n	8006810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e242      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800676c:	d106      	bne.n	800677c <HAL_RCC_OscConfig+0x74>
 800676e:	4b76      	ldr	r3, [pc, #472]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a75      	ldr	r2, [pc, #468]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 8006774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	e01d      	b.n	80067b8 <HAL_RCC_OscConfig+0xb0>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006784:	d10c      	bne.n	80067a0 <HAL_RCC_OscConfig+0x98>
 8006786:	4b70      	ldr	r3, [pc, #448]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a6f      	ldr	r2, [pc, #444]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 800678c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	4b6d      	ldr	r3, [pc, #436]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a6c      	ldr	r2, [pc, #432]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 8006798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	e00b      	b.n	80067b8 <HAL_RCC_OscConfig+0xb0>
 80067a0:	4b69      	ldr	r3, [pc, #420]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a68      	ldr	r2, [pc, #416]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 80067a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	4b66      	ldr	r3, [pc, #408]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a65      	ldr	r2, [pc, #404]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 80067b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d013      	beq.n	80067e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c0:	f7fe ff4a 	bl	8005658 <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067c8:	f7fe ff46 	bl	8005658 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b64      	cmp	r3, #100	@ 0x64
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e207      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067da:	4b5b      	ldr	r3, [pc, #364]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0f0      	beq.n	80067c8 <HAL_RCC_OscConfig+0xc0>
 80067e6:	e014      	b.n	8006812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e8:	f7fe ff36 	bl	8005658 <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067f0:	f7fe ff32 	bl	8005658 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b64      	cmp	r3, #100	@ 0x64
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e1f3      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006802:	4b51      	ldr	r3, [pc, #324]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f0      	bne.n	80067f0 <HAL_RCC_OscConfig+0xe8>
 800680e:	e000      	b.n	8006812 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d063      	beq.n	80068e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800681e:	4b4a      	ldr	r3, [pc, #296]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 030c 	and.w	r3, r3, #12
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00b      	beq.n	8006842 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800682a:	4b47      	ldr	r3, [pc, #284]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006832:	2b08      	cmp	r3, #8
 8006834:	d11c      	bne.n	8006870 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006836:	4b44      	ldr	r3, [pc, #272]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d116      	bne.n	8006870 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006842:	4b41      	ldr	r3, [pc, #260]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d005      	beq.n	800685a <HAL_RCC_OscConfig+0x152>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d001      	beq.n	800685a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e1c7      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800685a:	4b3b      	ldr	r3, [pc, #236]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	4937      	ldr	r1, [pc, #220]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 800686a:	4313      	orrs	r3, r2
 800686c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800686e:	e03a      	b.n	80068e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d020      	beq.n	80068ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006878:	4b34      	ldr	r3, [pc, #208]	@ (800694c <HAL_RCC_OscConfig+0x244>)
 800687a:	2201      	movs	r2, #1
 800687c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687e:	f7fe feeb 	bl	8005658 <HAL_GetTick>
 8006882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006884:	e008      	b.n	8006898 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006886:	f7fe fee7 	bl	8005658 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e1a8      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006898:	4b2b      	ldr	r3, [pc, #172]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0f0      	beq.n	8006886 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068a4:	4b28      	ldr	r3, [pc, #160]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	4925      	ldr	r1, [pc, #148]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	600b      	str	r3, [r1, #0]
 80068b8:	e015      	b.n	80068e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068ba:	4b24      	ldr	r3, [pc, #144]	@ (800694c <HAL_RCC_OscConfig+0x244>)
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c0:	f7fe feca 	bl	8005658 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068c8:	f7fe fec6 	bl	8005658 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e187      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068da:	4b1b      	ldr	r3, [pc, #108]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f0      	bne.n	80068c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d036      	beq.n	8006960 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d016      	beq.n	8006928 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068fa:	4b15      	ldr	r3, [pc, #84]	@ (8006950 <HAL_RCC_OscConfig+0x248>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006900:	f7fe feaa 	bl	8005658 <HAL_GetTick>
 8006904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006906:	e008      	b.n	800691a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006908:	f7fe fea6 	bl	8005658 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e167      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800691a:	4b0b      	ldr	r3, [pc, #44]	@ (8006948 <HAL_RCC_OscConfig+0x240>)
 800691c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0f0      	beq.n	8006908 <HAL_RCC_OscConfig+0x200>
 8006926:	e01b      	b.n	8006960 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006928:	4b09      	ldr	r3, [pc, #36]	@ (8006950 <HAL_RCC_OscConfig+0x248>)
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800692e:	f7fe fe93 	bl	8005658 <HAL_GetTick>
 8006932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006934:	e00e      	b.n	8006954 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006936:	f7fe fe8f 	bl	8005658 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d907      	bls.n	8006954 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e150      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
 8006948:	40023800 	.word	0x40023800
 800694c:	42470000 	.word	0x42470000
 8006950:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006954:	4b88      	ldr	r3, [pc, #544]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1ea      	bne.n	8006936 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 8097 	beq.w	8006a9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800696e:	2300      	movs	r3, #0
 8006970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006972:	4b81      	ldr	r3, [pc, #516]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10f      	bne.n	800699e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800697e:	2300      	movs	r3, #0
 8006980:	60bb      	str	r3, [r7, #8]
 8006982:	4b7d      	ldr	r3, [pc, #500]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006986:	4a7c      	ldr	r2, [pc, #496]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800698c:	6413      	str	r3, [r2, #64]	@ 0x40
 800698e:	4b7a      	ldr	r3, [pc, #488]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006996:	60bb      	str	r3, [r7, #8]
 8006998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800699a:	2301      	movs	r3, #1
 800699c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800699e:	4b77      	ldr	r3, [pc, #476]	@ (8006b7c <HAL_RCC_OscConfig+0x474>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d118      	bne.n	80069dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069aa:	4b74      	ldr	r3, [pc, #464]	@ (8006b7c <HAL_RCC_OscConfig+0x474>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a73      	ldr	r2, [pc, #460]	@ (8006b7c <HAL_RCC_OscConfig+0x474>)
 80069b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069b6:	f7fe fe4f 	bl	8005658 <HAL_GetTick>
 80069ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069bc:	e008      	b.n	80069d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069be:	f7fe fe4b 	bl	8005658 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e10c      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d0:	4b6a      	ldr	r3, [pc, #424]	@ (8006b7c <HAL_RCC_OscConfig+0x474>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0f0      	beq.n	80069be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d106      	bne.n	80069f2 <HAL_RCC_OscConfig+0x2ea>
 80069e4:	4b64      	ldr	r3, [pc, #400]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 80069e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e8:	4a63      	ldr	r2, [pc, #396]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 80069ea:	f043 0301 	orr.w	r3, r3, #1
 80069ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80069f0:	e01c      	b.n	8006a2c <HAL_RCC_OscConfig+0x324>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	2b05      	cmp	r3, #5
 80069f8:	d10c      	bne.n	8006a14 <HAL_RCC_OscConfig+0x30c>
 80069fa:	4b5f      	ldr	r3, [pc, #380]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 80069fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069fe:	4a5e      	ldr	r2, [pc, #376]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a00:	f043 0304 	orr.w	r3, r3, #4
 8006a04:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a06:	4b5c      	ldr	r3, [pc, #368]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0a:	4a5b      	ldr	r2, [pc, #364]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a0c:	f043 0301 	orr.w	r3, r3, #1
 8006a10:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a12:	e00b      	b.n	8006a2c <HAL_RCC_OscConfig+0x324>
 8006a14:	4b58      	ldr	r3, [pc, #352]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a18:	4a57      	ldr	r2, [pc, #348]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a1a:	f023 0301 	bic.w	r3, r3, #1
 8006a1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a20:	4b55      	ldr	r3, [pc, #340]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a24:	4a54      	ldr	r2, [pc, #336]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a26:	f023 0304 	bic.w	r3, r3, #4
 8006a2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d015      	beq.n	8006a60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a34:	f7fe fe10 	bl	8005658 <HAL_GetTick>
 8006a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a3a:	e00a      	b.n	8006a52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a3c:	f7fe fe0c 	bl	8005658 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e0cb      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a52:	4b49      	ldr	r3, [pc, #292]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0ee      	beq.n	8006a3c <HAL_RCC_OscConfig+0x334>
 8006a5e:	e014      	b.n	8006a8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a60:	f7fe fdfa 	bl	8005658 <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a66:	e00a      	b.n	8006a7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a68:	f7fe fdf6 	bl	8005658 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e0b5      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1ee      	bne.n	8006a68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d105      	bne.n	8006a9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a90:	4b39      	ldr	r3, [pc, #228]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a94:	4a38      	ldr	r2, [pc, #224]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 80a1 	beq.w	8006be8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006aa6:	4b34      	ldr	r3, [pc, #208]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 030c 	and.w	r3, r3, #12
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d05c      	beq.n	8006b6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d141      	bne.n	8006b3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aba:	4b31      	ldr	r3, [pc, #196]	@ (8006b80 <HAL_RCC_OscConfig+0x478>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac0:	f7fe fdca 	bl	8005658 <HAL_GetTick>
 8006ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ac8:	f7fe fdc6 	bl	8005658 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e087      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ada:	4b27      	ldr	r3, [pc, #156]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1f0      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	69da      	ldr	r2, [r3, #28]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af4:	019b      	lsls	r3, r3, #6
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afc:	085b      	lsrs	r3, r3, #1
 8006afe:	3b01      	subs	r3, #1
 8006b00:	041b      	lsls	r3, r3, #16
 8006b02:	431a      	orrs	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	061b      	lsls	r3, r3, #24
 8006b0a:	491b      	ldr	r1, [pc, #108]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b10:	4b1b      	ldr	r3, [pc, #108]	@ (8006b80 <HAL_RCC_OscConfig+0x478>)
 8006b12:	2201      	movs	r2, #1
 8006b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b16:	f7fe fd9f 	bl	8005658 <HAL_GetTick>
 8006b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b1c:	e008      	b.n	8006b30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b1e:	f7fe fd9b 	bl	8005658 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e05c      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b30:	4b11      	ldr	r3, [pc, #68]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0f0      	beq.n	8006b1e <HAL_RCC_OscConfig+0x416>
 8006b3c:	e054      	b.n	8006be8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b3e:	4b10      	ldr	r3, [pc, #64]	@ (8006b80 <HAL_RCC_OscConfig+0x478>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b44:	f7fe fd88 	bl	8005658 <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b4a:	e008      	b.n	8006b5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b4c:	f7fe fd84 	bl	8005658 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e045      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b5e:	4b06      	ldr	r3, [pc, #24]	@ (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1f0      	bne.n	8006b4c <HAL_RCC_OscConfig+0x444>
 8006b6a:	e03d      	b.n	8006be8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d107      	bne.n	8006b84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e038      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
 8006b78:	40023800 	.word	0x40023800
 8006b7c:	40007000 	.word	0x40007000
 8006b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b84:	4b1b      	ldr	r3, [pc, #108]	@ (8006bf4 <HAL_RCC_OscConfig+0x4ec>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d028      	beq.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d121      	bne.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d11a      	bne.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d111      	bne.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bca:	085b      	lsrs	r3, r3, #1
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d107      	bne.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d001      	beq.n	8006be8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e000      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	40023800 	.word	0x40023800

08006bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e0cc      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c0c:	4b68      	ldr	r3, [pc, #416]	@ (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d90c      	bls.n	8006c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c1a:	4b65      	ldr	r3, [pc, #404]	@ (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c22:	4b63      	ldr	r3, [pc, #396]	@ (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d001      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e0b8      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d020      	beq.n	8006c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d005      	beq.n	8006c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c4c:	4b59      	ldr	r3, [pc, #356]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	4a58      	ldr	r2, [pc, #352]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c64:	4b53      	ldr	r3, [pc, #332]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	4a52      	ldr	r2, [pc, #328]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c70:	4b50      	ldr	r3, [pc, #320]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	494d      	ldr	r1, [pc, #308]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d044      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d107      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c96:	4b47      	ldr	r3, [pc, #284]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d119      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e07f      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d003      	beq.n	8006cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d107      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e06f      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e067      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cd6:	4b37      	ldr	r3, [pc, #220]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f023 0203 	bic.w	r2, r3, #3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	4934      	ldr	r1, [pc, #208]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ce8:	f7fe fcb6 	bl	8005658 <HAL_GetTick>
 8006cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cee:	e00a      	b.n	8006d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cf0:	f7fe fcb2 	bl	8005658 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e04f      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d06:	4b2b      	ldr	r3, [pc, #172]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 020c 	and.w	r2, r3, #12
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d1eb      	bne.n	8006cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d18:	4b25      	ldr	r3, [pc, #148]	@ (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d20c      	bcs.n	8006d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d26:	4b22      	ldr	r3, [pc, #136]	@ (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d2e:	4b20      	ldr	r3, [pc, #128]	@ (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d001      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e032      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d4c:	4b19      	ldr	r3, [pc, #100]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	4916      	ldr	r1, [pc, #88]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0308 	and.w	r3, r3, #8
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d009      	beq.n	8006d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d6a:	4b12      	ldr	r3, [pc, #72]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	00db      	lsls	r3, r3, #3
 8006d78:	490e      	ldr	r1, [pc, #56]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d7e:	f000 f821 	bl	8006dc4 <HAL_RCC_GetSysClockFreq>
 8006d82:	4602      	mov	r2, r0
 8006d84:	4b0b      	ldr	r3, [pc, #44]	@ (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	091b      	lsrs	r3, r3, #4
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	490a      	ldr	r1, [pc, #40]	@ (8006db8 <HAL_RCC_ClockConfig+0x1c0>)
 8006d90:	5ccb      	ldrb	r3, [r1, r3]
 8006d92:	fa22 f303 	lsr.w	r3, r2, r3
 8006d96:	4a09      	ldr	r2, [pc, #36]	@ (8006dbc <HAL_RCC_ClockConfig+0x1c4>)
 8006d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d9a:	4b09      	ldr	r3, [pc, #36]	@ (8006dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fe fc16 	bl	80055d0 <HAL_InitTick>

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	40023c00 	.word	0x40023c00
 8006db4:	40023800 	.word	0x40023800
 8006db8:	0800f4a4 	.word	0x0800f4a4
 8006dbc:	200000cc 	.word	0x200000cc
 8006dc0:	200000d0 	.word	0x200000d0

08006dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dc8:	b094      	sub	sp, #80	@ 0x50
 8006dca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ddc:	4b79      	ldr	r3, [pc, #484]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 030c 	and.w	r3, r3, #12
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d00d      	beq.n	8006e04 <HAL_RCC_GetSysClockFreq+0x40>
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	f200 80e1 	bhi.w	8006fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <HAL_RCC_GetSysClockFreq+0x34>
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d003      	beq.n	8006dfe <HAL_RCC_GetSysClockFreq+0x3a>
 8006df6:	e0db      	b.n	8006fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006df8:	4b73      	ldr	r3, [pc, #460]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006dfc:	e0db      	b.n	8006fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dfe:	4b73      	ldr	r3, [pc, #460]	@ (8006fcc <HAL_RCC_GetSysClockFreq+0x208>)
 8006e00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e02:	e0d8      	b.n	8006fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e04:	4b6f      	ldr	r3, [pc, #444]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e0e:	4b6d      	ldr	r3, [pc, #436]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d063      	beq.n	8006ee2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e1a:	4b6a      	ldr	r3, [pc, #424]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	099b      	lsrs	r3, r3, #6
 8006e20:	2200      	movs	r2, #0
 8006e22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e2e:	2300      	movs	r3, #0
 8006e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006e36:	4622      	mov	r2, r4
 8006e38:	462b      	mov	r3, r5
 8006e3a:	f04f 0000 	mov.w	r0, #0
 8006e3e:	f04f 0100 	mov.w	r1, #0
 8006e42:	0159      	lsls	r1, r3, #5
 8006e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e48:	0150      	lsls	r0, r2, #5
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4621      	mov	r1, r4
 8006e50:	1a51      	subs	r1, r2, r1
 8006e52:	6139      	str	r1, [r7, #16]
 8006e54:	4629      	mov	r1, r5
 8006e56:	eb63 0301 	sbc.w	r3, r3, r1
 8006e5a:	617b      	str	r3, [r7, #20]
 8006e5c:	f04f 0200 	mov.w	r2, #0
 8006e60:	f04f 0300 	mov.w	r3, #0
 8006e64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e68:	4659      	mov	r1, fp
 8006e6a:	018b      	lsls	r3, r1, #6
 8006e6c:	4651      	mov	r1, sl
 8006e6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e72:	4651      	mov	r1, sl
 8006e74:	018a      	lsls	r2, r1, #6
 8006e76:	4651      	mov	r1, sl
 8006e78:	ebb2 0801 	subs.w	r8, r2, r1
 8006e7c:	4659      	mov	r1, fp
 8006e7e:	eb63 0901 	sbc.w	r9, r3, r1
 8006e82:	f04f 0200 	mov.w	r2, #0
 8006e86:	f04f 0300 	mov.w	r3, #0
 8006e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e96:	4690      	mov	r8, r2
 8006e98:	4699      	mov	r9, r3
 8006e9a:	4623      	mov	r3, r4
 8006e9c:	eb18 0303 	adds.w	r3, r8, r3
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	462b      	mov	r3, r5
 8006ea4:	eb49 0303 	adc.w	r3, r9, r3
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	024b      	lsls	r3, r1, #9
 8006eba:	4621      	mov	r1, r4
 8006ebc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	024a      	lsls	r2, r1, #9
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eca:	2200      	movs	r2, #0
 8006ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ece:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ed0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ed4:	f7f9 fed8 	bl	8000c88 <__aeabi_uldivmod>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	4613      	mov	r3, r2
 8006ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ee0:	e058      	b.n	8006f94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ee2:	4b38      	ldr	r3, [pc, #224]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	099b      	lsrs	r3, r3, #6
 8006ee8:	2200      	movs	r2, #0
 8006eea:	4618      	mov	r0, r3
 8006eec:	4611      	mov	r1, r2
 8006eee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ef2:	623b      	str	r3, [r7, #32]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ef8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006efc:	4642      	mov	r2, r8
 8006efe:	464b      	mov	r3, r9
 8006f00:	f04f 0000 	mov.w	r0, #0
 8006f04:	f04f 0100 	mov.w	r1, #0
 8006f08:	0159      	lsls	r1, r3, #5
 8006f0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f0e:	0150      	lsls	r0, r2, #5
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4641      	mov	r1, r8
 8006f16:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	f04f 0300 	mov.w	r3, #0
 8006f28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f34:	ebb2 040a 	subs.w	r4, r2, sl
 8006f38:	eb63 050b 	sbc.w	r5, r3, fp
 8006f3c:	f04f 0200 	mov.w	r2, #0
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	00eb      	lsls	r3, r5, #3
 8006f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f4a:	00e2      	lsls	r2, r4, #3
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	461d      	mov	r5, r3
 8006f50:	4643      	mov	r3, r8
 8006f52:	18e3      	adds	r3, r4, r3
 8006f54:	603b      	str	r3, [r7, #0]
 8006f56:	464b      	mov	r3, r9
 8006f58:	eb45 0303 	adc.w	r3, r5, r3
 8006f5c:	607b      	str	r3, [r7, #4]
 8006f5e:	f04f 0200 	mov.w	r2, #0
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	028b      	lsls	r3, r1, #10
 8006f6e:	4621      	mov	r1, r4
 8006f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f74:	4621      	mov	r1, r4
 8006f76:	028a      	lsls	r2, r1, #10
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f7e:	2200      	movs	r2, #0
 8006f80:	61bb      	str	r3, [r7, #24]
 8006f82:	61fa      	str	r2, [r7, #28]
 8006f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f88:	f7f9 fe7e 	bl	8000c88 <__aeabi_uldivmod>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4613      	mov	r3, r2
 8006f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f94:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	0c1b      	lsrs	r3, r3, #16
 8006f9a:	f003 0303 	and.w	r3, r3, #3
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006fa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fae:	e002      	b.n	8006fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fb0:	4b05      	ldr	r3, [pc, #20]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3750      	adds	r7, #80	@ 0x50
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fc2:	bf00      	nop
 8006fc4:	40023800 	.word	0x40023800
 8006fc8:	00f42400 	.word	0x00f42400
 8006fcc:	007a1200 	.word	0x007a1200

08006fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fd4:	4b03      	ldr	r3, [pc, #12]	@ (8006fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	200000cc 	.word	0x200000cc

08006fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006fec:	f7ff fff0 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	4b05      	ldr	r3, [pc, #20]	@ (8007008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	0a9b      	lsrs	r3, r3, #10
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	4903      	ldr	r1, [pc, #12]	@ (800700c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ffe:	5ccb      	ldrb	r3, [r1, r3]
 8007000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007004:	4618      	mov	r0, r3
 8007006:	bd80      	pop	{r7, pc}
 8007008:	40023800 	.word	0x40023800
 800700c:	0800f4b4 	.word	0x0800f4b4

08007010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007014:	f7ff ffdc 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8007018:	4602      	mov	r2, r0
 800701a:	4b05      	ldr	r3, [pc, #20]	@ (8007030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	0b5b      	lsrs	r3, r3, #13
 8007020:	f003 0307 	and.w	r3, r3, #7
 8007024:	4903      	ldr	r1, [pc, #12]	@ (8007034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007026:	5ccb      	ldrb	r3, [r1, r3]
 8007028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800702c:	4618      	mov	r0, r3
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40023800 	.word	0x40023800
 8007034:	0800f4b4 	.word	0x0800f4b4

08007038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e041      	b.n	80070ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7fd ff30 	bl	8004ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3304      	adds	r3, #4
 8007074:	4619      	mov	r1, r3
 8007076:	4610      	mov	r0, r2
 8007078:	f000 fc48 	bl	800790c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e041      	b.n	800716c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d106      	bne.n	8007102 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f839 	bl	8007174 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2202      	movs	r2, #2
 8007106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3304      	adds	r3, #4
 8007112:	4619      	mov	r1, r3
 8007114:	4610      	mov	r0, r2
 8007116:	f000 fbf9 	bl	800790c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d109      	bne.n	80071b0 <HAL_TIM_PWM_Start_IT+0x28>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	bf14      	ite	ne
 80071a8:	2301      	movne	r3, #1
 80071aa:	2300      	moveq	r3, #0
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	e022      	b.n	80071f6 <HAL_TIM_PWM_Start_IT+0x6e>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	d109      	bne.n	80071ca <HAL_TIM_PWM_Start_IT+0x42>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b01      	cmp	r3, #1
 80071c0:	bf14      	ite	ne
 80071c2:	2301      	movne	r3, #1
 80071c4:	2300      	moveq	r3, #0
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	e015      	b.n	80071f6 <HAL_TIM_PWM_Start_IT+0x6e>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d109      	bne.n	80071e4 <HAL_TIM_PWM_Start_IT+0x5c>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b01      	cmp	r3, #1
 80071da:	bf14      	ite	ne
 80071dc:	2301      	movne	r3, #1
 80071de:	2300      	moveq	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	e008      	b.n	80071f6 <HAL_TIM_PWM_Start_IT+0x6e>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	bf14      	ite	ne
 80071f0:	2301      	movne	r3, #1
 80071f2:	2300      	moveq	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e0c7      	b.n	800738e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d104      	bne.n	800720e <HAL_TIM_PWM_Start_IT+0x86>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800720c:	e013      	b.n	8007236 <HAL_TIM_PWM_Start_IT+0xae>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b04      	cmp	r3, #4
 8007212:	d104      	bne.n	800721e <HAL_TIM_PWM_Start_IT+0x96>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800721c:	e00b      	b.n	8007236 <HAL_TIM_PWM_Start_IT+0xae>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b08      	cmp	r3, #8
 8007222:	d104      	bne.n	800722e <HAL_TIM_PWM_Start_IT+0xa6>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800722c:	e003      	b.n	8007236 <HAL_TIM_PWM_Start_IT+0xae>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2202      	movs	r2, #2
 8007232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b0c      	cmp	r3, #12
 800723a:	d841      	bhi.n	80072c0 <HAL_TIM_PWM_Start_IT+0x138>
 800723c:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <HAL_TIM_PWM_Start_IT+0xbc>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	08007279 	.word	0x08007279
 8007248:	080072c1 	.word	0x080072c1
 800724c:	080072c1 	.word	0x080072c1
 8007250:	080072c1 	.word	0x080072c1
 8007254:	0800728b 	.word	0x0800728b
 8007258:	080072c1 	.word	0x080072c1
 800725c:	080072c1 	.word	0x080072c1
 8007260:	080072c1 	.word	0x080072c1
 8007264:	0800729d 	.word	0x0800729d
 8007268:	080072c1 	.word	0x080072c1
 800726c:	080072c1 	.word	0x080072c1
 8007270:	080072c1 	.word	0x080072c1
 8007274:	080072af 	.word	0x080072af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f042 0202 	orr.w	r2, r2, #2
 8007286:	60da      	str	r2, [r3, #12]
      break;
 8007288:	e01d      	b.n	80072c6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f042 0204 	orr.w	r2, r2, #4
 8007298:	60da      	str	r2, [r3, #12]
      break;
 800729a:	e014      	b.n	80072c6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0208 	orr.w	r2, r2, #8
 80072aa:	60da      	str	r2, [r3, #12]
      break;
 80072ac:	e00b      	b.n	80072c6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68da      	ldr	r2, [r3, #12]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f042 0210 	orr.w	r2, r2, #16
 80072bc:	60da      	str	r2, [r3, #12]
      break;
 80072be:	e002      	b.n	80072c6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	73fb      	strb	r3, [r7, #15]
      break;
 80072c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d15f      	bne.n	800738c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2201      	movs	r2, #1
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 fe0f 	bl	8007ef8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a2e      	ldr	r2, [pc, #184]	@ (8007398 <HAL_TIM_PWM_Start_IT+0x210>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d004      	beq.n	80072ee <HAL_TIM_PWM_Start_IT+0x166>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a2c      	ldr	r2, [pc, #176]	@ (800739c <HAL_TIM_PWM_Start_IT+0x214>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d101      	bne.n	80072f2 <HAL_TIM_PWM_Start_IT+0x16a>
 80072ee:	2301      	movs	r3, #1
 80072f0:	e000      	b.n	80072f4 <HAL_TIM_PWM_Start_IT+0x16c>
 80072f2:	2300      	movs	r3, #0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d007      	beq.n	8007308 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007306:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a22      	ldr	r2, [pc, #136]	@ (8007398 <HAL_TIM_PWM_Start_IT+0x210>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d022      	beq.n	8007358 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800731a:	d01d      	beq.n	8007358 <HAL_TIM_PWM_Start_IT+0x1d0>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a1f      	ldr	r2, [pc, #124]	@ (80073a0 <HAL_TIM_PWM_Start_IT+0x218>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d018      	beq.n	8007358 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a1e      	ldr	r2, [pc, #120]	@ (80073a4 <HAL_TIM_PWM_Start_IT+0x21c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d013      	beq.n	8007358 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a1c      	ldr	r2, [pc, #112]	@ (80073a8 <HAL_TIM_PWM_Start_IT+0x220>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00e      	beq.n	8007358 <HAL_TIM_PWM_Start_IT+0x1d0>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a17      	ldr	r2, [pc, #92]	@ (800739c <HAL_TIM_PWM_Start_IT+0x214>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d009      	beq.n	8007358 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a18      	ldr	r2, [pc, #96]	@ (80073ac <HAL_TIM_PWM_Start_IT+0x224>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d004      	beq.n	8007358 <HAL_TIM_PWM_Start_IT+0x1d0>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a17      	ldr	r2, [pc, #92]	@ (80073b0 <HAL_TIM_PWM_Start_IT+0x228>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d111      	bne.n	800737c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b06      	cmp	r3, #6
 8007368:	d010      	beq.n	800738c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0201 	orr.w	r2, r2, #1
 8007378:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800737a:	e007      	b.n	800738c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0201 	orr.w	r2, r2, #1
 800738a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	40010000 	.word	0x40010000
 800739c:	40010400 	.word	0x40010400
 80073a0:	40000400 	.word	0x40000400
 80073a4:	40000800 	.word	0x40000800
 80073a8:	40000c00 	.word	0x40000c00
 80073ac:	40014000 	.word	0x40014000
 80073b0:	40001800 	.word	0x40001800

080073b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d020      	beq.n	8007418 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01b      	beq.n	8007418 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f06f 0202 	mvn.w	r2, #2
 80073e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fa65 	bl	80078ce <HAL_TIM_IC_CaptureCallback>
 8007404:	e005      	b.n	8007412 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa57 	bl	80078ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fa68 	bl	80078e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f003 0304 	and.w	r3, r3, #4
 800741e:	2b00      	cmp	r3, #0
 8007420:	d020      	beq.n	8007464 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f003 0304 	and.w	r3, r3, #4
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01b      	beq.n	8007464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f06f 0204 	mvn.w	r2, #4
 8007434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2202      	movs	r2, #2
 800743a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fa3f 	bl	80078ce <HAL_TIM_IC_CaptureCallback>
 8007450:	e005      	b.n	800745e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa31 	bl	80078ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fa42 	bl	80078e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f003 0308 	and.w	r3, r3, #8
 800746a:	2b00      	cmp	r3, #0
 800746c:	d020      	beq.n	80074b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b00      	cmp	r3, #0
 8007476:	d01b      	beq.n	80074b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f06f 0208 	mvn.w	r2, #8
 8007480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2204      	movs	r2, #4
 8007486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	f003 0303 	and.w	r3, r3, #3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fa19 	bl	80078ce <HAL_TIM_IC_CaptureCallback>
 800749c:	e005      	b.n	80074aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fa0b 	bl	80078ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fa1c 	bl	80078e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f003 0310 	and.w	r3, r3, #16
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d020      	beq.n	80074fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f003 0310 	and.w	r3, r3, #16
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01b      	beq.n	80074fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f06f 0210 	mvn.w	r2, #16
 80074cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2208      	movs	r2, #8
 80074d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f9f3 	bl	80078ce <HAL_TIM_IC_CaptureCallback>
 80074e8:	e005      	b.n	80074f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f9e5 	bl	80078ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f9f6 	bl	80078e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00c      	beq.n	8007520 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	d007      	beq.n	8007520 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f06f 0201 	mvn.w	r2, #1
 8007518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f9c3 	bl	80078a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00c      	beq.n	8007544 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800753c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fdd8 	bl	80080f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00c      	beq.n	8007568 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007554:	2b00      	cmp	r3, #0
 8007556:	d007      	beq.n	8007568 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f9c7 	bl	80078f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f003 0320 	and.w	r3, r3, #32
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00c      	beq.n	800758c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b00      	cmp	r3, #0
 800757a:	d007      	beq.n	800758c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f06f 0220 	mvn.w	r2, #32
 8007584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fdaa 	bl	80080e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800758c:	bf00      	nop
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075ae:	2302      	movs	r3, #2
 80075b0:	e0ae      	b.n	8007710 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b0c      	cmp	r3, #12
 80075be:	f200 809f 	bhi.w	8007700 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80075c2:	a201      	add	r2, pc, #4	@ (adr r2, 80075c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c8:	080075fd 	.word	0x080075fd
 80075cc:	08007701 	.word	0x08007701
 80075d0:	08007701 	.word	0x08007701
 80075d4:	08007701 	.word	0x08007701
 80075d8:	0800763d 	.word	0x0800763d
 80075dc:	08007701 	.word	0x08007701
 80075e0:	08007701 	.word	0x08007701
 80075e4:	08007701 	.word	0x08007701
 80075e8:	0800767f 	.word	0x0800767f
 80075ec:	08007701 	.word	0x08007701
 80075f0:	08007701 	.word	0x08007701
 80075f4:	08007701 	.word	0x08007701
 80075f8:	080076bf 	.word	0x080076bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68b9      	ldr	r1, [r7, #8]
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fa2e 	bl	8007a64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	699a      	ldr	r2, [r3, #24]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f042 0208 	orr.w	r2, r2, #8
 8007616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 0204 	bic.w	r2, r2, #4
 8007626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6999      	ldr	r1, [r3, #24]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	691a      	ldr	r2, [r3, #16]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	619a      	str	r2, [r3, #24]
      break;
 800763a:	e064      	b.n	8007706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fa7e 	bl	8007b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	699a      	ldr	r2, [r3, #24]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6999      	ldr	r1, [r3, #24]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	021a      	lsls	r2, r3, #8
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	619a      	str	r2, [r3, #24]
      break;
 800767c:	e043      	b.n	8007706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68b9      	ldr	r1, [r7, #8]
 8007684:	4618      	mov	r0, r3
 8007686:	f000 fad3 	bl	8007c30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69da      	ldr	r2, [r3, #28]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0208 	orr.w	r2, r2, #8
 8007698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69da      	ldr	r2, [r3, #28]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 0204 	bic.w	r2, r2, #4
 80076a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69d9      	ldr	r1, [r3, #28]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	61da      	str	r2, [r3, #28]
      break;
 80076bc:	e023      	b.n	8007706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68b9      	ldr	r1, [r7, #8]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 fb27 	bl	8007d18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69da      	ldr	r2, [r3, #28]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69d9      	ldr	r1, [r3, #28]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	021a      	lsls	r2, r3, #8
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	61da      	str	r2, [r3, #28]
      break;
 80076fe:	e002      	b.n	8007706 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]
      break;
 8007704:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800770e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800772c:	2b01      	cmp	r3, #1
 800772e:	d101      	bne.n	8007734 <HAL_TIM_ConfigClockSource+0x1c>
 8007730:	2302      	movs	r3, #2
 8007732:	e0b4      	b.n	800789e <HAL_TIM_ConfigClockSource+0x186>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800775a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800776c:	d03e      	beq.n	80077ec <HAL_TIM_ConfigClockSource+0xd4>
 800776e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007772:	f200 8087 	bhi.w	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 8007776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800777a:	f000 8086 	beq.w	800788a <HAL_TIM_ConfigClockSource+0x172>
 800777e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007782:	d87f      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 8007784:	2b70      	cmp	r3, #112	@ 0x70
 8007786:	d01a      	beq.n	80077be <HAL_TIM_ConfigClockSource+0xa6>
 8007788:	2b70      	cmp	r3, #112	@ 0x70
 800778a:	d87b      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 800778c:	2b60      	cmp	r3, #96	@ 0x60
 800778e:	d050      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0x11a>
 8007790:	2b60      	cmp	r3, #96	@ 0x60
 8007792:	d877      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 8007794:	2b50      	cmp	r3, #80	@ 0x50
 8007796:	d03c      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0xfa>
 8007798:	2b50      	cmp	r3, #80	@ 0x50
 800779a:	d873      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 800779c:	2b40      	cmp	r3, #64	@ 0x40
 800779e:	d058      	beq.n	8007852 <HAL_TIM_ConfigClockSource+0x13a>
 80077a0:	2b40      	cmp	r3, #64	@ 0x40
 80077a2:	d86f      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 80077a4:	2b30      	cmp	r3, #48	@ 0x30
 80077a6:	d064      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x15a>
 80077a8:	2b30      	cmp	r3, #48	@ 0x30
 80077aa:	d86b      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 80077ac:	2b20      	cmp	r3, #32
 80077ae:	d060      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x15a>
 80077b0:	2b20      	cmp	r3, #32
 80077b2:	d867      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d05c      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x15a>
 80077b8:	2b10      	cmp	r3, #16
 80077ba:	d05a      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x15a>
 80077bc:	e062      	b.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077ce:	f000 fb73 	bl	8007eb8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80077e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	609a      	str	r2, [r3, #8]
      break;
 80077ea:	e04f      	b.n	800788c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077fc:	f000 fb5c 	bl	8007eb8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689a      	ldr	r2, [r3, #8]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800780e:	609a      	str	r2, [r3, #8]
      break;
 8007810:	e03c      	b.n	800788c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800781e:	461a      	mov	r2, r3
 8007820:	f000 fad0 	bl	8007dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2150      	movs	r1, #80	@ 0x50
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fb29 	bl	8007e82 <TIM_ITRx_SetConfig>
      break;
 8007830:	e02c      	b.n	800788c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800783e:	461a      	mov	r2, r3
 8007840:	f000 faef 	bl	8007e22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2160      	movs	r1, #96	@ 0x60
 800784a:	4618      	mov	r0, r3
 800784c:	f000 fb19 	bl	8007e82 <TIM_ITRx_SetConfig>
      break;
 8007850:	e01c      	b.n	800788c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800785e:	461a      	mov	r2, r3
 8007860:	f000 fab0 	bl	8007dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2140      	movs	r1, #64	@ 0x40
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fb09 	bl	8007e82 <TIM_ITRx_SetConfig>
      break;
 8007870:	e00c      	b.n	800788c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4619      	mov	r1, r3
 800787c:	4610      	mov	r0, r2
 800787e:	f000 fb00 	bl	8007e82 <TIM_ITRx_SetConfig>
      break;
 8007882:	e003      	b.n	800788c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	73fb      	strb	r3, [r7, #15]
      break;
 8007888:	e000      	b.n	800788c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800788a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800789c:	7bfb      	ldrb	r3, [r7, #15]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
	...

0800790c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a46      	ldr	r2, [pc, #280]	@ (8007a38 <TIM_Base_SetConfig+0x12c>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d013      	beq.n	800794c <TIM_Base_SetConfig+0x40>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800792a:	d00f      	beq.n	800794c <TIM_Base_SetConfig+0x40>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a43      	ldr	r2, [pc, #268]	@ (8007a3c <TIM_Base_SetConfig+0x130>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d00b      	beq.n	800794c <TIM_Base_SetConfig+0x40>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a42      	ldr	r2, [pc, #264]	@ (8007a40 <TIM_Base_SetConfig+0x134>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d007      	beq.n	800794c <TIM_Base_SetConfig+0x40>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a41      	ldr	r2, [pc, #260]	@ (8007a44 <TIM_Base_SetConfig+0x138>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d003      	beq.n	800794c <TIM_Base_SetConfig+0x40>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a40      	ldr	r2, [pc, #256]	@ (8007a48 <TIM_Base_SetConfig+0x13c>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d108      	bne.n	800795e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4313      	orrs	r3, r2
 800795c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a35      	ldr	r2, [pc, #212]	@ (8007a38 <TIM_Base_SetConfig+0x12c>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d02b      	beq.n	80079be <TIM_Base_SetConfig+0xb2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800796c:	d027      	beq.n	80079be <TIM_Base_SetConfig+0xb2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a32      	ldr	r2, [pc, #200]	@ (8007a3c <TIM_Base_SetConfig+0x130>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d023      	beq.n	80079be <TIM_Base_SetConfig+0xb2>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a31      	ldr	r2, [pc, #196]	@ (8007a40 <TIM_Base_SetConfig+0x134>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d01f      	beq.n	80079be <TIM_Base_SetConfig+0xb2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a30      	ldr	r2, [pc, #192]	@ (8007a44 <TIM_Base_SetConfig+0x138>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d01b      	beq.n	80079be <TIM_Base_SetConfig+0xb2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a2f      	ldr	r2, [pc, #188]	@ (8007a48 <TIM_Base_SetConfig+0x13c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d017      	beq.n	80079be <TIM_Base_SetConfig+0xb2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a2e      	ldr	r2, [pc, #184]	@ (8007a4c <TIM_Base_SetConfig+0x140>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d013      	beq.n	80079be <TIM_Base_SetConfig+0xb2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a2d      	ldr	r2, [pc, #180]	@ (8007a50 <TIM_Base_SetConfig+0x144>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d00f      	beq.n	80079be <TIM_Base_SetConfig+0xb2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a2c      	ldr	r2, [pc, #176]	@ (8007a54 <TIM_Base_SetConfig+0x148>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d00b      	beq.n	80079be <TIM_Base_SetConfig+0xb2>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a2b      	ldr	r2, [pc, #172]	@ (8007a58 <TIM_Base_SetConfig+0x14c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d007      	beq.n	80079be <TIM_Base_SetConfig+0xb2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a2a      	ldr	r2, [pc, #168]	@ (8007a5c <TIM_Base_SetConfig+0x150>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d003      	beq.n	80079be <TIM_Base_SetConfig+0xb2>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a29      	ldr	r2, [pc, #164]	@ (8007a60 <TIM_Base_SetConfig+0x154>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d108      	bne.n	80079d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	4313      	orrs	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a10      	ldr	r2, [pc, #64]	@ (8007a38 <TIM_Base_SetConfig+0x12c>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d003      	beq.n	8007a04 <TIM_Base_SetConfig+0xf8>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a12      	ldr	r2, [pc, #72]	@ (8007a48 <TIM_Base_SetConfig+0x13c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d103      	bne.n	8007a0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	691a      	ldr	r2, [r3, #16]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d105      	bne.n	8007a2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f023 0201 	bic.w	r2, r3, #1
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	611a      	str	r2, [r3, #16]
  }
}
 8007a2a:	bf00      	nop
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	40010000 	.word	0x40010000
 8007a3c:	40000400 	.word	0x40000400
 8007a40:	40000800 	.word	0x40000800
 8007a44:	40000c00 	.word	0x40000c00
 8007a48:	40010400 	.word	0x40010400
 8007a4c:	40014000 	.word	0x40014000
 8007a50:	40014400 	.word	0x40014400
 8007a54:	40014800 	.word	0x40014800
 8007a58:	40001800 	.word	0x40001800
 8007a5c:	40001c00 	.word	0x40001c00
 8007a60:	40002000 	.word	0x40002000

08007a64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	f023 0201 	bic.w	r2, r3, #1
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 0303 	bic.w	r3, r3, #3
 8007a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f023 0302 	bic.w	r3, r3, #2
 8007aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a20      	ldr	r2, [pc, #128]	@ (8007b3c <TIM_OC1_SetConfig+0xd8>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d003      	beq.n	8007ac8 <TIM_OC1_SetConfig+0x64>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8007b40 <TIM_OC1_SetConfig+0xdc>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d10c      	bne.n	8007ae2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f023 0308 	bic.w	r3, r3, #8
 8007ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f023 0304 	bic.w	r3, r3, #4
 8007ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a15      	ldr	r2, [pc, #84]	@ (8007b3c <TIM_OC1_SetConfig+0xd8>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d003      	beq.n	8007af2 <TIM_OC1_SetConfig+0x8e>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a14      	ldr	r2, [pc, #80]	@ (8007b40 <TIM_OC1_SetConfig+0xdc>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d111      	bne.n	8007b16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	621a      	str	r2, [r3, #32]
}
 8007b30:	bf00      	nop
 8007b32:	371c      	adds	r7, #28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	40010000 	.word	0x40010000
 8007b40:	40010400 	.word	0x40010400

08007b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	f023 0210 	bic.w	r2, r3, #16
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	021b      	lsls	r3, r3, #8
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f023 0320 	bic.w	r3, r3, #32
 8007b8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	011b      	lsls	r3, r3, #4
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a22      	ldr	r2, [pc, #136]	@ (8007c28 <TIM_OC2_SetConfig+0xe4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d003      	beq.n	8007bac <TIM_OC2_SetConfig+0x68>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a21      	ldr	r2, [pc, #132]	@ (8007c2c <TIM_OC2_SetConfig+0xe8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d10d      	bne.n	8007bc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	011b      	lsls	r3, r3, #4
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a17      	ldr	r2, [pc, #92]	@ (8007c28 <TIM_OC2_SetConfig+0xe4>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d003      	beq.n	8007bd8 <TIM_OC2_SetConfig+0x94>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a16      	ldr	r2, [pc, #88]	@ (8007c2c <TIM_OC2_SetConfig+0xe8>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d113      	bne.n	8007c00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	621a      	str	r2, [r3, #32]
}
 8007c1a:	bf00      	nop
 8007c1c:	371c      	adds	r7, #28
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	40010000 	.word	0x40010000
 8007c2c:	40010400 	.word	0x40010400

08007c30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 0303 	bic.w	r3, r3, #3
 8007c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	021b      	lsls	r3, r3, #8
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a21      	ldr	r2, [pc, #132]	@ (8007d10 <TIM_OC3_SetConfig+0xe0>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d003      	beq.n	8007c96 <TIM_OC3_SetConfig+0x66>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a20      	ldr	r2, [pc, #128]	@ (8007d14 <TIM_OC3_SetConfig+0xe4>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d10d      	bne.n	8007cb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	021b      	lsls	r3, r3, #8
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a16      	ldr	r2, [pc, #88]	@ (8007d10 <TIM_OC3_SetConfig+0xe0>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d003      	beq.n	8007cc2 <TIM_OC3_SetConfig+0x92>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a15      	ldr	r2, [pc, #84]	@ (8007d14 <TIM_OC3_SetConfig+0xe4>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d113      	bne.n	8007cea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	011b      	lsls	r3, r3, #4
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	621a      	str	r2, [r3, #32]
}
 8007d04:	bf00      	nop
 8007d06:	371c      	adds	r7, #28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	40010000 	.word	0x40010000
 8007d14:	40010400 	.word	0x40010400

08007d18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	021b      	lsls	r3, r3, #8
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	031b      	lsls	r3, r3, #12
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a12      	ldr	r2, [pc, #72]	@ (8007dbc <TIM_OC4_SetConfig+0xa4>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d003      	beq.n	8007d80 <TIM_OC4_SetConfig+0x68>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a11      	ldr	r2, [pc, #68]	@ (8007dc0 <TIM_OC4_SetConfig+0xa8>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d109      	bne.n	8007d94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	019b      	lsls	r3, r3, #6
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	621a      	str	r2, [r3, #32]
}
 8007dae:	bf00      	nop
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	40010000 	.word	0x40010000
 8007dc0:	40010400 	.word	0x40010400

08007dc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6a1b      	ldr	r3, [r3, #32]
 8007dd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	f023 0201 	bic.w	r2, r3, #1
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	011b      	lsls	r3, r3, #4
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f023 030a 	bic.w	r3, r3, #10
 8007e00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	621a      	str	r2, [r3, #32]
}
 8007e16:	bf00      	nop
 8007e18:	371c      	adds	r7, #28
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b087      	sub	sp, #28
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	f023 0210 	bic.w	r2, r3, #16
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	031b      	lsls	r3, r3, #12
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	621a      	str	r2, [r3, #32]
}
 8007e76:	bf00      	nop
 8007e78:	371c      	adds	r7, #28
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b085      	sub	sp, #20
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	f043 0307 	orr.w	r3, r3, #7
 8007ea4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	609a      	str	r2, [r3, #8]
}
 8007eac:	bf00      	nop
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b087      	sub	sp, #28
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
 8007ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ed2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	021a      	lsls	r2, r3, #8
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	431a      	orrs	r2, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	609a      	str	r2, [r3, #8]
}
 8007eec:	bf00      	nop
 8007eee:	371c      	adds	r7, #28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	f003 031f 	and.w	r3, r3, #31
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6a1a      	ldr	r2, [r3, #32]
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	43db      	mvns	r3, r3
 8007f1a:	401a      	ands	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6a1a      	ldr	r2, [r3, #32]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f003 031f 	and.w	r3, r3, #31
 8007f2a:	6879      	ldr	r1, [r7, #4]
 8007f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f30:	431a      	orrs	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	621a      	str	r2, [r3, #32]
}
 8007f36:	bf00      	nop
 8007f38:	371c      	adds	r7, #28
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
	...

08007f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d101      	bne.n	8007f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e05a      	b.n	8008012 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a21      	ldr	r2, [pc, #132]	@ (8008020 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d022      	beq.n	8007fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fa8:	d01d      	beq.n	8007fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a1d      	ldr	r2, [pc, #116]	@ (8008024 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d018      	beq.n	8007fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8008028 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d013      	beq.n	8007fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800802c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d00e      	beq.n	8007fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a18      	ldr	r2, [pc, #96]	@ (8008030 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d009      	beq.n	8007fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a17      	ldr	r2, [pc, #92]	@ (8008034 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d004      	beq.n	8007fe6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a15      	ldr	r2, [pc, #84]	@ (8008038 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d10c      	bne.n	8008000 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	40010000 	.word	0x40010000
 8008024:	40000400 	.word	0x40000400
 8008028:	40000800 	.word	0x40000800
 800802c:	40000c00 	.word	0x40000c00
 8008030:	40010400 	.word	0x40010400
 8008034:	40014000 	.word	0x40014000
 8008038:	40001800 	.word	0x40001800

0800803c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008050:	2b01      	cmp	r3, #1
 8008052:	d101      	bne.n	8008058 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008054:	2302      	movs	r3, #2
 8008056:	e03d      	b.n	80080d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	4313      	orrs	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	4313      	orrs	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	4313      	orrs	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e042      	b.n	80081a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7fc ffb4 	bl	800509c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2224      	movs	r2, #36	@ 0x24
 8008138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800814a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fcdb 	bl	8008b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	691a      	ldr	r2, [r3, #16]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	695a      	ldr	r2, [r3, #20]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68da      	ldr	r2, [r3, #12]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2220      	movs	r2, #32
 800818c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2220      	movs	r2, #32
 8008194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	4613      	mov	r3, r2
 80081b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b20      	cmp	r3, #32
 80081c0:	d112      	bne.n	80081e8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d002      	beq.n	80081ce <HAL_UART_Receive_IT+0x26>
 80081c8:	88fb      	ldrh	r3, [r7, #6]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e00b      	b.n	80081ea <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80081d8:	88fb      	ldrh	r3, [r7, #6]
 80081da:	461a      	mov	r2, r3
 80081dc:	68b9      	ldr	r1, [r7, #8]
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 faba 	bl	8008758 <UART_Start_Receive_IT>
 80081e4:	4603      	mov	r3, r0
 80081e6:	e000      	b.n	80081ea <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80081e8:	2302      	movs	r3, #2
  }
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
	...

080081f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b0ba      	sub	sp, #232	@ 0xe8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800821a:	2300      	movs	r3, #0
 800821c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008220:	2300      	movs	r3, #0
 8008222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800822a:	f003 030f 	and.w	r3, r3, #15
 800822e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10f      	bne.n	800825a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800823a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800823e:	f003 0320 	and.w	r3, r3, #32
 8008242:	2b00      	cmp	r3, #0
 8008244:	d009      	beq.n	800825a <HAL_UART_IRQHandler+0x66>
 8008246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fb99 	bl	800898a <UART_Receive_IT>
      return;
 8008258:	e25b      	b.n	8008712 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800825a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 80de 	beq.w	8008420 <HAL_UART_IRQHandler+0x22c>
 8008264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	d106      	bne.n	800827e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008274:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 80d1 	beq.w	8008420 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800827e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00b      	beq.n	80082a2 <HAL_UART_IRQHandler+0xae>
 800828a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800828e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008292:	2b00      	cmp	r3, #0
 8008294:	d005      	beq.n	80082a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800829a:	f043 0201 	orr.w	r2, r3, #1
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00b      	beq.n	80082c6 <HAL_UART_IRQHandler+0xd2>
 80082ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d005      	beq.n	80082c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082be:	f043 0202 	orr.w	r2, r3, #2
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00b      	beq.n	80082ea <HAL_UART_IRQHandler+0xf6>
 80082d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d005      	beq.n	80082ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e2:	f043 0204 	orr.w	r2, r3, #4
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ee:	f003 0308 	and.w	r3, r3, #8
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d011      	beq.n	800831a <HAL_UART_IRQHandler+0x126>
 80082f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082fa:	f003 0320 	and.w	r3, r3, #32
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d105      	bne.n	800830e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b00      	cmp	r3, #0
 800830c:	d005      	beq.n	800831a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008312:	f043 0208 	orr.w	r2, r3, #8
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 81f2 	beq.w	8008708 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008328:	f003 0320 	and.w	r3, r3, #32
 800832c:	2b00      	cmp	r3, #0
 800832e:	d008      	beq.n	8008342 <HAL_UART_IRQHandler+0x14e>
 8008330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008334:	f003 0320 	and.w	r3, r3, #32
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fb24 	bl	800898a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800834c:	2b40      	cmp	r3, #64	@ 0x40
 800834e:	bf0c      	ite	eq
 8008350:	2301      	moveq	r3, #1
 8008352:	2300      	movne	r3, #0
 8008354:	b2db      	uxtb	r3, r3
 8008356:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800835e:	f003 0308 	and.w	r3, r3, #8
 8008362:	2b00      	cmp	r3, #0
 8008364:	d103      	bne.n	800836e <HAL_UART_IRQHandler+0x17a>
 8008366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800836a:	2b00      	cmp	r3, #0
 800836c:	d04f      	beq.n	800840e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fa2c 	bl	80087cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800837e:	2b40      	cmp	r3, #64	@ 0x40
 8008380:	d141      	bne.n	8008406 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3314      	adds	r3, #20
 8008388:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008398:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800839c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3314      	adds	r3, #20
 80083aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80083ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80083b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80083ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80083be:	e841 2300 	strex	r3, r2, [r1]
 80083c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80083c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1d9      	bne.n	8008382 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d013      	beq.n	80083fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083da:	4a7e      	ldr	r2, [pc, #504]	@ (80085d4 <HAL_UART_IRQHandler+0x3e0>)
 80083dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fd fae9 	bl	80059ba <HAL_DMA_Abort_IT>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d016      	beq.n	800841c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80083f8:	4610      	mov	r0, r2
 80083fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fc:	e00e      	b.n	800841c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f994 	bl	800872c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008404:	e00a      	b.n	800841c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f990 	bl	800872c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800840c:	e006      	b.n	800841c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f98c 	bl	800872c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800841a:	e175      	b.n	8008708 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841c:	bf00      	nop
    return;
 800841e:	e173      	b.n	8008708 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008424:	2b01      	cmp	r3, #1
 8008426:	f040 814f 	bne.w	80086c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800842a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800842e:	f003 0310 	and.w	r3, r3, #16
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 8148 	beq.w	80086c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800843c:	f003 0310 	and.w	r3, r3, #16
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 8141 	beq.w	80086c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008446:	2300      	movs	r3, #0
 8008448:	60bb      	str	r3, [r7, #8]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	60bb      	str	r3, [r7, #8]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	60bb      	str	r3, [r7, #8]
 800845a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008466:	2b40      	cmp	r3, #64	@ 0x40
 8008468:	f040 80b6 	bne.w	80085d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008478:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 8145 	beq.w	800870c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800848a:	429a      	cmp	r2, r3
 800848c:	f080 813e 	bcs.w	800870c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008496:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084a2:	f000 8088 	beq.w	80085b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	330c      	adds	r3, #12
 80084ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084b4:	e853 3f00 	ldrex	r3, [r3]
 80084b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80084bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80084c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	330c      	adds	r3, #12
 80084ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80084d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80084d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80084de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80084e2:	e841 2300 	strex	r3, r2, [r1]
 80084e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80084ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1d9      	bne.n	80084a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3314      	adds	r3, #20
 80084f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008502:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008504:	f023 0301 	bic.w	r3, r3, #1
 8008508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3314      	adds	r3, #20
 8008512:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008516:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800851a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800851e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008528:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e1      	bne.n	80084f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3314      	adds	r3, #20
 8008534:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800853e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008544:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3314      	adds	r3, #20
 800854e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008552:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008554:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008558:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008560:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e3      	bne.n	800852e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2220      	movs	r2, #32
 800856a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	330c      	adds	r3, #12
 800857a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800857e:	e853 3f00 	ldrex	r3, [r3]
 8008582:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008586:	f023 0310 	bic.w	r3, r3, #16
 800858a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	330c      	adds	r3, #12
 8008594:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008598:	65ba      	str	r2, [r7, #88]	@ 0x58
 800859a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800859e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e3      	bne.n	8008574 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fd f992 	bl	80058da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2202      	movs	r2, #2
 80085ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f8b7 	bl	8008740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085d2:	e09b      	b.n	800870c <HAL_UART_IRQHandler+0x518>
 80085d4:	08008893 	.word	0x08008893
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 808e 	beq.w	8008710 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80085f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 8089 	beq.w	8008710 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	330c      	adds	r3, #12
 8008604:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800860e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008614:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	330c      	adds	r3, #12
 800861e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008622:	647a      	str	r2, [r7, #68]	@ 0x44
 8008624:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008628:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e3      	bne.n	80085fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3314      	adds	r3, #20
 800863c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008640:	e853 3f00 	ldrex	r3, [r3]
 8008644:	623b      	str	r3, [r7, #32]
   return(result);
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	f023 0301 	bic.w	r3, r3, #1
 800864c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3314      	adds	r3, #20
 8008656:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800865a:	633a      	str	r2, [r7, #48]	@ 0x30
 800865c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008662:	e841 2300 	strex	r3, r2, [r1]
 8008666:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e3      	bne.n	8008636 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2220      	movs	r2, #32
 8008672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	330c      	adds	r3, #12
 8008682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	e853 3f00 	ldrex	r3, [r3]
 800868a:	60fb      	str	r3, [r7, #12]
   return(result);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f023 0310 	bic.w	r3, r3, #16
 8008692:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	330c      	adds	r3, #12
 800869c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80086a0:	61fa      	str	r2, [r7, #28]
 80086a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a4:	69b9      	ldr	r1, [r7, #24]
 80086a6:	69fa      	ldr	r2, [r7, #28]
 80086a8:	e841 2300 	strex	r3, r2, [r1]
 80086ac:	617b      	str	r3, [r7, #20]
   return(result);
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e3      	bne.n	800867c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2202      	movs	r2, #2
 80086b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f83d 	bl	8008740 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086c6:	e023      	b.n	8008710 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d009      	beq.n	80086e8 <HAL_UART_IRQHandler+0x4f4>
 80086d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d003      	beq.n	80086e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f8ea 	bl	80088ba <UART_Transmit_IT>
    return;
 80086e6:	e014      	b.n	8008712 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00e      	beq.n	8008712 <HAL_UART_IRQHandler+0x51e>
 80086f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d008      	beq.n	8008712 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f92a 	bl	800895a <UART_EndTransmit_IT>
    return;
 8008706:	e004      	b.n	8008712 <HAL_UART_IRQHandler+0x51e>
    return;
 8008708:	bf00      	nop
 800870a:	e002      	b.n	8008712 <HAL_UART_IRQHandler+0x51e>
      return;
 800870c:	bf00      	nop
 800870e:	e000      	b.n	8008712 <HAL_UART_IRQHandler+0x51e>
      return;
 8008710:	bf00      	nop
  }
}
 8008712:	37e8      	adds	r7, #232	@ 0xe8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	4613      	mov	r3, r2
 8008764:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	88fa      	ldrh	r2, [r7, #6]
 8008770:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	88fa      	ldrh	r2, [r7, #6]
 8008776:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2222      	movs	r2, #34	@ 0x22
 8008782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d007      	beq.n	800879e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68da      	ldr	r2, [r3, #12]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800879c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	695a      	ldr	r2, [r3, #20]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f042 0201 	orr.w	r2, r2, #1
 80087ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68da      	ldr	r2, [r3, #12]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f042 0220 	orr.w	r2, r2, #32
 80087bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3714      	adds	r7, #20
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b095      	sub	sp, #84	@ 0x54
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	330c      	adds	r3, #12
 80087da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087de:	e853 3f00 	ldrex	r3, [r3]
 80087e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	330c      	adds	r3, #12
 80087f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80087f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087fc:	e841 2300 	strex	r3, r2, [r1]
 8008800:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1e5      	bne.n	80087d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3314      	adds	r3, #20
 800880e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	e853 3f00 	ldrex	r3, [r3]
 8008816:	61fb      	str	r3, [r7, #28]
   return(result);
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	f023 0301 	bic.w	r3, r3, #1
 800881e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3314      	adds	r3, #20
 8008826:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008828:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800882a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800882e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008830:	e841 2300 	strex	r3, r2, [r1]
 8008834:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1e5      	bne.n	8008808 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008840:	2b01      	cmp	r3, #1
 8008842:	d119      	bne.n	8008878 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	330c      	adds	r3, #12
 800884a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	e853 3f00 	ldrex	r3, [r3]
 8008852:	60bb      	str	r3, [r7, #8]
   return(result);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	f023 0310 	bic.w	r3, r3, #16
 800885a:	647b      	str	r3, [r7, #68]	@ 0x44
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	330c      	adds	r3, #12
 8008862:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008864:	61ba      	str	r2, [r7, #24]
 8008866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008868:	6979      	ldr	r1, [r7, #20]
 800886a:	69ba      	ldr	r2, [r7, #24]
 800886c:	e841 2300 	strex	r3, r2, [r1]
 8008870:	613b      	str	r3, [r7, #16]
   return(result);
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1e5      	bne.n	8008844 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2220      	movs	r2, #32
 800887c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008886:	bf00      	nop
 8008888:	3754      	adds	r7, #84	@ 0x54
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800889e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f7ff ff3d 	bl	800872c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088b2:	bf00      	nop
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088ba:	b480      	push	{r7}
 80088bc:	b085      	sub	sp, #20
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b21      	cmp	r3, #33	@ 0x21
 80088cc:	d13e      	bne.n	800894c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d6:	d114      	bne.n	8008902 <UART_Transmit_IT+0x48>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d110      	bne.n	8008902 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a1b      	ldr	r3, [r3, #32]
 80088e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	1c9a      	adds	r2, r3, #2
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	621a      	str	r2, [r3, #32]
 8008900:	e008      	b.n	8008914 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	1c59      	adds	r1, r3, #1
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	6211      	str	r1, [r2, #32]
 800890c:	781a      	ldrb	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008918:	b29b      	uxth	r3, r3
 800891a:	3b01      	subs	r3, #1
 800891c:	b29b      	uxth	r3, r3
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	4619      	mov	r1, r3
 8008922:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10f      	bne.n	8008948 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68da      	ldr	r2, [r3, #12]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008936:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68da      	ldr	r2, [r3, #12]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008946:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	e000      	b.n	800894e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800894c:	2302      	movs	r3, #2
  }
}
 800894e:	4618      	mov	r0, r3
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b082      	sub	sp, #8
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008970:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7ff fecc 	bl	8008718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b08c      	sub	sp, #48	@ 0x30
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b22      	cmp	r3, #34	@ 0x22
 800899c:	f040 80ae 	bne.w	8008afc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089a8:	d117      	bne.n	80089da <UART_Receive_IT+0x50>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d113      	bne.n	80089da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089b2:	2300      	movs	r3, #0
 80089b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d2:	1c9a      	adds	r2, r3, #2
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80089d8:	e026      	b.n	8008a28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80089e0:	2300      	movs	r3, #0
 80089e2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ec:	d007      	beq.n	80089fe <UART_Receive_IT+0x74>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10a      	bne.n	8008a0c <UART_Receive_IT+0x82>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d106      	bne.n	8008a0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a08:	701a      	strb	r2, [r3, #0]
 8008a0a:	e008      	b.n	8008a1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a18:	b2da      	uxtb	r2, r3
 8008a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	4619      	mov	r1, r3
 8008a36:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d15d      	bne.n	8008af8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68da      	ldr	r2, [r3, #12]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f022 0220 	bic.w	r2, r2, #32
 8008a4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008a5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	695a      	ldr	r2, [r3, #20]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 0201 	bic.w	r2, r2, #1
 8008a6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d135      	bne.n	8008aee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	330c      	adds	r3, #12
 8008a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	e853 3f00 	ldrex	r3, [r3]
 8008a96:	613b      	str	r3, [r7, #16]
   return(result);
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	f023 0310 	bic.w	r3, r3, #16
 8008a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	330c      	adds	r3, #12
 8008aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aa8:	623a      	str	r2, [r7, #32]
 8008aaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aac:	69f9      	ldr	r1, [r7, #28]
 8008aae:	6a3a      	ldr	r2, [r7, #32]
 8008ab0:	e841 2300 	strex	r3, r2, [r1]
 8008ab4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1e5      	bne.n	8008a88 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0310 	and.w	r3, r3, #16
 8008ac6:	2b10      	cmp	r3, #16
 8008ac8:	d10a      	bne.n	8008ae0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	60fb      	str	r3, [r7, #12]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	60fb      	str	r3, [r7, #12]
 8008ade:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff fe2a 	bl	8008740 <HAL_UARTEx_RxEventCallback>
 8008aec:	e002      	b.n	8008af4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7fa fc0e 	bl	8003310 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	e002      	b.n	8008afe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	e000      	b.n	8008afe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008afc:	2302      	movs	r3, #2
  }
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3730      	adds	r7, #48	@ 0x30
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
	...

08008b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b0c:	b0c0      	sub	sp, #256	@ 0x100
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b24:	68d9      	ldr	r1, [r3, #12]
 8008b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	ea40 0301 	orr.w	r3, r0, r1
 8008b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	431a      	orrs	r2, r3
 8008b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008b60:	f021 010c 	bic.w	r1, r1, #12
 8008b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008b6e:	430b      	orrs	r3, r1
 8008b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b82:	6999      	ldr	r1, [r3, #24]
 8008b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	ea40 0301 	orr.w	r3, r0, r1
 8008b8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	4b8f      	ldr	r3, [pc, #572]	@ (8008dd4 <UART_SetConfig+0x2cc>)
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d005      	beq.n	8008ba8 <UART_SetConfig+0xa0>
 8008b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	4b8d      	ldr	r3, [pc, #564]	@ (8008dd8 <UART_SetConfig+0x2d0>)
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d104      	bne.n	8008bb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ba8:	f7fe fa32 	bl	8007010 <HAL_RCC_GetPCLK2Freq>
 8008bac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008bb0:	e003      	b.n	8008bba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bb2:	f7fe fa19 	bl	8006fe8 <HAL_RCC_GetPCLK1Freq>
 8008bb6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bbe:	69db      	ldr	r3, [r3, #28]
 8008bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bc4:	f040 810c 	bne.w	8008de0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008bd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008bd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008bda:	4622      	mov	r2, r4
 8008bdc:	462b      	mov	r3, r5
 8008bde:	1891      	adds	r1, r2, r2
 8008be0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008be2:	415b      	adcs	r3, r3
 8008be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008be6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008bea:	4621      	mov	r1, r4
 8008bec:	eb12 0801 	adds.w	r8, r2, r1
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	eb43 0901 	adc.w	r9, r3, r1
 8008bf6:	f04f 0200 	mov.w	r2, #0
 8008bfa:	f04f 0300 	mov.w	r3, #0
 8008bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c0a:	4690      	mov	r8, r2
 8008c0c:	4699      	mov	r9, r3
 8008c0e:	4623      	mov	r3, r4
 8008c10:	eb18 0303 	adds.w	r3, r8, r3
 8008c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008c18:	462b      	mov	r3, r5
 8008c1a:	eb49 0303 	adc.w	r3, r9, r3
 8008c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008c36:	460b      	mov	r3, r1
 8008c38:	18db      	adds	r3, r3, r3
 8008c3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	eb42 0303 	adc.w	r3, r2, r3
 8008c42:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008c4c:	f7f8 f81c 	bl	8000c88 <__aeabi_uldivmod>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	4b61      	ldr	r3, [pc, #388]	@ (8008ddc <UART_SetConfig+0x2d4>)
 8008c56:	fba3 2302 	umull	r2, r3, r3, r2
 8008c5a:	095b      	lsrs	r3, r3, #5
 8008c5c:	011c      	lsls	r4, r3, #4
 8008c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008c6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008c70:	4642      	mov	r2, r8
 8008c72:	464b      	mov	r3, r9
 8008c74:	1891      	adds	r1, r2, r2
 8008c76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008c78:	415b      	adcs	r3, r3
 8008c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008c80:	4641      	mov	r1, r8
 8008c82:	eb12 0a01 	adds.w	sl, r2, r1
 8008c86:	4649      	mov	r1, r9
 8008c88:	eb43 0b01 	adc.w	fp, r3, r1
 8008c8c:	f04f 0200 	mov.w	r2, #0
 8008c90:	f04f 0300 	mov.w	r3, #0
 8008c94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ca0:	4692      	mov	sl, r2
 8008ca2:	469b      	mov	fp, r3
 8008ca4:	4643      	mov	r3, r8
 8008ca6:	eb1a 0303 	adds.w	r3, sl, r3
 8008caa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008cae:	464b      	mov	r3, r9
 8008cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8008cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cc4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008cc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	18db      	adds	r3, r3, r3
 8008cd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	eb42 0303 	adc.w	r3, r2, r3
 8008cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008cde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008ce2:	f7f7 ffd1 	bl	8000c88 <__aeabi_uldivmod>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4611      	mov	r1, r2
 8008cec:	4b3b      	ldr	r3, [pc, #236]	@ (8008ddc <UART_SetConfig+0x2d4>)
 8008cee:	fba3 2301 	umull	r2, r3, r3, r1
 8008cf2:	095b      	lsrs	r3, r3, #5
 8008cf4:	2264      	movs	r2, #100	@ 0x64
 8008cf6:	fb02 f303 	mul.w	r3, r2, r3
 8008cfa:	1acb      	subs	r3, r1, r3
 8008cfc:	00db      	lsls	r3, r3, #3
 8008cfe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008d02:	4b36      	ldr	r3, [pc, #216]	@ (8008ddc <UART_SetConfig+0x2d4>)
 8008d04:	fba3 2302 	umull	r2, r3, r3, r2
 8008d08:	095b      	lsrs	r3, r3, #5
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008d10:	441c      	add	r4, r3
 8008d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008d20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008d24:	4642      	mov	r2, r8
 8008d26:	464b      	mov	r3, r9
 8008d28:	1891      	adds	r1, r2, r2
 8008d2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008d2c:	415b      	adcs	r3, r3
 8008d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008d34:	4641      	mov	r1, r8
 8008d36:	1851      	adds	r1, r2, r1
 8008d38:	6339      	str	r1, [r7, #48]	@ 0x30
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	414b      	adcs	r3, r1
 8008d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d40:	f04f 0200 	mov.w	r2, #0
 8008d44:	f04f 0300 	mov.w	r3, #0
 8008d48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008d4c:	4659      	mov	r1, fp
 8008d4e:	00cb      	lsls	r3, r1, #3
 8008d50:	4651      	mov	r1, sl
 8008d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d56:	4651      	mov	r1, sl
 8008d58:	00ca      	lsls	r2, r1, #3
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4603      	mov	r3, r0
 8008d60:	4642      	mov	r2, r8
 8008d62:	189b      	adds	r3, r3, r2
 8008d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d68:	464b      	mov	r3, r9
 8008d6a:	460a      	mov	r2, r1
 8008d6c:	eb42 0303 	adc.w	r3, r2, r3
 8008d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d88:	460b      	mov	r3, r1
 8008d8a:	18db      	adds	r3, r3, r3
 8008d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d8e:	4613      	mov	r3, r2
 8008d90:	eb42 0303 	adc.w	r3, r2, r3
 8008d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008d9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008d9e:	f7f7 ff73 	bl	8000c88 <__aeabi_uldivmod>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	4b0d      	ldr	r3, [pc, #52]	@ (8008ddc <UART_SetConfig+0x2d4>)
 8008da8:	fba3 1302 	umull	r1, r3, r3, r2
 8008dac:	095b      	lsrs	r3, r3, #5
 8008dae:	2164      	movs	r1, #100	@ 0x64
 8008db0:	fb01 f303 	mul.w	r3, r1, r3
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	00db      	lsls	r3, r3, #3
 8008db8:	3332      	adds	r3, #50	@ 0x32
 8008dba:	4a08      	ldr	r2, [pc, #32]	@ (8008ddc <UART_SetConfig+0x2d4>)
 8008dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc0:	095b      	lsrs	r3, r3, #5
 8008dc2:	f003 0207 	and.w	r2, r3, #7
 8008dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4422      	add	r2, r4
 8008dce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008dd0:	e106      	b.n	8008fe0 <UART_SetConfig+0x4d8>
 8008dd2:	bf00      	nop
 8008dd4:	40011000 	.word	0x40011000
 8008dd8:	40011400 	.word	0x40011400
 8008ddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008de4:	2200      	movs	r2, #0
 8008de6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008dea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008dee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008df2:	4642      	mov	r2, r8
 8008df4:	464b      	mov	r3, r9
 8008df6:	1891      	adds	r1, r2, r2
 8008df8:	6239      	str	r1, [r7, #32]
 8008dfa:	415b      	adcs	r3, r3
 8008dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e02:	4641      	mov	r1, r8
 8008e04:	1854      	adds	r4, r2, r1
 8008e06:	4649      	mov	r1, r9
 8008e08:	eb43 0501 	adc.w	r5, r3, r1
 8008e0c:	f04f 0200 	mov.w	r2, #0
 8008e10:	f04f 0300 	mov.w	r3, #0
 8008e14:	00eb      	lsls	r3, r5, #3
 8008e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e1a:	00e2      	lsls	r2, r4, #3
 8008e1c:	4614      	mov	r4, r2
 8008e1e:	461d      	mov	r5, r3
 8008e20:	4643      	mov	r3, r8
 8008e22:	18e3      	adds	r3, r4, r3
 8008e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e28:	464b      	mov	r3, r9
 8008e2a:	eb45 0303 	adc.w	r3, r5, r3
 8008e2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008e3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008e42:	f04f 0200 	mov.w	r2, #0
 8008e46:	f04f 0300 	mov.w	r3, #0
 8008e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008e4e:	4629      	mov	r1, r5
 8008e50:	008b      	lsls	r3, r1, #2
 8008e52:	4621      	mov	r1, r4
 8008e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e58:	4621      	mov	r1, r4
 8008e5a:	008a      	lsls	r2, r1, #2
 8008e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008e60:	f7f7 ff12 	bl	8000c88 <__aeabi_uldivmod>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4b60      	ldr	r3, [pc, #384]	@ (8008fec <UART_SetConfig+0x4e4>)
 8008e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e6e:	095b      	lsrs	r3, r3, #5
 8008e70:	011c      	lsls	r4, r3, #4
 8008e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008e80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008e84:	4642      	mov	r2, r8
 8008e86:	464b      	mov	r3, r9
 8008e88:	1891      	adds	r1, r2, r2
 8008e8a:	61b9      	str	r1, [r7, #24]
 8008e8c:	415b      	adcs	r3, r3
 8008e8e:	61fb      	str	r3, [r7, #28]
 8008e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e94:	4641      	mov	r1, r8
 8008e96:	1851      	adds	r1, r2, r1
 8008e98:	6139      	str	r1, [r7, #16]
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	414b      	adcs	r3, r1
 8008e9e:	617b      	str	r3, [r7, #20]
 8008ea0:	f04f 0200 	mov.w	r2, #0
 8008ea4:	f04f 0300 	mov.w	r3, #0
 8008ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008eac:	4659      	mov	r1, fp
 8008eae:	00cb      	lsls	r3, r1, #3
 8008eb0:	4651      	mov	r1, sl
 8008eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eb6:	4651      	mov	r1, sl
 8008eb8:	00ca      	lsls	r2, r1, #3
 8008eba:	4610      	mov	r0, r2
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	4642      	mov	r2, r8
 8008ec2:	189b      	adds	r3, r3, r2
 8008ec4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ec8:	464b      	mov	r3, r9
 8008eca:	460a      	mov	r2, r1
 8008ecc:	eb42 0303 	adc.w	r3, r2, r3
 8008ed0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ede:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008ee0:	f04f 0200 	mov.w	r2, #0
 8008ee4:	f04f 0300 	mov.w	r3, #0
 8008ee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008eec:	4649      	mov	r1, r9
 8008eee:	008b      	lsls	r3, r1, #2
 8008ef0:	4641      	mov	r1, r8
 8008ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ef6:	4641      	mov	r1, r8
 8008ef8:	008a      	lsls	r2, r1, #2
 8008efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008efe:	f7f7 fec3 	bl	8000c88 <__aeabi_uldivmod>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4611      	mov	r1, r2
 8008f08:	4b38      	ldr	r3, [pc, #224]	@ (8008fec <UART_SetConfig+0x4e4>)
 8008f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8008f0e:	095b      	lsrs	r3, r3, #5
 8008f10:	2264      	movs	r2, #100	@ 0x64
 8008f12:	fb02 f303 	mul.w	r3, r2, r3
 8008f16:	1acb      	subs	r3, r1, r3
 8008f18:	011b      	lsls	r3, r3, #4
 8008f1a:	3332      	adds	r3, #50	@ 0x32
 8008f1c:	4a33      	ldr	r2, [pc, #204]	@ (8008fec <UART_SetConfig+0x4e4>)
 8008f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f22:	095b      	lsrs	r3, r3, #5
 8008f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f28:	441c      	add	r4, r3
 8008f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f2e:	2200      	movs	r2, #0
 8008f30:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f32:	677a      	str	r2, [r7, #116]	@ 0x74
 8008f34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008f38:	4642      	mov	r2, r8
 8008f3a:	464b      	mov	r3, r9
 8008f3c:	1891      	adds	r1, r2, r2
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	415b      	adcs	r3, r3
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f48:	4641      	mov	r1, r8
 8008f4a:	1851      	adds	r1, r2, r1
 8008f4c:	6039      	str	r1, [r7, #0]
 8008f4e:	4649      	mov	r1, r9
 8008f50:	414b      	adcs	r3, r1
 8008f52:	607b      	str	r3, [r7, #4]
 8008f54:	f04f 0200 	mov.w	r2, #0
 8008f58:	f04f 0300 	mov.w	r3, #0
 8008f5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f60:	4659      	mov	r1, fp
 8008f62:	00cb      	lsls	r3, r1, #3
 8008f64:	4651      	mov	r1, sl
 8008f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f6a:	4651      	mov	r1, sl
 8008f6c:	00ca      	lsls	r2, r1, #3
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4619      	mov	r1, r3
 8008f72:	4603      	mov	r3, r0
 8008f74:	4642      	mov	r2, r8
 8008f76:	189b      	adds	r3, r3, r2
 8008f78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f7a:	464b      	mov	r3, r9
 8008f7c:	460a      	mov	r2, r1
 8008f7e:	eb42 0303 	adc.w	r3, r2, r3
 8008f82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008f90:	f04f 0200 	mov.w	r2, #0
 8008f94:	f04f 0300 	mov.w	r3, #0
 8008f98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008f9c:	4649      	mov	r1, r9
 8008f9e:	008b      	lsls	r3, r1, #2
 8008fa0:	4641      	mov	r1, r8
 8008fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fa6:	4641      	mov	r1, r8
 8008fa8:	008a      	lsls	r2, r1, #2
 8008faa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008fae:	f7f7 fe6b 	bl	8000c88 <__aeabi_uldivmod>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008fec <UART_SetConfig+0x4e4>)
 8008fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fbc:	095b      	lsrs	r3, r3, #5
 8008fbe:	2164      	movs	r1, #100	@ 0x64
 8008fc0:	fb01 f303 	mul.w	r3, r1, r3
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	3332      	adds	r3, #50	@ 0x32
 8008fca:	4a08      	ldr	r2, [pc, #32]	@ (8008fec <UART_SetConfig+0x4e4>)
 8008fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd0:	095b      	lsrs	r3, r3, #5
 8008fd2:	f003 020f 	and.w	r2, r3, #15
 8008fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4422      	add	r2, r4
 8008fde:	609a      	str	r2, [r3, #8]
}
 8008fe0:	bf00      	nop
 8008fe2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fec:	51eb851f 	.word	0x51eb851f

08008ff0 <atof>:
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	f000 be0f 	b.w	8009c14 <strtod>

08008ff6 <atoi>:
 8008ff6:	220a      	movs	r2, #10
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	f000 be93 	b.w	8009d24 <strtol>

08008ffe <sulp>:
 8008ffe:	b570      	push	{r4, r5, r6, lr}
 8009000:	4604      	mov	r4, r0
 8009002:	460d      	mov	r5, r1
 8009004:	ec45 4b10 	vmov	d0, r4, r5
 8009008:	4616      	mov	r6, r2
 800900a:	f003 fd5d 	bl	800cac8 <__ulp>
 800900e:	ec51 0b10 	vmov	r0, r1, d0
 8009012:	b17e      	cbz	r6, 8009034 <sulp+0x36>
 8009014:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009018:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800901c:	2b00      	cmp	r3, #0
 800901e:	dd09      	ble.n	8009034 <sulp+0x36>
 8009020:	051b      	lsls	r3, r3, #20
 8009022:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009026:	2400      	movs	r4, #0
 8009028:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800902c:	4622      	mov	r2, r4
 800902e:	462b      	mov	r3, r5
 8009030:	f7f7 fae2 	bl	80005f8 <__aeabi_dmul>
 8009034:	ec41 0b10 	vmov	d0, r0, r1
 8009038:	bd70      	pop	{r4, r5, r6, pc}
 800903a:	0000      	movs	r0, r0
 800903c:	0000      	movs	r0, r0
	...

08009040 <_strtod_l>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	b09f      	sub	sp, #124	@ 0x7c
 8009046:	460c      	mov	r4, r1
 8009048:	9217      	str	r2, [sp, #92]	@ 0x5c
 800904a:	2200      	movs	r2, #0
 800904c:	921a      	str	r2, [sp, #104]	@ 0x68
 800904e:	9005      	str	r0, [sp, #20]
 8009050:	f04f 0a00 	mov.w	sl, #0
 8009054:	f04f 0b00 	mov.w	fp, #0
 8009058:	460a      	mov	r2, r1
 800905a:	9219      	str	r2, [sp, #100]	@ 0x64
 800905c:	7811      	ldrb	r1, [r2, #0]
 800905e:	292b      	cmp	r1, #43	@ 0x2b
 8009060:	d04a      	beq.n	80090f8 <_strtod_l+0xb8>
 8009062:	d838      	bhi.n	80090d6 <_strtod_l+0x96>
 8009064:	290d      	cmp	r1, #13
 8009066:	d832      	bhi.n	80090ce <_strtod_l+0x8e>
 8009068:	2908      	cmp	r1, #8
 800906a:	d832      	bhi.n	80090d2 <_strtod_l+0x92>
 800906c:	2900      	cmp	r1, #0
 800906e:	d03b      	beq.n	80090e8 <_strtod_l+0xa8>
 8009070:	2200      	movs	r2, #0
 8009072:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009074:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009076:	782a      	ldrb	r2, [r5, #0]
 8009078:	2a30      	cmp	r2, #48	@ 0x30
 800907a:	f040 80b3 	bne.w	80091e4 <_strtod_l+0x1a4>
 800907e:	786a      	ldrb	r2, [r5, #1]
 8009080:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009084:	2a58      	cmp	r2, #88	@ 0x58
 8009086:	d16e      	bne.n	8009166 <_strtod_l+0x126>
 8009088:	9302      	str	r3, [sp, #8]
 800908a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800908c:	9301      	str	r3, [sp, #4]
 800908e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	4a8e      	ldr	r2, [pc, #568]	@ (80092cc <_strtod_l+0x28c>)
 8009094:	9805      	ldr	r0, [sp, #20]
 8009096:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009098:	a919      	add	r1, sp, #100	@ 0x64
 800909a:	f002 fe07 	bl	800bcac <__gethex>
 800909e:	f010 060f 	ands.w	r6, r0, #15
 80090a2:	4604      	mov	r4, r0
 80090a4:	d005      	beq.n	80090b2 <_strtod_l+0x72>
 80090a6:	2e06      	cmp	r6, #6
 80090a8:	d128      	bne.n	80090fc <_strtod_l+0xbc>
 80090aa:	3501      	adds	r5, #1
 80090ac:	2300      	movs	r3, #0
 80090ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80090b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f040 858e 	bne.w	8009bd6 <_strtod_l+0xb96>
 80090ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090bc:	b1cb      	cbz	r3, 80090f2 <_strtod_l+0xb2>
 80090be:	4652      	mov	r2, sl
 80090c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80090c4:	ec43 2b10 	vmov	d0, r2, r3
 80090c8:	b01f      	add	sp, #124	@ 0x7c
 80090ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ce:	2920      	cmp	r1, #32
 80090d0:	d1ce      	bne.n	8009070 <_strtod_l+0x30>
 80090d2:	3201      	adds	r2, #1
 80090d4:	e7c1      	b.n	800905a <_strtod_l+0x1a>
 80090d6:	292d      	cmp	r1, #45	@ 0x2d
 80090d8:	d1ca      	bne.n	8009070 <_strtod_l+0x30>
 80090da:	2101      	movs	r1, #1
 80090dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80090de:	1c51      	adds	r1, r2, #1
 80090e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80090e2:	7852      	ldrb	r2, [r2, #1]
 80090e4:	2a00      	cmp	r2, #0
 80090e6:	d1c5      	bne.n	8009074 <_strtod_l+0x34>
 80090e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f040 8570 	bne.w	8009bd2 <_strtod_l+0xb92>
 80090f2:	4652      	mov	r2, sl
 80090f4:	465b      	mov	r3, fp
 80090f6:	e7e5      	b.n	80090c4 <_strtod_l+0x84>
 80090f8:	2100      	movs	r1, #0
 80090fa:	e7ef      	b.n	80090dc <_strtod_l+0x9c>
 80090fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80090fe:	b13a      	cbz	r2, 8009110 <_strtod_l+0xd0>
 8009100:	2135      	movs	r1, #53	@ 0x35
 8009102:	a81c      	add	r0, sp, #112	@ 0x70
 8009104:	f003 fdda 	bl	800ccbc <__copybits>
 8009108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800910a:	9805      	ldr	r0, [sp, #20]
 800910c:	f003 f9a8 	bl	800c460 <_Bfree>
 8009110:	3e01      	subs	r6, #1
 8009112:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009114:	2e04      	cmp	r6, #4
 8009116:	d806      	bhi.n	8009126 <_strtod_l+0xe6>
 8009118:	e8df f006 	tbb	[pc, r6]
 800911c:	201d0314 	.word	0x201d0314
 8009120:	14          	.byte	0x14
 8009121:	00          	.byte	0x00
 8009122:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009126:	05e1      	lsls	r1, r4, #23
 8009128:	bf48      	it	mi
 800912a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800912e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009132:	0d1b      	lsrs	r3, r3, #20
 8009134:	051b      	lsls	r3, r3, #20
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1bb      	bne.n	80090b2 <_strtod_l+0x72>
 800913a:	f001 fe4f 	bl	800addc <__errno>
 800913e:	2322      	movs	r3, #34	@ 0x22
 8009140:	6003      	str	r3, [r0, #0]
 8009142:	e7b6      	b.n	80090b2 <_strtod_l+0x72>
 8009144:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009148:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800914c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009150:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009154:	e7e7      	b.n	8009126 <_strtod_l+0xe6>
 8009156:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80092d4 <_strtod_l+0x294>
 800915a:	e7e4      	b.n	8009126 <_strtod_l+0xe6>
 800915c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009160:	f04f 3aff 	mov.w	sl, #4294967295
 8009164:	e7df      	b.n	8009126 <_strtod_l+0xe6>
 8009166:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	9219      	str	r2, [sp, #100]	@ 0x64
 800916c:	785b      	ldrb	r3, [r3, #1]
 800916e:	2b30      	cmp	r3, #48	@ 0x30
 8009170:	d0f9      	beq.n	8009166 <_strtod_l+0x126>
 8009172:	2b00      	cmp	r3, #0
 8009174:	d09d      	beq.n	80090b2 <_strtod_l+0x72>
 8009176:	2301      	movs	r3, #1
 8009178:	9309      	str	r3, [sp, #36]	@ 0x24
 800917a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800917c:	930c      	str	r3, [sp, #48]	@ 0x30
 800917e:	2300      	movs	r3, #0
 8009180:	9308      	str	r3, [sp, #32]
 8009182:	930a      	str	r3, [sp, #40]	@ 0x28
 8009184:	461f      	mov	r7, r3
 8009186:	220a      	movs	r2, #10
 8009188:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800918a:	7805      	ldrb	r5, [r0, #0]
 800918c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009190:	b2d9      	uxtb	r1, r3
 8009192:	2909      	cmp	r1, #9
 8009194:	d928      	bls.n	80091e8 <_strtod_l+0x1a8>
 8009196:	494e      	ldr	r1, [pc, #312]	@ (80092d0 <_strtod_l+0x290>)
 8009198:	2201      	movs	r2, #1
 800919a:	f001 fd66 	bl	800ac6a <strncmp>
 800919e:	2800      	cmp	r0, #0
 80091a0:	d032      	beq.n	8009208 <_strtod_l+0x1c8>
 80091a2:	2000      	movs	r0, #0
 80091a4:	462a      	mov	r2, r5
 80091a6:	4681      	mov	r9, r0
 80091a8:	463d      	mov	r5, r7
 80091aa:	4603      	mov	r3, r0
 80091ac:	2a65      	cmp	r2, #101	@ 0x65
 80091ae:	d001      	beq.n	80091b4 <_strtod_l+0x174>
 80091b0:	2a45      	cmp	r2, #69	@ 0x45
 80091b2:	d114      	bne.n	80091de <_strtod_l+0x19e>
 80091b4:	b91d      	cbnz	r5, 80091be <_strtod_l+0x17e>
 80091b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091b8:	4302      	orrs	r2, r0
 80091ba:	d095      	beq.n	80090e8 <_strtod_l+0xa8>
 80091bc:	2500      	movs	r5, #0
 80091be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80091c0:	1c62      	adds	r2, r4, #1
 80091c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80091c4:	7862      	ldrb	r2, [r4, #1]
 80091c6:	2a2b      	cmp	r2, #43	@ 0x2b
 80091c8:	d077      	beq.n	80092ba <_strtod_l+0x27a>
 80091ca:	2a2d      	cmp	r2, #45	@ 0x2d
 80091cc:	d07b      	beq.n	80092c6 <_strtod_l+0x286>
 80091ce:	f04f 0c00 	mov.w	ip, #0
 80091d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80091d6:	2909      	cmp	r1, #9
 80091d8:	f240 8082 	bls.w	80092e0 <_strtod_l+0x2a0>
 80091dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80091de:	f04f 0800 	mov.w	r8, #0
 80091e2:	e0a2      	b.n	800932a <_strtod_l+0x2ea>
 80091e4:	2300      	movs	r3, #0
 80091e6:	e7c7      	b.n	8009178 <_strtod_l+0x138>
 80091e8:	2f08      	cmp	r7, #8
 80091ea:	bfd5      	itete	le
 80091ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80091ee:	9908      	ldrgt	r1, [sp, #32]
 80091f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80091f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80091f8:	f100 0001 	add.w	r0, r0, #1
 80091fc:	bfd4      	ite	le
 80091fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009200:	9308      	strgt	r3, [sp, #32]
 8009202:	3701      	adds	r7, #1
 8009204:	9019      	str	r0, [sp, #100]	@ 0x64
 8009206:	e7bf      	b.n	8009188 <_strtod_l+0x148>
 8009208:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800920a:	1c5a      	adds	r2, r3, #1
 800920c:	9219      	str	r2, [sp, #100]	@ 0x64
 800920e:	785a      	ldrb	r2, [r3, #1]
 8009210:	b37f      	cbz	r7, 8009272 <_strtod_l+0x232>
 8009212:	4681      	mov	r9, r0
 8009214:	463d      	mov	r5, r7
 8009216:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800921a:	2b09      	cmp	r3, #9
 800921c:	d912      	bls.n	8009244 <_strtod_l+0x204>
 800921e:	2301      	movs	r3, #1
 8009220:	e7c4      	b.n	80091ac <_strtod_l+0x16c>
 8009222:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009224:	1c5a      	adds	r2, r3, #1
 8009226:	9219      	str	r2, [sp, #100]	@ 0x64
 8009228:	785a      	ldrb	r2, [r3, #1]
 800922a:	3001      	adds	r0, #1
 800922c:	2a30      	cmp	r2, #48	@ 0x30
 800922e:	d0f8      	beq.n	8009222 <_strtod_l+0x1e2>
 8009230:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009234:	2b08      	cmp	r3, #8
 8009236:	f200 84d3 	bhi.w	8009be0 <_strtod_l+0xba0>
 800923a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800923c:	930c      	str	r3, [sp, #48]	@ 0x30
 800923e:	4681      	mov	r9, r0
 8009240:	2000      	movs	r0, #0
 8009242:	4605      	mov	r5, r0
 8009244:	3a30      	subs	r2, #48	@ 0x30
 8009246:	f100 0301 	add.w	r3, r0, #1
 800924a:	d02a      	beq.n	80092a2 <_strtod_l+0x262>
 800924c:	4499      	add	r9, r3
 800924e:	eb00 0c05 	add.w	ip, r0, r5
 8009252:	462b      	mov	r3, r5
 8009254:	210a      	movs	r1, #10
 8009256:	4563      	cmp	r3, ip
 8009258:	d10d      	bne.n	8009276 <_strtod_l+0x236>
 800925a:	1c69      	adds	r1, r5, #1
 800925c:	4401      	add	r1, r0
 800925e:	4428      	add	r0, r5
 8009260:	2808      	cmp	r0, #8
 8009262:	dc16      	bgt.n	8009292 <_strtod_l+0x252>
 8009264:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009266:	230a      	movs	r3, #10
 8009268:	fb03 2300 	mla	r3, r3, r0, r2
 800926c:	930a      	str	r3, [sp, #40]	@ 0x28
 800926e:	2300      	movs	r3, #0
 8009270:	e018      	b.n	80092a4 <_strtod_l+0x264>
 8009272:	4638      	mov	r0, r7
 8009274:	e7da      	b.n	800922c <_strtod_l+0x1ec>
 8009276:	2b08      	cmp	r3, #8
 8009278:	f103 0301 	add.w	r3, r3, #1
 800927c:	dc03      	bgt.n	8009286 <_strtod_l+0x246>
 800927e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009280:	434e      	muls	r6, r1
 8009282:	960a      	str	r6, [sp, #40]	@ 0x28
 8009284:	e7e7      	b.n	8009256 <_strtod_l+0x216>
 8009286:	2b10      	cmp	r3, #16
 8009288:	bfde      	ittt	le
 800928a:	9e08      	ldrle	r6, [sp, #32]
 800928c:	434e      	mulle	r6, r1
 800928e:	9608      	strle	r6, [sp, #32]
 8009290:	e7e1      	b.n	8009256 <_strtod_l+0x216>
 8009292:	280f      	cmp	r0, #15
 8009294:	dceb      	bgt.n	800926e <_strtod_l+0x22e>
 8009296:	9808      	ldr	r0, [sp, #32]
 8009298:	230a      	movs	r3, #10
 800929a:	fb03 2300 	mla	r3, r3, r0, r2
 800929e:	9308      	str	r3, [sp, #32]
 80092a0:	e7e5      	b.n	800926e <_strtod_l+0x22e>
 80092a2:	4629      	mov	r1, r5
 80092a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092a6:	1c50      	adds	r0, r2, #1
 80092a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80092aa:	7852      	ldrb	r2, [r2, #1]
 80092ac:	4618      	mov	r0, r3
 80092ae:	460d      	mov	r5, r1
 80092b0:	e7b1      	b.n	8009216 <_strtod_l+0x1d6>
 80092b2:	f04f 0900 	mov.w	r9, #0
 80092b6:	2301      	movs	r3, #1
 80092b8:	e77d      	b.n	80091b6 <_strtod_l+0x176>
 80092ba:	f04f 0c00 	mov.w	ip, #0
 80092be:	1ca2      	adds	r2, r4, #2
 80092c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80092c2:	78a2      	ldrb	r2, [r4, #2]
 80092c4:	e785      	b.n	80091d2 <_strtod_l+0x192>
 80092c6:	f04f 0c01 	mov.w	ip, #1
 80092ca:	e7f8      	b.n	80092be <_strtod_l+0x27e>
 80092cc:	0800f4d4 	.word	0x0800f4d4
 80092d0:	0800f4bc 	.word	0x0800f4bc
 80092d4:	7ff00000 	.word	0x7ff00000
 80092d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092da:	1c51      	adds	r1, r2, #1
 80092dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80092de:	7852      	ldrb	r2, [r2, #1]
 80092e0:	2a30      	cmp	r2, #48	@ 0x30
 80092e2:	d0f9      	beq.n	80092d8 <_strtod_l+0x298>
 80092e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80092e8:	2908      	cmp	r1, #8
 80092ea:	f63f af78 	bhi.w	80091de <_strtod_l+0x19e>
 80092ee:	3a30      	subs	r2, #48	@ 0x30
 80092f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80092f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80092f6:	f04f 080a 	mov.w	r8, #10
 80092fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092fc:	1c56      	adds	r6, r2, #1
 80092fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8009300:	7852      	ldrb	r2, [r2, #1]
 8009302:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009306:	f1be 0f09 	cmp.w	lr, #9
 800930a:	d939      	bls.n	8009380 <_strtod_l+0x340>
 800930c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800930e:	1a76      	subs	r6, r6, r1
 8009310:	2e08      	cmp	r6, #8
 8009312:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009316:	dc03      	bgt.n	8009320 <_strtod_l+0x2e0>
 8009318:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800931a:	4588      	cmp	r8, r1
 800931c:	bfa8      	it	ge
 800931e:	4688      	movge	r8, r1
 8009320:	f1bc 0f00 	cmp.w	ip, #0
 8009324:	d001      	beq.n	800932a <_strtod_l+0x2ea>
 8009326:	f1c8 0800 	rsb	r8, r8, #0
 800932a:	2d00      	cmp	r5, #0
 800932c:	d14e      	bne.n	80093cc <_strtod_l+0x38c>
 800932e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009330:	4308      	orrs	r0, r1
 8009332:	f47f aebe 	bne.w	80090b2 <_strtod_l+0x72>
 8009336:	2b00      	cmp	r3, #0
 8009338:	f47f aed6 	bne.w	80090e8 <_strtod_l+0xa8>
 800933c:	2a69      	cmp	r2, #105	@ 0x69
 800933e:	d028      	beq.n	8009392 <_strtod_l+0x352>
 8009340:	dc25      	bgt.n	800938e <_strtod_l+0x34e>
 8009342:	2a49      	cmp	r2, #73	@ 0x49
 8009344:	d025      	beq.n	8009392 <_strtod_l+0x352>
 8009346:	2a4e      	cmp	r2, #78	@ 0x4e
 8009348:	f47f aece 	bne.w	80090e8 <_strtod_l+0xa8>
 800934c:	499b      	ldr	r1, [pc, #620]	@ (80095bc <_strtod_l+0x57c>)
 800934e:	a819      	add	r0, sp, #100	@ 0x64
 8009350:	f002 fece 	bl	800c0f0 <__match>
 8009354:	2800      	cmp	r0, #0
 8009356:	f43f aec7 	beq.w	80090e8 <_strtod_l+0xa8>
 800935a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	2b28      	cmp	r3, #40	@ 0x28
 8009360:	d12e      	bne.n	80093c0 <_strtod_l+0x380>
 8009362:	4997      	ldr	r1, [pc, #604]	@ (80095c0 <_strtod_l+0x580>)
 8009364:	aa1c      	add	r2, sp, #112	@ 0x70
 8009366:	a819      	add	r0, sp, #100	@ 0x64
 8009368:	f002 fed6 	bl	800c118 <__hexnan>
 800936c:	2805      	cmp	r0, #5
 800936e:	d127      	bne.n	80093c0 <_strtod_l+0x380>
 8009370:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009372:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009376:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800937a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800937e:	e698      	b.n	80090b2 <_strtod_l+0x72>
 8009380:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009382:	fb08 2101 	mla	r1, r8, r1, r2
 8009386:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800938a:	920e      	str	r2, [sp, #56]	@ 0x38
 800938c:	e7b5      	b.n	80092fa <_strtod_l+0x2ba>
 800938e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009390:	e7da      	b.n	8009348 <_strtod_l+0x308>
 8009392:	498c      	ldr	r1, [pc, #560]	@ (80095c4 <_strtod_l+0x584>)
 8009394:	a819      	add	r0, sp, #100	@ 0x64
 8009396:	f002 feab 	bl	800c0f0 <__match>
 800939a:	2800      	cmp	r0, #0
 800939c:	f43f aea4 	beq.w	80090e8 <_strtod_l+0xa8>
 80093a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093a2:	4989      	ldr	r1, [pc, #548]	@ (80095c8 <_strtod_l+0x588>)
 80093a4:	3b01      	subs	r3, #1
 80093a6:	a819      	add	r0, sp, #100	@ 0x64
 80093a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80093aa:	f002 fea1 	bl	800c0f0 <__match>
 80093ae:	b910      	cbnz	r0, 80093b6 <_strtod_l+0x376>
 80093b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093b2:	3301      	adds	r3, #1
 80093b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80093b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80095d8 <_strtod_l+0x598>
 80093ba:	f04f 0a00 	mov.w	sl, #0
 80093be:	e678      	b.n	80090b2 <_strtod_l+0x72>
 80093c0:	4882      	ldr	r0, [pc, #520]	@ (80095cc <_strtod_l+0x58c>)
 80093c2:	f001 fd49 	bl	800ae58 <nan>
 80093c6:	ec5b ab10 	vmov	sl, fp, d0
 80093ca:	e672      	b.n	80090b2 <_strtod_l+0x72>
 80093cc:	eba8 0309 	sub.w	r3, r8, r9
 80093d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80093d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093d4:	2f00      	cmp	r7, #0
 80093d6:	bf08      	it	eq
 80093d8:	462f      	moveq	r7, r5
 80093da:	2d10      	cmp	r5, #16
 80093dc:	462c      	mov	r4, r5
 80093de:	bfa8      	it	ge
 80093e0:	2410      	movge	r4, #16
 80093e2:	f7f7 f88f 	bl	8000504 <__aeabi_ui2d>
 80093e6:	2d09      	cmp	r5, #9
 80093e8:	4682      	mov	sl, r0
 80093ea:	468b      	mov	fp, r1
 80093ec:	dc13      	bgt.n	8009416 <_strtod_l+0x3d6>
 80093ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f43f ae5e 	beq.w	80090b2 <_strtod_l+0x72>
 80093f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f8:	dd78      	ble.n	80094ec <_strtod_l+0x4ac>
 80093fa:	2b16      	cmp	r3, #22
 80093fc:	dc5f      	bgt.n	80094be <_strtod_l+0x47e>
 80093fe:	4974      	ldr	r1, [pc, #464]	@ (80095d0 <_strtod_l+0x590>)
 8009400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009408:	4652      	mov	r2, sl
 800940a:	465b      	mov	r3, fp
 800940c:	f7f7 f8f4 	bl	80005f8 <__aeabi_dmul>
 8009410:	4682      	mov	sl, r0
 8009412:	468b      	mov	fp, r1
 8009414:	e64d      	b.n	80090b2 <_strtod_l+0x72>
 8009416:	4b6e      	ldr	r3, [pc, #440]	@ (80095d0 <_strtod_l+0x590>)
 8009418:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800941c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009420:	f7f7 f8ea 	bl	80005f8 <__aeabi_dmul>
 8009424:	4682      	mov	sl, r0
 8009426:	9808      	ldr	r0, [sp, #32]
 8009428:	468b      	mov	fp, r1
 800942a:	f7f7 f86b 	bl	8000504 <__aeabi_ui2d>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4650      	mov	r0, sl
 8009434:	4659      	mov	r1, fp
 8009436:	f7f6 ff29 	bl	800028c <__adddf3>
 800943a:	2d0f      	cmp	r5, #15
 800943c:	4682      	mov	sl, r0
 800943e:	468b      	mov	fp, r1
 8009440:	ddd5      	ble.n	80093ee <_strtod_l+0x3ae>
 8009442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009444:	1b2c      	subs	r4, r5, r4
 8009446:	441c      	add	r4, r3
 8009448:	2c00      	cmp	r4, #0
 800944a:	f340 8096 	ble.w	800957a <_strtod_l+0x53a>
 800944e:	f014 030f 	ands.w	r3, r4, #15
 8009452:	d00a      	beq.n	800946a <_strtod_l+0x42a>
 8009454:	495e      	ldr	r1, [pc, #376]	@ (80095d0 <_strtod_l+0x590>)
 8009456:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800945a:	4652      	mov	r2, sl
 800945c:	465b      	mov	r3, fp
 800945e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009462:	f7f7 f8c9 	bl	80005f8 <__aeabi_dmul>
 8009466:	4682      	mov	sl, r0
 8009468:	468b      	mov	fp, r1
 800946a:	f034 040f 	bics.w	r4, r4, #15
 800946e:	d073      	beq.n	8009558 <_strtod_l+0x518>
 8009470:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009474:	dd48      	ble.n	8009508 <_strtod_l+0x4c8>
 8009476:	2400      	movs	r4, #0
 8009478:	46a0      	mov	r8, r4
 800947a:	940a      	str	r4, [sp, #40]	@ 0x28
 800947c:	46a1      	mov	r9, r4
 800947e:	9a05      	ldr	r2, [sp, #20]
 8009480:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80095d8 <_strtod_l+0x598>
 8009484:	2322      	movs	r3, #34	@ 0x22
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	f04f 0a00 	mov.w	sl, #0
 800948c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800948e:	2b00      	cmp	r3, #0
 8009490:	f43f ae0f 	beq.w	80090b2 <_strtod_l+0x72>
 8009494:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009496:	9805      	ldr	r0, [sp, #20]
 8009498:	f002 ffe2 	bl	800c460 <_Bfree>
 800949c:	9805      	ldr	r0, [sp, #20]
 800949e:	4649      	mov	r1, r9
 80094a0:	f002 ffde 	bl	800c460 <_Bfree>
 80094a4:	9805      	ldr	r0, [sp, #20]
 80094a6:	4641      	mov	r1, r8
 80094a8:	f002 ffda 	bl	800c460 <_Bfree>
 80094ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80094ae:	9805      	ldr	r0, [sp, #20]
 80094b0:	f002 ffd6 	bl	800c460 <_Bfree>
 80094b4:	9805      	ldr	r0, [sp, #20]
 80094b6:	4621      	mov	r1, r4
 80094b8:	f002 ffd2 	bl	800c460 <_Bfree>
 80094bc:	e5f9      	b.n	80090b2 <_strtod_l+0x72>
 80094be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80094c4:	4293      	cmp	r3, r2
 80094c6:	dbbc      	blt.n	8009442 <_strtod_l+0x402>
 80094c8:	4c41      	ldr	r4, [pc, #260]	@ (80095d0 <_strtod_l+0x590>)
 80094ca:	f1c5 050f 	rsb	r5, r5, #15
 80094ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80094d2:	4652      	mov	r2, sl
 80094d4:	465b      	mov	r3, fp
 80094d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094da:	f7f7 f88d 	bl	80005f8 <__aeabi_dmul>
 80094de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e0:	1b5d      	subs	r5, r3, r5
 80094e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80094e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80094ea:	e78f      	b.n	800940c <_strtod_l+0x3cc>
 80094ec:	3316      	adds	r3, #22
 80094ee:	dba8      	blt.n	8009442 <_strtod_l+0x402>
 80094f0:	4b37      	ldr	r3, [pc, #220]	@ (80095d0 <_strtod_l+0x590>)
 80094f2:	eba9 0808 	sub.w	r8, r9, r8
 80094f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80094fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80094fe:	4650      	mov	r0, sl
 8009500:	4659      	mov	r1, fp
 8009502:	f7f7 f9a3 	bl	800084c <__aeabi_ddiv>
 8009506:	e783      	b.n	8009410 <_strtod_l+0x3d0>
 8009508:	4b32      	ldr	r3, [pc, #200]	@ (80095d4 <_strtod_l+0x594>)
 800950a:	9308      	str	r3, [sp, #32]
 800950c:	2300      	movs	r3, #0
 800950e:	1124      	asrs	r4, r4, #4
 8009510:	4650      	mov	r0, sl
 8009512:	4659      	mov	r1, fp
 8009514:	461e      	mov	r6, r3
 8009516:	2c01      	cmp	r4, #1
 8009518:	dc21      	bgt.n	800955e <_strtod_l+0x51e>
 800951a:	b10b      	cbz	r3, 8009520 <_strtod_l+0x4e0>
 800951c:	4682      	mov	sl, r0
 800951e:	468b      	mov	fp, r1
 8009520:	492c      	ldr	r1, [pc, #176]	@ (80095d4 <_strtod_l+0x594>)
 8009522:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009526:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800952a:	4652      	mov	r2, sl
 800952c:	465b      	mov	r3, fp
 800952e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009532:	f7f7 f861 	bl	80005f8 <__aeabi_dmul>
 8009536:	4b28      	ldr	r3, [pc, #160]	@ (80095d8 <_strtod_l+0x598>)
 8009538:	460a      	mov	r2, r1
 800953a:	400b      	ands	r3, r1
 800953c:	4927      	ldr	r1, [pc, #156]	@ (80095dc <_strtod_l+0x59c>)
 800953e:	428b      	cmp	r3, r1
 8009540:	4682      	mov	sl, r0
 8009542:	d898      	bhi.n	8009476 <_strtod_l+0x436>
 8009544:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009548:	428b      	cmp	r3, r1
 800954a:	bf86      	itte	hi
 800954c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80095e0 <_strtod_l+0x5a0>
 8009550:	f04f 3aff 	movhi.w	sl, #4294967295
 8009554:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009558:	2300      	movs	r3, #0
 800955a:	9308      	str	r3, [sp, #32]
 800955c:	e07a      	b.n	8009654 <_strtod_l+0x614>
 800955e:	07e2      	lsls	r2, r4, #31
 8009560:	d505      	bpl.n	800956e <_strtod_l+0x52e>
 8009562:	9b08      	ldr	r3, [sp, #32]
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f7f7 f846 	bl	80005f8 <__aeabi_dmul>
 800956c:	2301      	movs	r3, #1
 800956e:	9a08      	ldr	r2, [sp, #32]
 8009570:	3208      	adds	r2, #8
 8009572:	3601      	adds	r6, #1
 8009574:	1064      	asrs	r4, r4, #1
 8009576:	9208      	str	r2, [sp, #32]
 8009578:	e7cd      	b.n	8009516 <_strtod_l+0x4d6>
 800957a:	d0ed      	beq.n	8009558 <_strtod_l+0x518>
 800957c:	4264      	negs	r4, r4
 800957e:	f014 020f 	ands.w	r2, r4, #15
 8009582:	d00a      	beq.n	800959a <_strtod_l+0x55a>
 8009584:	4b12      	ldr	r3, [pc, #72]	@ (80095d0 <_strtod_l+0x590>)
 8009586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800958a:	4650      	mov	r0, sl
 800958c:	4659      	mov	r1, fp
 800958e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009592:	f7f7 f95b 	bl	800084c <__aeabi_ddiv>
 8009596:	4682      	mov	sl, r0
 8009598:	468b      	mov	fp, r1
 800959a:	1124      	asrs	r4, r4, #4
 800959c:	d0dc      	beq.n	8009558 <_strtod_l+0x518>
 800959e:	2c1f      	cmp	r4, #31
 80095a0:	dd20      	ble.n	80095e4 <_strtod_l+0x5a4>
 80095a2:	2400      	movs	r4, #0
 80095a4:	46a0      	mov	r8, r4
 80095a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80095a8:	46a1      	mov	r9, r4
 80095aa:	9a05      	ldr	r2, [sp, #20]
 80095ac:	2322      	movs	r3, #34	@ 0x22
 80095ae:	f04f 0a00 	mov.w	sl, #0
 80095b2:	f04f 0b00 	mov.w	fp, #0
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	e768      	b.n	800948c <_strtod_l+0x44c>
 80095ba:	bf00      	nop
 80095bc:	0800f61e 	.word	0x0800f61e
 80095c0:	0800f4c0 	.word	0x0800f4c0
 80095c4:	0800f616 	.word	0x0800f616
 80095c8:	0800f702 	.word	0x0800f702
 80095cc:	0800f6fe 	.word	0x0800f6fe
 80095d0:	0800f868 	.word	0x0800f868
 80095d4:	0800f840 	.word	0x0800f840
 80095d8:	7ff00000 	.word	0x7ff00000
 80095dc:	7ca00000 	.word	0x7ca00000
 80095e0:	7fefffff 	.word	0x7fefffff
 80095e4:	f014 0310 	ands.w	r3, r4, #16
 80095e8:	bf18      	it	ne
 80095ea:	236a      	movne	r3, #106	@ 0x6a
 80095ec:	4ea9      	ldr	r6, [pc, #676]	@ (8009894 <_strtod_l+0x854>)
 80095ee:	9308      	str	r3, [sp, #32]
 80095f0:	4650      	mov	r0, sl
 80095f2:	4659      	mov	r1, fp
 80095f4:	2300      	movs	r3, #0
 80095f6:	07e2      	lsls	r2, r4, #31
 80095f8:	d504      	bpl.n	8009604 <_strtod_l+0x5c4>
 80095fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80095fe:	f7f6 fffb 	bl	80005f8 <__aeabi_dmul>
 8009602:	2301      	movs	r3, #1
 8009604:	1064      	asrs	r4, r4, #1
 8009606:	f106 0608 	add.w	r6, r6, #8
 800960a:	d1f4      	bne.n	80095f6 <_strtod_l+0x5b6>
 800960c:	b10b      	cbz	r3, 8009612 <_strtod_l+0x5d2>
 800960e:	4682      	mov	sl, r0
 8009610:	468b      	mov	fp, r1
 8009612:	9b08      	ldr	r3, [sp, #32]
 8009614:	b1b3      	cbz	r3, 8009644 <_strtod_l+0x604>
 8009616:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800961a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800961e:	2b00      	cmp	r3, #0
 8009620:	4659      	mov	r1, fp
 8009622:	dd0f      	ble.n	8009644 <_strtod_l+0x604>
 8009624:	2b1f      	cmp	r3, #31
 8009626:	dd55      	ble.n	80096d4 <_strtod_l+0x694>
 8009628:	2b34      	cmp	r3, #52	@ 0x34
 800962a:	bfde      	ittt	le
 800962c:	f04f 33ff 	movle.w	r3, #4294967295
 8009630:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009634:	4093      	lslle	r3, r2
 8009636:	f04f 0a00 	mov.w	sl, #0
 800963a:	bfcc      	ite	gt
 800963c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009640:	ea03 0b01 	andle.w	fp, r3, r1
 8009644:	2200      	movs	r2, #0
 8009646:	2300      	movs	r3, #0
 8009648:	4650      	mov	r0, sl
 800964a:	4659      	mov	r1, fp
 800964c:	f7f7 fa3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009650:	2800      	cmp	r0, #0
 8009652:	d1a6      	bne.n	80095a2 <_strtod_l+0x562>
 8009654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800965a:	9805      	ldr	r0, [sp, #20]
 800965c:	462b      	mov	r3, r5
 800965e:	463a      	mov	r2, r7
 8009660:	f002 ff66 	bl	800c530 <__s2b>
 8009664:	900a      	str	r0, [sp, #40]	@ 0x28
 8009666:	2800      	cmp	r0, #0
 8009668:	f43f af05 	beq.w	8009476 <_strtod_l+0x436>
 800966c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800966e:	2a00      	cmp	r2, #0
 8009670:	eba9 0308 	sub.w	r3, r9, r8
 8009674:	bfa8      	it	ge
 8009676:	2300      	movge	r3, #0
 8009678:	9312      	str	r3, [sp, #72]	@ 0x48
 800967a:	2400      	movs	r4, #0
 800967c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009680:	9316      	str	r3, [sp, #88]	@ 0x58
 8009682:	46a0      	mov	r8, r4
 8009684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009686:	9805      	ldr	r0, [sp, #20]
 8009688:	6859      	ldr	r1, [r3, #4]
 800968a:	f002 fea9 	bl	800c3e0 <_Balloc>
 800968e:	4681      	mov	r9, r0
 8009690:	2800      	cmp	r0, #0
 8009692:	f43f aef4 	beq.w	800947e <_strtod_l+0x43e>
 8009696:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009698:	691a      	ldr	r2, [r3, #16]
 800969a:	3202      	adds	r2, #2
 800969c:	f103 010c 	add.w	r1, r3, #12
 80096a0:	0092      	lsls	r2, r2, #2
 80096a2:	300c      	adds	r0, #12
 80096a4:	f001 fbc7 	bl	800ae36 <memcpy>
 80096a8:	ec4b ab10 	vmov	d0, sl, fp
 80096ac:	9805      	ldr	r0, [sp, #20]
 80096ae:	aa1c      	add	r2, sp, #112	@ 0x70
 80096b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80096b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80096b6:	f003 fa77 	bl	800cba8 <__d2b>
 80096ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80096bc:	2800      	cmp	r0, #0
 80096be:	f43f aede 	beq.w	800947e <_strtod_l+0x43e>
 80096c2:	9805      	ldr	r0, [sp, #20]
 80096c4:	2101      	movs	r1, #1
 80096c6:	f002 ffc9 	bl	800c65c <__i2b>
 80096ca:	4680      	mov	r8, r0
 80096cc:	b948      	cbnz	r0, 80096e2 <_strtod_l+0x6a2>
 80096ce:	f04f 0800 	mov.w	r8, #0
 80096d2:	e6d4      	b.n	800947e <_strtod_l+0x43e>
 80096d4:	f04f 32ff 	mov.w	r2, #4294967295
 80096d8:	fa02 f303 	lsl.w	r3, r2, r3
 80096dc:	ea03 0a0a 	and.w	sl, r3, sl
 80096e0:	e7b0      	b.n	8009644 <_strtod_l+0x604>
 80096e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80096e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80096e6:	2d00      	cmp	r5, #0
 80096e8:	bfab      	itete	ge
 80096ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80096ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80096ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80096f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80096f2:	bfac      	ite	ge
 80096f4:	18ef      	addge	r7, r5, r3
 80096f6:	1b5e      	sublt	r6, r3, r5
 80096f8:	9b08      	ldr	r3, [sp, #32]
 80096fa:	1aed      	subs	r5, r5, r3
 80096fc:	4415      	add	r5, r2
 80096fe:	4b66      	ldr	r3, [pc, #408]	@ (8009898 <_strtod_l+0x858>)
 8009700:	3d01      	subs	r5, #1
 8009702:	429d      	cmp	r5, r3
 8009704:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009708:	da50      	bge.n	80097ac <_strtod_l+0x76c>
 800970a:	1b5b      	subs	r3, r3, r5
 800970c:	2b1f      	cmp	r3, #31
 800970e:	eba2 0203 	sub.w	r2, r2, r3
 8009712:	f04f 0101 	mov.w	r1, #1
 8009716:	dc3d      	bgt.n	8009794 <_strtod_l+0x754>
 8009718:	fa01 f303 	lsl.w	r3, r1, r3
 800971c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800971e:	2300      	movs	r3, #0
 8009720:	9310      	str	r3, [sp, #64]	@ 0x40
 8009722:	18bd      	adds	r5, r7, r2
 8009724:	9b08      	ldr	r3, [sp, #32]
 8009726:	42af      	cmp	r7, r5
 8009728:	4416      	add	r6, r2
 800972a:	441e      	add	r6, r3
 800972c:	463b      	mov	r3, r7
 800972e:	bfa8      	it	ge
 8009730:	462b      	movge	r3, r5
 8009732:	42b3      	cmp	r3, r6
 8009734:	bfa8      	it	ge
 8009736:	4633      	movge	r3, r6
 8009738:	2b00      	cmp	r3, #0
 800973a:	bfc2      	ittt	gt
 800973c:	1aed      	subgt	r5, r5, r3
 800973e:	1af6      	subgt	r6, r6, r3
 8009740:	1aff      	subgt	r7, r7, r3
 8009742:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009744:	2b00      	cmp	r3, #0
 8009746:	dd16      	ble.n	8009776 <_strtod_l+0x736>
 8009748:	4641      	mov	r1, r8
 800974a:	9805      	ldr	r0, [sp, #20]
 800974c:	461a      	mov	r2, r3
 800974e:	f003 f845 	bl	800c7dc <__pow5mult>
 8009752:	4680      	mov	r8, r0
 8009754:	2800      	cmp	r0, #0
 8009756:	d0ba      	beq.n	80096ce <_strtod_l+0x68e>
 8009758:	4601      	mov	r1, r0
 800975a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800975c:	9805      	ldr	r0, [sp, #20]
 800975e:	f002 ff93 	bl	800c688 <__multiply>
 8009762:	900e      	str	r0, [sp, #56]	@ 0x38
 8009764:	2800      	cmp	r0, #0
 8009766:	f43f ae8a 	beq.w	800947e <_strtod_l+0x43e>
 800976a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800976c:	9805      	ldr	r0, [sp, #20]
 800976e:	f002 fe77 	bl	800c460 <_Bfree>
 8009772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009774:	931a      	str	r3, [sp, #104]	@ 0x68
 8009776:	2d00      	cmp	r5, #0
 8009778:	dc1d      	bgt.n	80097b6 <_strtod_l+0x776>
 800977a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800977c:	2b00      	cmp	r3, #0
 800977e:	dd23      	ble.n	80097c8 <_strtod_l+0x788>
 8009780:	4649      	mov	r1, r9
 8009782:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009784:	9805      	ldr	r0, [sp, #20]
 8009786:	f003 f829 	bl	800c7dc <__pow5mult>
 800978a:	4681      	mov	r9, r0
 800978c:	b9e0      	cbnz	r0, 80097c8 <_strtod_l+0x788>
 800978e:	f04f 0900 	mov.w	r9, #0
 8009792:	e674      	b.n	800947e <_strtod_l+0x43e>
 8009794:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009798:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800979c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80097a0:	35e2      	adds	r5, #226	@ 0xe2
 80097a2:	fa01 f305 	lsl.w	r3, r1, r5
 80097a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80097a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80097aa:	e7ba      	b.n	8009722 <_strtod_l+0x6e2>
 80097ac:	2300      	movs	r3, #0
 80097ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80097b0:	2301      	movs	r3, #1
 80097b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80097b4:	e7b5      	b.n	8009722 <_strtod_l+0x6e2>
 80097b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097b8:	9805      	ldr	r0, [sp, #20]
 80097ba:	462a      	mov	r2, r5
 80097bc:	f003 f868 	bl	800c890 <__lshift>
 80097c0:	901a      	str	r0, [sp, #104]	@ 0x68
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d1d9      	bne.n	800977a <_strtod_l+0x73a>
 80097c6:	e65a      	b.n	800947e <_strtod_l+0x43e>
 80097c8:	2e00      	cmp	r6, #0
 80097ca:	dd07      	ble.n	80097dc <_strtod_l+0x79c>
 80097cc:	4649      	mov	r1, r9
 80097ce:	9805      	ldr	r0, [sp, #20]
 80097d0:	4632      	mov	r2, r6
 80097d2:	f003 f85d 	bl	800c890 <__lshift>
 80097d6:	4681      	mov	r9, r0
 80097d8:	2800      	cmp	r0, #0
 80097da:	d0d8      	beq.n	800978e <_strtod_l+0x74e>
 80097dc:	2f00      	cmp	r7, #0
 80097de:	dd08      	ble.n	80097f2 <_strtod_l+0x7b2>
 80097e0:	4641      	mov	r1, r8
 80097e2:	9805      	ldr	r0, [sp, #20]
 80097e4:	463a      	mov	r2, r7
 80097e6:	f003 f853 	bl	800c890 <__lshift>
 80097ea:	4680      	mov	r8, r0
 80097ec:	2800      	cmp	r0, #0
 80097ee:	f43f ae46 	beq.w	800947e <_strtod_l+0x43e>
 80097f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097f4:	9805      	ldr	r0, [sp, #20]
 80097f6:	464a      	mov	r2, r9
 80097f8:	f003 f8d2 	bl	800c9a0 <__mdiff>
 80097fc:	4604      	mov	r4, r0
 80097fe:	2800      	cmp	r0, #0
 8009800:	f43f ae3d 	beq.w	800947e <_strtod_l+0x43e>
 8009804:	68c3      	ldr	r3, [r0, #12]
 8009806:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009808:	2300      	movs	r3, #0
 800980a:	60c3      	str	r3, [r0, #12]
 800980c:	4641      	mov	r1, r8
 800980e:	f003 f8ab 	bl	800c968 <__mcmp>
 8009812:	2800      	cmp	r0, #0
 8009814:	da46      	bge.n	80098a4 <_strtod_l+0x864>
 8009816:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009818:	ea53 030a 	orrs.w	r3, r3, sl
 800981c:	d16c      	bne.n	80098f8 <_strtod_l+0x8b8>
 800981e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009822:	2b00      	cmp	r3, #0
 8009824:	d168      	bne.n	80098f8 <_strtod_l+0x8b8>
 8009826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800982a:	0d1b      	lsrs	r3, r3, #20
 800982c:	051b      	lsls	r3, r3, #20
 800982e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009832:	d961      	bls.n	80098f8 <_strtod_l+0x8b8>
 8009834:	6963      	ldr	r3, [r4, #20]
 8009836:	b913      	cbnz	r3, 800983e <_strtod_l+0x7fe>
 8009838:	6923      	ldr	r3, [r4, #16]
 800983a:	2b01      	cmp	r3, #1
 800983c:	dd5c      	ble.n	80098f8 <_strtod_l+0x8b8>
 800983e:	4621      	mov	r1, r4
 8009840:	2201      	movs	r2, #1
 8009842:	9805      	ldr	r0, [sp, #20]
 8009844:	f003 f824 	bl	800c890 <__lshift>
 8009848:	4641      	mov	r1, r8
 800984a:	4604      	mov	r4, r0
 800984c:	f003 f88c 	bl	800c968 <__mcmp>
 8009850:	2800      	cmp	r0, #0
 8009852:	dd51      	ble.n	80098f8 <_strtod_l+0x8b8>
 8009854:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009858:	9a08      	ldr	r2, [sp, #32]
 800985a:	0d1b      	lsrs	r3, r3, #20
 800985c:	051b      	lsls	r3, r3, #20
 800985e:	2a00      	cmp	r2, #0
 8009860:	d06b      	beq.n	800993a <_strtod_l+0x8fa>
 8009862:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009866:	d868      	bhi.n	800993a <_strtod_l+0x8fa>
 8009868:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800986c:	f67f ae9d 	bls.w	80095aa <_strtod_l+0x56a>
 8009870:	4b0a      	ldr	r3, [pc, #40]	@ (800989c <_strtod_l+0x85c>)
 8009872:	4650      	mov	r0, sl
 8009874:	4659      	mov	r1, fp
 8009876:	2200      	movs	r2, #0
 8009878:	f7f6 febe 	bl	80005f8 <__aeabi_dmul>
 800987c:	4b08      	ldr	r3, [pc, #32]	@ (80098a0 <_strtod_l+0x860>)
 800987e:	400b      	ands	r3, r1
 8009880:	4682      	mov	sl, r0
 8009882:	468b      	mov	fp, r1
 8009884:	2b00      	cmp	r3, #0
 8009886:	f47f ae05 	bne.w	8009494 <_strtod_l+0x454>
 800988a:	9a05      	ldr	r2, [sp, #20]
 800988c:	2322      	movs	r3, #34	@ 0x22
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	e600      	b.n	8009494 <_strtod_l+0x454>
 8009892:	bf00      	nop
 8009894:	0800f4e8 	.word	0x0800f4e8
 8009898:	fffffc02 	.word	0xfffffc02
 800989c:	39500000 	.word	0x39500000
 80098a0:	7ff00000 	.word	0x7ff00000
 80098a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80098a8:	d165      	bne.n	8009976 <_strtod_l+0x936>
 80098aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80098ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098b0:	b35a      	cbz	r2, 800990a <_strtod_l+0x8ca>
 80098b2:	4a9f      	ldr	r2, [pc, #636]	@ (8009b30 <_strtod_l+0xaf0>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d12b      	bne.n	8009910 <_strtod_l+0x8d0>
 80098b8:	9b08      	ldr	r3, [sp, #32]
 80098ba:	4651      	mov	r1, sl
 80098bc:	b303      	cbz	r3, 8009900 <_strtod_l+0x8c0>
 80098be:	4b9d      	ldr	r3, [pc, #628]	@ (8009b34 <_strtod_l+0xaf4>)
 80098c0:	465a      	mov	r2, fp
 80098c2:	4013      	ands	r3, r2
 80098c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80098c8:	f04f 32ff 	mov.w	r2, #4294967295
 80098cc:	d81b      	bhi.n	8009906 <_strtod_l+0x8c6>
 80098ce:	0d1b      	lsrs	r3, r3, #20
 80098d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80098d4:	fa02 f303 	lsl.w	r3, r2, r3
 80098d8:	4299      	cmp	r1, r3
 80098da:	d119      	bne.n	8009910 <_strtod_l+0x8d0>
 80098dc:	4b96      	ldr	r3, [pc, #600]	@ (8009b38 <_strtod_l+0xaf8>)
 80098de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d102      	bne.n	80098ea <_strtod_l+0x8aa>
 80098e4:	3101      	adds	r1, #1
 80098e6:	f43f adca 	beq.w	800947e <_strtod_l+0x43e>
 80098ea:	4b92      	ldr	r3, [pc, #584]	@ (8009b34 <_strtod_l+0xaf4>)
 80098ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098ee:	401a      	ands	r2, r3
 80098f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80098f4:	f04f 0a00 	mov.w	sl, #0
 80098f8:	9b08      	ldr	r3, [sp, #32]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1b8      	bne.n	8009870 <_strtod_l+0x830>
 80098fe:	e5c9      	b.n	8009494 <_strtod_l+0x454>
 8009900:	f04f 33ff 	mov.w	r3, #4294967295
 8009904:	e7e8      	b.n	80098d8 <_strtod_l+0x898>
 8009906:	4613      	mov	r3, r2
 8009908:	e7e6      	b.n	80098d8 <_strtod_l+0x898>
 800990a:	ea53 030a 	orrs.w	r3, r3, sl
 800990e:	d0a1      	beq.n	8009854 <_strtod_l+0x814>
 8009910:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009912:	b1db      	cbz	r3, 800994c <_strtod_l+0x90c>
 8009914:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009916:	4213      	tst	r3, r2
 8009918:	d0ee      	beq.n	80098f8 <_strtod_l+0x8b8>
 800991a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800991c:	9a08      	ldr	r2, [sp, #32]
 800991e:	4650      	mov	r0, sl
 8009920:	4659      	mov	r1, fp
 8009922:	b1bb      	cbz	r3, 8009954 <_strtod_l+0x914>
 8009924:	f7ff fb6b 	bl	8008ffe <sulp>
 8009928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800992c:	ec53 2b10 	vmov	r2, r3, d0
 8009930:	f7f6 fcac 	bl	800028c <__adddf3>
 8009934:	4682      	mov	sl, r0
 8009936:	468b      	mov	fp, r1
 8009938:	e7de      	b.n	80098f8 <_strtod_l+0x8b8>
 800993a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800993e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009942:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009946:	f04f 3aff 	mov.w	sl, #4294967295
 800994a:	e7d5      	b.n	80098f8 <_strtod_l+0x8b8>
 800994c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800994e:	ea13 0f0a 	tst.w	r3, sl
 8009952:	e7e1      	b.n	8009918 <_strtod_l+0x8d8>
 8009954:	f7ff fb53 	bl	8008ffe <sulp>
 8009958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800995c:	ec53 2b10 	vmov	r2, r3, d0
 8009960:	f7f6 fc92 	bl	8000288 <__aeabi_dsub>
 8009964:	2200      	movs	r2, #0
 8009966:	2300      	movs	r3, #0
 8009968:	4682      	mov	sl, r0
 800996a:	468b      	mov	fp, r1
 800996c:	f7f7 f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8009970:	2800      	cmp	r0, #0
 8009972:	d0c1      	beq.n	80098f8 <_strtod_l+0x8b8>
 8009974:	e619      	b.n	80095aa <_strtod_l+0x56a>
 8009976:	4641      	mov	r1, r8
 8009978:	4620      	mov	r0, r4
 800997a:	f003 f96d 	bl	800cc58 <__ratio>
 800997e:	ec57 6b10 	vmov	r6, r7, d0
 8009982:	2200      	movs	r2, #0
 8009984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	f7f7 f8b0 	bl	8000af0 <__aeabi_dcmple>
 8009990:	2800      	cmp	r0, #0
 8009992:	d06f      	beq.n	8009a74 <_strtod_l+0xa34>
 8009994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009996:	2b00      	cmp	r3, #0
 8009998:	d17a      	bne.n	8009a90 <_strtod_l+0xa50>
 800999a:	f1ba 0f00 	cmp.w	sl, #0
 800999e:	d158      	bne.n	8009a52 <_strtod_l+0xa12>
 80099a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d15a      	bne.n	8009a60 <_strtod_l+0xa20>
 80099aa:	4b64      	ldr	r3, [pc, #400]	@ (8009b3c <_strtod_l+0xafc>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	4630      	mov	r0, r6
 80099b0:	4639      	mov	r1, r7
 80099b2:	f7f7 f893 	bl	8000adc <__aeabi_dcmplt>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d159      	bne.n	8009a6e <_strtod_l+0xa2e>
 80099ba:	4630      	mov	r0, r6
 80099bc:	4639      	mov	r1, r7
 80099be:	4b60      	ldr	r3, [pc, #384]	@ (8009b40 <_strtod_l+0xb00>)
 80099c0:	2200      	movs	r2, #0
 80099c2:	f7f6 fe19 	bl	80005f8 <__aeabi_dmul>
 80099c6:	4606      	mov	r6, r0
 80099c8:	460f      	mov	r7, r1
 80099ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80099ce:	9606      	str	r6, [sp, #24]
 80099d0:	9307      	str	r3, [sp, #28]
 80099d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099d6:	4d57      	ldr	r5, [pc, #348]	@ (8009b34 <_strtod_l+0xaf4>)
 80099d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80099dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099de:	401d      	ands	r5, r3
 80099e0:	4b58      	ldr	r3, [pc, #352]	@ (8009b44 <_strtod_l+0xb04>)
 80099e2:	429d      	cmp	r5, r3
 80099e4:	f040 80b2 	bne.w	8009b4c <_strtod_l+0xb0c>
 80099e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80099ee:	ec4b ab10 	vmov	d0, sl, fp
 80099f2:	f003 f869 	bl	800cac8 <__ulp>
 80099f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099fa:	ec51 0b10 	vmov	r0, r1, d0
 80099fe:	f7f6 fdfb 	bl	80005f8 <__aeabi_dmul>
 8009a02:	4652      	mov	r2, sl
 8009a04:	465b      	mov	r3, fp
 8009a06:	f7f6 fc41 	bl	800028c <__adddf3>
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4949      	ldr	r1, [pc, #292]	@ (8009b34 <_strtod_l+0xaf4>)
 8009a0e:	4a4e      	ldr	r2, [pc, #312]	@ (8009b48 <_strtod_l+0xb08>)
 8009a10:	4019      	ands	r1, r3
 8009a12:	4291      	cmp	r1, r2
 8009a14:	4682      	mov	sl, r0
 8009a16:	d942      	bls.n	8009a9e <_strtod_l+0xa5e>
 8009a18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a1a:	4b47      	ldr	r3, [pc, #284]	@ (8009b38 <_strtod_l+0xaf8>)
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d103      	bne.n	8009a28 <_strtod_l+0x9e8>
 8009a20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a22:	3301      	adds	r3, #1
 8009a24:	f43f ad2b 	beq.w	800947e <_strtod_l+0x43e>
 8009a28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009b38 <_strtod_l+0xaf8>
 8009a2c:	f04f 3aff 	mov.w	sl, #4294967295
 8009a30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a32:	9805      	ldr	r0, [sp, #20]
 8009a34:	f002 fd14 	bl	800c460 <_Bfree>
 8009a38:	9805      	ldr	r0, [sp, #20]
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	f002 fd10 	bl	800c460 <_Bfree>
 8009a40:	9805      	ldr	r0, [sp, #20]
 8009a42:	4641      	mov	r1, r8
 8009a44:	f002 fd0c 	bl	800c460 <_Bfree>
 8009a48:	9805      	ldr	r0, [sp, #20]
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	f002 fd08 	bl	800c460 <_Bfree>
 8009a50:	e618      	b.n	8009684 <_strtod_l+0x644>
 8009a52:	f1ba 0f01 	cmp.w	sl, #1
 8009a56:	d103      	bne.n	8009a60 <_strtod_l+0xa20>
 8009a58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f43f ada5 	beq.w	80095aa <_strtod_l+0x56a>
 8009a60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009b10 <_strtod_l+0xad0>
 8009a64:	4f35      	ldr	r7, [pc, #212]	@ (8009b3c <_strtod_l+0xafc>)
 8009a66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a6a:	2600      	movs	r6, #0
 8009a6c:	e7b1      	b.n	80099d2 <_strtod_l+0x992>
 8009a6e:	4f34      	ldr	r7, [pc, #208]	@ (8009b40 <_strtod_l+0xb00>)
 8009a70:	2600      	movs	r6, #0
 8009a72:	e7aa      	b.n	80099ca <_strtod_l+0x98a>
 8009a74:	4b32      	ldr	r3, [pc, #200]	@ (8009b40 <_strtod_l+0xb00>)
 8009a76:	4630      	mov	r0, r6
 8009a78:	4639      	mov	r1, r7
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f7f6 fdbc 	bl	80005f8 <__aeabi_dmul>
 8009a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a82:	4606      	mov	r6, r0
 8009a84:	460f      	mov	r7, r1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d09f      	beq.n	80099ca <_strtod_l+0x98a>
 8009a8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009a8e:	e7a0      	b.n	80099d2 <_strtod_l+0x992>
 8009a90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009b18 <_strtod_l+0xad8>
 8009a94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a98:	ec57 6b17 	vmov	r6, r7, d7
 8009a9c:	e799      	b.n	80099d2 <_strtod_l+0x992>
 8009a9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009aa2:	9b08      	ldr	r3, [sp, #32]
 8009aa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1c1      	bne.n	8009a30 <_strtod_l+0x9f0>
 8009aac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ab0:	0d1b      	lsrs	r3, r3, #20
 8009ab2:	051b      	lsls	r3, r3, #20
 8009ab4:	429d      	cmp	r5, r3
 8009ab6:	d1bb      	bne.n	8009a30 <_strtod_l+0x9f0>
 8009ab8:	4630      	mov	r0, r6
 8009aba:	4639      	mov	r1, r7
 8009abc:	f7f7 f8fc 	bl	8000cb8 <__aeabi_d2lz>
 8009ac0:	f7f6 fd6c 	bl	800059c <__aeabi_l2d>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 fbdc 	bl	8000288 <__aeabi_dsub>
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009ad8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ade:	ea46 060a 	orr.w	r6, r6, sl
 8009ae2:	431e      	orrs	r6, r3
 8009ae4:	d06f      	beq.n	8009bc6 <_strtod_l+0xb86>
 8009ae6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b20 <_strtod_l+0xae0>)
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	f7f6 fff6 	bl	8000adc <__aeabi_dcmplt>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	f47f accf 	bne.w	8009494 <_strtod_l+0x454>
 8009af6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009b28 <_strtod_l+0xae8>)
 8009af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b00:	f7f7 f80a 	bl	8000b18 <__aeabi_dcmpgt>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d093      	beq.n	8009a30 <_strtod_l+0x9f0>
 8009b08:	e4c4      	b.n	8009494 <_strtod_l+0x454>
 8009b0a:	bf00      	nop
 8009b0c:	f3af 8000 	nop.w
 8009b10:	00000000 	.word	0x00000000
 8009b14:	bff00000 	.word	0xbff00000
 8009b18:	00000000 	.word	0x00000000
 8009b1c:	3ff00000 	.word	0x3ff00000
 8009b20:	94a03595 	.word	0x94a03595
 8009b24:	3fdfffff 	.word	0x3fdfffff
 8009b28:	35afe535 	.word	0x35afe535
 8009b2c:	3fe00000 	.word	0x3fe00000
 8009b30:	000fffff 	.word	0x000fffff
 8009b34:	7ff00000 	.word	0x7ff00000
 8009b38:	7fefffff 	.word	0x7fefffff
 8009b3c:	3ff00000 	.word	0x3ff00000
 8009b40:	3fe00000 	.word	0x3fe00000
 8009b44:	7fe00000 	.word	0x7fe00000
 8009b48:	7c9fffff 	.word	0x7c9fffff
 8009b4c:	9b08      	ldr	r3, [sp, #32]
 8009b4e:	b323      	cbz	r3, 8009b9a <_strtod_l+0xb5a>
 8009b50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009b54:	d821      	bhi.n	8009b9a <_strtod_l+0xb5a>
 8009b56:	a328      	add	r3, pc, #160	@ (adr r3, 8009bf8 <_strtod_l+0xbb8>)
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	4639      	mov	r1, r7
 8009b60:	f7f6 ffc6 	bl	8000af0 <__aeabi_dcmple>
 8009b64:	b1a0      	cbz	r0, 8009b90 <_strtod_l+0xb50>
 8009b66:	4639      	mov	r1, r7
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f7f7 f81d 	bl	8000ba8 <__aeabi_d2uiz>
 8009b6e:	2801      	cmp	r0, #1
 8009b70:	bf38      	it	cc
 8009b72:	2001      	movcc	r0, #1
 8009b74:	f7f6 fcc6 	bl	8000504 <__aeabi_ui2d>
 8009b78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	460f      	mov	r7, r1
 8009b7e:	b9fb      	cbnz	r3, 8009bc0 <_strtod_l+0xb80>
 8009b80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b84:	9014      	str	r0, [sp, #80]	@ 0x50
 8009b86:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009b8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009b96:	1b5b      	subs	r3, r3, r5
 8009b98:	9311      	str	r3, [sp, #68]	@ 0x44
 8009b9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009b9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009ba2:	f002 ff91 	bl	800cac8 <__ulp>
 8009ba6:	4650      	mov	r0, sl
 8009ba8:	ec53 2b10 	vmov	r2, r3, d0
 8009bac:	4659      	mov	r1, fp
 8009bae:	f7f6 fd23 	bl	80005f8 <__aeabi_dmul>
 8009bb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009bb6:	f7f6 fb69 	bl	800028c <__adddf3>
 8009bba:	4682      	mov	sl, r0
 8009bbc:	468b      	mov	fp, r1
 8009bbe:	e770      	b.n	8009aa2 <_strtod_l+0xa62>
 8009bc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009bc4:	e7e0      	b.n	8009b88 <_strtod_l+0xb48>
 8009bc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c00 <_strtod_l+0xbc0>)
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	f7f6 ff86 	bl	8000adc <__aeabi_dcmplt>
 8009bd0:	e798      	b.n	8009b04 <_strtod_l+0xac4>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009bd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bda:	6013      	str	r3, [r2, #0]
 8009bdc:	f7ff ba6d 	b.w	80090ba <_strtod_l+0x7a>
 8009be0:	2a65      	cmp	r2, #101	@ 0x65
 8009be2:	f43f ab66 	beq.w	80092b2 <_strtod_l+0x272>
 8009be6:	2a45      	cmp	r2, #69	@ 0x45
 8009be8:	f43f ab63 	beq.w	80092b2 <_strtod_l+0x272>
 8009bec:	2301      	movs	r3, #1
 8009bee:	f7ff bb9e 	b.w	800932e <_strtod_l+0x2ee>
 8009bf2:	bf00      	nop
 8009bf4:	f3af 8000 	nop.w
 8009bf8:	ffc00000 	.word	0xffc00000
 8009bfc:	41dfffff 	.word	0x41dfffff
 8009c00:	94a03595 	.word	0x94a03595
 8009c04:	3fcfffff 	.word	0x3fcfffff

08009c08 <_strtod_r>:
 8009c08:	4b01      	ldr	r3, [pc, #4]	@ (8009c10 <_strtod_r+0x8>)
 8009c0a:	f7ff ba19 	b.w	8009040 <_strtod_l>
 8009c0e:	bf00      	nop
 8009c10:	200000e4 	.word	0x200000e4

08009c14 <strtod>:
 8009c14:	460a      	mov	r2, r1
 8009c16:	4601      	mov	r1, r0
 8009c18:	4802      	ldr	r0, [pc, #8]	@ (8009c24 <strtod+0x10>)
 8009c1a:	4b03      	ldr	r3, [pc, #12]	@ (8009c28 <strtod+0x14>)
 8009c1c:	6800      	ldr	r0, [r0, #0]
 8009c1e:	f7ff ba0f 	b.w	8009040 <_strtod_l>
 8009c22:	bf00      	nop
 8009c24:	20000250 	.word	0x20000250
 8009c28:	200000e4 	.word	0x200000e4

08009c2c <_strtol_l.constprop.0>:
 8009c2c:	2b24      	cmp	r3, #36	@ 0x24
 8009c2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c32:	4686      	mov	lr, r0
 8009c34:	4690      	mov	r8, r2
 8009c36:	d801      	bhi.n	8009c3c <_strtol_l.constprop.0+0x10>
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d106      	bne.n	8009c4a <_strtol_l.constprop.0+0x1e>
 8009c3c:	f001 f8ce 	bl	800addc <__errno>
 8009c40:	2316      	movs	r3, #22
 8009c42:	6003      	str	r3, [r0, #0]
 8009c44:	2000      	movs	r0, #0
 8009c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c4a:	4834      	ldr	r0, [pc, #208]	@ (8009d1c <_strtol_l.constprop.0+0xf0>)
 8009c4c:	460d      	mov	r5, r1
 8009c4e:	462a      	mov	r2, r5
 8009c50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c54:	5d06      	ldrb	r6, [r0, r4]
 8009c56:	f016 0608 	ands.w	r6, r6, #8
 8009c5a:	d1f8      	bne.n	8009c4e <_strtol_l.constprop.0+0x22>
 8009c5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009c5e:	d12d      	bne.n	8009cbc <_strtol_l.constprop.0+0x90>
 8009c60:	782c      	ldrb	r4, [r5, #0]
 8009c62:	2601      	movs	r6, #1
 8009c64:	1c95      	adds	r5, r2, #2
 8009c66:	f033 0210 	bics.w	r2, r3, #16
 8009c6a:	d109      	bne.n	8009c80 <_strtol_l.constprop.0+0x54>
 8009c6c:	2c30      	cmp	r4, #48	@ 0x30
 8009c6e:	d12a      	bne.n	8009cc6 <_strtol_l.constprop.0+0x9a>
 8009c70:	782a      	ldrb	r2, [r5, #0]
 8009c72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009c76:	2a58      	cmp	r2, #88	@ 0x58
 8009c78:	d125      	bne.n	8009cc6 <_strtol_l.constprop.0+0x9a>
 8009c7a:	786c      	ldrb	r4, [r5, #1]
 8009c7c:	2310      	movs	r3, #16
 8009c7e:	3502      	adds	r5, #2
 8009c80:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009c84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009c88:	2200      	movs	r2, #0
 8009c8a:	fbbc f9f3 	udiv	r9, ip, r3
 8009c8e:	4610      	mov	r0, r2
 8009c90:	fb03 ca19 	mls	sl, r3, r9, ip
 8009c94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009c98:	2f09      	cmp	r7, #9
 8009c9a:	d81b      	bhi.n	8009cd4 <_strtol_l.constprop.0+0xa8>
 8009c9c:	463c      	mov	r4, r7
 8009c9e:	42a3      	cmp	r3, r4
 8009ca0:	dd27      	ble.n	8009cf2 <_strtol_l.constprop.0+0xc6>
 8009ca2:	1c57      	adds	r7, r2, #1
 8009ca4:	d007      	beq.n	8009cb6 <_strtol_l.constprop.0+0x8a>
 8009ca6:	4581      	cmp	r9, r0
 8009ca8:	d320      	bcc.n	8009cec <_strtol_l.constprop.0+0xc0>
 8009caa:	d101      	bne.n	8009cb0 <_strtol_l.constprop.0+0x84>
 8009cac:	45a2      	cmp	sl, r4
 8009cae:	db1d      	blt.n	8009cec <_strtol_l.constprop.0+0xc0>
 8009cb0:	fb00 4003 	mla	r0, r0, r3, r4
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cba:	e7eb      	b.n	8009c94 <_strtol_l.constprop.0+0x68>
 8009cbc:	2c2b      	cmp	r4, #43	@ 0x2b
 8009cbe:	bf04      	itt	eq
 8009cc0:	782c      	ldrbeq	r4, [r5, #0]
 8009cc2:	1c95      	addeq	r5, r2, #2
 8009cc4:	e7cf      	b.n	8009c66 <_strtol_l.constprop.0+0x3a>
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1da      	bne.n	8009c80 <_strtol_l.constprop.0+0x54>
 8009cca:	2c30      	cmp	r4, #48	@ 0x30
 8009ccc:	bf0c      	ite	eq
 8009cce:	2308      	moveq	r3, #8
 8009cd0:	230a      	movne	r3, #10
 8009cd2:	e7d5      	b.n	8009c80 <_strtol_l.constprop.0+0x54>
 8009cd4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009cd8:	2f19      	cmp	r7, #25
 8009cda:	d801      	bhi.n	8009ce0 <_strtol_l.constprop.0+0xb4>
 8009cdc:	3c37      	subs	r4, #55	@ 0x37
 8009cde:	e7de      	b.n	8009c9e <_strtol_l.constprop.0+0x72>
 8009ce0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009ce4:	2f19      	cmp	r7, #25
 8009ce6:	d804      	bhi.n	8009cf2 <_strtol_l.constprop.0+0xc6>
 8009ce8:	3c57      	subs	r4, #87	@ 0x57
 8009cea:	e7d8      	b.n	8009c9e <_strtol_l.constprop.0+0x72>
 8009cec:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf0:	e7e1      	b.n	8009cb6 <_strtol_l.constprop.0+0x8a>
 8009cf2:	1c53      	adds	r3, r2, #1
 8009cf4:	d108      	bne.n	8009d08 <_strtol_l.constprop.0+0xdc>
 8009cf6:	2322      	movs	r3, #34	@ 0x22
 8009cf8:	f8ce 3000 	str.w	r3, [lr]
 8009cfc:	4660      	mov	r0, ip
 8009cfe:	f1b8 0f00 	cmp.w	r8, #0
 8009d02:	d0a0      	beq.n	8009c46 <_strtol_l.constprop.0+0x1a>
 8009d04:	1e69      	subs	r1, r5, #1
 8009d06:	e006      	b.n	8009d16 <_strtol_l.constprop.0+0xea>
 8009d08:	b106      	cbz	r6, 8009d0c <_strtol_l.constprop.0+0xe0>
 8009d0a:	4240      	negs	r0, r0
 8009d0c:	f1b8 0f00 	cmp.w	r8, #0
 8009d10:	d099      	beq.n	8009c46 <_strtol_l.constprop.0+0x1a>
 8009d12:	2a00      	cmp	r2, #0
 8009d14:	d1f6      	bne.n	8009d04 <_strtol_l.constprop.0+0xd8>
 8009d16:	f8c8 1000 	str.w	r1, [r8]
 8009d1a:	e794      	b.n	8009c46 <_strtol_l.constprop.0+0x1a>
 8009d1c:	0800f511 	.word	0x0800f511

08009d20 <_strtol_r>:
 8009d20:	f7ff bf84 	b.w	8009c2c <_strtol_l.constprop.0>

08009d24 <strtol>:
 8009d24:	4613      	mov	r3, r2
 8009d26:	460a      	mov	r2, r1
 8009d28:	4601      	mov	r1, r0
 8009d2a:	4802      	ldr	r0, [pc, #8]	@ (8009d34 <strtol+0x10>)
 8009d2c:	6800      	ldr	r0, [r0, #0]
 8009d2e:	f7ff bf7d 	b.w	8009c2c <_strtol_l.constprop.0>
 8009d32:	bf00      	nop
 8009d34:	20000250 	.word	0x20000250

08009d38 <__cvt>:
 8009d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d3c:	ec57 6b10 	vmov	r6, r7, d0
 8009d40:	2f00      	cmp	r7, #0
 8009d42:	460c      	mov	r4, r1
 8009d44:	4619      	mov	r1, r3
 8009d46:	463b      	mov	r3, r7
 8009d48:	bfbb      	ittet	lt
 8009d4a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009d4e:	461f      	movlt	r7, r3
 8009d50:	2300      	movge	r3, #0
 8009d52:	232d      	movlt	r3, #45	@ 0x2d
 8009d54:	700b      	strb	r3, [r1, #0]
 8009d56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d58:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009d5c:	4691      	mov	r9, r2
 8009d5e:	f023 0820 	bic.w	r8, r3, #32
 8009d62:	bfbc      	itt	lt
 8009d64:	4632      	movlt	r2, r6
 8009d66:	4616      	movlt	r6, r2
 8009d68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d6c:	d005      	beq.n	8009d7a <__cvt+0x42>
 8009d6e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009d72:	d100      	bne.n	8009d76 <__cvt+0x3e>
 8009d74:	3401      	adds	r4, #1
 8009d76:	2102      	movs	r1, #2
 8009d78:	e000      	b.n	8009d7c <__cvt+0x44>
 8009d7a:	2103      	movs	r1, #3
 8009d7c:	ab03      	add	r3, sp, #12
 8009d7e:	9301      	str	r3, [sp, #4]
 8009d80:	ab02      	add	r3, sp, #8
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	ec47 6b10 	vmov	d0, r6, r7
 8009d88:	4653      	mov	r3, sl
 8009d8a:	4622      	mov	r2, r4
 8009d8c:	f001 f918 	bl	800afc0 <_dtoa_r>
 8009d90:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009d94:	4605      	mov	r5, r0
 8009d96:	d119      	bne.n	8009dcc <__cvt+0x94>
 8009d98:	f019 0f01 	tst.w	r9, #1
 8009d9c:	d00e      	beq.n	8009dbc <__cvt+0x84>
 8009d9e:	eb00 0904 	add.w	r9, r0, r4
 8009da2:	2200      	movs	r2, #0
 8009da4:	2300      	movs	r3, #0
 8009da6:	4630      	mov	r0, r6
 8009da8:	4639      	mov	r1, r7
 8009daa:	f7f6 fe8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dae:	b108      	cbz	r0, 8009db4 <__cvt+0x7c>
 8009db0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009db4:	2230      	movs	r2, #48	@ 0x30
 8009db6:	9b03      	ldr	r3, [sp, #12]
 8009db8:	454b      	cmp	r3, r9
 8009dba:	d31e      	bcc.n	8009dfa <__cvt+0xc2>
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009dc0:	1b5b      	subs	r3, r3, r5
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	6013      	str	r3, [r2, #0]
 8009dc6:	b004      	add	sp, #16
 8009dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dcc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009dd0:	eb00 0904 	add.w	r9, r0, r4
 8009dd4:	d1e5      	bne.n	8009da2 <__cvt+0x6a>
 8009dd6:	7803      	ldrb	r3, [r0, #0]
 8009dd8:	2b30      	cmp	r3, #48	@ 0x30
 8009dda:	d10a      	bne.n	8009df2 <__cvt+0xba>
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2300      	movs	r3, #0
 8009de0:	4630      	mov	r0, r6
 8009de2:	4639      	mov	r1, r7
 8009de4:	f7f6 fe70 	bl	8000ac8 <__aeabi_dcmpeq>
 8009de8:	b918      	cbnz	r0, 8009df2 <__cvt+0xba>
 8009dea:	f1c4 0401 	rsb	r4, r4, #1
 8009dee:	f8ca 4000 	str.w	r4, [sl]
 8009df2:	f8da 3000 	ldr.w	r3, [sl]
 8009df6:	4499      	add	r9, r3
 8009df8:	e7d3      	b.n	8009da2 <__cvt+0x6a>
 8009dfa:	1c59      	adds	r1, r3, #1
 8009dfc:	9103      	str	r1, [sp, #12]
 8009dfe:	701a      	strb	r2, [r3, #0]
 8009e00:	e7d9      	b.n	8009db6 <__cvt+0x7e>

08009e02 <__exponent>:
 8009e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e04:	2900      	cmp	r1, #0
 8009e06:	bfba      	itte	lt
 8009e08:	4249      	neglt	r1, r1
 8009e0a:	232d      	movlt	r3, #45	@ 0x2d
 8009e0c:	232b      	movge	r3, #43	@ 0x2b
 8009e0e:	2909      	cmp	r1, #9
 8009e10:	7002      	strb	r2, [r0, #0]
 8009e12:	7043      	strb	r3, [r0, #1]
 8009e14:	dd29      	ble.n	8009e6a <__exponent+0x68>
 8009e16:	f10d 0307 	add.w	r3, sp, #7
 8009e1a:	461d      	mov	r5, r3
 8009e1c:	270a      	movs	r7, #10
 8009e1e:	461a      	mov	r2, r3
 8009e20:	fbb1 f6f7 	udiv	r6, r1, r7
 8009e24:	fb07 1416 	mls	r4, r7, r6, r1
 8009e28:	3430      	adds	r4, #48	@ 0x30
 8009e2a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009e2e:	460c      	mov	r4, r1
 8009e30:	2c63      	cmp	r4, #99	@ 0x63
 8009e32:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e36:	4631      	mov	r1, r6
 8009e38:	dcf1      	bgt.n	8009e1e <__exponent+0x1c>
 8009e3a:	3130      	adds	r1, #48	@ 0x30
 8009e3c:	1e94      	subs	r4, r2, #2
 8009e3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009e42:	1c41      	adds	r1, r0, #1
 8009e44:	4623      	mov	r3, r4
 8009e46:	42ab      	cmp	r3, r5
 8009e48:	d30a      	bcc.n	8009e60 <__exponent+0x5e>
 8009e4a:	f10d 0309 	add.w	r3, sp, #9
 8009e4e:	1a9b      	subs	r3, r3, r2
 8009e50:	42ac      	cmp	r4, r5
 8009e52:	bf88      	it	hi
 8009e54:	2300      	movhi	r3, #0
 8009e56:	3302      	adds	r3, #2
 8009e58:	4403      	add	r3, r0
 8009e5a:	1a18      	subs	r0, r3, r0
 8009e5c:	b003      	add	sp, #12
 8009e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e60:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009e64:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009e68:	e7ed      	b.n	8009e46 <__exponent+0x44>
 8009e6a:	2330      	movs	r3, #48	@ 0x30
 8009e6c:	3130      	adds	r1, #48	@ 0x30
 8009e6e:	7083      	strb	r3, [r0, #2]
 8009e70:	70c1      	strb	r1, [r0, #3]
 8009e72:	1d03      	adds	r3, r0, #4
 8009e74:	e7f1      	b.n	8009e5a <__exponent+0x58>
	...

08009e78 <_printf_float>:
 8009e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	b08d      	sub	sp, #52	@ 0x34
 8009e7e:	460c      	mov	r4, r1
 8009e80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009e84:	4616      	mov	r6, r2
 8009e86:	461f      	mov	r7, r3
 8009e88:	4605      	mov	r5, r0
 8009e8a:	f000 ff5d 	bl	800ad48 <_localeconv_r>
 8009e8e:	6803      	ldr	r3, [r0, #0]
 8009e90:	9304      	str	r3, [sp, #16]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7f6 f9ec 	bl	8000270 <strlen>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8009ea0:	9005      	str	r0, [sp, #20]
 8009ea2:	3307      	adds	r3, #7
 8009ea4:	f023 0307 	bic.w	r3, r3, #7
 8009ea8:	f103 0208 	add.w	r2, r3, #8
 8009eac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009eb0:	f8d4 b000 	ldr.w	fp, [r4]
 8009eb4:	f8c8 2000 	str.w	r2, [r8]
 8009eb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ebc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009ec0:	9307      	str	r3, [sp, #28]
 8009ec2:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ec6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009eca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ece:	4b9c      	ldr	r3, [pc, #624]	@ (800a140 <_printf_float+0x2c8>)
 8009ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed4:	f7f6 fe2a 	bl	8000b2c <__aeabi_dcmpun>
 8009ed8:	bb70      	cbnz	r0, 8009f38 <_printf_float+0xc0>
 8009eda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ede:	4b98      	ldr	r3, [pc, #608]	@ (800a140 <_printf_float+0x2c8>)
 8009ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee4:	f7f6 fe04 	bl	8000af0 <__aeabi_dcmple>
 8009ee8:	bb30      	cbnz	r0, 8009f38 <_printf_float+0xc0>
 8009eea:	2200      	movs	r2, #0
 8009eec:	2300      	movs	r3, #0
 8009eee:	4640      	mov	r0, r8
 8009ef0:	4649      	mov	r1, r9
 8009ef2:	f7f6 fdf3 	bl	8000adc <__aeabi_dcmplt>
 8009ef6:	b110      	cbz	r0, 8009efe <_printf_float+0x86>
 8009ef8:	232d      	movs	r3, #45	@ 0x2d
 8009efa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009efe:	4a91      	ldr	r2, [pc, #580]	@ (800a144 <_printf_float+0x2cc>)
 8009f00:	4b91      	ldr	r3, [pc, #580]	@ (800a148 <_printf_float+0x2d0>)
 8009f02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009f06:	bf94      	ite	ls
 8009f08:	4690      	movls	r8, r2
 8009f0a:	4698      	movhi	r8, r3
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	6123      	str	r3, [r4, #16]
 8009f10:	f02b 0304 	bic.w	r3, fp, #4
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	f04f 0900 	mov.w	r9, #0
 8009f1a:	9700      	str	r7, [sp, #0]
 8009f1c:	4633      	mov	r3, r6
 8009f1e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009f20:	4621      	mov	r1, r4
 8009f22:	4628      	mov	r0, r5
 8009f24:	f000 f9d2 	bl	800a2cc <_printf_common>
 8009f28:	3001      	adds	r0, #1
 8009f2a:	f040 808d 	bne.w	800a048 <_printf_float+0x1d0>
 8009f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f32:	b00d      	add	sp, #52	@ 0x34
 8009f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f38:	4642      	mov	r2, r8
 8009f3a:	464b      	mov	r3, r9
 8009f3c:	4640      	mov	r0, r8
 8009f3e:	4649      	mov	r1, r9
 8009f40:	f7f6 fdf4 	bl	8000b2c <__aeabi_dcmpun>
 8009f44:	b140      	cbz	r0, 8009f58 <_printf_float+0xe0>
 8009f46:	464b      	mov	r3, r9
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	bfbc      	itt	lt
 8009f4c:	232d      	movlt	r3, #45	@ 0x2d
 8009f4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009f52:	4a7e      	ldr	r2, [pc, #504]	@ (800a14c <_printf_float+0x2d4>)
 8009f54:	4b7e      	ldr	r3, [pc, #504]	@ (800a150 <_printf_float+0x2d8>)
 8009f56:	e7d4      	b.n	8009f02 <_printf_float+0x8a>
 8009f58:	6863      	ldr	r3, [r4, #4]
 8009f5a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009f5e:	9206      	str	r2, [sp, #24]
 8009f60:	1c5a      	adds	r2, r3, #1
 8009f62:	d13b      	bne.n	8009fdc <_printf_float+0x164>
 8009f64:	2306      	movs	r3, #6
 8009f66:	6063      	str	r3, [r4, #4]
 8009f68:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	6022      	str	r2, [r4, #0]
 8009f70:	9303      	str	r3, [sp, #12]
 8009f72:	ab0a      	add	r3, sp, #40	@ 0x28
 8009f74:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009f78:	ab09      	add	r3, sp, #36	@ 0x24
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	6861      	ldr	r1, [r4, #4]
 8009f7e:	ec49 8b10 	vmov	d0, r8, r9
 8009f82:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009f86:	4628      	mov	r0, r5
 8009f88:	f7ff fed6 	bl	8009d38 <__cvt>
 8009f8c:	9b06      	ldr	r3, [sp, #24]
 8009f8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f90:	2b47      	cmp	r3, #71	@ 0x47
 8009f92:	4680      	mov	r8, r0
 8009f94:	d129      	bne.n	8009fea <_printf_float+0x172>
 8009f96:	1cc8      	adds	r0, r1, #3
 8009f98:	db02      	blt.n	8009fa0 <_printf_float+0x128>
 8009f9a:	6863      	ldr	r3, [r4, #4]
 8009f9c:	4299      	cmp	r1, r3
 8009f9e:	dd41      	ble.n	800a024 <_printf_float+0x1ac>
 8009fa0:	f1aa 0a02 	sub.w	sl, sl, #2
 8009fa4:	fa5f fa8a 	uxtb.w	sl, sl
 8009fa8:	3901      	subs	r1, #1
 8009faa:	4652      	mov	r2, sl
 8009fac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009fb0:	9109      	str	r1, [sp, #36]	@ 0x24
 8009fb2:	f7ff ff26 	bl	8009e02 <__exponent>
 8009fb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009fb8:	1813      	adds	r3, r2, r0
 8009fba:	2a01      	cmp	r2, #1
 8009fbc:	4681      	mov	r9, r0
 8009fbe:	6123      	str	r3, [r4, #16]
 8009fc0:	dc02      	bgt.n	8009fc8 <_printf_float+0x150>
 8009fc2:	6822      	ldr	r2, [r4, #0]
 8009fc4:	07d2      	lsls	r2, r2, #31
 8009fc6:	d501      	bpl.n	8009fcc <_printf_float+0x154>
 8009fc8:	3301      	adds	r3, #1
 8009fca:	6123      	str	r3, [r4, #16]
 8009fcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d0a2      	beq.n	8009f1a <_printf_float+0xa2>
 8009fd4:	232d      	movs	r3, #45	@ 0x2d
 8009fd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fda:	e79e      	b.n	8009f1a <_printf_float+0xa2>
 8009fdc:	9a06      	ldr	r2, [sp, #24]
 8009fde:	2a47      	cmp	r2, #71	@ 0x47
 8009fe0:	d1c2      	bne.n	8009f68 <_printf_float+0xf0>
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1c0      	bne.n	8009f68 <_printf_float+0xf0>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e7bd      	b.n	8009f66 <_printf_float+0xee>
 8009fea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009fee:	d9db      	bls.n	8009fa8 <_printf_float+0x130>
 8009ff0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009ff4:	d118      	bne.n	800a028 <_printf_float+0x1b0>
 8009ff6:	2900      	cmp	r1, #0
 8009ff8:	6863      	ldr	r3, [r4, #4]
 8009ffa:	dd0b      	ble.n	800a014 <_printf_float+0x19c>
 8009ffc:	6121      	str	r1, [r4, #16]
 8009ffe:	b913      	cbnz	r3, 800a006 <_printf_float+0x18e>
 800a000:	6822      	ldr	r2, [r4, #0]
 800a002:	07d0      	lsls	r0, r2, #31
 800a004:	d502      	bpl.n	800a00c <_printf_float+0x194>
 800a006:	3301      	adds	r3, #1
 800a008:	440b      	add	r3, r1
 800a00a:	6123      	str	r3, [r4, #16]
 800a00c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a00e:	f04f 0900 	mov.w	r9, #0
 800a012:	e7db      	b.n	8009fcc <_printf_float+0x154>
 800a014:	b913      	cbnz	r3, 800a01c <_printf_float+0x1a4>
 800a016:	6822      	ldr	r2, [r4, #0]
 800a018:	07d2      	lsls	r2, r2, #31
 800a01a:	d501      	bpl.n	800a020 <_printf_float+0x1a8>
 800a01c:	3302      	adds	r3, #2
 800a01e:	e7f4      	b.n	800a00a <_printf_float+0x192>
 800a020:	2301      	movs	r3, #1
 800a022:	e7f2      	b.n	800a00a <_printf_float+0x192>
 800a024:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a028:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a02a:	4299      	cmp	r1, r3
 800a02c:	db05      	blt.n	800a03a <_printf_float+0x1c2>
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	6121      	str	r1, [r4, #16]
 800a032:	07d8      	lsls	r0, r3, #31
 800a034:	d5ea      	bpl.n	800a00c <_printf_float+0x194>
 800a036:	1c4b      	adds	r3, r1, #1
 800a038:	e7e7      	b.n	800a00a <_printf_float+0x192>
 800a03a:	2900      	cmp	r1, #0
 800a03c:	bfd4      	ite	le
 800a03e:	f1c1 0202 	rsble	r2, r1, #2
 800a042:	2201      	movgt	r2, #1
 800a044:	4413      	add	r3, r2
 800a046:	e7e0      	b.n	800a00a <_printf_float+0x192>
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	055a      	lsls	r2, r3, #21
 800a04c:	d407      	bmi.n	800a05e <_printf_float+0x1e6>
 800a04e:	6923      	ldr	r3, [r4, #16]
 800a050:	4642      	mov	r2, r8
 800a052:	4631      	mov	r1, r6
 800a054:	4628      	mov	r0, r5
 800a056:	47b8      	blx	r7
 800a058:	3001      	adds	r0, #1
 800a05a:	d12b      	bne.n	800a0b4 <_printf_float+0x23c>
 800a05c:	e767      	b.n	8009f2e <_printf_float+0xb6>
 800a05e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a062:	f240 80dd 	bls.w	800a220 <_printf_float+0x3a8>
 800a066:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a06a:	2200      	movs	r2, #0
 800a06c:	2300      	movs	r3, #0
 800a06e:	f7f6 fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a072:	2800      	cmp	r0, #0
 800a074:	d033      	beq.n	800a0de <_printf_float+0x266>
 800a076:	4a37      	ldr	r2, [pc, #220]	@ (800a154 <_printf_float+0x2dc>)
 800a078:	2301      	movs	r3, #1
 800a07a:	4631      	mov	r1, r6
 800a07c:	4628      	mov	r0, r5
 800a07e:	47b8      	blx	r7
 800a080:	3001      	adds	r0, #1
 800a082:	f43f af54 	beq.w	8009f2e <_printf_float+0xb6>
 800a086:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a08a:	4543      	cmp	r3, r8
 800a08c:	db02      	blt.n	800a094 <_printf_float+0x21c>
 800a08e:	6823      	ldr	r3, [r4, #0]
 800a090:	07d8      	lsls	r0, r3, #31
 800a092:	d50f      	bpl.n	800a0b4 <_printf_float+0x23c>
 800a094:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a098:	4631      	mov	r1, r6
 800a09a:	4628      	mov	r0, r5
 800a09c:	47b8      	blx	r7
 800a09e:	3001      	adds	r0, #1
 800a0a0:	f43f af45 	beq.w	8009f2e <_printf_float+0xb6>
 800a0a4:	f04f 0900 	mov.w	r9, #0
 800a0a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a0ac:	f104 0a1a 	add.w	sl, r4, #26
 800a0b0:	45c8      	cmp	r8, r9
 800a0b2:	dc09      	bgt.n	800a0c8 <_printf_float+0x250>
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	079b      	lsls	r3, r3, #30
 800a0b8:	f100 8103 	bmi.w	800a2c2 <_printf_float+0x44a>
 800a0bc:	68e0      	ldr	r0, [r4, #12]
 800a0be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0c0:	4298      	cmp	r0, r3
 800a0c2:	bfb8      	it	lt
 800a0c4:	4618      	movlt	r0, r3
 800a0c6:	e734      	b.n	8009f32 <_printf_float+0xba>
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	4652      	mov	r2, sl
 800a0cc:	4631      	mov	r1, r6
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	47b8      	blx	r7
 800a0d2:	3001      	adds	r0, #1
 800a0d4:	f43f af2b 	beq.w	8009f2e <_printf_float+0xb6>
 800a0d8:	f109 0901 	add.w	r9, r9, #1
 800a0dc:	e7e8      	b.n	800a0b0 <_printf_float+0x238>
 800a0de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	dc39      	bgt.n	800a158 <_printf_float+0x2e0>
 800a0e4:	4a1b      	ldr	r2, [pc, #108]	@ (800a154 <_printf_float+0x2dc>)
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	47b8      	blx	r7
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	f43f af1d 	beq.w	8009f2e <_printf_float+0xb6>
 800a0f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a0f8:	ea59 0303 	orrs.w	r3, r9, r3
 800a0fc:	d102      	bne.n	800a104 <_printf_float+0x28c>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	07d9      	lsls	r1, r3, #31
 800a102:	d5d7      	bpl.n	800a0b4 <_printf_float+0x23c>
 800a104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a108:	4631      	mov	r1, r6
 800a10a:	4628      	mov	r0, r5
 800a10c:	47b8      	blx	r7
 800a10e:	3001      	adds	r0, #1
 800a110:	f43f af0d 	beq.w	8009f2e <_printf_float+0xb6>
 800a114:	f04f 0a00 	mov.w	sl, #0
 800a118:	f104 0b1a 	add.w	fp, r4, #26
 800a11c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a11e:	425b      	negs	r3, r3
 800a120:	4553      	cmp	r3, sl
 800a122:	dc01      	bgt.n	800a128 <_printf_float+0x2b0>
 800a124:	464b      	mov	r3, r9
 800a126:	e793      	b.n	800a050 <_printf_float+0x1d8>
 800a128:	2301      	movs	r3, #1
 800a12a:	465a      	mov	r2, fp
 800a12c:	4631      	mov	r1, r6
 800a12e:	4628      	mov	r0, r5
 800a130:	47b8      	blx	r7
 800a132:	3001      	adds	r0, #1
 800a134:	f43f aefb 	beq.w	8009f2e <_printf_float+0xb6>
 800a138:	f10a 0a01 	add.w	sl, sl, #1
 800a13c:	e7ee      	b.n	800a11c <_printf_float+0x2a4>
 800a13e:	bf00      	nop
 800a140:	7fefffff 	.word	0x7fefffff
 800a144:	0800f611 	.word	0x0800f611
 800a148:	0800f615 	.word	0x0800f615
 800a14c:	0800f619 	.word	0x0800f619
 800a150:	0800f61d 	.word	0x0800f61d
 800a154:	0800f621 	.word	0x0800f621
 800a158:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a15a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a15e:	4553      	cmp	r3, sl
 800a160:	bfa8      	it	ge
 800a162:	4653      	movge	r3, sl
 800a164:	2b00      	cmp	r3, #0
 800a166:	4699      	mov	r9, r3
 800a168:	dc36      	bgt.n	800a1d8 <_printf_float+0x360>
 800a16a:	f04f 0b00 	mov.w	fp, #0
 800a16e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a172:	f104 021a 	add.w	r2, r4, #26
 800a176:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a178:	9306      	str	r3, [sp, #24]
 800a17a:	eba3 0309 	sub.w	r3, r3, r9
 800a17e:	455b      	cmp	r3, fp
 800a180:	dc31      	bgt.n	800a1e6 <_printf_float+0x36e>
 800a182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a184:	459a      	cmp	sl, r3
 800a186:	dc3a      	bgt.n	800a1fe <_printf_float+0x386>
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	07da      	lsls	r2, r3, #31
 800a18c:	d437      	bmi.n	800a1fe <_printf_float+0x386>
 800a18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a190:	ebaa 0903 	sub.w	r9, sl, r3
 800a194:	9b06      	ldr	r3, [sp, #24]
 800a196:	ebaa 0303 	sub.w	r3, sl, r3
 800a19a:	4599      	cmp	r9, r3
 800a19c:	bfa8      	it	ge
 800a19e:	4699      	movge	r9, r3
 800a1a0:	f1b9 0f00 	cmp.w	r9, #0
 800a1a4:	dc33      	bgt.n	800a20e <_printf_float+0x396>
 800a1a6:	f04f 0800 	mov.w	r8, #0
 800a1aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1ae:	f104 0b1a 	add.w	fp, r4, #26
 800a1b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1b4:	ebaa 0303 	sub.w	r3, sl, r3
 800a1b8:	eba3 0309 	sub.w	r3, r3, r9
 800a1bc:	4543      	cmp	r3, r8
 800a1be:	f77f af79 	ble.w	800a0b4 <_printf_float+0x23c>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	465a      	mov	r2, fp
 800a1c6:	4631      	mov	r1, r6
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	47b8      	blx	r7
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	f43f aeae 	beq.w	8009f2e <_printf_float+0xb6>
 800a1d2:	f108 0801 	add.w	r8, r8, #1
 800a1d6:	e7ec      	b.n	800a1b2 <_printf_float+0x33a>
 800a1d8:	4642      	mov	r2, r8
 800a1da:	4631      	mov	r1, r6
 800a1dc:	4628      	mov	r0, r5
 800a1de:	47b8      	blx	r7
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d1c2      	bne.n	800a16a <_printf_float+0x2f2>
 800a1e4:	e6a3      	b.n	8009f2e <_printf_float+0xb6>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	4631      	mov	r1, r6
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	9206      	str	r2, [sp, #24]
 800a1ee:	47b8      	blx	r7
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	f43f ae9c 	beq.w	8009f2e <_printf_float+0xb6>
 800a1f6:	9a06      	ldr	r2, [sp, #24]
 800a1f8:	f10b 0b01 	add.w	fp, fp, #1
 800a1fc:	e7bb      	b.n	800a176 <_printf_float+0x2fe>
 800a1fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a202:	4631      	mov	r1, r6
 800a204:	4628      	mov	r0, r5
 800a206:	47b8      	blx	r7
 800a208:	3001      	adds	r0, #1
 800a20a:	d1c0      	bne.n	800a18e <_printf_float+0x316>
 800a20c:	e68f      	b.n	8009f2e <_printf_float+0xb6>
 800a20e:	9a06      	ldr	r2, [sp, #24]
 800a210:	464b      	mov	r3, r9
 800a212:	4442      	add	r2, r8
 800a214:	4631      	mov	r1, r6
 800a216:	4628      	mov	r0, r5
 800a218:	47b8      	blx	r7
 800a21a:	3001      	adds	r0, #1
 800a21c:	d1c3      	bne.n	800a1a6 <_printf_float+0x32e>
 800a21e:	e686      	b.n	8009f2e <_printf_float+0xb6>
 800a220:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a224:	f1ba 0f01 	cmp.w	sl, #1
 800a228:	dc01      	bgt.n	800a22e <_printf_float+0x3b6>
 800a22a:	07db      	lsls	r3, r3, #31
 800a22c:	d536      	bpl.n	800a29c <_printf_float+0x424>
 800a22e:	2301      	movs	r3, #1
 800a230:	4642      	mov	r2, r8
 800a232:	4631      	mov	r1, r6
 800a234:	4628      	mov	r0, r5
 800a236:	47b8      	blx	r7
 800a238:	3001      	adds	r0, #1
 800a23a:	f43f ae78 	beq.w	8009f2e <_printf_float+0xb6>
 800a23e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a242:	4631      	mov	r1, r6
 800a244:	4628      	mov	r0, r5
 800a246:	47b8      	blx	r7
 800a248:	3001      	adds	r0, #1
 800a24a:	f43f ae70 	beq.w	8009f2e <_printf_float+0xb6>
 800a24e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a252:	2200      	movs	r2, #0
 800a254:	2300      	movs	r3, #0
 800a256:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a25a:	f7f6 fc35 	bl	8000ac8 <__aeabi_dcmpeq>
 800a25e:	b9c0      	cbnz	r0, 800a292 <_printf_float+0x41a>
 800a260:	4653      	mov	r3, sl
 800a262:	f108 0201 	add.w	r2, r8, #1
 800a266:	4631      	mov	r1, r6
 800a268:	4628      	mov	r0, r5
 800a26a:	47b8      	blx	r7
 800a26c:	3001      	adds	r0, #1
 800a26e:	d10c      	bne.n	800a28a <_printf_float+0x412>
 800a270:	e65d      	b.n	8009f2e <_printf_float+0xb6>
 800a272:	2301      	movs	r3, #1
 800a274:	465a      	mov	r2, fp
 800a276:	4631      	mov	r1, r6
 800a278:	4628      	mov	r0, r5
 800a27a:	47b8      	blx	r7
 800a27c:	3001      	adds	r0, #1
 800a27e:	f43f ae56 	beq.w	8009f2e <_printf_float+0xb6>
 800a282:	f108 0801 	add.w	r8, r8, #1
 800a286:	45d0      	cmp	r8, sl
 800a288:	dbf3      	blt.n	800a272 <_printf_float+0x3fa>
 800a28a:	464b      	mov	r3, r9
 800a28c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a290:	e6df      	b.n	800a052 <_printf_float+0x1da>
 800a292:	f04f 0800 	mov.w	r8, #0
 800a296:	f104 0b1a 	add.w	fp, r4, #26
 800a29a:	e7f4      	b.n	800a286 <_printf_float+0x40e>
 800a29c:	2301      	movs	r3, #1
 800a29e:	4642      	mov	r2, r8
 800a2a0:	e7e1      	b.n	800a266 <_printf_float+0x3ee>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	464a      	mov	r2, r9
 800a2a6:	4631      	mov	r1, r6
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	47b8      	blx	r7
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	f43f ae3e 	beq.w	8009f2e <_printf_float+0xb6>
 800a2b2:	f108 0801 	add.w	r8, r8, #1
 800a2b6:	68e3      	ldr	r3, [r4, #12]
 800a2b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a2ba:	1a5b      	subs	r3, r3, r1
 800a2bc:	4543      	cmp	r3, r8
 800a2be:	dcf0      	bgt.n	800a2a2 <_printf_float+0x42a>
 800a2c0:	e6fc      	b.n	800a0bc <_printf_float+0x244>
 800a2c2:	f04f 0800 	mov.w	r8, #0
 800a2c6:	f104 0919 	add.w	r9, r4, #25
 800a2ca:	e7f4      	b.n	800a2b6 <_printf_float+0x43e>

0800a2cc <_printf_common>:
 800a2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d0:	4616      	mov	r6, r2
 800a2d2:	4698      	mov	r8, r3
 800a2d4:	688a      	ldr	r2, [r1, #8]
 800a2d6:	690b      	ldr	r3, [r1, #16]
 800a2d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	bfb8      	it	lt
 800a2e0:	4613      	movlt	r3, r2
 800a2e2:	6033      	str	r3, [r6, #0]
 800a2e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a2e8:	4607      	mov	r7, r0
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	b10a      	cbz	r2, 800a2f2 <_printf_common+0x26>
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	6033      	str	r3, [r6, #0]
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	0699      	lsls	r1, r3, #26
 800a2f6:	bf42      	ittt	mi
 800a2f8:	6833      	ldrmi	r3, [r6, #0]
 800a2fa:	3302      	addmi	r3, #2
 800a2fc:	6033      	strmi	r3, [r6, #0]
 800a2fe:	6825      	ldr	r5, [r4, #0]
 800a300:	f015 0506 	ands.w	r5, r5, #6
 800a304:	d106      	bne.n	800a314 <_printf_common+0x48>
 800a306:	f104 0a19 	add.w	sl, r4, #25
 800a30a:	68e3      	ldr	r3, [r4, #12]
 800a30c:	6832      	ldr	r2, [r6, #0]
 800a30e:	1a9b      	subs	r3, r3, r2
 800a310:	42ab      	cmp	r3, r5
 800a312:	dc26      	bgt.n	800a362 <_printf_common+0x96>
 800a314:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a318:	6822      	ldr	r2, [r4, #0]
 800a31a:	3b00      	subs	r3, #0
 800a31c:	bf18      	it	ne
 800a31e:	2301      	movne	r3, #1
 800a320:	0692      	lsls	r2, r2, #26
 800a322:	d42b      	bmi.n	800a37c <_printf_common+0xb0>
 800a324:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a328:	4641      	mov	r1, r8
 800a32a:	4638      	mov	r0, r7
 800a32c:	47c8      	blx	r9
 800a32e:	3001      	adds	r0, #1
 800a330:	d01e      	beq.n	800a370 <_printf_common+0xa4>
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	6922      	ldr	r2, [r4, #16]
 800a336:	f003 0306 	and.w	r3, r3, #6
 800a33a:	2b04      	cmp	r3, #4
 800a33c:	bf02      	ittt	eq
 800a33e:	68e5      	ldreq	r5, [r4, #12]
 800a340:	6833      	ldreq	r3, [r6, #0]
 800a342:	1aed      	subeq	r5, r5, r3
 800a344:	68a3      	ldr	r3, [r4, #8]
 800a346:	bf0c      	ite	eq
 800a348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a34c:	2500      	movne	r5, #0
 800a34e:	4293      	cmp	r3, r2
 800a350:	bfc4      	itt	gt
 800a352:	1a9b      	subgt	r3, r3, r2
 800a354:	18ed      	addgt	r5, r5, r3
 800a356:	2600      	movs	r6, #0
 800a358:	341a      	adds	r4, #26
 800a35a:	42b5      	cmp	r5, r6
 800a35c:	d11a      	bne.n	800a394 <_printf_common+0xc8>
 800a35e:	2000      	movs	r0, #0
 800a360:	e008      	b.n	800a374 <_printf_common+0xa8>
 800a362:	2301      	movs	r3, #1
 800a364:	4652      	mov	r2, sl
 800a366:	4641      	mov	r1, r8
 800a368:	4638      	mov	r0, r7
 800a36a:	47c8      	blx	r9
 800a36c:	3001      	adds	r0, #1
 800a36e:	d103      	bne.n	800a378 <_printf_common+0xac>
 800a370:	f04f 30ff 	mov.w	r0, #4294967295
 800a374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a378:	3501      	adds	r5, #1
 800a37a:	e7c6      	b.n	800a30a <_printf_common+0x3e>
 800a37c:	18e1      	adds	r1, r4, r3
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	2030      	movs	r0, #48	@ 0x30
 800a382:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a386:	4422      	add	r2, r4
 800a388:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a38c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a390:	3302      	adds	r3, #2
 800a392:	e7c7      	b.n	800a324 <_printf_common+0x58>
 800a394:	2301      	movs	r3, #1
 800a396:	4622      	mov	r2, r4
 800a398:	4641      	mov	r1, r8
 800a39a:	4638      	mov	r0, r7
 800a39c:	47c8      	blx	r9
 800a39e:	3001      	adds	r0, #1
 800a3a0:	d0e6      	beq.n	800a370 <_printf_common+0xa4>
 800a3a2:	3601      	adds	r6, #1
 800a3a4:	e7d9      	b.n	800a35a <_printf_common+0x8e>
	...

0800a3a8 <_printf_i>:
 800a3a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ac:	7e0f      	ldrb	r7, [r1, #24]
 800a3ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a3b0:	2f78      	cmp	r7, #120	@ 0x78
 800a3b2:	4691      	mov	r9, r2
 800a3b4:	4680      	mov	r8, r0
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	469a      	mov	sl, r3
 800a3ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a3be:	d807      	bhi.n	800a3d0 <_printf_i+0x28>
 800a3c0:	2f62      	cmp	r7, #98	@ 0x62
 800a3c2:	d80a      	bhi.n	800a3da <_printf_i+0x32>
 800a3c4:	2f00      	cmp	r7, #0
 800a3c6:	f000 80d2 	beq.w	800a56e <_printf_i+0x1c6>
 800a3ca:	2f58      	cmp	r7, #88	@ 0x58
 800a3cc:	f000 80b9 	beq.w	800a542 <_printf_i+0x19a>
 800a3d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a3d8:	e03a      	b.n	800a450 <_printf_i+0xa8>
 800a3da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a3de:	2b15      	cmp	r3, #21
 800a3e0:	d8f6      	bhi.n	800a3d0 <_printf_i+0x28>
 800a3e2:	a101      	add	r1, pc, #4	@ (adr r1, 800a3e8 <_printf_i+0x40>)
 800a3e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3e8:	0800a441 	.word	0x0800a441
 800a3ec:	0800a455 	.word	0x0800a455
 800a3f0:	0800a3d1 	.word	0x0800a3d1
 800a3f4:	0800a3d1 	.word	0x0800a3d1
 800a3f8:	0800a3d1 	.word	0x0800a3d1
 800a3fc:	0800a3d1 	.word	0x0800a3d1
 800a400:	0800a455 	.word	0x0800a455
 800a404:	0800a3d1 	.word	0x0800a3d1
 800a408:	0800a3d1 	.word	0x0800a3d1
 800a40c:	0800a3d1 	.word	0x0800a3d1
 800a410:	0800a3d1 	.word	0x0800a3d1
 800a414:	0800a555 	.word	0x0800a555
 800a418:	0800a47f 	.word	0x0800a47f
 800a41c:	0800a50f 	.word	0x0800a50f
 800a420:	0800a3d1 	.word	0x0800a3d1
 800a424:	0800a3d1 	.word	0x0800a3d1
 800a428:	0800a577 	.word	0x0800a577
 800a42c:	0800a3d1 	.word	0x0800a3d1
 800a430:	0800a47f 	.word	0x0800a47f
 800a434:	0800a3d1 	.word	0x0800a3d1
 800a438:	0800a3d1 	.word	0x0800a3d1
 800a43c:	0800a517 	.word	0x0800a517
 800a440:	6833      	ldr	r3, [r6, #0]
 800a442:	1d1a      	adds	r2, r3, #4
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	6032      	str	r2, [r6, #0]
 800a448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a44c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a450:	2301      	movs	r3, #1
 800a452:	e09d      	b.n	800a590 <_printf_i+0x1e8>
 800a454:	6833      	ldr	r3, [r6, #0]
 800a456:	6820      	ldr	r0, [r4, #0]
 800a458:	1d19      	adds	r1, r3, #4
 800a45a:	6031      	str	r1, [r6, #0]
 800a45c:	0606      	lsls	r6, r0, #24
 800a45e:	d501      	bpl.n	800a464 <_printf_i+0xbc>
 800a460:	681d      	ldr	r5, [r3, #0]
 800a462:	e003      	b.n	800a46c <_printf_i+0xc4>
 800a464:	0645      	lsls	r5, r0, #25
 800a466:	d5fb      	bpl.n	800a460 <_printf_i+0xb8>
 800a468:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a46c:	2d00      	cmp	r5, #0
 800a46e:	da03      	bge.n	800a478 <_printf_i+0xd0>
 800a470:	232d      	movs	r3, #45	@ 0x2d
 800a472:	426d      	negs	r5, r5
 800a474:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a478:	4859      	ldr	r0, [pc, #356]	@ (800a5e0 <_printf_i+0x238>)
 800a47a:	230a      	movs	r3, #10
 800a47c:	e011      	b.n	800a4a2 <_printf_i+0xfa>
 800a47e:	6821      	ldr	r1, [r4, #0]
 800a480:	6833      	ldr	r3, [r6, #0]
 800a482:	0608      	lsls	r0, r1, #24
 800a484:	f853 5b04 	ldr.w	r5, [r3], #4
 800a488:	d402      	bmi.n	800a490 <_printf_i+0xe8>
 800a48a:	0649      	lsls	r1, r1, #25
 800a48c:	bf48      	it	mi
 800a48e:	b2ad      	uxthmi	r5, r5
 800a490:	2f6f      	cmp	r7, #111	@ 0x6f
 800a492:	4853      	ldr	r0, [pc, #332]	@ (800a5e0 <_printf_i+0x238>)
 800a494:	6033      	str	r3, [r6, #0]
 800a496:	bf14      	ite	ne
 800a498:	230a      	movne	r3, #10
 800a49a:	2308      	moveq	r3, #8
 800a49c:	2100      	movs	r1, #0
 800a49e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a4a2:	6866      	ldr	r6, [r4, #4]
 800a4a4:	60a6      	str	r6, [r4, #8]
 800a4a6:	2e00      	cmp	r6, #0
 800a4a8:	bfa2      	ittt	ge
 800a4aa:	6821      	ldrge	r1, [r4, #0]
 800a4ac:	f021 0104 	bicge.w	r1, r1, #4
 800a4b0:	6021      	strge	r1, [r4, #0]
 800a4b2:	b90d      	cbnz	r5, 800a4b8 <_printf_i+0x110>
 800a4b4:	2e00      	cmp	r6, #0
 800a4b6:	d04b      	beq.n	800a550 <_printf_i+0x1a8>
 800a4b8:	4616      	mov	r6, r2
 800a4ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800a4be:	fb03 5711 	mls	r7, r3, r1, r5
 800a4c2:	5dc7      	ldrb	r7, [r0, r7]
 800a4c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a4c8:	462f      	mov	r7, r5
 800a4ca:	42bb      	cmp	r3, r7
 800a4cc:	460d      	mov	r5, r1
 800a4ce:	d9f4      	bls.n	800a4ba <_printf_i+0x112>
 800a4d0:	2b08      	cmp	r3, #8
 800a4d2:	d10b      	bne.n	800a4ec <_printf_i+0x144>
 800a4d4:	6823      	ldr	r3, [r4, #0]
 800a4d6:	07df      	lsls	r7, r3, #31
 800a4d8:	d508      	bpl.n	800a4ec <_printf_i+0x144>
 800a4da:	6923      	ldr	r3, [r4, #16]
 800a4dc:	6861      	ldr	r1, [r4, #4]
 800a4de:	4299      	cmp	r1, r3
 800a4e0:	bfde      	ittt	le
 800a4e2:	2330      	movle	r3, #48	@ 0x30
 800a4e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a4e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a4ec:	1b92      	subs	r2, r2, r6
 800a4ee:	6122      	str	r2, [r4, #16]
 800a4f0:	f8cd a000 	str.w	sl, [sp]
 800a4f4:	464b      	mov	r3, r9
 800a4f6:	aa03      	add	r2, sp, #12
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	f7ff fee6 	bl	800a2cc <_printf_common>
 800a500:	3001      	adds	r0, #1
 800a502:	d14a      	bne.n	800a59a <_printf_i+0x1f2>
 800a504:	f04f 30ff 	mov.w	r0, #4294967295
 800a508:	b004      	add	sp, #16
 800a50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50e:	6823      	ldr	r3, [r4, #0]
 800a510:	f043 0320 	orr.w	r3, r3, #32
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	4833      	ldr	r0, [pc, #204]	@ (800a5e4 <_printf_i+0x23c>)
 800a518:	2778      	movs	r7, #120	@ 0x78
 800a51a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	6831      	ldr	r1, [r6, #0]
 800a522:	061f      	lsls	r7, r3, #24
 800a524:	f851 5b04 	ldr.w	r5, [r1], #4
 800a528:	d402      	bmi.n	800a530 <_printf_i+0x188>
 800a52a:	065f      	lsls	r7, r3, #25
 800a52c:	bf48      	it	mi
 800a52e:	b2ad      	uxthmi	r5, r5
 800a530:	6031      	str	r1, [r6, #0]
 800a532:	07d9      	lsls	r1, r3, #31
 800a534:	bf44      	itt	mi
 800a536:	f043 0320 	orrmi.w	r3, r3, #32
 800a53a:	6023      	strmi	r3, [r4, #0]
 800a53c:	b11d      	cbz	r5, 800a546 <_printf_i+0x19e>
 800a53e:	2310      	movs	r3, #16
 800a540:	e7ac      	b.n	800a49c <_printf_i+0xf4>
 800a542:	4827      	ldr	r0, [pc, #156]	@ (800a5e0 <_printf_i+0x238>)
 800a544:	e7e9      	b.n	800a51a <_printf_i+0x172>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	f023 0320 	bic.w	r3, r3, #32
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	e7f6      	b.n	800a53e <_printf_i+0x196>
 800a550:	4616      	mov	r6, r2
 800a552:	e7bd      	b.n	800a4d0 <_printf_i+0x128>
 800a554:	6833      	ldr	r3, [r6, #0]
 800a556:	6825      	ldr	r5, [r4, #0]
 800a558:	6961      	ldr	r1, [r4, #20]
 800a55a:	1d18      	adds	r0, r3, #4
 800a55c:	6030      	str	r0, [r6, #0]
 800a55e:	062e      	lsls	r6, r5, #24
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	d501      	bpl.n	800a568 <_printf_i+0x1c0>
 800a564:	6019      	str	r1, [r3, #0]
 800a566:	e002      	b.n	800a56e <_printf_i+0x1c6>
 800a568:	0668      	lsls	r0, r5, #25
 800a56a:	d5fb      	bpl.n	800a564 <_printf_i+0x1bc>
 800a56c:	8019      	strh	r1, [r3, #0]
 800a56e:	2300      	movs	r3, #0
 800a570:	6123      	str	r3, [r4, #16]
 800a572:	4616      	mov	r6, r2
 800a574:	e7bc      	b.n	800a4f0 <_printf_i+0x148>
 800a576:	6833      	ldr	r3, [r6, #0]
 800a578:	1d1a      	adds	r2, r3, #4
 800a57a:	6032      	str	r2, [r6, #0]
 800a57c:	681e      	ldr	r6, [r3, #0]
 800a57e:	6862      	ldr	r2, [r4, #4]
 800a580:	2100      	movs	r1, #0
 800a582:	4630      	mov	r0, r6
 800a584:	f7f5 fe24 	bl	80001d0 <memchr>
 800a588:	b108      	cbz	r0, 800a58e <_printf_i+0x1e6>
 800a58a:	1b80      	subs	r0, r0, r6
 800a58c:	6060      	str	r0, [r4, #4]
 800a58e:	6863      	ldr	r3, [r4, #4]
 800a590:	6123      	str	r3, [r4, #16]
 800a592:	2300      	movs	r3, #0
 800a594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a598:	e7aa      	b.n	800a4f0 <_printf_i+0x148>
 800a59a:	6923      	ldr	r3, [r4, #16]
 800a59c:	4632      	mov	r2, r6
 800a59e:	4649      	mov	r1, r9
 800a5a0:	4640      	mov	r0, r8
 800a5a2:	47d0      	blx	sl
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	d0ad      	beq.n	800a504 <_printf_i+0x15c>
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	079b      	lsls	r3, r3, #30
 800a5ac:	d413      	bmi.n	800a5d6 <_printf_i+0x22e>
 800a5ae:	68e0      	ldr	r0, [r4, #12]
 800a5b0:	9b03      	ldr	r3, [sp, #12]
 800a5b2:	4298      	cmp	r0, r3
 800a5b4:	bfb8      	it	lt
 800a5b6:	4618      	movlt	r0, r3
 800a5b8:	e7a6      	b.n	800a508 <_printf_i+0x160>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	4632      	mov	r2, r6
 800a5be:	4649      	mov	r1, r9
 800a5c0:	4640      	mov	r0, r8
 800a5c2:	47d0      	blx	sl
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	d09d      	beq.n	800a504 <_printf_i+0x15c>
 800a5c8:	3501      	adds	r5, #1
 800a5ca:	68e3      	ldr	r3, [r4, #12]
 800a5cc:	9903      	ldr	r1, [sp, #12]
 800a5ce:	1a5b      	subs	r3, r3, r1
 800a5d0:	42ab      	cmp	r3, r5
 800a5d2:	dcf2      	bgt.n	800a5ba <_printf_i+0x212>
 800a5d4:	e7eb      	b.n	800a5ae <_printf_i+0x206>
 800a5d6:	2500      	movs	r5, #0
 800a5d8:	f104 0619 	add.w	r6, r4, #25
 800a5dc:	e7f5      	b.n	800a5ca <_printf_i+0x222>
 800a5de:	bf00      	nop
 800a5e0:	0800f623 	.word	0x0800f623
 800a5e4:	0800f634 	.word	0x0800f634

0800a5e8 <_scanf_float>:
 800a5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	b087      	sub	sp, #28
 800a5ee:	4617      	mov	r7, r2
 800a5f0:	9303      	str	r3, [sp, #12]
 800a5f2:	688b      	ldr	r3, [r1, #8]
 800a5f4:	1e5a      	subs	r2, r3, #1
 800a5f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a5fa:	bf81      	itttt	hi
 800a5fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a600:	eb03 0b05 	addhi.w	fp, r3, r5
 800a604:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a608:	608b      	strhi	r3, [r1, #8]
 800a60a:	680b      	ldr	r3, [r1, #0]
 800a60c:	460a      	mov	r2, r1
 800a60e:	f04f 0500 	mov.w	r5, #0
 800a612:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a616:	f842 3b1c 	str.w	r3, [r2], #28
 800a61a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a61e:	4680      	mov	r8, r0
 800a620:	460c      	mov	r4, r1
 800a622:	bf98      	it	ls
 800a624:	f04f 0b00 	movls.w	fp, #0
 800a628:	9201      	str	r2, [sp, #4]
 800a62a:	4616      	mov	r6, r2
 800a62c:	46aa      	mov	sl, r5
 800a62e:	46a9      	mov	r9, r5
 800a630:	9502      	str	r5, [sp, #8]
 800a632:	68a2      	ldr	r2, [r4, #8]
 800a634:	b152      	cbz	r2, 800a64c <_scanf_float+0x64>
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b4e      	cmp	r3, #78	@ 0x4e
 800a63c:	d864      	bhi.n	800a708 <_scanf_float+0x120>
 800a63e:	2b40      	cmp	r3, #64	@ 0x40
 800a640:	d83c      	bhi.n	800a6bc <_scanf_float+0xd4>
 800a642:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a646:	b2c8      	uxtb	r0, r1
 800a648:	280e      	cmp	r0, #14
 800a64a:	d93a      	bls.n	800a6c2 <_scanf_float+0xda>
 800a64c:	f1b9 0f00 	cmp.w	r9, #0
 800a650:	d003      	beq.n	800a65a <_scanf_float+0x72>
 800a652:	6823      	ldr	r3, [r4, #0]
 800a654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a65e:	f1ba 0f01 	cmp.w	sl, #1
 800a662:	f200 8117 	bhi.w	800a894 <_scanf_float+0x2ac>
 800a666:	9b01      	ldr	r3, [sp, #4]
 800a668:	429e      	cmp	r6, r3
 800a66a:	f200 8108 	bhi.w	800a87e <_scanf_float+0x296>
 800a66e:	2001      	movs	r0, #1
 800a670:	b007      	add	sp, #28
 800a672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a676:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a67a:	2a0d      	cmp	r2, #13
 800a67c:	d8e6      	bhi.n	800a64c <_scanf_float+0x64>
 800a67e:	a101      	add	r1, pc, #4	@ (adr r1, 800a684 <_scanf_float+0x9c>)
 800a680:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a684:	0800a7cb 	.word	0x0800a7cb
 800a688:	0800a64d 	.word	0x0800a64d
 800a68c:	0800a64d 	.word	0x0800a64d
 800a690:	0800a64d 	.word	0x0800a64d
 800a694:	0800a82b 	.word	0x0800a82b
 800a698:	0800a803 	.word	0x0800a803
 800a69c:	0800a64d 	.word	0x0800a64d
 800a6a0:	0800a64d 	.word	0x0800a64d
 800a6a4:	0800a7d9 	.word	0x0800a7d9
 800a6a8:	0800a64d 	.word	0x0800a64d
 800a6ac:	0800a64d 	.word	0x0800a64d
 800a6b0:	0800a64d 	.word	0x0800a64d
 800a6b4:	0800a64d 	.word	0x0800a64d
 800a6b8:	0800a791 	.word	0x0800a791
 800a6bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a6c0:	e7db      	b.n	800a67a <_scanf_float+0x92>
 800a6c2:	290e      	cmp	r1, #14
 800a6c4:	d8c2      	bhi.n	800a64c <_scanf_float+0x64>
 800a6c6:	a001      	add	r0, pc, #4	@ (adr r0, 800a6cc <_scanf_float+0xe4>)
 800a6c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a6cc:	0800a781 	.word	0x0800a781
 800a6d0:	0800a64d 	.word	0x0800a64d
 800a6d4:	0800a781 	.word	0x0800a781
 800a6d8:	0800a817 	.word	0x0800a817
 800a6dc:	0800a64d 	.word	0x0800a64d
 800a6e0:	0800a729 	.word	0x0800a729
 800a6e4:	0800a767 	.word	0x0800a767
 800a6e8:	0800a767 	.word	0x0800a767
 800a6ec:	0800a767 	.word	0x0800a767
 800a6f0:	0800a767 	.word	0x0800a767
 800a6f4:	0800a767 	.word	0x0800a767
 800a6f8:	0800a767 	.word	0x0800a767
 800a6fc:	0800a767 	.word	0x0800a767
 800a700:	0800a767 	.word	0x0800a767
 800a704:	0800a767 	.word	0x0800a767
 800a708:	2b6e      	cmp	r3, #110	@ 0x6e
 800a70a:	d809      	bhi.n	800a720 <_scanf_float+0x138>
 800a70c:	2b60      	cmp	r3, #96	@ 0x60
 800a70e:	d8b2      	bhi.n	800a676 <_scanf_float+0x8e>
 800a710:	2b54      	cmp	r3, #84	@ 0x54
 800a712:	d07b      	beq.n	800a80c <_scanf_float+0x224>
 800a714:	2b59      	cmp	r3, #89	@ 0x59
 800a716:	d199      	bne.n	800a64c <_scanf_float+0x64>
 800a718:	2d07      	cmp	r5, #7
 800a71a:	d197      	bne.n	800a64c <_scanf_float+0x64>
 800a71c:	2508      	movs	r5, #8
 800a71e:	e02c      	b.n	800a77a <_scanf_float+0x192>
 800a720:	2b74      	cmp	r3, #116	@ 0x74
 800a722:	d073      	beq.n	800a80c <_scanf_float+0x224>
 800a724:	2b79      	cmp	r3, #121	@ 0x79
 800a726:	e7f6      	b.n	800a716 <_scanf_float+0x12e>
 800a728:	6821      	ldr	r1, [r4, #0]
 800a72a:	05c8      	lsls	r0, r1, #23
 800a72c:	d51b      	bpl.n	800a766 <_scanf_float+0x17e>
 800a72e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a732:	6021      	str	r1, [r4, #0]
 800a734:	f109 0901 	add.w	r9, r9, #1
 800a738:	f1bb 0f00 	cmp.w	fp, #0
 800a73c:	d003      	beq.n	800a746 <_scanf_float+0x15e>
 800a73e:	3201      	adds	r2, #1
 800a740:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a744:	60a2      	str	r2, [r4, #8]
 800a746:	68a3      	ldr	r3, [r4, #8]
 800a748:	3b01      	subs	r3, #1
 800a74a:	60a3      	str	r3, [r4, #8]
 800a74c:	6923      	ldr	r3, [r4, #16]
 800a74e:	3301      	adds	r3, #1
 800a750:	6123      	str	r3, [r4, #16]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	3b01      	subs	r3, #1
 800a756:	2b00      	cmp	r3, #0
 800a758:	607b      	str	r3, [r7, #4]
 800a75a:	f340 8087 	ble.w	800a86c <_scanf_float+0x284>
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	3301      	adds	r3, #1
 800a762:	603b      	str	r3, [r7, #0]
 800a764:	e765      	b.n	800a632 <_scanf_float+0x4a>
 800a766:	eb1a 0105 	adds.w	r1, sl, r5
 800a76a:	f47f af6f 	bne.w	800a64c <_scanf_float+0x64>
 800a76e:	6822      	ldr	r2, [r4, #0]
 800a770:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a774:	6022      	str	r2, [r4, #0]
 800a776:	460d      	mov	r5, r1
 800a778:	468a      	mov	sl, r1
 800a77a:	f806 3b01 	strb.w	r3, [r6], #1
 800a77e:	e7e2      	b.n	800a746 <_scanf_float+0x15e>
 800a780:	6822      	ldr	r2, [r4, #0]
 800a782:	0610      	lsls	r0, r2, #24
 800a784:	f57f af62 	bpl.w	800a64c <_scanf_float+0x64>
 800a788:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a78c:	6022      	str	r2, [r4, #0]
 800a78e:	e7f4      	b.n	800a77a <_scanf_float+0x192>
 800a790:	f1ba 0f00 	cmp.w	sl, #0
 800a794:	d10e      	bne.n	800a7b4 <_scanf_float+0x1cc>
 800a796:	f1b9 0f00 	cmp.w	r9, #0
 800a79a:	d10e      	bne.n	800a7ba <_scanf_float+0x1d2>
 800a79c:	6822      	ldr	r2, [r4, #0]
 800a79e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a7a2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a7a6:	d108      	bne.n	800a7ba <_scanf_float+0x1d2>
 800a7a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a7ac:	6022      	str	r2, [r4, #0]
 800a7ae:	f04f 0a01 	mov.w	sl, #1
 800a7b2:	e7e2      	b.n	800a77a <_scanf_float+0x192>
 800a7b4:	f1ba 0f02 	cmp.w	sl, #2
 800a7b8:	d055      	beq.n	800a866 <_scanf_float+0x27e>
 800a7ba:	2d01      	cmp	r5, #1
 800a7bc:	d002      	beq.n	800a7c4 <_scanf_float+0x1dc>
 800a7be:	2d04      	cmp	r5, #4
 800a7c0:	f47f af44 	bne.w	800a64c <_scanf_float+0x64>
 800a7c4:	3501      	adds	r5, #1
 800a7c6:	b2ed      	uxtb	r5, r5
 800a7c8:	e7d7      	b.n	800a77a <_scanf_float+0x192>
 800a7ca:	f1ba 0f01 	cmp.w	sl, #1
 800a7ce:	f47f af3d 	bne.w	800a64c <_scanf_float+0x64>
 800a7d2:	f04f 0a02 	mov.w	sl, #2
 800a7d6:	e7d0      	b.n	800a77a <_scanf_float+0x192>
 800a7d8:	b97d      	cbnz	r5, 800a7fa <_scanf_float+0x212>
 800a7da:	f1b9 0f00 	cmp.w	r9, #0
 800a7de:	f47f af38 	bne.w	800a652 <_scanf_float+0x6a>
 800a7e2:	6822      	ldr	r2, [r4, #0]
 800a7e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a7e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a7ec:	f040 8108 	bne.w	800aa00 <_scanf_float+0x418>
 800a7f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a7f4:	6022      	str	r2, [r4, #0]
 800a7f6:	2501      	movs	r5, #1
 800a7f8:	e7bf      	b.n	800a77a <_scanf_float+0x192>
 800a7fa:	2d03      	cmp	r5, #3
 800a7fc:	d0e2      	beq.n	800a7c4 <_scanf_float+0x1dc>
 800a7fe:	2d05      	cmp	r5, #5
 800a800:	e7de      	b.n	800a7c0 <_scanf_float+0x1d8>
 800a802:	2d02      	cmp	r5, #2
 800a804:	f47f af22 	bne.w	800a64c <_scanf_float+0x64>
 800a808:	2503      	movs	r5, #3
 800a80a:	e7b6      	b.n	800a77a <_scanf_float+0x192>
 800a80c:	2d06      	cmp	r5, #6
 800a80e:	f47f af1d 	bne.w	800a64c <_scanf_float+0x64>
 800a812:	2507      	movs	r5, #7
 800a814:	e7b1      	b.n	800a77a <_scanf_float+0x192>
 800a816:	6822      	ldr	r2, [r4, #0]
 800a818:	0591      	lsls	r1, r2, #22
 800a81a:	f57f af17 	bpl.w	800a64c <_scanf_float+0x64>
 800a81e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a822:	6022      	str	r2, [r4, #0]
 800a824:	f8cd 9008 	str.w	r9, [sp, #8]
 800a828:	e7a7      	b.n	800a77a <_scanf_float+0x192>
 800a82a:	6822      	ldr	r2, [r4, #0]
 800a82c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a830:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a834:	d006      	beq.n	800a844 <_scanf_float+0x25c>
 800a836:	0550      	lsls	r0, r2, #21
 800a838:	f57f af08 	bpl.w	800a64c <_scanf_float+0x64>
 800a83c:	f1b9 0f00 	cmp.w	r9, #0
 800a840:	f000 80de 	beq.w	800aa00 <_scanf_float+0x418>
 800a844:	0591      	lsls	r1, r2, #22
 800a846:	bf58      	it	pl
 800a848:	9902      	ldrpl	r1, [sp, #8]
 800a84a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a84e:	bf58      	it	pl
 800a850:	eba9 0101 	subpl.w	r1, r9, r1
 800a854:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a858:	bf58      	it	pl
 800a85a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a85e:	6022      	str	r2, [r4, #0]
 800a860:	f04f 0900 	mov.w	r9, #0
 800a864:	e789      	b.n	800a77a <_scanf_float+0x192>
 800a866:	f04f 0a03 	mov.w	sl, #3
 800a86a:	e786      	b.n	800a77a <_scanf_float+0x192>
 800a86c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a870:	4639      	mov	r1, r7
 800a872:	4640      	mov	r0, r8
 800a874:	4798      	blx	r3
 800a876:	2800      	cmp	r0, #0
 800a878:	f43f aedb 	beq.w	800a632 <_scanf_float+0x4a>
 800a87c:	e6e6      	b.n	800a64c <_scanf_float+0x64>
 800a87e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a882:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a886:	463a      	mov	r2, r7
 800a888:	4640      	mov	r0, r8
 800a88a:	4798      	blx	r3
 800a88c:	6923      	ldr	r3, [r4, #16]
 800a88e:	3b01      	subs	r3, #1
 800a890:	6123      	str	r3, [r4, #16]
 800a892:	e6e8      	b.n	800a666 <_scanf_float+0x7e>
 800a894:	1e6b      	subs	r3, r5, #1
 800a896:	2b06      	cmp	r3, #6
 800a898:	d824      	bhi.n	800a8e4 <_scanf_float+0x2fc>
 800a89a:	2d02      	cmp	r5, #2
 800a89c:	d836      	bhi.n	800a90c <_scanf_float+0x324>
 800a89e:	9b01      	ldr	r3, [sp, #4]
 800a8a0:	429e      	cmp	r6, r3
 800a8a2:	f67f aee4 	bls.w	800a66e <_scanf_float+0x86>
 800a8a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8ae:	463a      	mov	r2, r7
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	4798      	blx	r3
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	6123      	str	r3, [r4, #16]
 800a8ba:	e7f0      	b.n	800a89e <_scanf_float+0x2b6>
 800a8bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8c0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a8c4:	463a      	mov	r2, r7
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	4798      	blx	r3
 800a8ca:	6923      	ldr	r3, [r4, #16]
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	6123      	str	r3, [r4, #16]
 800a8d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8d4:	fa5f fa8a 	uxtb.w	sl, sl
 800a8d8:	f1ba 0f02 	cmp.w	sl, #2
 800a8dc:	d1ee      	bne.n	800a8bc <_scanf_float+0x2d4>
 800a8de:	3d03      	subs	r5, #3
 800a8e0:	b2ed      	uxtb	r5, r5
 800a8e2:	1b76      	subs	r6, r6, r5
 800a8e4:	6823      	ldr	r3, [r4, #0]
 800a8e6:	05da      	lsls	r2, r3, #23
 800a8e8:	d530      	bpl.n	800a94c <_scanf_float+0x364>
 800a8ea:	055b      	lsls	r3, r3, #21
 800a8ec:	d511      	bpl.n	800a912 <_scanf_float+0x32a>
 800a8ee:	9b01      	ldr	r3, [sp, #4]
 800a8f0:	429e      	cmp	r6, r3
 800a8f2:	f67f aebc 	bls.w	800a66e <_scanf_float+0x86>
 800a8f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8fe:	463a      	mov	r2, r7
 800a900:	4640      	mov	r0, r8
 800a902:	4798      	blx	r3
 800a904:	6923      	ldr	r3, [r4, #16]
 800a906:	3b01      	subs	r3, #1
 800a908:	6123      	str	r3, [r4, #16]
 800a90a:	e7f0      	b.n	800a8ee <_scanf_float+0x306>
 800a90c:	46aa      	mov	sl, r5
 800a90e:	46b3      	mov	fp, r6
 800a910:	e7de      	b.n	800a8d0 <_scanf_float+0x2e8>
 800a912:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a916:	6923      	ldr	r3, [r4, #16]
 800a918:	2965      	cmp	r1, #101	@ 0x65
 800a91a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a91e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a922:	6123      	str	r3, [r4, #16]
 800a924:	d00c      	beq.n	800a940 <_scanf_float+0x358>
 800a926:	2945      	cmp	r1, #69	@ 0x45
 800a928:	d00a      	beq.n	800a940 <_scanf_float+0x358>
 800a92a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a92e:	463a      	mov	r2, r7
 800a930:	4640      	mov	r0, r8
 800a932:	4798      	blx	r3
 800a934:	6923      	ldr	r3, [r4, #16]
 800a936:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a93a:	3b01      	subs	r3, #1
 800a93c:	1eb5      	subs	r5, r6, #2
 800a93e:	6123      	str	r3, [r4, #16]
 800a940:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a944:	463a      	mov	r2, r7
 800a946:	4640      	mov	r0, r8
 800a948:	4798      	blx	r3
 800a94a:	462e      	mov	r6, r5
 800a94c:	6822      	ldr	r2, [r4, #0]
 800a94e:	f012 0210 	ands.w	r2, r2, #16
 800a952:	d001      	beq.n	800a958 <_scanf_float+0x370>
 800a954:	2000      	movs	r0, #0
 800a956:	e68b      	b.n	800a670 <_scanf_float+0x88>
 800a958:	7032      	strb	r2, [r6, #0]
 800a95a:	6823      	ldr	r3, [r4, #0]
 800a95c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a964:	d11c      	bne.n	800a9a0 <_scanf_float+0x3b8>
 800a966:	9b02      	ldr	r3, [sp, #8]
 800a968:	454b      	cmp	r3, r9
 800a96a:	eba3 0209 	sub.w	r2, r3, r9
 800a96e:	d123      	bne.n	800a9b8 <_scanf_float+0x3d0>
 800a970:	9901      	ldr	r1, [sp, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	4640      	mov	r0, r8
 800a976:	f7ff f947 	bl	8009c08 <_strtod_r>
 800a97a:	9b03      	ldr	r3, [sp, #12]
 800a97c:	6821      	ldr	r1, [r4, #0]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f011 0f02 	tst.w	r1, #2
 800a984:	ec57 6b10 	vmov	r6, r7, d0
 800a988:	f103 0204 	add.w	r2, r3, #4
 800a98c:	d01f      	beq.n	800a9ce <_scanf_float+0x3e6>
 800a98e:	9903      	ldr	r1, [sp, #12]
 800a990:	600a      	str	r2, [r1, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	e9c3 6700 	strd	r6, r7, [r3]
 800a998:	68e3      	ldr	r3, [r4, #12]
 800a99a:	3301      	adds	r3, #1
 800a99c:	60e3      	str	r3, [r4, #12]
 800a99e:	e7d9      	b.n	800a954 <_scanf_float+0x36c>
 800a9a0:	9b04      	ldr	r3, [sp, #16]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d0e4      	beq.n	800a970 <_scanf_float+0x388>
 800a9a6:	9905      	ldr	r1, [sp, #20]
 800a9a8:	230a      	movs	r3, #10
 800a9aa:	3101      	adds	r1, #1
 800a9ac:	4640      	mov	r0, r8
 800a9ae:	f7ff f9b7 	bl	8009d20 <_strtol_r>
 800a9b2:	9b04      	ldr	r3, [sp, #16]
 800a9b4:	9e05      	ldr	r6, [sp, #20]
 800a9b6:	1ac2      	subs	r2, r0, r3
 800a9b8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a9bc:	429e      	cmp	r6, r3
 800a9be:	bf28      	it	cs
 800a9c0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a9c4:	4910      	ldr	r1, [pc, #64]	@ (800aa08 <_scanf_float+0x420>)
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f000 f8e4 	bl	800ab94 <siprintf>
 800a9cc:	e7d0      	b.n	800a970 <_scanf_float+0x388>
 800a9ce:	f011 0f04 	tst.w	r1, #4
 800a9d2:	9903      	ldr	r1, [sp, #12]
 800a9d4:	600a      	str	r2, [r1, #0]
 800a9d6:	d1dc      	bne.n	800a992 <_scanf_float+0x3aa>
 800a9d8:	681d      	ldr	r5, [r3, #0]
 800a9da:	4632      	mov	r2, r6
 800a9dc:	463b      	mov	r3, r7
 800a9de:	4630      	mov	r0, r6
 800a9e0:	4639      	mov	r1, r7
 800a9e2:	f7f6 f8a3 	bl	8000b2c <__aeabi_dcmpun>
 800a9e6:	b128      	cbz	r0, 800a9f4 <_scanf_float+0x40c>
 800a9e8:	4808      	ldr	r0, [pc, #32]	@ (800aa0c <_scanf_float+0x424>)
 800a9ea:	f000 fa3d 	bl	800ae68 <nanf>
 800a9ee:	ed85 0a00 	vstr	s0, [r5]
 800a9f2:	e7d1      	b.n	800a998 <_scanf_float+0x3b0>
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	4639      	mov	r1, r7
 800a9f8:	f7f6 f8f6 	bl	8000be8 <__aeabi_d2f>
 800a9fc:	6028      	str	r0, [r5, #0]
 800a9fe:	e7cb      	b.n	800a998 <_scanf_float+0x3b0>
 800aa00:	f04f 0900 	mov.w	r9, #0
 800aa04:	e629      	b.n	800a65a <_scanf_float+0x72>
 800aa06:	bf00      	nop
 800aa08:	0800f645 	.word	0x0800f645
 800aa0c:	0800f6fe 	.word	0x0800f6fe

0800aa10 <std>:
 800aa10:	2300      	movs	r3, #0
 800aa12:	b510      	push	{r4, lr}
 800aa14:	4604      	mov	r4, r0
 800aa16:	e9c0 3300 	strd	r3, r3, [r0]
 800aa1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa1e:	6083      	str	r3, [r0, #8]
 800aa20:	8181      	strh	r1, [r0, #12]
 800aa22:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa24:	81c2      	strh	r2, [r0, #14]
 800aa26:	6183      	str	r3, [r0, #24]
 800aa28:	4619      	mov	r1, r3
 800aa2a:	2208      	movs	r2, #8
 800aa2c:	305c      	adds	r0, #92	@ 0x5c
 800aa2e:	f000 f914 	bl	800ac5a <memset>
 800aa32:	4b0d      	ldr	r3, [pc, #52]	@ (800aa68 <std+0x58>)
 800aa34:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa36:	4b0d      	ldr	r3, [pc, #52]	@ (800aa6c <std+0x5c>)
 800aa38:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aa3a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa70 <std+0x60>)
 800aa3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aa3e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa74 <std+0x64>)
 800aa40:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa42:	4b0d      	ldr	r3, [pc, #52]	@ (800aa78 <std+0x68>)
 800aa44:	6224      	str	r4, [r4, #32]
 800aa46:	429c      	cmp	r4, r3
 800aa48:	d006      	beq.n	800aa58 <std+0x48>
 800aa4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aa4e:	4294      	cmp	r4, r2
 800aa50:	d002      	beq.n	800aa58 <std+0x48>
 800aa52:	33d0      	adds	r3, #208	@ 0xd0
 800aa54:	429c      	cmp	r4, r3
 800aa56:	d105      	bne.n	800aa64 <std+0x54>
 800aa58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aa5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa60:	f000 b9e6 	b.w	800ae30 <__retarget_lock_init_recursive>
 800aa64:	bd10      	pop	{r4, pc}
 800aa66:	bf00      	nop
 800aa68:	0800abd5 	.word	0x0800abd5
 800aa6c:	0800abf7 	.word	0x0800abf7
 800aa70:	0800ac2f 	.word	0x0800ac2f
 800aa74:	0800ac53 	.word	0x0800ac53
 800aa78:	200006fc 	.word	0x200006fc

0800aa7c <stdio_exit_handler>:
 800aa7c:	4a02      	ldr	r2, [pc, #8]	@ (800aa88 <stdio_exit_handler+0xc>)
 800aa7e:	4903      	ldr	r1, [pc, #12]	@ (800aa8c <stdio_exit_handler+0x10>)
 800aa80:	4803      	ldr	r0, [pc, #12]	@ (800aa90 <stdio_exit_handler+0x14>)
 800aa82:	f000 b869 	b.w	800ab58 <_fwalk_sglue>
 800aa86:	bf00      	nop
 800aa88:	200000d8 	.word	0x200000d8
 800aa8c:	0800d115 	.word	0x0800d115
 800aa90:	20000254 	.word	0x20000254

0800aa94 <cleanup_stdio>:
 800aa94:	6841      	ldr	r1, [r0, #4]
 800aa96:	4b0c      	ldr	r3, [pc, #48]	@ (800aac8 <cleanup_stdio+0x34>)
 800aa98:	4299      	cmp	r1, r3
 800aa9a:	b510      	push	{r4, lr}
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	d001      	beq.n	800aaa4 <cleanup_stdio+0x10>
 800aaa0:	f002 fb38 	bl	800d114 <_fflush_r>
 800aaa4:	68a1      	ldr	r1, [r4, #8]
 800aaa6:	4b09      	ldr	r3, [pc, #36]	@ (800aacc <cleanup_stdio+0x38>)
 800aaa8:	4299      	cmp	r1, r3
 800aaaa:	d002      	beq.n	800aab2 <cleanup_stdio+0x1e>
 800aaac:	4620      	mov	r0, r4
 800aaae:	f002 fb31 	bl	800d114 <_fflush_r>
 800aab2:	68e1      	ldr	r1, [r4, #12]
 800aab4:	4b06      	ldr	r3, [pc, #24]	@ (800aad0 <cleanup_stdio+0x3c>)
 800aab6:	4299      	cmp	r1, r3
 800aab8:	d004      	beq.n	800aac4 <cleanup_stdio+0x30>
 800aaba:	4620      	mov	r0, r4
 800aabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aac0:	f002 bb28 	b.w	800d114 <_fflush_r>
 800aac4:	bd10      	pop	{r4, pc}
 800aac6:	bf00      	nop
 800aac8:	200006fc 	.word	0x200006fc
 800aacc:	20000764 	.word	0x20000764
 800aad0:	200007cc 	.word	0x200007cc

0800aad4 <global_stdio_init.part.0>:
 800aad4:	b510      	push	{r4, lr}
 800aad6:	4b0b      	ldr	r3, [pc, #44]	@ (800ab04 <global_stdio_init.part.0+0x30>)
 800aad8:	4c0b      	ldr	r4, [pc, #44]	@ (800ab08 <global_stdio_init.part.0+0x34>)
 800aada:	4a0c      	ldr	r2, [pc, #48]	@ (800ab0c <global_stdio_init.part.0+0x38>)
 800aadc:	601a      	str	r2, [r3, #0]
 800aade:	4620      	mov	r0, r4
 800aae0:	2200      	movs	r2, #0
 800aae2:	2104      	movs	r1, #4
 800aae4:	f7ff ff94 	bl	800aa10 <std>
 800aae8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aaec:	2201      	movs	r2, #1
 800aaee:	2109      	movs	r1, #9
 800aaf0:	f7ff ff8e 	bl	800aa10 <std>
 800aaf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aaf8:	2202      	movs	r2, #2
 800aafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aafe:	2112      	movs	r1, #18
 800ab00:	f7ff bf86 	b.w	800aa10 <std>
 800ab04:	20000834 	.word	0x20000834
 800ab08:	200006fc 	.word	0x200006fc
 800ab0c:	0800aa7d 	.word	0x0800aa7d

0800ab10 <__sfp_lock_acquire>:
 800ab10:	4801      	ldr	r0, [pc, #4]	@ (800ab18 <__sfp_lock_acquire+0x8>)
 800ab12:	f000 b98e 	b.w	800ae32 <__retarget_lock_acquire_recursive>
 800ab16:	bf00      	nop
 800ab18:	2000083d 	.word	0x2000083d

0800ab1c <__sfp_lock_release>:
 800ab1c:	4801      	ldr	r0, [pc, #4]	@ (800ab24 <__sfp_lock_release+0x8>)
 800ab1e:	f000 b989 	b.w	800ae34 <__retarget_lock_release_recursive>
 800ab22:	bf00      	nop
 800ab24:	2000083d 	.word	0x2000083d

0800ab28 <__sinit>:
 800ab28:	b510      	push	{r4, lr}
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	f7ff fff0 	bl	800ab10 <__sfp_lock_acquire>
 800ab30:	6a23      	ldr	r3, [r4, #32]
 800ab32:	b11b      	cbz	r3, 800ab3c <__sinit+0x14>
 800ab34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab38:	f7ff bff0 	b.w	800ab1c <__sfp_lock_release>
 800ab3c:	4b04      	ldr	r3, [pc, #16]	@ (800ab50 <__sinit+0x28>)
 800ab3e:	6223      	str	r3, [r4, #32]
 800ab40:	4b04      	ldr	r3, [pc, #16]	@ (800ab54 <__sinit+0x2c>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1f5      	bne.n	800ab34 <__sinit+0xc>
 800ab48:	f7ff ffc4 	bl	800aad4 <global_stdio_init.part.0>
 800ab4c:	e7f2      	b.n	800ab34 <__sinit+0xc>
 800ab4e:	bf00      	nop
 800ab50:	0800aa95 	.word	0x0800aa95
 800ab54:	20000834 	.word	0x20000834

0800ab58 <_fwalk_sglue>:
 800ab58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab5c:	4607      	mov	r7, r0
 800ab5e:	4688      	mov	r8, r1
 800ab60:	4614      	mov	r4, r2
 800ab62:	2600      	movs	r6, #0
 800ab64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab68:	f1b9 0901 	subs.w	r9, r9, #1
 800ab6c:	d505      	bpl.n	800ab7a <_fwalk_sglue+0x22>
 800ab6e:	6824      	ldr	r4, [r4, #0]
 800ab70:	2c00      	cmp	r4, #0
 800ab72:	d1f7      	bne.n	800ab64 <_fwalk_sglue+0xc>
 800ab74:	4630      	mov	r0, r6
 800ab76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab7a:	89ab      	ldrh	r3, [r5, #12]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d907      	bls.n	800ab90 <_fwalk_sglue+0x38>
 800ab80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab84:	3301      	adds	r3, #1
 800ab86:	d003      	beq.n	800ab90 <_fwalk_sglue+0x38>
 800ab88:	4629      	mov	r1, r5
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	47c0      	blx	r8
 800ab8e:	4306      	orrs	r6, r0
 800ab90:	3568      	adds	r5, #104	@ 0x68
 800ab92:	e7e9      	b.n	800ab68 <_fwalk_sglue+0x10>

0800ab94 <siprintf>:
 800ab94:	b40e      	push	{r1, r2, r3}
 800ab96:	b500      	push	{lr}
 800ab98:	b09c      	sub	sp, #112	@ 0x70
 800ab9a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ab9c:	9002      	str	r0, [sp, #8]
 800ab9e:	9006      	str	r0, [sp, #24]
 800aba0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aba4:	4809      	ldr	r0, [pc, #36]	@ (800abcc <siprintf+0x38>)
 800aba6:	9107      	str	r1, [sp, #28]
 800aba8:	9104      	str	r1, [sp, #16]
 800abaa:	4909      	ldr	r1, [pc, #36]	@ (800abd0 <siprintf+0x3c>)
 800abac:	f853 2b04 	ldr.w	r2, [r3], #4
 800abb0:	9105      	str	r1, [sp, #20]
 800abb2:	6800      	ldr	r0, [r0, #0]
 800abb4:	9301      	str	r3, [sp, #4]
 800abb6:	a902      	add	r1, sp, #8
 800abb8:	f002 f92c 	bl	800ce14 <_svfiprintf_r>
 800abbc:	9b02      	ldr	r3, [sp, #8]
 800abbe:	2200      	movs	r2, #0
 800abc0:	701a      	strb	r2, [r3, #0]
 800abc2:	b01c      	add	sp, #112	@ 0x70
 800abc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800abc8:	b003      	add	sp, #12
 800abca:	4770      	bx	lr
 800abcc:	20000250 	.word	0x20000250
 800abd0:	ffff0208 	.word	0xffff0208

0800abd4 <__sread>:
 800abd4:	b510      	push	{r4, lr}
 800abd6:	460c      	mov	r4, r1
 800abd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abdc:	f000 f8da 	bl	800ad94 <_read_r>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	bfab      	itete	ge
 800abe4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800abe6:	89a3      	ldrhlt	r3, [r4, #12]
 800abe8:	181b      	addge	r3, r3, r0
 800abea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800abee:	bfac      	ite	ge
 800abf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800abf2:	81a3      	strhlt	r3, [r4, #12]
 800abf4:	bd10      	pop	{r4, pc}

0800abf6 <__swrite>:
 800abf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abfa:	461f      	mov	r7, r3
 800abfc:	898b      	ldrh	r3, [r1, #12]
 800abfe:	05db      	lsls	r3, r3, #23
 800ac00:	4605      	mov	r5, r0
 800ac02:	460c      	mov	r4, r1
 800ac04:	4616      	mov	r6, r2
 800ac06:	d505      	bpl.n	800ac14 <__swrite+0x1e>
 800ac08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f000 f8ae 	bl	800ad70 <_lseek_r>
 800ac14:	89a3      	ldrh	r3, [r4, #12]
 800ac16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac1e:	81a3      	strh	r3, [r4, #12]
 800ac20:	4632      	mov	r2, r6
 800ac22:	463b      	mov	r3, r7
 800ac24:	4628      	mov	r0, r5
 800ac26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2a:	f000 b8c5 	b.w	800adb8 <_write_r>

0800ac2e <__sseek>:
 800ac2e:	b510      	push	{r4, lr}
 800ac30:	460c      	mov	r4, r1
 800ac32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac36:	f000 f89b 	bl	800ad70 <_lseek_r>
 800ac3a:	1c43      	adds	r3, r0, #1
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	bf15      	itete	ne
 800ac40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac4a:	81a3      	strheq	r3, [r4, #12]
 800ac4c:	bf18      	it	ne
 800ac4e:	81a3      	strhne	r3, [r4, #12]
 800ac50:	bd10      	pop	{r4, pc}

0800ac52 <__sclose>:
 800ac52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac56:	f000 b87b 	b.w	800ad50 <_close_r>

0800ac5a <memset>:
 800ac5a:	4402      	add	r2, r0
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d100      	bne.n	800ac64 <memset+0xa>
 800ac62:	4770      	bx	lr
 800ac64:	f803 1b01 	strb.w	r1, [r3], #1
 800ac68:	e7f9      	b.n	800ac5e <memset+0x4>

0800ac6a <strncmp>:
 800ac6a:	b510      	push	{r4, lr}
 800ac6c:	b16a      	cbz	r2, 800ac8a <strncmp+0x20>
 800ac6e:	3901      	subs	r1, #1
 800ac70:	1884      	adds	r4, r0, r2
 800ac72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d103      	bne.n	800ac86 <strncmp+0x1c>
 800ac7e:	42a0      	cmp	r0, r4
 800ac80:	d001      	beq.n	800ac86 <strncmp+0x1c>
 800ac82:	2a00      	cmp	r2, #0
 800ac84:	d1f5      	bne.n	800ac72 <strncmp+0x8>
 800ac86:	1ad0      	subs	r0, r2, r3
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	4610      	mov	r0, r2
 800ac8c:	e7fc      	b.n	800ac88 <strncmp+0x1e>
	...

0800ac90 <strtok>:
 800ac90:	4b16      	ldr	r3, [pc, #88]	@ (800acec <strtok+0x5c>)
 800ac92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac96:	681f      	ldr	r7, [r3, #0]
 800ac98:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	460e      	mov	r6, r1
 800ac9e:	b9ec      	cbnz	r4, 800acdc <strtok+0x4c>
 800aca0:	2050      	movs	r0, #80	@ 0x50
 800aca2:	f001 fad5 	bl	800c250 <malloc>
 800aca6:	4602      	mov	r2, r0
 800aca8:	6478      	str	r0, [r7, #68]	@ 0x44
 800acaa:	b920      	cbnz	r0, 800acb6 <strtok+0x26>
 800acac:	4b10      	ldr	r3, [pc, #64]	@ (800acf0 <strtok+0x60>)
 800acae:	4811      	ldr	r0, [pc, #68]	@ (800acf4 <strtok+0x64>)
 800acb0:	215b      	movs	r1, #91	@ 0x5b
 800acb2:	f000 f8df 	bl	800ae74 <__assert_func>
 800acb6:	e9c0 4400 	strd	r4, r4, [r0]
 800acba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800acbe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800acc2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800acc6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800acca:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800acce:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800acd2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800acd6:	6184      	str	r4, [r0, #24]
 800acd8:	7704      	strb	r4, [r0, #28]
 800acda:	6244      	str	r4, [r0, #36]	@ 0x24
 800acdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acde:	4631      	mov	r1, r6
 800ace0:	4628      	mov	r0, r5
 800ace2:	2301      	movs	r3, #1
 800ace4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ace8:	f000 b806 	b.w	800acf8 <__strtok_r>
 800acec:	20000250 	.word	0x20000250
 800acf0:	0800f64a 	.word	0x0800f64a
 800acf4:	0800f661 	.word	0x0800f661

0800acf8 <__strtok_r>:
 800acf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acfa:	4604      	mov	r4, r0
 800acfc:	b908      	cbnz	r0, 800ad02 <__strtok_r+0xa>
 800acfe:	6814      	ldr	r4, [r2, #0]
 800ad00:	b144      	cbz	r4, 800ad14 <__strtok_r+0x1c>
 800ad02:	4620      	mov	r0, r4
 800ad04:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ad08:	460f      	mov	r7, r1
 800ad0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ad0e:	b91e      	cbnz	r6, 800ad18 <__strtok_r+0x20>
 800ad10:	b965      	cbnz	r5, 800ad2c <__strtok_r+0x34>
 800ad12:	6015      	str	r5, [r2, #0]
 800ad14:	2000      	movs	r0, #0
 800ad16:	e005      	b.n	800ad24 <__strtok_r+0x2c>
 800ad18:	42b5      	cmp	r5, r6
 800ad1a:	d1f6      	bne.n	800ad0a <__strtok_r+0x12>
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1f0      	bne.n	800ad02 <__strtok_r+0xa>
 800ad20:	6014      	str	r4, [r2, #0]
 800ad22:	7003      	strb	r3, [r0, #0]
 800ad24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad26:	461c      	mov	r4, r3
 800ad28:	e00c      	b.n	800ad44 <__strtok_r+0x4c>
 800ad2a:	b915      	cbnz	r5, 800ad32 <__strtok_r+0x3a>
 800ad2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad30:	460e      	mov	r6, r1
 800ad32:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ad36:	42ab      	cmp	r3, r5
 800ad38:	d1f7      	bne.n	800ad2a <__strtok_r+0x32>
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d0f3      	beq.n	800ad26 <__strtok_r+0x2e>
 800ad3e:	2300      	movs	r3, #0
 800ad40:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ad44:	6014      	str	r4, [r2, #0]
 800ad46:	e7ed      	b.n	800ad24 <__strtok_r+0x2c>

0800ad48 <_localeconv_r>:
 800ad48:	4800      	ldr	r0, [pc, #0]	@ (800ad4c <_localeconv_r+0x4>)
 800ad4a:	4770      	bx	lr
 800ad4c:	200001d4 	.word	0x200001d4

0800ad50 <_close_r>:
 800ad50:	b538      	push	{r3, r4, r5, lr}
 800ad52:	4d06      	ldr	r5, [pc, #24]	@ (800ad6c <_close_r+0x1c>)
 800ad54:	2300      	movs	r3, #0
 800ad56:	4604      	mov	r4, r0
 800ad58:	4608      	mov	r0, r1
 800ad5a:	602b      	str	r3, [r5, #0]
 800ad5c:	f7fa fb70 	bl	8005440 <_close>
 800ad60:	1c43      	adds	r3, r0, #1
 800ad62:	d102      	bne.n	800ad6a <_close_r+0x1a>
 800ad64:	682b      	ldr	r3, [r5, #0]
 800ad66:	b103      	cbz	r3, 800ad6a <_close_r+0x1a>
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	bd38      	pop	{r3, r4, r5, pc}
 800ad6c:	20000838 	.word	0x20000838

0800ad70 <_lseek_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4d07      	ldr	r5, [pc, #28]	@ (800ad90 <_lseek_r+0x20>)
 800ad74:	4604      	mov	r4, r0
 800ad76:	4608      	mov	r0, r1
 800ad78:	4611      	mov	r1, r2
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	602a      	str	r2, [r5, #0]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	f7fa fb85 	bl	800548e <_lseek>
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	d102      	bne.n	800ad8e <_lseek_r+0x1e>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	b103      	cbz	r3, 800ad8e <_lseek_r+0x1e>
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}
 800ad90:	20000838 	.word	0x20000838

0800ad94 <_read_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4d07      	ldr	r5, [pc, #28]	@ (800adb4 <_read_r+0x20>)
 800ad98:	4604      	mov	r4, r0
 800ad9a:	4608      	mov	r0, r1
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	2200      	movs	r2, #0
 800ada0:	602a      	str	r2, [r5, #0]
 800ada2:	461a      	mov	r2, r3
 800ada4:	f7fa fb13 	bl	80053ce <_read>
 800ada8:	1c43      	adds	r3, r0, #1
 800adaa:	d102      	bne.n	800adb2 <_read_r+0x1e>
 800adac:	682b      	ldr	r3, [r5, #0]
 800adae:	b103      	cbz	r3, 800adb2 <_read_r+0x1e>
 800adb0:	6023      	str	r3, [r4, #0]
 800adb2:	bd38      	pop	{r3, r4, r5, pc}
 800adb4:	20000838 	.word	0x20000838

0800adb8 <_write_r>:
 800adb8:	b538      	push	{r3, r4, r5, lr}
 800adba:	4d07      	ldr	r5, [pc, #28]	@ (800add8 <_write_r+0x20>)
 800adbc:	4604      	mov	r4, r0
 800adbe:	4608      	mov	r0, r1
 800adc0:	4611      	mov	r1, r2
 800adc2:	2200      	movs	r2, #0
 800adc4:	602a      	str	r2, [r5, #0]
 800adc6:	461a      	mov	r2, r3
 800adc8:	f7fa fb1e 	bl	8005408 <_write>
 800adcc:	1c43      	adds	r3, r0, #1
 800adce:	d102      	bne.n	800add6 <_write_r+0x1e>
 800add0:	682b      	ldr	r3, [r5, #0]
 800add2:	b103      	cbz	r3, 800add6 <_write_r+0x1e>
 800add4:	6023      	str	r3, [r4, #0]
 800add6:	bd38      	pop	{r3, r4, r5, pc}
 800add8:	20000838 	.word	0x20000838

0800addc <__errno>:
 800addc:	4b01      	ldr	r3, [pc, #4]	@ (800ade4 <__errno+0x8>)
 800adde:	6818      	ldr	r0, [r3, #0]
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	20000250 	.word	0x20000250

0800ade8 <__libc_init_array>:
 800ade8:	b570      	push	{r4, r5, r6, lr}
 800adea:	4d0d      	ldr	r5, [pc, #52]	@ (800ae20 <__libc_init_array+0x38>)
 800adec:	4c0d      	ldr	r4, [pc, #52]	@ (800ae24 <__libc_init_array+0x3c>)
 800adee:	1b64      	subs	r4, r4, r5
 800adf0:	10a4      	asrs	r4, r4, #2
 800adf2:	2600      	movs	r6, #0
 800adf4:	42a6      	cmp	r6, r4
 800adf6:	d109      	bne.n	800ae0c <__libc_init_array+0x24>
 800adf8:	4d0b      	ldr	r5, [pc, #44]	@ (800ae28 <__libc_init_array+0x40>)
 800adfa:	4c0c      	ldr	r4, [pc, #48]	@ (800ae2c <__libc_init_array+0x44>)
 800adfc:	f004 fa70 	bl	800f2e0 <_init>
 800ae00:	1b64      	subs	r4, r4, r5
 800ae02:	10a4      	asrs	r4, r4, #2
 800ae04:	2600      	movs	r6, #0
 800ae06:	42a6      	cmp	r6, r4
 800ae08:	d105      	bne.n	800ae16 <__libc_init_array+0x2e>
 800ae0a:	bd70      	pop	{r4, r5, r6, pc}
 800ae0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae10:	4798      	blx	r3
 800ae12:	3601      	adds	r6, #1
 800ae14:	e7ee      	b.n	800adf4 <__libc_init_array+0xc>
 800ae16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae1a:	4798      	blx	r3
 800ae1c:	3601      	adds	r6, #1
 800ae1e:	e7f2      	b.n	800ae06 <__libc_init_array+0x1e>
 800ae20:	0800fb98 	.word	0x0800fb98
 800ae24:	0800fb98 	.word	0x0800fb98
 800ae28:	0800fb98 	.word	0x0800fb98
 800ae2c:	0800fb9c 	.word	0x0800fb9c

0800ae30 <__retarget_lock_init_recursive>:
 800ae30:	4770      	bx	lr

0800ae32 <__retarget_lock_acquire_recursive>:
 800ae32:	4770      	bx	lr

0800ae34 <__retarget_lock_release_recursive>:
 800ae34:	4770      	bx	lr

0800ae36 <memcpy>:
 800ae36:	440a      	add	r2, r1
 800ae38:	4291      	cmp	r1, r2
 800ae3a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae3e:	d100      	bne.n	800ae42 <memcpy+0xc>
 800ae40:	4770      	bx	lr
 800ae42:	b510      	push	{r4, lr}
 800ae44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae4c:	4291      	cmp	r1, r2
 800ae4e:	d1f9      	bne.n	800ae44 <memcpy+0xe>
 800ae50:	bd10      	pop	{r4, pc}
 800ae52:	0000      	movs	r0, r0
 800ae54:	0000      	movs	r0, r0
	...

0800ae58 <nan>:
 800ae58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ae60 <nan+0x8>
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	00000000 	.word	0x00000000
 800ae64:	7ff80000 	.word	0x7ff80000

0800ae68 <nanf>:
 800ae68:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ae70 <nanf+0x8>
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	7fc00000 	.word	0x7fc00000

0800ae74 <__assert_func>:
 800ae74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae76:	4614      	mov	r4, r2
 800ae78:	461a      	mov	r2, r3
 800ae7a:	4b09      	ldr	r3, [pc, #36]	@ (800aea0 <__assert_func+0x2c>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4605      	mov	r5, r0
 800ae80:	68d8      	ldr	r0, [r3, #12]
 800ae82:	b954      	cbnz	r4, 800ae9a <__assert_func+0x26>
 800ae84:	4b07      	ldr	r3, [pc, #28]	@ (800aea4 <__assert_func+0x30>)
 800ae86:	461c      	mov	r4, r3
 800ae88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae8c:	9100      	str	r1, [sp, #0]
 800ae8e:	462b      	mov	r3, r5
 800ae90:	4905      	ldr	r1, [pc, #20]	@ (800aea8 <__assert_func+0x34>)
 800ae92:	f002 f967 	bl	800d164 <fiprintf>
 800ae96:	f002 f9a1 	bl	800d1dc <abort>
 800ae9a:	4b04      	ldr	r3, [pc, #16]	@ (800aeac <__assert_func+0x38>)
 800ae9c:	e7f4      	b.n	800ae88 <__assert_func+0x14>
 800ae9e:	bf00      	nop
 800aea0:	20000250 	.word	0x20000250
 800aea4:	0800f6fe 	.word	0x0800f6fe
 800aea8:	0800f6d0 	.word	0x0800f6d0
 800aeac:	0800f6c3 	.word	0x0800f6c3

0800aeb0 <quorem>:
 800aeb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb4:	6903      	ldr	r3, [r0, #16]
 800aeb6:	690c      	ldr	r4, [r1, #16]
 800aeb8:	42a3      	cmp	r3, r4
 800aeba:	4607      	mov	r7, r0
 800aebc:	db7e      	blt.n	800afbc <quorem+0x10c>
 800aebe:	3c01      	subs	r4, #1
 800aec0:	f101 0814 	add.w	r8, r1, #20
 800aec4:	00a3      	lsls	r3, r4, #2
 800aec6:	f100 0514 	add.w	r5, r0, #20
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aed0:	9301      	str	r3, [sp, #4]
 800aed2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aed6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aeda:	3301      	adds	r3, #1
 800aedc:	429a      	cmp	r2, r3
 800aede:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aee2:	fbb2 f6f3 	udiv	r6, r2, r3
 800aee6:	d32e      	bcc.n	800af46 <quorem+0x96>
 800aee8:	f04f 0a00 	mov.w	sl, #0
 800aeec:	46c4      	mov	ip, r8
 800aeee:	46ae      	mov	lr, r5
 800aef0:	46d3      	mov	fp, sl
 800aef2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aef6:	b298      	uxth	r0, r3
 800aef8:	fb06 a000 	mla	r0, r6, r0, sl
 800aefc:	0c02      	lsrs	r2, r0, #16
 800aefe:	0c1b      	lsrs	r3, r3, #16
 800af00:	fb06 2303 	mla	r3, r6, r3, r2
 800af04:	f8de 2000 	ldr.w	r2, [lr]
 800af08:	b280      	uxth	r0, r0
 800af0a:	b292      	uxth	r2, r2
 800af0c:	1a12      	subs	r2, r2, r0
 800af0e:	445a      	add	r2, fp
 800af10:	f8de 0000 	ldr.w	r0, [lr]
 800af14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af18:	b29b      	uxth	r3, r3
 800af1a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800af1e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800af22:	b292      	uxth	r2, r2
 800af24:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800af28:	45e1      	cmp	r9, ip
 800af2a:	f84e 2b04 	str.w	r2, [lr], #4
 800af2e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800af32:	d2de      	bcs.n	800aef2 <quorem+0x42>
 800af34:	9b00      	ldr	r3, [sp, #0]
 800af36:	58eb      	ldr	r3, [r5, r3]
 800af38:	b92b      	cbnz	r3, 800af46 <quorem+0x96>
 800af3a:	9b01      	ldr	r3, [sp, #4]
 800af3c:	3b04      	subs	r3, #4
 800af3e:	429d      	cmp	r5, r3
 800af40:	461a      	mov	r2, r3
 800af42:	d32f      	bcc.n	800afa4 <quorem+0xf4>
 800af44:	613c      	str	r4, [r7, #16]
 800af46:	4638      	mov	r0, r7
 800af48:	f001 fd0e 	bl	800c968 <__mcmp>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	db25      	blt.n	800af9c <quorem+0xec>
 800af50:	4629      	mov	r1, r5
 800af52:	2000      	movs	r0, #0
 800af54:	f858 2b04 	ldr.w	r2, [r8], #4
 800af58:	f8d1 c000 	ldr.w	ip, [r1]
 800af5c:	fa1f fe82 	uxth.w	lr, r2
 800af60:	fa1f f38c 	uxth.w	r3, ip
 800af64:	eba3 030e 	sub.w	r3, r3, lr
 800af68:	4403      	add	r3, r0
 800af6a:	0c12      	lsrs	r2, r2, #16
 800af6c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800af70:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800af74:	b29b      	uxth	r3, r3
 800af76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af7a:	45c1      	cmp	r9, r8
 800af7c:	f841 3b04 	str.w	r3, [r1], #4
 800af80:	ea4f 4022 	mov.w	r0, r2, asr #16
 800af84:	d2e6      	bcs.n	800af54 <quorem+0xa4>
 800af86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af8e:	b922      	cbnz	r2, 800af9a <quorem+0xea>
 800af90:	3b04      	subs	r3, #4
 800af92:	429d      	cmp	r5, r3
 800af94:	461a      	mov	r2, r3
 800af96:	d30b      	bcc.n	800afb0 <quorem+0x100>
 800af98:	613c      	str	r4, [r7, #16]
 800af9a:	3601      	adds	r6, #1
 800af9c:	4630      	mov	r0, r6
 800af9e:	b003      	add	sp, #12
 800afa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa4:	6812      	ldr	r2, [r2, #0]
 800afa6:	3b04      	subs	r3, #4
 800afa8:	2a00      	cmp	r2, #0
 800afaa:	d1cb      	bne.n	800af44 <quorem+0x94>
 800afac:	3c01      	subs	r4, #1
 800afae:	e7c6      	b.n	800af3e <quorem+0x8e>
 800afb0:	6812      	ldr	r2, [r2, #0]
 800afb2:	3b04      	subs	r3, #4
 800afb4:	2a00      	cmp	r2, #0
 800afb6:	d1ef      	bne.n	800af98 <quorem+0xe8>
 800afb8:	3c01      	subs	r4, #1
 800afba:	e7ea      	b.n	800af92 <quorem+0xe2>
 800afbc:	2000      	movs	r0, #0
 800afbe:	e7ee      	b.n	800af9e <quorem+0xee>

0800afc0 <_dtoa_r>:
 800afc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc4:	69c7      	ldr	r7, [r0, #28]
 800afc6:	b099      	sub	sp, #100	@ 0x64
 800afc8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800afcc:	ec55 4b10 	vmov	r4, r5, d0
 800afd0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800afd2:	9109      	str	r1, [sp, #36]	@ 0x24
 800afd4:	4683      	mov	fp, r0
 800afd6:	920e      	str	r2, [sp, #56]	@ 0x38
 800afd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800afda:	b97f      	cbnz	r7, 800affc <_dtoa_r+0x3c>
 800afdc:	2010      	movs	r0, #16
 800afde:	f001 f937 	bl	800c250 <malloc>
 800afe2:	4602      	mov	r2, r0
 800afe4:	f8cb 001c 	str.w	r0, [fp, #28]
 800afe8:	b920      	cbnz	r0, 800aff4 <_dtoa_r+0x34>
 800afea:	4ba7      	ldr	r3, [pc, #668]	@ (800b288 <_dtoa_r+0x2c8>)
 800afec:	21ef      	movs	r1, #239	@ 0xef
 800afee:	48a7      	ldr	r0, [pc, #668]	@ (800b28c <_dtoa_r+0x2cc>)
 800aff0:	f7ff ff40 	bl	800ae74 <__assert_func>
 800aff4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aff8:	6007      	str	r7, [r0, #0]
 800affa:	60c7      	str	r7, [r0, #12]
 800affc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b000:	6819      	ldr	r1, [r3, #0]
 800b002:	b159      	cbz	r1, 800b01c <_dtoa_r+0x5c>
 800b004:	685a      	ldr	r2, [r3, #4]
 800b006:	604a      	str	r2, [r1, #4]
 800b008:	2301      	movs	r3, #1
 800b00a:	4093      	lsls	r3, r2
 800b00c:	608b      	str	r3, [r1, #8]
 800b00e:	4658      	mov	r0, fp
 800b010:	f001 fa26 	bl	800c460 <_Bfree>
 800b014:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]
 800b01c:	1e2b      	subs	r3, r5, #0
 800b01e:	bfb9      	ittee	lt
 800b020:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b024:	9303      	strlt	r3, [sp, #12]
 800b026:	2300      	movge	r3, #0
 800b028:	6033      	strge	r3, [r6, #0]
 800b02a:	9f03      	ldr	r7, [sp, #12]
 800b02c:	4b98      	ldr	r3, [pc, #608]	@ (800b290 <_dtoa_r+0x2d0>)
 800b02e:	bfbc      	itt	lt
 800b030:	2201      	movlt	r2, #1
 800b032:	6032      	strlt	r2, [r6, #0]
 800b034:	43bb      	bics	r3, r7
 800b036:	d112      	bne.n	800b05e <_dtoa_r+0x9e>
 800b038:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b03a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b03e:	6013      	str	r3, [r2, #0]
 800b040:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b044:	4323      	orrs	r3, r4
 800b046:	f000 854d 	beq.w	800bae4 <_dtoa_r+0xb24>
 800b04a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b04c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b2a4 <_dtoa_r+0x2e4>
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 854f 	beq.w	800baf4 <_dtoa_r+0xb34>
 800b056:	f10a 0303 	add.w	r3, sl, #3
 800b05a:	f000 bd49 	b.w	800baf0 <_dtoa_r+0xb30>
 800b05e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b062:	2200      	movs	r2, #0
 800b064:	ec51 0b17 	vmov	r0, r1, d7
 800b068:	2300      	movs	r3, #0
 800b06a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b06e:	f7f5 fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b072:	4680      	mov	r8, r0
 800b074:	b158      	cbz	r0, 800b08e <_dtoa_r+0xce>
 800b076:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b078:	2301      	movs	r3, #1
 800b07a:	6013      	str	r3, [r2, #0]
 800b07c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b07e:	b113      	cbz	r3, 800b086 <_dtoa_r+0xc6>
 800b080:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b082:	4b84      	ldr	r3, [pc, #528]	@ (800b294 <_dtoa_r+0x2d4>)
 800b084:	6013      	str	r3, [r2, #0]
 800b086:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b2a8 <_dtoa_r+0x2e8>
 800b08a:	f000 bd33 	b.w	800baf4 <_dtoa_r+0xb34>
 800b08e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b092:	aa16      	add	r2, sp, #88	@ 0x58
 800b094:	a917      	add	r1, sp, #92	@ 0x5c
 800b096:	4658      	mov	r0, fp
 800b098:	f001 fd86 	bl	800cba8 <__d2b>
 800b09c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b0a0:	4681      	mov	r9, r0
 800b0a2:	2e00      	cmp	r6, #0
 800b0a4:	d077      	beq.n	800b196 <_dtoa_r+0x1d6>
 800b0a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b0ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b0b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b0bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	4b74      	ldr	r3, [pc, #464]	@ (800b298 <_dtoa_r+0x2d8>)
 800b0c6:	f7f5 f8df 	bl	8000288 <__aeabi_dsub>
 800b0ca:	a369      	add	r3, pc, #420	@ (adr r3, 800b270 <_dtoa_r+0x2b0>)
 800b0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d0:	f7f5 fa92 	bl	80005f8 <__aeabi_dmul>
 800b0d4:	a368      	add	r3, pc, #416	@ (adr r3, 800b278 <_dtoa_r+0x2b8>)
 800b0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0da:	f7f5 f8d7 	bl	800028c <__adddf3>
 800b0de:	4604      	mov	r4, r0
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	460d      	mov	r5, r1
 800b0e4:	f7f5 fa1e 	bl	8000524 <__aeabi_i2d>
 800b0e8:	a365      	add	r3, pc, #404	@ (adr r3, 800b280 <_dtoa_r+0x2c0>)
 800b0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ee:	f7f5 fa83 	bl	80005f8 <__aeabi_dmul>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	f7f5 f8c7 	bl	800028c <__adddf3>
 800b0fe:	4604      	mov	r4, r0
 800b100:	460d      	mov	r5, r1
 800b102:	f7f5 fd29 	bl	8000b58 <__aeabi_d2iz>
 800b106:	2200      	movs	r2, #0
 800b108:	4607      	mov	r7, r0
 800b10a:	2300      	movs	r3, #0
 800b10c:	4620      	mov	r0, r4
 800b10e:	4629      	mov	r1, r5
 800b110:	f7f5 fce4 	bl	8000adc <__aeabi_dcmplt>
 800b114:	b140      	cbz	r0, 800b128 <_dtoa_r+0x168>
 800b116:	4638      	mov	r0, r7
 800b118:	f7f5 fa04 	bl	8000524 <__aeabi_i2d>
 800b11c:	4622      	mov	r2, r4
 800b11e:	462b      	mov	r3, r5
 800b120:	f7f5 fcd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b124:	b900      	cbnz	r0, 800b128 <_dtoa_r+0x168>
 800b126:	3f01      	subs	r7, #1
 800b128:	2f16      	cmp	r7, #22
 800b12a:	d851      	bhi.n	800b1d0 <_dtoa_r+0x210>
 800b12c:	4b5b      	ldr	r3, [pc, #364]	@ (800b29c <_dtoa_r+0x2dc>)
 800b12e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b13a:	f7f5 fccf 	bl	8000adc <__aeabi_dcmplt>
 800b13e:	2800      	cmp	r0, #0
 800b140:	d048      	beq.n	800b1d4 <_dtoa_r+0x214>
 800b142:	3f01      	subs	r7, #1
 800b144:	2300      	movs	r3, #0
 800b146:	9312      	str	r3, [sp, #72]	@ 0x48
 800b148:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b14a:	1b9b      	subs	r3, r3, r6
 800b14c:	1e5a      	subs	r2, r3, #1
 800b14e:	bf44      	itt	mi
 800b150:	f1c3 0801 	rsbmi	r8, r3, #1
 800b154:	2300      	movmi	r3, #0
 800b156:	9208      	str	r2, [sp, #32]
 800b158:	bf54      	ite	pl
 800b15a:	f04f 0800 	movpl.w	r8, #0
 800b15e:	9308      	strmi	r3, [sp, #32]
 800b160:	2f00      	cmp	r7, #0
 800b162:	db39      	blt.n	800b1d8 <_dtoa_r+0x218>
 800b164:	9b08      	ldr	r3, [sp, #32]
 800b166:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b168:	443b      	add	r3, r7
 800b16a:	9308      	str	r3, [sp, #32]
 800b16c:	2300      	movs	r3, #0
 800b16e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b172:	2b09      	cmp	r3, #9
 800b174:	d864      	bhi.n	800b240 <_dtoa_r+0x280>
 800b176:	2b05      	cmp	r3, #5
 800b178:	bfc4      	itt	gt
 800b17a:	3b04      	subgt	r3, #4
 800b17c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b180:	f1a3 0302 	sub.w	r3, r3, #2
 800b184:	bfcc      	ite	gt
 800b186:	2400      	movgt	r4, #0
 800b188:	2401      	movle	r4, #1
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d863      	bhi.n	800b256 <_dtoa_r+0x296>
 800b18e:	e8df f003 	tbb	[pc, r3]
 800b192:	372a      	.short	0x372a
 800b194:	5535      	.short	0x5535
 800b196:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b19a:	441e      	add	r6, r3
 800b19c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b1a0:	2b20      	cmp	r3, #32
 800b1a2:	bfc1      	itttt	gt
 800b1a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b1a8:	409f      	lslgt	r7, r3
 800b1aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b1ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b1b2:	bfd6      	itet	le
 800b1b4:	f1c3 0320 	rsble	r3, r3, #32
 800b1b8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b1bc:	fa04 f003 	lslle.w	r0, r4, r3
 800b1c0:	f7f5 f9a0 	bl	8000504 <__aeabi_ui2d>
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b1ca:	3e01      	subs	r6, #1
 800b1cc:	9214      	str	r2, [sp, #80]	@ 0x50
 800b1ce:	e777      	b.n	800b0c0 <_dtoa_r+0x100>
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e7b8      	b.n	800b146 <_dtoa_r+0x186>
 800b1d4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b1d6:	e7b7      	b.n	800b148 <_dtoa_r+0x188>
 800b1d8:	427b      	negs	r3, r7
 800b1da:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1dc:	2300      	movs	r3, #0
 800b1de:	eba8 0807 	sub.w	r8, r8, r7
 800b1e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b1e4:	e7c4      	b.n	800b170 <_dtoa_r+0x1b0>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	dc35      	bgt.n	800b25c <_dtoa_r+0x29c>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	9307      	str	r3, [sp, #28]
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1fa:	e00b      	b.n	800b214 <_dtoa_r+0x254>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e7f3      	b.n	800b1e8 <_dtoa_r+0x228>
 800b200:	2300      	movs	r3, #0
 800b202:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b206:	18fb      	adds	r3, r7, r3
 800b208:	9300      	str	r3, [sp, #0]
 800b20a:	3301      	adds	r3, #1
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	9307      	str	r3, [sp, #28]
 800b210:	bfb8      	it	lt
 800b212:	2301      	movlt	r3, #1
 800b214:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b218:	2100      	movs	r1, #0
 800b21a:	2204      	movs	r2, #4
 800b21c:	f102 0514 	add.w	r5, r2, #20
 800b220:	429d      	cmp	r5, r3
 800b222:	d91f      	bls.n	800b264 <_dtoa_r+0x2a4>
 800b224:	6041      	str	r1, [r0, #4]
 800b226:	4658      	mov	r0, fp
 800b228:	f001 f8da 	bl	800c3e0 <_Balloc>
 800b22c:	4682      	mov	sl, r0
 800b22e:	2800      	cmp	r0, #0
 800b230:	d13c      	bne.n	800b2ac <_dtoa_r+0x2ec>
 800b232:	4b1b      	ldr	r3, [pc, #108]	@ (800b2a0 <_dtoa_r+0x2e0>)
 800b234:	4602      	mov	r2, r0
 800b236:	f240 11af 	movw	r1, #431	@ 0x1af
 800b23a:	e6d8      	b.n	800afee <_dtoa_r+0x2e>
 800b23c:	2301      	movs	r3, #1
 800b23e:	e7e0      	b.n	800b202 <_dtoa_r+0x242>
 800b240:	2401      	movs	r4, #1
 800b242:	2300      	movs	r3, #0
 800b244:	9309      	str	r3, [sp, #36]	@ 0x24
 800b246:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b248:	f04f 33ff 	mov.w	r3, #4294967295
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	9307      	str	r3, [sp, #28]
 800b250:	2200      	movs	r2, #0
 800b252:	2312      	movs	r3, #18
 800b254:	e7d0      	b.n	800b1f8 <_dtoa_r+0x238>
 800b256:	2301      	movs	r3, #1
 800b258:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b25a:	e7f5      	b.n	800b248 <_dtoa_r+0x288>
 800b25c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	9307      	str	r3, [sp, #28]
 800b262:	e7d7      	b.n	800b214 <_dtoa_r+0x254>
 800b264:	3101      	adds	r1, #1
 800b266:	0052      	lsls	r2, r2, #1
 800b268:	e7d8      	b.n	800b21c <_dtoa_r+0x25c>
 800b26a:	bf00      	nop
 800b26c:	f3af 8000 	nop.w
 800b270:	636f4361 	.word	0x636f4361
 800b274:	3fd287a7 	.word	0x3fd287a7
 800b278:	8b60c8b3 	.word	0x8b60c8b3
 800b27c:	3fc68a28 	.word	0x3fc68a28
 800b280:	509f79fb 	.word	0x509f79fb
 800b284:	3fd34413 	.word	0x3fd34413
 800b288:	0800f64a 	.word	0x0800f64a
 800b28c:	0800f70c 	.word	0x0800f70c
 800b290:	7ff00000 	.word	0x7ff00000
 800b294:	0800f622 	.word	0x0800f622
 800b298:	3ff80000 	.word	0x3ff80000
 800b29c:	0800f868 	.word	0x0800f868
 800b2a0:	0800f764 	.word	0x0800f764
 800b2a4:	0800f708 	.word	0x0800f708
 800b2a8:	0800f621 	.word	0x0800f621
 800b2ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b2b0:	6018      	str	r0, [r3, #0]
 800b2b2:	9b07      	ldr	r3, [sp, #28]
 800b2b4:	2b0e      	cmp	r3, #14
 800b2b6:	f200 80a4 	bhi.w	800b402 <_dtoa_r+0x442>
 800b2ba:	2c00      	cmp	r4, #0
 800b2bc:	f000 80a1 	beq.w	800b402 <_dtoa_r+0x442>
 800b2c0:	2f00      	cmp	r7, #0
 800b2c2:	dd33      	ble.n	800b32c <_dtoa_r+0x36c>
 800b2c4:	4bad      	ldr	r3, [pc, #692]	@ (800b57c <_dtoa_r+0x5bc>)
 800b2c6:	f007 020f 	and.w	r2, r7, #15
 800b2ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2ce:	ed93 7b00 	vldr	d7, [r3]
 800b2d2:	05f8      	lsls	r0, r7, #23
 800b2d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b2d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b2dc:	d516      	bpl.n	800b30c <_dtoa_r+0x34c>
 800b2de:	4ba8      	ldr	r3, [pc, #672]	@ (800b580 <_dtoa_r+0x5c0>)
 800b2e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2e8:	f7f5 fab0 	bl	800084c <__aeabi_ddiv>
 800b2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2f0:	f004 040f 	and.w	r4, r4, #15
 800b2f4:	2603      	movs	r6, #3
 800b2f6:	4da2      	ldr	r5, [pc, #648]	@ (800b580 <_dtoa_r+0x5c0>)
 800b2f8:	b954      	cbnz	r4, 800b310 <_dtoa_r+0x350>
 800b2fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b302:	f7f5 faa3 	bl	800084c <__aeabi_ddiv>
 800b306:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b30a:	e028      	b.n	800b35e <_dtoa_r+0x39e>
 800b30c:	2602      	movs	r6, #2
 800b30e:	e7f2      	b.n	800b2f6 <_dtoa_r+0x336>
 800b310:	07e1      	lsls	r1, r4, #31
 800b312:	d508      	bpl.n	800b326 <_dtoa_r+0x366>
 800b314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b318:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b31c:	f7f5 f96c 	bl	80005f8 <__aeabi_dmul>
 800b320:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b324:	3601      	adds	r6, #1
 800b326:	1064      	asrs	r4, r4, #1
 800b328:	3508      	adds	r5, #8
 800b32a:	e7e5      	b.n	800b2f8 <_dtoa_r+0x338>
 800b32c:	f000 80d2 	beq.w	800b4d4 <_dtoa_r+0x514>
 800b330:	427c      	negs	r4, r7
 800b332:	4b92      	ldr	r3, [pc, #584]	@ (800b57c <_dtoa_r+0x5bc>)
 800b334:	4d92      	ldr	r5, [pc, #584]	@ (800b580 <_dtoa_r+0x5c0>)
 800b336:	f004 020f 	and.w	r2, r4, #15
 800b33a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b342:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b346:	f7f5 f957 	bl	80005f8 <__aeabi_dmul>
 800b34a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b34e:	1124      	asrs	r4, r4, #4
 800b350:	2300      	movs	r3, #0
 800b352:	2602      	movs	r6, #2
 800b354:	2c00      	cmp	r4, #0
 800b356:	f040 80b2 	bne.w	800b4be <_dtoa_r+0x4fe>
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1d3      	bne.n	800b306 <_dtoa_r+0x346>
 800b35e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b360:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 80b7 	beq.w	800b4d8 <_dtoa_r+0x518>
 800b36a:	4b86      	ldr	r3, [pc, #536]	@ (800b584 <_dtoa_r+0x5c4>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	4620      	mov	r0, r4
 800b370:	4629      	mov	r1, r5
 800b372:	f7f5 fbb3 	bl	8000adc <__aeabi_dcmplt>
 800b376:	2800      	cmp	r0, #0
 800b378:	f000 80ae 	beq.w	800b4d8 <_dtoa_r+0x518>
 800b37c:	9b07      	ldr	r3, [sp, #28]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f000 80aa 	beq.w	800b4d8 <_dtoa_r+0x518>
 800b384:	9b00      	ldr	r3, [sp, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	dd37      	ble.n	800b3fa <_dtoa_r+0x43a>
 800b38a:	1e7b      	subs	r3, r7, #1
 800b38c:	9304      	str	r3, [sp, #16]
 800b38e:	4620      	mov	r0, r4
 800b390:	4b7d      	ldr	r3, [pc, #500]	@ (800b588 <_dtoa_r+0x5c8>)
 800b392:	2200      	movs	r2, #0
 800b394:	4629      	mov	r1, r5
 800b396:	f7f5 f92f 	bl	80005f8 <__aeabi_dmul>
 800b39a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b39e:	9c00      	ldr	r4, [sp, #0]
 800b3a0:	3601      	adds	r6, #1
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	f7f5 f8be 	bl	8000524 <__aeabi_i2d>
 800b3a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3ac:	f7f5 f924 	bl	80005f8 <__aeabi_dmul>
 800b3b0:	4b76      	ldr	r3, [pc, #472]	@ (800b58c <_dtoa_r+0x5cc>)
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f7f4 ff6a 	bl	800028c <__adddf3>
 800b3b8:	4605      	mov	r5, r0
 800b3ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b3be:	2c00      	cmp	r4, #0
 800b3c0:	f040 808d 	bne.w	800b4de <_dtoa_r+0x51e>
 800b3c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3c8:	4b71      	ldr	r3, [pc, #452]	@ (800b590 <_dtoa_r+0x5d0>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f7f4 ff5c 	bl	8000288 <__aeabi_dsub>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3d8:	462a      	mov	r2, r5
 800b3da:	4633      	mov	r3, r6
 800b3dc:	f7f5 fb9c 	bl	8000b18 <__aeabi_dcmpgt>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	f040 828b 	bne.w	800b8fc <_dtoa_r+0x93c>
 800b3e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ea:	462a      	mov	r2, r5
 800b3ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b3f0:	f7f5 fb74 	bl	8000adc <__aeabi_dcmplt>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	f040 8128 	bne.w	800b64a <_dtoa_r+0x68a>
 800b3fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b3fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b402:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b404:	2b00      	cmp	r3, #0
 800b406:	f2c0 815a 	blt.w	800b6be <_dtoa_r+0x6fe>
 800b40a:	2f0e      	cmp	r7, #14
 800b40c:	f300 8157 	bgt.w	800b6be <_dtoa_r+0x6fe>
 800b410:	4b5a      	ldr	r3, [pc, #360]	@ (800b57c <_dtoa_r+0x5bc>)
 800b412:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b416:	ed93 7b00 	vldr	d7, [r3]
 800b41a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	ed8d 7b00 	vstr	d7, [sp]
 800b422:	da03      	bge.n	800b42c <_dtoa_r+0x46c>
 800b424:	9b07      	ldr	r3, [sp, #28]
 800b426:	2b00      	cmp	r3, #0
 800b428:	f340 8101 	ble.w	800b62e <_dtoa_r+0x66e>
 800b42c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b430:	4656      	mov	r6, sl
 800b432:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b436:	4620      	mov	r0, r4
 800b438:	4629      	mov	r1, r5
 800b43a:	f7f5 fa07 	bl	800084c <__aeabi_ddiv>
 800b43e:	f7f5 fb8b 	bl	8000b58 <__aeabi_d2iz>
 800b442:	4680      	mov	r8, r0
 800b444:	f7f5 f86e 	bl	8000524 <__aeabi_i2d>
 800b448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b44c:	f7f5 f8d4 	bl	80005f8 <__aeabi_dmul>
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	4620      	mov	r0, r4
 800b456:	4629      	mov	r1, r5
 800b458:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b45c:	f7f4 ff14 	bl	8000288 <__aeabi_dsub>
 800b460:	f806 4b01 	strb.w	r4, [r6], #1
 800b464:	9d07      	ldr	r5, [sp, #28]
 800b466:	eba6 040a 	sub.w	r4, r6, sl
 800b46a:	42a5      	cmp	r5, r4
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	f040 8117 	bne.w	800b6a2 <_dtoa_r+0x6e2>
 800b474:	f7f4 ff0a 	bl	800028c <__adddf3>
 800b478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b47c:	4604      	mov	r4, r0
 800b47e:	460d      	mov	r5, r1
 800b480:	f7f5 fb4a 	bl	8000b18 <__aeabi_dcmpgt>
 800b484:	2800      	cmp	r0, #0
 800b486:	f040 80f9 	bne.w	800b67c <_dtoa_r+0x6bc>
 800b48a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b48e:	4620      	mov	r0, r4
 800b490:	4629      	mov	r1, r5
 800b492:	f7f5 fb19 	bl	8000ac8 <__aeabi_dcmpeq>
 800b496:	b118      	cbz	r0, 800b4a0 <_dtoa_r+0x4e0>
 800b498:	f018 0f01 	tst.w	r8, #1
 800b49c:	f040 80ee 	bne.w	800b67c <_dtoa_r+0x6bc>
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	4658      	mov	r0, fp
 800b4a4:	f000 ffdc 	bl	800c460 <_Bfree>
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	7033      	strb	r3, [r6, #0]
 800b4ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b4ae:	3701      	adds	r7, #1
 800b4b0:	601f      	str	r7, [r3, #0]
 800b4b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f000 831d 	beq.w	800baf4 <_dtoa_r+0xb34>
 800b4ba:	601e      	str	r6, [r3, #0]
 800b4bc:	e31a      	b.n	800baf4 <_dtoa_r+0xb34>
 800b4be:	07e2      	lsls	r2, r4, #31
 800b4c0:	d505      	bpl.n	800b4ce <_dtoa_r+0x50e>
 800b4c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4c6:	f7f5 f897 	bl	80005f8 <__aeabi_dmul>
 800b4ca:	3601      	adds	r6, #1
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	1064      	asrs	r4, r4, #1
 800b4d0:	3508      	adds	r5, #8
 800b4d2:	e73f      	b.n	800b354 <_dtoa_r+0x394>
 800b4d4:	2602      	movs	r6, #2
 800b4d6:	e742      	b.n	800b35e <_dtoa_r+0x39e>
 800b4d8:	9c07      	ldr	r4, [sp, #28]
 800b4da:	9704      	str	r7, [sp, #16]
 800b4dc:	e761      	b.n	800b3a2 <_dtoa_r+0x3e2>
 800b4de:	4b27      	ldr	r3, [pc, #156]	@ (800b57c <_dtoa_r+0x5bc>)
 800b4e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4ea:	4454      	add	r4, sl
 800b4ec:	2900      	cmp	r1, #0
 800b4ee:	d053      	beq.n	800b598 <_dtoa_r+0x5d8>
 800b4f0:	4928      	ldr	r1, [pc, #160]	@ (800b594 <_dtoa_r+0x5d4>)
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	f7f5 f9aa 	bl	800084c <__aeabi_ddiv>
 800b4f8:	4633      	mov	r3, r6
 800b4fa:	462a      	mov	r2, r5
 800b4fc:	f7f4 fec4 	bl	8000288 <__aeabi_dsub>
 800b500:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b504:	4656      	mov	r6, sl
 800b506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b50a:	f7f5 fb25 	bl	8000b58 <__aeabi_d2iz>
 800b50e:	4605      	mov	r5, r0
 800b510:	f7f5 f808 	bl	8000524 <__aeabi_i2d>
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b51c:	f7f4 feb4 	bl	8000288 <__aeabi_dsub>
 800b520:	3530      	adds	r5, #48	@ 0x30
 800b522:	4602      	mov	r2, r0
 800b524:	460b      	mov	r3, r1
 800b526:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b52a:	f806 5b01 	strb.w	r5, [r6], #1
 800b52e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b532:	f7f5 fad3 	bl	8000adc <__aeabi_dcmplt>
 800b536:	2800      	cmp	r0, #0
 800b538:	d171      	bne.n	800b61e <_dtoa_r+0x65e>
 800b53a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b53e:	4911      	ldr	r1, [pc, #68]	@ (800b584 <_dtoa_r+0x5c4>)
 800b540:	2000      	movs	r0, #0
 800b542:	f7f4 fea1 	bl	8000288 <__aeabi_dsub>
 800b546:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b54a:	f7f5 fac7 	bl	8000adc <__aeabi_dcmplt>
 800b54e:	2800      	cmp	r0, #0
 800b550:	f040 8095 	bne.w	800b67e <_dtoa_r+0x6be>
 800b554:	42a6      	cmp	r6, r4
 800b556:	f43f af50 	beq.w	800b3fa <_dtoa_r+0x43a>
 800b55a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b55e:	4b0a      	ldr	r3, [pc, #40]	@ (800b588 <_dtoa_r+0x5c8>)
 800b560:	2200      	movs	r2, #0
 800b562:	f7f5 f849 	bl	80005f8 <__aeabi_dmul>
 800b566:	4b08      	ldr	r3, [pc, #32]	@ (800b588 <_dtoa_r+0x5c8>)
 800b568:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b56c:	2200      	movs	r2, #0
 800b56e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b572:	f7f5 f841 	bl	80005f8 <__aeabi_dmul>
 800b576:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b57a:	e7c4      	b.n	800b506 <_dtoa_r+0x546>
 800b57c:	0800f868 	.word	0x0800f868
 800b580:	0800f840 	.word	0x0800f840
 800b584:	3ff00000 	.word	0x3ff00000
 800b588:	40240000 	.word	0x40240000
 800b58c:	401c0000 	.word	0x401c0000
 800b590:	40140000 	.word	0x40140000
 800b594:	3fe00000 	.word	0x3fe00000
 800b598:	4631      	mov	r1, r6
 800b59a:	4628      	mov	r0, r5
 800b59c:	f7f5 f82c 	bl	80005f8 <__aeabi_dmul>
 800b5a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b5a4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b5a6:	4656      	mov	r6, sl
 800b5a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5ac:	f7f5 fad4 	bl	8000b58 <__aeabi_d2iz>
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	f7f4 ffb7 	bl	8000524 <__aeabi_i2d>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5be:	f7f4 fe63 	bl	8000288 <__aeabi_dsub>
 800b5c2:	3530      	adds	r5, #48	@ 0x30
 800b5c4:	f806 5b01 	strb.w	r5, [r6], #1
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	42a6      	cmp	r6, r4
 800b5ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5d2:	f04f 0200 	mov.w	r2, #0
 800b5d6:	d124      	bne.n	800b622 <_dtoa_r+0x662>
 800b5d8:	4bac      	ldr	r3, [pc, #688]	@ (800b88c <_dtoa_r+0x8cc>)
 800b5da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b5de:	f7f4 fe55 	bl	800028c <__adddf3>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5ea:	f7f5 fa95 	bl	8000b18 <__aeabi_dcmpgt>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	d145      	bne.n	800b67e <_dtoa_r+0x6be>
 800b5f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b5f6:	49a5      	ldr	r1, [pc, #660]	@ (800b88c <_dtoa_r+0x8cc>)
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	f7f4 fe45 	bl	8000288 <__aeabi_dsub>
 800b5fe:	4602      	mov	r2, r0
 800b600:	460b      	mov	r3, r1
 800b602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b606:	f7f5 fa69 	bl	8000adc <__aeabi_dcmplt>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	f43f aef5 	beq.w	800b3fa <_dtoa_r+0x43a>
 800b610:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b612:	1e73      	subs	r3, r6, #1
 800b614:	9315      	str	r3, [sp, #84]	@ 0x54
 800b616:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b61a:	2b30      	cmp	r3, #48	@ 0x30
 800b61c:	d0f8      	beq.n	800b610 <_dtoa_r+0x650>
 800b61e:	9f04      	ldr	r7, [sp, #16]
 800b620:	e73e      	b.n	800b4a0 <_dtoa_r+0x4e0>
 800b622:	4b9b      	ldr	r3, [pc, #620]	@ (800b890 <_dtoa_r+0x8d0>)
 800b624:	f7f4 ffe8 	bl	80005f8 <__aeabi_dmul>
 800b628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b62c:	e7bc      	b.n	800b5a8 <_dtoa_r+0x5e8>
 800b62e:	d10c      	bne.n	800b64a <_dtoa_r+0x68a>
 800b630:	4b98      	ldr	r3, [pc, #608]	@ (800b894 <_dtoa_r+0x8d4>)
 800b632:	2200      	movs	r2, #0
 800b634:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b638:	f7f4 ffde 	bl	80005f8 <__aeabi_dmul>
 800b63c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b640:	f7f5 fa60 	bl	8000b04 <__aeabi_dcmpge>
 800b644:	2800      	cmp	r0, #0
 800b646:	f000 8157 	beq.w	800b8f8 <_dtoa_r+0x938>
 800b64a:	2400      	movs	r4, #0
 800b64c:	4625      	mov	r5, r4
 800b64e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b650:	43db      	mvns	r3, r3
 800b652:	9304      	str	r3, [sp, #16]
 800b654:	4656      	mov	r6, sl
 800b656:	2700      	movs	r7, #0
 800b658:	4621      	mov	r1, r4
 800b65a:	4658      	mov	r0, fp
 800b65c:	f000 ff00 	bl	800c460 <_Bfree>
 800b660:	2d00      	cmp	r5, #0
 800b662:	d0dc      	beq.n	800b61e <_dtoa_r+0x65e>
 800b664:	b12f      	cbz	r7, 800b672 <_dtoa_r+0x6b2>
 800b666:	42af      	cmp	r7, r5
 800b668:	d003      	beq.n	800b672 <_dtoa_r+0x6b2>
 800b66a:	4639      	mov	r1, r7
 800b66c:	4658      	mov	r0, fp
 800b66e:	f000 fef7 	bl	800c460 <_Bfree>
 800b672:	4629      	mov	r1, r5
 800b674:	4658      	mov	r0, fp
 800b676:	f000 fef3 	bl	800c460 <_Bfree>
 800b67a:	e7d0      	b.n	800b61e <_dtoa_r+0x65e>
 800b67c:	9704      	str	r7, [sp, #16]
 800b67e:	4633      	mov	r3, r6
 800b680:	461e      	mov	r6, r3
 800b682:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b686:	2a39      	cmp	r2, #57	@ 0x39
 800b688:	d107      	bne.n	800b69a <_dtoa_r+0x6da>
 800b68a:	459a      	cmp	sl, r3
 800b68c:	d1f8      	bne.n	800b680 <_dtoa_r+0x6c0>
 800b68e:	9a04      	ldr	r2, [sp, #16]
 800b690:	3201      	adds	r2, #1
 800b692:	9204      	str	r2, [sp, #16]
 800b694:	2230      	movs	r2, #48	@ 0x30
 800b696:	f88a 2000 	strb.w	r2, [sl]
 800b69a:	781a      	ldrb	r2, [r3, #0]
 800b69c:	3201      	adds	r2, #1
 800b69e:	701a      	strb	r2, [r3, #0]
 800b6a0:	e7bd      	b.n	800b61e <_dtoa_r+0x65e>
 800b6a2:	4b7b      	ldr	r3, [pc, #492]	@ (800b890 <_dtoa_r+0x8d0>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f7f4 ffa7 	bl	80005f8 <__aeabi_dmul>
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	460d      	mov	r5, r1
 800b6b2:	f7f5 fa09 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	f43f aebb 	beq.w	800b432 <_dtoa_r+0x472>
 800b6bc:	e6f0      	b.n	800b4a0 <_dtoa_r+0x4e0>
 800b6be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b6c0:	2a00      	cmp	r2, #0
 800b6c2:	f000 80db 	beq.w	800b87c <_dtoa_r+0x8bc>
 800b6c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6c8:	2a01      	cmp	r2, #1
 800b6ca:	f300 80bf 	bgt.w	800b84c <_dtoa_r+0x88c>
 800b6ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b6d0:	2a00      	cmp	r2, #0
 800b6d2:	f000 80b7 	beq.w	800b844 <_dtoa_r+0x884>
 800b6d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b6da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b6dc:	4646      	mov	r6, r8
 800b6de:	9a08      	ldr	r2, [sp, #32]
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	441a      	add	r2, r3
 800b6e4:	4658      	mov	r0, fp
 800b6e6:	4498      	add	r8, r3
 800b6e8:	9208      	str	r2, [sp, #32]
 800b6ea:	f000 ffb7 	bl	800c65c <__i2b>
 800b6ee:	4605      	mov	r5, r0
 800b6f0:	b15e      	cbz	r6, 800b70a <_dtoa_r+0x74a>
 800b6f2:	9b08      	ldr	r3, [sp, #32]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	dd08      	ble.n	800b70a <_dtoa_r+0x74a>
 800b6f8:	42b3      	cmp	r3, r6
 800b6fa:	9a08      	ldr	r2, [sp, #32]
 800b6fc:	bfa8      	it	ge
 800b6fe:	4633      	movge	r3, r6
 800b700:	eba8 0803 	sub.w	r8, r8, r3
 800b704:	1af6      	subs	r6, r6, r3
 800b706:	1ad3      	subs	r3, r2, r3
 800b708:	9308      	str	r3, [sp, #32]
 800b70a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b70c:	b1f3      	cbz	r3, 800b74c <_dtoa_r+0x78c>
 800b70e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 80b7 	beq.w	800b884 <_dtoa_r+0x8c4>
 800b716:	b18c      	cbz	r4, 800b73c <_dtoa_r+0x77c>
 800b718:	4629      	mov	r1, r5
 800b71a:	4622      	mov	r2, r4
 800b71c:	4658      	mov	r0, fp
 800b71e:	f001 f85d 	bl	800c7dc <__pow5mult>
 800b722:	464a      	mov	r2, r9
 800b724:	4601      	mov	r1, r0
 800b726:	4605      	mov	r5, r0
 800b728:	4658      	mov	r0, fp
 800b72a:	f000 ffad 	bl	800c688 <__multiply>
 800b72e:	4649      	mov	r1, r9
 800b730:	9004      	str	r0, [sp, #16]
 800b732:	4658      	mov	r0, fp
 800b734:	f000 fe94 	bl	800c460 <_Bfree>
 800b738:	9b04      	ldr	r3, [sp, #16]
 800b73a:	4699      	mov	r9, r3
 800b73c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b73e:	1b1a      	subs	r2, r3, r4
 800b740:	d004      	beq.n	800b74c <_dtoa_r+0x78c>
 800b742:	4649      	mov	r1, r9
 800b744:	4658      	mov	r0, fp
 800b746:	f001 f849 	bl	800c7dc <__pow5mult>
 800b74a:	4681      	mov	r9, r0
 800b74c:	2101      	movs	r1, #1
 800b74e:	4658      	mov	r0, fp
 800b750:	f000 ff84 	bl	800c65c <__i2b>
 800b754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b756:	4604      	mov	r4, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f000 81cf 	beq.w	800bafc <_dtoa_r+0xb3c>
 800b75e:	461a      	mov	r2, r3
 800b760:	4601      	mov	r1, r0
 800b762:	4658      	mov	r0, fp
 800b764:	f001 f83a 	bl	800c7dc <__pow5mult>
 800b768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	4604      	mov	r4, r0
 800b76e:	f300 8095 	bgt.w	800b89c <_dtoa_r+0x8dc>
 800b772:	9b02      	ldr	r3, [sp, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	f040 8087 	bne.w	800b888 <_dtoa_r+0x8c8>
 800b77a:	9b03      	ldr	r3, [sp, #12]
 800b77c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b780:	2b00      	cmp	r3, #0
 800b782:	f040 8089 	bne.w	800b898 <_dtoa_r+0x8d8>
 800b786:	9b03      	ldr	r3, [sp, #12]
 800b788:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b78c:	0d1b      	lsrs	r3, r3, #20
 800b78e:	051b      	lsls	r3, r3, #20
 800b790:	b12b      	cbz	r3, 800b79e <_dtoa_r+0x7de>
 800b792:	9b08      	ldr	r3, [sp, #32]
 800b794:	3301      	adds	r3, #1
 800b796:	9308      	str	r3, [sp, #32]
 800b798:	f108 0801 	add.w	r8, r8, #1
 800b79c:	2301      	movs	r3, #1
 800b79e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f000 81b0 	beq.w	800bb08 <_dtoa_r+0xb48>
 800b7a8:	6923      	ldr	r3, [r4, #16]
 800b7aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7ae:	6918      	ldr	r0, [r3, #16]
 800b7b0:	f000 ff08 	bl	800c5c4 <__hi0bits>
 800b7b4:	f1c0 0020 	rsb	r0, r0, #32
 800b7b8:	9b08      	ldr	r3, [sp, #32]
 800b7ba:	4418      	add	r0, r3
 800b7bc:	f010 001f 	ands.w	r0, r0, #31
 800b7c0:	d077      	beq.n	800b8b2 <_dtoa_r+0x8f2>
 800b7c2:	f1c0 0320 	rsb	r3, r0, #32
 800b7c6:	2b04      	cmp	r3, #4
 800b7c8:	dd6b      	ble.n	800b8a2 <_dtoa_r+0x8e2>
 800b7ca:	9b08      	ldr	r3, [sp, #32]
 800b7cc:	f1c0 001c 	rsb	r0, r0, #28
 800b7d0:	4403      	add	r3, r0
 800b7d2:	4480      	add	r8, r0
 800b7d4:	4406      	add	r6, r0
 800b7d6:	9308      	str	r3, [sp, #32]
 800b7d8:	f1b8 0f00 	cmp.w	r8, #0
 800b7dc:	dd05      	ble.n	800b7ea <_dtoa_r+0x82a>
 800b7de:	4649      	mov	r1, r9
 800b7e0:	4642      	mov	r2, r8
 800b7e2:	4658      	mov	r0, fp
 800b7e4:	f001 f854 	bl	800c890 <__lshift>
 800b7e8:	4681      	mov	r9, r0
 800b7ea:	9b08      	ldr	r3, [sp, #32]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	dd05      	ble.n	800b7fc <_dtoa_r+0x83c>
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	4658      	mov	r0, fp
 800b7f6:	f001 f84b 	bl	800c890 <__lshift>
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d059      	beq.n	800b8b6 <_dtoa_r+0x8f6>
 800b802:	4621      	mov	r1, r4
 800b804:	4648      	mov	r0, r9
 800b806:	f001 f8af 	bl	800c968 <__mcmp>
 800b80a:	2800      	cmp	r0, #0
 800b80c:	da53      	bge.n	800b8b6 <_dtoa_r+0x8f6>
 800b80e:	1e7b      	subs	r3, r7, #1
 800b810:	9304      	str	r3, [sp, #16]
 800b812:	4649      	mov	r1, r9
 800b814:	2300      	movs	r3, #0
 800b816:	220a      	movs	r2, #10
 800b818:	4658      	mov	r0, fp
 800b81a:	f000 fe43 	bl	800c4a4 <__multadd>
 800b81e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b820:	4681      	mov	r9, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	f000 8172 	beq.w	800bb0c <_dtoa_r+0xb4c>
 800b828:	2300      	movs	r3, #0
 800b82a:	4629      	mov	r1, r5
 800b82c:	220a      	movs	r2, #10
 800b82e:	4658      	mov	r0, fp
 800b830:	f000 fe38 	bl	800c4a4 <__multadd>
 800b834:	9b00      	ldr	r3, [sp, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	4605      	mov	r5, r0
 800b83a:	dc67      	bgt.n	800b90c <_dtoa_r+0x94c>
 800b83c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b83e:	2b02      	cmp	r3, #2
 800b840:	dc41      	bgt.n	800b8c6 <_dtoa_r+0x906>
 800b842:	e063      	b.n	800b90c <_dtoa_r+0x94c>
 800b844:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b846:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b84a:	e746      	b.n	800b6da <_dtoa_r+0x71a>
 800b84c:	9b07      	ldr	r3, [sp, #28]
 800b84e:	1e5c      	subs	r4, r3, #1
 800b850:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b852:	42a3      	cmp	r3, r4
 800b854:	bfbf      	itttt	lt
 800b856:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b858:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b85a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b85c:	1ae3      	sublt	r3, r4, r3
 800b85e:	bfb4      	ite	lt
 800b860:	18d2      	addlt	r2, r2, r3
 800b862:	1b1c      	subge	r4, r3, r4
 800b864:	9b07      	ldr	r3, [sp, #28]
 800b866:	bfbc      	itt	lt
 800b868:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b86a:	2400      	movlt	r4, #0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	bfb5      	itete	lt
 800b870:	eba8 0603 	sublt.w	r6, r8, r3
 800b874:	9b07      	ldrge	r3, [sp, #28]
 800b876:	2300      	movlt	r3, #0
 800b878:	4646      	movge	r6, r8
 800b87a:	e730      	b.n	800b6de <_dtoa_r+0x71e>
 800b87c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b87e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b880:	4646      	mov	r6, r8
 800b882:	e735      	b.n	800b6f0 <_dtoa_r+0x730>
 800b884:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b886:	e75c      	b.n	800b742 <_dtoa_r+0x782>
 800b888:	2300      	movs	r3, #0
 800b88a:	e788      	b.n	800b79e <_dtoa_r+0x7de>
 800b88c:	3fe00000 	.word	0x3fe00000
 800b890:	40240000 	.word	0x40240000
 800b894:	40140000 	.word	0x40140000
 800b898:	9b02      	ldr	r3, [sp, #8]
 800b89a:	e780      	b.n	800b79e <_dtoa_r+0x7de>
 800b89c:	2300      	movs	r3, #0
 800b89e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8a0:	e782      	b.n	800b7a8 <_dtoa_r+0x7e8>
 800b8a2:	d099      	beq.n	800b7d8 <_dtoa_r+0x818>
 800b8a4:	9a08      	ldr	r2, [sp, #32]
 800b8a6:	331c      	adds	r3, #28
 800b8a8:	441a      	add	r2, r3
 800b8aa:	4498      	add	r8, r3
 800b8ac:	441e      	add	r6, r3
 800b8ae:	9208      	str	r2, [sp, #32]
 800b8b0:	e792      	b.n	800b7d8 <_dtoa_r+0x818>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	e7f6      	b.n	800b8a4 <_dtoa_r+0x8e4>
 800b8b6:	9b07      	ldr	r3, [sp, #28]
 800b8b8:	9704      	str	r7, [sp, #16]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	dc20      	bgt.n	800b900 <_dtoa_r+0x940>
 800b8be:	9300      	str	r3, [sp, #0]
 800b8c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	dd1e      	ble.n	800b904 <_dtoa_r+0x944>
 800b8c6:	9b00      	ldr	r3, [sp, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f47f aec0 	bne.w	800b64e <_dtoa_r+0x68e>
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	2205      	movs	r2, #5
 800b8d2:	4658      	mov	r0, fp
 800b8d4:	f000 fde6 	bl	800c4a4 <__multadd>
 800b8d8:	4601      	mov	r1, r0
 800b8da:	4604      	mov	r4, r0
 800b8dc:	4648      	mov	r0, r9
 800b8de:	f001 f843 	bl	800c968 <__mcmp>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	f77f aeb3 	ble.w	800b64e <_dtoa_r+0x68e>
 800b8e8:	4656      	mov	r6, sl
 800b8ea:	2331      	movs	r3, #49	@ 0x31
 800b8ec:	f806 3b01 	strb.w	r3, [r6], #1
 800b8f0:	9b04      	ldr	r3, [sp, #16]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	9304      	str	r3, [sp, #16]
 800b8f6:	e6ae      	b.n	800b656 <_dtoa_r+0x696>
 800b8f8:	9c07      	ldr	r4, [sp, #28]
 800b8fa:	9704      	str	r7, [sp, #16]
 800b8fc:	4625      	mov	r5, r4
 800b8fe:	e7f3      	b.n	800b8e8 <_dtoa_r+0x928>
 800b900:	9b07      	ldr	r3, [sp, #28]
 800b902:	9300      	str	r3, [sp, #0]
 800b904:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b906:	2b00      	cmp	r3, #0
 800b908:	f000 8104 	beq.w	800bb14 <_dtoa_r+0xb54>
 800b90c:	2e00      	cmp	r6, #0
 800b90e:	dd05      	ble.n	800b91c <_dtoa_r+0x95c>
 800b910:	4629      	mov	r1, r5
 800b912:	4632      	mov	r2, r6
 800b914:	4658      	mov	r0, fp
 800b916:	f000 ffbb 	bl	800c890 <__lshift>
 800b91a:	4605      	mov	r5, r0
 800b91c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d05a      	beq.n	800b9d8 <_dtoa_r+0xa18>
 800b922:	6869      	ldr	r1, [r5, #4]
 800b924:	4658      	mov	r0, fp
 800b926:	f000 fd5b 	bl	800c3e0 <_Balloc>
 800b92a:	4606      	mov	r6, r0
 800b92c:	b928      	cbnz	r0, 800b93a <_dtoa_r+0x97a>
 800b92e:	4b84      	ldr	r3, [pc, #528]	@ (800bb40 <_dtoa_r+0xb80>)
 800b930:	4602      	mov	r2, r0
 800b932:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b936:	f7ff bb5a 	b.w	800afee <_dtoa_r+0x2e>
 800b93a:	692a      	ldr	r2, [r5, #16]
 800b93c:	3202      	adds	r2, #2
 800b93e:	0092      	lsls	r2, r2, #2
 800b940:	f105 010c 	add.w	r1, r5, #12
 800b944:	300c      	adds	r0, #12
 800b946:	f7ff fa76 	bl	800ae36 <memcpy>
 800b94a:	2201      	movs	r2, #1
 800b94c:	4631      	mov	r1, r6
 800b94e:	4658      	mov	r0, fp
 800b950:	f000 ff9e 	bl	800c890 <__lshift>
 800b954:	f10a 0301 	add.w	r3, sl, #1
 800b958:	9307      	str	r3, [sp, #28]
 800b95a:	9b00      	ldr	r3, [sp, #0]
 800b95c:	4453      	add	r3, sl
 800b95e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b960:	9b02      	ldr	r3, [sp, #8]
 800b962:	f003 0301 	and.w	r3, r3, #1
 800b966:	462f      	mov	r7, r5
 800b968:	930a      	str	r3, [sp, #40]	@ 0x28
 800b96a:	4605      	mov	r5, r0
 800b96c:	9b07      	ldr	r3, [sp, #28]
 800b96e:	4621      	mov	r1, r4
 800b970:	3b01      	subs	r3, #1
 800b972:	4648      	mov	r0, r9
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	f7ff fa9b 	bl	800aeb0 <quorem>
 800b97a:	4639      	mov	r1, r7
 800b97c:	9002      	str	r0, [sp, #8]
 800b97e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b982:	4648      	mov	r0, r9
 800b984:	f000 fff0 	bl	800c968 <__mcmp>
 800b988:	462a      	mov	r2, r5
 800b98a:	9008      	str	r0, [sp, #32]
 800b98c:	4621      	mov	r1, r4
 800b98e:	4658      	mov	r0, fp
 800b990:	f001 f806 	bl	800c9a0 <__mdiff>
 800b994:	68c2      	ldr	r2, [r0, #12]
 800b996:	4606      	mov	r6, r0
 800b998:	bb02      	cbnz	r2, 800b9dc <_dtoa_r+0xa1c>
 800b99a:	4601      	mov	r1, r0
 800b99c:	4648      	mov	r0, r9
 800b99e:	f000 ffe3 	bl	800c968 <__mcmp>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	4631      	mov	r1, r6
 800b9a6:	4658      	mov	r0, fp
 800b9a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9aa:	f000 fd59 	bl	800c460 <_Bfree>
 800b9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9b2:	9e07      	ldr	r6, [sp, #28]
 800b9b4:	ea43 0102 	orr.w	r1, r3, r2
 800b9b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9ba:	4319      	orrs	r1, r3
 800b9bc:	d110      	bne.n	800b9e0 <_dtoa_r+0xa20>
 800b9be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9c2:	d029      	beq.n	800ba18 <_dtoa_r+0xa58>
 800b9c4:	9b08      	ldr	r3, [sp, #32]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	dd02      	ble.n	800b9d0 <_dtoa_r+0xa10>
 800b9ca:	9b02      	ldr	r3, [sp, #8]
 800b9cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b9d0:	9b00      	ldr	r3, [sp, #0]
 800b9d2:	f883 8000 	strb.w	r8, [r3]
 800b9d6:	e63f      	b.n	800b658 <_dtoa_r+0x698>
 800b9d8:	4628      	mov	r0, r5
 800b9da:	e7bb      	b.n	800b954 <_dtoa_r+0x994>
 800b9dc:	2201      	movs	r2, #1
 800b9de:	e7e1      	b.n	800b9a4 <_dtoa_r+0x9e4>
 800b9e0:	9b08      	ldr	r3, [sp, #32]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	db04      	blt.n	800b9f0 <_dtoa_r+0xa30>
 800b9e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b9e8:	430b      	orrs	r3, r1
 800b9ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b9ec:	430b      	orrs	r3, r1
 800b9ee:	d120      	bne.n	800ba32 <_dtoa_r+0xa72>
 800b9f0:	2a00      	cmp	r2, #0
 800b9f2:	dded      	ble.n	800b9d0 <_dtoa_r+0xa10>
 800b9f4:	4649      	mov	r1, r9
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	4658      	mov	r0, fp
 800b9fa:	f000 ff49 	bl	800c890 <__lshift>
 800b9fe:	4621      	mov	r1, r4
 800ba00:	4681      	mov	r9, r0
 800ba02:	f000 ffb1 	bl	800c968 <__mcmp>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	dc03      	bgt.n	800ba12 <_dtoa_r+0xa52>
 800ba0a:	d1e1      	bne.n	800b9d0 <_dtoa_r+0xa10>
 800ba0c:	f018 0f01 	tst.w	r8, #1
 800ba10:	d0de      	beq.n	800b9d0 <_dtoa_r+0xa10>
 800ba12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba16:	d1d8      	bne.n	800b9ca <_dtoa_r+0xa0a>
 800ba18:	9a00      	ldr	r2, [sp, #0]
 800ba1a:	2339      	movs	r3, #57	@ 0x39
 800ba1c:	7013      	strb	r3, [r2, #0]
 800ba1e:	4633      	mov	r3, r6
 800ba20:	461e      	mov	r6, r3
 800ba22:	3b01      	subs	r3, #1
 800ba24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ba28:	2a39      	cmp	r2, #57	@ 0x39
 800ba2a:	d052      	beq.n	800bad2 <_dtoa_r+0xb12>
 800ba2c:	3201      	adds	r2, #1
 800ba2e:	701a      	strb	r2, [r3, #0]
 800ba30:	e612      	b.n	800b658 <_dtoa_r+0x698>
 800ba32:	2a00      	cmp	r2, #0
 800ba34:	dd07      	ble.n	800ba46 <_dtoa_r+0xa86>
 800ba36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba3a:	d0ed      	beq.n	800ba18 <_dtoa_r+0xa58>
 800ba3c:	9a00      	ldr	r2, [sp, #0]
 800ba3e:	f108 0301 	add.w	r3, r8, #1
 800ba42:	7013      	strb	r3, [r2, #0]
 800ba44:	e608      	b.n	800b658 <_dtoa_r+0x698>
 800ba46:	9b07      	ldr	r3, [sp, #28]
 800ba48:	9a07      	ldr	r2, [sp, #28]
 800ba4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ba4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d028      	beq.n	800baa6 <_dtoa_r+0xae6>
 800ba54:	4649      	mov	r1, r9
 800ba56:	2300      	movs	r3, #0
 800ba58:	220a      	movs	r2, #10
 800ba5a:	4658      	mov	r0, fp
 800ba5c:	f000 fd22 	bl	800c4a4 <__multadd>
 800ba60:	42af      	cmp	r7, r5
 800ba62:	4681      	mov	r9, r0
 800ba64:	f04f 0300 	mov.w	r3, #0
 800ba68:	f04f 020a 	mov.w	r2, #10
 800ba6c:	4639      	mov	r1, r7
 800ba6e:	4658      	mov	r0, fp
 800ba70:	d107      	bne.n	800ba82 <_dtoa_r+0xac2>
 800ba72:	f000 fd17 	bl	800c4a4 <__multadd>
 800ba76:	4607      	mov	r7, r0
 800ba78:	4605      	mov	r5, r0
 800ba7a:	9b07      	ldr	r3, [sp, #28]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	9307      	str	r3, [sp, #28]
 800ba80:	e774      	b.n	800b96c <_dtoa_r+0x9ac>
 800ba82:	f000 fd0f 	bl	800c4a4 <__multadd>
 800ba86:	4629      	mov	r1, r5
 800ba88:	4607      	mov	r7, r0
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	220a      	movs	r2, #10
 800ba8e:	4658      	mov	r0, fp
 800ba90:	f000 fd08 	bl	800c4a4 <__multadd>
 800ba94:	4605      	mov	r5, r0
 800ba96:	e7f0      	b.n	800ba7a <_dtoa_r+0xaba>
 800ba98:	9b00      	ldr	r3, [sp, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	bfcc      	ite	gt
 800ba9e:	461e      	movgt	r6, r3
 800baa0:	2601      	movle	r6, #1
 800baa2:	4456      	add	r6, sl
 800baa4:	2700      	movs	r7, #0
 800baa6:	4649      	mov	r1, r9
 800baa8:	2201      	movs	r2, #1
 800baaa:	4658      	mov	r0, fp
 800baac:	f000 fef0 	bl	800c890 <__lshift>
 800bab0:	4621      	mov	r1, r4
 800bab2:	4681      	mov	r9, r0
 800bab4:	f000 ff58 	bl	800c968 <__mcmp>
 800bab8:	2800      	cmp	r0, #0
 800baba:	dcb0      	bgt.n	800ba1e <_dtoa_r+0xa5e>
 800babc:	d102      	bne.n	800bac4 <_dtoa_r+0xb04>
 800babe:	f018 0f01 	tst.w	r8, #1
 800bac2:	d1ac      	bne.n	800ba1e <_dtoa_r+0xa5e>
 800bac4:	4633      	mov	r3, r6
 800bac6:	461e      	mov	r6, r3
 800bac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bacc:	2a30      	cmp	r2, #48	@ 0x30
 800bace:	d0fa      	beq.n	800bac6 <_dtoa_r+0xb06>
 800bad0:	e5c2      	b.n	800b658 <_dtoa_r+0x698>
 800bad2:	459a      	cmp	sl, r3
 800bad4:	d1a4      	bne.n	800ba20 <_dtoa_r+0xa60>
 800bad6:	9b04      	ldr	r3, [sp, #16]
 800bad8:	3301      	adds	r3, #1
 800bada:	9304      	str	r3, [sp, #16]
 800badc:	2331      	movs	r3, #49	@ 0x31
 800bade:	f88a 3000 	strb.w	r3, [sl]
 800bae2:	e5b9      	b.n	800b658 <_dtoa_r+0x698>
 800bae4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bae6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bb44 <_dtoa_r+0xb84>
 800baea:	b11b      	cbz	r3, 800baf4 <_dtoa_r+0xb34>
 800baec:	f10a 0308 	add.w	r3, sl, #8
 800baf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800baf2:	6013      	str	r3, [r2, #0]
 800baf4:	4650      	mov	r0, sl
 800baf6:	b019      	add	sp, #100	@ 0x64
 800baf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	f77f ae37 	ble.w	800b772 <_dtoa_r+0x7b2>
 800bb04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb06:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb08:	2001      	movs	r0, #1
 800bb0a:	e655      	b.n	800b7b8 <_dtoa_r+0x7f8>
 800bb0c:	9b00      	ldr	r3, [sp, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	f77f aed6 	ble.w	800b8c0 <_dtoa_r+0x900>
 800bb14:	4656      	mov	r6, sl
 800bb16:	4621      	mov	r1, r4
 800bb18:	4648      	mov	r0, r9
 800bb1a:	f7ff f9c9 	bl	800aeb0 <quorem>
 800bb1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb22:	f806 8b01 	strb.w	r8, [r6], #1
 800bb26:	9b00      	ldr	r3, [sp, #0]
 800bb28:	eba6 020a 	sub.w	r2, r6, sl
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	ddb3      	ble.n	800ba98 <_dtoa_r+0xad8>
 800bb30:	4649      	mov	r1, r9
 800bb32:	2300      	movs	r3, #0
 800bb34:	220a      	movs	r2, #10
 800bb36:	4658      	mov	r0, fp
 800bb38:	f000 fcb4 	bl	800c4a4 <__multadd>
 800bb3c:	4681      	mov	r9, r0
 800bb3e:	e7ea      	b.n	800bb16 <_dtoa_r+0xb56>
 800bb40:	0800f764 	.word	0x0800f764
 800bb44:	0800f6ff 	.word	0x0800f6ff

0800bb48 <_free_r>:
 800bb48:	b538      	push	{r3, r4, r5, lr}
 800bb4a:	4605      	mov	r5, r0
 800bb4c:	2900      	cmp	r1, #0
 800bb4e:	d041      	beq.n	800bbd4 <_free_r+0x8c>
 800bb50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb54:	1f0c      	subs	r4, r1, #4
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	bfb8      	it	lt
 800bb5a:	18e4      	addlt	r4, r4, r3
 800bb5c:	f000 fc34 	bl	800c3c8 <__malloc_lock>
 800bb60:	4a1d      	ldr	r2, [pc, #116]	@ (800bbd8 <_free_r+0x90>)
 800bb62:	6813      	ldr	r3, [r2, #0]
 800bb64:	b933      	cbnz	r3, 800bb74 <_free_r+0x2c>
 800bb66:	6063      	str	r3, [r4, #4]
 800bb68:	6014      	str	r4, [r2, #0]
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb70:	f000 bc30 	b.w	800c3d4 <__malloc_unlock>
 800bb74:	42a3      	cmp	r3, r4
 800bb76:	d908      	bls.n	800bb8a <_free_r+0x42>
 800bb78:	6820      	ldr	r0, [r4, #0]
 800bb7a:	1821      	adds	r1, r4, r0
 800bb7c:	428b      	cmp	r3, r1
 800bb7e:	bf01      	itttt	eq
 800bb80:	6819      	ldreq	r1, [r3, #0]
 800bb82:	685b      	ldreq	r3, [r3, #4]
 800bb84:	1809      	addeq	r1, r1, r0
 800bb86:	6021      	streq	r1, [r4, #0]
 800bb88:	e7ed      	b.n	800bb66 <_free_r+0x1e>
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	b10b      	cbz	r3, 800bb94 <_free_r+0x4c>
 800bb90:	42a3      	cmp	r3, r4
 800bb92:	d9fa      	bls.n	800bb8a <_free_r+0x42>
 800bb94:	6811      	ldr	r1, [r2, #0]
 800bb96:	1850      	adds	r0, r2, r1
 800bb98:	42a0      	cmp	r0, r4
 800bb9a:	d10b      	bne.n	800bbb4 <_free_r+0x6c>
 800bb9c:	6820      	ldr	r0, [r4, #0]
 800bb9e:	4401      	add	r1, r0
 800bba0:	1850      	adds	r0, r2, r1
 800bba2:	4283      	cmp	r3, r0
 800bba4:	6011      	str	r1, [r2, #0]
 800bba6:	d1e0      	bne.n	800bb6a <_free_r+0x22>
 800bba8:	6818      	ldr	r0, [r3, #0]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	6053      	str	r3, [r2, #4]
 800bbae:	4408      	add	r0, r1
 800bbb0:	6010      	str	r0, [r2, #0]
 800bbb2:	e7da      	b.n	800bb6a <_free_r+0x22>
 800bbb4:	d902      	bls.n	800bbbc <_free_r+0x74>
 800bbb6:	230c      	movs	r3, #12
 800bbb8:	602b      	str	r3, [r5, #0]
 800bbba:	e7d6      	b.n	800bb6a <_free_r+0x22>
 800bbbc:	6820      	ldr	r0, [r4, #0]
 800bbbe:	1821      	adds	r1, r4, r0
 800bbc0:	428b      	cmp	r3, r1
 800bbc2:	bf04      	itt	eq
 800bbc4:	6819      	ldreq	r1, [r3, #0]
 800bbc6:	685b      	ldreq	r3, [r3, #4]
 800bbc8:	6063      	str	r3, [r4, #4]
 800bbca:	bf04      	itt	eq
 800bbcc:	1809      	addeq	r1, r1, r0
 800bbce:	6021      	streq	r1, [r4, #0]
 800bbd0:	6054      	str	r4, [r2, #4]
 800bbd2:	e7ca      	b.n	800bb6a <_free_r+0x22>
 800bbd4:	bd38      	pop	{r3, r4, r5, pc}
 800bbd6:	bf00      	nop
 800bbd8:	20000844 	.word	0x20000844

0800bbdc <rshift>:
 800bbdc:	6903      	ldr	r3, [r0, #16]
 800bbde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bbe2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbe6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bbea:	f100 0414 	add.w	r4, r0, #20
 800bbee:	dd45      	ble.n	800bc7c <rshift+0xa0>
 800bbf0:	f011 011f 	ands.w	r1, r1, #31
 800bbf4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bbf8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bbfc:	d10c      	bne.n	800bc18 <rshift+0x3c>
 800bbfe:	f100 0710 	add.w	r7, r0, #16
 800bc02:	4629      	mov	r1, r5
 800bc04:	42b1      	cmp	r1, r6
 800bc06:	d334      	bcc.n	800bc72 <rshift+0x96>
 800bc08:	1a9b      	subs	r3, r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	1eea      	subs	r2, r5, #3
 800bc0e:	4296      	cmp	r6, r2
 800bc10:	bf38      	it	cc
 800bc12:	2300      	movcc	r3, #0
 800bc14:	4423      	add	r3, r4
 800bc16:	e015      	b.n	800bc44 <rshift+0x68>
 800bc18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bc1c:	f1c1 0820 	rsb	r8, r1, #32
 800bc20:	40cf      	lsrs	r7, r1
 800bc22:	f105 0e04 	add.w	lr, r5, #4
 800bc26:	46a1      	mov	r9, r4
 800bc28:	4576      	cmp	r6, lr
 800bc2a:	46f4      	mov	ip, lr
 800bc2c:	d815      	bhi.n	800bc5a <rshift+0x7e>
 800bc2e:	1a9a      	subs	r2, r3, r2
 800bc30:	0092      	lsls	r2, r2, #2
 800bc32:	3a04      	subs	r2, #4
 800bc34:	3501      	adds	r5, #1
 800bc36:	42ae      	cmp	r6, r5
 800bc38:	bf38      	it	cc
 800bc3a:	2200      	movcc	r2, #0
 800bc3c:	18a3      	adds	r3, r4, r2
 800bc3e:	50a7      	str	r7, [r4, r2]
 800bc40:	b107      	cbz	r7, 800bc44 <rshift+0x68>
 800bc42:	3304      	adds	r3, #4
 800bc44:	1b1a      	subs	r2, r3, r4
 800bc46:	42a3      	cmp	r3, r4
 800bc48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bc4c:	bf08      	it	eq
 800bc4e:	2300      	moveq	r3, #0
 800bc50:	6102      	str	r2, [r0, #16]
 800bc52:	bf08      	it	eq
 800bc54:	6143      	streq	r3, [r0, #20]
 800bc56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc5a:	f8dc c000 	ldr.w	ip, [ip]
 800bc5e:	fa0c fc08 	lsl.w	ip, ip, r8
 800bc62:	ea4c 0707 	orr.w	r7, ip, r7
 800bc66:	f849 7b04 	str.w	r7, [r9], #4
 800bc6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc6e:	40cf      	lsrs	r7, r1
 800bc70:	e7da      	b.n	800bc28 <rshift+0x4c>
 800bc72:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc76:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc7a:	e7c3      	b.n	800bc04 <rshift+0x28>
 800bc7c:	4623      	mov	r3, r4
 800bc7e:	e7e1      	b.n	800bc44 <rshift+0x68>

0800bc80 <__hexdig_fun>:
 800bc80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bc84:	2b09      	cmp	r3, #9
 800bc86:	d802      	bhi.n	800bc8e <__hexdig_fun+0xe>
 800bc88:	3820      	subs	r0, #32
 800bc8a:	b2c0      	uxtb	r0, r0
 800bc8c:	4770      	bx	lr
 800bc8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bc92:	2b05      	cmp	r3, #5
 800bc94:	d801      	bhi.n	800bc9a <__hexdig_fun+0x1a>
 800bc96:	3847      	subs	r0, #71	@ 0x47
 800bc98:	e7f7      	b.n	800bc8a <__hexdig_fun+0xa>
 800bc9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bc9e:	2b05      	cmp	r3, #5
 800bca0:	d801      	bhi.n	800bca6 <__hexdig_fun+0x26>
 800bca2:	3827      	subs	r0, #39	@ 0x27
 800bca4:	e7f1      	b.n	800bc8a <__hexdig_fun+0xa>
 800bca6:	2000      	movs	r0, #0
 800bca8:	4770      	bx	lr
	...

0800bcac <__gethex>:
 800bcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb0:	b085      	sub	sp, #20
 800bcb2:	468a      	mov	sl, r1
 800bcb4:	9302      	str	r3, [sp, #8]
 800bcb6:	680b      	ldr	r3, [r1, #0]
 800bcb8:	9001      	str	r0, [sp, #4]
 800bcba:	4690      	mov	r8, r2
 800bcbc:	1c9c      	adds	r4, r3, #2
 800bcbe:	46a1      	mov	r9, r4
 800bcc0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bcc4:	2830      	cmp	r0, #48	@ 0x30
 800bcc6:	d0fa      	beq.n	800bcbe <__gethex+0x12>
 800bcc8:	eba9 0303 	sub.w	r3, r9, r3
 800bccc:	f1a3 0b02 	sub.w	fp, r3, #2
 800bcd0:	f7ff ffd6 	bl	800bc80 <__hexdig_fun>
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d168      	bne.n	800bdac <__gethex+0x100>
 800bcda:	49a0      	ldr	r1, [pc, #640]	@ (800bf5c <__gethex+0x2b0>)
 800bcdc:	2201      	movs	r2, #1
 800bcde:	4648      	mov	r0, r9
 800bce0:	f7fe ffc3 	bl	800ac6a <strncmp>
 800bce4:	4607      	mov	r7, r0
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d167      	bne.n	800bdba <__gethex+0x10e>
 800bcea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bcee:	4626      	mov	r6, r4
 800bcf0:	f7ff ffc6 	bl	800bc80 <__hexdig_fun>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	d062      	beq.n	800bdbe <__gethex+0x112>
 800bcf8:	4623      	mov	r3, r4
 800bcfa:	7818      	ldrb	r0, [r3, #0]
 800bcfc:	2830      	cmp	r0, #48	@ 0x30
 800bcfe:	4699      	mov	r9, r3
 800bd00:	f103 0301 	add.w	r3, r3, #1
 800bd04:	d0f9      	beq.n	800bcfa <__gethex+0x4e>
 800bd06:	f7ff ffbb 	bl	800bc80 <__hexdig_fun>
 800bd0a:	fab0 f580 	clz	r5, r0
 800bd0e:	096d      	lsrs	r5, r5, #5
 800bd10:	f04f 0b01 	mov.w	fp, #1
 800bd14:	464a      	mov	r2, r9
 800bd16:	4616      	mov	r6, r2
 800bd18:	3201      	adds	r2, #1
 800bd1a:	7830      	ldrb	r0, [r6, #0]
 800bd1c:	f7ff ffb0 	bl	800bc80 <__hexdig_fun>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d1f8      	bne.n	800bd16 <__gethex+0x6a>
 800bd24:	498d      	ldr	r1, [pc, #564]	@ (800bf5c <__gethex+0x2b0>)
 800bd26:	2201      	movs	r2, #1
 800bd28:	4630      	mov	r0, r6
 800bd2a:	f7fe ff9e 	bl	800ac6a <strncmp>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d13f      	bne.n	800bdb2 <__gethex+0x106>
 800bd32:	b944      	cbnz	r4, 800bd46 <__gethex+0x9a>
 800bd34:	1c74      	adds	r4, r6, #1
 800bd36:	4622      	mov	r2, r4
 800bd38:	4616      	mov	r6, r2
 800bd3a:	3201      	adds	r2, #1
 800bd3c:	7830      	ldrb	r0, [r6, #0]
 800bd3e:	f7ff ff9f 	bl	800bc80 <__hexdig_fun>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d1f8      	bne.n	800bd38 <__gethex+0x8c>
 800bd46:	1ba4      	subs	r4, r4, r6
 800bd48:	00a7      	lsls	r7, r4, #2
 800bd4a:	7833      	ldrb	r3, [r6, #0]
 800bd4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bd50:	2b50      	cmp	r3, #80	@ 0x50
 800bd52:	d13e      	bne.n	800bdd2 <__gethex+0x126>
 800bd54:	7873      	ldrb	r3, [r6, #1]
 800bd56:	2b2b      	cmp	r3, #43	@ 0x2b
 800bd58:	d033      	beq.n	800bdc2 <__gethex+0x116>
 800bd5a:	2b2d      	cmp	r3, #45	@ 0x2d
 800bd5c:	d034      	beq.n	800bdc8 <__gethex+0x11c>
 800bd5e:	1c71      	adds	r1, r6, #1
 800bd60:	2400      	movs	r4, #0
 800bd62:	7808      	ldrb	r0, [r1, #0]
 800bd64:	f7ff ff8c 	bl	800bc80 <__hexdig_fun>
 800bd68:	1e43      	subs	r3, r0, #1
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	2b18      	cmp	r3, #24
 800bd6e:	d830      	bhi.n	800bdd2 <__gethex+0x126>
 800bd70:	f1a0 0210 	sub.w	r2, r0, #16
 800bd74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd78:	f7ff ff82 	bl	800bc80 <__hexdig_fun>
 800bd7c:	f100 3cff 	add.w	ip, r0, #4294967295
 800bd80:	fa5f fc8c 	uxtb.w	ip, ip
 800bd84:	f1bc 0f18 	cmp.w	ip, #24
 800bd88:	f04f 030a 	mov.w	r3, #10
 800bd8c:	d91e      	bls.n	800bdcc <__gethex+0x120>
 800bd8e:	b104      	cbz	r4, 800bd92 <__gethex+0xe6>
 800bd90:	4252      	negs	r2, r2
 800bd92:	4417      	add	r7, r2
 800bd94:	f8ca 1000 	str.w	r1, [sl]
 800bd98:	b1ed      	cbz	r5, 800bdd6 <__gethex+0x12a>
 800bd9a:	f1bb 0f00 	cmp.w	fp, #0
 800bd9e:	bf0c      	ite	eq
 800bda0:	2506      	moveq	r5, #6
 800bda2:	2500      	movne	r5, #0
 800bda4:	4628      	mov	r0, r5
 800bda6:	b005      	add	sp, #20
 800bda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdac:	2500      	movs	r5, #0
 800bdae:	462c      	mov	r4, r5
 800bdb0:	e7b0      	b.n	800bd14 <__gethex+0x68>
 800bdb2:	2c00      	cmp	r4, #0
 800bdb4:	d1c7      	bne.n	800bd46 <__gethex+0x9a>
 800bdb6:	4627      	mov	r7, r4
 800bdb8:	e7c7      	b.n	800bd4a <__gethex+0x9e>
 800bdba:	464e      	mov	r6, r9
 800bdbc:	462f      	mov	r7, r5
 800bdbe:	2501      	movs	r5, #1
 800bdc0:	e7c3      	b.n	800bd4a <__gethex+0x9e>
 800bdc2:	2400      	movs	r4, #0
 800bdc4:	1cb1      	adds	r1, r6, #2
 800bdc6:	e7cc      	b.n	800bd62 <__gethex+0xb6>
 800bdc8:	2401      	movs	r4, #1
 800bdca:	e7fb      	b.n	800bdc4 <__gethex+0x118>
 800bdcc:	fb03 0002 	mla	r0, r3, r2, r0
 800bdd0:	e7ce      	b.n	800bd70 <__gethex+0xc4>
 800bdd2:	4631      	mov	r1, r6
 800bdd4:	e7de      	b.n	800bd94 <__gethex+0xe8>
 800bdd6:	eba6 0309 	sub.w	r3, r6, r9
 800bdda:	3b01      	subs	r3, #1
 800bddc:	4629      	mov	r1, r5
 800bdde:	2b07      	cmp	r3, #7
 800bde0:	dc0a      	bgt.n	800bdf8 <__gethex+0x14c>
 800bde2:	9801      	ldr	r0, [sp, #4]
 800bde4:	f000 fafc 	bl	800c3e0 <_Balloc>
 800bde8:	4604      	mov	r4, r0
 800bdea:	b940      	cbnz	r0, 800bdfe <__gethex+0x152>
 800bdec:	4b5c      	ldr	r3, [pc, #368]	@ (800bf60 <__gethex+0x2b4>)
 800bdee:	4602      	mov	r2, r0
 800bdf0:	21e4      	movs	r1, #228	@ 0xe4
 800bdf2:	485c      	ldr	r0, [pc, #368]	@ (800bf64 <__gethex+0x2b8>)
 800bdf4:	f7ff f83e 	bl	800ae74 <__assert_func>
 800bdf8:	3101      	adds	r1, #1
 800bdfa:	105b      	asrs	r3, r3, #1
 800bdfc:	e7ef      	b.n	800bdde <__gethex+0x132>
 800bdfe:	f100 0a14 	add.w	sl, r0, #20
 800be02:	2300      	movs	r3, #0
 800be04:	4655      	mov	r5, sl
 800be06:	469b      	mov	fp, r3
 800be08:	45b1      	cmp	r9, r6
 800be0a:	d337      	bcc.n	800be7c <__gethex+0x1d0>
 800be0c:	f845 bb04 	str.w	fp, [r5], #4
 800be10:	eba5 050a 	sub.w	r5, r5, sl
 800be14:	10ad      	asrs	r5, r5, #2
 800be16:	6125      	str	r5, [r4, #16]
 800be18:	4658      	mov	r0, fp
 800be1a:	f000 fbd3 	bl	800c5c4 <__hi0bits>
 800be1e:	016d      	lsls	r5, r5, #5
 800be20:	f8d8 6000 	ldr.w	r6, [r8]
 800be24:	1a2d      	subs	r5, r5, r0
 800be26:	42b5      	cmp	r5, r6
 800be28:	dd54      	ble.n	800bed4 <__gethex+0x228>
 800be2a:	1bad      	subs	r5, r5, r6
 800be2c:	4629      	mov	r1, r5
 800be2e:	4620      	mov	r0, r4
 800be30:	f000 ff67 	bl	800cd02 <__any_on>
 800be34:	4681      	mov	r9, r0
 800be36:	b178      	cbz	r0, 800be58 <__gethex+0x1ac>
 800be38:	1e6b      	subs	r3, r5, #1
 800be3a:	1159      	asrs	r1, r3, #5
 800be3c:	f003 021f 	and.w	r2, r3, #31
 800be40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800be44:	f04f 0901 	mov.w	r9, #1
 800be48:	fa09 f202 	lsl.w	r2, r9, r2
 800be4c:	420a      	tst	r2, r1
 800be4e:	d003      	beq.n	800be58 <__gethex+0x1ac>
 800be50:	454b      	cmp	r3, r9
 800be52:	dc36      	bgt.n	800bec2 <__gethex+0x216>
 800be54:	f04f 0902 	mov.w	r9, #2
 800be58:	4629      	mov	r1, r5
 800be5a:	4620      	mov	r0, r4
 800be5c:	f7ff febe 	bl	800bbdc <rshift>
 800be60:	442f      	add	r7, r5
 800be62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be66:	42bb      	cmp	r3, r7
 800be68:	da42      	bge.n	800bef0 <__gethex+0x244>
 800be6a:	9801      	ldr	r0, [sp, #4]
 800be6c:	4621      	mov	r1, r4
 800be6e:	f000 faf7 	bl	800c460 <_Bfree>
 800be72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be74:	2300      	movs	r3, #0
 800be76:	6013      	str	r3, [r2, #0]
 800be78:	25a3      	movs	r5, #163	@ 0xa3
 800be7a:	e793      	b.n	800bda4 <__gethex+0xf8>
 800be7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800be80:	2a2e      	cmp	r2, #46	@ 0x2e
 800be82:	d012      	beq.n	800beaa <__gethex+0x1fe>
 800be84:	2b20      	cmp	r3, #32
 800be86:	d104      	bne.n	800be92 <__gethex+0x1e6>
 800be88:	f845 bb04 	str.w	fp, [r5], #4
 800be8c:	f04f 0b00 	mov.w	fp, #0
 800be90:	465b      	mov	r3, fp
 800be92:	7830      	ldrb	r0, [r6, #0]
 800be94:	9303      	str	r3, [sp, #12]
 800be96:	f7ff fef3 	bl	800bc80 <__hexdig_fun>
 800be9a:	9b03      	ldr	r3, [sp, #12]
 800be9c:	f000 000f 	and.w	r0, r0, #15
 800bea0:	4098      	lsls	r0, r3
 800bea2:	ea4b 0b00 	orr.w	fp, fp, r0
 800bea6:	3304      	adds	r3, #4
 800bea8:	e7ae      	b.n	800be08 <__gethex+0x15c>
 800beaa:	45b1      	cmp	r9, r6
 800beac:	d8ea      	bhi.n	800be84 <__gethex+0x1d8>
 800beae:	492b      	ldr	r1, [pc, #172]	@ (800bf5c <__gethex+0x2b0>)
 800beb0:	9303      	str	r3, [sp, #12]
 800beb2:	2201      	movs	r2, #1
 800beb4:	4630      	mov	r0, r6
 800beb6:	f7fe fed8 	bl	800ac6a <strncmp>
 800beba:	9b03      	ldr	r3, [sp, #12]
 800bebc:	2800      	cmp	r0, #0
 800bebe:	d1e1      	bne.n	800be84 <__gethex+0x1d8>
 800bec0:	e7a2      	b.n	800be08 <__gethex+0x15c>
 800bec2:	1ea9      	subs	r1, r5, #2
 800bec4:	4620      	mov	r0, r4
 800bec6:	f000 ff1c 	bl	800cd02 <__any_on>
 800beca:	2800      	cmp	r0, #0
 800becc:	d0c2      	beq.n	800be54 <__gethex+0x1a8>
 800bece:	f04f 0903 	mov.w	r9, #3
 800bed2:	e7c1      	b.n	800be58 <__gethex+0x1ac>
 800bed4:	da09      	bge.n	800beea <__gethex+0x23e>
 800bed6:	1b75      	subs	r5, r6, r5
 800bed8:	4621      	mov	r1, r4
 800beda:	9801      	ldr	r0, [sp, #4]
 800bedc:	462a      	mov	r2, r5
 800bede:	f000 fcd7 	bl	800c890 <__lshift>
 800bee2:	1b7f      	subs	r7, r7, r5
 800bee4:	4604      	mov	r4, r0
 800bee6:	f100 0a14 	add.w	sl, r0, #20
 800beea:	f04f 0900 	mov.w	r9, #0
 800beee:	e7b8      	b.n	800be62 <__gethex+0x1b6>
 800bef0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bef4:	42bd      	cmp	r5, r7
 800bef6:	dd6f      	ble.n	800bfd8 <__gethex+0x32c>
 800bef8:	1bed      	subs	r5, r5, r7
 800befa:	42ae      	cmp	r6, r5
 800befc:	dc34      	bgt.n	800bf68 <__gethex+0x2bc>
 800befe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	d022      	beq.n	800bf4c <__gethex+0x2a0>
 800bf06:	2b03      	cmp	r3, #3
 800bf08:	d024      	beq.n	800bf54 <__gethex+0x2a8>
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d115      	bne.n	800bf3a <__gethex+0x28e>
 800bf0e:	42ae      	cmp	r6, r5
 800bf10:	d113      	bne.n	800bf3a <__gethex+0x28e>
 800bf12:	2e01      	cmp	r6, #1
 800bf14:	d10b      	bne.n	800bf2e <__gethex+0x282>
 800bf16:	9a02      	ldr	r2, [sp, #8]
 800bf18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf1c:	6013      	str	r3, [r2, #0]
 800bf1e:	2301      	movs	r3, #1
 800bf20:	6123      	str	r3, [r4, #16]
 800bf22:	f8ca 3000 	str.w	r3, [sl]
 800bf26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf28:	2562      	movs	r5, #98	@ 0x62
 800bf2a:	601c      	str	r4, [r3, #0]
 800bf2c:	e73a      	b.n	800bda4 <__gethex+0xf8>
 800bf2e:	1e71      	subs	r1, r6, #1
 800bf30:	4620      	mov	r0, r4
 800bf32:	f000 fee6 	bl	800cd02 <__any_on>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	d1ed      	bne.n	800bf16 <__gethex+0x26a>
 800bf3a:	9801      	ldr	r0, [sp, #4]
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	f000 fa8f 	bl	800c460 <_Bfree>
 800bf42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf44:	2300      	movs	r3, #0
 800bf46:	6013      	str	r3, [r2, #0]
 800bf48:	2550      	movs	r5, #80	@ 0x50
 800bf4a:	e72b      	b.n	800bda4 <__gethex+0xf8>
 800bf4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1f3      	bne.n	800bf3a <__gethex+0x28e>
 800bf52:	e7e0      	b.n	800bf16 <__gethex+0x26a>
 800bf54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1dd      	bne.n	800bf16 <__gethex+0x26a>
 800bf5a:	e7ee      	b.n	800bf3a <__gethex+0x28e>
 800bf5c:	0800f4bc 	.word	0x0800f4bc
 800bf60:	0800f764 	.word	0x0800f764
 800bf64:	0800f775 	.word	0x0800f775
 800bf68:	1e6f      	subs	r7, r5, #1
 800bf6a:	f1b9 0f00 	cmp.w	r9, #0
 800bf6e:	d130      	bne.n	800bfd2 <__gethex+0x326>
 800bf70:	b127      	cbz	r7, 800bf7c <__gethex+0x2d0>
 800bf72:	4639      	mov	r1, r7
 800bf74:	4620      	mov	r0, r4
 800bf76:	f000 fec4 	bl	800cd02 <__any_on>
 800bf7a:	4681      	mov	r9, r0
 800bf7c:	117a      	asrs	r2, r7, #5
 800bf7e:	2301      	movs	r3, #1
 800bf80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bf84:	f007 071f 	and.w	r7, r7, #31
 800bf88:	40bb      	lsls	r3, r7
 800bf8a:	4213      	tst	r3, r2
 800bf8c:	4629      	mov	r1, r5
 800bf8e:	4620      	mov	r0, r4
 800bf90:	bf18      	it	ne
 800bf92:	f049 0902 	orrne.w	r9, r9, #2
 800bf96:	f7ff fe21 	bl	800bbdc <rshift>
 800bf9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bf9e:	1b76      	subs	r6, r6, r5
 800bfa0:	2502      	movs	r5, #2
 800bfa2:	f1b9 0f00 	cmp.w	r9, #0
 800bfa6:	d047      	beq.n	800c038 <__gethex+0x38c>
 800bfa8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d015      	beq.n	800bfdc <__gethex+0x330>
 800bfb0:	2b03      	cmp	r3, #3
 800bfb2:	d017      	beq.n	800bfe4 <__gethex+0x338>
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d109      	bne.n	800bfcc <__gethex+0x320>
 800bfb8:	f019 0f02 	tst.w	r9, #2
 800bfbc:	d006      	beq.n	800bfcc <__gethex+0x320>
 800bfbe:	f8da 3000 	ldr.w	r3, [sl]
 800bfc2:	ea49 0903 	orr.w	r9, r9, r3
 800bfc6:	f019 0f01 	tst.w	r9, #1
 800bfca:	d10e      	bne.n	800bfea <__gethex+0x33e>
 800bfcc:	f045 0510 	orr.w	r5, r5, #16
 800bfd0:	e032      	b.n	800c038 <__gethex+0x38c>
 800bfd2:	f04f 0901 	mov.w	r9, #1
 800bfd6:	e7d1      	b.n	800bf7c <__gethex+0x2d0>
 800bfd8:	2501      	movs	r5, #1
 800bfda:	e7e2      	b.n	800bfa2 <__gethex+0x2f6>
 800bfdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfde:	f1c3 0301 	rsb	r3, r3, #1
 800bfe2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bfe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d0f0      	beq.n	800bfcc <__gethex+0x320>
 800bfea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bfee:	f104 0314 	add.w	r3, r4, #20
 800bff2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bff6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bffa:	f04f 0c00 	mov.w	ip, #0
 800bffe:	4618      	mov	r0, r3
 800c000:	f853 2b04 	ldr.w	r2, [r3], #4
 800c004:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c008:	d01b      	beq.n	800c042 <__gethex+0x396>
 800c00a:	3201      	adds	r2, #1
 800c00c:	6002      	str	r2, [r0, #0]
 800c00e:	2d02      	cmp	r5, #2
 800c010:	f104 0314 	add.w	r3, r4, #20
 800c014:	d13c      	bne.n	800c090 <__gethex+0x3e4>
 800c016:	f8d8 2000 	ldr.w	r2, [r8]
 800c01a:	3a01      	subs	r2, #1
 800c01c:	42b2      	cmp	r2, r6
 800c01e:	d109      	bne.n	800c034 <__gethex+0x388>
 800c020:	1171      	asrs	r1, r6, #5
 800c022:	2201      	movs	r2, #1
 800c024:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c028:	f006 061f 	and.w	r6, r6, #31
 800c02c:	fa02 f606 	lsl.w	r6, r2, r6
 800c030:	421e      	tst	r6, r3
 800c032:	d13a      	bne.n	800c0aa <__gethex+0x3fe>
 800c034:	f045 0520 	orr.w	r5, r5, #32
 800c038:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c03a:	601c      	str	r4, [r3, #0]
 800c03c:	9b02      	ldr	r3, [sp, #8]
 800c03e:	601f      	str	r7, [r3, #0]
 800c040:	e6b0      	b.n	800bda4 <__gethex+0xf8>
 800c042:	4299      	cmp	r1, r3
 800c044:	f843 cc04 	str.w	ip, [r3, #-4]
 800c048:	d8d9      	bhi.n	800bffe <__gethex+0x352>
 800c04a:	68a3      	ldr	r3, [r4, #8]
 800c04c:	459b      	cmp	fp, r3
 800c04e:	db17      	blt.n	800c080 <__gethex+0x3d4>
 800c050:	6861      	ldr	r1, [r4, #4]
 800c052:	9801      	ldr	r0, [sp, #4]
 800c054:	3101      	adds	r1, #1
 800c056:	f000 f9c3 	bl	800c3e0 <_Balloc>
 800c05a:	4681      	mov	r9, r0
 800c05c:	b918      	cbnz	r0, 800c066 <__gethex+0x3ba>
 800c05e:	4b1a      	ldr	r3, [pc, #104]	@ (800c0c8 <__gethex+0x41c>)
 800c060:	4602      	mov	r2, r0
 800c062:	2184      	movs	r1, #132	@ 0x84
 800c064:	e6c5      	b.n	800bdf2 <__gethex+0x146>
 800c066:	6922      	ldr	r2, [r4, #16]
 800c068:	3202      	adds	r2, #2
 800c06a:	f104 010c 	add.w	r1, r4, #12
 800c06e:	0092      	lsls	r2, r2, #2
 800c070:	300c      	adds	r0, #12
 800c072:	f7fe fee0 	bl	800ae36 <memcpy>
 800c076:	4621      	mov	r1, r4
 800c078:	9801      	ldr	r0, [sp, #4]
 800c07a:	f000 f9f1 	bl	800c460 <_Bfree>
 800c07e:	464c      	mov	r4, r9
 800c080:	6923      	ldr	r3, [r4, #16]
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c088:	6122      	str	r2, [r4, #16]
 800c08a:	2201      	movs	r2, #1
 800c08c:	615a      	str	r2, [r3, #20]
 800c08e:	e7be      	b.n	800c00e <__gethex+0x362>
 800c090:	6922      	ldr	r2, [r4, #16]
 800c092:	455a      	cmp	r2, fp
 800c094:	dd0b      	ble.n	800c0ae <__gethex+0x402>
 800c096:	2101      	movs	r1, #1
 800c098:	4620      	mov	r0, r4
 800c09a:	f7ff fd9f 	bl	800bbdc <rshift>
 800c09e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c0a2:	3701      	adds	r7, #1
 800c0a4:	42bb      	cmp	r3, r7
 800c0a6:	f6ff aee0 	blt.w	800be6a <__gethex+0x1be>
 800c0aa:	2501      	movs	r5, #1
 800c0ac:	e7c2      	b.n	800c034 <__gethex+0x388>
 800c0ae:	f016 061f 	ands.w	r6, r6, #31
 800c0b2:	d0fa      	beq.n	800c0aa <__gethex+0x3fe>
 800c0b4:	4453      	add	r3, sl
 800c0b6:	f1c6 0620 	rsb	r6, r6, #32
 800c0ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c0be:	f000 fa81 	bl	800c5c4 <__hi0bits>
 800c0c2:	42b0      	cmp	r0, r6
 800c0c4:	dbe7      	blt.n	800c096 <__gethex+0x3ea>
 800c0c6:	e7f0      	b.n	800c0aa <__gethex+0x3fe>
 800c0c8:	0800f764 	.word	0x0800f764

0800c0cc <L_shift>:
 800c0cc:	f1c2 0208 	rsb	r2, r2, #8
 800c0d0:	0092      	lsls	r2, r2, #2
 800c0d2:	b570      	push	{r4, r5, r6, lr}
 800c0d4:	f1c2 0620 	rsb	r6, r2, #32
 800c0d8:	6843      	ldr	r3, [r0, #4]
 800c0da:	6804      	ldr	r4, [r0, #0]
 800c0dc:	fa03 f506 	lsl.w	r5, r3, r6
 800c0e0:	432c      	orrs	r4, r5
 800c0e2:	40d3      	lsrs	r3, r2
 800c0e4:	6004      	str	r4, [r0, #0]
 800c0e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c0ea:	4288      	cmp	r0, r1
 800c0ec:	d3f4      	bcc.n	800c0d8 <L_shift+0xc>
 800c0ee:	bd70      	pop	{r4, r5, r6, pc}

0800c0f0 <__match>:
 800c0f0:	b530      	push	{r4, r5, lr}
 800c0f2:	6803      	ldr	r3, [r0, #0]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0fa:	b914      	cbnz	r4, 800c102 <__match+0x12>
 800c0fc:	6003      	str	r3, [r0, #0]
 800c0fe:	2001      	movs	r0, #1
 800c100:	bd30      	pop	{r4, r5, pc}
 800c102:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c106:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c10a:	2d19      	cmp	r5, #25
 800c10c:	bf98      	it	ls
 800c10e:	3220      	addls	r2, #32
 800c110:	42a2      	cmp	r2, r4
 800c112:	d0f0      	beq.n	800c0f6 <__match+0x6>
 800c114:	2000      	movs	r0, #0
 800c116:	e7f3      	b.n	800c100 <__match+0x10>

0800c118 <__hexnan>:
 800c118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11c:	680b      	ldr	r3, [r1, #0]
 800c11e:	6801      	ldr	r1, [r0, #0]
 800c120:	115e      	asrs	r6, r3, #5
 800c122:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c126:	f013 031f 	ands.w	r3, r3, #31
 800c12a:	b087      	sub	sp, #28
 800c12c:	bf18      	it	ne
 800c12e:	3604      	addne	r6, #4
 800c130:	2500      	movs	r5, #0
 800c132:	1f37      	subs	r7, r6, #4
 800c134:	4682      	mov	sl, r0
 800c136:	4690      	mov	r8, r2
 800c138:	9301      	str	r3, [sp, #4]
 800c13a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c13e:	46b9      	mov	r9, r7
 800c140:	463c      	mov	r4, r7
 800c142:	9502      	str	r5, [sp, #8]
 800c144:	46ab      	mov	fp, r5
 800c146:	784a      	ldrb	r2, [r1, #1]
 800c148:	1c4b      	adds	r3, r1, #1
 800c14a:	9303      	str	r3, [sp, #12]
 800c14c:	b342      	cbz	r2, 800c1a0 <__hexnan+0x88>
 800c14e:	4610      	mov	r0, r2
 800c150:	9105      	str	r1, [sp, #20]
 800c152:	9204      	str	r2, [sp, #16]
 800c154:	f7ff fd94 	bl	800bc80 <__hexdig_fun>
 800c158:	2800      	cmp	r0, #0
 800c15a:	d151      	bne.n	800c200 <__hexnan+0xe8>
 800c15c:	9a04      	ldr	r2, [sp, #16]
 800c15e:	9905      	ldr	r1, [sp, #20]
 800c160:	2a20      	cmp	r2, #32
 800c162:	d818      	bhi.n	800c196 <__hexnan+0x7e>
 800c164:	9b02      	ldr	r3, [sp, #8]
 800c166:	459b      	cmp	fp, r3
 800c168:	dd13      	ble.n	800c192 <__hexnan+0x7a>
 800c16a:	454c      	cmp	r4, r9
 800c16c:	d206      	bcs.n	800c17c <__hexnan+0x64>
 800c16e:	2d07      	cmp	r5, #7
 800c170:	dc04      	bgt.n	800c17c <__hexnan+0x64>
 800c172:	462a      	mov	r2, r5
 800c174:	4649      	mov	r1, r9
 800c176:	4620      	mov	r0, r4
 800c178:	f7ff ffa8 	bl	800c0cc <L_shift>
 800c17c:	4544      	cmp	r4, r8
 800c17e:	d952      	bls.n	800c226 <__hexnan+0x10e>
 800c180:	2300      	movs	r3, #0
 800c182:	f1a4 0904 	sub.w	r9, r4, #4
 800c186:	f844 3c04 	str.w	r3, [r4, #-4]
 800c18a:	f8cd b008 	str.w	fp, [sp, #8]
 800c18e:	464c      	mov	r4, r9
 800c190:	461d      	mov	r5, r3
 800c192:	9903      	ldr	r1, [sp, #12]
 800c194:	e7d7      	b.n	800c146 <__hexnan+0x2e>
 800c196:	2a29      	cmp	r2, #41	@ 0x29
 800c198:	d157      	bne.n	800c24a <__hexnan+0x132>
 800c19a:	3102      	adds	r1, #2
 800c19c:	f8ca 1000 	str.w	r1, [sl]
 800c1a0:	f1bb 0f00 	cmp.w	fp, #0
 800c1a4:	d051      	beq.n	800c24a <__hexnan+0x132>
 800c1a6:	454c      	cmp	r4, r9
 800c1a8:	d206      	bcs.n	800c1b8 <__hexnan+0xa0>
 800c1aa:	2d07      	cmp	r5, #7
 800c1ac:	dc04      	bgt.n	800c1b8 <__hexnan+0xa0>
 800c1ae:	462a      	mov	r2, r5
 800c1b0:	4649      	mov	r1, r9
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f7ff ff8a 	bl	800c0cc <L_shift>
 800c1b8:	4544      	cmp	r4, r8
 800c1ba:	d936      	bls.n	800c22a <__hexnan+0x112>
 800c1bc:	f1a8 0204 	sub.w	r2, r8, #4
 800c1c0:	4623      	mov	r3, r4
 800c1c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c1c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c1ca:	429f      	cmp	r7, r3
 800c1cc:	d2f9      	bcs.n	800c1c2 <__hexnan+0xaa>
 800c1ce:	1b3b      	subs	r3, r7, r4
 800c1d0:	f023 0303 	bic.w	r3, r3, #3
 800c1d4:	3304      	adds	r3, #4
 800c1d6:	3401      	adds	r4, #1
 800c1d8:	3e03      	subs	r6, #3
 800c1da:	42b4      	cmp	r4, r6
 800c1dc:	bf88      	it	hi
 800c1de:	2304      	movhi	r3, #4
 800c1e0:	4443      	add	r3, r8
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f843 2b04 	str.w	r2, [r3], #4
 800c1e8:	429f      	cmp	r7, r3
 800c1ea:	d2fb      	bcs.n	800c1e4 <__hexnan+0xcc>
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	b91b      	cbnz	r3, 800c1f8 <__hexnan+0xe0>
 800c1f0:	4547      	cmp	r7, r8
 800c1f2:	d128      	bne.n	800c246 <__hexnan+0x12e>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	603b      	str	r3, [r7, #0]
 800c1f8:	2005      	movs	r0, #5
 800c1fa:	b007      	add	sp, #28
 800c1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c200:	3501      	adds	r5, #1
 800c202:	2d08      	cmp	r5, #8
 800c204:	f10b 0b01 	add.w	fp, fp, #1
 800c208:	dd06      	ble.n	800c218 <__hexnan+0x100>
 800c20a:	4544      	cmp	r4, r8
 800c20c:	d9c1      	bls.n	800c192 <__hexnan+0x7a>
 800c20e:	2300      	movs	r3, #0
 800c210:	f844 3c04 	str.w	r3, [r4, #-4]
 800c214:	2501      	movs	r5, #1
 800c216:	3c04      	subs	r4, #4
 800c218:	6822      	ldr	r2, [r4, #0]
 800c21a:	f000 000f 	and.w	r0, r0, #15
 800c21e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c222:	6020      	str	r0, [r4, #0]
 800c224:	e7b5      	b.n	800c192 <__hexnan+0x7a>
 800c226:	2508      	movs	r5, #8
 800c228:	e7b3      	b.n	800c192 <__hexnan+0x7a>
 800c22a:	9b01      	ldr	r3, [sp, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d0dd      	beq.n	800c1ec <__hexnan+0xd4>
 800c230:	f1c3 0320 	rsb	r3, r3, #32
 800c234:	f04f 32ff 	mov.w	r2, #4294967295
 800c238:	40da      	lsrs	r2, r3
 800c23a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c23e:	4013      	ands	r3, r2
 800c240:	f846 3c04 	str.w	r3, [r6, #-4]
 800c244:	e7d2      	b.n	800c1ec <__hexnan+0xd4>
 800c246:	3f04      	subs	r7, #4
 800c248:	e7d0      	b.n	800c1ec <__hexnan+0xd4>
 800c24a:	2004      	movs	r0, #4
 800c24c:	e7d5      	b.n	800c1fa <__hexnan+0xe2>
	...

0800c250 <malloc>:
 800c250:	4b02      	ldr	r3, [pc, #8]	@ (800c25c <malloc+0xc>)
 800c252:	4601      	mov	r1, r0
 800c254:	6818      	ldr	r0, [r3, #0]
 800c256:	f000 b825 	b.w	800c2a4 <_malloc_r>
 800c25a:	bf00      	nop
 800c25c:	20000250 	.word	0x20000250

0800c260 <sbrk_aligned>:
 800c260:	b570      	push	{r4, r5, r6, lr}
 800c262:	4e0f      	ldr	r6, [pc, #60]	@ (800c2a0 <sbrk_aligned+0x40>)
 800c264:	460c      	mov	r4, r1
 800c266:	6831      	ldr	r1, [r6, #0]
 800c268:	4605      	mov	r5, r0
 800c26a:	b911      	cbnz	r1, 800c272 <sbrk_aligned+0x12>
 800c26c:	f000 ffa6 	bl	800d1bc <_sbrk_r>
 800c270:	6030      	str	r0, [r6, #0]
 800c272:	4621      	mov	r1, r4
 800c274:	4628      	mov	r0, r5
 800c276:	f000 ffa1 	bl	800d1bc <_sbrk_r>
 800c27a:	1c43      	adds	r3, r0, #1
 800c27c:	d103      	bne.n	800c286 <sbrk_aligned+0x26>
 800c27e:	f04f 34ff 	mov.w	r4, #4294967295
 800c282:	4620      	mov	r0, r4
 800c284:	bd70      	pop	{r4, r5, r6, pc}
 800c286:	1cc4      	adds	r4, r0, #3
 800c288:	f024 0403 	bic.w	r4, r4, #3
 800c28c:	42a0      	cmp	r0, r4
 800c28e:	d0f8      	beq.n	800c282 <sbrk_aligned+0x22>
 800c290:	1a21      	subs	r1, r4, r0
 800c292:	4628      	mov	r0, r5
 800c294:	f000 ff92 	bl	800d1bc <_sbrk_r>
 800c298:	3001      	adds	r0, #1
 800c29a:	d1f2      	bne.n	800c282 <sbrk_aligned+0x22>
 800c29c:	e7ef      	b.n	800c27e <sbrk_aligned+0x1e>
 800c29e:	bf00      	nop
 800c2a0:	20000840 	.word	0x20000840

0800c2a4 <_malloc_r>:
 800c2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a8:	1ccd      	adds	r5, r1, #3
 800c2aa:	f025 0503 	bic.w	r5, r5, #3
 800c2ae:	3508      	adds	r5, #8
 800c2b0:	2d0c      	cmp	r5, #12
 800c2b2:	bf38      	it	cc
 800c2b4:	250c      	movcc	r5, #12
 800c2b6:	2d00      	cmp	r5, #0
 800c2b8:	4606      	mov	r6, r0
 800c2ba:	db01      	blt.n	800c2c0 <_malloc_r+0x1c>
 800c2bc:	42a9      	cmp	r1, r5
 800c2be:	d904      	bls.n	800c2ca <_malloc_r+0x26>
 800c2c0:	230c      	movs	r3, #12
 800c2c2:	6033      	str	r3, [r6, #0]
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3a0 <_malloc_r+0xfc>
 800c2ce:	f000 f87b 	bl	800c3c8 <__malloc_lock>
 800c2d2:	f8d8 3000 	ldr.w	r3, [r8]
 800c2d6:	461c      	mov	r4, r3
 800c2d8:	bb44      	cbnz	r4, 800c32c <_malloc_r+0x88>
 800c2da:	4629      	mov	r1, r5
 800c2dc:	4630      	mov	r0, r6
 800c2de:	f7ff ffbf 	bl	800c260 <sbrk_aligned>
 800c2e2:	1c43      	adds	r3, r0, #1
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	d158      	bne.n	800c39a <_malloc_r+0xf6>
 800c2e8:	f8d8 4000 	ldr.w	r4, [r8]
 800c2ec:	4627      	mov	r7, r4
 800c2ee:	2f00      	cmp	r7, #0
 800c2f0:	d143      	bne.n	800c37a <_malloc_r+0xd6>
 800c2f2:	2c00      	cmp	r4, #0
 800c2f4:	d04b      	beq.n	800c38e <_malloc_r+0xea>
 800c2f6:	6823      	ldr	r3, [r4, #0]
 800c2f8:	4639      	mov	r1, r7
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	eb04 0903 	add.w	r9, r4, r3
 800c300:	f000 ff5c 	bl	800d1bc <_sbrk_r>
 800c304:	4581      	cmp	r9, r0
 800c306:	d142      	bne.n	800c38e <_malloc_r+0xea>
 800c308:	6821      	ldr	r1, [r4, #0]
 800c30a:	1a6d      	subs	r5, r5, r1
 800c30c:	4629      	mov	r1, r5
 800c30e:	4630      	mov	r0, r6
 800c310:	f7ff ffa6 	bl	800c260 <sbrk_aligned>
 800c314:	3001      	adds	r0, #1
 800c316:	d03a      	beq.n	800c38e <_malloc_r+0xea>
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	442b      	add	r3, r5
 800c31c:	6023      	str	r3, [r4, #0]
 800c31e:	f8d8 3000 	ldr.w	r3, [r8]
 800c322:	685a      	ldr	r2, [r3, #4]
 800c324:	bb62      	cbnz	r2, 800c380 <_malloc_r+0xdc>
 800c326:	f8c8 7000 	str.w	r7, [r8]
 800c32a:	e00f      	b.n	800c34c <_malloc_r+0xa8>
 800c32c:	6822      	ldr	r2, [r4, #0]
 800c32e:	1b52      	subs	r2, r2, r5
 800c330:	d420      	bmi.n	800c374 <_malloc_r+0xd0>
 800c332:	2a0b      	cmp	r2, #11
 800c334:	d917      	bls.n	800c366 <_malloc_r+0xc2>
 800c336:	1961      	adds	r1, r4, r5
 800c338:	42a3      	cmp	r3, r4
 800c33a:	6025      	str	r5, [r4, #0]
 800c33c:	bf18      	it	ne
 800c33e:	6059      	strne	r1, [r3, #4]
 800c340:	6863      	ldr	r3, [r4, #4]
 800c342:	bf08      	it	eq
 800c344:	f8c8 1000 	streq.w	r1, [r8]
 800c348:	5162      	str	r2, [r4, r5]
 800c34a:	604b      	str	r3, [r1, #4]
 800c34c:	4630      	mov	r0, r6
 800c34e:	f000 f841 	bl	800c3d4 <__malloc_unlock>
 800c352:	f104 000b 	add.w	r0, r4, #11
 800c356:	1d23      	adds	r3, r4, #4
 800c358:	f020 0007 	bic.w	r0, r0, #7
 800c35c:	1ac2      	subs	r2, r0, r3
 800c35e:	bf1c      	itt	ne
 800c360:	1a1b      	subne	r3, r3, r0
 800c362:	50a3      	strne	r3, [r4, r2]
 800c364:	e7af      	b.n	800c2c6 <_malloc_r+0x22>
 800c366:	6862      	ldr	r2, [r4, #4]
 800c368:	42a3      	cmp	r3, r4
 800c36a:	bf0c      	ite	eq
 800c36c:	f8c8 2000 	streq.w	r2, [r8]
 800c370:	605a      	strne	r2, [r3, #4]
 800c372:	e7eb      	b.n	800c34c <_malloc_r+0xa8>
 800c374:	4623      	mov	r3, r4
 800c376:	6864      	ldr	r4, [r4, #4]
 800c378:	e7ae      	b.n	800c2d8 <_malloc_r+0x34>
 800c37a:	463c      	mov	r4, r7
 800c37c:	687f      	ldr	r7, [r7, #4]
 800c37e:	e7b6      	b.n	800c2ee <_malloc_r+0x4a>
 800c380:	461a      	mov	r2, r3
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	42a3      	cmp	r3, r4
 800c386:	d1fb      	bne.n	800c380 <_malloc_r+0xdc>
 800c388:	2300      	movs	r3, #0
 800c38a:	6053      	str	r3, [r2, #4]
 800c38c:	e7de      	b.n	800c34c <_malloc_r+0xa8>
 800c38e:	230c      	movs	r3, #12
 800c390:	6033      	str	r3, [r6, #0]
 800c392:	4630      	mov	r0, r6
 800c394:	f000 f81e 	bl	800c3d4 <__malloc_unlock>
 800c398:	e794      	b.n	800c2c4 <_malloc_r+0x20>
 800c39a:	6005      	str	r5, [r0, #0]
 800c39c:	e7d6      	b.n	800c34c <_malloc_r+0xa8>
 800c39e:	bf00      	nop
 800c3a0:	20000844 	.word	0x20000844

0800c3a4 <__ascii_mbtowc>:
 800c3a4:	b082      	sub	sp, #8
 800c3a6:	b901      	cbnz	r1, 800c3aa <__ascii_mbtowc+0x6>
 800c3a8:	a901      	add	r1, sp, #4
 800c3aa:	b142      	cbz	r2, 800c3be <__ascii_mbtowc+0x1a>
 800c3ac:	b14b      	cbz	r3, 800c3c2 <__ascii_mbtowc+0x1e>
 800c3ae:	7813      	ldrb	r3, [r2, #0]
 800c3b0:	600b      	str	r3, [r1, #0]
 800c3b2:	7812      	ldrb	r2, [r2, #0]
 800c3b4:	1e10      	subs	r0, r2, #0
 800c3b6:	bf18      	it	ne
 800c3b8:	2001      	movne	r0, #1
 800c3ba:	b002      	add	sp, #8
 800c3bc:	4770      	bx	lr
 800c3be:	4610      	mov	r0, r2
 800c3c0:	e7fb      	b.n	800c3ba <__ascii_mbtowc+0x16>
 800c3c2:	f06f 0001 	mvn.w	r0, #1
 800c3c6:	e7f8      	b.n	800c3ba <__ascii_mbtowc+0x16>

0800c3c8 <__malloc_lock>:
 800c3c8:	4801      	ldr	r0, [pc, #4]	@ (800c3d0 <__malloc_lock+0x8>)
 800c3ca:	f7fe bd32 	b.w	800ae32 <__retarget_lock_acquire_recursive>
 800c3ce:	bf00      	nop
 800c3d0:	2000083c 	.word	0x2000083c

0800c3d4 <__malloc_unlock>:
 800c3d4:	4801      	ldr	r0, [pc, #4]	@ (800c3dc <__malloc_unlock+0x8>)
 800c3d6:	f7fe bd2d 	b.w	800ae34 <__retarget_lock_release_recursive>
 800c3da:	bf00      	nop
 800c3dc:	2000083c 	.word	0x2000083c

0800c3e0 <_Balloc>:
 800c3e0:	b570      	push	{r4, r5, r6, lr}
 800c3e2:	69c6      	ldr	r6, [r0, #28]
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	460d      	mov	r5, r1
 800c3e8:	b976      	cbnz	r6, 800c408 <_Balloc+0x28>
 800c3ea:	2010      	movs	r0, #16
 800c3ec:	f7ff ff30 	bl	800c250 <malloc>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	61e0      	str	r0, [r4, #28]
 800c3f4:	b920      	cbnz	r0, 800c400 <_Balloc+0x20>
 800c3f6:	4b18      	ldr	r3, [pc, #96]	@ (800c458 <_Balloc+0x78>)
 800c3f8:	4818      	ldr	r0, [pc, #96]	@ (800c45c <_Balloc+0x7c>)
 800c3fa:	216b      	movs	r1, #107	@ 0x6b
 800c3fc:	f7fe fd3a 	bl	800ae74 <__assert_func>
 800c400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c404:	6006      	str	r6, [r0, #0]
 800c406:	60c6      	str	r6, [r0, #12]
 800c408:	69e6      	ldr	r6, [r4, #28]
 800c40a:	68f3      	ldr	r3, [r6, #12]
 800c40c:	b183      	cbz	r3, 800c430 <_Balloc+0x50>
 800c40e:	69e3      	ldr	r3, [r4, #28]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c416:	b9b8      	cbnz	r0, 800c448 <_Balloc+0x68>
 800c418:	2101      	movs	r1, #1
 800c41a:	fa01 f605 	lsl.w	r6, r1, r5
 800c41e:	1d72      	adds	r2, r6, #5
 800c420:	0092      	lsls	r2, r2, #2
 800c422:	4620      	mov	r0, r4
 800c424:	f000 fee1 	bl	800d1ea <_calloc_r>
 800c428:	b160      	cbz	r0, 800c444 <_Balloc+0x64>
 800c42a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c42e:	e00e      	b.n	800c44e <_Balloc+0x6e>
 800c430:	2221      	movs	r2, #33	@ 0x21
 800c432:	2104      	movs	r1, #4
 800c434:	4620      	mov	r0, r4
 800c436:	f000 fed8 	bl	800d1ea <_calloc_r>
 800c43a:	69e3      	ldr	r3, [r4, #28]
 800c43c:	60f0      	str	r0, [r6, #12]
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d1e4      	bne.n	800c40e <_Balloc+0x2e>
 800c444:	2000      	movs	r0, #0
 800c446:	bd70      	pop	{r4, r5, r6, pc}
 800c448:	6802      	ldr	r2, [r0, #0]
 800c44a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c44e:	2300      	movs	r3, #0
 800c450:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c454:	e7f7      	b.n	800c446 <_Balloc+0x66>
 800c456:	bf00      	nop
 800c458:	0800f64a 	.word	0x0800f64a
 800c45c:	0800f7d5 	.word	0x0800f7d5

0800c460 <_Bfree>:
 800c460:	b570      	push	{r4, r5, r6, lr}
 800c462:	69c6      	ldr	r6, [r0, #28]
 800c464:	4605      	mov	r5, r0
 800c466:	460c      	mov	r4, r1
 800c468:	b976      	cbnz	r6, 800c488 <_Bfree+0x28>
 800c46a:	2010      	movs	r0, #16
 800c46c:	f7ff fef0 	bl	800c250 <malloc>
 800c470:	4602      	mov	r2, r0
 800c472:	61e8      	str	r0, [r5, #28]
 800c474:	b920      	cbnz	r0, 800c480 <_Bfree+0x20>
 800c476:	4b09      	ldr	r3, [pc, #36]	@ (800c49c <_Bfree+0x3c>)
 800c478:	4809      	ldr	r0, [pc, #36]	@ (800c4a0 <_Bfree+0x40>)
 800c47a:	218f      	movs	r1, #143	@ 0x8f
 800c47c:	f7fe fcfa 	bl	800ae74 <__assert_func>
 800c480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c484:	6006      	str	r6, [r0, #0]
 800c486:	60c6      	str	r6, [r0, #12]
 800c488:	b13c      	cbz	r4, 800c49a <_Bfree+0x3a>
 800c48a:	69eb      	ldr	r3, [r5, #28]
 800c48c:	6862      	ldr	r2, [r4, #4]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c494:	6021      	str	r1, [r4, #0]
 800c496:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c49a:	bd70      	pop	{r4, r5, r6, pc}
 800c49c:	0800f64a 	.word	0x0800f64a
 800c4a0:	0800f7d5 	.word	0x0800f7d5

0800c4a4 <__multadd>:
 800c4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a8:	690d      	ldr	r5, [r1, #16]
 800c4aa:	4607      	mov	r7, r0
 800c4ac:	460c      	mov	r4, r1
 800c4ae:	461e      	mov	r6, r3
 800c4b0:	f101 0c14 	add.w	ip, r1, #20
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	f8dc 3000 	ldr.w	r3, [ip]
 800c4ba:	b299      	uxth	r1, r3
 800c4bc:	fb02 6101 	mla	r1, r2, r1, r6
 800c4c0:	0c1e      	lsrs	r6, r3, #16
 800c4c2:	0c0b      	lsrs	r3, r1, #16
 800c4c4:	fb02 3306 	mla	r3, r2, r6, r3
 800c4c8:	b289      	uxth	r1, r1
 800c4ca:	3001      	adds	r0, #1
 800c4cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4d0:	4285      	cmp	r5, r0
 800c4d2:	f84c 1b04 	str.w	r1, [ip], #4
 800c4d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4da:	dcec      	bgt.n	800c4b6 <__multadd+0x12>
 800c4dc:	b30e      	cbz	r6, 800c522 <__multadd+0x7e>
 800c4de:	68a3      	ldr	r3, [r4, #8]
 800c4e0:	42ab      	cmp	r3, r5
 800c4e2:	dc19      	bgt.n	800c518 <__multadd+0x74>
 800c4e4:	6861      	ldr	r1, [r4, #4]
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	3101      	adds	r1, #1
 800c4ea:	f7ff ff79 	bl	800c3e0 <_Balloc>
 800c4ee:	4680      	mov	r8, r0
 800c4f0:	b928      	cbnz	r0, 800c4fe <__multadd+0x5a>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	4b0c      	ldr	r3, [pc, #48]	@ (800c528 <__multadd+0x84>)
 800c4f6:	480d      	ldr	r0, [pc, #52]	@ (800c52c <__multadd+0x88>)
 800c4f8:	21ba      	movs	r1, #186	@ 0xba
 800c4fa:	f7fe fcbb 	bl	800ae74 <__assert_func>
 800c4fe:	6922      	ldr	r2, [r4, #16]
 800c500:	3202      	adds	r2, #2
 800c502:	f104 010c 	add.w	r1, r4, #12
 800c506:	0092      	lsls	r2, r2, #2
 800c508:	300c      	adds	r0, #12
 800c50a:	f7fe fc94 	bl	800ae36 <memcpy>
 800c50e:	4621      	mov	r1, r4
 800c510:	4638      	mov	r0, r7
 800c512:	f7ff ffa5 	bl	800c460 <_Bfree>
 800c516:	4644      	mov	r4, r8
 800c518:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c51c:	3501      	adds	r5, #1
 800c51e:	615e      	str	r6, [r3, #20]
 800c520:	6125      	str	r5, [r4, #16]
 800c522:	4620      	mov	r0, r4
 800c524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c528:	0800f764 	.word	0x0800f764
 800c52c:	0800f7d5 	.word	0x0800f7d5

0800c530 <__s2b>:
 800c530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c534:	460c      	mov	r4, r1
 800c536:	4615      	mov	r5, r2
 800c538:	461f      	mov	r7, r3
 800c53a:	2209      	movs	r2, #9
 800c53c:	3308      	adds	r3, #8
 800c53e:	4606      	mov	r6, r0
 800c540:	fb93 f3f2 	sdiv	r3, r3, r2
 800c544:	2100      	movs	r1, #0
 800c546:	2201      	movs	r2, #1
 800c548:	429a      	cmp	r2, r3
 800c54a:	db09      	blt.n	800c560 <__s2b+0x30>
 800c54c:	4630      	mov	r0, r6
 800c54e:	f7ff ff47 	bl	800c3e0 <_Balloc>
 800c552:	b940      	cbnz	r0, 800c566 <__s2b+0x36>
 800c554:	4602      	mov	r2, r0
 800c556:	4b19      	ldr	r3, [pc, #100]	@ (800c5bc <__s2b+0x8c>)
 800c558:	4819      	ldr	r0, [pc, #100]	@ (800c5c0 <__s2b+0x90>)
 800c55a:	21d3      	movs	r1, #211	@ 0xd3
 800c55c:	f7fe fc8a 	bl	800ae74 <__assert_func>
 800c560:	0052      	lsls	r2, r2, #1
 800c562:	3101      	adds	r1, #1
 800c564:	e7f0      	b.n	800c548 <__s2b+0x18>
 800c566:	9b08      	ldr	r3, [sp, #32]
 800c568:	6143      	str	r3, [r0, #20]
 800c56a:	2d09      	cmp	r5, #9
 800c56c:	f04f 0301 	mov.w	r3, #1
 800c570:	6103      	str	r3, [r0, #16]
 800c572:	dd16      	ble.n	800c5a2 <__s2b+0x72>
 800c574:	f104 0909 	add.w	r9, r4, #9
 800c578:	46c8      	mov	r8, r9
 800c57a:	442c      	add	r4, r5
 800c57c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c580:	4601      	mov	r1, r0
 800c582:	3b30      	subs	r3, #48	@ 0x30
 800c584:	220a      	movs	r2, #10
 800c586:	4630      	mov	r0, r6
 800c588:	f7ff ff8c 	bl	800c4a4 <__multadd>
 800c58c:	45a0      	cmp	r8, r4
 800c58e:	d1f5      	bne.n	800c57c <__s2b+0x4c>
 800c590:	f1a5 0408 	sub.w	r4, r5, #8
 800c594:	444c      	add	r4, r9
 800c596:	1b2d      	subs	r5, r5, r4
 800c598:	1963      	adds	r3, r4, r5
 800c59a:	42bb      	cmp	r3, r7
 800c59c:	db04      	blt.n	800c5a8 <__s2b+0x78>
 800c59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a2:	340a      	adds	r4, #10
 800c5a4:	2509      	movs	r5, #9
 800c5a6:	e7f6      	b.n	800c596 <__s2b+0x66>
 800c5a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c5ac:	4601      	mov	r1, r0
 800c5ae:	3b30      	subs	r3, #48	@ 0x30
 800c5b0:	220a      	movs	r2, #10
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	f7ff ff76 	bl	800c4a4 <__multadd>
 800c5b8:	e7ee      	b.n	800c598 <__s2b+0x68>
 800c5ba:	bf00      	nop
 800c5bc:	0800f764 	.word	0x0800f764
 800c5c0:	0800f7d5 	.word	0x0800f7d5

0800c5c4 <__hi0bits>:
 800c5c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	bf36      	itet	cc
 800c5cc:	0403      	lslcc	r3, r0, #16
 800c5ce:	2000      	movcs	r0, #0
 800c5d0:	2010      	movcc	r0, #16
 800c5d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c5d6:	bf3c      	itt	cc
 800c5d8:	021b      	lslcc	r3, r3, #8
 800c5da:	3008      	addcc	r0, #8
 800c5dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5e0:	bf3c      	itt	cc
 800c5e2:	011b      	lslcc	r3, r3, #4
 800c5e4:	3004      	addcc	r0, #4
 800c5e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5ea:	bf3c      	itt	cc
 800c5ec:	009b      	lslcc	r3, r3, #2
 800c5ee:	3002      	addcc	r0, #2
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	db05      	blt.n	800c600 <__hi0bits+0x3c>
 800c5f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c5f8:	f100 0001 	add.w	r0, r0, #1
 800c5fc:	bf08      	it	eq
 800c5fe:	2020      	moveq	r0, #32
 800c600:	4770      	bx	lr

0800c602 <__lo0bits>:
 800c602:	6803      	ldr	r3, [r0, #0]
 800c604:	4602      	mov	r2, r0
 800c606:	f013 0007 	ands.w	r0, r3, #7
 800c60a:	d00b      	beq.n	800c624 <__lo0bits+0x22>
 800c60c:	07d9      	lsls	r1, r3, #31
 800c60e:	d421      	bmi.n	800c654 <__lo0bits+0x52>
 800c610:	0798      	lsls	r0, r3, #30
 800c612:	bf49      	itett	mi
 800c614:	085b      	lsrmi	r3, r3, #1
 800c616:	089b      	lsrpl	r3, r3, #2
 800c618:	2001      	movmi	r0, #1
 800c61a:	6013      	strmi	r3, [r2, #0]
 800c61c:	bf5c      	itt	pl
 800c61e:	6013      	strpl	r3, [r2, #0]
 800c620:	2002      	movpl	r0, #2
 800c622:	4770      	bx	lr
 800c624:	b299      	uxth	r1, r3
 800c626:	b909      	cbnz	r1, 800c62c <__lo0bits+0x2a>
 800c628:	0c1b      	lsrs	r3, r3, #16
 800c62a:	2010      	movs	r0, #16
 800c62c:	b2d9      	uxtb	r1, r3
 800c62e:	b909      	cbnz	r1, 800c634 <__lo0bits+0x32>
 800c630:	3008      	adds	r0, #8
 800c632:	0a1b      	lsrs	r3, r3, #8
 800c634:	0719      	lsls	r1, r3, #28
 800c636:	bf04      	itt	eq
 800c638:	091b      	lsreq	r3, r3, #4
 800c63a:	3004      	addeq	r0, #4
 800c63c:	0799      	lsls	r1, r3, #30
 800c63e:	bf04      	itt	eq
 800c640:	089b      	lsreq	r3, r3, #2
 800c642:	3002      	addeq	r0, #2
 800c644:	07d9      	lsls	r1, r3, #31
 800c646:	d403      	bmi.n	800c650 <__lo0bits+0x4e>
 800c648:	085b      	lsrs	r3, r3, #1
 800c64a:	f100 0001 	add.w	r0, r0, #1
 800c64e:	d003      	beq.n	800c658 <__lo0bits+0x56>
 800c650:	6013      	str	r3, [r2, #0]
 800c652:	4770      	bx	lr
 800c654:	2000      	movs	r0, #0
 800c656:	4770      	bx	lr
 800c658:	2020      	movs	r0, #32
 800c65a:	4770      	bx	lr

0800c65c <__i2b>:
 800c65c:	b510      	push	{r4, lr}
 800c65e:	460c      	mov	r4, r1
 800c660:	2101      	movs	r1, #1
 800c662:	f7ff febd 	bl	800c3e0 <_Balloc>
 800c666:	4602      	mov	r2, r0
 800c668:	b928      	cbnz	r0, 800c676 <__i2b+0x1a>
 800c66a:	4b05      	ldr	r3, [pc, #20]	@ (800c680 <__i2b+0x24>)
 800c66c:	4805      	ldr	r0, [pc, #20]	@ (800c684 <__i2b+0x28>)
 800c66e:	f240 1145 	movw	r1, #325	@ 0x145
 800c672:	f7fe fbff 	bl	800ae74 <__assert_func>
 800c676:	2301      	movs	r3, #1
 800c678:	6144      	str	r4, [r0, #20]
 800c67a:	6103      	str	r3, [r0, #16]
 800c67c:	bd10      	pop	{r4, pc}
 800c67e:	bf00      	nop
 800c680:	0800f764 	.word	0x0800f764
 800c684:	0800f7d5 	.word	0x0800f7d5

0800c688 <__multiply>:
 800c688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68c:	4614      	mov	r4, r2
 800c68e:	690a      	ldr	r2, [r1, #16]
 800c690:	6923      	ldr	r3, [r4, #16]
 800c692:	429a      	cmp	r2, r3
 800c694:	bfa8      	it	ge
 800c696:	4623      	movge	r3, r4
 800c698:	460f      	mov	r7, r1
 800c69a:	bfa4      	itt	ge
 800c69c:	460c      	movge	r4, r1
 800c69e:	461f      	movge	r7, r3
 800c6a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c6a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c6a8:	68a3      	ldr	r3, [r4, #8]
 800c6aa:	6861      	ldr	r1, [r4, #4]
 800c6ac:	eb0a 0609 	add.w	r6, sl, r9
 800c6b0:	42b3      	cmp	r3, r6
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	bfb8      	it	lt
 800c6b6:	3101      	addlt	r1, #1
 800c6b8:	f7ff fe92 	bl	800c3e0 <_Balloc>
 800c6bc:	b930      	cbnz	r0, 800c6cc <__multiply+0x44>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	4b44      	ldr	r3, [pc, #272]	@ (800c7d4 <__multiply+0x14c>)
 800c6c2:	4845      	ldr	r0, [pc, #276]	@ (800c7d8 <__multiply+0x150>)
 800c6c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c6c8:	f7fe fbd4 	bl	800ae74 <__assert_func>
 800c6cc:	f100 0514 	add.w	r5, r0, #20
 800c6d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c6d4:	462b      	mov	r3, r5
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	4543      	cmp	r3, r8
 800c6da:	d321      	bcc.n	800c720 <__multiply+0x98>
 800c6dc:	f107 0114 	add.w	r1, r7, #20
 800c6e0:	f104 0214 	add.w	r2, r4, #20
 800c6e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c6e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c6ec:	9302      	str	r3, [sp, #8]
 800c6ee:	1b13      	subs	r3, r2, r4
 800c6f0:	3b15      	subs	r3, #21
 800c6f2:	f023 0303 	bic.w	r3, r3, #3
 800c6f6:	3304      	adds	r3, #4
 800c6f8:	f104 0715 	add.w	r7, r4, #21
 800c6fc:	42ba      	cmp	r2, r7
 800c6fe:	bf38      	it	cc
 800c700:	2304      	movcc	r3, #4
 800c702:	9301      	str	r3, [sp, #4]
 800c704:	9b02      	ldr	r3, [sp, #8]
 800c706:	9103      	str	r1, [sp, #12]
 800c708:	428b      	cmp	r3, r1
 800c70a:	d80c      	bhi.n	800c726 <__multiply+0x9e>
 800c70c:	2e00      	cmp	r6, #0
 800c70e:	dd03      	ble.n	800c718 <__multiply+0x90>
 800c710:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c714:	2b00      	cmp	r3, #0
 800c716:	d05b      	beq.n	800c7d0 <__multiply+0x148>
 800c718:	6106      	str	r6, [r0, #16]
 800c71a:	b005      	add	sp, #20
 800c71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c720:	f843 2b04 	str.w	r2, [r3], #4
 800c724:	e7d8      	b.n	800c6d8 <__multiply+0x50>
 800c726:	f8b1 a000 	ldrh.w	sl, [r1]
 800c72a:	f1ba 0f00 	cmp.w	sl, #0
 800c72e:	d024      	beq.n	800c77a <__multiply+0xf2>
 800c730:	f104 0e14 	add.w	lr, r4, #20
 800c734:	46a9      	mov	r9, r5
 800c736:	f04f 0c00 	mov.w	ip, #0
 800c73a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c73e:	f8d9 3000 	ldr.w	r3, [r9]
 800c742:	fa1f fb87 	uxth.w	fp, r7
 800c746:	b29b      	uxth	r3, r3
 800c748:	fb0a 330b 	mla	r3, sl, fp, r3
 800c74c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c750:	f8d9 7000 	ldr.w	r7, [r9]
 800c754:	4463      	add	r3, ip
 800c756:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c75a:	fb0a c70b 	mla	r7, sl, fp, ip
 800c75e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c762:	b29b      	uxth	r3, r3
 800c764:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c768:	4572      	cmp	r2, lr
 800c76a:	f849 3b04 	str.w	r3, [r9], #4
 800c76e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c772:	d8e2      	bhi.n	800c73a <__multiply+0xb2>
 800c774:	9b01      	ldr	r3, [sp, #4]
 800c776:	f845 c003 	str.w	ip, [r5, r3]
 800c77a:	9b03      	ldr	r3, [sp, #12]
 800c77c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c780:	3104      	adds	r1, #4
 800c782:	f1b9 0f00 	cmp.w	r9, #0
 800c786:	d021      	beq.n	800c7cc <__multiply+0x144>
 800c788:	682b      	ldr	r3, [r5, #0]
 800c78a:	f104 0c14 	add.w	ip, r4, #20
 800c78e:	46ae      	mov	lr, r5
 800c790:	f04f 0a00 	mov.w	sl, #0
 800c794:	f8bc b000 	ldrh.w	fp, [ip]
 800c798:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c79c:	fb09 770b 	mla	r7, r9, fp, r7
 800c7a0:	4457      	add	r7, sl
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c7a8:	f84e 3b04 	str.w	r3, [lr], #4
 800c7ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c7b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c7b4:	f8be 3000 	ldrh.w	r3, [lr]
 800c7b8:	fb09 330a 	mla	r3, r9, sl, r3
 800c7bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c7c0:	4562      	cmp	r2, ip
 800c7c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c7c6:	d8e5      	bhi.n	800c794 <__multiply+0x10c>
 800c7c8:	9f01      	ldr	r7, [sp, #4]
 800c7ca:	51eb      	str	r3, [r5, r7]
 800c7cc:	3504      	adds	r5, #4
 800c7ce:	e799      	b.n	800c704 <__multiply+0x7c>
 800c7d0:	3e01      	subs	r6, #1
 800c7d2:	e79b      	b.n	800c70c <__multiply+0x84>
 800c7d4:	0800f764 	.word	0x0800f764
 800c7d8:	0800f7d5 	.word	0x0800f7d5

0800c7dc <__pow5mult>:
 800c7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7e0:	4615      	mov	r5, r2
 800c7e2:	f012 0203 	ands.w	r2, r2, #3
 800c7e6:	4607      	mov	r7, r0
 800c7e8:	460e      	mov	r6, r1
 800c7ea:	d007      	beq.n	800c7fc <__pow5mult+0x20>
 800c7ec:	4c25      	ldr	r4, [pc, #148]	@ (800c884 <__pow5mult+0xa8>)
 800c7ee:	3a01      	subs	r2, #1
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7f6:	f7ff fe55 	bl	800c4a4 <__multadd>
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	10ad      	asrs	r5, r5, #2
 800c7fe:	d03d      	beq.n	800c87c <__pow5mult+0xa0>
 800c800:	69fc      	ldr	r4, [r7, #28]
 800c802:	b97c      	cbnz	r4, 800c824 <__pow5mult+0x48>
 800c804:	2010      	movs	r0, #16
 800c806:	f7ff fd23 	bl	800c250 <malloc>
 800c80a:	4602      	mov	r2, r0
 800c80c:	61f8      	str	r0, [r7, #28]
 800c80e:	b928      	cbnz	r0, 800c81c <__pow5mult+0x40>
 800c810:	4b1d      	ldr	r3, [pc, #116]	@ (800c888 <__pow5mult+0xac>)
 800c812:	481e      	ldr	r0, [pc, #120]	@ (800c88c <__pow5mult+0xb0>)
 800c814:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c818:	f7fe fb2c 	bl	800ae74 <__assert_func>
 800c81c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c820:	6004      	str	r4, [r0, #0]
 800c822:	60c4      	str	r4, [r0, #12]
 800c824:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c828:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c82c:	b94c      	cbnz	r4, 800c842 <__pow5mult+0x66>
 800c82e:	f240 2171 	movw	r1, #625	@ 0x271
 800c832:	4638      	mov	r0, r7
 800c834:	f7ff ff12 	bl	800c65c <__i2b>
 800c838:	2300      	movs	r3, #0
 800c83a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c83e:	4604      	mov	r4, r0
 800c840:	6003      	str	r3, [r0, #0]
 800c842:	f04f 0900 	mov.w	r9, #0
 800c846:	07eb      	lsls	r3, r5, #31
 800c848:	d50a      	bpl.n	800c860 <__pow5mult+0x84>
 800c84a:	4631      	mov	r1, r6
 800c84c:	4622      	mov	r2, r4
 800c84e:	4638      	mov	r0, r7
 800c850:	f7ff ff1a 	bl	800c688 <__multiply>
 800c854:	4631      	mov	r1, r6
 800c856:	4680      	mov	r8, r0
 800c858:	4638      	mov	r0, r7
 800c85a:	f7ff fe01 	bl	800c460 <_Bfree>
 800c85e:	4646      	mov	r6, r8
 800c860:	106d      	asrs	r5, r5, #1
 800c862:	d00b      	beq.n	800c87c <__pow5mult+0xa0>
 800c864:	6820      	ldr	r0, [r4, #0]
 800c866:	b938      	cbnz	r0, 800c878 <__pow5mult+0x9c>
 800c868:	4622      	mov	r2, r4
 800c86a:	4621      	mov	r1, r4
 800c86c:	4638      	mov	r0, r7
 800c86e:	f7ff ff0b 	bl	800c688 <__multiply>
 800c872:	6020      	str	r0, [r4, #0]
 800c874:	f8c0 9000 	str.w	r9, [r0]
 800c878:	4604      	mov	r4, r0
 800c87a:	e7e4      	b.n	800c846 <__pow5mult+0x6a>
 800c87c:	4630      	mov	r0, r6
 800c87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c882:	bf00      	nop
 800c884:	0800f830 	.word	0x0800f830
 800c888:	0800f64a 	.word	0x0800f64a
 800c88c:	0800f7d5 	.word	0x0800f7d5

0800c890 <__lshift>:
 800c890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c894:	460c      	mov	r4, r1
 800c896:	6849      	ldr	r1, [r1, #4]
 800c898:	6923      	ldr	r3, [r4, #16]
 800c89a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c89e:	68a3      	ldr	r3, [r4, #8]
 800c8a0:	4607      	mov	r7, r0
 800c8a2:	4691      	mov	r9, r2
 800c8a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8a8:	f108 0601 	add.w	r6, r8, #1
 800c8ac:	42b3      	cmp	r3, r6
 800c8ae:	db0b      	blt.n	800c8c8 <__lshift+0x38>
 800c8b0:	4638      	mov	r0, r7
 800c8b2:	f7ff fd95 	bl	800c3e0 <_Balloc>
 800c8b6:	4605      	mov	r5, r0
 800c8b8:	b948      	cbnz	r0, 800c8ce <__lshift+0x3e>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	4b28      	ldr	r3, [pc, #160]	@ (800c960 <__lshift+0xd0>)
 800c8be:	4829      	ldr	r0, [pc, #164]	@ (800c964 <__lshift+0xd4>)
 800c8c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c8c4:	f7fe fad6 	bl	800ae74 <__assert_func>
 800c8c8:	3101      	adds	r1, #1
 800c8ca:	005b      	lsls	r3, r3, #1
 800c8cc:	e7ee      	b.n	800c8ac <__lshift+0x1c>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	f100 0114 	add.w	r1, r0, #20
 800c8d4:	f100 0210 	add.w	r2, r0, #16
 800c8d8:	4618      	mov	r0, r3
 800c8da:	4553      	cmp	r3, sl
 800c8dc:	db33      	blt.n	800c946 <__lshift+0xb6>
 800c8de:	6920      	ldr	r0, [r4, #16]
 800c8e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8e4:	f104 0314 	add.w	r3, r4, #20
 800c8e8:	f019 091f 	ands.w	r9, r9, #31
 800c8ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c8f4:	d02b      	beq.n	800c94e <__lshift+0xbe>
 800c8f6:	f1c9 0e20 	rsb	lr, r9, #32
 800c8fa:	468a      	mov	sl, r1
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	6818      	ldr	r0, [r3, #0]
 800c900:	fa00 f009 	lsl.w	r0, r0, r9
 800c904:	4310      	orrs	r0, r2
 800c906:	f84a 0b04 	str.w	r0, [sl], #4
 800c90a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c90e:	459c      	cmp	ip, r3
 800c910:	fa22 f20e 	lsr.w	r2, r2, lr
 800c914:	d8f3      	bhi.n	800c8fe <__lshift+0x6e>
 800c916:	ebac 0304 	sub.w	r3, ip, r4
 800c91a:	3b15      	subs	r3, #21
 800c91c:	f023 0303 	bic.w	r3, r3, #3
 800c920:	3304      	adds	r3, #4
 800c922:	f104 0015 	add.w	r0, r4, #21
 800c926:	4584      	cmp	ip, r0
 800c928:	bf38      	it	cc
 800c92a:	2304      	movcc	r3, #4
 800c92c:	50ca      	str	r2, [r1, r3]
 800c92e:	b10a      	cbz	r2, 800c934 <__lshift+0xa4>
 800c930:	f108 0602 	add.w	r6, r8, #2
 800c934:	3e01      	subs	r6, #1
 800c936:	4638      	mov	r0, r7
 800c938:	612e      	str	r6, [r5, #16]
 800c93a:	4621      	mov	r1, r4
 800c93c:	f7ff fd90 	bl	800c460 <_Bfree>
 800c940:	4628      	mov	r0, r5
 800c942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c946:	f842 0f04 	str.w	r0, [r2, #4]!
 800c94a:	3301      	adds	r3, #1
 800c94c:	e7c5      	b.n	800c8da <__lshift+0x4a>
 800c94e:	3904      	subs	r1, #4
 800c950:	f853 2b04 	ldr.w	r2, [r3], #4
 800c954:	f841 2f04 	str.w	r2, [r1, #4]!
 800c958:	459c      	cmp	ip, r3
 800c95a:	d8f9      	bhi.n	800c950 <__lshift+0xc0>
 800c95c:	e7ea      	b.n	800c934 <__lshift+0xa4>
 800c95e:	bf00      	nop
 800c960:	0800f764 	.word	0x0800f764
 800c964:	0800f7d5 	.word	0x0800f7d5

0800c968 <__mcmp>:
 800c968:	690a      	ldr	r2, [r1, #16]
 800c96a:	4603      	mov	r3, r0
 800c96c:	6900      	ldr	r0, [r0, #16]
 800c96e:	1a80      	subs	r0, r0, r2
 800c970:	b530      	push	{r4, r5, lr}
 800c972:	d10e      	bne.n	800c992 <__mcmp+0x2a>
 800c974:	3314      	adds	r3, #20
 800c976:	3114      	adds	r1, #20
 800c978:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c97c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c980:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c984:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c988:	4295      	cmp	r5, r2
 800c98a:	d003      	beq.n	800c994 <__mcmp+0x2c>
 800c98c:	d205      	bcs.n	800c99a <__mcmp+0x32>
 800c98e:	f04f 30ff 	mov.w	r0, #4294967295
 800c992:	bd30      	pop	{r4, r5, pc}
 800c994:	42a3      	cmp	r3, r4
 800c996:	d3f3      	bcc.n	800c980 <__mcmp+0x18>
 800c998:	e7fb      	b.n	800c992 <__mcmp+0x2a>
 800c99a:	2001      	movs	r0, #1
 800c99c:	e7f9      	b.n	800c992 <__mcmp+0x2a>
	...

0800c9a0 <__mdiff>:
 800c9a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a4:	4689      	mov	r9, r1
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	4611      	mov	r1, r2
 800c9aa:	4648      	mov	r0, r9
 800c9ac:	4614      	mov	r4, r2
 800c9ae:	f7ff ffdb 	bl	800c968 <__mcmp>
 800c9b2:	1e05      	subs	r5, r0, #0
 800c9b4:	d112      	bne.n	800c9dc <__mdiff+0x3c>
 800c9b6:	4629      	mov	r1, r5
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	f7ff fd11 	bl	800c3e0 <_Balloc>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	b928      	cbnz	r0, 800c9ce <__mdiff+0x2e>
 800c9c2:	4b3f      	ldr	r3, [pc, #252]	@ (800cac0 <__mdiff+0x120>)
 800c9c4:	f240 2137 	movw	r1, #567	@ 0x237
 800c9c8:	483e      	ldr	r0, [pc, #248]	@ (800cac4 <__mdiff+0x124>)
 800c9ca:	f7fe fa53 	bl	800ae74 <__assert_func>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	b003      	add	sp, #12
 800c9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9dc:	bfbc      	itt	lt
 800c9de:	464b      	movlt	r3, r9
 800c9e0:	46a1      	movlt	r9, r4
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c9e8:	bfba      	itte	lt
 800c9ea:	461c      	movlt	r4, r3
 800c9ec:	2501      	movlt	r5, #1
 800c9ee:	2500      	movge	r5, #0
 800c9f0:	f7ff fcf6 	bl	800c3e0 <_Balloc>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	b918      	cbnz	r0, 800ca00 <__mdiff+0x60>
 800c9f8:	4b31      	ldr	r3, [pc, #196]	@ (800cac0 <__mdiff+0x120>)
 800c9fa:	f240 2145 	movw	r1, #581	@ 0x245
 800c9fe:	e7e3      	b.n	800c9c8 <__mdiff+0x28>
 800ca00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ca04:	6926      	ldr	r6, [r4, #16]
 800ca06:	60c5      	str	r5, [r0, #12]
 800ca08:	f109 0310 	add.w	r3, r9, #16
 800ca0c:	f109 0514 	add.w	r5, r9, #20
 800ca10:	f104 0e14 	add.w	lr, r4, #20
 800ca14:	f100 0b14 	add.w	fp, r0, #20
 800ca18:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ca1c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ca20:	9301      	str	r3, [sp, #4]
 800ca22:	46d9      	mov	r9, fp
 800ca24:	f04f 0c00 	mov.w	ip, #0
 800ca28:	9b01      	ldr	r3, [sp, #4]
 800ca2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ca2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ca32:	9301      	str	r3, [sp, #4]
 800ca34:	fa1f f38a 	uxth.w	r3, sl
 800ca38:	4619      	mov	r1, r3
 800ca3a:	b283      	uxth	r3, r0
 800ca3c:	1acb      	subs	r3, r1, r3
 800ca3e:	0c00      	lsrs	r0, r0, #16
 800ca40:	4463      	add	r3, ip
 800ca42:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ca46:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ca50:	4576      	cmp	r6, lr
 800ca52:	f849 3b04 	str.w	r3, [r9], #4
 800ca56:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca5a:	d8e5      	bhi.n	800ca28 <__mdiff+0x88>
 800ca5c:	1b33      	subs	r3, r6, r4
 800ca5e:	3b15      	subs	r3, #21
 800ca60:	f023 0303 	bic.w	r3, r3, #3
 800ca64:	3415      	adds	r4, #21
 800ca66:	3304      	adds	r3, #4
 800ca68:	42a6      	cmp	r6, r4
 800ca6a:	bf38      	it	cc
 800ca6c:	2304      	movcc	r3, #4
 800ca6e:	441d      	add	r5, r3
 800ca70:	445b      	add	r3, fp
 800ca72:	461e      	mov	r6, r3
 800ca74:	462c      	mov	r4, r5
 800ca76:	4544      	cmp	r4, r8
 800ca78:	d30e      	bcc.n	800ca98 <__mdiff+0xf8>
 800ca7a:	f108 0103 	add.w	r1, r8, #3
 800ca7e:	1b49      	subs	r1, r1, r5
 800ca80:	f021 0103 	bic.w	r1, r1, #3
 800ca84:	3d03      	subs	r5, #3
 800ca86:	45a8      	cmp	r8, r5
 800ca88:	bf38      	it	cc
 800ca8a:	2100      	movcc	r1, #0
 800ca8c:	440b      	add	r3, r1
 800ca8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca92:	b191      	cbz	r1, 800caba <__mdiff+0x11a>
 800ca94:	6117      	str	r7, [r2, #16]
 800ca96:	e79d      	b.n	800c9d4 <__mdiff+0x34>
 800ca98:	f854 1b04 	ldr.w	r1, [r4], #4
 800ca9c:	46e6      	mov	lr, ip
 800ca9e:	0c08      	lsrs	r0, r1, #16
 800caa0:	fa1c fc81 	uxtah	ip, ip, r1
 800caa4:	4471      	add	r1, lr
 800caa6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800caaa:	b289      	uxth	r1, r1
 800caac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cab0:	f846 1b04 	str.w	r1, [r6], #4
 800cab4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cab8:	e7dd      	b.n	800ca76 <__mdiff+0xd6>
 800caba:	3f01      	subs	r7, #1
 800cabc:	e7e7      	b.n	800ca8e <__mdiff+0xee>
 800cabe:	bf00      	nop
 800cac0:	0800f764 	.word	0x0800f764
 800cac4:	0800f7d5 	.word	0x0800f7d5

0800cac8 <__ulp>:
 800cac8:	b082      	sub	sp, #8
 800caca:	ed8d 0b00 	vstr	d0, [sp]
 800cace:	9a01      	ldr	r2, [sp, #4]
 800cad0:	4b0f      	ldr	r3, [pc, #60]	@ (800cb10 <__ulp+0x48>)
 800cad2:	4013      	ands	r3, r2
 800cad4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cad8:	2b00      	cmp	r3, #0
 800cada:	dc08      	bgt.n	800caee <__ulp+0x26>
 800cadc:	425b      	negs	r3, r3
 800cade:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cae2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cae6:	da04      	bge.n	800caf2 <__ulp+0x2a>
 800cae8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800caec:	4113      	asrs	r3, r2
 800caee:	2200      	movs	r2, #0
 800caf0:	e008      	b.n	800cb04 <__ulp+0x3c>
 800caf2:	f1a2 0314 	sub.w	r3, r2, #20
 800caf6:	2b1e      	cmp	r3, #30
 800caf8:	bfda      	itte	le
 800cafa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cafe:	40da      	lsrle	r2, r3
 800cb00:	2201      	movgt	r2, #1
 800cb02:	2300      	movs	r3, #0
 800cb04:	4619      	mov	r1, r3
 800cb06:	4610      	mov	r0, r2
 800cb08:	ec41 0b10 	vmov	d0, r0, r1
 800cb0c:	b002      	add	sp, #8
 800cb0e:	4770      	bx	lr
 800cb10:	7ff00000 	.word	0x7ff00000

0800cb14 <__b2d>:
 800cb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb18:	6906      	ldr	r6, [r0, #16]
 800cb1a:	f100 0814 	add.w	r8, r0, #20
 800cb1e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cb22:	1f37      	subs	r7, r6, #4
 800cb24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cb28:	4610      	mov	r0, r2
 800cb2a:	f7ff fd4b 	bl	800c5c4 <__hi0bits>
 800cb2e:	f1c0 0320 	rsb	r3, r0, #32
 800cb32:	280a      	cmp	r0, #10
 800cb34:	600b      	str	r3, [r1, #0]
 800cb36:	491b      	ldr	r1, [pc, #108]	@ (800cba4 <__b2d+0x90>)
 800cb38:	dc15      	bgt.n	800cb66 <__b2d+0x52>
 800cb3a:	f1c0 0c0b 	rsb	ip, r0, #11
 800cb3e:	fa22 f30c 	lsr.w	r3, r2, ip
 800cb42:	45b8      	cmp	r8, r7
 800cb44:	ea43 0501 	orr.w	r5, r3, r1
 800cb48:	bf34      	ite	cc
 800cb4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb4e:	2300      	movcs	r3, #0
 800cb50:	3015      	adds	r0, #21
 800cb52:	fa02 f000 	lsl.w	r0, r2, r0
 800cb56:	fa23 f30c 	lsr.w	r3, r3, ip
 800cb5a:	4303      	orrs	r3, r0
 800cb5c:	461c      	mov	r4, r3
 800cb5e:	ec45 4b10 	vmov	d0, r4, r5
 800cb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb66:	45b8      	cmp	r8, r7
 800cb68:	bf3a      	itte	cc
 800cb6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb6e:	f1a6 0708 	subcc.w	r7, r6, #8
 800cb72:	2300      	movcs	r3, #0
 800cb74:	380b      	subs	r0, #11
 800cb76:	d012      	beq.n	800cb9e <__b2d+0x8a>
 800cb78:	f1c0 0120 	rsb	r1, r0, #32
 800cb7c:	fa23 f401 	lsr.w	r4, r3, r1
 800cb80:	4082      	lsls	r2, r0
 800cb82:	4322      	orrs	r2, r4
 800cb84:	4547      	cmp	r7, r8
 800cb86:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cb8a:	bf8c      	ite	hi
 800cb8c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cb90:	2200      	movls	r2, #0
 800cb92:	4083      	lsls	r3, r0
 800cb94:	40ca      	lsrs	r2, r1
 800cb96:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	e7de      	b.n	800cb5c <__b2d+0x48>
 800cb9e:	ea42 0501 	orr.w	r5, r2, r1
 800cba2:	e7db      	b.n	800cb5c <__b2d+0x48>
 800cba4:	3ff00000 	.word	0x3ff00000

0800cba8 <__d2b>:
 800cba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cbac:	460f      	mov	r7, r1
 800cbae:	2101      	movs	r1, #1
 800cbb0:	ec59 8b10 	vmov	r8, r9, d0
 800cbb4:	4616      	mov	r6, r2
 800cbb6:	f7ff fc13 	bl	800c3e0 <_Balloc>
 800cbba:	4604      	mov	r4, r0
 800cbbc:	b930      	cbnz	r0, 800cbcc <__d2b+0x24>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	4b23      	ldr	r3, [pc, #140]	@ (800cc50 <__d2b+0xa8>)
 800cbc2:	4824      	ldr	r0, [pc, #144]	@ (800cc54 <__d2b+0xac>)
 800cbc4:	f240 310f 	movw	r1, #783	@ 0x30f
 800cbc8:	f7fe f954 	bl	800ae74 <__assert_func>
 800cbcc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cbd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbd4:	b10d      	cbz	r5, 800cbda <__d2b+0x32>
 800cbd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbda:	9301      	str	r3, [sp, #4]
 800cbdc:	f1b8 0300 	subs.w	r3, r8, #0
 800cbe0:	d023      	beq.n	800cc2a <__d2b+0x82>
 800cbe2:	4668      	mov	r0, sp
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	f7ff fd0c 	bl	800c602 <__lo0bits>
 800cbea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cbee:	b1d0      	cbz	r0, 800cc26 <__d2b+0x7e>
 800cbf0:	f1c0 0320 	rsb	r3, r0, #32
 800cbf4:	fa02 f303 	lsl.w	r3, r2, r3
 800cbf8:	430b      	orrs	r3, r1
 800cbfa:	40c2      	lsrs	r2, r0
 800cbfc:	6163      	str	r3, [r4, #20]
 800cbfe:	9201      	str	r2, [sp, #4]
 800cc00:	9b01      	ldr	r3, [sp, #4]
 800cc02:	61a3      	str	r3, [r4, #24]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	bf0c      	ite	eq
 800cc08:	2201      	moveq	r2, #1
 800cc0a:	2202      	movne	r2, #2
 800cc0c:	6122      	str	r2, [r4, #16]
 800cc0e:	b1a5      	cbz	r5, 800cc3a <__d2b+0x92>
 800cc10:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cc14:	4405      	add	r5, r0
 800cc16:	603d      	str	r5, [r7, #0]
 800cc18:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cc1c:	6030      	str	r0, [r6, #0]
 800cc1e:	4620      	mov	r0, r4
 800cc20:	b003      	add	sp, #12
 800cc22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc26:	6161      	str	r1, [r4, #20]
 800cc28:	e7ea      	b.n	800cc00 <__d2b+0x58>
 800cc2a:	a801      	add	r0, sp, #4
 800cc2c:	f7ff fce9 	bl	800c602 <__lo0bits>
 800cc30:	9b01      	ldr	r3, [sp, #4]
 800cc32:	6163      	str	r3, [r4, #20]
 800cc34:	3020      	adds	r0, #32
 800cc36:	2201      	movs	r2, #1
 800cc38:	e7e8      	b.n	800cc0c <__d2b+0x64>
 800cc3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc3e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cc42:	6038      	str	r0, [r7, #0]
 800cc44:	6918      	ldr	r0, [r3, #16]
 800cc46:	f7ff fcbd 	bl	800c5c4 <__hi0bits>
 800cc4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc4e:	e7e5      	b.n	800cc1c <__d2b+0x74>
 800cc50:	0800f764 	.word	0x0800f764
 800cc54:	0800f7d5 	.word	0x0800f7d5

0800cc58 <__ratio>:
 800cc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5c:	b085      	sub	sp, #20
 800cc5e:	e9cd 1000 	strd	r1, r0, [sp]
 800cc62:	a902      	add	r1, sp, #8
 800cc64:	f7ff ff56 	bl	800cb14 <__b2d>
 800cc68:	9800      	ldr	r0, [sp, #0]
 800cc6a:	a903      	add	r1, sp, #12
 800cc6c:	ec55 4b10 	vmov	r4, r5, d0
 800cc70:	f7ff ff50 	bl	800cb14 <__b2d>
 800cc74:	9b01      	ldr	r3, [sp, #4]
 800cc76:	6919      	ldr	r1, [r3, #16]
 800cc78:	9b00      	ldr	r3, [sp, #0]
 800cc7a:	691b      	ldr	r3, [r3, #16]
 800cc7c:	1ac9      	subs	r1, r1, r3
 800cc7e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cc82:	1a9b      	subs	r3, r3, r2
 800cc84:	ec5b ab10 	vmov	sl, fp, d0
 800cc88:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	bfce      	itee	gt
 800cc90:	462a      	movgt	r2, r5
 800cc92:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cc96:	465a      	movle	r2, fp
 800cc98:	462f      	mov	r7, r5
 800cc9a:	46d9      	mov	r9, fp
 800cc9c:	bfcc      	ite	gt
 800cc9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cca2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cca6:	464b      	mov	r3, r9
 800cca8:	4652      	mov	r2, sl
 800ccaa:	4620      	mov	r0, r4
 800ccac:	4639      	mov	r1, r7
 800ccae:	f7f3 fdcd 	bl	800084c <__aeabi_ddiv>
 800ccb2:	ec41 0b10 	vmov	d0, r0, r1
 800ccb6:	b005      	add	sp, #20
 800ccb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ccbc <__copybits>:
 800ccbc:	3901      	subs	r1, #1
 800ccbe:	b570      	push	{r4, r5, r6, lr}
 800ccc0:	1149      	asrs	r1, r1, #5
 800ccc2:	6914      	ldr	r4, [r2, #16]
 800ccc4:	3101      	adds	r1, #1
 800ccc6:	f102 0314 	add.w	r3, r2, #20
 800ccca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ccce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ccd2:	1f05      	subs	r5, r0, #4
 800ccd4:	42a3      	cmp	r3, r4
 800ccd6:	d30c      	bcc.n	800ccf2 <__copybits+0x36>
 800ccd8:	1aa3      	subs	r3, r4, r2
 800ccda:	3b11      	subs	r3, #17
 800ccdc:	f023 0303 	bic.w	r3, r3, #3
 800cce0:	3211      	adds	r2, #17
 800cce2:	42a2      	cmp	r2, r4
 800cce4:	bf88      	it	hi
 800cce6:	2300      	movhi	r3, #0
 800cce8:	4418      	add	r0, r3
 800ccea:	2300      	movs	r3, #0
 800ccec:	4288      	cmp	r0, r1
 800ccee:	d305      	bcc.n	800ccfc <__copybits+0x40>
 800ccf0:	bd70      	pop	{r4, r5, r6, pc}
 800ccf2:	f853 6b04 	ldr.w	r6, [r3], #4
 800ccf6:	f845 6f04 	str.w	r6, [r5, #4]!
 800ccfa:	e7eb      	b.n	800ccd4 <__copybits+0x18>
 800ccfc:	f840 3b04 	str.w	r3, [r0], #4
 800cd00:	e7f4      	b.n	800ccec <__copybits+0x30>

0800cd02 <__any_on>:
 800cd02:	f100 0214 	add.w	r2, r0, #20
 800cd06:	6900      	ldr	r0, [r0, #16]
 800cd08:	114b      	asrs	r3, r1, #5
 800cd0a:	4298      	cmp	r0, r3
 800cd0c:	b510      	push	{r4, lr}
 800cd0e:	db11      	blt.n	800cd34 <__any_on+0x32>
 800cd10:	dd0a      	ble.n	800cd28 <__any_on+0x26>
 800cd12:	f011 011f 	ands.w	r1, r1, #31
 800cd16:	d007      	beq.n	800cd28 <__any_on+0x26>
 800cd18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cd1c:	fa24 f001 	lsr.w	r0, r4, r1
 800cd20:	fa00 f101 	lsl.w	r1, r0, r1
 800cd24:	428c      	cmp	r4, r1
 800cd26:	d10b      	bne.n	800cd40 <__any_on+0x3e>
 800cd28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d803      	bhi.n	800cd38 <__any_on+0x36>
 800cd30:	2000      	movs	r0, #0
 800cd32:	bd10      	pop	{r4, pc}
 800cd34:	4603      	mov	r3, r0
 800cd36:	e7f7      	b.n	800cd28 <__any_on+0x26>
 800cd38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd3c:	2900      	cmp	r1, #0
 800cd3e:	d0f5      	beq.n	800cd2c <__any_on+0x2a>
 800cd40:	2001      	movs	r0, #1
 800cd42:	e7f6      	b.n	800cd32 <__any_on+0x30>

0800cd44 <__ascii_wctomb>:
 800cd44:	4603      	mov	r3, r0
 800cd46:	4608      	mov	r0, r1
 800cd48:	b141      	cbz	r1, 800cd5c <__ascii_wctomb+0x18>
 800cd4a:	2aff      	cmp	r2, #255	@ 0xff
 800cd4c:	d904      	bls.n	800cd58 <__ascii_wctomb+0x14>
 800cd4e:	228a      	movs	r2, #138	@ 0x8a
 800cd50:	601a      	str	r2, [r3, #0]
 800cd52:	f04f 30ff 	mov.w	r0, #4294967295
 800cd56:	4770      	bx	lr
 800cd58:	700a      	strb	r2, [r1, #0]
 800cd5a:	2001      	movs	r0, #1
 800cd5c:	4770      	bx	lr

0800cd5e <__ssputs_r>:
 800cd5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd62:	688e      	ldr	r6, [r1, #8]
 800cd64:	461f      	mov	r7, r3
 800cd66:	42be      	cmp	r6, r7
 800cd68:	680b      	ldr	r3, [r1, #0]
 800cd6a:	4682      	mov	sl, r0
 800cd6c:	460c      	mov	r4, r1
 800cd6e:	4690      	mov	r8, r2
 800cd70:	d82d      	bhi.n	800cdce <__ssputs_r+0x70>
 800cd72:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd76:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cd7a:	d026      	beq.n	800cdca <__ssputs_r+0x6c>
 800cd7c:	6965      	ldr	r5, [r4, #20]
 800cd7e:	6909      	ldr	r1, [r1, #16]
 800cd80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd84:	eba3 0901 	sub.w	r9, r3, r1
 800cd88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd8c:	1c7b      	adds	r3, r7, #1
 800cd8e:	444b      	add	r3, r9
 800cd90:	106d      	asrs	r5, r5, #1
 800cd92:	429d      	cmp	r5, r3
 800cd94:	bf38      	it	cc
 800cd96:	461d      	movcc	r5, r3
 800cd98:	0553      	lsls	r3, r2, #21
 800cd9a:	d527      	bpl.n	800cdec <__ssputs_r+0x8e>
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	f7ff fa81 	bl	800c2a4 <_malloc_r>
 800cda2:	4606      	mov	r6, r0
 800cda4:	b360      	cbz	r0, 800ce00 <__ssputs_r+0xa2>
 800cda6:	6921      	ldr	r1, [r4, #16]
 800cda8:	464a      	mov	r2, r9
 800cdaa:	f7fe f844 	bl	800ae36 <memcpy>
 800cdae:	89a3      	ldrh	r3, [r4, #12]
 800cdb0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cdb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdb8:	81a3      	strh	r3, [r4, #12]
 800cdba:	6126      	str	r6, [r4, #16]
 800cdbc:	6165      	str	r5, [r4, #20]
 800cdbe:	444e      	add	r6, r9
 800cdc0:	eba5 0509 	sub.w	r5, r5, r9
 800cdc4:	6026      	str	r6, [r4, #0]
 800cdc6:	60a5      	str	r5, [r4, #8]
 800cdc8:	463e      	mov	r6, r7
 800cdca:	42be      	cmp	r6, r7
 800cdcc:	d900      	bls.n	800cdd0 <__ssputs_r+0x72>
 800cdce:	463e      	mov	r6, r7
 800cdd0:	6820      	ldr	r0, [r4, #0]
 800cdd2:	4632      	mov	r2, r6
 800cdd4:	4641      	mov	r1, r8
 800cdd6:	f000 f9d7 	bl	800d188 <memmove>
 800cdda:	68a3      	ldr	r3, [r4, #8]
 800cddc:	1b9b      	subs	r3, r3, r6
 800cdde:	60a3      	str	r3, [r4, #8]
 800cde0:	6823      	ldr	r3, [r4, #0]
 800cde2:	4433      	add	r3, r6
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	2000      	movs	r0, #0
 800cde8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdec:	462a      	mov	r2, r5
 800cdee:	f000 fa10 	bl	800d212 <_realloc_r>
 800cdf2:	4606      	mov	r6, r0
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	d1e0      	bne.n	800cdba <__ssputs_r+0x5c>
 800cdf8:	6921      	ldr	r1, [r4, #16]
 800cdfa:	4650      	mov	r0, sl
 800cdfc:	f7fe fea4 	bl	800bb48 <_free_r>
 800ce00:	230c      	movs	r3, #12
 800ce02:	f8ca 3000 	str.w	r3, [sl]
 800ce06:	89a3      	ldrh	r3, [r4, #12]
 800ce08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce0c:	81a3      	strh	r3, [r4, #12]
 800ce0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce12:	e7e9      	b.n	800cde8 <__ssputs_r+0x8a>

0800ce14 <_svfiprintf_r>:
 800ce14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce18:	4698      	mov	r8, r3
 800ce1a:	898b      	ldrh	r3, [r1, #12]
 800ce1c:	061b      	lsls	r3, r3, #24
 800ce1e:	b09d      	sub	sp, #116	@ 0x74
 800ce20:	4607      	mov	r7, r0
 800ce22:	460d      	mov	r5, r1
 800ce24:	4614      	mov	r4, r2
 800ce26:	d510      	bpl.n	800ce4a <_svfiprintf_r+0x36>
 800ce28:	690b      	ldr	r3, [r1, #16]
 800ce2a:	b973      	cbnz	r3, 800ce4a <_svfiprintf_r+0x36>
 800ce2c:	2140      	movs	r1, #64	@ 0x40
 800ce2e:	f7ff fa39 	bl	800c2a4 <_malloc_r>
 800ce32:	6028      	str	r0, [r5, #0]
 800ce34:	6128      	str	r0, [r5, #16]
 800ce36:	b930      	cbnz	r0, 800ce46 <_svfiprintf_r+0x32>
 800ce38:	230c      	movs	r3, #12
 800ce3a:	603b      	str	r3, [r7, #0]
 800ce3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce40:	b01d      	add	sp, #116	@ 0x74
 800ce42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce46:	2340      	movs	r3, #64	@ 0x40
 800ce48:	616b      	str	r3, [r5, #20]
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce4e:	2320      	movs	r3, #32
 800ce50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce54:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce58:	2330      	movs	r3, #48	@ 0x30
 800ce5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cff8 <_svfiprintf_r+0x1e4>
 800ce5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce62:	f04f 0901 	mov.w	r9, #1
 800ce66:	4623      	mov	r3, r4
 800ce68:	469a      	mov	sl, r3
 800ce6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce6e:	b10a      	cbz	r2, 800ce74 <_svfiprintf_r+0x60>
 800ce70:	2a25      	cmp	r2, #37	@ 0x25
 800ce72:	d1f9      	bne.n	800ce68 <_svfiprintf_r+0x54>
 800ce74:	ebba 0b04 	subs.w	fp, sl, r4
 800ce78:	d00b      	beq.n	800ce92 <_svfiprintf_r+0x7e>
 800ce7a:	465b      	mov	r3, fp
 800ce7c:	4622      	mov	r2, r4
 800ce7e:	4629      	mov	r1, r5
 800ce80:	4638      	mov	r0, r7
 800ce82:	f7ff ff6c 	bl	800cd5e <__ssputs_r>
 800ce86:	3001      	adds	r0, #1
 800ce88:	f000 80a7 	beq.w	800cfda <_svfiprintf_r+0x1c6>
 800ce8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce8e:	445a      	add	r2, fp
 800ce90:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce92:	f89a 3000 	ldrb.w	r3, [sl]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f000 809f 	beq.w	800cfda <_svfiprintf_r+0x1c6>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cea6:	f10a 0a01 	add.w	sl, sl, #1
 800ceaa:	9304      	str	r3, [sp, #16]
 800ceac:	9307      	str	r3, [sp, #28]
 800ceae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ceb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800ceb4:	4654      	mov	r4, sl
 800ceb6:	2205      	movs	r2, #5
 800ceb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cebc:	484e      	ldr	r0, [pc, #312]	@ (800cff8 <_svfiprintf_r+0x1e4>)
 800cebe:	f7f3 f987 	bl	80001d0 <memchr>
 800cec2:	9a04      	ldr	r2, [sp, #16]
 800cec4:	b9d8      	cbnz	r0, 800cefe <_svfiprintf_r+0xea>
 800cec6:	06d0      	lsls	r0, r2, #27
 800cec8:	bf44      	itt	mi
 800ceca:	2320      	movmi	r3, #32
 800cecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ced0:	0711      	lsls	r1, r2, #28
 800ced2:	bf44      	itt	mi
 800ced4:	232b      	movmi	r3, #43	@ 0x2b
 800ced6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ceda:	f89a 3000 	ldrb.w	r3, [sl]
 800cede:	2b2a      	cmp	r3, #42	@ 0x2a
 800cee0:	d015      	beq.n	800cf0e <_svfiprintf_r+0xfa>
 800cee2:	9a07      	ldr	r2, [sp, #28]
 800cee4:	4654      	mov	r4, sl
 800cee6:	2000      	movs	r0, #0
 800cee8:	f04f 0c0a 	mov.w	ip, #10
 800ceec:	4621      	mov	r1, r4
 800ceee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cef2:	3b30      	subs	r3, #48	@ 0x30
 800cef4:	2b09      	cmp	r3, #9
 800cef6:	d94b      	bls.n	800cf90 <_svfiprintf_r+0x17c>
 800cef8:	b1b0      	cbz	r0, 800cf28 <_svfiprintf_r+0x114>
 800cefa:	9207      	str	r2, [sp, #28]
 800cefc:	e014      	b.n	800cf28 <_svfiprintf_r+0x114>
 800cefe:	eba0 0308 	sub.w	r3, r0, r8
 800cf02:	fa09 f303 	lsl.w	r3, r9, r3
 800cf06:	4313      	orrs	r3, r2
 800cf08:	9304      	str	r3, [sp, #16]
 800cf0a:	46a2      	mov	sl, r4
 800cf0c:	e7d2      	b.n	800ceb4 <_svfiprintf_r+0xa0>
 800cf0e:	9b03      	ldr	r3, [sp, #12]
 800cf10:	1d19      	adds	r1, r3, #4
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	9103      	str	r1, [sp, #12]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	bfbb      	ittet	lt
 800cf1a:	425b      	neglt	r3, r3
 800cf1c:	f042 0202 	orrlt.w	r2, r2, #2
 800cf20:	9307      	strge	r3, [sp, #28]
 800cf22:	9307      	strlt	r3, [sp, #28]
 800cf24:	bfb8      	it	lt
 800cf26:	9204      	strlt	r2, [sp, #16]
 800cf28:	7823      	ldrb	r3, [r4, #0]
 800cf2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf2c:	d10a      	bne.n	800cf44 <_svfiprintf_r+0x130>
 800cf2e:	7863      	ldrb	r3, [r4, #1]
 800cf30:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf32:	d132      	bne.n	800cf9a <_svfiprintf_r+0x186>
 800cf34:	9b03      	ldr	r3, [sp, #12]
 800cf36:	1d1a      	adds	r2, r3, #4
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	9203      	str	r2, [sp, #12]
 800cf3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf40:	3402      	adds	r4, #2
 800cf42:	9305      	str	r3, [sp, #20]
 800cf44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d008 <_svfiprintf_r+0x1f4>
 800cf48:	7821      	ldrb	r1, [r4, #0]
 800cf4a:	2203      	movs	r2, #3
 800cf4c:	4650      	mov	r0, sl
 800cf4e:	f7f3 f93f 	bl	80001d0 <memchr>
 800cf52:	b138      	cbz	r0, 800cf64 <_svfiprintf_r+0x150>
 800cf54:	9b04      	ldr	r3, [sp, #16]
 800cf56:	eba0 000a 	sub.w	r0, r0, sl
 800cf5a:	2240      	movs	r2, #64	@ 0x40
 800cf5c:	4082      	lsls	r2, r0
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	3401      	adds	r4, #1
 800cf62:	9304      	str	r3, [sp, #16]
 800cf64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf68:	4824      	ldr	r0, [pc, #144]	@ (800cffc <_svfiprintf_r+0x1e8>)
 800cf6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf6e:	2206      	movs	r2, #6
 800cf70:	f7f3 f92e 	bl	80001d0 <memchr>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d036      	beq.n	800cfe6 <_svfiprintf_r+0x1d2>
 800cf78:	4b21      	ldr	r3, [pc, #132]	@ (800d000 <_svfiprintf_r+0x1ec>)
 800cf7a:	bb1b      	cbnz	r3, 800cfc4 <_svfiprintf_r+0x1b0>
 800cf7c:	9b03      	ldr	r3, [sp, #12]
 800cf7e:	3307      	adds	r3, #7
 800cf80:	f023 0307 	bic.w	r3, r3, #7
 800cf84:	3308      	adds	r3, #8
 800cf86:	9303      	str	r3, [sp, #12]
 800cf88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf8a:	4433      	add	r3, r6
 800cf8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf8e:	e76a      	b.n	800ce66 <_svfiprintf_r+0x52>
 800cf90:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf94:	460c      	mov	r4, r1
 800cf96:	2001      	movs	r0, #1
 800cf98:	e7a8      	b.n	800ceec <_svfiprintf_r+0xd8>
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	3401      	adds	r4, #1
 800cf9e:	9305      	str	r3, [sp, #20]
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	f04f 0c0a 	mov.w	ip, #10
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfac:	3a30      	subs	r2, #48	@ 0x30
 800cfae:	2a09      	cmp	r2, #9
 800cfb0:	d903      	bls.n	800cfba <_svfiprintf_r+0x1a6>
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d0c6      	beq.n	800cf44 <_svfiprintf_r+0x130>
 800cfb6:	9105      	str	r1, [sp, #20]
 800cfb8:	e7c4      	b.n	800cf44 <_svfiprintf_r+0x130>
 800cfba:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	e7f0      	b.n	800cfa6 <_svfiprintf_r+0x192>
 800cfc4:	ab03      	add	r3, sp, #12
 800cfc6:	9300      	str	r3, [sp, #0]
 800cfc8:	462a      	mov	r2, r5
 800cfca:	4b0e      	ldr	r3, [pc, #56]	@ (800d004 <_svfiprintf_r+0x1f0>)
 800cfcc:	a904      	add	r1, sp, #16
 800cfce:	4638      	mov	r0, r7
 800cfd0:	f7fc ff52 	bl	8009e78 <_printf_float>
 800cfd4:	1c42      	adds	r2, r0, #1
 800cfd6:	4606      	mov	r6, r0
 800cfd8:	d1d6      	bne.n	800cf88 <_svfiprintf_r+0x174>
 800cfda:	89ab      	ldrh	r3, [r5, #12]
 800cfdc:	065b      	lsls	r3, r3, #25
 800cfde:	f53f af2d 	bmi.w	800ce3c <_svfiprintf_r+0x28>
 800cfe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfe4:	e72c      	b.n	800ce40 <_svfiprintf_r+0x2c>
 800cfe6:	ab03      	add	r3, sp, #12
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	462a      	mov	r2, r5
 800cfec:	4b05      	ldr	r3, [pc, #20]	@ (800d004 <_svfiprintf_r+0x1f0>)
 800cfee:	a904      	add	r1, sp, #16
 800cff0:	4638      	mov	r0, r7
 800cff2:	f7fd f9d9 	bl	800a3a8 <_printf_i>
 800cff6:	e7ed      	b.n	800cfd4 <_svfiprintf_r+0x1c0>
 800cff8:	0800f930 	.word	0x0800f930
 800cffc:	0800f93a 	.word	0x0800f93a
 800d000:	08009e79 	.word	0x08009e79
 800d004:	0800cd5f 	.word	0x0800cd5f
 800d008:	0800f936 	.word	0x0800f936

0800d00c <__sflush_r>:
 800d00c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d014:	0716      	lsls	r6, r2, #28
 800d016:	4605      	mov	r5, r0
 800d018:	460c      	mov	r4, r1
 800d01a:	d454      	bmi.n	800d0c6 <__sflush_r+0xba>
 800d01c:	684b      	ldr	r3, [r1, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	dc02      	bgt.n	800d028 <__sflush_r+0x1c>
 800d022:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d024:	2b00      	cmp	r3, #0
 800d026:	dd48      	ble.n	800d0ba <__sflush_r+0xae>
 800d028:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d02a:	2e00      	cmp	r6, #0
 800d02c:	d045      	beq.n	800d0ba <__sflush_r+0xae>
 800d02e:	2300      	movs	r3, #0
 800d030:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d034:	682f      	ldr	r7, [r5, #0]
 800d036:	6a21      	ldr	r1, [r4, #32]
 800d038:	602b      	str	r3, [r5, #0]
 800d03a:	d030      	beq.n	800d09e <__sflush_r+0x92>
 800d03c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d03e:	89a3      	ldrh	r3, [r4, #12]
 800d040:	0759      	lsls	r1, r3, #29
 800d042:	d505      	bpl.n	800d050 <__sflush_r+0x44>
 800d044:	6863      	ldr	r3, [r4, #4]
 800d046:	1ad2      	subs	r2, r2, r3
 800d048:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d04a:	b10b      	cbz	r3, 800d050 <__sflush_r+0x44>
 800d04c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d04e:	1ad2      	subs	r2, r2, r3
 800d050:	2300      	movs	r3, #0
 800d052:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d054:	6a21      	ldr	r1, [r4, #32]
 800d056:	4628      	mov	r0, r5
 800d058:	47b0      	blx	r6
 800d05a:	1c43      	adds	r3, r0, #1
 800d05c:	89a3      	ldrh	r3, [r4, #12]
 800d05e:	d106      	bne.n	800d06e <__sflush_r+0x62>
 800d060:	6829      	ldr	r1, [r5, #0]
 800d062:	291d      	cmp	r1, #29
 800d064:	d82b      	bhi.n	800d0be <__sflush_r+0xb2>
 800d066:	4a2a      	ldr	r2, [pc, #168]	@ (800d110 <__sflush_r+0x104>)
 800d068:	410a      	asrs	r2, r1
 800d06a:	07d6      	lsls	r6, r2, #31
 800d06c:	d427      	bmi.n	800d0be <__sflush_r+0xb2>
 800d06e:	2200      	movs	r2, #0
 800d070:	6062      	str	r2, [r4, #4]
 800d072:	04d9      	lsls	r1, r3, #19
 800d074:	6922      	ldr	r2, [r4, #16]
 800d076:	6022      	str	r2, [r4, #0]
 800d078:	d504      	bpl.n	800d084 <__sflush_r+0x78>
 800d07a:	1c42      	adds	r2, r0, #1
 800d07c:	d101      	bne.n	800d082 <__sflush_r+0x76>
 800d07e:	682b      	ldr	r3, [r5, #0]
 800d080:	b903      	cbnz	r3, 800d084 <__sflush_r+0x78>
 800d082:	6560      	str	r0, [r4, #84]	@ 0x54
 800d084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d086:	602f      	str	r7, [r5, #0]
 800d088:	b1b9      	cbz	r1, 800d0ba <__sflush_r+0xae>
 800d08a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d08e:	4299      	cmp	r1, r3
 800d090:	d002      	beq.n	800d098 <__sflush_r+0x8c>
 800d092:	4628      	mov	r0, r5
 800d094:	f7fe fd58 	bl	800bb48 <_free_r>
 800d098:	2300      	movs	r3, #0
 800d09a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d09c:	e00d      	b.n	800d0ba <__sflush_r+0xae>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	47b0      	blx	r6
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	1c50      	adds	r0, r2, #1
 800d0a8:	d1c9      	bne.n	800d03e <__sflush_r+0x32>
 800d0aa:	682b      	ldr	r3, [r5, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d0c6      	beq.n	800d03e <__sflush_r+0x32>
 800d0b0:	2b1d      	cmp	r3, #29
 800d0b2:	d001      	beq.n	800d0b8 <__sflush_r+0xac>
 800d0b4:	2b16      	cmp	r3, #22
 800d0b6:	d11e      	bne.n	800d0f6 <__sflush_r+0xea>
 800d0b8:	602f      	str	r7, [r5, #0]
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	e022      	b.n	800d104 <__sflush_r+0xf8>
 800d0be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0c2:	b21b      	sxth	r3, r3
 800d0c4:	e01b      	b.n	800d0fe <__sflush_r+0xf2>
 800d0c6:	690f      	ldr	r7, [r1, #16]
 800d0c8:	2f00      	cmp	r7, #0
 800d0ca:	d0f6      	beq.n	800d0ba <__sflush_r+0xae>
 800d0cc:	0793      	lsls	r3, r2, #30
 800d0ce:	680e      	ldr	r6, [r1, #0]
 800d0d0:	bf08      	it	eq
 800d0d2:	694b      	ldreq	r3, [r1, #20]
 800d0d4:	600f      	str	r7, [r1, #0]
 800d0d6:	bf18      	it	ne
 800d0d8:	2300      	movne	r3, #0
 800d0da:	eba6 0807 	sub.w	r8, r6, r7
 800d0de:	608b      	str	r3, [r1, #8]
 800d0e0:	f1b8 0f00 	cmp.w	r8, #0
 800d0e4:	dde9      	ble.n	800d0ba <__sflush_r+0xae>
 800d0e6:	6a21      	ldr	r1, [r4, #32]
 800d0e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d0ea:	4643      	mov	r3, r8
 800d0ec:	463a      	mov	r2, r7
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	47b0      	blx	r6
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	dc08      	bgt.n	800d108 <__sflush_r+0xfc>
 800d0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0fe:	81a3      	strh	r3, [r4, #12]
 800d100:	f04f 30ff 	mov.w	r0, #4294967295
 800d104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d108:	4407      	add	r7, r0
 800d10a:	eba8 0800 	sub.w	r8, r8, r0
 800d10e:	e7e7      	b.n	800d0e0 <__sflush_r+0xd4>
 800d110:	dfbffffe 	.word	0xdfbffffe

0800d114 <_fflush_r>:
 800d114:	b538      	push	{r3, r4, r5, lr}
 800d116:	690b      	ldr	r3, [r1, #16]
 800d118:	4605      	mov	r5, r0
 800d11a:	460c      	mov	r4, r1
 800d11c:	b913      	cbnz	r3, 800d124 <_fflush_r+0x10>
 800d11e:	2500      	movs	r5, #0
 800d120:	4628      	mov	r0, r5
 800d122:	bd38      	pop	{r3, r4, r5, pc}
 800d124:	b118      	cbz	r0, 800d12e <_fflush_r+0x1a>
 800d126:	6a03      	ldr	r3, [r0, #32]
 800d128:	b90b      	cbnz	r3, 800d12e <_fflush_r+0x1a>
 800d12a:	f7fd fcfd 	bl	800ab28 <__sinit>
 800d12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d0f3      	beq.n	800d11e <_fflush_r+0xa>
 800d136:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d138:	07d0      	lsls	r0, r2, #31
 800d13a:	d404      	bmi.n	800d146 <_fflush_r+0x32>
 800d13c:	0599      	lsls	r1, r3, #22
 800d13e:	d402      	bmi.n	800d146 <_fflush_r+0x32>
 800d140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d142:	f7fd fe76 	bl	800ae32 <__retarget_lock_acquire_recursive>
 800d146:	4628      	mov	r0, r5
 800d148:	4621      	mov	r1, r4
 800d14a:	f7ff ff5f 	bl	800d00c <__sflush_r>
 800d14e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d150:	07da      	lsls	r2, r3, #31
 800d152:	4605      	mov	r5, r0
 800d154:	d4e4      	bmi.n	800d120 <_fflush_r+0xc>
 800d156:	89a3      	ldrh	r3, [r4, #12]
 800d158:	059b      	lsls	r3, r3, #22
 800d15a:	d4e1      	bmi.n	800d120 <_fflush_r+0xc>
 800d15c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d15e:	f7fd fe69 	bl	800ae34 <__retarget_lock_release_recursive>
 800d162:	e7dd      	b.n	800d120 <_fflush_r+0xc>

0800d164 <fiprintf>:
 800d164:	b40e      	push	{r1, r2, r3}
 800d166:	b503      	push	{r0, r1, lr}
 800d168:	4601      	mov	r1, r0
 800d16a:	ab03      	add	r3, sp, #12
 800d16c:	4805      	ldr	r0, [pc, #20]	@ (800d184 <fiprintf+0x20>)
 800d16e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d172:	6800      	ldr	r0, [r0, #0]
 800d174:	9301      	str	r3, [sp, #4]
 800d176:	f000 f8a3 	bl	800d2c0 <_vfiprintf_r>
 800d17a:	b002      	add	sp, #8
 800d17c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d180:	b003      	add	sp, #12
 800d182:	4770      	bx	lr
 800d184:	20000250 	.word	0x20000250

0800d188 <memmove>:
 800d188:	4288      	cmp	r0, r1
 800d18a:	b510      	push	{r4, lr}
 800d18c:	eb01 0402 	add.w	r4, r1, r2
 800d190:	d902      	bls.n	800d198 <memmove+0x10>
 800d192:	4284      	cmp	r4, r0
 800d194:	4623      	mov	r3, r4
 800d196:	d807      	bhi.n	800d1a8 <memmove+0x20>
 800d198:	1e43      	subs	r3, r0, #1
 800d19a:	42a1      	cmp	r1, r4
 800d19c:	d008      	beq.n	800d1b0 <memmove+0x28>
 800d19e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1a6:	e7f8      	b.n	800d19a <memmove+0x12>
 800d1a8:	4402      	add	r2, r0
 800d1aa:	4601      	mov	r1, r0
 800d1ac:	428a      	cmp	r2, r1
 800d1ae:	d100      	bne.n	800d1b2 <memmove+0x2a>
 800d1b0:	bd10      	pop	{r4, pc}
 800d1b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1ba:	e7f7      	b.n	800d1ac <memmove+0x24>

0800d1bc <_sbrk_r>:
 800d1bc:	b538      	push	{r3, r4, r5, lr}
 800d1be:	4d06      	ldr	r5, [pc, #24]	@ (800d1d8 <_sbrk_r+0x1c>)
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	4608      	mov	r0, r1
 800d1c6:	602b      	str	r3, [r5, #0]
 800d1c8:	f7f8 f96e 	bl	80054a8 <_sbrk>
 800d1cc:	1c43      	adds	r3, r0, #1
 800d1ce:	d102      	bne.n	800d1d6 <_sbrk_r+0x1a>
 800d1d0:	682b      	ldr	r3, [r5, #0]
 800d1d2:	b103      	cbz	r3, 800d1d6 <_sbrk_r+0x1a>
 800d1d4:	6023      	str	r3, [r4, #0]
 800d1d6:	bd38      	pop	{r3, r4, r5, pc}
 800d1d8:	20000838 	.word	0x20000838

0800d1dc <abort>:
 800d1dc:	b508      	push	{r3, lr}
 800d1de:	2006      	movs	r0, #6
 800d1e0:	f000 fa42 	bl	800d668 <raise>
 800d1e4:	2001      	movs	r0, #1
 800d1e6:	f7f8 f8e7 	bl	80053b8 <_exit>

0800d1ea <_calloc_r>:
 800d1ea:	b570      	push	{r4, r5, r6, lr}
 800d1ec:	fba1 5402 	umull	r5, r4, r1, r2
 800d1f0:	b93c      	cbnz	r4, 800d202 <_calloc_r+0x18>
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	f7ff f856 	bl	800c2a4 <_malloc_r>
 800d1f8:	4606      	mov	r6, r0
 800d1fa:	b928      	cbnz	r0, 800d208 <_calloc_r+0x1e>
 800d1fc:	2600      	movs	r6, #0
 800d1fe:	4630      	mov	r0, r6
 800d200:	bd70      	pop	{r4, r5, r6, pc}
 800d202:	220c      	movs	r2, #12
 800d204:	6002      	str	r2, [r0, #0]
 800d206:	e7f9      	b.n	800d1fc <_calloc_r+0x12>
 800d208:	462a      	mov	r2, r5
 800d20a:	4621      	mov	r1, r4
 800d20c:	f7fd fd25 	bl	800ac5a <memset>
 800d210:	e7f5      	b.n	800d1fe <_calloc_r+0x14>

0800d212 <_realloc_r>:
 800d212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d216:	4680      	mov	r8, r0
 800d218:	4615      	mov	r5, r2
 800d21a:	460c      	mov	r4, r1
 800d21c:	b921      	cbnz	r1, 800d228 <_realloc_r+0x16>
 800d21e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d222:	4611      	mov	r1, r2
 800d224:	f7ff b83e 	b.w	800c2a4 <_malloc_r>
 800d228:	b92a      	cbnz	r2, 800d236 <_realloc_r+0x24>
 800d22a:	f7fe fc8d 	bl	800bb48 <_free_r>
 800d22e:	2400      	movs	r4, #0
 800d230:	4620      	mov	r0, r4
 800d232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d236:	f000 fa33 	bl	800d6a0 <_malloc_usable_size_r>
 800d23a:	4285      	cmp	r5, r0
 800d23c:	4606      	mov	r6, r0
 800d23e:	d802      	bhi.n	800d246 <_realloc_r+0x34>
 800d240:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d244:	d8f4      	bhi.n	800d230 <_realloc_r+0x1e>
 800d246:	4629      	mov	r1, r5
 800d248:	4640      	mov	r0, r8
 800d24a:	f7ff f82b 	bl	800c2a4 <_malloc_r>
 800d24e:	4607      	mov	r7, r0
 800d250:	2800      	cmp	r0, #0
 800d252:	d0ec      	beq.n	800d22e <_realloc_r+0x1c>
 800d254:	42b5      	cmp	r5, r6
 800d256:	462a      	mov	r2, r5
 800d258:	4621      	mov	r1, r4
 800d25a:	bf28      	it	cs
 800d25c:	4632      	movcs	r2, r6
 800d25e:	f7fd fdea 	bl	800ae36 <memcpy>
 800d262:	4621      	mov	r1, r4
 800d264:	4640      	mov	r0, r8
 800d266:	f7fe fc6f 	bl	800bb48 <_free_r>
 800d26a:	463c      	mov	r4, r7
 800d26c:	e7e0      	b.n	800d230 <_realloc_r+0x1e>

0800d26e <__sfputc_r>:
 800d26e:	6893      	ldr	r3, [r2, #8]
 800d270:	3b01      	subs	r3, #1
 800d272:	2b00      	cmp	r3, #0
 800d274:	b410      	push	{r4}
 800d276:	6093      	str	r3, [r2, #8]
 800d278:	da08      	bge.n	800d28c <__sfputc_r+0x1e>
 800d27a:	6994      	ldr	r4, [r2, #24]
 800d27c:	42a3      	cmp	r3, r4
 800d27e:	db01      	blt.n	800d284 <__sfputc_r+0x16>
 800d280:	290a      	cmp	r1, #10
 800d282:	d103      	bne.n	800d28c <__sfputc_r+0x1e>
 800d284:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d288:	f000 b932 	b.w	800d4f0 <__swbuf_r>
 800d28c:	6813      	ldr	r3, [r2, #0]
 800d28e:	1c58      	adds	r0, r3, #1
 800d290:	6010      	str	r0, [r2, #0]
 800d292:	7019      	strb	r1, [r3, #0]
 800d294:	4608      	mov	r0, r1
 800d296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <__sfputs_r>:
 800d29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29e:	4606      	mov	r6, r0
 800d2a0:	460f      	mov	r7, r1
 800d2a2:	4614      	mov	r4, r2
 800d2a4:	18d5      	adds	r5, r2, r3
 800d2a6:	42ac      	cmp	r4, r5
 800d2a8:	d101      	bne.n	800d2ae <__sfputs_r+0x12>
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	e007      	b.n	800d2be <__sfputs_r+0x22>
 800d2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2b2:	463a      	mov	r2, r7
 800d2b4:	4630      	mov	r0, r6
 800d2b6:	f7ff ffda 	bl	800d26e <__sfputc_r>
 800d2ba:	1c43      	adds	r3, r0, #1
 800d2bc:	d1f3      	bne.n	800d2a6 <__sfputs_r+0xa>
 800d2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d2c0 <_vfiprintf_r>:
 800d2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c4:	460d      	mov	r5, r1
 800d2c6:	b09d      	sub	sp, #116	@ 0x74
 800d2c8:	4614      	mov	r4, r2
 800d2ca:	4698      	mov	r8, r3
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	b118      	cbz	r0, 800d2d8 <_vfiprintf_r+0x18>
 800d2d0:	6a03      	ldr	r3, [r0, #32]
 800d2d2:	b90b      	cbnz	r3, 800d2d8 <_vfiprintf_r+0x18>
 800d2d4:	f7fd fc28 	bl	800ab28 <__sinit>
 800d2d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2da:	07d9      	lsls	r1, r3, #31
 800d2dc:	d405      	bmi.n	800d2ea <_vfiprintf_r+0x2a>
 800d2de:	89ab      	ldrh	r3, [r5, #12]
 800d2e0:	059a      	lsls	r2, r3, #22
 800d2e2:	d402      	bmi.n	800d2ea <_vfiprintf_r+0x2a>
 800d2e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2e6:	f7fd fda4 	bl	800ae32 <__retarget_lock_acquire_recursive>
 800d2ea:	89ab      	ldrh	r3, [r5, #12]
 800d2ec:	071b      	lsls	r3, r3, #28
 800d2ee:	d501      	bpl.n	800d2f4 <_vfiprintf_r+0x34>
 800d2f0:	692b      	ldr	r3, [r5, #16]
 800d2f2:	b99b      	cbnz	r3, 800d31c <_vfiprintf_r+0x5c>
 800d2f4:	4629      	mov	r1, r5
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f000 f938 	bl	800d56c <__swsetup_r>
 800d2fc:	b170      	cbz	r0, 800d31c <_vfiprintf_r+0x5c>
 800d2fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d300:	07dc      	lsls	r4, r3, #31
 800d302:	d504      	bpl.n	800d30e <_vfiprintf_r+0x4e>
 800d304:	f04f 30ff 	mov.w	r0, #4294967295
 800d308:	b01d      	add	sp, #116	@ 0x74
 800d30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30e:	89ab      	ldrh	r3, [r5, #12]
 800d310:	0598      	lsls	r0, r3, #22
 800d312:	d4f7      	bmi.n	800d304 <_vfiprintf_r+0x44>
 800d314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d316:	f7fd fd8d 	bl	800ae34 <__retarget_lock_release_recursive>
 800d31a:	e7f3      	b.n	800d304 <_vfiprintf_r+0x44>
 800d31c:	2300      	movs	r3, #0
 800d31e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d320:	2320      	movs	r3, #32
 800d322:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d326:	f8cd 800c 	str.w	r8, [sp, #12]
 800d32a:	2330      	movs	r3, #48	@ 0x30
 800d32c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d4dc <_vfiprintf_r+0x21c>
 800d330:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d334:	f04f 0901 	mov.w	r9, #1
 800d338:	4623      	mov	r3, r4
 800d33a:	469a      	mov	sl, r3
 800d33c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d340:	b10a      	cbz	r2, 800d346 <_vfiprintf_r+0x86>
 800d342:	2a25      	cmp	r2, #37	@ 0x25
 800d344:	d1f9      	bne.n	800d33a <_vfiprintf_r+0x7a>
 800d346:	ebba 0b04 	subs.w	fp, sl, r4
 800d34a:	d00b      	beq.n	800d364 <_vfiprintf_r+0xa4>
 800d34c:	465b      	mov	r3, fp
 800d34e:	4622      	mov	r2, r4
 800d350:	4629      	mov	r1, r5
 800d352:	4630      	mov	r0, r6
 800d354:	f7ff ffa2 	bl	800d29c <__sfputs_r>
 800d358:	3001      	adds	r0, #1
 800d35a:	f000 80a7 	beq.w	800d4ac <_vfiprintf_r+0x1ec>
 800d35e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d360:	445a      	add	r2, fp
 800d362:	9209      	str	r2, [sp, #36]	@ 0x24
 800d364:	f89a 3000 	ldrb.w	r3, [sl]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 809f 	beq.w	800d4ac <_vfiprintf_r+0x1ec>
 800d36e:	2300      	movs	r3, #0
 800d370:	f04f 32ff 	mov.w	r2, #4294967295
 800d374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d378:	f10a 0a01 	add.w	sl, sl, #1
 800d37c:	9304      	str	r3, [sp, #16]
 800d37e:	9307      	str	r3, [sp, #28]
 800d380:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d384:	931a      	str	r3, [sp, #104]	@ 0x68
 800d386:	4654      	mov	r4, sl
 800d388:	2205      	movs	r2, #5
 800d38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d38e:	4853      	ldr	r0, [pc, #332]	@ (800d4dc <_vfiprintf_r+0x21c>)
 800d390:	f7f2 ff1e 	bl	80001d0 <memchr>
 800d394:	9a04      	ldr	r2, [sp, #16]
 800d396:	b9d8      	cbnz	r0, 800d3d0 <_vfiprintf_r+0x110>
 800d398:	06d1      	lsls	r1, r2, #27
 800d39a:	bf44      	itt	mi
 800d39c:	2320      	movmi	r3, #32
 800d39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3a2:	0713      	lsls	r3, r2, #28
 800d3a4:	bf44      	itt	mi
 800d3a6:	232b      	movmi	r3, #43	@ 0x2b
 800d3a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d3b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3b2:	d015      	beq.n	800d3e0 <_vfiprintf_r+0x120>
 800d3b4:	9a07      	ldr	r2, [sp, #28]
 800d3b6:	4654      	mov	r4, sl
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	f04f 0c0a 	mov.w	ip, #10
 800d3be:	4621      	mov	r1, r4
 800d3c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3c4:	3b30      	subs	r3, #48	@ 0x30
 800d3c6:	2b09      	cmp	r3, #9
 800d3c8:	d94b      	bls.n	800d462 <_vfiprintf_r+0x1a2>
 800d3ca:	b1b0      	cbz	r0, 800d3fa <_vfiprintf_r+0x13a>
 800d3cc:	9207      	str	r2, [sp, #28]
 800d3ce:	e014      	b.n	800d3fa <_vfiprintf_r+0x13a>
 800d3d0:	eba0 0308 	sub.w	r3, r0, r8
 800d3d4:	fa09 f303 	lsl.w	r3, r9, r3
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	9304      	str	r3, [sp, #16]
 800d3dc:	46a2      	mov	sl, r4
 800d3de:	e7d2      	b.n	800d386 <_vfiprintf_r+0xc6>
 800d3e0:	9b03      	ldr	r3, [sp, #12]
 800d3e2:	1d19      	adds	r1, r3, #4
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	9103      	str	r1, [sp, #12]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	bfbb      	ittet	lt
 800d3ec:	425b      	neglt	r3, r3
 800d3ee:	f042 0202 	orrlt.w	r2, r2, #2
 800d3f2:	9307      	strge	r3, [sp, #28]
 800d3f4:	9307      	strlt	r3, [sp, #28]
 800d3f6:	bfb8      	it	lt
 800d3f8:	9204      	strlt	r2, [sp, #16]
 800d3fa:	7823      	ldrb	r3, [r4, #0]
 800d3fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3fe:	d10a      	bne.n	800d416 <_vfiprintf_r+0x156>
 800d400:	7863      	ldrb	r3, [r4, #1]
 800d402:	2b2a      	cmp	r3, #42	@ 0x2a
 800d404:	d132      	bne.n	800d46c <_vfiprintf_r+0x1ac>
 800d406:	9b03      	ldr	r3, [sp, #12]
 800d408:	1d1a      	adds	r2, r3, #4
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	9203      	str	r2, [sp, #12]
 800d40e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d412:	3402      	adds	r4, #2
 800d414:	9305      	str	r3, [sp, #20]
 800d416:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d4ec <_vfiprintf_r+0x22c>
 800d41a:	7821      	ldrb	r1, [r4, #0]
 800d41c:	2203      	movs	r2, #3
 800d41e:	4650      	mov	r0, sl
 800d420:	f7f2 fed6 	bl	80001d0 <memchr>
 800d424:	b138      	cbz	r0, 800d436 <_vfiprintf_r+0x176>
 800d426:	9b04      	ldr	r3, [sp, #16]
 800d428:	eba0 000a 	sub.w	r0, r0, sl
 800d42c:	2240      	movs	r2, #64	@ 0x40
 800d42e:	4082      	lsls	r2, r0
 800d430:	4313      	orrs	r3, r2
 800d432:	3401      	adds	r4, #1
 800d434:	9304      	str	r3, [sp, #16]
 800d436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d43a:	4829      	ldr	r0, [pc, #164]	@ (800d4e0 <_vfiprintf_r+0x220>)
 800d43c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d440:	2206      	movs	r2, #6
 800d442:	f7f2 fec5 	bl	80001d0 <memchr>
 800d446:	2800      	cmp	r0, #0
 800d448:	d03f      	beq.n	800d4ca <_vfiprintf_r+0x20a>
 800d44a:	4b26      	ldr	r3, [pc, #152]	@ (800d4e4 <_vfiprintf_r+0x224>)
 800d44c:	bb1b      	cbnz	r3, 800d496 <_vfiprintf_r+0x1d6>
 800d44e:	9b03      	ldr	r3, [sp, #12]
 800d450:	3307      	adds	r3, #7
 800d452:	f023 0307 	bic.w	r3, r3, #7
 800d456:	3308      	adds	r3, #8
 800d458:	9303      	str	r3, [sp, #12]
 800d45a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d45c:	443b      	add	r3, r7
 800d45e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d460:	e76a      	b.n	800d338 <_vfiprintf_r+0x78>
 800d462:	fb0c 3202 	mla	r2, ip, r2, r3
 800d466:	460c      	mov	r4, r1
 800d468:	2001      	movs	r0, #1
 800d46a:	e7a8      	b.n	800d3be <_vfiprintf_r+0xfe>
 800d46c:	2300      	movs	r3, #0
 800d46e:	3401      	adds	r4, #1
 800d470:	9305      	str	r3, [sp, #20]
 800d472:	4619      	mov	r1, r3
 800d474:	f04f 0c0a 	mov.w	ip, #10
 800d478:	4620      	mov	r0, r4
 800d47a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d47e:	3a30      	subs	r2, #48	@ 0x30
 800d480:	2a09      	cmp	r2, #9
 800d482:	d903      	bls.n	800d48c <_vfiprintf_r+0x1cc>
 800d484:	2b00      	cmp	r3, #0
 800d486:	d0c6      	beq.n	800d416 <_vfiprintf_r+0x156>
 800d488:	9105      	str	r1, [sp, #20]
 800d48a:	e7c4      	b.n	800d416 <_vfiprintf_r+0x156>
 800d48c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d490:	4604      	mov	r4, r0
 800d492:	2301      	movs	r3, #1
 800d494:	e7f0      	b.n	800d478 <_vfiprintf_r+0x1b8>
 800d496:	ab03      	add	r3, sp, #12
 800d498:	9300      	str	r3, [sp, #0]
 800d49a:	462a      	mov	r2, r5
 800d49c:	4b12      	ldr	r3, [pc, #72]	@ (800d4e8 <_vfiprintf_r+0x228>)
 800d49e:	a904      	add	r1, sp, #16
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	f7fc fce9 	bl	8009e78 <_printf_float>
 800d4a6:	4607      	mov	r7, r0
 800d4a8:	1c78      	adds	r0, r7, #1
 800d4aa:	d1d6      	bne.n	800d45a <_vfiprintf_r+0x19a>
 800d4ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4ae:	07d9      	lsls	r1, r3, #31
 800d4b0:	d405      	bmi.n	800d4be <_vfiprintf_r+0x1fe>
 800d4b2:	89ab      	ldrh	r3, [r5, #12]
 800d4b4:	059a      	lsls	r2, r3, #22
 800d4b6:	d402      	bmi.n	800d4be <_vfiprintf_r+0x1fe>
 800d4b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4ba:	f7fd fcbb 	bl	800ae34 <__retarget_lock_release_recursive>
 800d4be:	89ab      	ldrh	r3, [r5, #12]
 800d4c0:	065b      	lsls	r3, r3, #25
 800d4c2:	f53f af1f 	bmi.w	800d304 <_vfiprintf_r+0x44>
 800d4c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4c8:	e71e      	b.n	800d308 <_vfiprintf_r+0x48>
 800d4ca:	ab03      	add	r3, sp, #12
 800d4cc:	9300      	str	r3, [sp, #0]
 800d4ce:	462a      	mov	r2, r5
 800d4d0:	4b05      	ldr	r3, [pc, #20]	@ (800d4e8 <_vfiprintf_r+0x228>)
 800d4d2:	a904      	add	r1, sp, #16
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	f7fc ff67 	bl	800a3a8 <_printf_i>
 800d4da:	e7e4      	b.n	800d4a6 <_vfiprintf_r+0x1e6>
 800d4dc:	0800f930 	.word	0x0800f930
 800d4e0:	0800f93a 	.word	0x0800f93a
 800d4e4:	08009e79 	.word	0x08009e79
 800d4e8:	0800d29d 	.word	0x0800d29d
 800d4ec:	0800f936 	.word	0x0800f936

0800d4f0 <__swbuf_r>:
 800d4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f2:	460e      	mov	r6, r1
 800d4f4:	4614      	mov	r4, r2
 800d4f6:	4605      	mov	r5, r0
 800d4f8:	b118      	cbz	r0, 800d502 <__swbuf_r+0x12>
 800d4fa:	6a03      	ldr	r3, [r0, #32]
 800d4fc:	b90b      	cbnz	r3, 800d502 <__swbuf_r+0x12>
 800d4fe:	f7fd fb13 	bl	800ab28 <__sinit>
 800d502:	69a3      	ldr	r3, [r4, #24]
 800d504:	60a3      	str	r3, [r4, #8]
 800d506:	89a3      	ldrh	r3, [r4, #12]
 800d508:	071a      	lsls	r2, r3, #28
 800d50a:	d501      	bpl.n	800d510 <__swbuf_r+0x20>
 800d50c:	6923      	ldr	r3, [r4, #16]
 800d50e:	b943      	cbnz	r3, 800d522 <__swbuf_r+0x32>
 800d510:	4621      	mov	r1, r4
 800d512:	4628      	mov	r0, r5
 800d514:	f000 f82a 	bl	800d56c <__swsetup_r>
 800d518:	b118      	cbz	r0, 800d522 <__swbuf_r+0x32>
 800d51a:	f04f 37ff 	mov.w	r7, #4294967295
 800d51e:	4638      	mov	r0, r7
 800d520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d522:	6823      	ldr	r3, [r4, #0]
 800d524:	6922      	ldr	r2, [r4, #16]
 800d526:	1a98      	subs	r0, r3, r2
 800d528:	6963      	ldr	r3, [r4, #20]
 800d52a:	b2f6      	uxtb	r6, r6
 800d52c:	4283      	cmp	r3, r0
 800d52e:	4637      	mov	r7, r6
 800d530:	dc05      	bgt.n	800d53e <__swbuf_r+0x4e>
 800d532:	4621      	mov	r1, r4
 800d534:	4628      	mov	r0, r5
 800d536:	f7ff fded 	bl	800d114 <_fflush_r>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d1ed      	bne.n	800d51a <__swbuf_r+0x2a>
 800d53e:	68a3      	ldr	r3, [r4, #8]
 800d540:	3b01      	subs	r3, #1
 800d542:	60a3      	str	r3, [r4, #8]
 800d544:	6823      	ldr	r3, [r4, #0]
 800d546:	1c5a      	adds	r2, r3, #1
 800d548:	6022      	str	r2, [r4, #0]
 800d54a:	701e      	strb	r6, [r3, #0]
 800d54c:	6962      	ldr	r2, [r4, #20]
 800d54e:	1c43      	adds	r3, r0, #1
 800d550:	429a      	cmp	r2, r3
 800d552:	d004      	beq.n	800d55e <__swbuf_r+0x6e>
 800d554:	89a3      	ldrh	r3, [r4, #12]
 800d556:	07db      	lsls	r3, r3, #31
 800d558:	d5e1      	bpl.n	800d51e <__swbuf_r+0x2e>
 800d55a:	2e0a      	cmp	r6, #10
 800d55c:	d1df      	bne.n	800d51e <__swbuf_r+0x2e>
 800d55e:	4621      	mov	r1, r4
 800d560:	4628      	mov	r0, r5
 800d562:	f7ff fdd7 	bl	800d114 <_fflush_r>
 800d566:	2800      	cmp	r0, #0
 800d568:	d0d9      	beq.n	800d51e <__swbuf_r+0x2e>
 800d56a:	e7d6      	b.n	800d51a <__swbuf_r+0x2a>

0800d56c <__swsetup_r>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4b29      	ldr	r3, [pc, #164]	@ (800d614 <__swsetup_r+0xa8>)
 800d570:	4605      	mov	r5, r0
 800d572:	6818      	ldr	r0, [r3, #0]
 800d574:	460c      	mov	r4, r1
 800d576:	b118      	cbz	r0, 800d580 <__swsetup_r+0x14>
 800d578:	6a03      	ldr	r3, [r0, #32]
 800d57a:	b90b      	cbnz	r3, 800d580 <__swsetup_r+0x14>
 800d57c:	f7fd fad4 	bl	800ab28 <__sinit>
 800d580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d584:	0719      	lsls	r1, r3, #28
 800d586:	d422      	bmi.n	800d5ce <__swsetup_r+0x62>
 800d588:	06da      	lsls	r2, r3, #27
 800d58a:	d407      	bmi.n	800d59c <__swsetup_r+0x30>
 800d58c:	2209      	movs	r2, #9
 800d58e:	602a      	str	r2, [r5, #0]
 800d590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d594:	81a3      	strh	r3, [r4, #12]
 800d596:	f04f 30ff 	mov.w	r0, #4294967295
 800d59a:	e033      	b.n	800d604 <__swsetup_r+0x98>
 800d59c:	0758      	lsls	r0, r3, #29
 800d59e:	d512      	bpl.n	800d5c6 <__swsetup_r+0x5a>
 800d5a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5a2:	b141      	cbz	r1, 800d5b6 <__swsetup_r+0x4a>
 800d5a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d5a8:	4299      	cmp	r1, r3
 800d5aa:	d002      	beq.n	800d5b2 <__swsetup_r+0x46>
 800d5ac:	4628      	mov	r0, r5
 800d5ae:	f7fe facb 	bl	800bb48 <_free_r>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d5b6:	89a3      	ldrh	r3, [r4, #12]
 800d5b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d5bc:	81a3      	strh	r3, [r4, #12]
 800d5be:	2300      	movs	r3, #0
 800d5c0:	6063      	str	r3, [r4, #4]
 800d5c2:	6923      	ldr	r3, [r4, #16]
 800d5c4:	6023      	str	r3, [r4, #0]
 800d5c6:	89a3      	ldrh	r3, [r4, #12]
 800d5c8:	f043 0308 	orr.w	r3, r3, #8
 800d5cc:	81a3      	strh	r3, [r4, #12]
 800d5ce:	6923      	ldr	r3, [r4, #16]
 800d5d0:	b94b      	cbnz	r3, 800d5e6 <__swsetup_r+0x7a>
 800d5d2:	89a3      	ldrh	r3, [r4, #12]
 800d5d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d5d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5dc:	d003      	beq.n	800d5e6 <__swsetup_r+0x7a>
 800d5de:	4621      	mov	r1, r4
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	f000 f88b 	bl	800d6fc <__smakebuf_r>
 800d5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ea:	f013 0201 	ands.w	r2, r3, #1
 800d5ee:	d00a      	beq.n	800d606 <__swsetup_r+0x9a>
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	60a2      	str	r2, [r4, #8]
 800d5f4:	6962      	ldr	r2, [r4, #20]
 800d5f6:	4252      	negs	r2, r2
 800d5f8:	61a2      	str	r2, [r4, #24]
 800d5fa:	6922      	ldr	r2, [r4, #16]
 800d5fc:	b942      	cbnz	r2, 800d610 <__swsetup_r+0xa4>
 800d5fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d602:	d1c5      	bne.n	800d590 <__swsetup_r+0x24>
 800d604:	bd38      	pop	{r3, r4, r5, pc}
 800d606:	0799      	lsls	r1, r3, #30
 800d608:	bf58      	it	pl
 800d60a:	6962      	ldrpl	r2, [r4, #20]
 800d60c:	60a2      	str	r2, [r4, #8]
 800d60e:	e7f4      	b.n	800d5fa <__swsetup_r+0x8e>
 800d610:	2000      	movs	r0, #0
 800d612:	e7f7      	b.n	800d604 <__swsetup_r+0x98>
 800d614:	20000250 	.word	0x20000250

0800d618 <_raise_r>:
 800d618:	291f      	cmp	r1, #31
 800d61a:	b538      	push	{r3, r4, r5, lr}
 800d61c:	4605      	mov	r5, r0
 800d61e:	460c      	mov	r4, r1
 800d620:	d904      	bls.n	800d62c <_raise_r+0x14>
 800d622:	2316      	movs	r3, #22
 800d624:	6003      	str	r3, [r0, #0]
 800d626:	f04f 30ff 	mov.w	r0, #4294967295
 800d62a:	bd38      	pop	{r3, r4, r5, pc}
 800d62c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d62e:	b112      	cbz	r2, 800d636 <_raise_r+0x1e>
 800d630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d634:	b94b      	cbnz	r3, 800d64a <_raise_r+0x32>
 800d636:	4628      	mov	r0, r5
 800d638:	f000 f830 	bl	800d69c <_getpid_r>
 800d63c:	4622      	mov	r2, r4
 800d63e:	4601      	mov	r1, r0
 800d640:	4628      	mov	r0, r5
 800d642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d646:	f000 b817 	b.w	800d678 <_kill_r>
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d00a      	beq.n	800d664 <_raise_r+0x4c>
 800d64e:	1c59      	adds	r1, r3, #1
 800d650:	d103      	bne.n	800d65a <_raise_r+0x42>
 800d652:	2316      	movs	r3, #22
 800d654:	6003      	str	r3, [r0, #0]
 800d656:	2001      	movs	r0, #1
 800d658:	e7e7      	b.n	800d62a <_raise_r+0x12>
 800d65a:	2100      	movs	r1, #0
 800d65c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d660:	4620      	mov	r0, r4
 800d662:	4798      	blx	r3
 800d664:	2000      	movs	r0, #0
 800d666:	e7e0      	b.n	800d62a <_raise_r+0x12>

0800d668 <raise>:
 800d668:	4b02      	ldr	r3, [pc, #8]	@ (800d674 <raise+0xc>)
 800d66a:	4601      	mov	r1, r0
 800d66c:	6818      	ldr	r0, [r3, #0]
 800d66e:	f7ff bfd3 	b.w	800d618 <_raise_r>
 800d672:	bf00      	nop
 800d674:	20000250 	.word	0x20000250

0800d678 <_kill_r>:
 800d678:	b538      	push	{r3, r4, r5, lr}
 800d67a:	4d07      	ldr	r5, [pc, #28]	@ (800d698 <_kill_r+0x20>)
 800d67c:	2300      	movs	r3, #0
 800d67e:	4604      	mov	r4, r0
 800d680:	4608      	mov	r0, r1
 800d682:	4611      	mov	r1, r2
 800d684:	602b      	str	r3, [r5, #0]
 800d686:	f7f7 fe87 	bl	8005398 <_kill>
 800d68a:	1c43      	adds	r3, r0, #1
 800d68c:	d102      	bne.n	800d694 <_kill_r+0x1c>
 800d68e:	682b      	ldr	r3, [r5, #0]
 800d690:	b103      	cbz	r3, 800d694 <_kill_r+0x1c>
 800d692:	6023      	str	r3, [r4, #0]
 800d694:	bd38      	pop	{r3, r4, r5, pc}
 800d696:	bf00      	nop
 800d698:	20000838 	.word	0x20000838

0800d69c <_getpid_r>:
 800d69c:	f7f7 be74 	b.w	8005388 <_getpid>

0800d6a0 <_malloc_usable_size_r>:
 800d6a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6a4:	1f18      	subs	r0, r3, #4
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	bfbc      	itt	lt
 800d6aa:	580b      	ldrlt	r3, [r1, r0]
 800d6ac:	18c0      	addlt	r0, r0, r3
 800d6ae:	4770      	bx	lr

0800d6b0 <__swhatbuf_r>:
 800d6b0:	b570      	push	{r4, r5, r6, lr}
 800d6b2:	460c      	mov	r4, r1
 800d6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6b8:	2900      	cmp	r1, #0
 800d6ba:	b096      	sub	sp, #88	@ 0x58
 800d6bc:	4615      	mov	r5, r2
 800d6be:	461e      	mov	r6, r3
 800d6c0:	da0d      	bge.n	800d6de <__swhatbuf_r+0x2e>
 800d6c2:	89a3      	ldrh	r3, [r4, #12]
 800d6c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d6c8:	f04f 0100 	mov.w	r1, #0
 800d6cc:	bf14      	ite	ne
 800d6ce:	2340      	movne	r3, #64	@ 0x40
 800d6d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	6031      	str	r1, [r6, #0]
 800d6d8:	602b      	str	r3, [r5, #0]
 800d6da:	b016      	add	sp, #88	@ 0x58
 800d6dc:	bd70      	pop	{r4, r5, r6, pc}
 800d6de:	466a      	mov	r2, sp
 800d6e0:	f000 f848 	bl	800d774 <_fstat_r>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	dbec      	blt.n	800d6c2 <__swhatbuf_r+0x12>
 800d6e8:	9901      	ldr	r1, [sp, #4]
 800d6ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d6ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d6f2:	4259      	negs	r1, r3
 800d6f4:	4159      	adcs	r1, r3
 800d6f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6fa:	e7eb      	b.n	800d6d4 <__swhatbuf_r+0x24>

0800d6fc <__smakebuf_r>:
 800d6fc:	898b      	ldrh	r3, [r1, #12]
 800d6fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d700:	079d      	lsls	r5, r3, #30
 800d702:	4606      	mov	r6, r0
 800d704:	460c      	mov	r4, r1
 800d706:	d507      	bpl.n	800d718 <__smakebuf_r+0x1c>
 800d708:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d70c:	6023      	str	r3, [r4, #0]
 800d70e:	6123      	str	r3, [r4, #16]
 800d710:	2301      	movs	r3, #1
 800d712:	6163      	str	r3, [r4, #20]
 800d714:	b003      	add	sp, #12
 800d716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d718:	ab01      	add	r3, sp, #4
 800d71a:	466a      	mov	r2, sp
 800d71c:	f7ff ffc8 	bl	800d6b0 <__swhatbuf_r>
 800d720:	9f00      	ldr	r7, [sp, #0]
 800d722:	4605      	mov	r5, r0
 800d724:	4639      	mov	r1, r7
 800d726:	4630      	mov	r0, r6
 800d728:	f7fe fdbc 	bl	800c2a4 <_malloc_r>
 800d72c:	b948      	cbnz	r0, 800d742 <__smakebuf_r+0x46>
 800d72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d732:	059a      	lsls	r2, r3, #22
 800d734:	d4ee      	bmi.n	800d714 <__smakebuf_r+0x18>
 800d736:	f023 0303 	bic.w	r3, r3, #3
 800d73a:	f043 0302 	orr.w	r3, r3, #2
 800d73e:	81a3      	strh	r3, [r4, #12]
 800d740:	e7e2      	b.n	800d708 <__smakebuf_r+0xc>
 800d742:	89a3      	ldrh	r3, [r4, #12]
 800d744:	6020      	str	r0, [r4, #0]
 800d746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d74a:	81a3      	strh	r3, [r4, #12]
 800d74c:	9b01      	ldr	r3, [sp, #4]
 800d74e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d752:	b15b      	cbz	r3, 800d76c <__smakebuf_r+0x70>
 800d754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d758:	4630      	mov	r0, r6
 800d75a:	f000 f81d 	bl	800d798 <_isatty_r>
 800d75e:	b128      	cbz	r0, 800d76c <__smakebuf_r+0x70>
 800d760:	89a3      	ldrh	r3, [r4, #12]
 800d762:	f023 0303 	bic.w	r3, r3, #3
 800d766:	f043 0301 	orr.w	r3, r3, #1
 800d76a:	81a3      	strh	r3, [r4, #12]
 800d76c:	89a3      	ldrh	r3, [r4, #12]
 800d76e:	431d      	orrs	r5, r3
 800d770:	81a5      	strh	r5, [r4, #12]
 800d772:	e7cf      	b.n	800d714 <__smakebuf_r+0x18>

0800d774 <_fstat_r>:
 800d774:	b538      	push	{r3, r4, r5, lr}
 800d776:	4d07      	ldr	r5, [pc, #28]	@ (800d794 <_fstat_r+0x20>)
 800d778:	2300      	movs	r3, #0
 800d77a:	4604      	mov	r4, r0
 800d77c:	4608      	mov	r0, r1
 800d77e:	4611      	mov	r1, r2
 800d780:	602b      	str	r3, [r5, #0]
 800d782:	f7f7 fe69 	bl	8005458 <_fstat>
 800d786:	1c43      	adds	r3, r0, #1
 800d788:	d102      	bne.n	800d790 <_fstat_r+0x1c>
 800d78a:	682b      	ldr	r3, [r5, #0]
 800d78c:	b103      	cbz	r3, 800d790 <_fstat_r+0x1c>
 800d78e:	6023      	str	r3, [r4, #0]
 800d790:	bd38      	pop	{r3, r4, r5, pc}
 800d792:	bf00      	nop
 800d794:	20000838 	.word	0x20000838

0800d798 <_isatty_r>:
 800d798:	b538      	push	{r3, r4, r5, lr}
 800d79a:	4d06      	ldr	r5, [pc, #24]	@ (800d7b4 <_isatty_r+0x1c>)
 800d79c:	2300      	movs	r3, #0
 800d79e:	4604      	mov	r4, r0
 800d7a0:	4608      	mov	r0, r1
 800d7a2:	602b      	str	r3, [r5, #0]
 800d7a4:	f7f7 fe68 	bl	8005478 <_isatty>
 800d7a8:	1c43      	adds	r3, r0, #1
 800d7aa:	d102      	bne.n	800d7b2 <_isatty_r+0x1a>
 800d7ac:	682b      	ldr	r3, [r5, #0]
 800d7ae:	b103      	cbz	r3, 800d7b2 <_isatty_r+0x1a>
 800d7b0:	6023      	str	r3, [r4, #0]
 800d7b2:	bd38      	pop	{r3, r4, r5, pc}
 800d7b4:	20000838 	.word	0x20000838

0800d7b8 <atan2>:
 800d7b8:	f000 bbc6 	b.w	800df48 <__ieee754_atan2>
 800d7bc:	0000      	movs	r0, r0
	...

0800d7c0 <hypot>:
 800d7c0:	b508      	push	{r3, lr}
 800d7c2:	ed2d 8b06 	vpush	{d8-d10}
 800d7c6:	eeb0 aa40 	vmov.f32	s20, s0
 800d7ca:	eef0 aa60 	vmov.f32	s21, s1
 800d7ce:	eeb0 9a41 	vmov.f32	s18, s2
 800d7d2:	eef0 9a61 	vmov.f32	s19, s3
 800d7d6:	f000 fc7d 	bl	800e0d4 <__ieee754_hypot>
 800d7da:	eeb0 8a40 	vmov.f32	s16, s0
 800d7de:	eef0 8a60 	vmov.f32	s17, s1
 800d7e2:	f000 f8c9 	bl	800d978 <finite>
 800d7e6:	b998      	cbnz	r0, 800d810 <hypot+0x50>
 800d7e8:	eeb0 0a4a 	vmov.f32	s0, s20
 800d7ec:	eef0 0a6a 	vmov.f32	s1, s21
 800d7f0:	f000 f8c2 	bl	800d978 <finite>
 800d7f4:	b160      	cbz	r0, 800d810 <hypot+0x50>
 800d7f6:	eeb0 0a49 	vmov.f32	s0, s18
 800d7fa:	eef0 0a69 	vmov.f32	s1, s19
 800d7fe:	f000 f8bb 	bl	800d978 <finite>
 800d802:	b128      	cbz	r0, 800d810 <hypot+0x50>
 800d804:	f7fd faea 	bl	800addc <__errno>
 800d808:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800d820 <hypot+0x60>
 800d80c:	2322      	movs	r3, #34	@ 0x22
 800d80e:	6003      	str	r3, [r0, #0]
 800d810:	eeb0 0a48 	vmov.f32	s0, s16
 800d814:	eef0 0a68 	vmov.f32	s1, s17
 800d818:	ecbd 8b06 	vpop	{d8-d10}
 800d81c:	bd08      	pop	{r3, pc}
 800d81e:	bf00      	nop
 800d820:	00000000 	.word	0x00000000
 800d824:	7ff00000 	.word	0x7ff00000

0800d828 <cos>:
 800d828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d82a:	ec53 2b10 	vmov	r2, r3, d0
 800d82e:	4826      	ldr	r0, [pc, #152]	@ (800d8c8 <cos+0xa0>)
 800d830:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d834:	4281      	cmp	r1, r0
 800d836:	d806      	bhi.n	800d846 <cos+0x1e>
 800d838:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d8c0 <cos+0x98>
 800d83c:	b005      	add	sp, #20
 800d83e:	f85d eb04 	ldr.w	lr, [sp], #4
 800d842:	f000 b9fd 	b.w	800dc40 <__kernel_cos>
 800d846:	4821      	ldr	r0, [pc, #132]	@ (800d8cc <cos+0xa4>)
 800d848:	4281      	cmp	r1, r0
 800d84a:	d908      	bls.n	800d85e <cos+0x36>
 800d84c:	4610      	mov	r0, r2
 800d84e:	4619      	mov	r1, r3
 800d850:	f7f2 fd1a 	bl	8000288 <__aeabi_dsub>
 800d854:	ec41 0b10 	vmov	d0, r0, r1
 800d858:	b005      	add	sp, #20
 800d85a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d85e:	4668      	mov	r0, sp
 800d860:	f000 fd4e 	bl	800e300 <__ieee754_rem_pio2>
 800d864:	f000 0003 	and.w	r0, r0, #3
 800d868:	2801      	cmp	r0, #1
 800d86a:	d00b      	beq.n	800d884 <cos+0x5c>
 800d86c:	2802      	cmp	r0, #2
 800d86e:	d015      	beq.n	800d89c <cos+0x74>
 800d870:	b9d8      	cbnz	r0, 800d8aa <cos+0x82>
 800d872:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d876:	ed9d 0b00 	vldr	d0, [sp]
 800d87a:	f000 f9e1 	bl	800dc40 <__kernel_cos>
 800d87e:	ec51 0b10 	vmov	r0, r1, d0
 800d882:	e7e7      	b.n	800d854 <cos+0x2c>
 800d884:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d888:	ed9d 0b00 	vldr	d0, [sp]
 800d88c:	f000 faa0 	bl	800ddd0 <__kernel_sin>
 800d890:	ec53 2b10 	vmov	r2, r3, d0
 800d894:	4610      	mov	r0, r2
 800d896:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d89a:	e7db      	b.n	800d854 <cos+0x2c>
 800d89c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8a0:	ed9d 0b00 	vldr	d0, [sp]
 800d8a4:	f000 f9cc 	bl	800dc40 <__kernel_cos>
 800d8a8:	e7f2      	b.n	800d890 <cos+0x68>
 800d8aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8ae:	ed9d 0b00 	vldr	d0, [sp]
 800d8b2:	2001      	movs	r0, #1
 800d8b4:	f000 fa8c 	bl	800ddd0 <__kernel_sin>
 800d8b8:	e7e1      	b.n	800d87e <cos+0x56>
 800d8ba:	bf00      	nop
 800d8bc:	f3af 8000 	nop.w
	...
 800d8c8:	3fe921fb 	.word	0x3fe921fb
 800d8cc:	7fefffff 	.word	0x7fefffff

0800d8d0 <sin>:
 800d8d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8d2:	ec53 2b10 	vmov	r2, r3, d0
 800d8d6:	4826      	ldr	r0, [pc, #152]	@ (800d970 <sin+0xa0>)
 800d8d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d8dc:	4281      	cmp	r1, r0
 800d8de:	d807      	bhi.n	800d8f0 <sin+0x20>
 800d8e0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d968 <sin+0x98>
 800d8e4:	2000      	movs	r0, #0
 800d8e6:	b005      	add	sp, #20
 800d8e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8ec:	f000 ba70 	b.w	800ddd0 <__kernel_sin>
 800d8f0:	4820      	ldr	r0, [pc, #128]	@ (800d974 <sin+0xa4>)
 800d8f2:	4281      	cmp	r1, r0
 800d8f4:	d908      	bls.n	800d908 <sin+0x38>
 800d8f6:	4610      	mov	r0, r2
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	f7f2 fcc5 	bl	8000288 <__aeabi_dsub>
 800d8fe:	ec41 0b10 	vmov	d0, r0, r1
 800d902:	b005      	add	sp, #20
 800d904:	f85d fb04 	ldr.w	pc, [sp], #4
 800d908:	4668      	mov	r0, sp
 800d90a:	f000 fcf9 	bl	800e300 <__ieee754_rem_pio2>
 800d90e:	f000 0003 	and.w	r0, r0, #3
 800d912:	2801      	cmp	r0, #1
 800d914:	d00c      	beq.n	800d930 <sin+0x60>
 800d916:	2802      	cmp	r0, #2
 800d918:	d011      	beq.n	800d93e <sin+0x6e>
 800d91a:	b9e8      	cbnz	r0, 800d958 <sin+0x88>
 800d91c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d920:	ed9d 0b00 	vldr	d0, [sp]
 800d924:	2001      	movs	r0, #1
 800d926:	f000 fa53 	bl	800ddd0 <__kernel_sin>
 800d92a:	ec51 0b10 	vmov	r0, r1, d0
 800d92e:	e7e6      	b.n	800d8fe <sin+0x2e>
 800d930:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d934:	ed9d 0b00 	vldr	d0, [sp]
 800d938:	f000 f982 	bl	800dc40 <__kernel_cos>
 800d93c:	e7f5      	b.n	800d92a <sin+0x5a>
 800d93e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d942:	ed9d 0b00 	vldr	d0, [sp]
 800d946:	2001      	movs	r0, #1
 800d948:	f000 fa42 	bl	800ddd0 <__kernel_sin>
 800d94c:	ec53 2b10 	vmov	r2, r3, d0
 800d950:	4610      	mov	r0, r2
 800d952:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d956:	e7d2      	b.n	800d8fe <sin+0x2e>
 800d958:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d95c:	ed9d 0b00 	vldr	d0, [sp]
 800d960:	f000 f96e 	bl	800dc40 <__kernel_cos>
 800d964:	e7f2      	b.n	800d94c <sin+0x7c>
 800d966:	bf00      	nop
	...
 800d970:	3fe921fb 	.word	0x3fe921fb
 800d974:	7fefffff 	.word	0x7fefffff

0800d978 <finite>:
 800d978:	b082      	sub	sp, #8
 800d97a:	ed8d 0b00 	vstr	d0, [sp]
 800d97e:	9801      	ldr	r0, [sp, #4]
 800d980:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800d984:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d988:	0fc0      	lsrs	r0, r0, #31
 800d98a:	b002      	add	sp, #8
 800d98c:	4770      	bx	lr

0800d98e <fmax>:
 800d98e:	b508      	push	{r3, lr}
 800d990:	ed2d 8b04 	vpush	{d8-d9}
 800d994:	eeb0 8a40 	vmov.f32	s16, s0
 800d998:	eef0 8a60 	vmov.f32	s17, s1
 800d99c:	eeb0 9a41 	vmov.f32	s18, s2
 800d9a0:	eef0 9a61 	vmov.f32	s19, s3
 800d9a4:	f000 f848 	bl	800da38 <__fpclassifyd>
 800d9a8:	b950      	cbnz	r0, 800d9c0 <fmax+0x32>
 800d9aa:	eeb0 8a49 	vmov.f32	s16, s18
 800d9ae:	eef0 8a69 	vmov.f32	s17, s19
 800d9b2:	eeb0 0a48 	vmov.f32	s0, s16
 800d9b6:	eef0 0a68 	vmov.f32	s1, s17
 800d9ba:	ecbd 8b04 	vpop	{d8-d9}
 800d9be:	bd08      	pop	{r3, pc}
 800d9c0:	eeb0 0a49 	vmov.f32	s0, s18
 800d9c4:	eef0 0a69 	vmov.f32	s1, s19
 800d9c8:	f000 f836 	bl	800da38 <__fpclassifyd>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	d0f0      	beq.n	800d9b2 <fmax+0x24>
 800d9d0:	ec53 2b19 	vmov	r2, r3, d9
 800d9d4:	ec51 0b18 	vmov	r0, r1, d8
 800d9d8:	f7f3 f89e 	bl	8000b18 <__aeabi_dcmpgt>
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	d0e4      	beq.n	800d9aa <fmax+0x1c>
 800d9e0:	e7e7      	b.n	800d9b2 <fmax+0x24>

0800d9e2 <fmin>:
 800d9e2:	b508      	push	{r3, lr}
 800d9e4:	ed2d 8b04 	vpush	{d8-d9}
 800d9e8:	eeb0 8a40 	vmov.f32	s16, s0
 800d9ec:	eef0 8a60 	vmov.f32	s17, s1
 800d9f0:	eeb0 9a41 	vmov.f32	s18, s2
 800d9f4:	eef0 9a61 	vmov.f32	s19, s3
 800d9f8:	f000 f81e 	bl	800da38 <__fpclassifyd>
 800d9fc:	b950      	cbnz	r0, 800da14 <fmin+0x32>
 800d9fe:	eeb0 8a49 	vmov.f32	s16, s18
 800da02:	eef0 8a69 	vmov.f32	s17, s19
 800da06:	eeb0 0a48 	vmov.f32	s0, s16
 800da0a:	eef0 0a68 	vmov.f32	s1, s17
 800da0e:	ecbd 8b04 	vpop	{d8-d9}
 800da12:	bd08      	pop	{r3, pc}
 800da14:	eeb0 0a49 	vmov.f32	s0, s18
 800da18:	eef0 0a69 	vmov.f32	s1, s19
 800da1c:	f000 f80c 	bl	800da38 <__fpclassifyd>
 800da20:	2800      	cmp	r0, #0
 800da22:	d0f0      	beq.n	800da06 <fmin+0x24>
 800da24:	ec53 2b19 	vmov	r2, r3, d9
 800da28:	ec51 0b18 	vmov	r0, r1, d8
 800da2c:	f7f3 f856 	bl	8000adc <__aeabi_dcmplt>
 800da30:	2800      	cmp	r0, #0
 800da32:	d0e4      	beq.n	800d9fe <fmin+0x1c>
 800da34:	e7e7      	b.n	800da06 <fmin+0x24>
	...

0800da38 <__fpclassifyd>:
 800da38:	ec51 0b10 	vmov	r0, r1, d0
 800da3c:	b510      	push	{r4, lr}
 800da3e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800da42:	460b      	mov	r3, r1
 800da44:	d019      	beq.n	800da7a <__fpclassifyd+0x42>
 800da46:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800da4a:	490e      	ldr	r1, [pc, #56]	@ (800da84 <__fpclassifyd+0x4c>)
 800da4c:	428a      	cmp	r2, r1
 800da4e:	d90e      	bls.n	800da6e <__fpclassifyd+0x36>
 800da50:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800da54:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800da58:	428a      	cmp	r2, r1
 800da5a:	d908      	bls.n	800da6e <__fpclassifyd+0x36>
 800da5c:	4a0a      	ldr	r2, [pc, #40]	@ (800da88 <__fpclassifyd+0x50>)
 800da5e:	4213      	tst	r3, r2
 800da60:	d007      	beq.n	800da72 <__fpclassifyd+0x3a>
 800da62:	4294      	cmp	r4, r2
 800da64:	d107      	bne.n	800da76 <__fpclassifyd+0x3e>
 800da66:	fab0 f080 	clz	r0, r0
 800da6a:	0940      	lsrs	r0, r0, #5
 800da6c:	bd10      	pop	{r4, pc}
 800da6e:	2004      	movs	r0, #4
 800da70:	e7fc      	b.n	800da6c <__fpclassifyd+0x34>
 800da72:	2003      	movs	r0, #3
 800da74:	e7fa      	b.n	800da6c <__fpclassifyd+0x34>
 800da76:	2000      	movs	r0, #0
 800da78:	e7f8      	b.n	800da6c <__fpclassifyd+0x34>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	d1ee      	bne.n	800da5c <__fpclassifyd+0x24>
 800da7e:	2002      	movs	r0, #2
 800da80:	e7f4      	b.n	800da6c <__fpclassifyd+0x34>
 800da82:	bf00      	nop
 800da84:	7fdfffff 	.word	0x7fdfffff
 800da88:	7ff00000 	.word	0x7ff00000

0800da8c <__ieee754_sqrt>:
 800da8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da90:	4a68      	ldr	r2, [pc, #416]	@ (800dc34 <__ieee754_sqrt+0x1a8>)
 800da92:	ec55 4b10 	vmov	r4, r5, d0
 800da96:	43aa      	bics	r2, r5
 800da98:	462b      	mov	r3, r5
 800da9a:	4621      	mov	r1, r4
 800da9c:	d110      	bne.n	800dac0 <__ieee754_sqrt+0x34>
 800da9e:	4622      	mov	r2, r4
 800daa0:	4620      	mov	r0, r4
 800daa2:	4629      	mov	r1, r5
 800daa4:	f7f2 fda8 	bl	80005f8 <__aeabi_dmul>
 800daa8:	4602      	mov	r2, r0
 800daaa:	460b      	mov	r3, r1
 800daac:	4620      	mov	r0, r4
 800daae:	4629      	mov	r1, r5
 800dab0:	f7f2 fbec 	bl	800028c <__adddf3>
 800dab4:	4604      	mov	r4, r0
 800dab6:	460d      	mov	r5, r1
 800dab8:	ec45 4b10 	vmov	d0, r4, r5
 800dabc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac0:	2d00      	cmp	r5, #0
 800dac2:	dc0e      	bgt.n	800dae2 <__ieee754_sqrt+0x56>
 800dac4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800dac8:	4322      	orrs	r2, r4
 800daca:	d0f5      	beq.n	800dab8 <__ieee754_sqrt+0x2c>
 800dacc:	b19d      	cbz	r5, 800daf6 <__ieee754_sqrt+0x6a>
 800dace:	4622      	mov	r2, r4
 800dad0:	4620      	mov	r0, r4
 800dad2:	4629      	mov	r1, r5
 800dad4:	f7f2 fbd8 	bl	8000288 <__aeabi_dsub>
 800dad8:	4602      	mov	r2, r0
 800dada:	460b      	mov	r3, r1
 800dadc:	f7f2 feb6 	bl	800084c <__aeabi_ddiv>
 800dae0:	e7e8      	b.n	800dab4 <__ieee754_sqrt+0x28>
 800dae2:	152a      	asrs	r2, r5, #20
 800dae4:	d115      	bne.n	800db12 <__ieee754_sqrt+0x86>
 800dae6:	2000      	movs	r0, #0
 800dae8:	e009      	b.n	800dafe <__ieee754_sqrt+0x72>
 800daea:	0acb      	lsrs	r3, r1, #11
 800daec:	3a15      	subs	r2, #21
 800daee:	0549      	lsls	r1, r1, #21
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d0fa      	beq.n	800daea <__ieee754_sqrt+0x5e>
 800daf4:	e7f7      	b.n	800dae6 <__ieee754_sqrt+0x5a>
 800daf6:	462a      	mov	r2, r5
 800daf8:	e7fa      	b.n	800daf0 <__ieee754_sqrt+0x64>
 800dafa:	005b      	lsls	r3, r3, #1
 800dafc:	3001      	adds	r0, #1
 800dafe:	02dc      	lsls	r4, r3, #11
 800db00:	d5fb      	bpl.n	800dafa <__ieee754_sqrt+0x6e>
 800db02:	1e44      	subs	r4, r0, #1
 800db04:	1b12      	subs	r2, r2, r4
 800db06:	f1c0 0420 	rsb	r4, r0, #32
 800db0a:	fa21 f404 	lsr.w	r4, r1, r4
 800db0e:	4323      	orrs	r3, r4
 800db10:	4081      	lsls	r1, r0
 800db12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db16:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800db1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800db1e:	07d2      	lsls	r2, r2, #31
 800db20:	bf5c      	itt	pl
 800db22:	005b      	lslpl	r3, r3, #1
 800db24:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800db28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800db2c:	bf58      	it	pl
 800db2e:	0049      	lslpl	r1, r1, #1
 800db30:	2600      	movs	r6, #0
 800db32:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800db36:	106d      	asrs	r5, r5, #1
 800db38:	0049      	lsls	r1, r1, #1
 800db3a:	2016      	movs	r0, #22
 800db3c:	4632      	mov	r2, r6
 800db3e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800db42:	1917      	adds	r7, r2, r4
 800db44:	429f      	cmp	r7, r3
 800db46:	bfde      	ittt	le
 800db48:	193a      	addle	r2, r7, r4
 800db4a:	1bdb      	suble	r3, r3, r7
 800db4c:	1936      	addle	r6, r6, r4
 800db4e:	0fcf      	lsrs	r7, r1, #31
 800db50:	3801      	subs	r0, #1
 800db52:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800db56:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800db5a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800db5e:	d1f0      	bne.n	800db42 <__ieee754_sqrt+0xb6>
 800db60:	4604      	mov	r4, r0
 800db62:	2720      	movs	r7, #32
 800db64:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800db68:	429a      	cmp	r2, r3
 800db6a:	eb00 0e0c 	add.w	lr, r0, ip
 800db6e:	db02      	blt.n	800db76 <__ieee754_sqrt+0xea>
 800db70:	d113      	bne.n	800db9a <__ieee754_sqrt+0x10e>
 800db72:	458e      	cmp	lr, r1
 800db74:	d811      	bhi.n	800db9a <__ieee754_sqrt+0x10e>
 800db76:	f1be 0f00 	cmp.w	lr, #0
 800db7a:	eb0e 000c 	add.w	r0, lr, ip
 800db7e:	da42      	bge.n	800dc06 <__ieee754_sqrt+0x17a>
 800db80:	2800      	cmp	r0, #0
 800db82:	db40      	blt.n	800dc06 <__ieee754_sqrt+0x17a>
 800db84:	f102 0801 	add.w	r8, r2, #1
 800db88:	1a9b      	subs	r3, r3, r2
 800db8a:	458e      	cmp	lr, r1
 800db8c:	bf88      	it	hi
 800db8e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800db92:	eba1 010e 	sub.w	r1, r1, lr
 800db96:	4464      	add	r4, ip
 800db98:	4642      	mov	r2, r8
 800db9a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800db9e:	3f01      	subs	r7, #1
 800dba0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800dba4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dba8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800dbac:	d1dc      	bne.n	800db68 <__ieee754_sqrt+0xdc>
 800dbae:	4319      	orrs	r1, r3
 800dbb0:	d01b      	beq.n	800dbea <__ieee754_sqrt+0x15e>
 800dbb2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800dc38 <__ieee754_sqrt+0x1ac>
 800dbb6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800dc3c <__ieee754_sqrt+0x1b0>
 800dbba:	e9da 0100 	ldrd	r0, r1, [sl]
 800dbbe:	e9db 2300 	ldrd	r2, r3, [fp]
 800dbc2:	f7f2 fb61 	bl	8000288 <__aeabi_dsub>
 800dbc6:	e9da 8900 	ldrd	r8, r9, [sl]
 800dbca:	4602      	mov	r2, r0
 800dbcc:	460b      	mov	r3, r1
 800dbce:	4640      	mov	r0, r8
 800dbd0:	4649      	mov	r1, r9
 800dbd2:	f7f2 ff8d 	bl	8000af0 <__aeabi_dcmple>
 800dbd6:	b140      	cbz	r0, 800dbea <__ieee754_sqrt+0x15e>
 800dbd8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dbdc:	e9da 0100 	ldrd	r0, r1, [sl]
 800dbe0:	e9db 2300 	ldrd	r2, r3, [fp]
 800dbe4:	d111      	bne.n	800dc0a <__ieee754_sqrt+0x17e>
 800dbe6:	3601      	adds	r6, #1
 800dbe8:	463c      	mov	r4, r7
 800dbea:	1072      	asrs	r2, r6, #1
 800dbec:	0863      	lsrs	r3, r4, #1
 800dbee:	07f1      	lsls	r1, r6, #31
 800dbf0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800dbf4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800dbf8:	bf48      	it	mi
 800dbfa:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800dbfe:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800dc02:	4618      	mov	r0, r3
 800dc04:	e756      	b.n	800dab4 <__ieee754_sqrt+0x28>
 800dc06:	4690      	mov	r8, r2
 800dc08:	e7be      	b.n	800db88 <__ieee754_sqrt+0xfc>
 800dc0a:	f7f2 fb3f 	bl	800028c <__adddf3>
 800dc0e:	e9da 8900 	ldrd	r8, r9, [sl]
 800dc12:	4602      	mov	r2, r0
 800dc14:	460b      	mov	r3, r1
 800dc16:	4640      	mov	r0, r8
 800dc18:	4649      	mov	r1, r9
 800dc1a:	f7f2 ff5f 	bl	8000adc <__aeabi_dcmplt>
 800dc1e:	b120      	cbz	r0, 800dc2a <__ieee754_sqrt+0x19e>
 800dc20:	1ca0      	adds	r0, r4, #2
 800dc22:	bf08      	it	eq
 800dc24:	3601      	addeq	r6, #1
 800dc26:	3402      	adds	r4, #2
 800dc28:	e7df      	b.n	800dbea <__ieee754_sqrt+0x15e>
 800dc2a:	1c63      	adds	r3, r4, #1
 800dc2c:	f023 0401 	bic.w	r4, r3, #1
 800dc30:	e7db      	b.n	800dbea <__ieee754_sqrt+0x15e>
 800dc32:	bf00      	nop
 800dc34:	7ff00000 	.word	0x7ff00000
 800dc38:	200002a8 	.word	0x200002a8
 800dc3c:	200002a0 	.word	0x200002a0

0800dc40 <__kernel_cos>:
 800dc40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc44:	ec57 6b10 	vmov	r6, r7, d0
 800dc48:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800dc4c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800dc50:	ed8d 1b00 	vstr	d1, [sp]
 800dc54:	d206      	bcs.n	800dc64 <__kernel_cos+0x24>
 800dc56:	4630      	mov	r0, r6
 800dc58:	4639      	mov	r1, r7
 800dc5a:	f7f2 ff7d 	bl	8000b58 <__aeabi_d2iz>
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	f000 8088 	beq.w	800dd74 <__kernel_cos+0x134>
 800dc64:	4632      	mov	r2, r6
 800dc66:	463b      	mov	r3, r7
 800dc68:	4630      	mov	r0, r6
 800dc6a:	4639      	mov	r1, r7
 800dc6c:	f7f2 fcc4 	bl	80005f8 <__aeabi_dmul>
 800dc70:	4b51      	ldr	r3, [pc, #324]	@ (800ddb8 <__kernel_cos+0x178>)
 800dc72:	2200      	movs	r2, #0
 800dc74:	4604      	mov	r4, r0
 800dc76:	460d      	mov	r5, r1
 800dc78:	f7f2 fcbe 	bl	80005f8 <__aeabi_dmul>
 800dc7c:	a340      	add	r3, pc, #256	@ (adr r3, 800dd80 <__kernel_cos+0x140>)
 800dc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc82:	4682      	mov	sl, r0
 800dc84:	468b      	mov	fp, r1
 800dc86:	4620      	mov	r0, r4
 800dc88:	4629      	mov	r1, r5
 800dc8a:	f7f2 fcb5 	bl	80005f8 <__aeabi_dmul>
 800dc8e:	a33e      	add	r3, pc, #248	@ (adr r3, 800dd88 <__kernel_cos+0x148>)
 800dc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc94:	f7f2 fafa 	bl	800028c <__adddf3>
 800dc98:	4622      	mov	r2, r4
 800dc9a:	462b      	mov	r3, r5
 800dc9c:	f7f2 fcac 	bl	80005f8 <__aeabi_dmul>
 800dca0:	a33b      	add	r3, pc, #236	@ (adr r3, 800dd90 <__kernel_cos+0x150>)
 800dca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca6:	f7f2 faef 	bl	8000288 <__aeabi_dsub>
 800dcaa:	4622      	mov	r2, r4
 800dcac:	462b      	mov	r3, r5
 800dcae:	f7f2 fca3 	bl	80005f8 <__aeabi_dmul>
 800dcb2:	a339      	add	r3, pc, #228	@ (adr r3, 800dd98 <__kernel_cos+0x158>)
 800dcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb8:	f7f2 fae8 	bl	800028c <__adddf3>
 800dcbc:	4622      	mov	r2, r4
 800dcbe:	462b      	mov	r3, r5
 800dcc0:	f7f2 fc9a 	bl	80005f8 <__aeabi_dmul>
 800dcc4:	a336      	add	r3, pc, #216	@ (adr r3, 800dda0 <__kernel_cos+0x160>)
 800dcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcca:	f7f2 fadd 	bl	8000288 <__aeabi_dsub>
 800dcce:	4622      	mov	r2, r4
 800dcd0:	462b      	mov	r3, r5
 800dcd2:	f7f2 fc91 	bl	80005f8 <__aeabi_dmul>
 800dcd6:	a334      	add	r3, pc, #208	@ (adr r3, 800dda8 <__kernel_cos+0x168>)
 800dcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcdc:	f7f2 fad6 	bl	800028c <__adddf3>
 800dce0:	4622      	mov	r2, r4
 800dce2:	462b      	mov	r3, r5
 800dce4:	f7f2 fc88 	bl	80005f8 <__aeabi_dmul>
 800dce8:	4622      	mov	r2, r4
 800dcea:	462b      	mov	r3, r5
 800dcec:	f7f2 fc84 	bl	80005f8 <__aeabi_dmul>
 800dcf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcf4:	4604      	mov	r4, r0
 800dcf6:	460d      	mov	r5, r1
 800dcf8:	4630      	mov	r0, r6
 800dcfa:	4639      	mov	r1, r7
 800dcfc:	f7f2 fc7c 	bl	80005f8 <__aeabi_dmul>
 800dd00:	460b      	mov	r3, r1
 800dd02:	4602      	mov	r2, r0
 800dd04:	4629      	mov	r1, r5
 800dd06:	4620      	mov	r0, r4
 800dd08:	f7f2 fabe 	bl	8000288 <__aeabi_dsub>
 800dd0c:	4b2b      	ldr	r3, [pc, #172]	@ (800ddbc <__kernel_cos+0x17c>)
 800dd0e:	4598      	cmp	r8, r3
 800dd10:	4606      	mov	r6, r0
 800dd12:	460f      	mov	r7, r1
 800dd14:	d810      	bhi.n	800dd38 <__kernel_cos+0xf8>
 800dd16:	4602      	mov	r2, r0
 800dd18:	460b      	mov	r3, r1
 800dd1a:	4650      	mov	r0, sl
 800dd1c:	4659      	mov	r1, fp
 800dd1e:	f7f2 fab3 	bl	8000288 <__aeabi_dsub>
 800dd22:	460b      	mov	r3, r1
 800dd24:	4926      	ldr	r1, [pc, #152]	@ (800ddc0 <__kernel_cos+0x180>)
 800dd26:	4602      	mov	r2, r0
 800dd28:	2000      	movs	r0, #0
 800dd2a:	f7f2 faad 	bl	8000288 <__aeabi_dsub>
 800dd2e:	ec41 0b10 	vmov	d0, r0, r1
 800dd32:	b003      	add	sp, #12
 800dd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd38:	4b22      	ldr	r3, [pc, #136]	@ (800ddc4 <__kernel_cos+0x184>)
 800dd3a:	4921      	ldr	r1, [pc, #132]	@ (800ddc0 <__kernel_cos+0x180>)
 800dd3c:	4598      	cmp	r8, r3
 800dd3e:	bf8c      	ite	hi
 800dd40:	4d21      	ldrhi	r5, [pc, #132]	@ (800ddc8 <__kernel_cos+0x188>)
 800dd42:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800dd46:	2400      	movs	r4, #0
 800dd48:	4622      	mov	r2, r4
 800dd4a:	462b      	mov	r3, r5
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	f7f2 fa9b 	bl	8000288 <__aeabi_dsub>
 800dd52:	4622      	mov	r2, r4
 800dd54:	4680      	mov	r8, r0
 800dd56:	4689      	mov	r9, r1
 800dd58:	462b      	mov	r3, r5
 800dd5a:	4650      	mov	r0, sl
 800dd5c:	4659      	mov	r1, fp
 800dd5e:	f7f2 fa93 	bl	8000288 <__aeabi_dsub>
 800dd62:	4632      	mov	r2, r6
 800dd64:	463b      	mov	r3, r7
 800dd66:	f7f2 fa8f 	bl	8000288 <__aeabi_dsub>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	4640      	mov	r0, r8
 800dd70:	4649      	mov	r1, r9
 800dd72:	e7da      	b.n	800dd2a <__kernel_cos+0xea>
 800dd74:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800ddb0 <__kernel_cos+0x170>
 800dd78:	e7db      	b.n	800dd32 <__kernel_cos+0xf2>
 800dd7a:	bf00      	nop
 800dd7c:	f3af 8000 	nop.w
 800dd80:	be8838d4 	.word	0xbe8838d4
 800dd84:	bda8fae9 	.word	0xbda8fae9
 800dd88:	bdb4b1c4 	.word	0xbdb4b1c4
 800dd8c:	3e21ee9e 	.word	0x3e21ee9e
 800dd90:	809c52ad 	.word	0x809c52ad
 800dd94:	3e927e4f 	.word	0x3e927e4f
 800dd98:	19cb1590 	.word	0x19cb1590
 800dd9c:	3efa01a0 	.word	0x3efa01a0
 800dda0:	16c15177 	.word	0x16c15177
 800dda4:	3f56c16c 	.word	0x3f56c16c
 800dda8:	5555554c 	.word	0x5555554c
 800ddac:	3fa55555 	.word	0x3fa55555
 800ddb0:	00000000 	.word	0x00000000
 800ddb4:	3ff00000 	.word	0x3ff00000
 800ddb8:	3fe00000 	.word	0x3fe00000
 800ddbc:	3fd33332 	.word	0x3fd33332
 800ddc0:	3ff00000 	.word	0x3ff00000
 800ddc4:	3fe90000 	.word	0x3fe90000
 800ddc8:	3fd20000 	.word	0x3fd20000
 800ddcc:	00000000 	.word	0x00000000

0800ddd0 <__kernel_sin>:
 800ddd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd4:	ec55 4b10 	vmov	r4, r5, d0
 800ddd8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800dddc:	b085      	sub	sp, #20
 800ddde:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800dde2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800dde6:	4680      	mov	r8, r0
 800dde8:	d205      	bcs.n	800ddf6 <__kernel_sin+0x26>
 800ddea:	4620      	mov	r0, r4
 800ddec:	4629      	mov	r1, r5
 800ddee:	f7f2 feb3 	bl	8000b58 <__aeabi_d2iz>
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	d052      	beq.n	800de9c <__kernel_sin+0xcc>
 800ddf6:	4622      	mov	r2, r4
 800ddf8:	462b      	mov	r3, r5
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	4629      	mov	r1, r5
 800ddfe:	f7f2 fbfb 	bl	80005f8 <__aeabi_dmul>
 800de02:	4682      	mov	sl, r0
 800de04:	468b      	mov	fp, r1
 800de06:	4602      	mov	r2, r0
 800de08:	460b      	mov	r3, r1
 800de0a:	4620      	mov	r0, r4
 800de0c:	4629      	mov	r1, r5
 800de0e:	f7f2 fbf3 	bl	80005f8 <__aeabi_dmul>
 800de12:	a342      	add	r3, pc, #264	@ (adr r3, 800df1c <__kernel_sin+0x14c>)
 800de14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de18:	e9cd 0100 	strd	r0, r1, [sp]
 800de1c:	4650      	mov	r0, sl
 800de1e:	4659      	mov	r1, fp
 800de20:	f7f2 fbea 	bl	80005f8 <__aeabi_dmul>
 800de24:	a33f      	add	r3, pc, #252	@ (adr r3, 800df24 <__kernel_sin+0x154>)
 800de26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2a:	f7f2 fa2d 	bl	8000288 <__aeabi_dsub>
 800de2e:	4652      	mov	r2, sl
 800de30:	465b      	mov	r3, fp
 800de32:	f7f2 fbe1 	bl	80005f8 <__aeabi_dmul>
 800de36:	a33d      	add	r3, pc, #244	@ (adr r3, 800df2c <__kernel_sin+0x15c>)
 800de38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3c:	f7f2 fa26 	bl	800028c <__adddf3>
 800de40:	4652      	mov	r2, sl
 800de42:	465b      	mov	r3, fp
 800de44:	f7f2 fbd8 	bl	80005f8 <__aeabi_dmul>
 800de48:	a33a      	add	r3, pc, #232	@ (adr r3, 800df34 <__kernel_sin+0x164>)
 800de4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4e:	f7f2 fa1b 	bl	8000288 <__aeabi_dsub>
 800de52:	4652      	mov	r2, sl
 800de54:	465b      	mov	r3, fp
 800de56:	f7f2 fbcf 	bl	80005f8 <__aeabi_dmul>
 800de5a:	a338      	add	r3, pc, #224	@ (adr r3, 800df3c <__kernel_sin+0x16c>)
 800de5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de60:	f7f2 fa14 	bl	800028c <__adddf3>
 800de64:	4606      	mov	r6, r0
 800de66:	460f      	mov	r7, r1
 800de68:	f1b8 0f00 	cmp.w	r8, #0
 800de6c:	d11b      	bne.n	800dea6 <__kernel_sin+0xd6>
 800de6e:	4602      	mov	r2, r0
 800de70:	460b      	mov	r3, r1
 800de72:	4650      	mov	r0, sl
 800de74:	4659      	mov	r1, fp
 800de76:	f7f2 fbbf 	bl	80005f8 <__aeabi_dmul>
 800de7a:	a325      	add	r3, pc, #148	@ (adr r3, 800df10 <__kernel_sin+0x140>)
 800de7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de80:	f7f2 fa02 	bl	8000288 <__aeabi_dsub>
 800de84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de88:	f7f2 fbb6 	bl	80005f8 <__aeabi_dmul>
 800de8c:	4602      	mov	r2, r0
 800de8e:	460b      	mov	r3, r1
 800de90:	4620      	mov	r0, r4
 800de92:	4629      	mov	r1, r5
 800de94:	f7f2 f9fa 	bl	800028c <__adddf3>
 800de98:	4604      	mov	r4, r0
 800de9a:	460d      	mov	r5, r1
 800de9c:	ec45 4b10 	vmov	d0, r4, r5
 800dea0:	b005      	add	sp, #20
 800dea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800deaa:	4b1b      	ldr	r3, [pc, #108]	@ (800df18 <__kernel_sin+0x148>)
 800deac:	2200      	movs	r2, #0
 800deae:	f7f2 fba3 	bl	80005f8 <__aeabi_dmul>
 800deb2:	4632      	mov	r2, r6
 800deb4:	4680      	mov	r8, r0
 800deb6:	4689      	mov	r9, r1
 800deb8:	463b      	mov	r3, r7
 800deba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800debe:	f7f2 fb9b 	bl	80005f8 <__aeabi_dmul>
 800dec2:	4602      	mov	r2, r0
 800dec4:	460b      	mov	r3, r1
 800dec6:	4640      	mov	r0, r8
 800dec8:	4649      	mov	r1, r9
 800deca:	f7f2 f9dd 	bl	8000288 <__aeabi_dsub>
 800dece:	4652      	mov	r2, sl
 800ded0:	465b      	mov	r3, fp
 800ded2:	f7f2 fb91 	bl	80005f8 <__aeabi_dmul>
 800ded6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800deda:	f7f2 f9d5 	bl	8000288 <__aeabi_dsub>
 800dede:	a30c      	add	r3, pc, #48	@ (adr r3, 800df10 <__kernel_sin+0x140>)
 800dee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee4:	4606      	mov	r6, r0
 800dee6:	460f      	mov	r7, r1
 800dee8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800deec:	f7f2 fb84 	bl	80005f8 <__aeabi_dmul>
 800def0:	4602      	mov	r2, r0
 800def2:	460b      	mov	r3, r1
 800def4:	4630      	mov	r0, r6
 800def6:	4639      	mov	r1, r7
 800def8:	f7f2 f9c8 	bl	800028c <__adddf3>
 800defc:	4602      	mov	r2, r0
 800defe:	460b      	mov	r3, r1
 800df00:	4620      	mov	r0, r4
 800df02:	4629      	mov	r1, r5
 800df04:	f7f2 f9c0 	bl	8000288 <__aeabi_dsub>
 800df08:	e7c6      	b.n	800de98 <__kernel_sin+0xc8>
 800df0a:	bf00      	nop
 800df0c:	f3af 8000 	nop.w
 800df10:	55555549 	.word	0x55555549
 800df14:	3fc55555 	.word	0x3fc55555
 800df18:	3fe00000 	.word	0x3fe00000
 800df1c:	5acfd57c 	.word	0x5acfd57c
 800df20:	3de5d93a 	.word	0x3de5d93a
 800df24:	8a2b9ceb 	.word	0x8a2b9ceb
 800df28:	3e5ae5e6 	.word	0x3e5ae5e6
 800df2c:	57b1fe7d 	.word	0x57b1fe7d
 800df30:	3ec71de3 	.word	0x3ec71de3
 800df34:	19c161d5 	.word	0x19c161d5
 800df38:	3f2a01a0 	.word	0x3f2a01a0
 800df3c:	1110f8a6 	.word	0x1110f8a6
 800df40:	3f811111 	.word	0x3f811111
 800df44:	00000000 	.word	0x00000000

0800df48 <__ieee754_atan2>:
 800df48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df4c:	ec57 6b11 	vmov	r6, r7, d1
 800df50:	4273      	negs	r3, r6
 800df52:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e0d0 <__ieee754_atan2+0x188>
 800df56:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800df5a:	4333      	orrs	r3, r6
 800df5c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800df60:	4543      	cmp	r3, r8
 800df62:	ec51 0b10 	vmov	r0, r1, d0
 800df66:	4635      	mov	r5, r6
 800df68:	d809      	bhi.n	800df7e <__ieee754_atan2+0x36>
 800df6a:	4244      	negs	r4, r0
 800df6c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800df70:	4304      	orrs	r4, r0
 800df72:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800df76:	4544      	cmp	r4, r8
 800df78:	468e      	mov	lr, r1
 800df7a:	4681      	mov	r9, r0
 800df7c:	d907      	bls.n	800df8e <__ieee754_atan2+0x46>
 800df7e:	4632      	mov	r2, r6
 800df80:	463b      	mov	r3, r7
 800df82:	f7f2 f983 	bl	800028c <__adddf3>
 800df86:	ec41 0b10 	vmov	d0, r0, r1
 800df8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df8e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800df92:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800df96:	4334      	orrs	r4, r6
 800df98:	d103      	bne.n	800dfa2 <__ieee754_atan2+0x5a>
 800df9a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df9e:	f000 bbab 	b.w	800e6f8 <atan>
 800dfa2:	17bc      	asrs	r4, r7, #30
 800dfa4:	f004 0402 	and.w	r4, r4, #2
 800dfa8:	ea53 0909 	orrs.w	r9, r3, r9
 800dfac:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800dfb0:	d107      	bne.n	800dfc2 <__ieee754_atan2+0x7a>
 800dfb2:	2c02      	cmp	r4, #2
 800dfb4:	d05f      	beq.n	800e076 <__ieee754_atan2+0x12e>
 800dfb6:	2c03      	cmp	r4, #3
 800dfb8:	d1e5      	bne.n	800df86 <__ieee754_atan2+0x3e>
 800dfba:	a141      	add	r1, pc, #260	@ (adr r1, 800e0c0 <__ieee754_atan2+0x178>)
 800dfbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfc0:	e7e1      	b.n	800df86 <__ieee754_atan2+0x3e>
 800dfc2:	4315      	orrs	r5, r2
 800dfc4:	d106      	bne.n	800dfd4 <__ieee754_atan2+0x8c>
 800dfc6:	f1be 0f00 	cmp.w	lr, #0
 800dfca:	da5f      	bge.n	800e08c <__ieee754_atan2+0x144>
 800dfcc:	a13e      	add	r1, pc, #248	@ (adr r1, 800e0c8 <__ieee754_atan2+0x180>)
 800dfce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfd2:	e7d8      	b.n	800df86 <__ieee754_atan2+0x3e>
 800dfd4:	4542      	cmp	r2, r8
 800dfd6:	d10f      	bne.n	800dff8 <__ieee754_atan2+0xb0>
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	f104 34ff 	add.w	r4, r4, #4294967295
 800dfde:	d107      	bne.n	800dff0 <__ieee754_atan2+0xa8>
 800dfe0:	2c02      	cmp	r4, #2
 800dfe2:	d84c      	bhi.n	800e07e <__ieee754_atan2+0x136>
 800dfe4:	4b34      	ldr	r3, [pc, #208]	@ (800e0b8 <__ieee754_atan2+0x170>)
 800dfe6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dfea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dfee:	e7ca      	b.n	800df86 <__ieee754_atan2+0x3e>
 800dff0:	2c02      	cmp	r4, #2
 800dff2:	d848      	bhi.n	800e086 <__ieee754_atan2+0x13e>
 800dff4:	4b31      	ldr	r3, [pc, #196]	@ (800e0bc <__ieee754_atan2+0x174>)
 800dff6:	e7f6      	b.n	800dfe6 <__ieee754_atan2+0x9e>
 800dff8:	4543      	cmp	r3, r8
 800dffa:	d0e4      	beq.n	800dfc6 <__ieee754_atan2+0x7e>
 800dffc:	1a9b      	subs	r3, r3, r2
 800dffe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e002:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e006:	da1e      	bge.n	800e046 <__ieee754_atan2+0xfe>
 800e008:	2f00      	cmp	r7, #0
 800e00a:	da01      	bge.n	800e010 <__ieee754_atan2+0xc8>
 800e00c:	323c      	adds	r2, #60	@ 0x3c
 800e00e:	db1e      	blt.n	800e04e <__ieee754_atan2+0x106>
 800e010:	4632      	mov	r2, r6
 800e012:	463b      	mov	r3, r7
 800e014:	f7f2 fc1a 	bl	800084c <__aeabi_ddiv>
 800e018:	ec41 0b10 	vmov	d0, r0, r1
 800e01c:	f000 fd04 	bl	800ea28 <fabs>
 800e020:	f000 fb6a 	bl	800e6f8 <atan>
 800e024:	ec51 0b10 	vmov	r0, r1, d0
 800e028:	2c01      	cmp	r4, #1
 800e02a:	d013      	beq.n	800e054 <__ieee754_atan2+0x10c>
 800e02c:	2c02      	cmp	r4, #2
 800e02e:	d015      	beq.n	800e05c <__ieee754_atan2+0x114>
 800e030:	2c00      	cmp	r4, #0
 800e032:	d0a8      	beq.n	800df86 <__ieee754_atan2+0x3e>
 800e034:	a318      	add	r3, pc, #96	@ (adr r3, 800e098 <__ieee754_atan2+0x150>)
 800e036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03a:	f7f2 f925 	bl	8000288 <__aeabi_dsub>
 800e03e:	a318      	add	r3, pc, #96	@ (adr r3, 800e0a0 <__ieee754_atan2+0x158>)
 800e040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e044:	e014      	b.n	800e070 <__ieee754_atan2+0x128>
 800e046:	a118      	add	r1, pc, #96	@ (adr r1, 800e0a8 <__ieee754_atan2+0x160>)
 800e048:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e04c:	e7ec      	b.n	800e028 <__ieee754_atan2+0xe0>
 800e04e:	2000      	movs	r0, #0
 800e050:	2100      	movs	r1, #0
 800e052:	e7e9      	b.n	800e028 <__ieee754_atan2+0xe0>
 800e054:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e058:	4619      	mov	r1, r3
 800e05a:	e794      	b.n	800df86 <__ieee754_atan2+0x3e>
 800e05c:	a30e      	add	r3, pc, #56	@ (adr r3, 800e098 <__ieee754_atan2+0x150>)
 800e05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e062:	f7f2 f911 	bl	8000288 <__aeabi_dsub>
 800e066:	4602      	mov	r2, r0
 800e068:	460b      	mov	r3, r1
 800e06a:	a10d      	add	r1, pc, #52	@ (adr r1, 800e0a0 <__ieee754_atan2+0x158>)
 800e06c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e070:	f7f2 f90a 	bl	8000288 <__aeabi_dsub>
 800e074:	e787      	b.n	800df86 <__ieee754_atan2+0x3e>
 800e076:	a10a      	add	r1, pc, #40	@ (adr r1, 800e0a0 <__ieee754_atan2+0x158>)
 800e078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e07c:	e783      	b.n	800df86 <__ieee754_atan2+0x3e>
 800e07e:	a10c      	add	r1, pc, #48	@ (adr r1, 800e0b0 <__ieee754_atan2+0x168>)
 800e080:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e084:	e77f      	b.n	800df86 <__ieee754_atan2+0x3e>
 800e086:	2000      	movs	r0, #0
 800e088:	2100      	movs	r1, #0
 800e08a:	e77c      	b.n	800df86 <__ieee754_atan2+0x3e>
 800e08c:	a106      	add	r1, pc, #24	@ (adr r1, 800e0a8 <__ieee754_atan2+0x160>)
 800e08e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e092:	e778      	b.n	800df86 <__ieee754_atan2+0x3e>
 800e094:	f3af 8000 	nop.w
 800e098:	33145c07 	.word	0x33145c07
 800e09c:	3ca1a626 	.word	0x3ca1a626
 800e0a0:	54442d18 	.word	0x54442d18
 800e0a4:	400921fb 	.word	0x400921fb
 800e0a8:	54442d18 	.word	0x54442d18
 800e0ac:	3ff921fb 	.word	0x3ff921fb
 800e0b0:	54442d18 	.word	0x54442d18
 800e0b4:	3fe921fb 	.word	0x3fe921fb
 800e0b8:	0800f960 	.word	0x0800f960
 800e0bc:	0800f948 	.word	0x0800f948
 800e0c0:	54442d18 	.word	0x54442d18
 800e0c4:	c00921fb 	.word	0xc00921fb
 800e0c8:	54442d18 	.word	0x54442d18
 800e0cc:	bff921fb 	.word	0xbff921fb
 800e0d0:	7ff00000 	.word	0x7ff00000

0800e0d4 <__ieee754_hypot>:
 800e0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d8:	ec51 0b10 	vmov	r0, r1, d0
 800e0dc:	ec53 2b11 	vmov	r2, r3, d1
 800e0e0:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800e0e4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800e0e8:	42a5      	cmp	r5, r4
 800e0ea:	b087      	sub	sp, #28
 800e0ec:	da05      	bge.n	800e0fa <__ieee754_hypot+0x26>
 800e0ee:	462e      	mov	r6, r5
 800e0f0:	4625      	mov	r5, r4
 800e0f2:	4634      	mov	r4, r6
 800e0f4:	4606      	mov	r6, r0
 800e0f6:	4610      	mov	r0, r2
 800e0f8:	4632      	mov	r2, r6
 800e0fa:	1b2b      	subs	r3, r5, r4
 800e0fc:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800e100:	4629      	mov	r1, r5
 800e102:	4682      	mov	sl, r0
 800e104:	46ab      	mov	fp, r5
 800e106:	4616      	mov	r6, r2
 800e108:	4627      	mov	r7, r4
 800e10a:	dd05      	ble.n	800e118 <__ieee754_hypot+0x44>
 800e10c:	4623      	mov	r3, r4
 800e10e:	f7f2 f8bd 	bl	800028c <__adddf3>
 800e112:	4682      	mov	sl, r0
 800e114:	468b      	mov	fp, r1
 800e116:	e016      	b.n	800e146 <__ieee754_hypot+0x72>
 800e118:	4b75      	ldr	r3, [pc, #468]	@ (800e2f0 <__ieee754_hypot+0x21c>)
 800e11a:	429d      	cmp	r5, r3
 800e11c:	f340 8096 	ble.w	800e24c <__ieee754_hypot+0x178>
 800e120:	4b74      	ldr	r3, [pc, #464]	@ (800e2f4 <__ieee754_hypot+0x220>)
 800e122:	429d      	cmp	r5, r3
 800e124:	dd14      	ble.n	800e150 <__ieee754_hypot+0x7c>
 800e126:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e12a:	4305      	orrs	r5, r0
 800e12c:	d004      	beq.n	800e138 <__ieee754_hypot+0x64>
 800e12e:	4623      	mov	r3, r4
 800e130:	f7f2 f8ac 	bl	800028c <__adddf3>
 800e134:	4682      	mov	sl, r0
 800e136:	468b      	mov	fp, r1
 800e138:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800e13c:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800e140:	4334      	orrs	r4, r6
 800e142:	f000 80d2 	beq.w	800e2ea <__ieee754_hypot+0x216>
 800e146:	ec4b ab10 	vmov	d0, sl, fp
 800e14a:	b007      	add	sp, #28
 800e14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e150:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800e154:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800e158:	46ab      	mov	fp, r5
 800e15a:	4627      	mov	r7, r4
 800e15c:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	4b65      	ldr	r3, [pc, #404]	@ (800e2f8 <__ieee754_hypot+0x224>)
 800e164:	429c      	cmp	r4, r3
 800e166:	dc19      	bgt.n	800e19c <__ieee754_hypot+0xc8>
 800e168:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800e16c:	da70      	bge.n	800e250 <__ieee754_hypot+0x17c>
 800e16e:	4633      	mov	r3, r6
 800e170:	4323      	orrs	r3, r4
 800e172:	d0e8      	beq.n	800e146 <__ieee754_hypot+0x72>
 800e174:	4b61      	ldr	r3, [pc, #388]	@ (800e2fc <__ieee754_hypot+0x228>)
 800e176:	2200      	movs	r2, #0
 800e178:	4630      	mov	r0, r6
 800e17a:	4639      	mov	r1, r7
 800e17c:	f7f2 fa3c 	bl	80005f8 <__aeabi_dmul>
 800e180:	4b5e      	ldr	r3, [pc, #376]	@ (800e2fc <__ieee754_hypot+0x228>)
 800e182:	4606      	mov	r6, r0
 800e184:	460f      	mov	r7, r1
 800e186:	4650      	mov	r0, sl
 800e188:	4659      	mov	r1, fp
 800e18a:	2200      	movs	r2, #0
 800e18c:	f7f2 fa34 	bl	80005f8 <__aeabi_dmul>
 800e190:	9b01      	ldr	r3, [sp, #4]
 800e192:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800e196:	4682      	mov	sl, r0
 800e198:	468b      	mov	fp, r1
 800e19a:	9301      	str	r3, [sp, #4]
 800e19c:	4632      	mov	r2, r6
 800e19e:	463b      	mov	r3, r7
 800e1a0:	4650      	mov	r0, sl
 800e1a2:	4659      	mov	r1, fp
 800e1a4:	f7f2 f870 	bl	8000288 <__aeabi_dsub>
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	4680      	mov	r8, r0
 800e1ae:	4689      	mov	r9, r1
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	4639      	mov	r1, r7
 800e1b4:	f7f2 fc92 	bl	8000adc <__aeabi_dcmplt>
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	d053      	beq.n	800e266 <__ieee754_hypot+0x192>
 800e1be:	462b      	mov	r3, r5
 800e1c0:	4610      	mov	r0, r2
 800e1c2:	4629      	mov	r1, r5
 800e1c4:	4614      	mov	r4, r2
 800e1c6:	f7f2 fa17 	bl	80005f8 <__aeabi_dmul>
 800e1ca:	4632      	mov	r2, r6
 800e1cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1d0:	463b      	mov	r3, r7
 800e1d2:	4630      	mov	r0, r6
 800e1d4:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800e1d8:	f7f2 fa0e 	bl	80005f8 <__aeabi_dmul>
 800e1dc:	4622      	mov	r2, r4
 800e1de:	4606      	mov	r6, r0
 800e1e0:	460f      	mov	r7, r1
 800e1e2:	462b      	mov	r3, r5
 800e1e4:	4650      	mov	r0, sl
 800e1e6:	4659      	mov	r1, fp
 800e1e8:	f7f2 f850 	bl	800028c <__adddf3>
 800e1ec:	4622      	mov	r2, r4
 800e1ee:	4680      	mov	r8, r0
 800e1f0:	4689      	mov	r9, r1
 800e1f2:	462b      	mov	r3, r5
 800e1f4:	4650      	mov	r0, sl
 800e1f6:	4659      	mov	r1, fp
 800e1f8:	f7f2 f846 	bl	8000288 <__aeabi_dsub>
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	460b      	mov	r3, r1
 800e200:	4640      	mov	r0, r8
 800e202:	4649      	mov	r1, r9
 800e204:	f7f2 f9f8 	bl	80005f8 <__aeabi_dmul>
 800e208:	4602      	mov	r2, r0
 800e20a:	460b      	mov	r3, r1
 800e20c:	4630      	mov	r0, r6
 800e20e:	4639      	mov	r1, r7
 800e210:	f7f2 f83a 	bl	8000288 <__aeabi_dsub>
 800e214:	4602      	mov	r2, r0
 800e216:	460b      	mov	r3, r1
 800e218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e21c:	f7f2 f834 	bl	8000288 <__aeabi_dsub>
 800e220:	ec41 0b10 	vmov	d0, r0, r1
 800e224:	f7ff fc32 	bl	800da8c <__ieee754_sqrt>
 800e228:	9b01      	ldr	r3, [sp, #4]
 800e22a:	ec5b ab10 	vmov	sl, fp, d0
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d089      	beq.n	800e146 <__ieee754_hypot+0x72>
 800e232:	051b      	lsls	r3, r3, #20
 800e234:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e238:	2000      	movs	r0, #0
 800e23a:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800e23e:	4602      	mov	r2, r0
 800e240:	460b      	mov	r3, r1
 800e242:	4650      	mov	r0, sl
 800e244:	4659      	mov	r1, fp
 800e246:	f7f2 f9d7 	bl	80005f8 <__aeabi_dmul>
 800e24a:	e762      	b.n	800e112 <__ieee754_hypot+0x3e>
 800e24c:	2300      	movs	r3, #0
 800e24e:	e787      	b.n	800e160 <__ieee754_hypot+0x8c>
 800e250:	9b01      	ldr	r3, [sp, #4]
 800e252:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800e256:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800e25a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800e25e:	9301      	str	r3, [sp, #4]
 800e260:	46ab      	mov	fp, r5
 800e262:	4627      	mov	r7, r4
 800e264:	e79a      	b.n	800e19c <__ieee754_hypot+0xc8>
 800e266:	4623      	mov	r3, r4
 800e268:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e26c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e270:	2200      	movs	r2, #0
 800e272:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800e276:	4614      	mov	r4, r2
 800e278:	461d      	mov	r5, r3
 800e27a:	f7f2 f9bd 	bl	80005f8 <__aeabi_dmul>
 800e27e:	4642      	mov	r2, r8
 800e280:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e284:	464b      	mov	r3, r9
 800e286:	4640      	mov	r0, r8
 800e288:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800e28c:	f7f2 f9b4 	bl	80005f8 <__aeabi_dmul>
 800e290:	4652      	mov	r2, sl
 800e292:	465b      	mov	r3, fp
 800e294:	4680      	mov	r8, r0
 800e296:	4689      	mov	r9, r1
 800e298:	4650      	mov	r0, sl
 800e29a:	4659      	mov	r1, fp
 800e29c:	f7f1 fff6 	bl	800028c <__adddf3>
 800e2a0:	4622      	mov	r2, r4
 800e2a2:	462b      	mov	r3, r5
 800e2a4:	f7f1 fff0 	bl	8000288 <__aeabi_dsub>
 800e2a8:	4632      	mov	r2, r6
 800e2aa:	463b      	mov	r3, r7
 800e2ac:	f7f2 f9a4 	bl	80005f8 <__aeabi_dmul>
 800e2b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2b4:	4682      	mov	sl, r0
 800e2b6:	468b      	mov	fp, r1
 800e2b8:	4630      	mov	r0, r6
 800e2ba:	4639      	mov	r1, r7
 800e2bc:	f7f1 ffe4 	bl	8000288 <__aeabi_dsub>
 800e2c0:	4622      	mov	r2, r4
 800e2c2:	462b      	mov	r3, r5
 800e2c4:	f7f2 f998 	bl	80005f8 <__aeabi_dmul>
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	4650      	mov	r0, sl
 800e2ce:	4659      	mov	r1, fp
 800e2d0:	f7f1 ffdc 	bl	800028c <__adddf3>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	4640      	mov	r0, r8
 800e2da:	4649      	mov	r1, r9
 800e2dc:	f7f1 ffd4 	bl	8000288 <__aeabi_dsub>
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	460b      	mov	r3, r1
 800e2e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2e8:	e798      	b.n	800e21c <__ieee754_hypot+0x148>
 800e2ea:	46b2      	mov	sl, r6
 800e2ec:	46bb      	mov	fp, r7
 800e2ee:	e72a      	b.n	800e146 <__ieee754_hypot+0x72>
 800e2f0:	5f300000 	.word	0x5f300000
 800e2f4:	7fefffff 	.word	0x7fefffff
 800e2f8:	20afffff 	.word	0x20afffff
 800e2fc:	7fd00000 	.word	0x7fd00000

0800e300 <__ieee754_rem_pio2>:
 800e300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e304:	ec57 6b10 	vmov	r6, r7, d0
 800e308:	4bc5      	ldr	r3, [pc, #788]	@ (800e620 <__ieee754_rem_pio2+0x320>)
 800e30a:	b08d      	sub	sp, #52	@ 0x34
 800e30c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e310:	4598      	cmp	r8, r3
 800e312:	4604      	mov	r4, r0
 800e314:	9704      	str	r7, [sp, #16]
 800e316:	d807      	bhi.n	800e328 <__ieee754_rem_pio2+0x28>
 800e318:	2200      	movs	r2, #0
 800e31a:	2300      	movs	r3, #0
 800e31c:	ed80 0b00 	vstr	d0, [r0]
 800e320:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e324:	2500      	movs	r5, #0
 800e326:	e028      	b.n	800e37a <__ieee754_rem_pio2+0x7a>
 800e328:	4bbe      	ldr	r3, [pc, #760]	@ (800e624 <__ieee754_rem_pio2+0x324>)
 800e32a:	4598      	cmp	r8, r3
 800e32c:	d878      	bhi.n	800e420 <__ieee754_rem_pio2+0x120>
 800e32e:	9b04      	ldr	r3, [sp, #16]
 800e330:	4dbd      	ldr	r5, [pc, #756]	@ (800e628 <__ieee754_rem_pio2+0x328>)
 800e332:	2b00      	cmp	r3, #0
 800e334:	4630      	mov	r0, r6
 800e336:	a3ac      	add	r3, pc, #688	@ (adr r3, 800e5e8 <__ieee754_rem_pio2+0x2e8>)
 800e338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33c:	4639      	mov	r1, r7
 800e33e:	dd38      	ble.n	800e3b2 <__ieee754_rem_pio2+0xb2>
 800e340:	f7f1 ffa2 	bl	8000288 <__aeabi_dsub>
 800e344:	45a8      	cmp	r8, r5
 800e346:	4606      	mov	r6, r0
 800e348:	460f      	mov	r7, r1
 800e34a:	d01a      	beq.n	800e382 <__ieee754_rem_pio2+0x82>
 800e34c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800e5f0 <__ieee754_rem_pio2+0x2f0>)
 800e34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e352:	f7f1 ff99 	bl	8000288 <__aeabi_dsub>
 800e356:	4602      	mov	r2, r0
 800e358:	460b      	mov	r3, r1
 800e35a:	4680      	mov	r8, r0
 800e35c:	4689      	mov	r9, r1
 800e35e:	4630      	mov	r0, r6
 800e360:	4639      	mov	r1, r7
 800e362:	f7f1 ff91 	bl	8000288 <__aeabi_dsub>
 800e366:	a3a2      	add	r3, pc, #648	@ (adr r3, 800e5f0 <__ieee754_rem_pio2+0x2f0>)
 800e368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36c:	f7f1 ff8c 	bl	8000288 <__aeabi_dsub>
 800e370:	e9c4 8900 	strd	r8, r9, [r4]
 800e374:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e378:	2501      	movs	r5, #1
 800e37a:	4628      	mov	r0, r5
 800e37c:	b00d      	add	sp, #52	@ 0x34
 800e37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e382:	a39d      	add	r3, pc, #628	@ (adr r3, 800e5f8 <__ieee754_rem_pio2+0x2f8>)
 800e384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e388:	f7f1 ff7e 	bl	8000288 <__aeabi_dsub>
 800e38c:	a39c      	add	r3, pc, #624	@ (adr r3, 800e600 <__ieee754_rem_pio2+0x300>)
 800e38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e392:	4606      	mov	r6, r0
 800e394:	460f      	mov	r7, r1
 800e396:	f7f1 ff77 	bl	8000288 <__aeabi_dsub>
 800e39a:	4602      	mov	r2, r0
 800e39c:	460b      	mov	r3, r1
 800e39e:	4680      	mov	r8, r0
 800e3a0:	4689      	mov	r9, r1
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	4639      	mov	r1, r7
 800e3a6:	f7f1 ff6f 	bl	8000288 <__aeabi_dsub>
 800e3aa:	a395      	add	r3, pc, #596	@ (adr r3, 800e600 <__ieee754_rem_pio2+0x300>)
 800e3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b0:	e7dc      	b.n	800e36c <__ieee754_rem_pio2+0x6c>
 800e3b2:	f7f1 ff6b 	bl	800028c <__adddf3>
 800e3b6:	45a8      	cmp	r8, r5
 800e3b8:	4606      	mov	r6, r0
 800e3ba:	460f      	mov	r7, r1
 800e3bc:	d018      	beq.n	800e3f0 <__ieee754_rem_pio2+0xf0>
 800e3be:	a38c      	add	r3, pc, #560	@ (adr r3, 800e5f0 <__ieee754_rem_pio2+0x2f0>)
 800e3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c4:	f7f1 ff62 	bl	800028c <__adddf3>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	460b      	mov	r3, r1
 800e3cc:	4680      	mov	r8, r0
 800e3ce:	4689      	mov	r9, r1
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	4639      	mov	r1, r7
 800e3d4:	f7f1 ff58 	bl	8000288 <__aeabi_dsub>
 800e3d8:	a385      	add	r3, pc, #532	@ (adr r3, 800e5f0 <__ieee754_rem_pio2+0x2f0>)
 800e3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3de:	f7f1 ff55 	bl	800028c <__adddf3>
 800e3e2:	f04f 35ff 	mov.w	r5, #4294967295
 800e3e6:	e9c4 8900 	strd	r8, r9, [r4]
 800e3ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e3ee:	e7c4      	b.n	800e37a <__ieee754_rem_pio2+0x7a>
 800e3f0:	a381      	add	r3, pc, #516	@ (adr r3, 800e5f8 <__ieee754_rem_pio2+0x2f8>)
 800e3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f6:	f7f1 ff49 	bl	800028c <__adddf3>
 800e3fa:	a381      	add	r3, pc, #516	@ (adr r3, 800e600 <__ieee754_rem_pio2+0x300>)
 800e3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e400:	4606      	mov	r6, r0
 800e402:	460f      	mov	r7, r1
 800e404:	f7f1 ff42 	bl	800028c <__adddf3>
 800e408:	4602      	mov	r2, r0
 800e40a:	460b      	mov	r3, r1
 800e40c:	4680      	mov	r8, r0
 800e40e:	4689      	mov	r9, r1
 800e410:	4630      	mov	r0, r6
 800e412:	4639      	mov	r1, r7
 800e414:	f7f1 ff38 	bl	8000288 <__aeabi_dsub>
 800e418:	a379      	add	r3, pc, #484	@ (adr r3, 800e600 <__ieee754_rem_pio2+0x300>)
 800e41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41e:	e7de      	b.n	800e3de <__ieee754_rem_pio2+0xde>
 800e420:	4b82      	ldr	r3, [pc, #520]	@ (800e62c <__ieee754_rem_pio2+0x32c>)
 800e422:	4598      	cmp	r8, r3
 800e424:	f200 80d1 	bhi.w	800e5ca <__ieee754_rem_pio2+0x2ca>
 800e428:	f000 fafe 	bl	800ea28 <fabs>
 800e42c:	ec57 6b10 	vmov	r6, r7, d0
 800e430:	a375      	add	r3, pc, #468	@ (adr r3, 800e608 <__ieee754_rem_pio2+0x308>)
 800e432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e436:	4630      	mov	r0, r6
 800e438:	4639      	mov	r1, r7
 800e43a:	f7f2 f8dd 	bl	80005f8 <__aeabi_dmul>
 800e43e:	4b7c      	ldr	r3, [pc, #496]	@ (800e630 <__ieee754_rem_pio2+0x330>)
 800e440:	2200      	movs	r2, #0
 800e442:	f7f1 ff23 	bl	800028c <__adddf3>
 800e446:	f7f2 fb87 	bl	8000b58 <__aeabi_d2iz>
 800e44a:	4605      	mov	r5, r0
 800e44c:	f7f2 f86a 	bl	8000524 <__aeabi_i2d>
 800e450:	4602      	mov	r2, r0
 800e452:	460b      	mov	r3, r1
 800e454:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e458:	a363      	add	r3, pc, #396	@ (adr r3, 800e5e8 <__ieee754_rem_pio2+0x2e8>)
 800e45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45e:	f7f2 f8cb 	bl	80005f8 <__aeabi_dmul>
 800e462:	4602      	mov	r2, r0
 800e464:	460b      	mov	r3, r1
 800e466:	4630      	mov	r0, r6
 800e468:	4639      	mov	r1, r7
 800e46a:	f7f1 ff0d 	bl	8000288 <__aeabi_dsub>
 800e46e:	a360      	add	r3, pc, #384	@ (adr r3, 800e5f0 <__ieee754_rem_pio2+0x2f0>)
 800e470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e474:	4682      	mov	sl, r0
 800e476:	468b      	mov	fp, r1
 800e478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e47c:	f7f2 f8bc 	bl	80005f8 <__aeabi_dmul>
 800e480:	2d1f      	cmp	r5, #31
 800e482:	4606      	mov	r6, r0
 800e484:	460f      	mov	r7, r1
 800e486:	dc0c      	bgt.n	800e4a2 <__ieee754_rem_pio2+0x1a2>
 800e488:	4b6a      	ldr	r3, [pc, #424]	@ (800e634 <__ieee754_rem_pio2+0x334>)
 800e48a:	1e6a      	subs	r2, r5, #1
 800e48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e490:	4543      	cmp	r3, r8
 800e492:	d006      	beq.n	800e4a2 <__ieee754_rem_pio2+0x1a2>
 800e494:	4632      	mov	r2, r6
 800e496:	463b      	mov	r3, r7
 800e498:	4650      	mov	r0, sl
 800e49a:	4659      	mov	r1, fp
 800e49c:	f7f1 fef4 	bl	8000288 <__aeabi_dsub>
 800e4a0:	e00e      	b.n	800e4c0 <__ieee754_rem_pio2+0x1c0>
 800e4a2:	463b      	mov	r3, r7
 800e4a4:	4632      	mov	r2, r6
 800e4a6:	4650      	mov	r0, sl
 800e4a8:	4659      	mov	r1, fp
 800e4aa:	f7f1 feed 	bl	8000288 <__aeabi_dsub>
 800e4ae:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e4b2:	9305      	str	r3, [sp, #20]
 800e4b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e4b8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e4bc:	2b10      	cmp	r3, #16
 800e4be:	dc02      	bgt.n	800e4c6 <__ieee754_rem_pio2+0x1c6>
 800e4c0:	e9c4 0100 	strd	r0, r1, [r4]
 800e4c4:	e039      	b.n	800e53a <__ieee754_rem_pio2+0x23a>
 800e4c6:	a34c      	add	r3, pc, #304	@ (adr r3, 800e5f8 <__ieee754_rem_pio2+0x2f8>)
 800e4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4d0:	f7f2 f892 	bl	80005f8 <__aeabi_dmul>
 800e4d4:	4606      	mov	r6, r0
 800e4d6:	460f      	mov	r7, r1
 800e4d8:	4602      	mov	r2, r0
 800e4da:	460b      	mov	r3, r1
 800e4dc:	4650      	mov	r0, sl
 800e4de:	4659      	mov	r1, fp
 800e4e0:	f7f1 fed2 	bl	8000288 <__aeabi_dsub>
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	4680      	mov	r8, r0
 800e4ea:	4689      	mov	r9, r1
 800e4ec:	4650      	mov	r0, sl
 800e4ee:	4659      	mov	r1, fp
 800e4f0:	f7f1 feca 	bl	8000288 <__aeabi_dsub>
 800e4f4:	4632      	mov	r2, r6
 800e4f6:	463b      	mov	r3, r7
 800e4f8:	f7f1 fec6 	bl	8000288 <__aeabi_dsub>
 800e4fc:	a340      	add	r3, pc, #256	@ (adr r3, 800e600 <__ieee754_rem_pio2+0x300>)
 800e4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e502:	4606      	mov	r6, r0
 800e504:	460f      	mov	r7, r1
 800e506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e50a:	f7f2 f875 	bl	80005f8 <__aeabi_dmul>
 800e50e:	4632      	mov	r2, r6
 800e510:	463b      	mov	r3, r7
 800e512:	f7f1 feb9 	bl	8000288 <__aeabi_dsub>
 800e516:	4602      	mov	r2, r0
 800e518:	460b      	mov	r3, r1
 800e51a:	4606      	mov	r6, r0
 800e51c:	460f      	mov	r7, r1
 800e51e:	4640      	mov	r0, r8
 800e520:	4649      	mov	r1, r9
 800e522:	f7f1 feb1 	bl	8000288 <__aeabi_dsub>
 800e526:	9a05      	ldr	r2, [sp, #20]
 800e528:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e52c:	1ad3      	subs	r3, r2, r3
 800e52e:	2b31      	cmp	r3, #49	@ 0x31
 800e530:	dc20      	bgt.n	800e574 <__ieee754_rem_pio2+0x274>
 800e532:	e9c4 0100 	strd	r0, r1, [r4]
 800e536:	46c2      	mov	sl, r8
 800e538:	46cb      	mov	fp, r9
 800e53a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e53e:	4650      	mov	r0, sl
 800e540:	4642      	mov	r2, r8
 800e542:	464b      	mov	r3, r9
 800e544:	4659      	mov	r1, fp
 800e546:	f7f1 fe9f 	bl	8000288 <__aeabi_dsub>
 800e54a:	463b      	mov	r3, r7
 800e54c:	4632      	mov	r2, r6
 800e54e:	f7f1 fe9b 	bl	8000288 <__aeabi_dsub>
 800e552:	9b04      	ldr	r3, [sp, #16]
 800e554:	2b00      	cmp	r3, #0
 800e556:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e55a:	f6bf af0e 	bge.w	800e37a <__ieee754_rem_pio2+0x7a>
 800e55e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800e562:	6063      	str	r3, [r4, #4]
 800e564:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e568:	f8c4 8000 	str.w	r8, [r4]
 800e56c:	60a0      	str	r0, [r4, #8]
 800e56e:	60e3      	str	r3, [r4, #12]
 800e570:	426d      	negs	r5, r5
 800e572:	e702      	b.n	800e37a <__ieee754_rem_pio2+0x7a>
 800e574:	a326      	add	r3, pc, #152	@ (adr r3, 800e610 <__ieee754_rem_pio2+0x310>)
 800e576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e57e:	f7f2 f83b 	bl	80005f8 <__aeabi_dmul>
 800e582:	4606      	mov	r6, r0
 800e584:	460f      	mov	r7, r1
 800e586:	4602      	mov	r2, r0
 800e588:	460b      	mov	r3, r1
 800e58a:	4640      	mov	r0, r8
 800e58c:	4649      	mov	r1, r9
 800e58e:	f7f1 fe7b 	bl	8000288 <__aeabi_dsub>
 800e592:	4602      	mov	r2, r0
 800e594:	460b      	mov	r3, r1
 800e596:	4682      	mov	sl, r0
 800e598:	468b      	mov	fp, r1
 800e59a:	4640      	mov	r0, r8
 800e59c:	4649      	mov	r1, r9
 800e59e:	f7f1 fe73 	bl	8000288 <__aeabi_dsub>
 800e5a2:	4632      	mov	r2, r6
 800e5a4:	463b      	mov	r3, r7
 800e5a6:	f7f1 fe6f 	bl	8000288 <__aeabi_dsub>
 800e5aa:	a31b      	add	r3, pc, #108	@ (adr r3, 800e618 <__ieee754_rem_pio2+0x318>)
 800e5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b0:	4606      	mov	r6, r0
 800e5b2:	460f      	mov	r7, r1
 800e5b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5b8:	f7f2 f81e 	bl	80005f8 <__aeabi_dmul>
 800e5bc:	4632      	mov	r2, r6
 800e5be:	463b      	mov	r3, r7
 800e5c0:	f7f1 fe62 	bl	8000288 <__aeabi_dsub>
 800e5c4:	4606      	mov	r6, r0
 800e5c6:	460f      	mov	r7, r1
 800e5c8:	e764      	b.n	800e494 <__ieee754_rem_pio2+0x194>
 800e5ca:	4b1b      	ldr	r3, [pc, #108]	@ (800e638 <__ieee754_rem_pio2+0x338>)
 800e5cc:	4598      	cmp	r8, r3
 800e5ce:	d935      	bls.n	800e63c <__ieee754_rem_pio2+0x33c>
 800e5d0:	4632      	mov	r2, r6
 800e5d2:	463b      	mov	r3, r7
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	4639      	mov	r1, r7
 800e5d8:	f7f1 fe56 	bl	8000288 <__aeabi_dsub>
 800e5dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e5e0:	e9c4 0100 	strd	r0, r1, [r4]
 800e5e4:	e69e      	b.n	800e324 <__ieee754_rem_pio2+0x24>
 800e5e6:	bf00      	nop
 800e5e8:	54400000 	.word	0x54400000
 800e5ec:	3ff921fb 	.word	0x3ff921fb
 800e5f0:	1a626331 	.word	0x1a626331
 800e5f4:	3dd0b461 	.word	0x3dd0b461
 800e5f8:	1a600000 	.word	0x1a600000
 800e5fc:	3dd0b461 	.word	0x3dd0b461
 800e600:	2e037073 	.word	0x2e037073
 800e604:	3ba3198a 	.word	0x3ba3198a
 800e608:	6dc9c883 	.word	0x6dc9c883
 800e60c:	3fe45f30 	.word	0x3fe45f30
 800e610:	2e000000 	.word	0x2e000000
 800e614:	3ba3198a 	.word	0x3ba3198a
 800e618:	252049c1 	.word	0x252049c1
 800e61c:	397b839a 	.word	0x397b839a
 800e620:	3fe921fb 	.word	0x3fe921fb
 800e624:	4002d97b 	.word	0x4002d97b
 800e628:	3ff921fb 	.word	0x3ff921fb
 800e62c:	413921fb 	.word	0x413921fb
 800e630:	3fe00000 	.word	0x3fe00000
 800e634:	0800f978 	.word	0x0800f978
 800e638:	7fefffff 	.word	0x7fefffff
 800e63c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800e640:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800e644:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800e648:	4630      	mov	r0, r6
 800e64a:	460f      	mov	r7, r1
 800e64c:	f7f2 fa84 	bl	8000b58 <__aeabi_d2iz>
 800e650:	f7f1 ff68 	bl	8000524 <__aeabi_i2d>
 800e654:	4602      	mov	r2, r0
 800e656:	460b      	mov	r3, r1
 800e658:	4630      	mov	r0, r6
 800e65a:	4639      	mov	r1, r7
 800e65c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e660:	f7f1 fe12 	bl	8000288 <__aeabi_dsub>
 800e664:	4b22      	ldr	r3, [pc, #136]	@ (800e6f0 <__ieee754_rem_pio2+0x3f0>)
 800e666:	2200      	movs	r2, #0
 800e668:	f7f1 ffc6 	bl	80005f8 <__aeabi_dmul>
 800e66c:	460f      	mov	r7, r1
 800e66e:	4606      	mov	r6, r0
 800e670:	f7f2 fa72 	bl	8000b58 <__aeabi_d2iz>
 800e674:	f7f1 ff56 	bl	8000524 <__aeabi_i2d>
 800e678:	4602      	mov	r2, r0
 800e67a:	460b      	mov	r3, r1
 800e67c:	4630      	mov	r0, r6
 800e67e:	4639      	mov	r1, r7
 800e680:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e684:	f7f1 fe00 	bl	8000288 <__aeabi_dsub>
 800e688:	4b19      	ldr	r3, [pc, #100]	@ (800e6f0 <__ieee754_rem_pio2+0x3f0>)
 800e68a:	2200      	movs	r2, #0
 800e68c:	f7f1 ffb4 	bl	80005f8 <__aeabi_dmul>
 800e690:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800e694:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800e698:	f04f 0803 	mov.w	r8, #3
 800e69c:	2600      	movs	r6, #0
 800e69e:	2700      	movs	r7, #0
 800e6a0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800e6a4:	4632      	mov	r2, r6
 800e6a6:	463b      	mov	r3, r7
 800e6a8:	46c2      	mov	sl, r8
 800e6aa:	f108 38ff 	add.w	r8, r8, #4294967295
 800e6ae:	f7f2 fa0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6b2:	2800      	cmp	r0, #0
 800e6b4:	d1f4      	bne.n	800e6a0 <__ieee754_rem_pio2+0x3a0>
 800e6b6:	4b0f      	ldr	r3, [pc, #60]	@ (800e6f4 <__ieee754_rem_pio2+0x3f4>)
 800e6b8:	9301      	str	r3, [sp, #4]
 800e6ba:	2302      	movs	r3, #2
 800e6bc:	9300      	str	r3, [sp, #0]
 800e6be:	462a      	mov	r2, r5
 800e6c0:	4653      	mov	r3, sl
 800e6c2:	4621      	mov	r1, r4
 800e6c4:	a806      	add	r0, sp, #24
 800e6c6:	f000 f9b7 	bl	800ea38 <__kernel_rem_pio2>
 800e6ca:	9b04      	ldr	r3, [sp, #16]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	4605      	mov	r5, r0
 800e6d0:	f6bf ae53 	bge.w	800e37a <__ieee754_rem_pio2+0x7a>
 800e6d4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800e6d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e6dc:	e9c4 2300 	strd	r2, r3, [r4]
 800e6e0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800e6e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e6e8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800e6ec:	e740      	b.n	800e570 <__ieee754_rem_pio2+0x270>
 800e6ee:	bf00      	nop
 800e6f0:	41700000 	.word	0x41700000
 800e6f4:	0800f9f8 	.word	0x0800f9f8

0800e6f8 <atan>:
 800e6f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fc:	ec55 4b10 	vmov	r4, r5, d0
 800e700:	4bbf      	ldr	r3, [pc, #764]	@ (800ea00 <atan+0x308>)
 800e702:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e706:	429e      	cmp	r6, r3
 800e708:	46ab      	mov	fp, r5
 800e70a:	d918      	bls.n	800e73e <atan+0x46>
 800e70c:	4bbd      	ldr	r3, [pc, #756]	@ (800ea04 <atan+0x30c>)
 800e70e:	429e      	cmp	r6, r3
 800e710:	d801      	bhi.n	800e716 <atan+0x1e>
 800e712:	d109      	bne.n	800e728 <atan+0x30>
 800e714:	b144      	cbz	r4, 800e728 <atan+0x30>
 800e716:	4622      	mov	r2, r4
 800e718:	462b      	mov	r3, r5
 800e71a:	4620      	mov	r0, r4
 800e71c:	4629      	mov	r1, r5
 800e71e:	f7f1 fdb5 	bl	800028c <__adddf3>
 800e722:	4604      	mov	r4, r0
 800e724:	460d      	mov	r5, r1
 800e726:	e006      	b.n	800e736 <atan+0x3e>
 800e728:	f1bb 0f00 	cmp.w	fp, #0
 800e72c:	f340 812b 	ble.w	800e986 <atan+0x28e>
 800e730:	a597      	add	r5, pc, #604	@ (adr r5, 800e990 <atan+0x298>)
 800e732:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e736:	ec45 4b10 	vmov	d0, r4, r5
 800e73a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e73e:	4bb2      	ldr	r3, [pc, #712]	@ (800ea08 <atan+0x310>)
 800e740:	429e      	cmp	r6, r3
 800e742:	d813      	bhi.n	800e76c <atan+0x74>
 800e744:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e748:	429e      	cmp	r6, r3
 800e74a:	d80c      	bhi.n	800e766 <atan+0x6e>
 800e74c:	a392      	add	r3, pc, #584	@ (adr r3, 800e998 <atan+0x2a0>)
 800e74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e752:	4620      	mov	r0, r4
 800e754:	4629      	mov	r1, r5
 800e756:	f7f1 fd99 	bl	800028c <__adddf3>
 800e75a:	4bac      	ldr	r3, [pc, #688]	@ (800ea0c <atan+0x314>)
 800e75c:	2200      	movs	r2, #0
 800e75e:	f7f2 f9db 	bl	8000b18 <__aeabi_dcmpgt>
 800e762:	2800      	cmp	r0, #0
 800e764:	d1e7      	bne.n	800e736 <atan+0x3e>
 800e766:	f04f 3aff 	mov.w	sl, #4294967295
 800e76a:	e029      	b.n	800e7c0 <atan+0xc8>
 800e76c:	f000 f95c 	bl	800ea28 <fabs>
 800e770:	4ba7      	ldr	r3, [pc, #668]	@ (800ea10 <atan+0x318>)
 800e772:	429e      	cmp	r6, r3
 800e774:	ec55 4b10 	vmov	r4, r5, d0
 800e778:	f200 80bc 	bhi.w	800e8f4 <atan+0x1fc>
 800e77c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e780:	429e      	cmp	r6, r3
 800e782:	f200 809e 	bhi.w	800e8c2 <atan+0x1ca>
 800e786:	4622      	mov	r2, r4
 800e788:	462b      	mov	r3, r5
 800e78a:	4620      	mov	r0, r4
 800e78c:	4629      	mov	r1, r5
 800e78e:	f7f1 fd7d 	bl	800028c <__adddf3>
 800e792:	4b9e      	ldr	r3, [pc, #632]	@ (800ea0c <atan+0x314>)
 800e794:	2200      	movs	r2, #0
 800e796:	f7f1 fd77 	bl	8000288 <__aeabi_dsub>
 800e79a:	2200      	movs	r2, #0
 800e79c:	4606      	mov	r6, r0
 800e79e:	460f      	mov	r7, r1
 800e7a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	f7f1 fd70 	bl	800028c <__adddf3>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	460b      	mov	r3, r1
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	4639      	mov	r1, r7
 800e7b4:	f7f2 f84a 	bl	800084c <__aeabi_ddiv>
 800e7b8:	f04f 0a00 	mov.w	sl, #0
 800e7bc:	4604      	mov	r4, r0
 800e7be:	460d      	mov	r5, r1
 800e7c0:	4622      	mov	r2, r4
 800e7c2:	462b      	mov	r3, r5
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	4629      	mov	r1, r5
 800e7c8:	f7f1 ff16 	bl	80005f8 <__aeabi_dmul>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	4680      	mov	r8, r0
 800e7d2:	4689      	mov	r9, r1
 800e7d4:	f7f1 ff10 	bl	80005f8 <__aeabi_dmul>
 800e7d8:	a371      	add	r3, pc, #452	@ (adr r3, 800e9a0 <atan+0x2a8>)
 800e7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7de:	4606      	mov	r6, r0
 800e7e0:	460f      	mov	r7, r1
 800e7e2:	f7f1 ff09 	bl	80005f8 <__aeabi_dmul>
 800e7e6:	a370      	add	r3, pc, #448	@ (adr r3, 800e9a8 <atan+0x2b0>)
 800e7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ec:	f7f1 fd4e 	bl	800028c <__adddf3>
 800e7f0:	4632      	mov	r2, r6
 800e7f2:	463b      	mov	r3, r7
 800e7f4:	f7f1 ff00 	bl	80005f8 <__aeabi_dmul>
 800e7f8:	a36d      	add	r3, pc, #436	@ (adr r3, 800e9b0 <atan+0x2b8>)
 800e7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fe:	f7f1 fd45 	bl	800028c <__adddf3>
 800e802:	4632      	mov	r2, r6
 800e804:	463b      	mov	r3, r7
 800e806:	f7f1 fef7 	bl	80005f8 <__aeabi_dmul>
 800e80a:	a36b      	add	r3, pc, #428	@ (adr r3, 800e9b8 <atan+0x2c0>)
 800e80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e810:	f7f1 fd3c 	bl	800028c <__adddf3>
 800e814:	4632      	mov	r2, r6
 800e816:	463b      	mov	r3, r7
 800e818:	f7f1 feee 	bl	80005f8 <__aeabi_dmul>
 800e81c:	a368      	add	r3, pc, #416	@ (adr r3, 800e9c0 <atan+0x2c8>)
 800e81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e822:	f7f1 fd33 	bl	800028c <__adddf3>
 800e826:	4632      	mov	r2, r6
 800e828:	463b      	mov	r3, r7
 800e82a:	f7f1 fee5 	bl	80005f8 <__aeabi_dmul>
 800e82e:	a366      	add	r3, pc, #408	@ (adr r3, 800e9c8 <atan+0x2d0>)
 800e830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e834:	f7f1 fd2a 	bl	800028c <__adddf3>
 800e838:	4642      	mov	r2, r8
 800e83a:	464b      	mov	r3, r9
 800e83c:	f7f1 fedc 	bl	80005f8 <__aeabi_dmul>
 800e840:	a363      	add	r3, pc, #396	@ (adr r3, 800e9d0 <atan+0x2d8>)
 800e842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e846:	4680      	mov	r8, r0
 800e848:	4689      	mov	r9, r1
 800e84a:	4630      	mov	r0, r6
 800e84c:	4639      	mov	r1, r7
 800e84e:	f7f1 fed3 	bl	80005f8 <__aeabi_dmul>
 800e852:	a361      	add	r3, pc, #388	@ (adr r3, 800e9d8 <atan+0x2e0>)
 800e854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e858:	f7f1 fd16 	bl	8000288 <__aeabi_dsub>
 800e85c:	4632      	mov	r2, r6
 800e85e:	463b      	mov	r3, r7
 800e860:	f7f1 feca 	bl	80005f8 <__aeabi_dmul>
 800e864:	a35e      	add	r3, pc, #376	@ (adr r3, 800e9e0 <atan+0x2e8>)
 800e866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86a:	f7f1 fd0d 	bl	8000288 <__aeabi_dsub>
 800e86e:	4632      	mov	r2, r6
 800e870:	463b      	mov	r3, r7
 800e872:	f7f1 fec1 	bl	80005f8 <__aeabi_dmul>
 800e876:	a35c      	add	r3, pc, #368	@ (adr r3, 800e9e8 <atan+0x2f0>)
 800e878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87c:	f7f1 fd04 	bl	8000288 <__aeabi_dsub>
 800e880:	4632      	mov	r2, r6
 800e882:	463b      	mov	r3, r7
 800e884:	f7f1 feb8 	bl	80005f8 <__aeabi_dmul>
 800e888:	a359      	add	r3, pc, #356	@ (adr r3, 800e9f0 <atan+0x2f8>)
 800e88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88e:	f7f1 fcfb 	bl	8000288 <__aeabi_dsub>
 800e892:	4632      	mov	r2, r6
 800e894:	463b      	mov	r3, r7
 800e896:	f7f1 feaf 	bl	80005f8 <__aeabi_dmul>
 800e89a:	4602      	mov	r2, r0
 800e89c:	460b      	mov	r3, r1
 800e89e:	4640      	mov	r0, r8
 800e8a0:	4649      	mov	r1, r9
 800e8a2:	f7f1 fcf3 	bl	800028c <__adddf3>
 800e8a6:	4622      	mov	r2, r4
 800e8a8:	462b      	mov	r3, r5
 800e8aa:	f7f1 fea5 	bl	80005f8 <__aeabi_dmul>
 800e8ae:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	d148      	bne.n	800e94a <atan+0x252>
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	4629      	mov	r1, r5
 800e8bc:	f7f1 fce4 	bl	8000288 <__aeabi_dsub>
 800e8c0:	e72f      	b.n	800e722 <atan+0x2a>
 800e8c2:	4b52      	ldr	r3, [pc, #328]	@ (800ea0c <atan+0x314>)
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	f7f1 fcdd 	bl	8000288 <__aeabi_dsub>
 800e8ce:	4b4f      	ldr	r3, [pc, #316]	@ (800ea0c <atan+0x314>)
 800e8d0:	4606      	mov	r6, r0
 800e8d2:	460f      	mov	r7, r1
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	4629      	mov	r1, r5
 800e8da:	f7f1 fcd7 	bl	800028c <__adddf3>
 800e8de:	4602      	mov	r2, r0
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	4630      	mov	r0, r6
 800e8e4:	4639      	mov	r1, r7
 800e8e6:	f7f1 ffb1 	bl	800084c <__aeabi_ddiv>
 800e8ea:	f04f 0a01 	mov.w	sl, #1
 800e8ee:	4604      	mov	r4, r0
 800e8f0:	460d      	mov	r5, r1
 800e8f2:	e765      	b.n	800e7c0 <atan+0xc8>
 800e8f4:	4b47      	ldr	r3, [pc, #284]	@ (800ea14 <atan+0x31c>)
 800e8f6:	429e      	cmp	r6, r3
 800e8f8:	d21c      	bcs.n	800e934 <atan+0x23c>
 800e8fa:	4b47      	ldr	r3, [pc, #284]	@ (800ea18 <atan+0x320>)
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	4620      	mov	r0, r4
 800e900:	4629      	mov	r1, r5
 800e902:	f7f1 fcc1 	bl	8000288 <__aeabi_dsub>
 800e906:	4b44      	ldr	r3, [pc, #272]	@ (800ea18 <atan+0x320>)
 800e908:	4606      	mov	r6, r0
 800e90a:	460f      	mov	r7, r1
 800e90c:	2200      	movs	r2, #0
 800e90e:	4620      	mov	r0, r4
 800e910:	4629      	mov	r1, r5
 800e912:	f7f1 fe71 	bl	80005f8 <__aeabi_dmul>
 800e916:	4b3d      	ldr	r3, [pc, #244]	@ (800ea0c <atan+0x314>)
 800e918:	2200      	movs	r2, #0
 800e91a:	f7f1 fcb7 	bl	800028c <__adddf3>
 800e91e:	4602      	mov	r2, r0
 800e920:	460b      	mov	r3, r1
 800e922:	4630      	mov	r0, r6
 800e924:	4639      	mov	r1, r7
 800e926:	f7f1 ff91 	bl	800084c <__aeabi_ddiv>
 800e92a:	f04f 0a02 	mov.w	sl, #2
 800e92e:	4604      	mov	r4, r0
 800e930:	460d      	mov	r5, r1
 800e932:	e745      	b.n	800e7c0 <atan+0xc8>
 800e934:	4622      	mov	r2, r4
 800e936:	462b      	mov	r3, r5
 800e938:	4938      	ldr	r1, [pc, #224]	@ (800ea1c <atan+0x324>)
 800e93a:	2000      	movs	r0, #0
 800e93c:	f7f1 ff86 	bl	800084c <__aeabi_ddiv>
 800e940:	f04f 0a03 	mov.w	sl, #3
 800e944:	4604      	mov	r4, r0
 800e946:	460d      	mov	r5, r1
 800e948:	e73a      	b.n	800e7c0 <atan+0xc8>
 800e94a:	4b35      	ldr	r3, [pc, #212]	@ (800ea20 <atan+0x328>)
 800e94c:	4e35      	ldr	r6, [pc, #212]	@ (800ea24 <atan+0x32c>)
 800e94e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e956:	f7f1 fc97 	bl	8000288 <__aeabi_dsub>
 800e95a:	4622      	mov	r2, r4
 800e95c:	462b      	mov	r3, r5
 800e95e:	f7f1 fc93 	bl	8000288 <__aeabi_dsub>
 800e962:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e966:	4602      	mov	r2, r0
 800e968:	460b      	mov	r3, r1
 800e96a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e96e:	f7f1 fc8b 	bl	8000288 <__aeabi_dsub>
 800e972:	f1bb 0f00 	cmp.w	fp, #0
 800e976:	4604      	mov	r4, r0
 800e978:	460d      	mov	r5, r1
 800e97a:	f6bf aedc 	bge.w	800e736 <atan+0x3e>
 800e97e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e982:	461d      	mov	r5, r3
 800e984:	e6d7      	b.n	800e736 <atan+0x3e>
 800e986:	a51c      	add	r5, pc, #112	@ (adr r5, 800e9f8 <atan+0x300>)
 800e988:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e98c:	e6d3      	b.n	800e736 <atan+0x3e>
 800e98e:	bf00      	nop
 800e990:	54442d18 	.word	0x54442d18
 800e994:	3ff921fb 	.word	0x3ff921fb
 800e998:	8800759c 	.word	0x8800759c
 800e99c:	7e37e43c 	.word	0x7e37e43c
 800e9a0:	e322da11 	.word	0xe322da11
 800e9a4:	3f90ad3a 	.word	0x3f90ad3a
 800e9a8:	24760deb 	.word	0x24760deb
 800e9ac:	3fa97b4b 	.word	0x3fa97b4b
 800e9b0:	a0d03d51 	.word	0xa0d03d51
 800e9b4:	3fb10d66 	.word	0x3fb10d66
 800e9b8:	c54c206e 	.word	0xc54c206e
 800e9bc:	3fb745cd 	.word	0x3fb745cd
 800e9c0:	920083ff 	.word	0x920083ff
 800e9c4:	3fc24924 	.word	0x3fc24924
 800e9c8:	5555550d 	.word	0x5555550d
 800e9cc:	3fd55555 	.word	0x3fd55555
 800e9d0:	2c6a6c2f 	.word	0x2c6a6c2f
 800e9d4:	bfa2b444 	.word	0xbfa2b444
 800e9d8:	52defd9a 	.word	0x52defd9a
 800e9dc:	3fadde2d 	.word	0x3fadde2d
 800e9e0:	af749a6d 	.word	0xaf749a6d
 800e9e4:	3fb3b0f2 	.word	0x3fb3b0f2
 800e9e8:	fe231671 	.word	0xfe231671
 800e9ec:	3fbc71c6 	.word	0x3fbc71c6
 800e9f0:	9998ebc4 	.word	0x9998ebc4
 800e9f4:	3fc99999 	.word	0x3fc99999
 800e9f8:	54442d18 	.word	0x54442d18
 800e9fc:	bff921fb 	.word	0xbff921fb
 800ea00:	440fffff 	.word	0x440fffff
 800ea04:	7ff00000 	.word	0x7ff00000
 800ea08:	3fdbffff 	.word	0x3fdbffff
 800ea0c:	3ff00000 	.word	0x3ff00000
 800ea10:	3ff2ffff 	.word	0x3ff2ffff
 800ea14:	40038000 	.word	0x40038000
 800ea18:	3ff80000 	.word	0x3ff80000
 800ea1c:	bff00000 	.word	0xbff00000
 800ea20:	0800fb00 	.word	0x0800fb00
 800ea24:	0800fb20 	.word	0x0800fb20

0800ea28 <fabs>:
 800ea28:	ec51 0b10 	vmov	r0, r1, d0
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ea32:	ec43 2b10 	vmov	d0, r2, r3
 800ea36:	4770      	bx	lr

0800ea38 <__kernel_rem_pio2>:
 800ea38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3c:	ed2d 8b02 	vpush	{d8}
 800ea40:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ea44:	f112 0f14 	cmn.w	r2, #20
 800ea48:	9306      	str	r3, [sp, #24]
 800ea4a:	9104      	str	r1, [sp, #16]
 800ea4c:	4bbe      	ldr	r3, [pc, #760]	@ (800ed48 <__kernel_rem_pio2+0x310>)
 800ea4e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800ea50:	9008      	str	r0, [sp, #32]
 800ea52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea56:	9300      	str	r3, [sp, #0]
 800ea58:	9b06      	ldr	r3, [sp, #24]
 800ea5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ea5e:	bfa8      	it	ge
 800ea60:	1ed4      	subge	r4, r2, #3
 800ea62:	9305      	str	r3, [sp, #20]
 800ea64:	bfb2      	itee	lt
 800ea66:	2400      	movlt	r4, #0
 800ea68:	2318      	movge	r3, #24
 800ea6a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ea6e:	f06f 0317 	mvn.w	r3, #23
 800ea72:	fb04 3303 	mla	r3, r4, r3, r3
 800ea76:	eb03 0b02 	add.w	fp, r3, r2
 800ea7a:	9b00      	ldr	r3, [sp, #0]
 800ea7c:	9a05      	ldr	r2, [sp, #20]
 800ea7e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800ed38 <__kernel_rem_pio2+0x300>
 800ea82:	eb03 0802 	add.w	r8, r3, r2
 800ea86:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ea88:	1aa7      	subs	r7, r4, r2
 800ea8a:	ae20      	add	r6, sp, #128	@ 0x80
 800ea8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ea90:	2500      	movs	r5, #0
 800ea92:	4545      	cmp	r5, r8
 800ea94:	dd13      	ble.n	800eabe <__kernel_rem_pio2+0x86>
 800ea96:	9b06      	ldr	r3, [sp, #24]
 800ea98:	aa20      	add	r2, sp, #128	@ 0x80
 800ea9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ea9e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800eaa2:	f04f 0800 	mov.w	r8, #0
 800eaa6:	9b00      	ldr	r3, [sp, #0]
 800eaa8:	4598      	cmp	r8, r3
 800eaaa:	dc31      	bgt.n	800eb10 <__kernel_rem_pio2+0xd8>
 800eaac:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800ed38 <__kernel_rem_pio2+0x300>
 800eab0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eab4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eab8:	462f      	mov	r7, r5
 800eaba:	2600      	movs	r6, #0
 800eabc:	e01b      	b.n	800eaf6 <__kernel_rem_pio2+0xbe>
 800eabe:	42ef      	cmn	r7, r5
 800eac0:	d407      	bmi.n	800ead2 <__kernel_rem_pio2+0x9a>
 800eac2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800eac6:	f7f1 fd2d 	bl	8000524 <__aeabi_i2d>
 800eaca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800eace:	3501      	adds	r5, #1
 800ead0:	e7df      	b.n	800ea92 <__kernel_rem_pio2+0x5a>
 800ead2:	ec51 0b18 	vmov	r0, r1, d8
 800ead6:	e7f8      	b.n	800eaca <__kernel_rem_pio2+0x92>
 800ead8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eadc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800eae0:	f7f1 fd8a 	bl	80005f8 <__aeabi_dmul>
 800eae4:	4602      	mov	r2, r0
 800eae6:	460b      	mov	r3, r1
 800eae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaec:	f7f1 fbce 	bl	800028c <__adddf3>
 800eaf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eaf4:	3601      	adds	r6, #1
 800eaf6:	9b05      	ldr	r3, [sp, #20]
 800eaf8:	429e      	cmp	r6, r3
 800eafa:	f1a7 0708 	sub.w	r7, r7, #8
 800eafe:	ddeb      	ble.n	800ead8 <__kernel_rem_pio2+0xa0>
 800eb00:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eb04:	f108 0801 	add.w	r8, r8, #1
 800eb08:	ecaa 7b02 	vstmia	sl!, {d7}
 800eb0c:	3508      	adds	r5, #8
 800eb0e:	e7ca      	b.n	800eaa6 <__kernel_rem_pio2+0x6e>
 800eb10:	9b00      	ldr	r3, [sp, #0]
 800eb12:	f8dd 8000 	ldr.w	r8, [sp]
 800eb16:	aa0c      	add	r2, sp, #48	@ 0x30
 800eb18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb1c:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb1e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800eb20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800eb24:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb26:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800eb2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb2c:	ab98      	add	r3, sp, #608	@ 0x260
 800eb2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800eb32:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800eb36:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eb3a:	ac0c      	add	r4, sp, #48	@ 0x30
 800eb3c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800eb3e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800eb42:	46a1      	mov	r9, r4
 800eb44:	46c2      	mov	sl, r8
 800eb46:	f1ba 0f00 	cmp.w	sl, #0
 800eb4a:	f1a5 0508 	sub.w	r5, r5, #8
 800eb4e:	dc77      	bgt.n	800ec40 <__kernel_rem_pio2+0x208>
 800eb50:	4658      	mov	r0, fp
 800eb52:	ed9d 0b02 	vldr	d0, [sp, #8]
 800eb56:	f000 fac7 	bl	800f0e8 <scalbn>
 800eb5a:	ec57 6b10 	vmov	r6, r7, d0
 800eb5e:	2200      	movs	r2, #0
 800eb60:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800eb64:	4630      	mov	r0, r6
 800eb66:	4639      	mov	r1, r7
 800eb68:	f7f1 fd46 	bl	80005f8 <__aeabi_dmul>
 800eb6c:	ec41 0b10 	vmov	d0, r0, r1
 800eb70:	f000 fb3a 	bl	800f1e8 <floor>
 800eb74:	4b75      	ldr	r3, [pc, #468]	@ (800ed4c <__kernel_rem_pio2+0x314>)
 800eb76:	ec51 0b10 	vmov	r0, r1, d0
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f7f1 fd3c 	bl	80005f8 <__aeabi_dmul>
 800eb80:	4602      	mov	r2, r0
 800eb82:	460b      	mov	r3, r1
 800eb84:	4630      	mov	r0, r6
 800eb86:	4639      	mov	r1, r7
 800eb88:	f7f1 fb7e 	bl	8000288 <__aeabi_dsub>
 800eb8c:	460f      	mov	r7, r1
 800eb8e:	4606      	mov	r6, r0
 800eb90:	f7f1 ffe2 	bl	8000b58 <__aeabi_d2iz>
 800eb94:	9002      	str	r0, [sp, #8]
 800eb96:	f7f1 fcc5 	bl	8000524 <__aeabi_i2d>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	4630      	mov	r0, r6
 800eba0:	4639      	mov	r1, r7
 800eba2:	f7f1 fb71 	bl	8000288 <__aeabi_dsub>
 800eba6:	f1bb 0f00 	cmp.w	fp, #0
 800ebaa:	4606      	mov	r6, r0
 800ebac:	460f      	mov	r7, r1
 800ebae:	dd6c      	ble.n	800ec8a <__kernel_rem_pio2+0x252>
 800ebb0:	f108 31ff 	add.w	r1, r8, #4294967295
 800ebb4:	ab0c      	add	r3, sp, #48	@ 0x30
 800ebb6:	9d02      	ldr	r5, [sp, #8]
 800ebb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ebbc:	f1cb 0018 	rsb	r0, fp, #24
 800ebc0:	fa43 f200 	asr.w	r2, r3, r0
 800ebc4:	4415      	add	r5, r2
 800ebc6:	4082      	lsls	r2, r0
 800ebc8:	1a9b      	subs	r3, r3, r2
 800ebca:	aa0c      	add	r2, sp, #48	@ 0x30
 800ebcc:	9502      	str	r5, [sp, #8]
 800ebce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ebd2:	f1cb 0217 	rsb	r2, fp, #23
 800ebd6:	fa43 f902 	asr.w	r9, r3, r2
 800ebda:	f1b9 0f00 	cmp.w	r9, #0
 800ebde:	dd64      	ble.n	800ecaa <__kernel_rem_pio2+0x272>
 800ebe0:	9b02      	ldr	r3, [sp, #8]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	9302      	str	r3, [sp, #8]
 800ebe8:	4615      	mov	r5, r2
 800ebea:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800ebee:	4590      	cmp	r8, r2
 800ebf0:	f300 80b8 	bgt.w	800ed64 <__kernel_rem_pio2+0x32c>
 800ebf4:	f1bb 0f00 	cmp.w	fp, #0
 800ebf8:	dd07      	ble.n	800ec0a <__kernel_rem_pio2+0x1d2>
 800ebfa:	f1bb 0f01 	cmp.w	fp, #1
 800ebfe:	f000 80bf 	beq.w	800ed80 <__kernel_rem_pio2+0x348>
 800ec02:	f1bb 0f02 	cmp.w	fp, #2
 800ec06:	f000 80c6 	beq.w	800ed96 <__kernel_rem_pio2+0x35e>
 800ec0a:	f1b9 0f02 	cmp.w	r9, #2
 800ec0e:	d14c      	bne.n	800ecaa <__kernel_rem_pio2+0x272>
 800ec10:	4632      	mov	r2, r6
 800ec12:	463b      	mov	r3, r7
 800ec14:	494e      	ldr	r1, [pc, #312]	@ (800ed50 <__kernel_rem_pio2+0x318>)
 800ec16:	2000      	movs	r0, #0
 800ec18:	f7f1 fb36 	bl	8000288 <__aeabi_dsub>
 800ec1c:	4606      	mov	r6, r0
 800ec1e:	460f      	mov	r7, r1
 800ec20:	2d00      	cmp	r5, #0
 800ec22:	d042      	beq.n	800ecaa <__kernel_rem_pio2+0x272>
 800ec24:	4658      	mov	r0, fp
 800ec26:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800ed40 <__kernel_rem_pio2+0x308>
 800ec2a:	f000 fa5d 	bl	800f0e8 <scalbn>
 800ec2e:	4630      	mov	r0, r6
 800ec30:	4639      	mov	r1, r7
 800ec32:	ec53 2b10 	vmov	r2, r3, d0
 800ec36:	f7f1 fb27 	bl	8000288 <__aeabi_dsub>
 800ec3a:	4606      	mov	r6, r0
 800ec3c:	460f      	mov	r7, r1
 800ec3e:	e034      	b.n	800ecaa <__kernel_rem_pio2+0x272>
 800ec40:	4b44      	ldr	r3, [pc, #272]	@ (800ed54 <__kernel_rem_pio2+0x31c>)
 800ec42:	2200      	movs	r2, #0
 800ec44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec48:	f7f1 fcd6 	bl	80005f8 <__aeabi_dmul>
 800ec4c:	f7f1 ff84 	bl	8000b58 <__aeabi_d2iz>
 800ec50:	f7f1 fc68 	bl	8000524 <__aeabi_i2d>
 800ec54:	4b40      	ldr	r3, [pc, #256]	@ (800ed58 <__kernel_rem_pio2+0x320>)
 800ec56:	2200      	movs	r2, #0
 800ec58:	4606      	mov	r6, r0
 800ec5a:	460f      	mov	r7, r1
 800ec5c:	f7f1 fccc 	bl	80005f8 <__aeabi_dmul>
 800ec60:	4602      	mov	r2, r0
 800ec62:	460b      	mov	r3, r1
 800ec64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec68:	f7f1 fb0e 	bl	8000288 <__aeabi_dsub>
 800ec6c:	f7f1 ff74 	bl	8000b58 <__aeabi_d2iz>
 800ec70:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ec74:	f849 0b04 	str.w	r0, [r9], #4
 800ec78:	4639      	mov	r1, r7
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	f7f1 fb06 	bl	800028c <__adddf3>
 800ec80:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec88:	e75d      	b.n	800eb46 <__kernel_rem_pio2+0x10e>
 800ec8a:	d107      	bne.n	800ec9c <__kernel_rem_pio2+0x264>
 800ec8c:	f108 33ff 	add.w	r3, r8, #4294967295
 800ec90:	aa0c      	add	r2, sp, #48	@ 0x30
 800ec92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec96:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800ec9a:	e79e      	b.n	800ebda <__kernel_rem_pio2+0x1a2>
 800ec9c:	4b2f      	ldr	r3, [pc, #188]	@ (800ed5c <__kernel_rem_pio2+0x324>)
 800ec9e:	2200      	movs	r2, #0
 800eca0:	f7f1 ff30 	bl	8000b04 <__aeabi_dcmpge>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d143      	bne.n	800ed30 <__kernel_rem_pio2+0x2f8>
 800eca8:	4681      	mov	r9, r0
 800ecaa:	2200      	movs	r2, #0
 800ecac:	2300      	movs	r3, #0
 800ecae:	4630      	mov	r0, r6
 800ecb0:	4639      	mov	r1, r7
 800ecb2:	f7f1 ff09 	bl	8000ac8 <__aeabi_dcmpeq>
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	f000 80bf 	beq.w	800ee3a <__kernel_rem_pio2+0x402>
 800ecbc:	f108 33ff 	add.w	r3, r8, #4294967295
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	9900      	ldr	r1, [sp, #0]
 800ecc4:	428b      	cmp	r3, r1
 800ecc6:	da6e      	bge.n	800eda6 <__kernel_rem_pio2+0x36e>
 800ecc8:	2a00      	cmp	r2, #0
 800ecca:	f000 8089 	beq.w	800ede0 <__kernel_rem_pio2+0x3a8>
 800ecce:	f108 38ff 	add.w	r8, r8, #4294967295
 800ecd2:	ab0c      	add	r3, sp, #48	@ 0x30
 800ecd4:	f1ab 0b18 	sub.w	fp, fp, #24
 800ecd8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d0f6      	beq.n	800ecce <__kernel_rem_pio2+0x296>
 800ece0:	4658      	mov	r0, fp
 800ece2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800ed40 <__kernel_rem_pio2+0x308>
 800ece6:	f000 f9ff 	bl	800f0e8 <scalbn>
 800ecea:	f108 0301 	add.w	r3, r8, #1
 800ecee:	00da      	lsls	r2, r3, #3
 800ecf0:	9205      	str	r2, [sp, #20]
 800ecf2:	ec55 4b10 	vmov	r4, r5, d0
 800ecf6:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ecf8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800ed54 <__kernel_rem_pio2+0x31c>
 800ecfc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800ed00:	4646      	mov	r6, r8
 800ed02:	f04f 0a00 	mov.w	sl, #0
 800ed06:	2e00      	cmp	r6, #0
 800ed08:	f280 80cf 	bge.w	800eeaa <__kernel_rem_pio2+0x472>
 800ed0c:	4644      	mov	r4, r8
 800ed0e:	2c00      	cmp	r4, #0
 800ed10:	f2c0 80fd 	blt.w	800ef0e <__kernel_rem_pio2+0x4d6>
 800ed14:	4b12      	ldr	r3, [pc, #72]	@ (800ed60 <__kernel_rem_pio2+0x328>)
 800ed16:	461f      	mov	r7, r3
 800ed18:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ed1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ed1e:	9306      	str	r3, [sp, #24]
 800ed20:	f04f 0a00 	mov.w	sl, #0
 800ed24:	f04f 0b00 	mov.w	fp, #0
 800ed28:	2600      	movs	r6, #0
 800ed2a:	eba8 0504 	sub.w	r5, r8, r4
 800ed2e:	e0e2      	b.n	800eef6 <__kernel_rem_pio2+0x4be>
 800ed30:	f04f 0902 	mov.w	r9, #2
 800ed34:	e754      	b.n	800ebe0 <__kernel_rem_pio2+0x1a8>
 800ed36:	bf00      	nop
	...
 800ed44:	3ff00000 	.word	0x3ff00000
 800ed48:	0800fb80 	.word	0x0800fb80
 800ed4c:	40200000 	.word	0x40200000
 800ed50:	3ff00000 	.word	0x3ff00000
 800ed54:	3e700000 	.word	0x3e700000
 800ed58:	41700000 	.word	0x41700000
 800ed5c:	3fe00000 	.word	0x3fe00000
 800ed60:	0800fb40 	.word	0x0800fb40
 800ed64:	f854 3b04 	ldr.w	r3, [r4], #4
 800ed68:	b945      	cbnz	r5, 800ed7c <__kernel_rem_pio2+0x344>
 800ed6a:	b123      	cbz	r3, 800ed76 <__kernel_rem_pio2+0x33e>
 800ed6c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800ed70:	f844 3c04 	str.w	r3, [r4, #-4]
 800ed74:	2301      	movs	r3, #1
 800ed76:	3201      	adds	r2, #1
 800ed78:	461d      	mov	r5, r3
 800ed7a:	e738      	b.n	800ebee <__kernel_rem_pio2+0x1b6>
 800ed7c:	1acb      	subs	r3, r1, r3
 800ed7e:	e7f7      	b.n	800ed70 <__kernel_rem_pio2+0x338>
 800ed80:	f108 32ff 	add.w	r2, r8, #4294967295
 800ed84:	ab0c      	add	r3, sp, #48	@ 0x30
 800ed86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed8a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ed8e:	a90c      	add	r1, sp, #48	@ 0x30
 800ed90:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ed94:	e739      	b.n	800ec0a <__kernel_rem_pio2+0x1d2>
 800ed96:	f108 32ff 	add.w	r2, r8, #4294967295
 800ed9a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ed9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eda0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eda4:	e7f3      	b.n	800ed8e <__kernel_rem_pio2+0x356>
 800eda6:	a90c      	add	r1, sp, #48	@ 0x30
 800eda8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800edac:	3b01      	subs	r3, #1
 800edae:	430a      	orrs	r2, r1
 800edb0:	e787      	b.n	800ecc2 <__kernel_rem_pio2+0x28a>
 800edb2:	3401      	adds	r4, #1
 800edb4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800edb8:	2a00      	cmp	r2, #0
 800edba:	d0fa      	beq.n	800edb2 <__kernel_rem_pio2+0x37a>
 800edbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edbe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800edc2:	eb0d 0503 	add.w	r5, sp, r3
 800edc6:	9b06      	ldr	r3, [sp, #24]
 800edc8:	aa20      	add	r2, sp, #128	@ 0x80
 800edca:	4443      	add	r3, r8
 800edcc:	f108 0701 	add.w	r7, r8, #1
 800edd0:	3d98      	subs	r5, #152	@ 0x98
 800edd2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800edd6:	4444      	add	r4, r8
 800edd8:	42bc      	cmp	r4, r7
 800edda:	da04      	bge.n	800ede6 <__kernel_rem_pio2+0x3ae>
 800eddc:	46a0      	mov	r8, r4
 800edde:	e6a2      	b.n	800eb26 <__kernel_rem_pio2+0xee>
 800ede0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ede2:	2401      	movs	r4, #1
 800ede4:	e7e6      	b.n	800edb4 <__kernel_rem_pio2+0x37c>
 800ede6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ede8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800edec:	f7f1 fb9a 	bl	8000524 <__aeabi_i2d>
 800edf0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800f0b8 <__kernel_rem_pio2+0x680>
 800edf4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800edf8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800edfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ee00:	46b2      	mov	sl, r6
 800ee02:	f04f 0800 	mov.w	r8, #0
 800ee06:	9b05      	ldr	r3, [sp, #20]
 800ee08:	4598      	cmp	r8, r3
 800ee0a:	dd05      	ble.n	800ee18 <__kernel_rem_pio2+0x3e0>
 800ee0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee10:	3701      	adds	r7, #1
 800ee12:	eca5 7b02 	vstmia	r5!, {d7}
 800ee16:	e7df      	b.n	800edd8 <__kernel_rem_pio2+0x3a0>
 800ee18:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800ee1c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ee20:	f7f1 fbea 	bl	80005f8 <__aeabi_dmul>
 800ee24:	4602      	mov	r2, r0
 800ee26:	460b      	mov	r3, r1
 800ee28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee2c:	f7f1 fa2e 	bl	800028c <__adddf3>
 800ee30:	f108 0801 	add.w	r8, r8, #1
 800ee34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee38:	e7e5      	b.n	800ee06 <__kernel_rem_pio2+0x3ce>
 800ee3a:	f1cb 0000 	rsb	r0, fp, #0
 800ee3e:	ec47 6b10 	vmov	d0, r6, r7
 800ee42:	f000 f951 	bl	800f0e8 <scalbn>
 800ee46:	ec55 4b10 	vmov	r4, r5, d0
 800ee4a:	4b9d      	ldr	r3, [pc, #628]	@ (800f0c0 <__kernel_rem_pio2+0x688>)
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	4620      	mov	r0, r4
 800ee50:	4629      	mov	r1, r5
 800ee52:	f7f1 fe57 	bl	8000b04 <__aeabi_dcmpge>
 800ee56:	b300      	cbz	r0, 800ee9a <__kernel_rem_pio2+0x462>
 800ee58:	4b9a      	ldr	r3, [pc, #616]	@ (800f0c4 <__kernel_rem_pio2+0x68c>)
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	4629      	mov	r1, r5
 800ee60:	f7f1 fbca 	bl	80005f8 <__aeabi_dmul>
 800ee64:	f7f1 fe78 	bl	8000b58 <__aeabi_d2iz>
 800ee68:	4606      	mov	r6, r0
 800ee6a:	f7f1 fb5b 	bl	8000524 <__aeabi_i2d>
 800ee6e:	4b94      	ldr	r3, [pc, #592]	@ (800f0c0 <__kernel_rem_pio2+0x688>)
 800ee70:	2200      	movs	r2, #0
 800ee72:	f7f1 fbc1 	bl	80005f8 <__aeabi_dmul>
 800ee76:	460b      	mov	r3, r1
 800ee78:	4602      	mov	r2, r0
 800ee7a:	4629      	mov	r1, r5
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	f7f1 fa03 	bl	8000288 <__aeabi_dsub>
 800ee82:	f7f1 fe69 	bl	8000b58 <__aeabi_d2iz>
 800ee86:	ab0c      	add	r3, sp, #48	@ 0x30
 800ee88:	f10b 0b18 	add.w	fp, fp, #24
 800ee8c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800ee90:	f108 0801 	add.w	r8, r8, #1
 800ee94:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800ee98:	e722      	b.n	800ece0 <__kernel_rem_pio2+0x2a8>
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	4629      	mov	r1, r5
 800ee9e:	f7f1 fe5b 	bl	8000b58 <__aeabi_d2iz>
 800eea2:	ab0c      	add	r3, sp, #48	@ 0x30
 800eea4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800eea8:	e71a      	b.n	800ece0 <__kernel_rem_pio2+0x2a8>
 800eeaa:	ab0c      	add	r3, sp, #48	@ 0x30
 800eeac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800eeb0:	f7f1 fb38 	bl	8000524 <__aeabi_i2d>
 800eeb4:	4622      	mov	r2, r4
 800eeb6:	462b      	mov	r3, r5
 800eeb8:	f7f1 fb9e 	bl	80005f8 <__aeabi_dmul>
 800eebc:	4652      	mov	r2, sl
 800eebe:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800eec2:	465b      	mov	r3, fp
 800eec4:	4620      	mov	r0, r4
 800eec6:	4629      	mov	r1, r5
 800eec8:	f7f1 fb96 	bl	80005f8 <__aeabi_dmul>
 800eecc:	3e01      	subs	r6, #1
 800eece:	4604      	mov	r4, r0
 800eed0:	460d      	mov	r5, r1
 800eed2:	e718      	b.n	800ed06 <__kernel_rem_pio2+0x2ce>
 800eed4:	9906      	ldr	r1, [sp, #24]
 800eed6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800eeda:	9106      	str	r1, [sp, #24]
 800eedc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800eee0:	f7f1 fb8a 	bl	80005f8 <__aeabi_dmul>
 800eee4:	4602      	mov	r2, r0
 800eee6:	460b      	mov	r3, r1
 800eee8:	4650      	mov	r0, sl
 800eeea:	4659      	mov	r1, fp
 800eeec:	f7f1 f9ce 	bl	800028c <__adddf3>
 800eef0:	3601      	adds	r6, #1
 800eef2:	4682      	mov	sl, r0
 800eef4:	468b      	mov	fp, r1
 800eef6:	9b00      	ldr	r3, [sp, #0]
 800eef8:	429e      	cmp	r6, r3
 800eefa:	dc01      	bgt.n	800ef00 <__kernel_rem_pio2+0x4c8>
 800eefc:	42b5      	cmp	r5, r6
 800eefe:	dae9      	bge.n	800eed4 <__kernel_rem_pio2+0x49c>
 800ef00:	ab48      	add	r3, sp, #288	@ 0x120
 800ef02:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ef06:	e9c5 ab00 	strd	sl, fp, [r5]
 800ef0a:	3c01      	subs	r4, #1
 800ef0c:	e6ff      	b.n	800ed0e <__kernel_rem_pio2+0x2d6>
 800ef0e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ef10:	2b02      	cmp	r3, #2
 800ef12:	dc0b      	bgt.n	800ef2c <__kernel_rem_pio2+0x4f4>
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	dc39      	bgt.n	800ef8c <__kernel_rem_pio2+0x554>
 800ef18:	d05d      	beq.n	800efd6 <__kernel_rem_pio2+0x59e>
 800ef1a:	9b02      	ldr	r3, [sp, #8]
 800ef1c:	f003 0007 	and.w	r0, r3, #7
 800ef20:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800ef24:	ecbd 8b02 	vpop	{d8}
 800ef28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef2c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ef2e:	2b03      	cmp	r3, #3
 800ef30:	d1f3      	bne.n	800ef1a <__kernel_rem_pio2+0x4e2>
 800ef32:	9b05      	ldr	r3, [sp, #20]
 800ef34:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ef38:	eb0d 0403 	add.w	r4, sp, r3
 800ef3c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800ef40:	4625      	mov	r5, r4
 800ef42:	46c2      	mov	sl, r8
 800ef44:	f1ba 0f00 	cmp.w	sl, #0
 800ef48:	f1a5 0508 	sub.w	r5, r5, #8
 800ef4c:	dc6b      	bgt.n	800f026 <__kernel_rem_pio2+0x5ee>
 800ef4e:	4645      	mov	r5, r8
 800ef50:	2d01      	cmp	r5, #1
 800ef52:	f1a4 0408 	sub.w	r4, r4, #8
 800ef56:	f300 8087 	bgt.w	800f068 <__kernel_rem_pio2+0x630>
 800ef5a:	9c05      	ldr	r4, [sp, #20]
 800ef5c:	ab48      	add	r3, sp, #288	@ 0x120
 800ef5e:	441c      	add	r4, r3
 800ef60:	2000      	movs	r0, #0
 800ef62:	2100      	movs	r1, #0
 800ef64:	f1b8 0f01 	cmp.w	r8, #1
 800ef68:	f300 809c 	bgt.w	800f0a4 <__kernel_rem_pio2+0x66c>
 800ef6c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800ef70:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800ef74:	f1b9 0f00 	cmp.w	r9, #0
 800ef78:	f040 80a6 	bne.w	800f0c8 <__kernel_rem_pio2+0x690>
 800ef7c:	9b04      	ldr	r3, [sp, #16]
 800ef7e:	e9c3 7800 	strd	r7, r8, [r3]
 800ef82:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ef86:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ef8a:	e7c6      	b.n	800ef1a <__kernel_rem_pio2+0x4e2>
 800ef8c:	9d05      	ldr	r5, [sp, #20]
 800ef8e:	ab48      	add	r3, sp, #288	@ 0x120
 800ef90:	441d      	add	r5, r3
 800ef92:	4644      	mov	r4, r8
 800ef94:	2000      	movs	r0, #0
 800ef96:	2100      	movs	r1, #0
 800ef98:	2c00      	cmp	r4, #0
 800ef9a:	da35      	bge.n	800f008 <__kernel_rem_pio2+0x5d0>
 800ef9c:	f1b9 0f00 	cmp.w	r9, #0
 800efa0:	d038      	beq.n	800f014 <__kernel_rem_pio2+0x5dc>
 800efa2:	4602      	mov	r2, r0
 800efa4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800efa8:	9c04      	ldr	r4, [sp, #16]
 800efaa:	e9c4 2300 	strd	r2, r3, [r4]
 800efae:	4602      	mov	r2, r0
 800efb0:	460b      	mov	r3, r1
 800efb2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800efb6:	f7f1 f967 	bl	8000288 <__aeabi_dsub>
 800efba:	ad4a      	add	r5, sp, #296	@ 0x128
 800efbc:	2401      	movs	r4, #1
 800efbe:	45a0      	cmp	r8, r4
 800efc0:	da2b      	bge.n	800f01a <__kernel_rem_pio2+0x5e2>
 800efc2:	f1b9 0f00 	cmp.w	r9, #0
 800efc6:	d002      	beq.n	800efce <__kernel_rem_pio2+0x596>
 800efc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800efcc:	4619      	mov	r1, r3
 800efce:	9b04      	ldr	r3, [sp, #16]
 800efd0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800efd4:	e7a1      	b.n	800ef1a <__kernel_rem_pio2+0x4e2>
 800efd6:	9c05      	ldr	r4, [sp, #20]
 800efd8:	ab48      	add	r3, sp, #288	@ 0x120
 800efda:	441c      	add	r4, r3
 800efdc:	2000      	movs	r0, #0
 800efde:	2100      	movs	r1, #0
 800efe0:	f1b8 0f00 	cmp.w	r8, #0
 800efe4:	da09      	bge.n	800effa <__kernel_rem_pio2+0x5c2>
 800efe6:	f1b9 0f00 	cmp.w	r9, #0
 800efea:	d002      	beq.n	800eff2 <__kernel_rem_pio2+0x5ba>
 800efec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eff0:	4619      	mov	r1, r3
 800eff2:	9b04      	ldr	r3, [sp, #16]
 800eff4:	e9c3 0100 	strd	r0, r1, [r3]
 800eff8:	e78f      	b.n	800ef1a <__kernel_rem_pio2+0x4e2>
 800effa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800effe:	f7f1 f945 	bl	800028c <__adddf3>
 800f002:	f108 38ff 	add.w	r8, r8, #4294967295
 800f006:	e7eb      	b.n	800efe0 <__kernel_rem_pio2+0x5a8>
 800f008:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800f00c:	f7f1 f93e 	bl	800028c <__adddf3>
 800f010:	3c01      	subs	r4, #1
 800f012:	e7c1      	b.n	800ef98 <__kernel_rem_pio2+0x560>
 800f014:	4602      	mov	r2, r0
 800f016:	460b      	mov	r3, r1
 800f018:	e7c6      	b.n	800efa8 <__kernel_rem_pio2+0x570>
 800f01a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f01e:	f7f1 f935 	bl	800028c <__adddf3>
 800f022:	3401      	adds	r4, #1
 800f024:	e7cb      	b.n	800efbe <__kernel_rem_pio2+0x586>
 800f026:	ed95 7b00 	vldr	d7, [r5]
 800f02a:	ed8d 7b00 	vstr	d7, [sp]
 800f02e:	ed95 7b02 	vldr	d7, [r5, #8]
 800f032:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f036:	ec53 2b17 	vmov	r2, r3, d7
 800f03a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f03e:	f7f1 f925 	bl	800028c <__adddf3>
 800f042:	4602      	mov	r2, r0
 800f044:	460b      	mov	r3, r1
 800f046:	4606      	mov	r6, r0
 800f048:	460f      	mov	r7, r1
 800f04a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f04e:	f7f1 f91b 	bl	8000288 <__aeabi_dsub>
 800f052:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f056:	f7f1 f919 	bl	800028c <__adddf3>
 800f05a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f05e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800f062:	e9c5 6700 	strd	r6, r7, [r5]
 800f066:	e76d      	b.n	800ef44 <__kernel_rem_pio2+0x50c>
 800f068:	ed94 7b00 	vldr	d7, [r4]
 800f06c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800f070:	ec51 0b17 	vmov	r0, r1, d7
 800f074:	4652      	mov	r2, sl
 800f076:	465b      	mov	r3, fp
 800f078:	ed8d 7b00 	vstr	d7, [sp]
 800f07c:	f7f1 f906 	bl	800028c <__adddf3>
 800f080:	4602      	mov	r2, r0
 800f082:	460b      	mov	r3, r1
 800f084:	4606      	mov	r6, r0
 800f086:	460f      	mov	r7, r1
 800f088:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f08c:	f7f1 f8fc 	bl	8000288 <__aeabi_dsub>
 800f090:	4652      	mov	r2, sl
 800f092:	465b      	mov	r3, fp
 800f094:	f7f1 f8fa 	bl	800028c <__adddf3>
 800f098:	3d01      	subs	r5, #1
 800f09a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f09e:	e9c4 6700 	strd	r6, r7, [r4]
 800f0a2:	e755      	b.n	800ef50 <__kernel_rem_pio2+0x518>
 800f0a4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f0a8:	f7f1 f8f0 	bl	800028c <__adddf3>
 800f0ac:	f108 38ff 	add.w	r8, r8, #4294967295
 800f0b0:	e758      	b.n	800ef64 <__kernel_rem_pio2+0x52c>
 800f0b2:	bf00      	nop
 800f0b4:	f3af 8000 	nop.w
	...
 800f0c0:	41700000 	.word	0x41700000
 800f0c4:	3e700000 	.word	0x3e700000
 800f0c8:	9b04      	ldr	r3, [sp, #16]
 800f0ca:	9a04      	ldr	r2, [sp, #16]
 800f0cc:	601f      	str	r7, [r3, #0]
 800f0ce:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800f0d2:	605c      	str	r4, [r3, #4]
 800f0d4:	609d      	str	r5, [r3, #8]
 800f0d6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f0da:	60d3      	str	r3, [r2, #12]
 800f0dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f0e0:	6110      	str	r0, [r2, #16]
 800f0e2:	6153      	str	r3, [r2, #20]
 800f0e4:	e719      	b.n	800ef1a <__kernel_rem_pio2+0x4e2>
 800f0e6:	bf00      	nop

0800f0e8 <scalbn>:
 800f0e8:	b570      	push	{r4, r5, r6, lr}
 800f0ea:	ec55 4b10 	vmov	r4, r5, d0
 800f0ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f0f2:	4606      	mov	r6, r0
 800f0f4:	462b      	mov	r3, r5
 800f0f6:	b991      	cbnz	r1, 800f11e <scalbn+0x36>
 800f0f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f0fc:	4323      	orrs	r3, r4
 800f0fe:	d03d      	beq.n	800f17c <scalbn+0x94>
 800f100:	4b35      	ldr	r3, [pc, #212]	@ (800f1d8 <scalbn+0xf0>)
 800f102:	4620      	mov	r0, r4
 800f104:	4629      	mov	r1, r5
 800f106:	2200      	movs	r2, #0
 800f108:	f7f1 fa76 	bl	80005f8 <__aeabi_dmul>
 800f10c:	4b33      	ldr	r3, [pc, #204]	@ (800f1dc <scalbn+0xf4>)
 800f10e:	429e      	cmp	r6, r3
 800f110:	4604      	mov	r4, r0
 800f112:	460d      	mov	r5, r1
 800f114:	da0f      	bge.n	800f136 <scalbn+0x4e>
 800f116:	a328      	add	r3, pc, #160	@ (adr r3, 800f1b8 <scalbn+0xd0>)
 800f118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11c:	e01e      	b.n	800f15c <scalbn+0x74>
 800f11e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f122:	4291      	cmp	r1, r2
 800f124:	d10b      	bne.n	800f13e <scalbn+0x56>
 800f126:	4622      	mov	r2, r4
 800f128:	4620      	mov	r0, r4
 800f12a:	4629      	mov	r1, r5
 800f12c:	f7f1 f8ae 	bl	800028c <__adddf3>
 800f130:	4604      	mov	r4, r0
 800f132:	460d      	mov	r5, r1
 800f134:	e022      	b.n	800f17c <scalbn+0x94>
 800f136:	460b      	mov	r3, r1
 800f138:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f13c:	3936      	subs	r1, #54	@ 0x36
 800f13e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f142:	4296      	cmp	r6, r2
 800f144:	dd0d      	ble.n	800f162 <scalbn+0x7a>
 800f146:	2d00      	cmp	r5, #0
 800f148:	a11d      	add	r1, pc, #116	@ (adr r1, 800f1c0 <scalbn+0xd8>)
 800f14a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f14e:	da02      	bge.n	800f156 <scalbn+0x6e>
 800f150:	a11d      	add	r1, pc, #116	@ (adr r1, 800f1c8 <scalbn+0xe0>)
 800f152:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f156:	a31a      	add	r3, pc, #104	@ (adr r3, 800f1c0 <scalbn+0xd8>)
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	f7f1 fa4c 	bl	80005f8 <__aeabi_dmul>
 800f160:	e7e6      	b.n	800f130 <scalbn+0x48>
 800f162:	1872      	adds	r2, r6, r1
 800f164:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f168:	428a      	cmp	r2, r1
 800f16a:	dcec      	bgt.n	800f146 <scalbn+0x5e>
 800f16c:	2a00      	cmp	r2, #0
 800f16e:	dd08      	ble.n	800f182 <scalbn+0x9a>
 800f170:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f174:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f178:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f17c:	ec45 4b10 	vmov	d0, r4, r5
 800f180:	bd70      	pop	{r4, r5, r6, pc}
 800f182:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f186:	da08      	bge.n	800f19a <scalbn+0xb2>
 800f188:	2d00      	cmp	r5, #0
 800f18a:	a10b      	add	r1, pc, #44	@ (adr r1, 800f1b8 <scalbn+0xd0>)
 800f18c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f190:	dac1      	bge.n	800f116 <scalbn+0x2e>
 800f192:	a10f      	add	r1, pc, #60	@ (adr r1, 800f1d0 <scalbn+0xe8>)
 800f194:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f198:	e7bd      	b.n	800f116 <scalbn+0x2e>
 800f19a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f19e:	3236      	adds	r2, #54	@ 0x36
 800f1a0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f1a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800f1e0 <scalbn+0xf8>)
 800f1ac:	4629      	mov	r1, r5
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	e7d4      	b.n	800f15c <scalbn+0x74>
 800f1b2:	bf00      	nop
 800f1b4:	f3af 8000 	nop.w
 800f1b8:	c2f8f359 	.word	0xc2f8f359
 800f1bc:	01a56e1f 	.word	0x01a56e1f
 800f1c0:	8800759c 	.word	0x8800759c
 800f1c4:	7e37e43c 	.word	0x7e37e43c
 800f1c8:	8800759c 	.word	0x8800759c
 800f1cc:	fe37e43c 	.word	0xfe37e43c
 800f1d0:	c2f8f359 	.word	0xc2f8f359
 800f1d4:	81a56e1f 	.word	0x81a56e1f
 800f1d8:	43500000 	.word	0x43500000
 800f1dc:	ffff3cb0 	.word	0xffff3cb0
 800f1e0:	3c900000 	.word	0x3c900000
 800f1e4:	00000000 	.word	0x00000000

0800f1e8 <floor>:
 800f1e8:	ec51 0b10 	vmov	r0, r1, d0
 800f1ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f1f8:	2e13      	cmp	r6, #19
 800f1fa:	460c      	mov	r4, r1
 800f1fc:	4605      	mov	r5, r0
 800f1fe:	4680      	mov	r8, r0
 800f200:	dc34      	bgt.n	800f26c <floor+0x84>
 800f202:	2e00      	cmp	r6, #0
 800f204:	da17      	bge.n	800f236 <floor+0x4e>
 800f206:	a332      	add	r3, pc, #200	@ (adr r3, 800f2d0 <floor+0xe8>)
 800f208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20c:	f7f1 f83e 	bl	800028c <__adddf3>
 800f210:	2200      	movs	r2, #0
 800f212:	2300      	movs	r3, #0
 800f214:	f7f1 fc80 	bl	8000b18 <__aeabi_dcmpgt>
 800f218:	b150      	cbz	r0, 800f230 <floor+0x48>
 800f21a:	2c00      	cmp	r4, #0
 800f21c:	da55      	bge.n	800f2ca <floor+0xe2>
 800f21e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f222:	432c      	orrs	r4, r5
 800f224:	2500      	movs	r5, #0
 800f226:	42ac      	cmp	r4, r5
 800f228:	4c2b      	ldr	r4, [pc, #172]	@ (800f2d8 <floor+0xf0>)
 800f22a:	bf08      	it	eq
 800f22c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f230:	4621      	mov	r1, r4
 800f232:	4628      	mov	r0, r5
 800f234:	e023      	b.n	800f27e <floor+0x96>
 800f236:	4f29      	ldr	r7, [pc, #164]	@ (800f2dc <floor+0xf4>)
 800f238:	4137      	asrs	r7, r6
 800f23a:	ea01 0307 	and.w	r3, r1, r7
 800f23e:	4303      	orrs	r3, r0
 800f240:	d01d      	beq.n	800f27e <floor+0x96>
 800f242:	a323      	add	r3, pc, #140	@ (adr r3, 800f2d0 <floor+0xe8>)
 800f244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f248:	f7f1 f820 	bl	800028c <__adddf3>
 800f24c:	2200      	movs	r2, #0
 800f24e:	2300      	movs	r3, #0
 800f250:	f7f1 fc62 	bl	8000b18 <__aeabi_dcmpgt>
 800f254:	2800      	cmp	r0, #0
 800f256:	d0eb      	beq.n	800f230 <floor+0x48>
 800f258:	2c00      	cmp	r4, #0
 800f25a:	bfbe      	ittt	lt
 800f25c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f260:	4133      	asrlt	r3, r6
 800f262:	18e4      	addlt	r4, r4, r3
 800f264:	ea24 0407 	bic.w	r4, r4, r7
 800f268:	2500      	movs	r5, #0
 800f26a:	e7e1      	b.n	800f230 <floor+0x48>
 800f26c:	2e33      	cmp	r6, #51	@ 0x33
 800f26e:	dd0a      	ble.n	800f286 <floor+0x9e>
 800f270:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f274:	d103      	bne.n	800f27e <floor+0x96>
 800f276:	4602      	mov	r2, r0
 800f278:	460b      	mov	r3, r1
 800f27a:	f7f1 f807 	bl	800028c <__adddf3>
 800f27e:	ec41 0b10 	vmov	d0, r0, r1
 800f282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f286:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f28a:	f04f 37ff 	mov.w	r7, #4294967295
 800f28e:	40df      	lsrs	r7, r3
 800f290:	4207      	tst	r7, r0
 800f292:	d0f4      	beq.n	800f27e <floor+0x96>
 800f294:	a30e      	add	r3, pc, #56	@ (adr r3, 800f2d0 <floor+0xe8>)
 800f296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29a:	f7f0 fff7 	bl	800028c <__adddf3>
 800f29e:	2200      	movs	r2, #0
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	f7f1 fc39 	bl	8000b18 <__aeabi_dcmpgt>
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	d0c2      	beq.n	800f230 <floor+0x48>
 800f2aa:	2c00      	cmp	r4, #0
 800f2ac:	da0a      	bge.n	800f2c4 <floor+0xdc>
 800f2ae:	2e14      	cmp	r6, #20
 800f2b0:	d101      	bne.n	800f2b6 <floor+0xce>
 800f2b2:	3401      	adds	r4, #1
 800f2b4:	e006      	b.n	800f2c4 <floor+0xdc>
 800f2b6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	40b3      	lsls	r3, r6
 800f2be:	441d      	add	r5, r3
 800f2c0:	4545      	cmp	r5, r8
 800f2c2:	d3f6      	bcc.n	800f2b2 <floor+0xca>
 800f2c4:	ea25 0507 	bic.w	r5, r5, r7
 800f2c8:	e7b2      	b.n	800f230 <floor+0x48>
 800f2ca:	2500      	movs	r5, #0
 800f2cc:	462c      	mov	r4, r5
 800f2ce:	e7af      	b.n	800f230 <floor+0x48>
 800f2d0:	8800759c 	.word	0x8800759c
 800f2d4:	7e37e43c 	.word	0x7e37e43c
 800f2d8:	bff00000 	.word	0xbff00000
 800f2dc:	000fffff 	.word	0x000fffff

0800f2e0 <_init>:
 800f2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2e2:	bf00      	nop
 800f2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2e6:	bc08      	pop	{r3}
 800f2e8:	469e      	mov	lr, r3
 800f2ea:	4770      	bx	lr

0800f2ec <_fini>:
 800f2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ee:	bf00      	nop
 800f2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2f2:	bc08      	pop	{r3}
 800f2f4:	469e      	mov	lr, r3
 800f2f6:	4770      	bx	lr
