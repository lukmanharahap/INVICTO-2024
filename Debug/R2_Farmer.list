
R2_Farmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011598  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f28  08011728  08011728  00012728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012650  08012650  000142b0  2**0
                  CONTENTS
  4 .ARM          00000008  08012650  08012650  00013650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012658  08012658  000142b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012658  08012658  00013658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801265c  0801265c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b0  20000000  08012660  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000142b0  2**0
                  CONTENTS
 10 .bss          000005b4  200002b0  200002b0  000142b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000864  20000864  000142b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000142b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015306  00000000  00000000  000142e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c80  00000000  00000000  000295e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  0002c268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb4  00000000  00000000  0002d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012aac  00000000  00000000  0002e3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000059e4  00000000  00000000  00040e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0004683c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006968  00000000  00000000  00046880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0004d1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b0 	.word	0x200002b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011710 	.word	0x08011710

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b4 	.word	0x200002b4
 80001cc:	08011710 	.word	0x08011710

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <motorDirection>:
        {GPIOD, GPIO_PIN_3, GPIOD, GPIO_PIN_4, TIM_CHANNEL_3, &htim2},		//9
        {GPIOB, GPIO_PIN_1, GPIOB, GPIO_PIN_0, TIM_CHANNEL_4, &htim2}		//10
};

void motorDirection(uint8_t motor, uint8_t direction)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
    Motor *currentMotor = &motors[motor - 1];
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <motorDirection+0x74>)
 8001002:	4413      	add	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
    GPIO_PinState dir1_state;
    GPIO_PinState dir2_state;
    switch (direction)
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d006      	beq.n	800101a <motorDirection+0x36>
 800100c:	2b02      	cmp	r3, #2
 800100e:	d109      	bne.n	8001024 <motorDirection+0x40>
    {
    case forward:
        dir1_state = GPIO_PIN_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_SET;
 8001014:	2301      	movs	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
        break;
 8001018:	e009      	b.n	800102e <motorDirection+0x4a>
    case backward:
        dir1_state = GPIO_PIN_SET;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	73bb      	strb	r3, [r7, #14]
        break;
 8001022:	e004      	b.n	800102e <motorDirection+0x4a>
    default:
        dir1_state = GPIO_PIN_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
        break;
 800102c:	bf00      	nop
    }
    HAL_GPIO_WritePin(currentMotor->dir1_port, currentMotor->dir1_pin, dir1_state);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	4619      	mov	r1, r3
 800103a:	f007 f8af 	bl	800819c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(currentMotor->dir2_port, currentMotor->dir2_pin, dir2_state);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	6898      	ldr	r0, [r3, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	899b      	ldrh	r3, [r3, #12]
 8001046:	7bba      	ldrb	r2, [r7, #14]
 8001048:	4619      	mov	r1, r3
 800104a:	f007 f8a7 	bl	800819c <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000

0800105c <setMotorSpeed>:

void setMotorSpeed(uint8_t motor, double speed)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	ed87 0b00 	vstr	d0, [r7]
 8001068:	73fb      	strb	r3, [r7, #15]
    Motor *currentMotor = &motors[motor - 1];
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4a33      	ldr	r2, [pc, #204]	@ (8001144 <setMotorSpeed+0xe8>)
 8001078:	4413      	add	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
    if (speed > 0)
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001088:	f7ff fd46 	bl	8000b18 <__aeabi_dcmpgt>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <setMotorSpeed+0x42>
    {
        motorDirection(motor, forward);
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffa4 	bl	8000fe4 <motorDirection>
 800109c:	e01b      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else if (speed < 0)
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010aa:	f7ff fd17 	bl	8000adc <__aeabi_dcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <setMotorSpeed+0x70>
    {
        motorDirection(motor, backward);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2101      	movs	r1, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff93 	bl	8000fe4 <motorDirection>
        speed = -speed;
 80010be:	683c      	ldr	r4, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80010c6:	e9c7 4500 	strd	r4, r5, [r7]
 80010ca:	e004      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else
    {
        motorDirection(motor, stop);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff87 	bl	8000fe4 <motorDirection>
    }
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	7b9b      	ldrb	r3, [r3, #14]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <setMotorSpeed+0x96>
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	681c      	ldr	r4, [r3, #0]
 80010e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010e8:	f7ff fd5e 	bl	8000ba8 <__aeabi_d2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80010f0:	e024      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	7b9b      	ldrb	r3, [r3, #14]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d109      	bne.n	800110e <setMotorSpeed+0xb2>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800110c:	e016      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	7b9b      	ldrb	r3, [r3, #14]
 8001112:	2b08      	cmp	r3, #8
 8001114:	d109      	bne.n	800112a <setMotorSpeed+0xce>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001120:	f7ff fd42 	bl	8000ba8 <__aeabi_d2uiz>
 8001124:	4603      	mov	r3, r0
 8001126:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001128:	e008      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001134:	f7ff fd38 	bl	8000ba8 <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bdb0      	pop	{r4, r5, r7, pc}
 8001144:	20000000 	.word	0x20000000

08001148 <Inverse_Kinematics>:

void Inverse_Kinematics(double Vx, double Vy, double W)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b0b8      	sub	sp, #224	@ 0xe0
 800114c:	af00      	add	r7, sp, #0
 800114e:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
 8001152:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8001156:	ed87 2b18 	vstr	d2, [r7, #96]	@ 0x60
    double R = 7.6;
 800115a:	a3c0      	add	r3, pc, #768	@ (adr r3, 800145c <Inverse_Kinematics+0x314>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
    double minThreshold = 1000;
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4bbb      	ldr	r3, [pc, #748]	@ (8001458 <Inverse_Kinematics+0x310>)
 800116a:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
    double wheelMaxSpeed = 5500;
 800116e:	a3a8      	add	r3, pc, #672	@ (adr r3, 8001410 <Inverse_Kinematics+0x2c8>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double M1 = (-sin(M_PI_4) * Vx + cos(M_PI_4) * Vy - R * W);
 8001178:	a3a7      	add	r3, pc, #668	@ (adr r3, 8001418 <Inverse_Kinematics+0x2d0>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001182:	f7ff fa39 	bl	80005f8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4614      	mov	r4, r2
 800118c:	461d      	mov	r5, r3
 800118e:	a3a4      	add	r3, pc, #656	@ (adr r3, 8001420 <Inverse_Kinematics+0x2d8>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001198:	f7ff fa2e 	bl	80005f8 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4620      	mov	r0, r4
 80011a2:	4629      	mov	r1, r5
 80011a4:	f7ff f872 	bl	800028c <__adddf3>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4614      	mov	r4, r2
 80011ae:	461d      	mov	r5, r3
 80011b0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80011b4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80011b8:	f7ff fa1e 	bl	80005f8 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff f860 	bl	8000288 <__aeabi_dsub>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W);
 80011d0:	a395      	add	r3, pc, #596	@ (adr r3, 8001428 <Inverse_Kinematics+0x2e0>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80011da:	f7ff fa0d 	bl	80005f8 <__aeabi_dmul>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4614      	mov	r4, r2
 80011e4:	461d      	mov	r5, r3
 80011e6:	a38c      	add	r3, pc, #560	@ (adr r3, 8001418 <Inverse_Kinematics+0x2d0>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80011f0:	f7ff fa02 	bl	80005f8 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4620      	mov	r0, r4
 80011fa:	4629      	mov	r1, r5
 80011fc:	f7ff f846 	bl	800028c <__adddf3>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4614      	mov	r4, r2
 8001206:	461d      	mov	r5, r3
 8001208:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800120c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001210:	f7ff f9f2 	bl	80005f8 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff f834 	bl	8000288 <__aeabi_dsub>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    double M3 = (-sin(5 * M_PI_4) * Vx * 0.78 + cos(5 * M_PI_4) * Vy - R * W); //0.952702703
 8001228:	a381      	add	r3, pc, #516	@ (adr r3, 8001430 <Inverse_Kinematics+0x2e8>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001232:	f7ff f9e1 	bl	80005f8 <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	a37e      	add	r3, pc, #504	@ (adr r3, 8001438 <Inverse_Kinematics+0x2f0>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f9d8 	bl	80005f8 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4614      	mov	r4, r2
 800124e:	461d      	mov	r5, r3
 8001250:	a37b      	add	r3, pc, #492	@ (adr r3, 8001440 <Inverse_Kinematics+0x2f8>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800125a:	f7ff f9cd 	bl	80005f8 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff f811 	bl	800028c <__adddf3>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4614      	mov	r4, r2
 8001270:	461d      	mov	r5, r3
 8001272:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001276:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800127a:	f7ff f9bd 	bl	80005f8 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4620      	mov	r0, r4
 8001284:	4629      	mov	r1, r5
 8001286:	f7fe ffff 	bl	8000288 <__aeabi_dsub>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
    double M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W); // 0.893632381
 8001292:	a36d      	add	r3, pc, #436	@ (adr r3, 8001448 <Inverse_Kinematics+0x300>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800129c:	f7ff f9ac 	bl	80005f8 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4614      	mov	r4, r2
 80012a6:	461d      	mov	r5, r3
 80012a8:	a369      	add	r3, pc, #420	@ (adr r3, 8001450 <Inverse_Kinematics+0x308>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80012b2:	f7ff f9a1 	bl	80005f8 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7fe ffe5 	bl	800028c <__adddf3>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4614      	mov	r4, r2
 80012c8:	461d      	mov	r5, r3
 80012ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80012ce:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80012d2:	f7ff f991 	bl	80005f8 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4620      	mov	r0, r4
 80012dc:	4629      	mov	r1, r5
 80012de:	f7fe ffd3 	bl	8000288 <__aeabi_dsub>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0

    double maxM = fmax(fabs(M1), fmax(fabs(M2), fmax(fabs(M3), fabs(M4))));
 80012ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80012ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80012f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8001300:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001304:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001308:	637b      	str	r3, [r7, #52]	@ 0x34
 800130a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800130e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001314:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800131a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800131e:	623b      	str	r3, [r7, #32]
 8001320:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001324:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
 800132a:	ed97 1b08 	vldr	d1, [r7, #32]
 800132e:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001332:	f00e fd44 	bl	800fdbe <fmax>
 8001336:	eeb0 7a40 	vmov.f32	s14, s0
 800133a:	eef0 7a60 	vmov.f32	s15, s1
 800133e:	eeb0 1a47 	vmov.f32	s2, s14
 8001342:	eef0 1a67 	vmov.f32	s3, s15
 8001346:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800134a:	f00e fd38 	bl	800fdbe <fmax>
 800134e:	eeb0 7a40 	vmov.f32	s14, s0
 8001352:	eef0 7a60 	vmov.f32	s15, s1
 8001356:	eeb0 1a47 	vmov.f32	s2, s14
 800135a:	eef0 1a67 	vmov.f32	s3, s15
 800135e:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001362:	f00e fd2c 	bl	800fdbe <fmax>
 8001366:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0

    if (maxM > wheelMaxSpeed) {
 800136a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800136e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001372:	f7ff fbd1 	bl	8000b18 <__aeabi_dcmpgt>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d031      	beq.n	80013e0 <Inverse_Kinematics+0x298>
        double scale = wheelMaxSpeed / maxM;
 800137c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001380:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001384:	f7ff fa62 	bl	800084c <__aeabi_ddiv>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        M1 *= scale;
 8001390:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001394:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001398:	f7ff f92e 	bl	80005f8 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
        M2 *= scale;
 80013a4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013a8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80013ac:	f7ff f924 	bl	80005f8 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
        M3 *= scale;
 80013b8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013bc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80013c0:	f7ff f91a 	bl	80005f8 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
        M4 *= scale;
 80013cc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013d0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80013d4:	f7ff f910 	bl	80005f8 <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
    }

    double V1 = (fabs(M1) > minThreshold) ? M1 : (M1 < 0) ? -minThreshold : ((M1 > 0) ? minThreshold : 0);
 80013e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013f4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80013f8:	f7ff fb70 	bl	8000adc <__aeabi_dcmplt>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d034      	beq.n	800146c <Inverse_Kinematics+0x324>
 8001402:	ed97 7b36 	vldr	d7, [r7, #216]	@ 0xd8
 8001406:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800140a:	e057      	b.n	80014bc <Inverse_Kinematics+0x374>
 800140c:	f3af 8000 	nop.w
 8001410:	00000000 	.word	0x00000000
 8001414:	40b57c00 	.word	0x40b57c00
 8001418:	667f3bcc 	.word	0x667f3bcc
 800141c:	bfe6a09e 	.word	0xbfe6a09e
 8001420:	667f3bcd 	.word	0x667f3bcd
 8001424:	3fe6a09e 	.word	0x3fe6a09e
 8001428:	667f3bcd 	.word	0x667f3bcd
 800142c:	bfe6a09e 	.word	0xbfe6a09e
 8001430:	667f3bcc 	.word	0x667f3bcc
 8001434:	3fe6a09e 	.word	0x3fe6a09e
 8001438:	8f5c28f6 	.word	0x8f5c28f6
 800143c:	3fe8f5c2 	.word	0x3fe8f5c2
 8001440:	667f3bce 	.word	0x667f3bce
 8001444:	bfe6a09e 	.word	0xbfe6a09e
 8001448:	667f3bce 	.word	0x667f3bce
 800144c:	3fe6a09e 	.word	0x3fe6a09e
 8001450:	667f3bcb 	.word	0x667f3bcb
 8001454:	3fe6a09e 	.word	0x3fe6a09e
 8001458:	408f4000 	.word	0x408f4000
 800145c:	66666666 	.word	0x66666666
 8001460:	401e6666 	.word	0x401e6666
	...
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001478:	f7ff fb30 	bl	8000adc <__aeabi_dcmplt>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d008      	beq.n	8001494 <Inverse_Kinematics+0x34c>
 8001482:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001486:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001488:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800148c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001490:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001492:	e013      	b.n	80014bc <Inverse_Kinematics+0x374>
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80014a0:	f7ff fb3a 	bl	8000b18 <__aeabi_dcmpgt>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d004      	beq.n	80014b4 <Inverse_Kinematics+0x36c>
 80014aa:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 80014ae:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80014b2:	e003      	b.n	80014bc <Inverse_Kinematics+0x374>
 80014b4:	ed1f 7b15 	vldr	d7, [pc, #-84]	@ 8001464 <Inverse_Kinematics+0x31c>
 80014b8:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80014bc:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80014c0:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
    double V2 = (fabs(M2) > minThreshold) ? M2 : (M2 < 0) ? -minThreshold : ((M2 > 0) ? minThreshold : 0);
 80014c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80014ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014d8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80014dc:	f7ff fafe 	bl	8000adc <__aeabi_dcmplt>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d004      	beq.n	80014f0 <Inverse_Kinematics+0x3a8>
 80014e6:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 80014ea:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 80014ee:	e027      	b.n	8001540 <Inverse_Kinematics+0x3f8>
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80014fc:	f7ff faee 	bl	8000adc <__aeabi_dcmplt>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d008      	beq.n	8001518 <Inverse_Kinematics+0x3d0>
 8001506:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800150a:	653b      	str	r3, [r7, #80]	@ 0x50
 800150c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001510:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001514:	657b      	str	r3, [r7, #84]	@ 0x54
 8001516:	e013      	b.n	8001540 <Inverse_Kinematics+0x3f8>
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001524:	f7ff faf8 	bl	8000b18 <__aeabi_dcmpgt>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d004      	beq.n	8001538 <Inverse_Kinematics+0x3f0>
 800152e:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8001532:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001536:	e003      	b.n	8001540 <Inverse_Kinematics+0x3f8>
 8001538:	ed1f 7b36 	vldr	d7, [pc, #-216]	@ 8001464 <Inverse_Kinematics+0x31c>
 800153c:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001540:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001544:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    double V3 = (fabs(M3) > minThreshold) ? M3 : (M3 < 0) ? -minThreshold : ((M3 > 0) ? minThreshold : 0);
 8001548:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001552:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800155c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001560:	f7ff fabc 	bl	8000adc <__aeabi_dcmplt>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d004      	beq.n	8001574 <Inverse_Kinematics+0x42c>
 800156a:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 800156e:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 8001572:	e027      	b.n	80015c4 <Inverse_Kinematics+0x47c>
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001580:	f7ff faac 	bl	8000adc <__aeabi_dcmplt>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d008      	beq.n	800159c <Inverse_Kinematics+0x454>
 800158a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800158e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001590:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001594:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001598:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800159a:	e013      	b.n	80015c4 <Inverse_Kinematics+0x47c>
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80015a8:	f7ff fab6 	bl	8000b18 <__aeabi_dcmpgt>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d004      	beq.n	80015bc <Inverse_Kinematics+0x474>
 80015b2:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 80015b6:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80015ba:	e003      	b.n	80015c4 <Inverse_Kinematics+0x47c>
 80015bc:	ed1f 7b57 	vldr	d7, [pc, #-348]	@ 8001464 <Inverse_Kinematics+0x31c>
 80015c0:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80015c4:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80015c8:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    double V4 = (fabs(M4) > minThreshold) ? M4 : (M4 < 0) ? -minThreshold : ((M4 > 0) ? minThreshold : 0);
 80015cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80015d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015e0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80015e4:	f7ff fa7a 	bl	8000adc <__aeabi_dcmplt>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <Inverse_Kinematics+0x4b0>
 80015ee:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 80015f2:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 80015f6:	e027      	b.n	8001648 <Inverse_Kinematics+0x500>
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001604:	f7ff fa6a 	bl	8000adc <__aeabi_dcmplt>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d008      	beq.n	8001620 <Inverse_Kinematics+0x4d8>
 800160e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001612:	643b      	str	r3, [r7, #64]	@ 0x40
 8001614:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001618:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800161c:	647b      	str	r3, [r7, #68]	@ 0x44
 800161e:	e013      	b.n	8001648 <Inverse_Kinematics+0x500>
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800162c:	f7ff fa74 	bl	8000b18 <__aeabi_dcmpgt>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d004      	beq.n	8001640 <Inverse_Kinematics+0x4f8>
 8001636:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 800163a:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 800163e:	e003      	b.n	8001648 <Inverse_Kinematics+0x500>
 8001640:	ed1f 7b78 	vldr	d7, [pc, #-480]	@ 8001464 <Inverse_Kinematics+0x31c>
 8001644:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001648:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800164c:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78

    setMotorSpeed(6, (int)V1);
 8001650:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001654:	f7ff fa80 	bl	8000b58 <__aeabi_d2iz>
 8001658:	4603      	mov	r3, r0
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff62 	bl	8000524 <__aeabi_i2d>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	ec43 2b10 	vmov	d0, r2, r3
 8001668:	2006      	movs	r0, #6
 800166a:	f7ff fcf7 	bl	800105c <setMotorSpeed>
    setMotorSpeed(5, (int)V2);
 800166e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001672:	f7ff fa71 	bl	8000b58 <__aeabi_d2iz>
 8001676:	4603      	mov	r3, r0
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff53 	bl	8000524 <__aeabi_i2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	ec43 2b10 	vmov	d0, r2, r3
 8001686:	2005      	movs	r0, #5
 8001688:	f7ff fce8 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, (int)V3);
 800168c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001690:	f7ff fa62 	bl	8000b58 <__aeabi_d2iz>
 8001694:	4603      	mov	r3, r0
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff44 	bl	8000524 <__aeabi_i2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	ec43 2b10 	vmov	d0, r2, r3
 80016a4:	2004      	movs	r0, #4
 80016a6:	f7ff fcd9 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, (int)V4);
 80016aa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80016ae:	f7ff fa53 	bl	8000b58 <__aeabi_d2iz>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ff35 	bl	8000524 <__aeabi_i2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	ec43 2b10 	vmov	d0, r2, r3
 80016c2:	2008      	movs	r0, #8
 80016c4:	f7ff fcca 	bl	800105c <setMotorSpeed>
}
 80016c8:	bf00      	nop
 80016ca:	37e0      	adds	r7, #224	@ 0xe0
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bdb0      	pop	{r4, r5, r7, pc}

080016d0 <left>:

void left(double Vx, double Vy, double W)
{
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b0b8      	sub	sp, #224	@ 0xe0
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
 80016da:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 80016de:	ed87 2b18 	vstr	d2, [r7, #96]	@ 0x60
    double R = 7.6;
 80016e2:	a3c6      	add	r3, pc, #792	@ (adr r3, 80019fc <left+0x32c>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
    double minThreshold = 1000;
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	4bc1      	ldr	r3, [pc, #772]	@ (80019f8 <left+0x328>)
 80016f2:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
    double wheelMaxSpeed = 5500;
 80016f6:	a3ac      	add	r3, pc, #688	@ (adr r3, 80019a8 <left+0x2d8>)
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double M1 = (-sin(M_PI_4) * Vx + cos(M_PI_4) * Vy - R * W);
 8001700:	a3ab      	add	r3, pc, #684	@ (adr r3, 80019b0 <left+0x2e0>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800170a:	f7fe ff75 	bl	80005f8 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4614      	mov	r4, r2
 8001714:	461d      	mov	r5, r3
 8001716:	a3a8      	add	r3, pc, #672	@ (adr r3, 80019b8 <left+0x2e8>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001720:	f7fe ff6a 	bl	80005f8 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4620      	mov	r0, r4
 800172a:	4629      	mov	r1, r5
 800172c:	f7fe fdae 	bl	800028c <__adddf3>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4614      	mov	r4, r2
 8001736:	461d      	mov	r5, r3
 8001738:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800173c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001740:	f7fe ff5a 	bl	80005f8 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4620      	mov	r0, r4
 800174a:	4629      	mov	r1, r5
 800174c:	f7fe fd9c 	bl	8000288 <__aeabi_dsub>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W);
 8001758:	a399      	add	r3, pc, #612	@ (adr r3, 80019c0 <left+0x2f0>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001762:	f7fe ff49 	bl	80005f8 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4614      	mov	r4, r2
 800176c:	461d      	mov	r5, r3
 800176e:	a390      	add	r3, pc, #576	@ (adr r3, 80019b0 <left+0x2e0>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001778:	f7fe ff3e 	bl	80005f8 <__aeabi_dmul>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4620      	mov	r0, r4
 8001782:	4629      	mov	r1, r5
 8001784:	f7fe fd82 	bl	800028c <__adddf3>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4614      	mov	r4, r2
 800178e:	461d      	mov	r5, r3
 8001790:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001794:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001798:	f7fe ff2e 	bl	80005f8 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	f7fe fd70 	bl	8000288 <__aeabi_dsub>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    double M3 = (-sin(5 * M_PI_4) * Vx * 0.9 + cos(5 * M_PI_4) * Vy * 1.1 - R * W); //0.952702703
 80017b0:	a385      	add	r3, pc, #532	@ (adr r3, 80019c8 <left+0x2f8>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80017ba:	f7fe ff1d 	bl	80005f8 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	a382      	add	r3, pc, #520	@ (adr r3, 80019d0 <left+0x300>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe ff14 	bl	80005f8 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4614      	mov	r4, r2
 80017d6:	461d      	mov	r5, r3
 80017d8:	a37f      	add	r3, pc, #508	@ (adr r3, 80019d8 <left+0x308>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80017e2:	f7fe ff09 	bl	80005f8 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	a37c      	add	r3, pc, #496	@ (adr r3, 80019e0 <left+0x310>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7fe ff00 	bl	80005f8 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4620      	mov	r0, r4
 80017fe:	4629      	mov	r1, r5
 8001800:	f7fe fd44 	bl	800028c <__adddf3>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4614      	mov	r4, r2
 800180a:	461d      	mov	r5, r3
 800180c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001810:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001814:	f7fe fef0 	bl	80005f8 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe fd32 	bl	8000288 <__aeabi_dsub>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
    double M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W); // 0.893632381
 800182c:	a36e      	add	r3, pc, #440	@ (adr r3, 80019e8 <left+0x318>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001836:	f7fe fedf 	bl	80005f8 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4614      	mov	r4, r2
 8001840:	461d      	mov	r5, r3
 8001842:	a36b      	add	r3, pc, #428	@ (adr r3, 80019f0 <left+0x320>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800184c:	f7fe fed4 	bl	80005f8 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4620      	mov	r0, r4
 8001856:	4629      	mov	r1, r5
 8001858:	f7fe fd18 	bl	800028c <__adddf3>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4614      	mov	r4, r2
 8001862:	461d      	mov	r5, r3
 8001864:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001868:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800186c:	f7fe fec4 	bl	80005f8 <__aeabi_dmul>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4620      	mov	r0, r4
 8001876:	4629      	mov	r1, r5
 8001878:	f7fe fd06 	bl	8000288 <__aeabi_dsub>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0

    double maxM = fmax(fabs(M1), fmax(fabs(M2), fmax(fabs(M3), fabs(M4))));
 8001884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001888:	63bb      	str	r3, [r7, #56]	@ 0x38
 800188a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800188e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001894:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001898:	633b      	str	r3, [r7, #48]	@ 0x30
 800189a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800189e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80018a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80018a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80018ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80018b8:	623b      	str	r3, [r7, #32]
 80018ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c4:	ed97 1b08 	vldr	d1, [r7, #32]
 80018c8:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80018cc:	f00e fa77 	bl	800fdbe <fmax>
 80018d0:	eeb0 7a40 	vmov.f32	s14, s0
 80018d4:	eef0 7a60 	vmov.f32	s15, s1
 80018d8:	eeb0 1a47 	vmov.f32	s2, s14
 80018dc:	eef0 1a67 	vmov.f32	s3, s15
 80018e0:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80018e4:	f00e fa6b 	bl	800fdbe <fmax>
 80018e8:	eeb0 7a40 	vmov.f32	s14, s0
 80018ec:	eef0 7a60 	vmov.f32	s15, s1
 80018f0:	eeb0 1a47 	vmov.f32	s2, s14
 80018f4:	eef0 1a67 	vmov.f32	s3, s15
 80018f8:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80018fc:	f00e fa5f 	bl	800fdbe <fmax>
 8001900:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0

    if (maxM > wheelMaxSpeed) {
 8001904:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001908:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800190c:	f7ff f904 	bl	8000b18 <__aeabi_dcmpgt>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d031      	beq.n	800197a <left+0x2aa>
        double scale = wheelMaxSpeed / maxM;
 8001916:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800191a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 800191e:	f7fe ff95 	bl	800084c <__aeabi_ddiv>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        M1 *= scale;
 800192a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800192e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001932:	f7fe fe61 	bl	80005f8 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
        M2 *= scale;
 800193e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001942:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001946:	f7fe fe57 	bl	80005f8 <__aeabi_dmul>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
        M3 *= scale;
 8001952:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001956:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800195a:	f7fe fe4d 	bl	80005f8 <__aeabi_dmul>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
        M4 *= scale;
 8001966:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800196a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800196e:	f7fe fe43 	bl	80005f8 <__aeabi_dmul>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
    }

    double V1 = (fabs(M1) > minThreshold) ? M1 : (M1 < 0) ? -minThreshold : ((M1 > 0) ? minThreshold : 0);
 800197a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001984:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800198e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001992:	f7ff f8a3 	bl	8000adc <__aeabi_dcmplt>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d037      	beq.n	8001a0c <left+0x33c>
 800199c:	ed97 7b36 	vldr	d7, [r7, #216]	@ 0xd8
 80019a0:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80019a4:	e05a      	b.n	8001a5c <left+0x38c>
 80019a6:	bf00      	nop
 80019a8:	00000000 	.word	0x00000000
 80019ac:	40b57c00 	.word	0x40b57c00
 80019b0:	667f3bcc 	.word	0x667f3bcc
 80019b4:	bfe6a09e 	.word	0xbfe6a09e
 80019b8:	667f3bcd 	.word	0x667f3bcd
 80019bc:	3fe6a09e 	.word	0x3fe6a09e
 80019c0:	667f3bcd 	.word	0x667f3bcd
 80019c4:	bfe6a09e 	.word	0xbfe6a09e
 80019c8:	667f3bcc 	.word	0x667f3bcc
 80019cc:	3fe6a09e 	.word	0x3fe6a09e
 80019d0:	cccccccd 	.word	0xcccccccd
 80019d4:	3feccccc 	.word	0x3feccccc
 80019d8:	667f3bce 	.word	0x667f3bce
 80019dc:	bfe6a09e 	.word	0xbfe6a09e
 80019e0:	9999999a 	.word	0x9999999a
 80019e4:	3ff19999 	.word	0x3ff19999
 80019e8:	667f3bce 	.word	0x667f3bce
 80019ec:	3fe6a09e 	.word	0x3fe6a09e
 80019f0:	667f3bcb 	.word	0x667f3bcb
 80019f4:	3fe6a09e 	.word	0x3fe6a09e
 80019f8:	408f4000 	.word	0x408f4000
 80019fc:	66666666 	.word	0x66666666
 8001a00:	401e6666 	.word	0x401e6666
	...
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001a18:	f7ff f860 	bl	8000adc <__aeabi_dcmplt>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d008      	beq.n	8001a34 <left+0x364>
 8001a22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a2c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a32:	e013      	b.n	8001a5c <left+0x38c>
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001a40:	f7ff f86a 	bl	8000b18 <__aeabi_dcmpgt>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <left+0x384>
 8001a4a:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8001a4e:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8001a52:	e003      	b.n	8001a5c <left+0x38c>
 8001a54:	ed1f 7b15 	vldr	d7, [pc, #-84]	@ 8001a04 <left+0x334>
 8001a58:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8001a5c:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8001a60:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
    double V2 = (fabs(M2) > minThreshold) ? M2 : (M2 < 0) ? -minThreshold : ((M2 > 0) ? minThreshold : 0);
 8001a64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001a6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a78:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001a7c:	f7ff f82e 	bl	8000adc <__aeabi_dcmplt>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d004      	beq.n	8001a90 <left+0x3c0>
 8001a86:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 8001a8a:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001a8e:	e027      	b.n	8001ae0 <left+0x410>
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001a9c:	f7ff f81e 	bl	8000adc <__aeabi_dcmplt>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d008      	beq.n	8001ab8 <left+0x3e8>
 8001aa6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8001aac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ab0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001ab4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ab6:	e013      	b.n	8001ae0 <left+0x410>
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001ac4:	f7ff f828 	bl	8000b18 <__aeabi_dcmpgt>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <left+0x408>
 8001ace:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8001ad2:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001ad6:	e003      	b.n	8001ae0 <left+0x410>
 8001ad8:	ed1f 7b36 	vldr	d7, [pc, #-216]	@ 8001a04 <left+0x334>
 8001adc:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001ae0:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001ae4:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    double V3 = (fabs(M3) > minThreshold) ? M3 : (M3 < 0) ? -minThreshold : ((M3 > 0) ? minThreshold : 0);
 8001ae8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001af2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001afc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001b00:	f7fe ffec 	bl	8000adc <__aeabi_dcmplt>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <left+0x444>
 8001b0a:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 8001b0e:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 8001b12:	e027      	b.n	8001b64 <left+0x494>
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001b20:	f7fe ffdc 	bl	8000adc <__aeabi_dcmplt>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d008      	beq.n	8001b3c <left+0x46c>
 8001b2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001b34:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b3a:	e013      	b.n	8001b64 <left+0x494>
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001b48:	f7fe ffe6 	bl	8000b18 <__aeabi_dcmpgt>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d004      	beq.n	8001b5c <left+0x48c>
 8001b52:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8001b56:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 8001b5a:	e003      	b.n	8001b64 <left+0x494>
 8001b5c:	ed1f 7b57 	vldr	d7, [pc, #-348]	@ 8001a04 <left+0x334>
 8001b60:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 8001b64:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001b68:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    double V4 = (fabs(M4) > minThreshold) ? M4 : (M4 < 0) ? -minThreshold : ((M4 > 0) ? minThreshold : 0);
 8001b6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b80:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001b84:	f7fe ffaa 	bl	8000adc <__aeabi_dcmplt>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d004      	beq.n	8001b98 <left+0x4c8>
 8001b8e:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 8001b92:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001b96:	e027      	b.n	8001be8 <left+0x518>
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001ba4:	f7fe ff9a 	bl	8000adc <__aeabi_dcmplt>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d008      	beq.n	8001bc0 <left+0x4f0>
 8001bae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001bb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001bb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bb8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bbe:	e013      	b.n	8001be8 <left+0x518>
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001bcc:	f7fe ffa4 	bl	8000b18 <__aeabi_dcmpgt>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d004      	beq.n	8001be0 <left+0x510>
 8001bd6:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8001bda:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001bde:	e003      	b.n	8001be8 <left+0x518>
 8001be0:	ed1f 7b78 	vldr	d7, [pc, #-480]	@ 8001a04 <left+0x334>
 8001be4:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001be8:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001bec:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78

    setMotorSpeed(6, (int)V1);
 8001bf0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001bf4:	f7fe ffb0 	bl	8000b58 <__aeabi_d2iz>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fc92 	bl	8000524 <__aeabi_i2d>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	ec43 2b10 	vmov	d0, r2, r3
 8001c08:	2006      	movs	r0, #6
 8001c0a:	f7ff fa27 	bl	800105c <setMotorSpeed>
    setMotorSpeed(5, (int)V2);
 8001c0e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001c12:	f7fe ffa1 	bl	8000b58 <__aeabi_d2iz>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc83 	bl	8000524 <__aeabi_i2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	ec43 2b10 	vmov	d0, r2, r3
 8001c26:	2005      	movs	r0, #5
 8001c28:	f7ff fa18 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, (int)V3);
 8001c2c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001c30:	f7fe ff92 	bl	8000b58 <__aeabi_d2iz>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fc74 	bl	8000524 <__aeabi_i2d>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	ec43 2b10 	vmov	d0, r2, r3
 8001c44:	2004      	movs	r0, #4
 8001c46:	f7ff fa09 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, (int)V4);
 8001c4a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001c4e:	f7fe ff83 	bl	8000b58 <__aeabi_d2iz>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc65 	bl	8000524 <__aeabi_i2d>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	ec43 2b10 	vmov	d0, r2, r3
 8001c62:	2008      	movs	r0, #8
 8001c64:	f7ff f9fa 	bl	800105c <setMotorSpeed>
}
 8001c68:	bf00      	nop
 8001c6a:	37e0      	adds	r7, #224	@ 0xe0
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bdb0      	pop	{r4, r5, r7, pc}

08001c70 <putar>:
    setMotorSpeed(4, (int)V3);
    setMotorSpeed(8, (int)V4);
}

void putar(int Vx, int Vy, int W)
{
 8001c70:	b5b0      	push	{r4, r5, r7, lr}
 8001c72:	ed2d 8b02 	vpush	{d8}
 8001c76:	b098      	sub	sp, #96	@ 0x60
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
     double R = 7.6;
 8001c80:	f20f 534c 	addw	r3, pc, #1356	@ 0x54c
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
     int minSpeed = 580;
 8001c8c:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8001c90:	657b      	str	r3, [r7, #84]	@ 0x54
     int maxSpeed = 1000;
 8001c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c96:	653b      	str	r3, [r7, #80]	@ 0x50

     double M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f7fe fc43 	bl	8000524 <__aeabi_i2d>
 8001c9e:	f20f 5338 	addw	r3, pc, #1336	@ 0x538
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	f7fe fca7 	bl	80005f8 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4614      	mov	r4, r2
 8001cb0:	461d      	mov	r5, r3
 8001cb2:	68b8      	ldr	r0, [r7, #8]
 8001cb4:	f7fe fc36 	bl	8000524 <__aeabi_i2d>
 8001cb8:	f20f 5324 	addw	r3, pc, #1316	@ 0x524
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe fc9a 	bl	80005f8 <__aeabi_dmul>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4620      	mov	r0, r4
 8001cca:	4629      	mov	r1, r5
 8001ccc:	f7fe fade 	bl	800028c <__adddf3>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4614      	mov	r4, r2
 8001cd6:	461d      	mov	r5, r3
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7fe fc23 	bl	8000524 <__aeabi_i2d>
 8001cde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ce2:	f7fe fc89 	bl	80005f8 <__aeabi_dmul>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4620      	mov	r0, r4
 8001cec:	4629      	mov	r1, r5
 8001cee:	f7fe facb 	bl	8000288 <__aeabi_dsub>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
     double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f7fe fc12 	bl	8000524 <__aeabi_i2d>
 8001d00:	f20f 43e4 	addw	r3, pc, #1252	@ 0x4e4
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fc76 	bl	80005f8 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4614      	mov	r4, r2
 8001d12:	461d      	mov	r5, r3
 8001d14:	68b8      	ldr	r0, [r7, #8]
 8001d16:	f7fe fc05 	bl	8000524 <__aeabi_i2d>
 8001d1a:	f20f 43bc 	addw	r3, pc, #1212	@ 0x4bc
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fc69 	bl	80005f8 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	4629      	mov	r1, r5
 8001d2e:	f7fe faad 	bl	800028c <__adddf3>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4614      	mov	r4, r2
 8001d38:	461d      	mov	r5, r3
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fbf2 	bl	8000524 <__aeabi_i2d>
 8001d40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d44:	f7fe fc58 	bl	80005f8 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	4629      	mov	r1, r5
 8001d50:	f7fe fa9a 	bl	8000288 <__aeabi_dsub>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
     double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7fe fbe1 	bl	8000524 <__aeabi_i2d>
 8001d62:	f20f 438c 	addw	r3, pc, #1164	@ 0x48c
 8001d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6a:	f7fe fc45 	bl	80005f8 <__aeabi_dmul>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4614      	mov	r4, r2
 8001d74:	461d      	mov	r5, r3
 8001d76:	68b8      	ldr	r0, [r7, #8]
 8001d78:	f7fe fbd4 	bl	8000524 <__aeabi_i2d>
 8001d7c:	f20f 4378 	addw	r3, pc, #1144	@ 0x478
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	f7fe fc38 	bl	80005f8 <__aeabi_dmul>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	4629      	mov	r1, r5
 8001d90:	f7fe fa7c 	bl	800028c <__adddf3>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4614      	mov	r4, r2
 8001d9a:	461d      	mov	r5, r3
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7fe fbc1 	bl	8000524 <__aeabi_i2d>
 8001da2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001da6:	f7fe fc27 	bl	80005f8 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4620      	mov	r0, r4
 8001db0:	4629      	mov	r1, r5
 8001db2:	f7fe fa69 	bl	8000288 <__aeabi_dsub>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
     double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f7fe fbb0 	bl	8000524 <__aeabi_i2d>
 8001dc4:	f20f 4338 	addw	r3, pc, #1080	@ 0x438
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fc14 	bl	80005f8 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	461d      	mov	r5, r3
 8001dd8:	68b8      	ldr	r0, [r7, #8]
 8001dda:	f7fe fba3 	bl	8000524 <__aeabi_i2d>
 8001dde:	f20f 4328 	addw	r3, pc, #1064	@ 0x428
 8001de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de6:	f7fe fc07 	bl	80005f8 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4620      	mov	r0, r4
 8001df0:	4629      	mov	r1, r5
 8001df2:	f7fe fa4b 	bl	800028c <__adddf3>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4614      	mov	r4, r2
 8001dfc:	461d      	mov	r5, r3
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7fe fb90 	bl	8000524 <__aeabi_i2d>
 8001e04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e08:	f7fe fbf6 	bl	80005f8 <__aeabi_dmul>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4620      	mov	r0, r4
 8001e12:	4629      	mov	r1, r5
 8001e14:	f7fe fa38 	bl	8000288 <__aeabi_dsub>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

     double V1 = (M1 > minSpeed || M1 < -minSpeed) ? fmin(fmax(M1, -maxSpeed), maxSpeed) : ((M1 < -0) ? -minSpeed : ((M1 > 0) ? minSpeed : 0));
 8001e20:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001e22:	f7fe fb7f 	bl	8000524 <__aeabi_i2d>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001e2e:	f7fe fe73 	bl	8000b18 <__aeabi_dcmpgt>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10d      	bne.n	8001e54 <putar+0x1e4>
 8001e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e3a:	425b      	negs	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb71 	bl	8000524 <__aeabi_i2d>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001e4a:	f7fe fe47 	bl	8000adc <__aeabi_dcmplt>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <putar+0x226>
 8001e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e56:	425b      	negs	r3, r3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb63 	bl	8000524 <__aeabi_i2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	ec43 2b11 	vmov	d1, r2, r3
 8001e66:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001e6a:	f00d ffa8 	bl	800fdbe <fmax>
 8001e6e:	eeb0 8a40 	vmov.f32	s16, s0
 8001e72:	eef0 8a60 	vmov.f32	s17, s1
 8001e76:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001e78:	f7fe fb54 	bl	8000524 <__aeabi_i2d>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	ec43 2b11 	vmov	d1, r2, r3
 8001e84:	eeb0 0a48 	vmov.f32	s0, s16
 8001e88:	eef0 0a68 	vmov.f32	s1, s17
 8001e8c:	f00d ffc1 	bl	800fe12 <fmin>
 8001e90:	ec53 2b10 	vmov	r2, r3, d0
 8001e94:	e027      	b.n	8001ee6 <putar+0x276>
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001ea2:	f7fe fe1b 	bl	8000adc <__aeabi_dcmplt>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <putar+0x24c>
 8001eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eae:	425b      	negs	r3, r3
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb37 	bl	8000524 <__aeabi_i2d>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	e014      	b.n	8001ee6 <putar+0x276>
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001ec8:	f7fe fe26 	bl	8000b18 <__aeabi_dcmpgt>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <putar+0x26e>
 8001ed2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001ed4:	f7fe fb26 	bl	8000524 <__aeabi_i2d>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	e003      	b.n	8001ee6 <putar+0x276>
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
     double V2 = (M2 > minSpeed || M2 < -minSpeed) ? fmin(fmax(M2, -maxSpeed), maxSpeed) : ((M2 < -0) ? -minSpeed : ((M2 > 0) ? minSpeed : 0));
 8001eea:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001eec:	f7fe fb1a 	bl	8000524 <__aeabi_i2d>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001ef8:	f7fe fe0e 	bl	8000b18 <__aeabi_dcmpgt>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10d      	bne.n	8001f1e <putar+0x2ae>
 8001f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f04:	425b      	negs	r3, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fb0c 	bl	8000524 <__aeabi_i2d>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001f14:	f7fe fde2 	bl	8000adc <__aeabi_dcmplt>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d020      	beq.n	8001f60 <putar+0x2f0>
 8001f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f20:	425b      	negs	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fafe 	bl	8000524 <__aeabi_i2d>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	ec43 2b11 	vmov	d1, r2, r3
 8001f30:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8001f34:	f00d ff43 	bl	800fdbe <fmax>
 8001f38:	eeb0 8a40 	vmov.f32	s16, s0
 8001f3c:	eef0 8a60 	vmov.f32	s17, s1
 8001f40:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f42:	f7fe faef 	bl	8000524 <__aeabi_i2d>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	ec43 2b11 	vmov	d1, r2, r3
 8001f4e:	eeb0 0a48 	vmov.f32	s0, s16
 8001f52:	eef0 0a68 	vmov.f32	s1, s17
 8001f56:	f00d ff5c 	bl	800fe12 <fmin>
 8001f5a:	ec53 2b10 	vmov	r2, r3, d0
 8001f5e:	e027      	b.n	8001fb0 <putar+0x340>
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001f6c:	f7fe fdb6 	bl	8000adc <__aeabi_dcmplt>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <putar+0x316>
 8001f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f78:	425b      	negs	r3, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fad2 	bl	8000524 <__aeabi_i2d>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	e014      	b.n	8001fb0 <putar+0x340>
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001f92:	f7fe fdc1 	bl	8000b18 <__aeabi_dcmpgt>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <putar+0x338>
 8001f9c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001f9e:	f7fe fac1 	bl	8000524 <__aeabi_i2d>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	e003      	b.n	8001fb0 <putar+0x340>
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	e9c7 2308 	strd	r2, r3, [r7, #32]
     double V3 = (M3 > minSpeed || M3 < -minSpeed) ? fmin(fmax(M3, -maxSpeed), maxSpeed) : ((M3 < -0) ? -minSpeed : ((M3 > 0) ? minSpeed : 0));
 8001fb4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001fb6:	f7fe fab5 	bl	8000524 <__aeabi_i2d>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001fc2:	f7fe fda9 	bl	8000b18 <__aeabi_dcmpgt>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10d      	bne.n	8001fe8 <putar+0x378>
 8001fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fce:	425b      	negs	r3, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe faa7 	bl	8000524 <__aeabi_i2d>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001fde:	f7fe fd7d 	bl	8000adc <__aeabi_dcmplt>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <putar+0x3ba>
 8001fe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fea:	425b      	negs	r3, r3
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fa99 	bl	8000524 <__aeabi_i2d>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	ec43 2b11 	vmov	d1, r2, r3
 8001ffa:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001ffe:	f00d fede 	bl	800fdbe <fmax>
 8002002:	eeb0 8a40 	vmov.f32	s16, s0
 8002006:	eef0 8a60 	vmov.f32	s17, s1
 800200a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800200c:	f7fe fa8a 	bl	8000524 <__aeabi_i2d>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	ec43 2b11 	vmov	d1, r2, r3
 8002018:	eeb0 0a48 	vmov.f32	s0, s16
 800201c:	eef0 0a68 	vmov.f32	s1, s17
 8002020:	f00d fef7 	bl	800fe12 <fmin>
 8002024:	ec53 2b10 	vmov	r2, r3, d0
 8002028:	e027      	b.n	800207a <putar+0x40a>
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002036:	f7fe fd51 	bl	8000adc <__aeabi_dcmplt>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <putar+0x3e0>
 8002040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002042:	425b      	negs	r3, r3
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fa6d 	bl	8000524 <__aeabi_i2d>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	e014      	b.n	800207a <putar+0x40a>
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800205c:	f7fe fd5c 	bl	8000b18 <__aeabi_dcmpgt>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <putar+0x402>
 8002066:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002068:	f7fe fa5c 	bl	8000524 <__aeabi_i2d>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	e003      	b.n	800207a <putar+0x40a>
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	e9c7 2306 	strd	r2, r3, [r7, #24]
     double V4 = (M4 > minSpeed || M4 < -minSpeed) ? fmin(fmax(M4, -maxSpeed), maxSpeed) : ((M4 < -0) ? -minSpeed : ((M4 > 0) ? minSpeed : 0));
 800207e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002080:	f7fe fa50 	bl	8000524 <__aeabi_i2d>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800208c:	f7fe fd44 	bl	8000b18 <__aeabi_dcmpgt>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10d      	bne.n	80020b2 <putar+0x442>
 8002096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002098:	425b      	negs	r3, r3
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa42 	bl	8000524 <__aeabi_i2d>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80020a8:	f7fe fd18 	bl	8000adc <__aeabi_dcmplt>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d020      	beq.n	80020f4 <putar+0x484>
 80020b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020b4:	425b      	negs	r3, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa34 	bl	8000524 <__aeabi_i2d>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	ec43 2b11 	vmov	d1, r2, r3
 80020c4:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80020c8:	f00d fe79 	bl	800fdbe <fmax>
 80020cc:	eeb0 8a40 	vmov.f32	s16, s0
 80020d0:	eef0 8a60 	vmov.f32	s17, s1
 80020d4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020d6:	f7fe fa25 	bl	8000524 <__aeabi_i2d>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	ec43 2b11 	vmov	d1, r2, r3
 80020e2:	eeb0 0a48 	vmov.f32	s0, s16
 80020e6:	eef0 0a68 	vmov.f32	s1, s17
 80020ea:	f00d fe92 	bl	800fe12 <fmin>
 80020ee:	ec53 2b10 	vmov	r2, r3, d0
 80020f2:	e027      	b.n	8002144 <putar+0x4d4>
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002100:	f7fe fcec 	bl	8000adc <__aeabi_dcmplt>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <putar+0x4aa>
 800210a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210c:	425b      	negs	r3, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fa08 	bl	8000524 <__aeabi_i2d>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	e014      	b.n	8002144 <putar+0x4d4>
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002126:	f7fe fcf7 	bl	8000b18 <__aeabi_dcmpgt>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <putar+0x4cc>
 8002130:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002132:	f7fe f9f7 	bl	8000524 <__aeabi_i2d>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	e003      	b.n	8002144 <putar+0x4d4>
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e9c7 2304 	strd	r2, r3, [r7, #16]

     setMotorSpeed(6, (int)V1);
 8002148:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800214c:	f7fe fd04 	bl	8000b58 <__aeabi_d2iz>
 8002150:	4603      	mov	r3, r0
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe f9e6 	bl	8000524 <__aeabi_i2d>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	ec43 2b10 	vmov	d0, r2, r3
 8002160:	2006      	movs	r0, #6
 8002162:	f7fe ff7b 	bl	800105c <setMotorSpeed>
     setMotorSpeed(5, (int)V2);
 8002166:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800216a:	f7fe fcf5 	bl	8000b58 <__aeabi_d2iz>
 800216e:	4603      	mov	r3, r0
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f9d7 	bl	8000524 <__aeabi_i2d>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	ec43 2b10 	vmov	d0, r2, r3
 800217e:	2005      	movs	r0, #5
 8002180:	f7fe ff6c 	bl	800105c <setMotorSpeed>
     setMotorSpeed(4, (int)V3);
 8002184:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002188:	f7fe fce6 	bl	8000b58 <__aeabi_d2iz>
 800218c:	4603      	mov	r3, r0
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f9c8 	bl	8000524 <__aeabi_i2d>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	ec43 2b10 	vmov	d0, r2, r3
 800219c:	2004      	movs	r0, #4
 800219e:	f7fe ff5d 	bl	800105c <setMotorSpeed>
     setMotorSpeed(8, (int)V4);
 80021a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021a6:	f7fe fcd7 	bl	8000b58 <__aeabi_d2iz>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9b9 	bl	8000524 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	ec43 2b10 	vmov	d0, r2, r3
 80021ba:	2008      	movs	r0, #8
 80021bc:	f7fe ff4e 	bl	800105c <setMotorSpeed>
}
 80021c0:	bf00      	nop
 80021c2:	3760      	adds	r7, #96	@ 0x60
 80021c4:	46bd      	mov	sp, r7
 80021c6:	ecbd 8b02 	vpop	{d8}
 80021ca:	bdb0      	pop	{r4, r5, r7, pc}
 80021cc:	f3af 8000 	nop.w
 80021d0:	66666666 	.word	0x66666666
 80021d4:	401e6666 	.word	0x401e6666
 80021d8:	667f3bcc 	.word	0x667f3bcc
 80021dc:	bfe6a09e 	.word	0xbfe6a09e
 80021e0:	667f3bcd 	.word	0x667f3bcd
 80021e4:	3fe6a09e 	.word	0x3fe6a09e
 80021e8:	667f3bcd 	.word	0x667f3bcd
 80021ec:	bfe6a09e 	.word	0xbfe6a09e
 80021f0:	667f3bcc 	.word	0x667f3bcc
 80021f4:	3fe6a09e 	.word	0x3fe6a09e
 80021f8:	667f3bce 	.word	0x667f3bce
 80021fc:	bfe6a09e 	.word	0xbfe6a09e
 8002200:	667f3bce 	.word	0x667f3bce
 8002204:	3fe6a09e 	.word	0x3fe6a09e
 8002208:	667f3bcb 	.word	0x667f3bcb
 800220c:	3fe6a09e 	.word	0x3fe6a09e

08002210 <lcd_write_nibble>:
#define D7_BIT 7      // Data 7 bit

uint8_t backlight_state = 1;

void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af02      	add	r7, sp, #8
 8002216:	4603      	mov	r3, r0
 8002218:	460a      	mov	r2, r1
 800221a:	71fb      	strb	r3, [r7, #7]
 800221c:	4613      	mov	r3, r2
 800221e:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	b2db      	uxtb	r3, r3
 8002226:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	79bb      	ldrb	r3, [r7, #6]
 800222c:	4313      	orrs	r3, r2
 800222e:	b2db      	uxtb	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8002232:	4b16      	ldr	r3, [pc, #88]	@ (800228c <lcd_write_nibble+0x7c>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	b25a      	sxtb	r2, r3
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	b25b      	sxtb	r3, r3
 800223e:	4313      	orrs	r3, r2
 8002240:	b25b      	sxtb	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	b2db      	uxtb	r3, r3
 800224e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8002250:	f107 020f 	add.w	r2, r7, #15
 8002254:	2364      	movs	r3, #100	@ 0x64
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2301      	movs	r3, #1
 800225a:	214e      	movs	r1, #78	@ 0x4e
 800225c:	480c      	ldr	r0, [pc, #48]	@ (8002290 <lcd_write_nibble+0x80>)
 800225e:	f006 f913 	bl	8008488 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8002262:	2001      	movs	r0, #1
 8002264:	f005 fc1e 	bl	8007aa4 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	f023 0304 	bic.w	r3, r3, #4
 800226e:	b2db      	uxtb	r3, r3
 8002270:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8002272:	f107 020f 	add.w	r2, r7, #15
 8002276:	2364      	movs	r3, #100	@ 0x64
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2301      	movs	r3, #1
 800227c:	214e      	movs	r1, #78	@ 0x4e
 800227e:	4804      	ldr	r0, [pc, #16]	@ (8002290 <lcd_write_nibble+0x80>)
 8002280:	f006 f902 	bl	8008488 <HAL_I2C_Master_Transmit>
}
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200000c8 	.word	0x200000c8
 8002290:	200002cc 	.word	0x200002cc

08002294 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ffad 	bl	8002210 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 80022b6:	7bbb      	ldrb	r3, [r7, #14]
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ffa8 	bl	8002210 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d002      	beq.n	80022cc <lcd_send_cmd+0x38>
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d102      	bne.n	80022d2 <lcd_send_cmd+0x3e>
  {
    HAL_Delay(2);
 80022cc:	2002      	movs	r0, #2
 80022ce:	f005 fbe9 	bl	8007aa4 <HAL_Delay>
  }
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	2101      	movs	r1, #1
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff8a 	bl	8002210 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 80022fc:	7bbb      	ldrb	r3, [r7, #14]
 80022fe:	2101      	movs	r1, #1
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff85 	bl	8002210 <lcd_write_nibble>
}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <lcd_init>:

void lcd_init()
{
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8002312:	2032      	movs	r0, #50	@ 0x32
 8002314:	f005 fbc6 	bl	8007aa4 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8002318:	2100      	movs	r1, #0
 800231a:	2003      	movs	r0, #3
 800231c:	f7ff ff78 	bl	8002210 <lcd_write_nibble>
  HAL_Delay(5);
 8002320:	2005      	movs	r0, #5
 8002322:	f005 fbbf 	bl	8007aa4 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8002326:	2100      	movs	r1, #0
 8002328:	2003      	movs	r0, #3
 800232a:	f7ff ff71 	bl	8002210 <lcd_write_nibble>
  HAL_Delay(1);
 800232e:	2001      	movs	r0, #1
 8002330:	f005 fbb8 	bl	8007aa4 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8002334:	2100      	movs	r1, #0
 8002336:	2003      	movs	r0, #3
 8002338:	f7ff ff6a 	bl	8002210 <lcd_write_nibble>
  HAL_Delay(1);
 800233c:	2001      	movs	r0, #1
 800233e:	f005 fbb1 	bl	8007aa4 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 8002342:	2100      	movs	r1, #0
 8002344:	2002      	movs	r0, #2
 8002346:	f7ff ff63 	bl	8002210 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 800234a:	2028      	movs	r0, #40	@ 0x28
 800234c:	f7ff ffa2 	bl	8002294 <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8002350:	200c      	movs	r0, #12
 8002352:	f7ff ff9f 	bl	8002294 <lcd_send_cmd>
  lcd_send_cmd(0x06);
 8002356:	2006      	movs	r0, #6
 8002358:	f7ff ff9c 	bl	8002294 <lcd_send_cmd>
  lcd_send_cmd(0x01);
 800235c:	2001      	movs	r0, #1
 800235e:	f7ff ff99 	bl	8002294 <lcd_send_cmd>
  HAL_Delay(2);
 8002362:	2002      	movs	r0, #2
 8002364:	f005 fb9e 	bl	8007aa4 <HAL_Delay>
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}

0800236c <lcd_write_string>:

void lcd_write_string(char *str)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  while (*str)
 8002374:	e006      	b.n	8002384 <lcd_write_string+0x18>
  {
    lcd_send_data(*str++);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ffab 	bl	80022da <lcd_send_data>
  while (*str)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f4      	bne.n	8002376 <lcd_write_string+0xa>
  }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	460a      	mov	r2, r1
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	4613      	mov	r3, r2
 80023a6:	71bb      	strb	r3, [r7, #6]
  uint8_t address;
  switch (row)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d816      	bhi.n	80023dc <lcd_set_cursor+0x44>
 80023ae:	a201      	add	r2, pc, #4	@ (adr r2, 80023b4 <lcd_set_cursor+0x1c>)
 80023b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b4:	080023c5 	.word	0x080023c5
 80023b8:	080023cb 	.word	0x080023cb
 80023bc:	080023d1 	.word	0x080023d1
 80023c0:	080023d7 	.word	0x080023d7
  {
  case 0:
    address = 0x00;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]
    break;
 80023c8:	e00a      	b.n	80023e0 <lcd_set_cursor+0x48>
  case 1:
    address = 0x40;
 80023ca:	2340      	movs	r3, #64	@ 0x40
 80023cc:	73fb      	strb	r3, [r7, #15]
    break;
 80023ce:	e007      	b.n	80023e0 <lcd_set_cursor+0x48>
  case 2:
    address = 0x14;
 80023d0:	2314      	movs	r3, #20
 80023d2:	73fb      	strb	r3, [r7, #15]
    break;
 80023d4:	e004      	b.n	80023e0 <lcd_set_cursor+0x48>
  case 3:
    address = 0x54;
 80023d6:	2354      	movs	r3, #84	@ 0x54
 80023d8:	73fb      	strb	r3, [r7, #15]
    break;
 80023da:	e001      	b.n	80023e0 <lcd_set_cursor+0x48>
  default:
    address = 0x00;
 80023dc:	2300      	movs	r3, #0
 80023de:	73fb      	strb	r3, [r7, #15]
  }
  address += column;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	79bb      	ldrb	r3, [r7, #6]
 80023e4:	4413      	add	r3, r2
 80023e6:	73fb      	strb	r3, [r7, #15]
  lcd_send_cmd(0x80 | address);
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff4f 	bl	8002294 <lcd_send_cmd>
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop

08002400 <lcd_clear>:

void lcd_clear(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x01);
 8002404:	2001      	movs	r0, #1
 8002406:	f7ff ff45 	bl	8002294 <lcd_send_cmd>
  HAL_Delay(2);
 800240a:	2002      	movs	r0, #2
 800240c:	f005 fb4a 	bl	8007aa4 <HAL_Delay>
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
movingState mode = VOID;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	80fb      	strh	r3, [r7, #6]
	// ENCODER
	if((GPIO_Pin == EB_1_Pin) && (HAL_GPIO_ReadPin(EB_1_GPIO_Port, EB_1_Pin) == GPIO_PIN_SET))
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	2b08      	cmp	r3, #8
 8002422:	d11d      	bne.n	8002460 <HAL_GPIO_EXTI_Callback+0x4c>
 8002424:	2108      	movs	r1, #8
 8002426:	488f      	ldr	r0, [pc, #572]	@ (8002664 <HAL_GPIO_EXTI_Callback+0x250>)
 8002428:	f005 fea0 	bl	800816c <HAL_GPIO_ReadPin>
 800242c:	4603      	mov	r3, r0
 800242e:	2b01      	cmp	r3, #1
 8002430:	d116      	bne.n	8002460 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		HAL_GPIO_ReadPin(EA_1_GPIO_Port, EA_1_Pin) ? counter1-- : counter1++;
 8002432:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002436:	488c      	ldr	r0, [pc, #560]	@ (8002668 <HAL_GPIO_EXTI_Callback+0x254>)
 8002438:	f005 fe98 	bl	800816c <HAL_GPIO_ReadPin>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_GPIO_EXTI_Callback+0x3a>
 8002442:	4b8a      	ldr	r3, [pc, #552]	@ (800266c <HAL_GPIO_EXTI_Callback+0x258>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3b01      	subs	r3, #1
 8002448:	4a88      	ldr	r2, [pc, #544]	@ (800266c <HAL_GPIO_EXTI_Callback+0x258>)
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	e004      	b.n	8002458 <HAL_GPIO_EXTI_Callback+0x44>
 800244e:	4b87      	ldr	r3, [pc, #540]	@ (800266c <HAL_GPIO_EXTI_Callback+0x258>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3301      	adds	r3, #1
 8002454:	4a85      	ldr	r2, [pc, #532]	@ (800266c <HAL_GPIO_EXTI_Callback+0x258>)
 8002456:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_1_Pin);
 8002458:	4b85      	ldr	r3, [pc, #532]	@ (8002670 <HAL_GPIO_EXTI_Callback+0x25c>)
 800245a:	2208      	movs	r2, #8
 800245c:	615a      	str	r2, [r3, #20]
 800245e:	e159      	b.n	8002714 <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == EB_2_Pin) && (HAL_GPIO_ReadPin(EB_2_GPIO_Port, EB_2_Pin) == GPIO_PIN_SET))
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d11c      	bne.n	80024a0 <HAL_GPIO_EXTI_Callback+0x8c>
 8002466:	2102      	movs	r1, #2
 8002468:	4882      	ldr	r0, [pc, #520]	@ (8002674 <HAL_GPIO_EXTI_Callback+0x260>)
 800246a:	f005 fe7f 	bl	800816c <HAL_GPIO_ReadPin>
 800246e:	4603      	mov	r3, r0
 8002470:	2b01      	cmp	r3, #1
 8002472:	d115      	bne.n	80024a0 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		HAL_GPIO_ReadPin(EA_2_GPIO_Port, EA_2_Pin) ? counter2-- : counter2++;
 8002474:	2101      	movs	r1, #1
 8002476:	487f      	ldr	r0, [pc, #508]	@ (8002674 <HAL_GPIO_EXTI_Callback+0x260>)
 8002478:	f005 fe78 	bl	800816c <HAL_GPIO_ReadPin>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_GPIO_EXTI_Callback+0x7a>
 8002482:	4b7d      	ldr	r3, [pc, #500]	@ (8002678 <HAL_GPIO_EXTI_Callback+0x264>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3b01      	subs	r3, #1
 8002488:	4a7b      	ldr	r2, [pc, #492]	@ (8002678 <HAL_GPIO_EXTI_Callback+0x264>)
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	e004      	b.n	8002498 <HAL_GPIO_EXTI_Callback+0x84>
 800248e:	4b7a      	ldr	r3, [pc, #488]	@ (8002678 <HAL_GPIO_EXTI_Callback+0x264>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	4a78      	ldr	r2, [pc, #480]	@ (8002678 <HAL_GPIO_EXTI_Callback+0x264>)
 8002496:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_2_Pin);
 8002498:	4b75      	ldr	r3, [pc, #468]	@ (8002670 <HAL_GPIO_EXTI_Callback+0x25c>)
 800249a:	2202      	movs	r2, #2
 800249c:	615a      	str	r2, [r3, #20]
 800249e:	e139      	b.n	8002714 <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == EB_3_Pin) && (HAL_GPIO_ReadPin(EB_3_GPIO_Port, EB_3_Pin) == GPIO_PIN_SET))
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	2b20      	cmp	r3, #32
 80024a4:	d11c      	bne.n	80024e0 <HAL_GPIO_EXTI_Callback+0xcc>
 80024a6:	2120      	movs	r1, #32
 80024a8:	486e      	ldr	r0, [pc, #440]	@ (8002664 <HAL_GPIO_EXTI_Callback+0x250>)
 80024aa:	f005 fe5f 	bl	800816c <HAL_GPIO_ReadPin>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d115      	bne.n	80024e0 <HAL_GPIO_EXTI_Callback+0xcc>
	{
		HAL_GPIO_ReadPin(EA_3_GPIO_Port, EA_3_Pin) ? counter3-- : counter3++;
 80024b4:	2110      	movs	r1, #16
 80024b6:	486b      	ldr	r0, [pc, #428]	@ (8002664 <HAL_GPIO_EXTI_Callback+0x250>)
 80024b8:	f005 fe58 	bl	800816c <HAL_GPIO_ReadPin>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <HAL_GPIO_EXTI_Callback+0xba>
 80024c2:	4b6e      	ldr	r3, [pc, #440]	@ (800267c <HAL_GPIO_EXTI_Callback+0x268>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	4a6c      	ldr	r2, [pc, #432]	@ (800267c <HAL_GPIO_EXTI_Callback+0x268>)
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	e004      	b.n	80024d8 <HAL_GPIO_EXTI_Callback+0xc4>
 80024ce:	4b6b      	ldr	r3, [pc, #428]	@ (800267c <HAL_GPIO_EXTI_Callback+0x268>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3301      	adds	r3, #1
 80024d4:	4a69      	ldr	r2, [pc, #420]	@ (800267c <HAL_GPIO_EXTI_Callback+0x268>)
 80024d6:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_3_Pin);
 80024d8:	4b65      	ldr	r3, [pc, #404]	@ (8002670 <HAL_GPIO_EXTI_Callback+0x25c>)
 80024da:	2220      	movs	r2, #32
 80024dc:	615a      	str	r2, [r3, #20]
 80024de:	e119      	b.n	8002714 <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == EinB_1_Pin) && (HAL_GPIO_ReadPin(EinB_1_GPIO_Port, EinB_1_Pin) == GPIO_PIN_SET))
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d11c      	bne.n	8002520 <HAL_GPIO_EXTI_Callback+0x10c>
 80024e6:	2104      	movs	r1, #4
 80024e8:	4862      	ldr	r0, [pc, #392]	@ (8002674 <HAL_GPIO_EXTI_Callback+0x260>)
 80024ea:	f005 fe3f 	bl	800816c <HAL_GPIO_ReadPin>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d115      	bne.n	8002520 <HAL_GPIO_EXTI_Callback+0x10c>
	{
		HAL_GPIO_ReadPin(EinA_1_GPIO_Port, EinA_1_Pin) ? counterIN1++ : counterIN1--;
 80024f4:	2108      	movs	r1, #8
 80024f6:	485f      	ldr	r0, [pc, #380]	@ (8002674 <HAL_GPIO_EXTI_Callback+0x260>)
 80024f8:	f005 fe38 	bl	800816c <HAL_GPIO_ReadPin>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_GPIO_EXTI_Callback+0xfa>
 8002502:	4b5f      	ldr	r3, [pc, #380]	@ (8002680 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3301      	adds	r3, #1
 8002508:	4a5d      	ldr	r2, [pc, #372]	@ (8002680 <HAL_GPIO_EXTI_Callback+0x26c>)
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	e004      	b.n	8002518 <HAL_GPIO_EXTI_Callback+0x104>
 800250e:	4b5c      	ldr	r3, [pc, #368]	@ (8002680 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	3b01      	subs	r3, #1
 8002514:	4a5a      	ldr	r2, [pc, #360]	@ (8002680 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002516:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_1_Pin);
 8002518:	4b55      	ldr	r3, [pc, #340]	@ (8002670 <HAL_GPIO_EXTI_Callback+0x25c>)
 800251a:	2204      	movs	r2, #4
 800251c:	615a      	str	r2, [r3, #20]
 800251e:	e0f9      	b.n	8002714 <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == EinB_2_Pin) && (HAL_GPIO_ReadPin(EinB_2_GPIO_Port, EinB_2_Pin) == GPIO_PIN_SET))
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d11c      	bne.n	8002560 <HAL_GPIO_EXTI_Callback+0x14c>
 8002526:	2101      	movs	r1, #1
 8002528:	484f      	ldr	r0, [pc, #316]	@ (8002668 <HAL_GPIO_EXTI_Callback+0x254>)
 800252a:	f005 fe1f 	bl	800816c <HAL_GPIO_ReadPin>
 800252e:	4603      	mov	r3, r0
 8002530:	2b01      	cmp	r3, #1
 8002532:	d115      	bne.n	8002560 <HAL_GPIO_EXTI_Callback+0x14c>
	{
		HAL_GPIO_ReadPin(EinA_2_GPIO_Port, EinA_2_Pin) ? counterIN2-- : counterIN2++;
 8002534:	2102      	movs	r1, #2
 8002536:	484c      	ldr	r0, [pc, #304]	@ (8002668 <HAL_GPIO_EXTI_Callback+0x254>)
 8002538:	f005 fe18 	bl	800816c <HAL_GPIO_ReadPin>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_GPIO_EXTI_Callback+0x13a>
 8002542:	4b50      	ldr	r3, [pc, #320]	@ (8002684 <HAL_GPIO_EXTI_Callback+0x270>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	3b01      	subs	r3, #1
 8002548:	4a4e      	ldr	r2, [pc, #312]	@ (8002684 <HAL_GPIO_EXTI_Callback+0x270>)
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	e004      	b.n	8002558 <HAL_GPIO_EXTI_Callback+0x144>
 800254e:	4b4d      	ldr	r3, [pc, #308]	@ (8002684 <HAL_GPIO_EXTI_Callback+0x270>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3301      	adds	r3, #1
 8002554:	4a4b      	ldr	r2, [pc, #300]	@ (8002684 <HAL_GPIO_EXTI_Callback+0x270>)
 8002556:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_2_Pin);
 8002558:	4b45      	ldr	r3, [pc, #276]	@ (8002670 <HAL_GPIO_EXTI_Callback+0x25c>)
 800255a:	2201      	movs	r2, #1
 800255c:	615a      	str	r2, [r3, #20]
 800255e:	e0d9      	b.n	8002714 <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == EinB_3_Pin) && (HAL_GPIO_ReadPin(EinB_3_GPIO_Port, EinB_3_Pin) == GPIO_PIN_SET))
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002566:	d11f      	bne.n	80025a8 <HAL_GPIO_EXTI_Callback+0x194>
 8002568:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800256c:	4846      	ldr	r0, [pc, #280]	@ (8002688 <HAL_GPIO_EXTI_Callback+0x274>)
 800256e:	f005 fdfd 	bl	800816c <HAL_GPIO_ReadPin>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d117      	bne.n	80025a8 <HAL_GPIO_EXTI_Callback+0x194>
	{
		HAL_GPIO_ReadPin(EinA_3_GPIO_Port, EinA_3_Pin) ? counterIN3++ : counterIN3--;
 8002578:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800257c:	4842      	ldr	r0, [pc, #264]	@ (8002688 <HAL_GPIO_EXTI_Callback+0x274>)
 800257e:	f005 fdf5 	bl	800816c <HAL_GPIO_ReadPin>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_GPIO_EXTI_Callback+0x180>
 8002588:	4b40      	ldr	r3, [pc, #256]	@ (800268c <HAL_GPIO_EXTI_Callback+0x278>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3301      	adds	r3, #1
 800258e:	4a3f      	ldr	r2, [pc, #252]	@ (800268c <HAL_GPIO_EXTI_Callback+0x278>)
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e004      	b.n	800259e <HAL_GPIO_EXTI_Callback+0x18a>
 8002594:	4b3d      	ldr	r3, [pc, #244]	@ (800268c <HAL_GPIO_EXTI_Callback+0x278>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3b01      	subs	r3, #1
 800259a:	4a3c      	ldr	r2, [pc, #240]	@ (800268c <HAL_GPIO_EXTI_Callback+0x278>)
 800259c:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_3_Pin);
 800259e:	4b34      	ldr	r3, [pc, #208]	@ (8002670 <HAL_GPIO_EXTI_Callback+0x25c>)
 80025a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025a4:	615a      	str	r2, [r3, #20]
 80025a6:	e0b5      	b.n	8002714 <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == EinB_4_Pin) && (HAL_GPIO_ReadPin(EinB_4_GPIO_Port, EinB_4_Pin) == GPIO_PIN_SET))
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025ae:	d11f      	bne.n	80025f0 <HAL_GPIO_EXTI_Callback+0x1dc>
 80025b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025b4:	482c      	ldr	r0, [pc, #176]	@ (8002668 <HAL_GPIO_EXTI_Callback+0x254>)
 80025b6:	f005 fdd9 	bl	800816c <HAL_GPIO_ReadPin>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d117      	bne.n	80025f0 <HAL_GPIO_EXTI_Callback+0x1dc>
	{
		HAL_GPIO_ReadPin(EinA_4_GPIO_Port, EinA_4_Pin) ? counterIN4-- : counterIN4++;
 80025c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025c4:	4828      	ldr	r0, [pc, #160]	@ (8002668 <HAL_GPIO_EXTI_Callback+0x254>)
 80025c6:	f005 fdd1 	bl	800816c <HAL_GPIO_ReadPin>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_GPIO_EXTI_Callback+0x1c8>
 80025d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002690 <HAL_GPIO_EXTI_Callback+0x27c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	4a2e      	ldr	r2, [pc, #184]	@ (8002690 <HAL_GPIO_EXTI_Callback+0x27c>)
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e004      	b.n	80025e6 <HAL_GPIO_EXTI_Callback+0x1d2>
 80025dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002690 <HAL_GPIO_EXTI_Callback+0x27c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3301      	adds	r3, #1
 80025e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002690 <HAL_GPIO_EXTI_Callback+0x27c>)
 80025e4:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_4_Pin);
 80025e6:	4b22      	ldr	r3, [pc, #136]	@ (8002670 <HAL_GPIO_EXTI_Callback+0x25c>)
 80025e8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025ec:	615a      	str	r2, [r3, #20]
 80025ee:	e091      	b.n	8002714 <HAL_GPIO_EXTI_Callback+0x300>
	}

	// BUTTON
	else if((GPIO_Pin == Button_1_Pin) && (HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin) == GPIO_PIN_RESET))
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	2b40      	cmp	r3, #64	@ 0x40
 80025f4:	d117      	bne.n	8002626 <HAL_GPIO_EXTI_Callback+0x212>
 80025f6:	2140      	movs	r1, #64	@ 0x40
 80025f8:	481b      	ldr	r0, [pc, #108]	@ (8002668 <HAL_GPIO_EXTI_Callback+0x254>)
 80025fa:	f005 fdb7 	bl	800816c <HAL_GPIO_ReadPin>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d110      	bne.n	8002626 <HAL_GPIO_EXTI_Callback+0x212>
	{
		mode = mode + BLUE_RETRY;
 8002604:	4b23      	ldr	r3, [pc, #140]	@ (8002694 <HAL_GPIO_EXTI_Callback+0x280>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	3316      	adds	r3, #22
 800260a:	b2da      	uxtb	r2, r3
 800260c:	4b21      	ldr	r3, [pc, #132]	@ (8002694 <HAL_GPIO_EXTI_Callback+0x280>)
 800260e:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_RETRY)
 8002610:	4b20      	ldr	r3, [pc, #128]	@ (8002694 <HAL_GPIO_EXTI_Callback+0x280>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b16      	cmp	r3, #22
 8002616:	d902      	bls.n	800261e <HAL_GPIO_EXTI_Callback+0x20a>
		{
			mode = VOID;
 8002618:	4b1e      	ldr	r3, [pc, #120]	@ (8002694 <HAL_GPIO_EXTI_Callback+0x280>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_1_Pin);
 800261e:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002620:	2240      	movs	r2, #64	@ 0x40
 8002622:	615a      	str	r2, [r3, #20]
 8002624:	e076      	b.n	8002714 <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == Button_2_Pin) && (HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin) == GPIO_PIN_RESET))
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800262c:	d136      	bne.n	800269c <HAL_GPIO_EXTI_Callback+0x288>
 800262e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002632:	4819      	ldr	r0, [pc, #100]	@ (8002698 <HAL_GPIO_EXTI_Callback+0x284>)
 8002634:	f005 fd9a 	bl	800816c <HAL_GPIO_ReadPin>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d12e      	bne.n	800269c <HAL_GPIO_EXTI_Callback+0x288>
	{
		mode = mode + BLUE_RETRY;
 800263e:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <HAL_GPIO_EXTI_Callback+0x280>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	3316      	adds	r3, #22
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <HAL_GPIO_EXTI_Callback+0x280>)
 8002648:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_RETRY)
 800264a:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <HAL_GPIO_EXTI_Callback+0x280>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b16      	cmp	r3, #22
 8002650:	d902      	bls.n	8002658 <HAL_GPIO_EXTI_Callback+0x244>
		{
			mode = VOID;
 8002652:	4b10      	ldr	r3, [pc, #64]	@ (8002694 <HAL_GPIO_EXTI_Callback+0x280>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_2_Pin);
 8002658:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <HAL_GPIO_EXTI_Callback+0x25c>)
 800265a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800265e:	615a      	str	r2, [r3, #20]
 8002660:	e058      	b.n	8002714 <HAL_GPIO_EXTI_Callback+0x300>
 8002662:	bf00      	nop
 8002664:	40020400 	.word	0x40020400
 8002668:	40020000 	.word	0x40020000
 800266c:	200004d0 	.word	0x200004d0
 8002670:	40013c00 	.word	0x40013c00
 8002674:	40020800 	.word	0x40020800
 8002678:	200004d4 	.word	0x200004d4
 800267c:	200004d8 	.word	0x200004d8
 8002680:	200004dc 	.word	0x200004dc
 8002684:	200004e0 	.word	0x200004e0
 8002688:	40020c00 	.word	0x40020c00
 800268c:	200004e4 	.word	0x200004e4
 8002690:	200004e8 	.word	0x200004e8
 8002694:	20000610 	.word	0x20000610
 8002698:	40021000 	.word	0x40021000
	}
	else if((GPIO_Pin == Button_3_Pin) && (HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin) == GPIO_PIN_RESET))
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026a2:	d119      	bne.n	80026d8 <HAL_GPIO_EXTI_Callback+0x2c4>
 80026a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026a8:	481c      	ldr	r0, [pc, #112]	@ (800271c <HAL_GPIO_EXTI_Callback+0x308>)
 80026aa:	f005 fd5f 	bl	800816c <HAL_GPIO_ReadPin>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d111      	bne.n	80026d8 <HAL_GPIO_EXTI_Callback+0x2c4>
	{
		mode = mode + BLUE_STEP1;
 80026b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002720 <HAL_GPIO_EXTI_Callback+0x30c>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	330d      	adds	r3, #13
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	4b18      	ldr	r3, [pc, #96]	@ (8002720 <HAL_GPIO_EXTI_Callback+0x30c>)
 80026be:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_STEP1)
 80026c0:	4b17      	ldr	r3, [pc, #92]	@ (8002720 <HAL_GPIO_EXTI_Callback+0x30c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b0d      	cmp	r3, #13
 80026c6:	d902      	bls.n	80026ce <HAL_GPIO_EXTI_Callback+0x2ba>
		{
			mode = VOID;
 80026c8:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <HAL_GPIO_EXTI_Callback+0x30c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_3_Pin);
 80026ce:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <HAL_GPIO_EXTI_Callback+0x310>)
 80026d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026d4:	615a      	str	r2, [r3, #20]
 80026d6:	e01d      	b.n	8002714 <HAL_GPIO_EXTI_Callback+0x300>
	}
	else if((GPIO_Pin == Button_4_Pin) && (HAL_GPIO_ReadPin(Button_4_GPIO_Port, Button_4_Pin) == GPIO_PIN_RESET))
 80026d8:	88fb      	ldrh	r3, [r7, #6]
 80026da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026de:	d119      	bne.n	8002714 <HAL_GPIO_EXTI_Callback+0x300>
 80026e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026e4:	4810      	ldr	r0, [pc, #64]	@ (8002728 <HAL_GPIO_EXTI_Callback+0x314>)
 80026e6:	f005 fd41 	bl	800816c <HAL_GPIO_ReadPin>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d111      	bne.n	8002714 <HAL_GPIO_EXTI_Callback+0x300>
	{
		mode = mode + BLUE_STEP1_2;
 80026f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <HAL_GPIO_EXTI_Callback+0x30c>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	330e      	adds	r3, #14
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <HAL_GPIO_EXTI_Callback+0x30c>)
 80026fa:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_STEP1_2)
 80026fc:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <HAL_GPIO_EXTI_Callback+0x30c>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b0e      	cmp	r3, #14
 8002702:	d902      	bls.n	800270a <HAL_GPIO_EXTI_Callback+0x2f6>
		{
			mode = VOID;
 8002704:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <HAL_GPIO_EXTI_Callback+0x30c>)
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_4_Pin);
 800270a:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <HAL_GPIO_EXTI_Callback+0x310>)
 800270c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002710:	615a      	str	r2, [r3, #20]
	}
}
 8002712:	e7ff      	b.n	8002714 <HAL_GPIO_EXTI_Callback+0x300>
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40021000 	.word	0x40021000
 8002720:	20000610 	.word	0x20000610
 8002724:	40013c00 	.word	0x40013c00
 8002728:	40020400 	.word	0x40020400
 800272c:	00000000 	.word	0x00000000

08002730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002734:	f5ad 6dff 	sub.w	sp, sp, #2040	@ 0x7f8
 8002738:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800273a:	f005 f941 	bl	80079c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800273e:	f001 fe95 	bl	800446c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002742:	f002 f9b3 	bl	8004aac <MX_GPIO_Init>
  MX_I2C2_Init();
 8002746:	f001 fefb 	bl	8004540 <MX_I2C2_Init>
  MX_TIM1_Init();
 800274a:	f001 ff27 	bl	800459c <MX_TIM1_Init>
  MX_TIM2_Init();
 800274e:	f001 ffe9 	bl	8004724 <MX_TIM2_Init>
  MX_TIM8_Init();
 8002752:	f002 f869 	bl	8004828 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002756:	f002 f92b 	bl	80049b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800275a:	f002 f953 	bl	8004a04 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800275e:	f002 f97b 	bl	8004a58 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8002762:	2100      	movs	r1, #0
 8002764:	48cc      	ldr	r0, [pc, #816]	@ (8002a98 <main+0x368>)
 8002766:	f006 ff29 	bl	80095bc <HAL_TIM_PWM_Start_IT>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <main+0x44>
  {
	  Error_Handler();
 8002770:	f002 fc82 	bl	8005078 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8002774:	2104      	movs	r1, #4
 8002776:	48c8      	ldr	r0, [pc, #800]	@ (8002a98 <main+0x368>)
 8002778:	f006 ff20 	bl	80095bc <HAL_TIM_PWM_Start_IT>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <main+0x56>
  {
	  Error_Handler();
 8002782:	f002 fc79 	bl	8005078 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8002786:	2108      	movs	r1, #8
 8002788:	48c3      	ldr	r0, [pc, #780]	@ (8002a98 <main+0x368>)
 800278a:	f006 ff17 	bl	80095bc <HAL_TIM_PWM_Start_IT>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <main+0x68>
  {
	  Error_Handler();
 8002794:	f002 fc70 	bl	8005078 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8002798:	210c      	movs	r1, #12
 800279a:	48bf      	ldr	r0, [pc, #764]	@ (8002a98 <main+0x368>)
 800279c:	f006 ff0e 	bl	80095bc <HAL_TIM_PWM_Start_IT>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <main+0x7a>
  {
	  Error_Handler();
 80027a6:	f002 fc67 	bl	8005078 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1) != HAL_OK)
 80027aa:	2100      	movs	r1, #0
 80027ac:	48bb      	ldr	r0, [pc, #748]	@ (8002a9c <main+0x36c>)
 80027ae:	f006 ff05 	bl	80095bc <HAL_TIM_PWM_Start_IT>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <main+0x8c>
  {
	  Error_Handler();
 80027b8:	f002 fc5e 	bl	8005078 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2) != HAL_OK)
 80027bc:	2104      	movs	r1, #4
 80027be:	48b7      	ldr	r0, [pc, #732]	@ (8002a9c <main+0x36c>)
 80027c0:	f006 fefc 	bl	80095bc <HAL_TIM_PWM_Start_IT>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <main+0x9e>
  {
	  Error_Handler();
 80027ca:	f002 fc55 	bl	8005078 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3) != HAL_OK)
 80027ce:	2108      	movs	r1, #8
 80027d0:	48b2      	ldr	r0, [pc, #712]	@ (8002a9c <main+0x36c>)
 80027d2:	f006 fef3 	bl	80095bc <HAL_TIM_PWM_Start_IT>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <main+0xb0>
  {
	  Error_Handler();
 80027dc:	f002 fc4c 	bl	8005078 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4) != HAL_OK)
 80027e0:	210c      	movs	r1, #12
 80027e2:	48ae      	ldr	r0, [pc, #696]	@ (8002a9c <main+0x36c>)
 80027e4:	f006 feea 	bl	80095bc <HAL_TIM_PWM_Start_IT>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <main+0xc2>
  {
	  Error_Handler();
 80027ee:	f002 fc43 	bl	8005078 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3) != HAL_OK)
 80027f2:	2108      	movs	r1, #8
 80027f4:	48aa      	ldr	r0, [pc, #680]	@ (8002aa0 <main+0x370>)
 80027f6:	f006 fee1 	bl	80095bc <HAL_TIM_PWM_Start_IT>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <main+0xd4>
  {
	  Error_Handler();
 8002800:	f002 fc3a 	bl	8005078 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4) != HAL_OK)
 8002804:	210c      	movs	r1, #12
 8002806:	48a6      	ldr	r0, [pc, #664]	@ (8002aa0 <main+0x370>)
 8002808:	f006 fed8 	bl	80095bc <HAL_TIM_PWM_Start_IT>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <main+0xe6>
  {
	  Error_Handler();
 8002812:	f002 fc31 	bl	8005078 <Error_Handler>
  }

  if(HAL_UART_Receive_IT(&huart1, receive, 1) != HAL_OK)
 8002816:	2201      	movs	r2, #1
 8002818:	49a2      	ldr	r1, [pc, #648]	@ (8002aa4 <main+0x374>)
 800281a:	48a3      	ldr	r0, [pc, #652]	@ (8002aa8 <main+0x378>)
 800281c:	f007 fede 	bl	800a5dc <HAL_UART_Receive_IT>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <main+0xfa>
  {
	  Error_Handler();
 8002826:	f002 fc27 	bl	8005078 <Error_Handler>
  }
  if(HAL_UART_Receive_IT(&huart2, receiveCAM, 1) != HAL_OK)
 800282a:	2201      	movs	r2, #1
 800282c:	499f      	ldr	r1, [pc, #636]	@ (8002aac <main+0x37c>)
 800282e:	48a0      	ldr	r0, [pc, #640]	@ (8002ab0 <main+0x380>)
 8002830:	f007 fed4 	bl	800a5dc <HAL_UART_Receive_IT>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <main+0x10e>
  {
	  Error_Handler();
 800283a:	f002 fc1d 	bl	8005078 <Error_Handler>
  }
  if(HAL_UART_Receive_IT(&huart3, receiveMEGA, 1) != HAL_OK)
 800283e:	2201      	movs	r2, #1
 8002840:	499c      	ldr	r1, [pc, #624]	@ (8002ab4 <main+0x384>)
 8002842:	489d      	ldr	r0, [pc, #628]	@ (8002ab8 <main+0x388>)
 8002844:	f007 feca 	bl	800a5dc <HAL_UART_Receive_IT>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <main+0x122>
  {
	  Error_Handler();
 800284e:	f002 fc13 	bl	8005078 <Error_Handler>
  }

  initializeSilos();
 8002852:	f003 fe21 	bl	8006498 <initializeSilos>

  external_global red_step[3] = {
 8002856:	4a99      	ldr	r2, [pc, #612]	@ (8002abc <main+0x38c>)
 8002858:	f507 63f0 	add.w	r3, r7, #1920	@ 0x780
 800285c:	4611      	mov	r1, r2
 800285e:	2248      	movs	r2, #72	@ 0x48
 8002860:	4618      	mov	r0, r3
 8002862:	f00a fd00 	bl	800d266 <memcpy>
		  {0.0, 6000.0, 0.0},
		  {3700.0, 6000.0, 0.0},
		  {3700.0, 9200.0, 0.0}
  };
  external_global red_step2[3] = {
 8002866:	4a96      	ldr	r2, [pc, #600]	@ (8002ac0 <main+0x390>)
 8002868:	f507 63e7 	add.w	r3, r7, #1848	@ 0x738
 800286c:	4611      	mov	r1, r2
 800286e:	2248      	movs	r2, #72	@ 0x48
 8002870:	4618      	mov	r0, r3
 8002872:	f00a fcf8 	bl	800d266 <memcpy>
		  {0.0, 6000.0, 0.0},
		  {3650.0, 6000.0, 0.0},
		  {3650.0, 9200.0, 0.0}
  };

  external_global red_storage = {900.0, 9050.0, 0.0};
 8002876:	4b93      	ldr	r3, [pc, #588]	@ (8002ac4 <main+0x394>)
 8002878:	f507 64e4 	add.w	r4, r7, #1824	@ 0x720
 800287c:	461d      	mov	r5, r3
 800287e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002882:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002886:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global red_silo = {3700.0, 9050.0, 90.0};
 800288a:	4b8f      	ldr	r3, [pc, #572]	@ (8002ac8 <main+0x398>)
 800288c:	f507 64e1 	add.w	r4, r7, #1800	@ 0x708
 8002890:	461d      	mov	r5, r3
 8002892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002896:	e895 0003 	ldmia.w	r5, {r0, r1}
 800289a:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global red_throwBall = {900.0, 8000.0, -179.0};
 800289e:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80028a2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028a6:	4a89      	ldr	r2, [pc, #548]	@ (8002acc <main+0x39c>)
 80028a8:	461c      	mov	r4, r3
 80028aa:	4615      	mov	r5, r2
 80028ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028b4:	e884 0003 	stmia.w	r4, {r0, r1}

  external_global redBall[3] = {
 80028b8:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80028bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80028c0:	4a83      	ldr	r2, [pc, #524]	@ (8002ad0 <main+0x3a0>)
 80028c2:	4618      	mov	r0, r3
 80028c4:	4611      	mov	r1, r2
 80028c6:	2348      	movs	r3, #72	@ 0x48
 80028c8:	461a      	mov	r2, r3
 80028ca:	f00a fccc 	bl	800d266 <memcpy>
		  {900.0, 9050.0, -90.0},
		  {900.0, 10050.0, -179.0},
		  {900.0, 8050.0, 0.0}
  };

  external_global red_retry[3] = {
 80028ce:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80028d2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80028d6:	4a7f      	ldr	r2, [pc, #508]	@ (8002ad4 <main+0x3a4>)
 80028d8:	4618      	mov	r0, r3
 80028da:	4611      	mov	r1, r2
 80028dc:	2348      	movs	r3, #72	@ 0x48
 80028de:	461a      	mov	r2, r3
 80028e0:	f00a fcc1 	bl	800d266 <memcpy>
		  {500.0, 680.0, 0.0},
		  {3800.0, 680.0, 0.0},
		  {3800.0, 4000.0, 0.0},
  };
  external_global red_retry_storage = {1000.0, 4000.0, 0.0};
 80028e4:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80028e8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80028ec:	4a7a      	ldr	r2, [pc, #488]	@ (8002ad8 <main+0x3a8>)
 80028ee:	461c      	mov	r4, r3
 80028f0:	4615      	mov	r5, r2
 80028f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028fa:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global red_retry_silo = {3800.0, 4000.0, 90.0};
 80028fe:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002902:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002906:	4a75      	ldr	r2, [pc, #468]	@ (8002adc <main+0x3ac>)
 8002908:	461c      	mov	r4, r3
 800290a:	4615      	mov	r5, r2
 800290c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800290e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002910:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002914:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global red_retry_throwBall = {1000.0, 3000.0, -179.0};
 8002918:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 800291c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002920:	4a6f      	ldr	r2, [pc, #444]	@ (8002ae0 <main+0x3b0>)
 8002922:	461c      	mov	r4, r3
 8002924:	4615      	mov	r5, r2
 8002926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800292a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800292e:	e884 0003 	stmia.w	r4, {r0, r1}

  external_global redRetryBall[3] = {
 8002932:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002936:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800293a:	4a6a      	ldr	r2, [pc, #424]	@ (8002ae4 <main+0x3b4>)
 800293c:	4618      	mov	r0, r3
 800293e:	4611      	mov	r1, r2
 8002940:	2348      	movs	r3, #72	@ 0x48
 8002942:	461a      	mov	r2, r3
 8002944:	f00a fc8f 	bl	800d266 <memcpy>
		  {1000.0, 3000.0, 0.0}
  };



  external_global blue_step[3] = {
 8002948:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 800294c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8002950:	4a65      	ldr	r2, [pc, #404]	@ (8002ae8 <main+0x3b8>)
 8002952:	4618      	mov	r0, r3
 8002954:	4611      	mov	r1, r2
 8002956:	2348      	movs	r3, #72	@ 0x48
 8002958:	461a      	mov	r2, r3
 800295a:	f00a fc84 	bl	800d266 <memcpy>
		  {0.0, 6000.0, 0.0},
		  {-3650.0, 6000.0, 0.0},
		  {-3650.0, 9050.0, 0.0}
  };

  external_global blue_step1 = {0.0, 6000.0, 0.0};
 800295e:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002962:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	e9c1 2300 	strd	r2, r3, [r1]
 8002972:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002976:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 800297a:	a345      	add	r3, pc, #276	@ (adr r3, 8002a90 <main+0x360>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002984:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002988:	f5a3 7120 	sub.w	r1, r3, #640	@ 0x280
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	e9c1 2304 	strd	r2, r3, [r1, #16]
  external_global blue_step2 = {-3650.0, 6000.0, 0.0};
 8002998:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 800299c:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80029a0:	4a52      	ldr	r2, [pc, #328]	@ (8002aec <main+0x3bc>)
 80029a2:	461c      	mov	r4, r3
 80029a4:	4615      	mov	r5, r2
 80029a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029ae:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_step2_2 = {-3600.0, 6000.0, 0.0};
 80029b2:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80029b6:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80029ba:	4a4d      	ldr	r2, [pc, #308]	@ (8002af0 <main+0x3c0>)
 80029bc:	461c      	mov	r4, r3
 80029be:	4615      	mov	r5, r2
 80029c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029c8:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_step3 = {-3650.0, 9150.0, 0.0};
 80029cc:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80029d0:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 80029d4:	4a47      	ldr	r2, [pc, #284]	@ (8002af4 <main+0x3c4>)
 80029d6:	461c      	mov	r4, r3
 80029d8:	4615      	mov	r5, r2
 80029da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029e2:	e884 0003 	stmia.w	r4, {r0, r1}

  external_global blue_storage = {-900.0, 9150.0, 0.0};
 80029e6:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80029ea:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80029ee:	4a42      	ldr	r2, [pc, #264]	@ (8002af8 <main+0x3c8>)
 80029f0:	461c      	mov	r4, r3
 80029f2:	4615      	mov	r5, r2
 80029f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029fc:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_silo = {-3650.0, 9150.0, -90.0};
 8002a00:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002a04:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8002a08:	4a3c      	ldr	r2, [pc, #240]	@ (8002afc <main+0x3cc>)
 8002a0a:	461c      	mov	r4, r3
 8002a0c:	4615      	mov	r5, r2
 8002a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a16:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_throwBall = {-900.0, 8100.0, -179.0};
 8002a1a:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002a1e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8002a22:	4a37      	ldr	r2, [pc, #220]	@ (8002b00 <main+0x3d0>)
 8002a24:	461c      	mov	r4, r3
 8002a26:	4615      	mov	r5, r2
 8002a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a30:	e884 0003 	stmia.w	r4, {r0, r1}

  external_global blueBall[3] = {
 8002a34:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002a38:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8002a3c:	4a31      	ldr	r2, [pc, #196]	@ (8002b04 <main+0x3d4>)
 8002a3e:	4618      	mov	r0, r3
 8002a40:	4611      	mov	r1, r2
 8002a42:	2348      	movs	r3, #72	@ 0x48
 8002a44:	461a      	mov	r2, r3
 8002a46:	f00a fc0e 	bl	800d266 <memcpy>
		  {-1000.0, 9150.0, 90.0},
		  {-900.0, 10150.0, -179.0},
		  {-900.0, 8150.0, 0.0}
  };

  external_global blue_retry[3] = {
 8002a4a:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002a4e:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8002a52:	4a2d      	ldr	r2, [pc, #180]	@ (8002b08 <main+0x3d8>)
 8002a54:	4618      	mov	r0, r3
 8002a56:	4611      	mov	r1, r2
 8002a58:	2348      	movs	r3, #72	@ 0x48
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f00a fc03 	bl	800d266 <memcpy>
		  {-500.0, 770.0, 0.0},
		  {-3750.0, 820.0, 0.0},
		  {-3750.0, 4000.0, 0.0}
  };
  external_global blue_retry_storage = {-950.0, 4000.0, 0.0};
 8002a60:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002a64:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8002a68:	4a28      	ldr	r2, [pc, #160]	@ (8002b0c <main+0x3dc>)
 8002a6a:	461c      	mov	r4, r3
 8002a6c:	4615      	mov	r5, r2
 8002a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a72:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a76:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_retry_silo = {-3700.0, 4000.0, -90.0};
 8002a7a:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002a7e:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8002a82:	4a23      	ldr	r2, [pc, #140]	@ (8002b10 <main+0x3e0>)
 8002a84:	461c      	mov	r4, r3
 8002a86:	4615      	mov	r5, r2
 8002a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a8a:	e043      	b.n	8002b14 <main+0x3e4>
 8002a8c:	f3af 8000 	nop.w
 8002a90:	00000000 	.word	0x00000000
 8002a94:	40b77000 	.word	0x40b77000
 8002a98:	20000320 	.word	0x20000320
 8002a9c:	200003b0 	.word	0x200003b0
 8002aa0:	20000368 	.word	0x20000368
 8002aa4:	200004ec 	.word	0x200004ec
 8002aa8:	200003f8 	.word	0x200003f8
 8002aac:	20000540 	.word	0x20000540
 8002ab0:	20000440 	.word	0x20000440
 8002ab4:	200005c4 	.word	0x200005c4
 8002ab8:	20000488 	.word	0x20000488
 8002abc:	08011728 	.word	0x08011728
 8002ac0:	08011770 	.word	0x08011770
 8002ac4:	080117b8 	.word	0x080117b8
 8002ac8:	080117d0 	.word	0x080117d0
 8002acc:	080117e8 	.word	0x080117e8
 8002ad0:	08011800 	.word	0x08011800
 8002ad4:	08011848 	.word	0x08011848
 8002ad8:	08011890 	.word	0x08011890
 8002adc:	080118a8 	.word	0x080118a8
 8002ae0:	080118c0 	.word	0x080118c0
 8002ae4:	080118d8 	.word	0x080118d8
 8002ae8:	08011920 	.word	0x08011920
 8002aec:	08011968 	.word	0x08011968
 8002af0:	08011980 	.word	0x08011980
 8002af4:	08011998 	.word	0x08011998
 8002af8:	080119b0 	.word	0x080119b0
 8002afc:	080119c8 	.word	0x080119c8
 8002b00:	080119e0 	.word	0x080119e0
 8002b04:	080119f8 	.word	0x080119f8
 8002b08:	08011a40 	.word	0x08011a40
 8002b0c:	08011a88 	.word	0x08011a88
 8002b10:	08011aa0 	.word	0x08011aa0
 8002b14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b1a:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_retry_throwBall = {-950.0, 3000.0, 179.0};
 8002b1e:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002b22:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002b26:	4ae6      	ldr	r2, [pc, #920]	@ (8002ec0 <main+0x790>)
 8002b28:	461c      	mov	r4, r3
 8002b2a:	4615      	mov	r5, r2
 8002b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b34:	e884 0003 	stmia.w	r4, {r0, r1}

  external_global blueRetryBall[3] = {
 8002b38:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002b3c:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8002b40:	4ae0      	ldr	r2, [pc, #896]	@ (8002ec4 <main+0x794>)
 8002b42:	4618      	mov	r0, r3
 8002b44:	4611      	mov	r1, r2
 8002b46:	2348      	movs	r3, #72	@ 0x48
 8002b48:	461a      	mov	r2, r3
 8002b4a:	f00a fb8c 	bl	800d266 <memcpy>
	double smoothingFactor;
	int maxVelocity;
	double xyTolerance;
	double hTolerance;
   */
  PID_parameter red_step_parameters[3] = {
 8002b4e:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002b52:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 8002b56:	4adc      	ldr	r2, [pc, #880]	@ (8002ec8 <main+0x798>)
 8002b58:	4618      	mov	r0, r3
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	23c0      	movs	r3, #192	@ 0xc0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f00a fb81 	bl	800d266 <memcpy>
		  {1.25, 0.0, 0.0, 2.5, 0.8, 4000, 200, 2},  //2500
		  {1.8, 0.0, 0.0, 2.5, 0.8, 3500, 100, 2},
		  {1.5, 0.0, 0.0, 2.5, 0.8, 3500, 200, 5}
  };

  PID_parameter red_retry_parameters[3] = {
 8002b64:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002b68:	f5a3 63b6 	sub.w	r3, r3, #1456	@ 0x5b0
 8002b6c:	4ad7      	ldr	r2, [pc, #860]	@ (8002ecc <main+0x79c>)
 8002b6e:	4618      	mov	r0, r3
 8002b70:	4611      	mov	r1, r2
 8002b72:	23c0      	movs	r3, #192	@ 0xc0
 8002b74:	461a      	mov	r2, r3
 8002b76:	f00a fb76 	bl	800d266 <memcpy>
		  {4.0, 0.0, 0.0, 2.5, 0.8, 2500, 200, 2},
		  {1.6, 0.0, 0.0, 2.5, 0.75, 3500, 200, 2},
		  {1.5, 0.0, 0.0, 3.0, 0.75, 3500, 300, 5}
  };

  uint16_t red_step_numPoints = sizeof(red_step) / sizeof(red_step[0]);
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	f8a7 37ee 	strh.w	r3, [r7, #2030]	@ 0x7ee
  uint16_t red_step2_numPoints = sizeof(red_step2) / sizeof(red_step2[0]);
 8002b80:	2303      	movs	r3, #3
 8002b82:	f8a7 37ec 	strh.w	r3, [r7, #2028]	@ 0x7ec

  uint16_t red_retry_numPoints = sizeof(red_retry) / sizeof(red_retry[0]);
 8002b86:	2303      	movs	r3, #3
 8002b88:	f8a7 37ea 	strh.w	r3, [r7, #2026]	@ 0x7ea

  PID_parameter blue_step_parameters[3] = {
 8002b8c:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002b90:	f5a3 63ce 	sub.w	r3, r3, #1648	@ 0x670
 8002b94:	4ace      	ldr	r2, [pc, #824]	@ (8002ed0 <main+0x7a0>)
 8002b96:	4618      	mov	r0, r3
 8002b98:	4611      	mov	r1, r2
 8002b9a:	23c0      	movs	r3, #192	@ 0xc0
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f00a fb62 	bl	800d266 <memcpy>
		  {1.15, 0.0, 0.0, 2.5, 0.7, 3200, 200, 2},
		  {1.65, 0.0, 0.0, 3.0, 0.7, 3300, 200, 1},
		  {1.5, 0.0, 0.0, 2.5, 0.75, 3200, 200, 5}
  };

  PID_parameter blue_retry_parameters[3] = {
 8002ba2:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002ba6:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 8002baa:	4aca      	ldr	r2, [pc, #808]	@ (8002ed4 <main+0x7a4>)
 8002bac:	4618      	mov	r0, r3
 8002bae:	4611      	mov	r1, r2
 8002bb0:	23c0      	movs	r3, #192	@ 0xc0
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f00a fb57 	bl	800d266 <memcpy>
		  {4.0, 0.0, 0.0, 2.5, 0.8, 2500, 200, 2},
		  {1.4, 0.0, 0.0, 2.5, 0.75, 3500, 200, 1},
		  {1.5, 0.0, 0.0, 3.0, 0.75, 3500, 300, 5}
  };

  uint16_t blue_step_numPoints = sizeof(blue_step) / sizeof(blue_step[0]);
 8002bb8:	2303      	movs	r3, #3
 8002bba:	f8a7 37e8 	strh.w	r3, [r7, #2024]	@ 0x7e8
  uint16_t blue_retry_numPoints = sizeof(blue_retry) / sizeof(blue_retry[0]);
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	f8a7 37e6 	strh.w	r3, [r7, #2022]	@ 0x7e6



  external_global tes_storage = {-1000.0, 0.0, 0.0};
 8002bc4:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002bc8:	f5a3 61e9 	sub.w	r1, r3, #1864	@ 0x748
 8002bcc:	a3b2      	add	r3, pc, #712	@ (adr r3, 8002e98 <main+0x768>)
 8002bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd2:	e9c1 2300 	strd	r2, r3, [r1]
 8002bd6:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002bda:	f5a3 61e9 	sub.w	r1, r3, #1864	@ 0x748
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002bea:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002bee:	f5a3 61e9 	sub.w	r1, r3, #1864	@ 0x748
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9c1 2304 	strd	r2, r3, [r1, #16]
  external_global tes_silo = {0.0, 0.0, 90.0};
 8002bfe:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002c02:	f5a3 61ec 	sub.w	r1, r3, #1888	@ 0x760
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	e9c1 2300 	strd	r2, r3, [r1]
 8002c12:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002c16:	f5a3 61ec 	sub.w	r1, r3, #1888	@ 0x760
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002c26:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002c2a:	f5a3 61ec 	sub.w	r1, r3, #1888	@ 0x760
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	4ba9      	ldr	r3, [pc, #676]	@ (8002ed8 <main+0x7a8>)
 8002c34:	e9c1 2304 	strd	r2, r3, [r1, #16]
  external_global redBall_TES[3] = {
 8002c38:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002c3c:	f5a3 63f5 	sub.w	r3, r3, #1960	@ 0x7a8
 8002c40:	4aa6      	ldr	r2, [pc, #664]	@ (8002edc <main+0x7ac>)
 8002c42:	4618      	mov	r0, r3
 8002c44:	4611      	mov	r1, r2
 8002c46:	2348      	movs	r3, #72	@ 0x48
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f00a fb0c 	bl	800d266 <memcpy>
		  {-1000.0, 0.0, -90.0},
		  {-1000.0, 500.0, -179.0},
		  {-1000.0, -500.0, 0.0}
  };
  external_global redBall_TES_throwball = {-1000.0, -500.0, -179.0};
 8002c4e:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002c52:	f5a3 63f8 	sub.w	r3, r3, #1984	@ 0x7c0
 8002c56:	4aa2      	ldr	r2, [pc, #648]	@ (8002ee0 <main+0x7b0>)
 8002c58:	461c      	mov	r4, r3
 8002c5a:	4615      	mov	r5, r2
 8002c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c64:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global kiri = {-3800.0, 0.0, 0.0};
 8002c68:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002c6c:	f5a3 61fb 	sub.w	r1, r3, #2008	@ 0x7d8
 8002c70:	a38b      	add	r3, pc, #556	@ (adr r3, 8002ea0 <main+0x770>)
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	e9c1 2300 	strd	r2, r3, [r1]
 8002c7a:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002c7e:	f5a3 61fb 	sub.w	r1, r3, #2008	@ 0x7d8
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002c8e:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002c92:	f5a3 61fb 	sub.w	r1, r3, #2008	@ 0x7d8
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_init();
 8002ca2:	f7ff fb34 	bl	800230e <lcd_init>

	  int FL_distance = sensorMEGA[0];
 8002ca6:	4b8f      	ldr	r3, [pc, #572]	@ (8002ee4 <main+0x7b4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8c7 37e0 	str.w	r3, [r7, #2016]	@ 0x7e0
	  int FR_distance = sensorMEGA[2];
 8002cae:	4b8d      	ldr	r3, [pc, #564]	@ (8002ee4 <main+0x7b4>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc

	  external_global position = odometry_eg();
 8002cb6:	f002 fa03 	bl	80050c0 <odometry_eg>
 8002cba:	eeb0 5a40 	vmov.f32	s10, s0
 8002cbe:	eef0 5a60 	vmov.f32	s11, s1
 8002cc2:	eeb0 6a41 	vmov.f32	s12, s2
 8002cc6:	eef0 6a61 	vmov.f32	s13, s3
 8002cca:	eeb0 7a42 	vmov.f32	s14, s4
 8002cce:	eef0 7a62 	vmov.f32	s15, s5
 8002cd2:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002cd6:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8002cda:	ed83 5b00 	vstr	d5, [r3]
 8002cde:	ed83 6b02 	vstr	d6, [r3, #8]
 8002ce2:	ed83 7b04 	vstr	d7, [r3, #16]
	  display_EG();
 8002ce6:	f002 fb2f 	bl	8005348 <display_EG>

//	  displaySilo();
//	  displayCounter();
//	  displayBall();

	  if(fabs(position.x) > 99999 || fabs(position.y) > 99999)
 8002cea:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002cee:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	4690      	mov	r8, r2
 8002cf8:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002cfc:	a36a      	add	r3, pc, #424	@ (adr r3, 8002ea8 <main+0x778>)
 8002cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d02:	4640      	mov	r0, r8
 8002d04:	4649      	mov	r1, r9
 8002d06:	f7fd ff07 	bl	8000b18 <__aeabi_dcmpgt>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d112      	bne.n	8002d36 <main+0x606>
 8002d10:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002d14:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8002d18:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d1c:	4692      	mov	sl, r2
 8002d1e:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002d22:	a361      	add	r3, pc, #388	@ (adr r3, 8002ea8 <main+0x778>)
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	4650      	mov	r0, sl
 8002d2a:	4659      	mov	r1, fp
 8002d2c:	f7fd fef4 	bl	8000b18 <__aeabi_dcmpgt>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <main+0x60a>
	  {
		  Error_Handler();
 8002d36:	f002 f99f 	bl	8005078 <Error_Handler>
	  }

	  bool red_step_check = atTargetEG(red_step[red_step_numPoints-1], position, 400, 5);
 8002d3a:	f8b7 37ee 	ldrh.w	r3, [r7, #2030]	@ 0x7ee
 8002d3e:	1e5a      	subs	r2, r3, #1
 8002d40:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002d44:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8002d48:	ed93 3b00 	vldr	d3, [r3]
 8002d4c:	ed93 4b02 	vldr	d4, [r3, #8]
 8002d50:	ed93 5b04 	vldr	d5, [r3, #16]
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	f503 63fe 	add.w	r3, r3, #2032	@ 0x7f0
 8002d60:	443b      	add	r3, r7
 8002d62:	3b70      	subs	r3, #112	@ 0x70
 8002d64:	ed93 0b00 	vldr	d0, [r3]
 8002d68:	ed93 1b02 	vldr	d1, [r3, #8]
 8002d6c:	ed93 2b04 	vldr	d2, [r3, #16]
 8002d70:	ed9f 7b4f 	vldr	d7, [pc, #316]	@ 8002eb0 <main+0x780>
 8002d74:	ed9f 6b50 	vldr	d6, [pc, #320]	@ 8002eb8 <main+0x788>
 8002d78:	f002 fcf8 	bl	800576c <atTargetEG>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f887 37db 	strb.w	r3, [r7, #2011]	@ 0x7db
	  bool red_step2_check = atTargetEG(red_step2[red_step2_numPoints-1], position, 400, 5);
 8002d82:	f8b7 37ec 	ldrh.w	r3, [r7, #2028]	@ 0x7ec
 8002d86:	1e5a      	subs	r2, r3, #1
 8002d88:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002d8c:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8002d90:	ed93 3b00 	vldr	d3, [r3]
 8002d94:	ed93 4b02 	vldr	d4, [r3, #8]
 8002d98:	ed93 5b04 	vldr	d5, [r3, #16]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	f503 63fe 	add.w	r3, r3, #2032	@ 0x7f0
 8002da8:	443b      	add	r3, r7
 8002daa:	3bb8      	subs	r3, #184	@ 0xb8
 8002dac:	ed93 0b00 	vldr	d0, [r3]
 8002db0:	ed93 1b02 	vldr	d1, [r3, #8]
 8002db4:	ed93 2b04 	vldr	d2, [r3, #16]
 8002db8:	ed9f 7b3d 	vldr	d7, [pc, #244]	@ 8002eb0 <main+0x780>
 8002dbc:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8002eb8 <main+0x788>
 8002dc0:	f002 fcd4 	bl	800576c <atTargetEG>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 37da 	strb.w	r3, [r7, #2010]	@ 0x7da

	  bool red_storage_check = atTargetEG(red_storage, position, 400, 5);
 8002dca:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002dce:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8002dd2:	ed93 3b00 	vldr	d3, [r3]
 8002dd6:	ed93 4b02 	vldr	d4, [r3, #8]
 8002dda:	ed93 5b04 	vldr	d5, [r3, #16]
 8002dde:	f507 63e4 	add.w	r3, r7, #1824	@ 0x720
 8002de2:	ed93 0b00 	vldr	d0, [r3]
 8002de6:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 8002dea:	ed93 1b00 	vldr	d1, [r3]
 8002dee:	f507 63e6 	add.w	r3, r7, #1840	@ 0x730
 8002df2:	ed93 2b00 	vldr	d2, [r3]
 8002df6:	ed9f 7b2e 	vldr	d7, [pc, #184]	@ 8002eb0 <main+0x780>
 8002dfa:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8002eb8 <main+0x788>
 8002dfe:	f002 fcb5 	bl	800576c <atTargetEG>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f887 37d9 	strb.w	r3, [r7, #2009]	@ 0x7d9
	  bool red_silo_check = atTargetEG(red_silo, position, 400, 5);
 8002e08:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002e0c:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8002e10:	ed93 3b00 	vldr	d3, [r3]
 8002e14:	ed93 4b02 	vldr	d4, [r3, #8]
 8002e18:	ed93 5b04 	vldr	d5, [r3, #16]
 8002e1c:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8002e20:	ed93 0b00 	vldr	d0, [r3]
 8002e24:	f507 63e2 	add.w	r3, r7, #1808	@ 0x710
 8002e28:	ed93 1b00 	vldr	d1, [r3]
 8002e2c:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 8002e30:	ed93 2b00 	vldr	d2, [r3]
 8002e34:	ed9f 7b1e 	vldr	d7, [pc, #120]	@ 8002eb0 <main+0x780>
 8002e38:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8002eb8 <main+0x788>
 8002e3c:	f002 fc96 	bl	800576c <atTargetEG>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f887 37d8 	strb.w	r3, [r7, #2008]	@ 0x7d8

	  bool red_retry_check = atTargetEG(red_retry[red_retry_numPoints-1], position, 400, 5);
 8002e46:	f8b7 37ea 	ldrh.w	r3, [r7, #2026]	@ 0x7ea
 8002e4a:	1e5a      	subs	r2, r3, #1
 8002e4c:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002e50:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8002e54:	ed93 3b00 	vldr	d3, [r3]
 8002e58:	ed93 4b02 	vldr	d4, [r3, #8]
 8002e5c:	ed93 5b04 	vldr	d5, [r3, #16]
 8002e60:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002e64:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	ed93 0b00 	vldr	d0, [r3]
 8002e76:	ed93 1b02 	vldr	d1, [r3, #8]
 8002e7a:	ed93 2b04 	vldr	d2, [r3, #16]
 8002e7e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8002eb0 <main+0x780>
 8002e82:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8002eb8 <main+0x788>
 8002e86:	f002 fc71 	bl	800576c <atTargetEG>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f887 37d7 	strb.w	r3, [r7, #2007]	@ 0x7d7
	  bool red_retry_storage_check = atTargetEG(red_retry_storage, position, 400, 5);
 8002e90:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002e94:	e028      	b.n	8002ee8 <main+0x7b8>
 8002e96:	bf00      	nop
 8002e98:	00000000 	.word	0x00000000
 8002e9c:	c08f4000 	.word	0xc08f4000
 8002ea0:	00000000 	.word	0x00000000
 8002ea4:	c0adb000 	.word	0xc0adb000
 8002ea8:	00000000 	.word	0x00000000
 8002eac:	40f869f0 	.word	0x40f869f0
 8002eb0:	00000000 	.word	0x00000000
 8002eb4:	40140000 	.word	0x40140000
 8002eb8:	00000000 	.word	0x00000000
 8002ebc:	40790000 	.word	0x40790000
 8002ec0:	08011ab8 	.word	0x08011ab8
 8002ec4:	08011ad0 	.word	0x08011ad0
 8002ec8:	08011b18 	.word	0x08011b18
 8002ecc:	08011bd8 	.word	0x08011bd8
 8002ed0:	08011c98 	.word	0x08011c98
 8002ed4:	08011d58 	.word	0x08011d58
 8002ed8:	40568000 	.word	0x40568000
 8002edc:	08011e18 	.word	0x08011e18
 8002ee0:	08011e60 	.word	0x08011e60
 8002ee4:	20000600 	.word	0x20000600
 8002ee8:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8002eec:	ed93 3b00 	vldr	d3, [r3]
 8002ef0:	ed93 4b02 	vldr	d4, [r3, #8]
 8002ef4:	ed93 5b04 	vldr	d5, [r3, #16]
 8002ef8:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002efc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f00:	ed93 0b00 	vldr	d0, [r3]
 8002f04:	ed93 1b02 	vldr	d1, [r3, #8]
 8002f08:	ed93 2b04 	vldr	d2, [r3, #16]
 8002f0c:	ed9f 7bda 	vldr	d7, [pc, #872]	@ 8003278 <main+0xb48>
 8002f10:	ed9f 6bdb 	vldr	d6, [pc, #876]	@ 8003280 <main+0xb50>
 8002f14:	f002 fc2a 	bl	800576c <atTargetEG>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f887 37d6 	strb.w	r3, [r7, #2006]	@ 0x7d6
	  bool red_retry_silo_check = atTargetEG(red_retry_silo, position, 400, 5);
 8002f1e:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002f22:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8002f26:	ed93 3b00 	vldr	d3, [r3]
 8002f2a:	ed93 4b02 	vldr	d4, [r3, #8]
 8002f2e:	ed93 5b04 	vldr	d5, [r3, #16]
 8002f32:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002f36:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002f3a:	ed93 0b00 	vldr	d0, [r3]
 8002f3e:	ed93 1b02 	vldr	d1, [r3, #8]
 8002f42:	ed93 2b04 	vldr	d2, [r3, #16]
 8002f46:	ed9f 7bcc 	vldr	d7, [pc, #816]	@ 8003278 <main+0xb48>
 8002f4a:	ed9f 6bcd 	vldr	d6, [pc, #820]	@ 8003280 <main+0xb50>
 8002f4e:	f002 fc0d 	bl	800576c <atTargetEG>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f887 37d5 	strb.w	r3, [r7, #2005]	@ 0x7d5


	  bool blue_step_check = atTargetEG(blue_step[blue_step_numPoints-1], position, 400, 5);
 8002f58:	f8b7 37e8 	ldrh.w	r3, [r7, #2024]	@ 0x7e8
 8002f5c:	1e5a      	subs	r2, r3, #1
 8002f5e:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002f62:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8002f66:	ed93 3b00 	vldr	d3, [r3]
 8002f6a:	ed93 4b02 	vldr	d4, [r3, #8]
 8002f6e:	ed93 5b04 	vldr	d5, [r3, #16]
 8002f72:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002f76:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	440b      	add	r3, r1
 8002f84:	ed93 0b00 	vldr	d0, [r3]
 8002f88:	ed93 1b02 	vldr	d1, [r3, #8]
 8002f8c:	ed93 2b04 	vldr	d2, [r3, #16]
 8002f90:	ed9f 7bb9 	vldr	d7, [pc, #740]	@ 8003278 <main+0xb48>
 8002f94:	ed9f 6bba 	vldr	d6, [pc, #744]	@ 8003280 <main+0xb50>
 8002f98:	f002 fbe8 	bl	800576c <atTargetEG>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f887 37d4 	strb.w	r3, [r7, #2004]	@ 0x7d4

	  bool blue_step1_check = atTargetEG(blue_step1, position, 200, 2);
 8002fa2:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002fa6:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8002faa:	ed93 3b00 	vldr	d3, [r3]
 8002fae:	ed93 4b02 	vldr	d4, [r3, #8]
 8002fb2:	ed93 5b04 	vldr	d5, [r3, #16]
 8002fb6:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002fba:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8002fbe:	ed93 0b00 	vldr	d0, [r3]
 8002fc2:	ed93 1b02 	vldr	d1, [r3, #8]
 8002fc6:	ed93 2b04 	vldr	d2, [r3, #16]
 8002fca:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8003288 <main+0xb58>
 8002fce:	ed9f 6bb0 	vldr	d6, [pc, #704]	@ 8003290 <main+0xb60>
 8002fd2:	f002 fbcb 	bl	800576c <atTargetEG>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f887 37d3 	strb.w	r3, [r7, #2003]	@ 0x7d3
	  bool blue_step2_check = atTargetEG(blue_step2, position, 200, 2);
 8002fdc:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002fe0:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8002fe4:	ed93 3b00 	vldr	d3, [r3]
 8002fe8:	ed93 4b02 	vldr	d4, [r3, #8]
 8002fec:	ed93 5b04 	vldr	d5, [r3, #16]
 8002ff0:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8002ff4:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8002ff8:	ed93 0b00 	vldr	d0, [r3]
 8002ffc:	ed93 1b02 	vldr	d1, [r3, #8]
 8003000:	ed93 2b04 	vldr	d2, [r3, #16]
 8003004:	ed9f 7ba0 	vldr	d7, [pc, #640]	@ 8003288 <main+0xb58>
 8003008:	ed9f 6ba1 	vldr	d6, [pc, #644]	@ 8003290 <main+0xb60>
 800300c:	f002 fbae 	bl	800576c <atTargetEG>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 37d2 	strb.w	r3, [r7, #2002]	@ 0x7d2
	  bool blue_step2_2_check = atTargetEG(blue_step2_2, position, 200, 2);
 8003016:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 800301a:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 800301e:	ed93 3b00 	vldr	d3, [r3]
 8003022:	ed93 4b02 	vldr	d4, [r3, #8]
 8003026:	ed93 5b04 	vldr	d5, [r3, #16]
 800302a:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 800302e:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8003032:	ed93 0b00 	vldr	d0, [r3]
 8003036:	ed93 1b02 	vldr	d1, [r3, #8]
 800303a:	ed93 2b04 	vldr	d2, [r3, #16]
 800303e:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 8003288 <main+0xb58>
 8003042:	ed9f 6b93 	vldr	d6, [pc, #588]	@ 8003290 <main+0xb60>
 8003046:	f002 fb91 	bl	800576c <atTargetEG>
 800304a:	4603      	mov	r3, r0
 800304c:	f887 37d1 	strb.w	r3, [r7, #2001]	@ 0x7d1
	  bool blue_step3_check = atTargetEG(blue_step3, position, 200, 5);
 8003050:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003054:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8003058:	ed93 3b00 	vldr	d3, [r3]
 800305c:	ed93 4b02 	vldr	d4, [r3, #8]
 8003060:	ed93 5b04 	vldr	d5, [r3, #16]
 8003064:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003068:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 800306c:	ed93 0b00 	vldr	d0, [r3]
 8003070:	ed93 1b02 	vldr	d1, [r3, #8]
 8003074:	ed93 2b04 	vldr	d2, [r3, #16]
 8003078:	ed9f 7b7f 	vldr	d7, [pc, #508]	@ 8003278 <main+0xb48>
 800307c:	ed9f 6b84 	vldr	d6, [pc, #528]	@ 8003290 <main+0xb60>
 8003080:	f002 fb74 	bl	800576c <atTargetEG>
 8003084:	4603      	mov	r3, r0
 8003086:	f887 37d0 	strb.w	r3, [r7, #2000]	@ 0x7d0
	  bool blue_storage_check = atTargetEG(blue_storage, position, 400, 5);
 800308a:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 800308e:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8003092:	ed93 3b00 	vldr	d3, [r3]
 8003096:	ed93 4b02 	vldr	d4, [r3, #8]
 800309a:	ed93 5b04 	vldr	d5, [r3, #16]
 800309e:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80030a2:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80030a6:	ed93 0b00 	vldr	d0, [r3]
 80030aa:	ed93 1b02 	vldr	d1, [r3, #8]
 80030ae:	ed93 2b04 	vldr	d2, [r3, #16]
 80030b2:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8003278 <main+0xb48>
 80030b6:	ed9f 6b72 	vldr	d6, [pc, #456]	@ 8003280 <main+0xb50>
 80030ba:	f002 fb57 	bl	800576c <atTargetEG>
 80030be:	4603      	mov	r3, r0
 80030c0:	f887 37cf 	strb.w	r3, [r7, #1999]	@ 0x7cf
	  bool blue_silo_check = atTargetEG(blue_silo, position, 400, 5);
 80030c4:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80030c8:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 80030cc:	ed93 3b00 	vldr	d3, [r3]
 80030d0:	ed93 4b02 	vldr	d4, [r3, #8]
 80030d4:	ed93 5b04 	vldr	d5, [r3, #16]
 80030d8:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80030dc:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 80030e0:	ed93 0b00 	vldr	d0, [r3]
 80030e4:	ed93 1b02 	vldr	d1, [r3, #8]
 80030e8:	ed93 2b04 	vldr	d2, [r3, #16]
 80030ec:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8003278 <main+0xb48>
 80030f0:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 8003280 <main+0xb50>
 80030f4:	f002 fb3a 	bl	800576c <atTargetEG>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 37ce 	strb.w	r3, [r7, #1998]	@ 0x7ce

	  bool blue_retry_check = atTargetEG(blue_retry[blue_retry_numPoints-1], position, 400, 5);
 80030fe:	f8b7 37e6 	ldrh.w	r3, [r7, #2022]	@ 0x7e6
 8003102:	1e5a      	subs	r2, r3, #1
 8003104:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003108:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 800310c:	ed93 3b00 	vldr	d3, [r3]
 8003110:	ed93 4b02 	vldr	d4, [r3, #8]
 8003114:	ed93 5b04 	vldr	d5, [r3, #16]
 8003118:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 800311c:	f5a3 7168 	sub.w	r1, r3, #928	@ 0x3a0
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	440b      	add	r3, r1
 800312a:	ed93 0b00 	vldr	d0, [r3]
 800312e:	ed93 1b02 	vldr	d1, [r3, #8]
 8003132:	ed93 2b04 	vldr	d2, [r3, #16]
 8003136:	ed9f 7b50 	vldr	d7, [pc, #320]	@ 8003278 <main+0xb48>
 800313a:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8003280 <main+0xb50>
 800313e:	f002 fb15 	bl	800576c <atTargetEG>
 8003142:	4603      	mov	r3, r0
 8003144:	f887 37cd 	strb.w	r3, [r7, #1997]	@ 0x7cd
	  bool blue_retry_storage_check = atTargetEG(blue_retry_storage, position, 400, 5);
 8003148:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 800314c:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8003150:	ed93 3b00 	vldr	d3, [r3]
 8003154:	ed93 4b02 	vldr	d4, [r3, #8]
 8003158:	ed93 5b04 	vldr	d5, [r3, #16]
 800315c:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003160:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8003164:	ed93 0b00 	vldr	d0, [r3]
 8003168:	ed93 1b02 	vldr	d1, [r3, #8]
 800316c:	ed93 2b04 	vldr	d2, [r3, #16]
 8003170:	ed9f 7b41 	vldr	d7, [pc, #260]	@ 8003278 <main+0xb48>
 8003174:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 8003280 <main+0xb50>
 8003178:	f002 faf8 	bl	800576c <atTargetEG>
 800317c:	4603      	mov	r3, r0
 800317e:	f887 37cc 	strb.w	r3, [r7, #1996]	@ 0x7cc
	  bool blue_retry_silo_check = atTargetEG(blue_retry_silo, position, 400, 5);
 8003182:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003186:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 800318a:	ed93 3b00 	vldr	d3, [r3]
 800318e:	ed93 4b02 	vldr	d4, [r3, #8]
 8003192:	ed93 5b04 	vldr	d5, [r3, #16]
 8003196:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 800319a:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 800319e:	ed93 0b00 	vldr	d0, [r3]
 80031a2:	ed93 1b02 	vldr	d1, [r3, #8]
 80031a6:	ed93 2b04 	vldr	d2, [r3, #16]
 80031aa:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8003278 <main+0xb48>
 80031ae:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8003280 <main+0xb50>
 80031b2:	f002 fadb 	bl	800576c <atTargetEG>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f887 37cb 	strb.w	r3, [r7, #1995]	@ 0x7cb

	  bool tes_storage_check = atTargetEG(tes_storage, position, 400, 5);
 80031bc:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80031c0:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 80031c4:	ed93 3b00 	vldr	d3, [r3]
 80031c8:	ed93 4b02 	vldr	d4, [r3, #8]
 80031cc:	ed93 5b04 	vldr	d5, [r3, #16]
 80031d0:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80031d4:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80031d8:	ed93 0b00 	vldr	d0, [r3]
 80031dc:	ed93 1b02 	vldr	d1, [r3, #8]
 80031e0:	ed93 2b04 	vldr	d2, [r3, #16]
 80031e4:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 8003278 <main+0xb48>
 80031e8:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8003280 <main+0xb50>
 80031ec:	f002 fabe 	bl	800576c <atTargetEG>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f887 37ca 	strb.w	r3, [r7, #1994]	@ 0x7ca
	  bool tes_silo_check = atTargetEG(tes_silo, position, 400, 5);
 80031f6:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80031fa:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 80031fe:	ed93 3b00 	vldr	d3, [r3]
 8003202:	ed93 4b02 	vldr	d4, [r3, #8]
 8003206:	ed93 5b04 	vldr	d5, [r3, #16]
 800320a:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 800320e:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8003212:	ed93 0b00 	vldr	d0, [r3]
 8003216:	ed93 1b02 	vldr	d1, [r3, #8]
 800321a:	ed93 2b04 	vldr	d2, [r3, #16]
 800321e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8003278 <main+0xb48>
 8003222:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8003280 <main+0xb50>
 8003226:	f002 faa1 	bl	800576c <atTargetEG>
 800322a:	4603      	mov	r3, r0
 800322c:	f887 37c9 	strb.w	r3, [r7, #1993]	@ 0x7c9
	  bool kiri_check = atTargetEG(kiri, position, 300, 2);
 8003230:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003234:	f5a3 63fe 	sub.w	r3, r3, #2032	@ 0x7f0
 8003238:	ed93 3b00 	vldr	d3, [r3]
 800323c:	ed93 4b02 	vldr	d4, [r3, #8]
 8003240:	ed93 5b04 	vldr	d5, [r3, #16]
 8003244:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003248:	f5a3 63fb 	sub.w	r3, r3, #2008	@ 0x7d8
 800324c:	ed93 0b00 	vldr	d0, [r3]
 8003250:	ed93 1b02 	vldr	d1, [r3, #8]
 8003254:	ed93 2b04 	vldr	d2, [r3, #16]
 8003258:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8003288 <main+0xb58>
 800325c:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8003298 <main+0xb68>
 8003260:	f002 fa84 	bl	800576c <atTargetEG>
 8003264:	4603      	mov	r3, r0
 8003266:	f887 37c8 	strb.w	r3, [r7, #1992]	@ 0x7c8

	  switch(mode)
 800326a:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <main+0xb70>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	3b01      	subs	r3, #1
 8003270:	e018      	b.n	80032a4 <main+0xb74>
 8003272:	bf00      	nop
 8003274:	f3af 8000 	nop.w
 8003278:	00000000 	.word	0x00000000
 800327c:	40140000 	.word	0x40140000
 8003280:	00000000 	.word	0x00000000
 8003284:	40790000 	.word	0x40790000
 8003288:	00000000 	.word	0x00000000
 800328c:	40000000 	.word	0x40000000
 8003290:	00000000 	.word	0x00000000
 8003294:	40690000 	.word	0x40690000
 8003298:	00000000 	.word	0x00000000
 800329c:	4072c000 	.word	0x4072c000
 80032a0:	20000610 	.word	0x20000610
 80032a4:	2b1e      	cmp	r3, #30
 80032a6:	f201 8045 	bhi.w	8004334 <main+0x1c04>
 80032aa:	a201      	add	r2, pc, #4	@ (adr r2, 80032b0 <main+0xb80>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	0800332d 	.word	0x0800332d
 80032b4:	0800336b 	.word	0x0800336b
 80032b8:	080033a9 	.word	0x080033a9
 80032bc:	0800342d 	.word	0x0800342d
 80032c0:	080034c1 	.word	0x080034c1
 80032c4:	0800352d 	.word	0x0800352d
 80032c8:	080035d3 	.word	0x080035d3
 80032cc:	08003691 	.word	0x08003691
 80032d0:	08003711 	.word	0x08003711
 80032d4:	080037a5 	.word	0x080037a5
 80032d8:	0800380d 	.word	0x0800380d
 80032dc:	080038af 	.word	0x080038af
 80032e0:	080038ed 	.word	0x080038ed
 80032e4:	080039d5 	.word	0x080039d5
 80032e8:	08003a37 	.word	0x08003a37
 80032ec:	08003a99 	.word	0x08003a99
 80032f0:	08003afb 	.word	0x08003afb
 80032f4:	08003b5d 	.word	0x08003b5d
 80032f8:	08003bdb 	.word	0x08003bdb
 80032fc:	08003c6d 	.word	0x08003c6d
 8003300:	08003d69 	.word	0x08003d69
 8003304:	08003e09 	.word	0x08003e09
 8003308:	08003e45 	.word	0x08003e45
 800330c:	08003ec3 	.word	0x08003ec3
 8003310:	08003f53 	.word	0x08003f53
 8003314:	08003fb9 	.word	0x08003fb9
 8003318:	080040c1 	.word	0x080040c1
 800331c:	0800413f 	.word	0x0800413f
 8003320:	080041cf 	.word	0x080041cf
 8003324:	08004235 	.word	0x08004235
 8003328:	080042d5 	.word	0x080042d5
	  {
	  case RED_STEP:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800332c:	2201      	movs	r2, #1
 800332e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003332:	48d3      	ldr	r0, [pc, #844]	@ (8003680 <main+0xf50>)
 8003334:	f004 ff32 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003338:	2200      	movs	r2, #0
 800333a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800333e:	48d0      	ldr	r0, [pc, #832]	@ (8003680 <main+0xf50>)
 8003340:	f004 ff2c 	bl	800819c <HAL_GPIO_WritePin>

		  PID_moveToCoordinate(red_step, red_step_parameters, red_step_numPoints);
 8003344:	f8b7 27ee 	ldrh.w	r2, [r7, #2030]	@ 0x7ee
 8003348:	f507 7140 	add.w	r1, r7, #768	@ 0x300
 800334c:	f507 63f0 	add.w	r3, r7, #1920	@ 0x780
 8003350:	4618      	mov	r0, r3
 8003352:	f002 fddd 	bl	8005f10 <PID_moveToCoordinate>
		  if(red_step_check)
 8003356:	f897 37db 	ldrb.w	r3, [r7, #2011]	@ 0x7db
 800335a:	2b00      	cmp	r3, #0
 800335c:	f001 800e 	beq.w	800437c <main+0x1c4c>
		  {
			  mode = RED_STORAGE;
 8003360:	4bc8      	ldr	r3, [pc, #800]	@ (8003684 <main+0xf54>)
 8003362:	2203      	movs	r2, #3
 8003364:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003366:	f001 b809 	b.w	800437c <main+0x1c4c>

	  case RED_STEP2:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800336a:	2200      	movs	r2, #0
 800336c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003370:	48c3      	ldr	r0, [pc, #780]	@ (8003680 <main+0xf50>)
 8003372:	f004 ff13 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8003376:	2201      	movs	r2, #1
 8003378:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800337c:	48c0      	ldr	r0, [pc, #768]	@ (8003680 <main+0xf50>)
 800337e:	f004 ff0d 	bl	800819c <HAL_GPIO_WritePin>

		  PID_moveToCoordinate(red_step2, red_step_parameters, red_step_numPoints);
 8003382:	f8b7 27ee 	ldrh.w	r2, [r7, #2030]	@ 0x7ee
 8003386:	f507 7140 	add.w	r1, r7, #768	@ 0x300
 800338a:	f507 63e7 	add.w	r3, r7, #1848	@ 0x738
 800338e:	4618      	mov	r0, r3
 8003390:	f002 fdbe 	bl	8005f10 <PID_moveToCoordinate>
		  if(red_step2_check)
 8003394:	f897 37da 	ldrb.w	r3, [r7, #2010]	@ 0x7da
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 87f1 	beq.w	8004380 <main+0x1c50>
		  {
			  mode = RED_STORAGE;
 800339e:	4bb9      	ldr	r3, [pc, #740]	@ (8003684 <main+0xf54>)
 80033a0:	2203      	movs	r2, #3
 80033a2:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80033a4:	f000 bfec 	b.w	8004380 <main+0x1c50>

	  case RED_STORAGE:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80033a8:	2200      	movs	r2, #0
 80033aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80033ae:	48b4      	ldr	r0, [pc, #720]	@ (8003680 <main+0xf50>)
 80033b0:	f004 fef4 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80033b4:	2201      	movs	r2, #1
 80033b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033ba:	48b1      	ldr	r0, [pc, #708]	@ (8003680 <main+0xf50>)
 80033bc:	f004 feee 	bl	800819c <HAL_GPIO_WritePin>

		  setMotorSpeed(1, 0);
 80033c0:	ed9f 0b93 	vldr	d0, [pc, #588]	@ 8003610 <main+0xee0>
 80033c4:	2001      	movs	r0, #1
 80033c6:	f7fd fe49 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 80033ca:	ed9f 0b91 	vldr	d0, [pc, #580]	@ 8003610 <main+0xee0>
 80033ce:	2002      	movs	r0, #2
 80033d0:	f7fd fe44 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 80033d4:	ed9f 0b8e 	vldr	d0, [pc, #568]	@ 8003610 <main+0xee0>
 80033d8:	2007      	movs	r0, #7
 80033da:	f7fd fe3f 	bl	800105c <setMotorSpeed>
		  PID_left(red_storage, 2.0, 0.0, 0.0, 1.8, 0.9, 4500);
 80033de:	f507 63e4 	add.w	r3, r7, #1824	@ 0x720
 80033e2:	ed93 0b00 	vldr	d0, [r3]
 80033e6:	f507 63e5 	add.w	r3, r7, #1832	@ 0x728
 80033ea:	ed93 1b00 	vldr	d1, [r3]
 80033ee:	f507 63e6 	add.w	r3, r7, #1840	@ 0x730
 80033f2:	ed93 2b00 	vldr	d2, [r3]
 80033f6:	a388      	add	r3, pc, #544	@ (adr r3, 8003618 <main+0xee8>)
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	e9cd 2300 	strd	r2, r3, [sp]
 8003400:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8003620 <main+0xef0>
 8003404:	ed9f 6b88 	vldr	d6, [pc, #544]	@ 8003628 <main+0xef8>
 8003408:	ed9f 5b81 	vldr	d5, [pc, #516]	@ 8003610 <main+0xee0>
 800340c:	ed9f 4b80 	vldr	d4, [pc, #512]	@ 8003610 <main+0xee0>
 8003410:	ed9f 3b87 	vldr	d3, [pc, #540]	@ 8003630 <main+0xf00>
 8003414:	f002 fa74 	bl	8005900 <PID_left>
		  if(red_storage_check)
 8003418:	f897 37d9 	ldrb.w	r3, [r7, #2009]	@ 0x7d9
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 87b1 	beq.w	8004384 <main+0x1c54>
		  {
			  mode = RED_FIND_BALL;
 8003422:	4b98      	ldr	r3, [pc, #608]	@ (8003684 <main+0xf54>)
 8003424:	2204      	movs	r2, #4
 8003426:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003428:	f000 bfac 	b.w	8004384 <main+0x1c54>

	  case RED_FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800342c:	2201      	movs	r2, #1
 800342e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003432:	4893      	ldr	r0, [pc, #588]	@ (8003680 <main+0xf50>)
 8003434:	f004 feb2 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003438:	2200      	movs	r2, #0
 800343a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800343e:	4890      	ldr	r0, [pc, #576]	@ (8003680 <main+0xf50>)
 8003440:	f004 feac 	bl	800819c <HAL_GPIO_WritePin>

		  findAndTakeBall(redBall);
 8003444:	f507 63d5 	add.w	r3, r7, #1704	@ 0x6a8
 8003448:	4618      	mov	r0, r3
 800344a:	f003 fbbd 	bl	8006bc8 <findAndTakeBall>
//		  if(sensorMEGA[3] == 0)
//		  {
//			  mode = RED_FACING_SILO;
//		  }
		  if(sensorMEGA[3] == 0 && camera[2] == 1)
 800344e:	4b8e      	ldr	r3, [pc, #568]	@ (8003688 <main+0xf58>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d108      	bne.n	8003468 <main+0xd38>
 8003456:	4b8d      	ldr	r3, [pc, #564]	@ (800368c <main+0xf5c>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d104      	bne.n	8003468 <main+0xd38>
		  {
			  mode = RED_FACING_SILO;
 800345e:	4b89      	ldr	r3, [pc, #548]	@ (8003684 <main+0xf54>)
 8003460:	2205      	movs	r2, #5
 8003462:	701a      	strb	r2, [r3, #0]
		  }
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
		  {
			  throwTheBall(red_throwBall, 1.5, 0.0, 0.0, 1.5);
		  }
		  break;
 8003464:	f000 bf90 	b.w	8004388 <main+0x1c58>
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
 8003468:	4b87      	ldr	r3, [pc, #540]	@ (8003688 <main+0xf58>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f040 878b 	bne.w	8004388 <main+0x1c58>
 8003472:	4b86      	ldr	r3, [pc, #536]	@ (800368c <main+0xf5c>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f040 8786 	bne.w	8004388 <main+0x1c58>
			  throwTheBall(red_throwBall, 1.5, 0.0, 0.0, 1.5);
 800347c:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003480:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003484:	ed93 1b00 	vldr	d1, [r3]
 8003488:	ed93 2b02 	vldr	d2, [r3, #8]
 800348c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003490:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8003638 <main+0xf08>
 8003494:	ed9f 5b5e 	vldr	d5, [pc, #376]	@ 8003610 <main+0xee0>
 8003498:	ed9f 4b5d 	vldr	d4, [pc, #372]	@ 8003610 <main+0xee0>
 800349c:	ed9f 3b66 	vldr	d3, [pc, #408]	@ 8003638 <main+0xf08>
 80034a0:	eeb0 0a41 	vmov.f32	s0, s2
 80034a4:	eef0 0a61 	vmov.f32	s1, s3
 80034a8:	eeb0 1a42 	vmov.f32	s2, s4
 80034ac:	eef0 1a62 	vmov.f32	s3, s5
 80034b0:	eeb0 2a47 	vmov.f32	s4, s14
 80034b4:	eef0 2a67 	vmov.f32	s5, s15
 80034b8:	f003 fe16 	bl	80070e8 <throwTheBall>
		  break;
 80034bc:	f000 bf64 	b.w	8004388 <main+0x1c58>

	  case RED_FACING_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80034c0:	2200      	movs	r2, #0
 80034c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80034c6:	486e      	ldr	r0, [pc, #440]	@ (8003680 <main+0xf50>)
 80034c8:	f004 fe68 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80034cc:	2201      	movs	r2, #1
 80034ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034d2:	486b      	ldr	r0, [pc, #428]	@ (8003680 <main+0xf50>)
 80034d4:	f004 fe62 	bl	800819c <HAL_GPIO_WritePin>

		  servo_write(120);
 80034d8:	2078      	movs	r0, #120	@ 0x78
 80034da:	f002 f9f9 	bl	80058d0 <servo_write>
		  PID_EG(red_silo, 1.9, 0.0, 0.0, 1.5, 0.8, 3700);
 80034de:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 80034e2:	ed93 0b00 	vldr	d0, [r3]
 80034e6:	f507 63e2 	add.w	r3, r7, #1808	@ 0x710
 80034ea:	ed93 1b00 	vldr	d1, [r3]
 80034ee:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 80034f2:	ed93 2b00 	vldr	d2, [r3]
 80034f6:	a352      	add	r3, pc, #328	@ (adr r3, 8003640 <main+0xf10>)
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	e9cd 2300 	strd	r2, r3, [sp]
 8003500:	ed9f 7b51 	vldr	d7, [pc, #324]	@ 8003648 <main+0xf18>
 8003504:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8003638 <main+0xf08>
 8003508:	ed9f 5b41 	vldr	d5, [pc, #260]	@ 8003610 <main+0xee0>
 800350c:	ed9f 4b40 	vldr	d4, [pc, #256]	@ 8003610 <main+0xee0>
 8003510:	ed9f 3b4f 	vldr	d3, [pc, #316]	@ 8003650 <main+0xf20>
 8003514:	f002 fb78 	bl	8005c08 <PID_EG>
		  if(red_silo_check)
 8003518:	f897 37d8 	ldrb.w	r3, [r7, #2008]	@ 0x7d8
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8735 	beq.w	800438c <main+0x1c5c>
		  {
			  mode = RED_FIND_SILO;
 8003522:	4b58      	ldr	r3, [pc, #352]	@ (8003684 <main+0xf54>)
 8003524:	2206      	movs	r2, #6
 8003526:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003528:	f000 bf30 	b.w	800438c <main+0x1c5c>

	  case RED_FIND_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800352c:	2201      	movs	r2, #1
 800352e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003532:	4853      	ldr	r0, [pc, #332]	@ (8003680 <main+0xf50>)
 8003534:	f004 fe32 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003538:	2200      	movs	r2, #0
 800353a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800353e:	4850      	ldr	r0, [pc, #320]	@ (8003680 <main+0xf50>)
 8003540:	f004 fe2c 	bl	800819c <HAL_GPIO_WritePin>

		  placeBallInSilo(red_silo, 1.6, 0.0, 0.0, 1.5, 0.7, 2700);
 8003544:	f507 63e1 	add.w	r3, r7, #1800	@ 0x708
 8003548:	ed93 0b00 	vldr	d0, [r3]
 800354c:	f507 63e2 	add.w	r3, r7, #1808	@ 0x710
 8003550:	ed93 1b00 	vldr	d1, [r3]
 8003554:	f507 63e3 	add.w	r3, r7, #1816	@ 0x718
 8003558:	ed93 2b00 	vldr	d2, [r3]
 800355c:	a33e      	add	r3, pc, #248	@ (adr r3, 8003658 <main+0xf28>)
 800355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003562:	e9cd 2300 	strd	r2, r3, [sp]
 8003566:	ed9f 7b3e 	vldr	d7, [pc, #248]	@ 8003660 <main+0xf30>
 800356a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 8003638 <main+0xf08>
 800356e:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8003610 <main+0xee0>
 8003572:	ed9f 4b27 	vldr	d4, [pc, #156]	@ 8003610 <main+0xee0>
 8003576:	ed9f 3b3c 	vldr	d3, [pc, #240]	@ 8003668 <main+0xf38>
 800357a:	f003 f9c1 	bl	8006900 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 800357e:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	@ 0x7e0
 8003582:	2b00      	cmp	r3, #0
 8003584:	dd03      	ble.n	800358e <main+0xe5e>
 8003586:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	@ 0x7e0
 800358a:	2b0a      	cmp	r3, #10
 800358c:	dd09      	ble.n	80035a2 <main+0xe72>
 800358e:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 8003592:	2b00      	cmp	r3, #0
 8003594:	f340 86fc 	ble.w	8004390 <main+0x1c60>
 8003598:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 800359c:	2b0a      	cmp	r3, #10
 800359e:	f300 86f7 	bgt.w	8004390 <main+0x1c60>
		  {
			  setMotorSpeed(1, -2000);
 80035a2:	ed9f 0b33 	vldr	d0, [pc, #204]	@ 8003670 <main+0xf40>
 80035a6:	2001      	movs	r0, #1
 80035a8:	f7fd fd58 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2000);
 80035ac:	ed9f 0b30 	vldr	d0, [pc, #192]	@ 8003670 <main+0xf40>
 80035b0:	2002      	movs	r0, #2
 80035b2:	f7fd fd53 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -2800);
 80035b6:	ed9f 0b30 	vldr	d0, [pc, #192]	@ 8003678 <main+0xf48>
 80035ba:	2007      	movs	r0, #7
 80035bc:	f7fd fd4e 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 80035c0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80035c4:	f004 fa6e 	bl	8007aa4 <HAL_Delay>
			  mode = RED_STORAGE;
 80035c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003684 <main+0xf54>)
 80035ca:	2203      	movs	r2, #3
 80035cc:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80035ce:	f000 bedf 	b.w	8004390 <main+0x1c60>

	  case RED_RETRY:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80035d2:	2201      	movs	r2, #1
 80035d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80035d8:	4829      	ldr	r0, [pc, #164]	@ (8003680 <main+0xf50>)
 80035da:	f004 fddf 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80035de:	2200      	movs	r2, #0
 80035e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035e4:	4826      	ldr	r0, [pc, #152]	@ (8003680 <main+0xf50>)
 80035e6:	f004 fdd9 	bl	800819c <HAL_GPIO_WritePin>

		  PID_moveToCoordinate(red_retry, red_retry_parameters, red_retry_numPoints);
 80035ea:	f8b7 27ea 	ldrh.w	r2, [r7, #2026]	@ 0x7ea
 80035ee:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 80035f2:	f507 63cc 	add.w	r3, r7, #1632	@ 0x660
 80035f6:	4618      	mov	r0, r3
 80035f8:	f002 fc8a 	bl	8005f10 <PID_moveToCoordinate>
		  if(red_retry_check)
 80035fc:	f897 37d7 	ldrb.w	r3, [r7, #2007]	@ 0x7d7
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 86c7 	beq.w	8004394 <main+0x1c64>
		  {
			  mode = RED_RETRY_STORAGE;
 8003606:	4b1f      	ldr	r3, [pc, #124]	@ (8003684 <main+0xf54>)
 8003608:	2208      	movs	r2, #8
 800360a:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800360c:	f000 bec2 	b.w	8004394 <main+0x1c64>
	...
 800361c:	40b19400 	.word	0x40b19400
 8003620:	cccccccd 	.word	0xcccccccd
 8003624:	3feccccc 	.word	0x3feccccc
 8003628:	cccccccd 	.word	0xcccccccd
 800362c:	3ffccccc 	.word	0x3ffccccc
 8003630:	00000000 	.word	0x00000000
 8003634:	40000000 	.word	0x40000000
 8003638:	00000000 	.word	0x00000000
 800363c:	3ff80000 	.word	0x3ff80000
 8003640:	00000000 	.word	0x00000000
 8003644:	40ace800 	.word	0x40ace800
 8003648:	9999999a 	.word	0x9999999a
 800364c:	3fe99999 	.word	0x3fe99999
 8003650:	66666666 	.word	0x66666666
 8003654:	3ffe6666 	.word	0x3ffe6666
 8003658:	00000000 	.word	0x00000000
 800365c:	40a51800 	.word	0x40a51800
 8003660:	66666666 	.word	0x66666666
 8003664:	3fe66666 	.word	0x3fe66666
 8003668:	9999999a 	.word	0x9999999a
 800366c:	3ff99999 	.word	0x3ff99999
 8003670:	00000000 	.word	0x00000000
 8003674:	c09f4000 	.word	0xc09f4000
 8003678:	00000000 	.word	0x00000000
 800367c:	c0a5e000 	.word	0xc0a5e000
 8003680:	40020c00 	.word	0x40020c00
 8003684:	20000610 	.word	0x20000610
 8003688:	20000600 	.word	0x20000600
 800368c:	2000057c 	.word	0x2000057c

	  case RED_RETRY_STORAGE:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003690:	2200      	movs	r2, #0
 8003692:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003696:	48ca      	ldr	r0, [pc, #808]	@ (80039c0 <main+0x1290>)
 8003698:	f004 fd80 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800369c:	2201      	movs	r2, #1
 800369e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036a2:	48c7      	ldr	r0, [pc, #796]	@ (80039c0 <main+0x1290>)
 80036a4:	f004 fd7a 	bl	800819c <HAL_GPIO_WritePin>

		  setMotorSpeed(1, 0);
 80036a8:	ed9f 0ba9 	vldr	d0, [pc, #676]	@ 8003950 <main+0x1220>
 80036ac:	2001      	movs	r0, #1
 80036ae:	f7fd fcd5 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 80036b2:	ed9f 0ba7 	vldr	d0, [pc, #668]	@ 8003950 <main+0x1220>
 80036b6:	2002      	movs	r0, #2
 80036b8:	f7fd fcd0 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 80036bc:	ed9f 0ba4 	vldr	d0, [pc, #656]	@ 8003950 <main+0x1220>
 80036c0:	2007      	movs	r0, #7
 80036c2:	f7fd fccb 	bl	800105c <setMotorSpeed>
		  PID_left(red_retry_storage, 2.0, 0.0, 0.0, 1.5, 0.8, 4200);
 80036c6:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80036ca:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80036ce:	ed93 0b00 	vldr	d0, [r3]
 80036d2:	ed93 1b02 	vldr	d1, [r3, #8]
 80036d6:	ed93 2b04 	vldr	d2, [r3, #16]
 80036da:	a39f      	add	r3, pc, #636	@ (adr r3, 8003958 <main+0x1228>)
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	e9cd 2300 	strd	r2, r3, [sp]
 80036e4:	ed9f 7b9e 	vldr	d7, [pc, #632]	@ 8003960 <main+0x1230>
 80036e8:	ed9f 6b9f 	vldr	d6, [pc, #636]	@ 8003968 <main+0x1238>
 80036ec:	ed9f 5b98 	vldr	d5, [pc, #608]	@ 8003950 <main+0x1220>
 80036f0:	ed9f 4b97 	vldr	d4, [pc, #604]	@ 8003950 <main+0x1220>
 80036f4:	ed9f 3b9e 	vldr	d3, [pc, #632]	@ 8003970 <main+0x1240>
 80036f8:	f002 f902 	bl	8005900 <PID_left>
		  if(red_retry_storage_check)
 80036fc:	f897 37d6 	ldrb.w	r3, [r7, #2006]	@ 0x7d6
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8649 	beq.w	8004398 <main+0x1c68>
		  {
			  mode = RED_RETRY_FIND_BALL;
 8003706:	4baf      	ldr	r3, [pc, #700]	@ (80039c4 <main+0x1294>)
 8003708:	2209      	movs	r2, #9
 800370a:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800370c:	f000 be44 	b.w	8004398 <main+0x1c68>

	  case RED_RETRY_FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003710:	2201      	movs	r2, #1
 8003712:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003716:	48aa      	ldr	r0, [pc, #680]	@ (80039c0 <main+0x1290>)
 8003718:	f004 fd40 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800371c:	2200      	movs	r2, #0
 800371e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003722:	48a7      	ldr	r0, [pc, #668]	@ (80039c0 <main+0x1290>)
 8003724:	f004 fd3a 	bl	800819c <HAL_GPIO_WritePin>

		  findAndTakeBall(redRetryBall);
 8003728:	f507 63ba 	add.w	r3, r7, #1488	@ 0x5d0
 800372c:	4618      	mov	r0, r3
 800372e:	f003 fa4b 	bl	8006bc8 <findAndTakeBall>
//		  if(sensorMEGA[3] == 0)
//		  {
//			  mode = RED_RETRY_FACING_SILO;
//		  }
		  if(sensorMEGA[3] == 0 && camera[2] == 1)
 8003732:	4ba5      	ldr	r3, [pc, #660]	@ (80039c8 <main+0x1298>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d108      	bne.n	800374c <main+0x101c>
 800373a:	4ba4      	ldr	r3, [pc, #656]	@ (80039cc <main+0x129c>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d104      	bne.n	800374c <main+0x101c>
		  {
			  mode = RED_RETRY_FACING_SILO;
 8003742:	4ba0      	ldr	r3, [pc, #640]	@ (80039c4 <main+0x1294>)
 8003744:	220a      	movs	r2, #10
 8003746:	701a      	strb	r2, [r3, #0]
		  }
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
		  {
			  throwTheBall(red_retry_throwBall, 1.5, 0.0, 0.0, 1.5);
		  }
		  break;
 8003748:	f000 be28 	b.w	800439c <main+0x1c6c>
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
 800374c:	4b9e      	ldr	r3, [pc, #632]	@ (80039c8 <main+0x1298>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f040 8623 	bne.w	800439c <main+0x1c6c>
 8003756:	4b9d      	ldr	r3, [pc, #628]	@ (80039cc <main+0x129c>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f040 861e 	bne.w	800439c <main+0x1c6c>
			  throwTheBall(red_retry_throwBall, 1.5, 0.0, 0.0, 1.5);
 8003760:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003764:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003768:	ed93 1b00 	vldr	d1, [r3]
 800376c:	ed93 2b02 	vldr	d2, [r3, #8]
 8003770:	ed93 7b04 	vldr	d7, [r3, #16]
 8003774:	ed9f 6b7c 	vldr	d6, [pc, #496]	@ 8003968 <main+0x1238>
 8003778:	ed9f 5b75 	vldr	d5, [pc, #468]	@ 8003950 <main+0x1220>
 800377c:	ed9f 4b74 	vldr	d4, [pc, #464]	@ 8003950 <main+0x1220>
 8003780:	ed9f 3b79 	vldr	d3, [pc, #484]	@ 8003968 <main+0x1238>
 8003784:	eeb0 0a41 	vmov.f32	s0, s2
 8003788:	eef0 0a61 	vmov.f32	s1, s3
 800378c:	eeb0 1a42 	vmov.f32	s2, s4
 8003790:	eef0 1a62 	vmov.f32	s3, s5
 8003794:	eeb0 2a47 	vmov.f32	s4, s14
 8003798:	eef0 2a67 	vmov.f32	s5, s15
 800379c:	f003 fca4 	bl	80070e8 <throwTheBall>
		  break;
 80037a0:	f000 bdfc 	b.w	800439c <main+0x1c6c>

	  case RED_RETRY_FACING_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80037a4:	2200      	movs	r2, #0
 80037a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037aa:	4885      	ldr	r0, [pc, #532]	@ (80039c0 <main+0x1290>)
 80037ac:	f004 fcf6 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80037b0:	2201      	movs	r2, #1
 80037b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037b6:	4882      	ldr	r0, [pc, #520]	@ (80039c0 <main+0x1290>)
 80037b8:	f004 fcf0 	bl	800819c <HAL_GPIO_WritePin>

		  servo_write(120);
 80037bc:	2078      	movs	r0, #120	@ 0x78
 80037be:	f002 f887 	bl	80058d0 <servo_write>
		  PID_EG(red_retry_silo, 1.8, 0.0, 0.0, 1.5, 0.8, 3700);
 80037c2:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80037c6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80037ca:	ed93 0b00 	vldr	d0, [r3]
 80037ce:	ed93 1b02 	vldr	d1, [r3, #8]
 80037d2:	ed93 2b04 	vldr	d2, [r3, #16]
 80037d6:	a368      	add	r3, pc, #416	@ (adr r3, 8003978 <main+0x1248>)
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	e9cd 2300 	strd	r2, r3, [sp]
 80037e0:	ed9f 7b5f 	vldr	d7, [pc, #380]	@ 8003960 <main+0x1230>
 80037e4:	ed9f 6b60 	vldr	d6, [pc, #384]	@ 8003968 <main+0x1238>
 80037e8:	ed9f 5b59 	vldr	d5, [pc, #356]	@ 8003950 <main+0x1220>
 80037ec:	ed9f 4b58 	vldr	d4, [pc, #352]	@ 8003950 <main+0x1220>
 80037f0:	ed9f 3b63 	vldr	d3, [pc, #396]	@ 8003980 <main+0x1250>
 80037f4:	f002 fa08 	bl	8005c08 <PID_EG>
		  if(red_retry_silo_check)
 80037f8:	f897 37d5 	ldrb.w	r3, [r7, #2005]	@ 0x7d5
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 85cf 	beq.w	80043a0 <main+0x1c70>
		  {
			  mode = RED_RETRY_FIND_SILO;
 8003802:	4b70      	ldr	r3, [pc, #448]	@ (80039c4 <main+0x1294>)
 8003804:	220b      	movs	r2, #11
 8003806:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003808:	f000 bdca 	b.w	80043a0 <main+0x1c70>

	  case RED_RETRY_FIND_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800380c:	2201      	movs	r2, #1
 800380e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003812:	486b      	ldr	r0, [pc, #428]	@ (80039c0 <main+0x1290>)
 8003814:	f004 fcc2 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003818:	2200      	movs	r2, #0
 800381a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800381e:	4868      	ldr	r0, [pc, #416]	@ (80039c0 <main+0x1290>)
 8003820:	f004 fcbc 	bl	800819c <HAL_GPIO_WritePin>

		  placeBallInSilo(red_retry_silo, 1.6, 0.0, 0.0, 1.5, 0.7, 2700);
 8003824:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003828:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800382c:	ed93 0b00 	vldr	d0, [r3]
 8003830:	ed93 1b02 	vldr	d1, [r3, #8]
 8003834:	ed93 2b04 	vldr	d2, [r3, #16]
 8003838:	a353      	add	r3, pc, #332	@ (adr r3, 8003988 <main+0x1258>)
 800383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383e:	e9cd 2300 	strd	r2, r3, [sp]
 8003842:	ed9f 7b53 	vldr	d7, [pc, #332]	@ 8003990 <main+0x1260>
 8003846:	ed9f 6b48 	vldr	d6, [pc, #288]	@ 8003968 <main+0x1238>
 800384a:	ed9f 5b41 	vldr	d5, [pc, #260]	@ 8003950 <main+0x1220>
 800384e:	ed9f 4b40 	vldr	d4, [pc, #256]	@ 8003950 <main+0x1220>
 8003852:	ed9f 3b51 	vldr	d3, [pc, #324]	@ 8003998 <main+0x1268>
 8003856:	f003 f853 	bl	8006900 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 800385a:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	@ 0x7e0
 800385e:	2b00      	cmp	r3, #0
 8003860:	dd03      	ble.n	800386a <main+0x113a>
 8003862:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	@ 0x7e0
 8003866:	2b0a      	cmp	r3, #10
 8003868:	dd09      	ble.n	800387e <main+0x114e>
 800386a:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 800386e:	2b00      	cmp	r3, #0
 8003870:	f340 8598 	ble.w	80043a4 <main+0x1c74>
 8003874:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 8003878:	2b0a      	cmp	r3, #10
 800387a:	f300 8593 	bgt.w	80043a4 <main+0x1c74>
		  {
			  setMotorSpeed(1, -2000);
 800387e:	ed9f 0b48 	vldr	d0, [pc, #288]	@ 80039a0 <main+0x1270>
 8003882:	2001      	movs	r0, #1
 8003884:	f7fd fbea 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2000);
 8003888:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 80039a0 <main+0x1270>
 800388c:	2002      	movs	r0, #2
 800388e:	f7fd fbe5 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -2800);
 8003892:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 80039a8 <main+0x1278>
 8003896:	2007      	movs	r0, #7
 8003898:	f7fd fbe0 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 800389c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80038a0:	f004 f900 	bl	8007aa4 <HAL_Delay>
			  mode = RED_RETRY_STORAGE;
 80038a4:	4b47      	ldr	r3, [pc, #284]	@ (80039c4 <main+0x1294>)
 80038a6:	2208      	movs	r2, #8
 80038a8:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80038aa:	f000 bd7b 	b.w	80043a4 <main+0x1c74>

	  case BLUE_STEP:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80038ae:	2201      	movs	r2, #1
 80038b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80038b4:	4842      	ldr	r0, [pc, #264]	@ (80039c0 <main+0x1290>)
 80038b6:	f004 fc71 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80038ba:	2200      	movs	r2, #0
 80038bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038c0:	483f      	ldr	r0, [pc, #252]	@ (80039c0 <main+0x1290>)
 80038c2:	f004 fc6b 	bl	800819c <HAL_GPIO_WritePin>

		  PID_moveToCoordinate(blue_step, blue_step_parameters, blue_step_numPoints);
 80038c6:	f8b7 27e8 	ldrh.w	r2, [r7, #2024]	@ 0x7e8
 80038ca:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80038ce:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 80038d2:	4618      	mov	r0, r3
 80038d4:	f002 fb1c 	bl	8005f10 <PID_moveToCoordinate>
		  if(blue_step_check)
 80038d8:	f897 37d4 	ldrb.w	r3, [r7, #2004]	@ 0x7d4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8563 	beq.w	80043a8 <main+0x1c78>
		  {
			  mode = BLUE_STORAGE;
 80038e2:	4b38      	ldr	r3, [pc, #224]	@ (80039c4 <main+0x1294>)
 80038e4:	2212      	movs	r2, #18
 80038e6:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80038e8:	f000 bd5e 	b.w	80043a8 <main+0x1c78>

	  case BLUE_STEP1:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80038ec:	2201      	movs	r2, #1
 80038ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80038f2:	4833      	ldr	r0, [pc, #204]	@ (80039c0 <main+0x1290>)
 80038f4:	f004 fc52 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80038f8:	2200      	movs	r2, #0
 80038fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038fe:	4830      	ldr	r0, [pc, #192]	@ (80039c0 <main+0x1290>)
 8003900:	f004 fc4c 	bl	800819c <HAL_GPIO_WritePin>

		  PID_EG(blue_step1, 1.25, 0.0, 0.0, 2.5, 0.7, 4000); // blue_step1, 1.15, 0.0, 0.0, 2.5, 0.7, 3000
 8003904:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003908:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800390c:	ed93 0b00 	vldr	d0, [r3]
 8003910:	ed93 1b02 	vldr	d1, [r3, #8]
 8003914:	ed93 2b04 	vldr	d2, [r3, #16]
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	4b2c      	ldr	r3, [pc, #176]	@ (80039d0 <main+0x12a0>)
 800391e:	e9cd 2300 	strd	r2, r3, [sp]
 8003922:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8003990 <main+0x1260>
 8003926:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 80039b0 <main+0x1280>
 800392a:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8003950 <main+0x1220>
 800392e:	ed9f 4b08 	vldr	d4, [pc, #32]	@ 8003950 <main+0x1220>
 8003932:	ed9f 3b21 	vldr	d3, [pc, #132]	@ 80039b8 <main+0x1288>
 8003936:	f002 f967 	bl	8005c08 <PID_EG>
		  if(blue_step1_check)
 800393a:	f897 37d3 	ldrb.w	r3, [r7, #2003]	@ 0x7d3
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 8534 	beq.w	80043ac <main+0x1c7c>
		  {
			  mode = BLUE_STEP2;
 8003944:	4b1f      	ldr	r3, [pc, #124]	@ (80039c4 <main+0x1294>)
 8003946:	220f      	movs	r2, #15
 8003948:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800394a:	f000 bd2f 	b.w	80043ac <main+0x1c7c>
 800394e:	bf00      	nop
	...
 800395c:	40b06800 	.word	0x40b06800
 8003960:	9999999a 	.word	0x9999999a
 8003964:	3fe99999 	.word	0x3fe99999
 8003968:	00000000 	.word	0x00000000
 800396c:	3ff80000 	.word	0x3ff80000
 8003970:	00000000 	.word	0x00000000
 8003974:	40000000 	.word	0x40000000
 8003978:	00000000 	.word	0x00000000
 800397c:	40ace800 	.word	0x40ace800
 8003980:	cccccccd 	.word	0xcccccccd
 8003984:	3ffccccc 	.word	0x3ffccccc
 8003988:	00000000 	.word	0x00000000
 800398c:	40a51800 	.word	0x40a51800
 8003990:	66666666 	.word	0x66666666
 8003994:	3fe66666 	.word	0x3fe66666
 8003998:	9999999a 	.word	0x9999999a
 800399c:	3ff99999 	.word	0x3ff99999
 80039a0:	00000000 	.word	0x00000000
 80039a4:	c09f4000 	.word	0xc09f4000
 80039a8:	00000000 	.word	0x00000000
 80039ac:	c0a5e000 	.word	0xc0a5e000
 80039b0:	00000000 	.word	0x00000000
 80039b4:	40040000 	.word	0x40040000
 80039b8:	00000000 	.word	0x00000000
 80039bc:	3ff40000 	.word	0x3ff40000
 80039c0:	40020c00 	.word	0x40020c00
 80039c4:	20000610 	.word	0x20000610
 80039c8:	20000600 	.word	0x20000600
 80039cc:	2000057c 	.word	0x2000057c
 80039d0:	40af4000 	.word	0x40af4000

	  case BLUE_STEP1_2:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80039d4:	2200      	movs	r2, #0
 80039d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80039da:	48dd      	ldr	r0, [pc, #884]	@ (8003d50 <main+0x1620>)
 80039dc:	f004 fbde 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80039e0:	2201      	movs	r2, #1
 80039e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039e6:	48da      	ldr	r0, [pc, #872]	@ (8003d50 <main+0x1620>)
 80039e8:	f004 fbd8 	bl	800819c <HAL_GPIO_WritePin>

		  PID_EG(blue_step1, 1.25, 0.0, 0.0, 2.5, 0.7, 4000);
 80039ec:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80039f0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80039f4:	ed93 0b00 	vldr	d0, [r3]
 80039f8:	ed93 1b02 	vldr	d1, [r3, #8]
 80039fc:	ed93 2b04 	vldr	d2, [r3, #16]
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	4bd3      	ldr	r3, [pc, #844]	@ (8003d54 <main+0x1624>)
 8003a06:	e9cd 2300 	strd	r2, r3, [sp]
 8003a0a:	ed9f 7bb3 	vldr	d7, [pc, #716]	@ 8003cd8 <main+0x15a8>
 8003a0e:	ed9f 6bb4 	vldr	d6, [pc, #720]	@ 8003ce0 <main+0x15b0>
 8003a12:	ed9f 5bb5 	vldr	d5, [pc, #724]	@ 8003ce8 <main+0x15b8>
 8003a16:	ed9f 4bb4 	vldr	d4, [pc, #720]	@ 8003ce8 <main+0x15b8>
 8003a1a:	ed9f 3bb5 	vldr	d3, [pc, #724]	@ 8003cf0 <main+0x15c0>
 8003a1e:	f002 f8f3 	bl	8005c08 <PID_EG>
		  if(blue_step1_check)
 8003a22:	f897 37d3 	ldrb.w	r3, [r7, #2003]	@ 0x7d3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 84c2 	beq.w	80043b0 <main+0x1c80>
		  {
			  mode = BLUE_STEP2_2;
 8003a2c:	4bca      	ldr	r3, [pc, #808]	@ (8003d58 <main+0x1628>)
 8003a2e:	2210      	movs	r2, #16
 8003a30:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003a32:	f000 bcbd 	b.w	80043b0 <main+0x1c80>

	  case BLUE_STEP2:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003a36:	2201      	movs	r2, #1
 8003a38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a3c:	48c4      	ldr	r0, [pc, #784]	@ (8003d50 <main+0x1620>)
 8003a3e:	f004 fbad 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003a42:	2200      	movs	r2, #0
 8003a44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a48:	48c1      	ldr	r0, [pc, #772]	@ (8003d50 <main+0x1620>)
 8003a4a:	f004 fba7 	bl	800819c <HAL_GPIO_WritePin>

		  PID_left(blue_step2, 1.65, 0.0, 0.0, 3.0, 0.7, 3300);
 8003a4e:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003a52:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8003a56:	ed93 0b00 	vldr	d0, [r3]
 8003a5a:	ed93 1b02 	vldr	d1, [r3, #8]
 8003a5e:	ed93 2b04 	vldr	d2, [r3, #16]
 8003a62:	a3a5      	add	r3, pc, #660	@ (adr r3, 8003cf8 <main+0x15c8>)
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	e9cd 2300 	strd	r2, r3, [sp]
 8003a6c:	ed9f 7b9a 	vldr	d7, [pc, #616]	@ 8003cd8 <main+0x15a8>
 8003a70:	ed9f 6ba3 	vldr	d6, [pc, #652]	@ 8003d00 <main+0x15d0>
 8003a74:	ed9f 5b9c 	vldr	d5, [pc, #624]	@ 8003ce8 <main+0x15b8>
 8003a78:	ed9f 4b9b 	vldr	d4, [pc, #620]	@ 8003ce8 <main+0x15b8>
 8003a7c:	ed9f 3ba2 	vldr	d3, [pc, #648]	@ 8003d08 <main+0x15d8>
 8003a80:	f001 ff3e 	bl	8005900 <PID_left>
		  if(blue_step2_check)
 8003a84:	f897 37d2 	ldrb.w	r3, [r7, #2002]	@ 0x7d2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8493 	beq.w	80043b4 <main+0x1c84>
		  {
			  mode = BLUE_STEP3;
 8003a8e:	4bb2      	ldr	r3, [pc, #712]	@ (8003d58 <main+0x1628>)
 8003a90:	2211      	movs	r2, #17
 8003a92:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003a94:	f000 bc8e 	b.w	80043b4 <main+0x1c84>

	  case BLUE_STEP2_2:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a9e:	48ac      	ldr	r0, [pc, #688]	@ (8003d50 <main+0x1620>)
 8003aa0:	f004 fb7c 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003aaa:	48a9      	ldr	r0, [pc, #676]	@ (8003d50 <main+0x1620>)
 8003aac:	f004 fb76 	bl	800819c <HAL_GPIO_WritePin>

		  PID_left(blue_step2_2, 1.65, 0.0, 0.0, 3.0, 0.7, 3300);
 8003ab0:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003ab4:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8003ab8:	ed93 0b00 	vldr	d0, [r3]
 8003abc:	ed93 1b02 	vldr	d1, [r3, #8]
 8003ac0:	ed93 2b04 	vldr	d2, [r3, #16]
 8003ac4:	a38c      	add	r3, pc, #560	@ (adr r3, 8003cf8 <main+0x15c8>)
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	e9cd 2300 	strd	r2, r3, [sp]
 8003ace:	ed9f 7b82 	vldr	d7, [pc, #520]	@ 8003cd8 <main+0x15a8>
 8003ad2:	ed9f 6b8b 	vldr	d6, [pc, #556]	@ 8003d00 <main+0x15d0>
 8003ad6:	ed9f 5b84 	vldr	d5, [pc, #528]	@ 8003ce8 <main+0x15b8>
 8003ada:	ed9f 4b83 	vldr	d4, [pc, #524]	@ 8003ce8 <main+0x15b8>
 8003ade:	ed9f 3b8a 	vldr	d3, [pc, #552]	@ 8003d08 <main+0x15d8>
 8003ae2:	f001 ff0d 	bl	8005900 <PID_left>
		  if(blue_step2_2_check)
 8003ae6:	f897 37d1 	ldrb.w	r3, [r7, #2001]	@ 0x7d1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8464 	beq.w	80043b8 <main+0x1c88>
		  {
			  mode = BLUE_STEP3;
 8003af0:	4b99      	ldr	r3, [pc, #612]	@ (8003d58 <main+0x1628>)
 8003af2:	2211      	movs	r2, #17
 8003af4:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003af6:	f000 bc5f 	b.w	80043b8 <main+0x1c88>

	  case BLUE_STEP3:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003afa:	2201      	movs	r2, #1
 8003afc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b00:	4893      	ldr	r0, [pc, #588]	@ (8003d50 <main+0x1620>)
 8003b02:	f004 fb4b 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003b06:	2200      	movs	r2, #0
 8003b08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b0c:	4890      	ldr	r0, [pc, #576]	@ (8003d50 <main+0x1620>)
 8003b0e:	f004 fb45 	bl	800819c <HAL_GPIO_WritePin>

		  PID_EG(blue_step3, 1.5, 0.0, 0.0, 2.5, 0.75, 3200);
 8003b12:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003b16:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8003b1a:	ed93 0b00 	vldr	d0, [r3]
 8003b1e:	ed93 1b02 	vldr	d1, [r3, #8]
 8003b22:	ed93 2b04 	vldr	d2, [r3, #16]
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	4b8c      	ldr	r3, [pc, #560]	@ (8003d5c <main+0x162c>)
 8003b2c:	e9cd 2300 	strd	r2, r3, [sp]
 8003b30:	ed9f 7b77 	vldr	d7, [pc, #476]	@ 8003d10 <main+0x15e0>
 8003b34:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8003ce0 <main+0x15b0>
 8003b38:	ed9f 5b6b 	vldr	d5, [pc, #428]	@ 8003ce8 <main+0x15b8>
 8003b3c:	ed9f 4b6a 	vldr	d4, [pc, #424]	@ 8003ce8 <main+0x15b8>
 8003b40:	ed9f 3b75 	vldr	d3, [pc, #468]	@ 8003d18 <main+0x15e8>
 8003b44:	f002 f860 	bl	8005c08 <PID_EG>
		  if(blue_step3_check)
 8003b48:	f897 37d0 	ldrb.w	r3, [r7, #2000]	@ 0x7d0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8435 	beq.w	80043bc <main+0x1c8c>
		  {
			  mode = BLUE_STORAGE;
 8003b52:	4b81      	ldr	r3, [pc, #516]	@ (8003d58 <main+0x1628>)
 8003b54:	2212      	movs	r2, #18
 8003b56:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003b58:	f000 bc30 	b.w	80043bc <main+0x1c8c>

	  case BLUE_STORAGE:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b62:	487b      	ldr	r0, [pc, #492]	@ (8003d50 <main+0x1620>)
 8003b64:	f004 fb1a 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b6e:	4878      	ldr	r0, [pc, #480]	@ (8003d50 <main+0x1620>)
 8003b70:	f004 fb14 	bl	800819c <HAL_GPIO_WritePin>

		  setMotorSpeed(1, 0);
 8003b74:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 8003ce8 <main+0x15b8>
 8003b78:	2001      	movs	r0, #1
 8003b7a:	f7fd fa6f 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8003b7e:	ed9f 0b5a 	vldr	d0, [pc, #360]	@ 8003ce8 <main+0x15b8>
 8003b82:	2002      	movs	r0, #2
 8003b84:	f7fd fa6a 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 8003b88:	ed9f 0b57 	vldr	d0, [pc, #348]	@ 8003ce8 <main+0x15b8>
 8003b8c:	2007      	movs	r0, #7
 8003b8e:	f7fd fa65 	bl	800105c <setMotorSpeed>
		  PID_EG(blue_storage, 2.4, 0.0, 0.0, 1.5, 0.9, 4500);
 8003b92:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003b96:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8003b9a:	ed93 0b00 	vldr	d0, [r3]
 8003b9e:	ed93 1b02 	vldr	d1, [r3, #8]
 8003ba2:	ed93 2b04 	vldr	d2, [r3, #16]
 8003ba6:	a35e      	add	r3, pc, #376	@ (adr r3, 8003d20 <main+0x15f0>)
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	e9cd 2300 	strd	r2, r3, [sp]
 8003bb0:	ed9f 7b5d 	vldr	d7, [pc, #372]	@ 8003d28 <main+0x15f8>
 8003bb4:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8003d18 <main+0x15e8>
 8003bb8:	ed9f 5b4b 	vldr	d5, [pc, #300]	@ 8003ce8 <main+0x15b8>
 8003bbc:	ed9f 4b4a 	vldr	d4, [pc, #296]	@ 8003ce8 <main+0x15b8>
 8003bc0:	ed9f 3b5b 	vldr	d3, [pc, #364]	@ 8003d30 <main+0x1600>
 8003bc4:	f002 f820 	bl	8005c08 <PID_EG>
		  if(blue_storage_check)
 8003bc8:	f897 37cf 	ldrb.w	r3, [r7, #1999]	@ 0x7cf
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 83f7 	beq.w	80043c0 <main+0x1c90>
		  {
			  mode = BLUE_FIND_BALL;
 8003bd2:	4b61      	ldr	r3, [pc, #388]	@ (8003d58 <main+0x1628>)
 8003bd4:	2213      	movs	r2, #19
 8003bd6:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003bd8:	e3f2      	b.n	80043c0 <main+0x1c90>

	  case BLUE_FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003be0:	485b      	ldr	r0, [pc, #364]	@ (8003d50 <main+0x1620>)
 8003be2:	f004 fadb 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003be6:	2200      	movs	r2, #0
 8003be8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bec:	4858      	ldr	r0, [pc, #352]	@ (8003d50 <main+0x1620>)
 8003bee:	f004 fad5 	bl	800819c <HAL_GPIO_WritePin>

		  findAndTakeBall(blueBall);
 8003bf2:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f002 ffe6 	bl	8006bc8 <findAndTakeBall>
//		  if(sensorMEGA[3] == 0)
//		  {
//			  mode = BLUE_FACING_SILO;
//		  }
		  if(sensorMEGA[3] == 0 && camera[2] == 1)
 8003bfc:	4b58      	ldr	r3, [pc, #352]	@ (8003d60 <main+0x1630>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d108      	bne.n	8003c16 <main+0x14e6>
 8003c04:	4b57      	ldr	r3, [pc, #348]	@ (8003d64 <main+0x1634>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d104      	bne.n	8003c16 <main+0x14e6>
		  {
			  mode = BLUE_FACING_SILO;
 8003c0c:	4b52      	ldr	r3, [pc, #328]	@ (8003d58 <main+0x1628>)
 8003c0e:	2214      	movs	r2, #20
 8003c10:	701a      	strb	r2, [r3, #0]
		  }
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
		  {
			  throwTheBall(blue_throwBall, 2.5, 0.0, 0.0, 1.5);
		  }
		  break;
 8003c12:	f000 bc0d 	b.w	8004430 <main+0x1d00>
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
 8003c16:	4b52      	ldr	r3, [pc, #328]	@ (8003d60 <main+0x1630>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f040 8408 	bne.w	8004430 <main+0x1d00>
 8003c20:	4b50      	ldr	r3, [pc, #320]	@ (8003d64 <main+0x1634>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f040 8403 	bne.w	8004430 <main+0x1d00>
			  throwTheBall(blue_throwBall, 2.5, 0.0, 0.0, 1.5);
 8003c2a:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003c2e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8003c32:	ed93 1b00 	vldr	d1, [r3]
 8003c36:	ed93 2b02 	vldr	d2, [r3, #8]
 8003c3a:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c3e:	ed9f 6b36 	vldr	d6, [pc, #216]	@ 8003d18 <main+0x15e8>
 8003c42:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8003ce8 <main+0x15b8>
 8003c46:	ed9f 4b28 	vldr	d4, [pc, #160]	@ 8003ce8 <main+0x15b8>
 8003c4a:	ed9f 3b25 	vldr	d3, [pc, #148]	@ 8003ce0 <main+0x15b0>
 8003c4e:	eeb0 0a41 	vmov.f32	s0, s2
 8003c52:	eef0 0a61 	vmov.f32	s1, s3
 8003c56:	eeb0 1a42 	vmov.f32	s2, s4
 8003c5a:	eef0 1a62 	vmov.f32	s3, s5
 8003c5e:	eeb0 2a47 	vmov.f32	s4, s14
 8003c62:	eef0 2a67 	vmov.f32	s5, s15
 8003c66:	f003 fa3f 	bl	80070e8 <throwTheBall>
		  break;
 8003c6a:	e3e1      	b.n	8004430 <main+0x1d00>

	  case BLUE_FACING_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c72:	4837      	ldr	r0, [pc, #220]	@ (8003d50 <main+0x1620>)
 8003c74:	f004 fa92 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c7e:	4834      	ldr	r0, [pc, #208]	@ (8003d50 <main+0x1620>)
 8003c80:	f004 fa8c 	bl	800819c <HAL_GPIO_WritePin>

		  servo_write(120);
 8003c84:	2078      	movs	r0, #120	@ 0x78
 8003c86:	f001 fe23 	bl	80058d0 <servo_write>
		  PID_EG(blue_silo, 1.8, 0.0, 0.0, 1.5, 0.8, 3500);
 8003c8a:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003c8e:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8003c92:	ed93 0b00 	vldr	d0, [r3]
 8003c96:	ed93 1b02 	vldr	d1, [r3, #8]
 8003c9a:	ed93 2b04 	vldr	d2, [r3, #16]
 8003c9e:	a326      	add	r3, pc, #152	@ (adr r3, 8003d38 <main+0x1608>)
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	e9cd 2300 	strd	r2, r3, [sp]
 8003ca8:	ed9f 7b25 	vldr	d7, [pc, #148]	@ 8003d40 <main+0x1610>
 8003cac:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8003d18 <main+0x15e8>
 8003cb0:	ed9f 5b0d 	vldr	d5, [pc, #52]	@ 8003ce8 <main+0x15b8>
 8003cb4:	ed9f 4b0c 	vldr	d4, [pc, #48]	@ 8003ce8 <main+0x15b8>
 8003cb8:	ed9f 3b23 	vldr	d3, [pc, #140]	@ 8003d48 <main+0x1618>
 8003cbc:	f001 ffa4 	bl	8005c08 <PID_EG>
		  if(blue_silo_check)
 8003cc0:	f897 37ce 	ldrb.w	r3, [r7, #1998]	@ 0x7ce
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 83b5 	beq.w	8004434 <main+0x1d04>
		  {
			  mode = BLUE_FIND_SILO;
 8003cca:	4b23      	ldr	r3, [pc, #140]	@ (8003d58 <main+0x1628>)
 8003ccc:	2215      	movs	r2, #21
 8003cce:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003cd0:	e3b0      	b.n	8004434 <main+0x1d04>
 8003cd2:	bf00      	nop
 8003cd4:	f3af 8000 	nop.w
 8003cd8:	66666666 	.word	0x66666666
 8003cdc:	3fe66666 	.word	0x3fe66666
 8003ce0:	00000000 	.word	0x00000000
 8003ce4:	40040000 	.word	0x40040000
	...
 8003cf4:	3ff40000 	.word	0x3ff40000
 8003cf8:	00000000 	.word	0x00000000
 8003cfc:	40a9c800 	.word	0x40a9c800
 8003d00:	00000000 	.word	0x00000000
 8003d04:	40080000 	.word	0x40080000
 8003d08:	66666666 	.word	0x66666666
 8003d0c:	3ffa6666 	.word	0x3ffa6666
 8003d10:	00000000 	.word	0x00000000
 8003d14:	3fe80000 	.word	0x3fe80000
 8003d18:	00000000 	.word	0x00000000
 8003d1c:	3ff80000 	.word	0x3ff80000
 8003d20:	00000000 	.word	0x00000000
 8003d24:	40b19400 	.word	0x40b19400
 8003d28:	cccccccd 	.word	0xcccccccd
 8003d2c:	3feccccc 	.word	0x3feccccc
 8003d30:	33333333 	.word	0x33333333
 8003d34:	40033333 	.word	0x40033333
 8003d38:	00000000 	.word	0x00000000
 8003d3c:	40ab5800 	.word	0x40ab5800
 8003d40:	9999999a 	.word	0x9999999a
 8003d44:	3fe99999 	.word	0x3fe99999
 8003d48:	cccccccd 	.word	0xcccccccd
 8003d4c:	3ffccccc 	.word	0x3ffccccc
 8003d50:	40020c00 	.word	0x40020c00
 8003d54:	40af4000 	.word	0x40af4000
 8003d58:	20000610 	.word	0x20000610
 8003d5c:	40a90000 	.word	0x40a90000
 8003d60:	20000600 	.word	0x20000600
 8003d64:	2000057c 	.word	0x2000057c

	  case BLUE_FIND_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003d6e:	48d0      	ldr	r0, [pc, #832]	@ (80040b0 <main+0x1980>)
 8003d70:	f004 fa14 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003d74:	2200      	movs	r2, #0
 8003d76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d7a:	48cd      	ldr	r0, [pc, #820]	@ (80040b0 <main+0x1980>)
 8003d7c:	f004 fa0e 	bl	800819c <HAL_GPIO_WritePin>

		  placeBallInSilo(blue_silo, 1.6, 0.0, 0.0, 1.5, 0.7, 2700);
 8003d80:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003d84:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8003d88:	ed93 0b00 	vldr	d0, [r3]
 8003d8c:	ed93 1b02 	vldr	d1, [r3, #8]
 8003d90:	ed93 2b04 	vldr	d2, [r3, #16]
 8003d94:	a3b0      	add	r3, pc, #704	@ (adr r3, 8004058 <main+0x1928>)
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	e9cd 2300 	strd	r2, r3, [sp]
 8003d9e:	ed9f 7bb0 	vldr	d7, [pc, #704]	@ 8004060 <main+0x1930>
 8003da2:	ed9f 6bb1 	vldr	d6, [pc, #708]	@ 8004068 <main+0x1938>
 8003da6:	ed9f 5bb2 	vldr	d5, [pc, #712]	@ 8004070 <main+0x1940>
 8003daa:	ed9f 4bb1 	vldr	d4, [pc, #708]	@ 8004070 <main+0x1940>
 8003dae:	ed9f 3bb2 	vldr	d3, [pc, #712]	@ 8004078 <main+0x1948>
 8003db2:	f002 fda5 	bl	8006900 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 8003db6:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	@ 0x7e0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	dd03      	ble.n	8003dc6 <main+0x1696>
 8003dbe:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	@ 0x7e0
 8003dc2:	2b0a      	cmp	r3, #10
 8003dc4:	dd09      	ble.n	8003dda <main+0x16aa>
 8003dc6:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f340 8334 	ble.w	8004438 <main+0x1d08>
 8003dd0:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 8003dd4:	2b0a      	cmp	r3, #10
 8003dd6:	f300 832f 	bgt.w	8004438 <main+0x1d08>
		  {
			  setMotorSpeed(1, -2000);
 8003dda:	ed9f 0ba9 	vldr	d0, [pc, #676]	@ 8004080 <main+0x1950>
 8003dde:	2001      	movs	r0, #1
 8003de0:	f7fd f93c 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2000);
 8003de4:	ed9f 0ba6 	vldr	d0, [pc, #664]	@ 8004080 <main+0x1950>
 8003de8:	2002      	movs	r0, #2
 8003dea:	f7fd f937 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -2800);
 8003dee:	ed9f 0ba6 	vldr	d0, [pc, #664]	@ 8004088 <main+0x1958>
 8003df2:	2007      	movs	r0, #7
 8003df4:	f7fd f932 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 8003df8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003dfc:	f003 fe52 	bl	8007aa4 <HAL_Delay>
			  mode = BLUE_STORAGE;
 8003e00:	4bac      	ldr	r3, [pc, #688]	@ (80040b4 <main+0x1984>)
 8003e02:	2212      	movs	r2, #18
 8003e04:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003e06:	e317      	b.n	8004438 <main+0x1d08>

	  case BLUE_RETRY:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003e0e:	48a8      	ldr	r0, [pc, #672]	@ (80040b0 <main+0x1980>)
 8003e10:	f004 f9c4 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003e14:	2200      	movs	r2, #0
 8003e16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e1a:	48a5      	ldr	r0, [pc, #660]	@ (80040b0 <main+0x1980>)
 8003e1c:	f004 f9be 	bl	800819c <HAL_GPIO_WritePin>

		  PID_moveToCoordinate(blue_retry, blue_retry_parameters, blue_retry_numPoints);
 8003e20:	f8b7 27e6 	ldrh.w	r2, [r7, #2022]	@ 0x7e6
 8003e24:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8003e28:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f002 f86f 	bl	8005f10 <PID_moveToCoordinate>
		  if(blue_retry_check)
 8003e32:	f897 37cd 	ldrb.w	r3, [r7, #1997]	@ 0x7cd
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8300 	beq.w	800443c <main+0x1d0c>
		  {
			  mode = BLUE_RETRY_STORAGE;
 8003e3c:	4b9d      	ldr	r3, [pc, #628]	@ (80040b4 <main+0x1984>)
 8003e3e:	2217      	movs	r2, #23
 8003e40:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003e42:	e2fb      	b.n	800443c <main+0x1d0c>

	  case BLUE_RETRY_STORAGE:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003e44:	2200      	movs	r2, #0
 8003e46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003e4a:	4899      	ldr	r0, [pc, #612]	@ (80040b0 <main+0x1980>)
 8003e4c:	f004 f9a6 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8003e50:	2201      	movs	r2, #1
 8003e52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e56:	4896      	ldr	r0, [pc, #600]	@ (80040b0 <main+0x1980>)
 8003e58:	f004 f9a0 	bl	800819c <HAL_GPIO_WritePin>

		  setMotorSpeed(1, 0);
 8003e5c:	ed9f 0b84 	vldr	d0, [pc, #528]	@ 8004070 <main+0x1940>
 8003e60:	2001      	movs	r0, #1
 8003e62:	f7fd f8fb 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8003e66:	ed9f 0b82 	vldr	d0, [pc, #520]	@ 8004070 <main+0x1940>
 8003e6a:	2002      	movs	r0, #2
 8003e6c:	f7fd f8f6 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 8003e70:	ed9f 0b7f 	vldr	d0, [pc, #508]	@ 8004070 <main+0x1940>
 8003e74:	2007      	movs	r0, #7
 8003e76:	f7fd f8f1 	bl	800105c <setMotorSpeed>
		  PID_EG(blue_retry_storage, 1.8, 0.0, 0.0, 1.5, 0.8, 3700);
 8003e7a:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003e7e:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8003e82:	ed93 0b00 	vldr	d0, [r3]
 8003e86:	ed93 1b02 	vldr	d1, [r3, #8]
 8003e8a:	ed93 2b04 	vldr	d2, [r3, #16]
 8003e8e:	a380      	add	r3, pc, #512	@ (adr r3, 8004090 <main+0x1960>)
 8003e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e94:	e9cd 2300 	strd	r2, r3, [sp]
 8003e98:	ed9f 7b7f 	vldr	d7, [pc, #508]	@ 8004098 <main+0x1968>
 8003e9c:	ed9f 6b72 	vldr	d6, [pc, #456]	@ 8004068 <main+0x1938>
 8003ea0:	ed9f 5b73 	vldr	d5, [pc, #460]	@ 8004070 <main+0x1940>
 8003ea4:	ed9f 4b72 	vldr	d4, [pc, #456]	@ 8004070 <main+0x1940>
 8003ea8:	ed9f 3b7d 	vldr	d3, [pc, #500]	@ 80040a0 <main+0x1970>
 8003eac:	f001 feac 	bl	8005c08 <PID_EG>
		  if(blue_retry_storage_check)
 8003eb0:	f897 37cc 	ldrb.w	r3, [r7, #1996]	@ 0x7cc
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 82c3 	beq.w	8004440 <main+0x1d10>
		  {
			  mode = BLUE_RETRY_FIND_BALL;
 8003eba:	4b7e      	ldr	r3, [pc, #504]	@ (80040b4 <main+0x1984>)
 8003ebc:	2218      	movs	r2, #24
 8003ebe:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003ec0:	e2be      	b.n	8004440 <main+0x1d10>

	  case BLUE_RETRY_FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003ec8:	4879      	ldr	r0, [pc, #484]	@ (80040b0 <main+0x1980>)
 8003eca:	f004 f967 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ed4:	4876      	ldr	r0, [pc, #472]	@ (80040b0 <main+0x1980>)
 8003ed6:	f004 f961 	bl	800819c <HAL_GPIO_WritePin>

		  findAndTakeBall(blueRetryBall);
 8003eda:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f002 fe72 	bl	8006bc8 <findAndTakeBall>
//		  if(sensorMEGA[3] == 0)
//		  {
//			  mode = BLUE_RETRY_FACING_SILO;
//		  }
		  if(sensorMEGA[3] == 0 && camera[2] == 1)
 8003ee4:	4b74      	ldr	r3, [pc, #464]	@ (80040b8 <main+0x1988>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d107      	bne.n	8003efc <main+0x17cc>
 8003eec:	4b73      	ldr	r3, [pc, #460]	@ (80040bc <main+0x198c>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d103      	bne.n	8003efc <main+0x17cc>
		  {
			  mode = BLUE_RETRY_FACING_SILO;
 8003ef4:	4b6f      	ldr	r3, [pc, #444]	@ (80040b4 <main+0x1984>)
 8003ef6:	2219      	movs	r2, #25
 8003ef8:	701a      	strb	r2, [r3, #0]
		  }
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
		  {
			  throwTheBall(blue_retry_throwBall, 1.5, 0.0, 0.0, 1.5);
		  }
		  break;
 8003efa:	e2a3      	b.n	8004444 <main+0x1d14>
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
 8003efc:	4b6e      	ldr	r3, [pc, #440]	@ (80040b8 <main+0x1988>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f040 829f 	bne.w	8004444 <main+0x1d14>
 8003f06:	4b6d      	ldr	r3, [pc, #436]	@ (80040bc <main+0x198c>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f040 829a 	bne.w	8004444 <main+0x1d14>
			  throwTheBall(blue_retry_throwBall, 1.5, 0.0, 0.0, 1.5);
 8003f10:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003f14:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8003f18:	ed93 1b00 	vldr	d1, [r3]
 8003f1c:	ed93 2b02 	vldr	d2, [r3, #8]
 8003f20:	ed93 7b04 	vldr	d7, [r3, #16]
 8003f24:	ed9f 6b50 	vldr	d6, [pc, #320]	@ 8004068 <main+0x1938>
 8003f28:	ed9f 5b51 	vldr	d5, [pc, #324]	@ 8004070 <main+0x1940>
 8003f2c:	ed9f 4b50 	vldr	d4, [pc, #320]	@ 8004070 <main+0x1940>
 8003f30:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8004068 <main+0x1938>
 8003f34:	eeb0 0a41 	vmov.f32	s0, s2
 8003f38:	eef0 0a61 	vmov.f32	s1, s3
 8003f3c:	eeb0 1a42 	vmov.f32	s2, s4
 8003f40:	eef0 1a62 	vmov.f32	s3, s5
 8003f44:	eeb0 2a47 	vmov.f32	s4, s14
 8003f48:	eef0 2a67 	vmov.f32	s5, s15
 8003f4c:	f003 f8cc 	bl	80070e8 <throwTheBall>
		  break;
 8003f50:	e278      	b.n	8004444 <main+0x1d14>

	  case BLUE_RETRY_FACING_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003f52:	2200      	movs	r2, #0
 8003f54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003f58:	4855      	ldr	r0, [pc, #340]	@ (80040b0 <main+0x1980>)
 8003f5a:	f004 f91f 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f64:	4852      	ldr	r0, [pc, #328]	@ (80040b0 <main+0x1980>)
 8003f66:	f004 f919 	bl	800819c <HAL_GPIO_WritePin>

		  servo_write(120);
 8003f6a:	2078      	movs	r0, #120	@ 0x78
 8003f6c:	f001 fcb0 	bl	80058d0 <servo_write>
		  PID_EG(blue_retry_silo, 1.8, 0.0, 0.0, 1.5, 0.8, 3500);
 8003f70:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003f74:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8003f78:	ed93 0b00 	vldr	d0, [r3]
 8003f7c:	ed93 1b02 	vldr	d1, [r3, #8]
 8003f80:	ed93 2b04 	vldr	d2, [r3, #16]
 8003f84:	a348      	add	r3, pc, #288	@ (adr r3, 80040a8 <main+0x1978>)
 8003f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8a:	e9cd 2300 	strd	r2, r3, [sp]
 8003f8e:	ed9f 7b42 	vldr	d7, [pc, #264]	@ 8004098 <main+0x1968>
 8003f92:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8004068 <main+0x1938>
 8003f96:	ed9f 5b36 	vldr	d5, [pc, #216]	@ 8004070 <main+0x1940>
 8003f9a:	ed9f 4b35 	vldr	d4, [pc, #212]	@ 8004070 <main+0x1940>
 8003f9e:	ed9f 3b40 	vldr	d3, [pc, #256]	@ 80040a0 <main+0x1970>
 8003fa2:	f001 fe31 	bl	8005c08 <PID_EG>
		  if(blue_retry_silo_check)
 8003fa6:	f897 37cb 	ldrb.w	r3, [r7, #1995]	@ 0x7cb
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 824c 	beq.w	8004448 <main+0x1d18>
		  {
			  mode = BLUE_RETRY_FIND_SILO;
 8003fb0:	4b40      	ldr	r3, [pc, #256]	@ (80040b4 <main+0x1984>)
 8003fb2:	221a      	movs	r2, #26
 8003fb4:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003fb6:	e247      	b.n	8004448 <main+0x1d18>

	  case BLUE_RETRY_FIND_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003fbe:	483c      	ldr	r0, [pc, #240]	@ (80040b0 <main+0x1980>)
 8003fc0:	f004 f8ec 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fca:	4839      	ldr	r0, [pc, #228]	@ (80040b0 <main+0x1980>)
 8003fcc:	f004 f8e6 	bl	800819c <HAL_GPIO_WritePin>

		  placeBallInSilo(blue_retry_silo, 1.6, 0.0, 0.0, 1.5, 0.7, 2700);
 8003fd0:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8003fd4:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8003fd8:	ed93 0b00 	vldr	d0, [r3]
 8003fdc:	ed93 1b02 	vldr	d1, [r3, #8]
 8003fe0:	ed93 2b04 	vldr	d2, [r3, #16]
 8003fe4:	a31c      	add	r3, pc, #112	@ (adr r3, 8004058 <main+0x1928>)
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	e9cd 2300 	strd	r2, r3, [sp]
 8003fee:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8004060 <main+0x1930>
 8003ff2:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8004068 <main+0x1938>
 8003ff6:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8004070 <main+0x1940>
 8003ffa:	ed9f 4b1d 	vldr	d4, [pc, #116]	@ 8004070 <main+0x1940>
 8003ffe:	ed9f 3b1e 	vldr	d3, [pc, #120]	@ 8004078 <main+0x1948>
 8004002:	f002 fc7d 	bl	8006900 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 8004006:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	@ 0x7e0
 800400a:	2b00      	cmp	r3, #0
 800400c:	dd03      	ble.n	8004016 <main+0x18e6>
 800400e:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	@ 0x7e0
 8004012:	2b0a      	cmp	r3, #10
 8004014:	dd09      	ble.n	800402a <main+0x18fa>
 8004016:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 800401a:	2b00      	cmp	r3, #0
 800401c:	f340 8216 	ble.w	800444c <main+0x1d1c>
 8004020:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 8004024:	2b0a      	cmp	r3, #10
 8004026:	f300 8211 	bgt.w	800444c <main+0x1d1c>
		  {
			  setMotorSpeed(1, -2000);
 800402a:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 8004080 <main+0x1950>
 800402e:	2001      	movs	r0, #1
 8004030:	f7fd f814 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2000);
 8004034:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8004080 <main+0x1950>
 8004038:	2002      	movs	r0, #2
 800403a:	f7fd f80f 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -2800);
 800403e:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8004088 <main+0x1958>
 8004042:	2007      	movs	r0, #7
 8004044:	f7fd f80a 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 8004048:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800404c:	f003 fd2a 	bl	8007aa4 <HAL_Delay>
			  mode = BLUE_RETRY_STORAGE;
 8004050:	4b18      	ldr	r3, [pc, #96]	@ (80040b4 <main+0x1984>)
 8004052:	2217      	movs	r2, #23
 8004054:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8004056:	e1f9      	b.n	800444c <main+0x1d1c>
 8004058:	00000000 	.word	0x00000000
 800405c:	40a51800 	.word	0x40a51800
 8004060:	66666666 	.word	0x66666666
 8004064:	3fe66666 	.word	0x3fe66666
 8004068:	00000000 	.word	0x00000000
 800406c:	3ff80000 	.word	0x3ff80000
	...
 8004078:	9999999a 	.word	0x9999999a
 800407c:	3ff99999 	.word	0x3ff99999
 8004080:	00000000 	.word	0x00000000
 8004084:	c09f4000 	.word	0xc09f4000
 8004088:	00000000 	.word	0x00000000
 800408c:	c0a5e000 	.word	0xc0a5e000
 8004090:	00000000 	.word	0x00000000
 8004094:	40ace800 	.word	0x40ace800
 8004098:	9999999a 	.word	0x9999999a
 800409c:	3fe99999 	.word	0x3fe99999
 80040a0:	cccccccd 	.word	0xcccccccd
 80040a4:	3ffccccc 	.word	0x3ffccccc
 80040a8:	00000000 	.word	0x00000000
 80040ac:	40ab5800 	.word	0x40ab5800
 80040b0:	40020c00 	.word	0x40020c00
 80040b4:	20000610 	.word	0x20000610
 80040b8:	20000600 	.word	0x20000600
 80040bc:	2000057c 	.word	0x2000057c

	  case TES_AREA3_1:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80040c0:	2201      	movs	r2, #1
 80040c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80040c6:	48d6      	ldr	r0, [pc, #856]	@ (8004420 <main+0x1cf0>)
 80040c8:	f004 f868 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80040cc:	2200      	movs	r2, #0
 80040ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040d2:	48d3      	ldr	r0, [pc, #844]	@ (8004420 <main+0x1cf0>)
 80040d4:	f004 f862 	bl	800819c <HAL_GPIO_WritePin>

		  setMotorSpeed(1, 0);
 80040d8:	ed9f 0bbb 	vldr	d0, [pc, #748]	@ 80043c8 <main+0x1c98>
 80040dc:	2001      	movs	r0, #1
 80040de:	f7fc ffbd 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 80040e2:	ed9f 0bb9 	vldr	d0, [pc, #740]	@ 80043c8 <main+0x1c98>
 80040e6:	2002      	movs	r0, #2
 80040e8:	f7fc ffb8 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 80040ec:	ed9f 0bb6 	vldr	d0, [pc, #728]	@ 80043c8 <main+0x1c98>
 80040f0:	2007      	movs	r0, #7
 80040f2:	f7fc ffb3 	bl	800105c <setMotorSpeed>
		  PID_EG(tes_storage, 1.8, 0.0, 0.0, 1.5, 0.7, 3500);
 80040f6:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80040fa:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80040fe:	ed93 0b00 	vldr	d0, [r3]
 8004102:	ed93 1b02 	vldr	d1, [r3, #8]
 8004106:	ed93 2b04 	vldr	d2, [r3, #16]
 800410a:	a3b1      	add	r3, pc, #708	@ (adr r3, 80043d0 <main+0x1ca0>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	e9cd 2300 	strd	r2, r3, [sp]
 8004114:	ed9f 7bb0 	vldr	d7, [pc, #704]	@ 80043d8 <main+0x1ca8>
 8004118:	ed9f 6bb1 	vldr	d6, [pc, #708]	@ 80043e0 <main+0x1cb0>
 800411c:	ed9f 5baa 	vldr	d5, [pc, #680]	@ 80043c8 <main+0x1c98>
 8004120:	ed9f 4ba9 	vldr	d4, [pc, #676]	@ 80043c8 <main+0x1c98>
 8004124:	ed9f 3bb0 	vldr	d3, [pc, #704]	@ 80043e8 <main+0x1cb8>
 8004128:	f001 fd6e 	bl	8005c08 <PID_EG>
		  if(tes_storage_check)
 800412c:	f897 37ca 	ldrb.w	r3, [r7, #1994]	@ 0x7ca
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 818d 	beq.w	8004450 <main+0x1d20>
		  {
			  mode = TES_FIND_BALL;
 8004136:	4bbb      	ldr	r3, [pc, #748]	@ (8004424 <main+0x1cf4>)
 8004138:	221c      	movs	r2, #28
 800413a:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800413c:	e188      	b.n	8004450 <main+0x1d20>

	  case TES_FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800413e:	2201      	movs	r2, #1
 8004140:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004144:	48b6      	ldr	r0, [pc, #728]	@ (8004420 <main+0x1cf0>)
 8004146:	f004 f829 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800414a:	2200      	movs	r2, #0
 800414c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004150:	48b3      	ldr	r0, [pc, #716]	@ (8004420 <main+0x1cf0>)
 8004152:	f004 f823 	bl	800819c <HAL_GPIO_WritePin>

		  findAndTakeBall(redBall_TES);
 8004156:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800415a:	4618      	mov	r0, r3
 800415c:	f002 fd34 	bl	8006bc8 <findAndTakeBall>
//		  if(sensorMEGA[3] == 0)
//		  {
//			  mode = BLUE_RETRY_FACING_SILO;
//		  }
		  if(sensorMEGA[3] == 0 && camera[2] == 1)
 8004160:	4bb1      	ldr	r3, [pc, #708]	@ (8004428 <main+0x1cf8>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d107      	bne.n	8004178 <main+0x1a48>
 8004168:	4bb0      	ldr	r3, [pc, #704]	@ (800442c <main+0x1cfc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d103      	bne.n	8004178 <main+0x1a48>
		  {
			  mode = TES_AREA3_2;
 8004170:	4bac      	ldr	r3, [pc, #688]	@ (8004424 <main+0x1cf4>)
 8004172:	221d      	movs	r2, #29
 8004174:	701a      	strb	r2, [r3, #0]
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
		  {
			  throwTheBall(redBall_TES_throwball, 1.5, 0.0, 0.0, 1.5);
		  }

		  break;
 8004176:	e16d      	b.n	8004454 <main+0x1d24>
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
 8004178:	4bab      	ldr	r3, [pc, #684]	@ (8004428 <main+0x1cf8>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f040 8169 	bne.w	8004454 <main+0x1d24>
 8004182:	4baa      	ldr	r3, [pc, #680]	@ (800442c <main+0x1cfc>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f040 8164 	bne.w	8004454 <main+0x1d24>
			  throwTheBall(redBall_TES_throwball, 1.5, 0.0, 0.0, 1.5);
 800418c:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8004190:	f5a3 63f8 	sub.w	r3, r3, #1984	@ 0x7c0
 8004194:	ed93 1b00 	vldr	d1, [r3]
 8004198:	ed93 2b02 	vldr	d2, [r3, #8]
 800419c:	ed93 7b04 	vldr	d7, [r3, #16]
 80041a0:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 80043e0 <main+0x1cb0>
 80041a4:	ed9f 5b88 	vldr	d5, [pc, #544]	@ 80043c8 <main+0x1c98>
 80041a8:	ed9f 4b87 	vldr	d4, [pc, #540]	@ 80043c8 <main+0x1c98>
 80041ac:	ed9f 3b8c 	vldr	d3, [pc, #560]	@ 80043e0 <main+0x1cb0>
 80041b0:	eeb0 0a41 	vmov.f32	s0, s2
 80041b4:	eef0 0a61 	vmov.f32	s1, s3
 80041b8:	eeb0 1a42 	vmov.f32	s2, s4
 80041bc:	eef0 1a62 	vmov.f32	s3, s5
 80041c0:	eeb0 2a47 	vmov.f32	s4, s14
 80041c4:	eef0 2a67 	vmov.f32	s5, s15
 80041c8:	f002 ff8e 	bl	80070e8 <throwTheBall>
		  break;
 80041cc:	e142      	b.n	8004454 <main+0x1d24>
	  case TES_AREA3_2:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80041ce:	2201      	movs	r2, #1
 80041d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041d4:	4892      	ldr	r0, [pc, #584]	@ (8004420 <main+0x1cf0>)
 80041d6:	f003 ffe1 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80041da:	2200      	movs	r2, #0
 80041dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041e0:	488f      	ldr	r0, [pc, #572]	@ (8004420 <main+0x1cf0>)
 80041e2:	f003 ffdb 	bl	800819c <HAL_GPIO_WritePin>
		  servo_write(120);
 80041e6:	2078      	movs	r0, #120	@ 0x78
 80041e8:	f001 fb72 	bl	80058d0 <servo_write>
		  PID_EG(tes_silo, 1.8, 0.0, 0.0, 1.5, 0.8, 3000);
 80041ec:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80041f0:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 80041f4:	ed93 0b00 	vldr	d0, [r3]
 80041f8:	ed93 1b02 	vldr	d1, [r3, #8]
 80041fc:	ed93 2b04 	vldr	d2, [r3, #16]
 8004200:	a37b      	add	r3, pc, #492	@ (adr r3, 80043f0 <main+0x1cc0>)
 8004202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004206:	e9cd 2300 	strd	r2, r3, [sp]
 800420a:	ed9f 7b7b 	vldr	d7, [pc, #492]	@ 80043f8 <main+0x1cc8>
 800420e:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 80043e0 <main+0x1cb0>
 8004212:	ed9f 5b6d 	vldr	d5, [pc, #436]	@ 80043c8 <main+0x1c98>
 8004216:	ed9f 4b6c 	vldr	d4, [pc, #432]	@ 80043c8 <main+0x1c98>
 800421a:	ed9f 3b73 	vldr	d3, [pc, #460]	@ 80043e8 <main+0x1cb8>
 800421e:	f001 fcf3 	bl	8005c08 <PID_EG>
		  if(tes_silo_check)
 8004222:	f897 37c9 	ldrb.w	r3, [r7, #1993]	@ 0x7c9
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 8116 	beq.w	8004458 <main+0x1d28>
		  {
			  mode = TES_AREA3_3;
 800422c:	4b7d      	ldr	r3, [pc, #500]	@ (8004424 <main+0x1cf4>)
 800422e:	221e      	movs	r2, #30
 8004230:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8004232:	e111      	b.n	8004458 <main+0x1d28>

	  case TES_AREA3_3:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8004234:	2201      	movs	r2, #1
 8004236:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800423a:	4879      	ldr	r0, [pc, #484]	@ (8004420 <main+0x1cf0>)
 800423c:	f003 ffae 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8004240:	2200      	movs	r2, #0
 8004242:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004246:	4876      	ldr	r0, [pc, #472]	@ (8004420 <main+0x1cf0>)
 8004248:	f003 ffa8 	bl	800819c <HAL_GPIO_WritePin>

		  placeBallInSilo(tes_silo, 1.5, 0.0, 0.0, 1.5, 0.7, 2500);
 800424c:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8004250:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8004254:	ed93 0b00 	vldr	d0, [r3]
 8004258:	ed93 1b02 	vldr	d1, [r3, #8]
 800425c:	ed93 2b04 	vldr	d2, [r3, #16]
 8004260:	a367      	add	r3, pc, #412	@ (adr r3, 8004400 <main+0x1cd0>)
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	e9cd 2300 	strd	r2, r3, [sp]
 800426a:	ed9f 7b5b 	vldr	d7, [pc, #364]	@ 80043d8 <main+0x1ca8>
 800426e:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 80043e0 <main+0x1cb0>
 8004272:	ed9f 5b55 	vldr	d5, [pc, #340]	@ 80043c8 <main+0x1c98>
 8004276:	ed9f 4b54 	vldr	d4, [pc, #336]	@ 80043c8 <main+0x1c98>
 800427a:	ed9f 3b59 	vldr	d3, [pc, #356]	@ 80043e0 <main+0x1cb0>
 800427e:	f002 fb3f 	bl	8006900 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 8004282:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	@ 0x7e0
 8004286:	2b00      	cmp	r3, #0
 8004288:	dd03      	ble.n	8004292 <main+0x1b62>
 800428a:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	@ 0x7e0
 800428e:	2b0a      	cmp	r3, #10
 8004290:	dd09      	ble.n	80042a6 <main+0x1b76>
 8004292:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 8004296:	2b00      	cmp	r3, #0
 8004298:	f340 80e0 	ble.w	800445c <main+0x1d2c>
 800429c:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	@ 0x7dc
 80042a0:	2b0a      	cmp	r3, #10
 80042a2:	f300 80db 	bgt.w	800445c <main+0x1d2c>
		  {
			  setMotorSpeed(1, -2000);
 80042a6:	ed9f 0b58 	vldr	d0, [pc, #352]	@ 8004408 <main+0x1cd8>
 80042aa:	2001      	movs	r0, #1
 80042ac:	f7fc fed6 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2000);
 80042b0:	ed9f 0b55 	vldr	d0, [pc, #340]	@ 8004408 <main+0x1cd8>
 80042b4:	2002      	movs	r0, #2
 80042b6:	f7fc fed1 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -2800);
 80042ba:	ed9f 0b55 	vldr	d0, [pc, #340]	@ 8004410 <main+0x1ce0>
 80042be:	2007      	movs	r0, #7
 80042c0:	f7fc fecc 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 80042c4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80042c8:	f003 fbec 	bl	8007aa4 <HAL_Delay>
			  mode = TES_AREA3_1;
 80042cc:	4b55      	ldr	r3, [pc, #340]	@ (8004424 <main+0x1cf4>)
 80042ce:	221b      	movs	r2, #27
 80042d0:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80042d2:	e0c3      	b.n	800445c <main+0x1d2c>

	  case TES_KIRI:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80042d4:	2201      	movs	r2, #1
 80042d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80042da:	4851      	ldr	r0, [pc, #324]	@ (8004420 <main+0x1cf0>)
 80042dc:	f003 ff5e 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80042e0:	2200      	movs	r2, #0
 80042e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042e6:	484e      	ldr	r0, [pc, #312]	@ (8004420 <main+0x1cf0>)
 80042e8:	f003 ff58 	bl	800819c <HAL_GPIO_WritePin>

		  PID_left(kiri, 1.5, 0.0, 0.0, 2.5, 0.7, 3000);
 80042ec:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 80042f0:	f5a3 63fb 	sub.w	r3, r3, #2008	@ 0x7d8
 80042f4:	ed93 0b00 	vldr	d0, [r3]
 80042f8:	ed93 1b02 	vldr	d1, [r3, #8]
 80042fc:	ed93 2b04 	vldr	d2, [r3, #16]
 8004300:	a33b      	add	r3, pc, #236	@ (adr r3, 80043f0 <main+0x1cc0>)
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	e9cd 2300 	strd	r2, r3, [sp]
 800430a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 80043d8 <main+0x1ca8>
 800430e:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 8004418 <main+0x1ce8>
 8004312:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 80043c8 <main+0x1c98>
 8004316:	ed9f 4b2c 	vldr	d4, [pc, #176]	@ 80043c8 <main+0x1c98>
 800431a:	ed9f 3b31 	vldr	d3, [pc, #196]	@ 80043e0 <main+0x1cb0>
 800431e:	f001 faef 	bl	8005900 <PID_left>
		  if(kiri_check)
 8004322:	f897 37c8 	ldrb.w	r3, [r7, #1992]	@ 0x7c8
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 809a 	beq.w	8004460 <main+0x1d30>
		  {
			  mode = VOID;
 800432c:	4b3d      	ldr	r3, [pc, #244]	@ (8004424 <main+0x1cf4>)
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8004332:	e095      	b.n	8004460 <main+0x1d30>

	  default:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8004334:	2200      	movs	r2, #0
 8004336:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800433a:	4839      	ldr	r0, [pc, #228]	@ (8004420 <main+0x1cf0>)
 800433c:	f003 ff2e 	bl	800819c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8004340:	2200      	movs	r2, #0
 8004342:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004346:	4836      	ldr	r0, [pc, #216]	@ (8004420 <main+0x1cf0>)
 8004348:	f003 ff28 	bl	800819c <HAL_GPIO_WritePin>

		  Inverse_Kinematics(0, 0, 0);
 800434c:	ed9f 2b1e 	vldr	d2, [pc, #120]	@ 80043c8 <main+0x1c98>
 8004350:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 80043c8 <main+0x1c98>
 8004354:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 80043c8 <main+0x1c98>
 8004358:	f7fc fef6 	bl	8001148 <Inverse_Kinematics>
		  setMotorSpeed(1, 0);
 800435c:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 80043c8 <main+0x1c98>
 8004360:	2001      	movs	r0, #1
 8004362:	f7fc fe7b 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8004366:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 80043c8 <main+0x1c98>
 800436a:	2002      	movs	r0, #2
 800436c:	f7fc fe76 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 8004370:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 80043c8 <main+0x1c98>
 8004374:	2007      	movs	r0, #7
 8004376:	f7fc fe71 	bl	800105c <setMotorSpeed>
		  break;
 800437a:	e072      	b.n	8004462 <main+0x1d32>
		  break;
 800437c:	bf00      	nop
 800437e:	e070      	b.n	8004462 <main+0x1d32>
		  break;
 8004380:	bf00      	nop
 8004382:	e06e      	b.n	8004462 <main+0x1d32>
		  break;
 8004384:	bf00      	nop
 8004386:	e06c      	b.n	8004462 <main+0x1d32>
		  break;
 8004388:	bf00      	nop
 800438a:	e06a      	b.n	8004462 <main+0x1d32>
		  break;
 800438c:	bf00      	nop
 800438e:	e068      	b.n	8004462 <main+0x1d32>
		  break;
 8004390:	bf00      	nop
 8004392:	e066      	b.n	8004462 <main+0x1d32>
		  break;
 8004394:	bf00      	nop
 8004396:	e064      	b.n	8004462 <main+0x1d32>
		  break;
 8004398:	bf00      	nop
 800439a:	e062      	b.n	8004462 <main+0x1d32>
		  break;
 800439c:	bf00      	nop
 800439e:	e060      	b.n	8004462 <main+0x1d32>
		  break;
 80043a0:	bf00      	nop
 80043a2:	e05e      	b.n	8004462 <main+0x1d32>
		  break;
 80043a4:	bf00      	nop
 80043a6:	e05c      	b.n	8004462 <main+0x1d32>
		  break;
 80043a8:	bf00      	nop
 80043aa:	e05a      	b.n	8004462 <main+0x1d32>
		  break;
 80043ac:	bf00      	nop
 80043ae:	e058      	b.n	8004462 <main+0x1d32>
		  break;
 80043b0:	bf00      	nop
 80043b2:	e056      	b.n	8004462 <main+0x1d32>
		  break;
 80043b4:	bf00      	nop
 80043b6:	e054      	b.n	8004462 <main+0x1d32>
		  break;
 80043b8:	bf00      	nop
 80043ba:	e052      	b.n	8004462 <main+0x1d32>
		  break;
 80043bc:	bf00      	nop
 80043be:	e050      	b.n	8004462 <main+0x1d32>
		  break;
 80043c0:	bf00      	nop
 80043c2:	e04e      	b.n	8004462 <main+0x1d32>
 80043c4:	f3af 8000 	nop.w
	...
 80043d4:	40ab5800 	.word	0x40ab5800
 80043d8:	66666666 	.word	0x66666666
 80043dc:	3fe66666 	.word	0x3fe66666
 80043e0:	00000000 	.word	0x00000000
 80043e4:	3ff80000 	.word	0x3ff80000
 80043e8:	cccccccd 	.word	0xcccccccd
 80043ec:	3ffccccc 	.word	0x3ffccccc
 80043f0:	00000000 	.word	0x00000000
 80043f4:	40a77000 	.word	0x40a77000
 80043f8:	9999999a 	.word	0x9999999a
 80043fc:	3fe99999 	.word	0x3fe99999
 8004400:	00000000 	.word	0x00000000
 8004404:	40a38800 	.word	0x40a38800
 8004408:	00000000 	.word	0x00000000
 800440c:	c09f4000 	.word	0xc09f4000
 8004410:	00000000 	.word	0x00000000
 8004414:	c0a5e000 	.word	0xc0a5e000
 8004418:	00000000 	.word	0x00000000
 800441c:	40040000 	.word	0x40040000
 8004420:	40020c00 	.word	0x40020c00
 8004424:	20000610 	.word	0x20000610
 8004428:	20000600 	.word	0x20000600
 800442c:	2000057c 	.word	0x2000057c
		  break;
 8004430:	bf00      	nop
 8004432:	e016      	b.n	8004462 <main+0x1d32>
		  break;
 8004434:	bf00      	nop
 8004436:	e014      	b.n	8004462 <main+0x1d32>
		  break;
 8004438:	bf00      	nop
 800443a:	e012      	b.n	8004462 <main+0x1d32>
		  break;
 800443c:	bf00      	nop
 800443e:	e010      	b.n	8004462 <main+0x1d32>
		  break;
 8004440:	bf00      	nop
 8004442:	e00e      	b.n	8004462 <main+0x1d32>
		  break;
 8004444:	bf00      	nop
 8004446:	e00c      	b.n	8004462 <main+0x1d32>
		  break;
 8004448:	bf00      	nop
 800444a:	e00a      	b.n	8004462 <main+0x1d32>
		  break;
 800444c:	bf00      	nop
 800444e:	e008      	b.n	8004462 <main+0x1d32>
		  break;
 8004450:	bf00      	nop
 8004452:	e006      	b.n	8004462 <main+0x1d32>
		  break;
 8004454:	bf00      	nop
 8004456:	e004      	b.n	8004462 <main+0x1d32>
		  break;
 8004458:	bf00      	nop
 800445a:	e002      	b.n	8004462 <main+0x1d32>
		  break;
 800445c:	bf00      	nop
 800445e:	e000      	b.n	8004462 <main+0x1d32>
		  break;
 8004460:	bf00      	nop
	  }
	  lcd_clear();
 8004462:	f7fd ffcd 	bl	8002400 <lcd_clear>
  {
 8004466:	f7fe bc1c 	b.w	8002ca2 <main+0x572>
 800446a:	bf00      	nop

0800446c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b094      	sub	sp, #80	@ 0x50
 8004470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004472:	f107 0320 	add.w	r3, r7, #32
 8004476:	2230      	movs	r2, #48	@ 0x30
 8004478:	2100      	movs	r1, #0
 800447a:	4618      	mov	r0, r3
 800447c:	f008 fe05 	bl	800d08a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004480:	f107 030c 	add.w	r3, r7, #12
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004490:	2300      	movs	r3, #0
 8004492:	60bb      	str	r3, [r7, #8]
 8004494:	4b28      	ldr	r3, [pc, #160]	@ (8004538 <SystemClock_Config+0xcc>)
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	4a27      	ldr	r2, [pc, #156]	@ (8004538 <SystemClock_Config+0xcc>)
 800449a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800449e:	6413      	str	r3, [r2, #64]	@ 0x40
 80044a0:	4b25      	ldr	r3, [pc, #148]	@ (8004538 <SystemClock_Config+0xcc>)
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044ac:	2300      	movs	r3, #0
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	4b22      	ldr	r3, [pc, #136]	@ (800453c <SystemClock_Config+0xd0>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a21      	ldr	r2, [pc, #132]	@ (800453c <SystemClock_Config+0xd0>)
 80044b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	4b1f      	ldr	r3, [pc, #124]	@ (800453c <SystemClock_Config+0xd0>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044c8:	2301      	movs	r3, #1
 80044ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80044d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044d2:	2302      	movs	r3, #2
 80044d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80044da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80044dc:	2308      	movs	r3, #8
 80044de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80044e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80044e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044e6:	2302      	movs	r3, #2
 80044e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80044ea:	2307      	movs	r3, #7
 80044ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044ee:	f107 0320 	add.w	r3, r7, #32
 80044f2:	4618      	mov	r0, r3
 80044f4:	f004 fb22 	bl	8008b3c <HAL_RCC_OscConfig>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80044fe:	f000 fdbb 	bl	8005078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004502:	230f      	movs	r3, #15
 8004504:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004506:	2302      	movs	r3, #2
 8004508:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800450e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004512:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004518:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800451a:	f107 030c 	add.w	r3, r7, #12
 800451e:	2105      	movs	r1, #5
 8004520:	4618      	mov	r0, r3
 8004522:	f004 fd83 	bl	800902c <HAL_RCC_ClockConfig>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800452c:	f000 fda4 	bl	8005078 <Error_Handler>
  }
}
 8004530:	bf00      	nop
 8004532:	3750      	adds	r7, #80	@ 0x50
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40023800 	.word	0x40023800
 800453c:	40007000 	.word	0x40007000

08004540 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004544:	4b12      	ldr	r3, [pc, #72]	@ (8004590 <MX_I2C2_Init+0x50>)
 8004546:	4a13      	ldr	r2, [pc, #76]	@ (8004594 <MX_I2C2_Init+0x54>)
 8004548:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800454a:	4b11      	ldr	r3, [pc, #68]	@ (8004590 <MX_I2C2_Init+0x50>)
 800454c:	4a12      	ldr	r2, [pc, #72]	@ (8004598 <MX_I2C2_Init+0x58>)
 800454e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004550:	4b0f      	ldr	r3, [pc, #60]	@ (8004590 <MX_I2C2_Init+0x50>)
 8004552:	2200      	movs	r2, #0
 8004554:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004556:	4b0e      	ldr	r3, [pc, #56]	@ (8004590 <MX_I2C2_Init+0x50>)
 8004558:	2200      	movs	r2, #0
 800455a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800455c:	4b0c      	ldr	r3, [pc, #48]	@ (8004590 <MX_I2C2_Init+0x50>)
 800455e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004562:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004564:	4b0a      	ldr	r3, [pc, #40]	@ (8004590 <MX_I2C2_Init+0x50>)
 8004566:	2200      	movs	r2, #0
 8004568:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800456a:	4b09      	ldr	r3, [pc, #36]	@ (8004590 <MX_I2C2_Init+0x50>)
 800456c:	2200      	movs	r2, #0
 800456e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004570:	4b07      	ldr	r3, [pc, #28]	@ (8004590 <MX_I2C2_Init+0x50>)
 8004572:	2200      	movs	r2, #0
 8004574:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004576:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <MX_I2C2_Init+0x50>)
 8004578:	2200      	movs	r2, #0
 800457a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800457c:	4804      	ldr	r0, [pc, #16]	@ (8004590 <MX_I2C2_Init+0x50>)
 800457e:	f003 fe3f 	bl	8008200 <HAL_I2C_Init>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004588:	f000 fd76 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800458c:	bf00      	nop
 800458e:	bd80      	pop	{r7, pc}
 8004590:	200002cc 	.word	0x200002cc
 8004594:	40005800 	.word	0x40005800
 8004598:	000186a0 	.word	0x000186a0

0800459c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b096      	sub	sp, #88	@ 0x58
 80045a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
 80045ac:	609a      	str	r2, [r3, #8]
 80045ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	605a      	str	r2, [r3, #4]
 80045c4:	609a      	str	r2, [r3, #8]
 80045c6:	60da      	str	r2, [r3, #12]
 80045c8:	611a      	str	r2, [r3, #16]
 80045ca:	615a      	str	r2, [r3, #20]
 80045cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80045ce:	1d3b      	adds	r3, r7, #4
 80045d0:	2220      	movs	r2, #32
 80045d2:	2100      	movs	r1, #0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f008 fd58 	bl	800d08a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80045da:	4b50      	ldr	r3, [pc, #320]	@ (800471c <MX_TIM1_Init+0x180>)
 80045dc:	4a50      	ldr	r2, [pc, #320]	@ (8004720 <MX_TIM1_Init+0x184>)
 80045de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 80045e0:	4b4e      	ldr	r3, [pc, #312]	@ (800471c <MX_TIM1_Init+0x180>)
 80045e2:	2214      	movs	r2, #20
 80045e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045e6:	4b4d      	ldr	r3, [pc, #308]	@ (800471c <MX_TIM1_Init+0x180>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000-1;
 80045ec:	4b4b      	ldr	r3, [pc, #300]	@ (800471c <MX_TIM1_Init+0x180>)
 80045ee:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80045f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045f4:	4b49      	ldr	r3, [pc, #292]	@ (800471c <MX_TIM1_Init+0x180>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80045fa:	4b48      	ldr	r3, [pc, #288]	@ (800471c <MX_TIM1_Init+0x180>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004600:	4b46      	ldr	r3, [pc, #280]	@ (800471c <MX_TIM1_Init+0x180>)
 8004602:	2200      	movs	r2, #0
 8004604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004606:	4845      	ldr	r0, [pc, #276]	@ (800471c <MX_TIM1_Init+0x180>)
 8004608:	f004 ff30 	bl	800946c <HAL_TIM_Base_Init>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004612:	f000 fd31 	bl	8005078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800461a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800461c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004620:	4619      	mov	r1, r3
 8004622:	483e      	ldr	r0, [pc, #248]	@ (800471c <MX_TIM1_Init+0x180>)
 8004624:	f005 fa92 	bl	8009b4c <HAL_TIM_ConfigClockSource>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800462e:	f000 fd23 	bl	8005078 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004632:	483a      	ldr	r0, [pc, #232]	@ (800471c <MX_TIM1_Init+0x180>)
 8004634:	f004 ff69 	bl	800950a <HAL_TIM_PWM_Init>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800463e:	f000 fd1b 	bl	8005078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004642:	2300      	movs	r3, #0
 8004644:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004646:	2300      	movs	r3, #0
 8004648:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800464a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800464e:	4619      	mov	r1, r3
 8004650:	4832      	ldr	r0, [pc, #200]	@ (800471c <MX_TIM1_Init+0x180>)
 8004652:	f005 fe91 	bl	800a378 <HAL_TIMEx_MasterConfigSynchronization>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800465c:	f000 fd0c 	bl	8005078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004660:	2360      	movs	r3, #96	@ 0x60
 8004662:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004668:	2300      	movs	r3, #0
 800466a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800466c:	2300      	movs	r3, #0
 800466e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004670:	2300      	movs	r3, #0
 8004672:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004674:	2300      	movs	r3, #0
 8004676:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004678:	2300      	movs	r3, #0
 800467a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800467c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004680:	2200      	movs	r2, #0
 8004682:	4619      	mov	r1, r3
 8004684:	4825      	ldr	r0, [pc, #148]	@ (800471c <MX_TIM1_Init+0x180>)
 8004686:	f005 f99f 	bl	80099c8 <HAL_TIM_PWM_ConfigChannel>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004690:	f000 fcf2 	bl	8005078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004698:	2204      	movs	r2, #4
 800469a:	4619      	mov	r1, r3
 800469c:	481f      	ldr	r0, [pc, #124]	@ (800471c <MX_TIM1_Init+0x180>)
 800469e:	f005 f993 	bl	80099c8 <HAL_TIM_PWM_ConfigChannel>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80046a8:	f000 fce6 	bl	8005078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80046ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046b0:	2208      	movs	r2, #8
 80046b2:	4619      	mov	r1, r3
 80046b4:	4819      	ldr	r0, [pc, #100]	@ (800471c <MX_TIM1_Init+0x180>)
 80046b6:	f005 f987 	bl	80099c8 <HAL_TIM_PWM_ConfigChannel>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80046c0:	f000 fcda 	bl	8005078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80046c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046c8:	220c      	movs	r2, #12
 80046ca:	4619      	mov	r1, r3
 80046cc:	4813      	ldr	r0, [pc, #76]	@ (800471c <MX_TIM1_Init+0x180>)
 80046ce:	f005 f97b 	bl	80099c8 <HAL_TIM_PWM_ConfigChannel>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80046d8:	f000 fcce 	bl	8005078 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80046dc:	2300      	movs	r3, #0
 80046de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80046f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80046fa:	1d3b      	adds	r3, r7, #4
 80046fc:	4619      	mov	r1, r3
 80046fe:	4807      	ldr	r0, [pc, #28]	@ (800471c <MX_TIM1_Init+0x180>)
 8004700:	f005 feb6 	bl	800a470 <HAL_TIMEx_ConfigBreakDeadTime>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800470a:	f000 fcb5 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800470e:	4803      	ldr	r0, [pc, #12]	@ (800471c <MX_TIM1_Init+0x180>)
 8004710:	f002 fe54 	bl	80073bc <HAL_TIM_MspPostInit>

}
 8004714:	bf00      	nop
 8004716:	3758      	adds	r7, #88	@ 0x58
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000320 	.word	0x20000320
 8004720:	40010000 	.word	0x40010000

08004724 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08e      	sub	sp, #56	@ 0x38
 8004728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800472a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	605a      	str	r2, [r3, #4]
 8004734:	609a      	str	r2, [r3, #8]
 8004736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004738:	f107 0320 	add.w	r3, r7, #32
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004742:	1d3b      	adds	r3, r7, #4
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	605a      	str	r2, [r3, #4]
 800474a:	609a      	str	r2, [r3, #8]
 800474c:	60da      	str	r2, [r3, #12]
 800474e:	611a      	str	r2, [r3, #16]
 8004750:	615a      	str	r2, [r3, #20]
 8004752:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004754:	4b33      	ldr	r3, [pc, #204]	@ (8004824 <MX_TIM2_Init+0x100>)
 8004756:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800475a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 800475c:	4b31      	ldr	r3, [pc, #196]	@ (8004824 <MX_TIM2_Init+0x100>)
 800475e:	f240 628f 	movw	r2, #1679	@ 0x68f
 8004762:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004764:	4b2f      	ldr	r3, [pc, #188]	@ (8004824 <MX_TIM2_Init+0x100>)
 8004766:	2200      	movs	r2, #0
 8004768:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800476a:	4b2e      	ldr	r3, [pc, #184]	@ (8004824 <MX_TIM2_Init+0x100>)
 800476c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004770:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004772:	4b2c      	ldr	r3, [pc, #176]	@ (8004824 <MX_TIM2_Init+0x100>)
 8004774:	2200      	movs	r2, #0
 8004776:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004778:	4b2a      	ldr	r3, [pc, #168]	@ (8004824 <MX_TIM2_Init+0x100>)
 800477a:	2200      	movs	r2, #0
 800477c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800477e:	4829      	ldr	r0, [pc, #164]	@ (8004824 <MX_TIM2_Init+0x100>)
 8004780:	f004 fe74 	bl	800946c <HAL_TIM_Base_Init>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800478a:	f000 fc75 	bl	8005078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800478e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004792:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004794:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004798:	4619      	mov	r1, r3
 800479a:	4822      	ldr	r0, [pc, #136]	@ (8004824 <MX_TIM2_Init+0x100>)
 800479c:	f005 f9d6 	bl	8009b4c <HAL_TIM_ConfigClockSource>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80047a6:	f000 fc67 	bl	8005078 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80047aa:	481e      	ldr	r0, [pc, #120]	@ (8004824 <MX_TIM2_Init+0x100>)
 80047ac:	f004 fead 	bl	800950a <HAL_TIM_PWM_Init>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80047b6:	f000 fc5f 	bl	8005078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047ba:	2300      	movs	r3, #0
 80047bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047be:	2300      	movs	r3, #0
 80047c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80047c2:	f107 0320 	add.w	r3, r7, #32
 80047c6:	4619      	mov	r1, r3
 80047c8:	4816      	ldr	r0, [pc, #88]	@ (8004824 <MX_TIM2_Init+0x100>)
 80047ca:	f005 fdd5 	bl	800a378 <HAL_TIMEx_MasterConfigSynchronization>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80047d4:	f000 fc50 	bl	8005078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047d8:	2360      	movs	r3, #96	@ 0x60
 80047da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80047dc:	2300      	movs	r3, #0
 80047de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80047e8:	1d3b      	adds	r3, r7, #4
 80047ea:	2208      	movs	r2, #8
 80047ec:	4619      	mov	r1, r3
 80047ee:	480d      	ldr	r0, [pc, #52]	@ (8004824 <MX_TIM2_Init+0x100>)
 80047f0:	f005 f8ea 	bl	80099c8 <HAL_TIM_PWM_ConfigChannel>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80047fa:	f000 fc3d 	bl	8005078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80047fe:	1d3b      	adds	r3, r7, #4
 8004800:	220c      	movs	r2, #12
 8004802:	4619      	mov	r1, r3
 8004804:	4807      	ldr	r0, [pc, #28]	@ (8004824 <MX_TIM2_Init+0x100>)
 8004806:	f005 f8df 	bl	80099c8 <HAL_TIM_PWM_ConfigChannel>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8004810:	f000 fc32 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004814:	4803      	ldr	r0, [pc, #12]	@ (8004824 <MX_TIM2_Init+0x100>)
 8004816:	f002 fdd1 	bl	80073bc <HAL_TIM_MspPostInit>

}
 800481a:	bf00      	nop
 800481c:	3738      	adds	r7, #56	@ 0x38
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000368 	.word	0x20000368

08004828 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b096      	sub	sp, #88	@ 0x58
 800482c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800482e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	605a      	str	r2, [r3, #4]
 8004838:	609a      	str	r2, [r3, #8]
 800483a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800483c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	605a      	str	r2, [r3, #4]
 8004850:	609a      	str	r2, [r3, #8]
 8004852:	60da      	str	r2, [r3, #12]
 8004854:	611a      	str	r2, [r3, #16]
 8004856:	615a      	str	r2, [r3, #20]
 8004858:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800485a:	1d3b      	adds	r3, r7, #4
 800485c:	2220      	movs	r2, #32
 800485e:	2100      	movs	r1, #0
 8004860:	4618      	mov	r0, r3
 8004862:	f008 fc12 	bl	800d08a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004866:	4b50      	ldr	r3, [pc, #320]	@ (80049a8 <MX_TIM8_Init+0x180>)
 8004868:	4a50      	ldr	r2, [pc, #320]	@ (80049ac <MX_TIM8_Init+0x184>)
 800486a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 20;
 800486c:	4b4e      	ldr	r3, [pc, #312]	@ (80049a8 <MX_TIM8_Init+0x180>)
 800486e:	2214      	movs	r2, #20
 8004870:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004872:	4b4d      	ldr	r3, [pc, #308]	@ (80049a8 <MX_TIM8_Init+0x180>)
 8004874:	2200      	movs	r2, #0
 8004876:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000-1;
 8004878:	4b4b      	ldr	r3, [pc, #300]	@ (80049a8 <MX_TIM8_Init+0x180>)
 800487a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800487e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004880:	4b49      	ldr	r3, [pc, #292]	@ (80049a8 <MX_TIM8_Init+0x180>)
 8004882:	2200      	movs	r2, #0
 8004884:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004886:	4b48      	ldr	r3, [pc, #288]	@ (80049a8 <MX_TIM8_Init+0x180>)
 8004888:	2200      	movs	r2, #0
 800488a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800488c:	4b46      	ldr	r3, [pc, #280]	@ (80049a8 <MX_TIM8_Init+0x180>)
 800488e:	2200      	movs	r2, #0
 8004890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004892:	4845      	ldr	r0, [pc, #276]	@ (80049a8 <MX_TIM8_Init+0x180>)
 8004894:	f004 fdea 	bl	800946c <HAL_TIM_Base_Init>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800489e:	f000 fbeb 	bl	8005078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80048a8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80048ac:	4619      	mov	r1, r3
 80048ae:	483e      	ldr	r0, [pc, #248]	@ (80049a8 <MX_TIM8_Init+0x180>)
 80048b0:	f005 f94c 	bl	8009b4c <HAL_TIM_ConfigClockSource>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80048ba:	f000 fbdd 	bl	8005078 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80048be:	483a      	ldr	r0, [pc, #232]	@ (80049a8 <MX_TIM8_Init+0x180>)
 80048c0:	f004 fe23 	bl	800950a <HAL_TIM_PWM_Init>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80048ca:	f000 fbd5 	bl	8005078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048ce:	2300      	movs	r3, #0
 80048d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048d2:	2300      	movs	r3, #0
 80048d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80048d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80048da:	4619      	mov	r1, r3
 80048dc:	4832      	ldr	r0, [pc, #200]	@ (80049a8 <MX_TIM8_Init+0x180>)
 80048de:	f005 fd4b 	bl	800a378 <HAL_TIMEx_MasterConfigSynchronization>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80048e8:	f000 fbc6 	bl	8005078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048ec:	2360      	movs	r3, #96	@ 0x60
 80048ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80048f0:	2300      	movs	r3, #0
 80048f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048f4:	2300      	movs	r3, #0
 80048f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80048f8:	2300      	movs	r3, #0
 80048fa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004900:	2300      	movs	r3, #0
 8004902:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004904:	2300      	movs	r3, #0
 8004906:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800490c:	2200      	movs	r2, #0
 800490e:	4619      	mov	r1, r3
 8004910:	4825      	ldr	r0, [pc, #148]	@ (80049a8 <MX_TIM8_Init+0x180>)
 8004912:	f005 f859 	bl	80099c8 <HAL_TIM_PWM_ConfigChannel>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800491c:	f000 fbac 	bl	8005078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004924:	2204      	movs	r2, #4
 8004926:	4619      	mov	r1, r3
 8004928:	481f      	ldr	r0, [pc, #124]	@ (80049a8 <MX_TIM8_Init+0x180>)
 800492a:	f005 f84d 	bl	80099c8 <HAL_TIM_PWM_ConfigChannel>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8004934:	f000 fba0 	bl	8005078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800493c:	2208      	movs	r2, #8
 800493e:	4619      	mov	r1, r3
 8004940:	4819      	ldr	r0, [pc, #100]	@ (80049a8 <MX_TIM8_Init+0x180>)
 8004942:	f005 f841 	bl	80099c8 <HAL_TIM_PWM_ConfigChannel>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800494c:	f000 fb94 	bl	8005078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004954:	220c      	movs	r2, #12
 8004956:	4619      	mov	r1, r3
 8004958:	4813      	ldr	r0, [pc, #76]	@ (80049a8 <MX_TIM8_Init+0x180>)
 800495a:	f005 f835 	bl	80099c8 <HAL_TIM_PWM_ConfigChannel>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8004964:	f000 fb88 	bl	8005078 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004968:	2300      	movs	r3, #0
 800496a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800496c:	2300      	movs	r3, #0
 800496e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800497c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004980:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004982:	2300      	movs	r3, #0
 8004984:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004986:	1d3b      	adds	r3, r7, #4
 8004988:	4619      	mov	r1, r3
 800498a:	4807      	ldr	r0, [pc, #28]	@ (80049a8 <MX_TIM8_Init+0x180>)
 800498c:	f005 fd70 	bl	800a470 <HAL_TIMEx_ConfigBreakDeadTime>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8004996:	f000 fb6f 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800499a:	4803      	ldr	r0, [pc, #12]	@ (80049a8 <MX_TIM8_Init+0x180>)
 800499c:	f002 fd0e 	bl	80073bc <HAL_TIM_MspPostInit>

}
 80049a0:	bf00      	nop
 80049a2:	3758      	adds	r7, #88	@ 0x58
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	200003b0 	.word	0x200003b0
 80049ac:	40010400 	.word	0x40010400

080049b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80049b4:	4b11      	ldr	r3, [pc, #68]	@ (80049fc <MX_USART1_UART_Init+0x4c>)
 80049b6:	4a12      	ldr	r2, [pc, #72]	@ (8004a00 <MX_USART1_UART_Init+0x50>)
 80049b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80049ba:	4b10      	ldr	r3, [pc, #64]	@ (80049fc <MX_USART1_UART_Init+0x4c>)
 80049bc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80049c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049c2:	4b0e      	ldr	r3, [pc, #56]	@ (80049fc <MX_USART1_UART_Init+0x4c>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80049c8:	4b0c      	ldr	r3, [pc, #48]	@ (80049fc <MX_USART1_UART_Init+0x4c>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80049ce:	4b0b      	ldr	r3, [pc, #44]	@ (80049fc <MX_USART1_UART_Init+0x4c>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80049d4:	4b09      	ldr	r3, [pc, #36]	@ (80049fc <MX_USART1_UART_Init+0x4c>)
 80049d6:	220c      	movs	r2, #12
 80049d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049da:	4b08      	ldr	r3, [pc, #32]	@ (80049fc <MX_USART1_UART_Init+0x4c>)
 80049dc:	2200      	movs	r2, #0
 80049de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049e0:	4b06      	ldr	r3, [pc, #24]	@ (80049fc <MX_USART1_UART_Init+0x4c>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80049e6:	4805      	ldr	r0, [pc, #20]	@ (80049fc <MX_USART1_UART_Init+0x4c>)
 80049e8:	f005 fda8 	bl	800a53c <HAL_UART_Init>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80049f2:	f000 fb41 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80049f6:	bf00      	nop
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	200003f8 	.word	0x200003f8
 8004a00:	40011000 	.word	0x40011000

08004a04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a08:	4b11      	ldr	r3, [pc, #68]	@ (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a0a:	4a12      	ldr	r2, [pc, #72]	@ (8004a54 <MX_USART2_UART_Init+0x50>)
 8004a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004a0e:	4b10      	ldr	r3, [pc, #64]	@ (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a16:	4b0e      	ldr	r3, [pc, #56]	@ (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a22:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a28:	4b09      	ldr	r3, [pc, #36]	@ (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a2a:	220c      	movs	r2, #12
 8004a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a2e:	4b08      	ldr	r3, [pc, #32]	@ (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a34:	4b06      	ldr	r3, [pc, #24]	@ (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a3a:	4805      	ldr	r0, [pc, #20]	@ (8004a50 <MX_USART2_UART_Init+0x4c>)
 8004a3c:	f005 fd7e 	bl	800a53c <HAL_UART_Init>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004a46:	f000 fb17 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000440 	.word	0x20000440
 8004a54:	40004400 	.word	0x40004400

08004a58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004a5c:	4b11      	ldr	r3, [pc, #68]	@ (8004aa4 <MX_USART3_UART_Init+0x4c>)
 8004a5e:	4a12      	ldr	r2, [pc, #72]	@ (8004aa8 <MX_USART3_UART_Init+0x50>)
 8004a60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8004a62:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <MX_USART3_UART_Init+0x4c>)
 8004a64:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8004a68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa4 <MX_USART3_UART_Init+0x4c>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a70:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa4 <MX_USART3_UART_Init+0x4c>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004a76:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa4 <MX_USART3_UART_Init+0x4c>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004a7c:	4b09      	ldr	r3, [pc, #36]	@ (8004aa4 <MX_USART3_UART_Init+0x4c>)
 8004a7e:	220c      	movs	r2, #12
 8004a80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a82:	4b08      	ldr	r3, [pc, #32]	@ (8004aa4 <MX_USART3_UART_Init+0x4c>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a88:	4b06      	ldr	r3, [pc, #24]	@ (8004aa4 <MX_USART3_UART_Init+0x4c>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a8e:	4805      	ldr	r0, [pc, #20]	@ (8004aa4 <MX_USART3_UART_Init+0x4c>)
 8004a90:	f005 fd54 	bl	800a53c <HAL_UART_Init>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004a9a:	f000 faed 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000488 	.word	0x20000488
 8004aa8:	40004800 	.word	0x40004800

08004aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08c      	sub	sp, #48	@ 0x30
 8004ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab2:	f107 031c 	add.w	r3, r7, #28
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	605a      	str	r2, [r3, #4]
 8004abc:	609a      	str	r2, [r3, #8]
 8004abe:	60da      	str	r2, [r3, #12]
 8004ac0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	4bbd      	ldr	r3, [pc, #756]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aca:	4abc      	ldr	r2, [pc, #752]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004acc:	f043 0310 	orr.w	r3, r3, #16
 8004ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ad2:	4bba      	ldr	r3, [pc, #744]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	f003 0310 	and.w	r3, r3, #16
 8004ada:	61bb      	str	r3, [r7, #24]
 8004adc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	4bb6      	ldr	r3, [pc, #728]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae6:	4ab5      	ldr	r2, [pc, #724]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004ae8:	f043 0304 	orr.w	r3, r3, #4
 8004aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aee:	4bb3      	ldr	r3, [pc, #716]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	4baf      	ldr	r3, [pc, #700]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b02:	4aae      	ldr	r2, [pc, #696]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b0a:	4bac      	ldr	r3, [pc, #688]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	4ba8      	ldr	r3, [pc, #672]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1e:	4aa7      	ldr	r2, [pc, #668]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b26:	4ba5      	ldr	r3, [pc, #660]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b32:	2300      	movs	r3, #0
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	4ba1      	ldr	r3, [pc, #644]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3a:	4aa0      	ldr	r2, [pc, #640]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004b3c:	f043 0302 	orr.w	r3, r3, #2
 8004b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b42:	4b9e      	ldr	r3, [pc, #632]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	4b9a      	ldr	r3, [pc, #616]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b56:	4a99      	ldr	r2, [pc, #612]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004b58:	f043 0308 	orr.w	r3, r3, #8
 8004b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b5e:	4b97      	ldr	r3, [pc, #604]	@ (8004dbc <MX_GPIO_Init+0x310>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	607b      	str	r3, [r7, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	217f      	movs	r1, #127	@ 0x7f
 8004b6e:	4894      	ldr	r0, [pc, #592]	@ (8004dc0 <MX_GPIO_Init+0x314>)
 8004b70:	f003 fb14 	bl	800819c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8004b74:	2200      	movs	r2, #0
 8004b76:	f24f 0130 	movw	r1, #61488	@ 0xf030
 8004b7a:	4892      	ldr	r0, [pc, #584]	@ (8004dc4 <MX_GPIO_Init+0x318>)
 8004b7c:	f003 fb0e 	bl	800819c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8004b80:	2200      	movs	r2, #0
 8004b82:	2103      	movs	r1, #3
 8004b84:	4890      	ldr	r0, [pc, #576]	@ (8004dc8 <MX_GPIO_Init+0x31c>)
 8004b86:	f003 fb09 	bl	800819c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f24c 011f 	movw	r1, #49183	@ 0xc01f
 8004b90:	488e      	ldr	r0, [pc, #568]	@ (8004dcc <MX_GPIO_Init+0x320>)
 8004b92:	f003 fb03 	bl	800819c <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8004b96:	237f      	movs	r3, #127	@ 0x7f
 8004b98:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004b9a:	2311      	movs	r3, #17
 8004b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ba6:	f107 031c 	add.w	r3, r7, #28
 8004baa:	4619      	mov	r1, r3
 8004bac:	4884      	ldr	r0, [pc, #528]	@ (8004dc0 <MX_GPIO_Init+0x314>)
 8004bae:	f003 f941 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004bb2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004bb8:	2311      	movs	r3, #17
 8004bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bc4:	f107 031c 	add.w	r3, r7, #28
 8004bc8:	4619      	mov	r1, r3
 8004bca:	487e      	ldr	r0, [pc, #504]	@ (8004dc4 <MX_GPIO_Init+0x318>)
 8004bcc:	f003 f932 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : EA_2_Pin EinA_1_Pin */
  GPIO_InitStruct.Pin = EA_2_Pin|EinA_1_Pin;
 8004bd0:	2309      	movs	r3, #9
 8004bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bdc:	f107 031c 	add.w	r3, r7, #28
 8004be0:	4619      	mov	r1, r3
 8004be2:	4878      	ldr	r0, [pc, #480]	@ (8004dc4 <MX_GPIO_Init+0x318>)
 8004be4:	f003 f926 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_2_Pin EinB_1_Pin */
  GPIO_InitStruct.Pin = EB_2_Pin|EinB_1_Pin;
 8004be8:	2306      	movs	r3, #6
 8004bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004bec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bf6:	f107 031c 	add.w	r3, r7, #28
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4871      	ldr	r0, [pc, #452]	@ (8004dc4 <MX_GPIO_Init+0x318>)
 8004bfe:	f003 f919 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinB_2_Pin EinB_4_Pin */
  GPIO_InitStruct.Pin = EinB_2_Pin|EinB_4_Pin;
 8004c02:	f244 0301 	movw	r3, #16385	@ 0x4001
 8004c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c12:	f107 031c 	add.w	r3, r7, #28
 8004c16:	4619      	mov	r1, r3
 8004c18:	486d      	ldr	r0, [pc, #436]	@ (8004dd0 <MX_GPIO_Init+0x324>)
 8004c1a:	f003 f90b 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinA_2_Pin EinA_4_Pin EA_1_Pin */
  GPIO_InitStruct.Pin = EinA_2_Pin|EinA_4_Pin|EA_1_Pin;
 8004c1e:	f248 4302 	movw	r3, #33794	@ 0x8402
 8004c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c24:	2300      	movs	r3, #0
 8004c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c2c:	f107 031c 	add.w	r3, r7, #28
 8004c30:	4619      	mov	r1, r3
 8004c32:	4867      	ldr	r0, [pc, #412]	@ (8004dd0 <MX_GPIO_Init+0x324>)
 8004c34:	f003 f8fe 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_1_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin;
 8004c38:	2340      	movs	r3, #64	@ 0x40
 8004c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004c3c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c42:	2301      	movs	r3, #1
 8004c44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_1_GPIO_Port, &GPIO_InitStruct);
 8004c46:	f107 031c 	add.w	r3, r7, #28
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4860      	ldr	r0, [pc, #384]	@ (8004dd0 <MX_GPIO_Init+0x324>)
 8004c4e:	f003 f8f1 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 8004c52:	f241 0330 	movw	r3, #4144	@ 0x1030
 8004c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004c58:	2311      	movs	r3, #17
 8004c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c60:	2303      	movs	r3, #3
 8004c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c64:	f107 031c 	add.w	r3, r7, #28
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4856      	ldr	r0, [pc, #344]	@ (8004dc4 <MX_GPIO_Init+0x318>)
 8004c6c:	f003 f8e2 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004c70:	2303      	movs	r3, #3
 8004c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004c74:	2311      	movs	r3, #17
 8004c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c80:	f107 031c 	add.w	r3, r7, #28
 8004c84:	4619      	mov	r1, r3
 8004c86:	4850      	ldr	r0, [pc, #320]	@ (8004dc8 <MX_GPIO_Init+0x31c>)
 8004c88:	f003 f8d4 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin|Button_3_Pin;
 8004c8c:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8004c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004c92:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c9c:	f107 031c 	add.w	r3, r7, #28
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4847      	ldr	r0, [pc, #284]	@ (8004dc0 <MX_GPIO_Init+0x314>)
 8004ca4:	f003 f8c6 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_4_Pin */
  GPIO_InitStruct.Pin = Button_4_Pin;
 8004ca8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004cae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_4_GPIO_Port, &GPIO_InitStruct);
 8004cb8:	f107 031c 	add.w	r3, r7, #28
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4842      	ldr	r0, [pc, #264]	@ (8004dc8 <MX_GPIO_Init+0x31c>)
 8004cc0:	f003 f8b8 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinA_3_Pin */
  GPIO_InitStruct.Pin = EinA_3_Pin;
 8004cc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinA_3_GPIO_Port, &GPIO_InitStruct);
 8004cd2:	f107 031c 	add.w	r3, r7, #28
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	483c      	ldr	r0, [pc, #240]	@ (8004dcc <MX_GPIO_Init+0x320>)
 8004cda:	f003 f8ab 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinB_3_Pin */
  GPIO_InitStruct.Pin = EinB_3_Pin;
 8004cde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ce4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cea:	2301      	movs	r3, #1
 8004cec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinB_3_GPIO_Port, &GPIO_InitStruct);
 8004cee:	f107 031c 	add.w	r3, r7, #28
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4835      	ldr	r0, [pc, #212]	@ (8004dcc <MX_GPIO_Init+0x320>)
 8004cf6:	f003 f89d 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004cfa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d00:	2301      	movs	r3, #1
 8004d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004d04:	2302      	movs	r3, #2
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d0c:	f107 031c 	add.w	r3, r7, #28
 8004d10:	4619      	mov	r1, r3
 8004d12:	482e      	ldr	r0, [pc, #184]	@ (8004dcc <MX_GPIO_Init+0x320>)
 8004d14:	f003 f88e 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004d18:	231f      	movs	r3, #31
 8004d1a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004d1c:	2311      	movs	r3, #17
 8004d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d24:	2303      	movs	r3, #3
 8004d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d28:	f107 031c 	add.w	r3, r7, #28
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4827      	ldr	r0, [pc, #156]	@ (8004dcc <MX_GPIO_Init+0x320>)
 8004d30:	f003 f880 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_1_Pin EB_3_Pin */
  GPIO_InitStruct.Pin = EB_1_Pin|EB_3_Pin;
 8004d34:	2328      	movs	r3, #40	@ 0x28
 8004d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d42:	f107 031c 	add.w	r3, r7, #28
 8004d46:	4619      	mov	r1, r3
 8004d48:	481f      	ldr	r0, [pc, #124]	@ (8004dc8 <MX_GPIO_Init+0x31c>)
 8004d4a:	f003 f873 	bl	8007e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : EA_3_Pin */
  GPIO_InitStruct.Pin = EA_3_Pin;
 8004d4e:	2310      	movs	r3, #16
 8004d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d52:	2300      	movs	r3, #0
 8004d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d56:	2301      	movs	r3, #1
 8004d58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EA_3_GPIO_Port, &GPIO_InitStruct);
 8004d5a:	f107 031c 	add.w	r3, r7, #28
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4819      	ldr	r0, [pc, #100]	@ (8004dc8 <MX_GPIO_Init+0x31c>)
 8004d62:	f003 f867 	bl	8007e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004d66:	2200      	movs	r2, #0
 8004d68:	2100      	movs	r1, #0
 8004d6a:	2006      	movs	r0, #6
 8004d6c:	f002 ff99 	bl	8007ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004d70:	2006      	movs	r0, #6
 8004d72:	f002 ffb2 	bl	8007cda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8004d76:	2200      	movs	r2, #0
 8004d78:	2100      	movs	r1, #0
 8004d7a:	2007      	movs	r0, #7
 8004d7c:	f002 ff91 	bl	8007ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004d80:	2007      	movs	r0, #7
 8004d82:	f002 ffaa 	bl	8007cda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004d86:	2200      	movs	r2, #0
 8004d88:	2100      	movs	r1, #0
 8004d8a:	2008      	movs	r0, #8
 8004d8c:	f002 ff89 	bl	8007ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004d90:	2008      	movs	r0, #8
 8004d92:	f002 ffa2 	bl	8007cda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8004d96:	2200      	movs	r2, #0
 8004d98:	2100      	movs	r1, #0
 8004d9a:	2009      	movs	r0, #9
 8004d9c:	f002 ff81 	bl	8007ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004da0:	2009      	movs	r0, #9
 8004da2:	f002 ff9a 	bl	8007cda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004da6:	2200      	movs	r2, #0
 8004da8:	2100      	movs	r1, #0
 8004daa:	2017      	movs	r0, #23
 8004dac:	f002 ff79 	bl	8007ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004db0:	2017      	movs	r0, #23
 8004db2:	f002 ff92 	bl	8007cda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004db6:	2200      	movs	r2, #0
 8004db8:	e00c      	b.n	8004dd4 <MX_GPIO_Init+0x328>
 8004dba:	bf00      	nop
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40020800 	.word	0x40020800
 8004dc8:	40020400 	.word	0x40020400
 8004dcc:	40020c00 	.word	0x40020c00
 8004dd0:	40020000 	.word	0x40020000
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	2028      	movs	r0, #40	@ 0x28
 8004dd8:	f002 ff63 	bl	8007ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004ddc:	2028      	movs	r0, #40	@ 0x28
 8004dde:	f002 ff7c 	bl	8007cda <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004de2:	bf00      	nop
 8004de4:	3730      	adds	r7, #48	@ 0x30
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop

08004dec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dec:	b590      	push	{r4, r7, lr}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a8b      	ldr	r2, [pc, #556]	@ (8005028 <HAL_UART_RxCpltCallback+0x23c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d15a      	bne.n	8004eb4 <HAL_UART_RxCpltCallback+0xc8>
	{
		if(receive[rxIndex] == '\r' || receive[rxIndex] == '\n')
 8004dfe:	4b8b      	ldr	r3, [pc, #556]	@ (800502c <HAL_UART_RxCpltCallback+0x240>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a8b      	ldr	r2, [pc, #556]	@ (8005030 <HAL_UART_RxCpltCallback+0x244>)
 8004e04:	5cd3      	ldrb	r3, [r2, r3]
 8004e06:	2b0d      	cmp	r3, #13
 8004e08:	d005      	beq.n	8004e16 <HAL_UART_RxCpltCallback+0x2a>
 8004e0a:	4b88      	ldr	r3, [pc, #544]	@ (800502c <HAL_UART_RxCpltCallback+0x240>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a88      	ldr	r2, [pc, #544]	@ (8005030 <HAL_UART_RxCpltCallback+0x244>)
 8004e10:	5cd3      	ldrb	r3, [r2, r3]
 8004e12:	2b0a      	cmp	r3, #10
 8004e14:	d139      	bne.n	8004e8a <HAL_UART_RxCpltCallback+0x9e>
		{
			receive[rxIndex] = '\0';
 8004e16:	4b85      	ldr	r3, [pc, #532]	@ (800502c <HAL_UART_RxCpltCallback+0x240>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a85      	ldr	r2, [pc, #532]	@ (8005030 <HAL_UART_RxCpltCallback+0x244>)
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receive, ",");
 8004e20:	4984      	ldr	r1, [pc, #528]	@ (8005034 <HAL_UART_RxCpltCallback+0x248>)
 8004e22:	4883      	ldr	r0, [pc, #524]	@ (8005030 <HAL_UART_RxCpltCallback+0x244>)
 8004e24:	f008 f94c 	bl	800d0c0 <strtok>
 8004e28:	6178      	str	r0, [r7, #20]
			dataIndex = 0;
 8004e2a:	4b83      	ldr	r3, [pc, #524]	@ (8005038 <HAL_UART_RxCpltCallback+0x24c>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8004e30:	e015      	b.n	8004e5e <HAL_UART_RxCpltCallback+0x72>
			{
				sensorData[dataIndex++] = atof(token);
 8004e32:	4b81      	ldr	r3, [pc, #516]	@ (8005038 <HAL_UART_RxCpltCallback+0x24c>)
 8004e34:	681c      	ldr	r4, [r3, #0]
 8004e36:	1c63      	adds	r3, r4, #1
 8004e38:	4a7f      	ldr	r2, [pc, #508]	@ (8005038 <HAL_UART_RxCpltCallback+0x24c>)
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	6978      	ldr	r0, [r7, #20]
 8004e3e:	f006 faf1 	bl	800b424 <atof>
 8004e42:	eeb0 7a40 	vmov.f32	s14, s0
 8004e46:	eef0 7a60 	vmov.f32	s15, s1
 8004e4a:	4a7c      	ldr	r2, [pc, #496]	@ (800503c <HAL_UART_RxCpltCallback+0x250>)
 8004e4c:	00e3      	lsls	r3, r4, #3
 8004e4e:	4413      	add	r3, r2
 8004e50:	ed83 7b00 	vstr	d7, [r3]
				token = strtok(NULL, ",");
 8004e54:	4977      	ldr	r1, [pc, #476]	@ (8005034 <HAL_UART_RxCpltCallback+0x248>)
 8004e56:	2000      	movs	r0, #0
 8004e58:	f008 f932 	bl	800d0c0 <strtok>
 8004e5c:	6178      	str	r0, [r7, #20]
			while(token != NULL)
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e6      	bne.n	8004e32 <HAL_UART_RxCpltCallback+0x46>
			}
			memset(receive, 0, sizeof(receive));
 8004e64:	2232      	movs	r2, #50	@ 0x32
 8004e66:	2100      	movs	r1, #0
 8004e68:	4871      	ldr	r0, [pc, #452]	@ (8005030 <HAL_UART_RxCpltCallback+0x244>)
 8004e6a:	f008 f90e 	bl	800d08a <memset>
			rxIndex = 0;
 8004e6e:	4b6f      	ldr	r3, [pc, #444]	@ (800502c <HAL_UART_RxCpltCallback+0x240>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart1, receive, 1) != HAL_OK)
 8004e74:	2201      	movs	r2, #1
 8004e76:	496e      	ldr	r1, [pc, #440]	@ (8005030 <HAL_UART_RxCpltCallback+0x244>)
 8004e78:	4871      	ldr	r0, [pc, #452]	@ (8005040 <HAL_UART_RxCpltCallback+0x254>)
 8004e7a:	f005 fbaf 	bl	800a5dc <HAL_UART_Receive_IT>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d016      	beq.n	8004eb2 <HAL_UART_RxCpltCallback+0xc6>
			{
				Error_Handler();
 8004e84:	f000 f8f8 	bl	8005078 <Error_Handler>
		{
 8004e88:	e013      	b.n	8004eb2 <HAL_UART_RxCpltCallback+0xc6>
			}
		}
		else
		{
			rxIndex++;
 8004e8a:	4b68      	ldr	r3, [pc, #416]	@ (800502c <HAL_UART_RxCpltCallback+0x240>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	4a66      	ldr	r2, [pc, #408]	@ (800502c <HAL_UART_RxCpltCallback+0x240>)
 8004e92:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart1, receive + rxIndex, 1) != HAL_OK)
 8004e94:	4b65      	ldr	r3, [pc, #404]	@ (800502c <HAL_UART_RxCpltCallback+0x240>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a65      	ldr	r2, [pc, #404]	@ (8005030 <HAL_UART_RxCpltCallback+0x244>)
 8004e9a:	4413      	add	r3, r2
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4867      	ldr	r0, [pc, #412]	@ (8005040 <HAL_UART_RxCpltCallback+0x254>)
 8004ea2:	f005 fb9b 	bl	800a5dc <HAL_UART_Receive_IT>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_UART_RxCpltCallback+0xc8>
			{
				Error_Handler();
 8004eac:	f000 f8e4 	bl	8005078 <Error_Handler>
 8004eb0:	e000      	b.n	8004eb4 <HAL_UART_RxCpltCallback+0xc8>
		{
 8004eb2:	bf00      	nop
			}
		}
	}
	if(huart->Instance == USART2)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a62      	ldr	r2, [pc, #392]	@ (8005044 <HAL_UART_RxCpltCallback+0x258>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d155      	bne.n	8004f6a <HAL_UART_RxCpltCallback+0x17e>
	{
		if(receiveCAM[indexCAM] == '\r' || receiveCAM[indexCAM] == '\n')
 8004ebe:	4b62      	ldr	r3, [pc, #392]	@ (8005048 <HAL_UART_RxCpltCallback+0x25c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a62      	ldr	r2, [pc, #392]	@ (800504c <HAL_UART_RxCpltCallback+0x260>)
 8004ec4:	5cd3      	ldrb	r3, [r2, r3]
 8004ec6:	2b0d      	cmp	r3, #13
 8004ec8:	d005      	beq.n	8004ed6 <HAL_UART_RxCpltCallback+0xea>
 8004eca:	4b5f      	ldr	r3, [pc, #380]	@ (8005048 <HAL_UART_RxCpltCallback+0x25c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a5f      	ldr	r2, [pc, #380]	@ (800504c <HAL_UART_RxCpltCallback+0x260>)
 8004ed0:	5cd3      	ldrb	r3, [r2, r3]
 8004ed2:	2b0a      	cmp	r3, #10
 8004ed4:	d134      	bne.n	8004f40 <HAL_UART_RxCpltCallback+0x154>
		{
			receiveCAM[indexCAM] = '\0';
 8004ed6:	4b5c      	ldr	r3, [pc, #368]	@ (8005048 <HAL_UART_RxCpltCallback+0x25c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a5c      	ldr	r2, [pc, #368]	@ (800504c <HAL_UART_RxCpltCallback+0x260>)
 8004edc:	2100      	movs	r1, #0
 8004ede:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveCAM, ",");
 8004ee0:	4954      	ldr	r1, [pc, #336]	@ (8005034 <HAL_UART_RxCpltCallback+0x248>)
 8004ee2:	485a      	ldr	r0, [pc, #360]	@ (800504c <HAL_UART_RxCpltCallback+0x260>)
 8004ee4:	f008 f8ec 	bl	800d0c0 <strtok>
 8004ee8:	6138      	str	r0, [r7, #16]
			dataindexCAM = 0;
 8004eea:	4b59      	ldr	r3, [pc, #356]	@ (8005050 <HAL_UART_RxCpltCallback+0x264>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8004ef0:	e010      	b.n	8004f14 <HAL_UART_RxCpltCallback+0x128>
			{
				camera[dataindexCAM++] = atoi(token);
 8004ef2:	4b57      	ldr	r3, [pc, #348]	@ (8005050 <HAL_UART_RxCpltCallback+0x264>)
 8004ef4:	681c      	ldr	r4, [r3, #0]
 8004ef6:	1c63      	adds	r3, r4, #1
 8004ef8:	4a55      	ldr	r2, [pc, #340]	@ (8005050 <HAL_UART_RxCpltCallback+0x264>)
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	6938      	ldr	r0, [r7, #16]
 8004efe:	f006 fa94 	bl	800b42a <atoi>
 8004f02:	4603      	mov	r3, r0
 8004f04:	4a53      	ldr	r2, [pc, #332]	@ (8005054 <HAL_UART_RxCpltCallback+0x268>)
 8004f06:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 8004f0a:	494a      	ldr	r1, [pc, #296]	@ (8005034 <HAL_UART_RxCpltCallback+0x248>)
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	f008 f8d7 	bl	800d0c0 <strtok>
 8004f12:	6138      	str	r0, [r7, #16]
			while(token != NULL)
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1eb      	bne.n	8004ef2 <HAL_UART_RxCpltCallback+0x106>
			}
			memset(receiveCAM, 0, sizeof(receiveCAM));
 8004f1a:	2232      	movs	r2, #50	@ 0x32
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	484b      	ldr	r0, [pc, #300]	@ (800504c <HAL_UART_RxCpltCallback+0x260>)
 8004f20:	f008 f8b3 	bl	800d08a <memset>
			indexCAM = 0;
 8004f24:	4b48      	ldr	r3, [pc, #288]	@ (8005048 <HAL_UART_RxCpltCallback+0x25c>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart2, receiveCAM, 1) != HAL_OK)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	4947      	ldr	r1, [pc, #284]	@ (800504c <HAL_UART_RxCpltCallback+0x260>)
 8004f2e:	484a      	ldr	r0, [pc, #296]	@ (8005058 <HAL_UART_RxCpltCallback+0x26c>)
 8004f30:	f005 fb54 	bl	800a5dc <HAL_UART_Receive_IT>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d016      	beq.n	8004f68 <HAL_UART_RxCpltCallback+0x17c>
			{
				Error_Handler();
 8004f3a:	f000 f89d 	bl	8005078 <Error_Handler>
		{
 8004f3e:	e013      	b.n	8004f68 <HAL_UART_RxCpltCallback+0x17c>
			}
		}
		else
		{
			indexCAM++;
 8004f40:	4b41      	ldr	r3, [pc, #260]	@ (8005048 <HAL_UART_RxCpltCallback+0x25c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3301      	adds	r3, #1
 8004f46:	4a40      	ldr	r2, [pc, #256]	@ (8005048 <HAL_UART_RxCpltCallback+0x25c>)
 8004f48:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart2, receiveCAM + indexCAM, 1) != HAL_OK)
 8004f4a:	4b3f      	ldr	r3, [pc, #252]	@ (8005048 <HAL_UART_RxCpltCallback+0x25c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a3f      	ldr	r2, [pc, #252]	@ (800504c <HAL_UART_RxCpltCallback+0x260>)
 8004f50:	4413      	add	r3, r2
 8004f52:	2201      	movs	r2, #1
 8004f54:	4619      	mov	r1, r3
 8004f56:	4840      	ldr	r0, [pc, #256]	@ (8005058 <HAL_UART_RxCpltCallback+0x26c>)
 8004f58:	f005 fb40 	bl	800a5dc <HAL_UART_Receive_IT>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_UART_RxCpltCallback+0x17e>
			{
				Error_Handler();
 8004f62:	f000 f889 	bl	8005078 <Error_Handler>
 8004f66:	e000      	b.n	8004f6a <HAL_UART_RxCpltCallback+0x17e>
		{
 8004f68:	bf00      	nop
			}
		}
	}
	if(huart->Instance == USART3)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a3b      	ldr	r2, [pc, #236]	@ (800505c <HAL_UART_RxCpltCallback+0x270>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d155      	bne.n	8005020 <HAL_UART_RxCpltCallback+0x234>
	{
		if(receiveMEGA[indexMEGA] == '\r' || receiveMEGA[indexMEGA] == '\n')
 8004f74:	4b3a      	ldr	r3, [pc, #232]	@ (8005060 <HAL_UART_RxCpltCallback+0x274>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a3a      	ldr	r2, [pc, #232]	@ (8005064 <HAL_UART_RxCpltCallback+0x278>)
 8004f7a:	5cd3      	ldrb	r3, [r2, r3]
 8004f7c:	2b0d      	cmp	r3, #13
 8004f7e:	d005      	beq.n	8004f8c <HAL_UART_RxCpltCallback+0x1a0>
 8004f80:	4b37      	ldr	r3, [pc, #220]	@ (8005060 <HAL_UART_RxCpltCallback+0x274>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a37      	ldr	r2, [pc, #220]	@ (8005064 <HAL_UART_RxCpltCallback+0x278>)
 8004f86:	5cd3      	ldrb	r3, [r2, r3]
 8004f88:	2b0a      	cmp	r3, #10
 8004f8a:	d134      	bne.n	8004ff6 <HAL_UART_RxCpltCallback+0x20a>
		{
			receiveMEGA[indexMEGA] = '\0';
 8004f8c:	4b34      	ldr	r3, [pc, #208]	@ (8005060 <HAL_UART_RxCpltCallback+0x274>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a34      	ldr	r2, [pc, #208]	@ (8005064 <HAL_UART_RxCpltCallback+0x278>)
 8004f92:	2100      	movs	r1, #0
 8004f94:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveMEGA, ",");
 8004f96:	4927      	ldr	r1, [pc, #156]	@ (8005034 <HAL_UART_RxCpltCallback+0x248>)
 8004f98:	4832      	ldr	r0, [pc, #200]	@ (8005064 <HAL_UART_RxCpltCallback+0x278>)
 8004f9a:	f008 f891 	bl	800d0c0 <strtok>
 8004f9e:	60f8      	str	r0, [r7, #12]
			dataindexMEGA = 0;
 8004fa0:	4b31      	ldr	r3, [pc, #196]	@ (8005068 <HAL_UART_RxCpltCallback+0x27c>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8004fa6:	e010      	b.n	8004fca <HAL_UART_RxCpltCallback+0x1de>
			{
				sensorMEGA[dataindexMEGA++] = atoi(token);
 8004fa8:	4b2f      	ldr	r3, [pc, #188]	@ (8005068 <HAL_UART_RxCpltCallback+0x27c>)
 8004faa:	681c      	ldr	r4, [r3, #0]
 8004fac:	1c63      	adds	r3, r4, #1
 8004fae:	4a2e      	ldr	r2, [pc, #184]	@ (8005068 <HAL_UART_RxCpltCallback+0x27c>)
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f006 fa39 	bl	800b42a <atoi>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	4a2c      	ldr	r2, [pc, #176]	@ (800506c <HAL_UART_RxCpltCallback+0x280>)
 8004fbc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 8004fc0:	491c      	ldr	r1, [pc, #112]	@ (8005034 <HAL_UART_RxCpltCallback+0x248>)
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f008 f87c 	bl	800d0c0 <strtok>
 8004fc8:	60f8      	str	r0, [r7, #12]
			while(token != NULL)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1eb      	bne.n	8004fa8 <HAL_UART_RxCpltCallback+0x1bc>
			}
			memset(receiveMEGA, 0, sizeof(receiveMEGA));
 8004fd0:	2232      	movs	r2, #50	@ 0x32
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4823      	ldr	r0, [pc, #140]	@ (8005064 <HAL_UART_RxCpltCallback+0x278>)
 8004fd6:	f008 f858 	bl	800d08a <memset>
			indexMEGA = 0;
 8004fda:	4b21      	ldr	r3, [pc, #132]	@ (8005060 <HAL_UART_RxCpltCallback+0x274>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart3, receiveMEGA, 1) != HAL_OK)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	4920      	ldr	r1, [pc, #128]	@ (8005064 <HAL_UART_RxCpltCallback+0x278>)
 8004fe4:	4822      	ldr	r0, [pc, #136]	@ (8005070 <HAL_UART_RxCpltCallback+0x284>)
 8004fe6:	f005 faf9 	bl	800a5dc <HAL_UART_Receive_IT>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d016      	beq.n	800501e <HAL_UART_RxCpltCallback+0x232>
			{
				Error_Handler();
 8004ff0:	f000 f842 	bl	8005078 <Error_Handler>
		{
 8004ff4:	e013      	b.n	800501e <HAL_UART_RxCpltCallback+0x232>
			}
		}
		else
		{
			indexMEGA++;
 8004ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8005060 <HAL_UART_RxCpltCallback+0x274>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	4a18      	ldr	r2, [pc, #96]	@ (8005060 <HAL_UART_RxCpltCallback+0x274>)
 8004ffe:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart3, receiveMEGA + indexMEGA, 1) != HAL_OK)
 8005000:	4b17      	ldr	r3, [pc, #92]	@ (8005060 <HAL_UART_RxCpltCallback+0x274>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a17      	ldr	r2, [pc, #92]	@ (8005064 <HAL_UART_RxCpltCallback+0x278>)
 8005006:	4413      	add	r3, r2
 8005008:	2201      	movs	r2, #1
 800500a:	4619      	mov	r1, r3
 800500c:	4818      	ldr	r0, [pc, #96]	@ (8005070 <HAL_UART_RxCpltCallback+0x284>)
 800500e:	f005 fae5 	bl	800a5dc <HAL_UART_Receive_IT>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_UART_RxCpltCallback+0x234>
			{
				Error_Handler();
 8005018:	f000 f82e 	bl	8005078 <Error_Handler>
			}
		}
	}
}
 800501c:	e000      	b.n	8005020 <HAL_UART_RxCpltCallback+0x234>
		{
 800501e:	bf00      	nop
}
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	bd90      	pop	{r4, r7, pc}
 8005028:	40011000 	.word	0x40011000
 800502c:	20000520 	.word	0x20000520
 8005030:	200004ec 	.word	0x200004ec
 8005034:	08011e78 	.word	0x08011e78
 8005038:	20000524 	.word	0x20000524
 800503c:	20000528 	.word	0x20000528
 8005040:	200003f8 	.word	0x200003f8
 8005044:	40004400 	.word	0x40004400
 8005048:	20000574 	.word	0x20000574
 800504c:	20000540 	.word	0x20000540
 8005050:	20000578 	.word	0x20000578
 8005054:	2000057c 	.word	0x2000057c
 8005058:	20000440 	.word	0x20000440
 800505c:	40004800 	.word	0x40004800
 8005060:	200005f8 	.word	0x200005f8
 8005064:	200005c4 	.word	0x200005c4
 8005068:	200005fc 	.word	0x200005fc
 800506c:	20000600 	.word	0x20000600
 8005070:	20000488 	.word	0x20000488
 8005074:	00000000 	.word	0x00000000

08005078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800507c:	b672      	cpsid	i
}
 800507e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  Inverse_Kinematics(0, 0, 0);
 8005080:	ed9f 2b0d 	vldr	d2, [pc, #52]	@ 80050b8 <Error_Handler+0x40>
 8005084:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 80050b8 <Error_Handler+0x40>
 8005088:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 80050b8 <Error_Handler+0x40>
 800508c:	f7fc f85c 	bl	8001148 <Inverse_Kinematics>
	  setMotorSpeed(1, 0);
 8005090:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 80050b8 <Error_Handler+0x40>
 8005094:	2001      	movs	r0, #1
 8005096:	f7fb ffe1 	bl	800105c <setMotorSpeed>
	  setMotorSpeed(2, 0);
 800509a:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 80050b8 <Error_Handler+0x40>
 800509e:	2002      	movs	r0, #2
 80050a0:	f7fb ffdc 	bl	800105c <setMotorSpeed>
	  setMotorSpeed(7, 0);
 80050a4:	ed9f 0b04 	vldr	d0, [pc, #16]	@ 80050b8 <Error_Handler+0x40>
 80050a8:	2007      	movs	r0, #7
 80050aa:	f7fb ffd7 	bl	800105c <setMotorSpeed>
	  Inverse_Kinematics(0, 0, 0);
 80050ae:	bf00      	nop
 80050b0:	e7e6      	b.n	8005080 <Error_Handler+0x8>
 80050b2:	bf00      	nop
 80050b4:	f3af 8000 	nop.w
	...

080050c0 <odometry_eg>:

extern int camera[13];
extern int sensorMEGA[4];

external_global odometry_eg()
{
 80050c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80050c4:	b09e      	sub	sp, #120	@ 0x78
 80050c6:	af00      	add	r7, sp, #0
	external_global currentPosition;
    double yaw = sensorData[0] * M_PI / 180.0;
 80050c8:	4b93      	ldr	r3, [pc, #588]	@ (8005318 <odometry_eg+0x258>)
 80050ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050ce:	a38c      	add	r3, pc, #560	@ (adr r3, 8005300 <odometry_eg+0x240>)
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	f7fb fa90 	bl	80005f8 <__aeabi_dmul>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4610      	mov	r0, r2
 80050de:	4619      	mov	r1, r3
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	4b8d      	ldr	r3, [pc, #564]	@ (800531c <odometry_eg+0x25c>)
 80050e6:	f7fb fbb1 	bl	800084c <__aeabi_ddiv>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    /* ENCODER EXTERNAL */
    int dn1 = counter1 - oldEnc1;
 80050f2:	4b8b      	ldr	r3, [pc, #556]	@ (8005320 <odometry_eg+0x260>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b8b      	ldr	r3, [pc, #556]	@ (8005324 <odometry_eg+0x264>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int dn2 = counter2 - oldEnc2;
 80050fe:	4b8a      	ldr	r3, [pc, #552]	@ (8005328 <odometry_eg+0x268>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4b8a      	ldr	r3, [pc, #552]	@ (800532c <odometry_eg+0x26c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	66bb      	str	r3, [r7, #104]	@ 0x68
    int dn3 = counter3 - oldEnc3;
 800510a:	4b89      	ldr	r3, [pc, #548]	@ (8005330 <odometry_eg+0x270>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4b89      	ldr	r3, [pc, #548]	@ (8005334 <odometry_eg+0x274>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	667b      	str	r3, [r7, #100]	@ 0x64

    oldEnc1 = counter1;
 8005116:	4b82      	ldr	r3, [pc, #520]	@ (8005320 <odometry_eg+0x260>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a82      	ldr	r2, [pc, #520]	@ (8005324 <odometry_eg+0x264>)
 800511c:	6013      	str	r3, [r2, #0]
    oldEnc2 = counter2;
 800511e:	4b82      	ldr	r3, [pc, #520]	@ (8005328 <odometry_eg+0x268>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a82      	ldr	r2, [pc, #520]	@ (800532c <odometry_eg+0x26c>)
 8005124:	6013      	str	r3, [r2, #0]
    oldEnc3 = counter3;
 8005126:	4b82      	ldr	r3, [pc, #520]	@ (8005330 <odometry_eg+0x270>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a82      	ldr	r2, [pc, #520]	@ (8005334 <odometry_eg+0x274>)
 800512c:	6013      	str	r3, [r2, #0]

    double dtheta = mm_per_tick * (dn2 - dn1) / e1_e2;
 800512e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	4618      	mov	r0, r3
 8005136:	f7fb f9f5 	bl	8000524 <__aeabi_i2d>
 800513a:	a373      	add	r3, pc, #460	@ (adr r3, 8005308 <odometry_eg+0x248>)
 800513c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005140:	f7fb fa5a 	bl	80005f8 <__aeabi_dmul>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4610      	mov	r0, r2
 800514a:	4619      	mov	r1, r3
 800514c:	a370      	add	r3, pc, #448	@ (adr r3, 8005310 <odometry_eg+0x250>)
 800514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005152:	f7fb fb7b 	bl	800084c <__aeabi_ddiv>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    double dx = mm_per_tick * (dn3 + (dn2 - dn1) * e12_e3 / e1_e2);
 800515e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	22e6      	movs	r2, #230	@ 0xe6
 8005166:	fb02 f303 	mul.w	r3, r2, r3
 800516a:	4a73      	ldr	r2, [pc, #460]	@ (8005338 <odometry_eg+0x278>)
 800516c:	fb82 1203 	smull	r1, r2, r2, r3
 8005170:	441a      	add	r2, r3
 8005172:	1212      	asrs	r2, r2, #8
 8005174:	17db      	asrs	r3, r3, #31
 8005176:	1ad2      	subs	r2, r2, r3
 8005178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800517a:	4413      	add	r3, r2
 800517c:	4618      	mov	r0, r3
 800517e:	f7fb f9d1 	bl	8000524 <__aeabi_i2d>
 8005182:	a361      	add	r3, pc, #388	@ (adr r3, 8005308 <odometry_eg+0x248>)
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f7fb fa36 	bl	80005f8 <__aeabi_dmul>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double dy = mm_per_tick * (dn1 + dn2) / 2.0;
 8005194:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005196:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005198:	4413      	add	r3, r2
 800519a:	4618      	mov	r0, r3
 800519c:	f7fb f9c2 	bl	8000524 <__aeabi_i2d>
 80051a0:	a359      	add	r3, pc, #356	@ (adr r3, 8005308 <odometry_eg+0x248>)
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	f7fb fa27 	bl	80005f8 <__aeabi_dmul>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4610      	mov	r0, r2
 80051b0:	4619      	mov	r1, r3
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80051ba:	f7fb fb47 	bl	800084c <__aeabi_ddiv>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    /* END */

//	double theta = heading + (dtheta / 2.0);
	xGlobal += dx * cos(yaw) + dy * sin(yaw);
 80051c6:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 80051ca:	f00a fd45 	bl	800fc58 <cos>
 80051ce:	ec51 0b10 	vmov	r0, r1, d0
 80051d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80051d6:	f7fb fa0f 	bl	80005f8 <__aeabi_dmul>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4690      	mov	r8, r2
 80051e0:	4699      	mov	r9, r3
 80051e2:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 80051e6:	f00a fd8b 	bl	800fd00 <sin>
 80051ea:	ec51 0b10 	vmov	r0, r1, d0
 80051ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051f2:	f7fb fa01 	bl	80005f8 <__aeabi_dmul>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4640      	mov	r0, r8
 80051fc:	4649      	mov	r1, r9
 80051fe:	f7fb f845 	bl	800028c <__adddf3>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4610      	mov	r0, r2
 8005208:	4619      	mov	r1, r3
 800520a:	4b4c      	ldr	r3, [pc, #304]	@ (800533c <odometry_eg+0x27c>)
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f7fb f83c 	bl	800028c <__adddf3>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4948      	ldr	r1, [pc, #288]	@ (800533c <odometry_eg+0x27c>)
 800521a:	e9c1 2300 	strd	r2, r3, [r1]
	yGlobal += -dx * sin(yaw) + dy * cos(yaw);
 800521e:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8005220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005222:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8005226:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 800522a:	f00a fd69 	bl	800fd00 <sin>
 800522e:	ec53 2b10 	vmov	r2, r3, d0
 8005232:	4620      	mov	r0, r4
 8005234:	4629      	mov	r1, r5
 8005236:	f7fb f9df 	bl	80005f8 <__aeabi_dmul>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4614      	mov	r4, r2
 8005240:	461d      	mov	r5, r3
 8005242:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8005246:	f00a fd07 	bl	800fc58 <cos>
 800524a:	ec51 0b10 	vmov	r0, r1, d0
 800524e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005252:	f7fb f9d1 	bl	80005f8 <__aeabi_dmul>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4620      	mov	r0, r4
 800525c:	4629      	mov	r1, r5
 800525e:	f7fb f815 	bl	800028c <__adddf3>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4610      	mov	r0, r2
 8005268:	4619      	mov	r1, r3
 800526a:	4b35      	ldr	r3, [pc, #212]	@ (8005340 <odometry_eg+0x280>)
 800526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005270:	f7fb f80c 	bl	800028c <__adddf3>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4931      	ldr	r1, [pc, #196]	@ (8005340 <odometry_eg+0x280>)
 800527a:	e9c1 2300 	strd	r2, r3, [r1]
	heading += dtheta;
 800527e:	4b31      	ldr	r3, [pc, #196]	@ (8005344 <odometry_eg+0x284>)
 8005280:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005284:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005288:	f7fb f800 	bl	800028c <__adddf3>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	492c      	ldr	r1, [pc, #176]	@ (8005344 <odometry_eg+0x284>)
 8005292:	e9c1 2300 	strd	r2, r3, [r1]

	currentPosition.x = xGlobal;
 8005296:	4b29      	ldr	r3, [pc, #164]	@ (800533c <odometry_eg+0x27c>)
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	currentPosition.y = yGlobal;
 80052a0:	4b27      	ldr	r3, [pc, #156]	@ (8005340 <odometry_eg+0x280>)
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	currentPosition.h = sensorData[0];
 80052aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005318 <odometry_eg+0x258>)
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	return currentPosition;
 80052b4:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80052b8:	f107 0518 	add.w	r5, r7, #24
 80052bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80052c4:	e884 0003 	stmia.w	r4, {r0, r1}
 80052c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052cc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80052d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80052d4:	ec45 4b15 	vmov	d5, r4, r5
 80052d8:	ec41 0b16 	vmov	d6, r0, r1
 80052dc:	ec43 2b17 	vmov	d7, r2, r3
}
 80052e0:	eeb0 0a45 	vmov.f32	s0, s10
 80052e4:	eef0 0a65 	vmov.f32	s1, s11
 80052e8:	eeb0 1a46 	vmov.f32	s2, s12
 80052ec:	eef0 1a66 	vmov.f32	s3, s13
 80052f0:	eeb0 2a47 	vmov.f32	s4, s14
 80052f4:	eef0 2a67 	vmov.f32	s5, s15
 80052f8:	3778      	adds	r7, #120	@ 0x78
 80052fa:	46bd      	mov	sp, r7
 80052fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005300:	54442d18 	.word	0x54442d18
 8005304:	400921fb 	.word	0x400921fb
 8005308:	2d6e5f19 	.word	0x2d6e5f19
 800530c:	3fb752bc 	.word	0x3fb752bc
 8005310:	00000000 	.word	0x00000000
 8005314:	4077c000 	.word	0x4077c000
 8005318:	20000528 	.word	0x20000528
 800531c:	40668000 	.word	0x40668000
 8005320:	200004d0 	.word	0x200004d0
 8005324:	20000630 	.word	0x20000630
 8005328:	200004d4 	.word	0x200004d4
 800532c:	20000634 	.word	0x20000634
 8005330:	200004d8 	.word	0x200004d8
 8005334:	20000638 	.word	0x20000638
 8005338:	ac769185 	.word	0xac769185
 800533c:	20000618 	.word	0x20000618
 8005340:	20000620 	.word	0x20000620
 8005344:	20000628 	.word	0x20000628

08005348 <display_EG>:
	sprintf(buffer, "E3:%d", counter3);
	lcd_write_string(buffer);
}

void display_EG()
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
	external_global position = odometry_eg();
 800534e:	f7ff feb7 	bl	80050c0 <odometry_eg>
 8005352:	eeb0 5a40 	vmov.f32	s10, s0
 8005356:	eef0 5a60 	vmov.f32	s11, s1
 800535a:	eeb0 6a41 	vmov.f32	s12, s2
 800535e:	eef0 6a61 	vmov.f32	s13, s3
 8005362:	eeb0 7a42 	vmov.f32	s14, s4
 8005366:	eef0 7a62 	vmov.f32	s15, s5
 800536a:	ed87 5b00 	vstr	d5, [r7]
 800536e:	ed87 6b02 	vstr	d6, [r7, #8]
 8005372:	ed87 7b04 	vstr	d7, [r7, #16]

	lcd_set_cursor(0, 0);
 8005376:	2100      	movs	r1, #0
 8005378:	2000      	movs	r0, #0
 800537a:	f7fd f80d 	bl	8002398 <lcd_set_cursor>
	sprintf(buffer, "X:%.2f", position.x);
 800537e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005382:	4912      	ldr	r1, [pc, #72]	@ (80053cc <display_EG+0x84>)
 8005384:	4812      	ldr	r0, [pc, #72]	@ (80053d0 <display_EG+0x88>)
 8005386:	f007 fe1d 	bl	800cfc4 <siprintf>
	lcd_write_string(buffer);
 800538a:	4811      	ldr	r0, [pc, #68]	@ (80053d0 <display_EG+0x88>)
 800538c:	f7fc ffee 	bl	800236c <lcd_write_string>
	lcd_set_cursor(1, 0);
 8005390:	2100      	movs	r1, #0
 8005392:	2001      	movs	r0, #1
 8005394:	f7fd f800 	bl	8002398 <lcd_set_cursor>
	sprintf(buffer, "Y:%.2f", position.y);
 8005398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800539c:	490d      	ldr	r1, [pc, #52]	@ (80053d4 <display_EG+0x8c>)
 800539e:	480c      	ldr	r0, [pc, #48]	@ (80053d0 <display_EG+0x88>)
 80053a0:	f007 fe10 	bl	800cfc4 <siprintf>
	lcd_write_string(buffer);
 80053a4:	480a      	ldr	r0, [pc, #40]	@ (80053d0 <display_EG+0x88>)
 80053a6:	f7fc ffe1 	bl	800236c <lcd_write_string>
	lcd_set_cursor(2, 0);
 80053aa:	2100      	movs	r1, #0
 80053ac:	2002      	movs	r0, #2
 80053ae:	f7fc fff3 	bl	8002398 <lcd_set_cursor>
	sprintf(buffer, "H:%.2f", position.h);
 80053b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053b6:	4908      	ldr	r1, [pc, #32]	@ (80053d8 <display_EG+0x90>)
 80053b8:	4805      	ldr	r0, [pc, #20]	@ (80053d0 <display_EG+0x88>)
 80053ba:	f007 fe03 	bl	800cfc4 <siprintf>
	lcd_write_string(buffer);
 80053be:	4804      	ldr	r0, [pc, #16]	@ (80053d0 <display_EG+0x88>)
 80053c0:	f7fc ffd4 	bl	800236c <lcd_write_string>
}
 80053c4:	bf00      	nop
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	08011ec8 	.word	0x08011ec8
 80053d0:	2000063c 	.word	0x2000063c
 80053d4:	08011ed0 	.word	0x08011ed0
 80053d8:	08011efc 	.word	0x08011efc
 80053dc:	00000000 	.word	0x00000000

080053e0 <PID_controller>:
/* Variable for PID*/
double integral = 0.0, derivative = 0.0, prev_error = 0.0;
/* END */

double PID_controller(double setpoint, double actual_position, double Kp, double Ki, double Kd)
{
 80053e0:	b5b0      	push	{r4, r5, r7, lr}
 80053e2:	b090      	sub	sp, #64	@ 0x40
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	ed87 0b08 	vstr	d0, [r7, #32]
 80053ea:	ed87 1b06 	vstr	d1, [r7, #24]
 80053ee:	ed87 2b04 	vstr	d2, [r7, #16]
 80053f2:	ed87 3b02 	vstr	d3, [r7, #8]
 80053f6:	ed87 4b00 	vstr	d4, [r7]
	double dt = 0.01;
 80053fa:	a33c      	add	r3, pc, #240	@ (adr r3, 80054ec <PID_controller+0x10c>)
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    // Proportional
    double error = setpoint - actual_position;
 8005404:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005408:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800540c:	f7fa ff3c 	bl	8000288 <__aeabi_dsub>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Integral
    integral += error * dt;
 8005418:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800541c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8005420:	f7fb f8ea 	bl	80005f8 <__aeabi_dmul>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4610      	mov	r0, r2
 800542a:	4619      	mov	r1, r3
 800542c:	4b2c      	ldr	r3, [pc, #176]	@ (80054e0 <PID_controller+0x100>)
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	f7fa ff2b 	bl	800028c <__adddf3>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4929      	ldr	r1, [pc, #164]	@ (80054e0 <PID_controller+0x100>)
 800543c:	e9c1 2300 	strd	r2, r3, [r1]

    // Derivative
	derivative = (error - prev_error) / dt;
 8005440:	4b28      	ldr	r3, [pc, #160]	@ (80054e4 <PID_controller+0x104>)
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800544a:	f7fa ff1d 	bl	8000288 <__aeabi_dsub>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	4610      	mov	r0, r2
 8005454:	4619      	mov	r1, r3
 8005456:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800545a:	f7fb f9f7 	bl	800084c <__aeabi_ddiv>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4921      	ldr	r1, [pc, #132]	@ (80054e8 <PID_controller+0x108>)
 8005464:	e9c1 2300 	strd	r2, r3, [r1]

    double output = Kp * error + Ki * integral + Kd * derivative;
 8005468:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800546c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005470:	f7fb f8c2 	bl	80005f8 <__aeabi_dmul>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4614      	mov	r4, r2
 800547a:	461d      	mov	r5, r3
 800547c:	4b18      	ldr	r3, [pc, #96]	@ (80054e0 <PID_controller+0x100>)
 800547e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005482:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005486:	f7fb f8b7 	bl	80005f8 <__aeabi_dmul>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4620      	mov	r0, r4
 8005490:	4629      	mov	r1, r5
 8005492:	f7fa fefb 	bl	800028c <__adddf3>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4614      	mov	r4, r2
 800549c:	461d      	mov	r5, r3
 800549e:	4b12      	ldr	r3, [pc, #72]	@ (80054e8 <PID_controller+0x108>)
 80054a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a8:	f7fb f8a6 	bl	80005f8 <__aeabi_dmul>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4620      	mov	r0, r4
 80054b2:	4629      	mov	r1, r5
 80054b4:	f7fa feea 	bl	800028c <__adddf3>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    prev_error = error;
 80054c0:	4908      	ldr	r1, [pc, #32]	@ (80054e4 <PID_controller+0x104>)
 80054c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80054c6:	e9c1 2300 	strd	r2, r3, [r1]

    return output;
 80054ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80054d2:	eeb0 0a47 	vmov.f32	s0, s14
 80054d6:	eef0 0a67 	vmov.f32	s1, s15
 80054da:	3740      	adds	r7, #64	@ 0x40
 80054dc:	46bd      	mov	sp, r7
 80054de:	bdb0      	pop	{r4, r5, r7, pc}
 80054e0:	20000648 	.word	0x20000648
 80054e4:	20000658 	.word	0x20000658
 80054e8:	20000650 	.word	0x20000650
 80054ec:	47ae147b 	.word	0x47ae147b
 80054f0:	3f847ae1 	.word	0x3f847ae1

080054f4 <PID_controllerH>:

double PID_controllerH(double setpoint, double actual_position, double Kp)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	@ 0x28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	ed87 0b04 	vstr	d0, [r7, #16]
 80054fe:	ed87 1b02 	vstr	d1, [r7, #8]
 8005502:	ed87 2b00 	vstr	d2, [r7]
	double error = setpoint - actual_position;
 8005506:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800550a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800550e:	f7fa febb 	bl	8000288 <__aeabi_dsub>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if(error > 180)
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	4b1f      	ldr	r3, [pc, #124]	@ (800559c <PID_controllerH+0xa8>)
 8005520:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005524:	f7fb faf8 	bl	8000b18 <__aeabi_dcmpgt>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00b      	beq.n	8005546 <PID_controllerH+0x52>
	{
		error -= 360;
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	4b1b      	ldr	r3, [pc, #108]	@ (80055a0 <PID_controllerH+0xac>)
 8005534:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005538:	f7fa fea6 	bl	8000288 <__aeabi_dsub>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005544:	e014      	b.n	8005570 <PID_controllerH+0x7c>
	}
	else if(error < -180)
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	4b16      	ldr	r3, [pc, #88]	@ (80055a4 <PID_controllerH+0xb0>)
 800554c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005550:	f7fb fac4 	bl	8000adc <__aeabi_dcmplt>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <PID_controllerH+0x7c>
	{
		error += 360;
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	4b10      	ldr	r3, [pc, #64]	@ (80055a0 <PID_controllerH+0xac>)
 8005560:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005564:	f7fa fe92 	bl	800028c <__adddf3>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

    // Proportional
	double P = Kp * error;
 8005570:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005574:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005578:	f7fb f83e 	bl	80005f8 <__aeabi_dmul>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return P;
 8005584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005588:	ec43 2b17 	vmov	d7, r2, r3
}
 800558c:	eeb0 0a47 	vmov.f32	s0, s14
 8005590:	eef0 0a67 	vmov.f32	s1, s15
 8005594:	3728      	adds	r7, #40	@ 0x28
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	40668000 	.word	0x40668000
 80055a0:	40768000 	.word	0x40768000
 80055a4:	c0668000 	.word	0xc0668000

080055a8 <map>:
uint8_t lookingMode = 1;

Silo silos[MAX_SILOS];

int map(int st1, int fn1, int st2, int fn2, int value)
{
 80055a8:	b5b0      	push	{r4, r5, r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
    return (1.0 * (value - st1)) / ((fn1 - st1) * 1.0) * (fn2 - st2) + st2;
 80055b6:	6a3a      	ldr	r2, [r7, #32]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fa ffb1 	bl	8000524 <__aeabi_i2d>
 80055c2:	4604      	mov	r4, r0
 80055c4:	460d      	mov	r5, r1
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fa ffa9 	bl	8000524 <__aeabi_i2d>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4620      	mov	r0, r4
 80055d8:	4629      	mov	r1, r5
 80055da:	f7fb f937 	bl	800084c <__aeabi_ddiv>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4614      	mov	r4, r2
 80055e4:	461d      	mov	r5, r3
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fa ff99 	bl	8000524 <__aeabi_i2d>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	4620      	mov	r0, r4
 80055f8:	4629      	mov	r1, r5
 80055fa:	f7fa fffd 	bl	80005f8 <__aeabi_dmul>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4614      	mov	r4, r2
 8005604:	461d      	mov	r5, r3
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fa ff8c 	bl	8000524 <__aeabi_i2d>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4620      	mov	r0, r4
 8005612:	4629      	mov	r1, r5
 8005614:	f7fa fe3a 	bl	800028c <__adddf3>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4610      	mov	r0, r2
 800561e:	4619      	mov	r1, r3
 8005620:	f7fb fa9a 	bl	8000b58 <__aeabi_d2iz>
 8005624:	4603      	mov	r3, r0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005630 <smoothVelocity>:
    }
    return target;
}

void smoothVelocity(double* Vx, double* Vy, double* W, double smoothingFactor)
{
 8005630:	b5b0      	push	{r4, r5, r7, lr}
 8005632:	b08c      	sub	sp, #48	@ 0x30
 8005634:	af00      	add	r7, sp, #0
 8005636:	6178      	str	r0, [r7, #20]
 8005638:	6139      	str	r1, [r7, #16]
 800563a:	60fa      	str	r2, [r7, #12]
 800563c:	ed87 0b00 	vstr	d0, [r7]
	double prevVx = 0.0;
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double prevVy = 0.0;
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double prevW = 0.0;
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	f04f 0300 	mov.w	r3, #0
 8005660:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *Vx = (1.0 - smoothingFactor) * prevVx + smoothingFactor * (*Vx);
 8005664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005668:	f04f 0000 	mov.w	r0, #0
 800566c:	493e      	ldr	r1, [pc, #248]	@ (8005768 <smoothVelocity+0x138>)
 800566e:	f7fa fe0b 	bl	8000288 <__aeabi_dsub>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	4610      	mov	r0, r2
 8005678:	4619      	mov	r1, r3
 800567a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800567e:	f7fa ffbb 	bl	80005f8 <__aeabi_dmul>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4614      	mov	r4, r2
 8005688:	461d      	mov	r5, r3
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005694:	f7fa ffb0 	bl	80005f8 <__aeabi_dmul>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4620      	mov	r0, r4
 800569e:	4629      	mov	r1, r5
 80056a0:	f7fa fdf4 	bl	800028c <__adddf3>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	6979      	ldr	r1, [r7, #20]
 80056aa:	e9c1 2300 	strd	r2, r3, [r1]
    *Vy = (1.0 - smoothingFactor) * prevVy + smoothingFactor * (*Vy);
 80056ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056b2:	f04f 0000 	mov.w	r0, #0
 80056b6:	492c      	ldr	r1, [pc, #176]	@ (8005768 <smoothVelocity+0x138>)
 80056b8:	f7fa fde6 	bl	8000288 <__aeabi_dsub>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4610      	mov	r0, r2
 80056c2:	4619      	mov	r1, r3
 80056c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056c8:	f7fa ff96 	bl	80005f8 <__aeabi_dmul>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4614      	mov	r4, r2
 80056d2:	461d      	mov	r5, r3
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80056da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056de:	f7fa ff8b 	bl	80005f8 <__aeabi_dmul>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4620      	mov	r0, r4
 80056e8:	4629      	mov	r1, r5
 80056ea:	f7fa fdcf 	bl	800028c <__adddf3>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	6939      	ldr	r1, [r7, #16]
 80056f4:	e9c1 2300 	strd	r2, r3, [r1]
    *W = (1.0 - smoothingFactor) * prevW + smoothingFactor * (*W);
 80056f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056fc:	f04f 0000 	mov.w	r0, #0
 8005700:	4919      	ldr	r1, [pc, #100]	@ (8005768 <smoothVelocity+0x138>)
 8005702:	f7fa fdc1 	bl	8000288 <__aeabi_dsub>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4610      	mov	r0, r2
 800570c:	4619      	mov	r1, r3
 800570e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005712:	f7fa ff71 	bl	80005f8 <__aeabi_dmul>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4614      	mov	r4, r2
 800571c:	461d      	mov	r5, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005728:	f7fa ff66 	bl	80005f8 <__aeabi_dmul>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4620      	mov	r0, r4
 8005732:	4629      	mov	r1, r5
 8005734:	f7fa fdaa 	bl	800028c <__adddf3>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	68f9      	ldr	r1, [r7, #12]
 800573e:	e9c1 2300 	strd	r2, r3, [r1]

    prevVx = *Vx;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    prevVy = *Vy;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	e9c7 2308 	strd	r2, r3, [r7, #32]
    prevW = *W;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	e9c7 2306 	strd	r2, r3, [r7, #24]
}
 8005760:	bf00      	nop
 8005762:	3730      	adds	r7, #48	@ 0x30
 8005764:	46bd      	mov	sp, r7
 8005766:	bdb0      	pop	{r4, r5, r7, pc}
 8005768:	3ff00000 	.word	0x3ff00000

0800576c <atTargetEG>:
    }
    return targetVelocity;
}

bool atTargetEG(external_global setpoint, external_global position, double xyTolerance, double hTolerance)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b098      	sub	sp, #96	@ 0x60
 8005770:	af00      	add	r7, sp, #0
 8005772:	ed87 6b02 	vstr	d6, [r7, #8]
 8005776:	ed87 7b00 	vstr	d7, [r7]
 800577a:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 800577e:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 8005782:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
 8005786:	ed87 3b04 	vstr	d3, [r7, #16]
 800578a:	ed87 4b06 	vstr	d4, [r7, #24]
 800578e:	ed87 5b08 	vstr	d5, [r7, #32]
	double error_x = setpoint.x - position.x;
 8005792:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005796:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800579a:	f7fa fd75 	bl	8000288 <__aeabi_dsub>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	double error_y = setpoint.y - position.y;
 80057a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80057aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057ae:	f7fa fd6b 	bl	8000288 <__aeabi_dsub>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double error_h = fabs(setpoint.h - position.h);
 80057ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80057be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057c2:	f7fa fd61 	bl	8000288 <__aeabi_dsub>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4611      	mov	r1, r2
 80057cc:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	double distance = hypot(error_x, error_y);
 80057d4:	ed97 1b14 	vldr	d1, [r7, #80]	@ 0x50
 80057d8:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 80057dc:	f00a fa08 	bl	800fbf0 <hypot>
 80057e0:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	return distance < xyTolerance && error_h < hTolerance;
 80057e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057e8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80057ec:	f7fb f976 	bl	8000adc <__aeabi_dcmplt>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <atTargetEG+0xa0>
 80057f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80057fe:	f7fb f96d 	bl	8000adc <__aeabi_dcmplt>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <atTargetEG+0xa0>
 8005808:	2301      	movs	r3, #1
 800580a:	e000      	b.n	800580e <atTargetEG+0xa2>
 800580c:	2300      	movs	r3, #0
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	b2db      	uxtb	r3, r3
}
 8005814:	4618      	mov	r0, r3
 8005816:	3760      	adds	r7, #96	@ 0x60
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	0000      	movs	r0, r0
	...

08005820 <lookForTheBall>:
	double distance = hypot(error_x, error_y);
	return distance < xyTolerance && error_h < hTolerance;
}

void lookForTheBall(double targetAngle1, double targetAngle2, double currentAngle)
{
 8005820:	b5b0      	push	{r4, r5, r7, lr}
 8005822:	b08c      	sub	sp, #48	@ 0x30
 8005824:	af00      	add	r7, sp, #0
 8005826:	ed87 0b04 	vstr	d0, [r7, #16]
 800582a:	ed87 1b02 	vstr	d1, [r7, #8]
 800582e:	ed87 2b00 	vstr	d2, [r7]
    double targetAngle;
    uint8_t nextMode;

    switch (lookingMode)
 8005832:	4b25      	ldr	r3, [pc, #148]	@ (80058c8 <lookForTheBall+0xa8>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d002      	beq.n	8005840 <lookForTheBall+0x20>
 800583a:	2b02      	cmp	r3, #2
 800583c:	d008      	beq.n	8005850 <lookForTheBall+0x30>
        case 2:
        	targetAngle = targetAngle1;
            nextMode = 1;
            break;
        default:
            return; // Invalid mode, do nothing
 800583e:	e03c      	b.n	80058ba <lookForTheBall+0x9a>
        	targetAngle = targetAngle2;
 8005840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005844:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            nextMode = 2;
 8005848:	2302      	movs	r3, #2
 800584a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800584e:	e007      	b.n	8005860 <lookForTheBall+0x40>
        	targetAngle = targetAngle1;
 8005850:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005854:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            nextMode = 1;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800585e:	bf00      	nop
    }

    double W = PID_controllerH(targetAngle, currentAngle, 0.7);
 8005860:	ed9f 2b17 	vldr	d2, [pc, #92]	@ 80058c0 <lookForTheBall+0xa0>
 8005864:	ed97 1b00 	vldr	d1, [r7]
 8005868:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800586c:	f7ff fe42 	bl	80054f4 <PID_controllerH>
 8005870:	ed87 0b06 	vstr	d0, [r7, #24]
    putar(0, 0, W);
 8005874:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005878:	f7fb f96e 	bl	8000b58 <__aeabi_d2iz>
 800587c:	4603      	mov	r3, r0
 800587e:	461a      	mov	r2, r3
 8005880:	2100      	movs	r1, #0
 8005882:	2000      	movs	r0, #0
 8005884:	f7fc f9f4 	bl	8001c70 <putar>
    if (fabs(targetAngle - currentAngle) < 5.0)
 8005888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800588c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005890:	f7fa fcfa 	bl	8000288 <__aeabi_dsub>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4614      	mov	r4, r2
 800589a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	4b0a      	ldr	r3, [pc, #40]	@ (80058cc <lookForTheBall+0xac>)
 80058a4:	4620      	mov	r0, r4
 80058a6:	4629      	mov	r1, r5
 80058a8:	f7fb f918 	bl	8000adc <__aeabi_dcmplt>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <lookForTheBall+0x9a>
    {
        lookingMode = nextMode;
 80058b2:	4a05      	ldr	r2, [pc, #20]	@ (80058c8 <lookForTheBall+0xa8>)
 80058b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058b8:	7013      	strb	r3, [r2, #0]
    }
}
 80058ba:	3730      	adds	r7, #48	@ 0x30
 80058bc:	46bd      	mov	sp, r7
 80058be:	bdb0      	pop	{r4, r5, r7, pc}
 80058c0:	66666666 	.word	0x66666666
 80058c4:	3fe66666 	.word	0x3fe66666
 80058c8:	200000c9 	.word	0x200000c9
 80058cc:	40140000 	.word	0x40140000

080058d0 <servo_write>:

void servo_write(int angle)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	6078      	str	r0, [r7, #4]
	int i = map(0, 180, 30, 130, angle);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	2382      	movs	r3, #130	@ 0x82
 80058de:	221e      	movs	r2, #30
 80058e0:	21b4      	movs	r1, #180	@ 0xb4
 80058e2:	2000      	movs	r0, #0
 80058e4:	f7ff fe60 	bl	80055a8 <map>
 80058e8:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, i);
 80058ea:	4b04      	ldr	r3, [pc, #16]	@ (80058fc <servo_write+0x2c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80058f2:	bf00      	nop
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000368 	.word	0x20000368

08005900 <PID_left>:

void PID_left(external_global setpoint, double Kp, double Ki, double Kd, double KpH, double smoothingFactor, double maxVelocity)
{
 8005900:	b5b0      	push	{r4, r5, r7, lr}
 8005902:	b0ae      	sub	sp, #184	@ 0xb8
 8005904:	af00      	add	r7, sp, #0
 8005906:	ed87 3b08 	vstr	d3, [r7, #32]
 800590a:	ed87 4b06 	vstr	d4, [r7, #24]
 800590e:	ed87 5b04 	vstr	d5, [r7, #16]
 8005912:	ed87 6b02 	vstr	d6, [r7, #8]
 8005916:	ed87 7b00 	vstr	d7, [r7]
 800591a:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 800591e:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 8005922:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
	external_global currentPosition = odometry_eg();
 8005926:	f7ff fbcb 	bl	80050c0 <odometry_eg>
 800592a:	eeb0 5a40 	vmov.f32	s10, s0
 800592e:	eef0 5a60 	vmov.f32	s11, s1
 8005932:	eeb0 6a41 	vmov.f32	s12, s2
 8005936:	eef0 6a61 	vmov.f32	s13, s3
 800593a:	eeb0 7a42 	vmov.f32	s14, s4
 800593e:	eef0 7a62 	vmov.f32	s15, s5
 8005942:	ed87 5b16 	vstr	d5, [r7, #88]	@ 0x58
 8005946:	ed87 6b18 	vstr	d6, [r7, #96]	@ 0x60
 800594a:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68

	double pitch = sensorData[1] * 300; // IMU pitch
 800594e:	4bac      	ldr	r3, [pc, #688]	@ (8005c00 <PID_left+0x300>)
 8005950:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005954:	a3a6      	add	r3, pc, #664	@ (adr r3, 8005bf0 <PID_left+0x2f0>)
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	f7fa fe4d 	bl	80005f8 <__aeabi_dmul>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	double roll = sensorData[2] * 300; // IMU roll
 8005966:	4ba6      	ldr	r3, [pc, #664]	@ (8005c00 <PID_left+0x300>)
 8005968:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800596c:	a3a0      	add	r3, pc, #640	@ (adr r3, 8005bf0 <PID_left+0x2f0>)
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	f7fa fe41 	bl	80005f8 <__aeabi_dmul>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double error_x = setpoint.x - currentPosition.x;
 800597e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005982:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005986:	f7fa fc7f 	bl	8000288 <__aeabi_dsub>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
    double error_y = setpoint.y - currentPosition.y;
 8005992:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8005996:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800599a:	f7fa fc75 	bl	8000288 <__aeabi_dsub>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    double current_heading_rad = currentPosition.h * M_PI / 180.0;
 80059a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059aa:	a393      	add	r3, pc, #588	@ (adr r3, 8005bf8 <PID_left+0x2f8>)
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	f7fa fe22 	bl	80005f8 <__aeabi_dmul>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4610      	mov	r0, r2
 80059ba:	4619      	mov	r1, r3
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	4b90      	ldr	r3, [pc, #576]	@ (8005c04 <PID_left+0x304>)
 80059c2:	f7fa ff43 	bl	800084c <__aeabi_ddiv>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

    double distance = hypot(error_x, error_y);
 80059ce:	ed97 1b26 	vldr	d1, [r7, #152]	@ 0x98
 80059d2:	ed97 0b28 	vldr	d0, [r7, #160]	@ 0xa0
 80059d6:	f00a f90b 	bl	800fbf0 <hypot>
 80059da:	ed87 0b22 	vstr	d0, [r7, #136]	@ 0x88
    double velocityFactor = fmin(distance, maxVelocity) / distance;
 80059de:	ed97 1b32 	vldr	d1, [r7, #200]	@ 0xc8
 80059e2:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 80059e6:	f00a fa14 	bl	800fe12 <fmin>
 80059ea:	ec51 0b10 	vmov	r0, r1, d0
 80059ee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80059f2:	f7fa ff2b 	bl	800084c <__aeabi_ddiv>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    double Vx_local = PID_controller(setpoint.x, currentPosition.x, Kp, Ki, Kd) * velocityFactor;
 80059fe:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8005a02:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8005a06:	ed97 4b04 	vldr	d4, [r7, #16]
 8005a0a:	ed97 3b06 	vldr	d3, [r7, #24]
 8005a0e:	ed97 2b08 	vldr	d2, [r7, #32]
 8005a12:	eeb0 1a46 	vmov.f32	s2, s12
 8005a16:	eef0 1a66 	vmov.f32	s3, s13
 8005a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8005a1e:	eef0 0a67 	vmov.f32	s1, s15
 8005a22:	f7ff fcdd 	bl	80053e0 <PID_controller>
 8005a26:	ec53 2b10 	vmov	r2, r3, d0
 8005a2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a2e:	f7fa fde3 	bl	80005f8 <__aeabi_dmul>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    double Vy_local = PID_controller(setpoint.y, currentPosition.y, Kp, Ki, Kd) * velocityFactor;
 8005a3a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8005a3e:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8005a42:	ed97 4b04 	vldr	d4, [r7, #16]
 8005a46:	ed97 3b06 	vldr	d3, [r7, #24]
 8005a4a:	ed97 2b08 	vldr	d2, [r7, #32]
 8005a4e:	eeb0 1a46 	vmov.f32	s2, s12
 8005a52:	eef0 1a66 	vmov.f32	s3, s13
 8005a56:	eeb0 0a47 	vmov.f32	s0, s14
 8005a5a:	eef0 0a67 	vmov.f32	s1, s15
 8005a5e:	f7ff fcbf 	bl	80053e0 <PID_controller>
 8005a62:	ec53 2b10 	vmov	r2, r3, d0
 8005a66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a6a:	f7fa fdc5 	bl	80005f8 <__aeabi_dmul>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    double Vx = Vx_local * cos(current_heading_rad) - Vy_local * sin(current_heading_rad);
 8005a76:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8005a7a:	f00a f8ed 	bl	800fc58 <cos>
 8005a7e:	ec51 0b10 	vmov	r0, r1, d0
 8005a82:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8005a86:	f7fa fdb7 	bl	80005f8 <__aeabi_dmul>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4614      	mov	r4, r2
 8005a90:	461d      	mov	r5, r3
 8005a92:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8005a96:	f00a f933 	bl	800fd00 <sin>
 8005a9a:	ec51 0b10 	vmov	r0, r1, d0
 8005a9e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005aa2:	f7fa fda9 	bl	80005f8 <__aeabi_dmul>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4620      	mov	r0, r4
 8005aac:	4629      	mov	r1, r5
 8005aae:	f7fa fbeb 	bl	8000288 <__aeabi_dsub>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double Vy = Vx_local * sin(current_heading_rad) + Vy_local * cos(current_heading_rad);
 8005aba:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8005abe:	f00a f91f 	bl	800fd00 <sin>
 8005ac2:	ec51 0b10 	vmov	r0, r1, d0
 8005ac6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8005aca:	f7fa fd95 	bl	80005f8 <__aeabi_dmul>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4614      	mov	r4, r2
 8005ad4:	461d      	mov	r5, r3
 8005ad6:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8005ada:	f00a f8bd 	bl	800fc58 <cos>
 8005ade:	ec51 0b10 	vmov	r0, r1, d0
 8005ae2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005ae6:	f7fa fd87 	bl	80005f8 <__aeabi_dmul>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4620      	mov	r0, r4
 8005af0:	4629      	mov	r1, r5
 8005af2:	f7fa fbcb 	bl	800028c <__adddf3>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double W = PID_controllerH(setpoint.h, currentPosition.h, KpH);
 8005afe:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8005b02:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 8005b06:	ed97 2b02 	vldr	d2, [r7, #8]
 8005b0a:	eeb0 1a46 	vmov.f32	s2, s12
 8005b0e:	eef0 1a66 	vmov.f32	s3, s13
 8005b12:	eeb0 0a47 	vmov.f32	s0, s14
 8005b16:	eef0 0a67 	vmov.f32	s1, s15
 8005b1a:	f7ff fceb 	bl	80054f4 <PID_controllerH>
 8005b1e:	eeb0 7a40 	vmov.f32	s14, s0
 8005b22:	eef0 7a60 	vmov.f32	s15, s1
 8005b26:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

    if(roll > 0)	{Vx -= roll;}
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	f04f 0300 	mov.w	r3, #0
 8005b32:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8005b36:	f7fa ffef 	bl	8000b18 <__aeabi_dcmpgt>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <PID_left+0x256>
 8005b40:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8005b44:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8005b48:	f7fa fb9e 	bl	8000288 <__aeabi_dsub>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8005b54:	e009      	b.n	8005b6a <PID_left+0x26a>
    else			{Vx += roll;}
 8005b56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8005b5a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8005b5e:	f7fa fb95 	bl	800028c <__adddf3>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    if(pitch > 0)	{Vy += pitch;}
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	f04f 0300 	mov.w	r3, #0
 8005b72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b76:	f7fa ffcf 	bl	8000b18 <__aeabi_dcmpgt>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <PID_left+0x296>
 8005b80:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8005b84:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8005b88:	f7fa fb80 	bl	800028c <__adddf3>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8005b94:	e009      	b.n	8005baa <PID_left+0x2aa>
    else			{Vy -= pitch;}
 8005b96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8005b9a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8005b9e:	f7fa fb73 	bl	8000288 <__aeabi_dsub>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
 8005baa:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8005bae:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8005bb2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005bb6:	ed97 0b00 	vldr	d0, [r7]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fd38 	bl	8005630 <smoothVelocity>
    left(Vx, Vy, W);
 8005bc0:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8005bc4:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8005bc8:	ed97 5b10 	vldr	d5, [r7, #64]	@ 0x40
 8005bcc:	eeb0 2a45 	vmov.f32	s4, s10
 8005bd0:	eef0 2a65 	vmov.f32	s5, s11
 8005bd4:	eeb0 1a46 	vmov.f32	s2, s12
 8005bd8:	eef0 1a66 	vmov.f32	s3, s13
 8005bdc:	eeb0 0a47 	vmov.f32	s0, s14
 8005be0:	eef0 0a67 	vmov.f32	s1, s15
 8005be4:	f7fb fd74 	bl	80016d0 <left>
}
 8005be8:	bf00      	nop
 8005bea:	37b8      	adds	r7, #184	@ 0xb8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bdb0      	pop	{r4, r5, r7, pc}
 8005bf0:	00000000 	.word	0x00000000
 8005bf4:	4072c000 	.word	0x4072c000
 8005bf8:	54442d18 	.word	0x54442d18
 8005bfc:	400921fb 	.word	0x400921fb
 8005c00:	20000528 	.word	0x20000528
 8005c04:	40668000 	.word	0x40668000

08005c08 <PID_EG>:

void PID_EG(external_global setpoint, double Kp, double Ki, double Kd, double KpH, double smoothingFactor, double maxVelocity)
{
 8005c08:	b5b0      	push	{r4, r5, r7, lr}
 8005c0a:	b0ae      	sub	sp, #184	@ 0xb8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	ed87 3b08 	vstr	d3, [r7, #32]
 8005c12:	ed87 4b06 	vstr	d4, [r7, #24]
 8005c16:	ed87 5b04 	vstr	d5, [r7, #16]
 8005c1a:	ed87 6b02 	vstr	d6, [r7, #8]
 8005c1e:	ed87 7b00 	vstr	d7, [r7]
 8005c22:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 8005c26:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 8005c2a:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
	external_global currentPosition = odometry_eg();
 8005c2e:	f7ff fa47 	bl	80050c0 <odometry_eg>
 8005c32:	eeb0 5a40 	vmov.f32	s10, s0
 8005c36:	eef0 5a60 	vmov.f32	s11, s1
 8005c3a:	eeb0 6a41 	vmov.f32	s12, s2
 8005c3e:	eef0 6a61 	vmov.f32	s13, s3
 8005c42:	eeb0 7a42 	vmov.f32	s14, s4
 8005c46:	eef0 7a62 	vmov.f32	s15, s5
 8005c4a:	ed87 5b16 	vstr	d5, [r7, #88]	@ 0x58
 8005c4e:	ed87 6b18 	vstr	d6, [r7, #96]	@ 0x60
 8005c52:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68

	double pitch = sensorData[1] * 300; // IMU pitch
 8005c56:	4bac      	ldr	r3, [pc, #688]	@ (8005f08 <PID_EG+0x300>)
 8005c58:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005c5c:	a3a6      	add	r3, pc, #664	@ (adr r3, 8005ef8 <PID_EG+0x2f0>)
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	f7fa fcc9 	bl	80005f8 <__aeabi_dmul>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	double roll = sensorData[2] * 300; // IMU roll
 8005c6e:	4ba6      	ldr	r3, [pc, #664]	@ (8005f08 <PID_EG+0x300>)
 8005c70:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005c74:	a3a0      	add	r3, pc, #640	@ (adr r3, 8005ef8 <PID_EG+0x2f0>)
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	f7fa fcbd 	bl	80005f8 <__aeabi_dmul>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double error_x = setpoint.x - currentPosition.x;
 8005c86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005c8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c8e:	f7fa fafb 	bl	8000288 <__aeabi_dsub>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
    double error_y = setpoint.y - currentPosition.y;
 8005c9a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8005c9e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8005ca2:	f7fa faf1 	bl	8000288 <__aeabi_dsub>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    double current_heading_rad = currentPosition.h * M_PI / 180.0;
 8005cae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005cb2:	a393      	add	r3, pc, #588	@ (adr r3, 8005f00 <PID_EG+0x2f8>)
 8005cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb8:	f7fa fc9e 	bl	80005f8 <__aeabi_dmul>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	4b90      	ldr	r3, [pc, #576]	@ (8005f0c <PID_EG+0x304>)
 8005cca:	f7fa fdbf 	bl	800084c <__aeabi_ddiv>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

    double distance = hypot(error_x, error_y);
 8005cd6:	ed97 1b26 	vldr	d1, [r7, #152]	@ 0x98
 8005cda:	ed97 0b28 	vldr	d0, [r7, #160]	@ 0xa0
 8005cde:	f009 ff87 	bl	800fbf0 <hypot>
 8005ce2:	ed87 0b22 	vstr	d0, [r7, #136]	@ 0x88
    double velocityFactor = fmin(distance, maxVelocity) / distance;
 8005ce6:	ed97 1b32 	vldr	d1, [r7, #200]	@ 0xc8
 8005cea:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 8005cee:	f00a f890 	bl	800fe12 <fmin>
 8005cf2:	ec51 0b10 	vmov	r0, r1, d0
 8005cf6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005cfa:	f7fa fda7 	bl	800084c <__aeabi_ddiv>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    double Vx_local = PID_controller(setpoint.x, currentPosition.x, Kp, Ki, Kd) * velocityFactor;
 8005d06:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8005d0a:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8005d0e:	ed97 4b04 	vldr	d4, [r7, #16]
 8005d12:	ed97 3b06 	vldr	d3, [r7, #24]
 8005d16:	ed97 2b08 	vldr	d2, [r7, #32]
 8005d1a:	eeb0 1a46 	vmov.f32	s2, s12
 8005d1e:	eef0 1a66 	vmov.f32	s3, s13
 8005d22:	eeb0 0a47 	vmov.f32	s0, s14
 8005d26:	eef0 0a67 	vmov.f32	s1, s15
 8005d2a:	f7ff fb59 	bl	80053e0 <PID_controller>
 8005d2e:	ec53 2b10 	vmov	r2, r3, d0
 8005d32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d36:	f7fa fc5f 	bl	80005f8 <__aeabi_dmul>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    double Vy_local = PID_controller(setpoint.y, currentPosition.y, Kp, Ki, Kd) * velocityFactor;
 8005d42:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8005d46:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8005d4a:	ed97 4b04 	vldr	d4, [r7, #16]
 8005d4e:	ed97 3b06 	vldr	d3, [r7, #24]
 8005d52:	ed97 2b08 	vldr	d2, [r7, #32]
 8005d56:	eeb0 1a46 	vmov.f32	s2, s12
 8005d5a:	eef0 1a66 	vmov.f32	s3, s13
 8005d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8005d62:	eef0 0a67 	vmov.f32	s1, s15
 8005d66:	f7ff fb3b 	bl	80053e0 <PID_controller>
 8005d6a:	ec53 2b10 	vmov	r2, r3, d0
 8005d6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d72:	f7fa fc41 	bl	80005f8 <__aeabi_dmul>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    double Vx = Vx_local * cos(current_heading_rad) - Vy_local * sin(current_heading_rad);
 8005d7e:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8005d82:	f009 ff69 	bl	800fc58 <cos>
 8005d86:	ec51 0b10 	vmov	r0, r1, d0
 8005d8a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8005d8e:	f7fa fc33 	bl	80005f8 <__aeabi_dmul>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4614      	mov	r4, r2
 8005d98:	461d      	mov	r5, r3
 8005d9a:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8005d9e:	f009 ffaf 	bl	800fd00 <sin>
 8005da2:	ec51 0b10 	vmov	r0, r1, d0
 8005da6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005daa:	f7fa fc25 	bl	80005f8 <__aeabi_dmul>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4620      	mov	r0, r4
 8005db4:	4629      	mov	r1, r5
 8005db6:	f7fa fa67 	bl	8000288 <__aeabi_dsub>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double Vy = Vx_local * sin(current_heading_rad) + Vy_local * cos(current_heading_rad);
 8005dc2:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8005dc6:	f009 ff9b 	bl	800fd00 <sin>
 8005dca:	ec51 0b10 	vmov	r0, r1, d0
 8005dce:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8005dd2:	f7fa fc11 	bl	80005f8 <__aeabi_dmul>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4614      	mov	r4, r2
 8005ddc:	461d      	mov	r5, r3
 8005dde:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8005de2:	f009 ff39 	bl	800fc58 <cos>
 8005de6:	ec51 0b10 	vmov	r0, r1, d0
 8005dea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005dee:	f7fa fc03 	bl	80005f8 <__aeabi_dmul>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4620      	mov	r0, r4
 8005df8:	4629      	mov	r1, r5
 8005dfa:	f7fa fa47 	bl	800028c <__adddf3>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double W = PID_controllerH(setpoint.h, currentPosition.h, KpH);
 8005e06:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8005e0a:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 8005e0e:	ed97 2b02 	vldr	d2, [r7, #8]
 8005e12:	eeb0 1a46 	vmov.f32	s2, s12
 8005e16:	eef0 1a66 	vmov.f32	s3, s13
 8005e1a:	eeb0 0a47 	vmov.f32	s0, s14
 8005e1e:	eef0 0a67 	vmov.f32	s1, s15
 8005e22:	f7ff fb67 	bl	80054f4 <PID_controllerH>
 8005e26:	eeb0 7a40 	vmov.f32	s14, s0
 8005e2a:	eef0 7a60 	vmov.f32	s15, s1
 8005e2e:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

    if(roll > 0)	{Vx -= roll;}
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8005e3e:	f7fa fe6b 	bl	8000b18 <__aeabi_dcmpgt>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <PID_EG+0x256>
 8005e48:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8005e4c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8005e50:	f7fa fa1a 	bl	8000288 <__aeabi_dsub>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8005e5c:	e009      	b.n	8005e72 <PID_EG+0x26a>
    else			{Vx += roll;}
 8005e5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8005e62:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8005e66:	f7fa fa11 	bl	800028c <__adddf3>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    if(pitch > 0)	{Vy += pitch;}
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e7e:	f7fa fe4b 	bl	8000b18 <__aeabi_dcmpgt>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <PID_EG+0x296>
 8005e88:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8005e8c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8005e90:	f7fa f9fc 	bl	800028c <__adddf3>
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8005e9c:	e009      	b.n	8005eb2 <PID_EG+0x2aa>
    else			{Vy -= pitch;}
 8005e9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8005ea2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8005ea6:	f7fa f9ef 	bl	8000288 <__aeabi_dsub>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
 8005eb2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8005eb6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8005eba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005ebe:	ed97 0b00 	vldr	d0, [r7]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff fbb4 	bl	8005630 <smoothVelocity>
//    trying(Vx, Vy, W, setpoint.h, KpH);
    Inverse_Kinematics(Vx, Vy, W);
 8005ec8:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8005ecc:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8005ed0:	ed97 5b10 	vldr	d5, [r7, #64]	@ 0x40
 8005ed4:	eeb0 2a45 	vmov.f32	s4, s10
 8005ed8:	eef0 2a65 	vmov.f32	s5, s11
 8005edc:	eeb0 1a46 	vmov.f32	s2, s12
 8005ee0:	eef0 1a66 	vmov.f32	s3, s13
 8005ee4:	eeb0 0a47 	vmov.f32	s0, s14
 8005ee8:	eef0 0a67 	vmov.f32	s1, s15
 8005eec:	f7fb f92c 	bl	8001148 <Inverse_Kinematics>
}
 8005ef0:	bf00      	nop
 8005ef2:	37b8      	adds	r7, #184	@ 0xb8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ef8:	00000000 	.word	0x00000000
 8005efc:	4072c000 	.word	0x4072c000
 8005f00:	54442d18 	.word	0x54442d18
 8005f04:	400921fb 	.word	0x400921fb
 8005f08:	20000528 	.word	0x20000528
 8005f0c:	40668000 	.word	0x40668000

08005f10 <PID_moveToCoordinate>:
    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
    Inverse_Kinematics(Vx, Vy, W);
}

void PID_moveToCoordinate(external_global *setpoint, PID_parameter *parameters, uint16_t numPoints)
{
 8005f10:	b5b0      	push	{r4, r5, r7, lr}
 8005f12:	b0a2      	sub	sp, #136	@ 0x88
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	80fb      	strh	r3, [r7, #6]
	static uint8_t thread = 0;
	if(thread >= numPoints)
 8005f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f48 <PID_moveToCoordinate+0x38>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d810      	bhi.n	8005f4c <PID_moveToCoordinate+0x3c>
	{
		Inverse_Kinematics(0, 0, 0);
 8005f2a:	ed9f 2b05 	vldr	d2, [pc, #20]	@ 8005f40 <PID_moveToCoordinate+0x30>
 8005f2e:	ed9f 1b04 	vldr	d1, [pc, #16]	@ 8005f40 <PID_moveToCoordinate+0x30>
 8005f32:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8005f40 <PID_moveToCoordinate+0x30>
 8005f36:	f7fb f907 	bl	8001148 <Inverse_Kinematics>
 8005f3a:	e21d      	b.n	8006378 <PID_moveToCoordinate+0x468>
 8005f3c:	f3af 8000 	nop.w
	...
 8005f48:	20000700 	.word	0x20000700
		return;
	}
	external_global currentPosition = odometry_eg();
 8005f4c:	f7ff f8b8 	bl	80050c0 <odometry_eg>
 8005f50:	eeb0 5a40 	vmov.f32	s10, s0
 8005f54:	eef0 5a60 	vmov.f32	s11, s1
 8005f58:	eeb0 6a41 	vmov.f32	s12, s2
 8005f5c:	eef0 6a61 	vmov.f32	s13, s3
 8005f60:	eeb0 7a42 	vmov.f32	s14, s4
 8005f64:	eef0 7a62 	vmov.f32	s15, s5
 8005f68:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8005f6c:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8005f70:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

	double pitch = sensorData[1] * 300; // IMU pitch
 8005f74:	4bbc      	ldr	r3, [pc, #752]	@ (8006268 <PID_moveToCoordinate+0x358>)
 8005f76:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005f7a:	a3b7      	add	r3, pc, #732	@ (adr r3, 8006258 <PID_moveToCoordinate+0x348>)
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	f7fa fb3a 	bl	80005f8 <__aeabi_dmul>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	double roll = sensorData[2] * 300; // IMU roll
 8005f8c:	4bb6      	ldr	r3, [pc, #728]	@ (8006268 <PID_moveToCoordinate+0x358>)
 8005f8e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005f92:	a3b1      	add	r3, pc, #708	@ (adr r3, 8006258 <PID_moveToCoordinate+0x348>)
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	f7fa fb2e 	bl	80005f8 <__aeabi_dmul>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

    double error_x = setpoint[thread].x - currentPosition.x;
 8005fa4:	4bb1      	ldr	r3, [pc, #708]	@ (800626c <PID_moveToCoordinate+0x35c>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	4613      	mov	r3, r2
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	4413      	add	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fc0:	f7fa f962 	bl	8000288 <__aeabi_dsub>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    double error_y = setpoint[thread].y - currentPosition.y;
 8005fcc:	4ba7      	ldr	r3, [pc, #668]	@ (800626c <PID_moveToCoordinate+0x35c>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	4413      	add	r3, r2
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	461a      	mov	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005fe4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005fe8:	f7fa f94e 	bl	8000288 <__aeabi_dsub>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    double current_heading_rad = currentPosition.h * M_PI / 180.0;
 8005ff4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8005ff8:	a399      	add	r3, pc, #612	@ (adr r3, 8006260 <PID_moveToCoordinate+0x350>)
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	f7fa fafb 	bl	80005f8 <__aeabi_dmul>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4610      	mov	r0, r2
 8006008:	4619      	mov	r1, r3
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	4b98      	ldr	r3, [pc, #608]	@ (8006270 <PID_moveToCoordinate+0x360>)
 8006010:	f7fa fc1c 	bl	800084c <__aeabi_ddiv>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

    double distance = hypot(error_x, error_y);
 800601c:	ed97 1b1a 	vldr	d1, [r7, #104]	@ 0x68
 8006020:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8006024:	f009 fde4 	bl	800fbf0 <hypot>
 8006028:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
    double velocityFactor = fmin(distance, parameters[thread].maxVelocity) / distance;
 800602c:	4b8f      	ldr	r3, [pc, #572]	@ (800626c <PID_moveToCoordinate+0x35c>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	019b      	lsls	r3, r3, #6
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	4413      	add	r3, r2
 8006036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006038:	4618      	mov	r0, r3
 800603a:	f7fa fa73 	bl	8000524 <__aeabi_i2d>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	ec43 2b11 	vmov	d1, r2, r3
 8006046:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 800604a:	f009 fee2 	bl	800fe12 <fmin>
 800604e:	ec51 0b10 	vmov	r0, r1, d0
 8006052:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006056:	f7fa fbf9 	bl	800084c <__aeabi_ddiv>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    double Vx_local = PID_controller(setpoint[thread].x, currentPosition.x, parameters[thread].KP, parameters[thread].KI, parameters[thread].KD) * velocityFactor;
 8006062:	4b82      	ldr	r3, [pc, #520]	@ (800626c <PID_moveToCoordinate+0x35c>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	4613      	mov	r3, r2
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	4413      	add	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	461a      	mov	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4413      	add	r3, r2
 8006076:	ed93 7b00 	vldr	d7, [r3]
 800607a:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800607e:	4b7b      	ldr	r3, [pc, #492]	@ (800626c <PID_moveToCoordinate+0x35c>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	019b      	lsls	r3, r3, #6
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	4413      	add	r3, r2
 8006088:	ed93 5b00 	vldr	d5, [r3]
 800608c:	4b77      	ldr	r3, [pc, #476]	@ (800626c <PID_moveToCoordinate+0x35c>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	019b      	lsls	r3, r3, #6
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	4413      	add	r3, r2
 8006096:	ed93 3b02 	vldr	d3, [r3, #8]
 800609a:	4b74      	ldr	r3, [pc, #464]	@ (800626c <PID_moveToCoordinate+0x35c>)
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	019b      	lsls	r3, r3, #6
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	4413      	add	r3, r2
 80060a4:	ed93 4b04 	vldr	d4, [r3, #16]
 80060a8:	eeb0 2a45 	vmov.f32	s4, s10
 80060ac:	eef0 2a65 	vmov.f32	s5, s11
 80060b0:	eeb0 1a46 	vmov.f32	s2, s12
 80060b4:	eef0 1a66 	vmov.f32	s3, s13
 80060b8:	eeb0 0a47 	vmov.f32	s0, s14
 80060bc:	eef0 0a67 	vmov.f32	s1, s15
 80060c0:	f7ff f98e 	bl	80053e0 <PID_controller>
 80060c4:	ec53 2b10 	vmov	r2, r3, d0
 80060c8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80060cc:	f7fa fa94 	bl	80005f8 <__aeabi_dmul>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double Vy_local = PID_controller(setpoint[thread].y, currentPosition.y, parameters[thread].KP, parameters[thread].KI, parameters[thread].KD) * velocityFactor;
 80060d8:	4b64      	ldr	r3, [pc, #400]	@ (800626c <PID_moveToCoordinate+0x35c>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	4613      	mov	r3, r2
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	4413      	add	r3, r2
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	461a      	mov	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	ed93 7b02 	vldr	d7, [r3, #8]
 80060f0:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 80060f4:	4b5d      	ldr	r3, [pc, #372]	@ (800626c <PID_moveToCoordinate+0x35c>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	019b      	lsls	r3, r3, #6
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	4413      	add	r3, r2
 80060fe:	ed93 5b00 	vldr	d5, [r3]
 8006102:	4b5a      	ldr	r3, [pc, #360]	@ (800626c <PID_moveToCoordinate+0x35c>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	019b      	lsls	r3, r3, #6
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	4413      	add	r3, r2
 800610c:	ed93 3b02 	vldr	d3, [r3, #8]
 8006110:	4b56      	ldr	r3, [pc, #344]	@ (800626c <PID_moveToCoordinate+0x35c>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	019b      	lsls	r3, r3, #6
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	4413      	add	r3, r2
 800611a:	ed93 4b04 	vldr	d4, [r3, #16]
 800611e:	eeb0 2a45 	vmov.f32	s4, s10
 8006122:	eef0 2a65 	vmov.f32	s5, s11
 8006126:	eeb0 1a46 	vmov.f32	s2, s12
 800612a:	eef0 1a66 	vmov.f32	s3, s13
 800612e:	eeb0 0a47 	vmov.f32	s0, s14
 8006132:	eef0 0a67 	vmov.f32	s1, s15
 8006136:	f7ff f953 	bl	80053e0 <PID_controller>
 800613a:	ec53 2b10 	vmov	r2, r3, d0
 800613e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8006142:	f7fa fa59 	bl	80005f8 <__aeabi_dmul>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    double Vx = Vx_local * cos(current_heading_rad) - Vy_local * sin(current_heading_rad);
 800614e:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8006152:	f009 fd81 	bl	800fc58 <cos>
 8006156:	ec51 0b10 	vmov	r0, r1, d0
 800615a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800615e:	f7fa fa4b 	bl	80005f8 <__aeabi_dmul>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4614      	mov	r4, r2
 8006168:	461d      	mov	r5, r3
 800616a:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 800616e:	f009 fdc7 	bl	800fd00 <sin>
 8006172:	ec51 0b10 	vmov	r0, r1, d0
 8006176:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800617a:	f7fa fa3d 	bl	80005f8 <__aeabi_dmul>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4620      	mov	r0, r4
 8006184:	4629      	mov	r1, r5
 8006186:	f7fa f87f 	bl	8000288 <__aeabi_dsub>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double Vy = Vx_local * sin(current_heading_rad) + Vy_local * cos(current_heading_rad);
 8006192:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8006196:	f009 fdb3 	bl	800fd00 <sin>
 800619a:	ec51 0b10 	vmov	r0, r1, d0
 800619e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061a2:	f7fa fa29 	bl	80005f8 <__aeabi_dmul>
 80061a6:	4602      	mov	r2, r0
 80061a8:	460b      	mov	r3, r1
 80061aa:	4614      	mov	r4, r2
 80061ac:	461d      	mov	r5, r3
 80061ae:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80061b2:	f009 fd51 	bl	800fc58 <cos>
 80061b6:	ec51 0b10 	vmov	r0, r1, d0
 80061ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80061be:	f7fa fa1b 	bl	80005f8 <__aeabi_dmul>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4620      	mov	r0, r4
 80061c8:	4629      	mov	r1, r5
 80061ca:	f7fa f85f 	bl	800028c <__adddf3>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double W = PID_controllerH(setpoint[thread].h, currentPosition.h, parameters[thread].KpH);
 80061d6:	4b25      	ldr	r3, [pc, #148]	@ (800626c <PID_moveToCoordinate+0x35c>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	4613      	mov	r3, r2
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	4413      	add	r3, r2
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	461a      	mov	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4413      	add	r3, r2
 80061ea:	ed93 7b04 	vldr	d7, [r3, #16]
 80061ee:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 80061f2:	4b1e      	ldr	r3, [pc, #120]	@ (800626c <PID_moveToCoordinate+0x35c>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	019b      	lsls	r3, r3, #6
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	4413      	add	r3, r2
 80061fc:	ed93 5b06 	vldr	d5, [r3, #24]
 8006200:	eeb0 2a45 	vmov.f32	s4, s10
 8006204:	eef0 2a65 	vmov.f32	s5, s11
 8006208:	eeb0 1a46 	vmov.f32	s2, s12
 800620c:	eef0 1a66 	vmov.f32	s3, s13
 8006210:	eeb0 0a47 	vmov.f32	s0, s14
 8006214:	eef0 0a67 	vmov.f32	s1, s15
 8006218:	f7ff f96c 	bl	80054f4 <PID_controllerH>
 800621c:	eeb0 7a40 	vmov.f32	s14, s0
 8006220:	eef0 7a60 	vmov.f32	s15, s1
 8006224:	ed87 7b04 	vstr	d7, [r7, #16]

    if(roll > 0)	{Vx -= roll;}
 8006228:	f04f 0200 	mov.w	r2, #0
 800622c:	f04f 0300 	mov.w	r3, #0
 8006230:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8006234:	f7fa fc70 	bl	8000b18 <__aeabi_dcmpgt>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01a      	beq.n	8006274 <PID_moveToCoordinate+0x364>
 800623e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006242:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8006246:	f7fa f81f 	bl	8000288 <__aeabi_dsub>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8006252:	e019      	b.n	8006288 <PID_moveToCoordinate+0x378>
 8006254:	f3af 8000 	nop.w
 8006258:	00000000 	.word	0x00000000
 800625c:	4072c000 	.word	0x4072c000
 8006260:	54442d18 	.word	0x54442d18
 8006264:	400921fb 	.word	0x400921fb
 8006268:	20000528 	.word	0x20000528
 800626c:	20000700 	.word	0x20000700
 8006270:	40668000 	.word	0x40668000
    else			{Vx += roll;}
 8006274:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006278:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800627c:	f7fa f806 	bl	800028c <__adddf3>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if(pitch > 0)	{Vy += pitch;}
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006294:	f7fa fc40 	bl	8000b18 <__aeabi_dcmpgt>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <PID_moveToCoordinate+0x3a4>
 800629e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80062a2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80062a6:	f7f9 fff1 	bl	800028c <__adddf3>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80062b2:	e009      	b.n	80062c8 <PID_moveToCoordinate+0x3b8>
    else			{Vy -= pitch;}
 80062b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80062b8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80062bc:	f7f9 ffe4 	bl	8000288 <__aeabi_dsub>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if(atTargetEG(setpoint[thread], currentPosition, parameters[thread].xyTolerance, parameters[thread].hTolerance))
 80062c8:	4b2d      	ldr	r3, [pc, #180]	@ (8006380 <PID_moveToCoordinate+0x470>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	461a      	mov	r2, r3
 80062ce:	4613      	mov	r3, r2
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	4413      	add	r3, r2
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	461a      	mov	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	4a28      	ldr	r2, [pc, #160]	@ (8006380 <PID_moveToCoordinate+0x470>)
 80062de:	7812      	ldrb	r2, [r2, #0]
 80062e0:	0192      	lsls	r2, r2, #6
 80062e2:	68b9      	ldr	r1, [r7, #8]
 80062e4:	440a      	add	r2, r1
 80062e6:	ed92 6b0c 	vldr	d6, [r2, #48]	@ 0x30
 80062ea:	4a25      	ldr	r2, [pc, #148]	@ (8006380 <PID_moveToCoordinate+0x470>)
 80062ec:	7812      	ldrb	r2, [r2, #0]
 80062ee:	0192      	lsls	r2, r2, #6
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	440a      	add	r2, r1
 80062f4:	ed92 7b0e 	vldr	d7, [r2, #56]	@ 0x38
 80062f8:	ed97 3b0a 	vldr	d3, [r7, #40]	@ 0x28
 80062fc:	ed97 4b0c 	vldr	d4, [r7, #48]	@ 0x30
 8006300:	ed97 5b0e 	vldr	d5, [r7, #56]	@ 0x38
 8006304:	ed93 0b00 	vldr	d0, [r3]
 8006308:	ed93 1b02 	vldr	d1, [r3, #8]
 800630c:	ed93 2b04 	vldr	d2, [r3, #16]
 8006310:	f7ff fa2c 	bl	800576c <atTargetEG>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d006      	beq.n	8006328 <PID_moveToCoordinate+0x418>
    {
    	thread++;
 800631a:	4b19      	ldr	r3, [pc, #100]	@ (8006380 <PID_moveToCoordinate+0x470>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	3301      	adds	r3, #1
 8006320:	b2da      	uxtb	r2, r3
 8006322:	4b17      	ldr	r3, [pc, #92]	@ (8006380 <PID_moveToCoordinate+0x470>)
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	e027      	b.n	8006378 <PID_moveToCoordinate+0x468>
    }
    else
    {
		smoothVelocity(&Vx, &Vy, &W, parameters[thread].smoothingFactor);
 8006328:	4b15      	ldr	r3, [pc, #84]	@ (8006380 <PID_moveToCoordinate+0x470>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	019b      	lsls	r3, r3, #6
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	4413      	add	r3, r2
 8006332:	ed93 7b08 	vldr	d7, [r3, #32]
 8006336:	f107 0210 	add.w	r2, r7, #16
 800633a:	f107 0118 	add.w	r1, r7, #24
 800633e:	f107 0320 	add.w	r3, r7, #32
 8006342:	eeb0 0a47 	vmov.f32	s0, s14
 8006346:	eef0 0a67 	vmov.f32	s1, s15
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff f970 	bl	8005630 <smoothVelocity>
//		trying(Vx, Vy, W, setpoint[thread].h, parameters[thread].KpH);
		Inverse_Kinematics(Vx, Vy, W);
 8006350:	ed97 7b08 	vldr	d7, [r7, #32]
 8006354:	ed97 6b06 	vldr	d6, [r7, #24]
 8006358:	ed97 5b04 	vldr	d5, [r7, #16]
 800635c:	eeb0 2a45 	vmov.f32	s4, s10
 8006360:	eef0 2a65 	vmov.f32	s5, s11
 8006364:	eeb0 1a46 	vmov.f32	s2, s12
 8006368:	eef0 1a66 	vmov.f32	s3, s13
 800636c:	eeb0 0a47 	vmov.f32	s0, s14
 8006370:	eef0 0a67 	vmov.f32	s1, s15
 8006374:	f7fa fee8 	bl	8001148 <Inverse_Kinematics>
    }
}
 8006378:	3788      	adds	r7, #136	@ 0x88
 800637a:	46bd      	mov	sp, r7
 800637c:	bdb0      	pop	{r4, r5, r7, pc}
 800637e:	bf00      	nop
 8006380:	20000700 	.word	0x20000700
 8006384:	00000000 	.word	0x00000000

08006388 <focusToTheBall>:
    double W = PID_controllerH(setpoint_h, currentPosition.h, KpH);
    putar(0, 0, W);
}

void focusToTheBall()
{
 8006388:	b5b0      	push	{r4, r5, r7, lr}
 800638a:	b08c      	sub	sp, #48	@ 0x30
 800638c:	af02      	add	r7, sp, #8
    int ballDistance = camera[0] * 10; // convert to mm
 800638e:	4b40      	ldr	r3, [pc, #256]	@ (8006490 <focusToTheBall+0x108>)
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	627b      	str	r3, [r7, #36]	@ 0x24
    int ballAngle = camera[1];
 800639c:	4b3c      	ldr	r3, [pc, #240]	@ (8006490 <focusToTheBall+0x108>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	623b      	str	r3, [r7, #32]
    int ballExistence = camera[2];
 80063a2:	4b3b      	ldr	r3, [pc, #236]	@ (8006490 <focusToTheBall+0x108>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	61fb      	str	r3, [r7, #28]
    int yBALL = cos(ballAngle * M_PI / 180.0) * ballDistance;
 80063a8:	6a38      	ldr	r0, [r7, #32]
 80063aa:	f7fa f8bb 	bl	8000524 <__aeabi_i2d>
 80063ae:	a336      	add	r3, pc, #216	@ (adr r3, 8006488 <focusToTheBall+0x100>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	f7fa f920 	bl	80005f8 <__aeabi_dmul>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4610      	mov	r0, r2
 80063be:	4619      	mov	r1, r3
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	4b33      	ldr	r3, [pc, #204]	@ (8006494 <focusToTheBall+0x10c>)
 80063c6:	f7fa fa41 	bl	800084c <__aeabi_ddiv>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	ec43 2b17 	vmov	d7, r2, r3
 80063d2:	eeb0 0a47 	vmov.f32	s0, s14
 80063d6:	eef0 0a67 	vmov.f32	s1, s15
 80063da:	f009 fc3d 	bl	800fc58 <cos>
 80063de:	ec55 4b10 	vmov	r4, r5, d0
 80063e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80063e4:	f7fa f89e 	bl	8000524 <__aeabi_i2d>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4620      	mov	r0, r4
 80063ee:	4629      	mov	r1, r5
 80063f0:	f7fa f902 	bl	80005f8 <__aeabi_dmul>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4610      	mov	r0, r2
 80063fa:	4619      	mov	r1, r3
 80063fc:	f7fa fbac 	bl	8000b58 <__aeabi_d2iz>
 8006400:	4603      	mov	r3, r0
 8006402:	61bb      	str	r3, [r7, #24]

    int gndtoCam = 518; // in mm
 8006404:	f240 2306 	movw	r3, #518	@ 0x206
 8006408:	617b      	str	r3, [r7, #20]
//    static bool increasing = true;
//    static int i = 95;

    if(ballExistence != 0)
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d034      	beq.n	800647a <focusToTheBall+0xf2>
    {
        double focus = atan2(yBALL, gndtoCam) * 180.0 / M_PI;
 8006410:	69b8      	ldr	r0, [r7, #24]
 8006412:	f7fa f887 	bl	8000524 <__aeabi_i2d>
 8006416:	4604      	mov	r4, r0
 8006418:	460d      	mov	r5, r1
 800641a:	6978      	ldr	r0, [r7, #20]
 800641c:	f7fa f882 	bl	8000524 <__aeabi_i2d>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	ec43 2b11 	vmov	d1, r2, r3
 8006428:	ec45 4b10 	vmov	d0, r4, r5
 800642c:	f009 fbdc 	bl	800fbe8 <atan2>
 8006430:	ec51 0b10 	vmov	r0, r1, d0
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	4b16      	ldr	r3, [pc, #88]	@ (8006494 <focusToTheBall+0x10c>)
 800643a:	f7fa f8dd 	bl	80005f8 <__aeabi_dmul>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4610      	mov	r0, r2
 8006444:	4619      	mov	r1, r3
 8006446:	a310      	add	r3, pc, #64	@ (adr r3, 8006488 <focusToTheBall+0x100>)
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f7fa f9fe 	bl	800084c <__aeabi_ddiv>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	e9c7 2302 	strd	r2, r3, [r7, #8]
        int focusMapping = map(0, 90, 45, 130, focus); // 45, 130
 8006458:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800645c:	f7fa fb7c 	bl	8000b58 <__aeabi_d2iz>
 8006460:	4603      	mov	r3, r0
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	2382      	movs	r3, #130	@ 0x82
 8006466:	222d      	movs	r2, #45	@ 0x2d
 8006468:	215a      	movs	r1, #90	@ 0x5a
 800646a:	2000      	movs	r0, #0
 800646c:	f7ff f89c 	bl	80055a8 <map>
 8006470:	6078      	str	r0, [r7, #4]
        servo_write(focusMapping);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7ff fa2c 	bl	80058d0 <servo_write>
//    		i-=5;
//    		if(i <= 95) increasing = true;
//    	}
//    	servo_write(i);
    }
}
 8006478:	e002      	b.n	8006480 <focusToTheBall+0xf8>
    	servo_write(97); // 100
 800647a:	2061      	movs	r0, #97	@ 0x61
 800647c:	f7ff fa28 	bl	80058d0 <servo_write>
}
 8006480:	bf00      	nop
 8006482:	3728      	adds	r7, #40	@ 0x28
 8006484:	46bd      	mov	sp, r7
 8006486:	bdb0      	pop	{r4, r5, r7, pc}
 8006488:	54442d18 	.word	0x54442d18
 800648c:	400921fb 	.word	0x400921fb
 8006490:	2000057c 	.word	0x2000057c
 8006494:	40668000 	.word	0x40668000

08006498 <initializeSilos>:

// Initialize silos array
void initializeSilos()
{
 8006498:	b5b0      	push	{r4, r5, r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_SILOS; i++)
 800649e:	2300      	movs	r3, #0
 80064a0:	607b      	str	r3, [r7, #4]
 80064a2:	e092      	b.n	80065ca <initializeSilos+0x132>
    {
        silos[i].distance = SILO_NOT_DETECTED_DISTANCE;
 80064a4:	4a50      	ldr	r2, [pc, #320]	@ (80065e8 <initializeSilos+0x150>)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	015b      	lsls	r3, r3, #5
 80064aa:	4413      	add	r3, r2
 80064ac:	4a4f      	ldr	r2, [pc, #316]	@ (80065ec <initializeSilos+0x154>)
 80064ae:	601a      	str	r2, [r3, #0]
        silos[i].angle = SILO_NOT_DETECTED_ANGLE;
 80064b0:	4a4d      	ldr	r2, [pc, #308]	@ (80065e8 <initializeSilos+0x150>)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	015b      	lsls	r3, r3, #5
 80064b6:	4413      	add	r3, r2
 80064b8:	3304      	adds	r3, #4
 80064ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80064be:	601a      	str	r2, [r3, #0]
        silos[i].detected = false;
 80064c0:	4a49      	ldr	r2, [pc, #292]	@ (80065e8 <initializeSilos+0x150>)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	015b      	lsls	r3, r3, #5
 80064c6:	4413      	add	r3, r2
 80064c8:	3308      	adds	r3, #8
 80064ca:	2200      	movs	r2, #0
 80064cc:	701a      	strb	r2, [r3, #0]
        silos[i].ballInSilo = 0;
 80064ce:	4a46      	ldr	r2, [pc, #280]	@ (80065e8 <initializeSilos+0x150>)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	015b      	lsls	r3, r3, #5
 80064d4:	4413      	add	r3, r2
 80064d6:	330c      	adds	r3, #12
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]
        silos[i].x = silos[i].distance * sin(silos[i].angle * M_PI/180.0);
 80064dc:	4a42      	ldr	r2, [pc, #264]	@ (80065e8 <initializeSilos+0x150>)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	015b      	lsls	r3, r3, #5
 80064e2:	4413      	add	r3, r2
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fa f81c 	bl	8000524 <__aeabi_i2d>
 80064ec:	4604      	mov	r4, r0
 80064ee:	460d      	mov	r5, r1
 80064f0:	4a3d      	ldr	r2, [pc, #244]	@ (80065e8 <initializeSilos+0x150>)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	015b      	lsls	r3, r3, #5
 80064f6:	4413      	add	r3, r2
 80064f8:	3304      	adds	r3, #4
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fa f811 	bl	8000524 <__aeabi_i2d>
 8006502:	a337      	add	r3, pc, #220	@ (adr r3, 80065e0 <initializeSilos+0x148>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	f7fa f876 	bl	80005f8 <__aeabi_dmul>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4610      	mov	r0, r2
 8006512:	4619      	mov	r1, r3
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	4b35      	ldr	r3, [pc, #212]	@ (80065f0 <initializeSilos+0x158>)
 800651a:	f7fa f997 	bl	800084c <__aeabi_ddiv>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	ec43 2b17 	vmov	d7, r2, r3
 8006526:	eeb0 0a47 	vmov.f32	s0, s14
 800652a:	eef0 0a67 	vmov.f32	s1, s15
 800652e:	f009 fbe7 	bl	800fd00 <sin>
 8006532:	ec53 2b10 	vmov	r2, r3, d0
 8006536:	4620      	mov	r0, r4
 8006538:	4629      	mov	r1, r5
 800653a:	f7fa f85d 	bl	80005f8 <__aeabi_dmul>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	4829      	ldr	r0, [pc, #164]	@ (80065e8 <initializeSilos+0x150>)
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	0149      	lsls	r1, r1, #5
 8006548:	4401      	add	r1, r0
 800654a:	3110      	adds	r1, #16
 800654c:	e9c1 2300 	strd	r2, r3, [r1]
        silos[i].y = silos[i].distance * cos(silos[i].angle * M_PI/180.0);
 8006550:	4a25      	ldr	r2, [pc, #148]	@ (80065e8 <initializeSilos+0x150>)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	015b      	lsls	r3, r3, #5
 8006556:	4413      	add	r3, r2
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f7f9 ffe2 	bl	8000524 <__aeabi_i2d>
 8006560:	4604      	mov	r4, r0
 8006562:	460d      	mov	r5, r1
 8006564:	4a20      	ldr	r2, [pc, #128]	@ (80065e8 <initializeSilos+0x150>)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	015b      	lsls	r3, r3, #5
 800656a:	4413      	add	r3, r2
 800656c:	3304      	adds	r3, #4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4618      	mov	r0, r3
 8006572:	f7f9 ffd7 	bl	8000524 <__aeabi_i2d>
 8006576:	a31a      	add	r3, pc, #104	@ (adr r3, 80065e0 <initializeSilos+0x148>)
 8006578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657c:	f7fa f83c 	bl	80005f8 <__aeabi_dmul>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4610      	mov	r0, r2
 8006586:	4619      	mov	r1, r3
 8006588:	f04f 0200 	mov.w	r2, #0
 800658c:	4b18      	ldr	r3, [pc, #96]	@ (80065f0 <initializeSilos+0x158>)
 800658e:	f7fa f95d 	bl	800084c <__aeabi_ddiv>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	ec43 2b17 	vmov	d7, r2, r3
 800659a:	eeb0 0a47 	vmov.f32	s0, s14
 800659e:	eef0 0a67 	vmov.f32	s1, s15
 80065a2:	f009 fb59 	bl	800fc58 <cos>
 80065a6:	ec53 2b10 	vmov	r2, r3, d0
 80065aa:	4620      	mov	r0, r4
 80065ac:	4629      	mov	r1, r5
 80065ae:	f7fa f823 	bl	80005f8 <__aeabi_dmul>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	480c      	ldr	r0, [pc, #48]	@ (80065e8 <initializeSilos+0x150>)
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	0149      	lsls	r1, r1, #5
 80065bc:	4401      	add	r1, r0
 80065be:	3118      	adds	r1, #24
 80065c0:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < MAX_SILOS; i++)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3301      	adds	r3, #1
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	f77f af69 	ble.w	80064a4 <initializeSilos+0xc>
    }
}
 80065d2:	bf00      	nop
 80065d4:	bf00      	nop
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bdb0      	pop	{r4, r5, r7, pc}
 80065dc:	f3af 8000 	nop.w
 80065e0:	54442d18 	.word	0x54442d18
 80065e4:	400921fb 	.word	0x400921fb
 80065e8:	20000660 	.word	0x20000660
 80065ec:	00018696 	.word	0x00018696
 80065f0:	40668000 	.word	0x40668000
 80065f4:	00000000 	.word	0x00000000

080065f8 <detectAndStoreSilo>:

Silo detectAndStoreSilo()
{
 80065f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80065fc:	b0a2      	sub	sp, #136	@ 0x88
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
    Silo bestSilo;
    bestSilo.distance = SILO_NOT_DETECTED_DISTANCE;
 8006602:	4bbb      	ldr	r3, [pc, #748]	@ (80068f0 <detectAndStoreSilo+0x2f8>)
 8006604:	663b      	str	r3, [r7, #96]	@ 0x60
    bestSilo.angle = SILO_NOT_DETECTED_ANGLE;
 8006606:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800660a:	667b      	str	r3, [r7, #100]	@ 0x64
    bestSilo.detected = false;
 800660c:	2300      	movs	r3, #0
 800660e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
    servo_write(120);
 8006612:	2078      	movs	r0, #120	@ 0x78
 8006614:	f7ff f95c 	bl	80058d0 <servo_write>

    external_global position = odometry_eg();
 8006618:	f7fe fd52 	bl	80050c0 <odometry_eg>
 800661c:	eeb0 5a40 	vmov.f32	s10, s0
 8006620:	eef0 5a60 	vmov.f32	s11, s1
 8006624:	eeb0 6a41 	vmov.f32	s12, s2
 8006628:	eef0 6a61 	vmov.f32	s13, s3
 800662c:	eeb0 7a42 	vmov.f32	s14, s4
 8006630:	eef0 7a62 	vmov.f32	s15, s5
 8006634:	ed87 5b12 	vstr	d5, [r7, #72]	@ 0x48
 8006638:	ed87 6b14 	vstr	d6, [r7, #80]	@ 0x50
 800663c:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    int siloDistances[MAX_SILOS] = {camera[3] * 10, camera[5] * 10, camera[7] * 10, camera[9] * 10, camera[11] * 10}; // convert to mm
 8006640:	4bac      	ldr	r3, [pc, #688]	@ (80068f4 <detectAndStoreSilo+0x2fc>)
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	637b      	str	r3, [r7, #52]	@ 0x34
 800664e:	4ba9      	ldr	r3, [pc, #676]	@ (80068f4 <detectAndStoreSilo+0x2fc>)
 8006650:	695a      	ldr	r2, [r3, #20]
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800665c:	4ba5      	ldr	r3, [pc, #660]	@ (80068f4 <detectAndStoreSilo+0x2fc>)
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800666a:	4ba2      	ldr	r3, [pc, #648]	@ (80068f4 <detectAndStoreSilo+0x2fc>)
 800666c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	643b      	str	r3, [r7, #64]	@ 0x40
 8006678:	4b9e      	ldr	r3, [pc, #632]	@ (80068f4 <detectAndStoreSilo+0x2fc>)
 800667a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	647b      	str	r3, [r7, #68]	@ 0x44
    int siloAngles[MAX_SILOS] = {camera[4], camera[6], camera[8], camera[10], camera[12]};
 8006686:	4b9b      	ldr	r3, [pc, #620]	@ (80068f4 <detectAndStoreSilo+0x2fc>)
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	623b      	str	r3, [r7, #32]
 800668c:	4b99      	ldr	r3, [pc, #612]	@ (80068f4 <detectAndStoreSilo+0x2fc>)
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	627b      	str	r3, [r7, #36]	@ 0x24
 8006692:	4b98      	ldr	r3, [pc, #608]	@ (80068f4 <detectAndStoreSilo+0x2fc>)
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006698:	4b96      	ldr	r3, [pc, #600]	@ (80068f4 <detectAndStoreSilo+0x2fc>)
 800669a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800669e:	4b95      	ldr	r3, [pc, #596]	@ (80068f4 <detectAndStoreSilo+0x2fc>)
 80066a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a2:	633b      	str	r3, [r7, #48]	@ 0x30

    int ballExistence[5] = {camera[13], camera[14], camera[15], camera[16], camera[17]};
 80066a4:	4b93      	ldr	r3, [pc, #588]	@ (80068f4 <detectAndStoreSilo+0x2fc>)
 80066a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	4b92      	ldr	r3, [pc, #584]	@ (80068f4 <detectAndStoreSilo+0x2fc>)
 80066ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	4b90      	ldr	r3, [pc, #576]	@ (80068f4 <detectAndStoreSilo+0x2fc>)
 80066b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b4:	617b      	str	r3, [r7, #20]
 80066b6:	4b8f      	ldr	r3, [pc, #572]	@ (80068f4 <detectAndStoreSilo+0x2fc>)
 80066b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ba:	61bb      	str	r3, [r7, #24]
 80066bc:	4b8d      	ldr	r3, [pc, #564]	@ (80068f4 <detectAndStoreSilo+0x2fc>)
 80066be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c0:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < MAX_SILOS; i++)
 80066c2:	2300      	movs	r3, #0
 80066c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066c8:	e0f8      	b.n	80068bc <detectAndStoreSilo+0x2c4>
    {
        if (siloDistances[i] != SILO_NOT_DETECTED_DISTANCE && siloAngles[i] != SILO_NOT_DETECTED_ANGLE)
 80066ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	3388      	adds	r3, #136	@ 0x88
 80066d2:	443b      	add	r3, r7
 80066d4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80066d8:	4a85      	ldr	r2, [pc, #532]	@ (80068f0 <detectAndStoreSilo+0x2f8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	f000 80e1 	beq.w	80068a2 <detectAndStoreSilo+0x2aa>
 80066e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	3388      	adds	r3, #136	@ 0x88
 80066e8:	443b      	add	r3, r7
 80066ea:	f853 3c68 	ldr.w	r3, [r3, #-104]
 80066ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80066f2:	4293      	cmp	r3, r2
 80066f4:	f000 80d5 	beq.w	80068a2 <detectAndStoreSilo+0x2aa>
        {
            silos[i].distance = siloDistances[i];
 80066f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	3388      	adds	r3, #136	@ 0x88
 8006700:	443b      	add	r3, r7
 8006702:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006706:	497c      	ldr	r1, [pc, #496]	@ (80068f8 <detectAndStoreSilo+0x300>)
 8006708:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800670c:	015b      	lsls	r3, r3, #5
 800670e:	440b      	add	r3, r1
 8006710:	601a      	str	r2, [r3, #0]
            silos[i].angle = siloAngles[i];
 8006712:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	3388      	adds	r3, #136	@ 0x88
 800671a:	443b      	add	r3, r7
 800671c:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8006720:	4975      	ldr	r1, [pc, #468]	@ (80068f8 <detectAndStoreSilo+0x300>)
 8006722:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006726:	015b      	lsls	r3, r3, #5
 8006728:	440b      	add	r3, r1
 800672a:	3304      	adds	r3, #4
 800672c:	601a      	str	r2, [r3, #0]
            silos[i].detected = true;
 800672e:	4a72      	ldr	r2, [pc, #456]	@ (80068f8 <detectAndStoreSilo+0x300>)
 8006730:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006734:	015b      	lsls	r3, r3, #5
 8006736:	4413      	add	r3, r2
 8006738:	3308      	adds	r3, #8
 800673a:	2201      	movs	r2, #1
 800673c:	701a      	strb	r2, [r3, #0]
            silos[i].ballInSilo = ballExistence[i];
 800673e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	3388      	adds	r3, #136	@ 0x88
 8006746:	443b      	add	r3, r7
 8006748:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 800674c:	496a      	ldr	r1, [pc, #424]	@ (80068f8 <detectAndStoreSilo+0x300>)
 800674e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006752:	015b      	lsls	r3, r3, #5
 8006754:	440b      	add	r3, r1
 8006756:	330c      	adds	r3, #12
 8006758:	601a      	str	r2, [r3, #0]

            // Calculate global coordinates of the detected silo
            silos[i].x = position.x + siloDistances[i] * sin(siloAngles[i] * M_PI / 180.0);
 800675a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800675e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	3388      	adds	r3, #136	@ 0x88
 8006766:	443b      	add	r3, r7
 8006768:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800676c:	4618      	mov	r0, r3
 800676e:	f7f9 fed9 	bl	8000524 <__aeabi_i2d>
 8006772:	4680      	mov	r8, r0
 8006774:	4689      	mov	r9, r1
 8006776:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	3388      	adds	r3, #136	@ 0x88
 800677e:	443b      	add	r3, r7
 8006780:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8006784:	4618      	mov	r0, r3
 8006786:	f7f9 fecd 	bl	8000524 <__aeabi_i2d>
 800678a:	a357      	add	r3, pc, #348	@ (adr r3, 80068e8 <detectAndStoreSilo+0x2f0>)
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	f7f9 ff32 	bl	80005f8 <__aeabi_dmul>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4610      	mov	r0, r2
 800679a:	4619      	mov	r1, r3
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	4b56      	ldr	r3, [pc, #344]	@ (80068fc <detectAndStoreSilo+0x304>)
 80067a2:	f7fa f853 	bl	800084c <__aeabi_ddiv>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	ec43 2b17 	vmov	d7, r2, r3
 80067ae:	eeb0 0a47 	vmov.f32	s0, s14
 80067b2:	eef0 0a67 	vmov.f32	s1, s15
 80067b6:	f009 faa3 	bl	800fd00 <sin>
 80067ba:	ec53 2b10 	vmov	r2, r3, d0
 80067be:	4640      	mov	r0, r8
 80067c0:	4649      	mov	r1, r9
 80067c2:	f7f9 ff19 	bl	80005f8 <__aeabi_dmul>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4620      	mov	r0, r4
 80067cc:	4629      	mov	r1, r5
 80067ce:	f7f9 fd5d 	bl	800028c <__adddf3>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4848      	ldr	r0, [pc, #288]	@ (80068f8 <detectAndStoreSilo+0x300>)
 80067d8:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80067dc:	0149      	lsls	r1, r1, #5
 80067de:	4401      	add	r1, r0
 80067e0:	3110      	adds	r1, #16
 80067e2:	e9c1 2300 	strd	r2, r3, [r1]
            silos[i].y = position.y + siloDistances[i] * cos(siloAngles[i] * M_PI / 180.0);
 80067e6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80067ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	3388      	adds	r3, #136	@ 0x88
 80067f2:	443b      	add	r3, r7
 80067f4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7f9 fe93 	bl	8000524 <__aeabi_i2d>
 80067fe:	4680      	mov	r8, r0
 8006800:	4689      	mov	r9, r1
 8006802:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	3388      	adds	r3, #136	@ 0x88
 800680a:	443b      	add	r3, r7
 800680c:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8006810:	4618      	mov	r0, r3
 8006812:	f7f9 fe87 	bl	8000524 <__aeabi_i2d>
 8006816:	a334      	add	r3, pc, #208	@ (adr r3, 80068e8 <detectAndStoreSilo+0x2f0>)
 8006818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681c:	f7f9 feec 	bl	80005f8 <__aeabi_dmul>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4610      	mov	r0, r2
 8006826:	4619      	mov	r1, r3
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	4b33      	ldr	r3, [pc, #204]	@ (80068fc <detectAndStoreSilo+0x304>)
 800682e:	f7fa f80d 	bl	800084c <__aeabi_ddiv>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	ec43 2b17 	vmov	d7, r2, r3
 800683a:	eeb0 0a47 	vmov.f32	s0, s14
 800683e:	eef0 0a67 	vmov.f32	s1, s15
 8006842:	f009 fa09 	bl	800fc58 <cos>
 8006846:	ec53 2b10 	vmov	r2, r3, d0
 800684a:	4640      	mov	r0, r8
 800684c:	4649      	mov	r1, r9
 800684e:	f7f9 fed3 	bl	80005f8 <__aeabi_dmul>
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	4620      	mov	r0, r4
 8006858:	4629      	mov	r1, r5
 800685a:	f7f9 fd17 	bl	800028c <__adddf3>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4825      	ldr	r0, [pc, #148]	@ (80068f8 <detectAndStoreSilo+0x300>)
 8006864:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8006868:	0149      	lsls	r1, r1, #5
 800686a:	4401      	add	r1, r0
 800686c:	3118      	adds	r1, #24
 800686e:	e9c1 2300 	strd	r2, r3, [r1]

            // Check if this is the nearest silo
            if (silos[i].ballInSilo < 1)
 8006872:	4a21      	ldr	r2, [pc, #132]	@ (80068f8 <detectAndStoreSilo+0x300>)
 8006874:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006878:	015b      	lsls	r3, r3, #5
 800687a:	4413      	add	r3, r2
 800687c:	330c      	adds	r3, #12
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	dc16      	bgt.n	80068b2 <detectAndStoreSilo+0x2ba>
            {
                bestSilo = silos[i];
 8006884:	4a1c      	ldr	r2, [pc, #112]	@ (80068f8 <detectAndStoreSilo+0x300>)
 8006886:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800688a:	015b      	lsls	r3, r3, #5
 800688c:	4413      	add	r3, r2
 800688e:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8006892:	461d      	mov	r5, r3
 8006894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006898:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800689c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (silos[i].ballInSilo < 1)
 80068a0:	e007      	b.n	80068b2 <detectAndStoreSilo+0x2ba>
            }
        }
        else
        {
            silos[i].detected = false;
 80068a2:	4a15      	ldr	r2, [pc, #84]	@ (80068f8 <detectAndStoreSilo+0x300>)
 80068a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068a8:	015b      	lsls	r3, r3, #5
 80068aa:	4413      	add	r3, r2
 80068ac:	3308      	adds	r3, #8
 80068ae:	2200      	movs	r2, #0
 80068b0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAX_SILOS; i++)
 80068b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068b6:	3301      	adds	r3, #1
 80068b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068c0:	2b04      	cmp	r3, #4
 80068c2:	f77f af02 	ble.w	80066ca <detectAndStoreSilo+0xd2>
        }
    }
    return bestSilo;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	461d      	mov	r5, r3
 80068ca:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 80068ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80068d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	3788      	adds	r7, #136	@ 0x88
 80068de:	46bd      	mov	sp, r7
 80068e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80068e4:	f3af 8000 	nop.w
 80068e8:	54442d18 	.word	0x54442d18
 80068ec:	400921fb 	.word	0x400921fb
 80068f0:	00018696 	.word	0x00018696
 80068f4:	2000057c 	.word	0x2000057c
 80068f8:	20000660 	.word	0x20000660
 80068fc:	40668000 	.word	0x40668000

08006900 <placeBallInSilo>:

void placeBallInSilo(external_global setpoint, double Kp, double Ki, double Kd, double KpH, double smoothingFactor, double maxVelocity)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	ed2d 8b02 	vpush	{d8}
 8006906:	b0b4      	sub	sp, #208	@ 0xd0
 8006908:	af02      	add	r7, sp, #8
 800690a:	ed87 3b08 	vstr	d3, [r7, #32]
 800690e:	ed87 4b06 	vstr	d4, [r7, #24]
 8006912:	ed87 5b04 	vstr	d5, [r7, #16]
 8006916:	ed87 6b02 	vstr	d6, [r7, #8]
 800691a:	ed87 7b00 	vstr	d7, [r7]
 800691e:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 8006922:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 8006926:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
    external_global position = odometry_eg();
 800692a:	f7fe fbc9 	bl	80050c0 <odometry_eg>
 800692e:	eeb0 5a40 	vmov.f32	s10, s0
 8006932:	eef0 5a60 	vmov.f32	s11, s1
 8006936:	eeb0 6a41 	vmov.f32	s12, s2
 800693a:	eef0 6a61 	vmov.f32	s13, s3
 800693e:	eeb0 7a42 	vmov.f32	s14, s4
 8006942:	eef0 7a62 	vmov.f32	s15, s5
 8006946:	ed87 5b1e 	vstr	d5, [r7, #120]	@ 0x78
 800694a:	ed87 6b20 	vstr	d6, [r7, #128]	@ 0x80
 800694e:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    Silo bestSilo = detectAndStoreSilo();
 8006952:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fe4e 	bl	80065f8 <detectAndStoreSilo>
    double Vx = 0.0, Vy = 0.0, W = 0.0;
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    static uint32_t lastTime = 0;
    uint32_t timer = HAL_GetTick();
 8006980:	f001 f884 	bl	8007a8c <HAL_GetTick>
 8006984:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

    setMotorSpeed(1, 0);
 8006988:	ed9f 0b83 	vldr	d0, [pc, #524]	@ 8006b98 <placeBallInSilo+0x298>
 800698c:	2001      	movs	r0, #1
 800698e:	f7fa fb65 	bl	800105c <setMotorSpeed>
    setMotorSpeed(2, 0);
 8006992:	ed9f 0b81 	vldr	d0, [pc, #516]	@ 8006b98 <placeBallInSilo+0x298>
 8006996:	2002      	movs	r0, #2
 8006998:	f7fa fb60 	bl	800105c <setMotorSpeed>
    setMotorSpeed(7, 0);
 800699c:	ed9f 0b7e 	vldr	d0, [pc, #504]	@ 8006b98 <placeBallInSilo+0x298>
 80069a0:	2007      	movs	r0, #7
 80069a2:	f7fa fb5b 	bl	800105c <setMotorSpeed>

    if(bestSilo.detected)
 80069a6:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f000 80c4 	beq.w	8006b38 <placeBallInSilo+0x238>
    {
        double targetX = bestSilo.x;
 80069b0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80069b4:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
        double targetY = bestSilo.y;
 80069b8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80069bc:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
    //    double targetH = atan2(targetY - position.y_global, targetX - position.x_global) * 180.0 / M_PI;

        double error_x = targetX - position.x;
 80069c0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80069c4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80069c8:	f7f9 fc5e 	bl	8000288 <__aeabi_dsub>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
        double error_y = targetY - position.y;
 80069d4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80069d8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80069dc:	f7f9 fc54 	bl	8000288 <__aeabi_dsub>
 80069e0:	4602      	mov	r2, r0
 80069e2:	460b      	mov	r3, r1
 80069e4:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        double distance = hypot(error_x, error_y);
 80069e8:	ed97 1b28 	vldr	d1, [r7, #160]	@ 0xa0
 80069ec:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 80069f0:	f009 f8fe 	bl	800fbf0 <hypot>
 80069f4:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98
        double velocityFactor = fmin(distance, maxVelocity) / distance;
 80069f8:	ed97 1b36 	vldr	d1, [r7, #216]	@ 0xd8
 80069fc:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 8006a00:	f009 fa07 	bl	800fe12 <fmin>
 8006a04:	ec51 0b10 	vmov	r0, r1, d0
 8006a08:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8006a0c:	f7f9 ff1e 	bl	800084c <__aeabi_ddiv>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        Vx = PID_controller(targetX, position.x, Kp, Ki, Kd) * velocityFactor;
 8006a18:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 8006a1c:	ed97 4b04 	vldr	d4, [r7, #16]
 8006a20:	ed97 3b06 	vldr	d3, [r7, #24]
 8006a24:	ed97 2b08 	vldr	d2, [r7, #32]
 8006a28:	eeb0 1a47 	vmov.f32	s2, s14
 8006a2c:	eef0 1a67 	vmov.f32	s3, s15
 8006a30:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 8006a34:	f7fe fcd4 	bl	80053e0 <PID_controller>
 8006a38:	ec51 0b10 	vmov	r0, r1, d0
 8006a3c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8006a40:	f7f9 fdda 	bl	80005f8 <__aeabi_dmul>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
        Vy = PID_controller(targetY, position.y, Kp+1, Ki, Kd) * velocityFactor;
 8006a4c:	ed97 8b20 	vldr	d8, [r7, #128]	@ 0x80
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	4b58      	ldr	r3, [pc, #352]	@ (8006bb8 <placeBallInSilo+0x2b8>)
 8006a56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006a5a:	f7f9 fc17 	bl	800028c <__adddf3>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	ec43 2b17 	vmov	d7, r2, r3
 8006a66:	ed97 4b04 	vldr	d4, [r7, #16]
 8006a6a:	ed97 3b06 	vldr	d3, [r7, #24]
 8006a6e:	eeb0 2a47 	vmov.f32	s4, s14
 8006a72:	eef0 2a67 	vmov.f32	s5, s15
 8006a76:	eeb0 1a48 	vmov.f32	s2, s16
 8006a7a:	eef0 1a68 	vmov.f32	s3, s17
 8006a7e:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8006a82:	f7fe fcad 	bl	80053e0 <PID_controller>
 8006a86:	ec51 0b10 	vmov	r0, r1, d0
 8006a8a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8006a8e:	f7f9 fdb3 	bl	80005f8 <__aeabi_dmul>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        W = PID_controllerH(setpoint.h, position.h, KpH);
 8006a9a:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8006a9e:	ed97 6b22 	vldr	d6, [r7, #136]	@ 0x88
 8006aa2:	ed97 2b02 	vldr	d2, [r7, #8]
 8006aa6:	eeb0 1a46 	vmov.f32	s2, s12
 8006aaa:	eef0 1a66 	vmov.f32	s3, s13
 8006aae:	eeb0 0a47 	vmov.f32	s0, s14
 8006ab2:	eef0 0a67 	vmov.f32	s1, s15
 8006ab6:	f7fe fd1d 	bl	80054f4 <PID_controllerH>
 8006aba:	eeb0 7a40 	vmov.f32	s14, s0
 8006abe:	eef0 7a60 	vmov.f32	s15, s1
 8006ac2:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

        if(bestSilo.distance <= 400) {Vx = 0; Vy = 2000; W = 0;}
 8006ac6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ac8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8006acc:	dc10      	bgt.n	8006af0 <placeBallInSilo+0x1f0>
 8006ace:	f04f 0200 	mov.w	r2, #0
 8006ad2:	f04f 0300 	mov.w	r3, #0
 8006ad6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	4b37      	ldr	r3, [pc, #220]	@ (8006bbc <placeBallInSilo+0x2bc>)
 8006ae0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	f04f 0300 	mov.w	r3, #0
 8006aec:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

        smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
 8006af0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8006af4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8006af8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8006afc:	ed97 0b00 	vldr	d0, [r7]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fe fd95 	bl	8005630 <smoothVelocity>
        Inverse_Kinematics(Vx, Vy, W);
 8006b06:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8006b0a:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8006b0e:	ed97 5b10 	vldr	d5, [r7, #64]	@ 0x40
 8006b12:	eeb0 2a45 	vmov.f32	s4, s10
 8006b16:	eef0 2a65 	vmov.f32	s5, s11
 8006b1a:	eeb0 1a46 	vmov.f32	s2, s12
 8006b1e:	eef0 1a66 	vmov.f32	s3, s13
 8006b22:	eeb0 0a47 	vmov.f32	s0, s14
 8006b26:	eef0 0a67 	vmov.f32	s1, s15
 8006b2a:	f7fa fb0d 	bl	8001148 <Inverse_Kinematics>
//        trying(Vx, Vy, W, setpoint.h, KpH);
        lastTime = timer;
 8006b2e:	4a24      	ldr	r2, [pc, #144]	@ (8006bc0 <placeBallInSilo+0x2c0>)
 8006b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b34:	6013      	str	r3, [r2, #0]
    }
    else
    {
    	PID_EG(setpoint, Kp, Ki, Kd, KpH, 0.75, 3000);
    }
}
 8006b36:	e027      	b.n	8006b88 <placeBallInSilo+0x288>
    else if(timer - lastTime <= 1600)
 8006b38:	4b21      	ldr	r3, [pc, #132]	@ (8006bc0 <placeBallInSilo+0x2c0>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006b46:	d808      	bhi.n	8006b5a <placeBallInSilo+0x25a>
        Inverse_Kinematics(0, 2000, 0);
 8006b48:	ed9f 2b13 	vldr	d2, [pc, #76]	@ 8006b98 <placeBallInSilo+0x298>
 8006b4c:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8006ba0 <placeBallInSilo+0x2a0>
 8006b50:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8006b98 <placeBallInSilo+0x298>
 8006b54:	f7fa faf8 	bl	8001148 <Inverse_Kinematics>
}
 8006b58:	e016      	b.n	8006b88 <placeBallInSilo+0x288>
    	PID_EG(setpoint, Kp, Ki, Kd, KpH, 0.75, 3000);
 8006b5a:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8006b5e:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8006b62:	ed97 2b0e 	vldr	d2, [r7, #56]	@ 0x38
 8006b66:	a310      	add	r3, pc, #64	@ (adr r3, 8006ba8 <placeBallInSilo+0x2a8>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	e9cd 2300 	strd	r2, r3, [sp]
 8006b70:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8006bb0 <placeBallInSilo+0x2b0>
 8006b74:	ed97 6b02 	vldr	d6, [r7, #8]
 8006b78:	ed97 5b04 	vldr	d5, [r7, #16]
 8006b7c:	ed97 4b06 	vldr	d4, [r7, #24]
 8006b80:	ed97 3b08 	vldr	d3, [r7, #32]
 8006b84:	f7ff f840 	bl	8005c08 <PID_EG>
}
 8006b88:	bf00      	nop
 8006b8a:	37c8      	adds	r7, #200	@ 0xc8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	ecbd 8b02 	vpop	{d8}
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	f3af 8000 	nop.w
	...
 8006ba4:	409f4000 	.word	0x409f4000
 8006ba8:	00000000 	.word	0x00000000
 8006bac:	40a77000 	.word	0x40a77000
 8006bb0:	00000000 	.word	0x00000000
 8006bb4:	3fe80000 	.word	0x3fe80000
 8006bb8:	3ff00000 	.word	0x3ff00000
 8006bbc:	409f4000 	.word	0x409f4000
 8006bc0:	20000704 	.word	0x20000704
 8006bc4:	00000000 	.word	0x00000000

08006bc8 <findAndTakeBall>:

void findAndTakeBall(external_global *findBall)
{
 8006bc8:	b5b0      	push	{r4, r5, r7, lr}
 8006bca:	b098      	sub	sp, #96	@ 0x60
 8006bcc:	af02      	add	r7, sp, #8
 8006bce:	6078      	str	r0, [r7, #4]
     * camera[2]: ball existence (number of balls)
     * camera[3]: silo distance (in cm)
     * camera[4]: silo angle (in degree)
     */

	external_global position = odometry_eg();
 8006bd0:	f7fe fa76 	bl	80050c0 <odometry_eg>
 8006bd4:	eeb0 5a40 	vmov.f32	s10, s0
 8006bd8:	eef0 5a60 	vmov.f32	s11, s1
 8006bdc:	eeb0 6a41 	vmov.f32	s12, s2
 8006be0:	eef0 6a61 	vmov.f32	s13, s3
 8006be4:	eeb0 7a42 	vmov.f32	s14, s4
 8006be8:	eef0 7a62 	vmov.f32	s15, s5
 8006bec:	ed87 5b02 	vstr	d5, [r7, #8]
 8006bf0:	ed87 6b04 	vstr	d6, [r7, #16]
 8006bf4:	ed87 7b06 	vstr	d7, [r7, #24]
    static uint32_t lastTimeBallSeen = 0;
    static uint32_t searchStartTime = 0;
    static uint8_t searchMode = 1;
    static uint8_t lastSearchMode = 1;

    uint32_t timer = HAL_GetTick();
 8006bf8:	f000 ff48 	bl	8007a8c <HAL_GetTick>
 8006bfc:	63f8      	str	r0, [r7, #60]	@ 0x3c

    int ballDistance = camera[0] * 10; // convert to mm
 8006bfe:	4bc2      	ldr	r3, [pc, #776]	@ (8006f08 <findAndTakeBall+0x340>)
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    int ballAngle = camera[1];
 8006c0c:	4bbe      	ldr	r3, [pc, #760]	@ (8006f08 <findAndTakeBall+0x340>)
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	637b      	str	r3, [r7, #52]	@ 0x34
//    int ballExistence = camera[2];

    double Vx = 0.0;
 8006c12:	f04f 0200 	mov.w	r2, #0
 8006c16:	f04f 0300 	mov.w	r3, #0
 8006c1a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double Vy = 0.0;
 8006c1e:	f04f 0200 	mov.w	r2, #0
 8006c22:	f04f 0300 	mov.w	r3, #0
 8006c26:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double W = 0.0;
 8006c2a:	f04f 0200 	mov.w	r2, #0
 8006c2e:	f04f 0300 	mov.w	r3, #0
 8006c32:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    focusToTheBall();
 8006c36:	f7ff fba7 	bl	8006388 <focusToTheBall>

    if (ballDistance > 0)
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f340 80b1 	ble.w	8006da4 <findAndTakeBall+0x1dc>
    {
        double xBall = ballDistance * sin(ballAngle * M_PI / 180.0);
 8006c42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006c44:	f7f9 fc6e 	bl	8000524 <__aeabi_i2d>
 8006c48:	4604      	mov	r4, r0
 8006c4a:	460d      	mov	r5, r1
 8006c4c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006c4e:	f7f9 fc69 	bl	8000524 <__aeabi_i2d>
 8006c52:	a395      	add	r3, pc, #596	@ (adr r3, 8006ea8 <findAndTakeBall+0x2e0>)
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	f7f9 fcce 	bl	80005f8 <__aeabi_dmul>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4610      	mov	r0, r2
 8006c62:	4619      	mov	r1, r3
 8006c64:	f04f 0200 	mov.w	r2, #0
 8006c68:	4ba8      	ldr	r3, [pc, #672]	@ (8006f0c <findAndTakeBall+0x344>)
 8006c6a:	f7f9 fdef 	bl	800084c <__aeabi_ddiv>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	ec43 2b17 	vmov	d7, r2, r3
 8006c76:	eeb0 0a47 	vmov.f32	s0, s14
 8006c7a:	eef0 0a67 	vmov.f32	s1, s15
 8006c7e:	f009 f83f 	bl	800fd00 <sin>
 8006c82:	ec53 2b10 	vmov	r2, r3, d0
 8006c86:	4620      	mov	r0, r4
 8006c88:	4629      	mov	r1, r5
 8006c8a:	f7f9 fcb5 	bl	80005f8 <__aeabi_dmul>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        double yBall = ballDistance * cos(ballAngle * M_PI / 180.0);
 8006c96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006c98:	f7f9 fc44 	bl	8000524 <__aeabi_i2d>
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	460d      	mov	r5, r1
 8006ca0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006ca2:	f7f9 fc3f 	bl	8000524 <__aeabi_i2d>
 8006ca6:	a380      	add	r3, pc, #512	@ (adr r3, 8006ea8 <findAndTakeBall+0x2e0>)
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f7f9 fca4 	bl	80005f8 <__aeabi_dmul>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	f04f 0200 	mov.w	r2, #0
 8006cbc:	4b93      	ldr	r3, [pc, #588]	@ (8006f0c <findAndTakeBall+0x344>)
 8006cbe:	f7f9 fdc5 	bl	800084c <__aeabi_ddiv>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	ec43 2b17 	vmov	d7, r2, r3
 8006cca:	eeb0 0a47 	vmov.f32	s0, s14
 8006cce:	eef0 0a67 	vmov.f32	s1, s15
 8006cd2:	f008 ffc1 	bl	800fc58 <cos>
 8006cd6:	ec53 2b10 	vmov	r2, r3, d0
 8006cda:	4620      	mov	r0, r4
 8006cdc:	4629      	mov	r1, r5
 8006cde:	f7f9 fc8b 	bl	80005f8 <__aeabi_dmul>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	e9c7 2308 	strd	r2, r3, [r7, #32]

        Vx = PID_controller(xBall, 0.0, 1.5, 0.0, 0.0);
 8006cea:	ed9f 4b71 	vldr	d4, [pc, #452]	@ 8006eb0 <findAndTakeBall+0x2e8>
 8006cee:	ed9f 3b70 	vldr	d3, [pc, #448]	@ 8006eb0 <findAndTakeBall+0x2e8>
 8006cf2:	ed9f 2b71 	vldr	d2, [pc, #452]	@ 8006eb8 <findAndTakeBall+0x2f0>
 8006cf6:	ed9f 1b6e 	vldr	d1, [pc, #440]	@ 8006eb0 <findAndTakeBall+0x2e8>
 8006cfa:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8006cfe:	f7fe fb6f 	bl	80053e0 <PID_controller>
 8006d02:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
        Vy = PID_controller(yBall, 0.0, 2.2, 0.0, 0.0)*1.2;
 8006d06:	ed9f 4b6a 	vldr	d4, [pc, #424]	@ 8006eb0 <findAndTakeBall+0x2e8>
 8006d0a:	ed9f 3b69 	vldr	d3, [pc, #420]	@ 8006eb0 <findAndTakeBall+0x2e8>
 8006d0e:	ed9f 2b6c 	vldr	d2, [pc, #432]	@ 8006ec0 <findAndTakeBall+0x2f8>
 8006d12:	ed9f 1b67 	vldr	d1, [pc, #412]	@ 8006eb0 <findAndTakeBall+0x2e8>
 8006d16:	ed97 0b08 	vldr	d0, [r7, #32]
 8006d1a:	f7fe fb61 	bl	80053e0 <PID_controller>
 8006d1e:	ec51 0b10 	vmov	r0, r1, d0
 8006d22:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8006d26:	4b7a      	ldr	r3, [pc, #488]	@ (8006f10 <findAndTakeBall+0x348>)
 8006d28:	f7f9 fc66 	bl	80005f8 <__aeabi_dmul>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        W = PID_controllerH(ballAngle, 0.0, 1.5);
 8006d34:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006d36:	f7f9 fbf5 	bl	8000524 <__aeabi_i2d>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	ed9f 2b5e 	vldr	d2, [pc, #376]	@ 8006eb8 <findAndTakeBall+0x2f0>
 8006d42:	ed9f 1b5b 	vldr	d1, [pc, #364]	@ 8006eb0 <findAndTakeBall+0x2e8>
 8006d46:	ec43 2b10 	vmov	d0, r2, r3
 8006d4a:	f7fe fbd3 	bl	80054f4 <PID_controllerH>
 8006d4e:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

        if(ballDistance <= 400) {Vx = 0; Vy = 2000; W = 0;}
 8006d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d54:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8006d58:	dc10      	bgt.n	8006d7c <findAndTakeBall+0x1b4>
 8006d5a:	f04f 0200 	mov.w	r2, #0
 8006d5e:	f04f 0300 	mov.w	r3, #0
 8006d62:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8006d66:	f04f 0200 	mov.w	r2, #0
 8006d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f14 <findAndTakeBall+0x34c>)
 8006d6c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

        Inverse_Kinematics(Vx, Vy, W);
 8006d7c:	ed97 2b10 	vldr	d2, [r7, #64]	@ 0x40
 8006d80:	ed97 1b12 	vldr	d1, [r7, #72]	@ 0x48
 8006d84:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8006d88:	f7fa f9de 	bl	8001148 <Inverse_Kinematics>
        setMotorSpeed(1, -2500);
 8006d8c:	ed9f 0b4e 	vldr	d0, [pc, #312]	@ 8006ec8 <findAndTakeBall+0x300>
 8006d90:	2001      	movs	r0, #1
 8006d92:	f7fa f963 	bl	800105c <setMotorSpeed>
        lastTimeBallSeen = timer;
 8006d96:	4a60      	ldr	r2, [pc, #384]	@ (8006f18 <findAndTakeBall+0x350>)
 8006d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d9a:	6013      	str	r3, [r2, #0]
        searchStartTime = timer;
 8006d9c:	4a5f      	ldr	r2, [pc, #380]	@ (8006f1c <findAndTakeBall+0x354>)
 8006d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006da0:	6013      	str	r3, [r2, #0]
//                    }
//                    break;
//            }
//        }
    }
}
 8006da2:	e174      	b.n	800708e <findAndTakeBall+0x4c6>
    else if (timer - lastTimeBallSeen <= 700)
 8006da4:	4b5c      	ldr	r3, [pc, #368]	@ (8006f18 <findAndTakeBall+0x350>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8006db0:	d80d      	bhi.n	8006dce <findAndTakeBall+0x206>
        Inverse_Kinematics(0, 2000, 0);
 8006db2:	ed9f 2b3f 	vldr	d2, [pc, #252]	@ 8006eb0 <findAndTakeBall+0x2e8>
 8006db6:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 8006ed0 <findAndTakeBall+0x308>
 8006dba:	ed9f 0b3d 	vldr	d0, [pc, #244]	@ 8006eb0 <findAndTakeBall+0x2e8>
 8006dbe:	f7fa f9c3 	bl	8001148 <Inverse_Kinematics>
        setMotorSpeed(1, -2500);
 8006dc2:	ed9f 0b41 	vldr	d0, [pc, #260]	@ 8006ec8 <findAndTakeBall+0x300>
 8006dc6:	2001      	movs	r0, #1
 8006dc8:	f7fa f948 	bl	800105c <setMotorSpeed>
}
 8006dcc:	e15f      	b.n	800708e <findAndTakeBall+0x4c6>
        setMotorSpeed(1, 0);
 8006dce:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 8006eb0 <findAndTakeBall+0x2e8>
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	f7fa f942 	bl	800105c <setMotorSpeed>
        setMotorSpeed(2, 0);
 8006dd8:	ed9f 0b35 	vldr	d0, [pc, #212]	@ 8006eb0 <findAndTakeBall+0x2e8>
 8006ddc:	2002      	movs	r0, #2
 8006dde:	f7fa f93d 	bl	800105c <setMotorSpeed>
        setMotorSpeed(7, 0);
 8006de2:	ed9f 0b33 	vldr	d0, [pc, #204]	@ 8006eb0 <findAndTakeBall+0x2e8>
 8006de6:	2007      	movs	r0, #7
 8006de8:	f7fa f938 	bl	800105c <setMotorSpeed>
        if (searchStartTime == 0) {searchStartTime = timer;}
 8006dec:	4b4b      	ldr	r3, [pc, #300]	@ (8006f1c <findAndTakeBall+0x354>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d102      	bne.n	8006dfa <findAndTakeBall+0x232>
 8006df4:	4a49      	ldr	r2, [pc, #292]	@ (8006f1c <findAndTakeBall+0x354>)
 8006df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df8:	6013      	str	r3, [r2, #0]
        switch(searchMode)
 8006dfa:	4b49      	ldr	r3, [pc, #292]	@ (8006f20 <findAndTakeBall+0x358>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	f200 8144 	bhi.w	800708e <findAndTakeBall+0x4c6>
 8006e06:	a201      	add	r2, pc, #4	@ (adr r2, 8006e0c <findAndTakeBall+0x244>)
 8006e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0c:	08006e1d 	.word	0x08006e1d
 8006e10:	08006f29 	.word	0x08006f29
 8006e14:	08006f9d 	.word	0x08006f9d
 8006e18:	08007011 	.word	0x08007011
        	if(timer - searchStartTime >= 6000)
 8006e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8006f1c <findAndTakeBall+0x354>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	f241 726f 	movw	r2, #5999	@ 0x176f
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d907      	bls.n	8006e3c <findAndTakeBall+0x274>
        		searchMode += lastSearchMode;
 8006e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8006f20 <findAndTakeBall+0x358>)
 8006e2e:	781a      	ldrb	r2, [r3, #0]
 8006e30:	4b3c      	ldr	r3, [pc, #240]	@ (8006f24 <findAndTakeBall+0x35c>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	4413      	add	r3, r2
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	4b39      	ldr	r3, [pc, #228]	@ (8006f20 <findAndTakeBall+0x358>)
 8006e3a:	701a      	strb	r2, [r3, #0]
        	if(lastSearchMode == 1)
 8006e3c:	4b39      	ldr	r3, [pc, #228]	@ (8006f24 <findAndTakeBall+0x35c>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d10c      	bne.n	8006e5e <findAndTakeBall+0x296>
        		lookForTheBall(10.0, 170.0, position.h);
 8006e44:	ed97 7b06 	vldr	d7, [r7, #24]
 8006e48:	eeb0 2a47 	vmov.f32	s4, s14
 8006e4c:	eef0 2a67 	vmov.f32	s5, s15
 8006e50:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006ed8 <findAndTakeBall+0x310>
 8006e54:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 8006ee0 <findAndTakeBall+0x318>
 8006e58:	f7fe fce2 	bl	8005820 <lookForTheBall>
        	break;
 8006e5c:	e110      	b.n	8007080 <findAndTakeBall+0x4b8>
        	else if(lastSearchMode == 2)
 8006e5e:	4b31      	ldr	r3, [pc, #196]	@ (8006f24 <findAndTakeBall+0x35c>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d10c      	bne.n	8006e80 <findAndTakeBall+0x2b8>
        		lookForTheBall(-100.0, 100.0, position.h);
 8006e66:	ed97 7b06 	vldr	d7, [r7, #24]
 8006e6a:	eeb0 2a47 	vmov.f32	s4, s14
 8006e6e:	eef0 2a67 	vmov.f32	s5, s15
 8006e72:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 8006ee8 <findAndTakeBall+0x320>
 8006e76:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8006ef0 <findAndTakeBall+0x328>
 8006e7a:	f7fe fcd1 	bl	8005820 <lookForTheBall>
        	break;
 8006e7e:	e0ff      	b.n	8007080 <findAndTakeBall+0x4b8>
        	else if(lastSearchMode == 3)
 8006e80:	4b28      	ldr	r3, [pc, #160]	@ (8006f24 <findAndTakeBall+0x35c>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	f040 80fb 	bne.w	8007080 <findAndTakeBall+0x4b8>
        		lookForTheBall(-70.0, 70.0, position.h);
 8006e8a:	ed97 7b06 	vldr	d7, [r7, #24]
 8006e8e:	eeb0 2a47 	vmov.f32	s4, s14
 8006e92:	eef0 2a67 	vmov.f32	s5, s15
 8006e96:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8006ef8 <findAndTakeBall+0x330>
 8006e9a:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8006f00 <findAndTakeBall+0x338>
 8006e9e:	f7fe fcbf 	bl	8005820 <lookForTheBall>
        	break;
 8006ea2:	e0ed      	b.n	8007080 <findAndTakeBall+0x4b8>
 8006ea4:	f3af 8000 	nop.w
 8006ea8:	54442d18 	.word	0x54442d18
 8006eac:	400921fb 	.word	0x400921fb
	...
 8006ebc:	3ff80000 	.word	0x3ff80000
 8006ec0:	9999999a 	.word	0x9999999a
 8006ec4:	40019999 	.word	0x40019999
 8006ec8:	00000000 	.word	0x00000000
 8006ecc:	c0a38800 	.word	0xc0a38800
 8006ed0:	00000000 	.word	0x00000000
 8006ed4:	409f4000 	.word	0x409f4000
 8006ed8:	00000000 	.word	0x00000000
 8006edc:	40654000 	.word	0x40654000
 8006ee0:	00000000 	.word	0x00000000
 8006ee4:	40240000 	.word	0x40240000
 8006ee8:	00000000 	.word	0x00000000
 8006eec:	40590000 	.word	0x40590000
 8006ef0:	00000000 	.word	0x00000000
 8006ef4:	c0590000 	.word	0xc0590000
 8006ef8:	00000000 	.word	0x00000000
 8006efc:	40518000 	.word	0x40518000
 8006f00:	00000000 	.word	0x00000000
 8006f04:	c0518000 	.word	0xc0518000
 8006f08:	2000057c 	.word	0x2000057c
 8006f0c:	40668000 	.word	0x40668000
 8006f10:	3ff33333 	.word	0x3ff33333
 8006f14:	409f4000 	.word	0x409f4000
 8006f18:	20000708 	.word	0x20000708
 8006f1c:	2000070c 	.word	0x2000070c
 8006f20:	200000ca 	.word	0x200000ca
 8006f24:	200000cb 	.word	0x200000cb
        	lastSearchMode = 2;
 8006f28:	4b6b      	ldr	r3, [pc, #428]	@ (80070d8 <findAndTakeBall+0x510>)
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	701a      	strb	r2, [r3, #0]
        	PID_EG(findBall[1], 2.8, 0.0, 0.0, 1.3, 0.8, 2700);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	3318      	adds	r3, #24
 8006f32:	ed93 0b00 	vldr	d0, [r3]
 8006f36:	ed93 1b02 	vldr	d1, [r3, #8]
 8006f3a:	ed93 2b04 	vldr	d2, [r3, #16]
 8006f3e:	a356      	add	r3, pc, #344	@ (adr r3, 8007098 <findAndTakeBall+0x4d0>)
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	e9cd 2300 	strd	r2, r3, [sp]
 8006f48:	ed9f 7b55 	vldr	d7, [pc, #340]	@ 80070a0 <findAndTakeBall+0x4d8>
 8006f4c:	ed9f 6b56 	vldr	d6, [pc, #344]	@ 80070a8 <findAndTakeBall+0x4e0>
 8006f50:	ed9f 5b57 	vldr	d5, [pc, #348]	@ 80070b0 <findAndTakeBall+0x4e8>
 8006f54:	ed9f 4b56 	vldr	d4, [pc, #344]	@ 80070b0 <findAndTakeBall+0x4e8>
 8006f58:	ed9f 3b57 	vldr	d3, [pc, #348]	@ 80070b8 <findAndTakeBall+0x4f0>
 8006f5c:	f7fe fe54 	bl	8005c08 <PID_EG>
        	searchStartTime = timer;
 8006f60:	4a5e      	ldr	r2, [pc, #376]	@ (80070dc <findAndTakeBall+0x514>)
 8006f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f64:	6013      	str	r3, [r2, #0]
        	if(atTargetEG(findBall[1], position, 500, 10))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	3318      	adds	r3, #24
 8006f6a:	ed97 3b02 	vldr	d3, [r7, #8]
 8006f6e:	ed97 4b04 	vldr	d4, [r7, #16]
 8006f72:	ed97 5b06 	vldr	d5, [r7, #24]
 8006f76:	ed93 0b00 	vldr	d0, [r3]
 8006f7a:	ed93 1b02 	vldr	d1, [r3, #8]
 8006f7e:	ed93 2b04 	vldr	d2, [r3, #16]
 8006f82:	ed9f 7b4f 	vldr	d7, [pc, #316]	@ 80070c0 <findAndTakeBall+0x4f8>
 8006f86:	ed9f 6b50 	vldr	d6, [pc, #320]	@ 80070c8 <findAndTakeBall+0x500>
 8006f8a:	f7fe fbef 	bl	800576c <atTargetEG>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d077      	beq.n	8007084 <findAndTakeBall+0x4bc>
        		searchMode = 1;
 8006f94:	4b52      	ldr	r3, [pc, #328]	@ (80070e0 <findAndTakeBall+0x518>)
 8006f96:	2201      	movs	r2, #1
 8006f98:	701a      	strb	r2, [r3, #0]
        	break;
 8006f9a:	e073      	b.n	8007084 <findAndTakeBall+0x4bc>
        	lastSearchMode = 3;
 8006f9c:	4b4e      	ldr	r3, [pc, #312]	@ (80070d8 <findAndTakeBall+0x510>)
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	701a      	strb	r2, [r3, #0]
        	PID_EG(findBall[2], 2.0, 0.0, 0.0, 1.3, 0.8, 2700);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	3330      	adds	r3, #48	@ 0x30
 8006fa6:	ed93 0b00 	vldr	d0, [r3]
 8006faa:	ed93 1b02 	vldr	d1, [r3, #8]
 8006fae:	ed93 2b04 	vldr	d2, [r3, #16]
 8006fb2:	a339      	add	r3, pc, #228	@ (adr r3, 8007098 <findAndTakeBall+0x4d0>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	e9cd 2300 	strd	r2, r3, [sp]
 8006fbc:	ed9f 7b38 	vldr	d7, [pc, #224]	@ 80070a0 <findAndTakeBall+0x4d8>
 8006fc0:	ed9f 6b39 	vldr	d6, [pc, #228]	@ 80070a8 <findAndTakeBall+0x4e0>
 8006fc4:	ed9f 5b3a 	vldr	d5, [pc, #232]	@ 80070b0 <findAndTakeBall+0x4e8>
 8006fc8:	ed9f 4b39 	vldr	d4, [pc, #228]	@ 80070b0 <findAndTakeBall+0x4e8>
 8006fcc:	ed9f 3b40 	vldr	d3, [pc, #256]	@ 80070d0 <findAndTakeBall+0x508>
 8006fd0:	f7fe fe1a 	bl	8005c08 <PID_EG>
        	searchStartTime = timer;
 8006fd4:	4a41      	ldr	r2, [pc, #260]	@ (80070dc <findAndTakeBall+0x514>)
 8006fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fd8:	6013      	str	r3, [r2, #0]
        	if(atTargetEG(findBall[2], position, 500, 10))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3330      	adds	r3, #48	@ 0x30
 8006fde:	ed97 3b02 	vldr	d3, [r7, #8]
 8006fe2:	ed97 4b04 	vldr	d4, [r7, #16]
 8006fe6:	ed97 5b06 	vldr	d5, [r7, #24]
 8006fea:	ed93 0b00 	vldr	d0, [r3]
 8006fee:	ed93 1b02 	vldr	d1, [r3, #8]
 8006ff2:	ed93 2b04 	vldr	d2, [r3, #16]
 8006ff6:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 80070c0 <findAndTakeBall+0x4f8>
 8006ffa:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 80070c8 <findAndTakeBall+0x500>
 8006ffe:	f7fe fbb5 	bl	800576c <atTargetEG>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d03f      	beq.n	8007088 <findAndTakeBall+0x4c0>
        		searchMode = 1;
 8007008:	4b35      	ldr	r3, [pc, #212]	@ (80070e0 <findAndTakeBall+0x518>)
 800700a:	2201      	movs	r2, #1
 800700c:	701a      	strb	r2, [r3, #0]
        	break;
 800700e:	e03b      	b.n	8007088 <findAndTakeBall+0x4c0>
        	lastSearchMode = 1;
 8007010:	4b31      	ldr	r3, [pc, #196]	@ (80070d8 <findAndTakeBall+0x510>)
 8007012:	2201      	movs	r2, #1
 8007014:	701a      	strb	r2, [r3, #0]
        	PID_EG(findBall[0], 2.8, 0.0, 0.0, 1.3, 0.8, 2700);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	ed93 0b00 	vldr	d0, [r3]
 800701c:	ed93 1b02 	vldr	d1, [r3, #8]
 8007020:	ed93 2b04 	vldr	d2, [r3, #16]
 8007024:	a31c      	add	r3, pc, #112	@ (adr r3, 8007098 <findAndTakeBall+0x4d0>)
 8007026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702a:	e9cd 2300 	strd	r2, r3, [sp]
 800702e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80070a0 <findAndTakeBall+0x4d8>
 8007032:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80070a8 <findAndTakeBall+0x4e0>
 8007036:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 80070b0 <findAndTakeBall+0x4e8>
 800703a:	ed9f 4b1d 	vldr	d4, [pc, #116]	@ 80070b0 <findAndTakeBall+0x4e8>
 800703e:	ed9f 3b1e 	vldr	d3, [pc, #120]	@ 80070b8 <findAndTakeBall+0x4f0>
 8007042:	f7fe fde1 	bl	8005c08 <PID_EG>
        	searchStartTime = timer;
 8007046:	4a25      	ldr	r2, [pc, #148]	@ (80070dc <findAndTakeBall+0x514>)
 8007048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800704a:	6013      	str	r3, [r2, #0]
        	if(atTargetEG(findBall[0], position, 500, 10))
 800704c:	ed97 3b02 	vldr	d3, [r7, #8]
 8007050:	ed97 4b04 	vldr	d4, [r7, #16]
 8007054:	ed97 5b06 	vldr	d5, [r7, #24]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	ed93 0b00 	vldr	d0, [r3]
 800705e:	ed93 1b02 	vldr	d1, [r3, #8]
 8007062:	ed93 2b04 	vldr	d2, [r3, #16]
 8007066:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80070c0 <findAndTakeBall+0x4f8>
 800706a:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 80070c8 <findAndTakeBall+0x500>
 800706e:	f7fe fb7d 	bl	800576c <atTargetEG>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d009      	beq.n	800708c <findAndTakeBall+0x4c4>
        		searchMode = 1;
 8007078:	4b19      	ldr	r3, [pc, #100]	@ (80070e0 <findAndTakeBall+0x518>)
 800707a:	2201      	movs	r2, #1
 800707c:	701a      	strb	r2, [r3, #0]
        	break;
 800707e:	e005      	b.n	800708c <findAndTakeBall+0x4c4>
        	break;
 8007080:	bf00      	nop
 8007082:	e004      	b.n	800708e <findAndTakeBall+0x4c6>
        	break;
 8007084:	bf00      	nop
 8007086:	e002      	b.n	800708e <findAndTakeBall+0x4c6>
        	break;
 8007088:	bf00      	nop
 800708a:	e000      	b.n	800708e <findAndTakeBall+0x4c6>
        	break;
 800708c:	bf00      	nop
}
 800708e:	bf00      	nop
 8007090:	3758      	adds	r7, #88	@ 0x58
 8007092:	46bd      	mov	sp, r7
 8007094:	bdb0      	pop	{r4, r5, r7, pc}
 8007096:	bf00      	nop
 8007098:	00000000 	.word	0x00000000
 800709c:	40a51800 	.word	0x40a51800
 80070a0:	9999999a 	.word	0x9999999a
 80070a4:	3fe99999 	.word	0x3fe99999
 80070a8:	cccccccd 	.word	0xcccccccd
 80070ac:	3ff4cccc 	.word	0x3ff4cccc
	...
 80070b8:	66666666 	.word	0x66666666
 80070bc:	40066666 	.word	0x40066666
 80070c0:	00000000 	.word	0x00000000
 80070c4:	40240000 	.word	0x40240000
 80070c8:	00000000 	.word	0x00000000
 80070cc:	407f4000 	.word	0x407f4000
 80070d0:	00000000 	.word	0x00000000
 80070d4:	40000000 	.word	0x40000000
 80070d8:	200000cb 	.word	0x200000cb
 80070dc:	2000070c 	.word	0x2000070c
 80070e0:	200000ca 	.word	0x200000ca
 80070e4:	00000000 	.word	0x00000000

080070e8 <throwTheBall>:

void throwTheBall(external_global whereTo, double Kp, double Ki, double Kd, double KpH)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b096      	sub	sp, #88	@ 0x58
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	eeb0 7a42 	vmov.f32	s14, s4
 80070f2:	eef0 7a62 	vmov.f32	s15, s5
 80070f6:	ed87 3b06 	vstr	d3, [r7, #24]
 80070fa:	ed87 4b04 	vstr	d4, [r7, #16]
 80070fe:	ed87 5b02 	vstr	d5, [r7, #8]
 8007102:	ed87 6b00 	vstr	d6, [r7]
 8007106:	ed87 0b08 	vstr	d0, [r7, #32]
 800710a:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 800710e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
	external_global position = odometry_eg();
 8007112:	f7fd ffd5 	bl	80050c0 <odometry_eg>
 8007116:	eeb0 5a40 	vmov.f32	s10, s0
 800711a:	eef0 5a60 	vmov.f32	s11, s1
 800711e:	eeb0 6a41 	vmov.f32	s12, s2
 8007122:	eef0 6a61 	vmov.f32	s13, s3
 8007126:	eeb0 7a42 	vmov.f32	s14, s4
 800712a:	eef0 7a62 	vmov.f32	s15, s5
 800712e:	ed87 5b0e 	vstr	d5, [r7, #56]	@ 0x38
 8007132:	ed87 6b10 	vstr	d6, [r7, #64]	@ 0x40
 8007136:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48

	if(atTargetEG(whereTo, position, 500, 5))
 800713a:	ed97 3b0e 	vldr	d3, [r7, #56]	@ 0x38
 800713e:	ed97 4b10 	vldr	d4, [r7, #64]	@ 0x40
 8007142:	ed97 5b12 	vldr	d5, [r7, #72]	@ 0x48
 8007146:	ed97 0b08 	vldr	d0, [r7, #32]
 800714a:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 800714e:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 8007152:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80071d8 <throwTheBall+0xf0>
 8007156:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 80071e0 <throwTheBall+0xf8>
 800715a:	f7fe fb07 	bl	800576c <atTargetEG>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01b      	beq.n	800719c <throwTheBall+0xb4>
	{
		Inverse_Kinematics(0, 0, 0);
 8007164:	ed9f 2b20 	vldr	d2, [pc, #128]	@ 80071e8 <throwTheBall+0x100>
 8007168:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 80071e8 <throwTheBall+0x100>
 800716c:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80071e8 <throwTheBall+0x100>
 8007170:	f7f9 ffea 	bl	8001148 <Inverse_Kinematics>
		setMotorSpeed(1, -2400);
 8007174:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80071f0 <throwTheBall+0x108>
 8007178:	2001      	movs	r0, #1
 800717a:	f7f9 ff6f 	bl	800105c <setMotorSpeed>
		setMotorSpeed(2, -2000);
 800717e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80071f8 <throwTheBall+0x110>
 8007182:	2002      	movs	r0, #2
 8007184:	f7f9 ff6a 	bl	800105c <setMotorSpeed>
		setMotorSpeed(7, -2800);
 8007188:	ed9f 0b1d 	vldr	d0, [pc, #116]	@ 8007200 <throwTheBall+0x118>
 800718c:	2007      	movs	r0, #7
 800718e:	f7f9 ff65 	bl	800105c <setMotorSpeed>
		HAL_Delay(2500);
 8007192:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8007196:	f000 fc85 	bl	8007aa4 <HAL_Delay>
	}
	else
	{
		PID_EG(whereTo, Kp, Ki, Kd, KpH, 0.8, 2800);
	}
}
 800719a:	e016      	b.n	80071ca <throwTheBall+0xe2>
		PID_EG(whereTo, Kp, Ki, Kd, KpH, 0.8, 2800);
 800719c:	ed97 0b08 	vldr	d0, [r7, #32]
 80071a0:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 80071a4:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 80071a8:	a319      	add	r3, pc, #100	@ (adr r3, 8007210 <throwTheBall+0x128>)
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	e9cd 2300 	strd	r2, r3, [sp]
 80071b2:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8007208 <throwTheBall+0x120>
 80071b6:	ed97 6b00 	vldr	d6, [r7]
 80071ba:	ed97 5b02 	vldr	d5, [r7, #8]
 80071be:	ed97 4b04 	vldr	d4, [r7, #16]
 80071c2:	ed97 3b06 	vldr	d3, [r7, #24]
 80071c6:	f7fe fd1f 	bl	8005c08 <PID_EG>
}
 80071ca:	bf00      	nop
 80071cc:	3750      	adds	r7, #80	@ 0x50
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	f3af 8000 	nop.w
 80071d8:	00000000 	.word	0x00000000
 80071dc:	40140000 	.word	0x40140000
 80071e0:	00000000 	.word	0x00000000
 80071e4:	407f4000 	.word	0x407f4000
	...
 80071f4:	c0a2c000 	.word	0xc0a2c000
 80071f8:	00000000 	.word	0x00000000
 80071fc:	c09f4000 	.word	0xc09f4000
 8007200:	00000000 	.word	0x00000000
 8007204:	c0a5e000 	.word	0xc0a5e000
 8007208:	9999999a 	.word	0x9999999a
 800720c:	3fe99999 	.word	0x3fe99999
 8007210:	00000000 	.word	0x00000000
 8007214:	40a5e000 	.word	0x40a5e000

08007218 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800721e:	2300      	movs	r3, #0
 8007220:	607b      	str	r3, [r7, #4]
 8007222:	4b10      	ldr	r3, [pc, #64]	@ (8007264 <HAL_MspInit+0x4c>)
 8007224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007226:	4a0f      	ldr	r2, [pc, #60]	@ (8007264 <HAL_MspInit+0x4c>)
 8007228:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800722c:	6453      	str	r3, [r2, #68]	@ 0x44
 800722e:	4b0d      	ldr	r3, [pc, #52]	@ (8007264 <HAL_MspInit+0x4c>)
 8007230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007232:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007236:	607b      	str	r3, [r7, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800723a:	2300      	movs	r3, #0
 800723c:	603b      	str	r3, [r7, #0]
 800723e:	4b09      	ldr	r3, [pc, #36]	@ (8007264 <HAL_MspInit+0x4c>)
 8007240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007242:	4a08      	ldr	r2, [pc, #32]	@ (8007264 <HAL_MspInit+0x4c>)
 8007244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007248:	6413      	str	r3, [r2, #64]	@ 0x40
 800724a:	4b06      	ldr	r3, [pc, #24]	@ (8007264 <HAL_MspInit+0x4c>)
 800724c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007252:	603b      	str	r3, [r7, #0]
 8007254:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007256:	2007      	movs	r0, #7
 8007258:	f000 fd18 	bl	8007c8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800725c:	bf00      	nop
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	40023800 	.word	0x40023800

08007268 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08a      	sub	sp, #40	@ 0x28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007270:	f107 0314 	add.w	r3, r7, #20
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	605a      	str	r2, [r3, #4]
 800727a:	609a      	str	r2, [r3, #8]
 800727c:	60da      	str	r2, [r3, #12]
 800727e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a19      	ldr	r2, [pc, #100]	@ (80072ec <HAL_I2C_MspInit+0x84>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d12c      	bne.n	80072e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800728a:	2300      	movs	r3, #0
 800728c:	613b      	str	r3, [r7, #16]
 800728e:	4b18      	ldr	r3, [pc, #96]	@ (80072f0 <HAL_I2C_MspInit+0x88>)
 8007290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007292:	4a17      	ldr	r2, [pc, #92]	@ (80072f0 <HAL_I2C_MspInit+0x88>)
 8007294:	f043 0302 	orr.w	r3, r3, #2
 8007298:	6313      	str	r3, [r2, #48]	@ 0x30
 800729a:	4b15      	ldr	r3, [pc, #84]	@ (80072f0 <HAL_I2C_MspInit+0x88>)
 800729c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	613b      	str	r3, [r7, #16]
 80072a4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80072a6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80072aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80072ac:	2312      	movs	r3, #18
 80072ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072b4:	2303      	movs	r3, #3
 80072b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80072b8:	2304      	movs	r3, #4
 80072ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072bc:	f107 0314 	add.w	r3, r7, #20
 80072c0:	4619      	mov	r1, r3
 80072c2:	480c      	ldr	r0, [pc, #48]	@ (80072f4 <HAL_I2C_MspInit+0x8c>)
 80072c4:	f000 fdb6 	bl	8007e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	4b08      	ldr	r3, [pc, #32]	@ (80072f0 <HAL_I2C_MspInit+0x88>)
 80072ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d0:	4a07      	ldr	r2, [pc, #28]	@ (80072f0 <HAL_I2C_MspInit+0x88>)
 80072d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80072d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80072d8:	4b05      	ldr	r3, [pc, #20]	@ (80072f0 <HAL_I2C_MspInit+0x88>)
 80072da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80072e4:	bf00      	nop
 80072e6:	3728      	adds	r7, #40	@ 0x28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	40005800 	.word	0x40005800
 80072f0:	40023800 	.word	0x40023800
 80072f4:	40020400 	.word	0x40020400

080072f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a2a      	ldr	r2, [pc, #168]	@ (80073b0 <HAL_TIM_Base_MspInit+0xb8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d116      	bne.n	8007338 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800730a:	2300      	movs	r3, #0
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	4b29      	ldr	r3, [pc, #164]	@ (80073b4 <HAL_TIM_Base_MspInit+0xbc>)
 8007310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007312:	4a28      	ldr	r2, [pc, #160]	@ (80073b4 <HAL_TIM_Base_MspInit+0xbc>)
 8007314:	f043 0301 	orr.w	r3, r3, #1
 8007318:	6453      	str	r3, [r2, #68]	@ 0x44
 800731a:	4b26      	ldr	r3, [pc, #152]	@ (80073b4 <HAL_TIM_Base_MspInit+0xbc>)
 800731c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8007326:	2200      	movs	r2, #0
 8007328:	2100      	movs	r1, #0
 800732a:	201b      	movs	r0, #27
 800732c:	f000 fcb9 	bl	8007ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8007330:	201b      	movs	r0, #27
 8007332:	f000 fcd2 	bl	8007cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007336:	e036      	b.n	80073a6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007340:	d116      	bne.n	8007370 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007342:	2300      	movs	r3, #0
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	4b1b      	ldr	r3, [pc, #108]	@ (80073b4 <HAL_TIM_Base_MspInit+0xbc>)
 8007348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734a:	4a1a      	ldr	r2, [pc, #104]	@ (80073b4 <HAL_TIM_Base_MspInit+0xbc>)
 800734c:	f043 0301 	orr.w	r3, r3, #1
 8007350:	6413      	str	r3, [r2, #64]	@ 0x40
 8007352:	4b18      	ldr	r3, [pc, #96]	@ (80073b4 <HAL_TIM_Base_MspInit+0xbc>)
 8007354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	613b      	str	r3, [r7, #16]
 800735c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800735e:	2200      	movs	r2, #0
 8007360:	2100      	movs	r1, #0
 8007362:	201c      	movs	r0, #28
 8007364:	f000 fc9d 	bl	8007ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007368:	201c      	movs	r0, #28
 800736a:	f000 fcb6 	bl	8007cda <HAL_NVIC_EnableIRQ>
}
 800736e:	e01a      	b.n	80073a6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a10      	ldr	r2, [pc, #64]	@ (80073b8 <HAL_TIM_Base_MspInit+0xc0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d115      	bne.n	80073a6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	4b0d      	ldr	r3, [pc, #52]	@ (80073b4 <HAL_TIM_Base_MspInit+0xbc>)
 8007380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007382:	4a0c      	ldr	r2, [pc, #48]	@ (80073b4 <HAL_TIM_Base_MspInit+0xbc>)
 8007384:	f043 0302 	orr.w	r3, r3, #2
 8007388:	6453      	str	r3, [r2, #68]	@ 0x44
 800738a:	4b0a      	ldr	r3, [pc, #40]	@ (80073b4 <HAL_TIM_Base_MspInit+0xbc>)
 800738c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8007396:	2200      	movs	r2, #0
 8007398:	2100      	movs	r1, #0
 800739a:	202e      	movs	r0, #46	@ 0x2e
 800739c:	f000 fc81 	bl	8007ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80073a0:	202e      	movs	r0, #46	@ 0x2e
 80073a2:	f000 fc9a 	bl	8007cda <HAL_NVIC_EnableIRQ>
}
 80073a6:	bf00      	nop
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	40010000 	.word	0x40010000
 80073b4:	40023800 	.word	0x40023800
 80073b8:	40010400 	.word	0x40010400

080073bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	@ 0x28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073c4:	f107 0314 	add.w	r3, r7, #20
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	605a      	str	r2, [r3, #4]
 80073ce:	609a      	str	r2, [r3, #8]
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a37      	ldr	r2, [pc, #220]	@ (80074b8 <HAL_TIM_MspPostInit+0xfc>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d11f      	bne.n	800741e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80073de:	2300      	movs	r3, #0
 80073e0:	613b      	str	r3, [r7, #16]
 80073e2:	4b36      	ldr	r3, [pc, #216]	@ (80074bc <HAL_TIM_MspPostInit+0x100>)
 80073e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e6:	4a35      	ldr	r2, [pc, #212]	@ (80074bc <HAL_TIM_MspPostInit+0x100>)
 80073e8:	f043 0310 	orr.w	r3, r3, #16
 80073ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80073ee:	4b33      	ldr	r3, [pc, #204]	@ (80074bc <HAL_TIM_MspPostInit+0x100>)
 80073f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f2:	f003 0310 	and.w	r3, r3, #16
 80073f6:	613b      	str	r3, [r7, #16]
 80073f8:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80073fa:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80073fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007400:	2312      	movs	r3, #18
 8007402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007404:	2302      	movs	r3, #2
 8007406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007408:	2303      	movs	r3, #3
 800740a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800740c:	2301      	movs	r3, #1
 800740e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007410:	f107 0314 	add.w	r3, r7, #20
 8007414:	4619      	mov	r1, r3
 8007416:	482a      	ldr	r0, [pc, #168]	@ (80074c0 <HAL_TIM_MspPostInit+0x104>)
 8007418:	f000 fd0c 	bl	8007e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800741c:	e047      	b.n	80074ae <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007426:	d11e      	bne.n	8007466 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	4b23      	ldr	r3, [pc, #140]	@ (80074bc <HAL_TIM_MspPostInit+0x100>)
 800742e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007430:	4a22      	ldr	r2, [pc, #136]	@ (80074bc <HAL_TIM_MspPostInit+0x100>)
 8007432:	f043 0301 	orr.w	r3, r3, #1
 8007436:	6313      	str	r3, [r2, #48]	@ 0x30
 8007438:	4b20      	ldr	r3, [pc, #128]	@ (80074bc <HAL_TIM_MspPostInit+0x100>)
 800743a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007444:	230c      	movs	r3, #12
 8007446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007448:	2312      	movs	r3, #18
 800744a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800744c:	2302      	movs	r3, #2
 800744e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007450:	2303      	movs	r3, #3
 8007452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007454:	2301      	movs	r3, #1
 8007456:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007458:	f107 0314 	add.w	r3, r7, #20
 800745c:	4619      	mov	r1, r3
 800745e:	4819      	ldr	r0, [pc, #100]	@ (80074c4 <HAL_TIM_MspPostInit+0x108>)
 8007460:	f000 fce8 	bl	8007e34 <HAL_GPIO_Init>
}
 8007464:	e023      	b.n	80074ae <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a17      	ldr	r2, [pc, #92]	@ (80074c8 <HAL_TIM_MspPostInit+0x10c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d11e      	bne.n	80074ae <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007470:	2300      	movs	r3, #0
 8007472:	60bb      	str	r3, [r7, #8]
 8007474:	4b11      	ldr	r3, [pc, #68]	@ (80074bc <HAL_TIM_MspPostInit+0x100>)
 8007476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007478:	4a10      	ldr	r2, [pc, #64]	@ (80074bc <HAL_TIM_MspPostInit+0x100>)
 800747a:	f043 0304 	orr.w	r3, r3, #4
 800747e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007480:	4b0e      	ldr	r3, [pc, #56]	@ (80074bc <HAL_TIM_MspPostInit+0x100>)
 8007482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	60bb      	str	r3, [r7, #8]
 800748a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800748c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8007490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007492:	2312      	movs	r3, #18
 8007494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007496:	2302      	movs	r3, #2
 8007498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800749a:	2303      	movs	r3, #3
 800749c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800749e:	2303      	movs	r3, #3
 80074a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074a2:	f107 0314 	add.w	r3, r7, #20
 80074a6:	4619      	mov	r1, r3
 80074a8:	4808      	ldr	r0, [pc, #32]	@ (80074cc <HAL_TIM_MspPostInit+0x110>)
 80074aa:	f000 fcc3 	bl	8007e34 <HAL_GPIO_Init>
}
 80074ae:	bf00      	nop
 80074b0:	3728      	adds	r7, #40	@ 0x28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	40010000 	.word	0x40010000
 80074bc:	40023800 	.word	0x40023800
 80074c0:	40021000 	.word	0x40021000
 80074c4:	40020000 	.word	0x40020000
 80074c8:	40010400 	.word	0x40010400
 80074cc:	40020800 	.word	0x40020800

080074d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08e      	sub	sp, #56	@ 0x38
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074dc:	2200      	movs	r2, #0
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	605a      	str	r2, [r3, #4]
 80074e2:	609a      	str	r2, [r3, #8]
 80074e4:	60da      	str	r2, [r3, #12]
 80074e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a57      	ldr	r2, [pc, #348]	@ (800764c <HAL_UART_MspInit+0x17c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d134      	bne.n	800755c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80074f2:	2300      	movs	r3, #0
 80074f4:	623b      	str	r3, [r7, #32]
 80074f6:	4b56      	ldr	r3, [pc, #344]	@ (8007650 <HAL_UART_MspInit+0x180>)
 80074f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074fa:	4a55      	ldr	r2, [pc, #340]	@ (8007650 <HAL_UART_MspInit+0x180>)
 80074fc:	f043 0310 	orr.w	r3, r3, #16
 8007500:	6453      	str	r3, [r2, #68]	@ 0x44
 8007502:	4b53      	ldr	r3, [pc, #332]	@ (8007650 <HAL_UART_MspInit+0x180>)
 8007504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007506:	f003 0310 	and.w	r3, r3, #16
 800750a:	623b      	str	r3, [r7, #32]
 800750c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800750e:	2300      	movs	r3, #0
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	4b4f      	ldr	r3, [pc, #316]	@ (8007650 <HAL_UART_MspInit+0x180>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007516:	4a4e      	ldr	r2, [pc, #312]	@ (8007650 <HAL_UART_MspInit+0x180>)
 8007518:	f043 0302 	orr.w	r3, r3, #2
 800751c:	6313      	str	r3, [r2, #48]	@ 0x30
 800751e:	4b4c      	ldr	r3, [pc, #304]	@ (8007650 <HAL_UART_MspInit+0x180>)
 8007520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	61fb      	str	r3, [r7, #28]
 8007528:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800752a:	23c0      	movs	r3, #192	@ 0xc0
 800752c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800752e:	2302      	movs	r3, #2
 8007530:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007532:	2300      	movs	r3, #0
 8007534:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007536:	2303      	movs	r3, #3
 8007538:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800753a:	2307      	movs	r3, #7
 800753c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800753e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007542:	4619      	mov	r1, r3
 8007544:	4843      	ldr	r0, [pc, #268]	@ (8007654 <HAL_UART_MspInit+0x184>)
 8007546:	f000 fc75 	bl	8007e34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800754a:	2200      	movs	r2, #0
 800754c:	2100      	movs	r1, #0
 800754e:	2025      	movs	r0, #37	@ 0x25
 8007550:	f000 fba7 	bl	8007ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007554:	2025      	movs	r0, #37	@ 0x25
 8007556:	f000 fbc0 	bl	8007cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800755a:	e073      	b.n	8007644 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a3d      	ldr	r2, [pc, #244]	@ (8007658 <HAL_UART_MspInit+0x188>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d134      	bne.n	80075d0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007566:	2300      	movs	r3, #0
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	4b39      	ldr	r3, [pc, #228]	@ (8007650 <HAL_UART_MspInit+0x180>)
 800756c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756e:	4a38      	ldr	r2, [pc, #224]	@ (8007650 <HAL_UART_MspInit+0x180>)
 8007570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007574:	6413      	str	r3, [r2, #64]	@ 0x40
 8007576:	4b36      	ldr	r3, [pc, #216]	@ (8007650 <HAL_UART_MspInit+0x180>)
 8007578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007582:	2300      	movs	r3, #0
 8007584:	617b      	str	r3, [r7, #20]
 8007586:	4b32      	ldr	r3, [pc, #200]	@ (8007650 <HAL_UART_MspInit+0x180>)
 8007588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758a:	4a31      	ldr	r2, [pc, #196]	@ (8007650 <HAL_UART_MspInit+0x180>)
 800758c:	f043 0308 	orr.w	r3, r3, #8
 8007590:	6313      	str	r3, [r2, #48]	@ 0x30
 8007592:	4b2f      	ldr	r3, [pc, #188]	@ (8007650 <HAL_UART_MspInit+0x180>)
 8007594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007596:	f003 0308 	and.w	r3, r3, #8
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800759e:	2360      	movs	r3, #96	@ 0x60
 80075a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075a2:	2302      	movs	r3, #2
 80075a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075aa:	2303      	movs	r3, #3
 80075ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80075ae:	2307      	movs	r3, #7
 80075b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80075b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075b6:	4619      	mov	r1, r3
 80075b8:	4828      	ldr	r0, [pc, #160]	@ (800765c <HAL_UART_MspInit+0x18c>)
 80075ba:	f000 fc3b 	bl	8007e34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80075be:	2200      	movs	r2, #0
 80075c0:	2100      	movs	r1, #0
 80075c2:	2026      	movs	r0, #38	@ 0x26
 80075c4:	f000 fb6d 	bl	8007ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80075c8:	2026      	movs	r0, #38	@ 0x26
 80075ca:	f000 fb86 	bl	8007cda <HAL_NVIC_EnableIRQ>
}
 80075ce:	e039      	b.n	8007644 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a22      	ldr	r2, [pc, #136]	@ (8007660 <HAL_UART_MspInit+0x190>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d134      	bne.n	8007644 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 80075da:	2300      	movs	r3, #0
 80075dc:	613b      	str	r3, [r7, #16]
 80075de:	4b1c      	ldr	r3, [pc, #112]	@ (8007650 <HAL_UART_MspInit+0x180>)
 80075e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e2:	4a1b      	ldr	r2, [pc, #108]	@ (8007650 <HAL_UART_MspInit+0x180>)
 80075e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80075ea:	4b19      	ldr	r3, [pc, #100]	@ (8007650 <HAL_UART_MspInit+0x180>)
 80075ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075f2:	613b      	str	r3, [r7, #16]
 80075f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	4b15      	ldr	r3, [pc, #84]	@ (8007650 <HAL_UART_MspInit+0x180>)
 80075fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075fe:	4a14      	ldr	r2, [pc, #80]	@ (8007650 <HAL_UART_MspInit+0x180>)
 8007600:	f043 0304 	orr.w	r3, r3, #4
 8007604:	6313      	str	r3, [r2, #48]	@ 0x30
 8007606:	4b12      	ldr	r3, [pc, #72]	@ (8007650 <HAL_UART_MspInit+0x180>)
 8007608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800760a:	f003 0304 	and.w	r3, r3, #4
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007612:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007616:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007618:	2302      	movs	r3, #2
 800761a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800761c:	2300      	movs	r3, #0
 800761e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007620:	2303      	movs	r3, #3
 8007622:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007624:	2307      	movs	r3, #7
 8007626:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007628:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800762c:	4619      	mov	r1, r3
 800762e:	480d      	ldr	r0, [pc, #52]	@ (8007664 <HAL_UART_MspInit+0x194>)
 8007630:	f000 fc00 	bl	8007e34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007634:	2200      	movs	r2, #0
 8007636:	2100      	movs	r1, #0
 8007638:	2027      	movs	r0, #39	@ 0x27
 800763a:	f000 fb32 	bl	8007ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800763e:	2027      	movs	r0, #39	@ 0x27
 8007640:	f000 fb4b 	bl	8007cda <HAL_NVIC_EnableIRQ>
}
 8007644:	bf00      	nop
 8007646:	3738      	adds	r7, #56	@ 0x38
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	40011000 	.word	0x40011000
 8007650:	40023800 	.word	0x40023800
 8007654:	40020400 	.word	0x40020400
 8007658:	40004400 	.word	0x40004400
 800765c:	40020c00 	.word	0x40020c00
 8007660:	40004800 	.word	0x40004800
 8007664:	40020800 	.word	0x40020800

08007668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800766c:	bf00      	nop
 800766e:	e7fd      	b.n	800766c <NMI_Handler+0x4>

08007670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007674:	bf00      	nop
 8007676:	e7fd      	b.n	8007674 <HardFault_Handler+0x4>

08007678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800767c:	bf00      	nop
 800767e:	e7fd      	b.n	800767c <MemManage_Handler+0x4>

08007680 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007684:	bf00      	nop
 8007686:	e7fd      	b.n	8007684 <BusFault_Handler+0x4>

08007688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800768c:	bf00      	nop
 800768e:	e7fd      	b.n	800768c <UsageFault_Handler+0x4>

08007690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007690:	b480      	push	{r7}
 8007692:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007694:	bf00      	nop
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800769e:	b480      	push	{r7}
 80076a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076a2:	bf00      	nop
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80076b0:	bf00      	nop
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80076be:	f000 f9d1 	bl	8007a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80076c2:	bf00      	nop
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_2_Pin);
 80076ca:	2001      	movs	r0, #1
 80076cc:	f000 fd80 	bl	80081d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80076d0:	bf00      	nop
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_2_Pin);
 80076d8:	2002      	movs	r0, #2
 80076da:	f000 fd79 	bl	80081d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80076de:	bf00      	nop
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_1_Pin);
 80076e6:	2004      	movs	r0, #4
 80076e8:	f000 fd72 	bl	80081d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80076ec:	bf00      	nop
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_1_Pin);
 80076f4:	2008      	movs	r0, #8
 80076f6:	f000 fd6b 	bl	80081d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80076fa:	bf00      	nop
 80076fc:	bd80      	pop	{r7, pc}

080076fe <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_3_Pin);
 8007702:	2020      	movs	r0, #32
 8007704:	f000 fd64 	bl	80081d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8007708:	2040      	movs	r0, #64	@ 0x40
 800770a:	f000 fd61 	bl	80081d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 800770e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007712:	f000 fd5d 	bl	80081d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007716:	bf00      	nop
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007720:	4802      	ldr	r0, [pc, #8]	@ (800772c <TIM1_CC_IRQHandler+0x10>)
 8007722:	f002 f861 	bl	80097e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8007726:	bf00      	nop
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20000320 	.word	0x20000320

08007730 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007734:	4802      	ldr	r0, [pc, #8]	@ (8007740 <TIM2_IRQHandler+0x10>)
 8007736:	f002 f857 	bl	80097e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800773a:	bf00      	nop
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20000368 	.word	0x20000368

08007744 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	af00      	add	r7, sp, #0
//		pitch = sensorData[1];
//		ax = sensorData[2];
//		ay = sensorData[3];
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007748:	4802      	ldr	r0, [pc, #8]	@ (8007754 <USART1_IRQHandler+0x10>)
 800774a:	f002 ff6d 	bl	800a628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800774e:	bf00      	nop
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	200003f8 	.word	0x200003f8

08007758 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800775c:	4802      	ldr	r0, [pc, #8]	@ (8007768 <USART2_IRQHandler+0x10>)
 800775e:	f002 ff63 	bl	800a628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007762:	bf00      	nop
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20000440 	.word	0x20000440

0800776c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007770:	4802      	ldr	r0, [pc, #8]	@ (800777c <USART3_IRQHandler+0x10>)
 8007772:	f002 ff59 	bl	800a628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007776:	bf00      	nop
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	20000488 	.word	0x20000488

08007780 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8007784:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007788:	f000 fd22 	bl	80081d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_3_Pin);
 800778c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007790:	f000 fd1e 	bl	80081d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_4_Pin);
 8007794:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007798:	f000 fd1a 	bl	80081d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_4_Pin);
 800779c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80077a0:	f000 fd16 	bl	80081d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80077a4:	bf00      	nop
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80077ac:	4802      	ldr	r0, [pc, #8]	@ (80077b8 <TIM8_CC_IRQHandler+0x10>)
 80077ae:	f002 f81b 	bl	80097e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80077b2:	bf00      	nop
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	200003b0 	.word	0x200003b0

080077bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80077bc:	b480      	push	{r7}
 80077be:	af00      	add	r7, sp, #0
  return 1;
 80077c0:	2301      	movs	r3, #1
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <_kill>:

int _kill(int pid, int sig)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80077d6:	f005 fd19 	bl	800d20c <__errno>
 80077da:	4603      	mov	r3, r0
 80077dc:	2216      	movs	r2, #22
 80077de:	601a      	str	r2, [r3, #0]
  return -1;
 80077e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <_exit>:

void _exit (int status)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80077f4:	f04f 31ff 	mov.w	r1, #4294967295
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff ffe7 	bl	80077cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80077fe:	bf00      	nop
 8007800:	e7fd      	b.n	80077fe <_exit+0x12>

08007802 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b086      	sub	sp, #24
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]
 8007812:	e00a      	b.n	800782a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007814:	f3af 8000 	nop.w
 8007818:	4601      	mov	r1, r0
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	1c5a      	adds	r2, r3, #1
 800781e:	60ba      	str	r2, [r7, #8]
 8007820:	b2ca      	uxtb	r2, r1
 8007822:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	3301      	adds	r3, #1
 8007828:	617b      	str	r3, [r7, #20]
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	429a      	cmp	r2, r3
 8007830:	dbf0      	blt.n	8007814 <_read+0x12>
  }

  return len;
 8007832:	687b      	ldr	r3, [r7, #4]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007848:	2300      	movs	r3, #0
 800784a:	617b      	str	r3, [r7, #20]
 800784c:	e009      	b.n	8007862 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	60ba      	str	r2, [r7, #8]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	4618      	mov	r0, r3
 8007858:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	3301      	adds	r3, #1
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	429a      	cmp	r2, r3
 8007868:	dbf1      	blt.n	800784e <_write+0x12>
  }
  return len;
 800786a:	687b      	ldr	r3, [r7, #4]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <_close>:

int _close(int file)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800787c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800789c:	605a      	str	r2, [r3, #4]
  return 0;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <_isatty>:

int _isatty(int file)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80078b4:	2301      	movs	r3, #1
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b085      	sub	sp, #20
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80078e4:	4a14      	ldr	r2, [pc, #80]	@ (8007938 <_sbrk+0x5c>)
 80078e6:	4b15      	ldr	r3, [pc, #84]	@ (800793c <_sbrk+0x60>)
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80078f0:	4b13      	ldr	r3, [pc, #76]	@ (8007940 <_sbrk+0x64>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d102      	bne.n	80078fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80078f8:	4b11      	ldr	r3, [pc, #68]	@ (8007940 <_sbrk+0x64>)
 80078fa:	4a12      	ldr	r2, [pc, #72]	@ (8007944 <_sbrk+0x68>)
 80078fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80078fe:	4b10      	ldr	r3, [pc, #64]	@ (8007940 <_sbrk+0x64>)
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4413      	add	r3, r2
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	429a      	cmp	r2, r3
 800790a:	d207      	bcs.n	800791c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800790c:	f005 fc7e 	bl	800d20c <__errno>
 8007910:	4603      	mov	r3, r0
 8007912:	220c      	movs	r2, #12
 8007914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007916:	f04f 33ff 	mov.w	r3, #4294967295
 800791a:	e009      	b.n	8007930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800791c:	4b08      	ldr	r3, [pc, #32]	@ (8007940 <_sbrk+0x64>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007922:	4b07      	ldr	r3, [pc, #28]	@ (8007940 <_sbrk+0x64>)
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4413      	add	r3, r2
 800792a:	4a05      	ldr	r2, [pc, #20]	@ (8007940 <_sbrk+0x64>)
 800792c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800792e:	68fb      	ldr	r3, [r7, #12]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3718      	adds	r7, #24
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	20020000 	.word	0x20020000
 800793c:	00000400 	.word	0x00000400
 8007940:	20000710 	.word	0x20000710
 8007944:	20000868 	.word	0x20000868

08007948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007948:	b480      	push	{r7}
 800794a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800794c:	4b06      	ldr	r3, [pc, #24]	@ (8007968 <SystemInit+0x20>)
 800794e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007952:	4a05      	ldr	r2, [pc, #20]	@ (8007968 <SystemInit+0x20>)
 8007954:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007958:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800795c:	bf00      	nop
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	e000ed00 	.word	0xe000ed00

0800796c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800796c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80079a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007970:	f7ff ffea 	bl	8007948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007974:	480c      	ldr	r0, [pc, #48]	@ (80079a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007976:	490d      	ldr	r1, [pc, #52]	@ (80079ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007978:	4a0d      	ldr	r2, [pc, #52]	@ (80079b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800797a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800797c:	e002      	b.n	8007984 <LoopCopyDataInit>

0800797e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800797e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007982:	3304      	adds	r3, #4

08007984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007988:	d3f9      	bcc.n	800797e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800798a:	4a0a      	ldr	r2, [pc, #40]	@ (80079b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800798c:	4c0a      	ldr	r4, [pc, #40]	@ (80079b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800798e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007990:	e001      	b.n	8007996 <LoopFillZerobss>

08007992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007994:	3204      	adds	r2, #4

08007996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007998:	d3fb      	bcc.n	8007992 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800799a:	f005 fc3d 	bl	800d218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800799e:	f7fa fec7 	bl	8002730 <main>
  bx  lr    
 80079a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80079a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80079a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80079ac:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 80079b0:	08012660 	.word	0x08012660
  ldr r2, =_sbss
 80079b4:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 80079b8:	20000864 	.word	0x20000864

080079bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80079bc:	e7fe      	b.n	80079bc <ADC_IRQHandler>
	...

080079c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80079c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007a00 <HAL_Init+0x40>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a0d      	ldr	r2, [pc, #52]	@ (8007a00 <HAL_Init+0x40>)
 80079ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80079ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80079d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007a00 <HAL_Init+0x40>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a0a      	ldr	r2, [pc, #40]	@ (8007a00 <HAL_Init+0x40>)
 80079d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80079da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80079dc:	4b08      	ldr	r3, [pc, #32]	@ (8007a00 <HAL_Init+0x40>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a07      	ldr	r2, [pc, #28]	@ (8007a00 <HAL_Init+0x40>)
 80079e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80079e8:	2003      	movs	r0, #3
 80079ea:	f000 f94f 	bl	8007c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80079ee:	2000      	movs	r0, #0
 80079f0:	f000 f808 	bl	8007a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80079f4:	f7ff fc10 	bl	8007218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	40023c00 	.word	0x40023c00

08007a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007a0c:	4b12      	ldr	r3, [pc, #72]	@ (8007a58 <HAL_InitTick+0x54>)
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	4b12      	ldr	r3, [pc, #72]	@ (8007a5c <HAL_InitTick+0x58>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	4619      	mov	r1, r3
 8007a16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 f967 	bl	8007cf6 <HAL_SYSTICK_Config>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e00e      	b.n	8007a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b0f      	cmp	r3, #15
 8007a36:	d80a      	bhi.n	8007a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007a38:	2200      	movs	r2, #0
 8007a3a:	6879      	ldr	r1, [r7, #4]
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	f000 f92f 	bl	8007ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007a44:	4a06      	ldr	r2, [pc, #24]	@ (8007a60 <HAL_InitTick+0x5c>)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e000      	b.n	8007a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	200000cc 	.word	0x200000cc
 8007a5c:	200000d4 	.word	0x200000d4
 8007a60:	200000d0 	.word	0x200000d0

08007a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a64:	b480      	push	{r7}
 8007a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007a68:	4b06      	ldr	r3, [pc, #24]	@ (8007a84 <HAL_IncTick+0x20>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	4b06      	ldr	r3, [pc, #24]	@ (8007a88 <HAL_IncTick+0x24>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4413      	add	r3, r2
 8007a74:	4a04      	ldr	r2, [pc, #16]	@ (8007a88 <HAL_IncTick+0x24>)
 8007a76:	6013      	str	r3, [r2, #0]
}
 8007a78:	bf00      	nop
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	200000d4 	.word	0x200000d4
 8007a88:	20000714 	.word	0x20000714

08007a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8007a90:	4b03      	ldr	r3, [pc, #12]	@ (8007aa0 <HAL_GetTick+0x14>)
 8007a92:	681b      	ldr	r3, [r3, #0]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	20000714 	.word	0x20000714

08007aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007aac:	f7ff ffee 	bl	8007a8c <HAL_GetTick>
 8007ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abc:	d005      	beq.n	8007aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007abe:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae8 <HAL_Delay+0x44>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007aca:	bf00      	nop
 8007acc:	f7ff ffde 	bl	8007a8c <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d8f7      	bhi.n	8007acc <HAL_Delay+0x28>
  {
  }
}
 8007adc:	bf00      	nop
 8007ade:	bf00      	nop
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	200000d4 	.word	0x200000d4

08007aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007afc:	4b0c      	ldr	r3, [pc, #48]	@ (8007b30 <__NVIC_SetPriorityGrouping+0x44>)
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007b08:	4013      	ands	r3, r2
 8007b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b1e:	4a04      	ldr	r2, [pc, #16]	@ (8007b30 <__NVIC_SetPriorityGrouping+0x44>)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	60d3      	str	r3, [r2, #12]
}
 8007b24:	bf00      	nop
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	e000ed00 	.word	0xe000ed00

08007b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b38:	4b04      	ldr	r3, [pc, #16]	@ (8007b4c <__NVIC_GetPriorityGrouping+0x18>)
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	0a1b      	lsrs	r3, r3, #8
 8007b3e:	f003 0307 	and.w	r3, r3, #7
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	e000ed00 	.word	0xe000ed00

08007b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	db0b      	blt.n	8007b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	f003 021f 	and.w	r2, r3, #31
 8007b68:	4907      	ldr	r1, [pc, #28]	@ (8007b88 <__NVIC_EnableIRQ+0x38>)
 8007b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	2001      	movs	r0, #1
 8007b72:	fa00 f202 	lsl.w	r2, r0, r2
 8007b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007b7a:	bf00      	nop
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	e000e100 	.word	0xe000e100

08007b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	6039      	str	r1, [r7, #0]
 8007b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	db0a      	blt.n	8007bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	490c      	ldr	r1, [pc, #48]	@ (8007bd8 <__NVIC_SetPriority+0x4c>)
 8007ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007baa:	0112      	lsls	r2, r2, #4
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	440b      	add	r3, r1
 8007bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007bb4:	e00a      	b.n	8007bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	4908      	ldr	r1, [pc, #32]	@ (8007bdc <__NVIC_SetPriority+0x50>)
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	f003 030f 	and.w	r3, r3, #15
 8007bc2:	3b04      	subs	r3, #4
 8007bc4:	0112      	lsls	r2, r2, #4
 8007bc6:	b2d2      	uxtb	r2, r2
 8007bc8:	440b      	add	r3, r1
 8007bca:	761a      	strb	r2, [r3, #24]
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr
 8007bd8:	e000e100 	.word	0xe000e100
 8007bdc:	e000ed00 	.word	0xe000ed00

08007be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b089      	sub	sp, #36	@ 0x24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f003 0307 	and.w	r3, r3, #7
 8007bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f1c3 0307 	rsb	r3, r3, #7
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	bf28      	it	cs
 8007bfe:	2304      	movcs	r3, #4
 8007c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	3304      	adds	r3, #4
 8007c06:	2b06      	cmp	r3, #6
 8007c08:	d902      	bls.n	8007c10 <NVIC_EncodePriority+0x30>
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	3b03      	subs	r3, #3
 8007c0e:	e000      	b.n	8007c12 <NVIC_EncodePriority+0x32>
 8007c10:	2300      	movs	r3, #0
 8007c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c14:	f04f 32ff 	mov.w	r2, #4294967295
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1e:	43da      	mvns	r2, r3
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	401a      	ands	r2, r3
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c28:	f04f 31ff 	mov.w	r1, #4294967295
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c32:	43d9      	mvns	r1, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c38:	4313      	orrs	r3, r2
         );
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3724      	adds	r7, #36	@ 0x24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
	...

08007c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c58:	d301      	bcc.n	8007c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e00f      	b.n	8007c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8007c88 <SysTick_Config+0x40>)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c66:	210f      	movs	r1, #15
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6c:	f7ff ff8e 	bl	8007b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c70:	4b05      	ldr	r3, [pc, #20]	@ (8007c88 <SysTick_Config+0x40>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c76:	4b04      	ldr	r3, [pc, #16]	@ (8007c88 <SysTick_Config+0x40>)
 8007c78:	2207      	movs	r2, #7
 8007c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	e000e010 	.word	0xe000e010

08007c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7ff ff29 	bl	8007aec <__NVIC_SetPriorityGrouping>
}
 8007c9a:	bf00      	nop
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b086      	sub	sp, #24
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	4603      	mov	r3, r0
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	607a      	str	r2, [r7, #4]
 8007cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007cb4:	f7ff ff3e 	bl	8007b34 <__NVIC_GetPriorityGrouping>
 8007cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	6978      	ldr	r0, [r7, #20]
 8007cc0:	f7ff ff8e 	bl	8007be0 <NVIC_EncodePriority>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cca:	4611      	mov	r1, r2
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7ff ff5d 	bl	8007b8c <__NVIC_SetPriority>
}
 8007cd2:	bf00      	nop
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7ff ff31 	bl	8007b50 <__NVIC_EnableIRQ>
}
 8007cee:	bf00      	nop
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b082      	sub	sp, #8
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff ffa2 	bl	8007c48 <SysTick_Config>
 8007d04:	4603      	mov	r3, r0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d1a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007d1c:	f7ff feb6 	bl	8007a8c <HAL_GetTick>
 8007d20:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d008      	beq.n	8007d40 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2280      	movs	r2, #128	@ 0x80
 8007d32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e052      	b.n	8007de6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 0216 	bic.w	r2, r2, #22
 8007d4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	695a      	ldr	r2, [r3, #20]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d5e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d103      	bne.n	8007d70 <HAL_DMA_Abort+0x62>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d007      	beq.n	8007d80 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0208 	bic.w	r2, r2, #8
 8007d7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0201 	bic.w	r2, r2, #1
 8007d8e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d90:	e013      	b.n	8007dba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d92:	f7ff fe7b 	bl	8007a8c <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	2b05      	cmp	r3, #5
 8007d9e:	d90c      	bls.n	8007dba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2220      	movs	r2, #32
 8007da4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2203      	movs	r2, #3
 8007daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e015      	b.n	8007de6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e4      	bne.n	8007d92 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dcc:	223f      	movs	r2, #63	@ 0x3f
 8007dce:	409a      	lsls	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d004      	beq.n	8007e0c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2280      	movs	r2, #128	@ 0x80
 8007e06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e00c      	b.n	8007e26 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2205      	movs	r2, #5
 8007e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0201 	bic.w	r2, r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
	...

08007e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b089      	sub	sp, #36	@ 0x24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61fb      	str	r3, [r7, #28]
 8007e4e:	e16b      	b.n	8008128 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007e50:	2201      	movs	r2, #1
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	fa02 f303 	lsl.w	r3, r2, r3
 8007e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	4013      	ands	r3, r2
 8007e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	f040 815a 	bne.w	8008122 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d005      	beq.n	8007e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d130      	bne.n	8007ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	2203      	movs	r2, #3
 8007e92:	fa02 f303 	lsl.w	r3, r2, r3
 8007e96:	43db      	mvns	r3, r3
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68da      	ldr	r2, [r3, #12]
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	69ba      	ldr	r2, [r7, #24]
 8007eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec4:	43db      	mvns	r3, r3
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	4013      	ands	r3, r2
 8007eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	091b      	lsrs	r3, r3, #4
 8007ed2:	f003 0201 	and.w	r2, r3, #1
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f003 0303 	and.w	r3, r3, #3
 8007ef0:	2b03      	cmp	r3, #3
 8007ef2:	d017      	beq.n	8007f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	2203      	movs	r2, #3
 8007f00:	fa02 f303 	lsl.w	r3, r2, r3
 8007f04:	43db      	mvns	r3, r3
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	fa02 f303 	lsl.w	r3, r2, r3
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f003 0303 	and.w	r3, r3, #3
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d123      	bne.n	8007f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	08da      	lsrs	r2, r3, #3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3208      	adds	r2, #8
 8007f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	f003 0307 	and.w	r3, r3, #7
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	220f      	movs	r2, #15
 8007f48:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4c:	43db      	mvns	r3, r3
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	4013      	ands	r3, r2
 8007f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	691a      	ldr	r2, [r3, #16]
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	f003 0307 	and.w	r3, r3, #7
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	fa02 f303 	lsl.w	r3, r2, r3
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	08da      	lsrs	r2, r3, #3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	3208      	adds	r2, #8
 8007f72:	69b9      	ldr	r1, [r7, #24]
 8007f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	005b      	lsls	r3, r3, #1
 8007f82:	2203      	movs	r2, #3
 8007f84:	fa02 f303 	lsl.w	r3, r2, r3
 8007f88:	43db      	mvns	r3, r3
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f003 0203 	and.w	r2, r3, #3
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 80b4 	beq.w	8008122 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	4b60      	ldr	r3, [pc, #384]	@ (8008140 <HAL_GPIO_Init+0x30c>)
 8007fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc2:	4a5f      	ldr	r2, [pc, #380]	@ (8008140 <HAL_GPIO_Init+0x30c>)
 8007fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8007fca:	4b5d      	ldr	r3, [pc, #372]	@ (8008140 <HAL_GPIO_Init+0x30c>)
 8007fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007fd6:	4a5b      	ldr	r2, [pc, #364]	@ (8008144 <HAL_GPIO_Init+0x310>)
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	089b      	lsrs	r3, r3, #2
 8007fdc:	3302      	adds	r3, #2
 8007fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	220f      	movs	r2, #15
 8007fee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff2:	43db      	mvns	r3, r3
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a52      	ldr	r2, [pc, #328]	@ (8008148 <HAL_GPIO_Init+0x314>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d02b      	beq.n	800805a <HAL_GPIO_Init+0x226>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a51      	ldr	r2, [pc, #324]	@ (800814c <HAL_GPIO_Init+0x318>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d025      	beq.n	8008056 <HAL_GPIO_Init+0x222>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a50      	ldr	r2, [pc, #320]	@ (8008150 <HAL_GPIO_Init+0x31c>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d01f      	beq.n	8008052 <HAL_GPIO_Init+0x21e>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a4f      	ldr	r2, [pc, #316]	@ (8008154 <HAL_GPIO_Init+0x320>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d019      	beq.n	800804e <HAL_GPIO_Init+0x21a>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a4e      	ldr	r2, [pc, #312]	@ (8008158 <HAL_GPIO_Init+0x324>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d013      	beq.n	800804a <HAL_GPIO_Init+0x216>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a4d      	ldr	r2, [pc, #308]	@ (800815c <HAL_GPIO_Init+0x328>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d00d      	beq.n	8008046 <HAL_GPIO_Init+0x212>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a4c      	ldr	r2, [pc, #304]	@ (8008160 <HAL_GPIO_Init+0x32c>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d007      	beq.n	8008042 <HAL_GPIO_Init+0x20e>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a4b      	ldr	r2, [pc, #300]	@ (8008164 <HAL_GPIO_Init+0x330>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d101      	bne.n	800803e <HAL_GPIO_Init+0x20a>
 800803a:	2307      	movs	r3, #7
 800803c:	e00e      	b.n	800805c <HAL_GPIO_Init+0x228>
 800803e:	2308      	movs	r3, #8
 8008040:	e00c      	b.n	800805c <HAL_GPIO_Init+0x228>
 8008042:	2306      	movs	r3, #6
 8008044:	e00a      	b.n	800805c <HAL_GPIO_Init+0x228>
 8008046:	2305      	movs	r3, #5
 8008048:	e008      	b.n	800805c <HAL_GPIO_Init+0x228>
 800804a:	2304      	movs	r3, #4
 800804c:	e006      	b.n	800805c <HAL_GPIO_Init+0x228>
 800804e:	2303      	movs	r3, #3
 8008050:	e004      	b.n	800805c <HAL_GPIO_Init+0x228>
 8008052:	2302      	movs	r3, #2
 8008054:	e002      	b.n	800805c <HAL_GPIO_Init+0x228>
 8008056:	2301      	movs	r3, #1
 8008058:	e000      	b.n	800805c <HAL_GPIO_Init+0x228>
 800805a:	2300      	movs	r3, #0
 800805c:	69fa      	ldr	r2, [r7, #28]
 800805e:	f002 0203 	and.w	r2, r2, #3
 8008062:	0092      	lsls	r2, r2, #2
 8008064:	4093      	lsls	r3, r2
 8008066:	69ba      	ldr	r2, [r7, #24]
 8008068:	4313      	orrs	r3, r2
 800806a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800806c:	4935      	ldr	r1, [pc, #212]	@ (8008144 <HAL_GPIO_Init+0x310>)
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	089b      	lsrs	r3, r3, #2
 8008072:	3302      	adds	r3, #2
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800807a:	4b3b      	ldr	r3, [pc, #236]	@ (8008168 <HAL_GPIO_Init+0x334>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	43db      	mvns	r3, r3
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	4013      	ands	r3, r2
 8008088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800809e:	4a32      	ldr	r2, [pc, #200]	@ (8008168 <HAL_GPIO_Init+0x334>)
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80080a4:	4b30      	ldr	r3, [pc, #192]	@ (8008168 <HAL_GPIO_Init+0x334>)
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	43db      	mvns	r3, r3
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	4013      	ands	r3, r2
 80080b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80080c8:	4a27      	ldr	r2, [pc, #156]	@ (8008168 <HAL_GPIO_Init+0x334>)
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80080ce:	4b26      	ldr	r3, [pc, #152]	@ (8008168 <HAL_GPIO_Init+0x334>)
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	43db      	mvns	r3, r3
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	4013      	ands	r3, r2
 80080dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80080f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008168 <HAL_GPIO_Init+0x334>)
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80080f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008168 <HAL_GPIO_Init+0x334>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	43db      	mvns	r3, r3
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	4013      	ands	r3, r2
 8008106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	4313      	orrs	r3, r2
 800811a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800811c:	4a12      	ldr	r2, [pc, #72]	@ (8008168 <HAL_GPIO_Init+0x334>)
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	3301      	adds	r3, #1
 8008126:	61fb      	str	r3, [r7, #28]
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	2b0f      	cmp	r3, #15
 800812c:	f67f ae90 	bls.w	8007e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008130:	bf00      	nop
 8008132:	bf00      	nop
 8008134:	3724      	adds	r7, #36	@ 0x24
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	40023800 	.word	0x40023800
 8008144:	40013800 	.word	0x40013800
 8008148:	40020000 	.word	0x40020000
 800814c:	40020400 	.word	0x40020400
 8008150:	40020800 	.word	0x40020800
 8008154:	40020c00 	.word	0x40020c00
 8008158:	40021000 	.word	0x40021000
 800815c:	40021400 	.word	0x40021400
 8008160:	40021800 	.word	0x40021800
 8008164:	40021c00 	.word	0x40021c00
 8008168:	40013c00 	.word	0x40013c00

0800816c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	691a      	ldr	r2, [r3, #16]
 800817c:	887b      	ldrh	r3, [r7, #2]
 800817e:	4013      	ands	r3, r2
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008184:	2301      	movs	r3, #1
 8008186:	73fb      	strb	r3, [r7, #15]
 8008188:	e001      	b.n	800818e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800818a:	2300      	movs	r3, #0
 800818c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800818e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	807b      	strh	r3, [r7, #2]
 80081a8:	4613      	mov	r3, r2
 80081aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80081ac:	787b      	ldrb	r3, [r7, #1]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80081b2:	887a      	ldrh	r2, [r7, #2]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80081b8:	e003      	b.n	80081c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80081ba:	887b      	ldrh	r3, [r7, #2]
 80081bc:	041a      	lsls	r2, r3, #16
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	619a      	str	r2, [r3, #24]
}
 80081c2:	bf00      	nop
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
	...

080081d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	4603      	mov	r3, r0
 80081d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80081da:	4b08      	ldr	r3, [pc, #32]	@ (80081fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80081dc:	695a      	ldr	r2, [r3, #20]
 80081de:	88fb      	ldrh	r3, [r7, #6]
 80081e0:	4013      	ands	r3, r2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d006      	beq.n	80081f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80081e6:	4a05      	ldr	r2, [pc, #20]	@ (80081fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80081e8:	88fb      	ldrh	r3, [r7, #6]
 80081ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80081ec:	88fb      	ldrh	r3, [r7, #6]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fa f910 	bl	8002414 <HAL_GPIO_EXTI_Callback>
  }
}
 80081f4:	bf00      	nop
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	40013c00 	.word	0x40013c00

08008200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e12b      	b.n	800846a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d106      	bne.n	800822c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff f81e 	bl	8007268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2224      	movs	r2, #36	@ 0x24
 8008230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f022 0201 	bic.w	r2, r2, #1
 8008242:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008252:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008262:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008264:	f001 f8da 	bl	800941c <HAL_RCC_GetPCLK1Freq>
 8008268:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	4a81      	ldr	r2, [pc, #516]	@ (8008474 <HAL_I2C_Init+0x274>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d807      	bhi.n	8008284 <HAL_I2C_Init+0x84>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4a80      	ldr	r2, [pc, #512]	@ (8008478 <HAL_I2C_Init+0x278>)
 8008278:	4293      	cmp	r3, r2
 800827a:	bf94      	ite	ls
 800827c:	2301      	movls	r3, #1
 800827e:	2300      	movhi	r3, #0
 8008280:	b2db      	uxtb	r3, r3
 8008282:	e006      	b.n	8008292 <HAL_I2C_Init+0x92>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	4a7d      	ldr	r2, [pc, #500]	@ (800847c <HAL_I2C_Init+0x27c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	bf94      	ite	ls
 800828c:	2301      	movls	r3, #1
 800828e:	2300      	movhi	r3, #0
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e0e7      	b.n	800846a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4a78      	ldr	r2, [pc, #480]	@ (8008480 <HAL_I2C_Init+0x280>)
 800829e:	fba2 2303 	umull	r2, r3, r2, r3
 80082a2:	0c9b      	lsrs	r3, r3, #18
 80082a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	4a6a      	ldr	r2, [pc, #424]	@ (8008474 <HAL_I2C_Init+0x274>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d802      	bhi.n	80082d4 <HAL_I2C_Init+0xd4>
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	3301      	adds	r3, #1
 80082d2:	e009      	b.n	80082e8 <HAL_I2C_Init+0xe8>
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80082da:	fb02 f303 	mul.w	r3, r2, r3
 80082de:	4a69      	ldr	r2, [pc, #420]	@ (8008484 <HAL_I2C_Init+0x284>)
 80082e0:	fba2 2303 	umull	r2, r3, r2, r3
 80082e4:	099b      	lsrs	r3, r3, #6
 80082e6:	3301      	adds	r3, #1
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	6812      	ldr	r2, [r2, #0]
 80082ec:	430b      	orrs	r3, r1
 80082ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80082fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	495c      	ldr	r1, [pc, #368]	@ (8008474 <HAL_I2C_Init+0x274>)
 8008304:	428b      	cmp	r3, r1
 8008306:	d819      	bhi.n	800833c <HAL_I2C_Init+0x13c>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	1e59      	subs	r1, r3, #1
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	fbb1 f3f3 	udiv	r3, r1, r3
 8008316:	1c59      	adds	r1, r3, #1
 8008318:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800831c:	400b      	ands	r3, r1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <HAL_I2C_Init+0x138>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	1e59      	subs	r1, r3, #1
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008330:	3301      	adds	r3, #1
 8008332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008336:	e051      	b.n	80083dc <HAL_I2C_Init+0x1dc>
 8008338:	2304      	movs	r3, #4
 800833a:	e04f      	b.n	80083dc <HAL_I2C_Init+0x1dc>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d111      	bne.n	8008368 <HAL_I2C_Init+0x168>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	1e58      	subs	r0, r3, #1
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6859      	ldr	r1, [r3, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	005b      	lsls	r3, r3, #1
 8008350:	440b      	add	r3, r1
 8008352:	fbb0 f3f3 	udiv	r3, r0, r3
 8008356:	3301      	adds	r3, #1
 8008358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800835c:	2b00      	cmp	r3, #0
 800835e:	bf0c      	ite	eq
 8008360:	2301      	moveq	r3, #1
 8008362:	2300      	movne	r3, #0
 8008364:	b2db      	uxtb	r3, r3
 8008366:	e012      	b.n	800838e <HAL_I2C_Init+0x18e>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	1e58      	subs	r0, r3, #1
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6859      	ldr	r1, [r3, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	440b      	add	r3, r1
 8008376:	0099      	lsls	r1, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	fbb0 f3f3 	udiv	r3, r0, r3
 800837e:	3301      	adds	r3, #1
 8008380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008384:	2b00      	cmp	r3, #0
 8008386:	bf0c      	ite	eq
 8008388:	2301      	moveq	r3, #1
 800838a:	2300      	movne	r3, #0
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <HAL_I2C_Init+0x196>
 8008392:	2301      	movs	r3, #1
 8008394:	e022      	b.n	80083dc <HAL_I2C_Init+0x1dc>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10e      	bne.n	80083bc <HAL_I2C_Init+0x1bc>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	1e58      	subs	r0, r3, #1
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6859      	ldr	r1, [r3, #4]
 80083a6:	460b      	mov	r3, r1
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	440b      	add	r3, r1
 80083ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80083b0:	3301      	adds	r3, #1
 80083b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083ba:	e00f      	b.n	80083dc <HAL_I2C_Init+0x1dc>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	1e58      	subs	r0, r3, #1
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6859      	ldr	r1, [r3, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	440b      	add	r3, r1
 80083ca:	0099      	lsls	r1, r3, #2
 80083cc:	440b      	add	r3, r1
 80083ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80083d2:	3301      	adds	r3, #1
 80083d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	6809      	ldr	r1, [r1, #0]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	69da      	ldr	r2, [r3, #28]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	431a      	orrs	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	430a      	orrs	r2, r1
 80083fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800840a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	6911      	ldr	r1, [r2, #16]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	68d2      	ldr	r2, [r2, #12]
 8008416:	4311      	orrs	r1, r2
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	6812      	ldr	r2, [r2, #0]
 800841c:	430b      	orrs	r3, r1
 800841e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	695a      	ldr	r2, [r3, #20]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	431a      	orrs	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	430a      	orrs	r2, r1
 800843a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f042 0201 	orr.w	r2, r2, #1
 800844a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2220      	movs	r2, #32
 8008456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	000186a0 	.word	0x000186a0
 8008478:	001e847f 	.word	0x001e847f
 800847c:	003d08ff 	.word	0x003d08ff
 8008480:	431bde83 	.word	0x431bde83
 8008484:	10624dd3 	.word	0x10624dd3

08008488 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b088      	sub	sp, #32
 800848c:	af02      	add	r7, sp, #8
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	607a      	str	r2, [r7, #4]
 8008492:	461a      	mov	r2, r3
 8008494:	460b      	mov	r3, r1
 8008496:	817b      	strh	r3, [r7, #10]
 8008498:	4613      	mov	r3, r2
 800849a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800849c:	f7ff faf6 	bl	8007a8c <HAL_GetTick>
 80084a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b20      	cmp	r3, #32
 80084ac:	f040 80e0 	bne.w	8008670 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	2319      	movs	r3, #25
 80084b6:	2201      	movs	r2, #1
 80084b8:	4970      	ldr	r1, [pc, #448]	@ (800867c <HAL_I2C_Master_Transmit+0x1f4>)
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 f964 	bl	8008788 <I2C_WaitOnFlagUntilTimeout>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80084c6:	2302      	movs	r3, #2
 80084c8:	e0d3      	b.n	8008672 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d101      	bne.n	80084d8 <HAL_I2C_Master_Transmit+0x50>
 80084d4:	2302      	movs	r3, #2
 80084d6:	e0cc      	b.n	8008672 <HAL_I2C_Master_Transmit+0x1ea>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d007      	beq.n	80084fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f042 0201 	orr.w	r2, r2, #1
 80084fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800850c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2221      	movs	r2, #33	@ 0x21
 8008512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2210      	movs	r2, #16
 800851a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	893a      	ldrh	r2, [r7, #8]
 800852e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008534:	b29a      	uxth	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	4a50      	ldr	r2, [pc, #320]	@ (8008680 <HAL_I2C_Master_Transmit+0x1f8>)
 800853e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008540:	8979      	ldrh	r1, [r7, #10]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	6a3a      	ldr	r2, [r7, #32]
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f000 f89c 	bl	8008684 <I2C_MasterRequestWrite>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e08d      	b.n	8008672 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008556:	2300      	movs	r3, #0
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	613b      	str	r3, [r7, #16]
 800856a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800856c:	e066      	b.n	800863c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	6a39      	ldr	r1, [r7, #32]
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fa22 	bl	80089bc <I2C_WaitOnTXEFlagUntilTimeout>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00d      	beq.n	800859a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008582:	2b04      	cmp	r3, #4
 8008584:	d107      	bne.n	8008596 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008594:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e06b      	b.n	8008672 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800859e:	781a      	ldrb	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	3b01      	subs	r3, #1
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085c2:	3b01      	subs	r3, #1
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	695b      	ldr	r3, [r3, #20]
 80085d0:	f003 0304 	and.w	r3, r3, #4
 80085d4:	2b04      	cmp	r3, #4
 80085d6:	d11b      	bne.n	8008610 <HAL_I2C_Master_Transmit+0x188>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d017      	beq.n	8008610 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e4:	781a      	ldrb	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	3b01      	subs	r3, #1
 80085fe:	b29a      	uxth	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008608:	3b01      	subs	r3, #1
 800860a:	b29a      	uxth	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	6a39      	ldr	r1, [r7, #32]
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 fa19 	bl	8008a4c <I2C_WaitOnBTFFlagUntilTimeout>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00d      	beq.n	800863c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008624:	2b04      	cmp	r3, #4
 8008626:	d107      	bne.n	8008638 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008636:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e01a      	b.n	8008672 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008640:	2b00      	cmp	r3, #0
 8008642:	d194      	bne.n	800856e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2220      	movs	r2, #32
 8008658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	e000      	b.n	8008672 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008670:	2302      	movs	r3, #2
  }
}
 8008672:	4618      	mov	r0, r3
 8008674:	3718      	adds	r7, #24
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	00100002 	.word	0x00100002
 8008680:	ffff0000 	.word	0xffff0000

08008684 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b088      	sub	sp, #32
 8008688:	af02      	add	r7, sp, #8
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	607a      	str	r2, [r7, #4]
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	460b      	mov	r3, r1
 8008692:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008698:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b08      	cmp	r3, #8
 800869e:	d006      	beq.n	80086ae <I2C_MasterRequestWrite+0x2a>
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d003      	beq.n	80086ae <I2C_MasterRequestWrite+0x2a>
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80086ac:	d108      	bne.n	80086c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	e00b      	b.n	80086d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c4:	2b12      	cmp	r3, #18
 80086c6:	d107      	bne.n	80086d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 f84f 	bl	8008788 <I2C_WaitOnFlagUntilTimeout>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00d      	beq.n	800870c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086fe:	d103      	bne.n	8008708 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008706:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e035      	b.n	8008778 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008714:	d108      	bne.n	8008728 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008716:	897b      	ldrh	r3, [r7, #10]
 8008718:	b2db      	uxtb	r3, r3
 800871a:	461a      	mov	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008724:	611a      	str	r2, [r3, #16]
 8008726:	e01b      	b.n	8008760 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008728:	897b      	ldrh	r3, [r7, #10]
 800872a:	11db      	asrs	r3, r3, #7
 800872c:	b2db      	uxtb	r3, r3
 800872e:	f003 0306 	and.w	r3, r3, #6
 8008732:	b2db      	uxtb	r3, r3
 8008734:	f063 030f 	orn	r3, r3, #15
 8008738:	b2da      	uxtb	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	490e      	ldr	r1, [pc, #56]	@ (8008780 <I2C_MasterRequestWrite+0xfc>)
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 f898 	bl	800887c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e010      	b.n	8008778 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008756:	897b      	ldrh	r3, [r7, #10]
 8008758:	b2da      	uxtb	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	4907      	ldr	r1, [pc, #28]	@ (8008784 <I2C_MasterRequestWrite+0x100>)
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 f888 	bl	800887c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e000      	b.n	8008778 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	00010008 	.word	0x00010008
 8008784:	00010002 	.word	0x00010002

08008788 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	603b      	str	r3, [r7, #0]
 8008794:	4613      	mov	r3, r2
 8008796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008798:	e048      	b.n	800882c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a0:	d044      	beq.n	800882c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087a2:	f7ff f973 	bl	8007a8c <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d302      	bcc.n	80087b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d139      	bne.n	800882c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	0c1b      	lsrs	r3, r3, #16
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d10d      	bne.n	80087de <I2C_WaitOnFlagUntilTimeout+0x56>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	43da      	mvns	r2, r3
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	4013      	ands	r3, r2
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	bf0c      	ite	eq
 80087d4:	2301      	moveq	r3, #1
 80087d6:	2300      	movne	r3, #0
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	461a      	mov	r2, r3
 80087dc:	e00c      	b.n	80087f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	43da      	mvns	r2, r3
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	4013      	ands	r3, r2
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	bf0c      	ite	eq
 80087f0:	2301      	moveq	r3, #1
 80087f2:	2300      	movne	r3, #0
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	461a      	mov	r2, r3
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d116      	bne.n	800882c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2220      	movs	r2, #32
 8008808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008818:	f043 0220 	orr.w	r2, r3, #32
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e023      	b.n	8008874 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	0c1b      	lsrs	r3, r3, #16
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b01      	cmp	r3, #1
 8008834:	d10d      	bne.n	8008852 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	43da      	mvns	r2, r3
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	4013      	ands	r3, r2
 8008842:	b29b      	uxth	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	bf0c      	ite	eq
 8008848:	2301      	moveq	r3, #1
 800884a:	2300      	movne	r3, #0
 800884c:	b2db      	uxtb	r3, r3
 800884e:	461a      	mov	r2, r3
 8008850:	e00c      	b.n	800886c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	43da      	mvns	r2, r3
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	4013      	ands	r3, r2
 800885e:	b29b      	uxth	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	bf0c      	ite	eq
 8008864:	2301      	moveq	r3, #1
 8008866:	2300      	movne	r3, #0
 8008868:	b2db      	uxtb	r3, r3
 800886a:	461a      	mov	r2, r3
 800886c:	79fb      	ldrb	r3, [r7, #7]
 800886e:	429a      	cmp	r2, r3
 8008870:	d093      	beq.n	800879a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
 8008888:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800888a:	e071      	b.n	8008970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800889a:	d123      	bne.n	80088e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80088b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2220      	movs	r2, #32
 80088c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d0:	f043 0204 	orr.w	r2, r3, #4
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e067      	b.n	80089b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ea:	d041      	beq.n	8008970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ec:	f7ff f8ce 	bl	8007a8c <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d302      	bcc.n	8008902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d136      	bne.n	8008970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	0c1b      	lsrs	r3, r3, #16
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b01      	cmp	r3, #1
 800890a:	d10c      	bne.n	8008926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	43da      	mvns	r2, r3
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	4013      	ands	r3, r2
 8008918:	b29b      	uxth	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	bf14      	ite	ne
 800891e:	2301      	movne	r3, #1
 8008920:	2300      	moveq	r3, #0
 8008922:	b2db      	uxtb	r3, r3
 8008924:	e00b      	b.n	800893e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	43da      	mvns	r2, r3
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	4013      	ands	r3, r2
 8008932:	b29b      	uxth	r3, r3
 8008934:	2b00      	cmp	r3, #0
 8008936:	bf14      	ite	ne
 8008938:	2301      	movne	r3, #1
 800893a:	2300      	moveq	r3, #0
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d016      	beq.n	8008970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2220      	movs	r2, #32
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895c:	f043 0220 	orr.w	r2, r3, #32
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e021      	b.n	80089b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	0c1b      	lsrs	r3, r3, #16
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b01      	cmp	r3, #1
 8008978:	d10c      	bne.n	8008994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	43da      	mvns	r2, r3
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	4013      	ands	r3, r2
 8008986:	b29b      	uxth	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	bf14      	ite	ne
 800898c:	2301      	movne	r3, #1
 800898e:	2300      	moveq	r3, #0
 8008990:	b2db      	uxtb	r3, r3
 8008992:	e00b      	b.n	80089ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	43da      	mvns	r2, r3
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	4013      	ands	r3, r2
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	bf14      	ite	ne
 80089a6:	2301      	movne	r3, #1
 80089a8:	2300      	moveq	r3, #0
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f47f af6d 	bne.w	800888c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089c8:	e034      	b.n	8008a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 f886 	bl	8008adc <I2C_IsAcknowledgeFailed>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e034      	b.n	8008a44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e0:	d028      	beq.n	8008a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089e2:	f7ff f853 	bl	8007a8c <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d302      	bcc.n	80089f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d11d      	bne.n	8008a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a02:	2b80      	cmp	r3, #128	@ 0x80
 8008a04:	d016      	beq.n	8008a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a20:	f043 0220 	orr.w	r2, r3, #32
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e007      	b.n	8008a44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a3e:	2b80      	cmp	r3, #128	@ 0x80
 8008a40:	d1c3      	bne.n	80089ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a58:	e034      	b.n	8008ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 f83e 	bl	8008adc <I2C_IsAcknowledgeFailed>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e034      	b.n	8008ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a70:	d028      	beq.n	8008ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a72:	f7ff f80b 	bl	8007a8c <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d302      	bcc.n	8008a88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d11d      	bne.n	8008ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	f003 0304 	and.w	r3, r3, #4
 8008a92:	2b04      	cmp	r3, #4
 8008a94:	d016      	beq.n	8008ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab0:	f043 0220 	orr.w	r2, r3, #32
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e007      	b.n	8008ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	f003 0304 	and.w	r3, r3, #4
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d1c3      	bne.n	8008a5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008af2:	d11b      	bne.n	8008b2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008afc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2220      	movs	r2, #32
 8008b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b18:	f043 0204 	orr.w	r2, r3, #4
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e000      	b.n	8008b2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
	...

08008b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e267      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d075      	beq.n	8008c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b5a:	4b88      	ldr	r3, [pc, #544]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f003 030c 	and.w	r3, r3, #12
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	d00c      	beq.n	8008b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b66:	4b85      	ldr	r3, [pc, #532]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b6e:	2b08      	cmp	r3, #8
 8008b70:	d112      	bne.n	8008b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b72:	4b82      	ldr	r3, [pc, #520]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b7e:	d10b      	bne.n	8008b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b80:	4b7e      	ldr	r3, [pc, #504]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d05b      	beq.n	8008c44 <HAL_RCC_OscConfig+0x108>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d157      	bne.n	8008c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e242      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ba0:	d106      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x74>
 8008ba2:	4b76      	ldr	r3, [pc, #472]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a75      	ldr	r2, [pc, #468]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	e01d      	b.n	8008bec <HAL_RCC_OscConfig+0xb0>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bb8:	d10c      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x98>
 8008bba:	4b70      	ldr	r3, [pc, #448]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a6f      	ldr	r2, [pc, #444]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008bc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	4b6d      	ldr	r3, [pc, #436]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a6c      	ldr	r2, [pc, #432]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	e00b      	b.n	8008bec <HAL_RCC_OscConfig+0xb0>
 8008bd4:	4b69      	ldr	r3, [pc, #420]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a68      	ldr	r2, [pc, #416]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	4b66      	ldr	r3, [pc, #408]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a65      	ldr	r2, [pc, #404]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d013      	beq.n	8008c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bf4:	f7fe ff4a 	bl	8007a8c <HAL_GetTick>
 8008bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bfc:	f7fe ff46 	bl	8007a8c <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b64      	cmp	r3, #100	@ 0x64
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e207      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c0e:	4b5b      	ldr	r3, [pc, #364]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0f0      	beq.n	8008bfc <HAL_RCC_OscConfig+0xc0>
 8008c1a:	e014      	b.n	8008c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c1c:	f7fe ff36 	bl	8007a8c <HAL_GetTick>
 8008c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c22:	e008      	b.n	8008c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c24:	f7fe ff32 	bl	8007a8c <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	2b64      	cmp	r3, #100	@ 0x64
 8008c30:	d901      	bls.n	8008c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e1f3      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c36:	4b51      	ldr	r3, [pc, #324]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1f0      	bne.n	8008c24 <HAL_RCC_OscConfig+0xe8>
 8008c42:	e000      	b.n	8008c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d063      	beq.n	8008d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c52:	4b4a      	ldr	r3, [pc, #296]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 030c 	and.w	r3, r3, #12
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00b      	beq.n	8008c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c5e:	4b47      	ldr	r3, [pc, #284]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c66:	2b08      	cmp	r3, #8
 8008c68:	d11c      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c6a:	4b44      	ldr	r3, [pc, #272]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d116      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c76:	4b41      	ldr	r3, [pc, #260]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d005      	beq.n	8008c8e <HAL_RCC_OscConfig+0x152>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d001      	beq.n	8008c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e1c7      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c8e:	4b3b      	ldr	r3, [pc, #236]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	00db      	lsls	r3, r3, #3
 8008c9c:	4937      	ldr	r1, [pc, #220]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ca2:	e03a      	b.n	8008d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d020      	beq.n	8008cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cac:	4b34      	ldr	r3, [pc, #208]	@ (8008d80 <HAL_RCC_OscConfig+0x244>)
 8008cae:	2201      	movs	r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cb2:	f7fe feeb 	bl	8007a8c <HAL_GetTick>
 8008cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cb8:	e008      	b.n	8008ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cba:	f7fe fee7 	bl	8007a8c <HAL_GetTick>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d901      	bls.n	8008ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e1a8      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d0f0      	beq.n	8008cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cd8:	4b28      	ldr	r3, [pc, #160]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	4925      	ldr	r1, [pc, #148]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	600b      	str	r3, [r1, #0]
 8008cec:	e015      	b.n	8008d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cee:	4b24      	ldr	r3, [pc, #144]	@ (8008d80 <HAL_RCC_OscConfig+0x244>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf4:	f7fe feca 	bl	8007a8c <HAL_GetTick>
 8008cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cfa:	e008      	b.n	8008d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cfc:	f7fe fec6 	bl	8007a8c <HAL_GetTick>
 8008d00:	4602      	mov	r2, r0
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d901      	bls.n	8008d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	e187      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0302 	and.w	r3, r3, #2
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1f0      	bne.n	8008cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0308 	and.w	r3, r3, #8
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d036      	beq.n	8008d94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d016      	beq.n	8008d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d2e:	4b15      	ldr	r3, [pc, #84]	@ (8008d84 <HAL_RCC_OscConfig+0x248>)
 8008d30:	2201      	movs	r2, #1
 8008d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d34:	f7fe feaa 	bl	8007a8c <HAL_GetTick>
 8008d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d3a:	e008      	b.n	8008d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d3c:	f7fe fea6 	bl	8007a8c <HAL_GetTick>
 8008d40:	4602      	mov	r2, r0
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d901      	bls.n	8008d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e167      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d7c <HAL_RCC_OscConfig+0x240>)
 8008d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0f0      	beq.n	8008d3c <HAL_RCC_OscConfig+0x200>
 8008d5a:	e01b      	b.n	8008d94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d5c:	4b09      	ldr	r3, [pc, #36]	@ (8008d84 <HAL_RCC_OscConfig+0x248>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d62:	f7fe fe93 	bl	8007a8c <HAL_GetTick>
 8008d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d68:	e00e      	b.n	8008d88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d6a:	f7fe fe8f 	bl	8007a8c <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d907      	bls.n	8008d88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e150      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
 8008d7c:	40023800 	.word	0x40023800
 8008d80:	42470000 	.word	0x42470000
 8008d84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d88:	4b88      	ldr	r3, [pc, #544]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d8c:	f003 0302 	and.w	r3, r3, #2
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1ea      	bne.n	8008d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0304 	and.w	r3, r3, #4
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8097 	beq.w	8008ed0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008da2:	2300      	movs	r3, #0
 8008da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008da6:	4b81      	ldr	r3, [pc, #516]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10f      	bne.n	8008dd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008db2:	2300      	movs	r3, #0
 8008db4:	60bb      	str	r3, [r7, #8]
 8008db6:	4b7d      	ldr	r3, [pc, #500]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dba:	4a7c      	ldr	r2, [pc, #496]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8008dc2:	4b7a      	ldr	r3, [pc, #488]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dca:	60bb      	str	r3, [r7, #8]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dd2:	4b77      	ldr	r3, [pc, #476]	@ (8008fb0 <HAL_RCC_OscConfig+0x474>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d118      	bne.n	8008e10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008dde:	4b74      	ldr	r3, [pc, #464]	@ (8008fb0 <HAL_RCC_OscConfig+0x474>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a73      	ldr	r2, [pc, #460]	@ (8008fb0 <HAL_RCC_OscConfig+0x474>)
 8008de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dea:	f7fe fe4f 	bl	8007a8c <HAL_GetTick>
 8008dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008df0:	e008      	b.n	8008e04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008df2:	f7fe fe4b 	bl	8007a8c <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d901      	bls.n	8008e04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e10c      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e04:	4b6a      	ldr	r3, [pc, #424]	@ (8008fb0 <HAL_RCC_OscConfig+0x474>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d0f0      	beq.n	8008df2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d106      	bne.n	8008e26 <HAL_RCC_OscConfig+0x2ea>
 8008e18:	4b64      	ldr	r3, [pc, #400]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e1c:	4a63      	ldr	r2, [pc, #396]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e1e:	f043 0301 	orr.w	r3, r3, #1
 8008e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e24:	e01c      	b.n	8008e60 <HAL_RCC_OscConfig+0x324>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	d10c      	bne.n	8008e48 <HAL_RCC_OscConfig+0x30c>
 8008e2e:	4b5f      	ldr	r3, [pc, #380]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e32:	4a5e      	ldr	r2, [pc, #376]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e34:	f043 0304 	orr.w	r3, r3, #4
 8008e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e3a:	4b5c      	ldr	r3, [pc, #368]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e3e:	4a5b      	ldr	r2, [pc, #364]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e40:	f043 0301 	orr.w	r3, r3, #1
 8008e44:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e46:	e00b      	b.n	8008e60 <HAL_RCC_OscConfig+0x324>
 8008e48:	4b58      	ldr	r3, [pc, #352]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e4c:	4a57      	ldr	r2, [pc, #348]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e4e:	f023 0301 	bic.w	r3, r3, #1
 8008e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e54:	4b55      	ldr	r3, [pc, #340]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e58:	4a54      	ldr	r2, [pc, #336]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e5a:	f023 0304 	bic.w	r3, r3, #4
 8008e5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d015      	beq.n	8008e94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e68:	f7fe fe10 	bl	8007a8c <HAL_GetTick>
 8008e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e6e:	e00a      	b.n	8008e86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e70:	f7fe fe0c 	bl	8007a8c <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d901      	bls.n	8008e86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e0cb      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e86:	4b49      	ldr	r3, [pc, #292]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d0ee      	beq.n	8008e70 <HAL_RCC_OscConfig+0x334>
 8008e92:	e014      	b.n	8008ebe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e94:	f7fe fdfa 	bl	8007a8c <HAL_GetTick>
 8008e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e9a:	e00a      	b.n	8008eb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e9c:	f7fe fdf6 	bl	8007a8c <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d901      	bls.n	8008eb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e0b5      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eb6:	f003 0302 	and.w	r3, r3, #2
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1ee      	bne.n	8008e9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ebe:	7dfb      	ldrb	r3, [r7, #23]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d105      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ec4:	4b39      	ldr	r3, [pc, #228]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec8:	4a38      	ldr	r2, [pc, #224]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ece:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 80a1 	beq.w	800901c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008eda:	4b34      	ldr	r3, [pc, #208]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f003 030c 	and.w	r3, r3, #12
 8008ee2:	2b08      	cmp	r3, #8
 8008ee4:	d05c      	beq.n	8008fa0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d141      	bne.n	8008f72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eee:	4b31      	ldr	r3, [pc, #196]	@ (8008fb4 <HAL_RCC_OscConfig+0x478>)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ef4:	f7fe fdca 	bl	8007a8c <HAL_GetTick>
 8008ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008efa:	e008      	b.n	8008f0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008efc:	f7fe fdc6 	bl	8007a8c <HAL_GetTick>
 8008f00:	4602      	mov	r2, r0
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d901      	bls.n	8008f0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e087      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f0e:	4b27      	ldr	r3, [pc, #156]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1f0      	bne.n	8008efc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	69da      	ldr	r2, [r3, #28]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	431a      	orrs	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f28:	019b      	lsls	r3, r3, #6
 8008f2a:	431a      	orrs	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f30:	085b      	lsrs	r3, r3, #1
 8008f32:	3b01      	subs	r3, #1
 8008f34:	041b      	lsls	r3, r3, #16
 8008f36:	431a      	orrs	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3c:	061b      	lsls	r3, r3, #24
 8008f3e:	491b      	ldr	r1, [pc, #108]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008f40:	4313      	orrs	r3, r2
 8008f42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f44:	4b1b      	ldr	r3, [pc, #108]	@ (8008fb4 <HAL_RCC_OscConfig+0x478>)
 8008f46:	2201      	movs	r2, #1
 8008f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f4a:	f7fe fd9f 	bl	8007a8c <HAL_GetTick>
 8008f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f50:	e008      	b.n	8008f64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f52:	f7fe fd9b 	bl	8007a8c <HAL_GetTick>
 8008f56:	4602      	mov	r2, r0
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d901      	bls.n	8008f64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f60:	2303      	movs	r3, #3
 8008f62:	e05c      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f64:	4b11      	ldr	r3, [pc, #68]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d0f0      	beq.n	8008f52 <HAL_RCC_OscConfig+0x416>
 8008f70:	e054      	b.n	800901c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f72:	4b10      	ldr	r3, [pc, #64]	@ (8008fb4 <HAL_RCC_OscConfig+0x478>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f78:	f7fe fd88 	bl	8007a8c <HAL_GetTick>
 8008f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f7e:	e008      	b.n	8008f92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f80:	f7fe fd84 	bl	8007a8c <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d901      	bls.n	8008f92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e045      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f92:	4b06      	ldr	r3, [pc, #24]	@ (8008fac <HAL_RCC_OscConfig+0x470>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1f0      	bne.n	8008f80 <HAL_RCC_OscConfig+0x444>
 8008f9e:	e03d      	b.n	800901c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d107      	bne.n	8008fb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e038      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
 8008fac:	40023800 	.word	0x40023800
 8008fb0:	40007000 	.word	0x40007000
 8008fb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8009028 <HAL_RCC_OscConfig+0x4ec>)
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d028      	beq.n	8009018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d121      	bne.n	8009018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d11a      	bne.n	8009018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008fe8:	4013      	ands	r3, r2
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008fee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d111      	bne.n	8009018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffe:	085b      	lsrs	r3, r3, #1
 8009000:	3b01      	subs	r3, #1
 8009002:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009004:	429a      	cmp	r2, r3
 8009006:	d107      	bne.n	8009018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009012:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009014:	429a      	cmp	r2, r3
 8009016:	d001      	beq.n	800901c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e000      	b.n	800901e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3718      	adds	r7, #24
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	40023800 	.word	0x40023800

0800902c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d101      	bne.n	8009040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e0cc      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009040:	4b68      	ldr	r3, [pc, #416]	@ (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0307 	and.w	r3, r3, #7
 8009048:	683a      	ldr	r2, [r7, #0]
 800904a:	429a      	cmp	r2, r3
 800904c:	d90c      	bls.n	8009068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800904e:	4b65      	ldr	r3, [pc, #404]	@ (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	b2d2      	uxtb	r2, r2
 8009054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009056:	4b63      	ldr	r3, [pc, #396]	@ (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	429a      	cmp	r2, r3
 8009062:	d001      	beq.n	8009068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e0b8      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0302 	and.w	r3, r3, #2
 8009070:	2b00      	cmp	r3, #0
 8009072:	d020      	beq.n	80090b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	d005      	beq.n	800908c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009080:	4b59      	ldr	r3, [pc, #356]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	4a58      	ldr	r2, [pc, #352]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009086:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800908a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0308 	and.w	r3, r3, #8
 8009094:	2b00      	cmp	r3, #0
 8009096:	d005      	beq.n	80090a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009098:	4b53      	ldr	r3, [pc, #332]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	4a52      	ldr	r2, [pc, #328]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 800909e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80090a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090a4:	4b50      	ldr	r3, [pc, #320]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	494d      	ldr	r1, [pc, #308]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d044      	beq.n	800914c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d107      	bne.n	80090da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ca:	4b47      	ldr	r3, [pc, #284]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d119      	bne.n	800910a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e07f      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d003      	beq.n	80090ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d107      	bne.n	80090fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090ea:	4b3f      	ldr	r3, [pc, #252]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d109      	bne.n	800910a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e06f      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090fa:	4b3b      	ldr	r3, [pc, #236]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0302 	and.w	r3, r3, #2
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e067      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800910a:	4b37      	ldr	r3, [pc, #220]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f023 0203 	bic.w	r2, r3, #3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	4934      	ldr	r1, [pc, #208]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009118:	4313      	orrs	r3, r2
 800911a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800911c:	f7fe fcb6 	bl	8007a8c <HAL_GetTick>
 8009120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009122:	e00a      	b.n	800913a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009124:	f7fe fcb2 	bl	8007a8c <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009132:	4293      	cmp	r3, r2
 8009134:	d901      	bls.n	800913a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e04f      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800913a:	4b2b      	ldr	r3, [pc, #172]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f003 020c 	and.w	r2, r3, #12
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	429a      	cmp	r2, r3
 800914a:	d1eb      	bne.n	8009124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800914c:	4b25      	ldr	r3, [pc, #148]	@ (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0307 	and.w	r3, r3, #7
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	429a      	cmp	r2, r3
 8009158:	d20c      	bcs.n	8009174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800915a:	4b22      	ldr	r3, [pc, #136]	@ (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	b2d2      	uxtb	r2, r2
 8009160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009162:	4b20      	ldr	r3, [pc, #128]	@ (80091e4 <HAL_RCC_ClockConfig+0x1b8>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0307 	and.w	r3, r3, #7
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	429a      	cmp	r2, r3
 800916e:	d001      	beq.n	8009174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e032      	b.n	80091da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d008      	beq.n	8009192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009180:	4b19      	ldr	r3, [pc, #100]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	4916      	ldr	r1, [pc, #88]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 800918e:	4313      	orrs	r3, r2
 8009190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0308 	and.w	r3, r3, #8
 800919a:	2b00      	cmp	r3, #0
 800919c:	d009      	beq.n	80091b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800919e:	4b12      	ldr	r3, [pc, #72]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	490e      	ldr	r1, [pc, #56]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80091b2:	f000 f821 	bl	80091f8 <HAL_RCC_GetSysClockFreq>
 80091b6:	4602      	mov	r2, r0
 80091b8:	4b0b      	ldr	r3, [pc, #44]	@ (80091e8 <HAL_RCC_ClockConfig+0x1bc>)
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	091b      	lsrs	r3, r3, #4
 80091be:	f003 030f 	and.w	r3, r3, #15
 80091c2:	490a      	ldr	r1, [pc, #40]	@ (80091ec <HAL_RCC_ClockConfig+0x1c0>)
 80091c4:	5ccb      	ldrb	r3, [r1, r3]
 80091c6:	fa22 f303 	lsr.w	r3, r2, r3
 80091ca:	4a09      	ldr	r2, [pc, #36]	@ (80091f0 <HAL_RCC_ClockConfig+0x1c4>)
 80091cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80091ce:	4b09      	ldr	r3, [pc, #36]	@ (80091f4 <HAL_RCC_ClockConfig+0x1c8>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fe fc16 	bl	8007a04 <HAL_InitTick>

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	40023c00 	.word	0x40023c00
 80091e8:	40023800 	.word	0x40023800
 80091ec:	08011f64 	.word	0x08011f64
 80091f0:	200000cc 	.word	0x200000cc
 80091f4:	200000d0 	.word	0x200000d0

080091f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091fc:	b094      	sub	sp, #80	@ 0x50
 80091fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009200:	2300      	movs	r3, #0
 8009202:	647b      	str	r3, [r7, #68]	@ 0x44
 8009204:	2300      	movs	r3, #0
 8009206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009208:	2300      	movs	r3, #0
 800920a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009210:	4b79      	ldr	r3, [pc, #484]	@ (80093f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f003 030c 	and.w	r3, r3, #12
 8009218:	2b08      	cmp	r3, #8
 800921a:	d00d      	beq.n	8009238 <HAL_RCC_GetSysClockFreq+0x40>
 800921c:	2b08      	cmp	r3, #8
 800921e:	f200 80e1 	bhi.w	80093e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <HAL_RCC_GetSysClockFreq+0x34>
 8009226:	2b04      	cmp	r3, #4
 8009228:	d003      	beq.n	8009232 <HAL_RCC_GetSysClockFreq+0x3a>
 800922a:	e0db      	b.n	80093e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800922c:	4b73      	ldr	r3, [pc, #460]	@ (80093fc <HAL_RCC_GetSysClockFreq+0x204>)
 800922e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009230:	e0db      	b.n	80093ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009232:	4b73      	ldr	r3, [pc, #460]	@ (8009400 <HAL_RCC_GetSysClockFreq+0x208>)
 8009234:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009236:	e0d8      	b.n	80093ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009238:	4b6f      	ldr	r3, [pc, #444]	@ (80093f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009240:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009242:	4b6d      	ldr	r3, [pc, #436]	@ (80093f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d063      	beq.n	8009316 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800924e:	4b6a      	ldr	r3, [pc, #424]	@ (80093f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	099b      	lsrs	r3, r3, #6
 8009254:	2200      	movs	r2, #0
 8009256:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009258:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800925a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009260:	633b      	str	r3, [r7, #48]	@ 0x30
 8009262:	2300      	movs	r3, #0
 8009264:	637b      	str	r3, [r7, #52]	@ 0x34
 8009266:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800926a:	4622      	mov	r2, r4
 800926c:	462b      	mov	r3, r5
 800926e:	f04f 0000 	mov.w	r0, #0
 8009272:	f04f 0100 	mov.w	r1, #0
 8009276:	0159      	lsls	r1, r3, #5
 8009278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800927c:	0150      	lsls	r0, r2, #5
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	4621      	mov	r1, r4
 8009284:	1a51      	subs	r1, r2, r1
 8009286:	6139      	str	r1, [r7, #16]
 8009288:	4629      	mov	r1, r5
 800928a:	eb63 0301 	sbc.w	r3, r3, r1
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	f04f 0200 	mov.w	r2, #0
 8009294:	f04f 0300 	mov.w	r3, #0
 8009298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800929c:	4659      	mov	r1, fp
 800929e:	018b      	lsls	r3, r1, #6
 80092a0:	4651      	mov	r1, sl
 80092a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80092a6:	4651      	mov	r1, sl
 80092a8:	018a      	lsls	r2, r1, #6
 80092aa:	4651      	mov	r1, sl
 80092ac:	ebb2 0801 	subs.w	r8, r2, r1
 80092b0:	4659      	mov	r1, fp
 80092b2:	eb63 0901 	sbc.w	r9, r3, r1
 80092b6:	f04f 0200 	mov.w	r2, #0
 80092ba:	f04f 0300 	mov.w	r3, #0
 80092be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092ca:	4690      	mov	r8, r2
 80092cc:	4699      	mov	r9, r3
 80092ce:	4623      	mov	r3, r4
 80092d0:	eb18 0303 	adds.w	r3, r8, r3
 80092d4:	60bb      	str	r3, [r7, #8]
 80092d6:	462b      	mov	r3, r5
 80092d8:	eb49 0303 	adc.w	r3, r9, r3
 80092dc:	60fb      	str	r3, [r7, #12]
 80092de:	f04f 0200 	mov.w	r2, #0
 80092e2:	f04f 0300 	mov.w	r3, #0
 80092e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80092ea:	4629      	mov	r1, r5
 80092ec:	024b      	lsls	r3, r1, #9
 80092ee:	4621      	mov	r1, r4
 80092f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80092f4:	4621      	mov	r1, r4
 80092f6:	024a      	lsls	r2, r1, #9
 80092f8:	4610      	mov	r0, r2
 80092fa:	4619      	mov	r1, r3
 80092fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092fe:	2200      	movs	r2, #0
 8009300:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009302:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009304:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009308:	f7f7 fcbe 	bl	8000c88 <__aeabi_uldivmod>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4613      	mov	r3, r2
 8009312:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009314:	e058      	b.n	80093c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009316:	4b38      	ldr	r3, [pc, #224]	@ (80093f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	099b      	lsrs	r3, r3, #6
 800931c:	2200      	movs	r2, #0
 800931e:	4618      	mov	r0, r3
 8009320:	4611      	mov	r1, r2
 8009322:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009326:	623b      	str	r3, [r7, #32]
 8009328:	2300      	movs	r3, #0
 800932a:	627b      	str	r3, [r7, #36]	@ 0x24
 800932c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009330:	4642      	mov	r2, r8
 8009332:	464b      	mov	r3, r9
 8009334:	f04f 0000 	mov.w	r0, #0
 8009338:	f04f 0100 	mov.w	r1, #0
 800933c:	0159      	lsls	r1, r3, #5
 800933e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009342:	0150      	lsls	r0, r2, #5
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	4641      	mov	r1, r8
 800934a:	ebb2 0a01 	subs.w	sl, r2, r1
 800934e:	4649      	mov	r1, r9
 8009350:	eb63 0b01 	sbc.w	fp, r3, r1
 8009354:	f04f 0200 	mov.w	r2, #0
 8009358:	f04f 0300 	mov.w	r3, #0
 800935c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009360:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009364:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009368:	ebb2 040a 	subs.w	r4, r2, sl
 800936c:	eb63 050b 	sbc.w	r5, r3, fp
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	f04f 0300 	mov.w	r3, #0
 8009378:	00eb      	lsls	r3, r5, #3
 800937a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800937e:	00e2      	lsls	r2, r4, #3
 8009380:	4614      	mov	r4, r2
 8009382:	461d      	mov	r5, r3
 8009384:	4643      	mov	r3, r8
 8009386:	18e3      	adds	r3, r4, r3
 8009388:	603b      	str	r3, [r7, #0]
 800938a:	464b      	mov	r3, r9
 800938c:	eb45 0303 	adc.w	r3, r5, r3
 8009390:	607b      	str	r3, [r7, #4]
 8009392:	f04f 0200 	mov.w	r2, #0
 8009396:	f04f 0300 	mov.w	r3, #0
 800939a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800939e:	4629      	mov	r1, r5
 80093a0:	028b      	lsls	r3, r1, #10
 80093a2:	4621      	mov	r1, r4
 80093a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093a8:	4621      	mov	r1, r4
 80093aa:	028a      	lsls	r2, r1, #10
 80093ac:	4610      	mov	r0, r2
 80093ae:	4619      	mov	r1, r3
 80093b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093b2:	2200      	movs	r2, #0
 80093b4:	61bb      	str	r3, [r7, #24]
 80093b6:	61fa      	str	r2, [r7, #28]
 80093b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093bc:	f7f7 fc64 	bl	8000c88 <__aeabi_uldivmod>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4613      	mov	r3, r2
 80093c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80093c8:	4b0b      	ldr	r3, [pc, #44]	@ (80093f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	0c1b      	lsrs	r3, r3, #16
 80093ce:	f003 0303 	and.w	r3, r3, #3
 80093d2:	3301      	adds	r3, #1
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80093d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80093da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80093e2:	e002      	b.n	80093ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80093e4:	4b05      	ldr	r3, [pc, #20]	@ (80093fc <HAL_RCC_GetSysClockFreq+0x204>)
 80093e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80093e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80093ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3750      	adds	r7, #80	@ 0x50
 80093f0:	46bd      	mov	sp, r7
 80093f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093f6:	bf00      	nop
 80093f8:	40023800 	.word	0x40023800
 80093fc:	00f42400 	.word	0x00f42400
 8009400:	007a1200 	.word	0x007a1200

08009404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009404:	b480      	push	{r7}
 8009406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009408:	4b03      	ldr	r3, [pc, #12]	@ (8009418 <HAL_RCC_GetHCLKFreq+0x14>)
 800940a:	681b      	ldr	r3, [r3, #0]
}
 800940c:	4618      	mov	r0, r3
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	200000cc 	.word	0x200000cc

0800941c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009420:	f7ff fff0 	bl	8009404 <HAL_RCC_GetHCLKFreq>
 8009424:	4602      	mov	r2, r0
 8009426:	4b05      	ldr	r3, [pc, #20]	@ (800943c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	0a9b      	lsrs	r3, r3, #10
 800942c:	f003 0307 	and.w	r3, r3, #7
 8009430:	4903      	ldr	r1, [pc, #12]	@ (8009440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009432:	5ccb      	ldrb	r3, [r1, r3]
 8009434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009438:	4618      	mov	r0, r3
 800943a:	bd80      	pop	{r7, pc}
 800943c:	40023800 	.word	0x40023800
 8009440:	08011f74 	.word	0x08011f74

08009444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009448:	f7ff ffdc 	bl	8009404 <HAL_RCC_GetHCLKFreq>
 800944c:	4602      	mov	r2, r0
 800944e:	4b05      	ldr	r3, [pc, #20]	@ (8009464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	0b5b      	lsrs	r3, r3, #13
 8009454:	f003 0307 	and.w	r3, r3, #7
 8009458:	4903      	ldr	r1, [pc, #12]	@ (8009468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800945a:	5ccb      	ldrb	r3, [r1, r3]
 800945c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009460:	4618      	mov	r0, r3
 8009462:	bd80      	pop	{r7, pc}
 8009464:	40023800 	.word	0x40023800
 8009468:	08011f74 	.word	0x08011f74

0800946c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e041      	b.n	8009502 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d106      	bne.n	8009498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7fd ff30 	bl	80072f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2202      	movs	r2, #2
 800949c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3304      	adds	r3, #4
 80094a8:	4619      	mov	r1, r3
 80094aa:	4610      	mov	r0, r2
 80094ac:	f000 fc48 	bl	8009d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b082      	sub	sp, #8
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d101      	bne.n	800951c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	e041      	b.n	80095a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b00      	cmp	r3, #0
 8009526:	d106      	bne.n	8009536 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f839 	bl	80095a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2202      	movs	r2, #2
 800953a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	3304      	adds	r3, #4
 8009546:	4619      	mov	r1, r3
 8009548:	4610      	mov	r0, r2
 800954a:	f000 fbf9 	bl	8009d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d109      	bne.n	80095e4 <HAL_TIM_PWM_Start_IT+0x28>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b01      	cmp	r3, #1
 80095da:	bf14      	ite	ne
 80095dc:	2301      	movne	r3, #1
 80095de:	2300      	moveq	r3, #0
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	e022      	b.n	800962a <HAL_TIM_PWM_Start_IT+0x6e>
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	2b04      	cmp	r3, #4
 80095e8:	d109      	bne.n	80095fe <HAL_TIM_PWM_Start_IT+0x42>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	bf14      	ite	ne
 80095f6:	2301      	movne	r3, #1
 80095f8:	2300      	moveq	r3, #0
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	e015      	b.n	800962a <HAL_TIM_PWM_Start_IT+0x6e>
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	2b08      	cmp	r3, #8
 8009602:	d109      	bne.n	8009618 <HAL_TIM_PWM_Start_IT+0x5c>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b01      	cmp	r3, #1
 800960e:	bf14      	ite	ne
 8009610:	2301      	movne	r3, #1
 8009612:	2300      	moveq	r3, #0
 8009614:	b2db      	uxtb	r3, r3
 8009616:	e008      	b.n	800962a <HAL_TIM_PWM_Start_IT+0x6e>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b01      	cmp	r3, #1
 8009622:	bf14      	ite	ne
 8009624:	2301      	movne	r3, #1
 8009626:	2300      	moveq	r3, #0
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e0c7      	b.n	80097c2 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d104      	bne.n	8009642 <HAL_TIM_PWM_Start_IT+0x86>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2202      	movs	r2, #2
 800963c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009640:	e013      	b.n	800966a <HAL_TIM_PWM_Start_IT+0xae>
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	2b04      	cmp	r3, #4
 8009646:	d104      	bne.n	8009652 <HAL_TIM_PWM_Start_IT+0x96>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009650:	e00b      	b.n	800966a <HAL_TIM_PWM_Start_IT+0xae>
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b08      	cmp	r3, #8
 8009656:	d104      	bne.n	8009662 <HAL_TIM_PWM_Start_IT+0xa6>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009660:	e003      	b.n	800966a <HAL_TIM_PWM_Start_IT+0xae>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2202      	movs	r2, #2
 8009666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2b0c      	cmp	r3, #12
 800966e:	d841      	bhi.n	80096f4 <HAL_TIM_PWM_Start_IT+0x138>
 8009670:	a201      	add	r2, pc, #4	@ (adr r2, 8009678 <HAL_TIM_PWM_Start_IT+0xbc>)
 8009672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009676:	bf00      	nop
 8009678:	080096ad 	.word	0x080096ad
 800967c:	080096f5 	.word	0x080096f5
 8009680:	080096f5 	.word	0x080096f5
 8009684:	080096f5 	.word	0x080096f5
 8009688:	080096bf 	.word	0x080096bf
 800968c:	080096f5 	.word	0x080096f5
 8009690:	080096f5 	.word	0x080096f5
 8009694:	080096f5 	.word	0x080096f5
 8009698:	080096d1 	.word	0x080096d1
 800969c:	080096f5 	.word	0x080096f5
 80096a0:	080096f5 	.word	0x080096f5
 80096a4:	080096f5 	.word	0x080096f5
 80096a8:	080096e3 	.word	0x080096e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68da      	ldr	r2, [r3, #12]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f042 0202 	orr.w	r2, r2, #2
 80096ba:	60da      	str	r2, [r3, #12]
      break;
 80096bc:	e01d      	b.n	80096fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68da      	ldr	r2, [r3, #12]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f042 0204 	orr.w	r2, r2, #4
 80096cc:	60da      	str	r2, [r3, #12]
      break;
 80096ce:	e014      	b.n	80096fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f042 0208 	orr.w	r2, r2, #8
 80096de:	60da      	str	r2, [r3, #12]
      break;
 80096e0:	e00b      	b.n	80096fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68da      	ldr	r2, [r3, #12]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f042 0210 	orr.w	r2, r2, #16
 80096f0:	60da      	str	r2, [r3, #12]
      break;
 80096f2:	e002      	b.n	80096fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	73fb      	strb	r3, [r7, #15]
      break;
 80096f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d15f      	bne.n	80097c0 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2201      	movs	r2, #1
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	4618      	mov	r0, r3
 800970a:	f000 fe0f 	bl	800a32c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a2e      	ldr	r2, [pc, #184]	@ (80097cc <HAL_TIM_PWM_Start_IT+0x210>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d004      	beq.n	8009722 <HAL_TIM_PWM_Start_IT+0x166>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a2c      	ldr	r2, [pc, #176]	@ (80097d0 <HAL_TIM_PWM_Start_IT+0x214>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d101      	bne.n	8009726 <HAL_TIM_PWM_Start_IT+0x16a>
 8009722:	2301      	movs	r3, #1
 8009724:	e000      	b.n	8009728 <HAL_TIM_PWM_Start_IT+0x16c>
 8009726:	2300      	movs	r3, #0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d007      	beq.n	800973c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800973a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a22      	ldr	r2, [pc, #136]	@ (80097cc <HAL_TIM_PWM_Start_IT+0x210>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d022      	beq.n	800978c <HAL_TIM_PWM_Start_IT+0x1d0>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800974e:	d01d      	beq.n	800978c <HAL_TIM_PWM_Start_IT+0x1d0>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a1f      	ldr	r2, [pc, #124]	@ (80097d4 <HAL_TIM_PWM_Start_IT+0x218>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d018      	beq.n	800978c <HAL_TIM_PWM_Start_IT+0x1d0>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a1e      	ldr	r2, [pc, #120]	@ (80097d8 <HAL_TIM_PWM_Start_IT+0x21c>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d013      	beq.n	800978c <HAL_TIM_PWM_Start_IT+0x1d0>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a1c      	ldr	r2, [pc, #112]	@ (80097dc <HAL_TIM_PWM_Start_IT+0x220>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d00e      	beq.n	800978c <HAL_TIM_PWM_Start_IT+0x1d0>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a17      	ldr	r2, [pc, #92]	@ (80097d0 <HAL_TIM_PWM_Start_IT+0x214>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d009      	beq.n	800978c <HAL_TIM_PWM_Start_IT+0x1d0>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a18      	ldr	r2, [pc, #96]	@ (80097e0 <HAL_TIM_PWM_Start_IT+0x224>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d004      	beq.n	800978c <HAL_TIM_PWM_Start_IT+0x1d0>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a17      	ldr	r2, [pc, #92]	@ (80097e4 <HAL_TIM_PWM_Start_IT+0x228>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d111      	bne.n	80097b0 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f003 0307 	and.w	r3, r3, #7
 8009796:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2b06      	cmp	r3, #6
 800979c:	d010      	beq.n	80097c0 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f042 0201 	orr.w	r2, r2, #1
 80097ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ae:	e007      	b.n	80097c0 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0201 	orr.w	r2, r2, #1
 80097be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	40010000 	.word	0x40010000
 80097d0:	40010400 	.word	0x40010400
 80097d4:	40000400 	.word	0x40000400
 80097d8:	40000800 	.word	0x40000800
 80097dc:	40000c00 	.word	0x40000c00
 80097e0:	40014000 	.word	0x40014000
 80097e4:	40001800 	.word	0x40001800

080097e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	f003 0302 	and.w	r3, r3, #2
 8009806:	2b00      	cmp	r3, #0
 8009808:	d020      	beq.n	800984c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f003 0302 	and.w	r3, r3, #2
 8009810:	2b00      	cmp	r3, #0
 8009812:	d01b      	beq.n	800984c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f06f 0202 	mvn.w	r2, #2
 800981c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	f003 0303 	and.w	r3, r3, #3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fa65 	bl	8009d02 <HAL_TIM_IC_CaptureCallback>
 8009838:	e005      	b.n	8009846 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fa57 	bl	8009cee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fa68 	bl	8009d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	f003 0304 	and.w	r3, r3, #4
 8009852:	2b00      	cmp	r3, #0
 8009854:	d020      	beq.n	8009898 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f003 0304 	and.w	r3, r3, #4
 800985c:	2b00      	cmp	r3, #0
 800985e:	d01b      	beq.n	8009898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f06f 0204 	mvn.w	r2, #4
 8009868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2202      	movs	r2, #2
 800986e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800987a:	2b00      	cmp	r3, #0
 800987c:	d003      	beq.n	8009886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fa3f 	bl	8009d02 <HAL_TIM_IC_CaptureCallback>
 8009884:	e005      	b.n	8009892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fa31 	bl	8009cee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fa42 	bl	8009d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	f003 0308 	and.w	r3, r3, #8
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d020      	beq.n	80098e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f003 0308 	and.w	r3, r3, #8
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d01b      	beq.n	80098e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f06f 0208 	mvn.w	r2, #8
 80098b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2204      	movs	r2, #4
 80098ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	f003 0303 	and.w	r3, r3, #3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fa19 	bl	8009d02 <HAL_TIM_IC_CaptureCallback>
 80098d0:	e005      	b.n	80098de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fa0b 	bl	8009cee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fa1c 	bl	8009d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	f003 0310 	and.w	r3, r3, #16
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d020      	beq.n	8009930 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f003 0310 	and.w	r3, r3, #16
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d01b      	beq.n	8009930 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f06f 0210 	mvn.w	r2, #16
 8009900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2208      	movs	r2, #8
 8009906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	69db      	ldr	r3, [r3, #28]
 800990e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009912:	2b00      	cmp	r3, #0
 8009914:	d003      	beq.n	800991e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f9f3 	bl	8009d02 <HAL_TIM_IC_CaptureCallback>
 800991c:	e005      	b.n	800992a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f9e5 	bl	8009cee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f9f6 	bl	8009d16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00c      	beq.n	8009954 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	2b00      	cmp	r3, #0
 8009942:	d007      	beq.n	8009954 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f06f 0201 	mvn.w	r2, #1
 800994c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f9c3 	bl	8009cda <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00c      	beq.n	8009978 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009964:	2b00      	cmp	r3, #0
 8009966:	d007      	beq.n	8009978 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fdd8 	bl	800a528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00c      	beq.n	800999c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009988:	2b00      	cmp	r3, #0
 800998a:	d007      	beq.n	800999c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f9c7 	bl	8009d2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	f003 0320 	and.w	r3, r3, #32
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00c      	beq.n	80099c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f003 0320 	and.w	r3, r3, #32
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d007      	beq.n	80099c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f06f 0220 	mvn.w	r2, #32
 80099b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fdaa 	bl	800a514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099c0:	bf00      	nop
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d101      	bne.n	80099e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80099e2:	2302      	movs	r3, #2
 80099e4:	e0ae      	b.n	8009b44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b0c      	cmp	r3, #12
 80099f2:	f200 809f 	bhi.w	8009b34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80099f6:	a201      	add	r2, pc, #4	@ (adr r2, 80099fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80099f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fc:	08009a31 	.word	0x08009a31
 8009a00:	08009b35 	.word	0x08009b35
 8009a04:	08009b35 	.word	0x08009b35
 8009a08:	08009b35 	.word	0x08009b35
 8009a0c:	08009a71 	.word	0x08009a71
 8009a10:	08009b35 	.word	0x08009b35
 8009a14:	08009b35 	.word	0x08009b35
 8009a18:	08009b35 	.word	0x08009b35
 8009a1c:	08009ab3 	.word	0x08009ab3
 8009a20:	08009b35 	.word	0x08009b35
 8009a24:	08009b35 	.word	0x08009b35
 8009a28:	08009b35 	.word	0x08009b35
 8009a2c:	08009af3 	.word	0x08009af3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68b9      	ldr	r1, [r7, #8]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fa2e 	bl	8009e98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	699a      	ldr	r2, [r3, #24]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f042 0208 	orr.w	r2, r2, #8
 8009a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	699a      	ldr	r2, [r3, #24]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f022 0204 	bic.w	r2, r2, #4
 8009a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6999      	ldr	r1, [r3, #24]
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	691a      	ldr	r2, [r3, #16]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	430a      	orrs	r2, r1
 8009a6c:	619a      	str	r2, [r3, #24]
      break;
 8009a6e:	e064      	b.n	8009b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68b9      	ldr	r1, [r7, #8]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 fa7e 	bl	8009f78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	699a      	ldr	r2, [r3, #24]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	699a      	ldr	r2, [r3, #24]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6999      	ldr	r1, [r3, #24]
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	021a      	lsls	r2, r3, #8
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	430a      	orrs	r2, r1
 8009aae:	619a      	str	r2, [r3, #24]
      break;
 8009ab0:	e043      	b.n	8009b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68b9      	ldr	r1, [r7, #8]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f000 fad3 	bl	800a064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	69da      	ldr	r2, [r3, #28]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f042 0208 	orr.w	r2, r2, #8
 8009acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	69da      	ldr	r2, [r3, #28]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f022 0204 	bic.w	r2, r2, #4
 8009adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	69d9      	ldr	r1, [r3, #28]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	691a      	ldr	r2, [r3, #16]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	430a      	orrs	r2, r1
 8009aee:	61da      	str	r2, [r3, #28]
      break;
 8009af0:	e023      	b.n	8009b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68b9      	ldr	r1, [r7, #8]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 fb27 	bl	800a14c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	69da      	ldr	r2, [r3, #28]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	69da      	ldr	r2, [r3, #28]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	69d9      	ldr	r1, [r3, #28]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	021a      	lsls	r2, r3, #8
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	430a      	orrs	r2, r1
 8009b30:	61da      	str	r2, [r3, #28]
      break;
 8009b32:	e002      	b.n	8009b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	75fb      	strb	r3, [r7, #23]
      break;
 8009b38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3718      	adds	r7, #24
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b56:	2300      	movs	r3, #0
 8009b58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d101      	bne.n	8009b68 <HAL_TIM_ConfigClockSource+0x1c>
 8009b64:	2302      	movs	r3, #2
 8009b66:	e0b4      	b.n	8009cd2 <HAL_TIM_ConfigClockSource+0x186>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2202      	movs	r2, #2
 8009b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ba0:	d03e      	beq.n	8009c20 <HAL_TIM_ConfigClockSource+0xd4>
 8009ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ba6:	f200 8087 	bhi.w	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bae:	f000 8086 	beq.w	8009cbe <HAL_TIM_ConfigClockSource+0x172>
 8009bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bb6:	d87f      	bhi.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bb8:	2b70      	cmp	r3, #112	@ 0x70
 8009bba:	d01a      	beq.n	8009bf2 <HAL_TIM_ConfigClockSource+0xa6>
 8009bbc:	2b70      	cmp	r3, #112	@ 0x70
 8009bbe:	d87b      	bhi.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bc0:	2b60      	cmp	r3, #96	@ 0x60
 8009bc2:	d050      	beq.n	8009c66 <HAL_TIM_ConfigClockSource+0x11a>
 8009bc4:	2b60      	cmp	r3, #96	@ 0x60
 8009bc6:	d877      	bhi.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bc8:	2b50      	cmp	r3, #80	@ 0x50
 8009bca:	d03c      	beq.n	8009c46 <HAL_TIM_ConfigClockSource+0xfa>
 8009bcc:	2b50      	cmp	r3, #80	@ 0x50
 8009bce:	d873      	bhi.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd0:	2b40      	cmp	r3, #64	@ 0x40
 8009bd2:	d058      	beq.n	8009c86 <HAL_TIM_ConfigClockSource+0x13a>
 8009bd4:	2b40      	cmp	r3, #64	@ 0x40
 8009bd6:	d86f      	bhi.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd8:	2b30      	cmp	r3, #48	@ 0x30
 8009bda:	d064      	beq.n	8009ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8009bdc:	2b30      	cmp	r3, #48	@ 0x30
 8009bde:	d86b      	bhi.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009be0:	2b20      	cmp	r3, #32
 8009be2:	d060      	beq.n	8009ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8009be4:	2b20      	cmp	r3, #32
 8009be6:	d867      	bhi.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d05c      	beq.n	8009ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8009bec:	2b10      	cmp	r3, #16
 8009bee:	d05a      	beq.n	8009ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8009bf0:	e062      	b.n	8009cb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c02:	f000 fb73 	bl	800a2ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009c14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	609a      	str	r2, [r3, #8]
      break;
 8009c1e:	e04f      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c30:	f000 fb5c 	bl	800a2ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	689a      	ldr	r2, [r3, #8]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c42:	609a      	str	r2, [r3, #8]
      break;
 8009c44:	e03c      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c52:	461a      	mov	r2, r3
 8009c54:	f000 fad0 	bl	800a1f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2150      	movs	r1, #80	@ 0x50
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 fb29 	bl	800a2b6 <TIM_ITRx_SetConfig>
      break;
 8009c64:	e02c      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c72:	461a      	mov	r2, r3
 8009c74:	f000 faef 	bl	800a256 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2160      	movs	r1, #96	@ 0x60
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 fb19 	bl	800a2b6 <TIM_ITRx_SetConfig>
      break;
 8009c84:	e01c      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c92:	461a      	mov	r2, r3
 8009c94:	f000 fab0 	bl	800a1f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2140      	movs	r1, #64	@ 0x40
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 fb09 	bl	800a2b6 <TIM_ITRx_SetConfig>
      break;
 8009ca4:	e00c      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	f000 fb00 	bl	800a2b6 <TIM_ITRx_SetConfig>
      break;
 8009cb6:	e003      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	73fb      	strb	r3, [r7, #15]
      break;
 8009cbc:	e000      	b.n	8009cc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b083      	sub	sp, #12
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009ce2:	bf00      	nop
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b083      	sub	sp, #12
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d0a:	bf00      	nop
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr

08009d16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d16:	b480      	push	{r7}
 8009d18:	b083      	sub	sp, #12
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d1e:	bf00      	nop
 8009d20:	370c      	adds	r7, #12
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b083      	sub	sp, #12
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d32:	bf00      	nop
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
	...

08009d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a46      	ldr	r2, [pc, #280]	@ (8009e6c <TIM_Base_SetConfig+0x12c>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d013      	beq.n	8009d80 <TIM_Base_SetConfig+0x40>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d5e:	d00f      	beq.n	8009d80 <TIM_Base_SetConfig+0x40>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a43      	ldr	r2, [pc, #268]	@ (8009e70 <TIM_Base_SetConfig+0x130>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d00b      	beq.n	8009d80 <TIM_Base_SetConfig+0x40>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a42      	ldr	r2, [pc, #264]	@ (8009e74 <TIM_Base_SetConfig+0x134>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d007      	beq.n	8009d80 <TIM_Base_SetConfig+0x40>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a41      	ldr	r2, [pc, #260]	@ (8009e78 <TIM_Base_SetConfig+0x138>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d003      	beq.n	8009d80 <TIM_Base_SetConfig+0x40>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a40      	ldr	r2, [pc, #256]	@ (8009e7c <TIM_Base_SetConfig+0x13c>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d108      	bne.n	8009d92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a35      	ldr	r2, [pc, #212]	@ (8009e6c <TIM_Base_SetConfig+0x12c>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d02b      	beq.n	8009df2 <TIM_Base_SetConfig+0xb2>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009da0:	d027      	beq.n	8009df2 <TIM_Base_SetConfig+0xb2>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a32      	ldr	r2, [pc, #200]	@ (8009e70 <TIM_Base_SetConfig+0x130>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d023      	beq.n	8009df2 <TIM_Base_SetConfig+0xb2>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a31      	ldr	r2, [pc, #196]	@ (8009e74 <TIM_Base_SetConfig+0x134>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d01f      	beq.n	8009df2 <TIM_Base_SetConfig+0xb2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a30      	ldr	r2, [pc, #192]	@ (8009e78 <TIM_Base_SetConfig+0x138>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d01b      	beq.n	8009df2 <TIM_Base_SetConfig+0xb2>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a2f      	ldr	r2, [pc, #188]	@ (8009e7c <TIM_Base_SetConfig+0x13c>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d017      	beq.n	8009df2 <TIM_Base_SetConfig+0xb2>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a2e      	ldr	r2, [pc, #184]	@ (8009e80 <TIM_Base_SetConfig+0x140>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d013      	beq.n	8009df2 <TIM_Base_SetConfig+0xb2>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8009e84 <TIM_Base_SetConfig+0x144>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d00f      	beq.n	8009df2 <TIM_Base_SetConfig+0xb2>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8009e88 <TIM_Base_SetConfig+0x148>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d00b      	beq.n	8009df2 <TIM_Base_SetConfig+0xb2>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8009e8c <TIM_Base_SetConfig+0x14c>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d007      	beq.n	8009df2 <TIM_Base_SetConfig+0xb2>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a2a      	ldr	r2, [pc, #168]	@ (8009e90 <TIM_Base_SetConfig+0x150>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d003      	beq.n	8009df2 <TIM_Base_SetConfig+0xb2>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a29      	ldr	r2, [pc, #164]	@ (8009e94 <TIM_Base_SetConfig+0x154>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d108      	bne.n	8009e04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	695b      	ldr	r3, [r3, #20]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	689a      	ldr	r2, [r3, #8]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a10      	ldr	r2, [pc, #64]	@ (8009e6c <TIM_Base_SetConfig+0x12c>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d003      	beq.n	8009e38 <TIM_Base_SetConfig+0xf8>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a12      	ldr	r2, [pc, #72]	@ (8009e7c <TIM_Base_SetConfig+0x13c>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d103      	bne.n	8009e40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	691a      	ldr	r2, [r3, #16]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d105      	bne.n	8009e5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	f023 0201 	bic.w	r2, r3, #1
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	611a      	str	r2, [r3, #16]
  }
}
 8009e5e:	bf00      	nop
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	40010000 	.word	0x40010000
 8009e70:	40000400 	.word	0x40000400
 8009e74:	40000800 	.word	0x40000800
 8009e78:	40000c00 	.word	0x40000c00
 8009e7c:	40010400 	.word	0x40010400
 8009e80:	40014000 	.word	0x40014000
 8009e84:	40014400 	.word	0x40014400
 8009e88:	40014800 	.word	0x40014800
 8009e8c:	40001800 	.word	0x40001800
 8009e90:	40001c00 	.word	0x40001c00
 8009e94:	40002000 	.word	0x40002000

08009e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a1b      	ldr	r3, [r3, #32]
 8009eac:	f023 0201 	bic.w	r2, r3, #1
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f023 0303 	bic.w	r3, r3, #3
 8009ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f023 0302 	bic.w	r3, r3, #2
 8009ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a20      	ldr	r2, [pc, #128]	@ (8009f70 <TIM_OC1_SetConfig+0xd8>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d003      	beq.n	8009efc <TIM_OC1_SetConfig+0x64>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8009f74 <TIM_OC1_SetConfig+0xdc>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d10c      	bne.n	8009f16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	f023 0308 	bic.w	r3, r3, #8
 8009f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	f023 0304 	bic.w	r3, r3, #4
 8009f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a15      	ldr	r2, [pc, #84]	@ (8009f70 <TIM_OC1_SetConfig+0xd8>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d003      	beq.n	8009f26 <TIM_OC1_SetConfig+0x8e>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a14      	ldr	r2, [pc, #80]	@ (8009f74 <TIM_OC1_SetConfig+0xdc>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d111      	bne.n	8009f4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	695b      	ldr	r3, [r3, #20]
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	621a      	str	r2, [r3, #32]
}
 8009f64:	bf00      	nop
 8009f66:	371c      	adds	r7, #28
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	40010000 	.word	0x40010000
 8009f74:	40010400 	.word	0x40010400

08009f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b087      	sub	sp, #28
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a1b      	ldr	r3, [r3, #32]
 8009f8c:	f023 0210 	bic.w	r2, r3, #16
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	699b      	ldr	r3, [r3, #24]
 8009f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	021b      	lsls	r3, r3, #8
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	f023 0320 	bic.w	r3, r3, #32
 8009fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	011b      	lsls	r3, r3, #4
 8009fca:	697a      	ldr	r2, [r7, #20]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a22      	ldr	r2, [pc, #136]	@ (800a05c <TIM_OC2_SetConfig+0xe4>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d003      	beq.n	8009fe0 <TIM_OC2_SetConfig+0x68>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a21      	ldr	r2, [pc, #132]	@ (800a060 <TIM_OC2_SetConfig+0xe8>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d10d      	bne.n	8009ffc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	011b      	lsls	r3, r3, #4
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ffa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a17      	ldr	r2, [pc, #92]	@ (800a05c <TIM_OC2_SetConfig+0xe4>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d003      	beq.n	800a00c <TIM_OC2_SetConfig+0x94>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a16      	ldr	r2, [pc, #88]	@ (800a060 <TIM_OC2_SetConfig+0xe8>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d113      	bne.n	800a034 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a012:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a01a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	695b      	ldr	r3, [r3, #20]
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	4313      	orrs	r3, r2
 800a026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	693a      	ldr	r2, [r7, #16]
 800a030:	4313      	orrs	r3, r2
 800a032:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	693a      	ldr	r2, [r7, #16]
 800a038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	685a      	ldr	r2, [r3, #4]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	621a      	str	r2, [r3, #32]
}
 800a04e:	bf00      	nop
 800a050:	371c      	adds	r7, #28
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	40010000 	.word	0x40010000
 800a060:	40010400 	.word	0x40010400

0800a064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a1b      	ldr	r3, [r3, #32]
 800a078:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f023 0303 	bic.w	r3, r3, #3
 800a09a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a0ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a21      	ldr	r2, [pc, #132]	@ (800a144 <TIM_OC3_SetConfig+0xe0>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d003      	beq.n	800a0ca <TIM_OC3_SetConfig+0x66>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a20      	ldr	r2, [pc, #128]	@ (800a148 <TIM_OC3_SetConfig+0xe4>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d10d      	bne.n	800a0e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a0d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	021b      	lsls	r3, r3, #8
 800a0d8:	697a      	ldr	r2, [r7, #20]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a0e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a16      	ldr	r2, [pc, #88]	@ (800a144 <TIM_OC3_SetConfig+0xe0>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d003      	beq.n	800a0f6 <TIM_OC3_SetConfig+0x92>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a15      	ldr	r2, [pc, #84]	@ (800a148 <TIM_OC3_SetConfig+0xe4>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d113      	bne.n	800a11e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	011b      	lsls	r3, r3, #4
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	4313      	orrs	r3, r2
 800a110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	011b      	lsls	r3, r3, #4
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	621a      	str	r2, [r3, #32]
}
 800a138:	bf00      	nop
 800a13a:	371c      	adds	r7, #28
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	40010000 	.word	0x40010000
 800a148:	40010400 	.word	0x40010400

0800a14c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b087      	sub	sp, #28
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a1b      	ldr	r3, [r3, #32]
 800a160:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	69db      	ldr	r3, [r3, #28]
 800a172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a17a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	021b      	lsls	r3, r3, #8
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	031b      	lsls	r3, r3, #12
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a12      	ldr	r2, [pc, #72]	@ (800a1f0 <TIM_OC4_SetConfig+0xa4>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d003      	beq.n	800a1b4 <TIM_OC4_SetConfig+0x68>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a11      	ldr	r2, [pc, #68]	@ (800a1f4 <TIM_OC4_SetConfig+0xa8>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d109      	bne.n	800a1c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	019b      	lsls	r3, r3, #6
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	621a      	str	r2, [r3, #32]
}
 800a1e2:	bf00      	nop
 800a1e4:	371c      	adds	r7, #28
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	40010000 	.word	0x40010000
 800a1f4:	40010400 	.word	0x40010400

0800a1f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	f023 0201 	bic.w	r2, r3, #1
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	011b      	lsls	r3, r3, #4
 800a228:	693a      	ldr	r2, [r7, #16]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f023 030a 	bic.w	r3, r3, #10
 800a234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	621a      	str	r2, [r3, #32]
}
 800a24a:	bf00      	nop
 800a24c:	371c      	adds	r7, #28
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr

0800a256 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a256:	b480      	push	{r7}
 800a258:	b087      	sub	sp, #28
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	60f8      	str	r0, [r7, #12]
 800a25e:	60b9      	str	r1, [r7, #8]
 800a260:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6a1b      	ldr	r3, [r3, #32]
 800a26c:	f023 0210 	bic.w	r2, r3, #16
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a280:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	031b      	lsls	r3, r3, #12
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	4313      	orrs	r3, r2
 800a28a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a292:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	011b      	lsls	r3, r3, #4
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	621a      	str	r2, [r3, #32]
}
 800a2aa:	bf00      	nop
 800a2ac:	371c      	adds	r7, #28
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b085      	sub	sp, #20
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	f043 0307 	orr.w	r3, r3, #7
 800a2d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	609a      	str	r2, [r3, #8]
}
 800a2e0:	bf00      	nop
 800a2e2:	3714      	adds	r7, #20
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
 800a2f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	021a      	lsls	r2, r3, #8
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	431a      	orrs	r2, r3
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	4313      	orrs	r3, r2
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	4313      	orrs	r3, r2
 800a318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	609a      	str	r2, [r3, #8]
}
 800a320:	bf00      	nop
 800a322:	371c      	adds	r7, #28
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b087      	sub	sp, #28
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f003 031f 	and.w	r3, r3, #31
 800a33e:	2201      	movs	r2, #1
 800a340:	fa02 f303 	lsl.w	r3, r2, r3
 800a344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6a1a      	ldr	r2, [r3, #32]
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	43db      	mvns	r3, r3
 800a34e:	401a      	ands	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6a1a      	ldr	r2, [r3, #32]
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	f003 031f 	and.w	r3, r3, #31
 800a35e:	6879      	ldr	r1, [r7, #4]
 800a360:	fa01 f303 	lsl.w	r3, r1, r3
 800a364:	431a      	orrs	r2, r3
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	621a      	str	r2, [r3, #32]
}
 800a36a:	bf00      	nop
 800a36c:	371c      	adds	r7, #28
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
	...

0800a378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d101      	bne.n	800a390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a38c:	2302      	movs	r3, #2
 800a38e:	e05a      	b.n	800a446 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2202      	movs	r2, #2
 800a39c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a21      	ldr	r2, [pc, #132]	@ (800a454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d022      	beq.n	800a41a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3dc:	d01d      	beq.n	800a41a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a1d      	ldr	r2, [pc, #116]	@ (800a458 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d018      	beq.n	800a41a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a1b      	ldr	r2, [pc, #108]	@ (800a45c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d013      	beq.n	800a41a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a1a      	ldr	r2, [pc, #104]	@ (800a460 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d00e      	beq.n	800a41a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a18      	ldr	r2, [pc, #96]	@ (800a464 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d009      	beq.n	800a41a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a17      	ldr	r2, [pc, #92]	@ (800a468 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d004      	beq.n	800a41a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a15      	ldr	r2, [pc, #84]	@ (800a46c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d10c      	bne.n	800a434 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	4313      	orrs	r3, r2
 800a42a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	40010000 	.word	0x40010000
 800a458:	40000400 	.word	0x40000400
 800a45c:	40000800 	.word	0x40000800
 800a460:	40000c00 	.word	0x40000c00
 800a464:	40010400 	.word	0x40010400
 800a468:	40014000 	.word	0x40014000
 800a46c:	40001800 	.word	0x40001800

0800a470 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a47a:	2300      	movs	r3, #0
 800a47c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a484:	2b01      	cmp	r3, #1
 800a486:	d101      	bne.n	800a48c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a488:	2302      	movs	r3, #2
 800a48a:	e03d      	b.n	800a508 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3714      	adds	r7, #20
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a51c:	bf00      	nop
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d101      	bne.n	800a54e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e042      	b.n	800a5d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b00      	cmp	r3, #0
 800a558:	d106      	bne.n	800a568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7fc ffb4 	bl	80074d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2224      	movs	r2, #36	@ 0x24
 800a56c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68da      	ldr	r2, [r3, #12]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a57e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fcdb 	bl	800af3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	691a      	ldr	r2, [r3, #16]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	695a      	ldr	r2, [r3, #20]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a5a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68da      	ldr	r2, [r3, #12]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a5b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2220      	movs	r2, #32
 800a5c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2220      	movs	r2, #32
 800a5c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	4613      	mov	r3, r2
 800a5e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b20      	cmp	r3, #32
 800a5f4:	d112      	bne.n	800a61c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d002      	beq.n	800a602 <HAL_UART_Receive_IT+0x26>
 800a5fc:	88fb      	ldrh	r3, [r7, #6]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d101      	bne.n	800a606 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e00b      	b.n	800a61e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a60c:	88fb      	ldrh	r3, [r7, #6]
 800a60e:	461a      	mov	r2, r3
 800a610:	68b9      	ldr	r1, [r7, #8]
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f000 faba 	bl	800ab8c <UART_Start_Receive_IT>
 800a618:	4603      	mov	r3, r0
 800a61a:	e000      	b.n	800a61e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a61c:	2302      	movs	r3, #2
  }
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
	...

0800a628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b0ba      	sub	sp, #232	@ 0xe8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a64e:	2300      	movs	r3, #0
 800a650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a654:	2300      	movs	r3, #0
 800a656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a65e:	f003 030f 	and.w	r3, r3, #15
 800a662:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10f      	bne.n	800a68e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a66e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a672:	f003 0320 	and.w	r3, r3, #32
 800a676:	2b00      	cmp	r3, #0
 800a678:	d009      	beq.n	800a68e <HAL_UART_IRQHandler+0x66>
 800a67a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a67e:	f003 0320 	and.w	r3, r3, #32
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fb99 	bl	800adbe <UART_Receive_IT>
      return;
 800a68c:	e25b      	b.n	800ab46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a68e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a692:	2b00      	cmp	r3, #0
 800a694:	f000 80de 	beq.w	800a854 <HAL_UART_IRQHandler+0x22c>
 800a698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a69c:	f003 0301 	and.w	r3, r3, #1
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d106      	bne.n	800a6b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a6a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 80d1 	beq.w	800a854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a6b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00b      	beq.n	800a6d6 <HAL_UART_IRQHandler+0xae>
 800a6be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d005      	beq.n	800a6d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6ce:	f043 0201 	orr.w	r2, r3, #1
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6da:	f003 0304 	and.w	r3, r3, #4
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00b      	beq.n	800a6fa <HAL_UART_IRQHandler+0xd2>
 800a6e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6e6:	f003 0301 	and.w	r3, r3, #1
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d005      	beq.n	800a6fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6f2:	f043 0202 	orr.w	r2, r3, #2
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6fe:	f003 0302 	and.w	r3, r3, #2
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00b      	beq.n	800a71e <HAL_UART_IRQHandler+0xf6>
 800a706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d005      	beq.n	800a71e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a716:	f043 0204 	orr.w	r2, r3, #4
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a722:	f003 0308 	and.w	r3, r3, #8
 800a726:	2b00      	cmp	r3, #0
 800a728:	d011      	beq.n	800a74e <HAL_UART_IRQHandler+0x126>
 800a72a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a72e:	f003 0320 	and.w	r3, r3, #32
 800a732:	2b00      	cmp	r3, #0
 800a734:	d105      	bne.n	800a742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d005      	beq.n	800a74e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a746:	f043 0208 	orr.w	r2, r3, #8
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a752:	2b00      	cmp	r3, #0
 800a754:	f000 81f2 	beq.w	800ab3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a75c:	f003 0320 	and.w	r3, r3, #32
 800a760:	2b00      	cmp	r3, #0
 800a762:	d008      	beq.n	800a776 <HAL_UART_IRQHandler+0x14e>
 800a764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a768:	f003 0320 	and.w	r3, r3, #32
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d002      	beq.n	800a776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fb24 	bl	800adbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	695b      	ldr	r3, [r3, #20]
 800a77c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a780:	2b40      	cmp	r3, #64	@ 0x40
 800a782:	bf0c      	ite	eq
 800a784:	2301      	moveq	r3, #1
 800a786:	2300      	movne	r3, #0
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a792:	f003 0308 	and.w	r3, r3, #8
 800a796:	2b00      	cmp	r3, #0
 800a798:	d103      	bne.n	800a7a2 <HAL_UART_IRQHandler+0x17a>
 800a79a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d04f      	beq.n	800a842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fa2c 	bl	800ac00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7b2:	2b40      	cmp	r3, #64	@ 0x40
 800a7b4:	d141      	bne.n	800a83a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	3314      	adds	r3, #20
 800a7bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a7c4:	e853 3f00 	ldrex	r3, [r3]
 800a7c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a7cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a7d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3314      	adds	r3, #20
 800a7de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a7e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a7e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a7ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a7f2:	e841 2300 	strex	r3, r2, [r1]
 800a7f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a7fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1d9      	bne.n	800a7b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a806:	2b00      	cmp	r3, #0
 800a808:	d013      	beq.n	800a832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a80e:	4a7e      	ldr	r2, [pc, #504]	@ (800aa08 <HAL_UART_IRQHandler+0x3e0>)
 800a810:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a816:	4618      	mov	r0, r3
 800a818:	f7fd fae9 	bl	8007dee <HAL_DMA_Abort_IT>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d016      	beq.n	800a850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a82c:	4610      	mov	r0, r2
 800a82e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a830:	e00e      	b.n	800a850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f994 	bl	800ab60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a838:	e00a      	b.n	800a850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f990 	bl	800ab60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a840:	e006      	b.n	800a850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f98c 	bl	800ab60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a84e:	e175      	b.n	800ab3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a850:	bf00      	nop
    return;
 800a852:	e173      	b.n	800ab3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a858:	2b01      	cmp	r3, #1
 800a85a:	f040 814f 	bne.w	800aafc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a85e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a862:	f003 0310 	and.w	r3, r3, #16
 800a866:	2b00      	cmp	r3, #0
 800a868:	f000 8148 	beq.w	800aafc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a86c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a870:	f003 0310 	and.w	r3, r3, #16
 800a874:	2b00      	cmp	r3, #0
 800a876:	f000 8141 	beq.w	800aafc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a87a:	2300      	movs	r3, #0
 800a87c:	60bb      	str	r3, [r7, #8]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	60bb      	str	r3, [r7, #8]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	60bb      	str	r3, [r7, #8]
 800a88e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	695b      	ldr	r3, [r3, #20]
 800a896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a89a:	2b40      	cmp	r3, #64	@ 0x40
 800a89c:	f040 80b6 	bne.w	800aa0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a8ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f000 8145 	beq.w	800ab40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a8ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	f080 813e 	bcs.w	800ab40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a8ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8d6:	f000 8088 	beq.w	800a9ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	330c      	adds	r3, #12
 800a8e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a8e8:	e853 3f00 	ldrex	r3, [r3]
 800a8ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a8f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a8f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	330c      	adds	r3, #12
 800a902:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a906:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a90a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a912:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a916:	e841 2300 	strex	r3, r2, [r1]
 800a91a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a91e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a922:	2b00      	cmp	r3, #0
 800a924:	d1d9      	bne.n	800a8da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	3314      	adds	r3, #20
 800a92c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a930:	e853 3f00 	ldrex	r3, [r3]
 800a934:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a938:	f023 0301 	bic.w	r3, r3, #1
 800a93c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3314      	adds	r3, #20
 800a946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a94a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a94e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a950:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a952:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a956:	e841 2300 	strex	r3, r2, [r1]
 800a95a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a95c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1e1      	bne.n	800a926 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3314      	adds	r3, #20
 800a968:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a96c:	e853 3f00 	ldrex	r3, [r3]
 800a970:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	3314      	adds	r3, #20
 800a982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a986:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a988:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a98c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a98e:	e841 2300 	strex	r3, r2, [r1]
 800a992:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1e3      	bne.n	800a962 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2220      	movs	r2, #32
 800a99e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	330c      	adds	r3, #12
 800a9ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9b2:	e853 3f00 	ldrex	r3, [r3]
 800a9b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a9b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9ba:	f023 0310 	bic.w	r3, r3, #16
 800a9be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	330c      	adds	r3, #12
 800a9c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a9cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a9ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a9d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a9d4:	e841 2300 	strex	r3, r2, [r1]
 800a9d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a9da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1e3      	bne.n	800a9a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fd f992 	bl	8007d0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2202      	movs	r2, #2
 800a9ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f8b7 	bl	800ab74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa06:	e09b      	b.n	800ab40 <HAL_UART_IRQHandler+0x518>
 800aa08:	0800acc7 	.word	0x0800acc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 808e 	beq.w	800ab44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800aa28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 8089 	beq.w	800ab44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	330c      	adds	r3, #12
 800aa38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3c:	e853 3f00 	ldrex	r3, [r3]
 800aa40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	330c      	adds	r3, #12
 800aa52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800aa56:	647a      	str	r2, [r7, #68]	@ 0x44
 800aa58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa5e:	e841 2300 	strex	r3, r2, [r1]
 800aa62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1e3      	bne.n	800aa32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3314      	adds	r3, #20
 800aa70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa74:	e853 3f00 	ldrex	r3, [r3]
 800aa78:	623b      	str	r3, [r7, #32]
   return(result);
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	f023 0301 	bic.w	r3, r3, #1
 800aa80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3314      	adds	r3, #20
 800aa8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aa8e:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa96:	e841 2300 	strex	r3, r2, [r1]
 800aa9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1e3      	bne.n	800aa6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	330c      	adds	r3, #12
 800aab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	e853 3f00 	ldrex	r3, [r3]
 800aabe:	60fb      	str	r3, [r7, #12]
   return(result);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f023 0310 	bic.w	r3, r3, #16
 800aac6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	330c      	adds	r3, #12
 800aad0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800aad4:	61fa      	str	r2, [r7, #28]
 800aad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad8:	69b9      	ldr	r1, [r7, #24]
 800aada:	69fa      	ldr	r2, [r7, #28]
 800aadc:	e841 2300 	strex	r3, r2, [r1]
 800aae0:	617b      	str	r3, [r7, #20]
   return(result);
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1e3      	bne.n	800aab0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2202      	movs	r2, #2
 800aaec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aaee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 f83d 	bl	800ab74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aafa:	e023      	b.n	800ab44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d009      	beq.n	800ab1c <HAL_UART_IRQHandler+0x4f4>
 800ab08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d003      	beq.n	800ab1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f8ea 	bl	800acee <UART_Transmit_IT>
    return;
 800ab1a:	e014      	b.n	800ab46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ab1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00e      	beq.n	800ab46 <HAL_UART_IRQHandler+0x51e>
 800ab28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d008      	beq.n	800ab46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 f92a 	bl	800ad8e <UART_EndTransmit_IT>
    return;
 800ab3a:	e004      	b.n	800ab46 <HAL_UART_IRQHandler+0x51e>
    return;
 800ab3c:	bf00      	nop
 800ab3e:	e002      	b.n	800ab46 <HAL_UART_IRQHandler+0x51e>
      return;
 800ab40:	bf00      	nop
 800ab42:	e000      	b.n	800ab46 <HAL_UART_IRQHandler+0x51e>
      return;
 800ab44:	bf00      	nop
  }
}
 800ab46:	37e8      	adds	r7, #232	@ 0xe8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ab54:	bf00      	nop
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ab68:	bf00      	nop
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	4613      	mov	r3, r2
 800ab98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	88fa      	ldrh	r2, [r7, #6]
 800aba4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	88fa      	ldrh	r2, [r7, #6]
 800abaa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2222      	movs	r2, #34	@ 0x22
 800abb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d007      	beq.n	800abd2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68da      	ldr	r2, [r3, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800abd0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	695a      	ldr	r2, [r3, #20]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f042 0201 	orr.w	r2, r2, #1
 800abe0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68da      	ldr	r2, [r3, #12]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f042 0220 	orr.w	r2, r2, #32
 800abf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b095      	sub	sp, #84	@ 0x54
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	330c      	adds	r3, #12
 800ac0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac12:	e853 3f00 	ldrex	r3, [r3]
 800ac16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	330c      	adds	r3, #12
 800ac26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac28:	643a      	str	r2, [r7, #64]	@ 0x40
 800ac2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac30:	e841 2300 	strex	r3, r2, [r1]
 800ac34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1e5      	bne.n	800ac08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	3314      	adds	r3, #20
 800ac42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	e853 3f00 	ldrex	r3, [r3]
 800ac4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	f023 0301 	bic.w	r3, r3, #1
 800ac52:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3314      	adds	r3, #20
 800ac5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac64:	e841 2300 	strex	r3, r2, [r1]
 800ac68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d1e5      	bne.n	800ac3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d119      	bne.n	800acac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	330c      	adds	r3, #12
 800ac7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	e853 3f00 	ldrex	r3, [r3]
 800ac86:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	f023 0310 	bic.w	r3, r3, #16
 800ac8e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	330c      	adds	r3, #12
 800ac96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac98:	61ba      	str	r2, [r7, #24]
 800ac9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9c:	6979      	ldr	r1, [r7, #20]
 800ac9e:	69ba      	ldr	r2, [r7, #24]
 800aca0:	e841 2300 	strex	r3, r2, [r1]
 800aca4:	613b      	str	r3, [r7, #16]
   return(result);
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1e5      	bne.n	800ac78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2220      	movs	r2, #32
 800acb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800acba:	bf00      	nop
 800acbc:	3754      	adds	r7, #84	@ 0x54
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2200      	movs	r2, #0
 800acde:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f7ff ff3d 	bl	800ab60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ace6:	bf00      	nop
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800acee:	b480      	push	{r7}
 800acf0:	b085      	sub	sp, #20
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b21      	cmp	r3, #33	@ 0x21
 800ad00:	d13e      	bne.n	800ad80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad0a:	d114      	bne.n	800ad36 <UART_Transmit_IT+0x48>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d110      	bne.n	800ad36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a1b      	ldr	r3, [r3, #32]
 800ad18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a1b      	ldr	r3, [r3, #32]
 800ad2e:	1c9a      	adds	r2, r3, #2
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	621a      	str	r2, [r3, #32]
 800ad34:	e008      	b.n	800ad48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	1c59      	adds	r1, r3, #1
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	6211      	str	r1, [r2, #32]
 800ad40:	781a      	ldrb	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	4619      	mov	r1, r3
 800ad56:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10f      	bne.n	800ad7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68da      	ldr	r2, [r3, #12]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ad6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68da      	ldr	r2, [r3, #12]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	e000      	b.n	800ad82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ad80:	2302      	movs	r3, #2
  }
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b082      	sub	sp, #8
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68da      	ldr	r2, [r3, #12]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ada4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2220      	movs	r2, #32
 800adaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7ff fecc 	bl	800ab4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b08c      	sub	sp, #48	@ 0x30
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	2b22      	cmp	r3, #34	@ 0x22
 800add0:	f040 80ae 	bne.w	800af30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800addc:	d117      	bne.n	800ae0e <UART_Receive_IT+0x50>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d113      	bne.n	800ae0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae06:	1c9a      	adds	r2, r3, #2
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	629a      	str	r2, [r3, #40]	@ 0x28
 800ae0c:	e026      	b.n	800ae5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ae14:	2300      	movs	r3, #0
 800ae16:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae20:	d007      	beq.n	800ae32 <UART_Receive_IT+0x74>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d10a      	bne.n	800ae40 <UART_Receive_IT+0x82>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d106      	bne.n	800ae40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	b2da      	uxtb	r2, r3
 800ae3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae3c:	701a      	strb	r2, [r3, #0]
 800ae3e:	e008      	b.n	800ae52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae56:	1c5a      	adds	r2, r3, #1
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	3b01      	subs	r3, #1
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d15d      	bne.n	800af2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68da      	ldr	r2, [r3, #12]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f022 0220 	bic.w	r2, r2, #32
 800ae7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68da      	ldr	r2, [r3, #12]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ae8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	695a      	ldr	r2, [r3, #20]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f022 0201 	bic.w	r2, r2, #1
 800ae9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2220      	movs	r2, #32
 800aea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d135      	bne.n	800af22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	330c      	adds	r3, #12
 800aec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	e853 3f00 	ldrex	r3, [r3]
 800aeca:	613b      	str	r3, [r7, #16]
   return(result);
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	f023 0310 	bic.w	r3, r3, #16
 800aed2:	627b      	str	r3, [r7, #36]	@ 0x24
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	330c      	adds	r3, #12
 800aeda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aedc:	623a      	str	r2, [r7, #32]
 800aede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee0:	69f9      	ldr	r1, [r7, #28]
 800aee2:	6a3a      	ldr	r2, [r7, #32]
 800aee4:	e841 2300 	strex	r3, r2, [r1]
 800aee8:	61bb      	str	r3, [r7, #24]
   return(result);
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1e5      	bne.n	800aebc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0310 	and.w	r3, r3, #16
 800aefa:	2b10      	cmp	r3, #16
 800aefc:	d10a      	bne.n	800af14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aefe:	2300      	movs	r3, #0
 800af00:	60fb      	str	r3, [r7, #12]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	60fb      	str	r3, [r7, #12]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	60fb      	str	r3, [r7, #12]
 800af12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800af18:	4619      	mov	r1, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff fe2a 	bl	800ab74 <HAL_UARTEx_RxEventCallback>
 800af20:	e002      	b.n	800af28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f7f9 ff62 	bl	8004dec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	e002      	b.n	800af32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800af2c:	2300      	movs	r3, #0
 800af2e:	e000      	b.n	800af32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800af30:	2302      	movs	r3, #2
  }
}
 800af32:	4618      	mov	r0, r3
 800af34:	3730      	adds	r7, #48	@ 0x30
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
	...

0800af3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af40:	b0c0      	sub	sp, #256	@ 0x100
 800af42:	af00      	add	r7, sp, #0
 800af44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800af54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af58:	68d9      	ldr	r1, [r3, #12]
 800af5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	ea40 0301 	orr.w	r3, r0, r1
 800af64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af6a:	689a      	ldr	r2, [r3, #8]
 800af6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	431a      	orrs	r2, r3
 800af74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	431a      	orrs	r2, r3
 800af7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af80:	69db      	ldr	r3, [r3, #28]
 800af82:	4313      	orrs	r3, r2
 800af84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800af88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800af94:	f021 010c 	bic.w	r1, r1, #12
 800af98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800afa2:	430b      	orrs	r3, r1
 800afa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800afa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	695b      	ldr	r3, [r3, #20]
 800afae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800afb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afb6:	6999      	ldr	r1, [r3, #24]
 800afb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	ea40 0301 	orr.w	r3, r0, r1
 800afc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800afc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	4b8f      	ldr	r3, [pc, #572]	@ (800b208 <UART_SetConfig+0x2cc>)
 800afcc:	429a      	cmp	r2, r3
 800afce:	d005      	beq.n	800afdc <UART_SetConfig+0xa0>
 800afd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	4b8d      	ldr	r3, [pc, #564]	@ (800b20c <UART_SetConfig+0x2d0>)
 800afd8:	429a      	cmp	r2, r3
 800afda:	d104      	bne.n	800afe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800afdc:	f7fe fa32 	bl	8009444 <HAL_RCC_GetPCLK2Freq>
 800afe0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800afe4:	e003      	b.n	800afee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800afe6:	f7fe fa19 	bl	800941c <HAL_RCC_GetPCLK1Freq>
 800afea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aff2:	69db      	ldr	r3, [r3, #28]
 800aff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aff8:	f040 810c 	bne.w	800b214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800affc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b000:	2200      	movs	r2, #0
 800b002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b006:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b00a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b00e:	4622      	mov	r2, r4
 800b010:	462b      	mov	r3, r5
 800b012:	1891      	adds	r1, r2, r2
 800b014:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b016:	415b      	adcs	r3, r3
 800b018:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b01a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b01e:	4621      	mov	r1, r4
 800b020:	eb12 0801 	adds.w	r8, r2, r1
 800b024:	4629      	mov	r1, r5
 800b026:	eb43 0901 	adc.w	r9, r3, r1
 800b02a:	f04f 0200 	mov.w	r2, #0
 800b02e:	f04f 0300 	mov.w	r3, #0
 800b032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b03a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b03e:	4690      	mov	r8, r2
 800b040:	4699      	mov	r9, r3
 800b042:	4623      	mov	r3, r4
 800b044:	eb18 0303 	adds.w	r3, r8, r3
 800b048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b04c:	462b      	mov	r3, r5
 800b04e:	eb49 0303 	adc.w	r3, r9, r3
 800b052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b062:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b06a:	460b      	mov	r3, r1
 800b06c:	18db      	adds	r3, r3, r3
 800b06e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b070:	4613      	mov	r3, r2
 800b072:	eb42 0303 	adc.w	r3, r2, r3
 800b076:	657b      	str	r3, [r7, #84]	@ 0x54
 800b078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b07c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b080:	f7f5 fe02 	bl	8000c88 <__aeabi_uldivmod>
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	4b61      	ldr	r3, [pc, #388]	@ (800b210 <UART_SetConfig+0x2d4>)
 800b08a:	fba3 2302 	umull	r2, r3, r3, r2
 800b08e:	095b      	lsrs	r3, r3, #5
 800b090:	011c      	lsls	r4, r3, #4
 800b092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b096:	2200      	movs	r2, #0
 800b098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b09c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b0a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b0a4:	4642      	mov	r2, r8
 800b0a6:	464b      	mov	r3, r9
 800b0a8:	1891      	adds	r1, r2, r2
 800b0aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b0ac:	415b      	adcs	r3, r3
 800b0ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b0b4:	4641      	mov	r1, r8
 800b0b6:	eb12 0a01 	adds.w	sl, r2, r1
 800b0ba:	4649      	mov	r1, r9
 800b0bc:	eb43 0b01 	adc.w	fp, r3, r1
 800b0c0:	f04f 0200 	mov.w	r2, #0
 800b0c4:	f04f 0300 	mov.w	r3, #0
 800b0c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b0cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b0d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b0d4:	4692      	mov	sl, r2
 800b0d6:	469b      	mov	fp, r3
 800b0d8:	4643      	mov	r3, r8
 800b0da:	eb1a 0303 	adds.w	r3, sl, r3
 800b0de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b0e2:	464b      	mov	r3, r9
 800b0e4:	eb4b 0303 	adc.w	r3, fp, r3
 800b0e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b0ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b0f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b0fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b100:	460b      	mov	r3, r1
 800b102:	18db      	adds	r3, r3, r3
 800b104:	643b      	str	r3, [r7, #64]	@ 0x40
 800b106:	4613      	mov	r3, r2
 800b108:	eb42 0303 	adc.w	r3, r2, r3
 800b10c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b10e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b116:	f7f5 fdb7 	bl	8000c88 <__aeabi_uldivmod>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	4611      	mov	r1, r2
 800b120:	4b3b      	ldr	r3, [pc, #236]	@ (800b210 <UART_SetConfig+0x2d4>)
 800b122:	fba3 2301 	umull	r2, r3, r3, r1
 800b126:	095b      	lsrs	r3, r3, #5
 800b128:	2264      	movs	r2, #100	@ 0x64
 800b12a:	fb02 f303 	mul.w	r3, r2, r3
 800b12e:	1acb      	subs	r3, r1, r3
 800b130:	00db      	lsls	r3, r3, #3
 800b132:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b136:	4b36      	ldr	r3, [pc, #216]	@ (800b210 <UART_SetConfig+0x2d4>)
 800b138:	fba3 2302 	umull	r2, r3, r3, r2
 800b13c:	095b      	lsrs	r3, r3, #5
 800b13e:	005b      	lsls	r3, r3, #1
 800b140:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b144:	441c      	add	r4, r3
 800b146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b14a:	2200      	movs	r2, #0
 800b14c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b150:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b158:	4642      	mov	r2, r8
 800b15a:	464b      	mov	r3, r9
 800b15c:	1891      	adds	r1, r2, r2
 800b15e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b160:	415b      	adcs	r3, r3
 800b162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b168:	4641      	mov	r1, r8
 800b16a:	1851      	adds	r1, r2, r1
 800b16c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b16e:	4649      	mov	r1, r9
 800b170:	414b      	adcs	r3, r1
 800b172:	637b      	str	r3, [r7, #52]	@ 0x34
 800b174:	f04f 0200 	mov.w	r2, #0
 800b178:	f04f 0300 	mov.w	r3, #0
 800b17c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b180:	4659      	mov	r1, fp
 800b182:	00cb      	lsls	r3, r1, #3
 800b184:	4651      	mov	r1, sl
 800b186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b18a:	4651      	mov	r1, sl
 800b18c:	00ca      	lsls	r2, r1, #3
 800b18e:	4610      	mov	r0, r2
 800b190:	4619      	mov	r1, r3
 800b192:	4603      	mov	r3, r0
 800b194:	4642      	mov	r2, r8
 800b196:	189b      	adds	r3, r3, r2
 800b198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b19c:	464b      	mov	r3, r9
 800b19e:	460a      	mov	r2, r1
 800b1a0:	eb42 0303 	adc.w	r3, r2, r3
 800b1a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b1a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b1b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b1b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b1bc:	460b      	mov	r3, r1
 800b1be:	18db      	adds	r3, r3, r3
 800b1c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	eb42 0303 	adc.w	r3, r2, r3
 800b1c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b1ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b1ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b1d2:	f7f5 fd59 	bl	8000c88 <__aeabi_uldivmod>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	4b0d      	ldr	r3, [pc, #52]	@ (800b210 <UART_SetConfig+0x2d4>)
 800b1dc:	fba3 1302 	umull	r1, r3, r3, r2
 800b1e0:	095b      	lsrs	r3, r3, #5
 800b1e2:	2164      	movs	r1, #100	@ 0x64
 800b1e4:	fb01 f303 	mul.w	r3, r1, r3
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	00db      	lsls	r3, r3, #3
 800b1ec:	3332      	adds	r3, #50	@ 0x32
 800b1ee:	4a08      	ldr	r2, [pc, #32]	@ (800b210 <UART_SetConfig+0x2d4>)
 800b1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f4:	095b      	lsrs	r3, r3, #5
 800b1f6:	f003 0207 	and.w	r2, r3, #7
 800b1fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4422      	add	r2, r4
 800b202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b204:	e106      	b.n	800b414 <UART_SetConfig+0x4d8>
 800b206:	bf00      	nop
 800b208:	40011000 	.word	0x40011000
 800b20c:	40011400 	.word	0x40011400
 800b210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b218:	2200      	movs	r2, #0
 800b21a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b21e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b226:	4642      	mov	r2, r8
 800b228:	464b      	mov	r3, r9
 800b22a:	1891      	adds	r1, r2, r2
 800b22c:	6239      	str	r1, [r7, #32]
 800b22e:	415b      	adcs	r3, r3
 800b230:	627b      	str	r3, [r7, #36]	@ 0x24
 800b232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b236:	4641      	mov	r1, r8
 800b238:	1854      	adds	r4, r2, r1
 800b23a:	4649      	mov	r1, r9
 800b23c:	eb43 0501 	adc.w	r5, r3, r1
 800b240:	f04f 0200 	mov.w	r2, #0
 800b244:	f04f 0300 	mov.w	r3, #0
 800b248:	00eb      	lsls	r3, r5, #3
 800b24a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b24e:	00e2      	lsls	r2, r4, #3
 800b250:	4614      	mov	r4, r2
 800b252:	461d      	mov	r5, r3
 800b254:	4643      	mov	r3, r8
 800b256:	18e3      	adds	r3, r4, r3
 800b258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b25c:	464b      	mov	r3, r9
 800b25e:	eb45 0303 	adc.w	r3, r5, r3
 800b262:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b272:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b276:	f04f 0200 	mov.w	r2, #0
 800b27a:	f04f 0300 	mov.w	r3, #0
 800b27e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b282:	4629      	mov	r1, r5
 800b284:	008b      	lsls	r3, r1, #2
 800b286:	4621      	mov	r1, r4
 800b288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b28c:	4621      	mov	r1, r4
 800b28e:	008a      	lsls	r2, r1, #2
 800b290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b294:	f7f5 fcf8 	bl	8000c88 <__aeabi_uldivmod>
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	4b60      	ldr	r3, [pc, #384]	@ (800b420 <UART_SetConfig+0x4e4>)
 800b29e:	fba3 2302 	umull	r2, r3, r3, r2
 800b2a2:	095b      	lsrs	r3, r3, #5
 800b2a4:	011c      	lsls	r4, r3, #4
 800b2a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b2b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b2b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b2b8:	4642      	mov	r2, r8
 800b2ba:	464b      	mov	r3, r9
 800b2bc:	1891      	adds	r1, r2, r2
 800b2be:	61b9      	str	r1, [r7, #24]
 800b2c0:	415b      	adcs	r3, r3
 800b2c2:	61fb      	str	r3, [r7, #28]
 800b2c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b2c8:	4641      	mov	r1, r8
 800b2ca:	1851      	adds	r1, r2, r1
 800b2cc:	6139      	str	r1, [r7, #16]
 800b2ce:	4649      	mov	r1, r9
 800b2d0:	414b      	adcs	r3, r1
 800b2d2:	617b      	str	r3, [r7, #20]
 800b2d4:	f04f 0200 	mov.w	r2, #0
 800b2d8:	f04f 0300 	mov.w	r3, #0
 800b2dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b2e0:	4659      	mov	r1, fp
 800b2e2:	00cb      	lsls	r3, r1, #3
 800b2e4:	4651      	mov	r1, sl
 800b2e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2ea:	4651      	mov	r1, sl
 800b2ec:	00ca      	lsls	r2, r1, #3
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	4642      	mov	r2, r8
 800b2f6:	189b      	adds	r3, r3, r2
 800b2f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b2fc:	464b      	mov	r3, r9
 800b2fe:	460a      	mov	r2, r1
 800b300:	eb42 0303 	adc.w	r3, r2, r3
 800b304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b312:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b314:	f04f 0200 	mov.w	r2, #0
 800b318:	f04f 0300 	mov.w	r3, #0
 800b31c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b320:	4649      	mov	r1, r9
 800b322:	008b      	lsls	r3, r1, #2
 800b324:	4641      	mov	r1, r8
 800b326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b32a:	4641      	mov	r1, r8
 800b32c:	008a      	lsls	r2, r1, #2
 800b32e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b332:	f7f5 fca9 	bl	8000c88 <__aeabi_uldivmod>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	4611      	mov	r1, r2
 800b33c:	4b38      	ldr	r3, [pc, #224]	@ (800b420 <UART_SetConfig+0x4e4>)
 800b33e:	fba3 2301 	umull	r2, r3, r3, r1
 800b342:	095b      	lsrs	r3, r3, #5
 800b344:	2264      	movs	r2, #100	@ 0x64
 800b346:	fb02 f303 	mul.w	r3, r2, r3
 800b34a:	1acb      	subs	r3, r1, r3
 800b34c:	011b      	lsls	r3, r3, #4
 800b34e:	3332      	adds	r3, #50	@ 0x32
 800b350:	4a33      	ldr	r2, [pc, #204]	@ (800b420 <UART_SetConfig+0x4e4>)
 800b352:	fba2 2303 	umull	r2, r3, r2, r3
 800b356:	095b      	lsrs	r3, r3, #5
 800b358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b35c:	441c      	add	r4, r3
 800b35e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b362:	2200      	movs	r2, #0
 800b364:	673b      	str	r3, [r7, #112]	@ 0x70
 800b366:	677a      	str	r2, [r7, #116]	@ 0x74
 800b368:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b36c:	4642      	mov	r2, r8
 800b36e:	464b      	mov	r3, r9
 800b370:	1891      	adds	r1, r2, r2
 800b372:	60b9      	str	r1, [r7, #8]
 800b374:	415b      	adcs	r3, r3
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b37c:	4641      	mov	r1, r8
 800b37e:	1851      	adds	r1, r2, r1
 800b380:	6039      	str	r1, [r7, #0]
 800b382:	4649      	mov	r1, r9
 800b384:	414b      	adcs	r3, r1
 800b386:	607b      	str	r3, [r7, #4]
 800b388:	f04f 0200 	mov.w	r2, #0
 800b38c:	f04f 0300 	mov.w	r3, #0
 800b390:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b394:	4659      	mov	r1, fp
 800b396:	00cb      	lsls	r3, r1, #3
 800b398:	4651      	mov	r1, sl
 800b39a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b39e:	4651      	mov	r1, sl
 800b3a0:	00ca      	lsls	r2, r1, #3
 800b3a2:	4610      	mov	r0, r2
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	4642      	mov	r2, r8
 800b3aa:	189b      	adds	r3, r3, r2
 800b3ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b3ae:	464b      	mov	r3, r9
 800b3b0:	460a      	mov	r2, r1
 800b3b2:	eb42 0303 	adc.w	r3, r2, r3
 800b3b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b3b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b3c2:	667a      	str	r2, [r7, #100]	@ 0x64
 800b3c4:	f04f 0200 	mov.w	r2, #0
 800b3c8:	f04f 0300 	mov.w	r3, #0
 800b3cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b3d0:	4649      	mov	r1, r9
 800b3d2:	008b      	lsls	r3, r1, #2
 800b3d4:	4641      	mov	r1, r8
 800b3d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3da:	4641      	mov	r1, r8
 800b3dc:	008a      	lsls	r2, r1, #2
 800b3de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b3e2:	f7f5 fc51 	bl	8000c88 <__aeabi_uldivmod>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b420 <UART_SetConfig+0x4e4>)
 800b3ec:	fba3 1302 	umull	r1, r3, r3, r2
 800b3f0:	095b      	lsrs	r3, r3, #5
 800b3f2:	2164      	movs	r1, #100	@ 0x64
 800b3f4:	fb01 f303 	mul.w	r3, r1, r3
 800b3f8:	1ad3      	subs	r3, r2, r3
 800b3fa:	011b      	lsls	r3, r3, #4
 800b3fc:	3332      	adds	r3, #50	@ 0x32
 800b3fe:	4a08      	ldr	r2, [pc, #32]	@ (800b420 <UART_SetConfig+0x4e4>)
 800b400:	fba2 2303 	umull	r2, r3, r2, r3
 800b404:	095b      	lsrs	r3, r3, #5
 800b406:	f003 020f 	and.w	r2, r3, #15
 800b40a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4422      	add	r2, r4
 800b412:	609a      	str	r2, [r3, #8]
}
 800b414:	bf00      	nop
 800b416:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b41a:	46bd      	mov	sp, r7
 800b41c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b420:	51eb851f 	.word	0x51eb851f

0800b424 <atof>:
 800b424:	2100      	movs	r1, #0
 800b426:	f000 be0d 	b.w	800c044 <strtod>

0800b42a <atoi>:
 800b42a:	220a      	movs	r2, #10
 800b42c:	2100      	movs	r1, #0
 800b42e:	f000 be91 	b.w	800c154 <strtol>

0800b432 <sulp>:
 800b432:	b570      	push	{r4, r5, r6, lr}
 800b434:	4604      	mov	r4, r0
 800b436:	460d      	mov	r5, r1
 800b438:	ec45 4b10 	vmov	d0, r4, r5
 800b43c:	4616      	mov	r6, r2
 800b43e:	f003 fd5b 	bl	800eef8 <__ulp>
 800b442:	ec51 0b10 	vmov	r0, r1, d0
 800b446:	b17e      	cbz	r6, 800b468 <sulp+0x36>
 800b448:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b44c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b450:	2b00      	cmp	r3, #0
 800b452:	dd09      	ble.n	800b468 <sulp+0x36>
 800b454:	051b      	lsls	r3, r3, #20
 800b456:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b45a:	2400      	movs	r4, #0
 800b45c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b460:	4622      	mov	r2, r4
 800b462:	462b      	mov	r3, r5
 800b464:	f7f5 f8c8 	bl	80005f8 <__aeabi_dmul>
 800b468:	ec41 0b10 	vmov	d0, r0, r1
 800b46c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b470 <_strtod_l>:
 800b470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b474:	b09f      	sub	sp, #124	@ 0x7c
 800b476:	460c      	mov	r4, r1
 800b478:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b47a:	2200      	movs	r2, #0
 800b47c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b47e:	9005      	str	r0, [sp, #20]
 800b480:	f04f 0a00 	mov.w	sl, #0
 800b484:	f04f 0b00 	mov.w	fp, #0
 800b488:	460a      	mov	r2, r1
 800b48a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b48c:	7811      	ldrb	r1, [r2, #0]
 800b48e:	292b      	cmp	r1, #43	@ 0x2b
 800b490:	d04a      	beq.n	800b528 <_strtod_l+0xb8>
 800b492:	d838      	bhi.n	800b506 <_strtod_l+0x96>
 800b494:	290d      	cmp	r1, #13
 800b496:	d832      	bhi.n	800b4fe <_strtod_l+0x8e>
 800b498:	2908      	cmp	r1, #8
 800b49a:	d832      	bhi.n	800b502 <_strtod_l+0x92>
 800b49c:	2900      	cmp	r1, #0
 800b49e:	d03b      	beq.n	800b518 <_strtod_l+0xa8>
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b4a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b4a6:	782a      	ldrb	r2, [r5, #0]
 800b4a8:	2a30      	cmp	r2, #48	@ 0x30
 800b4aa:	f040 80b3 	bne.w	800b614 <_strtod_l+0x1a4>
 800b4ae:	786a      	ldrb	r2, [r5, #1]
 800b4b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b4b4:	2a58      	cmp	r2, #88	@ 0x58
 800b4b6:	d16e      	bne.n	800b596 <_strtod_l+0x126>
 800b4b8:	9302      	str	r3, [sp, #8]
 800b4ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4bc:	9301      	str	r3, [sp, #4]
 800b4be:	ab1a      	add	r3, sp, #104	@ 0x68
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	4a8e      	ldr	r2, [pc, #568]	@ (800b6fc <_strtod_l+0x28c>)
 800b4c4:	9805      	ldr	r0, [sp, #20]
 800b4c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b4c8:	a919      	add	r1, sp, #100	@ 0x64
 800b4ca:	f002 fe07 	bl	800e0dc <__gethex>
 800b4ce:	f010 060f 	ands.w	r6, r0, #15
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	d005      	beq.n	800b4e2 <_strtod_l+0x72>
 800b4d6:	2e06      	cmp	r6, #6
 800b4d8:	d128      	bne.n	800b52c <_strtod_l+0xbc>
 800b4da:	3501      	adds	r5, #1
 800b4dc:	2300      	movs	r3, #0
 800b4de:	9519      	str	r5, [sp, #100]	@ 0x64
 800b4e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f040 858e 	bne.w	800c006 <_strtod_l+0xb96>
 800b4ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4ec:	b1cb      	cbz	r3, 800b522 <_strtod_l+0xb2>
 800b4ee:	4652      	mov	r2, sl
 800b4f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b4f4:	ec43 2b10 	vmov	d0, r2, r3
 800b4f8:	b01f      	add	sp, #124	@ 0x7c
 800b4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4fe:	2920      	cmp	r1, #32
 800b500:	d1ce      	bne.n	800b4a0 <_strtod_l+0x30>
 800b502:	3201      	adds	r2, #1
 800b504:	e7c1      	b.n	800b48a <_strtod_l+0x1a>
 800b506:	292d      	cmp	r1, #45	@ 0x2d
 800b508:	d1ca      	bne.n	800b4a0 <_strtod_l+0x30>
 800b50a:	2101      	movs	r1, #1
 800b50c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b50e:	1c51      	adds	r1, r2, #1
 800b510:	9119      	str	r1, [sp, #100]	@ 0x64
 800b512:	7852      	ldrb	r2, [r2, #1]
 800b514:	2a00      	cmp	r2, #0
 800b516:	d1c5      	bne.n	800b4a4 <_strtod_l+0x34>
 800b518:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b51a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	f040 8570 	bne.w	800c002 <_strtod_l+0xb92>
 800b522:	4652      	mov	r2, sl
 800b524:	465b      	mov	r3, fp
 800b526:	e7e5      	b.n	800b4f4 <_strtod_l+0x84>
 800b528:	2100      	movs	r1, #0
 800b52a:	e7ef      	b.n	800b50c <_strtod_l+0x9c>
 800b52c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b52e:	b13a      	cbz	r2, 800b540 <_strtod_l+0xd0>
 800b530:	2135      	movs	r1, #53	@ 0x35
 800b532:	a81c      	add	r0, sp, #112	@ 0x70
 800b534:	f003 fdda 	bl	800f0ec <__copybits>
 800b538:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b53a:	9805      	ldr	r0, [sp, #20]
 800b53c:	f003 f9a8 	bl	800e890 <_Bfree>
 800b540:	3e01      	subs	r6, #1
 800b542:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b544:	2e04      	cmp	r6, #4
 800b546:	d806      	bhi.n	800b556 <_strtod_l+0xe6>
 800b548:	e8df f006 	tbb	[pc, r6]
 800b54c:	201d0314 	.word	0x201d0314
 800b550:	14          	.byte	0x14
 800b551:	00          	.byte	0x00
 800b552:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b556:	05e1      	lsls	r1, r4, #23
 800b558:	bf48      	it	mi
 800b55a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b55e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b562:	0d1b      	lsrs	r3, r3, #20
 800b564:	051b      	lsls	r3, r3, #20
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1bb      	bne.n	800b4e2 <_strtod_l+0x72>
 800b56a:	f001 fe4f 	bl	800d20c <__errno>
 800b56e:	2322      	movs	r3, #34	@ 0x22
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	e7b6      	b.n	800b4e2 <_strtod_l+0x72>
 800b574:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b578:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b57c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b580:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b584:	e7e7      	b.n	800b556 <_strtod_l+0xe6>
 800b586:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b704 <_strtod_l+0x294>
 800b58a:	e7e4      	b.n	800b556 <_strtod_l+0xe6>
 800b58c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b590:	f04f 3aff 	mov.w	sl, #4294967295
 800b594:	e7df      	b.n	800b556 <_strtod_l+0xe6>
 800b596:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b598:	1c5a      	adds	r2, r3, #1
 800b59a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b59c:	785b      	ldrb	r3, [r3, #1]
 800b59e:	2b30      	cmp	r3, #48	@ 0x30
 800b5a0:	d0f9      	beq.n	800b596 <_strtod_l+0x126>
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d09d      	beq.n	800b4e2 <_strtod_l+0x72>
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	9308      	str	r3, [sp, #32]
 800b5b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5b4:	461f      	mov	r7, r3
 800b5b6:	220a      	movs	r2, #10
 800b5b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b5ba:	7805      	ldrb	r5, [r0, #0]
 800b5bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b5c0:	b2d9      	uxtb	r1, r3
 800b5c2:	2909      	cmp	r1, #9
 800b5c4:	d928      	bls.n	800b618 <_strtod_l+0x1a8>
 800b5c6:	494e      	ldr	r1, [pc, #312]	@ (800b700 <_strtod_l+0x290>)
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	f001 fd66 	bl	800d09a <strncmp>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	d032      	beq.n	800b638 <_strtod_l+0x1c8>
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	462a      	mov	r2, r5
 800b5d6:	4681      	mov	r9, r0
 800b5d8:	463d      	mov	r5, r7
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2a65      	cmp	r2, #101	@ 0x65
 800b5de:	d001      	beq.n	800b5e4 <_strtod_l+0x174>
 800b5e0:	2a45      	cmp	r2, #69	@ 0x45
 800b5e2:	d114      	bne.n	800b60e <_strtod_l+0x19e>
 800b5e4:	b91d      	cbnz	r5, 800b5ee <_strtod_l+0x17e>
 800b5e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5e8:	4302      	orrs	r2, r0
 800b5ea:	d095      	beq.n	800b518 <_strtod_l+0xa8>
 800b5ec:	2500      	movs	r5, #0
 800b5ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b5f0:	1c62      	adds	r2, r4, #1
 800b5f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5f4:	7862      	ldrb	r2, [r4, #1]
 800b5f6:	2a2b      	cmp	r2, #43	@ 0x2b
 800b5f8:	d077      	beq.n	800b6ea <_strtod_l+0x27a>
 800b5fa:	2a2d      	cmp	r2, #45	@ 0x2d
 800b5fc:	d07b      	beq.n	800b6f6 <_strtod_l+0x286>
 800b5fe:	f04f 0c00 	mov.w	ip, #0
 800b602:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b606:	2909      	cmp	r1, #9
 800b608:	f240 8082 	bls.w	800b710 <_strtod_l+0x2a0>
 800b60c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b60e:	f04f 0800 	mov.w	r8, #0
 800b612:	e0a2      	b.n	800b75a <_strtod_l+0x2ea>
 800b614:	2300      	movs	r3, #0
 800b616:	e7c7      	b.n	800b5a8 <_strtod_l+0x138>
 800b618:	2f08      	cmp	r7, #8
 800b61a:	bfd5      	itete	le
 800b61c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b61e:	9908      	ldrgt	r1, [sp, #32]
 800b620:	fb02 3301 	mlale	r3, r2, r1, r3
 800b624:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b628:	f100 0001 	add.w	r0, r0, #1
 800b62c:	bfd4      	ite	le
 800b62e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b630:	9308      	strgt	r3, [sp, #32]
 800b632:	3701      	adds	r7, #1
 800b634:	9019      	str	r0, [sp, #100]	@ 0x64
 800b636:	e7bf      	b.n	800b5b8 <_strtod_l+0x148>
 800b638:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b63a:	1c5a      	adds	r2, r3, #1
 800b63c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b63e:	785a      	ldrb	r2, [r3, #1]
 800b640:	b37f      	cbz	r7, 800b6a2 <_strtod_l+0x232>
 800b642:	4681      	mov	r9, r0
 800b644:	463d      	mov	r5, r7
 800b646:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b64a:	2b09      	cmp	r3, #9
 800b64c:	d912      	bls.n	800b674 <_strtod_l+0x204>
 800b64e:	2301      	movs	r3, #1
 800b650:	e7c4      	b.n	800b5dc <_strtod_l+0x16c>
 800b652:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	9219      	str	r2, [sp, #100]	@ 0x64
 800b658:	785a      	ldrb	r2, [r3, #1]
 800b65a:	3001      	adds	r0, #1
 800b65c:	2a30      	cmp	r2, #48	@ 0x30
 800b65e:	d0f8      	beq.n	800b652 <_strtod_l+0x1e2>
 800b660:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b664:	2b08      	cmp	r3, #8
 800b666:	f200 84d3 	bhi.w	800c010 <_strtod_l+0xba0>
 800b66a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b66c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b66e:	4681      	mov	r9, r0
 800b670:	2000      	movs	r0, #0
 800b672:	4605      	mov	r5, r0
 800b674:	3a30      	subs	r2, #48	@ 0x30
 800b676:	f100 0301 	add.w	r3, r0, #1
 800b67a:	d02a      	beq.n	800b6d2 <_strtod_l+0x262>
 800b67c:	4499      	add	r9, r3
 800b67e:	eb00 0c05 	add.w	ip, r0, r5
 800b682:	462b      	mov	r3, r5
 800b684:	210a      	movs	r1, #10
 800b686:	4563      	cmp	r3, ip
 800b688:	d10d      	bne.n	800b6a6 <_strtod_l+0x236>
 800b68a:	1c69      	adds	r1, r5, #1
 800b68c:	4401      	add	r1, r0
 800b68e:	4428      	add	r0, r5
 800b690:	2808      	cmp	r0, #8
 800b692:	dc16      	bgt.n	800b6c2 <_strtod_l+0x252>
 800b694:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b696:	230a      	movs	r3, #10
 800b698:	fb03 2300 	mla	r3, r3, r0, r2
 800b69c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b69e:	2300      	movs	r3, #0
 800b6a0:	e018      	b.n	800b6d4 <_strtod_l+0x264>
 800b6a2:	4638      	mov	r0, r7
 800b6a4:	e7da      	b.n	800b65c <_strtod_l+0x1ec>
 800b6a6:	2b08      	cmp	r3, #8
 800b6a8:	f103 0301 	add.w	r3, r3, #1
 800b6ac:	dc03      	bgt.n	800b6b6 <_strtod_l+0x246>
 800b6ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b6b0:	434e      	muls	r6, r1
 800b6b2:	960a      	str	r6, [sp, #40]	@ 0x28
 800b6b4:	e7e7      	b.n	800b686 <_strtod_l+0x216>
 800b6b6:	2b10      	cmp	r3, #16
 800b6b8:	bfde      	ittt	le
 800b6ba:	9e08      	ldrle	r6, [sp, #32]
 800b6bc:	434e      	mulle	r6, r1
 800b6be:	9608      	strle	r6, [sp, #32]
 800b6c0:	e7e1      	b.n	800b686 <_strtod_l+0x216>
 800b6c2:	280f      	cmp	r0, #15
 800b6c4:	dceb      	bgt.n	800b69e <_strtod_l+0x22e>
 800b6c6:	9808      	ldr	r0, [sp, #32]
 800b6c8:	230a      	movs	r3, #10
 800b6ca:	fb03 2300 	mla	r3, r3, r0, r2
 800b6ce:	9308      	str	r3, [sp, #32]
 800b6d0:	e7e5      	b.n	800b69e <_strtod_l+0x22e>
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6d6:	1c50      	adds	r0, r2, #1
 800b6d8:	9019      	str	r0, [sp, #100]	@ 0x64
 800b6da:	7852      	ldrb	r2, [r2, #1]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	460d      	mov	r5, r1
 800b6e0:	e7b1      	b.n	800b646 <_strtod_l+0x1d6>
 800b6e2:	f04f 0900 	mov.w	r9, #0
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e77d      	b.n	800b5e6 <_strtod_l+0x176>
 800b6ea:	f04f 0c00 	mov.w	ip, #0
 800b6ee:	1ca2      	adds	r2, r4, #2
 800b6f0:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6f2:	78a2      	ldrb	r2, [r4, #2]
 800b6f4:	e785      	b.n	800b602 <_strtod_l+0x192>
 800b6f6:	f04f 0c01 	mov.w	ip, #1
 800b6fa:	e7f8      	b.n	800b6ee <_strtod_l+0x27e>
 800b6fc:	08011f94 	.word	0x08011f94
 800b700:	08011f7c 	.word	0x08011f7c
 800b704:	7ff00000 	.word	0x7ff00000
 800b708:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b70a:	1c51      	adds	r1, r2, #1
 800b70c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b70e:	7852      	ldrb	r2, [r2, #1]
 800b710:	2a30      	cmp	r2, #48	@ 0x30
 800b712:	d0f9      	beq.n	800b708 <_strtod_l+0x298>
 800b714:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b718:	2908      	cmp	r1, #8
 800b71a:	f63f af78 	bhi.w	800b60e <_strtod_l+0x19e>
 800b71e:	3a30      	subs	r2, #48	@ 0x30
 800b720:	920e      	str	r2, [sp, #56]	@ 0x38
 800b722:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b724:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b726:	f04f 080a 	mov.w	r8, #10
 800b72a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b72c:	1c56      	adds	r6, r2, #1
 800b72e:	9619      	str	r6, [sp, #100]	@ 0x64
 800b730:	7852      	ldrb	r2, [r2, #1]
 800b732:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b736:	f1be 0f09 	cmp.w	lr, #9
 800b73a:	d939      	bls.n	800b7b0 <_strtod_l+0x340>
 800b73c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b73e:	1a76      	subs	r6, r6, r1
 800b740:	2e08      	cmp	r6, #8
 800b742:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b746:	dc03      	bgt.n	800b750 <_strtod_l+0x2e0>
 800b748:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b74a:	4588      	cmp	r8, r1
 800b74c:	bfa8      	it	ge
 800b74e:	4688      	movge	r8, r1
 800b750:	f1bc 0f00 	cmp.w	ip, #0
 800b754:	d001      	beq.n	800b75a <_strtod_l+0x2ea>
 800b756:	f1c8 0800 	rsb	r8, r8, #0
 800b75a:	2d00      	cmp	r5, #0
 800b75c:	d14e      	bne.n	800b7fc <_strtod_l+0x38c>
 800b75e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b760:	4308      	orrs	r0, r1
 800b762:	f47f aebe 	bne.w	800b4e2 <_strtod_l+0x72>
 800b766:	2b00      	cmp	r3, #0
 800b768:	f47f aed6 	bne.w	800b518 <_strtod_l+0xa8>
 800b76c:	2a69      	cmp	r2, #105	@ 0x69
 800b76e:	d028      	beq.n	800b7c2 <_strtod_l+0x352>
 800b770:	dc25      	bgt.n	800b7be <_strtod_l+0x34e>
 800b772:	2a49      	cmp	r2, #73	@ 0x49
 800b774:	d025      	beq.n	800b7c2 <_strtod_l+0x352>
 800b776:	2a4e      	cmp	r2, #78	@ 0x4e
 800b778:	f47f aece 	bne.w	800b518 <_strtod_l+0xa8>
 800b77c:	499b      	ldr	r1, [pc, #620]	@ (800b9ec <_strtod_l+0x57c>)
 800b77e:	a819      	add	r0, sp, #100	@ 0x64
 800b780:	f002 fece 	bl	800e520 <__match>
 800b784:	2800      	cmp	r0, #0
 800b786:	f43f aec7 	beq.w	800b518 <_strtod_l+0xa8>
 800b78a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	2b28      	cmp	r3, #40	@ 0x28
 800b790:	d12e      	bne.n	800b7f0 <_strtod_l+0x380>
 800b792:	4997      	ldr	r1, [pc, #604]	@ (800b9f0 <_strtod_l+0x580>)
 800b794:	aa1c      	add	r2, sp, #112	@ 0x70
 800b796:	a819      	add	r0, sp, #100	@ 0x64
 800b798:	f002 fed6 	bl	800e548 <__hexnan>
 800b79c:	2805      	cmp	r0, #5
 800b79e:	d127      	bne.n	800b7f0 <_strtod_l+0x380>
 800b7a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b7a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b7a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b7aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b7ae:	e698      	b.n	800b4e2 <_strtod_l+0x72>
 800b7b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b7b2:	fb08 2101 	mla	r1, r8, r1, r2
 800b7b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b7ba:	920e      	str	r2, [sp, #56]	@ 0x38
 800b7bc:	e7b5      	b.n	800b72a <_strtod_l+0x2ba>
 800b7be:	2a6e      	cmp	r2, #110	@ 0x6e
 800b7c0:	e7da      	b.n	800b778 <_strtod_l+0x308>
 800b7c2:	498c      	ldr	r1, [pc, #560]	@ (800b9f4 <_strtod_l+0x584>)
 800b7c4:	a819      	add	r0, sp, #100	@ 0x64
 800b7c6:	f002 feab 	bl	800e520 <__match>
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	f43f aea4 	beq.w	800b518 <_strtod_l+0xa8>
 800b7d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7d2:	4989      	ldr	r1, [pc, #548]	@ (800b9f8 <_strtod_l+0x588>)
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	a819      	add	r0, sp, #100	@ 0x64
 800b7d8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b7da:	f002 fea1 	bl	800e520 <__match>
 800b7de:	b910      	cbnz	r0, 800b7e6 <_strtod_l+0x376>
 800b7e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b7e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ba08 <_strtod_l+0x598>
 800b7ea:	f04f 0a00 	mov.w	sl, #0
 800b7ee:	e678      	b.n	800b4e2 <_strtod_l+0x72>
 800b7f0:	4882      	ldr	r0, [pc, #520]	@ (800b9fc <_strtod_l+0x58c>)
 800b7f2:	f001 fd49 	bl	800d288 <nan>
 800b7f6:	ec5b ab10 	vmov	sl, fp, d0
 800b7fa:	e672      	b.n	800b4e2 <_strtod_l+0x72>
 800b7fc:	eba8 0309 	sub.w	r3, r8, r9
 800b800:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b802:	9309      	str	r3, [sp, #36]	@ 0x24
 800b804:	2f00      	cmp	r7, #0
 800b806:	bf08      	it	eq
 800b808:	462f      	moveq	r7, r5
 800b80a:	2d10      	cmp	r5, #16
 800b80c:	462c      	mov	r4, r5
 800b80e:	bfa8      	it	ge
 800b810:	2410      	movge	r4, #16
 800b812:	f7f4 fe77 	bl	8000504 <__aeabi_ui2d>
 800b816:	2d09      	cmp	r5, #9
 800b818:	4682      	mov	sl, r0
 800b81a:	468b      	mov	fp, r1
 800b81c:	dc13      	bgt.n	800b846 <_strtod_l+0x3d6>
 800b81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b820:	2b00      	cmp	r3, #0
 800b822:	f43f ae5e 	beq.w	800b4e2 <_strtod_l+0x72>
 800b826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b828:	dd78      	ble.n	800b91c <_strtod_l+0x4ac>
 800b82a:	2b16      	cmp	r3, #22
 800b82c:	dc5f      	bgt.n	800b8ee <_strtod_l+0x47e>
 800b82e:	4974      	ldr	r1, [pc, #464]	@ (800ba00 <_strtod_l+0x590>)
 800b830:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b834:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b838:	4652      	mov	r2, sl
 800b83a:	465b      	mov	r3, fp
 800b83c:	f7f4 fedc 	bl	80005f8 <__aeabi_dmul>
 800b840:	4682      	mov	sl, r0
 800b842:	468b      	mov	fp, r1
 800b844:	e64d      	b.n	800b4e2 <_strtod_l+0x72>
 800b846:	4b6e      	ldr	r3, [pc, #440]	@ (800ba00 <_strtod_l+0x590>)
 800b848:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b84c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b850:	f7f4 fed2 	bl	80005f8 <__aeabi_dmul>
 800b854:	4682      	mov	sl, r0
 800b856:	9808      	ldr	r0, [sp, #32]
 800b858:	468b      	mov	fp, r1
 800b85a:	f7f4 fe53 	bl	8000504 <__aeabi_ui2d>
 800b85e:	4602      	mov	r2, r0
 800b860:	460b      	mov	r3, r1
 800b862:	4650      	mov	r0, sl
 800b864:	4659      	mov	r1, fp
 800b866:	f7f4 fd11 	bl	800028c <__adddf3>
 800b86a:	2d0f      	cmp	r5, #15
 800b86c:	4682      	mov	sl, r0
 800b86e:	468b      	mov	fp, r1
 800b870:	ddd5      	ble.n	800b81e <_strtod_l+0x3ae>
 800b872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b874:	1b2c      	subs	r4, r5, r4
 800b876:	441c      	add	r4, r3
 800b878:	2c00      	cmp	r4, #0
 800b87a:	f340 8096 	ble.w	800b9aa <_strtod_l+0x53a>
 800b87e:	f014 030f 	ands.w	r3, r4, #15
 800b882:	d00a      	beq.n	800b89a <_strtod_l+0x42a>
 800b884:	495e      	ldr	r1, [pc, #376]	@ (800ba00 <_strtod_l+0x590>)
 800b886:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b88a:	4652      	mov	r2, sl
 800b88c:	465b      	mov	r3, fp
 800b88e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b892:	f7f4 feb1 	bl	80005f8 <__aeabi_dmul>
 800b896:	4682      	mov	sl, r0
 800b898:	468b      	mov	fp, r1
 800b89a:	f034 040f 	bics.w	r4, r4, #15
 800b89e:	d073      	beq.n	800b988 <_strtod_l+0x518>
 800b8a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b8a4:	dd48      	ble.n	800b938 <_strtod_l+0x4c8>
 800b8a6:	2400      	movs	r4, #0
 800b8a8:	46a0      	mov	r8, r4
 800b8aa:	940a      	str	r4, [sp, #40]	@ 0x28
 800b8ac:	46a1      	mov	r9, r4
 800b8ae:	9a05      	ldr	r2, [sp, #20]
 800b8b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ba08 <_strtod_l+0x598>
 800b8b4:	2322      	movs	r3, #34	@ 0x22
 800b8b6:	6013      	str	r3, [r2, #0]
 800b8b8:	f04f 0a00 	mov.w	sl, #0
 800b8bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	f43f ae0f 	beq.w	800b4e2 <_strtod_l+0x72>
 800b8c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b8c6:	9805      	ldr	r0, [sp, #20]
 800b8c8:	f002 ffe2 	bl	800e890 <_Bfree>
 800b8cc:	9805      	ldr	r0, [sp, #20]
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	f002 ffde 	bl	800e890 <_Bfree>
 800b8d4:	9805      	ldr	r0, [sp, #20]
 800b8d6:	4641      	mov	r1, r8
 800b8d8:	f002 ffda 	bl	800e890 <_Bfree>
 800b8dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b8de:	9805      	ldr	r0, [sp, #20]
 800b8e0:	f002 ffd6 	bl	800e890 <_Bfree>
 800b8e4:	9805      	ldr	r0, [sp, #20]
 800b8e6:	4621      	mov	r1, r4
 800b8e8:	f002 ffd2 	bl	800e890 <_Bfree>
 800b8ec:	e5f9      	b.n	800b4e2 <_strtod_l+0x72>
 800b8ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	dbbc      	blt.n	800b872 <_strtod_l+0x402>
 800b8f8:	4c41      	ldr	r4, [pc, #260]	@ (800ba00 <_strtod_l+0x590>)
 800b8fa:	f1c5 050f 	rsb	r5, r5, #15
 800b8fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b902:	4652      	mov	r2, sl
 800b904:	465b      	mov	r3, fp
 800b906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b90a:	f7f4 fe75 	bl	80005f8 <__aeabi_dmul>
 800b90e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b910:	1b5d      	subs	r5, r3, r5
 800b912:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b916:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b91a:	e78f      	b.n	800b83c <_strtod_l+0x3cc>
 800b91c:	3316      	adds	r3, #22
 800b91e:	dba8      	blt.n	800b872 <_strtod_l+0x402>
 800b920:	4b37      	ldr	r3, [pc, #220]	@ (800ba00 <_strtod_l+0x590>)
 800b922:	eba9 0808 	sub.w	r8, r9, r8
 800b926:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b92a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b92e:	4650      	mov	r0, sl
 800b930:	4659      	mov	r1, fp
 800b932:	f7f4 ff8b 	bl	800084c <__aeabi_ddiv>
 800b936:	e783      	b.n	800b840 <_strtod_l+0x3d0>
 800b938:	4b32      	ldr	r3, [pc, #200]	@ (800ba04 <_strtod_l+0x594>)
 800b93a:	9308      	str	r3, [sp, #32]
 800b93c:	2300      	movs	r3, #0
 800b93e:	1124      	asrs	r4, r4, #4
 800b940:	4650      	mov	r0, sl
 800b942:	4659      	mov	r1, fp
 800b944:	461e      	mov	r6, r3
 800b946:	2c01      	cmp	r4, #1
 800b948:	dc21      	bgt.n	800b98e <_strtod_l+0x51e>
 800b94a:	b10b      	cbz	r3, 800b950 <_strtod_l+0x4e0>
 800b94c:	4682      	mov	sl, r0
 800b94e:	468b      	mov	fp, r1
 800b950:	492c      	ldr	r1, [pc, #176]	@ (800ba04 <_strtod_l+0x594>)
 800b952:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b956:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b95a:	4652      	mov	r2, sl
 800b95c:	465b      	mov	r3, fp
 800b95e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b962:	f7f4 fe49 	bl	80005f8 <__aeabi_dmul>
 800b966:	4b28      	ldr	r3, [pc, #160]	@ (800ba08 <_strtod_l+0x598>)
 800b968:	460a      	mov	r2, r1
 800b96a:	400b      	ands	r3, r1
 800b96c:	4927      	ldr	r1, [pc, #156]	@ (800ba0c <_strtod_l+0x59c>)
 800b96e:	428b      	cmp	r3, r1
 800b970:	4682      	mov	sl, r0
 800b972:	d898      	bhi.n	800b8a6 <_strtod_l+0x436>
 800b974:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b978:	428b      	cmp	r3, r1
 800b97a:	bf86      	itte	hi
 800b97c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ba10 <_strtod_l+0x5a0>
 800b980:	f04f 3aff 	movhi.w	sl, #4294967295
 800b984:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b988:	2300      	movs	r3, #0
 800b98a:	9308      	str	r3, [sp, #32]
 800b98c:	e07a      	b.n	800ba84 <_strtod_l+0x614>
 800b98e:	07e2      	lsls	r2, r4, #31
 800b990:	d505      	bpl.n	800b99e <_strtod_l+0x52e>
 800b992:	9b08      	ldr	r3, [sp, #32]
 800b994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b998:	f7f4 fe2e 	bl	80005f8 <__aeabi_dmul>
 800b99c:	2301      	movs	r3, #1
 800b99e:	9a08      	ldr	r2, [sp, #32]
 800b9a0:	3208      	adds	r2, #8
 800b9a2:	3601      	adds	r6, #1
 800b9a4:	1064      	asrs	r4, r4, #1
 800b9a6:	9208      	str	r2, [sp, #32]
 800b9a8:	e7cd      	b.n	800b946 <_strtod_l+0x4d6>
 800b9aa:	d0ed      	beq.n	800b988 <_strtod_l+0x518>
 800b9ac:	4264      	negs	r4, r4
 800b9ae:	f014 020f 	ands.w	r2, r4, #15
 800b9b2:	d00a      	beq.n	800b9ca <_strtod_l+0x55a>
 800b9b4:	4b12      	ldr	r3, [pc, #72]	@ (800ba00 <_strtod_l+0x590>)
 800b9b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9ba:	4650      	mov	r0, sl
 800b9bc:	4659      	mov	r1, fp
 800b9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c2:	f7f4 ff43 	bl	800084c <__aeabi_ddiv>
 800b9c6:	4682      	mov	sl, r0
 800b9c8:	468b      	mov	fp, r1
 800b9ca:	1124      	asrs	r4, r4, #4
 800b9cc:	d0dc      	beq.n	800b988 <_strtod_l+0x518>
 800b9ce:	2c1f      	cmp	r4, #31
 800b9d0:	dd20      	ble.n	800ba14 <_strtod_l+0x5a4>
 800b9d2:	2400      	movs	r4, #0
 800b9d4:	46a0      	mov	r8, r4
 800b9d6:	940a      	str	r4, [sp, #40]	@ 0x28
 800b9d8:	46a1      	mov	r9, r4
 800b9da:	9a05      	ldr	r2, [sp, #20]
 800b9dc:	2322      	movs	r3, #34	@ 0x22
 800b9de:	f04f 0a00 	mov.w	sl, #0
 800b9e2:	f04f 0b00 	mov.w	fp, #0
 800b9e6:	6013      	str	r3, [r2, #0]
 800b9e8:	e768      	b.n	800b8bc <_strtod_l+0x44c>
 800b9ea:	bf00      	nop
 800b9ec:	080120de 	.word	0x080120de
 800b9f0:	08011f80 	.word	0x08011f80
 800b9f4:	080120d6 	.word	0x080120d6
 800b9f8:	080121c2 	.word	0x080121c2
 800b9fc:	080121be 	.word	0x080121be
 800ba00:	08012328 	.word	0x08012328
 800ba04:	08012300 	.word	0x08012300
 800ba08:	7ff00000 	.word	0x7ff00000
 800ba0c:	7ca00000 	.word	0x7ca00000
 800ba10:	7fefffff 	.word	0x7fefffff
 800ba14:	f014 0310 	ands.w	r3, r4, #16
 800ba18:	bf18      	it	ne
 800ba1a:	236a      	movne	r3, #106	@ 0x6a
 800ba1c:	4ea9      	ldr	r6, [pc, #676]	@ (800bcc4 <_strtod_l+0x854>)
 800ba1e:	9308      	str	r3, [sp, #32]
 800ba20:	4650      	mov	r0, sl
 800ba22:	4659      	mov	r1, fp
 800ba24:	2300      	movs	r3, #0
 800ba26:	07e2      	lsls	r2, r4, #31
 800ba28:	d504      	bpl.n	800ba34 <_strtod_l+0x5c4>
 800ba2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba2e:	f7f4 fde3 	bl	80005f8 <__aeabi_dmul>
 800ba32:	2301      	movs	r3, #1
 800ba34:	1064      	asrs	r4, r4, #1
 800ba36:	f106 0608 	add.w	r6, r6, #8
 800ba3a:	d1f4      	bne.n	800ba26 <_strtod_l+0x5b6>
 800ba3c:	b10b      	cbz	r3, 800ba42 <_strtod_l+0x5d2>
 800ba3e:	4682      	mov	sl, r0
 800ba40:	468b      	mov	fp, r1
 800ba42:	9b08      	ldr	r3, [sp, #32]
 800ba44:	b1b3      	cbz	r3, 800ba74 <_strtod_l+0x604>
 800ba46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ba4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	4659      	mov	r1, fp
 800ba52:	dd0f      	ble.n	800ba74 <_strtod_l+0x604>
 800ba54:	2b1f      	cmp	r3, #31
 800ba56:	dd55      	ble.n	800bb04 <_strtod_l+0x694>
 800ba58:	2b34      	cmp	r3, #52	@ 0x34
 800ba5a:	bfde      	ittt	le
 800ba5c:	f04f 33ff 	movle.w	r3, #4294967295
 800ba60:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ba64:	4093      	lslle	r3, r2
 800ba66:	f04f 0a00 	mov.w	sl, #0
 800ba6a:	bfcc      	ite	gt
 800ba6c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ba70:	ea03 0b01 	andle.w	fp, r3, r1
 800ba74:	2200      	movs	r2, #0
 800ba76:	2300      	movs	r3, #0
 800ba78:	4650      	mov	r0, sl
 800ba7a:	4659      	mov	r1, fp
 800ba7c:	f7f5 f824 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	d1a6      	bne.n	800b9d2 <_strtod_l+0x562>
 800ba84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba8a:	9805      	ldr	r0, [sp, #20]
 800ba8c:	462b      	mov	r3, r5
 800ba8e:	463a      	mov	r2, r7
 800ba90:	f002 ff66 	bl	800e960 <__s2b>
 800ba94:	900a      	str	r0, [sp, #40]	@ 0x28
 800ba96:	2800      	cmp	r0, #0
 800ba98:	f43f af05 	beq.w	800b8a6 <_strtod_l+0x436>
 800ba9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba9e:	2a00      	cmp	r2, #0
 800baa0:	eba9 0308 	sub.w	r3, r9, r8
 800baa4:	bfa8      	it	ge
 800baa6:	2300      	movge	r3, #0
 800baa8:	9312      	str	r3, [sp, #72]	@ 0x48
 800baaa:	2400      	movs	r4, #0
 800baac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bab0:	9316      	str	r3, [sp, #88]	@ 0x58
 800bab2:	46a0      	mov	r8, r4
 800bab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bab6:	9805      	ldr	r0, [sp, #20]
 800bab8:	6859      	ldr	r1, [r3, #4]
 800baba:	f002 fea9 	bl	800e810 <_Balloc>
 800babe:	4681      	mov	r9, r0
 800bac0:	2800      	cmp	r0, #0
 800bac2:	f43f aef4 	beq.w	800b8ae <_strtod_l+0x43e>
 800bac6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bac8:	691a      	ldr	r2, [r3, #16]
 800baca:	3202      	adds	r2, #2
 800bacc:	f103 010c 	add.w	r1, r3, #12
 800bad0:	0092      	lsls	r2, r2, #2
 800bad2:	300c      	adds	r0, #12
 800bad4:	f001 fbc7 	bl	800d266 <memcpy>
 800bad8:	ec4b ab10 	vmov	d0, sl, fp
 800badc:	9805      	ldr	r0, [sp, #20]
 800bade:	aa1c      	add	r2, sp, #112	@ 0x70
 800bae0:	a91b      	add	r1, sp, #108	@ 0x6c
 800bae2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bae6:	f003 fa77 	bl	800efd8 <__d2b>
 800baea:	901a      	str	r0, [sp, #104]	@ 0x68
 800baec:	2800      	cmp	r0, #0
 800baee:	f43f aede 	beq.w	800b8ae <_strtod_l+0x43e>
 800baf2:	9805      	ldr	r0, [sp, #20]
 800baf4:	2101      	movs	r1, #1
 800baf6:	f002 ffc9 	bl	800ea8c <__i2b>
 800bafa:	4680      	mov	r8, r0
 800bafc:	b948      	cbnz	r0, 800bb12 <_strtod_l+0x6a2>
 800bafe:	f04f 0800 	mov.w	r8, #0
 800bb02:	e6d4      	b.n	800b8ae <_strtod_l+0x43e>
 800bb04:	f04f 32ff 	mov.w	r2, #4294967295
 800bb08:	fa02 f303 	lsl.w	r3, r2, r3
 800bb0c:	ea03 0a0a 	and.w	sl, r3, sl
 800bb10:	e7b0      	b.n	800ba74 <_strtod_l+0x604>
 800bb12:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bb14:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bb16:	2d00      	cmp	r5, #0
 800bb18:	bfab      	itete	ge
 800bb1a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bb1c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bb1e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bb20:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bb22:	bfac      	ite	ge
 800bb24:	18ef      	addge	r7, r5, r3
 800bb26:	1b5e      	sublt	r6, r3, r5
 800bb28:	9b08      	ldr	r3, [sp, #32]
 800bb2a:	1aed      	subs	r5, r5, r3
 800bb2c:	4415      	add	r5, r2
 800bb2e:	4b66      	ldr	r3, [pc, #408]	@ (800bcc8 <_strtod_l+0x858>)
 800bb30:	3d01      	subs	r5, #1
 800bb32:	429d      	cmp	r5, r3
 800bb34:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bb38:	da50      	bge.n	800bbdc <_strtod_l+0x76c>
 800bb3a:	1b5b      	subs	r3, r3, r5
 800bb3c:	2b1f      	cmp	r3, #31
 800bb3e:	eba2 0203 	sub.w	r2, r2, r3
 800bb42:	f04f 0101 	mov.w	r1, #1
 800bb46:	dc3d      	bgt.n	800bbc4 <_strtod_l+0x754>
 800bb48:	fa01 f303 	lsl.w	r3, r1, r3
 800bb4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb4e:	2300      	movs	r3, #0
 800bb50:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb52:	18bd      	adds	r5, r7, r2
 800bb54:	9b08      	ldr	r3, [sp, #32]
 800bb56:	42af      	cmp	r7, r5
 800bb58:	4416      	add	r6, r2
 800bb5a:	441e      	add	r6, r3
 800bb5c:	463b      	mov	r3, r7
 800bb5e:	bfa8      	it	ge
 800bb60:	462b      	movge	r3, r5
 800bb62:	42b3      	cmp	r3, r6
 800bb64:	bfa8      	it	ge
 800bb66:	4633      	movge	r3, r6
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	bfc2      	ittt	gt
 800bb6c:	1aed      	subgt	r5, r5, r3
 800bb6e:	1af6      	subgt	r6, r6, r3
 800bb70:	1aff      	subgt	r7, r7, r3
 800bb72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	dd16      	ble.n	800bba6 <_strtod_l+0x736>
 800bb78:	4641      	mov	r1, r8
 800bb7a:	9805      	ldr	r0, [sp, #20]
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	f003 f845 	bl	800ec0c <__pow5mult>
 800bb82:	4680      	mov	r8, r0
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d0ba      	beq.n	800bafe <_strtod_l+0x68e>
 800bb88:	4601      	mov	r1, r0
 800bb8a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bb8c:	9805      	ldr	r0, [sp, #20]
 800bb8e:	f002 ff93 	bl	800eab8 <__multiply>
 800bb92:	900e      	str	r0, [sp, #56]	@ 0x38
 800bb94:	2800      	cmp	r0, #0
 800bb96:	f43f ae8a 	beq.w	800b8ae <_strtod_l+0x43e>
 800bb9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb9c:	9805      	ldr	r0, [sp, #20]
 800bb9e:	f002 fe77 	bl	800e890 <_Bfree>
 800bba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bba4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bba6:	2d00      	cmp	r5, #0
 800bba8:	dc1d      	bgt.n	800bbe6 <_strtod_l+0x776>
 800bbaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	dd23      	ble.n	800bbf8 <_strtod_l+0x788>
 800bbb0:	4649      	mov	r1, r9
 800bbb2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bbb4:	9805      	ldr	r0, [sp, #20]
 800bbb6:	f003 f829 	bl	800ec0c <__pow5mult>
 800bbba:	4681      	mov	r9, r0
 800bbbc:	b9e0      	cbnz	r0, 800bbf8 <_strtod_l+0x788>
 800bbbe:	f04f 0900 	mov.w	r9, #0
 800bbc2:	e674      	b.n	800b8ae <_strtod_l+0x43e>
 800bbc4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bbc8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bbcc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bbd0:	35e2      	adds	r5, #226	@ 0xe2
 800bbd2:	fa01 f305 	lsl.w	r3, r1, r5
 800bbd6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bbd8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bbda:	e7ba      	b.n	800bb52 <_strtod_l+0x6e2>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	9310      	str	r3, [sp, #64]	@ 0x40
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bbe4:	e7b5      	b.n	800bb52 <_strtod_l+0x6e2>
 800bbe6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbe8:	9805      	ldr	r0, [sp, #20]
 800bbea:	462a      	mov	r2, r5
 800bbec:	f003 f868 	bl	800ecc0 <__lshift>
 800bbf0:	901a      	str	r0, [sp, #104]	@ 0x68
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	d1d9      	bne.n	800bbaa <_strtod_l+0x73a>
 800bbf6:	e65a      	b.n	800b8ae <_strtod_l+0x43e>
 800bbf8:	2e00      	cmp	r6, #0
 800bbfa:	dd07      	ble.n	800bc0c <_strtod_l+0x79c>
 800bbfc:	4649      	mov	r1, r9
 800bbfe:	9805      	ldr	r0, [sp, #20]
 800bc00:	4632      	mov	r2, r6
 800bc02:	f003 f85d 	bl	800ecc0 <__lshift>
 800bc06:	4681      	mov	r9, r0
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	d0d8      	beq.n	800bbbe <_strtod_l+0x74e>
 800bc0c:	2f00      	cmp	r7, #0
 800bc0e:	dd08      	ble.n	800bc22 <_strtod_l+0x7b2>
 800bc10:	4641      	mov	r1, r8
 800bc12:	9805      	ldr	r0, [sp, #20]
 800bc14:	463a      	mov	r2, r7
 800bc16:	f003 f853 	bl	800ecc0 <__lshift>
 800bc1a:	4680      	mov	r8, r0
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	f43f ae46 	beq.w	800b8ae <_strtod_l+0x43e>
 800bc22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc24:	9805      	ldr	r0, [sp, #20]
 800bc26:	464a      	mov	r2, r9
 800bc28:	f003 f8d2 	bl	800edd0 <__mdiff>
 800bc2c:	4604      	mov	r4, r0
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	f43f ae3d 	beq.w	800b8ae <_strtod_l+0x43e>
 800bc34:	68c3      	ldr	r3, [r0, #12]
 800bc36:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bc38:	2300      	movs	r3, #0
 800bc3a:	60c3      	str	r3, [r0, #12]
 800bc3c:	4641      	mov	r1, r8
 800bc3e:	f003 f8ab 	bl	800ed98 <__mcmp>
 800bc42:	2800      	cmp	r0, #0
 800bc44:	da46      	bge.n	800bcd4 <_strtod_l+0x864>
 800bc46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc48:	ea53 030a 	orrs.w	r3, r3, sl
 800bc4c:	d16c      	bne.n	800bd28 <_strtod_l+0x8b8>
 800bc4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d168      	bne.n	800bd28 <_strtod_l+0x8b8>
 800bc56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc5a:	0d1b      	lsrs	r3, r3, #20
 800bc5c:	051b      	lsls	r3, r3, #20
 800bc5e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc62:	d961      	bls.n	800bd28 <_strtod_l+0x8b8>
 800bc64:	6963      	ldr	r3, [r4, #20]
 800bc66:	b913      	cbnz	r3, 800bc6e <_strtod_l+0x7fe>
 800bc68:	6923      	ldr	r3, [r4, #16]
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	dd5c      	ble.n	800bd28 <_strtod_l+0x8b8>
 800bc6e:	4621      	mov	r1, r4
 800bc70:	2201      	movs	r2, #1
 800bc72:	9805      	ldr	r0, [sp, #20]
 800bc74:	f003 f824 	bl	800ecc0 <__lshift>
 800bc78:	4641      	mov	r1, r8
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	f003 f88c 	bl	800ed98 <__mcmp>
 800bc80:	2800      	cmp	r0, #0
 800bc82:	dd51      	ble.n	800bd28 <_strtod_l+0x8b8>
 800bc84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc88:	9a08      	ldr	r2, [sp, #32]
 800bc8a:	0d1b      	lsrs	r3, r3, #20
 800bc8c:	051b      	lsls	r3, r3, #20
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	d06b      	beq.n	800bd6a <_strtod_l+0x8fa>
 800bc92:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc96:	d868      	bhi.n	800bd6a <_strtod_l+0x8fa>
 800bc98:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bc9c:	f67f ae9d 	bls.w	800b9da <_strtod_l+0x56a>
 800bca0:	4b0a      	ldr	r3, [pc, #40]	@ (800bccc <_strtod_l+0x85c>)
 800bca2:	4650      	mov	r0, sl
 800bca4:	4659      	mov	r1, fp
 800bca6:	2200      	movs	r2, #0
 800bca8:	f7f4 fca6 	bl	80005f8 <__aeabi_dmul>
 800bcac:	4b08      	ldr	r3, [pc, #32]	@ (800bcd0 <_strtod_l+0x860>)
 800bcae:	400b      	ands	r3, r1
 800bcb0:	4682      	mov	sl, r0
 800bcb2:	468b      	mov	fp, r1
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f47f ae05 	bne.w	800b8c4 <_strtod_l+0x454>
 800bcba:	9a05      	ldr	r2, [sp, #20]
 800bcbc:	2322      	movs	r3, #34	@ 0x22
 800bcbe:	6013      	str	r3, [r2, #0]
 800bcc0:	e600      	b.n	800b8c4 <_strtod_l+0x454>
 800bcc2:	bf00      	nop
 800bcc4:	08011fa8 	.word	0x08011fa8
 800bcc8:	fffffc02 	.word	0xfffffc02
 800bccc:	39500000 	.word	0x39500000
 800bcd0:	7ff00000 	.word	0x7ff00000
 800bcd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bcd8:	d165      	bne.n	800bda6 <_strtod_l+0x936>
 800bcda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bcdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bce0:	b35a      	cbz	r2, 800bd3a <_strtod_l+0x8ca>
 800bce2:	4a9f      	ldr	r2, [pc, #636]	@ (800bf60 <_strtod_l+0xaf0>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d12b      	bne.n	800bd40 <_strtod_l+0x8d0>
 800bce8:	9b08      	ldr	r3, [sp, #32]
 800bcea:	4651      	mov	r1, sl
 800bcec:	b303      	cbz	r3, 800bd30 <_strtod_l+0x8c0>
 800bcee:	4b9d      	ldr	r3, [pc, #628]	@ (800bf64 <_strtod_l+0xaf4>)
 800bcf0:	465a      	mov	r2, fp
 800bcf2:	4013      	ands	r3, r2
 800bcf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bcf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcfc:	d81b      	bhi.n	800bd36 <_strtod_l+0x8c6>
 800bcfe:	0d1b      	lsrs	r3, r3, #20
 800bd00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bd04:	fa02 f303 	lsl.w	r3, r2, r3
 800bd08:	4299      	cmp	r1, r3
 800bd0a:	d119      	bne.n	800bd40 <_strtod_l+0x8d0>
 800bd0c:	4b96      	ldr	r3, [pc, #600]	@ (800bf68 <_strtod_l+0xaf8>)
 800bd0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d102      	bne.n	800bd1a <_strtod_l+0x8aa>
 800bd14:	3101      	adds	r1, #1
 800bd16:	f43f adca 	beq.w	800b8ae <_strtod_l+0x43e>
 800bd1a:	4b92      	ldr	r3, [pc, #584]	@ (800bf64 <_strtod_l+0xaf4>)
 800bd1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd1e:	401a      	ands	r2, r3
 800bd20:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bd24:	f04f 0a00 	mov.w	sl, #0
 800bd28:	9b08      	ldr	r3, [sp, #32]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1b8      	bne.n	800bca0 <_strtod_l+0x830>
 800bd2e:	e5c9      	b.n	800b8c4 <_strtod_l+0x454>
 800bd30:	f04f 33ff 	mov.w	r3, #4294967295
 800bd34:	e7e8      	b.n	800bd08 <_strtod_l+0x898>
 800bd36:	4613      	mov	r3, r2
 800bd38:	e7e6      	b.n	800bd08 <_strtod_l+0x898>
 800bd3a:	ea53 030a 	orrs.w	r3, r3, sl
 800bd3e:	d0a1      	beq.n	800bc84 <_strtod_l+0x814>
 800bd40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd42:	b1db      	cbz	r3, 800bd7c <_strtod_l+0x90c>
 800bd44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd46:	4213      	tst	r3, r2
 800bd48:	d0ee      	beq.n	800bd28 <_strtod_l+0x8b8>
 800bd4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd4c:	9a08      	ldr	r2, [sp, #32]
 800bd4e:	4650      	mov	r0, sl
 800bd50:	4659      	mov	r1, fp
 800bd52:	b1bb      	cbz	r3, 800bd84 <_strtod_l+0x914>
 800bd54:	f7ff fb6d 	bl	800b432 <sulp>
 800bd58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd5c:	ec53 2b10 	vmov	r2, r3, d0
 800bd60:	f7f4 fa94 	bl	800028c <__adddf3>
 800bd64:	4682      	mov	sl, r0
 800bd66:	468b      	mov	fp, r1
 800bd68:	e7de      	b.n	800bd28 <_strtod_l+0x8b8>
 800bd6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bd6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bd72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bd76:	f04f 3aff 	mov.w	sl, #4294967295
 800bd7a:	e7d5      	b.n	800bd28 <_strtod_l+0x8b8>
 800bd7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd7e:	ea13 0f0a 	tst.w	r3, sl
 800bd82:	e7e1      	b.n	800bd48 <_strtod_l+0x8d8>
 800bd84:	f7ff fb55 	bl	800b432 <sulp>
 800bd88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd8c:	ec53 2b10 	vmov	r2, r3, d0
 800bd90:	f7f4 fa7a 	bl	8000288 <__aeabi_dsub>
 800bd94:	2200      	movs	r2, #0
 800bd96:	2300      	movs	r3, #0
 800bd98:	4682      	mov	sl, r0
 800bd9a:	468b      	mov	fp, r1
 800bd9c:	f7f4 fe94 	bl	8000ac8 <__aeabi_dcmpeq>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d0c1      	beq.n	800bd28 <_strtod_l+0x8b8>
 800bda4:	e619      	b.n	800b9da <_strtod_l+0x56a>
 800bda6:	4641      	mov	r1, r8
 800bda8:	4620      	mov	r0, r4
 800bdaa:	f003 f96d 	bl	800f088 <__ratio>
 800bdae:	ec57 6b10 	vmov	r6, r7, d0
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bdb8:	4630      	mov	r0, r6
 800bdba:	4639      	mov	r1, r7
 800bdbc:	f7f4 fe98 	bl	8000af0 <__aeabi_dcmple>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d06f      	beq.n	800bea4 <_strtod_l+0xa34>
 800bdc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d17a      	bne.n	800bec0 <_strtod_l+0xa50>
 800bdca:	f1ba 0f00 	cmp.w	sl, #0
 800bdce:	d158      	bne.n	800be82 <_strtod_l+0xa12>
 800bdd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d15a      	bne.n	800be90 <_strtod_l+0xa20>
 800bdda:	4b64      	ldr	r3, [pc, #400]	@ (800bf6c <_strtod_l+0xafc>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	4630      	mov	r0, r6
 800bde0:	4639      	mov	r1, r7
 800bde2:	f7f4 fe7b 	bl	8000adc <__aeabi_dcmplt>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d159      	bne.n	800be9e <_strtod_l+0xa2e>
 800bdea:	4630      	mov	r0, r6
 800bdec:	4639      	mov	r1, r7
 800bdee:	4b60      	ldr	r3, [pc, #384]	@ (800bf70 <_strtod_l+0xb00>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f7f4 fc01 	bl	80005f8 <__aeabi_dmul>
 800bdf6:	4606      	mov	r6, r0
 800bdf8:	460f      	mov	r7, r1
 800bdfa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bdfe:	9606      	str	r6, [sp, #24]
 800be00:	9307      	str	r3, [sp, #28]
 800be02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be06:	4d57      	ldr	r5, [pc, #348]	@ (800bf64 <_strtod_l+0xaf4>)
 800be08:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800be0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be0e:	401d      	ands	r5, r3
 800be10:	4b58      	ldr	r3, [pc, #352]	@ (800bf74 <_strtod_l+0xb04>)
 800be12:	429d      	cmp	r5, r3
 800be14:	f040 80b2 	bne.w	800bf7c <_strtod_l+0xb0c>
 800be18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be1a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800be1e:	ec4b ab10 	vmov	d0, sl, fp
 800be22:	f003 f869 	bl	800eef8 <__ulp>
 800be26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be2a:	ec51 0b10 	vmov	r0, r1, d0
 800be2e:	f7f4 fbe3 	bl	80005f8 <__aeabi_dmul>
 800be32:	4652      	mov	r2, sl
 800be34:	465b      	mov	r3, fp
 800be36:	f7f4 fa29 	bl	800028c <__adddf3>
 800be3a:	460b      	mov	r3, r1
 800be3c:	4949      	ldr	r1, [pc, #292]	@ (800bf64 <_strtod_l+0xaf4>)
 800be3e:	4a4e      	ldr	r2, [pc, #312]	@ (800bf78 <_strtod_l+0xb08>)
 800be40:	4019      	ands	r1, r3
 800be42:	4291      	cmp	r1, r2
 800be44:	4682      	mov	sl, r0
 800be46:	d942      	bls.n	800bece <_strtod_l+0xa5e>
 800be48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be4a:	4b47      	ldr	r3, [pc, #284]	@ (800bf68 <_strtod_l+0xaf8>)
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d103      	bne.n	800be58 <_strtod_l+0x9e8>
 800be50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be52:	3301      	adds	r3, #1
 800be54:	f43f ad2b 	beq.w	800b8ae <_strtod_l+0x43e>
 800be58:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bf68 <_strtod_l+0xaf8>
 800be5c:	f04f 3aff 	mov.w	sl, #4294967295
 800be60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be62:	9805      	ldr	r0, [sp, #20]
 800be64:	f002 fd14 	bl	800e890 <_Bfree>
 800be68:	9805      	ldr	r0, [sp, #20]
 800be6a:	4649      	mov	r1, r9
 800be6c:	f002 fd10 	bl	800e890 <_Bfree>
 800be70:	9805      	ldr	r0, [sp, #20]
 800be72:	4641      	mov	r1, r8
 800be74:	f002 fd0c 	bl	800e890 <_Bfree>
 800be78:	9805      	ldr	r0, [sp, #20]
 800be7a:	4621      	mov	r1, r4
 800be7c:	f002 fd08 	bl	800e890 <_Bfree>
 800be80:	e618      	b.n	800bab4 <_strtod_l+0x644>
 800be82:	f1ba 0f01 	cmp.w	sl, #1
 800be86:	d103      	bne.n	800be90 <_strtod_l+0xa20>
 800be88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f43f ada5 	beq.w	800b9da <_strtod_l+0x56a>
 800be90:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bf40 <_strtod_l+0xad0>
 800be94:	4f35      	ldr	r7, [pc, #212]	@ (800bf6c <_strtod_l+0xafc>)
 800be96:	ed8d 7b06 	vstr	d7, [sp, #24]
 800be9a:	2600      	movs	r6, #0
 800be9c:	e7b1      	b.n	800be02 <_strtod_l+0x992>
 800be9e:	4f34      	ldr	r7, [pc, #208]	@ (800bf70 <_strtod_l+0xb00>)
 800bea0:	2600      	movs	r6, #0
 800bea2:	e7aa      	b.n	800bdfa <_strtod_l+0x98a>
 800bea4:	4b32      	ldr	r3, [pc, #200]	@ (800bf70 <_strtod_l+0xb00>)
 800bea6:	4630      	mov	r0, r6
 800bea8:	4639      	mov	r1, r7
 800beaa:	2200      	movs	r2, #0
 800beac:	f7f4 fba4 	bl	80005f8 <__aeabi_dmul>
 800beb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beb2:	4606      	mov	r6, r0
 800beb4:	460f      	mov	r7, r1
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d09f      	beq.n	800bdfa <_strtod_l+0x98a>
 800beba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bebe:	e7a0      	b.n	800be02 <_strtod_l+0x992>
 800bec0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bf48 <_strtod_l+0xad8>
 800bec4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bec8:	ec57 6b17 	vmov	r6, r7, d7
 800becc:	e799      	b.n	800be02 <_strtod_l+0x992>
 800bece:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bed2:	9b08      	ldr	r3, [sp, #32]
 800bed4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1c1      	bne.n	800be60 <_strtod_l+0x9f0>
 800bedc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bee0:	0d1b      	lsrs	r3, r3, #20
 800bee2:	051b      	lsls	r3, r3, #20
 800bee4:	429d      	cmp	r5, r3
 800bee6:	d1bb      	bne.n	800be60 <_strtod_l+0x9f0>
 800bee8:	4630      	mov	r0, r6
 800beea:	4639      	mov	r1, r7
 800beec:	f7f4 fee4 	bl	8000cb8 <__aeabi_d2lz>
 800bef0:	f7f4 fb54 	bl	800059c <__aeabi_l2d>
 800bef4:	4602      	mov	r2, r0
 800bef6:	460b      	mov	r3, r1
 800bef8:	4630      	mov	r0, r6
 800befa:	4639      	mov	r1, r7
 800befc:	f7f4 f9c4 	bl	8000288 <__aeabi_dsub>
 800bf00:	460b      	mov	r3, r1
 800bf02:	4602      	mov	r2, r0
 800bf04:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bf08:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bf0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf0e:	ea46 060a 	orr.w	r6, r6, sl
 800bf12:	431e      	orrs	r6, r3
 800bf14:	d06f      	beq.n	800bff6 <_strtod_l+0xb86>
 800bf16:	a30e      	add	r3, pc, #56	@ (adr r3, 800bf50 <_strtod_l+0xae0>)
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	f7f4 fdde 	bl	8000adc <__aeabi_dcmplt>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	f47f accf 	bne.w	800b8c4 <_strtod_l+0x454>
 800bf26:	a30c      	add	r3, pc, #48	@ (adr r3, 800bf58 <_strtod_l+0xae8>)
 800bf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf30:	f7f4 fdf2 	bl	8000b18 <__aeabi_dcmpgt>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	d093      	beq.n	800be60 <_strtod_l+0x9f0>
 800bf38:	e4c4      	b.n	800b8c4 <_strtod_l+0x454>
 800bf3a:	bf00      	nop
 800bf3c:	f3af 8000 	nop.w
 800bf40:	00000000 	.word	0x00000000
 800bf44:	bff00000 	.word	0xbff00000
 800bf48:	00000000 	.word	0x00000000
 800bf4c:	3ff00000 	.word	0x3ff00000
 800bf50:	94a03595 	.word	0x94a03595
 800bf54:	3fdfffff 	.word	0x3fdfffff
 800bf58:	35afe535 	.word	0x35afe535
 800bf5c:	3fe00000 	.word	0x3fe00000
 800bf60:	000fffff 	.word	0x000fffff
 800bf64:	7ff00000 	.word	0x7ff00000
 800bf68:	7fefffff 	.word	0x7fefffff
 800bf6c:	3ff00000 	.word	0x3ff00000
 800bf70:	3fe00000 	.word	0x3fe00000
 800bf74:	7fe00000 	.word	0x7fe00000
 800bf78:	7c9fffff 	.word	0x7c9fffff
 800bf7c:	9b08      	ldr	r3, [sp, #32]
 800bf7e:	b323      	cbz	r3, 800bfca <_strtod_l+0xb5a>
 800bf80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bf84:	d821      	bhi.n	800bfca <_strtod_l+0xb5a>
 800bf86:	a328      	add	r3, pc, #160	@ (adr r3, 800c028 <_strtod_l+0xbb8>)
 800bf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	4639      	mov	r1, r7
 800bf90:	f7f4 fdae 	bl	8000af0 <__aeabi_dcmple>
 800bf94:	b1a0      	cbz	r0, 800bfc0 <_strtod_l+0xb50>
 800bf96:	4639      	mov	r1, r7
 800bf98:	4630      	mov	r0, r6
 800bf9a:	f7f4 fe05 	bl	8000ba8 <__aeabi_d2uiz>
 800bf9e:	2801      	cmp	r0, #1
 800bfa0:	bf38      	it	cc
 800bfa2:	2001      	movcc	r0, #1
 800bfa4:	f7f4 faae 	bl	8000504 <__aeabi_ui2d>
 800bfa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfaa:	4606      	mov	r6, r0
 800bfac:	460f      	mov	r7, r1
 800bfae:	b9fb      	cbnz	r3, 800bff0 <_strtod_l+0xb80>
 800bfb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bfb4:	9014      	str	r0, [sp, #80]	@ 0x50
 800bfb6:	9315      	str	r3, [sp, #84]	@ 0x54
 800bfb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bfbc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bfc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bfc2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bfc6:	1b5b      	subs	r3, r3, r5
 800bfc8:	9311      	str	r3, [sp, #68]	@ 0x44
 800bfca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bfce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bfd2:	f002 ff91 	bl	800eef8 <__ulp>
 800bfd6:	4650      	mov	r0, sl
 800bfd8:	ec53 2b10 	vmov	r2, r3, d0
 800bfdc:	4659      	mov	r1, fp
 800bfde:	f7f4 fb0b 	bl	80005f8 <__aeabi_dmul>
 800bfe2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bfe6:	f7f4 f951 	bl	800028c <__adddf3>
 800bfea:	4682      	mov	sl, r0
 800bfec:	468b      	mov	fp, r1
 800bfee:	e770      	b.n	800bed2 <_strtod_l+0xa62>
 800bff0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bff4:	e7e0      	b.n	800bfb8 <_strtod_l+0xb48>
 800bff6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c030 <_strtod_l+0xbc0>)
 800bff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffc:	f7f4 fd6e 	bl	8000adc <__aeabi_dcmplt>
 800c000:	e798      	b.n	800bf34 <_strtod_l+0xac4>
 800c002:	2300      	movs	r3, #0
 800c004:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c006:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c008:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c00a:	6013      	str	r3, [r2, #0]
 800c00c:	f7ff ba6d 	b.w	800b4ea <_strtod_l+0x7a>
 800c010:	2a65      	cmp	r2, #101	@ 0x65
 800c012:	f43f ab66 	beq.w	800b6e2 <_strtod_l+0x272>
 800c016:	2a45      	cmp	r2, #69	@ 0x45
 800c018:	f43f ab63 	beq.w	800b6e2 <_strtod_l+0x272>
 800c01c:	2301      	movs	r3, #1
 800c01e:	f7ff bb9e 	b.w	800b75e <_strtod_l+0x2ee>
 800c022:	bf00      	nop
 800c024:	f3af 8000 	nop.w
 800c028:	ffc00000 	.word	0xffc00000
 800c02c:	41dfffff 	.word	0x41dfffff
 800c030:	94a03595 	.word	0x94a03595
 800c034:	3fcfffff 	.word	0x3fcfffff

0800c038 <_strtod_r>:
 800c038:	4b01      	ldr	r3, [pc, #4]	@ (800c040 <_strtod_r+0x8>)
 800c03a:	f7ff ba19 	b.w	800b470 <_strtod_l>
 800c03e:	bf00      	nop
 800c040:	200000e4 	.word	0x200000e4

0800c044 <strtod>:
 800c044:	460a      	mov	r2, r1
 800c046:	4601      	mov	r1, r0
 800c048:	4802      	ldr	r0, [pc, #8]	@ (800c054 <strtod+0x10>)
 800c04a:	4b03      	ldr	r3, [pc, #12]	@ (800c058 <strtod+0x14>)
 800c04c:	6800      	ldr	r0, [r0, #0]
 800c04e:	f7ff ba0f 	b.w	800b470 <_strtod_l>
 800c052:	bf00      	nop
 800c054:	20000250 	.word	0x20000250
 800c058:	200000e4 	.word	0x200000e4

0800c05c <_strtol_l.constprop.0>:
 800c05c:	2b24      	cmp	r3, #36	@ 0x24
 800c05e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c062:	4686      	mov	lr, r0
 800c064:	4690      	mov	r8, r2
 800c066:	d801      	bhi.n	800c06c <_strtol_l.constprop.0+0x10>
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d106      	bne.n	800c07a <_strtol_l.constprop.0+0x1e>
 800c06c:	f001 f8ce 	bl	800d20c <__errno>
 800c070:	2316      	movs	r3, #22
 800c072:	6003      	str	r3, [r0, #0]
 800c074:	2000      	movs	r0, #0
 800c076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c07a:	4834      	ldr	r0, [pc, #208]	@ (800c14c <_strtol_l.constprop.0+0xf0>)
 800c07c:	460d      	mov	r5, r1
 800c07e:	462a      	mov	r2, r5
 800c080:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c084:	5d06      	ldrb	r6, [r0, r4]
 800c086:	f016 0608 	ands.w	r6, r6, #8
 800c08a:	d1f8      	bne.n	800c07e <_strtol_l.constprop.0+0x22>
 800c08c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c08e:	d12d      	bne.n	800c0ec <_strtol_l.constprop.0+0x90>
 800c090:	782c      	ldrb	r4, [r5, #0]
 800c092:	2601      	movs	r6, #1
 800c094:	1c95      	adds	r5, r2, #2
 800c096:	f033 0210 	bics.w	r2, r3, #16
 800c09a:	d109      	bne.n	800c0b0 <_strtol_l.constprop.0+0x54>
 800c09c:	2c30      	cmp	r4, #48	@ 0x30
 800c09e:	d12a      	bne.n	800c0f6 <_strtol_l.constprop.0+0x9a>
 800c0a0:	782a      	ldrb	r2, [r5, #0]
 800c0a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c0a6:	2a58      	cmp	r2, #88	@ 0x58
 800c0a8:	d125      	bne.n	800c0f6 <_strtol_l.constprop.0+0x9a>
 800c0aa:	786c      	ldrb	r4, [r5, #1]
 800c0ac:	2310      	movs	r3, #16
 800c0ae:	3502      	adds	r5, #2
 800c0b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c0b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	fbbc f9f3 	udiv	r9, ip, r3
 800c0be:	4610      	mov	r0, r2
 800c0c0:	fb03 ca19 	mls	sl, r3, r9, ip
 800c0c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c0c8:	2f09      	cmp	r7, #9
 800c0ca:	d81b      	bhi.n	800c104 <_strtol_l.constprop.0+0xa8>
 800c0cc:	463c      	mov	r4, r7
 800c0ce:	42a3      	cmp	r3, r4
 800c0d0:	dd27      	ble.n	800c122 <_strtol_l.constprop.0+0xc6>
 800c0d2:	1c57      	adds	r7, r2, #1
 800c0d4:	d007      	beq.n	800c0e6 <_strtol_l.constprop.0+0x8a>
 800c0d6:	4581      	cmp	r9, r0
 800c0d8:	d320      	bcc.n	800c11c <_strtol_l.constprop.0+0xc0>
 800c0da:	d101      	bne.n	800c0e0 <_strtol_l.constprop.0+0x84>
 800c0dc:	45a2      	cmp	sl, r4
 800c0de:	db1d      	blt.n	800c11c <_strtol_l.constprop.0+0xc0>
 800c0e0:	fb00 4003 	mla	r0, r0, r3, r4
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0ea:	e7eb      	b.n	800c0c4 <_strtol_l.constprop.0+0x68>
 800c0ec:	2c2b      	cmp	r4, #43	@ 0x2b
 800c0ee:	bf04      	itt	eq
 800c0f0:	782c      	ldrbeq	r4, [r5, #0]
 800c0f2:	1c95      	addeq	r5, r2, #2
 800c0f4:	e7cf      	b.n	800c096 <_strtol_l.constprop.0+0x3a>
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1da      	bne.n	800c0b0 <_strtol_l.constprop.0+0x54>
 800c0fa:	2c30      	cmp	r4, #48	@ 0x30
 800c0fc:	bf0c      	ite	eq
 800c0fe:	2308      	moveq	r3, #8
 800c100:	230a      	movne	r3, #10
 800c102:	e7d5      	b.n	800c0b0 <_strtol_l.constprop.0+0x54>
 800c104:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c108:	2f19      	cmp	r7, #25
 800c10a:	d801      	bhi.n	800c110 <_strtol_l.constprop.0+0xb4>
 800c10c:	3c37      	subs	r4, #55	@ 0x37
 800c10e:	e7de      	b.n	800c0ce <_strtol_l.constprop.0+0x72>
 800c110:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c114:	2f19      	cmp	r7, #25
 800c116:	d804      	bhi.n	800c122 <_strtol_l.constprop.0+0xc6>
 800c118:	3c57      	subs	r4, #87	@ 0x57
 800c11a:	e7d8      	b.n	800c0ce <_strtol_l.constprop.0+0x72>
 800c11c:	f04f 32ff 	mov.w	r2, #4294967295
 800c120:	e7e1      	b.n	800c0e6 <_strtol_l.constprop.0+0x8a>
 800c122:	1c53      	adds	r3, r2, #1
 800c124:	d108      	bne.n	800c138 <_strtol_l.constprop.0+0xdc>
 800c126:	2322      	movs	r3, #34	@ 0x22
 800c128:	f8ce 3000 	str.w	r3, [lr]
 800c12c:	4660      	mov	r0, ip
 800c12e:	f1b8 0f00 	cmp.w	r8, #0
 800c132:	d0a0      	beq.n	800c076 <_strtol_l.constprop.0+0x1a>
 800c134:	1e69      	subs	r1, r5, #1
 800c136:	e006      	b.n	800c146 <_strtol_l.constprop.0+0xea>
 800c138:	b106      	cbz	r6, 800c13c <_strtol_l.constprop.0+0xe0>
 800c13a:	4240      	negs	r0, r0
 800c13c:	f1b8 0f00 	cmp.w	r8, #0
 800c140:	d099      	beq.n	800c076 <_strtol_l.constprop.0+0x1a>
 800c142:	2a00      	cmp	r2, #0
 800c144:	d1f6      	bne.n	800c134 <_strtol_l.constprop.0+0xd8>
 800c146:	f8c8 1000 	str.w	r1, [r8]
 800c14a:	e794      	b.n	800c076 <_strtol_l.constprop.0+0x1a>
 800c14c:	08011fd1 	.word	0x08011fd1

0800c150 <_strtol_r>:
 800c150:	f7ff bf84 	b.w	800c05c <_strtol_l.constprop.0>

0800c154 <strtol>:
 800c154:	4613      	mov	r3, r2
 800c156:	460a      	mov	r2, r1
 800c158:	4601      	mov	r1, r0
 800c15a:	4802      	ldr	r0, [pc, #8]	@ (800c164 <strtol+0x10>)
 800c15c:	6800      	ldr	r0, [r0, #0]
 800c15e:	f7ff bf7d 	b.w	800c05c <_strtol_l.constprop.0>
 800c162:	bf00      	nop
 800c164:	20000250 	.word	0x20000250

0800c168 <__cvt>:
 800c168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c16c:	ec57 6b10 	vmov	r6, r7, d0
 800c170:	2f00      	cmp	r7, #0
 800c172:	460c      	mov	r4, r1
 800c174:	4619      	mov	r1, r3
 800c176:	463b      	mov	r3, r7
 800c178:	bfbb      	ittet	lt
 800c17a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c17e:	461f      	movlt	r7, r3
 800c180:	2300      	movge	r3, #0
 800c182:	232d      	movlt	r3, #45	@ 0x2d
 800c184:	700b      	strb	r3, [r1, #0]
 800c186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c188:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c18c:	4691      	mov	r9, r2
 800c18e:	f023 0820 	bic.w	r8, r3, #32
 800c192:	bfbc      	itt	lt
 800c194:	4632      	movlt	r2, r6
 800c196:	4616      	movlt	r6, r2
 800c198:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c19c:	d005      	beq.n	800c1aa <__cvt+0x42>
 800c19e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c1a2:	d100      	bne.n	800c1a6 <__cvt+0x3e>
 800c1a4:	3401      	adds	r4, #1
 800c1a6:	2102      	movs	r1, #2
 800c1a8:	e000      	b.n	800c1ac <__cvt+0x44>
 800c1aa:	2103      	movs	r1, #3
 800c1ac:	ab03      	add	r3, sp, #12
 800c1ae:	9301      	str	r3, [sp, #4]
 800c1b0:	ab02      	add	r3, sp, #8
 800c1b2:	9300      	str	r3, [sp, #0]
 800c1b4:	ec47 6b10 	vmov	d0, r6, r7
 800c1b8:	4653      	mov	r3, sl
 800c1ba:	4622      	mov	r2, r4
 800c1bc:	f001 f918 	bl	800d3f0 <_dtoa_r>
 800c1c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c1c4:	4605      	mov	r5, r0
 800c1c6:	d119      	bne.n	800c1fc <__cvt+0x94>
 800c1c8:	f019 0f01 	tst.w	r9, #1
 800c1cc:	d00e      	beq.n	800c1ec <__cvt+0x84>
 800c1ce:	eb00 0904 	add.w	r9, r0, r4
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	4639      	mov	r1, r7
 800c1da:	f7f4 fc75 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1de:	b108      	cbz	r0, 800c1e4 <__cvt+0x7c>
 800c1e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c1e4:	2230      	movs	r2, #48	@ 0x30
 800c1e6:	9b03      	ldr	r3, [sp, #12]
 800c1e8:	454b      	cmp	r3, r9
 800c1ea:	d31e      	bcc.n	800c22a <__cvt+0xc2>
 800c1ec:	9b03      	ldr	r3, [sp, #12]
 800c1ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1f0:	1b5b      	subs	r3, r3, r5
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	6013      	str	r3, [r2, #0]
 800c1f6:	b004      	add	sp, #16
 800c1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c200:	eb00 0904 	add.w	r9, r0, r4
 800c204:	d1e5      	bne.n	800c1d2 <__cvt+0x6a>
 800c206:	7803      	ldrb	r3, [r0, #0]
 800c208:	2b30      	cmp	r3, #48	@ 0x30
 800c20a:	d10a      	bne.n	800c222 <__cvt+0xba>
 800c20c:	2200      	movs	r2, #0
 800c20e:	2300      	movs	r3, #0
 800c210:	4630      	mov	r0, r6
 800c212:	4639      	mov	r1, r7
 800c214:	f7f4 fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 800c218:	b918      	cbnz	r0, 800c222 <__cvt+0xba>
 800c21a:	f1c4 0401 	rsb	r4, r4, #1
 800c21e:	f8ca 4000 	str.w	r4, [sl]
 800c222:	f8da 3000 	ldr.w	r3, [sl]
 800c226:	4499      	add	r9, r3
 800c228:	e7d3      	b.n	800c1d2 <__cvt+0x6a>
 800c22a:	1c59      	adds	r1, r3, #1
 800c22c:	9103      	str	r1, [sp, #12]
 800c22e:	701a      	strb	r2, [r3, #0]
 800c230:	e7d9      	b.n	800c1e6 <__cvt+0x7e>

0800c232 <__exponent>:
 800c232:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c234:	2900      	cmp	r1, #0
 800c236:	bfba      	itte	lt
 800c238:	4249      	neglt	r1, r1
 800c23a:	232d      	movlt	r3, #45	@ 0x2d
 800c23c:	232b      	movge	r3, #43	@ 0x2b
 800c23e:	2909      	cmp	r1, #9
 800c240:	7002      	strb	r2, [r0, #0]
 800c242:	7043      	strb	r3, [r0, #1]
 800c244:	dd29      	ble.n	800c29a <__exponent+0x68>
 800c246:	f10d 0307 	add.w	r3, sp, #7
 800c24a:	461d      	mov	r5, r3
 800c24c:	270a      	movs	r7, #10
 800c24e:	461a      	mov	r2, r3
 800c250:	fbb1 f6f7 	udiv	r6, r1, r7
 800c254:	fb07 1416 	mls	r4, r7, r6, r1
 800c258:	3430      	adds	r4, #48	@ 0x30
 800c25a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c25e:	460c      	mov	r4, r1
 800c260:	2c63      	cmp	r4, #99	@ 0x63
 800c262:	f103 33ff 	add.w	r3, r3, #4294967295
 800c266:	4631      	mov	r1, r6
 800c268:	dcf1      	bgt.n	800c24e <__exponent+0x1c>
 800c26a:	3130      	adds	r1, #48	@ 0x30
 800c26c:	1e94      	subs	r4, r2, #2
 800c26e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c272:	1c41      	adds	r1, r0, #1
 800c274:	4623      	mov	r3, r4
 800c276:	42ab      	cmp	r3, r5
 800c278:	d30a      	bcc.n	800c290 <__exponent+0x5e>
 800c27a:	f10d 0309 	add.w	r3, sp, #9
 800c27e:	1a9b      	subs	r3, r3, r2
 800c280:	42ac      	cmp	r4, r5
 800c282:	bf88      	it	hi
 800c284:	2300      	movhi	r3, #0
 800c286:	3302      	adds	r3, #2
 800c288:	4403      	add	r3, r0
 800c28a:	1a18      	subs	r0, r3, r0
 800c28c:	b003      	add	sp, #12
 800c28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c290:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c294:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c298:	e7ed      	b.n	800c276 <__exponent+0x44>
 800c29a:	2330      	movs	r3, #48	@ 0x30
 800c29c:	3130      	adds	r1, #48	@ 0x30
 800c29e:	7083      	strb	r3, [r0, #2]
 800c2a0:	70c1      	strb	r1, [r0, #3]
 800c2a2:	1d03      	adds	r3, r0, #4
 800c2a4:	e7f1      	b.n	800c28a <__exponent+0x58>
	...

0800c2a8 <_printf_float>:
 800c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	b08d      	sub	sp, #52	@ 0x34
 800c2ae:	460c      	mov	r4, r1
 800c2b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c2b4:	4616      	mov	r6, r2
 800c2b6:	461f      	mov	r7, r3
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	f000 ff5d 	bl	800d178 <_localeconv_r>
 800c2be:	6803      	ldr	r3, [r0, #0]
 800c2c0:	9304      	str	r3, [sp, #16]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7f3 ffd4 	bl	8000270 <strlen>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2cc:	f8d8 3000 	ldr.w	r3, [r8]
 800c2d0:	9005      	str	r0, [sp, #20]
 800c2d2:	3307      	adds	r3, #7
 800c2d4:	f023 0307 	bic.w	r3, r3, #7
 800c2d8:	f103 0208 	add.w	r2, r3, #8
 800c2dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c2e0:	f8d4 b000 	ldr.w	fp, [r4]
 800c2e4:	f8c8 2000 	str.w	r2, [r8]
 800c2e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c2f0:	9307      	str	r3, [sp, #28]
 800c2f2:	f8cd 8018 	str.w	r8, [sp, #24]
 800c2f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c2fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2fe:	4b9c      	ldr	r3, [pc, #624]	@ (800c570 <_printf_float+0x2c8>)
 800c300:	f04f 32ff 	mov.w	r2, #4294967295
 800c304:	f7f4 fc12 	bl	8000b2c <__aeabi_dcmpun>
 800c308:	bb70      	cbnz	r0, 800c368 <_printf_float+0xc0>
 800c30a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c30e:	4b98      	ldr	r3, [pc, #608]	@ (800c570 <_printf_float+0x2c8>)
 800c310:	f04f 32ff 	mov.w	r2, #4294967295
 800c314:	f7f4 fbec 	bl	8000af0 <__aeabi_dcmple>
 800c318:	bb30      	cbnz	r0, 800c368 <_printf_float+0xc0>
 800c31a:	2200      	movs	r2, #0
 800c31c:	2300      	movs	r3, #0
 800c31e:	4640      	mov	r0, r8
 800c320:	4649      	mov	r1, r9
 800c322:	f7f4 fbdb 	bl	8000adc <__aeabi_dcmplt>
 800c326:	b110      	cbz	r0, 800c32e <_printf_float+0x86>
 800c328:	232d      	movs	r3, #45	@ 0x2d
 800c32a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c32e:	4a91      	ldr	r2, [pc, #580]	@ (800c574 <_printf_float+0x2cc>)
 800c330:	4b91      	ldr	r3, [pc, #580]	@ (800c578 <_printf_float+0x2d0>)
 800c332:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c336:	bf94      	ite	ls
 800c338:	4690      	movls	r8, r2
 800c33a:	4698      	movhi	r8, r3
 800c33c:	2303      	movs	r3, #3
 800c33e:	6123      	str	r3, [r4, #16]
 800c340:	f02b 0304 	bic.w	r3, fp, #4
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	f04f 0900 	mov.w	r9, #0
 800c34a:	9700      	str	r7, [sp, #0]
 800c34c:	4633      	mov	r3, r6
 800c34e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c350:	4621      	mov	r1, r4
 800c352:	4628      	mov	r0, r5
 800c354:	f000 f9d2 	bl	800c6fc <_printf_common>
 800c358:	3001      	adds	r0, #1
 800c35a:	f040 808d 	bne.w	800c478 <_printf_float+0x1d0>
 800c35e:	f04f 30ff 	mov.w	r0, #4294967295
 800c362:	b00d      	add	sp, #52	@ 0x34
 800c364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c368:	4642      	mov	r2, r8
 800c36a:	464b      	mov	r3, r9
 800c36c:	4640      	mov	r0, r8
 800c36e:	4649      	mov	r1, r9
 800c370:	f7f4 fbdc 	bl	8000b2c <__aeabi_dcmpun>
 800c374:	b140      	cbz	r0, 800c388 <_printf_float+0xe0>
 800c376:	464b      	mov	r3, r9
 800c378:	2b00      	cmp	r3, #0
 800c37a:	bfbc      	itt	lt
 800c37c:	232d      	movlt	r3, #45	@ 0x2d
 800c37e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c382:	4a7e      	ldr	r2, [pc, #504]	@ (800c57c <_printf_float+0x2d4>)
 800c384:	4b7e      	ldr	r3, [pc, #504]	@ (800c580 <_printf_float+0x2d8>)
 800c386:	e7d4      	b.n	800c332 <_printf_float+0x8a>
 800c388:	6863      	ldr	r3, [r4, #4]
 800c38a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c38e:	9206      	str	r2, [sp, #24]
 800c390:	1c5a      	adds	r2, r3, #1
 800c392:	d13b      	bne.n	800c40c <_printf_float+0x164>
 800c394:	2306      	movs	r3, #6
 800c396:	6063      	str	r3, [r4, #4]
 800c398:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c39c:	2300      	movs	r3, #0
 800c39e:	6022      	str	r2, [r4, #0]
 800c3a0:	9303      	str	r3, [sp, #12]
 800c3a2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c3a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c3a8:	ab09      	add	r3, sp, #36	@ 0x24
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	6861      	ldr	r1, [r4, #4]
 800c3ae:	ec49 8b10 	vmov	d0, r8, r9
 800c3b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f7ff fed6 	bl	800c168 <__cvt>
 800c3bc:	9b06      	ldr	r3, [sp, #24]
 800c3be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3c0:	2b47      	cmp	r3, #71	@ 0x47
 800c3c2:	4680      	mov	r8, r0
 800c3c4:	d129      	bne.n	800c41a <_printf_float+0x172>
 800c3c6:	1cc8      	adds	r0, r1, #3
 800c3c8:	db02      	blt.n	800c3d0 <_printf_float+0x128>
 800c3ca:	6863      	ldr	r3, [r4, #4]
 800c3cc:	4299      	cmp	r1, r3
 800c3ce:	dd41      	ble.n	800c454 <_printf_float+0x1ac>
 800c3d0:	f1aa 0a02 	sub.w	sl, sl, #2
 800c3d4:	fa5f fa8a 	uxtb.w	sl, sl
 800c3d8:	3901      	subs	r1, #1
 800c3da:	4652      	mov	r2, sl
 800c3dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c3e0:	9109      	str	r1, [sp, #36]	@ 0x24
 800c3e2:	f7ff ff26 	bl	800c232 <__exponent>
 800c3e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3e8:	1813      	adds	r3, r2, r0
 800c3ea:	2a01      	cmp	r2, #1
 800c3ec:	4681      	mov	r9, r0
 800c3ee:	6123      	str	r3, [r4, #16]
 800c3f0:	dc02      	bgt.n	800c3f8 <_printf_float+0x150>
 800c3f2:	6822      	ldr	r2, [r4, #0]
 800c3f4:	07d2      	lsls	r2, r2, #31
 800c3f6:	d501      	bpl.n	800c3fc <_printf_float+0x154>
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	6123      	str	r3, [r4, #16]
 800c3fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c400:	2b00      	cmp	r3, #0
 800c402:	d0a2      	beq.n	800c34a <_printf_float+0xa2>
 800c404:	232d      	movs	r3, #45	@ 0x2d
 800c406:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c40a:	e79e      	b.n	800c34a <_printf_float+0xa2>
 800c40c:	9a06      	ldr	r2, [sp, #24]
 800c40e:	2a47      	cmp	r2, #71	@ 0x47
 800c410:	d1c2      	bne.n	800c398 <_printf_float+0xf0>
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1c0      	bne.n	800c398 <_printf_float+0xf0>
 800c416:	2301      	movs	r3, #1
 800c418:	e7bd      	b.n	800c396 <_printf_float+0xee>
 800c41a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c41e:	d9db      	bls.n	800c3d8 <_printf_float+0x130>
 800c420:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c424:	d118      	bne.n	800c458 <_printf_float+0x1b0>
 800c426:	2900      	cmp	r1, #0
 800c428:	6863      	ldr	r3, [r4, #4]
 800c42a:	dd0b      	ble.n	800c444 <_printf_float+0x19c>
 800c42c:	6121      	str	r1, [r4, #16]
 800c42e:	b913      	cbnz	r3, 800c436 <_printf_float+0x18e>
 800c430:	6822      	ldr	r2, [r4, #0]
 800c432:	07d0      	lsls	r0, r2, #31
 800c434:	d502      	bpl.n	800c43c <_printf_float+0x194>
 800c436:	3301      	adds	r3, #1
 800c438:	440b      	add	r3, r1
 800c43a:	6123      	str	r3, [r4, #16]
 800c43c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c43e:	f04f 0900 	mov.w	r9, #0
 800c442:	e7db      	b.n	800c3fc <_printf_float+0x154>
 800c444:	b913      	cbnz	r3, 800c44c <_printf_float+0x1a4>
 800c446:	6822      	ldr	r2, [r4, #0]
 800c448:	07d2      	lsls	r2, r2, #31
 800c44a:	d501      	bpl.n	800c450 <_printf_float+0x1a8>
 800c44c:	3302      	adds	r3, #2
 800c44e:	e7f4      	b.n	800c43a <_printf_float+0x192>
 800c450:	2301      	movs	r3, #1
 800c452:	e7f2      	b.n	800c43a <_printf_float+0x192>
 800c454:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c45a:	4299      	cmp	r1, r3
 800c45c:	db05      	blt.n	800c46a <_printf_float+0x1c2>
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	6121      	str	r1, [r4, #16]
 800c462:	07d8      	lsls	r0, r3, #31
 800c464:	d5ea      	bpl.n	800c43c <_printf_float+0x194>
 800c466:	1c4b      	adds	r3, r1, #1
 800c468:	e7e7      	b.n	800c43a <_printf_float+0x192>
 800c46a:	2900      	cmp	r1, #0
 800c46c:	bfd4      	ite	le
 800c46e:	f1c1 0202 	rsble	r2, r1, #2
 800c472:	2201      	movgt	r2, #1
 800c474:	4413      	add	r3, r2
 800c476:	e7e0      	b.n	800c43a <_printf_float+0x192>
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	055a      	lsls	r2, r3, #21
 800c47c:	d407      	bmi.n	800c48e <_printf_float+0x1e6>
 800c47e:	6923      	ldr	r3, [r4, #16]
 800c480:	4642      	mov	r2, r8
 800c482:	4631      	mov	r1, r6
 800c484:	4628      	mov	r0, r5
 800c486:	47b8      	blx	r7
 800c488:	3001      	adds	r0, #1
 800c48a:	d12b      	bne.n	800c4e4 <_printf_float+0x23c>
 800c48c:	e767      	b.n	800c35e <_printf_float+0xb6>
 800c48e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c492:	f240 80dd 	bls.w	800c650 <_printf_float+0x3a8>
 800c496:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c49a:	2200      	movs	r2, #0
 800c49c:	2300      	movs	r3, #0
 800c49e:	f7f4 fb13 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	d033      	beq.n	800c50e <_printf_float+0x266>
 800c4a6:	4a37      	ldr	r2, [pc, #220]	@ (800c584 <_printf_float+0x2dc>)
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	4631      	mov	r1, r6
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	47b8      	blx	r7
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	f43f af54 	beq.w	800c35e <_printf_float+0xb6>
 800c4b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c4ba:	4543      	cmp	r3, r8
 800c4bc:	db02      	blt.n	800c4c4 <_printf_float+0x21c>
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	07d8      	lsls	r0, r3, #31
 800c4c2:	d50f      	bpl.n	800c4e4 <_printf_float+0x23c>
 800c4c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4c8:	4631      	mov	r1, r6
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	47b8      	blx	r7
 800c4ce:	3001      	adds	r0, #1
 800c4d0:	f43f af45 	beq.w	800c35e <_printf_float+0xb6>
 800c4d4:	f04f 0900 	mov.w	r9, #0
 800c4d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4dc:	f104 0a1a 	add.w	sl, r4, #26
 800c4e0:	45c8      	cmp	r8, r9
 800c4e2:	dc09      	bgt.n	800c4f8 <_printf_float+0x250>
 800c4e4:	6823      	ldr	r3, [r4, #0]
 800c4e6:	079b      	lsls	r3, r3, #30
 800c4e8:	f100 8103 	bmi.w	800c6f2 <_printf_float+0x44a>
 800c4ec:	68e0      	ldr	r0, [r4, #12]
 800c4ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4f0:	4298      	cmp	r0, r3
 800c4f2:	bfb8      	it	lt
 800c4f4:	4618      	movlt	r0, r3
 800c4f6:	e734      	b.n	800c362 <_printf_float+0xba>
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	4652      	mov	r2, sl
 800c4fc:	4631      	mov	r1, r6
 800c4fe:	4628      	mov	r0, r5
 800c500:	47b8      	blx	r7
 800c502:	3001      	adds	r0, #1
 800c504:	f43f af2b 	beq.w	800c35e <_printf_float+0xb6>
 800c508:	f109 0901 	add.w	r9, r9, #1
 800c50c:	e7e8      	b.n	800c4e0 <_printf_float+0x238>
 800c50e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c510:	2b00      	cmp	r3, #0
 800c512:	dc39      	bgt.n	800c588 <_printf_float+0x2e0>
 800c514:	4a1b      	ldr	r2, [pc, #108]	@ (800c584 <_printf_float+0x2dc>)
 800c516:	2301      	movs	r3, #1
 800c518:	4631      	mov	r1, r6
 800c51a:	4628      	mov	r0, r5
 800c51c:	47b8      	blx	r7
 800c51e:	3001      	adds	r0, #1
 800c520:	f43f af1d 	beq.w	800c35e <_printf_float+0xb6>
 800c524:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c528:	ea59 0303 	orrs.w	r3, r9, r3
 800c52c:	d102      	bne.n	800c534 <_printf_float+0x28c>
 800c52e:	6823      	ldr	r3, [r4, #0]
 800c530:	07d9      	lsls	r1, r3, #31
 800c532:	d5d7      	bpl.n	800c4e4 <_printf_float+0x23c>
 800c534:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c538:	4631      	mov	r1, r6
 800c53a:	4628      	mov	r0, r5
 800c53c:	47b8      	blx	r7
 800c53e:	3001      	adds	r0, #1
 800c540:	f43f af0d 	beq.w	800c35e <_printf_float+0xb6>
 800c544:	f04f 0a00 	mov.w	sl, #0
 800c548:	f104 0b1a 	add.w	fp, r4, #26
 800c54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c54e:	425b      	negs	r3, r3
 800c550:	4553      	cmp	r3, sl
 800c552:	dc01      	bgt.n	800c558 <_printf_float+0x2b0>
 800c554:	464b      	mov	r3, r9
 800c556:	e793      	b.n	800c480 <_printf_float+0x1d8>
 800c558:	2301      	movs	r3, #1
 800c55a:	465a      	mov	r2, fp
 800c55c:	4631      	mov	r1, r6
 800c55e:	4628      	mov	r0, r5
 800c560:	47b8      	blx	r7
 800c562:	3001      	adds	r0, #1
 800c564:	f43f aefb 	beq.w	800c35e <_printf_float+0xb6>
 800c568:	f10a 0a01 	add.w	sl, sl, #1
 800c56c:	e7ee      	b.n	800c54c <_printf_float+0x2a4>
 800c56e:	bf00      	nop
 800c570:	7fefffff 	.word	0x7fefffff
 800c574:	080120d1 	.word	0x080120d1
 800c578:	080120d5 	.word	0x080120d5
 800c57c:	080120d9 	.word	0x080120d9
 800c580:	080120dd 	.word	0x080120dd
 800c584:	080120e1 	.word	0x080120e1
 800c588:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c58a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c58e:	4553      	cmp	r3, sl
 800c590:	bfa8      	it	ge
 800c592:	4653      	movge	r3, sl
 800c594:	2b00      	cmp	r3, #0
 800c596:	4699      	mov	r9, r3
 800c598:	dc36      	bgt.n	800c608 <_printf_float+0x360>
 800c59a:	f04f 0b00 	mov.w	fp, #0
 800c59e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5a2:	f104 021a 	add.w	r2, r4, #26
 800c5a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c5a8:	9306      	str	r3, [sp, #24]
 800c5aa:	eba3 0309 	sub.w	r3, r3, r9
 800c5ae:	455b      	cmp	r3, fp
 800c5b0:	dc31      	bgt.n	800c616 <_printf_float+0x36e>
 800c5b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b4:	459a      	cmp	sl, r3
 800c5b6:	dc3a      	bgt.n	800c62e <_printf_float+0x386>
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	07da      	lsls	r2, r3, #31
 800c5bc:	d437      	bmi.n	800c62e <_printf_float+0x386>
 800c5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5c0:	ebaa 0903 	sub.w	r9, sl, r3
 800c5c4:	9b06      	ldr	r3, [sp, #24]
 800c5c6:	ebaa 0303 	sub.w	r3, sl, r3
 800c5ca:	4599      	cmp	r9, r3
 800c5cc:	bfa8      	it	ge
 800c5ce:	4699      	movge	r9, r3
 800c5d0:	f1b9 0f00 	cmp.w	r9, #0
 800c5d4:	dc33      	bgt.n	800c63e <_printf_float+0x396>
 800c5d6:	f04f 0800 	mov.w	r8, #0
 800c5da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5de:	f104 0b1a 	add.w	fp, r4, #26
 800c5e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e4:	ebaa 0303 	sub.w	r3, sl, r3
 800c5e8:	eba3 0309 	sub.w	r3, r3, r9
 800c5ec:	4543      	cmp	r3, r8
 800c5ee:	f77f af79 	ble.w	800c4e4 <_printf_float+0x23c>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	465a      	mov	r2, fp
 800c5f6:	4631      	mov	r1, r6
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	47b8      	blx	r7
 800c5fc:	3001      	adds	r0, #1
 800c5fe:	f43f aeae 	beq.w	800c35e <_printf_float+0xb6>
 800c602:	f108 0801 	add.w	r8, r8, #1
 800c606:	e7ec      	b.n	800c5e2 <_printf_float+0x33a>
 800c608:	4642      	mov	r2, r8
 800c60a:	4631      	mov	r1, r6
 800c60c:	4628      	mov	r0, r5
 800c60e:	47b8      	blx	r7
 800c610:	3001      	adds	r0, #1
 800c612:	d1c2      	bne.n	800c59a <_printf_float+0x2f2>
 800c614:	e6a3      	b.n	800c35e <_printf_float+0xb6>
 800c616:	2301      	movs	r3, #1
 800c618:	4631      	mov	r1, r6
 800c61a:	4628      	mov	r0, r5
 800c61c:	9206      	str	r2, [sp, #24]
 800c61e:	47b8      	blx	r7
 800c620:	3001      	adds	r0, #1
 800c622:	f43f ae9c 	beq.w	800c35e <_printf_float+0xb6>
 800c626:	9a06      	ldr	r2, [sp, #24]
 800c628:	f10b 0b01 	add.w	fp, fp, #1
 800c62c:	e7bb      	b.n	800c5a6 <_printf_float+0x2fe>
 800c62e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c632:	4631      	mov	r1, r6
 800c634:	4628      	mov	r0, r5
 800c636:	47b8      	blx	r7
 800c638:	3001      	adds	r0, #1
 800c63a:	d1c0      	bne.n	800c5be <_printf_float+0x316>
 800c63c:	e68f      	b.n	800c35e <_printf_float+0xb6>
 800c63e:	9a06      	ldr	r2, [sp, #24]
 800c640:	464b      	mov	r3, r9
 800c642:	4442      	add	r2, r8
 800c644:	4631      	mov	r1, r6
 800c646:	4628      	mov	r0, r5
 800c648:	47b8      	blx	r7
 800c64a:	3001      	adds	r0, #1
 800c64c:	d1c3      	bne.n	800c5d6 <_printf_float+0x32e>
 800c64e:	e686      	b.n	800c35e <_printf_float+0xb6>
 800c650:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c654:	f1ba 0f01 	cmp.w	sl, #1
 800c658:	dc01      	bgt.n	800c65e <_printf_float+0x3b6>
 800c65a:	07db      	lsls	r3, r3, #31
 800c65c:	d536      	bpl.n	800c6cc <_printf_float+0x424>
 800c65e:	2301      	movs	r3, #1
 800c660:	4642      	mov	r2, r8
 800c662:	4631      	mov	r1, r6
 800c664:	4628      	mov	r0, r5
 800c666:	47b8      	blx	r7
 800c668:	3001      	adds	r0, #1
 800c66a:	f43f ae78 	beq.w	800c35e <_printf_float+0xb6>
 800c66e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c672:	4631      	mov	r1, r6
 800c674:	4628      	mov	r0, r5
 800c676:	47b8      	blx	r7
 800c678:	3001      	adds	r0, #1
 800c67a:	f43f ae70 	beq.w	800c35e <_printf_float+0xb6>
 800c67e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c682:	2200      	movs	r2, #0
 800c684:	2300      	movs	r3, #0
 800c686:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c68a:	f7f4 fa1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c68e:	b9c0      	cbnz	r0, 800c6c2 <_printf_float+0x41a>
 800c690:	4653      	mov	r3, sl
 800c692:	f108 0201 	add.w	r2, r8, #1
 800c696:	4631      	mov	r1, r6
 800c698:	4628      	mov	r0, r5
 800c69a:	47b8      	blx	r7
 800c69c:	3001      	adds	r0, #1
 800c69e:	d10c      	bne.n	800c6ba <_printf_float+0x412>
 800c6a0:	e65d      	b.n	800c35e <_printf_float+0xb6>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	465a      	mov	r2, fp
 800c6a6:	4631      	mov	r1, r6
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	47b8      	blx	r7
 800c6ac:	3001      	adds	r0, #1
 800c6ae:	f43f ae56 	beq.w	800c35e <_printf_float+0xb6>
 800c6b2:	f108 0801 	add.w	r8, r8, #1
 800c6b6:	45d0      	cmp	r8, sl
 800c6b8:	dbf3      	blt.n	800c6a2 <_printf_float+0x3fa>
 800c6ba:	464b      	mov	r3, r9
 800c6bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c6c0:	e6df      	b.n	800c482 <_printf_float+0x1da>
 800c6c2:	f04f 0800 	mov.w	r8, #0
 800c6c6:	f104 0b1a 	add.w	fp, r4, #26
 800c6ca:	e7f4      	b.n	800c6b6 <_printf_float+0x40e>
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	4642      	mov	r2, r8
 800c6d0:	e7e1      	b.n	800c696 <_printf_float+0x3ee>
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	464a      	mov	r2, r9
 800c6d6:	4631      	mov	r1, r6
 800c6d8:	4628      	mov	r0, r5
 800c6da:	47b8      	blx	r7
 800c6dc:	3001      	adds	r0, #1
 800c6de:	f43f ae3e 	beq.w	800c35e <_printf_float+0xb6>
 800c6e2:	f108 0801 	add.w	r8, r8, #1
 800c6e6:	68e3      	ldr	r3, [r4, #12]
 800c6e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6ea:	1a5b      	subs	r3, r3, r1
 800c6ec:	4543      	cmp	r3, r8
 800c6ee:	dcf0      	bgt.n	800c6d2 <_printf_float+0x42a>
 800c6f0:	e6fc      	b.n	800c4ec <_printf_float+0x244>
 800c6f2:	f04f 0800 	mov.w	r8, #0
 800c6f6:	f104 0919 	add.w	r9, r4, #25
 800c6fa:	e7f4      	b.n	800c6e6 <_printf_float+0x43e>

0800c6fc <_printf_common>:
 800c6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c700:	4616      	mov	r6, r2
 800c702:	4698      	mov	r8, r3
 800c704:	688a      	ldr	r2, [r1, #8]
 800c706:	690b      	ldr	r3, [r1, #16]
 800c708:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c70c:	4293      	cmp	r3, r2
 800c70e:	bfb8      	it	lt
 800c710:	4613      	movlt	r3, r2
 800c712:	6033      	str	r3, [r6, #0]
 800c714:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c718:	4607      	mov	r7, r0
 800c71a:	460c      	mov	r4, r1
 800c71c:	b10a      	cbz	r2, 800c722 <_printf_common+0x26>
 800c71e:	3301      	adds	r3, #1
 800c720:	6033      	str	r3, [r6, #0]
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	0699      	lsls	r1, r3, #26
 800c726:	bf42      	ittt	mi
 800c728:	6833      	ldrmi	r3, [r6, #0]
 800c72a:	3302      	addmi	r3, #2
 800c72c:	6033      	strmi	r3, [r6, #0]
 800c72e:	6825      	ldr	r5, [r4, #0]
 800c730:	f015 0506 	ands.w	r5, r5, #6
 800c734:	d106      	bne.n	800c744 <_printf_common+0x48>
 800c736:	f104 0a19 	add.w	sl, r4, #25
 800c73a:	68e3      	ldr	r3, [r4, #12]
 800c73c:	6832      	ldr	r2, [r6, #0]
 800c73e:	1a9b      	subs	r3, r3, r2
 800c740:	42ab      	cmp	r3, r5
 800c742:	dc26      	bgt.n	800c792 <_printf_common+0x96>
 800c744:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c748:	6822      	ldr	r2, [r4, #0]
 800c74a:	3b00      	subs	r3, #0
 800c74c:	bf18      	it	ne
 800c74e:	2301      	movne	r3, #1
 800c750:	0692      	lsls	r2, r2, #26
 800c752:	d42b      	bmi.n	800c7ac <_printf_common+0xb0>
 800c754:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c758:	4641      	mov	r1, r8
 800c75a:	4638      	mov	r0, r7
 800c75c:	47c8      	blx	r9
 800c75e:	3001      	adds	r0, #1
 800c760:	d01e      	beq.n	800c7a0 <_printf_common+0xa4>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	6922      	ldr	r2, [r4, #16]
 800c766:	f003 0306 	and.w	r3, r3, #6
 800c76a:	2b04      	cmp	r3, #4
 800c76c:	bf02      	ittt	eq
 800c76e:	68e5      	ldreq	r5, [r4, #12]
 800c770:	6833      	ldreq	r3, [r6, #0]
 800c772:	1aed      	subeq	r5, r5, r3
 800c774:	68a3      	ldr	r3, [r4, #8]
 800c776:	bf0c      	ite	eq
 800c778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c77c:	2500      	movne	r5, #0
 800c77e:	4293      	cmp	r3, r2
 800c780:	bfc4      	itt	gt
 800c782:	1a9b      	subgt	r3, r3, r2
 800c784:	18ed      	addgt	r5, r5, r3
 800c786:	2600      	movs	r6, #0
 800c788:	341a      	adds	r4, #26
 800c78a:	42b5      	cmp	r5, r6
 800c78c:	d11a      	bne.n	800c7c4 <_printf_common+0xc8>
 800c78e:	2000      	movs	r0, #0
 800c790:	e008      	b.n	800c7a4 <_printf_common+0xa8>
 800c792:	2301      	movs	r3, #1
 800c794:	4652      	mov	r2, sl
 800c796:	4641      	mov	r1, r8
 800c798:	4638      	mov	r0, r7
 800c79a:	47c8      	blx	r9
 800c79c:	3001      	adds	r0, #1
 800c79e:	d103      	bne.n	800c7a8 <_printf_common+0xac>
 800c7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a8:	3501      	adds	r5, #1
 800c7aa:	e7c6      	b.n	800c73a <_printf_common+0x3e>
 800c7ac:	18e1      	adds	r1, r4, r3
 800c7ae:	1c5a      	adds	r2, r3, #1
 800c7b0:	2030      	movs	r0, #48	@ 0x30
 800c7b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c7b6:	4422      	add	r2, r4
 800c7b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c7bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c7c0:	3302      	adds	r3, #2
 800c7c2:	e7c7      	b.n	800c754 <_printf_common+0x58>
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	4622      	mov	r2, r4
 800c7c8:	4641      	mov	r1, r8
 800c7ca:	4638      	mov	r0, r7
 800c7cc:	47c8      	blx	r9
 800c7ce:	3001      	adds	r0, #1
 800c7d0:	d0e6      	beq.n	800c7a0 <_printf_common+0xa4>
 800c7d2:	3601      	adds	r6, #1
 800c7d4:	e7d9      	b.n	800c78a <_printf_common+0x8e>
	...

0800c7d8 <_printf_i>:
 800c7d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7dc:	7e0f      	ldrb	r7, [r1, #24]
 800c7de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c7e0:	2f78      	cmp	r7, #120	@ 0x78
 800c7e2:	4691      	mov	r9, r2
 800c7e4:	4680      	mov	r8, r0
 800c7e6:	460c      	mov	r4, r1
 800c7e8:	469a      	mov	sl, r3
 800c7ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c7ee:	d807      	bhi.n	800c800 <_printf_i+0x28>
 800c7f0:	2f62      	cmp	r7, #98	@ 0x62
 800c7f2:	d80a      	bhi.n	800c80a <_printf_i+0x32>
 800c7f4:	2f00      	cmp	r7, #0
 800c7f6:	f000 80d2 	beq.w	800c99e <_printf_i+0x1c6>
 800c7fa:	2f58      	cmp	r7, #88	@ 0x58
 800c7fc:	f000 80b9 	beq.w	800c972 <_printf_i+0x19a>
 800c800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c804:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c808:	e03a      	b.n	800c880 <_printf_i+0xa8>
 800c80a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c80e:	2b15      	cmp	r3, #21
 800c810:	d8f6      	bhi.n	800c800 <_printf_i+0x28>
 800c812:	a101      	add	r1, pc, #4	@ (adr r1, 800c818 <_printf_i+0x40>)
 800c814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c818:	0800c871 	.word	0x0800c871
 800c81c:	0800c885 	.word	0x0800c885
 800c820:	0800c801 	.word	0x0800c801
 800c824:	0800c801 	.word	0x0800c801
 800c828:	0800c801 	.word	0x0800c801
 800c82c:	0800c801 	.word	0x0800c801
 800c830:	0800c885 	.word	0x0800c885
 800c834:	0800c801 	.word	0x0800c801
 800c838:	0800c801 	.word	0x0800c801
 800c83c:	0800c801 	.word	0x0800c801
 800c840:	0800c801 	.word	0x0800c801
 800c844:	0800c985 	.word	0x0800c985
 800c848:	0800c8af 	.word	0x0800c8af
 800c84c:	0800c93f 	.word	0x0800c93f
 800c850:	0800c801 	.word	0x0800c801
 800c854:	0800c801 	.word	0x0800c801
 800c858:	0800c9a7 	.word	0x0800c9a7
 800c85c:	0800c801 	.word	0x0800c801
 800c860:	0800c8af 	.word	0x0800c8af
 800c864:	0800c801 	.word	0x0800c801
 800c868:	0800c801 	.word	0x0800c801
 800c86c:	0800c947 	.word	0x0800c947
 800c870:	6833      	ldr	r3, [r6, #0]
 800c872:	1d1a      	adds	r2, r3, #4
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	6032      	str	r2, [r6, #0]
 800c878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c87c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c880:	2301      	movs	r3, #1
 800c882:	e09d      	b.n	800c9c0 <_printf_i+0x1e8>
 800c884:	6833      	ldr	r3, [r6, #0]
 800c886:	6820      	ldr	r0, [r4, #0]
 800c888:	1d19      	adds	r1, r3, #4
 800c88a:	6031      	str	r1, [r6, #0]
 800c88c:	0606      	lsls	r6, r0, #24
 800c88e:	d501      	bpl.n	800c894 <_printf_i+0xbc>
 800c890:	681d      	ldr	r5, [r3, #0]
 800c892:	e003      	b.n	800c89c <_printf_i+0xc4>
 800c894:	0645      	lsls	r5, r0, #25
 800c896:	d5fb      	bpl.n	800c890 <_printf_i+0xb8>
 800c898:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c89c:	2d00      	cmp	r5, #0
 800c89e:	da03      	bge.n	800c8a8 <_printf_i+0xd0>
 800c8a0:	232d      	movs	r3, #45	@ 0x2d
 800c8a2:	426d      	negs	r5, r5
 800c8a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8a8:	4859      	ldr	r0, [pc, #356]	@ (800ca10 <_printf_i+0x238>)
 800c8aa:	230a      	movs	r3, #10
 800c8ac:	e011      	b.n	800c8d2 <_printf_i+0xfa>
 800c8ae:	6821      	ldr	r1, [r4, #0]
 800c8b0:	6833      	ldr	r3, [r6, #0]
 800c8b2:	0608      	lsls	r0, r1, #24
 800c8b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c8b8:	d402      	bmi.n	800c8c0 <_printf_i+0xe8>
 800c8ba:	0649      	lsls	r1, r1, #25
 800c8bc:	bf48      	it	mi
 800c8be:	b2ad      	uxthmi	r5, r5
 800c8c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c8c2:	4853      	ldr	r0, [pc, #332]	@ (800ca10 <_printf_i+0x238>)
 800c8c4:	6033      	str	r3, [r6, #0]
 800c8c6:	bf14      	ite	ne
 800c8c8:	230a      	movne	r3, #10
 800c8ca:	2308      	moveq	r3, #8
 800c8cc:	2100      	movs	r1, #0
 800c8ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c8d2:	6866      	ldr	r6, [r4, #4]
 800c8d4:	60a6      	str	r6, [r4, #8]
 800c8d6:	2e00      	cmp	r6, #0
 800c8d8:	bfa2      	ittt	ge
 800c8da:	6821      	ldrge	r1, [r4, #0]
 800c8dc:	f021 0104 	bicge.w	r1, r1, #4
 800c8e0:	6021      	strge	r1, [r4, #0]
 800c8e2:	b90d      	cbnz	r5, 800c8e8 <_printf_i+0x110>
 800c8e4:	2e00      	cmp	r6, #0
 800c8e6:	d04b      	beq.n	800c980 <_printf_i+0x1a8>
 800c8e8:	4616      	mov	r6, r2
 800c8ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800c8ee:	fb03 5711 	mls	r7, r3, r1, r5
 800c8f2:	5dc7      	ldrb	r7, [r0, r7]
 800c8f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c8f8:	462f      	mov	r7, r5
 800c8fa:	42bb      	cmp	r3, r7
 800c8fc:	460d      	mov	r5, r1
 800c8fe:	d9f4      	bls.n	800c8ea <_printf_i+0x112>
 800c900:	2b08      	cmp	r3, #8
 800c902:	d10b      	bne.n	800c91c <_printf_i+0x144>
 800c904:	6823      	ldr	r3, [r4, #0]
 800c906:	07df      	lsls	r7, r3, #31
 800c908:	d508      	bpl.n	800c91c <_printf_i+0x144>
 800c90a:	6923      	ldr	r3, [r4, #16]
 800c90c:	6861      	ldr	r1, [r4, #4]
 800c90e:	4299      	cmp	r1, r3
 800c910:	bfde      	ittt	le
 800c912:	2330      	movle	r3, #48	@ 0x30
 800c914:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c918:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c91c:	1b92      	subs	r2, r2, r6
 800c91e:	6122      	str	r2, [r4, #16]
 800c920:	f8cd a000 	str.w	sl, [sp]
 800c924:	464b      	mov	r3, r9
 800c926:	aa03      	add	r2, sp, #12
 800c928:	4621      	mov	r1, r4
 800c92a:	4640      	mov	r0, r8
 800c92c:	f7ff fee6 	bl	800c6fc <_printf_common>
 800c930:	3001      	adds	r0, #1
 800c932:	d14a      	bne.n	800c9ca <_printf_i+0x1f2>
 800c934:	f04f 30ff 	mov.w	r0, #4294967295
 800c938:	b004      	add	sp, #16
 800c93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c93e:	6823      	ldr	r3, [r4, #0]
 800c940:	f043 0320 	orr.w	r3, r3, #32
 800c944:	6023      	str	r3, [r4, #0]
 800c946:	4833      	ldr	r0, [pc, #204]	@ (800ca14 <_printf_i+0x23c>)
 800c948:	2778      	movs	r7, #120	@ 0x78
 800c94a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c94e:	6823      	ldr	r3, [r4, #0]
 800c950:	6831      	ldr	r1, [r6, #0]
 800c952:	061f      	lsls	r7, r3, #24
 800c954:	f851 5b04 	ldr.w	r5, [r1], #4
 800c958:	d402      	bmi.n	800c960 <_printf_i+0x188>
 800c95a:	065f      	lsls	r7, r3, #25
 800c95c:	bf48      	it	mi
 800c95e:	b2ad      	uxthmi	r5, r5
 800c960:	6031      	str	r1, [r6, #0]
 800c962:	07d9      	lsls	r1, r3, #31
 800c964:	bf44      	itt	mi
 800c966:	f043 0320 	orrmi.w	r3, r3, #32
 800c96a:	6023      	strmi	r3, [r4, #0]
 800c96c:	b11d      	cbz	r5, 800c976 <_printf_i+0x19e>
 800c96e:	2310      	movs	r3, #16
 800c970:	e7ac      	b.n	800c8cc <_printf_i+0xf4>
 800c972:	4827      	ldr	r0, [pc, #156]	@ (800ca10 <_printf_i+0x238>)
 800c974:	e7e9      	b.n	800c94a <_printf_i+0x172>
 800c976:	6823      	ldr	r3, [r4, #0]
 800c978:	f023 0320 	bic.w	r3, r3, #32
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	e7f6      	b.n	800c96e <_printf_i+0x196>
 800c980:	4616      	mov	r6, r2
 800c982:	e7bd      	b.n	800c900 <_printf_i+0x128>
 800c984:	6833      	ldr	r3, [r6, #0]
 800c986:	6825      	ldr	r5, [r4, #0]
 800c988:	6961      	ldr	r1, [r4, #20]
 800c98a:	1d18      	adds	r0, r3, #4
 800c98c:	6030      	str	r0, [r6, #0]
 800c98e:	062e      	lsls	r6, r5, #24
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	d501      	bpl.n	800c998 <_printf_i+0x1c0>
 800c994:	6019      	str	r1, [r3, #0]
 800c996:	e002      	b.n	800c99e <_printf_i+0x1c6>
 800c998:	0668      	lsls	r0, r5, #25
 800c99a:	d5fb      	bpl.n	800c994 <_printf_i+0x1bc>
 800c99c:	8019      	strh	r1, [r3, #0]
 800c99e:	2300      	movs	r3, #0
 800c9a0:	6123      	str	r3, [r4, #16]
 800c9a2:	4616      	mov	r6, r2
 800c9a4:	e7bc      	b.n	800c920 <_printf_i+0x148>
 800c9a6:	6833      	ldr	r3, [r6, #0]
 800c9a8:	1d1a      	adds	r2, r3, #4
 800c9aa:	6032      	str	r2, [r6, #0]
 800c9ac:	681e      	ldr	r6, [r3, #0]
 800c9ae:	6862      	ldr	r2, [r4, #4]
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f7f3 fc0c 	bl	80001d0 <memchr>
 800c9b8:	b108      	cbz	r0, 800c9be <_printf_i+0x1e6>
 800c9ba:	1b80      	subs	r0, r0, r6
 800c9bc:	6060      	str	r0, [r4, #4]
 800c9be:	6863      	ldr	r3, [r4, #4]
 800c9c0:	6123      	str	r3, [r4, #16]
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9c8:	e7aa      	b.n	800c920 <_printf_i+0x148>
 800c9ca:	6923      	ldr	r3, [r4, #16]
 800c9cc:	4632      	mov	r2, r6
 800c9ce:	4649      	mov	r1, r9
 800c9d0:	4640      	mov	r0, r8
 800c9d2:	47d0      	blx	sl
 800c9d4:	3001      	adds	r0, #1
 800c9d6:	d0ad      	beq.n	800c934 <_printf_i+0x15c>
 800c9d8:	6823      	ldr	r3, [r4, #0]
 800c9da:	079b      	lsls	r3, r3, #30
 800c9dc:	d413      	bmi.n	800ca06 <_printf_i+0x22e>
 800c9de:	68e0      	ldr	r0, [r4, #12]
 800c9e0:	9b03      	ldr	r3, [sp, #12]
 800c9e2:	4298      	cmp	r0, r3
 800c9e4:	bfb8      	it	lt
 800c9e6:	4618      	movlt	r0, r3
 800c9e8:	e7a6      	b.n	800c938 <_printf_i+0x160>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	4632      	mov	r2, r6
 800c9ee:	4649      	mov	r1, r9
 800c9f0:	4640      	mov	r0, r8
 800c9f2:	47d0      	blx	sl
 800c9f4:	3001      	adds	r0, #1
 800c9f6:	d09d      	beq.n	800c934 <_printf_i+0x15c>
 800c9f8:	3501      	adds	r5, #1
 800c9fa:	68e3      	ldr	r3, [r4, #12]
 800c9fc:	9903      	ldr	r1, [sp, #12]
 800c9fe:	1a5b      	subs	r3, r3, r1
 800ca00:	42ab      	cmp	r3, r5
 800ca02:	dcf2      	bgt.n	800c9ea <_printf_i+0x212>
 800ca04:	e7eb      	b.n	800c9de <_printf_i+0x206>
 800ca06:	2500      	movs	r5, #0
 800ca08:	f104 0619 	add.w	r6, r4, #25
 800ca0c:	e7f5      	b.n	800c9fa <_printf_i+0x222>
 800ca0e:	bf00      	nop
 800ca10:	080120e3 	.word	0x080120e3
 800ca14:	080120f4 	.word	0x080120f4

0800ca18 <_scanf_float>:
 800ca18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1c:	b087      	sub	sp, #28
 800ca1e:	4617      	mov	r7, r2
 800ca20:	9303      	str	r3, [sp, #12]
 800ca22:	688b      	ldr	r3, [r1, #8]
 800ca24:	1e5a      	subs	r2, r3, #1
 800ca26:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ca2a:	bf81      	itttt	hi
 800ca2c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ca30:	eb03 0b05 	addhi.w	fp, r3, r5
 800ca34:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ca38:	608b      	strhi	r3, [r1, #8]
 800ca3a:	680b      	ldr	r3, [r1, #0]
 800ca3c:	460a      	mov	r2, r1
 800ca3e:	f04f 0500 	mov.w	r5, #0
 800ca42:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ca46:	f842 3b1c 	str.w	r3, [r2], #28
 800ca4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ca4e:	4680      	mov	r8, r0
 800ca50:	460c      	mov	r4, r1
 800ca52:	bf98      	it	ls
 800ca54:	f04f 0b00 	movls.w	fp, #0
 800ca58:	9201      	str	r2, [sp, #4]
 800ca5a:	4616      	mov	r6, r2
 800ca5c:	46aa      	mov	sl, r5
 800ca5e:	46a9      	mov	r9, r5
 800ca60:	9502      	str	r5, [sp, #8]
 800ca62:	68a2      	ldr	r2, [r4, #8]
 800ca64:	b152      	cbz	r2, 800ca7c <_scanf_float+0x64>
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	2b4e      	cmp	r3, #78	@ 0x4e
 800ca6c:	d864      	bhi.n	800cb38 <_scanf_float+0x120>
 800ca6e:	2b40      	cmp	r3, #64	@ 0x40
 800ca70:	d83c      	bhi.n	800caec <_scanf_float+0xd4>
 800ca72:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ca76:	b2c8      	uxtb	r0, r1
 800ca78:	280e      	cmp	r0, #14
 800ca7a:	d93a      	bls.n	800caf2 <_scanf_float+0xda>
 800ca7c:	f1b9 0f00 	cmp.w	r9, #0
 800ca80:	d003      	beq.n	800ca8a <_scanf_float+0x72>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca8e:	f1ba 0f01 	cmp.w	sl, #1
 800ca92:	f200 8117 	bhi.w	800ccc4 <_scanf_float+0x2ac>
 800ca96:	9b01      	ldr	r3, [sp, #4]
 800ca98:	429e      	cmp	r6, r3
 800ca9a:	f200 8108 	bhi.w	800ccae <_scanf_float+0x296>
 800ca9e:	2001      	movs	r0, #1
 800caa0:	b007      	add	sp, #28
 800caa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800caaa:	2a0d      	cmp	r2, #13
 800caac:	d8e6      	bhi.n	800ca7c <_scanf_float+0x64>
 800caae:	a101      	add	r1, pc, #4	@ (adr r1, 800cab4 <_scanf_float+0x9c>)
 800cab0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cab4:	0800cbfb 	.word	0x0800cbfb
 800cab8:	0800ca7d 	.word	0x0800ca7d
 800cabc:	0800ca7d 	.word	0x0800ca7d
 800cac0:	0800ca7d 	.word	0x0800ca7d
 800cac4:	0800cc5b 	.word	0x0800cc5b
 800cac8:	0800cc33 	.word	0x0800cc33
 800cacc:	0800ca7d 	.word	0x0800ca7d
 800cad0:	0800ca7d 	.word	0x0800ca7d
 800cad4:	0800cc09 	.word	0x0800cc09
 800cad8:	0800ca7d 	.word	0x0800ca7d
 800cadc:	0800ca7d 	.word	0x0800ca7d
 800cae0:	0800ca7d 	.word	0x0800ca7d
 800cae4:	0800ca7d 	.word	0x0800ca7d
 800cae8:	0800cbc1 	.word	0x0800cbc1
 800caec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800caf0:	e7db      	b.n	800caaa <_scanf_float+0x92>
 800caf2:	290e      	cmp	r1, #14
 800caf4:	d8c2      	bhi.n	800ca7c <_scanf_float+0x64>
 800caf6:	a001      	add	r0, pc, #4	@ (adr r0, 800cafc <_scanf_float+0xe4>)
 800caf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cafc:	0800cbb1 	.word	0x0800cbb1
 800cb00:	0800ca7d 	.word	0x0800ca7d
 800cb04:	0800cbb1 	.word	0x0800cbb1
 800cb08:	0800cc47 	.word	0x0800cc47
 800cb0c:	0800ca7d 	.word	0x0800ca7d
 800cb10:	0800cb59 	.word	0x0800cb59
 800cb14:	0800cb97 	.word	0x0800cb97
 800cb18:	0800cb97 	.word	0x0800cb97
 800cb1c:	0800cb97 	.word	0x0800cb97
 800cb20:	0800cb97 	.word	0x0800cb97
 800cb24:	0800cb97 	.word	0x0800cb97
 800cb28:	0800cb97 	.word	0x0800cb97
 800cb2c:	0800cb97 	.word	0x0800cb97
 800cb30:	0800cb97 	.word	0x0800cb97
 800cb34:	0800cb97 	.word	0x0800cb97
 800cb38:	2b6e      	cmp	r3, #110	@ 0x6e
 800cb3a:	d809      	bhi.n	800cb50 <_scanf_float+0x138>
 800cb3c:	2b60      	cmp	r3, #96	@ 0x60
 800cb3e:	d8b2      	bhi.n	800caa6 <_scanf_float+0x8e>
 800cb40:	2b54      	cmp	r3, #84	@ 0x54
 800cb42:	d07b      	beq.n	800cc3c <_scanf_float+0x224>
 800cb44:	2b59      	cmp	r3, #89	@ 0x59
 800cb46:	d199      	bne.n	800ca7c <_scanf_float+0x64>
 800cb48:	2d07      	cmp	r5, #7
 800cb4a:	d197      	bne.n	800ca7c <_scanf_float+0x64>
 800cb4c:	2508      	movs	r5, #8
 800cb4e:	e02c      	b.n	800cbaa <_scanf_float+0x192>
 800cb50:	2b74      	cmp	r3, #116	@ 0x74
 800cb52:	d073      	beq.n	800cc3c <_scanf_float+0x224>
 800cb54:	2b79      	cmp	r3, #121	@ 0x79
 800cb56:	e7f6      	b.n	800cb46 <_scanf_float+0x12e>
 800cb58:	6821      	ldr	r1, [r4, #0]
 800cb5a:	05c8      	lsls	r0, r1, #23
 800cb5c:	d51b      	bpl.n	800cb96 <_scanf_float+0x17e>
 800cb5e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cb62:	6021      	str	r1, [r4, #0]
 800cb64:	f109 0901 	add.w	r9, r9, #1
 800cb68:	f1bb 0f00 	cmp.w	fp, #0
 800cb6c:	d003      	beq.n	800cb76 <_scanf_float+0x15e>
 800cb6e:	3201      	adds	r2, #1
 800cb70:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb74:	60a2      	str	r2, [r4, #8]
 800cb76:	68a3      	ldr	r3, [r4, #8]
 800cb78:	3b01      	subs	r3, #1
 800cb7a:	60a3      	str	r3, [r4, #8]
 800cb7c:	6923      	ldr	r3, [r4, #16]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	6123      	str	r3, [r4, #16]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	3b01      	subs	r3, #1
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	607b      	str	r3, [r7, #4]
 800cb8a:	f340 8087 	ble.w	800cc9c <_scanf_float+0x284>
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	3301      	adds	r3, #1
 800cb92:	603b      	str	r3, [r7, #0]
 800cb94:	e765      	b.n	800ca62 <_scanf_float+0x4a>
 800cb96:	eb1a 0105 	adds.w	r1, sl, r5
 800cb9a:	f47f af6f 	bne.w	800ca7c <_scanf_float+0x64>
 800cb9e:	6822      	ldr	r2, [r4, #0]
 800cba0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cba4:	6022      	str	r2, [r4, #0]
 800cba6:	460d      	mov	r5, r1
 800cba8:	468a      	mov	sl, r1
 800cbaa:	f806 3b01 	strb.w	r3, [r6], #1
 800cbae:	e7e2      	b.n	800cb76 <_scanf_float+0x15e>
 800cbb0:	6822      	ldr	r2, [r4, #0]
 800cbb2:	0610      	lsls	r0, r2, #24
 800cbb4:	f57f af62 	bpl.w	800ca7c <_scanf_float+0x64>
 800cbb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cbbc:	6022      	str	r2, [r4, #0]
 800cbbe:	e7f4      	b.n	800cbaa <_scanf_float+0x192>
 800cbc0:	f1ba 0f00 	cmp.w	sl, #0
 800cbc4:	d10e      	bne.n	800cbe4 <_scanf_float+0x1cc>
 800cbc6:	f1b9 0f00 	cmp.w	r9, #0
 800cbca:	d10e      	bne.n	800cbea <_scanf_float+0x1d2>
 800cbcc:	6822      	ldr	r2, [r4, #0]
 800cbce:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cbd2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cbd6:	d108      	bne.n	800cbea <_scanf_float+0x1d2>
 800cbd8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cbdc:	6022      	str	r2, [r4, #0]
 800cbde:	f04f 0a01 	mov.w	sl, #1
 800cbe2:	e7e2      	b.n	800cbaa <_scanf_float+0x192>
 800cbe4:	f1ba 0f02 	cmp.w	sl, #2
 800cbe8:	d055      	beq.n	800cc96 <_scanf_float+0x27e>
 800cbea:	2d01      	cmp	r5, #1
 800cbec:	d002      	beq.n	800cbf4 <_scanf_float+0x1dc>
 800cbee:	2d04      	cmp	r5, #4
 800cbf0:	f47f af44 	bne.w	800ca7c <_scanf_float+0x64>
 800cbf4:	3501      	adds	r5, #1
 800cbf6:	b2ed      	uxtb	r5, r5
 800cbf8:	e7d7      	b.n	800cbaa <_scanf_float+0x192>
 800cbfa:	f1ba 0f01 	cmp.w	sl, #1
 800cbfe:	f47f af3d 	bne.w	800ca7c <_scanf_float+0x64>
 800cc02:	f04f 0a02 	mov.w	sl, #2
 800cc06:	e7d0      	b.n	800cbaa <_scanf_float+0x192>
 800cc08:	b97d      	cbnz	r5, 800cc2a <_scanf_float+0x212>
 800cc0a:	f1b9 0f00 	cmp.w	r9, #0
 800cc0e:	f47f af38 	bne.w	800ca82 <_scanf_float+0x6a>
 800cc12:	6822      	ldr	r2, [r4, #0]
 800cc14:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cc18:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cc1c:	f040 8108 	bne.w	800ce30 <_scanf_float+0x418>
 800cc20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc24:	6022      	str	r2, [r4, #0]
 800cc26:	2501      	movs	r5, #1
 800cc28:	e7bf      	b.n	800cbaa <_scanf_float+0x192>
 800cc2a:	2d03      	cmp	r5, #3
 800cc2c:	d0e2      	beq.n	800cbf4 <_scanf_float+0x1dc>
 800cc2e:	2d05      	cmp	r5, #5
 800cc30:	e7de      	b.n	800cbf0 <_scanf_float+0x1d8>
 800cc32:	2d02      	cmp	r5, #2
 800cc34:	f47f af22 	bne.w	800ca7c <_scanf_float+0x64>
 800cc38:	2503      	movs	r5, #3
 800cc3a:	e7b6      	b.n	800cbaa <_scanf_float+0x192>
 800cc3c:	2d06      	cmp	r5, #6
 800cc3e:	f47f af1d 	bne.w	800ca7c <_scanf_float+0x64>
 800cc42:	2507      	movs	r5, #7
 800cc44:	e7b1      	b.n	800cbaa <_scanf_float+0x192>
 800cc46:	6822      	ldr	r2, [r4, #0]
 800cc48:	0591      	lsls	r1, r2, #22
 800cc4a:	f57f af17 	bpl.w	800ca7c <_scanf_float+0x64>
 800cc4e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cc52:	6022      	str	r2, [r4, #0]
 800cc54:	f8cd 9008 	str.w	r9, [sp, #8]
 800cc58:	e7a7      	b.n	800cbaa <_scanf_float+0x192>
 800cc5a:	6822      	ldr	r2, [r4, #0]
 800cc5c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cc60:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cc64:	d006      	beq.n	800cc74 <_scanf_float+0x25c>
 800cc66:	0550      	lsls	r0, r2, #21
 800cc68:	f57f af08 	bpl.w	800ca7c <_scanf_float+0x64>
 800cc6c:	f1b9 0f00 	cmp.w	r9, #0
 800cc70:	f000 80de 	beq.w	800ce30 <_scanf_float+0x418>
 800cc74:	0591      	lsls	r1, r2, #22
 800cc76:	bf58      	it	pl
 800cc78:	9902      	ldrpl	r1, [sp, #8]
 800cc7a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc7e:	bf58      	it	pl
 800cc80:	eba9 0101 	subpl.w	r1, r9, r1
 800cc84:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cc88:	bf58      	it	pl
 800cc8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cc8e:	6022      	str	r2, [r4, #0]
 800cc90:	f04f 0900 	mov.w	r9, #0
 800cc94:	e789      	b.n	800cbaa <_scanf_float+0x192>
 800cc96:	f04f 0a03 	mov.w	sl, #3
 800cc9a:	e786      	b.n	800cbaa <_scanf_float+0x192>
 800cc9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cca0:	4639      	mov	r1, r7
 800cca2:	4640      	mov	r0, r8
 800cca4:	4798      	blx	r3
 800cca6:	2800      	cmp	r0, #0
 800cca8:	f43f aedb 	beq.w	800ca62 <_scanf_float+0x4a>
 800ccac:	e6e6      	b.n	800ca7c <_scanf_float+0x64>
 800ccae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccb6:	463a      	mov	r2, r7
 800ccb8:	4640      	mov	r0, r8
 800ccba:	4798      	blx	r3
 800ccbc:	6923      	ldr	r3, [r4, #16]
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	6123      	str	r3, [r4, #16]
 800ccc2:	e6e8      	b.n	800ca96 <_scanf_float+0x7e>
 800ccc4:	1e6b      	subs	r3, r5, #1
 800ccc6:	2b06      	cmp	r3, #6
 800ccc8:	d824      	bhi.n	800cd14 <_scanf_float+0x2fc>
 800ccca:	2d02      	cmp	r5, #2
 800cccc:	d836      	bhi.n	800cd3c <_scanf_float+0x324>
 800ccce:	9b01      	ldr	r3, [sp, #4]
 800ccd0:	429e      	cmp	r6, r3
 800ccd2:	f67f aee4 	bls.w	800ca9e <_scanf_float+0x86>
 800ccd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccde:	463a      	mov	r2, r7
 800cce0:	4640      	mov	r0, r8
 800cce2:	4798      	blx	r3
 800cce4:	6923      	ldr	r3, [r4, #16]
 800cce6:	3b01      	subs	r3, #1
 800cce8:	6123      	str	r3, [r4, #16]
 800ccea:	e7f0      	b.n	800ccce <_scanf_float+0x2b6>
 800ccec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccf0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ccf4:	463a      	mov	r2, r7
 800ccf6:	4640      	mov	r0, r8
 800ccf8:	4798      	blx	r3
 800ccfa:	6923      	ldr	r3, [r4, #16]
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	6123      	str	r3, [r4, #16]
 800cd00:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd04:	fa5f fa8a 	uxtb.w	sl, sl
 800cd08:	f1ba 0f02 	cmp.w	sl, #2
 800cd0c:	d1ee      	bne.n	800ccec <_scanf_float+0x2d4>
 800cd0e:	3d03      	subs	r5, #3
 800cd10:	b2ed      	uxtb	r5, r5
 800cd12:	1b76      	subs	r6, r6, r5
 800cd14:	6823      	ldr	r3, [r4, #0]
 800cd16:	05da      	lsls	r2, r3, #23
 800cd18:	d530      	bpl.n	800cd7c <_scanf_float+0x364>
 800cd1a:	055b      	lsls	r3, r3, #21
 800cd1c:	d511      	bpl.n	800cd42 <_scanf_float+0x32a>
 800cd1e:	9b01      	ldr	r3, [sp, #4]
 800cd20:	429e      	cmp	r6, r3
 800cd22:	f67f aebc 	bls.w	800ca9e <_scanf_float+0x86>
 800cd26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd2e:	463a      	mov	r2, r7
 800cd30:	4640      	mov	r0, r8
 800cd32:	4798      	blx	r3
 800cd34:	6923      	ldr	r3, [r4, #16]
 800cd36:	3b01      	subs	r3, #1
 800cd38:	6123      	str	r3, [r4, #16]
 800cd3a:	e7f0      	b.n	800cd1e <_scanf_float+0x306>
 800cd3c:	46aa      	mov	sl, r5
 800cd3e:	46b3      	mov	fp, r6
 800cd40:	e7de      	b.n	800cd00 <_scanf_float+0x2e8>
 800cd42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cd46:	6923      	ldr	r3, [r4, #16]
 800cd48:	2965      	cmp	r1, #101	@ 0x65
 800cd4a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cd4e:	f106 35ff 	add.w	r5, r6, #4294967295
 800cd52:	6123      	str	r3, [r4, #16]
 800cd54:	d00c      	beq.n	800cd70 <_scanf_float+0x358>
 800cd56:	2945      	cmp	r1, #69	@ 0x45
 800cd58:	d00a      	beq.n	800cd70 <_scanf_float+0x358>
 800cd5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd5e:	463a      	mov	r2, r7
 800cd60:	4640      	mov	r0, r8
 800cd62:	4798      	blx	r3
 800cd64:	6923      	ldr	r3, [r4, #16]
 800cd66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	1eb5      	subs	r5, r6, #2
 800cd6e:	6123      	str	r3, [r4, #16]
 800cd70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd74:	463a      	mov	r2, r7
 800cd76:	4640      	mov	r0, r8
 800cd78:	4798      	blx	r3
 800cd7a:	462e      	mov	r6, r5
 800cd7c:	6822      	ldr	r2, [r4, #0]
 800cd7e:	f012 0210 	ands.w	r2, r2, #16
 800cd82:	d001      	beq.n	800cd88 <_scanf_float+0x370>
 800cd84:	2000      	movs	r0, #0
 800cd86:	e68b      	b.n	800caa0 <_scanf_float+0x88>
 800cd88:	7032      	strb	r2, [r6, #0]
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cd90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd94:	d11c      	bne.n	800cdd0 <_scanf_float+0x3b8>
 800cd96:	9b02      	ldr	r3, [sp, #8]
 800cd98:	454b      	cmp	r3, r9
 800cd9a:	eba3 0209 	sub.w	r2, r3, r9
 800cd9e:	d123      	bne.n	800cde8 <_scanf_float+0x3d0>
 800cda0:	9901      	ldr	r1, [sp, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	4640      	mov	r0, r8
 800cda6:	f7ff f947 	bl	800c038 <_strtod_r>
 800cdaa:	9b03      	ldr	r3, [sp, #12]
 800cdac:	6821      	ldr	r1, [r4, #0]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f011 0f02 	tst.w	r1, #2
 800cdb4:	ec57 6b10 	vmov	r6, r7, d0
 800cdb8:	f103 0204 	add.w	r2, r3, #4
 800cdbc:	d01f      	beq.n	800cdfe <_scanf_float+0x3e6>
 800cdbe:	9903      	ldr	r1, [sp, #12]
 800cdc0:	600a      	str	r2, [r1, #0]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	e9c3 6700 	strd	r6, r7, [r3]
 800cdc8:	68e3      	ldr	r3, [r4, #12]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	60e3      	str	r3, [r4, #12]
 800cdce:	e7d9      	b.n	800cd84 <_scanf_float+0x36c>
 800cdd0:	9b04      	ldr	r3, [sp, #16]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d0e4      	beq.n	800cda0 <_scanf_float+0x388>
 800cdd6:	9905      	ldr	r1, [sp, #20]
 800cdd8:	230a      	movs	r3, #10
 800cdda:	3101      	adds	r1, #1
 800cddc:	4640      	mov	r0, r8
 800cdde:	f7ff f9b7 	bl	800c150 <_strtol_r>
 800cde2:	9b04      	ldr	r3, [sp, #16]
 800cde4:	9e05      	ldr	r6, [sp, #20]
 800cde6:	1ac2      	subs	r2, r0, r3
 800cde8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cdec:	429e      	cmp	r6, r3
 800cdee:	bf28      	it	cs
 800cdf0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cdf4:	4910      	ldr	r1, [pc, #64]	@ (800ce38 <_scanf_float+0x420>)
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	f000 f8e4 	bl	800cfc4 <siprintf>
 800cdfc:	e7d0      	b.n	800cda0 <_scanf_float+0x388>
 800cdfe:	f011 0f04 	tst.w	r1, #4
 800ce02:	9903      	ldr	r1, [sp, #12]
 800ce04:	600a      	str	r2, [r1, #0]
 800ce06:	d1dc      	bne.n	800cdc2 <_scanf_float+0x3aa>
 800ce08:	681d      	ldr	r5, [r3, #0]
 800ce0a:	4632      	mov	r2, r6
 800ce0c:	463b      	mov	r3, r7
 800ce0e:	4630      	mov	r0, r6
 800ce10:	4639      	mov	r1, r7
 800ce12:	f7f3 fe8b 	bl	8000b2c <__aeabi_dcmpun>
 800ce16:	b128      	cbz	r0, 800ce24 <_scanf_float+0x40c>
 800ce18:	4808      	ldr	r0, [pc, #32]	@ (800ce3c <_scanf_float+0x424>)
 800ce1a:	f000 fa3d 	bl	800d298 <nanf>
 800ce1e:	ed85 0a00 	vstr	s0, [r5]
 800ce22:	e7d1      	b.n	800cdc8 <_scanf_float+0x3b0>
 800ce24:	4630      	mov	r0, r6
 800ce26:	4639      	mov	r1, r7
 800ce28:	f7f3 fede 	bl	8000be8 <__aeabi_d2f>
 800ce2c:	6028      	str	r0, [r5, #0]
 800ce2e:	e7cb      	b.n	800cdc8 <_scanf_float+0x3b0>
 800ce30:	f04f 0900 	mov.w	r9, #0
 800ce34:	e629      	b.n	800ca8a <_scanf_float+0x72>
 800ce36:	bf00      	nop
 800ce38:	08012105 	.word	0x08012105
 800ce3c:	080121be 	.word	0x080121be

0800ce40 <std>:
 800ce40:	2300      	movs	r3, #0
 800ce42:	b510      	push	{r4, lr}
 800ce44:	4604      	mov	r4, r0
 800ce46:	e9c0 3300 	strd	r3, r3, [r0]
 800ce4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce4e:	6083      	str	r3, [r0, #8]
 800ce50:	8181      	strh	r1, [r0, #12]
 800ce52:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce54:	81c2      	strh	r2, [r0, #14]
 800ce56:	6183      	str	r3, [r0, #24]
 800ce58:	4619      	mov	r1, r3
 800ce5a:	2208      	movs	r2, #8
 800ce5c:	305c      	adds	r0, #92	@ 0x5c
 800ce5e:	f000 f914 	bl	800d08a <memset>
 800ce62:	4b0d      	ldr	r3, [pc, #52]	@ (800ce98 <std+0x58>)
 800ce64:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce66:	4b0d      	ldr	r3, [pc, #52]	@ (800ce9c <std+0x5c>)
 800ce68:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cea0 <std+0x60>)
 800ce6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cea4 <std+0x64>)
 800ce70:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce72:	4b0d      	ldr	r3, [pc, #52]	@ (800cea8 <std+0x68>)
 800ce74:	6224      	str	r4, [r4, #32]
 800ce76:	429c      	cmp	r4, r3
 800ce78:	d006      	beq.n	800ce88 <std+0x48>
 800ce7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce7e:	4294      	cmp	r4, r2
 800ce80:	d002      	beq.n	800ce88 <std+0x48>
 800ce82:	33d0      	adds	r3, #208	@ 0xd0
 800ce84:	429c      	cmp	r4, r3
 800ce86:	d105      	bne.n	800ce94 <std+0x54>
 800ce88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce90:	f000 b9e6 	b.w	800d260 <__retarget_lock_init_recursive>
 800ce94:	bd10      	pop	{r4, pc}
 800ce96:	bf00      	nop
 800ce98:	0800d005 	.word	0x0800d005
 800ce9c:	0800d027 	.word	0x0800d027
 800cea0:	0800d05f 	.word	0x0800d05f
 800cea4:	0800d083 	.word	0x0800d083
 800cea8:	20000718 	.word	0x20000718

0800ceac <stdio_exit_handler>:
 800ceac:	4a02      	ldr	r2, [pc, #8]	@ (800ceb8 <stdio_exit_handler+0xc>)
 800ceae:	4903      	ldr	r1, [pc, #12]	@ (800cebc <stdio_exit_handler+0x10>)
 800ceb0:	4803      	ldr	r0, [pc, #12]	@ (800cec0 <stdio_exit_handler+0x14>)
 800ceb2:	f000 b869 	b.w	800cf88 <_fwalk_sglue>
 800ceb6:	bf00      	nop
 800ceb8:	200000d8 	.word	0x200000d8
 800cebc:	0800f545 	.word	0x0800f545
 800cec0:	20000254 	.word	0x20000254

0800cec4 <cleanup_stdio>:
 800cec4:	6841      	ldr	r1, [r0, #4]
 800cec6:	4b0c      	ldr	r3, [pc, #48]	@ (800cef8 <cleanup_stdio+0x34>)
 800cec8:	4299      	cmp	r1, r3
 800ceca:	b510      	push	{r4, lr}
 800cecc:	4604      	mov	r4, r0
 800cece:	d001      	beq.n	800ced4 <cleanup_stdio+0x10>
 800ced0:	f002 fb38 	bl	800f544 <_fflush_r>
 800ced4:	68a1      	ldr	r1, [r4, #8]
 800ced6:	4b09      	ldr	r3, [pc, #36]	@ (800cefc <cleanup_stdio+0x38>)
 800ced8:	4299      	cmp	r1, r3
 800ceda:	d002      	beq.n	800cee2 <cleanup_stdio+0x1e>
 800cedc:	4620      	mov	r0, r4
 800cede:	f002 fb31 	bl	800f544 <_fflush_r>
 800cee2:	68e1      	ldr	r1, [r4, #12]
 800cee4:	4b06      	ldr	r3, [pc, #24]	@ (800cf00 <cleanup_stdio+0x3c>)
 800cee6:	4299      	cmp	r1, r3
 800cee8:	d004      	beq.n	800cef4 <cleanup_stdio+0x30>
 800ceea:	4620      	mov	r0, r4
 800ceec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cef0:	f002 bb28 	b.w	800f544 <_fflush_r>
 800cef4:	bd10      	pop	{r4, pc}
 800cef6:	bf00      	nop
 800cef8:	20000718 	.word	0x20000718
 800cefc:	20000780 	.word	0x20000780
 800cf00:	200007e8 	.word	0x200007e8

0800cf04 <global_stdio_init.part.0>:
 800cf04:	b510      	push	{r4, lr}
 800cf06:	4b0b      	ldr	r3, [pc, #44]	@ (800cf34 <global_stdio_init.part.0+0x30>)
 800cf08:	4c0b      	ldr	r4, [pc, #44]	@ (800cf38 <global_stdio_init.part.0+0x34>)
 800cf0a:	4a0c      	ldr	r2, [pc, #48]	@ (800cf3c <global_stdio_init.part.0+0x38>)
 800cf0c:	601a      	str	r2, [r3, #0]
 800cf0e:	4620      	mov	r0, r4
 800cf10:	2200      	movs	r2, #0
 800cf12:	2104      	movs	r1, #4
 800cf14:	f7ff ff94 	bl	800ce40 <std>
 800cf18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	2109      	movs	r1, #9
 800cf20:	f7ff ff8e 	bl	800ce40 <std>
 800cf24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf28:	2202      	movs	r2, #2
 800cf2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf2e:	2112      	movs	r1, #18
 800cf30:	f7ff bf86 	b.w	800ce40 <std>
 800cf34:	20000850 	.word	0x20000850
 800cf38:	20000718 	.word	0x20000718
 800cf3c:	0800cead 	.word	0x0800cead

0800cf40 <__sfp_lock_acquire>:
 800cf40:	4801      	ldr	r0, [pc, #4]	@ (800cf48 <__sfp_lock_acquire+0x8>)
 800cf42:	f000 b98e 	b.w	800d262 <__retarget_lock_acquire_recursive>
 800cf46:	bf00      	nop
 800cf48:	20000859 	.word	0x20000859

0800cf4c <__sfp_lock_release>:
 800cf4c:	4801      	ldr	r0, [pc, #4]	@ (800cf54 <__sfp_lock_release+0x8>)
 800cf4e:	f000 b989 	b.w	800d264 <__retarget_lock_release_recursive>
 800cf52:	bf00      	nop
 800cf54:	20000859 	.word	0x20000859

0800cf58 <__sinit>:
 800cf58:	b510      	push	{r4, lr}
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	f7ff fff0 	bl	800cf40 <__sfp_lock_acquire>
 800cf60:	6a23      	ldr	r3, [r4, #32]
 800cf62:	b11b      	cbz	r3, 800cf6c <__sinit+0x14>
 800cf64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf68:	f7ff bff0 	b.w	800cf4c <__sfp_lock_release>
 800cf6c:	4b04      	ldr	r3, [pc, #16]	@ (800cf80 <__sinit+0x28>)
 800cf6e:	6223      	str	r3, [r4, #32]
 800cf70:	4b04      	ldr	r3, [pc, #16]	@ (800cf84 <__sinit+0x2c>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1f5      	bne.n	800cf64 <__sinit+0xc>
 800cf78:	f7ff ffc4 	bl	800cf04 <global_stdio_init.part.0>
 800cf7c:	e7f2      	b.n	800cf64 <__sinit+0xc>
 800cf7e:	bf00      	nop
 800cf80:	0800cec5 	.word	0x0800cec5
 800cf84:	20000850 	.word	0x20000850

0800cf88 <_fwalk_sglue>:
 800cf88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf8c:	4607      	mov	r7, r0
 800cf8e:	4688      	mov	r8, r1
 800cf90:	4614      	mov	r4, r2
 800cf92:	2600      	movs	r6, #0
 800cf94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf98:	f1b9 0901 	subs.w	r9, r9, #1
 800cf9c:	d505      	bpl.n	800cfaa <_fwalk_sglue+0x22>
 800cf9e:	6824      	ldr	r4, [r4, #0]
 800cfa0:	2c00      	cmp	r4, #0
 800cfa2:	d1f7      	bne.n	800cf94 <_fwalk_sglue+0xc>
 800cfa4:	4630      	mov	r0, r6
 800cfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfaa:	89ab      	ldrh	r3, [r5, #12]
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d907      	bls.n	800cfc0 <_fwalk_sglue+0x38>
 800cfb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	d003      	beq.n	800cfc0 <_fwalk_sglue+0x38>
 800cfb8:	4629      	mov	r1, r5
 800cfba:	4638      	mov	r0, r7
 800cfbc:	47c0      	blx	r8
 800cfbe:	4306      	orrs	r6, r0
 800cfc0:	3568      	adds	r5, #104	@ 0x68
 800cfc2:	e7e9      	b.n	800cf98 <_fwalk_sglue+0x10>

0800cfc4 <siprintf>:
 800cfc4:	b40e      	push	{r1, r2, r3}
 800cfc6:	b500      	push	{lr}
 800cfc8:	b09c      	sub	sp, #112	@ 0x70
 800cfca:	ab1d      	add	r3, sp, #116	@ 0x74
 800cfcc:	9002      	str	r0, [sp, #8]
 800cfce:	9006      	str	r0, [sp, #24]
 800cfd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cfd4:	4809      	ldr	r0, [pc, #36]	@ (800cffc <siprintf+0x38>)
 800cfd6:	9107      	str	r1, [sp, #28]
 800cfd8:	9104      	str	r1, [sp, #16]
 800cfda:	4909      	ldr	r1, [pc, #36]	@ (800d000 <siprintf+0x3c>)
 800cfdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfe0:	9105      	str	r1, [sp, #20]
 800cfe2:	6800      	ldr	r0, [r0, #0]
 800cfe4:	9301      	str	r3, [sp, #4]
 800cfe6:	a902      	add	r1, sp, #8
 800cfe8:	f002 f92c 	bl	800f244 <_svfiprintf_r>
 800cfec:	9b02      	ldr	r3, [sp, #8]
 800cfee:	2200      	movs	r2, #0
 800cff0:	701a      	strb	r2, [r3, #0]
 800cff2:	b01c      	add	sp, #112	@ 0x70
 800cff4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cff8:	b003      	add	sp, #12
 800cffa:	4770      	bx	lr
 800cffc:	20000250 	.word	0x20000250
 800d000:	ffff0208 	.word	0xffff0208

0800d004 <__sread>:
 800d004:	b510      	push	{r4, lr}
 800d006:	460c      	mov	r4, r1
 800d008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d00c:	f000 f8da 	bl	800d1c4 <_read_r>
 800d010:	2800      	cmp	r0, #0
 800d012:	bfab      	itete	ge
 800d014:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d016:	89a3      	ldrhlt	r3, [r4, #12]
 800d018:	181b      	addge	r3, r3, r0
 800d01a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d01e:	bfac      	ite	ge
 800d020:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d022:	81a3      	strhlt	r3, [r4, #12]
 800d024:	bd10      	pop	{r4, pc}

0800d026 <__swrite>:
 800d026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d02a:	461f      	mov	r7, r3
 800d02c:	898b      	ldrh	r3, [r1, #12]
 800d02e:	05db      	lsls	r3, r3, #23
 800d030:	4605      	mov	r5, r0
 800d032:	460c      	mov	r4, r1
 800d034:	4616      	mov	r6, r2
 800d036:	d505      	bpl.n	800d044 <__swrite+0x1e>
 800d038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d03c:	2302      	movs	r3, #2
 800d03e:	2200      	movs	r2, #0
 800d040:	f000 f8ae 	bl	800d1a0 <_lseek_r>
 800d044:	89a3      	ldrh	r3, [r4, #12]
 800d046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d04a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d04e:	81a3      	strh	r3, [r4, #12]
 800d050:	4632      	mov	r2, r6
 800d052:	463b      	mov	r3, r7
 800d054:	4628      	mov	r0, r5
 800d056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d05a:	f000 b8c5 	b.w	800d1e8 <_write_r>

0800d05e <__sseek>:
 800d05e:	b510      	push	{r4, lr}
 800d060:	460c      	mov	r4, r1
 800d062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d066:	f000 f89b 	bl	800d1a0 <_lseek_r>
 800d06a:	1c43      	adds	r3, r0, #1
 800d06c:	89a3      	ldrh	r3, [r4, #12]
 800d06e:	bf15      	itete	ne
 800d070:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d072:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d076:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d07a:	81a3      	strheq	r3, [r4, #12]
 800d07c:	bf18      	it	ne
 800d07e:	81a3      	strhne	r3, [r4, #12]
 800d080:	bd10      	pop	{r4, pc}

0800d082 <__sclose>:
 800d082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d086:	f000 b87b 	b.w	800d180 <_close_r>

0800d08a <memset>:
 800d08a:	4402      	add	r2, r0
 800d08c:	4603      	mov	r3, r0
 800d08e:	4293      	cmp	r3, r2
 800d090:	d100      	bne.n	800d094 <memset+0xa>
 800d092:	4770      	bx	lr
 800d094:	f803 1b01 	strb.w	r1, [r3], #1
 800d098:	e7f9      	b.n	800d08e <memset+0x4>

0800d09a <strncmp>:
 800d09a:	b510      	push	{r4, lr}
 800d09c:	b16a      	cbz	r2, 800d0ba <strncmp+0x20>
 800d09e:	3901      	subs	r1, #1
 800d0a0:	1884      	adds	r4, r0, r2
 800d0a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d103      	bne.n	800d0b6 <strncmp+0x1c>
 800d0ae:	42a0      	cmp	r0, r4
 800d0b0:	d001      	beq.n	800d0b6 <strncmp+0x1c>
 800d0b2:	2a00      	cmp	r2, #0
 800d0b4:	d1f5      	bne.n	800d0a2 <strncmp+0x8>
 800d0b6:	1ad0      	subs	r0, r2, r3
 800d0b8:	bd10      	pop	{r4, pc}
 800d0ba:	4610      	mov	r0, r2
 800d0bc:	e7fc      	b.n	800d0b8 <strncmp+0x1e>
	...

0800d0c0 <strtok>:
 800d0c0:	4b16      	ldr	r3, [pc, #88]	@ (800d11c <strtok+0x5c>)
 800d0c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c6:	681f      	ldr	r7, [r3, #0]
 800d0c8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800d0ca:	4605      	mov	r5, r0
 800d0cc:	460e      	mov	r6, r1
 800d0ce:	b9ec      	cbnz	r4, 800d10c <strtok+0x4c>
 800d0d0:	2050      	movs	r0, #80	@ 0x50
 800d0d2:	f001 fad5 	bl	800e680 <malloc>
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	6478      	str	r0, [r7, #68]	@ 0x44
 800d0da:	b920      	cbnz	r0, 800d0e6 <strtok+0x26>
 800d0dc:	4b10      	ldr	r3, [pc, #64]	@ (800d120 <strtok+0x60>)
 800d0de:	4811      	ldr	r0, [pc, #68]	@ (800d124 <strtok+0x64>)
 800d0e0:	215b      	movs	r1, #91	@ 0x5b
 800d0e2:	f000 f8df 	bl	800d2a4 <__assert_func>
 800d0e6:	e9c0 4400 	strd	r4, r4, [r0]
 800d0ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d0ee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d0f2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800d0f6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800d0fa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800d0fe:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800d102:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800d106:	6184      	str	r4, [r0, #24]
 800d108:	7704      	strb	r4, [r0, #28]
 800d10a:	6244      	str	r4, [r0, #36]	@ 0x24
 800d10c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d10e:	4631      	mov	r1, r6
 800d110:	4628      	mov	r0, r5
 800d112:	2301      	movs	r3, #1
 800d114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d118:	f000 b806 	b.w	800d128 <__strtok_r>
 800d11c:	20000250 	.word	0x20000250
 800d120:	0801210a 	.word	0x0801210a
 800d124:	08012121 	.word	0x08012121

0800d128 <__strtok_r>:
 800d128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d12a:	4604      	mov	r4, r0
 800d12c:	b908      	cbnz	r0, 800d132 <__strtok_r+0xa>
 800d12e:	6814      	ldr	r4, [r2, #0]
 800d130:	b144      	cbz	r4, 800d144 <__strtok_r+0x1c>
 800d132:	4620      	mov	r0, r4
 800d134:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d138:	460f      	mov	r7, r1
 800d13a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d13e:	b91e      	cbnz	r6, 800d148 <__strtok_r+0x20>
 800d140:	b965      	cbnz	r5, 800d15c <__strtok_r+0x34>
 800d142:	6015      	str	r5, [r2, #0]
 800d144:	2000      	movs	r0, #0
 800d146:	e005      	b.n	800d154 <__strtok_r+0x2c>
 800d148:	42b5      	cmp	r5, r6
 800d14a:	d1f6      	bne.n	800d13a <__strtok_r+0x12>
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d1f0      	bne.n	800d132 <__strtok_r+0xa>
 800d150:	6014      	str	r4, [r2, #0]
 800d152:	7003      	strb	r3, [r0, #0]
 800d154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d156:	461c      	mov	r4, r3
 800d158:	e00c      	b.n	800d174 <__strtok_r+0x4c>
 800d15a:	b915      	cbnz	r5, 800d162 <__strtok_r+0x3a>
 800d15c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d160:	460e      	mov	r6, r1
 800d162:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d166:	42ab      	cmp	r3, r5
 800d168:	d1f7      	bne.n	800d15a <__strtok_r+0x32>
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d0f3      	beq.n	800d156 <__strtok_r+0x2e>
 800d16e:	2300      	movs	r3, #0
 800d170:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d174:	6014      	str	r4, [r2, #0]
 800d176:	e7ed      	b.n	800d154 <__strtok_r+0x2c>

0800d178 <_localeconv_r>:
 800d178:	4800      	ldr	r0, [pc, #0]	@ (800d17c <_localeconv_r+0x4>)
 800d17a:	4770      	bx	lr
 800d17c:	200001d4 	.word	0x200001d4

0800d180 <_close_r>:
 800d180:	b538      	push	{r3, r4, r5, lr}
 800d182:	4d06      	ldr	r5, [pc, #24]	@ (800d19c <_close_r+0x1c>)
 800d184:	2300      	movs	r3, #0
 800d186:	4604      	mov	r4, r0
 800d188:	4608      	mov	r0, r1
 800d18a:	602b      	str	r3, [r5, #0]
 800d18c:	f7fa fb72 	bl	8007874 <_close>
 800d190:	1c43      	adds	r3, r0, #1
 800d192:	d102      	bne.n	800d19a <_close_r+0x1a>
 800d194:	682b      	ldr	r3, [r5, #0]
 800d196:	b103      	cbz	r3, 800d19a <_close_r+0x1a>
 800d198:	6023      	str	r3, [r4, #0]
 800d19a:	bd38      	pop	{r3, r4, r5, pc}
 800d19c:	20000854 	.word	0x20000854

0800d1a0 <_lseek_r>:
 800d1a0:	b538      	push	{r3, r4, r5, lr}
 800d1a2:	4d07      	ldr	r5, [pc, #28]	@ (800d1c0 <_lseek_r+0x20>)
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	4608      	mov	r0, r1
 800d1a8:	4611      	mov	r1, r2
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	602a      	str	r2, [r5, #0]
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	f7fa fb87 	bl	80078c2 <_lseek>
 800d1b4:	1c43      	adds	r3, r0, #1
 800d1b6:	d102      	bne.n	800d1be <_lseek_r+0x1e>
 800d1b8:	682b      	ldr	r3, [r5, #0]
 800d1ba:	b103      	cbz	r3, 800d1be <_lseek_r+0x1e>
 800d1bc:	6023      	str	r3, [r4, #0]
 800d1be:	bd38      	pop	{r3, r4, r5, pc}
 800d1c0:	20000854 	.word	0x20000854

0800d1c4 <_read_r>:
 800d1c4:	b538      	push	{r3, r4, r5, lr}
 800d1c6:	4d07      	ldr	r5, [pc, #28]	@ (800d1e4 <_read_r+0x20>)
 800d1c8:	4604      	mov	r4, r0
 800d1ca:	4608      	mov	r0, r1
 800d1cc:	4611      	mov	r1, r2
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	602a      	str	r2, [r5, #0]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	f7fa fb15 	bl	8007802 <_read>
 800d1d8:	1c43      	adds	r3, r0, #1
 800d1da:	d102      	bne.n	800d1e2 <_read_r+0x1e>
 800d1dc:	682b      	ldr	r3, [r5, #0]
 800d1de:	b103      	cbz	r3, 800d1e2 <_read_r+0x1e>
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}
 800d1e4:	20000854 	.word	0x20000854

0800d1e8 <_write_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	4d07      	ldr	r5, [pc, #28]	@ (800d208 <_write_r+0x20>)
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	4608      	mov	r0, r1
 800d1f0:	4611      	mov	r1, r2
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	602a      	str	r2, [r5, #0]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	f7fa fb20 	bl	800783c <_write>
 800d1fc:	1c43      	adds	r3, r0, #1
 800d1fe:	d102      	bne.n	800d206 <_write_r+0x1e>
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	b103      	cbz	r3, 800d206 <_write_r+0x1e>
 800d204:	6023      	str	r3, [r4, #0]
 800d206:	bd38      	pop	{r3, r4, r5, pc}
 800d208:	20000854 	.word	0x20000854

0800d20c <__errno>:
 800d20c:	4b01      	ldr	r3, [pc, #4]	@ (800d214 <__errno+0x8>)
 800d20e:	6818      	ldr	r0, [r3, #0]
 800d210:	4770      	bx	lr
 800d212:	bf00      	nop
 800d214:	20000250 	.word	0x20000250

0800d218 <__libc_init_array>:
 800d218:	b570      	push	{r4, r5, r6, lr}
 800d21a:	4d0d      	ldr	r5, [pc, #52]	@ (800d250 <__libc_init_array+0x38>)
 800d21c:	4c0d      	ldr	r4, [pc, #52]	@ (800d254 <__libc_init_array+0x3c>)
 800d21e:	1b64      	subs	r4, r4, r5
 800d220:	10a4      	asrs	r4, r4, #2
 800d222:	2600      	movs	r6, #0
 800d224:	42a6      	cmp	r6, r4
 800d226:	d109      	bne.n	800d23c <__libc_init_array+0x24>
 800d228:	4d0b      	ldr	r5, [pc, #44]	@ (800d258 <__libc_init_array+0x40>)
 800d22a:	4c0c      	ldr	r4, [pc, #48]	@ (800d25c <__libc_init_array+0x44>)
 800d22c:	f004 fa70 	bl	8011710 <_init>
 800d230:	1b64      	subs	r4, r4, r5
 800d232:	10a4      	asrs	r4, r4, #2
 800d234:	2600      	movs	r6, #0
 800d236:	42a6      	cmp	r6, r4
 800d238:	d105      	bne.n	800d246 <__libc_init_array+0x2e>
 800d23a:	bd70      	pop	{r4, r5, r6, pc}
 800d23c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d240:	4798      	blx	r3
 800d242:	3601      	adds	r6, #1
 800d244:	e7ee      	b.n	800d224 <__libc_init_array+0xc>
 800d246:	f855 3b04 	ldr.w	r3, [r5], #4
 800d24a:	4798      	blx	r3
 800d24c:	3601      	adds	r6, #1
 800d24e:	e7f2      	b.n	800d236 <__libc_init_array+0x1e>
 800d250:	08012658 	.word	0x08012658
 800d254:	08012658 	.word	0x08012658
 800d258:	08012658 	.word	0x08012658
 800d25c:	0801265c 	.word	0x0801265c

0800d260 <__retarget_lock_init_recursive>:
 800d260:	4770      	bx	lr

0800d262 <__retarget_lock_acquire_recursive>:
 800d262:	4770      	bx	lr

0800d264 <__retarget_lock_release_recursive>:
 800d264:	4770      	bx	lr

0800d266 <memcpy>:
 800d266:	440a      	add	r2, r1
 800d268:	4291      	cmp	r1, r2
 800d26a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d26e:	d100      	bne.n	800d272 <memcpy+0xc>
 800d270:	4770      	bx	lr
 800d272:	b510      	push	{r4, lr}
 800d274:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d278:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d27c:	4291      	cmp	r1, r2
 800d27e:	d1f9      	bne.n	800d274 <memcpy+0xe>
 800d280:	bd10      	pop	{r4, pc}
 800d282:	0000      	movs	r0, r0
 800d284:	0000      	movs	r0, r0
	...

0800d288 <nan>:
 800d288:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d290 <nan+0x8>
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	00000000 	.word	0x00000000
 800d294:	7ff80000 	.word	0x7ff80000

0800d298 <nanf>:
 800d298:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d2a0 <nanf+0x8>
 800d29c:	4770      	bx	lr
 800d29e:	bf00      	nop
 800d2a0:	7fc00000 	.word	0x7fc00000

0800d2a4 <__assert_func>:
 800d2a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2a6:	4614      	mov	r4, r2
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	4b09      	ldr	r3, [pc, #36]	@ (800d2d0 <__assert_func+0x2c>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4605      	mov	r5, r0
 800d2b0:	68d8      	ldr	r0, [r3, #12]
 800d2b2:	b954      	cbnz	r4, 800d2ca <__assert_func+0x26>
 800d2b4:	4b07      	ldr	r3, [pc, #28]	@ (800d2d4 <__assert_func+0x30>)
 800d2b6:	461c      	mov	r4, r3
 800d2b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2bc:	9100      	str	r1, [sp, #0]
 800d2be:	462b      	mov	r3, r5
 800d2c0:	4905      	ldr	r1, [pc, #20]	@ (800d2d8 <__assert_func+0x34>)
 800d2c2:	f002 f967 	bl	800f594 <fiprintf>
 800d2c6:	f002 f9a1 	bl	800f60c <abort>
 800d2ca:	4b04      	ldr	r3, [pc, #16]	@ (800d2dc <__assert_func+0x38>)
 800d2cc:	e7f4      	b.n	800d2b8 <__assert_func+0x14>
 800d2ce:	bf00      	nop
 800d2d0:	20000250 	.word	0x20000250
 800d2d4:	080121be 	.word	0x080121be
 800d2d8:	08012190 	.word	0x08012190
 800d2dc:	08012183 	.word	0x08012183

0800d2e0 <quorem>:
 800d2e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e4:	6903      	ldr	r3, [r0, #16]
 800d2e6:	690c      	ldr	r4, [r1, #16]
 800d2e8:	42a3      	cmp	r3, r4
 800d2ea:	4607      	mov	r7, r0
 800d2ec:	db7e      	blt.n	800d3ec <quorem+0x10c>
 800d2ee:	3c01      	subs	r4, #1
 800d2f0:	f101 0814 	add.w	r8, r1, #20
 800d2f4:	00a3      	lsls	r3, r4, #2
 800d2f6:	f100 0514 	add.w	r5, r0, #20
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d300:	9301      	str	r3, [sp, #4]
 800d302:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d306:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d30a:	3301      	adds	r3, #1
 800d30c:	429a      	cmp	r2, r3
 800d30e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d312:	fbb2 f6f3 	udiv	r6, r2, r3
 800d316:	d32e      	bcc.n	800d376 <quorem+0x96>
 800d318:	f04f 0a00 	mov.w	sl, #0
 800d31c:	46c4      	mov	ip, r8
 800d31e:	46ae      	mov	lr, r5
 800d320:	46d3      	mov	fp, sl
 800d322:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d326:	b298      	uxth	r0, r3
 800d328:	fb06 a000 	mla	r0, r6, r0, sl
 800d32c:	0c02      	lsrs	r2, r0, #16
 800d32e:	0c1b      	lsrs	r3, r3, #16
 800d330:	fb06 2303 	mla	r3, r6, r3, r2
 800d334:	f8de 2000 	ldr.w	r2, [lr]
 800d338:	b280      	uxth	r0, r0
 800d33a:	b292      	uxth	r2, r2
 800d33c:	1a12      	subs	r2, r2, r0
 800d33e:	445a      	add	r2, fp
 800d340:	f8de 0000 	ldr.w	r0, [lr]
 800d344:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d348:	b29b      	uxth	r3, r3
 800d34a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d34e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d352:	b292      	uxth	r2, r2
 800d354:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d358:	45e1      	cmp	r9, ip
 800d35a:	f84e 2b04 	str.w	r2, [lr], #4
 800d35e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d362:	d2de      	bcs.n	800d322 <quorem+0x42>
 800d364:	9b00      	ldr	r3, [sp, #0]
 800d366:	58eb      	ldr	r3, [r5, r3]
 800d368:	b92b      	cbnz	r3, 800d376 <quorem+0x96>
 800d36a:	9b01      	ldr	r3, [sp, #4]
 800d36c:	3b04      	subs	r3, #4
 800d36e:	429d      	cmp	r5, r3
 800d370:	461a      	mov	r2, r3
 800d372:	d32f      	bcc.n	800d3d4 <quorem+0xf4>
 800d374:	613c      	str	r4, [r7, #16]
 800d376:	4638      	mov	r0, r7
 800d378:	f001 fd0e 	bl	800ed98 <__mcmp>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	db25      	blt.n	800d3cc <quorem+0xec>
 800d380:	4629      	mov	r1, r5
 800d382:	2000      	movs	r0, #0
 800d384:	f858 2b04 	ldr.w	r2, [r8], #4
 800d388:	f8d1 c000 	ldr.w	ip, [r1]
 800d38c:	fa1f fe82 	uxth.w	lr, r2
 800d390:	fa1f f38c 	uxth.w	r3, ip
 800d394:	eba3 030e 	sub.w	r3, r3, lr
 800d398:	4403      	add	r3, r0
 800d39a:	0c12      	lsrs	r2, r2, #16
 800d39c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d3a0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3aa:	45c1      	cmp	r9, r8
 800d3ac:	f841 3b04 	str.w	r3, [r1], #4
 800d3b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d3b4:	d2e6      	bcs.n	800d384 <quorem+0xa4>
 800d3b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3be:	b922      	cbnz	r2, 800d3ca <quorem+0xea>
 800d3c0:	3b04      	subs	r3, #4
 800d3c2:	429d      	cmp	r5, r3
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	d30b      	bcc.n	800d3e0 <quorem+0x100>
 800d3c8:	613c      	str	r4, [r7, #16]
 800d3ca:	3601      	adds	r6, #1
 800d3cc:	4630      	mov	r0, r6
 800d3ce:	b003      	add	sp, #12
 800d3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3d4:	6812      	ldr	r2, [r2, #0]
 800d3d6:	3b04      	subs	r3, #4
 800d3d8:	2a00      	cmp	r2, #0
 800d3da:	d1cb      	bne.n	800d374 <quorem+0x94>
 800d3dc:	3c01      	subs	r4, #1
 800d3de:	e7c6      	b.n	800d36e <quorem+0x8e>
 800d3e0:	6812      	ldr	r2, [r2, #0]
 800d3e2:	3b04      	subs	r3, #4
 800d3e4:	2a00      	cmp	r2, #0
 800d3e6:	d1ef      	bne.n	800d3c8 <quorem+0xe8>
 800d3e8:	3c01      	subs	r4, #1
 800d3ea:	e7ea      	b.n	800d3c2 <quorem+0xe2>
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	e7ee      	b.n	800d3ce <quorem+0xee>

0800d3f0 <_dtoa_r>:
 800d3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f4:	69c7      	ldr	r7, [r0, #28]
 800d3f6:	b099      	sub	sp, #100	@ 0x64
 800d3f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d3fc:	ec55 4b10 	vmov	r4, r5, d0
 800d400:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d402:	9109      	str	r1, [sp, #36]	@ 0x24
 800d404:	4683      	mov	fp, r0
 800d406:	920e      	str	r2, [sp, #56]	@ 0x38
 800d408:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d40a:	b97f      	cbnz	r7, 800d42c <_dtoa_r+0x3c>
 800d40c:	2010      	movs	r0, #16
 800d40e:	f001 f937 	bl	800e680 <malloc>
 800d412:	4602      	mov	r2, r0
 800d414:	f8cb 001c 	str.w	r0, [fp, #28]
 800d418:	b920      	cbnz	r0, 800d424 <_dtoa_r+0x34>
 800d41a:	4ba7      	ldr	r3, [pc, #668]	@ (800d6b8 <_dtoa_r+0x2c8>)
 800d41c:	21ef      	movs	r1, #239	@ 0xef
 800d41e:	48a7      	ldr	r0, [pc, #668]	@ (800d6bc <_dtoa_r+0x2cc>)
 800d420:	f7ff ff40 	bl	800d2a4 <__assert_func>
 800d424:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d428:	6007      	str	r7, [r0, #0]
 800d42a:	60c7      	str	r7, [r0, #12]
 800d42c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d430:	6819      	ldr	r1, [r3, #0]
 800d432:	b159      	cbz	r1, 800d44c <_dtoa_r+0x5c>
 800d434:	685a      	ldr	r2, [r3, #4]
 800d436:	604a      	str	r2, [r1, #4]
 800d438:	2301      	movs	r3, #1
 800d43a:	4093      	lsls	r3, r2
 800d43c:	608b      	str	r3, [r1, #8]
 800d43e:	4658      	mov	r0, fp
 800d440:	f001 fa26 	bl	800e890 <_Bfree>
 800d444:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d448:	2200      	movs	r2, #0
 800d44a:	601a      	str	r2, [r3, #0]
 800d44c:	1e2b      	subs	r3, r5, #0
 800d44e:	bfb9      	ittee	lt
 800d450:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d454:	9303      	strlt	r3, [sp, #12]
 800d456:	2300      	movge	r3, #0
 800d458:	6033      	strge	r3, [r6, #0]
 800d45a:	9f03      	ldr	r7, [sp, #12]
 800d45c:	4b98      	ldr	r3, [pc, #608]	@ (800d6c0 <_dtoa_r+0x2d0>)
 800d45e:	bfbc      	itt	lt
 800d460:	2201      	movlt	r2, #1
 800d462:	6032      	strlt	r2, [r6, #0]
 800d464:	43bb      	bics	r3, r7
 800d466:	d112      	bne.n	800d48e <_dtoa_r+0x9e>
 800d468:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d46a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d46e:	6013      	str	r3, [r2, #0]
 800d470:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d474:	4323      	orrs	r3, r4
 800d476:	f000 854d 	beq.w	800df14 <_dtoa_r+0xb24>
 800d47a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d47c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d6d4 <_dtoa_r+0x2e4>
 800d480:	2b00      	cmp	r3, #0
 800d482:	f000 854f 	beq.w	800df24 <_dtoa_r+0xb34>
 800d486:	f10a 0303 	add.w	r3, sl, #3
 800d48a:	f000 bd49 	b.w	800df20 <_dtoa_r+0xb30>
 800d48e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d492:	2200      	movs	r2, #0
 800d494:	ec51 0b17 	vmov	r0, r1, d7
 800d498:	2300      	movs	r3, #0
 800d49a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d49e:	f7f3 fb13 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4a2:	4680      	mov	r8, r0
 800d4a4:	b158      	cbz	r0, 800d4be <_dtoa_r+0xce>
 800d4a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	6013      	str	r3, [r2, #0]
 800d4ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d4ae:	b113      	cbz	r3, 800d4b6 <_dtoa_r+0xc6>
 800d4b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d4b2:	4b84      	ldr	r3, [pc, #528]	@ (800d6c4 <_dtoa_r+0x2d4>)
 800d4b4:	6013      	str	r3, [r2, #0]
 800d4b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d6d8 <_dtoa_r+0x2e8>
 800d4ba:	f000 bd33 	b.w	800df24 <_dtoa_r+0xb34>
 800d4be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d4c2:	aa16      	add	r2, sp, #88	@ 0x58
 800d4c4:	a917      	add	r1, sp, #92	@ 0x5c
 800d4c6:	4658      	mov	r0, fp
 800d4c8:	f001 fd86 	bl	800efd8 <__d2b>
 800d4cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d4d0:	4681      	mov	r9, r0
 800d4d2:	2e00      	cmp	r6, #0
 800d4d4:	d077      	beq.n	800d5c6 <_dtoa_r+0x1d6>
 800d4d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d4d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d4dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d4e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d4ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	4b74      	ldr	r3, [pc, #464]	@ (800d6c8 <_dtoa_r+0x2d8>)
 800d4f6:	f7f2 fec7 	bl	8000288 <__aeabi_dsub>
 800d4fa:	a369      	add	r3, pc, #420	@ (adr r3, 800d6a0 <_dtoa_r+0x2b0>)
 800d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d500:	f7f3 f87a 	bl	80005f8 <__aeabi_dmul>
 800d504:	a368      	add	r3, pc, #416	@ (adr r3, 800d6a8 <_dtoa_r+0x2b8>)
 800d506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50a:	f7f2 febf 	bl	800028c <__adddf3>
 800d50e:	4604      	mov	r4, r0
 800d510:	4630      	mov	r0, r6
 800d512:	460d      	mov	r5, r1
 800d514:	f7f3 f806 	bl	8000524 <__aeabi_i2d>
 800d518:	a365      	add	r3, pc, #404	@ (adr r3, 800d6b0 <_dtoa_r+0x2c0>)
 800d51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51e:	f7f3 f86b 	bl	80005f8 <__aeabi_dmul>
 800d522:	4602      	mov	r2, r0
 800d524:	460b      	mov	r3, r1
 800d526:	4620      	mov	r0, r4
 800d528:	4629      	mov	r1, r5
 800d52a:	f7f2 feaf 	bl	800028c <__adddf3>
 800d52e:	4604      	mov	r4, r0
 800d530:	460d      	mov	r5, r1
 800d532:	f7f3 fb11 	bl	8000b58 <__aeabi_d2iz>
 800d536:	2200      	movs	r2, #0
 800d538:	4607      	mov	r7, r0
 800d53a:	2300      	movs	r3, #0
 800d53c:	4620      	mov	r0, r4
 800d53e:	4629      	mov	r1, r5
 800d540:	f7f3 facc 	bl	8000adc <__aeabi_dcmplt>
 800d544:	b140      	cbz	r0, 800d558 <_dtoa_r+0x168>
 800d546:	4638      	mov	r0, r7
 800d548:	f7f2 ffec 	bl	8000524 <__aeabi_i2d>
 800d54c:	4622      	mov	r2, r4
 800d54e:	462b      	mov	r3, r5
 800d550:	f7f3 faba 	bl	8000ac8 <__aeabi_dcmpeq>
 800d554:	b900      	cbnz	r0, 800d558 <_dtoa_r+0x168>
 800d556:	3f01      	subs	r7, #1
 800d558:	2f16      	cmp	r7, #22
 800d55a:	d851      	bhi.n	800d600 <_dtoa_r+0x210>
 800d55c:	4b5b      	ldr	r3, [pc, #364]	@ (800d6cc <_dtoa_r+0x2dc>)
 800d55e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d56a:	f7f3 fab7 	bl	8000adc <__aeabi_dcmplt>
 800d56e:	2800      	cmp	r0, #0
 800d570:	d048      	beq.n	800d604 <_dtoa_r+0x214>
 800d572:	3f01      	subs	r7, #1
 800d574:	2300      	movs	r3, #0
 800d576:	9312      	str	r3, [sp, #72]	@ 0x48
 800d578:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d57a:	1b9b      	subs	r3, r3, r6
 800d57c:	1e5a      	subs	r2, r3, #1
 800d57e:	bf44      	itt	mi
 800d580:	f1c3 0801 	rsbmi	r8, r3, #1
 800d584:	2300      	movmi	r3, #0
 800d586:	9208      	str	r2, [sp, #32]
 800d588:	bf54      	ite	pl
 800d58a:	f04f 0800 	movpl.w	r8, #0
 800d58e:	9308      	strmi	r3, [sp, #32]
 800d590:	2f00      	cmp	r7, #0
 800d592:	db39      	blt.n	800d608 <_dtoa_r+0x218>
 800d594:	9b08      	ldr	r3, [sp, #32]
 800d596:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d598:	443b      	add	r3, r7
 800d59a:	9308      	str	r3, [sp, #32]
 800d59c:	2300      	movs	r3, #0
 800d59e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5a2:	2b09      	cmp	r3, #9
 800d5a4:	d864      	bhi.n	800d670 <_dtoa_r+0x280>
 800d5a6:	2b05      	cmp	r3, #5
 800d5a8:	bfc4      	itt	gt
 800d5aa:	3b04      	subgt	r3, #4
 800d5ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d5ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5b0:	f1a3 0302 	sub.w	r3, r3, #2
 800d5b4:	bfcc      	ite	gt
 800d5b6:	2400      	movgt	r4, #0
 800d5b8:	2401      	movle	r4, #1
 800d5ba:	2b03      	cmp	r3, #3
 800d5bc:	d863      	bhi.n	800d686 <_dtoa_r+0x296>
 800d5be:	e8df f003 	tbb	[pc, r3]
 800d5c2:	372a      	.short	0x372a
 800d5c4:	5535      	.short	0x5535
 800d5c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d5ca:	441e      	add	r6, r3
 800d5cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d5d0:	2b20      	cmp	r3, #32
 800d5d2:	bfc1      	itttt	gt
 800d5d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d5d8:	409f      	lslgt	r7, r3
 800d5da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d5de:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d5e2:	bfd6      	itet	le
 800d5e4:	f1c3 0320 	rsble	r3, r3, #32
 800d5e8:	ea47 0003 	orrgt.w	r0, r7, r3
 800d5ec:	fa04 f003 	lslle.w	r0, r4, r3
 800d5f0:	f7f2 ff88 	bl	8000504 <__aeabi_ui2d>
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d5fa:	3e01      	subs	r6, #1
 800d5fc:	9214      	str	r2, [sp, #80]	@ 0x50
 800d5fe:	e777      	b.n	800d4f0 <_dtoa_r+0x100>
 800d600:	2301      	movs	r3, #1
 800d602:	e7b8      	b.n	800d576 <_dtoa_r+0x186>
 800d604:	9012      	str	r0, [sp, #72]	@ 0x48
 800d606:	e7b7      	b.n	800d578 <_dtoa_r+0x188>
 800d608:	427b      	negs	r3, r7
 800d60a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d60c:	2300      	movs	r3, #0
 800d60e:	eba8 0807 	sub.w	r8, r8, r7
 800d612:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d614:	e7c4      	b.n	800d5a0 <_dtoa_r+0x1b0>
 800d616:	2300      	movs	r3, #0
 800d618:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d61a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	dc35      	bgt.n	800d68c <_dtoa_r+0x29c>
 800d620:	2301      	movs	r3, #1
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	9307      	str	r3, [sp, #28]
 800d626:	461a      	mov	r2, r3
 800d628:	920e      	str	r2, [sp, #56]	@ 0x38
 800d62a:	e00b      	b.n	800d644 <_dtoa_r+0x254>
 800d62c:	2301      	movs	r3, #1
 800d62e:	e7f3      	b.n	800d618 <_dtoa_r+0x228>
 800d630:	2300      	movs	r3, #0
 800d632:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d634:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d636:	18fb      	adds	r3, r7, r3
 800d638:	9300      	str	r3, [sp, #0]
 800d63a:	3301      	adds	r3, #1
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	9307      	str	r3, [sp, #28]
 800d640:	bfb8      	it	lt
 800d642:	2301      	movlt	r3, #1
 800d644:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d648:	2100      	movs	r1, #0
 800d64a:	2204      	movs	r2, #4
 800d64c:	f102 0514 	add.w	r5, r2, #20
 800d650:	429d      	cmp	r5, r3
 800d652:	d91f      	bls.n	800d694 <_dtoa_r+0x2a4>
 800d654:	6041      	str	r1, [r0, #4]
 800d656:	4658      	mov	r0, fp
 800d658:	f001 f8da 	bl	800e810 <_Balloc>
 800d65c:	4682      	mov	sl, r0
 800d65e:	2800      	cmp	r0, #0
 800d660:	d13c      	bne.n	800d6dc <_dtoa_r+0x2ec>
 800d662:	4b1b      	ldr	r3, [pc, #108]	@ (800d6d0 <_dtoa_r+0x2e0>)
 800d664:	4602      	mov	r2, r0
 800d666:	f240 11af 	movw	r1, #431	@ 0x1af
 800d66a:	e6d8      	b.n	800d41e <_dtoa_r+0x2e>
 800d66c:	2301      	movs	r3, #1
 800d66e:	e7e0      	b.n	800d632 <_dtoa_r+0x242>
 800d670:	2401      	movs	r4, #1
 800d672:	2300      	movs	r3, #0
 800d674:	9309      	str	r3, [sp, #36]	@ 0x24
 800d676:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d678:	f04f 33ff 	mov.w	r3, #4294967295
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	9307      	str	r3, [sp, #28]
 800d680:	2200      	movs	r2, #0
 800d682:	2312      	movs	r3, #18
 800d684:	e7d0      	b.n	800d628 <_dtoa_r+0x238>
 800d686:	2301      	movs	r3, #1
 800d688:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d68a:	e7f5      	b.n	800d678 <_dtoa_r+0x288>
 800d68c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d68e:	9300      	str	r3, [sp, #0]
 800d690:	9307      	str	r3, [sp, #28]
 800d692:	e7d7      	b.n	800d644 <_dtoa_r+0x254>
 800d694:	3101      	adds	r1, #1
 800d696:	0052      	lsls	r2, r2, #1
 800d698:	e7d8      	b.n	800d64c <_dtoa_r+0x25c>
 800d69a:	bf00      	nop
 800d69c:	f3af 8000 	nop.w
 800d6a0:	636f4361 	.word	0x636f4361
 800d6a4:	3fd287a7 	.word	0x3fd287a7
 800d6a8:	8b60c8b3 	.word	0x8b60c8b3
 800d6ac:	3fc68a28 	.word	0x3fc68a28
 800d6b0:	509f79fb 	.word	0x509f79fb
 800d6b4:	3fd34413 	.word	0x3fd34413
 800d6b8:	0801210a 	.word	0x0801210a
 800d6bc:	080121cc 	.word	0x080121cc
 800d6c0:	7ff00000 	.word	0x7ff00000
 800d6c4:	080120e2 	.word	0x080120e2
 800d6c8:	3ff80000 	.word	0x3ff80000
 800d6cc:	08012328 	.word	0x08012328
 800d6d0:	08012224 	.word	0x08012224
 800d6d4:	080121c8 	.word	0x080121c8
 800d6d8:	080120e1 	.word	0x080120e1
 800d6dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d6e0:	6018      	str	r0, [r3, #0]
 800d6e2:	9b07      	ldr	r3, [sp, #28]
 800d6e4:	2b0e      	cmp	r3, #14
 800d6e6:	f200 80a4 	bhi.w	800d832 <_dtoa_r+0x442>
 800d6ea:	2c00      	cmp	r4, #0
 800d6ec:	f000 80a1 	beq.w	800d832 <_dtoa_r+0x442>
 800d6f0:	2f00      	cmp	r7, #0
 800d6f2:	dd33      	ble.n	800d75c <_dtoa_r+0x36c>
 800d6f4:	4bad      	ldr	r3, [pc, #692]	@ (800d9ac <_dtoa_r+0x5bc>)
 800d6f6:	f007 020f 	and.w	r2, r7, #15
 800d6fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6fe:	ed93 7b00 	vldr	d7, [r3]
 800d702:	05f8      	lsls	r0, r7, #23
 800d704:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d708:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d70c:	d516      	bpl.n	800d73c <_dtoa_r+0x34c>
 800d70e:	4ba8      	ldr	r3, [pc, #672]	@ (800d9b0 <_dtoa_r+0x5c0>)
 800d710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d714:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d718:	f7f3 f898 	bl	800084c <__aeabi_ddiv>
 800d71c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d720:	f004 040f 	and.w	r4, r4, #15
 800d724:	2603      	movs	r6, #3
 800d726:	4da2      	ldr	r5, [pc, #648]	@ (800d9b0 <_dtoa_r+0x5c0>)
 800d728:	b954      	cbnz	r4, 800d740 <_dtoa_r+0x350>
 800d72a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d72e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d732:	f7f3 f88b 	bl	800084c <__aeabi_ddiv>
 800d736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d73a:	e028      	b.n	800d78e <_dtoa_r+0x39e>
 800d73c:	2602      	movs	r6, #2
 800d73e:	e7f2      	b.n	800d726 <_dtoa_r+0x336>
 800d740:	07e1      	lsls	r1, r4, #31
 800d742:	d508      	bpl.n	800d756 <_dtoa_r+0x366>
 800d744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d748:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d74c:	f7f2 ff54 	bl	80005f8 <__aeabi_dmul>
 800d750:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d754:	3601      	adds	r6, #1
 800d756:	1064      	asrs	r4, r4, #1
 800d758:	3508      	adds	r5, #8
 800d75a:	e7e5      	b.n	800d728 <_dtoa_r+0x338>
 800d75c:	f000 80d2 	beq.w	800d904 <_dtoa_r+0x514>
 800d760:	427c      	negs	r4, r7
 800d762:	4b92      	ldr	r3, [pc, #584]	@ (800d9ac <_dtoa_r+0x5bc>)
 800d764:	4d92      	ldr	r5, [pc, #584]	@ (800d9b0 <_dtoa_r+0x5c0>)
 800d766:	f004 020f 	and.w	r2, r4, #15
 800d76a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d772:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d776:	f7f2 ff3f 	bl	80005f8 <__aeabi_dmul>
 800d77a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d77e:	1124      	asrs	r4, r4, #4
 800d780:	2300      	movs	r3, #0
 800d782:	2602      	movs	r6, #2
 800d784:	2c00      	cmp	r4, #0
 800d786:	f040 80b2 	bne.w	800d8ee <_dtoa_r+0x4fe>
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d1d3      	bne.n	800d736 <_dtoa_r+0x346>
 800d78e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d790:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d794:	2b00      	cmp	r3, #0
 800d796:	f000 80b7 	beq.w	800d908 <_dtoa_r+0x518>
 800d79a:	4b86      	ldr	r3, [pc, #536]	@ (800d9b4 <_dtoa_r+0x5c4>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	4620      	mov	r0, r4
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	f7f3 f99b 	bl	8000adc <__aeabi_dcmplt>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	f000 80ae 	beq.w	800d908 <_dtoa_r+0x518>
 800d7ac:	9b07      	ldr	r3, [sp, #28]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	f000 80aa 	beq.w	800d908 <_dtoa_r+0x518>
 800d7b4:	9b00      	ldr	r3, [sp, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	dd37      	ble.n	800d82a <_dtoa_r+0x43a>
 800d7ba:	1e7b      	subs	r3, r7, #1
 800d7bc:	9304      	str	r3, [sp, #16]
 800d7be:	4620      	mov	r0, r4
 800d7c0:	4b7d      	ldr	r3, [pc, #500]	@ (800d9b8 <_dtoa_r+0x5c8>)
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	4629      	mov	r1, r5
 800d7c6:	f7f2 ff17 	bl	80005f8 <__aeabi_dmul>
 800d7ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7ce:	9c00      	ldr	r4, [sp, #0]
 800d7d0:	3601      	adds	r6, #1
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	f7f2 fea6 	bl	8000524 <__aeabi_i2d>
 800d7d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7dc:	f7f2 ff0c 	bl	80005f8 <__aeabi_dmul>
 800d7e0:	4b76      	ldr	r3, [pc, #472]	@ (800d9bc <_dtoa_r+0x5cc>)
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f7f2 fd52 	bl	800028c <__adddf3>
 800d7e8:	4605      	mov	r5, r0
 800d7ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d7ee:	2c00      	cmp	r4, #0
 800d7f0:	f040 808d 	bne.w	800d90e <_dtoa_r+0x51e>
 800d7f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7f8:	4b71      	ldr	r3, [pc, #452]	@ (800d9c0 <_dtoa_r+0x5d0>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	f7f2 fd44 	bl	8000288 <__aeabi_dsub>
 800d800:	4602      	mov	r2, r0
 800d802:	460b      	mov	r3, r1
 800d804:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d808:	462a      	mov	r2, r5
 800d80a:	4633      	mov	r3, r6
 800d80c:	f7f3 f984 	bl	8000b18 <__aeabi_dcmpgt>
 800d810:	2800      	cmp	r0, #0
 800d812:	f040 828b 	bne.w	800dd2c <_dtoa_r+0x93c>
 800d816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d81a:	462a      	mov	r2, r5
 800d81c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d820:	f7f3 f95c 	bl	8000adc <__aeabi_dcmplt>
 800d824:	2800      	cmp	r0, #0
 800d826:	f040 8128 	bne.w	800da7a <_dtoa_r+0x68a>
 800d82a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d82e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d832:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d834:	2b00      	cmp	r3, #0
 800d836:	f2c0 815a 	blt.w	800daee <_dtoa_r+0x6fe>
 800d83a:	2f0e      	cmp	r7, #14
 800d83c:	f300 8157 	bgt.w	800daee <_dtoa_r+0x6fe>
 800d840:	4b5a      	ldr	r3, [pc, #360]	@ (800d9ac <_dtoa_r+0x5bc>)
 800d842:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d846:	ed93 7b00 	vldr	d7, [r3]
 800d84a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	ed8d 7b00 	vstr	d7, [sp]
 800d852:	da03      	bge.n	800d85c <_dtoa_r+0x46c>
 800d854:	9b07      	ldr	r3, [sp, #28]
 800d856:	2b00      	cmp	r3, #0
 800d858:	f340 8101 	ble.w	800da5e <_dtoa_r+0x66e>
 800d85c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d860:	4656      	mov	r6, sl
 800d862:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d866:	4620      	mov	r0, r4
 800d868:	4629      	mov	r1, r5
 800d86a:	f7f2 ffef 	bl	800084c <__aeabi_ddiv>
 800d86e:	f7f3 f973 	bl	8000b58 <__aeabi_d2iz>
 800d872:	4680      	mov	r8, r0
 800d874:	f7f2 fe56 	bl	8000524 <__aeabi_i2d>
 800d878:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d87c:	f7f2 febc 	bl	80005f8 <__aeabi_dmul>
 800d880:	4602      	mov	r2, r0
 800d882:	460b      	mov	r3, r1
 800d884:	4620      	mov	r0, r4
 800d886:	4629      	mov	r1, r5
 800d888:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d88c:	f7f2 fcfc 	bl	8000288 <__aeabi_dsub>
 800d890:	f806 4b01 	strb.w	r4, [r6], #1
 800d894:	9d07      	ldr	r5, [sp, #28]
 800d896:	eba6 040a 	sub.w	r4, r6, sl
 800d89a:	42a5      	cmp	r5, r4
 800d89c:	4602      	mov	r2, r0
 800d89e:	460b      	mov	r3, r1
 800d8a0:	f040 8117 	bne.w	800dad2 <_dtoa_r+0x6e2>
 800d8a4:	f7f2 fcf2 	bl	800028c <__adddf3>
 800d8a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	460d      	mov	r5, r1
 800d8b0:	f7f3 f932 	bl	8000b18 <__aeabi_dcmpgt>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	f040 80f9 	bne.w	800daac <_dtoa_r+0x6bc>
 800d8ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8be:	4620      	mov	r0, r4
 800d8c0:	4629      	mov	r1, r5
 800d8c2:	f7f3 f901 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8c6:	b118      	cbz	r0, 800d8d0 <_dtoa_r+0x4e0>
 800d8c8:	f018 0f01 	tst.w	r8, #1
 800d8cc:	f040 80ee 	bne.w	800daac <_dtoa_r+0x6bc>
 800d8d0:	4649      	mov	r1, r9
 800d8d2:	4658      	mov	r0, fp
 800d8d4:	f000 ffdc 	bl	800e890 <_Bfree>
 800d8d8:	2300      	movs	r3, #0
 800d8da:	7033      	strb	r3, [r6, #0]
 800d8dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d8de:	3701      	adds	r7, #1
 800d8e0:	601f      	str	r7, [r3, #0]
 800d8e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	f000 831d 	beq.w	800df24 <_dtoa_r+0xb34>
 800d8ea:	601e      	str	r6, [r3, #0]
 800d8ec:	e31a      	b.n	800df24 <_dtoa_r+0xb34>
 800d8ee:	07e2      	lsls	r2, r4, #31
 800d8f0:	d505      	bpl.n	800d8fe <_dtoa_r+0x50e>
 800d8f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d8f6:	f7f2 fe7f 	bl	80005f8 <__aeabi_dmul>
 800d8fa:	3601      	adds	r6, #1
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	1064      	asrs	r4, r4, #1
 800d900:	3508      	adds	r5, #8
 800d902:	e73f      	b.n	800d784 <_dtoa_r+0x394>
 800d904:	2602      	movs	r6, #2
 800d906:	e742      	b.n	800d78e <_dtoa_r+0x39e>
 800d908:	9c07      	ldr	r4, [sp, #28]
 800d90a:	9704      	str	r7, [sp, #16]
 800d90c:	e761      	b.n	800d7d2 <_dtoa_r+0x3e2>
 800d90e:	4b27      	ldr	r3, [pc, #156]	@ (800d9ac <_dtoa_r+0x5bc>)
 800d910:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d912:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d916:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d91a:	4454      	add	r4, sl
 800d91c:	2900      	cmp	r1, #0
 800d91e:	d053      	beq.n	800d9c8 <_dtoa_r+0x5d8>
 800d920:	4928      	ldr	r1, [pc, #160]	@ (800d9c4 <_dtoa_r+0x5d4>)
 800d922:	2000      	movs	r0, #0
 800d924:	f7f2 ff92 	bl	800084c <__aeabi_ddiv>
 800d928:	4633      	mov	r3, r6
 800d92a:	462a      	mov	r2, r5
 800d92c:	f7f2 fcac 	bl	8000288 <__aeabi_dsub>
 800d930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d934:	4656      	mov	r6, sl
 800d936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d93a:	f7f3 f90d 	bl	8000b58 <__aeabi_d2iz>
 800d93e:	4605      	mov	r5, r0
 800d940:	f7f2 fdf0 	bl	8000524 <__aeabi_i2d>
 800d944:	4602      	mov	r2, r0
 800d946:	460b      	mov	r3, r1
 800d948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d94c:	f7f2 fc9c 	bl	8000288 <__aeabi_dsub>
 800d950:	3530      	adds	r5, #48	@ 0x30
 800d952:	4602      	mov	r2, r0
 800d954:	460b      	mov	r3, r1
 800d956:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d95a:	f806 5b01 	strb.w	r5, [r6], #1
 800d95e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d962:	f7f3 f8bb 	bl	8000adc <__aeabi_dcmplt>
 800d966:	2800      	cmp	r0, #0
 800d968:	d171      	bne.n	800da4e <_dtoa_r+0x65e>
 800d96a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d96e:	4911      	ldr	r1, [pc, #68]	@ (800d9b4 <_dtoa_r+0x5c4>)
 800d970:	2000      	movs	r0, #0
 800d972:	f7f2 fc89 	bl	8000288 <__aeabi_dsub>
 800d976:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d97a:	f7f3 f8af 	bl	8000adc <__aeabi_dcmplt>
 800d97e:	2800      	cmp	r0, #0
 800d980:	f040 8095 	bne.w	800daae <_dtoa_r+0x6be>
 800d984:	42a6      	cmp	r6, r4
 800d986:	f43f af50 	beq.w	800d82a <_dtoa_r+0x43a>
 800d98a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d98e:	4b0a      	ldr	r3, [pc, #40]	@ (800d9b8 <_dtoa_r+0x5c8>)
 800d990:	2200      	movs	r2, #0
 800d992:	f7f2 fe31 	bl	80005f8 <__aeabi_dmul>
 800d996:	4b08      	ldr	r3, [pc, #32]	@ (800d9b8 <_dtoa_r+0x5c8>)
 800d998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d99c:	2200      	movs	r2, #0
 800d99e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9a2:	f7f2 fe29 	bl	80005f8 <__aeabi_dmul>
 800d9a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9aa:	e7c4      	b.n	800d936 <_dtoa_r+0x546>
 800d9ac:	08012328 	.word	0x08012328
 800d9b0:	08012300 	.word	0x08012300
 800d9b4:	3ff00000 	.word	0x3ff00000
 800d9b8:	40240000 	.word	0x40240000
 800d9bc:	401c0000 	.word	0x401c0000
 800d9c0:	40140000 	.word	0x40140000
 800d9c4:	3fe00000 	.word	0x3fe00000
 800d9c8:	4631      	mov	r1, r6
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	f7f2 fe14 	bl	80005f8 <__aeabi_dmul>
 800d9d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d9d4:	9415      	str	r4, [sp, #84]	@ 0x54
 800d9d6:	4656      	mov	r6, sl
 800d9d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9dc:	f7f3 f8bc 	bl	8000b58 <__aeabi_d2iz>
 800d9e0:	4605      	mov	r5, r0
 800d9e2:	f7f2 fd9f 	bl	8000524 <__aeabi_i2d>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9ee:	f7f2 fc4b 	bl	8000288 <__aeabi_dsub>
 800d9f2:	3530      	adds	r5, #48	@ 0x30
 800d9f4:	f806 5b01 	strb.w	r5, [r6], #1
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	42a6      	cmp	r6, r4
 800d9fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da02:	f04f 0200 	mov.w	r2, #0
 800da06:	d124      	bne.n	800da52 <_dtoa_r+0x662>
 800da08:	4bac      	ldr	r3, [pc, #688]	@ (800dcbc <_dtoa_r+0x8cc>)
 800da0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da0e:	f7f2 fc3d 	bl	800028c <__adddf3>
 800da12:	4602      	mov	r2, r0
 800da14:	460b      	mov	r3, r1
 800da16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da1a:	f7f3 f87d 	bl	8000b18 <__aeabi_dcmpgt>
 800da1e:	2800      	cmp	r0, #0
 800da20:	d145      	bne.n	800daae <_dtoa_r+0x6be>
 800da22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da26:	49a5      	ldr	r1, [pc, #660]	@ (800dcbc <_dtoa_r+0x8cc>)
 800da28:	2000      	movs	r0, #0
 800da2a:	f7f2 fc2d 	bl	8000288 <__aeabi_dsub>
 800da2e:	4602      	mov	r2, r0
 800da30:	460b      	mov	r3, r1
 800da32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da36:	f7f3 f851 	bl	8000adc <__aeabi_dcmplt>
 800da3a:	2800      	cmp	r0, #0
 800da3c:	f43f aef5 	beq.w	800d82a <_dtoa_r+0x43a>
 800da40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800da42:	1e73      	subs	r3, r6, #1
 800da44:	9315      	str	r3, [sp, #84]	@ 0x54
 800da46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da4a:	2b30      	cmp	r3, #48	@ 0x30
 800da4c:	d0f8      	beq.n	800da40 <_dtoa_r+0x650>
 800da4e:	9f04      	ldr	r7, [sp, #16]
 800da50:	e73e      	b.n	800d8d0 <_dtoa_r+0x4e0>
 800da52:	4b9b      	ldr	r3, [pc, #620]	@ (800dcc0 <_dtoa_r+0x8d0>)
 800da54:	f7f2 fdd0 	bl	80005f8 <__aeabi_dmul>
 800da58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da5c:	e7bc      	b.n	800d9d8 <_dtoa_r+0x5e8>
 800da5e:	d10c      	bne.n	800da7a <_dtoa_r+0x68a>
 800da60:	4b98      	ldr	r3, [pc, #608]	@ (800dcc4 <_dtoa_r+0x8d4>)
 800da62:	2200      	movs	r2, #0
 800da64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da68:	f7f2 fdc6 	bl	80005f8 <__aeabi_dmul>
 800da6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da70:	f7f3 f848 	bl	8000b04 <__aeabi_dcmpge>
 800da74:	2800      	cmp	r0, #0
 800da76:	f000 8157 	beq.w	800dd28 <_dtoa_r+0x938>
 800da7a:	2400      	movs	r4, #0
 800da7c:	4625      	mov	r5, r4
 800da7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da80:	43db      	mvns	r3, r3
 800da82:	9304      	str	r3, [sp, #16]
 800da84:	4656      	mov	r6, sl
 800da86:	2700      	movs	r7, #0
 800da88:	4621      	mov	r1, r4
 800da8a:	4658      	mov	r0, fp
 800da8c:	f000 ff00 	bl	800e890 <_Bfree>
 800da90:	2d00      	cmp	r5, #0
 800da92:	d0dc      	beq.n	800da4e <_dtoa_r+0x65e>
 800da94:	b12f      	cbz	r7, 800daa2 <_dtoa_r+0x6b2>
 800da96:	42af      	cmp	r7, r5
 800da98:	d003      	beq.n	800daa2 <_dtoa_r+0x6b2>
 800da9a:	4639      	mov	r1, r7
 800da9c:	4658      	mov	r0, fp
 800da9e:	f000 fef7 	bl	800e890 <_Bfree>
 800daa2:	4629      	mov	r1, r5
 800daa4:	4658      	mov	r0, fp
 800daa6:	f000 fef3 	bl	800e890 <_Bfree>
 800daaa:	e7d0      	b.n	800da4e <_dtoa_r+0x65e>
 800daac:	9704      	str	r7, [sp, #16]
 800daae:	4633      	mov	r3, r6
 800dab0:	461e      	mov	r6, r3
 800dab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dab6:	2a39      	cmp	r2, #57	@ 0x39
 800dab8:	d107      	bne.n	800daca <_dtoa_r+0x6da>
 800daba:	459a      	cmp	sl, r3
 800dabc:	d1f8      	bne.n	800dab0 <_dtoa_r+0x6c0>
 800dabe:	9a04      	ldr	r2, [sp, #16]
 800dac0:	3201      	adds	r2, #1
 800dac2:	9204      	str	r2, [sp, #16]
 800dac4:	2230      	movs	r2, #48	@ 0x30
 800dac6:	f88a 2000 	strb.w	r2, [sl]
 800daca:	781a      	ldrb	r2, [r3, #0]
 800dacc:	3201      	adds	r2, #1
 800dace:	701a      	strb	r2, [r3, #0]
 800dad0:	e7bd      	b.n	800da4e <_dtoa_r+0x65e>
 800dad2:	4b7b      	ldr	r3, [pc, #492]	@ (800dcc0 <_dtoa_r+0x8d0>)
 800dad4:	2200      	movs	r2, #0
 800dad6:	f7f2 fd8f 	bl	80005f8 <__aeabi_dmul>
 800dada:	2200      	movs	r2, #0
 800dadc:	2300      	movs	r3, #0
 800dade:	4604      	mov	r4, r0
 800dae0:	460d      	mov	r5, r1
 800dae2:	f7f2 fff1 	bl	8000ac8 <__aeabi_dcmpeq>
 800dae6:	2800      	cmp	r0, #0
 800dae8:	f43f aebb 	beq.w	800d862 <_dtoa_r+0x472>
 800daec:	e6f0      	b.n	800d8d0 <_dtoa_r+0x4e0>
 800daee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800daf0:	2a00      	cmp	r2, #0
 800daf2:	f000 80db 	beq.w	800dcac <_dtoa_r+0x8bc>
 800daf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800daf8:	2a01      	cmp	r2, #1
 800dafa:	f300 80bf 	bgt.w	800dc7c <_dtoa_r+0x88c>
 800dafe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800db00:	2a00      	cmp	r2, #0
 800db02:	f000 80b7 	beq.w	800dc74 <_dtoa_r+0x884>
 800db06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800db0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db0c:	4646      	mov	r6, r8
 800db0e:	9a08      	ldr	r2, [sp, #32]
 800db10:	2101      	movs	r1, #1
 800db12:	441a      	add	r2, r3
 800db14:	4658      	mov	r0, fp
 800db16:	4498      	add	r8, r3
 800db18:	9208      	str	r2, [sp, #32]
 800db1a:	f000 ffb7 	bl	800ea8c <__i2b>
 800db1e:	4605      	mov	r5, r0
 800db20:	b15e      	cbz	r6, 800db3a <_dtoa_r+0x74a>
 800db22:	9b08      	ldr	r3, [sp, #32]
 800db24:	2b00      	cmp	r3, #0
 800db26:	dd08      	ble.n	800db3a <_dtoa_r+0x74a>
 800db28:	42b3      	cmp	r3, r6
 800db2a:	9a08      	ldr	r2, [sp, #32]
 800db2c:	bfa8      	it	ge
 800db2e:	4633      	movge	r3, r6
 800db30:	eba8 0803 	sub.w	r8, r8, r3
 800db34:	1af6      	subs	r6, r6, r3
 800db36:	1ad3      	subs	r3, r2, r3
 800db38:	9308      	str	r3, [sp, #32]
 800db3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db3c:	b1f3      	cbz	r3, 800db7c <_dtoa_r+0x78c>
 800db3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db40:	2b00      	cmp	r3, #0
 800db42:	f000 80b7 	beq.w	800dcb4 <_dtoa_r+0x8c4>
 800db46:	b18c      	cbz	r4, 800db6c <_dtoa_r+0x77c>
 800db48:	4629      	mov	r1, r5
 800db4a:	4622      	mov	r2, r4
 800db4c:	4658      	mov	r0, fp
 800db4e:	f001 f85d 	bl	800ec0c <__pow5mult>
 800db52:	464a      	mov	r2, r9
 800db54:	4601      	mov	r1, r0
 800db56:	4605      	mov	r5, r0
 800db58:	4658      	mov	r0, fp
 800db5a:	f000 ffad 	bl	800eab8 <__multiply>
 800db5e:	4649      	mov	r1, r9
 800db60:	9004      	str	r0, [sp, #16]
 800db62:	4658      	mov	r0, fp
 800db64:	f000 fe94 	bl	800e890 <_Bfree>
 800db68:	9b04      	ldr	r3, [sp, #16]
 800db6a:	4699      	mov	r9, r3
 800db6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db6e:	1b1a      	subs	r2, r3, r4
 800db70:	d004      	beq.n	800db7c <_dtoa_r+0x78c>
 800db72:	4649      	mov	r1, r9
 800db74:	4658      	mov	r0, fp
 800db76:	f001 f849 	bl	800ec0c <__pow5mult>
 800db7a:	4681      	mov	r9, r0
 800db7c:	2101      	movs	r1, #1
 800db7e:	4658      	mov	r0, fp
 800db80:	f000 ff84 	bl	800ea8c <__i2b>
 800db84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db86:	4604      	mov	r4, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f000 81cf 	beq.w	800df2c <_dtoa_r+0xb3c>
 800db8e:	461a      	mov	r2, r3
 800db90:	4601      	mov	r1, r0
 800db92:	4658      	mov	r0, fp
 800db94:	f001 f83a 	bl	800ec0c <__pow5mult>
 800db98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	4604      	mov	r4, r0
 800db9e:	f300 8095 	bgt.w	800dccc <_dtoa_r+0x8dc>
 800dba2:	9b02      	ldr	r3, [sp, #8]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f040 8087 	bne.w	800dcb8 <_dtoa_r+0x8c8>
 800dbaa:	9b03      	ldr	r3, [sp, #12]
 800dbac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	f040 8089 	bne.w	800dcc8 <_dtoa_r+0x8d8>
 800dbb6:	9b03      	ldr	r3, [sp, #12]
 800dbb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dbbc:	0d1b      	lsrs	r3, r3, #20
 800dbbe:	051b      	lsls	r3, r3, #20
 800dbc0:	b12b      	cbz	r3, 800dbce <_dtoa_r+0x7de>
 800dbc2:	9b08      	ldr	r3, [sp, #32]
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	9308      	str	r3, [sp, #32]
 800dbc8:	f108 0801 	add.w	r8, r8, #1
 800dbcc:	2301      	movs	r3, #1
 800dbce:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	f000 81b0 	beq.w	800df38 <_dtoa_r+0xb48>
 800dbd8:	6923      	ldr	r3, [r4, #16]
 800dbda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dbde:	6918      	ldr	r0, [r3, #16]
 800dbe0:	f000 ff08 	bl	800e9f4 <__hi0bits>
 800dbe4:	f1c0 0020 	rsb	r0, r0, #32
 800dbe8:	9b08      	ldr	r3, [sp, #32]
 800dbea:	4418      	add	r0, r3
 800dbec:	f010 001f 	ands.w	r0, r0, #31
 800dbf0:	d077      	beq.n	800dce2 <_dtoa_r+0x8f2>
 800dbf2:	f1c0 0320 	rsb	r3, r0, #32
 800dbf6:	2b04      	cmp	r3, #4
 800dbf8:	dd6b      	ble.n	800dcd2 <_dtoa_r+0x8e2>
 800dbfa:	9b08      	ldr	r3, [sp, #32]
 800dbfc:	f1c0 001c 	rsb	r0, r0, #28
 800dc00:	4403      	add	r3, r0
 800dc02:	4480      	add	r8, r0
 800dc04:	4406      	add	r6, r0
 800dc06:	9308      	str	r3, [sp, #32]
 800dc08:	f1b8 0f00 	cmp.w	r8, #0
 800dc0c:	dd05      	ble.n	800dc1a <_dtoa_r+0x82a>
 800dc0e:	4649      	mov	r1, r9
 800dc10:	4642      	mov	r2, r8
 800dc12:	4658      	mov	r0, fp
 800dc14:	f001 f854 	bl	800ecc0 <__lshift>
 800dc18:	4681      	mov	r9, r0
 800dc1a:	9b08      	ldr	r3, [sp, #32]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	dd05      	ble.n	800dc2c <_dtoa_r+0x83c>
 800dc20:	4621      	mov	r1, r4
 800dc22:	461a      	mov	r2, r3
 800dc24:	4658      	mov	r0, fp
 800dc26:	f001 f84b 	bl	800ecc0 <__lshift>
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d059      	beq.n	800dce6 <_dtoa_r+0x8f6>
 800dc32:	4621      	mov	r1, r4
 800dc34:	4648      	mov	r0, r9
 800dc36:	f001 f8af 	bl	800ed98 <__mcmp>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	da53      	bge.n	800dce6 <_dtoa_r+0x8f6>
 800dc3e:	1e7b      	subs	r3, r7, #1
 800dc40:	9304      	str	r3, [sp, #16]
 800dc42:	4649      	mov	r1, r9
 800dc44:	2300      	movs	r3, #0
 800dc46:	220a      	movs	r2, #10
 800dc48:	4658      	mov	r0, fp
 800dc4a:	f000 fe43 	bl	800e8d4 <__multadd>
 800dc4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc50:	4681      	mov	r9, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f000 8172 	beq.w	800df3c <_dtoa_r+0xb4c>
 800dc58:	2300      	movs	r3, #0
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	220a      	movs	r2, #10
 800dc5e:	4658      	mov	r0, fp
 800dc60:	f000 fe38 	bl	800e8d4 <__multadd>
 800dc64:	9b00      	ldr	r3, [sp, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	4605      	mov	r5, r0
 800dc6a:	dc67      	bgt.n	800dd3c <_dtoa_r+0x94c>
 800dc6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	dc41      	bgt.n	800dcf6 <_dtoa_r+0x906>
 800dc72:	e063      	b.n	800dd3c <_dtoa_r+0x94c>
 800dc74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dc76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dc7a:	e746      	b.n	800db0a <_dtoa_r+0x71a>
 800dc7c:	9b07      	ldr	r3, [sp, #28]
 800dc7e:	1e5c      	subs	r4, r3, #1
 800dc80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc82:	42a3      	cmp	r3, r4
 800dc84:	bfbf      	itttt	lt
 800dc86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dc88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dc8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dc8c:	1ae3      	sublt	r3, r4, r3
 800dc8e:	bfb4      	ite	lt
 800dc90:	18d2      	addlt	r2, r2, r3
 800dc92:	1b1c      	subge	r4, r3, r4
 800dc94:	9b07      	ldr	r3, [sp, #28]
 800dc96:	bfbc      	itt	lt
 800dc98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dc9a:	2400      	movlt	r4, #0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	bfb5      	itete	lt
 800dca0:	eba8 0603 	sublt.w	r6, r8, r3
 800dca4:	9b07      	ldrge	r3, [sp, #28]
 800dca6:	2300      	movlt	r3, #0
 800dca8:	4646      	movge	r6, r8
 800dcaa:	e730      	b.n	800db0e <_dtoa_r+0x71e>
 800dcac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dcae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dcb0:	4646      	mov	r6, r8
 800dcb2:	e735      	b.n	800db20 <_dtoa_r+0x730>
 800dcb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcb6:	e75c      	b.n	800db72 <_dtoa_r+0x782>
 800dcb8:	2300      	movs	r3, #0
 800dcba:	e788      	b.n	800dbce <_dtoa_r+0x7de>
 800dcbc:	3fe00000 	.word	0x3fe00000
 800dcc0:	40240000 	.word	0x40240000
 800dcc4:	40140000 	.word	0x40140000
 800dcc8:	9b02      	ldr	r3, [sp, #8]
 800dcca:	e780      	b.n	800dbce <_dtoa_r+0x7de>
 800dccc:	2300      	movs	r3, #0
 800dcce:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcd0:	e782      	b.n	800dbd8 <_dtoa_r+0x7e8>
 800dcd2:	d099      	beq.n	800dc08 <_dtoa_r+0x818>
 800dcd4:	9a08      	ldr	r2, [sp, #32]
 800dcd6:	331c      	adds	r3, #28
 800dcd8:	441a      	add	r2, r3
 800dcda:	4498      	add	r8, r3
 800dcdc:	441e      	add	r6, r3
 800dcde:	9208      	str	r2, [sp, #32]
 800dce0:	e792      	b.n	800dc08 <_dtoa_r+0x818>
 800dce2:	4603      	mov	r3, r0
 800dce4:	e7f6      	b.n	800dcd4 <_dtoa_r+0x8e4>
 800dce6:	9b07      	ldr	r3, [sp, #28]
 800dce8:	9704      	str	r7, [sp, #16]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	dc20      	bgt.n	800dd30 <_dtoa_r+0x940>
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcf2:	2b02      	cmp	r3, #2
 800dcf4:	dd1e      	ble.n	800dd34 <_dtoa_r+0x944>
 800dcf6:	9b00      	ldr	r3, [sp, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	f47f aec0 	bne.w	800da7e <_dtoa_r+0x68e>
 800dcfe:	4621      	mov	r1, r4
 800dd00:	2205      	movs	r2, #5
 800dd02:	4658      	mov	r0, fp
 800dd04:	f000 fde6 	bl	800e8d4 <__multadd>
 800dd08:	4601      	mov	r1, r0
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	4648      	mov	r0, r9
 800dd0e:	f001 f843 	bl	800ed98 <__mcmp>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	f77f aeb3 	ble.w	800da7e <_dtoa_r+0x68e>
 800dd18:	4656      	mov	r6, sl
 800dd1a:	2331      	movs	r3, #49	@ 0x31
 800dd1c:	f806 3b01 	strb.w	r3, [r6], #1
 800dd20:	9b04      	ldr	r3, [sp, #16]
 800dd22:	3301      	adds	r3, #1
 800dd24:	9304      	str	r3, [sp, #16]
 800dd26:	e6ae      	b.n	800da86 <_dtoa_r+0x696>
 800dd28:	9c07      	ldr	r4, [sp, #28]
 800dd2a:	9704      	str	r7, [sp, #16]
 800dd2c:	4625      	mov	r5, r4
 800dd2e:	e7f3      	b.n	800dd18 <_dtoa_r+0x928>
 800dd30:	9b07      	ldr	r3, [sp, #28]
 800dd32:	9300      	str	r3, [sp, #0]
 800dd34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	f000 8104 	beq.w	800df44 <_dtoa_r+0xb54>
 800dd3c:	2e00      	cmp	r6, #0
 800dd3e:	dd05      	ble.n	800dd4c <_dtoa_r+0x95c>
 800dd40:	4629      	mov	r1, r5
 800dd42:	4632      	mov	r2, r6
 800dd44:	4658      	mov	r0, fp
 800dd46:	f000 ffbb 	bl	800ecc0 <__lshift>
 800dd4a:	4605      	mov	r5, r0
 800dd4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d05a      	beq.n	800de08 <_dtoa_r+0xa18>
 800dd52:	6869      	ldr	r1, [r5, #4]
 800dd54:	4658      	mov	r0, fp
 800dd56:	f000 fd5b 	bl	800e810 <_Balloc>
 800dd5a:	4606      	mov	r6, r0
 800dd5c:	b928      	cbnz	r0, 800dd6a <_dtoa_r+0x97a>
 800dd5e:	4b84      	ldr	r3, [pc, #528]	@ (800df70 <_dtoa_r+0xb80>)
 800dd60:	4602      	mov	r2, r0
 800dd62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dd66:	f7ff bb5a 	b.w	800d41e <_dtoa_r+0x2e>
 800dd6a:	692a      	ldr	r2, [r5, #16]
 800dd6c:	3202      	adds	r2, #2
 800dd6e:	0092      	lsls	r2, r2, #2
 800dd70:	f105 010c 	add.w	r1, r5, #12
 800dd74:	300c      	adds	r0, #12
 800dd76:	f7ff fa76 	bl	800d266 <memcpy>
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	4631      	mov	r1, r6
 800dd7e:	4658      	mov	r0, fp
 800dd80:	f000 ff9e 	bl	800ecc0 <__lshift>
 800dd84:	f10a 0301 	add.w	r3, sl, #1
 800dd88:	9307      	str	r3, [sp, #28]
 800dd8a:	9b00      	ldr	r3, [sp, #0]
 800dd8c:	4453      	add	r3, sl
 800dd8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd90:	9b02      	ldr	r3, [sp, #8]
 800dd92:	f003 0301 	and.w	r3, r3, #1
 800dd96:	462f      	mov	r7, r5
 800dd98:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd9a:	4605      	mov	r5, r0
 800dd9c:	9b07      	ldr	r3, [sp, #28]
 800dd9e:	4621      	mov	r1, r4
 800dda0:	3b01      	subs	r3, #1
 800dda2:	4648      	mov	r0, r9
 800dda4:	9300      	str	r3, [sp, #0]
 800dda6:	f7ff fa9b 	bl	800d2e0 <quorem>
 800ddaa:	4639      	mov	r1, r7
 800ddac:	9002      	str	r0, [sp, #8]
 800ddae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ddb2:	4648      	mov	r0, r9
 800ddb4:	f000 fff0 	bl	800ed98 <__mcmp>
 800ddb8:	462a      	mov	r2, r5
 800ddba:	9008      	str	r0, [sp, #32]
 800ddbc:	4621      	mov	r1, r4
 800ddbe:	4658      	mov	r0, fp
 800ddc0:	f001 f806 	bl	800edd0 <__mdiff>
 800ddc4:	68c2      	ldr	r2, [r0, #12]
 800ddc6:	4606      	mov	r6, r0
 800ddc8:	bb02      	cbnz	r2, 800de0c <_dtoa_r+0xa1c>
 800ddca:	4601      	mov	r1, r0
 800ddcc:	4648      	mov	r0, r9
 800ddce:	f000 ffe3 	bl	800ed98 <__mcmp>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	4631      	mov	r1, r6
 800ddd6:	4658      	mov	r0, fp
 800ddd8:	920e      	str	r2, [sp, #56]	@ 0x38
 800ddda:	f000 fd59 	bl	800e890 <_Bfree>
 800ddde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dde0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dde2:	9e07      	ldr	r6, [sp, #28]
 800dde4:	ea43 0102 	orr.w	r1, r3, r2
 800dde8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddea:	4319      	orrs	r1, r3
 800ddec:	d110      	bne.n	800de10 <_dtoa_r+0xa20>
 800ddee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ddf2:	d029      	beq.n	800de48 <_dtoa_r+0xa58>
 800ddf4:	9b08      	ldr	r3, [sp, #32]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	dd02      	ble.n	800de00 <_dtoa_r+0xa10>
 800ddfa:	9b02      	ldr	r3, [sp, #8]
 800ddfc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800de00:	9b00      	ldr	r3, [sp, #0]
 800de02:	f883 8000 	strb.w	r8, [r3]
 800de06:	e63f      	b.n	800da88 <_dtoa_r+0x698>
 800de08:	4628      	mov	r0, r5
 800de0a:	e7bb      	b.n	800dd84 <_dtoa_r+0x994>
 800de0c:	2201      	movs	r2, #1
 800de0e:	e7e1      	b.n	800ddd4 <_dtoa_r+0x9e4>
 800de10:	9b08      	ldr	r3, [sp, #32]
 800de12:	2b00      	cmp	r3, #0
 800de14:	db04      	blt.n	800de20 <_dtoa_r+0xa30>
 800de16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de18:	430b      	orrs	r3, r1
 800de1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800de1c:	430b      	orrs	r3, r1
 800de1e:	d120      	bne.n	800de62 <_dtoa_r+0xa72>
 800de20:	2a00      	cmp	r2, #0
 800de22:	dded      	ble.n	800de00 <_dtoa_r+0xa10>
 800de24:	4649      	mov	r1, r9
 800de26:	2201      	movs	r2, #1
 800de28:	4658      	mov	r0, fp
 800de2a:	f000 ff49 	bl	800ecc0 <__lshift>
 800de2e:	4621      	mov	r1, r4
 800de30:	4681      	mov	r9, r0
 800de32:	f000 ffb1 	bl	800ed98 <__mcmp>
 800de36:	2800      	cmp	r0, #0
 800de38:	dc03      	bgt.n	800de42 <_dtoa_r+0xa52>
 800de3a:	d1e1      	bne.n	800de00 <_dtoa_r+0xa10>
 800de3c:	f018 0f01 	tst.w	r8, #1
 800de40:	d0de      	beq.n	800de00 <_dtoa_r+0xa10>
 800de42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de46:	d1d8      	bne.n	800ddfa <_dtoa_r+0xa0a>
 800de48:	9a00      	ldr	r2, [sp, #0]
 800de4a:	2339      	movs	r3, #57	@ 0x39
 800de4c:	7013      	strb	r3, [r2, #0]
 800de4e:	4633      	mov	r3, r6
 800de50:	461e      	mov	r6, r3
 800de52:	3b01      	subs	r3, #1
 800de54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800de58:	2a39      	cmp	r2, #57	@ 0x39
 800de5a:	d052      	beq.n	800df02 <_dtoa_r+0xb12>
 800de5c:	3201      	adds	r2, #1
 800de5e:	701a      	strb	r2, [r3, #0]
 800de60:	e612      	b.n	800da88 <_dtoa_r+0x698>
 800de62:	2a00      	cmp	r2, #0
 800de64:	dd07      	ble.n	800de76 <_dtoa_r+0xa86>
 800de66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de6a:	d0ed      	beq.n	800de48 <_dtoa_r+0xa58>
 800de6c:	9a00      	ldr	r2, [sp, #0]
 800de6e:	f108 0301 	add.w	r3, r8, #1
 800de72:	7013      	strb	r3, [r2, #0]
 800de74:	e608      	b.n	800da88 <_dtoa_r+0x698>
 800de76:	9b07      	ldr	r3, [sp, #28]
 800de78:	9a07      	ldr	r2, [sp, #28]
 800de7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800de7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de80:	4293      	cmp	r3, r2
 800de82:	d028      	beq.n	800ded6 <_dtoa_r+0xae6>
 800de84:	4649      	mov	r1, r9
 800de86:	2300      	movs	r3, #0
 800de88:	220a      	movs	r2, #10
 800de8a:	4658      	mov	r0, fp
 800de8c:	f000 fd22 	bl	800e8d4 <__multadd>
 800de90:	42af      	cmp	r7, r5
 800de92:	4681      	mov	r9, r0
 800de94:	f04f 0300 	mov.w	r3, #0
 800de98:	f04f 020a 	mov.w	r2, #10
 800de9c:	4639      	mov	r1, r7
 800de9e:	4658      	mov	r0, fp
 800dea0:	d107      	bne.n	800deb2 <_dtoa_r+0xac2>
 800dea2:	f000 fd17 	bl	800e8d4 <__multadd>
 800dea6:	4607      	mov	r7, r0
 800dea8:	4605      	mov	r5, r0
 800deaa:	9b07      	ldr	r3, [sp, #28]
 800deac:	3301      	adds	r3, #1
 800deae:	9307      	str	r3, [sp, #28]
 800deb0:	e774      	b.n	800dd9c <_dtoa_r+0x9ac>
 800deb2:	f000 fd0f 	bl	800e8d4 <__multadd>
 800deb6:	4629      	mov	r1, r5
 800deb8:	4607      	mov	r7, r0
 800deba:	2300      	movs	r3, #0
 800debc:	220a      	movs	r2, #10
 800debe:	4658      	mov	r0, fp
 800dec0:	f000 fd08 	bl	800e8d4 <__multadd>
 800dec4:	4605      	mov	r5, r0
 800dec6:	e7f0      	b.n	800deaa <_dtoa_r+0xaba>
 800dec8:	9b00      	ldr	r3, [sp, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	bfcc      	ite	gt
 800dece:	461e      	movgt	r6, r3
 800ded0:	2601      	movle	r6, #1
 800ded2:	4456      	add	r6, sl
 800ded4:	2700      	movs	r7, #0
 800ded6:	4649      	mov	r1, r9
 800ded8:	2201      	movs	r2, #1
 800deda:	4658      	mov	r0, fp
 800dedc:	f000 fef0 	bl	800ecc0 <__lshift>
 800dee0:	4621      	mov	r1, r4
 800dee2:	4681      	mov	r9, r0
 800dee4:	f000 ff58 	bl	800ed98 <__mcmp>
 800dee8:	2800      	cmp	r0, #0
 800deea:	dcb0      	bgt.n	800de4e <_dtoa_r+0xa5e>
 800deec:	d102      	bne.n	800def4 <_dtoa_r+0xb04>
 800deee:	f018 0f01 	tst.w	r8, #1
 800def2:	d1ac      	bne.n	800de4e <_dtoa_r+0xa5e>
 800def4:	4633      	mov	r3, r6
 800def6:	461e      	mov	r6, r3
 800def8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800defc:	2a30      	cmp	r2, #48	@ 0x30
 800defe:	d0fa      	beq.n	800def6 <_dtoa_r+0xb06>
 800df00:	e5c2      	b.n	800da88 <_dtoa_r+0x698>
 800df02:	459a      	cmp	sl, r3
 800df04:	d1a4      	bne.n	800de50 <_dtoa_r+0xa60>
 800df06:	9b04      	ldr	r3, [sp, #16]
 800df08:	3301      	adds	r3, #1
 800df0a:	9304      	str	r3, [sp, #16]
 800df0c:	2331      	movs	r3, #49	@ 0x31
 800df0e:	f88a 3000 	strb.w	r3, [sl]
 800df12:	e5b9      	b.n	800da88 <_dtoa_r+0x698>
 800df14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800df74 <_dtoa_r+0xb84>
 800df1a:	b11b      	cbz	r3, 800df24 <_dtoa_r+0xb34>
 800df1c:	f10a 0308 	add.w	r3, sl, #8
 800df20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df22:	6013      	str	r3, [r2, #0]
 800df24:	4650      	mov	r0, sl
 800df26:	b019      	add	sp, #100	@ 0x64
 800df28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df2e:	2b01      	cmp	r3, #1
 800df30:	f77f ae37 	ble.w	800dba2 <_dtoa_r+0x7b2>
 800df34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df36:	930a      	str	r3, [sp, #40]	@ 0x28
 800df38:	2001      	movs	r0, #1
 800df3a:	e655      	b.n	800dbe8 <_dtoa_r+0x7f8>
 800df3c:	9b00      	ldr	r3, [sp, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f77f aed6 	ble.w	800dcf0 <_dtoa_r+0x900>
 800df44:	4656      	mov	r6, sl
 800df46:	4621      	mov	r1, r4
 800df48:	4648      	mov	r0, r9
 800df4a:	f7ff f9c9 	bl	800d2e0 <quorem>
 800df4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800df52:	f806 8b01 	strb.w	r8, [r6], #1
 800df56:	9b00      	ldr	r3, [sp, #0]
 800df58:	eba6 020a 	sub.w	r2, r6, sl
 800df5c:	4293      	cmp	r3, r2
 800df5e:	ddb3      	ble.n	800dec8 <_dtoa_r+0xad8>
 800df60:	4649      	mov	r1, r9
 800df62:	2300      	movs	r3, #0
 800df64:	220a      	movs	r2, #10
 800df66:	4658      	mov	r0, fp
 800df68:	f000 fcb4 	bl	800e8d4 <__multadd>
 800df6c:	4681      	mov	r9, r0
 800df6e:	e7ea      	b.n	800df46 <_dtoa_r+0xb56>
 800df70:	08012224 	.word	0x08012224
 800df74:	080121bf 	.word	0x080121bf

0800df78 <_free_r>:
 800df78:	b538      	push	{r3, r4, r5, lr}
 800df7a:	4605      	mov	r5, r0
 800df7c:	2900      	cmp	r1, #0
 800df7e:	d041      	beq.n	800e004 <_free_r+0x8c>
 800df80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df84:	1f0c      	subs	r4, r1, #4
 800df86:	2b00      	cmp	r3, #0
 800df88:	bfb8      	it	lt
 800df8a:	18e4      	addlt	r4, r4, r3
 800df8c:	f000 fc34 	bl	800e7f8 <__malloc_lock>
 800df90:	4a1d      	ldr	r2, [pc, #116]	@ (800e008 <_free_r+0x90>)
 800df92:	6813      	ldr	r3, [r2, #0]
 800df94:	b933      	cbnz	r3, 800dfa4 <_free_r+0x2c>
 800df96:	6063      	str	r3, [r4, #4]
 800df98:	6014      	str	r4, [r2, #0]
 800df9a:	4628      	mov	r0, r5
 800df9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfa0:	f000 bc30 	b.w	800e804 <__malloc_unlock>
 800dfa4:	42a3      	cmp	r3, r4
 800dfa6:	d908      	bls.n	800dfba <_free_r+0x42>
 800dfa8:	6820      	ldr	r0, [r4, #0]
 800dfaa:	1821      	adds	r1, r4, r0
 800dfac:	428b      	cmp	r3, r1
 800dfae:	bf01      	itttt	eq
 800dfb0:	6819      	ldreq	r1, [r3, #0]
 800dfb2:	685b      	ldreq	r3, [r3, #4]
 800dfb4:	1809      	addeq	r1, r1, r0
 800dfb6:	6021      	streq	r1, [r4, #0]
 800dfb8:	e7ed      	b.n	800df96 <_free_r+0x1e>
 800dfba:	461a      	mov	r2, r3
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	b10b      	cbz	r3, 800dfc4 <_free_r+0x4c>
 800dfc0:	42a3      	cmp	r3, r4
 800dfc2:	d9fa      	bls.n	800dfba <_free_r+0x42>
 800dfc4:	6811      	ldr	r1, [r2, #0]
 800dfc6:	1850      	adds	r0, r2, r1
 800dfc8:	42a0      	cmp	r0, r4
 800dfca:	d10b      	bne.n	800dfe4 <_free_r+0x6c>
 800dfcc:	6820      	ldr	r0, [r4, #0]
 800dfce:	4401      	add	r1, r0
 800dfd0:	1850      	adds	r0, r2, r1
 800dfd2:	4283      	cmp	r3, r0
 800dfd4:	6011      	str	r1, [r2, #0]
 800dfd6:	d1e0      	bne.n	800df9a <_free_r+0x22>
 800dfd8:	6818      	ldr	r0, [r3, #0]
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	6053      	str	r3, [r2, #4]
 800dfde:	4408      	add	r0, r1
 800dfe0:	6010      	str	r0, [r2, #0]
 800dfe2:	e7da      	b.n	800df9a <_free_r+0x22>
 800dfe4:	d902      	bls.n	800dfec <_free_r+0x74>
 800dfe6:	230c      	movs	r3, #12
 800dfe8:	602b      	str	r3, [r5, #0]
 800dfea:	e7d6      	b.n	800df9a <_free_r+0x22>
 800dfec:	6820      	ldr	r0, [r4, #0]
 800dfee:	1821      	adds	r1, r4, r0
 800dff0:	428b      	cmp	r3, r1
 800dff2:	bf04      	itt	eq
 800dff4:	6819      	ldreq	r1, [r3, #0]
 800dff6:	685b      	ldreq	r3, [r3, #4]
 800dff8:	6063      	str	r3, [r4, #4]
 800dffa:	bf04      	itt	eq
 800dffc:	1809      	addeq	r1, r1, r0
 800dffe:	6021      	streq	r1, [r4, #0]
 800e000:	6054      	str	r4, [r2, #4]
 800e002:	e7ca      	b.n	800df9a <_free_r+0x22>
 800e004:	bd38      	pop	{r3, r4, r5, pc}
 800e006:	bf00      	nop
 800e008:	20000860 	.word	0x20000860

0800e00c <rshift>:
 800e00c:	6903      	ldr	r3, [r0, #16]
 800e00e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e012:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e016:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e01a:	f100 0414 	add.w	r4, r0, #20
 800e01e:	dd45      	ble.n	800e0ac <rshift+0xa0>
 800e020:	f011 011f 	ands.w	r1, r1, #31
 800e024:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e028:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e02c:	d10c      	bne.n	800e048 <rshift+0x3c>
 800e02e:	f100 0710 	add.w	r7, r0, #16
 800e032:	4629      	mov	r1, r5
 800e034:	42b1      	cmp	r1, r6
 800e036:	d334      	bcc.n	800e0a2 <rshift+0x96>
 800e038:	1a9b      	subs	r3, r3, r2
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	1eea      	subs	r2, r5, #3
 800e03e:	4296      	cmp	r6, r2
 800e040:	bf38      	it	cc
 800e042:	2300      	movcc	r3, #0
 800e044:	4423      	add	r3, r4
 800e046:	e015      	b.n	800e074 <rshift+0x68>
 800e048:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e04c:	f1c1 0820 	rsb	r8, r1, #32
 800e050:	40cf      	lsrs	r7, r1
 800e052:	f105 0e04 	add.w	lr, r5, #4
 800e056:	46a1      	mov	r9, r4
 800e058:	4576      	cmp	r6, lr
 800e05a:	46f4      	mov	ip, lr
 800e05c:	d815      	bhi.n	800e08a <rshift+0x7e>
 800e05e:	1a9a      	subs	r2, r3, r2
 800e060:	0092      	lsls	r2, r2, #2
 800e062:	3a04      	subs	r2, #4
 800e064:	3501      	adds	r5, #1
 800e066:	42ae      	cmp	r6, r5
 800e068:	bf38      	it	cc
 800e06a:	2200      	movcc	r2, #0
 800e06c:	18a3      	adds	r3, r4, r2
 800e06e:	50a7      	str	r7, [r4, r2]
 800e070:	b107      	cbz	r7, 800e074 <rshift+0x68>
 800e072:	3304      	adds	r3, #4
 800e074:	1b1a      	subs	r2, r3, r4
 800e076:	42a3      	cmp	r3, r4
 800e078:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e07c:	bf08      	it	eq
 800e07e:	2300      	moveq	r3, #0
 800e080:	6102      	str	r2, [r0, #16]
 800e082:	bf08      	it	eq
 800e084:	6143      	streq	r3, [r0, #20]
 800e086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e08a:	f8dc c000 	ldr.w	ip, [ip]
 800e08e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e092:	ea4c 0707 	orr.w	r7, ip, r7
 800e096:	f849 7b04 	str.w	r7, [r9], #4
 800e09a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e09e:	40cf      	lsrs	r7, r1
 800e0a0:	e7da      	b.n	800e058 <rshift+0x4c>
 800e0a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e0a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e0aa:	e7c3      	b.n	800e034 <rshift+0x28>
 800e0ac:	4623      	mov	r3, r4
 800e0ae:	e7e1      	b.n	800e074 <rshift+0x68>

0800e0b0 <__hexdig_fun>:
 800e0b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e0b4:	2b09      	cmp	r3, #9
 800e0b6:	d802      	bhi.n	800e0be <__hexdig_fun+0xe>
 800e0b8:	3820      	subs	r0, #32
 800e0ba:	b2c0      	uxtb	r0, r0
 800e0bc:	4770      	bx	lr
 800e0be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e0c2:	2b05      	cmp	r3, #5
 800e0c4:	d801      	bhi.n	800e0ca <__hexdig_fun+0x1a>
 800e0c6:	3847      	subs	r0, #71	@ 0x47
 800e0c8:	e7f7      	b.n	800e0ba <__hexdig_fun+0xa>
 800e0ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e0ce:	2b05      	cmp	r3, #5
 800e0d0:	d801      	bhi.n	800e0d6 <__hexdig_fun+0x26>
 800e0d2:	3827      	subs	r0, #39	@ 0x27
 800e0d4:	e7f1      	b.n	800e0ba <__hexdig_fun+0xa>
 800e0d6:	2000      	movs	r0, #0
 800e0d8:	4770      	bx	lr
	...

0800e0dc <__gethex>:
 800e0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e0:	b085      	sub	sp, #20
 800e0e2:	468a      	mov	sl, r1
 800e0e4:	9302      	str	r3, [sp, #8]
 800e0e6:	680b      	ldr	r3, [r1, #0]
 800e0e8:	9001      	str	r0, [sp, #4]
 800e0ea:	4690      	mov	r8, r2
 800e0ec:	1c9c      	adds	r4, r3, #2
 800e0ee:	46a1      	mov	r9, r4
 800e0f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e0f4:	2830      	cmp	r0, #48	@ 0x30
 800e0f6:	d0fa      	beq.n	800e0ee <__gethex+0x12>
 800e0f8:	eba9 0303 	sub.w	r3, r9, r3
 800e0fc:	f1a3 0b02 	sub.w	fp, r3, #2
 800e100:	f7ff ffd6 	bl	800e0b0 <__hexdig_fun>
 800e104:	4605      	mov	r5, r0
 800e106:	2800      	cmp	r0, #0
 800e108:	d168      	bne.n	800e1dc <__gethex+0x100>
 800e10a:	49a0      	ldr	r1, [pc, #640]	@ (800e38c <__gethex+0x2b0>)
 800e10c:	2201      	movs	r2, #1
 800e10e:	4648      	mov	r0, r9
 800e110:	f7fe ffc3 	bl	800d09a <strncmp>
 800e114:	4607      	mov	r7, r0
 800e116:	2800      	cmp	r0, #0
 800e118:	d167      	bne.n	800e1ea <__gethex+0x10e>
 800e11a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e11e:	4626      	mov	r6, r4
 800e120:	f7ff ffc6 	bl	800e0b0 <__hexdig_fun>
 800e124:	2800      	cmp	r0, #0
 800e126:	d062      	beq.n	800e1ee <__gethex+0x112>
 800e128:	4623      	mov	r3, r4
 800e12a:	7818      	ldrb	r0, [r3, #0]
 800e12c:	2830      	cmp	r0, #48	@ 0x30
 800e12e:	4699      	mov	r9, r3
 800e130:	f103 0301 	add.w	r3, r3, #1
 800e134:	d0f9      	beq.n	800e12a <__gethex+0x4e>
 800e136:	f7ff ffbb 	bl	800e0b0 <__hexdig_fun>
 800e13a:	fab0 f580 	clz	r5, r0
 800e13e:	096d      	lsrs	r5, r5, #5
 800e140:	f04f 0b01 	mov.w	fp, #1
 800e144:	464a      	mov	r2, r9
 800e146:	4616      	mov	r6, r2
 800e148:	3201      	adds	r2, #1
 800e14a:	7830      	ldrb	r0, [r6, #0]
 800e14c:	f7ff ffb0 	bl	800e0b0 <__hexdig_fun>
 800e150:	2800      	cmp	r0, #0
 800e152:	d1f8      	bne.n	800e146 <__gethex+0x6a>
 800e154:	498d      	ldr	r1, [pc, #564]	@ (800e38c <__gethex+0x2b0>)
 800e156:	2201      	movs	r2, #1
 800e158:	4630      	mov	r0, r6
 800e15a:	f7fe ff9e 	bl	800d09a <strncmp>
 800e15e:	2800      	cmp	r0, #0
 800e160:	d13f      	bne.n	800e1e2 <__gethex+0x106>
 800e162:	b944      	cbnz	r4, 800e176 <__gethex+0x9a>
 800e164:	1c74      	adds	r4, r6, #1
 800e166:	4622      	mov	r2, r4
 800e168:	4616      	mov	r6, r2
 800e16a:	3201      	adds	r2, #1
 800e16c:	7830      	ldrb	r0, [r6, #0]
 800e16e:	f7ff ff9f 	bl	800e0b0 <__hexdig_fun>
 800e172:	2800      	cmp	r0, #0
 800e174:	d1f8      	bne.n	800e168 <__gethex+0x8c>
 800e176:	1ba4      	subs	r4, r4, r6
 800e178:	00a7      	lsls	r7, r4, #2
 800e17a:	7833      	ldrb	r3, [r6, #0]
 800e17c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e180:	2b50      	cmp	r3, #80	@ 0x50
 800e182:	d13e      	bne.n	800e202 <__gethex+0x126>
 800e184:	7873      	ldrb	r3, [r6, #1]
 800e186:	2b2b      	cmp	r3, #43	@ 0x2b
 800e188:	d033      	beq.n	800e1f2 <__gethex+0x116>
 800e18a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e18c:	d034      	beq.n	800e1f8 <__gethex+0x11c>
 800e18e:	1c71      	adds	r1, r6, #1
 800e190:	2400      	movs	r4, #0
 800e192:	7808      	ldrb	r0, [r1, #0]
 800e194:	f7ff ff8c 	bl	800e0b0 <__hexdig_fun>
 800e198:	1e43      	subs	r3, r0, #1
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	2b18      	cmp	r3, #24
 800e19e:	d830      	bhi.n	800e202 <__gethex+0x126>
 800e1a0:	f1a0 0210 	sub.w	r2, r0, #16
 800e1a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e1a8:	f7ff ff82 	bl	800e0b0 <__hexdig_fun>
 800e1ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800e1b0:	fa5f fc8c 	uxtb.w	ip, ip
 800e1b4:	f1bc 0f18 	cmp.w	ip, #24
 800e1b8:	f04f 030a 	mov.w	r3, #10
 800e1bc:	d91e      	bls.n	800e1fc <__gethex+0x120>
 800e1be:	b104      	cbz	r4, 800e1c2 <__gethex+0xe6>
 800e1c0:	4252      	negs	r2, r2
 800e1c2:	4417      	add	r7, r2
 800e1c4:	f8ca 1000 	str.w	r1, [sl]
 800e1c8:	b1ed      	cbz	r5, 800e206 <__gethex+0x12a>
 800e1ca:	f1bb 0f00 	cmp.w	fp, #0
 800e1ce:	bf0c      	ite	eq
 800e1d0:	2506      	moveq	r5, #6
 800e1d2:	2500      	movne	r5, #0
 800e1d4:	4628      	mov	r0, r5
 800e1d6:	b005      	add	sp, #20
 800e1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1dc:	2500      	movs	r5, #0
 800e1de:	462c      	mov	r4, r5
 800e1e0:	e7b0      	b.n	800e144 <__gethex+0x68>
 800e1e2:	2c00      	cmp	r4, #0
 800e1e4:	d1c7      	bne.n	800e176 <__gethex+0x9a>
 800e1e6:	4627      	mov	r7, r4
 800e1e8:	e7c7      	b.n	800e17a <__gethex+0x9e>
 800e1ea:	464e      	mov	r6, r9
 800e1ec:	462f      	mov	r7, r5
 800e1ee:	2501      	movs	r5, #1
 800e1f0:	e7c3      	b.n	800e17a <__gethex+0x9e>
 800e1f2:	2400      	movs	r4, #0
 800e1f4:	1cb1      	adds	r1, r6, #2
 800e1f6:	e7cc      	b.n	800e192 <__gethex+0xb6>
 800e1f8:	2401      	movs	r4, #1
 800e1fa:	e7fb      	b.n	800e1f4 <__gethex+0x118>
 800e1fc:	fb03 0002 	mla	r0, r3, r2, r0
 800e200:	e7ce      	b.n	800e1a0 <__gethex+0xc4>
 800e202:	4631      	mov	r1, r6
 800e204:	e7de      	b.n	800e1c4 <__gethex+0xe8>
 800e206:	eba6 0309 	sub.w	r3, r6, r9
 800e20a:	3b01      	subs	r3, #1
 800e20c:	4629      	mov	r1, r5
 800e20e:	2b07      	cmp	r3, #7
 800e210:	dc0a      	bgt.n	800e228 <__gethex+0x14c>
 800e212:	9801      	ldr	r0, [sp, #4]
 800e214:	f000 fafc 	bl	800e810 <_Balloc>
 800e218:	4604      	mov	r4, r0
 800e21a:	b940      	cbnz	r0, 800e22e <__gethex+0x152>
 800e21c:	4b5c      	ldr	r3, [pc, #368]	@ (800e390 <__gethex+0x2b4>)
 800e21e:	4602      	mov	r2, r0
 800e220:	21e4      	movs	r1, #228	@ 0xe4
 800e222:	485c      	ldr	r0, [pc, #368]	@ (800e394 <__gethex+0x2b8>)
 800e224:	f7ff f83e 	bl	800d2a4 <__assert_func>
 800e228:	3101      	adds	r1, #1
 800e22a:	105b      	asrs	r3, r3, #1
 800e22c:	e7ef      	b.n	800e20e <__gethex+0x132>
 800e22e:	f100 0a14 	add.w	sl, r0, #20
 800e232:	2300      	movs	r3, #0
 800e234:	4655      	mov	r5, sl
 800e236:	469b      	mov	fp, r3
 800e238:	45b1      	cmp	r9, r6
 800e23a:	d337      	bcc.n	800e2ac <__gethex+0x1d0>
 800e23c:	f845 bb04 	str.w	fp, [r5], #4
 800e240:	eba5 050a 	sub.w	r5, r5, sl
 800e244:	10ad      	asrs	r5, r5, #2
 800e246:	6125      	str	r5, [r4, #16]
 800e248:	4658      	mov	r0, fp
 800e24a:	f000 fbd3 	bl	800e9f4 <__hi0bits>
 800e24e:	016d      	lsls	r5, r5, #5
 800e250:	f8d8 6000 	ldr.w	r6, [r8]
 800e254:	1a2d      	subs	r5, r5, r0
 800e256:	42b5      	cmp	r5, r6
 800e258:	dd54      	ble.n	800e304 <__gethex+0x228>
 800e25a:	1bad      	subs	r5, r5, r6
 800e25c:	4629      	mov	r1, r5
 800e25e:	4620      	mov	r0, r4
 800e260:	f000 ff67 	bl	800f132 <__any_on>
 800e264:	4681      	mov	r9, r0
 800e266:	b178      	cbz	r0, 800e288 <__gethex+0x1ac>
 800e268:	1e6b      	subs	r3, r5, #1
 800e26a:	1159      	asrs	r1, r3, #5
 800e26c:	f003 021f 	and.w	r2, r3, #31
 800e270:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e274:	f04f 0901 	mov.w	r9, #1
 800e278:	fa09 f202 	lsl.w	r2, r9, r2
 800e27c:	420a      	tst	r2, r1
 800e27e:	d003      	beq.n	800e288 <__gethex+0x1ac>
 800e280:	454b      	cmp	r3, r9
 800e282:	dc36      	bgt.n	800e2f2 <__gethex+0x216>
 800e284:	f04f 0902 	mov.w	r9, #2
 800e288:	4629      	mov	r1, r5
 800e28a:	4620      	mov	r0, r4
 800e28c:	f7ff febe 	bl	800e00c <rshift>
 800e290:	442f      	add	r7, r5
 800e292:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e296:	42bb      	cmp	r3, r7
 800e298:	da42      	bge.n	800e320 <__gethex+0x244>
 800e29a:	9801      	ldr	r0, [sp, #4]
 800e29c:	4621      	mov	r1, r4
 800e29e:	f000 faf7 	bl	800e890 <_Bfree>
 800e2a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	6013      	str	r3, [r2, #0]
 800e2a8:	25a3      	movs	r5, #163	@ 0xa3
 800e2aa:	e793      	b.n	800e1d4 <__gethex+0xf8>
 800e2ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e2b0:	2a2e      	cmp	r2, #46	@ 0x2e
 800e2b2:	d012      	beq.n	800e2da <__gethex+0x1fe>
 800e2b4:	2b20      	cmp	r3, #32
 800e2b6:	d104      	bne.n	800e2c2 <__gethex+0x1e6>
 800e2b8:	f845 bb04 	str.w	fp, [r5], #4
 800e2bc:	f04f 0b00 	mov.w	fp, #0
 800e2c0:	465b      	mov	r3, fp
 800e2c2:	7830      	ldrb	r0, [r6, #0]
 800e2c4:	9303      	str	r3, [sp, #12]
 800e2c6:	f7ff fef3 	bl	800e0b0 <__hexdig_fun>
 800e2ca:	9b03      	ldr	r3, [sp, #12]
 800e2cc:	f000 000f 	and.w	r0, r0, #15
 800e2d0:	4098      	lsls	r0, r3
 800e2d2:	ea4b 0b00 	orr.w	fp, fp, r0
 800e2d6:	3304      	adds	r3, #4
 800e2d8:	e7ae      	b.n	800e238 <__gethex+0x15c>
 800e2da:	45b1      	cmp	r9, r6
 800e2dc:	d8ea      	bhi.n	800e2b4 <__gethex+0x1d8>
 800e2de:	492b      	ldr	r1, [pc, #172]	@ (800e38c <__gethex+0x2b0>)
 800e2e0:	9303      	str	r3, [sp, #12]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	4630      	mov	r0, r6
 800e2e6:	f7fe fed8 	bl	800d09a <strncmp>
 800e2ea:	9b03      	ldr	r3, [sp, #12]
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	d1e1      	bne.n	800e2b4 <__gethex+0x1d8>
 800e2f0:	e7a2      	b.n	800e238 <__gethex+0x15c>
 800e2f2:	1ea9      	subs	r1, r5, #2
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	f000 ff1c 	bl	800f132 <__any_on>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	d0c2      	beq.n	800e284 <__gethex+0x1a8>
 800e2fe:	f04f 0903 	mov.w	r9, #3
 800e302:	e7c1      	b.n	800e288 <__gethex+0x1ac>
 800e304:	da09      	bge.n	800e31a <__gethex+0x23e>
 800e306:	1b75      	subs	r5, r6, r5
 800e308:	4621      	mov	r1, r4
 800e30a:	9801      	ldr	r0, [sp, #4]
 800e30c:	462a      	mov	r2, r5
 800e30e:	f000 fcd7 	bl	800ecc0 <__lshift>
 800e312:	1b7f      	subs	r7, r7, r5
 800e314:	4604      	mov	r4, r0
 800e316:	f100 0a14 	add.w	sl, r0, #20
 800e31a:	f04f 0900 	mov.w	r9, #0
 800e31e:	e7b8      	b.n	800e292 <__gethex+0x1b6>
 800e320:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e324:	42bd      	cmp	r5, r7
 800e326:	dd6f      	ble.n	800e408 <__gethex+0x32c>
 800e328:	1bed      	subs	r5, r5, r7
 800e32a:	42ae      	cmp	r6, r5
 800e32c:	dc34      	bgt.n	800e398 <__gethex+0x2bc>
 800e32e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e332:	2b02      	cmp	r3, #2
 800e334:	d022      	beq.n	800e37c <__gethex+0x2a0>
 800e336:	2b03      	cmp	r3, #3
 800e338:	d024      	beq.n	800e384 <__gethex+0x2a8>
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d115      	bne.n	800e36a <__gethex+0x28e>
 800e33e:	42ae      	cmp	r6, r5
 800e340:	d113      	bne.n	800e36a <__gethex+0x28e>
 800e342:	2e01      	cmp	r6, #1
 800e344:	d10b      	bne.n	800e35e <__gethex+0x282>
 800e346:	9a02      	ldr	r2, [sp, #8]
 800e348:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e34c:	6013      	str	r3, [r2, #0]
 800e34e:	2301      	movs	r3, #1
 800e350:	6123      	str	r3, [r4, #16]
 800e352:	f8ca 3000 	str.w	r3, [sl]
 800e356:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e358:	2562      	movs	r5, #98	@ 0x62
 800e35a:	601c      	str	r4, [r3, #0]
 800e35c:	e73a      	b.n	800e1d4 <__gethex+0xf8>
 800e35e:	1e71      	subs	r1, r6, #1
 800e360:	4620      	mov	r0, r4
 800e362:	f000 fee6 	bl	800f132 <__any_on>
 800e366:	2800      	cmp	r0, #0
 800e368:	d1ed      	bne.n	800e346 <__gethex+0x26a>
 800e36a:	9801      	ldr	r0, [sp, #4]
 800e36c:	4621      	mov	r1, r4
 800e36e:	f000 fa8f 	bl	800e890 <_Bfree>
 800e372:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e374:	2300      	movs	r3, #0
 800e376:	6013      	str	r3, [r2, #0]
 800e378:	2550      	movs	r5, #80	@ 0x50
 800e37a:	e72b      	b.n	800e1d4 <__gethex+0xf8>
 800e37c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d1f3      	bne.n	800e36a <__gethex+0x28e>
 800e382:	e7e0      	b.n	800e346 <__gethex+0x26a>
 800e384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e386:	2b00      	cmp	r3, #0
 800e388:	d1dd      	bne.n	800e346 <__gethex+0x26a>
 800e38a:	e7ee      	b.n	800e36a <__gethex+0x28e>
 800e38c:	08011f7c 	.word	0x08011f7c
 800e390:	08012224 	.word	0x08012224
 800e394:	08012235 	.word	0x08012235
 800e398:	1e6f      	subs	r7, r5, #1
 800e39a:	f1b9 0f00 	cmp.w	r9, #0
 800e39e:	d130      	bne.n	800e402 <__gethex+0x326>
 800e3a0:	b127      	cbz	r7, 800e3ac <__gethex+0x2d0>
 800e3a2:	4639      	mov	r1, r7
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	f000 fec4 	bl	800f132 <__any_on>
 800e3aa:	4681      	mov	r9, r0
 800e3ac:	117a      	asrs	r2, r7, #5
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e3b4:	f007 071f 	and.w	r7, r7, #31
 800e3b8:	40bb      	lsls	r3, r7
 800e3ba:	4213      	tst	r3, r2
 800e3bc:	4629      	mov	r1, r5
 800e3be:	4620      	mov	r0, r4
 800e3c0:	bf18      	it	ne
 800e3c2:	f049 0902 	orrne.w	r9, r9, #2
 800e3c6:	f7ff fe21 	bl	800e00c <rshift>
 800e3ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e3ce:	1b76      	subs	r6, r6, r5
 800e3d0:	2502      	movs	r5, #2
 800e3d2:	f1b9 0f00 	cmp.w	r9, #0
 800e3d6:	d047      	beq.n	800e468 <__gethex+0x38c>
 800e3d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e3dc:	2b02      	cmp	r3, #2
 800e3de:	d015      	beq.n	800e40c <__gethex+0x330>
 800e3e0:	2b03      	cmp	r3, #3
 800e3e2:	d017      	beq.n	800e414 <__gethex+0x338>
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d109      	bne.n	800e3fc <__gethex+0x320>
 800e3e8:	f019 0f02 	tst.w	r9, #2
 800e3ec:	d006      	beq.n	800e3fc <__gethex+0x320>
 800e3ee:	f8da 3000 	ldr.w	r3, [sl]
 800e3f2:	ea49 0903 	orr.w	r9, r9, r3
 800e3f6:	f019 0f01 	tst.w	r9, #1
 800e3fa:	d10e      	bne.n	800e41a <__gethex+0x33e>
 800e3fc:	f045 0510 	orr.w	r5, r5, #16
 800e400:	e032      	b.n	800e468 <__gethex+0x38c>
 800e402:	f04f 0901 	mov.w	r9, #1
 800e406:	e7d1      	b.n	800e3ac <__gethex+0x2d0>
 800e408:	2501      	movs	r5, #1
 800e40a:	e7e2      	b.n	800e3d2 <__gethex+0x2f6>
 800e40c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e40e:	f1c3 0301 	rsb	r3, r3, #1
 800e412:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e416:	2b00      	cmp	r3, #0
 800e418:	d0f0      	beq.n	800e3fc <__gethex+0x320>
 800e41a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e41e:	f104 0314 	add.w	r3, r4, #20
 800e422:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e426:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e42a:	f04f 0c00 	mov.w	ip, #0
 800e42e:	4618      	mov	r0, r3
 800e430:	f853 2b04 	ldr.w	r2, [r3], #4
 800e434:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e438:	d01b      	beq.n	800e472 <__gethex+0x396>
 800e43a:	3201      	adds	r2, #1
 800e43c:	6002      	str	r2, [r0, #0]
 800e43e:	2d02      	cmp	r5, #2
 800e440:	f104 0314 	add.w	r3, r4, #20
 800e444:	d13c      	bne.n	800e4c0 <__gethex+0x3e4>
 800e446:	f8d8 2000 	ldr.w	r2, [r8]
 800e44a:	3a01      	subs	r2, #1
 800e44c:	42b2      	cmp	r2, r6
 800e44e:	d109      	bne.n	800e464 <__gethex+0x388>
 800e450:	1171      	asrs	r1, r6, #5
 800e452:	2201      	movs	r2, #1
 800e454:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e458:	f006 061f 	and.w	r6, r6, #31
 800e45c:	fa02 f606 	lsl.w	r6, r2, r6
 800e460:	421e      	tst	r6, r3
 800e462:	d13a      	bne.n	800e4da <__gethex+0x3fe>
 800e464:	f045 0520 	orr.w	r5, r5, #32
 800e468:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e46a:	601c      	str	r4, [r3, #0]
 800e46c:	9b02      	ldr	r3, [sp, #8]
 800e46e:	601f      	str	r7, [r3, #0]
 800e470:	e6b0      	b.n	800e1d4 <__gethex+0xf8>
 800e472:	4299      	cmp	r1, r3
 800e474:	f843 cc04 	str.w	ip, [r3, #-4]
 800e478:	d8d9      	bhi.n	800e42e <__gethex+0x352>
 800e47a:	68a3      	ldr	r3, [r4, #8]
 800e47c:	459b      	cmp	fp, r3
 800e47e:	db17      	blt.n	800e4b0 <__gethex+0x3d4>
 800e480:	6861      	ldr	r1, [r4, #4]
 800e482:	9801      	ldr	r0, [sp, #4]
 800e484:	3101      	adds	r1, #1
 800e486:	f000 f9c3 	bl	800e810 <_Balloc>
 800e48a:	4681      	mov	r9, r0
 800e48c:	b918      	cbnz	r0, 800e496 <__gethex+0x3ba>
 800e48e:	4b1a      	ldr	r3, [pc, #104]	@ (800e4f8 <__gethex+0x41c>)
 800e490:	4602      	mov	r2, r0
 800e492:	2184      	movs	r1, #132	@ 0x84
 800e494:	e6c5      	b.n	800e222 <__gethex+0x146>
 800e496:	6922      	ldr	r2, [r4, #16]
 800e498:	3202      	adds	r2, #2
 800e49a:	f104 010c 	add.w	r1, r4, #12
 800e49e:	0092      	lsls	r2, r2, #2
 800e4a0:	300c      	adds	r0, #12
 800e4a2:	f7fe fee0 	bl	800d266 <memcpy>
 800e4a6:	4621      	mov	r1, r4
 800e4a8:	9801      	ldr	r0, [sp, #4]
 800e4aa:	f000 f9f1 	bl	800e890 <_Bfree>
 800e4ae:	464c      	mov	r4, r9
 800e4b0:	6923      	ldr	r3, [r4, #16]
 800e4b2:	1c5a      	adds	r2, r3, #1
 800e4b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e4b8:	6122      	str	r2, [r4, #16]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	615a      	str	r2, [r3, #20]
 800e4be:	e7be      	b.n	800e43e <__gethex+0x362>
 800e4c0:	6922      	ldr	r2, [r4, #16]
 800e4c2:	455a      	cmp	r2, fp
 800e4c4:	dd0b      	ble.n	800e4de <__gethex+0x402>
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f7ff fd9f 	bl	800e00c <rshift>
 800e4ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4d2:	3701      	adds	r7, #1
 800e4d4:	42bb      	cmp	r3, r7
 800e4d6:	f6ff aee0 	blt.w	800e29a <__gethex+0x1be>
 800e4da:	2501      	movs	r5, #1
 800e4dc:	e7c2      	b.n	800e464 <__gethex+0x388>
 800e4de:	f016 061f 	ands.w	r6, r6, #31
 800e4e2:	d0fa      	beq.n	800e4da <__gethex+0x3fe>
 800e4e4:	4453      	add	r3, sl
 800e4e6:	f1c6 0620 	rsb	r6, r6, #32
 800e4ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e4ee:	f000 fa81 	bl	800e9f4 <__hi0bits>
 800e4f2:	42b0      	cmp	r0, r6
 800e4f4:	dbe7      	blt.n	800e4c6 <__gethex+0x3ea>
 800e4f6:	e7f0      	b.n	800e4da <__gethex+0x3fe>
 800e4f8:	08012224 	.word	0x08012224

0800e4fc <L_shift>:
 800e4fc:	f1c2 0208 	rsb	r2, r2, #8
 800e500:	0092      	lsls	r2, r2, #2
 800e502:	b570      	push	{r4, r5, r6, lr}
 800e504:	f1c2 0620 	rsb	r6, r2, #32
 800e508:	6843      	ldr	r3, [r0, #4]
 800e50a:	6804      	ldr	r4, [r0, #0]
 800e50c:	fa03 f506 	lsl.w	r5, r3, r6
 800e510:	432c      	orrs	r4, r5
 800e512:	40d3      	lsrs	r3, r2
 800e514:	6004      	str	r4, [r0, #0]
 800e516:	f840 3f04 	str.w	r3, [r0, #4]!
 800e51a:	4288      	cmp	r0, r1
 800e51c:	d3f4      	bcc.n	800e508 <L_shift+0xc>
 800e51e:	bd70      	pop	{r4, r5, r6, pc}

0800e520 <__match>:
 800e520:	b530      	push	{r4, r5, lr}
 800e522:	6803      	ldr	r3, [r0, #0]
 800e524:	3301      	adds	r3, #1
 800e526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e52a:	b914      	cbnz	r4, 800e532 <__match+0x12>
 800e52c:	6003      	str	r3, [r0, #0]
 800e52e:	2001      	movs	r0, #1
 800e530:	bd30      	pop	{r4, r5, pc}
 800e532:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e536:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e53a:	2d19      	cmp	r5, #25
 800e53c:	bf98      	it	ls
 800e53e:	3220      	addls	r2, #32
 800e540:	42a2      	cmp	r2, r4
 800e542:	d0f0      	beq.n	800e526 <__match+0x6>
 800e544:	2000      	movs	r0, #0
 800e546:	e7f3      	b.n	800e530 <__match+0x10>

0800e548 <__hexnan>:
 800e548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e54c:	680b      	ldr	r3, [r1, #0]
 800e54e:	6801      	ldr	r1, [r0, #0]
 800e550:	115e      	asrs	r6, r3, #5
 800e552:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e556:	f013 031f 	ands.w	r3, r3, #31
 800e55a:	b087      	sub	sp, #28
 800e55c:	bf18      	it	ne
 800e55e:	3604      	addne	r6, #4
 800e560:	2500      	movs	r5, #0
 800e562:	1f37      	subs	r7, r6, #4
 800e564:	4682      	mov	sl, r0
 800e566:	4690      	mov	r8, r2
 800e568:	9301      	str	r3, [sp, #4]
 800e56a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e56e:	46b9      	mov	r9, r7
 800e570:	463c      	mov	r4, r7
 800e572:	9502      	str	r5, [sp, #8]
 800e574:	46ab      	mov	fp, r5
 800e576:	784a      	ldrb	r2, [r1, #1]
 800e578:	1c4b      	adds	r3, r1, #1
 800e57a:	9303      	str	r3, [sp, #12]
 800e57c:	b342      	cbz	r2, 800e5d0 <__hexnan+0x88>
 800e57e:	4610      	mov	r0, r2
 800e580:	9105      	str	r1, [sp, #20]
 800e582:	9204      	str	r2, [sp, #16]
 800e584:	f7ff fd94 	bl	800e0b0 <__hexdig_fun>
 800e588:	2800      	cmp	r0, #0
 800e58a:	d151      	bne.n	800e630 <__hexnan+0xe8>
 800e58c:	9a04      	ldr	r2, [sp, #16]
 800e58e:	9905      	ldr	r1, [sp, #20]
 800e590:	2a20      	cmp	r2, #32
 800e592:	d818      	bhi.n	800e5c6 <__hexnan+0x7e>
 800e594:	9b02      	ldr	r3, [sp, #8]
 800e596:	459b      	cmp	fp, r3
 800e598:	dd13      	ble.n	800e5c2 <__hexnan+0x7a>
 800e59a:	454c      	cmp	r4, r9
 800e59c:	d206      	bcs.n	800e5ac <__hexnan+0x64>
 800e59e:	2d07      	cmp	r5, #7
 800e5a0:	dc04      	bgt.n	800e5ac <__hexnan+0x64>
 800e5a2:	462a      	mov	r2, r5
 800e5a4:	4649      	mov	r1, r9
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	f7ff ffa8 	bl	800e4fc <L_shift>
 800e5ac:	4544      	cmp	r4, r8
 800e5ae:	d952      	bls.n	800e656 <__hexnan+0x10e>
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	f1a4 0904 	sub.w	r9, r4, #4
 800e5b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e5ba:	f8cd b008 	str.w	fp, [sp, #8]
 800e5be:	464c      	mov	r4, r9
 800e5c0:	461d      	mov	r5, r3
 800e5c2:	9903      	ldr	r1, [sp, #12]
 800e5c4:	e7d7      	b.n	800e576 <__hexnan+0x2e>
 800e5c6:	2a29      	cmp	r2, #41	@ 0x29
 800e5c8:	d157      	bne.n	800e67a <__hexnan+0x132>
 800e5ca:	3102      	adds	r1, #2
 800e5cc:	f8ca 1000 	str.w	r1, [sl]
 800e5d0:	f1bb 0f00 	cmp.w	fp, #0
 800e5d4:	d051      	beq.n	800e67a <__hexnan+0x132>
 800e5d6:	454c      	cmp	r4, r9
 800e5d8:	d206      	bcs.n	800e5e8 <__hexnan+0xa0>
 800e5da:	2d07      	cmp	r5, #7
 800e5dc:	dc04      	bgt.n	800e5e8 <__hexnan+0xa0>
 800e5de:	462a      	mov	r2, r5
 800e5e0:	4649      	mov	r1, r9
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	f7ff ff8a 	bl	800e4fc <L_shift>
 800e5e8:	4544      	cmp	r4, r8
 800e5ea:	d936      	bls.n	800e65a <__hexnan+0x112>
 800e5ec:	f1a8 0204 	sub.w	r2, r8, #4
 800e5f0:	4623      	mov	r3, r4
 800e5f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e5f6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e5fa:	429f      	cmp	r7, r3
 800e5fc:	d2f9      	bcs.n	800e5f2 <__hexnan+0xaa>
 800e5fe:	1b3b      	subs	r3, r7, r4
 800e600:	f023 0303 	bic.w	r3, r3, #3
 800e604:	3304      	adds	r3, #4
 800e606:	3401      	adds	r4, #1
 800e608:	3e03      	subs	r6, #3
 800e60a:	42b4      	cmp	r4, r6
 800e60c:	bf88      	it	hi
 800e60e:	2304      	movhi	r3, #4
 800e610:	4443      	add	r3, r8
 800e612:	2200      	movs	r2, #0
 800e614:	f843 2b04 	str.w	r2, [r3], #4
 800e618:	429f      	cmp	r7, r3
 800e61a:	d2fb      	bcs.n	800e614 <__hexnan+0xcc>
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	b91b      	cbnz	r3, 800e628 <__hexnan+0xe0>
 800e620:	4547      	cmp	r7, r8
 800e622:	d128      	bne.n	800e676 <__hexnan+0x12e>
 800e624:	2301      	movs	r3, #1
 800e626:	603b      	str	r3, [r7, #0]
 800e628:	2005      	movs	r0, #5
 800e62a:	b007      	add	sp, #28
 800e62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e630:	3501      	adds	r5, #1
 800e632:	2d08      	cmp	r5, #8
 800e634:	f10b 0b01 	add.w	fp, fp, #1
 800e638:	dd06      	ble.n	800e648 <__hexnan+0x100>
 800e63a:	4544      	cmp	r4, r8
 800e63c:	d9c1      	bls.n	800e5c2 <__hexnan+0x7a>
 800e63e:	2300      	movs	r3, #0
 800e640:	f844 3c04 	str.w	r3, [r4, #-4]
 800e644:	2501      	movs	r5, #1
 800e646:	3c04      	subs	r4, #4
 800e648:	6822      	ldr	r2, [r4, #0]
 800e64a:	f000 000f 	and.w	r0, r0, #15
 800e64e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e652:	6020      	str	r0, [r4, #0]
 800e654:	e7b5      	b.n	800e5c2 <__hexnan+0x7a>
 800e656:	2508      	movs	r5, #8
 800e658:	e7b3      	b.n	800e5c2 <__hexnan+0x7a>
 800e65a:	9b01      	ldr	r3, [sp, #4]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d0dd      	beq.n	800e61c <__hexnan+0xd4>
 800e660:	f1c3 0320 	rsb	r3, r3, #32
 800e664:	f04f 32ff 	mov.w	r2, #4294967295
 800e668:	40da      	lsrs	r2, r3
 800e66a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e66e:	4013      	ands	r3, r2
 800e670:	f846 3c04 	str.w	r3, [r6, #-4]
 800e674:	e7d2      	b.n	800e61c <__hexnan+0xd4>
 800e676:	3f04      	subs	r7, #4
 800e678:	e7d0      	b.n	800e61c <__hexnan+0xd4>
 800e67a:	2004      	movs	r0, #4
 800e67c:	e7d5      	b.n	800e62a <__hexnan+0xe2>
	...

0800e680 <malloc>:
 800e680:	4b02      	ldr	r3, [pc, #8]	@ (800e68c <malloc+0xc>)
 800e682:	4601      	mov	r1, r0
 800e684:	6818      	ldr	r0, [r3, #0]
 800e686:	f000 b825 	b.w	800e6d4 <_malloc_r>
 800e68a:	bf00      	nop
 800e68c:	20000250 	.word	0x20000250

0800e690 <sbrk_aligned>:
 800e690:	b570      	push	{r4, r5, r6, lr}
 800e692:	4e0f      	ldr	r6, [pc, #60]	@ (800e6d0 <sbrk_aligned+0x40>)
 800e694:	460c      	mov	r4, r1
 800e696:	6831      	ldr	r1, [r6, #0]
 800e698:	4605      	mov	r5, r0
 800e69a:	b911      	cbnz	r1, 800e6a2 <sbrk_aligned+0x12>
 800e69c:	f000 ffa6 	bl	800f5ec <_sbrk_r>
 800e6a0:	6030      	str	r0, [r6, #0]
 800e6a2:	4621      	mov	r1, r4
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	f000 ffa1 	bl	800f5ec <_sbrk_r>
 800e6aa:	1c43      	adds	r3, r0, #1
 800e6ac:	d103      	bne.n	800e6b6 <sbrk_aligned+0x26>
 800e6ae:	f04f 34ff 	mov.w	r4, #4294967295
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	bd70      	pop	{r4, r5, r6, pc}
 800e6b6:	1cc4      	adds	r4, r0, #3
 800e6b8:	f024 0403 	bic.w	r4, r4, #3
 800e6bc:	42a0      	cmp	r0, r4
 800e6be:	d0f8      	beq.n	800e6b2 <sbrk_aligned+0x22>
 800e6c0:	1a21      	subs	r1, r4, r0
 800e6c2:	4628      	mov	r0, r5
 800e6c4:	f000 ff92 	bl	800f5ec <_sbrk_r>
 800e6c8:	3001      	adds	r0, #1
 800e6ca:	d1f2      	bne.n	800e6b2 <sbrk_aligned+0x22>
 800e6cc:	e7ef      	b.n	800e6ae <sbrk_aligned+0x1e>
 800e6ce:	bf00      	nop
 800e6d0:	2000085c 	.word	0x2000085c

0800e6d4 <_malloc_r>:
 800e6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6d8:	1ccd      	adds	r5, r1, #3
 800e6da:	f025 0503 	bic.w	r5, r5, #3
 800e6de:	3508      	adds	r5, #8
 800e6e0:	2d0c      	cmp	r5, #12
 800e6e2:	bf38      	it	cc
 800e6e4:	250c      	movcc	r5, #12
 800e6e6:	2d00      	cmp	r5, #0
 800e6e8:	4606      	mov	r6, r0
 800e6ea:	db01      	blt.n	800e6f0 <_malloc_r+0x1c>
 800e6ec:	42a9      	cmp	r1, r5
 800e6ee:	d904      	bls.n	800e6fa <_malloc_r+0x26>
 800e6f0:	230c      	movs	r3, #12
 800e6f2:	6033      	str	r3, [r6, #0]
 800e6f4:	2000      	movs	r0, #0
 800e6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e7d0 <_malloc_r+0xfc>
 800e6fe:	f000 f87b 	bl	800e7f8 <__malloc_lock>
 800e702:	f8d8 3000 	ldr.w	r3, [r8]
 800e706:	461c      	mov	r4, r3
 800e708:	bb44      	cbnz	r4, 800e75c <_malloc_r+0x88>
 800e70a:	4629      	mov	r1, r5
 800e70c:	4630      	mov	r0, r6
 800e70e:	f7ff ffbf 	bl	800e690 <sbrk_aligned>
 800e712:	1c43      	adds	r3, r0, #1
 800e714:	4604      	mov	r4, r0
 800e716:	d158      	bne.n	800e7ca <_malloc_r+0xf6>
 800e718:	f8d8 4000 	ldr.w	r4, [r8]
 800e71c:	4627      	mov	r7, r4
 800e71e:	2f00      	cmp	r7, #0
 800e720:	d143      	bne.n	800e7aa <_malloc_r+0xd6>
 800e722:	2c00      	cmp	r4, #0
 800e724:	d04b      	beq.n	800e7be <_malloc_r+0xea>
 800e726:	6823      	ldr	r3, [r4, #0]
 800e728:	4639      	mov	r1, r7
 800e72a:	4630      	mov	r0, r6
 800e72c:	eb04 0903 	add.w	r9, r4, r3
 800e730:	f000 ff5c 	bl	800f5ec <_sbrk_r>
 800e734:	4581      	cmp	r9, r0
 800e736:	d142      	bne.n	800e7be <_malloc_r+0xea>
 800e738:	6821      	ldr	r1, [r4, #0]
 800e73a:	1a6d      	subs	r5, r5, r1
 800e73c:	4629      	mov	r1, r5
 800e73e:	4630      	mov	r0, r6
 800e740:	f7ff ffa6 	bl	800e690 <sbrk_aligned>
 800e744:	3001      	adds	r0, #1
 800e746:	d03a      	beq.n	800e7be <_malloc_r+0xea>
 800e748:	6823      	ldr	r3, [r4, #0]
 800e74a:	442b      	add	r3, r5
 800e74c:	6023      	str	r3, [r4, #0]
 800e74e:	f8d8 3000 	ldr.w	r3, [r8]
 800e752:	685a      	ldr	r2, [r3, #4]
 800e754:	bb62      	cbnz	r2, 800e7b0 <_malloc_r+0xdc>
 800e756:	f8c8 7000 	str.w	r7, [r8]
 800e75a:	e00f      	b.n	800e77c <_malloc_r+0xa8>
 800e75c:	6822      	ldr	r2, [r4, #0]
 800e75e:	1b52      	subs	r2, r2, r5
 800e760:	d420      	bmi.n	800e7a4 <_malloc_r+0xd0>
 800e762:	2a0b      	cmp	r2, #11
 800e764:	d917      	bls.n	800e796 <_malloc_r+0xc2>
 800e766:	1961      	adds	r1, r4, r5
 800e768:	42a3      	cmp	r3, r4
 800e76a:	6025      	str	r5, [r4, #0]
 800e76c:	bf18      	it	ne
 800e76e:	6059      	strne	r1, [r3, #4]
 800e770:	6863      	ldr	r3, [r4, #4]
 800e772:	bf08      	it	eq
 800e774:	f8c8 1000 	streq.w	r1, [r8]
 800e778:	5162      	str	r2, [r4, r5]
 800e77a:	604b      	str	r3, [r1, #4]
 800e77c:	4630      	mov	r0, r6
 800e77e:	f000 f841 	bl	800e804 <__malloc_unlock>
 800e782:	f104 000b 	add.w	r0, r4, #11
 800e786:	1d23      	adds	r3, r4, #4
 800e788:	f020 0007 	bic.w	r0, r0, #7
 800e78c:	1ac2      	subs	r2, r0, r3
 800e78e:	bf1c      	itt	ne
 800e790:	1a1b      	subne	r3, r3, r0
 800e792:	50a3      	strne	r3, [r4, r2]
 800e794:	e7af      	b.n	800e6f6 <_malloc_r+0x22>
 800e796:	6862      	ldr	r2, [r4, #4]
 800e798:	42a3      	cmp	r3, r4
 800e79a:	bf0c      	ite	eq
 800e79c:	f8c8 2000 	streq.w	r2, [r8]
 800e7a0:	605a      	strne	r2, [r3, #4]
 800e7a2:	e7eb      	b.n	800e77c <_malloc_r+0xa8>
 800e7a4:	4623      	mov	r3, r4
 800e7a6:	6864      	ldr	r4, [r4, #4]
 800e7a8:	e7ae      	b.n	800e708 <_malloc_r+0x34>
 800e7aa:	463c      	mov	r4, r7
 800e7ac:	687f      	ldr	r7, [r7, #4]
 800e7ae:	e7b6      	b.n	800e71e <_malloc_r+0x4a>
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	42a3      	cmp	r3, r4
 800e7b6:	d1fb      	bne.n	800e7b0 <_malloc_r+0xdc>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	6053      	str	r3, [r2, #4]
 800e7bc:	e7de      	b.n	800e77c <_malloc_r+0xa8>
 800e7be:	230c      	movs	r3, #12
 800e7c0:	6033      	str	r3, [r6, #0]
 800e7c2:	4630      	mov	r0, r6
 800e7c4:	f000 f81e 	bl	800e804 <__malloc_unlock>
 800e7c8:	e794      	b.n	800e6f4 <_malloc_r+0x20>
 800e7ca:	6005      	str	r5, [r0, #0]
 800e7cc:	e7d6      	b.n	800e77c <_malloc_r+0xa8>
 800e7ce:	bf00      	nop
 800e7d0:	20000860 	.word	0x20000860

0800e7d4 <__ascii_mbtowc>:
 800e7d4:	b082      	sub	sp, #8
 800e7d6:	b901      	cbnz	r1, 800e7da <__ascii_mbtowc+0x6>
 800e7d8:	a901      	add	r1, sp, #4
 800e7da:	b142      	cbz	r2, 800e7ee <__ascii_mbtowc+0x1a>
 800e7dc:	b14b      	cbz	r3, 800e7f2 <__ascii_mbtowc+0x1e>
 800e7de:	7813      	ldrb	r3, [r2, #0]
 800e7e0:	600b      	str	r3, [r1, #0]
 800e7e2:	7812      	ldrb	r2, [r2, #0]
 800e7e4:	1e10      	subs	r0, r2, #0
 800e7e6:	bf18      	it	ne
 800e7e8:	2001      	movne	r0, #1
 800e7ea:	b002      	add	sp, #8
 800e7ec:	4770      	bx	lr
 800e7ee:	4610      	mov	r0, r2
 800e7f0:	e7fb      	b.n	800e7ea <__ascii_mbtowc+0x16>
 800e7f2:	f06f 0001 	mvn.w	r0, #1
 800e7f6:	e7f8      	b.n	800e7ea <__ascii_mbtowc+0x16>

0800e7f8 <__malloc_lock>:
 800e7f8:	4801      	ldr	r0, [pc, #4]	@ (800e800 <__malloc_lock+0x8>)
 800e7fa:	f7fe bd32 	b.w	800d262 <__retarget_lock_acquire_recursive>
 800e7fe:	bf00      	nop
 800e800:	20000858 	.word	0x20000858

0800e804 <__malloc_unlock>:
 800e804:	4801      	ldr	r0, [pc, #4]	@ (800e80c <__malloc_unlock+0x8>)
 800e806:	f7fe bd2d 	b.w	800d264 <__retarget_lock_release_recursive>
 800e80a:	bf00      	nop
 800e80c:	20000858 	.word	0x20000858

0800e810 <_Balloc>:
 800e810:	b570      	push	{r4, r5, r6, lr}
 800e812:	69c6      	ldr	r6, [r0, #28]
 800e814:	4604      	mov	r4, r0
 800e816:	460d      	mov	r5, r1
 800e818:	b976      	cbnz	r6, 800e838 <_Balloc+0x28>
 800e81a:	2010      	movs	r0, #16
 800e81c:	f7ff ff30 	bl	800e680 <malloc>
 800e820:	4602      	mov	r2, r0
 800e822:	61e0      	str	r0, [r4, #28]
 800e824:	b920      	cbnz	r0, 800e830 <_Balloc+0x20>
 800e826:	4b18      	ldr	r3, [pc, #96]	@ (800e888 <_Balloc+0x78>)
 800e828:	4818      	ldr	r0, [pc, #96]	@ (800e88c <_Balloc+0x7c>)
 800e82a:	216b      	movs	r1, #107	@ 0x6b
 800e82c:	f7fe fd3a 	bl	800d2a4 <__assert_func>
 800e830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e834:	6006      	str	r6, [r0, #0]
 800e836:	60c6      	str	r6, [r0, #12]
 800e838:	69e6      	ldr	r6, [r4, #28]
 800e83a:	68f3      	ldr	r3, [r6, #12]
 800e83c:	b183      	cbz	r3, 800e860 <_Balloc+0x50>
 800e83e:	69e3      	ldr	r3, [r4, #28]
 800e840:	68db      	ldr	r3, [r3, #12]
 800e842:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e846:	b9b8      	cbnz	r0, 800e878 <_Balloc+0x68>
 800e848:	2101      	movs	r1, #1
 800e84a:	fa01 f605 	lsl.w	r6, r1, r5
 800e84e:	1d72      	adds	r2, r6, #5
 800e850:	0092      	lsls	r2, r2, #2
 800e852:	4620      	mov	r0, r4
 800e854:	f000 fee1 	bl	800f61a <_calloc_r>
 800e858:	b160      	cbz	r0, 800e874 <_Balloc+0x64>
 800e85a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e85e:	e00e      	b.n	800e87e <_Balloc+0x6e>
 800e860:	2221      	movs	r2, #33	@ 0x21
 800e862:	2104      	movs	r1, #4
 800e864:	4620      	mov	r0, r4
 800e866:	f000 fed8 	bl	800f61a <_calloc_r>
 800e86a:	69e3      	ldr	r3, [r4, #28]
 800e86c:	60f0      	str	r0, [r6, #12]
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d1e4      	bne.n	800e83e <_Balloc+0x2e>
 800e874:	2000      	movs	r0, #0
 800e876:	bd70      	pop	{r4, r5, r6, pc}
 800e878:	6802      	ldr	r2, [r0, #0]
 800e87a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e87e:	2300      	movs	r3, #0
 800e880:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e884:	e7f7      	b.n	800e876 <_Balloc+0x66>
 800e886:	bf00      	nop
 800e888:	0801210a 	.word	0x0801210a
 800e88c:	08012295 	.word	0x08012295

0800e890 <_Bfree>:
 800e890:	b570      	push	{r4, r5, r6, lr}
 800e892:	69c6      	ldr	r6, [r0, #28]
 800e894:	4605      	mov	r5, r0
 800e896:	460c      	mov	r4, r1
 800e898:	b976      	cbnz	r6, 800e8b8 <_Bfree+0x28>
 800e89a:	2010      	movs	r0, #16
 800e89c:	f7ff fef0 	bl	800e680 <malloc>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	61e8      	str	r0, [r5, #28]
 800e8a4:	b920      	cbnz	r0, 800e8b0 <_Bfree+0x20>
 800e8a6:	4b09      	ldr	r3, [pc, #36]	@ (800e8cc <_Bfree+0x3c>)
 800e8a8:	4809      	ldr	r0, [pc, #36]	@ (800e8d0 <_Bfree+0x40>)
 800e8aa:	218f      	movs	r1, #143	@ 0x8f
 800e8ac:	f7fe fcfa 	bl	800d2a4 <__assert_func>
 800e8b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8b4:	6006      	str	r6, [r0, #0]
 800e8b6:	60c6      	str	r6, [r0, #12]
 800e8b8:	b13c      	cbz	r4, 800e8ca <_Bfree+0x3a>
 800e8ba:	69eb      	ldr	r3, [r5, #28]
 800e8bc:	6862      	ldr	r2, [r4, #4]
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8c4:	6021      	str	r1, [r4, #0]
 800e8c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e8ca:	bd70      	pop	{r4, r5, r6, pc}
 800e8cc:	0801210a 	.word	0x0801210a
 800e8d0:	08012295 	.word	0x08012295

0800e8d4 <__multadd>:
 800e8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d8:	690d      	ldr	r5, [r1, #16]
 800e8da:	4607      	mov	r7, r0
 800e8dc:	460c      	mov	r4, r1
 800e8de:	461e      	mov	r6, r3
 800e8e0:	f101 0c14 	add.w	ip, r1, #20
 800e8e4:	2000      	movs	r0, #0
 800e8e6:	f8dc 3000 	ldr.w	r3, [ip]
 800e8ea:	b299      	uxth	r1, r3
 800e8ec:	fb02 6101 	mla	r1, r2, r1, r6
 800e8f0:	0c1e      	lsrs	r6, r3, #16
 800e8f2:	0c0b      	lsrs	r3, r1, #16
 800e8f4:	fb02 3306 	mla	r3, r2, r6, r3
 800e8f8:	b289      	uxth	r1, r1
 800e8fa:	3001      	adds	r0, #1
 800e8fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e900:	4285      	cmp	r5, r0
 800e902:	f84c 1b04 	str.w	r1, [ip], #4
 800e906:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e90a:	dcec      	bgt.n	800e8e6 <__multadd+0x12>
 800e90c:	b30e      	cbz	r6, 800e952 <__multadd+0x7e>
 800e90e:	68a3      	ldr	r3, [r4, #8]
 800e910:	42ab      	cmp	r3, r5
 800e912:	dc19      	bgt.n	800e948 <__multadd+0x74>
 800e914:	6861      	ldr	r1, [r4, #4]
 800e916:	4638      	mov	r0, r7
 800e918:	3101      	adds	r1, #1
 800e91a:	f7ff ff79 	bl	800e810 <_Balloc>
 800e91e:	4680      	mov	r8, r0
 800e920:	b928      	cbnz	r0, 800e92e <__multadd+0x5a>
 800e922:	4602      	mov	r2, r0
 800e924:	4b0c      	ldr	r3, [pc, #48]	@ (800e958 <__multadd+0x84>)
 800e926:	480d      	ldr	r0, [pc, #52]	@ (800e95c <__multadd+0x88>)
 800e928:	21ba      	movs	r1, #186	@ 0xba
 800e92a:	f7fe fcbb 	bl	800d2a4 <__assert_func>
 800e92e:	6922      	ldr	r2, [r4, #16]
 800e930:	3202      	adds	r2, #2
 800e932:	f104 010c 	add.w	r1, r4, #12
 800e936:	0092      	lsls	r2, r2, #2
 800e938:	300c      	adds	r0, #12
 800e93a:	f7fe fc94 	bl	800d266 <memcpy>
 800e93e:	4621      	mov	r1, r4
 800e940:	4638      	mov	r0, r7
 800e942:	f7ff ffa5 	bl	800e890 <_Bfree>
 800e946:	4644      	mov	r4, r8
 800e948:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e94c:	3501      	adds	r5, #1
 800e94e:	615e      	str	r6, [r3, #20]
 800e950:	6125      	str	r5, [r4, #16]
 800e952:	4620      	mov	r0, r4
 800e954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e958:	08012224 	.word	0x08012224
 800e95c:	08012295 	.word	0x08012295

0800e960 <__s2b>:
 800e960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e964:	460c      	mov	r4, r1
 800e966:	4615      	mov	r5, r2
 800e968:	461f      	mov	r7, r3
 800e96a:	2209      	movs	r2, #9
 800e96c:	3308      	adds	r3, #8
 800e96e:	4606      	mov	r6, r0
 800e970:	fb93 f3f2 	sdiv	r3, r3, r2
 800e974:	2100      	movs	r1, #0
 800e976:	2201      	movs	r2, #1
 800e978:	429a      	cmp	r2, r3
 800e97a:	db09      	blt.n	800e990 <__s2b+0x30>
 800e97c:	4630      	mov	r0, r6
 800e97e:	f7ff ff47 	bl	800e810 <_Balloc>
 800e982:	b940      	cbnz	r0, 800e996 <__s2b+0x36>
 800e984:	4602      	mov	r2, r0
 800e986:	4b19      	ldr	r3, [pc, #100]	@ (800e9ec <__s2b+0x8c>)
 800e988:	4819      	ldr	r0, [pc, #100]	@ (800e9f0 <__s2b+0x90>)
 800e98a:	21d3      	movs	r1, #211	@ 0xd3
 800e98c:	f7fe fc8a 	bl	800d2a4 <__assert_func>
 800e990:	0052      	lsls	r2, r2, #1
 800e992:	3101      	adds	r1, #1
 800e994:	e7f0      	b.n	800e978 <__s2b+0x18>
 800e996:	9b08      	ldr	r3, [sp, #32]
 800e998:	6143      	str	r3, [r0, #20]
 800e99a:	2d09      	cmp	r5, #9
 800e99c:	f04f 0301 	mov.w	r3, #1
 800e9a0:	6103      	str	r3, [r0, #16]
 800e9a2:	dd16      	ble.n	800e9d2 <__s2b+0x72>
 800e9a4:	f104 0909 	add.w	r9, r4, #9
 800e9a8:	46c8      	mov	r8, r9
 800e9aa:	442c      	add	r4, r5
 800e9ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e9b0:	4601      	mov	r1, r0
 800e9b2:	3b30      	subs	r3, #48	@ 0x30
 800e9b4:	220a      	movs	r2, #10
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	f7ff ff8c 	bl	800e8d4 <__multadd>
 800e9bc:	45a0      	cmp	r8, r4
 800e9be:	d1f5      	bne.n	800e9ac <__s2b+0x4c>
 800e9c0:	f1a5 0408 	sub.w	r4, r5, #8
 800e9c4:	444c      	add	r4, r9
 800e9c6:	1b2d      	subs	r5, r5, r4
 800e9c8:	1963      	adds	r3, r4, r5
 800e9ca:	42bb      	cmp	r3, r7
 800e9cc:	db04      	blt.n	800e9d8 <__s2b+0x78>
 800e9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9d2:	340a      	adds	r4, #10
 800e9d4:	2509      	movs	r5, #9
 800e9d6:	e7f6      	b.n	800e9c6 <__s2b+0x66>
 800e9d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e9dc:	4601      	mov	r1, r0
 800e9de:	3b30      	subs	r3, #48	@ 0x30
 800e9e0:	220a      	movs	r2, #10
 800e9e2:	4630      	mov	r0, r6
 800e9e4:	f7ff ff76 	bl	800e8d4 <__multadd>
 800e9e8:	e7ee      	b.n	800e9c8 <__s2b+0x68>
 800e9ea:	bf00      	nop
 800e9ec:	08012224 	.word	0x08012224
 800e9f0:	08012295 	.word	0x08012295

0800e9f4 <__hi0bits>:
 800e9f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	bf36      	itet	cc
 800e9fc:	0403      	lslcc	r3, r0, #16
 800e9fe:	2000      	movcs	r0, #0
 800ea00:	2010      	movcc	r0, #16
 800ea02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ea06:	bf3c      	itt	cc
 800ea08:	021b      	lslcc	r3, r3, #8
 800ea0a:	3008      	addcc	r0, #8
 800ea0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea10:	bf3c      	itt	cc
 800ea12:	011b      	lslcc	r3, r3, #4
 800ea14:	3004      	addcc	r0, #4
 800ea16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea1a:	bf3c      	itt	cc
 800ea1c:	009b      	lslcc	r3, r3, #2
 800ea1e:	3002      	addcc	r0, #2
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	db05      	blt.n	800ea30 <__hi0bits+0x3c>
 800ea24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ea28:	f100 0001 	add.w	r0, r0, #1
 800ea2c:	bf08      	it	eq
 800ea2e:	2020      	moveq	r0, #32
 800ea30:	4770      	bx	lr

0800ea32 <__lo0bits>:
 800ea32:	6803      	ldr	r3, [r0, #0]
 800ea34:	4602      	mov	r2, r0
 800ea36:	f013 0007 	ands.w	r0, r3, #7
 800ea3a:	d00b      	beq.n	800ea54 <__lo0bits+0x22>
 800ea3c:	07d9      	lsls	r1, r3, #31
 800ea3e:	d421      	bmi.n	800ea84 <__lo0bits+0x52>
 800ea40:	0798      	lsls	r0, r3, #30
 800ea42:	bf49      	itett	mi
 800ea44:	085b      	lsrmi	r3, r3, #1
 800ea46:	089b      	lsrpl	r3, r3, #2
 800ea48:	2001      	movmi	r0, #1
 800ea4a:	6013      	strmi	r3, [r2, #0]
 800ea4c:	bf5c      	itt	pl
 800ea4e:	6013      	strpl	r3, [r2, #0]
 800ea50:	2002      	movpl	r0, #2
 800ea52:	4770      	bx	lr
 800ea54:	b299      	uxth	r1, r3
 800ea56:	b909      	cbnz	r1, 800ea5c <__lo0bits+0x2a>
 800ea58:	0c1b      	lsrs	r3, r3, #16
 800ea5a:	2010      	movs	r0, #16
 800ea5c:	b2d9      	uxtb	r1, r3
 800ea5e:	b909      	cbnz	r1, 800ea64 <__lo0bits+0x32>
 800ea60:	3008      	adds	r0, #8
 800ea62:	0a1b      	lsrs	r3, r3, #8
 800ea64:	0719      	lsls	r1, r3, #28
 800ea66:	bf04      	itt	eq
 800ea68:	091b      	lsreq	r3, r3, #4
 800ea6a:	3004      	addeq	r0, #4
 800ea6c:	0799      	lsls	r1, r3, #30
 800ea6e:	bf04      	itt	eq
 800ea70:	089b      	lsreq	r3, r3, #2
 800ea72:	3002      	addeq	r0, #2
 800ea74:	07d9      	lsls	r1, r3, #31
 800ea76:	d403      	bmi.n	800ea80 <__lo0bits+0x4e>
 800ea78:	085b      	lsrs	r3, r3, #1
 800ea7a:	f100 0001 	add.w	r0, r0, #1
 800ea7e:	d003      	beq.n	800ea88 <__lo0bits+0x56>
 800ea80:	6013      	str	r3, [r2, #0]
 800ea82:	4770      	bx	lr
 800ea84:	2000      	movs	r0, #0
 800ea86:	4770      	bx	lr
 800ea88:	2020      	movs	r0, #32
 800ea8a:	4770      	bx	lr

0800ea8c <__i2b>:
 800ea8c:	b510      	push	{r4, lr}
 800ea8e:	460c      	mov	r4, r1
 800ea90:	2101      	movs	r1, #1
 800ea92:	f7ff febd 	bl	800e810 <_Balloc>
 800ea96:	4602      	mov	r2, r0
 800ea98:	b928      	cbnz	r0, 800eaa6 <__i2b+0x1a>
 800ea9a:	4b05      	ldr	r3, [pc, #20]	@ (800eab0 <__i2b+0x24>)
 800ea9c:	4805      	ldr	r0, [pc, #20]	@ (800eab4 <__i2b+0x28>)
 800ea9e:	f240 1145 	movw	r1, #325	@ 0x145
 800eaa2:	f7fe fbff 	bl	800d2a4 <__assert_func>
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	6144      	str	r4, [r0, #20]
 800eaaa:	6103      	str	r3, [r0, #16]
 800eaac:	bd10      	pop	{r4, pc}
 800eaae:	bf00      	nop
 800eab0:	08012224 	.word	0x08012224
 800eab4:	08012295 	.word	0x08012295

0800eab8 <__multiply>:
 800eab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eabc:	4614      	mov	r4, r2
 800eabe:	690a      	ldr	r2, [r1, #16]
 800eac0:	6923      	ldr	r3, [r4, #16]
 800eac2:	429a      	cmp	r2, r3
 800eac4:	bfa8      	it	ge
 800eac6:	4623      	movge	r3, r4
 800eac8:	460f      	mov	r7, r1
 800eaca:	bfa4      	itt	ge
 800eacc:	460c      	movge	r4, r1
 800eace:	461f      	movge	r7, r3
 800ead0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ead4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ead8:	68a3      	ldr	r3, [r4, #8]
 800eada:	6861      	ldr	r1, [r4, #4]
 800eadc:	eb0a 0609 	add.w	r6, sl, r9
 800eae0:	42b3      	cmp	r3, r6
 800eae2:	b085      	sub	sp, #20
 800eae4:	bfb8      	it	lt
 800eae6:	3101      	addlt	r1, #1
 800eae8:	f7ff fe92 	bl	800e810 <_Balloc>
 800eaec:	b930      	cbnz	r0, 800eafc <__multiply+0x44>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	4b44      	ldr	r3, [pc, #272]	@ (800ec04 <__multiply+0x14c>)
 800eaf2:	4845      	ldr	r0, [pc, #276]	@ (800ec08 <__multiply+0x150>)
 800eaf4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eaf8:	f7fe fbd4 	bl	800d2a4 <__assert_func>
 800eafc:	f100 0514 	add.w	r5, r0, #20
 800eb00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eb04:	462b      	mov	r3, r5
 800eb06:	2200      	movs	r2, #0
 800eb08:	4543      	cmp	r3, r8
 800eb0a:	d321      	bcc.n	800eb50 <__multiply+0x98>
 800eb0c:	f107 0114 	add.w	r1, r7, #20
 800eb10:	f104 0214 	add.w	r2, r4, #20
 800eb14:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800eb18:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800eb1c:	9302      	str	r3, [sp, #8]
 800eb1e:	1b13      	subs	r3, r2, r4
 800eb20:	3b15      	subs	r3, #21
 800eb22:	f023 0303 	bic.w	r3, r3, #3
 800eb26:	3304      	adds	r3, #4
 800eb28:	f104 0715 	add.w	r7, r4, #21
 800eb2c:	42ba      	cmp	r2, r7
 800eb2e:	bf38      	it	cc
 800eb30:	2304      	movcc	r3, #4
 800eb32:	9301      	str	r3, [sp, #4]
 800eb34:	9b02      	ldr	r3, [sp, #8]
 800eb36:	9103      	str	r1, [sp, #12]
 800eb38:	428b      	cmp	r3, r1
 800eb3a:	d80c      	bhi.n	800eb56 <__multiply+0x9e>
 800eb3c:	2e00      	cmp	r6, #0
 800eb3e:	dd03      	ble.n	800eb48 <__multiply+0x90>
 800eb40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d05b      	beq.n	800ec00 <__multiply+0x148>
 800eb48:	6106      	str	r6, [r0, #16]
 800eb4a:	b005      	add	sp, #20
 800eb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb50:	f843 2b04 	str.w	r2, [r3], #4
 800eb54:	e7d8      	b.n	800eb08 <__multiply+0x50>
 800eb56:	f8b1 a000 	ldrh.w	sl, [r1]
 800eb5a:	f1ba 0f00 	cmp.w	sl, #0
 800eb5e:	d024      	beq.n	800ebaa <__multiply+0xf2>
 800eb60:	f104 0e14 	add.w	lr, r4, #20
 800eb64:	46a9      	mov	r9, r5
 800eb66:	f04f 0c00 	mov.w	ip, #0
 800eb6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eb6e:	f8d9 3000 	ldr.w	r3, [r9]
 800eb72:	fa1f fb87 	uxth.w	fp, r7
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	fb0a 330b 	mla	r3, sl, fp, r3
 800eb7c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800eb80:	f8d9 7000 	ldr.w	r7, [r9]
 800eb84:	4463      	add	r3, ip
 800eb86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eb8a:	fb0a c70b 	mla	r7, sl, fp, ip
 800eb8e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eb98:	4572      	cmp	r2, lr
 800eb9a:	f849 3b04 	str.w	r3, [r9], #4
 800eb9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eba2:	d8e2      	bhi.n	800eb6a <__multiply+0xb2>
 800eba4:	9b01      	ldr	r3, [sp, #4]
 800eba6:	f845 c003 	str.w	ip, [r5, r3]
 800ebaa:	9b03      	ldr	r3, [sp, #12]
 800ebac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ebb0:	3104      	adds	r1, #4
 800ebb2:	f1b9 0f00 	cmp.w	r9, #0
 800ebb6:	d021      	beq.n	800ebfc <__multiply+0x144>
 800ebb8:	682b      	ldr	r3, [r5, #0]
 800ebba:	f104 0c14 	add.w	ip, r4, #20
 800ebbe:	46ae      	mov	lr, r5
 800ebc0:	f04f 0a00 	mov.w	sl, #0
 800ebc4:	f8bc b000 	ldrh.w	fp, [ip]
 800ebc8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ebcc:	fb09 770b 	mla	r7, r9, fp, r7
 800ebd0:	4457      	add	r7, sl
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ebd8:	f84e 3b04 	str.w	r3, [lr], #4
 800ebdc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ebe0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ebe4:	f8be 3000 	ldrh.w	r3, [lr]
 800ebe8:	fb09 330a 	mla	r3, r9, sl, r3
 800ebec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ebf0:	4562      	cmp	r2, ip
 800ebf2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ebf6:	d8e5      	bhi.n	800ebc4 <__multiply+0x10c>
 800ebf8:	9f01      	ldr	r7, [sp, #4]
 800ebfa:	51eb      	str	r3, [r5, r7]
 800ebfc:	3504      	adds	r5, #4
 800ebfe:	e799      	b.n	800eb34 <__multiply+0x7c>
 800ec00:	3e01      	subs	r6, #1
 800ec02:	e79b      	b.n	800eb3c <__multiply+0x84>
 800ec04:	08012224 	.word	0x08012224
 800ec08:	08012295 	.word	0x08012295

0800ec0c <__pow5mult>:
 800ec0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec10:	4615      	mov	r5, r2
 800ec12:	f012 0203 	ands.w	r2, r2, #3
 800ec16:	4607      	mov	r7, r0
 800ec18:	460e      	mov	r6, r1
 800ec1a:	d007      	beq.n	800ec2c <__pow5mult+0x20>
 800ec1c:	4c25      	ldr	r4, [pc, #148]	@ (800ecb4 <__pow5mult+0xa8>)
 800ec1e:	3a01      	subs	r2, #1
 800ec20:	2300      	movs	r3, #0
 800ec22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ec26:	f7ff fe55 	bl	800e8d4 <__multadd>
 800ec2a:	4606      	mov	r6, r0
 800ec2c:	10ad      	asrs	r5, r5, #2
 800ec2e:	d03d      	beq.n	800ecac <__pow5mult+0xa0>
 800ec30:	69fc      	ldr	r4, [r7, #28]
 800ec32:	b97c      	cbnz	r4, 800ec54 <__pow5mult+0x48>
 800ec34:	2010      	movs	r0, #16
 800ec36:	f7ff fd23 	bl	800e680 <malloc>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	61f8      	str	r0, [r7, #28]
 800ec3e:	b928      	cbnz	r0, 800ec4c <__pow5mult+0x40>
 800ec40:	4b1d      	ldr	r3, [pc, #116]	@ (800ecb8 <__pow5mult+0xac>)
 800ec42:	481e      	ldr	r0, [pc, #120]	@ (800ecbc <__pow5mult+0xb0>)
 800ec44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ec48:	f7fe fb2c 	bl	800d2a4 <__assert_func>
 800ec4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec50:	6004      	str	r4, [r0, #0]
 800ec52:	60c4      	str	r4, [r0, #12]
 800ec54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ec58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec5c:	b94c      	cbnz	r4, 800ec72 <__pow5mult+0x66>
 800ec5e:	f240 2171 	movw	r1, #625	@ 0x271
 800ec62:	4638      	mov	r0, r7
 800ec64:	f7ff ff12 	bl	800ea8c <__i2b>
 800ec68:	2300      	movs	r3, #0
 800ec6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec6e:	4604      	mov	r4, r0
 800ec70:	6003      	str	r3, [r0, #0]
 800ec72:	f04f 0900 	mov.w	r9, #0
 800ec76:	07eb      	lsls	r3, r5, #31
 800ec78:	d50a      	bpl.n	800ec90 <__pow5mult+0x84>
 800ec7a:	4631      	mov	r1, r6
 800ec7c:	4622      	mov	r2, r4
 800ec7e:	4638      	mov	r0, r7
 800ec80:	f7ff ff1a 	bl	800eab8 <__multiply>
 800ec84:	4631      	mov	r1, r6
 800ec86:	4680      	mov	r8, r0
 800ec88:	4638      	mov	r0, r7
 800ec8a:	f7ff fe01 	bl	800e890 <_Bfree>
 800ec8e:	4646      	mov	r6, r8
 800ec90:	106d      	asrs	r5, r5, #1
 800ec92:	d00b      	beq.n	800ecac <__pow5mult+0xa0>
 800ec94:	6820      	ldr	r0, [r4, #0]
 800ec96:	b938      	cbnz	r0, 800eca8 <__pow5mult+0x9c>
 800ec98:	4622      	mov	r2, r4
 800ec9a:	4621      	mov	r1, r4
 800ec9c:	4638      	mov	r0, r7
 800ec9e:	f7ff ff0b 	bl	800eab8 <__multiply>
 800eca2:	6020      	str	r0, [r4, #0]
 800eca4:	f8c0 9000 	str.w	r9, [r0]
 800eca8:	4604      	mov	r4, r0
 800ecaa:	e7e4      	b.n	800ec76 <__pow5mult+0x6a>
 800ecac:	4630      	mov	r0, r6
 800ecae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecb2:	bf00      	nop
 800ecb4:	080122f0 	.word	0x080122f0
 800ecb8:	0801210a 	.word	0x0801210a
 800ecbc:	08012295 	.word	0x08012295

0800ecc0 <__lshift>:
 800ecc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecc4:	460c      	mov	r4, r1
 800ecc6:	6849      	ldr	r1, [r1, #4]
 800ecc8:	6923      	ldr	r3, [r4, #16]
 800ecca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ecce:	68a3      	ldr	r3, [r4, #8]
 800ecd0:	4607      	mov	r7, r0
 800ecd2:	4691      	mov	r9, r2
 800ecd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ecd8:	f108 0601 	add.w	r6, r8, #1
 800ecdc:	42b3      	cmp	r3, r6
 800ecde:	db0b      	blt.n	800ecf8 <__lshift+0x38>
 800ece0:	4638      	mov	r0, r7
 800ece2:	f7ff fd95 	bl	800e810 <_Balloc>
 800ece6:	4605      	mov	r5, r0
 800ece8:	b948      	cbnz	r0, 800ecfe <__lshift+0x3e>
 800ecea:	4602      	mov	r2, r0
 800ecec:	4b28      	ldr	r3, [pc, #160]	@ (800ed90 <__lshift+0xd0>)
 800ecee:	4829      	ldr	r0, [pc, #164]	@ (800ed94 <__lshift+0xd4>)
 800ecf0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ecf4:	f7fe fad6 	bl	800d2a4 <__assert_func>
 800ecf8:	3101      	adds	r1, #1
 800ecfa:	005b      	lsls	r3, r3, #1
 800ecfc:	e7ee      	b.n	800ecdc <__lshift+0x1c>
 800ecfe:	2300      	movs	r3, #0
 800ed00:	f100 0114 	add.w	r1, r0, #20
 800ed04:	f100 0210 	add.w	r2, r0, #16
 800ed08:	4618      	mov	r0, r3
 800ed0a:	4553      	cmp	r3, sl
 800ed0c:	db33      	blt.n	800ed76 <__lshift+0xb6>
 800ed0e:	6920      	ldr	r0, [r4, #16]
 800ed10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed14:	f104 0314 	add.w	r3, r4, #20
 800ed18:	f019 091f 	ands.w	r9, r9, #31
 800ed1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ed20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ed24:	d02b      	beq.n	800ed7e <__lshift+0xbe>
 800ed26:	f1c9 0e20 	rsb	lr, r9, #32
 800ed2a:	468a      	mov	sl, r1
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	6818      	ldr	r0, [r3, #0]
 800ed30:	fa00 f009 	lsl.w	r0, r0, r9
 800ed34:	4310      	orrs	r0, r2
 800ed36:	f84a 0b04 	str.w	r0, [sl], #4
 800ed3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed3e:	459c      	cmp	ip, r3
 800ed40:	fa22 f20e 	lsr.w	r2, r2, lr
 800ed44:	d8f3      	bhi.n	800ed2e <__lshift+0x6e>
 800ed46:	ebac 0304 	sub.w	r3, ip, r4
 800ed4a:	3b15      	subs	r3, #21
 800ed4c:	f023 0303 	bic.w	r3, r3, #3
 800ed50:	3304      	adds	r3, #4
 800ed52:	f104 0015 	add.w	r0, r4, #21
 800ed56:	4584      	cmp	ip, r0
 800ed58:	bf38      	it	cc
 800ed5a:	2304      	movcc	r3, #4
 800ed5c:	50ca      	str	r2, [r1, r3]
 800ed5e:	b10a      	cbz	r2, 800ed64 <__lshift+0xa4>
 800ed60:	f108 0602 	add.w	r6, r8, #2
 800ed64:	3e01      	subs	r6, #1
 800ed66:	4638      	mov	r0, r7
 800ed68:	612e      	str	r6, [r5, #16]
 800ed6a:	4621      	mov	r1, r4
 800ed6c:	f7ff fd90 	bl	800e890 <_Bfree>
 800ed70:	4628      	mov	r0, r5
 800ed72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed76:	f842 0f04 	str.w	r0, [r2, #4]!
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	e7c5      	b.n	800ed0a <__lshift+0x4a>
 800ed7e:	3904      	subs	r1, #4
 800ed80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed84:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed88:	459c      	cmp	ip, r3
 800ed8a:	d8f9      	bhi.n	800ed80 <__lshift+0xc0>
 800ed8c:	e7ea      	b.n	800ed64 <__lshift+0xa4>
 800ed8e:	bf00      	nop
 800ed90:	08012224 	.word	0x08012224
 800ed94:	08012295 	.word	0x08012295

0800ed98 <__mcmp>:
 800ed98:	690a      	ldr	r2, [r1, #16]
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	6900      	ldr	r0, [r0, #16]
 800ed9e:	1a80      	subs	r0, r0, r2
 800eda0:	b530      	push	{r4, r5, lr}
 800eda2:	d10e      	bne.n	800edc2 <__mcmp+0x2a>
 800eda4:	3314      	adds	r3, #20
 800eda6:	3114      	adds	r1, #20
 800eda8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800edac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800edb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800edb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800edb8:	4295      	cmp	r5, r2
 800edba:	d003      	beq.n	800edc4 <__mcmp+0x2c>
 800edbc:	d205      	bcs.n	800edca <__mcmp+0x32>
 800edbe:	f04f 30ff 	mov.w	r0, #4294967295
 800edc2:	bd30      	pop	{r4, r5, pc}
 800edc4:	42a3      	cmp	r3, r4
 800edc6:	d3f3      	bcc.n	800edb0 <__mcmp+0x18>
 800edc8:	e7fb      	b.n	800edc2 <__mcmp+0x2a>
 800edca:	2001      	movs	r0, #1
 800edcc:	e7f9      	b.n	800edc2 <__mcmp+0x2a>
	...

0800edd0 <__mdiff>:
 800edd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edd4:	4689      	mov	r9, r1
 800edd6:	4606      	mov	r6, r0
 800edd8:	4611      	mov	r1, r2
 800edda:	4648      	mov	r0, r9
 800eddc:	4614      	mov	r4, r2
 800edde:	f7ff ffdb 	bl	800ed98 <__mcmp>
 800ede2:	1e05      	subs	r5, r0, #0
 800ede4:	d112      	bne.n	800ee0c <__mdiff+0x3c>
 800ede6:	4629      	mov	r1, r5
 800ede8:	4630      	mov	r0, r6
 800edea:	f7ff fd11 	bl	800e810 <_Balloc>
 800edee:	4602      	mov	r2, r0
 800edf0:	b928      	cbnz	r0, 800edfe <__mdiff+0x2e>
 800edf2:	4b3f      	ldr	r3, [pc, #252]	@ (800eef0 <__mdiff+0x120>)
 800edf4:	f240 2137 	movw	r1, #567	@ 0x237
 800edf8:	483e      	ldr	r0, [pc, #248]	@ (800eef4 <__mdiff+0x124>)
 800edfa:	f7fe fa53 	bl	800d2a4 <__assert_func>
 800edfe:	2301      	movs	r3, #1
 800ee00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ee04:	4610      	mov	r0, r2
 800ee06:	b003      	add	sp, #12
 800ee08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee0c:	bfbc      	itt	lt
 800ee0e:	464b      	movlt	r3, r9
 800ee10:	46a1      	movlt	r9, r4
 800ee12:	4630      	mov	r0, r6
 800ee14:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ee18:	bfba      	itte	lt
 800ee1a:	461c      	movlt	r4, r3
 800ee1c:	2501      	movlt	r5, #1
 800ee1e:	2500      	movge	r5, #0
 800ee20:	f7ff fcf6 	bl	800e810 <_Balloc>
 800ee24:	4602      	mov	r2, r0
 800ee26:	b918      	cbnz	r0, 800ee30 <__mdiff+0x60>
 800ee28:	4b31      	ldr	r3, [pc, #196]	@ (800eef0 <__mdiff+0x120>)
 800ee2a:	f240 2145 	movw	r1, #581	@ 0x245
 800ee2e:	e7e3      	b.n	800edf8 <__mdiff+0x28>
 800ee30:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ee34:	6926      	ldr	r6, [r4, #16]
 800ee36:	60c5      	str	r5, [r0, #12]
 800ee38:	f109 0310 	add.w	r3, r9, #16
 800ee3c:	f109 0514 	add.w	r5, r9, #20
 800ee40:	f104 0e14 	add.w	lr, r4, #20
 800ee44:	f100 0b14 	add.w	fp, r0, #20
 800ee48:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ee4c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ee50:	9301      	str	r3, [sp, #4]
 800ee52:	46d9      	mov	r9, fp
 800ee54:	f04f 0c00 	mov.w	ip, #0
 800ee58:	9b01      	ldr	r3, [sp, #4]
 800ee5a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ee5e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ee62:	9301      	str	r3, [sp, #4]
 800ee64:	fa1f f38a 	uxth.w	r3, sl
 800ee68:	4619      	mov	r1, r3
 800ee6a:	b283      	uxth	r3, r0
 800ee6c:	1acb      	subs	r3, r1, r3
 800ee6e:	0c00      	lsrs	r0, r0, #16
 800ee70:	4463      	add	r3, ip
 800ee72:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ee76:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ee80:	4576      	cmp	r6, lr
 800ee82:	f849 3b04 	str.w	r3, [r9], #4
 800ee86:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ee8a:	d8e5      	bhi.n	800ee58 <__mdiff+0x88>
 800ee8c:	1b33      	subs	r3, r6, r4
 800ee8e:	3b15      	subs	r3, #21
 800ee90:	f023 0303 	bic.w	r3, r3, #3
 800ee94:	3415      	adds	r4, #21
 800ee96:	3304      	adds	r3, #4
 800ee98:	42a6      	cmp	r6, r4
 800ee9a:	bf38      	it	cc
 800ee9c:	2304      	movcc	r3, #4
 800ee9e:	441d      	add	r5, r3
 800eea0:	445b      	add	r3, fp
 800eea2:	461e      	mov	r6, r3
 800eea4:	462c      	mov	r4, r5
 800eea6:	4544      	cmp	r4, r8
 800eea8:	d30e      	bcc.n	800eec8 <__mdiff+0xf8>
 800eeaa:	f108 0103 	add.w	r1, r8, #3
 800eeae:	1b49      	subs	r1, r1, r5
 800eeb0:	f021 0103 	bic.w	r1, r1, #3
 800eeb4:	3d03      	subs	r5, #3
 800eeb6:	45a8      	cmp	r8, r5
 800eeb8:	bf38      	it	cc
 800eeba:	2100      	movcc	r1, #0
 800eebc:	440b      	add	r3, r1
 800eebe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eec2:	b191      	cbz	r1, 800eeea <__mdiff+0x11a>
 800eec4:	6117      	str	r7, [r2, #16]
 800eec6:	e79d      	b.n	800ee04 <__mdiff+0x34>
 800eec8:	f854 1b04 	ldr.w	r1, [r4], #4
 800eecc:	46e6      	mov	lr, ip
 800eece:	0c08      	lsrs	r0, r1, #16
 800eed0:	fa1c fc81 	uxtah	ip, ip, r1
 800eed4:	4471      	add	r1, lr
 800eed6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eeda:	b289      	uxth	r1, r1
 800eedc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eee0:	f846 1b04 	str.w	r1, [r6], #4
 800eee4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eee8:	e7dd      	b.n	800eea6 <__mdiff+0xd6>
 800eeea:	3f01      	subs	r7, #1
 800eeec:	e7e7      	b.n	800eebe <__mdiff+0xee>
 800eeee:	bf00      	nop
 800eef0:	08012224 	.word	0x08012224
 800eef4:	08012295 	.word	0x08012295

0800eef8 <__ulp>:
 800eef8:	b082      	sub	sp, #8
 800eefa:	ed8d 0b00 	vstr	d0, [sp]
 800eefe:	9a01      	ldr	r2, [sp, #4]
 800ef00:	4b0f      	ldr	r3, [pc, #60]	@ (800ef40 <__ulp+0x48>)
 800ef02:	4013      	ands	r3, r2
 800ef04:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	dc08      	bgt.n	800ef1e <__ulp+0x26>
 800ef0c:	425b      	negs	r3, r3
 800ef0e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ef12:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ef16:	da04      	bge.n	800ef22 <__ulp+0x2a>
 800ef18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ef1c:	4113      	asrs	r3, r2
 800ef1e:	2200      	movs	r2, #0
 800ef20:	e008      	b.n	800ef34 <__ulp+0x3c>
 800ef22:	f1a2 0314 	sub.w	r3, r2, #20
 800ef26:	2b1e      	cmp	r3, #30
 800ef28:	bfda      	itte	le
 800ef2a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ef2e:	40da      	lsrle	r2, r3
 800ef30:	2201      	movgt	r2, #1
 800ef32:	2300      	movs	r3, #0
 800ef34:	4619      	mov	r1, r3
 800ef36:	4610      	mov	r0, r2
 800ef38:	ec41 0b10 	vmov	d0, r0, r1
 800ef3c:	b002      	add	sp, #8
 800ef3e:	4770      	bx	lr
 800ef40:	7ff00000 	.word	0x7ff00000

0800ef44 <__b2d>:
 800ef44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef48:	6906      	ldr	r6, [r0, #16]
 800ef4a:	f100 0814 	add.w	r8, r0, #20
 800ef4e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ef52:	1f37      	subs	r7, r6, #4
 800ef54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ef58:	4610      	mov	r0, r2
 800ef5a:	f7ff fd4b 	bl	800e9f4 <__hi0bits>
 800ef5e:	f1c0 0320 	rsb	r3, r0, #32
 800ef62:	280a      	cmp	r0, #10
 800ef64:	600b      	str	r3, [r1, #0]
 800ef66:	491b      	ldr	r1, [pc, #108]	@ (800efd4 <__b2d+0x90>)
 800ef68:	dc15      	bgt.n	800ef96 <__b2d+0x52>
 800ef6a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ef6e:	fa22 f30c 	lsr.w	r3, r2, ip
 800ef72:	45b8      	cmp	r8, r7
 800ef74:	ea43 0501 	orr.w	r5, r3, r1
 800ef78:	bf34      	ite	cc
 800ef7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ef7e:	2300      	movcs	r3, #0
 800ef80:	3015      	adds	r0, #21
 800ef82:	fa02 f000 	lsl.w	r0, r2, r0
 800ef86:	fa23 f30c 	lsr.w	r3, r3, ip
 800ef8a:	4303      	orrs	r3, r0
 800ef8c:	461c      	mov	r4, r3
 800ef8e:	ec45 4b10 	vmov	d0, r4, r5
 800ef92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef96:	45b8      	cmp	r8, r7
 800ef98:	bf3a      	itte	cc
 800ef9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ef9e:	f1a6 0708 	subcc.w	r7, r6, #8
 800efa2:	2300      	movcs	r3, #0
 800efa4:	380b      	subs	r0, #11
 800efa6:	d012      	beq.n	800efce <__b2d+0x8a>
 800efa8:	f1c0 0120 	rsb	r1, r0, #32
 800efac:	fa23 f401 	lsr.w	r4, r3, r1
 800efb0:	4082      	lsls	r2, r0
 800efb2:	4322      	orrs	r2, r4
 800efb4:	4547      	cmp	r7, r8
 800efb6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800efba:	bf8c      	ite	hi
 800efbc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800efc0:	2200      	movls	r2, #0
 800efc2:	4083      	lsls	r3, r0
 800efc4:	40ca      	lsrs	r2, r1
 800efc6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800efca:	4313      	orrs	r3, r2
 800efcc:	e7de      	b.n	800ef8c <__b2d+0x48>
 800efce:	ea42 0501 	orr.w	r5, r2, r1
 800efd2:	e7db      	b.n	800ef8c <__b2d+0x48>
 800efd4:	3ff00000 	.word	0x3ff00000

0800efd8 <__d2b>:
 800efd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800efdc:	460f      	mov	r7, r1
 800efde:	2101      	movs	r1, #1
 800efe0:	ec59 8b10 	vmov	r8, r9, d0
 800efe4:	4616      	mov	r6, r2
 800efe6:	f7ff fc13 	bl	800e810 <_Balloc>
 800efea:	4604      	mov	r4, r0
 800efec:	b930      	cbnz	r0, 800effc <__d2b+0x24>
 800efee:	4602      	mov	r2, r0
 800eff0:	4b23      	ldr	r3, [pc, #140]	@ (800f080 <__d2b+0xa8>)
 800eff2:	4824      	ldr	r0, [pc, #144]	@ (800f084 <__d2b+0xac>)
 800eff4:	f240 310f 	movw	r1, #783	@ 0x30f
 800eff8:	f7fe f954 	bl	800d2a4 <__assert_func>
 800effc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f000:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f004:	b10d      	cbz	r5, 800f00a <__d2b+0x32>
 800f006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f00a:	9301      	str	r3, [sp, #4]
 800f00c:	f1b8 0300 	subs.w	r3, r8, #0
 800f010:	d023      	beq.n	800f05a <__d2b+0x82>
 800f012:	4668      	mov	r0, sp
 800f014:	9300      	str	r3, [sp, #0]
 800f016:	f7ff fd0c 	bl	800ea32 <__lo0bits>
 800f01a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f01e:	b1d0      	cbz	r0, 800f056 <__d2b+0x7e>
 800f020:	f1c0 0320 	rsb	r3, r0, #32
 800f024:	fa02 f303 	lsl.w	r3, r2, r3
 800f028:	430b      	orrs	r3, r1
 800f02a:	40c2      	lsrs	r2, r0
 800f02c:	6163      	str	r3, [r4, #20]
 800f02e:	9201      	str	r2, [sp, #4]
 800f030:	9b01      	ldr	r3, [sp, #4]
 800f032:	61a3      	str	r3, [r4, #24]
 800f034:	2b00      	cmp	r3, #0
 800f036:	bf0c      	ite	eq
 800f038:	2201      	moveq	r2, #1
 800f03a:	2202      	movne	r2, #2
 800f03c:	6122      	str	r2, [r4, #16]
 800f03e:	b1a5      	cbz	r5, 800f06a <__d2b+0x92>
 800f040:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f044:	4405      	add	r5, r0
 800f046:	603d      	str	r5, [r7, #0]
 800f048:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f04c:	6030      	str	r0, [r6, #0]
 800f04e:	4620      	mov	r0, r4
 800f050:	b003      	add	sp, #12
 800f052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f056:	6161      	str	r1, [r4, #20]
 800f058:	e7ea      	b.n	800f030 <__d2b+0x58>
 800f05a:	a801      	add	r0, sp, #4
 800f05c:	f7ff fce9 	bl	800ea32 <__lo0bits>
 800f060:	9b01      	ldr	r3, [sp, #4]
 800f062:	6163      	str	r3, [r4, #20]
 800f064:	3020      	adds	r0, #32
 800f066:	2201      	movs	r2, #1
 800f068:	e7e8      	b.n	800f03c <__d2b+0x64>
 800f06a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f06e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f072:	6038      	str	r0, [r7, #0]
 800f074:	6918      	ldr	r0, [r3, #16]
 800f076:	f7ff fcbd 	bl	800e9f4 <__hi0bits>
 800f07a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f07e:	e7e5      	b.n	800f04c <__d2b+0x74>
 800f080:	08012224 	.word	0x08012224
 800f084:	08012295 	.word	0x08012295

0800f088 <__ratio>:
 800f088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f08c:	b085      	sub	sp, #20
 800f08e:	e9cd 1000 	strd	r1, r0, [sp]
 800f092:	a902      	add	r1, sp, #8
 800f094:	f7ff ff56 	bl	800ef44 <__b2d>
 800f098:	9800      	ldr	r0, [sp, #0]
 800f09a:	a903      	add	r1, sp, #12
 800f09c:	ec55 4b10 	vmov	r4, r5, d0
 800f0a0:	f7ff ff50 	bl	800ef44 <__b2d>
 800f0a4:	9b01      	ldr	r3, [sp, #4]
 800f0a6:	6919      	ldr	r1, [r3, #16]
 800f0a8:	9b00      	ldr	r3, [sp, #0]
 800f0aa:	691b      	ldr	r3, [r3, #16]
 800f0ac:	1ac9      	subs	r1, r1, r3
 800f0ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f0b2:	1a9b      	subs	r3, r3, r2
 800f0b4:	ec5b ab10 	vmov	sl, fp, d0
 800f0b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	bfce      	itee	gt
 800f0c0:	462a      	movgt	r2, r5
 800f0c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f0c6:	465a      	movle	r2, fp
 800f0c8:	462f      	mov	r7, r5
 800f0ca:	46d9      	mov	r9, fp
 800f0cc:	bfcc      	ite	gt
 800f0ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f0d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f0d6:	464b      	mov	r3, r9
 800f0d8:	4652      	mov	r2, sl
 800f0da:	4620      	mov	r0, r4
 800f0dc:	4639      	mov	r1, r7
 800f0de:	f7f1 fbb5 	bl	800084c <__aeabi_ddiv>
 800f0e2:	ec41 0b10 	vmov	d0, r0, r1
 800f0e6:	b005      	add	sp, #20
 800f0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f0ec <__copybits>:
 800f0ec:	3901      	subs	r1, #1
 800f0ee:	b570      	push	{r4, r5, r6, lr}
 800f0f0:	1149      	asrs	r1, r1, #5
 800f0f2:	6914      	ldr	r4, [r2, #16]
 800f0f4:	3101      	adds	r1, #1
 800f0f6:	f102 0314 	add.w	r3, r2, #20
 800f0fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f0fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f102:	1f05      	subs	r5, r0, #4
 800f104:	42a3      	cmp	r3, r4
 800f106:	d30c      	bcc.n	800f122 <__copybits+0x36>
 800f108:	1aa3      	subs	r3, r4, r2
 800f10a:	3b11      	subs	r3, #17
 800f10c:	f023 0303 	bic.w	r3, r3, #3
 800f110:	3211      	adds	r2, #17
 800f112:	42a2      	cmp	r2, r4
 800f114:	bf88      	it	hi
 800f116:	2300      	movhi	r3, #0
 800f118:	4418      	add	r0, r3
 800f11a:	2300      	movs	r3, #0
 800f11c:	4288      	cmp	r0, r1
 800f11e:	d305      	bcc.n	800f12c <__copybits+0x40>
 800f120:	bd70      	pop	{r4, r5, r6, pc}
 800f122:	f853 6b04 	ldr.w	r6, [r3], #4
 800f126:	f845 6f04 	str.w	r6, [r5, #4]!
 800f12a:	e7eb      	b.n	800f104 <__copybits+0x18>
 800f12c:	f840 3b04 	str.w	r3, [r0], #4
 800f130:	e7f4      	b.n	800f11c <__copybits+0x30>

0800f132 <__any_on>:
 800f132:	f100 0214 	add.w	r2, r0, #20
 800f136:	6900      	ldr	r0, [r0, #16]
 800f138:	114b      	asrs	r3, r1, #5
 800f13a:	4298      	cmp	r0, r3
 800f13c:	b510      	push	{r4, lr}
 800f13e:	db11      	blt.n	800f164 <__any_on+0x32>
 800f140:	dd0a      	ble.n	800f158 <__any_on+0x26>
 800f142:	f011 011f 	ands.w	r1, r1, #31
 800f146:	d007      	beq.n	800f158 <__any_on+0x26>
 800f148:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f14c:	fa24 f001 	lsr.w	r0, r4, r1
 800f150:	fa00 f101 	lsl.w	r1, r0, r1
 800f154:	428c      	cmp	r4, r1
 800f156:	d10b      	bne.n	800f170 <__any_on+0x3e>
 800f158:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d803      	bhi.n	800f168 <__any_on+0x36>
 800f160:	2000      	movs	r0, #0
 800f162:	bd10      	pop	{r4, pc}
 800f164:	4603      	mov	r3, r0
 800f166:	e7f7      	b.n	800f158 <__any_on+0x26>
 800f168:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f16c:	2900      	cmp	r1, #0
 800f16e:	d0f5      	beq.n	800f15c <__any_on+0x2a>
 800f170:	2001      	movs	r0, #1
 800f172:	e7f6      	b.n	800f162 <__any_on+0x30>

0800f174 <__ascii_wctomb>:
 800f174:	4603      	mov	r3, r0
 800f176:	4608      	mov	r0, r1
 800f178:	b141      	cbz	r1, 800f18c <__ascii_wctomb+0x18>
 800f17a:	2aff      	cmp	r2, #255	@ 0xff
 800f17c:	d904      	bls.n	800f188 <__ascii_wctomb+0x14>
 800f17e:	228a      	movs	r2, #138	@ 0x8a
 800f180:	601a      	str	r2, [r3, #0]
 800f182:	f04f 30ff 	mov.w	r0, #4294967295
 800f186:	4770      	bx	lr
 800f188:	700a      	strb	r2, [r1, #0]
 800f18a:	2001      	movs	r0, #1
 800f18c:	4770      	bx	lr

0800f18e <__ssputs_r>:
 800f18e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f192:	688e      	ldr	r6, [r1, #8]
 800f194:	461f      	mov	r7, r3
 800f196:	42be      	cmp	r6, r7
 800f198:	680b      	ldr	r3, [r1, #0]
 800f19a:	4682      	mov	sl, r0
 800f19c:	460c      	mov	r4, r1
 800f19e:	4690      	mov	r8, r2
 800f1a0:	d82d      	bhi.n	800f1fe <__ssputs_r+0x70>
 800f1a2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f1a6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f1aa:	d026      	beq.n	800f1fa <__ssputs_r+0x6c>
 800f1ac:	6965      	ldr	r5, [r4, #20]
 800f1ae:	6909      	ldr	r1, [r1, #16]
 800f1b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1b4:	eba3 0901 	sub.w	r9, r3, r1
 800f1b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f1bc:	1c7b      	adds	r3, r7, #1
 800f1be:	444b      	add	r3, r9
 800f1c0:	106d      	asrs	r5, r5, #1
 800f1c2:	429d      	cmp	r5, r3
 800f1c4:	bf38      	it	cc
 800f1c6:	461d      	movcc	r5, r3
 800f1c8:	0553      	lsls	r3, r2, #21
 800f1ca:	d527      	bpl.n	800f21c <__ssputs_r+0x8e>
 800f1cc:	4629      	mov	r1, r5
 800f1ce:	f7ff fa81 	bl	800e6d4 <_malloc_r>
 800f1d2:	4606      	mov	r6, r0
 800f1d4:	b360      	cbz	r0, 800f230 <__ssputs_r+0xa2>
 800f1d6:	6921      	ldr	r1, [r4, #16]
 800f1d8:	464a      	mov	r2, r9
 800f1da:	f7fe f844 	bl	800d266 <memcpy>
 800f1de:	89a3      	ldrh	r3, [r4, #12]
 800f1e0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f1e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1e8:	81a3      	strh	r3, [r4, #12]
 800f1ea:	6126      	str	r6, [r4, #16]
 800f1ec:	6165      	str	r5, [r4, #20]
 800f1ee:	444e      	add	r6, r9
 800f1f0:	eba5 0509 	sub.w	r5, r5, r9
 800f1f4:	6026      	str	r6, [r4, #0]
 800f1f6:	60a5      	str	r5, [r4, #8]
 800f1f8:	463e      	mov	r6, r7
 800f1fa:	42be      	cmp	r6, r7
 800f1fc:	d900      	bls.n	800f200 <__ssputs_r+0x72>
 800f1fe:	463e      	mov	r6, r7
 800f200:	6820      	ldr	r0, [r4, #0]
 800f202:	4632      	mov	r2, r6
 800f204:	4641      	mov	r1, r8
 800f206:	f000 f9d7 	bl	800f5b8 <memmove>
 800f20a:	68a3      	ldr	r3, [r4, #8]
 800f20c:	1b9b      	subs	r3, r3, r6
 800f20e:	60a3      	str	r3, [r4, #8]
 800f210:	6823      	ldr	r3, [r4, #0]
 800f212:	4433      	add	r3, r6
 800f214:	6023      	str	r3, [r4, #0]
 800f216:	2000      	movs	r0, #0
 800f218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f21c:	462a      	mov	r2, r5
 800f21e:	f000 fa10 	bl	800f642 <_realloc_r>
 800f222:	4606      	mov	r6, r0
 800f224:	2800      	cmp	r0, #0
 800f226:	d1e0      	bne.n	800f1ea <__ssputs_r+0x5c>
 800f228:	6921      	ldr	r1, [r4, #16]
 800f22a:	4650      	mov	r0, sl
 800f22c:	f7fe fea4 	bl	800df78 <_free_r>
 800f230:	230c      	movs	r3, #12
 800f232:	f8ca 3000 	str.w	r3, [sl]
 800f236:	89a3      	ldrh	r3, [r4, #12]
 800f238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f23c:	81a3      	strh	r3, [r4, #12]
 800f23e:	f04f 30ff 	mov.w	r0, #4294967295
 800f242:	e7e9      	b.n	800f218 <__ssputs_r+0x8a>

0800f244 <_svfiprintf_r>:
 800f244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f248:	4698      	mov	r8, r3
 800f24a:	898b      	ldrh	r3, [r1, #12]
 800f24c:	061b      	lsls	r3, r3, #24
 800f24e:	b09d      	sub	sp, #116	@ 0x74
 800f250:	4607      	mov	r7, r0
 800f252:	460d      	mov	r5, r1
 800f254:	4614      	mov	r4, r2
 800f256:	d510      	bpl.n	800f27a <_svfiprintf_r+0x36>
 800f258:	690b      	ldr	r3, [r1, #16]
 800f25a:	b973      	cbnz	r3, 800f27a <_svfiprintf_r+0x36>
 800f25c:	2140      	movs	r1, #64	@ 0x40
 800f25e:	f7ff fa39 	bl	800e6d4 <_malloc_r>
 800f262:	6028      	str	r0, [r5, #0]
 800f264:	6128      	str	r0, [r5, #16]
 800f266:	b930      	cbnz	r0, 800f276 <_svfiprintf_r+0x32>
 800f268:	230c      	movs	r3, #12
 800f26a:	603b      	str	r3, [r7, #0]
 800f26c:	f04f 30ff 	mov.w	r0, #4294967295
 800f270:	b01d      	add	sp, #116	@ 0x74
 800f272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f276:	2340      	movs	r3, #64	@ 0x40
 800f278:	616b      	str	r3, [r5, #20]
 800f27a:	2300      	movs	r3, #0
 800f27c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f27e:	2320      	movs	r3, #32
 800f280:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f284:	f8cd 800c 	str.w	r8, [sp, #12]
 800f288:	2330      	movs	r3, #48	@ 0x30
 800f28a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f428 <_svfiprintf_r+0x1e4>
 800f28e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f292:	f04f 0901 	mov.w	r9, #1
 800f296:	4623      	mov	r3, r4
 800f298:	469a      	mov	sl, r3
 800f29a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f29e:	b10a      	cbz	r2, 800f2a4 <_svfiprintf_r+0x60>
 800f2a0:	2a25      	cmp	r2, #37	@ 0x25
 800f2a2:	d1f9      	bne.n	800f298 <_svfiprintf_r+0x54>
 800f2a4:	ebba 0b04 	subs.w	fp, sl, r4
 800f2a8:	d00b      	beq.n	800f2c2 <_svfiprintf_r+0x7e>
 800f2aa:	465b      	mov	r3, fp
 800f2ac:	4622      	mov	r2, r4
 800f2ae:	4629      	mov	r1, r5
 800f2b0:	4638      	mov	r0, r7
 800f2b2:	f7ff ff6c 	bl	800f18e <__ssputs_r>
 800f2b6:	3001      	adds	r0, #1
 800f2b8:	f000 80a7 	beq.w	800f40a <_svfiprintf_r+0x1c6>
 800f2bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2be:	445a      	add	r2, fp
 800f2c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2c2:	f89a 3000 	ldrb.w	r3, [sl]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	f000 809f 	beq.w	800f40a <_svfiprintf_r+0x1c6>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f2d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2d6:	f10a 0a01 	add.w	sl, sl, #1
 800f2da:	9304      	str	r3, [sp, #16]
 800f2dc:	9307      	str	r3, [sp, #28]
 800f2de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f2e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2e4:	4654      	mov	r4, sl
 800f2e6:	2205      	movs	r2, #5
 800f2e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2ec:	484e      	ldr	r0, [pc, #312]	@ (800f428 <_svfiprintf_r+0x1e4>)
 800f2ee:	f7f0 ff6f 	bl	80001d0 <memchr>
 800f2f2:	9a04      	ldr	r2, [sp, #16]
 800f2f4:	b9d8      	cbnz	r0, 800f32e <_svfiprintf_r+0xea>
 800f2f6:	06d0      	lsls	r0, r2, #27
 800f2f8:	bf44      	itt	mi
 800f2fa:	2320      	movmi	r3, #32
 800f2fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f300:	0711      	lsls	r1, r2, #28
 800f302:	bf44      	itt	mi
 800f304:	232b      	movmi	r3, #43	@ 0x2b
 800f306:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f30a:	f89a 3000 	ldrb.w	r3, [sl]
 800f30e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f310:	d015      	beq.n	800f33e <_svfiprintf_r+0xfa>
 800f312:	9a07      	ldr	r2, [sp, #28]
 800f314:	4654      	mov	r4, sl
 800f316:	2000      	movs	r0, #0
 800f318:	f04f 0c0a 	mov.w	ip, #10
 800f31c:	4621      	mov	r1, r4
 800f31e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f322:	3b30      	subs	r3, #48	@ 0x30
 800f324:	2b09      	cmp	r3, #9
 800f326:	d94b      	bls.n	800f3c0 <_svfiprintf_r+0x17c>
 800f328:	b1b0      	cbz	r0, 800f358 <_svfiprintf_r+0x114>
 800f32a:	9207      	str	r2, [sp, #28]
 800f32c:	e014      	b.n	800f358 <_svfiprintf_r+0x114>
 800f32e:	eba0 0308 	sub.w	r3, r0, r8
 800f332:	fa09 f303 	lsl.w	r3, r9, r3
 800f336:	4313      	orrs	r3, r2
 800f338:	9304      	str	r3, [sp, #16]
 800f33a:	46a2      	mov	sl, r4
 800f33c:	e7d2      	b.n	800f2e4 <_svfiprintf_r+0xa0>
 800f33e:	9b03      	ldr	r3, [sp, #12]
 800f340:	1d19      	adds	r1, r3, #4
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	9103      	str	r1, [sp, #12]
 800f346:	2b00      	cmp	r3, #0
 800f348:	bfbb      	ittet	lt
 800f34a:	425b      	neglt	r3, r3
 800f34c:	f042 0202 	orrlt.w	r2, r2, #2
 800f350:	9307      	strge	r3, [sp, #28]
 800f352:	9307      	strlt	r3, [sp, #28]
 800f354:	bfb8      	it	lt
 800f356:	9204      	strlt	r2, [sp, #16]
 800f358:	7823      	ldrb	r3, [r4, #0]
 800f35a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f35c:	d10a      	bne.n	800f374 <_svfiprintf_r+0x130>
 800f35e:	7863      	ldrb	r3, [r4, #1]
 800f360:	2b2a      	cmp	r3, #42	@ 0x2a
 800f362:	d132      	bne.n	800f3ca <_svfiprintf_r+0x186>
 800f364:	9b03      	ldr	r3, [sp, #12]
 800f366:	1d1a      	adds	r2, r3, #4
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	9203      	str	r2, [sp, #12]
 800f36c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f370:	3402      	adds	r4, #2
 800f372:	9305      	str	r3, [sp, #20]
 800f374:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f438 <_svfiprintf_r+0x1f4>
 800f378:	7821      	ldrb	r1, [r4, #0]
 800f37a:	2203      	movs	r2, #3
 800f37c:	4650      	mov	r0, sl
 800f37e:	f7f0 ff27 	bl	80001d0 <memchr>
 800f382:	b138      	cbz	r0, 800f394 <_svfiprintf_r+0x150>
 800f384:	9b04      	ldr	r3, [sp, #16]
 800f386:	eba0 000a 	sub.w	r0, r0, sl
 800f38a:	2240      	movs	r2, #64	@ 0x40
 800f38c:	4082      	lsls	r2, r0
 800f38e:	4313      	orrs	r3, r2
 800f390:	3401      	adds	r4, #1
 800f392:	9304      	str	r3, [sp, #16]
 800f394:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f398:	4824      	ldr	r0, [pc, #144]	@ (800f42c <_svfiprintf_r+0x1e8>)
 800f39a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f39e:	2206      	movs	r2, #6
 800f3a0:	f7f0 ff16 	bl	80001d0 <memchr>
 800f3a4:	2800      	cmp	r0, #0
 800f3a6:	d036      	beq.n	800f416 <_svfiprintf_r+0x1d2>
 800f3a8:	4b21      	ldr	r3, [pc, #132]	@ (800f430 <_svfiprintf_r+0x1ec>)
 800f3aa:	bb1b      	cbnz	r3, 800f3f4 <_svfiprintf_r+0x1b0>
 800f3ac:	9b03      	ldr	r3, [sp, #12]
 800f3ae:	3307      	adds	r3, #7
 800f3b0:	f023 0307 	bic.w	r3, r3, #7
 800f3b4:	3308      	adds	r3, #8
 800f3b6:	9303      	str	r3, [sp, #12]
 800f3b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3ba:	4433      	add	r3, r6
 800f3bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3be:	e76a      	b.n	800f296 <_svfiprintf_r+0x52>
 800f3c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3c4:	460c      	mov	r4, r1
 800f3c6:	2001      	movs	r0, #1
 800f3c8:	e7a8      	b.n	800f31c <_svfiprintf_r+0xd8>
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	3401      	adds	r4, #1
 800f3ce:	9305      	str	r3, [sp, #20]
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	f04f 0c0a 	mov.w	ip, #10
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3dc:	3a30      	subs	r2, #48	@ 0x30
 800f3de:	2a09      	cmp	r2, #9
 800f3e0:	d903      	bls.n	800f3ea <_svfiprintf_r+0x1a6>
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d0c6      	beq.n	800f374 <_svfiprintf_r+0x130>
 800f3e6:	9105      	str	r1, [sp, #20]
 800f3e8:	e7c4      	b.n	800f374 <_svfiprintf_r+0x130>
 800f3ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	e7f0      	b.n	800f3d6 <_svfiprintf_r+0x192>
 800f3f4:	ab03      	add	r3, sp, #12
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	462a      	mov	r2, r5
 800f3fa:	4b0e      	ldr	r3, [pc, #56]	@ (800f434 <_svfiprintf_r+0x1f0>)
 800f3fc:	a904      	add	r1, sp, #16
 800f3fe:	4638      	mov	r0, r7
 800f400:	f7fc ff52 	bl	800c2a8 <_printf_float>
 800f404:	1c42      	adds	r2, r0, #1
 800f406:	4606      	mov	r6, r0
 800f408:	d1d6      	bne.n	800f3b8 <_svfiprintf_r+0x174>
 800f40a:	89ab      	ldrh	r3, [r5, #12]
 800f40c:	065b      	lsls	r3, r3, #25
 800f40e:	f53f af2d 	bmi.w	800f26c <_svfiprintf_r+0x28>
 800f412:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f414:	e72c      	b.n	800f270 <_svfiprintf_r+0x2c>
 800f416:	ab03      	add	r3, sp, #12
 800f418:	9300      	str	r3, [sp, #0]
 800f41a:	462a      	mov	r2, r5
 800f41c:	4b05      	ldr	r3, [pc, #20]	@ (800f434 <_svfiprintf_r+0x1f0>)
 800f41e:	a904      	add	r1, sp, #16
 800f420:	4638      	mov	r0, r7
 800f422:	f7fd f9d9 	bl	800c7d8 <_printf_i>
 800f426:	e7ed      	b.n	800f404 <_svfiprintf_r+0x1c0>
 800f428:	080123f0 	.word	0x080123f0
 800f42c:	080123fa 	.word	0x080123fa
 800f430:	0800c2a9 	.word	0x0800c2a9
 800f434:	0800f18f 	.word	0x0800f18f
 800f438:	080123f6 	.word	0x080123f6

0800f43c <__sflush_r>:
 800f43c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f444:	0716      	lsls	r6, r2, #28
 800f446:	4605      	mov	r5, r0
 800f448:	460c      	mov	r4, r1
 800f44a:	d454      	bmi.n	800f4f6 <__sflush_r+0xba>
 800f44c:	684b      	ldr	r3, [r1, #4]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	dc02      	bgt.n	800f458 <__sflush_r+0x1c>
 800f452:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f454:	2b00      	cmp	r3, #0
 800f456:	dd48      	ble.n	800f4ea <__sflush_r+0xae>
 800f458:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f45a:	2e00      	cmp	r6, #0
 800f45c:	d045      	beq.n	800f4ea <__sflush_r+0xae>
 800f45e:	2300      	movs	r3, #0
 800f460:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f464:	682f      	ldr	r7, [r5, #0]
 800f466:	6a21      	ldr	r1, [r4, #32]
 800f468:	602b      	str	r3, [r5, #0]
 800f46a:	d030      	beq.n	800f4ce <__sflush_r+0x92>
 800f46c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f46e:	89a3      	ldrh	r3, [r4, #12]
 800f470:	0759      	lsls	r1, r3, #29
 800f472:	d505      	bpl.n	800f480 <__sflush_r+0x44>
 800f474:	6863      	ldr	r3, [r4, #4]
 800f476:	1ad2      	subs	r2, r2, r3
 800f478:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f47a:	b10b      	cbz	r3, 800f480 <__sflush_r+0x44>
 800f47c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f47e:	1ad2      	subs	r2, r2, r3
 800f480:	2300      	movs	r3, #0
 800f482:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f484:	6a21      	ldr	r1, [r4, #32]
 800f486:	4628      	mov	r0, r5
 800f488:	47b0      	blx	r6
 800f48a:	1c43      	adds	r3, r0, #1
 800f48c:	89a3      	ldrh	r3, [r4, #12]
 800f48e:	d106      	bne.n	800f49e <__sflush_r+0x62>
 800f490:	6829      	ldr	r1, [r5, #0]
 800f492:	291d      	cmp	r1, #29
 800f494:	d82b      	bhi.n	800f4ee <__sflush_r+0xb2>
 800f496:	4a2a      	ldr	r2, [pc, #168]	@ (800f540 <__sflush_r+0x104>)
 800f498:	410a      	asrs	r2, r1
 800f49a:	07d6      	lsls	r6, r2, #31
 800f49c:	d427      	bmi.n	800f4ee <__sflush_r+0xb2>
 800f49e:	2200      	movs	r2, #0
 800f4a0:	6062      	str	r2, [r4, #4]
 800f4a2:	04d9      	lsls	r1, r3, #19
 800f4a4:	6922      	ldr	r2, [r4, #16]
 800f4a6:	6022      	str	r2, [r4, #0]
 800f4a8:	d504      	bpl.n	800f4b4 <__sflush_r+0x78>
 800f4aa:	1c42      	adds	r2, r0, #1
 800f4ac:	d101      	bne.n	800f4b2 <__sflush_r+0x76>
 800f4ae:	682b      	ldr	r3, [r5, #0]
 800f4b0:	b903      	cbnz	r3, 800f4b4 <__sflush_r+0x78>
 800f4b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800f4b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4b6:	602f      	str	r7, [r5, #0]
 800f4b8:	b1b9      	cbz	r1, 800f4ea <__sflush_r+0xae>
 800f4ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4be:	4299      	cmp	r1, r3
 800f4c0:	d002      	beq.n	800f4c8 <__sflush_r+0x8c>
 800f4c2:	4628      	mov	r0, r5
 800f4c4:	f7fe fd58 	bl	800df78 <_free_r>
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4cc:	e00d      	b.n	800f4ea <__sflush_r+0xae>
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	4628      	mov	r0, r5
 800f4d2:	47b0      	blx	r6
 800f4d4:	4602      	mov	r2, r0
 800f4d6:	1c50      	adds	r0, r2, #1
 800f4d8:	d1c9      	bne.n	800f46e <__sflush_r+0x32>
 800f4da:	682b      	ldr	r3, [r5, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d0c6      	beq.n	800f46e <__sflush_r+0x32>
 800f4e0:	2b1d      	cmp	r3, #29
 800f4e2:	d001      	beq.n	800f4e8 <__sflush_r+0xac>
 800f4e4:	2b16      	cmp	r3, #22
 800f4e6:	d11e      	bne.n	800f526 <__sflush_r+0xea>
 800f4e8:	602f      	str	r7, [r5, #0]
 800f4ea:	2000      	movs	r0, #0
 800f4ec:	e022      	b.n	800f534 <__sflush_r+0xf8>
 800f4ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4f2:	b21b      	sxth	r3, r3
 800f4f4:	e01b      	b.n	800f52e <__sflush_r+0xf2>
 800f4f6:	690f      	ldr	r7, [r1, #16]
 800f4f8:	2f00      	cmp	r7, #0
 800f4fa:	d0f6      	beq.n	800f4ea <__sflush_r+0xae>
 800f4fc:	0793      	lsls	r3, r2, #30
 800f4fe:	680e      	ldr	r6, [r1, #0]
 800f500:	bf08      	it	eq
 800f502:	694b      	ldreq	r3, [r1, #20]
 800f504:	600f      	str	r7, [r1, #0]
 800f506:	bf18      	it	ne
 800f508:	2300      	movne	r3, #0
 800f50a:	eba6 0807 	sub.w	r8, r6, r7
 800f50e:	608b      	str	r3, [r1, #8]
 800f510:	f1b8 0f00 	cmp.w	r8, #0
 800f514:	dde9      	ble.n	800f4ea <__sflush_r+0xae>
 800f516:	6a21      	ldr	r1, [r4, #32]
 800f518:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f51a:	4643      	mov	r3, r8
 800f51c:	463a      	mov	r2, r7
 800f51e:	4628      	mov	r0, r5
 800f520:	47b0      	blx	r6
 800f522:	2800      	cmp	r0, #0
 800f524:	dc08      	bgt.n	800f538 <__sflush_r+0xfc>
 800f526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f52a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f52e:	81a3      	strh	r3, [r4, #12]
 800f530:	f04f 30ff 	mov.w	r0, #4294967295
 800f534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f538:	4407      	add	r7, r0
 800f53a:	eba8 0800 	sub.w	r8, r8, r0
 800f53e:	e7e7      	b.n	800f510 <__sflush_r+0xd4>
 800f540:	dfbffffe 	.word	0xdfbffffe

0800f544 <_fflush_r>:
 800f544:	b538      	push	{r3, r4, r5, lr}
 800f546:	690b      	ldr	r3, [r1, #16]
 800f548:	4605      	mov	r5, r0
 800f54a:	460c      	mov	r4, r1
 800f54c:	b913      	cbnz	r3, 800f554 <_fflush_r+0x10>
 800f54e:	2500      	movs	r5, #0
 800f550:	4628      	mov	r0, r5
 800f552:	bd38      	pop	{r3, r4, r5, pc}
 800f554:	b118      	cbz	r0, 800f55e <_fflush_r+0x1a>
 800f556:	6a03      	ldr	r3, [r0, #32]
 800f558:	b90b      	cbnz	r3, 800f55e <_fflush_r+0x1a>
 800f55a:	f7fd fcfd 	bl	800cf58 <__sinit>
 800f55e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d0f3      	beq.n	800f54e <_fflush_r+0xa>
 800f566:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f568:	07d0      	lsls	r0, r2, #31
 800f56a:	d404      	bmi.n	800f576 <_fflush_r+0x32>
 800f56c:	0599      	lsls	r1, r3, #22
 800f56e:	d402      	bmi.n	800f576 <_fflush_r+0x32>
 800f570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f572:	f7fd fe76 	bl	800d262 <__retarget_lock_acquire_recursive>
 800f576:	4628      	mov	r0, r5
 800f578:	4621      	mov	r1, r4
 800f57a:	f7ff ff5f 	bl	800f43c <__sflush_r>
 800f57e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f580:	07da      	lsls	r2, r3, #31
 800f582:	4605      	mov	r5, r0
 800f584:	d4e4      	bmi.n	800f550 <_fflush_r+0xc>
 800f586:	89a3      	ldrh	r3, [r4, #12]
 800f588:	059b      	lsls	r3, r3, #22
 800f58a:	d4e1      	bmi.n	800f550 <_fflush_r+0xc>
 800f58c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f58e:	f7fd fe69 	bl	800d264 <__retarget_lock_release_recursive>
 800f592:	e7dd      	b.n	800f550 <_fflush_r+0xc>

0800f594 <fiprintf>:
 800f594:	b40e      	push	{r1, r2, r3}
 800f596:	b503      	push	{r0, r1, lr}
 800f598:	4601      	mov	r1, r0
 800f59a:	ab03      	add	r3, sp, #12
 800f59c:	4805      	ldr	r0, [pc, #20]	@ (800f5b4 <fiprintf+0x20>)
 800f59e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5a2:	6800      	ldr	r0, [r0, #0]
 800f5a4:	9301      	str	r3, [sp, #4]
 800f5a6:	f000 f8a3 	bl	800f6f0 <_vfiprintf_r>
 800f5aa:	b002      	add	sp, #8
 800f5ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5b0:	b003      	add	sp, #12
 800f5b2:	4770      	bx	lr
 800f5b4:	20000250 	.word	0x20000250

0800f5b8 <memmove>:
 800f5b8:	4288      	cmp	r0, r1
 800f5ba:	b510      	push	{r4, lr}
 800f5bc:	eb01 0402 	add.w	r4, r1, r2
 800f5c0:	d902      	bls.n	800f5c8 <memmove+0x10>
 800f5c2:	4284      	cmp	r4, r0
 800f5c4:	4623      	mov	r3, r4
 800f5c6:	d807      	bhi.n	800f5d8 <memmove+0x20>
 800f5c8:	1e43      	subs	r3, r0, #1
 800f5ca:	42a1      	cmp	r1, r4
 800f5cc:	d008      	beq.n	800f5e0 <memmove+0x28>
 800f5ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f5d6:	e7f8      	b.n	800f5ca <memmove+0x12>
 800f5d8:	4402      	add	r2, r0
 800f5da:	4601      	mov	r1, r0
 800f5dc:	428a      	cmp	r2, r1
 800f5de:	d100      	bne.n	800f5e2 <memmove+0x2a>
 800f5e0:	bd10      	pop	{r4, pc}
 800f5e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f5e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f5ea:	e7f7      	b.n	800f5dc <memmove+0x24>

0800f5ec <_sbrk_r>:
 800f5ec:	b538      	push	{r3, r4, r5, lr}
 800f5ee:	4d06      	ldr	r5, [pc, #24]	@ (800f608 <_sbrk_r+0x1c>)
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	4608      	mov	r0, r1
 800f5f6:	602b      	str	r3, [r5, #0]
 800f5f8:	f7f8 f970 	bl	80078dc <_sbrk>
 800f5fc:	1c43      	adds	r3, r0, #1
 800f5fe:	d102      	bne.n	800f606 <_sbrk_r+0x1a>
 800f600:	682b      	ldr	r3, [r5, #0]
 800f602:	b103      	cbz	r3, 800f606 <_sbrk_r+0x1a>
 800f604:	6023      	str	r3, [r4, #0]
 800f606:	bd38      	pop	{r3, r4, r5, pc}
 800f608:	20000854 	.word	0x20000854

0800f60c <abort>:
 800f60c:	b508      	push	{r3, lr}
 800f60e:	2006      	movs	r0, #6
 800f610:	f000 fa42 	bl	800fa98 <raise>
 800f614:	2001      	movs	r0, #1
 800f616:	f7f8 f8e9 	bl	80077ec <_exit>

0800f61a <_calloc_r>:
 800f61a:	b570      	push	{r4, r5, r6, lr}
 800f61c:	fba1 5402 	umull	r5, r4, r1, r2
 800f620:	b93c      	cbnz	r4, 800f632 <_calloc_r+0x18>
 800f622:	4629      	mov	r1, r5
 800f624:	f7ff f856 	bl	800e6d4 <_malloc_r>
 800f628:	4606      	mov	r6, r0
 800f62a:	b928      	cbnz	r0, 800f638 <_calloc_r+0x1e>
 800f62c:	2600      	movs	r6, #0
 800f62e:	4630      	mov	r0, r6
 800f630:	bd70      	pop	{r4, r5, r6, pc}
 800f632:	220c      	movs	r2, #12
 800f634:	6002      	str	r2, [r0, #0]
 800f636:	e7f9      	b.n	800f62c <_calloc_r+0x12>
 800f638:	462a      	mov	r2, r5
 800f63a:	4621      	mov	r1, r4
 800f63c:	f7fd fd25 	bl	800d08a <memset>
 800f640:	e7f5      	b.n	800f62e <_calloc_r+0x14>

0800f642 <_realloc_r>:
 800f642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f646:	4680      	mov	r8, r0
 800f648:	4615      	mov	r5, r2
 800f64a:	460c      	mov	r4, r1
 800f64c:	b921      	cbnz	r1, 800f658 <_realloc_r+0x16>
 800f64e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f652:	4611      	mov	r1, r2
 800f654:	f7ff b83e 	b.w	800e6d4 <_malloc_r>
 800f658:	b92a      	cbnz	r2, 800f666 <_realloc_r+0x24>
 800f65a:	f7fe fc8d 	bl	800df78 <_free_r>
 800f65e:	2400      	movs	r4, #0
 800f660:	4620      	mov	r0, r4
 800f662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f666:	f000 fa33 	bl	800fad0 <_malloc_usable_size_r>
 800f66a:	4285      	cmp	r5, r0
 800f66c:	4606      	mov	r6, r0
 800f66e:	d802      	bhi.n	800f676 <_realloc_r+0x34>
 800f670:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f674:	d8f4      	bhi.n	800f660 <_realloc_r+0x1e>
 800f676:	4629      	mov	r1, r5
 800f678:	4640      	mov	r0, r8
 800f67a:	f7ff f82b 	bl	800e6d4 <_malloc_r>
 800f67e:	4607      	mov	r7, r0
 800f680:	2800      	cmp	r0, #0
 800f682:	d0ec      	beq.n	800f65e <_realloc_r+0x1c>
 800f684:	42b5      	cmp	r5, r6
 800f686:	462a      	mov	r2, r5
 800f688:	4621      	mov	r1, r4
 800f68a:	bf28      	it	cs
 800f68c:	4632      	movcs	r2, r6
 800f68e:	f7fd fdea 	bl	800d266 <memcpy>
 800f692:	4621      	mov	r1, r4
 800f694:	4640      	mov	r0, r8
 800f696:	f7fe fc6f 	bl	800df78 <_free_r>
 800f69a:	463c      	mov	r4, r7
 800f69c:	e7e0      	b.n	800f660 <_realloc_r+0x1e>

0800f69e <__sfputc_r>:
 800f69e:	6893      	ldr	r3, [r2, #8]
 800f6a0:	3b01      	subs	r3, #1
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	b410      	push	{r4}
 800f6a6:	6093      	str	r3, [r2, #8]
 800f6a8:	da08      	bge.n	800f6bc <__sfputc_r+0x1e>
 800f6aa:	6994      	ldr	r4, [r2, #24]
 800f6ac:	42a3      	cmp	r3, r4
 800f6ae:	db01      	blt.n	800f6b4 <__sfputc_r+0x16>
 800f6b0:	290a      	cmp	r1, #10
 800f6b2:	d103      	bne.n	800f6bc <__sfputc_r+0x1e>
 800f6b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6b8:	f000 b932 	b.w	800f920 <__swbuf_r>
 800f6bc:	6813      	ldr	r3, [r2, #0]
 800f6be:	1c58      	adds	r0, r3, #1
 800f6c0:	6010      	str	r0, [r2, #0]
 800f6c2:	7019      	strb	r1, [r3, #0]
 800f6c4:	4608      	mov	r0, r1
 800f6c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <__sfputs_r>:
 800f6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ce:	4606      	mov	r6, r0
 800f6d0:	460f      	mov	r7, r1
 800f6d2:	4614      	mov	r4, r2
 800f6d4:	18d5      	adds	r5, r2, r3
 800f6d6:	42ac      	cmp	r4, r5
 800f6d8:	d101      	bne.n	800f6de <__sfputs_r+0x12>
 800f6da:	2000      	movs	r0, #0
 800f6dc:	e007      	b.n	800f6ee <__sfputs_r+0x22>
 800f6de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6e2:	463a      	mov	r2, r7
 800f6e4:	4630      	mov	r0, r6
 800f6e6:	f7ff ffda 	bl	800f69e <__sfputc_r>
 800f6ea:	1c43      	adds	r3, r0, #1
 800f6ec:	d1f3      	bne.n	800f6d6 <__sfputs_r+0xa>
 800f6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f6f0 <_vfiprintf_r>:
 800f6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f4:	460d      	mov	r5, r1
 800f6f6:	b09d      	sub	sp, #116	@ 0x74
 800f6f8:	4614      	mov	r4, r2
 800f6fa:	4698      	mov	r8, r3
 800f6fc:	4606      	mov	r6, r0
 800f6fe:	b118      	cbz	r0, 800f708 <_vfiprintf_r+0x18>
 800f700:	6a03      	ldr	r3, [r0, #32]
 800f702:	b90b      	cbnz	r3, 800f708 <_vfiprintf_r+0x18>
 800f704:	f7fd fc28 	bl	800cf58 <__sinit>
 800f708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f70a:	07d9      	lsls	r1, r3, #31
 800f70c:	d405      	bmi.n	800f71a <_vfiprintf_r+0x2a>
 800f70e:	89ab      	ldrh	r3, [r5, #12]
 800f710:	059a      	lsls	r2, r3, #22
 800f712:	d402      	bmi.n	800f71a <_vfiprintf_r+0x2a>
 800f714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f716:	f7fd fda4 	bl	800d262 <__retarget_lock_acquire_recursive>
 800f71a:	89ab      	ldrh	r3, [r5, #12]
 800f71c:	071b      	lsls	r3, r3, #28
 800f71e:	d501      	bpl.n	800f724 <_vfiprintf_r+0x34>
 800f720:	692b      	ldr	r3, [r5, #16]
 800f722:	b99b      	cbnz	r3, 800f74c <_vfiprintf_r+0x5c>
 800f724:	4629      	mov	r1, r5
 800f726:	4630      	mov	r0, r6
 800f728:	f000 f938 	bl	800f99c <__swsetup_r>
 800f72c:	b170      	cbz	r0, 800f74c <_vfiprintf_r+0x5c>
 800f72e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f730:	07dc      	lsls	r4, r3, #31
 800f732:	d504      	bpl.n	800f73e <_vfiprintf_r+0x4e>
 800f734:	f04f 30ff 	mov.w	r0, #4294967295
 800f738:	b01d      	add	sp, #116	@ 0x74
 800f73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f73e:	89ab      	ldrh	r3, [r5, #12]
 800f740:	0598      	lsls	r0, r3, #22
 800f742:	d4f7      	bmi.n	800f734 <_vfiprintf_r+0x44>
 800f744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f746:	f7fd fd8d 	bl	800d264 <__retarget_lock_release_recursive>
 800f74a:	e7f3      	b.n	800f734 <_vfiprintf_r+0x44>
 800f74c:	2300      	movs	r3, #0
 800f74e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f750:	2320      	movs	r3, #32
 800f752:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f756:	f8cd 800c 	str.w	r8, [sp, #12]
 800f75a:	2330      	movs	r3, #48	@ 0x30
 800f75c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f90c <_vfiprintf_r+0x21c>
 800f760:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f764:	f04f 0901 	mov.w	r9, #1
 800f768:	4623      	mov	r3, r4
 800f76a:	469a      	mov	sl, r3
 800f76c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f770:	b10a      	cbz	r2, 800f776 <_vfiprintf_r+0x86>
 800f772:	2a25      	cmp	r2, #37	@ 0x25
 800f774:	d1f9      	bne.n	800f76a <_vfiprintf_r+0x7a>
 800f776:	ebba 0b04 	subs.w	fp, sl, r4
 800f77a:	d00b      	beq.n	800f794 <_vfiprintf_r+0xa4>
 800f77c:	465b      	mov	r3, fp
 800f77e:	4622      	mov	r2, r4
 800f780:	4629      	mov	r1, r5
 800f782:	4630      	mov	r0, r6
 800f784:	f7ff ffa2 	bl	800f6cc <__sfputs_r>
 800f788:	3001      	adds	r0, #1
 800f78a:	f000 80a7 	beq.w	800f8dc <_vfiprintf_r+0x1ec>
 800f78e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f790:	445a      	add	r2, fp
 800f792:	9209      	str	r2, [sp, #36]	@ 0x24
 800f794:	f89a 3000 	ldrb.w	r3, [sl]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	f000 809f 	beq.w	800f8dc <_vfiprintf_r+0x1ec>
 800f79e:	2300      	movs	r3, #0
 800f7a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f7a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7a8:	f10a 0a01 	add.w	sl, sl, #1
 800f7ac:	9304      	str	r3, [sp, #16]
 800f7ae:	9307      	str	r3, [sp, #28]
 800f7b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f7b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f7b6:	4654      	mov	r4, sl
 800f7b8:	2205      	movs	r2, #5
 800f7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7be:	4853      	ldr	r0, [pc, #332]	@ (800f90c <_vfiprintf_r+0x21c>)
 800f7c0:	f7f0 fd06 	bl	80001d0 <memchr>
 800f7c4:	9a04      	ldr	r2, [sp, #16]
 800f7c6:	b9d8      	cbnz	r0, 800f800 <_vfiprintf_r+0x110>
 800f7c8:	06d1      	lsls	r1, r2, #27
 800f7ca:	bf44      	itt	mi
 800f7cc:	2320      	movmi	r3, #32
 800f7ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f7d2:	0713      	lsls	r3, r2, #28
 800f7d4:	bf44      	itt	mi
 800f7d6:	232b      	movmi	r3, #43	@ 0x2b
 800f7d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f7e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7e2:	d015      	beq.n	800f810 <_vfiprintf_r+0x120>
 800f7e4:	9a07      	ldr	r2, [sp, #28]
 800f7e6:	4654      	mov	r4, sl
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	f04f 0c0a 	mov.w	ip, #10
 800f7ee:	4621      	mov	r1, r4
 800f7f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7f4:	3b30      	subs	r3, #48	@ 0x30
 800f7f6:	2b09      	cmp	r3, #9
 800f7f8:	d94b      	bls.n	800f892 <_vfiprintf_r+0x1a2>
 800f7fa:	b1b0      	cbz	r0, 800f82a <_vfiprintf_r+0x13a>
 800f7fc:	9207      	str	r2, [sp, #28]
 800f7fe:	e014      	b.n	800f82a <_vfiprintf_r+0x13a>
 800f800:	eba0 0308 	sub.w	r3, r0, r8
 800f804:	fa09 f303 	lsl.w	r3, r9, r3
 800f808:	4313      	orrs	r3, r2
 800f80a:	9304      	str	r3, [sp, #16]
 800f80c:	46a2      	mov	sl, r4
 800f80e:	e7d2      	b.n	800f7b6 <_vfiprintf_r+0xc6>
 800f810:	9b03      	ldr	r3, [sp, #12]
 800f812:	1d19      	adds	r1, r3, #4
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	9103      	str	r1, [sp, #12]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	bfbb      	ittet	lt
 800f81c:	425b      	neglt	r3, r3
 800f81e:	f042 0202 	orrlt.w	r2, r2, #2
 800f822:	9307      	strge	r3, [sp, #28]
 800f824:	9307      	strlt	r3, [sp, #28]
 800f826:	bfb8      	it	lt
 800f828:	9204      	strlt	r2, [sp, #16]
 800f82a:	7823      	ldrb	r3, [r4, #0]
 800f82c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f82e:	d10a      	bne.n	800f846 <_vfiprintf_r+0x156>
 800f830:	7863      	ldrb	r3, [r4, #1]
 800f832:	2b2a      	cmp	r3, #42	@ 0x2a
 800f834:	d132      	bne.n	800f89c <_vfiprintf_r+0x1ac>
 800f836:	9b03      	ldr	r3, [sp, #12]
 800f838:	1d1a      	adds	r2, r3, #4
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	9203      	str	r2, [sp, #12]
 800f83e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f842:	3402      	adds	r4, #2
 800f844:	9305      	str	r3, [sp, #20]
 800f846:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f91c <_vfiprintf_r+0x22c>
 800f84a:	7821      	ldrb	r1, [r4, #0]
 800f84c:	2203      	movs	r2, #3
 800f84e:	4650      	mov	r0, sl
 800f850:	f7f0 fcbe 	bl	80001d0 <memchr>
 800f854:	b138      	cbz	r0, 800f866 <_vfiprintf_r+0x176>
 800f856:	9b04      	ldr	r3, [sp, #16]
 800f858:	eba0 000a 	sub.w	r0, r0, sl
 800f85c:	2240      	movs	r2, #64	@ 0x40
 800f85e:	4082      	lsls	r2, r0
 800f860:	4313      	orrs	r3, r2
 800f862:	3401      	adds	r4, #1
 800f864:	9304      	str	r3, [sp, #16]
 800f866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f86a:	4829      	ldr	r0, [pc, #164]	@ (800f910 <_vfiprintf_r+0x220>)
 800f86c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f870:	2206      	movs	r2, #6
 800f872:	f7f0 fcad 	bl	80001d0 <memchr>
 800f876:	2800      	cmp	r0, #0
 800f878:	d03f      	beq.n	800f8fa <_vfiprintf_r+0x20a>
 800f87a:	4b26      	ldr	r3, [pc, #152]	@ (800f914 <_vfiprintf_r+0x224>)
 800f87c:	bb1b      	cbnz	r3, 800f8c6 <_vfiprintf_r+0x1d6>
 800f87e:	9b03      	ldr	r3, [sp, #12]
 800f880:	3307      	adds	r3, #7
 800f882:	f023 0307 	bic.w	r3, r3, #7
 800f886:	3308      	adds	r3, #8
 800f888:	9303      	str	r3, [sp, #12]
 800f88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f88c:	443b      	add	r3, r7
 800f88e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f890:	e76a      	b.n	800f768 <_vfiprintf_r+0x78>
 800f892:	fb0c 3202 	mla	r2, ip, r2, r3
 800f896:	460c      	mov	r4, r1
 800f898:	2001      	movs	r0, #1
 800f89a:	e7a8      	b.n	800f7ee <_vfiprintf_r+0xfe>
 800f89c:	2300      	movs	r3, #0
 800f89e:	3401      	adds	r4, #1
 800f8a0:	9305      	str	r3, [sp, #20]
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	f04f 0c0a 	mov.w	ip, #10
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8ae:	3a30      	subs	r2, #48	@ 0x30
 800f8b0:	2a09      	cmp	r2, #9
 800f8b2:	d903      	bls.n	800f8bc <_vfiprintf_r+0x1cc>
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d0c6      	beq.n	800f846 <_vfiprintf_r+0x156>
 800f8b8:	9105      	str	r1, [sp, #20]
 800f8ba:	e7c4      	b.n	800f846 <_vfiprintf_r+0x156>
 800f8bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8c0:	4604      	mov	r4, r0
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	e7f0      	b.n	800f8a8 <_vfiprintf_r+0x1b8>
 800f8c6:	ab03      	add	r3, sp, #12
 800f8c8:	9300      	str	r3, [sp, #0]
 800f8ca:	462a      	mov	r2, r5
 800f8cc:	4b12      	ldr	r3, [pc, #72]	@ (800f918 <_vfiprintf_r+0x228>)
 800f8ce:	a904      	add	r1, sp, #16
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	f7fc fce9 	bl	800c2a8 <_printf_float>
 800f8d6:	4607      	mov	r7, r0
 800f8d8:	1c78      	adds	r0, r7, #1
 800f8da:	d1d6      	bne.n	800f88a <_vfiprintf_r+0x19a>
 800f8dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8de:	07d9      	lsls	r1, r3, #31
 800f8e0:	d405      	bmi.n	800f8ee <_vfiprintf_r+0x1fe>
 800f8e2:	89ab      	ldrh	r3, [r5, #12]
 800f8e4:	059a      	lsls	r2, r3, #22
 800f8e6:	d402      	bmi.n	800f8ee <_vfiprintf_r+0x1fe>
 800f8e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f8ea:	f7fd fcbb 	bl	800d264 <__retarget_lock_release_recursive>
 800f8ee:	89ab      	ldrh	r3, [r5, #12]
 800f8f0:	065b      	lsls	r3, r3, #25
 800f8f2:	f53f af1f 	bmi.w	800f734 <_vfiprintf_r+0x44>
 800f8f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8f8:	e71e      	b.n	800f738 <_vfiprintf_r+0x48>
 800f8fa:	ab03      	add	r3, sp, #12
 800f8fc:	9300      	str	r3, [sp, #0]
 800f8fe:	462a      	mov	r2, r5
 800f900:	4b05      	ldr	r3, [pc, #20]	@ (800f918 <_vfiprintf_r+0x228>)
 800f902:	a904      	add	r1, sp, #16
 800f904:	4630      	mov	r0, r6
 800f906:	f7fc ff67 	bl	800c7d8 <_printf_i>
 800f90a:	e7e4      	b.n	800f8d6 <_vfiprintf_r+0x1e6>
 800f90c:	080123f0 	.word	0x080123f0
 800f910:	080123fa 	.word	0x080123fa
 800f914:	0800c2a9 	.word	0x0800c2a9
 800f918:	0800f6cd 	.word	0x0800f6cd
 800f91c:	080123f6 	.word	0x080123f6

0800f920 <__swbuf_r>:
 800f920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f922:	460e      	mov	r6, r1
 800f924:	4614      	mov	r4, r2
 800f926:	4605      	mov	r5, r0
 800f928:	b118      	cbz	r0, 800f932 <__swbuf_r+0x12>
 800f92a:	6a03      	ldr	r3, [r0, #32]
 800f92c:	b90b      	cbnz	r3, 800f932 <__swbuf_r+0x12>
 800f92e:	f7fd fb13 	bl	800cf58 <__sinit>
 800f932:	69a3      	ldr	r3, [r4, #24]
 800f934:	60a3      	str	r3, [r4, #8]
 800f936:	89a3      	ldrh	r3, [r4, #12]
 800f938:	071a      	lsls	r2, r3, #28
 800f93a:	d501      	bpl.n	800f940 <__swbuf_r+0x20>
 800f93c:	6923      	ldr	r3, [r4, #16]
 800f93e:	b943      	cbnz	r3, 800f952 <__swbuf_r+0x32>
 800f940:	4621      	mov	r1, r4
 800f942:	4628      	mov	r0, r5
 800f944:	f000 f82a 	bl	800f99c <__swsetup_r>
 800f948:	b118      	cbz	r0, 800f952 <__swbuf_r+0x32>
 800f94a:	f04f 37ff 	mov.w	r7, #4294967295
 800f94e:	4638      	mov	r0, r7
 800f950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f952:	6823      	ldr	r3, [r4, #0]
 800f954:	6922      	ldr	r2, [r4, #16]
 800f956:	1a98      	subs	r0, r3, r2
 800f958:	6963      	ldr	r3, [r4, #20]
 800f95a:	b2f6      	uxtb	r6, r6
 800f95c:	4283      	cmp	r3, r0
 800f95e:	4637      	mov	r7, r6
 800f960:	dc05      	bgt.n	800f96e <__swbuf_r+0x4e>
 800f962:	4621      	mov	r1, r4
 800f964:	4628      	mov	r0, r5
 800f966:	f7ff fded 	bl	800f544 <_fflush_r>
 800f96a:	2800      	cmp	r0, #0
 800f96c:	d1ed      	bne.n	800f94a <__swbuf_r+0x2a>
 800f96e:	68a3      	ldr	r3, [r4, #8]
 800f970:	3b01      	subs	r3, #1
 800f972:	60a3      	str	r3, [r4, #8]
 800f974:	6823      	ldr	r3, [r4, #0]
 800f976:	1c5a      	adds	r2, r3, #1
 800f978:	6022      	str	r2, [r4, #0]
 800f97a:	701e      	strb	r6, [r3, #0]
 800f97c:	6962      	ldr	r2, [r4, #20]
 800f97e:	1c43      	adds	r3, r0, #1
 800f980:	429a      	cmp	r2, r3
 800f982:	d004      	beq.n	800f98e <__swbuf_r+0x6e>
 800f984:	89a3      	ldrh	r3, [r4, #12]
 800f986:	07db      	lsls	r3, r3, #31
 800f988:	d5e1      	bpl.n	800f94e <__swbuf_r+0x2e>
 800f98a:	2e0a      	cmp	r6, #10
 800f98c:	d1df      	bne.n	800f94e <__swbuf_r+0x2e>
 800f98e:	4621      	mov	r1, r4
 800f990:	4628      	mov	r0, r5
 800f992:	f7ff fdd7 	bl	800f544 <_fflush_r>
 800f996:	2800      	cmp	r0, #0
 800f998:	d0d9      	beq.n	800f94e <__swbuf_r+0x2e>
 800f99a:	e7d6      	b.n	800f94a <__swbuf_r+0x2a>

0800f99c <__swsetup_r>:
 800f99c:	b538      	push	{r3, r4, r5, lr}
 800f99e:	4b29      	ldr	r3, [pc, #164]	@ (800fa44 <__swsetup_r+0xa8>)
 800f9a0:	4605      	mov	r5, r0
 800f9a2:	6818      	ldr	r0, [r3, #0]
 800f9a4:	460c      	mov	r4, r1
 800f9a6:	b118      	cbz	r0, 800f9b0 <__swsetup_r+0x14>
 800f9a8:	6a03      	ldr	r3, [r0, #32]
 800f9aa:	b90b      	cbnz	r3, 800f9b0 <__swsetup_r+0x14>
 800f9ac:	f7fd fad4 	bl	800cf58 <__sinit>
 800f9b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9b4:	0719      	lsls	r1, r3, #28
 800f9b6:	d422      	bmi.n	800f9fe <__swsetup_r+0x62>
 800f9b8:	06da      	lsls	r2, r3, #27
 800f9ba:	d407      	bmi.n	800f9cc <__swsetup_r+0x30>
 800f9bc:	2209      	movs	r2, #9
 800f9be:	602a      	str	r2, [r5, #0]
 800f9c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9c4:	81a3      	strh	r3, [r4, #12]
 800f9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ca:	e033      	b.n	800fa34 <__swsetup_r+0x98>
 800f9cc:	0758      	lsls	r0, r3, #29
 800f9ce:	d512      	bpl.n	800f9f6 <__swsetup_r+0x5a>
 800f9d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f9d2:	b141      	cbz	r1, 800f9e6 <__swsetup_r+0x4a>
 800f9d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f9d8:	4299      	cmp	r1, r3
 800f9da:	d002      	beq.n	800f9e2 <__swsetup_r+0x46>
 800f9dc:	4628      	mov	r0, r5
 800f9de:	f7fe facb 	bl	800df78 <_free_r>
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800f9e6:	89a3      	ldrh	r3, [r4, #12]
 800f9e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f9ec:	81a3      	strh	r3, [r4, #12]
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	6063      	str	r3, [r4, #4]
 800f9f2:	6923      	ldr	r3, [r4, #16]
 800f9f4:	6023      	str	r3, [r4, #0]
 800f9f6:	89a3      	ldrh	r3, [r4, #12]
 800f9f8:	f043 0308 	orr.w	r3, r3, #8
 800f9fc:	81a3      	strh	r3, [r4, #12]
 800f9fe:	6923      	ldr	r3, [r4, #16]
 800fa00:	b94b      	cbnz	r3, 800fa16 <__swsetup_r+0x7a>
 800fa02:	89a3      	ldrh	r3, [r4, #12]
 800fa04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa0c:	d003      	beq.n	800fa16 <__swsetup_r+0x7a>
 800fa0e:	4621      	mov	r1, r4
 800fa10:	4628      	mov	r0, r5
 800fa12:	f000 f88b 	bl	800fb2c <__smakebuf_r>
 800fa16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa1a:	f013 0201 	ands.w	r2, r3, #1
 800fa1e:	d00a      	beq.n	800fa36 <__swsetup_r+0x9a>
 800fa20:	2200      	movs	r2, #0
 800fa22:	60a2      	str	r2, [r4, #8]
 800fa24:	6962      	ldr	r2, [r4, #20]
 800fa26:	4252      	negs	r2, r2
 800fa28:	61a2      	str	r2, [r4, #24]
 800fa2a:	6922      	ldr	r2, [r4, #16]
 800fa2c:	b942      	cbnz	r2, 800fa40 <__swsetup_r+0xa4>
 800fa2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fa32:	d1c5      	bne.n	800f9c0 <__swsetup_r+0x24>
 800fa34:	bd38      	pop	{r3, r4, r5, pc}
 800fa36:	0799      	lsls	r1, r3, #30
 800fa38:	bf58      	it	pl
 800fa3a:	6962      	ldrpl	r2, [r4, #20]
 800fa3c:	60a2      	str	r2, [r4, #8]
 800fa3e:	e7f4      	b.n	800fa2a <__swsetup_r+0x8e>
 800fa40:	2000      	movs	r0, #0
 800fa42:	e7f7      	b.n	800fa34 <__swsetup_r+0x98>
 800fa44:	20000250 	.word	0x20000250

0800fa48 <_raise_r>:
 800fa48:	291f      	cmp	r1, #31
 800fa4a:	b538      	push	{r3, r4, r5, lr}
 800fa4c:	4605      	mov	r5, r0
 800fa4e:	460c      	mov	r4, r1
 800fa50:	d904      	bls.n	800fa5c <_raise_r+0x14>
 800fa52:	2316      	movs	r3, #22
 800fa54:	6003      	str	r3, [r0, #0]
 800fa56:	f04f 30ff 	mov.w	r0, #4294967295
 800fa5a:	bd38      	pop	{r3, r4, r5, pc}
 800fa5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fa5e:	b112      	cbz	r2, 800fa66 <_raise_r+0x1e>
 800fa60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa64:	b94b      	cbnz	r3, 800fa7a <_raise_r+0x32>
 800fa66:	4628      	mov	r0, r5
 800fa68:	f000 f830 	bl	800facc <_getpid_r>
 800fa6c:	4622      	mov	r2, r4
 800fa6e:	4601      	mov	r1, r0
 800fa70:	4628      	mov	r0, r5
 800fa72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa76:	f000 b817 	b.w	800faa8 <_kill_r>
 800fa7a:	2b01      	cmp	r3, #1
 800fa7c:	d00a      	beq.n	800fa94 <_raise_r+0x4c>
 800fa7e:	1c59      	adds	r1, r3, #1
 800fa80:	d103      	bne.n	800fa8a <_raise_r+0x42>
 800fa82:	2316      	movs	r3, #22
 800fa84:	6003      	str	r3, [r0, #0]
 800fa86:	2001      	movs	r0, #1
 800fa88:	e7e7      	b.n	800fa5a <_raise_r+0x12>
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa90:	4620      	mov	r0, r4
 800fa92:	4798      	blx	r3
 800fa94:	2000      	movs	r0, #0
 800fa96:	e7e0      	b.n	800fa5a <_raise_r+0x12>

0800fa98 <raise>:
 800fa98:	4b02      	ldr	r3, [pc, #8]	@ (800faa4 <raise+0xc>)
 800fa9a:	4601      	mov	r1, r0
 800fa9c:	6818      	ldr	r0, [r3, #0]
 800fa9e:	f7ff bfd3 	b.w	800fa48 <_raise_r>
 800faa2:	bf00      	nop
 800faa4:	20000250 	.word	0x20000250

0800faa8 <_kill_r>:
 800faa8:	b538      	push	{r3, r4, r5, lr}
 800faaa:	4d07      	ldr	r5, [pc, #28]	@ (800fac8 <_kill_r+0x20>)
 800faac:	2300      	movs	r3, #0
 800faae:	4604      	mov	r4, r0
 800fab0:	4608      	mov	r0, r1
 800fab2:	4611      	mov	r1, r2
 800fab4:	602b      	str	r3, [r5, #0]
 800fab6:	f7f7 fe89 	bl	80077cc <_kill>
 800faba:	1c43      	adds	r3, r0, #1
 800fabc:	d102      	bne.n	800fac4 <_kill_r+0x1c>
 800fabe:	682b      	ldr	r3, [r5, #0]
 800fac0:	b103      	cbz	r3, 800fac4 <_kill_r+0x1c>
 800fac2:	6023      	str	r3, [r4, #0]
 800fac4:	bd38      	pop	{r3, r4, r5, pc}
 800fac6:	bf00      	nop
 800fac8:	20000854 	.word	0x20000854

0800facc <_getpid_r>:
 800facc:	f7f7 be76 	b.w	80077bc <_getpid>

0800fad0 <_malloc_usable_size_r>:
 800fad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fad4:	1f18      	subs	r0, r3, #4
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	bfbc      	itt	lt
 800fada:	580b      	ldrlt	r3, [r1, r0]
 800fadc:	18c0      	addlt	r0, r0, r3
 800fade:	4770      	bx	lr

0800fae0 <__swhatbuf_r>:
 800fae0:	b570      	push	{r4, r5, r6, lr}
 800fae2:	460c      	mov	r4, r1
 800fae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fae8:	2900      	cmp	r1, #0
 800faea:	b096      	sub	sp, #88	@ 0x58
 800faec:	4615      	mov	r5, r2
 800faee:	461e      	mov	r6, r3
 800faf0:	da0d      	bge.n	800fb0e <__swhatbuf_r+0x2e>
 800faf2:	89a3      	ldrh	r3, [r4, #12]
 800faf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800faf8:	f04f 0100 	mov.w	r1, #0
 800fafc:	bf14      	ite	ne
 800fafe:	2340      	movne	r3, #64	@ 0x40
 800fb00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb04:	2000      	movs	r0, #0
 800fb06:	6031      	str	r1, [r6, #0]
 800fb08:	602b      	str	r3, [r5, #0]
 800fb0a:	b016      	add	sp, #88	@ 0x58
 800fb0c:	bd70      	pop	{r4, r5, r6, pc}
 800fb0e:	466a      	mov	r2, sp
 800fb10:	f000 f848 	bl	800fba4 <_fstat_r>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	dbec      	blt.n	800faf2 <__swhatbuf_r+0x12>
 800fb18:	9901      	ldr	r1, [sp, #4]
 800fb1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb22:	4259      	negs	r1, r3
 800fb24:	4159      	adcs	r1, r3
 800fb26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb2a:	e7eb      	b.n	800fb04 <__swhatbuf_r+0x24>

0800fb2c <__smakebuf_r>:
 800fb2c:	898b      	ldrh	r3, [r1, #12]
 800fb2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb30:	079d      	lsls	r5, r3, #30
 800fb32:	4606      	mov	r6, r0
 800fb34:	460c      	mov	r4, r1
 800fb36:	d507      	bpl.n	800fb48 <__smakebuf_r+0x1c>
 800fb38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fb3c:	6023      	str	r3, [r4, #0]
 800fb3e:	6123      	str	r3, [r4, #16]
 800fb40:	2301      	movs	r3, #1
 800fb42:	6163      	str	r3, [r4, #20]
 800fb44:	b003      	add	sp, #12
 800fb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb48:	ab01      	add	r3, sp, #4
 800fb4a:	466a      	mov	r2, sp
 800fb4c:	f7ff ffc8 	bl	800fae0 <__swhatbuf_r>
 800fb50:	9f00      	ldr	r7, [sp, #0]
 800fb52:	4605      	mov	r5, r0
 800fb54:	4639      	mov	r1, r7
 800fb56:	4630      	mov	r0, r6
 800fb58:	f7fe fdbc 	bl	800e6d4 <_malloc_r>
 800fb5c:	b948      	cbnz	r0, 800fb72 <__smakebuf_r+0x46>
 800fb5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb62:	059a      	lsls	r2, r3, #22
 800fb64:	d4ee      	bmi.n	800fb44 <__smakebuf_r+0x18>
 800fb66:	f023 0303 	bic.w	r3, r3, #3
 800fb6a:	f043 0302 	orr.w	r3, r3, #2
 800fb6e:	81a3      	strh	r3, [r4, #12]
 800fb70:	e7e2      	b.n	800fb38 <__smakebuf_r+0xc>
 800fb72:	89a3      	ldrh	r3, [r4, #12]
 800fb74:	6020      	str	r0, [r4, #0]
 800fb76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb7a:	81a3      	strh	r3, [r4, #12]
 800fb7c:	9b01      	ldr	r3, [sp, #4]
 800fb7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fb82:	b15b      	cbz	r3, 800fb9c <__smakebuf_r+0x70>
 800fb84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb88:	4630      	mov	r0, r6
 800fb8a:	f000 f81d 	bl	800fbc8 <_isatty_r>
 800fb8e:	b128      	cbz	r0, 800fb9c <__smakebuf_r+0x70>
 800fb90:	89a3      	ldrh	r3, [r4, #12]
 800fb92:	f023 0303 	bic.w	r3, r3, #3
 800fb96:	f043 0301 	orr.w	r3, r3, #1
 800fb9a:	81a3      	strh	r3, [r4, #12]
 800fb9c:	89a3      	ldrh	r3, [r4, #12]
 800fb9e:	431d      	orrs	r5, r3
 800fba0:	81a5      	strh	r5, [r4, #12]
 800fba2:	e7cf      	b.n	800fb44 <__smakebuf_r+0x18>

0800fba4 <_fstat_r>:
 800fba4:	b538      	push	{r3, r4, r5, lr}
 800fba6:	4d07      	ldr	r5, [pc, #28]	@ (800fbc4 <_fstat_r+0x20>)
 800fba8:	2300      	movs	r3, #0
 800fbaa:	4604      	mov	r4, r0
 800fbac:	4608      	mov	r0, r1
 800fbae:	4611      	mov	r1, r2
 800fbb0:	602b      	str	r3, [r5, #0]
 800fbb2:	f7f7 fe6b 	bl	800788c <_fstat>
 800fbb6:	1c43      	adds	r3, r0, #1
 800fbb8:	d102      	bne.n	800fbc0 <_fstat_r+0x1c>
 800fbba:	682b      	ldr	r3, [r5, #0]
 800fbbc:	b103      	cbz	r3, 800fbc0 <_fstat_r+0x1c>
 800fbbe:	6023      	str	r3, [r4, #0]
 800fbc0:	bd38      	pop	{r3, r4, r5, pc}
 800fbc2:	bf00      	nop
 800fbc4:	20000854 	.word	0x20000854

0800fbc8 <_isatty_r>:
 800fbc8:	b538      	push	{r3, r4, r5, lr}
 800fbca:	4d06      	ldr	r5, [pc, #24]	@ (800fbe4 <_isatty_r+0x1c>)
 800fbcc:	2300      	movs	r3, #0
 800fbce:	4604      	mov	r4, r0
 800fbd0:	4608      	mov	r0, r1
 800fbd2:	602b      	str	r3, [r5, #0]
 800fbd4:	f7f7 fe6a 	bl	80078ac <_isatty>
 800fbd8:	1c43      	adds	r3, r0, #1
 800fbda:	d102      	bne.n	800fbe2 <_isatty_r+0x1a>
 800fbdc:	682b      	ldr	r3, [r5, #0]
 800fbde:	b103      	cbz	r3, 800fbe2 <_isatty_r+0x1a>
 800fbe0:	6023      	str	r3, [r4, #0]
 800fbe2:	bd38      	pop	{r3, r4, r5, pc}
 800fbe4:	20000854 	.word	0x20000854

0800fbe8 <atan2>:
 800fbe8:	f000 bbc6 	b.w	8010378 <__ieee754_atan2>
 800fbec:	0000      	movs	r0, r0
	...

0800fbf0 <hypot>:
 800fbf0:	b508      	push	{r3, lr}
 800fbf2:	ed2d 8b06 	vpush	{d8-d10}
 800fbf6:	eeb0 aa40 	vmov.f32	s20, s0
 800fbfa:	eef0 aa60 	vmov.f32	s21, s1
 800fbfe:	eeb0 9a41 	vmov.f32	s18, s2
 800fc02:	eef0 9a61 	vmov.f32	s19, s3
 800fc06:	f000 fc7d 	bl	8010504 <__ieee754_hypot>
 800fc0a:	eeb0 8a40 	vmov.f32	s16, s0
 800fc0e:	eef0 8a60 	vmov.f32	s17, s1
 800fc12:	f000 f8c9 	bl	800fda8 <finite>
 800fc16:	b998      	cbnz	r0, 800fc40 <hypot+0x50>
 800fc18:	eeb0 0a4a 	vmov.f32	s0, s20
 800fc1c:	eef0 0a6a 	vmov.f32	s1, s21
 800fc20:	f000 f8c2 	bl	800fda8 <finite>
 800fc24:	b160      	cbz	r0, 800fc40 <hypot+0x50>
 800fc26:	eeb0 0a49 	vmov.f32	s0, s18
 800fc2a:	eef0 0a69 	vmov.f32	s1, s19
 800fc2e:	f000 f8bb 	bl	800fda8 <finite>
 800fc32:	b128      	cbz	r0, 800fc40 <hypot+0x50>
 800fc34:	f7fd faea 	bl	800d20c <__errno>
 800fc38:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800fc50 <hypot+0x60>
 800fc3c:	2322      	movs	r3, #34	@ 0x22
 800fc3e:	6003      	str	r3, [r0, #0]
 800fc40:	eeb0 0a48 	vmov.f32	s0, s16
 800fc44:	eef0 0a68 	vmov.f32	s1, s17
 800fc48:	ecbd 8b06 	vpop	{d8-d10}
 800fc4c:	bd08      	pop	{r3, pc}
 800fc4e:	bf00      	nop
 800fc50:	00000000 	.word	0x00000000
 800fc54:	7ff00000 	.word	0x7ff00000

0800fc58 <cos>:
 800fc58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc5a:	ec53 2b10 	vmov	r2, r3, d0
 800fc5e:	4826      	ldr	r0, [pc, #152]	@ (800fcf8 <cos+0xa0>)
 800fc60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fc64:	4281      	cmp	r1, r0
 800fc66:	d806      	bhi.n	800fc76 <cos+0x1e>
 800fc68:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800fcf0 <cos+0x98>
 800fc6c:	b005      	add	sp, #20
 800fc6e:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc72:	f000 b9fd 	b.w	8010070 <__kernel_cos>
 800fc76:	4821      	ldr	r0, [pc, #132]	@ (800fcfc <cos+0xa4>)
 800fc78:	4281      	cmp	r1, r0
 800fc7a:	d908      	bls.n	800fc8e <cos+0x36>
 800fc7c:	4610      	mov	r0, r2
 800fc7e:	4619      	mov	r1, r3
 800fc80:	f7f0 fb02 	bl	8000288 <__aeabi_dsub>
 800fc84:	ec41 0b10 	vmov	d0, r0, r1
 800fc88:	b005      	add	sp, #20
 800fc8a:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc8e:	4668      	mov	r0, sp
 800fc90:	f000 fd4e 	bl	8010730 <__ieee754_rem_pio2>
 800fc94:	f000 0003 	and.w	r0, r0, #3
 800fc98:	2801      	cmp	r0, #1
 800fc9a:	d00b      	beq.n	800fcb4 <cos+0x5c>
 800fc9c:	2802      	cmp	r0, #2
 800fc9e:	d015      	beq.n	800fccc <cos+0x74>
 800fca0:	b9d8      	cbnz	r0, 800fcda <cos+0x82>
 800fca2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fca6:	ed9d 0b00 	vldr	d0, [sp]
 800fcaa:	f000 f9e1 	bl	8010070 <__kernel_cos>
 800fcae:	ec51 0b10 	vmov	r0, r1, d0
 800fcb2:	e7e7      	b.n	800fc84 <cos+0x2c>
 800fcb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fcb8:	ed9d 0b00 	vldr	d0, [sp]
 800fcbc:	f000 faa0 	bl	8010200 <__kernel_sin>
 800fcc0:	ec53 2b10 	vmov	r2, r3, d0
 800fcc4:	4610      	mov	r0, r2
 800fcc6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fcca:	e7db      	b.n	800fc84 <cos+0x2c>
 800fccc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fcd0:	ed9d 0b00 	vldr	d0, [sp]
 800fcd4:	f000 f9cc 	bl	8010070 <__kernel_cos>
 800fcd8:	e7f2      	b.n	800fcc0 <cos+0x68>
 800fcda:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fcde:	ed9d 0b00 	vldr	d0, [sp]
 800fce2:	2001      	movs	r0, #1
 800fce4:	f000 fa8c 	bl	8010200 <__kernel_sin>
 800fce8:	e7e1      	b.n	800fcae <cos+0x56>
 800fcea:	bf00      	nop
 800fcec:	f3af 8000 	nop.w
	...
 800fcf8:	3fe921fb 	.word	0x3fe921fb
 800fcfc:	7fefffff 	.word	0x7fefffff

0800fd00 <sin>:
 800fd00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd02:	ec53 2b10 	vmov	r2, r3, d0
 800fd06:	4826      	ldr	r0, [pc, #152]	@ (800fda0 <sin+0xa0>)
 800fd08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fd0c:	4281      	cmp	r1, r0
 800fd0e:	d807      	bhi.n	800fd20 <sin+0x20>
 800fd10:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800fd98 <sin+0x98>
 800fd14:	2000      	movs	r0, #0
 800fd16:	b005      	add	sp, #20
 800fd18:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd1c:	f000 ba70 	b.w	8010200 <__kernel_sin>
 800fd20:	4820      	ldr	r0, [pc, #128]	@ (800fda4 <sin+0xa4>)
 800fd22:	4281      	cmp	r1, r0
 800fd24:	d908      	bls.n	800fd38 <sin+0x38>
 800fd26:	4610      	mov	r0, r2
 800fd28:	4619      	mov	r1, r3
 800fd2a:	f7f0 faad 	bl	8000288 <__aeabi_dsub>
 800fd2e:	ec41 0b10 	vmov	d0, r0, r1
 800fd32:	b005      	add	sp, #20
 800fd34:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd38:	4668      	mov	r0, sp
 800fd3a:	f000 fcf9 	bl	8010730 <__ieee754_rem_pio2>
 800fd3e:	f000 0003 	and.w	r0, r0, #3
 800fd42:	2801      	cmp	r0, #1
 800fd44:	d00c      	beq.n	800fd60 <sin+0x60>
 800fd46:	2802      	cmp	r0, #2
 800fd48:	d011      	beq.n	800fd6e <sin+0x6e>
 800fd4a:	b9e8      	cbnz	r0, 800fd88 <sin+0x88>
 800fd4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd50:	ed9d 0b00 	vldr	d0, [sp]
 800fd54:	2001      	movs	r0, #1
 800fd56:	f000 fa53 	bl	8010200 <__kernel_sin>
 800fd5a:	ec51 0b10 	vmov	r0, r1, d0
 800fd5e:	e7e6      	b.n	800fd2e <sin+0x2e>
 800fd60:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd64:	ed9d 0b00 	vldr	d0, [sp]
 800fd68:	f000 f982 	bl	8010070 <__kernel_cos>
 800fd6c:	e7f5      	b.n	800fd5a <sin+0x5a>
 800fd6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd72:	ed9d 0b00 	vldr	d0, [sp]
 800fd76:	2001      	movs	r0, #1
 800fd78:	f000 fa42 	bl	8010200 <__kernel_sin>
 800fd7c:	ec53 2b10 	vmov	r2, r3, d0
 800fd80:	4610      	mov	r0, r2
 800fd82:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fd86:	e7d2      	b.n	800fd2e <sin+0x2e>
 800fd88:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fd8c:	ed9d 0b00 	vldr	d0, [sp]
 800fd90:	f000 f96e 	bl	8010070 <__kernel_cos>
 800fd94:	e7f2      	b.n	800fd7c <sin+0x7c>
 800fd96:	bf00      	nop
	...
 800fda0:	3fe921fb 	.word	0x3fe921fb
 800fda4:	7fefffff 	.word	0x7fefffff

0800fda8 <finite>:
 800fda8:	b082      	sub	sp, #8
 800fdaa:	ed8d 0b00 	vstr	d0, [sp]
 800fdae:	9801      	ldr	r0, [sp, #4]
 800fdb0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800fdb4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800fdb8:	0fc0      	lsrs	r0, r0, #31
 800fdba:	b002      	add	sp, #8
 800fdbc:	4770      	bx	lr

0800fdbe <fmax>:
 800fdbe:	b508      	push	{r3, lr}
 800fdc0:	ed2d 8b04 	vpush	{d8-d9}
 800fdc4:	eeb0 8a40 	vmov.f32	s16, s0
 800fdc8:	eef0 8a60 	vmov.f32	s17, s1
 800fdcc:	eeb0 9a41 	vmov.f32	s18, s2
 800fdd0:	eef0 9a61 	vmov.f32	s19, s3
 800fdd4:	f000 f848 	bl	800fe68 <__fpclassifyd>
 800fdd8:	b950      	cbnz	r0, 800fdf0 <fmax+0x32>
 800fdda:	eeb0 8a49 	vmov.f32	s16, s18
 800fdde:	eef0 8a69 	vmov.f32	s17, s19
 800fde2:	eeb0 0a48 	vmov.f32	s0, s16
 800fde6:	eef0 0a68 	vmov.f32	s1, s17
 800fdea:	ecbd 8b04 	vpop	{d8-d9}
 800fdee:	bd08      	pop	{r3, pc}
 800fdf0:	eeb0 0a49 	vmov.f32	s0, s18
 800fdf4:	eef0 0a69 	vmov.f32	s1, s19
 800fdf8:	f000 f836 	bl	800fe68 <__fpclassifyd>
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	d0f0      	beq.n	800fde2 <fmax+0x24>
 800fe00:	ec53 2b19 	vmov	r2, r3, d9
 800fe04:	ec51 0b18 	vmov	r0, r1, d8
 800fe08:	f7f0 fe86 	bl	8000b18 <__aeabi_dcmpgt>
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	d0e4      	beq.n	800fdda <fmax+0x1c>
 800fe10:	e7e7      	b.n	800fde2 <fmax+0x24>

0800fe12 <fmin>:
 800fe12:	b508      	push	{r3, lr}
 800fe14:	ed2d 8b04 	vpush	{d8-d9}
 800fe18:	eeb0 8a40 	vmov.f32	s16, s0
 800fe1c:	eef0 8a60 	vmov.f32	s17, s1
 800fe20:	eeb0 9a41 	vmov.f32	s18, s2
 800fe24:	eef0 9a61 	vmov.f32	s19, s3
 800fe28:	f000 f81e 	bl	800fe68 <__fpclassifyd>
 800fe2c:	b950      	cbnz	r0, 800fe44 <fmin+0x32>
 800fe2e:	eeb0 8a49 	vmov.f32	s16, s18
 800fe32:	eef0 8a69 	vmov.f32	s17, s19
 800fe36:	eeb0 0a48 	vmov.f32	s0, s16
 800fe3a:	eef0 0a68 	vmov.f32	s1, s17
 800fe3e:	ecbd 8b04 	vpop	{d8-d9}
 800fe42:	bd08      	pop	{r3, pc}
 800fe44:	eeb0 0a49 	vmov.f32	s0, s18
 800fe48:	eef0 0a69 	vmov.f32	s1, s19
 800fe4c:	f000 f80c 	bl	800fe68 <__fpclassifyd>
 800fe50:	2800      	cmp	r0, #0
 800fe52:	d0f0      	beq.n	800fe36 <fmin+0x24>
 800fe54:	ec53 2b19 	vmov	r2, r3, d9
 800fe58:	ec51 0b18 	vmov	r0, r1, d8
 800fe5c:	f7f0 fe3e 	bl	8000adc <__aeabi_dcmplt>
 800fe60:	2800      	cmp	r0, #0
 800fe62:	d0e4      	beq.n	800fe2e <fmin+0x1c>
 800fe64:	e7e7      	b.n	800fe36 <fmin+0x24>
	...

0800fe68 <__fpclassifyd>:
 800fe68:	ec51 0b10 	vmov	r0, r1, d0
 800fe6c:	b510      	push	{r4, lr}
 800fe6e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800fe72:	460b      	mov	r3, r1
 800fe74:	d019      	beq.n	800feaa <__fpclassifyd+0x42>
 800fe76:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800fe7a:	490e      	ldr	r1, [pc, #56]	@ (800feb4 <__fpclassifyd+0x4c>)
 800fe7c:	428a      	cmp	r2, r1
 800fe7e:	d90e      	bls.n	800fe9e <__fpclassifyd+0x36>
 800fe80:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800fe84:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800fe88:	428a      	cmp	r2, r1
 800fe8a:	d908      	bls.n	800fe9e <__fpclassifyd+0x36>
 800fe8c:	4a0a      	ldr	r2, [pc, #40]	@ (800feb8 <__fpclassifyd+0x50>)
 800fe8e:	4213      	tst	r3, r2
 800fe90:	d007      	beq.n	800fea2 <__fpclassifyd+0x3a>
 800fe92:	4294      	cmp	r4, r2
 800fe94:	d107      	bne.n	800fea6 <__fpclassifyd+0x3e>
 800fe96:	fab0 f080 	clz	r0, r0
 800fe9a:	0940      	lsrs	r0, r0, #5
 800fe9c:	bd10      	pop	{r4, pc}
 800fe9e:	2004      	movs	r0, #4
 800fea0:	e7fc      	b.n	800fe9c <__fpclassifyd+0x34>
 800fea2:	2003      	movs	r0, #3
 800fea4:	e7fa      	b.n	800fe9c <__fpclassifyd+0x34>
 800fea6:	2000      	movs	r0, #0
 800fea8:	e7f8      	b.n	800fe9c <__fpclassifyd+0x34>
 800feaa:	2800      	cmp	r0, #0
 800feac:	d1ee      	bne.n	800fe8c <__fpclassifyd+0x24>
 800feae:	2002      	movs	r0, #2
 800feb0:	e7f4      	b.n	800fe9c <__fpclassifyd+0x34>
 800feb2:	bf00      	nop
 800feb4:	7fdfffff 	.word	0x7fdfffff
 800feb8:	7ff00000 	.word	0x7ff00000

0800febc <__ieee754_sqrt>:
 800febc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec0:	4a68      	ldr	r2, [pc, #416]	@ (8010064 <__ieee754_sqrt+0x1a8>)
 800fec2:	ec55 4b10 	vmov	r4, r5, d0
 800fec6:	43aa      	bics	r2, r5
 800fec8:	462b      	mov	r3, r5
 800feca:	4621      	mov	r1, r4
 800fecc:	d110      	bne.n	800fef0 <__ieee754_sqrt+0x34>
 800fece:	4622      	mov	r2, r4
 800fed0:	4620      	mov	r0, r4
 800fed2:	4629      	mov	r1, r5
 800fed4:	f7f0 fb90 	bl	80005f8 <__aeabi_dmul>
 800fed8:	4602      	mov	r2, r0
 800feda:	460b      	mov	r3, r1
 800fedc:	4620      	mov	r0, r4
 800fede:	4629      	mov	r1, r5
 800fee0:	f7f0 f9d4 	bl	800028c <__adddf3>
 800fee4:	4604      	mov	r4, r0
 800fee6:	460d      	mov	r5, r1
 800fee8:	ec45 4b10 	vmov	d0, r4, r5
 800feec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef0:	2d00      	cmp	r5, #0
 800fef2:	dc0e      	bgt.n	800ff12 <__ieee754_sqrt+0x56>
 800fef4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fef8:	4322      	orrs	r2, r4
 800fefa:	d0f5      	beq.n	800fee8 <__ieee754_sqrt+0x2c>
 800fefc:	b19d      	cbz	r5, 800ff26 <__ieee754_sqrt+0x6a>
 800fefe:	4622      	mov	r2, r4
 800ff00:	4620      	mov	r0, r4
 800ff02:	4629      	mov	r1, r5
 800ff04:	f7f0 f9c0 	bl	8000288 <__aeabi_dsub>
 800ff08:	4602      	mov	r2, r0
 800ff0a:	460b      	mov	r3, r1
 800ff0c:	f7f0 fc9e 	bl	800084c <__aeabi_ddiv>
 800ff10:	e7e8      	b.n	800fee4 <__ieee754_sqrt+0x28>
 800ff12:	152a      	asrs	r2, r5, #20
 800ff14:	d115      	bne.n	800ff42 <__ieee754_sqrt+0x86>
 800ff16:	2000      	movs	r0, #0
 800ff18:	e009      	b.n	800ff2e <__ieee754_sqrt+0x72>
 800ff1a:	0acb      	lsrs	r3, r1, #11
 800ff1c:	3a15      	subs	r2, #21
 800ff1e:	0549      	lsls	r1, r1, #21
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d0fa      	beq.n	800ff1a <__ieee754_sqrt+0x5e>
 800ff24:	e7f7      	b.n	800ff16 <__ieee754_sqrt+0x5a>
 800ff26:	462a      	mov	r2, r5
 800ff28:	e7fa      	b.n	800ff20 <__ieee754_sqrt+0x64>
 800ff2a:	005b      	lsls	r3, r3, #1
 800ff2c:	3001      	adds	r0, #1
 800ff2e:	02dc      	lsls	r4, r3, #11
 800ff30:	d5fb      	bpl.n	800ff2a <__ieee754_sqrt+0x6e>
 800ff32:	1e44      	subs	r4, r0, #1
 800ff34:	1b12      	subs	r2, r2, r4
 800ff36:	f1c0 0420 	rsb	r4, r0, #32
 800ff3a:	fa21 f404 	lsr.w	r4, r1, r4
 800ff3e:	4323      	orrs	r3, r4
 800ff40:	4081      	lsls	r1, r0
 800ff42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff46:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ff4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ff4e:	07d2      	lsls	r2, r2, #31
 800ff50:	bf5c      	itt	pl
 800ff52:	005b      	lslpl	r3, r3, #1
 800ff54:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ff58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff5c:	bf58      	it	pl
 800ff5e:	0049      	lslpl	r1, r1, #1
 800ff60:	2600      	movs	r6, #0
 800ff62:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ff66:	106d      	asrs	r5, r5, #1
 800ff68:	0049      	lsls	r1, r1, #1
 800ff6a:	2016      	movs	r0, #22
 800ff6c:	4632      	mov	r2, r6
 800ff6e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ff72:	1917      	adds	r7, r2, r4
 800ff74:	429f      	cmp	r7, r3
 800ff76:	bfde      	ittt	le
 800ff78:	193a      	addle	r2, r7, r4
 800ff7a:	1bdb      	suble	r3, r3, r7
 800ff7c:	1936      	addle	r6, r6, r4
 800ff7e:	0fcf      	lsrs	r7, r1, #31
 800ff80:	3801      	subs	r0, #1
 800ff82:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ff86:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ff8a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ff8e:	d1f0      	bne.n	800ff72 <__ieee754_sqrt+0xb6>
 800ff90:	4604      	mov	r4, r0
 800ff92:	2720      	movs	r7, #32
 800ff94:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	eb00 0e0c 	add.w	lr, r0, ip
 800ff9e:	db02      	blt.n	800ffa6 <__ieee754_sqrt+0xea>
 800ffa0:	d113      	bne.n	800ffca <__ieee754_sqrt+0x10e>
 800ffa2:	458e      	cmp	lr, r1
 800ffa4:	d811      	bhi.n	800ffca <__ieee754_sqrt+0x10e>
 800ffa6:	f1be 0f00 	cmp.w	lr, #0
 800ffaa:	eb0e 000c 	add.w	r0, lr, ip
 800ffae:	da42      	bge.n	8010036 <__ieee754_sqrt+0x17a>
 800ffb0:	2800      	cmp	r0, #0
 800ffb2:	db40      	blt.n	8010036 <__ieee754_sqrt+0x17a>
 800ffb4:	f102 0801 	add.w	r8, r2, #1
 800ffb8:	1a9b      	subs	r3, r3, r2
 800ffba:	458e      	cmp	lr, r1
 800ffbc:	bf88      	it	hi
 800ffbe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ffc2:	eba1 010e 	sub.w	r1, r1, lr
 800ffc6:	4464      	add	r4, ip
 800ffc8:	4642      	mov	r2, r8
 800ffca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ffce:	3f01      	subs	r7, #1
 800ffd0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ffd4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ffd8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ffdc:	d1dc      	bne.n	800ff98 <__ieee754_sqrt+0xdc>
 800ffde:	4319      	orrs	r1, r3
 800ffe0:	d01b      	beq.n	801001a <__ieee754_sqrt+0x15e>
 800ffe2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010068 <__ieee754_sqrt+0x1ac>
 800ffe6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801006c <__ieee754_sqrt+0x1b0>
 800ffea:	e9da 0100 	ldrd	r0, r1, [sl]
 800ffee:	e9db 2300 	ldrd	r2, r3, [fp]
 800fff2:	f7f0 f949 	bl	8000288 <__aeabi_dsub>
 800fff6:	e9da 8900 	ldrd	r8, r9, [sl]
 800fffa:	4602      	mov	r2, r0
 800fffc:	460b      	mov	r3, r1
 800fffe:	4640      	mov	r0, r8
 8010000:	4649      	mov	r1, r9
 8010002:	f7f0 fd75 	bl	8000af0 <__aeabi_dcmple>
 8010006:	b140      	cbz	r0, 801001a <__ieee754_sqrt+0x15e>
 8010008:	f1b4 3fff 	cmp.w	r4, #4294967295
 801000c:	e9da 0100 	ldrd	r0, r1, [sl]
 8010010:	e9db 2300 	ldrd	r2, r3, [fp]
 8010014:	d111      	bne.n	801003a <__ieee754_sqrt+0x17e>
 8010016:	3601      	adds	r6, #1
 8010018:	463c      	mov	r4, r7
 801001a:	1072      	asrs	r2, r6, #1
 801001c:	0863      	lsrs	r3, r4, #1
 801001e:	07f1      	lsls	r1, r6, #31
 8010020:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010024:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010028:	bf48      	it	mi
 801002a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801002e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010032:	4618      	mov	r0, r3
 8010034:	e756      	b.n	800fee4 <__ieee754_sqrt+0x28>
 8010036:	4690      	mov	r8, r2
 8010038:	e7be      	b.n	800ffb8 <__ieee754_sqrt+0xfc>
 801003a:	f7f0 f927 	bl	800028c <__adddf3>
 801003e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010042:	4602      	mov	r2, r0
 8010044:	460b      	mov	r3, r1
 8010046:	4640      	mov	r0, r8
 8010048:	4649      	mov	r1, r9
 801004a:	f7f0 fd47 	bl	8000adc <__aeabi_dcmplt>
 801004e:	b120      	cbz	r0, 801005a <__ieee754_sqrt+0x19e>
 8010050:	1ca0      	adds	r0, r4, #2
 8010052:	bf08      	it	eq
 8010054:	3601      	addeq	r6, #1
 8010056:	3402      	adds	r4, #2
 8010058:	e7df      	b.n	801001a <__ieee754_sqrt+0x15e>
 801005a:	1c63      	adds	r3, r4, #1
 801005c:	f023 0401 	bic.w	r4, r3, #1
 8010060:	e7db      	b.n	801001a <__ieee754_sqrt+0x15e>
 8010062:	bf00      	nop
 8010064:	7ff00000 	.word	0x7ff00000
 8010068:	200002a8 	.word	0x200002a8
 801006c:	200002a0 	.word	0x200002a0

08010070 <__kernel_cos>:
 8010070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010074:	ec57 6b10 	vmov	r6, r7, d0
 8010078:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801007c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8010080:	ed8d 1b00 	vstr	d1, [sp]
 8010084:	d206      	bcs.n	8010094 <__kernel_cos+0x24>
 8010086:	4630      	mov	r0, r6
 8010088:	4639      	mov	r1, r7
 801008a:	f7f0 fd65 	bl	8000b58 <__aeabi_d2iz>
 801008e:	2800      	cmp	r0, #0
 8010090:	f000 8088 	beq.w	80101a4 <__kernel_cos+0x134>
 8010094:	4632      	mov	r2, r6
 8010096:	463b      	mov	r3, r7
 8010098:	4630      	mov	r0, r6
 801009a:	4639      	mov	r1, r7
 801009c:	f7f0 faac 	bl	80005f8 <__aeabi_dmul>
 80100a0:	4b51      	ldr	r3, [pc, #324]	@ (80101e8 <__kernel_cos+0x178>)
 80100a2:	2200      	movs	r2, #0
 80100a4:	4604      	mov	r4, r0
 80100a6:	460d      	mov	r5, r1
 80100a8:	f7f0 faa6 	bl	80005f8 <__aeabi_dmul>
 80100ac:	a340      	add	r3, pc, #256	@ (adr r3, 80101b0 <__kernel_cos+0x140>)
 80100ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b2:	4682      	mov	sl, r0
 80100b4:	468b      	mov	fp, r1
 80100b6:	4620      	mov	r0, r4
 80100b8:	4629      	mov	r1, r5
 80100ba:	f7f0 fa9d 	bl	80005f8 <__aeabi_dmul>
 80100be:	a33e      	add	r3, pc, #248	@ (adr r3, 80101b8 <__kernel_cos+0x148>)
 80100c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c4:	f7f0 f8e2 	bl	800028c <__adddf3>
 80100c8:	4622      	mov	r2, r4
 80100ca:	462b      	mov	r3, r5
 80100cc:	f7f0 fa94 	bl	80005f8 <__aeabi_dmul>
 80100d0:	a33b      	add	r3, pc, #236	@ (adr r3, 80101c0 <__kernel_cos+0x150>)
 80100d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d6:	f7f0 f8d7 	bl	8000288 <__aeabi_dsub>
 80100da:	4622      	mov	r2, r4
 80100dc:	462b      	mov	r3, r5
 80100de:	f7f0 fa8b 	bl	80005f8 <__aeabi_dmul>
 80100e2:	a339      	add	r3, pc, #228	@ (adr r3, 80101c8 <__kernel_cos+0x158>)
 80100e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e8:	f7f0 f8d0 	bl	800028c <__adddf3>
 80100ec:	4622      	mov	r2, r4
 80100ee:	462b      	mov	r3, r5
 80100f0:	f7f0 fa82 	bl	80005f8 <__aeabi_dmul>
 80100f4:	a336      	add	r3, pc, #216	@ (adr r3, 80101d0 <__kernel_cos+0x160>)
 80100f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fa:	f7f0 f8c5 	bl	8000288 <__aeabi_dsub>
 80100fe:	4622      	mov	r2, r4
 8010100:	462b      	mov	r3, r5
 8010102:	f7f0 fa79 	bl	80005f8 <__aeabi_dmul>
 8010106:	a334      	add	r3, pc, #208	@ (adr r3, 80101d8 <__kernel_cos+0x168>)
 8010108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010c:	f7f0 f8be 	bl	800028c <__adddf3>
 8010110:	4622      	mov	r2, r4
 8010112:	462b      	mov	r3, r5
 8010114:	f7f0 fa70 	bl	80005f8 <__aeabi_dmul>
 8010118:	4622      	mov	r2, r4
 801011a:	462b      	mov	r3, r5
 801011c:	f7f0 fa6c 	bl	80005f8 <__aeabi_dmul>
 8010120:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010124:	4604      	mov	r4, r0
 8010126:	460d      	mov	r5, r1
 8010128:	4630      	mov	r0, r6
 801012a:	4639      	mov	r1, r7
 801012c:	f7f0 fa64 	bl	80005f8 <__aeabi_dmul>
 8010130:	460b      	mov	r3, r1
 8010132:	4602      	mov	r2, r0
 8010134:	4629      	mov	r1, r5
 8010136:	4620      	mov	r0, r4
 8010138:	f7f0 f8a6 	bl	8000288 <__aeabi_dsub>
 801013c:	4b2b      	ldr	r3, [pc, #172]	@ (80101ec <__kernel_cos+0x17c>)
 801013e:	4598      	cmp	r8, r3
 8010140:	4606      	mov	r6, r0
 8010142:	460f      	mov	r7, r1
 8010144:	d810      	bhi.n	8010168 <__kernel_cos+0xf8>
 8010146:	4602      	mov	r2, r0
 8010148:	460b      	mov	r3, r1
 801014a:	4650      	mov	r0, sl
 801014c:	4659      	mov	r1, fp
 801014e:	f7f0 f89b 	bl	8000288 <__aeabi_dsub>
 8010152:	460b      	mov	r3, r1
 8010154:	4926      	ldr	r1, [pc, #152]	@ (80101f0 <__kernel_cos+0x180>)
 8010156:	4602      	mov	r2, r0
 8010158:	2000      	movs	r0, #0
 801015a:	f7f0 f895 	bl	8000288 <__aeabi_dsub>
 801015e:	ec41 0b10 	vmov	d0, r0, r1
 8010162:	b003      	add	sp, #12
 8010164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010168:	4b22      	ldr	r3, [pc, #136]	@ (80101f4 <__kernel_cos+0x184>)
 801016a:	4921      	ldr	r1, [pc, #132]	@ (80101f0 <__kernel_cos+0x180>)
 801016c:	4598      	cmp	r8, r3
 801016e:	bf8c      	ite	hi
 8010170:	4d21      	ldrhi	r5, [pc, #132]	@ (80101f8 <__kernel_cos+0x188>)
 8010172:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8010176:	2400      	movs	r4, #0
 8010178:	4622      	mov	r2, r4
 801017a:	462b      	mov	r3, r5
 801017c:	2000      	movs	r0, #0
 801017e:	f7f0 f883 	bl	8000288 <__aeabi_dsub>
 8010182:	4622      	mov	r2, r4
 8010184:	4680      	mov	r8, r0
 8010186:	4689      	mov	r9, r1
 8010188:	462b      	mov	r3, r5
 801018a:	4650      	mov	r0, sl
 801018c:	4659      	mov	r1, fp
 801018e:	f7f0 f87b 	bl	8000288 <__aeabi_dsub>
 8010192:	4632      	mov	r2, r6
 8010194:	463b      	mov	r3, r7
 8010196:	f7f0 f877 	bl	8000288 <__aeabi_dsub>
 801019a:	4602      	mov	r2, r0
 801019c:	460b      	mov	r3, r1
 801019e:	4640      	mov	r0, r8
 80101a0:	4649      	mov	r1, r9
 80101a2:	e7da      	b.n	801015a <__kernel_cos+0xea>
 80101a4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80101e0 <__kernel_cos+0x170>
 80101a8:	e7db      	b.n	8010162 <__kernel_cos+0xf2>
 80101aa:	bf00      	nop
 80101ac:	f3af 8000 	nop.w
 80101b0:	be8838d4 	.word	0xbe8838d4
 80101b4:	bda8fae9 	.word	0xbda8fae9
 80101b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80101bc:	3e21ee9e 	.word	0x3e21ee9e
 80101c0:	809c52ad 	.word	0x809c52ad
 80101c4:	3e927e4f 	.word	0x3e927e4f
 80101c8:	19cb1590 	.word	0x19cb1590
 80101cc:	3efa01a0 	.word	0x3efa01a0
 80101d0:	16c15177 	.word	0x16c15177
 80101d4:	3f56c16c 	.word	0x3f56c16c
 80101d8:	5555554c 	.word	0x5555554c
 80101dc:	3fa55555 	.word	0x3fa55555
 80101e0:	00000000 	.word	0x00000000
 80101e4:	3ff00000 	.word	0x3ff00000
 80101e8:	3fe00000 	.word	0x3fe00000
 80101ec:	3fd33332 	.word	0x3fd33332
 80101f0:	3ff00000 	.word	0x3ff00000
 80101f4:	3fe90000 	.word	0x3fe90000
 80101f8:	3fd20000 	.word	0x3fd20000
 80101fc:	00000000 	.word	0x00000000

08010200 <__kernel_sin>:
 8010200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010204:	ec55 4b10 	vmov	r4, r5, d0
 8010208:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801020c:	b085      	sub	sp, #20
 801020e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8010212:	ed8d 1b02 	vstr	d1, [sp, #8]
 8010216:	4680      	mov	r8, r0
 8010218:	d205      	bcs.n	8010226 <__kernel_sin+0x26>
 801021a:	4620      	mov	r0, r4
 801021c:	4629      	mov	r1, r5
 801021e:	f7f0 fc9b 	bl	8000b58 <__aeabi_d2iz>
 8010222:	2800      	cmp	r0, #0
 8010224:	d052      	beq.n	80102cc <__kernel_sin+0xcc>
 8010226:	4622      	mov	r2, r4
 8010228:	462b      	mov	r3, r5
 801022a:	4620      	mov	r0, r4
 801022c:	4629      	mov	r1, r5
 801022e:	f7f0 f9e3 	bl	80005f8 <__aeabi_dmul>
 8010232:	4682      	mov	sl, r0
 8010234:	468b      	mov	fp, r1
 8010236:	4602      	mov	r2, r0
 8010238:	460b      	mov	r3, r1
 801023a:	4620      	mov	r0, r4
 801023c:	4629      	mov	r1, r5
 801023e:	f7f0 f9db 	bl	80005f8 <__aeabi_dmul>
 8010242:	a342      	add	r3, pc, #264	@ (adr r3, 801034c <__kernel_sin+0x14c>)
 8010244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010248:	e9cd 0100 	strd	r0, r1, [sp]
 801024c:	4650      	mov	r0, sl
 801024e:	4659      	mov	r1, fp
 8010250:	f7f0 f9d2 	bl	80005f8 <__aeabi_dmul>
 8010254:	a33f      	add	r3, pc, #252	@ (adr r3, 8010354 <__kernel_sin+0x154>)
 8010256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025a:	f7f0 f815 	bl	8000288 <__aeabi_dsub>
 801025e:	4652      	mov	r2, sl
 8010260:	465b      	mov	r3, fp
 8010262:	f7f0 f9c9 	bl	80005f8 <__aeabi_dmul>
 8010266:	a33d      	add	r3, pc, #244	@ (adr r3, 801035c <__kernel_sin+0x15c>)
 8010268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801026c:	f7f0 f80e 	bl	800028c <__adddf3>
 8010270:	4652      	mov	r2, sl
 8010272:	465b      	mov	r3, fp
 8010274:	f7f0 f9c0 	bl	80005f8 <__aeabi_dmul>
 8010278:	a33a      	add	r3, pc, #232	@ (adr r3, 8010364 <__kernel_sin+0x164>)
 801027a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027e:	f7f0 f803 	bl	8000288 <__aeabi_dsub>
 8010282:	4652      	mov	r2, sl
 8010284:	465b      	mov	r3, fp
 8010286:	f7f0 f9b7 	bl	80005f8 <__aeabi_dmul>
 801028a:	a338      	add	r3, pc, #224	@ (adr r3, 801036c <__kernel_sin+0x16c>)
 801028c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010290:	f7ef fffc 	bl	800028c <__adddf3>
 8010294:	4606      	mov	r6, r0
 8010296:	460f      	mov	r7, r1
 8010298:	f1b8 0f00 	cmp.w	r8, #0
 801029c:	d11b      	bne.n	80102d6 <__kernel_sin+0xd6>
 801029e:	4602      	mov	r2, r0
 80102a0:	460b      	mov	r3, r1
 80102a2:	4650      	mov	r0, sl
 80102a4:	4659      	mov	r1, fp
 80102a6:	f7f0 f9a7 	bl	80005f8 <__aeabi_dmul>
 80102aa:	a325      	add	r3, pc, #148	@ (adr r3, 8010340 <__kernel_sin+0x140>)
 80102ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b0:	f7ef ffea 	bl	8000288 <__aeabi_dsub>
 80102b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102b8:	f7f0 f99e 	bl	80005f8 <__aeabi_dmul>
 80102bc:	4602      	mov	r2, r0
 80102be:	460b      	mov	r3, r1
 80102c0:	4620      	mov	r0, r4
 80102c2:	4629      	mov	r1, r5
 80102c4:	f7ef ffe2 	bl	800028c <__adddf3>
 80102c8:	4604      	mov	r4, r0
 80102ca:	460d      	mov	r5, r1
 80102cc:	ec45 4b10 	vmov	d0, r4, r5
 80102d0:	b005      	add	sp, #20
 80102d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102da:	4b1b      	ldr	r3, [pc, #108]	@ (8010348 <__kernel_sin+0x148>)
 80102dc:	2200      	movs	r2, #0
 80102de:	f7f0 f98b 	bl	80005f8 <__aeabi_dmul>
 80102e2:	4632      	mov	r2, r6
 80102e4:	4680      	mov	r8, r0
 80102e6:	4689      	mov	r9, r1
 80102e8:	463b      	mov	r3, r7
 80102ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80102ee:	f7f0 f983 	bl	80005f8 <__aeabi_dmul>
 80102f2:	4602      	mov	r2, r0
 80102f4:	460b      	mov	r3, r1
 80102f6:	4640      	mov	r0, r8
 80102f8:	4649      	mov	r1, r9
 80102fa:	f7ef ffc5 	bl	8000288 <__aeabi_dsub>
 80102fe:	4652      	mov	r2, sl
 8010300:	465b      	mov	r3, fp
 8010302:	f7f0 f979 	bl	80005f8 <__aeabi_dmul>
 8010306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801030a:	f7ef ffbd 	bl	8000288 <__aeabi_dsub>
 801030e:	a30c      	add	r3, pc, #48	@ (adr r3, 8010340 <__kernel_sin+0x140>)
 8010310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010314:	4606      	mov	r6, r0
 8010316:	460f      	mov	r7, r1
 8010318:	e9dd 0100 	ldrd	r0, r1, [sp]
 801031c:	f7f0 f96c 	bl	80005f8 <__aeabi_dmul>
 8010320:	4602      	mov	r2, r0
 8010322:	460b      	mov	r3, r1
 8010324:	4630      	mov	r0, r6
 8010326:	4639      	mov	r1, r7
 8010328:	f7ef ffb0 	bl	800028c <__adddf3>
 801032c:	4602      	mov	r2, r0
 801032e:	460b      	mov	r3, r1
 8010330:	4620      	mov	r0, r4
 8010332:	4629      	mov	r1, r5
 8010334:	f7ef ffa8 	bl	8000288 <__aeabi_dsub>
 8010338:	e7c6      	b.n	80102c8 <__kernel_sin+0xc8>
 801033a:	bf00      	nop
 801033c:	f3af 8000 	nop.w
 8010340:	55555549 	.word	0x55555549
 8010344:	3fc55555 	.word	0x3fc55555
 8010348:	3fe00000 	.word	0x3fe00000
 801034c:	5acfd57c 	.word	0x5acfd57c
 8010350:	3de5d93a 	.word	0x3de5d93a
 8010354:	8a2b9ceb 	.word	0x8a2b9ceb
 8010358:	3e5ae5e6 	.word	0x3e5ae5e6
 801035c:	57b1fe7d 	.word	0x57b1fe7d
 8010360:	3ec71de3 	.word	0x3ec71de3
 8010364:	19c161d5 	.word	0x19c161d5
 8010368:	3f2a01a0 	.word	0x3f2a01a0
 801036c:	1110f8a6 	.word	0x1110f8a6
 8010370:	3f811111 	.word	0x3f811111
 8010374:	00000000 	.word	0x00000000

08010378 <__ieee754_atan2>:
 8010378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801037c:	ec57 6b11 	vmov	r6, r7, d1
 8010380:	4273      	negs	r3, r6
 8010382:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8010500 <__ieee754_atan2+0x188>
 8010386:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801038a:	4333      	orrs	r3, r6
 801038c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010390:	4543      	cmp	r3, r8
 8010392:	ec51 0b10 	vmov	r0, r1, d0
 8010396:	4635      	mov	r5, r6
 8010398:	d809      	bhi.n	80103ae <__ieee754_atan2+0x36>
 801039a:	4244      	negs	r4, r0
 801039c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80103a0:	4304      	orrs	r4, r0
 80103a2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80103a6:	4544      	cmp	r4, r8
 80103a8:	468e      	mov	lr, r1
 80103aa:	4681      	mov	r9, r0
 80103ac:	d907      	bls.n	80103be <__ieee754_atan2+0x46>
 80103ae:	4632      	mov	r2, r6
 80103b0:	463b      	mov	r3, r7
 80103b2:	f7ef ff6b 	bl	800028c <__adddf3>
 80103b6:	ec41 0b10 	vmov	d0, r0, r1
 80103ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103be:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80103c2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80103c6:	4334      	orrs	r4, r6
 80103c8:	d103      	bne.n	80103d2 <__ieee754_atan2+0x5a>
 80103ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103ce:	f000 bbab 	b.w	8010b28 <atan>
 80103d2:	17bc      	asrs	r4, r7, #30
 80103d4:	f004 0402 	and.w	r4, r4, #2
 80103d8:	ea53 0909 	orrs.w	r9, r3, r9
 80103dc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80103e0:	d107      	bne.n	80103f2 <__ieee754_atan2+0x7a>
 80103e2:	2c02      	cmp	r4, #2
 80103e4:	d05f      	beq.n	80104a6 <__ieee754_atan2+0x12e>
 80103e6:	2c03      	cmp	r4, #3
 80103e8:	d1e5      	bne.n	80103b6 <__ieee754_atan2+0x3e>
 80103ea:	a141      	add	r1, pc, #260	@ (adr r1, 80104f0 <__ieee754_atan2+0x178>)
 80103ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103f0:	e7e1      	b.n	80103b6 <__ieee754_atan2+0x3e>
 80103f2:	4315      	orrs	r5, r2
 80103f4:	d106      	bne.n	8010404 <__ieee754_atan2+0x8c>
 80103f6:	f1be 0f00 	cmp.w	lr, #0
 80103fa:	da5f      	bge.n	80104bc <__ieee754_atan2+0x144>
 80103fc:	a13e      	add	r1, pc, #248	@ (adr r1, 80104f8 <__ieee754_atan2+0x180>)
 80103fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010402:	e7d8      	b.n	80103b6 <__ieee754_atan2+0x3e>
 8010404:	4542      	cmp	r2, r8
 8010406:	d10f      	bne.n	8010428 <__ieee754_atan2+0xb0>
 8010408:	4293      	cmp	r3, r2
 801040a:	f104 34ff 	add.w	r4, r4, #4294967295
 801040e:	d107      	bne.n	8010420 <__ieee754_atan2+0xa8>
 8010410:	2c02      	cmp	r4, #2
 8010412:	d84c      	bhi.n	80104ae <__ieee754_atan2+0x136>
 8010414:	4b34      	ldr	r3, [pc, #208]	@ (80104e8 <__ieee754_atan2+0x170>)
 8010416:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801041a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801041e:	e7ca      	b.n	80103b6 <__ieee754_atan2+0x3e>
 8010420:	2c02      	cmp	r4, #2
 8010422:	d848      	bhi.n	80104b6 <__ieee754_atan2+0x13e>
 8010424:	4b31      	ldr	r3, [pc, #196]	@ (80104ec <__ieee754_atan2+0x174>)
 8010426:	e7f6      	b.n	8010416 <__ieee754_atan2+0x9e>
 8010428:	4543      	cmp	r3, r8
 801042a:	d0e4      	beq.n	80103f6 <__ieee754_atan2+0x7e>
 801042c:	1a9b      	subs	r3, r3, r2
 801042e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8010432:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010436:	da1e      	bge.n	8010476 <__ieee754_atan2+0xfe>
 8010438:	2f00      	cmp	r7, #0
 801043a:	da01      	bge.n	8010440 <__ieee754_atan2+0xc8>
 801043c:	323c      	adds	r2, #60	@ 0x3c
 801043e:	db1e      	blt.n	801047e <__ieee754_atan2+0x106>
 8010440:	4632      	mov	r2, r6
 8010442:	463b      	mov	r3, r7
 8010444:	f7f0 fa02 	bl	800084c <__aeabi_ddiv>
 8010448:	ec41 0b10 	vmov	d0, r0, r1
 801044c:	f000 fd04 	bl	8010e58 <fabs>
 8010450:	f000 fb6a 	bl	8010b28 <atan>
 8010454:	ec51 0b10 	vmov	r0, r1, d0
 8010458:	2c01      	cmp	r4, #1
 801045a:	d013      	beq.n	8010484 <__ieee754_atan2+0x10c>
 801045c:	2c02      	cmp	r4, #2
 801045e:	d015      	beq.n	801048c <__ieee754_atan2+0x114>
 8010460:	2c00      	cmp	r4, #0
 8010462:	d0a8      	beq.n	80103b6 <__ieee754_atan2+0x3e>
 8010464:	a318      	add	r3, pc, #96	@ (adr r3, 80104c8 <__ieee754_atan2+0x150>)
 8010466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046a:	f7ef ff0d 	bl	8000288 <__aeabi_dsub>
 801046e:	a318      	add	r3, pc, #96	@ (adr r3, 80104d0 <__ieee754_atan2+0x158>)
 8010470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010474:	e014      	b.n	80104a0 <__ieee754_atan2+0x128>
 8010476:	a118      	add	r1, pc, #96	@ (adr r1, 80104d8 <__ieee754_atan2+0x160>)
 8010478:	e9d1 0100 	ldrd	r0, r1, [r1]
 801047c:	e7ec      	b.n	8010458 <__ieee754_atan2+0xe0>
 801047e:	2000      	movs	r0, #0
 8010480:	2100      	movs	r1, #0
 8010482:	e7e9      	b.n	8010458 <__ieee754_atan2+0xe0>
 8010484:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010488:	4619      	mov	r1, r3
 801048a:	e794      	b.n	80103b6 <__ieee754_atan2+0x3e>
 801048c:	a30e      	add	r3, pc, #56	@ (adr r3, 80104c8 <__ieee754_atan2+0x150>)
 801048e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010492:	f7ef fef9 	bl	8000288 <__aeabi_dsub>
 8010496:	4602      	mov	r2, r0
 8010498:	460b      	mov	r3, r1
 801049a:	a10d      	add	r1, pc, #52	@ (adr r1, 80104d0 <__ieee754_atan2+0x158>)
 801049c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104a0:	f7ef fef2 	bl	8000288 <__aeabi_dsub>
 80104a4:	e787      	b.n	80103b6 <__ieee754_atan2+0x3e>
 80104a6:	a10a      	add	r1, pc, #40	@ (adr r1, 80104d0 <__ieee754_atan2+0x158>)
 80104a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104ac:	e783      	b.n	80103b6 <__ieee754_atan2+0x3e>
 80104ae:	a10c      	add	r1, pc, #48	@ (adr r1, 80104e0 <__ieee754_atan2+0x168>)
 80104b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104b4:	e77f      	b.n	80103b6 <__ieee754_atan2+0x3e>
 80104b6:	2000      	movs	r0, #0
 80104b8:	2100      	movs	r1, #0
 80104ba:	e77c      	b.n	80103b6 <__ieee754_atan2+0x3e>
 80104bc:	a106      	add	r1, pc, #24	@ (adr r1, 80104d8 <__ieee754_atan2+0x160>)
 80104be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104c2:	e778      	b.n	80103b6 <__ieee754_atan2+0x3e>
 80104c4:	f3af 8000 	nop.w
 80104c8:	33145c07 	.word	0x33145c07
 80104cc:	3ca1a626 	.word	0x3ca1a626
 80104d0:	54442d18 	.word	0x54442d18
 80104d4:	400921fb 	.word	0x400921fb
 80104d8:	54442d18 	.word	0x54442d18
 80104dc:	3ff921fb 	.word	0x3ff921fb
 80104e0:	54442d18 	.word	0x54442d18
 80104e4:	3fe921fb 	.word	0x3fe921fb
 80104e8:	08012420 	.word	0x08012420
 80104ec:	08012408 	.word	0x08012408
 80104f0:	54442d18 	.word	0x54442d18
 80104f4:	c00921fb 	.word	0xc00921fb
 80104f8:	54442d18 	.word	0x54442d18
 80104fc:	bff921fb 	.word	0xbff921fb
 8010500:	7ff00000 	.word	0x7ff00000

08010504 <__ieee754_hypot>:
 8010504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010508:	ec51 0b10 	vmov	r0, r1, d0
 801050c:	ec53 2b11 	vmov	r2, r3, d1
 8010510:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 8010514:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8010518:	42a5      	cmp	r5, r4
 801051a:	b087      	sub	sp, #28
 801051c:	da05      	bge.n	801052a <__ieee754_hypot+0x26>
 801051e:	462e      	mov	r6, r5
 8010520:	4625      	mov	r5, r4
 8010522:	4634      	mov	r4, r6
 8010524:	4606      	mov	r6, r0
 8010526:	4610      	mov	r0, r2
 8010528:	4632      	mov	r2, r6
 801052a:	1b2b      	subs	r3, r5, r4
 801052c:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8010530:	4629      	mov	r1, r5
 8010532:	4682      	mov	sl, r0
 8010534:	46ab      	mov	fp, r5
 8010536:	4616      	mov	r6, r2
 8010538:	4627      	mov	r7, r4
 801053a:	dd05      	ble.n	8010548 <__ieee754_hypot+0x44>
 801053c:	4623      	mov	r3, r4
 801053e:	f7ef fea5 	bl	800028c <__adddf3>
 8010542:	4682      	mov	sl, r0
 8010544:	468b      	mov	fp, r1
 8010546:	e016      	b.n	8010576 <__ieee754_hypot+0x72>
 8010548:	4b75      	ldr	r3, [pc, #468]	@ (8010720 <__ieee754_hypot+0x21c>)
 801054a:	429d      	cmp	r5, r3
 801054c:	f340 8096 	ble.w	801067c <__ieee754_hypot+0x178>
 8010550:	4b74      	ldr	r3, [pc, #464]	@ (8010724 <__ieee754_hypot+0x220>)
 8010552:	429d      	cmp	r5, r3
 8010554:	dd14      	ble.n	8010580 <__ieee754_hypot+0x7c>
 8010556:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801055a:	4305      	orrs	r5, r0
 801055c:	d004      	beq.n	8010568 <__ieee754_hypot+0x64>
 801055e:	4623      	mov	r3, r4
 8010560:	f7ef fe94 	bl	800028c <__adddf3>
 8010564:	4682      	mov	sl, r0
 8010566:	468b      	mov	fp, r1
 8010568:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 801056c:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 8010570:	4334      	orrs	r4, r6
 8010572:	f000 80d2 	beq.w	801071a <__ieee754_hypot+0x216>
 8010576:	ec4b ab10 	vmov	d0, sl, fp
 801057a:	b007      	add	sp, #28
 801057c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010580:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 8010584:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 8010588:	46ab      	mov	fp, r5
 801058a:	4627      	mov	r7, r4
 801058c:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8010590:	9301      	str	r3, [sp, #4]
 8010592:	4b65      	ldr	r3, [pc, #404]	@ (8010728 <__ieee754_hypot+0x224>)
 8010594:	429c      	cmp	r4, r3
 8010596:	dc19      	bgt.n	80105cc <__ieee754_hypot+0xc8>
 8010598:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 801059c:	da70      	bge.n	8010680 <__ieee754_hypot+0x17c>
 801059e:	4633      	mov	r3, r6
 80105a0:	4323      	orrs	r3, r4
 80105a2:	d0e8      	beq.n	8010576 <__ieee754_hypot+0x72>
 80105a4:	4b61      	ldr	r3, [pc, #388]	@ (801072c <__ieee754_hypot+0x228>)
 80105a6:	2200      	movs	r2, #0
 80105a8:	4630      	mov	r0, r6
 80105aa:	4639      	mov	r1, r7
 80105ac:	f7f0 f824 	bl	80005f8 <__aeabi_dmul>
 80105b0:	4b5e      	ldr	r3, [pc, #376]	@ (801072c <__ieee754_hypot+0x228>)
 80105b2:	4606      	mov	r6, r0
 80105b4:	460f      	mov	r7, r1
 80105b6:	4650      	mov	r0, sl
 80105b8:	4659      	mov	r1, fp
 80105ba:	2200      	movs	r2, #0
 80105bc:	f7f0 f81c 	bl	80005f8 <__aeabi_dmul>
 80105c0:	9b01      	ldr	r3, [sp, #4]
 80105c2:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80105c6:	4682      	mov	sl, r0
 80105c8:	468b      	mov	fp, r1
 80105ca:	9301      	str	r3, [sp, #4]
 80105cc:	4632      	mov	r2, r6
 80105ce:	463b      	mov	r3, r7
 80105d0:	4650      	mov	r0, sl
 80105d2:	4659      	mov	r1, fp
 80105d4:	f7ef fe58 	bl	8000288 <__aeabi_dsub>
 80105d8:	4602      	mov	r2, r0
 80105da:	460b      	mov	r3, r1
 80105dc:	4680      	mov	r8, r0
 80105de:	4689      	mov	r9, r1
 80105e0:	4630      	mov	r0, r6
 80105e2:	4639      	mov	r1, r7
 80105e4:	f7f0 fa7a 	bl	8000adc <__aeabi_dcmplt>
 80105e8:	2200      	movs	r2, #0
 80105ea:	2800      	cmp	r0, #0
 80105ec:	d053      	beq.n	8010696 <__ieee754_hypot+0x192>
 80105ee:	462b      	mov	r3, r5
 80105f0:	4610      	mov	r0, r2
 80105f2:	4629      	mov	r1, r5
 80105f4:	4614      	mov	r4, r2
 80105f6:	f7ef ffff 	bl	80005f8 <__aeabi_dmul>
 80105fa:	4632      	mov	r2, r6
 80105fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010600:	463b      	mov	r3, r7
 8010602:	4630      	mov	r0, r6
 8010604:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8010608:	f7ef fff6 	bl	80005f8 <__aeabi_dmul>
 801060c:	4622      	mov	r2, r4
 801060e:	4606      	mov	r6, r0
 8010610:	460f      	mov	r7, r1
 8010612:	462b      	mov	r3, r5
 8010614:	4650      	mov	r0, sl
 8010616:	4659      	mov	r1, fp
 8010618:	f7ef fe38 	bl	800028c <__adddf3>
 801061c:	4622      	mov	r2, r4
 801061e:	4680      	mov	r8, r0
 8010620:	4689      	mov	r9, r1
 8010622:	462b      	mov	r3, r5
 8010624:	4650      	mov	r0, sl
 8010626:	4659      	mov	r1, fp
 8010628:	f7ef fe2e 	bl	8000288 <__aeabi_dsub>
 801062c:	4602      	mov	r2, r0
 801062e:	460b      	mov	r3, r1
 8010630:	4640      	mov	r0, r8
 8010632:	4649      	mov	r1, r9
 8010634:	f7ef ffe0 	bl	80005f8 <__aeabi_dmul>
 8010638:	4602      	mov	r2, r0
 801063a:	460b      	mov	r3, r1
 801063c:	4630      	mov	r0, r6
 801063e:	4639      	mov	r1, r7
 8010640:	f7ef fe22 	bl	8000288 <__aeabi_dsub>
 8010644:	4602      	mov	r2, r0
 8010646:	460b      	mov	r3, r1
 8010648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801064c:	f7ef fe1c 	bl	8000288 <__aeabi_dsub>
 8010650:	ec41 0b10 	vmov	d0, r0, r1
 8010654:	f7ff fc32 	bl	800febc <__ieee754_sqrt>
 8010658:	9b01      	ldr	r3, [sp, #4]
 801065a:	ec5b ab10 	vmov	sl, fp, d0
 801065e:	2b00      	cmp	r3, #0
 8010660:	d089      	beq.n	8010576 <__ieee754_hypot+0x72>
 8010662:	051b      	lsls	r3, r3, #20
 8010664:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8010668:	2000      	movs	r0, #0
 801066a:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801066e:	4602      	mov	r2, r0
 8010670:	460b      	mov	r3, r1
 8010672:	4650      	mov	r0, sl
 8010674:	4659      	mov	r1, fp
 8010676:	f7ef ffbf 	bl	80005f8 <__aeabi_dmul>
 801067a:	e762      	b.n	8010542 <__ieee754_hypot+0x3e>
 801067c:	2300      	movs	r3, #0
 801067e:	e787      	b.n	8010590 <__ieee754_hypot+0x8c>
 8010680:	9b01      	ldr	r3, [sp, #4]
 8010682:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 8010686:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 801068a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 801068e:	9301      	str	r3, [sp, #4]
 8010690:	46ab      	mov	fp, r5
 8010692:	4627      	mov	r7, r4
 8010694:	e79a      	b.n	80105cc <__ieee754_hypot+0xc8>
 8010696:	4623      	mov	r3, r4
 8010698:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801069c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106a0:	2200      	movs	r2, #0
 80106a2:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 80106a6:	4614      	mov	r4, r2
 80106a8:	461d      	mov	r5, r3
 80106aa:	f7ef ffa5 	bl	80005f8 <__aeabi_dmul>
 80106ae:	4642      	mov	r2, r8
 80106b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80106b4:	464b      	mov	r3, r9
 80106b6:	4640      	mov	r0, r8
 80106b8:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 80106bc:	f7ef ff9c 	bl	80005f8 <__aeabi_dmul>
 80106c0:	4652      	mov	r2, sl
 80106c2:	465b      	mov	r3, fp
 80106c4:	4680      	mov	r8, r0
 80106c6:	4689      	mov	r9, r1
 80106c8:	4650      	mov	r0, sl
 80106ca:	4659      	mov	r1, fp
 80106cc:	f7ef fdde 	bl	800028c <__adddf3>
 80106d0:	4622      	mov	r2, r4
 80106d2:	462b      	mov	r3, r5
 80106d4:	f7ef fdd8 	bl	8000288 <__aeabi_dsub>
 80106d8:	4632      	mov	r2, r6
 80106da:	463b      	mov	r3, r7
 80106dc:	f7ef ff8c 	bl	80005f8 <__aeabi_dmul>
 80106e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80106e4:	4682      	mov	sl, r0
 80106e6:	468b      	mov	fp, r1
 80106e8:	4630      	mov	r0, r6
 80106ea:	4639      	mov	r1, r7
 80106ec:	f7ef fdcc 	bl	8000288 <__aeabi_dsub>
 80106f0:	4622      	mov	r2, r4
 80106f2:	462b      	mov	r3, r5
 80106f4:	f7ef ff80 	bl	80005f8 <__aeabi_dmul>
 80106f8:	4602      	mov	r2, r0
 80106fa:	460b      	mov	r3, r1
 80106fc:	4650      	mov	r0, sl
 80106fe:	4659      	mov	r1, fp
 8010700:	f7ef fdc4 	bl	800028c <__adddf3>
 8010704:	4602      	mov	r2, r0
 8010706:	460b      	mov	r3, r1
 8010708:	4640      	mov	r0, r8
 801070a:	4649      	mov	r1, r9
 801070c:	f7ef fdbc 	bl	8000288 <__aeabi_dsub>
 8010710:	4602      	mov	r2, r0
 8010712:	460b      	mov	r3, r1
 8010714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010718:	e798      	b.n	801064c <__ieee754_hypot+0x148>
 801071a:	46b2      	mov	sl, r6
 801071c:	46bb      	mov	fp, r7
 801071e:	e72a      	b.n	8010576 <__ieee754_hypot+0x72>
 8010720:	5f300000 	.word	0x5f300000
 8010724:	7fefffff 	.word	0x7fefffff
 8010728:	20afffff 	.word	0x20afffff
 801072c:	7fd00000 	.word	0x7fd00000

08010730 <__ieee754_rem_pio2>:
 8010730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010734:	ec57 6b10 	vmov	r6, r7, d0
 8010738:	4bc5      	ldr	r3, [pc, #788]	@ (8010a50 <__ieee754_rem_pio2+0x320>)
 801073a:	b08d      	sub	sp, #52	@ 0x34
 801073c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010740:	4598      	cmp	r8, r3
 8010742:	4604      	mov	r4, r0
 8010744:	9704      	str	r7, [sp, #16]
 8010746:	d807      	bhi.n	8010758 <__ieee754_rem_pio2+0x28>
 8010748:	2200      	movs	r2, #0
 801074a:	2300      	movs	r3, #0
 801074c:	ed80 0b00 	vstr	d0, [r0]
 8010750:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010754:	2500      	movs	r5, #0
 8010756:	e028      	b.n	80107aa <__ieee754_rem_pio2+0x7a>
 8010758:	4bbe      	ldr	r3, [pc, #760]	@ (8010a54 <__ieee754_rem_pio2+0x324>)
 801075a:	4598      	cmp	r8, r3
 801075c:	d878      	bhi.n	8010850 <__ieee754_rem_pio2+0x120>
 801075e:	9b04      	ldr	r3, [sp, #16]
 8010760:	4dbd      	ldr	r5, [pc, #756]	@ (8010a58 <__ieee754_rem_pio2+0x328>)
 8010762:	2b00      	cmp	r3, #0
 8010764:	4630      	mov	r0, r6
 8010766:	a3ac      	add	r3, pc, #688	@ (adr r3, 8010a18 <__ieee754_rem_pio2+0x2e8>)
 8010768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801076c:	4639      	mov	r1, r7
 801076e:	dd38      	ble.n	80107e2 <__ieee754_rem_pio2+0xb2>
 8010770:	f7ef fd8a 	bl	8000288 <__aeabi_dsub>
 8010774:	45a8      	cmp	r8, r5
 8010776:	4606      	mov	r6, r0
 8010778:	460f      	mov	r7, r1
 801077a:	d01a      	beq.n	80107b2 <__ieee754_rem_pio2+0x82>
 801077c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8010a20 <__ieee754_rem_pio2+0x2f0>)
 801077e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010782:	f7ef fd81 	bl	8000288 <__aeabi_dsub>
 8010786:	4602      	mov	r2, r0
 8010788:	460b      	mov	r3, r1
 801078a:	4680      	mov	r8, r0
 801078c:	4689      	mov	r9, r1
 801078e:	4630      	mov	r0, r6
 8010790:	4639      	mov	r1, r7
 8010792:	f7ef fd79 	bl	8000288 <__aeabi_dsub>
 8010796:	a3a2      	add	r3, pc, #648	@ (adr r3, 8010a20 <__ieee754_rem_pio2+0x2f0>)
 8010798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801079c:	f7ef fd74 	bl	8000288 <__aeabi_dsub>
 80107a0:	e9c4 8900 	strd	r8, r9, [r4]
 80107a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80107a8:	2501      	movs	r5, #1
 80107aa:	4628      	mov	r0, r5
 80107ac:	b00d      	add	sp, #52	@ 0x34
 80107ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b2:	a39d      	add	r3, pc, #628	@ (adr r3, 8010a28 <__ieee754_rem_pio2+0x2f8>)
 80107b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b8:	f7ef fd66 	bl	8000288 <__aeabi_dsub>
 80107bc:	a39c      	add	r3, pc, #624	@ (adr r3, 8010a30 <__ieee754_rem_pio2+0x300>)
 80107be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c2:	4606      	mov	r6, r0
 80107c4:	460f      	mov	r7, r1
 80107c6:	f7ef fd5f 	bl	8000288 <__aeabi_dsub>
 80107ca:	4602      	mov	r2, r0
 80107cc:	460b      	mov	r3, r1
 80107ce:	4680      	mov	r8, r0
 80107d0:	4689      	mov	r9, r1
 80107d2:	4630      	mov	r0, r6
 80107d4:	4639      	mov	r1, r7
 80107d6:	f7ef fd57 	bl	8000288 <__aeabi_dsub>
 80107da:	a395      	add	r3, pc, #596	@ (adr r3, 8010a30 <__ieee754_rem_pio2+0x300>)
 80107dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e0:	e7dc      	b.n	801079c <__ieee754_rem_pio2+0x6c>
 80107e2:	f7ef fd53 	bl	800028c <__adddf3>
 80107e6:	45a8      	cmp	r8, r5
 80107e8:	4606      	mov	r6, r0
 80107ea:	460f      	mov	r7, r1
 80107ec:	d018      	beq.n	8010820 <__ieee754_rem_pio2+0xf0>
 80107ee:	a38c      	add	r3, pc, #560	@ (adr r3, 8010a20 <__ieee754_rem_pio2+0x2f0>)
 80107f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f4:	f7ef fd4a 	bl	800028c <__adddf3>
 80107f8:	4602      	mov	r2, r0
 80107fa:	460b      	mov	r3, r1
 80107fc:	4680      	mov	r8, r0
 80107fe:	4689      	mov	r9, r1
 8010800:	4630      	mov	r0, r6
 8010802:	4639      	mov	r1, r7
 8010804:	f7ef fd40 	bl	8000288 <__aeabi_dsub>
 8010808:	a385      	add	r3, pc, #532	@ (adr r3, 8010a20 <__ieee754_rem_pio2+0x2f0>)
 801080a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080e:	f7ef fd3d 	bl	800028c <__adddf3>
 8010812:	f04f 35ff 	mov.w	r5, #4294967295
 8010816:	e9c4 8900 	strd	r8, r9, [r4]
 801081a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801081e:	e7c4      	b.n	80107aa <__ieee754_rem_pio2+0x7a>
 8010820:	a381      	add	r3, pc, #516	@ (adr r3, 8010a28 <__ieee754_rem_pio2+0x2f8>)
 8010822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010826:	f7ef fd31 	bl	800028c <__adddf3>
 801082a:	a381      	add	r3, pc, #516	@ (adr r3, 8010a30 <__ieee754_rem_pio2+0x300>)
 801082c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010830:	4606      	mov	r6, r0
 8010832:	460f      	mov	r7, r1
 8010834:	f7ef fd2a 	bl	800028c <__adddf3>
 8010838:	4602      	mov	r2, r0
 801083a:	460b      	mov	r3, r1
 801083c:	4680      	mov	r8, r0
 801083e:	4689      	mov	r9, r1
 8010840:	4630      	mov	r0, r6
 8010842:	4639      	mov	r1, r7
 8010844:	f7ef fd20 	bl	8000288 <__aeabi_dsub>
 8010848:	a379      	add	r3, pc, #484	@ (adr r3, 8010a30 <__ieee754_rem_pio2+0x300>)
 801084a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801084e:	e7de      	b.n	801080e <__ieee754_rem_pio2+0xde>
 8010850:	4b82      	ldr	r3, [pc, #520]	@ (8010a5c <__ieee754_rem_pio2+0x32c>)
 8010852:	4598      	cmp	r8, r3
 8010854:	f200 80d1 	bhi.w	80109fa <__ieee754_rem_pio2+0x2ca>
 8010858:	f000 fafe 	bl	8010e58 <fabs>
 801085c:	ec57 6b10 	vmov	r6, r7, d0
 8010860:	a375      	add	r3, pc, #468	@ (adr r3, 8010a38 <__ieee754_rem_pio2+0x308>)
 8010862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010866:	4630      	mov	r0, r6
 8010868:	4639      	mov	r1, r7
 801086a:	f7ef fec5 	bl	80005f8 <__aeabi_dmul>
 801086e:	4b7c      	ldr	r3, [pc, #496]	@ (8010a60 <__ieee754_rem_pio2+0x330>)
 8010870:	2200      	movs	r2, #0
 8010872:	f7ef fd0b 	bl	800028c <__adddf3>
 8010876:	f7f0 f96f 	bl	8000b58 <__aeabi_d2iz>
 801087a:	4605      	mov	r5, r0
 801087c:	f7ef fe52 	bl	8000524 <__aeabi_i2d>
 8010880:	4602      	mov	r2, r0
 8010882:	460b      	mov	r3, r1
 8010884:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010888:	a363      	add	r3, pc, #396	@ (adr r3, 8010a18 <__ieee754_rem_pio2+0x2e8>)
 801088a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088e:	f7ef feb3 	bl	80005f8 <__aeabi_dmul>
 8010892:	4602      	mov	r2, r0
 8010894:	460b      	mov	r3, r1
 8010896:	4630      	mov	r0, r6
 8010898:	4639      	mov	r1, r7
 801089a:	f7ef fcf5 	bl	8000288 <__aeabi_dsub>
 801089e:	a360      	add	r3, pc, #384	@ (adr r3, 8010a20 <__ieee754_rem_pio2+0x2f0>)
 80108a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a4:	4682      	mov	sl, r0
 80108a6:	468b      	mov	fp, r1
 80108a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108ac:	f7ef fea4 	bl	80005f8 <__aeabi_dmul>
 80108b0:	2d1f      	cmp	r5, #31
 80108b2:	4606      	mov	r6, r0
 80108b4:	460f      	mov	r7, r1
 80108b6:	dc0c      	bgt.n	80108d2 <__ieee754_rem_pio2+0x1a2>
 80108b8:	4b6a      	ldr	r3, [pc, #424]	@ (8010a64 <__ieee754_rem_pio2+0x334>)
 80108ba:	1e6a      	subs	r2, r5, #1
 80108bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108c0:	4543      	cmp	r3, r8
 80108c2:	d006      	beq.n	80108d2 <__ieee754_rem_pio2+0x1a2>
 80108c4:	4632      	mov	r2, r6
 80108c6:	463b      	mov	r3, r7
 80108c8:	4650      	mov	r0, sl
 80108ca:	4659      	mov	r1, fp
 80108cc:	f7ef fcdc 	bl	8000288 <__aeabi_dsub>
 80108d0:	e00e      	b.n	80108f0 <__ieee754_rem_pio2+0x1c0>
 80108d2:	463b      	mov	r3, r7
 80108d4:	4632      	mov	r2, r6
 80108d6:	4650      	mov	r0, sl
 80108d8:	4659      	mov	r1, fp
 80108da:	f7ef fcd5 	bl	8000288 <__aeabi_dsub>
 80108de:	ea4f 5328 	mov.w	r3, r8, asr #20
 80108e2:	9305      	str	r3, [sp, #20]
 80108e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80108e8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80108ec:	2b10      	cmp	r3, #16
 80108ee:	dc02      	bgt.n	80108f6 <__ieee754_rem_pio2+0x1c6>
 80108f0:	e9c4 0100 	strd	r0, r1, [r4]
 80108f4:	e039      	b.n	801096a <__ieee754_rem_pio2+0x23a>
 80108f6:	a34c      	add	r3, pc, #304	@ (adr r3, 8010a28 <__ieee754_rem_pio2+0x2f8>)
 80108f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010900:	f7ef fe7a 	bl	80005f8 <__aeabi_dmul>
 8010904:	4606      	mov	r6, r0
 8010906:	460f      	mov	r7, r1
 8010908:	4602      	mov	r2, r0
 801090a:	460b      	mov	r3, r1
 801090c:	4650      	mov	r0, sl
 801090e:	4659      	mov	r1, fp
 8010910:	f7ef fcba 	bl	8000288 <__aeabi_dsub>
 8010914:	4602      	mov	r2, r0
 8010916:	460b      	mov	r3, r1
 8010918:	4680      	mov	r8, r0
 801091a:	4689      	mov	r9, r1
 801091c:	4650      	mov	r0, sl
 801091e:	4659      	mov	r1, fp
 8010920:	f7ef fcb2 	bl	8000288 <__aeabi_dsub>
 8010924:	4632      	mov	r2, r6
 8010926:	463b      	mov	r3, r7
 8010928:	f7ef fcae 	bl	8000288 <__aeabi_dsub>
 801092c:	a340      	add	r3, pc, #256	@ (adr r3, 8010a30 <__ieee754_rem_pio2+0x300>)
 801092e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010932:	4606      	mov	r6, r0
 8010934:	460f      	mov	r7, r1
 8010936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801093a:	f7ef fe5d 	bl	80005f8 <__aeabi_dmul>
 801093e:	4632      	mov	r2, r6
 8010940:	463b      	mov	r3, r7
 8010942:	f7ef fca1 	bl	8000288 <__aeabi_dsub>
 8010946:	4602      	mov	r2, r0
 8010948:	460b      	mov	r3, r1
 801094a:	4606      	mov	r6, r0
 801094c:	460f      	mov	r7, r1
 801094e:	4640      	mov	r0, r8
 8010950:	4649      	mov	r1, r9
 8010952:	f7ef fc99 	bl	8000288 <__aeabi_dsub>
 8010956:	9a05      	ldr	r2, [sp, #20]
 8010958:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801095c:	1ad3      	subs	r3, r2, r3
 801095e:	2b31      	cmp	r3, #49	@ 0x31
 8010960:	dc20      	bgt.n	80109a4 <__ieee754_rem_pio2+0x274>
 8010962:	e9c4 0100 	strd	r0, r1, [r4]
 8010966:	46c2      	mov	sl, r8
 8010968:	46cb      	mov	fp, r9
 801096a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801096e:	4650      	mov	r0, sl
 8010970:	4642      	mov	r2, r8
 8010972:	464b      	mov	r3, r9
 8010974:	4659      	mov	r1, fp
 8010976:	f7ef fc87 	bl	8000288 <__aeabi_dsub>
 801097a:	463b      	mov	r3, r7
 801097c:	4632      	mov	r2, r6
 801097e:	f7ef fc83 	bl	8000288 <__aeabi_dsub>
 8010982:	9b04      	ldr	r3, [sp, #16]
 8010984:	2b00      	cmp	r3, #0
 8010986:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801098a:	f6bf af0e 	bge.w	80107aa <__ieee754_rem_pio2+0x7a>
 801098e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8010992:	6063      	str	r3, [r4, #4]
 8010994:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010998:	f8c4 8000 	str.w	r8, [r4]
 801099c:	60a0      	str	r0, [r4, #8]
 801099e:	60e3      	str	r3, [r4, #12]
 80109a0:	426d      	negs	r5, r5
 80109a2:	e702      	b.n	80107aa <__ieee754_rem_pio2+0x7a>
 80109a4:	a326      	add	r3, pc, #152	@ (adr r3, 8010a40 <__ieee754_rem_pio2+0x310>)
 80109a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109ae:	f7ef fe23 	bl	80005f8 <__aeabi_dmul>
 80109b2:	4606      	mov	r6, r0
 80109b4:	460f      	mov	r7, r1
 80109b6:	4602      	mov	r2, r0
 80109b8:	460b      	mov	r3, r1
 80109ba:	4640      	mov	r0, r8
 80109bc:	4649      	mov	r1, r9
 80109be:	f7ef fc63 	bl	8000288 <__aeabi_dsub>
 80109c2:	4602      	mov	r2, r0
 80109c4:	460b      	mov	r3, r1
 80109c6:	4682      	mov	sl, r0
 80109c8:	468b      	mov	fp, r1
 80109ca:	4640      	mov	r0, r8
 80109cc:	4649      	mov	r1, r9
 80109ce:	f7ef fc5b 	bl	8000288 <__aeabi_dsub>
 80109d2:	4632      	mov	r2, r6
 80109d4:	463b      	mov	r3, r7
 80109d6:	f7ef fc57 	bl	8000288 <__aeabi_dsub>
 80109da:	a31b      	add	r3, pc, #108	@ (adr r3, 8010a48 <__ieee754_rem_pio2+0x318>)
 80109dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e0:	4606      	mov	r6, r0
 80109e2:	460f      	mov	r7, r1
 80109e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109e8:	f7ef fe06 	bl	80005f8 <__aeabi_dmul>
 80109ec:	4632      	mov	r2, r6
 80109ee:	463b      	mov	r3, r7
 80109f0:	f7ef fc4a 	bl	8000288 <__aeabi_dsub>
 80109f4:	4606      	mov	r6, r0
 80109f6:	460f      	mov	r7, r1
 80109f8:	e764      	b.n	80108c4 <__ieee754_rem_pio2+0x194>
 80109fa:	4b1b      	ldr	r3, [pc, #108]	@ (8010a68 <__ieee754_rem_pio2+0x338>)
 80109fc:	4598      	cmp	r8, r3
 80109fe:	d935      	bls.n	8010a6c <__ieee754_rem_pio2+0x33c>
 8010a00:	4632      	mov	r2, r6
 8010a02:	463b      	mov	r3, r7
 8010a04:	4630      	mov	r0, r6
 8010a06:	4639      	mov	r1, r7
 8010a08:	f7ef fc3e 	bl	8000288 <__aeabi_dsub>
 8010a0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010a10:	e9c4 0100 	strd	r0, r1, [r4]
 8010a14:	e69e      	b.n	8010754 <__ieee754_rem_pio2+0x24>
 8010a16:	bf00      	nop
 8010a18:	54400000 	.word	0x54400000
 8010a1c:	3ff921fb 	.word	0x3ff921fb
 8010a20:	1a626331 	.word	0x1a626331
 8010a24:	3dd0b461 	.word	0x3dd0b461
 8010a28:	1a600000 	.word	0x1a600000
 8010a2c:	3dd0b461 	.word	0x3dd0b461
 8010a30:	2e037073 	.word	0x2e037073
 8010a34:	3ba3198a 	.word	0x3ba3198a
 8010a38:	6dc9c883 	.word	0x6dc9c883
 8010a3c:	3fe45f30 	.word	0x3fe45f30
 8010a40:	2e000000 	.word	0x2e000000
 8010a44:	3ba3198a 	.word	0x3ba3198a
 8010a48:	252049c1 	.word	0x252049c1
 8010a4c:	397b839a 	.word	0x397b839a
 8010a50:	3fe921fb 	.word	0x3fe921fb
 8010a54:	4002d97b 	.word	0x4002d97b
 8010a58:	3ff921fb 	.word	0x3ff921fb
 8010a5c:	413921fb 	.word	0x413921fb
 8010a60:	3fe00000 	.word	0x3fe00000
 8010a64:	08012438 	.word	0x08012438
 8010a68:	7fefffff 	.word	0x7fefffff
 8010a6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010a70:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8010a74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010a78:	4630      	mov	r0, r6
 8010a7a:	460f      	mov	r7, r1
 8010a7c:	f7f0 f86c 	bl	8000b58 <__aeabi_d2iz>
 8010a80:	f7ef fd50 	bl	8000524 <__aeabi_i2d>
 8010a84:	4602      	mov	r2, r0
 8010a86:	460b      	mov	r3, r1
 8010a88:	4630      	mov	r0, r6
 8010a8a:	4639      	mov	r1, r7
 8010a8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010a90:	f7ef fbfa 	bl	8000288 <__aeabi_dsub>
 8010a94:	4b22      	ldr	r3, [pc, #136]	@ (8010b20 <__ieee754_rem_pio2+0x3f0>)
 8010a96:	2200      	movs	r2, #0
 8010a98:	f7ef fdae 	bl	80005f8 <__aeabi_dmul>
 8010a9c:	460f      	mov	r7, r1
 8010a9e:	4606      	mov	r6, r0
 8010aa0:	f7f0 f85a 	bl	8000b58 <__aeabi_d2iz>
 8010aa4:	f7ef fd3e 	bl	8000524 <__aeabi_i2d>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	460b      	mov	r3, r1
 8010aac:	4630      	mov	r0, r6
 8010aae:	4639      	mov	r1, r7
 8010ab0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010ab4:	f7ef fbe8 	bl	8000288 <__aeabi_dsub>
 8010ab8:	4b19      	ldr	r3, [pc, #100]	@ (8010b20 <__ieee754_rem_pio2+0x3f0>)
 8010aba:	2200      	movs	r2, #0
 8010abc:	f7ef fd9c 	bl	80005f8 <__aeabi_dmul>
 8010ac0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8010ac4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010ac8:	f04f 0803 	mov.w	r8, #3
 8010acc:	2600      	movs	r6, #0
 8010ace:	2700      	movs	r7, #0
 8010ad0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010ad4:	4632      	mov	r2, r6
 8010ad6:	463b      	mov	r3, r7
 8010ad8:	46c2      	mov	sl, r8
 8010ada:	f108 38ff 	add.w	r8, r8, #4294967295
 8010ade:	f7ef fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	d1f4      	bne.n	8010ad0 <__ieee754_rem_pio2+0x3a0>
 8010ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8010b24 <__ieee754_rem_pio2+0x3f4>)
 8010ae8:	9301      	str	r3, [sp, #4]
 8010aea:	2302      	movs	r3, #2
 8010aec:	9300      	str	r3, [sp, #0]
 8010aee:	462a      	mov	r2, r5
 8010af0:	4653      	mov	r3, sl
 8010af2:	4621      	mov	r1, r4
 8010af4:	a806      	add	r0, sp, #24
 8010af6:	f000 f9b7 	bl	8010e68 <__kernel_rem_pio2>
 8010afa:	9b04      	ldr	r3, [sp, #16]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	4605      	mov	r5, r0
 8010b00:	f6bf ae53 	bge.w	80107aa <__ieee754_rem_pio2+0x7a>
 8010b04:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010b08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010b0c:	e9c4 2300 	strd	r2, r3, [r4]
 8010b10:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010b14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010b18:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010b1c:	e740      	b.n	80109a0 <__ieee754_rem_pio2+0x270>
 8010b1e:	bf00      	nop
 8010b20:	41700000 	.word	0x41700000
 8010b24:	080124b8 	.word	0x080124b8

08010b28 <atan>:
 8010b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b2c:	ec55 4b10 	vmov	r4, r5, d0
 8010b30:	4bbf      	ldr	r3, [pc, #764]	@ (8010e30 <atan+0x308>)
 8010b32:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8010b36:	429e      	cmp	r6, r3
 8010b38:	46ab      	mov	fp, r5
 8010b3a:	d918      	bls.n	8010b6e <atan+0x46>
 8010b3c:	4bbd      	ldr	r3, [pc, #756]	@ (8010e34 <atan+0x30c>)
 8010b3e:	429e      	cmp	r6, r3
 8010b40:	d801      	bhi.n	8010b46 <atan+0x1e>
 8010b42:	d109      	bne.n	8010b58 <atan+0x30>
 8010b44:	b144      	cbz	r4, 8010b58 <atan+0x30>
 8010b46:	4622      	mov	r2, r4
 8010b48:	462b      	mov	r3, r5
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	4629      	mov	r1, r5
 8010b4e:	f7ef fb9d 	bl	800028c <__adddf3>
 8010b52:	4604      	mov	r4, r0
 8010b54:	460d      	mov	r5, r1
 8010b56:	e006      	b.n	8010b66 <atan+0x3e>
 8010b58:	f1bb 0f00 	cmp.w	fp, #0
 8010b5c:	f340 812b 	ble.w	8010db6 <atan+0x28e>
 8010b60:	a597      	add	r5, pc, #604	@ (adr r5, 8010dc0 <atan+0x298>)
 8010b62:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010b66:	ec45 4b10 	vmov	d0, r4, r5
 8010b6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b6e:	4bb2      	ldr	r3, [pc, #712]	@ (8010e38 <atan+0x310>)
 8010b70:	429e      	cmp	r6, r3
 8010b72:	d813      	bhi.n	8010b9c <atan+0x74>
 8010b74:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010b78:	429e      	cmp	r6, r3
 8010b7a:	d80c      	bhi.n	8010b96 <atan+0x6e>
 8010b7c:	a392      	add	r3, pc, #584	@ (adr r3, 8010dc8 <atan+0x2a0>)
 8010b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b82:	4620      	mov	r0, r4
 8010b84:	4629      	mov	r1, r5
 8010b86:	f7ef fb81 	bl	800028c <__adddf3>
 8010b8a:	4bac      	ldr	r3, [pc, #688]	@ (8010e3c <atan+0x314>)
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	f7ef ffc3 	bl	8000b18 <__aeabi_dcmpgt>
 8010b92:	2800      	cmp	r0, #0
 8010b94:	d1e7      	bne.n	8010b66 <atan+0x3e>
 8010b96:	f04f 3aff 	mov.w	sl, #4294967295
 8010b9a:	e029      	b.n	8010bf0 <atan+0xc8>
 8010b9c:	f000 f95c 	bl	8010e58 <fabs>
 8010ba0:	4ba7      	ldr	r3, [pc, #668]	@ (8010e40 <atan+0x318>)
 8010ba2:	429e      	cmp	r6, r3
 8010ba4:	ec55 4b10 	vmov	r4, r5, d0
 8010ba8:	f200 80bc 	bhi.w	8010d24 <atan+0x1fc>
 8010bac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010bb0:	429e      	cmp	r6, r3
 8010bb2:	f200 809e 	bhi.w	8010cf2 <atan+0x1ca>
 8010bb6:	4622      	mov	r2, r4
 8010bb8:	462b      	mov	r3, r5
 8010bba:	4620      	mov	r0, r4
 8010bbc:	4629      	mov	r1, r5
 8010bbe:	f7ef fb65 	bl	800028c <__adddf3>
 8010bc2:	4b9e      	ldr	r3, [pc, #632]	@ (8010e3c <atan+0x314>)
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	f7ef fb5f 	bl	8000288 <__aeabi_dsub>
 8010bca:	2200      	movs	r2, #0
 8010bcc:	4606      	mov	r6, r0
 8010bce:	460f      	mov	r7, r1
 8010bd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	4629      	mov	r1, r5
 8010bd8:	f7ef fb58 	bl	800028c <__adddf3>
 8010bdc:	4602      	mov	r2, r0
 8010bde:	460b      	mov	r3, r1
 8010be0:	4630      	mov	r0, r6
 8010be2:	4639      	mov	r1, r7
 8010be4:	f7ef fe32 	bl	800084c <__aeabi_ddiv>
 8010be8:	f04f 0a00 	mov.w	sl, #0
 8010bec:	4604      	mov	r4, r0
 8010bee:	460d      	mov	r5, r1
 8010bf0:	4622      	mov	r2, r4
 8010bf2:	462b      	mov	r3, r5
 8010bf4:	4620      	mov	r0, r4
 8010bf6:	4629      	mov	r1, r5
 8010bf8:	f7ef fcfe 	bl	80005f8 <__aeabi_dmul>
 8010bfc:	4602      	mov	r2, r0
 8010bfe:	460b      	mov	r3, r1
 8010c00:	4680      	mov	r8, r0
 8010c02:	4689      	mov	r9, r1
 8010c04:	f7ef fcf8 	bl	80005f8 <__aeabi_dmul>
 8010c08:	a371      	add	r3, pc, #452	@ (adr r3, 8010dd0 <atan+0x2a8>)
 8010c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0e:	4606      	mov	r6, r0
 8010c10:	460f      	mov	r7, r1
 8010c12:	f7ef fcf1 	bl	80005f8 <__aeabi_dmul>
 8010c16:	a370      	add	r3, pc, #448	@ (adr r3, 8010dd8 <atan+0x2b0>)
 8010c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c1c:	f7ef fb36 	bl	800028c <__adddf3>
 8010c20:	4632      	mov	r2, r6
 8010c22:	463b      	mov	r3, r7
 8010c24:	f7ef fce8 	bl	80005f8 <__aeabi_dmul>
 8010c28:	a36d      	add	r3, pc, #436	@ (adr r3, 8010de0 <atan+0x2b8>)
 8010c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2e:	f7ef fb2d 	bl	800028c <__adddf3>
 8010c32:	4632      	mov	r2, r6
 8010c34:	463b      	mov	r3, r7
 8010c36:	f7ef fcdf 	bl	80005f8 <__aeabi_dmul>
 8010c3a:	a36b      	add	r3, pc, #428	@ (adr r3, 8010de8 <atan+0x2c0>)
 8010c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c40:	f7ef fb24 	bl	800028c <__adddf3>
 8010c44:	4632      	mov	r2, r6
 8010c46:	463b      	mov	r3, r7
 8010c48:	f7ef fcd6 	bl	80005f8 <__aeabi_dmul>
 8010c4c:	a368      	add	r3, pc, #416	@ (adr r3, 8010df0 <atan+0x2c8>)
 8010c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c52:	f7ef fb1b 	bl	800028c <__adddf3>
 8010c56:	4632      	mov	r2, r6
 8010c58:	463b      	mov	r3, r7
 8010c5a:	f7ef fccd 	bl	80005f8 <__aeabi_dmul>
 8010c5e:	a366      	add	r3, pc, #408	@ (adr r3, 8010df8 <atan+0x2d0>)
 8010c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c64:	f7ef fb12 	bl	800028c <__adddf3>
 8010c68:	4642      	mov	r2, r8
 8010c6a:	464b      	mov	r3, r9
 8010c6c:	f7ef fcc4 	bl	80005f8 <__aeabi_dmul>
 8010c70:	a363      	add	r3, pc, #396	@ (adr r3, 8010e00 <atan+0x2d8>)
 8010c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c76:	4680      	mov	r8, r0
 8010c78:	4689      	mov	r9, r1
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	4639      	mov	r1, r7
 8010c7e:	f7ef fcbb 	bl	80005f8 <__aeabi_dmul>
 8010c82:	a361      	add	r3, pc, #388	@ (adr r3, 8010e08 <atan+0x2e0>)
 8010c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c88:	f7ef fafe 	bl	8000288 <__aeabi_dsub>
 8010c8c:	4632      	mov	r2, r6
 8010c8e:	463b      	mov	r3, r7
 8010c90:	f7ef fcb2 	bl	80005f8 <__aeabi_dmul>
 8010c94:	a35e      	add	r3, pc, #376	@ (adr r3, 8010e10 <atan+0x2e8>)
 8010c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c9a:	f7ef faf5 	bl	8000288 <__aeabi_dsub>
 8010c9e:	4632      	mov	r2, r6
 8010ca0:	463b      	mov	r3, r7
 8010ca2:	f7ef fca9 	bl	80005f8 <__aeabi_dmul>
 8010ca6:	a35c      	add	r3, pc, #368	@ (adr r3, 8010e18 <atan+0x2f0>)
 8010ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cac:	f7ef faec 	bl	8000288 <__aeabi_dsub>
 8010cb0:	4632      	mov	r2, r6
 8010cb2:	463b      	mov	r3, r7
 8010cb4:	f7ef fca0 	bl	80005f8 <__aeabi_dmul>
 8010cb8:	a359      	add	r3, pc, #356	@ (adr r3, 8010e20 <atan+0x2f8>)
 8010cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cbe:	f7ef fae3 	bl	8000288 <__aeabi_dsub>
 8010cc2:	4632      	mov	r2, r6
 8010cc4:	463b      	mov	r3, r7
 8010cc6:	f7ef fc97 	bl	80005f8 <__aeabi_dmul>
 8010cca:	4602      	mov	r2, r0
 8010ccc:	460b      	mov	r3, r1
 8010cce:	4640      	mov	r0, r8
 8010cd0:	4649      	mov	r1, r9
 8010cd2:	f7ef fadb 	bl	800028c <__adddf3>
 8010cd6:	4622      	mov	r2, r4
 8010cd8:	462b      	mov	r3, r5
 8010cda:	f7ef fc8d 	bl	80005f8 <__aeabi_dmul>
 8010cde:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	460b      	mov	r3, r1
 8010ce6:	d148      	bne.n	8010d7a <atan+0x252>
 8010ce8:	4620      	mov	r0, r4
 8010cea:	4629      	mov	r1, r5
 8010cec:	f7ef facc 	bl	8000288 <__aeabi_dsub>
 8010cf0:	e72f      	b.n	8010b52 <atan+0x2a>
 8010cf2:	4b52      	ldr	r3, [pc, #328]	@ (8010e3c <atan+0x314>)
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	4629      	mov	r1, r5
 8010cfa:	f7ef fac5 	bl	8000288 <__aeabi_dsub>
 8010cfe:	4b4f      	ldr	r3, [pc, #316]	@ (8010e3c <atan+0x314>)
 8010d00:	4606      	mov	r6, r0
 8010d02:	460f      	mov	r7, r1
 8010d04:	2200      	movs	r2, #0
 8010d06:	4620      	mov	r0, r4
 8010d08:	4629      	mov	r1, r5
 8010d0a:	f7ef fabf 	bl	800028c <__adddf3>
 8010d0e:	4602      	mov	r2, r0
 8010d10:	460b      	mov	r3, r1
 8010d12:	4630      	mov	r0, r6
 8010d14:	4639      	mov	r1, r7
 8010d16:	f7ef fd99 	bl	800084c <__aeabi_ddiv>
 8010d1a:	f04f 0a01 	mov.w	sl, #1
 8010d1e:	4604      	mov	r4, r0
 8010d20:	460d      	mov	r5, r1
 8010d22:	e765      	b.n	8010bf0 <atan+0xc8>
 8010d24:	4b47      	ldr	r3, [pc, #284]	@ (8010e44 <atan+0x31c>)
 8010d26:	429e      	cmp	r6, r3
 8010d28:	d21c      	bcs.n	8010d64 <atan+0x23c>
 8010d2a:	4b47      	ldr	r3, [pc, #284]	@ (8010e48 <atan+0x320>)
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	4620      	mov	r0, r4
 8010d30:	4629      	mov	r1, r5
 8010d32:	f7ef faa9 	bl	8000288 <__aeabi_dsub>
 8010d36:	4b44      	ldr	r3, [pc, #272]	@ (8010e48 <atan+0x320>)
 8010d38:	4606      	mov	r6, r0
 8010d3a:	460f      	mov	r7, r1
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	4620      	mov	r0, r4
 8010d40:	4629      	mov	r1, r5
 8010d42:	f7ef fc59 	bl	80005f8 <__aeabi_dmul>
 8010d46:	4b3d      	ldr	r3, [pc, #244]	@ (8010e3c <atan+0x314>)
 8010d48:	2200      	movs	r2, #0
 8010d4a:	f7ef fa9f 	bl	800028c <__adddf3>
 8010d4e:	4602      	mov	r2, r0
 8010d50:	460b      	mov	r3, r1
 8010d52:	4630      	mov	r0, r6
 8010d54:	4639      	mov	r1, r7
 8010d56:	f7ef fd79 	bl	800084c <__aeabi_ddiv>
 8010d5a:	f04f 0a02 	mov.w	sl, #2
 8010d5e:	4604      	mov	r4, r0
 8010d60:	460d      	mov	r5, r1
 8010d62:	e745      	b.n	8010bf0 <atan+0xc8>
 8010d64:	4622      	mov	r2, r4
 8010d66:	462b      	mov	r3, r5
 8010d68:	4938      	ldr	r1, [pc, #224]	@ (8010e4c <atan+0x324>)
 8010d6a:	2000      	movs	r0, #0
 8010d6c:	f7ef fd6e 	bl	800084c <__aeabi_ddiv>
 8010d70:	f04f 0a03 	mov.w	sl, #3
 8010d74:	4604      	mov	r4, r0
 8010d76:	460d      	mov	r5, r1
 8010d78:	e73a      	b.n	8010bf0 <atan+0xc8>
 8010d7a:	4b35      	ldr	r3, [pc, #212]	@ (8010e50 <atan+0x328>)
 8010d7c:	4e35      	ldr	r6, [pc, #212]	@ (8010e54 <atan+0x32c>)
 8010d7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d86:	f7ef fa7f 	bl	8000288 <__aeabi_dsub>
 8010d8a:	4622      	mov	r2, r4
 8010d8c:	462b      	mov	r3, r5
 8010d8e:	f7ef fa7b 	bl	8000288 <__aeabi_dsub>
 8010d92:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010d96:	4602      	mov	r2, r0
 8010d98:	460b      	mov	r3, r1
 8010d9a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010d9e:	f7ef fa73 	bl	8000288 <__aeabi_dsub>
 8010da2:	f1bb 0f00 	cmp.w	fp, #0
 8010da6:	4604      	mov	r4, r0
 8010da8:	460d      	mov	r5, r1
 8010daa:	f6bf aedc 	bge.w	8010b66 <atan+0x3e>
 8010dae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010db2:	461d      	mov	r5, r3
 8010db4:	e6d7      	b.n	8010b66 <atan+0x3e>
 8010db6:	a51c      	add	r5, pc, #112	@ (adr r5, 8010e28 <atan+0x300>)
 8010db8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010dbc:	e6d3      	b.n	8010b66 <atan+0x3e>
 8010dbe:	bf00      	nop
 8010dc0:	54442d18 	.word	0x54442d18
 8010dc4:	3ff921fb 	.word	0x3ff921fb
 8010dc8:	8800759c 	.word	0x8800759c
 8010dcc:	7e37e43c 	.word	0x7e37e43c
 8010dd0:	e322da11 	.word	0xe322da11
 8010dd4:	3f90ad3a 	.word	0x3f90ad3a
 8010dd8:	24760deb 	.word	0x24760deb
 8010ddc:	3fa97b4b 	.word	0x3fa97b4b
 8010de0:	a0d03d51 	.word	0xa0d03d51
 8010de4:	3fb10d66 	.word	0x3fb10d66
 8010de8:	c54c206e 	.word	0xc54c206e
 8010dec:	3fb745cd 	.word	0x3fb745cd
 8010df0:	920083ff 	.word	0x920083ff
 8010df4:	3fc24924 	.word	0x3fc24924
 8010df8:	5555550d 	.word	0x5555550d
 8010dfc:	3fd55555 	.word	0x3fd55555
 8010e00:	2c6a6c2f 	.word	0x2c6a6c2f
 8010e04:	bfa2b444 	.word	0xbfa2b444
 8010e08:	52defd9a 	.word	0x52defd9a
 8010e0c:	3fadde2d 	.word	0x3fadde2d
 8010e10:	af749a6d 	.word	0xaf749a6d
 8010e14:	3fb3b0f2 	.word	0x3fb3b0f2
 8010e18:	fe231671 	.word	0xfe231671
 8010e1c:	3fbc71c6 	.word	0x3fbc71c6
 8010e20:	9998ebc4 	.word	0x9998ebc4
 8010e24:	3fc99999 	.word	0x3fc99999
 8010e28:	54442d18 	.word	0x54442d18
 8010e2c:	bff921fb 	.word	0xbff921fb
 8010e30:	440fffff 	.word	0x440fffff
 8010e34:	7ff00000 	.word	0x7ff00000
 8010e38:	3fdbffff 	.word	0x3fdbffff
 8010e3c:	3ff00000 	.word	0x3ff00000
 8010e40:	3ff2ffff 	.word	0x3ff2ffff
 8010e44:	40038000 	.word	0x40038000
 8010e48:	3ff80000 	.word	0x3ff80000
 8010e4c:	bff00000 	.word	0xbff00000
 8010e50:	080125c0 	.word	0x080125c0
 8010e54:	080125e0 	.word	0x080125e0

08010e58 <fabs>:
 8010e58:	ec51 0b10 	vmov	r0, r1, d0
 8010e5c:	4602      	mov	r2, r0
 8010e5e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010e62:	ec43 2b10 	vmov	d0, r2, r3
 8010e66:	4770      	bx	lr

08010e68 <__kernel_rem_pio2>:
 8010e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e6c:	ed2d 8b02 	vpush	{d8}
 8010e70:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8010e74:	f112 0f14 	cmn.w	r2, #20
 8010e78:	9306      	str	r3, [sp, #24]
 8010e7a:	9104      	str	r1, [sp, #16]
 8010e7c:	4bbe      	ldr	r3, [pc, #760]	@ (8011178 <__kernel_rem_pio2+0x310>)
 8010e7e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8010e80:	9008      	str	r0, [sp, #32]
 8010e82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e86:	9300      	str	r3, [sp, #0]
 8010e88:	9b06      	ldr	r3, [sp, #24]
 8010e8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8010e8e:	bfa8      	it	ge
 8010e90:	1ed4      	subge	r4, r2, #3
 8010e92:	9305      	str	r3, [sp, #20]
 8010e94:	bfb2      	itee	lt
 8010e96:	2400      	movlt	r4, #0
 8010e98:	2318      	movge	r3, #24
 8010e9a:	fb94 f4f3 	sdivge	r4, r4, r3
 8010e9e:	f06f 0317 	mvn.w	r3, #23
 8010ea2:	fb04 3303 	mla	r3, r4, r3, r3
 8010ea6:	eb03 0b02 	add.w	fp, r3, r2
 8010eaa:	9b00      	ldr	r3, [sp, #0]
 8010eac:	9a05      	ldr	r2, [sp, #20]
 8010eae:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8011168 <__kernel_rem_pio2+0x300>
 8010eb2:	eb03 0802 	add.w	r8, r3, r2
 8010eb6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010eb8:	1aa7      	subs	r7, r4, r2
 8010eba:	ae20      	add	r6, sp, #128	@ 0x80
 8010ebc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010ec0:	2500      	movs	r5, #0
 8010ec2:	4545      	cmp	r5, r8
 8010ec4:	dd13      	ble.n	8010eee <__kernel_rem_pio2+0x86>
 8010ec6:	9b06      	ldr	r3, [sp, #24]
 8010ec8:	aa20      	add	r2, sp, #128	@ 0x80
 8010eca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010ece:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8010ed2:	f04f 0800 	mov.w	r8, #0
 8010ed6:	9b00      	ldr	r3, [sp, #0]
 8010ed8:	4598      	cmp	r8, r3
 8010eda:	dc31      	bgt.n	8010f40 <__kernel_rem_pio2+0xd8>
 8010edc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8011168 <__kernel_rem_pio2+0x300>
 8010ee0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010ee4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010ee8:	462f      	mov	r7, r5
 8010eea:	2600      	movs	r6, #0
 8010eec:	e01b      	b.n	8010f26 <__kernel_rem_pio2+0xbe>
 8010eee:	42ef      	cmn	r7, r5
 8010ef0:	d407      	bmi.n	8010f02 <__kernel_rem_pio2+0x9a>
 8010ef2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010ef6:	f7ef fb15 	bl	8000524 <__aeabi_i2d>
 8010efa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010efe:	3501      	adds	r5, #1
 8010f00:	e7df      	b.n	8010ec2 <__kernel_rem_pio2+0x5a>
 8010f02:	ec51 0b18 	vmov	r0, r1, d8
 8010f06:	e7f8      	b.n	8010efa <__kernel_rem_pio2+0x92>
 8010f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010f10:	f7ef fb72 	bl	80005f8 <__aeabi_dmul>
 8010f14:	4602      	mov	r2, r0
 8010f16:	460b      	mov	r3, r1
 8010f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f1c:	f7ef f9b6 	bl	800028c <__adddf3>
 8010f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f24:	3601      	adds	r6, #1
 8010f26:	9b05      	ldr	r3, [sp, #20]
 8010f28:	429e      	cmp	r6, r3
 8010f2a:	f1a7 0708 	sub.w	r7, r7, #8
 8010f2e:	ddeb      	ble.n	8010f08 <__kernel_rem_pio2+0xa0>
 8010f30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f34:	f108 0801 	add.w	r8, r8, #1
 8010f38:	ecaa 7b02 	vstmia	sl!, {d7}
 8010f3c:	3508      	adds	r5, #8
 8010f3e:	e7ca      	b.n	8010ed6 <__kernel_rem_pio2+0x6e>
 8010f40:	9b00      	ldr	r3, [sp, #0]
 8010f42:	f8dd 8000 	ldr.w	r8, [sp]
 8010f46:	aa0c      	add	r2, sp, #48	@ 0x30
 8010f48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010f4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f4e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010f50:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f56:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8010f5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f5c:	ab98      	add	r3, sp, #608	@ 0x260
 8010f5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010f62:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8010f66:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010f6a:	ac0c      	add	r4, sp, #48	@ 0x30
 8010f6c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010f6e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8010f72:	46a1      	mov	r9, r4
 8010f74:	46c2      	mov	sl, r8
 8010f76:	f1ba 0f00 	cmp.w	sl, #0
 8010f7a:	f1a5 0508 	sub.w	r5, r5, #8
 8010f7e:	dc77      	bgt.n	8011070 <__kernel_rem_pio2+0x208>
 8010f80:	4658      	mov	r0, fp
 8010f82:	ed9d 0b02 	vldr	d0, [sp, #8]
 8010f86:	f000 fac7 	bl	8011518 <scalbn>
 8010f8a:	ec57 6b10 	vmov	r6, r7, d0
 8010f8e:	2200      	movs	r2, #0
 8010f90:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010f94:	4630      	mov	r0, r6
 8010f96:	4639      	mov	r1, r7
 8010f98:	f7ef fb2e 	bl	80005f8 <__aeabi_dmul>
 8010f9c:	ec41 0b10 	vmov	d0, r0, r1
 8010fa0:	f000 fb3a 	bl	8011618 <floor>
 8010fa4:	4b75      	ldr	r3, [pc, #468]	@ (801117c <__kernel_rem_pio2+0x314>)
 8010fa6:	ec51 0b10 	vmov	r0, r1, d0
 8010faa:	2200      	movs	r2, #0
 8010fac:	f7ef fb24 	bl	80005f8 <__aeabi_dmul>
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	460b      	mov	r3, r1
 8010fb4:	4630      	mov	r0, r6
 8010fb6:	4639      	mov	r1, r7
 8010fb8:	f7ef f966 	bl	8000288 <__aeabi_dsub>
 8010fbc:	460f      	mov	r7, r1
 8010fbe:	4606      	mov	r6, r0
 8010fc0:	f7ef fdca 	bl	8000b58 <__aeabi_d2iz>
 8010fc4:	9002      	str	r0, [sp, #8]
 8010fc6:	f7ef faad 	bl	8000524 <__aeabi_i2d>
 8010fca:	4602      	mov	r2, r0
 8010fcc:	460b      	mov	r3, r1
 8010fce:	4630      	mov	r0, r6
 8010fd0:	4639      	mov	r1, r7
 8010fd2:	f7ef f959 	bl	8000288 <__aeabi_dsub>
 8010fd6:	f1bb 0f00 	cmp.w	fp, #0
 8010fda:	4606      	mov	r6, r0
 8010fdc:	460f      	mov	r7, r1
 8010fde:	dd6c      	ble.n	80110ba <__kernel_rem_pio2+0x252>
 8010fe0:	f108 31ff 	add.w	r1, r8, #4294967295
 8010fe4:	ab0c      	add	r3, sp, #48	@ 0x30
 8010fe6:	9d02      	ldr	r5, [sp, #8]
 8010fe8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010fec:	f1cb 0018 	rsb	r0, fp, #24
 8010ff0:	fa43 f200 	asr.w	r2, r3, r0
 8010ff4:	4415      	add	r5, r2
 8010ff6:	4082      	lsls	r2, r0
 8010ff8:	1a9b      	subs	r3, r3, r2
 8010ffa:	aa0c      	add	r2, sp, #48	@ 0x30
 8010ffc:	9502      	str	r5, [sp, #8]
 8010ffe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011002:	f1cb 0217 	rsb	r2, fp, #23
 8011006:	fa43 f902 	asr.w	r9, r3, r2
 801100a:	f1b9 0f00 	cmp.w	r9, #0
 801100e:	dd64      	ble.n	80110da <__kernel_rem_pio2+0x272>
 8011010:	9b02      	ldr	r3, [sp, #8]
 8011012:	2200      	movs	r2, #0
 8011014:	3301      	adds	r3, #1
 8011016:	9302      	str	r3, [sp, #8]
 8011018:	4615      	mov	r5, r2
 801101a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801101e:	4590      	cmp	r8, r2
 8011020:	f300 80b8 	bgt.w	8011194 <__kernel_rem_pio2+0x32c>
 8011024:	f1bb 0f00 	cmp.w	fp, #0
 8011028:	dd07      	ble.n	801103a <__kernel_rem_pio2+0x1d2>
 801102a:	f1bb 0f01 	cmp.w	fp, #1
 801102e:	f000 80bf 	beq.w	80111b0 <__kernel_rem_pio2+0x348>
 8011032:	f1bb 0f02 	cmp.w	fp, #2
 8011036:	f000 80c6 	beq.w	80111c6 <__kernel_rem_pio2+0x35e>
 801103a:	f1b9 0f02 	cmp.w	r9, #2
 801103e:	d14c      	bne.n	80110da <__kernel_rem_pio2+0x272>
 8011040:	4632      	mov	r2, r6
 8011042:	463b      	mov	r3, r7
 8011044:	494e      	ldr	r1, [pc, #312]	@ (8011180 <__kernel_rem_pio2+0x318>)
 8011046:	2000      	movs	r0, #0
 8011048:	f7ef f91e 	bl	8000288 <__aeabi_dsub>
 801104c:	4606      	mov	r6, r0
 801104e:	460f      	mov	r7, r1
 8011050:	2d00      	cmp	r5, #0
 8011052:	d042      	beq.n	80110da <__kernel_rem_pio2+0x272>
 8011054:	4658      	mov	r0, fp
 8011056:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8011170 <__kernel_rem_pio2+0x308>
 801105a:	f000 fa5d 	bl	8011518 <scalbn>
 801105e:	4630      	mov	r0, r6
 8011060:	4639      	mov	r1, r7
 8011062:	ec53 2b10 	vmov	r2, r3, d0
 8011066:	f7ef f90f 	bl	8000288 <__aeabi_dsub>
 801106a:	4606      	mov	r6, r0
 801106c:	460f      	mov	r7, r1
 801106e:	e034      	b.n	80110da <__kernel_rem_pio2+0x272>
 8011070:	4b44      	ldr	r3, [pc, #272]	@ (8011184 <__kernel_rem_pio2+0x31c>)
 8011072:	2200      	movs	r2, #0
 8011074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011078:	f7ef fabe 	bl	80005f8 <__aeabi_dmul>
 801107c:	f7ef fd6c 	bl	8000b58 <__aeabi_d2iz>
 8011080:	f7ef fa50 	bl	8000524 <__aeabi_i2d>
 8011084:	4b40      	ldr	r3, [pc, #256]	@ (8011188 <__kernel_rem_pio2+0x320>)
 8011086:	2200      	movs	r2, #0
 8011088:	4606      	mov	r6, r0
 801108a:	460f      	mov	r7, r1
 801108c:	f7ef fab4 	bl	80005f8 <__aeabi_dmul>
 8011090:	4602      	mov	r2, r0
 8011092:	460b      	mov	r3, r1
 8011094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011098:	f7ef f8f6 	bl	8000288 <__aeabi_dsub>
 801109c:	f7ef fd5c 	bl	8000b58 <__aeabi_d2iz>
 80110a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80110a4:	f849 0b04 	str.w	r0, [r9], #4
 80110a8:	4639      	mov	r1, r7
 80110aa:	4630      	mov	r0, r6
 80110ac:	f7ef f8ee 	bl	800028c <__adddf3>
 80110b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80110b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110b8:	e75d      	b.n	8010f76 <__kernel_rem_pio2+0x10e>
 80110ba:	d107      	bne.n	80110cc <__kernel_rem_pio2+0x264>
 80110bc:	f108 33ff 	add.w	r3, r8, #4294967295
 80110c0:	aa0c      	add	r2, sp, #48	@ 0x30
 80110c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110c6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80110ca:	e79e      	b.n	801100a <__kernel_rem_pio2+0x1a2>
 80110cc:	4b2f      	ldr	r3, [pc, #188]	@ (801118c <__kernel_rem_pio2+0x324>)
 80110ce:	2200      	movs	r2, #0
 80110d0:	f7ef fd18 	bl	8000b04 <__aeabi_dcmpge>
 80110d4:	2800      	cmp	r0, #0
 80110d6:	d143      	bne.n	8011160 <__kernel_rem_pio2+0x2f8>
 80110d8:	4681      	mov	r9, r0
 80110da:	2200      	movs	r2, #0
 80110dc:	2300      	movs	r3, #0
 80110de:	4630      	mov	r0, r6
 80110e0:	4639      	mov	r1, r7
 80110e2:	f7ef fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80110e6:	2800      	cmp	r0, #0
 80110e8:	f000 80bf 	beq.w	801126a <__kernel_rem_pio2+0x402>
 80110ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80110f0:	2200      	movs	r2, #0
 80110f2:	9900      	ldr	r1, [sp, #0]
 80110f4:	428b      	cmp	r3, r1
 80110f6:	da6e      	bge.n	80111d6 <__kernel_rem_pio2+0x36e>
 80110f8:	2a00      	cmp	r2, #0
 80110fa:	f000 8089 	beq.w	8011210 <__kernel_rem_pio2+0x3a8>
 80110fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8011102:	ab0c      	add	r3, sp, #48	@ 0x30
 8011104:	f1ab 0b18 	sub.w	fp, fp, #24
 8011108:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d0f6      	beq.n	80110fe <__kernel_rem_pio2+0x296>
 8011110:	4658      	mov	r0, fp
 8011112:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8011170 <__kernel_rem_pio2+0x308>
 8011116:	f000 f9ff 	bl	8011518 <scalbn>
 801111a:	f108 0301 	add.w	r3, r8, #1
 801111e:	00da      	lsls	r2, r3, #3
 8011120:	9205      	str	r2, [sp, #20]
 8011122:	ec55 4b10 	vmov	r4, r5, d0
 8011126:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011128:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8011184 <__kernel_rem_pio2+0x31c>
 801112c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8011130:	4646      	mov	r6, r8
 8011132:	f04f 0a00 	mov.w	sl, #0
 8011136:	2e00      	cmp	r6, #0
 8011138:	f280 80cf 	bge.w	80112da <__kernel_rem_pio2+0x472>
 801113c:	4644      	mov	r4, r8
 801113e:	2c00      	cmp	r4, #0
 8011140:	f2c0 80fd 	blt.w	801133e <__kernel_rem_pio2+0x4d6>
 8011144:	4b12      	ldr	r3, [pc, #72]	@ (8011190 <__kernel_rem_pio2+0x328>)
 8011146:	461f      	mov	r7, r3
 8011148:	ab70      	add	r3, sp, #448	@ 0x1c0
 801114a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801114e:	9306      	str	r3, [sp, #24]
 8011150:	f04f 0a00 	mov.w	sl, #0
 8011154:	f04f 0b00 	mov.w	fp, #0
 8011158:	2600      	movs	r6, #0
 801115a:	eba8 0504 	sub.w	r5, r8, r4
 801115e:	e0e2      	b.n	8011326 <__kernel_rem_pio2+0x4be>
 8011160:	f04f 0902 	mov.w	r9, #2
 8011164:	e754      	b.n	8011010 <__kernel_rem_pio2+0x1a8>
 8011166:	bf00      	nop
	...
 8011174:	3ff00000 	.word	0x3ff00000
 8011178:	08012640 	.word	0x08012640
 801117c:	40200000 	.word	0x40200000
 8011180:	3ff00000 	.word	0x3ff00000
 8011184:	3e700000 	.word	0x3e700000
 8011188:	41700000 	.word	0x41700000
 801118c:	3fe00000 	.word	0x3fe00000
 8011190:	08012600 	.word	0x08012600
 8011194:	f854 3b04 	ldr.w	r3, [r4], #4
 8011198:	b945      	cbnz	r5, 80111ac <__kernel_rem_pio2+0x344>
 801119a:	b123      	cbz	r3, 80111a6 <__kernel_rem_pio2+0x33e>
 801119c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80111a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80111a4:	2301      	movs	r3, #1
 80111a6:	3201      	adds	r2, #1
 80111a8:	461d      	mov	r5, r3
 80111aa:	e738      	b.n	801101e <__kernel_rem_pio2+0x1b6>
 80111ac:	1acb      	subs	r3, r1, r3
 80111ae:	e7f7      	b.n	80111a0 <__kernel_rem_pio2+0x338>
 80111b0:	f108 32ff 	add.w	r2, r8, #4294967295
 80111b4:	ab0c      	add	r3, sp, #48	@ 0x30
 80111b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80111be:	a90c      	add	r1, sp, #48	@ 0x30
 80111c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80111c4:	e739      	b.n	801103a <__kernel_rem_pio2+0x1d2>
 80111c6:	f108 32ff 	add.w	r2, r8, #4294967295
 80111ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80111cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80111d4:	e7f3      	b.n	80111be <__kernel_rem_pio2+0x356>
 80111d6:	a90c      	add	r1, sp, #48	@ 0x30
 80111d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80111dc:	3b01      	subs	r3, #1
 80111de:	430a      	orrs	r2, r1
 80111e0:	e787      	b.n	80110f2 <__kernel_rem_pio2+0x28a>
 80111e2:	3401      	adds	r4, #1
 80111e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80111e8:	2a00      	cmp	r2, #0
 80111ea:	d0fa      	beq.n	80111e2 <__kernel_rem_pio2+0x37a>
 80111ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80111f2:	eb0d 0503 	add.w	r5, sp, r3
 80111f6:	9b06      	ldr	r3, [sp, #24]
 80111f8:	aa20      	add	r2, sp, #128	@ 0x80
 80111fa:	4443      	add	r3, r8
 80111fc:	f108 0701 	add.w	r7, r8, #1
 8011200:	3d98      	subs	r5, #152	@ 0x98
 8011202:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8011206:	4444      	add	r4, r8
 8011208:	42bc      	cmp	r4, r7
 801120a:	da04      	bge.n	8011216 <__kernel_rem_pio2+0x3ae>
 801120c:	46a0      	mov	r8, r4
 801120e:	e6a2      	b.n	8010f56 <__kernel_rem_pio2+0xee>
 8011210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011212:	2401      	movs	r4, #1
 8011214:	e7e6      	b.n	80111e4 <__kernel_rem_pio2+0x37c>
 8011216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011218:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801121c:	f7ef f982 	bl	8000524 <__aeabi_i2d>
 8011220:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80114e8 <__kernel_rem_pio2+0x680>
 8011224:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011228:	ed8d 7b02 	vstr	d7, [sp, #8]
 801122c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011230:	46b2      	mov	sl, r6
 8011232:	f04f 0800 	mov.w	r8, #0
 8011236:	9b05      	ldr	r3, [sp, #20]
 8011238:	4598      	cmp	r8, r3
 801123a:	dd05      	ble.n	8011248 <__kernel_rem_pio2+0x3e0>
 801123c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011240:	3701      	adds	r7, #1
 8011242:	eca5 7b02 	vstmia	r5!, {d7}
 8011246:	e7df      	b.n	8011208 <__kernel_rem_pio2+0x3a0>
 8011248:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801124c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011250:	f7ef f9d2 	bl	80005f8 <__aeabi_dmul>
 8011254:	4602      	mov	r2, r0
 8011256:	460b      	mov	r3, r1
 8011258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801125c:	f7ef f816 	bl	800028c <__adddf3>
 8011260:	f108 0801 	add.w	r8, r8, #1
 8011264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011268:	e7e5      	b.n	8011236 <__kernel_rem_pio2+0x3ce>
 801126a:	f1cb 0000 	rsb	r0, fp, #0
 801126e:	ec47 6b10 	vmov	d0, r6, r7
 8011272:	f000 f951 	bl	8011518 <scalbn>
 8011276:	ec55 4b10 	vmov	r4, r5, d0
 801127a:	4b9d      	ldr	r3, [pc, #628]	@ (80114f0 <__kernel_rem_pio2+0x688>)
 801127c:	2200      	movs	r2, #0
 801127e:	4620      	mov	r0, r4
 8011280:	4629      	mov	r1, r5
 8011282:	f7ef fc3f 	bl	8000b04 <__aeabi_dcmpge>
 8011286:	b300      	cbz	r0, 80112ca <__kernel_rem_pio2+0x462>
 8011288:	4b9a      	ldr	r3, [pc, #616]	@ (80114f4 <__kernel_rem_pio2+0x68c>)
 801128a:	2200      	movs	r2, #0
 801128c:	4620      	mov	r0, r4
 801128e:	4629      	mov	r1, r5
 8011290:	f7ef f9b2 	bl	80005f8 <__aeabi_dmul>
 8011294:	f7ef fc60 	bl	8000b58 <__aeabi_d2iz>
 8011298:	4606      	mov	r6, r0
 801129a:	f7ef f943 	bl	8000524 <__aeabi_i2d>
 801129e:	4b94      	ldr	r3, [pc, #592]	@ (80114f0 <__kernel_rem_pio2+0x688>)
 80112a0:	2200      	movs	r2, #0
 80112a2:	f7ef f9a9 	bl	80005f8 <__aeabi_dmul>
 80112a6:	460b      	mov	r3, r1
 80112a8:	4602      	mov	r2, r0
 80112aa:	4629      	mov	r1, r5
 80112ac:	4620      	mov	r0, r4
 80112ae:	f7ee ffeb 	bl	8000288 <__aeabi_dsub>
 80112b2:	f7ef fc51 	bl	8000b58 <__aeabi_d2iz>
 80112b6:	ab0c      	add	r3, sp, #48	@ 0x30
 80112b8:	f10b 0b18 	add.w	fp, fp, #24
 80112bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80112c0:	f108 0801 	add.w	r8, r8, #1
 80112c4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80112c8:	e722      	b.n	8011110 <__kernel_rem_pio2+0x2a8>
 80112ca:	4620      	mov	r0, r4
 80112cc:	4629      	mov	r1, r5
 80112ce:	f7ef fc43 	bl	8000b58 <__aeabi_d2iz>
 80112d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80112d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80112d8:	e71a      	b.n	8011110 <__kernel_rem_pio2+0x2a8>
 80112da:	ab0c      	add	r3, sp, #48	@ 0x30
 80112dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80112e0:	f7ef f920 	bl	8000524 <__aeabi_i2d>
 80112e4:	4622      	mov	r2, r4
 80112e6:	462b      	mov	r3, r5
 80112e8:	f7ef f986 	bl	80005f8 <__aeabi_dmul>
 80112ec:	4652      	mov	r2, sl
 80112ee:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80112f2:	465b      	mov	r3, fp
 80112f4:	4620      	mov	r0, r4
 80112f6:	4629      	mov	r1, r5
 80112f8:	f7ef f97e 	bl	80005f8 <__aeabi_dmul>
 80112fc:	3e01      	subs	r6, #1
 80112fe:	4604      	mov	r4, r0
 8011300:	460d      	mov	r5, r1
 8011302:	e718      	b.n	8011136 <__kernel_rem_pio2+0x2ce>
 8011304:	9906      	ldr	r1, [sp, #24]
 8011306:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801130a:	9106      	str	r1, [sp, #24]
 801130c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011310:	f7ef f972 	bl	80005f8 <__aeabi_dmul>
 8011314:	4602      	mov	r2, r0
 8011316:	460b      	mov	r3, r1
 8011318:	4650      	mov	r0, sl
 801131a:	4659      	mov	r1, fp
 801131c:	f7ee ffb6 	bl	800028c <__adddf3>
 8011320:	3601      	adds	r6, #1
 8011322:	4682      	mov	sl, r0
 8011324:	468b      	mov	fp, r1
 8011326:	9b00      	ldr	r3, [sp, #0]
 8011328:	429e      	cmp	r6, r3
 801132a:	dc01      	bgt.n	8011330 <__kernel_rem_pio2+0x4c8>
 801132c:	42b5      	cmp	r5, r6
 801132e:	dae9      	bge.n	8011304 <__kernel_rem_pio2+0x49c>
 8011330:	ab48      	add	r3, sp, #288	@ 0x120
 8011332:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011336:	e9c5 ab00 	strd	sl, fp, [r5]
 801133a:	3c01      	subs	r4, #1
 801133c:	e6ff      	b.n	801113e <__kernel_rem_pio2+0x2d6>
 801133e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011340:	2b02      	cmp	r3, #2
 8011342:	dc0b      	bgt.n	801135c <__kernel_rem_pio2+0x4f4>
 8011344:	2b00      	cmp	r3, #0
 8011346:	dc39      	bgt.n	80113bc <__kernel_rem_pio2+0x554>
 8011348:	d05d      	beq.n	8011406 <__kernel_rem_pio2+0x59e>
 801134a:	9b02      	ldr	r3, [sp, #8]
 801134c:	f003 0007 	and.w	r0, r3, #7
 8011350:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8011354:	ecbd 8b02 	vpop	{d8}
 8011358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801135c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801135e:	2b03      	cmp	r3, #3
 8011360:	d1f3      	bne.n	801134a <__kernel_rem_pio2+0x4e2>
 8011362:	9b05      	ldr	r3, [sp, #20]
 8011364:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011368:	eb0d 0403 	add.w	r4, sp, r3
 801136c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8011370:	4625      	mov	r5, r4
 8011372:	46c2      	mov	sl, r8
 8011374:	f1ba 0f00 	cmp.w	sl, #0
 8011378:	f1a5 0508 	sub.w	r5, r5, #8
 801137c:	dc6b      	bgt.n	8011456 <__kernel_rem_pio2+0x5ee>
 801137e:	4645      	mov	r5, r8
 8011380:	2d01      	cmp	r5, #1
 8011382:	f1a4 0408 	sub.w	r4, r4, #8
 8011386:	f300 8087 	bgt.w	8011498 <__kernel_rem_pio2+0x630>
 801138a:	9c05      	ldr	r4, [sp, #20]
 801138c:	ab48      	add	r3, sp, #288	@ 0x120
 801138e:	441c      	add	r4, r3
 8011390:	2000      	movs	r0, #0
 8011392:	2100      	movs	r1, #0
 8011394:	f1b8 0f01 	cmp.w	r8, #1
 8011398:	f300 809c 	bgt.w	80114d4 <__kernel_rem_pio2+0x66c>
 801139c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80113a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80113a4:	f1b9 0f00 	cmp.w	r9, #0
 80113a8:	f040 80a6 	bne.w	80114f8 <__kernel_rem_pio2+0x690>
 80113ac:	9b04      	ldr	r3, [sp, #16]
 80113ae:	e9c3 7800 	strd	r7, r8, [r3]
 80113b2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80113b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80113ba:	e7c6      	b.n	801134a <__kernel_rem_pio2+0x4e2>
 80113bc:	9d05      	ldr	r5, [sp, #20]
 80113be:	ab48      	add	r3, sp, #288	@ 0x120
 80113c0:	441d      	add	r5, r3
 80113c2:	4644      	mov	r4, r8
 80113c4:	2000      	movs	r0, #0
 80113c6:	2100      	movs	r1, #0
 80113c8:	2c00      	cmp	r4, #0
 80113ca:	da35      	bge.n	8011438 <__kernel_rem_pio2+0x5d0>
 80113cc:	f1b9 0f00 	cmp.w	r9, #0
 80113d0:	d038      	beq.n	8011444 <__kernel_rem_pio2+0x5dc>
 80113d2:	4602      	mov	r2, r0
 80113d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80113d8:	9c04      	ldr	r4, [sp, #16]
 80113da:	e9c4 2300 	strd	r2, r3, [r4]
 80113de:	4602      	mov	r2, r0
 80113e0:	460b      	mov	r3, r1
 80113e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80113e6:	f7ee ff4f 	bl	8000288 <__aeabi_dsub>
 80113ea:	ad4a      	add	r5, sp, #296	@ 0x128
 80113ec:	2401      	movs	r4, #1
 80113ee:	45a0      	cmp	r8, r4
 80113f0:	da2b      	bge.n	801144a <__kernel_rem_pio2+0x5e2>
 80113f2:	f1b9 0f00 	cmp.w	r9, #0
 80113f6:	d002      	beq.n	80113fe <__kernel_rem_pio2+0x596>
 80113f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80113fc:	4619      	mov	r1, r3
 80113fe:	9b04      	ldr	r3, [sp, #16]
 8011400:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011404:	e7a1      	b.n	801134a <__kernel_rem_pio2+0x4e2>
 8011406:	9c05      	ldr	r4, [sp, #20]
 8011408:	ab48      	add	r3, sp, #288	@ 0x120
 801140a:	441c      	add	r4, r3
 801140c:	2000      	movs	r0, #0
 801140e:	2100      	movs	r1, #0
 8011410:	f1b8 0f00 	cmp.w	r8, #0
 8011414:	da09      	bge.n	801142a <__kernel_rem_pio2+0x5c2>
 8011416:	f1b9 0f00 	cmp.w	r9, #0
 801141a:	d002      	beq.n	8011422 <__kernel_rem_pio2+0x5ba>
 801141c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011420:	4619      	mov	r1, r3
 8011422:	9b04      	ldr	r3, [sp, #16]
 8011424:	e9c3 0100 	strd	r0, r1, [r3]
 8011428:	e78f      	b.n	801134a <__kernel_rem_pio2+0x4e2>
 801142a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801142e:	f7ee ff2d 	bl	800028c <__adddf3>
 8011432:	f108 38ff 	add.w	r8, r8, #4294967295
 8011436:	e7eb      	b.n	8011410 <__kernel_rem_pio2+0x5a8>
 8011438:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801143c:	f7ee ff26 	bl	800028c <__adddf3>
 8011440:	3c01      	subs	r4, #1
 8011442:	e7c1      	b.n	80113c8 <__kernel_rem_pio2+0x560>
 8011444:	4602      	mov	r2, r0
 8011446:	460b      	mov	r3, r1
 8011448:	e7c6      	b.n	80113d8 <__kernel_rem_pio2+0x570>
 801144a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801144e:	f7ee ff1d 	bl	800028c <__adddf3>
 8011452:	3401      	adds	r4, #1
 8011454:	e7cb      	b.n	80113ee <__kernel_rem_pio2+0x586>
 8011456:	ed95 7b00 	vldr	d7, [r5]
 801145a:	ed8d 7b00 	vstr	d7, [sp]
 801145e:	ed95 7b02 	vldr	d7, [r5, #8]
 8011462:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011466:	ec53 2b17 	vmov	r2, r3, d7
 801146a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801146e:	f7ee ff0d 	bl	800028c <__adddf3>
 8011472:	4602      	mov	r2, r0
 8011474:	460b      	mov	r3, r1
 8011476:	4606      	mov	r6, r0
 8011478:	460f      	mov	r7, r1
 801147a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801147e:	f7ee ff03 	bl	8000288 <__aeabi_dsub>
 8011482:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011486:	f7ee ff01 	bl	800028c <__adddf3>
 801148a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801148e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8011492:	e9c5 6700 	strd	r6, r7, [r5]
 8011496:	e76d      	b.n	8011374 <__kernel_rem_pio2+0x50c>
 8011498:	ed94 7b00 	vldr	d7, [r4]
 801149c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80114a0:	ec51 0b17 	vmov	r0, r1, d7
 80114a4:	4652      	mov	r2, sl
 80114a6:	465b      	mov	r3, fp
 80114a8:	ed8d 7b00 	vstr	d7, [sp]
 80114ac:	f7ee feee 	bl	800028c <__adddf3>
 80114b0:	4602      	mov	r2, r0
 80114b2:	460b      	mov	r3, r1
 80114b4:	4606      	mov	r6, r0
 80114b6:	460f      	mov	r7, r1
 80114b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114bc:	f7ee fee4 	bl	8000288 <__aeabi_dsub>
 80114c0:	4652      	mov	r2, sl
 80114c2:	465b      	mov	r3, fp
 80114c4:	f7ee fee2 	bl	800028c <__adddf3>
 80114c8:	3d01      	subs	r5, #1
 80114ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80114ce:	e9c4 6700 	strd	r6, r7, [r4]
 80114d2:	e755      	b.n	8011380 <__kernel_rem_pio2+0x518>
 80114d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80114d8:	f7ee fed8 	bl	800028c <__adddf3>
 80114dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80114e0:	e758      	b.n	8011394 <__kernel_rem_pio2+0x52c>
 80114e2:	bf00      	nop
 80114e4:	f3af 8000 	nop.w
	...
 80114f0:	41700000 	.word	0x41700000
 80114f4:	3e700000 	.word	0x3e700000
 80114f8:	9b04      	ldr	r3, [sp, #16]
 80114fa:	9a04      	ldr	r2, [sp, #16]
 80114fc:	601f      	str	r7, [r3, #0]
 80114fe:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8011502:	605c      	str	r4, [r3, #4]
 8011504:	609d      	str	r5, [r3, #8]
 8011506:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801150a:	60d3      	str	r3, [r2, #12]
 801150c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011510:	6110      	str	r0, [r2, #16]
 8011512:	6153      	str	r3, [r2, #20]
 8011514:	e719      	b.n	801134a <__kernel_rem_pio2+0x4e2>
 8011516:	bf00      	nop

08011518 <scalbn>:
 8011518:	b570      	push	{r4, r5, r6, lr}
 801151a:	ec55 4b10 	vmov	r4, r5, d0
 801151e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011522:	4606      	mov	r6, r0
 8011524:	462b      	mov	r3, r5
 8011526:	b991      	cbnz	r1, 801154e <scalbn+0x36>
 8011528:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801152c:	4323      	orrs	r3, r4
 801152e:	d03d      	beq.n	80115ac <scalbn+0x94>
 8011530:	4b35      	ldr	r3, [pc, #212]	@ (8011608 <scalbn+0xf0>)
 8011532:	4620      	mov	r0, r4
 8011534:	4629      	mov	r1, r5
 8011536:	2200      	movs	r2, #0
 8011538:	f7ef f85e 	bl	80005f8 <__aeabi_dmul>
 801153c:	4b33      	ldr	r3, [pc, #204]	@ (801160c <scalbn+0xf4>)
 801153e:	429e      	cmp	r6, r3
 8011540:	4604      	mov	r4, r0
 8011542:	460d      	mov	r5, r1
 8011544:	da0f      	bge.n	8011566 <scalbn+0x4e>
 8011546:	a328      	add	r3, pc, #160	@ (adr r3, 80115e8 <scalbn+0xd0>)
 8011548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154c:	e01e      	b.n	801158c <scalbn+0x74>
 801154e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011552:	4291      	cmp	r1, r2
 8011554:	d10b      	bne.n	801156e <scalbn+0x56>
 8011556:	4622      	mov	r2, r4
 8011558:	4620      	mov	r0, r4
 801155a:	4629      	mov	r1, r5
 801155c:	f7ee fe96 	bl	800028c <__adddf3>
 8011560:	4604      	mov	r4, r0
 8011562:	460d      	mov	r5, r1
 8011564:	e022      	b.n	80115ac <scalbn+0x94>
 8011566:	460b      	mov	r3, r1
 8011568:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801156c:	3936      	subs	r1, #54	@ 0x36
 801156e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011572:	4296      	cmp	r6, r2
 8011574:	dd0d      	ble.n	8011592 <scalbn+0x7a>
 8011576:	2d00      	cmp	r5, #0
 8011578:	a11d      	add	r1, pc, #116	@ (adr r1, 80115f0 <scalbn+0xd8>)
 801157a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801157e:	da02      	bge.n	8011586 <scalbn+0x6e>
 8011580:	a11d      	add	r1, pc, #116	@ (adr r1, 80115f8 <scalbn+0xe0>)
 8011582:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011586:	a31a      	add	r3, pc, #104	@ (adr r3, 80115f0 <scalbn+0xd8>)
 8011588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801158c:	f7ef f834 	bl	80005f8 <__aeabi_dmul>
 8011590:	e7e6      	b.n	8011560 <scalbn+0x48>
 8011592:	1872      	adds	r2, r6, r1
 8011594:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011598:	428a      	cmp	r2, r1
 801159a:	dcec      	bgt.n	8011576 <scalbn+0x5e>
 801159c:	2a00      	cmp	r2, #0
 801159e:	dd08      	ble.n	80115b2 <scalbn+0x9a>
 80115a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80115a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80115a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80115ac:	ec45 4b10 	vmov	d0, r4, r5
 80115b0:	bd70      	pop	{r4, r5, r6, pc}
 80115b2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80115b6:	da08      	bge.n	80115ca <scalbn+0xb2>
 80115b8:	2d00      	cmp	r5, #0
 80115ba:	a10b      	add	r1, pc, #44	@ (adr r1, 80115e8 <scalbn+0xd0>)
 80115bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115c0:	dac1      	bge.n	8011546 <scalbn+0x2e>
 80115c2:	a10f      	add	r1, pc, #60	@ (adr r1, 8011600 <scalbn+0xe8>)
 80115c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115c8:	e7bd      	b.n	8011546 <scalbn+0x2e>
 80115ca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80115ce:	3236      	adds	r2, #54	@ 0x36
 80115d0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80115d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80115d8:	4620      	mov	r0, r4
 80115da:	4b0d      	ldr	r3, [pc, #52]	@ (8011610 <scalbn+0xf8>)
 80115dc:	4629      	mov	r1, r5
 80115de:	2200      	movs	r2, #0
 80115e0:	e7d4      	b.n	801158c <scalbn+0x74>
 80115e2:	bf00      	nop
 80115e4:	f3af 8000 	nop.w
 80115e8:	c2f8f359 	.word	0xc2f8f359
 80115ec:	01a56e1f 	.word	0x01a56e1f
 80115f0:	8800759c 	.word	0x8800759c
 80115f4:	7e37e43c 	.word	0x7e37e43c
 80115f8:	8800759c 	.word	0x8800759c
 80115fc:	fe37e43c 	.word	0xfe37e43c
 8011600:	c2f8f359 	.word	0xc2f8f359
 8011604:	81a56e1f 	.word	0x81a56e1f
 8011608:	43500000 	.word	0x43500000
 801160c:	ffff3cb0 	.word	0xffff3cb0
 8011610:	3c900000 	.word	0x3c900000
 8011614:	00000000 	.word	0x00000000

08011618 <floor>:
 8011618:	ec51 0b10 	vmov	r0, r1, d0
 801161c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011624:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8011628:	2e13      	cmp	r6, #19
 801162a:	460c      	mov	r4, r1
 801162c:	4605      	mov	r5, r0
 801162e:	4680      	mov	r8, r0
 8011630:	dc34      	bgt.n	801169c <floor+0x84>
 8011632:	2e00      	cmp	r6, #0
 8011634:	da17      	bge.n	8011666 <floor+0x4e>
 8011636:	a332      	add	r3, pc, #200	@ (adr r3, 8011700 <floor+0xe8>)
 8011638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801163c:	f7ee fe26 	bl	800028c <__adddf3>
 8011640:	2200      	movs	r2, #0
 8011642:	2300      	movs	r3, #0
 8011644:	f7ef fa68 	bl	8000b18 <__aeabi_dcmpgt>
 8011648:	b150      	cbz	r0, 8011660 <floor+0x48>
 801164a:	2c00      	cmp	r4, #0
 801164c:	da55      	bge.n	80116fa <floor+0xe2>
 801164e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8011652:	432c      	orrs	r4, r5
 8011654:	2500      	movs	r5, #0
 8011656:	42ac      	cmp	r4, r5
 8011658:	4c2b      	ldr	r4, [pc, #172]	@ (8011708 <floor+0xf0>)
 801165a:	bf08      	it	eq
 801165c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8011660:	4621      	mov	r1, r4
 8011662:	4628      	mov	r0, r5
 8011664:	e023      	b.n	80116ae <floor+0x96>
 8011666:	4f29      	ldr	r7, [pc, #164]	@ (801170c <floor+0xf4>)
 8011668:	4137      	asrs	r7, r6
 801166a:	ea01 0307 	and.w	r3, r1, r7
 801166e:	4303      	orrs	r3, r0
 8011670:	d01d      	beq.n	80116ae <floor+0x96>
 8011672:	a323      	add	r3, pc, #140	@ (adr r3, 8011700 <floor+0xe8>)
 8011674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011678:	f7ee fe08 	bl	800028c <__adddf3>
 801167c:	2200      	movs	r2, #0
 801167e:	2300      	movs	r3, #0
 8011680:	f7ef fa4a 	bl	8000b18 <__aeabi_dcmpgt>
 8011684:	2800      	cmp	r0, #0
 8011686:	d0eb      	beq.n	8011660 <floor+0x48>
 8011688:	2c00      	cmp	r4, #0
 801168a:	bfbe      	ittt	lt
 801168c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8011690:	4133      	asrlt	r3, r6
 8011692:	18e4      	addlt	r4, r4, r3
 8011694:	ea24 0407 	bic.w	r4, r4, r7
 8011698:	2500      	movs	r5, #0
 801169a:	e7e1      	b.n	8011660 <floor+0x48>
 801169c:	2e33      	cmp	r6, #51	@ 0x33
 801169e:	dd0a      	ble.n	80116b6 <floor+0x9e>
 80116a0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80116a4:	d103      	bne.n	80116ae <floor+0x96>
 80116a6:	4602      	mov	r2, r0
 80116a8:	460b      	mov	r3, r1
 80116aa:	f7ee fdef 	bl	800028c <__adddf3>
 80116ae:	ec41 0b10 	vmov	d0, r0, r1
 80116b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116b6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80116ba:	f04f 37ff 	mov.w	r7, #4294967295
 80116be:	40df      	lsrs	r7, r3
 80116c0:	4207      	tst	r7, r0
 80116c2:	d0f4      	beq.n	80116ae <floor+0x96>
 80116c4:	a30e      	add	r3, pc, #56	@ (adr r3, 8011700 <floor+0xe8>)
 80116c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ca:	f7ee fddf 	bl	800028c <__adddf3>
 80116ce:	2200      	movs	r2, #0
 80116d0:	2300      	movs	r3, #0
 80116d2:	f7ef fa21 	bl	8000b18 <__aeabi_dcmpgt>
 80116d6:	2800      	cmp	r0, #0
 80116d8:	d0c2      	beq.n	8011660 <floor+0x48>
 80116da:	2c00      	cmp	r4, #0
 80116dc:	da0a      	bge.n	80116f4 <floor+0xdc>
 80116de:	2e14      	cmp	r6, #20
 80116e0:	d101      	bne.n	80116e6 <floor+0xce>
 80116e2:	3401      	adds	r4, #1
 80116e4:	e006      	b.n	80116f4 <floor+0xdc>
 80116e6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80116ea:	2301      	movs	r3, #1
 80116ec:	40b3      	lsls	r3, r6
 80116ee:	441d      	add	r5, r3
 80116f0:	4545      	cmp	r5, r8
 80116f2:	d3f6      	bcc.n	80116e2 <floor+0xca>
 80116f4:	ea25 0507 	bic.w	r5, r5, r7
 80116f8:	e7b2      	b.n	8011660 <floor+0x48>
 80116fa:	2500      	movs	r5, #0
 80116fc:	462c      	mov	r4, r5
 80116fe:	e7af      	b.n	8011660 <floor+0x48>
 8011700:	8800759c 	.word	0x8800759c
 8011704:	7e37e43c 	.word	0x7e37e43c
 8011708:	bff00000 	.word	0xbff00000
 801170c:	000fffff 	.word	0x000fffff

08011710 <_init>:
 8011710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011712:	bf00      	nop
 8011714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011716:	bc08      	pop	{r3}
 8011718:	469e      	mov	lr, r3
 801171a:	4770      	bx	lr

0801171c <_fini>:
 801171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801171e:	bf00      	nop
 8011720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011722:	bc08      	pop	{r3}
 8011724:	469e      	mov	lr, r3
 8011726:	4770      	bx	lr
