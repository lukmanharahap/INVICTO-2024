
R2_Farmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  08012268  08012268  00013268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b30  08012b30  000142c8  2**0
                  CONTENTS
  4 .ARM          00000008  08012b30  08012b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b38  08012b38  000142c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b38  08012b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012b3c  08012b3c  00013b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  08012b40  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000142c8  2**0
                  CONTENTS
 10 .bss          00000570  200002c8  200002c8  000142c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000838  20000838  000142c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000142c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000141c2  00000000  00000000  000142f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cea  00000000  00000000  000284ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  0002b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e56  00000000  00000000  0002c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012af8  00000000  00000000  0002d226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005552  00000000  00000000  0003fd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00045270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006784  00000000  00000000  000452b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0004ba38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012250 	.word	0x08012250

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	08012250 	.word	0x08012250

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <motorDirection>:
        {GPIOD, GPIO_PIN_3, GPIOD, GPIO_PIN_4, TIM_CHANNEL_3, &htim2},		//9
        {GPIOB, GPIO_PIN_1, GPIOB, GPIO_PIN_0, TIM_CHANNEL_4, &htim2}		//10
};

void motorDirection(uint8_t motor, uint8_t direction)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
    Motor *currentMotor = &motors[motor - 1];
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <motorDirection+0x74>)
 8001002:	4413      	add	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
    GPIO_PinState dir1_state;
    GPIO_PinState dir2_state;
    switch (direction)
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d006      	beq.n	800101a <motorDirection+0x36>
 800100c:	2b02      	cmp	r3, #2
 800100e:	d109      	bne.n	8001024 <motorDirection+0x40>
    {
    case forward:
        dir1_state = GPIO_PIN_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_SET;
 8001014:	2301      	movs	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
        break;
 8001018:	e009      	b.n	800102e <motorDirection+0x4a>
    case backward:
        dir1_state = GPIO_PIN_SET;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	73bb      	strb	r3, [r7, #14]
        break;
 8001022:	e004      	b.n	800102e <motorDirection+0x4a>
    default:
        dir1_state = GPIO_PIN_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
        break;
 800102c:	bf00      	nop
    }
    HAL_GPIO_WritePin(currentMotor->dir1_port, currentMotor->dir1_pin, dir1_state);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	4619      	mov	r1, r3
 800103a:	f007 fe4d 	bl	8008cd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(currentMotor->dir2_port, currentMotor->dir2_pin, dir2_state);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	6898      	ldr	r0, [r3, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	899b      	ldrh	r3, [r3, #12]
 8001046:	7bba      	ldrb	r2, [r7, #14]
 8001048:	4619      	mov	r1, r3
 800104a:	f007 fe45 	bl	8008cd8 <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000

0800105c <setMotorSpeed>:

void setMotorSpeed(uint8_t motor, double speed)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	ed87 0b00 	vstr	d0, [r7]
 8001068:	73fb      	strb	r3, [r7, #15]
    Motor *currentMotor = &motors[motor - 1];
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4a33      	ldr	r2, [pc, #204]	@ (8001144 <setMotorSpeed+0xe8>)
 8001078:	4413      	add	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
    if (speed > 0)
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001088:	f7ff fd46 	bl	8000b18 <__aeabi_dcmpgt>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <setMotorSpeed+0x42>
    {
        motorDirection(motor, forward);
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffa4 	bl	8000fe4 <motorDirection>
 800109c:	e01b      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else if (speed < 0)
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010aa:	f7ff fd17 	bl	8000adc <__aeabi_dcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <setMotorSpeed+0x70>
    {
        motorDirection(motor, backward);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2101      	movs	r1, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff93 	bl	8000fe4 <motorDirection>
        speed = -speed;
 80010be:	683c      	ldr	r4, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80010c6:	e9c7 4500 	strd	r4, r5, [r7]
 80010ca:	e004      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else
    {
        motorDirection(motor, stop);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff87 	bl	8000fe4 <motorDirection>
    }
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	7b9b      	ldrb	r3, [r3, #14]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <setMotorSpeed+0x96>
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	681c      	ldr	r4, [r3, #0]
 80010e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010e8:	f7ff fd5e 	bl	8000ba8 <__aeabi_d2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80010f0:	e024      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	7b9b      	ldrb	r3, [r3, #14]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d109      	bne.n	800110e <setMotorSpeed+0xb2>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800110c:	e016      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	7b9b      	ldrb	r3, [r3, #14]
 8001112:	2b08      	cmp	r3, #8
 8001114:	d109      	bne.n	800112a <setMotorSpeed+0xce>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001120:	f7ff fd42 	bl	8000ba8 <__aeabi_d2uiz>
 8001124:	4603      	mov	r3, r0
 8001126:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001128:	e008      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001134:	f7ff fd38 	bl	8000ba8 <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bdb0      	pop	{r4, r5, r7, pc}
 8001144:	20000000 	.word	0x20000000

08001148 <Inverse_Kinematics>:

void Inverse_Kinematics(int Vx, int Vy, int W)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b096      	sub	sp, #88	@ 0x58
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
     double R = 7.6;
 8001154:	f20f 433c 	addw	r3, pc, #1084	@ 0x43c
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

     double M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff f9df 	bl	8000524 <__aeabi_i2d>
 8001166:	f20f 4334 	addw	r3, pc, #1076	@ 0x434
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff fa43 	bl	80005f8 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4614      	mov	r4, r2
 8001178:	461d      	mov	r5, r3
 800117a:	68b8      	ldr	r0, [r7, #8]
 800117c:	f7ff f9d2 	bl	8000524 <__aeabi_i2d>
 8001180:	f20f 4320 	addw	r3, pc, #1056	@ 0x420
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fa36 	bl	80005f8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4620      	mov	r0, r4
 8001192:	4629      	mov	r1, r5
 8001194:	f7ff f87a 	bl	800028c <__adddf3>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4614      	mov	r4, r2
 800119e:	461d      	mov	r5, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff f9bf 	bl	8000524 <__aeabi_i2d>
 80011a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80011aa:	f7ff fa25 	bl	80005f8 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff f867 	bl	8000288 <__aeabi_dsub>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
     double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff f9ae 	bl	8000524 <__aeabi_i2d>
 80011c8:	a3f8      	add	r3, pc, #992	@ (adr r3, 80015ac <Inverse_Kinematics+0x464>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff fa13 	bl	80005f8 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4614      	mov	r4, r2
 80011d8:	461d      	mov	r5, r3
 80011da:	68b8      	ldr	r0, [r7, #8]
 80011dc:	f7ff f9a2 	bl	8000524 <__aeabi_i2d>
 80011e0:	a3ee      	add	r3, pc, #952	@ (adr r3, 800159c <Inverse_Kinematics+0x454>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff fa07 	bl	80005f8 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7ff f84b 	bl	800028c <__adddf3>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff f990 	bl	8000524 <__aeabi_i2d>
 8001204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001208:	f7ff f9f6 	bl	80005f8 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4620      	mov	r0, r4
 8001212:	4629      	mov	r1, r5
 8001214:	f7ff f838 	bl	8000288 <__aeabi_dsub>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
     double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff f97f 	bl	8000524 <__aeabi_i2d>
 8001226:	a3e3      	add	r3, pc, #908	@ (adr r3, 80015b4 <Inverse_Kinematics+0x46c>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f9e4 	bl	80005f8 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4614      	mov	r4, r2
 8001236:	461d      	mov	r5, r3
 8001238:	68b8      	ldr	r0, [r7, #8]
 800123a:	f7ff f973 	bl	8000524 <__aeabi_i2d>
 800123e:	a3df      	add	r3, pc, #892	@ (adr r3, 80015bc <Inverse_Kinematics+0x474>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f9d8 	bl	80005f8 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	f7ff f81c 	bl	800028c <__adddf3>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4614      	mov	r4, r2
 800125a:	461d      	mov	r5, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff f961 	bl	8000524 <__aeabi_i2d>
 8001262:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001266:	f7ff f9c7 	bl	80005f8 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7ff f809 	bl	8000288 <__aeabi_dsub>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
     double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff f950 	bl	8000524 <__aeabi_i2d>
 8001284:	a3cf      	add	r3, pc, #828	@ (adr r3, 80015c4 <Inverse_Kinematics+0x47c>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9b5 	bl	80005f8 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4614      	mov	r4, r2
 8001294:	461d      	mov	r5, r3
 8001296:	68b8      	ldr	r0, [r7, #8]
 8001298:	f7ff f944 	bl	8000524 <__aeabi_i2d>
 800129c:	a3cb      	add	r3, pc, #812	@ (adr r3, 80015cc <Inverse_Kinematics+0x484>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f9a9 	bl	80005f8 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4620      	mov	r0, r4
 80012ac:	4629      	mov	r1, r5
 80012ae:	f7fe ffed 	bl	800028c <__adddf3>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff f932 	bl	8000524 <__aeabi_i2d>
 80012c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80012c4:	f7ff f998 	bl	80005f8 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7fe ffda 	bl	8000288 <__aeabi_dsub>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

     double V1 = (M1 > 550 || M1 < -550) ? fmin(fmax(M1, -2600), 2600) : ((M1 < -0) ? -550 : ((M1 > 0) ? 550 : 0));
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4bab      	ldr	r3, [pc, #684]	@ (8001590 <Inverse_Kinematics+0x448>)
 80012e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80012e6:	f7ff fc17 	bl	8000b18 <__aeabi_dcmpgt>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d109      	bne.n	8001304 <Inverse_Kinematics+0x1bc>
 80012f0:	a39d      	add	r3, pc, #628	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80012fa:	f7ff fbef 	bl	8000adc <__aeabi_dcmplt>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d016      	beq.n	8001332 <Inverse_Kinematics+0x1ea>
 8001304:	ed9f 1b9a 	vldr	d1, [pc, #616]	@ 8001570 <Inverse_Kinematics+0x428>
 8001308:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 800130c:	f00f faf7 	bl	80108fe <fmax>
 8001310:	eeb0 7a40 	vmov.f32	s14, s0
 8001314:	eef0 7a60 	vmov.f32	s15, s1
 8001318:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 8001578 <Inverse_Kinematics+0x430>
 800131c:	eeb0 0a47 	vmov.f32	s0, s14
 8001320:	eef0 0a67 	vmov.f32	s1, s15
 8001324:	f00f fb15 	bl	8010952 <fmin>
 8001328:	eeb0 7a40 	vmov.f32	s14, s0
 800132c:	eef0 7a60 	vmov.f32	s15, s1
 8001330:	e01d      	b.n	800136e <Inverse_Kinematics+0x226>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800133e:	f7ff fbcd 	bl	8000adc <__aeabi_dcmplt>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <Inverse_Kinematics+0x206>
 8001348:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8001568 <Inverse_Kinematics+0x420>
 800134c:	e00f      	b.n	800136e <Inverse_Kinematics+0x226>
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800135a:	f7ff fbdd 	bl	8000b18 <__aeabi_dcmpgt>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <Inverse_Kinematics+0x222>
 8001364:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8001580 <Inverse_Kinematics+0x438>
 8001368:	e001      	b.n	800136e <Inverse_Kinematics+0x226>
 800136a:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8001588 <Inverse_Kinematics+0x440>
 800136e:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
     double V2 = (M2 > 550 || M2 < -550) ? fmin(fmax(M2, -2600), 2600) : ((M2 < -0) ? -550 : ((M2 > 0) ? 550 : 0));
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b86      	ldr	r3, [pc, #536]	@ (8001590 <Inverse_Kinematics+0x448>)
 8001378:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800137c:	f7ff fbcc 	bl	8000b18 <__aeabi_dcmpgt>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <Inverse_Kinematics+0x252>
 8001386:	a378      	add	r3, pc, #480	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001390:	f7ff fba4 	bl	8000adc <__aeabi_dcmplt>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d016      	beq.n	80013c8 <Inverse_Kinematics+0x280>
 800139a:	ed9f 1b75 	vldr	d1, [pc, #468]	@ 8001570 <Inverse_Kinematics+0x428>
 800139e:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80013a2:	f00f faac 	bl	80108fe <fmax>
 80013a6:	eeb0 7a40 	vmov.f32	s14, s0
 80013aa:	eef0 7a60 	vmov.f32	s15, s1
 80013ae:	ed9f 1b72 	vldr	d1, [pc, #456]	@ 8001578 <Inverse_Kinematics+0x430>
 80013b2:	eeb0 0a47 	vmov.f32	s0, s14
 80013b6:	eef0 0a67 	vmov.f32	s1, s15
 80013ba:	f00f faca 	bl	8010952 <fmin>
 80013be:	eeb0 7a40 	vmov.f32	s14, s0
 80013c2:	eef0 7a60 	vmov.f32	s15, s1
 80013c6:	e01d      	b.n	8001404 <Inverse_Kinematics+0x2bc>
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80013d4:	f7ff fb82 	bl	8000adc <__aeabi_dcmplt>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <Inverse_Kinematics+0x29c>
 80013de:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8001568 <Inverse_Kinematics+0x420>
 80013e2:	e00f      	b.n	8001404 <Inverse_Kinematics+0x2bc>
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80013f0:	f7ff fb92 	bl	8000b18 <__aeabi_dcmpgt>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <Inverse_Kinematics+0x2b8>
 80013fa:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001580 <Inverse_Kinematics+0x438>
 80013fe:	e001      	b.n	8001404 <Inverse_Kinematics+0x2bc>
 8001400:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001588 <Inverse_Kinematics+0x440>
 8001404:	ed87 7b08 	vstr	d7, [r7, #32]
     double V3 = (M3 > 550 || M3 < -550) ? fmin(fmax(M3, -2600), 2600) : ((M3 < -0) ? -550 : ((M3 > 0) ? 550 : 0));
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b60      	ldr	r3, [pc, #384]	@ (8001590 <Inverse_Kinematics+0x448>)
 800140e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001412:	f7ff fb81 	bl	8000b18 <__aeabi_dcmpgt>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d109      	bne.n	8001430 <Inverse_Kinematics+0x2e8>
 800141c:	a352      	add	r3, pc, #328	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001426:	f7ff fb59 	bl	8000adc <__aeabi_dcmplt>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d016      	beq.n	800145e <Inverse_Kinematics+0x316>
 8001430:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001570 <Inverse_Kinematics+0x428>
 8001434:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001438:	f00f fa61 	bl	80108fe <fmax>
 800143c:	eeb0 7a40 	vmov.f32	s14, s0
 8001440:	eef0 7a60 	vmov.f32	s15, s1
 8001444:	ed9f 1b4c 	vldr	d1, [pc, #304]	@ 8001578 <Inverse_Kinematics+0x430>
 8001448:	eeb0 0a47 	vmov.f32	s0, s14
 800144c:	eef0 0a67 	vmov.f32	s1, s15
 8001450:	f00f fa7f 	bl	8010952 <fmin>
 8001454:	eeb0 7a40 	vmov.f32	s14, s0
 8001458:	eef0 7a60 	vmov.f32	s15, s1
 800145c:	e01d      	b.n	800149a <Inverse_Kinematics+0x352>
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800146a:	f7ff fb37 	bl	8000adc <__aeabi_dcmplt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <Inverse_Kinematics+0x332>
 8001474:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8001568 <Inverse_Kinematics+0x420>
 8001478:	e00f      	b.n	800149a <Inverse_Kinematics+0x352>
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001486:	f7ff fb47 	bl	8000b18 <__aeabi_dcmpgt>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <Inverse_Kinematics+0x34e>
 8001490:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8001580 <Inverse_Kinematics+0x438>
 8001494:	e001      	b.n	800149a <Inverse_Kinematics+0x352>
 8001496:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8001588 <Inverse_Kinematics+0x440>
 800149a:	ed87 7b06 	vstr	d7, [r7, #24]
     double V4 = (M4 > 550 || M4 < -550) ? fmin(fmax(M4, -2600), 2600) : ((M4 < -0) ? -550 : ((M4 > 0) ? 550 : 0));
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001590 <Inverse_Kinematics+0x448>)
 80014a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80014a8:	f7ff fb36 	bl	8000b18 <__aeabi_dcmpgt>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <Inverse_Kinematics+0x37e>
 80014b2:	a32d      	add	r3, pc, #180	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80014bc:	f7ff fb0e 	bl	8000adc <__aeabi_dcmplt>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d016      	beq.n	80014f4 <Inverse_Kinematics+0x3ac>
 80014c6:	ed9f 1b2a 	vldr	d1, [pc, #168]	@ 8001570 <Inverse_Kinematics+0x428>
 80014ca:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80014ce:	f00f fa16 	bl	80108fe <fmax>
 80014d2:	eeb0 7a40 	vmov.f32	s14, s0
 80014d6:	eef0 7a60 	vmov.f32	s15, s1
 80014da:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8001578 <Inverse_Kinematics+0x430>
 80014de:	eeb0 0a47 	vmov.f32	s0, s14
 80014e2:	eef0 0a67 	vmov.f32	s1, s15
 80014e6:	f00f fa34 	bl	8010952 <fmin>
 80014ea:	eeb0 7a40 	vmov.f32	s14, s0
 80014ee:	eef0 7a60 	vmov.f32	s15, s1
 80014f2:	e01d      	b.n	8001530 <Inverse_Kinematics+0x3e8>
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001500:	f7ff faec 	bl	8000adc <__aeabi_dcmplt>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <Inverse_Kinematics+0x3c8>
 800150a:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8001568 <Inverse_Kinematics+0x420>
 800150e:	e00f      	b.n	8001530 <Inverse_Kinematics+0x3e8>
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800151c:	f7ff fafc 	bl	8000b18 <__aeabi_dcmpgt>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <Inverse_Kinematics+0x3e4>
 8001526:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001580 <Inverse_Kinematics+0x438>
 800152a:	e001      	b.n	8001530 <Inverse_Kinematics+0x3e8>
 800152c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001588 <Inverse_Kinematics+0x440>
 8001530:	ed87 7b04 	vstr	d7, [r7, #16]

     setMotorSpeed(6, V1);
 8001534:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001538:	2006      	movs	r0, #6
 800153a:	f7ff fd8f 	bl	800105c <setMotorSpeed>
     setMotorSpeed(8, V2);
 800153e:	ed97 0b08 	vldr	d0, [r7, #32]
 8001542:	2008      	movs	r0, #8
 8001544:	f7ff fd8a 	bl	800105c <setMotorSpeed>
     setMotorSpeed(4, V3);
 8001548:	ed97 0b06 	vldr	d0, [r7, #24]
 800154c:	2004      	movs	r0, #4
 800154e:	f7ff fd85 	bl	800105c <setMotorSpeed>
     setMotorSpeed(5, V4);
 8001552:	ed97 0b04 	vldr	d0, [r7, #16]
 8001556:	2005      	movs	r0, #5
 8001558:	f7ff fd80 	bl	800105c <setMotorSpeed>
}
 800155c:	bf00      	nop
 800155e:	3758      	adds	r7, #88	@ 0x58
 8001560:	46bd      	mov	sp, r7
 8001562:	bdb0      	pop	{r4, r5, r7, pc}
 8001564:	f3af 8000 	nop.w
 8001568:	00000000 	.word	0x00000000
 800156c:	c0813000 	.word	0xc0813000
 8001570:	00000000 	.word	0x00000000
 8001574:	c0a45000 	.word	0xc0a45000
 8001578:	00000000 	.word	0x00000000
 800157c:	40a45000 	.word	0x40a45000
 8001580:	00000000 	.word	0x00000000
 8001584:	40813000 	.word	0x40813000
	...
 8001590:	40813000 	.word	0x40813000
 8001594:	66666666 	.word	0x66666666
 8001598:	401e6666 	.word	0x401e6666
 800159c:	667f3bcc 	.word	0x667f3bcc
 80015a0:	bfe6a09e 	.word	0xbfe6a09e
 80015a4:	667f3bcd 	.word	0x667f3bcd
 80015a8:	3fe6a09e 	.word	0x3fe6a09e
 80015ac:	667f3bcd 	.word	0x667f3bcd
 80015b0:	bfe6a09e 	.word	0xbfe6a09e
 80015b4:	667f3bcc 	.word	0x667f3bcc
 80015b8:	3fe6a09e 	.word	0x3fe6a09e
 80015bc:	667f3bce 	.word	0x667f3bce
 80015c0:	bfe6a09e 	.word	0xbfe6a09e
 80015c4:	667f3bce 	.word	0x667f3bce
 80015c8:	3fe6a09e 	.word	0x3fe6a09e
 80015cc:	667f3bcb 	.word	0x667f3bcb
 80015d0:	3fe6a09e 	.word	0x3fe6a09e
 80015d4:	00000000 	.word	0x00000000

080015d8 <putar>:
     setMotorSpeed(4, V3);
     setMotorSpeed(5, V4);
}

void putar(int Vx, int Vy, int W)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b096      	sub	sp, #88	@ 0x58
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
     double R = 7.6;
 80015e4:	f20f 4338 	addw	r3, pc, #1080	@ 0x438
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

     double M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f7fe ff97 	bl	8000524 <__aeabi_i2d>
 80015f6:	f20f 4330 	addw	r3, pc, #1072	@ 0x430
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7fe fffb 	bl	80005f8 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4614      	mov	r4, r2
 8001608:	461d      	mov	r5, r3
 800160a:	68b8      	ldr	r0, [r7, #8]
 800160c:	f7fe ff8a 	bl	8000524 <__aeabi_i2d>
 8001610:	f20f 431c 	addw	r3, pc, #1052	@ 0x41c
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f7fe ffee 	bl	80005f8 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4620      	mov	r0, r4
 8001622:	4629      	mov	r1, r5
 8001624:	f7fe fe32 	bl	800028c <__adddf3>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4614      	mov	r4, r2
 800162e:	461d      	mov	r5, r3
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7fe ff77 	bl	8000524 <__aeabi_i2d>
 8001636:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800163a:	f7fe ffdd 	bl	80005f8 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4620      	mov	r0, r4
 8001644:	4629      	mov	r1, r5
 8001646:	f7fe fe1f 	bl	8000288 <__aeabi_dsub>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
     double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f7fe ff66 	bl	8000524 <__aeabi_i2d>
 8001658:	a3f7      	add	r3, pc, #988	@ (adr r3, 8001a38 <putar+0x460>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7fe ffcb 	bl	80005f8 <__aeabi_dmul>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4614      	mov	r4, r2
 8001668:	461d      	mov	r5, r3
 800166a:	68b8      	ldr	r0, [r7, #8]
 800166c:	f7fe ff5a 	bl	8000524 <__aeabi_i2d>
 8001670:	a3ed      	add	r3, pc, #948	@ (adr r3, 8001a28 <putar+0x450>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7fe ffbf 	bl	80005f8 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4620      	mov	r0, r4
 8001680:	4629      	mov	r1, r5
 8001682:	f7fe fe03 	bl	800028c <__adddf3>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4614      	mov	r4, r2
 800168c:	461d      	mov	r5, r3
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7fe ff48 	bl	8000524 <__aeabi_i2d>
 8001694:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001698:	f7fe ffae 	bl	80005f8 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4620      	mov	r0, r4
 80016a2:	4629      	mov	r1, r5
 80016a4:	f7fe fdf0 	bl	8000288 <__aeabi_dsub>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
     double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7fe ff37 	bl	8000524 <__aeabi_i2d>
 80016b6:	a3e2      	add	r3, pc, #904	@ (adr r3, 8001a40 <putar+0x468>)
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	f7fe ff9c 	bl	80005f8 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4614      	mov	r4, r2
 80016c6:	461d      	mov	r5, r3
 80016c8:	68b8      	ldr	r0, [r7, #8]
 80016ca:	f7fe ff2b 	bl	8000524 <__aeabi_i2d>
 80016ce:	a3de      	add	r3, pc, #888	@ (adr r3, 8001a48 <putar+0x470>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe ff90 	bl	80005f8 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7fe fdd4 	bl	800028c <__adddf3>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4614      	mov	r4, r2
 80016ea:	461d      	mov	r5, r3
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7fe ff19 	bl	8000524 <__aeabi_i2d>
 80016f2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80016f6:	f7fe ff7f 	bl	80005f8 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4620      	mov	r0, r4
 8001700:	4629      	mov	r1, r5
 8001702:	f7fe fdc1 	bl	8000288 <__aeabi_dsub>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
     double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f7fe ff08 	bl	8000524 <__aeabi_i2d>
 8001714:	a3ce      	add	r3, pc, #824	@ (adr r3, 8001a50 <putar+0x478>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe ff6d 	bl	80005f8 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4614      	mov	r4, r2
 8001724:	461d      	mov	r5, r3
 8001726:	68b8      	ldr	r0, [r7, #8]
 8001728:	f7fe fefc 	bl	8000524 <__aeabi_i2d>
 800172c:	a3ca      	add	r3, pc, #808	@ (adr r3, 8001a58 <putar+0x480>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7fe ff61 	bl	80005f8 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7fe fda5 	bl	800028c <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4614      	mov	r4, r2
 8001748:	461d      	mov	r5, r3
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7fe feea 	bl	8000524 <__aeabi_i2d>
 8001750:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001754:	f7fe ff50 	bl	80005f8 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7fe fd92 	bl	8000288 <__aeabi_dsub>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

     double V1 = (M1 > 450 || M1 < -450) ? fmin(fmax(M1, -2600), 2600) : ((M1 < -0) ? -450 : ((M1 > 0) ? 450 : 0));
 800176c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8001a10 <putar+0x438>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001776:	f7ff f9cf 	bl	8000b18 <__aeabi_dcmpgt>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d109      	bne.n	8001794 <putar+0x1bc>
 8001780:	a3a1      	add	r3, pc, #644	@ (adr r3, 8001a08 <putar+0x430>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800178a:	f7ff f9a7 	bl	8000adc <__aeabi_dcmplt>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d016      	beq.n	80017c2 <putar+0x1ea>
 8001794:	ed9f 1b98 	vldr	d1, [pc, #608]	@ 80019f8 <putar+0x420>
 8001798:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 800179c:	f00f f8af 	bl	80108fe <fmax>
 80017a0:	eeb0 7a40 	vmov.f32	s14, s0
 80017a4:	eef0 7a60 	vmov.f32	s15, s1
 80017a8:	ed9f 1b95 	vldr	d1, [pc, #596]	@ 8001a00 <putar+0x428>
 80017ac:	eeb0 0a47 	vmov.f32	s0, s14
 80017b0:	eef0 0a67 	vmov.f32	s1, s15
 80017b4:	f00f f8cd 	bl	8010952 <fmin>
 80017b8:	eeb0 7a40 	vmov.f32	s14, s0
 80017bc:	eef0 7a60 	vmov.f32	s15, s1
 80017c0:	e01d      	b.n	80017fe <putar+0x226>
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80017ce:	f7ff f985 	bl	8000adc <__aeabi_dcmplt>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <putar+0x206>
 80017d8:	ed9f 7b8b 	vldr	d7, [pc, #556]	@ 8001a08 <putar+0x430>
 80017dc:	e00f      	b.n	80017fe <putar+0x226>
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80017ea:	f7ff f995 	bl	8000b18 <__aeabi_dcmpgt>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <putar+0x222>
 80017f4:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8001a10 <putar+0x438>
 80017f8:	e001      	b.n	80017fe <putar+0x226>
 80017fa:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8001a18 <putar+0x440>
 80017fe:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
     double V2 = (M2 > 450 || M2 < -450) ? fmin(fmax(M2, -2600), 2600) : ((M2 < -0) ? -450 : ((M2 > 0) ? 450 : 0));
 8001802:	a383      	add	r3, pc, #524	@ (adr r3, 8001a10 <putar+0x438>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800180c:	f7ff f984 	bl	8000b18 <__aeabi_dcmpgt>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <putar+0x252>
 8001816:	a37c      	add	r3, pc, #496	@ (adr r3, 8001a08 <putar+0x430>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001820:	f7ff f95c 	bl	8000adc <__aeabi_dcmplt>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d016      	beq.n	8001858 <putar+0x280>
 800182a:	ed9f 1b73 	vldr	d1, [pc, #460]	@ 80019f8 <putar+0x420>
 800182e:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8001832:	f00f f864 	bl	80108fe <fmax>
 8001836:	eeb0 7a40 	vmov.f32	s14, s0
 800183a:	eef0 7a60 	vmov.f32	s15, s1
 800183e:	ed9f 1b70 	vldr	d1, [pc, #448]	@ 8001a00 <putar+0x428>
 8001842:	eeb0 0a47 	vmov.f32	s0, s14
 8001846:	eef0 0a67 	vmov.f32	s1, s15
 800184a:	f00f f882 	bl	8010952 <fmin>
 800184e:	eeb0 7a40 	vmov.f32	s14, s0
 8001852:	eef0 7a60 	vmov.f32	s15, s1
 8001856:	e01d      	b.n	8001894 <putar+0x2bc>
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001864:	f7ff f93a 	bl	8000adc <__aeabi_dcmplt>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <putar+0x29c>
 800186e:	ed9f 7b66 	vldr	d7, [pc, #408]	@ 8001a08 <putar+0x430>
 8001872:	e00f      	b.n	8001894 <putar+0x2bc>
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001880:	f7ff f94a 	bl	8000b18 <__aeabi_dcmpgt>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d002      	beq.n	8001890 <putar+0x2b8>
 800188a:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001a10 <putar+0x438>
 800188e:	e001      	b.n	8001894 <putar+0x2bc>
 8001890:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001a18 <putar+0x440>
 8001894:	ed87 7b08 	vstr	d7, [r7, #32]
     double V3 = (M3 > 450 || M3 < -450) ? fmin(fmax(M3, -2600), 2600) : ((M3 < -0) ? -450 : ((M3 > 0) ? 450 : 0));
 8001898:	a35d      	add	r3, pc, #372	@ (adr r3, 8001a10 <putar+0x438>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80018a2:	f7ff f939 	bl	8000b18 <__aeabi_dcmpgt>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d109      	bne.n	80018c0 <putar+0x2e8>
 80018ac:	a356      	add	r3, pc, #344	@ (adr r3, 8001a08 <putar+0x430>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80018b6:	f7ff f911 	bl	8000adc <__aeabi_dcmplt>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d016      	beq.n	80018ee <putar+0x316>
 80018c0:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 80019f8 <putar+0x420>
 80018c4:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80018c8:	f00f f819 	bl	80108fe <fmax>
 80018cc:	eeb0 7a40 	vmov.f32	s14, s0
 80018d0:	eef0 7a60 	vmov.f32	s15, s1
 80018d4:	ed9f 1b4a 	vldr	d1, [pc, #296]	@ 8001a00 <putar+0x428>
 80018d8:	eeb0 0a47 	vmov.f32	s0, s14
 80018dc:	eef0 0a67 	vmov.f32	s1, s15
 80018e0:	f00f f837 	bl	8010952 <fmin>
 80018e4:	eeb0 7a40 	vmov.f32	s14, s0
 80018e8:	eef0 7a60 	vmov.f32	s15, s1
 80018ec:	e01d      	b.n	800192a <putar+0x352>
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80018fa:	f7ff f8ef 	bl	8000adc <__aeabi_dcmplt>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <putar+0x332>
 8001904:	ed9f 7b40 	vldr	d7, [pc, #256]	@ 8001a08 <putar+0x430>
 8001908:	e00f      	b.n	800192a <putar+0x352>
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001916:	f7ff f8ff 	bl	8000b18 <__aeabi_dcmpgt>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <putar+0x34e>
 8001920:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8001a10 <putar+0x438>
 8001924:	e001      	b.n	800192a <putar+0x352>
 8001926:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8001a18 <putar+0x440>
 800192a:	ed87 7b06 	vstr	d7, [r7, #24]
     double V4 = (M4 > 450 || M4 < -450) ? fmin(fmax(M4, -2600), 2600) : ((M4 < -0) ? -450 : ((M4 > 0) ? 450 : 0));
 800192e:	a338      	add	r3, pc, #224	@ (adr r3, 8001a10 <putar+0x438>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001938:	f7ff f8ee 	bl	8000b18 <__aeabi_dcmpgt>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <putar+0x37e>
 8001942:	a331      	add	r3, pc, #196	@ (adr r3, 8001a08 <putar+0x430>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800194c:	f7ff f8c6 	bl	8000adc <__aeabi_dcmplt>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d016      	beq.n	8001984 <putar+0x3ac>
 8001956:	ed9f 1b28 	vldr	d1, [pc, #160]	@ 80019f8 <putar+0x420>
 800195a:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800195e:	f00e ffce 	bl	80108fe <fmax>
 8001962:	eeb0 7a40 	vmov.f32	s14, s0
 8001966:	eef0 7a60 	vmov.f32	s15, s1
 800196a:	ed9f 1b25 	vldr	d1, [pc, #148]	@ 8001a00 <putar+0x428>
 800196e:	eeb0 0a47 	vmov.f32	s0, s14
 8001972:	eef0 0a67 	vmov.f32	s1, s15
 8001976:	f00e ffec 	bl	8010952 <fmin>
 800197a:	eeb0 7a40 	vmov.f32	s14, s0
 800197e:	eef0 7a60 	vmov.f32	s15, s1
 8001982:	e01d      	b.n	80019c0 <putar+0x3e8>
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001990:	f7ff f8a4 	bl	8000adc <__aeabi_dcmplt>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <putar+0x3c8>
 800199a:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8001a08 <putar+0x430>
 800199e:	e00f      	b.n	80019c0 <putar+0x3e8>
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80019ac:	f7ff f8b4 	bl	8000b18 <__aeabi_dcmpgt>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <putar+0x3e4>
 80019b6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001a10 <putar+0x438>
 80019ba:	e001      	b.n	80019c0 <putar+0x3e8>
 80019bc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001a18 <putar+0x440>
 80019c0:	ed87 7b04 	vstr	d7, [r7, #16]

     setMotorSpeed(6, V1);
 80019c4:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80019c8:	2006      	movs	r0, #6
 80019ca:	f7ff fb47 	bl	800105c <setMotorSpeed>
     setMotorSpeed(8, V2);
 80019ce:	ed97 0b08 	vldr	d0, [r7, #32]
 80019d2:	2008      	movs	r0, #8
 80019d4:	f7ff fb42 	bl	800105c <setMotorSpeed>
     setMotorSpeed(4, V3);
 80019d8:	ed97 0b06 	vldr	d0, [r7, #24]
 80019dc:	2004      	movs	r0, #4
 80019de:	f7ff fb3d 	bl	800105c <setMotorSpeed>
     setMotorSpeed(5, V4);
 80019e2:	ed97 0b04 	vldr	d0, [r7, #16]
 80019e6:	2005      	movs	r0, #5
 80019e8:	f7ff fb38 	bl	800105c <setMotorSpeed>
}
 80019ec:	bf00      	nop
 80019ee:	3758      	adds	r7, #88	@ 0x58
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bdb0      	pop	{r4, r5, r7, pc}
 80019f4:	f3af 8000 	nop.w
 80019f8:	00000000 	.word	0x00000000
 80019fc:	c0a45000 	.word	0xc0a45000
 8001a00:	00000000 	.word	0x00000000
 8001a04:	40a45000 	.word	0x40a45000
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	c07c2000 	.word	0xc07c2000
 8001a10:	00000000 	.word	0x00000000
 8001a14:	407c2000 	.word	0x407c2000
	...
 8001a20:	66666666 	.word	0x66666666
 8001a24:	401e6666 	.word	0x401e6666
 8001a28:	667f3bcc 	.word	0x667f3bcc
 8001a2c:	bfe6a09e 	.word	0xbfe6a09e
 8001a30:	667f3bcd 	.word	0x667f3bcd
 8001a34:	3fe6a09e 	.word	0x3fe6a09e
 8001a38:	667f3bcd 	.word	0x667f3bcd
 8001a3c:	bfe6a09e 	.word	0xbfe6a09e
 8001a40:	667f3bcc 	.word	0x667f3bcc
 8001a44:	3fe6a09e 	.word	0x3fe6a09e
 8001a48:	667f3bce 	.word	0x667f3bce
 8001a4c:	bfe6a09e 	.word	0xbfe6a09e
 8001a50:	667f3bce 	.word	0x667f3bce
 8001a54:	3fe6a09e 	.word	0x3fe6a09e
 8001a58:	667f3bcb 	.word	0x667f3bcb
 8001a5c:	3fe6a09e 	.word	0x3fe6a09e

08001a60 <start>:

void start(int Vx, int Vy, int W, uint8_t battery)
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b096      	sub	sp, #88	@ 0x58
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	70fb      	strb	r3, [r7, #3]
    double R = 7.6;
 8001a6e:	f60f 43e4 	addw	r3, pc, #3300	@ 0xce4
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double M1, M2, M3, M4;

    switch (battery)
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	2b0a      	cmp	r3, #10
 8001a80:	f200 850d 	bhi.w	800249e <start+0xa3e>
 8001a84:	a201      	add	r2, pc, #4	@ (adr r2, 8001a8c <start+0x2c>)
 8001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8a:	bf00      	nop
 8001a8c:	08001ab9 	.word	0x08001ab9
 8001a90:	08001c6d 	.word	0x08001c6d
 8001a94:	08001e1f 	.word	0x08001e1f
 8001a98:	08001fbd 	.word	0x08001fbd
 8001a9c:	0800216f 	.word	0x0800216f
 8001aa0:	0800249f 	.word	0x0800249f
 8001aa4:	0800249f 	.word	0x0800249f
 8001aa8:	0800249f 	.word	0x0800249f
 8001aac:	0800249f 	.word	0x0800249f
 8001ab0:	0800249f 	.word	0x0800249f
 8001ab4:	08002321 	.word	0x08002321
    {
		case 1: // 24.3 < x < 24.6
			M1 = (-sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W);
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f7fe fd33 	bl	8000524 <__aeabi_i2d>
 8001abe:	f60f 439c 	addw	r3, pc, #3228	@ 0xc9c
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fd97 	bl	80005f8 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4614      	mov	r4, r2
 8001ad0:	461d      	mov	r5, r3
 8001ad2:	68b8      	ldr	r0, [r7, #8]
 8001ad4:	f7fe fd26 	bl	8000524 <__aeabi_i2d>
 8001ad8:	f60f 4388 	addw	r3, pc, #3208	@ 0xc88
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe fd8a 	bl	80005f8 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4620      	mov	r0, r4
 8001aea:	4629      	mov	r1, r5
 8001aec:	f7fe fbce 	bl	800028c <__adddf3>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4614      	mov	r4, r2
 8001af6:	461d      	mov	r5, r3
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7fe fd13 	bl	8000524 <__aeabi_i2d>
 8001afe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b02:	f7fe fd79 	bl	80005f8 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fbbb 	bl	8000288 <__aeabi_dsub>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
			M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.1;
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7fe fd02 	bl	8000524 <__aeabi_i2d>
 8001b20:	f60f 4348 	addw	r3, pc, #3144	@ 0xc48
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fd66 	bl	80005f8 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4614      	mov	r4, r2
 8001b32:	461d      	mov	r5, r3
 8001b34:	68b8      	ldr	r0, [r7, #8]
 8001b36:	f7fe fcf5 	bl	8000524 <__aeabi_i2d>
 8001b3a:	f60f 4320 	addw	r3, pc, #3104	@ 0xc20
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	f7fe fd59 	bl	80005f8 <__aeabi_dmul>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	f7fe fb9d 	bl	800028c <__adddf3>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4614      	mov	r4, r2
 8001b58:	461d      	mov	r5, r3
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7fe fce2 	bl	8000524 <__aeabi_i2d>
 8001b60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b64:	f7fe fd48 	bl	80005f8 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fb8a 	bl	8000288 <__aeabi_dsub>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f60f 33f4 	addw	r3, pc, #3060	@ 0xbf4
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fd38 	bl	80005f8 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
			M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.1;
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7fe fcc7 	bl	8000524 <__aeabi_i2d>
 8001b96:	f60f 33e4 	addw	r3, pc, #3044	@ 0xbe4
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	f7fe fd2b 	bl	80005f8 <__aeabi_dmul>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4614      	mov	r4, r2
 8001ba8:	461d      	mov	r5, r3
 8001baa:	68b8      	ldr	r0, [r7, #8]
 8001bac:	f7fe fcba 	bl	8000524 <__aeabi_i2d>
 8001bb0:	f60f 33d0 	addw	r3, pc, #3024	@ 0xbd0
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	f7fe fd1e 	bl	80005f8 <__aeabi_dmul>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	f7fe fb62 	bl	800028c <__adddf3>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4614      	mov	r4, r2
 8001bce:	461d      	mov	r5, r3
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7fe fca7 	bl	8000524 <__aeabi_i2d>
 8001bd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bda:	f7fe fd0d 	bl	80005f8 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4620      	mov	r0, r4
 8001be4:	4629      	mov	r1, r5
 8001be6:	f7fe fb4f 	bl	8000288 <__aeabi_dsub>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f60f 3380 	addw	r3, pc, #2944	@ 0xb80
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fcfd 	bl	80005f8 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
			M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W);
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7fe fc8c 	bl	8000524 <__aeabi_i2d>
 8001c0c:	f60f 337c 	addw	r3, pc, #2940	@ 0xb7c
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fcf0 	bl	80005f8 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4614      	mov	r4, r2
 8001c1e:	461d      	mov	r5, r3
 8001c20:	68b8      	ldr	r0, [r7, #8]
 8001c22:	f7fe fc7f 	bl	8000524 <__aeabi_i2d>
 8001c26:	f60f 336c 	addw	r3, pc, #2924	@ 0xb6c
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	f7fe fce3 	bl	80005f8 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4620      	mov	r0, r4
 8001c38:	4629      	mov	r1, r5
 8001c3a:	f7fe fb27 	bl	800028c <__adddf3>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4614      	mov	r4, r2
 8001c44:	461d      	mov	r5, r3
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7fe fc6c 	bl	8000524 <__aeabi_i2d>
 8001c4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c50:	f7fe fcd2 	bl	80005f8 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4620      	mov	r0, r4
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	f7fe fb14 	bl	8000288 <__aeabi_dsub>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			break;
 8001c68:	f000 bc19 	b.w	800249e <start+0xa3e>
    	case 2: // > 24.3
		    M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f7fe fc59 	bl	8000524 <__aeabi_i2d>
 8001c72:	f60f 23e8 	addw	r3, pc, #2792	@ 0xae8
 8001c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7a:	f7fe fcbd 	bl	80005f8 <__aeabi_dmul>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4614      	mov	r4, r2
 8001c84:	461d      	mov	r5, r3
 8001c86:	68b8      	ldr	r0, [r7, #8]
 8001c88:	f7fe fc4c 	bl	8000524 <__aeabi_i2d>
 8001c8c:	f60f 23d4 	addw	r3, pc, #2772	@ 0xad4
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fcb0 	bl	80005f8 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	f7fe faf4 	bl	800028c <__adddf3>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4614      	mov	r4, r2
 8001caa:	461d      	mov	r5, r3
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7fe fc39 	bl	8000524 <__aeabi_i2d>
 8001cb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001cb6:	f7fe fc9f 	bl	80005f8 <__aeabi_dmul>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	f7fe fae1 	bl	8000288 <__aeabi_dsub>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		    M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.04;
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7fe fc28 	bl	8000524 <__aeabi_i2d>
 8001cd4:	f60f 2394 	addw	r3, pc, #2708	@ 0xa94
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fc8c 	bl	80005f8 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	461d      	mov	r5, r3
 8001ce8:	68b8      	ldr	r0, [r7, #8]
 8001cea:	f7fe fc1b 	bl	8000524 <__aeabi_i2d>
 8001cee:	f60f 236c 	addw	r3, pc, #2668	@ 0xa6c
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fc7f 	bl	80005f8 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4620      	mov	r0, r4
 8001d00:	4629      	mov	r1, r5
 8001d02:	f7fe fac3 	bl	800028c <__adddf3>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4614      	mov	r4, r2
 8001d0c:	461d      	mov	r5, r3
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7fe fc08 	bl	8000524 <__aeabi_i2d>
 8001d14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d18:	f7fe fc6e 	bl	80005f8 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4620      	mov	r0, r4
 8001d22:	4629      	mov	r1, r5
 8001d24:	f7fe fab0 	bl	8000288 <__aeabi_dsub>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f60f 2368 	addw	r3, pc, #2664	@ 0xa68
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	f7fe fc5e 	bl	80005f8 <__aeabi_dmul>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		    M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.04;
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f7fe fbed 	bl	8000524 <__aeabi_i2d>
 8001d4a:	f60f 2330 	addw	r3, pc, #2608	@ 0xa30
 8001d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d52:	f7fe fc51 	bl	80005f8 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4614      	mov	r4, r2
 8001d5c:	461d      	mov	r5, r3
 8001d5e:	68b8      	ldr	r0, [r7, #8]
 8001d60:	f7fe fbe0 	bl	8000524 <__aeabi_i2d>
 8001d64:	f60f 231c 	addw	r3, pc, #2588	@ 0xa1c
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	f7fe fc44 	bl	80005f8 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4620      	mov	r0, r4
 8001d76:	4629      	mov	r1, r5
 8001d78:	f7fe fa88 	bl	800028c <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4614      	mov	r4, r2
 8001d82:	461d      	mov	r5, r3
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7fe fbcd 	bl	8000524 <__aeabi_i2d>
 8001d8a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d8e:	f7fe fc33 	bl	80005f8 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4620      	mov	r0, r4
 8001d98:	4629      	mov	r1, r5
 8001d9a:	f7fe fa75 	bl	8000288 <__aeabi_dsub>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f60f 13f4 	addw	r3, pc, #2548	@ 0x9f4
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fc23 	bl	80005f8 <__aeabi_dmul>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		    M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7fe fbb2 	bl	8000524 <__aeabi_i2d>
 8001dc0:	f60f 13c8 	addw	r3, pc, #2504	@ 0x9c8
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	f7fe fc16 	bl	80005f8 <__aeabi_dmul>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4614      	mov	r4, r2
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	68b8      	ldr	r0, [r7, #8]
 8001dd6:	f7fe fba5 	bl	8000524 <__aeabi_i2d>
 8001dda:	f60f 13b8 	addw	r3, pc, #2488	@ 0x9b8
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	f7fe fc09 	bl	80005f8 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4620      	mov	r0, r4
 8001dec:	4629      	mov	r1, r5
 8001dee:	f7fe fa4d 	bl	800028c <__adddf3>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4614      	mov	r4, r2
 8001df8:	461d      	mov	r5, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7fe fb92 	bl	8000524 <__aeabi_i2d>
 8001e00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e04:	f7fe fbf8 	bl	80005f8 <__aeabi_dmul>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	4629      	mov	r1, r5
 8001e10:	f7fe fa3a 	bl	8000288 <__aeabi_dsub>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    		break;
 8001e1c:	e33f      	b.n	800249e <start+0xa3e>
		case 3: // 23.8 < x < 24.3
		    M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7fe fb80 	bl	8000524 <__aeabi_i2d>
 8001e24:	f60f 1334 	addw	r3, pc, #2356	@ 0x934
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	f7fe fbe4 	bl	80005f8 <__aeabi_dmul>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4614      	mov	r4, r2
 8001e36:	461d      	mov	r5, r3
 8001e38:	68b8      	ldr	r0, [r7, #8]
 8001e3a:	f7fe fb73 	bl	8000524 <__aeabi_i2d>
 8001e3e:	f60f 1324 	addw	r3, pc, #2340	@ 0x924
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	f7fe fbd7 	bl	80005f8 <__aeabi_dmul>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4620      	mov	r0, r4
 8001e50:	4629      	mov	r1, r5
 8001e52:	f7fe fa1b 	bl	800028c <__adddf3>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4614      	mov	r4, r2
 8001e5c:	461d      	mov	r5, r3
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe fb60 	bl	8000524 <__aeabi_i2d>
 8001e64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e68:	f7fe fbc6 	bl	80005f8 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4620      	mov	r0, r4
 8001e72:	4629      	mov	r1, r5
 8001e74:	f7fe fa08 	bl	8000288 <__aeabi_dsub>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		    M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.062;
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7fe fb4f 	bl	8000524 <__aeabi_i2d>
 8001e86:	f60f 03e4 	addw	r3, pc, #2276	@ 0x8e4
 8001e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8e:	f7fe fbb3 	bl	80005f8 <__aeabi_dmul>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4614      	mov	r4, r2
 8001e98:	461d      	mov	r5, r3
 8001e9a:	68b8      	ldr	r0, [r7, #8]
 8001e9c:	f7fe fb42 	bl	8000524 <__aeabi_i2d>
 8001ea0:	f60f 03b8 	addw	r3, pc, #2232	@ 0x8b8
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	f7fe fba6 	bl	80005f8 <__aeabi_dmul>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	4629      	mov	r1, r5
 8001eb4:	f7fe f9ea 	bl	800028c <__adddf3>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4614      	mov	r4, r2
 8001ebe:	461d      	mov	r5, r3
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7fe fb2f 	bl	8000524 <__aeabi_i2d>
 8001ec6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001eca:	f7fe fb95 	bl	80005f8 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	4629      	mov	r1, r5
 8001ed6:	f7fe f9d7 	bl	8000288 <__aeabi_dsub>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f60f 03c0 	addw	r3, pc, #2240	@ 0x8c0
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe fb85 	bl	80005f8 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		    M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W);
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f7fe fb14 	bl	8000524 <__aeabi_i2d>
 8001efc:	f60f 037c 	addw	r3, pc, #2172	@ 0x87c
 8001f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f04:	f7fe fb78 	bl	80005f8 <__aeabi_dmul>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4614      	mov	r4, r2
 8001f0e:	461d      	mov	r5, r3
 8001f10:	68b8      	ldr	r0, [r7, #8]
 8001f12:	f7fe fb07 	bl	8000524 <__aeabi_i2d>
 8001f16:	f60f 036c 	addw	r3, pc, #2156	@ 0x86c
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fb6b 	bl	80005f8 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4620      	mov	r0, r4
 8001f28:	4629      	mov	r1, r5
 8001f2a:	f7fe f9af 	bl	800028c <__adddf3>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4614      	mov	r4, r2
 8001f34:	461d      	mov	r5, r3
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe faf4 	bl	8000524 <__aeabi_i2d>
 8001f3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001f40:	f7fe fb5a 	bl	80005f8 <__aeabi_dmul>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4620      	mov	r0, r4
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	f7fe f99c 	bl	8000288 <__aeabi_dsub>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		    M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f7fe fae3 	bl	8000524 <__aeabi_i2d>
 8001f5e:	f60f 032c 	addw	r3, pc, #2092	@ 0x82c
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	f7fe fb47 	bl	80005f8 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4614      	mov	r4, r2
 8001f70:	461d      	mov	r5, r3
 8001f72:	68b8      	ldr	r0, [r7, #8]
 8001f74:	f7fe fad6 	bl	8000524 <__aeabi_i2d>
 8001f78:	f60f 0318 	addw	r3, pc, #2072	@ 0x818
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	f7fe fb3a 	bl	80005f8 <__aeabi_dmul>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4620      	mov	r0, r4
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	f7fe f97e 	bl	800028c <__adddf3>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4614      	mov	r4, r2
 8001f96:	461d      	mov	r5, r3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7fe fac3 	bl	8000524 <__aeabi_i2d>
 8001f9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001fa2:	f7fe fb29 	bl	80005f8 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4620      	mov	r0, r4
 8001fac:	4629      	mov	r1, r5
 8001fae:	f7fe f96b 	bl	8000288 <__aeabi_dsub>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			break;
 8001fba:	e270      	b.n	800249e <start+0xa3e>
		case 4: // 23.4 < x < 23.8
		    M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7fe fab1 	bl	8000524 <__aeabi_i2d>
 8001fc2:	f20f 7398 	addw	r3, pc, #1944	@ 0x798
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	f7fe fb15 	bl	80005f8 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4614      	mov	r4, r2
 8001fd4:	461d      	mov	r5, r3
 8001fd6:	68b8      	ldr	r0, [r7, #8]
 8001fd8:	f7fe faa4 	bl	8000524 <__aeabi_i2d>
 8001fdc:	f20f 7384 	addw	r3, pc, #1924	@ 0x784
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	f7fe fb08 	bl	80005f8 <__aeabi_dmul>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4620      	mov	r0, r4
 8001fee:	4629      	mov	r1, r5
 8001ff0:	f7fe f94c 	bl	800028c <__adddf3>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4614      	mov	r4, r2
 8001ffa:	461d      	mov	r5, r3
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7fe fa91 	bl	8000524 <__aeabi_i2d>
 8002002:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002006:	f7fe faf7 	bl	80005f8 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4620      	mov	r0, r4
 8002010:	4629      	mov	r1, r5
 8002012:	f7fe f939 	bl	8000288 <__aeabi_dsub>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		    M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.06;
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f7fe fa80 	bl	8000524 <__aeabi_i2d>
 8002024:	f20f 7344 	addw	r3, pc, #1860	@ 0x744
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	f7fe fae4 	bl	80005f8 <__aeabi_dmul>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4614      	mov	r4, r2
 8002036:	461d      	mov	r5, r3
 8002038:	68b8      	ldr	r0, [r7, #8]
 800203a:	f7fe fa73 	bl	8000524 <__aeabi_i2d>
 800203e:	f20f 731c 	addw	r3, pc, #1820	@ 0x71c
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe fad7 	bl	80005f8 <__aeabi_dmul>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4620      	mov	r0, r4
 8002050:	4629      	mov	r1, r5
 8002052:	f7fe f91b 	bl	800028c <__adddf3>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4614      	mov	r4, r2
 800205c:	461d      	mov	r5, r3
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe fa60 	bl	8000524 <__aeabi_i2d>
 8002064:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002068:	f7fe fac6 	bl	80005f8 <__aeabi_dmul>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4620      	mov	r0, r4
 8002072:	4629      	mov	r1, r5
 8002074:	f7fe f908 	bl	8000288 <__aeabi_dsub>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f20f 7328 	addw	r3, pc, #1832	@ 0x728
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f7fe fab6 	bl	80005f8 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		    M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.03;
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f7fe fa45 	bl	8000524 <__aeabi_i2d>
 800209a:	f20f 63e0 	addw	r3, pc, #1760	@ 0x6e0
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe faa9 	bl	80005f8 <__aeabi_dmul>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4614      	mov	r4, r2
 80020ac:	461d      	mov	r5, r3
 80020ae:	68b8      	ldr	r0, [r7, #8]
 80020b0:	f7fe fa38 	bl	8000524 <__aeabi_i2d>
 80020b4:	f20f 63cc 	addw	r3, pc, #1740	@ 0x6cc
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe fa9c 	bl	80005f8 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4620      	mov	r0, r4
 80020c6:	4629      	mov	r1, r5
 80020c8:	f7fe f8e0 	bl	800028c <__adddf3>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4614      	mov	r4, r2
 80020d2:	461d      	mov	r5, r3
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7fe fa25 	bl	8000524 <__aeabi_i2d>
 80020da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80020de:	f7fe fa8b 	bl	80005f8 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4620      	mov	r0, r4
 80020e8:	4629      	mov	r1, r5
 80020ea:	f7fe f8cd 	bl	8000288 <__aeabi_dsub>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	f20f 63bc 	addw	r3, pc, #1724	@ 0x6bc
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fa7b 	bl	80005f8 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		    M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7fe fa0a 	bl	8000524 <__aeabi_i2d>
 8002110:	f20f 6378 	addw	r3, pc, #1656	@ 0x678
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	f7fe fa6e 	bl	80005f8 <__aeabi_dmul>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4614      	mov	r4, r2
 8002122:	461d      	mov	r5, r3
 8002124:	68b8      	ldr	r0, [r7, #8]
 8002126:	f7fe f9fd 	bl	8000524 <__aeabi_i2d>
 800212a:	f20f 6368 	addw	r3, pc, #1640	@ 0x668
 800212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002132:	f7fe fa61 	bl	80005f8 <__aeabi_dmul>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4620      	mov	r0, r4
 800213c:	4629      	mov	r1, r5
 800213e:	f7fe f8a5 	bl	800028c <__adddf3>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4614      	mov	r4, r2
 8002148:	461d      	mov	r5, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe f9ea 	bl	8000524 <__aeabi_i2d>
 8002150:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002154:	f7fe fa50 	bl	80005f8 <__aeabi_dmul>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4620      	mov	r0, r4
 800215e:	4629      	mov	r1, r5
 8002160:	f7fe f892 	bl	8000288 <__aeabi_dsub>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		    break;
 800216c:	e197      	b.n	800249e <start+0xa3e>
		case 5: // 23.5 < x < 23.8
		    M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f7fe f9d8 	bl	8000524 <__aeabi_i2d>
 8002174:	f20f 53e4 	addw	r3, pc, #1508	@ 0x5e4
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	f7fe fa3c 	bl	80005f8 <__aeabi_dmul>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4614      	mov	r4, r2
 8002186:	461d      	mov	r5, r3
 8002188:	68b8      	ldr	r0, [r7, #8]
 800218a:	f7fe f9cb 	bl	8000524 <__aeabi_i2d>
 800218e:	f20f 53d4 	addw	r3, pc, #1492	@ 0x5d4
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	f7fe fa2f 	bl	80005f8 <__aeabi_dmul>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4620      	mov	r0, r4
 80021a0:	4629      	mov	r1, r5
 80021a2:	f7fe f873 	bl	800028c <__adddf3>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4614      	mov	r4, r2
 80021ac:	461d      	mov	r5, r3
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe f9b8 	bl	8000524 <__aeabi_i2d>
 80021b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80021b8:	f7fe fa1e 	bl	80005f8 <__aeabi_dmul>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4620      	mov	r0, r4
 80021c2:	4629      	mov	r1, r5
 80021c4:	f7fe f860 	bl	8000288 <__aeabi_dsub>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		    M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.02;
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7fe f9a7 	bl	8000524 <__aeabi_i2d>
 80021d6:	f20f 5394 	addw	r3, pc, #1428	@ 0x594
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	f7fe fa0b 	bl	80005f8 <__aeabi_dmul>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4614      	mov	r4, r2
 80021e8:	461d      	mov	r5, r3
 80021ea:	68b8      	ldr	r0, [r7, #8]
 80021ec:	f7fe f99a 	bl	8000524 <__aeabi_i2d>
 80021f0:	f20f 5368 	addw	r3, pc, #1384	@ 0x568
 80021f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f8:	f7fe f9fe 	bl	80005f8 <__aeabi_dmul>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4620      	mov	r0, r4
 8002202:	4629      	mov	r1, r5
 8002204:	f7fe f842 	bl	800028c <__adddf3>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4614      	mov	r4, r2
 800220e:	461d      	mov	r5, r3
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7fe f987 	bl	8000524 <__aeabi_i2d>
 8002216:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800221a:	f7fe f9ed 	bl	80005f8 <__aeabi_dmul>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4620      	mov	r0, r4
 8002224:	4629      	mov	r1, r5
 8002226:	f7fe f82f 	bl	8000288 <__aeabi_dsub>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	f20f 5388 	addw	r3, pc, #1416	@ 0x588
 8002236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223a:	f7fe f9dd 	bl	80005f8 <__aeabi_dmul>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		    M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.04;
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f7fe f96c 	bl	8000524 <__aeabi_i2d>
 800224c:	f20f 532c 	addw	r3, pc, #1324	@ 0x52c
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fe f9d0 	bl	80005f8 <__aeabi_dmul>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4614      	mov	r4, r2
 800225e:	461d      	mov	r5, r3
 8002260:	68b8      	ldr	r0, [r7, #8]
 8002262:	f7fe f95f 	bl	8000524 <__aeabi_i2d>
 8002266:	f20f 531c 	addw	r3, pc, #1308	@ 0x51c
 800226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226e:	f7fe f9c3 	bl	80005f8 <__aeabi_dmul>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4620      	mov	r0, r4
 8002278:	4629      	mov	r1, r5
 800227a:	f7fe f807 	bl	800028c <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4614      	mov	r4, r2
 8002284:	461d      	mov	r5, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe f94c 	bl	8000524 <__aeabi_i2d>
 800228c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002290:	f7fe f9b2 	bl	80005f8 <__aeabi_dmul>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4620      	mov	r0, r4
 800229a:	4629      	mov	r1, r5
 800229c:	f7fd fff4 	bl	8000288 <__aeabi_dsub>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	f20f 43f0 	addw	r3, pc, #1264	@ 0x4f0
 80022ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b0:	f7fe f9a2 	bl	80005f8 <__aeabi_dmul>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		    M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f7fe f931 	bl	8000524 <__aeabi_i2d>
 80022c2:	f20f 43c8 	addw	r3, pc, #1224	@ 0x4c8
 80022c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ca:	f7fe f995 	bl	80005f8 <__aeabi_dmul>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4614      	mov	r4, r2
 80022d4:	461d      	mov	r5, r3
 80022d6:	68b8      	ldr	r0, [r7, #8]
 80022d8:	f7fe f924 	bl	8000524 <__aeabi_i2d>
 80022dc:	f20f 43b4 	addw	r3, pc, #1204	@ 0x4b4
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	f7fe f988 	bl	80005f8 <__aeabi_dmul>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4620      	mov	r0, r4
 80022ee:	4629      	mov	r1, r5
 80022f0:	f7fd ffcc 	bl	800028c <__adddf3>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4614      	mov	r4, r2
 80022fa:	461d      	mov	r5, r3
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7fe f911 	bl	8000524 <__aeabi_i2d>
 8002302:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002306:	f7fe f977 	bl	80005f8 <__aeabi_dmul>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4620      	mov	r0, r4
 8002310:	4629      	mov	r1, r5
 8002312:	f7fd ffb9 	bl	8000288 <__aeabi_dsub>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		    break;
 800231e:	e0be      	b.n	800249e <start+0xa3e>
		case 11:
			M1 = (-sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W);
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7fe f8ff 	bl	8000524 <__aeabi_i2d>
 8002326:	f20f 4334 	addw	r3, pc, #1076	@ 0x434
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f963 	bl	80005f8 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4614      	mov	r4, r2
 8002338:	461d      	mov	r5, r3
 800233a:	68b8      	ldr	r0, [r7, #8]
 800233c:	f7fe f8f2 	bl	8000524 <__aeabi_i2d>
 8002340:	f20f 4320 	addw	r3, pc, #1056	@ 0x420
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	f7fe f956 	bl	80005f8 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4620      	mov	r0, r4
 8002352:	4629      	mov	r1, r5
 8002354:	f7fd ff9a 	bl	800028c <__adddf3>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4614      	mov	r4, r2
 800235e:	461d      	mov	r5, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7fe f8df 	bl	8000524 <__aeabi_i2d>
 8002366:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800236a:	f7fe f945 	bl	80005f8 <__aeabi_dmul>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4620      	mov	r0, r4
 8002374:	4629      	mov	r1, r5
 8002376:	f7fd ff87 	bl	8000288 <__aeabi_dsub>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
			M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W);
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7fe f8ce 	bl	8000524 <__aeabi_i2d>
 8002388:	a3f8      	add	r3, pc, #992	@ (adr r3, 800276c <start+0xd0c>)
 800238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238e:	f7fe f933 	bl	80005f8 <__aeabi_dmul>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4614      	mov	r4, r2
 8002398:	461d      	mov	r5, r3
 800239a:	68b8      	ldr	r0, [r7, #8]
 800239c:	f7fe f8c2 	bl	8000524 <__aeabi_i2d>
 80023a0:	a3ee      	add	r3, pc, #952	@ (adr r3, 800275c <start+0xcfc>)
 80023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a6:	f7fe f927 	bl	80005f8 <__aeabi_dmul>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4620      	mov	r0, r4
 80023b0:	4629      	mov	r1, r5
 80023b2:	f7fd ff6b 	bl	800028c <__adddf3>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4614      	mov	r4, r2
 80023bc:	461d      	mov	r5, r3
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe f8b0 	bl	8000524 <__aeabi_i2d>
 80023c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80023c8:	f7fe f916 	bl	80005f8 <__aeabi_dmul>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4620      	mov	r0, r4
 80023d2:	4629      	mov	r1, r5
 80023d4:	f7fd ff58 	bl	8000288 <__aeabi_dsub>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
			M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W);
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f7fe f89f 	bl	8000524 <__aeabi_i2d>
 80023e6:	a3e5      	add	r3, pc, #916	@ (adr r3, 800277c <start+0xd1c>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	f7fe f904 	bl	80005f8 <__aeabi_dmul>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4614      	mov	r4, r2
 80023f6:	461d      	mov	r5, r3
 80023f8:	68b8      	ldr	r0, [r7, #8]
 80023fa:	f7fe f893 	bl	8000524 <__aeabi_i2d>
 80023fe:	a3e1      	add	r3, pc, #900	@ (adr r3, 8002784 <start+0xd24>)
 8002400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002404:	f7fe f8f8 	bl	80005f8 <__aeabi_dmul>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4620      	mov	r0, r4
 800240e:	4629      	mov	r1, r5
 8002410:	f7fd ff3c 	bl	800028c <__adddf3>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4614      	mov	r4, r2
 800241a:	461d      	mov	r5, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7fe f881 	bl	8000524 <__aeabi_i2d>
 8002422:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002426:	f7fe f8e7 	bl	80005f8 <__aeabi_dmul>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4620      	mov	r0, r4
 8002430:	4629      	mov	r1, r5
 8002432:	f7fd ff29 	bl	8000288 <__aeabi_dsub>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
			M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W);
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f7fe f870 	bl	8000524 <__aeabi_i2d>
 8002444:	a3d1      	add	r3, pc, #836	@ (adr r3, 800278c <start+0xd2c>)
 8002446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244a:	f7fe f8d5 	bl	80005f8 <__aeabi_dmul>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4614      	mov	r4, r2
 8002454:	461d      	mov	r5, r3
 8002456:	68b8      	ldr	r0, [r7, #8]
 8002458:	f7fe f864 	bl	8000524 <__aeabi_i2d>
 800245c:	a3cd      	add	r3, pc, #820	@ (adr r3, 8002794 <start+0xd34>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	f7fe f8c9 	bl	80005f8 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4620      	mov	r0, r4
 800246c:	4629      	mov	r1, r5
 800246e:	f7fd ff0d 	bl	800028c <__adddf3>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4614      	mov	r4, r2
 8002478:	461d      	mov	r5, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7fe f852 	bl	8000524 <__aeabi_i2d>
 8002480:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002484:	f7fe f8b8 	bl	80005f8 <__aeabi_dmul>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4620      	mov	r0, r4
 800248e:	4629      	mov	r1, r5
 8002490:	f7fd fefa 	bl	8000288 <__aeabi_dsub>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
			break;
 800249c:	bf00      	nop
	}

    double V1 = (M1 > 500 || M1 < -500) ? fmin(fmax(M1, -2600), 2600) : ((M1 < -0) ? -500 : ((M1 > 0) ? 500 : 0));
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	4bab      	ldr	r3, [pc, #684]	@ (8002750 <start+0xcf0>)
 80024a4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80024a8:	f7fe fb36 	bl	8000b18 <__aeabi_dcmpgt>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <start+0xa66>
 80024b2:	a39d      	add	r3, pc, #628	@ (adr r3, 8002728 <start+0xcc8>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80024bc:	f7fe fb0e 	bl	8000adc <__aeabi_dcmplt>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d016      	beq.n	80024f4 <start+0xa94>
 80024c6:	ed9f 1b9a 	vldr	d1, [pc, #616]	@ 8002730 <start+0xcd0>
 80024ca:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 80024ce:	f00e fa16 	bl	80108fe <fmax>
 80024d2:	eeb0 7a40 	vmov.f32	s14, s0
 80024d6:	eef0 7a60 	vmov.f32	s15, s1
 80024da:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 8002738 <start+0xcd8>
 80024de:	eeb0 0a47 	vmov.f32	s0, s14
 80024e2:	eef0 0a67 	vmov.f32	s1, s15
 80024e6:	f00e fa34 	bl	8010952 <fmin>
 80024ea:	eeb0 7a40 	vmov.f32	s14, s0
 80024ee:	eef0 7a60 	vmov.f32	s15, s1
 80024f2:	e01d      	b.n	8002530 <start+0xad0>
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002500:	f7fe faec 	bl	8000adc <__aeabi_dcmplt>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <start+0xab0>
 800250a:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8002728 <start+0xcc8>
 800250e:	e00f      	b.n	8002530 <start+0xad0>
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800251c:	f7fe fafc 	bl	8000b18 <__aeabi_dcmpgt>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <start+0xacc>
 8002526:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8002740 <start+0xce0>
 800252a:	e001      	b.n	8002530 <start+0xad0>
 800252c:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8002748 <start+0xce8>
 8002530:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    double V2 = (M2 > 500 || M2 < -500) ? fmin(fmax(M2, -2600), 2600) : ((M2 < -0) ? -500 : ((M2 > 0) ? 500 : 0));
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	4b85      	ldr	r3, [pc, #532]	@ (8002750 <start+0xcf0>)
 800253a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800253e:	f7fe faeb 	bl	8000b18 <__aeabi_dcmpgt>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <start+0xafc>
 8002548:	a377      	add	r3, pc, #476	@ (adr r3, 8002728 <start+0xcc8>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002552:	f7fe fac3 	bl	8000adc <__aeabi_dcmplt>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d016      	beq.n	800258a <start+0xb2a>
 800255c:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 8002730 <start+0xcd0>
 8002560:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8002564:	f00e f9cb 	bl	80108fe <fmax>
 8002568:	eeb0 7a40 	vmov.f32	s14, s0
 800256c:	eef0 7a60 	vmov.f32	s15, s1
 8002570:	ed9f 1b71 	vldr	d1, [pc, #452]	@ 8002738 <start+0xcd8>
 8002574:	eeb0 0a47 	vmov.f32	s0, s14
 8002578:	eef0 0a67 	vmov.f32	s1, s15
 800257c:	f00e f9e9 	bl	8010952 <fmin>
 8002580:	eeb0 7a40 	vmov.f32	s14, s0
 8002584:	eef0 7a60 	vmov.f32	s15, s1
 8002588:	e01d      	b.n	80025c6 <start+0xb66>
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002596:	f7fe faa1 	bl	8000adc <__aeabi_dcmplt>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <start+0xb46>
 80025a0:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8002728 <start+0xcc8>
 80025a4:	e00f      	b.n	80025c6 <start+0xb66>
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80025b2:	f7fe fab1 	bl	8000b18 <__aeabi_dcmpgt>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <start+0xb62>
 80025bc:	ed9f 7b60 	vldr	d7, [pc, #384]	@ 8002740 <start+0xce0>
 80025c0:	e001      	b.n	80025c6 <start+0xb66>
 80025c2:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8002748 <start+0xce8>
 80025c6:	ed87 7b08 	vstr	d7, [r7, #32]
    double V3 = (M3 > 500 || M3 < -500) ? fmin(fmax(M3, -2600), 2600) : ((M3 < -0) ? -500 : ((M3 > 0) ? 500 : 0));
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	4b60      	ldr	r3, [pc, #384]	@ (8002750 <start+0xcf0>)
 80025d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80025d4:	f7fe faa0 	bl	8000b18 <__aeabi_dcmpgt>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <start+0xb92>
 80025de:	a352      	add	r3, pc, #328	@ (adr r3, 8002728 <start+0xcc8>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80025e8:	f7fe fa78 	bl	8000adc <__aeabi_dcmplt>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <start+0xbc0>
 80025f2:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8002730 <start+0xcd0>
 80025f6:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80025fa:	f00e f980 	bl	80108fe <fmax>
 80025fe:	eeb0 7a40 	vmov.f32	s14, s0
 8002602:	eef0 7a60 	vmov.f32	s15, s1
 8002606:	ed9f 1b4c 	vldr	d1, [pc, #304]	@ 8002738 <start+0xcd8>
 800260a:	eeb0 0a47 	vmov.f32	s0, s14
 800260e:	eef0 0a67 	vmov.f32	s1, s15
 8002612:	f00e f99e 	bl	8010952 <fmin>
 8002616:	eeb0 7a40 	vmov.f32	s14, s0
 800261a:	eef0 7a60 	vmov.f32	s15, s1
 800261e:	e01d      	b.n	800265c <start+0xbfc>
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800262c:	f7fe fa56 	bl	8000adc <__aeabi_dcmplt>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <start+0xbdc>
 8002636:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8002728 <start+0xcc8>
 800263a:	e00f      	b.n	800265c <start+0xbfc>
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002648:	f7fe fa66 	bl	8000b18 <__aeabi_dcmpgt>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <start+0xbf8>
 8002652:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8002740 <start+0xce0>
 8002656:	e001      	b.n	800265c <start+0xbfc>
 8002658:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8002748 <start+0xce8>
 800265c:	ed87 7b06 	vstr	d7, [r7, #24]
    double V4 = (M4 > 500 || M4 < -500) ? fmin(fmax(M4, -2600), 2600) : ((M4 < -0) ? -500 : ((M4 > 0) ? 500 : 0));
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	4b3a      	ldr	r3, [pc, #232]	@ (8002750 <start+0xcf0>)
 8002666:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800266a:	f7fe fa55 	bl	8000b18 <__aeabi_dcmpgt>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d109      	bne.n	8002688 <start+0xc28>
 8002674:	a32c      	add	r3, pc, #176	@ (adr r3, 8002728 <start+0xcc8>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800267e:	f7fe fa2d 	bl	8000adc <__aeabi_dcmplt>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d016      	beq.n	80026b6 <start+0xc56>
 8002688:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8002730 <start+0xcd0>
 800268c:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8002690:	f00e f935 	bl	80108fe <fmax>
 8002694:	eeb0 7a40 	vmov.f32	s14, s0
 8002698:	eef0 7a60 	vmov.f32	s15, s1
 800269c:	ed9f 1b26 	vldr	d1, [pc, #152]	@ 8002738 <start+0xcd8>
 80026a0:	eeb0 0a47 	vmov.f32	s0, s14
 80026a4:	eef0 0a67 	vmov.f32	s1, s15
 80026a8:	f00e f953 	bl	8010952 <fmin>
 80026ac:	eeb0 7a40 	vmov.f32	s14, s0
 80026b0:	eef0 7a60 	vmov.f32	s15, s1
 80026b4:	e01d      	b.n	80026f2 <start+0xc92>
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80026c2:	f7fe fa0b 	bl	8000adc <__aeabi_dcmplt>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <start+0xc72>
 80026cc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8002728 <start+0xcc8>
 80026d0:	e00f      	b.n	80026f2 <start+0xc92>
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80026de:	f7fe fa1b 	bl	8000b18 <__aeabi_dcmpgt>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <start+0xc8e>
 80026e8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8002740 <start+0xce0>
 80026ec:	e001      	b.n	80026f2 <start+0xc92>
 80026ee:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8002748 <start+0xce8>
 80026f2:	ed87 7b04 	vstr	d7, [r7, #16]

    setMotorSpeed(6, V1);
 80026f6:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80026fa:	2006      	movs	r0, #6
 80026fc:	f7fe fcae 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, V2);
 8002700:	ed97 0b08 	vldr	d0, [r7, #32]
 8002704:	2008      	movs	r0, #8
 8002706:	f7fe fca9 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, V3);
 800270a:	ed97 0b06 	vldr	d0, [r7, #24]
 800270e:	2004      	movs	r0, #4
 8002710:	f7fe fca4 	bl	800105c <setMotorSpeed>
    setMotorSpeed(5, V4);
 8002714:	ed97 0b04 	vldr	d0, [r7, #16]
 8002718:	2005      	movs	r0, #5
 800271a:	f7fe fc9f 	bl	800105c <setMotorSpeed>
}
 800271e:	bf00      	nop
 8002720:	3758      	adds	r7, #88	@ 0x58
 8002722:	46bd      	mov	sp, r7
 8002724:	bdb0      	pop	{r4, r5, r7, pc}
 8002726:	bf00      	nop
 8002728:	00000000 	.word	0x00000000
 800272c:	c07f4000 	.word	0xc07f4000
 8002730:	00000000 	.word	0x00000000
 8002734:	c0a45000 	.word	0xc0a45000
 8002738:	00000000 	.word	0x00000000
 800273c:	40a45000 	.word	0x40a45000
 8002740:	00000000 	.word	0x00000000
 8002744:	407f4000 	.word	0x407f4000
	...
 8002750:	407f4000 	.word	0x407f4000
 8002754:	66666666 	.word	0x66666666
 8002758:	401e6666 	.word	0x401e6666
 800275c:	667f3bcc 	.word	0x667f3bcc
 8002760:	bfe6a09e 	.word	0xbfe6a09e
 8002764:	667f3bcd 	.word	0x667f3bcd
 8002768:	3fe6a09e 	.word	0x3fe6a09e
 800276c:	667f3bcd 	.word	0x667f3bcd
 8002770:	bfe6a09e 	.word	0xbfe6a09e
 8002774:	9999999a 	.word	0x9999999a
 8002778:	3ff19999 	.word	0x3ff19999
 800277c:	667f3bcc 	.word	0x667f3bcc
 8002780:	3fe6a09e 	.word	0x3fe6a09e
 8002784:	667f3bce 	.word	0x667f3bce
 8002788:	bfe6a09e 	.word	0xbfe6a09e
 800278c:	667f3bce 	.word	0x667f3bce
 8002790:	3fe6a09e 	.word	0x3fe6a09e
 8002794:	667f3bcb 	.word	0x667f3bcb
 8002798:	3fe6a09e 	.word	0x3fe6a09e
 800279c:	0a3d70a4 	.word	0x0a3d70a4
 80027a0:	3ff0a3d7 	.word	0x3ff0a3d7
 80027a4:	b645a1cb 	.word	0xb645a1cb
 80027a8:	3ff0fdf3 	.word	0x3ff0fdf3
 80027ac:	8f5c28f6 	.word	0x8f5c28f6
 80027b0:	3ff0f5c2 	.word	0x3ff0f5c2
 80027b4:	47ae147b 	.word	0x47ae147b
 80027b8:	3ff07ae1 	.word	0x3ff07ae1
 80027bc:	851eb852 	.word	0x851eb852
 80027c0:	3ff051eb 	.word	0x3ff051eb

080027c4 <lcd_write_nibble>:
#define D7_BIT 7      // Data 7 bit

uint8_t backlight_state = 1;

void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	4603      	mov	r3, r0
 80027cc:	460a      	mov	r2, r1
 80027ce:	71fb      	strb	r3, [r7, #7]
 80027d0:	4613      	mov	r3, r2
 80027d2:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	79bb      	ldrb	r3, [r7, #6]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 80027e6:	4b16      	ldr	r3, [pc, #88]	@ (8002840 <lcd_write_nibble+0x7c>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	b25a      	sxtb	r2, r3
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	b25b      	sxtb	r3, r3
 80027f2:	4313      	orrs	r3, r2
 80027f4:	b25b      	sxtb	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	b2db      	uxtb	r3, r3
 8002802:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8002804:	f107 020f 	add.w	r2, r7, #15
 8002808:	2364      	movs	r3, #100	@ 0x64
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2301      	movs	r3, #1
 800280e:	214e      	movs	r1, #78	@ 0x4e
 8002810:	480c      	ldr	r0, [pc, #48]	@ (8002844 <lcd_write_nibble+0x80>)
 8002812:	f006 fbd7 	bl	8008fc4 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8002816:	2001      	movs	r0, #1
 8002818:	f005 fee2 	bl	80085e0 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	f023 0304 	bic.w	r3, r3, #4
 8002822:	b2db      	uxtb	r3, r3
 8002824:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8002826:	f107 020f 	add.w	r2, r7, #15
 800282a:	2364      	movs	r3, #100	@ 0x64
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2301      	movs	r3, #1
 8002830:	214e      	movs	r1, #78	@ 0x4e
 8002832:	4804      	ldr	r0, [pc, #16]	@ (8002844 <lcd_write_nibble+0x80>)
 8002834:	f006 fbc6 	bl	8008fc4 <HAL_I2C_Master_Transmit>
}
 8002838:	bf00      	nop
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	200000c8 	.word	0x200000c8
 8002844:	200002e4 	.word	0x200002e4

08002848 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ffad 	bl	80027c4 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 800286a:	7bbb      	ldrb	r3, [r7, #14]
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ffa8 	bl	80027c4 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02)
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d002      	beq.n	8002880 <lcd_send_cmd+0x38>
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d102      	bne.n	8002886 <lcd_send_cmd+0x3e>
  {
    HAL_Delay(2);
 8002880:	2002      	movs	r0, #2
 8002882:	f005 fead 	bl	80085e0 <HAL_Delay>
  }
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	2101      	movs	r1, #1
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ff8a 	bl	80027c4 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 80028b0:	7bbb      	ldrb	r3, [r7, #14]
 80028b2:	2101      	movs	r1, #1
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff85 	bl	80027c4 <lcd_write_nibble>
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <lcd_init>:

void lcd_init()
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 80028c6:	2032      	movs	r0, #50	@ 0x32
 80028c8:	f005 fe8a 	bl	80085e0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80028cc:	2100      	movs	r1, #0
 80028ce:	2003      	movs	r0, #3
 80028d0:	f7ff ff78 	bl	80027c4 <lcd_write_nibble>
  HAL_Delay(5);
 80028d4:	2005      	movs	r0, #5
 80028d6:	f005 fe83 	bl	80085e0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80028da:	2100      	movs	r1, #0
 80028dc:	2003      	movs	r0, #3
 80028de:	f7ff ff71 	bl	80027c4 <lcd_write_nibble>
  HAL_Delay(1);
 80028e2:	2001      	movs	r0, #1
 80028e4:	f005 fe7c 	bl	80085e0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80028e8:	2100      	movs	r1, #0
 80028ea:	2003      	movs	r0, #3
 80028ec:	f7ff ff6a 	bl	80027c4 <lcd_write_nibble>
  HAL_Delay(1);
 80028f0:	2001      	movs	r0, #1
 80028f2:	f005 fe75 	bl	80085e0 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 80028f6:	2100      	movs	r1, #0
 80028f8:	2002      	movs	r0, #2
 80028fa:	f7ff ff63 	bl	80027c4 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 80028fe:	2028      	movs	r0, #40	@ 0x28
 8002900:	f7ff ffa2 	bl	8002848 <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8002904:	200c      	movs	r0, #12
 8002906:	f7ff ff9f 	bl	8002848 <lcd_send_cmd>
  lcd_send_cmd(0x06);
 800290a:	2006      	movs	r0, #6
 800290c:	f7ff ff9c 	bl	8002848 <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8002910:	2001      	movs	r0, #1
 8002912:	f7ff ff99 	bl	8002848 <lcd_send_cmd>
  HAL_Delay(2);
 8002916:	2002      	movs	r0, #2
 8002918:	f005 fe62 	bl	80085e0 <HAL_Delay>
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}

08002920 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  while (*str)
 8002928:	e006      	b.n	8002938 <lcd_write_string+0x18>
  {
    lcd_send_data(*str++);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ffab 	bl	800288e <lcd_send_data>
  while (*str)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f4      	bne.n	800292a <lcd_write_string+0xa>
  }
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	460a      	mov	r2, r1
 8002956:	71fb      	strb	r3, [r7, #7]
 8002958:	4613      	mov	r3, r2
 800295a:	71bb      	strb	r3, [r7, #6]
  uint8_t address;
  switch (row)
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d816      	bhi.n	8002990 <lcd_set_cursor+0x44>
 8002962:	a201      	add	r2, pc, #4	@ (adr r2, 8002968 <lcd_set_cursor+0x1c>)
 8002964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002968:	08002979 	.word	0x08002979
 800296c:	0800297f 	.word	0x0800297f
 8002970:	08002985 	.word	0x08002985
 8002974:	0800298b 	.word	0x0800298b
  {
  case 0:
    address = 0x00;
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
    break;
 800297c:	e00a      	b.n	8002994 <lcd_set_cursor+0x48>
  case 1:
    address = 0x40;
 800297e:	2340      	movs	r3, #64	@ 0x40
 8002980:	73fb      	strb	r3, [r7, #15]
    break;
 8002982:	e007      	b.n	8002994 <lcd_set_cursor+0x48>
  case 2:
    address = 0x14;
 8002984:	2314      	movs	r3, #20
 8002986:	73fb      	strb	r3, [r7, #15]
    break;
 8002988:	e004      	b.n	8002994 <lcd_set_cursor+0x48>
  case 3:
    address = 0x54;
 800298a:	2354      	movs	r3, #84	@ 0x54
 800298c:	73fb      	strb	r3, [r7, #15]
    break;
 800298e:	e001      	b.n	8002994 <lcd_set_cursor+0x48>
  default:
    address = 0x00;
 8002990:	2300      	movs	r3, #0
 8002992:	73fb      	strb	r3, [r7, #15]
  }
  address += column;
 8002994:	7bfa      	ldrb	r2, [r7, #15]
 8002996:	79bb      	ldrb	r3, [r7, #6]
 8002998:	4413      	add	r3, r2
 800299a:	73fb      	strb	r3, [r7, #15]
  lcd_send_cmd(0x80 | address);
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff4f 	bl	8002848 <lcd_send_cmd>
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop

080029b4 <lcd_clear>:

void lcd_clear(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x01);
 80029b8:	2001      	movs	r0, #1
 80029ba:	f7ff ff45 	bl	8002848 <lcd_send_cmd>
  HAL_Delay(2);
 80029be:	2002      	movs	r0, #2
 80029c0:	f005 fe0e 	bl	80085e0 <HAL_Delay>
}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t mode = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	80fb      	strh	r3, [r7, #6]
	// ENCODER
	if((GPIO_Pin == EB_1_Pin) && (HAL_GPIO_ReadPin(EB_1_GPIO_Port, EB_1_Pin) == GPIO_PIN_SET))
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d11d      	bne.n	8002a14 <HAL_GPIO_EXTI_Callback+0x4c>
 80029d8:	2108      	movs	r1, #8
 80029da:	4890      	ldr	r0, [pc, #576]	@ (8002c1c <HAL_GPIO_EXTI_Callback+0x254>)
 80029dc:	f006 f964 	bl	8008ca8 <HAL_GPIO_ReadPin>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d116      	bne.n	8002a14 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		HAL_GPIO_ReadPin(EA_1_GPIO_Port, EA_1_Pin) ? counter1-- : counter1++;
 80029e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029ea:	488d      	ldr	r0, [pc, #564]	@ (8002c20 <HAL_GPIO_EXTI_Callback+0x258>)
 80029ec:	f006 f95c 	bl	8008ca8 <HAL_GPIO_ReadPin>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_GPIO_EXTI_Callback+0x3a>
 80029f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002c24 <HAL_GPIO_EXTI_Callback+0x25c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	4a89      	ldr	r2, [pc, #548]	@ (8002c24 <HAL_GPIO_EXTI_Callback+0x25c>)
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	e004      	b.n	8002a0c <HAL_GPIO_EXTI_Callback+0x44>
 8002a02:	4b88      	ldr	r3, [pc, #544]	@ (8002c24 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3301      	adds	r3, #1
 8002a08:	4a86      	ldr	r2, [pc, #536]	@ (8002c24 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002a0a:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_1_Pin);
 8002a0c:	4b86      	ldr	r3, [pc, #536]	@ (8002c28 <HAL_GPIO_EXTI_Callback+0x260>)
 8002a0e:	2208      	movs	r2, #8
 8002a10:	615a      	str	r2, [r3, #20]
 8002a12:	e15b      	b.n	8002ccc <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_2_Pin) && (HAL_GPIO_ReadPin(EB_2_GPIO_Port, EB_2_Pin) == GPIO_PIN_SET))
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d11c      	bne.n	8002a54 <HAL_GPIO_EXTI_Callback+0x8c>
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	4883      	ldr	r0, [pc, #524]	@ (8002c2c <HAL_GPIO_EXTI_Callback+0x264>)
 8002a1e:	f006 f943 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d115      	bne.n	8002a54 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		HAL_GPIO_ReadPin(EA_2_GPIO_Port, EA_2_Pin) ? counter2-- : counter2++;
 8002a28:	2101      	movs	r1, #1
 8002a2a:	4880      	ldr	r0, [pc, #512]	@ (8002c2c <HAL_GPIO_EXTI_Callback+0x264>)
 8002a2c:	f006 f93c 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_GPIO_EXTI_Callback+0x7a>
 8002a36:	4b7e      	ldr	r3, [pc, #504]	@ (8002c30 <HAL_GPIO_EXTI_Callback+0x268>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	4a7c      	ldr	r2, [pc, #496]	@ (8002c30 <HAL_GPIO_EXTI_Callback+0x268>)
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	e004      	b.n	8002a4c <HAL_GPIO_EXTI_Callback+0x84>
 8002a42:	4b7b      	ldr	r3, [pc, #492]	@ (8002c30 <HAL_GPIO_EXTI_Callback+0x268>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3301      	adds	r3, #1
 8002a48:	4a79      	ldr	r2, [pc, #484]	@ (8002c30 <HAL_GPIO_EXTI_Callback+0x268>)
 8002a4a:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_2_Pin);
 8002a4c:	4b76      	ldr	r3, [pc, #472]	@ (8002c28 <HAL_GPIO_EXTI_Callback+0x260>)
 8002a4e:	2202      	movs	r2, #2
 8002a50:	615a      	str	r2, [r3, #20]
 8002a52:	e13b      	b.n	8002ccc <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_3_Pin) && (HAL_GPIO_ReadPin(EB_3_GPIO_Port, EB_3_Pin) == GPIO_PIN_SET))
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d11c      	bne.n	8002a94 <HAL_GPIO_EXTI_Callback+0xcc>
 8002a5a:	2120      	movs	r1, #32
 8002a5c:	486f      	ldr	r0, [pc, #444]	@ (8002c1c <HAL_GPIO_EXTI_Callback+0x254>)
 8002a5e:	f006 f923 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d115      	bne.n	8002a94 <HAL_GPIO_EXTI_Callback+0xcc>
	{
		HAL_GPIO_ReadPin(EA_3_GPIO_Port, EA_3_Pin) ? counter3-- : counter3++;
 8002a68:	2110      	movs	r1, #16
 8002a6a:	486c      	ldr	r0, [pc, #432]	@ (8002c1c <HAL_GPIO_EXTI_Callback+0x254>)
 8002a6c:	f006 f91c 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <HAL_GPIO_EXTI_Callback+0xba>
 8002a76:	4b6f      	ldr	r3, [pc, #444]	@ (8002c34 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	4a6d      	ldr	r2, [pc, #436]	@ (8002c34 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	e004      	b.n	8002a8c <HAL_GPIO_EXTI_Callback+0xc4>
 8002a82:	4b6c      	ldr	r3, [pc, #432]	@ (8002c34 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3301      	adds	r3, #1
 8002a88:	4a6a      	ldr	r2, [pc, #424]	@ (8002c34 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002a8a:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_3_Pin);
 8002a8c:	4b66      	ldr	r3, [pc, #408]	@ (8002c28 <HAL_GPIO_EXTI_Callback+0x260>)
 8002a8e:	2220      	movs	r2, #32
 8002a90:	615a      	str	r2, [r3, #20]
 8002a92:	e11b      	b.n	8002ccc <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_1_Pin) && (HAL_GPIO_ReadPin(EinB_1_GPIO_Port, EinB_1_Pin) == GPIO_PIN_SET))
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d11c      	bne.n	8002ad4 <HAL_GPIO_EXTI_Callback+0x10c>
 8002a9a:	2104      	movs	r1, #4
 8002a9c:	4863      	ldr	r0, [pc, #396]	@ (8002c2c <HAL_GPIO_EXTI_Callback+0x264>)
 8002a9e:	f006 f903 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d115      	bne.n	8002ad4 <HAL_GPIO_EXTI_Callback+0x10c>
	{
		HAL_GPIO_ReadPin(EinA_1_GPIO_Port, EinA_1_Pin) ? counterIN1++ : counterIN1--;
 8002aa8:	2108      	movs	r1, #8
 8002aaa:	4860      	ldr	r0, [pc, #384]	@ (8002c2c <HAL_GPIO_EXTI_Callback+0x264>)
 8002aac:	f006 f8fc 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_GPIO_EXTI_Callback+0xfa>
 8002ab6:	4b60      	ldr	r3, [pc, #384]	@ (8002c38 <HAL_GPIO_EXTI_Callback+0x270>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3301      	adds	r3, #1
 8002abc:	4a5e      	ldr	r2, [pc, #376]	@ (8002c38 <HAL_GPIO_EXTI_Callback+0x270>)
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	e004      	b.n	8002acc <HAL_GPIO_EXTI_Callback+0x104>
 8002ac2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c38 <HAL_GPIO_EXTI_Callback+0x270>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	4a5b      	ldr	r2, [pc, #364]	@ (8002c38 <HAL_GPIO_EXTI_Callback+0x270>)
 8002aca:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_1_Pin);
 8002acc:	4b56      	ldr	r3, [pc, #344]	@ (8002c28 <HAL_GPIO_EXTI_Callback+0x260>)
 8002ace:	2204      	movs	r2, #4
 8002ad0:	615a      	str	r2, [r3, #20]
 8002ad2:	e0fb      	b.n	8002ccc <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_2_Pin) && (HAL_GPIO_ReadPin(EinB_2_GPIO_Port, EinB_2_Pin) == GPIO_PIN_SET))
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d11c      	bne.n	8002b14 <HAL_GPIO_EXTI_Callback+0x14c>
 8002ada:	2101      	movs	r1, #1
 8002adc:	4850      	ldr	r0, [pc, #320]	@ (8002c20 <HAL_GPIO_EXTI_Callback+0x258>)
 8002ade:	f006 f8e3 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d115      	bne.n	8002b14 <HAL_GPIO_EXTI_Callback+0x14c>
	{
		HAL_GPIO_ReadPin(EinA_2_GPIO_Port, EinA_2_Pin) ? counterIN2-- : counterIN2++;
 8002ae8:	2102      	movs	r1, #2
 8002aea:	484d      	ldr	r0, [pc, #308]	@ (8002c20 <HAL_GPIO_EXTI_Callback+0x258>)
 8002aec:	f006 f8dc 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_GPIO_EXTI_Callback+0x13a>
 8002af6:	4b51      	ldr	r3, [pc, #324]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0x274>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	4a4f      	ldr	r2, [pc, #316]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0x274>)
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	e004      	b.n	8002b0c <HAL_GPIO_EXTI_Callback+0x144>
 8002b02:	4b4e      	ldr	r3, [pc, #312]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0x274>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3301      	adds	r3, #1
 8002b08:	4a4c      	ldr	r2, [pc, #304]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0x274>)
 8002b0a:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_2_Pin);
 8002b0c:	4b46      	ldr	r3, [pc, #280]	@ (8002c28 <HAL_GPIO_EXTI_Callback+0x260>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	615a      	str	r2, [r3, #20]
 8002b12:	e0db      	b.n	8002ccc <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_3_Pin) && (HAL_GPIO_ReadPin(EinB_3_GPIO_Port, EinB_3_Pin) == GPIO_PIN_SET))
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b1a:	d11f      	bne.n	8002b5c <HAL_GPIO_EXTI_Callback+0x194>
 8002b1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b20:	4847      	ldr	r0, [pc, #284]	@ (8002c40 <HAL_GPIO_EXTI_Callback+0x278>)
 8002b22:	f006 f8c1 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d117      	bne.n	8002b5c <HAL_GPIO_EXTI_Callback+0x194>
	{
		HAL_GPIO_ReadPin(EinA_3_GPIO_Port, EinA_3_Pin) ? counterIN3++ : counterIN3--;
 8002b2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b30:	4843      	ldr	r0, [pc, #268]	@ (8002c40 <HAL_GPIO_EXTI_Callback+0x278>)
 8002b32:	f006 f8b9 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_GPIO_EXTI_Callback+0x180>
 8002b3c:	4b41      	ldr	r3, [pc, #260]	@ (8002c44 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3301      	adds	r3, #1
 8002b42:	4a40      	ldr	r2, [pc, #256]	@ (8002c44 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e004      	b.n	8002b52 <HAL_GPIO_EXTI_Callback+0x18a>
 8002b48:	4b3e      	ldr	r3, [pc, #248]	@ (8002c44 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	4a3d      	ldr	r2, [pc, #244]	@ (8002c44 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002b50:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_3_Pin);
 8002b52:	4b35      	ldr	r3, [pc, #212]	@ (8002c28 <HAL_GPIO_EXTI_Callback+0x260>)
 8002b54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b58:	615a      	str	r2, [r3, #20]
 8002b5a:	e0b7      	b.n	8002ccc <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_4_Pin) && (HAL_GPIO_ReadPin(EinB_4_GPIO_Port, EinB_4_Pin) == GPIO_PIN_SET))
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b62:	d11f      	bne.n	8002ba4 <HAL_GPIO_EXTI_Callback+0x1dc>
 8002b64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b68:	482d      	ldr	r0, [pc, #180]	@ (8002c20 <HAL_GPIO_EXTI_Callback+0x258>)
 8002b6a:	f006 f89d 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d117      	bne.n	8002ba4 <HAL_GPIO_EXTI_Callback+0x1dc>
	{
		HAL_GPIO_ReadPin(EinA_4_GPIO_Port, EinA_4_Pin) ? counterIN4-- : counterIN4++;
 8002b74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b78:	4829      	ldr	r0, [pc, #164]	@ (8002c20 <HAL_GPIO_EXTI_Callback+0x258>)
 8002b7a:	f006 f895 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_GPIO_EXTI_Callback+0x1c8>
 8002b84:	4b30      	ldr	r3, [pc, #192]	@ (8002c48 <HAL_GPIO_EXTI_Callback+0x280>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8002c48 <HAL_GPIO_EXTI_Callback+0x280>)
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e004      	b.n	8002b9a <HAL_GPIO_EXTI_Callback+0x1d2>
 8002b90:	4b2d      	ldr	r3, [pc, #180]	@ (8002c48 <HAL_GPIO_EXTI_Callback+0x280>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	4a2c      	ldr	r2, [pc, #176]	@ (8002c48 <HAL_GPIO_EXTI_Callback+0x280>)
 8002b98:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_4_Pin);
 8002b9a:	4b23      	ldr	r3, [pc, #140]	@ (8002c28 <HAL_GPIO_EXTI_Callback+0x260>)
 8002b9c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ba0:	615a      	str	r2, [r3, #20]
 8002ba2:	e093      	b.n	8002ccc <HAL_GPIO_EXTI_Callback+0x304>
	}

	// BUTTON
	else if((GPIO_Pin == Button_1_Pin) && (HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin) == GPIO_PIN_RESET))
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002baa:	d119      	bne.n	8002be0 <HAL_GPIO_EXTI_Callback+0x218>
 8002bac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bb0:	4826      	ldr	r0, [pc, #152]	@ (8002c4c <HAL_GPIO_EXTI_Callback+0x284>)
 8002bb2:	f006 f879 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d111      	bne.n	8002be0 <HAL_GPIO_EXTI_Callback+0x218>
	{
		mode = mode + 1;
 8002bbc:	4b24      	ldr	r3, [pc, #144]	@ (8002c50 <HAL_GPIO_EXTI_Callback+0x288>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	4b22      	ldr	r3, [pc, #136]	@ (8002c50 <HAL_GPIO_EXTI_Callback+0x288>)
 8002bc6:	701a      	strb	r2, [r3, #0]
		if(mode > 1)
 8002bc8:	4b21      	ldr	r3, [pc, #132]	@ (8002c50 <HAL_GPIO_EXTI_Callback+0x288>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d902      	bls.n	8002bd6 <HAL_GPIO_EXTI_Callback+0x20e>
		{
			mode = 0;
 8002bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c50 <HAL_GPIO_EXTI_Callback+0x288>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_1_Pin);
 8002bd6:	4b14      	ldr	r3, [pc, #80]	@ (8002c28 <HAL_GPIO_EXTI_Callback+0x260>)
 8002bd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bdc:	615a      	str	r2, [r3, #20]
 8002bde:	e075      	b.n	8002ccc <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_2_Pin) && (HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin) == GPIO_PIN_RESET))
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be6:	d135      	bne.n	8002c54 <HAL_GPIO_EXTI_Callback+0x28c>
 8002be8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002bec:	4817      	ldr	r0, [pc, #92]	@ (8002c4c <HAL_GPIO_EXTI_Callback+0x284>)
 8002bee:	f006 f85b 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d12d      	bne.n	8002c54 <HAL_GPIO_EXTI_Callback+0x28c>
	{
		mode = mode + retry;
 8002bf8:	4b15      	ldr	r3, [pc, #84]	@ (8002c50 <HAL_GPIO_EXTI_Callback+0x288>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	3332      	adds	r3, #50	@ 0x32
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	4b13      	ldr	r3, [pc, #76]	@ (8002c50 <HAL_GPIO_EXTI_Callback+0x288>)
 8002c02:	701a      	strb	r2, [r3, #0]
		if(mode > retry)
 8002c04:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <HAL_GPIO_EXTI_Callback+0x288>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b32      	cmp	r3, #50	@ 0x32
 8002c0a:	d902      	bls.n	8002c12 <HAL_GPIO_EXTI_Callback+0x24a>
		{
			mode = 0;
 8002c0c:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <HAL_GPIO_EXTI_Callback+0x288>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_2_Pin);
 8002c12:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <HAL_GPIO_EXTI_Callback+0x260>)
 8002c14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c18:	615a      	str	r2, [r3, #20]
 8002c1a:	e057      	b.n	8002ccc <HAL_GPIO_EXTI_Callback+0x304>
 8002c1c:	40020400 	.word	0x40020400
 8002c20:	40020000 	.word	0x40020000
 8002c24:	200004e8 	.word	0x200004e8
 8002c28:	40013c00 	.word	0x40013c00
 8002c2c:	40020800 	.word	0x40020800
 8002c30:	200004ec 	.word	0x200004ec
 8002c34:	200004f0 	.word	0x200004f0
 8002c38:	200004f4 	.word	0x200004f4
 8002c3c:	200004f8 	.word	0x200004f8
 8002c40:	40020c00 	.word	0x40020c00
 8002c44:	200004fc 	.word	0x200004fc
 8002c48:	20000500 	.word	0x20000500
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	200005e4 	.word	0x200005e4
	}
	else if((GPIO_Pin == Button_3_Pin) && (HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin) == GPIO_PIN_RESET))
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c5a:	d119      	bne.n	8002c90 <HAL_GPIO_EXTI_Callback+0x2c8>
 8002c5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c60:	481c      	ldr	r0, [pc, #112]	@ (8002cd4 <HAL_GPIO_EXTI_Callback+0x30c>)
 8002c62:	f006 f821 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d111      	bne.n	8002c90 <HAL_GPIO_EXTI_Callback+0x2c8>
	{
		mode = mode + 7;
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd8 <HAL_GPIO_EXTI_Callback+0x310>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	3307      	adds	r3, #7
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	4b18      	ldr	r3, [pc, #96]	@ (8002cd8 <HAL_GPIO_EXTI_Callback+0x310>)
 8002c76:	701a      	strb	r2, [r3, #0]
		if(mode > 7)
 8002c78:	4b17      	ldr	r3, [pc, #92]	@ (8002cd8 <HAL_GPIO_EXTI_Callback+0x310>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b07      	cmp	r3, #7
 8002c7e:	d902      	bls.n	8002c86 <HAL_GPIO_EXTI_Callback+0x2be>
		{
			mode = 0;
 8002c80:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <HAL_GPIO_EXTI_Callback+0x310>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_3_Pin);
 8002c86:	4b15      	ldr	r3, [pc, #84]	@ (8002cdc <HAL_GPIO_EXTI_Callback+0x314>)
 8002c88:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c8c:	615a      	str	r2, [r3, #20]
 8002c8e:	e01d      	b.n	8002ccc <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_4_Pin) && (HAL_GPIO_ReadPin(Button_4_GPIO_Port, Button_4_Pin) == GPIO_PIN_RESET))
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c96:	d119      	bne.n	8002ccc <HAL_GPIO_EXTI_Callback+0x304>
 8002c98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c9c:	4810      	ldr	r0, [pc, #64]	@ (8002ce0 <HAL_GPIO_EXTI_Callback+0x318>)
 8002c9e:	f006 f803 	bl	8008ca8 <HAL_GPIO_ReadPin>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d111      	bne.n	8002ccc <HAL_GPIO_EXTI_Callback+0x304>
	{
		mode = mode + 1;
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <HAL_GPIO_EXTI_Callback+0x310>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	4b09      	ldr	r3, [pc, #36]	@ (8002cd8 <HAL_GPIO_EXTI_Callback+0x310>)
 8002cb2:	701a      	strb	r2, [r3, #0]
		if(mode > 1)
 8002cb4:	4b08      	ldr	r3, [pc, #32]	@ (8002cd8 <HAL_GPIO_EXTI_Callback+0x310>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d902      	bls.n	8002cc2 <HAL_GPIO_EXTI_Callback+0x2fa>
		{
			mode = 0;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_GPIO_EXTI_Callback+0x310>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_4_Pin);
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <HAL_GPIO_EXTI_Callback+0x314>)
 8002cc4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002cc8:	615a      	str	r2, [r3, #20]
	}
}
 8002cca:	e7ff      	b.n	8002ccc <HAL_GPIO_EXTI_Callback+0x304>
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	200005e4 	.word	0x200005e4
 8002cdc:	40013c00 	.word	0x40013c00
 8002ce0:	40020c00 	.word	0x40020c00
 8002ce4:	00000000 	.word	0x00000000

08002ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cec:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8002cf0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cf2:	f005 fc03 	bl	80084fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cf6:	f001 fad5 	bl	80042a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cfa:	f001 fdf3 	bl	80048e4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002cfe:	f001 fb3b 	bl	8004378 <MX_I2C2_Init>
  MX_TIM1_Init();
 8002d02:	f001 fb67 	bl	80043d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002d06:	f001 fc29 	bl	800455c <MX_TIM2_Init>
  MX_TIM8_Init();
 8002d0a:	f001 fca9 	bl	8004660 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002d0e:	f001 fd6b 	bl	80047e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002d12:	f001 fd93 	bl	800483c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002d16:	f001 fdbb 	bl	8004890 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8002d1a:	f7ff fdd2 	bl	80028c2 <lcd_init>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8002d1e:	2100      	movs	r1, #0
 8002d20:	48af      	ldr	r0, [pc, #700]	@ (8002fe0 <main+0x2f8>)
 8002d22:	f007 f9e9 	bl	800a0f8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8002d26:	2104      	movs	r1, #4
 8002d28:	48ad      	ldr	r0, [pc, #692]	@ (8002fe0 <main+0x2f8>)
 8002d2a:	f007 f9e5 	bl	800a0f8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 8002d2e:	2108      	movs	r1, #8
 8002d30:	48ab      	ldr	r0, [pc, #684]	@ (8002fe0 <main+0x2f8>)
 8002d32:	f007 f9e1 	bl	800a0f8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8002d36:	210c      	movs	r1, #12
 8002d38:	48a9      	ldr	r0, [pc, #676]	@ (8002fe0 <main+0x2f8>)
 8002d3a:	f007 f9dd 	bl	800a0f8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 8002d3e:	2100      	movs	r1, #0
 8002d40:	48a8      	ldr	r0, [pc, #672]	@ (8002fe4 <main+0x2fc>)
 8002d42:	f007 f9d9 	bl	800a0f8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2);
 8002d46:	2104      	movs	r1, #4
 8002d48:	48a6      	ldr	r0, [pc, #664]	@ (8002fe4 <main+0x2fc>)
 8002d4a:	f007 f9d5 	bl	800a0f8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 8002d4e:	2108      	movs	r1, #8
 8002d50:	48a4      	ldr	r0, [pc, #656]	@ (8002fe4 <main+0x2fc>)
 8002d52:	f007 f9d1 	bl	800a0f8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4);
 8002d56:	210c      	movs	r1, #12
 8002d58:	48a2      	ldr	r0, [pc, #648]	@ (8002fe4 <main+0x2fc>)
 8002d5a:	f007 f9cd 	bl	800a0f8 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8002d5e:	210c      	movs	r1, #12
 8002d60:	48a1      	ldr	r0, [pc, #644]	@ (8002fe8 <main+0x300>)
 8002d62:	f007 f9c9 	bl	800a0f8 <HAL_TIM_PWM_Start_IT>

  HAL_UART_Receive_IT(&huart1, receive, 1);
 8002d66:	2201      	movs	r2, #1
 8002d68:	49a0      	ldr	r1, [pc, #640]	@ (8002fec <main+0x304>)
 8002d6a:	48a1      	ldr	r0, [pc, #644]	@ (8002ff0 <main+0x308>)
 8002d6c:	f008 f9d4 	bl	800b118 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, receiveCAM, 1);
 8002d70:	2201      	movs	r2, #1
 8002d72:	49a0      	ldr	r1, [pc, #640]	@ (8002ff4 <main+0x30c>)
 8002d74:	48a0      	ldr	r0, [pc, #640]	@ (8002ff8 <main+0x310>)
 8002d76:	f008 f9cf 	bl	800b118 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, receivePROX, 1);
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	499f      	ldr	r1, [pc, #636]	@ (8002ffc <main+0x314>)
 8002d7e:	48a0      	ldr	r0, [pc, #640]	@ (8003000 <main+0x318>)
 8002d80:	f008 f9ca 	bl	800b118 <HAL_UART_Receive_IT>

//  EKF tuning = {0.0, 6000.0, 0.0};
  EKF first = {0.0, 6700.0, 0.0};
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278
 8002d90:	a38f      	add	r3, pc, #572	@ (adr r3, 8002fd0 <main+0x2e8>)
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9c7 23a2 	strd	r2, r3, [r7, #648]	@ 0x288
  EKF second = {4300.0, 6650.0, 0.0};
 8002da6:	4b97      	ldr	r3, [pc, #604]	@ (8003004 <main+0x31c>)
 8002da8:	f507 7518 	add.w	r5, r7, #608	@ 0x260
 8002dac:	461c      	mov	r4, r3
 8002dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002db2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002db6:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF third = {4250.0, 10200.0, 0.0};
 8002dba:	4b93      	ldr	r3, [pc, #588]	@ (8003008 <main+0x320>)
 8002dbc:	f507 7512 	add.w	r5, r7, #584	@ 0x248
 8002dc0:	461c      	mov	r4, r3
 8002dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dca:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF fourth = {4300.0, 10000.0, -90.0};
 8002dce:	4b8f      	ldr	r3, [pc, #572]	@ (800300c <main+0x324>)
 8002dd0:	f507 750c 	add.w	r5, r7, #560	@ 0x230
 8002dd4:	461c      	mov	r4, r3
 8002dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dde:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF fifth = {4300.0, 13000.0, -90.0};
 8002de2:	4b8b      	ldr	r3, [pc, #556]	@ (8003010 <main+0x328>)
 8002de4:	f507 7506 	add.w	r5, r7, #536	@ 0x218
 8002de8:	461c      	mov	r4, r3
 8002dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002df2:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF sixth = {4300.0, 12000.0, 90.0};
 8002df6:	4b87      	ldr	r3, [pc, #540]	@ (8003014 <main+0x32c>)
 8002df8:	f507 7500 	add.w	r5, r7, #512	@ 0x200
 8002dfc:	461c      	mov	r4, r3
 8002dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e06:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF retry1 = {300.0, 0.0, 0.0};
 8002e0a:	a373      	add	r3, pc, #460	@ (adr r3, 8002fd8 <main+0x2f0>)
 8002e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e10:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
  EKF retry2 = {250.0, 1000.0, 0.0};
 8002e2c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002e30:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002e34:	4a78      	ldr	r2, [pc, #480]	@ (8003018 <main+0x330>)
 8002e36:	461d      	mov	r5, r3
 8002e38:	4614      	mov	r4, r2
 8002e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e42:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF retry3 = {4300.0, 1500.0, 0.0};
 8002e46:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002e4a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e4e:	4a73      	ldr	r2, [pc, #460]	@ (800301c <main+0x334>)
 8002e50:	461d      	mov	r5, r3
 8002e52:	4614      	mov	r4, r2
 8002e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e5c:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF retry4 = {4300.0, 4650.0, 0.0};
 8002e60:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002e64:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e68:	4a6d      	ldr	r2, [pc, #436]	@ (8003020 <main+0x338>)
 8002e6a:	461d      	mov	r5, r3
 8002e6c:	4614      	mov	r4, r2
 8002e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e76:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF retry5 = {4300.0, 4600.0, -90.0};
 8002e7a:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002e7e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002e82:	4a68      	ldr	r2, [pc, #416]	@ (8003024 <main+0x33c>)
 8002e84:	461d      	mov	r5, r3
 8002e86:	4614      	mov	r4, r2
 8002e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e90:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF retry6 = {4300.0, 8000.0, -90.0};
 8002e94:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002e98:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002e9c:	4a62      	ldr	r2, [pc, #392]	@ (8003028 <main+0x340>)
 8002e9e:	461d      	mov	r5, r3
 8002ea0:	4614      	mov	r4, r2
 8002ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ea6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002eaa:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF coba = {0.0, 2500.0, -90.0};
 8002eae:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002eb2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002eb6:	4a5d      	ldr	r2, [pc, #372]	@ (800302c <main+0x344>)
 8002eb8:	461d      	mov	r5, r3
 8002eba:	4614      	mov	r4, r2
 8002ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ec4:	e885 0003 	stmia.w	r5, {r0, r1}
//		  {4400.0, 6600.0, 0.0},
//		  {4300.0, 6300.0, 0.0},
//		  {4300.0, 11000.0, 0.0}
//  };

  uint8_t battery = 1;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f887 32bf 	strb.w	r3, [r7, #703]	@ 0x2bf

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  EKF position = extendedKalmanFilter();
 8002ece:	f002 fbd7 	bl	8005680 <extendedKalmanFilter>
 8002ed2:	eeb0 5a40 	vmov.f32	s10, s0
 8002ed6:	eef0 5a60 	vmov.f32	s11, s1
 8002eda:	eeb0 6a41 	vmov.f32	s12, s2
 8002ede:	eef0 6a61 	vmov.f32	s13, s3
 8002ee2:	eeb0 7a42 	vmov.f32	s14, s4
 8002ee6:	eef0 7a62 	vmov.f32	s15, s5
 8002eea:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002eee:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ef2:	ed83 5b00 	vstr	d5, [r3]
 8002ef6:	ed83 6b02 	vstr	d6, [r3, #8]
 8002efa:	ed83 7b04 	vstr	d7, [r3, #16]
//	  displayKalman(position);
	  cek(position);
 8002efe:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002f02:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f06:	ed93 5b00 	vldr	d5, [r3]
 8002f0a:	ed93 6b02 	vldr	d6, [r3, #8]
 8002f0e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002f12:	eeb0 0a45 	vmov.f32	s0, s10
 8002f16:	eef0 0a65 	vmov.f32	s1, s11
 8002f1a:	eeb0 1a46 	vmov.f32	s2, s12
 8002f1e:	eef0 1a66 	vmov.f32	s3, s13
 8002f22:	eeb0 2a47 	vmov.f32	s4, s14
 8002f26:	eef0 2a67 	vmov.f32	s5, s15
 8002f2a:	f003 fb39 	bl	80065a0 <cek>

	  bool firstStep = fabs(first.x - position.x) < 200 && fabs(first.y - position.y) < 200 && fabs(first.h - position.h) < 0.5;
 8002f2e:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8002f32:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002f36:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	f7fd f9a3 	bl	8000288 <__aeabi_dsub>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4690      	mov	r8, r2
 8002f48:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	4b37      	ldr	r3, [pc, #220]	@ (8003030 <main+0x348>)
 8002f52:	4640      	mov	r0, r8
 8002f54:	4649      	mov	r1, r9
 8002f56:	f7fd fdc1 	bl	8000adc <__aeabi_dcmplt>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d06b      	beq.n	8003038 <main+0x350>
 8002f60:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8002f64:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002f68:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f6c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f70:	f7fd f98a 	bl	8000288 <__aeabi_dsub>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4692      	mov	sl, r2
 8002f7a:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	4b2b      	ldr	r3, [pc, #172]	@ (8003030 <main+0x348>)
 8002f84:	4650      	mov	r0, sl
 8002f86:	4659      	mov	r1, fp
 8002f88:	f7fd fda8 	bl	8000adc <__aeabi_dcmplt>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d052      	beq.n	8003038 <main+0x350>
 8002f92:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 8002f96:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8002f9a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f9e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fa2:	f7fd f971 	bl	8000288 <__aeabi_dsub>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 8002fae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fb2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	4b1e      	ldr	r3, [pc, #120]	@ (8003034 <main+0x34c>)
 8002fbc:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 8002fc0:	f7fd fd8c 	bl	8000adc <__aeabi_dcmplt>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d036      	beq.n	8003038 <main+0x350>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e035      	b.n	800303a <main+0x352>
 8002fce:	bf00      	nop
 8002fd0:	00000000 	.word	0x00000000
 8002fd4:	40ba2c00 	.word	0x40ba2c00
 8002fd8:	00000000 	.word	0x00000000
 8002fdc:	4072c000 	.word	0x4072c000
 8002fe0:	20000338 	.word	0x20000338
 8002fe4:	200003c8 	.word	0x200003c8
 8002fe8:	20000380 	.word	0x20000380
 8002fec:	20000504 	.word	0x20000504
 8002ff0:	20000410 	.word	0x20000410
 8002ff4:	20000550 	.word	0x20000550
 8002ff8:	20000458 	.word	0x20000458
 8002ffc:	200005a0 	.word	0x200005a0
 8003000:	200004a0 	.word	0x200004a0
 8003004:	08012268 	.word	0x08012268
 8003008:	08012280 	.word	0x08012280
 800300c:	08012298 	.word	0x08012298
 8003010:	080122b0 	.word	0x080122b0
 8003014:	080122c8 	.word	0x080122c8
 8003018:	080122e0 	.word	0x080122e0
 800301c:	080122f8 	.word	0x080122f8
 8003020:	08012310 	.word	0x08012310
 8003024:	08012328 	.word	0x08012328
 8003028:	08012340 	.word	0x08012340
 800302c:	08012358 	.word	0x08012358
 8003030:	40690000 	.word	0x40690000
 8003034:	3fe00000 	.word	0x3fe00000
 8003038:	2300      	movs	r3, #0
 800303a:	f887 32be 	strb.w	r3, [r7, #702]	@ 0x2be
 800303e:	f897 32be 	ldrb.w	r3, [r7, #702]	@ 0x2be
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	f887 32be 	strb.w	r3, [r7, #702]	@ 0x2be
	  bool secondStep = fabs(second.x - position.x) < 200 && fabs(second.y - position.y) < 200 && fabs(second.h - position.h) < 0.5;
 800304a:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 800304e:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003052:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305a:	f7fd f915 	bl	8000288 <__aeabi_dsub>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 8003066:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800306a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	4baf      	ldr	r3, [pc, #700]	@ (8003330 <main+0x648>)
 8003074:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8003078:	f7fd fd30 	bl	8000adc <__aeabi_dcmplt>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d039      	beq.n	80030f6 <main+0x40e>
 8003082:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8003086:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800308a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800308e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003092:	f7fd f8f9 	bl	8000288 <__aeabi_dsub>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 800309e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	4ba1      	ldr	r3, [pc, #644]	@ (8003330 <main+0x648>)
 80030ac:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80030b0:	f7fd fd14 	bl	8000adc <__aeabi_dcmplt>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d01d      	beq.n	80030f6 <main+0x40e>
 80030ba:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 80030be:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80030c2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80030c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030ca:	f7fd f8dd 	bl	8000288 <__aeabi_dsub>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 80030d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	4b94      	ldr	r3, [pc, #592]	@ (8003334 <main+0x64c>)
 80030e4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80030e8:	f7fd fcf8 	bl	8000adc <__aeabi_dcmplt>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <main+0x40e>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <main+0x410>
 80030f6:	2300      	movs	r3, #0
 80030f8:	f887 32bd 	strb.w	r3, [r7, #701]	@ 0x2bd
 80030fc:	f897 32bd 	ldrb.w	r3, [r7, #701]	@ 0x2bd
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	f887 32bd 	strb.w	r3, [r7, #701]	@ 0x2bd
	  bool thirdStep = fabs(third.x - position.x) < 200 && fabs(third.y - position.y) < 200 && fabs(third.h - position.h) < 0.5;
 8003108:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 800310c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003110:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f7fd f8b6 	bl	8000288 <__aeabi_dsub>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003124:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003128:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	4b7f      	ldr	r3, [pc, #508]	@ (8003330 <main+0x648>)
 8003132:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8003136:	f7fd fcd1 	bl	8000adc <__aeabi_dcmplt>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d039      	beq.n	80031b4 <main+0x4cc>
 8003140:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8003144:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003148:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800314c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003150:	f7fd f89a 	bl	8000288 <__aeabi_dsub>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 800315c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003160:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	4b71      	ldr	r3, [pc, #452]	@ (8003330 <main+0x648>)
 800316a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800316e:	f7fd fcb5 	bl	8000adc <__aeabi_dcmplt>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01d      	beq.n	80031b4 <main+0x4cc>
 8003178:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 800317c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003180:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003184:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003188:	f7fd f87e 	bl	8000288 <__aeabi_dsub>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 8003194:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003198:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	4b64      	ldr	r3, [pc, #400]	@ (8003334 <main+0x64c>)
 80031a2:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 80031a6:	f7fd fc99 	bl	8000adc <__aeabi_dcmplt>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <main+0x4cc>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <main+0x4ce>
 80031b4:	2300      	movs	r3, #0
 80031b6:	f887 32bc 	strb.w	r3, [r7, #700]	@ 0x2bc
 80031ba:	f897 32bc 	ldrb.w	r3, [r7, #700]	@ 0x2bc
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	f887 32bc 	strb.w	r3, [r7, #700]	@ 0x2bc
	  bool fourthStep = fabs(fourth.x - position.x) < 200 && fabs(fourth.y - position.y) < 200 && fabs(fourth.h - position.h) < 0.5;
 80031c6:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 80031ca:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80031ce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f7fd f857 	bl	8000288 <__aeabi_dsub>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 80031e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	4b50      	ldr	r3, [pc, #320]	@ (8003330 <main+0x648>)
 80031f0:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 80031f4:	f7fd fc72 	bl	8000adc <__aeabi_dcmplt>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d039      	beq.n	8003272 <main+0x58a>
 80031fe:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
 8003202:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003206:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800320a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800320e:	f7fd f83b 	bl	8000288 <__aeabi_dsub>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 800321a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800321e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	4b42      	ldr	r3, [pc, #264]	@ (8003330 <main+0x648>)
 8003228:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800322c:	f7fd fc56 	bl	8000adc <__aeabi_dcmplt>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01d      	beq.n	8003272 <main+0x58a>
 8003236:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 800323a:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800323e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003242:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003246:	f7fd f81f 	bl	8000288 <__aeabi_dsub>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8003252:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003256:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	4b35      	ldr	r3, [pc, #212]	@ (8003334 <main+0x64c>)
 8003260:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8003264:	f7fd fc3a 	bl	8000adc <__aeabi_dcmplt>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <main+0x58a>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <main+0x58c>
 8003272:	2300      	movs	r3, #0
 8003274:	f887 32bb 	strb.w	r3, [r7, #699]	@ 0x2bb
 8003278:	f897 32bb 	ldrb.w	r3, [r7, #699]	@ 0x2bb
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	f887 32bb 	strb.w	r3, [r7, #699]	@ 0x2bb
	  bool fifthStep = fabs(fifth.x - position.x) < 200 && fabs(fifth.y - position.y) < 200 && fabs(fifth.h - position.h) < 0.5;
 8003284:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8003288:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800328c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	f7fc fff8 	bl	8000288 <__aeabi_dsub>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80032a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <main+0x648>)
 80032ae:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80032b2:	f7fd fc13 	bl	8000adc <__aeabi_dcmplt>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d03d      	beq.n	8003338 <main+0x650>
 80032bc:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80032c0:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80032c4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80032c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80032cc:	f7fc ffdc 	bl	8000288 <__aeabi_dsub>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80032d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	4b12      	ldr	r3, [pc, #72]	@ (8003330 <main+0x648>)
 80032e6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032ea:	f7fd fbf7 	bl	8000adc <__aeabi_dcmplt>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d021      	beq.n	8003338 <main+0x650>
 80032f4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80032f8:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80032fc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003300:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003304:	f7fc ffc0 	bl	8000288 <__aeabi_dsub>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8003310:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003314:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <main+0x64c>)
 800331e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8003322:	f7fd fbdb 	bl	8000adc <__aeabi_dcmplt>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <main+0x650>
 800332c:	2301      	movs	r3, #1
 800332e:	e004      	b.n	800333a <main+0x652>
 8003330:	40690000 	.word	0x40690000
 8003334:	3fe00000 	.word	0x3fe00000
 8003338:	2300      	movs	r3, #0
 800333a:	f887 32ba 	strb.w	r3, [r7, #698]	@ 0x2ba
 800333e:	f897 32ba 	ldrb.w	r3, [r7, #698]	@ 0x2ba
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	f887 32ba 	strb.w	r3, [r7, #698]	@ 0x2ba
	  bool sixthStep = fabs(sixth.x - position.x) < 200 && fabs(sixth.y - position.y) < 200 && fabs(sixth.h - position.h) < 0.5;
 800334a:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 800334e:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003352:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335a:	f7fc ff95 	bl	8000288 <__aeabi_dsub>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8003366:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800336a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	4bba      	ldr	r3, [pc, #744]	@ (800365c <main+0x974>)
 8003374:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003378:	f7fd fbb0 	bl	8000adc <__aeabi_dcmplt>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d039      	beq.n	80033f6 <main+0x70e>
 8003382:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8003386:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800338a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800338e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003392:	f7fc ff79 	bl	8000288 <__aeabi_dsub>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800339e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	4bac      	ldr	r3, [pc, #688]	@ (800365c <main+0x974>)
 80033ac:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80033b0:	f7fd fb94 	bl	8000adc <__aeabi_dcmplt>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01d      	beq.n	80033f6 <main+0x70e>
 80033ba:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80033be:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80033c2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80033c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80033ca:	f7fc ff5d 	bl	8000288 <__aeabi_dsub>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80033d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	4b9f      	ldr	r3, [pc, #636]	@ (8003660 <main+0x978>)
 80033e4:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80033e8:	f7fd fb78 	bl	8000adc <__aeabi_dcmplt>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <main+0x70e>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <main+0x710>
 80033f6:	2300      	movs	r3, #0
 80033f8:	f887 32b9 	strb.w	r3, [r7, #697]	@ 0x2b9
 80033fc:	f897 32b9 	ldrb.w	r3, [r7, #697]	@ 0x2b9
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	f887 32b9 	strb.w	r3, [r7, #697]	@ 0x2b9
	  bool retry1Step = fabs(retry1.x - position.x) < 200 && fabs(retry1.y - position.y) < 200 && fabs(retry1.h - position.h) < 0.5;
 8003408:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800340c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003410:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	f7fc ff36 	bl	8000288 <__aeabi_dsub>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8003424:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003428:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	4b8a      	ldr	r3, [pc, #552]	@ (800365c <main+0x974>)
 8003432:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003436:	f7fd fb51 	bl	8000adc <__aeabi_dcmplt>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d039      	beq.n	80034b4 <main+0x7cc>
 8003440:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8003444:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003448:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800344c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003450:	f7fc ff1a 	bl	8000288 <__aeabi_dsub>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 800345c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003460:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	4b7c      	ldr	r3, [pc, #496]	@ (800365c <main+0x974>)
 800346a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800346e:	f7fd fb35 	bl	8000adc <__aeabi_dcmplt>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01d      	beq.n	80034b4 <main+0x7cc>
 8003478:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 800347c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003480:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003484:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003488:	f7fc fefe 	bl	8000288 <__aeabi_dsub>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003494:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003498:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003660 <main+0x978>)
 80034a2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80034a6:	f7fd fb19 	bl	8000adc <__aeabi_dcmplt>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <main+0x7cc>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <main+0x7ce>
 80034b4:	2300      	movs	r3, #0
 80034b6:	f887 32b8 	strb.w	r3, [r7, #696]	@ 0x2b8
 80034ba:	f897 32b8 	ldrb.w	r3, [r7, #696]	@ 0x2b8
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	f887 32b8 	strb.w	r3, [r7, #696]	@ 0x2b8
	  bool retry2Step = fabs(retry2.x - position.x) < 200 && fabs(retry2.y - position.y) < 200 && fabs(retry2.h - position.h) < 0.5;
 80034c6:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80034ca:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80034ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034d2:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80034d6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	f7fc fed3 	bl	8000288 <__aeabi_dsub>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80034ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	4b59      	ldr	r3, [pc, #356]	@ (800365c <main+0x974>)
 80034f8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80034fc:	f7fd faee 	bl	8000adc <__aeabi_dcmplt>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d041      	beq.n	800358a <main+0x8a2>
 8003506:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800350a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800350e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003512:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003516:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800351a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800351e:	f7fc feb3 	bl	8000288 <__aeabi_dsub>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800352a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800352e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	4b49      	ldr	r3, [pc, #292]	@ (800365c <main+0x974>)
 8003538:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800353c:	f7fd face 	bl	8000adc <__aeabi_dcmplt>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d021      	beq.n	800358a <main+0x8a2>
 8003546:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800354a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800354e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003552:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003556:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800355a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800355e:	f7fc fe93 	bl	8000288 <__aeabi_dsub>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800356a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800356e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	4b3a      	ldr	r3, [pc, #232]	@ (8003660 <main+0x978>)
 8003578:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800357c:	f7fd faae 	bl	8000adc <__aeabi_dcmplt>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <main+0x8a2>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <main+0x8a4>
 800358a:	2300      	movs	r3, #0
 800358c:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
 8003590:	f897 32b7 	ldrb.w	r3, [r7, #695]	@ 0x2b7
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
	  bool retry3Step = fabs(retry3.x - position.x) < 200 && fabs(retry3.y - position.y) < 200 && fabs(retry3.h - position.h) < 0.5;
 800359c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80035a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80035a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035a8:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80035ac:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f7fc fe68 	bl	8000288 <__aeabi_dsub>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80035c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	4b23      	ldr	r3, [pc, #140]	@ (800365c <main+0x974>)
 80035ce:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80035d2:	f7fd fa83 	bl	8000adc <__aeabi_dcmplt>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d043      	beq.n	8003664 <main+0x97c>
 80035dc:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80035e0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80035e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80035e8:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80035ec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80035f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80035f4:	f7fc fe48 	bl	8000288 <__aeabi_dsub>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003600:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	4b13      	ldr	r3, [pc, #76]	@ (800365c <main+0x974>)
 800360e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003612:	f7fd fa63 	bl	8000adc <__aeabi_dcmplt>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d023      	beq.n	8003664 <main+0x97c>
 800361c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003620:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003624:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003628:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800362c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003630:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003634:	f7fc fe28 	bl	8000288 <__aeabi_dsub>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800363e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003642:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <main+0x978>)
 800364a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800364e:	f7fd fa45 	bl	8000adc <__aeabi_dcmplt>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <main+0x97c>
 8003658:	2301      	movs	r3, #1
 800365a:	e004      	b.n	8003666 <main+0x97e>
 800365c:	40690000 	.word	0x40690000
 8003660:	3fe00000 	.word	0x3fe00000
 8003664:	2300      	movs	r3, #0
 8003666:	f887 32b6 	strb.w	r3, [r7, #694]	@ 0x2b6
 800366a:	f897 32b6 	ldrb.w	r3, [r7, #694]	@ 0x2b6
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	f887 32b6 	strb.w	r3, [r7, #694]	@ 0x2b6
	  bool retry4Step = fabs(retry4.x - position.x) < 200 && fabs(retry4.y - position.y) < 200 && fabs(retry4.h - position.h) < 0.5;
 8003676:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800367a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800367e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003682:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003686:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	f7fc fdfb 	bl	8000288 <__aeabi_dsub>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	673a      	str	r2, [r7, #112]	@ 0x70
 8003698:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800369c:	677b      	str	r3, [r7, #116]	@ 0x74
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	4b88      	ldr	r3, [pc, #544]	@ (80038c4 <main+0xbdc>)
 80036a4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80036a8:	f7fd fa18 	bl	8000adc <__aeabi_dcmplt>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d03d      	beq.n	800372e <main+0xa46>
 80036b2:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80036b6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80036ba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80036be:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80036c2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80036c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80036ca:	f7fc fddd 	bl	8000288 <__aeabi_dsub>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80036d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	4b79      	ldr	r3, [pc, #484]	@ (80038c4 <main+0xbdc>)
 80036e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80036e4:	f7fd f9fa 	bl	8000adc <__aeabi_dcmplt>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d01f      	beq.n	800372e <main+0xa46>
 80036ee:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80036f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80036f6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80036fa:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80036fe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003702:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003706:	f7fc fdbf 	bl	8000288 <__aeabi_dsub>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	663a      	str	r2, [r7, #96]	@ 0x60
 8003710:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003714:	667b      	str	r3, [r7, #100]	@ 0x64
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	4b6b      	ldr	r3, [pc, #428]	@ (80038c8 <main+0xbe0>)
 800371c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8003720:	f7fd f9dc 	bl	8000adc <__aeabi_dcmplt>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <main+0xa46>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <main+0xa48>
 800372e:	2300      	movs	r3, #0
 8003730:	f887 32b5 	strb.w	r3, [r7, #693]	@ 0x2b5
 8003734:	f897 32b5 	ldrb.w	r3, [r7, #693]	@ 0x2b5
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	f887 32b5 	strb.w	r3, [r7, #693]	@ 0x2b5
	  bool retry5Step = fabs(retry5.x - position.x) < 200 && fabs(retry5.y - position.y) < 200 && fabs(retry5.h - position.h) < 0.5;
 8003740:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003744:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003748:	e9d3 0100 	ldrd	r0, r1, [r3]
 800374c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003750:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f7fc fd96 	bl	8000288 <__aeabi_dsub>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003762:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003766:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	4b55      	ldr	r3, [pc, #340]	@ (80038c4 <main+0xbdc>)
 800376e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8003772:	f7fd f9b3 	bl	8000adc <__aeabi_dcmplt>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d03d      	beq.n	80037f8 <main+0xb10>
 800377c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003780:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003784:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003788:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800378c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003790:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003794:	f7fc fd78 	bl	8000288 <__aeabi_dsub>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	653a      	str	r2, [r7, #80]	@ 0x50
 800379e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	4b46      	ldr	r3, [pc, #280]	@ (80038c4 <main+0xbdc>)
 80037aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80037ae:	f7fd f995 	bl	8000adc <__aeabi_dcmplt>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01f      	beq.n	80037f8 <main+0xb10>
 80037b8:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80037bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80037c0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80037c4:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80037c8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80037d0:	f7fc fd5a 	bl	8000288 <__aeabi_dsub>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80037da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	4b38      	ldr	r3, [pc, #224]	@ (80038c8 <main+0xbe0>)
 80037e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80037ea:	f7fd f977 	bl	8000adc <__aeabi_dcmplt>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <main+0xb10>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <main+0xb12>
 80037f8:	2300      	movs	r3, #0
 80037fa:	f887 32b4 	strb.w	r3, [r7, #692]	@ 0x2b4
 80037fe:	f897 32b4 	ldrb.w	r3, [r7, #692]	@ 0x2b4
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	f887 32b4 	strb.w	r3, [r7, #692]	@ 0x2b4
	  bool retry6Step = fabs(retry6.x - position.x) < 200 && fabs(retry6.y - position.y) < 200 && fabs(retry6.h - position.h) < 0.5;
 800380a:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800380e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003816:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800381a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f7fc fd31 	bl	8000288 <__aeabi_dsub>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	643a      	str	r2, [r7, #64]	@ 0x40
 800382c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003830:	647b      	str	r3, [r7, #68]	@ 0x44
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	4b23      	ldr	r3, [pc, #140]	@ (80038c4 <main+0xbdc>)
 8003838:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800383c:	f7fd f94e 	bl	8000adc <__aeabi_dcmplt>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d042      	beq.n	80038cc <main+0xbe4>
 8003846:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800384a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800384e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003852:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003856:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800385a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800385e:	f7fc fd13 	bl	8000288 <__aeabi_dsub>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003868:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800386c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	4b14      	ldr	r3, [pc, #80]	@ (80038c4 <main+0xbdc>)
 8003874:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003878:	f7fd f930 	bl	8000adc <__aeabi_dcmplt>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d024      	beq.n	80038cc <main+0xbe4>
 8003882:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003886:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800388a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800388e:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003892:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003896:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800389a:	f7fc fcf5 	bl	8000288 <__aeabi_dsub>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80038a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <main+0xbe0>)
 80038b0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80038b4:	f7fd f912 	bl	8000adc <__aeabi_dcmplt>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d006      	beq.n	80038cc <main+0xbe4>
 80038be:	2301      	movs	r3, #1
 80038c0:	e005      	b.n	80038ce <main+0xbe6>
 80038c2:	bf00      	nop
 80038c4:	40690000 	.word	0x40690000
 80038c8:	3fe00000 	.word	0x3fe00000
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 32b3 	strb.w	r3, [r7, #691]	@ 0x2b3
 80038d2:	f897 32b3 	ldrb.w	r3, [r7, #691]	@ 0x2b3
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	f887 32b3 	strb.w	r3, [r7, #691]	@ 0x2b3

	  int ballExistence = proximity[0];
 80038de:	4bc0      	ldr	r3, [pc, #768]	@ (8003be0 <main+0xef8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
	  bool siloDetected = false;
 80038e6:	2300      	movs	r3, #0
 80038e8:	f887 32ab 	strb.w	r3, [r7, #683]	@ 0x2ab

	  switch(mode)
 80038ec:	4bbd      	ldr	r3, [pc, #756]	@ (8003be4 <main+0xefc>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	2b37      	cmp	r3, #55	@ 0x37
 80038f4:	f200 8491 	bhi.w	800421a <main+0x1532>
 80038f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003900 <main+0xc18>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	080039e1 	.word	0x080039e1
 8003904:	08003ad5 	.word	0x08003ad5
 8003908:	08003c01 	.word	0x08003c01
 800390c:	08003ca7 	.word	0x08003ca7
 8003910:	08003cef 	.word	0x08003cef
 8003914:	08003d37 	.word	0x08003d37
 8003918:	08003d5d 	.word	0x08003d5d
 800391c:	08003da5 	.word	0x08003da5
 8003920:	08003e5b 	.word	0x08003e5b
 8003924:	08003e7b 	.word	0x08003e7b
 8003928:	08003edd 	.word	0x08003edd
 800392c:	0800421b 	.word	0x0800421b
 8003930:	0800421b 	.word	0x0800421b
 8003934:	0800421b 	.word	0x0800421b
 8003938:	0800421b 	.word	0x0800421b
 800393c:	0800421b 	.word	0x0800421b
 8003940:	0800421b 	.word	0x0800421b
 8003944:	0800421b 	.word	0x0800421b
 8003948:	0800421b 	.word	0x0800421b
 800394c:	0800421b 	.word	0x0800421b
 8003950:	0800421b 	.word	0x0800421b
 8003954:	0800421b 	.word	0x0800421b
 8003958:	0800421b 	.word	0x0800421b
 800395c:	0800421b 	.word	0x0800421b
 8003960:	0800421b 	.word	0x0800421b
 8003964:	0800421b 	.word	0x0800421b
 8003968:	0800421b 	.word	0x0800421b
 800396c:	0800421b 	.word	0x0800421b
 8003970:	0800421b 	.word	0x0800421b
 8003974:	0800421b 	.word	0x0800421b
 8003978:	0800421b 	.word	0x0800421b
 800397c:	0800421b 	.word	0x0800421b
 8003980:	0800421b 	.word	0x0800421b
 8003984:	0800421b 	.word	0x0800421b
 8003988:	0800421b 	.word	0x0800421b
 800398c:	0800421b 	.word	0x0800421b
 8003990:	0800421b 	.word	0x0800421b
 8003994:	0800421b 	.word	0x0800421b
 8003998:	0800421b 	.word	0x0800421b
 800399c:	0800421b 	.word	0x0800421b
 80039a0:	0800421b 	.word	0x0800421b
 80039a4:	0800421b 	.word	0x0800421b
 80039a8:	0800421b 	.word	0x0800421b
 80039ac:	0800421b 	.word	0x0800421b
 80039b0:	0800421b 	.word	0x0800421b
 80039b4:	0800421b 	.word	0x0800421b
 80039b8:	0800421b 	.word	0x0800421b
 80039bc:	0800421b 	.word	0x0800421b
 80039c0:	0800421b 	.word	0x0800421b
 80039c4:	08003f39 	.word	0x08003f39
 80039c8:	08003f81 	.word	0x08003f81
 80039cc:	08003fd1 	.word	0x08003fd1
 80039d0:	080040ad 	.word	0x080040ad
 80039d4:	0800415b 	.word	0x0800415b
 80039d8:	080041a9 	.word	0x080041a9
 80039dc:	080041f7 	.word	0x080041f7
	  {
		  case 1:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80039e0:	2201      	movs	r2, #1
 80039e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80039e6:	4880      	ldr	r0, [pc, #512]	@ (8003be8 <main+0xf00>)
 80039e8:	f005 f976 	bl	8008cd8 <HAL_GPIO_WritePin>
			  if(position.y < 1500)
 80039ec:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80039f0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80039f4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80039f8:	a373      	add	r3, pc, #460	@ (adr r3, 8003bc8 <main+0xee0>)
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	f7fd f86d 	bl	8000adc <__aeabi_dcmplt>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d009      	beq.n	8003a1c <main+0xd34>
			  {
				  start(0, 1900, 0, battery);
 8003a08:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f240 716c 	movw	r1, #1900	@ 0x76c
 8003a12:	2000      	movs	r0, #0
 8003a14:	f7fe f824 	bl	8001a60 <start>
				  if(firstStep)
				  {
					  mode = 2;
				  }
			  }
			  break;
 8003a18:	f000 bc0b 	b.w	8004232 <main+0x154a>
			  else if(position.y >= 1500 && position.y <= 4500)
 8003a1c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003a20:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003a24:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003a28:	a367      	add	r3, pc, #412	@ (adr r3, 8003bc8 <main+0xee0>)
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f7fd f869 	bl	8000b04 <__aeabi_dcmpge>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d02f      	beq.n	8003a98 <main+0xdb0>
 8003a38:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003a3c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003a40:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003a44:	a362      	add	r3, pc, #392	@ (adr r3, 8003bd0 <main+0xee8>)
 8003a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4a:	f7fd f851 	bl	8000af0 <__aeabi_dcmple>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d021      	beq.n	8003a98 <main+0xdb0>
				  double gain = sensorData[1] * 100;
 8003a54:	4b65      	ldr	r3, [pc, #404]	@ (8003bec <main+0xf04>)
 8003a56:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	4b64      	ldr	r3, [pc, #400]	@ (8003bf0 <main+0xf08>)
 8003a60:	f7fc fdca 	bl	80005f8 <__aeabi_dmul>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	e9c7 23a4 	strd	r2, r3, [r7, #656]	@ 0x290
				  start(0, 2000 + gain, 0, battery);
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	4b60      	ldr	r3, [pc, #384]	@ (8003bf4 <main+0xf0c>)
 8003a72:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
 8003a76:	f7fc fc09 	bl	800028c <__adddf3>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4619      	mov	r1, r3
 8003a82:	f7fd f869 	bl	8000b58 <__aeabi_d2iz>
 8003a86:	4601      	mov	r1, r0
 8003a88:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2000      	movs	r0, #0
 8003a90:	f7fd ffe6 	bl	8001a60 <start>
			  {
 8003a94:	bf00      	nop
			  break;
 8003a96:	e3cc      	b.n	8004232 <main+0x154a>
				  PID_Kalman(first, 1);
 8003a98:	ed97 5b9e 	vldr	d5, [r7, #632]	@ 0x278
 8003a9c:	ed97 6ba0 	vldr	d6, [r7, #640]	@ 0x280
 8003aa0:	ed97 7ba2 	vldr	d7, [r7, #648]	@ 0x288
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	eeb0 0a45 	vmov.f32	s0, s10
 8003aaa:	eef0 0a65 	vmov.f32	s1, s11
 8003aae:	eeb0 1a46 	vmov.f32	s2, s12
 8003ab2:	eef0 1a66 	vmov.f32	s3, s13
 8003ab6:	eeb0 2a47 	vmov.f32	s4, s14
 8003aba:	eef0 2a67 	vmov.f32	s5, s15
 8003abe:	f003 faf5 	bl	80070ac <PID_Kalman>
				  if(firstStep)
 8003ac2:	f897 32be 	ldrb.w	r3, [r7, #702]	@ 0x2be
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 83b3 	beq.w	8004232 <main+0x154a>
					  mode = 2;
 8003acc:	4a45      	ldr	r2, [pc, #276]	@ (8003be4 <main+0xefc>)
 8003ace:	2302      	movs	r3, #2
 8003ad0:	7013      	strb	r3, [r2, #0]
			  break;
 8003ad2:	e3ae      	b.n	8004232 <main+0x154a>
		  case 2:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003ada:	4843      	ldr	r0, [pc, #268]	@ (8003be8 <main+0xf00>)
 8003adc:	f005 f8fc 	bl	8008cd8 <HAL_GPIO_WritePin>
			  uint32_t timer = HAL_GetTick();
 8003ae0:	f004 fd72 	bl	80085c8 <HAL_GetTick>
 8003ae4:	f8c7 02cc 	str.w	r0, [r7, #716]	@ 0x2cc
			  uint32_t lastTime = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8

			  double W = PID_controllerH(0.0, position.h);
 8003aee:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003af2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003af6:	ed93 7b04 	vldr	d7, [r3, #16]
 8003afa:	eeb0 1a47 	vmov.f32	s2, s14
 8003afe:	eef0 1a67 	vmov.f32	s3, s15
 8003b02:	ed9f 0b35 	vldr	d0, [pc, #212]	@ 8003bd8 <main+0xef0>
 8003b06:	f003 f9a3 	bl	8006e50 <PID_controllerH>
 8003b0a:	ed87 0bb0 	vstr	d0, [r7, #704]	@ 0x2c0
			  PID_Kalman(second, 2);
 8003b0e:	ed97 5b98 	vldr	d5, [r7, #608]	@ 0x260
 8003b12:	ed97 6b9a 	vldr	d6, [r7, #616]	@ 0x268
 8003b16:	ed97 7b9c 	vldr	d7, [r7, #624]	@ 0x270
 8003b1a:	2002      	movs	r0, #2
 8003b1c:	eeb0 0a45 	vmov.f32	s0, s10
 8003b20:	eef0 0a65 	vmov.f32	s1, s11
 8003b24:	eeb0 1a46 	vmov.f32	s2, s12
 8003b28:	eef0 1a66 	vmov.f32	s3, s13
 8003b2c:	eeb0 2a47 	vmov.f32	s4, s14
 8003b30:	eef0 2a67 	vmov.f32	s5, s15
 8003b34:	f003 faba 	bl	80070ac <PID_Kalman>
			  if(secondStep)
 8003b38:	f897 32bd 	ldrb.w	r3, [r7, #701]	@ 0x2bd
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 837a 	beq.w	8004236 <main+0x154e>
			  {
				  if(fabs(position.h) > 0.5)
 8003b42:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003b46:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003b4a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003b4e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	4b27      	ldr	r3, [pc, #156]	@ (8003bf8 <main+0xf10>)
 8003b5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b60:	f7fc ffda 	bl	8000b18 <__aeabi_dcmpgt>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d027      	beq.n	8003bba <main+0xed2>
				  {
			        	if(timer - lastTime >= 1000)
 8003b6a:	f8d7 22cc 	ldr.w	r2, [r7, #716]	@ 0x2cc
 8003b6e:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b78:	f0c0 835d 	bcc.w	8004236 <main+0x154e>
			        	{
			            	lastTime = timer;
 8003b7c:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8003b80:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
			            	if(motorState)
 8003b84:	4b1d      	ldr	r3, [pc, #116]	@ (8003bfc <main+0xf14>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00d      	beq.n	8003ba8 <main+0xec0>
			            	{
			                	Inverse_Kinematics(0, 0, W);
 8003b8c:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 8003b90:	f7fc ffe2 	bl	8000b58 <__aeabi_d2iz>
 8003b94:	4603      	mov	r3, r0
 8003b96:	461a      	mov	r2, r3
 8003b98:	2100      	movs	r1, #0
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	f7fd fad4 	bl	8001148 <Inverse_Kinematics>
			                	motorState = false;
 8003ba0:	4a16      	ldr	r2, [pc, #88]	@ (8003bfc <main+0xf14>)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	7013      	strb	r3, [r2, #0]
				  else
				  {
					  mode = 3;
				  }
			  }
			  break;
 8003ba6:	e346      	b.n	8004236 <main+0x154e>
			            		Inverse_Kinematics(0, 0, 0);
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2100      	movs	r1, #0
 8003bac:	2000      	movs	r0, #0
 8003bae:	f7fd facb 	bl	8001148 <Inverse_Kinematics>
			                	motorState = true;
 8003bb2:	4a12      	ldr	r2, [pc, #72]	@ (8003bfc <main+0xf14>)
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	7013      	strb	r3, [r2, #0]
			  break;
 8003bb8:	e33d      	b.n	8004236 <main+0x154e>
					  mode = 3;
 8003bba:	4a0a      	ldr	r2, [pc, #40]	@ (8003be4 <main+0xefc>)
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	7013      	strb	r3, [r2, #0]
			  break;
 8003bc0:	e339      	b.n	8004236 <main+0x154e>
 8003bc2:	bf00      	nop
 8003bc4:	f3af 8000 	nop.w
 8003bc8:	00000000 	.word	0x00000000
 8003bcc:	40977000 	.word	0x40977000
 8003bd0:	00000000 	.word	0x00000000
 8003bd4:	40b19400 	.word	0x40b19400
	...
 8003be0:	200005dc 	.word	0x200005dc
 8003be4:	200005e4 	.word	0x200005e4
 8003be8:	40020c00 	.word	0x40020c00
 8003bec:	20000540 	.word	0x20000540
 8003bf0:	40590000 	.word	0x40590000
 8003bf4:	409f4000 	.word	0x409f4000
 8003bf8:	3fe00000 	.word	0x3fe00000
 8003bfc:	200005e5 	.word	0x200005e5
		  case 3:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003c00:	2201      	movs	r2, #1
 8003c02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c06:	48c2      	ldr	r0, [pc, #776]	@ (8003f10 <main+0x1228>)
 8003c08:	f005 f866 	bl	8008cd8 <HAL_GPIO_WritePin>
			  if(position.y < 9000)
 8003c0c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003c10:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003c14:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003c18:	a3b3      	add	r3, pc, #716	@ (adr r3, 8003ee8 <main+0x1200>)
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	f7fc ff5d 	bl	8000adc <__aeabi_dcmplt>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d020      	beq.n	8003c6a <main+0xf82>
			  {
				  double gain = sensorData[1] * 200;
 8003c28:	4bba      	ldr	r3, [pc, #744]	@ (8003f14 <main+0x122c>)
 8003c2a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	4bb9      	ldr	r3, [pc, #740]	@ (8003f18 <main+0x1230>)
 8003c34:	f7fc fce0 	bl	80005f8 <__aeabi_dmul>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	e9c7 23a6 	strd	r2, r3, [r7, #664]	@ 0x298
				  start(0, 1500 + gain, 0, battery);
 8003c40:	a3ab      	add	r3, pc, #684	@ (adr r3, 8003ef0 <main+0x1208>)
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
 8003c4a:	f7fc fb1f 	bl	800028c <__adddf3>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4610      	mov	r0, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	f7fc ff7f 	bl	8000b58 <__aeabi_d2iz>
 8003c5a:	4601      	mov	r1, r0
 8003c5c:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8003c60:	2200      	movs	r2, #0
 8003c62:	2000      	movs	r0, #0
 8003c64:	f7fd fefc 	bl	8001a60 <start>
				  if(thirdStep)
				  {
					  mode = 4;
				  }
			  }
			  break;
 8003c68:	e2e7      	b.n	800423a <main+0x1552>
				  PID_Kalman(third, 3);
 8003c6a:	ed97 5b92 	vldr	d5, [r7, #584]	@ 0x248
 8003c6e:	ed97 6b94 	vldr	d6, [r7, #592]	@ 0x250
 8003c72:	ed97 7b96 	vldr	d7, [r7, #600]	@ 0x258
 8003c76:	2003      	movs	r0, #3
 8003c78:	eeb0 0a45 	vmov.f32	s0, s10
 8003c7c:	eef0 0a65 	vmov.f32	s1, s11
 8003c80:	eeb0 1a46 	vmov.f32	s2, s12
 8003c84:	eef0 1a66 	vmov.f32	s3, s13
 8003c88:	eeb0 2a47 	vmov.f32	s4, s14
 8003c8c:	eef0 2a67 	vmov.f32	s5, s15
 8003c90:	f003 fa0c 	bl	80070ac <PID_Kalman>
				  if(thirdStep)
 8003c94:	f897 32bc 	ldrb.w	r3, [r7, #700]	@ 0x2bc
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 82ce 	beq.w	800423a <main+0x1552>
					  mode = 4;
 8003c9e:	4a9f      	ldr	r2, [pc, #636]	@ (8003f1c <main+0x1234>)
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	7013      	strb	r3, [r2, #0]
			  break;
 8003ca4:	e2c9      	b.n	800423a <main+0x1552>
		  case 4:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003cac:	4898      	ldr	r0, [pc, #608]	@ (8003f10 <main+0x1228>)
 8003cae:	f005 f813 	bl	8008cd8 <HAL_GPIO_WritePin>
			  PID_Kalman(fourth, 3);
 8003cb2:	ed97 5b8c 	vldr	d5, [r7, #560]	@ 0x230
 8003cb6:	ed97 6b8e 	vldr	d6, [r7, #568]	@ 0x238
 8003cba:	ed97 7b90 	vldr	d7, [r7, #576]	@ 0x240
 8003cbe:	2003      	movs	r0, #3
 8003cc0:	eeb0 0a45 	vmov.f32	s0, s10
 8003cc4:	eef0 0a65 	vmov.f32	s1, s11
 8003cc8:	eeb0 1a46 	vmov.f32	s2, s12
 8003ccc:	eef0 1a66 	vmov.f32	s3, s13
 8003cd0:	eeb0 2a47 	vmov.f32	s4, s14
 8003cd4:	eef0 2a67 	vmov.f32	s5, s15
 8003cd8:	f003 f9e8 	bl	80070ac <PID_Kalman>
			  if(fourthStep)
 8003cdc:	f897 32bb 	ldrb.w	r3, [r7, #699]	@ 0x2bb
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 82ac 	beq.w	800423e <main+0x1556>
			  {
				  mode = 5;
 8003ce6:	4a8d      	ldr	r2, [pc, #564]	@ (8003f1c <main+0x1234>)
 8003ce8:	2305      	movs	r3, #5
 8003cea:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 8003cec:	e2a7      	b.n	800423e <main+0x1556>
		  case 5:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003cf4:	4886      	ldr	r0, [pc, #536]	@ (8003f10 <main+0x1228>)
 8003cf6:	f004 ffef 	bl	8008cd8 <HAL_GPIO_WritePin>
			  PID_Kalman(fifth, 3);
 8003cfa:	ed97 5b86 	vldr	d5, [r7, #536]	@ 0x218
 8003cfe:	ed97 6b88 	vldr	d6, [r7, #544]	@ 0x220
 8003d02:	ed97 7b8a 	vldr	d7, [r7, #552]	@ 0x228
 8003d06:	2003      	movs	r0, #3
 8003d08:	eeb0 0a45 	vmov.f32	s0, s10
 8003d0c:	eef0 0a65 	vmov.f32	s1, s11
 8003d10:	eeb0 1a46 	vmov.f32	s2, s12
 8003d14:	eef0 1a66 	vmov.f32	s3, s13
 8003d18:	eeb0 2a47 	vmov.f32	s4, s14
 8003d1c:	eef0 2a67 	vmov.f32	s5, s15
 8003d20:	f003 f9c4 	bl	80070ac <PID_Kalman>
			  if(fifthStep)
 8003d24:	f897 32ba 	ldrb.w	r3, [r7, #698]	@ 0x2ba
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 828a 	beq.w	8004242 <main+0x155a>
			  {
				  mode = 6;
 8003d2e:	4a7b      	ldr	r2, [pc, #492]	@ (8003f1c <main+0x1234>)
 8003d30:	2306      	movs	r3, #6
 8003d32:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 8003d34:	e285      	b.n	8004242 <main+0x155a>
		  case 6:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003d36:	2200      	movs	r2, #0
 8003d38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003d3c:	4874      	ldr	r0, [pc, #464]	@ (8003f10 <main+0x1228>)
 8003d3e:	f004 ffcb 	bl	8008cd8 <HAL_GPIO_WritePin>
			  findtheBall();
 8003d42:	f003 fb31 	bl	80073a8 <findtheBall>
			  if(ballExistence == ballDetected)
 8003d46:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 827b 	bne.w	8004246 <main+0x155e>
			  {
				  setMotorSpeed(2, -500);
 8003d50:	ed9f 0b69 	vldr	d0, [pc, #420]	@ 8003ef8 <main+0x1210>
 8003d54:	2002      	movs	r0, #2
 8003d56:	f7fd f981 	bl	800105c <setMotorSpeed>
//				  mode = 0;
			  }
			  break;
 8003d5a:	e274      	b.n	8004246 <main+0x155e>
		  case 7:
			  PID_setDegree(-90.0);
 8003d5c:	ed9f 0b68 	vldr	d0, [pc, #416]	@ 8003f00 <main+0x1218>
 8003d60:	f003 fa2d 	bl	80071be <PID_setDegree>
			  if(fabs(-90 - position.h) < 1)
 8003d64:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003d68:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003d6c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d70:	f04f 0000 	mov.w	r0, #0
 8003d74:	496a      	ldr	r1, [pc, #424]	@ (8003f20 <main+0x1238>)
 8003d76:	f7fc fa87 	bl	8000288 <__aeabi_dsub>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	623a      	str	r2, [r7, #32]
 8003d80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	4b66      	ldr	r3, [pc, #408]	@ (8003f24 <main+0x123c>)
 8003d8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003d90:	f7fc fea4 	bl	8000adc <__aeabi_dcmplt>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d100      	bne.n	8003d9c <main+0x10b4>
			  {
				  mode = 8;
			  }
			  break;
 8003d9a:	e267      	b.n	800426c <main+0x1584>
				  mode = 8;
 8003d9c:	4a5f      	ldr	r2, [pc, #380]	@ (8003f1c <main+0x1234>)
 8003d9e:	2308      	movs	r3, #8
 8003da0:	7013      	strb	r3, [r2, #0]
			  break;
 8003da2:	e263      	b.n	800426c <main+0x1584>
		  case 8:
			  PID_Kalman(coba, 1);
 8003da4:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003da8:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003dac:	ed93 5b00 	vldr	d5, [r3]
 8003db0:	ed93 6b02 	vldr	d6, [r3, #8]
 8003db4:	ed93 7b04 	vldr	d7, [r3, #16]
 8003db8:	2001      	movs	r0, #1
 8003dba:	eeb0 0a45 	vmov.f32	s0, s10
 8003dbe:	eef0 0a65 	vmov.f32	s1, s11
 8003dc2:	eeb0 1a46 	vmov.f32	s2, s12
 8003dc6:	eef0 1a66 	vmov.f32	s3, s13
 8003dca:	eeb0 2a47 	vmov.f32	s4, s14
 8003dce:	eef0 2a67 	vmov.f32	s5, s15
 8003dd2:	f003 f96b 	bl	80070ac <PID_Kalman>
			  if(fabs(coba.y - position.y) < 200 && fabs(coba.h - position.h) < 0.5)
 8003dd6:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003dda:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003dde:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003de2:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003de6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003dea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003dee:	f7fc fa4b 	bl	8000288 <__aeabi_dsub>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	61ba      	str	r2, [r7, #24]
 8003df8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	4b45      	ldr	r3, [pc, #276]	@ (8003f18 <main+0x1230>)
 8003e04:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003e08:	f7fc fe68 	bl	8000adc <__aeabi_dcmplt>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d100      	bne.n	8003e14 <main+0x112c>
			  {
				  mode = 9;
			  }
			  break;
 8003e12:	e22b      	b.n	800426c <main+0x1584>
			  if(fabs(coba.y - position.y) < 200 && fabs(coba.h - position.h) < 0.5)
 8003e14:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003e18:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003e1c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003e20:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003e24:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003e28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e2c:	f7fc fa2c 	bl	8000288 <__aeabi_dsub>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	613a      	str	r2, [r7, #16]
 8003e36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	4b39      	ldr	r3, [pc, #228]	@ (8003f28 <main+0x1240>)
 8003e42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e46:	f7fc fe49 	bl	8000adc <__aeabi_dcmplt>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d100      	bne.n	8003e52 <main+0x116a>
			  break;
 8003e50:	e20c      	b.n	800426c <main+0x1584>
				  mode = 9;
 8003e52:	4a32      	ldr	r2, [pc, #200]	@ (8003f1c <main+0x1234>)
 8003e54:	2309      	movs	r3, #9
 8003e56:	7013      	strb	r3, [r2, #0]
			  break;
 8003e58:	e208      	b.n	800426c <main+0x1584>
		  case 9:
			  findtheBall();
 8003e5a:	f003 faa5 	bl	80073a8 <findtheBall>
			  if(ballExistence == ballDetected)
 8003e5e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f040 81f1 	bne.w	800424a <main+0x1562>
			  {
				  Inverse_Kinematics(0, 0, 0);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	f7fd f96b 	bl	8001148 <Inverse_Kinematics>
				  mode = 10;
 8003e72:	4a2a      	ldr	r2, [pc, #168]	@ (8003f1c <main+0x1234>)
 8003e74:	230a      	movs	r3, #10
 8003e76:	7013      	strb	r3, [r2, #0]
//					  Inverse_Kinematics(0, 0, 0);
//					  lastTime = timer;
//					  mode = 10;
//				  }
			  }
			  break;
 8003e78:	e1e7      	b.n	800424a <main+0x1562>
		  case 10:
			  PID_setDegree(90.0);
 8003e7a:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8003f08 <main+0x1220>
 8003e7e:	f003 f99e 	bl	80071be <PID_setDegree>
			  if(fabs(90.0 - position.h) < 5)
 8003e82:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003e86:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003e8a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e8e:	f04f 0000 	mov.w	r0, #0
 8003e92:	4926      	ldr	r1, [pc, #152]	@ (8003f2c <main+0x1244>)
 8003e94:	f7fc f9f8 	bl	8000288 <__aeabi_dsub>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	60ba      	str	r2, [r7, #8]
 8003e9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	4b21      	ldr	r3, [pc, #132]	@ (8003f30 <main+0x1248>)
 8003eaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003eae:	f7fc fe15 	bl	8000adc <__aeabi_dcmplt>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d100      	bne.n	8003eba <main+0x11d2>
				  if(camera[4] != 0)
				  {
					  mode = 11;
				  }
			  }
			  break;
 8003eb8:	e1c9      	b.n	800424e <main+0x1566>
				  start(0, 2000, 0, battery);
 8003eba:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f7fd fdcb 	bl	8001a60 <start>
				  if(camera[4] != 0)
 8003eca:	4b1a      	ldr	r3, [pc, #104]	@ (8003f34 <main+0x124c>)
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 81bd 	beq.w	800424e <main+0x1566>
					  mode = 11;
 8003ed4:	4a11      	ldr	r2, [pc, #68]	@ (8003f1c <main+0x1234>)
 8003ed6:	230b      	movs	r3, #11
 8003ed8:	7013      	strb	r3, [r2, #0]
			  break;
 8003eda:	e1b8      	b.n	800424e <main+0x1566>
		  case 11:
			  findSilo();
 8003edc:	f003 fc68 	bl	80077b0 <findSilo>
			  break;
 8003ee0:	e1c4      	b.n	800426c <main+0x1584>
 8003ee2:	bf00      	nop
 8003ee4:	f3af 8000 	nop.w
 8003ee8:	00000000 	.word	0x00000000
 8003eec:	40c19400 	.word	0x40c19400
 8003ef0:	00000000 	.word	0x00000000
 8003ef4:	40977000 	.word	0x40977000
 8003ef8:	00000000 	.word	0x00000000
 8003efc:	c07f4000 	.word	0xc07f4000
 8003f00:	00000000 	.word	0x00000000
 8003f04:	c0568000 	.word	0xc0568000
 8003f08:	00000000 	.word	0x00000000
 8003f0c:	40568000 	.word	0x40568000
 8003f10:	40020c00 	.word	0x40020c00
 8003f14:	20000540 	.word	0x20000540
 8003f18:	40690000 	.word	0x40690000
 8003f1c:	200005e4 	.word	0x200005e4
 8003f20:	c0568000 	.word	0xc0568000
 8003f24:	3ff00000 	.word	0x3ff00000
 8003f28:	3fe00000 	.word	0x3fe00000
 8003f2c:	40568000 	.word	0x40568000
 8003f30:	40140000 	.word	0x40140000
 8003f34:	2000058c 	.word	0x2000058c
		  case retry:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003f3e:	48d2      	ldr	r0, [pc, #840]	@ (8004288 <main+0x15a0>)
 8003f40:	f004 feca 	bl	8008cd8 <HAL_GPIO_WritePin>
			  PID_Kalman(retry1, 3);
 8003f44:	ed97 5b7a 	vldr	d5, [r7, #488]	@ 0x1e8
 8003f48:	ed97 6b7c 	vldr	d6, [r7, #496]	@ 0x1f0
 8003f4c:	ed97 7b7e 	vldr	d7, [r7, #504]	@ 0x1f8
 8003f50:	2003      	movs	r0, #3
 8003f52:	eeb0 0a45 	vmov.f32	s0, s10
 8003f56:	eef0 0a65 	vmov.f32	s1, s11
 8003f5a:	eeb0 1a46 	vmov.f32	s2, s12
 8003f5e:	eef0 1a66 	vmov.f32	s3, s13
 8003f62:	eeb0 2a47 	vmov.f32	s4, s14
 8003f66:	eef0 2a67 	vmov.f32	s5, s15
 8003f6a:	f003 f89f 	bl	80070ac <PID_Kalman>
			  if(retry1Step)
 8003f6e:	f897 32b8 	ldrb.w	r3, [r7, #696]	@ 0x2b8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 816d 	beq.w	8004252 <main+0x156a>
			  {
				  mode = retry+1;
 8003f78:	4ac4      	ldr	r2, [pc, #784]	@ (800428c <main+0x15a4>)
 8003f7a:	2333      	movs	r3, #51	@ 0x33
 8003f7c:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 8003f7e:	e168      	b.n	8004252 <main+0x156a>
		  case retry+1:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003f80:	2200      	movs	r2, #0
 8003f82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003f86:	48c0      	ldr	r0, [pc, #768]	@ (8004288 <main+0x15a0>)
 8003f88:	f004 fea6 	bl	8008cd8 <HAL_GPIO_WritePin>
			  PID_Kalman(retry2, 3);
 8003f8c:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003f90:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003f94:	ed93 5b00 	vldr	d5, [r3]
 8003f98:	ed93 6b02 	vldr	d6, [r3, #8]
 8003f9c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003fa0:	2003      	movs	r0, #3
 8003fa2:	eeb0 0a45 	vmov.f32	s0, s10
 8003fa6:	eef0 0a65 	vmov.f32	s1, s11
 8003faa:	eeb0 1a46 	vmov.f32	s2, s12
 8003fae:	eef0 1a66 	vmov.f32	s3, s13
 8003fb2:	eeb0 2a47 	vmov.f32	s4, s14
 8003fb6:	eef0 2a67 	vmov.f32	s5, s15
 8003fba:	f003 f877 	bl	80070ac <PID_Kalman>
			  if(retry2Step)
 8003fbe:	f897 32b7 	ldrb.w	r3, [r7, #695]	@ 0x2b7
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8147 	beq.w	8004256 <main+0x156e>
			  {
				  mode = retry+2;
 8003fc8:	4ab0      	ldr	r2, [pc, #704]	@ (800428c <main+0x15a4>)
 8003fca:	2334      	movs	r3, #52	@ 0x34
 8003fcc:	7013      	strb	r3, [r2, #0]
			  }
		  	  break;
 8003fce:	e142      	b.n	8004256 <main+0x156e>
		  case retry+2:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003fd6:	48ac      	ldr	r0, [pc, #688]	@ (8004288 <main+0x15a0>)
 8003fd8:	f004 fe7e 	bl	8008cd8 <HAL_GPIO_WritePin>
			  PID_Kalman(retry3, 2);
 8003fdc:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8003fe0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003fe4:	ed93 5b00 	vldr	d5, [r3]
 8003fe8:	ed93 6b02 	vldr	d6, [r3, #8]
 8003fec:	ed93 7b04 	vldr	d7, [r3, #16]
 8003ff0:	2002      	movs	r0, #2
 8003ff2:	eeb0 0a45 	vmov.f32	s0, s10
 8003ff6:	eef0 0a65 	vmov.f32	s1, s11
 8003ffa:	eeb0 1a46 	vmov.f32	s2, s12
 8003ffe:	eef0 1a66 	vmov.f32	s3, s13
 8004002:	eeb0 2a47 	vmov.f32	s4, s14
 8004006:	eef0 2a67 	vmov.f32	s5, s15
 800400a:	f003 f84f 	bl	80070ac <PID_Kalman>
			  if(retry3Step)
 800400e:	f897 32b6 	ldrb.w	r3, [r7, #694]	@ 0x2b6
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8121 	beq.w	800425a <main+0x1572>
			  {
				  if(fabs(retry3.h - position.h) > 0.5)
 8004018:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800401c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004020:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004024:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8004028:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800402c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004030:	f7fc f92a 	bl	8000288 <__aeabi_dsub>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	603a      	str	r2, [r7, #0]
 800403a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800403e:	607b      	str	r3, [r7, #4]
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	4b92      	ldr	r3, [pc, #584]	@ (8004290 <main+0x15a8>)
 8004046:	e9d7 0100 	ldrd	r0, r1, [r7]
 800404a:	f7fc fd65 	bl	8000b18 <__aeabi_dcmpgt>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d027      	beq.n	80040a4 <main+0x13bc>
				  {
			        	if(timer - lastTime >= 1000)
 8004054:	f8d7 22cc 	ldr.w	r2, [r7, #716]	@ 0x2cc
 8004058:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004062:	f0c0 80fa 	bcc.w	800425a <main+0x1572>
			        	{
			            	lastTime = timer;
 8004066:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 800406a:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
			            	if(motorState)
 800406e:	4b89      	ldr	r3, [pc, #548]	@ (8004294 <main+0x15ac>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <main+0x13aa>
			            	{
			                	Inverse_Kinematics(0, 0, W);
 8004076:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 800407a:	f7fc fd6d 	bl	8000b58 <__aeabi_d2iz>
 800407e:	4603      	mov	r3, r0
 8004080:	461a      	mov	r2, r3
 8004082:	2100      	movs	r1, #0
 8004084:	2000      	movs	r0, #0
 8004086:	f7fd f85f 	bl	8001148 <Inverse_Kinematics>
			                	motorState = false;
 800408a:	4a82      	ldr	r2, [pc, #520]	@ (8004294 <main+0x15ac>)
 800408c:	2300      	movs	r3, #0
 800408e:	7013      	strb	r3, [r2, #0]
				  else
				  {
					  mode = retry+3;
				  }
			  }
			  break;
 8004090:	e0e3      	b.n	800425a <main+0x1572>
			            		Inverse_Kinematics(0, 0, 0);
 8004092:	2200      	movs	r2, #0
 8004094:	2100      	movs	r1, #0
 8004096:	2000      	movs	r0, #0
 8004098:	f7fd f856 	bl	8001148 <Inverse_Kinematics>
			                	motorState = true;
 800409c:	4a7d      	ldr	r2, [pc, #500]	@ (8004294 <main+0x15ac>)
 800409e:	2301      	movs	r3, #1
 80040a0:	7013      	strb	r3, [r2, #0]
			  break;
 80040a2:	e0da      	b.n	800425a <main+0x1572>
					  mode = retry+3;
 80040a4:	4a79      	ldr	r2, [pc, #484]	@ (800428c <main+0x15a4>)
 80040a6:	2335      	movs	r3, #53	@ 0x35
 80040a8:	7013      	strb	r3, [r2, #0]
			  break;
 80040aa:	e0d6      	b.n	800425a <main+0x1572>
		  case retry+3:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80040ac:	2200      	movs	r2, #0
 80040ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80040b2:	4875      	ldr	r0, [pc, #468]	@ (8004288 <main+0x15a0>)
 80040b4:	f004 fe10 	bl	8008cd8 <HAL_GPIO_WritePin>
			  if(position.y < 4000)
 80040b8:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80040bc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80040c0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	4b73      	ldr	r3, [pc, #460]	@ (8004298 <main+0x15b0>)
 80040ca:	f7fc fd07 	bl	8000adc <__aeabi_dcmplt>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <main+0x142e>
			  {
				  double gain = sensorData[1] * 200;
 80040d4:	4b71      	ldr	r3, [pc, #452]	@ (800429c <main+0x15b4>)
 80040d6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	4b70      	ldr	r3, [pc, #448]	@ (80042a0 <main+0x15b8>)
 80040e0:	f7fc fa8a 	bl	80005f8 <__aeabi_dmul>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	e9c7 23a8 	strd	r2, r3, [r7, #672]	@ 0x2a0
				  start(0, 1500 + gain, 0, battery);
 80040ec:	a362      	add	r3, pc, #392	@ (adr r3, 8004278 <main+0x1590>)
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
 80040f6:	f7fc f8c9 	bl	800028c <__adddf3>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	f7fc fd29 	bl	8000b58 <__aeabi_d2iz>
 8004106:	4601      	mov	r1, r0
 8004108:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 800410c:	2200      	movs	r2, #0
 800410e:	2000      	movs	r0, #0
 8004110:	f7fd fca6 	bl	8001a60 <start>
				  if(retry4Step)
				  {
					  mode = retry+4;
				  }
			  }
		  	  break;
 8004114:	e0a3      	b.n	800425e <main+0x1576>
				  PID_Kalman(retry4, 3);
 8004116:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800411a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800411e:	ed93 5b00 	vldr	d5, [r3]
 8004122:	ed93 6b02 	vldr	d6, [r3, #8]
 8004126:	ed93 7b04 	vldr	d7, [r3, #16]
 800412a:	2003      	movs	r0, #3
 800412c:	eeb0 0a45 	vmov.f32	s0, s10
 8004130:	eef0 0a65 	vmov.f32	s1, s11
 8004134:	eeb0 1a46 	vmov.f32	s2, s12
 8004138:	eef0 1a66 	vmov.f32	s3, s13
 800413c:	eeb0 2a47 	vmov.f32	s4, s14
 8004140:	eef0 2a67 	vmov.f32	s5, s15
 8004144:	f002 ffb2 	bl	80070ac <PID_Kalman>
				  if(retry4Step)
 8004148:	f897 32b5 	ldrb.w	r3, [r7, #693]	@ 0x2b5
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 8086 	beq.w	800425e <main+0x1576>
					  mode = retry+4;
 8004152:	4a4e      	ldr	r2, [pc, #312]	@ (800428c <main+0x15a4>)
 8004154:	2336      	movs	r3, #54	@ 0x36
 8004156:	7013      	strb	r3, [r2, #0]
		  	  break;
 8004158:	e081      	b.n	800425e <main+0x1576>
		  case retry+4:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800415a:	2201      	movs	r2, #1
 800415c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004160:	4849      	ldr	r0, [pc, #292]	@ (8004288 <main+0x15a0>)
 8004162:	f004 fdb9 	bl	8008cd8 <HAL_GPIO_WritePin>
			  PID_Kalman(retry5, 3);
 8004166:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 800416a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800416e:	ed93 5b00 	vldr	d5, [r3]
 8004172:	ed93 6b02 	vldr	d6, [r3, #8]
 8004176:	ed93 7b04 	vldr	d7, [r3, #16]
 800417a:	2003      	movs	r0, #3
 800417c:	eeb0 0a45 	vmov.f32	s0, s10
 8004180:	eef0 0a65 	vmov.f32	s1, s11
 8004184:	eeb0 1a46 	vmov.f32	s2, s12
 8004188:	eef0 1a66 	vmov.f32	s3, s13
 800418c:	eeb0 2a47 	vmov.f32	s4, s14
 8004190:	eef0 2a67 	vmov.f32	s5, s15
 8004194:	f002 ff8a 	bl	80070ac <PID_Kalman>
			  if(retry5Step)
 8004198:	f897 32b4 	ldrb.w	r3, [r7, #692]	@ 0x2b4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d060      	beq.n	8004262 <main+0x157a>
			  {
				  mode = retry+5;
 80041a0:	4a3a      	ldr	r2, [pc, #232]	@ (800428c <main+0x15a4>)
 80041a2:	2337      	movs	r3, #55	@ 0x37
 80041a4:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 80041a6:	e05c      	b.n	8004262 <main+0x157a>
		  case retry+5:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80041a8:	2200      	movs	r2, #0
 80041aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041ae:	4836      	ldr	r0, [pc, #216]	@ (8004288 <main+0x15a0>)
 80041b0:	f004 fd92 	bl	8008cd8 <HAL_GPIO_WritePin>
			  PID_Kalman(retry6, 3);
 80041b4:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 80041b8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80041bc:	ed93 5b00 	vldr	d5, [r3]
 80041c0:	ed93 6b02 	vldr	d6, [r3, #8]
 80041c4:	ed93 7b04 	vldr	d7, [r3, #16]
 80041c8:	2003      	movs	r0, #3
 80041ca:	eeb0 0a45 	vmov.f32	s0, s10
 80041ce:	eef0 0a65 	vmov.f32	s1, s11
 80041d2:	eeb0 1a46 	vmov.f32	s2, s12
 80041d6:	eef0 1a66 	vmov.f32	s3, s13
 80041da:	eeb0 2a47 	vmov.f32	s4, s14
 80041de:	eef0 2a67 	vmov.f32	s5, s15
 80041e2:	f002 ff63 	bl	80070ac <PID_Kalman>
			  if(retry6Step)
 80041e6:	f897 32b3 	ldrb.w	r3, [r7, #691]	@ 0x2b3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d03b      	beq.n	8004266 <main+0x157e>
			  {
				  mode = retry+6;
 80041ee:	4a27      	ldr	r2, [pc, #156]	@ (800428c <main+0x15a4>)
 80041f0:	2338      	movs	r3, #56	@ 0x38
 80041f2:	7013      	strb	r3, [r2, #0]
			  }
		  	  break;
 80041f4:	e037      	b.n	8004266 <main+0x157e>
		  case retry+6:
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80041f6:	2201      	movs	r2, #1
 80041f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041fc:	4822      	ldr	r0, [pc, #136]	@ (8004288 <main+0x15a0>)
 80041fe:	f004 fd6b 	bl	8008cd8 <HAL_GPIO_WritePin>
		  	  findtheBall();
 8004202:	f003 f8d1 	bl	80073a8 <findtheBall>
			  if(ballExistence == ballDetected)
 8004206:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800420a:	2b00      	cmp	r3, #0
 800420c:	d12d      	bne.n	800426a <main+0x1582>
			  {
				  setMotorSpeed(2, 500);
 800420e:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 8004280 <main+0x1598>
 8004212:	2002      	movs	r0, #2
 8004214:	f7fc ff22 	bl	800105c <setMotorSpeed>
//				  mode = 0;
			  }
		  	  break;
 8004218:	e027      	b.n	800426a <main+0x1582>
		  default:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800421a:	2200      	movs	r2, #0
 800421c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004220:	4819      	ldr	r0, [pc, #100]	@ (8004288 <main+0x15a0>)
 8004222:	f004 fd59 	bl	8008cd8 <HAL_GPIO_WritePin>
			  Inverse_Kinematics(0, 0, 0);
 8004226:	2200      	movs	r2, #0
 8004228:	2100      	movs	r1, #0
 800422a:	2000      	movs	r0, #0
 800422c:	f7fc ff8c 	bl	8001148 <Inverse_Kinematics>
			  break;
 8004230:	e01c      	b.n	800426c <main+0x1584>
			  break;
 8004232:	bf00      	nop
 8004234:	e01a      	b.n	800426c <main+0x1584>
			  break;
 8004236:	bf00      	nop
 8004238:	e018      	b.n	800426c <main+0x1584>
			  break;
 800423a:	bf00      	nop
 800423c:	e016      	b.n	800426c <main+0x1584>
			  break;
 800423e:	bf00      	nop
 8004240:	e014      	b.n	800426c <main+0x1584>
			  break;
 8004242:	bf00      	nop
 8004244:	e012      	b.n	800426c <main+0x1584>
			  break;
 8004246:	bf00      	nop
 8004248:	e010      	b.n	800426c <main+0x1584>
			  break;
 800424a:	bf00      	nop
 800424c:	e00e      	b.n	800426c <main+0x1584>
			  break;
 800424e:	bf00      	nop
 8004250:	e00c      	b.n	800426c <main+0x1584>
			  break;
 8004252:	bf00      	nop
 8004254:	e00a      	b.n	800426c <main+0x1584>
		  	  break;
 8004256:	bf00      	nop
 8004258:	e008      	b.n	800426c <main+0x1584>
			  break;
 800425a:	bf00      	nop
 800425c:	e006      	b.n	800426c <main+0x1584>
		  	  break;
 800425e:	bf00      	nop
 8004260:	e004      	b.n	800426c <main+0x1584>
			  break;
 8004262:	bf00      	nop
 8004264:	e002      	b.n	800426c <main+0x1584>
		  	  break;
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <main+0x1584>
		  	  break;
 800426a:	bf00      	nop
	  }
	  lcd_clear();
 800426c:	f7fe fba2 	bl	80029b4 <lcd_clear>
  {
 8004270:	f7fe be2d 	b.w	8002ece <main+0x1e6>
 8004274:	f3af 8000 	nop.w
 8004278:	00000000 	.word	0x00000000
 800427c:	40977000 	.word	0x40977000
 8004280:	00000000 	.word	0x00000000
 8004284:	407f4000 	.word	0x407f4000
 8004288:	40020c00 	.word	0x40020c00
 800428c:	200005e4 	.word	0x200005e4
 8004290:	3fe00000 	.word	0x3fe00000
 8004294:	200005e5 	.word	0x200005e5
 8004298:	40af4000 	.word	0x40af4000
 800429c:	20000540 	.word	0x20000540
 80042a0:	40690000 	.word	0x40690000

080042a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b094      	sub	sp, #80	@ 0x50
 80042a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042aa:	f107 0320 	add.w	r3, r7, #32
 80042ae:	2230      	movs	r2, #48	@ 0x30
 80042b0:	2100      	movs	r1, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f009 fc89 	bl	800dbca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042b8:	f107 030c 	add.w	r3, r7, #12
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	609a      	str	r2, [r3, #8]
 80042c4:	60da      	str	r2, [r3, #12]
 80042c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80042c8:	2300      	movs	r3, #0
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	4b28      	ldr	r3, [pc, #160]	@ (8004370 <SystemClock_Config+0xcc>)
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	4a27      	ldr	r2, [pc, #156]	@ (8004370 <SystemClock_Config+0xcc>)
 80042d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80042d8:	4b25      	ldr	r3, [pc, #148]	@ (8004370 <SystemClock_Config+0xcc>)
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80042e4:	2300      	movs	r3, #0
 80042e6:	607b      	str	r3, [r7, #4]
 80042e8:	4b22      	ldr	r3, [pc, #136]	@ (8004374 <SystemClock_Config+0xd0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a21      	ldr	r2, [pc, #132]	@ (8004374 <SystemClock_Config+0xd0>)
 80042ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004374 <SystemClock_Config+0xd0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004300:	2301      	movs	r3, #1
 8004302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004304:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004308:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800430a:	2302      	movs	r3, #2
 800430c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800430e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004314:	2308      	movs	r3, #8
 8004316:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004318:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800431c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800431e:	2302      	movs	r3, #2
 8004320:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004322:	2307      	movs	r3, #7
 8004324:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004326:	f107 0320 	add.w	r3, r7, #32
 800432a:	4618      	mov	r0, r3
 800432c:	f005 f9a4 	bl	8009678 <HAL_RCC_OscConfig>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004336:	f000 fd85 	bl	8004e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800433a:	230f      	movs	r3, #15
 800433c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800433e:	2302      	movs	r3, #2
 8004340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004346:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800434a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800434c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004350:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004352:	f107 030c 	add.w	r3, r7, #12
 8004356:	2105      	movs	r1, #5
 8004358:	4618      	mov	r0, r3
 800435a:	f005 fc05 	bl	8009b68 <HAL_RCC_ClockConfig>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004364:	f000 fd6e 	bl	8004e44 <Error_Handler>
  }
}
 8004368:	bf00      	nop
 800436a:	3750      	adds	r7, #80	@ 0x50
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40023800 	.word	0x40023800
 8004374:	40007000 	.word	0x40007000

08004378 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800437c:	4b12      	ldr	r3, [pc, #72]	@ (80043c8 <MX_I2C2_Init+0x50>)
 800437e:	4a13      	ldr	r2, [pc, #76]	@ (80043cc <MX_I2C2_Init+0x54>)
 8004380:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004382:	4b11      	ldr	r3, [pc, #68]	@ (80043c8 <MX_I2C2_Init+0x50>)
 8004384:	4a12      	ldr	r2, [pc, #72]	@ (80043d0 <MX_I2C2_Init+0x58>)
 8004386:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004388:	4b0f      	ldr	r3, [pc, #60]	@ (80043c8 <MX_I2C2_Init+0x50>)
 800438a:	2200      	movs	r2, #0
 800438c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800438e:	4b0e      	ldr	r3, [pc, #56]	@ (80043c8 <MX_I2C2_Init+0x50>)
 8004390:	2200      	movs	r2, #0
 8004392:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004394:	4b0c      	ldr	r3, [pc, #48]	@ (80043c8 <MX_I2C2_Init+0x50>)
 8004396:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800439a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800439c:	4b0a      	ldr	r3, [pc, #40]	@ (80043c8 <MX_I2C2_Init+0x50>)
 800439e:	2200      	movs	r2, #0
 80043a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80043a2:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <MX_I2C2_Init+0x50>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043a8:	4b07      	ldr	r3, [pc, #28]	@ (80043c8 <MX_I2C2_Init+0x50>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043ae:	4b06      	ldr	r3, [pc, #24]	@ (80043c8 <MX_I2C2_Init+0x50>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80043b4:	4804      	ldr	r0, [pc, #16]	@ (80043c8 <MX_I2C2_Init+0x50>)
 80043b6:	f004 fcc1 	bl	8008d3c <HAL_I2C_Init>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80043c0:	f000 fd40 	bl	8004e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80043c4:	bf00      	nop
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	200002e4 	.word	0x200002e4
 80043cc:	40005800 	.word	0x40005800
 80043d0:	000186a0 	.word	0x000186a0

080043d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b096      	sub	sp, #88	@ 0x58
 80043d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	609a      	str	r2, [r3, #8]
 80043e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	605a      	str	r2, [r3, #4]
 80043fc:	609a      	str	r2, [r3, #8]
 80043fe:	60da      	str	r2, [r3, #12]
 8004400:	611a      	str	r2, [r3, #16]
 8004402:	615a      	str	r2, [r3, #20]
 8004404:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004406:	1d3b      	adds	r3, r7, #4
 8004408:	2220      	movs	r2, #32
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f009 fbdc 	bl	800dbca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004412:	4b50      	ldr	r3, [pc, #320]	@ (8004554 <MX_TIM1_Init+0x180>)
 8004414:	4a50      	ldr	r2, [pc, #320]	@ (8004558 <MX_TIM1_Init+0x184>)
 8004416:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 8004418:	4b4e      	ldr	r3, [pc, #312]	@ (8004554 <MX_TIM1_Init+0x180>)
 800441a:	2205      	movs	r2, #5
 800441c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800441e:	4b4d      	ldr	r3, [pc, #308]	@ (8004554 <MX_TIM1_Init+0x180>)
 8004420:	2200      	movs	r2, #0
 8004422:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8004424:	4b4b      	ldr	r3, [pc, #300]	@ (8004554 <MX_TIM1_Init+0x180>)
 8004426:	f241 3287 	movw	r2, #4999	@ 0x1387
 800442a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800442c:	4b49      	ldr	r3, [pc, #292]	@ (8004554 <MX_TIM1_Init+0x180>)
 800442e:	2200      	movs	r2, #0
 8004430:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004432:	4b48      	ldr	r3, [pc, #288]	@ (8004554 <MX_TIM1_Init+0x180>)
 8004434:	2200      	movs	r2, #0
 8004436:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004438:	4b46      	ldr	r3, [pc, #280]	@ (8004554 <MX_TIM1_Init+0x180>)
 800443a:	2200      	movs	r2, #0
 800443c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800443e:	4845      	ldr	r0, [pc, #276]	@ (8004554 <MX_TIM1_Init+0x180>)
 8004440:	f005 fdb2 	bl	8009fa8 <HAL_TIM_Base_Init>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800444a:	f000 fcfb 	bl	8004e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800444e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004452:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004454:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004458:	4619      	mov	r1, r3
 800445a:	483e      	ldr	r0, [pc, #248]	@ (8004554 <MX_TIM1_Init+0x180>)
 800445c:	f006 f914 	bl	800a688 <HAL_TIM_ConfigClockSource>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004466:	f000 fced 	bl	8004e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800446a:	483a      	ldr	r0, [pc, #232]	@ (8004554 <MX_TIM1_Init+0x180>)
 800446c:	f005 fdeb 	bl	800a046 <HAL_TIM_PWM_Init>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004476:	f000 fce5 	bl	8004e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800447a:	2300      	movs	r3, #0
 800447c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800447e:	2300      	movs	r3, #0
 8004480:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004482:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004486:	4619      	mov	r1, r3
 8004488:	4832      	ldr	r0, [pc, #200]	@ (8004554 <MX_TIM1_Init+0x180>)
 800448a:	f006 fd13 	bl	800aeb4 <HAL_TIMEx_MasterConfigSynchronization>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004494:	f000 fcd6 	bl	8004e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004498:	2360      	movs	r3, #96	@ 0x60
 800449a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044a0:	2300      	movs	r3, #0
 80044a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80044a4:	2300      	movs	r3, #0
 80044a6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044a8:	2300      	movs	r3, #0
 80044aa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80044ac:	2300      	movs	r3, #0
 80044ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044b0:	2300      	movs	r3, #0
 80044b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044b8:	2200      	movs	r2, #0
 80044ba:	4619      	mov	r1, r3
 80044bc:	4825      	ldr	r0, [pc, #148]	@ (8004554 <MX_TIM1_Init+0x180>)
 80044be:	f006 f821 	bl	800a504 <HAL_TIM_PWM_ConfigChannel>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80044c8:	f000 fcbc 	bl	8004e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80044cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044d0:	2204      	movs	r2, #4
 80044d2:	4619      	mov	r1, r3
 80044d4:	481f      	ldr	r0, [pc, #124]	@ (8004554 <MX_TIM1_Init+0x180>)
 80044d6:	f006 f815 	bl	800a504 <HAL_TIM_PWM_ConfigChannel>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80044e0:	f000 fcb0 	bl	8004e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80044e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044e8:	2208      	movs	r2, #8
 80044ea:	4619      	mov	r1, r3
 80044ec:	4819      	ldr	r0, [pc, #100]	@ (8004554 <MX_TIM1_Init+0x180>)
 80044ee:	f006 f809 	bl	800a504 <HAL_TIM_PWM_ConfigChannel>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80044f8:	f000 fca4 	bl	8004e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80044fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004500:	220c      	movs	r2, #12
 8004502:	4619      	mov	r1, r3
 8004504:	4813      	ldr	r0, [pc, #76]	@ (8004554 <MX_TIM1_Init+0x180>)
 8004506:	f005 fffd 	bl	800a504 <HAL_TIM_PWM_ConfigChannel>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8004510:	f000 fc98 	bl	8004e44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004514:	2300      	movs	r3, #0
 8004516:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004518:	2300      	movs	r3, #0
 800451a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004528:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800452c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800452e:	2300      	movs	r3, #0
 8004530:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004532:	1d3b      	adds	r3, r7, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4807      	ldr	r0, [pc, #28]	@ (8004554 <MX_TIM1_Init+0x180>)
 8004538:	f006 fd38 	bl	800afac <HAL_TIMEx_ConfigBreakDeadTime>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8004542:	f000 fc7f 	bl	8004e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004546:	4803      	ldr	r0, [pc, #12]	@ (8004554 <MX_TIM1_Init+0x180>)
 8004548:	f003 fcd6 	bl	8007ef8 <HAL_TIM_MspPostInit>

}
 800454c:	bf00      	nop
 800454e:	3758      	adds	r7, #88	@ 0x58
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20000338 	.word	0x20000338
 8004558:	40010000 	.word	0x40010000

0800455c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08e      	sub	sp, #56	@ 0x38
 8004560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004562:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	605a      	str	r2, [r3, #4]
 800456c:	609a      	str	r2, [r3, #8]
 800456e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004570:	f107 0320 	add.w	r3, r7, #32
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800457a:	1d3b      	adds	r3, r7, #4
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	609a      	str	r2, [r3, #8]
 8004584:	60da      	str	r2, [r3, #12]
 8004586:	611a      	str	r2, [r3, #16]
 8004588:	615a      	str	r2, [r3, #20]
 800458a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800458c:	4b33      	ldr	r3, [pc, #204]	@ (800465c <MX_TIM2_Init+0x100>)
 800458e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1679;
 8004594:	4b31      	ldr	r3, [pc, #196]	@ (800465c <MX_TIM2_Init+0x100>)
 8004596:	f240 628f 	movw	r2, #1679	@ 0x68f
 800459a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800459c:	4b2f      	ldr	r3, [pc, #188]	@ (800465c <MX_TIM2_Init+0x100>)
 800459e:	2200      	movs	r2, #0
 80045a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80045a2:	4b2e      	ldr	r3, [pc, #184]	@ (800465c <MX_TIM2_Init+0x100>)
 80045a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80045a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045aa:	4b2c      	ldr	r3, [pc, #176]	@ (800465c <MX_TIM2_Init+0x100>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045b0:	4b2a      	ldr	r3, [pc, #168]	@ (800465c <MX_TIM2_Init+0x100>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80045b6:	4829      	ldr	r0, [pc, #164]	@ (800465c <MX_TIM2_Init+0x100>)
 80045b8:	f005 fcf6 	bl	8009fa8 <HAL_TIM_Base_Init>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80045c2:	f000 fc3f 	bl	8004e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80045cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80045d0:	4619      	mov	r1, r3
 80045d2:	4822      	ldr	r0, [pc, #136]	@ (800465c <MX_TIM2_Init+0x100>)
 80045d4:	f006 f858 	bl	800a688 <HAL_TIM_ConfigClockSource>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80045de:	f000 fc31 	bl	8004e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80045e2:	481e      	ldr	r0, [pc, #120]	@ (800465c <MX_TIM2_Init+0x100>)
 80045e4:	f005 fd2f 	bl	800a046 <HAL_TIM_PWM_Init>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80045ee:	f000 fc29 	bl	8004e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045f2:	2300      	movs	r3, #0
 80045f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045f6:	2300      	movs	r3, #0
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80045fa:	f107 0320 	add.w	r3, r7, #32
 80045fe:	4619      	mov	r1, r3
 8004600:	4816      	ldr	r0, [pc, #88]	@ (800465c <MX_TIM2_Init+0x100>)
 8004602:	f006 fc57 	bl	800aeb4 <HAL_TIMEx_MasterConfigSynchronization>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800460c:	f000 fc1a 	bl	8004e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004610:	2360      	movs	r3, #96	@ 0x60
 8004612:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004620:	1d3b      	adds	r3, r7, #4
 8004622:	2208      	movs	r2, #8
 8004624:	4619      	mov	r1, r3
 8004626:	480d      	ldr	r0, [pc, #52]	@ (800465c <MX_TIM2_Init+0x100>)
 8004628:	f005 ff6c 	bl	800a504 <HAL_TIM_PWM_ConfigChannel>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004632:	f000 fc07 	bl	8004e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004636:	1d3b      	adds	r3, r7, #4
 8004638:	220c      	movs	r2, #12
 800463a:	4619      	mov	r1, r3
 800463c:	4807      	ldr	r0, [pc, #28]	@ (800465c <MX_TIM2_Init+0x100>)
 800463e:	f005 ff61 	bl	800a504 <HAL_TIM_PWM_ConfigChannel>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8004648:	f000 fbfc 	bl	8004e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800464c:	4803      	ldr	r0, [pc, #12]	@ (800465c <MX_TIM2_Init+0x100>)
 800464e:	f003 fc53 	bl	8007ef8 <HAL_TIM_MspPostInit>

}
 8004652:	bf00      	nop
 8004654:	3738      	adds	r7, #56	@ 0x38
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000380 	.word	0x20000380

08004660 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b096      	sub	sp, #88	@ 0x58
 8004664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004666:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	605a      	str	r2, [r3, #4]
 8004670:	609a      	str	r2, [r3, #8]
 8004672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004674:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800467e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	605a      	str	r2, [r3, #4]
 8004688:	609a      	str	r2, [r3, #8]
 800468a:	60da      	str	r2, [r3, #12]
 800468c:	611a      	str	r2, [r3, #16]
 800468e:	615a      	str	r2, [r3, #20]
 8004690:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004692:	1d3b      	adds	r3, r7, #4
 8004694:	2220      	movs	r2, #32
 8004696:	2100      	movs	r1, #0
 8004698:	4618      	mov	r0, r3
 800469a:	f009 fa96 	bl	800dbca <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800469e:	4b50      	ldr	r3, [pc, #320]	@ (80047e0 <MX_TIM8_Init+0x180>)
 80046a0:	4a50      	ldr	r2, [pc, #320]	@ (80047e4 <MX_TIM8_Init+0x184>)
 80046a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5;
 80046a4:	4b4e      	ldr	r3, [pc, #312]	@ (80047e0 <MX_TIM8_Init+0x180>)
 80046a6:	2205      	movs	r2, #5
 80046a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046aa:	4b4d      	ldr	r3, [pc, #308]	@ (80047e0 <MX_TIM8_Init+0x180>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 80046b0:	4b4b      	ldr	r3, [pc, #300]	@ (80047e0 <MX_TIM8_Init+0x180>)
 80046b2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80046b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046b8:	4b49      	ldr	r3, [pc, #292]	@ (80047e0 <MX_TIM8_Init+0x180>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80046be:	4b48      	ldr	r3, [pc, #288]	@ (80047e0 <MX_TIM8_Init+0x180>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046c4:	4b46      	ldr	r3, [pc, #280]	@ (80047e0 <MX_TIM8_Init+0x180>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80046ca:	4845      	ldr	r0, [pc, #276]	@ (80047e0 <MX_TIM8_Init+0x180>)
 80046cc:	f005 fc6c 	bl	8009fa8 <HAL_TIM_Base_Init>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80046d6:	f000 fbb5 	bl	8004e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80046e0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80046e4:	4619      	mov	r1, r3
 80046e6:	483e      	ldr	r0, [pc, #248]	@ (80047e0 <MX_TIM8_Init+0x180>)
 80046e8:	f005 ffce 	bl	800a688 <HAL_TIM_ConfigClockSource>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80046f2:	f000 fba7 	bl	8004e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80046f6:	483a      	ldr	r0, [pc, #232]	@ (80047e0 <MX_TIM8_Init+0x180>)
 80046f8:	f005 fca5 	bl	800a046 <HAL_TIM_PWM_Init>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8004702:	f000 fb9f 	bl	8004e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004706:	2300      	movs	r3, #0
 8004708:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800470a:	2300      	movs	r3, #0
 800470c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800470e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004712:	4619      	mov	r1, r3
 8004714:	4832      	ldr	r0, [pc, #200]	@ (80047e0 <MX_TIM8_Init+0x180>)
 8004716:	f006 fbcd 	bl	800aeb4 <HAL_TIMEx_MasterConfigSynchronization>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8004720:	f000 fb90 	bl	8004e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004724:	2360      	movs	r3, #96	@ 0x60
 8004726:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800472c:	2300      	movs	r3, #0
 800472e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004730:	2300      	movs	r3, #0
 8004732:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004734:	2300      	movs	r3, #0
 8004736:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004738:	2300      	movs	r3, #0
 800473a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800473c:	2300      	movs	r3, #0
 800473e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004740:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004744:	2200      	movs	r2, #0
 8004746:	4619      	mov	r1, r3
 8004748:	4825      	ldr	r0, [pc, #148]	@ (80047e0 <MX_TIM8_Init+0x180>)
 800474a:	f005 fedb 	bl	800a504 <HAL_TIM_PWM_ConfigChannel>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8004754:	f000 fb76 	bl	8004e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800475c:	2204      	movs	r2, #4
 800475e:	4619      	mov	r1, r3
 8004760:	481f      	ldr	r0, [pc, #124]	@ (80047e0 <MX_TIM8_Init+0x180>)
 8004762:	f005 fecf 	bl	800a504 <HAL_TIM_PWM_ConfigChannel>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800476c:	f000 fb6a 	bl	8004e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004774:	2208      	movs	r2, #8
 8004776:	4619      	mov	r1, r3
 8004778:	4819      	ldr	r0, [pc, #100]	@ (80047e0 <MX_TIM8_Init+0x180>)
 800477a:	f005 fec3 	bl	800a504 <HAL_TIM_PWM_ConfigChannel>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8004784:	f000 fb5e 	bl	8004e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800478c:	220c      	movs	r2, #12
 800478e:	4619      	mov	r1, r3
 8004790:	4813      	ldr	r0, [pc, #76]	@ (80047e0 <MX_TIM8_Init+0x180>)
 8004792:	f005 feb7 	bl	800a504 <HAL_TIM_PWM_ConfigChannel>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 800479c:	f000 fb52 	bl	8004e44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80047a0:	2300      	movs	r3, #0
 80047a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80047b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80047b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80047ba:	2300      	movs	r3, #0
 80047bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	4619      	mov	r1, r3
 80047c2:	4807      	ldr	r0, [pc, #28]	@ (80047e0 <MX_TIM8_Init+0x180>)
 80047c4:	f006 fbf2 	bl	800afac <HAL_TIMEx_ConfigBreakDeadTime>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80047ce:	f000 fb39 	bl	8004e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80047d2:	4803      	ldr	r0, [pc, #12]	@ (80047e0 <MX_TIM8_Init+0x180>)
 80047d4:	f003 fb90 	bl	8007ef8 <HAL_TIM_MspPostInit>

}
 80047d8:	bf00      	nop
 80047da:	3758      	adds	r7, #88	@ 0x58
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	200003c8 	.word	0x200003c8
 80047e4:	40010400 	.word	0x40010400

080047e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80047ec:	4b11      	ldr	r3, [pc, #68]	@ (8004834 <MX_USART1_UART_Init+0x4c>)
 80047ee:	4a12      	ldr	r2, [pc, #72]	@ (8004838 <MX_USART1_UART_Init+0x50>)
 80047f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80047f2:	4b10      	ldr	r3, [pc, #64]	@ (8004834 <MX_USART1_UART_Init+0x4c>)
 80047f4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80047f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004834 <MX_USART1_UART_Init+0x4c>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004800:	4b0c      	ldr	r3, [pc, #48]	@ (8004834 <MX_USART1_UART_Init+0x4c>)
 8004802:	2200      	movs	r2, #0
 8004804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004806:	4b0b      	ldr	r3, [pc, #44]	@ (8004834 <MX_USART1_UART_Init+0x4c>)
 8004808:	2200      	movs	r2, #0
 800480a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800480c:	4b09      	ldr	r3, [pc, #36]	@ (8004834 <MX_USART1_UART_Init+0x4c>)
 800480e:	220c      	movs	r2, #12
 8004810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004812:	4b08      	ldr	r3, [pc, #32]	@ (8004834 <MX_USART1_UART_Init+0x4c>)
 8004814:	2200      	movs	r2, #0
 8004816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004818:	4b06      	ldr	r3, [pc, #24]	@ (8004834 <MX_USART1_UART_Init+0x4c>)
 800481a:	2200      	movs	r2, #0
 800481c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800481e:	4805      	ldr	r0, [pc, #20]	@ (8004834 <MX_USART1_UART_Init+0x4c>)
 8004820:	f006 fc2a 	bl	800b078 <HAL_UART_Init>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800482a:	f000 fb0b 	bl	8004e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800482e:	bf00      	nop
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20000410 	.word	0x20000410
 8004838:	40011000 	.word	0x40011000

0800483c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004840:	4b11      	ldr	r3, [pc, #68]	@ (8004888 <MX_USART2_UART_Init+0x4c>)
 8004842:	4a12      	ldr	r2, [pc, #72]	@ (800488c <MX_USART2_UART_Init+0x50>)
 8004844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004846:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <MX_USART2_UART_Init+0x4c>)
 8004848:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800484c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800484e:	4b0e      	ldr	r3, [pc, #56]	@ (8004888 <MX_USART2_UART_Init+0x4c>)
 8004850:	2200      	movs	r2, #0
 8004852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004854:	4b0c      	ldr	r3, [pc, #48]	@ (8004888 <MX_USART2_UART_Init+0x4c>)
 8004856:	2200      	movs	r2, #0
 8004858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800485a:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <MX_USART2_UART_Init+0x4c>)
 800485c:	2200      	movs	r2, #0
 800485e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004860:	4b09      	ldr	r3, [pc, #36]	@ (8004888 <MX_USART2_UART_Init+0x4c>)
 8004862:	220c      	movs	r2, #12
 8004864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004866:	4b08      	ldr	r3, [pc, #32]	@ (8004888 <MX_USART2_UART_Init+0x4c>)
 8004868:	2200      	movs	r2, #0
 800486a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800486c:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <MX_USART2_UART_Init+0x4c>)
 800486e:	2200      	movs	r2, #0
 8004870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004872:	4805      	ldr	r0, [pc, #20]	@ (8004888 <MX_USART2_UART_Init+0x4c>)
 8004874:	f006 fc00 	bl	800b078 <HAL_UART_Init>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800487e:	f000 fae1 	bl	8004e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000458 	.word	0x20000458
 800488c:	40004400 	.word	0x40004400

08004890 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004894:	4b11      	ldr	r3, [pc, #68]	@ (80048dc <MX_USART3_UART_Init+0x4c>)
 8004896:	4a12      	ldr	r2, [pc, #72]	@ (80048e0 <MX_USART3_UART_Init+0x50>)
 8004898:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800489a:	4b10      	ldr	r3, [pc, #64]	@ (80048dc <MX_USART3_UART_Init+0x4c>)
 800489c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80048a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80048a2:	4b0e      	ldr	r3, [pc, #56]	@ (80048dc <MX_USART3_UART_Init+0x4c>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80048a8:	4b0c      	ldr	r3, [pc, #48]	@ (80048dc <MX_USART3_UART_Init+0x4c>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80048ae:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <MX_USART3_UART_Init+0x4c>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80048b4:	4b09      	ldr	r3, [pc, #36]	@ (80048dc <MX_USART3_UART_Init+0x4c>)
 80048b6:	220c      	movs	r2, #12
 80048b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ba:	4b08      	ldr	r3, [pc, #32]	@ (80048dc <MX_USART3_UART_Init+0x4c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80048c0:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <MX_USART3_UART_Init+0x4c>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80048c6:	4805      	ldr	r0, [pc, #20]	@ (80048dc <MX_USART3_UART_Init+0x4c>)
 80048c8:	f006 fbd6 	bl	800b078 <HAL_UART_Init>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80048d2:	f000 fab7 	bl	8004e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	200004a0 	.word	0x200004a0
 80048e0:	40004800 	.word	0x40004800

080048e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08c      	sub	sp, #48	@ 0x30
 80048e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ea:	f107 031c 	add.w	r3, r7, #28
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	605a      	str	r2, [r3, #4]
 80048f4:	609a      	str	r2, [r3, #8]
 80048f6:	60da      	str	r2, [r3, #12]
 80048f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	4bb9      	ldr	r3, [pc, #740]	@ (8004be4 <MX_GPIO_Init+0x300>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004902:	4ab8      	ldr	r2, [pc, #736]	@ (8004be4 <MX_GPIO_Init+0x300>)
 8004904:	f043 0310 	orr.w	r3, r3, #16
 8004908:	6313      	str	r3, [r2, #48]	@ 0x30
 800490a:	4bb6      	ldr	r3, [pc, #728]	@ (8004be4 <MX_GPIO_Init+0x300>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	61bb      	str	r3, [r7, #24]
 8004914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	4bb2      	ldr	r3, [pc, #712]	@ (8004be4 <MX_GPIO_Init+0x300>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491e:	4ab1      	ldr	r2, [pc, #708]	@ (8004be4 <MX_GPIO_Init+0x300>)
 8004920:	f043 0304 	orr.w	r3, r3, #4
 8004924:	6313      	str	r3, [r2, #48]	@ 0x30
 8004926:	4baf      	ldr	r3, [pc, #700]	@ (8004be4 <MX_GPIO_Init+0x300>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	4bab      	ldr	r3, [pc, #684]	@ (8004be4 <MX_GPIO_Init+0x300>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493a:	4aaa      	ldr	r2, [pc, #680]	@ (8004be4 <MX_GPIO_Init+0x300>)
 800493c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004940:	6313      	str	r3, [r2, #48]	@ 0x30
 8004942:	4ba8      	ldr	r3, [pc, #672]	@ (8004be4 <MX_GPIO_Init+0x300>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	4ba4      	ldr	r3, [pc, #656]	@ (8004be4 <MX_GPIO_Init+0x300>)
 8004954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004956:	4aa3      	ldr	r2, [pc, #652]	@ (8004be4 <MX_GPIO_Init+0x300>)
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	6313      	str	r3, [r2, #48]	@ 0x30
 800495e:	4ba1      	ldr	r3, [pc, #644]	@ (8004be4 <MX_GPIO_Init+0x300>)
 8004960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	4b9d      	ldr	r3, [pc, #628]	@ (8004be4 <MX_GPIO_Init+0x300>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004972:	4a9c      	ldr	r2, [pc, #624]	@ (8004be4 <MX_GPIO_Init+0x300>)
 8004974:	f043 0302 	orr.w	r3, r3, #2
 8004978:	6313      	str	r3, [r2, #48]	@ 0x30
 800497a:	4b9a      	ldr	r3, [pc, #616]	@ (8004be4 <MX_GPIO_Init+0x300>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004986:	2300      	movs	r3, #0
 8004988:	607b      	str	r3, [r7, #4]
 800498a:	4b96      	ldr	r3, [pc, #600]	@ (8004be4 <MX_GPIO_Init+0x300>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498e:	4a95      	ldr	r2, [pc, #596]	@ (8004be4 <MX_GPIO_Init+0x300>)
 8004990:	f043 0308 	orr.w	r3, r3, #8
 8004994:	6313      	str	r3, [r2, #48]	@ 0x30
 8004996:	4b93      	ldr	r3, [pc, #588]	@ (8004be4 <MX_GPIO_Init+0x300>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80049a2:	2200      	movs	r2, #0
 80049a4:	217f      	movs	r1, #127	@ 0x7f
 80049a6:	4890      	ldr	r0, [pc, #576]	@ (8004be8 <MX_GPIO_Init+0x304>)
 80049a8:	f004 f996 	bl	8008cd8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 80049ac:	2200      	movs	r2, #0
 80049ae:	f24f 0130 	movw	r1, #61488	@ 0xf030
 80049b2:	488e      	ldr	r0, [pc, #568]	@ (8004bec <MX_GPIO_Init+0x308>)
 80049b4:	f004 f990 	bl	8008cd8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80049b8:	2200      	movs	r2, #0
 80049ba:	f244 0107 	movw	r1, #16391	@ 0x4007
 80049be:	488c      	ldr	r0, [pc, #560]	@ (8004bf0 <MX_GPIO_Init+0x30c>)
 80049c0:	f004 f98a 	bl	8008cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 80049c4:	230f      	movs	r3, #15
 80049c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80049c8:	2311      	movs	r3, #17
 80049ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049d0:	2303      	movs	r3, #3
 80049d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049d4:	f107 031c 	add.w	r3, r7, #28
 80049d8:	4619      	mov	r1, r3
 80049da:	4883      	ldr	r0, [pc, #524]	@ (8004be8 <MX_GPIO_Init+0x304>)
 80049dc:	f003 ffc8 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80049e0:	2370      	movs	r3, #112	@ 0x70
 80049e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80049e4:	2311      	movs	r3, #17
 80049e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e8:	2300      	movs	r3, #0
 80049ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ec:	2300      	movs	r3, #0
 80049ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049f0:	f107 031c 	add.w	r3, r7, #28
 80049f4:	4619      	mov	r1, r3
 80049f6:	487c      	ldr	r0, [pc, #496]	@ (8004be8 <MX_GPIO_Init+0x304>)
 80049f8:	f003 ffba 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80049fc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004a02:	2311      	movs	r3, #17
 8004a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a0e:	f107 031c 	add.w	r3, r7, #28
 8004a12:	4619      	mov	r1, r3
 8004a14:	4875      	ldr	r0, [pc, #468]	@ (8004bec <MX_GPIO_Init+0x308>)
 8004a16:	f003 ffab 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pins : EA_2_Pin EinA_1_Pin */
  GPIO_InitStruct.Pin = EA_2_Pin|EinA_1_Pin;
 8004a1a:	2309      	movs	r3, #9
 8004a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a22:	2301      	movs	r3, #1
 8004a24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a26:	f107 031c 	add.w	r3, r7, #28
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	486f      	ldr	r0, [pc, #444]	@ (8004bec <MX_GPIO_Init+0x308>)
 8004a2e:	f003 ff9f 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_2_Pin EinB_1_Pin */
  GPIO_InitStruct.Pin = EB_2_Pin|EinB_1_Pin;
 8004a32:	2306      	movs	r3, #6
 8004a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a36:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a40:	f107 031c 	add.w	r3, r7, #28
 8004a44:	4619      	mov	r1, r3
 8004a46:	4869      	ldr	r0, [pc, #420]	@ (8004bec <MX_GPIO_Init+0x308>)
 8004a48:	f003 ff92 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinB_2_Pin EinB_4_Pin */
  GPIO_InitStruct.Pin = EinB_2_Pin|EinB_4_Pin;
 8004a4c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8004a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a5c:	f107 031c 	add.w	r3, r7, #28
 8004a60:	4619      	mov	r1, r3
 8004a62:	4864      	ldr	r0, [pc, #400]	@ (8004bf4 <MX_GPIO_Init+0x310>)
 8004a64:	f003 ff84 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinA_2_Pin EinA_4_Pin EA_1_Pin */
  GPIO_InitStruct.Pin = EinA_2_Pin|EinA_4_Pin|EA_1_Pin;
 8004a68:	f248 4302 	movw	r3, #33794	@ 0x8402
 8004a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a72:	2301      	movs	r3, #1
 8004a74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a76:	f107 031c 	add.w	r3, r7, #28
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	485d      	ldr	r0, [pc, #372]	@ (8004bf4 <MX_GPIO_Init+0x310>)
 8004a7e:	f003 ff77 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 8004a82:	f241 0330 	movw	r3, #4144	@ 0x1030
 8004a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004a88:	2311      	movs	r3, #17
 8004a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a90:	2303      	movs	r3, #3
 8004a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a94:	f107 031c 	add.w	r3, r7, #28
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4854      	ldr	r0, [pc, #336]	@ (8004bec <MX_GPIO_Init+0x308>)
 8004a9c:	f003 ff68 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 8004aa0:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8004aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004aa6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004aac:	2301      	movs	r3, #1
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ab0:	f107 031c 	add.w	r3, r7, #28
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	484c      	ldr	r0, [pc, #304]	@ (8004be8 <MX_GPIO_Init+0x304>)
 8004ab8:	f003 ff5a 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinA_3_Pin */
  GPIO_InitStruct.Pin = EinA_3_Pin;
 8004abc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinA_3_GPIO_Port, &GPIO_InitStruct);
 8004aca:	f107 031c 	add.w	r3, r7, #28
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4847      	ldr	r0, [pc, #284]	@ (8004bf0 <MX_GPIO_Init+0x30c>)
 8004ad2:	f003 ff4d 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinB_3_Pin */
  GPIO_InitStruct.Pin = EinB_3_Pin;
 8004ad6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004adc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinB_3_GPIO_Port, &GPIO_InitStruct);
 8004ae6:	f107 031c 	add.w	r3, r7, #28
 8004aea:	4619      	mov	r1, r3
 8004aec:	4840      	ldr	r0, [pc, #256]	@ (8004bf0 <MX_GPIO_Init+0x30c>)
 8004aee:	f003 ff3f 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004af2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004af8:	2301      	movs	r3, #1
 8004afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004afc:	2302      	movs	r3, #2
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b00:	2300      	movs	r3, #0
 8004b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b04:	f107 031c 	add.w	r3, r7, #28
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4839      	ldr	r0, [pc, #228]	@ (8004bf0 <MX_GPIO_Init+0x30c>)
 8004b0c:	f003 ff30 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_4_Pin */
  GPIO_InitStruct.Pin = Button_4_Pin;
 8004b10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b16:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_4_GPIO_Port, &GPIO_InitStruct);
 8004b20:	f107 031c 	add.w	r3, r7, #28
 8004b24:	4619      	mov	r1, r3
 8004b26:	4832      	ldr	r0, [pc, #200]	@ (8004bf0 <MX_GPIO_Init+0x30c>)
 8004b28:	f003 ff22 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004b2c:	2307      	movs	r3, #7
 8004b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004b30:	2311      	movs	r3, #17
 8004b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b3c:	f107 031c 	add.w	r3, r7, #28
 8004b40:	4619      	mov	r1, r3
 8004b42:	482b      	ldr	r0, [pc, #172]	@ (8004bf0 <MX_GPIO_Init+0x30c>)
 8004b44:	f003 ff14 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_1_Pin EB_3_Pin */
  GPIO_InitStruct.Pin = EB_1_Pin|EB_3_Pin;
 8004b48:	2328      	movs	r3, #40	@ 0x28
 8004b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b4c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b52:	2301      	movs	r3, #1
 8004b54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b56:	f107 031c 	add.w	r3, r7, #28
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4826      	ldr	r0, [pc, #152]	@ (8004bf8 <MX_GPIO_Init+0x314>)
 8004b5e:	f003 ff07 	bl	8008970 <HAL_GPIO_Init>

  /*Configure GPIO pin : EA_3_Pin */
  GPIO_InitStruct.Pin = EA_3_Pin;
 8004b62:	2310      	movs	r3, #16
 8004b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b66:	2300      	movs	r3, #0
 8004b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EA_3_GPIO_Port, &GPIO_InitStruct);
 8004b6e:	f107 031c 	add.w	r3, r7, #28
 8004b72:	4619      	mov	r1, r3
 8004b74:	4820      	ldr	r0, [pc, #128]	@ (8004bf8 <MX_GPIO_Init+0x314>)
 8004b76:	f003 fefb 	bl	8008970 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	2006      	movs	r0, #6
 8004b80:	f003 fe2d 	bl	80087de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004b84:	2006      	movs	r0, #6
 8004b86:	f003 fe46 	bl	8008816 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	2007      	movs	r0, #7
 8004b90:	f003 fe25 	bl	80087de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004b94:	2007      	movs	r0, #7
 8004b96:	f003 fe3e 	bl	8008816 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	2008      	movs	r0, #8
 8004ba0:	f003 fe1d 	bl	80087de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004ba4:	2008      	movs	r0, #8
 8004ba6:	f003 fe36 	bl	8008816 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8004baa:	2200      	movs	r2, #0
 8004bac:	2100      	movs	r1, #0
 8004bae:	2009      	movs	r0, #9
 8004bb0:	f003 fe15 	bl	80087de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004bb4:	2009      	movs	r0, #9
 8004bb6:	f003 fe2e 	bl	8008816 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	2017      	movs	r0, #23
 8004bc0:	f003 fe0d 	bl	80087de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004bc4:	2017      	movs	r0, #23
 8004bc6:	f003 fe26 	bl	8008816 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2100      	movs	r1, #0
 8004bce:	2028      	movs	r0, #40	@ 0x28
 8004bd0:	f003 fe05 	bl	80087de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004bd4:	2028      	movs	r0, #40	@ 0x28
 8004bd6:	f003 fe1e 	bl	8008816 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004bda:	bf00      	nop
 8004bdc:	3730      	adds	r7, #48	@ 0x30
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800
 8004be8:	40021000 	.word	0x40021000
 8004bec:	40020800 	.word	0x40020800
 8004bf0:	40020c00 	.word	0x40020c00
 8004bf4:	40020000 	.word	0x40020000
 8004bf8:	40020400 	.word	0x40020400

08004bfc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a7b      	ldr	r2, [pc, #492]	@ (8004df8 <HAL_UART_RxCpltCallback+0x1fc>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d14f      	bne.n	8004cae <HAL_UART_RxCpltCallback+0xb2>
	{
		if(receive[rxIndex] == '\r' || receive[rxIndex] == '\n')
 8004c0e:	4b7b      	ldr	r3, [pc, #492]	@ (8004dfc <HAL_UART_RxCpltCallback+0x200>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a7b      	ldr	r2, [pc, #492]	@ (8004e00 <HAL_UART_RxCpltCallback+0x204>)
 8004c14:	5cd3      	ldrb	r3, [r2, r3]
 8004c16:	2b0d      	cmp	r3, #13
 8004c18:	d005      	beq.n	8004c26 <HAL_UART_RxCpltCallback+0x2a>
 8004c1a:	4b78      	ldr	r3, [pc, #480]	@ (8004dfc <HAL_UART_RxCpltCallback+0x200>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a78      	ldr	r2, [pc, #480]	@ (8004e00 <HAL_UART_RxCpltCallback+0x204>)
 8004c20:	5cd3      	ldrb	r3, [r2, r3]
 8004c22:	2b0a      	cmp	r3, #10
 8004c24:	d134      	bne.n	8004c90 <HAL_UART_RxCpltCallback+0x94>
		{
			receive[rxIndex] = '\0';
 8004c26:	4b75      	ldr	r3, [pc, #468]	@ (8004dfc <HAL_UART_RxCpltCallback+0x200>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a75      	ldr	r2, [pc, #468]	@ (8004e00 <HAL_UART_RxCpltCallback+0x204>)
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receive, ",");
 8004c30:	4974      	ldr	r1, [pc, #464]	@ (8004e04 <HAL_UART_RxCpltCallback+0x208>)
 8004c32:	4873      	ldr	r0, [pc, #460]	@ (8004e00 <HAL_UART_RxCpltCallback+0x204>)
 8004c34:	f008 ffe4 	bl	800dc00 <strtok>
 8004c38:	6178      	str	r0, [r7, #20]
			dataIndex = 0;
 8004c3a:	4b73      	ldr	r3, [pc, #460]	@ (8004e08 <HAL_UART_RxCpltCallback+0x20c>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8004c40:	e015      	b.n	8004c6e <HAL_UART_RxCpltCallback+0x72>
			{
				sensorData[dataIndex++] = atof(token);
 8004c42:	4b71      	ldr	r3, [pc, #452]	@ (8004e08 <HAL_UART_RxCpltCallback+0x20c>)
 8004c44:	681c      	ldr	r4, [r3, #0]
 8004c46:	1c63      	adds	r3, r4, #1
 8004c48:	4a6f      	ldr	r2, [pc, #444]	@ (8004e08 <HAL_UART_RxCpltCallback+0x20c>)
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	6978      	ldr	r0, [r7, #20]
 8004c4e:	f007 f987 	bl	800bf60 <atof>
 8004c52:	eeb0 7a40 	vmov.f32	s14, s0
 8004c56:	eef0 7a60 	vmov.f32	s15, s1
 8004c5a:	4a6c      	ldr	r2, [pc, #432]	@ (8004e0c <HAL_UART_RxCpltCallback+0x210>)
 8004c5c:	00e3      	lsls	r3, r4, #3
 8004c5e:	4413      	add	r3, r2
 8004c60:	ed83 7b00 	vstr	d7, [r3]
				token = strtok(NULL, ",");
 8004c64:	4967      	ldr	r1, [pc, #412]	@ (8004e04 <HAL_UART_RxCpltCallback+0x208>)
 8004c66:	2000      	movs	r0, #0
 8004c68:	f008 ffca 	bl	800dc00 <strtok>
 8004c6c:	6178      	str	r0, [r7, #20]
			while(token != NULL)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e6      	bne.n	8004c42 <HAL_UART_RxCpltCallback+0x46>
			}
			memset(receive, 0, sizeof(receive));
 8004c74:	2232      	movs	r2, #50	@ 0x32
 8004c76:	2100      	movs	r1, #0
 8004c78:	4861      	ldr	r0, [pc, #388]	@ (8004e00 <HAL_UART_RxCpltCallback+0x204>)
 8004c7a:	f008 ffa6 	bl	800dbca <memset>
			rxIndex = 0;
 8004c7e:	4b5f      	ldr	r3, [pc, #380]	@ (8004dfc <HAL_UART_RxCpltCallback+0x200>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, receive, 1);
 8004c84:	2201      	movs	r2, #1
 8004c86:	495e      	ldr	r1, [pc, #376]	@ (8004e00 <HAL_UART_RxCpltCallback+0x204>)
 8004c88:	4861      	ldr	r0, [pc, #388]	@ (8004e10 <HAL_UART_RxCpltCallback+0x214>)
 8004c8a:	f006 fa45 	bl	800b118 <HAL_UART_Receive_IT>
		{
 8004c8e:	e0ae      	b.n	8004dee <HAL_UART_RxCpltCallback+0x1f2>
		}
		else
		{
			rxIndex++;
 8004c90:	4b5a      	ldr	r3, [pc, #360]	@ (8004dfc <HAL_UART_RxCpltCallback+0x200>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	4a59      	ldr	r2, [pc, #356]	@ (8004dfc <HAL_UART_RxCpltCallback+0x200>)
 8004c98:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart1, receive + rxIndex, 1);
 8004c9a:	4b58      	ldr	r3, [pc, #352]	@ (8004dfc <HAL_UART_RxCpltCallback+0x200>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a58      	ldr	r2, [pc, #352]	@ (8004e00 <HAL_UART_RxCpltCallback+0x204>)
 8004ca0:	4413      	add	r3, r2
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	485a      	ldr	r0, [pc, #360]	@ (8004e10 <HAL_UART_RxCpltCallback+0x214>)
 8004ca8:	f006 fa36 	bl	800b118 <HAL_UART_Receive_IT>
		{
			indexPROX++;
			HAL_UART_Receive_IT(&huart3, receivePROX + indexPROX, 1);
		}
	}
}
 8004cac:	e09f      	b.n	8004dee <HAL_UART_RxCpltCallback+0x1f2>
	else if(huart->Instance == USART2)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a58      	ldr	r2, [pc, #352]	@ (8004e14 <HAL_UART_RxCpltCallback+0x218>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d14a      	bne.n	8004d4e <HAL_UART_RxCpltCallback+0x152>
		if(receiveCAM[indexCAM] == '\r' || receiveCAM[indexCAM] == '\n')
 8004cb8:	4b57      	ldr	r3, [pc, #348]	@ (8004e18 <HAL_UART_RxCpltCallback+0x21c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a57      	ldr	r2, [pc, #348]	@ (8004e1c <HAL_UART_RxCpltCallback+0x220>)
 8004cbe:	5cd3      	ldrb	r3, [r2, r3]
 8004cc0:	2b0d      	cmp	r3, #13
 8004cc2:	d005      	beq.n	8004cd0 <HAL_UART_RxCpltCallback+0xd4>
 8004cc4:	4b54      	ldr	r3, [pc, #336]	@ (8004e18 <HAL_UART_RxCpltCallback+0x21c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a54      	ldr	r2, [pc, #336]	@ (8004e1c <HAL_UART_RxCpltCallback+0x220>)
 8004cca:	5cd3      	ldrb	r3, [r2, r3]
 8004ccc:	2b0a      	cmp	r3, #10
 8004cce:	d12f      	bne.n	8004d30 <HAL_UART_RxCpltCallback+0x134>
			receiveCAM[indexCAM] = '\0';
 8004cd0:	4b51      	ldr	r3, [pc, #324]	@ (8004e18 <HAL_UART_RxCpltCallback+0x21c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a51      	ldr	r2, [pc, #324]	@ (8004e1c <HAL_UART_RxCpltCallback+0x220>)
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveCAM, ",");
 8004cda:	494a      	ldr	r1, [pc, #296]	@ (8004e04 <HAL_UART_RxCpltCallback+0x208>)
 8004cdc:	484f      	ldr	r0, [pc, #316]	@ (8004e1c <HAL_UART_RxCpltCallback+0x220>)
 8004cde:	f008 ff8f 	bl	800dc00 <strtok>
 8004ce2:	6138      	str	r0, [r7, #16]
			dataindexCAM = 0;
 8004ce4:	4b4e      	ldr	r3, [pc, #312]	@ (8004e20 <HAL_UART_RxCpltCallback+0x224>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8004cea:	e010      	b.n	8004d0e <HAL_UART_RxCpltCallback+0x112>
				camera[dataindexCAM++] = atoi(token);
 8004cec:	4b4c      	ldr	r3, [pc, #304]	@ (8004e20 <HAL_UART_RxCpltCallback+0x224>)
 8004cee:	681c      	ldr	r4, [r3, #0]
 8004cf0:	1c63      	adds	r3, r4, #1
 8004cf2:	4a4b      	ldr	r2, [pc, #300]	@ (8004e20 <HAL_UART_RxCpltCallback+0x224>)
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	6938      	ldr	r0, [r7, #16]
 8004cf8:	f007 f935 	bl	800bf66 <atoi>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	4a49      	ldr	r2, [pc, #292]	@ (8004e24 <HAL_UART_RxCpltCallback+0x228>)
 8004d00:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 8004d04:	493f      	ldr	r1, [pc, #252]	@ (8004e04 <HAL_UART_RxCpltCallback+0x208>)
 8004d06:	2000      	movs	r0, #0
 8004d08:	f008 ff7a 	bl	800dc00 <strtok>
 8004d0c:	6138      	str	r0, [r7, #16]
			while(token != NULL)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1eb      	bne.n	8004cec <HAL_UART_RxCpltCallback+0xf0>
			memset(receiveCAM, 0, sizeof(receiveCAM));
 8004d14:	2232      	movs	r2, #50	@ 0x32
 8004d16:	2100      	movs	r1, #0
 8004d18:	4840      	ldr	r0, [pc, #256]	@ (8004e1c <HAL_UART_RxCpltCallback+0x220>)
 8004d1a:	f008 ff56 	bl	800dbca <memset>
			indexCAM = 0;
 8004d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e18 <HAL_UART_RxCpltCallback+0x21c>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, receiveCAM, 1);
 8004d24:	2201      	movs	r2, #1
 8004d26:	493d      	ldr	r1, [pc, #244]	@ (8004e1c <HAL_UART_RxCpltCallback+0x220>)
 8004d28:	483f      	ldr	r0, [pc, #252]	@ (8004e28 <HAL_UART_RxCpltCallback+0x22c>)
 8004d2a:	f006 f9f5 	bl	800b118 <HAL_UART_Receive_IT>
		{
 8004d2e:	e05e      	b.n	8004dee <HAL_UART_RxCpltCallback+0x1f2>
			indexCAM++;
 8004d30:	4b39      	ldr	r3, [pc, #228]	@ (8004e18 <HAL_UART_RxCpltCallback+0x21c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3301      	adds	r3, #1
 8004d36:	4a38      	ldr	r2, [pc, #224]	@ (8004e18 <HAL_UART_RxCpltCallback+0x21c>)
 8004d38:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2, receiveCAM + indexCAM, 1);
 8004d3a:	4b37      	ldr	r3, [pc, #220]	@ (8004e18 <HAL_UART_RxCpltCallback+0x21c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a37      	ldr	r2, [pc, #220]	@ (8004e1c <HAL_UART_RxCpltCallback+0x220>)
 8004d40:	4413      	add	r3, r2
 8004d42:	2201      	movs	r2, #1
 8004d44:	4619      	mov	r1, r3
 8004d46:	4838      	ldr	r0, [pc, #224]	@ (8004e28 <HAL_UART_RxCpltCallback+0x22c>)
 8004d48:	f006 f9e6 	bl	800b118 <HAL_UART_Receive_IT>
}
 8004d4c:	e04f      	b.n	8004dee <HAL_UART_RxCpltCallback+0x1f2>
	else if(huart->Instance == USART3)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a36      	ldr	r2, [pc, #216]	@ (8004e2c <HAL_UART_RxCpltCallback+0x230>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d14a      	bne.n	8004dee <HAL_UART_RxCpltCallback+0x1f2>
		if(receivePROX[indexPROX] == '\r' || receivePROX[indexPROX] == '\n')
 8004d58:	4b35      	ldr	r3, [pc, #212]	@ (8004e30 <HAL_UART_RxCpltCallback+0x234>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a35      	ldr	r2, [pc, #212]	@ (8004e34 <HAL_UART_RxCpltCallback+0x238>)
 8004d5e:	5cd3      	ldrb	r3, [r2, r3]
 8004d60:	2b0d      	cmp	r3, #13
 8004d62:	d005      	beq.n	8004d70 <HAL_UART_RxCpltCallback+0x174>
 8004d64:	4b32      	ldr	r3, [pc, #200]	@ (8004e30 <HAL_UART_RxCpltCallback+0x234>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a32      	ldr	r2, [pc, #200]	@ (8004e34 <HAL_UART_RxCpltCallback+0x238>)
 8004d6a:	5cd3      	ldrb	r3, [r2, r3]
 8004d6c:	2b0a      	cmp	r3, #10
 8004d6e:	d12f      	bne.n	8004dd0 <HAL_UART_RxCpltCallback+0x1d4>
			receivePROX[indexPROX] = '\0';
 8004d70:	4b2f      	ldr	r3, [pc, #188]	@ (8004e30 <HAL_UART_RxCpltCallback+0x234>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a2f      	ldr	r2, [pc, #188]	@ (8004e34 <HAL_UART_RxCpltCallback+0x238>)
 8004d76:	2100      	movs	r1, #0
 8004d78:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receivePROX, ",");
 8004d7a:	4922      	ldr	r1, [pc, #136]	@ (8004e04 <HAL_UART_RxCpltCallback+0x208>)
 8004d7c:	482d      	ldr	r0, [pc, #180]	@ (8004e34 <HAL_UART_RxCpltCallback+0x238>)
 8004d7e:	f008 ff3f 	bl	800dc00 <strtok>
 8004d82:	60f8      	str	r0, [r7, #12]
			dataindexPROX = 0;
 8004d84:	4b2c      	ldr	r3, [pc, #176]	@ (8004e38 <HAL_UART_RxCpltCallback+0x23c>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8004d8a:	e010      	b.n	8004dae <HAL_UART_RxCpltCallback+0x1b2>
				proximity[dataindexPROX++] = atoi(token);
 8004d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8004e38 <HAL_UART_RxCpltCallback+0x23c>)
 8004d8e:	681c      	ldr	r4, [r3, #0]
 8004d90:	1c63      	adds	r3, r4, #1
 8004d92:	4a29      	ldr	r2, [pc, #164]	@ (8004e38 <HAL_UART_RxCpltCallback+0x23c>)
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f007 f8e5 	bl	800bf66 <atoi>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4a27      	ldr	r2, [pc, #156]	@ (8004e3c <HAL_UART_RxCpltCallback+0x240>)
 8004da0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 8004da4:	4917      	ldr	r1, [pc, #92]	@ (8004e04 <HAL_UART_RxCpltCallback+0x208>)
 8004da6:	2000      	movs	r0, #0
 8004da8:	f008 ff2a 	bl	800dc00 <strtok>
 8004dac:	60f8      	str	r0, [r7, #12]
			while(token != NULL)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1eb      	bne.n	8004d8c <HAL_UART_RxCpltCallback+0x190>
			memset(receivePROX, 0, sizeof(receivePROX));
 8004db4:	2232      	movs	r2, #50	@ 0x32
 8004db6:	2100      	movs	r1, #0
 8004db8:	481e      	ldr	r0, [pc, #120]	@ (8004e34 <HAL_UART_RxCpltCallback+0x238>)
 8004dba:	f008 ff06 	bl	800dbca <memset>
			indexPROX = 0;
 8004dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8004e30 <HAL_UART_RxCpltCallback+0x234>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, receivePROX, 1);
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	491b      	ldr	r1, [pc, #108]	@ (8004e34 <HAL_UART_RxCpltCallback+0x238>)
 8004dc8:	481d      	ldr	r0, [pc, #116]	@ (8004e40 <HAL_UART_RxCpltCallback+0x244>)
 8004dca:	f006 f9a5 	bl	800b118 <HAL_UART_Receive_IT>
		{
 8004dce:	e00e      	b.n	8004dee <HAL_UART_RxCpltCallback+0x1f2>
			indexPROX++;
 8004dd0:	4b17      	ldr	r3, [pc, #92]	@ (8004e30 <HAL_UART_RxCpltCallback+0x234>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	4a16      	ldr	r2, [pc, #88]	@ (8004e30 <HAL_UART_RxCpltCallback+0x234>)
 8004dd8:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart3, receivePROX + indexPROX, 1);
 8004dda:	4b15      	ldr	r3, [pc, #84]	@ (8004e30 <HAL_UART_RxCpltCallback+0x234>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a15      	ldr	r2, [pc, #84]	@ (8004e34 <HAL_UART_RxCpltCallback+0x238>)
 8004de0:	4413      	add	r3, r2
 8004de2:	2201      	movs	r2, #1
 8004de4:	4619      	mov	r1, r3
 8004de6:	4816      	ldr	r0, [pc, #88]	@ (8004e40 <HAL_UART_RxCpltCallback+0x244>)
 8004de8:	f006 f996 	bl	800b118 <HAL_UART_Receive_IT>
}
 8004dec:	e7ff      	b.n	8004dee <HAL_UART_RxCpltCallback+0x1f2>
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd90      	pop	{r4, r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40011000 	.word	0x40011000
 8004dfc:	20000538 	.word	0x20000538
 8004e00:	20000504 	.word	0x20000504
 8004e04:	08012370 	.word	0x08012370
 8004e08:	2000053c 	.word	0x2000053c
 8004e0c:	20000540 	.word	0x20000540
 8004e10:	20000410 	.word	0x20000410
 8004e14:	40004400 	.word	0x40004400
 8004e18:	20000584 	.word	0x20000584
 8004e1c:	20000550 	.word	0x20000550
 8004e20:	20000588 	.word	0x20000588
 8004e24:	2000058c 	.word	0x2000058c
 8004e28:	20000458 	.word	0x20000458
 8004e2c:	40004800 	.word	0x40004800
 8004e30:	200005d4 	.word	0x200005d4
 8004e34:	200005a0 	.word	0x200005a0
 8004e38:	200005d8 	.word	0x200005d8
 8004e3c:	200005dc 	.word	0x200005dc
 8004e40:	200004a0 	.word	0x200004a0

08004e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e48:	b672      	cpsid	i
}
 8004e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e4c:	bf00      	nop
 8004e4e:	e7fd      	b.n	8004e4c <Error_Handler+0x8>

08004e50 <odometry>:

extern int camera[5];
extern int proximity[2];

robotPosition odometry()
{
 8004e50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e54:	b0bc      	sub	sp, #240	@ 0xf0
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
    robotPosition currentPosition;

    /* ENCODER INTERNAL */
    int dn1_in = counterIN1 - oldEncIN1;
 8004e5a:	4bc5      	ldr	r3, [pc, #788]	@ (8005170 <odometry+0x320>)
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4bc5      	ldr	r3, [pc, #788]	@ (8005174 <odometry+0x324>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int dn2_in = counterIN2 - oldEncIN2;
 8004e68:	4bc3      	ldr	r3, [pc, #780]	@ (8005178 <odometry+0x328>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	4bc3      	ldr	r3, [pc, #780]	@ (800517c <odometry+0x32c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    int dn3_in = counterIN3 - oldEncIN3;
 8004e76:	4bc2      	ldr	r3, [pc, #776]	@ (8005180 <odometry+0x330>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4bc2      	ldr	r3, [pc, #776]	@ (8005184 <odometry+0x334>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    int dn4_in = counterIN4 - oldEncIN4;
 8004e84:	4bc0      	ldr	r3, [pc, #768]	@ (8005188 <odometry+0x338>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	4bc0      	ldr	r3, [pc, #768]	@ (800518c <odometry+0x33c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    oldEncIN1 = counterIN1;
 8004e92:	4bb7      	ldr	r3, [pc, #732]	@ (8005170 <odometry+0x320>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4ab7      	ldr	r2, [pc, #732]	@ (8005174 <odometry+0x324>)
 8004e98:	6013      	str	r3, [r2, #0]
    oldEncIN2 = counterIN2;
 8004e9a:	4bb7      	ldr	r3, [pc, #732]	@ (8005178 <odometry+0x328>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4ab7      	ldr	r2, [pc, #732]	@ (800517c <odometry+0x32c>)
 8004ea0:	6013      	str	r3, [r2, #0]
    oldEncIN3 = counterIN3;
 8004ea2:	4bb7      	ldr	r3, [pc, #732]	@ (8005180 <odometry+0x330>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4ab7      	ldr	r2, [pc, #732]	@ (8005184 <odometry+0x334>)
 8004ea8:	6013      	str	r3, [r2, #0]
    oldEncIN4 = counterIN4;
 8004eaa:	4bb7      	ldr	r3, [pc, #732]	@ (8005188 <odometry+0x338>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4ab7      	ldr	r2, [pc, #732]	@ (800518c <odometry+0x33c>)
 8004eb0:	6013      	str	r3, [r2, #0]

    double dthetaIN = mm_per_tick_IN * ((-dn1_in + dn3_in) + (dn2_in - dn4_in))/(m1_m3 * 4);
 8004eb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004eb6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004eba:	1ad2      	subs	r2, r2, r3
 8004ebc:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8004ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec4:	1acb      	subs	r3, r1, r3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fb fb2b 	bl	8000524 <__aeabi_i2d>
 8004ece:	a3a0      	add	r3, pc, #640	@ (adr r3, 8005150 <odometry+0x300>)
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f7fb fb90 	bl	80005f8 <__aeabi_dmul>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4610      	mov	r0, r2
 8004ede:	4619      	mov	r1, r3
 8004ee0:	a39d      	add	r3, pc, #628	@ (adr r3, 8005158 <odometry+0x308>)
 8004ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee6:	f7fb fcb1 	bl	800084c <__aeabi_ddiv>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double dxIN = mm_per_tick_IN * (-dn1_in + dn2_in - dn3_in + dn4_in)/4 * cos(M_PI_4);
 8004ef2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8004ef6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004efa:	1ad2      	subs	r2, r2, r3
 8004efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f00:	1ad2      	subs	r2, r2, r3
 8004f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f06:	4413      	add	r3, r2
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fb fb0b 	bl	8000524 <__aeabi_i2d>
 8004f0e:	a390      	add	r3, pc, #576	@ (adr r3, 8005150 <odometry+0x300>)
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f7fb fb70 	bl	80005f8 <__aeabi_dmul>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	4b9a      	ldr	r3, [pc, #616]	@ (8005190 <odometry+0x340>)
 8004f26:	f7fb fc91 	bl	800084c <__aeabi_ddiv>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4610      	mov	r0, r2
 8004f30:	4619      	mov	r1, r3
 8004f32:	a38b      	add	r3, pc, #556	@ (adr r3, 8005160 <odometry+0x310>)
 8004f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f38:	f7fb fb5e 	bl	80005f8 <__aeabi_dmul>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    double dyIN = mm_per_tick_IN * (dn1_in + dn2_in + dn3_in + dn4_in)/4 * sin(M_PI_4);
 8004f44:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004f48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004f4c:	441a      	add	r2, r3
 8004f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f52:	441a      	add	r2, r3
 8004f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f58:	4413      	add	r3, r2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fb fae2 	bl	8000524 <__aeabi_i2d>
 8004f60:	a37b      	add	r3, pc, #492	@ (adr r3, 8005150 <odometry+0x300>)
 8004f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f66:	f7fb fb47 	bl	80005f8 <__aeabi_dmul>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4610      	mov	r0, r2
 8004f70:	4619      	mov	r1, r3
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	4b86      	ldr	r3, [pc, #536]	@ (8005190 <odometry+0x340>)
 8004f78:	f7fb fc68 	bl	800084c <__aeabi_ddiv>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4610      	mov	r0, r2
 8004f82:	4619      	mov	r1, r3
 8004f84:	a378      	add	r3, pc, #480	@ (adr r3, 8005168 <odometry+0x318>)
 8004f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8a:	f7fb fb35 	bl	80005f8 <__aeabi_dmul>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8

    double distanceIN = hypot(dxIN, dyIN);
 8004f96:	ed97 1b32 	vldr	d1, [r7, #200]	@ 0xc8
 8004f9a:	ed97 0b34 	vldr	d0, [r7, #208]	@ 0xd0
 8004f9e:	f00b fbc7 	bl	8010730 <hypot>
 8004fa2:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0
	double directionIN = atan2(dyIN, dxIN);
 8004fa6:	ed97 1b34 	vldr	d1, [r7, #208]	@ 0xd0
 8004faa:	ed97 0b32 	vldr	d0, [r7, #200]	@ 0xc8
 8004fae:	f00b fbbb 	bl	8010728 <atan2>
 8004fb2:	ed87 0b2e 	vstr	d0, [r7, #184]	@ 0xb8
	double theta_localIN = directionIN - dthetaIN;
 8004fb6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8004fba:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8004fbe:	f7fb f963 	bl	8000288 <__aeabi_dsub>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0

	xLocalIN += distanceIN * cos(theta_localIN);
 8004fca:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8004fce:	f00b fbe3 	bl	8010798 <cos>
 8004fd2:	ec51 0b10 	vmov	r0, r1, d0
 8004fd6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8004fda:	f7fb fb0d 	bl	80005f8 <__aeabi_dmul>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4b6b      	ldr	r3, [pc, #428]	@ (8005194 <odometry+0x344>)
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	f7fb f94e 	bl	800028c <__adddf3>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4967      	ldr	r1, [pc, #412]	@ (8005194 <odometry+0x344>)
 8004ff6:	e9c1 2300 	strd	r2, r3, [r1]
	yLocalIN += distanceIN * sin(theta_localIN);
 8004ffa:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8004ffe:	f00b fc1f 	bl	8010840 <sin>
 8005002:	ec51 0b10 	vmov	r0, r1, d0
 8005006:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800500a:	f7fb faf5 	bl	80005f8 <__aeabi_dmul>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4610      	mov	r0, r2
 8005014:	4619      	mov	r1, r3
 8005016:	4b60      	ldr	r3, [pc, #384]	@ (8005198 <odometry+0x348>)
 8005018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501c:	f7fb f936 	bl	800028c <__adddf3>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	495c      	ldr	r1, [pc, #368]	@ (8005198 <odometry+0x348>)
 8005026:	e9c1 2300 	strd	r2, r3, [r1]

    double thetaIN = headingIN + (dthetaIN / 2.0);
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005032:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8005036:	f7fb fc09 	bl	800084c <__aeabi_ddiv>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4610      	mov	r0, r2
 8005040:	4619      	mov	r1, r3
 8005042:	4b56      	ldr	r3, [pc, #344]	@ (800519c <odometry+0x34c>)
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	f7fb f920 	bl	800028c <__adddf3>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
    xGlobalIN += dxIN * cos(thetaIN) + dyIN * sin(thetaIN);
 8005054:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8005058:	f00b fb9e 	bl	8010798 <cos>
 800505c:	ec51 0b10 	vmov	r0, r1, d0
 8005060:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8005064:	f7fb fac8 	bl	80005f8 <__aeabi_dmul>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4690      	mov	r8, r2
 800506e:	4699      	mov	r9, r3
 8005070:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8005074:	f00b fbe4 	bl	8010840 <sin>
 8005078:	ec51 0b10 	vmov	r0, r1, d0
 800507c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8005080:	f7fb faba 	bl	80005f8 <__aeabi_dmul>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4640      	mov	r0, r8
 800508a:	4649      	mov	r1, r9
 800508c:	f7fb f8fe 	bl	800028c <__adddf3>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4610      	mov	r0, r2
 8005096:	4619      	mov	r1, r3
 8005098:	4b41      	ldr	r3, [pc, #260]	@ (80051a0 <odometry+0x350>)
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	f7fb f8f5 	bl	800028c <__adddf3>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	493e      	ldr	r1, [pc, #248]	@ (80051a0 <odometry+0x350>)
 80050a8:	e9c1 2300 	strd	r2, r3, [r1]
    yGlobalIN += -dxIN * sin(thetaIN) + dyIN * cos(thetaIN);
 80050ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050b6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80050ba:	607b      	str	r3, [r7, #4]
 80050bc:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 80050c0:	f00b fbbe 	bl	8010840 <sin>
 80050c4:	ec53 2b10 	vmov	r2, r3, d0
 80050c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050cc:	f7fb fa94 	bl	80005f8 <__aeabi_dmul>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4690      	mov	r8, r2
 80050d6:	4699      	mov	r9, r3
 80050d8:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 80050dc:	f00b fb5c 	bl	8010798 <cos>
 80050e0:	ec51 0b10 	vmov	r0, r1, d0
 80050e4:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80050e8:	f7fb fa86 	bl	80005f8 <__aeabi_dmul>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4640      	mov	r0, r8
 80050f2:	4649      	mov	r1, r9
 80050f4:	f7fb f8ca 	bl	800028c <__adddf3>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	4b28      	ldr	r3, [pc, #160]	@ (80051a4 <odometry+0x354>)
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	f7fb f8c1 	bl	800028c <__adddf3>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4925      	ldr	r1, [pc, #148]	@ (80051a4 <odometry+0x354>)
 8005110:	e9c1 2300 	strd	r2, r3, [r1]
    headingIN += dthetaIN;
 8005114:	4b21      	ldr	r3, [pc, #132]	@ (800519c <odometry+0x34c>)
 8005116:	e9d3 0100 	ldrd	r0, r1, [r3]
 800511a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800511e:	f7fb f8b5 	bl	800028c <__adddf3>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	491d      	ldr	r1, [pc, #116]	@ (800519c <odometry+0x34c>)
 8005128:	e9c1 2300 	strd	r2, r3, [r1]
    /* END */

    /* ENCODER EXTERNAL */
    int dn1 = counter1 - oldEnc1;
 800512c:	4b1e      	ldr	r3, [pc, #120]	@ (80051a8 <odometry+0x358>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b1e      	ldr	r3, [pc, #120]	@ (80051ac <odometry+0x35c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    int dn2 = counter2 - oldEnc2;
 800513a:	4b1d      	ldr	r3, [pc, #116]	@ (80051b0 <odometry+0x360>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4b1d      	ldr	r3, [pc, #116]	@ (80051b4 <odometry+0x364>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005148:	e036      	b.n	80051b8 <odometry+0x368>
 800514a:	bf00      	nop
 800514c:	f3af 8000 	nop.w
 8005150:	458bd930 	.word	0x458bd930
 8005154:	401b4977 	.word	0x401b4977
 8005158:	00000000 	.word	0x00000000
 800515c:	40a45000 	.word	0x40a45000
 8005160:	667f3bcd 	.word	0x667f3bcd
 8005164:	3fe6a09e 	.word	0x3fe6a09e
 8005168:	667f3bcc 	.word	0x667f3bcc
 800516c:	3fe6a09e 	.word	0x3fe6a09e
 8005170:	200004f4 	.word	0x200004f4
 8005174:	20000628 	.word	0x20000628
 8005178:	200004f8 	.word	0x200004f8
 800517c:	2000062c 	.word	0x2000062c
 8005180:	200004fc 	.word	0x200004fc
 8005184:	20000630 	.word	0x20000630
 8005188:	20000500 	.word	0x20000500
 800518c:	20000634 	.word	0x20000634
 8005190:	40100000 	.word	0x40100000
 8005194:	20000648 	.word	0x20000648
 8005198:	20000650 	.word	0x20000650
 800519c:	20000658 	.word	0x20000658
 80051a0:	20000638 	.word	0x20000638
 80051a4:	20000640 	.word	0x20000640
 80051a8:	200004e8 	.word	0x200004e8
 80051ac:	20000610 	.word	0x20000610
 80051b0:	200004ec 	.word	0x200004ec
 80051b4:	20000614 	.word	0x20000614
    int dn3 = counter3 - oldEnc3;
 80051b8:	4bbb      	ldr	r3, [pc, #748]	@ (80054a8 <odometry+0x658>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4bbb      	ldr	r3, [pc, #748]	@ (80054ac <odometry+0x65c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    oldEnc1 = counter1;
 80051c6:	4bba      	ldr	r3, [pc, #744]	@ (80054b0 <odometry+0x660>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4aba      	ldr	r2, [pc, #744]	@ (80054b4 <odometry+0x664>)
 80051cc:	6013      	str	r3, [r2, #0]
    oldEnc2 = counter2;
 80051ce:	4bba      	ldr	r3, [pc, #744]	@ (80054b8 <odometry+0x668>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4aba      	ldr	r2, [pc, #744]	@ (80054bc <odometry+0x66c>)
 80051d4:	6013      	str	r3, [r2, #0]
    oldEnc3 = counter3;
 80051d6:	4bb4      	ldr	r3, [pc, #720]	@ (80054a8 <odometry+0x658>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4ab4      	ldr	r2, [pc, #720]	@ (80054ac <odometry+0x65c>)
 80051dc:	6013      	str	r3, [r2, #0]

    double dtheta = mm_per_tick * (dn2 - dn1) / e1_e2;
 80051de:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80051e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fb f99b 	bl	8000524 <__aeabi_i2d>
 80051ee:	a3aa      	add	r3, pc, #680	@ (adr r3, 8005498 <odometry+0x648>)
 80051f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f4:	f7fb fa00 	bl	80005f8 <__aeabi_dmul>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4610      	mov	r0, r2
 80051fe:	4619      	mov	r1, r3
 8005200:	a3a7      	add	r3, pc, #668	@ (adr r3, 80054a0 <odometry+0x650>)
 8005202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005206:	f7fb fb21 	bl	800084c <__aeabi_ddiv>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    double dx = mm_per_tick * (dn3 + (dn2 - dn1) * e12_e3 / e1_e2);
 8005212:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8005216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	22e6      	movs	r2, #230	@ 0xe6
 800521e:	fb02 f303 	mul.w	r3, r2, r3
 8005222:	4aa7      	ldr	r2, [pc, #668]	@ (80054c0 <odometry+0x670>)
 8005224:	fb82 1203 	smull	r1, r2, r2, r3
 8005228:	441a      	add	r2, r3
 800522a:	1212      	asrs	r2, r2, #8
 800522c:	17db      	asrs	r3, r3, #31
 800522e:	1ad2      	subs	r2, r2, r3
 8005230:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005234:	4413      	add	r3, r2
 8005236:	4618      	mov	r0, r3
 8005238:	f7fb f974 	bl	8000524 <__aeabi_i2d>
 800523c:	a396      	add	r3, pc, #600	@ (adr r3, 8005498 <odometry+0x648>)
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	f7fb f9d9 	bl	80005f8 <__aeabi_dmul>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    double dy = mm_per_tick * (dn1 + dn2) / 2.0;
 800524e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8005252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005256:	4413      	add	r3, r2
 8005258:	4618      	mov	r0, r3
 800525a:	f7fb f963 	bl	8000524 <__aeabi_i2d>
 800525e:	a38e      	add	r3, pc, #568	@ (adr r3, 8005498 <odometry+0x648>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f7fb f9c8 	bl	80005f8 <__aeabi_dmul>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4610      	mov	r0, r2
 800526e:	4619      	mov	r1, r3
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005278:	f7fb fae8 	bl	800084c <__aeabi_ddiv>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    double distance = hypot(dx, dy);
 8005284:	ed97 1b20 	vldr	d1, [r7, #128]	@ 0x80
 8005288:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 800528c:	f00b fa50 	bl	8010730 <hypot>
 8005290:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
	double direction = atan2(dy, dx);
 8005294:	ed97 1b22 	vldr	d1, [r7, #136]	@ 0x88
 8005298:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 800529c:	f00b fa44 	bl	8010728 <atan2>
 80052a0:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
	double theta_local = direction - dtheta;
 80052a4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80052a8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80052ac:	f7fa ffec 	bl	8000288 <__aeabi_dsub>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

	xLocal += distance * cos(theta_local);
 80052b8:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 80052bc:	f00b fa6c 	bl	8010798 <cos>
 80052c0:	ec51 0b10 	vmov	r0, r1, d0
 80052c4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80052c8:	f7fb f996 	bl	80005f8 <__aeabi_dmul>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4610      	mov	r0, r2
 80052d2:	4619      	mov	r1, r3
 80052d4:	4b7b      	ldr	r3, [pc, #492]	@ (80054c4 <odometry+0x674>)
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	f7fa ffd7 	bl	800028c <__adddf3>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4978      	ldr	r1, [pc, #480]	@ (80054c4 <odometry+0x674>)
 80052e4:	e9c1 2300 	strd	r2, r3, [r1]
	yLocal += distance * sin(theta_local);
 80052e8:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 80052ec:	f00b faa8 	bl	8010840 <sin>
 80052f0:	ec51 0b10 	vmov	r0, r1, d0
 80052f4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80052f8:	f7fb f97e 	bl	80005f8 <__aeabi_dmul>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4610      	mov	r0, r2
 8005302:	4619      	mov	r1, r3
 8005304:	4b70      	ldr	r3, [pc, #448]	@ (80054c8 <odometry+0x678>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	f7fa ffbf 	bl	800028c <__adddf3>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	496d      	ldr	r1, [pc, #436]	@ (80054c8 <odometry+0x678>)
 8005314:	e9c1 2300 	strd	r2, r3, [r1]

    double theta = heading + (dtheta / 2.0);
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005320:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8005324:	f7fb fa92 	bl	800084c <__aeabi_ddiv>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	4b66      	ldr	r3, [pc, #408]	@ (80054cc <odometry+0x67c>)
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f7fa ffa9 	bl	800028c <__adddf3>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    xGlobal += dx * cos(theta) + dy * sin(theta);
 8005342:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8005346:	f00b fa27 	bl	8010798 <cos>
 800534a:	ec51 0b10 	vmov	r0, r1, d0
 800534e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005352:	f7fb f951 	bl	80005f8 <__aeabi_dmul>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4690      	mov	r8, r2
 800535c:	4699      	mov	r9, r3
 800535e:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8005362:	f00b fa6d 	bl	8010840 <sin>
 8005366:	ec51 0b10 	vmov	r0, r1, d0
 800536a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800536e:	f7fb f943 	bl	80005f8 <__aeabi_dmul>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4640      	mov	r0, r8
 8005378:	4649      	mov	r1, r9
 800537a:	f7fa ff87 	bl	800028c <__adddf3>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4610      	mov	r0, r2
 8005384:	4619      	mov	r1, r3
 8005386:	4b52      	ldr	r3, [pc, #328]	@ (80054d0 <odometry+0x680>)
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	f7fa ff7e 	bl	800028c <__adddf3>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	494e      	ldr	r1, [pc, #312]	@ (80054d0 <odometry+0x680>)
 8005396:	e9c1 2300 	strd	r2, r3, [r1]
    yGlobal += -dx * sin(theta) + dy * cos(theta);
 800539a:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 800539e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053a2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80053a6:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80053aa:	f00b fa49 	bl	8010840 <sin>
 80053ae:	ec53 2b10 	vmov	r2, r3, d0
 80053b2:	4620      	mov	r0, r4
 80053b4:	4629      	mov	r1, r5
 80053b6:	f7fb f91f 	bl	80005f8 <__aeabi_dmul>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4614      	mov	r4, r2
 80053c0:	461d      	mov	r5, r3
 80053c2:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80053c6:	f00b f9e7 	bl	8010798 <cos>
 80053ca:	ec51 0b10 	vmov	r0, r1, d0
 80053ce:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80053d2:	f7fb f911 	bl	80005f8 <__aeabi_dmul>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4620      	mov	r0, r4
 80053dc:	4629      	mov	r1, r5
 80053de:	f7fa ff55 	bl	800028c <__adddf3>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4610      	mov	r0, r2
 80053e8:	4619      	mov	r1, r3
 80053ea:	4b3a      	ldr	r3, [pc, #232]	@ (80054d4 <odometry+0x684>)
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f7fa ff4c 	bl	800028c <__adddf3>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4936      	ldr	r1, [pc, #216]	@ (80054d4 <odometry+0x684>)
 80053fa:	e9c1 2300 	strd	r2, r3, [r1]
    heading += dtheta;
 80053fe:	4b33      	ldr	r3, [pc, #204]	@ (80054cc <odometry+0x67c>)
 8005400:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005404:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8005408:	f7fa ff40 	bl	800028c <__adddf3>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	492e      	ldr	r1, [pc, #184]	@ (80054cc <odometry+0x67c>)
 8005412:	e9c1 2300 	strd	r2, r3, [r1]
    /* END */

    currentPosition.x_global = xGlobal;
 8005416:	4b2e      	ldr	r3, [pc, #184]	@ (80054d0 <odometry+0x680>)
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    currentPosition.y_global = yGlobal;
 8005420:	4b2c      	ldr	r3, [pc, #176]	@ (80054d4 <odometry+0x684>)
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	e9c7 2306 	strd	r2, r3, [r7, #24]
    currentPosition.x_local = xLocal;
 800542a:	4b26      	ldr	r3, [pc, #152]	@ (80054c4 <odometry+0x674>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	e9c7 2308 	strd	r2, r3, [r7, #32]
    currentPosition.y_local = yLocal;
 8005434:	4b24      	ldr	r3, [pc, #144]	@ (80054c8 <odometry+0x678>)
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    currentPosition.x_in_global = xGlobalIN;
 800543e:	4b26      	ldr	r3, [pc, #152]	@ (80054d8 <odometry+0x688>)
 8005440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005444:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    currentPosition.y_in_global = yGlobalIN;
 8005448:	4b24      	ldr	r3, [pc, #144]	@ (80054dc <odometry+0x68c>)
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    currentPosition.x_in_local = xLocalIN;
 8005452:	4b23      	ldr	r3, [pc, #140]	@ (80054e0 <odometry+0x690>)
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    currentPosition.y_in_local = yLocalIN;
 800545c:	4b21      	ldr	r3, [pc, #132]	@ (80054e4 <odometry+0x694>)
 800545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005462:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    currentPosition.h_en = (heading + headingIN) * 90/M_PI;
 8005466:	4b19      	ldr	r3, [pc, #100]	@ (80054cc <odometry+0x67c>)
 8005468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800546c:	4b1e      	ldr	r3, [pc, #120]	@ (80054e8 <odometry+0x698>)
 800546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005472:	f7fa ff0b 	bl	800028c <__adddf3>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4610      	mov	r0, r2
 800547c:	4619      	mov	r1, r3
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	4b1a      	ldr	r3, [pc, #104]	@ (80054ec <odometry+0x69c>)
 8005484:	f7fb f8b8 	bl	80005f8 <__aeabi_dmul>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4610      	mov	r0, r2
 800548e:	4619      	mov	r1, r3
 8005490:	e02e      	b.n	80054f0 <odometry+0x6a0>
 8005492:	bf00      	nop
 8005494:	f3af 8000 	nop.w
 8005498:	2d6e5f19 	.word	0x2d6e5f19
 800549c:	3fb752bc 	.word	0x3fb752bc
 80054a0:	00000000 	.word	0x00000000
 80054a4:	4077c000 	.word	0x4077c000
 80054a8:	200004f0 	.word	0x200004f0
 80054ac:	20000618 	.word	0x20000618
 80054b0:	200004e8 	.word	0x200004e8
 80054b4:	20000610 	.word	0x20000610
 80054b8:	200004ec 	.word	0x200004ec
 80054bc:	20000614 	.word	0x20000614
 80054c0:	ac769185 	.word	0xac769185
 80054c4:	200005f8 	.word	0x200005f8
 80054c8:	20000600 	.word	0x20000600
 80054cc:	20000608 	.word	0x20000608
 80054d0:	200005e8 	.word	0x200005e8
 80054d4:	200005f0 	.word	0x200005f0
 80054d8:	20000638 	.word	0x20000638
 80054dc:	20000640 	.word	0x20000640
 80054e0:	20000648 	.word	0x20000648
 80054e4:	20000650 	.word	0x20000650
 80054e8:	20000658 	.word	0x20000658
 80054ec:	40568000 	.word	0x40568000
 80054f0:	a30e      	add	r3, pc, #56	@ (adr r3, 800552c <odometry+0x6dc>)
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f7fb f9a9 	bl	800084c <__aeabi_ddiv>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    currentPosition.h = sensorData[0];
 8005502:	4b09      	ldr	r3, [pc, #36]	@ (8005528 <odometry+0x6d8>)
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    return currentPosition;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4618      	mov	r0, r3
 8005510:	f107 0310 	add.w	r3, r7, #16
 8005514:	2250      	movs	r2, #80	@ 0x50
 8005516:	4619      	mov	r1, r3
 8005518:	f008 fc45 	bl	800dda6 <memcpy>
}
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	37f0      	adds	r7, #240	@ 0xf0
 8005520:	46bd      	mov	sp, r7
 8005522:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005526:	bf00      	nop
 8005528:	20000540 	.word	0x20000540
 800552c:	54442d18 	.word	0x54442d18
 8005530:	400921fb 	.word	0x400921fb

08005534 <stateTransition>:
    {0, 0, 0.1}
};

// State transition function f
StateVector stateTransition(StateVector X)
{
 8005534:	b5b0      	push	{r4, r5, r7, lr}
 8005536:	b0ac      	sub	sp, #176	@ 0xb0
 8005538:	af00      	add	r7, sp, #0
 800553a:	eeb0 5a40 	vmov.f32	s10, s0
 800553e:	eef0 5a60 	vmov.f32	s11, s1
 8005542:	eeb0 6a41 	vmov.f32	s12, s2
 8005546:	eef0 6a61 	vmov.f32	s13, s3
 800554a:	eeb0 7a42 	vmov.f32	s14, s4
 800554e:	eef0 7a62 	vmov.f32	s15, s5
 8005552:	ed87 5b06 	vstr	d5, [r7, #24]
 8005556:	ed87 6b08 	vstr	d6, [r7, #32]
 800555a:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    StateVector X_next;
    robotPosition position = odometry();
 800555e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff fc74 	bl	8004e50 <odometry>
//    X_next.x = X.x + v * cos(X.theta) * dt + 0.5 * ax * pow(dt, 2) * cos(X.theta);
//    X_next.y = X.y + v * sin(X.theta) * dt + 0.5 * ay * pow(dt, 2) * sin(X.theta);
//    X_next.theta = X.theta + heading;
    X_next.x = X.x + position.x_local;
 8005568:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800556c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005570:	f7fa fe8c 	bl	800028c <__adddf3>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    X_next.y = X.y + position.y_local;
 800557c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005580:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005584:	f7fa fe82 	bl	800028c <__adddf3>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    X_next.theta = X.theta + position.h;
 8005590:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005594:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8005598:	f7fa fe78 	bl	800028c <__adddf3>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    return X_next;
 80055a4:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 80055a8:	f107 0580 	add.w	r5, r7, #128	@ 0x80
 80055ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80055b4:	e884 0003 	stmia.w	r4, {r0, r1}
 80055b8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80055bc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80055c0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80055c4:	ec45 4b15 	vmov	d5, r4, r5
 80055c8:	ec41 0b16 	vmov	d6, r0, r1
 80055cc:	ec43 2b17 	vmov	d7, r2, r3
}
 80055d0:	eeb0 0a45 	vmov.f32	s0, s10
 80055d4:	eef0 0a65 	vmov.f32	s1, s11
 80055d8:	eeb0 1a46 	vmov.f32	s2, s12
 80055dc:	eef0 1a66 	vmov.f32	s3, s13
 80055e0:	eeb0 2a47 	vmov.f32	s4, s14
 80055e4:	eef0 2a67 	vmov.f32	s5, s15
 80055e8:	37b0      	adds	r7, #176	@ 0xb0
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bdb0      	pop	{r4, r5, r7, pc}

080055ee <measurementFunction>:

// Measurement function h
MeasurementVector measurementFunction(StateVector X)
{
 80055ee:	b4b0      	push	{r4, r5, r7}
 80055f0:	b099      	sub	sp, #100	@ 0x64
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	eeb0 5a40 	vmov.f32	s10, s0
 80055f8:	eef0 5a60 	vmov.f32	s11, s1
 80055fc:	eeb0 6a41 	vmov.f32	s12, s2
 8005600:	eef0 6a61 	vmov.f32	s13, s3
 8005604:	eeb0 7a42 	vmov.f32	s14, s4
 8005608:	eef0 7a62 	vmov.f32	s15, s5
 800560c:	ed87 5b06 	vstr	d5, [r7, #24]
 8005610:	ed87 6b08 	vstr	d6, [r7, #32]
 8005614:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    MeasurementVector Z;
    Z.x = X.x;
 8005618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800561c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Z.y = X.y;
 8005620:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005624:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    Z.theta = X.theta;
 8005628:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800562c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    return Z;
 8005630:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8005634:	f107 0530 	add.w	r5, r7, #48	@ 0x30
 8005638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800563a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800563c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005640:	e884 0003 	stmia.w	r4, {r0, r1}
 8005644:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005648:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800564c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005650:	ec45 4b15 	vmov	d5, r4, r5
 8005654:	ec41 0b16 	vmov	d6, r0, r1
 8005658:	ec43 2b17 	vmov	d7, r2, r3
}
 800565c:	eeb0 0a45 	vmov.f32	s0, s10
 8005660:	eef0 0a65 	vmov.f32	s1, s11
 8005664:	eeb0 1a46 	vmov.f32	s2, s12
 8005668:	eef0 1a66 	vmov.f32	s3, s13
 800566c:	eeb0 2a47 	vmov.f32	s4, s14
 8005670:	eef0 2a67 	vmov.f32	s5, s15
 8005674:	3764      	adds	r7, #100	@ 0x64
 8005676:	46bd      	mov	sp, r7
 8005678:	bcb0      	pop	{r4, r5, r7}
 800567a:	4770      	bx	lr
 800567c:	0000      	movs	r0, r0
	...

08005680 <extendedKalmanFilter>:

// Extended Kalman Filter
EKF extendedKalmanFilter()
{
 8005680:	b5b0      	push	{r4, r5, r7, lr}
 8005682:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8005686:	af00      	add	r7, sp, #0
	EKF currentPosition;
	robotPosition position = odometry();
 8005688:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff fbdf 	bl	8004e50 <odometry>
	double P[STATE_DIM][STATE_DIM] = {
 8005692:	4ac7      	ldr	r2, [pc, #796]	@ (80059b0 <extendedKalmanFilter+0x330>)
 8005694:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8005698:	4611      	mov	r1, r2
 800569a:	2248      	movs	r2, #72	@ 0x48
 800569c:	4618      	mov	r0, r3
 800569e:	f008 fb82 	bl	800dda6 <memcpy>
		{1, 0, 0},
		{0, 1, 0},
		{0, 0, 1}};

    // Prediction step
	StateVector X = {position.x_local, position.y_local, 0.0};
 80056a2:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 80056a6:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 80056aa:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 80056ae:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
    StateVector X_pred = stateTransition(X);
 80056be:	ed97 5b54 	vldr	d5, [r7, #336]	@ 0x150
 80056c2:	ed97 6b56 	vldr	d6, [r7, #344]	@ 0x158
 80056c6:	ed97 7b58 	vldr	d7, [r7, #352]	@ 0x160
 80056ca:	eeb0 0a45 	vmov.f32	s0, s10
 80056ce:	eef0 0a65 	vmov.f32	s1, s11
 80056d2:	eeb0 1a46 	vmov.f32	s2, s12
 80056d6:	eef0 1a66 	vmov.f32	s3, s13
 80056da:	eeb0 2a47 	vmov.f32	s4, s14
 80056de:	eef0 2a67 	vmov.f32	s5, s15
 80056e2:	f7ff ff27 	bl	8005534 <stateTransition>
 80056e6:	eeb0 5a40 	vmov.f32	s10, s0
 80056ea:	eef0 5a60 	vmov.f32	s11, s1
 80056ee:	eeb0 6a41 	vmov.f32	s12, s2
 80056f2:	eef0 6a61 	vmov.f32	s13, s3
 80056f6:	eeb0 7a42 	vmov.f32	s14, s4
 80056fa:	eef0 7a62 	vmov.f32	s15, s5
 80056fe:	ed87 5b4e 	vstr	d5, [r7, #312]	@ 0x138
 8005702:	ed87 6b50 	vstr	d6, [r7, #320]	@ 0x140
 8005706:	ed87 7b52 	vstr	d7, [r7, #328]	@ 0x148
    double P_pred[STATE_DIM][STATE_DIM] = {
        {P[0][0] + Q[0][0], P[0][1], P[0][2]},
 800570a:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 800570e:	a3a6      	add	r3, pc, #664	@ (adr r3, 80059a8 <extendedKalmanFilter+0x328>)
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	f7fa fdba 	bl	800028c <__adddf3>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
    double P_pred[STATE_DIM][STATE_DIM] = {
 800571c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005720:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8005724:	e9c1 2300 	strd	r2, r3, [r1]
        {P[0][0] + Q[0][0], P[0][1], P[0][2]},
 8005728:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
    double P_pred[STATE_DIM][STATE_DIM] = {
 800572c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005730:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8005734:	e9c1 2302 	strd	r2, r3, [r1, #8]
        {P[0][0] + Q[0][0], P[0][1], P[0][2]},
 8005738:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
    double P_pred[STATE_DIM][STATE_DIM] = {
 800573c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005740:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8005744:	e9c1 2304 	strd	r2, r3, [r1, #16]
        {P[1][0], P[1][1] + Q[1][1], P[1][2]},
 8005748:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
    double P_pred[STATE_DIM][STATE_DIM] = {
 800574c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005750:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8005754:	e9c1 2306 	strd	r2, r3, [r1, #24]
        {P[1][0], P[1][1] + Q[1][1], P[1][2]},
 8005758:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800575c:	a392      	add	r3, pc, #584	@ (adr r3, 80059a8 <extendedKalmanFilter+0x328>)
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	f7fa fd93 	bl	800028c <__adddf3>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
    double P_pred[STATE_DIM][STATE_DIM] = {
 800576a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800576e:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8005772:	e9c1 2308 	strd	r2, r3, [r1, #32]
        {P[1][0], P[1][1] + Q[1][1], P[1][2]},
 8005776:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
    double P_pred[STATE_DIM][STATE_DIM] = {
 800577a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800577e:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8005782:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        {P[2][0], P[2][1], P[2][2] + Q[2][2]}
 8005786:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
    double P_pred[STATE_DIM][STATE_DIM] = {
 800578a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800578e:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8005792:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        {P[2][0], P[2][1], P[2][2] + Q[2][2]}
 8005796:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
    double P_pred[STATE_DIM][STATE_DIM] = {
 800579a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800579e:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80057a2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        {P[2][0], P[2][1], P[2][2] + Q[2][2]}
 80057a6:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 80057aa:	a37f      	add	r3, pc, #508	@ (adr r3, 80059a8 <extendedKalmanFilter+0x328>)
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f7fa fd6c 	bl	800028c <__adddf3>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
    double P_pred[STATE_DIM][STATE_DIM] = {
 80057b8:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80057bc:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80057c0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    };

    // Update step
	MeasurementVector Z = {position.x_in_local, position.y_in_local, 0.0};
 80057c4:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 80057c8:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80057cc:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 80057d0:	e9c1 2300 	strd	r2, r3, [r1]
 80057d4:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 80057d8:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80057dc:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 80057e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80057e4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80057e8:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    MeasurementVector Z_pred = measurementFunction(X_pred);
 80057f8:	ed97 5b4e 	vldr	d5, [r7, #312]	@ 0x138
 80057fc:	ed97 6b50 	vldr	d6, [r7, #320]	@ 0x140
 8005800:	ed97 7b52 	vldr	d7, [r7, #328]	@ 0x148
 8005804:	eeb0 0a45 	vmov.f32	s0, s10
 8005808:	eef0 0a65 	vmov.f32	s1, s11
 800580c:	eeb0 1a46 	vmov.f32	s2, s12
 8005810:	eef0 1a66 	vmov.f32	s3, s13
 8005814:	eeb0 2a47 	vmov.f32	s4, s14
 8005818:	eef0 2a67 	vmov.f32	s5, s15
 800581c:	f7ff fee7 	bl	80055ee <measurementFunction>
 8005820:	eeb0 5a40 	vmov.f32	s10, s0
 8005824:	eef0 5a60 	vmov.f32	s11, s1
 8005828:	eeb0 6a41 	vmov.f32	s12, s2
 800582c:	eef0 6a61 	vmov.f32	s13, s3
 8005830:	eeb0 7a42 	vmov.f32	s14, s4
 8005834:	eef0 7a62 	vmov.f32	s15, s5
 8005838:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800583c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005840:	ed83 5b00 	vstr	d5, [r3]
 8005844:	ed83 6b02 	vstr	d6, [r3, #8]
 8005848:	ed83 7b04 	vstr	d7, [r3, #16]
    double Y[MEASUREMENT_DIM] = {Z.x - Z_pred.x, Z.y - Z_pred.y, Z.theta - Z_pred.theta};
 800584c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005850:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8005854:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005858:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800585c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	f7fa fd10 	bl	8000288 <__aeabi_dsub>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005870:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8005874:	e9c1 2300 	strd	r2, r3, [r1]
 8005878:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800587c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8005880:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005884:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005888:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800588c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005890:	f7fa fcfa 	bl	8000288 <__aeabi_dsub>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800589c:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 80058a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80058a4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80058a8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80058ac:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80058b0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80058b4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80058b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80058bc:	f7fa fce4 	bl	8000288 <__aeabi_dsub>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80058c8:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 80058cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
        {P_pred[0][0] + R[0][0], P_pred[0][1], P_pred[0][2]},
 80058d0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80058d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80058d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058dc:	a332      	add	r3, pc, #200	@ (adr r3, 80059a8 <extendedKalmanFilter+0x328>)
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	f7fa fcd3 	bl	800028c <__adddf3>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 80058ea:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80058ee:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 80058f2:	e9c1 2300 	strd	r2, r3, [r1]
        {P_pred[0][0] + R[0][0], P_pred[0][1], P_pred[0][2]},
 80058f6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80058fa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80058fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8005902:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005906:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 800590a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        {P_pred[0][0] + R[0][0], P_pred[0][1], P_pred[0][2]},
 800590e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005912:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005916:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 800591a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800591e:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8005922:	e9c1 2304 	strd	r2, r3, [r1, #16]
        {P_pred[1][0], P_pred[1][1] + R[1][1], P_pred[1][2]},
 8005926:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800592a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800592e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8005932:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005936:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 800593a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        {P_pred[1][0], P_pred[1][1] + R[1][1], P_pred[1][2]},
 800593e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005942:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005946:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800594a:	a317      	add	r3, pc, #92	@ (adr r3, 80059a8 <extendedKalmanFilter+0x328>)
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	f7fa fc9c 	bl	800028c <__adddf3>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8005958:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800595c:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8005960:	e9c1 2308 	strd	r2, r3, [r1, #32]
        {P_pred[1][0], P_pred[1][1] + R[1][1], P_pred[1][2]},
 8005964:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005968:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800596c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8005970:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005974:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8005978:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        {P_pred[2][0], P_pred[2][1], P_pred[2][2] + R[2][2]}
 800597c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005980:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005984:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8005988:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800598c:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8005990:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        {P_pred[2][0], P_pred[2][1], P_pred[2][2] + R[2][2]}
 8005994:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005998:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800599c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80059a0:	e008      	b.n	80059b4 <extendedKalmanFilter+0x334>
 80059a2:	bf00      	nop
 80059a4:	f3af 8000 	nop.w
 80059a8:	9999999a 	.word	0x9999999a
 80059ac:	3fb99999 	.word	0x3fb99999
 80059b0:	08012378 	.word	0x08012378
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 80059b4:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80059b8:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 80059bc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        {P_pred[2][0], P_pred[2][1], P_pred[2][2] + R[2][2]}
 80059c0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80059c4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80059c8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80059cc:	f60f 33c8 	addw	r3, pc, #3016	@ 0xbc8
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	f7fa fc5a 	bl	800028c <__adddf3>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 80059dc:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80059e0:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 80059e4:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    };
    double K[STATE_DIM][MEASUREMENT_DIM] = {
        {P_pred[0][0] / S[0][0], P_pred[0][1] / S[1][1], P_pred[0][2] / S[2][2]},
 80059e8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80059ec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80059f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059f4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80059f8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	f7fa ff24 	bl	800084c <__aeabi_ddiv>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8005a08:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005a0c:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8005a10:	e9c1 2300 	strd	r2, r3, [r1]
        {P_pred[0][0] / S[0][0], P_pred[0][1] / S[1][1], P_pred[0][2] / S[2][2]},
 8005a14:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005a18:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005a1c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005a20:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005a24:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005a28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a2c:	f7fa ff0e 	bl	800084c <__aeabi_ddiv>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8005a34:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005a38:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8005a3c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        {P_pred[0][0] / S[0][0], P_pred[0][1] / S[1][1], P_pred[0][2] / S[2][2]},
 8005a40:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005a44:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005a48:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005a4c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005a50:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005a54:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005a58:	f7fa fef8 	bl	800084c <__aeabi_ddiv>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8005a60:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005a64:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8005a68:	e9c1 2304 	strd	r2, r3, [r1, #16]
        {P_pred[1][0] / S[0][0], P_pred[1][1] / S[1][1], P_pred[1][2] / S[2][2]},
 8005a6c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005a70:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005a74:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005a78:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005a7c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	f7fa fee2 	bl	800084c <__aeabi_ddiv>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8005a8c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005a90:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8005a94:	e9c1 2306 	strd	r2, r3, [r1, #24]
        {P_pred[1][0] / S[0][0], P_pred[1][1] / S[1][1], P_pred[1][2] / S[2][2]},
 8005a98:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005a9c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005aa0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005aa4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005aa8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005aac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ab0:	f7fa fecc 	bl	800084c <__aeabi_ddiv>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8005ab8:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005abc:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8005ac0:	e9c1 2308 	strd	r2, r3, [r1, #32]
        {P_pred[1][0] / S[0][0], P_pred[1][1] / S[1][1], P_pred[1][2] / S[2][2]},
 8005ac4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005ac8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005acc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8005ad0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005ad4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005ad8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005adc:	f7fa feb6 	bl	800084c <__aeabi_ddiv>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8005ae4:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005ae8:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8005aec:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        {P_pred[2][0] / S[0][0], P_pred[2][1] / S[1][1], P_pred[2][2] / S[2][2]}
 8005af0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005af4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005af8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8005afc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005b00:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	f7fa fea0 	bl	800084c <__aeabi_ddiv>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8005b10:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005b14:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8005b18:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        {P_pred[2][0] / S[0][0], P_pred[2][1] / S[1][1], P_pred[2][2] / S[2][2]}
 8005b1c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005b20:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005b24:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8005b28:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005b2c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005b30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b34:	f7fa fe8a 	bl	800084c <__aeabi_ddiv>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8005b3c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005b40:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8005b44:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        {P_pred[2][0] / S[0][0], P_pred[2][1] / S[1][1], P_pred[2][2] / S[2][2]}
 8005b48:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005b4c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005b50:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8005b54:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005b58:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005b5c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005b60:	f7fa fe74 	bl	800084c <__aeabi_ddiv>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8005b68:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8005b6c:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8005b70:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    };

    // Update state estimate
    X.x = X_pred.x + K[0][0] * Y[0] + K[0][1] * Y[1] + K[0][2] * Y[2];
 8005b74:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8005b78:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005b7c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005b80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b84:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005b88:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	f7fa fd32 	bl	80005f8 <__aeabi_dmul>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4620      	mov	r0, r4
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	f7fa fb76 	bl	800028c <__adddf3>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4614      	mov	r4, r2
 8005ba6:	461d      	mov	r5, r3
 8005ba8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005bac:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005bb0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005bb4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005bb8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005bbc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005bc0:	f7fa fd1a 	bl	80005f8 <__aeabi_dmul>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4620      	mov	r0, r4
 8005bca:	4629      	mov	r1, r5
 8005bcc:	f7fa fb5e 	bl	800028c <__adddf3>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	461d      	mov	r5, r3
 8005bd8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005bdc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005be0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005be4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005be8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005bec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005bf0:	f7fa fd02 	bl	80005f8 <__aeabi_dmul>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	f7fa fb46 	bl	800028c <__adddf3>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
    X.y = X_pred.y + K[1][0] * Y[0] + K[1][1] * Y[1] + K[1][2] * Y[2];
 8005c08:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8005c0c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005c10:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005c14:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005c18:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005c1c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	f7fa fce8 	bl	80005f8 <__aeabi_dmul>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	4629      	mov	r1, r5
 8005c30:	f7fa fb2c 	bl	800028c <__adddf3>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4614      	mov	r4, r2
 8005c3a:	461d      	mov	r5, r3
 8005c3c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005c40:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005c44:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005c48:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005c4c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005c50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005c54:	f7fa fcd0 	bl	80005f8 <__aeabi_dmul>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	4629      	mov	r1, r5
 8005c60:	f7fa fb14 	bl	800028c <__adddf3>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4614      	mov	r4, r2
 8005c6a:	461d      	mov	r5, r3
 8005c6c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005c70:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005c74:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8005c78:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005c7c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005c80:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005c84:	f7fa fcb8 	bl	80005f8 <__aeabi_dmul>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	4629      	mov	r1, r5
 8005c90:	f7fa fafc 	bl	800028c <__adddf3>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
    X.theta = X_pred.theta + K[2][0] * Y[0] + K[2][1] * Y[1] + K[2][2] * Y[2];
 8005c9c:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8005ca0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005ca4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005ca8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8005cac:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005cb0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb8:	f7fa fc9e 	bl	80005f8 <__aeabi_dmul>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	f7fa fae2 	bl	800028c <__adddf3>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4614      	mov	r4, r2
 8005cce:	461d      	mov	r5, r3
 8005cd0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005cd4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005cd8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8005cdc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005ce0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005ce4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005ce8:	f7fa fc86 	bl	80005f8 <__aeabi_dmul>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	f7fa faca 	bl	800028c <__adddf3>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	461d      	mov	r5, r3
 8005d00:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005d04:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005d08:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8005d0c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005d10:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005d14:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005d18:	f7fa fc6e 	bl	80005f8 <__aeabi_dmul>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4620      	mov	r0, r4
 8005d22:	4629      	mov	r1, r5
 8005d24:	f7fa fab2 	bl	800028c <__adddf3>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160

    // Update covariance matrix
    P[0][0] = P_pred[0][0] - K[0][0] * S[0][0] * K[0][0] - K[0][1] * S[1][1] * K[0][1] - K[0][2] * S[2][2] * K[0][2];
 8005d30:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005d34:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005d38:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005d3c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005d40:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005d44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d48:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005d4c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f7fa fc50 	bl	80005f8 <__aeabi_dmul>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	4619      	mov	r1, r3
 8005d60:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005d64:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f7fa fc44 	bl	80005f8 <__aeabi_dmul>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4620      	mov	r0, r4
 8005d76:	4629      	mov	r1, r5
 8005d78:	f7fa fa86 	bl	8000288 <__aeabi_dsub>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4614      	mov	r4, r2
 8005d82:	461d      	mov	r5, r3
 8005d84:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005d88:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005d8c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005d90:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005d94:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005d98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d9c:	f7fa fc2c 	bl	80005f8 <__aeabi_dmul>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4610      	mov	r0, r2
 8005da6:	4619      	mov	r1, r3
 8005da8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005dac:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005db0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005db4:	f7fa fc20 	bl	80005f8 <__aeabi_dmul>
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	4629      	mov	r1, r5
 8005dc0:	f7fa fa62 	bl	8000288 <__aeabi_dsub>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4614      	mov	r4, r2
 8005dca:	461d      	mov	r5, r3
 8005dcc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005dd0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005dd4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005dd8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005ddc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005de0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005de4:	f7fa fc08 	bl	80005f8 <__aeabi_dmul>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4610      	mov	r0, r2
 8005dee:	4619      	mov	r1, r3
 8005df0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005df4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005df8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005dfc:	f7fa fbfc 	bl	80005f8 <__aeabi_dmul>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4620      	mov	r0, r4
 8005e06:	4629      	mov	r1, r5
 8005e08:	f7fa fa3e 	bl	8000288 <__aeabi_dsub>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
    P[0][1] = P_pred[0][1] - K[0][0] * S[0][0] * K[1][0] - K[0][1] * S[1][1] * K[1][1] - K[0][2] * S[2][2] * K[1][2];
 8005e14:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005e18:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005e1c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8005e20:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005e24:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005e28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e2c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005e30:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f7fa fbde 	bl	80005f8 <__aeabi_dmul>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4610      	mov	r0, r2
 8005e42:	4619      	mov	r1, r3
 8005e44:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005e48:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005e4c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005e50:	f7fa fbd2 	bl	80005f8 <__aeabi_dmul>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4620      	mov	r0, r4
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	f7fa fa14 	bl	8000288 <__aeabi_dsub>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4614      	mov	r4, r2
 8005e66:	461d      	mov	r5, r3
 8005e68:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005e6c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005e70:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005e74:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005e78:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005e7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e80:	f7fa fbba 	bl	80005f8 <__aeabi_dmul>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4610      	mov	r0, r2
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005e90:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005e94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e98:	f7fa fbae 	bl	80005f8 <__aeabi_dmul>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	f7fa f9f0 	bl	8000288 <__aeabi_dsub>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4614      	mov	r4, r2
 8005eae:	461d      	mov	r5, r3
 8005eb0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005eb4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005eb8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005ebc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005ec0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005ec4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005ec8:	f7fa fb96 	bl	80005f8 <__aeabi_dmul>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005ed8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005edc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8005ee0:	f7fa fb8a 	bl	80005f8 <__aeabi_dmul>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4620      	mov	r0, r4
 8005eea:	4629      	mov	r1, r5
 8005eec:	f7fa f9cc 	bl	8000288 <__aeabi_dsub>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
    P[0][2] = P_pred[0][2] - K[0][0] * S[0][0] * K[2][0] - K[0][1] * S[1][1] * K[2][1] - K[0][2] * S[2][2] * K[2][2];
 8005ef8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005efc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005f00:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8005f04:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005f08:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005f0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f10:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005f14:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1c:	f7fa fb6c 	bl	80005f8 <__aeabi_dmul>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4610      	mov	r0, r2
 8005f26:	4619      	mov	r1, r3
 8005f28:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005f2c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005f30:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005f34:	f7fa fb60 	bl	80005f8 <__aeabi_dmul>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	4629      	mov	r1, r5
 8005f40:	f7fa f9a2 	bl	8000288 <__aeabi_dsub>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4614      	mov	r4, r2
 8005f4a:	461d      	mov	r5, r3
 8005f4c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005f50:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005f54:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005f58:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005f5c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005f60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f64:	f7fa fb48 	bl	80005f8 <__aeabi_dmul>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	4619      	mov	r1, r3
 8005f70:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005f74:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005f78:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005f7c:	f7fa fb3c 	bl	80005f8 <__aeabi_dmul>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4620      	mov	r0, r4
 8005f86:	4629      	mov	r1, r5
 8005f88:	f7fa f97e 	bl	8000288 <__aeabi_dsub>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4614      	mov	r4, r2
 8005f92:	461d      	mov	r5, r3
 8005f94:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005f98:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005f9c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005fa0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005fa4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005fa8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005fac:	f7fa fb24 	bl	80005f8 <__aeabi_dmul>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005fbc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005fc0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005fc4:	f7fa fb18 	bl	80005f8 <__aeabi_dmul>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4620      	mov	r0, r4
 8005fce:	4629      	mov	r1, r5
 8005fd0:	f7fa f95a 	bl	8000288 <__aeabi_dsub>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
    P[1][0] = P_pred[1][0] - K[1][0] * S[0][0] * K[0][0] - K[1][1] * S[1][1] * K[0][1] - K[1][2] * S[2][2] * K[0][2];
 8005fdc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005fe0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005fe4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005fe8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005fec:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005ff0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005ff4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005ff8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	f7fa fafa 	bl	80005f8 <__aeabi_dmul>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4610      	mov	r0, r2
 800600a:	4619      	mov	r1, r3
 800600c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006010:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	f7fa faee 	bl	80005f8 <__aeabi_dmul>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4620      	mov	r0, r4
 8006022:	4629      	mov	r1, r5
 8006024:	f7fa f930 	bl	8000288 <__aeabi_dsub>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	4614      	mov	r4, r2
 800602e:	461d      	mov	r5, r3
 8006030:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006034:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006038:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800603c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006040:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006044:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006048:	f7fa fad6 	bl	80005f8 <__aeabi_dmul>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4610      	mov	r0, r2
 8006052:	4619      	mov	r1, r3
 8006054:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006058:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800605c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006060:	f7fa faca 	bl	80005f8 <__aeabi_dmul>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4620      	mov	r0, r4
 800606a:	4629      	mov	r1, r5
 800606c:	f7fa f90c 	bl	8000288 <__aeabi_dsub>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4614      	mov	r4, r2
 8006076:	461d      	mov	r5, r3
 8006078:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800607c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006080:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8006084:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006088:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800608c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006090:	f7fa fab2 	bl	80005f8 <__aeabi_dmul>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4610      	mov	r0, r2
 800609a:	4619      	mov	r1, r3
 800609c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80060a0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80060a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80060a8:	f7fa faa6 	bl	80005f8 <__aeabi_dmul>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4620      	mov	r0, r4
 80060b2:	4629      	mov	r1, r5
 80060b4:	f7fa f8e8 	bl	8000288 <__aeabi_dsub>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
    P[1][1] = P_pred[1][1] - K[1][0] * S[0][0] * K[1][0] - K[1][1] * S[1][1] * K[1][1] - K[1][2] * S[2][2] * K[1][2];
 80060c0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80060c4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80060c8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80060cc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80060d0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80060d4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80060d8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80060dc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	f7fa fa88 	bl	80005f8 <__aeabi_dmul>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4610      	mov	r0, r2
 80060ee:	4619      	mov	r1, r3
 80060f0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80060f4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80060f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80060fc:	f7fa fa7c 	bl	80005f8 <__aeabi_dmul>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4620      	mov	r0, r4
 8006106:	4629      	mov	r1, r5
 8006108:	f7fa f8be 	bl	8000288 <__aeabi_dsub>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4614      	mov	r4, r2
 8006112:	461d      	mov	r5, r3
 8006114:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006118:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800611c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006120:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006124:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800612c:	f7fa fa64 	bl	80005f8 <__aeabi_dmul>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4610      	mov	r0, r2
 8006136:	4619      	mov	r1, r3
 8006138:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800613c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006140:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006144:	f7fa fa58 	bl	80005f8 <__aeabi_dmul>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4620      	mov	r0, r4
 800614e:	4629      	mov	r1, r5
 8006150:	f7fa f89a 	bl	8000288 <__aeabi_dsub>
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	4614      	mov	r4, r2
 800615a:	461d      	mov	r5, r3
 800615c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006160:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006164:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8006168:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800616c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006170:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006174:	f7fa fa40 	bl	80005f8 <__aeabi_dmul>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4610      	mov	r0, r2
 800617e:	4619      	mov	r1, r3
 8006180:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006184:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006188:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800618c:	f7fa fa34 	bl	80005f8 <__aeabi_dmul>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4620      	mov	r0, r4
 8006196:	4629      	mov	r1, r5
 8006198:	f7fa f876 	bl	8000288 <__aeabi_dsub>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
    P[1][2] = P_pred[1][2] - K[1][0] * S[0][0] * K[2][0] - K[1][1] * S[1][1] * K[2][1] - K[1][2] * S[2][2] * K[2][2];
 80061a4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80061a8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80061ac:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80061b0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80061b4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80061b8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80061bc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80061c0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f7fa fa16 	bl	80005f8 <__aeabi_dmul>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4610      	mov	r0, r2
 80061d2:	4619      	mov	r1, r3
 80061d4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80061d8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80061dc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80061e0:	f7fa fa0a 	bl	80005f8 <__aeabi_dmul>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4620      	mov	r0, r4
 80061ea:	4629      	mov	r1, r5
 80061ec:	f7fa f84c 	bl	8000288 <__aeabi_dsub>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4614      	mov	r4, r2
 80061f6:	461d      	mov	r5, r3
 80061f8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80061fc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006200:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006204:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006208:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800620c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006210:	f7fa f9f2 	bl	80005f8 <__aeabi_dmul>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4610      	mov	r0, r2
 800621a:	4619      	mov	r1, r3
 800621c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006220:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006224:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006228:	f7fa f9e6 	bl	80005f8 <__aeabi_dmul>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4620      	mov	r0, r4
 8006232:	4629      	mov	r1, r5
 8006234:	f7fa f828 	bl	8000288 <__aeabi_dsub>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4614      	mov	r4, r2
 800623e:	461d      	mov	r5, r3
 8006240:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006244:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006248:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800624c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006250:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006254:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006258:	f7fa f9ce 	bl	80005f8 <__aeabi_dmul>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4610      	mov	r0, r2
 8006262:	4619      	mov	r1, r3
 8006264:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006268:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800626c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006270:	f7fa f9c2 	bl	80005f8 <__aeabi_dmul>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4620      	mov	r0, r4
 800627a:	4629      	mov	r1, r5
 800627c:	f7fa f804 	bl	8000288 <__aeabi_dsub>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
    P[2][0] = P_pred[2][0] - K[2][0] * S[0][0] * K[0][0] - K[2][1] * S[1][1] * K[0][1] - K[2][2] * S[2][2] * K[0][2];
 8006288:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800628c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006290:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8006294:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006298:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800629c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80062a0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80062a4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	f7fa f9a4 	bl	80005f8 <__aeabi_dmul>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	4610      	mov	r0, r2
 80062b6:	4619      	mov	r1, r3
 80062b8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80062bc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f7fa f998 	bl	80005f8 <__aeabi_dmul>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4620      	mov	r0, r4
 80062ce:	4629      	mov	r1, r5
 80062d0:	f7f9 ffda 	bl	8000288 <__aeabi_dsub>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4614      	mov	r4, r2
 80062da:	461d      	mov	r5, r3
 80062dc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80062e0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80062e4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80062e8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80062ec:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80062f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062f4:	f7fa f980 	bl	80005f8 <__aeabi_dmul>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4610      	mov	r0, r2
 80062fe:	4619      	mov	r1, r3
 8006300:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006304:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006308:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800630c:	f7fa f974 	bl	80005f8 <__aeabi_dmul>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4620      	mov	r0, r4
 8006316:	4629      	mov	r1, r5
 8006318:	f7f9 ffb6 	bl	8000288 <__aeabi_dsub>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4614      	mov	r4, r2
 8006322:	461d      	mov	r5, r3
 8006324:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006328:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800632c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8006330:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006334:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006338:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800633c:	f7fa f95c 	bl	80005f8 <__aeabi_dmul>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4610      	mov	r0, r2
 8006346:	4619      	mov	r1, r3
 8006348:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800634c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006350:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006354:	f7fa f950 	bl	80005f8 <__aeabi_dmul>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4620      	mov	r0, r4
 800635e:	4629      	mov	r1, r5
 8006360:	f7f9 ff92 	bl	8000288 <__aeabi_dsub>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    P[2][1] = P_pred[2][1] - K[2][0] * S[0][0] * K[1][0] - K[2][1] * S[1][1] * K[1][1] - K[2][2] * S[2][2] * K[1][2];
 800636c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006370:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006374:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8006378:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800637c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006380:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8006384:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006388:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f7fa f932 	bl	80005f8 <__aeabi_dmul>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4610      	mov	r0, r2
 800639a:	4619      	mov	r1, r3
 800639c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80063a0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80063a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80063a8:	f7fa f926 	bl	80005f8 <__aeabi_dmul>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4620      	mov	r0, r4
 80063b2:	4629      	mov	r1, r5
 80063b4:	f7f9 ff68 	bl	8000288 <__aeabi_dsub>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4614      	mov	r4, r2
 80063be:	461d      	mov	r5, r3
 80063c0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80063c4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80063c8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80063cc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80063d0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80063d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063d8:	f7fa f90e 	bl	80005f8 <__aeabi_dmul>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4610      	mov	r0, r2
 80063e2:	4619      	mov	r1, r3
 80063e4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80063e8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80063ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063f0:	f7fa f902 	bl	80005f8 <__aeabi_dmul>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4620      	mov	r0, r4
 80063fa:	4629      	mov	r1, r5
 80063fc:	f7f9 ff44 	bl	8000288 <__aeabi_dsub>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4614      	mov	r4, r2
 8006406:	461d      	mov	r5, r3
 8006408:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800640c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006410:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8006414:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006418:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800641c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006420:	f7fa f8ea 	bl	80005f8 <__aeabi_dmul>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4610      	mov	r0, r2
 800642a:	4619      	mov	r1, r3
 800642c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006430:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006434:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8006438:	f7fa f8de 	bl	80005f8 <__aeabi_dmul>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4620      	mov	r0, r4
 8006442:	4629      	mov	r1, r5
 8006444:	f7f9 ff20 	bl	8000288 <__aeabi_dsub>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
    P[2][2] = P_pred[2][2] - K[2][0] * S[0][0] * K[2][0] - K[2][1] * S[1][1] * K[2][1] - K[2][2] * S[2][2] * K[2][2];
 8006450:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006454:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006458:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 800645c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006460:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006464:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8006468:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800646c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	f7fa f8c0 	bl	80005f8 <__aeabi_dmul>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4610      	mov	r0, r2
 800647e:	4619      	mov	r1, r3
 8006480:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006484:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006488:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800648c:	f7fa f8b4 	bl	80005f8 <__aeabi_dmul>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	4620      	mov	r0, r4
 8006496:	4629      	mov	r1, r5
 8006498:	f7f9 fef6 	bl	8000288 <__aeabi_dsub>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4614      	mov	r4, r2
 80064a2:	461d      	mov	r5, r3
 80064a4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80064a8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80064ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80064b0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80064b4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80064b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064bc:	f7fa f89c 	bl	80005f8 <__aeabi_dmul>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4610      	mov	r0, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80064cc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80064d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80064d4:	f7fa f890 	bl	80005f8 <__aeabi_dmul>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4620      	mov	r0, r4
 80064de:	4629      	mov	r1, r5
 80064e0:	f7f9 fed2 	bl	8000288 <__aeabi_dsub>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4614      	mov	r4, r2
 80064ea:	461d      	mov	r5, r3
 80064ec:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80064f0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80064f4:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80064f8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80064fc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006500:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006504:	f7fa f878 	bl	80005f8 <__aeabi_dmul>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4610      	mov	r0, r2
 800650e:	4619      	mov	r1, r3
 8006510:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8006514:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8006518:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800651c:	f7fa f86c 	bl	80005f8 <__aeabi_dmul>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4620      	mov	r0, r4
 8006526:	4629      	mov	r1, r5
 8006528:	f7f9 feae 	bl	8000288 <__aeabi_dsub>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8

    currentPosition.x = X.x;
 8006534:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8006538:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
    currentPosition.y = X.y;
 800653c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8006540:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
    currentPosition.h = position.h;
 8006544:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8006548:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210

    return currentPosition;
 800654c:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 8006550:	f507 7500 	add.w	r5, r7, #512	@ 0x200
 8006554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006558:	e895 0003 	ldmia.w	r5, {r0, r1}
 800655c:	e884 0003 	stmia.w	r4, {r0, r1}
 8006560:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8006564:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8006568:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 800656c:	ec45 4b15 	vmov	d5, r4, r5
 8006570:	ec41 0b16 	vmov	d6, r0, r1
 8006574:	ec43 2b17 	vmov	d7, r2, r3
}
 8006578:	eeb0 0a45 	vmov.f32	s0, s10
 800657c:	eef0 0a65 	vmov.f32	s1, s11
 8006580:	eeb0 1a46 	vmov.f32	s2, s12
 8006584:	eef0 1a66 	vmov.f32	s3, s13
 8006588:	eeb0 2a47 	vmov.f32	s4, s14
 800658c:	eef0 2a67 	vmov.f32	s5, s15
 8006590:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8006594:	46bd      	mov	sp, r7
 8006596:	bdb0      	pop	{r4, r5, r7, pc}
 8006598:	9999999a 	.word	0x9999999a
 800659c:	3fb99999 	.word	0x3fb99999

080065a0 <cek>:
	sprintf(buffer, "EYaw:%.2f", setpoint.h - position.h);
	lcd_write_string(buffer);
}

void cek(EKF position)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	eeb0 5a40 	vmov.f32	s10, s0
 80065aa:	eef0 5a60 	vmov.f32	s11, s1
 80065ae:	eeb0 6a41 	vmov.f32	s12, s2
 80065b2:	eef0 6a61 	vmov.f32	s13, s3
 80065b6:	eeb0 7a42 	vmov.f32	s14, s4
 80065ba:	eef0 7a62 	vmov.f32	s15, s5
 80065be:	ed87 5b00 	vstr	d5, [r7]
 80065c2:	ed87 6b02 	vstr	d6, [r7, #8]
 80065c6:	ed87 7b04 	vstr	d7, [r7, #16]
	lcd_set_cursor(0, 0);
 80065ca:	2100      	movs	r1, #0
 80065cc:	2000      	movs	r0, #0
 80065ce:	f7fc f9bd 	bl	800294c <lcd_set_cursor>
	sprintf(buffer, "%d", camera[0]);
 80065d2:	4b2f      	ldr	r3, [pc, #188]	@ (8006690 <cek+0xf0>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	492e      	ldr	r1, [pc, #184]	@ (8006694 <cek+0xf4>)
 80065da:	482f      	ldr	r0, [pc, #188]	@ (8006698 <cek+0xf8>)
 80065dc:	f007 fa92 	bl	800db04 <siprintf>
	lcd_write_string(buffer);
 80065e0:	482d      	ldr	r0, [pc, #180]	@ (8006698 <cek+0xf8>)
 80065e2:	f7fc f99d 	bl	8002920 <lcd_write_string>

	lcd_set_cursor(1, 0);
 80065e6:	2100      	movs	r1, #0
 80065e8:	2001      	movs	r0, #1
 80065ea:	f7fc f9af 	bl	800294c <lcd_set_cursor>
	sprintf(buffer, "%d", camera[1]);
 80065ee:	4b28      	ldr	r3, [pc, #160]	@ (8006690 <cek+0xf0>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	461a      	mov	r2, r3
 80065f4:	4927      	ldr	r1, [pc, #156]	@ (8006694 <cek+0xf4>)
 80065f6:	4828      	ldr	r0, [pc, #160]	@ (8006698 <cek+0xf8>)
 80065f8:	f007 fa84 	bl	800db04 <siprintf>
	lcd_write_string(buffer);
 80065fc:	4826      	ldr	r0, [pc, #152]	@ (8006698 <cek+0xf8>)
 80065fe:	f7fc f98f 	bl	8002920 <lcd_write_string>

	lcd_set_cursor(2, 0);
 8006602:	2100      	movs	r1, #0
 8006604:	2002      	movs	r0, #2
 8006606:	f7fc f9a1 	bl	800294c <lcd_set_cursor>
	sprintf(buffer, "%d", camera[2]);
 800660a:	4b21      	ldr	r3, [pc, #132]	@ (8006690 <cek+0xf0>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	461a      	mov	r2, r3
 8006610:	4920      	ldr	r1, [pc, #128]	@ (8006694 <cek+0xf4>)
 8006612:	4821      	ldr	r0, [pc, #132]	@ (8006698 <cek+0xf8>)
 8006614:	f007 fa76 	bl	800db04 <siprintf>
	lcd_write_string(buffer);
 8006618:	481f      	ldr	r0, [pc, #124]	@ (8006698 <cek+0xf8>)
 800661a:	f7fc f981 	bl	8002920 <lcd_write_string>

	lcd_set_cursor(3, 0);
 800661e:	2100      	movs	r1, #0
 8006620:	2003      	movs	r0, #3
 8006622:	f7fc f993 	bl	800294c <lcd_set_cursor>
	sprintf(buffer, "%d", proximity[0]);
 8006626:	4b1d      	ldr	r3, [pc, #116]	@ (800669c <cek+0xfc>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	4919      	ldr	r1, [pc, #100]	@ (8006694 <cek+0xf4>)
 800662e:	481a      	ldr	r0, [pc, #104]	@ (8006698 <cek+0xf8>)
 8006630:	f007 fa68 	bl	800db04 <siprintf>
	lcd_write_string(buffer);
 8006634:	4818      	ldr	r0, [pc, #96]	@ (8006698 <cek+0xf8>)
 8006636:	f7fc f973 	bl	8002920 <lcd_write_string>

	lcd_set_cursor(1, 10);
 800663a:	210a      	movs	r1, #10
 800663c:	2001      	movs	r0, #1
 800663e:	f7fc f985 	bl	800294c <lcd_set_cursor>
	sprintf(buffer, "X:%.2f", position.x);
 8006642:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006646:	4916      	ldr	r1, [pc, #88]	@ (80066a0 <cek+0x100>)
 8006648:	4813      	ldr	r0, [pc, #76]	@ (8006698 <cek+0xf8>)
 800664a:	f007 fa5b 	bl	800db04 <siprintf>
	lcd_write_string(buffer);
 800664e:	4812      	ldr	r0, [pc, #72]	@ (8006698 <cek+0xf8>)
 8006650:	f7fc f966 	bl	8002920 <lcd_write_string>

	lcd_set_cursor(2, 10);
 8006654:	210a      	movs	r1, #10
 8006656:	2002      	movs	r0, #2
 8006658:	f7fc f978 	bl	800294c <lcd_set_cursor>
	sprintf(buffer, "Y:%.2f", position.y);
 800665c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006660:	4910      	ldr	r1, [pc, #64]	@ (80066a4 <cek+0x104>)
 8006662:	480d      	ldr	r0, [pc, #52]	@ (8006698 <cek+0xf8>)
 8006664:	f007 fa4e 	bl	800db04 <siprintf>
	lcd_write_string(buffer);
 8006668:	480b      	ldr	r0, [pc, #44]	@ (8006698 <cek+0xf8>)
 800666a:	f7fc f959 	bl	8002920 <lcd_write_string>

	lcd_set_cursor(3, 10);
 800666e:	210a      	movs	r1, #10
 8006670:	2003      	movs	r0, #3
 8006672:	f7fc f96b 	bl	800294c <lcd_set_cursor>
	sprintf(buffer, "Yaw:%.2f", position.h);
 8006676:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800667a:	490b      	ldr	r1, [pc, #44]	@ (80066a8 <cek+0x108>)
 800667c:	4806      	ldr	r0, [pc, #24]	@ (8006698 <cek+0xf8>)
 800667e:	f007 fa41 	bl	800db04 <siprintf>
	lcd_write_string(buffer);
 8006682:	4805      	ldr	r0, [pc, #20]	@ (8006698 <cek+0xf8>)
 8006684:	f7fc f94c 	bl	8002920 <lcd_write_string>
}
 8006688:	bf00      	nop
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	2000058c 	.word	0x2000058c
 8006694:	080123f8 	.word	0x080123f8
 8006698:	2000061c 	.word	0x2000061c
 800669c:	200005dc 	.word	0x200005dc
 80066a0:	080123c0 	.word	0x080123c0
 80066a4:	080123c8 	.word	0x080123c8
 80066a8:	080123d0 	.word	0x080123d0
 80066ac:	00000000 	.word	0x00000000

080066b0 <PID_controller>:

    return output;
}

double PID_controller(double setpoint, double actual_position, uint8_t pidMode)
{
 80066b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066b4:	b08e      	sub	sp, #56	@ 0x38
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	ed87 0b06 	vstr	d0, [r7, #24]
 80066bc:	ed87 1b04 	vstr	d1, [r7, #16]
 80066c0:	4603      	mov	r3, r0
 80066c2:	73fb      	strb	r3, [r7, #15]
	switch(pidMode)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	f200 82dd 	bhi.w	8006c88 <PID_controller+0x5d8>
 80066ce:	a201      	add	r2, pc, #4	@ (adr r2, 80066d4 <PID_controller+0x24>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	080066e9 	.word	0x080066e9
 80066d8:	0800671d 	.word	0x0800671d
 80066dc:	080068c7 	.word	0x080068c7
 80066e0:	08006ad7 	.word	0x08006ad7
 80066e4:	08006c51 	.word	0x08006c51
	{
	case 1:
		Kp = 0.5, Ki = 0.1, Kd = 0.0;
 80066e8:	4999      	ldr	r1, [pc, #612]	@ (8006950 <PID_controller+0x2a0>)
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	4b99      	ldr	r3, [pc, #612]	@ (8006954 <PID_controller+0x2a4>)
 80066f0:	e9c1 2300 	strd	r2, r3, [r1]
 80066f4:	4998      	ldr	r1, [pc, #608]	@ (8006958 <PID_controller+0x2a8>)
 80066f6:	a38c      	add	r3, pc, #560	@ (adr r3, 8006928 <PID_controller+0x278>)
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	e9c1 2300 	strd	r2, r3, [r1]
 8006700:	4996      	ldr	r1, [pc, #600]	@ (800695c <PID_controller+0x2ac>)
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	f04f 0300 	mov.w	r3, #0
 800670a:	e9c1 2300 	strd	r2, r3, [r1]
		tau = 0.1;
 800670e:	4994      	ldr	r1, [pc, #592]	@ (8006960 <PID_controller+0x2b0>)
 8006710:	a385      	add	r3, pc, #532	@ (adr r3, 8006928 <PID_controller+0x278>)
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	e9c1 2300 	strd	r2, r3, [r1]
//		else
//		{
//			Kp = 15, Ki = 0.0, Kd = 0.0;
//			tau = 0.1;
//		}
		break;
 800671a:	e2b5      	b.n	8006c88 <PID_controller+0x5d8>
	case 2:
		if(setpoint > 0 && setpoint < 120)
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006728:	f7fa f9f6 	bl	8000b18 <__aeabi_dcmpgt>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d023      	beq.n	800677a <PID_controller+0xca>
 8006732:	f04f 0200 	mov.w	r2, #0
 8006736:	4b8b      	ldr	r3, [pc, #556]	@ (8006964 <PID_controller+0x2b4>)
 8006738:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800673c:	f7fa f9ce 	bl	8000adc <__aeabi_dcmplt>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d019      	beq.n	800677a <PID_controller+0xca>
		{
			Kp = 30, Ki = 0.2, Kd = 0.0;
 8006746:	4982      	ldr	r1, [pc, #520]	@ (8006950 <PID_controller+0x2a0>)
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	4b86      	ldr	r3, [pc, #536]	@ (8006968 <PID_controller+0x2b8>)
 800674e:	e9c1 2300 	strd	r2, r3, [r1]
 8006752:	4981      	ldr	r1, [pc, #516]	@ (8006958 <PID_controller+0x2a8>)
 8006754:	a376      	add	r3, pc, #472	@ (adr r3, 8006930 <PID_controller+0x280>)
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	e9c1 2300 	strd	r2, r3, [r1]
 800675e:	497f      	ldr	r1, [pc, #508]	@ (800695c <PID_controller+0x2ac>)
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	f04f 0300 	mov.w	r3, #0
 8006768:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 800676c:	497c      	ldr	r1, [pc, #496]	@ (8006960 <PID_controller+0x2b0>)
 800676e:	a36e      	add	r3, pc, #440	@ (adr r3, 8006928 <PID_controller+0x278>)
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	e9c1 2300 	strd	r2, r3, [r1]
 8006778:	e0a4      	b.n	80068c4 <PID_controller+0x214>
		}
		else if(setpoint >= 120 && setpoint < 500)
 800677a:	f04f 0200 	mov.w	r2, #0
 800677e:	4b79      	ldr	r3, [pc, #484]	@ (8006964 <PID_controller+0x2b4>)
 8006780:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006784:	f7fa f9be 	bl	8000b04 <__aeabi_dcmpge>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d023      	beq.n	80067d6 <PID_controller+0x126>
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	4b76      	ldr	r3, [pc, #472]	@ (800696c <PID_controller+0x2bc>)
 8006794:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006798:	f7fa f9a0 	bl	8000adc <__aeabi_dcmplt>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d019      	beq.n	80067d6 <PID_controller+0x126>
		{
			Kp = 22, Ki = 0.2, Kd = 0.0;
 80067a2:	496b      	ldr	r1, [pc, #428]	@ (8006950 <PID_controller+0x2a0>)
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	4b71      	ldr	r3, [pc, #452]	@ (8006970 <PID_controller+0x2c0>)
 80067aa:	e9c1 2300 	strd	r2, r3, [r1]
 80067ae:	496a      	ldr	r1, [pc, #424]	@ (8006958 <PID_controller+0x2a8>)
 80067b0:	a35f      	add	r3, pc, #380	@ (adr r3, 8006930 <PID_controller+0x280>)
 80067b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b6:	e9c1 2300 	strd	r2, r3, [r1]
 80067ba:	4968      	ldr	r1, [pc, #416]	@ (800695c <PID_controller+0x2ac>)
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 80067c8:	4965      	ldr	r1, [pc, #404]	@ (8006960 <PID_controller+0x2b0>)
 80067ca:	a357      	add	r3, pc, #348	@ (adr r3, 8006928 <PID_controller+0x278>)
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	e9c1 2300 	strd	r2, r3, [r1]
 80067d4:	e076      	b.n	80068c4 <PID_controller+0x214>
		}
		else if(setpoint >= 500 && setpoint < 1000)
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	4b64      	ldr	r3, [pc, #400]	@ (800696c <PID_controller+0x2bc>)
 80067dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80067e0:	f7fa f990 	bl	8000b04 <__aeabi_dcmpge>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d023      	beq.n	8006832 <PID_controller+0x182>
 80067ea:	f04f 0200 	mov.w	r2, #0
 80067ee:	4b61      	ldr	r3, [pc, #388]	@ (8006974 <PID_controller+0x2c4>)
 80067f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80067f4:	f7fa f972 	bl	8000adc <__aeabi_dcmplt>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d019      	beq.n	8006832 <PID_controller+0x182>
		{
			Kp = 15, Ki = 0.2, Kd = 0.0;
 80067fe:	4954      	ldr	r1, [pc, #336]	@ (8006950 <PID_controller+0x2a0>)
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	4b5c      	ldr	r3, [pc, #368]	@ (8006978 <PID_controller+0x2c8>)
 8006806:	e9c1 2300 	strd	r2, r3, [r1]
 800680a:	4953      	ldr	r1, [pc, #332]	@ (8006958 <PID_controller+0x2a8>)
 800680c:	a348      	add	r3, pc, #288	@ (adr r3, 8006930 <PID_controller+0x280>)
 800680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006812:	e9c1 2300 	strd	r2, r3, [r1]
 8006816:	4951      	ldr	r1, [pc, #324]	@ (800695c <PID_controller+0x2ac>)
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8006824:	494e      	ldr	r1, [pc, #312]	@ (8006960 <PID_controller+0x2b0>)
 8006826:	a340      	add	r3, pc, #256	@ (adr r3, 8006928 <PID_controller+0x278>)
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	e9c1 2300 	strd	r2, r3, [r1]
 8006830:	e048      	b.n	80068c4 <PID_controller+0x214>
		}
		else if(setpoint >= 1000 && setpoint < 2500)
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	4b4f      	ldr	r3, [pc, #316]	@ (8006974 <PID_controller+0x2c4>)
 8006838:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800683c:	f7fa f962 	bl	8000b04 <__aeabi_dcmpge>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d024      	beq.n	8006890 <PID_controller+0x1e0>
 8006846:	a33c      	add	r3, pc, #240	@ (adr r3, 8006938 <PID_controller+0x288>)
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006850:	f7fa f944 	bl	8000adc <__aeabi_dcmplt>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01a      	beq.n	8006890 <PID_controller+0x1e0>
		{
			Kp = 2.0, Ki = 0.15, Kd = 0.0;
 800685a:	493d      	ldr	r1, [pc, #244]	@ (8006950 <PID_controller+0x2a0>)
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006864:	e9c1 2300 	strd	r2, r3, [r1]
 8006868:	493b      	ldr	r1, [pc, #236]	@ (8006958 <PID_controller+0x2a8>)
 800686a:	a335      	add	r3, pc, #212	@ (adr r3, 8006940 <PID_controller+0x290>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	e9c1 2300 	strd	r2, r3, [r1]
 8006874:	4939      	ldr	r1, [pc, #228]	@ (800695c <PID_controller+0x2ac>)
 8006876:	f04f 0200 	mov.w	r2, #0
 800687a:	f04f 0300 	mov.w	r3, #0
 800687e:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8006882:	4937      	ldr	r1, [pc, #220]	@ (8006960 <PID_controller+0x2b0>)
 8006884:	a328      	add	r3, pc, #160	@ (adr r3, 8006928 <PID_controller+0x278>)
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	e9c1 2300 	strd	r2, r3, [r1]
 800688e:	e019      	b.n	80068c4 <PID_controller+0x214>
		}
		else
		{
			Kp = 0.8, Ki = 0.1, Kd = 0.0;
 8006890:	492f      	ldr	r1, [pc, #188]	@ (8006950 <PID_controller+0x2a0>)
 8006892:	a32d      	add	r3, pc, #180	@ (adr r3, 8006948 <PID_controller+0x298>)
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	e9c1 2300 	strd	r2, r3, [r1]
 800689c:	492e      	ldr	r1, [pc, #184]	@ (8006958 <PID_controller+0x2a8>)
 800689e:	a322      	add	r3, pc, #136	@ (adr r3, 8006928 <PID_controller+0x278>)
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	e9c1 2300 	strd	r2, r3, [r1]
 80068a8:	492c      	ldr	r1, [pc, #176]	@ (800695c <PID_controller+0x2ac>)
 80068aa:	f04f 0200 	mov.w	r2, #0
 80068ae:	f04f 0300 	mov.w	r3, #0
 80068b2:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 80068b6:	492a      	ldr	r1, [pc, #168]	@ (8006960 <PID_controller+0x2b0>)
 80068b8:	a31b      	add	r3, pc, #108	@ (adr r3, 8006928 <PID_controller+0x278>)
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	e9c1 2300 	strd	r2, r3, [r1]
		}
		break;
 80068c2:	e1e1      	b.n	8006c88 <PID_controller+0x5d8>
 80068c4:	e1e0      	b.n	8006c88 <PID_controller+0x5d8>
	case 3:
		if(setpoint > 0 && setpoint < 100)
 80068c6:	f04f 0200 	mov.w	r2, #0
 80068ca:	f04f 0300 	mov.w	r3, #0
 80068ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80068d2:	f7fa f921 	bl	8000b18 <__aeabi_dcmpgt>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d053      	beq.n	8006984 <PID_controller+0x2d4>
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	4b26      	ldr	r3, [pc, #152]	@ (800697c <PID_controller+0x2cc>)
 80068e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80068e6:	f7fa f8f9 	bl	8000adc <__aeabi_dcmplt>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d049      	beq.n	8006984 <PID_controller+0x2d4>
		{
			Kp = 40.0, Ki = 0.0, Kd = 0.0;
 80068f0:	4917      	ldr	r1, [pc, #92]	@ (8006950 <PID_controller+0x2a0>)
 80068f2:	f04f 0200 	mov.w	r2, #0
 80068f6:	4b22      	ldr	r3, [pc, #136]	@ (8006980 <PID_controller+0x2d0>)
 80068f8:	e9c1 2300 	strd	r2, r3, [r1]
 80068fc:	4916      	ldr	r1, [pc, #88]	@ (8006958 <PID_controller+0x2a8>)
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	f04f 0300 	mov.w	r3, #0
 8006906:	e9c1 2300 	strd	r2, r3, [r1]
 800690a:	4914      	ldr	r1, [pc, #80]	@ (800695c <PID_controller+0x2ac>)
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	f04f 0300 	mov.w	r3, #0
 8006914:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8006918:	4911      	ldr	r1, [pc, #68]	@ (8006960 <PID_controller+0x2b0>)
 800691a:	a303      	add	r3, pc, #12	@ (adr r3, 8006928 <PID_controller+0x278>)
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	e9c1 2300 	strd	r2, r3, [r1]
 8006924:	e0d6      	b.n	8006ad4 <PID_controller+0x424>
 8006926:	bf00      	nop
 8006928:	9999999a 	.word	0x9999999a
 800692c:	3fb99999 	.word	0x3fb99999
 8006930:	9999999a 	.word	0x9999999a
 8006934:	3fc99999 	.word	0x3fc99999
 8006938:	00000000 	.word	0x00000000
 800693c:	40a38800 	.word	0x40a38800
 8006940:	33333333 	.word	0x33333333
 8006944:	3fc33333 	.word	0x3fc33333
 8006948:	9999999a 	.word	0x9999999a
 800694c:	3fe99999 	.word	0x3fe99999
 8006950:	20000680 	.word	0x20000680
 8006954:	3fe00000 	.word	0x3fe00000
 8006958:	20000688 	.word	0x20000688
 800695c:	20000690 	.word	0x20000690
 8006960:	200000d0 	.word	0x200000d0
 8006964:	405e0000 	.word	0x405e0000
 8006968:	403e0000 	.word	0x403e0000
 800696c:	407f4000 	.word	0x407f4000
 8006970:	40360000 	.word	0x40360000
 8006974:	408f4000 	.word	0x408f4000
 8006978:	402e0000 	.word	0x402e0000
 800697c:	40590000 	.word	0x40590000
 8006980:	40440000 	.word	0x40440000
		}
		else if(setpoint >= 100 && setpoint < 250)
 8006984:	f04f 0200 	mov.w	r2, #0
 8006988:	4ba3      	ldr	r3, [pc, #652]	@ (8006c18 <PID_controller+0x568>)
 800698a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800698e:	f7fa f8b9 	bl	8000b04 <__aeabi_dcmpge>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d024      	beq.n	80069e2 <PID_controller+0x332>
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	4b9f      	ldr	r3, [pc, #636]	@ (8006c1c <PID_controller+0x56c>)
 800699e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80069a2:	f7fa f89b 	bl	8000adc <__aeabi_dcmplt>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01a      	beq.n	80069e2 <PID_controller+0x332>
		{
			Kp = 14.0, Ki = 0.0, Kd = 0.0;
 80069ac:	499c      	ldr	r1, [pc, #624]	@ (8006c20 <PID_controller+0x570>)
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	4b9c      	ldr	r3, [pc, #624]	@ (8006c24 <PID_controller+0x574>)
 80069b4:	e9c1 2300 	strd	r2, r3, [r1]
 80069b8:	499b      	ldr	r1, [pc, #620]	@ (8006c28 <PID_controller+0x578>)
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	f04f 0300 	mov.w	r3, #0
 80069c2:	e9c1 2300 	strd	r2, r3, [r1]
 80069c6:	4999      	ldr	r1, [pc, #612]	@ (8006c2c <PID_controller+0x57c>)
 80069c8:	f04f 0200 	mov.w	r2, #0
 80069cc:	f04f 0300 	mov.w	r3, #0
 80069d0:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 80069d4:	4996      	ldr	r1, [pc, #600]	@ (8006c30 <PID_controller+0x580>)
 80069d6:	a38c      	add	r3, pc, #560	@ (adr r3, 8006c08 <PID_controller+0x558>)
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	e9c1 2300 	strd	r2, r3, [r1]
 80069e0:	e078      	b.n	8006ad4 <PID_controller+0x424>
		}
		else if(setpoint >= 250 && setpoint < 750)
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	4b8d      	ldr	r3, [pc, #564]	@ (8006c1c <PID_controller+0x56c>)
 80069e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80069ec:	f7fa f88a 	bl	8000b04 <__aeabi_dcmpge>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d024      	beq.n	8006a40 <PID_controller+0x390>
 80069f6:	f04f 0200 	mov.w	r2, #0
 80069fa:	4b8e      	ldr	r3, [pc, #568]	@ (8006c34 <PID_controller+0x584>)
 80069fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006a00:	f7fa f86c 	bl	8000adc <__aeabi_dcmplt>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d01a      	beq.n	8006a40 <PID_controller+0x390>
		{
			Kp = 5.0, Ki = 0.0, Kd = 0.0;
 8006a0a:	4985      	ldr	r1, [pc, #532]	@ (8006c20 <PID_controller+0x570>)
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	4b89      	ldr	r3, [pc, #548]	@ (8006c38 <PID_controller+0x588>)
 8006a12:	e9c1 2300 	strd	r2, r3, [r1]
 8006a16:	4984      	ldr	r1, [pc, #528]	@ (8006c28 <PID_controller+0x578>)
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	e9c1 2300 	strd	r2, r3, [r1]
 8006a24:	4981      	ldr	r1, [pc, #516]	@ (8006c2c <PID_controller+0x57c>)
 8006a26:	f04f 0200 	mov.w	r2, #0
 8006a2a:	f04f 0300 	mov.w	r3, #0
 8006a2e:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8006a32:	497f      	ldr	r1, [pc, #508]	@ (8006c30 <PID_controller+0x580>)
 8006a34:	a374      	add	r3, pc, #464	@ (adr r3, 8006c08 <PID_controller+0x558>)
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	e9c1 2300 	strd	r2, r3, [r1]
 8006a3e:	e049      	b.n	8006ad4 <PID_controller+0x424>
		}
		else if(setpoint >= 750 && setpoint < 1250)
 8006a40:	f04f 0200 	mov.w	r2, #0
 8006a44:	4b7b      	ldr	r3, [pc, #492]	@ (8006c34 <PID_controller+0x584>)
 8006a46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006a4a:	f7fa f85b 	bl	8000b04 <__aeabi_dcmpge>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d024      	beq.n	8006a9e <PID_controller+0x3ee>
 8006a54:	a36e      	add	r3, pc, #440	@ (adr r3, 8006c10 <PID_controller+0x560>)
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006a5e:	f7fa f83d 	bl	8000adc <__aeabi_dcmplt>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01a      	beq.n	8006a9e <PID_controller+0x3ee>
		{
			Kp = 3.0, Ki = 0.0, Kd = 0.0;
 8006a68:	496d      	ldr	r1, [pc, #436]	@ (8006c20 <PID_controller+0x570>)
 8006a6a:	f04f 0200 	mov.w	r2, #0
 8006a6e:	4b73      	ldr	r3, [pc, #460]	@ (8006c3c <PID_controller+0x58c>)
 8006a70:	e9c1 2300 	strd	r2, r3, [r1]
 8006a74:	496c      	ldr	r1, [pc, #432]	@ (8006c28 <PID_controller+0x578>)
 8006a76:	f04f 0200 	mov.w	r2, #0
 8006a7a:	f04f 0300 	mov.w	r3, #0
 8006a7e:	e9c1 2300 	strd	r2, r3, [r1]
 8006a82:	496a      	ldr	r1, [pc, #424]	@ (8006c2c <PID_controller+0x57c>)
 8006a84:	f04f 0200 	mov.w	r2, #0
 8006a88:	f04f 0300 	mov.w	r3, #0
 8006a8c:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8006a90:	4967      	ldr	r1, [pc, #412]	@ (8006c30 <PID_controller+0x580>)
 8006a92:	a35d      	add	r3, pc, #372	@ (adr r3, 8006c08 <PID_controller+0x558>)
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	e9c1 2300 	strd	r2, r3, [r1]
 8006a9c:	e01a      	b.n	8006ad4 <PID_controller+0x424>
		}
		else
		{
			Kp = 1.2, Ki = 0.0, Kd = 0.0;
 8006a9e:	4960      	ldr	r1, [pc, #384]	@ (8006c20 <PID_controller+0x570>)
 8006aa0:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8006aa4:	4b66      	ldr	r3, [pc, #408]	@ (8006c40 <PID_controller+0x590>)
 8006aa6:	e9c1 2300 	strd	r2, r3, [r1]
 8006aaa:	495f      	ldr	r1, [pc, #380]	@ (8006c28 <PID_controller+0x578>)
 8006aac:	f04f 0200 	mov.w	r2, #0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	e9c1 2300 	strd	r2, r3, [r1]
 8006ab8:	495c      	ldr	r1, [pc, #368]	@ (8006c2c <PID_controller+0x57c>)
 8006aba:	f04f 0200 	mov.w	r2, #0
 8006abe:	f04f 0300 	mov.w	r3, #0
 8006ac2:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8006ac6:	495a      	ldr	r1, [pc, #360]	@ (8006c30 <PID_controller+0x580>)
 8006ac8:	a34f      	add	r3, pc, #316	@ (adr r3, 8006c08 <PID_controller+0x558>)
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	e9c1 2300 	strd	r2, r3, [r1]
		}
		break;
 8006ad2:	e0d9      	b.n	8006c88 <PID_controller+0x5d8>
 8006ad4:	e0d8      	b.n	8006c88 <PID_controller+0x5d8>
	case 4:
		if(setpoint < 100)
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	4b4f      	ldr	r3, [pc, #316]	@ (8006c18 <PID_controller+0x568>)
 8006adc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006ae0:	f7f9 fffc 	bl	8000adc <__aeabi_dcmplt>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d02c      	beq.n	8006b44 <PID_controller+0x494>
		{
			Kp = 500/fabs(setpoint - actual_position), Ki = 0.0, Kd = 0.0;
 8006aea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006aee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006af2:	f7f9 fbc9 	bl	8000288 <__aeabi_dsub>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	603a      	str	r2, [r7, #0]
 8006afc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b00:	607b      	str	r3, [r7, #4]
 8006b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b06:	f04f 0000 	mov.w	r0, #0
 8006b0a:	494e      	ldr	r1, [pc, #312]	@ (8006c44 <PID_controller+0x594>)
 8006b0c:	f7f9 fe9e 	bl	800084c <__aeabi_ddiv>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4942      	ldr	r1, [pc, #264]	@ (8006c20 <PID_controller+0x570>)
 8006b16:	e9c1 2300 	strd	r2, r3, [r1]
 8006b1a:	4943      	ldr	r1, [pc, #268]	@ (8006c28 <PID_controller+0x578>)
 8006b1c:	f04f 0200 	mov.w	r2, #0
 8006b20:	f04f 0300 	mov.w	r3, #0
 8006b24:	e9c1 2300 	strd	r2, r3, [r1]
 8006b28:	4940      	ldr	r1, [pc, #256]	@ (8006c2c <PID_controller+0x57c>)
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	f04f 0300 	mov.w	r3, #0
 8006b32:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8006b36:	493e      	ldr	r1, [pc, #248]	@ (8006c30 <PID_controller+0x580>)
 8006b38:	a333      	add	r3, pc, #204	@ (adr r3, 8006c08 <PID_controller+0x558>)
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	e9c1 2300 	strd	r2, r3, [r1]
		else
		{
			Kp = 2400/fabs(setpoint - actual_position), Ki = 0.0, Kd = 0.0;
			tau = 0.1;
		}
		break;
 8006b42:	e0a1      	b.n	8006c88 <PID_controller+0x5d8>
		else if(setpoint < 500)
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	4b3e      	ldr	r3, [pc, #248]	@ (8006c44 <PID_controller+0x594>)
 8006b4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006b4e:	f7f9 ffc5 	bl	8000adc <__aeabi_dcmplt>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d02b      	beq.n	8006bb0 <PID_controller+0x500>
			Kp = 1200/fabs(setpoint - actual_position), Ki = 0.0, Kd = 0.0;
 8006b58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b5c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006b60:	f7f9 fb92 	bl	8000288 <__aeabi_dsub>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	4692      	mov	sl, r2
 8006b6a:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8006b6e:	4652      	mov	r2, sl
 8006b70:	465b      	mov	r3, fp
 8006b72:	f04f 0000 	mov.w	r0, #0
 8006b76:	4934      	ldr	r1, [pc, #208]	@ (8006c48 <PID_controller+0x598>)
 8006b78:	f7f9 fe68 	bl	800084c <__aeabi_ddiv>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4927      	ldr	r1, [pc, #156]	@ (8006c20 <PID_controller+0x570>)
 8006b82:	e9c1 2300 	strd	r2, r3, [r1]
 8006b86:	4928      	ldr	r1, [pc, #160]	@ (8006c28 <PID_controller+0x578>)
 8006b88:	f04f 0200 	mov.w	r2, #0
 8006b8c:	f04f 0300 	mov.w	r3, #0
 8006b90:	e9c1 2300 	strd	r2, r3, [r1]
 8006b94:	4925      	ldr	r1, [pc, #148]	@ (8006c2c <PID_controller+0x57c>)
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	f04f 0300 	mov.w	r3, #0
 8006b9e:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8006ba2:	4923      	ldr	r1, [pc, #140]	@ (8006c30 <PID_controller+0x580>)
 8006ba4:	a318      	add	r3, pc, #96	@ (adr r3, 8006c08 <PID_controller+0x558>)
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8006bae:	e06b      	b.n	8006c88 <PID_controller+0x5d8>
			Kp = 2400/fabs(setpoint - actual_position), Ki = 0.0, Kd = 0.0;
 8006bb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006bb4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006bb8:	f7f9 fb66 	bl	8000288 <__aeabi_dsub>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4690      	mov	r8, r2
 8006bc2:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8006bc6:	4642      	mov	r2, r8
 8006bc8:	464b      	mov	r3, r9
 8006bca:	f04f 0000 	mov.w	r0, #0
 8006bce:	491f      	ldr	r1, [pc, #124]	@ (8006c4c <PID_controller+0x59c>)
 8006bd0:	f7f9 fe3c 	bl	800084c <__aeabi_ddiv>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4911      	ldr	r1, [pc, #68]	@ (8006c20 <PID_controller+0x570>)
 8006bda:	e9c1 2300 	strd	r2, r3, [r1]
 8006bde:	4912      	ldr	r1, [pc, #72]	@ (8006c28 <PID_controller+0x578>)
 8006be0:	f04f 0200 	mov.w	r2, #0
 8006be4:	f04f 0300 	mov.w	r3, #0
 8006be8:	e9c1 2300 	strd	r2, r3, [r1]
 8006bec:	490f      	ldr	r1, [pc, #60]	@ (8006c2c <PID_controller+0x57c>)
 8006bee:	f04f 0200 	mov.w	r2, #0
 8006bf2:	f04f 0300 	mov.w	r3, #0
 8006bf6:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8006bfa:	490d      	ldr	r1, [pc, #52]	@ (8006c30 <PID_controller+0x580>)
 8006bfc:	a302      	add	r3, pc, #8	@ (adr r3, 8006c08 <PID_controller+0x558>)
 8006bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c02:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8006c06:	e03f      	b.n	8006c88 <PID_controller+0x5d8>
 8006c08:	9999999a 	.word	0x9999999a
 8006c0c:	3fb99999 	.word	0x3fb99999
 8006c10:	00000000 	.word	0x00000000
 8006c14:	40938800 	.word	0x40938800
 8006c18:	40590000 	.word	0x40590000
 8006c1c:	406f4000 	.word	0x406f4000
 8006c20:	20000680 	.word	0x20000680
 8006c24:	402c0000 	.word	0x402c0000
 8006c28:	20000688 	.word	0x20000688
 8006c2c:	20000690 	.word	0x20000690
 8006c30:	200000d0 	.word	0x200000d0
 8006c34:	40877000 	.word	0x40877000
 8006c38:	40140000 	.word	0x40140000
 8006c3c:	40080000 	.word	0x40080000
 8006c40:	3ff33333 	.word	0x3ff33333
 8006c44:	407f4000 	.word	0x407f4000
 8006c48:	4092c000 	.word	0x4092c000
 8006c4c:	40a2c000 	.word	0x40a2c000
	case 5:
		Kp = 2.0, Ki = 0.0, Kd = 0.0;
 8006c50:	4975      	ldr	r1, [pc, #468]	@ (8006e28 <PID_controller+0x778>)
 8006c52:	f04f 0200 	mov.w	r2, #0
 8006c56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006c5a:	e9c1 2300 	strd	r2, r3, [r1]
 8006c5e:	4973      	ldr	r1, [pc, #460]	@ (8006e2c <PID_controller+0x77c>)
 8006c60:	f04f 0200 	mov.w	r2, #0
 8006c64:	f04f 0300 	mov.w	r3, #0
 8006c68:	e9c1 2300 	strd	r2, r3, [r1]
 8006c6c:	4970      	ldr	r1, [pc, #448]	@ (8006e30 <PID_controller+0x780>)
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	f04f 0300 	mov.w	r3, #0
 8006c76:	e9c1 2300 	strd	r2, r3, [r1]
		tau = 0.1;
 8006c7a:	496e      	ldr	r1, [pc, #440]	@ (8006e34 <PID_controller+0x784>)
 8006c7c:	a368      	add	r3, pc, #416	@ (adr r3, 8006e20 <PID_controller+0x770>)
 8006c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c82:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8006c86:	bf00      	nop
	}
    double error = setpoint - actual_position;
 8006c88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c90:	f7f9 fafa 	bl	8000288 <__aeabi_dsub>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Proportional
    double proportional = Kp * error;
 8006c9c:	4b62      	ldr	r3, [pc, #392]	@ (8006e28 <PID_controller+0x778>)
 8006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006ca6:	f7f9 fca7 	bl	80005f8 <__aeabi_dmul>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Integral
    integral = integral + 0.5 * Ki * T * (error + prev_error);
 8006cb2:	4b5e      	ldr	r3, [pc, #376]	@ (8006e2c <PID_controller+0x77c>)
 8006cb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cb8:	f04f 0200 	mov.w	r2, #0
 8006cbc:	4b5e      	ldr	r3, [pc, #376]	@ (8006e38 <PID_controller+0x788>)
 8006cbe:	f7f9 fc9b 	bl	80005f8 <__aeabi_dmul>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4b5c      	ldr	r3, [pc, #368]	@ (8006e3c <PID_controller+0x78c>)
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	f7f9 fc92 	bl	80005f8 <__aeabi_dmul>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4690      	mov	r8, r2
 8006cda:	4699      	mov	r9, r3
 8006cdc:	4b58      	ldr	r3, [pc, #352]	@ (8006e40 <PID_controller+0x790>)
 8006cde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ce2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006ce6:	f7f9 fad1 	bl	800028c <__adddf3>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	4640      	mov	r0, r8
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	f7f9 fc81 	bl	80005f8 <__aeabi_dmul>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4b51      	ldr	r3, [pc, #324]	@ (8006e44 <PID_controller+0x794>)
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	f7f9 fac2 	bl	800028c <__adddf3>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	494d      	ldr	r1, [pc, #308]	@ (8006e44 <PID_controller+0x794>)
 8006d0e:	e9c1 2300 	strd	r2, r3, [r1]

    // Derivative
	derivative = -(2.0 * Kd * (actual_position - prevMeasurement) + (2.0 * tau - T) * derivative) / (2.0 * tau + T);
 8006d12:	4b47      	ldr	r3, [pc, #284]	@ (8006e30 <PID_controller+0x780>)
 8006d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	f7f9 fab6 	bl	800028c <__adddf3>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4690      	mov	r8, r2
 8006d26:	4699      	mov	r9, r3
 8006d28:	4b47      	ldr	r3, [pc, #284]	@ (8006e48 <PID_controller+0x798>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006d32:	f7f9 faa9 	bl	8000288 <__aeabi_dsub>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	4649      	mov	r1, r9
 8006d3e:	f7f9 fc5b 	bl	80005f8 <__aeabi_dmul>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4690      	mov	r8, r2
 8006d48:	4699      	mov	r9, r3
 8006d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8006e34 <PID_controller+0x784>)
 8006d4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	f7f9 fa9a 	bl	800028c <__adddf3>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4b36      	ldr	r3, [pc, #216]	@ (8006e3c <PID_controller+0x78c>)
 8006d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d66:	f7f9 fa8f 	bl	8000288 <__aeabi_dsub>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4610      	mov	r0, r2
 8006d70:	4619      	mov	r1, r3
 8006d72:	4b36      	ldr	r3, [pc, #216]	@ (8006e4c <PID_controller+0x79c>)
 8006d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d78:	f7f9 fc3e 	bl	80005f8 <__aeabi_dmul>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4640      	mov	r0, r8
 8006d82:	4649      	mov	r1, r9
 8006d84:	f7f9 fa82 	bl	800028c <__adddf3>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8006d92:	4b28      	ldr	r3, [pc, #160]	@ (8006e34 <PID_controller+0x784>)
 8006d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	f7f9 fa76 	bl	800028c <__adddf3>
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	4610      	mov	r0, r2
 8006da6:	4619      	mov	r1, r3
 8006da8:	4b24      	ldr	r3, [pc, #144]	@ (8006e3c <PID_controller+0x78c>)
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	f7f9 fa6d 	bl	800028c <__adddf3>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4620      	mov	r0, r4
 8006db8:	4629      	mov	r1, r5
 8006dba:	f7f9 fd47 	bl	800084c <__aeabi_ddiv>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4922      	ldr	r1, [pc, #136]	@ (8006e4c <PID_controller+0x79c>)
 8006dc4:	e9c1 2300 	strd	r2, r3, [r1]

    double output = proportional + integral + derivative;
 8006dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8006e44 <PID_controller+0x794>)
 8006dca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006dd2:	f7f9 fa5b 	bl	800028c <__adddf3>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	4610      	mov	r0, r2
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4b1b      	ldr	r3, [pc, #108]	@ (8006e4c <PID_controller+0x79c>)
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f7f9 fa52 	bl	800028c <__adddf3>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	e9c7 2308 	strd	r2, r3, [r7, #32]

    prev_error = error;
 8006df0:	4913      	ldr	r1, [pc, #76]	@ (8006e40 <PID_controller+0x790>)
 8006df2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006df6:	e9c1 2300 	strd	r2, r3, [r1]
	prevMeasurement = actual_position;
 8006dfa:	4913      	ldr	r1, [pc, #76]	@ (8006e48 <PID_controller+0x798>)
 8006dfc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e00:	e9c1 2300 	strd	r2, r3, [r1]

    return output;
 8006e04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e08:	ec43 2b17 	vmov	d7, r2, r3
}
 8006e0c:	eeb0 0a47 	vmov.f32	s0, s14
 8006e10:	eef0 0a67 	vmov.f32	s1, s15
 8006e14:	3738      	adds	r7, #56	@ 0x38
 8006e16:	46bd      	mov	sp, r7
 8006e18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e1c:	f3af 8000 	nop.w
 8006e20:	9999999a 	.word	0x9999999a
 8006e24:	3fb99999 	.word	0x3fb99999
 8006e28:	20000680 	.word	0x20000680
 8006e2c:	20000688 	.word	0x20000688
 8006e30:	20000690 	.word	0x20000690
 8006e34:	200000d0 	.word	0x200000d0
 8006e38:	3fe00000 	.word	0x3fe00000
 8006e3c:	200000d8 	.word	0x200000d8
 8006e40:	20000670 	.word	0x20000670
 8006e44:	20000660 	.word	0x20000660
 8006e48:	20000678 	.word	0x20000678
 8006e4c:	20000668 	.word	0x20000668

08006e50 <PID_controllerH>:

double PID_controllerH(double setpoint, double actual_position)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	ed87 0b02 	vstr	d0, [r7, #8]
 8006e5a:	ed87 1b00 	vstr	d1, [r7]
	double error, P;
	if(setpoint >= 45 && setpoint < 90)
 8006e5e:	f04f 0200 	mov.w	r2, #0
 8006e62:	4b5f      	ldr	r3, [pc, #380]	@ (8006fe0 <PID_controllerH+0x190>)
 8006e64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e68:	f7f9 fe4c 	bl	8000b04 <__aeabi_dcmpge>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d010      	beq.n	8006e94 <PID_controllerH+0x44>
 8006e72:	f04f 0200 	mov.w	r2, #0
 8006e76:	4b5b      	ldr	r3, [pc, #364]	@ (8006fe4 <PID_controllerH+0x194>)
 8006e78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e7c:	f7f9 fe2e 	bl	8000adc <__aeabi_dcmplt>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d006      	beq.n	8006e94 <PID_controllerH+0x44>
	{
		Kp = 1.1;
 8006e86:	4958      	ldr	r1, [pc, #352]	@ (8006fe8 <PID_controllerH+0x198>)
 8006e88:	a34b      	add	r3, pc, #300	@ (adr r3, 8006fb8 <PID_controllerH+0x168>)
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	e9c1 2300 	strd	r2, r3, [r1]
 8006e92:	e031      	b.n	8006ef8 <PID_controllerH+0xa8>
	}
	else if(setpoint >= 90 && setpoint < 135)
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	4b52      	ldr	r3, [pc, #328]	@ (8006fe4 <PID_controllerH+0x194>)
 8006e9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e9e:	f7f9 fe31 	bl	8000b04 <__aeabi_dcmpge>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d010      	beq.n	8006eca <PID_controllerH+0x7a>
 8006ea8:	a345      	add	r3, pc, #276	@ (adr r3, 8006fc0 <PID_controllerH+0x170>)
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006eb2:	f7f9 fe13 	bl	8000adc <__aeabi_dcmplt>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d006      	beq.n	8006eca <PID_controllerH+0x7a>
	{
		Kp = 0.7;
 8006ebc:	494a      	ldr	r1, [pc, #296]	@ (8006fe8 <PID_controllerH+0x198>)
 8006ebe:	a342      	add	r3, pc, #264	@ (adr r3, 8006fc8 <PID_controllerH+0x178>)
 8006ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec4:	e9c1 2300 	strd	r2, r3, [r1]
 8006ec8:	e016      	b.n	8006ef8 <PID_controllerH+0xa8>
	}
	else if(setpoint >= 135)
 8006eca:	a33d      	add	r3, pc, #244	@ (adr r3, 8006fc0 <PID_controllerH+0x170>)
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ed4:	f7f9 fe16 	bl	8000b04 <__aeabi_dcmpge>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d006      	beq.n	8006eec <PID_controllerH+0x9c>
	{
		Kp = 0.8;
 8006ede:	4942      	ldr	r1, [pc, #264]	@ (8006fe8 <PID_controllerH+0x198>)
 8006ee0:	a33b      	add	r3, pc, #236	@ (adr r3, 8006fd0 <PID_controllerH+0x180>)
 8006ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee6:	e9c1 2300 	strd	r2, r3, [r1]
 8006eea:	e005      	b.n	8006ef8 <PID_controllerH+0xa8>
	}
	else
	{
		Kp = 1.7;
 8006eec:	493e      	ldr	r1, [pc, #248]	@ (8006fe8 <PID_controllerH+0x198>)
 8006eee:	a33a      	add	r3, pc, #232	@ (adr r3, 8006fd8 <PID_controllerH+0x188>)
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	e9c1 2300 	strd	r2, r3, [r1]
	}
//	Kp = 550/(7.6 * fabs(setpoint - actual_position));

	if((setpoint - actual_position) > 180)
 8006ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006efc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f00:	f7f9 f9c2 	bl	8000288 <__aeabi_dsub>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	4b36      	ldr	r3, [pc, #216]	@ (8006fec <PID_controllerH+0x19c>)
 8006f12:	f7f9 fe01 	bl	8000b18 <__aeabi_dcmpgt>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00d      	beq.n	8006f38 <PID_controllerH+0xe8>
	{
	    error = -(setpoint + actual_position);
 8006f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f24:	f7f9 f9b2 	bl	800028c <__adddf3>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	61b9      	str	r1, [r7, #24]
 8006f30:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006f34:	61fb      	str	r3, [r7, #28]
 8006f36:	e026      	b.n	8006f86 <PID_controllerH+0x136>
	}
	else if((setpoint - actual_position) < -180)
 8006f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f40:	f7f9 f9a2 	bl	8000288 <__aeabi_dsub>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4610      	mov	r0, r2
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	4b27      	ldr	r3, [pc, #156]	@ (8006ff0 <PID_controllerH+0x1a0>)
 8006f52:	f7f9 fdc3 	bl	8000adc <__aeabi_dcmplt>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00a      	beq.n	8006f72 <PID_controllerH+0x122>
	{
		error = setpoint + actual_position;
 8006f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f64:	f7f9 f992 	bl	800028c <__adddf3>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8006f70:	e009      	b.n	8006f86 <PID_controllerH+0x136>
	}
	else
	{
	    error = setpoint - actual_position;
 8006f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f7a:	f7f9 f985 	bl	8000288 <__aeabi_dsub>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}

    // Proportional
	P = Kp * error;
 8006f86:	4b18      	ldr	r3, [pc, #96]	@ (8006fe8 <PID_controllerH+0x198>)
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006f90:	f7f9 fb32 	bl	80005f8 <__aeabi_dmul>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return P;
 8006f9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006fa0:	ec43 2b17 	vmov	d7, r2, r3
}
 8006fa4:	eeb0 0a47 	vmov.f32	s0, s14
 8006fa8:	eef0 0a67 	vmov.f32	s1, s15
 8006fac:	3720      	adds	r7, #32
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	f3af 8000 	nop.w
 8006fb8:	9999999a 	.word	0x9999999a
 8006fbc:	3ff19999 	.word	0x3ff19999
 8006fc0:	00000000 	.word	0x00000000
 8006fc4:	4060e000 	.word	0x4060e000
 8006fc8:	66666666 	.word	0x66666666
 8006fcc:	3fe66666 	.word	0x3fe66666
 8006fd0:	9999999a 	.word	0x9999999a
 8006fd4:	3fe99999 	.word	0x3fe99999
 8006fd8:	33333333 	.word	0x33333333
 8006fdc:	3ffb3333 	.word	0x3ffb3333
 8006fe0:	40468000 	.word	0x40468000
 8006fe4:	40568000 	.word	0x40568000
 8006fe8:	20000680 	.word	0x20000680
 8006fec:	40668000 	.word	0x40668000
 8006ff0:	c0668000 	.word	0xc0668000

08006ff4 <map>:
static double prevAngleBall = 0.0;
double kpAngle = 0.0;
extern int camera[5];

int map(int st1, int fn1, int st2, int fn2, int value)
{
 8006ff4:	b5b0      	push	{r4, r5, r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
    return (1.0*(value-st1))/((fn1-st1)*1.0) * (fn2-st2)+st2;
 8007002:	6a3a      	ldr	r2, [r7, #32]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	4618      	mov	r0, r3
 800700a:	f7f9 fa8b 	bl	8000524 <__aeabi_i2d>
 800700e:	4604      	mov	r4, r0
 8007010:	460d      	mov	r5, r1
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	4618      	mov	r0, r3
 800701a:	f7f9 fa83 	bl	8000524 <__aeabi_i2d>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4620      	mov	r0, r4
 8007024:	4629      	mov	r1, r5
 8007026:	f7f9 fc11 	bl	800084c <__aeabi_ddiv>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4614      	mov	r4, r2
 8007030:	461d      	mov	r5, r3
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	4618      	mov	r0, r3
 800703a:	f7f9 fa73 	bl	8000524 <__aeabi_i2d>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	4620      	mov	r0, r4
 8007044:	4629      	mov	r1, r5
 8007046:	f7f9 fad7 	bl	80005f8 <__aeabi_dmul>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	4614      	mov	r4, r2
 8007050:	461d      	mov	r5, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7f9 fa66 	bl	8000524 <__aeabi_i2d>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4620      	mov	r0, r4
 800705e:	4629      	mov	r1, r5
 8007060:	f7f9 f914 	bl	800028c <__adddf3>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4610      	mov	r0, r2
 800706a:	4619      	mov	r1, r3
 800706c:	f7f9 fd74 	bl	8000b58 <__aeabi_d2iz>
 8007070:	4603      	mov	r3, r0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800707c <servo_write>:
    prevVy = *Vy;
    prevW = *W;
}

void servo_write(int angle)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af02      	add	r7, sp, #8
 8007082:	6078      	str	r0, [r7, #4]
	int i = map(0, 180, 25, 125, angle);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	237d      	movs	r3, #125	@ 0x7d
 800708a:	2219      	movs	r2, #25
 800708c:	21b4      	movs	r1, #180	@ 0xb4
 800708e:	2000      	movs	r0, #0
 8007090:	f7ff ffb0 	bl	8006ff4 <map>
 8007094:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, i);
 8007096:	4b04      	ldr	r3, [pc, #16]	@ (80070a8 <servo_write+0x2c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000380 	.word	0x20000380

080070ac <PID_Kalman>:
    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
    Inverse_Kinematics(Vx, Vy, W);
}

void PID_Kalman(EKF setpoint, uint8_t pidMode)
{
 80070ac:	b5b0      	push	{r4, r5, r7, lr}
 80070ae:	b094      	sub	sp, #80	@ 0x50
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	eeb0 5a40 	vmov.f32	s10, s0
 80070b6:	eef0 5a60 	vmov.f32	s11, s1
 80070ba:	eeb0 6a41 	vmov.f32	s12, s2
 80070be:	eef0 6a61 	vmov.f32	s13, s3
 80070c2:	eeb0 7a42 	vmov.f32	s14, s4
 80070c6:	eef0 7a62 	vmov.f32	s15, s5
 80070ca:	4603      	mov	r3, r0
 80070cc:	ed87 5b02 	vstr	d5, [r7, #8]
 80070d0:	ed87 6b04 	vstr	d6, [r7, #16]
 80070d4:	ed87 7b06 	vstr	d7, [r7, #24]
 80070d8:	71fb      	strb	r3, [r7, #7]
	EKF position = extendedKalmanFilter();
 80070da:	f7fe fad1 	bl	8005680 <extendedKalmanFilter>
 80070de:	eeb0 5a40 	vmov.f32	s10, s0
 80070e2:	eef0 5a60 	vmov.f32	s11, s1
 80070e6:	eeb0 6a41 	vmov.f32	s12, s2
 80070ea:	eef0 6a61 	vmov.f32	s13, s3
 80070ee:	eeb0 7a42 	vmov.f32	s14, s4
 80070f2:	eef0 7a62 	vmov.f32	s15, s5
 80070f6:	ed87 5b08 	vstr	d5, [r7, #32]
 80070fa:	ed87 6b0a 	vstr	d6, [r7, #40]	@ 0x28
 80070fe:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
	double Vx = 0.0;
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	f04f 0300 	mov.w	r3, #0
 800710a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double Vy = 0.0;
 800710e:	f04f 0200 	mov.w	r2, #0
 8007112:	f04f 0300 	mov.w	r3, #0
 8007116:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double W = 0.0;
 800711a:	f04f 0200 	mov.w	r2, #0
 800711e:	f04f 0300 	mov.w	r3, #0
 8007122:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	Vx = PID_controller(setpoint.x, position.x, pidMode);
 8007126:	ed97 7b02 	vldr	d7, [r7, #8]
 800712a:	ed97 6b08 	vldr	d6, [r7, #32]
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	4618      	mov	r0, r3
 8007132:	eeb0 1a46 	vmov.f32	s2, s12
 8007136:	eef0 1a66 	vmov.f32	s3, s13
 800713a:	eeb0 0a47 	vmov.f32	s0, s14
 800713e:	eef0 0a67 	vmov.f32	s1, s15
 8007142:	f7ff fab5 	bl	80066b0 <PID_controller>
 8007146:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
	Vy = PID_controller(setpoint.y, position.y, pidMode);
 800714a:	ed97 7b04 	vldr	d7, [r7, #16]
 800714e:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	4618      	mov	r0, r3
 8007156:	eeb0 1a46 	vmov.f32	s2, s12
 800715a:	eef0 1a66 	vmov.f32	s3, s13
 800715e:	eeb0 0a47 	vmov.f32	s0, s14
 8007162:	eef0 0a67 	vmov.f32	s1, s15
 8007166:	f7ff faa3 	bl	80066b0 <PID_controller>
 800716a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	W = PID_controllerH(setpoint.h, position.h);
 800716e:	ed97 7b06 	vldr	d7, [r7, #24]
 8007172:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8007176:	eeb0 1a46 	vmov.f32	s2, s12
 800717a:	eef0 1a66 	vmov.f32	s3, s13
 800717e:	eeb0 0a47 	vmov.f32	s0, s14
 8007182:	eef0 0a67 	vmov.f32	s1, s15
 8007186:	f7ff fe63 	bl	8006e50 <PID_controllerH>
 800718a:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

	Inverse_Kinematics(Vx, Vy, W);
 800718e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8007192:	f7f9 fce1 	bl	8000b58 <__aeabi_d2iz>
 8007196:	4604      	mov	r4, r0
 8007198:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800719c:	f7f9 fcdc 	bl	8000b58 <__aeabi_d2iz>
 80071a0:	4605      	mov	r5, r0
 80071a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80071a6:	f7f9 fcd7 	bl	8000b58 <__aeabi_d2iz>
 80071aa:	4603      	mov	r3, r0
 80071ac:	461a      	mov	r2, r3
 80071ae:	4629      	mov	r1, r5
 80071b0:	4620      	mov	r0, r4
 80071b2:	f7f9 ffc9 	bl	8001148 <Inverse_Kinematics>
}
 80071b6:	bf00      	nop
 80071b8:	3750      	adds	r7, #80	@ 0x50
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bdb0      	pop	{r4, r5, r7, pc}

080071be <PID_setDegree>:
    double Vy = PID_controller(setpoint_y, currentPosition.y, pidMode);
    Inverse_Kinematics(0, Vy, 0);
}

void PID_setDegree(double setpoint_h)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b08a      	sub	sp, #40	@ 0x28
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	ed87 0b00 	vstr	d0, [r7]
	EKF currentPosition = extendedKalmanFilter();
 80071c8:	f7fe fa5a 	bl	8005680 <extendedKalmanFilter>
 80071cc:	eeb0 5a40 	vmov.f32	s10, s0
 80071d0:	eef0 5a60 	vmov.f32	s11, s1
 80071d4:	eeb0 6a41 	vmov.f32	s12, s2
 80071d8:	eef0 6a61 	vmov.f32	s13, s3
 80071dc:	eeb0 7a42 	vmov.f32	s14, s4
 80071e0:	eef0 7a62 	vmov.f32	s15, s5
 80071e4:	ed87 5b02 	vstr	d5, [r7, #8]
 80071e8:	ed87 6b04 	vstr	d6, [r7, #16]
 80071ec:	ed87 7b06 	vstr	d7, [r7, #24]

    double W = PID_controllerH(setpoint_h, currentPosition.h);
 80071f0:	ed97 7b06 	vldr	d7, [r7, #24]
 80071f4:	eeb0 1a47 	vmov.f32	s2, s14
 80071f8:	eef0 1a67 	vmov.f32	s3, s15
 80071fc:	ed97 0b00 	vldr	d0, [r7]
 8007200:	f7ff fe26 	bl	8006e50 <PID_controllerH>
 8007204:	ed87 0b08 	vstr	d0, [r7, #32]
    Inverse_Kinematics(0, 0, W);
 8007208:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800720c:	f7f9 fca4 	bl	8000b58 <__aeabi_d2iz>
 8007210:	4603      	mov	r3, r0
 8007212:	461a      	mov	r2, r3
 8007214:	2100      	movs	r1, #0
 8007216:	2000      	movs	r0, #0
 8007218:	f7f9 ff96 	bl	8001148 <Inverse_Kinematics>
}
 800721c:	bf00      	nop
 800721e:	3728      	adds	r7, #40	@ 0x28
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	0000      	movs	r0, r0
	...

08007228 <focusToTheBall>:

    Inverse_Kinematics(Vx, Vy, W);
}

void focusToTheBall()
{
 8007228:	b5b0      	push	{r4, r5, r7, lr}
 800722a:	b08e      	sub	sp, #56	@ 0x38
 800722c:	af02      	add	r7, sp, #8
    int ballDistance = camera[0] * 10; // convert to mm
 800722e:	4b5a      	ldr	r3, [pc, #360]	@ (8007398 <focusToTheBall+0x170>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int ballAngle = camera[1];
 800723c:	4b56      	ldr	r3, [pc, #344]	@ (8007398 <focusToTheBall+0x170>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	62bb      	str	r3, [r7, #40]	@ 0x28
    int ballExistence = camera[2];
 8007242:	4b55      	ldr	r3, [pc, #340]	@ (8007398 <focusToTheBall+0x170>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	627b      	str	r3, [r7, #36]	@ 0x24

    double kp = 0.05;
 8007248:	a34f      	add	r3, pc, #316	@ (adr r3, 8007388 <focusToTheBall+0x160>)
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int gndtoCam = 358; // in mm
 8007252:	f44f 73b3 	mov.w	r3, #358	@ 0x166
 8007256:	617b      	str	r3, [r7, #20]

    int yBALL = cos(ballAngle * M_PI / 180.0) * ballDistance;
 8007258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800725a:	f7f9 f963 	bl	8000524 <__aeabi_i2d>
 800725e:	a34c      	add	r3, pc, #304	@ (adr r3, 8007390 <focusToTheBall+0x168>)
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	f7f9 f9c8 	bl	80005f8 <__aeabi_dmul>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4610      	mov	r0, r2
 800726e:	4619      	mov	r1, r3
 8007270:	f04f 0200 	mov.w	r2, #0
 8007274:	4b49      	ldr	r3, [pc, #292]	@ (800739c <focusToTheBall+0x174>)
 8007276:	f7f9 fae9 	bl	800084c <__aeabi_ddiv>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	ec43 2b17 	vmov	d7, r2, r3
 8007282:	eeb0 0a47 	vmov.f32	s0, s14
 8007286:	eef0 0a67 	vmov.f32	s1, s15
 800728a:	f009 fa85 	bl	8010798 <cos>
 800728e:	ec55 4b10 	vmov	r4, r5, d0
 8007292:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007294:	f7f9 f946 	bl	8000524 <__aeabi_i2d>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4620      	mov	r0, r4
 800729e:	4629      	mov	r1, r5
 80072a0:	f7f9 f9aa 	bl	80005f8 <__aeabi_dmul>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4610      	mov	r0, r2
 80072aa:	4619      	mov	r1, r3
 80072ac:	f7f9 fc54 	bl	8000b58 <__aeabi_d2iz>
 80072b0:	4603      	mov	r3, r0
 80072b2:	613b      	str	r3, [r7, #16]
    double focus = atan2(gndtoCam, yBALL) * 180.0 / M_PI;
 80072b4:	6978      	ldr	r0, [r7, #20]
 80072b6:	f7f9 f935 	bl	8000524 <__aeabi_i2d>
 80072ba:	4604      	mov	r4, r0
 80072bc:	460d      	mov	r5, r1
 80072be:	6938      	ldr	r0, [r7, #16]
 80072c0:	f7f9 f930 	bl	8000524 <__aeabi_i2d>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	ec43 2b11 	vmov	d1, r2, r3
 80072cc:	ec45 4b10 	vmov	d0, r4, r5
 80072d0:	f009 fa2a 	bl	8010728 <atan2>
 80072d4:	ec51 0b10 	vmov	r0, r1, d0
 80072d8:	f04f 0200 	mov.w	r2, #0
 80072dc:	4b2f      	ldr	r3, [pc, #188]	@ (800739c <focusToTheBall+0x174>)
 80072de:	f7f9 f98b 	bl	80005f8 <__aeabi_dmul>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	4610      	mov	r0, r2
 80072e8:	4619      	mov	r1, r3
 80072ea:	a329      	add	r3, pc, #164	@ (adr r3, 8007390 <focusToTheBall+0x168>)
 80072ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f0:	f7f9 faac 	bl	800084c <__aeabi_ddiv>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    prevAngleBall = focus;
 80072fc:	4928      	ldr	r1, [pc, #160]	@ (80073a0 <focusToTheBall+0x178>)
 80072fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007302:	e9c1 2300 	strd	r2, r3, [r1]
    int focusMapping = map(0, 90, 180, 90, prevAngleBall);
 8007306:	4b26      	ldr	r3, [pc, #152]	@ (80073a0 <focusToTheBall+0x178>)
 8007308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730c:	4610      	mov	r0, r2
 800730e:	4619      	mov	r1, r3
 8007310:	f7f9 fc22 	bl	8000b58 <__aeabi_d2iz>
 8007314:	4603      	mov	r3, r0
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	235a      	movs	r3, #90	@ 0x5a
 800731a:	22b4      	movs	r2, #180	@ 0xb4
 800731c:	215a      	movs	r1, #90	@ 0x5a
 800731e:	2000      	movs	r0, #0
 8007320:	f7ff fe68 	bl	8006ff4 <map>
 8007324:	6078      	str	r0, [r7, #4]
    kpAngle = focusMapping + kp * (focusMapping - kpAngle);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7f9 f8fc 	bl	8000524 <__aeabi_i2d>
 800732c:	4604      	mov	r4, r0
 800732e:	460d      	mov	r5, r1
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f7f9 f8f7 	bl	8000524 <__aeabi_i2d>
 8007336:	4b1b      	ldr	r3, [pc, #108]	@ (80073a4 <focusToTheBall+0x17c>)
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733c:	f7f8 ffa4 	bl	8000288 <__aeabi_dsub>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	4610      	mov	r0, r2
 8007346:	4619      	mov	r1, r3
 8007348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800734c:	f7f9 f954 	bl	80005f8 <__aeabi_dmul>
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4620      	mov	r0, r4
 8007356:	4629      	mov	r1, r5
 8007358:	f7f8 ff98 	bl	800028c <__adddf3>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4910      	ldr	r1, [pc, #64]	@ (80073a4 <focusToTheBall+0x17c>)
 8007362:	e9c1 2300 	strd	r2, r3, [r1]
    servo_write(kpAngle);
 8007366:	4b0f      	ldr	r3, [pc, #60]	@ (80073a4 <focusToTheBall+0x17c>)
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	4610      	mov	r0, r2
 800736e:	4619      	mov	r1, r3
 8007370:	f7f9 fbf2 	bl	8000b58 <__aeabi_d2iz>
 8007374:	4603      	mov	r3, r0
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff fe80 	bl	800707c <servo_write>
}
 800737c:	bf00      	nop
 800737e:	3730      	adds	r7, #48	@ 0x30
 8007380:	46bd      	mov	sp, r7
 8007382:	bdb0      	pop	{r4, r5, r7, pc}
 8007384:	f3af 8000 	nop.w
 8007388:	9999999a 	.word	0x9999999a
 800738c:	3fa99999 	.word	0x3fa99999
 8007390:	54442d18 	.word	0x54442d18
 8007394:	400921fb 	.word	0x400921fb
 8007398:	2000058c 	.word	0x2000058c
 800739c:	40668000 	.word	0x40668000
 80073a0:	20000698 	.word	0x20000698
 80073a4:	200006a0 	.word	0x200006a0

080073a8 <findtheBall>:

void findtheBall()
{
 80073a8:	b5b0      	push	{r4, r5, r7, lr}
 80073aa:	b08e      	sub	sp, #56	@ 0x38
 80073ac:	af00      	add	r7, sp, #0
     * camera[3]: silo distance (in cm)
     * camera[4]: silo angle (in degree)
     */

    static double lastBallAngle = 0, lastxBall = 0, lastyBall = 0;
    int ballDistance = camera[0] * 10; // convert to mm
 80073ae:	4bc2      	ldr	r3, [pc, #776]	@ (80076b8 <findtheBall+0x310>)
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	637b      	str	r3, [r7, #52]	@ 0x34
    int ballAngle = camera[1];
 80073bc:	4bbe      	ldr	r3, [pc, #760]	@ (80076b8 <findtheBall+0x310>)
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	633b      	str	r3, [r7, #48]	@ 0x30
    int ballExistence = camera[2];
 80073c2:	4bbd      	ldr	r3, [pc, #756]	@ (80076b8 <findtheBall+0x310>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int xBALL = sin(ballAngle * M_PI / 180) * ballDistance;
 80073c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073ca:	f7f9 f8ab 	bl	8000524 <__aeabi_i2d>
 80073ce:	a3b4      	add	r3, pc, #720	@ (adr r3, 80076a0 <findtheBall+0x2f8>)
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	f7f9 f910 	bl	80005f8 <__aeabi_dmul>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	4610      	mov	r0, r2
 80073de:	4619      	mov	r1, r3
 80073e0:	f04f 0200 	mov.w	r2, #0
 80073e4:	4bb5      	ldr	r3, [pc, #724]	@ (80076bc <findtheBall+0x314>)
 80073e6:	f7f9 fa31 	bl	800084c <__aeabi_ddiv>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	ec43 2b17 	vmov	d7, r2, r3
 80073f2:	eeb0 0a47 	vmov.f32	s0, s14
 80073f6:	eef0 0a67 	vmov.f32	s1, s15
 80073fa:	f009 fa21 	bl	8010840 <sin>
 80073fe:	ec55 4b10 	vmov	r4, r5, d0
 8007402:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007404:	f7f9 f88e 	bl	8000524 <__aeabi_i2d>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4620      	mov	r0, r4
 800740e:	4629      	mov	r1, r5
 8007410:	f7f9 f8f2 	bl	80005f8 <__aeabi_dmul>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4610      	mov	r0, r2
 800741a:	4619      	mov	r1, r3
 800741c:	f7f9 fb9c 	bl	8000b58 <__aeabi_d2iz>
 8007420:	4603      	mov	r3, r0
 8007422:	62bb      	str	r3, [r7, #40]	@ 0x28
    int yBALL = cos(ballAngle * M_PI / 180) * ballDistance;
 8007424:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007426:	f7f9 f87d 	bl	8000524 <__aeabi_i2d>
 800742a:	a39d      	add	r3, pc, #628	@ (adr r3, 80076a0 <findtheBall+0x2f8>)
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	f7f9 f8e2 	bl	80005f8 <__aeabi_dmul>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4610      	mov	r0, r2
 800743a:	4619      	mov	r1, r3
 800743c:	f04f 0200 	mov.w	r2, #0
 8007440:	4b9e      	ldr	r3, [pc, #632]	@ (80076bc <findtheBall+0x314>)
 8007442:	f7f9 fa03 	bl	800084c <__aeabi_ddiv>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	ec43 2b17 	vmov	d7, r2, r3
 800744e:	eeb0 0a47 	vmov.f32	s0, s14
 8007452:	eef0 0a67 	vmov.f32	s1, s15
 8007456:	f009 f99f 	bl	8010798 <cos>
 800745a:	ec55 4b10 	vmov	r4, r5, d0
 800745e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007460:	f7f9 f860 	bl	8000524 <__aeabi_i2d>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	4620      	mov	r0, r4
 800746a:	4629      	mov	r1, r5
 800746c:	f7f9 f8c4 	bl	80005f8 <__aeabi_dmul>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4610      	mov	r0, r2
 8007476:	4619      	mov	r1, r3
 8007478:	f7f9 fb6e 	bl	8000b58 <__aeabi_d2iz>
 800747c:	4603      	mov	r3, r0
 800747e:	627b      	str	r3, [r7, #36]	@ 0x24
    static bool motorState = false;
    static bool motorCorrWithoutBall = false;
    static bool motorCorrWithBall = false;

    uint32_t timer = HAL_GetTick();
 8007480:	f001 f8a2 	bl	80085c8 <HAL_GetTick>
 8007484:	6238      	str	r0, [r7, #32]
    uint32_t lastTime = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	61fb      	str	r3, [r7, #28]

    double Vx = PID_controller((double)xBALL, 0.0, 1);
 800748a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800748c:	f7f9 f84a 	bl	8000524 <__aeabi_i2d>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	2001      	movs	r0, #1
 8007496:	ed9f 1b84 	vldr	d1, [pc, #528]	@ 80076a8 <findtheBall+0x300>
 800749a:	ec43 2b10 	vmov	d0, r2, r3
 800749e:	f7ff f907 	bl	80066b0 <PID_controller>
 80074a2:	ed87 0b04 	vstr	d0, [r7, #16]
    double Vy = PID_controller((double)yBALL, 0.0, 1);
 80074a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80074a8:	f7f9 f83c 	bl	8000524 <__aeabi_i2d>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	2001      	movs	r0, #1
 80074b2:	ed9f 1b7d 	vldr	d1, [pc, #500]	@ 80076a8 <findtheBall+0x300>
 80074b6:	ec43 2b10 	vmov	d0, r2, r3
 80074ba:	f7ff f8f9 	bl	80066b0 <PID_controller>
 80074be:	ed87 0b02 	vstr	d0, [r7, #8]
    double W = PID_controllerH((double)ballAngle, 0.0);
 80074c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074c4:	f7f9 f82e 	bl	8000524 <__aeabi_i2d>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	ed9f 1b76 	vldr	d1, [pc, #472]	@ 80076a8 <findtheBall+0x300>
 80074d0:	ec43 2b10 	vmov	d0, r2, r3
 80074d4:	f7ff fcbc 	bl	8006e50 <PID_controllerH>
 80074d8:	ed87 0b00 	vstr	d0, [r7]

    if (ballExistence != 0)
 80074dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d059      	beq.n	8007596 <findtheBall+0x1ee>
    {
    	lastxBall = xBALL;
 80074e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074e4:	f7f9 f81e 	bl	8000524 <__aeabi_i2d>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4974      	ldr	r1, [pc, #464]	@ (80076c0 <findtheBall+0x318>)
 80074ee:	e9c1 2300 	strd	r2, r3, [r1]
    	lastyBall = yBALL;
 80074f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80074f4:	f7f9 f816 	bl	8000524 <__aeabi_i2d>
 80074f8:	4602      	mov	r2, r0
 80074fa:	460b      	mov	r3, r1
 80074fc:	4971      	ldr	r1, [pc, #452]	@ (80076c4 <findtheBall+0x31c>)
 80074fe:	e9c1 2300 	strd	r2, r3, [r1]
    	lastBallAngle = ballAngle;
 8007502:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007504:	f7f9 f80e 	bl	8000524 <__aeabi_i2d>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	496e      	ldr	r1, [pc, #440]	@ (80076c8 <findtheBall+0x320>)
 800750e:	e9c1 2300 	strd	r2, r3, [r1]

    	focusToTheBall();
 8007512:	f7ff fe89 	bl	8007228 <focusToTheBall>
    	setMotorSpeed(1, -500);
 8007516:	ed9f 0b66 	vldr	d0, [pc, #408]	@ 80076b0 <findtheBall+0x308>
 800751a:	2001      	movs	r0, #1
 800751c:	f7f9 fd9e 	bl	800105c <setMotorSpeed>
        if(ballAngle < 20 && ballAngle > 0)
 8007520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007522:	2b13      	cmp	r3, #19
 8007524:	dc09      	bgt.n	800753a <findtheBall+0x192>
 8007526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007528:	2b00      	cmp	r3, #0
 800752a:	dd06      	ble.n	800753a <findtheBall+0x192>
        {
        	Inverse_Kinematics(0, 1600, 0);
 800752c:	2200      	movs	r2, #0
 800752e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8007532:	2000      	movs	r0, #0
 8007534:	f7f9 fe08 	bl	8001148 <Inverse_Kinematics>
 8007538:	e125      	b.n	8007786 <findtheBall+0x3de>
//        	start(0, 1600, 0, 1);
        }
        else
        {
        	if(timer - lastTime >= 1000)
 800753a:	6a3a      	ldr	r2, [r7, #32]
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007544:	f0c0 811f 	bcc.w	8007786 <findtheBall+0x3de>
        	{
            	lastTime = timer;
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	61fb      	str	r3, [r7, #28]
            	if(motorCorrWithBall)
 800754c:	4b5f      	ldr	r3, [pc, #380]	@ (80076cc <findtheBall+0x324>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d012      	beq.n	800757a <findtheBall+0x1d2>
            	{
                	putar(0, 0, W);
 8007554:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007558:	f7f9 fafe 	bl	8000b58 <__aeabi_d2iz>
 800755c:	4603      	mov	r3, r0
 800755e:	461a      	mov	r2, r3
 8007560:	2100      	movs	r1, #0
 8007562:	2000      	movs	r0, #0
 8007564:	f7fa f838 	bl	80015d8 <putar>
                	setMotorSpeed(1, 0);
 8007568:	ed9f 0b4f 	vldr	d0, [pc, #316]	@ 80076a8 <findtheBall+0x300>
 800756c:	2001      	movs	r0, #1
 800756e:	f7f9 fd75 	bl	800105c <setMotorSpeed>
                	motorCorrWithBall = false;
 8007572:	4b56      	ldr	r3, [pc, #344]	@ (80076cc <findtheBall+0x324>)
 8007574:	2200      	movs	r2, #0
 8007576:	701a      	strb	r2, [r3, #0]
                	motorState = true;
        		}
        	}
        }
    }
}
 8007578:	e105      	b.n	8007786 <findtheBall+0x3de>
                	putar(0, 0, 0);
 800757a:	2200      	movs	r2, #0
 800757c:	2100      	movs	r1, #0
 800757e:	2000      	movs	r0, #0
 8007580:	f7fa f82a 	bl	80015d8 <putar>
                	setMotorSpeed(1, 0);
 8007584:	ed9f 0b48 	vldr	d0, [pc, #288]	@ 80076a8 <findtheBall+0x300>
 8007588:	2001      	movs	r0, #1
 800758a:	f7f9 fd67 	bl	800105c <setMotorSpeed>
                	motorCorrWithBall = true;
 800758e:	4b4f      	ldr	r3, [pc, #316]	@ (80076cc <findtheBall+0x324>)
 8007590:	2201      	movs	r2, #1
 8007592:	701a      	strb	r2, [r3, #0]
}
 8007594:	e0f7      	b.n	8007786 <findtheBall+0x3de>
        Vx = PID_controller(lastxBall, 0.0, 1);
 8007596:	4b4a      	ldr	r3, [pc, #296]	@ (80076c0 <findtheBall+0x318>)
 8007598:	ed93 7b00 	vldr	d7, [r3]
 800759c:	2001      	movs	r0, #1
 800759e:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 80076a8 <findtheBall+0x300>
 80075a2:	eeb0 0a47 	vmov.f32	s0, s14
 80075a6:	eef0 0a67 	vmov.f32	s1, s15
 80075aa:	f7ff f881 	bl	80066b0 <PID_controller>
 80075ae:	ed87 0b04 	vstr	d0, [r7, #16]
        Vy = PID_controller(lastyBall, 0.0, 1);
 80075b2:	4b44      	ldr	r3, [pc, #272]	@ (80076c4 <findtheBall+0x31c>)
 80075b4:	ed93 7b00 	vldr	d7, [r3]
 80075b8:	2001      	movs	r0, #1
 80075ba:	ed9f 1b3b 	vldr	d1, [pc, #236]	@ 80076a8 <findtheBall+0x300>
 80075be:	eeb0 0a47 	vmov.f32	s0, s14
 80075c2:	eef0 0a67 	vmov.f32	s1, s15
 80075c6:	f7ff f873 	bl	80066b0 <PID_controller>
 80075ca:	ed87 0b02 	vstr	d0, [r7, #8]
        W = PID_controllerH(lastBallAngle, 0.0);
 80075ce:	4b3e      	ldr	r3, [pc, #248]	@ (80076c8 <findtheBall+0x320>)
 80075d0:	ed93 7b00 	vldr	d7, [r3]
 80075d4:	ed9f 1b34 	vldr	d1, [pc, #208]	@ 80076a8 <findtheBall+0x300>
 80075d8:	eeb0 0a47 	vmov.f32	s0, s14
 80075dc:	eef0 0a67 	vmov.f32	s1, s15
 80075e0:	f7ff fc36 	bl	8006e50 <PID_controllerH>
 80075e4:	ed87 0b00 	vstr	d0, [r7]
        servo_write(145);
 80075e8:	2091      	movs	r0, #145	@ 0x91
 80075ea:	f7ff fd47 	bl	800707c <servo_write>
        if(!(lastBallAngle < 20 && lastBallAngle > 0))
 80075ee:	4b36      	ldr	r3, [pc, #216]	@ (80076c8 <findtheBall+0x320>)
 80075f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075f4:	2301      	movs	r3, #1
 80075f6:	461c      	mov	r4, r3
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	4b34      	ldr	r3, [pc, #208]	@ (80076d0 <findtheBall+0x328>)
 80075fe:	f7f9 fa6d 	bl	8000adc <__aeabi_dcmplt>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <findtheBall+0x264>
 8007608:	2300      	movs	r3, #0
 800760a:	461c      	mov	r4, r3
 800760c:	b2e3      	uxtb	r3, r4
 800760e:	f083 0301 	eor.w	r3, r3, #1
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d115      	bne.n	8007644 <findtheBall+0x29c>
 8007618:	4b2b      	ldr	r3, [pc, #172]	@ (80076c8 <findtheBall+0x320>)
 800761a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800761e:	2301      	movs	r3, #1
 8007620:	461c      	mov	r4, r3
 8007622:	f04f 0200 	mov.w	r2, #0
 8007626:	f04f 0300 	mov.w	r3, #0
 800762a:	f7f9 fa75 	bl	8000b18 <__aeabi_dcmpgt>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <findtheBall+0x290>
 8007634:	2300      	movs	r3, #0
 8007636:	461c      	mov	r4, r3
 8007638:	b2e3      	uxtb	r3, r4
 800763a:	f083 0301 	eor.w	r3, r3, #1
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d049      	beq.n	80076d8 <findtheBall+0x330>
        	if(timer - lastTime >= 1000)
 8007644:	6a3a      	ldr	r2, [r7, #32]
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800764e:	f0c0 809a 	bcc.w	8007786 <findtheBall+0x3de>
            	lastTime = timer;
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	61fb      	str	r3, [r7, #28]
            	if(motorCorrWithoutBall)
 8007656:	4b1f      	ldr	r3, [pc, #124]	@ (80076d4 <findtheBall+0x32c>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d012      	beq.n	8007684 <findtheBall+0x2dc>
                	setMotorSpeed(1, 0);
 800765e:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 80076a8 <findtheBall+0x300>
 8007662:	2001      	movs	r0, #1
 8007664:	f7f9 fcfa 	bl	800105c <setMotorSpeed>
                	putar(0, 0, W);
 8007668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800766c:	f7f9 fa74 	bl	8000b58 <__aeabi_d2iz>
 8007670:	4603      	mov	r3, r0
 8007672:	461a      	mov	r2, r3
 8007674:	2100      	movs	r1, #0
 8007676:	2000      	movs	r0, #0
 8007678:	f7f9 ffae 	bl	80015d8 <putar>
                	motorCorrWithoutBall = false;
 800767c:	4b15      	ldr	r3, [pc, #84]	@ (80076d4 <findtheBall+0x32c>)
 800767e:	2200      	movs	r2, #0
 8007680:	701a      	strb	r2, [r3, #0]
        	if(timer - lastTime >= 1000)
 8007682:	e080      	b.n	8007786 <findtheBall+0x3de>
                	setMotorSpeed(1, 0);
 8007684:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 80076a8 <findtheBall+0x300>
 8007688:	2001      	movs	r0, #1
 800768a:	f7f9 fce7 	bl	800105c <setMotorSpeed>
                	putar(0, 0, 0);
 800768e:	2200      	movs	r2, #0
 8007690:	2100      	movs	r1, #0
 8007692:	2000      	movs	r0, #0
 8007694:	f7f9 ffa0 	bl	80015d8 <putar>
                	motorCorrWithoutBall = true;
 8007698:	4b0e      	ldr	r3, [pc, #56]	@ (80076d4 <findtheBall+0x32c>)
 800769a:	2201      	movs	r2, #1
 800769c:	701a      	strb	r2, [r3, #0]
        	if(timer - lastTime >= 1000)
 800769e:	e072      	b.n	8007786 <findtheBall+0x3de>
 80076a0:	54442d18 	.word	0x54442d18
 80076a4:	400921fb 	.word	0x400921fb
	...
 80076b4:	c07f4000 	.word	0xc07f4000
 80076b8:	2000058c 	.word	0x2000058c
 80076bc:	40668000 	.word	0x40668000
 80076c0:	200006a8 	.word	0x200006a8
 80076c4:	200006b0 	.word	0x200006b0
 80076c8:	200006b8 	.word	0x200006b8
 80076cc:	200006c0 	.word	0x200006c0
 80076d0:	40340000 	.word	0x40340000
 80076d4:	200006c1 	.word	0x200006c1
        else if(lastBallAngle != 0 && lastBallAngle > 0 && lastBallAngle < 20)
 80076d8:	4b31      	ldr	r3, [pc, #196]	@ (80077a0 <findtheBall+0x3f8>)
 80076da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076de:	f04f 0200 	mov.w	r2, #0
 80076e2:	f04f 0300 	mov.w	r3, #0
 80076e6:	f7f9 f9ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d122      	bne.n	8007736 <findtheBall+0x38e>
 80076f0:	4b2b      	ldr	r3, [pc, #172]	@ (80077a0 <findtheBall+0x3f8>)
 80076f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	f7f9 fa0b 	bl	8000b18 <__aeabi_dcmpgt>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d016      	beq.n	8007736 <findtheBall+0x38e>
 8007708:	4b25      	ldr	r3, [pc, #148]	@ (80077a0 <findtheBall+0x3f8>)
 800770a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800770e:	f04f 0200 	mov.w	r2, #0
 8007712:	4b24      	ldr	r3, [pc, #144]	@ (80077a4 <findtheBall+0x3fc>)
 8007714:	f7f9 f9e2 	bl	8000adc <__aeabi_dcmplt>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00b      	beq.n	8007736 <findtheBall+0x38e>
        	setMotorSpeed(1, -500);
 800771e:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 8007790 <findtheBall+0x3e8>
 8007722:	2001      	movs	r0, #1
 8007724:	f7f9 fc9a 	bl	800105c <setMotorSpeed>
        	Inverse_Kinematics(0, 1600, 0);
 8007728:	2200      	movs	r2, #0
 800772a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800772e:	2000      	movs	r0, #0
 8007730:	f7f9 fd0a 	bl	8001148 <Inverse_Kinematics>
 8007734:	e027      	b.n	8007786 <findtheBall+0x3de>
        	if(timer - lastTime >= 1000)
 8007736:	6a3a      	ldr	r2, [r7, #32]
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007740:	d321      	bcc.n	8007786 <findtheBall+0x3de>
        		lastTime = timer;
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	61fb      	str	r3, [r7, #28]
        		if(motorState)
 8007746:	4b18      	ldr	r3, [pc, #96]	@ (80077a8 <findtheBall+0x400>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00d      	beq.n	800776a <findtheBall+0x3c2>
                	setMotorSpeed(1, 0);
 800774e:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8007798 <findtheBall+0x3f0>
 8007752:	2001      	movs	r0, #1
 8007754:	f7f9 fc82 	bl	800105c <setMotorSpeed>
                	putar(0, 0, 85);
 8007758:	2255      	movs	r2, #85	@ 0x55
 800775a:	2100      	movs	r1, #0
 800775c:	2000      	movs	r0, #0
 800775e:	f7f9 ff3b 	bl	80015d8 <putar>
                	motorState = false;
 8007762:	4b11      	ldr	r3, [pc, #68]	@ (80077a8 <findtheBall+0x400>)
 8007764:	2200      	movs	r2, #0
 8007766:	701a      	strb	r2, [r3, #0]
}
 8007768:	e00d      	b.n	8007786 <findtheBall+0x3de>
                	setMotorSpeed(1, 0);
 800776a:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 8007798 <findtheBall+0x3f0>
 800776e:	2001      	movs	r0, #1
 8007770:	f7f9 fc74 	bl	800105c <setMotorSpeed>
                	putar(0, 0, 0);
 8007774:	2200      	movs	r2, #0
 8007776:	2100      	movs	r1, #0
 8007778:	2000      	movs	r0, #0
 800777a:	f7f9 ff2d 	bl	80015d8 <putar>
                	motorState = true;
 800777e:	4b0a      	ldr	r3, [pc, #40]	@ (80077a8 <findtheBall+0x400>)
 8007780:	2201      	movs	r2, #1
 8007782:	701a      	strb	r2, [r3, #0]
}
 8007784:	e7ff      	b.n	8007786 <findtheBall+0x3de>
 8007786:	bf00      	nop
 8007788:	3738      	adds	r7, #56	@ 0x38
 800778a:	46bd      	mov	sp, r7
 800778c:	bdb0      	pop	{r4, r5, r7, pc}
 800778e:	bf00      	nop
 8007790:	00000000 	.word	0x00000000
 8007794:	c07f4000 	.word	0xc07f4000
	...
 80077a0:	200006b8 	.word	0x200006b8
 80077a4:	40340000 	.word	0x40340000
 80077a8:	200006c2 	.word	0x200006c2
 80077ac:	00000000 	.word	0x00000000

080077b0 <findSilo>:

void findSilo()
{
 80077b0:	b5b0      	push	{r4, r5, r7, lr}
 80077b2:	b08c      	sub	sp, #48	@ 0x30
 80077b4:	af00      	add	r7, sp, #0
     * camera[4]: silo angle (in degree)
     */

    static double lastSiloAngle = 0, lastxSilo = 0, lastySilo = 0;

    int siloDistance = camera[3] * 10; // convert to mm
 80077b6:	4bc2      	ldr	r3, [pc, #776]	@ (8007ac0 <findSilo+0x310>)
 80077b8:	68da      	ldr	r2, [r3, #12]
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int siloAngle = camera[4];
 80077c4:	4bbe      	ldr	r3, [pc, #760]	@ (8007ac0 <findSilo+0x310>)
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    int xSILO = sin(siloAngle * M_PI / 180) * siloDistance;
 80077ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077cc:	f7f8 feaa 	bl	8000524 <__aeabi_i2d>
 80077d0:	a3b5      	add	r3, pc, #724	@ (adr r3, 8007aa8 <findSilo+0x2f8>)
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	f7f8 ff0f 	bl	80005f8 <__aeabi_dmul>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4610      	mov	r0, r2
 80077e0:	4619      	mov	r1, r3
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	4bb7      	ldr	r3, [pc, #732]	@ (8007ac4 <findSilo+0x314>)
 80077e8:	f7f9 f830 	bl	800084c <__aeabi_ddiv>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	ec43 2b17 	vmov	d7, r2, r3
 80077f4:	eeb0 0a47 	vmov.f32	s0, s14
 80077f8:	eef0 0a67 	vmov.f32	s1, s15
 80077fc:	f009 f820 	bl	8010840 <sin>
 8007800:	ec55 4b10 	vmov	r4, r5, d0
 8007804:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007806:	f7f8 fe8d 	bl	8000524 <__aeabi_i2d>
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	4620      	mov	r0, r4
 8007810:	4629      	mov	r1, r5
 8007812:	f7f8 fef1 	bl	80005f8 <__aeabi_dmul>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	4610      	mov	r0, r2
 800781c:	4619      	mov	r1, r3
 800781e:	f7f9 f99b 	bl	8000b58 <__aeabi_d2iz>
 8007822:	4603      	mov	r3, r0
 8007824:	627b      	str	r3, [r7, #36]	@ 0x24
    int ySILO = cos(siloAngle * M_PI / 180) * siloDistance;
 8007826:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007828:	f7f8 fe7c 	bl	8000524 <__aeabi_i2d>
 800782c:	a39e      	add	r3, pc, #632	@ (adr r3, 8007aa8 <findSilo+0x2f8>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	f7f8 fee1 	bl	80005f8 <__aeabi_dmul>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4610      	mov	r0, r2
 800783c:	4619      	mov	r1, r3
 800783e:	f04f 0200 	mov.w	r2, #0
 8007842:	4ba0      	ldr	r3, [pc, #640]	@ (8007ac4 <findSilo+0x314>)
 8007844:	f7f9 f802 	bl	800084c <__aeabi_ddiv>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	ec43 2b17 	vmov	d7, r2, r3
 8007850:	eeb0 0a47 	vmov.f32	s0, s14
 8007854:	eef0 0a67 	vmov.f32	s1, s15
 8007858:	f008 ff9e 	bl	8010798 <cos>
 800785c:	ec55 4b10 	vmov	r4, r5, d0
 8007860:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007862:	f7f8 fe5f 	bl	8000524 <__aeabi_i2d>
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	4620      	mov	r0, r4
 800786c:	4629      	mov	r1, r5
 800786e:	f7f8 fec3 	bl	80005f8 <__aeabi_dmul>
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	4610      	mov	r0, r2
 8007878:	4619      	mov	r1, r3
 800787a:	f7f9 f96d 	bl	8000b58 <__aeabi_d2iz>
 800787e:	4603      	mov	r3, r0
 8007880:	623b      	str	r3, [r7, #32]
    static bool motorState = false;
    static bool motorCorrWithoutSilo = false;
    static bool motorCorrWithSilo = false;

    uint32_t timer = HAL_GetTick();
 8007882:	f000 fea1 	bl	80085c8 <HAL_GetTick>
 8007886:	61f8      	str	r0, [r7, #28]
    uint32_t lastTime = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	61bb      	str	r3, [r7, #24]

    double Vx = PID_controller((double)xSILO, 0.0, 1);
 800788c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800788e:	f7f8 fe49 	bl	8000524 <__aeabi_i2d>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	2001      	movs	r0, #1
 8007898:	ed9f 1b85 	vldr	d1, [pc, #532]	@ 8007ab0 <findSilo+0x300>
 800789c:	ec43 2b10 	vmov	d0, r2, r3
 80078a0:	f7fe ff06 	bl	80066b0 <PID_controller>
 80078a4:	ed87 0b04 	vstr	d0, [r7, #16]
    double Vy = PID_controller((double)ySILO, 0.0, 1);
 80078a8:	6a38      	ldr	r0, [r7, #32]
 80078aa:	f7f8 fe3b 	bl	8000524 <__aeabi_i2d>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	2001      	movs	r0, #1
 80078b4:	ed9f 1b7e 	vldr	d1, [pc, #504]	@ 8007ab0 <findSilo+0x300>
 80078b8:	ec43 2b10 	vmov	d0, r2, r3
 80078bc:	f7fe fef8 	bl	80066b0 <PID_controller>
 80078c0:	ed87 0b02 	vstr	d0, [r7, #8]
    double W = PID_controllerH((double)siloAngle, 0.0);
 80078c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078c6:	f7f8 fe2d 	bl	8000524 <__aeabi_i2d>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	ed9f 1b78 	vldr	d1, [pc, #480]	@ 8007ab0 <findSilo+0x300>
 80078d2:	ec43 2b10 	vmov	d0, r2, r3
 80078d6:	f7ff fabb 	bl	8006e50 <PID_controllerH>
 80078da:	ed87 0b00 	vstr	d0, [r7]
    servo_write(160);
 80078de:	20a0      	movs	r0, #160	@ 0xa0
 80078e0:	f7ff fbcc 	bl	800707c <servo_write>

    if (siloAngle != 0 && siloDistance != 0)
 80078e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 808e 	beq.w	8007a08 <findSilo+0x258>
 80078ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 808a 	beq.w	8007a08 <findSilo+0x258>
    {
    	lastxSilo = xSILO;
 80078f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078f6:	f7f8 fe15 	bl	8000524 <__aeabi_i2d>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4972      	ldr	r1, [pc, #456]	@ (8007ac8 <findSilo+0x318>)
 8007900:	e9c1 2300 	strd	r2, r3, [r1]
    	lastySilo = ySILO;
 8007904:	6a38      	ldr	r0, [r7, #32]
 8007906:	f7f8 fe0d 	bl	8000524 <__aeabi_i2d>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	496f      	ldr	r1, [pc, #444]	@ (8007acc <findSilo+0x31c>)
 8007910:	e9c1 2300 	strd	r2, r3, [r1]
    	lastSiloAngle = siloAngle;
 8007914:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007916:	f7f8 fe05 	bl	8000524 <__aeabi_i2d>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	496c      	ldr	r1, [pc, #432]	@ (8007ad0 <findSilo+0x320>)
 8007920:	e9c1 2300 	strd	r2, r3, [r1]

    	W = PID_controllerH(siloAngle, 0.0);
 8007924:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007926:	f7f8 fdfd 	bl	8000524 <__aeabi_i2d>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	ed9f 1b60 	vldr	d1, [pc, #384]	@ 8007ab0 <findSilo+0x300>
 8007932:	ec43 2b10 	vmov	d0, r2, r3
 8007936:	f7ff fa8b 	bl	8006e50 <PID_controllerH>
 800793a:	ed87 0b00 	vstr	d0, [r7]
        if(abs(siloAngle) < 7 && abs(xSILO) < 10)
 800793e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007940:	f113 0f06 	cmn.w	r3, #6
 8007944:	db22      	blt.n	800798c <findSilo+0x1dc>
 8007946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007948:	2b06      	cmp	r3, #6
 800794a:	dc1f      	bgt.n	800798c <findSilo+0x1dc>
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	f113 0f09 	cmn.w	r3, #9
 8007952:	db1b      	blt.n	800798c <findSilo+0x1dc>
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	2b09      	cmp	r3, #9
 8007958:	dc18      	bgt.n	800798c <findSilo+0x1dc>
        {
        	Inverse_Kinematics(0, 1600, 0);
 800795a:	2200      	movs	r2, #0
 800795c:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8007960:	2000      	movs	r0, #0
 8007962:	f7f9 fbf1 	bl	8001148 <Inverse_Kinematics>
        	if(siloDistance < 50)
 8007966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007968:	2b31      	cmp	r3, #49	@ 0x31
 800796a:	dc4c      	bgt.n	8007a06 <findSilo+0x256>
        	{
        		Inverse_Kinematics(0, 0, 0);
 800796c:	2200      	movs	r2, #0
 800796e:	2100      	movs	r1, #0
 8007970:	2000      	movs	r0, #0
 8007972:	f7f9 fbe9 	bl	8001148 <Inverse_Kinematics>
            	setMotorSpeed(2, -1000);
 8007976:	ed9f 0b50 	vldr	d0, [pc, #320]	@ 8007ab8 <findSilo+0x308>
 800797a:	2002      	movs	r0, #2
 800797c:	f7f9 fb6e 	bl	800105c <setMotorSpeed>
            	setMotorSpeed(3, -1000);
 8007980:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8007ab8 <findSilo+0x308>
 8007984:	2003      	movs	r0, #3
 8007986:	f7f9 fb69 	bl	800105c <setMotorSpeed>
        	if(siloDistance < 50)
 800798a:	e03c      	b.n	8007a06 <findSilo+0x256>
        	}
        }
        else
        {
        	if(timer - lastTime >= 1000)
 800798c:	69fa      	ldr	r2, [r7, #28]
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007996:	f0c0 81c0 	bcc.w	8007d1a <findSilo+0x56a>
        	{
            	lastTime = timer;
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	61bb      	str	r3, [r7, #24]
            	if(motorCorrWithSilo)
 800799e:	4b4d      	ldr	r3, [pc, #308]	@ (8007ad4 <findSilo+0x324>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d01c      	beq.n	80079e0 <findSilo+0x230>
            	{
            		Inverse_Kinematics(Vx, 0, W);
 80079a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80079aa:	f7f9 f8d5 	bl	8000b58 <__aeabi_d2iz>
 80079ae:	4604      	mov	r4, r0
 80079b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079b4:	f7f9 f8d0 	bl	8000b58 <__aeabi_d2iz>
 80079b8:	4603      	mov	r3, r0
 80079ba:	461a      	mov	r2, r3
 80079bc:	2100      	movs	r1, #0
 80079be:	4620      	mov	r0, r4
 80079c0:	f7f9 fbc2 	bl	8001148 <Inverse_Kinematics>
                	setMotorSpeed(2, 0);
 80079c4:	ed9f 0b3a 	vldr	d0, [pc, #232]	@ 8007ab0 <findSilo+0x300>
 80079c8:	2002      	movs	r0, #2
 80079ca:	f7f9 fb47 	bl	800105c <setMotorSpeed>
                	setMotorSpeed(3, 0);
 80079ce:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 8007ab0 <findSilo+0x300>
 80079d2:	2003      	movs	r0, #3
 80079d4:	f7f9 fb42 	bl	800105c <setMotorSpeed>
                	motorCorrWithSilo = false;
 80079d8:	4b3e      	ldr	r3, [pc, #248]	@ (8007ad4 <findSilo+0x324>)
 80079da:	2200      	movs	r2, #0
 80079dc:	701a      	strb	r2, [r3, #0]
        if(abs(siloAngle) < 7 && abs(xSILO) < 10)
 80079de:	e19c      	b.n	8007d1a <findSilo+0x56a>
            	}
            	else
            	{
                	putar(0, 0, 0);
 80079e0:	2200      	movs	r2, #0
 80079e2:	2100      	movs	r1, #0
 80079e4:	2000      	movs	r0, #0
 80079e6:	f7f9 fdf7 	bl	80015d8 <putar>
                	setMotorSpeed(2, 0);
 80079ea:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 8007ab0 <findSilo+0x300>
 80079ee:	2002      	movs	r0, #2
 80079f0:	f7f9 fb34 	bl	800105c <setMotorSpeed>
                	setMotorSpeed(3, 0);
 80079f4:	ed9f 0b2e 	vldr	d0, [pc, #184]	@ 8007ab0 <findSilo+0x300>
 80079f8:	2003      	movs	r0, #3
 80079fa:	f7f9 fb2f 	bl	800105c <setMotorSpeed>
                	motorCorrWithSilo = true;
 80079fe:	4b35      	ldr	r3, [pc, #212]	@ (8007ad4 <findSilo+0x324>)
 8007a00:	2201      	movs	r2, #1
 8007a02:	701a      	strb	r2, [r3, #0]
        if(abs(siloAngle) < 7 && abs(xSILO) < 10)
 8007a04:	e189      	b.n	8007d1a <findSilo+0x56a>
 8007a06:	e188      	b.n	8007d1a <findSilo+0x56a>
        	}
        }
    }
    else
    {
        Vx = PID_controller(lastxSilo < 0 ? lastxSilo++ : lastxSilo--, 0.0, 1);
 8007a08:	4b2f      	ldr	r3, [pc, #188]	@ (8007ac8 <findSilo+0x318>)
 8007a0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a0e:	f04f 0200 	mov.w	r2, #0
 8007a12:	f04f 0300 	mov.w	r3, #0
 8007a16:	f7f9 f861 	bl	8000adc <__aeabi_dcmplt>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00f      	beq.n	8007a40 <findSilo+0x290>
 8007a20:	4b29      	ldr	r3, [pc, #164]	@ (8007ac8 <findSilo+0x318>)
 8007a22:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8007ad8 <findSilo+0x328>)
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	4629      	mov	r1, r5
 8007a30:	f7f8 fc2c 	bl	800028c <__adddf3>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	4923      	ldr	r1, [pc, #140]	@ (8007ac8 <findSilo+0x318>)
 8007a3a:	e9c1 2300 	strd	r2, r3, [r1]
 8007a3e:	e00e      	b.n	8007a5e <findSilo+0x2ae>
 8007a40:	4b21      	ldr	r3, [pc, #132]	@ (8007ac8 <findSilo+0x318>)
 8007a42:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007a46:	f04f 0200 	mov.w	r2, #0
 8007a4a:	4b23      	ldr	r3, [pc, #140]	@ (8007ad8 <findSilo+0x328>)
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	4629      	mov	r1, r5
 8007a50:	f7f8 fc1a 	bl	8000288 <__aeabi_dsub>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	491b      	ldr	r1, [pc, #108]	@ (8007ac8 <findSilo+0x318>)
 8007a5a:	e9c1 2300 	strd	r2, r3, [r1]
 8007a5e:	2001      	movs	r0, #1
 8007a60:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8007ab0 <findSilo+0x300>
 8007a64:	ec45 4b10 	vmov	d0, r4, r5
 8007a68:	f7fe fe22 	bl	80066b0 <PID_controller>
 8007a6c:	ed87 0b04 	vstr	d0, [r7, #16]
        Vy = PID_controller(lastySilo < 0 ? lastySilo++ : lastySilo--, 0.0, 1);
 8007a70:	4b16      	ldr	r3, [pc, #88]	@ (8007acc <findSilo+0x31c>)
 8007a72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a76:	f04f 0200 	mov.w	r2, #0
 8007a7a:	f04f 0300 	mov.w	r3, #0
 8007a7e:	f7f9 f82d 	bl	8000adc <__aeabi_dcmplt>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d029      	beq.n	8007adc <findSilo+0x32c>
 8007a88:	4b10      	ldr	r3, [pc, #64]	@ (8007acc <findSilo+0x31c>)
 8007a8a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007a8e:	f04f 0200 	mov.w	r2, #0
 8007a92:	4b11      	ldr	r3, [pc, #68]	@ (8007ad8 <findSilo+0x328>)
 8007a94:	4620      	mov	r0, r4
 8007a96:	4629      	mov	r1, r5
 8007a98:	f7f8 fbf8 	bl	800028c <__adddf3>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	490a      	ldr	r1, [pc, #40]	@ (8007acc <findSilo+0x31c>)
 8007aa2:	e9c1 2300 	strd	r2, r3, [r1]
 8007aa6:	e028      	b.n	8007afa <findSilo+0x34a>
 8007aa8:	54442d18 	.word	0x54442d18
 8007aac:	400921fb 	.word	0x400921fb
	...
 8007abc:	c08f4000 	.word	0xc08f4000
 8007ac0:	2000058c 	.word	0x2000058c
 8007ac4:	40668000 	.word	0x40668000
 8007ac8:	200006c8 	.word	0x200006c8
 8007acc:	200006d0 	.word	0x200006d0
 8007ad0:	200006d8 	.word	0x200006d8
 8007ad4:	200006e0 	.word	0x200006e0
 8007ad8:	3ff00000 	.word	0x3ff00000
 8007adc:	4b96      	ldr	r3, [pc, #600]	@ (8007d38 <findSilo+0x588>)
 8007ade:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007ae2:	f04f 0200 	mov.w	r2, #0
 8007ae6:	4b95      	ldr	r3, [pc, #596]	@ (8007d3c <findSilo+0x58c>)
 8007ae8:	4620      	mov	r0, r4
 8007aea:	4629      	mov	r1, r5
 8007aec:	f7f8 fbcc 	bl	8000288 <__aeabi_dsub>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4990      	ldr	r1, [pc, #576]	@ (8007d38 <findSilo+0x588>)
 8007af6:	e9c1 2300 	strd	r2, r3, [r1]
 8007afa:	2001      	movs	r0, #1
 8007afc:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 8007d28 <findSilo+0x578>
 8007b00:	ec45 4b10 	vmov	d0, r4, r5
 8007b04:	f7fe fdd4 	bl	80066b0 <PID_controller>
 8007b08:	ed87 0b02 	vstr	d0, [r7, #8]
        W = PID_controllerH(lastSiloAngle < 0 ? lastSiloAngle++ : lastSiloAngle--, 0.0);
 8007b0c:	4b8c      	ldr	r3, [pc, #560]	@ (8007d40 <findSilo+0x590>)
 8007b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b12:	f04f 0200 	mov.w	r2, #0
 8007b16:	f04f 0300 	mov.w	r3, #0
 8007b1a:	f7f8 ffdf 	bl	8000adc <__aeabi_dcmplt>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00f      	beq.n	8007b44 <findSilo+0x394>
 8007b24:	4b86      	ldr	r3, [pc, #536]	@ (8007d40 <findSilo+0x590>)
 8007b26:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007b2a:	f04f 0200 	mov.w	r2, #0
 8007b2e:	4b83      	ldr	r3, [pc, #524]	@ (8007d3c <findSilo+0x58c>)
 8007b30:	4620      	mov	r0, r4
 8007b32:	4629      	mov	r1, r5
 8007b34:	f7f8 fbaa 	bl	800028c <__adddf3>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	4980      	ldr	r1, [pc, #512]	@ (8007d40 <findSilo+0x590>)
 8007b3e:	e9c1 2300 	strd	r2, r3, [r1]
 8007b42:	e00e      	b.n	8007b62 <findSilo+0x3b2>
 8007b44:	4b7e      	ldr	r3, [pc, #504]	@ (8007d40 <findSilo+0x590>)
 8007b46:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	4b7b      	ldr	r3, [pc, #492]	@ (8007d3c <findSilo+0x58c>)
 8007b50:	4620      	mov	r0, r4
 8007b52:	4629      	mov	r1, r5
 8007b54:	f7f8 fb98 	bl	8000288 <__aeabi_dsub>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4978      	ldr	r1, [pc, #480]	@ (8007d40 <findSilo+0x590>)
 8007b5e:	e9c1 2300 	strd	r2, r3, [r1]
 8007b62:	ed9f 1b71 	vldr	d1, [pc, #452]	@ 8007d28 <findSilo+0x578>
 8007b66:	ec45 4b10 	vmov	d0, r4, r5
 8007b6a:	f7ff f971 	bl	8006e50 <PID_controllerH>
 8007b6e:	ed87 0b00 	vstr	d0, [r7]

        if(abs(lastSiloAngle) >= 7)
 8007b72:	4b73      	ldr	r3, [pc, #460]	@ (8007d40 <findSilo+0x590>)
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	f7f8 ffec 	bl	8000b58 <__aeabi_d2iz>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bfb8      	it	lt
 8007b86:	425b      	neglt	r3, r3
 8007b88:	2b06      	cmp	r3, #6
 8007b8a:	dd3c      	ble.n	8007c06 <findSilo+0x456>
        {
        	if(timer - lastTime >= 1000)
 8007b8c:	69fa      	ldr	r2, [r7, #28]
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b96:	f0c0 80c1 	bcc.w	8007d1c <findSilo+0x56c>
        	{
            	lastTime = timer;
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	61bb      	str	r3, [r7, #24]
            	if(motorCorrWithoutSilo)
 8007b9e:	4b69      	ldr	r3, [pc, #420]	@ (8007d44 <findSilo+0x594>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d01c      	beq.n	8007be0 <findSilo+0x430>
            	{
                	setMotorSpeed(2, 0);
 8007ba6:	ed9f 0b60 	vldr	d0, [pc, #384]	@ 8007d28 <findSilo+0x578>
 8007baa:	2002      	movs	r0, #2
 8007bac:	f7f9 fa56 	bl	800105c <setMotorSpeed>
                	setMotorSpeed(3, 0);
 8007bb0:	ed9f 0b5d 	vldr	d0, [pc, #372]	@ 8007d28 <findSilo+0x578>
 8007bb4:	2003      	movs	r0, #3
 8007bb6:	f7f9 fa51 	bl	800105c <setMotorSpeed>
            		Inverse_Kinematics(Vx, 0, W);
 8007bba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007bbe:	f7f8 ffcb 	bl	8000b58 <__aeabi_d2iz>
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bc8:	f7f8 ffc6 	bl	8000b58 <__aeabi_d2iz>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	461a      	mov	r2, r3
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f7f9 fab8 	bl	8001148 <Inverse_Kinematics>
                	motorCorrWithoutSilo = false;
 8007bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8007d44 <findSilo+0x594>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	701a      	strb	r2, [r3, #0]
                	motorState = true;
        		}
        	}
        }
    }
}
 8007bde:	e09d      	b.n	8007d1c <findSilo+0x56c>
                	setMotorSpeed(2, 0);
 8007be0:	ed9f 0b51 	vldr	d0, [pc, #324]	@ 8007d28 <findSilo+0x578>
 8007be4:	2002      	movs	r0, #2
 8007be6:	f7f9 fa39 	bl	800105c <setMotorSpeed>
                	setMotorSpeed(3, 0);
 8007bea:	ed9f 0b4f 	vldr	d0, [pc, #316]	@ 8007d28 <findSilo+0x578>
 8007bee:	2003      	movs	r0, #3
 8007bf0:	f7f9 fa34 	bl	800105c <setMotorSpeed>
                	putar(0, 0, 0);
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	f7f9 fced 	bl	80015d8 <putar>
                	motorCorrWithoutSilo = true;
 8007bfe:	4b51      	ldr	r3, [pc, #324]	@ (8007d44 <findSilo+0x594>)
 8007c00:	2201      	movs	r2, #1
 8007c02:	701a      	strb	r2, [r3, #0]
}
 8007c04:	e08a      	b.n	8007d1c <findSilo+0x56c>
        else if(lastSiloAngle != 0 && abs(lastSiloAngle) < 7 && abs(lastxSilo) < 10)
 8007c06:	4b4e      	ldr	r3, [pc, #312]	@ (8007d40 <findSilo+0x590>)
 8007c08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c0c:	f04f 0200 	mov.w	r2, #0
 8007c10:	f04f 0300 	mov.w	r3, #0
 8007c14:	f7f8 ff58 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d14b      	bne.n	8007cb6 <findSilo+0x506>
 8007c1e:	4b48      	ldr	r3, [pc, #288]	@ (8007d40 <findSilo+0x590>)
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	4610      	mov	r0, r2
 8007c26:	4619      	mov	r1, r3
 8007c28:	f7f8 ff96 	bl	8000b58 <__aeabi_d2iz>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f113 0f06 	cmn.w	r3, #6
 8007c32:	db40      	blt.n	8007cb6 <findSilo+0x506>
 8007c34:	4b42      	ldr	r3, [pc, #264]	@ (8007d40 <findSilo+0x590>)
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	f7f8 ff8b 	bl	8000b58 <__aeabi_d2iz>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b06      	cmp	r3, #6
 8007c46:	dc36      	bgt.n	8007cb6 <findSilo+0x506>
 8007c48:	4b3f      	ldr	r3, [pc, #252]	@ (8007d48 <findSilo+0x598>)
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	4610      	mov	r0, r2
 8007c50:	4619      	mov	r1, r3
 8007c52:	f7f8 ff81 	bl	8000b58 <__aeabi_d2iz>
 8007c56:	4603      	mov	r3, r0
 8007c58:	f113 0f09 	cmn.w	r3, #9
 8007c5c:	db2b      	blt.n	8007cb6 <findSilo+0x506>
 8007c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8007d48 <findSilo+0x598>)
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	4610      	mov	r0, r2
 8007c66:	4619      	mov	r1, r3
 8007c68:	f7f8 ff76 	bl	8000b58 <__aeabi_d2iz>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b09      	cmp	r3, #9
 8007c70:	dc21      	bgt.n	8007cb6 <findSilo+0x506>
        	start(0, 1600, 0, 1);
 8007c72:	2301      	movs	r3, #1
 8007c74:	2200      	movs	r2, #0
 8007c76:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	f7f9 fef0 	bl	8001a60 <start>
        	if(lastySilo < 50)
 8007c80:	4b2d      	ldr	r3, [pc, #180]	@ (8007d38 <findSilo+0x588>)
 8007c82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c86:	f04f 0200 	mov.w	r2, #0
 8007c8a:	4b30      	ldr	r3, [pc, #192]	@ (8007d4c <findSilo+0x59c>)
 8007c8c:	f7f8 ff26 	bl	8000adc <__aeabi_dcmplt>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d042      	beq.n	8007d1c <findSilo+0x56c>
        		Inverse_Kinematics(0, 0, 0);
 8007c96:	2200      	movs	r2, #0
 8007c98:	2100      	movs	r1, #0
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	f7f9 fa54 	bl	8001148 <Inverse_Kinematics>
            	setMotorSpeed(2, -1000);
 8007ca0:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8007d30 <findSilo+0x580>
 8007ca4:	2002      	movs	r0, #2
 8007ca6:	f7f9 f9d9 	bl	800105c <setMotorSpeed>
            	setMotorSpeed(3, -1000);
 8007caa:	ed9f 0b21 	vldr	d0, [pc, #132]	@ 8007d30 <findSilo+0x580>
 8007cae:	2003      	movs	r0, #3
 8007cb0:	f7f9 f9d4 	bl	800105c <setMotorSpeed>
        	if(lastySilo < 50)
 8007cb4:	e032      	b.n	8007d1c <findSilo+0x56c>
        	if(timer - lastTime >= 1000)
 8007cb6:	69fa      	ldr	r2, [r7, #28]
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cc0:	d32c      	bcc.n	8007d1c <findSilo+0x56c>
        		lastTime = timer;
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	61bb      	str	r3, [r7, #24]
        		if(motorState)
 8007cc6:	4b22      	ldr	r3, [pc, #136]	@ (8007d50 <findSilo+0x5a0>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d012      	beq.n	8007cf4 <findSilo+0x544>
                	setMotorSpeed(2, 0);
 8007cce:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8007d28 <findSilo+0x578>
 8007cd2:	2002      	movs	r0, #2
 8007cd4:	f7f9 f9c2 	bl	800105c <setMotorSpeed>
                	setMotorSpeed(3, 0);
 8007cd8:	ed9f 0b13 	vldr	d0, [pc, #76]	@ 8007d28 <findSilo+0x578>
 8007cdc:	2003      	movs	r0, #3
 8007cde:	f7f9 f9bd 	bl	800105c <setMotorSpeed>
                	putar(0, 0, 85);
 8007ce2:	2255      	movs	r2, #85	@ 0x55
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	f7f9 fc76 	bl	80015d8 <putar>
                	motorState = false;
 8007cec:	4b18      	ldr	r3, [pc, #96]	@ (8007d50 <findSilo+0x5a0>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	701a      	strb	r2, [r3, #0]
}
 8007cf2:	e013      	b.n	8007d1c <findSilo+0x56c>
                	setMotorSpeed(2, 0);
 8007cf4:	ed9f 0b0c 	vldr	d0, [pc, #48]	@ 8007d28 <findSilo+0x578>
 8007cf8:	2002      	movs	r0, #2
 8007cfa:	f7f9 f9af 	bl	800105c <setMotorSpeed>
                	setMotorSpeed(3, 0);
 8007cfe:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8007d28 <findSilo+0x578>
 8007d02:	2003      	movs	r0, #3
 8007d04:	f7f9 f9aa 	bl	800105c <setMotorSpeed>
                	putar(0, 0, 0);
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	f7f9 fc63 	bl	80015d8 <putar>
                	motorState = true;
 8007d12:	4b0f      	ldr	r3, [pc, #60]	@ (8007d50 <findSilo+0x5a0>)
 8007d14:	2201      	movs	r2, #1
 8007d16:	701a      	strb	r2, [r3, #0]
}
 8007d18:	e000      	b.n	8007d1c <findSilo+0x56c>
        if(abs(siloAngle) < 7 && abs(xSILO) < 10)
 8007d1a:	bf00      	nop
}
 8007d1c:	bf00      	nop
 8007d1e:	3730      	adds	r7, #48	@ 0x30
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bdb0      	pop	{r4, r5, r7, pc}
 8007d24:	f3af 8000 	nop.w
	...
 8007d34:	c08f4000 	.word	0xc08f4000
 8007d38:	200006d0 	.word	0x200006d0
 8007d3c:	3ff00000 	.word	0x3ff00000
 8007d40:	200006d8 	.word	0x200006d8
 8007d44:	200006e1 	.word	0x200006e1
 8007d48:	200006c8 	.word	0x200006c8
 8007d4c:	40490000 	.word	0x40490000
 8007d50:	200006e2 	.word	0x200006e2

08007d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	607b      	str	r3, [r7, #4]
 8007d5e:	4b10      	ldr	r3, [pc, #64]	@ (8007da0 <HAL_MspInit+0x4c>)
 8007d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d62:	4a0f      	ldr	r2, [pc, #60]	@ (8007da0 <HAL_MspInit+0x4c>)
 8007d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8007d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007da0 <HAL_MspInit+0x4c>)
 8007d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d72:	607b      	str	r3, [r7, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d76:	2300      	movs	r3, #0
 8007d78:	603b      	str	r3, [r7, #0]
 8007d7a:	4b09      	ldr	r3, [pc, #36]	@ (8007da0 <HAL_MspInit+0x4c>)
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d7e:	4a08      	ldr	r2, [pc, #32]	@ (8007da0 <HAL_MspInit+0x4c>)
 8007d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d86:	4b06      	ldr	r3, [pc, #24]	@ (8007da0 <HAL_MspInit+0x4c>)
 8007d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007d92:	2007      	movs	r0, #7
 8007d94:	f000 fd18 	bl	80087c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	40023800 	.word	0x40023800

08007da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	@ 0x28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dac:	f107 0314 	add.w	r3, r7, #20
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	605a      	str	r2, [r3, #4]
 8007db6:	609a      	str	r2, [r3, #8]
 8007db8:	60da      	str	r2, [r3, #12]
 8007dba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a19      	ldr	r2, [pc, #100]	@ (8007e28 <HAL_I2C_MspInit+0x84>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d12c      	bne.n	8007e20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	613b      	str	r3, [r7, #16]
 8007dca:	4b18      	ldr	r3, [pc, #96]	@ (8007e2c <HAL_I2C_MspInit+0x88>)
 8007dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dce:	4a17      	ldr	r2, [pc, #92]	@ (8007e2c <HAL_I2C_MspInit+0x88>)
 8007dd0:	f043 0302 	orr.w	r3, r3, #2
 8007dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8007dd6:	4b15      	ldr	r3, [pc, #84]	@ (8007e2c <HAL_I2C_MspInit+0x88>)
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	613b      	str	r3, [r7, #16]
 8007de0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007de2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007de8:	2312      	movs	r3, #18
 8007dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dec:	2300      	movs	r3, #0
 8007dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007df0:	2303      	movs	r3, #3
 8007df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007df4:	2304      	movs	r3, #4
 8007df6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007df8:	f107 0314 	add.w	r3, r7, #20
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	480c      	ldr	r0, [pc, #48]	@ (8007e30 <HAL_I2C_MspInit+0x8c>)
 8007e00:	f000 fdb6 	bl	8008970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007e04:	2300      	movs	r3, #0
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	4b08      	ldr	r3, [pc, #32]	@ (8007e2c <HAL_I2C_MspInit+0x88>)
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e0c:	4a07      	ldr	r2, [pc, #28]	@ (8007e2c <HAL_I2C_MspInit+0x88>)
 8007e0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007e12:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e14:	4b05      	ldr	r3, [pc, #20]	@ (8007e2c <HAL_I2C_MspInit+0x88>)
 8007e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007e20:	bf00      	nop
 8007e22:	3728      	adds	r7, #40	@ 0x28
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	40005800 	.word	0x40005800
 8007e2c:	40023800 	.word	0x40023800
 8007e30:	40020400 	.word	0x40020400

08007e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a2a      	ldr	r2, [pc, #168]	@ (8007eec <HAL_TIM_Base_MspInit+0xb8>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d116      	bne.n	8007e74 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007e46:	2300      	movs	r3, #0
 8007e48:	617b      	str	r3, [r7, #20]
 8007e4a:	4b29      	ldr	r3, [pc, #164]	@ (8007ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8007e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e4e:	4a28      	ldr	r2, [pc, #160]	@ (8007ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8007e50:	f043 0301 	orr.w	r3, r3, #1
 8007e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8007e56:	4b26      	ldr	r3, [pc, #152]	@ (8007ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8007e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	617b      	str	r3, [r7, #20]
 8007e60:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8007e62:	2200      	movs	r2, #0
 8007e64:	2100      	movs	r1, #0
 8007e66:	201b      	movs	r0, #27
 8007e68:	f000 fcb9 	bl	80087de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8007e6c:	201b      	movs	r0, #27
 8007e6e:	f000 fcd2 	bl	8008816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007e72:	e036      	b.n	8007ee2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e7c:	d116      	bne.n	8007eac <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e7e:	2300      	movs	r3, #0
 8007e80:	613b      	str	r3, [r7, #16]
 8007e82:	4b1b      	ldr	r3, [pc, #108]	@ (8007ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8007e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e86:	4a1a      	ldr	r2, [pc, #104]	@ (8007ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8007e88:	f043 0301 	orr.w	r3, r3, #1
 8007e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e8e:	4b18      	ldr	r3, [pc, #96]	@ (8007ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8007e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	613b      	str	r3, [r7, #16]
 8007e98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	201c      	movs	r0, #28
 8007ea0:	f000 fc9d 	bl	80087de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007ea4:	201c      	movs	r0, #28
 8007ea6:	f000 fcb6 	bl	8008816 <HAL_NVIC_EnableIRQ>
}
 8007eaa:	e01a      	b.n	8007ee2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a10      	ldr	r2, [pc, #64]	@ (8007ef4 <HAL_TIM_Base_MspInit+0xc0>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d115      	bne.n	8007ee2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8007ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8007ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8007ec0:	f043 0302 	orr.w	r3, r3, #2
 8007ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8007ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef0 <HAL_TIM_Base_MspInit+0xbc>)
 8007ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	202e      	movs	r0, #46	@ 0x2e
 8007ed8:	f000 fc81 	bl	80087de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8007edc:	202e      	movs	r0, #46	@ 0x2e
 8007ede:	f000 fc9a 	bl	8008816 <HAL_NVIC_EnableIRQ>
}
 8007ee2:	bf00      	nop
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	40010000 	.word	0x40010000
 8007ef0:	40023800 	.word	0x40023800
 8007ef4:	40010400 	.word	0x40010400

08007ef8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	@ 0x28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f00:	f107 0314 	add.w	r3, r7, #20
 8007f04:	2200      	movs	r2, #0
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	605a      	str	r2, [r3, #4]
 8007f0a:	609a      	str	r2, [r3, #8]
 8007f0c:	60da      	str	r2, [r3, #12]
 8007f0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a37      	ldr	r2, [pc, #220]	@ (8007ff4 <HAL_TIM_MspPostInit+0xfc>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d11f      	bne.n	8007f5a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	613b      	str	r3, [r7, #16]
 8007f1e:	4b36      	ldr	r3, [pc, #216]	@ (8007ff8 <HAL_TIM_MspPostInit+0x100>)
 8007f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f22:	4a35      	ldr	r2, [pc, #212]	@ (8007ff8 <HAL_TIM_MspPostInit+0x100>)
 8007f24:	f043 0310 	orr.w	r3, r3, #16
 8007f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f2a:	4b33      	ldr	r3, [pc, #204]	@ (8007ff8 <HAL_TIM_MspPostInit+0x100>)
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f2e:	f003 0310 	and.w	r3, r3, #16
 8007f32:	613b      	str	r3, [r7, #16]
 8007f34:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8007f36:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8007f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f3c:	2312      	movs	r3, #18
 8007f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007f40:	2302      	movs	r3, #2
 8007f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f44:	2303      	movs	r3, #3
 8007f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007f4c:	f107 0314 	add.w	r3, r7, #20
 8007f50:	4619      	mov	r1, r3
 8007f52:	482a      	ldr	r0, [pc, #168]	@ (8007ffc <HAL_TIM_MspPostInit+0x104>)
 8007f54:	f000 fd0c 	bl	8008970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8007f58:	e047      	b.n	8007fea <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f62:	d11e      	bne.n	8007fa2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]
 8007f68:	4b23      	ldr	r3, [pc, #140]	@ (8007ff8 <HAL_TIM_MspPostInit+0x100>)
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f6c:	4a22      	ldr	r2, [pc, #136]	@ (8007ff8 <HAL_TIM_MspPostInit+0x100>)
 8007f6e:	f043 0301 	orr.w	r3, r3, #1
 8007f72:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f74:	4b20      	ldr	r3, [pc, #128]	@ (8007ff8 <HAL_TIM_MspPostInit+0x100>)
 8007f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007f80:	230c      	movs	r3, #12
 8007f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f84:	2312      	movs	r3, #18
 8007f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007f88:	2302      	movs	r3, #2
 8007f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007f90:	2301      	movs	r3, #1
 8007f92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f94:	f107 0314 	add.w	r3, r7, #20
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4819      	ldr	r0, [pc, #100]	@ (8008000 <HAL_TIM_MspPostInit+0x108>)
 8007f9c:	f000 fce8 	bl	8008970 <HAL_GPIO_Init>
}
 8007fa0:	e023      	b.n	8007fea <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a17      	ldr	r2, [pc, #92]	@ (8008004 <HAL_TIM_MspPostInit+0x10c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d11e      	bne.n	8007fea <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fac:	2300      	movs	r3, #0
 8007fae:	60bb      	str	r3, [r7, #8]
 8007fb0:	4b11      	ldr	r3, [pc, #68]	@ (8007ff8 <HAL_TIM_MspPostInit+0x100>)
 8007fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb4:	4a10      	ldr	r2, [pc, #64]	@ (8007ff8 <HAL_TIM_MspPostInit+0x100>)
 8007fb6:	f043 0304 	orr.w	r3, r3, #4
 8007fba:	6313      	str	r3, [r2, #48]	@ 0x30
 8007fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff8 <HAL_TIM_MspPostInit+0x100>)
 8007fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	60bb      	str	r3, [r7, #8]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8007fc8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8007fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007fce:	2312      	movs	r3, #18
 8007fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fde:	f107 0314 	add.w	r3, r7, #20
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4808      	ldr	r0, [pc, #32]	@ (8008008 <HAL_TIM_MspPostInit+0x110>)
 8007fe6:	f000 fcc3 	bl	8008970 <HAL_GPIO_Init>
}
 8007fea:	bf00      	nop
 8007fec:	3728      	adds	r7, #40	@ 0x28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	40010000 	.word	0x40010000
 8007ff8:	40023800 	.word	0x40023800
 8007ffc:	40021000 	.word	0x40021000
 8008000:	40020000 	.word	0x40020000
 8008004:	40010400 	.word	0x40010400
 8008008:	40020800 	.word	0x40020800

0800800c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b08e      	sub	sp, #56	@ 0x38
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	605a      	str	r2, [r3, #4]
 800801e:	609a      	str	r2, [r3, #8]
 8008020:	60da      	str	r2, [r3, #12]
 8008022:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a57      	ldr	r2, [pc, #348]	@ (8008188 <HAL_UART_MspInit+0x17c>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d134      	bne.n	8008098 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800802e:	2300      	movs	r3, #0
 8008030:	623b      	str	r3, [r7, #32]
 8008032:	4b56      	ldr	r3, [pc, #344]	@ (800818c <HAL_UART_MspInit+0x180>)
 8008034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008036:	4a55      	ldr	r2, [pc, #340]	@ (800818c <HAL_UART_MspInit+0x180>)
 8008038:	f043 0310 	orr.w	r3, r3, #16
 800803c:	6453      	str	r3, [r2, #68]	@ 0x44
 800803e:	4b53      	ldr	r3, [pc, #332]	@ (800818c <HAL_UART_MspInit+0x180>)
 8008040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008042:	f003 0310 	and.w	r3, r3, #16
 8008046:	623b      	str	r3, [r7, #32]
 8008048:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800804a:	2300      	movs	r3, #0
 800804c:	61fb      	str	r3, [r7, #28]
 800804e:	4b4f      	ldr	r3, [pc, #316]	@ (800818c <HAL_UART_MspInit+0x180>)
 8008050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008052:	4a4e      	ldr	r2, [pc, #312]	@ (800818c <HAL_UART_MspInit+0x180>)
 8008054:	f043 0302 	orr.w	r3, r3, #2
 8008058:	6313      	str	r3, [r2, #48]	@ 0x30
 800805a:	4b4c      	ldr	r3, [pc, #304]	@ (800818c <HAL_UART_MspInit+0x180>)
 800805c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805e:	f003 0302 	and.w	r3, r3, #2
 8008062:	61fb      	str	r3, [r7, #28]
 8008064:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008066:	23c0      	movs	r3, #192	@ 0xc0
 8008068:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800806a:	2302      	movs	r3, #2
 800806c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800806e:	2300      	movs	r3, #0
 8008070:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008072:	2303      	movs	r3, #3
 8008074:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008076:	2307      	movs	r3, #7
 8008078:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800807a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800807e:	4619      	mov	r1, r3
 8008080:	4843      	ldr	r0, [pc, #268]	@ (8008190 <HAL_UART_MspInit+0x184>)
 8008082:	f000 fc75 	bl	8008970 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008086:	2200      	movs	r2, #0
 8008088:	2100      	movs	r1, #0
 800808a:	2025      	movs	r0, #37	@ 0x25
 800808c:	f000 fba7 	bl	80087de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008090:	2025      	movs	r0, #37	@ 0x25
 8008092:	f000 fbc0 	bl	8008816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008096:	e073      	b.n	8008180 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a3d      	ldr	r2, [pc, #244]	@ (8008194 <HAL_UART_MspInit+0x188>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d134      	bne.n	800810c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80080a2:	2300      	movs	r3, #0
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	4b39      	ldr	r3, [pc, #228]	@ (800818c <HAL_UART_MspInit+0x180>)
 80080a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080aa:	4a38      	ldr	r2, [pc, #224]	@ (800818c <HAL_UART_MspInit+0x180>)
 80080ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80080b2:	4b36      	ldr	r3, [pc, #216]	@ (800818c <HAL_UART_MspInit+0x180>)
 80080b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080ba:	61bb      	str	r3, [r7, #24]
 80080bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80080be:	2300      	movs	r3, #0
 80080c0:	617b      	str	r3, [r7, #20]
 80080c2:	4b32      	ldr	r3, [pc, #200]	@ (800818c <HAL_UART_MspInit+0x180>)
 80080c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c6:	4a31      	ldr	r2, [pc, #196]	@ (800818c <HAL_UART_MspInit+0x180>)
 80080c8:	f043 0308 	orr.w	r3, r3, #8
 80080cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80080ce:	4b2f      	ldr	r3, [pc, #188]	@ (800818c <HAL_UART_MspInit+0x180>)
 80080d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d2:	f003 0308 	and.w	r3, r3, #8
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80080da:	2360      	movs	r3, #96	@ 0x60
 80080dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080de:	2302      	movs	r3, #2
 80080e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e2:	2300      	movs	r3, #0
 80080e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080e6:	2303      	movs	r3, #3
 80080e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80080ea:	2307      	movs	r3, #7
 80080ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80080ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080f2:	4619      	mov	r1, r3
 80080f4:	4828      	ldr	r0, [pc, #160]	@ (8008198 <HAL_UART_MspInit+0x18c>)
 80080f6:	f000 fc3b 	bl	8008970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80080fa:	2200      	movs	r2, #0
 80080fc:	2100      	movs	r1, #0
 80080fe:	2026      	movs	r0, #38	@ 0x26
 8008100:	f000 fb6d 	bl	80087de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008104:	2026      	movs	r0, #38	@ 0x26
 8008106:	f000 fb86 	bl	8008816 <HAL_NVIC_EnableIRQ>
}
 800810a:	e039      	b.n	8008180 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a22      	ldr	r2, [pc, #136]	@ (800819c <HAL_UART_MspInit+0x190>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d134      	bne.n	8008180 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008116:	2300      	movs	r3, #0
 8008118:	613b      	str	r3, [r7, #16]
 800811a:	4b1c      	ldr	r3, [pc, #112]	@ (800818c <HAL_UART_MspInit+0x180>)
 800811c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800811e:	4a1b      	ldr	r2, [pc, #108]	@ (800818c <HAL_UART_MspInit+0x180>)
 8008120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008124:	6413      	str	r3, [r2, #64]	@ 0x40
 8008126:	4b19      	ldr	r3, [pc, #100]	@ (800818c <HAL_UART_MspInit+0x180>)
 8008128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800812a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800812e:	613b      	str	r3, [r7, #16]
 8008130:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008132:	2300      	movs	r3, #0
 8008134:	60fb      	str	r3, [r7, #12]
 8008136:	4b15      	ldr	r3, [pc, #84]	@ (800818c <HAL_UART_MspInit+0x180>)
 8008138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800813a:	4a14      	ldr	r2, [pc, #80]	@ (800818c <HAL_UART_MspInit+0x180>)
 800813c:	f043 0304 	orr.w	r3, r3, #4
 8008140:	6313      	str	r3, [r2, #48]	@ 0x30
 8008142:	4b12      	ldr	r3, [pc, #72]	@ (800818c <HAL_UART_MspInit+0x180>)
 8008144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008146:	f003 0304 	and.w	r3, r3, #4
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800814e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008152:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008154:	2302      	movs	r3, #2
 8008156:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008158:	2300      	movs	r3, #0
 800815a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800815c:	2303      	movs	r3, #3
 800815e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008160:	2307      	movs	r3, #7
 8008162:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008168:	4619      	mov	r1, r3
 800816a:	480d      	ldr	r0, [pc, #52]	@ (80081a0 <HAL_UART_MspInit+0x194>)
 800816c:	f000 fc00 	bl	8008970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8008170:	2200      	movs	r2, #0
 8008172:	2100      	movs	r1, #0
 8008174:	2027      	movs	r0, #39	@ 0x27
 8008176:	f000 fb32 	bl	80087de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800817a:	2027      	movs	r0, #39	@ 0x27
 800817c:	f000 fb4b 	bl	8008816 <HAL_NVIC_EnableIRQ>
}
 8008180:	bf00      	nop
 8008182:	3738      	adds	r7, #56	@ 0x38
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	40011000 	.word	0x40011000
 800818c:	40023800 	.word	0x40023800
 8008190:	40020400 	.word	0x40020400
 8008194:	40004400 	.word	0x40004400
 8008198:	40020c00 	.word	0x40020c00
 800819c:	40004800 	.word	0x40004800
 80081a0:	40020800 	.word	0x40020800

080081a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80081a4:	b480      	push	{r7}
 80081a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80081a8:	bf00      	nop
 80081aa:	e7fd      	b.n	80081a8 <NMI_Handler+0x4>

080081ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081b0:	bf00      	nop
 80081b2:	e7fd      	b.n	80081b0 <HardFault_Handler+0x4>

080081b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80081b4:	b480      	push	{r7}
 80081b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80081b8:	bf00      	nop
 80081ba:	e7fd      	b.n	80081b8 <MemManage_Handler+0x4>

080081bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80081bc:	b480      	push	{r7}
 80081be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80081c0:	bf00      	nop
 80081c2:	e7fd      	b.n	80081c0 <BusFault_Handler+0x4>

080081c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80081c8:	bf00      	nop
 80081ca:	e7fd      	b.n	80081c8 <UsageFault_Handler+0x4>

080081cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80081d0:	bf00      	nop
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80081da:	b480      	push	{r7}
 80081dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80081de:	bf00      	nop
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80081e8:	b480      	push	{r7}
 80081ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80081ec:	bf00      	nop
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80081fa:	f000 f9d1 	bl	80085a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80081fe:	bf00      	nop
 8008200:	bd80      	pop	{r7, pc}

08008202 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_2_Pin);
 8008206:	2001      	movs	r0, #1
 8008208:	f000 fd80 	bl	8008d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800820c:	bf00      	nop
 800820e:	bd80      	pop	{r7, pc}

08008210 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_2_Pin);
 8008214:	2002      	movs	r0, #2
 8008216:	f000 fd79 	bl	8008d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800821a:	bf00      	nop
 800821c:	bd80      	pop	{r7, pc}

0800821e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_1_Pin);
 8008222:	2004      	movs	r0, #4
 8008224:	f000 fd72 	bl	8008d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8008228:	bf00      	nop
 800822a:	bd80      	pop	{r7, pc}

0800822c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_1_Pin);
 8008230:	2008      	movs	r0, #8
 8008232:	f000 fd6b 	bl	8008d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8008236:	bf00      	nop
 8008238:	bd80      	pop	{r7, pc}

0800823a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_3_Pin);
 800823e:	2020      	movs	r0, #32
 8008240:	f000 fd64 	bl	8008d0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8008244:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008248:	f000 fd60 	bl	8008d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800824c:	bf00      	nop
 800824e:	bd80      	pop	{r7, pc}

08008250 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008254:	4802      	ldr	r0, [pc, #8]	@ (8008260 <TIM1_CC_IRQHandler+0x10>)
 8008256:	f002 f865 	bl	800a324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800825a:	bf00      	nop
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20000338 	.word	0x20000338

08008264 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008268:	4802      	ldr	r0, [pc, #8]	@ (8008274 <TIM2_IRQHandler+0x10>)
 800826a:	f002 f85b 	bl	800a324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800826e:	bf00      	nop
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20000380 	.word	0x20000380

08008278 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
//		pitch = sensorData[1];
//		ax = sensorData[2];
//		ay = sensorData[3];
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800827c:	4802      	ldr	r0, [pc, #8]	@ (8008288 <USART1_IRQHandler+0x10>)
 800827e:	f002 ff71 	bl	800b164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008282:	bf00      	nop
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000410 	.word	0x20000410

0800828c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008290:	4802      	ldr	r0, [pc, #8]	@ (800829c <USART2_IRQHandler+0x10>)
 8008292:	f002 ff67 	bl	800b164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008296:	bf00      	nop
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20000458 	.word	0x20000458

080082a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80082a4:	4802      	ldr	r0, [pc, #8]	@ (80082b0 <USART3_IRQHandler+0x10>)
 80082a6:	f002 ff5d 	bl	800b164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80082aa:	bf00      	nop
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	200004a0 	.word	0x200004a0

080082b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 80082b8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80082bc:	f000 fd26 	bl	8008d0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 80082c0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80082c4:	f000 fd22 	bl	8008d0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_3_Pin);
 80082c8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80082cc:	f000 fd1e 	bl	8008d0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_4_Pin);
 80082d0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80082d4:	f000 fd1a 	bl	8008d0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_4_Pin);
 80082d8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80082dc:	f000 fd16 	bl	8008d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80082e0:	bf00      	nop
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80082e8:	4802      	ldr	r0, [pc, #8]	@ (80082f4 <TIM8_CC_IRQHandler+0x10>)
 80082ea:	f002 f81b 	bl	800a324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80082ee:	bf00      	nop
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	200003c8 	.word	0x200003c8

080082f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80082f8:	b480      	push	{r7}
 80082fa:	af00      	add	r7, sp, #0
  return 1;
 80082fc:	2301      	movs	r3, #1
}
 80082fe:	4618      	mov	r0, r3
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <_kill>:

int _kill(int pid, int sig)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008312:	f005 fd1b 	bl	800dd4c <__errno>
 8008316:	4603      	mov	r3, r0
 8008318:	2216      	movs	r2, #22
 800831a:	601a      	str	r2, [r3, #0]
  return -1;
 800831c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <_exit>:

void _exit (int status)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008330:	f04f 31ff 	mov.w	r1, #4294967295
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff ffe7 	bl	8008308 <_kill>
  while (1) {}    /* Make sure we hang here */
 800833a:	bf00      	nop
 800833c:	e7fd      	b.n	800833a <_exit+0x12>

0800833e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b086      	sub	sp, #24
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800834a:	2300      	movs	r3, #0
 800834c:	617b      	str	r3, [r7, #20]
 800834e:	e00a      	b.n	8008366 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008350:	f3af 8000 	nop.w
 8008354:	4601      	mov	r1, r0
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	60ba      	str	r2, [r7, #8]
 800835c:	b2ca      	uxtb	r2, r1
 800835e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	3301      	adds	r3, #1
 8008364:	617b      	str	r3, [r7, #20]
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	429a      	cmp	r2, r3
 800836c:	dbf0      	blt.n	8008350 <_read+0x12>
  }

  return len;
 800836e:	687b      	ldr	r3, [r7, #4]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3718      	adds	r7, #24
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008384:	2300      	movs	r3, #0
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	e009      	b.n	800839e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	60ba      	str	r2, [r7, #8]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	4618      	mov	r0, r3
 8008394:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	3301      	adds	r3, #1
 800839c:	617b      	str	r3, [r7, #20]
 800839e:	697a      	ldr	r2, [r7, #20]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	dbf1      	blt.n	800838a <_write+0x12>
  }
  return len;
 80083a6:	687b      	ldr	r3, [r7, #4]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3718      	adds	r7, #24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <_close>:

int _close(int file)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80083b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80083d8:	605a      	str	r2, [r3, #4]
  return 0;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <_isatty>:

int _isatty(int file)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80083f0:	2301      	movs	r3, #1
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80083fe:	b480      	push	{r7}
 8008400:	b085      	sub	sp, #20
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008420:	4a14      	ldr	r2, [pc, #80]	@ (8008474 <_sbrk+0x5c>)
 8008422:	4b15      	ldr	r3, [pc, #84]	@ (8008478 <_sbrk+0x60>)
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800842c:	4b13      	ldr	r3, [pc, #76]	@ (800847c <_sbrk+0x64>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d102      	bne.n	800843a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008434:	4b11      	ldr	r3, [pc, #68]	@ (800847c <_sbrk+0x64>)
 8008436:	4a12      	ldr	r2, [pc, #72]	@ (8008480 <_sbrk+0x68>)
 8008438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800843a:	4b10      	ldr	r3, [pc, #64]	@ (800847c <_sbrk+0x64>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4413      	add	r3, r2
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	429a      	cmp	r2, r3
 8008446:	d207      	bcs.n	8008458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008448:	f005 fc80 	bl	800dd4c <__errno>
 800844c:	4603      	mov	r3, r0
 800844e:	220c      	movs	r2, #12
 8008450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008452:	f04f 33ff 	mov.w	r3, #4294967295
 8008456:	e009      	b.n	800846c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008458:	4b08      	ldr	r3, [pc, #32]	@ (800847c <_sbrk+0x64>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800845e:	4b07      	ldr	r3, [pc, #28]	@ (800847c <_sbrk+0x64>)
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4413      	add	r3, r2
 8008466:	4a05      	ldr	r2, [pc, #20]	@ (800847c <_sbrk+0x64>)
 8008468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800846a:	68fb      	ldr	r3, [r7, #12]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20020000 	.word	0x20020000
 8008478:	00000400 	.word	0x00000400
 800847c:	200006e4 	.word	0x200006e4
 8008480:	20000838 	.word	0x20000838

08008484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008484:	b480      	push	{r7}
 8008486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008488:	4b06      	ldr	r3, [pc, #24]	@ (80084a4 <SystemInit+0x20>)
 800848a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800848e:	4a05      	ldr	r2, [pc, #20]	@ (80084a4 <SystemInit+0x20>)
 8008490:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008494:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008498:	bf00      	nop
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	e000ed00 	.word	0xe000ed00

080084a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80084a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80084e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80084ac:	f7ff ffea 	bl	8008484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80084b0:	480c      	ldr	r0, [pc, #48]	@ (80084e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80084b2:	490d      	ldr	r1, [pc, #52]	@ (80084e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80084b4:	4a0d      	ldr	r2, [pc, #52]	@ (80084ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80084b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80084b8:	e002      	b.n	80084c0 <LoopCopyDataInit>

080084ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80084ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80084bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80084be:	3304      	adds	r3, #4

080084c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80084c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80084c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80084c4:	d3f9      	bcc.n	80084ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80084c6:	4a0a      	ldr	r2, [pc, #40]	@ (80084f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80084c8:	4c0a      	ldr	r4, [pc, #40]	@ (80084f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80084ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80084cc:	e001      	b.n	80084d2 <LoopFillZerobss>

080084ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80084ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80084d0:	3204      	adds	r2, #4

080084d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80084d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80084d4:	d3fb      	bcc.n	80084ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80084d6:	f005 fc3f 	bl	800dd58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80084da:	f7fa fc05 	bl	8002ce8 <main>
  bx  lr    
 80084de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80084e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80084e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80084e8:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 80084ec:	08012b40 	.word	0x08012b40
  ldr r2, =_sbss
 80084f0:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 80084f4:	20000838 	.word	0x20000838

080084f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80084f8:	e7fe      	b.n	80084f8 <ADC_IRQHandler>
	...

080084fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008500:	4b0e      	ldr	r3, [pc, #56]	@ (800853c <HAL_Init+0x40>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a0d      	ldr	r2, [pc, #52]	@ (800853c <HAL_Init+0x40>)
 8008506:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800850a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800850c:	4b0b      	ldr	r3, [pc, #44]	@ (800853c <HAL_Init+0x40>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a0a      	ldr	r2, [pc, #40]	@ (800853c <HAL_Init+0x40>)
 8008512:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008518:	4b08      	ldr	r3, [pc, #32]	@ (800853c <HAL_Init+0x40>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a07      	ldr	r2, [pc, #28]	@ (800853c <HAL_Init+0x40>)
 800851e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008524:	2003      	movs	r0, #3
 8008526:	f000 f94f 	bl	80087c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800852a:	2000      	movs	r0, #0
 800852c:	f000 f808 	bl	8008540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008530:	f7ff fc10 	bl	8007d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	40023c00 	.word	0x40023c00

08008540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008548:	4b12      	ldr	r3, [pc, #72]	@ (8008594 <HAL_InitTick+0x54>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	4b12      	ldr	r3, [pc, #72]	@ (8008598 <HAL_InitTick+0x58>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	4619      	mov	r1, r3
 8008552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008556:	fbb3 f3f1 	udiv	r3, r3, r1
 800855a:	fbb2 f3f3 	udiv	r3, r2, r3
 800855e:	4618      	mov	r0, r3
 8008560:	f000 f967 	bl	8008832 <HAL_SYSTICK_Config>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e00e      	b.n	800858c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b0f      	cmp	r3, #15
 8008572:	d80a      	bhi.n	800858a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008574:	2200      	movs	r2, #0
 8008576:	6879      	ldr	r1, [r7, #4]
 8008578:	f04f 30ff 	mov.w	r0, #4294967295
 800857c:	f000 f92f 	bl	80087de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008580:	4a06      	ldr	r2, [pc, #24]	@ (800859c <HAL_InitTick+0x5c>)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	e000      	b.n	800858c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
}
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	200000e0 	.word	0x200000e0
 8008598:	200000e8 	.word	0x200000e8
 800859c:	200000e4 	.word	0x200000e4

080085a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80085a0:	b480      	push	{r7}
 80085a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80085a4:	4b06      	ldr	r3, [pc, #24]	@ (80085c0 <HAL_IncTick+0x20>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	461a      	mov	r2, r3
 80085aa:	4b06      	ldr	r3, [pc, #24]	@ (80085c4 <HAL_IncTick+0x24>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4413      	add	r3, r2
 80085b0:	4a04      	ldr	r2, [pc, #16]	@ (80085c4 <HAL_IncTick+0x24>)
 80085b2:	6013      	str	r3, [r2, #0]
}
 80085b4:	bf00      	nop
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	200000e8 	.word	0x200000e8
 80085c4:	200006e8 	.word	0x200006e8

080085c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80085c8:	b480      	push	{r7}
 80085ca:	af00      	add	r7, sp, #0
  return uwTick;
 80085cc:	4b03      	ldr	r3, [pc, #12]	@ (80085dc <HAL_GetTick+0x14>)
 80085ce:	681b      	ldr	r3, [r3, #0]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	200006e8 	.word	0x200006e8

080085e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80085e8:	f7ff ffee 	bl	80085c8 <HAL_GetTick>
 80085ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f8:	d005      	beq.n	8008606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80085fa:	4b0a      	ldr	r3, [pc, #40]	@ (8008624 <HAL_Delay+0x44>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4413      	add	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008606:	bf00      	nop
 8008608:	f7ff ffde 	bl	80085c8 <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	429a      	cmp	r2, r3
 8008616:	d8f7      	bhi.n	8008608 <HAL_Delay+0x28>
  {
  }
}
 8008618:	bf00      	nop
 800861a:	bf00      	nop
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	200000e8 	.word	0x200000e8

08008628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f003 0307 	and.w	r3, r3, #7
 8008636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008638:	4b0c      	ldr	r3, [pc, #48]	@ (800866c <__NVIC_SetPriorityGrouping+0x44>)
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008644:	4013      	ands	r3, r2
 8008646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008650:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800865a:	4a04      	ldr	r2, [pc, #16]	@ (800866c <__NVIC_SetPriorityGrouping+0x44>)
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	60d3      	str	r3, [r2, #12]
}
 8008660:	bf00      	nop
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	e000ed00 	.word	0xe000ed00

08008670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008670:	b480      	push	{r7}
 8008672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008674:	4b04      	ldr	r3, [pc, #16]	@ (8008688 <__NVIC_GetPriorityGrouping+0x18>)
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	0a1b      	lsrs	r3, r3, #8
 800867a:	f003 0307 	and.w	r3, r3, #7
}
 800867e:	4618      	mov	r0, r3
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	e000ed00 	.word	0xe000ed00

0800868c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800869a:	2b00      	cmp	r3, #0
 800869c:	db0b      	blt.n	80086b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	f003 021f 	and.w	r2, r3, #31
 80086a4:	4907      	ldr	r1, [pc, #28]	@ (80086c4 <__NVIC_EnableIRQ+0x38>)
 80086a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086aa:	095b      	lsrs	r3, r3, #5
 80086ac:	2001      	movs	r0, #1
 80086ae:	fa00 f202 	lsl.w	r2, r0, r2
 80086b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	e000e100 	.word	0xe000e100

080086c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	6039      	str	r1, [r7, #0]
 80086d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	db0a      	blt.n	80086f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	490c      	ldr	r1, [pc, #48]	@ (8008714 <__NVIC_SetPriority+0x4c>)
 80086e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086e6:	0112      	lsls	r2, r2, #4
 80086e8:	b2d2      	uxtb	r2, r2
 80086ea:	440b      	add	r3, r1
 80086ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80086f0:	e00a      	b.n	8008708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	4908      	ldr	r1, [pc, #32]	@ (8008718 <__NVIC_SetPriority+0x50>)
 80086f8:	79fb      	ldrb	r3, [r7, #7]
 80086fa:	f003 030f 	and.w	r3, r3, #15
 80086fe:	3b04      	subs	r3, #4
 8008700:	0112      	lsls	r2, r2, #4
 8008702:	b2d2      	uxtb	r2, r2
 8008704:	440b      	add	r3, r1
 8008706:	761a      	strb	r2, [r3, #24]
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	e000e100 	.word	0xe000e100
 8008718:	e000ed00 	.word	0xe000ed00

0800871c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800871c:	b480      	push	{r7}
 800871e:	b089      	sub	sp, #36	@ 0x24
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f003 0307 	and.w	r3, r3, #7
 800872e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	f1c3 0307 	rsb	r3, r3, #7
 8008736:	2b04      	cmp	r3, #4
 8008738:	bf28      	it	cs
 800873a:	2304      	movcs	r3, #4
 800873c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	3304      	adds	r3, #4
 8008742:	2b06      	cmp	r3, #6
 8008744:	d902      	bls.n	800874c <NVIC_EncodePriority+0x30>
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	3b03      	subs	r3, #3
 800874a:	e000      	b.n	800874e <NVIC_EncodePriority+0x32>
 800874c:	2300      	movs	r3, #0
 800874e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008750:	f04f 32ff 	mov.w	r2, #4294967295
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	fa02 f303 	lsl.w	r3, r2, r3
 800875a:	43da      	mvns	r2, r3
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	401a      	ands	r2, r3
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008764:	f04f 31ff 	mov.w	r1, #4294967295
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	fa01 f303 	lsl.w	r3, r1, r3
 800876e:	43d9      	mvns	r1, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008774:	4313      	orrs	r3, r2
         );
}
 8008776:	4618      	mov	r0, r3
 8008778:	3724      	adds	r7, #36	@ 0x24
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
	...

08008784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3b01      	subs	r3, #1
 8008790:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008794:	d301      	bcc.n	800879a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008796:	2301      	movs	r3, #1
 8008798:	e00f      	b.n	80087ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800879a:	4a0a      	ldr	r2, [pc, #40]	@ (80087c4 <SysTick_Config+0x40>)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3b01      	subs	r3, #1
 80087a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80087a2:	210f      	movs	r1, #15
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	f7ff ff8e 	bl	80086c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80087ac:	4b05      	ldr	r3, [pc, #20]	@ (80087c4 <SysTick_Config+0x40>)
 80087ae:	2200      	movs	r2, #0
 80087b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80087b2:	4b04      	ldr	r3, [pc, #16]	@ (80087c4 <SysTick_Config+0x40>)
 80087b4:	2207      	movs	r2, #7
 80087b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	e000e010 	.word	0xe000e010

080087c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7ff ff29 	bl	8008628 <__NVIC_SetPriorityGrouping>
}
 80087d6:	bf00      	nop
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80087de:	b580      	push	{r7, lr}
 80087e0:	b086      	sub	sp, #24
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	4603      	mov	r3, r0
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	607a      	str	r2, [r7, #4]
 80087ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80087f0:	f7ff ff3e 	bl	8008670 <__NVIC_GetPriorityGrouping>
 80087f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	68b9      	ldr	r1, [r7, #8]
 80087fa:	6978      	ldr	r0, [r7, #20]
 80087fc:	f7ff ff8e 	bl	800871c <NVIC_EncodePriority>
 8008800:	4602      	mov	r2, r0
 8008802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008806:	4611      	mov	r1, r2
 8008808:	4618      	mov	r0, r3
 800880a:	f7ff ff5d 	bl	80086c8 <__NVIC_SetPriority>
}
 800880e:	bf00      	nop
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	4603      	mov	r3, r0
 800881e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff ff31 	bl	800868c <__NVIC_EnableIRQ>
}
 800882a:	bf00      	nop
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff ffa2 	bl	8008784 <SysTick_Config>
 8008840:	4603      	mov	r3, r0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008856:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008858:	f7ff feb6 	bl	80085c8 <HAL_GetTick>
 800885c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d008      	beq.n	800887c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2280      	movs	r2, #128	@ 0x80
 800886e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e052      	b.n	8008922 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f022 0216 	bic.w	r2, r2, #22
 800888a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	695a      	ldr	r2, [r3, #20]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800889a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d103      	bne.n	80088ac <HAL_DMA_Abort+0x62>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d007      	beq.n	80088bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0208 	bic.w	r2, r2, #8
 80088ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f022 0201 	bic.w	r2, r2, #1
 80088ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80088cc:	e013      	b.n	80088f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80088ce:	f7ff fe7b 	bl	80085c8 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	2b05      	cmp	r3, #5
 80088da:	d90c      	bls.n	80088f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2220      	movs	r2, #32
 80088e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2203      	movs	r2, #3
 80088e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e015      	b.n	8008922 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e4      	bne.n	80088ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008908:	223f      	movs	r2, #63	@ 0x3f
 800890a:	409a      	lsls	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800892a:	b480      	push	{r7}
 800892c:	b083      	sub	sp, #12
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b02      	cmp	r3, #2
 800893c:	d004      	beq.n	8008948 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2280      	movs	r2, #128	@ 0x80
 8008942:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e00c      	b.n	8008962 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2205      	movs	r2, #5
 800894c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0201 	bic.w	r2, r2, #1
 800895e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
	...

08008970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008970:	b480      	push	{r7}
 8008972:	b089      	sub	sp, #36	@ 0x24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800897e:	2300      	movs	r3, #0
 8008980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008982:	2300      	movs	r3, #0
 8008984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008986:	2300      	movs	r3, #0
 8008988:	61fb      	str	r3, [r7, #28]
 800898a:	e16b      	b.n	8008c64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800898c:	2201      	movs	r2, #1
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	fa02 f303 	lsl.w	r3, r2, r3
 8008994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	4013      	ands	r3, r2
 800899e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	f040 815a 	bne.w	8008c5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f003 0303 	and.w	r3, r3, #3
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d005      	beq.n	80089c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d130      	bne.n	8008a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	2203      	movs	r2, #3
 80089ce:	fa02 f303 	lsl.w	r3, r2, r3
 80089d2:	43db      	mvns	r3, r3
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	4013      	ands	r3, r2
 80089d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	fa02 f303 	lsl.w	r3, r2, r3
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80089f8:	2201      	movs	r2, #1
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008a00:	43db      	mvns	r3, r3
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	4013      	ands	r3, r2
 8008a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	091b      	lsrs	r3, r3, #4
 8008a0e:	f003 0201 	and.w	r2, r3, #1
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	fa02 f303 	lsl.w	r3, r2, r3
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f003 0303 	and.w	r3, r3, #3
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	d017      	beq.n	8008a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	005b      	lsls	r3, r3, #1
 8008a3a:	2203      	movs	r2, #3
 8008a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a40:	43db      	mvns	r3, r3
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	4013      	ands	r3, r2
 8008a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	689a      	ldr	r2, [r3, #8]
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	fa02 f303 	lsl.w	r3, r2, r3
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f003 0303 	and.w	r3, r3, #3
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d123      	bne.n	8008ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	08da      	lsrs	r2, r3, #3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	3208      	adds	r2, #8
 8008a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	f003 0307 	and.w	r3, r3, #7
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	220f      	movs	r2, #15
 8008a84:	fa02 f303 	lsl.w	r3, r2, r3
 8008a88:	43db      	mvns	r3, r3
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	f003 0307 	and.w	r3, r3, #7
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	08da      	lsrs	r2, r3, #3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	3208      	adds	r2, #8
 8008aae:	69b9      	ldr	r1, [r7, #24]
 8008ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	2203      	movs	r2, #3
 8008ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac4:	43db      	mvns	r3, r3
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	4013      	ands	r3, r2
 8008aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	f003 0203 	and.w	r2, r3, #3
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 80b4 	beq.w	8008c5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008af6:	2300      	movs	r3, #0
 8008af8:	60fb      	str	r3, [r7, #12]
 8008afa:	4b60      	ldr	r3, [pc, #384]	@ (8008c7c <HAL_GPIO_Init+0x30c>)
 8008afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008afe:	4a5f      	ldr	r2, [pc, #380]	@ (8008c7c <HAL_GPIO_Init+0x30c>)
 8008b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8008b06:	4b5d      	ldr	r3, [pc, #372]	@ (8008c7c <HAL_GPIO_Init+0x30c>)
 8008b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b0e:	60fb      	str	r3, [r7, #12]
 8008b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b12:	4a5b      	ldr	r2, [pc, #364]	@ (8008c80 <HAL_GPIO_Init+0x310>)
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	089b      	lsrs	r3, r3, #2
 8008b18:	3302      	adds	r3, #2
 8008b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	f003 0303 	and.w	r3, r3, #3
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	220f      	movs	r2, #15
 8008b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2e:	43db      	mvns	r3, r3
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	4013      	ands	r3, r2
 8008b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a52      	ldr	r2, [pc, #328]	@ (8008c84 <HAL_GPIO_Init+0x314>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d02b      	beq.n	8008b96 <HAL_GPIO_Init+0x226>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a51      	ldr	r2, [pc, #324]	@ (8008c88 <HAL_GPIO_Init+0x318>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d025      	beq.n	8008b92 <HAL_GPIO_Init+0x222>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a50      	ldr	r2, [pc, #320]	@ (8008c8c <HAL_GPIO_Init+0x31c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d01f      	beq.n	8008b8e <HAL_GPIO_Init+0x21e>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a4f      	ldr	r2, [pc, #316]	@ (8008c90 <HAL_GPIO_Init+0x320>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d019      	beq.n	8008b8a <HAL_GPIO_Init+0x21a>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a4e      	ldr	r2, [pc, #312]	@ (8008c94 <HAL_GPIO_Init+0x324>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d013      	beq.n	8008b86 <HAL_GPIO_Init+0x216>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a4d      	ldr	r2, [pc, #308]	@ (8008c98 <HAL_GPIO_Init+0x328>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d00d      	beq.n	8008b82 <HAL_GPIO_Init+0x212>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a4c      	ldr	r2, [pc, #304]	@ (8008c9c <HAL_GPIO_Init+0x32c>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d007      	beq.n	8008b7e <HAL_GPIO_Init+0x20e>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a4b      	ldr	r2, [pc, #300]	@ (8008ca0 <HAL_GPIO_Init+0x330>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d101      	bne.n	8008b7a <HAL_GPIO_Init+0x20a>
 8008b76:	2307      	movs	r3, #7
 8008b78:	e00e      	b.n	8008b98 <HAL_GPIO_Init+0x228>
 8008b7a:	2308      	movs	r3, #8
 8008b7c:	e00c      	b.n	8008b98 <HAL_GPIO_Init+0x228>
 8008b7e:	2306      	movs	r3, #6
 8008b80:	e00a      	b.n	8008b98 <HAL_GPIO_Init+0x228>
 8008b82:	2305      	movs	r3, #5
 8008b84:	e008      	b.n	8008b98 <HAL_GPIO_Init+0x228>
 8008b86:	2304      	movs	r3, #4
 8008b88:	e006      	b.n	8008b98 <HAL_GPIO_Init+0x228>
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e004      	b.n	8008b98 <HAL_GPIO_Init+0x228>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e002      	b.n	8008b98 <HAL_GPIO_Init+0x228>
 8008b92:	2301      	movs	r3, #1
 8008b94:	e000      	b.n	8008b98 <HAL_GPIO_Init+0x228>
 8008b96:	2300      	movs	r3, #0
 8008b98:	69fa      	ldr	r2, [r7, #28]
 8008b9a:	f002 0203 	and.w	r2, r2, #3
 8008b9e:	0092      	lsls	r2, r2, #2
 8008ba0:	4093      	lsls	r3, r2
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ba8:	4935      	ldr	r1, [pc, #212]	@ (8008c80 <HAL_GPIO_Init+0x310>)
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	089b      	lsrs	r3, r3, #2
 8008bae:	3302      	adds	r3, #2
 8008bb0:	69ba      	ldr	r2, [r7, #24]
 8008bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8008ca4 <HAL_GPIO_Init+0x334>)
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	43db      	mvns	r3, r3
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008bd2:	69ba      	ldr	r2, [r7, #24]
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008bda:	4a32      	ldr	r2, [pc, #200]	@ (8008ca4 <HAL_GPIO_Init+0x334>)
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008be0:	4b30      	ldr	r3, [pc, #192]	@ (8008ca4 <HAL_GPIO_Init+0x334>)
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	43db      	mvns	r3, r3
 8008bea:	69ba      	ldr	r2, [r7, #24]
 8008bec:	4013      	ands	r3, r2
 8008bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d003      	beq.n	8008c04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008bfc:	69ba      	ldr	r2, [r7, #24]
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008c04:	4a27      	ldr	r2, [pc, #156]	@ (8008ca4 <HAL_GPIO_Init+0x334>)
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008c0a:	4b26      	ldr	r3, [pc, #152]	@ (8008ca4 <HAL_GPIO_Init+0x334>)
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	43db      	mvns	r3, r3
 8008c14:	69ba      	ldr	r2, [r7, #24]
 8008c16:	4013      	ands	r3, r2
 8008c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ca4 <HAL_GPIO_Init+0x334>)
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c34:	4b1b      	ldr	r3, [pc, #108]	@ (8008ca4 <HAL_GPIO_Init+0x334>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	43db      	mvns	r3, r3
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	4013      	ands	r3, r2
 8008c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008c58:	4a12      	ldr	r2, [pc, #72]	@ (8008ca4 <HAL_GPIO_Init+0x334>)
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	3301      	adds	r3, #1
 8008c62:	61fb      	str	r3, [r7, #28]
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	2b0f      	cmp	r3, #15
 8008c68:	f67f ae90 	bls.w	800898c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008c6c:	bf00      	nop
 8008c6e:	bf00      	nop
 8008c70:	3724      	adds	r7, #36	@ 0x24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	40023800 	.word	0x40023800
 8008c80:	40013800 	.word	0x40013800
 8008c84:	40020000 	.word	0x40020000
 8008c88:	40020400 	.word	0x40020400
 8008c8c:	40020800 	.word	0x40020800
 8008c90:	40020c00 	.word	0x40020c00
 8008c94:	40021000 	.word	0x40021000
 8008c98:	40021400 	.word	0x40021400
 8008c9c:	40021800 	.word	0x40021800
 8008ca0:	40021c00 	.word	0x40021c00
 8008ca4:	40013c00 	.word	0x40013c00

08008ca8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691a      	ldr	r2, [r3, #16]
 8008cb8:	887b      	ldrh	r3, [r7, #2]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	73fb      	strb	r3, [r7, #15]
 8008cc4:	e001      	b.n	8008cca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	807b      	strh	r3, [r7, #2]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008ce8:	787b      	ldrb	r3, [r7, #1]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008cee:	887a      	ldrh	r2, [r7, #2]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008cf4:	e003      	b.n	8008cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008cf6:	887b      	ldrh	r3, [r7, #2]
 8008cf8:	041a      	lsls	r2, r3, #16
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	619a      	str	r2, [r3, #24]
}
 8008cfe:	bf00      	nop
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
	...

08008d0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008d16:	4b08      	ldr	r3, [pc, #32]	@ (8008d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008d18:	695a      	ldr	r2, [r3, #20]
 8008d1a:	88fb      	ldrh	r3, [r7, #6]
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d006      	beq.n	8008d30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008d22:	4a05      	ldr	r2, [pc, #20]	@ (8008d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008d24:	88fb      	ldrh	r3, [r7, #6]
 8008d26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008d28:	88fb      	ldrh	r3, [r7, #6]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7f9 fe4c 	bl	80029c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8008d30:	bf00      	nop
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	40013c00 	.word	0x40013c00

08008d3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e12b      	b.n	8008fa6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d106      	bne.n	8008d68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff f81e 	bl	8007da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2224      	movs	r2, #36	@ 0x24
 8008d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 0201 	bic.w	r2, r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008d9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008da0:	f001 f8da 	bl	8009f58 <HAL_RCC_GetPCLK1Freq>
 8008da4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	4a81      	ldr	r2, [pc, #516]	@ (8008fb0 <HAL_I2C_Init+0x274>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d807      	bhi.n	8008dc0 <HAL_I2C_Init+0x84>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	4a80      	ldr	r2, [pc, #512]	@ (8008fb4 <HAL_I2C_Init+0x278>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	bf94      	ite	ls
 8008db8:	2301      	movls	r3, #1
 8008dba:	2300      	movhi	r3, #0
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	e006      	b.n	8008dce <HAL_I2C_Init+0x92>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4a7d      	ldr	r2, [pc, #500]	@ (8008fb8 <HAL_I2C_Init+0x27c>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	bf94      	ite	ls
 8008dc8:	2301      	movls	r3, #1
 8008dca:	2300      	movhi	r3, #0
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e0e7      	b.n	8008fa6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	4a78      	ldr	r2, [pc, #480]	@ (8008fbc <HAL_I2C_Init+0x280>)
 8008dda:	fba2 2303 	umull	r2, r3, r2, r3
 8008dde:	0c9b      	lsrs	r3, r3, #18
 8008de0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	430a      	orrs	r2, r1
 8008df4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	4a6a      	ldr	r2, [pc, #424]	@ (8008fb0 <HAL_I2C_Init+0x274>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d802      	bhi.n	8008e10 <HAL_I2C_Init+0xd4>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	e009      	b.n	8008e24 <HAL_I2C_Init+0xe8>
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008e16:	fb02 f303 	mul.w	r3, r2, r3
 8008e1a:	4a69      	ldr	r2, [pc, #420]	@ (8008fc0 <HAL_I2C_Init+0x284>)
 8008e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e20:	099b      	lsrs	r3, r3, #6
 8008e22:	3301      	adds	r3, #1
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	6812      	ldr	r2, [r2, #0]
 8008e28:	430b      	orrs	r3, r1
 8008e2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008e36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	495c      	ldr	r1, [pc, #368]	@ (8008fb0 <HAL_I2C_Init+0x274>)
 8008e40:	428b      	cmp	r3, r1
 8008e42:	d819      	bhi.n	8008e78 <HAL_I2C_Init+0x13c>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	1e59      	subs	r1, r3, #1
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e52:	1c59      	adds	r1, r3, #1
 8008e54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008e58:	400b      	ands	r3, r1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <HAL_I2C_Init+0x138>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	1e59      	subs	r1, r3, #1
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e72:	e051      	b.n	8008f18 <HAL_I2C_Init+0x1dc>
 8008e74:	2304      	movs	r3, #4
 8008e76:	e04f      	b.n	8008f18 <HAL_I2C_Init+0x1dc>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d111      	bne.n	8008ea4 <HAL_I2C_Init+0x168>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	1e58      	subs	r0, r3, #1
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6859      	ldr	r1, [r3, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	005b      	lsls	r3, r3, #1
 8008e8c:	440b      	add	r3, r1
 8008e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e92:	3301      	adds	r3, #1
 8008e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	bf0c      	ite	eq
 8008e9c:	2301      	moveq	r3, #1
 8008e9e:	2300      	movne	r3, #0
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	e012      	b.n	8008eca <HAL_I2C_Init+0x18e>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	1e58      	subs	r0, r3, #1
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6859      	ldr	r1, [r3, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	440b      	add	r3, r1
 8008eb2:	0099      	lsls	r1, r3, #2
 8008eb4:	440b      	add	r3, r1
 8008eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008eba:	3301      	adds	r3, #1
 8008ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	bf0c      	ite	eq
 8008ec4:	2301      	moveq	r3, #1
 8008ec6:	2300      	movne	r3, #0
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <HAL_I2C_Init+0x196>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e022      	b.n	8008f18 <HAL_I2C_Init+0x1dc>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10e      	bne.n	8008ef8 <HAL_I2C_Init+0x1bc>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	1e58      	subs	r0, r3, #1
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6859      	ldr	r1, [r3, #4]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	005b      	lsls	r3, r3, #1
 8008ee6:	440b      	add	r3, r1
 8008ee8:	fbb0 f3f3 	udiv	r3, r0, r3
 8008eec:	3301      	adds	r3, #1
 8008eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ef6:	e00f      	b.n	8008f18 <HAL_I2C_Init+0x1dc>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	1e58      	subs	r0, r3, #1
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6859      	ldr	r1, [r3, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	440b      	add	r3, r1
 8008f06:	0099      	lsls	r1, r3, #2
 8008f08:	440b      	add	r3, r1
 8008f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f0e:	3301      	adds	r3, #1
 8008f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	6809      	ldr	r1, [r1, #0]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	69da      	ldr	r2, [r3, #28]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	431a      	orrs	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008f46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	6911      	ldr	r1, [r2, #16]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	68d2      	ldr	r2, [r2, #12]
 8008f52:	4311      	orrs	r1, r2
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	6812      	ldr	r2, [r2, #0]
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	695a      	ldr	r2, [r3, #20]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	430a      	orrs	r2, r1
 8008f76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f042 0201 	orr.w	r2, r2, #1
 8008f86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	000186a0 	.word	0x000186a0
 8008fb4:	001e847f 	.word	0x001e847f
 8008fb8:	003d08ff 	.word	0x003d08ff
 8008fbc:	431bde83 	.word	0x431bde83
 8008fc0:	10624dd3 	.word	0x10624dd3

08008fc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b088      	sub	sp, #32
 8008fc8:	af02      	add	r7, sp, #8
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	607a      	str	r2, [r7, #4]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	817b      	strh	r3, [r7, #10]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008fd8:	f7ff faf6 	bl	80085c8 <HAL_GetTick>
 8008fdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b20      	cmp	r3, #32
 8008fe8:	f040 80e0 	bne.w	80091ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	2319      	movs	r3, #25
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	4970      	ldr	r1, [pc, #448]	@ (80091b8 <HAL_I2C_Master_Transmit+0x1f4>)
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 f964 	bl	80092c4 <I2C_WaitOnFlagUntilTimeout>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d001      	beq.n	8009006 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009002:	2302      	movs	r3, #2
 8009004:	e0d3      	b.n	80091ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800900c:	2b01      	cmp	r3, #1
 800900e:	d101      	bne.n	8009014 <HAL_I2C_Master_Transmit+0x50>
 8009010:	2302      	movs	r3, #2
 8009012:	e0cc      	b.n	80091ae <HAL_I2C_Master_Transmit+0x1ea>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b01      	cmp	r3, #1
 8009028:	d007      	beq.n	800903a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f042 0201 	orr.w	r2, r2, #1
 8009038:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009048:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2221      	movs	r2, #33	@ 0x21
 800904e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2210      	movs	r2, #16
 8009056:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	893a      	ldrh	r2, [r7, #8]
 800906a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009070:	b29a      	uxth	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	4a50      	ldr	r2, [pc, #320]	@ (80091bc <HAL_I2C_Master_Transmit+0x1f8>)
 800907a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800907c:	8979      	ldrh	r1, [r7, #10]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	6a3a      	ldr	r2, [r7, #32]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f000 f89c 	bl	80091c0 <I2C_MasterRequestWrite>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d001      	beq.n	8009092 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e08d      	b.n	80091ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009092:	2300      	movs	r3, #0
 8009094:	613b      	str	r3, [r7, #16]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	613b      	str	r3, [r7, #16]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	613b      	str	r3, [r7, #16]
 80090a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80090a8:	e066      	b.n	8009178 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	6a39      	ldr	r1, [r7, #32]
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 fa22 	bl	80094f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00d      	beq.n	80090d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090be:	2b04      	cmp	r3, #4
 80090c0:	d107      	bne.n	80090d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e06b      	b.n	80091ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090da:	781a      	ldrb	r2, [r3, #0]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e6:	1c5a      	adds	r2, r3, #1
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	3b01      	subs	r3, #1
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090fe:	3b01      	subs	r3, #1
 8009100:	b29a      	uxth	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	f003 0304 	and.w	r3, r3, #4
 8009110:	2b04      	cmp	r3, #4
 8009112:	d11b      	bne.n	800914c <HAL_I2C_Master_Transmit+0x188>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009118:	2b00      	cmp	r3, #0
 800911a:	d017      	beq.n	800914c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009120:	781a      	ldrb	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800912c:	1c5a      	adds	r2, r3, #1
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009136:	b29b      	uxth	r3, r3
 8009138:	3b01      	subs	r3, #1
 800913a:	b29a      	uxth	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009144:	3b01      	subs	r3, #1
 8009146:	b29a      	uxth	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	6a39      	ldr	r1, [r7, #32]
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 fa19 	bl	8009588 <I2C_WaitOnBTFFlagUntilTimeout>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00d      	beq.n	8009178 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009160:	2b04      	cmp	r3, #4
 8009162:	d107      	bne.n	8009174 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009172:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e01a      	b.n	80091ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800917c:	2b00      	cmp	r3, #0
 800917e:	d194      	bne.n	80090aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800918e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2220      	movs	r2, #32
 8009194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	e000      	b.n	80091ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80091ac:	2302      	movs	r3, #2
  }
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	00100002 	.word	0x00100002
 80091bc:	ffff0000 	.word	0xffff0000

080091c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af02      	add	r7, sp, #8
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	607a      	str	r2, [r7, #4]
 80091ca:	603b      	str	r3, [r7, #0]
 80091cc:	460b      	mov	r3, r1
 80091ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2b08      	cmp	r3, #8
 80091da:	d006      	beq.n	80091ea <I2C_MasterRequestWrite+0x2a>
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d003      	beq.n	80091ea <I2C_MasterRequestWrite+0x2a>
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80091e8:	d108      	bne.n	80091fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091f8:	601a      	str	r2, [r3, #0]
 80091fa:	e00b      	b.n	8009214 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009200:	2b12      	cmp	r3, #18
 8009202:	d107      	bne.n	8009214 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009212:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f000 f84f 	bl	80092c4 <I2C_WaitOnFlagUntilTimeout>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00d      	beq.n	8009248 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800923a:	d103      	bne.n	8009244 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009242:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009244:	2303      	movs	r3, #3
 8009246:	e035      	b.n	80092b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009250:	d108      	bne.n	8009264 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009252:	897b      	ldrh	r3, [r7, #10]
 8009254:	b2db      	uxtb	r3, r3
 8009256:	461a      	mov	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009260:	611a      	str	r2, [r3, #16]
 8009262:	e01b      	b.n	800929c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009264:	897b      	ldrh	r3, [r7, #10]
 8009266:	11db      	asrs	r3, r3, #7
 8009268:	b2db      	uxtb	r3, r3
 800926a:	f003 0306 	and.w	r3, r3, #6
 800926e:	b2db      	uxtb	r3, r3
 8009270:	f063 030f 	orn	r3, r3, #15
 8009274:	b2da      	uxtb	r2, r3
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	490e      	ldr	r1, [pc, #56]	@ (80092bc <I2C_MasterRequestWrite+0xfc>)
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f000 f898 	bl	80093b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e010      	b.n	80092b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009292:	897b      	ldrh	r3, [r7, #10]
 8009294:	b2da      	uxtb	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	4907      	ldr	r1, [pc, #28]	@ (80092c0 <I2C_MasterRequestWrite+0x100>)
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 f888 	bl	80093b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e000      	b.n	80092b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	00010008 	.word	0x00010008
 80092c0:	00010002 	.word	0x00010002

080092c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	4613      	mov	r3, r2
 80092d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092d4:	e048      	b.n	8009368 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092dc:	d044      	beq.n	8009368 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092de:	f7ff f973 	bl	80085c8 <HAL_GetTick>
 80092e2:	4602      	mov	r2, r0
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d302      	bcc.n	80092f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d139      	bne.n	8009368 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	0c1b      	lsrs	r3, r3, #16
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d10d      	bne.n	800931a <I2C_WaitOnFlagUntilTimeout+0x56>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	43da      	mvns	r2, r3
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	4013      	ands	r3, r2
 800930a:	b29b      	uxth	r3, r3
 800930c:	2b00      	cmp	r3, #0
 800930e:	bf0c      	ite	eq
 8009310:	2301      	moveq	r3, #1
 8009312:	2300      	movne	r3, #0
 8009314:	b2db      	uxtb	r3, r3
 8009316:	461a      	mov	r2, r3
 8009318:	e00c      	b.n	8009334 <I2C_WaitOnFlagUntilTimeout+0x70>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	43da      	mvns	r2, r3
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	4013      	ands	r3, r2
 8009326:	b29b      	uxth	r3, r3
 8009328:	2b00      	cmp	r3, #0
 800932a:	bf0c      	ite	eq
 800932c:	2301      	moveq	r3, #1
 800932e:	2300      	movne	r3, #0
 8009330:	b2db      	uxtb	r3, r3
 8009332:	461a      	mov	r2, r3
 8009334:	79fb      	ldrb	r3, [r7, #7]
 8009336:	429a      	cmp	r2, r3
 8009338:	d116      	bne.n	8009368 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2220      	movs	r2, #32
 8009344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009354:	f043 0220 	orr.w	r2, r3, #32
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e023      	b.n	80093b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	0c1b      	lsrs	r3, r3, #16
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b01      	cmp	r3, #1
 8009370:	d10d      	bne.n	800938e <I2C_WaitOnFlagUntilTimeout+0xca>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	43da      	mvns	r2, r3
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	4013      	ands	r3, r2
 800937e:	b29b      	uxth	r3, r3
 8009380:	2b00      	cmp	r3, #0
 8009382:	bf0c      	ite	eq
 8009384:	2301      	moveq	r3, #1
 8009386:	2300      	movne	r3, #0
 8009388:	b2db      	uxtb	r3, r3
 800938a:	461a      	mov	r2, r3
 800938c:	e00c      	b.n	80093a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	43da      	mvns	r2, r3
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	4013      	ands	r3, r2
 800939a:	b29b      	uxth	r3, r3
 800939c:	2b00      	cmp	r3, #0
 800939e:	bf0c      	ite	eq
 80093a0:	2301      	moveq	r3, #1
 80093a2:	2300      	movne	r3, #0
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d093      	beq.n	80092d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
 80093c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80093c6:	e071      	b.n	80094ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093d6:	d123      	bne.n	8009420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80093f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2220      	movs	r2, #32
 80093fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800940c:	f043 0204 	orr.w	r2, r3, #4
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e067      	b.n	80094f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009426:	d041      	beq.n	80094ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009428:	f7ff f8ce 	bl	80085c8 <HAL_GetTick>
 800942c:	4602      	mov	r2, r0
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	429a      	cmp	r2, r3
 8009436:	d302      	bcc.n	800943e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d136      	bne.n	80094ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	0c1b      	lsrs	r3, r3, #16
 8009442:	b2db      	uxtb	r3, r3
 8009444:	2b01      	cmp	r3, #1
 8009446:	d10c      	bne.n	8009462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	43da      	mvns	r2, r3
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	4013      	ands	r3, r2
 8009454:	b29b      	uxth	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	bf14      	ite	ne
 800945a:	2301      	movne	r3, #1
 800945c:	2300      	moveq	r3, #0
 800945e:	b2db      	uxtb	r3, r3
 8009460:	e00b      	b.n	800947a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	43da      	mvns	r2, r3
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	4013      	ands	r3, r2
 800946e:	b29b      	uxth	r3, r3
 8009470:	2b00      	cmp	r3, #0
 8009472:	bf14      	ite	ne
 8009474:	2301      	movne	r3, #1
 8009476:	2300      	moveq	r3, #0
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d016      	beq.n	80094ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2220      	movs	r2, #32
 8009488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009498:	f043 0220 	orr.w	r2, r3, #32
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e021      	b.n	80094f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	0c1b      	lsrs	r3, r3, #16
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d10c      	bne.n	80094d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	43da      	mvns	r2, r3
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	4013      	ands	r3, r2
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	bf14      	ite	ne
 80094c8:	2301      	movne	r3, #1
 80094ca:	2300      	moveq	r3, #0
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	e00b      	b.n	80094e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	43da      	mvns	r2, r3
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	4013      	ands	r3, r2
 80094dc:	b29b      	uxth	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	bf14      	ite	ne
 80094e2:	2301      	movne	r3, #1
 80094e4:	2300      	moveq	r3, #0
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f47f af6d 	bne.w	80093c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009504:	e034      	b.n	8009570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 f886 	bl	8009618 <I2C_IsAcknowledgeFailed>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e034      	b.n	8009580 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951c:	d028      	beq.n	8009570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800951e:	f7ff f853 	bl	80085c8 <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	429a      	cmp	r2, r3
 800952c:	d302      	bcc.n	8009534 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d11d      	bne.n	8009570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800953e:	2b80      	cmp	r3, #128	@ 0x80
 8009540:	d016      	beq.n	8009570 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2220      	movs	r2, #32
 800954c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800955c:	f043 0220 	orr.w	r2, r3, #32
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e007      	b.n	8009580 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800957a:	2b80      	cmp	r3, #128	@ 0x80
 800957c:	d1c3      	bne.n	8009506 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009594:	e034      	b.n	8009600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 f83e 	bl	8009618 <I2C_IsAcknowledgeFailed>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e034      	b.n	8009610 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ac:	d028      	beq.n	8009600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095ae:	f7ff f80b 	bl	80085c8 <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d302      	bcc.n	80095c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d11d      	bne.n	8009600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	f003 0304 	and.w	r3, r3, #4
 80095ce:	2b04      	cmp	r3, #4
 80095d0:	d016      	beq.n	8009600 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2220      	movs	r2, #32
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ec:	f043 0220 	orr.w	r2, r3, #32
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e007      	b.n	8009610 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	f003 0304 	and.w	r3, r3, #4
 800960a:	2b04      	cmp	r3, #4
 800960c:	d1c3      	bne.n	8009596 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800962a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800962e:	d11b      	bne.n	8009668 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009638:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2220      	movs	r2, #32
 8009644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009654:	f043 0204 	orr.w	r2, r3, #4
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e000      	b.n	800966a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
	...

08009678 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e267      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	2b00      	cmp	r3, #0
 8009694:	d075      	beq.n	8009782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009696:	4b88      	ldr	r3, [pc, #544]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f003 030c 	and.w	r3, r3, #12
 800969e:	2b04      	cmp	r3, #4
 80096a0:	d00c      	beq.n	80096bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80096a2:	4b85      	ldr	r3, [pc, #532]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80096aa:	2b08      	cmp	r3, #8
 80096ac:	d112      	bne.n	80096d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80096ae:	4b82      	ldr	r3, [pc, #520]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096ba:	d10b      	bne.n	80096d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096bc:	4b7e      	ldr	r3, [pc, #504]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d05b      	beq.n	8009780 <HAL_RCC_OscConfig+0x108>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d157      	bne.n	8009780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e242      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096dc:	d106      	bne.n	80096ec <HAL_RCC_OscConfig+0x74>
 80096de:	4b76      	ldr	r3, [pc, #472]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a75      	ldr	r2, [pc, #468]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 80096e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	e01d      	b.n	8009728 <HAL_RCC_OscConfig+0xb0>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096f4:	d10c      	bne.n	8009710 <HAL_RCC_OscConfig+0x98>
 80096f6:	4b70      	ldr	r3, [pc, #448]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a6f      	ldr	r2, [pc, #444]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 80096fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009700:	6013      	str	r3, [r2, #0]
 8009702:	4b6d      	ldr	r3, [pc, #436]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a6c      	ldr	r2, [pc, #432]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	e00b      	b.n	8009728 <HAL_RCC_OscConfig+0xb0>
 8009710:	4b69      	ldr	r3, [pc, #420]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a68      	ldr	r2, [pc, #416]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800971a:	6013      	str	r3, [r2, #0]
 800971c:	4b66      	ldr	r3, [pc, #408]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a65      	ldr	r2, [pc, #404]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d013      	beq.n	8009758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009730:	f7fe ff4a 	bl	80085c8 <HAL_GetTick>
 8009734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009736:	e008      	b.n	800974a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009738:	f7fe ff46 	bl	80085c8 <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	2b64      	cmp	r3, #100	@ 0x64
 8009744:	d901      	bls.n	800974a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e207      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800974a:	4b5b      	ldr	r3, [pc, #364]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0f0      	beq.n	8009738 <HAL_RCC_OscConfig+0xc0>
 8009756:	e014      	b.n	8009782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009758:	f7fe ff36 	bl	80085c8 <HAL_GetTick>
 800975c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800975e:	e008      	b.n	8009772 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009760:	f7fe ff32 	bl	80085c8 <HAL_GetTick>
 8009764:	4602      	mov	r2, r0
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	2b64      	cmp	r3, #100	@ 0x64
 800976c:	d901      	bls.n	8009772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	e1f3      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009772:	4b51      	ldr	r3, [pc, #324]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1f0      	bne.n	8009760 <HAL_RCC_OscConfig+0xe8>
 800977e:	e000      	b.n	8009782 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d063      	beq.n	8009856 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800978e:	4b4a      	ldr	r3, [pc, #296]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f003 030c 	and.w	r3, r3, #12
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00b      	beq.n	80097b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800979a:	4b47      	ldr	r3, [pc, #284]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80097a2:	2b08      	cmp	r3, #8
 80097a4:	d11c      	bne.n	80097e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80097a6:	4b44      	ldr	r3, [pc, #272]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d116      	bne.n	80097e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097b2:	4b41      	ldr	r3, [pc, #260]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0302 	and.w	r3, r3, #2
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d005      	beq.n	80097ca <HAL_RCC_OscConfig+0x152>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d001      	beq.n	80097ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e1c7      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097ca:	4b3b      	ldr	r3, [pc, #236]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	00db      	lsls	r3, r3, #3
 80097d8:	4937      	ldr	r1, [pc, #220]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097de:	e03a      	b.n	8009856 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d020      	beq.n	800982a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80097e8:	4b34      	ldr	r3, [pc, #208]	@ (80098bc <HAL_RCC_OscConfig+0x244>)
 80097ea:	2201      	movs	r2, #1
 80097ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097ee:	f7fe feeb 	bl	80085c8 <HAL_GetTick>
 80097f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097f4:	e008      	b.n	8009808 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097f6:	f7fe fee7 	bl	80085c8 <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	2b02      	cmp	r3, #2
 8009802:	d901      	bls.n	8009808 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	e1a8      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009808:	4b2b      	ldr	r3, [pc, #172]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0302 	and.w	r3, r3, #2
 8009810:	2b00      	cmp	r3, #0
 8009812:	d0f0      	beq.n	80097f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009814:	4b28      	ldr	r3, [pc, #160]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	00db      	lsls	r3, r3, #3
 8009822:	4925      	ldr	r1, [pc, #148]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 8009824:	4313      	orrs	r3, r2
 8009826:	600b      	str	r3, [r1, #0]
 8009828:	e015      	b.n	8009856 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800982a:	4b24      	ldr	r3, [pc, #144]	@ (80098bc <HAL_RCC_OscConfig+0x244>)
 800982c:	2200      	movs	r2, #0
 800982e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009830:	f7fe feca 	bl	80085c8 <HAL_GetTick>
 8009834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009836:	e008      	b.n	800984a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009838:	f7fe fec6 	bl	80085c8 <HAL_GetTick>
 800983c:	4602      	mov	r2, r0
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	2b02      	cmp	r3, #2
 8009844:	d901      	bls.n	800984a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e187      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800984a:	4b1b      	ldr	r3, [pc, #108]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0302 	and.w	r3, r3, #2
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1f0      	bne.n	8009838 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 0308 	and.w	r3, r3, #8
 800985e:	2b00      	cmp	r3, #0
 8009860:	d036      	beq.n	80098d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d016      	beq.n	8009898 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800986a:	4b15      	ldr	r3, [pc, #84]	@ (80098c0 <HAL_RCC_OscConfig+0x248>)
 800986c:	2201      	movs	r2, #1
 800986e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009870:	f7fe feaa 	bl	80085c8 <HAL_GetTick>
 8009874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009876:	e008      	b.n	800988a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009878:	f7fe fea6 	bl	80085c8 <HAL_GetTick>
 800987c:	4602      	mov	r2, r0
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	2b02      	cmp	r3, #2
 8009884:	d901      	bls.n	800988a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009886:	2303      	movs	r3, #3
 8009888:	e167      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800988a:	4b0b      	ldr	r3, [pc, #44]	@ (80098b8 <HAL_RCC_OscConfig+0x240>)
 800988c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0f0      	beq.n	8009878 <HAL_RCC_OscConfig+0x200>
 8009896:	e01b      	b.n	80098d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009898:	4b09      	ldr	r3, [pc, #36]	@ (80098c0 <HAL_RCC_OscConfig+0x248>)
 800989a:	2200      	movs	r2, #0
 800989c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800989e:	f7fe fe93 	bl	80085c8 <HAL_GetTick>
 80098a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098a4:	e00e      	b.n	80098c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80098a6:	f7fe fe8f 	bl	80085c8 <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d907      	bls.n	80098c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e150      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
 80098b8:	40023800 	.word	0x40023800
 80098bc:	42470000 	.word	0x42470000
 80098c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80098c4:	4b88      	ldr	r3, [pc, #544]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 80098c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098c8:	f003 0302 	and.w	r3, r3, #2
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1ea      	bne.n	80098a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0304 	and.w	r3, r3, #4
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 8097 	beq.w	8009a0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098de:	2300      	movs	r3, #0
 80098e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098e2:	4b81      	ldr	r3, [pc, #516]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 80098e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10f      	bne.n	800990e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098ee:	2300      	movs	r3, #0
 80098f0:	60bb      	str	r3, [r7, #8]
 80098f2:	4b7d      	ldr	r3, [pc, #500]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 80098f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f6:	4a7c      	ldr	r2, [pc, #496]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 80098f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80098fe:	4b7a      	ldr	r3, [pc, #488]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009906:	60bb      	str	r3, [r7, #8]
 8009908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800990a:	2301      	movs	r3, #1
 800990c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800990e:	4b77      	ldr	r3, [pc, #476]	@ (8009aec <HAL_RCC_OscConfig+0x474>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009916:	2b00      	cmp	r3, #0
 8009918:	d118      	bne.n	800994c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800991a:	4b74      	ldr	r3, [pc, #464]	@ (8009aec <HAL_RCC_OscConfig+0x474>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a73      	ldr	r2, [pc, #460]	@ (8009aec <HAL_RCC_OscConfig+0x474>)
 8009920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009926:	f7fe fe4f 	bl	80085c8 <HAL_GetTick>
 800992a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800992c:	e008      	b.n	8009940 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800992e:	f7fe fe4b 	bl	80085c8 <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	2b02      	cmp	r3, #2
 800993a:	d901      	bls.n	8009940 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800993c:	2303      	movs	r3, #3
 800993e:	e10c      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009940:	4b6a      	ldr	r3, [pc, #424]	@ (8009aec <HAL_RCC_OscConfig+0x474>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009948:	2b00      	cmp	r3, #0
 800994a:	d0f0      	beq.n	800992e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d106      	bne.n	8009962 <HAL_RCC_OscConfig+0x2ea>
 8009954:	4b64      	ldr	r3, [pc, #400]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009958:	4a63      	ldr	r2, [pc, #396]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 800995a:	f043 0301 	orr.w	r3, r3, #1
 800995e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009960:	e01c      	b.n	800999c <HAL_RCC_OscConfig+0x324>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	2b05      	cmp	r3, #5
 8009968:	d10c      	bne.n	8009984 <HAL_RCC_OscConfig+0x30c>
 800996a:	4b5f      	ldr	r3, [pc, #380]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 800996c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800996e:	4a5e      	ldr	r2, [pc, #376]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009970:	f043 0304 	orr.w	r3, r3, #4
 8009974:	6713      	str	r3, [r2, #112]	@ 0x70
 8009976:	4b5c      	ldr	r3, [pc, #368]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800997a:	4a5b      	ldr	r2, [pc, #364]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 800997c:	f043 0301 	orr.w	r3, r3, #1
 8009980:	6713      	str	r3, [r2, #112]	@ 0x70
 8009982:	e00b      	b.n	800999c <HAL_RCC_OscConfig+0x324>
 8009984:	4b58      	ldr	r3, [pc, #352]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009988:	4a57      	ldr	r2, [pc, #348]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 800998a:	f023 0301 	bic.w	r3, r3, #1
 800998e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009990:	4b55      	ldr	r3, [pc, #340]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009994:	4a54      	ldr	r2, [pc, #336]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009996:	f023 0304 	bic.w	r3, r3, #4
 800999a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d015      	beq.n	80099d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099a4:	f7fe fe10 	bl	80085c8 <HAL_GetTick>
 80099a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099aa:	e00a      	b.n	80099c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099ac:	f7fe fe0c 	bl	80085c8 <HAL_GetTick>
 80099b0:	4602      	mov	r2, r0
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d901      	bls.n	80099c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80099be:	2303      	movs	r3, #3
 80099c0:	e0cb      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099c2:	4b49      	ldr	r3, [pc, #292]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 80099c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099c6:	f003 0302 	and.w	r3, r3, #2
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d0ee      	beq.n	80099ac <HAL_RCC_OscConfig+0x334>
 80099ce:	e014      	b.n	80099fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099d0:	f7fe fdfa 	bl	80085c8 <HAL_GetTick>
 80099d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099d6:	e00a      	b.n	80099ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099d8:	f7fe fdf6 	bl	80085c8 <HAL_GetTick>
 80099dc:	4602      	mov	r2, r0
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d901      	bls.n	80099ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e0b5      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099ee:	4b3e      	ldr	r3, [pc, #248]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 80099f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099f2:	f003 0302 	and.w	r3, r3, #2
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1ee      	bne.n	80099d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d105      	bne.n	8009a0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a00:	4b39      	ldr	r3, [pc, #228]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a04:	4a38      	ldr	r2, [pc, #224]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009a06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f000 80a1 	beq.w	8009b58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a16:	4b34      	ldr	r3, [pc, #208]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	f003 030c 	and.w	r3, r3, #12
 8009a1e:	2b08      	cmp	r3, #8
 8009a20:	d05c      	beq.n	8009adc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d141      	bne.n	8009aae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a2a:	4b31      	ldr	r3, [pc, #196]	@ (8009af0 <HAL_RCC_OscConfig+0x478>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a30:	f7fe fdca 	bl	80085c8 <HAL_GetTick>
 8009a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a36:	e008      	b.n	8009a4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a38:	f7fe fdc6 	bl	80085c8 <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d901      	bls.n	8009a4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e087      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a4a:	4b27      	ldr	r3, [pc, #156]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1f0      	bne.n	8009a38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	69da      	ldr	r2, [r3, #28]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a64:	019b      	lsls	r3, r3, #6
 8009a66:	431a      	orrs	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a6c:	085b      	lsrs	r3, r3, #1
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	041b      	lsls	r3, r3, #16
 8009a72:	431a      	orrs	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a78:	061b      	lsls	r3, r3, #24
 8009a7a:	491b      	ldr	r1, [pc, #108]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a80:	4b1b      	ldr	r3, [pc, #108]	@ (8009af0 <HAL_RCC_OscConfig+0x478>)
 8009a82:	2201      	movs	r2, #1
 8009a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a86:	f7fe fd9f 	bl	80085c8 <HAL_GetTick>
 8009a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a8c:	e008      	b.n	8009aa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a8e:	f7fe fd9b 	bl	80085c8 <HAL_GetTick>
 8009a92:	4602      	mov	r2, r0
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d901      	bls.n	8009aa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e05c      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009aa0:	4b11      	ldr	r3, [pc, #68]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d0f0      	beq.n	8009a8e <HAL_RCC_OscConfig+0x416>
 8009aac:	e054      	b.n	8009b58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009aae:	4b10      	ldr	r3, [pc, #64]	@ (8009af0 <HAL_RCC_OscConfig+0x478>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ab4:	f7fe fd88 	bl	80085c8 <HAL_GetTick>
 8009ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aba:	e008      	b.n	8009ace <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009abc:	f7fe fd84 	bl	80085c8 <HAL_GetTick>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d901      	bls.n	8009ace <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009aca:	2303      	movs	r3, #3
 8009acc:	e045      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ace:	4b06      	ldr	r3, [pc, #24]	@ (8009ae8 <HAL_RCC_OscConfig+0x470>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1f0      	bne.n	8009abc <HAL_RCC_OscConfig+0x444>
 8009ada:	e03d      	b.n	8009b58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d107      	bne.n	8009af4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e038      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
 8009ae8:	40023800 	.word	0x40023800
 8009aec:	40007000 	.word	0x40007000
 8009af0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009af4:	4b1b      	ldr	r3, [pc, #108]	@ (8009b64 <HAL_RCC_OscConfig+0x4ec>)
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d028      	beq.n	8009b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d121      	bne.n	8009b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d11a      	bne.n	8009b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009b24:	4013      	ands	r3, r2
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009b2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d111      	bne.n	8009b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b3a:	085b      	lsrs	r3, r3, #1
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d107      	bne.n	8009b54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d001      	beq.n	8009b58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e000      	b.n	8009b5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	40023800 	.word	0x40023800

08009b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d101      	bne.n	8009b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e0cc      	b.n	8009d16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b7c:	4b68      	ldr	r3, [pc, #416]	@ (8009d20 <HAL_RCC_ClockConfig+0x1b8>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0307 	and.w	r3, r3, #7
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d90c      	bls.n	8009ba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b8a:	4b65      	ldr	r3, [pc, #404]	@ (8009d20 <HAL_RCC_ClockConfig+0x1b8>)
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	b2d2      	uxtb	r2, r2
 8009b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b92:	4b63      	ldr	r3, [pc, #396]	@ (8009d20 <HAL_RCC_ClockConfig+0x1b8>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d001      	beq.n	8009ba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e0b8      	b.n	8009d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d020      	beq.n	8009bf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d005      	beq.n	8009bc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009bbc:	4b59      	ldr	r3, [pc, #356]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	4a58      	ldr	r2, [pc, #352]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009bc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009bc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0308 	and.w	r3, r3, #8
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d005      	beq.n	8009be0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009bd4:	4b53      	ldr	r3, [pc, #332]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	4a52      	ldr	r2, [pc, #328]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009bda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009bde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009be0:	4b50      	ldr	r3, [pc, #320]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	494d      	ldr	r1, [pc, #308]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d044      	beq.n	8009c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d107      	bne.n	8009c16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c06:	4b47      	ldr	r3, [pc, #284]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d119      	bne.n	8009c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e07f      	b.n	8009d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d003      	beq.n	8009c26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c22:	2b03      	cmp	r3, #3
 8009c24:	d107      	bne.n	8009c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c26:	4b3f      	ldr	r3, [pc, #252]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d109      	bne.n	8009c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e06f      	b.n	8009d16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c36:	4b3b      	ldr	r3, [pc, #236]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 0302 	and.w	r3, r3, #2
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e067      	b.n	8009d16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c46:	4b37      	ldr	r3, [pc, #220]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	f023 0203 	bic.w	r2, r3, #3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	4934      	ldr	r1, [pc, #208]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009c54:	4313      	orrs	r3, r2
 8009c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009c58:	f7fe fcb6 	bl	80085c8 <HAL_GetTick>
 8009c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c5e:	e00a      	b.n	8009c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c60:	f7fe fcb2 	bl	80085c8 <HAL_GetTick>
 8009c64:	4602      	mov	r2, r0
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d901      	bls.n	8009c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e04f      	b.n	8009d16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c76:	4b2b      	ldr	r3, [pc, #172]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	f003 020c 	and.w	r2, r3, #12
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d1eb      	bne.n	8009c60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c88:	4b25      	ldr	r3, [pc, #148]	@ (8009d20 <HAL_RCC_ClockConfig+0x1b8>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 0307 	and.w	r3, r3, #7
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d20c      	bcs.n	8009cb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c96:	4b22      	ldr	r3, [pc, #136]	@ (8009d20 <HAL_RCC_ClockConfig+0x1b8>)
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	b2d2      	uxtb	r2, r2
 8009c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c9e:	4b20      	ldr	r3, [pc, #128]	@ (8009d20 <HAL_RCC_ClockConfig+0x1b8>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0307 	and.w	r3, r3, #7
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d001      	beq.n	8009cb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e032      	b.n	8009d16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 0304 	and.w	r3, r3, #4
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d008      	beq.n	8009cce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009cbc:	4b19      	ldr	r3, [pc, #100]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	4916      	ldr	r1, [pc, #88]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0308 	and.w	r3, r3, #8
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d009      	beq.n	8009cee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009cda:	4b12      	ldr	r3, [pc, #72]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	490e      	ldr	r1, [pc, #56]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009cea:	4313      	orrs	r3, r2
 8009cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009cee:	f000 f821 	bl	8009d34 <HAL_RCC_GetSysClockFreq>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8009d24 <HAL_RCC_ClockConfig+0x1bc>)
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	091b      	lsrs	r3, r3, #4
 8009cfa:	f003 030f 	and.w	r3, r3, #15
 8009cfe:	490a      	ldr	r1, [pc, #40]	@ (8009d28 <HAL_RCC_ClockConfig+0x1c0>)
 8009d00:	5ccb      	ldrb	r3, [r1, r3]
 8009d02:	fa22 f303 	lsr.w	r3, r2, r3
 8009d06:	4a09      	ldr	r2, [pc, #36]	@ (8009d2c <HAL_RCC_ClockConfig+0x1c4>)
 8009d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009d0a:	4b09      	ldr	r3, [pc, #36]	@ (8009d30 <HAL_RCC_ClockConfig+0x1c8>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fe fc16 	bl	8008540 <HAL_InitTick>

  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	40023c00 	.word	0x40023c00
 8009d24:	40023800 	.word	0x40023800
 8009d28:	08012440 	.word	0x08012440
 8009d2c:	200000e0 	.word	0x200000e0
 8009d30:	200000e4 	.word	0x200000e4

08009d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d38:	b094      	sub	sp, #80	@ 0x50
 8009d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d40:	2300      	movs	r3, #0
 8009d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d44:	2300      	movs	r3, #0
 8009d46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d4c:	4b79      	ldr	r3, [pc, #484]	@ (8009f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	f003 030c 	and.w	r3, r3, #12
 8009d54:	2b08      	cmp	r3, #8
 8009d56:	d00d      	beq.n	8009d74 <HAL_RCC_GetSysClockFreq+0x40>
 8009d58:	2b08      	cmp	r3, #8
 8009d5a:	f200 80e1 	bhi.w	8009f20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <HAL_RCC_GetSysClockFreq+0x34>
 8009d62:	2b04      	cmp	r3, #4
 8009d64:	d003      	beq.n	8009d6e <HAL_RCC_GetSysClockFreq+0x3a>
 8009d66:	e0db      	b.n	8009f20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d68:	4b73      	ldr	r3, [pc, #460]	@ (8009f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8009d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009d6c:	e0db      	b.n	8009f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009d6e:	4b73      	ldr	r3, [pc, #460]	@ (8009f3c <HAL_RCC_GetSysClockFreq+0x208>)
 8009d70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009d72:	e0d8      	b.n	8009f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d74:	4b6f      	ldr	r3, [pc, #444]	@ (8009f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d7e:	4b6d      	ldr	r3, [pc, #436]	@ (8009f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d063      	beq.n	8009e52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8009f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	099b      	lsrs	r3, r3, #6
 8009d90:	2200      	movs	r2, #0
 8009d92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d9e:	2300      	movs	r3, #0
 8009da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009da2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009da6:	4622      	mov	r2, r4
 8009da8:	462b      	mov	r3, r5
 8009daa:	f04f 0000 	mov.w	r0, #0
 8009dae:	f04f 0100 	mov.w	r1, #0
 8009db2:	0159      	lsls	r1, r3, #5
 8009db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009db8:	0150      	lsls	r0, r2, #5
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	1a51      	subs	r1, r2, r1
 8009dc2:	6139      	str	r1, [r7, #16]
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8009dca:	617b      	str	r3, [r7, #20]
 8009dcc:	f04f 0200 	mov.w	r2, #0
 8009dd0:	f04f 0300 	mov.w	r3, #0
 8009dd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009dd8:	4659      	mov	r1, fp
 8009dda:	018b      	lsls	r3, r1, #6
 8009ddc:	4651      	mov	r1, sl
 8009dde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009de2:	4651      	mov	r1, sl
 8009de4:	018a      	lsls	r2, r1, #6
 8009de6:	4651      	mov	r1, sl
 8009de8:	ebb2 0801 	subs.w	r8, r2, r1
 8009dec:	4659      	mov	r1, fp
 8009dee:	eb63 0901 	sbc.w	r9, r3, r1
 8009df2:	f04f 0200 	mov.w	r2, #0
 8009df6:	f04f 0300 	mov.w	r3, #0
 8009dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e06:	4690      	mov	r8, r2
 8009e08:	4699      	mov	r9, r3
 8009e0a:	4623      	mov	r3, r4
 8009e0c:	eb18 0303 	adds.w	r3, r8, r3
 8009e10:	60bb      	str	r3, [r7, #8]
 8009e12:	462b      	mov	r3, r5
 8009e14:	eb49 0303 	adc.w	r3, r9, r3
 8009e18:	60fb      	str	r3, [r7, #12]
 8009e1a:	f04f 0200 	mov.w	r2, #0
 8009e1e:	f04f 0300 	mov.w	r3, #0
 8009e22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009e26:	4629      	mov	r1, r5
 8009e28:	024b      	lsls	r3, r1, #9
 8009e2a:	4621      	mov	r1, r4
 8009e2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009e30:	4621      	mov	r1, r4
 8009e32:	024a      	lsls	r2, r1, #9
 8009e34:	4610      	mov	r0, r2
 8009e36:	4619      	mov	r1, r3
 8009e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009e44:	f7f6 ff20 	bl	8000c88 <__aeabi_uldivmod>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e50:	e058      	b.n	8009f04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e52:	4b38      	ldr	r3, [pc, #224]	@ (8009f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	099b      	lsrs	r3, r3, #6
 8009e58:	2200      	movs	r2, #0
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009e62:	623b      	str	r3, [r7, #32]
 8009e64:	2300      	movs	r3, #0
 8009e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009e6c:	4642      	mov	r2, r8
 8009e6e:	464b      	mov	r3, r9
 8009e70:	f04f 0000 	mov.w	r0, #0
 8009e74:	f04f 0100 	mov.w	r1, #0
 8009e78:	0159      	lsls	r1, r3, #5
 8009e7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e7e:	0150      	lsls	r0, r2, #5
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	4641      	mov	r1, r8
 8009e86:	ebb2 0a01 	subs.w	sl, r2, r1
 8009e8a:	4649      	mov	r1, r9
 8009e8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009e90:	f04f 0200 	mov.w	r2, #0
 8009e94:	f04f 0300 	mov.w	r3, #0
 8009e98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009e9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009ea0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009ea4:	ebb2 040a 	subs.w	r4, r2, sl
 8009ea8:	eb63 050b 	sbc.w	r5, r3, fp
 8009eac:	f04f 0200 	mov.w	r2, #0
 8009eb0:	f04f 0300 	mov.w	r3, #0
 8009eb4:	00eb      	lsls	r3, r5, #3
 8009eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009eba:	00e2      	lsls	r2, r4, #3
 8009ebc:	4614      	mov	r4, r2
 8009ebe:	461d      	mov	r5, r3
 8009ec0:	4643      	mov	r3, r8
 8009ec2:	18e3      	adds	r3, r4, r3
 8009ec4:	603b      	str	r3, [r7, #0]
 8009ec6:	464b      	mov	r3, r9
 8009ec8:	eb45 0303 	adc.w	r3, r5, r3
 8009ecc:	607b      	str	r3, [r7, #4]
 8009ece:	f04f 0200 	mov.w	r2, #0
 8009ed2:	f04f 0300 	mov.w	r3, #0
 8009ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009eda:	4629      	mov	r1, r5
 8009edc:	028b      	lsls	r3, r1, #10
 8009ede:	4621      	mov	r1, r4
 8009ee0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	028a      	lsls	r2, r1, #10
 8009ee8:	4610      	mov	r0, r2
 8009eea:	4619      	mov	r1, r3
 8009eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009eee:	2200      	movs	r2, #0
 8009ef0:	61bb      	str	r3, [r7, #24]
 8009ef2:	61fa      	str	r2, [r7, #28]
 8009ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ef8:	f7f6 fec6 	bl	8000c88 <__aeabi_uldivmod>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4613      	mov	r3, r2
 8009f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009f04:	4b0b      	ldr	r3, [pc, #44]	@ (8009f34 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	0c1b      	lsrs	r3, r3, #16
 8009f0a:	f003 0303 	and.w	r3, r3, #3
 8009f0e:	3301      	adds	r3, #1
 8009f10:	005b      	lsls	r3, r3, #1
 8009f12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8009f14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009f1e:	e002      	b.n	8009f26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009f20:	4b05      	ldr	r3, [pc, #20]	@ (8009f38 <HAL_RCC_GetSysClockFreq+0x204>)
 8009f22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3750      	adds	r7, #80	@ 0x50
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f32:	bf00      	nop
 8009f34:	40023800 	.word	0x40023800
 8009f38:	00f42400 	.word	0x00f42400
 8009f3c:	007a1200 	.word	0x007a1200

08009f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f40:	b480      	push	{r7}
 8009f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f44:	4b03      	ldr	r3, [pc, #12]	@ (8009f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8009f46:	681b      	ldr	r3, [r3, #0]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	200000e0 	.word	0x200000e0

08009f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009f5c:	f7ff fff0 	bl	8009f40 <HAL_RCC_GetHCLKFreq>
 8009f60:	4602      	mov	r2, r0
 8009f62:	4b05      	ldr	r3, [pc, #20]	@ (8009f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	0a9b      	lsrs	r3, r3, #10
 8009f68:	f003 0307 	and.w	r3, r3, #7
 8009f6c:	4903      	ldr	r1, [pc, #12]	@ (8009f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f6e:	5ccb      	ldrb	r3, [r1, r3]
 8009f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	40023800 	.word	0x40023800
 8009f7c:	08012450 	.word	0x08012450

08009f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009f84:	f7ff ffdc 	bl	8009f40 <HAL_RCC_GetHCLKFreq>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	4b05      	ldr	r3, [pc, #20]	@ (8009fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	0b5b      	lsrs	r3, r3, #13
 8009f90:	f003 0307 	and.w	r3, r3, #7
 8009f94:	4903      	ldr	r1, [pc, #12]	@ (8009fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f96:	5ccb      	ldrb	r3, [r1, r3]
 8009f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	40023800 	.word	0x40023800
 8009fa4:	08012450 	.word	0x08012450

08009fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d101      	bne.n	8009fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e041      	b.n	800a03e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d106      	bne.n	8009fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7fd ff30 	bl	8007e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	f000 fc48 	bl	800a87c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b082      	sub	sp, #8
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e041      	b.n	800a0dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b00      	cmp	r3, #0
 800a062:	d106      	bne.n	800a072 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f839 	bl	800a0e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2202      	movs	r2, #2
 800a076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	3304      	adds	r3, #4
 800a082:	4619      	mov	r1, r3
 800a084:	4610      	mov	r0, r2
 800a086:	f000 fbf9 	bl	800a87c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d109      	bne.n	800a120 <HAL_TIM_PWM_Start_IT+0x28>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b01      	cmp	r3, #1
 800a116:	bf14      	ite	ne
 800a118:	2301      	movne	r3, #1
 800a11a:	2300      	moveq	r3, #0
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	e022      	b.n	800a166 <HAL_TIM_PWM_Start_IT+0x6e>
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	2b04      	cmp	r3, #4
 800a124:	d109      	bne.n	800a13a <HAL_TIM_PWM_Start_IT+0x42>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	2b01      	cmp	r3, #1
 800a130:	bf14      	ite	ne
 800a132:	2301      	movne	r3, #1
 800a134:	2300      	moveq	r3, #0
 800a136:	b2db      	uxtb	r3, r3
 800a138:	e015      	b.n	800a166 <HAL_TIM_PWM_Start_IT+0x6e>
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	2b08      	cmp	r3, #8
 800a13e:	d109      	bne.n	800a154 <HAL_TIM_PWM_Start_IT+0x5c>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a146:	b2db      	uxtb	r3, r3
 800a148:	2b01      	cmp	r3, #1
 800a14a:	bf14      	ite	ne
 800a14c:	2301      	movne	r3, #1
 800a14e:	2300      	moveq	r3, #0
 800a150:	b2db      	uxtb	r3, r3
 800a152:	e008      	b.n	800a166 <HAL_TIM_PWM_Start_IT+0x6e>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	bf14      	ite	ne
 800a160:	2301      	movne	r3, #1
 800a162:	2300      	moveq	r3, #0
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e0c7      	b.n	800a2fe <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d104      	bne.n	800a17e <HAL_TIM_PWM_Start_IT+0x86>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2202      	movs	r2, #2
 800a178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a17c:	e013      	b.n	800a1a6 <HAL_TIM_PWM_Start_IT+0xae>
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	2b04      	cmp	r3, #4
 800a182:	d104      	bne.n	800a18e <HAL_TIM_PWM_Start_IT+0x96>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a18c:	e00b      	b.n	800a1a6 <HAL_TIM_PWM_Start_IT+0xae>
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	2b08      	cmp	r3, #8
 800a192:	d104      	bne.n	800a19e <HAL_TIM_PWM_Start_IT+0xa6>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2202      	movs	r2, #2
 800a198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a19c:	e003      	b.n	800a1a6 <HAL_TIM_PWM_Start_IT+0xae>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2202      	movs	r2, #2
 800a1a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b0c      	cmp	r3, #12
 800a1aa:	d841      	bhi.n	800a230 <HAL_TIM_PWM_Start_IT+0x138>
 800a1ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b4 <HAL_TIM_PWM_Start_IT+0xbc>)
 800a1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b2:	bf00      	nop
 800a1b4:	0800a1e9 	.word	0x0800a1e9
 800a1b8:	0800a231 	.word	0x0800a231
 800a1bc:	0800a231 	.word	0x0800a231
 800a1c0:	0800a231 	.word	0x0800a231
 800a1c4:	0800a1fb 	.word	0x0800a1fb
 800a1c8:	0800a231 	.word	0x0800a231
 800a1cc:	0800a231 	.word	0x0800a231
 800a1d0:	0800a231 	.word	0x0800a231
 800a1d4:	0800a20d 	.word	0x0800a20d
 800a1d8:	0800a231 	.word	0x0800a231
 800a1dc:	0800a231 	.word	0x0800a231
 800a1e0:	0800a231 	.word	0x0800a231
 800a1e4:	0800a21f 	.word	0x0800a21f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68da      	ldr	r2, [r3, #12]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f042 0202 	orr.w	r2, r2, #2
 800a1f6:	60da      	str	r2, [r3, #12]
      break;
 800a1f8:	e01d      	b.n	800a236 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68da      	ldr	r2, [r3, #12]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f042 0204 	orr.w	r2, r2, #4
 800a208:	60da      	str	r2, [r3, #12]
      break;
 800a20a:	e014      	b.n	800a236 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68da      	ldr	r2, [r3, #12]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f042 0208 	orr.w	r2, r2, #8
 800a21a:	60da      	str	r2, [r3, #12]
      break;
 800a21c:	e00b      	b.n	800a236 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68da      	ldr	r2, [r3, #12]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f042 0210 	orr.w	r2, r2, #16
 800a22c:	60da      	str	r2, [r3, #12]
      break;
 800a22e:	e002      	b.n	800a236 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	73fb      	strb	r3, [r7, #15]
      break;
 800a234:	bf00      	nop
  }

  if (status == HAL_OK)
 800a236:	7bfb      	ldrb	r3, [r7, #15]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d15f      	bne.n	800a2fc <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2201      	movs	r2, #1
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	4618      	mov	r0, r3
 800a246:	f000 fe0f 	bl	800ae68 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a2e      	ldr	r2, [pc, #184]	@ (800a308 <HAL_TIM_PWM_Start_IT+0x210>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d004      	beq.n	800a25e <HAL_TIM_PWM_Start_IT+0x166>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a2c      	ldr	r2, [pc, #176]	@ (800a30c <HAL_TIM_PWM_Start_IT+0x214>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d101      	bne.n	800a262 <HAL_TIM_PWM_Start_IT+0x16a>
 800a25e:	2301      	movs	r3, #1
 800a260:	e000      	b.n	800a264 <HAL_TIM_PWM_Start_IT+0x16c>
 800a262:	2300      	movs	r3, #0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d007      	beq.n	800a278 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a276:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a22      	ldr	r2, [pc, #136]	@ (800a308 <HAL_TIM_PWM_Start_IT+0x210>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d022      	beq.n	800a2c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a28a:	d01d      	beq.n	800a2c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a1f      	ldr	r2, [pc, #124]	@ (800a310 <HAL_TIM_PWM_Start_IT+0x218>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d018      	beq.n	800a2c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a1e      	ldr	r2, [pc, #120]	@ (800a314 <HAL_TIM_PWM_Start_IT+0x21c>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d013      	beq.n	800a2c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a1c      	ldr	r2, [pc, #112]	@ (800a318 <HAL_TIM_PWM_Start_IT+0x220>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d00e      	beq.n	800a2c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a17      	ldr	r2, [pc, #92]	@ (800a30c <HAL_TIM_PWM_Start_IT+0x214>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d009      	beq.n	800a2c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a18      	ldr	r2, [pc, #96]	@ (800a31c <HAL_TIM_PWM_Start_IT+0x224>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d004      	beq.n	800a2c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a17      	ldr	r2, [pc, #92]	@ (800a320 <HAL_TIM_PWM_Start_IT+0x228>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d111      	bne.n	800a2ec <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	f003 0307 	and.w	r3, r3, #7
 800a2d2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	2b06      	cmp	r3, #6
 800a2d8:	d010      	beq.n	800a2fc <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f042 0201 	orr.w	r2, r2, #1
 800a2e8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ea:	e007      	b.n	800a2fc <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f042 0201 	orr.w	r2, r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	40010000 	.word	0x40010000
 800a30c:	40010400 	.word	0x40010400
 800a310:	40000400 	.word	0x40000400
 800a314:	40000800 	.word	0x40000800
 800a318:	40000c00 	.word	0x40000c00
 800a31c:	40014000 	.word	0x40014000
 800a320:	40001800 	.word	0x40001800

0800a324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	f003 0302 	and.w	r3, r3, #2
 800a342:	2b00      	cmp	r3, #0
 800a344:	d020      	beq.n	800a388 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f003 0302 	and.w	r3, r3, #2
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d01b      	beq.n	800a388 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f06f 0202 	mvn.w	r2, #2
 800a358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	f003 0303 	and.w	r3, r3, #3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fa65 	bl	800a83e <HAL_TIM_IC_CaptureCallback>
 800a374:	e005      	b.n	800a382 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fa57 	bl	800a82a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fa68 	bl	800a852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	f003 0304 	and.w	r3, r3, #4
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d020      	beq.n	800a3d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f003 0304 	and.w	r3, r3, #4
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d01b      	beq.n	800a3d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f06f 0204 	mvn.w	r2, #4
 800a3a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2202      	movs	r2, #2
 800a3aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	699b      	ldr	r3, [r3, #24]
 800a3b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fa3f 	bl	800a83e <HAL_TIM_IC_CaptureCallback>
 800a3c0:	e005      	b.n	800a3ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fa31 	bl	800a82a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 fa42 	bl	800a852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	f003 0308 	and.w	r3, r3, #8
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d020      	beq.n	800a420 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f003 0308 	and.w	r3, r3, #8
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d01b      	beq.n	800a420 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f06f 0208 	mvn.w	r2, #8
 800a3f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2204      	movs	r2, #4
 800a3f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	f003 0303 	and.w	r3, r3, #3
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fa19 	bl	800a83e <HAL_TIM_IC_CaptureCallback>
 800a40c:	e005      	b.n	800a41a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fa0b 	bl	800a82a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 fa1c 	bl	800a852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f003 0310 	and.w	r3, r3, #16
 800a426:	2b00      	cmp	r3, #0
 800a428:	d020      	beq.n	800a46c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f003 0310 	and.w	r3, r3, #16
 800a430:	2b00      	cmp	r3, #0
 800a432:	d01b      	beq.n	800a46c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f06f 0210 	mvn.w	r2, #16
 800a43c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2208      	movs	r2, #8
 800a442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 f9f3 	bl	800a83e <HAL_TIM_IC_CaptureCallback>
 800a458:	e005      	b.n	800a466 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f9e5 	bl	800a82a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f9f6 	bl	800a852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00c      	beq.n	800a490 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d007      	beq.n	800a490 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f06f 0201 	mvn.w	r2, #1
 800a488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f9c3 	bl	800a816 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00c      	beq.n	800a4b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d007      	beq.n	800a4b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a4ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fdd8 	bl	800b064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00c      	beq.n	800a4d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d007      	beq.n	800a4d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a4d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 f9c7 	bl	800a866 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	f003 0320 	and.w	r3, r3, #32
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00c      	beq.n	800a4fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f003 0320 	and.w	r3, r3, #32
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d007      	beq.n	800a4fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f06f 0220 	mvn.w	r2, #32
 800a4f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fdaa 	bl	800b050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4fc:	bf00      	nop
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d101      	bne.n	800a522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a51e:	2302      	movs	r3, #2
 800a520:	e0ae      	b.n	800a680 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2201      	movs	r2, #1
 800a526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2b0c      	cmp	r3, #12
 800a52e:	f200 809f 	bhi.w	800a670 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a532:	a201      	add	r2, pc, #4	@ (adr r2, 800a538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a538:	0800a56d 	.word	0x0800a56d
 800a53c:	0800a671 	.word	0x0800a671
 800a540:	0800a671 	.word	0x0800a671
 800a544:	0800a671 	.word	0x0800a671
 800a548:	0800a5ad 	.word	0x0800a5ad
 800a54c:	0800a671 	.word	0x0800a671
 800a550:	0800a671 	.word	0x0800a671
 800a554:	0800a671 	.word	0x0800a671
 800a558:	0800a5ef 	.word	0x0800a5ef
 800a55c:	0800a671 	.word	0x0800a671
 800a560:	0800a671 	.word	0x0800a671
 800a564:	0800a671 	.word	0x0800a671
 800a568:	0800a62f 	.word	0x0800a62f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68b9      	ldr	r1, [r7, #8]
 800a572:	4618      	mov	r0, r3
 800a574:	f000 fa2e 	bl	800a9d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	699a      	ldr	r2, [r3, #24]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f042 0208 	orr.w	r2, r2, #8
 800a586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	699a      	ldr	r2, [r3, #24]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f022 0204 	bic.w	r2, r2, #4
 800a596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6999      	ldr	r1, [r3, #24]
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	691a      	ldr	r2, [r3, #16]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	619a      	str	r2, [r3, #24]
      break;
 800a5aa:	e064      	b.n	800a676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68b9      	ldr	r1, [r7, #8]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 fa7e 	bl	800aab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	699a      	ldr	r2, [r3, #24]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	699a      	ldr	r2, [r3, #24]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a5d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6999      	ldr	r1, [r3, #24]
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	021a      	lsls	r2, r3, #8
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	430a      	orrs	r2, r1
 800a5ea:	619a      	str	r2, [r3, #24]
      break;
 800a5ec:	e043      	b.n	800a676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68b9      	ldr	r1, [r7, #8]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f000 fad3 	bl	800aba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	69da      	ldr	r2, [r3, #28]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f042 0208 	orr.w	r2, r2, #8
 800a608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	69da      	ldr	r2, [r3, #28]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f022 0204 	bic.w	r2, r2, #4
 800a618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	69d9      	ldr	r1, [r3, #28]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	691a      	ldr	r2, [r3, #16]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	430a      	orrs	r2, r1
 800a62a:	61da      	str	r2, [r3, #28]
      break;
 800a62c:	e023      	b.n	800a676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68b9      	ldr	r1, [r7, #8]
 800a634:	4618      	mov	r0, r3
 800a636:	f000 fb27 	bl	800ac88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	69da      	ldr	r2, [r3, #28]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	69da      	ldr	r2, [r3, #28]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	69d9      	ldr	r1, [r3, #28]
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	021a      	lsls	r2, r3, #8
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	61da      	str	r2, [r3, #28]
      break;
 800a66e:	e002      	b.n	800a676 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	75fb      	strb	r3, [r7, #23]
      break;
 800a674:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a67e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d101      	bne.n	800a6a4 <HAL_TIM_ConfigClockSource+0x1c>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	e0b4      	b.n	800a80e <HAL_TIM_ConfigClockSource+0x186>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a6c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a6ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6dc:	d03e      	beq.n	800a75c <HAL_TIM_ConfigClockSource+0xd4>
 800a6de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6e2:	f200 8087 	bhi.w	800a7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a6e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6ea:	f000 8086 	beq.w	800a7fa <HAL_TIM_ConfigClockSource+0x172>
 800a6ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6f2:	d87f      	bhi.n	800a7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a6f4:	2b70      	cmp	r3, #112	@ 0x70
 800a6f6:	d01a      	beq.n	800a72e <HAL_TIM_ConfigClockSource+0xa6>
 800a6f8:	2b70      	cmp	r3, #112	@ 0x70
 800a6fa:	d87b      	bhi.n	800a7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a6fc:	2b60      	cmp	r3, #96	@ 0x60
 800a6fe:	d050      	beq.n	800a7a2 <HAL_TIM_ConfigClockSource+0x11a>
 800a700:	2b60      	cmp	r3, #96	@ 0x60
 800a702:	d877      	bhi.n	800a7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a704:	2b50      	cmp	r3, #80	@ 0x50
 800a706:	d03c      	beq.n	800a782 <HAL_TIM_ConfigClockSource+0xfa>
 800a708:	2b50      	cmp	r3, #80	@ 0x50
 800a70a:	d873      	bhi.n	800a7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a70c:	2b40      	cmp	r3, #64	@ 0x40
 800a70e:	d058      	beq.n	800a7c2 <HAL_TIM_ConfigClockSource+0x13a>
 800a710:	2b40      	cmp	r3, #64	@ 0x40
 800a712:	d86f      	bhi.n	800a7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a714:	2b30      	cmp	r3, #48	@ 0x30
 800a716:	d064      	beq.n	800a7e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a718:	2b30      	cmp	r3, #48	@ 0x30
 800a71a:	d86b      	bhi.n	800a7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a71c:	2b20      	cmp	r3, #32
 800a71e:	d060      	beq.n	800a7e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a720:	2b20      	cmp	r3, #32
 800a722:	d867      	bhi.n	800a7f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a724:	2b00      	cmp	r3, #0
 800a726:	d05c      	beq.n	800a7e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a728:	2b10      	cmp	r3, #16
 800a72a:	d05a      	beq.n	800a7e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a72c:	e062      	b.n	800a7f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a73e:	f000 fb73 	bl	800ae28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	609a      	str	r2, [r3, #8]
      break;
 800a75a:	e04f      	b.n	800a7fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a76c:	f000 fb5c 	bl	800ae28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	689a      	ldr	r2, [r3, #8]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a77e:	609a      	str	r2, [r3, #8]
      break;
 800a780:	e03c      	b.n	800a7fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a78e:	461a      	mov	r2, r3
 800a790:	f000 fad0 	bl	800ad34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2150      	movs	r1, #80	@ 0x50
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 fb29 	bl	800adf2 <TIM_ITRx_SetConfig>
      break;
 800a7a0:	e02c      	b.n	800a7fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f000 faef 	bl	800ad92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2160      	movs	r1, #96	@ 0x60
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 fb19 	bl	800adf2 <TIM_ITRx_SetConfig>
      break;
 800a7c0:	e01c      	b.n	800a7fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	f000 fab0 	bl	800ad34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2140      	movs	r1, #64	@ 0x40
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f000 fb09 	bl	800adf2 <TIM_ITRx_SetConfig>
      break;
 800a7e0:	e00c      	b.n	800a7fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	4610      	mov	r0, r2
 800a7ee:	f000 fb00 	bl	800adf2 <TIM_ITRx_SetConfig>
      break;
 800a7f2:	e003      	b.n	800a7fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a7f8:	e000      	b.n	800a7fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a7fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a832:	bf00      	nop
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a83e:	b480      	push	{r7}
 800a840:	b083      	sub	sp, #12
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a846:	bf00      	nop
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a852:	b480      	push	{r7}
 800a854:	b083      	sub	sp, #12
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a85a:	bf00      	nop
 800a85c:	370c      	adds	r7, #12
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a86e:	bf00      	nop
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
	...

0800a87c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4a46      	ldr	r2, [pc, #280]	@ (800a9a8 <TIM_Base_SetConfig+0x12c>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d013      	beq.n	800a8bc <TIM_Base_SetConfig+0x40>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a89a:	d00f      	beq.n	800a8bc <TIM_Base_SetConfig+0x40>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a43      	ldr	r2, [pc, #268]	@ (800a9ac <TIM_Base_SetConfig+0x130>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d00b      	beq.n	800a8bc <TIM_Base_SetConfig+0x40>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a42      	ldr	r2, [pc, #264]	@ (800a9b0 <TIM_Base_SetConfig+0x134>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d007      	beq.n	800a8bc <TIM_Base_SetConfig+0x40>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4a41      	ldr	r2, [pc, #260]	@ (800a9b4 <TIM_Base_SetConfig+0x138>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d003      	beq.n	800a8bc <TIM_Base_SetConfig+0x40>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a40      	ldr	r2, [pc, #256]	@ (800a9b8 <TIM_Base_SetConfig+0x13c>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d108      	bne.n	800a8ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a35      	ldr	r2, [pc, #212]	@ (800a9a8 <TIM_Base_SetConfig+0x12c>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d02b      	beq.n	800a92e <TIM_Base_SetConfig+0xb2>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8dc:	d027      	beq.n	800a92e <TIM_Base_SetConfig+0xb2>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a32      	ldr	r2, [pc, #200]	@ (800a9ac <TIM_Base_SetConfig+0x130>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d023      	beq.n	800a92e <TIM_Base_SetConfig+0xb2>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a31      	ldr	r2, [pc, #196]	@ (800a9b0 <TIM_Base_SetConfig+0x134>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d01f      	beq.n	800a92e <TIM_Base_SetConfig+0xb2>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a30      	ldr	r2, [pc, #192]	@ (800a9b4 <TIM_Base_SetConfig+0x138>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d01b      	beq.n	800a92e <TIM_Base_SetConfig+0xb2>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a2f      	ldr	r2, [pc, #188]	@ (800a9b8 <TIM_Base_SetConfig+0x13c>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d017      	beq.n	800a92e <TIM_Base_SetConfig+0xb2>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a2e      	ldr	r2, [pc, #184]	@ (800a9bc <TIM_Base_SetConfig+0x140>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d013      	beq.n	800a92e <TIM_Base_SetConfig+0xb2>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a2d      	ldr	r2, [pc, #180]	@ (800a9c0 <TIM_Base_SetConfig+0x144>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d00f      	beq.n	800a92e <TIM_Base_SetConfig+0xb2>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a2c      	ldr	r2, [pc, #176]	@ (800a9c4 <TIM_Base_SetConfig+0x148>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d00b      	beq.n	800a92e <TIM_Base_SetConfig+0xb2>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a2b      	ldr	r2, [pc, #172]	@ (800a9c8 <TIM_Base_SetConfig+0x14c>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d007      	beq.n	800a92e <TIM_Base_SetConfig+0xb2>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a2a      	ldr	r2, [pc, #168]	@ (800a9cc <TIM_Base_SetConfig+0x150>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d003      	beq.n	800a92e <TIM_Base_SetConfig+0xb2>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a29      	ldr	r2, [pc, #164]	@ (800a9d0 <TIM_Base_SetConfig+0x154>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d108      	bne.n	800a940 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	689a      	ldr	r2, [r3, #8]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a10      	ldr	r2, [pc, #64]	@ (800a9a8 <TIM_Base_SetConfig+0x12c>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d003      	beq.n	800a974 <TIM_Base_SetConfig+0xf8>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a12      	ldr	r2, [pc, #72]	@ (800a9b8 <TIM_Base_SetConfig+0x13c>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d103      	bne.n	800a97c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	691a      	ldr	r2, [r3, #16]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d105      	bne.n	800a99a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	f023 0201 	bic.w	r2, r3, #1
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	611a      	str	r2, [r3, #16]
  }
}
 800a99a:	bf00      	nop
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	40010000 	.word	0x40010000
 800a9ac:	40000400 	.word	0x40000400
 800a9b0:	40000800 	.word	0x40000800
 800a9b4:	40000c00 	.word	0x40000c00
 800a9b8:	40010400 	.word	0x40010400
 800a9bc:	40014000 	.word	0x40014000
 800a9c0:	40014400 	.word	0x40014400
 800a9c4:	40014800 	.word	0x40014800
 800a9c8:	40001800 	.word	0x40001800
 800a9cc:	40001c00 	.word	0x40001c00
 800a9d0:	40002000 	.word	0x40002000

0800a9d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b087      	sub	sp, #28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a1b      	ldr	r3, [r3, #32]
 800a9e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a1b      	ldr	r3, [r3, #32]
 800a9e8:	f023 0201 	bic.w	r2, r3, #1
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f023 0303 	bic.w	r3, r3, #3
 800aa0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f023 0302 	bic.w	r3, r3, #2
 800aa1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a20      	ldr	r2, [pc, #128]	@ (800aaac <TIM_OC1_SetConfig+0xd8>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d003      	beq.n	800aa38 <TIM_OC1_SetConfig+0x64>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a1f      	ldr	r2, [pc, #124]	@ (800aab0 <TIM_OC1_SetConfig+0xdc>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d10c      	bne.n	800aa52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	f023 0308 	bic.w	r3, r3, #8
 800aa3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f023 0304 	bic.w	r3, r3, #4
 800aa50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a15      	ldr	r2, [pc, #84]	@ (800aaac <TIM_OC1_SetConfig+0xd8>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d003      	beq.n	800aa62 <TIM_OC1_SetConfig+0x8e>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a14      	ldr	r2, [pc, #80]	@ (800aab0 <TIM_OC1_SetConfig+0xdc>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d111      	bne.n	800aa86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aa70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	695b      	ldr	r3, [r3, #20]
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	693a      	ldr	r2, [r7, #16]
 800aa8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	685a      	ldr	r2, [r3, #4]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	621a      	str	r2, [r3, #32]
}
 800aaa0:	bf00      	nop
 800aaa2:	371c      	adds	r7, #28
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	40010000 	.word	0x40010000
 800aab0:	40010400 	.word	0x40010400

0800aab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b087      	sub	sp, #28
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6a1b      	ldr	r3, [r3, #32]
 800aac8:	f023 0210 	bic.w	r2, r3, #16
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aaea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	021b      	lsls	r3, r3, #8
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	f023 0320 	bic.w	r3, r3, #32
 800aafe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	011b      	lsls	r3, r3, #4
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a22      	ldr	r2, [pc, #136]	@ (800ab98 <TIM_OC2_SetConfig+0xe4>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d003      	beq.n	800ab1c <TIM_OC2_SetConfig+0x68>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a21      	ldr	r2, [pc, #132]	@ (800ab9c <TIM_OC2_SetConfig+0xe8>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d10d      	bne.n	800ab38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	011b      	lsls	r3, r3, #4
 800ab2a:	697a      	ldr	r2, [r7, #20]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a17      	ldr	r2, [pc, #92]	@ (800ab98 <TIM_OC2_SetConfig+0xe4>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d003      	beq.n	800ab48 <TIM_OC2_SetConfig+0x94>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a16      	ldr	r2, [pc, #88]	@ (800ab9c <TIM_OC2_SetConfig+0xe8>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d113      	bne.n	800ab70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ab4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ab56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	695b      	ldr	r3, [r3, #20]
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	693a      	ldr	r2, [r7, #16]
 800ab74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	685a      	ldr	r2, [r3, #4]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	697a      	ldr	r2, [r7, #20]
 800ab88:	621a      	str	r2, [r3, #32]
}
 800ab8a:	bf00      	nop
 800ab8c:	371c      	adds	r7, #28
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	40010000 	.word	0x40010000
 800ab9c:	40010400 	.word	0x40010400

0800aba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b087      	sub	sp, #28
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6a1b      	ldr	r3, [r3, #32]
 800abb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	69db      	ldr	r3, [r3, #28]
 800abc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f023 0303 	bic.w	r3, r3, #3
 800abd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	4313      	orrs	r3, r2
 800abe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800abe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	021b      	lsls	r3, r3, #8
 800abf0:	697a      	ldr	r2, [r7, #20]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a21      	ldr	r2, [pc, #132]	@ (800ac80 <TIM_OC3_SetConfig+0xe0>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d003      	beq.n	800ac06 <TIM_OC3_SetConfig+0x66>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a20      	ldr	r2, [pc, #128]	@ (800ac84 <TIM_OC3_SetConfig+0xe4>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d10d      	bne.n	800ac22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ac0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	021b      	lsls	r3, r3, #8
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ac20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a16      	ldr	r2, [pc, #88]	@ (800ac80 <TIM_OC3_SetConfig+0xe0>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d003      	beq.n	800ac32 <TIM_OC3_SetConfig+0x92>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a15      	ldr	r2, [pc, #84]	@ (800ac84 <TIM_OC3_SetConfig+0xe4>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d113      	bne.n	800ac5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ac40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	011b      	lsls	r3, r3, #4
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	011b      	lsls	r3, r3, #4
 800ac54:	693a      	ldr	r2, [r7, #16]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	685a      	ldr	r2, [r3, #4]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	697a      	ldr	r2, [r7, #20]
 800ac72:	621a      	str	r2, [r3, #32]
}
 800ac74:	bf00      	nop
 800ac76:	371c      	adds	r7, #28
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	40010000 	.word	0x40010000
 800ac84:	40010400 	.word	0x40010400

0800ac88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b087      	sub	sp, #28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a1b      	ldr	r3, [r3, #32]
 800ac96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6a1b      	ldr	r3, [r3, #32]
 800ac9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	69db      	ldr	r3, [r3, #28]
 800acae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	021b      	lsls	r3, r3, #8
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	4313      	orrs	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800acd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	031b      	lsls	r3, r3, #12
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	4313      	orrs	r3, r2
 800acde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4a12      	ldr	r2, [pc, #72]	@ (800ad2c <TIM_OC4_SetConfig+0xa4>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d003      	beq.n	800acf0 <TIM_OC4_SetConfig+0x68>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4a11      	ldr	r2, [pc, #68]	@ (800ad30 <TIM_OC4_SetConfig+0xa8>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d109      	bne.n	800ad04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800acf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	019b      	lsls	r3, r3, #6
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	697a      	ldr	r2, [r7, #20]
 800ad08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	685a      	ldr	r2, [r3, #4]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	693a      	ldr	r2, [r7, #16]
 800ad1c:	621a      	str	r2, [r3, #32]
}
 800ad1e:	bf00      	nop
 800ad20:	371c      	adds	r7, #28
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	40010000 	.word	0x40010000
 800ad30:	40010400 	.word	0x40010400

0800ad34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b087      	sub	sp, #28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6a1b      	ldr	r3, [r3, #32]
 800ad44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	f023 0201 	bic.w	r2, r3, #1
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	699b      	ldr	r3, [r3, #24]
 800ad56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	011b      	lsls	r3, r3, #4
 800ad64:	693a      	ldr	r2, [r7, #16]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f023 030a 	bic.w	r3, r3, #10
 800ad70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	621a      	str	r2, [r3, #32]
}
 800ad86:	bf00      	nop
 800ad88:	371c      	adds	r7, #28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b087      	sub	sp, #28
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	60f8      	str	r0, [r7, #12]
 800ad9a:	60b9      	str	r1, [r7, #8]
 800ad9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6a1b      	ldr	r3, [r3, #32]
 800ada2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6a1b      	ldr	r3, [r3, #32]
 800ada8:	f023 0210 	bic.w	r2, r3, #16
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	699b      	ldr	r3, [r3, #24]
 800adb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800adbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	031b      	lsls	r3, r3, #12
 800adc2:	693a      	ldr	r2, [r7, #16]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800adce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	011b      	lsls	r3, r3, #4
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	4313      	orrs	r3, r2
 800add8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	697a      	ldr	r2, [r7, #20]
 800ade4:	621a      	str	r2, [r3, #32]
}
 800ade6:	bf00      	nop
 800ade8:	371c      	adds	r7, #28
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr

0800adf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800adf2:	b480      	push	{r7}
 800adf4:	b085      	sub	sp, #20
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae0a:	683a      	ldr	r2, [r7, #0]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	f043 0307 	orr.w	r3, r3, #7
 800ae14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	609a      	str	r2, [r3, #8]
}
 800ae1c:	bf00      	nop
 800ae1e:	3714      	adds	r7, #20
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b087      	sub	sp, #28
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
 800ae34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	021a      	lsls	r2, r3, #8
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	431a      	orrs	r2, r3
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	697a      	ldr	r2, [r7, #20]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	697a      	ldr	r2, [r7, #20]
 800ae5a:	609a      	str	r2, [r3, #8]
}
 800ae5c:	bf00      	nop
 800ae5e:	371c      	adds	r7, #28
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b087      	sub	sp, #28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	f003 031f 	and.w	r3, r3, #31
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6a1a      	ldr	r2, [r3, #32]
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	43db      	mvns	r3, r3
 800ae8a:	401a      	ands	r2, r3
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6a1a      	ldr	r2, [r3, #32]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	f003 031f 	and.w	r3, r3, #31
 800ae9a:	6879      	ldr	r1, [r7, #4]
 800ae9c:	fa01 f303 	lsl.w	r3, r1, r3
 800aea0:	431a      	orrs	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	621a      	str	r2, [r3, #32]
}
 800aea6:	bf00      	nop
 800aea8:	371c      	adds	r7, #28
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
	...

0800aeb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d101      	bne.n	800aecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aec8:	2302      	movs	r3, #2
 800aeca:	e05a      	b.n	800af82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2202      	movs	r2, #2
 800aed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a21      	ldr	r2, [pc, #132]	@ (800af90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d022      	beq.n	800af56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af18:	d01d      	beq.n	800af56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a1d      	ldr	r2, [pc, #116]	@ (800af94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d018      	beq.n	800af56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a1b      	ldr	r2, [pc, #108]	@ (800af98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d013      	beq.n	800af56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a1a      	ldr	r2, [pc, #104]	@ (800af9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d00e      	beq.n	800af56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a18      	ldr	r2, [pc, #96]	@ (800afa0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d009      	beq.n	800af56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a17      	ldr	r2, [pc, #92]	@ (800afa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d004      	beq.n	800af56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a15      	ldr	r2, [pc, #84]	@ (800afa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d10c      	bne.n	800af70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	68ba      	ldr	r2, [r7, #8]
 800af64:	4313      	orrs	r3, r2
 800af66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	40010000 	.word	0x40010000
 800af94:	40000400 	.word	0x40000400
 800af98:	40000800 	.word	0x40000800
 800af9c:	40000c00 	.word	0x40000c00
 800afa0:	40010400 	.word	0x40010400
 800afa4:	40014000 	.word	0x40014000
 800afa8:	40001800 	.word	0x40001800

0800afac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800afb6:	2300      	movs	r3, #0
 800afb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d101      	bne.n	800afc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800afc4:	2302      	movs	r3, #2
 800afc6:	e03d      	b.n	800b044 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	4313      	orrs	r3, r2
 800afdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	4313      	orrs	r3, r2
 800afea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4313      	orrs	r3, r2
 800b006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	4313      	orrs	r3, r2
 800b014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	695b      	ldr	r3, [r3, #20]
 800b020:	4313      	orrs	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	69db      	ldr	r3, [r3, #28]
 800b02e:	4313      	orrs	r3, r2
 800b030:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d101      	bne.n	800b08a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	e042      	b.n	800b110 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b00      	cmp	r3, #0
 800b094:	d106      	bne.n	800b0a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7fc ffb4 	bl	800800c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2224      	movs	r2, #36	@ 0x24
 800b0a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	68da      	ldr	r2, [r3, #12]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b0ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 fcdb 	bl	800ba78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	691a      	ldr	r2, [r3, #16]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b0d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	695a      	ldr	r2, [r3, #20]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b0e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68da      	ldr	r2, [r3, #12]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b0f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2220      	movs	r2, #32
 800b0fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2220      	movs	r2, #32
 800b104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	4613      	mov	r3, r2
 800b124:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2b20      	cmp	r3, #32
 800b130:	d112      	bne.n	800b158 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <HAL_UART_Receive_IT+0x26>
 800b138:	88fb      	ldrh	r3, [r7, #6]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e00b      	b.n	800b15a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2200      	movs	r2, #0
 800b146:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b148:	88fb      	ldrh	r3, [r7, #6]
 800b14a:	461a      	mov	r2, r3
 800b14c:	68b9      	ldr	r1, [r7, #8]
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f000 faba 	bl	800b6c8 <UART_Start_Receive_IT>
 800b154:	4603      	mov	r3, r0
 800b156:	e000      	b.n	800b15a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b158:	2302      	movs	r3, #2
  }
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b0ba      	sub	sp, #232	@ 0xe8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b18a:	2300      	movs	r3, #0
 800b18c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b190:	2300      	movs	r3, #0
 800b192:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b19a:	f003 030f 	and.w	r3, r3, #15
 800b19e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b1a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10f      	bne.n	800b1ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1ae:	f003 0320 	and.w	r3, r3, #32
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d009      	beq.n	800b1ca <HAL_UART_IRQHandler+0x66>
 800b1b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1ba:	f003 0320 	and.w	r3, r3, #32
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fb99 	bl	800b8fa <UART_Receive_IT>
      return;
 800b1c8:	e25b      	b.n	800b682 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b1ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f000 80de 	beq.w	800b390 <HAL_UART_IRQHandler+0x22c>
 800b1d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1d8:	f003 0301 	and.w	r3, r3, #1
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d106      	bne.n	800b1ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b1e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f000 80d1 	beq.w	800b390 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b1ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1f2:	f003 0301 	and.w	r3, r3, #1
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00b      	beq.n	800b212 <HAL_UART_IRQHandler+0xae>
 800b1fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b202:	2b00      	cmp	r3, #0
 800b204:	d005      	beq.n	800b212 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b20a:	f043 0201 	orr.w	r2, r3, #1
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b216:	f003 0304 	and.w	r3, r3, #4
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00b      	beq.n	800b236 <HAL_UART_IRQHandler+0xd2>
 800b21e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	2b00      	cmp	r3, #0
 800b228:	d005      	beq.n	800b236 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b22e:	f043 0202 	orr.w	r2, r3, #2
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b23a:	f003 0302 	and.w	r3, r3, #2
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00b      	beq.n	800b25a <HAL_UART_IRQHandler+0xf6>
 800b242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b246:	f003 0301 	and.w	r3, r3, #1
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d005      	beq.n	800b25a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b252:	f043 0204 	orr.w	r2, r3, #4
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b25a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b25e:	f003 0308 	and.w	r3, r3, #8
 800b262:	2b00      	cmp	r3, #0
 800b264:	d011      	beq.n	800b28a <HAL_UART_IRQHandler+0x126>
 800b266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b26a:	f003 0320 	and.w	r3, r3, #32
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d105      	bne.n	800b27e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b276:	f003 0301 	and.w	r3, r3, #1
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d005      	beq.n	800b28a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b282:	f043 0208 	orr.w	r2, r3, #8
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b28e:	2b00      	cmp	r3, #0
 800b290:	f000 81f2 	beq.w	800b678 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b298:	f003 0320 	and.w	r3, r3, #32
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d008      	beq.n	800b2b2 <HAL_UART_IRQHandler+0x14e>
 800b2a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2a4:	f003 0320 	and.w	r3, r3, #32
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 fb24 	bl	800b8fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2bc:	2b40      	cmp	r3, #64	@ 0x40
 800b2be:	bf0c      	ite	eq
 800b2c0:	2301      	moveq	r3, #1
 800b2c2:	2300      	movne	r3, #0
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ce:	f003 0308 	and.w	r3, r3, #8
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d103      	bne.n	800b2de <HAL_UART_IRQHandler+0x17a>
 800b2d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d04f      	beq.n	800b37e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 fa2c 	bl	800b73c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	695b      	ldr	r3, [r3, #20]
 800b2ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2ee:	2b40      	cmp	r3, #64	@ 0x40
 800b2f0:	d141      	bne.n	800b376 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3314      	adds	r3, #20
 800b2f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b300:	e853 3f00 	ldrex	r3, [r3]
 800b304:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b308:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b30c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b310:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	3314      	adds	r3, #20
 800b31a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b31e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b322:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b326:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b32a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b32e:	e841 2300 	strex	r3, r2, [r1]
 800b332:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1d9      	bne.n	800b2f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b342:	2b00      	cmp	r3, #0
 800b344:	d013      	beq.n	800b36e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b34a:	4a7e      	ldr	r2, [pc, #504]	@ (800b544 <HAL_UART_IRQHandler+0x3e0>)
 800b34c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b352:	4618      	mov	r0, r3
 800b354:	f7fd fae9 	bl	800892a <HAL_DMA_Abort_IT>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d016      	beq.n	800b38c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b368:	4610      	mov	r0, r2
 800b36a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b36c:	e00e      	b.n	800b38c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f994 	bl	800b69c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b374:	e00a      	b.n	800b38c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f990 	bl	800b69c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b37c:	e006      	b.n	800b38c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f98c 	bl	800b69c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b38a:	e175      	b.n	800b678 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b38c:	bf00      	nop
    return;
 800b38e:	e173      	b.n	800b678 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b394:	2b01      	cmp	r3, #1
 800b396:	f040 814f 	bne.w	800b638 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b39a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b39e:	f003 0310 	and.w	r3, r3, #16
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f000 8148 	beq.w	800b638 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b3a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3ac:	f003 0310 	and.w	r3, r3, #16
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f000 8141 	beq.w	800b638 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60bb      	str	r3, [r7, #8]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	60bb      	str	r3, [r7, #8]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	60bb      	str	r3, [r7, #8]
 800b3ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3d6:	2b40      	cmp	r3, #64	@ 0x40
 800b3d8:	f040 80b6 	bne.w	800b548 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b3e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f000 8145 	beq.w	800b67c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b3f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	f080 813e 	bcs.w	800b67c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b406:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b412:	f000 8088 	beq.w	800b526 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	330c      	adds	r3, #12
 800b41c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b420:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b424:	e853 3f00 	ldrex	r3, [r3]
 800b428:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b42c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b434:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	330c      	adds	r3, #12
 800b43e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b442:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b446:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b44a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b44e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b452:	e841 2300 	strex	r3, r2, [r1]
 800b456:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b45a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1d9      	bne.n	800b416 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	3314      	adds	r3, #20
 800b468:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b46a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b46c:	e853 3f00 	ldrex	r3, [r3]
 800b470:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b472:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b474:	f023 0301 	bic.w	r3, r3, #1
 800b478:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	3314      	adds	r3, #20
 800b482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b486:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b48a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b48e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b492:	e841 2300 	strex	r3, r2, [r1]
 800b496:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b498:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1e1      	bne.n	800b462 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3314      	adds	r3, #20
 800b4a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b4a8:	e853 3f00 	ldrex	r3, [r3]
 800b4ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b4ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3314      	adds	r3, #20
 800b4be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b4c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b4c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b4c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b4ca:	e841 2300 	strex	r3, r2, [r1]
 800b4ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b4d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1e3      	bne.n	800b49e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2220      	movs	r2, #32
 800b4da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	330c      	adds	r3, #12
 800b4ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4ee:	e853 3f00 	ldrex	r3, [r3]
 800b4f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b4f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4f6:	f023 0310 	bic.w	r3, r3, #16
 800b4fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	330c      	adds	r3, #12
 800b504:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b508:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b50a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b50e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b510:	e841 2300 	strex	r3, r2, [r1]
 800b514:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1e3      	bne.n	800b4e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b520:	4618      	mov	r0, r3
 800b522:	f7fd f992 	bl	800884a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2202      	movs	r2, #2
 800b52a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b534:	b29b      	uxth	r3, r3
 800b536:	1ad3      	subs	r3, r2, r3
 800b538:	b29b      	uxth	r3, r3
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 f8b7 	bl	800b6b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b542:	e09b      	b.n	800b67c <HAL_UART_IRQHandler+0x518>
 800b544:	0800b803 	.word	0x0800b803
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b550:	b29b      	uxth	r3, r3
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f000 808e 	beq.w	800b680 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f000 8089 	beq.w	800b680 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	330c      	adds	r3, #12
 800b574:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b578:	e853 3f00 	ldrex	r3, [r3]
 800b57c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b57e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b580:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b584:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	330c      	adds	r3, #12
 800b58e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b592:	647a      	str	r2, [r7, #68]	@ 0x44
 800b594:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b596:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b598:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b59a:	e841 2300 	strex	r3, r2, [r1]
 800b59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b5a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1e3      	bne.n	800b56e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	3314      	adds	r3, #20
 800b5ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b0:	e853 3f00 	ldrex	r3, [r3]
 800b5b4:	623b      	str	r3, [r7, #32]
   return(result);
 800b5b6:	6a3b      	ldr	r3, [r7, #32]
 800b5b8:	f023 0301 	bic.w	r3, r3, #1
 800b5bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	3314      	adds	r3, #20
 800b5c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b5ca:	633a      	str	r2, [r7, #48]	@ 0x30
 800b5cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5d2:	e841 2300 	strex	r3, r2, [r1]
 800b5d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1e3      	bne.n	800b5a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2220      	movs	r2, #32
 800b5e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	330c      	adds	r3, #12
 800b5f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	e853 3f00 	ldrex	r3, [r3]
 800b5fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f023 0310 	bic.w	r3, r3, #16
 800b602:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	330c      	adds	r3, #12
 800b60c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b610:	61fa      	str	r2, [r7, #28]
 800b612:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b614:	69b9      	ldr	r1, [r7, #24]
 800b616:	69fa      	ldr	r2, [r7, #28]
 800b618:	e841 2300 	strex	r3, r2, [r1]
 800b61c:	617b      	str	r3, [r7, #20]
   return(result);
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d1e3      	bne.n	800b5ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2202      	movs	r2, #2
 800b628:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b62a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b62e:	4619      	mov	r1, r3
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f83d 	bl	800b6b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b636:	e023      	b.n	800b680 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b63c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b640:	2b00      	cmp	r3, #0
 800b642:	d009      	beq.n	800b658 <HAL_UART_IRQHandler+0x4f4>
 800b644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d003      	beq.n	800b658 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 f8ea 	bl	800b82a <UART_Transmit_IT>
    return;
 800b656:	e014      	b.n	800b682 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b65c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b660:	2b00      	cmp	r3, #0
 800b662:	d00e      	beq.n	800b682 <HAL_UART_IRQHandler+0x51e>
 800b664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d008      	beq.n	800b682 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 f92a 	bl	800b8ca <UART_EndTransmit_IT>
    return;
 800b676:	e004      	b.n	800b682 <HAL_UART_IRQHandler+0x51e>
    return;
 800b678:	bf00      	nop
 800b67a:	e002      	b.n	800b682 <HAL_UART_IRQHandler+0x51e>
      return;
 800b67c:	bf00      	nop
 800b67e:	e000      	b.n	800b682 <HAL_UART_IRQHandler+0x51e>
      return;
 800b680:	bf00      	nop
  }
}
 800b682:	37e8      	adds	r7, #232	@ 0xe8
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b690:	bf00      	nop
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b6a4:	bf00      	nop
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	88fa      	ldrh	r2, [r7, #6]
 800b6e0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	88fa      	ldrh	r2, [r7, #6]
 800b6e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2222      	movs	r2, #34	@ 0x22
 800b6f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d007      	beq.n	800b70e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68da      	ldr	r2, [r3, #12]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b70c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	695a      	ldr	r2, [r3, #20]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f042 0201 	orr.w	r2, r2, #1
 800b71c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	68da      	ldr	r2, [r3, #12]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f042 0220 	orr.w	r2, r2, #32
 800b72c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3714      	adds	r7, #20
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b095      	sub	sp, #84	@ 0x54
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	330c      	adds	r3, #12
 800b74a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b74e:	e853 3f00 	ldrex	r3, [r3]
 800b752:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b756:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b75a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	330c      	adds	r3, #12
 800b762:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b764:	643a      	str	r2, [r7, #64]	@ 0x40
 800b766:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b768:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b76a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b76c:	e841 2300 	strex	r3, r2, [r1]
 800b770:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1e5      	bne.n	800b744 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	3314      	adds	r3, #20
 800b77e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	e853 3f00 	ldrex	r3, [r3]
 800b786:	61fb      	str	r3, [r7, #28]
   return(result);
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	f023 0301 	bic.w	r3, r3, #1
 800b78e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3314      	adds	r3, #20
 800b796:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b798:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b79a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b79e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7a0:	e841 2300 	strex	r3, r2, [r1]
 800b7a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1e5      	bne.n	800b778 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d119      	bne.n	800b7e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	330c      	adds	r3, #12
 800b7ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	e853 3f00 	ldrex	r3, [r3]
 800b7c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	f023 0310 	bic.w	r3, r3, #16
 800b7ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	330c      	adds	r3, #12
 800b7d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7d4:	61ba      	str	r2, [r7, #24]
 800b7d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d8:	6979      	ldr	r1, [r7, #20]
 800b7da:	69ba      	ldr	r2, [r7, #24]
 800b7dc:	e841 2300 	strex	r3, r2, [r1]
 800b7e0:	613b      	str	r3, [r7, #16]
   return(result);
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d1e5      	bne.n	800b7b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b7f6:	bf00      	nop
 800b7f8:	3754      	adds	r7, #84	@ 0x54
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b084      	sub	sp, #16
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b80e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2200      	movs	r2, #0
 800b814:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f7ff ff3d 	bl	800b69c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b822:	bf00      	nop
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b82a:	b480      	push	{r7}
 800b82c:	b085      	sub	sp, #20
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	2b21      	cmp	r3, #33	@ 0x21
 800b83c:	d13e      	bne.n	800b8bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b846:	d114      	bne.n	800b872 <UART_Transmit_IT+0x48>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	691b      	ldr	r3, [r3, #16]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d110      	bne.n	800b872 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a1b      	ldr	r3, [r3, #32]
 800b854:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	881b      	ldrh	r3, [r3, #0]
 800b85a:	461a      	mov	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b864:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a1b      	ldr	r3, [r3, #32]
 800b86a:	1c9a      	adds	r2, r3, #2
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	621a      	str	r2, [r3, #32]
 800b870:	e008      	b.n	800b884 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a1b      	ldr	r3, [r3, #32]
 800b876:	1c59      	adds	r1, r3, #1
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	6211      	str	r1, [r2, #32]
 800b87c:	781a      	ldrb	r2, [r3, #0]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b888:	b29b      	uxth	r3, r3
 800b88a:	3b01      	subs	r3, #1
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	4619      	mov	r1, r3
 800b892:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b894:	2b00      	cmp	r3, #0
 800b896:	d10f      	bne.n	800b8b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68da      	ldr	r2, [r3, #12]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b8a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68da      	ldr	r2, [r3, #12]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b8b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	e000      	b.n	800b8be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b8bc:	2302      	movs	r3, #2
  }
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3714      	adds	r7, #20
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr

0800b8ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	68da      	ldr	r2, [r3, #12]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b8e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2220      	movs	r2, #32
 800b8e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f7ff fecc 	bl	800b688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b08c      	sub	sp, #48	@ 0x30
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	2b22      	cmp	r3, #34	@ 0x22
 800b90c:	f040 80ae 	bne.w	800ba6c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b918:	d117      	bne.n	800b94a <UART_Receive_IT+0x50>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d113      	bne.n	800b94a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b922:	2300      	movs	r3, #0
 800b924:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b92a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	b29b      	uxth	r3, r3
 800b934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b938:	b29a      	uxth	r2, r3
 800b93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b93c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b942:	1c9a      	adds	r2, r3, #2
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	629a      	str	r2, [r3, #40]	@ 0x28
 800b948:	e026      	b.n	800b998 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b94e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800b950:	2300      	movs	r3, #0
 800b952:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b95c:	d007      	beq.n	800b96e <UART_Receive_IT+0x74>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d10a      	bne.n	800b97c <UART_Receive_IT+0x82>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	691b      	ldr	r3, [r3, #16]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d106      	bne.n	800b97c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	b2da      	uxtb	r2, r3
 800b976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b978:	701a      	strb	r2, [r3, #0]
 800b97a:	e008      	b.n	800b98e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	b2db      	uxtb	r3, r3
 800b984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b988:	b2da      	uxtb	r2, r3
 800b98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b98c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b992:	1c5a      	adds	r2, r3, #1
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	b29b      	uxth	r3, r3
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d15d      	bne.n	800ba68 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	68da      	ldr	r2, [r3, #12]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f022 0220 	bic.w	r2, r2, #32
 800b9ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68da      	ldr	r2, [r3, #12]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b9ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	695a      	ldr	r2, [r3, #20]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f022 0201 	bic.w	r2, r2, #1
 800b9da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2220      	movs	r2, #32
 800b9e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d135      	bne.n	800ba5e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	330c      	adds	r3, #12
 800b9fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	e853 3f00 	ldrex	r3, [r3]
 800ba06:	613b      	str	r3, [r7, #16]
   return(result);
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	f023 0310 	bic.w	r3, r3, #16
 800ba0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	330c      	adds	r3, #12
 800ba16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba18:	623a      	str	r2, [r7, #32]
 800ba1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1c:	69f9      	ldr	r1, [r7, #28]
 800ba1e:	6a3a      	ldr	r2, [r7, #32]
 800ba20:	e841 2300 	strex	r3, r2, [r1]
 800ba24:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1e5      	bne.n	800b9f8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f003 0310 	and.w	r3, r3, #16
 800ba36:	2b10      	cmp	r3, #16
 800ba38:	d10a      	bne.n	800ba50 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	60fb      	str	r3, [r7, #12]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	60fb      	str	r3, [r7, #12]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	60fb      	str	r3, [r7, #12]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ba54:	4619      	mov	r1, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff fe2a 	bl	800b6b0 <HAL_UARTEx_RxEventCallback>
 800ba5c:	e002      	b.n	800ba64 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f7f9 f8cc 	bl	8004bfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ba64:	2300      	movs	r3, #0
 800ba66:	e002      	b.n	800ba6e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	e000      	b.n	800ba6e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ba6c:	2302      	movs	r3, #2
  }
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3730      	adds	r7, #48	@ 0x30
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
	...

0800ba78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba7c:	b0c0      	sub	sp, #256	@ 0x100
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ba90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba94:	68d9      	ldr	r1, [r3, #12]
 800ba96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	ea40 0301 	orr.w	r3, r0, r1
 800baa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800baa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baa6:	689a      	ldr	r2, [r3, #8]
 800baa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	431a      	orrs	r2, r3
 800bab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	431a      	orrs	r2, r3
 800bab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800babc:	69db      	ldr	r3, [r3, #28]
 800babe:	4313      	orrs	r3, r2
 800bac0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bad0:	f021 010c 	bic.w	r1, r1, #12
 800bad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bade:	430b      	orrs	r3, r1
 800bae0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	695b      	ldr	r3, [r3, #20]
 800baea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800baee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baf2:	6999      	ldr	r1, [r3, #24]
 800baf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	ea40 0301 	orr.w	r3, r0, r1
 800bafe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bb00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	4b8f      	ldr	r3, [pc, #572]	@ (800bd44 <UART_SetConfig+0x2cc>)
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d005      	beq.n	800bb18 <UART_SetConfig+0xa0>
 800bb0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	4b8d      	ldr	r3, [pc, #564]	@ (800bd48 <UART_SetConfig+0x2d0>)
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d104      	bne.n	800bb22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bb18:	f7fe fa32 	bl	8009f80 <HAL_RCC_GetPCLK2Freq>
 800bb1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800bb20:	e003      	b.n	800bb2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bb22:	f7fe fa19 	bl	8009f58 <HAL_RCC_GetPCLK1Freq>
 800bb26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb2e:	69db      	ldr	r3, [r3, #28]
 800bb30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb34:	f040 810c 	bne.w	800bd50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bb38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bb42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800bb46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800bb4a:	4622      	mov	r2, r4
 800bb4c:	462b      	mov	r3, r5
 800bb4e:	1891      	adds	r1, r2, r2
 800bb50:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bb52:	415b      	adcs	r3, r3
 800bb54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800bb5a:	4621      	mov	r1, r4
 800bb5c:	eb12 0801 	adds.w	r8, r2, r1
 800bb60:	4629      	mov	r1, r5
 800bb62:	eb43 0901 	adc.w	r9, r3, r1
 800bb66:	f04f 0200 	mov.w	r2, #0
 800bb6a:	f04f 0300 	mov.w	r3, #0
 800bb6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bb72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bb76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bb7a:	4690      	mov	r8, r2
 800bb7c:	4699      	mov	r9, r3
 800bb7e:	4623      	mov	r3, r4
 800bb80:	eb18 0303 	adds.w	r3, r8, r3
 800bb84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bb88:	462b      	mov	r3, r5
 800bb8a:	eb49 0303 	adc.w	r3, r9, r3
 800bb8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bb92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bb9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bba2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bba6:	460b      	mov	r3, r1
 800bba8:	18db      	adds	r3, r3, r3
 800bbaa:	653b      	str	r3, [r7, #80]	@ 0x50
 800bbac:	4613      	mov	r3, r2
 800bbae:	eb42 0303 	adc.w	r3, r2, r3
 800bbb2:	657b      	str	r3, [r7, #84]	@ 0x54
 800bbb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800bbb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800bbbc:	f7f5 f864 	bl	8000c88 <__aeabi_uldivmod>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	4b61      	ldr	r3, [pc, #388]	@ (800bd4c <UART_SetConfig+0x2d4>)
 800bbc6:	fba3 2302 	umull	r2, r3, r3, r2
 800bbca:	095b      	lsrs	r3, r3, #5
 800bbcc:	011c      	lsls	r4, r3, #4
 800bbce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bbd8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800bbdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800bbe0:	4642      	mov	r2, r8
 800bbe2:	464b      	mov	r3, r9
 800bbe4:	1891      	adds	r1, r2, r2
 800bbe6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800bbe8:	415b      	adcs	r3, r3
 800bbea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800bbf0:	4641      	mov	r1, r8
 800bbf2:	eb12 0a01 	adds.w	sl, r2, r1
 800bbf6:	4649      	mov	r1, r9
 800bbf8:	eb43 0b01 	adc.w	fp, r3, r1
 800bbfc:	f04f 0200 	mov.w	r2, #0
 800bc00:	f04f 0300 	mov.w	r3, #0
 800bc04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bc08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bc0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc10:	4692      	mov	sl, r2
 800bc12:	469b      	mov	fp, r3
 800bc14:	4643      	mov	r3, r8
 800bc16:	eb1a 0303 	adds.w	r3, sl, r3
 800bc1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bc1e:	464b      	mov	r3, r9
 800bc20:	eb4b 0303 	adc.w	r3, fp, r3
 800bc24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bc28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bc34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800bc38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	18db      	adds	r3, r3, r3
 800bc40:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc42:	4613      	mov	r3, r2
 800bc44:	eb42 0303 	adc.w	r3, r2, r3
 800bc48:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800bc4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800bc52:	f7f5 f819 	bl	8000c88 <__aeabi_uldivmod>
 800bc56:	4602      	mov	r2, r0
 800bc58:	460b      	mov	r3, r1
 800bc5a:	4611      	mov	r1, r2
 800bc5c:	4b3b      	ldr	r3, [pc, #236]	@ (800bd4c <UART_SetConfig+0x2d4>)
 800bc5e:	fba3 2301 	umull	r2, r3, r3, r1
 800bc62:	095b      	lsrs	r3, r3, #5
 800bc64:	2264      	movs	r2, #100	@ 0x64
 800bc66:	fb02 f303 	mul.w	r3, r2, r3
 800bc6a:	1acb      	subs	r3, r1, r3
 800bc6c:	00db      	lsls	r3, r3, #3
 800bc6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800bc72:	4b36      	ldr	r3, [pc, #216]	@ (800bd4c <UART_SetConfig+0x2d4>)
 800bc74:	fba3 2302 	umull	r2, r3, r3, r2
 800bc78:	095b      	lsrs	r3, r3, #5
 800bc7a:	005b      	lsls	r3, r3, #1
 800bc7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800bc80:	441c      	add	r4, r3
 800bc82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc86:	2200      	movs	r2, #0
 800bc88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bc8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800bc90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800bc94:	4642      	mov	r2, r8
 800bc96:	464b      	mov	r3, r9
 800bc98:	1891      	adds	r1, r2, r2
 800bc9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bc9c:	415b      	adcs	r3, r3
 800bc9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bca0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bca4:	4641      	mov	r1, r8
 800bca6:	1851      	adds	r1, r2, r1
 800bca8:	6339      	str	r1, [r7, #48]	@ 0x30
 800bcaa:	4649      	mov	r1, r9
 800bcac:	414b      	adcs	r3, r1
 800bcae:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcb0:	f04f 0200 	mov.w	r2, #0
 800bcb4:	f04f 0300 	mov.w	r3, #0
 800bcb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800bcbc:	4659      	mov	r1, fp
 800bcbe:	00cb      	lsls	r3, r1, #3
 800bcc0:	4651      	mov	r1, sl
 800bcc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bcc6:	4651      	mov	r1, sl
 800bcc8:	00ca      	lsls	r2, r1, #3
 800bcca:	4610      	mov	r0, r2
 800bccc:	4619      	mov	r1, r3
 800bcce:	4603      	mov	r3, r0
 800bcd0:	4642      	mov	r2, r8
 800bcd2:	189b      	adds	r3, r3, r2
 800bcd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bcd8:	464b      	mov	r3, r9
 800bcda:	460a      	mov	r2, r1
 800bcdc:	eb42 0303 	adc.w	r3, r2, r3
 800bce0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bcf0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800bcf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	18db      	adds	r3, r3, r3
 800bcfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bcfe:	4613      	mov	r3, r2
 800bd00:	eb42 0303 	adc.w	r3, r2, r3
 800bd04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800bd0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800bd0e:	f7f4 ffbb 	bl	8000c88 <__aeabi_uldivmod>
 800bd12:	4602      	mov	r2, r0
 800bd14:	460b      	mov	r3, r1
 800bd16:	4b0d      	ldr	r3, [pc, #52]	@ (800bd4c <UART_SetConfig+0x2d4>)
 800bd18:	fba3 1302 	umull	r1, r3, r3, r2
 800bd1c:	095b      	lsrs	r3, r3, #5
 800bd1e:	2164      	movs	r1, #100	@ 0x64
 800bd20:	fb01 f303 	mul.w	r3, r1, r3
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	00db      	lsls	r3, r3, #3
 800bd28:	3332      	adds	r3, #50	@ 0x32
 800bd2a:	4a08      	ldr	r2, [pc, #32]	@ (800bd4c <UART_SetConfig+0x2d4>)
 800bd2c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd30:	095b      	lsrs	r3, r3, #5
 800bd32:	f003 0207 	and.w	r2, r3, #7
 800bd36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4422      	add	r2, r4
 800bd3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bd40:	e106      	b.n	800bf50 <UART_SetConfig+0x4d8>
 800bd42:	bf00      	nop
 800bd44:	40011000 	.word	0x40011000
 800bd48:	40011400 	.word	0x40011400
 800bd4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bd50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd54:	2200      	movs	r2, #0
 800bd56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bd5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bd5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bd62:	4642      	mov	r2, r8
 800bd64:	464b      	mov	r3, r9
 800bd66:	1891      	adds	r1, r2, r2
 800bd68:	6239      	str	r1, [r7, #32]
 800bd6a:	415b      	adcs	r3, r3
 800bd6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bd72:	4641      	mov	r1, r8
 800bd74:	1854      	adds	r4, r2, r1
 800bd76:	4649      	mov	r1, r9
 800bd78:	eb43 0501 	adc.w	r5, r3, r1
 800bd7c:	f04f 0200 	mov.w	r2, #0
 800bd80:	f04f 0300 	mov.w	r3, #0
 800bd84:	00eb      	lsls	r3, r5, #3
 800bd86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bd8a:	00e2      	lsls	r2, r4, #3
 800bd8c:	4614      	mov	r4, r2
 800bd8e:	461d      	mov	r5, r3
 800bd90:	4643      	mov	r3, r8
 800bd92:	18e3      	adds	r3, r4, r3
 800bd94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bd98:	464b      	mov	r3, r9
 800bd9a:	eb45 0303 	adc.w	r3, r5, r3
 800bd9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bda2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bdae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bdb2:	f04f 0200 	mov.w	r2, #0
 800bdb6:	f04f 0300 	mov.w	r3, #0
 800bdba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bdbe:	4629      	mov	r1, r5
 800bdc0:	008b      	lsls	r3, r1, #2
 800bdc2:	4621      	mov	r1, r4
 800bdc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bdc8:	4621      	mov	r1, r4
 800bdca:	008a      	lsls	r2, r1, #2
 800bdcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bdd0:	f7f4 ff5a 	bl	8000c88 <__aeabi_uldivmod>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	4b60      	ldr	r3, [pc, #384]	@ (800bf5c <UART_SetConfig+0x4e4>)
 800bdda:	fba3 2302 	umull	r2, r3, r3, r2
 800bdde:	095b      	lsrs	r3, r3, #5
 800bde0:	011c      	lsls	r4, r3, #4
 800bde2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bde6:	2200      	movs	r2, #0
 800bde8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bdec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bdf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bdf4:	4642      	mov	r2, r8
 800bdf6:	464b      	mov	r3, r9
 800bdf8:	1891      	adds	r1, r2, r2
 800bdfa:	61b9      	str	r1, [r7, #24]
 800bdfc:	415b      	adcs	r3, r3
 800bdfe:	61fb      	str	r3, [r7, #28]
 800be00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be04:	4641      	mov	r1, r8
 800be06:	1851      	adds	r1, r2, r1
 800be08:	6139      	str	r1, [r7, #16]
 800be0a:	4649      	mov	r1, r9
 800be0c:	414b      	adcs	r3, r1
 800be0e:	617b      	str	r3, [r7, #20]
 800be10:	f04f 0200 	mov.w	r2, #0
 800be14:	f04f 0300 	mov.w	r3, #0
 800be18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800be1c:	4659      	mov	r1, fp
 800be1e:	00cb      	lsls	r3, r1, #3
 800be20:	4651      	mov	r1, sl
 800be22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be26:	4651      	mov	r1, sl
 800be28:	00ca      	lsls	r2, r1, #3
 800be2a:	4610      	mov	r0, r2
 800be2c:	4619      	mov	r1, r3
 800be2e:	4603      	mov	r3, r0
 800be30:	4642      	mov	r2, r8
 800be32:	189b      	adds	r3, r3, r2
 800be34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800be38:	464b      	mov	r3, r9
 800be3a:	460a      	mov	r2, r1
 800be3c:	eb42 0303 	adc.w	r3, r2, r3
 800be40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800be44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800be4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800be50:	f04f 0200 	mov.w	r2, #0
 800be54:	f04f 0300 	mov.w	r3, #0
 800be58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800be5c:	4649      	mov	r1, r9
 800be5e:	008b      	lsls	r3, r1, #2
 800be60:	4641      	mov	r1, r8
 800be62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be66:	4641      	mov	r1, r8
 800be68:	008a      	lsls	r2, r1, #2
 800be6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800be6e:	f7f4 ff0b 	bl	8000c88 <__aeabi_uldivmod>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	4611      	mov	r1, r2
 800be78:	4b38      	ldr	r3, [pc, #224]	@ (800bf5c <UART_SetConfig+0x4e4>)
 800be7a:	fba3 2301 	umull	r2, r3, r3, r1
 800be7e:	095b      	lsrs	r3, r3, #5
 800be80:	2264      	movs	r2, #100	@ 0x64
 800be82:	fb02 f303 	mul.w	r3, r2, r3
 800be86:	1acb      	subs	r3, r1, r3
 800be88:	011b      	lsls	r3, r3, #4
 800be8a:	3332      	adds	r3, #50	@ 0x32
 800be8c:	4a33      	ldr	r2, [pc, #204]	@ (800bf5c <UART_SetConfig+0x4e4>)
 800be8e:	fba2 2303 	umull	r2, r3, r2, r3
 800be92:	095b      	lsrs	r3, r3, #5
 800be94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800be98:	441c      	add	r4, r3
 800be9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800be9e:	2200      	movs	r2, #0
 800bea0:	673b      	str	r3, [r7, #112]	@ 0x70
 800bea2:	677a      	str	r2, [r7, #116]	@ 0x74
 800bea4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bea8:	4642      	mov	r2, r8
 800beaa:	464b      	mov	r3, r9
 800beac:	1891      	adds	r1, r2, r2
 800beae:	60b9      	str	r1, [r7, #8]
 800beb0:	415b      	adcs	r3, r3
 800beb2:	60fb      	str	r3, [r7, #12]
 800beb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800beb8:	4641      	mov	r1, r8
 800beba:	1851      	adds	r1, r2, r1
 800bebc:	6039      	str	r1, [r7, #0]
 800bebe:	4649      	mov	r1, r9
 800bec0:	414b      	adcs	r3, r1
 800bec2:	607b      	str	r3, [r7, #4]
 800bec4:	f04f 0200 	mov.w	r2, #0
 800bec8:	f04f 0300 	mov.w	r3, #0
 800becc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bed0:	4659      	mov	r1, fp
 800bed2:	00cb      	lsls	r3, r1, #3
 800bed4:	4651      	mov	r1, sl
 800bed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800beda:	4651      	mov	r1, sl
 800bedc:	00ca      	lsls	r2, r1, #3
 800bede:	4610      	mov	r0, r2
 800bee0:	4619      	mov	r1, r3
 800bee2:	4603      	mov	r3, r0
 800bee4:	4642      	mov	r2, r8
 800bee6:	189b      	adds	r3, r3, r2
 800bee8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800beea:	464b      	mov	r3, r9
 800beec:	460a      	mov	r2, r1
 800beee:	eb42 0303 	adc.w	r3, r2, r3
 800bef2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	663b      	str	r3, [r7, #96]	@ 0x60
 800befe:	667a      	str	r2, [r7, #100]	@ 0x64
 800bf00:	f04f 0200 	mov.w	r2, #0
 800bf04:	f04f 0300 	mov.w	r3, #0
 800bf08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bf0c:	4649      	mov	r1, r9
 800bf0e:	008b      	lsls	r3, r1, #2
 800bf10:	4641      	mov	r1, r8
 800bf12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf16:	4641      	mov	r1, r8
 800bf18:	008a      	lsls	r2, r1, #2
 800bf1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bf1e:	f7f4 feb3 	bl	8000c88 <__aeabi_uldivmod>
 800bf22:	4602      	mov	r2, r0
 800bf24:	460b      	mov	r3, r1
 800bf26:	4b0d      	ldr	r3, [pc, #52]	@ (800bf5c <UART_SetConfig+0x4e4>)
 800bf28:	fba3 1302 	umull	r1, r3, r3, r2
 800bf2c:	095b      	lsrs	r3, r3, #5
 800bf2e:	2164      	movs	r1, #100	@ 0x64
 800bf30:	fb01 f303 	mul.w	r3, r1, r3
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	011b      	lsls	r3, r3, #4
 800bf38:	3332      	adds	r3, #50	@ 0x32
 800bf3a:	4a08      	ldr	r2, [pc, #32]	@ (800bf5c <UART_SetConfig+0x4e4>)
 800bf3c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf40:	095b      	lsrs	r3, r3, #5
 800bf42:	f003 020f 	and.w	r2, r3, #15
 800bf46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4422      	add	r2, r4
 800bf4e:	609a      	str	r2, [r3, #8]
}
 800bf50:	bf00      	nop
 800bf52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bf56:	46bd      	mov	sp, r7
 800bf58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf5c:	51eb851f 	.word	0x51eb851f

0800bf60 <atof>:
 800bf60:	2100      	movs	r1, #0
 800bf62:	f000 be0f 	b.w	800cb84 <strtod>

0800bf66 <atoi>:
 800bf66:	220a      	movs	r2, #10
 800bf68:	2100      	movs	r1, #0
 800bf6a:	f000 be93 	b.w	800cc94 <strtol>

0800bf6e <sulp>:
 800bf6e:	b570      	push	{r4, r5, r6, lr}
 800bf70:	4604      	mov	r4, r0
 800bf72:	460d      	mov	r5, r1
 800bf74:	ec45 4b10 	vmov	d0, r4, r5
 800bf78:	4616      	mov	r6, r2
 800bf7a:	f003 fd5d 	bl	800fa38 <__ulp>
 800bf7e:	ec51 0b10 	vmov	r0, r1, d0
 800bf82:	b17e      	cbz	r6, 800bfa4 <sulp+0x36>
 800bf84:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bf88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	dd09      	ble.n	800bfa4 <sulp+0x36>
 800bf90:	051b      	lsls	r3, r3, #20
 800bf92:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bf96:	2400      	movs	r4, #0
 800bf98:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bf9c:	4622      	mov	r2, r4
 800bf9e:	462b      	mov	r3, r5
 800bfa0:	f7f4 fb2a 	bl	80005f8 <__aeabi_dmul>
 800bfa4:	ec41 0b10 	vmov	d0, r0, r1
 800bfa8:	bd70      	pop	{r4, r5, r6, pc}
 800bfaa:	0000      	movs	r0, r0
 800bfac:	0000      	movs	r0, r0
	...

0800bfb0 <_strtod_l>:
 800bfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb4:	b09f      	sub	sp, #124	@ 0x7c
 800bfb6:	460c      	mov	r4, r1
 800bfb8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bfba:	2200      	movs	r2, #0
 800bfbc:	921a      	str	r2, [sp, #104]	@ 0x68
 800bfbe:	9005      	str	r0, [sp, #20]
 800bfc0:	f04f 0a00 	mov.w	sl, #0
 800bfc4:	f04f 0b00 	mov.w	fp, #0
 800bfc8:	460a      	mov	r2, r1
 800bfca:	9219      	str	r2, [sp, #100]	@ 0x64
 800bfcc:	7811      	ldrb	r1, [r2, #0]
 800bfce:	292b      	cmp	r1, #43	@ 0x2b
 800bfd0:	d04a      	beq.n	800c068 <_strtod_l+0xb8>
 800bfd2:	d838      	bhi.n	800c046 <_strtod_l+0x96>
 800bfd4:	290d      	cmp	r1, #13
 800bfd6:	d832      	bhi.n	800c03e <_strtod_l+0x8e>
 800bfd8:	2908      	cmp	r1, #8
 800bfda:	d832      	bhi.n	800c042 <_strtod_l+0x92>
 800bfdc:	2900      	cmp	r1, #0
 800bfde:	d03b      	beq.n	800c058 <_strtod_l+0xa8>
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bfe4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bfe6:	782a      	ldrb	r2, [r5, #0]
 800bfe8:	2a30      	cmp	r2, #48	@ 0x30
 800bfea:	f040 80b3 	bne.w	800c154 <_strtod_l+0x1a4>
 800bfee:	786a      	ldrb	r2, [r5, #1]
 800bff0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bff4:	2a58      	cmp	r2, #88	@ 0x58
 800bff6:	d16e      	bne.n	800c0d6 <_strtod_l+0x126>
 800bff8:	9302      	str	r3, [sp, #8]
 800bffa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	ab1a      	add	r3, sp, #104	@ 0x68
 800c000:	9300      	str	r3, [sp, #0]
 800c002:	4a8e      	ldr	r2, [pc, #568]	@ (800c23c <_strtod_l+0x28c>)
 800c004:	9805      	ldr	r0, [sp, #20]
 800c006:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c008:	a919      	add	r1, sp, #100	@ 0x64
 800c00a:	f002 fe07 	bl	800ec1c <__gethex>
 800c00e:	f010 060f 	ands.w	r6, r0, #15
 800c012:	4604      	mov	r4, r0
 800c014:	d005      	beq.n	800c022 <_strtod_l+0x72>
 800c016:	2e06      	cmp	r6, #6
 800c018:	d128      	bne.n	800c06c <_strtod_l+0xbc>
 800c01a:	3501      	adds	r5, #1
 800c01c:	2300      	movs	r3, #0
 800c01e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c020:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c022:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c024:	2b00      	cmp	r3, #0
 800c026:	f040 858e 	bne.w	800cb46 <_strtod_l+0xb96>
 800c02a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c02c:	b1cb      	cbz	r3, 800c062 <_strtod_l+0xb2>
 800c02e:	4652      	mov	r2, sl
 800c030:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c034:	ec43 2b10 	vmov	d0, r2, r3
 800c038:	b01f      	add	sp, #124	@ 0x7c
 800c03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03e:	2920      	cmp	r1, #32
 800c040:	d1ce      	bne.n	800bfe0 <_strtod_l+0x30>
 800c042:	3201      	adds	r2, #1
 800c044:	e7c1      	b.n	800bfca <_strtod_l+0x1a>
 800c046:	292d      	cmp	r1, #45	@ 0x2d
 800c048:	d1ca      	bne.n	800bfe0 <_strtod_l+0x30>
 800c04a:	2101      	movs	r1, #1
 800c04c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c04e:	1c51      	adds	r1, r2, #1
 800c050:	9119      	str	r1, [sp, #100]	@ 0x64
 800c052:	7852      	ldrb	r2, [r2, #1]
 800c054:	2a00      	cmp	r2, #0
 800c056:	d1c5      	bne.n	800bfe4 <_strtod_l+0x34>
 800c058:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c05a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f040 8570 	bne.w	800cb42 <_strtod_l+0xb92>
 800c062:	4652      	mov	r2, sl
 800c064:	465b      	mov	r3, fp
 800c066:	e7e5      	b.n	800c034 <_strtod_l+0x84>
 800c068:	2100      	movs	r1, #0
 800c06a:	e7ef      	b.n	800c04c <_strtod_l+0x9c>
 800c06c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c06e:	b13a      	cbz	r2, 800c080 <_strtod_l+0xd0>
 800c070:	2135      	movs	r1, #53	@ 0x35
 800c072:	a81c      	add	r0, sp, #112	@ 0x70
 800c074:	f003 fdda 	bl	800fc2c <__copybits>
 800c078:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c07a:	9805      	ldr	r0, [sp, #20]
 800c07c:	f003 f9a8 	bl	800f3d0 <_Bfree>
 800c080:	3e01      	subs	r6, #1
 800c082:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c084:	2e04      	cmp	r6, #4
 800c086:	d806      	bhi.n	800c096 <_strtod_l+0xe6>
 800c088:	e8df f006 	tbb	[pc, r6]
 800c08c:	201d0314 	.word	0x201d0314
 800c090:	14          	.byte	0x14
 800c091:	00          	.byte	0x00
 800c092:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c096:	05e1      	lsls	r1, r4, #23
 800c098:	bf48      	it	mi
 800c09a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c09e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c0a2:	0d1b      	lsrs	r3, r3, #20
 800c0a4:	051b      	lsls	r3, r3, #20
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d1bb      	bne.n	800c022 <_strtod_l+0x72>
 800c0aa:	f001 fe4f 	bl	800dd4c <__errno>
 800c0ae:	2322      	movs	r3, #34	@ 0x22
 800c0b0:	6003      	str	r3, [r0, #0]
 800c0b2:	e7b6      	b.n	800c022 <_strtod_l+0x72>
 800c0b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c0b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c0bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c0c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c0c4:	e7e7      	b.n	800c096 <_strtod_l+0xe6>
 800c0c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c244 <_strtod_l+0x294>
 800c0ca:	e7e4      	b.n	800c096 <_strtod_l+0xe6>
 800c0cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c0d0:	f04f 3aff 	mov.w	sl, #4294967295
 800c0d4:	e7df      	b.n	800c096 <_strtod_l+0xe6>
 800c0d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0d8:	1c5a      	adds	r2, r3, #1
 800c0da:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0dc:	785b      	ldrb	r3, [r3, #1]
 800c0de:	2b30      	cmp	r3, #48	@ 0x30
 800c0e0:	d0f9      	beq.n	800c0d6 <_strtod_l+0x126>
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d09d      	beq.n	800c022 <_strtod_l+0x72>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	9308      	str	r3, [sp, #32]
 800c0f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0f4:	461f      	mov	r7, r3
 800c0f6:	220a      	movs	r2, #10
 800c0f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c0fa:	7805      	ldrb	r5, [r0, #0]
 800c0fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c100:	b2d9      	uxtb	r1, r3
 800c102:	2909      	cmp	r1, #9
 800c104:	d928      	bls.n	800c158 <_strtod_l+0x1a8>
 800c106:	494e      	ldr	r1, [pc, #312]	@ (800c240 <_strtod_l+0x290>)
 800c108:	2201      	movs	r2, #1
 800c10a:	f001 fd66 	bl	800dbda <strncmp>
 800c10e:	2800      	cmp	r0, #0
 800c110:	d032      	beq.n	800c178 <_strtod_l+0x1c8>
 800c112:	2000      	movs	r0, #0
 800c114:	462a      	mov	r2, r5
 800c116:	4681      	mov	r9, r0
 800c118:	463d      	mov	r5, r7
 800c11a:	4603      	mov	r3, r0
 800c11c:	2a65      	cmp	r2, #101	@ 0x65
 800c11e:	d001      	beq.n	800c124 <_strtod_l+0x174>
 800c120:	2a45      	cmp	r2, #69	@ 0x45
 800c122:	d114      	bne.n	800c14e <_strtod_l+0x19e>
 800c124:	b91d      	cbnz	r5, 800c12e <_strtod_l+0x17e>
 800c126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c128:	4302      	orrs	r2, r0
 800c12a:	d095      	beq.n	800c058 <_strtod_l+0xa8>
 800c12c:	2500      	movs	r5, #0
 800c12e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c130:	1c62      	adds	r2, r4, #1
 800c132:	9219      	str	r2, [sp, #100]	@ 0x64
 800c134:	7862      	ldrb	r2, [r4, #1]
 800c136:	2a2b      	cmp	r2, #43	@ 0x2b
 800c138:	d077      	beq.n	800c22a <_strtod_l+0x27a>
 800c13a:	2a2d      	cmp	r2, #45	@ 0x2d
 800c13c:	d07b      	beq.n	800c236 <_strtod_l+0x286>
 800c13e:	f04f 0c00 	mov.w	ip, #0
 800c142:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c146:	2909      	cmp	r1, #9
 800c148:	f240 8082 	bls.w	800c250 <_strtod_l+0x2a0>
 800c14c:	9419      	str	r4, [sp, #100]	@ 0x64
 800c14e:	f04f 0800 	mov.w	r8, #0
 800c152:	e0a2      	b.n	800c29a <_strtod_l+0x2ea>
 800c154:	2300      	movs	r3, #0
 800c156:	e7c7      	b.n	800c0e8 <_strtod_l+0x138>
 800c158:	2f08      	cmp	r7, #8
 800c15a:	bfd5      	itete	le
 800c15c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c15e:	9908      	ldrgt	r1, [sp, #32]
 800c160:	fb02 3301 	mlale	r3, r2, r1, r3
 800c164:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c168:	f100 0001 	add.w	r0, r0, #1
 800c16c:	bfd4      	ite	le
 800c16e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c170:	9308      	strgt	r3, [sp, #32]
 800c172:	3701      	adds	r7, #1
 800c174:	9019      	str	r0, [sp, #100]	@ 0x64
 800c176:	e7bf      	b.n	800c0f8 <_strtod_l+0x148>
 800c178:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c17a:	1c5a      	adds	r2, r3, #1
 800c17c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c17e:	785a      	ldrb	r2, [r3, #1]
 800c180:	b37f      	cbz	r7, 800c1e2 <_strtod_l+0x232>
 800c182:	4681      	mov	r9, r0
 800c184:	463d      	mov	r5, r7
 800c186:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c18a:	2b09      	cmp	r3, #9
 800c18c:	d912      	bls.n	800c1b4 <_strtod_l+0x204>
 800c18e:	2301      	movs	r3, #1
 800c190:	e7c4      	b.n	800c11c <_strtod_l+0x16c>
 800c192:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c194:	1c5a      	adds	r2, r3, #1
 800c196:	9219      	str	r2, [sp, #100]	@ 0x64
 800c198:	785a      	ldrb	r2, [r3, #1]
 800c19a:	3001      	adds	r0, #1
 800c19c:	2a30      	cmp	r2, #48	@ 0x30
 800c19e:	d0f8      	beq.n	800c192 <_strtod_l+0x1e2>
 800c1a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c1a4:	2b08      	cmp	r3, #8
 800c1a6:	f200 84d3 	bhi.w	800cb50 <_strtod_l+0xba0>
 800c1aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c1ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800c1ae:	4681      	mov	r9, r0
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	4605      	mov	r5, r0
 800c1b4:	3a30      	subs	r2, #48	@ 0x30
 800c1b6:	f100 0301 	add.w	r3, r0, #1
 800c1ba:	d02a      	beq.n	800c212 <_strtod_l+0x262>
 800c1bc:	4499      	add	r9, r3
 800c1be:	eb00 0c05 	add.w	ip, r0, r5
 800c1c2:	462b      	mov	r3, r5
 800c1c4:	210a      	movs	r1, #10
 800c1c6:	4563      	cmp	r3, ip
 800c1c8:	d10d      	bne.n	800c1e6 <_strtod_l+0x236>
 800c1ca:	1c69      	adds	r1, r5, #1
 800c1cc:	4401      	add	r1, r0
 800c1ce:	4428      	add	r0, r5
 800c1d0:	2808      	cmp	r0, #8
 800c1d2:	dc16      	bgt.n	800c202 <_strtod_l+0x252>
 800c1d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c1d6:	230a      	movs	r3, #10
 800c1d8:	fb03 2300 	mla	r3, r3, r0, r2
 800c1dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1de:	2300      	movs	r3, #0
 800c1e0:	e018      	b.n	800c214 <_strtod_l+0x264>
 800c1e2:	4638      	mov	r0, r7
 800c1e4:	e7da      	b.n	800c19c <_strtod_l+0x1ec>
 800c1e6:	2b08      	cmp	r3, #8
 800c1e8:	f103 0301 	add.w	r3, r3, #1
 800c1ec:	dc03      	bgt.n	800c1f6 <_strtod_l+0x246>
 800c1ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c1f0:	434e      	muls	r6, r1
 800c1f2:	960a      	str	r6, [sp, #40]	@ 0x28
 800c1f4:	e7e7      	b.n	800c1c6 <_strtod_l+0x216>
 800c1f6:	2b10      	cmp	r3, #16
 800c1f8:	bfde      	ittt	le
 800c1fa:	9e08      	ldrle	r6, [sp, #32]
 800c1fc:	434e      	mulle	r6, r1
 800c1fe:	9608      	strle	r6, [sp, #32]
 800c200:	e7e1      	b.n	800c1c6 <_strtod_l+0x216>
 800c202:	280f      	cmp	r0, #15
 800c204:	dceb      	bgt.n	800c1de <_strtod_l+0x22e>
 800c206:	9808      	ldr	r0, [sp, #32]
 800c208:	230a      	movs	r3, #10
 800c20a:	fb03 2300 	mla	r3, r3, r0, r2
 800c20e:	9308      	str	r3, [sp, #32]
 800c210:	e7e5      	b.n	800c1de <_strtod_l+0x22e>
 800c212:	4629      	mov	r1, r5
 800c214:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c216:	1c50      	adds	r0, r2, #1
 800c218:	9019      	str	r0, [sp, #100]	@ 0x64
 800c21a:	7852      	ldrb	r2, [r2, #1]
 800c21c:	4618      	mov	r0, r3
 800c21e:	460d      	mov	r5, r1
 800c220:	e7b1      	b.n	800c186 <_strtod_l+0x1d6>
 800c222:	f04f 0900 	mov.w	r9, #0
 800c226:	2301      	movs	r3, #1
 800c228:	e77d      	b.n	800c126 <_strtod_l+0x176>
 800c22a:	f04f 0c00 	mov.w	ip, #0
 800c22e:	1ca2      	adds	r2, r4, #2
 800c230:	9219      	str	r2, [sp, #100]	@ 0x64
 800c232:	78a2      	ldrb	r2, [r4, #2]
 800c234:	e785      	b.n	800c142 <_strtod_l+0x192>
 800c236:	f04f 0c01 	mov.w	ip, #1
 800c23a:	e7f8      	b.n	800c22e <_strtod_l+0x27e>
 800c23c:	08012470 	.word	0x08012470
 800c240:	08012458 	.word	0x08012458
 800c244:	7ff00000 	.word	0x7ff00000
 800c248:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c24a:	1c51      	adds	r1, r2, #1
 800c24c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c24e:	7852      	ldrb	r2, [r2, #1]
 800c250:	2a30      	cmp	r2, #48	@ 0x30
 800c252:	d0f9      	beq.n	800c248 <_strtod_l+0x298>
 800c254:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c258:	2908      	cmp	r1, #8
 800c25a:	f63f af78 	bhi.w	800c14e <_strtod_l+0x19e>
 800c25e:	3a30      	subs	r2, #48	@ 0x30
 800c260:	920e      	str	r2, [sp, #56]	@ 0x38
 800c262:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c264:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c266:	f04f 080a 	mov.w	r8, #10
 800c26a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c26c:	1c56      	adds	r6, r2, #1
 800c26e:	9619      	str	r6, [sp, #100]	@ 0x64
 800c270:	7852      	ldrb	r2, [r2, #1]
 800c272:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c276:	f1be 0f09 	cmp.w	lr, #9
 800c27a:	d939      	bls.n	800c2f0 <_strtod_l+0x340>
 800c27c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c27e:	1a76      	subs	r6, r6, r1
 800c280:	2e08      	cmp	r6, #8
 800c282:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c286:	dc03      	bgt.n	800c290 <_strtod_l+0x2e0>
 800c288:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c28a:	4588      	cmp	r8, r1
 800c28c:	bfa8      	it	ge
 800c28e:	4688      	movge	r8, r1
 800c290:	f1bc 0f00 	cmp.w	ip, #0
 800c294:	d001      	beq.n	800c29a <_strtod_l+0x2ea>
 800c296:	f1c8 0800 	rsb	r8, r8, #0
 800c29a:	2d00      	cmp	r5, #0
 800c29c:	d14e      	bne.n	800c33c <_strtod_l+0x38c>
 800c29e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c2a0:	4308      	orrs	r0, r1
 800c2a2:	f47f aebe 	bne.w	800c022 <_strtod_l+0x72>
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f47f aed6 	bne.w	800c058 <_strtod_l+0xa8>
 800c2ac:	2a69      	cmp	r2, #105	@ 0x69
 800c2ae:	d028      	beq.n	800c302 <_strtod_l+0x352>
 800c2b0:	dc25      	bgt.n	800c2fe <_strtod_l+0x34e>
 800c2b2:	2a49      	cmp	r2, #73	@ 0x49
 800c2b4:	d025      	beq.n	800c302 <_strtod_l+0x352>
 800c2b6:	2a4e      	cmp	r2, #78	@ 0x4e
 800c2b8:	f47f aece 	bne.w	800c058 <_strtod_l+0xa8>
 800c2bc:	499b      	ldr	r1, [pc, #620]	@ (800c52c <_strtod_l+0x57c>)
 800c2be:	a819      	add	r0, sp, #100	@ 0x64
 800c2c0:	f002 fece 	bl	800f060 <__match>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	f43f aec7 	beq.w	800c058 <_strtod_l+0xa8>
 800c2ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	2b28      	cmp	r3, #40	@ 0x28
 800c2d0:	d12e      	bne.n	800c330 <_strtod_l+0x380>
 800c2d2:	4997      	ldr	r1, [pc, #604]	@ (800c530 <_strtod_l+0x580>)
 800c2d4:	aa1c      	add	r2, sp, #112	@ 0x70
 800c2d6:	a819      	add	r0, sp, #100	@ 0x64
 800c2d8:	f002 fed6 	bl	800f088 <__hexnan>
 800c2dc:	2805      	cmp	r0, #5
 800c2de:	d127      	bne.n	800c330 <_strtod_l+0x380>
 800c2e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c2e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c2e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c2ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c2ee:	e698      	b.n	800c022 <_strtod_l+0x72>
 800c2f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c2f2:	fb08 2101 	mla	r1, r8, r1, r2
 800c2f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c2fa:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2fc:	e7b5      	b.n	800c26a <_strtod_l+0x2ba>
 800c2fe:	2a6e      	cmp	r2, #110	@ 0x6e
 800c300:	e7da      	b.n	800c2b8 <_strtod_l+0x308>
 800c302:	498c      	ldr	r1, [pc, #560]	@ (800c534 <_strtod_l+0x584>)
 800c304:	a819      	add	r0, sp, #100	@ 0x64
 800c306:	f002 feab 	bl	800f060 <__match>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	f43f aea4 	beq.w	800c058 <_strtod_l+0xa8>
 800c310:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c312:	4989      	ldr	r1, [pc, #548]	@ (800c538 <_strtod_l+0x588>)
 800c314:	3b01      	subs	r3, #1
 800c316:	a819      	add	r0, sp, #100	@ 0x64
 800c318:	9319      	str	r3, [sp, #100]	@ 0x64
 800c31a:	f002 fea1 	bl	800f060 <__match>
 800c31e:	b910      	cbnz	r0, 800c326 <_strtod_l+0x376>
 800c320:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c322:	3301      	adds	r3, #1
 800c324:	9319      	str	r3, [sp, #100]	@ 0x64
 800c326:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c548 <_strtod_l+0x598>
 800c32a:	f04f 0a00 	mov.w	sl, #0
 800c32e:	e678      	b.n	800c022 <_strtod_l+0x72>
 800c330:	4882      	ldr	r0, [pc, #520]	@ (800c53c <_strtod_l+0x58c>)
 800c332:	f001 fd49 	bl	800ddc8 <nan>
 800c336:	ec5b ab10 	vmov	sl, fp, d0
 800c33a:	e672      	b.n	800c022 <_strtod_l+0x72>
 800c33c:	eba8 0309 	sub.w	r3, r8, r9
 800c340:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c342:	9309      	str	r3, [sp, #36]	@ 0x24
 800c344:	2f00      	cmp	r7, #0
 800c346:	bf08      	it	eq
 800c348:	462f      	moveq	r7, r5
 800c34a:	2d10      	cmp	r5, #16
 800c34c:	462c      	mov	r4, r5
 800c34e:	bfa8      	it	ge
 800c350:	2410      	movge	r4, #16
 800c352:	f7f4 f8d7 	bl	8000504 <__aeabi_ui2d>
 800c356:	2d09      	cmp	r5, #9
 800c358:	4682      	mov	sl, r0
 800c35a:	468b      	mov	fp, r1
 800c35c:	dc13      	bgt.n	800c386 <_strtod_l+0x3d6>
 800c35e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c360:	2b00      	cmp	r3, #0
 800c362:	f43f ae5e 	beq.w	800c022 <_strtod_l+0x72>
 800c366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c368:	dd78      	ble.n	800c45c <_strtod_l+0x4ac>
 800c36a:	2b16      	cmp	r3, #22
 800c36c:	dc5f      	bgt.n	800c42e <_strtod_l+0x47e>
 800c36e:	4974      	ldr	r1, [pc, #464]	@ (800c540 <_strtod_l+0x590>)
 800c370:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c374:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c378:	4652      	mov	r2, sl
 800c37a:	465b      	mov	r3, fp
 800c37c:	f7f4 f93c 	bl	80005f8 <__aeabi_dmul>
 800c380:	4682      	mov	sl, r0
 800c382:	468b      	mov	fp, r1
 800c384:	e64d      	b.n	800c022 <_strtod_l+0x72>
 800c386:	4b6e      	ldr	r3, [pc, #440]	@ (800c540 <_strtod_l+0x590>)
 800c388:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c38c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c390:	f7f4 f932 	bl	80005f8 <__aeabi_dmul>
 800c394:	4682      	mov	sl, r0
 800c396:	9808      	ldr	r0, [sp, #32]
 800c398:	468b      	mov	fp, r1
 800c39a:	f7f4 f8b3 	bl	8000504 <__aeabi_ui2d>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	4650      	mov	r0, sl
 800c3a4:	4659      	mov	r1, fp
 800c3a6:	f7f3 ff71 	bl	800028c <__adddf3>
 800c3aa:	2d0f      	cmp	r5, #15
 800c3ac:	4682      	mov	sl, r0
 800c3ae:	468b      	mov	fp, r1
 800c3b0:	ddd5      	ble.n	800c35e <_strtod_l+0x3ae>
 800c3b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3b4:	1b2c      	subs	r4, r5, r4
 800c3b6:	441c      	add	r4, r3
 800c3b8:	2c00      	cmp	r4, #0
 800c3ba:	f340 8096 	ble.w	800c4ea <_strtod_l+0x53a>
 800c3be:	f014 030f 	ands.w	r3, r4, #15
 800c3c2:	d00a      	beq.n	800c3da <_strtod_l+0x42a>
 800c3c4:	495e      	ldr	r1, [pc, #376]	@ (800c540 <_strtod_l+0x590>)
 800c3c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c3ca:	4652      	mov	r2, sl
 800c3cc:	465b      	mov	r3, fp
 800c3ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3d2:	f7f4 f911 	bl	80005f8 <__aeabi_dmul>
 800c3d6:	4682      	mov	sl, r0
 800c3d8:	468b      	mov	fp, r1
 800c3da:	f034 040f 	bics.w	r4, r4, #15
 800c3de:	d073      	beq.n	800c4c8 <_strtod_l+0x518>
 800c3e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c3e4:	dd48      	ble.n	800c478 <_strtod_l+0x4c8>
 800c3e6:	2400      	movs	r4, #0
 800c3e8:	46a0      	mov	r8, r4
 800c3ea:	940a      	str	r4, [sp, #40]	@ 0x28
 800c3ec:	46a1      	mov	r9, r4
 800c3ee:	9a05      	ldr	r2, [sp, #20]
 800c3f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c548 <_strtod_l+0x598>
 800c3f4:	2322      	movs	r3, #34	@ 0x22
 800c3f6:	6013      	str	r3, [r2, #0]
 800c3f8:	f04f 0a00 	mov.w	sl, #0
 800c3fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f43f ae0f 	beq.w	800c022 <_strtod_l+0x72>
 800c404:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c406:	9805      	ldr	r0, [sp, #20]
 800c408:	f002 ffe2 	bl	800f3d0 <_Bfree>
 800c40c:	9805      	ldr	r0, [sp, #20]
 800c40e:	4649      	mov	r1, r9
 800c410:	f002 ffde 	bl	800f3d0 <_Bfree>
 800c414:	9805      	ldr	r0, [sp, #20]
 800c416:	4641      	mov	r1, r8
 800c418:	f002 ffda 	bl	800f3d0 <_Bfree>
 800c41c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c41e:	9805      	ldr	r0, [sp, #20]
 800c420:	f002 ffd6 	bl	800f3d0 <_Bfree>
 800c424:	9805      	ldr	r0, [sp, #20]
 800c426:	4621      	mov	r1, r4
 800c428:	f002 ffd2 	bl	800f3d0 <_Bfree>
 800c42c:	e5f9      	b.n	800c022 <_strtod_l+0x72>
 800c42e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c430:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c434:	4293      	cmp	r3, r2
 800c436:	dbbc      	blt.n	800c3b2 <_strtod_l+0x402>
 800c438:	4c41      	ldr	r4, [pc, #260]	@ (800c540 <_strtod_l+0x590>)
 800c43a:	f1c5 050f 	rsb	r5, r5, #15
 800c43e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c442:	4652      	mov	r2, sl
 800c444:	465b      	mov	r3, fp
 800c446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c44a:	f7f4 f8d5 	bl	80005f8 <__aeabi_dmul>
 800c44e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c450:	1b5d      	subs	r5, r3, r5
 800c452:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c456:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c45a:	e78f      	b.n	800c37c <_strtod_l+0x3cc>
 800c45c:	3316      	adds	r3, #22
 800c45e:	dba8      	blt.n	800c3b2 <_strtod_l+0x402>
 800c460:	4b37      	ldr	r3, [pc, #220]	@ (800c540 <_strtod_l+0x590>)
 800c462:	eba9 0808 	sub.w	r8, r9, r8
 800c466:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c46a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c46e:	4650      	mov	r0, sl
 800c470:	4659      	mov	r1, fp
 800c472:	f7f4 f9eb 	bl	800084c <__aeabi_ddiv>
 800c476:	e783      	b.n	800c380 <_strtod_l+0x3d0>
 800c478:	4b32      	ldr	r3, [pc, #200]	@ (800c544 <_strtod_l+0x594>)
 800c47a:	9308      	str	r3, [sp, #32]
 800c47c:	2300      	movs	r3, #0
 800c47e:	1124      	asrs	r4, r4, #4
 800c480:	4650      	mov	r0, sl
 800c482:	4659      	mov	r1, fp
 800c484:	461e      	mov	r6, r3
 800c486:	2c01      	cmp	r4, #1
 800c488:	dc21      	bgt.n	800c4ce <_strtod_l+0x51e>
 800c48a:	b10b      	cbz	r3, 800c490 <_strtod_l+0x4e0>
 800c48c:	4682      	mov	sl, r0
 800c48e:	468b      	mov	fp, r1
 800c490:	492c      	ldr	r1, [pc, #176]	@ (800c544 <_strtod_l+0x594>)
 800c492:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c496:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c49a:	4652      	mov	r2, sl
 800c49c:	465b      	mov	r3, fp
 800c49e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4a2:	f7f4 f8a9 	bl	80005f8 <__aeabi_dmul>
 800c4a6:	4b28      	ldr	r3, [pc, #160]	@ (800c548 <_strtod_l+0x598>)
 800c4a8:	460a      	mov	r2, r1
 800c4aa:	400b      	ands	r3, r1
 800c4ac:	4927      	ldr	r1, [pc, #156]	@ (800c54c <_strtod_l+0x59c>)
 800c4ae:	428b      	cmp	r3, r1
 800c4b0:	4682      	mov	sl, r0
 800c4b2:	d898      	bhi.n	800c3e6 <_strtod_l+0x436>
 800c4b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c4b8:	428b      	cmp	r3, r1
 800c4ba:	bf86      	itte	hi
 800c4bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c550 <_strtod_l+0x5a0>
 800c4c0:	f04f 3aff 	movhi.w	sl, #4294967295
 800c4c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	9308      	str	r3, [sp, #32]
 800c4cc:	e07a      	b.n	800c5c4 <_strtod_l+0x614>
 800c4ce:	07e2      	lsls	r2, r4, #31
 800c4d0:	d505      	bpl.n	800c4de <_strtod_l+0x52e>
 800c4d2:	9b08      	ldr	r3, [sp, #32]
 800c4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d8:	f7f4 f88e 	bl	80005f8 <__aeabi_dmul>
 800c4dc:	2301      	movs	r3, #1
 800c4de:	9a08      	ldr	r2, [sp, #32]
 800c4e0:	3208      	adds	r2, #8
 800c4e2:	3601      	adds	r6, #1
 800c4e4:	1064      	asrs	r4, r4, #1
 800c4e6:	9208      	str	r2, [sp, #32]
 800c4e8:	e7cd      	b.n	800c486 <_strtod_l+0x4d6>
 800c4ea:	d0ed      	beq.n	800c4c8 <_strtod_l+0x518>
 800c4ec:	4264      	negs	r4, r4
 800c4ee:	f014 020f 	ands.w	r2, r4, #15
 800c4f2:	d00a      	beq.n	800c50a <_strtod_l+0x55a>
 800c4f4:	4b12      	ldr	r3, [pc, #72]	@ (800c540 <_strtod_l+0x590>)
 800c4f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4fa:	4650      	mov	r0, sl
 800c4fc:	4659      	mov	r1, fp
 800c4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c502:	f7f4 f9a3 	bl	800084c <__aeabi_ddiv>
 800c506:	4682      	mov	sl, r0
 800c508:	468b      	mov	fp, r1
 800c50a:	1124      	asrs	r4, r4, #4
 800c50c:	d0dc      	beq.n	800c4c8 <_strtod_l+0x518>
 800c50e:	2c1f      	cmp	r4, #31
 800c510:	dd20      	ble.n	800c554 <_strtod_l+0x5a4>
 800c512:	2400      	movs	r4, #0
 800c514:	46a0      	mov	r8, r4
 800c516:	940a      	str	r4, [sp, #40]	@ 0x28
 800c518:	46a1      	mov	r9, r4
 800c51a:	9a05      	ldr	r2, [sp, #20]
 800c51c:	2322      	movs	r3, #34	@ 0x22
 800c51e:	f04f 0a00 	mov.w	sl, #0
 800c522:	f04f 0b00 	mov.w	fp, #0
 800c526:	6013      	str	r3, [r2, #0]
 800c528:	e768      	b.n	800c3fc <_strtod_l+0x44c>
 800c52a:	bf00      	nop
 800c52c:	080125be 	.word	0x080125be
 800c530:	0801245c 	.word	0x0801245c
 800c534:	080125b6 	.word	0x080125b6
 800c538:	080126a2 	.word	0x080126a2
 800c53c:	0801269e 	.word	0x0801269e
 800c540:	08012808 	.word	0x08012808
 800c544:	080127e0 	.word	0x080127e0
 800c548:	7ff00000 	.word	0x7ff00000
 800c54c:	7ca00000 	.word	0x7ca00000
 800c550:	7fefffff 	.word	0x7fefffff
 800c554:	f014 0310 	ands.w	r3, r4, #16
 800c558:	bf18      	it	ne
 800c55a:	236a      	movne	r3, #106	@ 0x6a
 800c55c:	4ea9      	ldr	r6, [pc, #676]	@ (800c804 <_strtod_l+0x854>)
 800c55e:	9308      	str	r3, [sp, #32]
 800c560:	4650      	mov	r0, sl
 800c562:	4659      	mov	r1, fp
 800c564:	2300      	movs	r3, #0
 800c566:	07e2      	lsls	r2, r4, #31
 800c568:	d504      	bpl.n	800c574 <_strtod_l+0x5c4>
 800c56a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c56e:	f7f4 f843 	bl	80005f8 <__aeabi_dmul>
 800c572:	2301      	movs	r3, #1
 800c574:	1064      	asrs	r4, r4, #1
 800c576:	f106 0608 	add.w	r6, r6, #8
 800c57a:	d1f4      	bne.n	800c566 <_strtod_l+0x5b6>
 800c57c:	b10b      	cbz	r3, 800c582 <_strtod_l+0x5d2>
 800c57e:	4682      	mov	sl, r0
 800c580:	468b      	mov	fp, r1
 800c582:	9b08      	ldr	r3, [sp, #32]
 800c584:	b1b3      	cbz	r3, 800c5b4 <_strtod_l+0x604>
 800c586:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c58a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c58e:	2b00      	cmp	r3, #0
 800c590:	4659      	mov	r1, fp
 800c592:	dd0f      	ble.n	800c5b4 <_strtod_l+0x604>
 800c594:	2b1f      	cmp	r3, #31
 800c596:	dd55      	ble.n	800c644 <_strtod_l+0x694>
 800c598:	2b34      	cmp	r3, #52	@ 0x34
 800c59a:	bfde      	ittt	le
 800c59c:	f04f 33ff 	movle.w	r3, #4294967295
 800c5a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c5a4:	4093      	lslle	r3, r2
 800c5a6:	f04f 0a00 	mov.w	sl, #0
 800c5aa:	bfcc      	ite	gt
 800c5ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c5b0:	ea03 0b01 	andle.w	fp, r3, r1
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	4650      	mov	r0, sl
 800c5ba:	4659      	mov	r1, fp
 800c5bc:	f7f4 fa84 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d1a6      	bne.n	800c512 <_strtod_l+0x562>
 800c5c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c5ca:	9805      	ldr	r0, [sp, #20]
 800c5cc:	462b      	mov	r3, r5
 800c5ce:	463a      	mov	r2, r7
 800c5d0:	f002 ff66 	bl	800f4a0 <__s2b>
 800c5d4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	f43f af05 	beq.w	800c3e6 <_strtod_l+0x436>
 800c5dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5de:	2a00      	cmp	r2, #0
 800c5e0:	eba9 0308 	sub.w	r3, r9, r8
 800c5e4:	bfa8      	it	ge
 800c5e6:	2300      	movge	r3, #0
 800c5e8:	9312      	str	r3, [sp, #72]	@ 0x48
 800c5ea:	2400      	movs	r4, #0
 800c5ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c5f0:	9316      	str	r3, [sp, #88]	@ 0x58
 800c5f2:	46a0      	mov	r8, r4
 800c5f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5f6:	9805      	ldr	r0, [sp, #20]
 800c5f8:	6859      	ldr	r1, [r3, #4]
 800c5fa:	f002 fea9 	bl	800f350 <_Balloc>
 800c5fe:	4681      	mov	r9, r0
 800c600:	2800      	cmp	r0, #0
 800c602:	f43f aef4 	beq.w	800c3ee <_strtod_l+0x43e>
 800c606:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c608:	691a      	ldr	r2, [r3, #16]
 800c60a:	3202      	adds	r2, #2
 800c60c:	f103 010c 	add.w	r1, r3, #12
 800c610:	0092      	lsls	r2, r2, #2
 800c612:	300c      	adds	r0, #12
 800c614:	f001 fbc7 	bl	800dda6 <memcpy>
 800c618:	ec4b ab10 	vmov	d0, sl, fp
 800c61c:	9805      	ldr	r0, [sp, #20]
 800c61e:	aa1c      	add	r2, sp, #112	@ 0x70
 800c620:	a91b      	add	r1, sp, #108	@ 0x6c
 800c622:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c626:	f003 fa77 	bl	800fb18 <__d2b>
 800c62a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c62c:	2800      	cmp	r0, #0
 800c62e:	f43f aede 	beq.w	800c3ee <_strtod_l+0x43e>
 800c632:	9805      	ldr	r0, [sp, #20]
 800c634:	2101      	movs	r1, #1
 800c636:	f002 ffc9 	bl	800f5cc <__i2b>
 800c63a:	4680      	mov	r8, r0
 800c63c:	b948      	cbnz	r0, 800c652 <_strtod_l+0x6a2>
 800c63e:	f04f 0800 	mov.w	r8, #0
 800c642:	e6d4      	b.n	800c3ee <_strtod_l+0x43e>
 800c644:	f04f 32ff 	mov.w	r2, #4294967295
 800c648:	fa02 f303 	lsl.w	r3, r2, r3
 800c64c:	ea03 0a0a 	and.w	sl, r3, sl
 800c650:	e7b0      	b.n	800c5b4 <_strtod_l+0x604>
 800c652:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c654:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c656:	2d00      	cmp	r5, #0
 800c658:	bfab      	itete	ge
 800c65a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c65c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c65e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c660:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c662:	bfac      	ite	ge
 800c664:	18ef      	addge	r7, r5, r3
 800c666:	1b5e      	sublt	r6, r3, r5
 800c668:	9b08      	ldr	r3, [sp, #32]
 800c66a:	1aed      	subs	r5, r5, r3
 800c66c:	4415      	add	r5, r2
 800c66e:	4b66      	ldr	r3, [pc, #408]	@ (800c808 <_strtod_l+0x858>)
 800c670:	3d01      	subs	r5, #1
 800c672:	429d      	cmp	r5, r3
 800c674:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c678:	da50      	bge.n	800c71c <_strtod_l+0x76c>
 800c67a:	1b5b      	subs	r3, r3, r5
 800c67c:	2b1f      	cmp	r3, #31
 800c67e:	eba2 0203 	sub.w	r2, r2, r3
 800c682:	f04f 0101 	mov.w	r1, #1
 800c686:	dc3d      	bgt.n	800c704 <_strtod_l+0x754>
 800c688:	fa01 f303 	lsl.w	r3, r1, r3
 800c68c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c68e:	2300      	movs	r3, #0
 800c690:	9310      	str	r3, [sp, #64]	@ 0x40
 800c692:	18bd      	adds	r5, r7, r2
 800c694:	9b08      	ldr	r3, [sp, #32]
 800c696:	42af      	cmp	r7, r5
 800c698:	4416      	add	r6, r2
 800c69a:	441e      	add	r6, r3
 800c69c:	463b      	mov	r3, r7
 800c69e:	bfa8      	it	ge
 800c6a0:	462b      	movge	r3, r5
 800c6a2:	42b3      	cmp	r3, r6
 800c6a4:	bfa8      	it	ge
 800c6a6:	4633      	movge	r3, r6
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	bfc2      	ittt	gt
 800c6ac:	1aed      	subgt	r5, r5, r3
 800c6ae:	1af6      	subgt	r6, r6, r3
 800c6b0:	1aff      	subgt	r7, r7, r3
 800c6b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	dd16      	ble.n	800c6e6 <_strtod_l+0x736>
 800c6b8:	4641      	mov	r1, r8
 800c6ba:	9805      	ldr	r0, [sp, #20]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	f003 f845 	bl	800f74c <__pow5mult>
 800c6c2:	4680      	mov	r8, r0
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	d0ba      	beq.n	800c63e <_strtod_l+0x68e>
 800c6c8:	4601      	mov	r1, r0
 800c6ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c6cc:	9805      	ldr	r0, [sp, #20]
 800c6ce:	f002 ff93 	bl	800f5f8 <__multiply>
 800c6d2:	900e      	str	r0, [sp, #56]	@ 0x38
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	f43f ae8a 	beq.w	800c3ee <_strtod_l+0x43e>
 800c6da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c6dc:	9805      	ldr	r0, [sp, #20]
 800c6de:	f002 fe77 	bl	800f3d0 <_Bfree>
 800c6e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6e6:	2d00      	cmp	r5, #0
 800c6e8:	dc1d      	bgt.n	800c726 <_strtod_l+0x776>
 800c6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	dd23      	ble.n	800c738 <_strtod_l+0x788>
 800c6f0:	4649      	mov	r1, r9
 800c6f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c6f4:	9805      	ldr	r0, [sp, #20]
 800c6f6:	f003 f829 	bl	800f74c <__pow5mult>
 800c6fa:	4681      	mov	r9, r0
 800c6fc:	b9e0      	cbnz	r0, 800c738 <_strtod_l+0x788>
 800c6fe:	f04f 0900 	mov.w	r9, #0
 800c702:	e674      	b.n	800c3ee <_strtod_l+0x43e>
 800c704:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c708:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c70c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c710:	35e2      	adds	r5, #226	@ 0xe2
 800c712:	fa01 f305 	lsl.w	r3, r1, r5
 800c716:	9310      	str	r3, [sp, #64]	@ 0x40
 800c718:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c71a:	e7ba      	b.n	800c692 <_strtod_l+0x6e2>
 800c71c:	2300      	movs	r3, #0
 800c71e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c720:	2301      	movs	r3, #1
 800c722:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c724:	e7b5      	b.n	800c692 <_strtod_l+0x6e2>
 800c726:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c728:	9805      	ldr	r0, [sp, #20]
 800c72a:	462a      	mov	r2, r5
 800c72c:	f003 f868 	bl	800f800 <__lshift>
 800c730:	901a      	str	r0, [sp, #104]	@ 0x68
 800c732:	2800      	cmp	r0, #0
 800c734:	d1d9      	bne.n	800c6ea <_strtod_l+0x73a>
 800c736:	e65a      	b.n	800c3ee <_strtod_l+0x43e>
 800c738:	2e00      	cmp	r6, #0
 800c73a:	dd07      	ble.n	800c74c <_strtod_l+0x79c>
 800c73c:	4649      	mov	r1, r9
 800c73e:	9805      	ldr	r0, [sp, #20]
 800c740:	4632      	mov	r2, r6
 800c742:	f003 f85d 	bl	800f800 <__lshift>
 800c746:	4681      	mov	r9, r0
 800c748:	2800      	cmp	r0, #0
 800c74a:	d0d8      	beq.n	800c6fe <_strtod_l+0x74e>
 800c74c:	2f00      	cmp	r7, #0
 800c74e:	dd08      	ble.n	800c762 <_strtod_l+0x7b2>
 800c750:	4641      	mov	r1, r8
 800c752:	9805      	ldr	r0, [sp, #20]
 800c754:	463a      	mov	r2, r7
 800c756:	f003 f853 	bl	800f800 <__lshift>
 800c75a:	4680      	mov	r8, r0
 800c75c:	2800      	cmp	r0, #0
 800c75e:	f43f ae46 	beq.w	800c3ee <_strtod_l+0x43e>
 800c762:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c764:	9805      	ldr	r0, [sp, #20]
 800c766:	464a      	mov	r2, r9
 800c768:	f003 f8d2 	bl	800f910 <__mdiff>
 800c76c:	4604      	mov	r4, r0
 800c76e:	2800      	cmp	r0, #0
 800c770:	f43f ae3d 	beq.w	800c3ee <_strtod_l+0x43e>
 800c774:	68c3      	ldr	r3, [r0, #12]
 800c776:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c778:	2300      	movs	r3, #0
 800c77a:	60c3      	str	r3, [r0, #12]
 800c77c:	4641      	mov	r1, r8
 800c77e:	f003 f8ab 	bl	800f8d8 <__mcmp>
 800c782:	2800      	cmp	r0, #0
 800c784:	da46      	bge.n	800c814 <_strtod_l+0x864>
 800c786:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c788:	ea53 030a 	orrs.w	r3, r3, sl
 800c78c:	d16c      	bne.n	800c868 <_strtod_l+0x8b8>
 800c78e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c792:	2b00      	cmp	r3, #0
 800c794:	d168      	bne.n	800c868 <_strtod_l+0x8b8>
 800c796:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c79a:	0d1b      	lsrs	r3, r3, #20
 800c79c:	051b      	lsls	r3, r3, #20
 800c79e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c7a2:	d961      	bls.n	800c868 <_strtod_l+0x8b8>
 800c7a4:	6963      	ldr	r3, [r4, #20]
 800c7a6:	b913      	cbnz	r3, 800c7ae <_strtod_l+0x7fe>
 800c7a8:	6923      	ldr	r3, [r4, #16]
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	dd5c      	ble.n	800c868 <_strtod_l+0x8b8>
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	9805      	ldr	r0, [sp, #20]
 800c7b4:	f003 f824 	bl	800f800 <__lshift>
 800c7b8:	4641      	mov	r1, r8
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	f003 f88c 	bl	800f8d8 <__mcmp>
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	dd51      	ble.n	800c868 <_strtod_l+0x8b8>
 800c7c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c7c8:	9a08      	ldr	r2, [sp, #32]
 800c7ca:	0d1b      	lsrs	r3, r3, #20
 800c7cc:	051b      	lsls	r3, r3, #20
 800c7ce:	2a00      	cmp	r2, #0
 800c7d0:	d06b      	beq.n	800c8aa <_strtod_l+0x8fa>
 800c7d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c7d6:	d868      	bhi.n	800c8aa <_strtod_l+0x8fa>
 800c7d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c7dc:	f67f ae9d 	bls.w	800c51a <_strtod_l+0x56a>
 800c7e0:	4b0a      	ldr	r3, [pc, #40]	@ (800c80c <_strtod_l+0x85c>)
 800c7e2:	4650      	mov	r0, sl
 800c7e4:	4659      	mov	r1, fp
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f7f3 ff06 	bl	80005f8 <__aeabi_dmul>
 800c7ec:	4b08      	ldr	r3, [pc, #32]	@ (800c810 <_strtod_l+0x860>)
 800c7ee:	400b      	ands	r3, r1
 800c7f0:	4682      	mov	sl, r0
 800c7f2:	468b      	mov	fp, r1
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f47f ae05 	bne.w	800c404 <_strtod_l+0x454>
 800c7fa:	9a05      	ldr	r2, [sp, #20]
 800c7fc:	2322      	movs	r3, #34	@ 0x22
 800c7fe:	6013      	str	r3, [r2, #0]
 800c800:	e600      	b.n	800c404 <_strtod_l+0x454>
 800c802:	bf00      	nop
 800c804:	08012488 	.word	0x08012488
 800c808:	fffffc02 	.word	0xfffffc02
 800c80c:	39500000 	.word	0x39500000
 800c810:	7ff00000 	.word	0x7ff00000
 800c814:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c818:	d165      	bne.n	800c8e6 <_strtod_l+0x936>
 800c81a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c81c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c820:	b35a      	cbz	r2, 800c87a <_strtod_l+0x8ca>
 800c822:	4a9f      	ldr	r2, [pc, #636]	@ (800caa0 <_strtod_l+0xaf0>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d12b      	bne.n	800c880 <_strtod_l+0x8d0>
 800c828:	9b08      	ldr	r3, [sp, #32]
 800c82a:	4651      	mov	r1, sl
 800c82c:	b303      	cbz	r3, 800c870 <_strtod_l+0x8c0>
 800c82e:	4b9d      	ldr	r3, [pc, #628]	@ (800caa4 <_strtod_l+0xaf4>)
 800c830:	465a      	mov	r2, fp
 800c832:	4013      	ands	r3, r2
 800c834:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c838:	f04f 32ff 	mov.w	r2, #4294967295
 800c83c:	d81b      	bhi.n	800c876 <_strtod_l+0x8c6>
 800c83e:	0d1b      	lsrs	r3, r3, #20
 800c840:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c844:	fa02 f303 	lsl.w	r3, r2, r3
 800c848:	4299      	cmp	r1, r3
 800c84a:	d119      	bne.n	800c880 <_strtod_l+0x8d0>
 800c84c:	4b96      	ldr	r3, [pc, #600]	@ (800caa8 <_strtod_l+0xaf8>)
 800c84e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c850:	429a      	cmp	r2, r3
 800c852:	d102      	bne.n	800c85a <_strtod_l+0x8aa>
 800c854:	3101      	adds	r1, #1
 800c856:	f43f adca 	beq.w	800c3ee <_strtod_l+0x43e>
 800c85a:	4b92      	ldr	r3, [pc, #584]	@ (800caa4 <_strtod_l+0xaf4>)
 800c85c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c85e:	401a      	ands	r2, r3
 800c860:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c864:	f04f 0a00 	mov.w	sl, #0
 800c868:	9b08      	ldr	r3, [sp, #32]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1b8      	bne.n	800c7e0 <_strtod_l+0x830>
 800c86e:	e5c9      	b.n	800c404 <_strtod_l+0x454>
 800c870:	f04f 33ff 	mov.w	r3, #4294967295
 800c874:	e7e8      	b.n	800c848 <_strtod_l+0x898>
 800c876:	4613      	mov	r3, r2
 800c878:	e7e6      	b.n	800c848 <_strtod_l+0x898>
 800c87a:	ea53 030a 	orrs.w	r3, r3, sl
 800c87e:	d0a1      	beq.n	800c7c4 <_strtod_l+0x814>
 800c880:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c882:	b1db      	cbz	r3, 800c8bc <_strtod_l+0x90c>
 800c884:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c886:	4213      	tst	r3, r2
 800c888:	d0ee      	beq.n	800c868 <_strtod_l+0x8b8>
 800c88a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c88c:	9a08      	ldr	r2, [sp, #32]
 800c88e:	4650      	mov	r0, sl
 800c890:	4659      	mov	r1, fp
 800c892:	b1bb      	cbz	r3, 800c8c4 <_strtod_l+0x914>
 800c894:	f7ff fb6b 	bl	800bf6e <sulp>
 800c898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c89c:	ec53 2b10 	vmov	r2, r3, d0
 800c8a0:	f7f3 fcf4 	bl	800028c <__adddf3>
 800c8a4:	4682      	mov	sl, r0
 800c8a6:	468b      	mov	fp, r1
 800c8a8:	e7de      	b.n	800c868 <_strtod_l+0x8b8>
 800c8aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c8ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c8b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c8b6:	f04f 3aff 	mov.w	sl, #4294967295
 800c8ba:	e7d5      	b.n	800c868 <_strtod_l+0x8b8>
 800c8bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c8be:	ea13 0f0a 	tst.w	r3, sl
 800c8c2:	e7e1      	b.n	800c888 <_strtod_l+0x8d8>
 800c8c4:	f7ff fb53 	bl	800bf6e <sulp>
 800c8c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8cc:	ec53 2b10 	vmov	r2, r3, d0
 800c8d0:	f7f3 fcda 	bl	8000288 <__aeabi_dsub>
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	4682      	mov	sl, r0
 800c8da:	468b      	mov	fp, r1
 800c8dc:	f7f4 f8f4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	d0c1      	beq.n	800c868 <_strtod_l+0x8b8>
 800c8e4:	e619      	b.n	800c51a <_strtod_l+0x56a>
 800c8e6:	4641      	mov	r1, r8
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f003 f96d 	bl	800fbc8 <__ratio>
 800c8ee:	ec57 6b10 	vmov	r6, r7, d0
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	4639      	mov	r1, r7
 800c8fc:	f7f4 f8f8 	bl	8000af0 <__aeabi_dcmple>
 800c900:	2800      	cmp	r0, #0
 800c902:	d06f      	beq.n	800c9e4 <_strtod_l+0xa34>
 800c904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c906:	2b00      	cmp	r3, #0
 800c908:	d17a      	bne.n	800ca00 <_strtod_l+0xa50>
 800c90a:	f1ba 0f00 	cmp.w	sl, #0
 800c90e:	d158      	bne.n	800c9c2 <_strtod_l+0xa12>
 800c910:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c912:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c916:	2b00      	cmp	r3, #0
 800c918:	d15a      	bne.n	800c9d0 <_strtod_l+0xa20>
 800c91a:	4b64      	ldr	r3, [pc, #400]	@ (800caac <_strtod_l+0xafc>)
 800c91c:	2200      	movs	r2, #0
 800c91e:	4630      	mov	r0, r6
 800c920:	4639      	mov	r1, r7
 800c922:	f7f4 f8db 	bl	8000adc <__aeabi_dcmplt>
 800c926:	2800      	cmp	r0, #0
 800c928:	d159      	bne.n	800c9de <_strtod_l+0xa2e>
 800c92a:	4630      	mov	r0, r6
 800c92c:	4639      	mov	r1, r7
 800c92e:	4b60      	ldr	r3, [pc, #384]	@ (800cab0 <_strtod_l+0xb00>)
 800c930:	2200      	movs	r2, #0
 800c932:	f7f3 fe61 	bl	80005f8 <__aeabi_dmul>
 800c936:	4606      	mov	r6, r0
 800c938:	460f      	mov	r7, r1
 800c93a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c93e:	9606      	str	r6, [sp, #24]
 800c940:	9307      	str	r3, [sp, #28]
 800c942:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c946:	4d57      	ldr	r5, [pc, #348]	@ (800caa4 <_strtod_l+0xaf4>)
 800c948:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c94c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c94e:	401d      	ands	r5, r3
 800c950:	4b58      	ldr	r3, [pc, #352]	@ (800cab4 <_strtod_l+0xb04>)
 800c952:	429d      	cmp	r5, r3
 800c954:	f040 80b2 	bne.w	800cabc <_strtod_l+0xb0c>
 800c958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c95a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c95e:	ec4b ab10 	vmov	d0, sl, fp
 800c962:	f003 f869 	bl	800fa38 <__ulp>
 800c966:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c96a:	ec51 0b10 	vmov	r0, r1, d0
 800c96e:	f7f3 fe43 	bl	80005f8 <__aeabi_dmul>
 800c972:	4652      	mov	r2, sl
 800c974:	465b      	mov	r3, fp
 800c976:	f7f3 fc89 	bl	800028c <__adddf3>
 800c97a:	460b      	mov	r3, r1
 800c97c:	4949      	ldr	r1, [pc, #292]	@ (800caa4 <_strtod_l+0xaf4>)
 800c97e:	4a4e      	ldr	r2, [pc, #312]	@ (800cab8 <_strtod_l+0xb08>)
 800c980:	4019      	ands	r1, r3
 800c982:	4291      	cmp	r1, r2
 800c984:	4682      	mov	sl, r0
 800c986:	d942      	bls.n	800ca0e <_strtod_l+0xa5e>
 800c988:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c98a:	4b47      	ldr	r3, [pc, #284]	@ (800caa8 <_strtod_l+0xaf8>)
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d103      	bne.n	800c998 <_strtod_l+0x9e8>
 800c990:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c992:	3301      	adds	r3, #1
 800c994:	f43f ad2b 	beq.w	800c3ee <_strtod_l+0x43e>
 800c998:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800caa8 <_strtod_l+0xaf8>
 800c99c:	f04f 3aff 	mov.w	sl, #4294967295
 800c9a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9a2:	9805      	ldr	r0, [sp, #20]
 800c9a4:	f002 fd14 	bl	800f3d0 <_Bfree>
 800c9a8:	9805      	ldr	r0, [sp, #20]
 800c9aa:	4649      	mov	r1, r9
 800c9ac:	f002 fd10 	bl	800f3d0 <_Bfree>
 800c9b0:	9805      	ldr	r0, [sp, #20]
 800c9b2:	4641      	mov	r1, r8
 800c9b4:	f002 fd0c 	bl	800f3d0 <_Bfree>
 800c9b8:	9805      	ldr	r0, [sp, #20]
 800c9ba:	4621      	mov	r1, r4
 800c9bc:	f002 fd08 	bl	800f3d0 <_Bfree>
 800c9c0:	e618      	b.n	800c5f4 <_strtod_l+0x644>
 800c9c2:	f1ba 0f01 	cmp.w	sl, #1
 800c9c6:	d103      	bne.n	800c9d0 <_strtod_l+0xa20>
 800c9c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f43f ada5 	beq.w	800c51a <_strtod_l+0x56a>
 800c9d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ca80 <_strtod_l+0xad0>
 800c9d4:	4f35      	ldr	r7, [pc, #212]	@ (800caac <_strtod_l+0xafc>)
 800c9d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c9da:	2600      	movs	r6, #0
 800c9dc:	e7b1      	b.n	800c942 <_strtod_l+0x992>
 800c9de:	4f34      	ldr	r7, [pc, #208]	@ (800cab0 <_strtod_l+0xb00>)
 800c9e0:	2600      	movs	r6, #0
 800c9e2:	e7aa      	b.n	800c93a <_strtod_l+0x98a>
 800c9e4:	4b32      	ldr	r3, [pc, #200]	@ (800cab0 <_strtod_l+0xb00>)
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	4639      	mov	r1, r7
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f7f3 fe04 	bl	80005f8 <__aeabi_dmul>
 800c9f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9f2:	4606      	mov	r6, r0
 800c9f4:	460f      	mov	r7, r1
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d09f      	beq.n	800c93a <_strtod_l+0x98a>
 800c9fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c9fe:	e7a0      	b.n	800c942 <_strtod_l+0x992>
 800ca00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ca88 <_strtod_l+0xad8>
 800ca04:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ca08:	ec57 6b17 	vmov	r6, r7, d7
 800ca0c:	e799      	b.n	800c942 <_strtod_l+0x992>
 800ca0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ca12:	9b08      	ldr	r3, [sp, #32]
 800ca14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d1c1      	bne.n	800c9a0 <_strtod_l+0x9f0>
 800ca1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca20:	0d1b      	lsrs	r3, r3, #20
 800ca22:	051b      	lsls	r3, r3, #20
 800ca24:	429d      	cmp	r5, r3
 800ca26:	d1bb      	bne.n	800c9a0 <_strtod_l+0x9f0>
 800ca28:	4630      	mov	r0, r6
 800ca2a:	4639      	mov	r1, r7
 800ca2c:	f7f4 f944 	bl	8000cb8 <__aeabi_d2lz>
 800ca30:	f7f3 fdb4 	bl	800059c <__aeabi_l2d>
 800ca34:	4602      	mov	r2, r0
 800ca36:	460b      	mov	r3, r1
 800ca38:	4630      	mov	r0, r6
 800ca3a:	4639      	mov	r1, r7
 800ca3c:	f7f3 fc24 	bl	8000288 <__aeabi_dsub>
 800ca40:	460b      	mov	r3, r1
 800ca42:	4602      	mov	r2, r0
 800ca44:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ca48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ca4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca4e:	ea46 060a 	orr.w	r6, r6, sl
 800ca52:	431e      	orrs	r6, r3
 800ca54:	d06f      	beq.n	800cb36 <_strtod_l+0xb86>
 800ca56:	a30e      	add	r3, pc, #56	@ (adr r3, 800ca90 <_strtod_l+0xae0>)
 800ca58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5c:	f7f4 f83e 	bl	8000adc <__aeabi_dcmplt>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	f47f accf 	bne.w	800c404 <_strtod_l+0x454>
 800ca66:	a30c      	add	r3, pc, #48	@ (adr r3, 800ca98 <_strtod_l+0xae8>)
 800ca68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca70:	f7f4 f852 	bl	8000b18 <__aeabi_dcmpgt>
 800ca74:	2800      	cmp	r0, #0
 800ca76:	d093      	beq.n	800c9a0 <_strtod_l+0x9f0>
 800ca78:	e4c4      	b.n	800c404 <_strtod_l+0x454>
 800ca7a:	bf00      	nop
 800ca7c:	f3af 8000 	nop.w
 800ca80:	00000000 	.word	0x00000000
 800ca84:	bff00000 	.word	0xbff00000
 800ca88:	00000000 	.word	0x00000000
 800ca8c:	3ff00000 	.word	0x3ff00000
 800ca90:	94a03595 	.word	0x94a03595
 800ca94:	3fdfffff 	.word	0x3fdfffff
 800ca98:	35afe535 	.word	0x35afe535
 800ca9c:	3fe00000 	.word	0x3fe00000
 800caa0:	000fffff 	.word	0x000fffff
 800caa4:	7ff00000 	.word	0x7ff00000
 800caa8:	7fefffff 	.word	0x7fefffff
 800caac:	3ff00000 	.word	0x3ff00000
 800cab0:	3fe00000 	.word	0x3fe00000
 800cab4:	7fe00000 	.word	0x7fe00000
 800cab8:	7c9fffff 	.word	0x7c9fffff
 800cabc:	9b08      	ldr	r3, [sp, #32]
 800cabe:	b323      	cbz	r3, 800cb0a <_strtod_l+0xb5a>
 800cac0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cac4:	d821      	bhi.n	800cb0a <_strtod_l+0xb5a>
 800cac6:	a328      	add	r3, pc, #160	@ (adr r3, 800cb68 <_strtod_l+0xbb8>)
 800cac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cacc:	4630      	mov	r0, r6
 800cace:	4639      	mov	r1, r7
 800cad0:	f7f4 f80e 	bl	8000af0 <__aeabi_dcmple>
 800cad4:	b1a0      	cbz	r0, 800cb00 <_strtod_l+0xb50>
 800cad6:	4639      	mov	r1, r7
 800cad8:	4630      	mov	r0, r6
 800cada:	f7f4 f865 	bl	8000ba8 <__aeabi_d2uiz>
 800cade:	2801      	cmp	r0, #1
 800cae0:	bf38      	it	cc
 800cae2:	2001      	movcc	r0, #1
 800cae4:	f7f3 fd0e 	bl	8000504 <__aeabi_ui2d>
 800cae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800caea:	4606      	mov	r6, r0
 800caec:	460f      	mov	r7, r1
 800caee:	b9fb      	cbnz	r3, 800cb30 <_strtod_l+0xb80>
 800caf0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800caf4:	9014      	str	r0, [sp, #80]	@ 0x50
 800caf6:	9315      	str	r3, [sp, #84]	@ 0x54
 800caf8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cafc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cb00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cb02:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cb06:	1b5b      	subs	r3, r3, r5
 800cb08:	9311      	str	r3, [sp, #68]	@ 0x44
 800cb0a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cb0e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cb12:	f002 ff91 	bl	800fa38 <__ulp>
 800cb16:	4650      	mov	r0, sl
 800cb18:	ec53 2b10 	vmov	r2, r3, d0
 800cb1c:	4659      	mov	r1, fp
 800cb1e:	f7f3 fd6b 	bl	80005f8 <__aeabi_dmul>
 800cb22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cb26:	f7f3 fbb1 	bl	800028c <__adddf3>
 800cb2a:	4682      	mov	sl, r0
 800cb2c:	468b      	mov	fp, r1
 800cb2e:	e770      	b.n	800ca12 <_strtod_l+0xa62>
 800cb30:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cb34:	e7e0      	b.n	800caf8 <_strtod_l+0xb48>
 800cb36:	a30e      	add	r3, pc, #56	@ (adr r3, 800cb70 <_strtod_l+0xbc0>)
 800cb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3c:	f7f3 ffce 	bl	8000adc <__aeabi_dcmplt>
 800cb40:	e798      	b.n	800ca74 <_strtod_l+0xac4>
 800cb42:	2300      	movs	r3, #0
 800cb44:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb46:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cb48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb4a:	6013      	str	r3, [r2, #0]
 800cb4c:	f7ff ba6d 	b.w	800c02a <_strtod_l+0x7a>
 800cb50:	2a65      	cmp	r2, #101	@ 0x65
 800cb52:	f43f ab66 	beq.w	800c222 <_strtod_l+0x272>
 800cb56:	2a45      	cmp	r2, #69	@ 0x45
 800cb58:	f43f ab63 	beq.w	800c222 <_strtod_l+0x272>
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	f7ff bb9e 	b.w	800c29e <_strtod_l+0x2ee>
 800cb62:	bf00      	nop
 800cb64:	f3af 8000 	nop.w
 800cb68:	ffc00000 	.word	0xffc00000
 800cb6c:	41dfffff 	.word	0x41dfffff
 800cb70:	94a03595 	.word	0x94a03595
 800cb74:	3fcfffff 	.word	0x3fcfffff

0800cb78 <_strtod_r>:
 800cb78:	4b01      	ldr	r3, [pc, #4]	@ (800cb80 <_strtod_r+0x8>)
 800cb7a:	f7ff ba19 	b.w	800bfb0 <_strtod_l>
 800cb7e:	bf00      	nop
 800cb80:	200000f8 	.word	0x200000f8

0800cb84 <strtod>:
 800cb84:	460a      	mov	r2, r1
 800cb86:	4601      	mov	r1, r0
 800cb88:	4802      	ldr	r0, [pc, #8]	@ (800cb94 <strtod+0x10>)
 800cb8a:	4b03      	ldr	r3, [pc, #12]	@ (800cb98 <strtod+0x14>)
 800cb8c:	6800      	ldr	r0, [r0, #0]
 800cb8e:	f7ff ba0f 	b.w	800bfb0 <_strtod_l>
 800cb92:	bf00      	nop
 800cb94:	20000264 	.word	0x20000264
 800cb98:	200000f8 	.word	0x200000f8

0800cb9c <_strtol_l.constprop.0>:
 800cb9c:	2b24      	cmp	r3, #36	@ 0x24
 800cb9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba2:	4686      	mov	lr, r0
 800cba4:	4690      	mov	r8, r2
 800cba6:	d801      	bhi.n	800cbac <_strtol_l.constprop.0+0x10>
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d106      	bne.n	800cbba <_strtol_l.constprop.0+0x1e>
 800cbac:	f001 f8ce 	bl	800dd4c <__errno>
 800cbb0:	2316      	movs	r3, #22
 800cbb2:	6003      	str	r3, [r0, #0]
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbba:	4834      	ldr	r0, [pc, #208]	@ (800cc8c <_strtol_l.constprop.0+0xf0>)
 800cbbc:	460d      	mov	r5, r1
 800cbbe:	462a      	mov	r2, r5
 800cbc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbc4:	5d06      	ldrb	r6, [r0, r4]
 800cbc6:	f016 0608 	ands.w	r6, r6, #8
 800cbca:	d1f8      	bne.n	800cbbe <_strtol_l.constprop.0+0x22>
 800cbcc:	2c2d      	cmp	r4, #45	@ 0x2d
 800cbce:	d12d      	bne.n	800cc2c <_strtol_l.constprop.0+0x90>
 800cbd0:	782c      	ldrb	r4, [r5, #0]
 800cbd2:	2601      	movs	r6, #1
 800cbd4:	1c95      	adds	r5, r2, #2
 800cbd6:	f033 0210 	bics.w	r2, r3, #16
 800cbda:	d109      	bne.n	800cbf0 <_strtol_l.constprop.0+0x54>
 800cbdc:	2c30      	cmp	r4, #48	@ 0x30
 800cbde:	d12a      	bne.n	800cc36 <_strtol_l.constprop.0+0x9a>
 800cbe0:	782a      	ldrb	r2, [r5, #0]
 800cbe2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cbe6:	2a58      	cmp	r2, #88	@ 0x58
 800cbe8:	d125      	bne.n	800cc36 <_strtol_l.constprop.0+0x9a>
 800cbea:	786c      	ldrb	r4, [r5, #1]
 800cbec:	2310      	movs	r3, #16
 800cbee:	3502      	adds	r5, #2
 800cbf0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cbf4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	fbbc f9f3 	udiv	r9, ip, r3
 800cbfe:	4610      	mov	r0, r2
 800cc00:	fb03 ca19 	mls	sl, r3, r9, ip
 800cc04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cc08:	2f09      	cmp	r7, #9
 800cc0a:	d81b      	bhi.n	800cc44 <_strtol_l.constprop.0+0xa8>
 800cc0c:	463c      	mov	r4, r7
 800cc0e:	42a3      	cmp	r3, r4
 800cc10:	dd27      	ble.n	800cc62 <_strtol_l.constprop.0+0xc6>
 800cc12:	1c57      	adds	r7, r2, #1
 800cc14:	d007      	beq.n	800cc26 <_strtol_l.constprop.0+0x8a>
 800cc16:	4581      	cmp	r9, r0
 800cc18:	d320      	bcc.n	800cc5c <_strtol_l.constprop.0+0xc0>
 800cc1a:	d101      	bne.n	800cc20 <_strtol_l.constprop.0+0x84>
 800cc1c:	45a2      	cmp	sl, r4
 800cc1e:	db1d      	blt.n	800cc5c <_strtol_l.constprop.0+0xc0>
 800cc20:	fb00 4003 	mla	r0, r0, r3, r4
 800cc24:	2201      	movs	r2, #1
 800cc26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc2a:	e7eb      	b.n	800cc04 <_strtol_l.constprop.0+0x68>
 800cc2c:	2c2b      	cmp	r4, #43	@ 0x2b
 800cc2e:	bf04      	itt	eq
 800cc30:	782c      	ldrbeq	r4, [r5, #0]
 800cc32:	1c95      	addeq	r5, r2, #2
 800cc34:	e7cf      	b.n	800cbd6 <_strtol_l.constprop.0+0x3a>
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1da      	bne.n	800cbf0 <_strtol_l.constprop.0+0x54>
 800cc3a:	2c30      	cmp	r4, #48	@ 0x30
 800cc3c:	bf0c      	ite	eq
 800cc3e:	2308      	moveq	r3, #8
 800cc40:	230a      	movne	r3, #10
 800cc42:	e7d5      	b.n	800cbf0 <_strtol_l.constprop.0+0x54>
 800cc44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cc48:	2f19      	cmp	r7, #25
 800cc4a:	d801      	bhi.n	800cc50 <_strtol_l.constprop.0+0xb4>
 800cc4c:	3c37      	subs	r4, #55	@ 0x37
 800cc4e:	e7de      	b.n	800cc0e <_strtol_l.constprop.0+0x72>
 800cc50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cc54:	2f19      	cmp	r7, #25
 800cc56:	d804      	bhi.n	800cc62 <_strtol_l.constprop.0+0xc6>
 800cc58:	3c57      	subs	r4, #87	@ 0x57
 800cc5a:	e7d8      	b.n	800cc0e <_strtol_l.constprop.0+0x72>
 800cc5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc60:	e7e1      	b.n	800cc26 <_strtol_l.constprop.0+0x8a>
 800cc62:	1c53      	adds	r3, r2, #1
 800cc64:	d108      	bne.n	800cc78 <_strtol_l.constprop.0+0xdc>
 800cc66:	2322      	movs	r3, #34	@ 0x22
 800cc68:	f8ce 3000 	str.w	r3, [lr]
 800cc6c:	4660      	mov	r0, ip
 800cc6e:	f1b8 0f00 	cmp.w	r8, #0
 800cc72:	d0a0      	beq.n	800cbb6 <_strtol_l.constprop.0+0x1a>
 800cc74:	1e69      	subs	r1, r5, #1
 800cc76:	e006      	b.n	800cc86 <_strtol_l.constprop.0+0xea>
 800cc78:	b106      	cbz	r6, 800cc7c <_strtol_l.constprop.0+0xe0>
 800cc7a:	4240      	negs	r0, r0
 800cc7c:	f1b8 0f00 	cmp.w	r8, #0
 800cc80:	d099      	beq.n	800cbb6 <_strtol_l.constprop.0+0x1a>
 800cc82:	2a00      	cmp	r2, #0
 800cc84:	d1f6      	bne.n	800cc74 <_strtol_l.constprop.0+0xd8>
 800cc86:	f8c8 1000 	str.w	r1, [r8]
 800cc8a:	e794      	b.n	800cbb6 <_strtol_l.constprop.0+0x1a>
 800cc8c:	080124b1 	.word	0x080124b1

0800cc90 <_strtol_r>:
 800cc90:	f7ff bf84 	b.w	800cb9c <_strtol_l.constprop.0>

0800cc94 <strtol>:
 800cc94:	4613      	mov	r3, r2
 800cc96:	460a      	mov	r2, r1
 800cc98:	4601      	mov	r1, r0
 800cc9a:	4802      	ldr	r0, [pc, #8]	@ (800cca4 <strtol+0x10>)
 800cc9c:	6800      	ldr	r0, [r0, #0]
 800cc9e:	f7ff bf7d 	b.w	800cb9c <_strtol_l.constprop.0>
 800cca2:	bf00      	nop
 800cca4:	20000264 	.word	0x20000264

0800cca8 <__cvt>:
 800cca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccac:	ec57 6b10 	vmov	r6, r7, d0
 800ccb0:	2f00      	cmp	r7, #0
 800ccb2:	460c      	mov	r4, r1
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	463b      	mov	r3, r7
 800ccb8:	bfbb      	ittet	lt
 800ccba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ccbe:	461f      	movlt	r7, r3
 800ccc0:	2300      	movge	r3, #0
 800ccc2:	232d      	movlt	r3, #45	@ 0x2d
 800ccc4:	700b      	strb	r3, [r1, #0]
 800ccc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ccc8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cccc:	4691      	mov	r9, r2
 800ccce:	f023 0820 	bic.w	r8, r3, #32
 800ccd2:	bfbc      	itt	lt
 800ccd4:	4632      	movlt	r2, r6
 800ccd6:	4616      	movlt	r6, r2
 800ccd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ccdc:	d005      	beq.n	800ccea <__cvt+0x42>
 800ccde:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cce2:	d100      	bne.n	800cce6 <__cvt+0x3e>
 800cce4:	3401      	adds	r4, #1
 800cce6:	2102      	movs	r1, #2
 800cce8:	e000      	b.n	800ccec <__cvt+0x44>
 800ccea:	2103      	movs	r1, #3
 800ccec:	ab03      	add	r3, sp, #12
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	ab02      	add	r3, sp, #8
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	ec47 6b10 	vmov	d0, r6, r7
 800ccf8:	4653      	mov	r3, sl
 800ccfa:	4622      	mov	r2, r4
 800ccfc:	f001 f918 	bl	800df30 <_dtoa_r>
 800cd00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cd04:	4605      	mov	r5, r0
 800cd06:	d119      	bne.n	800cd3c <__cvt+0x94>
 800cd08:	f019 0f01 	tst.w	r9, #1
 800cd0c:	d00e      	beq.n	800cd2c <__cvt+0x84>
 800cd0e:	eb00 0904 	add.w	r9, r0, r4
 800cd12:	2200      	movs	r2, #0
 800cd14:	2300      	movs	r3, #0
 800cd16:	4630      	mov	r0, r6
 800cd18:	4639      	mov	r1, r7
 800cd1a:	f7f3 fed5 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd1e:	b108      	cbz	r0, 800cd24 <__cvt+0x7c>
 800cd20:	f8cd 900c 	str.w	r9, [sp, #12]
 800cd24:	2230      	movs	r2, #48	@ 0x30
 800cd26:	9b03      	ldr	r3, [sp, #12]
 800cd28:	454b      	cmp	r3, r9
 800cd2a:	d31e      	bcc.n	800cd6a <__cvt+0xc2>
 800cd2c:	9b03      	ldr	r3, [sp, #12]
 800cd2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd30:	1b5b      	subs	r3, r3, r5
 800cd32:	4628      	mov	r0, r5
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	b004      	add	sp, #16
 800cd38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cd40:	eb00 0904 	add.w	r9, r0, r4
 800cd44:	d1e5      	bne.n	800cd12 <__cvt+0x6a>
 800cd46:	7803      	ldrb	r3, [r0, #0]
 800cd48:	2b30      	cmp	r3, #48	@ 0x30
 800cd4a:	d10a      	bne.n	800cd62 <__cvt+0xba>
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	2300      	movs	r3, #0
 800cd50:	4630      	mov	r0, r6
 800cd52:	4639      	mov	r1, r7
 800cd54:	f7f3 feb8 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd58:	b918      	cbnz	r0, 800cd62 <__cvt+0xba>
 800cd5a:	f1c4 0401 	rsb	r4, r4, #1
 800cd5e:	f8ca 4000 	str.w	r4, [sl]
 800cd62:	f8da 3000 	ldr.w	r3, [sl]
 800cd66:	4499      	add	r9, r3
 800cd68:	e7d3      	b.n	800cd12 <__cvt+0x6a>
 800cd6a:	1c59      	adds	r1, r3, #1
 800cd6c:	9103      	str	r1, [sp, #12]
 800cd6e:	701a      	strb	r2, [r3, #0]
 800cd70:	e7d9      	b.n	800cd26 <__cvt+0x7e>

0800cd72 <__exponent>:
 800cd72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd74:	2900      	cmp	r1, #0
 800cd76:	bfba      	itte	lt
 800cd78:	4249      	neglt	r1, r1
 800cd7a:	232d      	movlt	r3, #45	@ 0x2d
 800cd7c:	232b      	movge	r3, #43	@ 0x2b
 800cd7e:	2909      	cmp	r1, #9
 800cd80:	7002      	strb	r2, [r0, #0]
 800cd82:	7043      	strb	r3, [r0, #1]
 800cd84:	dd29      	ble.n	800cdda <__exponent+0x68>
 800cd86:	f10d 0307 	add.w	r3, sp, #7
 800cd8a:	461d      	mov	r5, r3
 800cd8c:	270a      	movs	r7, #10
 800cd8e:	461a      	mov	r2, r3
 800cd90:	fbb1 f6f7 	udiv	r6, r1, r7
 800cd94:	fb07 1416 	mls	r4, r7, r6, r1
 800cd98:	3430      	adds	r4, #48	@ 0x30
 800cd9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cd9e:	460c      	mov	r4, r1
 800cda0:	2c63      	cmp	r4, #99	@ 0x63
 800cda2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cda6:	4631      	mov	r1, r6
 800cda8:	dcf1      	bgt.n	800cd8e <__exponent+0x1c>
 800cdaa:	3130      	adds	r1, #48	@ 0x30
 800cdac:	1e94      	subs	r4, r2, #2
 800cdae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cdb2:	1c41      	adds	r1, r0, #1
 800cdb4:	4623      	mov	r3, r4
 800cdb6:	42ab      	cmp	r3, r5
 800cdb8:	d30a      	bcc.n	800cdd0 <__exponent+0x5e>
 800cdba:	f10d 0309 	add.w	r3, sp, #9
 800cdbe:	1a9b      	subs	r3, r3, r2
 800cdc0:	42ac      	cmp	r4, r5
 800cdc2:	bf88      	it	hi
 800cdc4:	2300      	movhi	r3, #0
 800cdc6:	3302      	adds	r3, #2
 800cdc8:	4403      	add	r3, r0
 800cdca:	1a18      	subs	r0, r3, r0
 800cdcc:	b003      	add	sp, #12
 800cdce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdd0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cdd4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cdd8:	e7ed      	b.n	800cdb6 <__exponent+0x44>
 800cdda:	2330      	movs	r3, #48	@ 0x30
 800cddc:	3130      	adds	r1, #48	@ 0x30
 800cdde:	7083      	strb	r3, [r0, #2]
 800cde0:	70c1      	strb	r1, [r0, #3]
 800cde2:	1d03      	adds	r3, r0, #4
 800cde4:	e7f1      	b.n	800cdca <__exponent+0x58>
	...

0800cde8 <_printf_float>:
 800cde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdec:	b08d      	sub	sp, #52	@ 0x34
 800cdee:	460c      	mov	r4, r1
 800cdf0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cdf4:	4616      	mov	r6, r2
 800cdf6:	461f      	mov	r7, r3
 800cdf8:	4605      	mov	r5, r0
 800cdfa:	f000 ff5d 	bl	800dcb8 <_localeconv_r>
 800cdfe:	6803      	ldr	r3, [r0, #0]
 800ce00:	9304      	str	r3, [sp, #16]
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7f3 fa34 	bl	8000270 <strlen>
 800ce08:	2300      	movs	r3, #0
 800ce0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ce10:	9005      	str	r0, [sp, #20]
 800ce12:	3307      	adds	r3, #7
 800ce14:	f023 0307 	bic.w	r3, r3, #7
 800ce18:	f103 0208 	add.w	r2, r3, #8
 800ce1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ce20:	f8d4 b000 	ldr.w	fp, [r4]
 800ce24:	f8c8 2000 	str.w	r2, [r8]
 800ce28:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ce30:	9307      	str	r3, [sp, #28]
 800ce32:	f8cd 8018 	str.w	r8, [sp, #24]
 800ce36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ce3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce3e:	4b9c      	ldr	r3, [pc, #624]	@ (800d0b0 <_printf_float+0x2c8>)
 800ce40:	f04f 32ff 	mov.w	r2, #4294967295
 800ce44:	f7f3 fe72 	bl	8000b2c <__aeabi_dcmpun>
 800ce48:	bb70      	cbnz	r0, 800cea8 <_printf_float+0xc0>
 800ce4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce4e:	4b98      	ldr	r3, [pc, #608]	@ (800d0b0 <_printf_float+0x2c8>)
 800ce50:	f04f 32ff 	mov.w	r2, #4294967295
 800ce54:	f7f3 fe4c 	bl	8000af0 <__aeabi_dcmple>
 800ce58:	bb30      	cbnz	r0, 800cea8 <_printf_float+0xc0>
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	4640      	mov	r0, r8
 800ce60:	4649      	mov	r1, r9
 800ce62:	f7f3 fe3b 	bl	8000adc <__aeabi_dcmplt>
 800ce66:	b110      	cbz	r0, 800ce6e <_printf_float+0x86>
 800ce68:	232d      	movs	r3, #45	@ 0x2d
 800ce6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce6e:	4a91      	ldr	r2, [pc, #580]	@ (800d0b4 <_printf_float+0x2cc>)
 800ce70:	4b91      	ldr	r3, [pc, #580]	@ (800d0b8 <_printf_float+0x2d0>)
 800ce72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ce76:	bf94      	ite	ls
 800ce78:	4690      	movls	r8, r2
 800ce7a:	4698      	movhi	r8, r3
 800ce7c:	2303      	movs	r3, #3
 800ce7e:	6123      	str	r3, [r4, #16]
 800ce80:	f02b 0304 	bic.w	r3, fp, #4
 800ce84:	6023      	str	r3, [r4, #0]
 800ce86:	f04f 0900 	mov.w	r9, #0
 800ce8a:	9700      	str	r7, [sp, #0]
 800ce8c:	4633      	mov	r3, r6
 800ce8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ce90:	4621      	mov	r1, r4
 800ce92:	4628      	mov	r0, r5
 800ce94:	f000 f9d2 	bl	800d23c <_printf_common>
 800ce98:	3001      	adds	r0, #1
 800ce9a:	f040 808d 	bne.w	800cfb8 <_printf_float+0x1d0>
 800ce9e:	f04f 30ff 	mov.w	r0, #4294967295
 800cea2:	b00d      	add	sp, #52	@ 0x34
 800cea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea8:	4642      	mov	r2, r8
 800ceaa:	464b      	mov	r3, r9
 800ceac:	4640      	mov	r0, r8
 800ceae:	4649      	mov	r1, r9
 800ceb0:	f7f3 fe3c 	bl	8000b2c <__aeabi_dcmpun>
 800ceb4:	b140      	cbz	r0, 800cec8 <_printf_float+0xe0>
 800ceb6:	464b      	mov	r3, r9
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	bfbc      	itt	lt
 800cebc:	232d      	movlt	r3, #45	@ 0x2d
 800cebe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cec2:	4a7e      	ldr	r2, [pc, #504]	@ (800d0bc <_printf_float+0x2d4>)
 800cec4:	4b7e      	ldr	r3, [pc, #504]	@ (800d0c0 <_printf_float+0x2d8>)
 800cec6:	e7d4      	b.n	800ce72 <_printf_float+0x8a>
 800cec8:	6863      	ldr	r3, [r4, #4]
 800ceca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cece:	9206      	str	r2, [sp, #24]
 800ced0:	1c5a      	adds	r2, r3, #1
 800ced2:	d13b      	bne.n	800cf4c <_printf_float+0x164>
 800ced4:	2306      	movs	r3, #6
 800ced6:	6063      	str	r3, [r4, #4]
 800ced8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cedc:	2300      	movs	r3, #0
 800cede:	6022      	str	r2, [r4, #0]
 800cee0:	9303      	str	r3, [sp, #12]
 800cee2:	ab0a      	add	r3, sp, #40	@ 0x28
 800cee4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cee8:	ab09      	add	r3, sp, #36	@ 0x24
 800ceea:	9300      	str	r3, [sp, #0]
 800ceec:	6861      	ldr	r1, [r4, #4]
 800ceee:	ec49 8b10 	vmov	d0, r8, r9
 800cef2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cef6:	4628      	mov	r0, r5
 800cef8:	f7ff fed6 	bl	800cca8 <__cvt>
 800cefc:	9b06      	ldr	r3, [sp, #24]
 800cefe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf00:	2b47      	cmp	r3, #71	@ 0x47
 800cf02:	4680      	mov	r8, r0
 800cf04:	d129      	bne.n	800cf5a <_printf_float+0x172>
 800cf06:	1cc8      	adds	r0, r1, #3
 800cf08:	db02      	blt.n	800cf10 <_printf_float+0x128>
 800cf0a:	6863      	ldr	r3, [r4, #4]
 800cf0c:	4299      	cmp	r1, r3
 800cf0e:	dd41      	ble.n	800cf94 <_printf_float+0x1ac>
 800cf10:	f1aa 0a02 	sub.w	sl, sl, #2
 800cf14:	fa5f fa8a 	uxtb.w	sl, sl
 800cf18:	3901      	subs	r1, #1
 800cf1a:	4652      	mov	r2, sl
 800cf1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cf20:	9109      	str	r1, [sp, #36]	@ 0x24
 800cf22:	f7ff ff26 	bl	800cd72 <__exponent>
 800cf26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf28:	1813      	adds	r3, r2, r0
 800cf2a:	2a01      	cmp	r2, #1
 800cf2c:	4681      	mov	r9, r0
 800cf2e:	6123      	str	r3, [r4, #16]
 800cf30:	dc02      	bgt.n	800cf38 <_printf_float+0x150>
 800cf32:	6822      	ldr	r2, [r4, #0]
 800cf34:	07d2      	lsls	r2, r2, #31
 800cf36:	d501      	bpl.n	800cf3c <_printf_float+0x154>
 800cf38:	3301      	adds	r3, #1
 800cf3a:	6123      	str	r3, [r4, #16]
 800cf3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d0a2      	beq.n	800ce8a <_printf_float+0xa2>
 800cf44:	232d      	movs	r3, #45	@ 0x2d
 800cf46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf4a:	e79e      	b.n	800ce8a <_printf_float+0xa2>
 800cf4c:	9a06      	ldr	r2, [sp, #24]
 800cf4e:	2a47      	cmp	r2, #71	@ 0x47
 800cf50:	d1c2      	bne.n	800ced8 <_printf_float+0xf0>
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d1c0      	bne.n	800ced8 <_printf_float+0xf0>
 800cf56:	2301      	movs	r3, #1
 800cf58:	e7bd      	b.n	800ced6 <_printf_float+0xee>
 800cf5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cf5e:	d9db      	bls.n	800cf18 <_printf_float+0x130>
 800cf60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cf64:	d118      	bne.n	800cf98 <_printf_float+0x1b0>
 800cf66:	2900      	cmp	r1, #0
 800cf68:	6863      	ldr	r3, [r4, #4]
 800cf6a:	dd0b      	ble.n	800cf84 <_printf_float+0x19c>
 800cf6c:	6121      	str	r1, [r4, #16]
 800cf6e:	b913      	cbnz	r3, 800cf76 <_printf_float+0x18e>
 800cf70:	6822      	ldr	r2, [r4, #0]
 800cf72:	07d0      	lsls	r0, r2, #31
 800cf74:	d502      	bpl.n	800cf7c <_printf_float+0x194>
 800cf76:	3301      	adds	r3, #1
 800cf78:	440b      	add	r3, r1
 800cf7a:	6123      	str	r3, [r4, #16]
 800cf7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cf7e:	f04f 0900 	mov.w	r9, #0
 800cf82:	e7db      	b.n	800cf3c <_printf_float+0x154>
 800cf84:	b913      	cbnz	r3, 800cf8c <_printf_float+0x1a4>
 800cf86:	6822      	ldr	r2, [r4, #0]
 800cf88:	07d2      	lsls	r2, r2, #31
 800cf8a:	d501      	bpl.n	800cf90 <_printf_float+0x1a8>
 800cf8c:	3302      	adds	r3, #2
 800cf8e:	e7f4      	b.n	800cf7a <_printf_float+0x192>
 800cf90:	2301      	movs	r3, #1
 800cf92:	e7f2      	b.n	800cf7a <_printf_float+0x192>
 800cf94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cf98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf9a:	4299      	cmp	r1, r3
 800cf9c:	db05      	blt.n	800cfaa <_printf_float+0x1c2>
 800cf9e:	6823      	ldr	r3, [r4, #0]
 800cfa0:	6121      	str	r1, [r4, #16]
 800cfa2:	07d8      	lsls	r0, r3, #31
 800cfa4:	d5ea      	bpl.n	800cf7c <_printf_float+0x194>
 800cfa6:	1c4b      	adds	r3, r1, #1
 800cfa8:	e7e7      	b.n	800cf7a <_printf_float+0x192>
 800cfaa:	2900      	cmp	r1, #0
 800cfac:	bfd4      	ite	le
 800cfae:	f1c1 0202 	rsble	r2, r1, #2
 800cfb2:	2201      	movgt	r2, #1
 800cfb4:	4413      	add	r3, r2
 800cfb6:	e7e0      	b.n	800cf7a <_printf_float+0x192>
 800cfb8:	6823      	ldr	r3, [r4, #0]
 800cfba:	055a      	lsls	r2, r3, #21
 800cfbc:	d407      	bmi.n	800cfce <_printf_float+0x1e6>
 800cfbe:	6923      	ldr	r3, [r4, #16]
 800cfc0:	4642      	mov	r2, r8
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	47b8      	blx	r7
 800cfc8:	3001      	adds	r0, #1
 800cfca:	d12b      	bne.n	800d024 <_printf_float+0x23c>
 800cfcc:	e767      	b.n	800ce9e <_printf_float+0xb6>
 800cfce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cfd2:	f240 80dd 	bls.w	800d190 <_printf_float+0x3a8>
 800cfd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2300      	movs	r3, #0
 800cfde:	f7f3 fd73 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	d033      	beq.n	800d04e <_printf_float+0x266>
 800cfe6:	4a37      	ldr	r2, [pc, #220]	@ (800d0c4 <_printf_float+0x2dc>)
 800cfe8:	2301      	movs	r3, #1
 800cfea:	4631      	mov	r1, r6
 800cfec:	4628      	mov	r0, r5
 800cfee:	47b8      	blx	r7
 800cff0:	3001      	adds	r0, #1
 800cff2:	f43f af54 	beq.w	800ce9e <_printf_float+0xb6>
 800cff6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cffa:	4543      	cmp	r3, r8
 800cffc:	db02      	blt.n	800d004 <_printf_float+0x21c>
 800cffe:	6823      	ldr	r3, [r4, #0]
 800d000:	07d8      	lsls	r0, r3, #31
 800d002:	d50f      	bpl.n	800d024 <_printf_float+0x23c>
 800d004:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d008:	4631      	mov	r1, r6
 800d00a:	4628      	mov	r0, r5
 800d00c:	47b8      	blx	r7
 800d00e:	3001      	adds	r0, #1
 800d010:	f43f af45 	beq.w	800ce9e <_printf_float+0xb6>
 800d014:	f04f 0900 	mov.w	r9, #0
 800d018:	f108 38ff 	add.w	r8, r8, #4294967295
 800d01c:	f104 0a1a 	add.w	sl, r4, #26
 800d020:	45c8      	cmp	r8, r9
 800d022:	dc09      	bgt.n	800d038 <_printf_float+0x250>
 800d024:	6823      	ldr	r3, [r4, #0]
 800d026:	079b      	lsls	r3, r3, #30
 800d028:	f100 8103 	bmi.w	800d232 <_printf_float+0x44a>
 800d02c:	68e0      	ldr	r0, [r4, #12]
 800d02e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d030:	4298      	cmp	r0, r3
 800d032:	bfb8      	it	lt
 800d034:	4618      	movlt	r0, r3
 800d036:	e734      	b.n	800cea2 <_printf_float+0xba>
 800d038:	2301      	movs	r3, #1
 800d03a:	4652      	mov	r2, sl
 800d03c:	4631      	mov	r1, r6
 800d03e:	4628      	mov	r0, r5
 800d040:	47b8      	blx	r7
 800d042:	3001      	adds	r0, #1
 800d044:	f43f af2b 	beq.w	800ce9e <_printf_float+0xb6>
 800d048:	f109 0901 	add.w	r9, r9, #1
 800d04c:	e7e8      	b.n	800d020 <_printf_float+0x238>
 800d04e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d050:	2b00      	cmp	r3, #0
 800d052:	dc39      	bgt.n	800d0c8 <_printf_float+0x2e0>
 800d054:	4a1b      	ldr	r2, [pc, #108]	@ (800d0c4 <_printf_float+0x2dc>)
 800d056:	2301      	movs	r3, #1
 800d058:	4631      	mov	r1, r6
 800d05a:	4628      	mov	r0, r5
 800d05c:	47b8      	blx	r7
 800d05e:	3001      	adds	r0, #1
 800d060:	f43f af1d 	beq.w	800ce9e <_printf_float+0xb6>
 800d064:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d068:	ea59 0303 	orrs.w	r3, r9, r3
 800d06c:	d102      	bne.n	800d074 <_printf_float+0x28c>
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	07d9      	lsls	r1, r3, #31
 800d072:	d5d7      	bpl.n	800d024 <_printf_float+0x23c>
 800d074:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d078:	4631      	mov	r1, r6
 800d07a:	4628      	mov	r0, r5
 800d07c:	47b8      	blx	r7
 800d07e:	3001      	adds	r0, #1
 800d080:	f43f af0d 	beq.w	800ce9e <_printf_float+0xb6>
 800d084:	f04f 0a00 	mov.w	sl, #0
 800d088:	f104 0b1a 	add.w	fp, r4, #26
 800d08c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d08e:	425b      	negs	r3, r3
 800d090:	4553      	cmp	r3, sl
 800d092:	dc01      	bgt.n	800d098 <_printf_float+0x2b0>
 800d094:	464b      	mov	r3, r9
 800d096:	e793      	b.n	800cfc0 <_printf_float+0x1d8>
 800d098:	2301      	movs	r3, #1
 800d09a:	465a      	mov	r2, fp
 800d09c:	4631      	mov	r1, r6
 800d09e:	4628      	mov	r0, r5
 800d0a0:	47b8      	blx	r7
 800d0a2:	3001      	adds	r0, #1
 800d0a4:	f43f aefb 	beq.w	800ce9e <_printf_float+0xb6>
 800d0a8:	f10a 0a01 	add.w	sl, sl, #1
 800d0ac:	e7ee      	b.n	800d08c <_printf_float+0x2a4>
 800d0ae:	bf00      	nop
 800d0b0:	7fefffff 	.word	0x7fefffff
 800d0b4:	080125b1 	.word	0x080125b1
 800d0b8:	080125b5 	.word	0x080125b5
 800d0bc:	080125b9 	.word	0x080125b9
 800d0c0:	080125bd 	.word	0x080125bd
 800d0c4:	080125c1 	.word	0x080125c1
 800d0c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d0ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d0ce:	4553      	cmp	r3, sl
 800d0d0:	bfa8      	it	ge
 800d0d2:	4653      	movge	r3, sl
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	4699      	mov	r9, r3
 800d0d8:	dc36      	bgt.n	800d148 <_printf_float+0x360>
 800d0da:	f04f 0b00 	mov.w	fp, #0
 800d0de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0e2:	f104 021a 	add.w	r2, r4, #26
 800d0e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d0e8:	9306      	str	r3, [sp, #24]
 800d0ea:	eba3 0309 	sub.w	r3, r3, r9
 800d0ee:	455b      	cmp	r3, fp
 800d0f0:	dc31      	bgt.n	800d156 <_printf_float+0x36e>
 800d0f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0f4:	459a      	cmp	sl, r3
 800d0f6:	dc3a      	bgt.n	800d16e <_printf_float+0x386>
 800d0f8:	6823      	ldr	r3, [r4, #0]
 800d0fa:	07da      	lsls	r2, r3, #31
 800d0fc:	d437      	bmi.n	800d16e <_printf_float+0x386>
 800d0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d100:	ebaa 0903 	sub.w	r9, sl, r3
 800d104:	9b06      	ldr	r3, [sp, #24]
 800d106:	ebaa 0303 	sub.w	r3, sl, r3
 800d10a:	4599      	cmp	r9, r3
 800d10c:	bfa8      	it	ge
 800d10e:	4699      	movge	r9, r3
 800d110:	f1b9 0f00 	cmp.w	r9, #0
 800d114:	dc33      	bgt.n	800d17e <_printf_float+0x396>
 800d116:	f04f 0800 	mov.w	r8, #0
 800d11a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d11e:	f104 0b1a 	add.w	fp, r4, #26
 800d122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d124:	ebaa 0303 	sub.w	r3, sl, r3
 800d128:	eba3 0309 	sub.w	r3, r3, r9
 800d12c:	4543      	cmp	r3, r8
 800d12e:	f77f af79 	ble.w	800d024 <_printf_float+0x23c>
 800d132:	2301      	movs	r3, #1
 800d134:	465a      	mov	r2, fp
 800d136:	4631      	mov	r1, r6
 800d138:	4628      	mov	r0, r5
 800d13a:	47b8      	blx	r7
 800d13c:	3001      	adds	r0, #1
 800d13e:	f43f aeae 	beq.w	800ce9e <_printf_float+0xb6>
 800d142:	f108 0801 	add.w	r8, r8, #1
 800d146:	e7ec      	b.n	800d122 <_printf_float+0x33a>
 800d148:	4642      	mov	r2, r8
 800d14a:	4631      	mov	r1, r6
 800d14c:	4628      	mov	r0, r5
 800d14e:	47b8      	blx	r7
 800d150:	3001      	adds	r0, #1
 800d152:	d1c2      	bne.n	800d0da <_printf_float+0x2f2>
 800d154:	e6a3      	b.n	800ce9e <_printf_float+0xb6>
 800d156:	2301      	movs	r3, #1
 800d158:	4631      	mov	r1, r6
 800d15a:	4628      	mov	r0, r5
 800d15c:	9206      	str	r2, [sp, #24]
 800d15e:	47b8      	blx	r7
 800d160:	3001      	adds	r0, #1
 800d162:	f43f ae9c 	beq.w	800ce9e <_printf_float+0xb6>
 800d166:	9a06      	ldr	r2, [sp, #24]
 800d168:	f10b 0b01 	add.w	fp, fp, #1
 800d16c:	e7bb      	b.n	800d0e6 <_printf_float+0x2fe>
 800d16e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d172:	4631      	mov	r1, r6
 800d174:	4628      	mov	r0, r5
 800d176:	47b8      	blx	r7
 800d178:	3001      	adds	r0, #1
 800d17a:	d1c0      	bne.n	800d0fe <_printf_float+0x316>
 800d17c:	e68f      	b.n	800ce9e <_printf_float+0xb6>
 800d17e:	9a06      	ldr	r2, [sp, #24]
 800d180:	464b      	mov	r3, r9
 800d182:	4442      	add	r2, r8
 800d184:	4631      	mov	r1, r6
 800d186:	4628      	mov	r0, r5
 800d188:	47b8      	blx	r7
 800d18a:	3001      	adds	r0, #1
 800d18c:	d1c3      	bne.n	800d116 <_printf_float+0x32e>
 800d18e:	e686      	b.n	800ce9e <_printf_float+0xb6>
 800d190:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d194:	f1ba 0f01 	cmp.w	sl, #1
 800d198:	dc01      	bgt.n	800d19e <_printf_float+0x3b6>
 800d19a:	07db      	lsls	r3, r3, #31
 800d19c:	d536      	bpl.n	800d20c <_printf_float+0x424>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	4642      	mov	r2, r8
 800d1a2:	4631      	mov	r1, r6
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	47b8      	blx	r7
 800d1a8:	3001      	adds	r0, #1
 800d1aa:	f43f ae78 	beq.w	800ce9e <_printf_float+0xb6>
 800d1ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1b2:	4631      	mov	r1, r6
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	47b8      	blx	r7
 800d1b8:	3001      	adds	r0, #1
 800d1ba:	f43f ae70 	beq.w	800ce9e <_printf_float+0xb6>
 800d1be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1ca:	f7f3 fc7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1ce:	b9c0      	cbnz	r0, 800d202 <_printf_float+0x41a>
 800d1d0:	4653      	mov	r3, sl
 800d1d2:	f108 0201 	add.w	r2, r8, #1
 800d1d6:	4631      	mov	r1, r6
 800d1d8:	4628      	mov	r0, r5
 800d1da:	47b8      	blx	r7
 800d1dc:	3001      	adds	r0, #1
 800d1de:	d10c      	bne.n	800d1fa <_printf_float+0x412>
 800d1e0:	e65d      	b.n	800ce9e <_printf_float+0xb6>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	465a      	mov	r2, fp
 800d1e6:	4631      	mov	r1, r6
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	47b8      	blx	r7
 800d1ec:	3001      	adds	r0, #1
 800d1ee:	f43f ae56 	beq.w	800ce9e <_printf_float+0xb6>
 800d1f2:	f108 0801 	add.w	r8, r8, #1
 800d1f6:	45d0      	cmp	r8, sl
 800d1f8:	dbf3      	blt.n	800d1e2 <_printf_float+0x3fa>
 800d1fa:	464b      	mov	r3, r9
 800d1fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d200:	e6df      	b.n	800cfc2 <_printf_float+0x1da>
 800d202:	f04f 0800 	mov.w	r8, #0
 800d206:	f104 0b1a 	add.w	fp, r4, #26
 800d20a:	e7f4      	b.n	800d1f6 <_printf_float+0x40e>
 800d20c:	2301      	movs	r3, #1
 800d20e:	4642      	mov	r2, r8
 800d210:	e7e1      	b.n	800d1d6 <_printf_float+0x3ee>
 800d212:	2301      	movs	r3, #1
 800d214:	464a      	mov	r2, r9
 800d216:	4631      	mov	r1, r6
 800d218:	4628      	mov	r0, r5
 800d21a:	47b8      	blx	r7
 800d21c:	3001      	adds	r0, #1
 800d21e:	f43f ae3e 	beq.w	800ce9e <_printf_float+0xb6>
 800d222:	f108 0801 	add.w	r8, r8, #1
 800d226:	68e3      	ldr	r3, [r4, #12]
 800d228:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d22a:	1a5b      	subs	r3, r3, r1
 800d22c:	4543      	cmp	r3, r8
 800d22e:	dcf0      	bgt.n	800d212 <_printf_float+0x42a>
 800d230:	e6fc      	b.n	800d02c <_printf_float+0x244>
 800d232:	f04f 0800 	mov.w	r8, #0
 800d236:	f104 0919 	add.w	r9, r4, #25
 800d23a:	e7f4      	b.n	800d226 <_printf_float+0x43e>

0800d23c <_printf_common>:
 800d23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d240:	4616      	mov	r6, r2
 800d242:	4698      	mov	r8, r3
 800d244:	688a      	ldr	r2, [r1, #8]
 800d246:	690b      	ldr	r3, [r1, #16]
 800d248:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d24c:	4293      	cmp	r3, r2
 800d24e:	bfb8      	it	lt
 800d250:	4613      	movlt	r3, r2
 800d252:	6033      	str	r3, [r6, #0]
 800d254:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d258:	4607      	mov	r7, r0
 800d25a:	460c      	mov	r4, r1
 800d25c:	b10a      	cbz	r2, 800d262 <_printf_common+0x26>
 800d25e:	3301      	adds	r3, #1
 800d260:	6033      	str	r3, [r6, #0]
 800d262:	6823      	ldr	r3, [r4, #0]
 800d264:	0699      	lsls	r1, r3, #26
 800d266:	bf42      	ittt	mi
 800d268:	6833      	ldrmi	r3, [r6, #0]
 800d26a:	3302      	addmi	r3, #2
 800d26c:	6033      	strmi	r3, [r6, #0]
 800d26e:	6825      	ldr	r5, [r4, #0]
 800d270:	f015 0506 	ands.w	r5, r5, #6
 800d274:	d106      	bne.n	800d284 <_printf_common+0x48>
 800d276:	f104 0a19 	add.w	sl, r4, #25
 800d27a:	68e3      	ldr	r3, [r4, #12]
 800d27c:	6832      	ldr	r2, [r6, #0]
 800d27e:	1a9b      	subs	r3, r3, r2
 800d280:	42ab      	cmp	r3, r5
 800d282:	dc26      	bgt.n	800d2d2 <_printf_common+0x96>
 800d284:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d288:	6822      	ldr	r2, [r4, #0]
 800d28a:	3b00      	subs	r3, #0
 800d28c:	bf18      	it	ne
 800d28e:	2301      	movne	r3, #1
 800d290:	0692      	lsls	r2, r2, #26
 800d292:	d42b      	bmi.n	800d2ec <_printf_common+0xb0>
 800d294:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d298:	4641      	mov	r1, r8
 800d29a:	4638      	mov	r0, r7
 800d29c:	47c8      	blx	r9
 800d29e:	3001      	adds	r0, #1
 800d2a0:	d01e      	beq.n	800d2e0 <_printf_common+0xa4>
 800d2a2:	6823      	ldr	r3, [r4, #0]
 800d2a4:	6922      	ldr	r2, [r4, #16]
 800d2a6:	f003 0306 	and.w	r3, r3, #6
 800d2aa:	2b04      	cmp	r3, #4
 800d2ac:	bf02      	ittt	eq
 800d2ae:	68e5      	ldreq	r5, [r4, #12]
 800d2b0:	6833      	ldreq	r3, [r6, #0]
 800d2b2:	1aed      	subeq	r5, r5, r3
 800d2b4:	68a3      	ldr	r3, [r4, #8]
 800d2b6:	bf0c      	ite	eq
 800d2b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2bc:	2500      	movne	r5, #0
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	bfc4      	itt	gt
 800d2c2:	1a9b      	subgt	r3, r3, r2
 800d2c4:	18ed      	addgt	r5, r5, r3
 800d2c6:	2600      	movs	r6, #0
 800d2c8:	341a      	adds	r4, #26
 800d2ca:	42b5      	cmp	r5, r6
 800d2cc:	d11a      	bne.n	800d304 <_printf_common+0xc8>
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	e008      	b.n	800d2e4 <_printf_common+0xa8>
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	4652      	mov	r2, sl
 800d2d6:	4641      	mov	r1, r8
 800d2d8:	4638      	mov	r0, r7
 800d2da:	47c8      	blx	r9
 800d2dc:	3001      	adds	r0, #1
 800d2de:	d103      	bne.n	800d2e8 <_printf_common+0xac>
 800d2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2e8:	3501      	adds	r5, #1
 800d2ea:	e7c6      	b.n	800d27a <_printf_common+0x3e>
 800d2ec:	18e1      	adds	r1, r4, r3
 800d2ee:	1c5a      	adds	r2, r3, #1
 800d2f0:	2030      	movs	r0, #48	@ 0x30
 800d2f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d2f6:	4422      	add	r2, r4
 800d2f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d2fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d300:	3302      	adds	r3, #2
 800d302:	e7c7      	b.n	800d294 <_printf_common+0x58>
 800d304:	2301      	movs	r3, #1
 800d306:	4622      	mov	r2, r4
 800d308:	4641      	mov	r1, r8
 800d30a:	4638      	mov	r0, r7
 800d30c:	47c8      	blx	r9
 800d30e:	3001      	adds	r0, #1
 800d310:	d0e6      	beq.n	800d2e0 <_printf_common+0xa4>
 800d312:	3601      	adds	r6, #1
 800d314:	e7d9      	b.n	800d2ca <_printf_common+0x8e>
	...

0800d318 <_printf_i>:
 800d318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d31c:	7e0f      	ldrb	r7, [r1, #24]
 800d31e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d320:	2f78      	cmp	r7, #120	@ 0x78
 800d322:	4691      	mov	r9, r2
 800d324:	4680      	mov	r8, r0
 800d326:	460c      	mov	r4, r1
 800d328:	469a      	mov	sl, r3
 800d32a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d32e:	d807      	bhi.n	800d340 <_printf_i+0x28>
 800d330:	2f62      	cmp	r7, #98	@ 0x62
 800d332:	d80a      	bhi.n	800d34a <_printf_i+0x32>
 800d334:	2f00      	cmp	r7, #0
 800d336:	f000 80d2 	beq.w	800d4de <_printf_i+0x1c6>
 800d33a:	2f58      	cmp	r7, #88	@ 0x58
 800d33c:	f000 80b9 	beq.w	800d4b2 <_printf_i+0x19a>
 800d340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d344:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d348:	e03a      	b.n	800d3c0 <_printf_i+0xa8>
 800d34a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d34e:	2b15      	cmp	r3, #21
 800d350:	d8f6      	bhi.n	800d340 <_printf_i+0x28>
 800d352:	a101      	add	r1, pc, #4	@ (adr r1, 800d358 <_printf_i+0x40>)
 800d354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d358:	0800d3b1 	.word	0x0800d3b1
 800d35c:	0800d3c5 	.word	0x0800d3c5
 800d360:	0800d341 	.word	0x0800d341
 800d364:	0800d341 	.word	0x0800d341
 800d368:	0800d341 	.word	0x0800d341
 800d36c:	0800d341 	.word	0x0800d341
 800d370:	0800d3c5 	.word	0x0800d3c5
 800d374:	0800d341 	.word	0x0800d341
 800d378:	0800d341 	.word	0x0800d341
 800d37c:	0800d341 	.word	0x0800d341
 800d380:	0800d341 	.word	0x0800d341
 800d384:	0800d4c5 	.word	0x0800d4c5
 800d388:	0800d3ef 	.word	0x0800d3ef
 800d38c:	0800d47f 	.word	0x0800d47f
 800d390:	0800d341 	.word	0x0800d341
 800d394:	0800d341 	.word	0x0800d341
 800d398:	0800d4e7 	.word	0x0800d4e7
 800d39c:	0800d341 	.word	0x0800d341
 800d3a0:	0800d3ef 	.word	0x0800d3ef
 800d3a4:	0800d341 	.word	0x0800d341
 800d3a8:	0800d341 	.word	0x0800d341
 800d3ac:	0800d487 	.word	0x0800d487
 800d3b0:	6833      	ldr	r3, [r6, #0]
 800d3b2:	1d1a      	adds	r2, r3, #4
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	6032      	str	r2, [r6, #0]
 800d3b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d3bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	e09d      	b.n	800d500 <_printf_i+0x1e8>
 800d3c4:	6833      	ldr	r3, [r6, #0]
 800d3c6:	6820      	ldr	r0, [r4, #0]
 800d3c8:	1d19      	adds	r1, r3, #4
 800d3ca:	6031      	str	r1, [r6, #0]
 800d3cc:	0606      	lsls	r6, r0, #24
 800d3ce:	d501      	bpl.n	800d3d4 <_printf_i+0xbc>
 800d3d0:	681d      	ldr	r5, [r3, #0]
 800d3d2:	e003      	b.n	800d3dc <_printf_i+0xc4>
 800d3d4:	0645      	lsls	r5, r0, #25
 800d3d6:	d5fb      	bpl.n	800d3d0 <_printf_i+0xb8>
 800d3d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d3dc:	2d00      	cmp	r5, #0
 800d3de:	da03      	bge.n	800d3e8 <_printf_i+0xd0>
 800d3e0:	232d      	movs	r3, #45	@ 0x2d
 800d3e2:	426d      	negs	r5, r5
 800d3e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3e8:	4859      	ldr	r0, [pc, #356]	@ (800d550 <_printf_i+0x238>)
 800d3ea:	230a      	movs	r3, #10
 800d3ec:	e011      	b.n	800d412 <_printf_i+0xfa>
 800d3ee:	6821      	ldr	r1, [r4, #0]
 800d3f0:	6833      	ldr	r3, [r6, #0]
 800d3f2:	0608      	lsls	r0, r1, #24
 800d3f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d3f8:	d402      	bmi.n	800d400 <_printf_i+0xe8>
 800d3fa:	0649      	lsls	r1, r1, #25
 800d3fc:	bf48      	it	mi
 800d3fe:	b2ad      	uxthmi	r5, r5
 800d400:	2f6f      	cmp	r7, #111	@ 0x6f
 800d402:	4853      	ldr	r0, [pc, #332]	@ (800d550 <_printf_i+0x238>)
 800d404:	6033      	str	r3, [r6, #0]
 800d406:	bf14      	ite	ne
 800d408:	230a      	movne	r3, #10
 800d40a:	2308      	moveq	r3, #8
 800d40c:	2100      	movs	r1, #0
 800d40e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d412:	6866      	ldr	r6, [r4, #4]
 800d414:	60a6      	str	r6, [r4, #8]
 800d416:	2e00      	cmp	r6, #0
 800d418:	bfa2      	ittt	ge
 800d41a:	6821      	ldrge	r1, [r4, #0]
 800d41c:	f021 0104 	bicge.w	r1, r1, #4
 800d420:	6021      	strge	r1, [r4, #0]
 800d422:	b90d      	cbnz	r5, 800d428 <_printf_i+0x110>
 800d424:	2e00      	cmp	r6, #0
 800d426:	d04b      	beq.n	800d4c0 <_printf_i+0x1a8>
 800d428:	4616      	mov	r6, r2
 800d42a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d42e:	fb03 5711 	mls	r7, r3, r1, r5
 800d432:	5dc7      	ldrb	r7, [r0, r7]
 800d434:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d438:	462f      	mov	r7, r5
 800d43a:	42bb      	cmp	r3, r7
 800d43c:	460d      	mov	r5, r1
 800d43e:	d9f4      	bls.n	800d42a <_printf_i+0x112>
 800d440:	2b08      	cmp	r3, #8
 800d442:	d10b      	bne.n	800d45c <_printf_i+0x144>
 800d444:	6823      	ldr	r3, [r4, #0]
 800d446:	07df      	lsls	r7, r3, #31
 800d448:	d508      	bpl.n	800d45c <_printf_i+0x144>
 800d44a:	6923      	ldr	r3, [r4, #16]
 800d44c:	6861      	ldr	r1, [r4, #4]
 800d44e:	4299      	cmp	r1, r3
 800d450:	bfde      	ittt	le
 800d452:	2330      	movle	r3, #48	@ 0x30
 800d454:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d458:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d45c:	1b92      	subs	r2, r2, r6
 800d45e:	6122      	str	r2, [r4, #16]
 800d460:	f8cd a000 	str.w	sl, [sp]
 800d464:	464b      	mov	r3, r9
 800d466:	aa03      	add	r2, sp, #12
 800d468:	4621      	mov	r1, r4
 800d46a:	4640      	mov	r0, r8
 800d46c:	f7ff fee6 	bl	800d23c <_printf_common>
 800d470:	3001      	adds	r0, #1
 800d472:	d14a      	bne.n	800d50a <_printf_i+0x1f2>
 800d474:	f04f 30ff 	mov.w	r0, #4294967295
 800d478:	b004      	add	sp, #16
 800d47a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d47e:	6823      	ldr	r3, [r4, #0]
 800d480:	f043 0320 	orr.w	r3, r3, #32
 800d484:	6023      	str	r3, [r4, #0]
 800d486:	4833      	ldr	r0, [pc, #204]	@ (800d554 <_printf_i+0x23c>)
 800d488:	2778      	movs	r7, #120	@ 0x78
 800d48a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d48e:	6823      	ldr	r3, [r4, #0]
 800d490:	6831      	ldr	r1, [r6, #0]
 800d492:	061f      	lsls	r7, r3, #24
 800d494:	f851 5b04 	ldr.w	r5, [r1], #4
 800d498:	d402      	bmi.n	800d4a0 <_printf_i+0x188>
 800d49a:	065f      	lsls	r7, r3, #25
 800d49c:	bf48      	it	mi
 800d49e:	b2ad      	uxthmi	r5, r5
 800d4a0:	6031      	str	r1, [r6, #0]
 800d4a2:	07d9      	lsls	r1, r3, #31
 800d4a4:	bf44      	itt	mi
 800d4a6:	f043 0320 	orrmi.w	r3, r3, #32
 800d4aa:	6023      	strmi	r3, [r4, #0]
 800d4ac:	b11d      	cbz	r5, 800d4b6 <_printf_i+0x19e>
 800d4ae:	2310      	movs	r3, #16
 800d4b0:	e7ac      	b.n	800d40c <_printf_i+0xf4>
 800d4b2:	4827      	ldr	r0, [pc, #156]	@ (800d550 <_printf_i+0x238>)
 800d4b4:	e7e9      	b.n	800d48a <_printf_i+0x172>
 800d4b6:	6823      	ldr	r3, [r4, #0]
 800d4b8:	f023 0320 	bic.w	r3, r3, #32
 800d4bc:	6023      	str	r3, [r4, #0]
 800d4be:	e7f6      	b.n	800d4ae <_printf_i+0x196>
 800d4c0:	4616      	mov	r6, r2
 800d4c2:	e7bd      	b.n	800d440 <_printf_i+0x128>
 800d4c4:	6833      	ldr	r3, [r6, #0]
 800d4c6:	6825      	ldr	r5, [r4, #0]
 800d4c8:	6961      	ldr	r1, [r4, #20]
 800d4ca:	1d18      	adds	r0, r3, #4
 800d4cc:	6030      	str	r0, [r6, #0]
 800d4ce:	062e      	lsls	r6, r5, #24
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	d501      	bpl.n	800d4d8 <_printf_i+0x1c0>
 800d4d4:	6019      	str	r1, [r3, #0]
 800d4d6:	e002      	b.n	800d4de <_printf_i+0x1c6>
 800d4d8:	0668      	lsls	r0, r5, #25
 800d4da:	d5fb      	bpl.n	800d4d4 <_printf_i+0x1bc>
 800d4dc:	8019      	strh	r1, [r3, #0]
 800d4de:	2300      	movs	r3, #0
 800d4e0:	6123      	str	r3, [r4, #16]
 800d4e2:	4616      	mov	r6, r2
 800d4e4:	e7bc      	b.n	800d460 <_printf_i+0x148>
 800d4e6:	6833      	ldr	r3, [r6, #0]
 800d4e8:	1d1a      	adds	r2, r3, #4
 800d4ea:	6032      	str	r2, [r6, #0]
 800d4ec:	681e      	ldr	r6, [r3, #0]
 800d4ee:	6862      	ldr	r2, [r4, #4]
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	f7f2 fe6c 	bl	80001d0 <memchr>
 800d4f8:	b108      	cbz	r0, 800d4fe <_printf_i+0x1e6>
 800d4fa:	1b80      	subs	r0, r0, r6
 800d4fc:	6060      	str	r0, [r4, #4]
 800d4fe:	6863      	ldr	r3, [r4, #4]
 800d500:	6123      	str	r3, [r4, #16]
 800d502:	2300      	movs	r3, #0
 800d504:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d508:	e7aa      	b.n	800d460 <_printf_i+0x148>
 800d50a:	6923      	ldr	r3, [r4, #16]
 800d50c:	4632      	mov	r2, r6
 800d50e:	4649      	mov	r1, r9
 800d510:	4640      	mov	r0, r8
 800d512:	47d0      	blx	sl
 800d514:	3001      	adds	r0, #1
 800d516:	d0ad      	beq.n	800d474 <_printf_i+0x15c>
 800d518:	6823      	ldr	r3, [r4, #0]
 800d51a:	079b      	lsls	r3, r3, #30
 800d51c:	d413      	bmi.n	800d546 <_printf_i+0x22e>
 800d51e:	68e0      	ldr	r0, [r4, #12]
 800d520:	9b03      	ldr	r3, [sp, #12]
 800d522:	4298      	cmp	r0, r3
 800d524:	bfb8      	it	lt
 800d526:	4618      	movlt	r0, r3
 800d528:	e7a6      	b.n	800d478 <_printf_i+0x160>
 800d52a:	2301      	movs	r3, #1
 800d52c:	4632      	mov	r2, r6
 800d52e:	4649      	mov	r1, r9
 800d530:	4640      	mov	r0, r8
 800d532:	47d0      	blx	sl
 800d534:	3001      	adds	r0, #1
 800d536:	d09d      	beq.n	800d474 <_printf_i+0x15c>
 800d538:	3501      	adds	r5, #1
 800d53a:	68e3      	ldr	r3, [r4, #12]
 800d53c:	9903      	ldr	r1, [sp, #12]
 800d53e:	1a5b      	subs	r3, r3, r1
 800d540:	42ab      	cmp	r3, r5
 800d542:	dcf2      	bgt.n	800d52a <_printf_i+0x212>
 800d544:	e7eb      	b.n	800d51e <_printf_i+0x206>
 800d546:	2500      	movs	r5, #0
 800d548:	f104 0619 	add.w	r6, r4, #25
 800d54c:	e7f5      	b.n	800d53a <_printf_i+0x222>
 800d54e:	bf00      	nop
 800d550:	080125c3 	.word	0x080125c3
 800d554:	080125d4 	.word	0x080125d4

0800d558 <_scanf_float>:
 800d558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d55c:	b087      	sub	sp, #28
 800d55e:	4617      	mov	r7, r2
 800d560:	9303      	str	r3, [sp, #12]
 800d562:	688b      	ldr	r3, [r1, #8]
 800d564:	1e5a      	subs	r2, r3, #1
 800d566:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d56a:	bf81      	itttt	hi
 800d56c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d570:	eb03 0b05 	addhi.w	fp, r3, r5
 800d574:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d578:	608b      	strhi	r3, [r1, #8]
 800d57a:	680b      	ldr	r3, [r1, #0]
 800d57c:	460a      	mov	r2, r1
 800d57e:	f04f 0500 	mov.w	r5, #0
 800d582:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d586:	f842 3b1c 	str.w	r3, [r2], #28
 800d58a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d58e:	4680      	mov	r8, r0
 800d590:	460c      	mov	r4, r1
 800d592:	bf98      	it	ls
 800d594:	f04f 0b00 	movls.w	fp, #0
 800d598:	9201      	str	r2, [sp, #4]
 800d59a:	4616      	mov	r6, r2
 800d59c:	46aa      	mov	sl, r5
 800d59e:	46a9      	mov	r9, r5
 800d5a0:	9502      	str	r5, [sp, #8]
 800d5a2:	68a2      	ldr	r2, [r4, #8]
 800d5a4:	b152      	cbz	r2, 800d5bc <_scanf_float+0x64>
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	2b4e      	cmp	r3, #78	@ 0x4e
 800d5ac:	d864      	bhi.n	800d678 <_scanf_float+0x120>
 800d5ae:	2b40      	cmp	r3, #64	@ 0x40
 800d5b0:	d83c      	bhi.n	800d62c <_scanf_float+0xd4>
 800d5b2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d5b6:	b2c8      	uxtb	r0, r1
 800d5b8:	280e      	cmp	r0, #14
 800d5ba:	d93a      	bls.n	800d632 <_scanf_float+0xda>
 800d5bc:	f1b9 0f00 	cmp.w	r9, #0
 800d5c0:	d003      	beq.n	800d5ca <_scanf_float+0x72>
 800d5c2:	6823      	ldr	r3, [r4, #0]
 800d5c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d5c8:	6023      	str	r3, [r4, #0]
 800d5ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5ce:	f1ba 0f01 	cmp.w	sl, #1
 800d5d2:	f200 8117 	bhi.w	800d804 <_scanf_float+0x2ac>
 800d5d6:	9b01      	ldr	r3, [sp, #4]
 800d5d8:	429e      	cmp	r6, r3
 800d5da:	f200 8108 	bhi.w	800d7ee <_scanf_float+0x296>
 800d5de:	2001      	movs	r0, #1
 800d5e0:	b007      	add	sp, #28
 800d5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d5ea:	2a0d      	cmp	r2, #13
 800d5ec:	d8e6      	bhi.n	800d5bc <_scanf_float+0x64>
 800d5ee:	a101      	add	r1, pc, #4	@ (adr r1, 800d5f4 <_scanf_float+0x9c>)
 800d5f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d5f4:	0800d73b 	.word	0x0800d73b
 800d5f8:	0800d5bd 	.word	0x0800d5bd
 800d5fc:	0800d5bd 	.word	0x0800d5bd
 800d600:	0800d5bd 	.word	0x0800d5bd
 800d604:	0800d79b 	.word	0x0800d79b
 800d608:	0800d773 	.word	0x0800d773
 800d60c:	0800d5bd 	.word	0x0800d5bd
 800d610:	0800d5bd 	.word	0x0800d5bd
 800d614:	0800d749 	.word	0x0800d749
 800d618:	0800d5bd 	.word	0x0800d5bd
 800d61c:	0800d5bd 	.word	0x0800d5bd
 800d620:	0800d5bd 	.word	0x0800d5bd
 800d624:	0800d5bd 	.word	0x0800d5bd
 800d628:	0800d701 	.word	0x0800d701
 800d62c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d630:	e7db      	b.n	800d5ea <_scanf_float+0x92>
 800d632:	290e      	cmp	r1, #14
 800d634:	d8c2      	bhi.n	800d5bc <_scanf_float+0x64>
 800d636:	a001      	add	r0, pc, #4	@ (adr r0, 800d63c <_scanf_float+0xe4>)
 800d638:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d63c:	0800d6f1 	.word	0x0800d6f1
 800d640:	0800d5bd 	.word	0x0800d5bd
 800d644:	0800d6f1 	.word	0x0800d6f1
 800d648:	0800d787 	.word	0x0800d787
 800d64c:	0800d5bd 	.word	0x0800d5bd
 800d650:	0800d699 	.word	0x0800d699
 800d654:	0800d6d7 	.word	0x0800d6d7
 800d658:	0800d6d7 	.word	0x0800d6d7
 800d65c:	0800d6d7 	.word	0x0800d6d7
 800d660:	0800d6d7 	.word	0x0800d6d7
 800d664:	0800d6d7 	.word	0x0800d6d7
 800d668:	0800d6d7 	.word	0x0800d6d7
 800d66c:	0800d6d7 	.word	0x0800d6d7
 800d670:	0800d6d7 	.word	0x0800d6d7
 800d674:	0800d6d7 	.word	0x0800d6d7
 800d678:	2b6e      	cmp	r3, #110	@ 0x6e
 800d67a:	d809      	bhi.n	800d690 <_scanf_float+0x138>
 800d67c:	2b60      	cmp	r3, #96	@ 0x60
 800d67e:	d8b2      	bhi.n	800d5e6 <_scanf_float+0x8e>
 800d680:	2b54      	cmp	r3, #84	@ 0x54
 800d682:	d07b      	beq.n	800d77c <_scanf_float+0x224>
 800d684:	2b59      	cmp	r3, #89	@ 0x59
 800d686:	d199      	bne.n	800d5bc <_scanf_float+0x64>
 800d688:	2d07      	cmp	r5, #7
 800d68a:	d197      	bne.n	800d5bc <_scanf_float+0x64>
 800d68c:	2508      	movs	r5, #8
 800d68e:	e02c      	b.n	800d6ea <_scanf_float+0x192>
 800d690:	2b74      	cmp	r3, #116	@ 0x74
 800d692:	d073      	beq.n	800d77c <_scanf_float+0x224>
 800d694:	2b79      	cmp	r3, #121	@ 0x79
 800d696:	e7f6      	b.n	800d686 <_scanf_float+0x12e>
 800d698:	6821      	ldr	r1, [r4, #0]
 800d69a:	05c8      	lsls	r0, r1, #23
 800d69c:	d51b      	bpl.n	800d6d6 <_scanf_float+0x17e>
 800d69e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d6a2:	6021      	str	r1, [r4, #0]
 800d6a4:	f109 0901 	add.w	r9, r9, #1
 800d6a8:	f1bb 0f00 	cmp.w	fp, #0
 800d6ac:	d003      	beq.n	800d6b6 <_scanf_float+0x15e>
 800d6ae:	3201      	adds	r2, #1
 800d6b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d6b4:	60a2      	str	r2, [r4, #8]
 800d6b6:	68a3      	ldr	r3, [r4, #8]
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	60a3      	str	r3, [r4, #8]
 800d6bc:	6923      	ldr	r3, [r4, #16]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	6123      	str	r3, [r4, #16]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	3b01      	subs	r3, #1
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	607b      	str	r3, [r7, #4]
 800d6ca:	f340 8087 	ble.w	800d7dc <_scanf_float+0x284>
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	603b      	str	r3, [r7, #0]
 800d6d4:	e765      	b.n	800d5a2 <_scanf_float+0x4a>
 800d6d6:	eb1a 0105 	adds.w	r1, sl, r5
 800d6da:	f47f af6f 	bne.w	800d5bc <_scanf_float+0x64>
 800d6de:	6822      	ldr	r2, [r4, #0]
 800d6e0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d6e4:	6022      	str	r2, [r4, #0]
 800d6e6:	460d      	mov	r5, r1
 800d6e8:	468a      	mov	sl, r1
 800d6ea:	f806 3b01 	strb.w	r3, [r6], #1
 800d6ee:	e7e2      	b.n	800d6b6 <_scanf_float+0x15e>
 800d6f0:	6822      	ldr	r2, [r4, #0]
 800d6f2:	0610      	lsls	r0, r2, #24
 800d6f4:	f57f af62 	bpl.w	800d5bc <_scanf_float+0x64>
 800d6f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d6fc:	6022      	str	r2, [r4, #0]
 800d6fe:	e7f4      	b.n	800d6ea <_scanf_float+0x192>
 800d700:	f1ba 0f00 	cmp.w	sl, #0
 800d704:	d10e      	bne.n	800d724 <_scanf_float+0x1cc>
 800d706:	f1b9 0f00 	cmp.w	r9, #0
 800d70a:	d10e      	bne.n	800d72a <_scanf_float+0x1d2>
 800d70c:	6822      	ldr	r2, [r4, #0]
 800d70e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d712:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d716:	d108      	bne.n	800d72a <_scanf_float+0x1d2>
 800d718:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d71c:	6022      	str	r2, [r4, #0]
 800d71e:	f04f 0a01 	mov.w	sl, #1
 800d722:	e7e2      	b.n	800d6ea <_scanf_float+0x192>
 800d724:	f1ba 0f02 	cmp.w	sl, #2
 800d728:	d055      	beq.n	800d7d6 <_scanf_float+0x27e>
 800d72a:	2d01      	cmp	r5, #1
 800d72c:	d002      	beq.n	800d734 <_scanf_float+0x1dc>
 800d72e:	2d04      	cmp	r5, #4
 800d730:	f47f af44 	bne.w	800d5bc <_scanf_float+0x64>
 800d734:	3501      	adds	r5, #1
 800d736:	b2ed      	uxtb	r5, r5
 800d738:	e7d7      	b.n	800d6ea <_scanf_float+0x192>
 800d73a:	f1ba 0f01 	cmp.w	sl, #1
 800d73e:	f47f af3d 	bne.w	800d5bc <_scanf_float+0x64>
 800d742:	f04f 0a02 	mov.w	sl, #2
 800d746:	e7d0      	b.n	800d6ea <_scanf_float+0x192>
 800d748:	b97d      	cbnz	r5, 800d76a <_scanf_float+0x212>
 800d74a:	f1b9 0f00 	cmp.w	r9, #0
 800d74e:	f47f af38 	bne.w	800d5c2 <_scanf_float+0x6a>
 800d752:	6822      	ldr	r2, [r4, #0]
 800d754:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d758:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d75c:	f040 8108 	bne.w	800d970 <_scanf_float+0x418>
 800d760:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d764:	6022      	str	r2, [r4, #0]
 800d766:	2501      	movs	r5, #1
 800d768:	e7bf      	b.n	800d6ea <_scanf_float+0x192>
 800d76a:	2d03      	cmp	r5, #3
 800d76c:	d0e2      	beq.n	800d734 <_scanf_float+0x1dc>
 800d76e:	2d05      	cmp	r5, #5
 800d770:	e7de      	b.n	800d730 <_scanf_float+0x1d8>
 800d772:	2d02      	cmp	r5, #2
 800d774:	f47f af22 	bne.w	800d5bc <_scanf_float+0x64>
 800d778:	2503      	movs	r5, #3
 800d77a:	e7b6      	b.n	800d6ea <_scanf_float+0x192>
 800d77c:	2d06      	cmp	r5, #6
 800d77e:	f47f af1d 	bne.w	800d5bc <_scanf_float+0x64>
 800d782:	2507      	movs	r5, #7
 800d784:	e7b1      	b.n	800d6ea <_scanf_float+0x192>
 800d786:	6822      	ldr	r2, [r4, #0]
 800d788:	0591      	lsls	r1, r2, #22
 800d78a:	f57f af17 	bpl.w	800d5bc <_scanf_float+0x64>
 800d78e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d792:	6022      	str	r2, [r4, #0]
 800d794:	f8cd 9008 	str.w	r9, [sp, #8]
 800d798:	e7a7      	b.n	800d6ea <_scanf_float+0x192>
 800d79a:	6822      	ldr	r2, [r4, #0]
 800d79c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d7a0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d7a4:	d006      	beq.n	800d7b4 <_scanf_float+0x25c>
 800d7a6:	0550      	lsls	r0, r2, #21
 800d7a8:	f57f af08 	bpl.w	800d5bc <_scanf_float+0x64>
 800d7ac:	f1b9 0f00 	cmp.w	r9, #0
 800d7b0:	f000 80de 	beq.w	800d970 <_scanf_float+0x418>
 800d7b4:	0591      	lsls	r1, r2, #22
 800d7b6:	bf58      	it	pl
 800d7b8:	9902      	ldrpl	r1, [sp, #8]
 800d7ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d7be:	bf58      	it	pl
 800d7c0:	eba9 0101 	subpl.w	r1, r9, r1
 800d7c4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d7c8:	bf58      	it	pl
 800d7ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d7ce:	6022      	str	r2, [r4, #0]
 800d7d0:	f04f 0900 	mov.w	r9, #0
 800d7d4:	e789      	b.n	800d6ea <_scanf_float+0x192>
 800d7d6:	f04f 0a03 	mov.w	sl, #3
 800d7da:	e786      	b.n	800d6ea <_scanf_float+0x192>
 800d7dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d7e0:	4639      	mov	r1, r7
 800d7e2:	4640      	mov	r0, r8
 800d7e4:	4798      	blx	r3
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	f43f aedb 	beq.w	800d5a2 <_scanf_float+0x4a>
 800d7ec:	e6e6      	b.n	800d5bc <_scanf_float+0x64>
 800d7ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d7f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d7f6:	463a      	mov	r2, r7
 800d7f8:	4640      	mov	r0, r8
 800d7fa:	4798      	blx	r3
 800d7fc:	6923      	ldr	r3, [r4, #16]
 800d7fe:	3b01      	subs	r3, #1
 800d800:	6123      	str	r3, [r4, #16]
 800d802:	e6e8      	b.n	800d5d6 <_scanf_float+0x7e>
 800d804:	1e6b      	subs	r3, r5, #1
 800d806:	2b06      	cmp	r3, #6
 800d808:	d824      	bhi.n	800d854 <_scanf_float+0x2fc>
 800d80a:	2d02      	cmp	r5, #2
 800d80c:	d836      	bhi.n	800d87c <_scanf_float+0x324>
 800d80e:	9b01      	ldr	r3, [sp, #4]
 800d810:	429e      	cmp	r6, r3
 800d812:	f67f aee4 	bls.w	800d5de <_scanf_float+0x86>
 800d816:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d81a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d81e:	463a      	mov	r2, r7
 800d820:	4640      	mov	r0, r8
 800d822:	4798      	blx	r3
 800d824:	6923      	ldr	r3, [r4, #16]
 800d826:	3b01      	subs	r3, #1
 800d828:	6123      	str	r3, [r4, #16]
 800d82a:	e7f0      	b.n	800d80e <_scanf_float+0x2b6>
 800d82c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d830:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d834:	463a      	mov	r2, r7
 800d836:	4640      	mov	r0, r8
 800d838:	4798      	blx	r3
 800d83a:	6923      	ldr	r3, [r4, #16]
 800d83c:	3b01      	subs	r3, #1
 800d83e:	6123      	str	r3, [r4, #16]
 800d840:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d844:	fa5f fa8a 	uxtb.w	sl, sl
 800d848:	f1ba 0f02 	cmp.w	sl, #2
 800d84c:	d1ee      	bne.n	800d82c <_scanf_float+0x2d4>
 800d84e:	3d03      	subs	r5, #3
 800d850:	b2ed      	uxtb	r5, r5
 800d852:	1b76      	subs	r6, r6, r5
 800d854:	6823      	ldr	r3, [r4, #0]
 800d856:	05da      	lsls	r2, r3, #23
 800d858:	d530      	bpl.n	800d8bc <_scanf_float+0x364>
 800d85a:	055b      	lsls	r3, r3, #21
 800d85c:	d511      	bpl.n	800d882 <_scanf_float+0x32a>
 800d85e:	9b01      	ldr	r3, [sp, #4]
 800d860:	429e      	cmp	r6, r3
 800d862:	f67f aebc 	bls.w	800d5de <_scanf_float+0x86>
 800d866:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d86a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d86e:	463a      	mov	r2, r7
 800d870:	4640      	mov	r0, r8
 800d872:	4798      	blx	r3
 800d874:	6923      	ldr	r3, [r4, #16]
 800d876:	3b01      	subs	r3, #1
 800d878:	6123      	str	r3, [r4, #16]
 800d87a:	e7f0      	b.n	800d85e <_scanf_float+0x306>
 800d87c:	46aa      	mov	sl, r5
 800d87e:	46b3      	mov	fp, r6
 800d880:	e7de      	b.n	800d840 <_scanf_float+0x2e8>
 800d882:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d886:	6923      	ldr	r3, [r4, #16]
 800d888:	2965      	cmp	r1, #101	@ 0x65
 800d88a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d88e:	f106 35ff 	add.w	r5, r6, #4294967295
 800d892:	6123      	str	r3, [r4, #16]
 800d894:	d00c      	beq.n	800d8b0 <_scanf_float+0x358>
 800d896:	2945      	cmp	r1, #69	@ 0x45
 800d898:	d00a      	beq.n	800d8b0 <_scanf_float+0x358>
 800d89a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d89e:	463a      	mov	r2, r7
 800d8a0:	4640      	mov	r0, r8
 800d8a2:	4798      	blx	r3
 800d8a4:	6923      	ldr	r3, [r4, #16]
 800d8a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	1eb5      	subs	r5, r6, #2
 800d8ae:	6123      	str	r3, [r4, #16]
 800d8b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d8b4:	463a      	mov	r2, r7
 800d8b6:	4640      	mov	r0, r8
 800d8b8:	4798      	blx	r3
 800d8ba:	462e      	mov	r6, r5
 800d8bc:	6822      	ldr	r2, [r4, #0]
 800d8be:	f012 0210 	ands.w	r2, r2, #16
 800d8c2:	d001      	beq.n	800d8c8 <_scanf_float+0x370>
 800d8c4:	2000      	movs	r0, #0
 800d8c6:	e68b      	b.n	800d5e0 <_scanf_float+0x88>
 800d8c8:	7032      	strb	r2, [r6, #0]
 800d8ca:	6823      	ldr	r3, [r4, #0]
 800d8cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d8d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8d4:	d11c      	bne.n	800d910 <_scanf_float+0x3b8>
 800d8d6:	9b02      	ldr	r3, [sp, #8]
 800d8d8:	454b      	cmp	r3, r9
 800d8da:	eba3 0209 	sub.w	r2, r3, r9
 800d8de:	d123      	bne.n	800d928 <_scanf_float+0x3d0>
 800d8e0:	9901      	ldr	r1, [sp, #4]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	4640      	mov	r0, r8
 800d8e6:	f7ff f947 	bl	800cb78 <_strtod_r>
 800d8ea:	9b03      	ldr	r3, [sp, #12]
 800d8ec:	6821      	ldr	r1, [r4, #0]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f011 0f02 	tst.w	r1, #2
 800d8f4:	ec57 6b10 	vmov	r6, r7, d0
 800d8f8:	f103 0204 	add.w	r2, r3, #4
 800d8fc:	d01f      	beq.n	800d93e <_scanf_float+0x3e6>
 800d8fe:	9903      	ldr	r1, [sp, #12]
 800d900:	600a      	str	r2, [r1, #0]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	e9c3 6700 	strd	r6, r7, [r3]
 800d908:	68e3      	ldr	r3, [r4, #12]
 800d90a:	3301      	adds	r3, #1
 800d90c:	60e3      	str	r3, [r4, #12]
 800d90e:	e7d9      	b.n	800d8c4 <_scanf_float+0x36c>
 800d910:	9b04      	ldr	r3, [sp, #16]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d0e4      	beq.n	800d8e0 <_scanf_float+0x388>
 800d916:	9905      	ldr	r1, [sp, #20]
 800d918:	230a      	movs	r3, #10
 800d91a:	3101      	adds	r1, #1
 800d91c:	4640      	mov	r0, r8
 800d91e:	f7ff f9b7 	bl	800cc90 <_strtol_r>
 800d922:	9b04      	ldr	r3, [sp, #16]
 800d924:	9e05      	ldr	r6, [sp, #20]
 800d926:	1ac2      	subs	r2, r0, r3
 800d928:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d92c:	429e      	cmp	r6, r3
 800d92e:	bf28      	it	cs
 800d930:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d934:	4910      	ldr	r1, [pc, #64]	@ (800d978 <_scanf_float+0x420>)
 800d936:	4630      	mov	r0, r6
 800d938:	f000 f8e4 	bl	800db04 <siprintf>
 800d93c:	e7d0      	b.n	800d8e0 <_scanf_float+0x388>
 800d93e:	f011 0f04 	tst.w	r1, #4
 800d942:	9903      	ldr	r1, [sp, #12]
 800d944:	600a      	str	r2, [r1, #0]
 800d946:	d1dc      	bne.n	800d902 <_scanf_float+0x3aa>
 800d948:	681d      	ldr	r5, [r3, #0]
 800d94a:	4632      	mov	r2, r6
 800d94c:	463b      	mov	r3, r7
 800d94e:	4630      	mov	r0, r6
 800d950:	4639      	mov	r1, r7
 800d952:	f7f3 f8eb 	bl	8000b2c <__aeabi_dcmpun>
 800d956:	b128      	cbz	r0, 800d964 <_scanf_float+0x40c>
 800d958:	4808      	ldr	r0, [pc, #32]	@ (800d97c <_scanf_float+0x424>)
 800d95a:	f000 fa3d 	bl	800ddd8 <nanf>
 800d95e:	ed85 0a00 	vstr	s0, [r5]
 800d962:	e7d1      	b.n	800d908 <_scanf_float+0x3b0>
 800d964:	4630      	mov	r0, r6
 800d966:	4639      	mov	r1, r7
 800d968:	f7f3 f93e 	bl	8000be8 <__aeabi_d2f>
 800d96c:	6028      	str	r0, [r5, #0]
 800d96e:	e7cb      	b.n	800d908 <_scanf_float+0x3b0>
 800d970:	f04f 0900 	mov.w	r9, #0
 800d974:	e629      	b.n	800d5ca <_scanf_float+0x72>
 800d976:	bf00      	nop
 800d978:	080125e5 	.word	0x080125e5
 800d97c:	0801269e 	.word	0x0801269e

0800d980 <std>:
 800d980:	2300      	movs	r3, #0
 800d982:	b510      	push	{r4, lr}
 800d984:	4604      	mov	r4, r0
 800d986:	e9c0 3300 	strd	r3, r3, [r0]
 800d98a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d98e:	6083      	str	r3, [r0, #8]
 800d990:	8181      	strh	r1, [r0, #12]
 800d992:	6643      	str	r3, [r0, #100]	@ 0x64
 800d994:	81c2      	strh	r2, [r0, #14]
 800d996:	6183      	str	r3, [r0, #24]
 800d998:	4619      	mov	r1, r3
 800d99a:	2208      	movs	r2, #8
 800d99c:	305c      	adds	r0, #92	@ 0x5c
 800d99e:	f000 f914 	bl	800dbca <memset>
 800d9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d8 <std+0x58>)
 800d9a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d9a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d9dc <std+0x5c>)
 800d9a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d9aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d9e0 <std+0x60>)
 800d9ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d9e4 <std+0x64>)
 800d9b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800d9b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d9e8 <std+0x68>)
 800d9b4:	6224      	str	r4, [r4, #32]
 800d9b6:	429c      	cmp	r4, r3
 800d9b8:	d006      	beq.n	800d9c8 <std+0x48>
 800d9ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d9be:	4294      	cmp	r4, r2
 800d9c0:	d002      	beq.n	800d9c8 <std+0x48>
 800d9c2:	33d0      	adds	r3, #208	@ 0xd0
 800d9c4:	429c      	cmp	r4, r3
 800d9c6:	d105      	bne.n	800d9d4 <std+0x54>
 800d9c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9d0:	f000 b9e6 	b.w	800dda0 <__retarget_lock_init_recursive>
 800d9d4:	bd10      	pop	{r4, pc}
 800d9d6:	bf00      	nop
 800d9d8:	0800db45 	.word	0x0800db45
 800d9dc:	0800db67 	.word	0x0800db67
 800d9e0:	0800db9f 	.word	0x0800db9f
 800d9e4:	0800dbc3 	.word	0x0800dbc3
 800d9e8:	200006ec 	.word	0x200006ec

0800d9ec <stdio_exit_handler>:
 800d9ec:	4a02      	ldr	r2, [pc, #8]	@ (800d9f8 <stdio_exit_handler+0xc>)
 800d9ee:	4903      	ldr	r1, [pc, #12]	@ (800d9fc <stdio_exit_handler+0x10>)
 800d9f0:	4803      	ldr	r0, [pc, #12]	@ (800da00 <stdio_exit_handler+0x14>)
 800d9f2:	f000 b869 	b.w	800dac8 <_fwalk_sglue>
 800d9f6:	bf00      	nop
 800d9f8:	200000ec 	.word	0x200000ec
 800d9fc:	08010085 	.word	0x08010085
 800da00:	20000268 	.word	0x20000268

0800da04 <cleanup_stdio>:
 800da04:	6841      	ldr	r1, [r0, #4]
 800da06:	4b0c      	ldr	r3, [pc, #48]	@ (800da38 <cleanup_stdio+0x34>)
 800da08:	4299      	cmp	r1, r3
 800da0a:	b510      	push	{r4, lr}
 800da0c:	4604      	mov	r4, r0
 800da0e:	d001      	beq.n	800da14 <cleanup_stdio+0x10>
 800da10:	f002 fb38 	bl	8010084 <_fflush_r>
 800da14:	68a1      	ldr	r1, [r4, #8]
 800da16:	4b09      	ldr	r3, [pc, #36]	@ (800da3c <cleanup_stdio+0x38>)
 800da18:	4299      	cmp	r1, r3
 800da1a:	d002      	beq.n	800da22 <cleanup_stdio+0x1e>
 800da1c:	4620      	mov	r0, r4
 800da1e:	f002 fb31 	bl	8010084 <_fflush_r>
 800da22:	68e1      	ldr	r1, [r4, #12]
 800da24:	4b06      	ldr	r3, [pc, #24]	@ (800da40 <cleanup_stdio+0x3c>)
 800da26:	4299      	cmp	r1, r3
 800da28:	d004      	beq.n	800da34 <cleanup_stdio+0x30>
 800da2a:	4620      	mov	r0, r4
 800da2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da30:	f002 bb28 	b.w	8010084 <_fflush_r>
 800da34:	bd10      	pop	{r4, pc}
 800da36:	bf00      	nop
 800da38:	200006ec 	.word	0x200006ec
 800da3c:	20000754 	.word	0x20000754
 800da40:	200007bc 	.word	0x200007bc

0800da44 <global_stdio_init.part.0>:
 800da44:	b510      	push	{r4, lr}
 800da46:	4b0b      	ldr	r3, [pc, #44]	@ (800da74 <global_stdio_init.part.0+0x30>)
 800da48:	4c0b      	ldr	r4, [pc, #44]	@ (800da78 <global_stdio_init.part.0+0x34>)
 800da4a:	4a0c      	ldr	r2, [pc, #48]	@ (800da7c <global_stdio_init.part.0+0x38>)
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	4620      	mov	r0, r4
 800da50:	2200      	movs	r2, #0
 800da52:	2104      	movs	r1, #4
 800da54:	f7ff ff94 	bl	800d980 <std>
 800da58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800da5c:	2201      	movs	r2, #1
 800da5e:	2109      	movs	r1, #9
 800da60:	f7ff ff8e 	bl	800d980 <std>
 800da64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800da68:	2202      	movs	r2, #2
 800da6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da6e:	2112      	movs	r1, #18
 800da70:	f7ff bf86 	b.w	800d980 <std>
 800da74:	20000824 	.word	0x20000824
 800da78:	200006ec 	.word	0x200006ec
 800da7c:	0800d9ed 	.word	0x0800d9ed

0800da80 <__sfp_lock_acquire>:
 800da80:	4801      	ldr	r0, [pc, #4]	@ (800da88 <__sfp_lock_acquire+0x8>)
 800da82:	f000 b98e 	b.w	800dda2 <__retarget_lock_acquire_recursive>
 800da86:	bf00      	nop
 800da88:	2000082d 	.word	0x2000082d

0800da8c <__sfp_lock_release>:
 800da8c:	4801      	ldr	r0, [pc, #4]	@ (800da94 <__sfp_lock_release+0x8>)
 800da8e:	f000 b989 	b.w	800dda4 <__retarget_lock_release_recursive>
 800da92:	bf00      	nop
 800da94:	2000082d 	.word	0x2000082d

0800da98 <__sinit>:
 800da98:	b510      	push	{r4, lr}
 800da9a:	4604      	mov	r4, r0
 800da9c:	f7ff fff0 	bl	800da80 <__sfp_lock_acquire>
 800daa0:	6a23      	ldr	r3, [r4, #32]
 800daa2:	b11b      	cbz	r3, 800daac <__sinit+0x14>
 800daa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daa8:	f7ff bff0 	b.w	800da8c <__sfp_lock_release>
 800daac:	4b04      	ldr	r3, [pc, #16]	@ (800dac0 <__sinit+0x28>)
 800daae:	6223      	str	r3, [r4, #32]
 800dab0:	4b04      	ldr	r3, [pc, #16]	@ (800dac4 <__sinit+0x2c>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d1f5      	bne.n	800daa4 <__sinit+0xc>
 800dab8:	f7ff ffc4 	bl	800da44 <global_stdio_init.part.0>
 800dabc:	e7f2      	b.n	800daa4 <__sinit+0xc>
 800dabe:	bf00      	nop
 800dac0:	0800da05 	.word	0x0800da05
 800dac4:	20000824 	.word	0x20000824

0800dac8 <_fwalk_sglue>:
 800dac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dacc:	4607      	mov	r7, r0
 800dace:	4688      	mov	r8, r1
 800dad0:	4614      	mov	r4, r2
 800dad2:	2600      	movs	r6, #0
 800dad4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dad8:	f1b9 0901 	subs.w	r9, r9, #1
 800dadc:	d505      	bpl.n	800daea <_fwalk_sglue+0x22>
 800dade:	6824      	ldr	r4, [r4, #0]
 800dae0:	2c00      	cmp	r4, #0
 800dae2:	d1f7      	bne.n	800dad4 <_fwalk_sglue+0xc>
 800dae4:	4630      	mov	r0, r6
 800dae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daea:	89ab      	ldrh	r3, [r5, #12]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d907      	bls.n	800db00 <_fwalk_sglue+0x38>
 800daf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800daf4:	3301      	adds	r3, #1
 800daf6:	d003      	beq.n	800db00 <_fwalk_sglue+0x38>
 800daf8:	4629      	mov	r1, r5
 800dafa:	4638      	mov	r0, r7
 800dafc:	47c0      	blx	r8
 800dafe:	4306      	orrs	r6, r0
 800db00:	3568      	adds	r5, #104	@ 0x68
 800db02:	e7e9      	b.n	800dad8 <_fwalk_sglue+0x10>

0800db04 <siprintf>:
 800db04:	b40e      	push	{r1, r2, r3}
 800db06:	b500      	push	{lr}
 800db08:	b09c      	sub	sp, #112	@ 0x70
 800db0a:	ab1d      	add	r3, sp, #116	@ 0x74
 800db0c:	9002      	str	r0, [sp, #8]
 800db0e:	9006      	str	r0, [sp, #24]
 800db10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800db14:	4809      	ldr	r0, [pc, #36]	@ (800db3c <siprintf+0x38>)
 800db16:	9107      	str	r1, [sp, #28]
 800db18:	9104      	str	r1, [sp, #16]
 800db1a:	4909      	ldr	r1, [pc, #36]	@ (800db40 <siprintf+0x3c>)
 800db1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800db20:	9105      	str	r1, [sp, #20]
 800db22:	6800      	ldr	r0, [r0, #0]
 800db24:	9301      	str	r3, [sp, #4]
 800db26:	a902      	add	r1, sp, #8
 800db28:	f002 f92c 	bl	800fd84 <_svfiprintf_r>
 800db2c:	9b02      	ldr	r3, [sp, #8]
 800db2e:	2200      	movs	r2, #0
 800db30:	701a      	strb	r2, [r3, #0]
 800db32:	b01c      	add	sp, #112	@ 0x70
 800db34:	f85d eb04 	ldr.w	lr, [sp], #4
 800db38:	b003      	add	sp, #12
 800db3a:	4770      	bx	lr
 800db3c:	20000264 	.word	0x20000264
 800db40:	ffff0208 	.word	0xffff0208

0800db44 <__sread>:
 800db44:	b510      	push	{r4, lr}
 800db46:	460c      	mov	r4, r1
 800db48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db4c:	f000 f8da 	bl	800dd04 <_read_r>
 800db50:	2800      	cmp	r0, #0
 800db52:	bfab      	itete	ge
 800db54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db56:	89a3      	ldrhlt	r3, [r4, #12]
 800db58:	181b      	addge	r3, r3, r0
 800db5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800db5e:	bfac      	ite	ge
 800db60:	6563      	strge	r3, [r4, #84]	@ 0x54
 800db62:	81a3      	strhlt	r3, [r4, #12]
 800db64:	bd10      	pop	{r4, pc}

0800db66 <__swrite>:
 800db66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db6a:	461f      	mov	r7, r3
 800db6c:	898b      	ldrh	r3, [r1, #12]
 800db6e:	05db      	lsls	r3, r3, #23
 800db70:	4605      	mov	r5, r0
 800db72:	460c      	mov	r4, r1
 800db74:	4616      	mov	r6, r2
 800db76:	d505      	bpl.n	800db84 <__swrite+0x1e>
 800db78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db7c:	2302      	movs	r3, #2
 800db7e:	2200      	movs	r2, #0
 800db80:	f000 f8ae 	bl	800dce0 <_lseek_r>
 800db84:	89a3      	ldrh	r3, [r4, #12]
 800db86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db8e:	81a3      	strh	r3, [r4, #12]
 800db90:	4632      	mov	r2, r6
 800db92:	463b      	mov	r3, r7
 800db94:	4628      	mov	r0, r5
 800db96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db9a:	f000 b8c5 	b.w	800dd28 <_write_r>

0800db9e <__sseek>:
 800db9e:	b510      	push	{r4, lr}
 800dba0:	460c      	mov	r4, r1
 800dba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dba6:	f000 f89b 	bl	800dce0 <_lseek_r>
 800dbaa:	1c43      	adds	r3, r0, #1
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	bf15      	itete	ne
 800dbb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dbb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dbb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dbba:	81a3      	strheq	r3, [r4, #12]
 800dbbc:	bf18      	it	ne
 800dbbe:	81a3      	strhne	r3, [r4, #12]
 800dbc0:	bd10      	pop	{r4, pc}

0800dbc2 <__sclose>:
 800dbc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbc6:	f000 b87b 	b.w	800dcc0 <_close_r>

0800dbca <memset>:
 800dbca:	4402      	add	r2, r0
 800dbcc:	4603      	mov	r3, r0
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d100      	bne.n	800dbd4 <memset+0xa>
 800dbd2:	4770      	bx	lr
 800dbd4:	f803 1b01 	strb.w	r1, [r3], #1
 800dbd8:	e7f9      	b.n	800dbce <memset+0x4>

0800dbda <strncmp>:
 800dbda:	b510      	push	{r4, lr}
 800dbdc:	b16a      	cbz	r2, 800dbfa <strncmp+0x20>
 800dbde:	3901      	subs	r1, #1
 800dbe0:	1884      	adds	r4, r0, r2
 800dbe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbe6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d103      	bne.n	800dbf6 <strncmp+0x1c>
 800dbee:	42a0      	cmp	r0, r4
 800dbf0:	d001      	beq.n	800dbf6 <strncmp+0x1c>
 800dbf2:	2a00      	cmp	r2, #0
 800dbf4:	d1f5      	bne.n	800dbe2 <strncmp+0x8>
 800dbf6:	1ad0      	subs	r0, r2, r3
 800dbf8:	bd10      	pop	{r4, pc}
 800dbfa:	4610      	mov	r0, r2
 800dbfc:	e7fc      	b.n	800dbf8 <strncmp+0x1e>
	...

0800dc00 <strtok>:
 800dc00:	4b16      	ldr	r3, [pc, #88]	@ (800dc5c <strtok+0x5c>)
 800dc02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc06:	681f      	ldr	r7, [r3, #0]
 800dc08:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800dc0a:	4605      	mov	r5, r0
 800dc0c:	460e      	mov	r6, r1
 800dc0e:	b9ec      	cbnz	r4, 800dc4c <strtok+0x4c>
 800dc10:	2050      	movs	r0, #80	@ 0x50
 800dc12:	f001 fad5 	bl	800f1c0 <malloc>
 800dc16:	4602      	mov	r2, r0
 800dc18:	6478      	str	r0, [r7, #68]	@ 0x44
 800dc1a:	b920      	cbnz	r0, 800dc26 <strtok+0x26>
 800dc1c:	4b10      	ldr	r3, [pc, #64]	@ (800dc60 <strtok+0x60>)
 800dc1e:	4811      	ldr	r0, [pc, #68]	@ (800dc64 <strtok+0x64>)
 800dc20:	215b      	movs	r1, #91	@ 0x5b
 800dc22:	f000 f8df 	bl	800dde4 <__assert_func>
 800dc26:	e9c0 4400 	strd	r4, r4, [r0]
 800dc2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800dc2e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800dc32:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800dc36:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800dc3a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800dc3e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800dc42:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800dc46:	6184      	str	r4, [r0, #24]
 800dc48:	7704      	strb	r4, [r0, #28]
 800dc4a:	6244      	str	r4, [r0, #36]	@ 0x24
 800dc4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dc4e:	4631      	mov	r1, r6
 800dc50:	4628      	mov	r0, r5
 800dc52:	2301      	movs	r3, #1
 800dc54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc58:	f000 b806 	b.w	800dc68 <__strtok_r>
 800dc5c:	20000264 	.word	0x20000264
 800dc60:	080125ea 	.word	0x080125ea
 800dc64:	08012601 	.word	0x08012601

0800dc68 <__strtok_r>:
 800dc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	b908      	cbnz	r0, 800dc72 <__strtok_r+0xa>
 800dc6e:	6814      	ldr	r4, [r2, #0]
 800dc70:	b144      	cbz	r4, 800dc84 <__strtok_r+0x1c>
 800dc72:	4620      	mov	r0, r4
 800dc74:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dc78:	460f      	mov	r7, r1
 800dc7a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800dc7e:	b91e      	cbnz	r6, 800dc88 <__strtok_r+0x20>
 800dc80:	b965      	cbnz	r5, 800dc9c <__strtok_r+0x34>
 800dc82:	6015      	str	r5, [r2, #0]
 800dc84:	2000      	movs	r0, #0
 800dc86:	e005      	b.n	800dc94 <__strtok_r+0x2c>
 800dc88:	42b5      	cmp	r5, r6
 800dc8a:	d1f6      	bne.n	800dc7a <__strtok_r+0x12>
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d1f0      	bne.n	800dc72 <__strtok_r+0xa>
 800dc90:	6014      	str	r4, [r2, #0]
 800dc92:	7003      	strb	r3, [r0, #0]
 800dc94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc96:	461c      	mov	r4, r3
 800dc98:	e00c      	b.n	800dcb4 <__strtok_r+0x4c>
 800dc9a:	b915      	cbnz	r5, 800dca2 <__strtok_r+0x3a>
 800dc9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dca0:	460e      	mov	r6, r1
 800dca2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800dca6:	42ab      	cmp	r3, r5
 800dca8:	d1f7      	bne.n	800dc9a <__strtok_r+0x32>
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d0f3      	beq.n	800dc96 <__strtok_r+0x2e>
 800dcae:	2300      	movs	r3, #0
 800dcb0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800dcb4:	6014      	str	r4, [r2, #0]
 800dcb6:	e7ed      	b.n	800dc94 <__strtok_r+0x2c>

0800dcb8 <_localeconv_r>:
 800dcb8:	4800      	ldr	r0, [pc, #0]	@ (800dcbc <_localeconv_r+0x4>)
 800dcba:	4770      	bx	lr
 800dcbc:	200001e8 	.word	0x200001e8

0800dcc0 <_close_r>:
 800dcc0:	b538      	push	{r3, r4, r5, lr}
 800dcc2:	4d06      	ldr	r5, [pc, #24]	@ (800dcdc <_close_r+0x1c>)
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	4608      	mov	r0, r1
 800dcca:	602b      	str	r3, [r5, #0]
 800dccc:	f7fa fb70 	bl	80083b0 <_close>
 800dcd0:	1c43      	adds	r3, r0, #1
 800dcd2:	d102      	bne.n	800dcda <_close_r+0x1a>
 800dcd4:	682b      	ldr	r3, [r5, #0]
 800dcd6:	b103      	cbz	r3, 800dcda <_close_r+0x1a>
 800dcd8:	6023      	str	r3, [r4, #0]
 800dcda:	bd38      	pop	{r3, r4, r5, pc}
 800dcdc:	20000828 	.word	0x20000828

0800dce0 <_lseek_r>:
 800dce0:	b538      	push	{r3, r4, r5, lr}
 800dce2:	4d07      	ldr	r5, [pc, #28]	@ (800dd00 <_lseek_r+0x20>)
 800dce4:	4604      	mov	r4, r0
 800dce6:	4608      	mov	r0, r1
 800dce8:	4611      	mov	r1, r2
 800dcea:	2200      	movs	r2, #0
 800dcec:	602a      	str	r2, [r5, #0]
 800dcee:	461a      	mov	r2, r3
 800dcf0:	f7fa fb85 	bl	80083fe <_lseek>
 800dcf4:	1c43      	adds	r3, r0, #1
 800dcf6:	d102      	bne.n	800dcfe <_lseek_r+0x1e>
 800dcf8:	682b      	ldr	r3, [r5, #0]
 800dcfa:	b103      	cbz	r3, 800dcfe <_lseek_r+0x1e>
 800dcfc:	6023      	str	r3, [r4, #0]
 800dcfe:	bd38      	pop	{r3, r4, r5, pc}
 800dd00:	20000828 	.word	0x20000828

0800dd04 <_read_r>:
 800dd04:	b538      	push	{r3, r4, r5, lr}
 800dd06:	4d07      	ldr	r5, [pc, #28]	@ (800dd24 <_read_r+0x20>)
 800dd08:	4604      	mov	r4, r0
 800dd0a:	4608      	mov	r0, r1
 800dd0c:	4611      	mov	r1, r2
 800dd0e:	2200      	movs	r2, #0
 800dd10:	602a      	str	r2, [r5, #0]
 800dd12:	461a      	mov	r2, r3
 800dd14:	f7fa fb13 	bl	800833e <_read>
 800dd18:	1c43      	adds	r3, r0, #1
 800dd1a:	d102      	bne.n	800dd22 <_read_r+0x1e>
 800dd1c:	682b      	ldr	r3, [r5, #0]
 800dd1e:	b103      	cbz	r3, 800dd22 <_read_r+0x1e>
 800dd20:	6023      	str	r3, [r4, #0]
 800dd22:	bd38      	pop	{r3, r4, r5, pc}
 800dd24:	20000828 	.word	0x20000828

0800dd28 <_write_r>:
 800dd28:	b538      	push	{r3, r4, r5, lr}
 800dd2a:	4d07      	ldr	r5, [pc, #28]	@ (800dd48 <_write_r+0x20>)
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	4608      	mov	r0, r1
 800dd30:	4611      	mov	r1, r2
 800dd32:	2200      	movs	r2, #0
 800dd34:	602a      	str	r2, [r5, #0]
 800dd36:	461a      	mov	r2, r3
 800dd38:	f7fa fb1e 	bl	8008378 <_write>
 800dd3c:	1c43      	adds	r3, r0, #1
 800dd3e:	d102      	bne.n	800dd46 <_write_r+0x1e>
 800dd40:	682b      	ldr	r3, [r5, #0]
 800dd42:	b103      	cbz	r3, 800dd46 <_write_r+0x1e>
 800dd44:	6023      	str	r3, [r4, #0]
 800dd46:	bd38      	pop	{r3, r4, r5, pc}
 800dd48:	20000828 	.word	0x20000828

0800dd4c <__errno>:
 800dd4c:	4b01      	ldr	r3, [pc, #4]	@ (800dd54 <__errno+0x8>)
 800dd4e:	6818      	ldr	r0, [r3, #0]
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop
 800dd54:	20000264 	.word	0x20000264

0800dd58 <__libc_init_array>:
 800dd58:	b570      	push	{r4, r5, r6, lr}
 800dd5a:	4d0d      	ldr	r5, [pc, #52]	@ (800dd90 <__libc_init_array+0x38>)
 800dd5c:	4c0d      	ldr	r4, [pc, #52]	@ (800dd94 <__libc_init_array+0x3c>)
 800dd5e:	1b64      	subs	r4, r4, r5
 800dd60:	10a4      	asrs	r4, r4, #2
 800dd62:	2600      	movs	r6, #0
 800dd64:	42a6      	cmp	r6, r4
 800dd66:	d109      	bne.n	800dd7c <__libc_init_array+0x24>
 800dd68:	4d0b      	ldr	r5, [pc, #44]	@ (800dd98 <__libc_init_array+0x40>)
 800dd6a:	4c0c      	ldr	r4, [pc, #48]	@ (800dd9c <__libc_init_array+0x44>)
 800dd6c:	f004 fa70 	bl	8012250 <_init>
 800dd70:	1b64      	subs	r4, r4, r5
 800dd72:	10a4      	asrs	r4, r4, #2
 800dd74:	2600      	movs	r6, #0
 800dd76:	42a6      	cmp	r6, r4
 800dd78:	d105      	bne.n	800dd86 <__libc_init_array+0x2e>
 800dd7a:	bd70      	pop	{r4, r5, r6, pc}
 800dd7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd80:	4798      	blx	r3
 800dd82:	3601      	adds	r6, #1
 800dd84:	e7ee      	b.n	800dd64 <__libc_init_array+0xc>
 800dd86:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd8a:	4798      	blx	r3
 800dd8c:	3601      	adds	r6, #1
 800dd8e:	e7f2      	b.n	800dd76 <__libc_init_array+0x1e>
 800dd90:	08012b38 	.word	0x08012b38
 800dd94:	08012b38 	.word	0x08012b38
 800dd98:	08012b38 	.word	0x08012b38
 800dd9c:	08012b3c 	.word	0x08012b3c

0800dda0 <__retarget_lock_init_recursive>:
 800dda0:	4770      	bx	lr

0800dda2 <__retarget_lock_acquire_recursive>:
 800dda2:	4770      	bx	lr

0800dda4 <__retarget_lock_release_recursive>:
 800dda4:	4770      	bx	lr

0800dda6 <memcpy>:
 800dda6:	440a      	add	r2, r1
 800dda8:	4291      	cmp	r1, r2
 800ddaa:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddae:	d100      	bne.n	800ddb2 <memcpy+0xc>
 800ddb0:	4770      	bx	lr
 800ddb2:	b510      	push	{r4, lr}
 800ddb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddbc:	4291      	cmp	r1, r2
 800ddbe:	d1f9      	bne.n	800ddb4 <memcpy+0xe>
 800ddc0:	bd10      	pop	{r4, pc}
 800ddc2:	0000      	movs	r0, r0
 800ddc4:	0000      	movs	r0, r0
	...

0800ddc8 <nan>:
 800ddc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ddd0 <nan+0x8>
 800ddcc:	4770      	bx	lr
 800ddce:	bf00      	nop
 800ddd0:	00000000 	.word	0x00000000
 800ddd4:	7ff80000 	.word	0x7ff80000

0800ddd8 <nanf>:
 800ddd8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dde0 <nanf+0x8>
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop
 800dde0:	7fc00000 	.word	0x7fc00000

0800dde4 <__assert_func>:
 800dde4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dde6:	4614      	mov	r4, r2
 800dde8:	461a      	mov	r2, r3
 800ddea:	4b09      	ldr	r3, [pc, #36]	@ (800de10 <__assert_func+0x2c>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	4605      	mov	r5, r0
 800ddf0:	68d8      	ldr	r0, [r3, #12]
 800ddf2:	b954      	cbnz	r4, 800de0a <__assert_func+0x26>
 800ddf4:	4b07      	ldr	r3, [pc, #28]	@ (800de14 <__assert_func+0x30>)
 800ddf6:	461c      	mov	r4, r3
 800ddf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddfc:	9100      	str	r1, [sp, #0]
 800ddfe:	462b      	mov	r3, r5
 800de00:	4905      	ldr	r1, [pc, #20]	@ (800de18 <__assert_func+0x34>)
 800de02:	f002 f967 	bl	80100d4 <fiprintf>
 800de06:	f002 f9a1 	bl	801014c <abort>
 800de0a:	4b04      	ldr	r3, [pc, #16]	@ (800de1c <__assert_func+0x38>)
 800de0c:	e7f4      	b.n	800ddf8 <__assert_func+0x14>
 800de0e:	bf00      	nop
 800de10:	20000264 	.word	0x20000264
 800de14:	0801269e 	.word	0x0801269e
 800de18:	08012670 	.word	0x08012670
 800de1c:	08012663 	.word	0x08012663

0800de20 <quorem>:
 800de20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de24:	6903      	ldr	r3, [r0, #16]
 800de26:	690c      	ldr	r4, [r1, #16]
 800de28:	42a3      	cmp	r3, r4
 800de2a:	4607      	mov	r7, r0
 800de2c:	db7e      	blt.n	800df2c <quorem+0x10c>
 800de2e:	3c01      	subs	r4, #1
 800de30:	f101 0814 	add.w	r8, r1, #20
 800de34:	00a3      	lsls	r3, r4, #2
 800de36:	f100 0514 	add.w	r5, r0, #20
 800de3a:	9300      	str	r3, [sp, #0]
 800de3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de40:	9301      	str	r3, [sp, #4]
 800de42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800de46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de4a:	3301      	adds	r3, #1
 800de4c:	429a      	cmp	r2, r3
 800de4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de52:	fbb2 f6f3 	udiv	r6, r2, r3
 800de56:	d32e      	bcc.n	800deb6 <quorem+0x96>
 800de58:	f04f 0a00 	mov.w	sl, #0
 800de5c:	46c4      	mov	ip, r8
 800de5e:	46ae      	mov	lr, r5
 800de60:	46d3      	mov	fp, sl
 800de62:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de66:	b298      	uxth	r0, r3
 800de68:	fb06 a000 	mla	r0, r6, r0, sl
 800de6c:	0c02      	lsrs	r2, r0, #16
 800de6e:	0c1b      	lsrs	r3, r3, #16
 800de70:	fb06 2303 	mla	r3, r6, r3, r2
 800de74:	f8de 2000 	ldr.w	r2, [lr]
 800de78:	b280      	uxth	r0, r0
 800de7a:	b292      	uxth	r2, r2
 800de7c:	1a12      	subs	r2, r2, r0
 800de7e:	445a      	add	r2, fp
 800de80:	f8de 0000 	ldr.w	r0, [lr]
 800de84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de88:	b29b      	uxth	r3, r3
 800de8a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800de8e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800de92:	b292      	uxth	r2, r2
 800de94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800de98:	45e1      	cmp	r9, ip
 800de9a:	f84e 2b04 	str.w	r2, [lr], #4
 800de9e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dea2:	d2de      	bcs.n	800de62 <quorem+0x42>
 800dea4:	9b00      	ldr	r3, [sp, #0]
 800dea6:	58eb      	ldr	r3, [r5, r3]
 800dea8:	b92b      	cbnz	r3, 800deb6 <quorem+0x96>
 800deaa:	9b01      	ldr	r3, [sp, #4]
 800deac:	3b04      	subs	r3, #4
 800deae:	429d      	cmp	r5, r3
 800deb0:	461a      	mov	r2, r3
 800deb2:	d32f      	bcc.n	800df14 <quorem+0xf4>
 800deb4:	613c      	str	r4, [r7, #16]
 800deb6:	4638      	mov	r0, r7
 800deb8:	f001 fd0e 	bl	800f8d8 <__mcmp>
 800debc:	2800      	cmp	r0, #0
 800debe:	db25      	blt.n	800df0c <quorem+0xec>
 800dec0:	4629      	mov	r1, r5
 800dec2:	2000      	movs	r0, #0
 800dec4:	f858 2b04 	ldr.w	r2, [r8], #4
 800dec8:	f8d1 c000 	ldr.w	ip, [r1]
 800decc:	fa1f fe82 	uxth.w	lr, r2
 800ded0:	fa1f f38c 	uxth.w	r3, ip
 800ded4:	eba3 030e 	sub.w	r3, r3, lr
 800ded8:	4403      	add	r3, r0
 800deda:	0c12      	lsrs	r2, r2, #16
 800dedc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dee0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800deea:	45c1      	cmp	r9, r8
 800deec:	f841 3b04 	str.w	r3, [r1], #4
 800def0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800def4:	d2e6      	bcs.n	800dec4 <quorem+0xa4>
 800def6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800defa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800defe:	b922      	cbnz	r2, 800df0a <quorem+0xea>
 800df00:	3b04      	subs	r3, #4
 800df02:	429d      	cmp	r5, r3
 800df04:	461a      	mov	r2, r3
 800df06:	d30b      	bcc.n	800df20 <quorem+0x100>
 800df08:	613c      	str	r4, [r7, #16]
 800df0a:	3601      	adds	r6, #1
 800df0c:	4630      	mov	r0, r6
 800df0e:	b003      	add	sp, #12
 800df10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df14:	6812      	ldr	r2, [r2, #0]
 800df16:	3b04      	subs	r3, #4
 800df18:	2a00      	cmp	r2, #0
 800df1a:	d1cb      	bne.n	800deb4 <quorem+0x94>
 800df1c:	3c01      	subs	r4, #1
 800df1e:	e7c6      	b.n	800deae <quorem+0x8e>
 800df20:	6812      	ldr	r2, [r2, #0]
 800df22:	3b04      	subs	r3, #4
 800df24:	2a00      	cmp	r2, #0
 800df26:	d1ef      	bne.n	800df08 <quorem+0xe8>
 800df28:	3c01      	subs	r4, #1
 800df2a:	e7ea      	b.n	800df02 <quorem+0xe2>
 800df2c:	2000      	movs	r0, #0
 800df2e:	e7ee      	b.n	800df0e <quorem+0xee>

0800df30 <_dtoa_r>:
 800df30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df34:	69c7      	ldr	r7, [r0, #28]
 800df36:	b099      	sub	sp, #100	@ 0x64
 800df38:	ed8d 0b02 	vstr	d0, [sp, #8]
 800df3c:	ec55 4b10 	vmov	r4, r5, d0
 800df40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800df42:	9109      	str	r1, [sp, #36]	@ 0x24
 800df44:	4683      	mov	fp, r0
 800df46:	920e      	str	r2, [sp, #56]	@ 0x38
 800df48:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df4a:	b97f      	cbnz	r7, 800df6c <_dtoa_r+0x3c>
 800df4c:	2010      	movs	r0, #16
 800df4e:	f001 f937 	bl	800f1c0 <malloc>
 800df52:	4602      	mov	r2, r0
 800df54:	f8cb 001c 	str.w	r0, [fp, #28]
 800df58:	b920      	cbnz	r0, 800df64 <_dtoa_r+0x34>
 800df5a:	4ba7      	ldr	r3, [pc, #668]	@ (800e1f8 <_dtoa_r+0x2c8>)
 800df5c:	21ef      	movs	r1, #239	@ 0xef
 800df5e:	48a7      	ldr	r0, [pc, #668]	@ (800e1fc <_dtoa_r+0x2cc>)
 800df60:	f7ff ff40 	bl	800dde4 <__assert_func>
 800df64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800df68:	6007      	str	r7, [r0, #0]
 800df6a:	60c7      	str	r7, [r0, #12]
 800df6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df70:	6819      	ldr	r1, [r3, #0]
 800df72:	b159      	cbz	r1, 800df8c <_dtoa_r+0x5c>
 800df74:	685a      	ldr	r2, [r3, #4]
 800df76:	604a      	str	r2, [r1, #4]
 800df78:	2301      	movs	r3, #1
 800df7a:	4093      	lsls	r3, r2
 800df7c:	608b      	str	r3, [r1, #8]
 800df7e:	4658      	mov	r0, fp
 800df80:	f001 fa26 	bl	800f3d0 <_Bfree>
 800df84:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df88:	2200      	movs	r2, #0
 800df8a:	601a      	str	r2, [r3, #0]
 800df8c:	1e2b      	subs	r3, r5, #0
 800df8e:	bfb9      	ittee	lt
 800df90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800df94:	9303      	strlt	r3, [sp, #12]
 800df96:	2300      	movge	r3, #0
 800df98:	6033      	strge	r3, [r6, #0]
 800df9a:	9f03      	ldr	r7, [sp, #12]
 800df9c:	4b98      	ldr	r3, [pc, #608]	@ (800e200 <_dtoa_r+0x2d0>)
 800df9e:	bfbc      	itt	lt
 800dfa0:	2201      	movlt	r2, #1
 800dfa2:	6032      	strlt	r2, [r6, #0]
 800dfa4:	43bb      	bics	r3, r7
 800dfa6:	d112      	bne.n	800dfce <_dtoa_r+0x9e>
 800dfa8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dfaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dfae:	6013      	str	r3, [r2, #0]
 800dfb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dfb4:	4323      	orrs	r3, r4
 800dfb6:	f000 854d 	beq.w	800ea54 <_dtoa_r+0xb24>
 800dfba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e214 <_dtoa_r+0x2e4>
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f000 854f 	beq.w	800ea64 <_dtoa_r+0xb34>
 800dfc6:	f10a 0303 	add.w	r3, sl, #3
 800dfca:	f000 bd49 	b.w	800ea60 <_dtoa_r+0xb30>
 800dfce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	ec51 0b17 	vmov	r0, r1, d7
 800dfd8:	2300      	movs	r3, #0
 800dfda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dfde:	f7f2 fd73 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfe2:	4680      	mov	r8, r0
 800dfe4:	b158      	cbz	r0, 800dffe <_dtoa_r+0xce>
 800dfe6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dfe8:	2301      	movs	r3, #1
 800dfea:	6013      	str	r3, [r2, #0]
 800dfec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfee:	b113      	cbz	r3, 800dff6 <_dtoa_r+0xc6>
 800dff0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dff2:	4b84      	ldr	r3, [pc, #528]	@ (800e204 <_dtoa_r+0x2d4>)
 800dff4:	6013      	str	r3, [r2, #0]
 800dff6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e218 <_dtoa_r+0x2e8>
 800dffa:	f000 bd33 	b.w	800ea64 <_dtoa_r+0xb34>
 800dffe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e002:	aa16      	add	r2, sp, #88	@ 0x58
 800e004:	a917      	add	r1, sp, #92	@ 0x5c
 800e006:	4658      	mov	r0, fp
 800e008:	f001 fd86 	bl	800fb18 <__d2b>
 800e00c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e010:	4681      	mov	r9, r0
 800e012:	2e00      	cmp	r6, #0
 800e014:	d077      	beq.n	800e106 <_dtoa_r+0x1d6>
 800e016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e018:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e01c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e024:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e028:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e02c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e030:	4619      	mov	r1, r3
 800e032:	2200      	movs	r2, #0
 800e034:	4b74      	ldr	r3, [pc, #464]	@ (800e208 <_dtoa_r+0x2d8>)
 800e036:	f7f2 f927 	bl	8000288 <__aeabi_dsub>
 800e03a:	a369      	add	r3, pc, #420	@ (adr r3, 800e1e0 <_dtoa_r+0x2b0>)
 800e03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e040:	f7f2 fada 	bl	80005f8 <__aeabi_dmul>
 800e044:	a368      	add	r3, pc, #416	@ (adr r3, 800e1e8 <_dtoa_r+0x2b8>)
 800e046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04a:	f7f2 f91f 	bl	800028c <__adddf3>
 800e04e:	4604      	mov	r4, r0
 800e050:	4630      	mov	r0, r6
 800e052:	460d      	mov	r5, r1
 800e054:	f7f2 fa66 	bl	8000524 <__aeabi_i2d>
 800e058:	a365      	add	r3, pc, #404	@ (adr r3, 800e1f0 <_dtoa_r+0x2c0>)
 800e05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05e:	f7f2 facb 	bl	80005f8 <__aeabi_dmul>
 800e062:	4602      	mov	r2, r0
 800e064:	460b      	mov	r3, r1
 800e066:	4620      	mov	r0, r4
 800e068:	4629      	mov	r1, r5
 800e06a:	f7f2 f90f 	bl	800028c <__adddf3>
 800e06e:	4604      	mov	r4, r0
 800e070:	460d      	mov	r5, r1
 800e072:	f7f2 fd71 	bl	8000b58 <__aeabi_d2iz>
 800e076:	2200      	movs	r2, #0
 800e078:	4607      	mov	r7, r0
 800e07a:	2300      	movs	r3, #0
 800e07c:	4620      	mov	r0, r4
 800e07e:	4629      	mov	r1, r5
 800e080:	f7f2 fd2c 	bl	8000adc <__aeabi_dcmplt>
 800e084:	b140      	cbz	r0, 800e098 <_dtoa_r+0x168>
 800e086:	4638      	mov	r0, r7
 800e088:	f7f2 fa4c 	bl	8000524 <__aeabi_i2d>
 800e08c:	4622      	mov	r2, r4
 800e08e:	462b      	mov	r3, r5
 800e090:	f7f2 fd1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e094:	b900      	cbnz	r0, 800e098 <_dtoa_r+0x168>
 800e096:	3f01      	subs	r7, #1
 800e098:	2f16      	cmp	r7, #22
 800e09a:	d851      	bhi.n	800e140 <_dtoa_r+0x210>
 800e09c:	4b5b      	ldr	r3, [pc, #364]	@ (800e20c <_dtoa_r+0x2dc>)
 800e09e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0aa:	f7f2 fd17 	bl	8000adc <__aeabi_dcmplt>
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	d048      	beq.n	800e144 <_dtoa_r+0x214>
 800e0b2:	3f01      	subs	r7, #1
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	9312      	str	r3, [sp, #72]	@ 0x48
 800e0b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e0ba:	1b9b      	subs	r3, r3, r6
 800e0bc:	1e5a      	subs	r2, r3, #1
 800e0be:	bf44      	itt	mi
 800e0c0:	f1c3 0801 	rsbmi	r8, r3, #1
 800e0c4:	2300      	movmi	r3, #0
 800e0c6:	9208      	str	r2, [sp, #32]
 800e0c8:	bf54      	ite	pl
 800e0ca:	f04f 0800 	movpl.w	r8, #0
 800e0ce:	9308      	strmi	r3, [sp, #32]
 800e0d0:	2f00      	cmp	r7, #0
 800e0d2:	db39      	blt.n	800e148 <_dtoa_r+0x218>
 800e0d4:	9b08      	ldr	r3, [sp, #32]
 800e0d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e0d8:	443b      	add	r3, r7
 800e0da:	9308      	str	r3, [sp, #32]
 800e0dc:	2300      	movs	r3, #0
 800e0de:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0e2:	2b09      	cmp	r3, #9
 800e0e4:	d864      	bhi.n	800e1b0 <_dtoa_r+0x280>
 800e0e6:	2b05      	cmp	r3, #5
 800e0e8:	bfc4      	itt	gt
 800e0ea:	3b04      	subgt	r3, #4
 800e0ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e0ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0f0:	f1a3 0302 	sub.w	r3, r3, #2
 800e0f4:	bfcc      	ite	gt
 800e0f6:	2400      	movgt	r4, #0
 800e0f8:	2401      	movle	r4, #1
 800e0fa:	2b03      	cmp	r3, #3
 800e0fc:	d863      	bhi.n	800e1c6 <_dtoa_r+0x296>
 800e0fe:	e8df f003 	tbb	[pc, r3]
 800e102:	372a      	.short	0x372a
 800e104:	5535      	.short	0x5535
 800e106:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e10a:	441e      	add	r6, r3
 800e10c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e110:	2b20      	cmp	r3, #32
 800e112:	bfc1      	itttt	gt
 800e114:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e118:	409f      	lslgt	r7, r3
 800e11a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e11e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e122:	bfd6      	itet	le
 800e124:	f1c3 0320 	rsble	r3, r3, #32
 800e128:	ea47 0003 	orrgt.w	r0, r7, r3
 800e12c:	fa04 f003 	lslle.w	r0, r4, r3
 800e130:	f7f2 f9e8 	bl	8000504 <__aeabi_ui2d>
 800e134:	2201      	movs	r2, #1
 800e136:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e13a:	3e01      	subs	r6, #1
 800e13c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e13e:	e777      	b.n	800e030 <_dtoa_r+0x100>
 800e140:	2301      	movs	r3, #1
 800e142:	e7b8      	b.n	800e0b6 <_dtoa_r+0x186>
 800e144:	9012      	str	r0, [sp, #72]	@ 0x48
 800e146:	e7b7      	b.n	800e0b8 <_dtoa_r+0x188>
 800e148:	427b      	negs	r3, r7
 800e14a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e14c:	2300      	movs	r3, #0
 800e14e:	eba8 0807 	sub.w	r8, r8, r7
 800e152:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e154:	e7c4      	b.n	800e0e0 <_dtoa_r+0x1b0>
 800e156:	2300      	movs	r3, #0
 800e158:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e15a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	dc35      	bgt.n	800e1cc <_dtoa_r+0x29c>
 800e160:	2301      	movs	r3, #1
 800e162:	9300      	str	r3, [sp, #0]
 800e164:	9307      	str	r3, [sp, #28]
 800e166:	461a      	mov	r2, r3
 800e168:	920e      	str	r2, [sp, #56]	@ 0x38
 800e16a:	e00b      	b.n	800e184 <_dtoa_r+0x254>
 800e16c:	2301      	movs	r3, #1
 800e16e:	e7f3      	b.n	800e158 <_dtoa_r+0x228>
 800e170:	2300      	movs	r3, #0
 800e172:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e176:	18fb      	adds	r3, r7, r3
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	3301      	adds	r3, #1
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	9307      	str	r3, [sp, #28]
 800e180:	bfb8      	it	lt
 800e182:	2301      	movlt	r3, #1
 800e184:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e188:	2100      	movs	r1, #0
 800e18a:	2204      	movs	r2, #4
 800e18c:	f102 0514 	add.w	r5, r2, #20
 800e190:	429d      	cmp	r5, r3
 800e192:	d91f      	bls.n	800e1d4 <_dtoa_r+0x2a4>
 800e194:	6041      	str	r1, [r0, #4]
 800e196:	4658      	mov	r0, fp
 800e198:	f001 f8da 	bl	800f350 <_Balloc>
 800e19c:	4682      	mov	sl, r0
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d13c      	bne.n	800e21c <_dtoa_r+0x2ec>
 800e1a2:	4b1b      	ldr	r3, [pc, #108]	@ (800e210 <_dtoa_r+0x2e0>)
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e1aa:	e6d8      	b.n	800df5e <_dtoa_r+0x2e>
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	e7e0      	b.n	800e172 <_dtoa_r+0x242>
 800e1b0:	2401      	movs	r4, #1
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e1b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	9307      	str	r3, [sp, #28]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	2312      	movs	r3, #18
 800e1c4:	e7d0      	b.n	800e168 <_dtoa_r+0x238>
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1ca:	e7f5      	b.n	800e1b8 <_dtoa_r+0x288>
 800e1cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	9307      	str	r3, [sp, #28]
 800e1d2:	e7d7      	b.n	800e184 <_dtoa_r+0x254>
 800e1d4:	3101      	adds	r1, #1
 800e1d6:	0052      	lsls	r2, r2, #1
 800e1d8:	e7d8      	b.n	800e18c <_dtoa_r+0x25c>
 800e1da:	bf00      	nop
 800e1dc:	f3af 8000 	nop.w
 800e1e0:	636f4361 	.word	0x636f4361
 800e1e4:	3fd287a7 	.word	0x3fd287a7
 800e1e8:	8b60c8b3 	.word	0x8b60c8b3
 800e1ec:	3fc68a28 	.word	0x3fc68a28
 800e1f0:	509f79fb 	.word	0x509f79fb
 800e1f4:	3fd34413 	.word	0x3fd34413
 800e1f8:	080125ea 	.word	0x080125ea
 800e1fc:	080126ac 	.word	0x080126ac
 800e200:	7ff00000 	.word	0x7ff00000
 800e204:	080125c2 	.word	0x080125c2
 800e208:	3ff80000 	.word	0x3ff80000
 800e20c:	08012808 	.word	0x08012808
 800e210:	08012704 	.word	0x08012704
 800e214:	080126a8 	.word	0x080126a8
 800e218:	080125c1 	.word	0x080125c1
 800e21c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e220:	6018      	str	r0, [r3, #0]
 800e222:	9b07      	ldr	r3, [sp, #28]
 800e224:	2b0e      	cmp	r3, #14
 800e226:	f200 80a4 	bhi.w	800e372 <_dtoa_r+0x442>
 800e22a:	2c00      	cmp	r4, #0
 800e22c:	f000 80a1 	beq.w	800e372 <_dtoa_r+0x442>
 800e230:	2f00      	cmp	r7, #0
 800e232:	dd33      	ble.n	800e29c <_dtoa_r+0x36c>
 800e234:	4bad      	ldr	r3, [pc, #692]	@ (800e4ec <_dtoa_r+0x5bc>)
 800e236:	f007 020f 	and.w	r2, r7, #15
 800e23a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e23e:	ed93 7b00 	vldr	d7, [r3]
 800e242:	05f8      	lsls	r0, r7, #23
 800e244:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e248:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e24c:	d516      	bpl.n	800e27c <_dtoa_r+0x34c>
 800e24e:	4ba8      	ldr	r3, [pc, #672]	@ (800e4f0 <_dtoa_r+0x5c0>)
 800e250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e254:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e258:	f7f2 faf8 	bl	800084c <__aeabi_ddiv>
 800e25c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e260:	f004 040f 	and.w	r4, r4, #15
 800e264:	2603      	movs	r6, #3
 800e266:	4da2      	ldr	r5, [pc, #648]	@ (800e4f0 <_dtoa_r+0x5c0>)
 800e268:	b954      	cbnz	r4, 800e280 <_dtoa_r+0x350>
 800e26a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e26e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e272:	f7f2 faeb 	bl	800084c <__aeabi_ddiv>
 800e276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e27a:	e028      	b.n	800e2ce <_dtoa_r+0x39e>
 800e27c:	2602      	movs	r6, #2
 800e27e:	e7f2      	b.n	800e266 <_dtoa_r+0x336>
 800e280:	07e1      	lsls	r1, r4, #31
 800e282:	d508      	bpl.n	800e296 <_dtoa_r+0x366>
 800e284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e288:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e28c:	f7f2 f9b4 	bl	80005f8 <__aeabi_dmul>
 800e290:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e294:	3601      	adds	r6, #1
 800e296:	1064      	asrs	r4, r4, #1
 800e298:	3508      	adds	r5, #8
 800e29a:	e7e5      	b.n	800e268 <_dtoa_r+0x338>
 800e29c:	f000 80d2 	beq.w	800e444 <_dtoa_r+0x514>
 800e2a0:	427c      	negs	r4, r7
 800e2a2:	4b92      	ldr	r3, [pc, #584]	@ (800e4ec <_dtoa_r+0x5bc>)
 800e2a4:	4d92      	ldr	r5, [pc, #584]	@ (800e4f0 <_dtoa_r+0x5c0>)
 800e2a6:	f004 020f 	and.w	r2, r4, #15
 800e2aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2b6:	f7f2 f99f 	bl	80005f8 <__aeabi_dmul>
 800e2ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2be:	1124      	asrs	r4, r4, #4
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	2602      	movs	r6, #2
 800e2c4:	2c00      	cmp	r4, #0
 800e2c6:	f040 80b2 	bne.w	800e42e <_dtoa_r+0x4fe>
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d1d3      	bne.n	800e276 <_dtoa_r+0x346>
 800e2ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e2d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 80b7 	beq.w	800e448 <_dtoa_r+0x518>
 800e2da:	4b86      	ldr	r3, [pc, #536]	@ (800e4f4 <_dtoa_r+0x5c4>)
 800e2dc:	2200      	movs	r2, #0
 800e2de:	4620      	mov	r0, r4
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	f7f2 fbfb 	bl	8000adc <__aeabi_dcmplt>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	f000 80ae 	beq.w	800e448 <_dtoa_r+0x518>
 800e2ec:	9b07      	ldr	r3, [sp, #28]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f000 80aa 	beq.w	800e448 <_dtoa_r+0x518>
 800e2f4:	9b00      	ldr	r3, [sp, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	dd37      	ble.n	800e36a <_dtoa_r+0x43a>
 800e2fa:	1e7b      	subs	r3, r7, #1
 800e2fc:	9304      	str	r3, [sp, #16]
 800e2fe:	4620      	mov	r0, r4
 800e300:	4b7d      	ldr	r3, [pc, #500]	@ (800e4f8 <_dtoa_r+0x5c8>)
 800e302:	2200      	movs	r2, #0
 800e304:	4629      	mov	r1, r5
 800e306:	f7f2 f977 	bl	80005f8 <__aeabi_dmul>
 800e30a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e30e:	9c00      	ldr	r4, [sp, #0]
 800e310:	3601      	adds	r6, #1
 800e312:	4630      	mov	r0, r6
 800e314:	f7f2 f906 	bl	8000524 <__aeabi_i2d>
 800e318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e31c:	f7f2 f96c 	bl	80005f8 <__aeabi_dmul>
 800e320:	4b76      	ldr	r3, [pc, #472]	@ (800e4fc <_dtoa_r+0x5cc>)
 800e322:	2200      	movs	r2, #0
 800e324:	f7f1 ffb2 	bl	800028c <__adddf3>
 800e328:	4605      	mov	r5, r0
 800e32a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e32e:	2c00      	cmp	r4, #0
 800e330:	f040 808d 	bne.w	800e44e <_dtoa_r+0x51e>
 800e334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e338:	4b71      	ldr	r3, [pc, #452]	@ (800e500 <_dtoa_r+0x5d0>)
 800e33a:	2200      	movs	r2, #0
 800e33c:	f7f1 ffa4 	bl	8000288 <__aeabi_dsub>
 800e340:	4602      	mov	r2, r0
 800e342:	460b      	mov	r3, r1
 800e344:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e348:	462a      	mov	r2, r5
 800e34a:	4633      	mov	r3, r6
 800e34c:	f7f2 fbe4 	bl	8000b18 <__aeabi_dcmpgt>
 800e350:	2800      	cmp	r0, #0
 800e352:	f040 828b 	bne.w	800e86c <_dtoa_r+0x93c>
 800e356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e35a:	462a      	mov	r2, r5
 800e35c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e360:	f7f2 fbbc 	bl	8000adc <__aeabi_dcmplt>
 800e364:	2800      	cmp	r0, #0
 800e366:	f040 8128 	bne.w	800e5ba <_dtoa_r+0x68a>
 800e36a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e36e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e372:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e374:	2b00      	cmp	r3, #0
 800e376:	f2c0 815a 	blt.w	800e62e <_dtoa_r+0x6fe>
 800e37a:	2f0e      	cmp	r7, #14
 800e37c:	f300 8157 	bgt.w	800e62e <_dtoa_r+0x6fe>
 800e380:	4b5a      	ldr	r3, [pc, #360]	@ (800e4ec <_dtoa_r+0x5bc>)
 800e382:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e386:	ed93 7b00 	vldr	d7, [r3]
 800e38a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	ed8d 7b00 	vstr	d7, [sp]
 800e392:	da03      	bge.n	800e39c <_dtoa_r+0x46c>
 800e394:	9b07      	ldr	r3, [sp, #28]
 800e396:	2b00      	cmp	r3, #0
 800e398:	f340 8101 	ble.w	800e59e <_dtoa_r+0x66e>
 800e39c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e3a0:	4656      	mov	r6, sl
 800e3a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	4629      	mov	r1, r5
 800e3aa:	f7f2 fa4f 	bl	800084c <__aeabi_ddiv>
 800e3ae:	f7f2 fbd3 	bl	8000b58 <__aeabi_d2iz>
 800e3b2:	4680      	mov	r8, r0
 800e3b4:	f7f2 f8b6 	bl	8000524 <__aeabi_i2d>
 800e3b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3bc:	f7f2 f91c 	bl	80005f8 <__aeabi_dmul>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e3cc:	f7f1 ff5c 	bl	8000288 <__aeabi_dsub>
 800e3d0:	f806 4b01 	strb.w	r4, [r6], #1
 800e3d4:	9d07      	ldr	r5, [sp, #28]
 800e3d6:	eba6 040a 	sub.w	r4, r6, sl
 800e3da:	42a5      	cmp	r5, r4
 800e3dc:	4602      	mov	r2, r0
 800e3de:	460b      	mov	r3, r1
 800e3e0:	f040 8117 	bne.w	800e612 <_dtoa_r+0x6e2>
 800e3e4:	f7f1 ff52 	bl	800028c <__adddf3>
 800e3e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3ec:	4604      	mov	r4, r0
 800e3ee:	460d      	mov	r5, r1
 800e3f0:	f7f2 fb92 	bl	8000b18 <__aeabi_dcmpgt>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	f040 80f9 	bne.w	800e5ec <_dtoa_r+0x6bc>
 800e3fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3fe:	4620      	mov	r0, r4
 800e400:	4629      	mov	r1, r5
 800e402:	f7f2 fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 800e406:	b118      	cbz	r0, 800e410 <_dtoa_r+0x4e0>
 800e408:	f018 0f01 	tst.w	r8, #1
 800e40c:	f040 80ee 	bne.w	800e5ec <_dtoa_r+0x6bc>
 800e410:	4649      	mov	r1, r9
 800e412:	4658      	mov	r0, fp
 800e414:	f000 ffdc 	bl	800f3d0 <_Bfree>
 800e418:	2300      	movs	r3, #0
 800e41a:	7033      	strb	r3, [r6, #0]
 800e41c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e41e:	3701      	adds	r7, #1
 800e420:	601f      	str	r7, [r3, #0]
 800e422:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e424:	2b00      	cmp	r3, #0
 800e426:	f000 831d 	beq.w	800ea64 <_dtoa_r+0xb34>
 800e42a:	601e      	str	r6, [r3, #0]
 800e42c:	e31a      	b.n	800ea64 <_dtoa_r+0xb34>
 800e42e:	07e2      	lsls	r2, r4, #31
 800e430:	d505      	bpl.n	800e43e <_dtoa_r+0x50e>
 800e432:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e436:	f7f2 f8df 	bl	80005f8 <__aeabi_dmul>
 800e43a:	3601      	adds	r6, #1
 800e43c:	2301      	movs	r3, #1
 800e43e:	1064      	asrs	r4, r4, #1
 800e440:	3508      	adds	r5, #8
 800e442:	e73f      	b.n	800e2c4 <_dtoa_r+0x394>
 800e444:	2602      	movs	r6, #2
 800e446:	e742      	b.n	800e2ce <_dtoa_r+0x39e>
 800e448:	9c07      	ldr	r4, [sp, #28]
 800e44a:	9704      	str	r7, [sp, #16]
 800e44c:	e761      	b.n	800e312 <_dtoa_r+0x3e2>
 800e44e:	4b27      	ldr	r3, [pc, #156]	@ (800e4ec <_dtoa_r+0x5bc>)
 800e450:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e452:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e456:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e45a:	4454      	add	r4, sl
 800e45c:	2900      	cmp	r1, #0
 800e45e:	d053      	beq.n	800e508 <_dtoa_r+0x5d8>
 800e460:	4928      	ldr	r1, [pc, #160]	@ (800e504 <_dtoa_r+0x5d4>)
 800e462:	2000      	movs	r0, #0
 800e464:	f7f2 f9f2 	bl	800084c <__aeabi_ddiv>
 800e468:	4633      	mov	r3, r6
 800e46a:	462a      	mov	r2, r5
 800e46c:	f7f1 ff0c 	bl	8000288 <__aeabi_dsub>
 800e470:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e474:	4656      	mov	r6, sl
 800e476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e47a:	f7f2 fb6d 	bl	8000b58 <__aeabi_d2iz>
 800e47e:	4605      	mov	r5, r0
 800e480:	f7f2 f850 	bl	8000524 <__aeabi_i2d>
 800e484:	4602      	mov	r2, r0
 800e486:	460b      	mov	r3, r1
 800e488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e48c:	f7f1 fefc 	bl	8000288 <__aeabi_dsub>
 800e490:	3530      	adds	r5, #48	@ 0x30
 800e492:	4602      	mov	r2, r0
 800e494:	460b      	mov	r3, r1
 800e496:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e49a:	f806 5b01 	strb.w	r5, [r6], #1
 800e49e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e4a2:	f7f2 fb1b 	bl	8000adc <__aeabi_dcmplt>
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	d171      	bne.n	800e58e <_dtoa_r+0x65e>
 800e4aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4ae:	4911      	ldr	r1, [pc, #68]	@ (800e4f4 <_dtoa_r+0x5c4>)
 800e4b0:	2000      	movs	r0, #0
 800e4b2:	f7f1 fee9 	bl	8000288 <__aeabi_dsub>
 800e4b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e4ba:	f7f2 fb0f 	bl	8000adc <__aeabi_dcmplt>
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	f040 8095 	bne.w	800e5ee <_dtoa_r+0x6be>
 800e4c4:	42a6      	cmp	r6, r4
 800e4c6:	f43f af50 	beq.w	800e36a <_dtoa_r+0x43a>
 800e4ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e4ce:	4b0a      	ldr	r3, [pc, #40]	@ (800e4f8 <_dtoa_r+0x5c8>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	f7f2 f891 	bl	80005f8 <__aeabi_dmul>
 800e4d6:	4b08      	ldr	r3, [pc, #32]	@ (800e4f8 <_dtoa_r+0x5c8>)
 800e4d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e4dc:	2200      	movs	r2, #0
 800e4de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4e2:	f7f2 f889 	bl	80005f8 <__aeabi_dmul>
 800e4e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4ea:	e7c4      	b.n	800e476 <_dtoa_r+0x546>
 800e4ec:	08012808 	.word	0x08012808
 800e4f0:	080127e0 	.word	0x080127e0
 800e4f4:	3ff00000 	.word	0x3ff00000
 800e4f8:	40240000 	.word	0x40240000
 800e4fc:	401c0000 	.word	0x401c0000
 800e500:	40140000 	.word	0x40140000
 800e504:	3fe00000 	.word	0x3fe00000
 800e508:	4631      	mov	r1, r6
 800e50a:	4628      	mov	r0, r5
 800e50c:	f7f2 f874 	bl	80005f8 <__aeabi_dmul>
 800e510:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e514:	9415      	str	r4, [sp, #84]	@ 0x54
 800e516:	4656      	mov	r6, sl
 800e518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e51c:	f7f2 fb1c 	bl	8000b58 <__aeabi_d2iz>
 800e520:	4605      	mov	r5, r0
 800e522:	f7f1 ffff 	bl	8000524 <__aeabi_i2d>
 800e526:	4602      	mov	r2, r0
 800e528:	460b      	mov	r3, r1
 800e52a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e52e:	f7f1 feab 	bl	8000288 <__aeabi_dsub>
 800e532:	3530      	adds	r5, #48	@ 0x30
 800e534:	f806 5b01 	strb.w	r5, [r6], #1
 800e538:	4602      	mov	r2, r0
 800e53a:	460b      	mov	r3, r1
 800e53c:	42a6      	cmp	r6, r4
 800e53e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e542:	f04f 0200 	mov.w	r2, #0
 800e546:	d124      	bne.n	800e592 <_dtoa_r+0x662>
 800e548:	4bac      	ldr	r3, [pc, #688]	@ (800e7fc <_dtoa_r+0x8cc>)
 800e54a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e54e:	f7f1 fe9d 	bl	800028c <__adddf3>
 800e552:	4602      	mov	r2, r0
 800e554:	460b      	mov	r3, r1
 800e556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e55a:	f7f2 fadd 	bl	8000b18 <__aeabi_dcmpgt>
 800e55e:	2800      	cmp	r0, #0
 800e560:	d145      	bne.n	800e5ee <_dtoa_r+0x6be>
 800e562:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e566:	49a5      	ldr	r1, [pc, #660]	@ (800e7fc <_dtoa_r+0x8cc>)
 800e568:	2000      	movs	r0, #0
 800e56a:	f7f1 fe8d 	bl	8000288 <__aeabi_dsub>
 800e56e:	4602      	mov	r2, r0
 800e570:	460b      	mov	r3, r1
 800e572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e576:	f7f2 fab1 	bl	8000adc <__aeabi_dcmplt>
 800e57a:	2800      	cmp	r0, #0
 800e57c:	f43f aef5 	beq.w	800e36a <_dtoa_r+0x43a>
 800e580:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e582:	1e73      	subs	r3, r6, #1
 800e584:	9315      	str	r3, [sp, #84]	@ 0x54
 800e586:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e58a:	2b30      	cmp	r3, #48	@ 0x30
 800e58c:	d0f8      	beq.n	800e580 <_dtoa_r+0x650>
 800e58e:	9f04      	ldr	r7, [sp, #16]
 800e590:	e73e      	b.n	800e410 <_dtoa_r+0x4e0>
 800e592:	4b9b      	ldr	r3, [pc, #620]	@ (800e800 <_dtoa_r+0x8d0>)
 800e594:	f7f2 f830 	bl	80005f8 <__aeabi_dmul>
 800e598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e59c:	e7bc      	b.n	800e518 <_dtoa_r+0x5e8>
 800e59e:	d10c      	bne.n	800e5ba <_dtoa_r+0x68a>
 800e5a0:	4b98      	ldr	r3, [pc, #608]	@ (800e804 <_dtoa_r+0x8d4>)
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5a8:	f7f2 f826 	bl	80005f8 <__aeabi_dmul>
 800e5ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5b0:	f7f2 faa8 	bl	8000b04 <__aeabi_dcmpge>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	f000 8157 	beq.w	800e868 <_dtoa_r+0x938>
 800e5ba:	2400      	movs	r4, #0
 800e5bc:	4625      	mov	r5, r4
 800e5be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5c0:	43db      	mvns	r3, r3
 800e5c2:	9304      	str	r3, [sp, #16]
 800e5c4:	4656      	mov	r6, sl
 800e5c6:	2700      	movs	r7, #0
 800e5c8:	4621      	mov	r1, r4
 800e5ca:	4658      	mov	r0, fp
 800e5cc:	f000 ff00 	bl	800f3d0 <_Bfree>
 800e5d0:	2d00      	cmp	r5, #0
 800e5d2:	d0dc      	beq.n	800e58e <_dtoa_r+0x65e>
 800e5d4:	b12f      	cbz	r7, 800e5e2 <_dtoa_r+0x6b2>
 800e5d6:	42af      	cmp	r7, r5
 800e5d8:	d003      	beq.n	800e5e2 <_dtoa_r+0x6b2>
 800e5da:	4639      	mov	r1, r7
 800e5dc:	4658      	mov	r0, fp
 800e5de:	f000 fef7 	bl	800f3d0 <_Bfree>
 800e5e2:	4629      	mov	r1, r5
 800e5e4:	4658      	mov	r0, fp
 800e5e6:	f000 fef3 	bl	800f3d0 <_Bfree>
 800e5ea:	e7d0      	b.n	800e58e <_dtoa_r+0x65e>
 800e5ec:	9704      	str	r7, [sp, #16]
 800e5ee:	4633      	mov	r3, r6
 800e5f0:	461e      	mov	r6, r3
 800e5f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5f6:	2a39      	cmp	r2, #57	@ 0x39
 800e5f8:	d107      	bne.n	800e60a <_dtoa_r+0x6da>
 800e5fa:	459a      	cmp	sl, r3
 800e5fc:	d1f8      	bne.n	800e5f0 <_dtoa_r+0x6c0>
 800e5fe:	9a04      	ldr	r2, [sp, #16]
 800e600:	3201      	adds	r2, #1
 800e602:	9204      	str	r2, [sp, #16]
 800e604:	2230      	movs	r2, #48	@ 0x30
 800e606:	f88a 2000 	strb.w	r2, [sl]
 800e60a:	781a      	ldrb	r2, [r3, #0]
 800e60c:	3201      	adds	r2, #1
 800e60e:	701a      	strb	r2, [r3, #0]
 800e610:	e7bd      	b.n	800e58e <_dtoa_r+0x65e>
 800e612:	4b7b      	ldr	r3, [pc, #492]	@ (800e800 <_dtoa_r+0x8d0>)
 800e614:	2200      	movs	r2, #0
 800e616:	f7f1 ffef 	bl	80005f8 <__aeabi_dmul>
 800e61a:	2200      	movs	r2, #0
 800e61c:	2300      	movs	r3, #0
 800e61e:	4604      	mov	r4, r0
 800e620:	460d      	mov	r5, r1
 800e622:	f7f2 fa51 	bl	8000ac8 <__aeabi_dcmpeq>
 800e626:	2800      	cmp	r0, #0
 800e628:	f43f aebb 	beq.w	800e3a2 <_dtoa_r+0x472>
 800e62c:	e6f0      	b.n	800e410 <_dtoa_r+0x4e0>
 800e62e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e630:	2a00      	cmp	r2, #0
 800e632:	f000 80db 	beq.w	800e7ec <_dtoa_r+0x8bc>
 800e636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e638:	2a01      	cmp	r2, #1
 800e63a:	f300 80bf 	bgt.w	800e7bc <_dtoa_r+0x88c>
 800e63e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e640:	2a00      	cmp	r2, #0
 800e642:	f000 80b7 	beq.w	800e7b4 <_dtoa_r+0x884>
 800e646:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e64a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e64c:	4646      	mov	r6, r8
 800e64e:	9a08      	ldr	r2, [sp, #32]
 800e650:	2101      	movs	r1, #1
 800e652:	441a      	add	r2, r3
 800e654:	4658      	mov	r0, fp
 800e656:	4498      	add	r8, r3
 800e658:	9208      	str	r2, [sp, #32]
 800e65a:	f000 ffb7 	bl	800f5cc <__i2b>
 800e65e:	4605      	mov	r5, r0
 800e660:	b15e      	cbz	r6, 800e67a <_dtoa_r+0x74a>
 800e662:	9b08      	ldr	r3, [sp, #32]
 800e664:	2b00      	cmp	r3, #0
 800e666:	dd08      	ble.n	800e67a <_dtoa_r+0x74a>
 800e668:	42b3      	cmp	r3, r6
 800e66a:	9a08      	ldr	r2, [sp, #32]
 800e66c:	bfa8      	it	ge
 800e66e:	4633      	movge	r3, r6
 800e670:	eba8 0803 	sub.w	r8, r8, r3
 800e674:	1af6      	subs	r6, r6, r3
 800e676:	1ad3      	subs	r3, r2, r3
 800e678:	9308      	str	r3, [sp, #32]
 800e67a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e67c:	b1f3      	cbz	r3, 800e6bc <_dtoa_r+0x78c>
 800e67e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e680:	2b00      	cmp	r3, #0
 800e682:	f000 80b7 	beq.w	800e7f4 <_dtoa_r+0x8c4>
 800e686:	b18c      	cbz	r4, 800e6ac <_dtoa_r+0x77c>
 800e688:	4629      	mov	r1, r5
 800e68a:	4622      	mov	r2, r4
 800e68c:	4658      	mov	r0, fp
 800e68e:	f001 f85d 	bl	800f74c <__pow5mult>
 800e692:	464a      	mov	r2, r9
 800e694:	4601      	mov	r1, r0
 800e696:	4605      	mov	r5, r0
 800e698:	4658      	mov	r0, fp
 800e69a:	f000 ffad 	bl	800f5f8 <__multiply>
 800e69e:	4649      	mov	r1, r9
 800e6a0:	9004      	str	r0, [sp, #16]
 800e6a2:	4658      	mov	r0, fp
 800e6a4:	f000 fe94 	bl	800f3d0 <_Bfree>
 800e6a8:	9b04      	ldr	r3, [sp, #16]
 800e6aa:	4699      	mov	r9, r3
 800e6ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6ae:	1b1a      	subs	r2, r3, r4
 800e6b0:	d004      	beq.n	800e6bc <_dtoa_r+0x78c>
 800e6b2:	4649      	mov	r1, r9
 800e6b4:	4658      	mov	r0, fp
 800e6b6:	f001 f849 	bl	800f74c <__pow5mult>
 800e6ba:	4681      	mov	r9, r0
 800e6bc:	2101      	movs	r1, #1
 800e6be:	4658      	mov	r0, fp
 800e6c0:	f000 ff84 	bl	800f5cc <__i2b>
 800e6c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6c6:	4604      	mov	r4, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f000 81cf 	beq.w	800ea6c <_dtoa_r+0xb3c>
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	4601      	mov	r1, r0
 800e6d2:	4658      	mov	r0, fp
 800e6d4:	f001 f83a 	bl	800f74c <__pow5mult>
 800e6d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6da:	2b01      	cmp	r3, #1
 800e6dc:	4604      	mov	r4, r0
 800e6de:	f300 8095 	bgt.w	800e80c <_dtoa_r+0x8dc>
 800e6e2:	9b02      	ldr	r3, [sp, #8]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	f040 8087 	bne.w	800e7f8 <_dtoa_r+0x8c8>
 800e6ea:	9b03      	ldr	r3, [sp, #12]
 800e6ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	f040 8089 	bne.w	800e808 <_dtoa_r+0x8d8>
 800e6f6:	9b03      	ldr	r3, [sp, #12]
 800e6f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e6fc:	0d1b      	lsrs	r3, r3, #20
 800e6fe:	051b      	lsls	r3, r3, #20
 800e700:	b12b      	cbz	r3, 800e70e <_dtoa_r+0x7de>
 800e702:	9b08      	ldr	r3, [sp, #32]
 800e704:	3301      	adds	r3, #1
 800e706:	9308      	str	r3, [sp, #32]
 800e708:	f108 0801 	add.w	r8, r8, #1
 800e70c:	2301      	movs	r3, #1
 800e70e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e710:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e712:	2b00      	cmp	r3, #0
 800e714:	f000 81b0 	beq.w	800ea78 <_dtoa_r+0xb48>
 800e718:	6923      	ldr	r3, [r4, #16]
 800e71a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e71e:	6918      	ldr	r0, [r3, #16]
 800e720:	f000 ff08 	bl	800f534 <__hi0bits>
 800e724:	f1c0 0020 	rsb	r0, r0, #32
 800e728:	9b08      	ldr	r3, [sp, #32]
 800e72a:	4418      	add	r0, r3
 800e72c:	f010 001f 	ands.w	r0, r0, #31
 800e730:	d077      	beq.n	800e822 <_dtoa_r+0x8f2>
 800e732:	f1c0 0320 	rsb	r3, r0, #32
 800e736:	2b04      	cmp	r3, #4
 800e738:	dd6b      	ble.n	800e812 <_dtoa_r+0x8e2>
 800e73a:	9b08      	ldr	r3, [sp, #32]
 800e73c:	f1c0 001c 	rsb	r0, r0, #28
 800e740:	4403      	add	r3, r0
 800e742:	4480      	add	r8, r0
 800e744:	4406      	add	r6, r0
 800e746:	9308      	str	r3, [sp, #32]
 800e748:	f1b8 0f00 	cmp.w	r8, #0
 800e74c:	dd05      	ble.n	800e75a <_dtoa_r+0x82a>
 800e74e:	4649      	mov	r1, r9
 800e750:	4642      	mov	r2, r8
 800e752:	4658      	mov	r0, fp
 800e754:	f001 f854 	bl	800f800 <__lshift>
 800e758:	4681      	mov	r9, r0
 800e75a:	9b08      	ldr	r3, [sp, #32]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	dd05      	ble.n	800e76c <_dtoa_r+0x83c>
 800e760:	4621      	mov	r1, r4
 800e762:	461a      	mov	r2, r3
 800e764:	4658      	mov	r0, fp
 800e766:	f001 f84b 	bl	800f800 <__lshift>
 800e76a:	4604      	mov	r4, r0
 800e76c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d059      	beq.n	800e826 <_dtoa_r+0x8f6>
 800e772:	4621      	mov	r1, r4
 800e774:	4648      	mov	r0, r9
 800e776:	f001 f8af 	bl	800f8d8 <__mcmp>
 800e77a:	2800      	cmp	r0, #0
 800e77c:	da53      	bge.n	800e826 <_dtoa_r+0x8f6>
 800e77e:	1e7b      	subs	r3, r7, #1
 800e780:	9304      	str	r3, [sp, #16]
 800e782:	4649      	mov	r1, r9
 800e784:	2300      	movs	r3, #0
 800e786:	220a      	movs	r2, #10
 800e788:	4658      	mov	r0, fp
 800e78a:	f000 fe43 	bl	800f414 <__multadd>
 800e78e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e790:	4681      	mov	r9, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	f000 8172 	beq.w	800ea7c <_dtoa_r+0xb4c>
 800e798:	2300      	movs	r3, #0
 800e79a:	4629      	mov	r1, r5
 800e79c:	220a      	movs	r2, #10
 800e79e:	4658      	mov	r0, fp
 800e7a0:	f000 fe38 	bl	800f414 <__multadd>
 800e7a4:	9b00      	ldr	r3, [sp, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	4605      	mov	r5, r0
 800e7aa:	dc67      	bgt.n	800e87c <_dtoa_r+0x94c>
 800e7ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	dc41      	bgt.n	800e836 <_dtoa_r+0x906>
 800e7b2:	e063      	b.n	800e87c <_dtoa_r+0x94c>
 800e7b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e7b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e7ba:	e746      	b.n	800e64a <_dtoa_r+0x71a>
 800e7bc:	9b07      	ldr	r3, [sp, #28]
 800e7be:	1e5c      	subs	r4, r3, #1
 800e7c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7c2:	42a3      	cmp	r3, r4
 800e7c4:	bfbf      	itttt	lt
 800e7c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e7c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e7ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e7cc:	1ae3      	sublt	r3, r4, r3
 800e7ce:	bfb4      	ite	lt
 800e7d0:	18d2      	addlt	r2, r2, r3
 800e7d2:	1b1c      	subge	r4, r3, r4
 800e7d4:	9b07      	ldr	r3, [sp, #28]
 800e7d6:	bfbc      	itt	lt
 800e7d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e7da:	2400      	movlt	r4, #0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	bfb5      	itete	lt
 800e7e0:	eba8 0603 	sublt.w	r6, r8, r3
 800e7e4:	9b07      	ldrge	r3, [sp, #28]
 800e7e6:	2300      	movlt	r3, #0
 800e7e8:	4646      	movge	r6, r8
 800e7ea:	e730      	b.n	800e64e <_dtoa_r+0x71e>
 800e7ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e7ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e7f0:	4646      	mov	r6, r8
 800e7f2:	e735      	b.n	800e660 <_dtoa_r+0x730>
 800e7f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7f6:	e75c      	b.n	800e6b2 <_dtoa_r+0x782>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	e788      	b.n	800e70e <_dtoa_r+0x7de>
 800e7fc:	3fe00000 	.word	0x3fe00000
 800e800:	40240000 	.word	0x40240000
 800e804:	40140000 	.word	0x40140000
 800e808:	9b02      	ldr	r3, [sp, #8]
 800e80a:	e780      	b.n	800e70e <_dtoa_r+0x7de>
 800e80c:	2300      	movs	r3, #0
 800e80e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e810:	e782      	b.n	800e718 <_dtoa_r+0x7e8>
 800e812:	d099      	beq.n	800e748 <_dtoa_r+0x818>
 800e814:	9a08      	ldr	r2, [sp, #32]
 800e816:	331c      	adds	r3, #28
 800e818:	441a      	add	r2, r3
 800e81a:	4498      	add	r8, r3
 800e81c:	441e      	add	r6, r3
 800e81e:	9208      	str	r2, [sp, #32]
 800e820:	e792      	b.n	800e748 <_dtoa_r+0x818>
 800e822:	4603      	mov	r3, r0
 800e824:	e7f6      	b.n	800e814 <_dtoa_r+0x8e4>
 800e826:	9b07      	ldr	r3, [sp, #28]
 800e828:	9704      	str	r7, [sp, #16]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	dc20      	bgt.n	800e870 <_dtoa_r+0x940>
 800e82e:	9300      	str	r3, [sp, #0]
 800e830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e832:	2b02      	cmp	r3, #2
 800e834:	dd1e      	ble.n	800e874 <_dtoa_r+0x944>
 800e836:	9b00      	ldr	r3, [sp, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f47f aec0 	bne.w	800e5be <_dtoa_r+0x68e>
 800e83e:	4621      	mov	r1, r4
 800e840:	2205      	movs	r2, #5
 800e842:	4658      	mov	r0, fp
 800e844:	f000 fde6 	bl	800f414 <__multadd>
 800e848:	4601      	mov	r1, r0
 800e84a:	4604      	mov	r4, r0
 800e84c:	4648      	mov	r0, r9
 800e84e:	f001 f843 	bl	800f8d8 <__mcmp>
 800e852:	2800      	cmp	r0, #0
 800e854:	f77f aeb3 	ble.w	800e5be <_dtoa_r+0x68e>
 800e858:	4656      	mov	r6, sl
 800e85a:	2331      	movs	r3, #49	@ 0x31
 800e85c:	f806 3b01 	strb.w	r3, [r6], #1
 800e860:	9b04      	ldr	r3, [sp, #16]
 800e862:	3301      	adds	r3, #1
 800e864:	9304      	str	r3, [sp, #16]
 800e866:	e6ae      	b.n	800e5c6 <_dtoa_r+0x696>
 800e868:	9c07      	ldr	r4, [sp, #28]
 800e86a:	9704      	str	r7, [sp, #16]
 800e86c:	4625      	mov	r5, r4
 800e86e:	e7f3      	b.n	800e858 <_dtoa_r+0x928>
 800e870:	9b07      	ldr	r3, [sp, #28]
 800e872:	9300      	str	r3, [sp, #0]
 800e874:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e876:	2b00      	cmp	r3, #0
 800e878:	f000 8104 	beq.w	800ea84 <_dtoa_r+0xb54>
 800e87c:	2e00      	cmp	r6, #0
 800e87e:	dd05      	ble.n	800e88c <_dtoa_r+0x95c>
 800e880:	4629      	mov	r1, r5
 800e882:	4632      	mov	r2, r6
 800e884:	4658      	mov	r0, fp
 800e886:	f000 ffbb 	bl	800f800 <__lshift>
 800e88a:	4605      	mov	r5, r0
 800e88c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d05a      	beq.n	800e948 <_dtoa_r+0xa18>
 800e892:	6869      	ldr	r1, [r5, #4]
 800e894:	4658      	mov	r0, fp
 800e896:	f000 fd5b 	bl	800f350 <_Balloc>
 800e89a:	4606      	mov	r6, r0
 800e89c:	b928      	cbnz	r0, 800e8aa <_dtoa_r+0x97a>
 800e89e:	4b84      	ldr	r3, [pc, #528]	@ (800eab0 <_dtoa_r+0xb80>)
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e8a6:	f7ff bb5a 	b.w	800df5e <_dtoa_r+0x2e>
 800e8aa:	692a      	ldr	r2, [r5, #16]
 800e8ac:	3202      	adds	r2, #2
 800e8ae:	0092      	lsls	r2, r2, #2
 800e8b0:	f105 010c 	add.w	r1, r5, #12
 800e8b4:	300c      	adds	r0, #12
 800e8b6:	f7ff fa76 	bl	800dda6 <memcpy>
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	4631      	mov	r1, r6
 800e8be:	4658      	mov	r0, fp
 800e8c0:	f000 ff9e 	bl	800f800 <__lshift>
 800e8c4:	f10a 0301 	add.w	r3, sl, #1
 800e8c8:	9307      	str	r3, [sp, #28]
 800e8ca:	9b00      	ldr	r3, [sp, #0]
 800e8cc:	4453      	add	r3, sl
 800e8ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8d0:	9b02      	ldr	r3, [sp, #8]
 800e8d2:	f003 0301 	and.w	r3, r3, #1
 800e8d6:	462f      	mov	r7, r5
 800e8d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8da:	4605      	mov	r5, r0
 800e8dc:	9b07      	ldr	r3, [sp, #28]
 800e8de:	4621      	mov	r1, r4
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	4648      	mov	r0, r9
 800e8e4:	9300      	str	r3, [sp, #0]
 800e8e6:	f7ff fa9b 	bl	800de20 <quorem>
 800e8ea:	4639      	mov	r1, r7
 800e8ec:	9002      	str	r0, [sp, #8]
 800e8ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e8f2:	4648      	mov	r0, r9
 800e8f4:	f000 fff0 	bl	800f8d8 <__mcmp>
 800e8f8:	462a      	mov	r2, r5
 800e8fa:	9008      	str	r0, [sp, #32]
 800e8fc:	4621      	mov	r1, r4
 800e8fe:	4658      	mov	r0, fp
 800e900:	f001 f806 	bl	800f910 <__mdiff>
 800e904:	68c2      	ldr	r2, [r0, #12]
 800e906:	4606      	mov	r6, r0
 800e908:	bb02      	cbnz	r2, 800e94c <_dtoa_r+0xa1c>
 800e90a:	4601      	mov	r1, r0
 800e90c:	4648      	mov	r0, r9
 800e90e:	f000 ffe3 	bl	800f8d8 <__mcmp>
 800e912:	4602      	mov	r2, r0
 800e914:	4631      	mov	r1, r6
 800e916:	4658      	mov	r0, fp
 800e918:	920e      	str	r2, [sp, #56]	@ 0x38
 800e91a:	f000 fd59 	bl	800f3d0 <_Bfree>
 800e91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e920:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e922:	9e07      	ldr	r6, [sp, #28]
 800e924:	ea43 0102 	orr.w	r1, r3, r2
 800e928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e92a:	4319      	orrs	r1, r3
 800e92c:	d110      	bne.n	800e950 <_dtoa_r+0xa20>
 800e92e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e932:	d029      	beq.n	800e988 <_dtoa_r+0xa58>
 800e934:	9b08      	ldr	r3, [sp, #32]
 800e936:	2b00      	cmp	r3, #0
 800e938:	dd02      	ble.n	800e940 <_dtoa_r+0xa10>
 800e93a:	9b02      	ldr	r3, [sp, #8]
 800e93c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e940:	9b00      	ldr	r3, [sp, #0]
 800e942:	f883 8000 	strb.w	r8, [r3]
 800e946:	e63f      	b.n	800e5c8 <_dtoa_r+0x698>
 800e948:	4628      	mov	r0, r5
 800e94a:	e7bb      	b.n	800e8c4 <_dtoa_r+0x994>
 800e94c:	2201      	movs	r2, #1
 800e94e:	e7e1      	b.n	800e914 <_dtoa_r+0x9e4>
 800e950:	9b08      	ldr	r3, [sp, #32]
 800e952:	2b00      	cmp	r3, #0
 800e954:	db04      	blt.n	800e960 <_dtoa_r+0xa30>
 800e956:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e958:	430b      	orrs	r3, r1
 800e95a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e95c:	430b      	orrs	r3, r1
 800e95e:	d120      	bne.n	800e9a2 <_dtoa_r+0xa72>
 800e960:	2a00      	cmp	r2, #0
 800e962:	dded      	ble.n	800e940 <_dtoa_r+0xa10>
 800e964:	4649      	mov	r1, r9
 800e966:	2201      	movs	r2, #1
 800e968:	4658      	mov	r0, fp
 800e96a:	f000 ff49 	bl	800f800 <__lshift>
 800e96e:	4621      	mov	r1, r4
 800e970:	4681      	mov	r9, r0
 800e972:	f000 ffb1 	bl	800f8d8 <__mcmp>
 800e976:	2800      	cmp	r0, #0
 800e978:	dc03      	bgt.n	800e982 <_dtoa_r+0xa52>
 800e97a:	d1e1      	bne.n	800e940 <_dtoa_r+0xa10>
 800e97c:	f018 0f01 	tst.w	r8, #1
 800e980:	d0de      	beq.n	800e940 <_dtoa_r+0xa10>
 800e982:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e986:	d1d8      	bne.n	800e93a <_dtoa_r+0xa0a>
 800e988:	9a00      	ldr	r2, [sp, #0]
 800e98a:	2339      	movs	r3, #57	@ 0x39
 800e98c:	7013      	strb	r3, [r2, #0]
 800e98e:	4633      	mov	r3, r6
 800e990:	461e      	mov	r6, r3
 800e992:	3b01      	subs	r3, #1
 800e994:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e998:	2a39      	cmp	r2, #57	@ 0x39
 800e99a:	d052      	beq.n	800ea42 <_dtoa_r+0xb12>
 800e99c:	3201      	adds	r2, #1
 800e99e:	701a      	strb	r2, [r3, #0]
 800e9a0:	e612      	b.n	800e5c8 <_dtoa_r+0x698>
 800e9a2:	2a00      	cmp	r2, #0
 800e9a4:	dd07      	ble.n	800e9b6 <_dtoa_r+0xa86>
 800e9a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e9aa:	d0ed      	beq.n	800e988 <_dtoa_r+0xa58>
 800e9ac:	9a00      	ldr	r2, [sp, #0]
 800e9ae:	f108 0301 	add.w	r3, r8, #1
 800e9b2:	7013      	strb	r3, [r2, #0]
 800e9b4:	e608      	b.n	800e5c8 <_dtoa_r+0x698>
 800e9b6:	9b07      	ldr	r3, [sp, #28]
 800e9b8:	9a07      	ldr	r2, [sp, #28]
 800e9ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e9be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d028      	beq.n	800ea16 <_dtoa_r+0xae6>
 800e9c4:	4649      	mov	r1, r9
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	220a      	movs	r2, #10
 800e9ca:	4658      	mov	r0, fp
 800e9cc:	f000 fd22 	bl	800f414 <__multadd>
 800e9d0:	42af      	cmp	r7, r5
 800e9d2:	4681      	mov	r9, r0
 800e9d4:	f04f 0300 	mov.w	r3, #0
 800e9d8:	f04f 020a 	mov.w	r2, #10
 800e9dc:	4639      	mov	r1, r7
 800e9de:	4658      	mov	r0, fp
 800e9e0:	d107      	bne.n	800e9f2 <_dtoa_r+0xac2>
 800e9e2:	f000 fd17 	bl	800f414 <__multadd>
 800e9e6:	4607      	mov	r7, r0
 800e9e8:	4605      	mov	r5, r0
 800e9ea:	9b07      	ldr	r3, [sp, #28]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	9307      	str	r3, [sp, #28]
 800e9f0:	e774      	b.n	800e8dc <_dtoa_r+0x9ac>
 800e9f2:	f000 fd0f 	bl	800f414 <__multadd>
 800e9f6:	4629      	mov	r1, r5
 800e9f8:	4607      	mov	r7, r0
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	220a      	movs	r2, #10
 800e9fe:	4658      	mov	r0, fp
 800ea00:	f000 fd08 	bl	800f414 <__multadd>
 800ea04:	4605      	mov	r5, r0
 800ea06:	e7f0      	b.n	800e9ea <_dtoa_r+0xaba>
 800ea08:	9b00      	ldr	r3, [sp, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	bfcc      	ite	gt
 800ea0e:	461e      	movgt	r6, r3
 800ea10:	2601      	movle	r6, #1
 800ea12:	4456      	add	r6, sl
 800ea14:	2700      	movs	r7, #0
 800ea16:	4649      	mov	r1, r9
 800ea18:	2201      	movs	r2, #1
 800ea1a:	4658      	mov	r0, fp
 800ea1c:	f000 fef0 	bl	800f800 <__lshift>
 800ea20:	4621      	mov	r1, r4
 800ea22:	4681      	mov	r9, r0
 800ea24:	f000 ff58 	bl	800f8d8 <__mcmp>
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	dcb0      	bgt.n	800e98e <_dtoa_r+0xa5e>
 800ea2c:	d102      	bne.n	800ea34 <_dtoa_r+0xb04>
 800ea2e:	f018 0f01 	tst.w	r8, #1
 800ea32:	d1ac      	bne.n	800e98e <_dtoa_r+0xa5e>
 800ea34:	4633      	mov	r3, r6
 800ea36:	461e      	mov	r6, r3
 800ea38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea3c:	2a30      	cmp	r2, #48	@ 0x30
 800ea3e:	d0fa      	beq.n	800ea36 <_dtoa_r+0xb06>
 800ea40:	e5c2      	b.n	800e5c8 <_dtoa_r+0x698>
 800ea42:	459a      	cmp	sl, r3
 800ea44:	d1a4      	bne.n	800e990 <_dtoa_r+0xa60>
 800ea46:	9b04      	ldr	r3, [sp, #16]
 800ea48:	3301      	adds	r3, #1
 800ea4a:	9304      	str	r3, [sp, #16]
 800ea4c:	2331      	movs	r3, #49	@ 0x31
 800ea4e:	f88a 3000 	strb.w	r3, [sl]
 800ea52:	e5b9      	b.n	800e5c8 <_dtoa_r+0x698>
 800ea54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800eab4 <_dtoa_r+0xb84>
 800ea5a:	b11b      	cbz	r3, 800ea64 <_dtoa_r+0xb34>
 800ea5c:	f10a 0308 	add.w	r3, sl, #8
 800ea60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ea62:	6013      	str	r3, [r2, #0]
 800ea64:	4650      	mov	r0, sl
 800ea66:	b019      	add	sp, #100	@ 0x64
 800ea68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	f77f ae37 	ble.w	800e6e2 <_dtoa_r+0x7b2>
 800ea74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea78:	2001      	movs	r0, #1
 800ea7a:	e655      	b.n	800e728 <_dtoa_r+0x7f8>
 800ea7c:	9b00      	ldr	r3, [sp, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	f77f aed6 	ble.w	800e830 <_dtoa_r+0x900>
 800ea84:	4656      	mov	r6, sl
 800ea86:	4621      	mov	r1, r4
 800ea88:	4648      	mov	r0, r9
 800ea8a:	f7ff f9c9 	bl	800de20 <quorem>
 800ea8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ea92:	f806 8b01 	strb.w	r8, [r6], #1
 800ea96:	9b00      	ldr	r3, [sp, #0]
 800ea98:	eba6 020a 	sub.w	r2, r6, sl
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	ddb3      	ble.n	800ea08 <_dtoa_r+0xad8>
 800eaa0:	4649      	mov	r1, r9
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	220a      	movs	r2, #10
 800eaa6:	4658      	mov	r0, fp
 800eaa8:	f000 fcb4 	bl	800f414 <__multadd>
 800eaac:	4681      	mov	r9, r0
 800eaae:	e7ea      	b.n	800ea86 <_dtoa_r+0xb56>
 800eab0:	08012704 	.word	0x08012704
 800eab4:	0801269f 	.word	0x0801269f

0800eab8 <_free_r>:
 800eab8:	b538      	push	{r3, r4, r5, lr}
 800eaba:	4605      	mov	r5, r0
 800eabc:	2900      	cmp	r1, #0
 800eabe:	d041      	beq.n	800eb44 <_free_r+0x8c>
 800eac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eac4:	1f0c      	subs	r4, r1, #4
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	bfb8      	it	lt
 800eaca:	18e4      	addlt	r4, r4, r3
 800eacc:	f000 fc34 	bl	800f338 <__malloc_lock>
 800ead0:	4a1d      	ldr	r2, [pc, #116]	@ (800eb48 <_free_r+0x90>)
 800ead2:	6813      	ldr	r3, [r2, #0]
 800ead4:	b933      	cbnz	r3, 800eae4 <_free_r+0x2c>
 800ead6:	6063      	str	r3, [r4, #4]
 800ead8:	6014      	str	r4, [r2, #0]
 800eada:	4628      	mov	r0, r5
 800eadc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eae0:	f000 bc30 	b.w	800f344 <__malloc_unlock>
 800eae4:	42a3      	cmp	r3, r4
 800eae6:	d908      	bls.n	800eafa <_free_r+0x42>
 800eae8:	6820      	ldr	r0, [r4, #0]
 800eaea:	1821      	adds	r1, r4, r0
 800eaec:	428b      	cmp	r3, r1
 800eaee:	bf01      	itttt	eq
 800eaf0:	6819      	ldreq	r1, [r3, #0]
 800eaf2:	685b      	ldreq	r3, [r3, #4]
 800eaf4:	1809      	addeq	r1, r1, r0
 800eaf6:	6021      	streq	r1, [r4, #0]
 800eaf8:	e7ed      	b.n	800ead6 <_free_r+0x1e>
 800eafa:	461a      	mov	r2, r3
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	b10b      	cbz	r3, 800eb04 <_free_r+0x4c>
 800eb00:	42a3      	cmp	r3, r4
 800eb02:	d9fa      	bls.n	800eafa <_free_r+0x42>
 800eb04:	6811      	ldr	r1, [r2, #0]
 800eb06:	1850      	adds	r0, r2, r1
 800eb08:	42a0      	cmp	r0, r4
 800eb0a:	d10b      	bne.n	800eb24 <_free_r+0x6c>
 800eb0c:	6820      	ldr	r0, [r4, #0]
 800eb0e:	4401      	add	r1, r0
 800eb10:	1850      	adds	r0, r2, r1
 800eb12:	4283      	cmp	r3, r0
 800eb14:	6011      	str	r1, [r2, #0]
 800eb16:	d1e0      	bne.n	800eada <_free_r+0x22>
 800eb18:	6818      	ldr	r0, [r3, #0]
 800eb1a:	685b      	ldr	r3, [r3, #4]
 800eb1c:	6053      	str	r3, [r2, #4]
 800eb1e:	4408      	add	r0, r1
 800eb20:	6010      	str	r0, [r2, #0]
 800eb22:	e7da      	b.n	800eada <_free_r+0x22>
 800eb24:	d902      	bls.n	800eb2c <_free_r+0x74>
 800eb26:	230c      	movs	r3, #12
 800eb28:	602b      	str	r3, [r5, #0]
 800eb2a:	e7d6      	b.n	800eada <_free_r+0x22>
 800eb2c:	6820      	ldr	r0, [r4, #0]
 800eb2e:	1821      	adds	r1, r4, r0
 800eb30:	428b      	cmp	r3, r1
 800eb32:	bf04      	itt	eq
 800eb34:	6819      	ldreq	r1, [r3, #0]
 800eb36:	685b      	ldreq	r3, [r3, #4]
 800eb38:	6063      	str	r3, [r4, #4]
 800eb3a:	bf04      	itt	eq
 800eb3c:	1809      	addeq	r1, r1, r0
 800eb3e:	6021      	streq	r1, [r4, #0]
 800eb40:	6054      	str	r4, [r2, #4]
 800eb42:	e7ca      	b.n	800eada <_free_r+0x22>
 800eb44:	bd38      	pop	{r3, r4, r5, pc}
 800eb46:	bf00      	nop
 800eb48:	20000834 	.word	0x20000834

0800eb4c <rshift>:
 800eb4c:	6903      	ldr	r3, [r0, #16]
 800eb4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eb52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eb5a:	f100 0414 	add.w	r4, r0, #20
 800eb5e:	dd45      	ble.n	800ebec <rshift+0xa0>
 800eb60:	f011 011f 	ands.w	r1, r1, #31
 800eb64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eb68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eb6c:	d10c      	bne.n	800eb88 <rshift+0x3c>
 800eb6e:	f100 0710 	add.w	r7, r0, #16
 800eb72:	4629      	mov	r1, r5
 800eb74:	42b1      	cmp	r1, r6
 800eb76:	d334      	bcc.n	800ebe2 <rshift+0x96>
 800eb78:	1a9b      	subs	r3, r3, r2
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	1eea      	subs	r2, r5, #3
 800eb7e:	4296      	cmp	r6, r2
 800eb80:	bf38      	it	cc
 800eb82:	2300      	movcc	r3, #0
 800eb84:	4423      	add	r3, r4
 800eb86:	e015      	b.n	800ebb4 <rshift+0x68>
 800eb88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eb8c:	f1c1 0820 	rsb	r8, r1, #32
 800eb90:	40cf      	lsrs	r7, r1
 800eb92:	f105 0e04 	add.w	lr, r5, #4
 800eb96:	46a1      	mov	r9, r4
 800eb98:	4576      	cmp	r6, lr
 800eb9a:	46f4      	mov	ip, lr
 800eb9c:	d815      	bhi.n	800ebca <rshift+0x7e>
 800eb9e:	1a9a      	subs	r2, r3, r2
 800eba0:	0092      	lsls	r2, r2, #2
 800eba2:	3a04      	subs	r2, #4
 800eba4:	3501      	adds	r5, #1
 800eba6:	42ae      	cmp	r6, r5
 800eba8:	bf38      	it	cc
 800ebaa:	2200      	movcc	r2, #0
 800ebac:	18a3      	adds	r3, r4, r2
 800ebae:	50a7      	str	r7, [r4, r2]
 800ebb0:	b107      	cbz	r7, 800ebb4 <rshift+0x68>
 800ebb2:	3304      	adds	r3, #4
 800ebb4:	1b1a      	subs	r2, r3, r4
 800ebb6:	42a3      	cmp	r3, r4
 800ebb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ebbc:	bf08      	it	eq
 800ebbe:	2300      	moveq	r3, #0
 800ebc0:	6102      	str	r2, [r0, #16]
 800ebc2:	bf08      	it	eq
 800ebc4:	6143      	streq	r3, [r0, #20]
 800ebc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebca:	f8dc c000 	ldr.w	ip, [ip]
 800ebce:	fa0c fc08 	lsl.w	ip, ip, r8
 800ebd2:	ea4c 0707 	orr.w	r7, ip, r7
 800ebd6:	f849 7b04 	str.w	r7, [r9], #4
 800ebda:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ebde:	40cf      	lsrs	r7, r1
 800ebe0:	e7da      	b.n	800eb98 <rshift+0x4c>
 800ebe2:	f851 cb04 	ldr.w	ip, [r1], #4
 800ebe6:	f847 cf04 	str.w	ip, [r7, #4]!
 800ebea:	e7c3      	b.n	800eb74 <rshift+0x28>
 800ebec:	4623      	mov	r3, r4
 800ebee:	e7e1      	b.n	800ebb4 <rshift+0x68>

0800ebf0 <__hexdig_fun>:
 800ebf0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ebf4:	2b09      	cmp	r3, #9
 800ebf6:	d802      	bhi.n	800ebfe <__hexdig_fun+0xe>
 800ebf8:	3820      	subs	r0, #32
 800ebfa:	b2c0      	uxtb	r0, r0
 800ebfc:	4770      	bx	lr
 800ebfe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ec02:	2b05      	cmp	r3, #5
 800ec04:	d801      	bhi.n	800ec0a <__hexdig_fun+0x1a>
 800ec06:	3847      	subs	r0, #71	@ 0x47
 800ec08:	e7f7      	b.n	800ebfa <__hexdig_fun+0xa>
 800ec0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ec0e:	2b05      	cmp	r3, #5
 800ec10:	d801      	bhi.n	800ec16 <__hexdig_fun+0x26>
 800ec12:	3827      	subs	r0, #39	@ 0x27
 800ec14:	e7f1      	b.n	800ebfa <__hexdig_fun+0xa>
 800ec16:	2000      	movs	r0, #0
 800ec18:	4770      	bx	lr
	...

0800ec1c <__gethex>:
 800ec1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec20:	b085      	sub	sp, #20
 800ec22:	468a      	mov	sl, r1
 800ec24:	9302      	str	r3, [sp, #8]
 800ec26:	680b      	ldr	r3, [r1, #0]
 800ec28:	9001      	str	r0, [sp, #4]
 800ec2a:	4690      	mov	r8, r2
 800ec2c:	1c9c      	adds	r4, r3, #2
 800ec2e:	46a1      	mov	r9, r4
 800ec30:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ec34:	2830      	cmp	r0, #48	@ 0x30
 800ec36:	d0fa      	beq.n	800ec2e <__gethex+0x12>
 800ec38:	eba9 0303 	sub.w	r3, r9, r3
 800ec3c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ec40:	f7ff ffd6 	bl	800ebf0 <__hexdig_fun>
 800ec44:	4605      	mov	r5, r0
 800ec46:	2800      	cmp	r0, #0
 800ec48:	d168      	bne.n	800ed1c <__gethex+0x100>
 800ec4a:	49a0      	ldr	r1, [pc, #640]	@ (800eecc <__gethex+0x2b0>)
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	4648      	mov	r0, r9
 800ec50:	f7fe ffc3 	bl	800dbda <strncmp>
 800ec54:	4607      	mov	r7, r0
 800ec56:	2800      	cmp	r0, #0
 800ec58:	d167      	bne.n	800ed2a <__gethex+0x10e>
 800ec5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ec5e:	4626      	mov	r6, r4
 800ec60:	f7ff ffc6 	bl	800ebf0 <__hexdig_fun>
 800ec64:	2800      	cmp	r0, #0
 800ec66:	d062      	beq.n	800ed2e <__gethex+0x112>
 800ec68:	4623      	mov	r3, r4
 800ec6a:	7818      	ldrb	r0, [r3, #0]
 800ec6c:	2830      	cmp	r0, #48	@ 0x30
 800ec6e:	4699      	mov	r9, r3
 800ec70:	f103 0301 	add.w	r3, r3, #1
 800ec74:	d0f9      	beq.n	800ec6a <__gethex+0x4e>
 800ec76:	f7ff ffbb 	bl	800ebf0 <__hexdig_fun>
 800ec7a:	fab0 f580 	clz	r5, r0
 800ec7e:	096d      	lsrs	r5, r5, #5
 800ec80:	f04f 0b01 	mov.w	fp, #1
 800ec84:	464a      	mov	r2, r9
 800ec86:	4616      	mov	r6, r2
 800ec88:	3201      	adds	r2, #1
 800ec8a:	7830      	ldrb	r0, [r6, #0]
 800ec8c:	f7ff ffb0 	bl	800ebf0 <__hexdig_fun>
 800ec90:	2800      	cmp	r0, #0
 800ec92:	d1f8      	bne.n	800ec86 <__gethex+0x6a>
 800ec94:	498d      	ldr	r1, [pc, #564]	@ (800eecc <__gethex+0x2b0>)
 800ec96:	2201      	movs	r2, #1
 800ec98:	4630      	mov	r0, r6
 800ec9a:	f7fe ff9e 	bl	800dbda <strncmp>
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	d13f      	bne.n	800ed22 <__gethex+0x106>
 800eca2:	b944      	cbnz	r4, 800ecb6 <__gethex+0x9a>
 800eca4:	1c74      	adds	r4, r6, #1
 800eca6:	4622      	mov	r2, r4
 800eca8:	4616      	mov	r6, r2
 800ecaa:	3201      	adds	r2, #1
 800ecac:	7830      	ldrb	r0, [r6, #0]
 800ecae:	f7ff ff9f 	bl	800ebf0 <__hexdig_fun>
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	d1f8      	bne.n	800eca8 <__gethex+0x8c>
 800ecb6:	1ba4      	subs	r4, r4, r6
 800ecb8:	00a7      	lsls	r7, r4, #2
 800ecba:	7833      	ldrb	r3, [r6, #0]
 800ecbc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ecc0:	2b50      	cmp	r3, #80	@ 0x50
 800ecc2:	d13e      	bne.n	800ed42 <__gethex+0x126>
 800ecc4:	7873      	ldrb	r3, [r6, #1]
 800ecc6:	2b2b      	cmp	r3, #43	@ 0x2b
 800ecc8:	d033      	beq.n	800ed32 <__gethex+0x116>
 800ecca:	2b2d      	cmp	r3, #45	@ 0x2d
 800eccc:	d034      	beq.n	800ed38 <__gethex+0x11c>
 800ecce:	1c71      	adds	r1, r6, #1
 800ecd0:	2400      	movs	r4, #0
 800ecd2:	7808      	ldrb	r0, [r1, #0]
 800ecd4:	f7ff ff8c 	bl	800ebf0 <__hexdig_fun>
 800ecd8:	1e43      	subs	r3, r0, #1
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	2b18      	cmp	r3, #24
 800ecde:	d830      	bhi.n	800ed42 <__gethex+0x126>
 800ece0:	f1a0 0210 	sub.w	r2, r0, #16
 800ece4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ece8:	f7ff ff82 	bl	800ebf0 <__hexdig_fun>
 800ecec:	f100 3cff 	add.w	ip, r0, #4294967295
 800ecf0:	fa5f fc8c 	uxtb.w	ip, ip
 800ecf4:	f1bc 0f18 	cmp.w	ip, #24
 800ecf8:	f04f 030a 	mov.w	r3, #10
 800ecfc:	d91e      	bls.n	800ed3c <__gethex+0x120>
 800ecfe:	b104      	cbz	r4, 800ed02 <__gethex+0xe6>
 800ed00:	4252      	negs	r2, r2
 800ed02:	4417      	add	r7, r2
 800ed04:	f8ca 1000 	str.w	r1, [sl]
 800ed08:	b1ed      	cbz	r5, 800ed46 <__gethex+0x12a>
 800ed0a:	f1bb 0f00 	cmp.w	fp, #0
 800ed0e:	bf0c      	ite	eq
 800ed10:	2506      	moveq	r5, #6
 800ed12:	2500      	movne	r5, #0
 800ed14:	4628      	mov	r0, r5
 800ed16:	b005      	add	sp, #20
 800ed18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed1c:	2500      	movs	r5, #0
 800ed1e:	462c      	mov	r4, r5
 800ed20:	e7b0      	b.n	800ec84 <__gethex+0x68>
 800ed22:	2c00      	cmp	r4, #0
 800ed24:	d1c7      	bne.n	800ecb6 <__gethex+0x9a>
 800ed26:	4627      	mov	r7, r4
 800ed28:	e7c7      	b.n	800ecba <__gethex+0x9e>
 800ed2a:	464e      	mov	r6, r9
 800ed2c:	462f      	mov	r7, r5
 800ed2e:	2501      	movs	r5, #1
 800ed30:	e7c3      	b.n	800ecba <__gethex+0x9e>
 800ed32:	2400      	movs	r4, #0
 800ed34:	1cb1      	adds	r1, r6, #2
 800ed36:	e7cc      	b.n	800ecd2 <__gethex+0xb6>
 800ed38:	2401      	movs	r4, #1
 800ed3a:	e7fb      	b.n	800ed34 <__gethex+0x118>
 800ed3c:	fb03 0002 	mla	r0, r3, r2, r0
 800ed40:	e7ce      	b.n	800ece0 <__gethex+0xc4>
 800ed42:	4631      	mov	r1, r6
 800ed44:	e7de      	b.n	800ed04 <__gethex+0xe8>
 800ed46:	eba6 0309 	sub.w	r3, r6, r9
 800ed4a:	3b01      	subs	r3, #1
 800ed4c:	4629      	mov	r1, r5
 800ed4e:	2b07      	cmp	r3, #7
 800ed50:	dc0a      	bgt.n	800ed68 <__gethex+0x14c>
 800ed52:	9801      	ldr	r0, [sp, #4]
 800ed54:	f000 fafc 	bl	800f350 <_Balloc>
 800ed58:	4604      	mov	r4, r0
 800ed5a:	b940      	cbnz	r0, 800ed6e <__gethex+0x152>
 800ed5c:	4b5c      	ldr	r3, [pc, #368]	@ (800eed0 <__gethex+0x2b4>)
 800ed5e:	4602      	mov	r2, r0
 800ed60:	21e4      	movs	r1, #228	@ 0xe4
 800ed62:	485c      	ldr	r0, [pc, #368]	@ (800eed4 <__gethex+0x2b8>)
 800ed64:	f7ff f83e 	bl	800dde4 <__assert_func>
 800ed68:	3101      	adds	r1, #1
 800ed6a:	105b      	asrs	r3, r3, #1
 800ed6c:	e7ef      	b.n	800ed4e <__gethex+0x132>
 800ed6e:	f100 0a14 	add.w	sl, r0, #20
 800ed72:	2300      	movs	r3, #0
 800ed74:	4655      	mov	r5, sl
 800ed76:	469b      	mov	fp, r3
 800ed78:	45b1      	cmp	r9, r6
 800ed7a:	d337      	bcc.n	800edec <__gethex+0x1d0>
 800ed7c:	f845 bb04 	str.w	fp, [r5], #4
 800ed80:	eba5 050a 	sub.w	r5, r5, sl
 800ed84:	10ad      	asrs	r5, r5, #2
 800ed86:	6125      	str	r5, [r4, #16]
 800ed88:	4658      	mov	r0, fp
 800ed8a:	f000 fbd3 	bl	800f534 <__hi0bits>
 800ed8e:	016d      	lsls	r5, r5, #5
 800ed90:	f8d8 6000 	ldr.w	r6, [r8]
 800ed94:	1a2d      	subs	r5, r5, r0
 800ed96:	42b5      	cmp	r5, r6
 800ed98:	dd54      	ble.n	800ee44 <__gethex+0x228>
 800ed9a:	1bad      	subs	r5, r5, r6
 800ed9c:	4629      	mov	r1, r5
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f000 ff67 	bl	800fc72 <__any_on>
 800eda4:	4681      	mov	r9, r0
 800eda6:	b178      	cbz	r0, 800edc8 <__gethex+0x1ac>
 800eda8:	1e6b      	subs	r3, r5, #1
 800edaa:	1159      	asrs	r1, r3, #5
 800edac:	f003 021f 	and.w	r2, r3, #31
 800edb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800edb4:	f04f 0901 	mov.w	r9, #1
 800edb8:	fa09 f202 	lsl.w	r2, r9, r2
 800edbc:	420a      	tst	r2, r1
 800edbe:	d003      	beq.n	800edc8 <__gethex+0x1ac>
 800edc0:	454b      	cmp	r3, r9
 800edc2:	dc36      	bgt.n	800ee32 <__gethex+0x216>
 800edc4:	f04f 0902 	mov.w	r9, #2
 800edc8:	4629      	mov	r1, r5
 800edca:	4620      	mov	r0, r4
 800edcc:	f7ff febe 	bl	800eb4c <rshift>
 800edd0:	442f      	add	r7, r5
 800edd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800edd6:	42bb      	cmp	r3, r7
 800edd8:	da42      	bge.n	800ee60 <__gethex+0x244>
 800edda:	9801      	ldr	r0, [sp, #4]
 800eddc:	4621      	mov	r1, r4
 800edde:	f000 faf7 	bl	800f3d0 <_Bfree>
 800ede2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ede4:	2300      	movs	r3, #0
 800ede6:	6013      	str	r3, [r2, #0]
 800ede8:	25a3      	movs	r5, #163	@ 0xa3
 800edea:	e793      	b.n	800ed14 <__gethex+0xf8>
 800edec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800edf0:	2a2e      	cmp	r2, #46	@ 0x2e
 800edf2:	d012      	beq.n	800ee1a <__gethex+0x1fe>
 800edf4:	2b20      	cmp	r3, #32
 800edf6:	d104      	bne.n	800ee02 <__gethex+0x1e6>
 800edf8:	f845 bb04 	str.w	fp, [r5], #4
 800edfc:	f04f 0b00 	mov.w	fp, #0
 800ee00:	465b      	mov	r3, fp
 800ee02:	7830      	ldrb	r0, [r6, #0]
 800ee04:	9303      	str	r3, [sp, #12]
 800ee06:	f7ff fef3 	bl	800ebf0 <__hexdig_fun>
 800ee0a:	9b03      	ldr	r3, [sp, #12]
 800ee0c:	f000 000f 	and.w	r0, r0, #15
 800ee10:	4098      	lsls	r0, r3
 800ee12:	ea4b 0b00 	orr.w	fp, fp, r0
 800ee16:	3304      	adds	r3, #4
 800ee18:	e7ae      	b.n	800ed78 <__gethex+0x15c>
 800ee1a:	45b1      	cmp	r9, r6
 800ee1c:	d8ea      	bhi.n	800edf4 <__gethex+0x1d8>
 800ee1e:	492b      	ldr	r1, [pc, #172]	@ (800eecc <__gethex+0x2b0>)
 800ee20:	9303      	str	r3, [sp, #12]
 800ee22:	2201      	movs	r2, #1
 800ee24:	4630      	mov	r0, r6
 800ee26:	f7fe fed8 	bl	800dbda <strncmp>
 800ee2a:	9b03      	ldr	r3, [sp, #12]
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	d1e1      	bne.n	800edf4 <__gethex+0x1d8>
 800ee30:	e7a2      	b.n	800ed78 <__gethex+0x15c>
 800ee32:	1ea9      	subs	r1, r5, #2
 800ee34:	4620      	mov	r0, r4
 800ee36:	f000 ff1c 	bl	800fc72 <__any_on>
 800ee3a:	2800      	cmp	r0, #0
 800ee3c:	d0c2      	beq.n	800edc4 <__gethex+0x1a8>
 800ee3e:	f04f 0903 	mov.w	r9, #3
 800ee42:	e7c1      	b.n	800edc8 <__gethex+0x1ac>
 800ee44:	da09      	bge.n	800ee5a <__gethex+0x23e>
 800ee46:	1b75      	subs	r5, r6, r5
 800ee48:	4621      	mov	r1, r4
 800ee4a:	9801      	ldr	r0, [sp, #4]
 800ee4c:	462a      	mov	r2, r5
 800ee4e:	f000 fcd7 	bl	800f800 <__lshift>
 800ee52:	1b7f      	subs	r7, r7, r5
 800ee54:	4604      	mov	r4, r0
 800ee56:	f100 0a14 	add.w	sl, r0, #20
 800ee5a:	f04f 0900 	mov.w	r9, #0
 800ee5e:	e7b8      	b.n	800edd2 <__gethex+0x1b6>
 800ee60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ee64:	42bd      	cmp	r5, r7
 800ee66:	dd6f      	ble.n	800ef48 <__gethex+0x32c>
 800ee68:	1bed      	subs	r5, r5, r7
 800ee6a:	42ae      	cmp	r6, r5
 800ee6c:	dc34      	bgt.n	800eed8 <__gethex+0x2bc>
 800ee6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee72:	2b02      	cmp	r3, #2
 800ee74:	d022      	beq.n	800eebc <__gethex+0x2a0>
 800ee76:	2b03      	cmp	r3, #3
 800ee78:	d024      	beq.n	800eec4 <__gethex+0x2a8>
 800ee7a:	2b01      	cmp	r3, #1
 800ee7c:	d115      	bne.n	800eeaa <__gethex+0x28e>
 800ee7e:	42ae      	cmp	r6, r5
 800ee80:	d113      	bne.n	800eeaa <__gethex+0x28e>
 800ee82:	2e01      	cmp	r6, #1
 800ee84:	d10b      	bne.n	800ee9e <__gethex+0x282>
 800ee86:	9a02      	ldr	r2, [sp, #8]
 800ee88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ee8c:	6013      	str	r3, [r2, #0]
 800ee8e:	2301      	movs	r3, #1
 800ee90:	6123      	str	r3, [r4, #16]
 800ee92:	f8ca 3000 	str.w	r3, [sl]
 800ee96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee98:	2562      	movs	r5, #98	@ 0x62
 800ee9a:	601c      	str	r4, [r3, #0]
 800ee9c:	e73a      	b.n	800ed14 <__gethex+0xf8>
 800ee9e:	1e71      	subs	r1, r6, #1
 800eea0:	4620      	mov	r0, r4
 800eea2:	f000 fee6 	bl	800fc72 <__any_on>
 800eea6:	2800      	cmp	r0, #0
 800eea8:	d1ed      	bne.n	800ee86 <__gethex+0x26a>
 800eeaa:	9801      	ldr	r0, [sp, #4]
 800eeac:	4621      	mov	r1, r4
 800eeae:	f000 fa8f 	bl	800f3d0 <_Bfree>
 800eeb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	6013      	str	r3, [r2, #0]
 800eeb8:	2550      	movs	r5, #80	@ 0x50
 800eeba:	e72b      	b.n	800ed14 <__gethex+0xf8>
 800eebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d1f3      	bne.n	800eeaa <__gethex+0x28e>
 800eec2:	e7e0      	b.n	800ee86 <__gethex+0x26a>
 800eec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d1dd      	bne.n	800ee86 <__gethex+0x26a>
 800eeca:	e7ee      	b.n	800eeaa <__gethex+0x28e>
 800eecc:	08012458 	.word	0x08012458
 800eed0:	08012704 	.word	0x08012704
 800eed4:	08012715 	.word	0x08012715
 800eed8:	1e6f      	subs	r7, r5, #1
 800eeda:	f1b9 0f00 	cmp.w	r9, #0
 800eede:	d130      	bne.n	800ef42 <__gethex+0x326>
 800eee0:	b127      	cbz	r7, 800eeec <__gethex+0x2d0>
 800eee2:	4639      	mov	r1, r7
 800eee4:	4620      	mov	r0, r4
 800eee6:	f000 fec4 	bl	800fc72 <__any_on>
 800eeea:	4681      	mov	r9, r0
 800eeec:	117a      	asrs	r2, r7, #5
 800eeee:	2301      	movs	r3, #1
 800eef0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800eef4:	f007 071f 	and.w	r7, r7, #31
 800eef8:	40bb      	lsls	r3, r7
 800eefa:	4213      	tst	r3, r2
 800eefc:	4629      	mov	r1, r5
 800eefe:	4620      	mov	r0, r4
 800ef00:	bf18      	it	ne
 800ef02:	f049 0902 	orrne.w	r9, r9, #2
 800ef06:	f7ff fe21 	bl	800eb4c <rshift>
 800ef0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ef0e:	1b76      	subs	r6, r6, r5
 800ef10:	2502      	movs	r5, #2
 800ef12:	f1b9 0f00 	cmp.w	r9, #0
 800ef16:	d047      	beq.n	800efa8 <__gethex+0x38c>
 800ef18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef1c:	2b02      	cmp	r3, #2
 800ef1e:	d015      	beq.n	800ef4c <__gethex+0x330>
 800ef20:	2b03      	cmp	r3, #3
 800ef22:	d017      	beq.n	800ef54 <__gethex+0x338>
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d109      	bne.n	800ef3c <__gethex+0x320>
 800ef28:	f019 0f02 	tst.w	r9, #2
 800ef2c:	d006      	beq.n	800ef3c <__gethex+0x320>
 800ef2e:	f8da 3000 	ldr.w	r3, [sl]
 800ef32:	ea49 0903 	orr.w	r9, r9, r3
 800ef36:	f019 0f01 	tst.w	r9, #1
 800ef3a:	d10e      	bne.n	800ef5a <__gethex+0x33e>
 800ef3c:	f045 0510 	orr.w	r5, r5, #16
 800ef40:	e032      	b.n	800efa8 <__gethex+0x38c>
 800ef42:	f04f 0901 	mov.w	r9, #1
 800ef46:	e7d1      	b.n	800eeec <__gethex+0x2d0>
 800ef48:	2501      	movs	r5, #1
 800ef4a:	e7e2      	b.n	800ef12 <__gethex+0x2f6>
 800ef4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef4e:	f1c3 0301 	rsb	r3, r3, #1
 800ef52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d0f0      	beq.n	800ef3c <__gethex+0x320>
 800ef5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ef5e:	f104 0314 	add.w	r3, r4, #20
 800ef62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ef66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ef6a:	f04f 0c00 	mov.w	ip, #0
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef74:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ef78:	d01b      	beq.n	800efb2 <__gethex+0x396>
 800ef7a:	3201      	adds	r2, #1
 800ef7c:	6002      	str	r2, [r0, #0]
 800ef7e:	2d02      	cmp	r5, #2
 800ef80:	f104 0314 	add.w	r3, r4, #20
 800ef84:	d13c      	bne.n	800f000 <__gethex+0x3e4>
 800ef86:	f8d8 2000 	ldr.w	r2, [r8]
 800ef8a:	3a01      	subs	r2, #1
 800ef8c:	42b2      	cmp	r2, r6
 800ef8e:	d109      	bne.n	800efa4 <__gethex+0x388>
 800ef90:	1171      	asrs	r1, r6, #5
 800ef92:	2201      	movs	r2, #1
 800ef94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef98:	f006 061f 	and.w	r6, r6, #31
 800ef9c:	fa02 f606 	lsl.w	r6, r2, r6
 800efa0:	421e      	tst	r6, r3
 800efa2:	d13a      	bne.n	800f01a <__gethex+0x3fe>
 800efa4:	f045 0520 	orr.w	r5, r5, #32
 800efa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efaa:	601c      	str	r4, [r3, #0]
 800efac:	9b02      	ldr	r3, [sp, #8]
 800efae:	601f      	str	r7, [r3, #0]
 800efb0:	e6b0      	b.n	800ed14 <__gethex+0xf8>
 800efb2:	4299      	cmp	r1, r3
 800efb4:	f843 cc04 	str.w	ip, [r3, #-4]
 800efb8:	d8d9      	bhi.n	800ef6e <__gethex+0x352>
 800efba:	68a3      	ldr	r3, [r4, #8]
 800efbc:	459b      	cmp	fp, r3
 800efbe:	db17      	blt.n	800eff0 <__gethex+0x3d4>
 800efc0:	6861      	ldr	r1, [r4, #4]
 800efc2:	9801      	ldr	r0, [sp, #4]
 800efc4:	3101      	adds	r1, #1
 800efc6:	f000 f9c3 	bl	800f350 <_Balloc>
 800efca:	4681      	mov	r9, r0
 800efcc:	b918      	cbnz	r0, 800efd6 <__gethex+0x3ba>
 800efce:	4b1a      	ldr	r3, [pc, #104]	@ (800f038 <__gethex+0x41c>)
 800efd0:	4602      	mov	r2, r0
 800efd2:	2184      	movs	r1, #132	@ 0x84
 800efd4:	e6c5      	b.n	800ed62 <__gethex+0x146>
 800efd6:	6922      	ldr	r2, [r4, #16]
 800efd8:	3202      	adds	r2, #2
 800efda:	f104 010c 	add.w	r1, r4, #12
 800efde:	0092      	lsls	r2, r2, #2
 800efe0:	300c      	adds	r0, #12
 800efe2:	f7fe fee0 	bl	800dda6 <memcpy>
 800efe6:	4621      	mov	r1, r4
 800efe8:	9801      	ldr	r0, [sp, #4]
 800efea:	f000 f9f1 	bl	800f3d0 <_Bfree>
 800efee:	464c      	mov	r4, r9
 800eff0:	6923      	ldr	r3, [r4, #16]
 800eff2:	1c5a      	adds	r2, r3, #1
 800eff4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eff8:	6122      	str	r2, [r4, #16]
 800effa:	2201      	movs	r2, #1
 800effc:	615a      	str	r2, [r3, #20]
 800effe:	e7be      	b.n	800ef7e <__gethex+0x362>
 800f000:	6922      	ldr	r2, [r4, #16]
 800f002:	455a      	cmp	r2, fp
 800f004:	dd0b      	ble.n	800f01e <__gethex+0x402>
 800f006:	2101      	movs	r1, #1
 800f008:	4620      	mov	r0, r4
 800f00a:	f7ff fd9f 	bl	800eb4c <rshift>
 800f00e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f012:	3701      	adds	r7, #1
 800f014:	42bb      	cmp	r3, r7
 800f016:	f6ff aee0 	blt.w	800edda <__gethex+0x1be>
 800f01a:	2501      	movs	r5, #1
 800f01c:	e7c2      	b.n	800efa4 <__gethex+0x388>
 800f01e:	f016 061f 	ands.w	r6, r6, #31
 800f022:	d0fa      	beq.n	800f01a <__gethex+0x3fe>
 800f024:	4453      	add	r3, sl
 800f026:	f1c6 0620 	rsb	r6, r6, #32
 800f02a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f02e:	f000 fa81 	bl	800f534 <__hi0bits>
 800f032:	42b0      	cmp	r0, r6
 800f034:	dbe7      	blt.n	800f006 <__gethex+0x3ea>
 800f036:	e7f0      	b.n	800f01a <__gethex+0x3fe>
 800f038:	08012704 	.word	0x08012704

0800f03c <L_shift>:
 800f03c:	f1c2 0208 	rsb	r2, r2, #8
 800f040:	0092      	lsls	r2, r2, #2
 800f042:	b570      	push	{r4, r5, r6, lr}
 800f044:	f1c2 0620 	rsb	r6, r2, #32
 800f048:	6843      	ldr	r3, [r0, #4]
 800f04a:	6804      	ldr	r4, [r0, #0]
 800f04c:	fa03 f506 	lsl.w	r5, r3, r6
 800f050:	432c      	orrs	r4, r5
 800f052:	40d3      	lsrs	r3, r2
 800f054:	6004      	str	r4, [r0, #0]
 800f056:	f840 3f04 	str.w	r3, [r0, #4]!
 800f05a:	4288      	cmp	r0, r1
 800f05c:	d3f4      	bcc.n	800f048 <L_shift+0xc>
 800f05e:	bd70      	pop	{r4, r5, r6, pc}

0800f060 <__match>:
 800f060:	b530      	push	{r4, r5, lr}
 800f062:	6803      	ldr	r3, [r0, #0]
 800f064:	3301      	adds	r3, #1
 800f066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f06a:	b914      	cbnz	r4, 800f072 <__match+0x12>
 800f06c:	6003      	str	r3, [r0, #0]
 800f06e:	2001      	movs	r0, #1
 800f070:	bd30      	pop	{r4, r5, pc}
 800f072:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f076:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f07a:	2d19      	cmp	r5, #25
 800f07c:	bf98      	it	ls
 800f07e:	3220      	addls	r2, #32
 800f080:	42a2      	cmp	r2, r4
 800f082:	d0f0      	beq.n	800f066 <__match+0x6>
 800f084:	2000      	movs	r0, #0
 800f086:	e7f3      	b.n	800f070 <__match+0x10>

0800f088 <__hexnan>:
 800f088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f08c:	680b      	ldr	r3, [r1, #0]
 800f08e:	6801      	ldr	r1, [r0, #0]
 800f090:	115e      	asrs	r6, r3, #5
 800f092:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f096:	f013 031f 	ands.w	r3, r3, #31
 800f09a:	b087      	sub	sp, #28
 800f09c:	bf18      	it	ne
 800f09e:	3604      	addne	r6, #4
 800f0a0:	2500      	movs	r5, #0
 800f0a2:	1f37      	subs	r7, r6, #4
 800f0a4:	4682      	mov	sl, r0
 800f0a6:	4690      	mov	r8, r2
 800f0a8:	9301      	str	r3, [sp, #4]
 800f0aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800f0ae:	46b9      	mov	r9, r7
 800f0b0:	463c      	mov	r4, r7
 800f0b2:	9502      	str	r5, [sp, #8]
 800f0b4:	46ab      	mov	fp, r5
 800f0b6:	784a      	ldrb	r2, [r1, #1]
 800f0b8:	1c4b      	adds	r3, r1, #1
 800f0ba:	9303      	str	r3, [sp, #12]
 800f0bc:	b342      	cbz	r2, 800f110 <__hexnan+0x88>
 800f0be:	4610      	mov	r0, r2
 800f0c0:	9105      	str	r1, [sp, #20]
 800f0c2:	9204      	str	r2, [sp, #16]
 800f0c4:	f7ff fd94 	bl	800ebf0 <__hexdig_fun>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	d151      	bne.n	800f170 <__hexnan+0xe8>
 800f0cc:	9a04      	ldr	r2, [sp, #16]
 800f0ce:	9905      	ldr	r1, [sp, #20]
 800f0d0:	2a20      	cmp	r2, #32
 800f0d2:	d818      	bhi.n	800f106 <__hexnan+0x7e>
 800f0d4:	9b02      	ldr	r3, [sp, #8]
 800f0d6:	459b      	cmp	fp, r3
 800f0d8:	dd13      	ble.n	800f102 <__hexnan+0x7a>
 800f0da:	454c      	cmp	r4, r9
 800f0dc:	d206      	bcs.n	800f0ec <__hexnan+0x64>
 800f0de:	2d07      	cmp	r5, #7
 800f0e0:	dc04      	bgt.n	800f0ec <__hexnan+0x64>
 800f0e2:	462a      	mov	r2, r5
 800f0e4:	4649      	mov	r1, r9
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f7ff ffa8 	bl	800f03c <L_shift>
 800f0ec:	4544      	cmp	r4, r8
 800f0ee:	d952      	bls.n	800f196 <__hexnan+0x10e>
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	f1a4 0904 	sub.w	r9, r4, #4
 800f0f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f0fa:	f8cd b008 	str.w	fp, [sp, #8]
 800f0fe:	464c      	mov	r4, r9
 800f100:	461d      	mov	r5, r3
 800f102:	9903      	ldr	r1, [sp, #12]
 800f104:	e7d7      	b.n	800f0b6 <__hexnan+0x2e>
 800f106:	2a29      	cmp	r2, #41	@ 0x29
 800f108:	d157      	bne.n	800f1ba <__hexnan+0x132>
 800f10a:	3102      	adds	r1, #2
 800f10c:	f8ca 1000 	str.w	r1, [sl]
 800f110:	f1bb 0f00 	cmp.w	fp, #0
 800f114:	d051      	beq.n	800f1ba <__hexnan+0x132>
 800f116:	454c      	cmp	r4, r9
 800f118:	d206      	bcs.n	800f128 <__hexnan+0xa0>
 800f11a:	2d07      	cmp	r5, #7
 800f11c:	dc04      	bgt.n	800f128 <__hexnan+0xa0>
 800f11e:	462a      	mov	r2, r5
 800f120:	4649      	mov	r1, r9
 800f122:	4620      	mov	r0, r4
 800f124:	f7ff ff8a 	bl	800f03c <L_shift>
 800f128:	4544      	cmp	r4, r8
 800f12a:	d936      	bls.n	800f19a <__hexnan+0x112>
 800f12c:	f1a8 0204 	sub.w	r2, r8, #4
 800f130:	4623      	mov	r3, r4
 800f132:	f853 1b04 	ldr.w	r1, [r3], #4
 800f136:	f842 1f04 	str.w	r1, [r2, #4]!
 800f13a:	429f      	cmp	r7, r3
 800f13c:	d2f9      	bcs.n	800f132 <__hexnan+0xaa>
 800f13e:	1b3b      	subs	r3, r7, r4
 800f140:	f023 0303 	bic.w	r3, r3, #3
 800f144:	3304      	adds	r3, #4
 800f146:	3401      	adds	r4, #1
 800f148:	3e03      	subs	r6, #3
 800f14a:	42b4      	cmp	r4, r6
 800f14c:	bf88      	it	hi
 800f14e:	2304      	movhi	r3, #4
 800f150:	4443      	add	r3, r8
 800f152:	2200      	movs	r2, #0
 800f154:	f843 2b04 	str.w	r2, [r3], #4
 800f158:	429f      	cmp	r7, r3
 800f15a:	d2fb      	bcs.n	800f154 <__hexnan+0xcc>
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	b91b      	cbnz	r3, 800f168 <__hexnan+0xe0>
 800f160:	4547      	cmp	r7, r8
 800f162:	d128      	bne.n	800f1b6 <__hexnan+0x12e>
 800f164:	2301      	movs	r3, #1
 800f166:	603b      	str	r3, [r7, #0]
 800f168:	2005      	movs	r0, #5
 800f16a:	b007      	add	sp, #28
 800f16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f170:	3501      	adds	r5, #1
 800f172:	2d08      	cmp	r5, #8
 800f174:	f10b 0b01 	add.w	fp, fp, #1
 800f178:	dd06      	ble.n	800f188 <__hexnan+0x100>
 800f17a:	4544      	cmp	r4, r8
 800f17c:	d9c1      	bls.n	800f102 <__hexnan+0x7a>
 800f17e:	2300      	movs	r3, #0
 800f180:	f844 3c04 	str.w	r3, [r4, #-4]
 800f184:	2501      	movs	r5, #1
 800f186:	3c04      	subs	r4, #4
 800f188:	6822      	ldr	r2, [r4, #0]
 800f18a:	f000 000f 	and.w	r0, r0, #15
 800f18e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f192:	6020      	str	r0, [r4, #0]
 800f194:	e7b5      	b.n	800f102 <__hexnan+0x7a>
 800f196:	2508      	movs	r5, #8
 800f198:	e7b3      	b.n	800f102 <__hexnan+0x7a>
 800f19a:	9b01      	ldr	r3, [sp, #4]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d0dd      	beq.n	800f15c <__hexnan+0xd4>
 800f1a0:	f1c3 0320 	rsb	r3, r3, #32
 800f1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f1a8:	40da      	lsrs	r2, r3
 800f1aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f1ae:	4013      	ands	r3, r2
 800f1b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800f1b4:	e7d2      	b.n	800f15c <__hexnan+0xd4>
 800f1b6:	3f04      	subs	r7, #4
 800f1b8:	e7d0      	b.n	800f15c <__hexnan+0xd4>
 800f1ba:	2004      	movs	r0, #4
 800f1bc:	e7d5      	b.n	800f16a <__hexnan+0xe2>
	...

0800f1c0 <malloc>:
 800f1c0:	4b02      	ldr	r3, [pc, #8]	@ (800f1cc <malloc+0xc>)
 800f1c2:	4601      	mov	r1, r0
 800f1c4:	6818      	ldr	r0, [r3, #0]
 800f1c6:	f000 b825 	b.w	800f214 <_malloc_r>
 800f1ca:	bf00      	nop
 800f1cc:	20000264 	.word	0x20000264

0800f1d0 <sbrk_aligned>:
 800f1d0:	b570      	push	{r4, r5, r6, lr}
 800f1d2:	4e0f      	ldr	r6, [pc, #60]	@ (800f210 <sbrk_aligned+0x40>)
 800f1d4:	460c      	mov	r4, r1
 800f1d6:	6831      	ldr	r1, [r6, #0]
 800f1d8:	4605      	mov	r5, r0
 800f1da:	b911      	cbnz	r1, 800f1e2 <sbrk_aligned+0x12>
 800f1dc:	f000 ffa6 	bl	801012c <_sbrk_r>
 800f1e0:	6030      	str	r0, [r6, #0]
 800f1e2:	4621      	mov	r1, r4
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	f000 ffa1 	bl	801012c <_sbrk_r>
 800f1ea:	1c43      	adds	r3, r0, #1
 800f1ec:	d103      	bne.n	800f1f6 <sbrk_aligned+0x26>
 800f1ee:	f04f 34ff 	mov.w	r4, #4294967295
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	bd70      	pop	{r4, r5, r6, pc}
 800f1f6:	1cc4      	adds	r4, r0, #3
 800f1f8:	f024 0403 	bic.w	r4, r4, #3
 800f1fc:	42a0      	cmp	r0, r4
 800f1fe:	d0f8      	beq.n	800f1f2 <sbrk_aligned+0x22>
 800f200:	1a21      	subs	r1, r4, r0
 800f202:	4628      	mov	r0, r5
 800f204:	f000 ff92 	bl	801012c <_sbrk_r>
 800f208:	3001      	adds	r0, #1
 800f20a:	d1f2      	bne.n	800f1f2 <sbrk_aligned+0x22>
 800f20c:	e7ef      	b.n	800f1ee <sbrk_aligned+0x1e>
 800f20e:	bf00      	nop
 800f210:	20000830 	.word	0x20000830

0800f214 <_malloc_r>:
 800f214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f218:	1ccd      	adds	r5, r1, #3
 800f21a:	f025 0503 	bic.w	r5, r5, #3
 800f21e:	3508      	adds	r5, #8
 800f220:	2d0c      	cmp	r5, #12
 800f222:	bf38      	it	cc
 800f224:	250c      	movcc	r5, #12
 800f226:	2d00      	cmp	r5, #0
 800f228:	4606      	mov	r6, r0
 800f22a:	db01      	blt.n	800f230 <_malloc_r+0x1c>
 800f22c:	42a9      	cmp	r1, r5
 800f22e:	d904      	bls.n	800f23a <_malloc_r+0x26>
 800f230:	230c      	movs	r3, #12
 800f232:	6033      	str	r3, [r6, #0]
 800f234:	2000      	movs	r0, #0
 800f236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f23a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f310 <_malloc_r+0xfc>
 800f23e:	f000 f87b 	bl	800f338 <__malloc_lock>
 800f242:	f8d8 3000 	ldr.w	r3, [r8]
 800f246:	461c      	mov	r4, r3
 800f248:	bb44      	cbnz	r4, 800f29c <_malloc_r+0x88>
 800f24a:	4629      	mov	r1, r5
 800f24c:	4630      	mov	r0, r6
 800f24e:	f7ff ffbf 	bl	800f1d0 <sbrk_aligned>
 800f252:	1c43      	adds	r3, r0, #1
 800f254:	4604      	mov	r4, r0
 800f256:	d158      	bne.n	800f30a <_malloc_r+0xf6>
 800f258:	f8d8 4000 	ldr.w	r4, [r8]
 800f25c:	4627      	mov	r7, r4
 800f25e:	2f00      	cmp	r7, #0
 800f260:	d143      	bne.n	800f2ea <_malloc_r+0xd6>
 800f262:	2c00      	cmp	r4, #0
 800f264:	d04b      	beq.n	800f2fe <_malloc_r+0xea>
 800f266:	6823      	ldr	r3, [r4, #0]
 800f268:	4639      	mov	r1, r7
 800f26a:	4630      	mov	r0, r6
 800f26c:	eb04 0903 	add.w	r9, r4, r3
 800f270:	f000 ff5c 	bl	801012c <_sbrk_r>
 800f274:	4581      	cmp	r9, r0
 800f276:	d142      	bne.n	800f2fe <_malloc_r+0xea>
 800f278:	6821      	ldr	r1, [r4, #0]
 800f27a:	1a6d      	subs	r5, r5, r1
 800f27c:	4629      	mov	r1, r5
 800f27e:	4630      	mov	r0, r6
 800f280:	f7ff ffa6 	bl	800f1d0 <sbrk_aligned>
 800f284:	3001      	adds	r0, #1
 800f286:	d03a      	beq.n	800f2fe <_malloc_r+0xea>
 800f288:	6823      	ldr	r3, [r4, #0]
 800f28a:	442b      	add	r3, r5
 800f28c:	6023      	str	r3, [r4, #0]
 800f28e:	f8d8 3000 	ldr.w	r3, [r8]
 800f292:	685a      	ldr	r2, [r3, #4]
 800f294:	bb62      	cbnz	r2, 800f2f0 <_malloc_r+0xdc>
 800f296:	f8c8 7000 	str.w	r7, [r8]
 800f29a:	e00f      	b.n	800f2bc <_malloc_r+0xa8>
 800f29c:	6822      	ldr	r2, [r4, #0]
 800f29e:	1b52      	subs	r2, r2, r5
 800f2a0:	d420      	bmi.n	800f2e4 <_malloc_r+0xd0>
 800f2a2:	2a0b      	cmp	r2, #11
 800f2a4:	d917      	bls.n	800f2d6 <_malloc_r+0xc2>
 800f2a6:	1961      	adds	r1, r4, r5
 800f2a8:	42a3      	cmp	r3, r4
 800f2aa:	6025      	str	r5, [r4, #0]
 800f2ac:	bf18      	it	ne
 800f2ae:	6059      	strne	r1, [r3, #4]
 800f2b0:	6863      	ldr	r3, [r4, #4]
 800f2b2:	bf08      	it	eq
 800f2b4:	f8c8 1000 	streq.w	r1, [r8]
 800f2b8:	5162      	str	r2, [r4, r5]
 800f2ba:	604b      	str	r3, [r1, #4]
 800f2bc:	4630      	mov	r0, r6
 800f2be:	f000 f841 	bl	800f344 <__malloc_unlock>
 800f2c2:	f104 000b 	add.w	r0, r4, #11
 800f2c6:	1d23      	adds	r3, r4, #4
 800f2c8:	f020 0007 	bic.w	r0, r0, #7
 800f2cc:	1ac2      	subs	r2, r0, r3
 800f2ce:	bf1c      	itt	ne
 800f2d0:	1a1b      	subne	r3, r3, r0
 800f2d2:	50a3      	strne	r3, [r4, r2]
 800f2d4:	e7af      	b.n	800f236 <_malloc_r+0x22>
 800f2d6:	6862      	ldr	r2, [r4, #4]
 800f2d8:	42a3      	cmp	r3, r4
 800f2da:	bf0c      	ite	eq
 800f2dc:	f8c8 2000 	streq.w	r2, [r8]
 800f2e0:	605a      	strne	r2, [r3, #4]
 800f2e2:	e7eb      	b.n	800f2bc <_malloc_r+0xa8>
 800f2e4:	4623      	mov	r3, r4
 800f2e6:	6864      	ldr	r4, [r4, #4]
 800f2e8:	e7ae      	b.n	800f248 <_malloc_r+0x34>
 800f2ea:	463c      	mov	r4, r7
 800f2ec:	687f      	ldr	r7, [r7, #4]
 800f2ee:	e7b6      	b.n	800f25e <_malloc_r+0x4a>
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	42a3      	cmp	r3, r4
 800f2f6:	d1fb      	bne.n	800f2f0 <_malloc_r+0xdc>
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	6053      	str	r3, [r2, #4]
 800f2fc:	e7de      	b.n	800f2bc <_malloc_r+0xa8>
 800f2fe:	230c      	movs	r3, #12
 800f300:	6033      	str	r3, [r6, #0]
 800f302:	4630      	mov	r0, r6
 800f304:	f000 f81e 	bl	800f344 <__malloc_unlock>
 800f308:	e794      	b.n	800f234 <_malloc_r+0x20>
 800f30a:	6005      	str	r5, [r0, #0]
 800f30c:	e7d6      	b.n	800f2bc <_malloc_r+0xa8>
 800f30e:	bf00      	nop
 800f310:	20000834 	.word	0x20000834

0800f314 <__ascii_mbtowc>:
 800f314:	b082      	sub	sp, #8
 800f316:	b901      	cbnz	r1, 800f31a <__ascii_mbtowc+0x6>
 800f318:	a901      	add	r1, sp, #4
 800f31a:	b142      	cbz	r2, 800f32e <__ascii_mbtowc+0x1a>
 800f31c:	b14b      	cbz	r3, 800f332 <__ascii_mbtowc+0x1e>
 800f31e:	7813      	ldrb	r3, [r2, #0]
 800f320:	600b      	str	r3, [r1, #0]
 800f322:	7812      	ldrb	r2, [r2, #0]
 800f324:	1e10      	subs	r0, r2, #0
 800f326:	bf18      	it	ne
 800f328:	2001      	movne	r0, #1
 800f32a:	b002      	add	sp, #8
 800f32c:	4770      	bx	lr
 800f32e:	4610      	mov	r0, r2
 800f330:	e7fb      	b.n	800f32a <__ascii_mbtowc+0x16>
 800f332:	f06f 0001 	mvn.w	r0, #1
 800f336:	e7f8      	b.n	800f32a <__ascii_mbtowc+0x16>

0800f338 <__malloc_lock>:
 800f338:	4801      	ldr	r0, [pc, #4]	@ (800f340 <__malloc_lock+0x8>)
 800f33a:	f7fe bd32 	b.w	800dda2 <__retarget_lock_acquire_recursive>
 800f33e:	bf00      	nop
 800f340:	2000082c 	.word	0x2000082c

0800f344 <__malloc_unlock>:
 800f344:	4801      	ldr	r0, [pc, #4]	@ (800f34c <__malloc_unlock+0x8>)
 800f346:	f7fe bd2d 	b.w	800dda4 <__retarget_lock_release_recursive>
 800f34a:	bf00      	nop
 800f34c:	2000082c 	.word	0x2000082c

0800f350 <_Balloc>:
 800f350:	b570      	push	{r4, r5, r6, lr}
 800f352:	69c6      	ldr	r6, [r0, #28]
 800f354:	4604      	mov	r4, r0
 800f356:	460d      	mov	r5, r1
 800f358:	b976      	cbnz	r6, 800f378 <_Balloc+0x28>
 800f35a:	2010      	movs	r0, #16
 800f35c:	f7ff ff30 	bl	800f1c0 <malloc>
 800f360:	4602      	mov	r2, r0
 800f362:	61e0      	str	r0, [r4, #28]
 800f364:	b920      	cbnz	r0, 800f370 <_Balloc+0x20>
 800f366:	4b18      	ldr	r3, [pc, #96]	@ (800f3c8 <_Balloc+0x78>)
 800f368:	4818      	ldr	r0, [pc, #96]	@ (800f3cc <_Balloc+0x7c>)
 800f36a:	216b      	movs	r1, #107	@ 0x6b
 800f36c:	f7fe fd3a 	bl	800dde4 <__assert_func>
 800f370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f374:	6006      	str	r6, [r0, #0]
 800f376:	60c6      	str	r6, [r0, #12]
 800f378:	69e6      	ldr	r6, [r4, #28]
 800f37a:	68f3      	ldr	r3, [r6, #12]
 800f37c:	b183      	cbz	r3, 800f3a0 <_Balloc+0x50>
 800f37e:	69e3      	ldr	r3, [r4, #28]
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f386:	b9b8      	cbnz	r0, 800f3b8 <_Balloc+0x68>
 800f388:	2101      	movs	r1, #1
 800f38a:	fa01 f605 	lsl.w	r6, r1, r5
 800f38e:	1d72      	adds	r2, r6, #5
 800f390:	0092      	lsls	r2, r2, #2
 800f392:	4620      	mov	r0, r4
 800f394:	f000 fee1 	bl	801015a <_calloc_r>
 800f398:	b160      	cbz	r0, 800f3b4 <_Balloc+0x64>
 800f39a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f39e:	e00e      	b.n	800f3be <_Balloc+0x6e>
 800f3a0:	2221      	movs	r2, #33	@ 0x21
 800f3a2:	2104      	movs	r1, #4
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f000 fed8 	bl	801015a <_calloc_r>
 800f3aa:	69e3      	ldr	r3, [r4, #28]
 800f3ac:	60f0      	str	r0, [r6, #12]
 800f3ae:	68db      	ldr	r3, [r3, #12]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d1e4      	bne.n	800f37e <_Balloc+0x2e>
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	bd70      	pop	{r4, r5, r6, pc}
 800f3b8:	6802      	ldr	r2, [r0, #0]
 800f3ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f3be:	2300      	movs	r3, #0
 800f3c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f3c4:	e7f7      	b.n	800f3b6 <_Balloc+0x66>
 800f3c6:	bf00      	nop
 800f3c8:	080125ea 	.word	0x080125ea
 800f3cc:	08012775 	.word	0x08012775

0800f3d0 <_Bfree>:
 800f3d0:	b570      	push	{r4, r5, r6, lr}
 800f3d2:	69c6      	ldr	r6, [r0, #28]
 800f3d4:	4605      	mov	r5, r0
 800f3d6:	460c      	mov	r4, r1
 800f3d8:	b976      	cbnz	r6, 800f3f8 <_Bfree+0x28>
 800f3da:	2010      	movs	r0, #16
 800f3dc:	f7ff fef0 	bl	800f1c0 <malloc>
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	61e8      	str	r0, [r5, #28]
 800f3e4:	b920      	cbnz	r0, 800f3f0 <_Bfree+0x20>
 800f3e6:	4b09      	ldr	r3, [pc, #36]	@ (800f40c <_Bfree+0x3c>)
 800f3e8:	4809      	ldr	r0, [pc, #36]	@ (800f410 <_Bfree+0x40>)
 800f3ea:	218f      	movs	r1, #143	@ 0x8f
 800f3ec:	f7fe fcfa 	bl	800dde4 <__assert_func>
 800f3f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3f4:	6006      	str	r6, [r0, #0]
 800f3f6:	60c6      	str	r6, [r0, #12]
 800f3f8:	b13c      	cbz	r4, 800f40a <_Bfree+0x3a>
 800f3fa:	69eb      	ldr	r3, [r5, #28]
 800f3fc:	6862      	ldr	r2, [r4, #4]
 800f3fe:	68db      	ldr	r3, [r3, #12]
 800f400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f404:	6021      	str	r1, [r4, #0]
 800f406:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f40a:	bd70      	pop	{r4, r5, r6, pc}
 800f40c:	080125ea 	.word	0x080125ea
 800f410:	08012775 	.word	0x08012775

0800f414 <__multadd>:
 800f414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f418:	690d      	ldr	r5, [r1, #16]
 800f41a:	4607      	mov	r7, r0
 800f41c:	460c      	mov	r4, r1
 800f41e:	461e      	mov	r6, r3
 800f420:	f101 0c14 	add.w	ip, r1, #20
 800f424:	2000      	movs	r0, #0
 800f426:	f8dc 3000 	ldr.w	r3, [ip]
 800f42a:	b299      	uxth	r1, r3
 800f42c:	fb02 6101 	mla	r1, r2, r1, r6
 800f430:	0c1e      	lsrs	r6, r3, #16
 800f432:	0c0b      	lsrs	r3, r1, #16
 800f434:	fb02 3306 	mla	r3, r2, r6, r3
 800f438:	b289      	uxth	r1, r1
 800f43a:	3001      	adds	r0, #1
 800f43c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f440:	4285      	cmp	r5, r0
 800f442:	f84c 1b04 	str.w	r1, [ip], #4
 800f446:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f44a:	dcec      	bgt.n	800f426 <__multadd+0x12>
 800f44c:	b30e      	cbz	r6, 800f492 <__multadd+0x7e>
 800f44e:	68a3      	ldr	r3, [r4, #8]
 800f450:	42ab      	cmp	r3, r5
 800f452:	dc19      	bgt.n	800f488 <__multadd+0x74>
 800f454:	6861      	ldr	r1, [r4, #4]
 800f456:	4638      	mov	r0, r7
 800f458:	3101      	adds	r1, #1
 800f45a:	f7ff ff79 	bl	800f350 <_Balloc>
 800f45e:	4680      	mov	r8, r0
 800f460:	b928      	cbnz	r0, 800f46e <__multadd+0x5a>
 800f462:	4602      	mov	r2, r0
 800f464:	4b0c      	ldr	r3, [pc, #48]	@ (800f498 <__multadd+0x84>)
 800f466:	480d      	ldr	r0, [pc, #52]	@ (800f49c <__multadd+0x88>)
 800f468:	21ba      	movs	r1, #186	@ 0xba
 800f46a:	f7fe fcbb 	bl	800dde4 <__assert_func>
 800f46e:	6922      	ldr	r2, [r4, #16]
 800f470:	3202      	adds	r2, #2
 800f472:	f104 010c 	add.w	r1, r4, #12
 800f476:	0092      	lsls	r2, r2, #2
 800f478:	300c      	adds	r0, #12
 800f47a:	f7fe fc94 	bl	800dda6 <memcpy>
 800f47e:	4621      	mov	r1, r4
 800f480:	4638      	mov	r0, r7
 800f482:	f7ff ffa5 	bl	800f3d0 <_Bfree>
 800f486:	4644      	mov	r4, r8
 800f488:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f48c:	3501      	adds	r5, #1
 800f48e:	615e      	str	r6, [r3, #20]
 800f490:	6125      	str	r5, [r4, #16]
 800f492:	4620      	mov	r0, r4
 800f494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f498:	08012704 	.word	0x08012704
 800f49c:	08012775 	.word	0x08012775

0800f4a0 <__s2b>:
 800f4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4a4:	460c      	mov	r4, r1
 800f4a6:	4615      	mov	r5, r2
 800f4a8:	461f      	mov	r7, r3
 800f4aa:	2209      	movs	r2, #9
 800f4ac:	3308      	adds	r3, #8
 800f4ae:	4606      	mov	r6, r0
 800f4b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f4b4:	2100      	movs	r1, #0
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	db09      	blt.n	800f4d0 <__s2b+0x30>
 800f4bc:	4630      	mov	r0, r6
 800f4be:	f7ff ff47 	bl	800f350 <_Balloc>
 800f4c2:	b940      	cbnz	r0, 800f4d6 <__s2b+0x36>
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	4b19      	ldr	r3, [pc, #100]	@ (800f52c <__s2b+0x8c>)
 800f4c8:	4819      	ldr	r0, [pc, #100]	@ (800f530 <__s2b+0x90>)
 800f4ca:	21d3      	movs	r1, #211	@ 0xd3
 800f4cc:	f7fe fc8a 	bl	800dde4 <__assert_func>
 800f4d0:	0052      	lsls	r2, r2, #1
 800f4d2:	3101      	adds	r1, #1
 800f4d4:	e7f0      	b.n	800f4b8 <__s2b+0x18>
 800f4d6:	9b08      	ldr	r3, [sp, #32]
 800f4d8:	6143      	str	r3, [r0, #20]
 800f4da:	2d09      	cmp	r5, #9
 800f4dc:	f04f 0301 	mov.w	r3, #1
 800f4e0:	6103      	str	r3, [r0, #16]
 800f4e2:	dd16      	ble.n	800f512 <__s2b+0x72>
 800f4e4:	f104 0909 	add.w	r9, r4, #9
 800f4e8:	46c8      	mov	r8, r9
 800f4ea:	442c      	add	r4, r5
 800f4ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f4f0:	4601      	mov	r1, r0
 800f4f2:	3b30      	subs	r3, #48	@ 0x30
 800f4f4:	220a      	movs	r2, #10
 800f4f6:	4630      	mov	r0, r6
 800f4f8:	f7ff ff8c 	bl	800f414 <__multadd>
 800f4fc:	45a0      	cmp	r8, r4
 800f4fe:	d1f5      	bne.n	800f4ec <__s2b+0x4c>
 800f500:	f1a5 0408 	sub.w	r4, r5, #8
 800f504:	444c      	add	r4, r9
 800f506:	1b2d      	subs	r5, r5, r4
 800f508:	1963      	adds	r3, r4, r5
 800f50a:	42bb      	cmp	r3, r7
 800f50c:	db04      	blt.n	800f518 <__s2b+0x78>
 800f50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f512:	340a      	adds	r4, #10
 800f514:	2509      	movs	r5, #9
 800f516:	e7f6      	b.n	800f506 <__s2b+0x66>
 800f518:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f51c:	4601      	mov	r1, r0
 800f51e:	3b30      	subs	r3, #48	@ 0x30
 800f520:	220a      	movs	r2, #10
 800f522:	4630      	mov	r0, r6
 800f524:	f7ff ff76 	bl	800f414 <__multadd>
 800f528:	e7ee      	b.n	800f508 <__s2b+0x68>
 800f52a:	bf00      	nop
 800f52c:	08012704 	.word	0x08012704
 800f530:	08012775 	.word	0x08012775

0800f534 <__hi0bits>:
 800f534:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f538:	4603      	mov	r3, r0
 800f53a:	bf36      	itet	cc
 800f53c:	0403      	lslcc	r3, r0, #16
 800f53e:	2000      	movcs	r0, #0
 800f540:	2010      	movcc	r0, #16
 800f542:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f546:	bf3c      	itt	cc
 800f548:	021b      	lslcc	r3, r3, #8
 800f54a:	3008      	addcc	r0, #8
 800f54c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f550:	bf3c      	itt	cc
 800f552:	011b      	lslcc	r3, r3, #4
 800f554:	3004      	addcc	r0, #4
 800f556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f55a:	bf3c      	itt	cc
 800f55c:	009b      	lslcc	r3, r3, #2
 800f55e:	3002      	addcc	r0, #2
 800f560:	2b00      	cmp	r3, #0
 800f562:	db05      	blt.n	800f570 <__hi0bits+0x3c>
 800f564:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f568:	f100 0001 	add.w	r0, r0, #1
 800f56c:	bf08      	it	eq
 800f56e:	2020      	moveq	r0, #32
 800f570:	4770      	bx	lr

0800f572 <__lo0bits>:
 800f572:	6803      	ldr	r3, [r0, #0]
 800f574:	4602      	mov	r2, r0
 800f576:	f013 0007 	ands.w	r0, r3, #7
 800f57a:	d00b      	beq.n	800f594 <__lo0bits+0x22>
 800f57c:	07d9      	lsls	r1, r3, #31
 800f57e:	d421      	bmi.n	800f5c4 <__lo0bits+0x52>
 800f580:	0798      	lsls	r0, r3, #30
 800f582:	bf49      	itett	mi
 800f584:	085b      	lsrmi	r3, r3, #1
 800f586:	089b      	lsrpl	r3, r3, #2
 800f588:	2001      	movmi	r0, #1
 800f58a:	6013      	strmi	r3, [r2, #0]
 800f58c:	bf5c      	itt	pl
 800f58e:	6013      	strpl	r3, [r2, #0]
 800f590:	2002      	movpl	r0, #2
 800f592:	4770      	bx	lr
 800f594:	b299      	uxth	r1, r3
 800f596:	b909      	cbnz	r1, 800f59c <__lo0bits+0x2a>
 800f598:	0c1b      	lsrs	r3, r3, #16
 800f59a:	2010      	movs	r0, #16
 800f59c:	b2d9      	uxtb	r1, r3
 800f59e:	b909      	cbnz	r1, 800f5a4 <__lo0bits+0x32>
 800f5a0:	3008      	adds	r0, #8
 800f5a2:	0a1b      	lsrs	r3, r3, #8
 800f5a4:	0719      	lsls	r1, r3, #28
 800f5a6:	bf04      	itt	eq
 800f5a8:	091b      	lsreq	r3, r3, #4
 800f5aa:	3004      	addeq	r0, #4
 800f5ac:	0799      	lsls	r1, r3, #30
 800f5ae:	bf04      	itt	eq
 800f5b0:	089b      	lsreq	r3, r3, #2
 800f5b2:	3002      	addeq	r0, #2
 800f5b4:	07d9      	lsls	r1, r3, #31
 800f5b6:	d403      	bmi.n	800f5c0 <__lo0bits+0x4e>
 800f5b8:	085b      	lsrs	r3, r3, #1
 800f5ba:	f100 0001 	add.w	r0, r0, #1
 800f5be:	d003      	beq.n	800f5c8 <__lo0bits+0x56>
 800f5c0:	6013      	str	r3, [r2, #0]
 800f5c2:	4770      	bx	lr
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	4770      	bx	lr
 800f5c8:	2020      	movs	r0, #32
 800f5ca:	4770      	bx	lr

0800f5cc <__i2b>:
 800f5cc:	b510      	push	{r4, lr}
 800f5ce:	460c      	mov	r4, r1
 800f5d0:	2101      	movs	r1, #1
 800f5d2:	f7ff febd 	bl	800f350 <_Balloc>
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	b928      	cbnz	r0, 800f5e6 <__i2b+0x1a>
 800f5da:	4b05      	ldr	r3, [pc, #20]	@ (800f5f0 <__i2b+0x24>)
 800f5dc:	4805      	ldr	r0, [pc, #20]	@ (800f5f4 <__i2b+0x28>)
 800f5de:	f240 1145 	movw	r1, #325	@ 0x145
 800f5e2:	f7fe fbff 	bl	800dde4 <__assert_func>
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	6144      	str	r4, [r0, #20]
 800f5ea:	6103      	str	r3, [r0, #16]
 800f5ec:	bd10      	pop	{r4, pc}
 800f5ee:	bf00      	nop
 800f5f0:	08012704 	.word	0x08012704
 800f5f4:	08012775 	.word	0x08012775

0800f5f8 <__multiply>:
 800f5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5fc:	4614      	mov	r4, r2
 800f5fe:	690a      	ldr	r2, [r1, #16]
 800f600:	6923      	ldr	r3, [r4, #16]
 800f602:	429a      	cmp	r2, r3
 800f604:	bfa8      	it	ge
 800f606:	4623      	movge	r3, r4
 800f608:	460f      	mov	r7, r1
 800f60a:	bfa4      	itt	ge
 800f60c:	460c      	movge	r4, r1
 800f60e:	461f      	movge	r7, r3
 800f610:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f614:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f618:	68a3      	ldr	r3, [r4, #8]
 800f61a:	6861      	ldr	r1, [r4, #4]
 800f61c:	eb0a 0609 	add.w	r6, sl, r9
 800f620:	42b3      	cmp	r3, r6
 800f622:	b085      	sub	sp, #20
 800f624:	bfb8      	it	lt
 800f626:	3101      	addlt	r1, #1
 800f628:	f7ff fe92 	bl	800f350 <_Balloc>
 800f62c:	b930      	cbnz	r0, 800f63c <__multiply+0x44>
 800f62e:	4602      	mov	r2, r0
 800f630:	4b44      	ldr	r3, [pc, #272]	@ (800f744 <__multiply+0x14c>)
 800f632:	4845      	ldr	r0, [pc, #276]	@ (800f748 <__multiply+0x150>)
 800f634:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f638:	f7fe fbd4 	bl	800dde4 <__assert_func>
 800f63c:	f100 0514 	add.w	r5, r0, #20
 800f640:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f644:	462b      	mov	r3, r5
 800f646:	2200      	movs	r2, #0
 800f648:	4543      	cmp	r3, r8
 800f64a:	d321      	bcc.n	800f690 <__multiply+0x98>
 800f64c:	f107 0114 	add.w	r1, r7, #20
 800f650:	f104 0214 	add.w	r2, r4, #20
 800f654:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f658:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f65c:	9302      	str	r3, [sp, #8]
 800f65e:	1b13      	subs	r3, r2, r4
 800f660:	3b15      	subs	r3, #21
 800f662:	f023 0303 	bic.w	r3, r3, #3
 800f666:	3304      	adds	r3, #4
 800f668:	f104 0715 	add.w	r7, r4, #21
 800f66c:	42ba      	cmp	r2, r7
 800f66e:	bf38      	it	cc
 800f670:	2304      	movcc	r3, #4
 800f672:	9301      	str	r3, [sp, #4]
 800f674:	9b02      	ldr	r3, [sp, #8]
 800f676:	9103      	str	r1, [sp, #12]
 800f678:	428b      	cmp	r3, r1
 800f67a:	d80c      	bhi.n	800f696 <__multiply+0x9e>
 800f67c:	2e00      	cmp	r6, #0
 800f67e:	dd03      	ble.n	800f688 <__multiply+0x90>
 800f680:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f684:	2b00      	cmp	r3, #0
 800f686:	d05b      	beq.n	800f740 <__multiply+0x148>
 800f688:	6106      	str	r6, [r0, #16]
 800f68a:	b005      	add	sp, #20
 800f68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f690:	f843 2b04 	str.w	r2, [r3], #4
 800f694:	e7d8      	b.n	800f648 <__multiply+0x50>
 800f696:	f8b1 a000 	ldrh.w	sl, [r1]
 800f69a:	f1ba 0f00 	cmp.w	sl, #0
 800f69e:	d024      	beq.n	800f6ea <__multiply+0xf2>
 800f6a0:	f104 0e14 	add.w	lr, r4, #20
 800f6a4:	46a9      	mov	r9, r5
 800f6a6:	f04f 0c00 	mov.w	ip, #0
 800f6aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f6ae:	f8d9 3000 	ldr.w	r3, [r9]
 800f6b2:	fa1f fb87 	uxth.w	fp, r7
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f6bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f6c0:	f8d9 7000 	ldr.w	r7, [r9]
 800f6c4:	4463      	add	r3, ip
 800f6c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f6ca:	fb0a c70b 	mla	r7, sl, fp, ip
 800f6ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f6d8:	4572      	cmp	r2, lr
 800f6da:	f849 3b04 	str.w	r3, [r9], #4
 800f6de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f6e2:	d8e2      	bhi.n	800f6aa <__multiply+0xb2>
 800f6e4:	9b01      	ldr	r3, [sp, #4]
 800f6e6:	f845 c003 	str.w	ip, [r5, r3]
 800f6ea:	9b03      	ldr	r3, [sp, #12]
 800f6ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f6f0:	3104      	adds	r1, #4
 800f6f2:	f1b9 0f00 	cmp.w	r9, #0
 800f6f6:	d021      	beq.n	800f73c <__multiply+0x144>
 800f6f8:	682b      	ldr	r3, [r5, #0]
 800f6fa:	f104 0c14 	add.w	ip, r4, #20
 800f6fe:	46ae      	mov	lr, r5
 800f700:	f04f 0a00 	mov.w	sl, #0
 800f704:	f8bc b000 	ldrh.w	fp, [ip]
 800f708:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f70c:	fb09 770b 	mla	r7, r9, fp, r7
 800f710:	4457      	add	r7, sl
 800f712:	b29b      	uxth	r3, r3
 800f714:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f718:	f84e 3b04 	str.w	r3, [lr], #4
 800f71c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f720:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f724:	f8be 3000 	ldrh.w	r3, [lr]
 800f728:	fb09 330a 	mla	r3, r9, sl, r3
 800f72c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f730:	4562      	cmp	r2, ip
 800f732:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f736:	d8e5      	bhi.n	800f704 <__multiply+0x10c>
 800f738:	9f01      	ldr	r7, [sp, #4]
 800f73a:	51eb      	str	r3, [r5, r7]
 800f73c:	3504      	adds	r5, #4
 800f73e:	e799      	b.n	800f674 <__multiply+0x7c>
 800f740:	3e01      	subs	r6, #1
 800f742:	e79b      	b.n	800f67c <__multiply+0x84>
 800f744:	08012704 	.word	0x08012704
 800f748:	08012775 	.word	0x08012775

0800f74c <__pow5mult>:
 800f74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f750:	4615      	mov	r5, r2
 800f752:	f012 0203 	ands.w	r2, r2, #3
 800f756:	4607      	mov	r7, r0
 800f758:	460e      	mov	r6, r1
 800f75a:	d007      	beq.n	800f76c <__pow5mult+0x20>
 800f75c:	4c25      	ldr	r4, [pc, #148]	@ (800f7f4 <__pow5mult+0xa8>)
 800f75e:	3a01      	subs	r2, #1
 800f760:	2300      	movs	r3, #0
 800f762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f766:	f7ff fe55 	bl	800f414 <__multadd>
 800f76a:	4606      	mov	r6, r0
 800f76c:	10ad      	asrs	r5, r5, #2
 800f76e:	d03d      	beq.n	800f7ec <__pow5mult+0xa0>
 800f770:	69fc      	ldr	r4, [r7, #28]
 800f772:	b97c      	cbnz	r4, 800f794 <__pow5mult+0x48>
 800f774:	2010      	movs	r0, #16
 800f776:	f7ff fd23 	bl	800f1c0 <malloc>
 800f77a:	4602      	mov	r2, r0
 800f77c:	61f8      	str	r0, [r7, #28]
 800f77e:	b928      	cbnz	r0, 800f78c <__pow5mult+0x40>
 800f780:	4b1d      	ldr	r3, [pc, #116]	@ (800f7f8 <__pow5mult+0xac>)
 800f782:	481e      	ldr	r0, [pc, #120]	@ (800f7fc <__pow5mult+0xb0>)
 800f784:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f788:	f7fe fb2c 	bl	800dde4 <__assert_func>
 800f78c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f790:	6004      	str	r4, [r0, #0]
 800f792:	60c4      	str	r4, [r0, #12]
 800f794:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f79c:	b94c      	cbnz	r4, 800f7b2 <__pow5mult+0x66>
 800f79e:	f240 2171 	movw	r1, #625	@ 0x271
 800f7a2:	4638      	mov	r0, r7
 800f7a4:	f7ff ff12 	bl	800f5cc <__i2b>
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800f7ae:	4604      	mov	r4, r0
 800f7b0:	6003      	str	r3, [r0, #0]
 800f7b2:	f04f 0900 	mov.w	r9, #0
 800f7b6:	07eb      	lsls	r3, r5, #31
 800f7b8:	d50a      	bpl.n	800f7d0 <__pow5mult+0x84>
 800f7ba:	4631      	mov	r1, r6
 800f7bc:	4622      	mov	r2, r4
 800f7be:	4638      	mov	r0, r7
 800f7c0:	f7ff ff1a 	bl	800f5f8 <__multiply>
 800f7c4:	4631      	mov	r1, r6
 800f7c6:	4680      	mov	r8, r0
 800f7c8:	4638      	mov	r0, r7
 800f7ca:	f7ff fe01 	bl	800f3d0 <_Bfree>
 800f7ce:	4646      	mov	r6, r8
 800f7d0:	106d      	asrs	r5, r5, #1
 800f7d2:	d00b      	beq.n	800f7ec <__pow5mult+0xa0>
 800f7d4:	6820      	ldr	r0, [r4, #0]
 800f7d6:	b938      	cbnz	r0, 800f7e8 <__pow5mult+0x9c>
 800f7d8:	4622      	mov	r2, r4
 800f7da:	4621      	mov	r1, r4
 800f7dc:	4638      	mov	r0, r7
 800f7de:	f7ff ff0b 	bl	800f5f8 <__multiply>
 800f7e2:	6020      	str	r0, [r4, #0]
 800f7e4:	f8c0 9000 	str.w	r9, [r0]
 800f7e8:	4604      	mov	r4, r0
 800f7ea:	e7e4      	b.n	800f7b6 <__pow5mult+0x6a>
 800f7ec:	4630      	mov	r0, r6
 800f7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7f2:	bf00      	nop
 800f7f4:	080127d0 	.word	0x080127d0
 800f7f8:	080125ea 	.word	0x080125ea
 800f7fc:	08012775 	.word	0x08012775

0800f800 <__lshift>:
 800f800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f804:	460c      	mov	r4, r1
 800f806:	6849      	ldr	r1, [r1, #4]
 800f808:	6923      	ldr	r3, [r4, #16]
 800f80a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f80e:	68a3      	ldr	r3, [r4, #8]
 800f810:	4607      	mov	r7, r0
 800f812:	4691      	mov	r9, r2
 800f814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f818:	f108 0601 	add.w	r6, r8, #1
 800f81c:	42b3      	cmp	r3, r6
 800f81e:	db0b      	blt.n	800f838 <__lshift+0x38>
 800f820:	4638      	mov	r0, r7
 800f822:	f7ff fd95 	bl	800f350 <_Balloc>
 800f826:	4605      	mov	r5, r0
 800f828:	b948      	cbnz	r0, 800f83e <__lshift+0x3e>
 800f82a:	4602      	mov	r2, r0
 800f82c:	4b28      	ldr	r3, [pc, #160]	@ (800f8d0 <__lshift+0xd0>)
 800f82e:	4829      	ldr	r0, [pc, #164]	@ (800f8d4 <__lshift+0xd4>)
 800f830:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f834:	f7fe fad6 	bl	800dde4 <__assert_func>
 800f838:	3101      	adds	r1, #1
 800f83a:	005b      	lsls	r3, r3, #1
 800f83c:	e7ee      	b.n	800f81c <__lshift+0x1c>
 800f83e:	2300      	movs	r3, #0
 800f840:	f100 0114 	add.w	r1, r0, #20
 800f844:	f100 0210 	add.w	r2, r0, #16
 800f848:	4618      	mov	r0, r3
 800f84a:	4553      	cmp	r3, sl
 800f84c:	db33      	blt.n	800f8b6 <__lshift+0xb6>
 800f84e:	6920      	ldr	r0, [r4, #16]
 800f850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f854:	f104 0314 	add.w	r3, r4, #20
 800f858:	f019 091f 	ands.w	r9, r9, #31
 800f85c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f860:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f864:	d02b      	beq.n	800f8be <__lshift+0xbe>
 800f866:	f1c9 0e20 	rsb	lr, r9, #32
 800f86a:	468a      	mov	sl, r1
 800f86c:	2200      	movs	r2, #0
 800f86e:	6818      	ldr	r0, [r3, #0]
 800f870:	fa00 f009 	lsl.w	r0, r0, r9
 800f874:	4310      	orrs	r0, r2
 800f876:	f84a 0b04 	str.w	r0, [sl], #4
 800f87a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f87e:	459c      	cmp	ip, r3
 800f880:	fa22 f20e 	lsr.w	r2, r2, lr
 800f884:	d8f3      	bhi.n	800f86e <__lshift+0x6e>
 800f886:	ebac 0304 	sub.w	r3, ip, r4
 800f88a:	3b15      	subs	r3, #21
 800f88c:	f023 0303 	bic.w	r3, r3, #3
 800f890:	3304      	adds	r3, #4
 800f892:	f104 0015 	add.w	r0, r4, #21
 800f896:	4584      	cmp	ip, r0
 800f898:	bf38      	it	cc
 800f89a:	2304      	movcc	r3, #4
 800f89c:	50ca      	str	r2, [r1, r3]
 800f89e:	b10a      	cbz	r2, 800f8a4 <__lshift+0xa4>
 800f8a0:	f108 0602 	add.w	r6, r8, #2
 800f8a4:	3e01      	subs	r6, #1
 800f8a6:	4638      	mov	r0, r7
 800f8a8:	612e      	str	r6, [r5, #16]
 800f8aa:	4621      	mov	r1, r4
 800f8ac:	f7ff fd90 	bl	800f3d0 <_Bfree>
 800f8b0:	4628      	mov	r0, r5
 800f8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	e7c5      	b.n	800f84a <__lshift+0x4a>
 800f8be:	3904      	subs	r1, #4
 800f8c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f8c8:	459c      	cmp	ip, r3
 800f8ca:	d8f9      	bhi.n	800f8c0 <__lshift+0xc0>
 800f8cc:	e7ea      	b.n	800f8a4 <__lshift+0xa4>
 800f8ce:	bf00      	nop
 800f8d0:	08012704 	.word	0x08012704
 800f8d4:	08012775 	.word	0x08012775

0800f8d8 <__mcmp>:
 800f8d8:	690a      	ldr	r2, [r1, #16]
 800f8da:	4603      	mov	r3, r0
 800f8dc:	6900      	ldr	r0, [r0, #16]
 800f8de:	1a80      	subs	r0, r0, r2
 800f8e0:	b530      	push	{r4, r5, lr}
 800f8e2:	d10e      	bne.n	800f902 <__mcmp+0x2a>
 800f8e4:	3314      	adds	r3, #20
 800f8e6:	3114      	adds	r1, #20
 800f8e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f8ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f8f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f8f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f8f8:	4295      	cmp	r5, r2
 800f8fa:	d003      	beq.n	800f904 <__mcmp+0x2c>
 800f8fc:	d205      	bcs.n	800f90a <__mcmp+0x32>
 800f8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f902:	bd30      	pop	{r4, r5, pc}
 800f904:	42a3      	cmp	r3, r4
 800f906:	d3f3      	bcc.n	800f8f0 <__mcmp+0x18>
 800f908:	e7fb      	b.n	800f902 <__mcmp+0x2a>
 800f90a:	2001      	movs	r0, #1
 800f90c:	e7f9      	b.n	800f902 <__mcmp+0x2a>
	...

0800f910 <__mdiff>:
 800f910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f914:	4689      	mov	r9, r1
 800f916:	4606      	mov	r6, r0
 800f918:	4611      	mov	r1, r2
 800f91a:	4648      	mov	r0, r9
 800f91c:	4614      	mov	r4, r2
 800f91e:	f7ff ffdb 	bl	800f8d8 <__mcmp>
 800f922:	1e05      	subs	r5, r0, #0
 800f924:	d112      	bne.n	800f94c <__mdiff+0x3c>
 800f926:	4629      	mov	r1, r5
 800f928:	4630      	mov	r0, r6
 800f92a:	f7ff fd11 	bl	800f350 <_Balloc>
 800f92e:	4602      	mov	r2, r0
 800f930:	b928      	cbnz	r0, 800f93e <__mdiff+0x2e>
 800f932:	4b3f      	ldr	r3, [pc, #252]	@ (800fa30 <__mdiff+0x120>)
 800f934:	f240 2137 	movw	r1, #567	@ 0x237
 800f938:	483e      	ldr	r0, [pc, #248]	@ (800fa34 <__mdiff+0x124>)
 800f93a:	f7fe fa53 	bl	800dde4 <__assert_func>
 800f93e:	2301      	movs	r3, #1
 800f940:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f944:	4610      	mov	r0, r2
 800f946:	b003      	add	sp, #12
 800f948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f94c:	bfbc      	itt	lt
 800f94e:	464b      	movlt	r3, r9
 800f950:	46a1      	movlt	r9, r4
 800f952:	4630      	mov	r0, r6
 800f954:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f958:	bfba      	itte	lt
 800f95a:	461c      	movlt	r4, r3
 800f95c:	2501      	movlt	r5, #1
 800f95e:	2500      	movge	r5, #0
 800f960:	f7ff fcf6 	bl	800f350 <_Balloc>
 800f964:	4602      	mov	r2, r0
 800f966:	b918      	cbnz	r0, 800f970 <__mdiff+0x60>
 800f968:	4b31      	ldr	r3, [pc, #196]	@ (800fa30 <__mdiff+0x120>)
 800f96a:	f240 2145 	movw	r1, #581	@ 0x245
 800f96e:	e7e3      	b.n	800f938 <__mdiff+0x28>
 800f970:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f974:	6926      	ldr	r6, [r4, #16]
 800f976:	60c5      	str	r5, [r0, #12]
 800f978:	f109 0310 	add.w	r3, r9, #16
 800f97c:	f109 0514 	add.w	r5, r9, #20
 800f980:	f104 0e14 	add.w	lr, r4, #20
 800f984:	f100 0b14 	add.w	fp, r0, #20
 800f988:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f98c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f990:	9301      	str	r3, [sp, #4]
 800f992:	46d9      	mov	r9, fp
 800f994:	f04f 0c00 	mov.w	ip, #0
 800f998:	9b01      	ldr	r3, [sp, #4]
 800f99a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f99e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f9a2:	9301      	str	r3, [sp, #4]
 800f9a4:	fa1f f38a 	uxth.w	r3, sl
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	b283      	uxth	r3, r0
 800f9ac:	1acb      	subs	r3, r1, r3
 800f9ae:	0c00      	lsrs	r0, r0, #16
 800f9b0:	4463      	add	r3, ip
 800f9b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f9b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f9ba:	b29b      	uxth	r3, r3
 800f9bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f9c0:	4576      	cmp	r6, lr
 800f9c2:	f849 3b04 	str.w	r3, [r9], #4
 800f9c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f9ca:	d8e5      	bhi.n	800f998 <__mdiff+0x88>
 800f9cc:	1b33      	subs	r3, r6, r4
 800f9ce:	3b15      	subs	r3, #21
 800f9d0:	f023 0303 	bic.w	r3, r3, #3
 800f9d4:	3415      	adds	r4, #21
 800f9d6:	3304      	adds	r3, #4
 800f9d8:	42a6      	cmp	r6, r4
 800f9da:	bf38      	it	cc
 800f9dc:	2304      	movcc	r3, #4
 800f9de:	441d      	add	r5, r3
 800f9e0:	445b      	add	r3, fp
 800f9e2:	461e      	mov	r6, r3
 800f9e4:	462c      	mov	r4, r5
 800f9e6:	4544      	cmp	r4, r8
 800f9e8:	d30e      	bcc.n	800fa08 <__mdiff+0xf8>
 800f9ea:	f108 0103 	add.w	r1, r8, #3
 800f9ee:	1b49      	subs	r1, r1, r5
 800f9f0:	f021 0103 	bic.w	r1, r1, #3
 800f9f4:	3d03      	subs	r5, #3
 800f9f6:	45a8      	cmp	r8, r5
 800f9f8:	bf38      	it	cc
 800f9fa:	2100      	movcc	r1, #0
 800f9fc:	440b      	add	r3, r1
 800f9fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fa02:	b191      	cbz	r1, 800fa2a <__mdiff+0x11a>
 800fa04:	6117      	str	r7, [r2, #16]
 800fa06:	e79d      	b.n	800f944 <__mdiff+0x34>
 800fa08:	f854 1b04 	ldr.w	r1, [r4], #4
 800fa0c:	46e6      	mov	lr, ip
 800fa0e:	0c08      	lsrs	r0, r1, #16
 800fa10:	fa1c fc81 	uxtah	ip, ip, r1
 800fa14:	4471      	add	r1, lr
 800fa16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fa1a:	b289      	uxth	r1, r1
 800fa1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fa20:	f846 1b04 	str.w	r1, [r6], #4
 800fa24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fa28:	e7dd      	b.n	800f9e6 <__mdiff+0xd6>
 800fa2a:	3f01      	subs	r7, #1
 800fa2c:	e7e7      	b.n	800f9fe <__mdiff+0xee>
 800fa2e:	bf00      	nop
 800fa30:	08012704 	.word	0x08012704
 800fa34:	08012775 	.word	0x08012775

0800fa38 <__ulp>:
 800fa38:	b082      	sub	sp, #8
 800fa3a:	ed8d 0b00 	vstr	d0, [sp]
 800fa3e:	9a01      	ldr	r2, [sp, #4]
 800fa40:	4b0f      	ldr	r3, [pc, #60]	@ (800fa80 <__ulp+0x48>)
 800fa42:	4013      	ands	r3, r2
 800fa44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	dc08      	bgt.n	800fa5e <__ulp+0x26>
 800fa4c:	425b      	negs	r3, r3
 800fa4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fa52:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fa56:	da04      	bge.n	800fa62 <__ulp+0x2a>
 800fa58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fa5c:	4113      	asrs	r3, r2
 800fa5e:	2200      	movs	r2, #0
 800fa60:	e008      	b.n	800fa74 <__ulp+0x3c>
 800fa62:	f1a2 0314 	sub.w	r3, r2, #20
 800fa66:	2b1e      	cmp	r3, #30
 800fa68:	bfda      	itte	le
 800fa6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fa6e:	40da      	lsrle	r2, r3
 800fa70:	2201      	movgt	r2, #1
 800fa72:	2300      	movs	r3, #0
 800fa74:	4619      	mov	r1, r3
 800fa76:	4610      	mov	r0, r2
 800fa78:	ec41 0b10 	vmov	d0, r0, r1
 800fa7c:	b002      	add	sp, #8
 800fa7e:	4770      	bx	lr
 800fa80:	7ff00000 	.word	0x7ff00000

0800fa84 <__b2d>:
 800fa84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa88:	6906      	ldr	r6, [r0, #16]
 800fa8a:	f100 0814 	add.w	r8, r0, #20
 800fa8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fa92:	1f37      	subs	r7, r6, #4
 800fa94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fa98:	4610      	mov	r0, r2
 800fa9a:	f7ff fd4b 	bl	800f534 <__hi0bits>
 800fa9e:	f1c0 0320 	rsb	r3, r0, #32
 800faa2:	280a      	cmp	r0, #10
 800faa4:	600b      	str	r3, [r1, #0]
 800faa6:	491b      	ldr	r1, [pc, #108]	@ (800fb14 <__b2d+0x90>)
 800faa8:	dc15      	bgt.n	800fad6 <__b2d+0x52>
 800faaa:	f1c0 0c0b 	rsb	ip, r0, #11
 800faae:	fa22 f30c 	lsr.w	r3, r2, ip
 800fab2:	45b8      	cmp	r8, r7
 800fab4:	ea43 0501 	orr.w	r5, r3, r1
 800fab8:	bf34      	ite	cc
 800faba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fabe:	2300      	movcs	r3, #0
 800fac0:	3015      	adds	r0, #21
 800fac2:	fa02 f000 	lsl.w	r0, r2, r0
 800fac6:	fa23 f30c 	lsr.w	r3, r3, ip
 800faca:	4303      	orrs	r3, r0
 800facc:	461c      	mov	r4, r3
 800face:	ec45 4b10 	vmov	d0, r4, r5
 800fad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fad6:	45b8      	cmp	r8, r7
 800fad8:	bf3a      	itte	cc
 800fada:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fade:	f1a6 0708 	subcc.w	r7, r6, #8
 800fae2:	2300      	movcs	r3, #0
 800fae4:	380b      	subs	r0, #11
 800fae6:	d012      	beq.n	800fb0e <__b2d+0x8a>
 800fae8:	f1c0 0120 	rsb	r1, r0, #32
 800faec:	fa23 f401 	lsr.w	r4, r3, r1
 800faf0:	4082      	lsls	r2, r0
 800faf2:	4322      	orrs	r2, r4
 800faf4:	4547      	cmp	r7, r8
 800faf6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fafa:	bf8c      	ite	hi
 800fafc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fb00:	2200      	movls	r2, #0
 800fb02:	4083      	lsls	r3, r0
 800fb04:	40ca      	lsrs	r2, r1
 800fb06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fb0a:	4313      	orrs	r3, r2
 800fb0c:	e7de      	b.n	800facc <__b2d+0x48>
 800fb0e:	ea42 0501 	orr.w	r5, r2, r1
 800fb12:	e7db      	b.n	800facc <__b2d+0x48>
 800fb14:	3ff00000 	.word	0x3ff00000

0800fb18 <__d2b>:
 800fb18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fb1c:	460f      	mov	r7, r1
 800fb1e:	2101      	movs	r1, #1
 800fb20:	ec59 8b10 	vmov	r8, r9, d0
 800fb24:	4616      	mov	r6, r2
 800fb26:	f7ff fc13 	bl	800f350 <_Balloc>
 800fb2a:	4604      	mov	r4, r0
 800fb2c:	b930      	cbnz	r0, 800fb3c <__d2b+0x24>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	4b23      	ldr	r3, [pc, #140]	@ (800fbc0 <__d2b+0xa8>)
 800fb32:	4824      	ldr	r0, [pc, #144]	@ (800fbc4 <__d2b+0xac>)
 800fb34:	f240 310f 	movw	r1, #783	@ 0x30f
 800fb38:	f7fe f954 	bl	800dde4 <__assert_func>
 800fb3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fb40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb44:	b10d      	cbz	r5, 800fb4a <__d2b+0x32>
 800fb46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb4a:	9301      	str	r3, [sp, #4]
 800fb4c:	f1b8 0300 	subs.w	r3, r8, #0
 800fb50:	d023      	beq.n	800fb9a <__d2b+0x82>
 800fb52:	4668      	mov	r0, sp
 800fb54:	9300      	str	r3, [sp, #0]
 800fb56:	f7ff fd0c 	bl	800f572 <__lo0bits>
 800fb5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fb5e:	b1d0      	cbz	r0, 800fb96 <__d2b+0x7e>
 800fb60:	f1c0 0320 	rsb	r3, r0, #32
 800fb64:	fa02 f303 	lsl.w	r3, r2, r3
 800fb68:	430b      	orrs	r3, r1
 800fb6a:	40c2      	lsrs	r2, r0
 800fb6c:	6163      	str	r3, [r4, #20]
 800fb6e:	9201      	str	r2, [sp, #4]
 800fb70:	9b01      	ldr	r3, [sp, #4]
 800fb72:	61a3      	str	r3, [r4, #24]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	bf0c      	ite	eq
 800fb78:	2201      	moveq	r2, #1
 800fb7a:	2202      	movne	r2, #2
 800fb7c:	6122      	str	r2, [r4, #16]
 800fb7e:	b1a5      	cbz	r5, 800fbaa <__d2b+0x92>
 800fb80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fb84:	4405      	add	r5, r0
 800fb86:	603d      	str	r5, [r7, #0]
 800fb88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fb8c:	6030      	str	r0, [r6, #0]
 800fb8e:	4620      	mov	r0, r4
 800fb90:	b003      	add	sp, #12
 800fb92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb96:	6161      	str	r1, [r4, #20]
 800fb98:	e7ea      	b.n	800fb70 <__d2b+0x58>
 800fb9a:	a801      	add	r0, sp, #4
 800fb9c:	f7ff fce9 	bl	800f572 <__lo0bits>
 800fba0:	9b01      	ldr	r3, [sp, #4]
 800fba2:	6163      	str	r3, [r4, #20]
 800fba4:	3020      	adds	r0, #32
 800fba6:	2201      	movs	r2, #1
 800fba8:	e7e8      	b.n	800fb7c <__d2b+0x64>
 800fbaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fbae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fbb2:	6038      	str	r0, [r7, #0]
 800fbb4:	6918      	ldr	r0, [r3, #16]
 800fbb6:	f7ff fcbd 	bl	800f534 <__hi0bits>
 800fbba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fbbe:	e7e5      	b.n	800fb8c <__d2b+0x74>
 800fbc0:	08012704 	.word	0x08012704
 800fbc4:	08012775 	.word	0x08012775

0800fbc8 <__ratio>:
 800fbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbcc:	b085      	sub	sp, #20
 800fbce:	e9cd 1000 	strd	r1, r0, [sp]
 800fbd2:	a902      	add	r1, sp, #8
 800fbd4:	f7ff ff56 	bl	800fa84 <__b2d>
 800fbd8:	9800      	ldr	r0, [sp, #0]
 800fbda:	a903      	add	r1, sp, #12
 800fbdc:	ec55 4b10 	vmov	r4, r5, d0
 800fbe0:	f7ff ff50 	bl	800fa84 <__b2d>
 800fbe4:	9b01      	ldr	r3, [sp, #4]
 800fbe6:	6919      	ldr	r1, [r3, #16]
 800fbe8:	9b00      	ldr	r3, [sp, #0]
 800fbea:	691b      	ldr	r3, [r3, #16]
 800fbec:	1ac9      	subs	r1, r1, r3
 800fbee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fbf2:	1a9b      	subs	r3, r3, r2
 800fbf4:	ec5b ab10 	vmov	sl, fp, d0
 800fbf8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	bfce      	itee	gt
 800fc00:	462a      	movgt	r2, r5
 800fc02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fc06:	465a      	movle	r2, fp
 800fc08:	462f      	mov	r7, r5
 800fc0a:	46d9      	mov	r9, fp
 800fc0c:	bfcc      	ite	gt
 800fc0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fc12:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fc16:	464b      	mov	r3, r9
 800fc18:	4652      	mov	r2, sl
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	4639      	mov	r1, r7
 800fc1e:	f7f0 fe15 	bl	800084c <__aeabi_ddiv>
 800fc22:	ec41 0b10 	vmov	d0, r0, r1
 800fc26:	b005      	add	sp, #20
 800fc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fc2c <__copybits>:
 800fc2c:	3901      	subs	r1, #1
 800fc2e:	b570      	push	{r4, r5, r6, lr}
 800fc30:	1149      	asrs	r1, r1, #5
 800fc32:	6914      	ldr	r4, [r2, #16]
 800fc34:	3101      	adds	r1, #1
 800fc36:	f102 0314 	add.w	r3, r2, #20
 800fc3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fc3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fc42:	1f05      	subs	r5, r0, #4
 800fc44:	42a3      	cmp	r3, r4
 800fc46:	d30c      	bcc.n	800fc62 <__copybits+0x36>
 800fc48:	1aa3      	subs	r3, r4, r2
 800fc4a:	3b11      	subs	r3, #17
 800fc4c:	f023 0303 	bic.w	r3, r3, #3
 800fc50:	3211      	adds	r2, #17
 800fc52:	42a2      	cmp	r2, r4
 800fc54:	bf88      	it	hi
 800fc56:	2300      	movhi	r3, #0
 800fc58:	4418      	add	r0, r3
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	4288      	cmp	r0, r1
 800fc5e:	d305      	bcc.n	800fc6c <__copybits+0x40>
 800fc60:	bd70      	pop	{r4, r5, r6, pc}
 800fc62:	f853 6b04 	ldr.w	r6, [r3], #4
 800fc66:	f845 6f04 	str.w	r6, [r5, #4]!
 800fc6a:	e7eb      	b.n	800fc44 <__copybits+0x18>
 800fc6c:	f840 3b04 	str.w	r3, [r0], #4
 800fc70:	e7f4      	b.n	800fc5c <__copybits+0x30>

0800fc72 <__any_on>:
 800fc72:	f100 0214 	add.w	r2, r0, #20
 800fc76:	6900      	ldr	r0, [r0, #16]
 800fc78:	114b      	asrs	r3, r1, #5
 800fc7a:	4298      	cmp	r0, r3
 800fc7c:	b510      	push	{r4, lr}
 800fc7e:	db11      	blt.n	800fca4 <__any_on+0x32>
 800fc80:	dd0a      	ble.n	800fc98 <__any_on+0x26>
 800fc82:	f011 011f 	ands.w	r1, r1, #31
 800fc86:	d007      	beq.n	800fc98 <__any_on+0x26>
 800fc88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fc8c:	fa24 f001 	lsr.w	r0, r4, r1
 800fc90:	fa00 f101 	lsl.w	r1, r0, r1
 800fc94:	428c      	cmp	r4, r1
 800fc96:	d10b      	bne.n	800fcb0 <__any_on+0x3e>
 800fc98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d803      	bhi.n	800fca8 <__any_on+0x36>
 800fca0:	2000      	movs	r0, #0
 800fca2:	bd10      	pop	{r4, pc}
 800fca4:	4603      	mov	r3, r0
 800fca6:	e7f7      	b.n	800fc98 <__any_on+0x26>
 800fca8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fcac:	2900      	cmp	r1, #0
 800fcae:	d0f5      	beq.n	800fc9c <__any_on+0x2a>
 800fcb0:	2001      	movs	r0, #1
 800fcb2:	e7f6      	b.n	800fca2 <__any_on+0x30>

0800fcb4 <__ascii_wctomb>:
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	4608      	mov	r0, r1
 800fcb8:	b141      	cbz	r1, 800fccc <__ascii_wctomb+0x18>
 800fcba:	2aff      	cmp	r2, #255	@ 0xff
 800fcbc:	d904      	bls.n	800fcc8 <__ascii_wctomb+0x14>
 800fcbe:	228a      	movs	r2, #138	@ 0x8a
 800fcc0:	601a      	str	r2, [r3, #0]
 800fcc2:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc6:	4770      	bx	lr
 800fcc8:	700a      	strb	r2, [r1, #0]
 800fcca:	2001      	movs	r0, #1
 800fccc:	4770      	bx	lr

0800fcce <__ssputs_r>:
 800fcce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcd2:	688e      	ldr	r6, [r1, #8]
 800fcd4:	461f      	mov	r7, r3
 800fcd6:	42be      	cmp	r6, r7
 800fcd8:	680b      	ldr	r3, [r1, #0]
 800fcda:	4682      	mov	sl, r0
 800fcdc:	460c      	mov	r4, r1
 800fcde:	4690      	mov	r8, r2
 800fce0:	d82d      	bhi.n	800fd3e <__ssputs_r+0x70>
 800fce2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fce6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fcea:	d026      	beq.n	800fd3a <__ssputs_r+0x6c>
 800fcec:	6965      	ldr	r5, [r4, #20]
 800fcee:	6909      	ldr	r1, [r1, #16]
 800fcf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fcf4:	eba3 0901 	sub.w	r9, r3, r1
 800fcf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fcfc:	1c7b      	adds	r3, r7, #1
 800fcfe:	444b      	add	r3, r9
 800fd00:	106d      	asrs	r5, r5, #1
 800fd02:	429d      	cmp	r5, r3
 800fd04:	bf38      	it	cc
 800fd06:	461d      	movcc	r5, r3
 800fd08:	0553      	lsls	r3, r2, #21
 800fd0a:	d527      	bpl.n	800fd5c <__ssputs_r+0x8e>
 800fd0c:	4629      	mov	r1, r5
 800fd0e:	f7ff fa81 	bl	800f214 <_malloc_r>
 800fd12:	4606      	mov	r6, r0
 800fd14:	b360      	cbz	r0, 800fd70 <__ssputs_r+0xa2>
 800fd16:	6921      	ldr	r1, [r4, #16]
 800fd18:	464a      	mov	r2, r9
 800fd1a:	f7fe f844 	bl	800dda6 <memcpy>
 800fd1e:	89a3      	ldrh	r3, [r4, #12]
 800fd20:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fd24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd28:	81a3      	strh	r3, [r4, #12]
 800fd2a:	6126      	str	r6, [r4, #16]
 800fd2c:	6165      	str	r5, [r4, #20]
 800fd2e:	444e      	add	r6, r9
 800fd30:	eba5 0509 	sub.w	r5, r5, r9
 800fd34:	6026      	str	r6, [r4, #0]
 800fd36:	60a5      	str	r5, [r4, #8]
 800fd38:	463e      	mov	r6, r7
 800fd3a:	42be      	cmp	r6, r7
 800fd3c:	d900      	bls.n	800fd40 <__ssputs_r+0x72>
 800fd3e:	463e      	mov	r6, r7
 800fd40:	6820      	ldr	r0, [r4, #0]
 800fd42:	4632      	mov	r2, r6
 800fd44:	4641      	mov	r1, r8
 800fd46:	f000 f9d7 	bl	80100f8 <memmove>
 800fd4a:	68a3      	ldr	r3, [r4, #8]
 800fd4c:	1b9b      	subs	r3, r3, r6
 800fd4e:	60a3      	str	r3, [r4, #8]
 800fd50:	6823      	ldr	r3, [r4, #0]
 800fd52:	4433      	add	r3, r6
 800fd54:	6023      	str	r3, [r4, #0]
 800fd56:	2000      	movs	r0, #0
 800fd58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd5c:	462a      	mov	r2, r5
 800fd5e:	f000 fa10 	bl	8010182 <_realloc_r>
 800fd62:	4606      	mov	r6, r0
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d1e0      	bne.n	800fd2a <__ssputs_r+0x5c>
 800fd68:	6921      	ldr	r1, [r4, #16]
 800fd6a:	4650      	mov	r0, sl
 800fd6c:	f7fe fea4 	bl	800eab8 <_free_r>
 800fd70:	230c      	movs	r3, #12
 800fd72:	f8ca 3000 	str.w	r3, [sl]
 800fd76:	89a3      	ldrh	r3, [r4, #12]
 800fd78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd7c:	81a3      	strh	r3, [r4, #12]
 800fd7e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd82:	e7e9      	b.n	800fd58 <__ssputs_r+0x8a>

0800fd84 <_svfiprintf_r>:
 800fd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd88:	4698      	mov	r8, r3
 800fd8a:	898b      	ldrh	r3, [r1, #12]
 800fd8c:	061b      	lsls	r3, r3, #24
 800fd8e:	b09d      	sub	sp, #116	@ 0x74
 800fd90:	4607      	mov	r7, r0
 800fd92:	460d      	mov	r5, r1
 800fd94:	4614      	mov	r4, r2
 800fd96:	d510      	bpl.n	800fdba <_svfiprintf_r+0x36>
 800fd98:	690b      	ldr	r3, [r1, #16]
 800fd9a:	b973      	cbnz	r3, 800fdba <_svfiprintf_r+0x36>
 800fd9c:	2140      	movs	r1, #64	@ 0x40
 800fd9e:	f7ff fa39 	bl	800f214 <_malloc_r>
 800fda2:	6028      	str	r0, [r5, #0]
 800fda4:	6128      	str	r0, [r5, #16]
 800fda6:	b930      	cbnz	r0, 800fdb6 <_svfiprintf_r+0x32>
 800fda8:	230c      	movs	r3, #12
 800fdaa:	603b      	str	r3, [r7, #0]
 800fdac:	f04f 30ff 	mov.w	r0, #4294967295
 800fdb0:	b01d      	add	sp, #116	@ 0x74
 800fdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdb6:	2340      	movs	r3, #64	@ 0x40
 800fdb8:	616b      	str	r3, [r5, #20]
 800fdba:	2300      	movs	r3, #0
 800fdbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdbe:	2320      	movs	r3, #32
 800fdc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fdc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdc8:	2330      	movs	r3, #48	@ 0x30
 800fdca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ff68 <_svfiprintf_r+0x1e4>
 800fdce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fdd2:	f04f 0901 	mov.w	r9, #1
 800fdd6:	4623      	mov	r3, r4
 800fdd8:	469a      	mov	sl, r3
 800fdda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdde:	b10a      	cbz	r2, 800fde4 <_svfiprintf_r+0x60>
 800fde0:	2a25      	cmp	r2, #37	@ 0x25
 800fde2:	d1f9      	bne.n	800fdd8 <_svfiprintf_r+0x54>
 800fde4:	ebba 0b04 	subs.w	fp, sl, r4
 800fde8:	d00b      	beq.n	800fe02 <_svfiprintf_r+0x7e>
 800fdea:	465b      	mov	r3, fp
 800fdec:	4622      	mov	r2, r4
 800fdee:	4629      	mov	r1, r5
 800fdf0:	4638      	mov	r0, r7
 800fdf2:	f7ff ff6c 	bl	800fcce <__ssputs_r>
 800fdf6:	3001      	adds	r0, #1
 800fdf8:	f000 80a7 	beq.w	800ff4a <_svfiprintf_r+0x1c6>
 800fdfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fdfe:	445a      	add	r2, fp
 800fe00:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe02:	f89a 3000 	ldrb.w	r3, [sl]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	f000 809f 	beq.w	800ff4a <_svfiprintf_r+0x1c6>
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe16:	f10a 0a01 	add.w	sl, sl, #1
 800fe1a:	9304      	str	r3, [sp, #16]
 800fe1c:	9307      	str	r3, [sp, #28]
 800fe1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fe22:	931a      	str	r3, [sp, #104]	@ 0x68
 800fe24:	4654      	mov	r4, sl
 800fe26:	2205      	movs	r2, #5
 800fe28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe2c:	484e      	ldr	r0, [pc, #312]	@ (800ff68 <_svfiprintf_r+0x1e4>)
 800fe2e:	f7f0 f9cf 	bl	80001d0 <memchr>
 800fe32:	9a04      	ldr	r2, [sp, #16]
 800fe34:	b9d8      	cbnz	r0, 800fe6e <_svfiprintf_r+0xea>
 800fe36:	06d0      	lsls	r0, r2, #27
 800fe38:	bf44      	itt	mi
 800fe3a:	2320      	movmi	r3, #32
 800fe3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe40:	0711      	lsls	r1, r2, #28
 800fe42:	bf44      	itt	mi
 800fe44:	232b      	movmi	r3, #43	@ 0x2b
 800fe46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe4a:	f89a 3000 	ldrb.w	r3, [sl]
 800fe4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe50:	d015      	beq.n	800fe7e <_svfiprintf_r+0xfa>
 800fe52:	9a07      	ldr	r2, [sp, #28]
 800fe54:	4654      	mov	r4, sl
 800fe56:	2000      	movs	r0, #0
 800fe58:	f04f 0c0a 	mov.w	ip, #10
 800fe5c:	4621      	mov	r1, r4
 800fe5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe62:	3b30      	subs	r3, #48	@ 0x30
 800fe64:	2b09      	cmp	r3, #9
 800fe66:	d94b      	bls.n	800ff00 <_svfiprintf_r+0x17c>
 800fe68:	b1b0      	cbz	r0, 800fe98 <_svfiprintf_r+0x114>
 800fe6a:	9207      	str	r2, [sp, #28]
 800fe6c:	e014      	b.n	800fe98 <_svfiprintf_r+0x114>
 800fe6e:	eba0 0308 	sub.w	r3, r0, r8
 800fe72:	fa09 f303 	lsl.w	r3, r9, r3
 800fe76:	4313      	orrs	r3, r2
 800fe78:	9304      	str	r3, [sp, #16]
 800fe7a:	46a2      	mov	sl, r4
 800fe7c:	e7d2      	b.n	800fe24 <_svfiprintf_r+0xa0>
 800fe7e:	9b03      	ldr	r3, [sp, #12]
 800fe80:	1d19      	adds	r1, r3, #4
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	9103      	str	r1, [sp, #12]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	bfbb      	ittet	lt
 800fe8a:	425b      	neglt	r3, r3
 800fe8c:	f042 0202 	orrlt.w	r2, r2, #2
 800fe90:	9307      	strge	r3, [sp, #28]
 800fe92:	9307      	strlt	r3, [sp, #28]
 800fe94:	bfb8      	it	lt
 800fe96:	9204      	strlt	r2, [sp, #16]
 800fe98:	7823      	ldrb	r3, [r4, #0]
 800fe9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe9c:	d10a      	bne.n	800feb4 <_svfiprintf_r+0x130>
 800fe9e:	7863      	ldrb	r3, [r4, #1]
 800fea0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fea2:	d132      	bne.n	800ff0a <_svfiprintf_r+0x186>
 800fea4:	9b03      	ldr	r3, [sp, #12]
 800fea6:	1d1a      	adds	r2, r3, #4
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	9203      	str	r2, [sp, #12]
 800feac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800feb0:	3402      	adds	r4, #2
 800feb2:	9305      	str	r3, [sp, #20]
 800feb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ff78 <_svfiprintf_r+0x1f4>
 800feb8:	7821      	ldrb	r1, [r4, #0]
 800feba:	2203      	movs	r2, #3
 800febc:	4650      	mov	r0, sl
 800febe:	f7f0 f987 	bl	80001d0 <memchr>
 800fec2:	b138      	cbz	r0, 800fed4 <_svfiprintf_r+0x150>
 800fec4:	9b04      	ldr	r3, [sp, #16]
 800fec6:	eba0 000a 	sub.w	r0, r0, sl
 800feca:	2240      	movs	r2, #64	@ 0x40
 800fecc:	4082      	lsls	r2, r0
 800fece:	4313      	orrs	r3, r2
 800fed0:	3401      	adds	r4, #1
 800fed2:	9304      	str	r3, [sp, #16]
 800fed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fed8:	4824      	ldr	r0, [pc, #144]	@ (800ff6c <_svfiprintf_r+0x1e8>)
 800feda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fede:	2206      	movs	r2, #6
 800fee0:	f7f0 f976 	bl	80001d0 <memchr>
 800fee4:	2800      	cmp	r0, #0
 800fee6:	d036      	beq.n	800ff56 <_svfiprintf_r+0x1d2>
 800fee8:	4b21      	ldr	r3, [pc, #132]	@ (800ff70 <_svfiprintf_r+0x1ec>)
 800feea:	bb1b      	cbnz	r3, 800ff34 <_svfiprintf_r+0x1b0>
 800feec:	9b03      	ldr	r3, [sp, #12]
 800feee:	3307      	adds	r3, #7
 800fef0:	f023 0307 	bic.w	r3, r3, #7
 800fef4:	3308      	adds	r3, #8
 800fef6:	9303      	str	r3, [sp, #12]
 800fef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fefa:	4433      	add	r3, r6
 800fefc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fefe:	e76a      	b.n	800fdd6 <_svfiprintf_r+0x52>
 800ff00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff04:	460c      	mov	r4, r1
 800ff06:	2001      	movs	r0, #1
 800ff08:	e7a8      	b.n	800fe5c <_svfiprintf_r+0xd8>
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	3401      	adds	r4, #1
 800ff0e:	9305      	str	r3, [sp, #20]
 800ff10:	4619      	mov	r1, r3
 800ff12:	f04f 0c0a 	mov.w	ip, #10
 800ff16:	4620      	mov	r0, r4
 800ff18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff1c:	3a30      	subs	r2, #48	@ 0x30
 800ff1e:	2a09      	cmp	r2, #9
 800ff20:	d903      	bls.n	800ff2a <_svfiprintf_r+0x1a6>
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d0c6      	beq.n	800feb4 <_svfiprintf_r+0x130>
 800ff26:	9105      	str	r1, [sp, #20]
 800ff28:	e7c4      	b.n	800feb4 <_svfiprintf_r+0x130>
 800ff2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff2e:	4604      	mov	r4, r0
 800ff30:	2301      	movs	r3, #1
 800ff32:	e7f0      	b.n	800ff16 <_svfiprintf_r+0x192>
 800ff34:	ab03      	add	r3, sp, #12
 800ff36:	9300      	str	r3, [sp, #0]
 800ff38:	462a      	mov	r2, r5
 800ff3a:	4b0e      	ldr	r3, [pc, #56]	@ (800ff74 <_svfiprintf_r+0x1f0>)
 800ff3c:	a904      	add	r1, sp, #16
 800ff3e:	4638      	mov	r0, r7
 800ff40:	f7fc ff52 	bl	800cde8 <_printf_float>
 800ff44:	1c42      	adds	r2, r0, #1
 800ff46:	4606      	mov	r6, r0
 800ff48:	d1d6      	bne.n	800fef8 <_svfiprintf_r+0x174>
 800ff4a:	89ab      	ldrh	r3, [r5, #12]
 800ff4c:	065b      	lsls	r3, r3, #25
 800ff4e:	f53f af2d 	bmi.w	800fdac <_svfiprintf_r+0x28>
 800ff52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ff54:	e72c      	b.n	800fdb0 <_svfiprintf_r+0x2c>
 800ff56:	ab03      	add	r3, sp, #12
 800ff58:	9300      	str	r3, [sp, #0]
 800ff5a:	462a      	mov	r2, r5
 800ff5c:	4b05      	ldr	r3, [pc, #20]	@ (800ff74 <_svfiprintf_r+0x1f0>)
 800ff5e:	a904      	add	r1, sp, #16
 800ff60:	4638      	mov	r0, r7
 800ff62:	f7fd f9d9 	bl	800d318 <_printf_i>
 800ff66:	e7ed      	b.n	800ff44 <_svfiprintf_r+0x1c0>
 800ff68:	080128d0 	.word	0x080128d0
 800ff6c:	080128da 	.word	0x080128da
 800ff70:	0800cde9 	.word	0x0800cde9
 800ff74:	0800fccf 	.word	0x0800fccf
 800ff78:	080128d6 	.word	0x080128d6

0800ff7c <__sflush_r>:
 800ff7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ff80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff84:	0716      	lsls	r6, r2, #28
 800ff86:	4605      	mov	r5, r0
 800ff88:	460c      	mov	r4, r1
 800ff8a:	d454      	bmi.n	8010036 <__sflush_r+0xba>
 800ff8c:	684b      	ldr	r3, [r1, #4]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	dc02      	bgt.n	800ff98 <__sflush_r+0x1c>
 800ff92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	dd48      	ble.n	801002a <__sflush_r+0xae>
 800ff98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff9a:	2e00      	cmp	r6, #0
 800ff9c:	d045      	beq.n	801002a <__sflush_r+0xae>
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ffa4:	682f      	ldr	r7, [r5, #0]
 800ffa6:	6a21      	ldr	r1, [r4, #32]
 800ffa8:	602b      	str	r3, [r5, #0]
 800ffaa:	d030      	beq.n	801000e <__sflush_r+0x92>
 800ffac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ffae:	89a3      	ldrh	r3, [r4, #12]
 800ffb0:	0759      	lsls	r1, r3, #29
 800ffb2:	d505      	bpl.n	800ffc0 <__sflush_r+0x44>
 800ffb4:	6863      	ldr	r3, [r4, #4]
 800ffb6:	1ad2      	subs	r2, r2, r3
 800ffb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ffba:	b10b      	cbz	r3, 800ffc0 <__sflush_r+0x44>
 800ffbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ffbe:	1ad2      	subs	r2, r2, r3
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ffc4:	6a21      	ldr	r1, [r4, #32]
 800ffc6:	4628      	mov	r0, r5
 800ffc8:	47b0      	blx	r6
 800ffca:	1c43      	adds	r3, r0, #1
 800ffcc:	89a3      	ldrh	r3, [r4, #12]
 800ffce:	d106      	bne.n	800ffde <__sflush_r+0x62>
 800ffd0:	6829      	ldr	r1, [r5, #0]
 800ffd2:	291d      	cmp	r1, #29
 800ffd4:	d82b      	bhi.n	801002e <__sflush_r+0xb2>
 800ffd6:	4a2a      	ldr	r2, [pc, #168]	@ (8010080 <__sflush_r+0x104>)
 800ffd8:	410a      	asrs	r2, r1
 800ffda:	07d6      	lsls	r6, r2, #31
 800ffdc:	d427      	bmi.n	801002e <__sflush_r+0xb2>
 800ffde:	2200      	movs	r2, #0
 800ffe0:	6062      	str	r2, [r4, #4]
 800ffe2:	04d9      	lsls	r1, r3, #19
 800ffe4:	6922      	ldr	r2, [r4, #16]
 800ffe6:	6022      	str	r2, [r4, #0]
 800ffe8:	d504      	bpl.n	800fff4 <__sflush_r+0x78>
 800ffea:	1c42      	adds	r2, r0, #1
 800ffec:	d101      	bne.n	800fff2 <__sflush_r+0x76>
 800ffee:	682b      	ldr	r3, [r5, #0]
 800fff0:	b903      	cbnz	r3, 800fff4 <__sflush_r+0x78>
 800fff2:	6560      	str	r0, [r4, #84]	@ 0x54
 800fff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fff6:	602f      	str	r7, [r5, #0]
 800fff8:	b1b9      	cbz	r1, 801002a <__sflush_r+0xae>
 800fffa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fffe:	4299      	cmp	r1, r3
 8010000:	d002      	beq.n	8010008 <__sflush_r+0x8c>
 8010002:	4628      	mov	r0, r5
 8010004:	f7fe fd58 	bl	800eab8 <_free_r>
 8010008:	2300      	movs	r3, #0
 801000a:	6363      	str	r3, [r4, #52]	@ 0x34
 801000c:	e00d      	b.n	801002a <__sflush_r+0xae>
 801000e:	2301      	movs	r3, #1
 8010010:	4628      	mov	r0, r5
 8010012:	47b0      	blx	r6
 8010014:	4602      	mov	r2, r0
 8010016:	1c50      	adds	r0, r2, #1
 8010018:	d1c9      	bne.n	800ffae <__sflush_r+0x32>
 801001a:	682b      	ldr	r3, [r5, #0]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d0c6      	beq.n	800ffae <__sflush_r+0x32>
 8010020:	2b1d      	cmp	r3, #29
 8010022:	d001      	beq.n	8010028 <__sflush_r+0xac>
 8010024:	2b16      	cmp	r3, #22
 8010026:	d11e      	bne.n	8010066 <__sflush_r+0xea>
 8010028:	602f      	str	r7, [r5, #0]
 801002a:	2000      	movs	r0, #0
 801002c:	e022      	b.n	8010074 <__sflush_r+0xf8>
 801002e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010032:	b21b      	sxth	r3, r3
 8010034:	e01b      	b.n	801006e <__sflush_r+0xf2>
 8010036:	690f      	ldr	r7, [r1, #16]
 8010038:	2f00      	cmp	r7, #0
 801003a:	d0f6      	beq.n	801002a <__sflush_r+0xae>
 801003c:	0793      	lsls	r3, r2, #30
 801003e:	680e      	ldr	r6, [r1, #0]
 8010040:	bf08      	it	eq
 8010042:	694b      	ldreq	r3, [r1, #20]
 8010044:	600f      	str	r7, [r1, #0]
 8010046:	bf18      	it	ne
 8010048:	2300      	movne	r3, #0
 801004a:	eba6 0807 	sub.w	r8, r6, r7
 801004e:	608b      	str	r3, [r1, #8]
 8010050:	f1b8 0f00 	cmp.w	r8, #0
 8010054:	dde9      	ble.n	801002a <__sflush_r+0xae>
 8010056:	6a21      	ldr	r1, [r4, #32]
 8010058:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801005a:	4643      	mov	r3, r8
 801005c:	463a      	mov	r2, r7
 801005e:	4628      	mov	r0, r5
 8010060:	47b0      	blx	r6
 8010062:	2800      	cmp	r0, #0
 8010064:	dc08      	bgt.n	8010078 <__sflush_r+0xfc>
 8010066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801006a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801006e:	81a3      	strh	r3, [r4, #12]
 8010070:	f04f 30ff 	mov.w	r0, #4294967295
 8010074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010078:	4407      	add	r7, r0
 801007a:	eba8 0800 	sub.w	r8, r8, r0
 801007e:	e7e7      	b.n	8010050 <__sflush_r+0xd4>
 8010080:	dfbffffe 	.word	0xdfbffffe

08010084 <_fflush_r>:
 8010084:	b538      	push	{r3, r4, r5, lr}
 8010086:	690b      	ldr	r3, [r1, #16]
 8010088:	4605      	mov	r5, r0
 801008a:	460c      	mov	r4, r1
 801008c:	b913      	cbnz	r3, 8010094 <_fflush_r+0x10>
 801008e:	2500      	movs	r5, #0
 8010090:	4628      	mov	r0, r5
 8010092:	bd38      	pop	{r3, r4, r5, pc}
 8010094:	b118      	cbz	r0, 801009e <_fflush_r+0x1a>
 8010096:	6a03      	ldr	r3, [r0, #32]
 8010098:	b90b      	cbnz	r3, 801009e <_fflush_r+0x1a>
 801009a:	f7fd fcfd 	bl	800da98 <__sinit>
 801009e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d0f3      	beq.n	801008e <_fflush_r+0xa>
 80100a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80100a8:	07d0      	lsls	r0, r2, #31
 80100aa:	d404      	bmi.n	80100b6 <_fflush_r+0x32>
 80100ac:	0599      	lsls	r1, r3, #22
 80100ae:	d402      	bmi.n	80100b6 <_fflush_r+0x32>
 80100b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80100b2:	f7fd fe76 	bl	800dda2 <__retarget_lock_acquire_recursive>
 80100b6:	4628      	mov	r0, r5
 80100b8:	4621      	mov	r1, r4
 80100ba:	f7ff ff5f 	bl	800ff7c <__sflush_r>
 80100be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80100c0:	07da      	lsls	r2, r3, #31
 80100c2:	4605      	mov	r5, r0
 80100c4:	d4e4      	bmi.n	8010090 <_fflush_r+0xc>
 80100c6:	89a3      	ldrh	r3, [r4, #12]
 80100c8:	059b      	lsls	r3, r3, #22
 80100ca:	d4e1      	bmi.n	8010090 <_fflush_r+0xc>
 80100cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80100ce:	f7fd fe69 	bl	800dda4 <__retarget_lock_release_recursive>
 80100d2:	e7dd      	b.n	8010090 <_fflush_r+0xc>

080100d4 <fiprintf>:
 80100d4:	b40e      	push	{r1, r2, r3}
 80100d6:	b503      	push	{r0, r1, lr}
 80100d8:	4601      	mov	r1, r0
 80100da:	ab03      	add	r3, sp, #12
 80100dc:	4805      	ldr	r0, [pc, #20]	@ (80100f4 <fiprintf+0x20>)
 80100de:	f853 2b04 	ldr.w	r2, [r3], #4
 80100e2:	6800      	ldr	r0, [r0, #0]
 80100e4:	9301      	str	r3, [sp, #4]
 80100e6:	f000 f8a3 	bl	8010230 <_vfiprintf_r>
 80100ea:	b002      	add	sp, #8
 80100ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80100f0:	b003      	add	sp, #12
 80100f2:	4770      	bx	lr
 80100f4:	20000264 	.word	0x20000264

080100f8 <memmove>:
 80100f8:	4288      	cmp	r0, r1
 80100fa:	b510      	push	{r4, lr}
 80100fc:	eb01 0402 	add.w	r4, r1, r2
 8010100:	d902      	bls.n	8010108 <memmove+0x10>
 8010102:	4284      	cmp	r4, r0
 8010104:	4623      	mov	r3, r4
 8010106:	d807      	bhi.n	8010118 <memmove+0x20>
 8010108:	1e43      	subs	r3, r0, #1
 801010a:	42a1      	cmp	r1, r4
 801010c:	d008      	beq.n	8010120 <memmove+0x28>
 801010e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010112:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010116:	e7f8      	b.n	801010a <memmove+0x12>
 8010118:	4402      	add	r2, r0
 801011a:	4601      	mov	r1, r0
 801011c:	428a      	cmp	r2, r1
 801011e:	d100      	bne.n	8010122 <memmove+0x2a>
 8010120:	bd10      	pop	{r4, pc}
 8010122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801012a:	e7f7      	b.n	801011c <memmove+0x24>

0801012c <_sbrk_r>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	4d06      	ldr	r5, [pc, #24]	@ (8010148 <_sbrk_r+0x1c>)
 8010130:	2300      	movs	r3, #0
 8010132:	4604      	mov	r4, r0
 8010134:	4608      	mov	r0, r1
 8010136:	602b      	str	r3, [r5, #0]
 8010138:	f7f8 f96e 	bl	8008418 <_sbrk>
 801013c:	1c43      	adds	r3, r0, #1
 801013e:	d102      	bne.n	8010146 <_sbrk_r+0x1a>
 8010140:	682b      	ldr	r3, [r5, #0]
 8010142:	b103      	cbz	r3, 8010146 <_sbrk_r+0x1a>
 8010144:	6023      	str	r3, [r4, #0]
 8010146:	bd38      	pop	{r3, r4, r5, pc}
 8010148:	20000828 	.word	0x20000828

0801014c <abort>:
 801014c:	b508      	push	{r3, lr}
 801014e:	2006      	movs	r0, #6
 8010150:	f000 fa42 	bl	80105d8 <raise>
 8010154:	2001      	movs	r0, #1
 8010156:	f7f8 f8e7 	bl	8008328 <_exit>

0801015a <_calloc_r>:
 801015a:	b570      	push	{r4, r5, r6, lr}
 801015c:	fba1 5402 	umull	r5, r4, r1, r2
 8010160:	b93c      	cbnz	r4, 8010172 <_calloc_r+0x18>
 8010162:	4629      	mov	r1, r5
 8010164:	f7ff f856 	bl	800f214 <_malloc_r>
 8010168:	4606      	mov	r6, r0
 801016a:	b928      	cbnz	r0, 8010178 <_calloc_r+0x1e>
 801016c:	2600      	movs	r6, #0
 801016e:	4630      	mov	r0, r6
 8010170:	bd70      	pop	{r4, r5, r6, pc}
 8010172:	220c      	movs	r2, #12
 8010174:	6002      	str	r2, [r0, #0]
 8010176:	e7f9      	b.n	801016c <_calloc_r+0x12>
 8010178:	462a      	mov	r2, r5
 801017a:	4621      	mov	r1, r4
 801017c:	f7fd fd25 	bl	800dbca <memset>
 8010180:	e7f5      	b.n	801016e <_calloc_r+0x14>

08010182 <_realloc_r>:
 8010182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010186:	4680      	mov	r8, r0
 8010188:	4615      	mov	r5, r2
 801018a:	460c      	mov	r4, r1
 801018c:	b921      	cbnz	r1, 8010198 <_realloc_r+0x16>
 801018e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010192:	4611      	mov	r1, r2
 8010194:	f7ff b83e 	b.w	800f214 <_malloc_r>
 8010198:	b92a      	cbnz	r2, 80101a6 <_realloc_r+0x24>
 801019a:	f7fe fc8d 	bl	800eab8 <_free_r>
 801019e:	2400      	movs	r4, #0
 80101a0:	4620      	mov	r0, r4
 80101a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101a6:	f000 fa33 	bl	8010610 <_malloc_usable_size_r>
 80101aa:	4285      	cmp	r5, r0
 80101ac:	4606      	mov	r6, r0
 80101ae:	d802      	bhi.n	80101b6 <_realloc_r+0x34>
 80101b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80101b4:	d8f4      	bhi.n	80101a0 <_realloc_r+0x1e>
 80101b6:	4629      	mov	r1, r5
 80101b8:	4640      	mov	r0, r8
 80101ba:	f7ff f82b 	bl	800f214 <_malloc_r>
 80101be:	4607      	mov	r7, r0
 80101c0:	2800      	cmp	r0, #0
 80101c2:	d0ec      	beq.n	801019e <_realloc_r+0x1c>
 80101c4:	42b5      	cmp	r5, r6
 80101c6:	462a      	mov	r2, r5
 80101c8:	4621      	mov	r1, r4
 80101ca:	bf28      	it	cs
 80101cc:	4632      	movcs	r2, r6
 80101ce:	f7fd fdea 	bl	800dda6 <memcpy>
 80101d2:	4621      	mov	r1, r4
 80101d4:	4640      	mov	r0, r8
 80101d6:	f7fe fc6f 	bl	800eab8 <_free_r>
 80101da:	463c      	mov	r4, r7
 80101dc:	e7e0      	b.n	80101a0 <_realloc_r+0x1e>

080101de <__sfputc_r>:
 80101de:	6893      	ldr	r3, [r2, #8]
 80101e0:	3b01      	subs	r3, #1
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	b410      	push	{r4}
 80101e6:	6093      	str	r3, [r2, #8]
 80101e8:	da08      	bge.n	80101fc <__sfputc_r+0x1e>
 80101ea:	6994      	ldr	r4, [r2, #24]
 80101ec:	42a3      	cmp	r3, r4
 80101ee:	db01      	blt.n	80101f4 <__sfputc_r+0x16>
 80101f0:	290a      	cmp	r1, #10
 80101f2:	d103      	bne.n	80101fc <__sfputc_r+0x1e>
 80101f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101f8:	f000 b932 	b.w	8010460 <__swbuf_r>
 80101fc:	6813      	ldr	r3, [r2, #0]
 80101fe:	1c58      	adds	r0, r3, #1
 8010200:	6010      	str	r0, [r2, #0]
 8010202:	7019      	strb	r1, [r3, #0]
 8010204:	4608      	mov	r0, r1
 8010206:	f85d 4b04 	ldr.w	r4, [sp], #4
 801020a:	4770      	bx	lr

0801020c <__sfputs_r>:
 801020c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801020e:	4606      	mov	r6, r0
 8010210:	460f      	mov	r7, r1
 8010212:	4614      	mov	r4, r2
 8010214:	18d5      	adds	r5, r2, r3
 8010216:	42ac      	cmp	r4, r5
 8010218:	d101      	bne.n	801021e <__sfputs_r+0x12>
 801021a:	2000      	movs	r0, #0
 801021c:	e007      	b.n	801022e <__sfputs_r+0x22>
 801021e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010222:	463a      	mov	r2, r7
 8010224:	4630      	mov	r0, r6
 8010226:	f7ff ffda 	bl	80101de <__sfputc_r>
 801022a:	1c43      	adds	r3, r0, #1
 801022c:	d1f3      	bne.n	8010216 <__sfputs_r+0xa>
 801022e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010230 <_vfiprintf_r>:
 8010230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010234:	460d      	mov	r5, r1
 8010236:	b09d      	sub	sp, #116	@ 0x74
 8010238:	4614      	mov	r4, r2
 801023a:	4698      	mov	r8, r3
 801023c:	4606      	mov	r6, r0
 801023e:	b118      	cbz	r0, 8010248 <_vfiprintf_r+0x18>
 8010240:	6a03      	ldr	r3, [r0, #32]
 8010242:	b90b      	cbnz	r3, 8010248 <_vfiprintf_r+0x18>
 8010244:	f7fd fc28 	bl	800da98 <__sinit>
 8010248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801024a:	07d9      	lsls	r1, r3, #31
 801024c:	d405      	bmi.n	801025a <_vfiprintf_r+0x2a>
 801024e:	89ab      	ldrh	r3, [r5, #12]
 8010250:	059a      	lsls	r2, r3, #22
 8010252:	d402      	bmi.n	801025a <_vfiprintf_r+0x2a>
 8010254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010256:	f7fd fda4 	bl	800dda2 <__retarget_lock_acquire_recursive>
 801025a:	89ab      	ldrh	r3, [r5, #12]
 801025c:	071b      	lsls	r3, r3, #28
 801025e:	d501      	bpl.n	8010264 <_vfiprintf_r+0x34>
 8010260:	692b      	ldr	r3, [r5, #16]
 8010262:	b99b      	cbnz	r3, 801028c <_vfiprintf_r+0x5c>
 8010264:	4629      	mov	r1, r5
 8010266:	4630      	mov	r0, r6
 8010268:	f000 f938 	bl	80104dc <__swsetup_r>
 801026c:	b170      	cbz	r0, 801028c <_vfiprintf_r+0x5c>
 801026e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010270:	07dc      	lsls	r4, r3, #31
 8010272:	d504      	bpl.n	801027e <_vfiprintf_r+0x4e>
 8010274:	f04f 30ff 	mov.w	r0, #4294967295
 8010278:	b01d      	add	sp, #116	@ 0x74
 801027a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801027e:	89ab      	ldrh	r3, [r5, #12]
 8010280:	0598      	lsls	r0, r3, #22
 8010282:	d4f7      	bmi.n	8010274 <_vfiprintf_r+0x44>
 8010284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010286:	f7fd fd8d 	bl	800dda4 <__retarget_lock_release_recursive>
 801028a:	e7f3      	b.n	8010274 <_vfiprintf_r+0x44>
 801028c:	2300      	movs	r3, #0
 801028e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010290:	2320      	movs	r3, #32
 8010292:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010296:	f8cd 800c 	str.w	r8, [sp, #12]
 801029a:	2330      	movs	r3, #48	@ 0x30
 801029c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801044c <_vfiprintf_r+0x21c>
 80102a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80102a4:	f04f 0901 	mov.w	r9, #1
 80102a8:	4623      	mov	r3, r4
 80102aa:	469a      	mov	sl, r3
 80102ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102b0:	b10a      	cbz	r2, 80102b6 <_vfiprintf_r+0x86>
 80102b2:	2a25      	cmp	r2, #37	@ 0x25
 80102b4:	d1f9      	bne.n	80102aa <_vfiprintf_r+0x7a>
 80102b6:	ebba 0b04 	subs.w	fp, sl, r4
 80102ba:	d00b      	beq.n	80102d4 <_vfiprintf_r+0xa4>
 80102bc:	465b      	mov	r3, fp
 80102be:	4622      	mov	r2, r4
 80102c0:	4629      	mov	r1, r5
 80102c2:	4630      	mov	r0, r6
 80102c4:	f7ff ffa2 	bl	801020c <__sfputs_r>
 80102c8:	3001      	adds	r0, #1
 80102ca:	f000 80a7 	beq.w	801041c <_vfiprintf_r+0x1ec>
 80102ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102d0:	445a      	add	r2, fp
 80102d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80102d4:	f89a 3000 	ldrb.w	r3, [sl]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	f000 809f 	beq.w	801041c <_vfiprintf_r+0x1ec>
 80102de:	2300      	movs	r3, #0
 80102e0:	f04f 32ff 	mov.w	r2, #4294967295
 80102e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102e8:	f10a 0a01 	add.w	sl, sl, #1
 80102ec:	9304      	str	r3, [sp, #16]
 80102ee:	9307      	str	r3, [sp, #28]
 80102f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80102f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80102f6:	4654      	mov	r4, sl
 80102f8:	2205      	movs	r2, #5
 80102fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102fe:	4853      	ldr	r0, [pc, #332]	@ (801044c <_vfiprintf_r+0x21c>)
 8010300:	f7ef ff66 	bl	80001d0 <memchr>
 8010304:	9a04      	ldr	r2, [sp, #16]
 8010306:	b9d8      	cbnz	r0, 8010340 <_vfiprintf_r+0x110>
 8010308:	06d1      	lsls	r1, r2, #27
 801030a:	bf44      	itt	mi
 801030c:	2320      	movmi	r3, #32
 801030e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010312:	0713      	lsls	r3, r2, #28
 8010314:	bf44      	itt	mi
 8010316:	232b      	movmi	r3, #43	@ 0x2b
 8010318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801031c:	f89a 3000 	ldrb.w	r3, [sl]
 8010320:	2b2a      	cmp	r3, #42	@ 0x2a
 8010322:	d015      	beq.n	8010350 <_vfiprintf_r+0x120>
 8010324:	9a07      	ldr	r2, [sp, #28]
 8010326:	4654      	mov	r4, sl
 8010328:	2000      	movs	r0, #0
 801032a:	f04f 0c0a 	mov.w	ip, #10
 801032e:	4621      	mov	r1, r4
 8010330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010334:	3b30      	subs	r3, #48	@ 0x30
 8010336:	2b09      	cmp	r3, #9
 8010338:	d94b      	bls.n	80103d2 <_vfiprintf_r+0x1a2>
 801033a:	b1b0      	cbz	r0, 801036a <_vfiprintf_r+0x13a>
 801033c:	9207      	str	r2, [sp, #28]
 801033e:	e014      	b.n	801036a <_vfiprintf_r+0x13a>
 8010340:	eba0 0308 	sub.w	r3, r0, r8
 8010344:	fa09 f303 	lsl.w	r3, r9, r3
 8010348:	4313      	orrs	r3, r2
 801034a:	9304      	str	r3, [sp, #16]
 801034c:	46a2      	mov	sl, r4
 801034e:	e7d2      	b.n	80102f6 <_vfiprintf_r+0xc6>
 8010350:	9b03      	ldr	r3, [sp, #12]
 8010352:	1d19      	adds	r1, r3, #4
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	9103      	str	r1, [sp, #12]
 8010358:	2b00      	cmp	r3, #0
 801035a:	bfbb      	ittet	lt
 801035c:	425b      	neglt	r3, r3
 801035e:	f042 0202 	orrlt.w	r2, r2, #2
 8010362:	9307      	strge	r3, [sp, #28]
 8010364:	9307      	strlt	r3, [sp, #28]
 8010366:	bfb8      	it	lt
 8010368:	9204      	strlt	r2, [sp, #16]
 801036a:	7823      	ldrb	r3, [r4, #0]
 801036c:	2b2e      	cmp	r3, #46	@ 0x2e
 801036e:	d10a      	bne.n	8010386 <_vfiprintf_r+0x156>
 8010370:	7863      	ldrb	r3, [r4, #1]
 8010372:	2b2a      	cmp	r3, #42	@ 0x2a
 8010374:	d132      	bne.n	80103dc <_vfiprintf_r+0x1ac>
 8010376:	9b03      	ldr	r3, [sp, #12]
 8010378:	1d1a      	adds	r2, r3, #4
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	9203      	str	r2, [sp, #12]
 801037e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010382:	3402      	adds	r4, #2
 8010384:	9305      	str	r3, [sp, #20]
 8010386:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801045c <_vfiprintf_r+0x22c>
 801038a:	7821      	ldrb	r1, [r4, #0]
 801038c:	2203      	movs	r2, #3
 801038e:	4650      	mov	r0, sl
 8010390:	f7ef ff1e 	bl	80001d0 <memchr>
 8010394:	b138      	cbz	r0, 80103a6 <_vfiprintf_r+0x176>
 8010396:	9b04      	ldr	r3, [sp, #16]
 8010398:	eba0 000a 	sub.w	r0, r0, sl
 801039c:	2240      	movs	r2, #64	@ 0x40
 801039e:	4082      	lsls	r2, r0
 80103a0:	4313      	orrs	r3, r2
 80103a2:	3401      	adds	r4, #1
 80103a4:	9304      	str	r3, [sp, #16]
 80103a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103aa:	4829      	ldr	r0, [pc, #164]	@ (8010450 <_vfiprintf_r+0x220>)
 80103ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80103b0:	2206      	movs	r2, #6
 80103b2:	f7ef ff0d 	bl	80001d0 <memchr>
 80103b6:	2800      	cmp	r0, #0
 80103b8:	d03f      	beq.n	801043a <_vfiprintf_r+0x20a>
 80103ba:	4b26      	ldr	r3, [pc, #152]	@ (8010454 <_vfiprintf_r+0x224>)
 80103bc:	bb1b      	cbnz	r3, 8010406 <_vfiprintf_r+0x1d6>
 80103be:	9b03      	ldr	r3, [sp, #12]
 80103c0:	3307      	adds	r3, #7
 80103c2:	f023 0307 	bic.w	r3, r3, #7
 80103c6:	3308      	adds	r3, #8
 80103c8:	9303      	str	r3, [sp, #12]
 80103ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103cc:	443b      	add	r3, r7
 80103ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80103d0:	e76a      	b.n	80102a8 <_vfiprintf_r+0x78>
 80103d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80103d6:	460c      	mov	r4, r1
 80103d8:	2001      	movs	r0, #1
 80103da:	e7a8      	b.n	801032e <_vfiprintf_r+0xfe>
 80103dc:	2300      	movs	r3, #0
 80103de:	3401      	adds	r4, #1
 80103e0:	9305      	str	r3, [sp, #20]
 80103e2:	4619      	mov	r1, r3
 80103e4:	f04f 0c0a 	mov.w	ip, #10
 80103e8:	4620      	mov	r0, r4
 80103ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103ee:	3a30      	subs	r2, #48	@ 0x30
 80103f0:	2a09      	cmp	r2, #9
 80103f2:	d903      	bls.n	80103fc <_vfiprintf_r+0x1cc>
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d0c6      	beq.n	8010386 <_vfiprintf_r+0x156>
 80103f8:	9105      	str	r1, [sp, #20]
 80103fa:	e7c4      	b.n	8010386 <_vfiprintf_r+0x156>
 80103fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010400:	4604      	mov	r4, r0
 8010402:	2301      	movs	r3, #1
 8010404:	e7f0      	b.n	80103e8 <_vfiprintf_r+0x1b8>
 8010406:	ab03      	add	r3, sp, #12
 8010408:	9300      	str	r3, [sp, #0]
 801040a:	462a      	mov	r2, r5
 801040c:	4b12      	ldr	r3, [pc, #72]	@ (8010458 <_vfiprintf_r+0x228>)
 801040e:	a904      	add	r1, sp, #16
 8010410:	4630      	mov	r0, r6
 8010412:	f7fc fce9 	bl	800cde8 <_printf_float>
 8010416:	4607      	mov	r7, r0
 8010418:	1c78      	adds	r0, r7, #1
 801041a:	d1d6      	bne.n	80103ca <_vfiprintf_r+0x19a>
 801041c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801041e:	07d9      	lsls	r1, r3, #31
 8010420:	d405      	bmi.n	801042e <_vfiprintf_r+0x1fe>
 8010422:	89ab      	ldrh	r3, [r5, #12]
 8010424:	059a      	lsls	r2, r3, #22
 8010426:	d402      	bmi.n	801042e <_vfiprintf_r+0x1fe>
 8010428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801042a:	f7fd fcbb 	bl	800dda4 <__retarget_lock_release_recursive>
 801042e:	89ab      	ldrh	r3, [r5, #12]
 8010430:	065b      	lsls	r3, r3, #25
 8010432:	f53f af1f 	bmi.w	8010274 <_vfiprintf_r+0x44>
 8010436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010438:	e71e      	b.n	8010278 <_vfiprintf_r+0x48>
 801043a:	ab03      	add	r3, sp, #12
 801043c:	9300      	str	r3, [sp, #0]
 801043e:	462a      	mov	r2, r5
 8010440:	4b05      	ldr	r3, [pc, #20]	@ (8010458 <_vfiprintf_r+0x228>)
 8010442:	a904      	add	r1, sp, #16
 8010444:	4630      	mov	r0, r6
 8010446:	f7fc ff67 	bl	800d318 <_printf_i>
 801044a:	e7e4      	b.n	8010416 <_vfiprintf_r+0x1e6>
 801044c:	080128d0 	.word	0x080128d0
 8010450:	080128da 	.word	0x080128da
 8010454:	0800cde9 	.word	0x0800cde9
 8010458:	0801020d 	.word	0x0801020d
 801045c:	080128d6 	.word	0x080128d6

08010460 <__swbuf_r>:
 8010460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010462:	460e      	mov	r6, r1
 8010464:	4614      	mov	r4, r2
 8010466:	4605      	mov	r5, r0
 8010468:	b118      	cbz	r0, 8010472 <__swbuf_r+0x12>
 801046a:	6a03      	ldr	r3, [r0, #32]
 801046c:	b90b      	cbnz	r3, 8010472 <__swbuf_r+0x12>
 801046e:	f7fd fb13 	bl	800da98 <__sinit>
 8010472:	69a3      	ldr	r3, [r4, #24]
 8010474:	60a3      	str	r3, [r4, #8]
 8010476:	89a3      	ldrh	r3, [r4, #12]
 8010478:	071a      	lsls	r2, r3, #28
 801047a:	d501      	bpl.n	8010480 <__swbuf_r+0x20>
 801047c:	6923      	ldr	r3, [r4, #16]
 801047e:	b943      	cbnz	r3, 8010492 <__swbuf_r+0x32>
 8010480:	4621      	mov	r1, r4
 8010482:	4628      	mov	r0, r5
 8010484:	f000 f82a 	bl	80104dc <__swsetup_r>
 8010488:	b118      	cbz	r0, 8010492 <__swbuf_r+0x32>
 801048a:	f04f 37ff 	mov.w	r7, #4294967295
 801048e:	4638      	mov	r0, r7
 8010490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010492:	6823      	ldr	r3, [r4, #0]
 8010494:	6922      	ldr	r2, [r4, #16]
 8010496:	1a98      	subs	r0, r3, r2
 8010498:	6963      	ldr	r3, [r4, #20]
 801049a:	b2f6      	uxtb	r6, r6
 801049c:	4283      	cmp	r3, r0
 801049e:	4637      	mov	r7, r6
 80104a0:	dc05      	bgt.n	80104ae <__swbuf_r+0x4e>
 80104a2:	4621      	mov	r1, r4
 80104a4:	4628      	mov	r0, r5
 80104a6:	f7ff fded 	bl	8010084 <_fflush_r>
 80104aa:	2800      	cmp	r0, #0
 80104ac:	d1ed      	bne.n	801048a <__swbuf_r+0x2a>
 80104ae:	68a3      	ldr	r3, [r4, #8]
 80104b0:	3b01      	subs	r3, #1
 80104b2:	60a3      	str	r3, [r4, #8]
 80104b4:	6823      	ldr	r3, [r4, #0]
 80104b6:	1c5a      	adds	r2, r3, #1
 80104b8:	6022      	str	r2, [r4, #0]
 80104ba:	701e      	strb	r6, [r3, #0]
 80104bc:	6962      	ldr	r2, [r4, #20]
 80104be:	1c43      	adds	r3, r0, #1
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d004      	beq.n	80104ce <__swbuf_r+0x6e>
 80104c4:	89a3      	ldrh	r3, [r4, #12]
 80104c6:	07db      	lsls	r3, r3, #31
 80104c8:	d5e1      	bpl.n	801048e <__swbuf_r+0x2e>
 80104ca:	2e0a      	cmp	r6, #10
 80104cc:	d1df      	bne.n	801048e <__swbuf_r+0x2e>
 80104ce:	4621      	mov	r1, r4
 80104d0:	4628      	mov	r0, r5
 80104d2:	f7ff fdd7 	bl	8010084 <_fflush_r>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	d0d9      	beq.n	801048e <__swbuf_r+0x2e>
 80104da:	e7d6      	b.n	801048a <__swbuf_r+0x2a>

080104dc <__swsetup_r>:
 80104dc:	b538      	push	{r3, r4, r5, lr}
 80104de:	4b29      	ldr	r3, [pc, #164]	@ (8010584 <__swsetup_r+0xa8>)
 80104e0:	4605      	mov	r5, r0
 80104e2:	6818      	ldr	r0, [r3, #0]
 80104e4:	460c      	mov	r4, r1
 80104e6:	b118      	cbz	r0, 80104f0 <__swsetup_r+0x14>
 80104e8:	6a03      	ldr	r3, [r0, #32]
 80104ea:	b90b      	cbnz	r3, 80104f0 <__swsetup_r+0x14>
 80104ec:	f7fd fad4 	bl	800da98 <__sinit>
 80104f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104f4:	0719      	lsls	r1, r3, #28
 80104f6:	d422      	bmi.n	801053e <__swsetup_r+0x62>
 80104f8:	06da      	lsls	r2, r3, #27
 80104fa:	d407      	bmi.n	801050c <__swsetup_r+0x30>
 80104fc:	2209      	movs	r2, #9
 80104fe:	602a      	str	r2, [r5, #0]
 8010500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010504:	81a3      	strh	r3, [r4, #12]
 8010506:	f04f 30ff 	mov.w	r0, #4294967295
 801050a:	e033      	b.n	8010574 <__swsetup_r+0x98>
 801050c:	0758      	lsls	r0, r3, #29
 801050e:	d512      	bpl.n	8010536 <__swsetup_r+0x5a>
 8010510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010512:	b141      	cbz	r1, 8010526 <__swsetup_r+0x4a>
 8010514:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010518:	4299      	cmp	r1, r3
 801051a:	d002      	beq.n	8010522 <__swsetup_r+0x46>
 801051c:	4628      	mov	r0, r5
 801051e:	f7fe facb 	bl	800eab8 <_free_r>
 8010522:	2300      	movs	r3, #0
 8010524:	6363      	str	r3, [r4, #52]	@ 0x34
 8010526:	89a3      	ldrh	r3, [r4, #12]
 8010528:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801052c:	81a3      	strh	r3, [r4, #12]
 801052e:	2300      	movs	r3, #0
 8010530:	6063      	str	r3, [r4, #4]
 8010532:	6923      	ldr	r3, [r4, #16]
 8010534:	6023      	str	r3, [r4, #0]
 8010536:	89a3      	ldrh	r3, [r4, #12]
 8010538:	f043 0308 	orr.w	r3, r3, #8
 801053c:	81a3      	strh	r3, [r4, #12]
 801053e:	6923      	ldr	r3, [r4, #16]
 8010540:	b94b      	cbnz	r3, 8010556 <__swsetup_r+0x7a>
 8010542:	89a3      	ldrh	r3, [r4, #12]
 8010544:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801054c:	d003      	beq.n	8010556 <__swsetup_r+0x7a>
 801054e:	4621      	mov	r1, r4
 8010550:	4628      	mov	r0, r5
 8010552:	f000 f88b 	bl	801066c <__smakebuf_r>
 8010556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801055a:	f013 0201 	ands.w	r2, r3, #1
 801055e:	d00a      	beq.n	8010576 <__swsetup_r+0x9a>
 8010560:	2200      	movs	r2, #0
 8010562:	60a2      	str	r2, [r4, #8]
 8010564:	6962      	ldr	r2, [r4, #20]
 8010566:	4252      	negs	r2, r2
 8010568:	61a2      	str	r2, [r4, #24]
 801056a:	6922      	ldr	r2, [r4, #16]
 801056c:	b942      	cbnz	r2, 8010580 <__swsetup_r+0xa4>
 801056e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010572:	d1c5      	bne.n	8010500 <__swsetup_r+0x24>
 8010574:	bd38      	pop	{r3, r4, r5, pc}
 8010576:	0799      	lsls	r1, r3, #30
 8010578:	bf58      	it	pl
 801057a:	6962      	ldrpl	r2, [r4, #20]
 801057c:	60a2      	str	r2, [r4, #8]
 801057e:	e7f4      	b.n	801056a <__swsetup_r+0x8e>
 8010580:	2000      	movs	r0, #0
 8010582:	e7f7      	b.n	8010574 <__swsetup_r+0x98>
 8010584:	20000264 	.word	0x20000264

08010588 <_raise_r>:
 8010588:	291f      	cmp	r1, #31
 801058a:	b538      	push	{r3, r4, r5, lr}
 801058c:	4605      	mov	r5, r0
 801058e:	460c      	mov	r4, r1
 8010590:	d904      	bls.n	801059c <_raise_r+0x14>
 8010592:	2316      	movs	r3, #22
 8010594:	6003      	str	r3, [r0, #0]
 8010596:	f04f 30ff 	mov.w	r0, #4294967295
 801059a:	bd38      	pop	{r3, r4, r5, pc}
 801059c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801059e:	b112      	cbz	r2, 80105a6 <_raise_r+0x1e>
 80105a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105a4:	b94b      	cbnz	r3, 80105ba <_raise_r+0x32>
 80105a6:	4628      	mov	r0, r5
 80105a8:	f000 f830 	bl	801060c <_getpid_r>
 80105ac:	4622      	mov	r2, r4
 80105ae:	4601      	mov	r1, r0
 80105b0:	4628      	mov	r0, r5
 80105b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105b6:	f000 b817 	b.w	80105e8 <_kill_r>
 80105ba:	2b01      	cmp	r3, #1
 80105bc:	d00a      	beq.n	80105d4 <_raise_r+0x4c>
 80105be:	1c59      	adds	r1, r3, #1
 80105c0:	d103      	bne.n	80105ca <_raise_r+0x42>
 80105c2:	2316      	movs	r3, #22
 80105c4:	6003      	str	r3, [r0, #0]
 80105c6:	2001      	movs	r0, #1
 80105c8:	e7e7      	b.n	801059a <_raise_r+0x12>
 80105ca:	2100      	movs	r1, #0
 80105cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80105d0:	4620      	mov	r0, r4
 80105d2:	4798      	blx	r3
 80105d4:	2000      	movs	r0, #0
 80105d6:	e7e0      	b.n	801059a <_raise_r+0x12>

080105d8 <raise>:
 80105d8:	4b02      	ldr	r3, [pc, #8]	@ (80105e4 <raise+0xc>)
 80105da:	4601      	mov	r1, r0
 80105dc:	6818      	ldr	r0, [r3, #0]
 80105de:	f7ff bfd3 	b.w	8010588 <_raise_r>
 80105e2:	bf00      	nop
 80105e4:	20000264 	.word	0x20000264

080105e8 <_kill_r>:
 80105e8:	b538      	push	{r3, r4, r5, lr}
 80105ea:	4d07      	ldr	r5, [pc, #28]	@ (8010608 <_kill_r+0x20>)
 80105ec:	2300      	movs	r3, #0
 80105ee:	4604      	mov	r4, r0
 80105f0:	4608      	mov	r0, r1
 80105f2:	4611      	mov	r1, r2
 80105f4:	602b      	str	r3, [r5, #0]
 80105f6:	f7f7 fe87 	bl	8008308 <_kill>
 80105fa:	1c43      	adds	r3, r0, #1
 80105fc:	d102      	bne.n	8010604 <_kill_r+0x1c>
 80105fe:	682b      	ldr	r3, [r5, #0]
 8010600:	b103      	cbz	r3, 8010604 <_kill_r+0x1c>
 8010602:	6023      	str	r3, [r4, #0]
 8010604:	bd38      	pop	{r3, r4, r5, pc}
 8010606:	bf00      	nop
 8010608:	20000828 	.word	0x20000828

0801060c <_getpid_r>:
 801060c:	f7f7 be74 	b.w	80082f8 <_getpid>

08010610 <_malloc_usable_size_r>:
 8010610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010614:	1f18      	subs	r0, r3, #4
 8010616:	2b00      	cmp	r3, #0
 8010618:	bfbc      	itt	lt
 801061a:	580b      	ldrlt	r3, [r1, r0]
 801061c:	18c0      	addlt	r0, r0, r3
 801061e:	4770      	bx	lr

08010620 <__swhatbuf_r>:
 8010620:	b570      	push	{r4, r5, r6, lr}
 8010622:	460c      	mov	r4, r1
 8010624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010628:	2900      	cmp	r1, #0
 801062a:	b096      	sub	sp, #88	@ 0x58
 801062c:	4615      	mov	r5, r2
 801062e:	461e      	mov	r6, r3
 8010630:	da0d      	bge.n	801064e <__swhatbuf_r+0x2e>
 8010632:	89a3      	ldrh	r3, [r4, #12]
 8010634:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010638:	f04f 0100 	mov.w	r1, #0
 801063c:	bf14      	ite	ne
 801063e:	2340      	movne	r3, #64	@ 0x40
 8010640:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010644:	2000      	movs	r0, #0
 8010646:	6031      	str	r1, [r6, #0]
 8010648:	602b      	str	r3, [r5, #0]
 801064a:	b016      	add	sp, #88	@ 0x58
 801064c:	bd70      	pop	{r4, r5, r6, pc}
 801064e:	466a      	mov	r2, sp
 8010650:	f000 f848 	bl	80106e4 <_fstat_r>
 8010654:	2800      	cmp	r0, #0
 8010656:	dbec      	blt.n	8010632 <__swhatbuf_r+0x12>
 8010658:	9901      	ldr	r1, [sp, #4]
 801065a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801065e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010662:	4259      	negs	r1, r3
 8010664:	4159      	adcs	r1, r3
 8010666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801066a:	e7eb      	b.n	8010644 <__swhatbuf_r+0x24>

0801066c <__smakebuf_r>:
 801066c:	898b      	ldrh	r3, [r1, #12]
 801066e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010670:	079d      	lsls	r5, r3, #30
 8010672:	4606      	mov	r6, r0
 8010674:	460c      	mov	r4, r1
 8010676:	d507      	bpl.n	8010688 <__smakebuf_r+0x1c>
 8010678:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801067c:	6023      	str	r3, [r4, #0]
 801067e:	6123      	str	r3, [r4, #16]
 8010680:	2301      	movs	r3, #1
 8010682:	6163      	str	r3, [r4, #20]
 8010684:	b003      	add	sp, #12
 8010686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010688:	ab01      	add	r3, sp, #4
 801068a:	466a      	mov	r2, sp
 801068c:	f7ff ffc8 	bl	8010620 <__swhatbuf_r>
 8010690:	9f00      	ldr	r7, [sp, #0]
 8010692:	4605      	mov	r5, r0
 8010694:	4639      	mov	r1, r7
 8010696:	4630      	mov	r0, r6
 8010698:	f7fe fdbc 	bl	800f214 <_malloc_r>
 801069c:	b948      	cbnz	r0, 80106b2 <__smakebuf_r+0x46>
 801069e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106a2:	059a      	lsls	r2, r3, #22
 80106a4:	d4ee      	bmi.n	8010684 <__smakebuf_r+0x18>
 80106a6:	f023 0303 	bic.w	r3, r3, #3
 80106aa:	f043 0302 	orr.w	r3, r3, #2
 80106ae:	81a3      	strh	r3, [r4, #12]
 80106b0:	e7e2      	b.n	8010678 <__smakebuf_r+0xc>
 80106b2:	89a3      	ldrh	r3, [r4, #12]
 80106b4:	6020      	str	r0, [r4, #0]
 80106b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106ba:	81a3      	strh	r3, [r4, #12]
 80106bc:	9b01      	ldr	r3, [sp, #4]
 80106be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80106c2:	b15b      	cbz	r3, 80106dc <__smakebuf_r+0x70>
 80106c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106c8:	4630      	mov	r0, r6
 80106ca:	f000 f81d 	bl	8010708 <_isatty_r>
 80106ce:	b128      	cbz	r0, 80106dc <__smakebuf_r+0x70>
 80106d0:	89a3      	ldrh	r3, [r4, #12]
 80106d2:	f023 0303 	bic.w	r3, r3, #3
 80106d6:	f043 0301 	orr.w	r3, r3, #1
 80106da:	81a3      	strh	r3, [r4, #12]
 80106dc:	89a3      	ldrh	r3, [r4, #12]
 80106de:	431d      	orrs	r5, r3
 80106e0:	81a5      	strh	r5, [r4, #12]
 80106e2:	e7cf      	b.n	8010684 <__smakebuf_r+0x18>

080106e4 <_fstat_r>:
 80106e4:	b538      	push	{r3, r4, r5, lr}
 80106e6:	4d07      	ldr	r5, [pc, #28]	@ (8010704 <_fstat_r+0x20>)
 80106e8:	2300      	movs	r3, #0
 80106ea:	4604      	mov	r4, r0
 80106ec:	4608      	mov	r0, r1
 80106ee:	4611      	mov	r1, r2
 80106f0:	602b      	str	r3, [r5, #0]
 80106f2:	f7f7 fe69 	bl	80083c8 <_fstat>
 80106f6:	1c43      	adds	r3, r0, #1
 80106f8:	d102      	bne.n	8010700 <_fstat_r+0x1c>
 80106fa:	682b      	ldr	r3, [r5, #0]
 80106fc:	b103      	cbz	r3, 8010700 <_fstat_r+0x1c>
 80106fe:	6023      	str	r3, [r4, #0]
 8010700:	bd38      	pop	{r3, r4, r5, pc}
 8010702:	bf00      	nop
 8010704:	20000828 	.word	0x20000828

08010708 <_isatty_r>:
 8010708:	b538      	push	{r3, r4, r5, lr}
 801070a:	4d06      	ldr	r5, [pc, #24]	@ (8010724 <_isatty_r+0x1c>)
 801070c:	2300      	movs	r3, #0
 801070e:	4604      	mov	r4, r0
 8010710:	4608      	mov	r0, r1
 8010712:	602b      	str	r3, [r5, #0]
 8010714:	f7f7 fe68 	bl	80083e8 <_isatty>
 8010718:	1c43      	adds	r3, r0, #1
 801071a:	d102      	bne.n	8010722 <_isatty_r+0x1a>
 801071c:	682b      	ldr	r3, [r5, #0]
 801071e:	b103      	cbz	r3, 8010722 <_isatty_r+0x1a>
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	bd38      	pop	{r3, r4, r5, pc}
 8010724:	20000828 	.word	0x20000828

08010728 <atan2>:
 8010728:	f000 bbc6 	b.w	8010eb8 <__ieee754_atan2>
 801072c:	0000      	movs	r0, r0
	...

08010730 <hypot>:
 8010730:	b508      	push	{r3, lr}
 8010732:	ed2d 8b06 	vpush	{d8-d10}
 8010736:	eeb0 aa40 	vmov.f32	s20, s0
 801073a:	eef0 aa60 	vmov.f32	s21, s1
 801073e:	eeb0 9a41 	vmov.f32	s18, s2
 8010742:	eef0 9a61 	vmov.f32	s19, s3
 8010746:	f000 fc7d 	bl	8011044 <__ieee754_hypot>
 801074a:	eeb0 8a40 	vmov.f32	s16, s0
 801074e:	eef0 8a60 	vmov.f32	s17, s1
 8010752:	f000 f8c9 	bl	80108e8 <finite>
 8010756:	b998      	cbnz	r0, 8010780 <hypot+0x50>
 8010758:	eeb0 0a4a 	vmov.f32	s0, s20
 801075c:	eef0 0a6a 	vmov.f32	s1, s21
 8010760:	f000 f8c2 	bl	80108e8 <finite>
 8010764:	b160      	cbz	r0, 8010780 <hypot+0x50>
 8010766:	eeb0 0a49 	vmov.f32	s0, s18
 801076a:	eef0 0a69 	vmov.f32	s1, s19
 801076e:	f000 f8bb 	bl	80108e8 <finite>
 8010772:	b128      	cbz	r0, 8010780 <hypot+0x50>
 8010774:	f7fd faea 	bl	800dd4c <__errno>
 8010778:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8010790 <hypot+0x60>
 801077c:	2322      	movs	r3, #34	@ 0x22
 801077e:	6003      	str	r3, [r0, #0]
 8010780:	eeb0 0a48 	vmov.f32	s0, s16
 8010784:	eef0 0a68 	vmov.f32	s1, s17
 8010788:	ecbd 8b06 	vpop	{d8-d10}
 801078c:	bd08      	pop	{r3, pc}
 801078e:	bf00      	nop
 8010790:	00000000 	.word	0x00000000
 8010794:	7ff00000 	.word	0x7ff00000

08010798 <cos>:
 8010798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801079a:	ec53 2b10 	vmov	r2, r3, d0
 801079e:	4826      	ldr	r0, [pc, #152]	@ (8010838 <cos+0xa0>)
 80107a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80107a4:	4281      	cmp	r1, r0
 80107a6:	d806      	bhi.n	80107b6 <cos+0x1e>
 80107a8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010830 <cos+0x98>
 80107ac:	b005      	add	sp, #20
 80107ae:	f85d eb04 	ldr.w	lr, [sp], #4
 80107b2:	f000 b9fd 	b.w	8010bb0 <__kernel_cos>
 80107b6:	4821      	ldr	r0, [pc, #132]	@ (801083c <cos+0xa4>)
 80107b8:	4281      	cmp	r1, r0
 80107ba:	d908      	bls.n	80107ce <cos+0x36>
 80107bc:	4610      	mov	r0, r2
 80107be:	4619      	mov	r1, r3
 80107c0:	f7ef fd62 	bl	8000288 <__aeabi_dsub>
 80107c4:	ec41 0b10 	vmov	d0, r0, r1
 80107c8:	b005      	add	sp, #20
 80107ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80107ce:	4668      	mov	r0, sp
 80107d0:	f000 fd4e 	bl	8011270 <__ieee754_rem_pio2>
 80107d4:	f000 0003 	and.w	r0, r0, #3
 80107d8:	2801      	cmp	r0, #1
 80107da:	d00b      	beq.n	80107f4 <cos+0x5c>
 80107dc:	2802      	cmp	r0, #2
 80107de:	d015      	beq.n	801080c <cos+0x74>
 80107e0:	b9d8      	cbnz	r0, 801081a <cos+0x82>
 80107e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80107e6:	ed9d 0b00 	vldr	d0, [sp]
 80107ea:	f000 f9e1 	bl	8010bb0 <__kernel_cos>
 80107ee:	ec51 0b10 	vmov	r0, r1, d0
 80107f2:	e7e7      	b.n	80107c4 <cos+0x2c>
 80107f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80107f8:	ed9d 0b00 	vldr	d0, [sp]
 80107fc:	f000 faa0 	bl	8010d40 <__kernel_sin>
 8010800:	ec53 2b10 	vmov	r2, r3, d0
 8010804:	4610      	mov	r0, r2
 8010806:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801080a:	e7db      	b.n	80107c4 <cos+0x2c>
 801080c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010810:	ed9d 0b00 	vldr	d0, [sp]
 8010814:	f000 f9cc 	bl	8010bb0 <__kernel_cos>
 8010818:	e7f2      	b.n	8010800 <cos+0x68>
 801081a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801081e:	ed9d 0b00 	vldr	d0, [sp]
 8010822:	2001      	movs	r0, #1
 8010824:	f000 fa8c 	bl	8010d40 <__kernel_sin>
 8010828:	e7e1      	b.n	80107ee <cos+0x56>
 801082a:	bf00      	nop
 801082c:	f3af 8000 	nop.w
	...
 8010838:	3fe921fb 	.word	0x3fe921fb
 801083c:	7fefffff 	.word	0x7fefffff

08010840 <sin>:
 8010840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010842:	ec53 2b10 	vmov	r2, r3, d0
 8010846:	4826      	ldr	r0, [pc, #152]	@ (80108e0 <sin+0xa0>)
 8010848:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801084c:	4281      	cmp	r1, r0
 801084e:	d807      	bhi.n	8010860 <sin+0x20>
 8010850:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80108d8 <sin+0x98>
 8010854:	2000      	movs	r0, #0
 8010856:	b005      	add	sp, #20
 8010858:	f85d eb04 	ldr.w	lr, [sp], #4
 801085c:	f000 ba70 	b.w	8010d40 <__kernel_sin>
 8010860:	4820      	ldr	r0, [pc, #128]	@ (80108e4 <sin+0xa4>)
 8010862:	4281      	cmp	r1, r0
 8010864:	d908      	bls.n	8010878 <sin+0x38>
 8010866:	4610      	mov	r0, r2
 8010868:	4619      	mov	r1, r3
 801086a:	f7ef fd0d 	bl	8000288 <__aeabi_dsub>
 801086e:	ec41 0b10 	vmov	d0, r0, r1
 8010872:	b005      	add	sp, #20
 8010874:	f85d fb04 	ldr.w	pc, [sp], #4
 8010878:	4668      	mov	r0, sp
 801087a:	f000 fcf9 	bl	8011270 <__ieee754_rem_pio2>
 801087e:	f000 0003 	and.w	r0, r0, #3
 8010882:	2801      	cmp	r0, #1
 8010884:	d00c      	beq.n	80108a0 <sin+0x60>
 8010886:	2802      	cmp	r0, #2
 8010888:	d011      	beq.n	80108ae <sin+0x6e>
 801088a:	b9e8      	cbnz	r0, 80108c8 <sin+0x88>
 801088c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010890:	ed9d 0b00 	vldr	d0, [sp]
 8010894:	2001      	movs	r0, #1
 8010896:	f000 fa53 	bl	8010d40 <__kernel_sin>
 801089a:	ec51 0b10 	vmov	r0, r1, d0
 801089e:	e7e6      	b.n	801086e <sin+0x2e>
 80108a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108a4:	ed9d 0b00 	vldr	d0, [sp]
 80108a8:	f000 f982 	bl	8010bb0 <__kernel_cos>
 80108ac:	e7f5      	b.n	801089a <sin+0x5a>
 80108ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108b2:	ed9d 0b00 	vldr	d0, [sp]
 80108b6:	2001      	movs	r0, #1
 80108b8:	f000 fa42 	bl	8010d40 <__kernel_sin>
 80108bc:	ec53 2b10 	vmov	r2, r3, d0
 80108c0:	4610      	mov	r0, r2
 80108c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80108c6:	e7d2      	b.n	801086e <sin+0x2e>
 80108c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108cc:	ed9d 0b00 	vldr	d0, [sp]
 80108d0:	f000 f96e 	bl	8010bb0 <__kernel_cos>
 80108d4:	e7f2      	b.n	80108bc <sin+0x7c>
 80108d6:	bf00      	nop
	...
 80108e0:	3fe921fb 	.word	0x3fe921fb
 80108e4:	7fefffff 	.word	0x7fefffff

080108e8 <finite>:
 80108e8:	b082      	sub	sp, #8
 80108ea:	ed8d 0b00 	vstr	d0, [sp]
 80108ee:	9801      	ldr	r0, [sp, #4]
 80108f0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80108f4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80108f8:	0fc0      	lsrs	r0, r0, #31
 80108fa:	b002      	add	sp, #8
 80108fc:	4770      	bx	lr

080108fe <fmax>:
 80108fe:	b508      	push	{r3, lr}
 8010900:	ed2d 8b04 	vpush	{d8-d9}
 8010904:	eeb0 8a40 	vmov.f32	s16, s0
 8010908:	eef0 8a60 	vmov.f32	s17, s1
 801090c:	eeb0 9a41 	vmov.f32	s18, s2
 8010910:	eef0 9a61 	vmov.f32	s19, s3
 8010914:	f000 f848 	bl	80109a8 <__fpclassifyd>
 8010918:	b950      	cbnz	r0, 8010930 <fmax+0x32>
 801091a:	eeb0 8a49 	vmov.f32	s16, s18
 801091e:	eef0 8a69 	vmov.f32	s17, s19
 8010922:	eeb0 0a48 	vmov.f32	s0, s16
 8010926:	eef0 0a68 	vmov.f32	s1, s17
 801092a:	ecbd 8b04 	vpop	{d8-d9}
 801092e:	bd08      	pop	{r3, pc}
 8010930:	eeb0 0a49 	vmov.f32	s0, s18
 8010934:	eef0 0a69 	vmov.f32	s1, s19
 8010938:	f000 f836 	bl	80109a8 <__fpclassifyd>
 801093c:	2800      	cmp	r0, #0
 801093e:	d0f0      	beq.n	8010922 <fmax+0x24>
 8010940:	ec53 2b19 	vmov	r2, r3, d9
 8010944:	ec51 0b18 	vmov	r0, r1, d8
 8010948:	f7f0 f8e6 	bl	8000b18 <__aeabi_dcmpgt>
 801094c:	2800      	cmp	r0, #0
 801094e:	d0e4      	beq.n	801091a <fmax+0x1c>
 8010950:	e7e7      	b.n	8010922 <fmax+0x24>

08010952 <fmin>:
 8010952:	b508      	push	{r3, lr}
 8010954:	ed2d 8b04 	vpush	{d8-d9}
 8010958:	eeb0 8a40 	vmov.f32	s16, s0
 801095c:	eef0 8a60 	vmov.f32	s17, s1
 8010960:	eeb0 9a41 	vmov.f32	s18, s2
 8010964:	eef0 9a61 	vmov.f32	s19, s3
 8010968:	f000 f81e 	bl	80109a8 <__fpclassifyd>
 801096c:	b950      	cbnz	r0, 8010984 <fmin+0x32>
 801096e:	eeb0 8a49 	vmov.f32	s16, s18
 8010972:	eef0 8a69 	vmov.f32	s17, s19
 8010976:	eeb0 0a48 	vmov.f32	s0, s16
 801097a:	eef0 0a68 	vmov.f32	s1, s17
 801097e:	ecbd 8b04 	vpop	{d8-d9}
 8010982:	bd08      	pop	{r3, pc}
 8010984:	eeb0 0a49 	vmov.f32	s0, s18
 8010988:	eef0 0a69 	vmov.f32	s1, s19
 801098c:	f000 f80c 	bl	80109a8 <__fpclassifyd>
 8010990:	2800      	cmp	r0, #0
 8010992:	d0f0      	beq.n	8010976 <fmin+0x24>
 8010994:	ec53 2b19 	vmov	r2, r3, d9
 8010998:	ec51 0b18 	vmov	r0, r1, d8
 801099c:	f7f0 f89e 	bl	8000adc <__aeabi_dcmplt>
 80109a0:	2800      	cmp	r0, #0
 80109a2:	d0e4      	beq.n	801096e <fmin+0x1c>
 80109a4:	e7e7      	b.n	8010976 <fmin+0x24>
	...

080109a8 <__fpclassifyd>:
 80109a8:	ec51 0b10 	vmov	r0, r1, d0
 80109ac:	b510      	push	{r4, lr}
 80109ae:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 80109b2:	460b      	mov	r3, r1
 80109b4:	d019      	beq.n	80109ea <__fpclassifyd+0x42>
 80109b6:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 80109ba:	490e      	ldr	r1, [pc, #56]	@ (80109f4 <__fpclassifyd+0x4c>)
 80109bc:	428a      	cmp	r2, r1
 80109be:	d90e      	bls.n	80109de <__fpclassifyd+0x36>
 80109c0:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 80109c4:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 80109c8:	428a      	cmp	r2, r1
 80109ca:	d908      	bls.n	80109de <__fpclassifyd+0x36>
 80109cc:	4a0a      	ldr	r2, [pc, #40]	@ (80109f8 <__fpclassifyd+0x50>)
 80109ce:	4213      	tst	r3, r2
 80109d0:	d007      	beq.n	80109e2 <__fpclassifyd+0x3a>
 80109d2:	4294      	cmp	r4, r2
 80109d4:	d107      	bne.n	80109e6 <__fpclassifyd+0x3e>
 80109d6:	fab0 f080 	clz	r0, r0
 80109da:	0940      	lsrs	r0, r0, #5
 80109dc:	bd10      	pop	{r4, pc}
 80109de:	2004      	movs	r0, #4
 80109e0:	e7fc      	b.n	80109dc <__fpclassifyd+0x34>
 80109e2:	2003      	movs	r0, #3
 80109e4:	e7fa      	b.n	80109dc <__fpclassifyd+0x34>
 80109e6:	2000      	movs	r0, #0
 80109e8:	e7f8      	b.n	80109dc <__fpclassifyd+0x34>
 80109ea:	2800      	cmp	r0, #0
 80109ec:	d1ee      	bne.n	80109cc <__fpclassifyd+0x24>
 80109ee:	2002      	movs	r0, #2
 80109f0:	e7f4      	b.n	80109dc <__fpclassifyd+0x34>
 80109f2:	bf00      	nop
 80109f4:	7fdfffff 	.word	0x7fdfffff
 80109f8:	7ff00000 	.word	0x7ff00000

080109fc <__ieee754_sqrt>:
 80109fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a00:	4a68      	ldr	r2, [pc, #416]	@ (8010ba4 <__ieee754_sqrt+0x1a8>)
 8010a02:	ec55 4b10 	vmov	r4, r5, d0
 8010a06:	43aa      	bics	r2, r5
 8010a08:	462b      	mov	r3, r5
 8010a0a:	4621      	mov	r1, r4
 8010a0c:	d110      	bne.n	8010a30 <__ieee754_sqrt+0x34>
 8010a0e:	4622      	mov	r2, r4
 8010a10:	4620      	mov	r0, r4
 8010a12:	4629      	mov	r1, r5
 8010a14:	f7ef fdf0 	bl	80005f8 <__aeabi_dmul>
 8010a18:	4602      	mov	r2, r0
 8010a1a:	460b      	mov	r3, r1
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	4629      	mov	r1, r5
 8010a20:	f7ef fc34 	bl	800028c <__adddf3>
 8010a24:	4604      	mov	r4, r0
 8010a26:	460d      	mov	r5, r1
 8010a28:	ec45 4b10 	vmov	d0, r4, r5
 8010a2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a30:	2d00      	cmp	r5, #0
 8010a32:	dc0e      	bgt.n	8010a52 <__ieee754_sqrt+0x56>
 8010a34:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010a38:	4322      	orrs	r2, r4
 8010a3a:	d0f5      	beq.n	8010a28 <__ieee754_sqrt+0x2c>
 8010a3c:	b19d      	cbz	r5, 8010a66 <__ieee754_sqrt+0x6a>
 8010a3e:	4622      	mov	r2, r4
 8010a40:	4620      	mov	r0, r4
 8010a42:	4629      	mov	r1, r5
 8010a44:	f7ef fc20 	bl	8000288 <__aeabi_dsub>
 8010a48:	4602      	mov	r2, r0
 8010a4a:	460b      	mov	r3, r1
 8010a4c:	f7ef fefe 	bl	800084c <__aeabi_ddiv>
 8010a50:	e7e8      	b.n	8010a24 <__ieee754_sqrt+0x28>
 8010a52:	152a      	asrs	r2, r5, #20
 8010a54:	d115      	bne.n	8010a82 <__ieee754_sqrt+0x86>
 8010a56:	2000      	movs	r0, #0
 8010a58:	e009      	b.n	8010a6e <__ieee754_sqrt+0x72>
 8010a5a:	0acb      	lsrs	r3, r1, #11
 8010a5c:	3a15      	subs	r2, #21
 8010a5e:	0549      	lsls	r1, r1, #21
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d0fa      	beq.n	8010a5a <__ieee754_sqrt+0x5e>
 8010a64:	e7f7      	b.n	8010a56 <__ieee754_sqrt+0x5a>
 8010a66:	462a      	mov	r2, r5
 8010a68:	e7fa      	b.n	8010a60 <__ieee754_sqrt+0x64>
 8010a6a:	005b      	lsls	r3, r3, #1
 8010a6c:	3001      	adds	r0, #1
 8010a6e:	02dc      	lsls	r4, r3, #11
 8010a70:	d5fb      	bpl.n	8010a6a <__ieee754_sqrt+0x6e>
 8010a72:	1e44      	subs	r4, r0, #1
 8010a74:	1b12      	subs	r2, r2, r4
 8010a76:	f1c0 0420 	rsb	r4, r0, #32
 8010a7a:	fa21 f404 	lsr.w	r4, r1, r4
 8010a7e:	4323      	orrs	r3, r4
 8010a80:	4081      	lsls	r1, r0
 8010a82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a86:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010a8e:	07d2      	lsls	r2, r2, #31
 8010a90:	bf5c      	itt	pl
 8010a92:	005b      	lslpl	r3, r3, #1
 8010a94:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010a98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010a9c:	bf58      	it	pl
 8010a9e:	0049      	lslpl	r1, r1, #1
 8010aa0:	2600      	movs	r6, #0
 8010aa2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010aa6:	106d      	asrs	r5, r5, #1
 8010aa8:	0049      	lsls	r1, r1, #1
 8010aaa:	2016      	movs	r0, #22
 8010aac:	4632      	mov	r2, r6
 8010aae:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010ab2:	1917      	adds	r7, r2, r4
 8010ab4:	429f      	cmp	r7, r3
 8010ab6:	bfde      	ittt	le
 8010ab8:	193a      	addle	r2, r7, r4
 8010aba:	1bdb      	suble	r3, r3, r7
 8010abc:	1936      	addle	r6, r6, r4
 8010abe:	0fcf      	lsrs	r7, r1, #31
 8010ac0:	3801      	subs	r0, #1
 8010ac2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010ac6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010aca:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010ace:	d1f0      	bne.n	8010ab2 <__ieee754_sqrt+0xb6>
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	2720      	movs	r7, #32
 8010ad4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	eb00 0e0c 	add.w	lr, r0, ip
 8010ade:	db02      	blt.n	8010ae6 <__ieee754_sqrt+0xea>
 8010ae0:	d113      	bne.n	8010b0a <__ieee754_sqrt+0x10e>
 8010ae2:	458e      	cmp	lr, r1
 8010ae4:	d811      	bhi.n	8010b0a <__ieee754_sqrt+0x10e>
 8010ae6:	f1be 0f00 	cmp.w	lr, #0
 8010aea:	eb0e 000c 	add.w	r0, lr, ip
 8010aee:	da42      	bge.n	8010b76 <__ieee754_sqrt+0x17a>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	db40      	blt.n	8010b76 <__ieee754_sqrt+0x17a>
 8010af4:	f102 0801 	add.w	r8, r2, #1
 8010af8:	1a9b      	subs	r3, r3, r2
 8010afa:	458e      	cmp	lr, r1
 8010afc:	bf88      	it	hi
 8010afe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010b02:	eba1 010e 	sub.w	r1, r1, lr
 8010b06:	4464      	add	r4, ip
 8010b08:	4642      	mov	r2, r8
 8010b0a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010b0e:	3f01      	subs	r7, #1
 8010b10:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010b14:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010b18:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010b1c:	d1dc      	bne.n	8010ad8 <__ieee754_sqrt+0xdc>
 8010b1e:	4319      	orrs	r1, r3
 8010b20:	d01b      	beq.n	8010b5a <__ieee754_sqrt+0x15e>
 8010b22:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010ba8 <__ieee754_sqrt+0x1ac>
 8010b26:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010bac <__ieee754_sqrt+0x1b0>
 8010b2a:	e9da 0100 	ldrd	r0, r1, [sl]
 8010b2e:	e9db 2300 	ldrd	r2, r3, [fp]
 8010b32:	f7ef fba9 	bl	8000288 <__aeabi_dsub>
 8010b36:	e9da 8900 	ldrd	r8, r9, [sl]
 8010b3a:	4602      	mov	r2, r0
 8010b3c:	460b      	mov	r3, r1
 8010b3e:	4640      	mov	r0, r8
 8010b40:	4649      	mov	r1, r9
 8010b42:	f7ef ffd5 	bl	8000af0 <__aeabi_dcmple>
 8010b46:	b140      	cbz	r0, 8010b5a <__ieee754_sqrt+0x15e>
 8010b48:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010b4c:	e9da 0100 	ldrd	r0, r1, [sl]
 8010b50:	e9db 2300 	ldrd	r2, r3, [fp]
 8010b54:	d111      	bne.n	8010b7a <__ieee754_sqrt+0x17e>
 8010b56:	3601      	adds	r6, #1
 8010b58:	463c      	mov	r4, r7
 8010b5a:	1072      	asrs	r2, r6, #1
 8010b5c:	0863      	lsrs	r3, r4, #1
 8010b5e:	07f1      	lsls	r1, r6, #31
 8010b60:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010b64:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010b68:	bf48      	it	mi
 8010b6a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010b6e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010b72:	4618      	mov	r0, r3
 8010b74:	e756      	b.n	8010a24 <__ieee754_sqrt+0x28>
 8010b76:	4690      	mov	r8, r2
 8010b78:	e7be      	b.n	8010af8 <__ieee754_sqrt+0xfc>
 8010b7a:	f7ef fb87 	bl	800028c <__adddf3>
 8010b7e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010b82:	4602      	mov	r2, r0
 8010b84:	460b      	mov	r3, r1
 8010b86:	4640      	mov	r0, r8
 8010b88:	4649      	mov	r1, r9
 8010b8a:	f7ef ffa7 	bl	8000adc <__aeabi_dcmplt>
 8010b8e:	b120      	cbz	r0, 8010b9a <__ieee754_sqrt+0x19e>
 8010b90:	1ca0      	adds	r0, r4, #2
 8010b92:	bf08      	it	eq
 8010b94:	3601      	addeq	r6, #1
 8010b96:	3402      	adds	r4, #2
 8010b98:	e7df      	b.n	8010b5a <__ieee754_sqrt+0x15e>
 8010b9a:	1c63      	adds	r3, r4, #1
 8010b9c:	f023 0401 	bic.w	r4, r3, #1
 8010ba0:	e7db      	b.n	8010b5a <__ieee754_sqrt+0x15e>
 8010ba2:	bf00      	nop
 8010ba4:	7ff00000 	.word	0x7ff00000
 8010ba8:	200002c0 	.word	0x200002c0
 8010bac:	200002b8 	.word	0x200002b8

08010bb0 <__kernel_cos>:
 8010bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bb4:	ec57 6b10 	vmov	r6, r7, d0
 8010bb8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010bbc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8010bc0:	ed8d 1b00 	vstr	d1, [sp]
 8010bc4:	d206      	bcs.n	8010bd4 <__kernel_cos+0x24>
 8010bc6:	4630      	mov	r0, r6
 8010bc8:	4639      	mov	r1, r7
 8010bca:	f7ef ffc5 	bl	8000b58 <__aeabi_d2iz>
 8010bce:	2800      	cmp	r0, #0
 8010bd0:	f000 8088 	beq.w	8010ce4 <__kernel_cos+0x134>
 8010bd4:	4632      	mov	r2, r6
 8010bd6:	463b      	mov	r3, r7
 8010bd8:	4630      	mov	r0, r6
 8010bda:	4639      	mov	r1, r7
 8010bdc:	f7ef fd0c 	bl	80005f8 <__aeabi_dmul>
 8010be0:	4b51      	ldr	r3, [pc, #324]	@ (8010d28 <__kernel_cos+0x178>)
 8010be2:	2200      	movs	r2, #0
 8010be4:	4604      	mov	r4, r0
 8010be6:	460d      	mov	r5, r1
 8010be8:	f7ef fd06 	bl	80005f8 <__aeabi_dmul>
 8010bec:	a340      	add	r3, pc, #256	@ (adr r3, 8010cf0 <__kernel_cos+0x140>)
 8010bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf2:	4682      	mov	sl, r0
 8010bf4:	468b      	mov	fp, r1
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	4629      	mov	r1, r5
 8010bfa:	f7ef fcfd 	bl	80005f8 <__aeabi_dmul>
 8010bfe:	a33e      	add	r3, pc, #248	@ (adr r3, 8010cf8 <__kernel_cos+0x148>)
 8010c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c04:	f7ef fb42 	bl	800028c <__adddf3>
 8010c08:	4622      	mov	r2, r4
 8010c0a:	462b      	mov	r3, r5
 8010c0c:	f7ef fcf4 	bl	80005f8 <__aeabi_dmul>
 8010c10:	a33b      	add	r3, pc, #236	@ (adr r3, 8010d00 <__kernel_cos+0x150>)
 8010c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c16:	f7ef fb37 	bl	8000288 <__aeabi_dsub>
 8010c1a:	4622      	mov	r2, r4
 8010c1c:	462b      	mov	r3, r5
 8010c1e:	f7ef fceb 	bl	80005f8 <__aeabi_dmul>
 8010c22:	a339      	add	r3, pc, #228	@ (adr r3, 8010d08 <__kernel_cos+0x158>)
 8010c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c28:	f7ef fb30 	bl	800028c <__adddf3>
 8010c2c:	4622      	mov	r2, r4
 8010c2e:	462b      	mov	r3, r5
 8010c30:	f7ef fce2 	bl	80005f8 <__aeabi_dmul>
 8010c34:	a336      	add	r3, pc, #216	@ (adr r3, 8010d10 <__kernel_cos+0x160>)
 8010c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3a:	f7ef fb25 	bl	8000288 <__aeabi_dsub>
 8010c3e:	4622      	mov	r2, r4
 8010c40:	462b      	mov	r3, r5
 8010c42:	f7ef fcd9 	bl	80005f8 <__aeabi_dmul>
 8010c46:	a334      	add	r3, pc, #208	@ (adr r3, 8010d18 <__kernel_cos+0x168>)
 8010c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4c:	f7ef fb1e 	bl	800028c <__adddf3>
 8010c50:	4622      	mov	r2, r4
 8010c52:	462b      	mov	r3, r5
 8010c54:	f7ef fcd0 	bl	80005f8 <__aeabi_dmul>
 8010c58:	4622      	mov	r2, r4
 8010c5a:	462b      	mov	r3, r5
 8010c5c:	f7ef fccc 	bl	80005f8 <__aeabi_dmul>
 8010c60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c64:	4604      	mov	r4, r0
 8010c66:	460d      	mov	r5, r1
 8010c68:	4630      	mov	r0, r6
 8010c6a:	4639      	mov	r1, r7
 8010c6c:	f7ef fcc4 	bl	80005f8 <__aeabi_dmul>
 8010c70:	460b      	mov	r3, r1
 8010c72:	4602      	mov	r2, r0
 8010c74:	4629      	mov	r1, r5
 8010c76:	4620      	mov	r0, r4
 8010c78:	f7ef fb06 	bl	8000288 <__aeabi_dsub>
 8010c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8010d2c <__kernel_cos+0x17c>)
 8010c7e:	4598      	cmp	r8, r3
 8010c80:	4606      	mov	r6, r0
 8010c82:	460f      	mov	r7, r1
 8010c84:	d810      	bhi.n	8010ca8 <__kernel_cos+0xf8>
 8010c86:	4602      	mov	r2, r0
 8010c88:	460b      	mov	r3, r1
 8010c8a:	4650      	mov	r0, sl
 8010c8c:	4659      	mov	r1, fp
 8010c8e:	f7ef fafb 	bl	8000288 <__aeabi_dsub>
 8010c92:	460b      	mov	r3, r1
 8010c94:	4926      	ldr	r1, [pc, #152]	@ (8010d30 <__kernel_cos+0x180>)
 8010c96:	4602      	mov	r2, r0
 8010c98:	2000      	movs	r0, #0
 8010c9a:	f7ef faf5 	bl	8000288 <__aeabi_dsub>
 8010c9e:	ec41 0b10 	vmov	d0, r0, r1
 8010ca2:	b003      	add	sp, #12
 8010ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca8:	4b22      	ldr	r3, [pc, #136]	@ (8010d34 <__kernel_cos+0x184>)
 8010caa:	4921      	ldr	r1, [pc, #132]	@ (8010d30 <__kernel_cos+0x180>)
 8010cac:	4598      	cmp	r8, r3
 8010cae:	bf8c      	ite	hi
 8010cb0:	4d21      	ldrhi	r5, [pc, #132]	@ (8010d38 <__kernel_cos+0x188>)
 8010cb2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8010cb6:	2400      	movs	r4, #0
 8010cb8:	4622      	mov	r2, r4
 8010cba:	462b      	mov	r3, r5
 8010cbc:	2000      	movs	r0, #0
 8010cbe:	f7ef fae3 	bl	8000288 <__aeabi_dsub>
 8010cc2:	4622      	mov	r2, r4
 8010cc4:	4680      	mov	r8, r0
 8010cc6:	4689      	mov	r9, r1
 8010cc8:	462b      	mov	r3, r5
 8010cca:	4650      	mov	r0, sl
 8010ccc:	4659      	mov	r1, fp
 8010cce:	f7ef fadb 	bl	8000288 <__aeabi_dsub>
 8010cd2:	4632      	mov	r2, r6
 8010cd4:	463b      	mov	r3, r7
 8010cd6:	f7ef fad7 	bl	8000288 <__aeabi_dsub>
 8010cda:	4602      	mov	r2, r0
 8010cdc:	460b      	mov	r3, r1
 8010cde:	4640      	mov	r0, r8
 8010ce0:	4649      	mov	r1, r9
 8010ce2:	e7da      	b.n	8010c9a <__kernel_cos+0xea>
 8010ce4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8010d20 <__kernel_cos+0x170>
 8010ce8:	e7db      	b.n	8010ca2 <__kernel_cos+0xf2>
 8010cea:	bf00      	nop
 8010cec:	f3af 8000 	nop.w
 8010cf0:	be8838d4 	.word	0xbe8838d4
 8010cf4:	bda8fae9 	.word	0xbda8fae9
 8010cf8:	bdb4b1c4 	.word	0xbdb4b1c4
 8010cfc:	3e21ee9e 	.word	0x3e21ee9e
 8010d00:	809c52ad 	.word	0x809c52ad
 8010d04:	3e927e4f 	.word	0x3e927e4f
 8010d08:	19cb1590 	.word	0x19cb1590
 8010d0c:	3efa01a0 	.word	0x3efa01a0
 8010d10:	16c15177 	.word	0x16c15177
 8010d14:	3f56c16c 	.word	0x3f56c16c
 8010d18:	5555554c 	.word	0x5555554c
 8010d1c:	3fa55555 	.word	0x3fa55555
 8010d20:	00000000 	.word	0x00000000
 8010d24:	3ff00000 	.word	0x3ff00000
 8010d28:	3fe00000 	.word	0x3fe00000
 8010d2c:	3fd33332 	.word	0x3fd33332
 8010d30:	3ff00000 	.word	0x3ff00000
 8010d34:	3fe90000 	.word	0x3fe90000
 8010d38:	3fd20000 	.word	0x3fd20000
 8010d3c:	00000000 	.word	0x00000000

08010d40 <__kernel_sin>:
 8010d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d44:	ec55 4b10 	vmov	r4, r5, d0
 8010d48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010d4c:	b085      	sub	sp, #20
 8010d4e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8010d52:	ed8d 1b02 	vstr	d1, [sp, #8]
 8010d56:	4680      	mov	r8, r0
 8010d58:	d205      	bcs.n	8010d66 <__kernel_sin+0x26>
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	4629      	mov	r1, r5
 8010d5e:	f7ef fefb 	bl	8000b58 <__aeabi_d2iz>
 8010d62:	2800      	cmp	r0, #0
 8010d64:	d052      	beq.n	8010e0c <__kernel_sin+0xcc>
 8010d66:	4622      	mov	r2, r4
 8010d68:	462b      	mov	r3, r5
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	f7ef fc43 	bl	80005f8 <__aeabi_dmul>
 8010d72:	4682      	mov	sl, r0
 8010d74:	468b      	mov	fp, r1
 8010d76:	4602      	mov	r2, r0
 8010d78:	460b      	mov	r3, r1
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	4629      	mov	r1, r5
 8010d7e:	f7ef fc3b 	bl	80005f8 <__aeabi_dmul>
 8010d82:	a342      	add	r3, pc, #264	@ (adr r3, 8010e8c <__kernel_sin+0x14c>)
 8010d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d88:	e9cd 0100 	strd	r0, r1, [sp]
 8010d8c:	4650      	mov	r0, sl
 8010d8e:	4659      	mov	r1, fp
 8010d90:	f7ef fc32 	bl	80005f8 <__aeabi_dmul>
 8010d94:	a33f      	add	r3, pc, #252	@ (adr r3, 8010e94 <__kernel_sin+0x154>)
 8010d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d9a:	f7ef fa75 	bl	8000288 <__aeabi_dsub>
 8010d9e:	4652      	mov	r2, sl
 8010da0:	465b      	mov	r3, fp
 8010da2:	f7ef fc29 	bl	80005f8 <__aeabi_dmul>
 8010da6:	a33d      	add	r3, pc, #244	@ (adr r3, 8010e9c <__kernel_sin+0x15c>)
 8010da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dac:	f7ef fa6e 	bl	800028c <__adddf3>
 8010db0:	4652      	mov	r2, sl
 8010db2:	465b      	mov	r3, fp
 8010db4:	f7ef fc20 	bl	80005f8 <__aeabi_dmul>
 8010db8:	a33a      	add	r3, pc, #232	@ (adr r3, 8010ea4 <__kernel_sin+0x164>)
 8010dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dbe:	f7ef fa63 	bl	8000288 <__aeabi_dsub>
 8010dc2:	4652      	mov	r2, sl
 8010dc4:	465b      	mov	r3, fp
 8010dc6:	f7ef fc17 	bl	80005f8 <__aeabi_dmul>
 8010dca:	a338      	add	r3, pc, #224	@ (adr r3, 8010eac <__kernel_sin+0x16c>)
 8010dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd0:	f7ef fa5c 	bl	800028c <__adddf3>
 8010dd4:	4606      	mov	r6, r0
 8010dd6:	460f      	mov	r7, r1
 8010dd8:	f1b8 0f00 	cmp.w	r8, #0
 8010ddc:	d11b      	bne.n	8010e16 <__kernel_sin+0xd6>
 8010dde:	4602      	mov	r2, r0
 8010de0:	460b      	mov	r3, r1
 8010de2:	4650      	mov	r0, sl
 8010de4:	4659      	mov	r1, fp
 8010de6:	f7ef fc07 	bl	80005f8 <__aeabi_dmul>
 8010dea:	a325      	add	r3, pc, #148	@ (adr r3, 8010e80 <__kernel_sin+0x140>)
 8010dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df0:	f7ef fa4a 	bl	8000288 <__aeabi_dsub>
 8010df4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010df8:	f7ef fbfe 	bl	80005f8 <__aeabi_dmul>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	460b      	mov	r3, r1
 8010e00:	4620      	mov	r0, r4
 8010e02:	4629      	mov	r1, r5
 8010e04:	f7ef fa42 	bl	800028c <__adddf3>
 8010e08:	4604      	mov	r4, r0
 8010e0a:	460d      	mov	r5, r1
 8010e0c:	ec45 4b10 	vmov	d0, r4, r5
 8010e10:	b005      	add	sp, #20
 8010e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8010e88 <__kernel_sin+0x148>)
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	f7ef fbeb 	bl	80005f8 <__aeabi_dmul>
 8010e22:	4632      	mov	r2, r6
 8010e24:	4680      	mov	r8, r0
 8010e26:	4689      	mov	r9, r1
 8010e28:	463b      	mov	r3, r7
 8010e2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e2e:	f7ef fbe3 	bl	80005f8 <__aeabi_dmul>
 8010e32:	4602      	mov	r2, r0
 8010e34:	460b      	mov	r3, r1
 8010e36:	4640      	mov	r0, r8
 8010e38:	4649      	mov	r1, r9
 8010e3a:	f7ef fa25 	bl	8000288 <__aeabi_dsub>
 8010e3e:	4652      	mov	r2, sl
 8010e40:	465b      	mov	r3, fp
 8010e42:	f7ef fbd9 	bl	80005f8 <__aeabi_dmul>
 8010e46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e4a:	f7ef fa1d 	bl	8000288 <__aeabi_dsub>
 8010e4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8010e80 <__kernel_sin+0x140>)
 8010e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e54:	4606      	mov	r6, r0
 8010e56:	460f      	mov	r7, r1
 8010e58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e5c:	f7ef fbcc 	bl	80005f8 <__aeabi_dmul>
 8010e60:	4602      	mov	r2, r0
 8010e62:	460b      	mov	r3, r1
 8010e64:	4630      	mov	r0, r6
 8010e66:	4639      	mov	r1, r7
 8010e68:	f7ef fa10 	bl	800028c <__adddf3>
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	460b      	mov	r3, r1
 8010e70:	4620      	mov	r0, r4
 8010e72:	4629      	mov	r1, r5
 8010e74:	f7ef fa08 	bl	8000288 <__aeabi_dsub>
 8010e78:	e7c6      	b.n	8010e08 <__kernel_sin+0xc8>
 8010e7a:	bf00      	nop
 8010e7c:	f3af 8000 	nop.w
 8010e80:	55555549 	.word	0x55555549
 8010e84:	3fc55555 	.word	0x3fc55555
 8010e88:	3fe00000 	.word	0x3fe00000
 8010e8c:	5acfd57c 	.word	0x5acfd57c
 8010e90:	3de5d93a 	.word	0x3de5d93a
 8010e94:	8a2b9ceb 	.word	0x8a2b9ceb
 8010e98:	3e5ae5e6 	.word	0x3e5ae5e6
 8010e9c:	57b1fe7d 	.word	0x57b1fe7d
 8010ea0:	3ec71de3 	.word	0x3ec71de3
 8010ea4:	19c161d5 	.word	0x19c161d5
 8010ea8:	3f2a01a0 	.word	0x3f2a01a0
 8010eac:	1110f8a6 	.word	0x1110f8a6
 8010eb0:	3f811111 	.word	0x3f811111
 8010eb4:	00000000 	.word	0x00000000

08010eb8 <__ieee754_atan2>:
 8010eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ebc:	ec57 6b11 	vmov	r6, r7, d1
 8010ec0:	4273      	negs	r3, r6
 8010ec2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8011040 <__ieee754_atan2+0x188>
 8010ec6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8010eca:	4333      	orrs	r3, r6
 8010ecc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010ed0:	4543      	cmp	r3, r8
 8010ed2:	ec51 0b10 	vmov	r0, r1, d0
 8010ed6:	4635      	mov	r5, r6
 8010ed8:	d809      	bhi.n	8010eee <__ieee754_atan2+0x36>
 8010eda:	4244      	negs	r4, r0
 8010edc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010ee0:	4304      	orrs	r4, r0
 8010ee2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010ee6:	4544      	cmp	r4, r8
 8010ee8:	468e      	mov	lr, r1
 8010eea:	4681      	mov	r9, r0
 8010eec:	d907      	bls.n	8010efe <__ieee754_atan2+0x46>
 8010eee:	4632      	mov	r2, r6
 8010ef0:	463b      	mov	r3, r7
 8010ef2:	f7ef f9cb 	bl	800028c <__adddf3>
 8010ef6:	ec41 0b10 	vmov	d0, r0, r1
 8010efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010efe:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8010f02:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8010f06:	4334      	orrs	r4, r6
 8010f08:	d103      	bne.n	8010f12 <__ieee754_atan2+0x5a>
 8010f0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f0e:	f000 bbab 	b.w	8011668 <atan>
 8010f12:	17bc      	asrs	r4, r7, #30
 8010f14:	f004 0402 	and.w	r4, r4, #2
 8010f18:	ea53 0909 	orrs.w	r9, r3, r9
 8010f1c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010f20:	d107      	bne.n	8010f32 <__ieee754_atan2+0x7a>
 8010f22:	2c02      	cmp	r4, #2
 8010f24:	d05f      	beq.n	8010fe6 <__ieee754_atan2+0x12e>
 8010f26:	2c03      	cmp	r4, #3
 8010f28:	d1e5      	bne.n	8010ef6 <__ieee754_atan2+0x3e>
 8010f2a:	a141      	add	r1, pc, #260	@ (adr r1, 8011030 <__ieee754_atan2+0x178>)
 8010f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f30:	e7e1      	b.n	8010ef6 <__ieee754_atan2+0x3e>
 8010f32:	4315      	orrs	r5, r2
 8010f34:	d106      	bne.n	8010f44 <__ieee754_atan2+0x8c>
 8010f36:	f1be 0f00 	cmp.w	lr, #0
 8010f3a:	da5f      	bge.n	8010ffc <__ieee754_atan2+0x144>
 8010f3c:	a13e      	add	r1, pc, #248	@ (adr r1, 8011038 <__ieee754_atan2+0x180>)
 8010f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f42:	e7d8      	b.n	8010ef6 <__ieee754_atan2+0x3e>
 8010f44:	4542      	cmp	r2, r8
 8010f46:	d10f      	bne.n	8010f68 <__ieee754_atan2+0xb0>
 8010f48:	4293      	cmp	r3, r2
 8010f4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8010f4e:	d107      	bne.n	8010f60 <__ieee754_atan2+0xa8>
 8010f50:	2c02      	cmp	r4, #2
 8010f52:	d84c      	bhi.n	8010fee <__ieee754_atan2+0x136>
 8010f54:	4b34      	ldr	r3, [pc, #208]	@ (8011028 <__ieee754_atan2+0x170>)
 8010f56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010f5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010f5e:	e7ca      	b.n	8010ef6 <__ieee754_atan2+0x3e>
 8010f60:	2c02      	cmp	r4, #2
 8010f62:	d848      	bhi.n	8010ff6 <__ieee754_atan2+0x13e>
 8010f64:	4b31      	ldr	r3, [pc, #196]	@ (801102c <__ieee754_atan2+0x174>)
 8010f66:	e7f6      	b.n	8010f56 <__ieee754_atan2+0x9e>
 8010f68:	4543      	cmp	r3, r8
 8010f6a:	d0e4      	beq.n	8010f36 <__ieee754_atan2+0x7e>
 8010f6c:	1a9b      	subs	r3, r3, r2
 8010f6e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8010f72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010f76:	da1e      	bge.n	8010fb6 <__ieee754_atan2+0xfe>
 8010f78:	2f00      	cmp	r7, #0
 8010f7a:	da01      	bge.n	8010f80 <__ieee754_atan2+0xc8>
 8010f7c:	323c      	adds	r2, #60	@ 0x3c
 8010f7e:	db1e      	blt.n	8010fbe <__ieee754_atan2+0x106>
 8010f80:	4632      	mov	r2, r6
 8010f82:	463b      	mov	r3, r7
 8010f84:	f7ef fc62 	bl	800084c <__aeabi_ddiv>
 8010f88:	ec41 0b10 	vmov	d0, r0, r1
 8010f8c:	f000 fd04 	bl	8011998 <fabs>
 8010f90:	f000 fb6a 	bl	8011668 <atan>
 8010f94:	ec51 0b10 	vmov	r0, r1, d0
 8010f98:	2c01      	cmp	r4, #1
 8010f9a:	d013      	beq.n	8010fc4 <__ieee754_atan2+0x10c>
 8010f9c:	2c02      	cmp	r4, #2
 8010f9e:	d015      	beq.n	8010fcc <__ieee754_atan2+0x114>
 8010fa0:	2c00      	cmp	r4, #0
 8010fa2:	d0a8      	beq.n	8010ef6 <__ieee754_atan2+0x3e>
 8010fa4:	a318      	add	r3, pc, #96	@ (adr r3, 8011008 <__ieee754_atan2+0x150>)
 8010fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010faa:	f7ef f96d 	bl	8000288 <__aeabi_dsub>
 8010fae:	a318      	add	r3, pc, #96	@ (adr r3, 8011010 <__ieee754_atan2+0x158>)
 8010fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb4:	e014      	b.n	8010fe0 <__ieee754_atan2+0x128>
 8010fb6:	a118      	add	r1, pc, #96	@ (adr r1, 8011018 <__ieee754_atan2+0x160>)
 8010fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fbc:	e7ec      	b.n	8010f98 <__ieee754_atan2+0xe0>
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	2100      	movs	r1, #0
 8010fc2:	e7e9      	b.n	8010f98 <__ieee754_atan2+0xe0>
 8010fc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010fc8:	4619      	mov	r1, r3
 8010fca:	e794      	b.n	8010ef6 <__ieee754_atan2+0x3e>
 8010fcc:	a30e      	add	r3, pc, #56	@ (adr r3, 8011008 <__ieee754_atan2+0x150>)
 8010fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd2:	f7ef f959 	bl	8000288 <__aeabi_dsub>
 8010fd6:	4602      	mov	r2, r0
 8010fd8:	460b      	mov	r3, r1
 8010fda:	a10d      	add	r1, pc, #52	@ (adr r1, 8011010 <__ieee754_atan2+0x158>)
 8010fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fe0:	f7ef f952 	bl	8000288 <__aeabi_dsub>
 8010fe4:	e787      	b.n	8010ef6 <__ieee754_atan2+0x3e>
 8010fe6:	a10a      	add	r1, pc, #40	@ (adr r1, 8011010 <__ieee754_atan2+0x158>)
 8010fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fec:	e783      	b.n	8010ef6 <__ieee754_atan2+0x3e>
 8010fee:	a10c      	add	r1, pc, #48	@ (adr r1, 8011020 <__ieee754_atan2+0x168>)
 8010ff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ff4:	e77f      	b.n	8010ef6 <__ieee754_atan2+0x3e>
 8010ff6:	2000      	movs	r0, #0
 8010ff8:	2100      	movs	r1, #0
 8010ffa:	e77c      	b.n	8010ef6 <__ieee754_atan2+0x3e>
 8010ffc:	a106      	add	r1, pc, #24	@ (adr r1, 8011018 <__ieee754_atan2+0x160>)
 8010ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011002:	e778      	b.n	8010ef6 <__ieee754_atan2+0x3e>
 8011004:	f3af 8000 	nop.w
 8011008:	33145c07 	.word	0x33145c07
 801100c:	3ca1a626 	.word	0x3ca1a626
 8011010:	54442d18 	.word	0x54442d18
 8011014:	400921fb 	.word	0x400921fb
 8011018:	54442d18 	.word	0x54442d18
 801101c:	3ff921fb 	.word	0x3ff921fb
 8011020:	54442d18 	.word	0x54442d18
 8011024:	3fe921fb 	.word	0x3fe921fb
 8011028:	08012900 	.word	0x08012900
 801102c:	080128e8 	.word	0x080128e8
 8011030:	54442d18 	.word	0x54442d18
 8011034:	c00921fb 	.word	0xc00921fb
 8011038:	54442d18 	.word	0x54442d18
 801103c:	bff921fb 	.word	0xbff921fb
 8011040:	7ff00000 	.word	0x7ff00000

08011044 <__ieee754_hypot>:
 8011044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011048:	ec51 0b10 	vmov	r0, r1, d0
 801104c:	ec53 2b11 	vmov	r2, r3, d1
 8011050:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 8011054:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8011058:	42a5      	cmp	r5, r4
 801105a:	b087      	sub	sp, #28
 801105c:	da05      	bge.n	801106a <__ieee754_hypot+0x26>
 801105e:	462e      	mov	r6, r5
 8011060:	4625      	mov	r5, r4
 8011062:	4634      	mov	r4, r6
 8011064:	4606      	mov	r6, r0
 8011066:	4610      	mov	r0, r2
 8011068:	4632      	mov	r2, r6
 801106a:	1b2b      	subs	r3, r5, r4
 801106c:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8011070:	4629      	mov	r1, r5
 8011072:	4682      	mov	sl, r0
 8011074:	46ab      	mov	fp, r5
 8011076:	4616      	mov	r6, r2
 8011078:	4627      	mov	r7, r4
 801107a:	dd05      	ble.n	8011088 <__ieee754_hypot+0x44>
 801107c:	4623      	mov	r3, r4
 801107e:	f7ef f905 	bl	800028c <__adddf3>
 8011082:	4682      	mov	sl, r0
 8011084:	468b      	mov	fp, r1
 8011086:	e016      	b.n	80110b6 <__ieee754_hypot+0x72>
 8011088:	4b75      	ldr	r3, [pc, #468]	@ (8011260 <__ieee754_hypot+0x21c>)
 801108a:	429d      	cmp	r5, r3
 801108c:	f340 8096 	ble.w	80111bc <__ieee754_hypot+0x178>
 8011090:	4b74      	ldr	r3, [pc, #464]	@ (8011264 <__ieee754_hypot+0x220>)
 8011092:	429d      	cmp	r5, r3
 8011094:	dd14      	ble.n	80110c0 <__ieee754_hypot+0x7c>
 8011096:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801109a:	4305      	orrs	r5, r0
 801109c:	d004      	beq.n	80110a8 <__ieee754_hypot+0x64>
 801109e:	4623      	mov	r3, r4
 80110a0:	f7ef f8f4 	bl	800028c <__adddf3>
 80110a4:	4682      	mov	sl, r0
 80110a6:	468b      	mov	fp, r1
 80110a8:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 80110ac:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 80110b0:	4334      	orrs	r4, r6
 80110b2:	f000 80d2 	beq.w	801125a <__ieee754_hypot+0x216>
 80110b6:	ec4b ab10 	vmov	d0, sl, fp
 80110ba:	b007      	add	sp, #28
 80110bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110c0:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 80110c4:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 80110c8:	46ab      	mov	fp, r5
 80110ca:	4627      	mov	r7, r4
 80110cc:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80110d0:	9301      	str	r3, [sp, #4]
 80110d2:	4b65      	ldr	r3, [pc, #404]	@ (8011268 <__ieee754_hypot+0x224>)
 80110d4:	429c      	cmp	r4, r3
 80110d6:	dc19      	bgt.n	801110c <__ieee754_hypot+0xc8>
 80110d8:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80110dc:	da70      	bge.n	80111c0 <__ieee754_hypot+0x17c>
 80110de:	4633      	mov	r3, r6
 80110e0:	4323      	orrs	r3, r4
 80110e2:	d0e8      	beq.n	80110b6 <__ieee754_hypot+0x72>
 80110e4:	4b61      	ldr	r3, [pc, #388]	@ (801126c <__ieee754_hypot+0x228>)
 80110e6:	2200      	movs	r2, #0
 80110e8:	4630      	mov	r0, r6
 80110ea:	4639      	mov	r1, r7
 80110ec:	f7ef fa84 	bl	80005f8 <__aeabi_dmul>
 80110f0:	4b5e      	ldr	r3, [pc, #376]	@ (801126c <__ieee754_hypot+0x228>)
 80110f2:	4606      	mov	r6, r0
 80110f4:	460f      	mov	r7, r1
 80110f6:	4650      	mov	r0, sl
 80110f8:	4659      	mov	r1, fp
 80110fa:	2200      	movs	r2, #0
 80110fc:	f7ef fa7c 	bl	80005f8 <__aeabi_dmul>
 8011100:	9b01      	ldr	r3, [sp, #4]
 8011102:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8011106:	4682      	mov	sl, r0
 8011108:	468b      	mov	fp, r1
 801110a:	9301      	str	r3, [sp, #4]
 801110c:	4632      	mov	r2, r6
 801110e:	463b      	mov	r3, r7
 8011110:	4650      	mov	r0, sl
 8011112:	4659      	mov	r1, fp
 8011114:	f7ef f8b8 	bl	8000288 <__aeabi_dsub>
 8011118:	4602      	mov	r2, r0
 801111a:	460b      	mov	r3, r1
 801111c:	4680      	mov	r8, r0
 801111e:	4689      	mov	r9, r1
 8011120:	4630      	mov	r0, r6
 8011122:	4639      	mov	r1, r7
 8011124:	f7ef fcda 	bl	8000adc <__aeabi_dcmplt>
 8011128:	2200      	movs	r2, #0
 801112a:	2800      	cmp	r0, #0
 801112c:	d053      	beq.n	80111d6 <__ieee754_hypot+0x192>
 801112e:	462b      	mov	r3, r5
 8011130:	4610      	mov	r0, r2
 8011132:	4629      	mov	r1, r5
 8011134:	4614      	mov	r4, r2
 8011136:	f7ef fa5f 	bl	80005f8 <__aeabi_dmul>
 801113a:	4632      	mov	r2, r6
 801113c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011140:	463b      	mov	r3, r7
 8011142:	4630      	mov	r0, r6
 8011144:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8011148:	f7ef fa56 	bl	80005f8 <__aeabi_dmul>
 801114c:	4622      	mov	r2, r4
 801114e:	4606      	mov	r6, r0
 8011150:	460f      	mov	r7, r1
 8011152:	462b      	mov	r3, r5
 8011154:	4650      	mov	r0, sl
 8011156:	4659      	mov	r1, fp
 8011158:	f7ef f898 	bl	800028c <__adddf3>
 801115c:	4622      	mov	r2, r4
 801115e:	4680      	mov	r8, r0
 8011160:	4689      	mov	r9, r1
 8011162:	462b      	mov	r3, r5
 8011164:	4650      	mov	r0, sl
 8011166:	4659      	mov	r1, fp
 8011168:	f7ef f88e 	bl	8000288 <__aeabi_dsub>
 801116c:	4602      	mov	r2, r0
 801116e:	460b      	mov	r3, r1
 8011170:	4640      	mov	r0, r8
 8011172:	4649      	mov	r1, r9
 8011174:	f7ef fa40 	bl	80005f8 <__aeabi_dmul>
 8011178:	4602      	mov	r2, r0
 801117a:	460b      	mov	r3, r1
 801117c:	4630      	mov	r0, r6
 801117e:	4639      	mov	r1, r7
 8011180:	f7ef f882 	bl	8000288 <__aeabi_dsub>
 8011184:	4602      	mov	r2, r0
 8011186:	460b      	mov	r3, r1
 8011188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801118c:	f7ef f87c 	bl	8000288 <__aeabi_dsub>
 8011190:	ec41 0b10 	vmov	d0, r0, r1
 8011194:	f7ff fc32 	bl	80109fc <__ieee754_sqrt>
 8011198:	9b01      	ldr	r3, [sp, #4]
 801119a:	ec5b ab10 	vmov	sl, fp, d0
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d089      	beq.n	80110b6 <__ieee754_hypot+0x72>
 80111a2:	051b      	lsls	r3, r3, #20
 80111a4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80111a8:	2000      	movs	r0, #0
 80111aa:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80111ae:	4602      	mov	r2, r0
 80111b0:	460b      	mov	r3, r1
 80111b2:	4650      	mov	r0, sl
 80111b4:	4659      	mov	r1, fp
 80111b6:	f7ef fa1f 	bl	80005f8 <__aeabi_dmul>
 80111ba:	e762      	b.n	8011082 <__ieee754_hypot+0x3e>
 80111bc:	2300      	movs	r3, #0
 80111be:	e787      	b.n	80110d0 <__ieee754_hypot+0x8c>
 80111c0:	9b01      	ldr	r3, [sp, #4]
 80111c2:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 80111c6:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 80111ca:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80111ce:	9301      	str	r3, [sp, #4]
 80111d0:	46ab      	mov	fp, r5
 80111d2:	4627      	mov	r7, r4
 80111d4:	e79a      	b.n	801110c <__ieee754_hypot+0xc8>
 80111d6:	4623      	mov	r3, r4
 80111d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80111dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111e0:	2200      	movs	r2, #0
 80111e2:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 80111e6:	4614      	mov	r4, r2
 80111e8:	461d      	mov	r5, r3
 80111ea:	f7ef fa05 	bl	80005f8 <__aeabi_dmul>
 80111ee:	4642      	mov	r2, r8
 80111f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80111f4:	464b      	mov	r3, r9
 80111f6:	4640      	mov	r0, r8
 80111f8:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 80111fc:	f7ef f9fc 	bl	80005f8 <__aeabi_dmul>
 8011200:	4652      	mov	r2, sl
 8011202:	465b      	mov	r3, fp
 8011204:	4680      	mov	r8, r0
 8011206:	4689      	mov	r9, r1
 8011208:	4650      	mov	r0, sl
 801120a:	4659      	mov	r1, fp
 801120c:	f7ef f83e 	bl	800028c <__adddf3>
 8011210:	4622      	mov	r2, r4
 8011212:	462b      	mov	r3, r5
 8011214:	f7ef f838 	bl	8000288 <__aeabi_dsub>
 8011218:	4632      	mov	r2, r6
 801121a:	463b      	mov	r3, r7
 801121c:	f7ef f9ec 	bl	80005f8 <__aeabi_dmul>
 8011220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011224:	4682      	mov	sl, r0
 8011226:	468b      	mov	fp, r1
 8011228:	4630      	mov	r0, r6
 801122a:	4639      	mov	r1, r7
 801122c:	f7ef f82c 	bl	8000288 <__aeabi_dsub>
 8011230:	4622      	mov	r2, r4
 8011232:	462b      	mov	r3, r5
 8011234:	f7ef f9e0 	bl	80005f8 <__aeabi_dmul>
 8011238:	4602      	mov	r2, r0
 801123a:	460b      	mov	r3, r1
 801123c:	4650      	mov	r0, sl
 801123e:	4659      	mov	r1, fp
 8011240:	f7ef f824 	bl	800028c <__adddf3>
 8011244:	4602      	mov	r2, r0
 8011246:	460b      	mov	r3, r1
 8011248:	4640      	mov	r0, r8
 801124a:	4649      	mov	r1, r9
 801124c:	f7ef f81c 	bl	8000288 <__aeabi_dsub>
 8011250:	4602      	mov	r2, r0
 8011252:	460b      	mov	r3, r1
 8011254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011258:	e798      	b.n	801118c <__ieee754_hypot+0x148>
 801125a:	46b2      	mov	sl, r6
 801125c:	46bb      	mov	fp, r7
 801125e:	e72a      	b.n	80110b6 <__ieee754_hypot+0x72>
 8011260:	5f300000 	.word	0x5f300000
 8011264:	7fefffff 	.word	0x7fefffff
 8011268:	20afffff 	.word	0x20afffff
 801126c:	7fd00000 	.word	0x7fd00000

08011270 <__ieee754_rem_pio2>:
 8011270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011274:	ec57 6b10 	vmov	r6, r7, d0
 8011278:	4bc5      	ldr	r3, [pc, #788]	@ (8011590 <__ieee754_rem_pio2+0x320>)
 801127a:	b08d      	sub	sp, #52	@ 0x34
 801127c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011280:	4598      	cmp	r8, r3
 8011282:	4604      	mov	r4, r0
 8011284:	9704      	str	r7, [sp, #16]
 8011286:	d807      	bhi.n	8011298 <__ieee754_rem_pio2+0x28>
 8011288:	2200      	movs	r2, #0
 801128a:	2300      	movs	r3, #0
 801128c:	ed80 0b00 	vstr	d0, [r0]
 8011290:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011294:	2500      	movs	r5, #0
 8011296:	e028      	b.n	80112ea <__ieee754_rem_pio2+0x7a>
 8011298:	4bbe      	ldr	r3, [pc, #760]	@ (8011594 <__ieee754_rem_pio2+0x324>)
 801129a:	4598      	cmp	r8, r3
 801129c:	d878      	bhi.n	8011390 <__ieee754_rem_pio2+0x120>
 801129e:	9b04      	ldr	r3, [sp, #16]
 80112a0:	4dbd      	ldr	r5, [pc, #756]	@ (8011598 <__ieee754_rem_pio2+0x328>)
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	4630      	mov	r0, r6
 80112a6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8011558 <__ieee754_rem_pio2+0x2e8>)
 80112a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ac:	4639      	mov	r1, r7
 80112ae:	dd38      	ble.n	8011322 <__ieee754_rem_pio2+0xb2>
 80112b0:	f7ee ffea 	bl	8000288 <__aeabi_dsub>
 80112b4:	45a8      	cmp	r8, r5
 80112b6:	4606      	mov	r6, r0
 80112b8:	460f      	mov	r7, r1
 80112ba:	d01a      	beq.n	80112f2 <__ieee754_rem_pio2+0x82>
 80112bc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8011560 <__ieee754_rem_pio2+0x2f0>)
 80112be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c2:	f7ee ffe1 	bl	8000288 <__aeabi_dsub>
 80112c6:	4602      	mov	r2, r0
 80112c8:	460b      	mov	r3, r1
 80112ca:	4680      	mov	r8, r0
 80112cc:	4689      	mov	r9, r1
 80112ce:	4630      	mov	r0, r6
 80112d0:	4639      	mov	r1, r7
 80112d2:	f7ee ffd9 	bl	8000288 <__aeabi_dsub>
 80112d6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8011560 <__ieee754_rem_pio2+0x2f0>)
 80112d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112dc:	f7ee ffd4 	bl	8000288 <__aeabi_dsub>
 80112e0:	e9c4 8900 	strd	r8, r9, [r4]
 80112e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80112e8:	2501      	movs	r5, #1
 80112ea:	4628      	mov	r0, r5
 80112ec:	b00d      	add	sp, #52	@ 0x34
 80112ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f2:	a39d      	add	r3, pc, #628	@ (adr r3, 8011568 <__ieee754_rem_pio2+0x2f8>)
 80112f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f8:	f7ee ffc6 	bl	8000288 <__aeabi_dsub>
 80112fc:	a39c      	add	r3, pc, #624	@ (adr r3, 8011570 <__ieee754_rem_pio2+0x300>)
 80112fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011302:	4606      	mov	r6, r0
 8011304:	460f      	mov	r7, r1
 8011306:	f7ee ffbf 	bl	8000288 <__aeabi_dsub>
 801130a:	4602      	mov	r2, r0
 801130c:	460b      	mov	r3, r1
 801130e:	4680      	mov	r8, r0
 8011310:	4689      	mov	r9, r1
 8011312:	4630      	mov	r0, r6
 8011314:	4639      	mov	r1, r7
 8011316:	f7ee ffb7 	bl	8000288 <__aeabi_dsub>
 801131a:	a395      	add	r3, pc, #596	@ (adr r3, 8011570 <__ieee754_rem_pio2+0x300>)
 801131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011320:	e7dc      	b.n	80112dc <__ieee754_rem_pio2+0x6c>
 8011322:	f7ee ffb3 	bl	800028c <__adddf3>
 8011326:	45a8      	cmp	r8, r5
 8011328:	4606      	mov	r6, r0
 801132a:	460f      	mov	r7, r1
 801132c:	d018      	beq.n	8011360 <__ieee754_rem_pio2+0xf0>
 801132e:	a38c      	add	r3, pc, #560	@ (adr r3, 8011560 <__ieee754_rem_pio2+0x2f0>)
 8011330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011334:	f7ee ffaa 	bl	800028c <__adddf3>
 8011338:	4602      	mov	r2, r0
 801133a:	460b      	mov	r3, r1
 801133c:	4680      	mov	r8, r0
 801133e:	4689      	mov	r9, r1
 8011340:	4630      	mov	r0, r6
 8011342:	4639      	mov	r1, r7
 8011344:	f7ee ffa0 	bl	8000288 <__aeabi_dsub>
 8011348:	a385      	add	r3, pc, #532	@ (adr r3, 8011560 <__ieee754_rem_pio2+0x2f0>)
 801134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801134e:	f7ee ff9d 	bl	800028c <__adddf3>
 8011352:	f04f 35ff 	mov.w	r5, #4294967295
 8011356:	e9c4 8900 	strd	r8, r9, [r4]
 801135a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801135e:	e7c4      	b.n	80112ea <__ieee754_rem_pio2+0x7a>
 8011360:	a381      	add	r3, pc, #516	@ (adr r3, 8011568 <__ieee754_rem_pio2+0x2f8>)
 8011362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011366:	f7ee ff91 	bl	800028c <__adddf3>
 801136a:	a381      	add	r3, pc, #516	@ (adr r3, 8011570 <__ieee754_rem_pio2+0x300>)
 801136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011370:	4606      	mov	r6, r0
 8011372:	460f      	mov	r7, r1
 8011374:	f7ee ff8a 	bl	800028c <__adddf3>
 8011378:	4602      	mov	r2, r0
 801137a:	460b      	mov	r3, r1
 801137c:	4680      	mov	r8, r0
 801137e:	4689      	mov	r9, r1
 8011380:	4630      	mov	r0, r6
 8011382:	4639      	mov	r1, r7
 8011384:	f7ee ff80 	bl	8000288 <__aeabi_dsub>
 8011388:	a379      	add	r3, pc, #484	@ (adr r3, 8011570 <__ieee754_rem_pio2+0x300>)
 801138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138e:	e7de      	b.n	801134e <__ieee754_rem_pio2+0xde>
 8011390:	4b82      	ldr	r3, [pc, #520]	@ (801159c <__ieee754_rem_pio2+0x32c>)
 8011392:	4598      	cmp	r8, r3
 8011394:	f200 80d1 	bhi.w	801153a <__ieee754_rem_pio2+0x2ca>
 8011398:	f000 fafe 	bl	8011998 <fabs>
 801139c:	ec57 6b10 	vmov	r6, r7, d0
 80113a0:	a375      	add	r3, pc, #468	@ (adr r3, 8011578 <__ieee754_rem_pio2+0x308>)
 80113a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a6:	4630      	mov	r0, r6
 80113a8:	4639      	mov	r1, r7
 80113aa:	f7ef f925 	bl	80005f8 <__aeabi_dmul>
 80113ae:	4b7c      	ldr	r3, [pc, #496]	@ (80115a0 <__ieee754_rem_pio2+0x330>)
 80113b0:	2200      	movs	r2, #0
 80113b2:	f7ee ff6b 	bl	800028c <__adddf3>
 80113b6:	f7ef fbcf 	bl	8000b58 <__aeabi_d2iz>
 80113ba:	4605      	mov	r5, r0
 80113bc:	f7ef f8b2 	bl	8000524 <__aeabi_i2d>
 80113c0:	4602      	mov	r2, r0
 80113c2:	460b      	mov	r3, r1
 80113c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80113c8:	a363      	add	r3, pc, #396	@ (adr r3, 8011558 <__ieee754_rem_pio2+0x2e8>)
 80113ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ce:	f7ef f913 	bl	80005f8 <__aeabi_dmul>
 80113d2:	4602      	mov	r2, r0
 80113d4:	460b      	mov	r3, r1
 80113d6:	4630      	mov	r0, r6
 80113d8:	4639      	mov	r1, r7
 80113da:	f7ee ff55 	bl	8000288 <__aeabi_dsub>
 80113de:	a360      	add	r3, pc, #384	@ (adr r3, 8011560 <__ieee754_rem_pio2+0x2f0>)
 80113e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e4:	4682      	mov	sl, r0
 80113e6:	468b      	mov	fp, r1
 80113e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113ec:	f7ef f904 	bl	80005f8 <__aeabi_dmul>
 80113f0:	2d1f      	cmp	r5, #31
 80113f2:	4606      	mov	r6, r0
 80113f4:	460f      	mov	r7, r1
 80113f6:	dc0c      	bgt.n	8011412 <__ieee754_rem_pio2+0x1a2>
 80113f8:	4b6a      	ldr	r3, [pc, #424]	@ (80115a4 <__ieee754_rem_pio2+0x334>)
 80113fa:	1e6a      	subs	r2, r5, #1
 80113fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011400:	4543      	cmp	r3, r8
 8011402:	d006      	beq.n	8011412 <__ieee754_rem_pio2+0x1a2>
 8011404:	4632      	mov	r2, r6
 8011406:	463b      	mov	r3, r7
 8011408:	4650      	mov	r0, sl
 801140a:	4659      	mov	r1, fp
 801140c:	f7ee ff3c 	bl	8000288 <__aeabi_dsub>
 8011410:	e00e      	b.n	8011430 <__ieee754_rem_pio2+0x1c0>
 8011412:	463b      	mov	r3, r7
 8011414:	4632      	mov	r2, r6
 8011416:	4650      	mov	r0, sl
 8011418:	4659      	mov	r1, fp
 801141a:	f7ee ff35 	bl	8000288 <__aeabi_dsub>
 801141e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011422:	9305      	str	r3, [sp, #20]
 8011424:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011428:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801142c:	2b10      	cmp	r3, #16
 801142e:	dc02      	bgt.n	8011436 <__ieee754_rem_pio2+0x1c6>
 8011430:	e9c4 0100 	strd	r0, r1, [r4]
 8011434:	e039      	b.n	80114aa <__ieee754_rem_pio2+0x23a>
 8011436:	a34c      	add	r3, pc, #304	@ (adr r3, 8011568 <__ieee754_rem_pio2+0x2f8>)
 8011438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801143c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011440:	f7ef f8da 	bl	80005f8 <__aeabi_dmul>
 8011444:	4606      	mov	r6, r0
 8011446:	460f      	mov	r7, r1
 8011448:	4602      	mov	r2, r0
 801144a:	460b      	mov	r3, r1
 801144c:	4650      	mov	r0, sl
 801144e:	4659      	mov	r1, fp
 8011450:	f7ee ff1a 	bl	8000288 <__aeabi_dsub>
 8011454:	4602      	mov	r2, r0
 8011456:	460b      	mov	r3, r1
 8011458:	4680      	mov	r8, r0
 801145a:	4689      	mov	r9, r1
 801145c:	4650      	mov	r0, sl
 801145e:	4659      	mov	r1, fp
 8011460:	f7ee ff12 	bl	8000288 <__aeabi_dsub>
 8011464:	4632      	mov	r2, r6
 8011466:	463b      	mov	r3, r7
 8011468:	f7ee ff0e 	bl	8000288 <__aeabi_dsub>
 801146c:	a340      	add	r3, pc, #256	@ (adr r3, 8011570 <__ieee754_rem_pio2+0x300>)
 801146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011472:	4606      	mov	r6, r0
 8011474:	460f      	mov	r7, r1
 8011476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801147a:	f7ef f8bd 	bl	80005f8 <__aeabi_dmul>
 801147e:	4632      	mov	r2, r6
 8011480:	463b      	mov	r3, r7
 8011482:	f7ee ff01 	bl	8000288 <__aeabi_dsub>
 8011486:	4602      	mov	r2, r0
 8011488:	460b      	mov	r3, r1
 801148a:	4606      	mov	r6, r0
 801148c:	460f      	mov	r7, r1
 801148e:	4640      	mov	r0, r8
 8011490:	4649      	mov	r1, r9
 8011492:	f7ee fef9 	bl	8000288 <__aeabi_dsub>
 8011496:	9a05      	ldr	r2, [sp, #20]
 8011498:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801149c:	1ad3      	subs	r3, r2, r3
 801149e:	2b31      	cmp	r3, #49	@ 0x31
 80114a0:	dc20      	bgt.n	80114e4 <__ieee754_rem_pio2+0x274>
 80114a2:	e9c4 0100 	strd	r0, r1, [r4]
 80114a6:	46c2      	mov	sl, r8
 80114a8:	46cb      	mov	fp, r9
 80114aa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80114ae:	4650      	mov	r0, sl
 80114b0:	4642      	mov	r2, r8
 80114b2:	464b      	mov	r3, r9
 80114b4:	4659      	mov	r1, fp
 80114b6:	f7ee fee7 	bl	8000288 <__aeabi_dsub>
 80114ba:	463b      	mov	r3, r7
 80114bc:	4632      	mov	r2, r6
 80114be:	f7ee fee3 	bl	8000288 <__aeabi_dsub>
 80114c2:	9b04      	ldr	r3, [sp, #16]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80114ca:	f6bf af0e 	bge.w	80112ea <__ieee754_rem_pio2+0x7a>
 80114ce:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80114d2:	6063      	str	r3, [r4, #4]
 80114d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80114d8:	f8c4 8000 	str.w	r8, [r4]
 80114dc:	60a0      	str	r0, [r4, #8]
 80114de:	60e3      	str	r3, [r4, #12]
 80114e0:	426d      	negs	r5, r5
 80114e2:	e702      	b.n	80112ea <__ieee754_rem_pio2+0x7a>
 80114e4:	a326      	add	r3, pc, #152	@ (adr r3, 8011580 <__ieee754_rem_pio2+0x310>)
 80114e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114ee:	f7ef f883 	bl	80005f8 <__aeabi_dmul>
 80114f2:	4606      	mov	r6, r0
 80114f4:	460f      	mov	r7, r1
 80114f6:	4602      	mov	r2, r0
 80114f8:	460b      	mov	r3, r1
 80114fa:	4640      	mov	r0, r8
 80114fc:	4649      	mov	r1, r9
 80114fe:	f7ee fec3 	bl	8000288 <__aeabi_dsub>
 8011502:	4602      	mov	r2, r0
 8011504:	460b      	mov	r3, r1
 8011506:	4682      	mov	sl, r0
 8011508:	468b      	mov	fp, r1
 801150a:	4640      	mov	r0, r8
 801150c:	4649      	mov	r1, r9
 801150e:	f7ee febb 	bl	8000288 <__aeabi_dsub>
 8011512:	4632      	mov	r2, r6
 8011514:	463b      	mov	r3, r7
 8011516:	f7ee feb7 	bl	8000288 <__aeabi_dsub>
 801151a:	a31b      	add	r3, pc, #108	@ (adr r3, 8011588 <__ieee754_rem_pio2+0x318>)
 801151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011520:	4606      	mov	r6, r0
 8011522:	460f      	mov	r7, r1
 8011524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011528:	f7ef f866 	bl	80005f8 <__aeabi_dmul>
 801152c:	4632      	mov	r2, r6
 801152e:	463b      	mov	r3, r7
 8011530:	f7ee feaa 	bl	8000288 <__aeabi_dsub>
 8011534:	4606      	mov	r6, r0
 8011536:	460f      	mov	r7, r1
 8011538:	e764      	b.n	8011404 <__ieee754_rem_pio2+0x194>
 801153a:	4b1b      	ldr	r3, [pc, #108]	@ (80115a8 <__ieee754_rem_pio2+0x338>)
 801153c:	4598      	cmp	r8, r3
 801153e:	d935      	bls.n	80115ac <__ieee754_rem_pio2+0x33c>
 8011540:	4632      	mov	r2, r6
 8011542:	463b      	mov	r3, r7
 8011544:	4630      	mov	r0, r6
 8011546:	4639      	mov	r1, r7
 8011548:	f7ee fe9e 	bl	8000288 <__aeabi_dsub>
 801154c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011550:	e9c4 0100 	strd	r0, r1, [r4]
 8011554:	e69e      	b.n	8011294 <__ieee754_rem_pio2+0x24>
 8011556:	bf00      	nop
 8011558:	54400000 	.word	0x54400000
 801155c:	3ff921fb 	.word	0x3ff921fb
 8011560:	1a626331 	.word	0x1a626331
 8011564:	3dd0b461 	.word	0x3dd0b461
 8011568:	1a600000 	.word	0x1a600000
 801156c:	3dd0b461 	.word	0x3dd0b461
 8011570:	2e037073 	.word	0x2e037073
 8011574:	3ba3198a 	.word	0x3ba3198a
 8011578:	6dc9c883 	.word	0x6dc9c883
 801157c:	3fe45f30 	.word	0x3fe45f30
 8011580:	2e000000 	.word	0x2e000000
 8011584:	3ba3198a 	.word	0x3ba3198a
 8011588:	252049c1 	.word	0x252049c1
 801158c:	397b839a 	.word	0x397b839a
 8011590:	3fe921fb 	.word	0x3fe921fb
 8011594:	4002d97b 	.word	0x4002d97b
 8011598:	3ff921fb 	.word	0x3ff921fb
 801159c:	413921fb 	.word	0x413921fb
 80115a0:	3fe00000 	.word	0x3fe00000
 80115a4:	08012918 	.word	0x08012918
 80115a8:	7fefffff 	.word	0x7fefffff
 80115ac:	ea4f 5528 	mov.w	r5, r8, asr #20
 80115b0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80115b4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80115b8:	4630      	mov	r0, r6
 80115ba:	460f      	mov	r7, r1
 80115bc:	f7ef facc 	bl	8000b58 <__aeabi_d2iz>
 80115c0:	f7ee ffb0 	bl	8000524 <__aeabi_i2d>
 80115c4:	4602      	mov	r2, r0
 80115c6:	460b      	mov	r3, r1
 80115c8:	4630      	mov	r0, r6
 80115ca:	4639      	mov	r1, r7
 80115cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80115d0:	f7ee fe5a 	bl	8000288 <__aeabi_dsub>
 80115d4:	4b22      	ldr	r3, [pc, #136]	@ (8011660 <__ieee754_rem_pio2+0x3f0>)
 80115d6:	2200      	movs	r2, #0
 80115d8:	f7ef f80e 	bl	80005f8 <__aeabi_dmul>
 80115dc:	460f      	mov	r7, r1
 80115de:	4606      	mov	r6, r0
 80115e0:	f7ef faba 	bl	8000b58 <__aeabi_d2iz>
 80115e4:	f7ee ff9e 	bl	8000524 <__aeabi_i2d>
 80115e8:	4602      	mov	r2, r0
 80115ea:	460b      	mov	r3, r1
 80115ec:	4630      	mov	r0, r6
 80115ee:	4639      	mov	r1, r7
 80115f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80115f4:	f7ee fe48 	bl	8000288 <__aeabi_dsub>
 80115f8:	4b19      	ldr	r3, [pc, #100]	@ (8011660 <__ieee754_rem_pio2+0x3f0>)
 80115fa:	2200      	movs	r2, #0
 80115fc:	f7ee fffc 	bl	80005f8 <__aeabi_dmul>
 8011600:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8011604:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8011608:	f04f 0803 	mov.w	r8, #3
 801160c:	2600      	movs	r6, #0
 801160e:	2700      	movs	r7, #0
 8011610:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011614:	4632      	mov	r2, r6
 8011616:	463b      	mov	r3, r7
 8011618:	46c2      	mov	sl, r8
 801161a:	f108 38ff 	add.w	r8, r8, #4294967295
 801161e:	f7ef fa53 	bl	8000ac8 <__aeabi_dcmpeq>
 8011622:	2800      	cmp	r0, #0
 8011624:	d1f4      	bne.n	8011610 <__ieee754_rem_pio2+0x3a0>
 8011626:	4b0f      	ldr	r3, [pc, #60]	@ (8011664 <__ieee754_rem_pio2+0x3f4>)
 8011628:	9301      	str	r3, [sp, #4]
 801162a:	2302      	movs	r3, #2
 801162c:	9300      	str	r3, [sp, #0]
 801162e:	462a      	mov	r2, r5
 8011630:	4653      	mov	r3, sl
 8011632:	4621      	mov	r1, r4
 8011634:	a806      	add	r0, sp, #24
 8011636:	f000 f9b7 	bl	80119a8 <__kernel_rem_pio2>
 801163a:	9b04      	ldr	r3, [sp, #16]
 801163c:	2b00      	cmp	r3, #0
 801163e:	4605      	mov	r5, r0
 8011640:	f6bf ae53 	bge.w	80112ea <__ieee754_rem_pio2+0x7a>
 8011644:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011648:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801164c:	e9c4 2300 	strd	r2, r3, [r4]
 8011650:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8011654:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011658:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801165c:	e740      	b.n	80114e0 <__ieee754_rem_pio2+0x270>
 801165e:	bf00      	nop
 8011660:	41700000 	.word	0x41700000
 8011664:	08012998 	.word	0x08012998

08011668 <atan>:
 8011668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801166c:	ec55 4b10 	vmov	r4, r5, d0
 8011670:	4bbf      	ldr	r3, [pc, #764]	@ (8011970 <atan+0x308>)
 8011672:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8011676:	429e      	cmp	r6, r3
 8011678:	46ab      	mov	fp, r5
 801167a:	d918      	bls.n	80116ae <atan+0x46>
 801167c:	4bbd      	ldr	r3, [pc, #756]	@ (8011974 <atan+0x30c>)
 801167e:	429e      	cmp	r6, r3
 8011680:	d801      	bhi.n	8011686 <atan+0x1e>
 8011682:	d109      	bne.n	8011698 <atan+0x30>
 8011684:	b144      	cbz	r4, 8011698 <atan+0x30>
 8011686:	4622      	mov	r2, r4
 8011688:	462b      	mov	r3, r5
 801168a:	4620      	mov	r0, r4
 801168c:	4629      	mov	r1, r5
 801168e:	f7ee fdfd 	bl	800028c <__adddf3>
 8011692:	4604      	mov	r4, r0
 8011694:	460d      	mov	r5, r1
 8011696:	e006      	b.n	80116a6 <atan+0x3e>
 8011698:	f1bb 0f00 	cmp.w	fp, #0
 801169c:	f340 812b 	ble.w	80118f6 <atan+0x28e>
 80116a0:	a597      	add	r5, pc, #604	@ (adr r5, 8011900 <atan+0x298>)
 80116a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80116a6:	ec45 4b10 	vmov	d0, r4, r5
 80116aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ae:	4bb2      	ldr	r3, [pc, #712]	@ (8011978 <atan+0x310>)
 80116b0:	429e      	cmp	r6, r3
 80116b2:	d813      	bhi.n	80116dc <atan+0x74>
 80116b4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80116b8:	429e      	cmp	r6, r3
 80116ba:	d80c      	bhi.n	80116d6 <atan+0x6e>
 80116bc:	a392      	add	r3, pc, #584	@ (adr r3, 8011908 <atan+0x2a0>)
 80116be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c2:	4620      	mov	r0, r4
 80116c4:	4629      	mov	r1, r5
 80116c6:	f7ee fde1 	bl	800028c <__adddf3>
 80116ca:	4bac      	ldr	r3, [pc, #688]	@ (801197c <atan+0x314>)
 80116cc:	2200      	movs	r2, #0
 80116ce:	f7ef fa23 	bl	8000b18 <__aeabi_dcmpgt>
 80116d2:	2800      	cmp	r0, #0
 80116d4:	d1e7      	bne.n	80116a6 <atan+0x3e>
 80116d6:	f04f 3aff 	mov.w	sl, #4294967295
 80116da:	e029      	b.n	8011730 <atan+0xc8>
 80116dc:	f000 f95c 	bl	8011998 <fabs>
 80116e0:	4ba7      	ldr	r3, [pc, #668]	@ (8011980 <atan+0x318>)
 80116e2:	429e      	cmp	r6, r3
 80116e4:	ec55 4b10 	vmov	r4, r5, d0
 80116e8:	f200 80bc 	bhi.w	8011864 <atan+0x1fc>
 80116ec:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80116f0:	429e      	cmp	r6, r3
 80116f2:	f200 809e 	bhi.w	8011832 <atan+0x1ca>
 80116f6:	4622      	mov	r2, r4
 80116f8:	462b      	mov	r3, r5
 80116fa:	4620      	mov	r0, r4
 80116fc:	4629      	mov	r1, r5
 80116fe:	f7ee fdc5 	bl	800028c <__adddf3>
 8011702:	4b9e      	ldr	r3, [pc, #632]	@ (801197c <atan+0x314>)
 8011704:	2200      	movs	r2, #0
 8011706:	f7ee fdbf 	bl	8000288 <__aeabi_dsub>
 801170a:	2200      	movs	r2, #0
 801170c:	4606      	mov	r6, r0
 801170e:	460f      	mov	r7, r1
 8011710:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011714:	4620      	mov	r0, r4
 8011716:	4629      	mov	r1, r5
 8011718:	f7ee fdb8 	bl	800028c <__adddf3>
 801171c:	4602      	mov	r2, r0
 801171e:	460b      	mov	r3, r1
 8011720:	4630      	mov	r0, r6
 8011722:	4639      	mov	r1, r7
 8011724:	f7ef f892 	bl	800084c <__aeabi_ddiv>
 8011728:	f04f 0a00 	mov.w	sl, #0
 801172c:	4604      	mov	r4, r0
 801172e:	460d      	mov	r5, r1
 8011730:	4622      	mov	r2, r4
 8011732:	462b      	mov	r3, r5
 8011734:	4620      	mov	r0, r4
 8011736:	4629      	mov	r1, r5
 8011738:	f7ee ff5e 	bl	80005f8 <__aeabi_dmul>
 801173c:	4602      	mov	r2, r0
 801173e:	460b      	mov	r3, r1
 8011740:	4680      	mov	r8, r0
 8011742:	4689      	mov	r9, r1
 8011744:	f7ee ff58 	bl	80005f8 <__aeabi_dmul>
 8011748:	a371      	add	r3, pc, #452	@ (adr r3, 8011910 <atan+0x2a8>)
 801174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174e:	4606      	mov	r6, r0
 8011750:	460f      	mov	r7, r1
 8011752:	f7ee ff51 	bl	80005f8 <__aeabi_dmul>
 8011756:	a370      	add	r3, pc, #448	@ (adr r3, 8011918 <atan+0x2b0>)
 8011758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175c:	f7ee fd96 	bl	800028c <__adddf3>
 8011760:	4632      	mov	r2, r6
 8011762:	463b      	mov	r3, r7
 8011764:	f7ee ff48 	bl	80005f8 <__aeabi_dmul>
 8011768:	a36d      	add	r3, pc, #436	@ (adr r3, 8011920 <atan+0x2b8>)
 801176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801176e:	f7ee fd8d 	bl	800028c <__adddf3>
 8011772:	4632      	mov	r2, r6
 8011774:	463b      	mov	r3, r7
 8011776:	f7ee ff3f 	bl	80005f8 <__aeabi_dmul>
 801177a:	a36b      	add	r3, pc, #428	@ (adr r3, 8011928 <atan+0x2c0>)
 801177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011780:	f7ee fd84 	bl	800028c <__adddf3>
 8011784:	4632      	mov	r2, r6
 8011786:	463b      	mov	r3, r7
 8011788:	f7ee ff36 	bl	80005f8 <__aeabi_dmul>
 801178c:	a368      	add	r3, pc, #416	@ (adr r3, 8011930 <atan+0x2c8>)
 801178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011792:	f7ee fd7b 	bl	800028c <__adddf3>
 8011796:	4632      	mov	r2, r6
 8011798:	463b      	mov	r3, r7
 801179a:	f7ee ff2d 	bl	80005f8 <__aeabi_dmul>
 801179e:	a366      	add	r3, pc, #408	@ (adr r3, 8011938 <atan+0x2d0>)
 80117a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a4:	f7ee fd72 	bl	800028c <__adddf3>
 80117a8:	4642      	mov	r2, r8
 80117aa:	464b      	mov	r3, r9
 80117ac:	f7ee ff24 	bl	80005f8 <__aeabi_dmul>
 80117b0:	a363      	add	r3, pc, #396	@ (adr r3, 8011940 <atan+0x2d8>)
 80117b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b6:	4680      	mov	r8, r0
 80117b8:	4689      	mov	r9, r1
 80117ba:	4630      	mov	r0, r6
 80117bc:	4639      	mov	r1, r7
 80117be:	f7ee ff1b 	bl	80005f8 <__aeabi_dmul>
 80117c2:	a361      	add	r3, pc, #388	@ (adr r3, 8011948 <atan+0x2e0>)
 80117c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c8:	f7ee fd5e 	bl	8000288 <__aeabi_dsub>
 80117cc:	4632      	mov	r2, r6
 80117ce:	463b      	mov	r3, r7
 80117d0:	f7ee ff12 	bl	80005f8 <__aeabi_dmul>
 80117d4:	a35e      	add	r3, pc, #376	@ (adr r3, 8011950 <atan+0x2e8>)
 80117d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117da:	f7ee fd55 	bl	8000288 <__aeabi_dsub>
 80117de:	4632      	mov	r2, r6
 80117e0:	463b      	mov	r3, r7
 80117e2:	f7ee ff09 	bl	80005f8 <__aeabi_dmul>
 80117e6:	a35c      	add	r3, pc, #368	@ (adr r3, 8011958 <atan+0x2f0>)
 80117e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ec:	f7ee fd4c 	bl	8000288 <__aeabi_dsub>
 80117f0:	4632      	mov	r2, r6
 80117f2:	463b      	mov	r3, r7
 80117f4:	f7ee ff00 	bl	80005f8 <__aeabi_dmul>
 80117f8:	a359      	add	r3, pc, #356	@ (adr r3, 8011960 <atan+0x2f8>)
 80117fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117fe:	f7ee fd43 	bl	8000288 <__aeabi_dsub>
 8011802:	4632      	mov	r2, r6
 8011804:	463b      	mov	r3, r7
 8011806:	f7ee fef7 	bl	80005f8 <__aeabi_dmul>
 801180a:	4602      	mov	r2, r0
 801180c:	460b      	mov	r3, r1
 801180e:	4640      	mov	r0, r8
 8011810:	4649      	mov	r1, r9
 8011812:	f7ee fd3b 	bl	800028c <__adddf3>
 8011816:	4622      	mov	r2, r4
 8011818:	462b      	mov	r3, r5
 801181a:	f7ee feed 	bl	80005f8 <__aeabi_dmul>
 801181e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011822:	4602      	mov	r2, r0
 8011824:	460b      	mov	r3, r1
 8011826:	d148      	bne.n	80118ba <atan+0x252>
 8011828:	4620      	mov	r0, r4
 801182a:	4629      	mov	r1, r5
 801182c:	f7ee fd2c 	bl	8000288 <__aeabi_dsub>
 8011830:	e72f      	b.n	8011692 <atan+0x2a>
 8011832:	4b52      	ldr	r3, [pc, #328]	@ (801197c <atan+0x314>)
 8011834:	2200      	movs	r2, #0
 8011836:	4620      	mov	r0, r4
 8011838:	4629      	mov	r1, r5
 801183a:	f7ee fd25 	bl	8000288 <__aeabi_dsub>
 801183e:	4b4f      	ldr	r3, [pc, #316]	@ (801197c <atan+0x314>)
 8011840:	4606      	mov	r6, r0
 8011842:	460f      	mov	r7, r1
 8011844:	2200      	movs	r2, #0
 8011846:	4620      	mov	r0, r4
 8011848:	4629      	mov	r1, r5
 801184a:	f7ee fd1f 	bl	800028c <__adddf3>
 801184e:	4602      	mov	r2, r0
 8011850:	460b      	mov	r3, r1
 8011852:	4630      	mov	r0, r6
 8011854:	4639      	mov	r1, r7
 8011856:	f7ee fff9 	bl	800084c <__aeabi_ddiv>
 801185a:	f04f 0a01 	mov.w	sl, #1
 801185e:	4604      	mov	r4, r0
 8011860:	460d      	mov	r5, r1
 8011862:	e765      	b.n	8011730 <atan+0xc8>
 8011864:	4b47      	ldr	r3, [pc, #284]	@ (8011984 <atan+0x31c>)
 8011866:	429e      	cmp	r6, r3
 8011868:	d21c      	bcs.n	80118a4 <atan+0x23c>
 801186a:	4b47      	ldr	r3, [pc, #284]	@ (8011988 <atan+0x320>)
 801186c:	2200      	movs	r2, #0
 801186e:	4620      	mov	r0, r4
 8011870:	4629      	mov	r1, r5
 8011872:	f7ee fd09 	bl	8000288 <__aeabi_dsub>
 8011876:	4b44      	ldr	r3, [pc, #272]	@ (8011988 <atan+0x320>)
 8011878:	4606      	mov	r6, r0
 801187a:	460f      	mov	r7, r1
 801187c:	2200      	movs	r2, #0
 801187e:	4620      	mov	r0, r4
 8011880:	4629      	mov	r1, r5
 8011882:	f7ee feb9 	bl	80005f8 <__aeabi_dmul>
 8011886:	4b3d      	ldr	r3, [pc, #244]	@ (801197c <atan+0x314>)
 8011888:	2200      	movs	r2, #0
 801188a:	f7ee fcff 	bl	800028c <__adddf3>
 801188e:	4602      	mov	r2, r0
 8011890:	460b      	mov	r3, r1
 8011892:	4630      	mov	r0, r6
 8011894:	4639      	mov	r1, r7
 8011896:	f7ee ffd9 	bl	800084c <__aeabi_ddiv>
 801189a:	f04f 0a02 	mov.w	sl, #2
 801189e:	4604      	mov	r4, r0
 80118a0:	460d      	mov	r5, r1
 80118a2:	e745      	b.n	8011730 <atan+0xc8>
 80118a4:	4622      	mov	r2, r4
 80118a6:	462b      	mov	r3, r5
 80118a8:	4938      	ldr	r1, [pc, #224]	@ (801198c <atan+0x324>)
 80118aa:	2000      	movs	r0, #0
 80118ac:	f7ee ffce 	bl	800084c <__aeabi_ddiv>
 80118b0:	f04f 0a03 	mov.w	sl, #3
 80118b4:	4604      	mov	r4, r0
 80118b6:	460d      	mov	r5, r1
 80118b8:	e73a      	b.n	8011730 <atan+0xc8>
 80118ba:	4b35      	ldr	r3, [pc, #212]	@ (8011990 <atan+0x328>)
 80118bc:	4e35      	ldr	r6, [pc, #212]	@ (8011994 <atan+0x32c>)
 80118be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80118c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c6:	f7ee fcdf 	bl	8000288 <__aeabi_dsub>
 80118ca:	4622      	mov	r2, r4
 80118cc:	462b      	mov	r3, r5
 80118ce:	f7ee fcdb 	bl	8000288 <__aeabi_dsub>
 80118d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80118d6:	4602      	mov	r2, r0
 80118d8:	460b      	mov	r3, r1
 80118da:	e9d6 0100 	ldrd	r0, r1, [r6]
 80118de:	f7ee fcd3 	bl	8000288 <__aeabi_dsub>
 80118e2:	f1bb 0f00 	cmp.w	fp, #0
 80118e6:	4604      	mov	r4, r0
 80118e8:	460d      	mov	r5, r1
 80118ea:	f6bf aedc 	bge.w	80116a6 <atan+0x3e>
 80118ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80118f2:	461d      	mov	r5, r3
 80118f4:	e6d7      	b.n	80116a6 <atan+0x3e>
 80118f6:	a51c      	add	r5, pc, #112	@ (adr r5, 8011968 <atan+0x300>)
 80118f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80118fc:	e6d3      	b.n	80116a6 <atan+0x3e>
 80118fe:	bf00      	nop
 8011900:	54442d18 	.word	0x54442d18
 8011904:	3ff921fb 	.word	0x3ff921fb
 8011908:	8800759c 	.word	0x8800759c
 801190c:	7e37e43c 	.word	0x7e37e43c
 8011910:	e322da11 	.word	0xe322da11
 8011914:	3f90ad3a 	.word	0x3f90ad3a
 8011918:	24760deb 	.word	0x24760deb
 801191c:	3fa97b4b 	.word	0x3fa97b4b
 8011920:	a0d03d51 	.word	0xa0d03d51
 8011924:	3fb10d66 	.word	0x3fb10d66
 8011928:	c54c206e 	.word	0xc54c206e
 801192c:	3fb745cd 	.word	0x3fb745cd
 8011930:	920083ff 	.word	0x920083ff
 8011934:	3fc24924 	.word	0x3fc24924
 8011938:	5555550d 	.word	0x5555550d
 801193c:	3fd55555 	.word	0x3fd55555
 8011940:	2c6a6c2f 	.word	0x2c6a6c2f
 8011944:	bfa2b444 	.word	0xbfa2b444
 8011948:	52defd9a 	.word	0x52defd9a
 801194c:	3fadde2d 	.word	0x3fadde2d
 8011950:	af749a6d 	.word	0xaf749a6d
 8011954:	3fb3b0f2 	.word	0x3fb3b0f2
 8011958:	fe231671 	.word	0xfe231671
 801195c:	3fbc71c6 	.word	0x3fbc71c6
 8011960:	9998ebc4 	.word	0x9998ebc4
 8011964:	3fc99999 	.word	0x3fc99999
 8011968:	54442d18 	.word	0x54442d18
 801196c:	bff921fb 	.word	0xbff921fb
 8011970:	440fffff 	.word	0x440fffff
 8011974:	7ff00000 	.word	0x7ff00000
 8011978:	3fdbffff 	.word	0x3fdbffff
 801197c:	3ff00000 	.word	0x3ff00000
 8011980:	3ff2ffff 	.word	0x3ff2ffff
 8011984:	40038000 	.word	0x40038000
 8011988:	3ff80000 	.word	0x3ff80000
 801198c:	bff00000 	.word	0xbff00000
 8011990:	08012aa0 	.word	0x08012aa0
 8011994:	08012ac0 	.word	0x08012ac0

08011998 <fabs>:
 8011998:	ec51 0b10 	vmov	r0, r1, d0
 801199c:	4602      	mov	r2, r0
 801199e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80119a2:	ec43 2b10 	vmov	d0, r2, r3
 80119a6:	4770      	bx	lr

080119a8 <__kernel_rem_pio2>:
 80119a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ac:	ed2d 8b02 	vpush	{d8}
 80119b0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80119b4:	f112 0f14 	cmn.w	r2, #20
 80119b8:	9306      	str	r3, [sp, #24]
 80119ba:	9104      	str	r1, [sp, #16]
 80119bc:	4bbe      	ldr	r3, [pc, #760]	@ (8011cb8 <__kernel_rem_pio2+0x310>)
 80119be:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80119c0:	9008      	str	r0, [sp, #32]
 80119c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80119c6:	9300      	str	r3, [sp, #0]
 80119c8:	9b06      	ldr	r3, [sp, #24]
 80119ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80119ce:	bfa8      	it	ge
 80119d0:	1ed4      	subge	r4, r2, #3
 80119d2:	9305      	str	r3, [sp, #20]
 80119d4:	bfb2      	itee	lt
 80119d6:	2400      	movlt	r4, #0
 80119d8:	2318      	movge	r3, #24
 80119da:	fb94 f4f3 	sdivge	r4, r4, r3
 80119de:	f06f 0317 	mvn.w	r3, #23
 80119e2:	fb04 3303 	mla	r3, r4, r3, r3
 80119e6:	eb03 0b02 	add.w	fp, r3, r2
 80119ea:	9b00      	ldr	r3, [sp, #0]
 80119ec:	9a05      	ldr	r2, [sp, #20]
 80119ee:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8011ca8 <__kernel_rem_pio2+0x300>
 80119f2:	eb03 0802 	add.w	r8, r3, r2
 80119f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80119f8:	1aa7      	subs	r7, r4, r2
 80119fa:	ae20      	add	r6, sp, #128	@ 0x80
 80119fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011a00:	2500      	movs	r5, #0
 8011a02:	4545      	cmp	r5, r8
 8011a04:	dd13      	ble.n	8011a2e <__kernel_rem_pio2+0x86>
 8011a06:	9b06      	ldr	r3, [sp, #24]
 8011a08:	aa20      	add	r2, sp, #128	@ 0x80
 8011a0a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011a0e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8011a12:	f04f 0800 	mov.w	r8, #0
 8011a16:	9b00      	ldr	r3, [sp, #0]
 8011a18:	4598      	cmp	r8, r3
 8011a1a:	dc31      	bgt.n	8011a80 <__kernel_rem_pio2+0xd8>
 8011a1c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8011ca8 <__kernel_rem_pio2+0x300>
 8011a20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011a24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011a28:	462f      	mov	r7, r5
 8011a2a:	2600      	movs	r6, #0
 8011a2c:	e01b      	b.n	8011a66 <__kernel_rem_pio2+0xbe>
 8011a2e:	42ef      	cmn	r7, r5
 8011a30:	d407      	bmi.n	8011a42 <__kernel_rem_pio2+0x9a>
 8011a32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011a36:	f7ee fd75 	bl	8000524 <__aeabi_i2d>
 8011a3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011a3e:	3501      	adds	r5, #1
 8011a40:	e7df      	b.n	8011a02 <__kernel_rem_pio2+0x5a>
 8011a42:	ec51 0b18 	vmov	r0, r1, d8
 8011a46:	e7f8      	b.n	8011a3a <__kernel_rem_pio2+0x92>
 8011a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a4c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011a50:	f7ee fdd2 	bl	80005f8 <__aeabi_dmul>
 8011a54:	4602      	mov	r2, r0
 8011a56:	460b      	mov	r3, r1
 8011a58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a5c:	f7ee fc16 	bl	800028c <__adddf3>
 8011a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a64:	3601      	adds	r6, #1
 8011a66:	9b05      	ldr	r3, [sp, #20]
 8011a68:	429e      	cmp	r6, r3
 8011a6a:	f1a7 0708 	sub.w	r7, r7, #8
 8011a6e:	ddeb      	ble.n	8011a48 <__kernel_rem_pio2+0xa0>
 8011a70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011a74:	f108 0801 	add.w	r8, r8, #1
 8011a78:	ecaa 7b02 	vstmia	sl!, {d7}
 8011a7c:	3508      	adds	r5, #8
 8011a7e:	e7ca      	b.n	8011a16 <__kernel_rem_pio2+0x6e>
 8011a80:	9b00      	ldr	r3, [sp, #0]
 8011a82:	f8dd 8000 	ldr.w	r8, [sp]
 8011a86:	aa0c      	add	r2, sp, #48	@ 0x30
 8011a88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8011a8e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011a90:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011a94:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a96:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8011a9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a9c:	ab98      	add	r3, sp, #608	@ 0x260
 8011a9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011aa2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8011aa6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011aaa:	ac0c      	add	r4, sp, #48	@ 0x30
 8011aac:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011aae:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8011ab2:	46a1      	mov	r9, r4
 8011ab4:	46c2      	mov	sl, r8
 8011ab6:	f1ba 0f00 	cmp.w	sl, #0
 8011aba:	f1a5 0508 	sub.w	r5, r5, #8
 8011abe:	dc77      	bgt.n	8011bb0 <__kernel_rem_pio2+0x208>
 8011ac0:	4658      	mov	r0, fp
 8011ac2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8011ac6:	f000 fac7 	bl	8012058 <scalbn>
 8011aca:	ec57 6b10 	vmov	r6, r7, d0
 8011ace:	2200      	movs	r2, #0
 8011ad0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8011ad4:	4630      	mov	r0, r6
 8011ad6:	4639      	mov	r1, r7
 8011ad8:	f7ee fd8e 	bl	80005f8 <__aeabi_dmul>
 8011adc:	ec41 0b10 	vmov	d0, r0, r1
 8011ae0:	f000 fb3a 	bl	8012158 <floor>
 8011ae4:	4b75      	ldr	r3, [pc, #468]	@ (8011cbc <__kernel_rem_pio2+0x314>)
 8011ae6:	ec51 0b10 	vmov	r0, r1, d0
 8011aea:	2200      	movs	r2, #0
 8011aec:	f7ee fd84 	bl	80005f8 <__aeabi_dmul>
 8011af0:	4602      	mov	r2, r0
 8011af2:	460b      	mov	r3, r1
 8011af4:	4630      	mov	r0, r6
 8011af6:	4639      	mov	r1, r7
 8011af8:	f7ee fbc6 	bl	8000288 <__aeabi_dsub>
 8011afc:	460f      	mov	r7, r1
 8011afe:	4606      	mov	r6, r0
 8011b00:	f7ef f82a 	bl	8000b58 <__aeabi_d2iz>
 8011b04:	9002      	str	r0, [sp, #8]
 8011b06:	f7ee fd0d 	bl	8000524 <__aeabi_i2d>
 8011b0a:	4602      	mov	r2, r0
 8011b0c:	460b      	mov	r3, r1
 8011b0e:	4630      	mov	r0, r6
 8011b10:	4639      	mov	r1, r7
 8011b12:	f7ee fbb9 	bl	8000288 <__aeabi_dsub>
 8011b16:	f1bb 0f00 	cmp.w	fp, #0
 8011b1a:	4606      	mov	r6, r0
 8011b1c:	460f      	mov	r7, r1
 8011b1e:	dd6c      	ble.n	8011bfa <__kernel_rem_pio2+0x252>
 8011b20:	f108 31ff 	add.w	r1, r8, #4294967295
 8011b24:	ab0c      	add	r3, sp, #48	@ 0x30
 8011b26:	9d02      	ldr	r5, [sp, #8]
 8011b28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011b2c:	f1cb 0018 	rsb	r0, fp, #24
 8011b30:	fa43 f200 	asr.w	r2, r3, r0
 8011b34:	4415      	add	r5, r2
 8011b36:	4082      	lsls	r2, r0
 8011b38:	1a9b      	subs	r3, r3, r2
 8011b3a:	aa0c      	add	r2, sp, #48	@ 0x30
 8011b3c:	9502      	str	r5, [sp, #8]
 8011b3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011b42:	f1cb 0217 	rsb	r2, fp, #23
 8011b46:	fa43 f902 	asr.w	r9, r3, r2
 8011b4a:	f1b9 0f00 	cmp.w	r9, #0
 8011b4e:	dd64      	ble.n	8011c1a <__kernel_rem_pio2+0x272>
 8011b50:	9b02      	ldr	r3, [sp, #8]
 8011b52:	2200      	movs	r2, #0
 8011b54:	3301      	adds	r3, #1
 8011b56:	9302      	str	r3, [sp, #8]
 8011b58:	4615      	mov	r5, r2
 8011b5a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8011b5e:	4590      	cmp	r8, r2
 8011b60:	f300 80b8 	bgt.w	8011cd4 <__kernel_rem_pio2+0x32c>
 8011b64:	f1bb 0f00 	cmp.w	fp, #0
 8011b68:	dd07      	ble.n	8011b7a <__kernel_rem_pio2+0x1d2>
 8011b6a:	f1bb 0f01 	cmp.w	fp, #1
 8011b6e:	f000 80bf 	beq.w	8011cf0 <__kernel_rem_pio2+0x348>
 8011b72:	f1bb 0f02 	cmp.w	fp, #2
 8011b76:	f000 80c6 	beq.w	8011d06 <__kernel_rem_pio2+0x35e>
 8011b7a:	f1b9 0f02 	cmp.w	r9, #2
 8011b7e:	d14c      	bne.n	8011c1a <__kernel_rem_pio2+0x272>
 8011b80:	4632      	mov	r2, r6
 8011b82:	463b      	mov	r3, r7
 8011b84:	494e      	ldr	r1, [pc, #312]	@ (8011cc0 <__kernel_rem_pio2+0x318>)
 8011b86:	2000      	movs	r0, #0
 8011b88:	f7ee fb7e 	bl	8000288 <__aeabi_dsub>
 8011b8c:	4606      	mov	r6, r0
 8011b8e:	460f      	mov	r7, r1
 8011b90:	2d00      	cmp	r5, #0
 8011b92:	d042      	beq.n	8011c1a <__kernel_rem_pio2+0x272>
 8011b94:	4658      	mov	r0, fp
 8011b96:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8011cb0 <__kernel_rem_pio2+0x308>
 8011b9a:	f000 fa5d 	bl	8012058 <scalbn>
 8011b9e:	4630      	mov	r0, r6
 8011ba0:	4639      	mov	r1, r7
 8011ba2:	ec53 2b10 	vmov	r2, r3, d0
 8011ba6:	f7ee fb6f 	bl	8000288 <__aeabi_dsub>
 8011baa:	4606      	mov	r6, r0
 8011bac:	460f      	mov	r7, r1
 8011bae:	e034      	b.n	8011c1a <__kernel_rem_pio2+0x272>
 8011bb0:	4b44      	ldr	r3, [pc, #272]	@ (8011cc4 <__kernel_rem_pio2+0x31c>)
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011bb8:	f7ee fd1e 	bl	80005f8 <__aeabi_dmul>
 8011bbc:	f7ee ffcc 	bl	8000b58 <__aeabi_d2iz>
 8011bc0:	f7ee fcb0 	bl	8000524 <__aeabi_i2d>
 8011bc4:	4b40      	ldr	r3, [pc, #256]	@ (8011cc8 <__kernel_rem_pio2+0x320>)
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	4606      	mov	r6, r0
 8011bca:	460f      	mov	r7, r1
 8011bcc:	f7ee fd14 	bl	80005f8 <__aeabi_dmul>
 8011bd0:	4602      	mov	r2, r0
 8011bd2:	460b      	mov	r3, r1
 8011bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011bd8:	f7ee fb56 	bl	8000288 <__aeabi_dsub>
 8011bdc:	f7ee ffbc 	bl	8000b58 <__aeabi_d2iz>
 8011be0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011be4:	f849 0b04 	str.w	r0, [r9], #4
 8011be8:	4639      	mov	r1, r7
 8011bea:	4630      	mov	r0, r6
 8011bec:	f7ee fb4e 	bl	800028c <__adddf3>
 8011bf0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011bf8:	e75d      	b.n	8011ab6 <__kernel_rem_pio2+0x10e>
 8011bfa:	d107      	bne.n	8011c0c <__kernel_rem_pio2+0x264>
 8011bfc:	f108 33ff 	add.w	r3, r8, #4294967295
 8011c00:	aa0c      	add	r2, sp, #48	@ 0x30
 8011c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c06:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8011c0a:	e79e      	b.n	8011b4a <__kernel_rem_pio2+0x1a2>
 8011c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8011ccc <__kernel_rem_pio2+0x324>)
 8011c0e:	2200      	movs	r2, #0
 8011c10:	f7ee ff78 	bl	8000b04 <__aeabi_dcmpge>
 8011c14:	2800      	cmp	r0, #0
 8011c16:	d143      	bne.n	8011ca0 <__kernel_rem_pio2+0x2f8>
 8011c18:	4681      	mov	r9, r0
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	4630      	mov	r0, r6
 8011c20:	4639      	mov	r1, r7
 8011c22:	f7ee ff51 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c26:	2800      	cmp	r0, #0
 8011c28:	f000 80bf 	beq.w	8011daa <__kernel_rem_pio2+0x402>
 8011c2c:	f108 33ff 	add.w	r3, r8, #4294967295
 8011c30:	2200      	movs	r2, #0
 8011c32:	9900      	ldr	r1, [sp, #0]
 8011c34:	428b      	cmp	r3, r1
 8011c36:	da6e      	bge.n	8011d16 <__kernel_rem_pio2+0x36e>
 8011c38:	2a00      	cmp	r2, #0
 8011c3a:	f000 8089 	beq.w	8011d50 <__kernel_rem_pio2+0x3a8>
 8011c3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011c42:	ab0c      	add	r3, sp, #48	@ 0x30
 8011c44:	f1ab 0b18 	sub.w	fp, fp, #24
 8011c48:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d0f6      	beq.n	8011c3e <__kernel_rem_pio2+0x296>
 8011c50:	4658      	mov	r0, fp
 8011c52:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8011cb0 <__kernel_rem_pio2+0x308>
 8011c56:	f000 f9ff 	bl	8012058 <scalbn>
 8011c5a:	f108 0301 	add.w	r3, r8, #1
 8011c5e:	00da      	lsls	r2, r3, #3
 8011c60:	9205      	str	r2, [sp, #20]
 8011c62:	ec55 4b10 	vmov	r4, r5, d0
 8011c66:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011c68:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8011cc4 <__kernel_rem_pio2+0x31c>
 8011c6c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8011c70:	4646      	mov	r6, r8
 8011c72:	f04f 0a00 	mov.w	sl, #0
 8011c76:	2e00      	cmp	r6, #0
 8011c78:	f280 80cf 	bge.w	8011e1a <__kernel_rem_pio2+0x472>
 8011c7c:	4644      	mov	r4, r8
 8011c7e:	2c00      	cmp	r4, #0
 8011c80:	f2c0 80fd 	blt.w	8011e7e <__kernel_rem_pio2+0x4d6>
 8011c84:	4b12      	ldr	r3, [pc, #72]	@ (8011cd0 <__kernel_rem_pio2+0x328>)
 8011c86:	461f      	mov	r7, r3
 8011c88:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011c8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011c8e:	9306      	str	r3, [sp, #24]
 8011c90:	f04f 0a00 	mov.w	sl, #0
 8011c94:	f04f 0b00 	mov.w	fp, #0
 8011c98:	2600      	movs	r6, #0
 8011c9a:	eba8 0504 	sub.w	r5, r8, r4
 8011c9e:	e0e2      	b.n	8011e66 <__kernel_rem_pio2+0x4be>
 8011ca0:	f04f 0902 	mov.w	r9, #2
 8011ca4:	e754      	b.n	8011b50 <__kernel_rem_pio2+0x1a8>
 8011ca6:	bf00      	nop
	...
 8011cb4:	3ff00000 	.word	0x3ff00000
 8011cb8:	08012b20 	.word	0x08012b20
 8011cbc:	40200000 	.word	0x40200000
 8011cc0:	3ff00000 	.word	0x3ff00000
 8011cc4:	3e700000 	.word	0x3e700000
 8011cc8:	41700000 	.word	0x41700000
 8011ccc:	3fe00000 	.word	0x3fe00000
 8011cd0:	08012ae0 	.word	0x08012ae0
 8011cd4:	f854 3b04 	ldr.w	r3, [r4], #4
 8011cd8:	b945      	cbnz	r5, 8011cec <__kernel_rem_pio2+0x344>
 8011cda:	b123      	cbz	r3, 8011ce6 <__kernel_rem_pio2+0x33e>
 8011cdc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011ce0:	f844 3c04 	str.w	r3, [r4, #-4]
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	3201      	adds	r2, #1
 8011ce8:	461d      	mov	r5, r3
 8011cea:	e738      	b.n	8011b5e <__kernel_rem_pio2+0x1b6>
 8011cec:	1acb      	subs	r3, r1, r3
 8011cee:	e7f7      	b.n	8011ce0 <__kernel_rem_pio2+0x338>
 8011cf0:	f108 32ff 	add.w	r2, r8, #4294967295
 8011cf4:	ab0c      	add	r3, sp, #48	@ 0x30
 8011cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cfa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011cfe:	a90c      	add	r1, sp, #48	@ 0x30
 8011d00:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011d04:	e739      	b.n	8011b7a <__kernel_rem_pio2+0x1d2>
 8011d06:	f108 32ff 	add.w	r2, r8, #4294967295
 8011d0a:	ab0c      	add	r3, sp, #48	@ 0x30
 8011d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d10:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011d14:	e7f3      	b.n	8011cfe <__kernel_rem_pio2+0x356>
 8011d16:	a90c      	add	r1, sp, #48	@ 0x30
 8011d18:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011d1c:	3b01      	subs	r3, #1
 8011d1e:	430a      	orrs	r2, r1
 8011d20:	e787      	b.n	8011c32 <__kernel_rem_pio2+0x28a>
 8011d22:	3401      	adds	r4, #1
 8011d24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011d28:	2a00      	cmp	r2, #0
 8011d2a:	d0fa      	beq.n	8011d22 <__kernel_rem_pio2+0x37a>
 8011d2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d2e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011d32:	eb0d 0503 	add.w	r5, sp, r3
 8011d36:	9b06      	ldr	r3, [sp, #24]
 8011d38:	aa20      	add	r2, sp, #128	@ 0x80
 8011d3a:	4443      	add	r3, r8
 8011d3c:	f108 0701 	add.w	r7, r8, #1
 8011d40:	3d98      	subs	r5, #152	@ 0x98
 8011d42:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8011d46:	4444      	add	r4, r8
 8011d48:	42bc      	cmp	r4, r7
 8011d4a:	da04      	bge.n	8011d56 <__kernel_rem_pio2+0x3ae>
 8011d4c:	46a0      	mov	r8, r4
 8011d4e:	e6a2      	b.n	8011a96 <__kernel_rem_pio2+0xee>
 8011d50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d52:	2401      	movs	r4, #1
 8011d54:	e7e6      	b.n	8011d24 <__kernel_rem_pio2+0x37c>
 8011d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d58:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011d5c:	f7ee fbe2 	bl	8000524 <__aeabi_i2d>
 8011d60:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8012028 <__kernel_rem_pio2+0x680>
 8011d64:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011d68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011d6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011d70:	46b2      	mov	sl, r6
 8011d72:	f04f 0800 	mov.w	r8, #0
 8011d76:	9b05      	ldr	r3, [sp, #20]
 8011d78:	4598      	cmp	r8, r3
 8011d7a:	dd05      	ble.n	8011d88 <__kernel_rem_pio2+0x3e0>
 8011d7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011d80:	3701      	adds	r7, #1
 8011d82:	eca5 7b02 	vstmia	r5!, {d7}
 8011d86:	e7df      	b.n	8011d48 <__kernel_rem_pio2+0x3a0>
 8011d88:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8011d8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011d90:	f7ee fc32 	bl	80005f8 <__aeabi_dmul>
 8011d94:	4602      	mov	r2, r0
 8011d96:	460b      	mov	r3, r1
 8011d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d9c:	f7ee fa76 	bl	800028c <__adddf3>
 8011da0:	f108 0801 	add.w	r8, r8, #1
 8011da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011da8:	e7e5      	b.n	8011d76 <__kernel_rem_pio2+0x3ce>
 8011daa:	f1cb 0000 	rsb	r0, fp, #0
 8011dae:	ec47 6b10 	vmov	d0, r6, r7
 8011db2:	f000 f951 	bl	8012058 <scalbn>
 8011db6:	ec55 4b10 	vmov	r4, r5, d0
 8011dba:	4b9d      	ldr	r3, [pc, #628]	@ (8012030 <__kernel_rem_pio2+0x688>)
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	4620      	mov	r0, r4
 8011dc0:	4629      	mov	r1, r5
 8011dc2:	f7ee fe9f 	bl	8000b04 <__aeabi_dcmpge>
 8011dc6:	b300      	cbz	r0, 8011e0a <__kernel_rem_pio2+0x462>
 8011dc8:	4b9a      	ldr	r3, [pc, #616]	@ (8012034 <__kernel_rem_pio2+0x68c>)
 8011dca:	2200      	movs	r2, #0
 8011dcc:	4620      	mov	r0, r4
 8011dce:	4629      	mov	r1, r5
 8011dd0:	f7ee fc12 	bl	80005f8 <__aeabi_dmul>
 8011dd4:	f7ee fec0 	bl	8000b58 <__aeabi_d2iz>
 8011dd8:	4606      	mov	r6, r0
 8011dda:	f7ee fba3 	bl	8000524 <__aeabi_i2d>
 8011dde:	4b94      	ldr	r3, [pc, #592]	@ (8012030 <__kernel_rem_pio2+0x688>)
 8011de0:	2200      	movs	r2, #0
 8011de2:	f7ee fc09 	bl	80005f8 <__aeabi_dmul>
 8011de6:	460b      	mov	r3, r1
 8011de8:	4602      	mov	r2, r0
 8011dea:	4629      	mov	r1, r5
 8011dec:	4620      	mov	r0, r4
 8011dee:	f7ee fa4b 	bl	8000288 <__aeabi_dsub>
 8011df2:	f7ee feb1 	bl	8000b58 <__aeabi_d2iz>
 8011df6:	ab0c      	add	r3, sp, #48	@ 0x30
 8011df8:	f10b 0b18 	add.w	fp, fp, #24
 8011dfc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011e00:	f108 0801 	add.w	r8, r8, #1
 8011e04:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011e08:	e722      	b.n	8011c50 <__kernel_rem_pio2+0x2a8>
 8011e0a:	4620      	mov	r0, r4
 8011e0c:	4629      	mov	r1, r5
 8011e0e:	f7ee fea3 	bl	8000b58 <__aeabi_d2iz>
 8011e12:	ab0c      	add	r3, sp, #48	@ 0x30
 8011e14:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011e18:	e71a      	b.n	8011c50 <__kernel_rem_pio2+0x2a8>
 8011e1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8011e1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011e20:	f7ee fb80 	bl	8000524 <__aeabi_i2d>
 8011e24:	4622      	mov	r2, r4
 8011e26:	462b      	mov	r3, r5
 8011e28:	f7ee fbe6 	bl	80005f8 <__aeabi_dmul>
 8011e2c:	4652      	mov	r2, sl
 8011e2e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8011e32:	465b      	mov	r3, fp
 8011e34:	4620      	mov	r0, r4
 8011e36:	4629      	mov	r1, r5
 8011e38:	f7ee fbde 	bl	80005f8 <__aeabi_dmul>
 8011e3c:	3e01      	subs	r6, #1
 8011e3e:	4604      	mov	r4, r0
 8011e40:	460d      	mov	r5, r1
 8011e42:	e718      	b.n	8011c76 <__kernel_rem_pio2+0x2ce>
 8011e44:	9906      	ldr	r1, [sp, #24]
 8011e46:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8011e4a:	9106      	str	r1, [sp, #24]
 8011e4c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011e50:	f7ee fbd2 	bl	80005f8 <__aeabi_dmul>
 8011e54:	4602      	mov	r2, r0
 8011e56:	460b      	mov	r3, r1
 8011e58:	4650      	mov	r0, sl
 8011e5a:	4659      	mov	r1, fp
 8011e5c:	f7ee fa16 	bl	800028c <__adddf3>
 8011e60:	3601      	adds	r6, #1
 8011e62:	4682      	mov	sl, r0
 8011e64:	468b      	mov	fp, r1
 8011e66:	9b00      	ldr	r3, [sp, #0]
 8011e68:	429e      	cmp	r6, r3
 8011e6a:	dc01      	bgt.n	8011e70 <__kernel_rem_pio2+0x4c8>
 8011e6c:	42b5      	cmp	r5, r6
 8011e6e:	dae9      	bge.n	8011e44 <__kernel_rem_pio2+0x49c>
 8011e70:	ab48      	add	r3, sp, #288	@ 0x120
 8011e72:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011e76:	e9c5 ab00 	strd	sl, fp, [r5]
 8011e7a:	3c01      	subs	r4, #1
 8011e7c:	e6ff      	b.n	8011c7e <__kernel_rem_pio2+0x2d6>
 8011e7e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011e80:	2b02      	cmp	r3, #2
 8011e82:	dc0b      	bgt.n	8011e9c <__kernel_rem_pio2+0x4f4>
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	dc39      	bgt.n	8011efc <__kernel_rem_pio2+0x554>
 8011e88:	d05d      	beq.n	8011f46 <__kernel_rem_pio2+0x59e>
 8011e8a:	9b02      	ldr	r3, [sp, #8]
 8011e8c:	f003 0007 	and.w	r0, r3, #7
 8011e90:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8011e94:	ecbd 8b02 	vpop	{d8}
 8011e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e9c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011e9e:	2b03      	cmp	r3, #3
 8011ea0:	d1f3      	bne.n	8011e8a <__kernel_rem_pio2+0x4e2>
 8011ea2:	9b05      	ldr	r3, [sp, #20]
 8011ea4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011ea8:	eb0d 0403 	add.w	r4, sp, r3
 8011eac:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8011eb0:	4625      	mov	r5, r4
 8011eb2:	46c2      	mov	sl, r8
 8011eb4:	f1ba 0f00 	cmp.w	sl, #0
 8011eb8:	f1a5 0508 	sub.w	r5, r5, #8
 8011ebc:	dc6b      	bgt.n	8011f96 <__kernel_rem_pio2+0x5ee>
 8011ebe:	4645      	mov	r5, r8
 8011ec0:	2d01      	cmp	r5, #1
 8011ec2:	f1a4 0408 	sub.w	r4, r4, #8
 8011ec6:	f300 8087 	bgt.w	8011fd8 <__kernel_rem_pio2+0x630>
 8011eca:	9c05      	ldr	r4, [sp, #20]
 8011ecc:	ab48      	add	r3, sp, #288	@ 0x120
 8011ece:	441c      	add	r4, r3
 8011ed0:	2000      	movs	r0, #0
 8011ed2:	2100      	movs	r1, #0
 8011ed4:	f1b8 0f01 	cmp.w	r8, #1
 8011ed8:	f300 809c 	bgt.w	8012014 <__kernel_rem_pio2+0x66c>
 8011edc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8011ee0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8011ee4:	f1b9 0f00 	cmp.w	r9, #0
 8011ee8:	f040 80a6 	bne.w	8012038 <__kernel_rem_pio2+0x690>
 8011eec:	9b04      	ldr	r3, [sp, #16]
 8011eee:	e9c3 7800 	strd	r7, r8, [r3]
 8011ef2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011ef6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011efa:	e7c6      	b.n	8011e8a <__kernel_rem_pio2+0x4e2>
 8011efc:	9d05      	ldr	r5, [sp, #20]
 8011efe:	ab48      	add	r3, sp, #288	@ 0x120
 8011f00:	441d      	add	r5, r3
 8011f02:	4644      	mov	r4, r8
 8011f04:	2000      	movs	r0, #0
 8011f06:	2100      	movs	r1, #0
 8011f08:	2c00      	cmp	r4, #0
 8011f0a:	da35      	bge.n	8011f78 <__kernel_rem_pio2+0x5d0>
 8011f0c:	f1b9 0f00 	cmp.w	r9, #0
 8011f10:	d038      	beq.n	8011f84 <__kernel_rem_pio2+0x5dc>
 8011f12:	4602      	mov	r2, r0
 8011f14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011f18:	9c04      	ldr	r4, [sp, #16]
 8011f1a:	e9c4 2300 	strd	r2, r3, [r4]
 8011f1e:	4602      	mov	r2, r0
 8011f20:	460b      	mov	r3, r1
 8011f22:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8011f26:	f7ee f9af 	bl	8000288 <__aeabi_dsub>
 8011f2a:	ad4a      	add	r5, sp, #296	@ 0x128
 8011f2c:	2401      	movs	r4, #1
 8011f2e:	45a0      	cmp	r8, r4
 8011f30:	da2b      	bge.n	8011f8a <__kernel_rem_pio2+0x5e2>
 8011f32:	f1b9 0f00 	cmp.w	r9, #0
 8011f36:	d002      	beq.n	8011f3e <__kernel_rem_pio2+0x596>
 8011f38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	9b04      	ldr	r3, [sp, #16]
 8011f40:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011f44:	e7a1      	b.n	8011e8a <__kernel_rem_pio2+0x4e2>
 8011f46:	9c05      	ldr	r4, [sp, #20]
 8011f48:	ab48      	add	r3, sp, #288	@ 0x120
 8011f4a:	441c      	add	r4, r3
 8011f4c:	2000      	movs	r0, #0
 8011f4e:	2100      	movs	r1, #0
 8011f50:	f1b8 0f00 	cmp.w	r8, #0
 8011f54:	da09      	bge.n	8011f6a <__kernel_rem_pio2+0x5c2>
 8011f56:	f1b9 0f00 	cmp.w	r9, #0
 8011f5a:	d002      	beq.n	8011f62 <__kernel_rem_pio2+0x5ba>
 8011f5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011f60:	4619      	mov	r1, r3
 8011f62:	9b04      	ldr	r3, [sp, #16]
 8011f64:	e9c3 0100 	strd	r0, r1, [r3]
 8011f68:	e78f      	b.n	8011e8a <__kernel_rem_pio2+0x4e2>
 8011f6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011f6e:	f7ee f98d 	bl	800028c <__adddf3>
 8011f72:	f108 38ff 	add.w	r8, r8, #4294967295
 8011f76:	e7eb      	b.n	8011f50 <__kernel_rem_pio2+0x5a8>
 8011f78:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8011f7c:	f7ee f986 	bl	800028c <__adddf3>
 8011f80:	3c01      	subs	r4, #1
 8011f82:	e7c1      	b.n	8011f08 <__kernel_rem_pio2+0x560>
 8011f84:	4602      	mov	r2, r0
 8011f86:	460b      	mov	r3, r1
 8011f88:	e7c6      	b.n	8011f18 <__kernel_rem_pio2+0x570>
 8011f8a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8011f8e:	f7ee f97d 	bl	800028c <__adddf3>
 8011f92:	3401      	adds	r4, #1
 8011f94:	e7cb      	b.n	8011f2e <__kernel_rem_pio2+0x586>
 8011f96:	ed95 7b00 	vldr	d7, [r5]
 8011f9a:	ed8d 7b00 	vstr	d7, [sp]
 8011f9e:	ed95 7b02 	vldr	d7, [r5, #8]
 8011fa2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011fa6:	ec53 2b17 	vmov	r2, r3, d7
 8011faa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011fae:	f7ee f96d 	bl	800028c <__adddf3>
 8011fb2:	4602      	mov	r2, r0
 8011fb4:	460b      	mov	r3, r1
 8011fb6:	4606      	mov	r6, r0
 8011fb8:	460f      	mov	r7, r1
 8011fba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011fbe:	f7ee f963 	bl	8000288 <__aeabi_dsub>
 8011fc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011fc6:	f7ee f961 	bl	800028c <__adddf3>
 8011fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011fce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8011fd2:	e9c5 6700 	strd	r6, r7, [r5]
 8011fd6:	e76d      	b.n	8011eb4 <__kernel_rem_pio2+0x50c>
 8011fd8:	ed94 7b00 	vldr	d7, [r4]
 8011fdc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8011fe0:	ec51 0b17 	vmov	r0, r1, d7
 8011fe4:	4652      	mov	r2, sl
 8011fe6:	465b      	mov	r3, fp
 8011fe8:	ed8d 7b00 	vstr	d7, [sp]
 8011fec:	f7ee f94e 	bl	800028c <__adddf3>
 8011ff0:	4602      	mov	r2, r0
 8011ff2:	460b      	mov	r3, r1
 8011ff4:	4606      	mov	r6, r0
 8011ff6:	460f      	mov	r7, r1
 8011ff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ffc:	f7ee f944 	bl	8000288 <__aeabi_dsub>
 8012000:	4652      	mov	r2, sl
 8012002:	465b      	mov	r3, fp
 8012004:	f7ee f942 	bl	800028c <__adddf3>
 8012008:	3d01      	subs	r5, #1
 801200a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801200e:	e9c4 6700 	strd	r6, r7, [r4]
 8012012:	e755      	b.n	8011ec0 <__kernel_rem_pio2+0x518>
 8012014:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012018:	f7ee f938 	bl	800028c <__adddf3>
 801201c:	f108 38ff 	add.w	r8, r8, #4294967295
 8012020:	e758      	b.n	8011ed4 <__kernel_rem_pio2+0x52c>
 8012022:	bf00      	nop
 8012024:	f3af 8000 	nop.w
	...
 8012030:	41700000 	.word	0x41700000
 8012034:	3e700000 	.word	0x3e700000
 8012038:	9b04      	ldr	r3, [sp, #16]
 801203a:	9a04      	ldr	r2, [sp, #16]
 801203c:	601f      	str	r7, [r3, #0]
 801203e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8012042:	605c      	str	r4, [r3, #4]
 8012044:	609d      	str	r5, [r3, #8]
 8012046:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801204a:	60d3      	str	r3, [r2, #12]
 801204c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012050:	6110      	str	r0, [r2, #16]
 8012052:	6153      	str	r3, [r2, #20]
 8012054:	e719      	b.n	8011e8a <__kernel_rem_pio2+0x4e2>
 8012056:	bf00      	nop

08012058 <scalbn>:
 8012058:	b570      	push	{r4, r5, r6, lr}
 801205a:	ec55 4b10 	vmov	r4, r5, d0
 801205e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012062:	4606      	mov	r6, r0
 8012064:	462b      	mov	r3, r5
 8012066:	b991      	cbnz	r1, 801208e <scalbn+0x36>
 8012068:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801206c:	4323      	orrs	r3, r4
 801206e:	d03d      	beq.n	80120ec <scalbn+0x94>
 8012070:	4b35      	ldr	r3, [pc, #212]	@ (8012148 <scalbn+0xf0>)
 8012072:	4620      	mov	r0, r4
 8012074:	4629      	mov	r1, r5
 8012076:	2200      	movs	r2, #0
 8012078:	f7ee fabe 	bl	80005f8 <__aeabi_dmul>
 801207c:	4b33      	ldr	r3, [pc, #204]	@ (801214c <scalbn+0xf4>)
 801207e:	429e      	cmp	r6, r3
 8012080:	4604      	mov	r4, r0
 8012082:	460d      	mov	r5, r1
 8012084:	da0f      	bge.n	80120a6 <scalbn+0x4e>
 8012086:	a328      	add	r3, pc, #160	@ (adr r3, 8012128 <scalbn+0xd0>)
 8012088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208c:	e01e      	b.n	80120cc <scalbn+0x74>
 801208e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012092:	4291      	cmp	r1, r2
 8012094:	d10b      	bne.n	80120ae <scalbn+0x56>
 8012096:	4622      	mov	r2, r4
 8012098:	4620      	mov	r0, r4
 801209a:	4629      	mov	r1, r5
 801209c:	f7ee f8f6 	bl	800028c <__adddf3>
 80120a0:	4604      	mov	r4, r0
 80120a2:	460d      	mov	r5, r1
 80120a4:	e022      	b.n	80120ec <scalbn+0x94>
 80120a6:	460b      	mov	r3, r1
 80120a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80120ac:	3936      	subs	r1, #54	@ 0x36
 80120ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80120b2:	4296      	cmp	r6, r2
 80120b4:	dd0d      	ble.n	80120d2 <scalbn+0x7a>
 80120b6:	2d00      	cmp	r5, #0
 80120b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8012130 <scalbn+0xd8>)
 80120ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120be:	da02      	bge.n	80120c6 <scalbn+0x6e>
 80120c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8012138 <scalbn+0xe0>)
 80120c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8012130 <scalbn+0xd8>)
 80120c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120cc:	f7ee fa94 	bl	80005f8 <__aeabi_dmul>
 80120d0:	e7e6      	b.n	80120a0 <scalbn+0x48>
 80120d2:	1872      	adds	r2, r6, r1
 80120d4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80120d8:	428a      	cmp	r2, r1
 80120da:	dcec      	bgt.n	80120b6 <scalbn+0x5e>
 80120dc:	2a00      	cmp	r2, #0
 80120de:	dd08      	ble.n	80120f2 <scalbn+0x9a>
 80120e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80120e4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80120e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80120ec:	ec45 4b10 	vmov	d0, r4, r5
 80120f0:	bd70      	pop	{r4, r5, r6, pc}
 80120f2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80120f6:	da08      	bge.n	801210a <scalbn+0xb2>
 80120f8:	2d00      	cmp	r5, #0
 80120fa:	a10b      	add	r1, pc, #44	@ (adr r1, 8012128 <scalbn+0xd0>)
 80120fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012100:	dac1      	bge.n	8012086 <scalbn+0x2e>
 8012102:	a10f      	add	r1, pc, #60	@ (adr r1, 8012140 <scalbn+0xe8>)
 8012104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012108:	e7bd      	b.n	8012086 <scalbn+0x2e>
 801210a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801210e:	3236      	adds	r2, #54	@ 0x36
 8012110:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012114:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012118:	4620      	mov	r0, r4
 801211a:	4b0d      	ldr	r3, [pc, #52]	@ (8012150 <scalbn+0xf8>)
 801211c:	4629      	mov	r1, r5
 801211e:	2200      	movs	r2, #0
 8012120:	e7d4      	b.n	80120cc <scalbn+0x74>
 8012122:	bf00      	nop
 8012124:	f3af 8000 	nop.w
 8012128:	c2f8f359 	.word	0xc2f8f359
 801212c:	01a56e1f 	.word	0x01a56e1f
 8012130:	8800759c 	.word	0x8800759c
 8012134:	7e37e43c 	.word	0x7e37e43c
 8012138:	8800759c 	.word	0x8800759c
 801213c:	fe37e43c 	.word	0xfe37e43c
 8012140:	c2f8f359 	.word	0xc2f8f359
 8012144:	81a56e1f 	.word	0x81a56e1f
 8012148:	43500000 	.word	0x43500000
 801214c:	ffff3cb0 	.word	0xffff3cb0
 8012150:	3c900000 	.word	0x3c900000
 8012154:	00000000 	.word	0x00000000

08012158 <floor>:
 8012158:	ec51 0b10 	vmov	r0, r1, d0
 801215c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012164:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8012168:	2e13      	cmp	r6, #19
 801216a:	460c      	mov	r4, r1
 801216c:	4605      	mov	r5, r0
 801216e:	4680      	mov	r8, r0
 8012170:	dc34      	bgt.n	80121dc <floor+0x84>
 8012172:	2e00      	cmp	r6, #0
 8012174:	da17      	bge.n	80121a6 <floor+0x4e>
 8012176:	a332      	add	r3, pc, #200	@ (adr r3, 8012240 <floor+0xe8>)
 8012178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217c:	f7ee f886 	bl	800028c <__adddf3>
 8012180:	2200      	movs	r2, #0
 8012182:	2300      	movs	r3, #0
 8012184:	f7ee fcc8 	bl	8000b18 <__aeabi_dcmpgt>
 8012188:	b150      	cbz	r0, 80121a0 <floor+0x48>
 801218a:	2c00      	cmp	r4, #0
 801218c:	da55      	bge.n	801223a <floor+0xe2>
 801218e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8012192:	432c      	orrs	r4, r5
 8012194:	2500      	movs	r5, #0
 8012196:	42ac      	cmp	r4, r5
 8012198:	4c2b      	ldr	r4, [pc, #172]	@ (8012248 <floor+0xf0>)
 801219a:	bf08      	it	eq
 801219c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80121a0:	4621      	mov	r1, r4
 80121a2:	4628      	mov	r0, r5
 80121a4:	e023      	b.n	80121ee <floor+0x96>
 80121a6:	4f29      	ldr	r7, [pc, #164]	@ (801224c <floor+0xf4>)
 80121a8:	4137      	asrs	r7, r6
 80121aa:	ea01 0307 	and.w	r3, r1, r7
 80121ae:	4303      	orrs	r3, r0
 80121b0:	d01d      	beq.n	80121ee <floor+0x96>
 80121b2:	a323      	add	r3, pc, #140	@ (adr r3, 8012240 <floor+0xe8>)
 80121b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b8:	f7ee f868 	bl	800028c <__adddf3>
 80121bc:	2200      	movs	r2, #0
 80121be:	2300      	movs	r3, #0
 80121c0:	f7ee fcaa 	bl	8000b18 <__aeabi_dcmpgt>
 80121c4:	2800      	cmp	r0, #0
 80121c6:	d0eb      	beq.n	80121a0 <floor+0x48>
 80121c8:	2c00      	cmp	r4, #0
 80121ca:	bfbe      	ittt	lt
 80121cc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80121d0:	4133      	asrlt	r3, r6
 80121d2:	18e4      	addlt	r4, r4, r3
 80121d4:	ea24 0407 	bic.w	r4, r4, r7
 80121d8:	2500      	movs	r5, #0
 80121da:	e7e1      	b.n	80121a0 <floor+0x48>
 80121dc:	2e33      	cmp	r6, #51	@ 0x33
 80121de:	dd0a      	ble.n	80121f6 <floor+0x9e>
 80121e0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80121e4:	d103      	bne.n	80121ee <floor+0x96>
 80121e6:	4602      	mov	r2, r0
 80121e8:	460b      	mov	r3, r1
 80121ea:	f7ee f84f 	bl	800028c <__adddf3>
 80121ee:	ec41 0b10 	vmov	d0, r0, r1
 80121f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121f6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80121fa:	f04f 37ff 	mov.w	r7, #4294967295
 80121fe:	40df      	lsrs	r7, r3
 8012200:	4207      	tst	r7, r0
 8012202:	d0f4      	beq.n	80121ee <floor+0x96>
 8012204:	a30e      	add	r3, pc, #56	@ (adr r3, 8012240 <floor+0xe8>)
 8012206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220a:	f7ee f83f 	bl	800028c <__adddf3>
 801220e:	2200      	movs	r2, #0
 8012210:	2300      	movs	r3, #0
 8012212:	f7ee fc81 	bl	8000b18 <__aeabi_dcmpgt>
 8012216:	2800      	cmp	r0, #0
 8012218:	d0c2      	beq.n	80121a0 <floor+0x48>
 801221a:	2c00      	cmp	r4, #0
 801221c:	da0a      	bge.n	8012234 <floor+0xdc>
 801221e:	2e14      	cmp	r6, #20
 8012220:	d101      	bne.n	8012226 <floor+0xce>
 8012222:	3401      	adds	r4, #1
 8012224:	e006      	b.n	8012234 <floor+0xdc>
 8012226:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801222a:	2301      	movs	r3, #1
 801222c:	40b3      	lsls	r3, r6
 801222e:	441d      	add	r5, r3
 8012230:	4545      	cmp	r5, r8
 8012232:	d3f6      	bcc.n	8012222 <floor+0xca>
 8012234:	ea25 0507 	bic.w	r5, r5, r7
 8012238:	e7b2      	b.n	80121a0 <floor+0x48>
 801223a:	2500      	movs	r5, #0
 801223c:	462c      	mov	r4, r5
 801223e:	e7af      	b.n	80121a0 <floor+0x48>
 8012240:	8800759c 	.word	0x8800759c
 8012244:	7e37e43c 	.word	0x7e37e43c
 8012248:	bff00000 	.word	0xbff00000
 801224c:	000fffff 	.word	0x000fffff

08012250 <_init>:
 8012250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012252:	bf00      	nop
 8012254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012256:	bc08      	pop	{r3}
 8012258:	469e      	mov	lr, r3
 801225a:	4770      	bx	lr

0801225c <_fini>:
 801225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801225e:	bf00      	nop
 8012260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012262:	bc08      	pop	{r3}
 8012264:	469e      	mov	lr, r3
 8012266:	4770      	bx	lr
