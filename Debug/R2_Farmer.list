
R2_Farmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0800d940  0800d940  0000e940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0f0  0800e0f0  000102b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0f0  0800e0f0  0000f0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0f8  0800e0f8  000102b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0f8  0800e0f8  0000f0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e0fc  0800e0fc  0000f0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b0  20000000  0800e100  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102b0  2**0
                  CONTENTS
 10 .bss          00000594  200002b0  200002b0  000102b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000844  20000844  000102b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014969  00000000  00000000  000102e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c49  00000000  00000000  00024c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  00027898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e91  00000000  00000000  00028b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121ed  00000000  00000000  00029991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005592  00000000  00000000  0003bb7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00041110  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f8  00000000  00000000  00041154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0004794c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b0 	.word	0x200002b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d928 	.word	0x0800d928

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b4 	.word	0x200002b4
 80001cc:	0800d928 	.word	0x0800d928

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <motorDirection>:
        {GPIOD, GPIO_PIN_3, GPIOD, GPIO_PIN_4, TIM_CHANNEL_3, &htim2},		//9
        {GPIOB, GPIO_PIN_1, GPIOB, GPIO_PIN_0, TIM_CHANNEL_4, &htim2}		//10
};

void motorDirection(uint8_t motor, uint8_t direction)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
    Motor *currentMotor = &motors[motor - 1];
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <motorDirection+0x74>)
 8001002:	4413      	add	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
    GPIO_PinState dir1_state;
    GPIO_PinState dir2_state;
    switch (direction)
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d006      	beq.n	800101a <motorDirection+0x36>
 800100c:	2b02      	cmp	r3, #2
 800100e:	d109      	bne.n	8001024 <motorDirection+0x40>
    {
    case forward:
        dir1_state = GPIO_PIN_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_SET;
 8001014:	2301      	movs	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
        break;
 8001018:	e009      	b.n	800102e <motorDirection+0x4a>
    case backward:
        dir1_state = GPIO_PIN_SET;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	73bb      	strb	r3, [r7, #14]
        break;
 8001022:	e004      	b.n	800102e <motorDirection+0x4a>
    default:
        dir1_state = GPIO_PIN_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
        break;
 800102c:	bf00      	nop
    }
    HAL_GPIO_WritePin(currentMotor->dir1_port, currentMotor->dir1_pin, dir1_state);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	4619      	mov	r1, r3
 800103a:	f003 fc1d 	bl	8004878 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(currentMotor->dir2_port, currentMotor->dir2_pin, dir2_state);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	6898      	ldr	r0, [r3, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	899b      	ldrh	r3, [r3, #12]
 8001046:	7bba      	ldrb	r2, [r7, #14]
 8001048:	4619      	mov	r1, r3
 800104a:	f003 fc15 	bl	8004878 <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000

0800105c <setMotorSpeed>:

void setMotorSpeed(uint8_t motor, double speed)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	ed87 0b00 	vstr	d0, [r7]
 8001068:	73fb      	strb	r3, [r7, #15]
    Motor *currentMotor = &motors[motor - 1];
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4a33      	ldr	r2, [pc, #204]	@ (8001144 <setMotorSpeed+0xe8>)
 8001078:	4413      	add	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
    if (speed > 0)
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001088:	f7ff fd46 	bl	8000b18 <__aeabi_dcmpgt>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <setMotorSpeed+0x42>
    {
        motorDirection(motor, forward);
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffa4 	bl	8000fe4 <motorDirection>
 800109c:	e01b      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else if (speed < 0)
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010aa:	f7ff fd17 	bl	8000adc <__aeabi_dcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <setMotorSpeed+0x70>
    {
        motorDirection(motor, backward);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2101      	movs	r1, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff93 	bl	8000fe4 <motorDirection>
        speed = -speed;
 80010be:	683c      	ldr	r4, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80010c6:	e9c7 4500 	strd	r4, r5, [r7]
 80010ca:	e004      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else
    {
        motorDirection(motor, stop);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff87 	bl	8000fe4 <motorDirection>
    }
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	7b9b      	ldrb	r3, [r3, #14]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <setMotorSpeed+0x96>
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	681c      	ldr	r4, [r3, #0]
 80010e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010e8:	f7ff fd5e 	bl	8000ba8 <__aeabi_d2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80010f0:	e024      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	7b9b      	ldrb	r3, [r3, #14]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d109      	bne.n	800110e <setMotorSpeed+0xb2>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800110c:	e016      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	7b9b      	ldrb	r3, [r3, #14]
 8001112:	2b08      	cmp	r3, #8
 8001114:	d109      	bne.n	800112a <setMotorSpeed+0xce>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001120:	f7ff fd42 	bl	8000ba8 <__aeabi_d2uiz>
 8001124:	4603      	mov	r3, r0
 8001126:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001128:	e008      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001134:	f7ff fd38 	bl	8000ba8 <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bdb0      	pop	{r4, r5, r7, pc}
 8001144:	20000000 	.word	0x20000000

08001148 <Inverse_Kinematics>:

void Inverse_Kinematics(double Vx, double Vy, double W)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b0b8      	sub	sp, #224	@ 0xe0
 800114c:	af00      	add	r7, sp, #0
 800114e:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
 8001152:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8001156:	ed87 2b18 	vstr	d2, [r7, #96]	@ 0x60
    double R = 7.6;
 800115a:	a3c2      	add	r3, pc, #776	@ (adr r3, 8001464 <Inverse_Kinematics+0x31c>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
    double minThreshold = 1000;
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4bbd      	ldr	r3, [pc, #756]	@ (8001460 <Inverse_Kinematics+0x318>)
 800116a:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
    double wheelMaxSpeed = 5500;
 800116e:	a3a6      	add	r3, pc, #664	@ (adr r3, 8001408 <Inverse_Kinematics+0x2c0>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double M1 = (-sin(M_PI_4) * Vx + cos(M_PI_4) * Vy - R * W)*1.016985; // 1.016985
 8001178:	a3a5      	add	r3, pc, #660	@ (adr r3, 8001410 <Inverse_Kinematics+0x2c8>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001182:	f7ff fa39 	bl	80005f8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4614      	mov	r4, r2
 800118c:	461d      	mov	r5, r3
 800118e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8001418 <Inverse_Kinematics+0x2d0>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001198:	f7ff fa2e 	bl	80005f8 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4620      	mov	r0, r4
 80011a2:	4629      	mov	r1, r5
 80011a4:	f7ff f872 	bl	800028c <__adddf3>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4614      	mov	r4, r2
 80011ae:	461d      	mov	r5, r3
 80011b0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80011b4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80011b8:	f7ff fa1e 	bl	80005f8 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff f860 	bl	8000288 <__aeabi_dsub>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	a393      	add	r3, pc, #588	@ (adr r3, 8001420 <Inverse_Kinematics+0x2d8>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fa0f 	bl	80005f8 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W);
 80011e2:	a391      	add	r3, pc, #580	@ (adr r3, 8001428 <Inverse_Kinematics+0x2e0>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4614      	mov	r4, r2
 80011f6:	461d      	mov	r5, r3
 80011f8:	a385      	add	r3, pc, #532	@ (adr r3, 8001410 <Inverse_Kinematics+0x2c8>)
 80011fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001202:	f7ff f9f9 	bl	80005f8 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4620      	mov	r0, r4
 800120c:	4629      	mov	r1, r5
 800120e:	f7ff f83d 	bl	800028c <__adddf3>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4614      	mov	r4, r2
 8001218:	461d      	mov	r5, r3
 800121a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800121e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001222:	f7ff f9e9 	bl	80005f8 <__aeabi_dmul>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4620      	mov	r0, r4
 800122c:	4629      	mov	r1, r5
 800122e:	f7ff f82b 	bl	8000288 <__aeabi_dsub>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    double M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.05296; // 1.05296
 800123a:	a37d      	add	r3, pc, #500	@ (adr r3, 8001430 <Inverse_Kinematics+0x2e8>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001244:	f7ff f9d8 	bl	80005f8 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4614      	mov	r4, r2
 800124e:	461d      	mov	r5, r3
 8001250:	a379      	add	r3, pc, #484	@ (adr r3, 8001438 <Inverse_Kinematics+0x2f0>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800125a:	f7ff f9cd 	bl	80005f8 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff f811 	bl	800028c <__adddf3>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4614      	mov	r4, r2
 8001270:	461d      	mov	r5, r3
 8001272:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001276:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800127a:	f7ff f9bd 	bl	80005f8 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4620      	mov	r0, r4
 8001284:	4629      	mov	r1, r5
 8001286:	f7fe ffff 	bl	8000288 <__aeabi_dsub>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	a36b      	add	r3, pc, #428	@ (adr r3, 8001440 <Inverse_Kinematics+0x2f8>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9ae 	bl	80005f8 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
    double M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W)*0.95038; // 0.95038
 80012a4:	a368      	add	r3, pc, #416	@ (adr r3, 8001448 <Inverse_Kinematics+0x300>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80012ae:	f7ff f9a3 	bl	80005f8 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	a365      	add	r3, pc, #404	@ (adr r3, 8001450 <Inverse_Kinematics+0x308>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80012c4:	f7ff f998 	bl	80005f8 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7fe ffdc 	bl	800028c <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4614      	mov	r4, r2
 80012da:	461d      	mov	r5, r3
 80012dc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80012e0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80012e4:	f7ff f988 	bl	80005f8 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4620      	mov	r0, r4
 80012ee:	4629      	mov	r1, r5
 80012f0:	f7fe ffca 	bl	8000288 <__aeabi_dsub>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	a356      	add	r3, pc, #344	@ (adr r3, 8001458 <Inverse_Kinematics+0x310>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff f979 	bl	80005f8 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0

    double maxM = fmax(fabs(M1), fmax(fabs(M2), fmax(fabs(M3), fabs(M4))));
 800130e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001312:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800131c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800131e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001322:	633b      	str	r3, [r7, #48]	@ 0x30
 8001324:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800132c:	637b      	str	r3, [r7, #52]	@ 0x34
 800132e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001334:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001338:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800133e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001342:	623b      	str	r3, [r7, #32]
 8001344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001348:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
 800134e:	ed97 1b08 	vldr	d1, [r7, #32]
 8001352:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001356:	f00b f89e 	bl	800c496 <fmax>
 800135a:	eeb0 7a40 	vmov.f32	s14, s0
 800135e:	eef0 7a60 	vmov.f32	s15, s1
 8001362:	eeb0 1a47 	vmov.f32	s2, s14
 8001366:	eef0 1a67 	vmov.f32	s3, s15
 800136a:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800136e:	f00b f892 	bl	800c496 <fmax>
 8001372:	eeb0 7a40 	vmov.f32	s14, s0
 8001376:	eef0 7a60 	vmov.f32	s15, s1
 800137a:	eeb0 1a47 	vmov.f32	s2, s14
 800137e:	eef0 1a67 	vmov.f32	s3, s15
 8001382:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001386:	f00b f886 	bl	800c496 <fmax>
 800138a:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0

    if (maxM > wheelMaxSpeed) {
 800138e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001392:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001396:	f7ff fbbf 	bl	8000b18 <__aeabi_dcmpgt>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d069      	beq.n	8001474 <Inverse_Kinematics+0x32c>
        double scale = wheelMaxSpeed / maxM;
 80013a0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80013a4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80013a8:	f7ff fa50 	bl	800084c <__aeabi_ddiv>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        M1 *= scale;
 80013b4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013b8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80013bc:	f7ff f91c 	bl	80005f8 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
        M2 *= scale;
 80013c8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013cc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80013d0:	f7ff f912 	bl	80005f8 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
        M3 *= scale;
 80013dc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013e0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80013e4:	f7ff f908 	bl	80005f8 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
        M4 *= scale;
 80013f0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013f4:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80013f8:	f7ff f8fe 	bl	80005f8 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
 8001404:	e036      	b.n	8001474 <Inverse_Kinematics+0x32c>
 8001406:	bf00      	nop
 8001408:	00000000 	.word	0x00000000
 800140c:	40b57c00 	.word	0x40b57c00
 8001410:	667f3bcc 	.word	0x667f3bcc
 8001414:	bfe6a09e 	.word	0xbfe6a09e
 8001418:	667f3bcd 	.word	0x667f3bcd
 800141c:	3fe6a09e 	.word	0x3fe6a09e
 8001420:	10385c68 	.word	0x10385c68
 8001424:	3ff04592 	.word	0x3ff04592
 8001428:	667f3bcd 	.word	0x667f3bcd
 800142c:	bfe6a09e 	.word	0xbfe6a09e
 8001430:	667f3bcc 	.word	0x667f3bcc
 8001434:	3fe6a09e 	.word	0x3fe6a09e
 8001438:	667f3bce 	.word	0x667f3bce
 800143c:	bfe6a09e 	.word	0xbfe6a09e
 8001440:	95bff045 	.word	0x95bff045
 8001444:	3ff0d8ec 	.word	0x3ff0d8ec
 8001448:	667f3bce 	.word	0x667f3bce
 800144c:	3fe6a09e 	.word	0x3fe6a09e
 8001450:	667f3bcb 	.word	0x667f3bcb
 8001454:	3fe6a09e 	.word	0x3fe6a09e
 8001458:	5158b828 	.word	0x5158b828
 800145c:	3fee6983 	.word	0x3fee6983
 8001460:	408f4000 	.word	0x408f4000
 8001464:	66666666 	.word	0x66666666
 8001468:	401e6666 	.word	0x401e6666
	...
    }

    double V1 = (fabs(M1) > minThreshold) ? M1 : (M1 < 0) ? -minThreshold : ((M1 > 0) ? minThreshold : 0);
 8001474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800147e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001488:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800148c:	f7ff fb26 	bl	8000adc <__aeabi_dcmplt>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d004      	beq.n	80014a0 <Inverse_Kinematics+0x358>
 8001496:	ed97 7b36 	vldr	d7, [r7, #216]	@ 0xd8
 800149a:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800149e:	e027      	b.n	80014f0 <Inverse_Kinematics+0x3a8>
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80014ac:	f7ff fb16 	bl	8000adc <__aeabi_dcmplt>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d008      	beq.n	80014c8 <Inverse_Kinematics+0x380>
 80014b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80014ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80014bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80014c6:	e013      	b.n	80014f0 <Inverse_Kinematics+0x3a8>
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80014d4:	f7ff fb20 	bl	8000b18 <__aeabi_dcmpgt>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d004      	beq.n	80014e8 <Inverse_Kinematics+0x3a0>
 80014de:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 80014e2:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80014e6:	e003      	b.n	80014f0 <Inverse_Kinematics+0x3a8>
 80014e8:	ed1f 7b20 	vldr	d7, [pc, #-128]	@ 800146c <Inverse_Kinematics+0x324>
 80014ec:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80014f0:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80014f4:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
    double V2 = (fabs(M2) > minThreshold) ? M2 : (M2 < 0) ? -minThreshold : ((M2 > 0) ? minThreshold : 0);
 80014f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001502:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800150c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001510:	f7ff fae4 	bl	8000adc <__aeabi_dcmplt>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d004      	beq.n	8001524 <Inverse_Kinematics+0x3dc>
 800151a:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 800151e:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001522:	e027      	b.n	8001574 <Inverse_Kinematics+0x42c>
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001530:	f7ff fad4 	bl	8000adc <__aeabi_dcmplt>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <Inverse_Kinematics+0x404>
 800153a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800153e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001540:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001544:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001548:	657b      	str	r3, [r7, #84]	@ 0x54
 800154a:	e013      	b.n	8001574 <Inverse_Kinematics+0x42c>
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001558:	f7ff fade 	bl	8000b18 <__aeabi_dcmpgt>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <Inverse_Kinematics+0x424>
 8001562:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8001566:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 800156a:	e003      	b.n	8001574 <Inverse_Kinematics+0x42c>
 800156c:	ed1f 7b41 	vldr	d7, [pc, #-260]	@ 800146c <Inverse_Kinematics+0x324>
 8001570:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001574:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001578:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    double V3 = (fabs(M3) > minThreshold) ? M3 : (M3 < 0) ? -minThreshold : ((M3 > 0) ? minThreshold : 0);
 800157c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001586:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001590:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001594:	f7ff faa2 	bl	8000adc <__aeabi_dcmplt>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <Inverse_Kinematics+0x460>
 800159e:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 80015a2:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80015a6:	e027      	b.n	80015f8 <Inverse_Kinematics+0x4b0>
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80015b4:	f7ff fa92 	bl	8000adc <__aeabi_dcmplt>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d008      	beq.n	80015d0 <Inverse_Kinematics+0x488>
 80015be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80015c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80015c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015ce:	e013      	b.n	80015f8 <Inverse_Kinematics+0x4b0>
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80015dc:	f7ff fa9c 	bl	8000b18 <__aeabi_dcmpgt>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d004      	beq.n	80015f0 <Inverse_Kinematics+0x4a8>
 80015e6:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 80015ea:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80015ee:	e003      	b.n	80015f8 <Inverse_Kinematics+0x4b0>
 80015f0:	ed1f 7b62 	vldr	d7, [pc, #-392]	@ 800146c <Inverse_Kinematics+0x324>
 80015f4:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80015f8:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80015fc:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    double V4 = (fabs(M4) > minThreshold) ? M4 : (M4 < 0) ? -minThreshold : ((M4 > 0) ? minThreshold : 0);
 8001600:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800160a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001614:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001618:	f7ff fa60 	bl	8000adc <__aeabi_dcmplt>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d004      	beq.n	800162c <Inverse_Kinematics+0x4e4>
 8001622:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 8001626:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 800162a:	e027      	b.n	800167c <Inverse_Kinematics+0x534>
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001638:	f7ff fa50 	bl	8000adc <__aeabi_dcmplt>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <Inverse_Kinematics+0x50c>
 8001642:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001646:	643b      	str	r3, [r7, #64]	@ 0x40
 8001648:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800164c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001650:	647b      	str	r3, [r7, #68]	@ 0x44
 8001652:	e013      	b.n	800167c <Inverse_Kinematics+0x534>
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001660:	f7ff fa5a 	bl	8000b18 <__aeabi_dcmpgt>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d004      	beq.n	8001674 <Inverse_Kinematics+0x52c>
 800166a:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 800166e:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001672:	e003      	b.n	800167c <Inverse_Kinematics+0x534>
 8001674:	ed1f 7b83 	vldr	d7, [pc, #-524]	@ 800146c <Inverse_Kinematics+0x324>
 8001678:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 800167c:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001680:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78

    setMotorSpeed(6, (int)V1);
 8001684:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001688:	f7ff fa66 	bl	8000b58 <__aeabi_d2iz>
 800168c:	4603      	mov	r3, r0
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff48 	bl	8000524 <__aeabi_i2d>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	ec43 2b10 	vmov	d0, r2, r3
 800169c:	2006      	movs	r0, #6
 800169e:	f7ff fcdd 	bl	800105c <setMotorSpeed>
    setMotorSpeed(5, (int)V2);
 80016a2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80016a6:	f7ff fa57 	bl	8000b58 <__aeabi_d2iz>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff39 	bl	8000524 <__aeabi_i2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	ec43 2b10 	vmov	d0, r2, r3
 80016ba:	2005      	movs	r0, #5
 80016bc:	f7ff fcce 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, (int)V3);
 80016c0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80016c4:	f7ff fa48 	bl	8000b58 <__aeabi_d2iz>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff2a 	bl	8000524 <__aeabi_i2d>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	ec43 2b10 	vmov	d0, r2, r3
 80016d8:	2004      	movs	r0, #4
 80016da:	f7ff fcbf 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, (int)V4);
 80016de:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80016e2:	f7ff fa39 	bl	8000b58 <__aeabi_d2iz>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff1b 	bl	8000524 <__aeabi_i2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	ec43 2b10 	vmov	d0, r2, r3
 80016f6:	2008      	movs	r0, #8
 80016f8:	f7ff fcb0 	bl	800105c <setMotorSpeed>
}
 80016fc:	bf00      	nop
 80016fe:	37e0      	adds	r7, #224	@ 0xe0
 8001700:	46bd      	mov	sp, r7
 8001702:	bdb0      	pop	{r4, r5, r7, pc}

08001704 <lcd_write_nibble>:
#define D7_BIT 7      // Data 7 bit

uint8_t backlight_state = 1;

void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af02      	add	r7, sp, #8
 800170a:	4603      	mov	r3, r0
 800170c:	460a      	mov	r2, r1
 800170e:	71fb      	strb	r3, [r7, #7]
 8001710:	4613      	mov	r3, r2
 8001712:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	b2db      	uxtb	r3, r3
 800171a:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	79bb      	ldrb	r3, [r7, #6]
 8001720:	4313      	orrs	r3, r2
 8001722:	b2db      	uxtb	r3, r3
 8001724:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8001726:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <lcd_write_nibble+0x7c>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	b25a      	sxtb	r2, r3
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	b2db      	uxtb	r3, r3
 8001742:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8001744:	f107 020f 	add.w	r2, r7, #15
 8001748:	2364      	movs	r3, #100	@ 0x64
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2301      	movs	r3, #1
 800174e:	214e      	movs	r1, #78	@ 0x4e
 8001750:	480c      	ldr	r0, [pc, #48]	@ (8001784 <lcd_write_nibble+0x80>)
 8001752:	f003 fa07 	bl	8004b64 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8001756:	2001      	movs	r0, #1
 8001758:	f002 fd12 	bl	8004180 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	f023 0304 	bic.w	r3, r3, #4
 8001762:	b2db      	uxtb	r3, r3
 8001764:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8001766:	f107 020f 	add.w	r2, r7, #15
 800176a:	2364      	movs	r3, #100	@ 0x64
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2301      	movs	r3, #1
 8001770:	214e      	movs	r1, #78	@ 0x4e
 8001772:	4804      	ldr	r0, [pc, #16]	@ (8001784 <lcd_write_nibble+0x80>)
 8001774:	f003 f9f6 	bl	8004b64 <HAL_I2C_Master_Transmit>
}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200000c8 	.word	0x200000c8
 8001784:	200002cc 	.word	0x200002cc

08001788 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ffad 	bl	8001704 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 80017aa:	7bbb      	ldrb	r3, [r7, #14]
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ffa8 	bl	8001704 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d002      	beq.n	80017c0 <lcd_send_cmd+0x38>
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d102      	bne.n	80017c6 <lcd_send_cmd+0x3e>
  {
    HAL_Delay(2);
 80017c0:	2002      	movs	r0, #2
 80017c2:	f002 fcdd 	bl	8004180 <HAL_Delay>
  }
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	091b      	lsrs	r3, r3, #4
 80017dc:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	2101      	movs	r1, #1
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff8a 	bl	8001704 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 80017f0:	7bbb      	ldrb	r3, [r7, #14]
 80017f2:	2101      	movs	r1, #1
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff85 	bl	8001704 <lcd_write_nibble>
}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <lcd_init>:

void lcd_init()
{
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8001806:	2032      	movs	r0, #50	@ 0x32
 8001808:	f002 fcba 	bl	8004180 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800180c:	2100      	movs	r1, #0
 800180e:	2003      	movs	r0, #3
 8001810:	f7ff ff78 	bl	8001704 <lcd_write_nibble>
  HAL_Delay(5);
 8001814:	2005      	movs	r0, #5
 8001816:	f002 fcb3 	bl	8004180 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800181a:	2100      	movs	r1, #0
 800181c:	2003      	movs	r0, #3
 800181e:	f7ff ff71 	bl	8001704 <lcd_write_nibble>
  HAL_Delay(1);
 8001822:	2001      	movs	r0, #1
 8001824:	f002 fcac 	bl	8004180 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001828:	2100      	movs	r1, #0
 800182a:	2003      	movs	r0, #3
 800182c:	f7ff ff6a 	bl	8001704 <lcd_write_nibble>
  HAL_Delay(1);
 8001830:	2001      	movs	r0, #1
 8001832:	f002 fca5 	bl	8004180 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 8001836:	2100      	movs	r1, #0
 8001838:	2002      	movs	r0, #2
 800183a:	f7ff ff63 	bl	8001704 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 800183e:	2028      	movs	r0, #40	@ 0x28
 8001840:	f7ff ffa2 	bl	8001788 <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8001844:	200c      	movs	r0, #12
 8001846:	f7ff ff9f 	bl	8001788 <lcd_send_cmd>
  lcd_send_cmd(0x06);
 800184a:	2006      	movs	r0, #6
 800184c:	f7ff ff9c 	bl	8001788 <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff ff99 	bl	8001788 <lcd_send_cmd>
  HAL_Delay(2);
 8001856:	2002      	movs	r0, #2
 8001858:	f002 fc92 	bl	8004180 <HAL_Delay>
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  while (*str)
 8001868:	e006      	b.n	8001878 <lcd_write_string+0x18>
  {
    lcd_send_data(*str++);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ffab 	bl	80017ce <lcd_send_data>
  while (*str)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f4      	bne.n	800186a <lcd_write_string+0xa>
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	460a      	mov	r2, r1
 8001896:	71fb      	strb	r3, [r7, #7]
 8001898:	4613      	mov	r3, r2
 800189a:	71bb      	strb	r3, [r7, #6]
  uint8_t address;
  switch (row)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d816      	bhi.n	80018d0 <lcd_set_cursor+0x44>
 80018a2:	a201      	add	r2, pc, #4	@ (adr r2, 80018a8 <lcd_set_cursor+0x1c>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	080018b9 	.word	0x080018b9
 80018ac:	080018bf 	.word	0x080018bf
 80018b0:	080018c5 	.word	0x080018c5
 80018b4:	080018cb 	.word	0x080018cb
  {
  case 0:
    address = 0x00;
 80018b8:	2300      	movs	r3, #0
 80018ba:	73fb      	strb	r3, [r7, #15]
    break;
 80018bc:	e00a      	b.n	80018d4 <lcd_set_cursor+0x48>
  case 1:
    address = 0x40;
 80018be:	2340      	movs	r3, #64	@ 0x40
 80018c0:	73fb      	strb	r3, [r7, #15]
    break;
 80018c2:	e007      	b.n	80018d4 <lcd_set_cursor+0x48>
  case 2:
    address = 0x14;
 80018c4:	2314      	movs	r3, #20
 80018c6:	73fb      	strb	r3, [r7, #15]
    break;
 80018c8:	e004      	b.n	80018d4 <lcd_set_cursor+0x48>
  case 3:
    address = 0x54;
 80018ca:	2354      	movs	r3, #84	@ 0x54
 80018cc:	73fb      	strb	r3, [r7, #15]
    break;
 80018ce:	e001      	b.n	80018d4 <lcd_set_cursor+0x48>
  default:
    address = 0x00;
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]
  }
  address += column;
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	79bb      	ldrb	r3, [r7, #6]
 80018d8:	4413      	add	r3, r2
 80018da:	73fb      	strb	r3, [r7, #15]
  lcd_send_cmd(0x80 | address);
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff4f 	bl	8001788 <lcd_send_cmd>
}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop

080018f4 <lcd_clear>:

void lcd_clear(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x01);
 80018f8:	2001      	movs	r0, #1
 80018fa:	f7ff ff45 	bl	8001788 <lcd_send_cmd>
  HAL_Delay(2);
 80018fe:	2002      	movs	r0, #2
 8001900:	f002 fc3e 	bl	8004180 <HAL_Delay>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
movingState mode = VOID;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	80fb      	strh	r3, [r7, #6]
	// ENCODER
	if((GPIO_Pin == EB_1_Pin) && (HAL_GPIO_ReadPin(EB_1_GPIO_Port, EB_1_Pin) == GPIO_PIN_SET))
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	2b08      	cmp	r3, #8
 8001916:	d11d      	bne.n	8001954 <HAL_GPIO_EXTI_Callback+0x4c>
 8001918:	2108      	movs	r1, #8
 800191a:	4890      	ldr	r0, [pc, #576]	@ (8001b5c <HAL_GPIO_EXTI_Callback+0x254>)
 800191c:	f002 ff94 	bl	8004848 <HAL_GPIO_ReadPin>
 8001920:	4603      	mov	r3, r0
 8001922:	2b01      	cmp	r3, #1
 8001924:	d116      	bne.n	8001954 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		HAL_GPIO_ReadPin(EA_1_GPIO_Port, EA_1_Pin) ? counter1-- : counter1++;
 8001926:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800192a:	488d      	ldr	r0, [pc, #564]	@ (8001b60 <HAL_GPIO_EXTI_Callback+0x258>)
 800192c:	f002 ff8c 	bl	8004848 <HAL_GPIO_ReadPin>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d005      	beq.n	8001942 <HAL_GPIO_EXTI_Callback+0x3a>
 8001936:	4b8b      	ldr	r3, [pc, #556]	@ (8001b64 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3b01      	subs	r3, #1
 800193c:	4a89      	ldr	r2, [pc, #548]	@ (8001b64 <HAL_GPIO_EXTI_Callback+0x25c>)
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	e004      	b.n	800194c <HAL_GPIO_EXTI_Callback+0x44>
 8001942:	4b88      	ldr	r3, [pc, #544]	@ (8001b64 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	4a86      	ldr	r2, [pc, #536]	@ (8001b64 <HAL_GPIO_EXTI_Callback+0x25c>)
 800194a:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_1_Pin);
 800194c:	4b86      	ldr	r3, [pc, #536]	@ (8001b68 <HAL_GPIO_EXTI_Callback+0x260>)
 800194e:	2208      	movs	r2, #8
 8001950:	615a      	str	r2, [r3, #20]
 8001952:	e15b      	b.n	8001c0c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_2_Pin) && (HAL_GPIO_ReadPin(EB_2_GPIO_Port, EB_2_Pin) == GPIO_PIN_SET))
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d11c      	bne.n	8001994 <HAL_GPIO_EXTI_Callback+0x8c>
 800195a:	2102      	movs	r1, #2
 800195c:	4883      	ldr	r0, [pc, #524]	@ (8001b6c <HAL_GPIO_EXTI_Callback+0x264>)
 800195e:	f002 ff73 	bl	8004848 <HAL_GPIO_ReadPin>
 8001962:	4603      	mov	r3, r0
 8001964:	2b01      	cmp	r3, #1
 8001966:	d115      	bne.n	8001994 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		HAL_GPIO_ReadPin(EA_2_GPIO_Port, EA_2_Pin) ? counter2-- : counter2++;
 8001968:	2101      	movs	r1, #1
 800196a:	4880      	ldr	r0, [pc, #512]	@ (8001b6c <HAL_GPIO_EXTI_Callback+0x264>)
 800196c:	f002 ff6c 	bl	8004848 <HAL_GPIO_ReadPin>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_GPIO_EXTI_Callback+0x7a>
 8001976:	4b7e      	ldr	r3, [pc, #504]	@ (8001b70 <HAL_GPIO_EXTI_Callback+0x268>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	3b01      	subs	r3, #1
 800197c:	4a7c      	ldr	r2, [pc, #496]	@ (8001b70 <HAL_GPIO_EXTI_Callback+0x268>)
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	e004      	b.n	800198c <HAL_GPIO_EXTI_Callback+0x84>
 8001982:	4b7b      	ldr	r3, [pc, #492]	@ (8001b70 <HAL_GPIO_EXTI_Callback+0x268>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	4a79      	ldr	r2, [pc, #484]	@ (8001b70 <HAL_GPIO_EXTI_Callback+0x268>)
 800198a:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_2_Pin);
 800198c:	4b76      	ldr	r3, [pc, #472]	@ (8001b68 <HAL_GPIO_EXTI_Callback+0x260>)
 800198e:	2202      	movs	r2, #2
 8001990:	615a      	str	r2, [r3, #20]
 8001992:	e13b      	b.n	8001c0c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_3_Pin) && (HAL_GPIO_ReadPin(EB_3_GPIO_Port, EB_3_Pin) == GPIO_PIN_SET))
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d11c      	bne.n	80019d4 <HAL_GPIO_EXTI_Callback+0xcc>
 800199a:	2120      	movs	r1, #32
 800199c:	486f      	ldr	r0, [pc, #444]	@ (8001b5c <HAL_GPIO_EXTI_Callback+0x254>)
 800199e:	f002 ff53 	bl	8004848 <HAL_GPIO_ReadPin>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d115      	bne.n	80019d4 <HAL_GPIO_EXTI_Callback+0xcc>
	{
		HAL_GPIO_ReadPin(EA_3_GPIO_Port, EA_3_Pin) ? counter3-- : counter3++;
 80019a8:	2110      	movs	r1, #16
 80019aa:	486c      	ldr	r0, [pc, #432]	@ (8001b5c <HAL_GPIO_EXTI_Callback+0x254>)
 80019ac:	f002 ff4c 	bl	8004848 <HAL_GPIO_ReadPin>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <HAL_GPIO_EXTI_Callback+0xba>
 80019b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001b74 <HAL_GPIO_EXTI_Callback+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	4a6d      	ldr	r2, [pc, #436]	@ (8001b74 <HAL_GPIO_EXTI_Callback+0x26c>)
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	e004      	b.n	80019cc <HAL_GPIO_EXTI_Callback+0xc4>
 80019c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001b74 <HAL_GPIO_EXTI_Callback+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	4a6a      	ldr	r2, [pc, #424]	@ (8001b74 <HAL_GPIO_EXTI_Callback+0x26c>)
 80019ca:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_3_Pin);
 80019cc:	4b66      	ldr	r3, [pc, #408]	@ (8001b68 <HAL_GPIO_EXTI_Callback+0x260>)
 80019ce:	2220      	movs	r2, #32
 80019d0:	615a      	str	r2, [r3, #20]
 80019d2:	e11b      	b.n	8001c0c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_1_Pin) && (HAL_GPIO_ReadPin(EinB_1_GPIO_Port, EinB_1_Pin) == GPIO_PIN_SET))
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d11c      	bne.n	8001a14 <HAL_GPIO_EXTI_Callback+0x10c>
 80019da:	2104      	movs	r1, #4
 80019dc:	4863      	ldr	r0, [pc, #396]	@ (8001b6c <HAL_GPIO_EXTI_Callback+0x264>)
 80019de:	f002 ff33 	bl	8004848 <HAL_GPIO_ReadPin>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d115      	bne.n	8001a14 <HAL_GPIO_EXTI_Callback+0x10c>
	{
		HAL_GPIO_ReadPin(EinA_1_GPIO_Port, EinA_1_Pin) ? counterIN1++ : counterIN1--;
 80019e8:	2108      	movs	r1, #8
 80019ea:	4860      	ldr	r0, [pc, #384]	@ (8001b6c <HAL_GPIO_EXTI_Callback+0x264>)
 80019ec:	f002 ff2c 	bl	8004848 <HAL_GPIO_ReadPin>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_GPIO_EXTI_Callback+0xfa>
 80019f6:	4b60      	ldr	r3, [pc, #384]	@ (8001b78 <HAL_GPIO_EXTI_Callback+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3301      	adds	r3, #1
 80019fc:	4a5e      	ldr	r2, [pc, #376]	@ (8001b78 <HAL_GPIO_EXTI_Callback+0x270>)
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	e004      	b.n	8001a0c <HAL_GPIO_EXTI_Callback+0x104>
 8001a02:	4b5d      	ldr	r3, [pc, #372]	@ (8001b78 <HAL_GPIO_EXTI_Callback+0x270>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	4a5b      	ldr	r2, [pc, #364]	@ (8001b78 <HAL_GPIO_EXTI_Callback+0x270>)
 8001a0a:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_1_Pin);
 8001a0c:	4b56      	ldr	r3, [pc, #344]	@ (8001b68 <HAL_GPIO_EXTI_Callback+0x260>)
 8001a0e:	2204      	movs	r2, #4
 8001a10:	615a      	str	r2, [r3, #20]
 8001a12:	e0fb      	b.n	8001c0c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_2_Pin) && (HAL_GPIO_ReadPin(EinB_2_GPIO_Port, EinB_2_Pin) == GPIO_PIN_SET))
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d11c      	bne.n	8001a54 <HAL_GPIO_EXTI_Callback+0x14c>
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	4850      	ldr	r0, [pc, #320]	@ (8001b60 <HAL_GPIO_EXTI_Callback+0x258>)
 8001a1e:	f002 ff13 	bl	8004848 <HAL_GPIO_ReadPin>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d115      	bne.n	8001a54 <HAL_GPIO_EXTI_Callback+0x14c>
	{
		HAL_GPIO_ReadPin(EinA_2_GPIO_Port, EinA_2_Pin) ? counterIN2-- : counterIN2++;
 8001a28:	2102      	movs	r1, #2
 8001a2a:	484d      	ldr	r0, [pc, #308]	@ (8001b60 <HAL_GPIO_EXTI_Callback+0x258>)
 8001a2c:	f002 ff0c 	bl	8004848 <HAL_GPIO_ReadPin>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d005      	beq.n	8001a42 <HAL_GPIO_EXTI_Callback+0x13a>
 8001a36:	4b51      	ldr	r3, [pc, #324]	@ (8001b7c <HAL_GPIO_EXTI_Callback+0x274>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	4a4f      	ldr	r2, [pc, #316]	@ (8001b7c <HAL_GPIO_EXTI_Callback+0x274>)
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	e004      	b.n	8001a4c <HAL_GPIO_EXTI_Callback+0x144>
 8001a42:	4b4e      	ldr	r3, [pc, #312]	@ (8001b7c <HAL_GPIO_EXTI_Callback+0x274>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3301      	adds	r3, #1
 8001a48:	4a4c      	ldr	r2, [pc, #304]	@ (8001b7c <HAL_GPIO_EXTI_Callback+0x274>)
 8001a4a:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_2_Pin);
 8001a4c:	4b46      	ldr	r3, [pc, #280]	@ (8001b68 <HAL_GPIO_EXTI_Callback+0x260>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	615a      	str	r2, [r3, #20]
 8001a52:	e0db      	b.n	8001c0c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_3_Pin) && (HAL_GPIO_ReadPin(EinB_3_GPIO_Port, EinB_3_Pin) == GPIO_PIN_SET))
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a5a:	d11f      	bne.n	8001a9c <HAL_GPIO_EXTI_Callback+0x194>
 8001a5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a60:	4847      	ldr	r0, [pc, #284]	@ (8001b80 <HAL_GPIO_EXTI_Callback+0x278>)
 8001a62:	f002 fef1 	bl	8004848 <HAL_GPIO_ReadPin>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d117      	bne.n	8001a9c <HAL_GPIO_EXTI_Callback+0x194>
	{
		HAL_GPIO_ReadPin(EinA_3_GPIO_Port, EinA_3_Pin) ? counterIN3++ : counterIN3--;
 8001a6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a70:	4843      	ldr	r0, [pc, #268]	@ (8001b80 <HAL_GPIO_EXTI_Callback+0x278>)
 8001a72:	f002 fee9 	bl	8004848 <HAL_GPIO_ReadPin>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_GPIO_EXTI_Callback+0x180>
 8001a7c:	4b41      	ldr	r3, [pc, #260]	@ (8001b84 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	4a40      	ldr	r2, [pc, #256]	@ (8001b84 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e004      	b.n	8001a92 <HAL_GPIO_EXTI_Callback+0x18a>
 8001a88:	4b3e      	ldr	r3, [pc, #248]	@ (8001b84 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	4a3d      	ldr	r2, [pc, #244]	@ (8001b84 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001a90:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_3_Pin);
 8001a92:	4b35      	ldr	r3, [pc, #212]	@ (8001b68 <HAL_GPIO_EXTI_Callback+0x260>)
 8001a94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a98:	615a      	str	r2, [r3, #20]
 8001a9a:	e0b7      	b.n	8001c0c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_4_Pin) && (HAL_GPIO_ReadPin(EinB_4_GPIO_Port, EinB_4_Pin) == GPIO_PIN_SET))
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001aa2:	d11f      	bne.n	8001ae4 <HAL_GPIO_EXTI_Callback+0x1dc>
 8001aa4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001aa8:	482d      	ldr	r0, [pc, #180]	@ (8001b60 <HAL_GPIO_EXTI_Callback+0x258>)
 8001aaa:	f002 fecd 	bl	8004848 <HAL_GPIO_ReadPin>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d117      	bne.n	8001ae4 <HAL_GPIO_EXTI_Callback+0x1dc>
	{
		HAL_GPIO_ReadPin(EinA_4_GPIO_Port, EinA_4_Pin) ? counterIN4-- : counterIN4++;
 8001ab4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ab8:	4829      	ldr	r0, [pc, #164]	@ (8001b60 <HAL_GPIO_EXTI_Callback+0x258>)
 8001aba:	f002 fec5 	bl	8004848 <HAL_GPIO_ReadPin>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_GPIO_EXTI_Callback+0x1c8>
 8001ac4:	4b30      	ldr	r3, [pc, #192]	@ (8001b88 <HAL_GPIO_EXTI_Callback+0x280>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	4a2f      	ldr	r2, [pc, #188]	@ (8001b88 <HAL_GPIO_EXTI_Callback+0x280>)
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e004      	b.n	8001ada <HAL_GPIO_EXTI_Callback+0x1d2>
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b88 <HAL_GPIO_EXTI_Callback+0x280>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	4a2c      	ldr	r2, [pc, #176]	@ (8001b88 <HAL_GPIO_EXTI_Callback+0x280>)
 8001ad8:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_4_Pin);
 8001ada:	4b23      	ldr	r3, [pc, #140]	@ (8001b68 <HAL_GPIO_EXTI_Callback+0x260>)
 8001adc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ae0:	615a      	str	r2, [r3, #20]
 8001ae2:	e093      	b.n	8001c0c <HAL_GPIO_EXTI_Callback+0x304>
	}

	// BUTTON
	else if((GPIO_Pin == Button_1_Pin) && (HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin) == GPIO_PIN_RESET))
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aea:	d119      	bne.n	8001b20 <HAL_GPIO_EXTI_Callback+0x218>
 8001aec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001af0:	4826      	ldr	r0, [pc, #152]	@ (8001b8c <HAL_GPIO_EXTI_Callback+0x284>)
 8001af2:	f002 fea9 	bl	8004848 <HAL_GPIO_ReadPin>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d111      	bne.n	8001b20 <HAL_GPIO_EXTI_Callback+0x218>
	{
		mode = mode + BLUE_STEP1;
 8001afc:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <HAL_GPIO_EXTI_Callback+0x288>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b06:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_STEP1)
 8001b08:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d902      	bls.n	8001b16 <HAL_GPIO_EXTI_Callback+0x20e>
		{
			mode = VOID;
 8001b10:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_1_Pin);
 8001b16:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <HAL_GPIO_EXTI_Callback+0x260>)
 8001b18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b1c:	615a      	str	r2, [r3, #20]
 8001b1e:	e075      	b.n	8001c0c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_2_Pin) && (HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin) == GPIO_PIN_RESET))
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b26:	d135      	bne.n	8001b94 <HAL_GPIO_EXTI_Callback+0x28c>
 8001b28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b2c:	4817      	ldr	r0, [pc, #92]	@ (8001b8c <HAL_GPIO_EXTI_Callback+0x284>)
 8001b2e:	f002 fe8b 	bl	8004848 <HAL_GPIO_ReadPin>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d12d      	bne.n	8001b94 <HAL_GPIO_EXTI_Callback+0x28c>
	{
		mode = mode + BLUE_STEP1;
 8001b38:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b42:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_STEP1)
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d902      	bls.n	8001b52 <HAL_GPIO_EXTI_Callback+0x24a>
		{
			mode = VOID;
 8001b4c:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_2_Pin);
 8001b52:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <HAL_GPIO_EXTI_Callback+0x260>)
 8001b54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b58:	615a      	str	r2, [r3, #20]
 8001b5a:	e057      	b.n	8001c0c <HAL_GPIO_EXTI_Callback+0x304>
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	40020000 	.word	0x40020000
 8001b64:	200004d0 	.word	0x200004d0
 8001b68:	40013c00 	.word	0x40013c00
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	200004d4 	.word	0x200004d4
 8001b74:	200004d8 	.word	0x200004d8
 8001b78:	200004dc 	.word	0x200004dc
 8001b7c:	200004e0 	.word	0x200004e0
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	200004e4 	.word	0x200004e4
 8001b88:	200004e8 	.word	0x200004e8
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	20000600 	.word	0x20000600
	}
	else if((GPIO_Pin == Button_3_Pin) && (HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin) == GPIO_PIN_RESET))
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b9a:	d119      	bne.n	8001bd0 <HAL_GPIO_EXTI_Callback+0x2c8>
 8001b9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ba0:	481c      	ldr	r0, [pc, #112]	@ (8001c14 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001ba2:	f002 fe51 	bl	8004848 <HAL_GPIO_ReadPin>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d111      	bne.n	8001bd0 <HAL_GPIO_EXTI_Callback+0x2c8>
	{
		mode = mode + BLUE_STORAGE;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <HAL_GPIO_EXTI_Callback+0x310>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	3305      	adds	r3, #5
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <HAL_GPIO_EXTI_Callback+0x310>)
 8001bb6:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_STORAGE)
 8001bb8:	4b17      	ldr	r3, [pc, #92]	@ (8001c18 <HAL_GPIO_EXTI_Callback+0x310>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d902      	bls.n	8001bc6 <HAL_GPIO_EXTI_Callback+0x2be>
		{
			mode = VOID;
 8001bc0:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <HAL_GPIO_EXTI_Callback+0x310>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_3_Pin);
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <HAL_GPIO_EXTI_Callback+0x314>)
 8001bc8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bcc:	615a      	str	r2, [r3, #20]
 8001bce:	e01d      	b.n	8001c0c <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_4_Pin) && (HAL_GPIO_ReadPin(Button_4_GPIO_Port, Button_4_Pin) == GPIO_PIN_RESET))
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bd6:	d119      	bne.n	8001c0c <HAL_GPIO_EXTI_Callback+0x304>
 8001bd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bdc:	4810      	ldr	r0, [pc, #64]	@ (8001c20 <HAL_GPIO_EXTI_Callback+0x318>)
 8001bde:	f002 fe33 	bl	8004848 <HAL_GPIO_ReadPin>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d111      	bne.n	8001c0c <HAL_GPIO_EXTI_Callback+0x304>
	{
		mode = mode + BLUE_STORAGE;
 8001be8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <HAL_GPIO_EXTI_Callback+0x310>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	3305      	adds	r3, #5
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <HAL_GPIO_EXTI_Callback+0x310>)
 8001bf2:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_STORAGE)
 8001bf4:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <HAL_GPIO_EXTI_Callback+0x310>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d902      	bls.n	8001c02 <HAL_GPIO_EXTI_Callback+0x2fa>
		{
			mode = VOID;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_GPIO_EXTI_Callback+0x310>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_4_Pin);
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_GPIO_EXTI_Callback+0x314>)
 8001c04:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c08:	615a      	str	r2, [r3, #20]
	}
}
 8001c0a:	e7ff      	b.n	8001c0c <HAL_GPIO_EXTI_Callback+0x304>
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000
 8001c18:	20000600 	.word	0x20000600
 8001c1c:	40013c00 	.word	0x40013c00
 8001c20:	40020c00 	.word	0x40020c00
 8001c24:	00000000 	.word	0x00000000

08001c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b0a4      	sub	sp, #144	@ 0x90
 8001c2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c2e:	f002 fa35 	bl	800409c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c32:	f000 fa89 	bl	8002148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c36:	f000 fda7 	bl	8002788 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001c3a:	f000 faef 	bl	800221c <MX_I2C2_Init>
  MX_TIM1_Init();
 8001c3e:	f000 fb1b 	bl	8002278 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c42:	f000 fbdd 	bl	8002400 <MX_TIM2_Init>
  MX_TIM8_Init();
 8001c46:	f000 fc5d 	bl	8002504 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001c4a:	f000 fd1f 	bl	800268c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001c4e:	f000 fd47 	bl	80026e0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001c52:	f000 fd6f 	bl	8002734 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8001c56:	2100      	movs	r1, #0
 8001c58:	48c7      	ldr	r0, [pc, #796]	@ (8001f78 <main+0x350>)
 8001c5a:	f004 f81d 	bl	8005c98 <HAL_TIM_PWM_Start_IT>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <main+0x40>
  {
	  Error_Handler();
 8001c64:	f001 f864 	bl	8002d30 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8001c68:	2104      	movs	r1, #4
 8001c6a:	48c3      	ldr	r0, [pc, #780]	@ (8001f78 <main+0x350>)
 8001c6c:	f004 f814 	bl	8005c98 <HAL_TIM_PWM_Start_IT>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <main+0x52>
  {
	  Error_Handler();
 8001c76:	f001 f85b 	bl	8002d30 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8001c7a:	2108      	movs	r1, #8
 8001c7c:	48be      	ldr	r0, [pc, #760]	@ (8001f78 <main+0x350>)
 8001c7e:	f004 f80b 	bl	8005c98 <HAL_TIM_PWM_Start_IT>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <main+0x64>
  {
	  Error_Handler();
 8001c88:	f001 f852 	bl	8002d30 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8001c8c:	210c      	movs	r1, #12
 8001c8e:	48ba      	ldr	r0, [pc, #744]	@ (8001f78 <main+0x350>)
 8001c90:	f004 f802 	bl	8005c98 <HAL_TIM_PWM_Start_IT>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <main+0x76>
  {
	  Error_Handler();
 8001c9a:	f001 f849 	bl	8002d30 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1) != HAL_OK)
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	48b6      	ldr	r0, [pc, #728]	@ (8001f7c <main+0x354>)
 8001ca2:	f003 fff9 	bl	8005c98 <HAL_TIM_PWM_Start_IT>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <main+0x88>
  {
	  Error_Handler();
 8001cac:	f001 f840 	bl	8002d30 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2) != HAL_OK)
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	48b2      	ldr	r0, [pc, #712]	@ (8001f7c <main+0x354>)
 8001cb4:	f003 fff0 	bl	8005c98 <HAL_TIM_PWM_Start_IT>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <main+0x9a>
  {
	  Error_Handler();
 8001cbe:	f001 f837 	bl	8002d30 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3) != HAL_OK)
 8001cc2:	2108      	movs	r1, #8
 8001cc4:	48ad      	ldr	r0, [pc, #692]	@ (8001f7c <main+0x354>)
 8001cc6:	f003 ffe7 	bl	8005c98 <HAL_TIM_PWM_Start_IT>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <main+0xac>
  {
	  Error_Handler();
 8001cd0:	f001 f82e 	bl	8002d30 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4) != HAL_OK)
 8001cd4:	210c      	movs	r1, #12
 8001cd6:	48a9      	ldr	r0, [pc, #676]	@ (8001f7c <main+0x354>)
 8001cd8:	f003 ffde 	bl	8005c98 <HAL_TIM_PWM_Start_IT>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <main+0xbe>
  {
	  Error_Handler();
 8001ce2:	f001 f825 	bl	8002d30 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3) != HAL_OK)
 8001ce6:	2108      	movs	r1, #8
 8001ce8:	48a5      	ldr	r0, [pc, #660]	@ (8001f80 <main+0x358>)
 8001cea:	f003 ffd5 	bl	8005c98 <HAL_TIM_PWM_Start_IT>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <main+0xd0>
  {
	  Error_Handler();
 8001cf4:	f001 f81c 	bl	8002d30 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4) != HAL_OK)
 8001cf8:	210c      	movs	r1, #12
 8001cfa:	48a1      	ldr	r0, [pc, #644]	@ (8001f80 <main+0x358>)
 8001cfc:	f003 ffcc 	bl	8005c98 <HAL_TIM_PWM_Start_IT>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <main+0xe2>
  {
	  Error_Handler();
 8001d06:	f001 f813 	bl	8002d30 <Error_Handler>
  }

  if(HAL_UART_Receive_IT(&huart1, receive, 1) != HAL_OK)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	499d      	ldr	r1, [pc, #628]	@ (8001f84 <main+0x35c>)
 8001d0e:	489e      	ldr	r0, [pc, #632]	@ (8001f88 <main+0x360>)
 8001d10:	f004 ffd2 	bl	8006cb8 <HAL_UART_Receive_IT>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <main+0xf6>
  {
	  Error_Handler();
 8001d1a:	f001 f809 	bl	8002d30 <Error_Handler>
  }
  if(HAL_UART_Receive_IT(&huart2, receiveCAM, 1) != HAL_OK)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	499a      	ldr	r1, [pc, #616]	@ (8001f8c <main+0x364>)
 8001d22:	489b      	ldr	r0, [pc, #620]	@ (8001f90 <main+0x368>)
 8001d24:	f004 ffc8 	bl	8006cb8 <HAL_UART_Receive_IT>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <main+0x10a>
  {
	  Error_Handler();
 8001d2e:	f000 ffff 	bl	8002d30 <Error_Handler>
  }
  if(HAL_UART_Receive_IT(&huart3, receiveMEGA, 1) != HAL_OK)
 8001d32:	2201      	movs	r2, #1
 8001d34:	4997      	ldr	r1, [pc, #604]	@ (8001f94 <main+0x36c>)
 8001d36:	4898      	ldr	r0, [pc, #608]	@ (8001f98 <main+0x370>)
 8001d38:	f004 ffbe 	bl	8006cb8 <HAL_UART_Receive_IT>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <main+0x11e>
  {
	  Error_Handler();
 8001d42:	f000 fff5 	bl	8002d30 <Error_Handler>
  }

  initializeSilos();
 8001d46:	f001 fd27 	bl	8003798 <initializeSilos>
  external_global blue_step1 = {0.0, 6000.0, 0.0};
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8001d56:	a37a      	add	r3, pc, #488	@ (adr r3, 8001f40 <main+0x318>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  external_global blue_step2 = {3700.0, 6000.0, 0.0};
 8001d6c:	4b8b      	ldr	r3, [pc, #556]	@ (8001f9c <main+0x374>)
 8001d6e:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8001d72:	461d      	mov	r5, r3
 8001d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d7c:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_step3 = {3700.0, 9500.0, 0.0};
 8001d80:	4b87      	ldr	r3, [pc, #540]	@ (8001fa0 <main+0x378>)
 8001d82:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001d86:	461d      	mov	r5, r3
 8001d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d90:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_step4 = {3700.0, 9500.0, -90.0};
 8001d94:	4b83      	ldr	r3, [pc, #524]	@ (8001fa4 <main+0x37c>)
 8001d96:	f107 0418 	add.w	r4, r7, #24
 8001d9a:	461d      	mov	r5, r3
 8001d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001da4:	e884 0003 	stmia.w	r4, {r0, r1}
//  EKF tes1 = {0.0, 6000.0, 0.0};
//  EKF tes2 = {3700.0, 6000.0, 0.0};
//  EKF tes3 = {3700.0, 9000.0, 0.0};

  double tolerance = 200.0;
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	4b7e      	ldr	r3, [pc, #504]	@ (8001fa8 <main+0x380>)
 8001dae:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_init();
 8001db2:	f7ff fd26 	bl	8001802 <lcd_init>

	  external_global position = odometry_eg();
 8001db6:	f000 ffdf 	bl	8002d78 <odometry_eg>
 8001dba:	eeb0 5a40 	vmov.f32	s10, s0
 8001dbe:	eef0 5a60 	vmov.f32	s11, s1
 8001dc2:	eeb0 6a41 	vmov.f32	s12, s2
 8001dc6:	eef0 6a61 	vmov.f32	s13, s3
 8001dca:	eeb0 7a42 	vmov.f32	s14, s4
 8001dce:	eef0 7a62 	vmov.f32	s15, s5
 8001dd2:	ed87 5b00 	vstr	d5, [r7]
 8001dd6:	ed87 6b02 	vstr	d6, [r7, #8]
 8001dda:	ed87 7b04 	vstr	d7, [r7, #16]
//	  EKF position_ekf = odometry_fusion();
	  display_EG();
 8001dde:	f001 f90f 	bl	8003000 <display_EG>
//	  displayKalman(position_ekf);
//	  displayCounter();

	  bool blue_step1_check = atTargetEG(blue_step1, position, tolerance+300, 1);
 8001de2:	a359      	add	r3, pc, #356	@ (adr r3, 8001f48 <main+0x320>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001dec:	f7fe fa4e 	bl	800028c <__adddf3>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	ec43 2b16 	vmov	d6, r2, r3
 8001df8:	ed97 3b00 	vldr	d3, [r7]
 8001dfc:	ed97 4b02 	vldr	d4, [r7, #8]
 8001e00:	ed97 5b04 	vldr	d5, [r7, #16]
 8001e04:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001e08:	ed97 1b1a 	vldr	d1, [r7, #104]	@ 0x68
 8001e0c:	ed97 2b1c 	vldr	d2, [r7, #112]	@ 0x70
 8001e10:	ed9f 7b4f 	vldr	d7, [pc, #316]	@ 8001f50 <main+0x328>
 8001e14:	f001 fae2 	bl	80033dc <atTargetEG>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	  bool blue_step2_check = atTargetEG(blue_step2, position, tolerance, 1);
 8001e1e:	ed97 3b00 	vldr	d3, [r7]
 8001e22:	ed97 4b02 	vldr	d4, [r7, #8]
 8001e26:	ed97 5b04 	vldr	d5, [r7, #16]
 8001e2a:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001e2e:	ed97 1b14 	vldr	d1, [r7, #80]	@ 0x50
 8001e32:	ed97 2b16 	vldr	d2, [r7, #88]	@ 0x58
 8001e36:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 8001f50 <main+0x328>
 8001e3a:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8001e3e:	f001 facd 	bl	80033dc <atTargetEG>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	  bool blue_step3_check = atTargetEG(blue_step3, position, tolerance, 1);
 8001e48:	ed97 3b00 	vldr	d3, [r7]
 8001e4c:	ed97 4b02 	vldr	d4, [r7, #8]
 8001e50:	ed97 5b04 	vldr	d5, [r7, #16]
 8001e54:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8001e58:	ed97 1b0e 	vldr	d1, [r7, #56]	@ 0x38
 8001e5c:	ed97 2b10 	vldr	d2, [r7, #64]	@ 0x40
 8001e60:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8001f50 <main+0x328>
 8001e64:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8001e68:	f001 fab8 	bl	80033dc <atTargetEG>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
	  bool blue_step4_check = atTargetEG(blue_step4, position, tolerance, 1);
 8001e72:	ed97 3b00 	vldr	d3, [r7]
 8001e76:	ed97 4b02 	vldr	d4, [r7, #8]
 8001e7a:	ed97 5b04 	vldr	d5, [r7, #16]
 8001e7e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001e82:	ed97 1b08 	vldr	d1, [r7, #32]
 8001e86:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001e8a:	ed9f 7b31 	vldr	d7, [pc, #196]	@ 8001f50 <main+0x328>
 8001e8e:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8001e92:	f001 faa3 	bl	80033dc <atTargetEG>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

//	  bool tes1_check = atTargetPosition(tes1, position_ekf, tolerance, 1);
//	  bool tes2_check = atTargetPosition(tes2, position_ekf, tolerance, 1);
//	  bool tes3_check = atTargetPosition(tes3, position_ekf, tolerance, 1);

	  switch(mode)
 8001e9c:	4b43      	ldr	r3, [pc, #268]	@ (8001fac <main+0x384>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	2b10      	cmp	r3, #16
 8001ea4:	f200 80f7 	bhi.w	8002096 <main+0x46e>
 8001ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb0 <main+0x288>)
 8001eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eae:	bf00      	nop
 8001eb0:	08001ef5 	.word	0x08001ef5
 8001eb4:	08001fb9 	.word	0x08001fb9
 8001eb8:	08002003 	.word	0x08002003
 8001ebc:	0800204d 	.word	0x0800204d
 8001ec0:	080020d3 	.word	0x080020d3
 8001ec4:	080020d3 	.word	0x080020d3
 8001ec8:	080020d3 	.word	0x080020d3
 8001ecc:	080020d3 	.word	0x080020d3
 8001ed0:	080020d3 	.word	0x080020d3
 8001ed4:	080020d3 	.word	0x080020d3
 8001ed8:	080020d3 	.word	0x080020d3
 8001edc:	080020d3 	.word	0x080020d3
 8001ee0:	080020d3 	.word	0x080020d3
 8001ee4:	080020d3 	.word	0x080020d3
 8001ee8:	080020d3 	.word	0x080020d3
 8001eec:	080020d3 	.word	0x080020d3
 8001ef0:	080020d3 	.word	0x080020d3
	  {
	  case BLUE_STEP1:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001efa:	482d      	ldr	r0, [pc, #180]	@ (8001fb0 <main+0x388>)
 8001efc:	f002 fcbc 	bl	8004878 <HAL_GPIO_WritePin>
		  PID_EG(blue_step1, 1.1, 0.0, 0.0, 2.5, 0.8, 4000);
 8001f00:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001f04:	ed97 1b1a 	vldr	d1, [r7, #104]	@ 0x68
 8001f08:	ed97 2b1c 	vldr	d2, [r7, #112]	@ 0x70
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	4b28      	ldr	r3, [pc, #160]	@ (8001fb4 <main+0x38c>)
 8001f12:	e9cd 2300 	strd	r2, r3, [sp]
 8001f16:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8001f58 <main+0x330>
 8001f1a:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8001f60 <main+0x338>
 8001f1e:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001f68 <main+0x340>
 8001f22:	ed9f 4b11 	vldr	d4, [pc, #68]	@ 8001f68 <main+0x340>
 8001f26:	ed9f 3b12 	vldr	d3, [pc, #72]	@ 8001f70 <main+0x348>
 8001f2a:	f001 fab1 	bl	8003490 <PID_EG>
		  if(blue_step1_check)
 8001f2e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80cf 	beq.w	80020d6 <main+0x4ae>
		  {
			  mode = BLUE_STEP2;
 8001f38:	4b1c      	ldr	r3, [pc, #112]	@ (8001fac <main+0x384>)
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8001f3e:	e0ca      	b.n	80020d6 <main+0x4ae>
 8001f40:	00000000 	.word	0x00000000
 8001f44:	40b77000 	.word	0x40b77000
 8001f48:	00000000 	.word	0x00000000
 8001f4c:	4072c000 	.word	0x4072c000
 8001f50:	00000000 	.word	0x00000000
 8001f54:	3ff00000 	.word	0x3ff00000
 8001f58:	9999999a 	.word	0x9999999a
 8001f5c:	3fe99999 	.word	0x3fe99999
 8001f60:	00000000 	.word	0x00000000
 8001f64:	40040000 	.word	0x40040000
	...
 8001f70:	9999999a 	.word	0x9999999a
 8001f74:	3ff19999 	.word	0x3ff19999
 8001f78:	20000320 	.word	0x20000320
 8001f7c:	200003b0 	.word	0x200003b0
 8001f80:	20000368 	.word	0x20000368
 8001f84:	200004ec 	.word	0x200004ec
 8001f88:	200003f8 	.word	0x200003f8
 8001f8c:	20000540 	.word	0x20000540
 8001f90:	20000440 	.word	0x20000440
 8001f94:	200005b0 	.word	0x200005b0
 8001f98:	20000488 	.word	0x20000488
 8001f9c:	0800d940 	.word	0x0800d940
 8001fa0:	0800d958 	.word	0x0800d958
 8001fa4:	0800d970 	.word	0x0800d970
 8001fa8:	40690000 	.word	0x40690000
 8001fac:	20000600 	.word	0x20000600
 8001fb0:	40020c00 	.word	0x40020c00
 8001fb4:	40af4000 	.word	0x40af4000
	  case BLUE_STEP2:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fbe:	4860      	ldr	r0, [pc, #384]	@ (8002140 <main+0x518>)
 8001fc0:	f002 fc5a 	bl	8004878 <HAL_GPIO_WritePin>
		  PID_EG(blue_step2, 1.9, 0.0, 0.0, 2.5, 0.9, 5500);
 8001fc4:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001fc8:	ed97 1b14 	vldr	d1, [r7, #80]	@ 0x50
 8001fcc:	ed97 2b16 	vldr	d2, [r7, #88]	@ 0x58
 8001fd0:	a347      	add	r3, pc, #284	@ (adr r3, 80020f0 <main+0x4c8>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	e9cd 2300 	strd	r2, r3, [sp]
 8001fda:	ed9f 7b47 	vldr	d7, [pc, #284]	@ 80020f8 <main+0x4d0>
 8001fde:	ed9f 6b48 	vldr	d6, [pc, #288]	@ 8002100 <main+0x4d8>
 8001fe2:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8002108 <main+0x4e0>
 8001fe6:	ed9f 4b48 	vldr	d4, [pc, #288]	@ 8002108 <main+0x4e0>
 8001fea:	ed9f 3b49 	vldr	d3, [pc, #292]	@ 8002110 <main+0x4e8>
 8001fee:	f001 fa4f 	bl	8003490 <PID_EG>
		  if(blue_step2_check)
 8001ff2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d06f      	beq.n	80020da <main+0x4b2>
		  {
			  mode = BLUE_STEP3;
 8001ffa:	4b52      	ldr	r3, [pc, #328]	@ (8002144 <main+0x51c>)
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002000:	e06b      	b.n	80020da <main+0x4b2>
	  case BLUE_STEP3:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002008:	484d      	ldr	r0, [pc, #308]	@ (8002140 <main+0x518>)
 800200a:	f002 fc35 	bl	8004878 <HAL_GPIO_WritePin>
		  PID_EG(blue_step3, 1.5, 0.0, 0.0, 2.5, 0.8, 3500);
 800200e:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8002012:	ed97 1b0e 	vldr	d1, [r7, #56]	@ 0x38
 8002016:	ed97 2b10 	vldr	d2, [r7, #64]	@ 0x40
 800201a:	a33f      	add	r3, pc, #252	@ (adr r3, 8002118 <main+0x4f0>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	e9cd 2300 	strd	r2, r3, [sp]
 8002024:	ed9f 7b3e 	vldr	d7, [pc, #248]	@ 8002120 <main+0x4f8>
 8002028:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8002100 <main+0x4d8>
 800202c:	ed9f 5b36 	vldr	d5, [pc, #216]	@ 8002108 <main+0x4e0>
 8002030:	ed9f 4b35 	vldr	d4, [pc, #212]	@ 8002108 <main+0x4e0>
 8002034:	ed9f 3b3c 	vldr	d3, [pc, #240]	@ 8002128 <main+0x500>
 8002038:	f001 fa2a 	bl	8003490 <PID_EG>
		  if(blue_step3_check)
 800203c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8002040:	2b00      	cmp	r3, #0
 8002042:	d04c      	beq.n	80020de <main+0x4b6>
		  {
			  mode = VOID;
 8002044:	4b3f      	ldr	r3, [pc, #252]	@ (8002144 <main+0x51c>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800204a:	e048      	b.n	80020de <main+0x4b6>
	  case BLUE_STEP4:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002052:	483b      	ldr	r0, [pc, #236]	@ (8002140 <main+0x518>)
 8002054:	f002 fc10 	bl	8004878 <HAL_GPIO_WritePin>
		  PID_EG(blue_step4, 1.0, 0.0, 0.0, 1.0, 0.8, 1500);
 8002058:	ed97 0b06 	vldr	d0, [r7, #24]
 800205c:	ed97 1b08 	vldr	d1, [r7, #32]
 8002060:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8002064:	a332      	add	r3, pc, #200	@ (adr r3, 8002130 <main+0x508>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	e9cd 2300 	strd	r2, r3, [sp]
 800206e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8002120 <main+0x4f8>
 8002072:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8002138 <main+0x510>
 8002076:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8002108 <main+0x4e0>
 800207a:	ed9f 4b23 	vldr	d4, [pc, #140]	@ 8002108 <main+0x4e0>
 800207e:	ed9f 3b2e 	vldr	d3, [pc, #184]	@ 8002138 <main+0x510>
 8002082:	f001 fa05 	bl	8003490 <PID_EG>
		  if(blue_step4_check)
 8002086:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800208a:	2b00      	cmp	r3, #0
 800208c:	d029      	beq.n	80020e2 <main+0x4ba>
		  {
			  mode = VOID;
 800208e:	4b2d      	ldr	r3, [pc, #180]	@ (8002144 <main+0x51c>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002094:	e025      	b.n	80020e2 <main+0x4ba>
	  case RED_FIND_SILO:
		  break;
	  case TES:
		  break;
	  default:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800209c:	4828      	ldr	r0, [pc, #160]	@ (8002140 <main+0x518>)
 800209e:	f002 fbeb 	bl	8004878 <HAL_GPIO_WritePin>
		  Inverse_Kinematics(0, 0, 0);
 80020a2:	ed9f 2b19 	vldr	d2, [pc, #100]	@ 8002108 <main+0x4e0>
 80020a6:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8002108 <main+0x4e0>
 80020aa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8002108 <main+0x4e0>
 80020ae:	f7ff f84b 	bl	8001148 <Inverse_Kinematics>
		  setMotorSpeed(1, 0);
 80020b2:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 8002108 <main+0x4e0>
 80020b6:	2001      	movs	r0, #1
 80020b8:	f7fe ffd0 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 80020bc:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8002108 <main+0x4e0>
 80020c0:	2002      	movs	r0, #2
 80020c2:	f7fe ffcb 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 80020c6:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 8002108 <main+0x4e0>
 80020ca:	2007      	movs	r0, #7
 80020cc:	f7fe ffc6 	bl	800105c <setMotorSpeed>
		  break;
 80020d0:	e008      	b.n	80020e4 <main+0x4bc>
		  break;
 80020d2:	bf00      	nop
 80020d4:	e006      	b.n	80020e4 <main+0x4bc>
		  break;
 80020d6:	bf00      	nop
 80020d8:	e004      	b.n	80020e4 <main+0x4bc>
		  break;
 80020da:	bf00      	nop
 80020dc:	e002      	b.n	80020e4 <main+0x4bc>
		  break;
 80020de:	bf00      	nop
 80020e0:	e000      	b.n	80020e4 <main+0x4bc>
		  break;
 80020e2:	bf00      	nop
	  }
	  lcd_clear();
 80020e4:	f7ff fc06 	bl	80018f4 <lcd_clear>
  {
 80020e8:	e663      	b.n	8001db2 <main+0x18a>
 80020ea:	bf00      	nop
 80020ec:	f3af 8000 	nop.w
 80020f0:	00000000 	.word	0x00000000
 80020f4:	40b57c00 	.word	0x40b57c00
 80020f8:	cccccccd 	.word	0xcccccccd
 80020fc:	3feccccc 	.word	0x3feccccc
 8002100:	00000000 	.word	0x00000000
 8002104:	40040000 	.word	0x40040000
	...
 8002110:	66666666 	.word	0x66666666
 8002114:	3ffe6666 	.word	0x3ffe6666
 8002118:	00000000 	.word	0x00000000
 800211c:	40ab5800 	.word	0x40ab5800
 8002120:	9999999a 	.word	0x9999999a
 8002124:	3fe99999 	.word	0x3fe99999
 8002128:	00000000 	.word	0x00000000
 800212c:	3ff80000 	.word	0x3ff80000
 8002130:	00000000 	.word	0x00000000
 8002134:	40977000 	.word	0x40977000
 8002138:	00000000 	.word	0x00000000
 800213c:	3ff00000 	.word	0x3ff00000
 8002140:	40020c00 	.word	0x40020c00
 8002144:	20000600 	.word	0x20000600

08002148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b094      	sub	sp, #80	@ 0x50
 800214c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800214e:	f107 0320 	add.w	r3, r7, #32
 8002152:	2230      	movs	r2, #48	@ 0x30
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f007 fb07 	bl	800976a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	4b28      	ldr	r3, [pc, #160]	@ (8002214 <SystemClock_Config+0xcc>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	4a27      	ldr	r2, [pc, #156]	@ (8002214 <SystemClock_Config+0xcc>)
 8002176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800217a:	6413      	str	r3, [r2, #64]	@ 0x40
 800217c:	4b25      	ldr	r3, [pc, #148]	@ (8002214 <SystemClock_Config+0xcc>)
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002188:	2300      	movs	r3, #0
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	4b22      	ldr	r3, [pc, #136]	@ (8002218 <SystemClock_Config+0xd0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a21      	ldr	r2, [pc, #132]	@ (8002218 <SystemClock_Config+0xd0>)
 8002192:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b1f      	ldr	r3, [pc, #124]	@ (8002218 <SystemClock_Config+0xd0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021a4:	2301      	movs	r3, #1
 80021a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ae:	2302      	movs	r3, #2
 80021b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021b8:	2308      	movs	r3, #8
 80021ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80021bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80021c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021c2:	2302      	movs	r3, #2
 80021c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021c6:	2307      	movs	r3, #7
 80021c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ca:	f107 0320 	add.w	r3, r7, #32
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 f822 	bl	8005218 <HAL_RCC_OscConfig>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80021da:	f000 fda9 	bl	8002d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021de:	230f      	movs	r3, #15
 80021e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021e2:	2302      	movs	r3, #2
 80021e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021ea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021f6:	f107 030c 	add.w	r3, r7, #12
 80021fa:	2105      	movs	r1, #5
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 fa83 	bl	8005708 <HAL_RCC_ClockConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002208:	f000 fd92 	bl	8002d30 <Error_Handler>
  }
}
 800220c:	bf00      	nop
 800220e:	3750      	adds	r7, #80	@ 0x50
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40023800 	.word	0x40023800
 8002218:	40007000 	.word	0x40007000

0800221c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002220:	4b12      	ldr	r3, [pc, #72]	@ (800226c <MX_I2C2_Init+0x50>)
 8002222:	4a13      	ldr	r2, [pc, #76]	@ (8002270 <MX_I2C2_Init+0x54>)
 8002224:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002226:	4b11      	ldr	r3, [pc, #68]	@ (800226c <MX_I2C2_Init+0x50>)
 8002228:	4a12      	ldr	r2, [pc, #72]	@ (8002274 <MX_I2C2_Init+0x58>)
 800222a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800222c:	4b0f      	ldr	r3, [pc, #60]	@ (800226c <MX_I2C2_Init+0x50>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002232:	4b0e      	ldr	r3, [pc, #56]	@ (800226c <MX_I2C2_Init+0x50>)
 8002234:	2200      	movs	r2, #0
 8002236:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002238:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <MX_I2C2_Init+0x50>)
 800223a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800223e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002240:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <MX_I2C2_Init+0x50>)
 8002242:	2200      	movs	r2, #0
 8002244:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002246:	4b09      	ldr	r3, [pc, #36]	@ (800226c <MX_I2C2_Init+0x50>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800224c:	4b07      	ldr	r3, [pc, #28]	@ (800226c <MX_I2C2_Init+0x50>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <MX_I2C2_Init+0x50>)
 8002254:	2200      	movs	r2, #0
 8002256:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002258:	4804      	ldr	r0, [pc, #16]	@ (800226c <MX_I2C2_Init+0x50>)
 800225a:	f002 fb3f 	bl	80048dc <HAL_I2C_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002264:	f000 fd64 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200002cc 	.word	0x200002cc
 8002270:	40005800 	.word	0x40005800
 8002274:	000186a0 	.word	0x000186a0

08002278 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b096      	sub	sp, #88	@ 0x58
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800227e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]
 80022a6:	615a      	str	r2, [r3, #20]
 80022a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	2220      	movs	r2, #32
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f007 fa5a 	bl	800976a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022b6:	4b50      	ldr	r3, [pc, #320]	@ (80023f8 <MX_TIM1_Init+0x180>)
 80022b8:	4a50      	ldr	r2, [pc, #320]	@ (80023fc <MX_TIM1_Init+0x184>)
 80022ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 80022bc:	4b4e      	ldr	r3, [pc, #312]	@ (80023f8 <MX_TIM1_Init+0x180>)
 80022be:	2214      	movs	r2, #20
 80022c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b4d      	ldr	r3, [pc, #308]	@ (80023f8 <MX_TIM1_Init+0x180>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000-1;
 80022c8:	4b4b      	ldr	r3, [pc, #300]	@ (80023f8 <MX_TIM1_Init+0x180>)
 80022ca:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80022ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d0:	4b49      	ldr	r3, [pc, #292]	@ (80023f8 <MX_TIM1_Init+0x180>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022d6:	4b48      	ldr	r3, [pc, #288]	@ (80023f8 <MX_TIM1_Init+0x180>)
 80022d8:	2200      	movs	r2, #0
 80022da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022dc:	4b46      	ldr	r3, [pc, #280]	@ (80023f8 <MX_TIM1_Init+0x180>)
 80022de:	2200      	movs	r2, #0
 80022e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022e2:	4845      	ldr	r0, [pc, #276]	@ (80023f8 <MX_TIM1_Init+0x180>)
 80022e4:	f003 fc30 	bl	8005b48 <HAL_TIM_Base_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80022ee:	f000 fd1f 	bl	8002d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022f8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80022fc:	4619      	mov	r1, r3
 80022fe:	483e      	ldr	r0, [pc, #248]	@ (80023f8 <MX_TIM1_Init+0x180>)
 8002300:	f003 ff92 	bl	8006228 <HAL_TIM_ConfigClockSource>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800230a:	f000 fd11 	bl	8002d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800230e:	483a      	ldr	r0, [pc, #232]	@ (80023f8 <MX_TIM1_Init+0x180>)
 8002310:	f003 fc69 	bl	8005be6 <HAL_TIM_PWM_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800231a:	f000 fd09 	bl	8002d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002326:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800232a:	4619      	mov	r1, r3
 800232c:	4832      	ldr	r0, [pc, #200]	@ (80023f8 <MX_TIM1_Init+0x180>)
 800232e:	f004 fb91 	bl	8006a54 <HAL_TIMEx_MasterConfigSynchronization>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002338:	f000 fcfa 	bl	8002d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800233c:	2360      	movs	r3, #96	@ 0x60
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002348:	2300      	movs	r3, #0
 800234a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002350:	2300      	movs	r3, #0
 8002352:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002354:	2300      	movs	r3, #0
 8002356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800235c:	2200      	movs	r2, #0
 800235e:	4619      	mov	r1, r3
 8002360:	4825      	ldr	r0, [pc, #148]	@ (80023f8 <MX_TIM1_Init+0x180>)
 8002362:	f003 fe9f 	bl	80060a4 <HAL_TIM_PWM_ConfigChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800236c:	f000 fce0 	bl	8002d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002374:	2204      	movs	r2, #4
 8002376:	4619      	mov	r1, r3
 8002378:	481f      	ldr	r0, [pc, #124]	@ (80023f8 <MX_TIM1_Init+0x180>)
 800237a:	f003 fe93 	bl	80060a4 <HAL_TIM_PWM_ConfigChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002384:	f000 fcd4 	bl	8002d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002388:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800238c:	2208      	movs	r2, #8
 800238e:	4619      	mov	r1, r3
 8002390:	4819      	ldr	r0, [pc, #100]	@ (80023f8 <MX_TIM1_Init+0x180>)
 8002392:	f003 fe87 	bl	80060a4 <HAL_TIM_PWM_ConfigChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800239c:	f000 fcc8 	bl	8002d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023a4:	220c      	movs	r2, #12
 80023a6:	4619      	mov	r1, r3
 80023a8:	4813      	ldr	r0, [pc, #76]	@ (80023f8 <MX_TIM1_Init+0x180>)
 80023aa:	f003 fe7b 	bl	80060a4 <HAL_TIM_PWM_ConfigChannel>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80023b4:	f000 fcbc 	bl	8002d30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	4619      	mov	r1, r3
 80023da:	4807      	ldr	r0, [pc, #28]	@ (80023f8 <MX_TIM1_Init+0x180>)
 80023dc:	f004 fbb6 	bl	8006b4c <HAL_TIMEx_ConfigBreakDeadTime>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80023e6:	f000 fca3 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023ea:	4803      	ldr	r0, [pc, #12]	@ (80023f8 <MX_TIM1_Init+0x180>)
 80023ec:	f001 fb54 	bl	8003a98 <HAL_TIM_MspPostInit>

}
 80023f0:	bf00      	nop
 80023f2:	3758      	adds	r7, #88	@ 0x58
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000320 	.word	0x20000320
 80023fc:	40010000 	.word	0x40010000

08002400 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08e      	sub	sp, #56	@ 0x38
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002406:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002414:	f107 0320 	add.w	r3, r7, #32
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
 800242c:	615a      	str	r2, [r3, #20]
 800242e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002430:	4b33      	ldr	r3, [pc, #204]	@ (8002500 <MX_TIM2_Init+0x100>)
 8002432:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002436:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8002438:	4b31      	ldr	r3, [pc, #196]	@ (8002500 <MX_TIM2_Init+0x100>)
 800243a:	f240 628f 	movw	r2, #1679	@ 0x68f
 800243e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002440:	4b2f      	ldr	r3, [pc, #188]	@ (8002500 <MX_TIM2_Init+0x100>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002446:	4b2e      	ldr	r3, [pc, #184]	@ (8002500 <MX_TIM2_Init+0x100>)
 8002448:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800244c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244e:	4b2c      	ldr	r3, [pc, #176]	@ (8002500 <MX_TIM2_Init+0x100>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002454:	4b2a      	ldr	r3, [pc, #168]	@ (8002500 <MX_TIM2_Init+0x100>)
 8002456:	2200      	movs	r2, #0
 8002458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800245a:	4829      	ldr	r0, [pc, #164]	@ (8002500 <MX_TIM2_Init+0x100>)
 800245c:	f003 fb74 	bl	8005b48 <HAL_TIM_Base_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002466:	f000 fc63 	bl	8002d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800246a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800246e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002470:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002474:	4619      	mov	r1, r3
 8002476:	4822      	ldr	r0, [pc, #136]	@ (8002500 <MX_TIM2_Init+0x100>)
 8002478:	f003 fed6 	bl	8006228 <HAL_TIM_ConfigClockSource>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002482:	f000 fc55 	bl	8002d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002486:	481e      	ldr	r0, [pc, #120]	@ (8002500 <MX_TIM2_Init+0x100>)
 8002488:	f003 fbad 	bl	8005be6 <HAL_TIM_PWM_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002492:	f000 fc4d 	bl	8002d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800249e:	f107 0320 	add.w	r3, r7, #32
 80024a2:	4619      	mov	r1, r3
 80024a4:	4816      	ldr	r0, [pc, #88]	@ (8002500 <MX_TIM2_Init+0x100>)
 80024a6:	f004 fad5 	bl	8006a54 <HAL_TIMEx_MasterConfigSynchronization>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80024b0:	f000 fc3e 	bl	8002d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b4:	2360      	movs	r3, #96	@ 0x60
 80024b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	2208      	movs	r2, #8
 80024c8:	4619      	mov	r1, r3
 80024ca:	480d      	ldr	r0, [pc, #52]	@ (8002500 <MX_TIM2_Init+0x100>)
 80024cc:	f003 fdea 	bl	80060a4 <HAL_TIM_PWM_ConfigChannel>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80024d6:	f000 fc2b 	bl	8002d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	220c      	movs	r2, #12
 80024de:	4619      	mov	r1, r3
 80024e0:	4807      	ldr	r0, [pc, #28]	@ (8002500 <MX_TIM2_Init+0x100>)
 80024e2:	f003 fddf 	bl	80060a4 <HAL_TIM_PWM_ConfigChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80024ec:	f000 fc20 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024f0:	4803      	ldr	r0, [pc, #12]	@ (8002500 <MX_TIM2_Init+0x100>)
 80024f2:	f001 fad1 	bl	8003a98 <HAL_TIM_MspPostInit>

}
 80024f6:	bf00      	nop
 80024f8:	3738      	adds	r7, #56	@ 0x38
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000368 	.word	0x20000368

08002504 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b096      	sub	sp, #88	@ 0x58
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800250a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002518:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
 8002530:	611a      	str	r2, [r3, #16]
 8002532:	615a      	str	r2, [r3, #20]
 8002534:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	2220      	movs	r2, #32
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f007 f914 	bl	800976a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002542:	4b50      	ldr	r3, [pc, #320]	@ (8002684 <MX_TIM8_Init+0x180>)
 8002544:	4a50      	ldr	r2, [pc, #320]	@ (8002688 <MX_TIM8_Init+0x184>)
 8002546:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 20;
 8002548:	4b4e      	ldr	r3, [pc, #312]	@ (8002684 <MX_TIM8_Init+0x180>)
 800254a:	2214      	movs	r2, #20
 800254c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254e:	4b4d      	ldr	r3, [pc, #308]	@ (8002684 <MX_TIM8_Init+0x180>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000-1;
 8002554:	4b4b      	ldr	r3, [pc, #300]	@ (8002684 <MX_TIM8_Init+0x180>)
 8002556:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800255a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255c:	4b49      	ldr	r3, [pc, #292]	@ (8002684 <MX_TIM8_Init+0x180>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002562:	4b48      	ldr	r3, [pc, #288]	@ (8002684 <MX_TIM8_Init+0x180>)
 8002564:	2200      	movs	r2, #0
 8002566:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002568:	4b46      	ldr	r3, [pc, #280]	@ (8002684 <MX_TIM8_Init+0x180>)
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800256e:	4845      	ldr	r0, [pc, #276]	@ (8002684 <MX_TIM8_Init+0x180>)
 8002570:	f003 faea 	bl	8005b48 <HAL_TIM_Base_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800257a:	f000 fbd9 	bl	8002d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800257e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002582:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002584:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002588:	4619      	mov	r1, r3
 800258a:	483e      	ldr	r0, [pc, #248]	@ (8002684 <MX_TIM8_Init+0x180>)
 800258c:	f003 fe4c 	bl	8006228 <HAL_TIM_ConfigClockSource>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002596:	f000 fbcb 	bl	8002d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800259a:	483a      	ldr	r0, [pc, #232]	@ (8002684 <MX_TIM8_Init+0x180>)
 800259c:	f003 fb23 	bl	8005be6 <HAL_TIM_PWM_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80025a6:	f000 fbc3 	bl	8002d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80025b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80025b6:	4619      	mov	r1, r3
 80025b8:	4832      	ldr	r0, [pc, #200]	@ (8002684 <MX_TIM8_Init+0x180>)
 80025ba:	f004 fa4b 	bl	8006a54 <HAL_TIMEx_MasterConfigSynchronization>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80025c4:	f000 fbb4 	bl	8002d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025c8:	2360      	movs	r3, #96	@ 0x60
 80025ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025d4:	2300      	movs	r3, #0
 80025d6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025dc:	2300      	movs	r3, #0
 80025de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025e0:	2300      	movs	r3, #0
 80025e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025e8:	2200      	movs	r2, #0
 80025ea:	4619      	mov	r1, r3
 80025ec:	4825      	ldr	r0, [pc, #148]	@ (8002684 <MX_TIM8_Init+0x180>)
 80025ee:	f003 fd59 	bl	80060a4 <HAL_TIM_PWM_ConfigChannel>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80025f8:	f000 fb9a 	bl	8002d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002600:	2204      	movs	r2, #4
 8002602:	4619      	mov	r1, r3
 8002604:	481f      	ldr	r0, [pc, #124]	@ (8002684 <MX_TIM8_Init+0x180>)
 8002606:	f003 fd4d 	bl	80060a4 <HAL_TIM_PWM_ConfigChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002610:	f000 fb8e 	bl	8002d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002618:	2208      	movs	r2, #8
 800261a:	4619      	mov	r1, r3
 800261c:	4819      	ldr	r0, [pc, #100]	@ (8002684 <MX_TIM8_Init+0x180>)
 800261e:	f003 fd41 	bl	80060a4 <HAL_TIM_PWM_ConfigChannel>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002628:	f000 fb82 	bl	8002d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800262c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002630:	220c      	movs	r2, #12
 8002632:	4619      	mov	r1, r3
 8002634:	4813      	ldr	r0, [pc, #76]	@ (8002684 <MX_TIM8_Init+0x180>)
 8002636:	f003 fd35 	bl	80060a4 <HAL_TIM_PWM_ConfigChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002640:	f000 fb76 	bl	8002d30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002658:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800265c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	4619      	mov	r1, r3
 8002666:	4807      	ldr	r0, [pc, #28]	@ (8002684 <MX_TIM8_Init+0x180>)
 8002668:	f004 fa70 	bl	8006b4c <HAL_TIMEx_ConfigBreakDeadTime>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002672:	f000 fb5d 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002676:	4803      	ldr	r0, [pc, #12]	@ (8002684 <MX_TIM8_Init+0x180>)
 8002678:	f001 fa0e 	bl	8003a98 <HAL_TIM_MspPostInit>

}
 800267c:	bf00      	nop
 800267e:	3758      	adds	r7, #88	@ 0x58
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200003b0 	.word	0x200003b0
 8002688:	40010400 	.word	0x40010400

0800268c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 8002692:	4a12      	ldr	r2, [pc, #72]	@ (80026dc <MX_USART1_UART_Init+0x50>)
 8002694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 8002698:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800269c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800269e:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026a4:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026aa:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026b0:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 80026b2:	220c      	movs	r2, #12
 80026b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026b6:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026bc:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026c2:	4805      	ldr	r0, [pc, #20]	@ (80026d8 <MX_USART1_UART_Init+0x4c>)
 80026c4:	f004 faa8 	bl	8006c18 <HAL_UART_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026ce:	f000 fb2f 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200003f8 	.word	0x200003f8
 80026dc:	40011000 	.word	0x40011000

080026e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	@ (8002730 <MX_USART2_UART_Init+0x50>)
 80026e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026ea:	4b10      	ldr	r3, [pc, #64]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 80026ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002704:	4b09      	ldr	r3, [pc, #36]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 8002706:	220c      	movs	r2, #12
 8002708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270a:	4b08      	ldr	r3, [pc, #32]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002716:	4805      	ldr	r0, [pc, #20]	@ (800272c <MX_USART2_UART_Init+0x4c>)
 8002718:	f004 fa7e 	bl	8006c18 <HAL_UART_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002722:	f000 fb05 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000440 	.word	0x20000440
 8002730:	40004400 	.word	0x40004400

08002734 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002738:	4b11      	ldr	r3, [pc, #68]	@ (8002780 <MX_USART3_UART_Init+0x4c>)
 800273a:	4a12      	ldr	r2, [pc, #72]	@ (8002784 <MX_USART3_UART_Init+0x50>)
 800273c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800273e:	4b10      	ldr	r3, [pc, #64]	@ (8002780 <MX_USART3_UART_Init+0x4c>)
 8002740:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002744:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002746:	4b0e      	ldr	r3, [pc, #56]	@ (8002780 <MX_USART3_UART_Init+0x4c>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800274c:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <MX_USART3_UART_Init+0x4c>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002752:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <MX_USART3_UART_Init+0x4c>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002758:	4b09      	ldr	r3, [pc, #36]	@ (8002780 <MX_USART3_UART_Init+0x4c>)
 800275a:	220c      	movs	r2, #12
 800275c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800275e:	4b08      	ldr	r3, [pc, #32]	@ (8002780 <MX_USART3_UART_Init+0x4c>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002764:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <MX_USART3_UART_Init+0x4c>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800276a:	4805      	ldr	r0, [pc, #20]	@ (8002780 <MX_USART3_UART_Init+0x4c>)
 800276c:	f004 fa54 	bl	8006c18 <HAL_UART_Init>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002776:	f000 fadb 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000488 	.word	0x20000488
 8002784:	40004800 	.word	0x40004800

08002788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08c      	sub	sp, #48	@ 0x30
 800278c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278e:	f107 031c 	add.w	r3, r7, #28
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	60da      	str	r2, [r3, #12]
 800279c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	4bbb      	ldr	r3, [pc, #748]	@ (8002a90 <MX_GPIO_Init+0x308>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	4aba      	ldr	r2, [pc, #744]	@ (8002a90 <MX_GPIO_Init+0x308>)
 80027a8:	f043 0310 	orr.w	r3, r3, #16
 80027ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ae:	4bb8      	ldr	r3, [pc, #736]	@ (8002a90 <MX_GPIO_Init+0x308>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	4bb4      	ldr	r3, [pc, #720]	@ (8002a90 <MX_GPIO_Init+0x308>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	4ab3      	ldr	r2, [pc, #716]	@ (8002a90 <MX_GPIO_Init+0x308>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ca:	4bb1      	ldr	r3, [pc, #708]	@ (8002a90 <MX_GPIO_Init+0x308>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	4bad      	ldr	r3, [pc, #692]	@ (8002a90 <MX_GPIO_Init+0x308>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	4aac      	ldr	r2, [pc, #688]	@ (8002a90 <MX_GPIO_Init+0x308>)
 80027e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e6:	4baa      	ldr	r3, [pc, #680]	@ (8002a90 <MX_GPIO_Init+0x308>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	4ba6      	ldr	r3, [pc, #664]	@ (8002a90 <MX_GPIO_Init+0x308>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	4aa5      	ldr	r2, [pc, #660]	@ (8002a90 <MX_GPIO_Init+0x308>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6313      	str	r3, [r2, #48]	@ 0x30
 8002802:	4ba3      	ldr	r3, [pc, #652]	@ (8002a90 <MX_GPIO_Init+0x308>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	4b9f      	ldr	r3, [pc, #636]	@ (8002a90 <MX_GPIO_Init+0x308>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	4a9e      	ldr	r2, [pc, #632]	@ (8002a90 <MX_GPIO_Init+0x308>)
 8002818:	f043 0302 	orr.w	r3, r3, #2
 800281c:	6313      	str	r3, [r2, #48]	@ 0x30
 800281e:	4b9c      	ldr	r3, [pc, #624]	@ (8002a90 <MX_GPIO_Init+0x308>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	4b98      	ldr	r3, [pc, #608]	@ (8002a90 <MX_GPIO_Init+0x308>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	4a97      	ldr	r2, [pc, #604]	@ (8002a90 <MX_GPIO_Init+0x308>)
 8002834:	f043 0308 	orr.w	r3, r3, #8
 8002838:	6313      	str	r3, [r2, #48]	@ 0x30
 800283a:	4b95      	ldr	r3, [pc, #596]	@ (8002a90 <MX_GPIO_Init+0x308>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002846:	2200      	movs	r2, #0
 8002848:	217f      	movs	r1, #127	@ 0x7f
 800284a:	4892      	ldr	r0, [pc, #584]	@ (8002a94 <MX_GPIO_Init+0x30c>)
 800284c:	f002 f814 	bl	8004878 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8002850:	2200      	movs	r2, #0
 8002852:	f24f 0130 	movw	r1, #61488	@ 0xf030
 8002856:	4890      	ldr	r0, [pc, #576]	@ (8002a98 <MX_GPIO_Init+0x310>)
 8002858:	f002 f80e 	bl	8004878 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800285c:	2200      	movs	r2, #0
 800285e:	2103      	movs	r1, #3
 8002860:	488e      	ldr	r0, [pc, #568]	@ (8002a9c <MX_GPIO_Init+0x314>)
 8002862:	f002 f809 	bl	8004878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8002866:	2200      	movs	r2, #0
 8002868:	f244 011f 	movw	r1, #16415	@ 0x401f
 800286c:	488c      	ldr	r0, [pc, #560]	@ (8002aa0 <MX_GPIO_Init+0x318>)
 800286e:	f002 f803 	bl	8004878 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002872:	237f      	movs	r3, #127	@ 0x7f
 8002874:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002876:	2311      	movs	r3, #17
 8002878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287e:	2303      	movs	r3, #3
 8002880:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002882:	f107 031c 	add.w	r3, r7, #28
 8002886:	4619      	mov	r1, r3
 8002888:	4882      	ldr	r0, [pc, #520]	@ (8002a94 <MX_GPIO_Init+0x30c>)
 800288a:	f001 fe41 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800288e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002894:	2311      	movs	r3, #17
 8002896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289c:	2300      	movs	r3, #0
 800289e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a0:	f107 031c 	add.w	r3, r7, #28
 80028a4:	4619      	mov	r1, r3
 80028a6:	487c      	ldr	r0, [pc, #496]	@ (8002a98 <MX_GPIO_Init+0x310>)
 80028a8:	f001 fe32 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pins : EA_2_Pin EinA_1_Pin */
  GPIO_InitStruct.Pin = EA_2_Pin|EinA_1_Pin;
 80028ac:	2309      	movs	r3, #9
 80028ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b0:	2300      	movs	r3, #0
 80028b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028b4:	2301      	movs	r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	4619      	mov	r1, r3
 80028be:	4876      	ldr	r0, [pc, #472]	@ (8002a98 <MX_GPIO_Init+0x310>)
 80028c0:	f001 fe26 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_2_Pin EinB_1_Pin */
  GPIO_InitStruct.Pin = EB_2_Pin|EinB_1_Pin;
 80028c4:	2306      	movs	r3, #6
 80028c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80028cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ce:	2301      	movs	r3, #1
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d2:	f107 031c 	add.w	r3, r7, #28
 80028d6:	4619      	mov	r1, r3
 80028d8:	486f      	ldr	r0, [pc, #444]	@ (8002a98 <MX_GPIO_Init+0x310>)
 80028da:	f001 fe19 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinB_2_Pin EinB_4_Pin */
  GPIO_InitStruct.Pin = EinB_2_Pin|EinB_4_Pin;
 80028de:	f244 0301 	movw	r3, #16385	@ 0x4001
 80028e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80028e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ea:	2301      	movs	r3, #1
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ee:	f107 031c 	add.w	r3, r7, #28
 80028f2:	4619      	mov	r1, r3
 80028f4:	486b      	ldr	r0, [pc, #428]	@ (8002aa4 <MX_GPIO_Init+0x31c>)
 80028f6:	f001 fe0b 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinA_2_Pin EinA_4_Pin EA_1_Pin */
  GPIO_InitStruct.Pin = EinA_2_Pin|EinA_4_Pin|EA_1_Pin;
 80028fa:	f248 4302 	movw	r3, #33794	@ 0x8402
 80028fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002904:	2301      	movs	r3, #1
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	4619      	mov	r1, r3
 800290e:	4865      	ldr	r0, [pc, #404]	@ (8002aa4 <MX_GPIO_Init+0x31c>)
 8002910:	f001 fdfe 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 8002914:	f241 0330 	movw	r3, #4144	@ 0x1030
 8002918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800291a:	2311      	movs	r3, #17
 800291c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002922:	2303      	movs	r3, #3
 8002924:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002926:	f107 031c 	add.w	r3, r7, #28
 800292a:	4619      	mov	r1, r3
 800292c:	485a      	ldr	r0, [pc, #360]	@ (8002a98 <MX_GPIO_Init+0x310>)
 800292e:	f001 fdef 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002932:	2303      	movs	r3, #3
 8002934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002936:	2311      	movs	r3, #17
 8002938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293e:	2303      	movs	r3, #3
 8002940:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002942:	f107 031c 	add.w	r3, r7, #28
 8002946:	4619      	mov	r1, r3
 8002948:	4854      	ldr	r0, [pc, #336]	@ (8002a9c <MX_GPIO_Init+0x314>)
 800294a:	f001 fde1 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 800294e:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8002952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002954:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800295a:	2301      	movs	r3, #1
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800295e:	f107 031c 	add.w	r3, r7, #28
 8002962:	4619      	mov	r1, r3
 8002964:	484b      	ldr	r0, [pc, #300]	@ (8002a94 <MX_GPIO_Init+0x30c>)
 8002966:	f001 fdd3 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinA_3_Pin */
  GPIO_InitStruct.Pin = EinA_3_Pin;
 800296a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800296e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002970:	2300      	movs	r3, #0
 8002972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002974:	2301      	movs	r3, #1
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinA_3_GPIO_Port, &GPIO_InitStruct);
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	4619      	mov	r1, r3
 800297e:	4848      	ldr	r0, [pc, #288]	@ (8002aa0 <MX_GPIO_Init+0x318>)
 8002980:	f001 fdc6 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinB_3_Pin */
  GPIO_InitStruct.Pin = EinB_3_Pin;
 8002984:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800298a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800298e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002990:	2301      	movs	r3, #1
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinB_3_GPIO_Port, &GPIO_InitStruct);
 8002994:	f107 031c 	add.w	r3, r7, #28
 8002998:	4619      	mov	r1, r3
 800299a:	4841      	ldr	r0, [pc, #260]	@ (8002aa0 <MX_GPIO_Init+0x318>)
 800299c:	f001 fdb8 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80029a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a6:	2301      	movs	r3, #1
 80029a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029aa:	2302      	movs	r3, #2
 80029ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2300      	movs	r3, #0
 80029b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b2:	f107 031c 	add.w	r3, r7, #28
 80029b6:	4619      	mov	r1, r3
 80029b8:	4839      	ldr	r0, [pc, #228]	@ (8002aa0 <MX_GPIO_Init+0x318>)
 80029ba:	f001 fda9 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_4_Pin */
  GPIO_InitStruct.Pin = Button_4_Pin;
 80029be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80029c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ca:	2301      	movs	r3, #1
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_4_GPIO_Port, &GPIO_InitStruct);
 80029ce:	f107 031c 	add.w	r3, r7, #28
 80029d2:	4619      	mov	r1, r3
 80029d4:	4832      	ldr	r0, [pc, #200]	@ (8002aa0 <MX_GPIO_Init+0x318>)
 80029d6:	f001 fd9b 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80029da:	231f      	movs	r3, #31
 80029dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80029de:	2311      	movs	r3, #17
 80029e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e6:	2303      	movs	r3, #3
 80029e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ea:	f107 031c 	add.w	r3, r7, #28
 80029ee:	4619      	mov	r1, r3
 80029f0:	482b      	ldr	r0, [pc, #172]	@ (8002aa0 <MX_GPIO_Init+0x318>)
 80029f2:	f001 fd8d 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_1_Pin EB_3_Pin */
  GPIO_InitStruct.Pin = EB_1_Pin|EB_3_Pin;
 80029f6:	2328      	movs	r3, #40	@ 0x28
 80029f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a00:	2301      	movs	r3, #1
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4824      	ldr	r0, [pc, #144]	@ (8002a9c <MX_GPIO_Init+0x314>)
 8002a0c:	f001 fd80 	bl	8004510 <HAL_GPIO_Init>

  /*Configure GPIO pin : EA_3_Pin */
  GPIO_InitStruct.Pin = EA_3_Pin;
 8002a10:	2310      	movs	r3, #16
 8002a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a14:	2300      	movs	r3, #0
 8002a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EA_3_GPIO_Port, &GPIO_InitStruct);
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	4619      	mov	r1, r3
 8002a22:	481e      	ldr	r0, [pc, #120]	@ (8002a9c <MX_GPIO_Init+0x314>)
 8002a24:	f001 fd74 	bl	8004510 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	2006      	movs	r0, #6
 8002a2e:	f001 fca6 	bl	800437e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a32:	2006      	movs	r0, #6
 8002a34:	f001 fcbf 	bl	80043b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	2007      	movs	r0, #7
 8002a3e:	f001 fc9e 	bl	800437e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002a42:	2007      	movs	r0, #7
 8002a44:	f001 fcb7 	bl	80043b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	2008      	movs	r0, #8
 8002a4e:	f001 fc96 	bl	800437e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a52:	2008      	movs	r0, #8
 8002a54:	f001 fcaf 	bl	80043b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	2009      	movs	r0, #9
 8002a5e:	f001 fc8e 	bl	800437e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a62:	2009      	movs	r0, #9
 8002a64:	f001 fca7 	bl	80043b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	2017      	movs	r0, #23
 8002a6e:	f001 fc86 	bl	800437e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a72:	2017      	movs	r0, #23
 8002a74:	f001 fc9f 	bl	80043b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	2028      	movs	r0, #40	@ 0x28
 8002a7e:	f001 fc7e 	bl	800437e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a82:	2028      	movs	r0, #40	@ 0x28
 8002a84:	f001 fc97 	bl	80043b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a88:	bf00      	nop
 8002a8a:	3730      	adds	r7, #48	@ 0x30
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40020800 	.word	0x40020800
 8002a9c:	40020400 	.word	0x40020400
 8002aa0:	40020c00 	.word	0x40020c00
 8002aa4:	40020000 	.word	0x40020000

08002aa8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a8b      	ldr	r2, [pc, #556]	@ (8002ce4 <HAL_UART_RxCpltCallback+0x23c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d15a      	bne.n	8002b70 <HAL_UART_RxCpltCallback+0xc8>
	{
		if(receive[rxIndex] == '\r' || receive[rxIndex] == '\n')
 8002aba:	4b8b      	ldr	r3, [pc, #556]	@ (8002ce8 <HAL_UART_RxCpltCallback+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a8b      	ldr	r2, [pc, #556]	@ (8002cec <HAL_UART_RxCpltCallback+0x244>)
 8002ac0:	5cd3      	ldrb	r3, [r2, r3]
 8002ac2:	2b0d      	cmp	r3, #13
 8002ac4:	d005      	beq.n	8002ad2 <HAL_UART_RxCpltCallback+0x2a>
 8002ac6:	4b88      	ldr	r3, [pc, #544]	@ (8002ce8 <HAL_UART_RxCpltCallback+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a88      	ldr	r2, [pc, #544]	@ (8002cec <HAL_UART_RxCpltCallback+0x244>)
 8002acc:	5cd3      	ldrb	r3, [r2, r3]
 8002ace:	2b0a      	cmp	r3, #10
 8002ad0:	d139      	bne.n	8002b46 <HAL_UART_RxCpltCallback+0x9e>
		{
			receive[rxIndex] = '\0';
 8002ad2:	4b85      	ldr	r3, [pc, #532]	@ (8002ce8 <HAL_UART_RxCpltCallback+0x240>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a85      	ldr	r2, [pc, #532]	@ (8002cec <HAL_UART_RxCpltCallback+0x244>)
 8002ad8:	2100      	movs	r1, #0
 8002ada:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receive, ",");
 8002adc:	4984      	ldr	r1, [pc, #528]	@ (8002cf0 <HAL_UART_RxCpltCallback+0x248>)
 8002ade:	4883      	ldr	r0, [pc, #524]	@ (8002cec <HAL_UART_RxCpltCallback+0x244>)
 8002ae0:	f006 fe5e 	bl	80097a0 <strtok>
 8002ae4:	6178      	str	r0, [r7, #20]
			dataIndex = 0;
 8002ae6:	4b83      	ldr	r3, [pc, #524]	@ (8002cf4 <HAL_UART_RxCpltCallback+0x24c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8002aec:	e015      	b.n	8002b1a <HAL_UART_RxCpltCallback+0x72>
			{
				sensorData[dataIndex++] = atof(token);
 8002aee:	4b81      	ldr	r3, [pc, #516]	@ (8002cf4 <HAL_UART_RxCpltCallback+0x24c>)
 8002af0:	681c      	ldr	r4, [r3, #0]
 8002af2:	1c63      	adds	r3, r4, #1
 8002af4:	4a7f      	ldr	r2, [pc, #508]	@ (8002cf4 <HAL_UART_RxCpltCallback+0x24c>)
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	6978      	ldr	r0, [r7, #20]
 8002afa:	f005 f801 	bl	8007b00 <atof>
 8002afe:	eeb0 7a40 	vmov.f32	s14, s0
 8002b02:	eef0 7a60 	vmov.f32	s15, s1
 8002b06:	4a7c      	ldr	r2, [pc, #496]	@ (8002cf8 <HAL_UART_RxCpltCallback+0x250>)
 8002b08:	00e3      	lsls	r3, r4, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	ed83 7b00 	vstr	d7, [r3]
				token = strtok(NULL, ",");
 8002b10:	4977      	ldr	r1, [pc, #476]	@ (8002cf0 <HAL_UART_RxCpltCallback+0x248>)
 8002b12:	2000      	movs	r0, #0
 8002b14:	f006 fe44 	bl	80097a0 <strtok>
 8002b18:	6178      	str	r0, [r7, #20]
			while(token != NULL)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1e6      	bne.n	8002aee <HAL_UART_RxCpltCallback+0x46>
			}
			memset(receive, 0, sizeof(receive));
 8002b20:	2232      	movs	r2, #50	@ 0x32
 8002b22:	2100      	movs	r1, #0
 8002b24:	4871      	ldr	r0, [pc, #452]	@ (8002cec <HAL_UART_RxCpltCallback+0x244>)
 8002b26:	f006 fe20 	bl	800976a <memset>
			rxIndex = 0;
 8002b2a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ce8 <HAL_UART_RxCpltCallback+0x240>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart1, receive, 1) != HAL_OK)
 8002b30:	2201      	movs	r2, #1
 8002b32:	496e      	ldr	r1, [pc, #440]	@ (8002cec <HAL_UART_RxCpltCallback+0x244>)
 8002b34:	4871      	ldr	r0, [pc, #452]	@ (8002cfc <HAL_UART_RxCpltCallback+0x254>)
 8002b36:	f004 f8bf 	bl	8006cb8 <HAL_UART_Receive_IT>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d016      	beq.n	8002b6e <HAL_UART_RxCpltCallback+0xc6>
			{
				Error_Handler();
 8002b40:	f000 f8f6 	bl	8002d30 <Error_Handler>
		{
 8002b44:	e013      	b.n	8002b6e <HAL_UART_RxCpltCallback+0xc6>
			}
		}
		else
		{
			rxIndex++;
 8002b46:	4b68      	ldr	r3, [pc, #416]	@ (8002ce8 <HAL_UART_RxCpltCallback+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	4a66      	ldr	r2, [pc, #408]	@ (8002ce8 <HAL_UART_RxCpltCallback+0x240>)
 8002b4e:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart1, receive + rxIndex, 1) != HAL_OK)
 8002b50:	4b65      	ldr	r3, [pc, #404]	@ (8002ce8 <HAL_UART_RxCpltCallback+0x240>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a65      	ldr	r2, [pc, #404]	@ (8002cec <HAL_UART_RxCpltCallback+0x244>)
 8002b56:	4413      	add	r3, r2
 8002b58:	2201      	movs	r2, #1
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4867      	ldr	r0, [pc, #412]	@ (8002cfc <HAL_UART_RxCpltCallback+0x254>)
 8002b5e:	f004 f8ab 	bl	8006cb8 <HAL_UART_Receive_IT>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_UART_RxCpltCallback+0xc8>
			{
				Error_Handler();
 8002b68:	f000 f8e2 	bl	8002d30 <Error_Handler>
 8002b6c:	e000      	b.n	8002b70 <HAL_UART_RxCpltCallback+0xc8>
		{
 8002b6e:	bf00      	nop
			}
		}
	}
	if(huart->Instance == USART2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a62      	ldr	r2, [pc, #392]	@ (8002d00 <HAL_UART_RxCpltCallback+0x258>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d155      	bne.n	8002c26 <HAL_UART_RxCpltCallback+0x17e>
	{
		if(receiveCAM[indexCAM] == '\r' || receiveCAM[indexCAM] == '\n')
 8002b7a:	4b62      	ldr	r3, [pc, #392]	@ (8002d04 <HAL_UART_RxCpltCallback+0x25c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a62      	ldr	r2, [pc, #392]	@ (8002d08 <HAL_UART_RxCpltCallback+0x260>)
 8002b80:	5cd3      	ldrb	r3, [r2, r3]
 8002b82:	2b0d      	cmp	r3, #13
 8002b84:	d005      	beq.n	8002b92 <HAL_UART_RxCpltCallback+0xea>
 8002b86:	4b5f      	ldr	r3, [pc, #380]	@ (8002d04 <HAL_UART_RxCpltCallback+0x25c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a5f      	ldr	r2, [pc, #380]	@ (8002d08 <HAL_UART_RxCpltCallback+0x260>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	2b0a      	cmp	r3, #10
 8002b90:	d134      	bne.n	8002bfc <HAL_UART_RxCpltCallback+0x154>
		{
			receiveCAM[indexCAM] = '\0';
 8002b92:	4b5c      	ldr	r3, [pc, #368]	@ (8002d04 <HAL_UART_RxCpltCallback+0x25c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a5c      	ldr	r2, [pc, #368]	@ (8002d08 <HAL_UART_RxCpltCallback+0x260>)
 8002b98:	2100      	movs	r1, #0
 8002b9a:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveCAM, ",");
 8002b9c:	4954      	ldr	r1, [pc, #336]	@ (8002cf0 <HAL_UART_RxCpltCallback+0x248>)
 8002b9e:	485a      	ldr	r0, [pc, #360]	@ (8002d08 <HAL_UART_RxCpltCallback+0x260>)
 8002ba0:	f006 fdfe 	bl	80097a0 <strtok>
 8002ba4:	6138      	str	r0, [r7, #16]
			dataindexCAM = 0;
 8002ba6:	4b59      	ldr	r3, [pc, #356]	@ (8002d0c <HAL_UART_RxCpltCallback+0x264>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8002bac:	e010      	b.n	8002bd0 <HAL_UART_RxCpltCallback+0x128>
			{
				camera[dataindexCAM++] = atoi(token);
 8002bae:	4b57      	ldr	r3, [pc, #348]	@ (8002d0c <HAL_UART_RxCpltCallback+0x264>)
 8002bb0:	681c      	ldr	r4, [r3, #0]
 8002bb2:	1c63      	adds	r3, r4, #1
 8002bb4:	4a55      	ldr	r2, [pc, #340]	@ (8002d0c <HAL_UART_RxCpltCallback+0x264>)
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	6938      	ldr	r0, [r7, #16]
 8002bba:	f004 ffa4 	bl	8007b06 <atoi>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4a53      	ldr	r2, [pc, #332]	@ (8002d10 <HAL_UART_RxCpltCallback+0x268>)
 8002bc2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 8002bc6:	494a      	ldr	r1, [pc, #296]	@ (8002cf0 <HAL_UART_RxCpltCallback+0x248>)
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f006 fde9 	bl	80097a0 <strtok>
 8002bce:	6138      	str	r0, [r7, #16]
			while(token != NULL)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1eb      	bne.n	8002bae <HAL_UART_RxCpltCallback+0x106>
			}
			memset(receiveCAM, 0, sizeof(receiveCAM));
 8002bd6:	2232      	movs	r2, #50	@ 0x32
 8002bd8:	2100      	movs	r1, #0
 8002bda:	484b      	ldr	r0, [pc, #300]	@ (8002d08 <HAL_UART_RxCpltCallback+0x260>)
 8002bdc:	f006 fdc5 	bl	800976a <memset>
			indexCAM = 0;
 8002be0:	4b48      	ldr	r3, [pc, #288]	@ (8002d04 <HAL_UART_RxCpltCallback+0x25c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart2, receiveCAM, 1) != HAL_OK)
 8002be6:	2201      	movs	r2, #1
 8002be8:	4947      	ldr	r1, [pc, #284]	@ (8002d08 <HAL_UART_RxCpltCallback+0x260>)
 8002bea:	484a      	ldr	r0, [pc, #296]	@ (8002d14 <HAL_UART_RxCpltCallback+0x26c>)
 8002bec:	f004 f864 	bl	8006cb8 <HAL_UART_Receive_IT>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <HAL_UART_RxCpltCallback+0x17c>
			{
				Error_Handler();
 8002bf6:	f000 f89b 	bl	8002d30 <Error_Handler>
		{
 8002bfa:	e013      	b.n	8002c24 <HAL_UART_RxCpltCallback+0x17c>
			}
		}
		else
		{
			indexCAM++;
 8002bfc:	4b41      	ldr	r3, [pc, #260]	@ (8002d04 <HAL_UART_RxCpltCallback+0x25c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3301      	adds	r3, #1
 8002c02:	4a40      	ldr	r2, [pc, #256]	@ (8002d04 <HAL_UART_RxCpltCallback+0x25c>)
 8002c04:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart2, receiveCAM + indexCAM, 1) != HAL_OK)
 8002c06:	4b3f      	ldr	r3, [pc, #252]	@ (8002d04 <HAL_UART_RxCpltCallback+0x25c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d08 <HAL_UART_RxCpltCallback+0x260>)
 8002c0c:	4413      	add	r3, r2
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4619      	mov	r1, r3
 8002c12:	4840      	ldr	r0, [pc, #256]	@ (8002d14 <HAL_UART_RxCpltCallback+0x26c>)
 8002c14:	f004 f850 	bl	8006cb8 <HAL_UART_Receive_IT>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_UART_RxCpltCallback+0x17e>
			{
				Error_Handler();
 8002c1e:	f000 f887 	bl	8002d30 <Error_Handler>
 8002c22:	e000      	b.n	8002c26 <HAL_UART_RxCpltCallback+0x17e>
		{
 8002c24:	bf00      	nop
			}
		}
	}
	if(huart->Instance == USART3)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d18 <HAL_UART_RxCpltCallback+0x270>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d155      	bne.n	8002cdc <HAL_UART_RxCpltCallback+0x234>
	{
		if(receiveMEGA[indexMEGA] == '\r' || receiveMEGA[indexMEGA] == '\n')
 8002c30:	4b3a      	ldr	r3, [pc, #232]	@ (8002d1c <HAL_UART_RxCpltCallback+0x274>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a3a      	ldr	r2, [pc, #232]	@ (8002d20 <HAL_UART_RxCpltCallback+0x278>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	2b0d      	cmp	r3, #13
 8002c3a:	d005      	beq.n	8002c48 <HAL_UART_RxCpltCallback+0x1a0>
 8002c3c:	4b37      	ldr	r3, [pc, #220]	@ (8002d1c <HAL_UART_RxCpltCallback+0x274>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a37      	ldr	r2, [pc, #220]	@ (8002d20 <HAL_UART_RxCpltCallback+0x278>)
 8002c42:	5cd3      	ldrb	r3, [r2, r3]
 8002c44:	2b0a      	cmp	r3, #10
 8002c46:	d134      	bne.n	8002cb2 <HAL_UART_RxCpltCallback+0x20a>
		{
			receiveMEGA[indexMEGA] = '\0';
 8002c48:	4b34      	ldr	r3, [pc, #208]	@ (8002d1c <HAL_UART_RxCpltCallback+0x274>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a34      	ldr	r2, [pc, #208]	@ (8002d20 <HAL_UART_RxCpltCallback+0x278>)
 8002c4e:	2100      	movs	r1, #0
 8002c50:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveMEGA, ",");
 8002c52:	4927      	ldr	r1, [pc, #156]	@ (8002cf0 <HAL_UART_RxCpltCallback+0x248>)
 8002c54:	4832      	ldr	r0, [pc, #200]	@ (8002d20 <HAL_UART_RxCpltCallback+0x278>)
 8002c56:	f006 fda3 	bl	80097a0 <strtok>
 8002c5a:	60f8      	str	r0, [r7, #12]
			dataindexMEGA = 0;
 8002c5c:	4b31      	ldr	r3, [pc, #196]	@ (8002d24 <HAL_UART_RxCpltCallback+0x27c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8002c62:	e010      	b.n	8002c86 <HAL_UART_RxCpltCallback+0x1de>
			{
				sensorMEGA[dataindexMEGA++] = atoi(token);
 8002c64:	4b2f      	ldr	r3, [pc, #188]	@ (8002d24 <HAL_UART_RxCpltCallback+0x27c>)
 8002c66:	681c      	ldr	r4, [r3, #0]
 8002c68:	1c63      	adds	r3, r4, #1
 8002c6a:	4a2e      	ldr	r2, [pc, #184]	@ (8002d24 <HAL_UART_RxCpltCallback+0x27c>)
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f004 ff49 	bl	8007b06 <atoi>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4a2c      	ldr	r2, [pc, #176]	@ (8002d28 <HAL_UART_RxCpltCallback+0x280>)
 8002c78:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 8002c7c:	491c      	ldr	r1, [pc, #112]	@ (8002cf0 <HAL_UART_RxCpltCallback+0x248>)
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f006 fd8e 	bl	80097a0 <strtok>
 8002c84:	60f8      	str	r0, [r7, #12]
			while(token != NULL)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1eb      	bne.n	8002c64 <HAL_UART_RxCpltCallback+0x1bc>
			}
			memset(receiveMEGA, 0, sizeof(receiveMEGA));
 8002c8c:	2232      	movs	r2, #50	@ 0x32
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4823      	ldr	r0, [pc, #140]	@ (8002d20 <HAL_UART_RxCpltCallback+0x278>)
 8002c92:	f006 fd6a 	bl	800976a <memset>
			indexMEGA = 0;
 8002c96:	4b21      	ldr	r3, [pc, #132]	@ (8002d1c <HAL_UART_RxCpltCallback+0x274>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart3, receiveMEGA, 1) != HAL_OK)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	4920      	ldr	r1, [pc, #128]	@ (8002d20 <HAL_UART_RxCpltCallback+0x278>)
 8002ca0:	4822      	ldr	r0, [pc, #136]	@ (8002d2c <HAL_UART_RxCpltCallback+0x284>)
 8002ca2:	f004 f809 	bl	8006cb8 <HAL_UART_Receive_IT>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d016      	beq.n	8002cda <HAL_UART_RxCpltCallback+0x232>
			{
				Error_Handler();
 8002cac:	f000 f840 	bl	8002d30 <Error_Handler>
		{
 8002cb0:	e013      	b.n	8002cda <HAL_UART_RxCpltCallback+0x232>
			}
		}
		else
		{
			indexMEGA++;
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d1c <HAL_UART_RxCpltCallback+0x274>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	4a18      	ldr	r2, [pc, #96]	@ (8002d1c <HAL_UART_RxCpltCallback+0x274>)
 8002cba:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart3, receiveMEGA + indexMEGA, 1) != HAL_OK)
 8002cbc:	4b17      	ldr	r3, [pc, #92]	@ (8002d1c <HAL_UART_RxCpltCallback+0x274>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a17      	ldr	r2, [pc, #92]	@ (8002d20 <HAL_UART_RxCpltCallback+0x278>)
 8002cc2:	4413      	add	r3, r2
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4818      	ldr	r0, [pc, #96]	@ (8002d2c <HAL_UART_RxCpltCallback+0x284>)
 8002cca:	f003 fff5 	bl	8006cb8 <HAL_UART_Receive_IT>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_UART_RxCpltCallback+0x234>
			{
				Error_Handler();
 8002cd4:	f000 f82c 	bl	8002d30 <Error_Handler>
			}
		}
	}
}
 8002cd8:	e000      	b.n	8002cdc <HAL_UART_RxCpltCallback+0x234>
		{
 8002cda:	bf00      	nop
}
 8002cdc:	bf00      	nop
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd90      	pop	{r4, r7, pc}
 8002ce4:	40011000 	.word	0x40011000
 8002ce8:	20000520 	.word	0x20000520
 8002cec:	200004ec 	.word	0x200004ec
 8002cf0:	0800d988 	.word	0x0800d988
 8002cf4:	20000524 	.word	0x20000524
 8002cf8:	20000528 	.word	0x20000528
 8002cfc:	200003f8 	.word	0x200003f8
 8002d00:	40004400 	.word	0x40004400
 8002d04:	20000574 	.word	0x20000574
 8002d08:	20000540 	.word	0x20000540
 8002d0c:	20000578 	.word	0x20000578
 8002d10:	2000057c 	.word	0x2000057c
 8002d14:	20000440 	.word	0x20000440
 8002d18:	40004800 	.word	0x40004800
 8002d1c:	200005e4 	.word	0x200005e4
 8002d20:	200005b0 	.word	0x200005b0
 8002d24:	200005e8 	.word	0x200005e8
 8002d28:	200005ec 	.word	0x200005ec
 8002d2c:	20000488 	.word	0x20000488

08002d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d34:	b672      	cpsid	i
}
 8002d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  Inverse_Kinematics(0, 0, 0);
 8002d38:	ed9f 2b0d 	vldr	d2, [pc, #52]	@ 8002d70 <Error_Handler+0x40>
 8002d3c:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 8002d70 <Error_Handler+0x40>
 8002d40:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 8002d70 <Error_Handler+0x40>
 8002d44:	f7fe fa00 	bl	8001148 <Inverse_Kinematics>
	  setMotorSpeed(1, 0);
 8002d48:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8002d70 <Error_Handler+0x40>
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	f7fe f985 	bl	800105c <setMotorSpeed>
	  setMotorSpeed(2, 0);
 8002d52:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8002d70 <Error_Handler+0x40>
 8002d56:	2002      	movs	r0, #2
 8002d58:	f7fe f980 	bl	800105c <setMotorSpeed>
	  setMotorSpeed(7, 0);
 8002d5c:	ed9f 0b04 	vldr	d0, [pc, #16]	@ 8002d70 <Error_Handler+0x40>
 8002d60:	2007      	movs	r0, #7
 8002d62:	f7fe f97b 	bl	800105c <setMotorSpeed>
	  Inverse_Kinematics(0, 0, 0);
 8002d66:	bf00      	nop
 8002d68:	e7e6      	b.n	8002d38 <Error_Handler+0x8>
 8002d6a:	bf00      	nop
 8002d6c:	f3af 8000 	nop.w
	...

08002d78 <odometry_eg>:

extern int camera[13];
extern int sensorMEGA[4];

external_global odometry_eg()
{
 8002d78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d7c:	b09e      	sub	sp, #120	@ 0x78
 8002d7e:	af00      	add	r7, sp, #0
	external_global currentPosition;
    double yaw = sensorData[0] * M_PI / 180.0;
 8002d80:	4b93      	ldr	r3, [pc, #588]	@ (8002fd0 <odometry_eg+0x258>)
 8002d82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d86:	a38c      	add	r3, pc, #560	@ (adr r3, 8002fb8 <odometry_eg+0x240>)
 8002d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8c:	f7fd fc34 	bl	80005f8 <__aeabi_dmul>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	4b8d      	ldr	r3, [pc, #564]	@ (8002fd4 <odometry_eg+0x25c>)
 8002d9e:	f7fd fd55 	bl	800084c <__aeabi_ddiv>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    /* ENCODER EXTERNAL */
    int dn1 = counter1 - oldEnc1;
 8002daa:	4b8b      	ldr	r3, [pc, #556]	@ (8002fd8 <odometry_eg+0x260>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4b8b      	ldr	r3, [pc, #556]	@ (8002fdc <odometry_eg+0x264>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int dn2 = counter2 - oldEnc2;
 8002db6:	4b8a      	ldr	r3, [pc, #552]	@ (8002fe0 <odometry_eg+0x268>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4b8a      	ldr	r3, [pc, #552]	@ (8002fe4 <odometry_eg+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	66bb      	str	r3, [r7, #104]	@ 0x68
    int dn3 = counter3 - oldEnc3;
 8002dc2:	4b89      	ldr	r3, [pc, #548]	@ (8002fe8 <odometry_eg+0x270>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4b89      	ldr	r3, [pc, #548]	@ (8002fec <odometry_eg+0x274>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	667b      	str	r3, [r7, #100]	@ 0x64

    oldEnc1 = counter1;
 8002dce:	4b82      	ldr	r3, [pc, #520]	@ (8002fd8 <odometry_eg+0x260>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a82      	ldr	r2, [pc, #520]	@ (8002fdc <odometry_eg+0x264>)
 8002dd4:	6013      	str	r3, [r2, #0]
    oldEnc2 = counter2;
 8002dd6:	4b82      	ldr	r3, [pc, #520]	@ (8002fe0 <odometry_eg+0x268>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a82      	ldr	r2, [pc, #520]	@ (8002fe4 <odometry_eg+0x26c>)
 8002ddc:	6013      	str	r3, [r2, #0]
    oldEnc3 = counter3;
 8002dde:	4b82      	ldr	r3, [pc, #520]	@ (8002fe8 <odometry_eg+0x270>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a82      	ldr	r2, [pc, #520]	@ (8002fec <odometry_eg+0x274>)
 8002de4:	6013      	str	r3, [r2, #0]

    double dtheta = mm_per_tick * (dn2 - dn1) / e1_e2;
 8002de6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002de8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd fb99 	bl	8000524 <__aeabi_i2d>
 8002df2:	a373      	add	r3, pc, #460	@ (adr r3, 8002fc0 <odometry_eg+0x248>)
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df8:	f7fd fbfe 	bl	80005f8 <__aeabi_dmul>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4610      	mov	r0, r2
 8002e02:	4619      	mov	r1, r3
 8002e04:	a370      	add	r3, pc, #448	@ (adr r3, 8002fc8 <odometry_eg+0x250>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd fd1f 	bl	800084c <__aeabi_ddiv>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    double dx = mm_per_tick * (dn3 + (dn2 - dn1) * e12_e3 / e1_e2);
 8002e16:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002e18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	22e6      	movs	r2, #230	@ 0xe6
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	4a73      	ldr	r2, [pc, #460]	@ (8002ff0 <odometry_eg+0x278>)
 8002e24:	fb82 1203 	smull	r1, r2, r2, r3
 8002e28:	441a      	add	r2, r3
 8002e2a:	1212      	asrs	r2, r2, #8
 8002e2c:	17db      	asrs	r3, r3, #31
 8002e2e:	1ad2      	subs	r2, r2, r3
 8002e30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e32:	4413      	add	r3, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd fb75 	bl	8000524 <__aeabi_i2d>
 8002e3a:	a361      	add	r3, pc, #388	@ (adr r3, 8002fc0 <odometry_eg+0x248>)
 8002e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e40:	f7fd fbda 	bl	80005f8 <__aeabi_dmul>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double dy = mm_per_tick * (dn1 + dn2) / 2.0;
 8002e4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e50:	4413      	add	r3, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fb66 	bl	8000524 <__aeabi_i2d>
 8002e58:	a359      	add	r3, pc, #356	@ (adr r3, 8002fc0 <odometry_eg+0x248>)
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	f7fd fbcb 	bl	80005f8 <__aeabi_dmul>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e72:	f7fd fceb 	bl	800084c <__aeabi_ddiv>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    /* END */

//	double theta = heading + (dtheta / 2.0);
	xGlobal += dx * cos(yaw) + dy * sin(yaw);
 8002e7e:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8002e82:	f009 fa55 	bl	800c330 <cos>
 8002e86:	ec51 0b10 	vmov	r0, r1, d0
 8002e8a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e8e:	f7fd fbb3 	bl	80005f8 <__aeabi_dmul>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4690      	mov	r8, r2
 8002e98:	4699      	mov	r9, r3
 8002e9a:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8002e9e:	f009 fa9b 	bl	800c3d8 <sin>
 8002ea2:	ec51 0b10 	vmov	r0, r1, d0
 8002ea6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002eaa:	f7fd fba5 	bl	80005f8 <__aeabi_dmul>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4640      	mov	r0, r8
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	f7fd f9e9 	bl	800028c <__adddf3>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ff4 <odometry_eg+0x27c>)
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	f7fd f9e0 	bl	800028c <__adddf3>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4948      	ldr	r1, [pc, #288]	@ (8002ff4 <odometry_eg+0x27c>)
 8002ed2:	e9c1 2300 	strd	r2, r3, [r1]
	yGlobal += -dx * sin(yaw) + dy * cos(yaw);
 8002ed6:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8002ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eda:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002ede:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8002ee2:	f009 fa79 	bl	800c3d8 <sin>
 8002ee6:	ec53 2b10 	vmov	r2, r3, d0
 8002eea:	4620      	mov	r0, r4
 8002eec:	4629      	mov	r1, r5
 8002eee:	f7fd fb83 	bl	80005f8 <__aeabi_dmul>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4614      	mov	r4, r2
 8002ef8:	461d      	mov	r5, r3
 8002efa:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8002efe:	f009 fa17 	bl	800c330 <cos>
 8002f02:	ec51 0b10 	vmov	r0, r1, d0
 8002f06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f0a:	f7fd fb75 	bl	80005f8 <__aeabi_dmul>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4620      	mov	r0, r4
 8002f14:	4629      	mov	r1, r5
 8002f16:	f7fd f9b9 	bl	800028c <__adddf3>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	4b35      	ldr	r3, [pc, #212]	@ (8002ff8 <odometry_eg+0x280>)
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	f7fd f9b0 	bl	800028c <__adddf3>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4931      	ldr	r1, [pc, #196]	@ (8002ff8 <odometry_eg+0x280>)
 8002f32:	e9c1 2300 	strd	r2, r3, [r1]
	heading += dtheta;
 8002f36:	4b31      	ldr	r3, [pc, #196]	@ (8002ffc <odometry_eg+0x284>)
 8002f38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f40:	f7fd f9a4 	bl	800028c <__adddf3>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	492c      	ldr	r1, [pc, #176]	@ (8002ffc <odometry_eg+0x284>)
 8002f4a:	e9c1 2300 	strd	r2, r3, [r1]

	currentPosition.x = xGlobal;
 8002f4e:	4b29      	ldr	r3, [pc, #164]	@ (8002ff4 <odometry_eg+0x27c>)
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	e9c7 2306 	strd	r2, r3, [r7, #24]
	currentPosition.y = yGlobal;
 8002f58:	4b27      	ldr	r3, [pc, #156]	@ (8002ff8 <odometry_eg+0x280>)
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	currentPosition.h = sensorData[0];
 8002f62:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd0 <odometry_eg+0x258>)
 8002f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f68:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	return currentPosition;
 8002f6c:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8002f70:	f107 0518 	add.w	r5, r7, #24
 8002f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f7c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002f80:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f84:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002f88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f8c:	ec45 4b15 	vmov	d5, r4, r5
 8002f90:	ec41 0b16 	vmov	d6, r0, r1
 8002f94:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f98:	eeb0 0a45 	vmov.f32	s0, s10
 8002f9c:	eef0 0a65 	vmov.f32	s1, s11
 8002fa0:	eeb0 1a46 	vmov.f32	s2, s12
 8002fa4:	eef0 1a66 	vmov.f32	s3, s13
 8002fa8:	eeb0 2a47 	vmov.f32	s4, s14
 8002fac:	eef0 2a67 	vmov.f32	s5, s15
 8002fb0:	3778      	adds	r7, #120	@ 0x78
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fb8:	54442d18 	.word	0x54442d18
 8002fbc:	400921fb 	.word	0x400921fb
 8002fc0:	2d6e5f19 	.word	0x2d6e5f19
 8002fc4:	3fb752bc 	.word	0x3fb752bc
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	4077c000 	.word	0x4077c000
 8002fd0:	20000528 	.word	0x20000528
 8002fd4:	40668000 	.word	0x40668000
 8002fd8:	200004d0 	.word	0x200004d0
 8002fdc:	20000620 	.word	0x20000620
 8002fe0:	200004d4 	.word	0x200004d4
 8002fe4:	20000624 	.word	0x20000624
 8002fe8:	200004d8 	.word	0x200004d8
 8002fec:	20000628 	.word	0x20000628
 8002ff0:	ac769185 	.word	0xac769185
 8002ff4:	20000608 	.word	0x20000608
 8002ff8:	20000610 	.word	0x20000610
 8002ffc:	20000618 	.word	0x20000618

08003000 <display_EG>:
	sprintf(buffer, "E3:%d", counter3);
	lcd_write_string(buffer);
}

void display_EG()
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
	external_global position = odometry_eg();
 8003006:	f7ff feb7 	bl	8002d78 <odometry_eg>
 800300a:	eeb0 5a40 	vmov.f32	s10, s0
 800300e:	eef0 5a60 	vmov.f32	s11, s1
 8003012:	eeb0 6a41 	vmov.f32	s12, s2
 8003016:	eef0 6a61 	vmov.f32	s13, s3
 800301a:	eeb0 7a42 	vmov.f32	s14, s4
 800301e:	eef0 7a62 	vmov.f32	s15, s5
 8003022:	ed87 5b00 	vstr	d5, [r7]
 8003026:	ed87 6b02 	vstr	d6, [r7, #8]
 800302a:	ed87 7b04 	vstr	d7, [r7, #16]

	lcd_set_cursor(0, 0);
 800302e:	2100      	movs	r1, #0
 8003030:	2000      	movs	r0, #0
 8003032:	f7fe fc2b 	bl	800188c <lcd_set_cursor>
	sprintf(buffer, "X:%.2f", position.x);
 8003036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800303a:	4920      	ldr	r1, [pc, #128]	@ (80030bc <display_EG+0xbc>)
 800303c:	4820      	ldr	r0, [pc, #128]	@ (80030c0 <display_EG+0xc0>)
 800303e:	f006 fb31 	bl	80096a4 <siprintf>
	lcd_write_string(buffer);
 8003042:	481f      	ldr	r0, [pc, #124]	@ (80030c0 <display_EG+0xc0>)
 8003044:	f7fe fc0c 	bl	8001860 <lcd_write_string>
	lcd_set_cursor(1, 0);
 8003048:	2100      	movs	r1, #0
 800304a:	2001      	movs	r0, #1
 800304c:	f7fe fc1e 	bl	800188c <lcd_set_cursor>
	sprintf(buffer, "Y:%.2f", position.y);
 8003050:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003054:	491b      	ldr	r1, [pc, #108]	@ (80030c4 <display_EG+0xc4>)
 8003056:	481a      	ldr	r0, [pc, #104]	@ (80030c0 <display_EG+0xc0>)
 8003058:	f006 fb24 	bl	80096a4 <siprintf>
	lcd_write_string(buffer);
 800305c:	4818      	ldr	r0, [pc, #96]	@ (80030c0 <display_EG+0xc0>)
 800305e:	f7fe fbff 	bl	8001860 <lcd_write_string>
	lcd_set_cursor(2, 0);
 8003062:	2100      	movs	r1, #0
 8003064:	2002      	movs	r0, #2
 8003066:	f7fe fc11 	bl	800188c <lcd_set_cursor>
	sprintf(buffer, "H:%.2f", position.h);
 800306a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800306e:	4916      	ldr	r1, [pc, #88]	@ (80030c8 <display_EG+0xc8>)
 8003070:	4813      	ldr	r0, [pc, #76]	@ (80030c0 <display_EG+0xc0>)
 8003072:	f006 fb17 	bl	80096a4 <siprintf>
	lcd_write_string(buffer);
 8003076:	4812      	ldr	r0, [pc, #72]	@ (80030c0 <display_EG+0xc0>)
 8003078:	f7fe fbf2 	bl	8001860 <lcd_write_string>
	lcd_set_cursor(3, 0);
 800307c:	2100      	movs	r1, #0
 800307e:	2003      	movs	r0, #3
 8003080:	f7fe fc04 	bl	800188c <lcd_set_cursor>
	sprintf(buffer, "P:%.2f", sensorData[1]);
 8003084:	4b11      	ldr	r3, [pc, #68]	@ (80030cc <display_EG+0xcc>)
 8003086:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800308a:	4911      	ldr	r1, [pc, #68]	@ (80030d0 <display_EG+0xd0>)
 800308c:	480c      	ldr	r0, [pc, #48]	@ (80030c0 <display_EG+0xc0>)
 800308e:	f006 fb09 	bl	80096a4 <siprintf>
	lcd_write_string(buffer);
 8003092:	480b      	ldr	r0, [pc, #44]	@ (80030c0 <display_EG+0xc0>)
 8003094:	f7fe fbe4 	bl	8001860 <lcd_write_string>
	lcd_set_cursor(3, 10);
 8003098:	210a      	movs	r1, #10
 800309a:	2003      	movs	r0, #3
 800309c:	f7fe fbf6 	bl	800188c <lcd_set_cursor>
	sprintf(buffer, "R:%.2f", sensorData[2]);
 80030a0:	4b0a      	ldr	r3, [pc, #40]	@ (80030cc <display_EG+0xcc>)
 80030a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030a6:	490b      	ldr	r1, [pc, #44]	@ (80030d4 <display_EG+0xd4>)
 80030a8:	4805      	ldr	r0, [pc, #20]	@ (80030c0 <display_EG+0xc0>)
 80030aa:	f006 fafb 	bl	80096a4 <siprintf>
	lcd_write_string(buffer);
 80030ae:	4804      	ldr	r0, [pc, #16]	@ (80030c0 <display_EG+0xc0>)
 80030b0:	f7fe fbd6 	bl	8001860 <lcd_write_string>
}
 80030b4:	bf00      	nop
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	0800d9d8 	.word	0x0800d9d8
 80030c0:	2000062c 	.word	0x2000062c
 80030c4:	0800d9e0 	.word	0x0800d9e0
 80030c8:	0800da0c 	.word	0x0800da0c
 80030cc:	20000528 	.word	0x20000528
 80030d0:	0800da60 	.word	0x0800da60
 80030d4:	0800da68 	.word	0x0800da68

080030d8 <PID_controller>:
/* Variable for PID*/
double integral = 0.0, derivative = 0.0, prev_error = 0.0;
/* END */

double PID_controller(double setpoint, double actual_position, double Kp, double Ki, double Kd)
{
 80030d8:	b5b0      	push	{r4, r5, r7, lr}
 80030da:	b090      	sub	sp, #64	@ 0x40
 80030dc:	af00      	add	r7, sp, #0
 80030de:	ed87 0b08 	vstr	d0, [r7, #32]
 80030e2:	ed87 1b06 	vstr	d1, [r7, #24]
 80030e6:	ed87 2b04 	vstr	d2, [r7, #16]
 80030ea:	ed87 3b02 	vstr	d3, [r7, #8]
 80030ee:	ed87 4b00 	vstr	d4, [r7]
	double dt = 0.01;
 80030f2:	a33c      	add	r3, pc, #240	@ (adr r3, 80031e4 <PID_controller+0x10c>)
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    // Proportional
    double error = setpoint - actual_position;
 80030fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003100:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003104:	f7fd f8c0 	bl	8000288 <__aeabi_dsub>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Integral
    integral += error * dt;
 8003110:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003114:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003118:	f7fd fa6e 	bl	80005f8 <__aeabi_dmul>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4610      	mov	r0, r2
 8003122:	4619      	mov	r1, r3
 8003124:	4b2c      	ldr	r3, [pc, #176]	@ (80031d8 <PID_controller+0x100>)
 8003126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312a:	f7fd f8af 	bl	800028c <__adddf3>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4929      	ldr	r1, [pc, #164]	@ (80031d8 <PID_controller+0x100>)
 8003134:	e9c1 2300 	strd	r2, r3, [r1]

    // Derivative
	derivative = (error - prev_error) / dt;
 8003138:	4b28      	ldr	r3, [pc, #160]	@ (80031dc <PID_controller+0x104>)
 800313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003142:	f7fd f8a1 	bl	8000288 <__aeabi_dsub>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4610      	mov	r0, r2
 800314c:	4619      	mov	r1, r3
 800314e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003152:	f7fd fb7b 	bl	800084c <__aeabi_ddiv>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4921      	ldr	r1, [pc, #132]	@ (80031e0 <PID_controller+0x108>)
 800315c:	e9c1 2300 	strd	r2, r3, [r1]

    double output = Kp * error + Ki * integral + Kd * derivative;
 8003160:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003164:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003168:	f7fd fa46 	bl	80005f8 <__aeabi_dmul>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4614      	mov	r4, r2
 8003172:	461d      	mov	r5, r3
 8003174:	4b18      	ldr	r3, [pc, #96]	@ (80031d8 <PID_controller+0x100>)
 8003176:	e9d3 0100 	ldrd	r0, r1, [r3]
 800317a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800317e:	f7fd fa3b 	bl	80005f8 <__aeabi_dmul>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4620      	mov	r0, r4
 8003188:	4629      	mov	r1, r5
 800318a:	f7fd f87f 	bl	800028c <__adddf3>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4614      	mov	r4, r2
 8003194:	461d      	mov	r5, r3
 8003196:	4b12      	ldr	r3, [pc, #72]	@ (80031e0 <PID_controller+0x108>)
 8003198:	e9d3 0100 	ldrd	r0, r1, [r3]
 800319c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031a0:	f7fd fa2a 	bl	80005f8 <__aeabi_dmul>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4620      	mov	r0, r4
 80031aa:	4629      	mov	r1, r5
 80031ac:	f7fd f86e 	bl	800028c <__adddf3>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    prev_error = error;
 80031b8:	4908      	ldr	r1, [pc, #32]	@ (80031dc <PID_controller+0x104>)
 80031ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80031be:	e9c1 2300 	strd	r2, r3, [r1]

    return output;
 80031c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031c6:	ec43 2b17 	vmov	d7, r2, r3
}
 80031ca:	eeb0 0a47 	vmov.f32	s0, s14
 80031ce:	eef0 0a67 	vmov.f32	s1, s15
 80031d2:	3740      	adds	r7, #64	@ 0x40
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bdb0      	pop	{r4, r5, r7, pc}
 80031d8:	20000638 	.word	0x20000638
 80031dc:	20000648 	.word	0x20000648
 80031e0:	20000640 	.word	0x20000640
 80031e4:	47ae147b 	.word	0x47ae147b
 80031e8:	3f847ae1 	.word	0x3f847ae1

080031ec <PID_controllerH>:

double PID_controllerH(double setpoint, double actual_position, double Kp)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	@ 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	ed87 0b04 	vstr	d0, [r7, #16]
 80031f6:	ed87 1b02 	vstr	d1, [r7, #8]
 80031fa:	ed87 2b00 	vstr	d2, [r7]
	double error = setpoint - actual_position;
 80031fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003202:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003206:	f7fd f83f 	bl	8000288 <__aeabi_dsub>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if(error > 180)
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	4b1f      	ldr	r3, [pc, #124]	@ (8003294 <PID_controllerH+0xa8>)
 8003218:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800321c:	f7fd fc7c 	bl	8000b18 <__aeabi_dcmpgt>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00b      	beq.n	800323e <PID_controllerH+0x52>
	{
		error -= 360;
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	4b1b      	ldr	r3, [pc, #108]	@ (8003298 <PID_controllerH+0xac>)
 800322c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003230:	f7fd f82a 	bl	8000288 <__aeabi_dsub>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800323c:	e014      	b.n	8003268 <PID_controllerH+0x7c>
	}
	else if(error < -180)
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	4b16      	ldr	r3, [pc, #88]	@ (800329c <PID_controllerH+0xb0>)
 8003244:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003248:	f7fd fc48 	bl	8000adc <__aeabi_dcmplt>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <PID_controllerH+0x7c>
	{
		error += 360;
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	4b10      	ldr	r3, [pc, #64]	@ (8003298 <PID_controllerH+0xac>)
 8003258:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800325c:	f7fd f816 	bl	800028c <__adddf3>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

    // Proportional
	double P = Kp * error;
 8003268:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800326c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003270:	f7fd f9c2 	bl	80005f8 <__aeabi_dmul>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return P;
 800327c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003280:	ec43 2b17 	vmov	d7, r2, r3
}
 8003284:	eeb0 0a47 	vmov.f32	s0, s14
 8003288:	eef0 0a67 	vmov.f32	s1, s15
 800328c:	3728      	adds	r7, #40	@ 0x28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40668000 	.word	0x40668000
 8003298:	40768000 	.word	0x40768000
 800329c:	c0668000 	.word	0xc0668000

080032a0 <smoothVelocity>:
    }
    return target;
}

void smoothVelocity(double* Vx, double* Vy, double* W, double smoothingFactor)
{
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b08c      	sub	sp, #48	@ 0x30
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6178      	str	r0, [r7, #20]
 80032a8:	6139      	str	r1, [r7, #16]
 80032aa:	60fa      	str	r2, [r7, #12]
 80032ac:	ed87 0b00 	vstr	d0, [r7]
	double prevVx = 0.0;
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double prevVy = 0.0;
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double prevW = 0.0;
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *Vx = (1.0 - smoothingFactor) * prevVx + smoothingFactor * (*Vx);
 80032d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032d8:	f04f 0000 	mov.w	r0, #0
 80032dc:	493e      	ldr	r1, [pc, #248]	@ (80033d8 <smoothVelocity+0x138>)
 80032de:	f7fc ffd3 	bl	8000288 <__aeabi_dsub>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4610      	mov	r0, r2
 80032e8:	4619      	mov	r1, r3
 80032ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032ee:	f7fd f983 	bl	80005f8 <__aeabi_dmul>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4614      	mov	r4, r2
 80032f8:	461d      	mov	r5, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003304:	f7fd f978 	bl	80005f8 <__aeabi_dmul>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4620      	mov	r0, r4
 800330e:	4629      	mov	r1, r5
 8003310:	f7fc ffbc 	bl	800028c <__adddf3>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	6979      	ldr	r1, [r7, #20]
 800331a:	e9c1 2300 	strd	r2, r3, [r1]
    *Vy = (1.0 - smoothingFactor) * prevVy + smoothingFactor * (*Vy);
 800331e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003322:	f04f 0000 	mov.w	r0, #0
 8003326:	492c      	ldr	r1, [pc, #176]	@ (80033d8 <smoothVelocity+0x138>)
 8003328:	f7fc ffae 	bl	8000288 <__aeabi_dsub>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003338:	f7fd f95e 	bl	80005f8 <__aeabi_dmul>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4614      	mov	r4, r2
 8003342:	461d      	mov	r5, r3
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	e9d3 0100 	ldrd	r0, r1, [r3]
 800334a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800334e:	f7fd f953 	bl	80005f8 <__aeabi_dmul>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4620      	mov	r0, r4
 8003358:	4629      	mov	r1, r5
 800335a:	f7fc ff97 	bl	800028c <__adddf3>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	6939      	ldr	r1, [r7, #16]
 8003364:	e9c1 2300 	strd	r2, r3, [r1]
    *W = (1.0 - smoothingFactor) * prevW + smoothingFactor * (*W);
 8003368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800336c:	f04f 0000 	mov.w	r0, #0
 8003370:	4919      	ldr	r1, [pc, #100]	@ (80033d8 <smoothVelocity+0x138>)
 8003372:	f7fc ff89 	bl	8000288 <__aeabi_dsub>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003382:	f7fd f939 	bl	80005f8 <__aeabi_dmul>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4614      	mov	r4, r2
 800338c:	461d      	mov	r5, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003398:	f7fd f92e 	bl	80005f8 <__aeabi_dmul>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4620      	mov	r0, r4
 80033a2:	4629      	mov	r1, r5
 80033a4:	f7fc ff72 	bl	800028c <__adddf3>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	68f9      	ldr	r1, [r7, #12]
 80033ae:	e9c1 2300 	strd	r2, r3, [r1]

    prevVx = *Vx;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    prevVy = *Vy;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    prevW = *W;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
}
 80033d0:	bf00      	nop
 80033d2:	3730      	adds	r7, #48	@ 0x30
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bdb0      	pop	{r4, r5, r7, pc}
 80033d8:	3ff00000 	.word	0x3ff00000

080033dc <atTargetEG>:
    }
    return targetVelocity;
}

bool atTargetEG(external_global setpoint, external_global position, double xyTolerance, double Htolerance)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b098      	sub	sp, #96	@ 0x60
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	ed87 6b02 	vstr	d6, [r7, #8]
 80033e6:	ed87 7b00 	vstr	d7, [r7]
 80033ea:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 80033ee:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 80033f2:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
 80033f6:	ed87 3b04 	vstr	d3, [r7, #16]
 80033fa:	ed87 4b06 	vstr	d4, [r7, #24]
 80033fe:	ed87 5b08 	vstr	d5, [r7, #32]
	double error_x = setpoint.x - position.x;
 8003402:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003406:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800340a:	f7fc ff3d 	bl	8000288 <__aeabi_dsub>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	double error_y = setpoint.y - position.y;
 8003416:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800341a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800341e:	f7fc ff33 	bl	8000288 <__aeabi_dsub>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double error_h = fabs(setpoint.h - position.h);
 800342a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800342e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003432:	f7fc ff29 	bl	8000288 <__aeabi_dsub>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4611      	mov	r1, r2
 800343c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800343e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003442:	64fb      	str	r3, [r7, #76]	@ 0x4c
	double distance = hypot(error_x, error_y);
 8003444:	ed97 1b14 	vldr	d1, [r7, #80]	@ 0x50
 8003448:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 800344c:	f008 ff3c 	bl	800c2c8 <hypot>
 8003450:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	return distance < xyTolerance && error_h < Htolerance;
 8003454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003458:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800345c:	f7fd fb3e 	bl	8000adc <__aeabi_dcmplt>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <atTargetEG+0xa0>
 8003466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800346a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800346e:	f7fd fb35 	bl	8000adc <__aeabi_dcmplt>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <atTargetEG+0xa0>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <atTargetEG+0xa2>
 800347c:	2300      	movs	r3, #0
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	b2db      	uxtb	r3, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	3760      	adds	r7, #96	@ 0x60
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	0000      	movs	r0, r0
	...

08003490 <PID_EG>:
	int i = map(0, 180, 10, 65, angle);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, i);
}

void PID_EG(external_global setpoint, double Kp, double Ki, double Kd, double KpH, double smoothingFactor, double maxVelocity)
{
 8003490:	b5b0      	push	{r4, r5, r7, lr}
 8003492:	b0ae      	sub	sp, #184	@ 0xb8
 8003494:	af00      	add	r7, sp, #0
 8003496:	ed87 3b08 	vstr	d3, [r7, #32]
 800349a:	ed87 4b06 	vstr	d4, [r7, #24]
 800349e:	ed87 5b04 	vstr	d5, [r7, #16]
 80034a2:	ed87 6b02 	vstr	d6, [r7, #8]
 80034a6:	ed87 7b00 	vstr	d7, [r7]
 80034aa:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 80034ae:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 80034b2:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
	external_global currentPosition = odometry_eg();
 80034b6:	f7ff fc5f 	bl	8002d78 <odometry_eg>
 80034ba:	eeb0 5a40 	vmov.f32	s10, s0
 80034be:	eef0 5a60 	vmov.f32	s11, s1
 80034c2:	eeb0 6a41 	vmov.f32	s12, s2
 80034c6:	eef0 6a61 	vmov.f32	s13, s3
 80034ca:	eeb0 7a42 	vmov.f32	s14, s4
 80034ce:	eef0 7a62 	vmov.f32	s15, s5
 80034d2:	ed87 5b16 	vstr	d5, [r7, #88]	@ 0x58
 80034d6:	ed87 6b18 	vstr	d6, [r7, #96]	@ 0x60
 80034da:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68

	double pitch = sensorData[1] * 300; // IMU pitch
 80034de:	4bac      	ldr	r3, [pc, #688]	@ (8003790 <PID_EG+0x300>)
 80034e0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80034e4:	a3a6      	add	r3, pc, #664	@ (adr r3, 8003780 <PID_EG+0x2f0>)
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f7fd f885 	bl	80005f8 <__aeabi_dmul>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	double roll = sensorData[2] * 300; // IMU roll
 80034f6:	4ba6      	ldr	r3, [pc, #664]	@ (8003790 <PID_EG+0x300>)
 80034f8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80034fc:	a3a0      	add	r3, pc, #640	@ (adr r3, 8003780 <PID_EG+0x2f0>)
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f7fd f879 	bl	80005f8 <__aeabi_dmul>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double error_x = setpoint.x - currentPosition.x;
 800350e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003512:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003516:	f7fc feb7 	bl	8000288 <__aeabi_dsub>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
    double error_y = setpoint.y - currentPosition.y;
 8003522:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003526:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800352a:	f7fc fead 	bl	8000288 <__aeabi_dsub>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    double current_heading_rad = currentPosition.h * M_PI / 180.0;
 8003536:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800353a:	a393      	add	r3, pc, #588	@ (adr r3, 8003788 <PID_EG+0x2f8>)
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f7fd f85a 	bl	80005f8 <__aeabi_dmul>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4610      	mov	r0, r2
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	4b90      	ldr	r3, [pc, #576]	@ (8003794 <PID_EG+0x304>)
 8003552:	f7fd f97b 	bl	800084c <__aeabi_ddiv>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

    double distance = hypot(error_x, error_y);
 800355e:	ed97 1b26 	vldr	d1, [r7, #152]	@ 0x98
 8003562:	ed97 0b28 	vldr	d0, [r7, #160]	@ 0xa0
 8003566:	f008 feaf 	bl	800c2c8 <hypot>
 800356a:	ed87 0b22 	vstr	d0, [r7, #136]	@ 0x88
    double velocityFactor = fmin(distance, maxVelocity) / distance;
 800356e:	ed97 1b32 	vldr	d1, [r7, #200]	@ 0xc8
 8003572:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 8003576:	f008 ffb8 	bl	800c4ea <fmin>
 800357a:	ec51 0b10 	vmov	r0, r1, d0
 800357e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003582:	f7fd f963 	bl	800084c <__aeabi_ddiv>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    double Vx_local = PID_controller(setpoint.x, currentPosition.x, Kp, Ki, Kd) * velocityFactor;
 800358e:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8003592:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8003596:	ed97 4b04 	vldr	d4, [r7, #16]
 800359a:	ed97 3b06 	vldr	d3, [r7, #24]
 800359e:	ed97 2b08 	vldr	d2, [r7, #32]
 80035a2:	eeb0 1a46 	vmov.f32	s2, s12
 80035a6:	eef0 1a66 	vmov.f32	s3, s13
 80035aa:	eeb0 0a47 	vmov.f32	s0, s14
 80035ae:	eef0 0a67 	vmov.f32	s1, s15
 80035b2:	f7ff fd91 	bl	80030d8 <PID_controller>
 80035b6:	ec53 2b10 	vmov	r2, r3, d0
 80035ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035be:	f7fd f81b 	bl	80005f8 <__aeabi_dmul>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    double Vy_local = PID_controller(setpoint.y, currentPosition.y, Kp, Ki, Kd) * velocityFactor;
 80035ca:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80035ce:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80035d2:	ed97 4b04 	vldr	d4, [r7, #16]
 80035d6:	ed97 3b06 	vldr	d3, [r7, #24]
 80035da:	ed97 2b08 	vldr	d2, [r7, #32]
 80035de:	eeb0 1a46 	vmov.f32	s2, s12
 80035e2:	eef0 1a66 	vmov.f32	s3, s13
 80035e6:	eeb0 0a47 	vmov.f32	s0, s14
 80035ea:	eef0 0a67 	vmov.f32	s1, s15
 80035ee:	f7ff fd73 	bl	80030d8 <PID_controller>
 80035f2:	ec53 2b10 	vmov	r2, r3, d0
 80035f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035fa:	f7fc fffd 	bl	80005f8 <__aeabi_dmul>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    double Vx = Vx_local * cos(current_heading_rad) - Vy_local * sin(current_heading_rad);
 8003606:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800360a:	f008 fe91 	bl	800c330 <cos>
 800360e:	ec51 0b10 	vmov	r0, r1, d0
 8003612:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8003616:	f7fc ffef 	bl	80005f8 <__aeabi_dmul>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4614      	mov	r4, r2
 8003620:	461d      	mov	r5, r3
 8003622:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8003626:	f008 fed7 	bl	800c3d8 <sin>
 800362a:	ec51 0b10 	vmov	r0, r1, d0
 800362e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003632:	f7fc ffe1 	bl	80005f8 <__aeabi_dmul>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4620      	mov	r0, r4
 800363c:	4629      	mov	r1, r5
 800363e:	f7fc fe23 	bl	8000288 <__aeabi_dsub>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double Vy = Vx_local * sin(current_heading_rad) + Vy_local * cos(current_heading_rad);
 800364a:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800364e:	f008 fec3 	bl	800c3d8 <sin>
 8003652:	ec51 0b10 	vmov	r0, r1, d0
 8003656:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800365a:	f7fc ffcd 	bl	80005f8 <__aeabi_dmul>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4614      	mov	r4, r2
 8003664:	461d      	mov	r5, r3
 8003666:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800366a:	f008 fe61 	bl	800c330 <cos>
 800366e:	ec51 0b10 	vmov	r0, r1, d0
 8003672:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003676:	f7fc ffbf 	bl	80005f8 <__aeabi_dmul>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4620      	mov	r0, r4
 8003680:	4629      	mov	r1, r5
 8003682:	f7fc fe03 	bl	800028c <__adddf3>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double W = PID_controllerH(setpoint.h, currentPosition.h, KpH);
 800368e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8003692:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 8003696:	ed97 2b02 	vldr	d2, [r7, #8]
 800369a:	eeb0 1a46 	vmov.f32	s2, s12
 800369e:	eef0 1a66 	vmov.f32	s3, s13
 80036a2:	eeb0 0a47 	vmov.f32	s0, s14
 80036a6:	eef0 0a67 	vmov.f32	s1, s15
 80036aa:	f7ff fd9f 	bl	80031ec <PID_controllerH>
 80036ae:	eeb0 7a40 	vmov.f32	s14, s0
 80036b2:	eef0 7a60 	vmov.f32	s15, s1
 80036b6:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

    if(roll > 0)	{Vx -= roll;}
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80036c6:	f7fd fa27 	bl	8000b18 <__aeabi_dcmpgt>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <PID_EG+0x256>
 80036d0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80036d4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80036d8:	f7fc fdd6 	bl	8000288 <__aeabi_dsub>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80036e4:	e009      	b.n	80036fa <PID_EG+0x26a>
    else			{Vx += roll;}
 80036e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80036ea:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80036ee:	f7fc fdcd 	bl	800028c <__adddf3>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    if(pitch > 0)	{Vy += pitch;}
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003706:	f7fd fa07 	bl	8000b18 <__aeabi_dcmpgt>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <PID_EG+0x296>
 8003710:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8003714:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8003718:	f7fc fdb8 	bl	800028c <__adddf3>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8003724:	e009      	b.n	800373a <PID_EG+0x2aa>
    else			{Vy -= pitch;}
 8003726:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800372a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800372e:	f7fc fdab 	bl	8000288 <__aeabi_dsub>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
 800373a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800373e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8003742:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003746:	ed97 0b00 	vldr	d0, [r7]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fda8 	bl	80032a0 <smoothVelocity>
    Inverse_Kinematics(Vx, Vy, W);
 8003750:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8003754:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8003758:	ed97 5b10 	vldr	d5, [r7, #64]	@ 0x40
 800375c:	eeb0 2a45 	vmov.f32	s4, s10
 8003760:	eef0 2a65 	vmov.f32	s5, s11
 8003764:	eeb0 1a46 	vmov.f32	s2, s12
 8003768:	eef0 1a66 	vmov.f32	s3, s13
 800376c:	eeb0 0a47 	vmov.f32	s0, s14
 8003770:	eef0 0a67 	vmov.f32	s1, s15
 8003774:	f7fd fce8 	bl	8001148 <Inverse_Kinematics>
}
 8003778:	bf00      	nop
 800377a:	37b8      	adds	r7, #184	@ 0xb8
 800377c:	46bd      	mov	sp, r7
 800377e:	bdb0      	pop	{r4, r5, r7, pc}
 8003780:	00000000 	.word	0x00000000
 8003784:	4072c000 	.word	0x4072c000
 8003788:	54442d18 	.word	0x54442d18
 800378c:	400921fb 	.word	0x400921fb
 8003790:	20000528 	.word	0x20000528
 8003794:	40668000 	.word	0x40668000

08003798 <initializeSilos>:
    }
}

// Initialize silos array
void initializeSilos()
{
 8003798:	b5b0      	push	{r4, r5, r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_SILOS; i++)
 800379e:	2300      	movs	r3, #0
 80037a0:	607b      	str	r3, [r7, #4]
 80037a2:	e092      	b.n	80038ca <initializeSilos+0x132>
    {
        silos[i].distance = SILO_NOT_DETECTED_DISTANCE;
 80037a4:	4a50      	ldr	r2, [pc, #320]	@ (80038e8 <initializeSilos+0x150>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	015b      	lsls	r3, r3, #5
 80037aa:	4413      	add	r3, r2
 80037ac:	4a4f      	ldr	r2, [pc, #316]	@ (80038ec <initializeSilos+0x154>)
 80037ae:	601a      	str	r2, [r3, #0]
        silos[i].angle = SILO_NOT_DETECTED_ANGLE;
 80037b0:	4a4d      	ldr	r2, [pc, #308]	@ (80038e8 <initializeSilos+0x150>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	015b      	lsls	r3, r3, #5
 80037b6:	4413      	add	r3, r2
 80037b8:	3304      	adds	r3, #4
 80037ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80037be:	601a      	str	r2, [r3, #0]
        silos[i].detected = false;
 80037c0:	4a49      	ldr	r2, [pc, #292]	@ (80038e8 <initializeSilos+0x150>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	015b      	lsls	r3, r3, #5
 80037c6:	4413      	add	r3, r2
 80037c8:	3308      	adds	r3, #8
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
        silos[i].ballInSilo = 0;
 80037ce:	4a46      	ldr	r2, [pc, #280]	@ (80038e8 <initializeSilos+0x150>)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	015b      	lsls	r3, r3, #5
 80037d4:	4413      	add	r3, r2
 80037d6:	330c      	adds	r3, #12
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
        silos[i].x = silos[i].distance * sin(silos[i].angle * M_PI/180);
 80037dc:	4a42      	ldr	r2, [pc, #264]	@ (80038e8 <initializeSilos+0x150>)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	015b      	lsls	r3, r3, #5
 80037e2:	4413      	add	r3, r2
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fc fe9c 	bl	8000524 <__aeabi_i2d>
 80037ec:	4604      	mov	r4, r0
 80037ee:	460d      	mov	r5, r1
 80037f0:	4a3d      	ldr	r2, [pc, #244]	@ (80038e8 <initializeSilos+0x150>)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	015b      	lsls	r3, r3, #5
 80037f6:	4413      	add	r3, r2
 80037f8:	3304      	adds	r3, #4
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fc fe91 	bl	8000524 <__aeabi_i2d>
 8003802:	a337      	add	r3, pc, #220	@ (adr r3, 80038e0 <initializeSilos+0x148>)
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	f7fc fef6 	bl	80005f8 <__aeabi_dmul>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4610      	mov	r0, r2
 8003812:	4619      	mov	r1, r3
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	4b35      	ldr	r3, [pc, #212]	@ (80038f0 <initializeSilos+0x158>)
 800381a:	f7fd f817 	bl	800084c <__aeabi_ddiv>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	ec43 2b17 	vmov	d7, r2, r3
 8003826:	eeb0 0a47 	vmov.f32	s0, s14
 800382a:	eef0 0a67 	vmov.f32	s1, s15
 800382e:	f008 fdd3 	bl	800c3d8 <sin>
 8003832:	ec53 2b10 	vmov	r2, r3, d0
 8003836:	4620      	mov	r0, r4
 8003838:	4629      	mov	r1, r5
 800383a:	f7fc fedd 	bl	80005f8 <__aeabi_dmul>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4829      	ldr	r0, [pc, #164]	@ (80038e8 <initializeSilos+0x150>)
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	0149      	lsls	r1, r1, #5
 8003848:	4401      	add	r1, r0
 800384a:	3110      	adds	r1, #16
 800384c:	e9c1 2300 	strd	r2, r3, [r1]
        silos[i].y = silos[i].distance * cos(silos[i].angle * M_PI/180);
 8003850:	4a25      	ldr	r2, [pc, #148]	@ (80038e8 <initializeSilos+0x150>)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	015b      	lsls	r3, r3, #5
 8003856:	4413      	add	r3, r2
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fe62 	bl	8000524 <__aeabi_i2d>
 8003860:	4604      	mov	r4, r0
 8003862:	460d      	mov	r5, r1
 8003864:	4a20      	ldr	r2, [pc, #128]	@ (80038e8 <initializeSilos+0x150>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	015b      	lsls	r3, r3, #5
 800386a:	4413      	add	r3, r2
 800386c:	3304      	adds	r3, #4
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7fc fe57 	bl	8000524 <__aeabi_i2d>
 8003876:	a31a      	add	r3, pc, #104	@ (adr r3, 80038e0 <initializeSilos+0x148>)
 8003878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387c:	f7fc febc 	bl	80005f8 <__aeabi_dmul>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	4b18      	ldr	r3, [pc, #96]	@ (80038f0 <initializeSilos+0x158>)
 800388e:	f7fc ffdd 	bl	800084c <__aeabi_ddiv>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	ec43 2b17 	vmov	d7, r2, r3
 800389a:	eeb0 0a47 	vmov.f32	s0, s14
 800389e:	eef0 0a67 	vmov.f32	s1, s15
 80038a2:	f008 fd45 	bl	800c330 <cos>
 80038a6:	ec53 2b10 	vmov	r2, r3, d0
 80038aa:	4620      	mov	r0, r4
 80038ac:	4629      	mov	r1, r5
 80038ae:	f7fc fea3 	bl	80005f8 <__aeabi_dmul>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	480c      	ldr	r0, [pc, #48]	@ (80038e8 <initializeSilos+0x150>)
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	0149      	lsls	r1, r1, #5
 80038bc:	4401      	add	r1, r0
 80038be:	3118      	adds	r1, #24
 80038c0:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < MAX_SILOS; i++)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3301      	adds	r3, #1
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	f77f af69 	ble.w	80037a4 <initializeSilos+0xc>
    }
}
 80038d2:	bf00      	nop
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bdb0      	pop	{r4, r5, r7, pc}
 80038dc:	f3af 8000 	nop.w
 80038e0:	54442d18 	.word	0x54442d18
 80038e4:	400921fb 	.word	0x400921fb
 80038e8:	20000650 	.word	0x20000650
 80038ec:	00018696 	.word	0x00018696
 80038f0:	40668000 	.word	0x40668000

080038f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	4b10      	ldr	r3, [pc, #64]	@ (8003940 <HAL_MspInit+0x4c>)
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	4a0f      	ldr	r2, [pc, #60]	@ (8003940 <HAL_MspInit+0x4c>)
 8003904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003908:	6453      	str	r3, [r2, #68]	@ 0x44
 800390a:	4b0d      	ldr	r3, [pc, #52]	@ (8003940 <HAL_MspInit+0x4c>)
 800390c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003912:	607b      	str	r3, [r7, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <HAL_MspInit+0x4c>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	4a08      	ldr	r2, [pc, #32]	@ (8003940 <HAL_MspInit+0x4c>)
 8003920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003924:	6413      	str	r3, [r2, #64]	@ 0x40
 8003926:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <HAL_MspInit+0x4c>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003932:	2007      	movs	r0, #7
 8003934:	f000 fd18 	bl	8004368 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40023800 	.word	0x40023800

08003944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	@ 0x28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394c:	f107 0314 	add.w	r3, r7, #20
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a19      	ldr	r2, [pc, #100]	@ (80039c8 <HAL_I2C_MspInit+0x84>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d12c      	bne.n	80039c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	4b18      	ldr	r3, [pc, #96]	@ (80039cc <HAL_I2C_MspInit+0x88>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396e:	4a17      	ldr	r2, [pc, #92]	@ (80039cc <HAL_I2C_MspInit+0x88>)
 8003970:	f043 0302 	orr.w	r3, r3, #2
 8003974:	6313      	str	r3, [r2, #48]	@ 0x30
 8003976:	4b15      	ldr	r3, [pc, #84]	@ (80039cc <HAL_I2C_MspInit+0x88>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003982:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003988:	2312      	movs	r3, #18
 800398a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003990:	2303      	movs	r3, #3
 8003992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003994:	2304      	movs	r3, #4
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003998:	f107 0314 	add.w	r3, r7, #20
 800399c:	4619      	mov	r1, r3
 800399e:	480c      	ldr	r0, [pc, #48]	@ (80039d0 <HAL_I2C_MspInit+0x8c>)
 80039a0:	f000 fdb6 	bl	8004510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	4b08      	ldr	r3, [pc, #32]	@ (80039cc <HAL_I2C_MspInit+0x88>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	4a07      	ldr	r2, [pc, #28]	@ (80039cc <HAL_I2C_MspInit+0x88>)
 80039ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <HAL_I2C_MspInit+0x88>)
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80039c0:	bf00      	nop
 80039c2:	3728      	adds	r7, #40	@ 0x28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40005800 	.word	0x40005800
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40020400 	.word	0x40020400

080039d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a2a      	ldr	r2, [pc, #168]	@ (8003a8c <HAL_TIM_Base_MspInit+0xb8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d116      	bne.n	8003a14 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	4b29      	ldr	r3, [pc, #164]	@ (8003a90 <HAL_TIM_Base_MspInit+0xbc>)
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	4a28      	ldr	r2, [pc, #160]	@ (8003a90 <HAL_TIM_Base_MspInit+0xbc>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039f6:	4b26      	ldr	r3, [pc, #152]	@ (8003a90 <HAL_TIM_Base_MspInit+0xbc>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003a02:	2200      	movs	r2, #0
 8003a04:	2100      	movs	r1, #0
 8003a06:	201b      	movs	r0, #27
 8003a08:	f000 fcb9 	bl	800437e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003a0c:	201b      	movs	r0, #27
 8003a0e:	f000 fcd2 	bl	80043b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003a12:	e036      	b.n	8003a82 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a1c:	d116      	bne.n	8003a4c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	4b1b      	ldr	r3, [pc, #108]	@ (8003a90 <HAL_TIM_Base_MspInit+0xbc>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	4a1a      	ldr	r2, [pc, #104]	@ (8003a90 <HAL_TIM_Base_MspInit+0xbc>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a2e:	4b18      	ldr	r3, [pc, #96]	@ (8003a90 <HAL_TIM_Base_MspInit+0xbc>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	201c      	movs	r0, #28
 8003a40:	f000 fc9d 	bl	800437e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a44:	201c      	movs	r0, #28
 8003a46:	f000 fcb6 	bl	80043b6 <HAL_NVIC_EnableIRQ>
}
 8003a4a:	e01a      	b.n	8003a82 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a10      	ldr	r2, [pc, #64]	@ (8003a94 <HAL_TIM_Base_MspInit+0xc0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d115      	bne.n	8003a82 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a90 <HAL_TIM_Base_MspInit+0xbc>)
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a90 <HAL_TIM_Base_MspInit+0xbc>)
 8003a60:	f043 0302 	orr.w	r3, r3, #2
 8003a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a66:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <HAL_TIM_Base_MspInit+0xbc>)
 8003a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8003a72:	2200      	movs	r2, #0
 8003a74:	2100      	movs	r1, #0
 8003a76:	202e      	movs	r0, #46	@ 0x2e
 8003a78:	f000 fc81 	bl	800437e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003a7c:	202e      	movs	r0, #46	@ 0x2e
 8003a7e:	f000 fc9a 	bl	80043b6 <HAL_NVIC_EnableIRQ>
}
 8003a82:	bf00      	nop
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40010400 	.word	0x40010400

08003a98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	@ 0x28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa0:	f107 0314 	add.w	r3, r7, #20
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
 8003aae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a37      	ldr	r2, [pc, #220]	@ (8003b94 <HAL_TIM_MspPostInit+0xfc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d11f      	bne.n	8003afa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	4b36      	ldr	r3, [pc, #216]	@ (8003b98 <HAL_TIM_MspPostInit+0x100>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	4a35      	ldr	r2, [pc, #212]	@ (8003b98 <HAL_TIM_MspPostInit+0x100>)
 8003ac4:	f043 0310 	orr.w	r3, r3, #16
 8003ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aca:	4b33      	ldr	r3, [pc, #204]	@ (8003b98 <HAL_TIM_MspPostInit+0x100>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8003ad6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8003ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003adc:	2312      	movs	r3, #18
 8003ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003aec:	f107 0314 	add.w	r3, r7, #20
 8003af0:	4619      	mov	r1, r3
 8003af2:	482a      	ldr	r0, [pc, #168]	@ (8003b9c <HAL_TIM_MspPostInit+0x104>)
 8003af4:	f000 fd0c 	bl	8004510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003af8:	e047      	b.n	8003b8a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b02:	d11e      	bne.n	8003b42 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	4b23      	ldr	r3, [pc, #140]	@ (8003b98 <HAL_TIM_MspPostInit+0x100>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0c:	4a22      	ldr	r2, [pc, #136]	@ (8003b98 <HAL_TIM_MspPostInit+0x100>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b14:	4b20      	ldr	r3, [pc, #128]	@ (8003b98 <HAL_TIM_MspPostInit+0x100>)
 8003b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b20:	230c      	movs	r3, #12
 8003b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b24:	2312      	movs	r3, #18
 8003b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b30:	2301      	movs	r3, #1
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4819      	ldr	r0, [pc, #100]	@ (8003ba0 <HAL_TIM_MspPostInit+0x108>)
 8003b3c:	f000 fce8 	bl	8004510 <HAL_GPIO_Init>
}
 8003b40:	e023      	b.n	8003b8a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a17      	ldr	r2, [pc, #92]	@ (8003ba4 <HAL_TIM_MspPostInit+0x10c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d11e      	bne.n	8003b8a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	4b11      	ldr	r3, [pc, #68]	@ (8003b98 <HAL_TIM_MspPostInit+0x100>)
 8003b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b54:	4a10      	ldr	r2, [pc, #64]	@ (8003b98 <HAL_TIM_MspPostInit+0x100>)
 8003b56:	f043 0304 	orr.w	r3, r3, #4
 8003b5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b98 <HAL_TIM_MspPostInit+0x100>)
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003b68:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b6e:	2312      	movs	r3, #18
 8003b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b72:	2302      	movs	r3, #2
 8003b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b76:	2303      	movs	r3, #3
 8003b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b7e:	f107 0314 	add.w	r3, r7, #20
 8003b82:	4619      	mov	r1, r3
 8003b84:	4808      	ldr	r0, [pc, #32]	@ (8003ba8 <HAL_TIM_MspPostInit+0x110>)
 8003b86:	f000 fcc3 	bl	8004510 <HAL_GPIO_Init>
}
 8003b8a:	bf00      	nop
 8003b8c:	3728      	adds	r7, #40	@ 0x28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40020000 	.word	0x40020000
 8003ba4:	40010400 	.word	0x40010400
 8003ba8:	40020800 	.word	0x40020800

08003bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08e      	sub	sp, #56	@ 0x38
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a57      	ldr	r2, [pc, #348]	@ (8003d28 <HAL_UART_MspInit+0x17c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d134      	bne.n	8003c38 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	4b56      	ldr	r3, [pc, #344]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	4a55      	ldr	r2, [pc, #340]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003bd8:	f043 0310 	orr.w	r3, r3, #16
 8003bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bde:	4b53      	ldr	r3, [pc, #332]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	623b      	str	r3, [r7, #32]
 8003be8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	4b4f      	ldr	r3, [pc, #316]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	4a4e      	ldr	r2, [pc, #312]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bfa:	4b4c      	ldr	r3, [pc, #304]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	61fb      	str	r3, [r7, #28]
 8003c04:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c06:	23c0      	movs	r3, #192	@ 0xc0
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c12:	2303      	movs	r3, #3
 8003c14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c16:	2307      	movs	r3, #7
 8003c18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4843      	ldr	r0, [pc, #268]	@ (8003d30 <HAL_UART_MspInit+0x184>)
 8003c22:	f000 fc75 	bl	8004510 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c26:	2200      	movs	r2, #0
 8003c28:	2100      	movs	r1, #0
 8003c2a:	2025      	movs	r0, #37	@ 0x25
 8003c2c:	f000 fba7 	bl	800437e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c30:	2025      	movs	r0, #37	@ 0x25
 8003c32:	f000 fbc0 	bl	80043b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c36:	e073      	b.n	8003d20 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a3d      	ldr	r2, [pc, #244]	@ (8003d34 <HAL_UART_MspInit+0x188>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d134      	bne.n	8003cac <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	4b39      	ldr	r3, [pc, #228]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	4a38      	ldr	r2, [pc, #224]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c52:	4b36      	ldr	r3, [pc, #216]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5a:	61bb      	str	r3, [r7, #24]
 8003c5c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	4b32      	ldr	r3, [pc, #200]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	4a31      	ldr	r2, [pc, #196]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003c68:	f043 0308 	orr.w	r3, r3, #8
 8003c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003c7a:	2360      	movs	r3, #96	@ 0x60
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c86:	2303      	movs	r3, #3
 8003c88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c8a:	2307      	movs	r3, #7
 8003c8c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c92:	4619      	mov	r1, r3
 8003c94:	4828      	ldr	r0, [pc, #160]	@ (8003d38 <HAL_UART_MspInit+0x18c>)
 8003c96:	f000 fc3b 	bl	8004510 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	2026      	movs	r0, #38	@ 0x26
 8003ca0:	f000 fb6d 	bl	800437e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ca4:	2026      	movs	r0, #38	@ 0x26
 8003ca6:	f000 fb86 	bl	80043b6 <HAL_NVIC_EnableIRQ>
}
 8003caa:	e039      	b.n	8003d20 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a22      	ldr	r2, [pc, #136]	@ (8003d3c <HAL_UART_MspInit+0x190>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d134      	bne.n	8003d20 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	4b1c      	ldr	r3, [pc, #112]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cc6:	4b19      	ldr	r3, [pc, #100]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	4b15      	ldr	r3, [pc, #84]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	4a14      	ldr	r2, [pc, #80]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003cdc:	f043 0304 	orr.w	r3, r3, #4
 8003ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce2:	4b12      	ldr	r3, [pc, #72]	@ (8003d2c <HAL_UART_MspInit+0x180>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003cee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d00:	2307      	movs	r3, #7
 8003d02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d08:	4619      	mov	r1, r3
 8003d0a:	480d      	ldr	r0, [pc, #52]	@ (8003d40 <HAL_UART_MspInit+0x194>)
 8003d0c:	f000 fc00 	bl	8004510 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003d10:	2200      	movs	r2, #0
 8003d12:	2100      	movs	r1, #0
 8003d14:	2027      	movs	r0, #39	@ 0x27
 8003d16:	f000 fb32 	bl	800437e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003d1a:	2027      	movs	r0, #39	@ 0x27
 8003d1c:	f000 fb4b 	bl	80043b6 <HAL_NVIC_EnableIRQ>
}
 8003d20:	bf00      	nop
 8003d22:	3738      	adds	r7, #56	@ 0x38
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40011000 	.word	0x40011000
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40020400 	.word	0x40020400
 8003d34:	40004400 	.word	0x40004400
 8003d38:	40020c00 	.word	0x40020c00
 8003d3c:	40004800 	.word	0x40004800
 8003d40:	40020800 	.word	0x40020800

08003d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d48:	bf00      	nop
 8003d4a:	e7fd      	b.n	8003d48 <NMI_Handler+0x4>

08003d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d50:	bf00      	nop
 8003d52:	e7fd      	b.n	8003d50 <HardFault_Handler+0x4>

08003d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d58:	bf00      	nop
 8003d5a:	e7fd      	b.n	8003d58 <MemManage_Handler+0x4>

08003d5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d60:	bf00      	nop
 8003d62:	e7fd      	b.n	8003d60 <BusFault_Handler+0x4>

08003d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d68:	bf00      	nop
 8003d6a:	e7fd      	b.n	8003d68 <UsageFault_Handler+0x4>

08003d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d8c:	bf00      	nop
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d9a:	f000 f9d1 	bl	8004140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_2_Pin);
 8003da6:	2001      	movs	r0, #1
 8003da8:	f000 fd80 	bl	80048ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003dac:	bf00      	nop
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_2_Pin);
 8003db4:	2002      	movs	r0, #2
 8003db6:	f000 fd79 	bl	80048ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_1_Pin);
 8003dc2:	2004      	movs	r0, #4
 8003dc4:	f000 fd72 	bl	80048ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003dc8:	bf00      	nop
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_1_Pin);
 8003dd0:	2008      	movs	r0, #8
 8003dd2:	f000 fd6b 	bl	80048ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_3_Pin);
 8003dde:	2020      	movs	r0, #32
 8003de0:	f000 fd64 	bl	80048ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8003de4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003de8:	f000 fd60 	bl	80048ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003df4:	4802      	ldr	r0, [pc, #8]	@ (8003e00 <TIM1_CC_IRQHandler+0x10>)
 8003df6:	f002 f865 	bl	8005ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000320 	.word	0x20000320

08003e04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e08:	4802      	ldr	r0, [pc, #8]	@ (8003e14 <TIM2_IRQHandler+0x10>)
 8003e0a:	f002 f85b 	bl	8005ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000368 	.word	0x20000368

08003e18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
//		pitch = sensorData[1];
//		ax = sensorData[2];
//		ay = sensorData[3];
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e1c:	4802      	ldr	r0, [pc, #8]	@ (8003e28 <USART1_IRQHandler+0x10>)
 8003e1e:	f002 ff71 	bl	8006d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	200003f8 	.word	0x200003f8

08003e2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e30:	4802      	ldr	r0, [pc, #8]	@ (8003e3c <USART2_IRQHandler+0x10>)
 8003e32:	f002 ff67 	bl	8006d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000440 	.word	0x20000440

08003e40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003e44:	4802      	ldr	r0, [pc, #8]	@ (8003e50 <USART3_IRQHandler+0x10>)
 8003e46:	f002 ff5d 	bl	8006d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000488 	.word	0x20000488

08003e54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8003e58:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003e5c:	f000 fd26 	bl	80048ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8003e60:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003e64:	f000 fd22 	bl	80048ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_3_Pin);
 8003e68:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003e6c:	f000 fd1e 	bl	80048ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_4_Pin);
 8003e70:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003e74:	f000 fd1a 	bl	80048ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_4_Pin);
 8003e78:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003e7c:	f000 fd16 	bl	80048ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e80:	bf00      	nop
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003e88:	4802      	ldr	r0, [pc, #8]	@ (8003e94 <TIM8_CC_IRQHandler+0x10>)
 8003e8a:	f002 f81b 	bl	8005ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003e8e:	bf00      	nop
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	200003b0 	.word	0x200003b0

08003e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return 1;
 8003e9c:	2301      	movs	r3, #1
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <_kill>:

int _kill(int pid, int sig)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003eb2:	f005 fd1b 	bl	80098ec <__errno>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2216      	movs	r2, #22
 8003eba:	601a      	str	r2, [r3, #0]
  return -1;
 8003ebc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <_exit>:

void _exit (int status)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ffe7 	bl	8003ea8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003eda:	bf00      	nop
 8003edc:	e7fd      	b.n	8003eda <_exit+0x12>

08003ede <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b086      	sub	sp, #24
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	e00a      	b.n	8003f06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ef0:	f3af 8000 	nop.w
 8003ef4:	4601      	mov	r1, r0
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	60ba      	str	r2, [r7, #8]
 8003efc:	b2ca      	uxtb	r2, r1
 8003efe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	3301      	adds	r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	dbf0      	blt.n	8003ef0 <_read+0x12>
  }

  return len;
 8003f0e:	687b      	ldr	r3, [r7, #4]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	e009      	b.n	8003f3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	60ba      	str	r2, [r7, #8]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	dbf1      	blt.n	8003f2a <_write+0x12>
  }
  return len;
 8003f46:	687b      	ldr	r3, [r7, #4]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <_close>:

int _close(int file)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f78:	605a      	str	r2, [r3, #4]
  return 0;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <_isatty>:

int _isatty(int file)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f90:	2301      	movs	r3, #1
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fc0:	4a14      	ldr	r2, [pc, #80]	@ (8004014 <_sbrk+0x5c>)
 8003fc2:	4b15      	ldr	r3, [pc, #84]	@ (8004018 <_sbrk+0x60>)
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fcc:	4b13      	ldr	r3, [pc, #76]	@ (800401c <_sbrk+0x64>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d102      	bne.n	8003fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fd4:	4b11      	ldr	r3, [pc, #68]	@ (800401c <_sbrk+0x64>)
 8003fd6:	4a12      	ldr	r2, [pc, #72]	@ (8004020 <_sbrk+0x68>)
 8003fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fda:	4b10      	ldr	r3, [pc, #64]	@ (800401c <_sbrk+0x64>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d207      	bcs.n	8003ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fe8:	f005 fc80 	bl	80098ec <__errno>
 8003fec:	4603      	mov	r3, r0
 8003fee:	220c      	movs	r2, #12
 8003ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff6:	e009      	b.n	800400c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ff8:	4b08      	ldr	r3, [pc, #32]	@ (800401c <_sbrk+0x64>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ffe:	4b07      	ldr	r3, [pc, #28]	@ (800401c <_sbrk+0x64>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	4a05      	ldr	r2, [pc, #20]	@ (800401c <_sbrk+0x64>)
 8004008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800400a:	68fb      	ldr	r3, [r7, #12]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20020000 	.word	0x20020000
 8004018:	00000400 	.word	0x00000400
 800401c:	200006f0 	.word	0x200006f0
 8004020:	20000848 	.word	0x20000848

08004024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004028:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <SystemInit+0x20>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402e:	4a05      	ldr	r2, [pc, #20]	@ (8004044 <SystemInit+0x20>)
 8004030:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004034:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	e000ed00 	.word	0xe000ed00

08004048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004048:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004080 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800404c:	f7ff ffea 	bl	8004024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004050:	480c      	ldr	r0, [pc, #48]	@ (8004084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004052:	490d      	ldr	r1, [pc, #52]	@ (8004088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004054:	4a0d      	ldr	r2, [pc, #52]	@ (800408c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004058:	e002      	b.n	8004060 <LoopCopyDataInit>

0800405a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800405a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800405c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800405e:	3304      	adds	r3, #4

08004060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004064:	d3f9      	bcc.n	800405a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004066:	4a0a      	ldr	r2, [pc, #40]	@ (8004090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004068:	4c0a      	ldr	r4, [pc, #40]	@ (8004094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800406a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800406c:	e001      	b.n	8004072 <LoopFillZerobss>

0800406e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800406e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004070:	3204      	adds	r2, #4

08004072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004074:	d3fb      	bcc.n	800406e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004076:	f005 fc3f 	bl	80098f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800407a:	f7fd fdd5 	bl	8001c28 <main>
  bx  lr    
 800407e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004088:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 800408c:	0800e100 	.word	0x0800e100
  ldr r2, =_sbss
 8004090:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8004094:	20000844 	.word	0x20000844

08004098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004098:	e7fe      	b.n	8004098 <ADC_IRQHandler>
	...

0800409c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040a0:	4b0e      	ldr	r3, [pc, #56]	@ (80040dc <HAL_Init+0x40>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0d      	ldr	r2, [pc, #52]	@ (80040dc <HAL_Init+0x40>)
 80040a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040ac:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <HAL_Init+0x40>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a0a      	ldr	r2, [pc, #40]	@ (80040dc <HAL_Init+0x40>)
 80040b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040b8:	4b08      	ldr	r3, [pc, #32]	@ (80040dc <HAL_Init+0x40>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a07      	ldr	r2, [pc, #28]	@ (80040dc <HAL_Init+0x40>)
 80040be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040c4:	2003      	movs	r0, #3
 80040c6:	f000 f94f 	bl	8004368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040ca:	2000      	movs	r0, #0
 80040cc:	f000 f808 	bl	80040e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040d0:	f7ff fc10 	bl	80038f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40023c00 	.word	0x40023c00

080040e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040e8:	4b12      	ldr	r3, [pc, #72]	@ (8004134 <HAL_InitTick+0x54>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4b12      	ldr	r3, [pc, #72]	@ (8004138 <HAL_InitTick+0x58>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	4619      	mov	r1, r3
 80040f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 f967 	bl	80043d2 <HAL_SYSTICK_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e00e      	b.n	800412c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b0f      	cmp	r3, #15
 8004112:	d80a      	bhi.n	800412a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004114:	2200      	movs	r2, #0
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	f04f 30ff 	mov.w	r0, #4294967295
 800411c:	f000 f92f 	bl	800437e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004120:	4a06      	ldr	r2, [pc, #24]	@ (800413c <HAL_InitTick+0x5c>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e000      	b.n	800412c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	200000cc 	.word	0x200000cc
 8004138:	200000d4 	.word	0x200000d4
 800413c:	200000d0 	.word	0x200000d0

08004140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004144:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <HAL_IncTick+0x20>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	4b06      	ldr	r3, [pc, #24]	@ (8004164 <HAL_IncTick+0x24>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4413      	add	r3, r2
 8004150:	4a04      	ldr	r2, [pc, #16]	@ (8004164 <HAL_IncTick+0x24>)
 8004152:	6013      	str	r3, [r2, #0]
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	200000d4 	.word	0x200000d4
 8004164:	200006f4 	.word	0x200006f4

08004168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  return uwTick;
 800416c:	4b03      	ldr	r3, [pc, #12]	@ (800417c <HAL_GetTick+0x14>)
 800416e:	681b      	ldr	r3, [r3, #0]
}
 8004170:	4618      	mov	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	200006f4 	.word	0x200006f4

08004180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004188:	f7ff ffee 	bl	8004168 <HAL_GetTick>
 800418c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d005      	beq.n	80041a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800419a:	4b0a      	ldr	r3, [pc, #40]	@ (80041c4 <HAL_Delay+0x44>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041a6:	bf00      	nop
 80041a8:	f7ff ffde 	bl	8004168 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d8f7      	bhi.n	80041a8 <HAL_Delay+0x28>
  {
  }
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	200000d4 	.word	0x200000d4

080041c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041d8:	4b0c      	ldr	r3, [pc, #48]	@ (800420c <__NVIC_SetPriorityGrouping+0x44>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041e4:	4013      	ands	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041fa:	4a04      	ldr	r2, [pc, #16]	@ (800420c <__NVIC_SetPriorityGrouping+0x44>)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	60d3      	str	r3, [r2, #12]
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004214:	4b04      	ldr	r3, [pc, #16]	@ (8004228 <__NVIC_GetPriorityGrouping+0x18>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	f003 0307 	and.w	r3, r3, #7
}
 800421e:	4618      	mov	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	2b00      	cmp	r3, #0
 800423c:	db0b      	blt.n	8004256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	f003 021f 	and.w	r2, r3, #31
 8004244:	4907      	ldr	r1, [pc, #28]	@ (8004264 <__NVIC_EnableIRQ+0x38>)
 8004246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	2001      	movs	r0, #1
 800424e:	fa00 f202 	lsl.w	r2, r0, r2
 8004252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	e000e100 	.word	0xe000e100

08004268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	6039      	str	r1, [r7, #0]
 8004272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004278:	2b00      	cmp	r3, #0
 800427a:	db0a      	blt.n	8004292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	b2da      	uxtb	r2, r3
 8004280:	490c      	ldr	r1, [pc, #48]	@ (80042b4 <__NVIC_SetPriority+0x4c>)
 8004282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004286:	0112      	lsls	r2, r2, #4
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	440b      	add	r3, r1
 800428c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004290:	e00a      	b.n	80042a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	b2da      	uxtb	r2, r3
 8004296:	4908      	ldr	r1, [pc, #32]	@ (80042b8 <__NVIC_SetPriority+0x50>)
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	3b04      	subs	r3, #4
 80042a0:	0112      	lsls	r2, r2, #4
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	440b      	add	r3, r1
 80042a6:	761a      	strb	r2, [r3, #24]
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	e000e100 	.word	0xe000e100
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042bc:	b480      	push	{r7}
 80042be:	b089      	sub	sp, #36	@ 0x24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f1c3 0307 	rsb	r3, r3, #7
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	bf28      	it	cs
 80042da:	2304      	movcs	r3, #4
 80042dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	3304      	adds	r3, #4
 80042e2:	2b06      	cmp	r3, #6
 80042e4:	d902      	bls.n	80042ec <NVIC_EncodePriority+0x30>
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	3b03      	subs	r3, #3
 80042ea:	e000      	b.n	80042ee <NVIC_EncodePriority+0x32>
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f0:	f04f 32ff 	mov.w	r2, #4294967295
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43da      	mvns	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	401a      	ands	r2, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004304:	f04f 31ff 	mov.w	r1, #4294967295
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	fa01 f303 	lsl.w	r3, r1, r3
 800430e:	43d9      	mvns	r1, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004314:	4313      	orrs	r3, r2
         );
}
 8004316:	4618      	mov	r0, r3
 8004318:	3724      	adds	r7, #36	@ 0x24
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3b01      	subs	r3, #1
 8004330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004334:	d301      	bcc.n	800433a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004336:	2301      	movs	r3, #1
 8004338:	e00f      	b.n	800435a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800433a:	4a0a      	ldr	r2, [pc, #40]	@ (8004364 <SysTick_Config+0x40>)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3b01      	subs	r3, #1
 8004340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004342:	210f      	movs	r1, #15
 8004344:	f04f 30ff 	mov.w	r0, #4294967295
 8004348:	f7ff ff8e 	bl	8004268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800434c:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <SysTick_Config+0x40>)
 800434e:	2200      	movs	r2, #0
 8004350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004352:	4b04      	ldr	r3, [pc, #16]	@ (8004364 <SysTick_Config+0x40>)
 8004354:	2207      	movs	r2, #7
 8004356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	e000e010 	.word	0xe000e010

08004368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ff29 	bl	80041c8 <__NVIC_SetPriorityGrouping>
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800437e:	b580      	push	{r7, lr}
 8004380:	b086      	sub	sp, #24
 8004382:	af00      	add	r7, sp, #0
 8004384:	4603      	mov	r3, r0
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004390:	f7ff ff3e 	bl	8004210 <__NVIC_GetPriorityGrouping>
 8004394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	6978      	ldr	r0, [r7, #20]
 800439c:	f7ff ff8e 	bl	80042bc <NVIC_EncodePriority>
 80043a0:	4602      	mov	r2, r0
 80043a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff ff5d 	bl	8004268 <__NVIC_SetPriority>
}
 80043ae:	bf00      	nop
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	4603      	mov	r3, r0
 80043be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff ff31 	bl	800422c <__NVIC_EnableIRQ>
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff ffa2 	bl	8004324 <SysTick_Config>
 80043e0:	4603      	mov	r3, r0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043f8:	f7ff feb6 	bl	8004168 <HAL_GetTick>
 80043fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d008      	beq.n	800441c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2280      	movs	r2, #128	@ 0x80
 800440e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e052      	b.n	80044c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0216 	bic.w	r2, r2, #22
 800442a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695a      	ldr	r2, [r3, #20]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800443a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d103      	bne.n	800444c <HAL_DMA_Abort+0x62>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0208 	bic.w	r2, r2, #8
 800445a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800446c:	e013      	b.n	8004496 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800446e:	f7ff fe7b 	bl	8004168 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b05      	cmp	r3, #5
 800447a:	d90c      	bls.n	8004496 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2203      	movs	r2, #3
 8004486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e015      	b.n	80044c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e4      	bne.n	800446e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a8:	223f      	movs	r2, #63	@ 0x3f
 80044aa:	409a      	lsls	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d004      	beq.n	80044e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2280      	movs	r2, #128	@ 0x80
 80044e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e00c      	b.n	8004502 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2205      	movs	r2, #5
 80044ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004510:	b480      	push	{r7}
 8004512:	b089      	sub	sp, #36	@ 0x24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800451e:	2300      	movs	r3, #0
 8004520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004522:	2300      	movs	r3, #0
 8004524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	e16b      	b.n	8004804 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800452c:	2201      	movs	r2, #1
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4013      	ands	r3, r2
 800453e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	429a      	cmp	r2, r3
 8004546:	f040 815a 	bne.w	80047fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	2b01      	cmp	r3, #1
 8004554:	d005      	beq.n	8004562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800455e:	2b02      	cmp	r3, #2
 8004560:	d130      	bne.n	80045c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	2203      	movs	r2, #3
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43db      	mvns	r3, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4013      	ands	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004598:	2201      	movs	r2, #1
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 0201 	and.w	r2, r3, #1
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d017      	beq.n	8004600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	2203      	movs	r2, #3
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d123      	bne.n	8004654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	08da      	lsrs	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3208      	adds	r2, #8
 8004614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	220f      	movs	r2, #15
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	08da      	lsrs	r2, r3, #3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3208      	adds	r2, #8
 800464e:	69b9      	ldr	r1, [r7, #24]
 8004650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	2203      	movs	r2, #3
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	4013      	ands	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 0203 	and.w	r2, r3, #3
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80b4 	beq.w	80047fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	4b60      	ldr	r3, [pc, #384]	@ (800481c <HAL_GPIO_Init+0x30c>)
 800469c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469e:	4a5f      	ldr	r2, [pc, #380]	@ (800481c <HAL_GPIO_Init+0x30c>)
 80046a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80046a6:	4b5d      	ldr	r3, [pc, #372]	@ (800481c <HAL_GPIO_Init+0x30c>)
 80046a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004820 <HAL_GPIO_Init+0x310>)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	089b      	lsrs	r3, r3, #2
 80046b8:	3302      	adds	r3, #2
 80046ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	220f      	movs	r2, #15
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a52      	ldr	r2, [pc, #328]	@ (8004824 <HAL_GPIO_Init+0x314>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d02b      	beq.n	8004736 <HAL_GPIO_Init+0x226>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a51      	ldr	r2, [pc, #324]	@ (8004828 <HAL_GPIO_Init+0x318>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d025      	beq.n	8004732 <HAL_GPIO_Init+0x222>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a50      	ldr	r2, [pc, #320]	@ (800482c <HAL_GPIO_Init+0x31c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01f      	beq.n	800472e <HAL_GPIO_Init+0x21e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a4f      	ldr	r2, [pc, #316]	@ (8004830 <HAL_GPIO_Init+0x320>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d019      	beq.n	800472a <HAL_GPIO_Init+0x21a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a4e      	ldr	r2, [pc, #312]	@ (8004834 <HAL_GPIO_Init+0x324>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_GPIO_Init+0x216>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a4d      	ldr	r2, [pc, #308]	@ (8004838 <HAL_GPIO_Init+0x328>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00d      	beq.n	8004722 <HAL_GPIO_Init+0x212>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a4c      	ldr	r2, [pc, #304]	@ (800483c <HAL_GPIO_Init+0x32c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d007      	beq.n	800471e <HAL_GPIO_Init+0x20e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a4b      	ldr	r2, [pc, #300]	@ (8004840 <HAL_GPIO_Init+0x330>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <HAL_GPIO_Init+0x20a>
 8004716:	2307      	movs	r3, #7
 8004718:	e00e      	b.n	8004738 <HAL_GPIO_Init+0x228>
 800471a:	2308      	movs	r3, #8
 800471c:	e00c      	b.n	8004738 <HAL_GPIO_Init+0x228>
 800471e:	2306      	movs	r3, #6
 8004720:	e00a      	b.n	8004738 <HAL_GPIO_Init+0x228>
 8004722:	2305      	movs	r3, #5
 8004724:	e008      	b.n	8004738 <HAL_GPIO_Init+0x228>
 8004726:	2304      	movs	r3, #4
 8004728:	e006      	b.n	8004738 <HAL_GPIO_Init+0x228>
 800472a:	2303      	movs	r3, #3
 800472c:	e004      	b.n	8004738 <HAL_GPIO_Init+0x228>
 800472e:	2302      	movs	r3, #2
 8004730:	e002      	b.n	8004738 <HAL_GPIO_Init+0x228>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <HAL_GPIO_Init+0x228>
 8004736:	2300      	movs	r3, #0
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	f002 0203 	and.w	r2, r2, #3
 800473e:	0092      	lsls	r2, r2, #2
 8004740:	4093      	lsls	r3, r2
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004748:	4935      	ldr	r1, [pc, #212]	@ (8004820 <HAL_GPIO_Init+0x310>)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	089b      	lsrs	r3, r3, #2
 800474e:	3302      	adds	r3, #2
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004756:	4b3b      	ldr	r3, [pc, #236]	@ (8004844 <HAL_GPIO_Init+0x334>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	43db      	mvns	r3, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4013      	ands	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800477a:	4a32      	ldr	r2, [pc, #200]	@ (8004844 <HAL_GPIO_Init+0x334>)
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004780:	4b30      	ldr	r3, [pc, #192]	@ (8004844 <HAL_GPIO_Init+0x334>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047a4:	4a27      	ldr	r2, [pc, #156]	@ (8004844 <HAL_GPIO_Init+0x334>)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047aa:	4b26      	ldr	r3, [pc, #152]	@ (8004844 <HAL_GPIO_Init+0x334>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	43db      	mvns	r3, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4013      	ands	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004844 <HAL_GPIO_Init+0x334>)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004844 <HAL_GPIO_Init+0x334>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	43db      	mvns	r3, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4013      	ands	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047f8:	4a12      	ldr	r2, [pc, #72]	@ (8004844 <HAL_GPIO_Init+0x334>)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	3301      	adds	r3, #1
 8004802:	61fb      	str	r3, [r7, #28]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	2b0f      	cmp	r3, #15
 8004808:	f67f ae90 	bls.w	800452c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800480c:	bf00      	nop
 800480e:	bf00      	nop
 8004810:	3724      	adds	r7, #36	@ 0x24
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40023800 	.word	0x40023800
 8004820:	40013800 	.word	0x40013800
 8004824:	40020000 	.word	0x40020000
 8004828:	40020400 	.word	0x40020400
 800482c:	40020800 	.word	0x40020800
 8004830:	40020c00 	.word	0x40020c00
 8004834:	40021000 	.word	0x40021000
 8004838:	40021400 	.word	0x40021400
 800483c:	40021800 	.word	0x40021800
 8004840:	40021c00 	.word	0x40021c00
 8004844:	40013c00 	.word	0x40013c00

08004848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	887b      	ldrh	r3, [r7, #2]
 800485a:	4013      	ands	r3, r2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
 8004864:	e001      	b.n	800486a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004866:	2300      	movs	r3, #0
 8004868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800486a:	7bfb      	ldrb	r3, [r7, #15]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	807b      	strh	r3, [r7, #2]
 8004884:	4613      	mov	r3, r2
 8004886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004888:	787b      	ldrb	r3, [r7, #1]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004894:	e003      	b.n	800489e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004896:	887b      	ldrh	r3, [r7, #2]
 8004898:	041a      	lsls	r2, r3, #16
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	619a      	str	r2, [r3, #24]
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80048b6:	4b08      	ldr	r3, [pc, #32]	@ (80048d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	4013      	ands	r3, r2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d006      	beq.n	80048d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048c2:	4a05      	ldr	r2, [pc, #20]	@ (80048d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048c8:	88fb      	ldrh	r3, [r7, #6]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fd f81c 	bl	8001908 <HAL_GPIO_EXTI_Callback>
  }
}
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40013c00 	.word	0x40013c00

080048dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e12b      	b.n	8004b46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff f81e 	bl	8003944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2224      	movs	r2, #36	@ 0x24
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0201 	bic.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800492e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800493e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004940:	f001 f8da 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 8004944:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4a81      	ldr	r2, [pc, #516]	@ (8004b50 <HAL_I2C_Init+0x274>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d807      	bhi.n	8004960 <HAL_I2C_Init+0x84>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a80      	ldr	r2, [pc, #512]	@ (8004b54 <HAL_I2C_Init+0x278>)
 8004954:	4293      	cmp	r3, r2
 8004956:	bf94      	ite	ls
 8004958:	2301      	movls	r3, #1
 800495a:	2300      	movhi	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	e006      	b.n	800496e <HAL_I2C_Init+0x92>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4a7d      	ldr	r2, [pc, #500]	@ (8004b58 <HAL_I2C_Init+0x27c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	bf94      	ite	ls
 8004968:	2301      	movls	r3, #1
 800496a:	2300      	movhi	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e0e7      	b.n	8004b46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4a78      	ldr	r2, [pc, #480]	@ (8004b5c <HAL_I2C_Init+0x280>)
 800497a:	fba2 2303 	umull	r2, r3, r2, r3
 800497e:	0c9b      	lsrs	r3, r3, #18
 8004980:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004b50 <HAL_I2C_Init+0x274>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d802      	bhi.n	80049b0 <HAL_I2C_Init+0xd4>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	3301      	adds	r3, #1
 80049ae:	e009      	b.n	80049c4 <HAL_I2C_Init+0xe8>
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80049b6:	fb02 f303 	mul.w	r3, r2, r3
 80049ba:	4a69      	ldr	r2, [pc, #420]	@ (8004b60 <HAL_I2C_Init+0x284>)
 80049bc:	fba2 2303 	umull	r2, r3, r2, r3
 80049c0:	099b      	lsrs	r3, r3, #6
 80049c2:	3301      	adds	r3, #1
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	430b      	orrs	r3, r1
 80049ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80049d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	495c      	ldr	r1, [pc, #368]	@ (8004b50 <HAL_I2C_Init+0x274>)
 80049e0:	428b      	cmp	r3, r1
 80049e2:	d819      	bhi.n	8004a18 <HAL_I2C_Init+0x13c>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	1e59      	subs	r1, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80049f2:	1c59      	adds	r1, r3, #1
 80049f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80049f8:	400b      	ands	r3, r1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <HAL_I2C_Init+0x138>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1e59      	subs	r1, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a12:	e051      	b.n	8004ab8 <HAL_I2C_Init+0x1dc>
 8004a14:	2304      	movs	r3, #4
 8004a16:	e04f      	b.n	8004ab8 <HAL_I2C_Init+0x1dc>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d111      	bne.n	8004a44 <HAL_I2C_Init+0x168>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1e58      	subs	r0, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6859      	ldr	r1, [r3, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	440b      	add	r3, r1
 8004a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a32:	3301      	adds	r3, #1
 8004a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bf0c      	ite	eq
 8004a3c:	2301      	moveq	r3, #1
 8004a3e:	2300      	movne	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	e012      	b.n	8004a6a <HAL_I2C_Init+0x18e>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	1e58      	subs	r0, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6859      	ldr	r1, [r3, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	0099      	lsls	r1, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf0c      	ite	eq
 8004a64:	2301      	moveq	r3, #1
 8004a66:	2300      	movne	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_I2C_Init+0x196>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e022      	b.n	8004ab8 <HAL_I2C_Init+0x1dc>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10e      	bne.n	8004a98 <HAL_I2C_Init+0x1bc>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1e58      	subs	r0, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6859      	ldr	r1, [r3, #4]
 8004a82:	460b      	mov	r3, r1
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	440b      	add	r3, r1
 8004a88:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a96:	e00f      	b.n	8004ab8 <HAL_I2C_Init+0x1dc>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	1e58      	subs	r0, r3, #1
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6859      	ldr	r1, [r3, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	0099      	lsls	r1, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	6809      	ldr	r1, [r1, #0]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69da      	ldr	r2, [r3, #28]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004ae6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6911      	ldr	r1, [r2, #16]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	68d2      	ldr	r2, [r2, #12]
 8004af2:	4311      	orrs	r1, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695a      	ldr	r2, [r3, #20]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	000186a0 	.word	0x000186a0
 8004b54:	001e847f 	.word	0x001e847f
 8004b58:	003d08ff 	.word	0x003d08ff
 8004b5c:	431bde83 	.word	0x431bde83
 8004b60:	10624dd3 	.word	0x10624dd3

08004b64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	607a      	str	r2, [r7, #4]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	460b      	mov	r3, r1
 8004b72:	817b      	strh	r3, [r7, #10]
 8004b74:	4613      	mov	r3, r2
 8004b76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b78:	f7ff faf6 	bl	8004168 <HAL_GetTick>
 8004b7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	f040 80e0 	bne.w	8004d4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	2319      	movs	r3, #25
 8004b92:	2201      	movs	r2, #1
 8004b94:	4970      	ldr	r1, [pc, #448]	@ (8004d58 <HAL_I2C_Master_Transmit+0x1f4>)
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f964 	bl	8004e64 <I2C_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e0d3      	b.n	8004d4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <HAL_I2C_Master_Transmit+0x50>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e0cc      	b.n	8004d4e <HAL_I2C_Master_Transmit+0x1ea>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d007      	beq.n	8004bda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0201 	orr.w	r2, r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004be8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2221      	movs	r2, #33	@ 0x21
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2210      	movs	r2, #16
 8004bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	893a      	ldrh	r2, [r7, #8]
 8004c0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4a50      	ldr	r2, [pc, #320]	@ (8004d5c <HAL_I2C_Master_Transmit+0x1f8>)
 8004c1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c1c:	8979      	ldrh	r1, [r7, #10]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	6a3a      	ldr	r2, [r7, #32]
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f89c 	bl	8004d60 <I2C_MasterRequestWrite>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e08d      	b.n	8004d4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c32:	2300      	movs	r3, #0
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c48:	e066      	b.n	8004d18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	6a39      	ldr	r1, [r7, #32]
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 fa22 	bl	8005098 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00d      	beq.n	8004c76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d107      	bne.n	8004c72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e06b      	b.n	8004d4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	781a      	ldrb	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d11b      	bne.n	8004cec <HAL_I2C_Master_Transmit+0x188>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d017      	beq.n	8004cec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc0:	781a      	ldrb	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	6a39      	ldr	r1, [r7, #32]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 fa19 	bl	8005128 <I2C_WaitOnBTFFlagUntilTimeout>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00d      	beq.n	8004d18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d107      	bne.n	8004d14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e01a      	b.n	8004d4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d194      	bne.n	8004c4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e000      	b.n	8004d4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
  }
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	00100002 	.word	0x00100002
 8004d5c:	ffff0000 	.word	0xffff0000

08004d60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d006      	beq.n	8004d8a <I2C_MasterRequestWrite+0x2a>
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d003      	beq.n	8004d8a <I2C_MasterRequestWrite+0x2a>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d88:	d108      	bne.n	8004d9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	e00b      	b.n	8004db4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da0:	2b12      	cmp	r3, #18
 8004da2:	d107      	bne.n	8004db4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004db2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f84f 	bl	8004e64 <I2C_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00d      	beq.n	8004de8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dda:	d103      	bne.n	8004de4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004de2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e035      	b.n	8004e54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004df0:	d108      	bne.n	8004e04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004df2:	897b      	ldrh	r3, [r7, #10]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e00:	611a      	str	r2, [r3, #16]
 8004e02:	e01b      	b.n	8004e3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e04:	897b      	ldrh	r3, [r7, #10]
 8004e06:	11db      	asrs	r3, r3, #7
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f003 0306 	and.w	r3, r3, #6
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f063 030f 	orn	r3, r3, #15
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	490e      	ldr	r1, [pc, #56]	@ (8004e5c <I2C_MasterRequestWrite+0xfc>)
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f898 	bl	8004f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e010      	b.n	8004e54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e32:	897b      	ldrh	r3, [r7, #10]
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	4907      	ldr	r1, [pc, #28]	@ (8004e60 <I2C_MasterRequestWrite+0x100>)
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 f888 	bl	8004f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	00010008 	.word	0x00010008
 8004e60:	00010002 	.word	0x00010002

08004e64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	4613      	mov	r3, r2
 8004e72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e74:	e048      	b.n	8004f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7c:	d044      	beq.n	8004f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7e:	f7ff f973 	bl	8004168 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d302      	bcc.n	8004e94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d139      	bne.n	8004f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	0c1b      	lsrs	r3, r3, #16
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d10d      	bne.n	8004eba <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	43da      	mvns	r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	bf0c      	ite	eq
 8004eb0:	2301      	moveq	r3, #1
 8004eb2:	2300      	movne	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	e00c      	b.n	8004ed4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	43da      	mvns	r2, r3
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	bf0c      	ite	eq
 8004ecc:	2301      	moveq	r3, #1
 8004ece:	2300      	movne	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	79fb      	ldrb	r3, [r7, #7]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d116      	bne.n	8004f08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	f043 0220 	orr.w	r2, r3, #32
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e023      	b.n	8004f50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	0c1b      	lsrs	r3, r3, #16
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d10d      	bne.n	8004f2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	43da      	mvns	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf0c      	ite	eq
 8004f24:	2301      	moveq	r3, #1
 8004f26:	2300      	movne	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	e00c      	b.n	8004f48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	43da      	mvns	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bf0c      	ite	eq
 8004f40:	2301      	moveq	r3, #1
 8004f42:	2300      	movne	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d093      	beq.n	8004e76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f66:	e071      	b.n	800504c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f76:	d123      	bne.n	8004fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fac:	f043 0204 	orr.w	r2, r3, #4
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e067      	b.n	8005090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d041      	beq.n	800504c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc8:	f7ff f8ce 	bl	8004168 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d302      	bcc.n	8004fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d136      	bne.n	800504c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	0c1b      	lsrs	r3, r3, #16
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d10c      	bne.n	8005002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	43da      	mvns	r2, r3
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	bf14      	ite	ne
 8004ffa:	2301      	movne	r3, #1
 8004ffc:	2300      	moveq	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	e00b      	b.n	800501a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	43da      	mvns	r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4013      	ands	r3, r2
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	bf14      	ite	ne
 8005014:	2301      	movne	r3, #1
 8005016:	2300      	moveq	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d016      	beq.n	800504c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	f043 0220 	orr.w	r2, r3, #32
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e021      	b.n	8005090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	0c1b      	lsrs	r3, r3, #16
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b01      	cmp	r3, #1
 8005054:	d10c      	bne.n	8005070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	43da      	mvns	r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	4013      	ands	r3, r2
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e00b      	b.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	43da      	mvns	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4013      	ands	r3, r2
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	bf14      	ite	ne
 8005082:	2301      	movne	r3, #1
 8005084:	2300      	moveq	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	f47f af6d 	bne.w	8004f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050a4:	e034      	b.n	8005110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f886 	bl	80051b8 <I2C_IsAcknowledgeFailed>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e034      	b.n	8005120 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050bc:	d028      	beq.n	8005110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050be:	f7ff f853 	bl	8004168 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d302      	bcc.n	80050d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d11d      	bne.n	8005110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050de:	2b80      	cmp	r3, #128	@ 0x80
 80050e0:	d016      	beq.n	8005110 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fc:	f043 0220 	orr.w	r2, r3, #32
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e007      	b.n	8005120 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511a:	2b80      	cmp	r3, #128	@ 0x80
 800511c:	d1c3      	bne.n	80050a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005134:	e034      	b.n	80051a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 f83e 	bl	80051b8 <I2C_IsAcknowledgeFailed>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e034      	b.n	80051b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d028      	beq.n	80051a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514e:	f7ff f80b 	bl	8004168 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	429a      	cmp	r2, r3
 800515c:	d302      	bcc.n	8005164 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d11d      	bne.n	80051a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b04      	cmp	r3, #4
 8005170:	d016      	beq.n	80051a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518c:	f043 0220 	orr.w	r2, r3, #32
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e007      	b.n	80051b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d1c3      	bne.n	8005136 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ce:	d11b      	bne.n	8005208 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f4:	f043 0204 	orr.w	r2, r3, #4
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e267      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d075      	beq.n	8005322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005236:	4b88      	ldr	r3, [pc, #544]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	2b04      	cmp	r3, #4
 8005240:	d00c      	beq.n	800525c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005242:	4b85      	ldr	r3, [pc, #532]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800524a:	2b08      	cmp	r3, #8
 800524c:	d112      	bne.n	8005274 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800524e:	4b82      	ldr	r3, [pc, #520]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005256:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800525a:	d10b      	bne.n	8005274 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525c:	4b7e      	ldr	r3, [pc, #504]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d05b      	beq.n	8005320 <HAL_RCC_OscConfig+0x108>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d157      	bne.n	8005320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e242      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800527c:	d106      	bne.n	800528c <HAL_RCC_OscConfig+0x74>
 800527e:	4b76      	ldr	r3, [pc, #472]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a75      	ldr	r2, [pc, #468]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	e01d      	b.n	80052c8 <HAL_RCC_OscConfig+0xb0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005294:	d10c      	bne.n	80052b0 <HAL_RCC_OscConfig+0x98>
 8005296:	4b70      	ldr	r3, [pc, #448]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a6f      	ldr	r2, [pc, #444]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800529c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a6c      	ldr	r2, [pc, #432]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e00b      	b.n	80052c8 <HAL_RCC_OscConfig+0xb0>
 80052b0:	4b69      	ldr	r3, [pc, #420]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a68      	ldr	r2, [pc, #416]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4b66      	ldr	r3, [pc, #408]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a65      	ldr	r2, [pc, #404]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d013      	beq.n	80052f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d0:	f7fe ff4a 	bl	8004168 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052d8:	f7fe ff46 	bl	8004168 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	@ 0x64
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e207      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0xc0>
 80052f6:	e014      	b.n	8005322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f8:	f7fe ff36 	bl	8004168 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005300:	f7fe ff32 	bl	8004168 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b64      	cmp	r3, #100	@ 0x64
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e1f3      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005312:	4b51      	ldr	r3, [pc, #324]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0xe8>
 800531e:	e000      	b.n	8005322 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d063      	beq.n	80053f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800532e:	4b4a      	ldr	r3, [pc, #296]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00b      	beq.n	8005352 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800533a:	4b47      	ldr	r3, [pc, #284]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005342:	2b08      	cmp	r3, #8
 8005344:	d11c      	bne.n	8005380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005346:	4b44      	ldr	r3, [pc, #272]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d116      	bne.n	8005380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005352:	4b41      	ldr	r3, [pc, #260]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_RCC_OscConfig+0x152>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d001      	beq.n	800536a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e1c7      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800536a:	4b3b      	ldr	r3, [pc, #236]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4937      	ldr	r1, [pc, #220]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800537a:	4313      	orrs	r3, r2
 800537c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800537e:	e03a      	b.n	80053f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d020      	beq.n	80053ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005388:	4b34      	ldr	r3, [pc, #208]	@ (800545c <HAL_RCC_OscConfig+0x244>)
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538e:	f7fe feeb 	bl	8004168 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005396:	f7fe fee7 	bl	8004168 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e1a8      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f0      	beq.n	8005396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b4:	4b28      	ldr	r3, [pc, #160]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	4925      	ldr	r1, [pc, #148]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]
 80053c8:	e015      	b.n	80053f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ca:	4b24      	ldr	r3, [pc, #144]	@ (800545c <HAL_RCC_OscConfig+0x244>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fe feca 	bl	8004168 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053d8:	f7fe fec6 	bl	8004168 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e187      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d036      	beq.n	8005470 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d016      	beq.n	8005438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800540a:	4b15      	ldr	r3, [pc, #84]	@ (8005460 <HAL_RCC_OscConfig+0x248>)
 800540c:	2201      	movs	r2, #1
 800540e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005410:	f7fe feaa 	bl	8004168 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005418:	f7fe fea6 	bl	8004168 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e167      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800542a:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800542c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0x200>
 8005436:	e01b      	b.n	8005470 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005438:	4b09      	ldr	r3, [pc, #36]	@ (8005460 <HAL_RCC_OscConfig+0x248>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800543e:	f7fe fe93 	bl	8004168 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005444:	e00e      	b.n	8005464 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005446:	f7fe fe8f 	bl	8004168 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d907      	bls.n	8005464 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e150      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
 8005458:	40023800 	.word	0x40023800
 800545c:	42470000 	.word	0x42470000
 8005460:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005464:	4b88      	ldr	r3, [pc, #544]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1ea      	bne.n	8005446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8097 	beq.w	80055ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800547e:	2300      	movs	r3, #0
 8005480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005482:	4b81      	ldr	r3, [pc, #516]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10f      	bne.n	80054ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	4b7d      	ldr	r3, [pc, #500]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	4a7c      	ldr	r2, [pc, #496]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800549c:	6413      	str	r3, [r2, #64]	@ 0x40
 800549e:	4b7a      	ldr	r3, [pc, #488]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80054a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	60bb      	str	r3, [r7, #8]
 80054a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054aa:	2301      	movs	r3, #1
 80054ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ae:	4b77      	ldr	r3, [pc, #476]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d118      	bne.n	80054ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ba:	4b74      	ldr	r3, [pc, #464]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a73      	ldr	r2, [pc, #460]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c6:	f7fe fe4f 	bl	8004168 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ce:	f7fe fe4b 	bl	8004168 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e10c      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e0:	4b6a      	ldr	r3, [pc, #424]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d106      	bne.n	8005502 <HAL_RCC_OscConfig+0x2ea>
 80054f4:	4b64      	ldr	r3, [pc, #400]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f8:	4a63      	ldr	r2, [pc, #396]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005500:	e01c      	b.n	800553c <HAL_RCC_OscConfig+0x324>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b05      	cmp	r3, #5
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x30c>
 800550a:	4b5f      	ldr	r3, [pc, #380]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550e:	4a5e      	ldr	r2, [pc, #376]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005510:	f043 0304 	orr.w	r3, r3, #4
 8005514:	6713      	str	r3, [r2, #112]	@ 0x70
 8005516:	4b5c      	ldr	r3, [pc, #368]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800551a:	4a5b      	ldr	r2, [pc, #364]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	6713      	str	r3, [r2, #112]	@ 0x70
 8005522:	e00b      	b.n	800553c <HAL_RCC_OscConfig+0x324>
 8005524:	4b58      	ldr	r3, [pc, #352]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005528:	4a57      	ldr	r2, [pc, #348]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005530:	4b55      	ldr	r3, [pc, #340]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005534:	4a54      	ldr	r2, [pc, #336]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005536:	f023 0304 	bic.w	r3, r3, #4
 800553a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d015      	beq.n	8005570 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005544:	f7fe fe10 	bl	8004168 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554a:	e00a      	b.n	8005562 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800554c:	f7fe fe0c 	bl	8004168 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e0cb      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005562:	4b49      	ldr	r3, [pc, #292]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0ee      	beq.n	800554c <HAL_RCC_OscConfig+0x334>
 800556e:	e014      	b.n	800559a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005570:	f7fe fdfa 	bl	8004168 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005576:	e00a      	b.n	800558e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005578:	f7fe fdf6 	bl	8004168 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005586:	4293      	cmp	r3, r2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e0b5      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558e:	4b3e      	ldr	r3, [pc, #248]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1ee      	bne.n	8005578 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800559a:	7dfb      	ldrb	r3, [r7, #23]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d105      	bne.n	80055ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a0:	4b39      	ldr	r3, [pc, #228]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	4a38      	ldr	r2, [pc, #224]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 80a1 	beq.w	80056f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055b6:	4b34      	ldr	r3, [pc, #208]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 030c 	and.w	r3, r3, #12
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d05c      	beq.n	800567c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d141      	bne.n	800564e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ca:	4b31      	ldr	r3, [pc, #196]	@ (8005690 <HAL_RCC_OscConfig+0x478>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d0:	f7fe fdca 	bl	8004168 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d8:	f7fe fdc6 	bl	8004168 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e087      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ea:	4b27      	ldr	r3, [pc, #156]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f0      	bne.n	80055d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69da      	ldr	r2, [r3, #28]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	019b      	lsls	r3, r3, #6
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	085b      	lsrs	r3, r3, #1
 800560e:	3b01      	subs	r3, #1
 8005610:	041b      	lsls	r3, r3, #16
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005618:	061b      	lsls	r3, r3, #24
 800561a:	491b      	ldr	r1, [pc, #108]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800561c:	4313      	orrs	r3, r2
 800561e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005620:	4b1b      	ldr	r3, [pc, #108]	@ (8005690 <HAL_RCC_OscConfig+0x478>)
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005626:	f7fe fd9f 	bl	8004168 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800562e:	f7fe fd9b 	bl	8004168 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e05c      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005640:	4b11      	ldr	r3, [pc, #68]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0x416>
 800564c:	e054      	b.n	80056f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564e:	4b10      	ldr	r3, [pc, #64]	@ (8005690 <HAL_RCC_OscConfig+0x478>)
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005654:	f7fe fd88 	bl	8004168 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800565c:	f7fe fd84 	bl	8004168 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e045      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566e:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x444>
 800567a:	e03d      	b.n	80056f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d107      	bne.n	8005694 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e038      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
 8005688:	40023800 	.word	0x40023800
 800568c:	40007000 	.word	0x40007000
 8005690:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005694:	4b1b      	ldr	r3, [pc, #108]	@ (8005704 <HAL_RCC_OscConfig+0x4ec>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d028      	beq.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d121      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d11a      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056c4:	4013      	ands	r3, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d111      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056da:	085b      	lsrs	r3, r3, #1
 80056dc:	3b01      	subs	r3, #1
 80056de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d107      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d001      	beq.n	80056f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40023800 	.word	0x40023800

08005708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0cc      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800571c:	4b68      	ldr	r3, [pc, #416]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d90c      	bls.n	8005744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572a:	4b65      	ldr	r3, [pc, #404]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005732:	4b63      	ldr	r3, [pc, #396]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d001      	beq.n	8005744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e0b8      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d020      	beq.n	8005792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800575c:	4b59      	ldr	r3, [pc, #356]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	4a58      	ldr	r2, [pc, #352]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005774:	4b53      	ldr	r3, [pc, #332]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4a52      	ldr	r2, [pc, #328]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800577e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005780:	4b50      	ldr	r3, [pc, #320]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	494d      	ldr	r1, [pc, #308]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	4313      	orrs	r3, r2
 8005790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d044      	beq.n	8005828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d107      	bne.n	80057b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a6:	4b47      	ldr	r3, [pc, #284]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d119      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e07f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d003      	beq.n	80057c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d107      	bne.n	80057d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c6:	4b3f      	ldr	r3, [pc, #252]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d109      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e06f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d6:	4b3b      	ldr	r3, [pc, #236]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e067      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e6:	4b37      	ldr	r3, [pc, #220]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f023 0203 	bic.w	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4934      	ldr	r1, [pc, #208]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f8:	f7fe fcb6 	bl	8004168 <HAL_GetTick>
 80057fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fe:	e00a      	b.n	8005816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005800:	f7fe fcb2 	bl	8004168 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800580e:	4293      	cmp	r3, r2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e04f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005816:	4b2b      	ldr	r3, [pc, #172]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 020c 	and.w	r2, r3, #12
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	429a      	cmp	r2, r3
 8005826:	d1eb      	bne.n	8005800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005828:	4b25      	ldr	r3, [pc, #148]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d20c      	bcs.n	8005850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005836:	4b22      	ldr	r3, [pc, #136]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b20      	ldr	r3, [pc, #128]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e032      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800585c:	4b19      	ldr	r3, [pc, #100]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4916      	ldr	r1, [pc, #88]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	4313      	orrs	r3, r2
 800586c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800587a:	4b12      	ldr	r3, [pc, #72]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	490e      	ldr	r1, [pc, #56]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800588e:	f000 f821 	bl	80058d4 <HAL_RCC_GetSysClockFreq>
 8005892:	4602      	mov	r2, r0
 8005894:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	091b      	lsrs	r3, r3, #4
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	490a      	ldr	r1, [pc, #40]	@ (80058c8 <HAL_RCC_ClockConfig+0x1c0>)
 80058a0:	5ccb      	ldrb	r3, [r1, r3]
 80058a2:	fa22 f303 	lsr.w	r3, r2, r3
 80058a6:	4a09      	ldr	r2, [pc, #36]	@ (80058cc <HAL_RCC_ClockConfig+0x1c4>)
 80058a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058aa:	4b09      	ldr	r3, [pc, #36]	@ (80058d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe fc16 	bl	80040e0 <HAL_InitTick>

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40023c00 	.word	0x40023c00
 80058c4:	40023800 	.word	0x40023800
 80058c8:	0800da70 	.word	0x0800da70
 80058cc:	200000cc 	.word	0x200000cc
 80058d0:	200000d0 	.word	0x200000d0

080058d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d8:	b094      	sub	sp, #80	@ 0x50
 80058da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	647b      	str	r3, [r7, #68]	@ 0x44
 80058e0:	2300      	movs	r3, #0
 80058e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058e4:	2300      	movs	r3, #0
 80058e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058ec:	4b79      	ldr	r3, [pc, #484]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 030c 	and.w	r3, r3, #12
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d00d      	beq.n	8005914 <HAL_RCC_GetSysClockFreq+0x40>
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	f200 80e1 	bhi.w	8005ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <HAL_RCC_GetSysClockFreq+0x34>
 8005902:	2b04      	cmp	r3, #4
 8005904:	d003      	beq.n	800590e <HAL_RCC_GetSysClockFreq+0x3a>
 8005906:	e0db      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005908:	4b73      	ldr	r3, [pc, #460]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 800590a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800590c:	e0db      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800590e:	4b73      	ldr	r3, [pc, #460]	@ (8005adc <HAL_RCC_GetSysClockFreq+0x208>)
 8005910:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005912:	e0d8      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005914:	4b6f      	ldr	r3, [pc, #444]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800591c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800591e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d063      	beq.n	80059f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800592a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	099b      	lsrs	r3, r3, #6
 8005930:	2200      	movs	r2, #0
 8005932:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005934:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593c:	633b      	str	r3, [r7, #48]	@ 0x30
 800593e:	2300      	movs	r3, #0
 8005940:	637b      	str	r3, [r7, #52]	@ 0x34
 8005942:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005946:	4622      	mov	r2, r4
 8005948:	462b      	mov	r3, r5
 800594a:	f04f 0000 	mov.w	r0, #0
 800594e:	f04f 0100 	mov.w	r1, #0
 8005952:	0159      	lsls	r1, r3, #5
 8005954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005958:	0150      	lsls	r0, r2, #5
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4621      	mov	r1, r4
 8005960:	1a51      	subs	r1, r2, r1
 8005962:	6139      	str	r1, [r7, #16]
 8005964:	4629      	mov	r1, r5
 8005966:	eb63 0301 	sbc.w	r3, r3, r1
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005978:	4659      	mov	r1, fp
 800597a:	018b      	lsls	r3, r1, #6
 800597c:	4651      	mov	r1, sl
 800597e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005982:	4651      	mov	r1, sl
 8005984:	018a      	lsls	r2, r1, #6
 8005986:	4651      	mov	r1, sl
 8005988:	ebb2 0801 	subs.w	r8, r2, r1
 800598c:	4659      	mov	r1, fp
 800598e:	eb63 0901 	sbc.w	r9, r3, r1
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800599e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059a6:	4690      	mov	r8, r2
 80059a8:	4699      	mov	r9, r3
 80059aa:	4623      	mov	r3, r4
 80059ac:	eb18 0303 	adds.w	r3, r8, r3
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	462b      	mov	r3, r5
 80059b4:	eb49 0303 	adc.w	r3, r9, r3
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059c6:	4629      	mov	r1, r5
 80059c8:	024b      	lsls	r3, r1, #9
 80059ca:	4621      	mov	r1, r4
 80059cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059d0:	4621      	mov	r1, r4
 80059d2:	024a      	lsls	r2, r1, #9
 80059d4:	4610      	mov	r0, r2
 80059d6:	4619      	mov	r1, r3
 80059d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059da:	2200      	movs	r2, #0
 80059dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059e4:	f7fb f950 	bl	8000c88 <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4613      	mov	r3, r2
 80059ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059f0:	e058      	b.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059f2:	4b38      	ldr	r3, [pc, #224]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	099b      	lsrs	r3, r3, #6
 80059f8:	2200      	movs	r2, #0
 80059fa:	4618      	mov	r0, r3
 80059fc:	4611      	mov	r1, r2
 80059fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a02:	623b      	str	r3, [r7, #32]
 8005a04:	2300      	movs	r3, #0
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	f04f 0000 	mov.w	r0, #0
 8005a14:	f04f 0100 	mov.w	r1, #0
 8005a18:	0159      	lsls	r1, r3, #5
 8005a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a1e:	0150      	lsls	r0, r2, #5
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4641      	mov	r1, r8
 8005a26:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a44:	ebb2 040a 	subs.w	r4, r2, sl
 8005a48:	eb63 050b 	sbc.w	r5, r3, fp
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	00eb      	lsls	r3, r5, #3
 8005a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a5a:	00e2      	lsls	r2, r4, #3
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	461d      	mov	r5, r3
 8005a60:	4643      	mov	r3, r8
 8005a62:	18e3      	adds	r3, r4, r3
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	464b      	mov	r3, r9
 8005a68:	eb45 0303 	adc.w	r3, r5, r3
 8005a6c:	607b      	str	r3, [r7, #4]
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	028b      	lsls	r3, r1, #10
 8005a7e:	4621      	mov	r1, r4
 8005a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a84:	4621      	mov	r1, r4
 8005a86:	028a      	lsls	r2, r1, #10
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a8e:	2200      	movs	r2, #0
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	61fa      	str	r2, [r7, #28]
 8005a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a98:	f7fb f8f6 	bl	8000c88 <__aeabi_uldivmod>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	0c1b      	lsrs	r3, r3, #16
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	3301      	adds	r3, #1
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005ab4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005abe:	e002      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ac0:	4b05      	ldr	r3, [pc, #20]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3750      	adds	r7, #80	@ 0x50
 8005acc:	46bd      	mov	sp, r7
 8005ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	00f42400 	.word	0x00f42400
 8005adc:	007a1200 	.word	0x007a1200

08005ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ae4:	4b03      	ldr	r3, [pc, #12]	@ (8005af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	200000cc 	.word	0x200000cc

08005af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005afc:	f7ff fff0 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 8005b00:	4602      	mov	r2, r0
 8005b02:	4b05      	ldr	r3, [pc, #20]	@ (8005b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	0a9b      	lsrs	r3, r3, #10
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4903      	ldr	r1, [pc, #12]	@ (8005b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b0e:	5ccb      	ldrb	r3, [r1, r3]
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	0800da80 	.word	0x0800da80

08005b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b24:	f7ff ffdc 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	4b05      	ldr	r3, [pc, #20]	@ (8005b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	0b5b      	lsrs	r3, r3, #13
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	4903      	ldr	r1, [pc, #12]	@ (8005b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b36:	5ccb      	ldrb	r3, [r1, r3]
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40023800 	.word	0x40023800
 8005b44:	0800da80 	.word	0x0800da80

08005b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e041      	b.n	8005bde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7fd ff30 	bl	80039d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3304      	adds	r3, #4
 8005b84:	4619      	mov	r1, r3
 8005b86:	4610      	mov	r0, r2
 8005b88:	f000 fc48 	bl	800641c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e041      	b.n	8005c7c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d106      	bne.n	8005c12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f839 	bl	8005c84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3304      	adds	r3, #4
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f000 fbf9 	bl	800641c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d109      	bne.n	8005cc0 <HAL_TIM_PWM_Start_IT+0x28>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	bf14      	ite	ne
 8005cb8:	2301      	movne	r3, #1
 8005cba:	2300      	moveq	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	e022      	b.n	8005d06 <HAL_TIM_PWM_Start_IT+0x6e>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d109      	bne.n	8005cda <HAL_TIM_PWM_Start_IT+0x42>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	bf14      	ite	ne
 8005cd2:	2301      	movne	r3, #1
 8005cd4:	2300      	moveq	r3, #0
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	e015      	b.n	8005d06 <HAL_TIM_PWM_Start_IT+0x6e>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d109      	bne.n	8005cf4 <HAL_TIM_PWM_Start_IT+0x5c>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	bf14      	ite	ne
 8005cec:	2301      	movne	r3, #1
 8005cee:	2300      	moveq	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	e008      	b.n	8005d06 <HAL_TIM_PWM_Start_IT+0x6e>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	bf14      	ite	ne
 8005d00:	2301      	movne	r3, #1
 8005d02:	2300      	moveq	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e0c7      	b.n	8005e9e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <HAL_TIM_PWM_Start_IT+0x86>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d1c:	e013      	b.n	8005d46 <HAL_TIM_PWM_Start_IT+0xae>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d104      	bne.n	8005d2e <HAL_TIM_PWM_Start_IT+0x96>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d2c:	e00b      	b.n	8005d46 <HAL_TIM_PWM_Start_IT+0xae>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d104      	bne.n	8005d3e <HAL_TIM_PWM_Start_IT+0xa6>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d3c:	e003      	b.n	8005d46 <HAL_TIM_PWM_Start_IT+0xae>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2202      	movs	r2, #2
 8005d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b0c      	cmp	r3, #12
 8005d4a:	d841      	bhi.n	8005dd0 <HAL_TIM_PWM_Start_IT+0x138>
 8005d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005d89 	.word	0x08005d89
 8005d58:	08005dd1 	.word	0x08005dd1
 8005d5c:	08005dd1 	.word	0x08005dd1
 8005d60:	08005dd1 	.word	0x08005dd1
 8005d64:	08005d9b 	.word	0x08005d9b
 8005d68:	08005dd1 	.word	0x08005dd1
 8005d6c:	08005dd1 	.word	0x08005dd1
 8005d70:	08005dd1 	.word	0x08005dd1
 8005d74:	08005dad 	.word	0x08005dad
 8005d78:	08005dd1 	.word	0x08005dd1
 8005d7c:	08005dd1 	.word	0x08005dd1
 8005d80:	08005dd1 	.word	0x08005dd1
 8005d84:	08005dbf 	.word	0x08005dbf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0202 	orr.w	r2, r2, #2
 8005d96:	60da      	str	r2, [r3, #12]
      break;
 8005d98:	e01d      	b.n	8005dd6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0204 	orr.w	r2, r2, #4
 8005da8:	60da      	str	r2, [r3, #12]
      break;
 8005daa:	e014      	b.n	8005dd6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0208 	orr.w	r2, r2, #8
 8005dba:	60da      	str	r2, [r3, #12]
      break;
 8005dbc:	e00b      	b.n	8005dd6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0210 	orr.w	r2, r2, #16
 8005dcc:	60da      	str	r2, [r3, #12]
      break;
 8005dce:	e002      	b.n	8005dd6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d15f      	bne.n	8005e9c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2201      	movs	r2, #1
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fe0f 	bl	8006a08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a2e      	ldr	r2, [pc, #184]	@ (8005ea8 <HAL_TIM_PWM_Start_IT+0x210>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d004      	beq.n	8005dfe <HAL_TIM_PWM_Start_IT+0x166>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a2c      	ldr	r2, [pc, #176]	@ (8005eac <HAL_TIM_PWM_Start_IT+0x214>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d101      	bne.n	8005e02 <HAL_TIM_PWM_Start_IT+0x16a>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <HAL_TIM_PWM_Start_IT+0x16c>
 8005e02:	2300      	movs	r3, #0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e16:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a22      	ldr	r2, [pc, #136]	@ (8005ea8 <HAL_TIM_PWM_Start_IT+0x210>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d022      	beq.n	8005e68 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e2a:	d01d      	beq.n	8005e68 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1f      	ldr	r2, [pc, #124]	@ (8005eb0 <HAL_TIM_PWM_Start_IT+0x218>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d018      	beq.n	8005e68 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005eb4 <HAL_TIM_PWM_Start_IT+0x21c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d013      	beq.n	8005e68 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb8 <HAL_TIM_PWM_Start_IT+0x220>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00e      	beq.n	8005e68 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a17      	ldr	r2, [pc, #92]	@ (8005eac <HAL_TIM_PWM_Start_IT+0x214>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d009      	beq.n	8005e68 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a18      	ldr	r2, [pc, #96]	@ (8005ebc <HAL_TIM_PWM_Start_IT+0x224>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d004      	beq.n	8005e68 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a17      	ldr	r2, [pc, #92]	@ (8005ec0 <HAL_TIM_PWM_Start_IT+0x228>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d111      	bne.n	8005e8c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b06      	cmp	r3, #6
 8005e78:	d010      	beq.n	8005e9c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0201 	orr.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e8a:	e007      	b.n	8005e9c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0201 	orr.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40010000 	.word	0x40010000
 8005eac:	40010400 	.word	0x40010400
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40000c00 	.word	0x40000c00
 8005ebc:	40014000 	.word	0x40014000
 8005ec0:	40001800 	.word	0x40001800

08005ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d020      	beq.n	8005f28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01b      	beq.n	8005f28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f06f 0202 	mvn.w	r2, #2
 8005ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fa65 	bl	80063de <HAL_TIM_IC_CaptureCallback>
 8005f14:	e005      	b.n	8005f22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fa57 	bl	80063ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fa68 	bl	80063f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d020      	beq.n	8005f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01b      	beq.n	8005f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0204 	mvn.w	r2, #4
 8005f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2202      	movs	r2, #2
 8005f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa3f 	bl	80063de <HAL_TIM_IC_CaptureCallback>
 8005f60:	e005      	b.n	8005f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa31 	bl	80063ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fa42 	bl	80063f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d020      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01b      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0208 	mvn.w	r2, #8
 8005f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2204      	movs	r2, #4
 8005f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fa19 	bl	80063de <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fa0b 	bl	80063ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fa1c 	bl	80063f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f003 0310 	and.w	r3, r3, #16
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d020      	beq.n	800600c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f003 0310 	and.w	r3, r3, #16
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01b      	beq.n	800600c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f06f 0210 	mvn.w	r2, #16
 8005fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f9f3 	bl	80063de <HAL_TIM_IC_CaptureCallback>
 8005ff8:	e005      	b.n	8006006 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f9e5 	bl	80063ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f9f6 	bl	80063f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00c      	beq.n	8006030 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d007      	beq.n	8006030 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0201 	mvn.w	r2, #1
 8006028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f9c3 	bl	80063b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00c      	beq.n	8006054 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800604c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fdd8 	bl	8006c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00c      	beq.n	8006078 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f9c7 	bl	8006406 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00c      	beq.n	800609c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d007      	beq.n	800609c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0220 	mvn.w	r2, #32
 8006094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fdaa 	bl	8006bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d101      	bne.n	80060c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060be:	2302      	movs	r3, #2
 80060c0:	e0ae      	b.n	8006220 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b0c      	cmp	r3, #12
 80060ce:	f200 809f 	bhi.w	8006210 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060d2:	a201      	add	r2, pc, #4	@ (adr r2, 80060d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	0800610d 	.word	0x0800610d
 80060dc:	08006211 	.word	0x08006211
 80060e0:	08006211 	.word	0x08006211
 80060e4:	08006211 	.word	0x08006211
 80060e8:	0800614d 	.word	0x0800614d
 80060ec:	08006211 	.word	0x08006211
 80060f0:	08006211 	.word	0x08006211
 80060f4:	08006211 	.word	0x08006211
 80060f8:	0800618f 	.word	0x0800618f
 80060fc:	08006211 	.word	0x08006211
 8006100:	08006211 	.word	0x08006211
 8006104:	08006211 	.word	0x08006211
 8006108:	080061cf 	.word	0x080061cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fa2e 	bl	8006574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0208 	orr.w	r2, r2, #8
 8006126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0204 	bic.w	r2, r2, #4
 8006136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6999      	ldr	r1, [r3, #24]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	619a      	str	r2, [r3, #24]
      break;
 800614a:	e064      	b.n	8006216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fa7e 	bl	8006654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6999      	ldr	r1, [r3, #24]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	021a      	lsls	r2, r3, #8
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	619a      	str	r2, [r3, #24]
      break;
 800618c:	e043      	b.n	8006216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fad3 	bl	8006740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0208 	orr.w	r2, r2, #8
 80061a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69da      	ldr	r2, [r3, #28]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0204 	bic.w	r2, r2, #4
 80061b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69d9      	ldr	r1, [r3, #28]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	61da      	str	r2, [r3, #28]
      break;
 80061cc:	e023      	b.n	8006216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fb27 	bl	8006828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69d9      	ldr	r1, [r3, #28]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	021a      	lsls	r2, r3, #8
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	61da      	str	r2, [r3, #28]
      break;
 800620e:	e002      	b.n	8006216 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	75fb      	strb	r3, [r7, #23]
      break;
 8006214:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800621e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_TIM_ConfigClockSource+0x1c>
 8006240:	2302      	movs	r3, #2
 8006242:	e0b4      	b.n	80063ae <HAL_TIM_ConfigClockSource+0x186>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800626a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800627c:	d03e      	beq.n	80062fc <HAL_TIM_ConfigClockSource+0xd4>
 800627e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006282:	f200 8087 	bhi.w	8006394 <HAL_TIM_ConfigClockSource+0x16c>
 8006286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800628a:	f000 8086 	beq.w	800639a <HAL_TIM_ConfigClockSource+0x172>
 800628e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006292:	d87f      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x16c>
 8006294:	2b70      	cmp	r3, #112	@ 0x70
 8006296:	d01a      	beq.n	80062ce <HAL_TIM_ConfigClockSource+0xa6>
 8006298:	2b70      	cmp	r3, #112	@ 0x70
 800629a:	d87b      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x16c>
 800629c:	2b60      	cmp	r3, #96	@ 0x60
 800629e:	d050      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0x11a>
 80062a0:	2b60      	cmp	r3, #96	@ 0x60
 80062a2:	d877      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x16c>
 80062a4:	2b50      	cmp	r3, #80	@ 0x50
 80062a6:	d03c      	beq.n	8006322 <HAL_TIM_ConfigClockSource+0xfa>
 80062a8:	2b50      	cmp	r3, #80	@ 0x50
 80062aa:	d873      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x16c>
 80062ac:	2b40      	cmp	r3, #64	@ 0x40
 80062ae:	d058      	beq.n	8006362 <HAL_TIM_ConfigClockSource+0x13a>
 80062b0:	2b40      	cmp	r3, #64	@ 0x40
 80062b2:	d86f      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x16c>
 80062b4:	2b30      	cmp	r3, #48	@ 0x30
 80062b6:	d064      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0x15a>
 80062b8:	2b30      	cmp	r3, #48	@ 0x30
 80062ba:	d86b      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x16c>
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d060      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0x15a>
 80062c0:	2b20      	cmp	r3, #32
 80062c2:	d867      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x16c>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d05c      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0x15a>
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	d05a      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0x15a>
 80062cc:	e062      	b.n	8006394 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062de:	f000 fb73 	bl	80069c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	609a      	str	r2, [r3, #8]
      break;
 80062fa:	e04f      	b.n	800639c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800630c:	f000 fb5c 	bl	80069c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800631e:	609a      	str	r2, [r3, #8]
      break;
 8006320:	e03c      	b.n	800639c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800632e:	461a      	mov	r2, r3
 8006330:	f000 fad0 	bl	80068d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2150      	movs	r1, #80	@ 0x50
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fb29 	bl	8006992 <TIM_ITRx_SetConfig>
      break;
 8006340:	e02c      	b.n	800639c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800634e:	461a      	mov	r2, r3
 8006350:	f000 faef 	bl	8006932 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2160      	movs	r1, #96	@ 0x60
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fb19 	bl	8006992 <TIM_ITRx_SetConfig>
      break;
 8006360:	e01c      	b.n	800639c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800636e:	461a      	mov	r2, r3
 8006370:	f000 fab0 	bl	80068d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2140      	movs	r1, #64	@ 0x40
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fb09 	bl	8006992 <TIM_ITRx_SetConfig>
      break;
 8006380:	e00c      	b.n	800639c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4619      	mov	r1, r3
 800638c:	4610      	mov	r0, r2
 800638e:	f000 fb00 	bl	8006992 <TIM_ITRx_SetConfig>
      break;
 8006392:	e003      	b.n	800639c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]
      break;
 8006398:	e000      	b.n	800639c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800639a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063e6:	bf00      	nop
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063fa:	bf00      	nop
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
	...

0800641c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a46      	ldr	r2, [pc, #280]	@ (8006548 <TIM_Base_SetConfig+0x12c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d013      	beq.n	800645c <TIM_Base_SetConfig+0x40>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800643a:	d00f      	beq.n	800645c <TIM_Base_SetConfig+0x40>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a43      	ldr	r2, [pc, #268]	@ (800654c <TIM_Base_SetConfig+0x130>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00b      	beq.n	800645c <TIM_Base_SetConfig+0x40>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a42      	ldr	r2, [pc, #264]	@ (8006550 <TIM_Base_SetConfig+0x134>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d007      	beq.n	800645c <TIM_Base_SetConfig+0x40>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a41      	ldr	r2, [pc, #260]	@ (8006554 <TIM_Base_SetConfig+0x138>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d003      	beq.n	800645c <TIM_Base_SetConfig+0x40>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a40      	ldr	r2, [pc, #256]	@ (8006558 <TIM_Base_SetConfig+0x13c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d108      	bne.n	800646e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a35      	ldr	r2, [pc, #212]	@ (8006548 <TIM_Base_SetConfig+0x12c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d02b      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800647c:	d027      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a32      	ldr	r2, [pc, #200]	@ (800654c <TIM_Base_SetConfig+0x130>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d023      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a31      	ldr	r2, [pc, #196]	@ (8006550 <TIM_Base_SetConfig+0x134>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d01f      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a30      	ldr	r2, [pc, #192]	@ (8006554 <TIM_Base_SetConfig+0x138>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d01b      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a2f      	ldr	r2, [pc, #188]	@ (8006558 <TIM_Base_SetConfig+0x13c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d017      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2e      	ldr	r2, [pc, #184]	@ (800655c <TIM_Base_SetConfig+0x140>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d013      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a2d      	ldr	r2, [pc, #180]	@ (8006560 <TIM_Base_SetConfig+0x144>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00f      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a2c      	ldr	r2, [pc, #176]	@ (8006564 <TIM_Base_SetConfig+0x148>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d00b      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006568 <TIM_Base_SetConfig+0x14c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d007      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a2a      	ldr	r2, [pc, #168]	@ (800656c <TIM_Base_SetConfig+0x150>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d003      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a29      	ldr	r2, [pc, #164]	@ (8006570 <TIM_Base_SetConfig+0x154>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d108      	bne.n	80064e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a10      	ldr	r2, [pc, #64]	@ (8006548 <TIM_Base_SetConfig+0x12c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_Base_SetConfig+0xf8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a12      	ldr	r2, [pc, #72]	@ (8006558 <TIM_Base_SetConfig+0x13c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d103      	bne.n	800651c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	691a      	ldr	r2, [r3, #16]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b01      	cmp	r3, #1
 800652c:	d105      	bne.n	800653a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f023 0201 	bic.w	r2, r3, #1
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	611a      	str	r2, [r3, #16]
  }
}
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40010000 	.word	0x40010000
 800654c:	40000400 	.word	0x40000400
 8006550:	40000800 	.word	0x40000800
 8006554:	40000c00 	.word	0x40000c00
 8006558:	40010400 	.word	0x40010400
 800655c:	40014000 	.word	0x40014000
 8006560:	40014400 	.word	0x40014400
 8006564:	40014800 	.word	0x40014800
 8006568:	40001800 	.word	0x40001800
 800656c:	40001c00 	.word	0x40001c00
 8006570:	40002000 	.word	0x40002000

08006574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	f023 0201 	bic.w	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0303 	bic.w	r3, r3, #3
 80065aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f023 0302 	bic.w	r3, r3, #2
 80065bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a20      	ldr	r2, [pc, #128]	@ (800664c <TIM_OC1_SetConfig+0xd8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_OC1_SetConfig+0x64>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006650 <TIM_OC1_SetConfig+0xdc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d10c      	bne.n	80065f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0308 	bic.w	r3, r3, #8
 80065de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f023 0304 	bic.w	r3, r3, #4
 80065f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a15      	ldr	r2, [pc, #84]	@ (800664c <TIM_OC1_SetConfig+0xd8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d003      	beq.n	8006602 <TIM_OC1_SetConfig+0x8e>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a14      	ldr	r2, [pc, #80]	@ (8006650 <TIM_OC1_SetConfig+0xdc>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d111      	bne.n	8006626 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	621a      	str	r2, [r3, #32]
}
 8006640:	bf00      	nop
 8006642:	371c      	adds	r7, #28
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	40010000 	.word	0x40010000
 8006650:	40010400 	.word	0x40010400

08006654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f023 0210 	bic.w	r2, r3, #16
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800668a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f023 0320 	bic.w	r3, r3, #32
 800669e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a22      	ldr	r2, [pc, #136]	@ (8006738 <TIM_OC2_SetConfig+0xe4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_OC2_SetConfig+0x68>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a21      	ldr	r2, [pc, #132]	@ (800673c <TIM_OC2_SetConfig+0xe8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d10d      	bne.n	80066d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a17      	ldr	r2, [pc, #92]	@ (8006738 <TIM_OC2_SetConfig+0xe4>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_OC2_SetConfig+0x94>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a16      	ldr	r2, [pc, #88]	@ (800673c <TIM_OC2_SetConfig+0xe8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d113      	bne.n	8006710 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40010000 	.word	0x40010000
 800673c:	40010400 	.word	0x40010400

08006740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800676e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	021b      	lsls	r3, r3, #8
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	4313      	orrs	r3, r2
 8006794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a21      	ldr	r2, [pc, #132]	@ (8006820 <TIM_OC3_SetConfig+0xe0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <TIM_OC3_SetConfig+0x66>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a20      	ldr	r2, [pc, #128]	@ (8006824 <TIM_OC3_SetConfig+0xe4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d10d      	bne.n	80067c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a16      	ldr	r2, [pc, #88]	@ (8006820 <TIM_OC3_SetConfig+0xe0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d003      	beq.n	80067d2 <TIM_OC3_SetConfig+0x92>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a15      	ldr	r2, [pc, #84]	@ (8006824 <TIM_OC3_SetConfig+0xe4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d113      	bne.n	80067fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	621a      	str	r2, [r3, #32]
}
 8006814:	bf00      	nop
 8006816:	371c      	adds	r7, #28
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	40010000 	.word	0x40010000
 8006824:	40010400 	.word	0x40010400

08006828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800685e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	021b      	lsls	r3, r3, #8
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	031b      	lsls	r3, r3, #12
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a12      	ldr	r2, [pc, #72]	@ (80068cc <TIM_OC4_SetConfig+0xa4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_OC4_SetConfig+0x68>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a11      	ldr	r2, [pc, #68]	@ (80068d0 <TIM_OC4_SetConfig+0xa8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d109      	bne.n	80068a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	019b      	lsls	r3, r3, #6
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	621a      	str	r2, [r3, #32]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40010000 	.word	0x40010000
 80068d0:	40010400 	.word	0x40010400

080068d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	f023 0201 	bic.w	r2, r3, #1
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4313      	orrs	r3, r2
 8006908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f023 030a 	bic.w	r3, r3, #10
 8006910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4313      	orrs	r3, r2
 8006918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	621a      	str	r2, [r3, #32]
}
 8006926:	bf00      	nop
 8006928:	371c      	adds	r7, #28
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006932:	b480      	push	{r7}
 8006934:	b087      	sub	sp, #28
 8006936:	af00      	add	r7, sp, #0
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	60b9      	str	r1, [r7, #8]
 800693c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	f023 0210 	bic.w	r2, r3, #16
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800695c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	031b      	lsls	r3, r3, #12
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800696e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	011b      	lsls	r3, r3, #4
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	621a      	str	r2, [r3, #32]
}
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006992:	b480      	push	{r7}
 8006994:	b085      	sub	sp, #20
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f043 0307 	orr.w	r3, r3, #7
 80069b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	609a      	str	r2, [r3, #8]
}
 80069bc:	bf00      	nop
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	021a      	lsls	r2, r3, #8
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	431a      	orrs	r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	609a      	str	r2, [r3, #8]
}
 80069fc:	bf00      	nop
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 031f 	and.w	r3, r3, #31
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a1a      	ldr	r2, [r3, #32]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	43db      	mvns	r3, r3
 8006a2a:	401a      	ands	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6a1a      	ldr	r2, [r3, #32]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 031f 	and.w	r3, r3, #31
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a40:	431a      	orrs	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
	...

08006a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e05a      	b.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a21      	ldr	r2, [pc, #132]	@ (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d022      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab8:	d01d      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a1d      	ldr	r2, [pc, #116]	@ (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d018      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d013      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1a      	ldr	r2, [pc, #104]	@ (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00e      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a18      	ldr	r2, [pc, #96]	@ (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d009      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a17      	ldr	r2, [pc, #92]	@ (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d004      	beq.n	8006af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a15      	ldr	r2, [pc, #84]	@ (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d10c      	bne.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	40010000 	.word	0x40010000
 8006b34:	40000400 	.word	0x40000400
 8006b38:	40000800 	.word	0x40000800
 8006b3c:	40000c00 	.word	0x40000c00
 8006b40:	40010400 	.word	0x40010400
 8006b44:	40014000 	.word	0x40014000
 8006b48:	40001800 	.word	0x40001800

08006b4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d101      	bne.n	8006b68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b64:	2302      	movs	r3, #2
 8006b66:	e03d      	b.n	8006be4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e042      	b.n	8006cb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d106      	bne.n	8006c44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7fc ffb4 	bl	8003bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2224      	movs	r2, #36	@ 0x24
 8006c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68da      	ldr	r2, [r3, #12]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fcdb 	bl	8007618 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	691a      	ldr	r2, [r3, #16]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	695a      	ldr	r2, [r3, #20]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b20      	cmp	r3, #32
 8006cd0:	d112      	bne.n	8006cf8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_UART_Receive_IT+0x26>
 8006cd8:	88fb      	ldrh	r3, [r7, #6]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e00b      	b.n	8006cfa <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ce8:	88fb      	ldrh	r3, [r7, #6]
 8006cea:	461a      	mov	r2, r3
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 faba 	bl	8007268 <UART_Start_Receive_IT>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	e000      	b.n	8006cfa <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
  }
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b0ba      	sub	sp, #232	@ 0xe8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10f      	bne.n	8006d6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d4e:	f003 0320 	and.w	r3, r3, #32
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d009      	beq.n	8006d6a <HAL_UART_IRQHandler+0x66>
 8006d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fb99 	bl	800749a <UART_Receive_IT>
      return;
 8006d68:	e25b      	b.n	8007222 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 80de 	beq.w	8006f30 <HAL_UART_IRQHandler+0x22c>
 8006d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d106      	bne.n	8006d8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d84:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 80d1 	beq.w	8006f30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00b      	beq.n	8006db2 <HAL_UART_IRQHandler+0xae>
 8006d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006daa:	f043 0201 	orr.w	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db6:	f003 0304 	and.w	r3, r3, #4
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00b      	beq.n	8006dd6 <HAL_UART_IRQHandler+0xd2>
 8006dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dce:	f043 0202 	orr.w	r2, r3, #2
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <HAL_UART_IRQHandler+0xf6>
 8006de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d005      	beq.n	8006dfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df2:	f043 0204 	orr.w	r2, r3, #4
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d011      	beq.n	8006e2a <HAL_UART_IRQHandler+0x126>
 8006e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d105      	bne.n	8006e1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e22:	f043 0208 	orr.w	r2, r3, #8
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 81f2 	beq.w	8007218 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e38:	f003 0320 	and.w	r3, r3, #32
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d008      	beq.n	8006e52 <HAL_UART_IRQHandler+0x14e>
 8006e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fb24 	bl	800749a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e5c:	2b40      	cmp	r3, #64	@ 0x40
 8006e5e:	bf0c      	ite	eq
 8006e60:	2301      	moveq	r3, #1
 8006e62:	2300      	movne	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d103      	bne.n	8006e7e <HAL_UART_IRQHandler+0x17a>
 8006e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d04f      	beq.n	8006f1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fa2c 	bl	80072dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8e:	2b40      	cmp	r3, #64	@ 0x40
 8006e90:	d141      	bne.n	8006f16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3314      	adds	r3, #20
 8006e98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006eac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3314      	adds	r3, #20
 8006eba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ebe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006eca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1d9      	bne.n	8006e92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d013      	beq.n	8006f0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eea:	4a7e      	ldr	r2, [pc, #504]	@ (80070e4 <HAL_UART_IRQHandler+0x3e0>)
 8006eec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fd fae9 	bl	80044ca <HAL_DMA_Abort_IT>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d016      	beq.n	8006f2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f0c:	e00e      	b.n	8006f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f994 	bl	800723c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f14:	e00a      	b.n	8006f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f990 	bl	800723c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1c:	e006      	b.n	8006f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f98c 	bl	800723c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006f2a:	e175      	b.n	8007218 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f2c:	bf00      	nop
    return;
 8006f2e:	e173      	b.n	8007218 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	f040 814f 	bne.w	80071d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f3e:	f003 0310 	and.w	r3, r3, #16
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 8148 	beq.w	80071d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f4c:	f003 0310 	and.w	r3, r3, #16
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 8141 	beq.w	80071d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f56:	2300      	movs	r3, #0
 8006f58:	60bb      	str	r3, [r7, #8]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	60bb      	str	r3, [r7, #8]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	60bb      	str	r3, [r7, #8]
 8006f6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f76:	2b40      	cmp	r3, #64	@ 0x40
 8006f78:	f040 80b6 	bne.w	80070e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 8145 	beq.w	800721c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	f080 813e 	bcs.w	800721c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fa6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fb2:	f000 8088 	beq.w	80070c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	330c      	adds	r3, #12
 8006fbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	330c      	adds	r3, #12
 8006fde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006fe2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006fee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1d9      	bne.n	8006fb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3314      	adds	r3, #20
 8007008:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007012:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007014:	f023 0301 	bic.w	r3, r3, #1
 8007018:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3314      	adds	r3, #20
 8007022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007026:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800702a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800702e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007038:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e1      	bne.n	8007002 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3314      	adds	r3, #20
 8007044:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800704e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3314      	adds	r3, #20
 800705e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007062:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007064:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007068:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800706a:	e841 2300 	strex	r3, r2, [r1]
 800706e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007070:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1e3      	bne.n	800703e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2220      	movs	r2, #32
 800707a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	330c      	adds	r3, #12
 800708a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007094:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007096:	f023 0310 	bic.w	r3, r3, #16
 800709a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	330c      	adds	r3, #12
 80070a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80070a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80070aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070b0:	e841 2300 	strex	r3, r2, [r1]
 80070b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80070b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1e3      	bne.n	8007084 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fd f992 	bl	80043ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2202      	movs	r2, #2
 80070ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	b29b      	uxth	r3, r3
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f8b7 	bl	8007250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070e2:	e09b      	b.n	800721c <HAL_UART_IRQHandler+0x518>
 80070e4:	080073a3 	.word	0x080073a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 808e 	beq.w	8007220 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007104:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8089 	beq.w	8007220 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	330c      	adds	r3, #12
 8007114:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800711e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007120:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007124:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	330c      	adds	r3, #12
 800712e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007132:	647a      	str	r2, [r7, #68]	@ 0x44
 8007134:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007138:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e3      	bne.n	800710e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3314      	adds	r3, #20
 800714c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	e853 3f00 	ldrex	r3, [r3]
 8007154:	623b      	str	r3, [r7, #32]
   return(result);
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	f023 0301 	bic.w	r3, r3, #1
 800715c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3314      	adds	r3, #20
 8007166:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800716a:	633a      	str	r2, [r7, #48]	@ 0x30
 800716c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e3      	bne.n	8007146 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2220      	movs	r2, #32
 8007182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	330c      	adds	r3, #12
 8007192:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	e853 3f00 	ldrex	r3, [r3]
 800719a:	60fb      	str	r3, [r7, #12]
   return(result);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 0310 	bic.w	r3, r3, #16
 80071a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	330c      	adds	r3, #12
 80071ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80071b0:	61fa      	str	r2, [r7, #28]
 80071b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	69b9      	ldr	r1, [r7, #24]
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	e841 2300 	strex	r3, r2, [r1]
 80071bc:	617b      	str	r3, [r7, #20]
   return(result);
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e3      	bne.n	800718c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2202      	movs	r2, #2
 80071c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f83d 	bl	8007250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071d6:	e023      	b.n	8007220 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d009      	beq.n	80071f8 <HAL_UART_IRQHandler+0x4f4>
 80071e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f8ea 	bl	80073ca <UART_Transmit_IT>
    return;
 80071f6:	e014      	b.n	8007222 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00e      	beq.n	8007222 <HAL_UART_IRQHandler+0x51e>
 8007204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720c:	2b00      	cmp	r3, #0
 800720e:	d008      	beq.n	8007222 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f92a 	bl	800746a <UART_EndTransmit_IT>
    return;
 8007216:	e004      	b.n	8007222 <HAL_UART_IRQHandler+0x51e>
    return;
 8007218:	bf00      	nop
 800721a:	e002      	b.n	8007222 <HAL_UART_IRQHandler+0x51e>
      return;
 800721c:	bf00      	nop
 800721e:	e000      	b.n	8007222 <HAL_UART_IRQHandler+0x51e>
      return;
 8007220:	bf00      	nop
  }
}
 8007222:	37e8      	adds	r7, #232	@ 0xe8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	4613      	mov	r3, r2
 8007274:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	88fa      	ldrh	r2, [r7, #6]
 8007280:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	88fa      	ldrh	r2, [r7, #6]
 8007286:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2222      	movs	r2, #34	@ 0x22
 8007292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d007      	beq.n	80072ae <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	695a      	ldr	r2, [r3, #20]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f042 0201 	orr.w	r2, r2, #1
 80072bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f042 0220 	orr.w	r2, r2, #32
 80072cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072dc:	b480      	push	{r7}
 80072de:	b095      	sub	sp, #84	@ 0x54
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	330c      	adds	r3, #12
 80072ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ee:	e853 3f00 	ldrex	r3, [r3]
 80072f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	330c      	adds	r3, #12
 8007302:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007304:	643a      	str	r2, [r7, #64]	@ 0x40
 8007306:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800730a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800730c:	e841 2300 	strex	r3, r2, [r1]
 8007310:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e5      	bne.n	80072e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3314      	adds	r3, #20
 800731e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	61fb      	str	r3, [r7, #28]
   return(result);
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	f023 0301 	bic.w	r3, r3, #1
 800732e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3314      	adds	r3, #20
 8007336:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007338:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800733a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800733e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e5      	bne.n	8007318 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007350:	2b01      	cmp	r3, #1
 8007352:	d119      	bne.n	8007388 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	330c      	adds	r3, #12
 800735a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	60bb      	str	r3, [r7, #8]
   return(result);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f023 0310 	bic.w	r3, r3, #16
 800736a:	647b      	str	r3, [r7, #68]	@ 0x44
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	330c      	adds	r3, #12
 8007372:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007374:	61ba      	str	r2, [r7, #24]
 8007376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6979      	ldr	r1, [r7, #20]
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	613b      	str	r3, [r7, #16]
   return(result);
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e5      	bne.n	8007354 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007396:	bf00      	nop
 8007398:	3754      	adds	r7, #84	@ 0x54
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f7ff ff3d 	bl	800723c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073c2:	bf00      	nop
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b21      	cmp	r3, #33	@ 0x21
 80073dc:	d13e      	bne.n	800745c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073e6:	d114      	bne.n	8007412 <UART_Transmit_IT+0x48>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d110      	bne.n	8007412 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	881b      	ldrh	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007404:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	1c9a      	adds	r2, r3, #2
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	621a      	str	r2, [r3, #32]
 8007410:	e008      	b.n	8007424 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	1c59      	adds	r1, r3, #1
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6211      	str	r1, [r2, #32]
 800741c:	781a      	ldrb	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007428:	b29b      	uxth	r3, r3
 800742a:	3b01      	subs	r3, #1
 800742c:	b29b      	uxth	r3, r3
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	4619      	mov	r1, r3
 8007432:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10f      	bne.n	8007458 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007446:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007456:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	e000      	b.n	800745e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800745c:	2302      	movs	r3, #2
  }
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007480:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7ff fecc 	bl	8007228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b08c      	sub	sp, #48	@ 0x30
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b22      	cmp	r3, #34	@ 0x22
 80074ac:	f040 80ae 	bne.w	800760c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b8:	d117      	bne.n	80074ea <UART_Receive_IT+0x50>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d113      	bne.n	80074ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d8:	b29a      	uxth	r2, r3
 80074da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e2:	1c9a      	adds	r2, r3, #2
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80074e8:	e026      	b.n	8007538 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80074f0:	2300      	movs	r3, #0
 80074f2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074fc:	d007      	beq.n	800750e <UART_Receive_IT+0x74>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10a      	bne.n	800751c <UART_Receive_IT+0x82>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d106      	bne.n	800751c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	b2da      	uxtb	r2, r3
 8007516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	e008      	b.n	800752e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007528:	b2da      	uxtb	r2, r3
 800752a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800752c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800753c:	b29b      	uxth	r3, r3
 800753e:	3b01      	subs	r3, #1
 8007540:	b29b      	uxth	r3, r3
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	4619      	mov	r1, r3
 8007546:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007548:	2b00      	cmp	r3, #0
 800754a:	d15d      	bne.n	8007608 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0220 	bic.w	r2, r2, #32
 800755a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800756a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	695a      	ldr	r2, [r3, #20]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0201 	bic.w	r2, r2, #1
 800757a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2220      	movs	r2, #32
 8007580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758e:	2b01      	cmp	r3, #1
 8007590:	d135      	bne.n	80075fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	330c      	adds	r3, #12
 800759e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	e853 3f00 	ldrex	r3, [r3]
 80075a6:	613b      	str	r3, [r7, #16]
   return(result);
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	f023 0310 	bic.w	r3, r3, #16
 80075ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	330c      	adds	r3, #12
 80075b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075b8:	623a      	str	r2, [r7, #32]
 80075ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075bc:	69f9      	ldr	r1, [r7, #28]
 80075be:	6a3a      	ldr	r2, [r7, #32]
 80075c0:	e841 2300 	strex	r3, r2, [r1]
 80075c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1e5      	bne.n	8007598 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0310 	and.w	r3, r3, #16
 80075d6:	2b10      	cmp	r3, #16
 80075d8:	d10a      	bne.n	80075f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	60fb      	str	r3, [r7, #12]
 80075ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff fe2a 	bl	8007250 <HAL_UARTEx_RxEventCallback>
 80075fc:	e002      	b.n	8007604 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7fb fa52 	bl	8002aa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007604:	2300      	movs	r3, #0
 8007606:	e002      	b.n	800760e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	e000      	b.n	800760e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800760c:	2302      	movs	r3, #2
  }
}
 800760e:	4618      	mov	r0, r3
 8007610:	3730      	adds	r7, #48	@ 0x30
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800761c:	b0c0      	sub	sp, #256	@ 0x100
 800761e:	af00      	add	r7, sp, #0
 8007620:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007634:	68d9      	ldr	r1, [r3, #12]
 8007636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	ea40 0301 	orr.w	r3, r0, r1
 8007640:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	431a      	orrs	r2, r3
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	431a      	orrs	r2, r3
 8007658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	4313      	orrs	r3, r2
 8007660:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007670:	f021 010c 	bic.w	r1, r1, #12
 8007674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800767e:	430b      	orrs	r3, r1
 8007680:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800768e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007692:	6999      	ldr	r1, [r3, #24]
 8007694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	ea40 0301 	orr.w	r3, r0, r1
 800769e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4b8f      	ldr	r3, [pc, #572]	@ (80078e4 <UART_SetConfig+0x2cc>)
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d005      	beq.n	80076b8 <UART_SetConfig+0xa0>
 80076ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	4b8d      	ldr	r3, [pc, #564]	@ (80078e8 <UART_SetConfig+0x2d0>)
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d104      	bne.n	80076c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076b8:	f7fe fa32 	bl	8005b20 <HAL_RCC_GetPCLK2Freq>
 80076bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80076c0:	e003      	b.n	80076ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076c2:	f7fe fa19 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 80076c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076d4:	f040 810c 	bne.w	80078f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076dc:	2200      	movs	r2, #0
 80076de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80076e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80076ea:	4622      	mov	r2, r4
 80076ec:	462b      	mov	r3, r5
 80076ee:	1891      	adds	r1, r2, r2
 80076f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80076f2:	415b      	adcs	r3, r3
 80076f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80076fa:	4621      	mov	r1, r4
 80076fc:	eb12 0801 	adds.w	r8, r2, r1
 8007700:	4629      	mov	r1, r5
 8007702:	eb43 0901 	adc.w	r9, r3, r1
 8007706:	f04f 0200 	mov.w	r2, #0
 800770a:	f04f 0300 	mov.w	r3, #0
 800770e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007712:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007716:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800771a:	4690      	mov	r8, r2
 800771c:	4699      	mov	r9, r3
 800771e:	4623      	mov	r3, r4
 8007720:	eb18 0303 	adds.w	r3, r8, r3
 8007724:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007728:	462b      	mov	r3, r5
 800772a:	eb49 0303 	adc.w	r3, r9, r3
 800772e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800773e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007742:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007746:	460b      	mov	r3, r1
 8007748:	18db      	adds	r3, r3, r3
 800774a:	653b      	str	r3, [r7, #80]	@ 0x50
 800774c:	4613      	mov	r3, r2
 800774e:	eb42 0303 	adc.w	r3, r2, r3
 8007752:	657b      	str	r3, [r7, #84]	@ 0x54
 8007754:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007758:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800775c:	f7f9 fa94 	bl	8000c88 <__aeabi_uldivmod>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4b61      	ldr	r3, [pc, #388]	@ (80078ec <UART_SetConfig+0x2d4>)
 8007766:	fba3 2302 	umull	r2, r3, r3, r2
 800776a:	095b      	lsrs	r3, r3, #5
 800776c:	011c      	lsls	r4, r3, #4
 800776e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007772:	2200      	movs	r2, #0
 8007774:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007778:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800777c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007780:	4642      	mov	r2, r8
 8007782:	464b      	mov	r3, r9
 8007784:	1891      	adds	r1, r2, r2
 8007786:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007788:	415b      	adcs	r3, r3
 800778a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800778c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007790:	4641      	mov	r1, r8
 8007792:	eb12 0a01 	adds.w	sl, r2, r1
 8007796:	4649      	mov	r1, r9
 8007798:	eb43 0b01 	adc.w	fp, r3, r1
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80077a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80077ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077b0:	4692      	mov	sl, r2
 80077b2:	469b      	mov	fp, r3
 80077b4:	4643      	mov	r3, r8
 80077b6:	eb1a 0303 	adds.w	r3, sl, r3
 80077ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077be:	464b      	mov	r3, r9
 80077c0:	eb4b 0303 	adc.w	r3, fp, r3
 80077c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80077c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80077d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80077dc:	460b      	mov	r3, r1
 80077de:	18db      	adds	r3, r3, r3
 80077e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80077e2:	4613      	mov	r3, r2
 80077e4:	eb42 0303 	adc.w	r3, r2, r3
 80077e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80077ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80077ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80077f2:	f7f9 fa49 	bl	8000c88 <__aeabi_uldivmod>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	4611      	mov	r1, r2
 80077fc:	4b3b      	ldr	r3, [pc, #236]	@ (80078ec <UART_SetConfig+0x2d4>)
 80077fe:	fba3 2301 	umull	r2, r3, r3, r1
 8007802:	095b      	lsrs	r3, r3, #5
 8007804:	2264      	movs	r2, #100	@ 0x64
 8007806:	fb02 f303 	mul.w	r3, r2, r3
 800780a:	1acb      	subs	r3, r1, r3
 800780c:	00db      	lsls	r3, r3, #3
 800780e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007812:	4b36      	ldr	r3, [pc, #216]	@ (80078ec <UART_SetConfig+0x2d4>)
 8007814:	fba3 2302 	umull	r2, r3, r3, r2
 8007818:	095b      	lsrs	r3, r3, #5
 800781a:	005b      	lsls	r3, r3, #1
 800781c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007820:	441c      	add	r4, r3
 8007822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007826:	2200      	movs	r2, #0
 8007828:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800782c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007830:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007834:	4642      	mov	r2, r8
 8007836:	464b      	mov	r3, r9
 8007838:	1891      	adds	r1, r2, r2
 800783a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800783c:	415b      	adcs	r3, r3
 800783e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007840:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007844:	4641      	mov	r1, r8
 8007846:	1851      	adds	r1, r2, r1
 8007848:	6339      	str	r1, [r7, #48]	@ 0x30
 800784a:	4649      	mov	r1, r9
 800784c:	414b      	adcs	r3, r1
 800784e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007850:	f04f 0200 	mov.w	r2, #0
 8007854:	f04f 0300 	mov.w	r3, #0
 8007858:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800785c:	4659      	mov	r1, fp
 800785e:	00cb      	lsls	r3, r1, #3
 8007860:	4651      	mov	r1, sl
 8007862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007866:	4651      	mov	r1, sl
 8007868:	00ca      	lsls	r2, r1, #3
 800786a:	4610      	mov	r0, r2
 800786c:	4619      	mov	r1, r3
 800786e:	4603      	mov	r3, r0
 8007870:	4642      	mov	r2, r8
 8007872:	189b      	adds	r3, r3, r2
 8007874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007878:	464b      	mov	r3, r9
 800787a:	460a      	mov	r2, r1
 800787c:	eb42 0303 	adc.w	r3, r2, r3
 8007880:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007890:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007894:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007898:	460b      	mov	r3, r1
 800789a:	18db      	adds	r3, r3, r3
 800789c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800789e:	4613      	mov	r3, r2
 80078a0:	eb42 0303 	adc.w	r3, r2, r3
 80078a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80078aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80078ae:	f7f9 f9eb 	bl	8000c88 <__aeabi_uldivmod>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4b0d      	ldr	r3, [pc, #52]	@ (80078ec <UART_SetConfig+0x2d4>)
 80078b8:	fba3 1302 	umull	r1, r3, r3, r2
 80078bc:	095b      	lsrs	r3, r3, #5
 80078be:	2164      	movs	r1, #100	@ 0x64
 80078c0:	fb01 f303 	mul.w	r3, r1, r3
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	3332      	adds	r3, #50	@ 0x32
 80078ca:	4a08      	ldr	r2, [pc, #32]	@ (80078ec <UART_SetConfig+0x2d4>)
 80078cc:	fba2 2303 	umull	r2, r3, r2, r3
 80078d0:	095b      	lsrs	r3, r3, #5
 80078d2:	f003 0207 	and.w	r2, r3, #7
 80078d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4422      	add	r2, r4
 80078de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078e0:	e106      	b.n	8007af0 <UART_SetConfig+0x4d8>
 80078e2:	bf00      	nop
 80078e4:	40011000 	.word	0x40011000
 80078e8:	40011400 	.word	0x40011400
 80078ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078f4:	2200      	movs	r2, #0
 80078f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80078fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80078fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007902:	4642      	mov	r2, r8
 8007904:	464b      	mov	r3, r9
 8007906:	1891      	adds	r1, r2, r2
 8007908:	6239      	str	r1, [r7, #32]
 800790a:	415b      	adcs	r3, r3
 800790c:	627b      	str	r3, [r7, #36]	@ 0x24
 800790e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007912:	4641      	mov	r1, r8
 8007914:	1854      	adds	r4, r2, r1
 8007916:	4649      	mov	r1, r9
 8007918:	eb43 0501 	adc.w	r5, r3, r1
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	00eb      	lsls	r3, r5, #3
 8007926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800792a:	00e2      	lsls	r2, r4, #3
 800792c:	4614      	mov	r4, r2
 800792e:	461d      	mov	r5, r3
 8007930:	4643      	mov	r3, r8
 8007932:	18e3      	adds	r3, r4, r3
 8007934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007938:	464b      	mov	r3, r9
 800793a:	eb45 0303 	adc.w	r3, r5, r3
 800793e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800794e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	f04f 0300 	mov.w	r3, #0
 800795a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800795e:	4629      	mov	r1, r5
 8007960:	008b      	lsls	r3, r1, #2
 8007962:	4621      	mov	r1, r4
 8007964:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007968:	4621      	mov	r1, r4
 800796a:	008a      	lsls	r2, r1, #2
 800796c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007970:	f7f9 f98a 	bl	8000c88 <__aeabi_uldivmod>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4b60      	ldr	r3, [pc, #384]	@ (8007afc <UART_SetConfig+0x4e4>)
 800797a:	fba3 2302 	umull	r2, r3, r3, r2
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	011c      	lsls	r4, r3, #4
 8007982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007986:	2200      	movs	r2, #0
 8007988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800798c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007990:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007994:	4642      	mov	r2, r8
 8007996:	464b      	mov	r3, r9
 8007998:	1891      	adds	r1, r2, r2
 800799a:	61b9      	str	r1, [r7, #24]
 800799c:	415b      	adcs	r3, r3
 800799e:	61fb      	str	r3, [r7, #28]
 80079a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079a4:	4641      	mov	r1, r8
 80079a6:	1851      	adds	r1, r2, r1
 80079a8:	6139      	str	r1, [r7, #16]
 80079aa:	4649      	mov	r1, r9
 80079ac:	414b      	adcs	r3, r1
 80079ae:	617b      	str	r3, [r7, #20]
 80079b0:	f04f 0200 	mov.w	r2, #0
 80079b4:	f04f 0300 	mov.w	r3, #0
 80079b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079bc:	4659      	mov	r1, fp
 80079be:	00cb      	lsls	r3, r1, #3
 80079c0:	4651      	mov	r1, sl
 80079c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079c6:	4651      	mov	r1, sl
 80079c8:	00ca      	lsls	r2, r1, #3
 80079ca:	4610      	mov	r0, r2
 80079cc:	4619      	mov	r1, r3
 80079ce:	4603      	mov	r3, r0
 80079d0:	4642      	mov	r2, r8
 80079d2:	189b      	adds	r3, r3, r2
 80079d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079d8:	464b      	mov	r3, r9
 80079da:	460a      	mov	r2, r1
 80079dc:	eb42 0303 	adc.w	r3, r2, r3
 80079e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	f04f 0300 	mov.w	r3, #0
 80079f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80079fc:	4649      	mov	r1, r9
 80079fe:	008b      	lsls	r3, r1, #2
 8007a00:	4641      	mov	r1, r8
 8007a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a06:	4641      	mov	r1, r8
 8007a08:	008a      	lsls	r2, r1, #2
 8007a0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007a0e:	f7f9 f93b 	bl	8000c88 <__aeabi_uldivmod>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4611      	mov	r1, r2
 8007a18:	4b38      	ldr	r3, [pc, #224]	@ (8007afc <UART_SetConfig+0x4e4>)
 8007a1a:	fba3 2301 	umull	r2, r3, r3, r1
 8007a1e:	095b      	lsrs	r3, r3, #5
 8007a20:	2264      	movs	r2, #100	@ 0x64
 8007a22:	fb02 f303 	mul.w	r3, r2, r3
 8007a26:	1acb      	subs	r3, r1, r3
 8007a28:	011b      	lsls	r3, r3, #4
 8007a2a:	3332      	adds	r3, #50	@ 0x32
 8007a2c:	4a33      	ldr	r2, [pc, #204]	@ (8007afc <UART_SetConfig+0x4e4>)
 8007a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a32:	095b      	lsrs	r3, r3, #5
 8007a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a38:	441c      	add	r4, r3
 8007a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a3e:	2200      	movs	r2, #0
 8007a40:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a42:	677a      	str	r2, [r7, #116]	@ 0x74
 8007a44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007a48:	4642      	mov	r2, r8
 8007a4a:	464b      	mov	r3, r9
 8007a4c:	1891      	adds	r1, r2, r2
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	415b      	adcs	r3, r3
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a58:	4641      	mov	r1, r8
 8007a5a:	1851      	adds	r1, r2, r1
 8007a5c:	6039      	str	r1, [r7, #0]
 8007a5e:	4649      	mov	r1, r9
 8007a60:	414b      	adcs	r3, r1
 8007a62:	607b      	str	r3, [r7, #4]
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a70:	4659      	mov	r1, fp
 8007a72:	00cb      	lsls	r3, r1, #3
 8007a74:	4651      	mov	r1, sl
 8007a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a7a:	4651      	mov	r1, sl
 8007a7c:	00ca      	lsls	r2, r1, #3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	4619      	mov	r1, r3
 8007a82:	4603      	mov	r3, r0
 8007a84:	4642      	mov	r2, r8
 8007a86:	189b      	adds	r3, r3, r2
 8007a88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a8a:	464b      	mov	r3, r9
 8007a8c:	460a      	mov	r2, r1
 8007a8e:	eb42 0303 	adc.w	r3, r2, r3
 8007a92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007aa0:	f04f 0200 	mov.w	r2, #0
 8007aa4:	f04f 0300 	mov.w	r3, #0
 8007aa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007aac:	4649      	mov	r1, r9
 8007aae:	008b      	lsls	r3, r1, #2
 8007ab0:	4641      	mov	r1, r8
 8007ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ab6:	4641      	mov	r1, r8
 8007ab8:	008a      	lsls	r2, r1, #2
 8007aba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007abe:	f7f9 f8e3 	bl	8000c88 <__aeabi_uldivmod>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8007afc <UART_SetConfig+0x4e4>)
 8007ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	2164      	movs	r1, #100	@ 0x64
 8007ad0:	fb01 f303 	mul.w	r3, r1, r3
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	011b      	lsls	r3, r3, #4
 8007ad8:	3332      	adds	r3, #50	@ 0x32
 8007ada:	4a08      	ldr	r2, [pc, #32]	@ (8007afc <UART_SetConfig+0x4e4>)
 8007adc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae0:	095b      	lsrs	r3, r3, #5
 8007ae2:	f003 020f 	and.w	r2, r3, #15
 8007ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4422      	add	r2, r4
 8007aee:	609a      	str	r2, [r3, #8]
}
 8007af0:	bf00      	nop
 8007af2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007af6:	46bd      	mov	sp, r7
 8007af8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007afc:	51eb851f 	.word	0x51eb851f

08007b00 <atof>:
 8007b00:	2100      	movs	r1, #0
 8007b02:	f000 be0f 	b.w	8008724 <strtod>

08007b06 <atoi>:
 8007b06:	220a      	movs	r2, #10
 8007b08:	2100      	movs	r1, #0
 8007b0a:	f000 be93 	b.w	8008834 <strtol>

08007b0e <sulp>:
 8007b0e:	b570      	push	{r4, r5, r6, lr}
 8007b10:	4604      	mov	r4, r0
 8007b12:	460d      	mov	r5, r1
 8007b14:	ec45 4b10 	vmov	d0, r4, r5
 8007b18:	4616      	mov	r6, r2
 8007b1a:	f003 fd5d 	bl	800b5d8 <__ulp>
 8007b1e:	ec51 0b10 	vmov	r0, r1, d0
 8007b22:	b17e      	cbz	r6, 8007b44 <sulp+0x36>
 8007b24:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	dd09      	ble.n	8007b44 <sulp+0x36>
 8007b30:	051b      	lsls	r3, r3, #20
 8007b32:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007b36:	2400      	movs	r4, #0
 8007b38:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007b3c:	4622      	mov	r2, r4
 8007b3e:	462b      	mov	r3, r5
 8007b40:	f7f8 fd5a 	bl	80005f8 <__aeabi_dmul>
 8007b44:	ec41 0b10 	vmov	d0, r0, r1
 8007b48:	bd70      	pop	{r4, r5, r6, pc}
 8007b4a:	0000      	movs	r0, r0
 8007b4c:	0000      	movs	r0, r0
	...

08007b50 <_strtod_l>:
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	b09f      	sub	sp, #124	@ 0x7c
 8007b56:	460c      	mov	r4, r1
 8007b58:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	921a      	str	r2, [sp, #104]	@ 0x68
 8007b5e:	9005      	str	r0, [sp, #20]
 8007b60:	f04f 0a00 	mov.w	sl, #0
 8007b64:	f04f 0b00 	mov.w	fp, #0
 8007b68:	460a      	mov	r2, r1
 8007b6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b6c:	7811      	ldrb	r1, [r2, #0]
 8007b6e:	292b      	cmp	r1, #43	@ 0x2b
 8007b70:	d04a      	beq.n	8007c08 <_strtod_l+0xb8>
 8007b72:	d838      	bhi.n	8007be6 <_strtod_l+0x96>
 8007b74:	290d      	cmp	r1, #13
 8007b76:	d832      	bhi.n	8007bde <_strtod_l+0x8e>
 8007b78:	2908      	cmp	r1, #8
 8007b7a:	d832      	bhi.n	8007be2 <_strtod_l+0x92>
 8007b7c:	2900      	cmp	r1, #0
 8007b7e:	d03b      	beq.n	8007bf8 <_strtod_l+0xa8>
 8007b80:	2200      	movs	r2, #0
 8007b82:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007b84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007b86:	782a      	ldrb	r2, [r5, #0]
 8007b88:	2a30      	cmp	r2, #48	@ 0x30
 8007b8a:	f040 80b3 	bne.w	8007cf4 <_strtod_l+0x1a4>
 8007b8e:	786a      	ldrb	r2, [r5, #1]
 8007b90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007b94:	2a58      	cmp	r2, #88	@ 0x58
 8007b96:	d16e      	bne.n	8007c76 <_strtod_l+0x126>
 8007b98:	9302      	str	r3, [sp, #8]
 8007b9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	4a8e      	ldr	r2, [pc, #568]	@ (8007ddc <_strtod_l+0x28c>)
 8007ba4:	9805      	ldr	r0, [sp, #20]
 8007ba6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007ba8:	a919      	add	r1, sp, #100	@ 0x64
 8007baa:	f002 fe07 	bl	800a7bc <__gethex>
 8007bae:	f010 060f 	ands.w	r6, r0, #15
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	d005      	beq.n	8007bc2 <_strtod_l+0x72>
 8007bb6:	2e06      	cmp	r6, #6
 8007bb8:	d128      	bne.n	8007c0c <_strtod_l+0xbc>
 8007bba:	3501      	adds	r5, #1
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9519      	str	r5, [sp, #100]	@ 0x64
 8007bc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f040 858e 	bne.w	80086e6 <_strtod_l+0xb96>
 8007bca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bcc:	b1cb      	cbz	r3, 8007c02 <_strtod_l+0xb2>
 8007bce:	4652      	mov	r2, sl
 8007bd0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007bd4:	ec43 2b10 	vmov	d0, r2, r3
 8007bd8:	b01f      	add	sp, #124	@ 0x7c
 8007bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bde:	2920      	cmp	r1, #32
 8007be0:	d1ce      	bne.n	8007b80 <_strtod_l+0x30>
 8007be2:	3201      	adds	r2, #1
 8007be4:	e7c1      	b.n	8007b6a <_strtod_l+0x1a>
 8007be6:	292d      	cmp	r1, #45	@ 0x2d
 8007be8:	d1ca      	bne.n	8007b80 <_strtod_l+0x30>
 8007bea:	2101      	movs	r1, #1
 8007bec:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007bee:	1c51      	adds	r1, r2, #1
 8007bf0:	9119      	str	r1, [sp, #100]	@ 0x64
 8007bf2:	7852      	ldrb	r2, [r2, #1]
 8007bf4:	2a00      	cmp	r2, #0
 8007bf6:	d1c5      	bne.n	8007b84 <_strtod_l+0x34>
 8007bf8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007bfa:	9419      	str	r4, [sp, #100]	@ 0x64
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f040 8570 	bne.w	80086e2 <_strtod_l+0xb92>
 8007c02:	4652      	mov	r2, sl
 8007c04:	465b      	mov	r3, fp
 8007c06:	e7e5      	b.n	8007bd4 <_strtod_l+0x84>
 8007c08:	2100      	movs	r1, #0
 8007c0a:	e7ef      	b.n	8007bec <_strtod_l+0x9c>
 8007c0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c0e:	b13a      	cbz	r2, 8007c20 <_strtod_l+0xd0>
 8007c10:	2135      	movs	r1, #53	@ 0x35
 8007c12:	a81c      	add	r0, sp, #112	@ 0x70
 8007c14:	f003 fdda 	bl	800b7cc <__copybits>
 8007c18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c1a:	9805      	ldr	r0, [sp, #20]
 8007c1c:	f003 f9a8 	bl	800af70 <_Bfree>
 8007c20:	3e01      	subs	r6, #1
 8007c22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007c24:	2e04      	cmp	r6, #4
 8007c26:	d806      	bhi.n	8007c36 <_strtod_l+0xe6>
 8007c28:	e8df f006 	tbb	[pc, r6]
 8007c2c:	201d0314 	.word	0x201d0314
 8007c30:	14          	.byte	0x14
 8007c31:	00          	.byte	0x00
 8007c32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007c36:	05e1      	lsls	r1, r4, #23
 8007c38:	bf48      	it	mi
 8007c3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007c3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c42:	0d1b      	lsrs	r3, r3, #20
 8007c44:	051b      	lsls	r3, r3, #20
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1bb      	bne.n	8007bc2 <_strtod_l+0x72>
 8007c4a:	f001 fe4f 	bl	80098ec <__errno>
 8007c4e:	2322      	movs	r3, #34	@ 0x22
 8007c50:	6003      	str	r3, [r0, #0]
 8007c52:	e7b6      	b.n	8007bc2 <_strtod_l+0x72>
 8007c54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007c58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007c5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007c60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007c64:	e7e7      	b.n	8007c36 <_strtod_l+0xe6>
 8007c66:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007de4 <_strtod_l+0x294>
 8007c6a:	e7e4      	b.n	8007c36 <_strtod_l+0xe6>
 8007c6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007c70:	f04f 3aff 	mov.w	sl, #4294967295
 8007c74:	e7df      	b.n	8007c36 <_strtod_l+0xe6>
 8007c76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c7c:	785b      	ldrb	r3, [r3, #1]
 8007c7e:	2b30      	cmp	r3, #48	@ 0x30
 8007c80:	d0f9      	beq.n	8007c76 <_strtod_l+0x126>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d09d      	beq.n	8007bc2 <_strtod_l+0x72>
 8007c86:	2301      	movs	r3, #1
 8007c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c8e:	2300      	movs	r3, #0
 8007c90:	9308      	str	r3, [sp, #32]
 8007c92:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c94:	461f      	mov	r7, r3
 8007c96:	220a      	movs	r2, #10
 8007c98:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007c9a:	7805      	ldrb	r5, [r0, #0]
 8007c9c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007ca0:	b2d9      	uxtb	r1, r3
 8007ca2:	2909      	cmp	r1, #9
 8007ca4:	d928      	bls.n	8007cf8 <_strtod_l+0x1a8>
 8007ca6:	494e      	ldr	r1, [pc, #312]	@ (8007de0 <_strtod_l+0x290>)
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f001 fd66 	bl	800977a <strncmp>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d032      	beq.n	8007d18 <_strtod_l+0x1c8>
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	462a      	mov	r2, r5
 8007cb6:	4681      	mov	r9, r0
 8007cb8:	463d      	mov	r5, r7
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2a65      	cmp	r2, #101	@ 0x65
 8007cbe:	d001      	beq.n	8007cc4 <_strtod_l+0x174>
 8007cc0:	2a45      	cmp	r2, #69	@ 0x45
 8007cc2:	d114      	bne.n	8007cee <_strtod_l+0x19e>
 8007cc4:	b91d      	cbnz	r5, 8007cce <_strtod_l+0x17e>
 8007cc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cc8:	4302      	orrs	r2, r0
 8007cca:	d095      	beq.n	8007bf8 <_strtod_l+0xa8>
 8007ccc:	2500      	movs	r5, #0
 8007cce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007cd0:	1c62      	adds	r2, r4, #1
 8007cd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cd4:	7862      	ldrb	r2, [r4, #1]
 8007cd6:	2a2b      	cmp	r2, #43	@ 0x2b
 8007cd8:	d077      	beq.n	8007dca <_strtod_l+0x27a>
 8007cda:	2a2d      	cmp	r2, #45	@ 0x2d
 8007cdc:	d07b      	beq.n	8007dd6 <_strtod_l+0x286>
 8007cde:	f04f 0c00 	mov.w	ip, #0
 8007ce2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007ce6:	2909      	cmp	r1, #9
 8007ce8:	f240 8082 	bls.w	8007df0 <_strtod_l+0x2a0>
 8007cec:	9419      	str	r4, [sp, #100]	@ 0x64
 8007cee:	f04f 0800 	mov.w	r8, #0
 8007cf2:	e0a2      	b.n	8007e3a <_strtod_l+0x2ea>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	e7c7      	b.n	8007c88 <_strtod_l+0x138>
 8007cf8:	2f08      	cmp	r7, #8
 8007cfa:	bfd5      	itete	le
 8007cfc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007cfe:	9908      	ldrgt	r1, [sp, #32]
 8007d00:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d04:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007d08:	f100 0001 	add.w	r0, r0, #1
 8007d0c:	bfd4      	ite	le
 8007d0e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007d10:	9308      	strgt	r3, [sp, #32]
 8007d12:	3701      	adds	r7, #1
 8007d14:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d16:	e7bf      	b.n	8007c98 <_strtod_l+0x148>
 8007d18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d1e:	785a      	ldrb	r2, [r3, #1]
 8007d20:	b37f      	cbz	r7, 8007d82 <_strtod_l+0x232>
 8007d22:	4681      	mov	r9, r0
 8007d24:	463d      	mov	r5, r7
 8007d26:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007d2a:	2b09      	cmp	r3, #9
 8007d2c:	d912      	bls.n	8007d54 <_strtod_l+0x204>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e7c4      	b.n	8007cbc <_strtod_l+0x16c>
 8007d32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d38:	785a      	ldrb	r2, [r3, #1]
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	2a30      	cmp	r2, #48	@ 0x30
 8007d3e:	d0f8      	beq.n	8007d32 <_strtod_l+0x1e2>
 8007d40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	f200 84d3 	bhi.w	80086f0 <_strtod_l+0xba0>
 8007d4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d4e:	4681      	mov	r9, r0
 8007d50:	2000      	movs	r0, #0
 8007d52:	4605      	mov	r5, r0
 8007d54:	3a30      	subs	r2, #48	@ 0x30
 8007d56:	f100 0301 	add.w	r3, r0, #1
 8007d5a:	d02a      	beq.n	8007db2 <_strtod_l+0x262>
 8007d5c:	4499      	add	r9, r3
 8007d5e:	eb00 0c05 	add.w	ip, r0, r5
 8007d62:	462b      	mov	r3, r5
 8007d64:	210a      	movs	r1, #10
 8007d66:	4563      	cmp	r3, ip
 8007d68:	d10d      	bne.n	8007d86 <_strtod_l+0x236>
 8007d6a:	1c69      	adds	r1, r5, #1
 8007d6c:	4401      	add	r1, r0
 8007d6e:	4428      	add	r0, r5
 8007d70:	2808      	cmp	r0, #8
 8007d72:	dc16      	bgt.n	8007da2 <_strtod_l+0x252>
 8007d74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007d76:	230a      	movs	r3, #10
 8007d78:	fb03 2300 	mla	r3, r3, r0, r2
 8007d7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d7e:	2300      	movs	r3, #0
 8007d80:	e018      	b.n	8007db4 <_strtod_l+0x264>
 8007d82:	4638      	mov	r0, r7
 8007d84:	e7da      	b.n	8007d3c <_strtod_l+0x1ec>
 8007d86:	2b08      	cmp	r3, #8
 8007d88:	f103 0301 	add.w	r3, r3, #1
 8007d8c:	dc03      	bgt.n	8007d96 <_strtod_l+0x246>
 8007d8e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007d90:	434e      	muls	r6, r1
 8007d92:	960a      	str	r6, [sp, #40]	@ 0x28
 8007d94:	e7e7      	b.n	8007d66 <_strtod_l+0x216>
 8007d96:	2b10      	cmp	r3, #16
 8007d98:	bfde      	ittt	le
 8007d9a:	9e08      	ldrle	r6, [sp, #32]
 8007d9c:	434e      	mulle	r6, r1
 8007d9e:	9608      	strle	r6, [sp, #32]
 8007da0:	e7e1      	b.n	8007d66 <_strtod_l+0x216>
 8007da2:	280f      	cmp	r0, #15
 8007da4:	dceb      	bgt.n	8007d7e <_strtod_l+0x22e>
 8007da6:	9808      	ldr	r0, [sp, #32]
 8007da8:	230a      	movs	r3, #10
 8007daa:	fb03 2300 	mla	r3, r3, r0, r2
 8007dae:	9308      	str	r3, [sp, #32]
 8007db0:	e7e5      	b.n	8007d7e <_strtod_l+0x22e>
 8007db2:	4629      	mov	r1, r5
 8007db4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007db6:	1c50      	adds	r0, r2, #1
 8007db8:	9019      	str	r0, [sp, #100]	@ 0x64
 8007dba:	7852      	ldrb	r2, [r2, #1]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	460d      	mov	r5, r1
 8007dc0:	e7b1      	b.n	8007d26 <_strtod_l+0x1d6>
 8007dc2:	f04f 0900 	mov.w	r9, #0
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e77d      	b.n	8007cc6 <_strtod_l+0x176>
 8007dca:	f04f 0c00 	mov.w	ip, #0
 8007dce:	1ca2      	adds	r2, r4, #2
 8007dd0:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dd2:	78a2      	ldrb	r2, [r4, #2]
 8007dd4:	e785      	b.n	8007ce2 <_strtod_l+0x192>
 8007dd6:	f04f 0c01 	mov.w	ip, #1
 8007dda:	e7f8      	b.n	8007dce <_strtod_l+0x27e>
 8007ddc:	0800daa0 	.word	0x0800daa0
 8007de0:	0800da88 	.word	0x0800da88
 8007de4:	7ff00000 	.word	0x7ff00000
 8007de8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007dea:	1c51      	adds	r1, r2, #1
 8007dec:	9119      	str	r1, [sp, #100]	@ 0x64
 8007dee:	7852      	ldrb	r2, [r2, #1]
 8007df0:	2a30      	cmp	r2, #48	@ 0x30
 8007df2:	d0f9      	beq.n	8007de8 <_strtod_l+0x298>
 8007df4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007df8:	2908      	cmp	r1, #8
 8007dfa:	f63f af78 	bhi.w	8007cee <_strtod_l+0x19e>
 8007dfe:	3a30      	subs	r2, #48	@ 0x30
 8007e00:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e04:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007e06:	f04f 080a 	mov.w	r8, #10
 8007e0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e0c:	1c56      	adds	r6, r2, #1
 8007e0e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007e10:	7852      	ldrb	r2, [r2, #1]
 8007e12:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007e16:	f1be 0f09 	cmp.w	lr, #9
 8007e1a:	d939      	bls.n	8007e90 <_strtod_l+0x340>
 8007e1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007e1e:	1a76      	subs	r6, r6, r1
 8007e20:	2e08      	cmp	r6, #8
 8007e22:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007e26:	dc03      	bgt.n	8007e30 <_strtod_l+0x2e0>
 8007e28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007e2a:	4588      	cmp	r8, r1
 8007e2c:	bfa8      	it	ge
 8007e2e:	4688      	movge	r8, r1
 8007e30:	f1bc 0f00 	cmp.w	ip, #0
 8007e34:	d001      	beq.n	8007e3a <_strtod_l+0x2ea>
 8007e36:	f1c8 0800 	rsb	r8, r8, #0
 8007e3a:	2d00      	cmp	r5, #0
 8007e3c:	d14e      	bne.n	8007edc <_strtod_l+0x38c>
 8007e3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e40:	4308      	orrs	r0, r1
 8007e42:	f47f aebe 	bne.w	8007bc2 <_strtod_l+0x72>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f47f aed6 	bne.w	8007bf8 <_strtod_l+0xa8>
 8007e4c:	2a69      	cmp	r2, #105	@ 0x69
 8007e4e:	d028      	beq.n	8007ea2 <_strtod_l+0x352>
 8007e50:	dc25      	bgt.n	8007e9e <_strtod_l+0x34e>
 8007e52:	2a49      	cmp	r2, #73	@ 0x49
 8007e54:	d025      	beq.n	8007ea2 <_strtod_l+0x352>
 8007e56:	2a4e      	cmp	r2, #78	@ 0x4e
 8007e58:	f47f aece 	bne.w	8007bf8 <_strtod_l+0xa8>
 8007e5c:	499b      	ldr	r1, [pc, #620]	@ (80080cc <_strtod_l+0x57c>)
 8007e5e:	a819      	add	r0, sp, #100	@ 0x64
 8007e60:	f002 fece 	bl	800ac00 <__match>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	f43f aec7 	beq.w	8007bf8 <_strtod_l+0xa8>
 8007e6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b28      	cmp	r3, #40	@ 0x28
 8007e70:	d12e      	bne.n	8007ed0 <_strtod_l+0x380>
 8007e72:	4997      	ldr	r1, [pc, #604]	@ (80080d0 <_strtod_l+0x580>)
 8007e74:	aa1c      	add	r2, sp, #112	@ 0x70
 8007e76:	a819      	add	r0, sp, #100	@ 0x64
 8007e78:	f002 fed6 	bl	800ac28 <__hexnan>
 8007e7c:	2805      	cmp	r0, #5
 8007e7e:	d127      	bne.n	8007ed0 <_strtod_l+0x380>
 8007e80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e82:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007e86:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007e8a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007e8e:	e698      	b.n	8007bc2 <_strtod_l+0x72>
 8007e90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007e92:	fb08 2101 	mla	r1, r8, r1, r2
 8007e96:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007e9a:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e9c:	e7b5      	b.n	8007e0a <_strtod_l+0x2ba>
 8007e9e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007ea0:	e7da      	b.n	8007e58 <_strtod_l+0x308>
 8007ea2:	498c      	ldr	r1, [pc, #560]	@ (80080d4 <_strtod_l+0x584>)
 8007ea4:	a819      	add	r0, sp, #100	@ 0x64
 8007ea6:	f002 feab 	bl	800ac00 <__match>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	f43f aea4 	beq.w	8007bf8 <_strtod_l+0xa8>
 8007eb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007eb2:	4989      	ldr	r1, [pc, #548]	@ (80080d8 <_strtod_l+0x588>)
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	a819      	add	r0, sp, #100	@ 0x64
 8007eb8:	9319      	str	r3, [sp, #100]	@ 0x64
 8007eba:	f002 fea1 	bl	800ac00 <__match>
 8007ebe:	b910      	cbnz	r0, 8007ec6 <_strtod_l+0x376>
 8007ec0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	9319      	str	r3, [sp, #100]	@ 0x64
 8007ec6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80080e8 <_strtod_l+0x598>
 8007eca:	f04f 0a00 	mov.w	sl, #0
 8007ece:	e678      	b.n	8007bc2 <_strtod_l+0x72>
 8007ed0:	4882      	ldr	r0, [pc, #520]	@ (80080dc <_strtod_l+0x58c>)
 8007ed2:	f001 fd49 	bl	8009968 <nan>
 8007ed6:	ec5b ab10 	vmov	sl, fp, d0
 8007eda:	e672      	b.n	8007bc2 <_strtod_l+0x72>
 8007edc:	eba8 0309 	sub.w	r3, r8, r9
 8007ee0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ee4:	2f00      	cmp	r7, #0
 8007ee6:	bf08      	it	eq
 8007ee8:	462f      	moveq	r7, r5
 8007eea:	2d10      	cmp	r5, #16
 8007eec:	462c      	mov	r4, r5
 8007eee:	bfa8      	it	ge
 8007ef0:	2410      	movge	r4, #16
 8007ef2:	f7f8 fb07 	bl	8000504 <__aeabi_ui2d>
 8007ef6:	2d09      	cmp	r5, #9
 8007ef8:	4682      	mov	sl, r0
 8007efa:	468b      	mov	fp, r1
 8007efc:	dc13      	bgt.n	8007f26 <_strtod_l+0x3d6>
 8007efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f43f ae5e 	beq.w	8007bc2 <_strtod_l+0x72>
 8007f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f08:	dd78      	ble.n	8007ffc <_strtod_l+0x4ac>
 8007f0a:	2b16      	cmp	r3, #22
 8007f0c:	dc5f      	bgt.n	8007fce <_strtod_l+0x47e>
 8007f0e:	4974      	ldr	r1, [pc, #464]	@ (80080e0 <_strtod_l+0x590>)
 8007f10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f18:	4652      	mov	r2, sl
 8007f1a:	465b      	mov	r3, fp
 8007f1c:	f7f8 fb6c 	bl	80005f8 <__aeabi_dmul>
 8007f20:	4682      	mov	sl, r0
 8007f22:	468b      	mov	fp, r1
 8007f24:	e64d      	b.n	8007bc2 <_strtod_l+0x72>
 8007f26:	4b6e      	ldr	r3, [pc, #440]	@ (80080e0 <_strtod_l+0x590>)
 8007f28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007f30:	f7f8 fb62 	bl	80005f8 <__aeabi_dmul>
 8007f34:	4682      	mov	sl, r0
 8007f36:	9808      	ldr	r0, [sp, #32]
 8007f38:	468b      	mov	fp, r1
 8007f3a:	f7f8 fae3 	bl	8000504 <__aeabi_ui2d>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4650      	mov	r0, sl
 8007f44:	4659      	mov	r1, fp
 8007f46:	f7f8 f9a1 	bl	800028c <__adddf3>
 8007f4a:	2d0f      	cmp	r5, #15
 8007f4c:	4682      	mov	sl, r0
 8007f4e:	468b      	mov	fp, r1
 8007f50:	ddd5      	ble.n	8007efe <_strtod_l+0x3ae>
 8007f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f54:	1b2c      	subs	r4, r5, r4
 8007f56:	441c      	add	r4, r3
 8007f58:	2c00      	cmp	r4, #0
 8007f5a:	f340 8096 	ble.w	800808a <_strtod_l+0x53a>
 8007f5e:	f014 030f 	ands.w	r3, r4, #15
 8007f62:	d00a      	beq.n	8007f7a <_strtod_l+0x42a>
 8007f64:	495e      	ldr	r1, [pc, #376]	@ (80080e0 <_strtod_l+0x590>)
 8007f66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f6a:	4652      	mov	r2, sl
 8007f6c:	465b      	mov	r3, fp
 8007f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f72:	f7f8 fb41 	bl	80005f8 <__aeabi_dmul>
 8007f76:	4682      	mov	sl, r0
 8007f78:	468b      	mov	fp, r1
 8007f7a:	f034 040f 	bics.w	r4, r4, #15
 8007f7e:	d073      	beq.n	8008068 <_strtod_l+0x518>
 8007f80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007f84:	dd48      	ble.n	8008018 <_strtod_l+0x4c8>
 8007f86:	2400      	movs	r4, #0
 8007f88:	46a0      	mov	r8, r4
 8007f8a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007f8c:	46a1      	mov	r9, r4
 8007f8e:	9a05      	ldr	r2, [sp, #20]
 8007f90:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80080e8 <_strtod_l+0x598>
 8007f94:	2322      	movs	r3, #34	@ 0x22
 8007f96:	6013      	str	r3, [r2, #0]
 8007f98:	f04f 0a00 	mov.w	sl, #0
 8007f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f43f ae0f 	beq.w	8007bc2 <_strtod_l+0x72>
 8007fa4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fa6:	9805      	ldr	r0, [sp, #20]
 8007fa8:	f002 ffe2 	bl	800af70 <_Bfree>
 8007fac:	9805      	ldr	r0, [sp, #20]
 8007fae:	4649      	mov	r1, r9
 8007fb0:	f002 ffde 	bl	800af70 <_Bfree>
 8007fb4:	9805      	ldr	r0, [sp, #20]
 8007fb6:	4641      	mov	r1, r8
 8007fb8:	f002 ffda 	bl	800af70 <_Bfree>
 8007fbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007fbe:	9805      	ldr	r0, [sp, #20]
 8007fc0:	f002 ffd6 	bl	800af70 <_Bfree>
 8007fc4:	9805      	ldr	r0, [sp, #20]
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	f002 ffd2 	bl	800af70 <_Bfree>
 8007fcc:	e5f9      	b.n	8007bc2 <_strtod_l+0x72>
 8007fce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fd0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	dbbc      	blt.n	8007f52 <_strtod_l+0x402>
 8007fd8:	4c41      	ldr	r4, [pc, #260]	@ (80080e0 <_strtod_l+0x590>)
 8007fda:	f1c5 050f 	rsb	r5, r5, #15
 8007fde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007fe2:	4652      	mov	r2, sl
 8007fe4:	465b      	mov	r3, fp
 8007fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fea:	f7f8 fb05 	bl	80005f8 <__aeabi_dmul>
 8007fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff0:	1b5d      	subs	r5, r3, r5
 8007ff2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007ff6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007ffa:	e78f      	b.n	8007f1c <_strtod_l+0x3cc>
 8007ffc:	3316      	adds	r3, #22
 8007ffe:	dba8      	blt.n	8007f52 <_strtod_l+0x402>
 8008000:	4b37      	ldr	r3, [pc, #220]	@ (80080e0 <_strtod_l+0x590>)
 8008002:	eba9 0808 	sub.w	r8, r9, r8
 8008006:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800800a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800800e:	4650      	mov	r0, sl
 8008010:	4659      	mov	r1, fp
 8008012:	f7f8 fc1b 	bl	800084c <__aeabi_ddiv>
 8008016:	e783      	b.n	8007f20 <_strtod_l+0x3d0>
 8008018:	4b32      	ldr	r3, [pc, #200]	@ (80080e4 <_strtod_l+0x594>)
 800801a:	9308      	str	r3, [sp, #32]
 800801c:	2300      	movs	r3, #0
 800801e:	1124      	asrs	r4, r4, #4
 8008020:	4650      	mov	r0, sl
 8008022:	4659      	mov	r1, fp
 8008024:	461e      	mov	r6, r3
 8008026:	2c01      	cmp	r4, #1
 8008028:	dc21      	bgt.n	800806e <_strtod_l+0x51e>
 800802a:	b10b      	cbz	r3, 8008030 <_strtod_l+0x4e0>
 800802c:	4682      	mov	sl, r0
 800802e:	468b      	mov	fp, r1
 8008030:	492c      	ldr	r1, [pc, #176]	@ (80080e4 <_strtod_l+0x594>)
 8008032:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008036:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800803a:	4652      	mov	r2, sl
 800803c:	465b      	mov	r3, fp
 800803e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008042:	f7f8 fad9 	bl	80005f8 <__aeabi_dmul>
 8008046:	4b28      	ldr	r3, [pc, #160]	@ (80080e8 <_strtod_l+0x598>)
 8008048:	460a      	mov	r2, r1
 800804a:	400b      	ands	r3, r1
 800804c:	4927      	ldr	r1, [pc, #156]	@ (80080ec <_strtod_l+0x59c>)
 800804e:	428b      	cmp	r3, r1
 8008050:	4682      	mov	sl, r0
 8008052:	d898      	bhi.n	8007f86 <_strtod_l+0x436>
 8008054:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008058:	428b      	cmp	r3, r1
 800805a:	bf86      	itte	hi
 800805c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80080f0 <_strtod_l+0x5a0>
 8008060:	f04f 3aff 	movhi.w	sl, #4294967295
 8008064:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008068:	2300      	movs	r3, #0
 800806a:	9308      	str	r3, [sp, #32]
 800806c:	e07a      	b.n	8008164 <_strtod_l+0x614>
 800806e:	07e2      	lsls	r2, r4, #31
 8008070:	d505      	bpl.n	800807e <_strtod_l+0x52e>
 8008072:	9b08      	ldr	r3, [sp, #32]
 8008074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008078:	f7f8 fabe 	bl	80005f8 <__aeabi_dmul>
 800807c:	2301      	movs	r3, #1
 800807e:	9a08      	ldr	r2, [sp, #32]
 8008080:	3208      	adds	r2, #8
 8008082:	3601      	adds	r6, #1
 8008084:	1064      	asrs	r4, r4, #1
 8008086:	9208      	str	r2, [sp, #32]
 8008088:	e7cd      	b.n	8008026 <_strtod_l+0x4d6>
 800808a:	d0ed      	beq.n	8008068 <_strtod_l+0x518>
 800808c:	4264      	negs	r4, r4
 800808e:	f014 020f 	ands.w	r2, r4, #15
 8008092:	d00a      	beq.n	80080aa <_strtod_l+0x55a>
 8008094:	4b12      	ldr	r3, [pc, #72]	@ (80080e0 <_strtod_l+0x590>)
 8008096:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800809a:	4650      	mov	r0, sl
 800809c:	4659      	mov	r1, fp
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	f7f8 fbd3 	bl	800084c <__aeabi_ddiv>
 80080a6:	4682      	mov	sl, r0
 80080a8:	468b      	mov	fp, r1
 80080aa:	1124      	asrs	r4, r4, #4
 80080ac:	d0dc      	beq.n	8008068 <_strtod_l+0x518>
 80080ae:	2c1f      	cmp	r4, #31
 80080b0:	dd20      	ble.n	80080f4 <_strtod_l+0x5a4>
 80080b2:	2400      	movs	r4, #0
 80080b4:	46a0      	mov	r8, r4
 80080b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80080b8:	46a1      	mov	r9, r4
 80080ba:	9a05      	ldr	r2, [sp, #20]
 80080bc:	2322      	movs	r3, #34	@ 0x22
 80080be:	f04f 0a00 	mov.w	sl, #0
 80080c2:	f04f 0b00 	mov.w	fp, #0
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	e768      	b.n	8007f9c <_strtod_l+0x44c>
 80080ca:	bf00      	nop
 80080cc:	0800dbee 	.word	0x0800dbee
 80080d0:	0800da8c 	.word	0x0800da8c
 80080d4:	0800dbe6 	.word	0x0800dbe6
 80080d8:	0800dcd2 	.word	0x0800dcd2
 80080dc:	0800dcce 	.word	0x0800dcce
 80080e0:	0800de38 	.word	0x0800de38
 80080e4:	0800de10 	.word	0x0800de10
 80080e8:	7ff00000 	.word	0x7ff00000
 80080ec:	7ca00000 	.word	0x7ca00000
 80080f0:	7fefffff 	.word	0x7fefffff
 80080f4:	f014 0310 	ands.w	r3, r4, #16
 80080f8:	bf18      	it	ne
 80080fa:	236a      	movne	r3, #106	@ 0x6a
 80080fc:	4ea9      	ldr	r6, [pc, #676]	@ (80083a4 <_strtod_l+0x854>)
 80080fe:	9308      	str	r3, [sp, #32]
 8008100:	4650      	mov	r0, sl
 8008102:	4659      	mov	r1, fp
 8008104:	2300      	movs	r3, #0
 8008106:	07e2      	lsls	r2, r4, #31
 8008108:	d504      	bpl.n	8008114 <_strtod_l+0x5c4>
 800810a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800810e:	f7f8 fa73 	bl	80005f8 <__aeabi_dmul>
 8008112:	2301      	movs	r3, #1
 8008114:	1064      	asrs	r4, r4, #1
 8008116:	f106 0608 	add.w	r6, r6, #8
 800811a:	d1f4      	bne.n	8008106 <_strtod_l+0x5b6>
 800811c:	b10b      	cbz	r3, 8008122 <_strtod_l+0x5d2>
 800811e:	4682      	mov	sl, r0
 8008120:	468b      	mov	fp, r1
 8008122:	9b08      	ldr	r3, [sp, #32]
 8008124:	b1b3      	cbz	r3, 8008154 <_strtod_l+0x604>
 8008126:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800812a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800812e:	2b00      	cmp	r3, #0
 8008130:	4659      	mov	r1, fp
 8008132:	dd0f      	ble.n	8008154 <_strtod_l+0x604>
 8008134:	2b1f      	cmp	r3, #31
 8008136:	dd55      	ble.n	80081e4 <_strtod_l+0x694>
 8008138:	2b34      	cmp	r3, #52	@ 0x34
 800813a:	bfde      	ittt	le
 800813c:	f04f 33ff 	movle.w	r3, #4294967295
 8008140:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008144:	4093      	lslle	r3, r2
 8008146:	f04f 0a00 	mov.w	sl, #0
 800814a:	bfcc      	ite	gt
 800814c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008150:	ea03 0b01 	andle.w	fp, r3, r1
 8008154:	2200      	movs	r2, #0
 8008156:	2300      	movs	r3, #0
 8008158:	4650      	mov	r0, sl
 800815a:	4659      	mov	r1, fp
 800815c:	f7f8 fcb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008160:	2800      	cmp	r0, #0
 8008162:	d1a6      	bne.n	80080b2 <_strtod_l+0x562>
 8008164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800816a:	9805      	ldr	r0, [sp, #20]
 800816c:	462b      	mov	r3, r5
 800816e:	463a      	mov	r2, r7
 8008170:	f002 ff66 	bl	800b040 <__s2b>
 8008174:	900a      	str	r0, [sp, #40]	@ 0x28
 8008176:	2800      	cmp	r0, #0
 8008178:	f43f af05 	beq.w	8007f86 <_strtod_l+0x436>
 800817c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800817e:	2a00      	cmp	r2, #0
 8008180:	eba9 0308 	sub.w	r3, r9, r8
 8008184:	bfa8      	it	ge
 8008186:	2300      	movge	r3, #0
 8008188:	9312      	str	r3, [sp, #72]	@ 0x48
 800818a:	2400      	movs	r4, #0
 800818c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008190:	9316      	str	r3, [sp, #88]	@ 0x58
 8008192:	46a0      	mov	r8, r4
 8008194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008196:	9805      	ldr	r0, [sp, #20]
 8008198:	6859      	ldr	r1, [r3, #4]
 800819a:	f002 fea9 	bl	800aef0 <_Balloc>
 800819e:	4681      	mov	r9, r0
 80081a0:	2800      	cmp	r0, #0
 80081a2:	f43f aef4 	beq.w	8007f8e <_strtod_l+0x43e>
 80081a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081a8:	691a      	ldr	r2, [r3, #16]
 80081aa:	3202      	adds	r2, #2
 80081ac:	f103 010c 	add.w	r1, r3, #12
 80081b0:	0092      	lsls	r2, r2, #2
 80081b2:	300c      	adds	r0, #12
 80081b4:	f001 fbc7 	bl	8009946 <memcpy>
 80081b8:	ec4b ab10 	vmov	d0, sl, fp
 80081bc:	9805      	ldr	r0, [sp, #20]
 80081be:	aa1c      	add	r2, sp, #112	@ 0x70
 80081c0:	a91b      	add	r1, sp, #108	@ 0x6c
 80081c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80081c6:	f003 fa77 	bl	800b6b8 <__d2b>
 80081ca:	901a      	str	r0, [sp, #104]	@ 0x68
 80081cc:	2800      	cmp	r0, #0
 80081ce:	f43f aede 	beq.w	8007f8e <_strtod_l+0x43e>
 80081d2:	9805      	ldr	r0, [sp, #20]
 80081d4:	2101      	movs	r1, #1
 80081d6:	f002 ffc9 	bl	800b16c <__i2b>
 80081da:	4680      	mov	r8, r0
 80081dc:	b948      	cbnz	r0, 80081f2 <_strtod_l+0x6a2>
 80081de:	f04f 0800 	mov.w	r8, #0
 80081e2:	e6d4      	b.n	8007f8e <_strtod_l+0x43e>
 80081e4:	f04f 32ff 	mov.w	r2, #4294967295
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	ea03 0a0a 	and.w	sl, r3, sl
 80081f0:	e7b0      	b.n	8008154 <_strtod_l+0x604>
 80081f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80081f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80081f6:	2d00      	cmp	r5, #0
 80081f8:	bfab      	itete	ge
 80081fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80081fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80081fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008200:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008202:	bfac      	ite	ge
 8008204:	18ef      	addge	r7, r5, r3
 8008206:	1b5e      	sublt	r6, r3, r5
 8008208:	9b08      	ldr	r3, [sp, #32]
 800820a:	1aed      	subs	r5, r5, r3
 800820c:	4415      	add	r5, r2
 800820e:	4b66      	ldr	r3, [pc, #408]	@ (80083a8 <_strtod_l+0x858>)
 8008210:	3d01      	subs	r5, #1
 8008212:	429d      	cmp	r5, r3
 8008214:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008218:	da50      	bge.n	80082bc <_strtod_l+0x76c>
 800821a:	1b5b      	subs	r3, r3, r5
 800821c:	2b1f      	cmp	r3, #31
 800821e:	eba2 0203 	sub.w	r2, r2, r3
 8008222:	f04f 0101 	mov.w	r1, #1
 8008226:	dc3d      	bgt.n	80082a4 <_strtod_l+0x754>
 8008228:	fa01 f303 	lsl.w	r3, r1, r3
 800822c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800822e:	2300      	movs	r3, #0
 8008230:	9310      	str	r3, [sp, #64]	@ 0x40
 8008232:	18bd      	adds	r5, r7, r2
 8008234:	9b08      	ldr	r3, [sp, #32]
 8008236:	42af      	cmp	r7, r5
 8008238:	4416      	add	r6, r2
 800823a:	441e      	add	r6, r3
 800823c:	463b      	mov	r3, r7
 800823e:	bfa8      	it	ge
 8008240:	462b      	movge	r3, r5
 8008242:	42b3      	cmp	r3, r6
 8008244:	bfa8      	it	ge
 8008246:	4633      	movge	r3, r6
 8008248:	2b00      	cmp	r3, #0
 800824a:	bfc2      	ittt	gt
 800824c:	1aed      	subgt	r5, r5, r3
 800824e:	1af6      	subgt	r6, r6, r3
 8008250:	1aff      	subgt	r7, r7, r3
 8008252:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008254:	2b00      	cmp	r3, #0
 8008256:	dd16      	ble.n	8008286 <_strtod_l+0x736>
 8008258:	4641      	mov	r1, r8
 800825a:	9805      	ldr	r0, [sp, #20]
 800825c:	461a      	mov	r2, r3
 800825e:	f003 f845 	bl	800b2ec <__pow5mult>
 8008262:	4680      	mov	r8, r0
 8008264:	2800      	cmp	r0, #0
 8008266:	d0ba      	beq.n	80081de <_strtod_l+0x68e>
 8008268:	4601      	mov	r1, r0
 800826a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800826c:	9805      	ldr	r0, [sp, #20]
 800826e:	f002 ff93 	bl	800b198 <__multiply>
 8008272:	900e      	str	r0, [sp, #56]	@ 0x38
 8008274:	2800      	cmp	r0, #0
 8008276:	f43f ae8a 	beq.w	8007f8e <_strtod_l+0x43e>
 800827a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800827c:	9805      	ldr	r0, [sp, #20]
 800827e:	f002 fe77 	bl	800af70 <_Bfree>
 8008282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008284:	931a      	str	r3, [sp, #104]	@ 0x68
 8008286:	2d00      	cmp	r5, #0
 8008288:	dc1d      	bgt.n	80082c6 <_strtod_l+0x776>
 800828a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800828c:	2b00      	cmp	r3, #0
 800828e:	dd23      	ble.n	80082d8 <_strtod_l+0x788>
 8008290:	4649      	mov	r1, r9
 8008292:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008294:	9805      	ldr	r0, [sp, #20]
 8008296:	f003 f829 	bl	800b2ec <__pow5mult>
 800829a:	4681      	mov	r9, r0
 800829c:	b9e0      	cbnz	r0, 80082d8 <_strtod_l+0x788>
 800829e:	f04f 0900 	mov.w	r9, #0
 80082a2:	e674      	b.n	8007f8e <_strtod_l+0x43e>
 80082a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80082a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80082ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80082b0:	35e2      	adds	r5, #226	@ 0xe2
 80082b2:	fa01 f305 	lsl.w	r3, r1, r5
 80082b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80082b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80082ba:	e7ba      	b.n	8008232 <_strtod_l+0x6e2>
 80082bc:	2300      	movs	r3, #0
 80082be:	9310      	str	r3, [sp, #64]	@ 0x40
 80082c0:	2301      	movs	r3, #1
 80082c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082c4:	e7b5      	b.n	8008232 <_strtod_l+0x6e2>
 80082c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082c8:	9805      	ldr	r0, [sp, #20]
 80082ca:	462a      	mov	r2, r5
 80082cc:	f003 f868 	bl	800b3a0 <__lshift>
 80082d0:	901a      	str	r0, [sp, #104]	@ 0x68
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d1d9      	bne.n	800828a <_strtod_l+0x73a>
 80082d6:	e65a      	b.n	8007f8e <_strtod_l+0x43e>
 80082d8:	2e00      	cmp	r6, #0
 80082da:	dd07      	ble.n	80082ec <_strtod_l+0x79c>
 80082dc:	4649      	mov	r1, r9
 80082de:	9805      	ldr	r0, [sp, #20]
 80082e0:	4632      	mov	r2, r6
 80082e2:	f003 f85d 	bl	800b3a0 <__lshift>
 80082e6:	4681      	mov	r9, r0
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d0d8      	beq.n	800829e <_strtod_l+0x74e>
 80082ec:	2f00      	cmp	r7, #0
 80082ee:	dd08      	ble.n	8008302 <_strtod_l+0x7b2>
 80082f0:	4641      	mov	r1, r8
 80082f2:	9805      	ldr	r0, [sp, #20]
 80082f4:	463a      	mov	r2, r7
 80082f6:	f003 f853 	bl	800b3a0 <__lshift>
 80082fa:	4680      	mov	r8, r0
 80082fc:	2800      	cmp	r0, #0
 80082fe:	f43f ae46 	beq.w	8007f8e <_strtod_l+0x43e>
 8008302:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008304:	9805      	ldr	r0, [sp, #20]
 8008306:	464a      	mov	r2, r9
 8008308:	f003 f8d2 	bl	800b4b0 <__mdiff>
 800830c:	4604      	mov	r4, r0
 800830e:	2800      	cmp	r0, #0
 8008310:	f43f ae3d 	beq.w	8007f8e <_strtod_l+0x43e>
 8008314:	68c3      	ldr	r3, [r0, #12]
 8008316:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008318:	2300      	movs	r3, #0
 800831a:	60c3      	str	r3, [r0, #12]
 800831c:	4641      	mov	r1, r8
 800831e:	f003 f8ab 	bl	800b478 <__mcmp>
 8008322:	2800      	cmp	r0, #0
 8008324:	da46      	bge.n	80083b4 <_strtod_l+0x864>
 8008326:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008328:	ea53 030a 	orrs.w	r3, r3, sl
 800832c:	d16c      	bne.n	8008408 <_strtod_l+0x8b8>
 800832e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008332:	2b00      	cmp	r3, #0
 8008334:	d168      	bne.n	8008408 <_strtod_l+0x8b8>
 8008336:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800833a:	0d1b      	lsrs	r3, r3, #20
 800833c:	051b      	lsls	r3, r3, #20
 800833e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008342:	d961      	bls.n	8008408 <_strtod_l+0x8b8>
 8008344:	6963      	ldr	r3, [r4, #20]
 8008346:	b913      	cbnz	r3, 800834e <_strtod_l+0x7fe>
 8008348:	6923      	ldr	r3, [r4, #16]
 800834a:	2b01      	cmp	r3, #1
 800834c:	dd5c      	ble.n	8008408 <_strtod_l+0x8b8>
 800834e:	4621      	mov	r1, r4
 8008350:	2201      	movs	r2, #1
 8008352:	9805      	ldr	r0, [sp, #20]
 8008354:	f003 f824 	bl	800b3a0 <__lshift>
 8008358:	4641      	mov	r1, r8
 800835a:	4604      	mov	r4, r0
 800835c:	f003 f88c 	bl	800b478 <__mcmp>
 8008360:	2800      	cmp	r0, #0
 8008362:	dd51      	ble.n	8008408 <_strtod_l+0x8b8>
 8008364:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008368:	9a08      	ldr	r2, [sp, #32]
 800836a:	0d1b      	lsrs	r3, r3, #20
 800836c:	051b      	lsls	r3, r3, #20
 800836e:	2a00      	cmp	r2, #0
 8008370:	d06b      	beq.n	800844a <_strtod_l+0x8fa>
 8008372:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008376:	d868      	bhi.n	800844a <_strtod_l+0x8fa>
 8008378:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800837c:	f67f ae9d 	bls.w	80080ba <_strtod_l+0x56a>
 8008380:	4b0a      	ldr	r3, [pc, #40]	@ (80083ac <_strtod_l+0x85c>)
 8008382:	4650      	mov	r0, sl
 8008384:	4659      	mov	r1, fp
 8008386:	2200      	movs	r2, #0
 8008388:	f7f8 f936 	bl	80005f8 <__aeabi_dmul>
 800838c:	4b08      	ldr	r3, [pc, #32]	@ (80083b0 <_strtod_l+0x860>)
 800838e:	400b      	ands	r3, r1
 8008390:	4682      	mov	sl, r0
 8008392:	468b      	mov	fp, r1
 8008394:	2b00      	cmp	r3, #0
 8008396:	f47f ae05 	bne.w	8007fa4 <_strtod_l+0x454>
 800839a:	9a05      	ldr	r2, [sp, #20]
 800839c:	2322      	movs	r3, #34	@ 0x22
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	e600      	b.n	8007fa4 <_strtod_l+0x454>
 80083a2:	bf00      	nop
 80083a4:	0800dab8 	.word	0x0800dab8
 80083a8:	fffffc02 	.word	0xfffffc02
 80083ac:	39500000 	.word	0x39500000
 80083b0:	7ff00000 	.word	0x7ff00000
 80083b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80083b8:	d165      	bne.n	8008486 <_strtod_l+0x936>
 80083ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80083bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083c0:	b35a      	cbz	r2, 800841a <_strtod_l+0x8ca>
 80083c2:	4a9f      	ldr	r2, [pc, #636]	@ (8008640 <_strtod_l+0xaf0>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d12b      	bne.n	8008420 <_strtod_l+0x8d0>
 80083c8:	9b08      	ldr	r3, [sp, #32]
 80083ca:	4651      	mov	r1, sl
 80083cc:	b303      	cbz	r3, 8008410 <_strtod_l+0x8c0>
 80083ce:	4b9d      	ldr	r3, [pc, #628]	@ (8008644 <_strtod_l+0xaf4>)
 80083d0:	465a      	mov	r2, fp
 80083d2:	4013      	ands	r3, r2
 80083d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80083d8:	f04f 32ff 	mov.w	r2, #4294967295
 80083dc:	d81b      	bhi.n	8008416 <_strtod_l+0x8c6>
 80083de:	0d1b      	lsrs	r3, r3, #20
 80083e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80083e4:	fa02 f303 	lsl.w	r3, r2, r3
 80083e8:	4299      	cmp	r1, r3
 80083ea:	d119      	bne.n	8008420 <_strtod_l+0x8d0>
 80083ec:	4b96      	ldr	r3, [pc, #600]	@ (8008648 <_strtod_l+0xaf8>)
 80083ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d102      	bne.n	80083fa <_strtod_l+0x8aa>
 80083f4:	3101      	adds	r1, #1
 80083f6:	f43f adca 	beq.w	8007f8e <_strtod_l+0x43e>
 80083fa:	4b92      	ldr	r3, [pc, #584]	@ (8008644 <_strtod_l+0xaf4>)
 80083fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083fe:	401a      	ands	r2, r3
 8008400:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008404:	f04f 0a00 	mov.w	sl, #0
 8008408:	9b08      	ldr	r3, [sp, #32]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1b8      	bne.n	8008380 <_strtod_l+0x830>
 800840e:	e5c9      	b.n	8007fa4 <_strtod_l+0x454>
 8008410:	f04f 33ff 	mov.w	r3, #4294967295
 8008414:	e7e8      	b.n	80083e8 <_strtod_l+0x898>
 8008416:	4613      	mov	r3, r2
 8008418:	e7e6      	b.n	80083e8 <_strtod_l+0x898>
 800841a:	ea53 030a 	orrs.w	r3, r3, sl
 800841e:	d0a1      	beq.n	8008364 <_strtod_l+0x814>
 8008420:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008422:	b1db      	cbz	r3, 800845c <_strtod_l+0x90c>
 8008424:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008426:	4213      	tst	r3, r2
 8008428:	d0ee      	beq.n	8008408 <_strtod_l+0x8b8>
 800842a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800842c:	9a08      	ldr	r2, [sp, #32]
 800842e:	4650      	mov	r0, sl
 8008430:	4659      	mov	r1, fp
 8008432:	b1bb      	cbz	r3, 8008464 <_strtod_l+0x914>
 8008434:	f7ff fb6b 	bl	8007b0e <sulp>
 8008438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800843c:	ec53 2b10 	vmov	r2, r3, d0
 8008440:	f7f7 ff24 	bl	800028c <__adddf3>
 8008444:	4682      	mov	sl, r0
 8008446:	468b      	mov	fp, r1
 8008448:	e7de      	b.n	8008408 <_strtod_l+0x8b8>
 800844a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800844e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008452:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008456:	f04f 3aff 	mov.w	sl, #4294967295
 800845a:	e7d5      	b.n	8008408 <_strtod_l+0x8b8>
 800845c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800845e:	ea13 0f0a 	tst.w	r3, sl
 8008462:	e7e1      	b.n	8008428 <_strtod_l+0x8d8>
 8008464:	f7ff fb53 	bl	8007b0e <sulp>
 8008468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800846c:	ec53 2b10 	vmov	r2, r3, d0
 8008470:	f7f7 ff0a 	bl	8000288 <__aeabi_dsub>
 8008474:	2200      	movs	r2, #0
 8008476:	2300      	movs	r3, #0
 8008478:	4682      	mov	sl, r0
 800847a:	468b      	mov	fp, r1
 800847c:	f7f8 fb24 	bl	8000ac8 <__aeabi_dcmpeq>
 8008480:	2800      	cmp	r0, #0
 8008482:	d0c1      	beq.n	8008408 <_strtod_l+0x8b8>
 8008484:	e619      	b.n	80080ba <_strtod_l+0x56a>
 8008486:	4641      	mov	r1, r8
 8008488:	4620      	mov	r0, r4
 800848a:	f003 f96d 	bl	800b768 <__ratio>
 800848e:	ec57 6b10 	vmov	r6, r7, d0
 8008492:	2200      	movs	r2, #0
 8008494:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008498:	4630      	mov	r0, r6
 800849a:	4639      	mov	r1, r7
 800849c:	f7f8 fb28 	bl	8000af0 <__aeabi_dcmple>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d06f      	beq.n	8008584 <_strtod_l+0xa34>
 80084a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d17a      	bne.n	80085a0 <_strtod_l+0xa50>
 80084aa:	f1ba 0f00 	cmp.w	sl, #0
 80084ae:	d158      	bne.n	8008562 <_strtod_l+0xa12>
 80084b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d15a      	bne.n	8008570 <_strtod_l+0xa20>
 80084ba:	4b64      	ldr	r3, [pc, #400]	@ (800864c <_strtod_l+0xafc>)
 80084bc:	2200      	movs	r2, #0
 80084be:	4630      	mov	r0, r6
 80084c0:	4639      	mov	r1, r7
 80084c2:	f7f8 fb0b 	bl	8000adc <__aeabi_dcmplt>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d159      	bne.n	800857e <_strtod_l+0xa2e>
 80084ca:	4630      	mov	r0, r6
 80084cc:	4639      	mov	r1, r7
 80084ce:	4b60      	ldr	r3, [pc, #384]	@ (8008650 <_strtod_l+0xb00>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	f7f8 f891 	bl	80005f8 <__aeabi_dmul>
 80084d6:	4606      	mov	r6, r0
 80084d8:	460f      	mov	r7, r1
 80084da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80084de:	9606      	str	r6, [sp, #24]
 80084e0:	9307      	str	r3, [sp, #28]
 80084e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084e6:	4d57      	ldr	r5, [pc, #348]	@ (8008644 <_strtod_l+0xaf4>)
 80084e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80084ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084ee:	401d      	ands	r5, r3
 80084f0:	4b58      	ldr	r3, [pc, #352]	@ (8008654 <_strtod_l+0xb04>)
 80084f2:	429d      	cmp	r5, r3
 80084f4:	f040 80b2 	bne.w	800865c <_strtod_l+0xb0c>
 80084f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80084fe:	ec4b ab10 	vmov	d0, sl, fp
 8008502:	f003 f869 	bl	800b5d8 <__ulp>
 8008506:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800850a:	ec51 0b10 	vmov	r0, r1, d0
 800850e:	f7f8 f873 	bl	80005f8 <__aeabi_dmul>
 8008512:	4652      	mov	r2, sl
 8008514:	465b      	mov	r3, fp
 8008516:	f7f7 feb9 	bl	800028c <__adddf3>
 800851a:	460b      	mov	r3, r1
 800851c:	4949      	ldr	r1, [pc, #292]	@ (8008644 <_strtod_l+0xaf4>)
 800851e:	4a4e      	ldr	r2, [pc, #312]	@ (8008658 <_strtod_l+0xb08>)
 8008520:	4019      	ands	r1, r3
 8008522:	4291      	cmp	r1, r2
 8008524:	4682      	mov	sl, r0
 8008526:	d942      	bls.n	80085ae <_strtod_l+0xa5e>
 8008528:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800852a:	4b47      	ldr	r3, [pc, #284]	@ (8008648 <_strtod_l+0xaf8>)
 800852c:	429a      	cmp	r2, r3
 800852e:	d103      	bne.n	8008538 <_strtod_l+0x9e8>
 8008530:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008532:	3301      	adds	r3, #1
 8008534:	f43f ad2b 	beq.w	8007f8e <_strtod_l+0x43e>
 8008538:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008648 <_strtod_l+0xaf8>
 800853c:	f04f 3aff 	mov.w	sl, #4294967295
 8008540:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008542:	9805      	ldr	r0, [sp, #20]
 8008544:	f002 fd14 	bl	800af70 <_Bfree>
 8008548:	9805      	ldr	r0, [sp, #20]
 800854a:	4649      	mov	r1, r9
 800854c:	f002 fd10 	bl	800af70 <_Bfree>
 8008550:	9805      	ldr	r0, [sp, #20]
 8008552:	4641      	mov	r1, r8
 8008554:	f002 fd0c 	bl	800af70 <_Bfree>
 8008558:	9805      	ldr	r0, [sp, #20]
 800855a:	4621      	mov	r1, r4
 800855c:	f002 fd08 	bl	800af70 <_Bfree>
 8008560:	e618      	b.n	8008194 <_strtod_l+0x644>
 8008562:	f1ba 0f01 	cmp.w	sl, #1
 8008566:	d103      	bne.n	8008570 <_strtod_l+0xa20>
 8008568:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800856a:	2b00      	cmp	r3, #0
 800856c:	f43f ada5 	beq.w	80080ba <_strtod_l+0x56a>
 8008570:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008620 <_strtod_l+0xad0>
 8008574:	4f35      	ldr	r7, [pc, #212]	@ (800864c <_strtod_l+0xafc>)
 8008576:	ed8d 7b06 	vstr	d7, [sp, #24]
 800857a:	2600      	movs	r6, #0
 800857c:	e7b1      	b.n	80084e2 <_strtod_l+0x992>
 800857e:	4f34      	ldr	r7, [pc, #208]	@ (8008650 <_strtod_l+0xb00>)
 8008580:	2600      	movs	r6, #0
 8008582:	e7aa      	b.n	80084da <_strtod_l+0x98a>
 8008584:	4b32      	ldr	r3, [pc, #200]	@ (8008650 <_strtod_l+0xb00>)
 8008586:	4630      	mov	r0, r6
 8008588:	4639      	mov	r1, r7
 800858a:	2200      	movs	r2, #0
 800858c:	f7f8 f834 	bl	80005f8 <__aeabi_dmul>
 8008590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008592:	4606      	mov	r6, r0
 8008594:	460f      	mov	r7, r1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d09f      	beq.n	80084da <_strtod_l+0x98a>
 800859a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800859e:	e7a0      	b.n	80084e2 <_strtod_l+0x992>
 80085a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008628 <_strtod_l+0xad8>
 80085a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80085a8:	ec57 6b17 	vmov	r6, r7, d7
 80085ac:	e799      	b.n	80084e2 <_strtod_l+0x992>
 80085ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80085b2:	9b08      	ldr	r3, [sp, #32]
 80085b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1c1      	bne.n	8008540 <_strtod_l+0x9f0>
 80085bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80085c0:	0d1b      	lsrs	r3, r3, #20
 80085c2:	051b      	lsls	r3, r3, #20
 80085c4:	429d      	cmp	r5, r3
 80085c6:	d1bb      	bne.n	8008540 <_strtod_l+0x9f0>
 80085c8:	4630      	mov	r0, r6
 80085ca:	4639      	mov	r1, r7
 80085cc:	f7f8 fb74 	bl	8000cb8 <__aeabi_d2lz>
 80085d0:	f7f7 ffe4 	bl	800059c <__aeabi_l2d>
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	4630      	mov	r0, r6
 80085da:	4639      	mov	r1, r7
 80085dc:	f7f7 fe54 	bl	8000288 <__aeabi_dsub>
 80085e0:	460b      	mov	r3, r1
 80085e2:	4602      	mov	r2, r0
 80085e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80085e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80085ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ee:	ea46 060a 	orr.w	r6, r6, sl
 80085f2:	431e      	orrs	r6, r3
 80085f4:	d06f      	beq.n	80086d6 <_strtod_l+0xb86>
 80085f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008630 <_strtod_l+0xae0>)
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	f7f8 fa6e 	bl	8000adc <__aeabi_dcmplt>
 8008600:	2800      	cmp	r0, #0
 8008602:	f47f accf 	bne.w	8007fa4 <_strtod_l+0x454>
 8008606:	a30c      	add	r3, pc, #48	@ (adr r3, 8008638 <_strtod_l+0xae8>)
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008610:	f7f8 fa82 	bl	8000b18 <__aeabi_dcmpgt>
 8008614:	2800      	cmp	r0, #0
 8008616:	d093      	beq.n	8008540 <_strtod_l+0x9f0>
 8008618:	e4c4      	b.n	8007fa4 <_strtod_l+0x454>
 800861a:	bf00      	nop
 800861c:	f3af 8000 	nop.w
 8008620:	00000000 	.word	0x00000000
 8008624:	bff00000 	.word	0xbff00000
 8008628:	00000000 	.word	0x00000000
 800862c:	3ff00000 	.word	0x3ff00000
 8008630:	94a03595 	.word	0x94a03595
 8008634:	3fdfffff 	.word	0x3fdfffff
 8008638:	35afe535 	.word	0x35afe535
 800863c:	3fe00000 	.word	0x3fe00000
 8008640:	000fffff 	.word	0x000fffff
 8008644:	7ff00000 	.word	0x7ff00000
 8008648:	7fefffff 	.word	0x7fefffff
 800864c:	3ff00000 	.word	0x3ff00000
 8008650:	3fe00000 	.word	0x3fe00000
 8008654:	7fe00000 	.word	0x7fe00000
 8008658:	7c9fffff 	.word	0x7c9fffff
 800865c:	9b08      	ldr	r3, [sp, #32]
 800865e:	b323      	cbz	r3, 80086aa <_strtod_l+0xb5a>
 8008660:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008664:	d821      	bhi.n	80086aa <_strtod_l+0xb5a>
 8008666:	a328      	add	r3, pc, #160	@ (adr r3, 8008708 <_strtod_l+0xbb8>)
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	4630      	mov	r0, r6
 800866e:	4639      	mov	r1, r7
 8008670:	f7f8 fa3e 	bl	8000af0 <__aeabi_dcmple>
 8008674:	b1a0      	cbz	r0, 80086a0 <_strtod_l+0xb50>
 8008676:	4639      	mov	r1, r7
 8008678:	4630      	mov	r0, r6
 800867a:	f7f8 fa95 	bl	8000ba8 <__aeabi_d2uiz>
 800867e:	2801      	cmp	r0, #1
 8008680:	bf38      	it	cc
 8008682:	2001      	movcc	r0, #1
 8008684:	f7f7 ff3e 	bl	8000504 <__aeabi_ui2d>
 8008688:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800868a:	4606      	mov	r6, r0
 800868c:	460f      	mov	r7, r1
 800868e:	b9fb      	cbnz	r3, 80086d0 <_strtod_l+0xb80>
 8008690:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008694:	9014      	str	r0, [sp, #80]	@ 0x50
 8008696:	9315      	str	r3, [sp, #84]	@ 0x54
 8008698:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800869c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80086a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80086a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80086a6:	1b5b      	subs	r3, r3, r5
 80086a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80086aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80086ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80086b2:	f002 ff91 	bl	800b5d8 <__ulp>
 80086b6:	4650      	mov	r0, sl
 80086b8:	ec53 2b10 	vmov	r2, r3, d0
 80086bc:	4659      	mov	r1, fp
 80086be:	f7f7 ff9b 	bl	80005f8 <__aeabi_dmul>
 80086c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80086c6:	f7f7 fde1 	bl	800028c <__adddf3>
 80086ca:	4682      	mov	sl, r0
 80086cc:	468b      	mov	fp, r1
 80086ce:	e770      	b.n	80085b2 <_strtod_l+0xa62>
 80086d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80086d4:	e7e0      	b.n	8008698 <_strtod_l+0xb48>
 80086d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008710 <_strtod_l+0xbc0>)
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	f7f8 f9fe 	bl	8000adc <__aeabi_dcmplt>
 80086e0:	e798      	b.n	8008614 <_strtod_l+0xac4>
 80086e2:	2300      	movs	r3, #0
 80086e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80086e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086ea:	6013      	str	r3, [r2, #0]
 80086ec:	f7ff ba6d 	b.w	8007bca <_strtod_l+0x7a>
 80086f0:	2a65      	cmp	r2, #101	@ 0x65
 80086f2:	f43f ab66 	beq.w	8007dc2 <_strtod_l+0x272>
 80086f6:	2a45      	cmp	r2, #69	@ 0x45
 80086f8:	f43f ab63 	beq.w	8007dc2 <_strtod_l+0x272>
 80086fc:	2301      	movs	r3, #1
 80086fe:	f7ff bb9e 	b.w	8007e3e <_strtod_l+0x2ee>
 8008702:	bf00      	nop
 8008704:	f3af 8000 	nop.w
 8008708:	ffc00000 	.word	0xffc00000
 800870c:	41dfffff 	.word	0x41dfffff
 8008710:	94a03595 	.word	0x94a03595
 8008714:	3fcfffff 	.word	0x3fcfffff

08008718 <_strtod_r>:
 8008718:	4b01      	ldr	r3, [pc, #4]	@ (8008720 <_strtod_r+0x8>)
 800871a:	f7ff ba19 	b.w	8007b50 <_strtod_l>
 800871e:	bf00      	nop
 8008720:	200000e4 	.word	0x200000e4

08008724 <strtod>:
 8008724:	460a      	mov	r2, r1
 8008726:	4601      	mov	r1, r0
 8008728:	4802      	ldr	r0, [pc, #8]	@ (8008734 <strtod+0x10>)
 800872a:	4b03      	ldr	r3, [pc, #12]	@ (8008738 <strtod+0x14>)
 800872c:	6800      	ldr	r0, [r0, #0]
 800872e:	f7ff ba0f 	b.w	8007b50 <_strtod_l>
 8008732:	bf00      	nop
 8008734:	20000250 	.word	0x20000250
 8008738:	200000e4 	.word	0x200000e4

0800873c <_strtol_l.constprop.0>:
 800873c:	2b24      	cmp	r3, #36	@ 0x24
 800873e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008742:	4686      	mov	lr, r0
 8008744:	4690      	mov	r8, r2
 8008746:	d801      	bhi.n	800874c <_strtol_l.constprop.0+0x10>
 8008748:	2b01      	cmp	r3, #1
 800874a:	d106      	bne.n	800875a <_strtol_l.constprop.0+0x1e>
 800874c:	f001 f8ce 	bl	80098ec <__errno>
 8008750:	2316      	movs	r3, #22
 8008752:	6003      	str	r3, [r0, #0]
 8008754:	2000      	movs	r0, #0
 8008756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800875a:	4834      	ldr	r0, [pc, #208]	@ (800882c <_strtol_l.constprop.0+0xf0>)
 800875c:	460d      	mov	r5, r1
 800875e:	462a      	mov	r2, r5
 8008760:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008764:	5d06      	ldrb	r6, [r0, r4]
 8008766:	f016 0608 	ands.w	r6, r6, #8
 800876a:	d1f8      	bne.n	800875e <_strtol_l.constprop.0+0x22>
 800876c:	2c2d      	cmp	r4, #45	@ 0x2d
 800876e:	d12d      	bne.n	80087cc <_strtol_l.constprop.0+0x90>
 8008770:	782c      	ldrb	r4, [r5, #0]
 8008772:	2601      	movs	r6, #1
 8008774:	1c95      	adds	r5, r2, #2
 8008776:	f033 0210 	bics.w	r2, r3, #16
 800877a:	d109      	bne.n	8008790 <_strtol_l.constprop.0+0x54>
 800877c:	2c30      	cmp	r4, #48	@ 0x30
 800877e:	d12a      	bne.n	80087d6 <_strtol_l.constprop.0+0x9a>
 8008780:	782a      	ldrb	r2, [r5, #0]
 8008782:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008786:	2a58      	cmp	r2, #88	@ 0x58
 8008788:	d125      	bne.n	80087d6 <_strtol_l.constprop.0+0x9a>
 800878a:	786c      	ldrb	r4, [r5, #1]
 800878c:	2310      	movs	r3, #16
 800878e:	3502      	adds	r5, #2
 8008790:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008794:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008798:	2200      	movs	r2, #0
 800879a:	fbbc f9f3 	udiv	r9, ip, r3
 800879e:	4610      	mov	r0, r2
 80087a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80087a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80087a8:	2f09      	cmp	r7, #9
 80087aa:	d81b      	bhi.n	80087e4 <_strtol_l.constprop.0+0xa8>
 80087ac:	463c      	mov	r4, r7
 80087ae:	42a3      	cmp	r3, r4
 80087b0:	dd27      	ble.n	8008802 <_strtol_l.constprop.0+0xc6>
 80087b2:	1c57      	adds	r7, r2, #1
 80087b4:	d007      	beq.n	80087c6 <_strtol_l.constprop.0+0x8a>
 80087b6:	4581      	cmp	r9, r0
 80087b8:	d320      	bcc.n	80087fc <_strtol_l.constprop.0+0xc0>
 80087ba:	d101      	bne.n	80087c0 <_strtol_l.constprop.0+0x84>
 80087bc:	45a2      	cmp	sl, r4
 80087be:	db1d      	blt.n	80087fc <_strtol_l.constprop.0+0xc0>
 80087c0:	fb00 4003 	mla	r0, r0, r3, r4
 80087c4:	2201      	movs	r2, #1
 80087c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087ca:	e7eb      	b.n	80087a4 <_strtol_l.constprop.0+0x68>
 80087cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80087ce:	bf04      	itt	eq
 80087d0:	782c      	ldrbeq	r4, [r5, #0]
 80087d2:	1c95      	addeq	r5, r2, #2
 80087d4:	e7cf      	b.n	8008776 <_strtol_l.constprop.0+0x3a>
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1da      	bne.n	8008790 <_strtol_l.constprop.0+0x54>
 80087da:	2c30      	cmp	r4, #48	@ 0x30
 80087dc:	bf0c      	ite	eq
 80087de:	2308      	moveq	r3, #8
 80087e0:	230a      	movne	r3, #10
 80087e2:	e7d5      	b.n	8008790 <_strtol_l.constprop.0+0x54>
 80087e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80087e8:	2f19      	cmp	r7, #25
 80087ea:	d801      	bhi.n	80087f0 <_strtol_l.constprop.0+0xb4>
 80087ec:	3c37      	subs	r4, #55	@ 0x37
 80087ee:	e7de      	b.n	80087ae <_strtol_l.constprop.0+0x72>
 80087f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80087f4:	2f19      	cmp	r7, #25
 80087f6:	d804      	bhi.n	8008802 <_strtol_l.constprop.0+0xc6>
 80087f8:	3c57      	subs	r4, #87	@ 0x57
 80087fa:	e7d8      	b.n	80087ae <_strtol_l.constprop.0+0x72>
 80087fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008800:	e7e1      	b.n	80087c6 <_strtol_l.constprop.0+0x8a>
 8008802:	1c53      	adds	r3, r2, #1
 8008804:	d108      	bne.n	8008818 <_strtol_l.constprop.0+0xdc>
 8008806:	2322      	movs	r3, #34	@ 0x22
 8008808:	f8ce 3000 	str.w	r3, [lr]
 800880c:	4660      	mov	r0, ip
 800880e:	f1b8 0f00 	cmp.w	r8, #0
 8008812:	d0a0      	beq.n	8008756 <_strtol_l.constprop.0+0x1a>
 8008814:	1e69      	subs	r1, r5, #1
 8008816:	e006      	b.n	8008826 <_strtol_l.constprop.0+0xea>
 8008818:	b106      	cbz	r6, 800881c <_strtol_l.constprop.0+0xe0>
 800881a:	4240      	negs	r0, r0
 800881c:	f1b8 0f00 	cmp.w	r8, #0
 8008820:	d099      	beq.n	8008756 <_strtol_l.constprop.0+0x1a>
 8008822:	2a00      	cmp	r2, #0
 8008824:	d1f6      	bne.n	8008814 <_strtol_l.constprop.0+0xd8>
 8008826:	f8c8 1000 	str.w	r1, [r8]
 800882a:	e794      	b.n	8008756 <_strtol_l.constprop.0+0x1a>
 800882c:	0800dae1 	.word	0x0800dae1

08008830 <_strtol_r>:
 8008830:	f7ff bf84 	b.w	800873c <_strtol_l.constprop.0>

08008834 <strtol>:
 8008834:	4613      	mov	r3, r2
 8008836:	460a      	mov	r2, r1
 8008838:	4601      	mov	r1, r0
 800883a:	4802      	ldr	r0, [pc, #8]	@ (8008844 <strtol+0x10>)
 800883c:	6800      	ldr	r0, [r0, #0]
 800883e:	f7ff bf7d 	b.w	800873c <_strtol_l.constprop.0>
 8008842:	bf00      	nop
 8008844:	20000250 	.word	0x20000250

08008848 <__cvt>:
 8008848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800884c:	ec57 6b10 	vmov	r6, r7, d0
 8008850:	2f00      	cmp	r7, #0
 8008852:	460c      	mov	r4, r1
 8008854:	4619      	mov	r1, r3
 8008856:	463b      	mov	r3, r7
 8008858:	bfbb      	ittet	lt
 800885a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800885e:	461f      	movlt	r7, r3
 8008860:	2300      	movge	r3, #0
 8008862:	232d      	movlt	r3, #45	@ 0x2d
 8008864:	700b      	strb	r3, [r1, #0]
 8008866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008868:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800886c:	4691      	mov	r9, r2
 800886e:	f023 0820 	bic.w	r8, r3, #32
 8008872:	bfbc      	itt	lt
 8008874:	4632      	movlt	r2, r6
 8008876:	4616      	movlt	r6, r2
 8008878:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800887c:	d005      	beq.n	800888a <__cvt+0x42>
 800887e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008882:	d100      	bne.n	8008886 <__cvt+0x3e>
 8008884:	3401      	adds	r4, #1
 8008886:	2102      	movs	r1, #2
 8008888:	e000      	b.n	800888c <__cvt+0x44>
 800888a:	2103      	movs	r1, #3
 800888c:	ab03      	add	r3, sp, #12
 800888e:	9301      	str	r3, [sp, #4]
 8008890:	ab02      	add	r3, sp, #8
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	ec47 6b10 	vmov	d0, r6, r7
 8008898:	4653      	mov	r3, sl
 800889a:	4622      	mov	r2, r4
 800889c:	f001 f918 	bl	8009ad0 <_dtoa_r>
 80088a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80088a4:	4605      	mov	r5, r0
 80088a6:	d119      	bne.n	80088dc <__cvt+0x94>
 80088a8:	f019 0f01 	tst.w	r9, #1
 80088ac:	d00e      	beq.n	80088cc <__cvt+0x84>
 80088ae:	eb00 0904 	add.w	r9, r0, r4
 80088b2:	2200      	movs	r2, #0
 80088b4:	2300      	movs	r3, #0
 80088b6:	4630      	mov	r0, r6
 80088b8:	4639      	mov	r1, r7
 80088ba:	f7f8 f905 	bl	8000ac8 <__aeabi_dcmpeq>
 80088be:	b108      	cbz	r0, 80088c4 <__cvt+0x7c>
 80088c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80088c4:	2230      	movs	r2, #48	@ 0x30
 80088c6:	9b03      	ldr	r3, [sp, #12]
 80088c8:	454b      	cmp	r3, r9
 80088ca:	d31e      	bcc.n	800890a <__cvt+0xc2>
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088d0:	1b5b      	subs	r3, r3, r5
 80088d2:	4628      	mov	r0, r5
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	b004      	add	sp, #16
 80088d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80088e0:	eb00 0904 	add.w	r9, r0, r4
 80088e4:	d1e5      	bne.n	80088b2 <__cvt+0x6a>
 80088e6:	7803      	ldrb	r3, [r0, #0]
 80088e8:	2b30      	cmp	r3, #48	@ 0x30
 80088ea:	d10a      	bne.n	8008902 <__cvt+0xba>
 80088ec:	2200      	movs	r2, #0
 80088ee:	2300      	movs	r3, #0
 80088f0:	4630      	mov	r0, r6
 80088f2:	4639      	mov	r1, r7
 80088f4:	f7f8 f8e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80088f8:	b918      	cbnz	r0, 8008902 <__cvt+0xba>
 80088fa:	f1c4 0401 	rsb	r4, r4, #1
 80088fe:	f8ca 4000 	str.w	r4, [sl]
 8008902:	f8da 3000 	ldr.w	r3, [sl]
 8008906:	4499      	add	r9, r3
 8008908:	e7d3      	b.n	80088b2 <__cvt+0x6a>
 800890a:	1c59      	adds	r1, r3, #1
 800890c:	9103      	str	r1, [sp, #12]
 800890e:	701a      	strb	r2, [r3, #0]
 8008910:	e7d9      	b.n	80088c6 <__cvt+0x7e>

08008912 <__exponent>:
 8008912:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008914:	2900      	cmp	r1, #0
 8008916:	bfba      	itte	lt
 8008918:	4249      	neglt	r1, r1
 800891a:	232d      	movlt	r3, #45	@ 0x2d
 800891c:	232b      	movge	r3, #43	@ 0x2b
 800891e:	2909      	cmp	r1, #9
 8008920:	7002      	strb	r2, [r0, #0]
 8008922:	7043      	strb	r3, [r0, #1]
 8008924:	dd29      	ble.n	800897a <__exponent+0x68>
 8008926:	f10d 0307 	add.w	r3, sp, #7
 800892a:	461d      	mov	r5, r3
 800892c:	270a      	movs	r7, #10
 800892e:	461a      	mov	r2, r3
 8008930:	fbb1 f6f7 	udiv	r6, r1, r7
 8008934:	fb07 1416 	mls	r4, r7, r6, r1
 8008938:	3430      	adds	r4, #48	@ 0x30
 800893a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800893e:	460c      	mov	r4, r1
 8008940:	2c63      	cmp	r4, #99	@ 0x63
 8008942:	f103 33ff 	add.w	r3, r3, #4294967295
 8008946:	4631      	mov	r1, r6
 8008948:	dcf1      	bgt.n	800892e <__exponent+0x1c>
 800894a:	3130      	adds	r1, #48	@ 0x30
 800894c:	1e94      	subs	r4, r2, #2
 800894e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008952:	1c41      	adds	r1, r0, #1
 8008954:	4623      	mov	r3, r4
 8008956:	42ab      	cmp	r3, r5
 8008958:	d30a      	bcc.n	8008970 <__exponent+0x5e>
 800895a:	f10d 0309 	add.w	r3, sp, #9
 800895e:	1a9b      	subs	r3, r3, r2
 8008960:	42ac      	cmp	r4, r5
 8008962:	bf88      	it	hi
 8008964:	2300      	movhi	r3, #0
 8008966:	3302      	adds	r3, #2
 8008968:	4403      	add	r3, r0
 800896a:	1a18      	subs	r0, r3, r0
 800896c:	b003      	add	sp, #12
 800896e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008970:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008974:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008978:	e7ed      	b.n	8008956 <__exponent+0x44>
 800897a:	2330      	movs	r3, #48	@ 0x30
 800897c:	3130      	adds	r1, #48	@ 0x30
 800897e:	7083      	strb	r3, [r0, #2]
 8008980:	70c1      	strb	r1, [r0, #3]
 8008982:	1d03      	adds	r3, r0, #4
 8008984:	e7f1      	b.n	800896a <__exponent+0x58>
	...

08008988 <_printf_float>:
 8008988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800898c:	b08d      	sub	sp, #52	@ 0x34
 800898e:	460c      	mov	r4, r1
 8008990:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008994:	4616      	mov	r6, r2
 8008996:	461f      	mov	r7, r3
 8008998:	4605      	mov	r5, r0
 800899a:	f000 ff5d 	bl	8009858 <_localeconv_r>
 800899e:	6803      	ldr	r3, [r0, #0]
 80089a0:	9304      	str	r3, [sp, #16]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7f7 fc64 	bl	8000270 <strlen>
 80089a8:	2300      	movs	r3, #0
 80089aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80089ac:	f8d8 3000 	ldr.w	r3, [r8]
 80089b0:	9005      	str	r0, [sp, #20]
 80089b2:	3307      	adds	r3, #7
 80089b4:	f023 0307 	bic.w	r3, r3, #7
 80089b8:	f103 0208 	add.w	r2, r3, #8
 80089bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80089c0:	f8d4 b000 	ldr.w	fp, [r4]
 80089c4:	f8c8 2000 	str.w	r2, [r8]
 80089c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80089d0:	9307      	str	r3, [sp, #28]
 80089d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80089d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80089da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089de:	4b9c      	ldr	r3, [pc, #624]	@ (8008c50 <_printf_float+0x2c8>)
 80089e0:	f04f 32ff 	mov.w	r2, #4294967295
 80089e4:	f7f8 f8a2 	bl	8000b2c <__aeabi_dcmpun>
 80089e8:	bb70      	cbnz	r0, 8008a48 <_printf_float+0xc0>
 80089ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089ee:	4b98      	ldr	r3, [pc, #608]	@ (8008c50 <_printf_float+0x2c8>)
 80089f0:	f04f 32ff 	mov.w	r2, #4294967295
 80089f4:	f7f8 f87c 	bl	8000af0 <__aeabi_dcmple>
 80089f8:	bb30      	cbnz	r0, 8008a48 <_printf_float+0xc0>
 80089fa:	2200      	movs	r2, #0
 80089fc:	2300      	movs	r3, #0
 80089fe:	4640      	mov	r0, r8
 8008a00:	4649      	mov	r1, r9
 8008a02:	f7f8 f86b 	bl	8000adc <__aeabi_dcmplt>
 8008a06:	b110      	cbz	r0, 8008a0e <_printf_float+0x86>
 8008a08:	232d      	movs	r3, #45	@ 0x2d
 8008a0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a0e:	4a91      	ldr	r2, [pc, #580]	@ (8008c54 <_printf_float+0x2cc>)
 8008a10:	4b91      	ldr	r3, [pc, #580]	@ (8008c58 <_printf_float+0x2d0>)
 8008a12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008a16:	bf94      	ite	ls
 8008a18:	4690      	movls	r8, r2
 8008a1a:	4698      	movhi	r8, r3
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	6123      	str	r3, [r4, #16]
 8008a20:	f02b 0304 	bic.w	r3, fp, #4
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	f04f 0900 	mov.w	r9, #0
 8008a2a:	9700      	str	r7, [sp, #0]
 8008a2c:	4633      	mov	r3, r6
 8008a2e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008a30:	4621      	mov	r1, r4
 8008a32:	4628      	mov	r0, r5
 8008a34:	f000 f9d2 	bl	8008ddc <_printf_common>
 8008a38:	3001      	adds	r0, #1
 8008a3a:	f040 808d 	bne.w	8008b58 <_printf_float+0x1d0>
 8008a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a42:	b00d      	add	sp, #52	@ 0x34
 8008a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a48:	4642      	mov	r2, r8
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	4649      	mov	r1, r9
 8008a50:	f7f8 f86c 	bl	8000b2c <__aeabi_dcmpun>
 8008a54:	b140      	cbz	r0, 8008a68 <_printf_float+0xe0>
 8008a56:	464b      	mov	r3, r9
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	bfbc      	itt	lt
 8008a5c:	232d      	movlt	r3, #45	@ 0x2d
 8008a5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008a62:	4a7e      	ldr	r2, [pc, #504]	@ (8008c5c <_printf_float+0x2d4>)
 8008a64:	4b7e      	ldr	r3, [pc, #504]	@ (8008c60 <_printf_float+0x2d8>)
 8008a66:	e7d4      	b.n	8008a12 <_printf_float+0x8a>
 8008a68:	6863      	ldr	r3, [r4, #4]
 8008a6a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008a6e:	9206      	str	r2, [sp, #24]
 8008a70:	1c5a      	adds	r2, r3, #1
 8008a72:	d13b      	bne.n	8008aec <_printf_float+0x164>
 8008a74:	2306      	movs	r3, #6
 8008a76:	6063      	str	r3, [r4, #4]
 8008a78:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	6022      	str	r2, [r4, #0]
 8008a80:	9303      	str	r3, [sp, #12]
 8008a82:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a84:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008a88:	ab09      	add	r3, sp, #36	@ 0x24
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	6861      	ldr	r1, [r4, #4]
 8008a8e:	ec49 8b10 	vmov	d0, r8, r9
 8008a92:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008a96:	4628      	mov	r0, r5
 8008a98:	f7ff fed6 	bl	8008848 <__cvt>
 8008a9c:	9b06      	ldr	r3, [sp, #24]
 8008a9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008aa0:	2b47      	cmp	r3, #71	@ 0x47
 8008aa2:	4680      	mov	r8, r0
 8008aa4:	d129      	bne.n	8008afa <_printf_float+0x172>
 8008aa6:	1cc8      	adds	r0, r1, #3
 8008aa8:	db02      	blt.n	8008ab0 <_printf_float+0x128>
 8008aaa:	6863      	ldr	r3, [r4, #4]
 8008aac:	4299      	cmp	r1, r3
 8008aae:	dd41      	ble.n	8008b34 <_printf_float+0x1ac>
 8008ab0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ab4:	fa5f fa8a 	uxtb.w	sl, sl
 8008ab8:	3901      	subs	r1, #1
 8008aba:	4652      	mov	r2, sl
 8008abc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ac0:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ac2:	f7ff ff26 	bl	8008912 <__exponent>
 8008ac6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ac8:	1813      	adds	r3, r2, r0
 8008aca:	2a01      	cmp	r2, #1
 8008acc:	4681      	mov	r9, r0
 8008ace:	6123      	str	r3, [r4, #16]
 8008ad0:	dc02      	bgt.n	8008ad8 <_printf_float+0x150>
 8008ad2:	6822      	ldr	r2, [r4, #0]
 8008ad4:	07d2      	lsls	r2, r2, #31
 8008ad6:	d501      	bpl.n	8008adc <_printf_float+0x154>
 8008ad8:	3301      	adds	r3, #1
 8008ada:	6123      	str	r3, [r4, #16]
 8008adc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d0a2      	beq.n	8008a2a <_printf_float+0xa2>
 8008ae4:	232d      	movs	r3, #45	@ 0x2d
 8008ae6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008aea:	e79e      	b.n	8008a2a <_printf_float+0xa2>
 8008aec:	9a06      	ldr	r2, [sp, #24]
 8008aee:	2a47      	cmp	r2, #71	@ 0x47
 8008af0:	d1c2      	bne.n	8008a78 <_printf_float+0xf0>
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1c0      	bne.n	8008a78 <_printf_float+0xf0>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e7bd      	b.n	8008a76 <_printf_float+0xee>
 8008afa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008afe:	d9db      	bls.n	8008ab8 <_printf_float+0x130>
 8008b00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008b04:	d118      	bne.n	8008b38 <_printf_float+0x1b0>
 8008b06:	2900      	cmp	r1, #0
 8008b08:	6863      	ldr	r3, [r4, #4]
 8008b0a:	dd0b      	ble.n	8008b24 <_printf_float+0x19c>
 8008b0c:	6121      	str	r1, [r4, #16]
 8008b0e:	b913      	cbnz	r3, 8008b16 <_printf_float+0x18e>
 8008b10:	6822      	ldr	r2, [r4, #0]
 8008b12:	07d0      	lsls	r0, r2, #31
 8008b14:	d502      	bpl.n	8008b1c <_printf_float+0x194>
 8008b16:	3301      	adds	r3, #1
 8008b18:	440b      	add	r3, r1
 8008b1a:	6123      	str	r3, [r4, #16]
 8008b1c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008b1e:	f04f 0900 	mov.w	r9, #0
 8008b22:	e7db      	b.n	8008adc <_printf_float+0x154>
 8008b24:	b913      	cbnz	r3, 8008b2c <_printf_float+0x1a4>
 8008b26:	6822      	ldr	r2, [r4, #0]
 8008b28:	07d2      	lsls	r2, r2, #31
 8008b2a:	d501      	bpl.n	8008b30 <_printf_float+0x1a8>
 8008b2c:	3302      	adds	r3, #2
 8008b2e:	e7f4      	b.n	8008b1a <_printf_float+0x192>
 8008b30:	2301      	movs	r3, #1
 8008b32:	e7f2      	b.n	8008b1a <_printf_float+0x192>
 8008b34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008b38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b3a:	4299      	cmp	r1, r3
 8008b3c:	db05      	blt.n	8008b4a <_printf_float+0x1c2>
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	6121      	str	r1, [r4, #16]
 8008b42:	07d8      	lsls	r0, r3, #31
 8008b44:	d5ea      	bpl.n	8008b1c <_printf_float+0x194>
 8008b46:	1c4b      	adds	r3, r1, #1
 8008b48:	e7e7      	b.n	8008b1a <_printf_float+0x192>
 8008b4a:	2900      	cmp	r1, #0
 8008b4c:	bfd4      	ite	le
 8008b4e:	f1c1 0202 	rsble	r2, r1, #2
 8008b52:	2201      	movgt	r2, #1
 8008b54:	4413      	add	r3, r2
 8008b56:	e7e0      	b.n	8008b1a <_printf_float+0x192>
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	055a      	lsls	r2, r3, #21
 8008b5c:	d407      	bmi.n	8008b6e <_printf_float+0x1e6>
 8008b5e:	6923      	ldr	r3, [r4, #16]
 8008b60:	4642      	mov	r2, r8
 8008b62:	4631      	mov	r1, r6
 8008b64:	4628      	mov	r0, r5
 8008b66:	47b8      	blx	r7
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d12b      	bne.n	8008bc4 <_printf_float+0x23c>
 8008b6c:	e767      	b.n	8008a3e <_printf_float+0xb6>
 8008b6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b72:	f240 80dd 	bls.w	8008d30 <_printf_float+0x3a8>
 8008b76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	f7f7 ffa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d033      	beq.n	8008bee <_printf_float+0x266>
 8008b86:	4a37      	ldr	r2, [pc, #220]	@ (8008c64 <_printf_float+0x2dc>)
 8008b88:	2301      	movs	r3, #1
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	47b8      	blx	r7
 8008b90:	3001      	adds	r0, #1
 8008b92:	f43f af54 	beq.w	8008a3e <_printf_float+0xb6>
 8008b96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008b9a:	4543      	cmp	r3, r8
 8008b9c:	db02      	blt.n	8008ba4 <_printf_float+0x21c>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	07d8      	lsls	r0, r3, #31
 8008ba2:	d50f      	bpl.n	8008bc4 <_printf_float+0x23c>
 8008ba4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4628      	mov	r0, r5
 8008bac:	47b8      	blx	r7
 8008bae:	3001      	adds	r0, #1
 8008bb0:	f43f af45 	beq.w	8008a3e <_printf_float+0xb6>
 8008bb4:	f04f 0900 	mov.w	r9, #0
 8008bb8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bbc:	f104 0a1a 	add.w	sl, r4, #26
 8008bc0:	45c8      	cmp	r8, r9
 8008bc2:	dc09      	bgt.n	8008bd8 <_printf_float+0x250>
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	079b      	lsls	r3, r3, #30
 8008bc8:	f100 8103 	bmi.w	8008dd2 <_printf_float+0x44a>
 8008bcc:	68e0      	ldr	r0, [r4, #12]
 8008bce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bd0:	4298      	cmp	r0, r3
 8008bd2:	bfb8      	it	lt
 8008bd4:	4618      	movlt	r0, r3
 8008bd6:	e734      	b.n	8008a42 <_printf_float+0xba>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4652      	mov	r2, sl
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b8      	blx	r7
 8008be2:	3001      	adds	r0, #1
 8008be4:	f43f af2b 	beq.w	8008a3e <_printf_float+0xb6>
 8008be8:	f109 0901 	add.w	r9, r9, #1
 8008bec:	e7e8      	b.n	8008bc0 <_printf_float+0x238>
 8008bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	dc39      	bgt.n	8008c68 <_printf_float+0x2e0>
 8008bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8008c64 <_printf_float+0x2dc>)
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	47b8      	blx	r7
 8008bfe:	3001      	adds	r0, #1
 8008c00:	f43f af1d 	beq.w	8008a3e <_printf_float+0xb6>
 8008c04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008c08:	ea59 0303 	orrs.w	r3, r9, r3
 8008c0c:	d102      	bne.n	8008c14 <_printf_float+0x28c>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	07d9      	lsls	r1, r3, #31
 8008c12:	d5d7      	bpl.n	8008bc4 <_printf_float+0x23c>
 8008c14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c18:	4631      	mov	r1, r6
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	47b8      	blx	r7
 8008c1e:	3001      	adds	r0, #1
 8008c20:	f43f af0d 	beq.w	8008a3e <_printf_float+0xb6>
 8008c24:	f04f 0a00 	mov.w	sl, #0
 8008c28:	f104 0b1a 	add.w	fp, r4, #26
 8008c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c2e:	425b      	negs	r3, r3
 8008c30:	4553      	cmp	r3, sl
 8008c32:	dc01      	bgt.n	8008c38 <_printf_float+0x2b0>
 8008c34:	464b      	mov	r3, r9
 8008c36:	e793      	b.n	8008b60 <_printf_float+0x1d8>
 8008c38:	2301      	movs	r3, #1
 8008c3a:	465a      	mov	r2, fp
 8008c3c:	4631      	mov	r1, r6
 8008c3e:	4628      	mov	r0, r5
 8008c40:	47b8      	blx	r7
 8008c42:	3001      	adds	r0, #1
 8008c44:	f43f aefb 	beq.w	8008a3e <_printf_float+0xb6>
 8008c48:	f10a 0a01 	add.w	sl, sl, #1
 8008c4c:	e7ee      	b.n	8008c2c <_printf_float+0x2a4>
 8008c4e:	bf00      	nop
 8008c50:	7fefffff 	.word	0x7fefffff
 8008c54:	0800dbe1 	.word	0x0800dbe1
 8008c58:	0800dbe5 	.word	0x0800dbe5
 8008c5c:	0800dbe9 	.word	0x0800dbe9
 8008c60:	0800dbed 	.word	0x0800dbed
 8008c64:	0800dbf1 	.word	0x0800dbf1
 8008c68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c6a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c6e:	4553      	cmp	r3, sl
 8008c70:	bfa8      	it	ge
 8008c72:	4653      	movge	r3, sl
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	4699      	mov	r9, r3
 8008c78:	dc36      	bgt.n	8008ce8 <_printf_float+0x360>
 8008c7a:	f04f 0b00 	mov.w	fp, #0
 8008c7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c82:	f104 021a 	add.w	r2, r4, #26
 8008c86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c88:	9306      	str	r3, [sp, #24]
 8008c8a:	eba3 0309 	sub.w	r3, r3, r9
 8008c8e:	455b      	cmp	r3, fp
 8008c90:	dc31      	bgt.n	8008cf6 <_printf_float+0x36e>
 8008c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c94:	459a      	cmp	sl, r3
 8008c96:	dc3a      	bgt.n	8008d0e <_printf_float+0x386>
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	07da      	lsls	r2, r3, #31
 8008c9c:	d437      	bmi.n	8008d0e <_printf_float+0x386>
 8008c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca0:	ebaa 0903 	sub.w	r9, sl, r3
 8008ca4:	9b06      	ldr	r3, [sp, #24]
 8008ca6:	ebaa 0303 	sub.w	r3, sl, r3
 8008caa:	4599      	cmp	r9, r3
 8008cac:	bfa8      	it	ge
 8008cae:	4699      	movge	r9, r3
 8008cb0:	f1b9 0f00 	cmp.w	r9, #0
 8008cb4:	dc33      	bgt.n	8008d1e <_printf_float+0x396>
 8008cb6:	f04f 0800 	mov.w	r8, #0
 8008cba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cbe:	f104 0b1a 	add.w	fp, r4, #26
 8008cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc4:	ebaa 0303 	sub.w	r3, sl, r3
 8008cc8:	eba3 0309 	sub.w	r3, r3, r9
 8008ccc:	4543      	cmp	r3, r8
 8008cce:	f77f af79 	ble.w	8008bc4 <_printf_float+0x23c>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	465a      	mov	r2, fp
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	4628      	mov	r0, r5
 8008cda:	47b8      	blx	r7
 8008cdc:	3001      	adds	r0, #1
 8008cde:	f43f aeae 	beq.w	8008a3e <_printf_float+0xb6>
 8008ce2:	f108 0801 	add.w	r8, r8, #1
 8008ce6:	e7ec      	b.n	8008cc2 <_printf_float+0x33a>
 8008ce8:	4642      	mov	r2, r8
 8008cea:	4631      	mov	r1, r6
 8008cec:	4628      	mov	r0, r5
 8008cee:	47b8      	blx	r7
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d1c2      	bne.n	8008c7a <_printf_float+0x2f2>
 8008cf4:	e6a3      	b.n	8008a3e <_printf_float+0xb6>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	4631      	mov	r1, r6
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	9206      	str	r2, [sp, #24]
 8008cfe:	47b8      	blx	r7
 8008d00:	3001      	adds	r0, #1
 8008d02:	f43f ae9c 	beq.w	8008a3e <_printf_float+0xb6>
 8008d06:	9a06      	ldr	r2, [sp, #24]
 8008d08:	f10b 0b01 	add.w	fp, fp, #1
 8008d0c:	e7bb      	b.n	8008c86 <_printf_float+0x2fe>
 8008d0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d12:	4631      	mov	r1, r6
 8008d14:	4628      	mov	r0, r5
 8008d16:	47b8      	blx	r7
 8008d18:	3001      	adds	r0, #1
 8008d1a:	d1c0      	bne.n	8008c9e <_printf_float+0x316>
 8008d1c:	e68f      	b.n	8008a3e <_printf_float+0xb6>
 8008d1e:	9a06      	ldr	r2, [sp, #24]
 8008d20:	464b      	mov	r3, r9
 8008d22:	4442      	add	r2, r8
 8008d24:	4631      	mov	r1, r6
 8008d26:	4628      	mov	r0, r5
 8008d28:	47b8      	blx	r7
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	d1c3      	bne.n	8008cb6 <_printf_float+0x32e>
 8008d2e:	e686      	b.n	8008a3e <_printf_float+0xb6>
 8008d30:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d34:	f1ba 0f01 	cmp.w	sl, #1
 8008d38:	dc01      	bgt.n	8008d3e <_printf_float+0x3b6>
 8008d3a:	07db      	lsls	r3, r3, #31
 8008d3c:	d536      	bpl.n	8008dac <_printf_float+0x424>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	4642      	mov	r2, r8
 8008d42:	4631      	mov	r1, r6
 8008d44:	4628      	mov	r0, r5
 8008d46:	47b8      	blx	r7
 8008d48:	3001      	adds	r0, #1
 8008d4a:	f43f ae78 	beq.w	8008a3e <_printf_float+0xb6>
 8008d4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d52:	4631      	mov	r1, r6
 8008d54:	4628      	mov	r0, r5
 8008d56:	47b8      	blx	r7
 8008d58:	3001      	adds	r0, #1
 8008d5a:	f43f ae70 	beq.w	8008a3e <_printf_float+0xb6>
 8008d5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d62:	2200      	movs	r2, #0
 8008d64:	2300      	movs	r3, #0
 8008d66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d6a:	f7f7 fead 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d6e:	b9c0      	cbnz	r0, 8008da2 <_printf_float+0x41a>
 8008d70:	4653      	mov	r3, sl
 8008d72:	f108 0201 	add.w	r2, r8, #1
 8008d76:	4631      	mov	r1, r6
 8008d78:	4628      	mov	r0, r5
 8008d7a:	47b8      	blx	r7
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	d10c      	bne.n	8008d9a <_printf_float+0x412>
 8008d80:	e65d      	b.n	8008a3e <_printf_float+0xb6>
 8008d82:	2301      	movs	r3, #1
 8008d84:	465a      	mov	r2, fp
 8008d86:	4631      	mov	r1, r6
 8008d88:	4628      	mov	r0, r5
 8008d8a:	47b8      	blx	r7
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	f43f ae56 	beq.w	8008a3e <_printf_float+0xb6>
 8008d92:	f108 0801 	add.w	r8, r8, #1
 8008d96:	45d0      	cmp	r8, sl
 8008d98:	dbf3      	blt.n	8008d82 <_printf_float+0x3fa>
 8008d9a:	464b      	mov	r3, r9
 8008d9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008da0:	e6df      	b.n	8008b62 <_printf_float+0x1da>
 8008da2:	f04f 0800 	mov.w	r8, #0
 8008da6:	f104 0b1a 	add.w	fp, r4, #26
 8008daa:	e7f4      	b.n	8008d96 <_printf_float+0x40e>
 8008dac:	2301      	movs	r3, #1
 8008dae:	4642      	mov	r2, r8
 8008db0:	e7e1      	b.n	8008d76 <_printf_float+0x3ee>
 8008db2:	2301      	movs	r3, #1
 8008db4:	464a      	mov	r2, r9
 8008db6:	4631      	mov	r1, r6
 8008db8:	4628      	mov	r0, r5
 8008dba:	47b8      	blx	r7
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	f43f ae3e 	beq.w	8008a3e <_printf_float+0xb6>
 8008dc2:	f108 0801 	add.w	r8, r8, #1
 8008dc6:	68e3      	ldr	r3, [r4, #12]
 8008dc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008dca:	1a5b      	subs	r3, r3, r1
 8008dcc:	4543      	cmp	r3, r8
 8008dce:	dcf0      	bgt.n	8008db2 <_printf_float+0x42a>
 8008dd0:	e6fc      	b.n	8008bcc <_printf_float+0x244>
 8008dd2:	f04f 0800 	mov.w	r8, #0
 8008dd6:	f104 0919 	add.w	r9, r4, #25
 8008dda:	e7f4      	b.n	8008dc6 <_printf_float+0x43e>

08008ddc <_printf_common>:
 8008ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de0:	4616      	mov	r6, r2
 8008de2:	4698      	mov	r8, r3
 8008de4:	688a      	ldr	r2, [r1, #8]
 8008de6:	690b      	ldr	r3, [r1, #16]
 8008de8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008dec:	4293      	cmp	r3, r2
 8008dee:	bfb8      	it	lt
 8008df0:	4613      	movlt	r3, r2
 8008df2:	6033      	str	r3, [r6, #0]
 8008df4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008df8:	4607      	mov	r7, r0
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	b10a      	cbz	r2, 8008e02 <_printf_common+0x26>
 8008dfe:	3301      	adds	r3, #1
 8008e00:	6033      	str	r3, [r6, #0]
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	0699      	lsls	r1, r3, #26
 8008e06:	bf42      	ittt	mi
 8008e08:	6833      	ldrmi	r3, [r6, #0]
 8008e0a:	3302      	addmi	r3, #2
 8008e0c:	6033      	strmi	r3, [r6, #0]
 8008e0e:	6825      	ldr	r5, [r4, #0]
 8008e10:	f015 0506 	ands.w	r5, r5, #6
 8008e14:	d106      	bne.n	8008e24 <_printf_common+0x48>
 8008e16:	f104 0a19 	add.w	sl, r4, #25
 8008e1a:	68e3      	ldr	r3, [r4, #12]
 8008e1c:	6832      	ldr	r2, [r6, #0]
 8008e1e:	1a9b      	subs	r3, r3, r2
 8008e20:	42ab      	cmp	r3, r5
 8008e22:	dc26      	bgt.n	8008e72 <_printf_common+0x96>
 8008e24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e28:	6822      	ldr	r2, [r4, #0]
 8008e2a:	3b00      	subs	r3, #0
 8008e2c:	bf18      	it	ne
 8008e2e:	2301      	movne	r3, #1
 8008e30:	0692      	lsls	r2, r2, #26
 8008e32:	d42b      	bmi.n	8008e8c <_printf_common+0xb0>
 8008e34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e38:	4641      	mov	r1, r8
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	47c8      	blx	r9
 8008e3e:	3001      	adds	r0, #1
 8008e40:	d01e      	beq.n	8008e80 <_printf_common+0xa4>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	6922      	ldr	r2, [r4, #16]
 8008e46:	f003 0306 	and.w	r3, r3, #6
 8008e4a:	2b04      	cmp	r3, #4
 8008e4c:	bf02      	ittt	eq
 8008e4e:	68e5      	ldreq	r5, [r4, #12]
 8008e50:	6833      	ldreq	r3, [r6, #0]
 8008e52:	1aed      	subeq	r5, r5, r3
 8008e54:	68a3      	ldr	r3, [r4, #8]
 8008e56:	bf0c      	ite	eq
 8008e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e5c:	2500      	movne	r5, #0
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	bfc4      	itt	gt
 8008e62:	1a9b      	subgt	r3, r3, r2
 8008e64:	18ed      	addgt	r5, r5, r3
 8008e66:	2600      	movs	r6, #0
 8008e68:	341a      	adds	r4, #26
 8008e6a:	42b5      	cmp	r5, r6
 8008e6c:	d11a      	bne.n	8008ea4 <_printf_common+0xc8>
 8008e6e:	2000      	movs	r0, #0
 8008e70:	e008      	b.n	8008e84 <_printf_common+0xa8>
 8008e72:	2301      	movs	r3, #1
 8008e74:	4652      	mov	r2, sl
 8008e76:	4641      	mov	r1, r8
 8008e78:	4638      	mov	r0, r7
 8008e7a:	47c8      	blx	r9
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	d103      	bne.n	8008e88 <_printf_common+0xac>
 8008e80:	f04f 30ff 	mov.w	r0, #4294967295
 8008e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e88:	3501      	adds	r5, #1
 8008e8a:	e7c6      	b.n	8008e1a <_printf_common+0x3e>
 8008e8c:	18e1      	adds	r1, r4, r3
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	2030      	movs	r0, #48	@ 0x30
 8008e92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e96:	4422      	add	r2, r4
 8008e98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ea0:	3302      	adds	r3, #2
 8008ea2:	e7c7      	b.n	8008e34 <_printf_common+0x58>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	4622      	mov	r2, r4
 8008ea8:	4641      	mov	r1, r8
 8008eaa:	4638      	mov	r0, r7
 8008eac:	47c8      	blx	r9
 8008eae:	3001      	adds	r0, #1
 8008eb0:	d0e6      	beq.n	8008e80 <_printf_common+0xa4>
 8008eb2:	3601      	adds	r6, #1
 8008eb4:	e7d9      	b.n	8008e6a <_printf_common+0x8e>
	...

08008eb8 <_printf_i>:
 8008eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ebc:	7e0f      	ldrb	r7, [r1, #24]
 8008ebe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ec0:	2f78      	cmp	r7, #120	@ 0x78
 8008ec2:	4691      	mov	r9, r2
 8008ec4:	4680      	mov	r8, r0
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	469a      	mov	sl, r3
 8008eca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ece:	d807      	bhi.n	8008ee0 <_printf_i+0x28>
 8008ed0:	2f62      	cmp	r7, #98	@ 0x62
 8008ed2:	d80a      	bhi.n	8008eea <_printf_i+0x32>
 8008ed4:	2f00      	cmp	r7, #0
 8008ed6:	f000 80d2 	beq.w	800907e <_printf_i+0x1c6>
 8008eda:	2f58      	cmp	r7, #88	@ 0x58
 8008edc:	f000 80b9 	beq.w	8009052 <_printf_i+0x19a>
 8008ee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ee4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ee8:	e03a      	b.n	8008f60 <_printf_i+0xa8>
 8008eea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008eee:	2b15      	cmp	r3, #21
 8008ef0:	d8f6      	bhi.n	8008ee0 <_printf_i+0x28>
 8008ef2:	a101      	add	r1, pc, #4	@ (adr r1, 8008ef8 <_printf_i+0x40>)
 8008ef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ef8:	08008f51 	.word	0x08008f51
 8008efc:	08008f65 	.word	0x08008f65
 8008f00:	08008ee1 	.word	0x08008ee1
 8008f04:	08008ee1 	.word	0x08008ee1
 8008f08:	08008ee1 	.word	0x08008ee1
 8008f0c:	08008ee1 	.word	0x08008ee1
 8008f10:	08008f65 	.word	0x08008f65
 8008f14:	08008ee1 	.word	0x08008ee1
 8008f18:	08008ee1 	.word	0x08008ee1
 8008f1c:	08008ee1 	.word	0x08008ee1
 8008f20:	08008ee1 	.word	0x08008ee1
 8008f24:	08009065 	.word	0x08009065
 8008f28:	08008f8f 	.word	0x08008f8f
 8008f2c:	0800901f 	.word	0x0800901f
 8008f30:	08008ee1 	.word	0x08008ee1
 8008f34:	08008ee1 	.word	0x08008ee1
 8008f38:	08009087 	.word	0x08009087
 8008f3c:	08008ee1 	.word	0x08008ee1
 8008f40:	08008f8f 	.word	0x08008f8f
 8008f44:	08008ee1 	.word	0x08008ee1
 8008f48:	08008ee1 	.word	0x08008ee1
 8008f4c:	08009027 	.word	0x08009027
 8008f50:	6833      	ldr	r3, [r6, #0]
 8008f52:	1d1a      	adds	r2, r3, #4
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6032      	str	r2, [r6, #0]
 8008f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f60:	2301      	movs	r3, #1
 8008f62:	e09d      	b.n	80090a0 <_printf_i+0x1e8>
 8008f64:	6833      	ldr	r3, [r6, #0]
 8008f66:	6820      	ldr	r0, [r4, #0]
 8008f68:	1d19      	adds	r1, r3, #4
 8008f6a:	6031      	str	r1, [r6, #0]
 8008f6c:	0606      	lsls	r6, r0, #24
 8008f6e:	d501      	bpl.n	8008f74 <_printf_i+0xbc>
 8008f70:	681d      	ldr	r5, [r3, #0]
 8008f72:	e003      	b.n	8008f7c <_printf_i+0xc4>
 8008f74:	0645      	lsls	r5, r0, #25
 8008f76:	d5fb      	bpl.n	8008f70 <_printf_i+0xb8>
 8008f78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f7c:	2d00      	cmp	r5, #0
 8008f7e:	da03      	bge.n	8008f88 <_printf_i+0xd0>
 8008f80:	232d      	movs	r3, #45	@ 0x2d
 8008f82:	426d      	negs	r5, r5
 8008f84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f88:	4859      	ldr	r0, [pc, #356]	@ (80090f0 <_printf_i+0x238>)
 8008f8a:	230a      	movs	r3, #10
 8008f8c:	e011      	b.n	8008fb2 <_printf_i+0xfa>
 8008f8e:	6821      	ldr	r1, [r4, #0]
 8008f90:	6833      	ldr	r3, [r6, #0]
 8008f92:	0608      	lsls	r0, r1, #24
 8008f94:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f98:	d402      	bmi.n	8008fa0 <_printf_i+0xe8>
 8008f9a:	0649      	lsls	r1, r1, #25
 8008f9c:	bf48      	it	mi
 8008f9e:	b2ad      	uxthmi	r5, r5
 8008fa0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008fa2:	4853      	ldr	r0, [pc, #332]	@ (80090f0 <_printf_i+0x238>)
 8008fa4:	6033      	str	r3, [r6, #0]
 8008fa6:	bf14      	ite	ne
 8008fa8:	230a      	movne	r3, #10
 8008faa:	2308      	moveq	r3, #8
 8008fac:	2100      	movs	r1, #0
 8008fae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008fb2:	6866      	ldr	r6, [r4, #4]
 8008fb4:	60a6      	str	r6, [r4, #8]
 8008fb6:	2e00      	cmp	r6, #0
 8008fb8:	bfa2      	ittt	ge
 8008fba:	6821      	ldrge	r1, [r4, #0]
 8008fbc:	f021 0104 	bicge.w	r1, r1, #4
 8008fc0:	6021      	strge	r1, [r4, #0]
 8008fc2:	b90d      	cbnz	r5, 8008fc8 <_printf_i+0x110>
 8008fc4:	2e00      	cmp	r6, #0
 8008fc6:	d04b      	beq.n	8009060 <_printf_i+0x1a8>
 8008fc8:	4616      	mov	r6, r2
 8008fca:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fce:	fb03 5711 	mls	r7, r3, r1, r5
 8008fd2:	5dc7      	ldrb	r7, [r0, r7]
 8008fd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fd8:	462f      	mov	r7, r5
 8008fda:	42bb      	cmp	r3, r7
 8008fdc:	460d      	mov	r5, r1
 8008fde:	d9f4      	bls.n	8008fca <_printf_i+0x112>
 8008fe0:	2b08      	cmp	r3, #8
 8008fe2:	d10b      	bne.n	8008ffc <_printf_i+0x144>
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	07df      	lsls	r7, r3, #31
 8008fe8:	d508      	bpl.n	8008ffc <_printf_i+0x144>
 8008fea:	6923      	ldr	r3, [r4, #16]
 8008fec:	6861      	ldr	r1, [r4, #4]
 8008fee:	4299      	cmp	r1, r3
 8008ff0:	bfde      	ittt	le
 8008ff2:	2330      	movle	r3, #48	@ 0x30
 8008ff4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ff8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ffc:	1b92      	subs	r2, r2, r6
 8008ffe:	6122      	str	r2, [r4, #16]
 8009000:	f8cd a000 	str.w	sl, [sp]
 8009004:	464b      	mov	r3, r9
 8009006:	aa03      	add	r2, sp, #12
 8009008:	4621      	mov	r1, r4
 800900a:	4640      	mov	r0, r8
 800900c:	f7ff fee6 	bl	8008ddc <_printf_common>
 8009010:	3001      	adds	r0, #1
 8009012:	d14a      	bne.n	80090aa <_printf_i+0x1f2>
 8009014:	f04f 30ff 	mov.w	r0, #4294967295
 8009018:	b004      	add	sp, #16
 800901a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	f043 0320 	orr.w	r3, r3, #32
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	4833      	ldr	r0, [pc, #204]	@ (80090f4 <_printf_i+0x23c>)
 8009028:	2778      	movs	r7, #120	@ 0x78
 800902a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	6831      	ldr	r1, [r6, #0]
 8009032:	061f      	lsls	r7, r3, #24
 8009034:	f851 5b04 	ldr.w	r5, [r1], #4
 8009038:	d402      	bmi.n	8009040 <_printf_i+0x188>
 800903a:	065f      	lsls	r7, r3, #25
 800903c:	bf48      	it	mi
 800903e:	b2ad      	uxthmi	r5, r5
 8009040:	6031      	str	r1, [r6, #0]
 8009042:	07d9      	lsls	r1, r3, #31
 8009044:	bf44      	itt	mi
 8009046:	f043 0320 	orrmi.w	r3, r3, #32
 800904a:	6023      	strmi	r3, [r4, #0]
 800904c:	b11d      	cbz	r5, 8009056 <_printf_i+0x19e>
 800904e:	2310      	movs	r3, #16
 8009050:	e7ac      	b.n	8008fac <_printf_i+0xf4>
 8009052:	4827      	ldr	r0, [pc, #156]	@ (80090f0 <_printf_i+0x238>)
 8009054:	e7e9      	b.n	800902a <_printf_i+0x172>
 8009056:	6823      	ldr	r3, [r4, #0]
 8009058:	f023 0320 	bic.w	r3, r3, #32
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	e7f6      	b.n	800904e <_printf_i+0x196>
 8009060:	4616      	mov	r6, r2
 8009062:	e7bd      	b.n	8008fe0 <_printf_i+0x128>
 8009064:	6833      	ldr	r3, [r6, #0]
 8009066:	6825      	ldr	r5, [r4, #0]
 8009068:	6961      	ldr	r1, [r4, #20]
 800906a:	1d18      	adds	r0, r3, #4
 800906c:	6030      	str	r0, [r6, #0]
 800906e:	062e      	lsls	r6, r5, #24
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	d501      	bpl.n	8009078 <_printf_i+0x1c0>
 8009074:	6019      	str	r1, [r3, #0]
 8009076:	e002      	b.n	800907e <_printf_i+0x1c6>
 8009078:	0668      	lsls	r0, r5, #25
 800907a:	d5fb      	bpl.n	8009074 <_printf_i+0x1bc>
 800907c:	8019      	strh	r1, [r3, #0]
 800907e:	2300      	movs	r3, #0
 8009080:	6123      	str	r3, [r4, #16]
 8009082:	4616      	mov	r6, r2
 8009084:	e7bc      	b.n	8009000 <_printf_i+0x148>
 8009086:	6833      	ldr	r3, [r6, #0]
 8009088:	1d1a      	adds	r2, r3, #4
 800908a:	6032      	str	r2, [r6, #0]
 800908c:	681e      	ldr	r6, [r3, #0]
 800908e:	6862      	ldr	r2, [r4, #4]
 8009090:	2100      	movs	r1, #0
 8009092:	4630      	mov	r0, r6
 8009094:	f7f7 f89c 	bl	80001d0 <memchr>
 8009098:	b108      	cbz	r0, 800909e <_printf_i+0x1e6>
 800909a:	1b80      	subs	r0, r0, r6
 800909c:	6060      	str	r0, [r4, #4]
 800909e:	6863      	ldr	r3, [r4, #4]
 80090a0:	6123      	str	r3, [r4, #16]
 80090a2:	2300      	movs	r3, #0
 80090a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090a8:	e7aa      	b.n	8009000 <_printf_i+0x148>
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	4632      	mov	r2, r6
 80090ae:	4649      	mov	r1, r9
 80090b0:	4640      	mov	r0, r8
 80090b2:	47d0      	blx	sl
 80090b4:	3001      	adds	r0, #1
 80090b6:	d0ad      	beq.n	8009014 <_printf_i+0x15c>
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	079b      	lsls	r3, r3, #30
 80090bc:	d413      	bmi.n	80090e6 <_printf_i+0x22e>
 80090be:	68e0      	ldr	r0, [r4, #12]
 80090c0:	9b03      	ldr	r3, [sp, #12]
 80090c2:	4298      	cmp	r0, r3
 80090c4:	bfb8      	it	lt
 80090c6:	4618      	movlt	r0, r3
 80090c8:	e7a6      	b.n	8009018 <_printf_i+0x160>
 80090ca:	2301      	movs	r3, #1
 80090cc:	4632      	mov	r2, r6
 80090ce:	4649      	mov	r1, r9
 80090d0:	4640      	mov	r0, r8
 80090d2:	47d0      	blx	sl
 80090d4:	3001      	adds	r0, #1
 80090d6:	d09d      	beq.n	8009014 <_printf_i+0x15c>
 80090d8:	3501      	adds	r5, #1
 80090da:	68e3      	ldr	r3, [r4, #12]
 80090dc:	9903      	ldr	r1, [sp, #12]
 80090de:	1a5b      	subs	r3, r3, r1
 80090e0:	42ab      	cmp	r3, r5
 80090e2:	dcf2      	bgt.n	80090ca <_printf_i+0x212>
 80090e4:	e7eb      	b.n	80090be <_printf_i+0x206>
 80090e6:	2500      	movs	r5, #0
 80090e8:	f104 0619 	add.w	r6, r4, #25
 80090ec:	e7f5      	b.n	80090da <_printf_i+0x222>
 80090ee:	bf00      	nop
 80090f0:	0800dbf3 	.word	0x0800dbf3
 80090f4:	0800dc04 	.word	0x0800dc04

080090f8 <_scanf_float>:
 80090f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	b087      	sub	sp, #28
 80090fe:	4617      	mov	r7, r2
 8009100:	9303      	str	r3, [sp, #12]
 8009102:	688b      	ldr	r3, [r1, #8]
 8009104:	1e5a      	subs	r2, r3, #1
 8009106:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800910a:	bf81      	itttt	hi
 800910c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009110:	eb03 0b05 	addhi.w	fp, r3, r5
 8009114:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009118:	608b      	strhi	r3, [r1, #8]
 800911a:	680b      	ldr	r3, [r1, #0]
 800911c:	460a      	mov	r2, r1
 800911e:	f04f 0500 	mov.w	r5, #0
 8009122:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009126:	f842 3b1c 	str.w	r3, [r2], #28
 800912a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800912e:	4680      	mov	r8, r0
 8009130:	460c      	mov	r4, r1
 8009132:	bf98      	it	ls
 8009134:	f04f 0b00 	movls.w	fp, #0
 8009138:	9201      	str	r2, [sp, #4]
 800913a:	4616      	mov	r6, r2
 800913c:	46aa      	mov	sl, r5
 800913e:	46a9      	mov	r9, r5
 8009140:	9502      	str	r5, [sp, #8]
 8009142:	68a2      	ldr	r2, [r4, #8]
 8009144:	b152      	cbz	r2, 800915c <_scanf_float+0x64>
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	2b4e      	cmp	r3, #78	@ 0x4e
 800914c:	d864      	bhi.n	8009218 <_scanf_float+0x120>
 800914e:	2b40      	cmp	r3, #64	@ 0x40
 8009150:	d83c      	bhi.n	80091cc <_scanf_float+0xd4>
 8009152:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009156:	b2c8      	uxtb	r0, r1
 8009158:	280e      	cmp	r0, #14
 800915a:	d93a      	bls.n	80091d2 <_scanf_float+0xda>
 800915c:	f1b9 0f00 	cmp.w	r9, #0
 8009160:	d003      	beq.n	800916a <_scanf_float+0x72>
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800916e:	f1ba 0f01 	cmp.w	sl, #1
 8009172:	f200 8117 	bhi.w	80093a4 <_scanf_float+0x2ac>
 8009176:	9b01      	ldr	r3, [sp, #4]
 8009178:	429e      	cmp	r6, r3
 800917a:	f200 8108 	bhi.w	800938e <_scanf_float+0x296>
 800917e:	2001      	movs	r0, #1
 8009180:	b007      	add	sp, #28
 8009182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009186:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800918a:	2a0d      	cmp	r2, #13
 800918c:	d8e6      	bhi.n	800915c <_scanf_float+0x64>
 800918e:	a101      	add	r1, pc, #4	@ (adr r1, 8009194 <_scanf_float+0x9c>)
 8009190:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009194:	080092db 	.word	0x080092db
 8009198:	0800915d 	.word	0x0800915d
 800919c:	0800915d 	.word	0x0800915d
 80091a0:	0800915d 	.word	0x0800915d
 80091a4:	0800933b 	.word	0x0800933b
 80091a8:	08009313 	.word	0x08009313
 80091ac:	0800915d 	.word	0x0800915d
 80091b0:	0800915d 	.word	0x0800915d
 80091b4:	080092e9 	.word	0x080092e9
 80091b8:	0800915d 	.word	0x0800915d
 80091bc:	0800915d 	.word	0x0800915d
 80091c0:	0800915d 	.word	0x0800915d
 80091c4:	0800915d 	.word	0x0800915d
 80091c8:	080092a1 	.word	0x080092a1
 80091cc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80091d0:	e7db      	b.n	800918a <_scanf_float+0x92>
 80091d2:	290e      	cmp	r1, #14
 80091d4:	d8c2      	bhi.n	800915c <_scanf_float+0x64>
 80091d6:	a001      	add	r0, pc, #4	@ (adr r0, 80091dc <_scanf_float+0xe4>)
 80091d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80091dc:	08009291 	.word	0x08009291
 80091e0:	0800915d 	.word	0x0800915d
 80091e4:	08009291 	.word	0x08009291
 80091e8:	08009327 	.word	0x08009327
 80091ec:	0800915d 	.word	0x0800915d
 80091f0:	08009239 	.word	0x08009239
 80091f4:	08009277 	.word	0x08009277
 80091f8:	08009277 	.word	0x08009277
 80091fc:	08009277 	.word	0x08009277
 8009200:	08009277 	.word	0x08009277
 8009204:	08009277 	.word	0x08009277
 8009208:	08009277 	.word	0x08009277
 800920c:	08009277 	.word	0x08009277
 8009210:	08009277 	.word	0x08009277
 8009214:	08009277 	.word	0x08009277
 8009218:	2b6e      	cmp	r3, #110	@ 0x6e
 800921a:	d809      	bhi.n	8009230 <_scanf_float+0x138>
 800921c:	2b60      	cmp	r3, #96	@ 0x60
 800921e:	d8b2      	bhi.n	8009186 <_scanf_float+0x8e>
 8009220:	2b54      	cmp	r3, #84	@ 0x54
 8009222:	d07b      	beq.n	800931c <_scanf_float+0x224>
 8009224:	2b59      	cmp	r3, #89	@ 0x59
 8009226:	d199      	bne.n	800915c <_scanf_float+0x64>
 8009228:	2d07      	cmp	r5, #7
 800922a:	d197      	bne.n	800915c <_scanf_float+0x64>
 800922c:	2508      	movs	r5, #8
 800922e:	e02c      	b.n	800928a <_scanf_float+0x192>
 8009230:	2b74      	cmp	r3, #116	@ 0x74
 8009232:	d073      	beq.n	800931c <_scanf_float+0x224>
 8009234:	2b79      	cmp	r3, #121	@ 0x79
 8009236:	e7f6      	b.n	8009226 <_scanf_float+0x12e>
 8009238:	6821      	ldr	r1, [r4, #0]
 800923a:	05c8      	lsls	r0, r1, #23
 800923c:	d51b      	bpl.n	8009276 <_scanf_float+0x17e>
 800923e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009242:	6021      	str	r1, [r4, #0]
 8009244:	f109 0901 	add.w	r9, r9, #1
 8009248:	f1bb 0f00 	cmp.w	fp, #0
 800924c:	d003      	beq.n	8009256 <_scanf_float+0x15e>
 800924e:	3201      	adds	r2, #1
 8009250:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009254:	60a2      	str	r2, [r4, #8]
 8009256:	68a3      	ldr	r3, [r4, #8]
 8009258:	3b01      	subs	r3, #1
 800925a:	60a3      	str	r3, [r4, #8]
 800925c:	6923      	ldr	r3, [r4, #16]
 800925e:	3301      	adds	r3, #1
 8009260:	6123      	str	r3, [r4, #16]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	3b01      	subs	r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	607b      	str	r3, [r7, #4]
 800926a:	f340 8087 	ble.w	800937c <_scanf_float+0x284>
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	3301      	adds	r3, #1
 8009272:	603b      	str	r3, [r7, #0]
 8009274:	e765      	b.n	8009142 <_scanf_float+0x4a>
 8009276:	eb1a 0105 	adds.w	r1, sl, r5
 800927a:	f47f af6f 	bne.w	800915c <_scanf_float+0x64>
 800927e:	6822      	ldr	r2, [r4, #0]
 8009280:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009284:	6022      	str	r2, [r4, #0]
 8009286:	460d      	mov	r5, r1
 8009288:	468a      	mov	sl, r1
 800928a:	f806 3b01 	strb.w	r3, [r6], #1
 800928e:	e7e2      	b.n	8009256 <_scanf_float+0x15e>
 8009290:	6822      	ldr	r2, [r4, #0]
 8009292:	0610      	lsls	r0, r2, #24
 8009294:	f57f af62 	bpl.w	800915c <_scanf_float+0x64>
 8009298:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800929c:	6022      	str	r2, [r4, #0]
 800929e:	e7f4      	b.n	800928a <_scanf_float+0x192>
 80092a0:	f1ba 0f00 	cmp.w	sl, #0
 80092a4:	d10e      	bne.n	80092c4 <_scanf_float+0x1cc>
 80092a6:	f1b9 0f00 	cmp.w	r9, #0
 80092aa:	d10e      	bne.n	80092ca <_scanf_float+0x1d2>
 80092ac:	6822      	ldr	r2, [r4, #0]
 80092ae:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80092b2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80092b6:	d108      	bne.n	80092ca <_scanf_float+0x1d2>
 80092b8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092bc:	6022      	str	r2, [r4, #0]
 80092be:	f04f 0a01 	mov.w	sl, #1
 80092c2:	e7e2      	b.n	800928a <_scanf_float+0x192>
 80092c4:	f1ba 0f02 	cmp.w	sl, #2
 80092c8:	d055      	beq.n	8009376 <_scanf_float+0x27e>
 80092ca:	2d01      	cmp	r5, #1
 80092cc:	d002      	beq.n	80092d4 <_scanf_float+0x1dc>
 80092ce:	2d04      	cmp	r5, #4
 80092d0:	f47f af44 	bne.w	800915c <_scanf_float+0x64>
 80092d4:	3501      	adds	r5, #1
 80092d6:	b2ed      	uxtb	r5, r5
 80092d8:	e7d7      	b.n	800928a <_scanf_float+0x192>
 80092da:	f1ba 0f01 	cmp.w	sl, #1
 80092de:	f47f af3d 	bne.w	800915c <_scanf_float+0x64>
 80092e2:	f04f 0a02 	mov.w	sl, #2
 80092e6:	e7d0      	b.n	800928a <_scanf_float+0x192>
 80092e8:	b97d      	cbnz	r5, 800930a <_scanf_float+0x212>
 80092ea:	f1b9 0f00 	cmp.w	r9, #0
 80092ee:	f47f af38 	bne.w	8009162 <_scanf_float+0x6a>
 80092f2:	6822      	ldr	r2, [r4, #0]
 80092f4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80092f8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80092fc:	f040 8108 	bne.w	8009510 <_scanf_float+0x418>
 8009300:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009304:	6022      	str	r2, [r4, #0]
 8009306:	2501      	movs	r5, #1
 8009308:	e7bf      	b.n	800928a <_scanf_float+0x192>
 800930a:	2d03      	cmp	r5, #3
 800930c:	d0e2      	beq.n	80092d4 <_scanf_float+0x1dc>
 800930e:	2d05      	cmp	r5, #5
 8009310:	e7de      	b.n	80092d0 <_scanf_float+0x1d8>
 8009312:	2d02      	cmp	r5, #2
 8009314:	f47f af22 	bne.w	800915c <_scanf_float+0x64>
 8009318:	2503      	movs	r5, #3
 800931a:	e7b6      	b.n	800928a <_scanf_float+0x192>
 800931c:	2d06      	cmp	r5, #6
 800931e:	f47f af1d 	bne.w	800915c <_scanf_float+0x64>
 8009322:	2507      	movs	r5, #7
 8009324:	e7b1      	b.n	800928a <_scanf_float+0x192>
 8009326:	6822      	ldr	r2, [r4, #0]
 8009328:	0591      	lsls	r1, r2, #22
 800932a:	f57f af17 	bpl.w	800915c <_scanf_float+0x64>
 800932e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009332:	6022      	str	r2, [r4, #0]
 8009334:	f8cd 9008 	str.w	r9, [sp, #8]
 8009338:	e7a7      	b.n	800928a <_scanf_float+0x192>
 800933a:	6822      	ldr	r2, [r4, #0]
 800933c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009340:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009344:	d006      	beq.n	8009354 <_scanf_float+0x25c>
 8009346:	0550      	lsls	r0, r2, #21
 8009348:	f57f af08 	bpl.w	800915c <_scanf_float+0x64>
 800934c:	f1b9 0f00 	cmp.w	r9, #0
 8009350:	f000 80de 	beq.w	8009510 <_scanf_float+0x418>
 8009354:	0591      	lsls	r1, r2, #22
 8009356:	bf58      	it	pl
 8009358:	9902      	ldrpl	r1, [sp, #8]
 800935a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800935e:	bf58      	it	pl
 8009360:	eba9 0101 	subpl.w	r1, r9, r1
 8009364:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009368:	bf58      	it	pl
 800936a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800936e:	6022      	str	r2, [r4, #0]
 8009370:	f04f 0900 	mov.w	r9, #0
 8009374:	e789      	b.n	800928a <_scanf_float+0x192>
 8009376:	f04f 0a03 	mov.w	sl, #3
 800937a:	e786      	b.n	800928a <_scanf_float+0x192>
 800937c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009380:	4639      	mov	r1, r7
 8009382:	4640      	mov	r0, r8
 8009384:	4798      	blx	r3
 8009386:	2800      	cmp	r0, #0
 8009388:	f43f aedb 	beq.w	8009142 <_scanf_float+0x4a>
 800938c:	e6e6      	b.n	800915c <_scanf_float+0x64>
 800938e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009392:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009396:	463a      	mov	r2, r7
 8009398:	4640      	mov	r0, r8
 800939a:	4798      	blx	r3
 800939c:	6923      	ldr	r3, [r4, #16]
 800939e:	3b01      	subs	r3, #1
 80093a0:	6123      	str	r3, [r4, #16]
 80093a2:	e6e8      	b.n	8009176 <_scanf_float+0x7e>
 80093a4:	1e6b      	subs	r3, r5, #1
 80093a6:	2b06      	cmp	r3, #6
 80093a8:	d824      	bhi.n	80093f4 <_scanf_float+0x2fc>
 80093aa:	2d02      	cmp	r5, #2
 80093ac:	d836      	bhi.n	800941c <_scanf_float+0x324>
 80093ae:	9b01      	ldr	r3, [sp, #4]
 80093b0:	429e      	cmp	r6, r3
 80093b2:	f67f aee4 	bls.w	800917e <_scanf_float+0x86>
 80093b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093be:	463a      	mov	r2, r7
 80093c0:	4640      	mov	r0, r8
 80093c2:	4798      	blx	r3
 80093c4:	6923      	ldr	r3, [r4, #16]
 80093c6:	3b01      	subs	r3, #1
 80093c8:	6123      	str	r3, [r4, #16]
 80093ca:	e7f0      	b.n	80093ae <_scanf_float+0x2b6>
 80093cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093d0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80093d4:	463a      	mov	r2, r7
 80093d6:	4640      	mov	r0, r8
 80093d8:	4798      	blx	r3
 80093da:	6923      	ldr	r3, [r4, #16]
 80093dc:	3b01      	subs	r3, #1
 80093de:	6123      	str	r3, [r4, #16]
 80093e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093e4:	fa5f fa8a 	uxtb.w	sl, sl
 80093e8:	f1ba 0f02 	cmp.w	sl, #2
 80093ec:	d1ee      	bne.n	80093cc <_scanf_float+0x2d4>
 80093ee:	3d03      	subs	r5, #3
 80093f0:	b2ed      	uxtb	r5, r5
 80093f2:	1b76      	subs	r6, r6, r5
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	05da      	lsls	r2, r3, #23
 80093f8:	d530      	bpl.n	800945c <_scanf_float+0x364>
 80093fa:	055b      	lsls	r3, r3, #21
 80093fc:	d511      	bpl.n	8009422 <_scanf_float+0x32a>
 80093fe:	9b01      	ldr	r3, [sp, #4]
 8009400:	429e      	cmp	r6, r3
 8009402:	f67f aebc 	bls.w	800917e <_scanf_float+0x86>
 8009406:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800940a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800940e:	463a      	mov	r2, r7
 8009410:	4640      	mov	r0, r8
 8009412:	4798      	blx	r3
 8009414:	6923      	ldr	r3, [r4, #16]
 8009416:	3b01      	subs	r3, #1
 8009418:	6123      	str	r3, [r4, #16]
 800941a:	e7f0      	b.n	80093fe <_scanf_float+0x306>
 800941c:	46aa      	mov	sl, r5
 800941e:	46b3      	mov	fp, r6
 8009420:	e7de      	b.n	80093e0 <_scanf_float+0x2e8>
 8009422:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009426:	6923      	ldr	r3, [r4, #16]
 8009428:	2965      	cmp	r1, #101	@ 0x65
 800942a:	f103 33ff 	add.w	r3, r3, #4294967295
 800942e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009432:	6123      	str	r3, [r4, #16]
 8009434:	d00c      	beq.n	8009450 <_scanf_float+0x358>
 8009436:	2945      	cmp	r1, #69	@ 0x45
 8009438:	d00a      	beq.n	8009450 <_scanf_float+0x358>
 800943a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800943e:	463a      	mov	r2, r7
 8009440:	4640      	mov	r0, r8
 8009442:	4798      	blx	r3
 8009444:	6923      	ldr	r3, [r4, #16]
 8009446:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800944a:	3b01      	subs	r3, #1
 800944c:	1eb5      	subs	r5, r6, #2
 800944e:	6123      	str	r3, [r4, #16]
 8009450:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009454:	463a      	mov	r2, r7
 8009456:	4640      	mov	r0, r8
 8009458:	4798      	blx	r3
 800945a:	462e      	mov	r6, r5
 800945c:	6822      	ldr	r2, [r4, #0]
 800945e:	f012 0210 	ands.w	r2, r2, #16
 8009462:	d001      	beq.n	8009468 <_scanf_float+0x370>
 8009464:	2000      	movs	r0, #0
 8009466:	e68b      	b.n	8009180 <_scanf_float+0x88>
 8009468:	7032      	strb	r2, [r6, #0]
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009474:	d11c      	bne.n	80094b0 <_scanf_float+0x3b8>
 8009476:	9b02      	ldr	r3, [sp, #8]
 8009478:	454b      	cmp	r3, r9
 800947a:	eba3 0209 	sub.w	r2, r3, r9
 800947e:	d123      	bne.n	80094c8 <_scanf_float+0x3d0>
 8009480:	9901      	ldr	r1, [sp, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	4640      	mov	r0, r8
 8009486:	f7ff f947 	bl	8008718 <_strtod_r>
 800948a:	9b03      	ldr	r3, [sp, #12]
 800948c:	6821      	ldr	r1, [r4, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f011 0f02 	tst.w	r1, #2
 8009494:	ec57 6b10 	vmov	r6, r7, d0
 8009498:	f103 0204 	add.w	r2, r3, #4
 800949c:	d01f      	beq.n	80094de <_scanf_float+0x3e6>
 800949e:	9903      	ldr	r1, [sp, #12]
 80094a0:	600a      	str	r2, [r1, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	e9c3 6700 	strd	r6, r7, [r3]
 80094a8:	68e3      	ldr	r3, [r4, #12]
 80094aa:	3301      	adds	r3, #1
 80094ac:	60e3      	str	r3, [r4, #12]
 80094ae:	e7d9      	b.n	8009464 <_scanf_float+0x36c>
 80094b0:	9b04      	ldr	r3, [sp, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d0e4      	beq.n	8009480 <_scanf_float+0x388>
 80094b6:	9905      	ldr	r1, [sp, #20]
 80094b8:	230a      	movs	r3, #10
 80094ba:	3101      	adds	r1, #1
 80094bc:	4640      	mov	r0, r8
 80094be:	f7ff f9b7 	bl	8008830 <_strtol_r>
 80094c2:	9b04      	ldr	r3, [sp, #16]
 80094c4:	9e05      	ldr	r6, [sp, #20]
 80094c6:	1ac2      	subs	r2, r0, r3
 80094c8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80094cc:	429e      	cmp	r6, r3
 80094ce:	bf28      	it	cs
 80094d0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80094d4:	4910      	ldr	r1, [pc, #64]	@ (8009518 <_scanf_float+0x420>)
 80094d6:	4630      	mov	r0, r6
 80094d8:	f000 f8e4 	bl	80096a4 <siprintf>
 80094dc:	e7d0      	b.n	8009480 <_scanf_float+0x388>
 80094de:	f011 0f04 	tst.w	r1, #4
 80094e2:	9903      	ldr	r1, [sp, #12]
 80094e4:	600a      	str	r2, [r1, #0]
 80094e6:	d1dc      	bne.n	80094a2 <_scanf_float+0x3aa>
 80094e8:	681d      	ldr	r5, [r3, #0]
 80094ea:	4632      	mov	r2, r6
 80094ec:	463b      	mov	r3, r7
 80094ee:	4630      	mov	r0, r6
 80094f0:	4639      	mov	r1, r7
 80094f2:	f7f7 fb1b 	bl	8000b2c <__aeabi_dcmpun>
 80094f6:	b128      	cbz	r0, 8009504 <_scanf_float+0x40c>
 80094f8:	4808      	ldr	r0, [pc, #32]	@ (800951c <_scanf_float+0x424>)
 80094fa:	f000 fa3d 	bl	8009978 <nanf>
 80094fe:	ed85 0a00 	vstr	s0, [r5]
 8009502:	e7d1      	b.n	80094a8 <_scanf_float+0x3b0>
 8009504:	4630      	mov	r0, r6
 8009506:	4639      	mov	r1, r7
 8009508:	f7f7 fb6e 	bl	8000be8 <__aeabi_d2f>
 800950c:	6028      	str	r0, [r5, #0]
 800950e:	e7cb      	b.n	80094a8 <_scanf_float+0x3b0>
 8009510:	f04f 0900 	mov.w	r9, #0
 8009514:	e629      	b.n	800916a <_scanf_float+0x72>
 8009516:	bf00      	nop
 8009518:	0800dc15 	.word	0x0800dc15
 800951c:	0800dcce 	.word	0x0800dcce

08009520 <std>:
 8009520:	2300      	movs	r3, #0
 8009522:	b510      	push	{r4, lr}
 8009524:	4604      	mov	r4, r0
 8009526:	e9c0 3300 	strd	r3, r3, [r0]
 800952a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800952e:	6083      	str	r3, [r0, #8]
 8009530:	8181      	strh	r1, [r0, #12]
 8009532:	6643      	str	r3, [r0, #100]	@ 0x64
 8009534:	81c2      	strh	r2, [r0, #14]
 8009536:	6183      	str	r3, [r0, #24]
 8009538:	4619      	mov	r1, r3
 800953a:	2208      	movs	r2, #8
 800953c:	305c      	adds	r0, #92	@ 0x5c
 800953e:	f000 f914 	bl	800976a <memset>
 8009542:	4b0d      	ldr	r3, [pc, #52]	@ (8009578 <std+0x58>)
 8009544:	6263      	str	r3, [r4, #36]	@ 0x24
 8009546:	4b0d      	ldr	r3, [pc, #52]	@ (800957c <std+0x5c>)
 8009548:	62a3      	str	r3, [r4, #40]	@ 0x28
 800954a:	4b0d      	ldr	r3, [pc, #52]	@ (8009580 <std+0x60>)
 800954c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800954e:	4b0d      	ldr	r3, [pc, #52]	@ (8009584 <std+0x64>)
 8009550:	6323      	str	r3, [r4, #48]	@ 0x30
 8009552:	4b0d      	ldr	r3, [pc, #52]	@ (8009588 <std+0x68>)
 8009554:	6224      	str	r4, [r4, #32]
 8009556:	429c      	cmp	r4, r3
 8009558:	d006      	beq.n	8009568 <std+0x48>
 800955a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800955e:	4294      	cmp	r4, r2
 8009560:	d002      	beq.n	8009568 <std+0x48>
 8009562:	33d0      	adds	r3, #208	@ 0xd0
 8009564:	429c      	cmp	r4, r3
 8009566:	d105      	bne.n	8009574 <std+0x54>
 8009568:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800956c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009570:	f000 b9e6 	b.w	8009940 <__retarget_lock_init_recursive>
 8009574:	bd10      	pop	{r4, pc}
 8009576:	bf00      	nop
 8009578:	080096e5 	.word	0x080096e5
 800957c:	08009707 	.word	0x08009707
 8009580:	0800973f 	.word	0x0800973f
 8009584:	08009763 	.word	0x08009763
 8009588:	200006f8 	.word	0x200006f8

0800958c <stdio_exit_handler>:
 800958c:	4a02      	ldr	r2, [pc, #8]	@ (8009598 <stdio_exit_handler+0xc>)
 800958e:	4903      	ldr	r1, [pc, #12]	@ (800959c <stdio_exit_handler+0x10>)
 8009590:	4803      	ldr	r0, [pc, #12]	@ (80095a0 <stdio_exit_handler+0x14>)
 8009592:	f000 b869 	b.w	8009668 <_fwalk_sglue>
 8009596:	bf00      	nop
 8009598:	200000d8 	.word	0x200000d8
 800959c:	0800bc25 	.word	0x0800bc25
 80095a0:	20000254 	.word	0x20000254

080095a4 <cleanup_stdio>:
 80095a4:	6841      	ldr	r1, [r0, #4]
 80095a6:	4b0c      	ldr	r3, [pc, #48]	@ (80095d8 <cleanup_stdio+0x34>)
 80095a8:	4299      	cmp	r1, r3
 80095aa:	b510      	push	{r4, lr}
 80095ac:	4604      	mov	r4, r0
 80095ae:	d001      	beq.n	80095b4 <cleanup_stdio+0x10>
 80095b0:	f002 fb38 	bl	800bc24 <_fflush_r>
 80095b4:	68a1      	ldr	r1, [r4, #8]
 80095b6:	4b09      	ldr	r3, [pc, #36]	@ (80095dc <cleanup_stdio+0x38>)
 80095b8:	4299      	cmp	r1, r3
 80095ba:	d002      	beq.n	80095c2 <cleanup_stdio+0x1e>
 80095bc:	4620      	mov	r0, r4
 80095be:	f002 fb31 	bl	800bc24 <_fflush_r>
 80095c2:	68e1      	ldr	r1, [r4, #12]
 80095c4:	4b06      	ldr	r3, [pc, #24]	@ (80095e0 <cleanup_stdio+0x3c>)
 80095c6:	4299      	cmp	r1, r3
 80095c8:	d004      	beq.n	80095d4 <cleanup_stdio+0x30>
 80095ca:	4620      	mov	r0, r4
 80095cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d0:	f002 bb28 	b.w	800bc24 <_fflush_r>
 80095d4:	bd10      	pop	{r4, pc}
 80095d6:	bf00      	nop
 80095d8:	200006f8 	.word	0x200006f8
 80095dc:	20000760 	.word	0x20000760
 80095e0:	200007c8 	.word	0x200007c8

080095e4 <global_stdio_init.part.0>:
 80095e4:	b510      	push	{r4, lr}
 80095e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009614 <global_stdio_init.part.0+0x30>)
 80095e8:	4c0b      	ldr	r4, [pc, #44]	@ (8009618 <global_stdio_init.part.0+0x34>)
 80095ea:	4a0c      	ldr	r2, [pc, #48]	@ (800961c <global_stdio_init.part.0+0x38>)
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	4620      	mov	r0, r4
 80095f0:	2200      	movs	r2, #0
 80095f2:	2104      	movs	r1, #4
 80095f4:	f7ff ff94 	bl	8009520 <std>
 80095f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095fc:	2201      	movs	r2, #1
 80095fe:	2109      	movs	r1, #9
 8009600:	f7ff ff8e 	bl	8009520 <std>
 8009604:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009608:	2202      	movs	r2, #2
 800960a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800960e:	2112      	movs	r1, #18
 8009610:	f7ff bf86 	b.w	8009520 <std>
 8009614:	20000830 	.word	0x20000830
 8009618:	200006f8 	.word	0x200006f8
 800961c:	0800958d 	.word	0x0800958d

08009620 <__sfp_lock_acquire>:
 8009620:	4801      	ldr	r0, [pc, #4]	@ (8009628 <__sfp_lock_acquire+0x8>)
 8009622:	f000 b98e 	b.w	8009942 <__retarget_lock_acquire_recursive>
 8009626:	bf00      	nop
 8009628:	20000839 	.word	0x20000839

0800962c <__sfp_lock_release>:
 800962c:	4801      	ldr	r0, [pc, #4]	@ (8009634 <__sfp_lock_release+0x8>)
 800962e:	f000 b989 	b.w	8009944 <__retarget_lock_release_recursive>
 8009632:	bf00      	nop
 8009634:	20000839 	.word	0x20000839

08009638 <__sinit>:
 8009638:	b510      	push	{r4, lr}
 800963a:	4604      	mov	r4, r0
 800963c:	f7ff fff0 	bl	8009620 <__sfp_lock_acquire>
 8009640:	6a23      	ldr	r3, [r4, #32]
 8009642:	b11b      	cbz	r3, 800964c <__sinit+0x14>
 8009644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009648:	f7ff bff0 	b.w	800962c <__sfp_lock_release>
 800964c:	4b04      	ldr	r3, [pc, #16]	@ (8009660 <__sinit+0x28>)
 800964e:	6223      	str	r3, [r4, #32]
 8009650:	4b04      	ldr	r3, [pc, #16]	@ (8009664 <__sinit+0x2c>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1f5      	bne.n	8009644 <__sinit+0xc>
 8009658:	f7ff ffc4 	bl	80095e4 <global_stdio_init.part.0>
 800965c:	e7f2      	b.n	8009644 <__sinit+0xc>
 800965e:	bf00      	nop
 8009660:	080095a5 	.word	0x080095a5
 8009664:	20000830 	.word	0x20000830

08009668 <_fwalk_sglue>:
 8009668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800966c:	4607      	mov	r7, r0
 800966e:	4688      	mov	r8, r1
 8009670:	4614      	mov	r4, r2
 8009672:	2600      	movs	r6, #0
 8009674:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009678:	f1b9 0901 	subs.w	r9, r9, #1
 800967c:	d505      	bpl.n	800968a <_fwalk_sglue+0x22>
 800967e:	6824      	ldr	r4, [r4, #0]
 8009680:	2c00      	cmp	r4, #0
 8009682:	d1f7      	bne.n	8009674 <_fwalk_sglue+0xc>
 8009684:	4630      	mov	r0, r6
 8009686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800968a:	89ab      	ldrh	r3, [r5, #12]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d907      	bls.n	80096a0 <_fwalk_sglue+0x38>
 8009690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009694:	3301      	adds	r3, #1
 8009696:	d003      	beq.n	80096a0 <_fwalk_sglue+0x38>
 8009698:	4629      	mov	r1, r5
 800969a:	4638      	mov	r0, r7
 800969c:	47c0      	blx	r8
 800969e:	4306      	orrs	r6, r0
 80096a0:	3568      	adds	r5, #104	@ 0x68
 80096a2:	e7e9      	b.n	8009678 <_fwalk_sglue+0x10>

080096a4 <siprintf>:
 80096a4:	b40e      	push	{r1, r2, r3}
 80096a6:	b500      	push	{lr}
 80096a8:	b09c      	sub	sp, #112	@ 0x70
 80096aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80096ac:	9002      	str	r0, [sp, #8]
 80096ae:	9006      	str	r0, [sp, #24]
 80096b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80096b4:	4809      	ldr	r0, [pc, #36]	@ (80096dc <siprintf+0x38>)
 80096b6:	9107      	str	r1, [sp, #28]
 80096b8:	9104      	str	r1, [sp, #16]
 80096ba:	4909      	ldr	r1, [pc, #36]	@ (80096e0 <siprintf+0x3c>)
 80096bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c0:	9105      	str	r1, [sp, #20]
 80096c2:	6800      	ldr	r0, [r0, #0]
 80096c4:	9301      	str	r3, [sp, #4]
 80096c6:	a902      	add	r1, sp, #8
 80096c8:	f002 f92c 	bl	800b924 <_svfiprintf_r>
 80096cc:	9b02      	ldr	r3, [sp, #8]
 80096ce:	2200      	movs	r2, #0
 80096d0:	701a      	strb	r2, [r3, #0]
 80096d2:	b01c      	add	sp, #112	@ 0x70
 80096d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096d8:	b003      	add	sp, #12
 80096da:	4770      	bx	lr
 80096dc:	20000250 	.word	0x20000250
 80096e0:	ffff0208 	.word	0xffff0208

080096e4 <__sread>:
 80096e4:	b510      	push	{r4, lr}
 80096e6:	460c      	mov	r4, r1
 80096e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ec:	f000 f8da 	bl	80098a4 <_read_r>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	bfab      	itete	ge
 80096f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80096f6:	89a3      	ldrhlt	r3, [r4, #12]
 80096f8:	181b      	addge	r3, r3, r0
 80096fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80096fe:	bfac      	ite	ge
 8009700:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009702:	81a3      	strhlt	r3, [r4, #12]
 8009704:	bd10      	pop	{r4, pc}

08009706 <__swrite>:
 8009706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800970a:	461f      	mov	r7, r3
 800970c:	898b      	ldrh	r3, [r1, #12]
 800970e:	05db      	lsls	r3, r3, #23
 8009710:	4605      	mov	r5, r0
 8009712:	460c      	mov	r4, r1
 8009714:	4616      	mov	r6, r2
 8009716:	d505      	bpl.n	8009724 <__swrite+0x1e>
 8009718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800971c:	2302      	movs	r3, #2
 800971e:	2200      	movs	r2, #0
 8009720:	f000 f8ae 	bl	8009880 <_lseek_r>
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800972a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800972e:	81a3      	strh	r3, [r4, #12]
 8009730:	4632      	mov	r2, r6
 8009732:	463b      	mov	r3, r7
 8009734:	4628      	mov	r0, r5
 8009736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800973a:	f000 b8c5 	b.w	80098c8 <_write_r>

0800973e <__sseek>:
 800973e:	b510      	push	{r4, lr}
 8009740:	460c      	mov	r4, r1
 8009742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009746:	f000 f89b 	bl	8009880 <_lseek_r>
 800974a:	1c43      	adds	r3, r0, #1
 800974c:	89a3      	ldrh	r3, [r4, #12]
 800974e:	bf15      	itete	ne
 8009750:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009752:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009756:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800975a:	81a3      	strheq	r3, [r4, #12]
 800975c:	bf18      	it	ne
 800975e:	81a3      	strhne	r3, [r4, #12]
 8009760:	bd10      	pop	{r4, pc}

08009762 <__sclose>:
 8009762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009766:	f000 b87b 	b.w	8009860 <_close_r>

0800976a <memset>:
 800976a:	4402      	add	r2, r0
 800976c:	4603      	mov	r3, r0
 800976e:	4293      	cmp	r3, r2
 8009770:	d100      	bne.n	8009774 <memset+0xa>
 8009772:	4770      	bx	lr
 8009774:	f803 1b01 	strb.w	r1, [r3], #1
 8009778:	e7f9      	b.n	800976e <memset+0x4>

0800977a <strncmp>:
 800977a:	b510      	push	{r4, lr}
 800977c:	b16a      	cbz	r2, 800979a <strncmp+0x20>
 800977e:	3901      	subs	r1, #1
 8009780:	1884      	adds	r4, r0, r2
 8009782:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009786:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800978a:	429a      	cmp	r2, r3
 800978c:	d103      	bne.n	8009796 <strncmp+0x1c>
 800978e:	42a0      	cmp	r0, r4
 8009790:	d001      	beq.n	8009796 <strncmp+0x1c>
 8009792:	2a00      	cmp	r2, #0
 8009794:	d1f5      	bne.n	8009782 <strncmp+0x8>
 8009796:	1ad0      	subs	r0, r2, r3
 8009798:	bd10      	pop	{r4, pc}
 800979a:	4610      	mov	r0, r2
 800979c:	e7fc      	b.n	8009798 <strncmp+0x1e>
	...

080097a0 <strtok>:
 80097a0:	4b16      	ldr	r3, [pc, #88]	@ (80097fc <strtok+0x5c>)
 80097a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a6:	681f      	ldr	r7, [r3, #0]
 80097a8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80097aa:	4605      	mov	r5, r0
 80097ac:	460e      	mov	r6, r1
 80097ae:	b9ec      	cbnz	r4, 80097ec <strtok+0x4c>
 80097b0:	2050      	movs	r0, #80	@ 0x50
 80097b2:	f001 fad5 	bl	800ad60 <malloc>
 80097b6:	4602      	mov	r2, r0
 80097b8:	6478      	str	r0, [r7, #68]	@ 0x44
 80097ba:	b920      	cbnz	r0, 80097c6 <strtok+0x26>
 80097bc:	4b10      	ldr	r3, [pc, #64]	@ (8009800 <strtok+0x60>)
 80097be:	4811      	ldr	r0, [pc, #68]	@ (8009804 <strtok+0x64>)
 80097c0:	215b      	movs	r1, #91	@ 0x5b
 80097c2:	f000 f8df 	bl	8009984 <__assert_func>
 80097c6:	e9c0 4400 	strd	r4, r4, [r0]
 80097ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80097ce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80097d2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80097d6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80097da:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80097de:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80097e2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80097e6:	6184      	str	r4, [r0, #24]
 80097e8:	7704      	strb	r4, [r0, #28]
 80097ea:	6244      	str	r4, [r0, #36]	@ 0x24
 80097ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097ee:	4631      	mov	r1, r6
 80097f0:	4628      	mov	r0, r5
 80097f2:	2301      	movs	r3, #1
 80097f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097f8:	f000 b806 	b.w	8009808 <__strtok_r>
 80097fc:	20000250 	.word	0x20000250
 8009800:	0800dc1a 	.word	0x0800dc1a
 8009804:	0800dc31 	.word	0x0800dc31

08009808 <__strtok_r>:
 8009808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800980a:	4604      	mov	r4, r0
 800980c:	b908      	cbnz	r0, 8009812 <__strtok_r+0xa>
 800980e:	6814      	ldr	r4, [r2, #0]
 8009810:	b144      	cbz	r4, 8009824 <__strtok_r+0x1c>
 8009812:	4620      	mov	r0, r4
 8009814:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009818:	460f      	mov	r7, r1
 800981a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800981e:	b91e      	cbnz	r6, 8009828 <__strtok_r+0x20>
 8009820:	b965      	cbnz	r5, 800983c <__strtok_r+0x34>
 8009822:	6015      	str	r5, [r2, #0]
 8009824:	2000      	movs	r0, #0
 8009826:	e005      	b.n	8009834 <__strtok_r+0x2c>
 8009828:	42b5      	cmp	r5, r6
 800982a:	d1f6      	bne.n	800981a <__strtok_r+0x12>
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1f0      	bne.n	8009812 <__strtok_r+0xa>
 8009830:	6014      	str	r4, [r2, #0]
 8009832:	7003      	strb	r3, [r0, #0]
 8009834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009836:	461c      	mov	r4, r3
 8009838:	e00c      	b.n	8009854 <__strtok_r+0x4c>
 800983a:	b915      	cbnz	r5, 8009842 <__strtok_r+0x3a>
 800983c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009840:	460e      	mov	r6, r1
 8009842:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009846:	42ab      	cmp	r3, r5
 8009848:	d1f7      	bne.n	800983a <__strtok_r+0x32>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0f3      	beq.n	8009836 <__strtok_r+0x2e>
 800984e:	2300      	movs	r3, #0
 8009850:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009854:	6014      	str	r4, [r2, #0]
 8009856:	e7ed      	b.n	8009834 <__strtok_r+0x2c>

08009858 <_localeconv_r>:
 8009858:	4800      	ldr	r0, [pc, #0]	@ (800985c <_localeconv_r+0x4>)
 800985a:	4770      	bx	lr
 800985c:	200001d4 	.word	0x200001d4

08009860 <_close_r>:
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	4d06      	ldr	r5, [pc, #24]	@ (800987c <_close_r+0x1c>)
 8009864:	2300      	movs	r3, #0
 8009866:	4604      	mov	r4, r0
 8009868:	4608      	mov	r0, r1
 800986a:	602b      	str	r3, [r5, #0]
 800986c:	f7fa fb70 	bl	8003f50 <_close>
 8009870:	1c43      	adds	r3, r0, #1
 8009872:	d102      	bne.n	800987a <_close_r+0x1a>
 8009874:	682b      	ldr	r3, [r5, #0]
 8009876:	b103      	cbz	r3, 800987a <_close_r+0x1a>
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	bd38      	pop	{r3, r4, r5, pc}
 800987c:	20000834 	.word	0x20000834

08009880 <_lseek_r>:
 8009880:	b538      	push	{r3, r4, r5, lr}
 8009882:	4d07      	ldr	r5, [pc, #28]	@ (80098a0 <_lseek_r+0x20>)
 8009884:	4604      	mov	r4, r0
 8009886:	4608      	mov	r0, r1
 8009888:	4611      	mov	r1, r2
 800988a:	2200      	movs	r2, #0
 800988c:	602a      	str	r2, [r5, #0]
 800988e:	461a      	mov	r2, r3
 8009890:	f7fa fb85 	bl	8003f9e <_lseek>
 8009894:	1c43      	adds	r3, r0, #1
 8009896:	d102      	bne.n	800989e <_lseek_r+0x1e>
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	b103      	cbz	r3, 800989e <_lseek_r+0x1e>
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	bd38      	pop	{r3, r4, r5, pc}
 80098a0:	20000834 	.word	0x20000834

080098a4 <_read_r>:
 80098a4:	b538      	push	{r3, r4, r5, lr}
 80098a6:	4d07      	ldr	r5, [pc, #28]	@ (80098c4 <_read_r+0x20>)
 80098a8:	4604      	mov	r4, r0
 80098aa:	4608      	mov	r0, r1
 80098ac:	4611      	mov	r1, r2
 80098ae:	2200      	movs	r2, #0
 80098b0:	602a      	str	r2, [r5, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	f7fa fb13 	bl	8003ede <_read>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d102      	bne.n	80098c2 <_read_r+0x1e>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	b103      	cbz	r3, 80098c2 <_read_r+0x1e>
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	20000834 	.word	0x20000834

080098c8 <_write_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4d07      	ldr	r5, [pc, #28]	@ (80098e8 <_write_r+0x20>)
 80098cc:	4604      	mov	r4, r0
 80098ce:	4608      	mov	r0, r1
 80098d0:	4611      	mov	r1, r2
 80098d2:	2200      	movs	r2, #0
 80098d4:	602a      	str	r2, [r5, #0]
 80098d6:	461a      	mov	r2, r3
 80098d8:	f7fa fb1e 	bl	8003f18 <_write>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d102      	bne.n	80098e6 <_write_r+0x1e>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	b103      	cbz	r3, 80098e6 <_write_r+0x1e>
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	20000834 	.word	0x20000834

080098ec <__errno>:
 80098ec:	4b01      	ldr	r3, [pc, #4]	@ (80098f4 <__errno+0x8>)
 80098ee:	6818      	ldr	r0, [r3, #0]
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	20000250 	.word	0x20000250

080098f8 <__libc_init_array>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	4d0d      	ldr	r5, [pc, #52]	@ (8009930 <__libc_init_array+0x38>)
 80098fc:	4c0d      	ldr	r4, [pc, #52]	@ (8009934 <__libc_init_array+0x3c>)
 80098fe:	1b64      	subs	r4, r4, r5
 8009900:	10a4      	asrs	r4, r4, #2
 8009902:	2600      	movs	r6, #0
 8009904:	42a6      	cmp	r6, r4
 8009906:	d109      	bne.n	800991c <__libc_init_array+0x24>
 8009908:	4d0b      	ldr	r5, [pc, #44]	@ (8009938 <__libc_init_array+0x40>)
 800990a:	4c0c      	ldr	r4, [pc, #48]	@ (800993c <__libc_init_array+0x44>)
 800990c:	f004 f80c 	bl	800d928 <_init>
 8009910:	1b64      	subs	r4, r4, r5
 8009912:	10a4      	asrs	r4, r4, #2
 8009914:	2600      	movs	r6, #0
 8009916:	42a6      	cmp	r6, r4
 8009918:	d105      	bne.n	8009926 <__libc_init_array+0x2e>
 800991a:	bd70      	pop	{r4, r5, r6, pc}
 800991c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009920:	4798      	blx	r3
 8009922:	3601      	adds	r6, #1
 8009924:	e7ee      	b.n	8009904 <__libc_init_array+0xc>
 8009926:	f855 3b04 	ldr.w	r3, [r5], #4
 800992a:	4798      	blx	r3
 800992c:	3601      	adds	r6, #1
 800992e:	e7f2      	b.n	8009916 <__libc_init_array+0x1e>
 8009930:	0800e0f8 	.word	0x0800e0f8
 8009934:	0800e0f8 	.word	0x0800e0f8
 8009938:	0800e0f8 	.word	0x0800e0f8
 800993c:	0800e0fc 	.word	0x0800e0fc

08009940 <__retarget_lock_init_recursive>:
 8009940:	4770      	bx	lr

08009942 <__retarget_lock_acquire_recursive>:
 8009942:	4770      	bx	lr

08009944 <__retarget_lock_release_recursive>:
 8009944:	4770      	bx	lr

08009946 <memcpy>:
 8009946:	440a      	add	r2, r1
 8009948:	4291      	cmp	r1, r2
 800994a:	f100 33ff 	add.w	r3, r0, #4294967295
 800994e:	d100      	bne.n	8009952 <memcpy+0xc>
 8009950:	4770      	bx	lr
 8009952:	b510      	push	{r4, lr}
 8009954:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009958:	f803 4f01 	strb.w	r4, [r3, #1]!
 800995c:	4291      	cmp	r1, r2
 800995e:	d1f9      	bne.n	8009954 <memcpy+0xe>
 8009960:	bd10      	pop	{r4, pc}
 8009962:	0000      	movs	r0, r0
 8009964:	0000      	movs	r0, r0
	...

08009968 <nan>:
 8009968:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009970 <nan+0x8>
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	00000000 	.word	0x00000000
 8009974:	7ff80000 	.word	0x7ff80000

08009978 <nanf>:
 8009978:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009980 <nanf+0x8>
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	7fc00000 	.word	0x7fc00000

08009984 <__assert_func>:
 8009984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009986:	4614      	mov	r4, r2
 8009988:	461a      	mov	r2, r3
 800998a:	4b09      	ldr	r3, [pc, #36]	@ (80099b0 <__assert_func+0x2c>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4605      	mov	r5, r0
 8009990:	68d8      	ldr	r0, [r3, #12]
 8009992:	b954      	cbnz	r4, 80099aa <__assert_func+0x26>
 8009994:	4b07      	ldr	r3, [pc, #28]	@ (80099b4 <__assert_func+0x30>)
 8009996:	461c      	mov	r4, r3
 8009998:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800999c:	9100      	str	r1, [sp, #0]
 800999e:	462b      	mov	r3, r5
 80099a0:	4905      	ldr	r1, [pc, #20]	@ (80099b8 <__assert_func+0x34>)
 80099a2:	f002 f967 	bl	800bc74 <fiprintf>
 80099a6:	f002 f9a1 	bl	800bcec <abort>
 80099aa:	4b04      	ldr	r3, [pc, #16]	@ (80099bc <__assert_func+0x38>)
 80099ac:	e7f4      	b.n	8009998 <__assert_func+0x14>
 80099ae:	bf00      	nop
 80099b0:	20000250 	.word	0x20000250
 80099b4:	0800dcce 	.word	0x0800dcce
 80099b8:	0800dca0 	.word	0x0800dca0
 80099bc:	0800dc93 	.word	0x0800dc93

080099c0 <quorem>:
 80099c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c4:	6903      	ldr	r3, [r0, #16]
 80099c6:	690c      	ldr	r4, [r1, #16]
 80099c8:	42a3      	cmp	r3, r4
 80099ca:	4607      	mov	r7, r0
 80099cc:	db7e      	blt.n	8009acc <quorem+0x10c>
 80099ce:	3c01      	subs	r4, #1
 80099d0:	f101 0814 	add.w	r8, r1, #20
 80099d4:	00a3      	lsls	r3, r4, #2
 80099d6:	f100 0514 	add.w	r5, r0, #20
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80099e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099ea:	3301      	adds	r3, #1
 80099ec:	429a      	cmp	r2, r3
 80099ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80099f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80099f6:	d32e      	bcc.n	8009a56 <quorem+0x96>
 80099f8:	f04f 0a00 	mov.w	sl, #0
 80099fc:	46c4      	mov	ip, r8
 80099fe:	46ae      	mov	lr, r5
 8009a00:	46d3      	mov	fp, sl
 8009a02:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009a06:	b298      	uxth	r0, r3
 8009a08:	fb06 a000 	mla	r0, r6, r0, sl
 8009a0c:	0c02      	lsrs	r2, r0, #16
 8009a0e:	0c1b      	lsrs	r3, r3, #16
 8009a10:	fb06 2303 	mla	r3, r6, r3, r2
 8009a14:	f8de 2000 	ldr.w	r2, [lr]
 8009a18:	b280      	uxth	r0, r0
 8009a1a:	b292      	uxth	r2, r2
 8009a1c:	1a12      	subs	r2, r2, r0
 8009a1e:	445a      	add	r2, fp
 8009a20:	f8de 0000 	ldr.w	r0, [lr]
 8009a24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009a2e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009a32:	b292      	uxth	r2, r2
 8009a34:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009a38:	45e1      	cmp	r9, ip
 8009a3a:	f84e 2b04 	str.w	r2, [lr], #4
 8009a3e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009a42:	d2de      	bcs.n	8009a02 <quorem+0x42>
 8009a44:	9b00      	ldr	r3, [sp, #0]
 8009a46:	58eb      	ldr	r3, [r5, r3]
 8009a48:	b92b      	cbnz	r3, 8009a56 <quorem+0x96>
 8009a4a:	9b01      	ldr	r3, [sp, #4]
 8009a4c:	3b04      	subs	r3, #4
 8009a4e:	429d      	cmp	r5, r3
 8009a50:	461a      	mov	r2, r3
 8009a52:	d32f      	bcc.n	8009ab4 <quorem+0xf4>
 8009a54:	613c      	str	r4, [r7, #16]
 8009a56:	4638      	mov	r0, r7
 8009a58:	f001 fd0e 	bl	800b478 <__mcmp>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	db25      	blt.n	8009aac <quorem+0xec>
 8009a60:	4629      	mov	r1, r5
 8009a62:	2000      	movs	r0, #0
 8009a64:	f858 2b04 	ldr.w	r2, [r8], #4
 8009a68:	f8d1 c000 	ldr.w	ip, [r1]
 8009a6c:	fa1f fe82 	uxth.w	lr, r2
 8009a70:	fa1f f38c 	uxth.w	r3, ip
 8009a74:	eba3 030e 	sub.w	r3, r3, lr
 8009a78:	4403      	add	r3, r0
 8009a7a:	0c12      	lsrs	r2, r2, #16
 8009a7c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009a80:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a8a:	45c1      	cmp	r9, r8
 8009a8c:	f841 3b04 	str.w	r3, [r1], #4
 8009a90:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009a94:	d2e6      	bcs.n	8009a64 <quorem+0xa4>
 8009a96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a9e:	b922      	cbnz	r2, 8009aaa <quorem+0xea>
 8009aa0:	3b04      	subs	r3, #4
 8009aa2:	429d      	cmp	r5, r3
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	d30b      	bcc.n	8009ac0 <quorem+0x100>
 8009aa8:	613c      	str	r4, [r7, #16]
 8009aaa:	3601      	adds	r6, #1
 8009aac:	4630      	mov	r0, r6
 8009aae:	b003      	add	sp, #12
 8009ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab4:	6812      	ldr	r2, [r2, #0]
 8009ab6:	3b04      	subs	r3, #4
 8009ab8:	2a00      	cmp	r2, #0
 8009aba:	d1cb      	bne.n	8009a54 <quorem+0x94>
 8009abc:	3c01      	subs	r4, #1
 8009abe:	e7c6      	b.n	8009a4e <quorem+0x8e>
 8009ac0:	6812      	ldr	r2, [r2, #0]
 8009ac2:	3b04      	subs	r3, #4
 8009ac4:	2a00      	cmp	r2, #0
 8009ac6:	d1ef      	bne.n	8009aa8 <quorem+0xe8>
 8009ac8:	3c01      	subs	r4, #1
 8009aca:	e7ea      	b.n	8009aa2 <quorem+0xe2>
 8009acc:	2000      	movs	r0, #0
 8009ace:	e7ee      	b.n	8009aae <quorem+0xee>

08009ad0 <_dtoa_r>:
 8009ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad4:	69c7      	ldr	r7, [r0, #28]
 8009ad6:	b099      	sub	sp, #100	@ 0x64
 8009ad8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009adc:	ec55 4b10 	vmov	r4, r5, d0
 8009ae0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009ae2:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ae4:	4683      	mov	fp, r0
 8009ae6:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ae8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009aea:	b97f      	cbnz	r7, 8009b0c <_dtoa_r+0x3c>
 8009aec:	2010      	movs	r0, #16
 8009aee:	f001 f937 	bl	800ad60 <malloc>
 8009af2:	4602      	mov	r2, r0
 8009af4:	f8cb 001c 	str.w	r0, [fp, #28]
 8009af8:	b920      	cbnz	r0, 8009b04 <_dtoa_r+0x34>
 8009afa:	4ba7      	ldr	r3, [pc, #668]	@ (8009d98 <_dtoa_r+0x2c8>)
 8009afc:	21ef      	movs	r1, #239	@ 0xef
 8009afe:	48a7      	ldr	r0, [pc, #668]	@ (8009d9c <_dtoa_r+0x2cc>)
 8009b00:	f7ff ff40 	bl	8009984 <__assert_func>
 8009b04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009b08:	6007      	str	r7, [r0, #0]
 8009b0a:	60c7      	str	r7, [r0, #12]
 8009b0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009b10:	6819      	ldr	r1, [r3, #0]
 8009b12:	b159      	cbz	r1, 8009b2c <_dtoa_r+0x5c>
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	604a      	str	r2, [r1, #4]
 8009b18:	2301      	movs	r3, #1
 8009b1a:	4093      	lsls	r3, r2
 8009b1c:	608b      	str	r3, [r1, #8]
 8009b1e:	4658      	mov	r0, fp
 8009b20:	f001 fa26 	bl	800af70 <_Bfree>
 8009b24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	1e2b      	subs	r3, r5, #0
 8009b2e:	bfb9      	ittee	lt
 8009b30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009b34:	9303      	strlt	r3, [sp, #12]
 8009b36:	2300      	movge	r3, #0
 8009b38:	6033      	strge	r3, [r6, #0]
 8009b3a:	9f03      	ldr	r7, [sp, #12]
 8009b3c:	4b98      	ldr	r3, [pc, #608]	@ (8009da0 <_dtoa_r+0x2d0>)
 8009b3e:	bfbc      	itt	lt
 8009b40:	2201      	movlt	r2, #1
 8009b42:	6032      	strlt	r2, [r6, #0]
 8009b44:	43bb      	bics	r3, r7
 8009b46:	d112      	bne.n	8009b6e <_dtoa_r+0x9e>
 8009b48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009b4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009b4e:	6013      	str	r3, [r2, #0]
 8009b50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009b54:	4323      	orrs	r3, r4
 8009b56:	f000 854d 	beq.w	800a5f4 <_dtoa_r+0xb24>
 8009b5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009db4 <_dtoa_r+0x2e4>
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 854f 	beq.w	800a604 <_dtoa_r+0xb34>
 8009b66:	f10a 0303 	add.w	r3, sl, #3
 8009b6a:	f000 bd49 	b.w	800a600 <_dtoa_r+0xb30>
 8009b6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b72:	2200      	movs	r2, #0
 8009b74:	ec51 0b17 	vmov	r0, r1, d7
 8009b78:	2300      	movs	r3, #0
 8009b7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009b7e:	f7f6 ffa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b82:	4680      	mov	r8, r0
 8009b84:	b158      	cbz	r0, 8009b9e <_dtoa_r+0xce>
 8009b86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009b88:	2301      	movs	r3, #1
 8009b8a:	6013      	str	r3, [r2, #0]
 8009b8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b8e:	b113      	cbz	r3, 8009b96 <_dtoa_r+0xc6>
 8009b90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009b92:	4b84      	ldr	r3, [pc, #528]	@ (8009da4 <_dtoa_r+0x2d4>)
 8009b94:	6013      	str	r3, [r2, #0]
 8009b96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009db8 <_dtoa_r+0x2e8>
 8009b9a:	f000 bd33 	b.w	800a604 <_dtoa_r+0xb34>
 8009b9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009ba2:	aa16      	add	r2, sp, #88	@ 0x58
 8009ba4:	a917      	add	r1, sp, #92	@ 0x5c
 8009ba6:	4658      	mov	r0, fp
 8009ba8:	f001 fd86 	bl	800b6b8 <__d2b>
 8009bac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009bb0:	4681      	mov	r9, r0
 8009bb2:	2e00      	cmp	r6, #0
 8009bb4:	d077      	beq.n	8009ca6 <_dtoa_r+0x1d6>
 8009bb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009bc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009bcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	4b74      	ldr	r3, [pc, #464]	@ (8009da8 <_dtoa_r+0x2d8>)
 8009bd6:	f7f6 fb57 	bl	8000288 <__aeabi_dsub>
 8009bda:	a369      	add	r3, pc, #420	@ (adr r3, 8009d80 <_dtoa_r+0x2b0>)
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	f7f6 fd0a 	bl	80005f8 <__aeabi_dmul>
 8009be4:	a368      	add	r3, pc, #416	@ (adr r3, 8009d88 <_dtoa_r+0x2b8>)
 8009be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bea:	f7f6 fb4f 	bl	800028c <__adddf3>
 8009bee:	4604      	mov	r4, r0
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	460d      	mov	r5, r1
 8009bf4:	f7f6 fc96 	bl	8000524 <__aeabi_i2d>
 8009bf8:	a365      	add	r3, pc, #404	@ (adr r3, 8009d90 <_dtoa_r+0x2c0>)
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	f7f6 fcfb 	bl	80005f8 <__aeabi_dmul>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	4620      	mov	r0, r4
 8009c08:	4629      	mov	r1, r5
 8009c0a:	f7f6 fb3f 	bl	800028c <__adddf3>
 8009c0e:	4604      	mov	r4, r0
 8009c10:	460d      	mov	r5, r1
 8009c12:	f7f6 ffa1 	bl	8000b58 <__aeabi_d2iz>
 8009c16:	2200      	movs	r2, #0
 8009c18:	4607      	mov	r7, r0
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	4629      	mov	r1, r5
 8009c20:	f7f6 ff5c 	bl	8000adc <__aeabi_dcmplt>
 8009c24:	b140      	cbz	r0, 8009c38 <_dtoa_r+0x168>
 8009c26:	4638      	mov	r0, r7
 8009c28:	f7f6 fc7c 	bl	8000524 <__aeabi_i2d>
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	462b      	mov	r3, r5
 8009c30:	f7f6 ff4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c34:	b900      	cbnz	r0, 8009c38 <_dtoa_r+0x168>
 8009c36:	3f01      	subs	r7, #1
 8009c38:	2f16      	cmp	r7, #22
 8009c3a:	d851      	bhi.n	8009ce0 <_dtoa_r+0x210>
 8009c3c:	4b5b      	ldr	r3, [pc, #364]	@ (8009dac <_dtoa_r+0x2dc>)
 8009c3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c4a:	f7f6 ff47 	bl	8000adc <__aeabi_dcmplt>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d048      	beq.n	8009ce4 <_dtoa_r+0x214>
 8009c52:	3f01      	subs	r7, #1
 8009c54:	2300      	movs	r3, #0
 8009c56:	9312      	str	r3, [sp, #72]	@ 0x48
 8009c58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009c5a:	1b9b      	subs	r3, r3, r6
 8009c5c:	1e5a      	subs	r2, r3, #1
 8009c5e:	bf44      	itt	mi
 8009c60:	f1c3 0801 	rsbmi	r8, r3, #1
 8009c64:	2300      	movmi	r3, #0
 8009c66:	9208      	str	r2, [sp, #32]
 8009c68:	bf54      	ite	pl
 8009c6a:	f04f 0800 	movpl.w	r8, #0
 8009c6e:	9308      	strmi	r3, [sp, #32]
 8009c70:	2f00      	cmp	r7, #0
 8009c72:	db39      	blt.n	8009ce8 <_dtoa_r+0x218>
 8009c74:	9b08      	ldr	r3, [sp, #32]
 8009c76:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009c78:	443b      	add	r3, r7
 8009c7a:	9308      	str	r3, [sp, #32]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c82:	2b09      	cmp	r3, #9
 8009c84:	d864      	bhi.n	8009d50 <_dtoa_r+0x280>
 8009c86:	2b05      	cmp	r3, #5
 8009c88:	bfc4      	itt	gt
 8009c8a:	3b04      	subgt	r3, #4
 8009c8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c90:	f1a3 0302 	sub.w	r3, r3, #2
 8009c94:	bfcc      	ite	gt
 8009c96:	2400      	movgt	r4, #0
 8009c98:	2401      	movle	r4, #1
 8009c9a:	2b03      	cmp	r3, #3
 8009c9c:	d863      	bhi.n	8009d66 <_dtoa_r+0x296>
 8009c9e:	e8df f003 	tbb	[pc, r3]
 8009ca2:	372a      	.short	0x372a
 8009ca4:	5535      	.short	0x5535
 8009ca6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009caa:	441e      	add	r6, r3
 8009cac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009cb0:	2b20      	cmp	r3, #32
 8009cb2:	bfc1      	itttt	gt
 8009cb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009cb8:	409f      	lslgt	r7, r3
 8009cba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009cbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009cc2:	bfd6      	itet	le
 8009cc4:	f1c3 0320 	rsble	r3, r3, #32
 8009cc8:	ea47 0003 	orrgt.w	r0, r7, r3
 8009ccc:	fa04 f003 	lslle.w	r0, r4, r3
 8009cd0:	f7f6 fc18 	bl	8000504 <__aeabi_ui2d>
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009cda:	3e01      	subs	r6, #1
 8009cdc:	9214      	str	r2, [sp, #80]	@ 0x50
 8009cde:	e777      	b.n	8009bd0 <_dtoa_r+0x100>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e7b8      	b.n	8009c56 <_dtoa_r+0x186>
 8009ce4:	9012      	str	r0, [sp, #72]	@ 0x48
 8009ce6:	e7b7      	b.n	8009c58 <_dtoa_r+0x188>
 8009ce8:	427b      	negs	r3, r7
 8009cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cec:	2300      	movs	r3, #0
 8009cee:	eba8 0807 	sub.w	r8, r8, r7
 8009cf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009cf4:	e7c4      	b.n	8009c80 <_dtoa_r+0x1b0>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	dc35      	bgt.n	8009d6c <_dtoa_r+0x29c>
 8009d00:	2301      	movs	r3, #1
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	9307      	str	r3, [sp, #28]
 8009d06:	461a      	mov	r2, r3
 8009d08:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d0a:	e00b      	b.n	8009d24 <_dtoa_r+0x254>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e7f3      	b.n	8009cf8 <_dtoa_r+0x228>
 8009d10:	2300      	movs	r3, #0
 8009d12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d16:	18fb      	adds	r3, r7, r3
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	9307      	str	r3, [sp, #28]
 8009d20:	bfb8      	it	lt
 8009d22:	2301      	movlt	r3, #1
 8009d24:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009d28:	2100      	movs	r1, #0
 8009d2a:	2204      	movs	r2, #4
 8009d2c:	f102 0514 	add.w	r5, r2, #20
 8009d30:	429d      	cmp	r5, r3
 8009d32:	d91f      	bls.n	8009d74 <_dtoa_r+0x2a4>
 8009d34:	6041      	str	r1, [r0, #4]
 8009d36:	4658      	mov	r0, fp
 8009d38:	f001 f8da 	bl	800aef0 <_Balloc>
 8009d3c:	4682      	mov	sl, r0
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d13c      	bne.n	8009dbc <_dtoa_r+0x2ec>
 8009d42:	4b1b      	ldr	r3, [pc, #108]	@ (8009db0 <_dtoa_r+0x2e0>)
 8009d44:	4602      	mov	r2, r0
 8009d46:	f240 11af 	movw	r1, #431	@ 0x1af
 8009d4a:	e6d8      	b.n	8009afe <_dtoa_r+0x2e>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e7e0      	b.n	8009d12 <_dtoa_r+0x242>
 8009d50:	2401      	movs	r4, #1
 8009d52:	2300      	movs	r3, #0
 8009d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d56:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009d58:	f04f 33ff 	mov.w	r3, #4294967295
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	9307      	str	r3, [sp, #28]
 8009d60:	2200      	movs	r2, #0
 8009d62:	2312      	movs	r3, #18
 8009d64:	e7d0      	b.n	8009d08 <_dtoa_r+0x238>
 8009d66:	2301      	movs	r3, #1
 8009d68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d6a:	e7f5      	b.n	8009d58 <_dtoa_r+0x288>
 8009d6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	9307      	str	r3, [sp, #28]
 8009d72:	e7d7      	b.n	8009d24 <_dtoa_r+0x254>
 8009d74:	3101      	adds	r1, #1
 8009d76:	0052      	lsls	r2, r2, #1
 8009d78:	e7d8      	b.n	8009d2c <_dtoa_r+0x25c>
 8009d7a:	bf00      	nop
 8009d7c:	f3af 8000 	nop.w
 8009d80:	636f4361 	.word	0x636f4361
 8009d84:	3fd287a7 	.word	0x3fd287a7
 8009d88:	8b60c8b3 	.word	0x8b60c8b3
 8009d8c:	3fc68a28 	.word	0x3fc68a28
 8009d90:	509f79fb 	.word	0x509f79fb
 8009d94:	3fd34413 	.word	0x3fd34413
 8009d98:	0800dc1a 	.word	0x0800dc1a
 8009d9c:	0800dcdc 	.word	0x0800dcdc
 8009da0:	7ff00000 	.word	0x7ff00000
 8009da4:	0800dbf2 	.word	0x0800dbf2
 8009da8:	3ff80000 	.word	0x3ff80000
 8009dac:	0800de38 	.word	0x0800de38
 8009db0:	0800dd34 	.word	0x0800dd34
 8009db4:	0800dcd8 	.word	0x0800dcd8
 8009db8:	0800dbf1 	.word	0x0800dbf1
 8009dbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009dc0:	6018      	str	r0, [r3, #0]
 8009dc2:	9b07      	ldr	r3, [sp, #28]
 8009dc4:	2b0e      	cmp	r3, #14
 8009dc6:	f200 80a4 	bhi.w	8009f12 <_dtoa_r+0x442>
 8009dca:	2c00      	cmp	r4, #0
 8009dcc:	f000 80a1 	beq.w	8009f12 <_dtoa_r+0x442>
 8009dd0:	2f00      	cmp	r7, #0
 8009dd2:	dd33      	ble.n	8009e3c <_dtoa_r+0x36c>
 8009dd4:	4bad      	ldr	r3, [pc, #692]	@ (800a08c <_dtoa_r+0x5bc>)
 8009dd6:	f007 020f 	and.w	r2, r7, #15
 8009dda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dde:	ed93 7b00 	vldr	d7, [r3]
 8009de2:	05f8      	lsls	r0, r7, #23
 8009de4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009de8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009dec:	d516      	bpl.n	8009e1c <_dtoa_r+0x34c>
 8009dee:	4ba8      	ldr	r3, [pc, #672]	@ (800a090 <_dtoa_r+0x5c0>)
 8009df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009df4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009df8:	f7f6 fd28 	bl	800084c <__aeabi_ddiv>
 8009dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e00:	f004 040f 	and.w	r4, r4, #15
 8009e04:	2603      	movs	r6, #3
 8009e06:	4da2      	ldr	r5, [pc, #648]	@ (800a090 <_dtoa_r+0x5c0>)
 8009e08:	b954      	cbnz	r4, 8009e20 <_dtoa_r+0x350>
 8009e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e12:	f7f6 fd1b 	bl	800084c <__aeabi_ddiv>
 8009e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e1a:	e028      	b.n	8009e6e <_dtoa_r+0x39e>
 8009e1c:	2602      	movs	r6, #2
 8009e1e:	e7f2      	b.n	8009e06 <_dtoa_r+0x336>
 8009e20:	07e1      	lsls	r1, r4, #31
 8009e22:	d508      	bpl.n	8009e36 <_dtoa_r+0x366>
 8009e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e2c:	f7f6 fbe4 	bl	80005f8 <__aeabi_dmul>
 8009e30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e34:	3601      	adds	r6, #1
 8009e36:	1064      	asrs	r4, r4, #1
 8009e38:	3508      	adds	r5, #8
 8009e3a:	e7e5      	b.n	8009e08 <_dtoa_r+0x338>
 8009e3c:	f000 80d2 	beq.w	8009fe4 <_dtoa_r+0x514>
 8009e40:	427c      	negs	r4, r7
 8009e42:	4b92      	ldr	r3, [pc, #584]	@ (800a08c <_dtoa_r+0x5bc>)
 8009e44:	4d92      	ldr	r5, [pc, #584]	@ (800a090 <_dtoa_r+0x5c0>)
 8009e46:	f004 020f 	and.w	r2, r4, #15
 8009e4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e56:	f7f6 fbcf 	bl	80005f8 <__aeabi_dmul>
 8009e5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e5e:	1124      	asrs	r4, r4, #4
 8009e60:	2300      	movs	r3, #0
 8009e62:	2602      	movs	r6, #2
 8009e64:	2c00      	cmp	r4, #0
 8009e66:	f040 80b2 	bne.w	8009fce <_dtoa_r+0x4fe>
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1d3      	bne.n	8009e16 <_dtoa_r+0x346>
 8009e6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f000 80b7 	beq.w	8009fe8 <_dtoa_r+0x518>
 8009e7a:	4b86      	ldr	r3, [pc, #536]	@ (800a094 <_dtoa_r+0x5c4>)
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	4620      	mov	r0, r4
 8009e80:	4629      	mov	r1, r5
 8009e82:	f7f6 fe2b 	bl	8000adc <__aeabi_dcmplt>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	f000 80ae 	beq.w	8009fe8 <_dtoa_r+0x518>
 8009e8c:	9b07      	ldr	r3, [sp, #28]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f000 80aa 	beq.w	8009fe8 <_dtoa_r+0x518>
 8009e94:	9b00      	ldr	r3, [sp, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	dd37      	ble.n	8009f0a <_dtoa_r+0x43a>
 8009e9a:	1e7b      	subs	r3, r7, #1
 8009e9c:	9304      	str	r3, [sp, #16]
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	4b7d      	ldr	r3, [pc, #500]	@ (800a098 <_dtoa_r+0x5c8>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	f7f6 fba7 	bl	80005f8 <__aeabi_dmul>
 8009eaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eae:	9c00      	ldr	r4, [sp, #0]
 8009eb0:	3601      	adds	r6, #1
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f7f6 fb36 	bl	8000524 <__aeabi_i2d>
 8009eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ebc:	f7f6 fb9c 	bl	80005f8 <__aeabi_dmul>
 8009ec0:	4b76      	ldr	r3, [pc, #472]	@ (800a09c <_dtoa_r+0x5cc>)
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f7f6 f9e2 	bl	800028c <__adddf3>
 8009ec8:	4605      	mov	r5, r0
 8009eca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009ece:	2c00      	cmp	r4, #0
 8009ed0:	f040 808d 	bne.w	8009fee <_dtoa_r+0x51e>
 8009ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ed8:	4b71      	ldr	r3, [pc, #452]	@ (800a0a0 <_dtoa_r+0x5d0>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	f7f6 f9d4 	bl	8000288 <__aeabi_dsub>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ee8:	462a      	mov	r2, r5
 8009eea:	4633      	mov	r3, r6
 8009eec:	f7f6 fe14 	bl	8000b18 <__aeabi_dcmpgt>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	f040 828b 	bne.w	800a40c <_dtoa_r+0x93c>
 8009ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009efa:	462a      	mov	r2, r5
 8009efc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009f00:	f7f6 fdec 	bl	8000adc <__aeabi_dcmplt>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	f040 8128 	bne.w	800a15a <_dtoa_r+0x68a>
 8009f0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009f0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009f12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f2c0 815a 	blt.w	800a1ce <_dtoa_r+0x6fe>
 8009f1a:	2f0e      	cmp	r7, #14
 8009f1c:	f300 8157 	bgt.w	800a1ce <_dtoa_r+0x6fe>
 8009f20:	4b5a      	ldr	r3, [pc, #360]	@ (800a08c <_dtoa_r+0x5bc>)
 8009f22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f26:	ed93 7b00 	vldr	d7, [r3]
 8009f2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	ed8d 7b00 	vstr	d7, [sp]
 8009f32:	da03      	bge.n	8009f3c <_dtoa_r+0x46c>
 8009f34:	9b07      	ldr	r3, [sp, #28]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f340 8101 	ble.w	800a13e <_dtoa_r+0x66e>
 8009f3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009f40:	4656      	mov	r6, sl
 8009f42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f46:	4620      	mov	r0, r4
 8009f48:	4629      	mov	r1, r5
 8009f4a:	f7f6 fc7f 	bl	800084c <__aeabi_ddiv>
 8009f4e:	f7f6 fe03 	bl	8000b58 <__aeabi_d2iz>
 8009f52:	4680      	mov	r8, r0
 8009f54:	f7f6 fae6 	bl	8000524 <__aeabi_i2d>
 8009f58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f5c:	f7f6 fb4c 	bl	80005f8 <__aeabi_dmul>
 8009f60:	4602      	mov	r2, r0
 8009f62:	460b      	mov	r3, r1
 8009f64:	4620      	mov	r0, r4
 8009f66:	4629      	mov	r1, r5
 8009f68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009f6c:	f7f6 f98c 	bl	8000288 <__aeabi_dsub>
 8009f70:	f806 4b01 	strb.w	r4, [r6], #1
 8009f74:	9d07      	ldr	r5, [sp, #28]
 8009f76:	eba6 040a 	sub.w	r4, r6, sl
 8009f7a:	42a5      	cmp	r5, r4
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	f040 8117 	bne.w	800a1b2 <_dtoa_r+0x6e2>
 8009f84:	f7f6 f982 	bl	800028c <__adddf3>
 8009f88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	460d      	mov	r5, r1
 8009f90:	f7f6 fdc2 	bl	8000b18 <__aeabi_dcmpgt>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	f040 80f9 	bne.w	800a18c <_dtoa_r+0x6bc>
 8009f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	4629      	mov	r1, r5
 8009fa2:	f7f6 fd91 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fa6:	b118      	cbz	r0, 8009fb0 <_dtoa_r+0x4e0>
 8009fa8:	f018 0f01 	tst.w	r8, #1
 8009fac:	f040 80ee 	bne.w	800a18c <_dtoa_r+0x6bc>
 8009fb0:	4649      	mov	r1, r9
 8009fb2:	4658      	mov	r0, fp
 8009fb4:	f000 ffdc 	bl	800af70 <_Bfree>
 8009fb8:	2300      	movs	r3, #0
 8009fba:	7033      	strb	r3, [r6, #0]
 8009fbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009fbe:	3701      	adds	r7, #1
 8009fc0:	601f      	str	r7, [r3, #0]
 8009fc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 831d 	beq.w	800a604 <_dtoa_r+0xb34>
 8009fca:	601e      	str	r6, [r3, #0]
 8009fcc:	e31a      	b.n	800a604 <_dtoa_r+0xb34>
 8009fce:	07e2      	lsls	r2, r4, #31
 8009fd0:	d505      	bpl.n	8009fde <_dtoa_r+0x50e>
 8009fd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009fd6:	f7f6 fb0f 	bl	80005f8 <__aeabi_dmul>
 8009fda:	3601      	adds	r6, #1
 8009fdc:	2301      	movs	r3, #1
 8009fde:	1064      	asrs	r4, r4, #1
 8009fe0:	3508      	adds	r5, #8
 8009fe2:	e73f      	b.n	8009e64 <_dtoa_r+0x394>
 8009fe4:	2602      	movs	r6, #2
 8009fe6:	e742      	b.n	8009e6e <_dtoa_r+0x39e>
 8009fe8:	9c07      	ldr	r4, [sp, #28]
 8009fea:	9704      	str	r7, [sp, #16]
 8009fec:	e761      	b.n	8009eb2 <_dtoa_r+0x3e2>
 8009fee:	4b27      	ldr	r3, [pc, #156]	@ (800a08c <_dtoa_r+0x5bc>)
 8009ff0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ff2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ff6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ffa:	4454      	add	r4, sl
 8009ffc:	2900      	cmp	r1, #0
 8009ffe:	d053      	beq.n	800a0a8 <_dtoa_r+0x5d8>
 800a000:	4928      	ldr	r1, [pc, #160]	@ (800a0a4 <_dtoa_r+0x5d4>)
 800a002:	2000      	movs	r0, #0
 800a004:	f7f6 fc22 	bl	800084c <__aeabi_ddiv>
 800a008:	4633      	mov	r3, r6
 800a00a:	462a      	mov	r2, r5
 800a00c:	f7f6 f93c 	bl	8000288 <__aeabi_dsub>
 800a010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a014:	4656      	mov	r6, sl
 800a016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a01a:	f7f6 fd9d 	bl	8000b58 <__aeabi_d2iz>
 800a01e:	4605      	mov	r5, r0
 800a020:	f7f6 fa80 	bl	8000524 <__aeabi_i2d>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a02c:	f7f6 f92c 	bl	8000288 <__aeabi_dsub>
 800a030:	3530      	adds	r5, #48	@ 0x30
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a03a:	f806 5b01 	strb.w	r5, [r6], #1
 800a03e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a042:	f7f6 fd4b 	bl	8000adc <__aeabi_dcmplt>
 800a046:	2800      	cmp	r0, #0
 800a048:	d171      	bne.n	800a12e <_dtoa_r+0x65e>
 800a04a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a04e:	4911      	ldr	r1, [pc, #68]	@ (800a094 <_dtoa_r+0x5c4>)
 800a050:	2000      	movs	r0, #0
 800a052:	f7f6 f919 	bl	8000288 <__aeabi_dsub>
 800a056:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a05a:	f7f6 fd3f 	bl	8000adc <__aeabi_dcmplt>
 800a05e:	2800      	cmp	r0, #0
 800a060:	f040 8095 	bne.w	800a18e <_dtoa_r+0x6be>
 800a064:	42a6      	cmp	r6, r4
 800a066:	f43f af50 	beq.w	8009f0a <_dtoa_r+0x43a>
 800a06a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a06e:	4b0a      	ldr	r3, [pc, #40]	@ (800a098 <_dtoa_r+0x5c8>)
 800a070:	2200      	movs	r2, #0
 800a072:	f7f6 fac1 	bl	80005f8 <__aeabi_dmul>
 800a076:	4b08      	ldr	r3, [pc, #32]	@ (800a098 <_dtoa_r+0x5c8>)
 800a078:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a07c:	2200      	movs	r2, #0
 800a07e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a082:	f7f6 fab9 	bl	80005f8 <__aeabi_dmul>
 800a086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a08a:	e7c4      	b.n	800a016 <_dtoa_r+0x546>
 800a08c:	0800de38 	.word	0x0800de38
 800a090:	0800de10 	.word	0x0800de10
 800a094:	3ff00000 	.word	0x3ff00000
 800a098:	40240000 	.word	0x40240000
 800a09c:	401c0000 	.word	0x401c0000
 800a0a0:	40140000 	.word	0x40140000
 800a0a4:	3fe00000 	.word	0x3fe00000
 800a0a8:	4631      	mov	r1, r6
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	f7f6 faa4 	bl	80005f8 <__aeabi_dmul>
 800a0b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a0b4:	9415      	str	r4, [sp, #84]	@ 0x54
 800a0b6:	4656      	mov	r6, sl
 800a0b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0bc:	f7f6 fd4c 	bl	8000b58 <__aeabi_d2iz>
 800a0c0:	4605      	mov	r5, r0
 800a0c2:	f7f6 fa2f 	bl	8000524 <__aeabi_i2d>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0ce:	f7f6 f8db 	bl	8000288 <__aeabi_dsub>
 800a0d2:	3530      	adds	r5, #48	@ 0x30
 800a0d4:	f806 5b01 	strb.w	r5, [r6], #1
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	42a6      	cmp	r6, r4
 800a0de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0e2:	f04f 0200 	mov.w	r2, #0
 800a0e6:	d124      	bne.n	800a132 <_dtoa_r+0x662>
 800a0e8:	4bac      	ldr	r3, [pc, #688]	@ (800a39c <_dtoa_r+0x8cc>)
 800a0ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a0ee:	f7f6 f8cd 	bl	800028c <__adddf3>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0fa:	f7f6 fd0d 	bl	8000b18 <__aeabi_dcmpgt>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d145      	bne.n	800a18e <_dtoa_r+0x6be>
 800a102:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a106:	49a5      	ldr	r1, [pc, #660]	@ (800a39c <_dtoa_r+0x8cc>)
 800a108:	2000      	movs	r0, #0
 800a10a:	f7f6 f8bd 	bl	8000288 <__aeabi_dsub>
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a116:	f7f6 fce1 	bl	8000adc <__aeabi_dcmplt>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	f43f aef5 	beq.w	8009f0a <_dtoa_r+0x43a>
 800a120:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a122:	1e73      	subs	r3, r6, #1
 800a124:	9315      	str	r3, [sp, #84]	@ 0x54
 800a126:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a12a:	2b30      	cmp	r3, #48	@ 0x30
 800a12c:	d0f8      	beq.n	800a120 <_dtoa_r+0x650>
 800a12e:	9f04      	ldr	r7, [sp, #16]
 800a130:	e73e      	b.n	8009fb0 <_dtoa_r+0x4e0>
 800a132:	4b9b      	ldr	r3, [pc, #620]	@ (800a3a0 <_dtoa_r+0x8d0>)
 800a134:	f7f6 fa60 	bl	80005f8 <__aeabi_dmul>
 800a138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a13c:	e7bc      	b.n	800a0b8 <_dtoa_r+0x5e8>
 800a13e:	d10c      	bne.n	800a15a <_dtoa_r+0x68a>
 800a140:	4b98      	ldr	r3, [pc, #608]	@ (800a3a4 <_dtoa_r+0x8d4>)
 800a142:	2200      	movs	r2, #0
 800a144:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a148:	f7f6 fa56 	bl	80005f8 <__aeabi_dmul>
 800a14c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a150:	f7f6 fcd8 	bl	8000b04 <__aeabi_dcmpge>
 800a154:	2800      	cmp	r0, #0
 800a156:	f000 8157 	beq.w	800a408 <_dtoa_r+0x938>
 800a15a:	2400      	movs	r4, #0
 800a15c:	4625      	mov	r5, r4
 800a15e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a160:	43db      	mvns	r3, r3
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	4656      	mov	r6, sl
 800a166:	2700      	movs	r7, #0
 800a168:	4621      	mov	r1, r4
 800a16a:	4658      	mov	r0, fp
 800a16c:	f000 ff00 	bl	800af70 <_Bfree>
 800a170:	2d00      	cmp	r5, #0
 800a172:	d0dc      	beq.n	800a12e <_dtoa_r+0x65e>
 800a174:	b12f      	cbz	r7, 800a182 <_dtoa_r+0x6b2>
 800a176:	42af      	cmp	r7, r5
 800a178:	d003      	beq.n	800a182 <_dtoa_r+0x6b2>
 800a17a:	4639      	mov	r1, r7
 800a17c:	4658      	mov	r0, fp
 800a17e:	f000 fef7 	bl	800af70 <_Bfree>
 800a182:	4629      	mov	r1, r5
 800a184:	4658      	mov	r0, fp
 800a186:	f000 fef3 	bl	800af70 <_Bfree>
 800a18a:	e7d0      	b.n	800a12e <_dtoa_r+0x65e>
 800a18c:	9704      	str	r7, [sp, #16]
 800a18e:	4633      	mov	r3, r6
 800a190:	461e      	mov	r6, r3
 800a192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a196:	2a39      	cmp	r2, #57	@ 0x39
 800a198:	d107      	bne.n	800a1aa <_dtoa_r+0x6da>
 800a19a:	459a      	cmp	sl, r3
 800a19c:	d1f8      	bne.n	800a190 <_dtoa_r+0x6c0>
 800a19e:	9a04      	ldr	r2, [sp, #16]
 800a1a0:	3201      	adds	r2, #1
 800a1a2:	9204      	str	r2, [sp, #16]
 800a1a4:	2230      	movs	r2, #48	@ 0x30
 800a1a6:	f88a 2000 	strb.w	r2, [sl]
 800a1aa:	781a      	ldrb	r2, [r3, #0]
 800a1ac:	3201      	adds	r2, #1
 800a1ae:	701a      	strb	r2, [r3, #0]
 800a1b0:	e7bd      	b.n	800a12e <_dtoa_r+0x65e>
 800a1b2:	4b7b      	ldr	r3, [pc, #492]	@ (800a3a0 <_dtoa_r+0x8d0>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f7f6 fa1f 	bl	80005f8 <__aeabi_dmul>
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	2300      	movs	r3, #0
 800a1be:	4604      	mov	r4, r0
 800a1c0:	460d      	mov	r5, r1
 800a1c2:	f7f6 fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	f43f aebb 	beq.w	8009f42 <_dtoa_r+0x472>
 800a1cc:	e6f0      	b.n	8009fb0 <_dtoa_r+0x4e0>
 800a1ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a1d0:	2a00      	cmp	r2, #0
 800a1d2:	f000 80db 	beq.w	800a38c <_dtoa_r+0x8bc>
 800a1d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1d8:	2a01      	cmp	r2, #1
 800a1da:	f300 80bf 	bgt.w	800a35c <_dtoa_r+0x88c>
 800a1de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a1e0:	2a00      	cmp	r2, #0
 800a1e2:	f000 80b7 	beq.w	800a354 <_dtoa_r+0x884>
 800a1e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a1ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a1ec:	4646      	mov	r6, r8
 800a1ee:	9a08      	ldr	r2, [sp, #32]
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	441a      	add	r2, r3
 800a1f4:	4658      	mov	r0, fp
 800a1f6:	4498      	add	r8, r3
 800a1f8:	9208      	str	r2, [sp, #32]
 800a1fa:	f000 ffb7 	bl	800b16c <__i2b>
 800a1fe:	4605      	mov	r5, r0
 800a200:	b15e      	cbz	r6, 800a21a <_dtoa_r+0x74a>
 800a202:	9b08      	ldr	r3, [sp, #32]
 800a204:	2b00      	cmp	r3, #0
 800a206:	dd08      	ble.n	800a21a <_dtoa_r+0x74a>
 800a208:	42b3      	cmp	r3, r6
 800a20a:	9a08      	ldr	r2, [sp, #32]
 800a20c:	bfa8      	it	ge
 800a20e:	4633      	movge	r3, r6
 800a210:	eba8 0803 	sub.w	r8, r8, r3
 800a214:	1af6      	subs	r6, r6, r3
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	9308      	str	r3, [sp, #32]
 800a21a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a21c:	b1f3      	cbz	r3, 800a25c <_dtoa_r+0x78c>
 800a21e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a220:	2b00      	cmp	r3, #0
 800a222:	f000 80b7 	beq.w	800a394 <_dtoa_r+0x8c4>
 800a226:	b18c      	cbz	r4, 800a24c <_dtoa_r+0x77c>
 800a228:	4629      	mov	r1, r5
 800a22a:	4622      	mov	r2, r4
 800a22c:	4658      	mov	r0, fp
 800a22e:	f001 f85d 	bl	800b2ec <__pow5mult>
 800a232:	464a      	mov	r2, r9
 800a234:	4601      	mov	r1, r0
 800a236:	4605      	mov	r5, r0
 800a238:	4658      	mov	r0, fp
 800a23a:	f000 ffad 	bl	800b198 <__multiply>
 800a23e:	4649      	mov	r1, r9
 800a240:	9004      	str	r0, [sp, #16]
 800a242:	4658      	mov	r0, fp
 800a244:	f000 fe94 	bl	800af70 <_Bfree>
 800a248:	9b04      	ldr	r3, [sp, #16]
 800a24a:	4699      	mov	r9, r3
 800a24c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a24e:	1b1a      	subs	r2, r3, r4
 800a250:	d004      	beq.n	800a25c <_dtoa_r+0x78c>
 800a252:	4649      	mov	r1, r9
 800a254:	4658      	mov	r0, fp
 800a256:	f001 f849 	bl	800b2ec <__pow5mult>
 800a25a:	4681      	mov	r9, r0
 800a25c:	2101      	movs	r1, #1
 800a25e:	4658      	mov	r0, fp
 800a260:	f000 ff84 	bl	800b16c <__i2b>
 800a264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a266:	4604      	mov	r4, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 81cf 	beq.w	800a60c <_dtoa_r+0xb3c>
 800a26e:	461a      	mov	r2, r3
 800a270:	4601      	mov	r1, r0
 800a272:	4658      	mov	r0, fp
 800a274:	f001 f83a 	bl	800b2ec <__pow5mult>
 800a278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	4604      	mov	r4, r0
 800a27e:	f300 8095 	bgt.w	800a3ac <_dtoa_r+0x8dc>
 800a282:	9b02      	ldr	r3, [sp, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	f040 8087 	bne.w	800a398 <_dtoa_r+0x8c8>
 800a28a:	9b03      	ldr	r3, [sp, #12]
 800a28c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a290:	2b00      	cmp	r3, #0
 800a292:	f040 8089 	bne.w	800a3a8 <_dtoa_r+0x8d8>
 800a296:	9b03      	ldr	r3, [sp, #12]
 800a298:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a29c:	0d1b      	lsrs	r3, r3, #20
 800a29e:	051b      	lsls	r3, r3, #20
 800a2a0:	b12b      	cbz	r3, 800a2ae <_dtoa_r+0x7de>
 800a2a2:	9b08      	ldr	r3, [sp, #32]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	9308      	str	r3, [sp, #32]
 800a2a8:	f108 0801 	add.w	r8, r8, #1
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f000 81b0 	beq.w	800a618 <_dtoa_r+0xb48>
 800a2b8:	6923      	ldr	r3, [r4, #16]
 800a2ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2be:	6918      	ldr	r0, [r3, #16]
 800a2c0:	f000 ff08 	bl	800b0d4 <__hi0bits>
 800a2c4:	f1c0 0020 	rsb	r0, r0, #32
 800a2c8:	9b08      	ldr	r3, [sp, #32]
 800a2ca:	4418      	add	r0, r3
 800a2cc:	f010 001f 	ands.w	r0, r0, #31
 800a2d0:	d077      	beq.n	800a3c2 <_dtoa_r+0x8f2>
 800a2d2:	f1c0 0320 	rsb	r3, r0, #32
 800a2d6:	2b04      	cmp	r3, #4
 800a2d8:	dd6b      	ble.n	800a3b2 <_dtoa_r+0x8e2>
 800a2da:	9b08      	ldr	r3, [sp, #32]
 800a2dc:	f1c0 001c 	rsb	r0, r0, #28
 800a2e0:	4403      	add	r3, r0
 800a2e2:	4480      	add	r8, r0
 800a2e4:	4406      	add	r6, r0
 800a2e6:	9308      	str	r3, [sp, #32]
 800a2e8:	f1b8 0f00 	cmp.w	r8, #0
 800a2ec:	dd05      	ble.n	800a2fa <_dtoa_r+0x82a>
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	4642      	mov	r2, r8
 800a2f2:	4658      	mov	r0, fp
 800a2f4:	f001 f854 	bl	800b3a0 <__lshift>
 800a2f8:	4681      	mov	r9, r0
 800a2fa:	9b08      	ldr	r3, [sp, #32]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	dd05      	ble.n	800a30c <_dtoa_r+0x83c>
 800a300:	4621      	mov	r1, r4
 800a302:	461a      	mov	r2, r3
 800a304:	4658      	mov	r0, fp
 800a306:	f001 f84b 	bl	800b3a0 <__lshift>
 800a30a:	4604      	mov	r4, r0
 800a30c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d059      	beq.n	800a3c6 <_dtoa_r+0x8f6>
 800a312:	4621      	mov	r1, r4
 800a314:	4648      	mov	r0, r9
 800a316:	f001 f8af 	bl	800b478 <__mcmp>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	da53      	bge.n	800a3c6 <_dtoa_r+0x8f6>
 800a31e:	1e7b      	subs	r3, r7, #1
 800a320:	9304      	str	r3, [sp, #16]
 800a322:	4649      	mov	r1, r9
 800a324:	2300      	movs	r3, #0
 800a326:	220a      	movs	r2, #10
 800a328:	4658      	mov	r0, fp
 800a32a:	f000 fe43 	bl	800afb4 <__multadd>
 800a32e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a330:	4681      	mov	r9, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	f000 8172 	beq.w	800a61c <_dtoa_r+0xb4c>
 800a338:	2300      	movs	r3, #0
 800a33a:	4629      	mov	r1, r5
 800a33c:	220a      	movs	r2, #10
 800a33e:	4658      	mov	r0, fp
 800a340:	f000 fe38 	bl	800afb4 <__multadd>
 800a344:	9b00      	ldr	r3, [sp, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	4605      	mov	r5, r0
 800a34a:	dc67      	bgt.n	800a41c <_dtoa_r+0x94c>
 800a34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a34e:	2b02      	cmp	r3, #2
 800a350:	dc41      	bgt.n	800a3d6 <_dtoa_r+0x906>
 800a352:	e063      	b.n	800a41c <_dtoa_r+0x94c>
 800a354:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a356:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a35a:	e746      	b.n	800a1ea <_dtoa_r+0x71a>
 800a35c:	9b07      	ldr	r3, [sp, #28]
 800a35e:	1e5c      	subs	r4, r3, #1
 800a360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a362:	42a3      	cmp	r3, r4
 800a364:	bfbf      	itttt	lt
 800a366:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a368:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a36a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a36c:	1ae3      	sublt	r3, r4, r3
 800a36e:	bfb4      	ite	lt
 800a370:	18d2      	addlt	r2, r2, r3
 800a372:	1b1c      	subge	r4, r3, r4
 800a374:	9b07      	ldr	r3, [sp, #28]
 800a376:	bfbc      	itt	lt
 800a378:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a37a:	2400      	movlt	r4, #0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	bfb5      	itete	lt
 800a380:	eba8 0603 	sublt.w	r6, r8, r3
 800a384:	9b07      	ldrge	r3, [sp, #28]
 800a386:	2300      	movlt	r3, #0
 800a388:	4646      	movge	r6, r8
 800a38a:	e730      	b.n	800a1ee <_dtoa_r+0x71e>
 800a38c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a38e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a390:	4646      	mov	r6, r8
 800a392:	e735      	b.n	800a200 <_dtoa_r+0x730>
 800a394:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a396:	e75c      	b.n	800a252 <_dtoa_r+0x782>
 800a398:	2300      	movs	r3, #0
 800a39a:	e788      	b.n	800a2ae <_dtoa_r+0x7de>
 800a39c:	3fe00000 	.word	0x3fe00000
 800a3a0:	40240000 	.word	0x40240000
 800a3a4:	40140000 	.word	0x40140000
 800a3a8:	9b02      	ldr	r3, [sp, #8]
 800a3aa:	e780      	b.n	800a2ae <_dtoa_r+0x7de>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3b0:	e782      	b.n	800a2b8 <_dtoa_r+0x7e8>
 800a3b2:	d099      	beq.n	800a2e8 <_dtoa_r+0x818>
 800a3b4:	9a08      	ldr	r2, [sp, #32]
 800a3b6:	331c      	adds	r3, #28
 800a3b8:	441a      	add	r2, r3
 800a3ba:	4498      	add	r8, r3
 800a3bc:	441e      	add	r6, r3
 800a3be:	9208      	str	r2, [sp, #32]
 800a3c0:	e792      	b.n	800a2e8 <_dtoa_r+0x818>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	e7f6      	b.n	800a3b4 <_dtoa_r+0x8e4>
 800a3c6:	9b07      	ldr	r3, [sp, #28]
 800a3c8:	9704      	str	r7, [sp, #16]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	dc20      	bgt.n	800a410 <_dtoa_r+0x940>
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	dd1e      	ble.n	800a414 <_dtoa_r+0x944>
 800a3d6:	9b00      	ldr	r3, [sp, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f47f aec0 	bne.w	800a15e <_dtoa_r+0x68e>
 800a3de:	4621      	mov	r1, r4
 800a3e0:	2205      	movs	r2, #5
 800a3e2:	4658      	mov	r0, fp
 800a3e4:	f000 fde6 	bl	800afb4 <__multadd>
 800a3e8:	4601      	mov	r1, r0
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	4648      	mov	r0, r9
 800a3ee:	f001 f843 	bl	800b478 <__mcmp>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	f77f aeb3 	ble.w	800a15e <_dtoa_r+0x68e>
 800a3f8:	4656      	mov	r6, sl
 800a3fa:	2331      	movs	r3, #49	@ 0x31
 800a3fc:	f806 3b01 	strb.w	r3, [r6], #1
 800a400:	9b04      	ldr	r3, [sp, #16]
 800a402:	3301      	adds	r3, #1
 800a404:	9304      	str	r3, [sp, #16]
 800a406:	e6ae      	b.n	800a166 <_dtoa_r+0x696>
 800a408:	9c07      	ldr	r4, [sp, #28]
 800a40a:	9704      	str	r7, [sp, #16]
 800a40c:	4625      	mov	r5, r4
 800a40e:	e7f3      	b.n	800a3f8 <_dtoa_r+0x928>
 800a410:	9b07      	ldr	r3, [sp, #28]
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 8104 	beq.w	800a624 <_dtoa_r+0xb54>
 800a41c:	2e00      	cmp	r6, #0
 800a41e:	dd05      	ble.n	800a42c <_dtoa_r+0x95c>
 800a420:	4629      	mov	r1, r5
 800a422:	4632      	mov	r2, r6
 800a424:	4658      	mov	r0, fp
 800a426:	f000 ffbb 	bl	800b3a0 <__lshift>
 800a42a:	4605      	mov	r5, r0
 800a42c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d05a      	beq.n	800a4e8 <_dtoa_r+0xa18>
 800a432:	6869      	ldr	r1, [r5, #4]
 800a434:	4658      	mov	r0, fp
 800a436:	f000 fd5b 	bl	800aef0 <_Balloc>
 800a43a:	4606      	mov	r6, r0
 800a43c:	b928      	cbnz	r0, 800a44a <_dtoa_r+0x97a>
 800a43e:	4b84      	ldr	r3, [pc, #528]	@ (800a650 <_dtoa_r+0xb80>)
 800a440:	4602      	mov	r2, r0
 800a442:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a446:	f7ff bb5a 	b.w	8009afe <_dtoa_r+0x2e>
 800a44a:	692a      	ldr	r2, [r5, #16]
 800a44c:	3202      	adds	r2, #2
 800a44e:	0092      	lsls	r2, r2, #2
 800a450:	f105 010c 	add.w	r1, r5, #12
 800a454:	300c      	adds	r0, #12
 800a456:	f7ff fa76 	bl	8009946 <memcpy>
 800a45a:	2201      	movs	r2, #1
 800a45c:	4631      	mov	r1, r6
 800a45e:	4658      	mov	r0, fp
 800a460:	f000 ff9e 	bl	800b3a0 <__lshift>
 800a464:	f10a 0301 	add.w	r3, sl, #1
 800a468:	9307      	str	r3, [sp, #28]
 800a46a:	9b00      	ldr	r3, [sp, #0]
 800a46c:	4453      	add	r3, sl
 800a46e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a470:	9b02      	ldr	r3, [sp, #8]
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	462f      	mov	r7, r5
 800a478:	930a      	str	r3, [sp, #40]	@ 0x28
 800a47a:	4605      	mov	r5, r0
 800a47c:	9b07      	ldr	r3, [sp, #28]
 800a47e:	4621      	mov	r1, r4
 800a480:	3b01      	subs	r3, #1
 800a482:	4648      	mov	r0, r9
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	f7ff fa9b 	bl	80099c0 <quorem>
 800a48a:	4639      	mov	r1, r7
 800a48c:	9002      	str	r0, [sp, #8]
 800a48e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a492:	4648      	mov	r0, r9
 800a494:	f000 fff0 	bl	800b478 <__mcmp>
 800a498:	462a      	mov	r2, r5
 800a49a:	9008      	str	r0, [sp, #32]
 800a49c:	4621      	mov	r1, r4
 800a49e:	4658      	mov	r0, fp
 800a4a0:	f001 f806 	bl	800b4b0 <__mdiff>
 800a4a4:	68c2      	ldr	r2, [r0, #12]
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	bb02      	cbnz	r2, 800a4ec <_dtoa_r+0xa1c>
 800a4aa:	4601      	mov	r1, r0
 800a4ac:	4648      	mov	r0, r9
 800a4ae:	f000 ffe3 	bl	800b478 <__mcmp>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	4658      	mov	r0, fp
 800a4b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a4ba:	f000 fd59 	bl	800af70 <_Bfree>
 800a4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4c2:	9e07      	ldr	r6, [sp, #28]
 800a4c4:	ea43 0102 	orr.w	r1, r3, r2
 800a4c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4ca:	4319      	orrs	r1, r3
 800a4cc:	d110      	bne.n	800a4f0 <_dtoa_r+0xa20>
 800a4ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a4d2:	d029      	beq.n	800a528 <_dtoa_r+0xa58>
 800a4d4:	9b08      	ldr	r3, [sp, #32]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	dd02      	ble.n	800a4e0 <_dtoa_r+0xa10>
 800a4da:	9b02      	ldr	r3, [sp, #8]
 800a4dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a4e0:	9b00      	ldr	r3, [sp, #0]
 800a4e2:	f883 8000 	strb.w	r8, [r3]
 800a4e6:	e63f      	b.n	800a168 <_dtoa_r+0x698>
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	e7bb      	b.n	800a464 <_dtoa_r+0x994>
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	e7e1      	b.n	800a4b4 <_dtoa_r+0x9e4>
 800a4f0:	9b08      	ldr	r3, [sp, #32]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	db04      	blt.n	800a500 <_dtoa_r+0xa30>
 800a4f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a4f8:	430b      	orrs	r3, r1
 800a4fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a4fc:	430b      	orrs	r3, r1
 800a4fe:	d120      	bne.n	800a542 <_dtoa_r+0xa72>
 800a500:	2a00      	cmp	r2, #0
 800a502:	dded      	ble.n	800a4e0 <_dtoa_r+0xa10>
 800a504:	4649      	mov	r1, r9
 800a506:	2201      	movs	r2, #1
 800a508:	4658      	mov	r0, fp
 800a50a:	f000 ff49 	bl	800b3a0 <__lshift>
 800a50e:	4621      	mov	r1, r4
 800a510:	4681      	mov	r9, r0
 800a512:	f000 ffb1 	bl	800b478 <__mcmp>
 800a516:	2800      	cmp	r0, #0
 800a518:	dc03      	bgt.n	800a522 <_dtoa_r+0xa52>
 800a51a:	d1e1      	bne.n	800a4e0 <_dtoa_r+0xa10>
 800a51c:	f018 0f01 	tst.w	r8, #1
 800a520:	d0de      	beq.n	800a4e0 <_dtoa_r+0xa10>
 800a522:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a526:	d1d8      	bne.n	800a4da <_dtoa_r+0xa0a>
 800a528:	9a00      	ldr	r2, [sp, #0]
 800a52a:	2339      	movs	r3, #57	@ 0x39
 800a52c:	7013      	strb	r3, [r2, #0]
 800a52e:	4633      	mov	r3, r6
 800a530:	461e      	mov	r6, r3
 800a532:	3b01      	subs	r3, #1
 800a534:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a538:	2a39      	cmp	r2, #57	@ 0x39
 800a53a:	d052      	beq.n	800a5e2 <_dtoa_r+0xb12>
 800a53c:	3201      	adds	r2, #1
 800a53e:	701a      	strb	r2, [r3, #0]
 800a540:	e612      	b.n	800a168 <_dtoa_r+0x698>
 800a542:	2a00      	cmp	r2, #0
 800a544:	dd07      	ble.n	800a556 <_dtoa_r+0xa86>
 800a546:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a54a:	d0ed      	beq.n	800a528 <_dtoa_r+0xa58>
 800a54c:	9a00      	ldr	r2, [sp, #0]
 800a54e:	f108 0301 	add.w	r3, r8, #1
 800a552:	7013      	strb	r3, [r2, #0]
 800a554:	e608      	b.n	800a168 <_dtoa_r+0x698>
 800a556:	9b07      	ldr	r3, [sp, #28]
 800a558:	9a07      	ldr	r2, [sp, #28]
 800a55a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a55e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a560:	4293      	cmp	r3, r2
 800a562:	d028      	beq.n	800a5b6 <_dtoa_r+0xae6>
 800a564:	4649      	mov	r1, r9
 800a566:	2300      	movs	r3, #0
 800a568:	220a      	movs	r2, #10
 800a56a:	4658      	mov	r0, fp
 800a56c:	f000 fd22 	bl	800afb4 <__multadd>
 800a570:	42af      	cmp	r7, r5
 800a572:	4681      	mov	r9, r0
 800a574:	f04f 0300 	mov.w	r3, #0
 800a578:	f04f 020a 	mov.w	r2, #10
 800a57c:	4639      	mov	r1, r7
 800a57e:	4658      	mov	r0, fp
 800a580:	d107      	bne.n	800a592 <_dtoa_r+0xac2>
 800a582:	f000 fd17 	bl	800afb4 <__multadd>
 800a586:	4607      	mov	r7, r0
 800a588:	4605      	mov	r5, r0
 800a58a:	9b07      	ldr	r3, [sp, #28]
 800a58c:	3301      	adds	r3, #1
 800a58e:	9307      	str	r3, [sp, #28]
 800a590:	e774      	b.n	800a47c <_dtoa_r+0x9ac>
 800a592:	f000 fd0f 	bl	800afb4 <__multadd>
 800a596:	4629      	mov	r1, r5
 800a598:	4607      	mov	r7, r0
 800a59a:	2300      	movs	r3, #0
 800a59c:	220a      	movs	r2, #10
 800a59e:	4658      	mov	r0, fp
 800a5a0:	f000 fd08 	bl	800afb4 <__multadd>
 800a5a4:	4605      	mov	r5, r0
 800a5a6:	e7f0      	b.n	800a58a <_dtoa_r+0xaba>
 800a5a8:	9b00      	ldr	r3, [sp, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	bfcc      	ite	gt
 800a5ae:	461e      	movgt	r6, r3
 800a5b0:	2601      	movle	r6, #1
 800a5b2:	4456      	add	r6, sl
 800a5b4:	2700      	movs	r7, #0
 800a5b6:	4649      	mov	r1, r9
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	4658      	mov	r0, fp
 800a5bc:	f000 fef0 	bl	800b3a0 <__lshift>
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	4681      	mov	r9, r0
 800a5c4:	f000 ff58 	bl	800b478 <__mcmp>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	dcb0      	bgt.n	800a52e <_dtoa_r+0xa5e>
 800a5cc:	d102      	bne.n	800a5d4 <_dtoa_r+0xb04>
 800a5ce:	f018 0f01 	tst.w	r8, #1
 800a5d2:	d1ac      	bne.n	800a52e <_dtoa_r+0xa5e>
 800a5d4:	4633      	mov	r3, r6
 800a5d6:	461e      	mov	r6, r3
 800a5d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5dc:	2a30      	cmp	r2, #48	@ 0x30
 800a5de:	d0fa      	beq.n	800a5d6 <_dtoa_r+0xb06>
 800a5e0:	e5c2      	b.n	800a168 <_dtoa_r+0x698>
 800a5e2:	459a      	cmp	sl, r3
 800a5e4:	d1a4      	bne.n	800a530 <_dtoa_r+0xa60>
 800a5e6:	9b04      	ldr	r3, [sp, #16]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	9304      	str	r3, [sp, #16]
 800a5ec:	2331      	movs	r3, #49	@ 0x31
 800a5ee:	f88a 3000 	strb.w	r3, [sl]
 800a5f2:	e5b9      	b.n	800a168 <_dtoa_r+0x698>
 800a5f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a5f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a654 <_dtoa_r+0xb84>
 800a5fa:	b11b      	cbz	r3, 800a604 <_dtoa_r+0xb34>
 800a5fc:	f10a 0308 	add.w	r3, sl, #8
 800a600:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a602:	6013      	str	r3, [r2, #0]
 800a604:	4650      	mov	r0, sl
 800a606:	b019      	add	sp, #100	@ 0x64
 800a608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a60e:	2b01      	cmp	r3, #1
 800a610:	f77f ae37 	ble.w	800a282 <_dtoa_r+0x7b2>
 800a614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a616:	930a      	str	r3, [sp, #40]	@ 0x28
 800a618:	2001      	movs	r0, #1
 800a61a:	e655      	b.n	800a2c8 <_dtoa_r+0x7f8>
 800a61c:	9b00      	ldr	r3, [sp, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f77f aed6 	ble.w	800a3d0 <_dtoa_r+0x900>
 800a624:	4656      	mov	r6, sl
 800a626:	4621      	mov	r1, r4
 800a628:	4648      	mov	r0, r9
 800a62a:	f7ff f9c9 	bl	80099c0 <quorem>
 800a62e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a632:	f806 8b01 	strb.w	r8, [r6], #1
 800a636:	9b00      	ldr	r3, [sp, #0]
 800a638:	eba6 020a 	sub.w	r2, r6, sl
 800a63c:	4293      	cmp	r3, r2
 800a63e:	ddb3      	ble.n	800a5a8 <_dtoa_r+0xad8>
 800a640:	4649      	mov	r1, r9
 800a642:	2300      	movs	r3, #0
 800a644:	220a      	movs	r2, #10
 800a646:	4658      	mov	r0, fp
 800a648:	f000 fcb4 	bl	800afb4 <__multadd>
 800a64c:	4681      	mov	r9, r0
 800a64e:	e7ea      	b.n	800a626 <_dtoa_r+0xb56>
 800a650:	0800dd34 	.word	0x0800dd34
 800a654:	0800dccf 	.word	0x0800dccf

0800a658 <_free_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4605      	mov	r5, r0
 800a65c:	2900      	cmp	r1, #0
 800a65e:	d041      	beq.n	800a6e4 <_free_r+0x8c>
 800a660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a664:	1f0c      	subs	r4, r1, #4
 800a666:	2b00      	cmp	r3, #0
 800a668:	bfb8      	it	lt
 800a66a:	18e4      	addlt	r4, r4, r3
 800a66c:	f000 fc34 	bl	800aed8 <__malloc_lock>
 800a670:	4a1d      	ldr	r2, [pc, #116]	@ (800a6e8 <_free_r+0x90>)
 800a672:	6813      	ldr	r3, [r2, #0]
 800a674:	b933      	cbnz	r3, 800a684 <_free_r+0x2c>
 800a676:	6063      	str	r3, [r4, #4]
 800a678:	6014      	str	r4, [r2, #0]
 800a67a:	4628      	mov	r0, r5
 800a67c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a680:	f000 bc30 	b.w	800aee4 <__malloc_unlock>
 800a684:	42a3      	cmp	r3, r4
 800a686:	d908      	bls.n	800a69a <_free_r+0x42>
 800a688:	6820      	ldr	r0, [r4, #0]
 800a68a:	1821      	adds	r1, r4, r0
 800a68c:	428b      	cmp	r3, r1
 800a68e:	bf01      	itttt	eq
 800a690:	6819      	ldreq	r1, [r3, #0]
 800a692:	685b      	ldreq	r3, [r3, #4]
 800a694:	1809      	addeq	r1, r1, r0
 800a696:	6021      	streq	r1, [r4, #0]
 800a698:	e7ed      	b.n	800a676 <_free_r+0x1e>
 800a69a:	461a      	mov	r2, r3
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	b10b      	cbz	r3, 800a6a4 <_free_r+0x4c>
 800a6a0:	42a3      	cmp	r3, r4
 800a6a2:	d9fa      	bls.n	800a69a <_free_r+0x42>
 800a6a4:	6811      	ldr	r1, [r2, #0]
 800a6a6:	1850      	adds	r0, r2, r1
 800a6a8:	42a0      	cmp	r0, r4
 800a6aa:	d10b      	bne.n	800a6c4 <_free_r+0x6c>
 800a6ac:	6820      	ldr	r0, [r4, #0]
 800a6ae:	4401      	add	r1, r0
 800a6b0:	1850      	adds	r0, r2, r1
 800a6b2:	4283      	cmp	r3, r0
 800a6b4:	6011      	str	r1, [r2, #0]
 800a6b6:	d1e0      	bne.n	800a67a <_free_r+0x22>
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	6053      	str	r3, [r2, #4]
 800a6be:	4408      	add	r0, r1
 800a6c0:	6010      	str	r0, [r2, #0]
 800a6c2:	e7da      	b.n	800a67a <_free_r+0x22>
 800a6c4:	d902      	bls.n	800a6cc <_free_r+0x74>
 800a6c6:	230c      	movs	r3, #12
 800a6c8:	602b      	str	r3, [r5, #0]
 800a6ca:	e7d6      	b.n	800a67a <_free_r+0x22>
 800a6cc:	6820      	ldr	r0, [r4, #0]
 800a6ce:	1821      	adds	r1, r4, r0
 800a6d0:	428b      	cmp	r3, r1
 800a6d2:	bf04      	itt	eq
 800a6d4:	6819      	ldreq	r1, [r3, #0]
 800a6d6:	685b      	ldreq	r3, [r3, #4]
 800a6d8:	6063      	str	r3, [r4, #4]
 800a6da:	bf04      	itt	eq
 800a6dc:	1809      	addeq	r1, r1, r0
 800a6de:	6021      	streq	r1, [r4, #0]
 800a6e0:	6054      	str	r4, [r2, #4]
 800a6e2:	e7ca      	b.n	800a67a <_free_r+0x22>
 800a6e4:	bd38      	pop	{r3, r4, r5, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20000840 	.word	0x20000840

0800a6ec <rshift>:
 800a6ec:	6903      	ldr	r3, [r0, #16]
 800a6ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a6f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a6fa:	f100 0414 	add.w	r4, r0, #20
 800a6fe:	dd45      	ble.n	800a78c <rshift+0xa0>
 800a700:	f011 011f 	ands.w	r1, r1, #31
 800a704:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a708:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a70c:	d10c      	bne.n	800a728 <rshift+0x3c>
 800a70e:	f100 0710 	add.w	r7, r0, #16
 800a712:	4629      	mov	r1, r5
 800a714:	42b1      	cmp	r1, r6
 800a716:	d334      	bcc.n	800a782 <rshift+0x96>
 800a718:	1a9b      	subs	r3, r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	1eea      	subs	r2, r5, #3
 800a71e:	4296      	cmp	r6, r2
 800a720:	bf38      	it	cc
 800a722:	2300      	movcc	r3, #0
 800a724:	4423      	add	r3, r4
 800a726:	e015      	b.n	800a754 <rshift+0x68>
 800a728:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a72c:	f1c1 0820 	rsb	r8, r1, #32
 800a730:	40cf      	lsrs	r7, r1
 800a732:	f105 0e04 	add.w	lr, r5, #4
 800a736:	46a1      	mov	r9, r4
 800a738:	4576      	cmp	r6, lr
 800a73a:	46f4      	mov	ip, lr
 800a73c:	d815      	bhi.n	800a76a <rshift+0x7e>
 800a73e:	1a9a      	subs	r2, r3, r2
 800a740:	0092      	lsls	r2, r2, #2
 800a742:	3a04      	subs	r2, #4
 800a744:	3501      	adds	r5, #1
 800a746:	42ae      	cmp	r6, r5
 800a748:	bf38      	it	cc
 800a74a:	2200      	movcc	r2, #0
 800a74c:	18a3      	adds	r3, r4, r2
 800a74e:	50a7      	str	r7, [r4, r2]
 800a750:	b107      	cbz	r7, 800a754 <rshift+0x68>
 800a752:	3304      	adds	r3, #4
 800a754:	1b1a      	subs	r2, r3, r4
 800a756:	42a3      	cmp	r3, r4
 800a758:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a75c:	bf08      	it	eq
 800a75e:	2300      	moveq	r3, #0
 800a760:	6102      	str	r2, [r0, #16]
 800a762:	bf08      	it	eq
 800a764:	6143      	streq	r3, [r0, #20]
 800a766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a76a:	f8dc c000 	ldr.w	ip, [ip]
 800a76e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a772:	ea4c 0707 	orr.w	r7, ip, r7
 800a776:	f849 7b04 	str.w	r7, [r9], #4
 800a77a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a77e:	40cf      	lsrs	r7, r1
 800a780:	e7da      	b.n	800a738 <rshift+0x4c>
 800a782:	f851 cb04 	ldr.w	ip, [r1], #4
 800a786:	f847 cf04 	str.w	ip, [r7, #4]!
 800a78a:	e7c3      	b.n	800a714 <rshift+0x28>
 800a78c:	4623      	mov	r3, r4
 800a78e:	e7e1      	b.n	800a754 <rshift+0x68>

0800a790 <__hexdig_fun>:
 800a790:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a794:	2b09      	cmp	r3, #9
 800a796:	d802      	bhi.n	800a79e <__hexdig_fun+0xe>
 800a798:	3820      	subs	r0, #32
 800a79a:	b2c0      	uxtb	r0, r0
 800a79c:	4770      	bx	lr
 800a79e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a7a2:	2b05      	cmp	r3, #5
 800a7a4:	d801      	bhi.n	800a7aa <__hexdig_fun+0x1a>
 800a7a6:	3847      	subs	r0, #71	@ 0x47
 800a7a8:	e7f7      	b.n	800a79a <__hexdig_fun+0xa>
 800a7aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a7ae:	2b05      	cmp	r3, #5
 800a7b0:	d801      	bhi.n	800a7b6 <__hexdig_fun+0x26>
 800a7b2:	3827      	subs	r0, #39	@ 0x27
 800a7b4:	e7f1      	b.n	800a79a <__hexdig_fun+0xa>
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	4770      	bx	lr
	...

0800a7bc <__gethex>:
 800a7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c0:	b085      	sub	sp, #20
 800a7c2:	468a      	mov	sl, r1
 800a7c4:	9302      	str	r3, [sp, #8]
 800a7c6:	680b      	ldr	r3, [r1, #0]
 800a7c8:	9001      	str	r0, [sp, #4]
 800a7ca:	4690      	mov	r8, r2
 800a7cc:	1c9c      	adds	r4, r3, #2
 800a7ce:	46a1      	mov	r9, r4
 800a7d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a7d4:	2830      	cmp	r0, #48	@ 0x30
 800a7d6:	d0fa      	beq.n	800a7ce <__gethex+0x12>
 800a7d8:	eba9 0303 	sub.w	r3, r9, r3
 800a7dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800a7e0:	f7ff ffd6 	bl	800a790 <__hexdig_fun>
 800a7e4:	4605      	mov	r5, r0
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	d168      	bne.n	800a8bc <__gethex+0x100>
 800a7ea:	49a0      	ldr	r1, [pc, #640]	@ (800aa6c <__gethex+0x2b0>)
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	4648      	mov	r0, r9
 800a7f0:	f7fe ffc3 	bl	800977a <strncmp>
 800a7f4:	4607      	mov	r7, r0
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d167      	bne.n	800a8ca <__gethex+0x10e>
 800a7fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a7fe:	4626      	mov	r6, r4
 800a800:	f7ff ffc6 	bl	800a790 <__hexdig_fun>
 800a804:	2800      	cmp	r0, #0
 800a806:	d062      	beq.n	800a8ce <__gethex+0x112>
 800a808:	4623      	mov	r3, r4
 800a80a:	7818      	ldrb	r0, [r3, #0]
 800a80c:	2830      	cmp	r0, #48	@ 0x30
 800a80e:	4699      	mov	r9, r3
 800a810:	f103 0301 	add.w	r3, r3, #1
 800a814:	d0f9      	beq.n	800a80a <__gethex+0x4e>
 800a816:	f7ff ffbb 	bl	800a790 <__hexdig_fun>
 800a81a:	fab0 f580 	clz	r5, r0
 800a81e:	096d      	lsrs	r5, r5, #5
 800a820:	f04f 0b01 	mov.w	fp, #1
 800a824:	464a      	mov	r2, r9
 800a826:	4616      	mov	r6, r2
 800a828:	3201      	adds	r2, #1
 800a82a:	7830      	ldrb	r0, [r6, #0]
 800a82c:	f7ff ffb0 	bl	800a790 <__hexdig_fun>
 800a830:	2800      	cmp	r0, #0
 800a832:	d1f8      	bne.n	800a826 <__gethex+0x6a>
 800a834:	498d      	ldr	r1, [pc, #564]	@ (800aa6c <__gethex+0x2b0>)
 800a836:	2201      	movs	r2, #1
 800a838:	4630      	mov	r0, r6
 800a83a:	f7fe ff9e 	bl	800977a <strncmp>
 800a83e:	2800      	cmp	r0, #0
 800a840:	d13f      	bne.n	800a8c2 <__gethex+0x106>
 800a842:	b944      	cbnz	r4, 800a856 <__gethex+0x9a>
 800a844:	1c74      	adds	r4, r6, #1
 800a846:	4622      	mov	r2, r4
 800a848:	4616      	mov	r6, r2
 800a84a:	3201      	adds	r2, #1
 800a84c:	7830      	ldrb	r0, [r6, #0]
 800a84e:	f7ff ff9f 	bl	800a790 <__hexdig_fun>
 800a852:	2800      	cmp	r0, #0
 800a854:	d1f8      	bne.n	800a848 <__gethex+0x8c>
 800a856:	1ba4      	subs	r4, r4, r6
 800a858:	00a7      	lsls	r7, r4, #2
 800a85a:	7833      	ldrb	r3, [r6, #0]
 800a85c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a860:	2b50      	cmp	r3, #80	@ 0x50
 800a862:	d13e      	bne.n	800a8e2 <__gethex+0x126>
 800a864:	7873      	ldrb	r3, [r6, #1]
 800a866:	2b2b      	cmp	r3, #43	@ 0x2b
 800a868:	d033      	beq.n	800a8d2 <__gethex+0x116>
 800a86a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a86c:	d034      	beq.n	800a8d8 <__gethex+0x11c>
 800a86e:	1c71      	adds	r1, r6, #1
 800a870:	2400      	movs	r4, #0
 800a872:	7808      	ldrb	r0, [r1, #0]
 800a874:	f7ff ff8c 	bl	800a790 <__hexdig_fun>
 800a878:	1e43      	subs	r3, r0, #1
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	2b18      	cmp	r3, #24
 800a87e:	d830      	bhi.n	800a8e2 <__gethex+0x126>
 800a880:	f1a0 0210 	sub.w	r2, r0, #16
 800a884:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a888:	f7ff ff82 	bl	800a790 <__hexdig_fun>
 800a88c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a890:	fa5f fc8c 	uxtb.w	ip, ip
 800a894:	f1bc 0f18 	cmp.w	ip, #24
 800a898:	f04f 030a 	mov.w	r3, #10
 800a89c:	d91e      	bls.n	800a8dc <__gethex+0x120>
 800a89e:	b104      	cbz	r4, 800a8a2 <__gethex+0xe6>
 800a8a0:	4252      	negs	r2, r2
 800a8a2:	4417      	add	r7, r2
 800a8a4:	f8ca 1000 	str.w	r1, [sl]
 800a8a8:	b1ed      	cbz	r5, 800a8e6 <__gethex+0x12a>
 800a8aa:	f1bb 0f00 	cmp.w	fp, #0
 800a8ae:	bf0c      	ite	eq
 800a8b0:	2506      	moveq	r5, #6
 800a8b2:	2500      	movne	r5, #0
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	b005      	add	sp, #20
 800a8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8bc:	2500      	movs	r5, #0
 800a8be:	462c      	mov	r4, r5
 800a8c0:	e7b0      	b.n	800a824 <__gethex+0x68>
 800a8c2:	2c00      	cmp	r4, #0
 800a8c4:	d1c7      	bne.n	800a856 <__gethex+0x9a>
 800a8c6:	4627      	mov	r7, r4
 800a8c8:	e7c7      	b.n	800a85a <__gethex+0x9e>
 800a8ca:	464e      	mov	r6, r9
 800a8cc:	462f      	mov	r7, r5
 800a8ce:	2501      	movs	r5, #1
 800a8d0:	e7c3      	b.n	800a85a <__gethex+0x9e>
 800a8d2:	2400      	movs	r4, #0
 800a8d4:	1cb1      	adds	r1, r6, #2
 800a8d6:	e7cc      	b.n	800a872 <__gethex+0xb6>
 800a8d8:	2401      	movs	r4, #1
 800a8da:	e7fb      	b.n	800a8d4 <__gethex+0x118>
 800a8dc:	fb03 0002 	mla	r0, r3, r2, r0
 800a8e0:	e7ce      	b.n	800a880 <__gethex+0xc4>
 800a8e2:	4631      	mov	r1, r6
 800a8e4:	e7de      	b.n	800a8a4 <__gethex+0xe8>
 800a8e6:	eba6 0309 	sub.w	r3, r6, r9
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	2b07      	cmp	r3, #7
 800a8f0:	dc0a      	bgt.n	800a908 <__gethex+0x14c>
 800a8f2:	9801      	ldr	r0, [sp, #4]
 800a8f4:	f000 fafc 	bl	800aef0 <_Balloc>
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	b940      	cbnz	r0, 800a90e <__gethex+0x152>
 800a8fc:	4b5c      	ldr	r3, [pc, #368]	@ (800aa70 <__gethex+0x2b4>)
 800a8fe:	4602      	mov	r2, r0
 800a900:	21e4      	movs	r1, #228	@ 0xe4
 800a902:	485c      	ldr	r0, [pc, #368]	@ (800aa74 <__gethex+0x2b8>)
 800a904:	f7ff f83e 	bl	8009984 <__assert_func>
 800a908:	3101      	adds	r1, #1
 800a90a:	105b      	asrs	r3, r3, #1
 800a90c:	e7ef      	b.n	800a8ee <__gethex+0x132>
 800a90e:	f100 0a14 	add.w	sl, r0, #20
 800a912:	2300      	movs	r3, #0
 800a914:	4655      	mov	r5, sl
 800a916:	469b      	mov	fp, r3
 800a918:	45b1      	cmp	r9, r6
 800a91a:	d337      	bcc.n	800a98c <__gethex+0x1d0>
 800a91c:	f845 bb04 	str.w	fp, [r5], #4
 800a920:	eba5 050a 	sub.w	r5, r5, sl
 800a924:	10ad      	asrs	r5, r5, #2
 800a926:	6125      	str	r5, [r4, #16]
 800a928:	4658      	mov	r0, fp
 800a92a:	f000 fbd3 	bl	800b0d4 <__hi0bits>
 800a92e:	016d      	lsls	r5, r5, #5
 800a930:	f8d8 6000 	ldr.w	r6, [r8]
 800a934:	1a2d      	subs	r5, r5, r0
 800a936:	42b5      	cmp	r5, r6
 800a938:	dd54      	ble.n	800a9e4 <__gethex+0x228>
 800a93a:	1bad      	subs	r5, r5, r6
 800a93c:	4629      	mov	r1, r5
 800a93e:	4620      	mov	r0, r4
 800a940:	f000 ff67 	bl	800b812 <__any_on>
 800a944:	4681      	mov	r9, r0
 800a946:	b178      	cbz	r0, 800a968 <__gethex+0x1ac>
 800a948:	1e6b      	subs	r3, r5, #1
 800a94a:	1159      	asrs	r1, r3, #5
 800a94c:	f003 021f 	and.w	r2, r3, #31
 800a950:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a954:	f04f 0901 	mov.w	r9, #1
 800a958:	fa09 f202 	lsl.w	r2, r9, r2
 800a95c:	420a      	tst	r2, r1
 800a95e:	d003      	beq.n	800a968 <__gethex+0x1ac>
 800a960:	454b      	cmp	r3, r9
 800a962:	dc36      	bgt.n	800a9d2 <__gethex+0x216>
 800a964:	f04f 0902 	mov.w	r9, #2
 800a968:	4629      	mov	r1, r5
 800a96a:	4620      	mov	r0, r4
 800a96c:	f7ff febe 	bl	800a6ec <rshift>
 800a970:	442f      	add	r7, r5
 800a972:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a976:	42bb      	cmp	r3, r7
 800a978:	da42      	bge.n	800aa00 <__gethex+0x244>
 800a97a:	9801      	ldr	r0, [sp, #4]
 800a97c:	4621      	mov	r1, r4
 800a97e:	f000 faf7 	bl	800af70 <_Bfree>
 800a982:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a984:	2300      	movs	r3, #0
 800a986:	6013      	str	r3, [r2, #0]
 800a988:	25a3      	movs	r5, #163	@ 0xa3
 800a98a:	e793      	b.n	800a8b4 <__gethex+0xf8>
 800a98c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a990:	2a2e      	cmp	r2, #46	@ 0x2e
 800a992:	d012      	beq.n	800a9ba <__gethex+0x1fe>
 800a994:	2b20      	cmp	r3, #32
 800a996:	d104      	bne.n	800a9a2 <__gethex+0x1e6>
 800a998:	f845 bb04 	str.w	fp, [r5], #4
 800a99c:	f04f 0b00 	mov.w	fp, #0
 800a9a0:	465b      	mov	r3, fp
 800a9a2:	7830      	ldrb	r0, [r6, #0]
 800a9a4:	9303      	str	r3, [sp, #12]
 800a9a6:	f7ff fef3 	bl	800a790 <__hexdig_fun>
 800a9aa:	9b03      	ldr	r3, [sp, #12]
 800a9ac:	f000 000f 	and.w	r0, r0, #15
 800a9b0:	4098      	lsls	r0, r3
 800a9b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	e7ae      	b.n	800a918 <__gethex+0x15c>
 800a9ba:	45b1      	cmp	r9, r6
 800a9bc:	d8ea      	bhi.n	800a994 <__gethex+0x1d8>
 800a9be:	492b      	ldr	r1, [pc, #172]	@ (800aa6c <__gethex+0x2b0>)
 800a9c0:	9303      	str	r3, [sp, #12]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f7fe fed8 	bl	800977a <strncmp>
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d1e1      	bne.n	800a994 <__gethex+0x1d8>
 800a9d0:	e7a2      	b.n	800a918 <__gethex+0x15c>
 800a9d2:	1ea9      	subs	r1, r5, #2
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f000 ff1c 	bl	800b812 <__any_on>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d0c2      	beq.n	800a964 <__gethex+0x1a8>
 800a9de:	f04f 0903 	mov.w	r9, #3
 800a9e2:	e7c1      	b.n	800a968 <__gethex+0x1ac>
 800a9e4:	da09      	bge.n	800a9fa <__gethex+0x23e>
 800a9e6:	1b75      	subs	r5, r6, r5
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	9801      	ldr	r0, [sp, #4]
 800a9ec:	462a      	mov	r2, r5
 800a9ee:	f000 fcd7 	bl	800b3a0 <__lshift>
 800a9f2:	1b7f      	subs	r7, r7, r5
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	f100 0a14 	add.w	sl, r0, #20
 800a9fa:	f04f 0900 	mov.w	r9, #0
 800a9fe:	e7b8      	b.n	800a972 <__gethex+0x1b6>
 800aa00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa04:	42bd      	cmp	r5, r7
 800aa06:	dd6f      	ble.n	800aae8 <__gethex+0x32c>
 800aa08:	1bed      	subs	r5, r5, r7
 800aa0a:	42ae      	cmp	r6, r5
 800aa0c:	dc34      	bgt.n	800aa78 <__gethex+0x2bc>
 800aa0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d022      	beq.n	800aa5c <__gethex+0x2a0>
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d024      	beq.n	800aa64 <__gethex+0x2a8>
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d115      	bne.n	800aa4a <__gethex+0x28e>
 800aa1e:	42ae      	cmp	r6, r5
 800aa20:	d113      	bne.n	800aa4a <__gethex+0x28e>
 800aa22:	2e01      	cmp	r6, #1
 800aa24:	d10b      	bne.n	800aa3e <__gethex+0x282>
 800aa26:	9a02      	ldr	r2, [sp, #8]
 800aa28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa2c:	6013      	str	r3, [r2, #0]
 800aa2e:	2301      	movs	r3, #1
 800aa30:	6123      	str	r3, [r4, #16]
 800aa32:	f8ca 3000 	str.w	r3, [sl]
 800aa36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa38:	2562      	movs	r5, #98	@ 0x62
 800aa3a:	601c      	str	r4, [r3, #0]
 800aa3c:	e73a      	b.n	800a8b4 <__gethex+0xf8>
 800aa3e:	1e71      	subs	r1, r6, #1
 800aa40:	4620      	mov	r0, r4
 800aa42:	f000 fee6 	bl	800b812 <__any_on>
 800aa46:	2800      	cmp	r0, #0
 800aa48:	d1ed      	bne.n	800aa26 <__gethex+0x26a>
 800aa4a:	9801      	ldr	r0, [sp, #4]
 800aa4c:	4621      	mov	r1, r4
 800aa4e:	f000 fa8f 	bl	800af70 <_Bfree>
 800aa52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa54:	2300      	movs	r3, #0
 800aa56:	6013      	str	r3, [r2, #0]
 800aa58:	2550      	movs	r5, #80	@ 0x50
 800aa5a:	e72b      	b.n	800a8b4 <__gethex+0xf8>
 800aa5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1f3      	bne.n	800aa4a <__gethex+0x28e>
 800aa62:	e7e0      	b.n	800aa26 <__gethex+0x26a>
 800aa64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1dd      	bne.n	800aa26 <__gethex+0x26a>
 800aa6a:	e7ee      	b.n	800aa4a <__gethex+0x28e>
 800aa6c:	0800da88 	.word	0x0800da88
 800aa70:	0800dd34 	.word	0x0800dd34
 800aa74:	0800dd45 	.word	0x0800dd45
 800aa78:	1e6f      	subs	r7, r5, #1
 800aa7a:	f1b9 0f00 	cmp.w	r9, #0
 800aa7e:	d130      	bne.n	800aae2 <__gethex+0x326>
 800aa80:	b127      	cbz	r7, 800aa8c <__gethex+0x2d0>
 800aa82:	4639      	mov	r1, r7
 800aa84:	4620      	mov	r0, r4
 800aa86:	f000 fec4 	bl	800b812 <__any_on>
 800aa8a:	4681      	mov	r9, r0
 800aa8c:	117a      	asrs	r2, r7, #5
 800aa8e:	2301      	movs	r3, #1
 800aa90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aa94:	f007 071f 	and.w	r7, r7, #31
 800aa98:	40bb      	lsls	r3, r7
 800aa9a:	4213      	tst	r3, r2
 800aa9c:	4629      	mov	r1, r5
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	bf18      	it	ne
 800aaa2:	f049 0902 	orrne.w	r9, r9, #2
 800aaa6:	f7ff fe21 	bl	800a6ec <rshift>
 800aaaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800aaae:	1b76      	subs	r6, r6, r5
 800aab0:	2502      	movs	r5, #2
 800aab2:	f1b9 0f00 	cmp.w	r9, #0
 800aab6:	d047      	beq.n	800ab48 <__gethex+0x38c>
 800aab8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d015      	beq.n	800aaec <__gethex+0x330>
 800aac0:	2b03      	cmp	r3, #3
 800aac2:	d017      	beq.n	800aaf4 <__gethex+0x338>
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d109      	bne.n	800aadc <__gethex+0x320>
 800aac8:	f019 0f02 	tst.w	r9, #2
 800aacc:	d006      	beq.n	800aadc <__gethex+0x320>
 800aace:	f8da 3000 	ldr.w	r3, [sl]
 800aad2:	ea49 0903 	orr.w	r9, r9, r3
 800aad6:	f019 0f01 	tst.w	r9, #1
 800aada:	d10e      	bne.n	800aafa <__gethex+0x33e>
 800aadc:	f045 0510 	orr.w	r5, r5, #16
 800aae0:	e032      	b.n	800ab48 <__gethex+0x38c>
 800aae2:	f04f 0901 	mov.w	r9, #1
 800aae6:	e7d1      	b.n	800aa8c <__gethex+0x2d0>
 800aae8:	2501      	movs	r5, #1
 800aaea:	e7e2      	b.n	800aab2 <__gethex+0x2f6>
 800aaec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaee:	f1c3 0301 	rsb	r3, r3, #1
 800aaf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aaf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d0f0      	beq.n	800aadc <__gethex+0x320>
 800aafa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aafe:	f104 0314 	add.w	r3, r4, #20
 800ab02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ab06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ab0a:	f04f 0c00 	mov.w	ip, #0
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab14:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab18:	d01b      	beq.n	800ab52 <__gethex+0x396>
 800ab1a:	3201      	adds	r2, #1
 800ab1c:	6002      	str	r2, [r0, #0]
 800ab1e:	2d02      	cmp	r5, #2
 800ab20:	f104 0314 	add.w	r3, r4, #20
 800ab24:	d13c      	bne.n	800aba0 <__gethex+0x3e4>
 800ab26:	f8d8 2000 	ldr.w	r2, [r8]
 800ab2a:	3a01      	subs	r2, #1
 800ab2c:	42b2      	cmp	r2, r6
 800ab2e:	d109      	bne.n	800ab44 <__gethex+0x388>
 800ab30:	1171      	asrs	r1, r6, #5
 800ab32:	2201      	movs	r2, #1
 800ab34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab38:	f006 061f 	and.w	r6, r6, #31
 800ab3c:	fa02 f606 	lsl.w	r6, r2, r6
 800ab40:	421e      	tst	r6, r3
 800ab42:	d13a      	bne.n	800abba <__gethex+0x3fe>
 800ab44:	f045 0520 	orr.w	r5, r5, #32
 800ab48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab4a:	601c      	str	r4, [r3, #0]
 800ab4c:	9b02      	ldr	r3, [sp, #8]
 800ab4e:	601f      	str	r7, [r3, #0]
 800ab50:	e6b0      	b.n	800a8b4 <__gethex+0xf8>
 800ab52:	4299      	cmp	r1, r3
 800ab54:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab58:	d8d9      	bhi.n	800ab0e <__gethex+0x352>
 800ab5a:	68a3      	ldr	r3, [r4, #8]
 800ab5c:	459b      	cmp	fp, r3
 800ab5e:	db17      	blt.n	800ab90 <__gethex+0x3d4>
 800ab60:	6861      	ldr	r1, [r4, #4]
 800ab62:	9801      	ldr	r0, [sp, #4]
 800ab64:	3101      	adds	r1, #1
 800ab66:	f000 f9c3 	bl	800aef0 <_Balloc>
 800ab6a:	4681      	mov	r9, r0
 800ab6c:	b918      	cbnz	r0, 800ab76 <__gethex+0x3ba>
 800ab6e:	4b1a      	ldr	r3, [pc, #104]	@ (800abd8 <__gethex+0x41c>)
 800ab70:	4602      	mov	r2, r0
 800ab72:	2184      	movs	r1, #132	@ 0x84
 800ab74:	e6c5      	b.n	800a902 <__gethex+0x146>
 800ab76:	6922      	ldr	r2, [r4, #16]
 800ab78:	3202      	adds	r2, #2
 800ab7a:	f104 010c 	add.w	r1, r4, #12
 800ab7e:	0092      	lsls	r2, r2, #2
 800ab80:	300c      	adds	r0, #12
 800ab82:	f7fe fee0 	bl	8009946 <memcpy>
 800ab86:	4621      	mov	r1, r4
 800ab88:	9801      	ldr	r0, [sp, #4]
 800ab8a:	f000 f9f1 	bl	800af70 <_Bfree>
 800ab8e:	464c      	mov	r4, r9
 800ab90:	6923      	ldr	r3, [r4, #16]
 800ab92:	1c5a      	adds	r2, r3, #1
 800ab94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab98:	6122      	str	r2, [r4, #16]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	615a      	str	r2, [r3, #20]
 800ab9e:	e7be      	b.n	800ab1e <__gethex+0x362>
 800aba0:	6922      	ldr	r2, [r4, #16]
 800aba2:	455a      	cmp	r2, fp
 800aba4:	dd0b      	ble.n	800abbe <__gethex+0x402>
 800aba6:	2101      	movs	r1, #1
 800aba8:	4620      	mov	r0, r4
 800abaa:	f7ff fd9f 	bl	800a6ec <rshift>
 800abae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abb2:	3701      	adds	r7, #1
 800abb4:	42bb      	cmp	r3, r7
 800abb6:	f6ff aee0 	blt.w	800a97a <__gethex+0x1be>
 800abba:	2501      	movs	r5, #1
 800abbc:	e7c2      	b.n	800ab44 <__gethex+0x388>
 800abbe:	f016 061f 	ands.w	r6, r6, #31
 800abc2:	d0fa      	beq.n	800abba <__gethex+0x3fe>
 800abc4:	4453      	add	r3, sl
 800abc6:	f1c6 0620 	rsb	r6, r6, #32
 800abca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800abce:	f000 fa81 	bl	800b0d4 <__hi0bits>
 800abd2:	42b0      	cmp	r0, r6
 800abd4:	dbe7      	blt.n	800aba6 <__gethex+0x3ea>
 800abd6:	e7f0      	b.n	800abba <__gethex+0x3fe>
 800abd8:	0800dd34 	.word	0x0800dd34

0800abdc <L_shift>:
 800abdc:	f1c2 0208 	rsb	r2, r2, #8
 800abe0:	0092      	lsls	r2, r2, #2
 800abe2:	b570      	push	{r4, r5, r6, lr}
 800abe4:	f1c2 0620 	rsb	r6, r2, #32
 800abe8:	6843      	ldr	r3, [r0, #4]
 800abea:	6804      	ldr	r4, [r0, #0]
 800abec:	fa03 f506 	lsl.w	r5, r3, r6
 800abf0:	432c      	orrs	r4, r5
 800abf2:	40d3      	lsrs	r3, r2
 800abf4:	6004      	str	r4, [r0, #0]
 800abf6:	f840 3f04 	str.w	r3, [r0, #4]!
 800abfa:	4288      	cmp	r0, r1
 800abfc:	d3f4      	bcc.n	800abe8 <L_shift+0xc>
 800abfe:	bd70      	pop	{r4, r5, r6, pc}

0800ac00 <__match>:
 800ac00:	b530      	push	{r4, r5, lr}
 800ac02:	6803      	ldr	r3, [r0, #0]
 800ac04:	3301      	adds	r3, #1
 800ac06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac0a:	b914      	cbnz	r4, 800ac12 <__match+0x12>
 800ac0c:	6003      	str	r3, [r0, #0]
 800ac0e:	2001      	movs	r0, #1
 800ac10:	bd30      	pop	{r4, r5, pc}
 800ac12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ac1a:	2d19      	cmp	r5, #25
 800ac1c:	bf98      	it	ls
 800ac1e:	3220      	addls	r2, #32
 800ac20:	42a2      	cmp	r2, r4
 800ac22:	d0f0      	beq.n	800ac06 <__match+0x6>
 800ac24:	2000      	movs	r0, #0
 800ac26:	e7f3      	b.n	800ac10 <__match+0x10>

0800ac28 <__hexnan>:
 800ac28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2c:	680b      	ldr	r3, [r1, #0]
 800ac2e:	6801      	ldr	r1, [r0, #0]
 800ac30:	115e      	asrs	r6, r3, #5
 800ac32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac36:	f013 031f 	ands.w	r3, r3, #31
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	bf18      	it	ne
 800ac3e:	3604      	addne	r6, #4
 800ac40:	2500      	movs	r5, #0
 800ac42:	1f37      	subs	r7, r6, #4
 800ac44:	4682      	mov	sl, r0
 800ac46:	4690      	mov	r8, r2
 800ac48:	9301      	str	r3, [sp, #4]
 800ac4a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac4e:	46b9      	mov	r9, r7
 800ac50:	463c      	mov	r4, r7
 800ac52:	9502      	str	r5, [sp, #8]
 800ac54:	46ab      	mov	fp, r5
 800ac56:	784a      	ldrb	r2, [r1, #1]
 800ac58:	1c4b      	adds	r3, r1, #1
 800ac5a:	9303      	str	r3, [sp, #12]
 800ac5c:	b342      	cbz	r2, 800acb0 <__hexnan+0x88>
 800ac5e:	4610      	mov	r0, r2
 800ac60:	9105      	str	r1, [sp, #20]
 800ac62:	9204      	str	r2, [sp, #16]
 800ac64:	f7ff fd94 	bl	800a790 <__hexdig_fun>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d151      	bne.n	800ad10 <__hexnan+0xe8>
 800ac6c:	9a04      	ldr	r2, [sp, #16]
 800ac6e:	9905      	ldr	r1, [sp, #20]
 800ac70:	2a20      	cmp	r2, #32
 800ac72:	d818      	bhi.n	800aca6 <__hexnan+0x7e>
 800ac74:	9b02      	ldr	r3, [sp, #8]
 800ac76:	459b      	cmp	fp, r3
 800ac78:	dd13      	ble.n	800aca2 <__hexnan+0x7a>
 800ac7a:	454c      	cmp	r4, r9
 800ac7c:	d206      	bcs.n	800ac8c <__hexnan+0x64>
 800ac7e:	2d07      	cmp	r5, #7
 800ac80:	dc04      	bgt.n	800ac8c <__hexnan+0x64>
 800ac82:	462a      	mov	r2, r5
 800ac84:	4649      	mov	r1, r9
 800ac86:	4620      	mov	r0, r4
 800ac88:	f7ff ffa8 	bl	800abdc <L_shift>
 800ac8c:	4544      	cmp	r4, r8
 800ac8e:	d952      	bls.n	800ad36 <__hexnan+0x10e>
 800ac90:	2300      	movs	r3, #0
 800ac92:	f1a4 0904 	sub.w	r9, r4, #4
 800ac96:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac9a:	f8cd b008 	str.w	fp, [sp, #8]
 800ac9e:	464c      	mov	r4, r9
 800aca0:	461d      	mov	r5, r3
 800aca2:	9903      	ldr	r1, [sp, #12]
 800aca4:	e7d7      	b.n	800ac56 <__hexnan+0x2e>
 800aca6:	2a29      	cmp	r2, #41	@ 0x29
 800aca8:	d157      	bne.n	800ad5a <__hexnan+0x132>
 800acaa:	3102      	adds	r1, #2
 800acac:	f8ca 1000 	str.w	r1, [sl]
 800acb0:	f1bb 0f00 	cmp.w	fp, #0
 800acb4:	d051      	beq.n	800ad5a <__hexnan+0x132>
 800acb6:	454c      	cmp	r4, r9
 800acb8:	d206      	bcs.n	800acc8 <__hexnan+0xa0>
 800acba:	2d07      	cmp	r5, #7
 800acbc:	dc04      	bgt.n	800acc8 <__hexnan+0xa0>
 800acbe:	462a      	mov	r2, r5
 800acc0:	4649      	mov	r1, r9
 800acc2:	4620      	mov	r0, r4
 800acc4:	f7ff ff8a 	bl	800abdc <L_shift>
 800acc8:	4544      	cmp	r4, r8
 800acca:	d936      	bls.n	800ad3a <__hexnan+0x112>
 800accc:	f1a8 0204 	sub.w	r2, r8, #4
 800acd0:	4623      	mov	r3, r4
 800acd2:	f853 1b04 	ldr.w	r1, [r3], #4
 800acd6:	f842 1f04 	str.w	r1, [r2, #4]!
 800acda:	429f      	cmp	r7, r3
 800acdc:	d2f9      	bcs.n	800acd2 <__hexnan+0xaa>
 800acde:	1b3b      	subs	r3, r7, r4
 800ace0:	f023 0303 	bic.w	r3, r3, #3
 800ace4:	3304      	adds	r3, #4
 800ace6:	3401      	adds	r4, #1
 800ace8:	3e03      	subs	r6, #3
 800acea:	42b4      	cmp	r4, r6
 800acec:	bf88      	it	hi
 800acee:	2304      	movhi	r3, #4
 800acf0:	4443      	add	r3, r8
 800acf2:	2200      	movs	r2, #0
 800acf4:	f843 2b04 	str.w	r2, [r3], #4
 800acf8:	429f      	cmp	r7, r3
 800acfa:	d2fb      	bcs.n	800acf4 <__hexnan+0xcc>
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	b91b      	cbnz	r3, 800ad08 <__hexnan+0xe0>
 800ad00:	4547      	cmp	r7, r8
 800ad02:	d128      	bne.n	800ad56 <__hexnan+0x12e>
 800ad04:	2301      	movs	r3, #1
 800ad06:	603b      	str	r3, [r7, #0]
 800ad08:	2005      	movs	r0, #5
 800ad0a:	b007      	add	sp, #28
 800ad0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad10:	3501      	adds	r5, #1
 800ad12:	2d08      	cmp	r5, #8
 800ad14:	f10b 0b01 	add.w	fp, fp, #1
 800ad18:	dd06      	ble.n	800ad28 <__hexnan+0x100>
 800ad1a:	4544      	cmp	r4, r8
 800ad1c:	d9c1      	bls.n	800aca2 <__hexnan+0x7a>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad24:	2501      	movs	r5, #1
 800ad26:	3c04      	subs	r4, #4
 800ad28:	6822      	ldr	r2, [r4, #0]
 800ad2a:	f000 000f 	and.w	r0, r0, #15
 800ad2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ad32:	6020      	str	r0, [r4, #0]
 800ad34:	e7b5      	b.n	800aca2 <__hexnan+0x7a>
 800ad36:	2508      	movs	r5, #8
 800ad38:	e7b3      	b.n	800aca2 <__hexnan+0x7a>
 800ad3a:	9b01      	ldr	r3, [sp, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d0dd      	beq.n	800acfc <__hexnan+0xd4>
 800ad40:	f1c3 0320 	rsb	r3, r3, #32
 800ad44:	f04f 32ff 	mov.w	r2, #4294967295
 800ad48:	40da      	lsrs	r2, r3
 800ad4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ad4e:	4013      	ands	r3, r2
 800ad50:	f846 3c04 	str.w	r3, [r6, #-4]
 800ad54:	e7d2      	b.n	800acfc <__hexnan+0xd4>
 800ad56:	3f04      	subs	r7, #4
 800ad58:	e7d0      	b.n	800acfc <__hexnan+0xd4>
 800ad5a:	2004      	movs	r0, #4
 800ad5c:	e7d5      	b.n	800ad0a <__hexnan+0xe2>
	...

0800ad60 <malloc>:
 800ad60:	4b02      	ldr	r3, [pc, #8]	@ (800ad6c <malloc+0xc>)
 800ad62:	4601      	mov	r1, r0
 800ad64:	6818      	ldr	r0, [r3, #0]
 800ad66:	f000 b825 	b.w	800adb4 <_malloc_r>
 800ad6a:	bf00      	nop
 800ad6c:	20000250 	.word	0x20000250

0800ad70 <sbrk_aligned>:
 800ad70:	b570      	push	{r4, r5, r6, lr}
 800ad72:	4e0f      	ldr	r6, [pc, #60]	@ (800adb0 <sbrk_aligned+0x40>)
 800ad74:	460c      	mov	r4, r1
 800ad76:	6831      	ldr	r1, [r6, #0]
 800ad78:	4605      	mov	r5, r0
 800ad7a:	b911      	cbnz	r1, 800ad82 <sbrk_aligned+0x12>
 800ad7c:	f000 ffa6 	bl	800bccc <_sbrk_r>
 800ad80:	6030      	str	r0, [r6, #0]
 800ad82:	4621      	mov	r1, r4
 800ad84:	4628      	mov	r0, r5
 800ad86:	f000 ffa1 	bl	800bccc <_sbrk_r>
 800ad8a:	1c43      	adds	r3, r0, #1
 800ad8c:	d103      	bne.n	800ad96 <sbrk_aligned+0x26>
 800ad8e:	f04f 34ff 	mov.w	r4, #4294967295
 800ad92:	4620      	mov	r0, r4
 800ad94:	bd70      	pop	{r4, r5, r6, pc}
 800ad96:	1cc4      	adds	r4, r0, #3
 800ad98:	f024 0403 	bic.w	r4, r4, #3
 800ad9c:	42a0      	cmp	r0, r4
 800ad9e:	d0f8      	beq.n	800ad92 <sbrk_aligned+0x22>
 800ada0:	1a21      	subs	r1, r4, r0
 800ada2:	4628      	mov	r0, r5
 800ada4:	f000 ff92 	bl	800bccc <_sbrk_r>
 800ada8:	3001      	adds	r0, #1
 800adaa:	d1f2      	bne.n	800ad92 <sbrk_aligned+0x22>
 800adac:	e7ef      	b.n	800ad8e <sbrk_aligned+0x1e>
 800adae:	bf00      	nop
 800adb0:	2000083c 	.word	0x2000083c

0800adb4 <_malloc_r>:
 800adb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adb8:	1ccd      	adds	r5, r1, #3
 800adba:	f025 0503 	bic.w	r5, r5, #3
 800adbe:	3508      	adds	r5, #8
 800adc0:	2d0c      	cmp	r5, #12
 800adc2:	bf38      	it	cc
 800adc4:	250c      	movcc	r5, #12
 800adc6:	2d00      	cmp	r5, #0
 800adc8:	4606      	mov	r6, r0
 800adca:	db01      	blt.n	800add0 <_malloc_r+0x1c>
 800adcc:	42a9      	cmp	r1, r5
 800adce:	d904      	bls.n	800adda <_malloc_r+0x26>
 800add0:	230c      	movs	r3, #12
 800add2:	6033      	str	r3, [r6, #0]
 800add4:	2000      	movs	r0, #0
 800add6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aeb0 <_malloc_r+0xfc>
 800adde:	f000 f87b 	bl	800aed8 <__malloc_lock>
 800ade2:	f8d8 3000 	ldr.w	r3, [r8]
 800ade6:	461c      	mov	r4, r3
 800ade8:	bb44      	cbnz	r4, 800ae3c <_malloc_r+0x88>
 800adea:	4629      	mov	r1, r5
 800adec:	4630      	mov	r0, r6
 800adee:	f7ff ffbf 	bl	800ad70 <sbrk_aligned>
 800adf2:	1c43      	adds	r3, r0, #1
 800adf4:	4604      	mov	r4, r0
 800adf6:	d158      	bne.n	800aeaa <_malloc_r+0xf6>
 800adf8:	f8d8 4000 	ldr.w	r4, [r8]
 800adfc:	4627      	mov	r7, r4
 800adfe:	2f00      	cmp	r7, #0
 800ae00:	d143      	bne.n	800ae8a <_malloc_r+0xd6>
 800ae02:	2c00      	cmp	r4, #0
 800ae04:	d04b      	beq.n	800ae9e <_malloc_r+0xea>
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	4639      	mov	r1, r7
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	eb04 0903 	add.w	r9, r4, r3
 800ae10:	f000 ff5c 	bl	800bccc <_sbrk_r>
 800ae14:	4581      	cmp	r9, r0
 800ae16:	d142      	bne.n	800ae9e <_malloc_r+0xea>
 800ae18:	6821      	ldr	r1, [r4, #0]
 800ae1a:	1a6d      	subs	r5, r5, r1
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f7ff ffa6 	bl	800ad70 <sbrk_aligned>
 800ae24:	3001      	adds	r0, #1
 800ae26:	d03a      	beq.n	800ae9e <_malloc_r+0xea>
 800ae28:	6823      	ldr	r3, [r4, #0]
 800ae2a:	442b      	add	r3, r5
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae32:	685a      	ldr	r2, [r3, #4]
 800ae34:	bb62      	cbnz	r2, 800ae90 <_malloc_r+0xdc>
 800ae36:	f8c8 7000 	str.w	r7, [r8]
 800ae3a:	e00f      	b.n	800ae5c <_malloc_r+0xa8>
 800ae3c:	6822      	ldr	r2, [r4, #0]
 800ae3e:	1b52      	subs	r2, r2, r5
 800ae40:	d420      	bmi.n	800ae84 <_malloc_r+0xd0>
 800ae42:	2a0b      	cmp	r2, #11
 800ae44:	d917      	bls.n	800ae76 <_malloc_r+0xc2>
 800ae46:	1961      	adds	r1, r4, r5
 800ae48:	42a3      	cmp	r3, r4
 800ae4a:	6025      	str	r5, [r4, #0]
 800ae4c:	bf18      	it	ne
 800ae4e:	6059      	strne	r1, [r3, #4]
 800ae50:	6863      	ldr	r3, [r4, #4]
 800ae52:	bf08      	it	eq
 800ae54:	f8c8 1000 	streq.w	r1, [r8]
 800ae58:	5162      	str	r2, [r4, r5]
 800ae5a:	604b      	str	r3, [r1, #4]
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f000 f841 	bl	800aee4 <__malloc_unlock>
 800ae62:	f104 000b 	add.w	r0, r4, #11
 800ae66:	1d23      	adds	r3, r4, #4
 800ae68:	f020 0007 	bic.w	r0, r0, #7
 800ae6c:	1ac2      	subs	r2, r0, r3
 800ae6e:	bf1c      	itt	ne
 800ae70:	1a1b      	subne	r3, r3, r0
 800ae72:	50a3      	strne	r3, [r4, r2]
 800ae74:	e7af      	b.n	800add6 <_malloc_r+0x22>
 800ae76:	6862      	ldr	r2, [r4, #4]
 800ae78:	42a3      	cmp	r3, r4
 800ae7a:	bf0c      	ite	eq
 800ae7c:	f8c8 2000 	streq.w	r2, [r8]
 800ae80:	605a      	strne	r2, [r3, #4]
 800ae82:	e7eb      	b.n	800ae5c <_malloc_r+0xa8>
 800ae84:	4623      	mov	r3, r4
 800ae86:	6864      	ldr	r4, [r4, #4]
 800ae88:	e7ae      	b.n	800ade8 <_malloc_r+0x34>
 800ae8a:	463c      	mov	r4, r7
 800ae8c:	687f      	ldr	r7, [r7, #4]
 800ae8e:	e7b6      	b.n	800adfe <_malloc_r+0x4a>
 800ae90:	461a      	mov	r2, r3
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	42a3      	cmp	r3, r4
 800ae96:	d1fb      	bne.n	800ae90 <_malloc_r+0xdc>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	6053      	str	r3, [r2, #4]
 800ae9c:	e7de      	b.n	800ae5c <_malloc_r+0xa8>
 800ae9e:	230c      	movs	r3, #12
 800aea0:	6033      	str	r3, [r6, #0]
 800aea2:	4630      	mov	r0, r6
 800aea4:	f000 f81e 	bl	800aee4 <__malloc_unlock>
 800aea8:	e794      	b.n	800add4 <_malloc_r+0x20>
 800aeaa:	6005      	str	r5, [r0, #0]
 800aeac:	e7d6      	b.n	800ae5c <_malloc_r+0xa8>
 800aeae:	bf00      	nop
 800aeb0:	20000840 	.word	0x20000840

0800aeb4 <__ascii_mbtowc>:
 800aeb4:	b082      	sub	sp, #8
 800aeb6:	b901      	cbnz	r1, 800aeba <__ascii_mbtowc+0x6>
 800aeb8:	a901      	add	r1, sp, #4
 800aeba:	b142      	cbz	r2, 800aece <__ascii_mbtowc+0x1a>
 800aebc:	b14b      	cbz	r3, 800aed2 <__ascii_mbtowc+0x1e>
 800aebe:	7813      	ldrb	r3, [r2, #0]
 800aec0:	600b      	str	r3, [r1, #0]
 800aec2:	7812      	ldrb	r2, [r2, #0]
 800aec4:	1e10      	subs	r0, r2, #0
 800aec6:	bf18      	it	ne
 800aec8:	2001      	movne	r0, #1
 800aeca:	b002      	add	sp, #8
 800aecc:	4770      	bx	lr
 800aece:	4610      	mov	r0, r2
 800aed0:	e7fb      	b.n	800aeca <__ascii_mbtowc+0x16>
 800aed2:	f06f 0001 	mvn.w	r0, #1
 800aed6:	e7f8      	b.n	800aeca <__ascii_mbtowc+0x16>

0800aed8 <__malloc_lock>:
 800aed8:	4801      	ldr	r0, [pc, #4]	@ (800aee0 <__malloc_lock+0x8>)
 800aeda:	f7fe bd32 	b.w	8009942 <__retarget_lock_acquire_recursive>
 800aede:	bf00      	nop
 800aee0:	20000838 	.word	0x20000838

0800aee4 <__malloc_unlock>:
 800aee4:	4801      	ldr	r0, [pc, #4]	@ (800aeec <__malloc_unlock+0x8>)
 800aee6:	f7fe bd2d 	b.w	8009944 <__retarget_lock_release_recursive>
 800aeea:	bf00      	nop
 800aeec:	20000838 	.word	0x20000838

0800aef0 <_Balloc>:
 800aef0:	b570      	push	{r4, r5, r6, lr}
 800aef2:	69c6      	ldr	r6, [r0, #28]
 800aef4:	4604      	mov	r4, r0
 800aef6:	460d      	mov	r5, r1
 800aef8:	b976      	cbnz	r6, 800af18 <_Balloc+0x28>
 800aefa:	2010      	movs	r0, #16
 800aefc:	f7ff ff30 	bl	800ad60 <malloc>
 800af00:	4602      	mov	r2, r0
 800af02:	61e0      	str	r0, [r4, #28]
 800af04:	b920      	cbnz	r0, 800af10 <_Balloc+0x20>
 800af06:	4b18      	ldr	r3, [pc, #96]	@ (800af68 <_Balloc+0x78>)
 800af08:	4818      	ldr	r0, [pc, #96]	@ (800af6c <_Balloc+0x7c>)
 800af0a:	216b      	movs	r1, #107	@ 0x6b
 800af0c:	f7fe fd3a 	bl	8009984 <__assert_func>
 800af10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af14:	6006      	str	r6, [r0, #0]
 800af16:	60c6      	str	r6, [r0, #12]
 800af18:	69e6      	ldr	r6, [r4, #28]
 800af1a:	68f3      	ldr	r3, [r6, #12]
 800af1c:	b183      	cbz	r3, 800af40 <_Balloc+0x50>
 800af1e:	69e3      	ldr	r3, [r4, #28]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af26:	b9b8      	cbnz	r0, 800af58 <_Balloc+0x68>
 800af28:	2101      	movs	r1, #1
 800af2a:	fa01 f605 	lsl.w	r6, r1, r5
 800af2e:	1d72      	adds	r2, r6, #5
 800af30:	0092      	lsls	r2, r2, #2
 800af32:	4620      	mov	r0, r4
 800af34:	f000 fee1 	bl	800bcfa <_calloc_r>
 800af38:	b160      	cbz	r0, 800af54 <_Balloc+0x64>
 800af3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af3e:	e00e      	b.n	800af5e <_Balloc+0x6e>
 800af40:	2221      	movs	r2, #33	@ 0x21
 800af42:	2104      	movs	r1, #4
 800af44:	4620      	mov	r0, r4
 800af46:	f000 fed8 	bl	800bcfa <_calloc_r>
 800af4a:	69e3      	ldr	r3, [r4, #28]
 800af4c:	60f0      	str	r0, [r6, #12]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d1e4      	bne.n	800af1e <_Balloc+0x2e>
 800af54:	2000      	movs	r0, #0
 800af56:	bd70      	pop	{r4, r5, r6, pc}
 800af58:	6802      	ldr	r2, [r0, #0]
 800af5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af5e:	2300      	movs	r3, #0
 800af60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af64:	e7f7      	b.n	800af56 <_Balloc+0x66>
 800af66:	bf00      	nop
 800af68:	0800dc1a 	.word	0x0800dc1a
 800af6c:	0800dda5 	.word	0x0800dda5

0800af70 <_Bfree>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	69c6      	ldr	r6, [r0, #28]
 800af74:	4605      	mov	r5, r0
 800af76:	460c      	mov	r4, r1
 800af78:	b976      	cbnz	r6, 800af98 <_Bfree+0x28>
 800af7a:	2010      	movs	r0, #16
 800af7c:	f7ff fef0 	bl	800ad60 <malloc>
 800af80:	4602      	mov	r2, r0
 800af82:	61e8      	str	r0, [r5, #28]
 800af84:	b920      	cbnz	r0, 800af90 <_Bfree+0x20>
 800af86:	4b09      	ldr	r3, [pc, #36]	@ (800afac <_Bfree+0x3c>)
 800af88:	4809      	ldr	r0, [pc, #36]	@ (800afb0 <_Bfree+0x40>)
 800af8a:	218f      	movs	r1, #143	@ 0x8f
 800af8c:	f7fe fcfa 	bl	8009984 <__assert_func>
 800af90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af94:	6006      	str	r6, [r0, #0]
 800af96:	60c6      	str	r6, [r0, #12]
 800af98:	b13c      	cbz	r4, 800afaa <_Bfree+0x3a>
 800af9a:	69eb      	ldr	r3, [r5, #28]
 800af9c:	6862      	ldr	r2, [r4, #4]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afa4:	6021      	str	r1, [r4, #0]
 800afa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800afaa:	bd70      	pop	{r4, r5, r6, pc}
 800afac:	0800dc1a 	.word	0x0800dc1a
 800afb0:	0800dda5 	.word	0x0800dda5

0800afb4 <__multadd>:
 800afb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb8:	690d      	ldr	r5, [r1, #16]
 800afba:	4607      	mov	r7, r0
 800afbc:	460c      	mov	r4, r1
 800afbe:	461e      	mov	r6, r3
 800afc0:	f101 0c14 	add.w	ip, r1, #20
 800afc4:	2000      	movs	r0, #0
 800afc6:	f8dc 3000 	ldr.w	r3, [ip]
 800afca:	b299      	uxth	r1, r3
 800afcc:	fb02 6101 	mla	r1, r2, r1, r6
 800afd0:	0c1e      	lsrs	r6, r3, #16
 800afd2:	0c0b      	lsrs	r3, r1, #16
 800afd4:	fb02 3306 	mla	r3, r2, r6, r3
 800afd8:	b289      	uxth	r1, r1
 800afda:	3001      	adds	r0, #1
 800afdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800afe0:	4285      	cmp	r5, r0
 800afe2:	f84c 1b04 	str.w	r1, [ip], #4
 800afe6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800afea:	dcec      	bgt.n	800afc6 <__multadd+0x12>
 800afec:	b30e      	cbz	r6, 800b032 <__multadd+0x7e>
 800afee:	68a3      	ldr	r3, [r4, #8]
 800aff0:	42ab      	cmp	r3, r5
 800aff2:	dc19      	bgt.n	800b028 <__multadd+0x74>
 800aff4:	6861      	ldr	r1, [r4, #4]
 800aff6:	4638      	mov	r0, r7
 800aff8:	3101      	adds	r1, #1
 800affa:	f7ff ff79 	bl	800aef0 <_Balloc>
 800affe:	4680      	mov	r8, r0
 800b000:	b928      	cbnz	r0, 800b00e <__multadd+0x5a>
 800b002:	4602      	mov	r2, r0
 800b004:	4b0c      	ldr	r3, [pc, #48]	@ (800b038 <__multadd+0x84>)
 800b006:	480d      	ldr	r0, [pc, #52]	@ (800b03c <__multadd+0x88>)
 800b008:	21ba      	movs	r1, #186	@ 0xba
 800b00a:	f7fe fcbb 	bl	8009984 <__assert_func>
 800b00e:	6922      	ldr	r2, [r4, #16]
 800b010:	3202      	adds	r2, #2
 800b012:	f104 010c 	add.w	r1, r4, #12
 800b016:	0092      	lsls	r2, r2, #2
 800b018:	300c      	adds	r0, #12
 800b01a:	f7fe fc94 	bl	8009946 <memcpy>
 800b01e:	4621      	mov	r1, r4
 800b020:	4638      	mov	r0, r7
 800b022:	f7ff ffa5 	bl	800af70 <_Bfree>
 800b026:	4644      	mov	r4, r8
 800b028:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b02c:	3501      	adds	r5, #1
 800b02e:	615e      	str	r6, [r3, #20]
 800b030:	6125      	str	r5, [r4, #16]
 800b032:	4620      	mov	r0, r4
 800b034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b038:	0800dd34 	.word	0x0800dd34
 800b03c:	0800dda5 	.word	0x0800dda5

0800b040 <__s2b>:
 800b040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b044:	460c      	mov	r4, r1
 800b046:	4615      	mov	r5, r2
 800b048:	461f      	mov	r7, r3
 800b04a:	2209      	movs	r2, #9
 800b04c:	3308      	adds	r3, #8
 800b04e:	4606      	mov	r6, r0
 800b050:	fb93 f3f2 	sdiv	r3, r3, r2
 800b054:	2100      	movs	r1, #0
 800b056:	2201      	movs	r2, #1
 800b058:	429a      	cmp	r2, r3
 800b05a:	db09      	blt.n	800b070 <__s2b+0x30>
 800b05c:	4630      	mov	r0, r6
 800b05e:	f7ff ff47 	bl	800aef0 <_Balloc>
 800b062:	b940      	cbnz	r0, 800b076 <__s2b+0x36>
 800b064:	4602      	mov	r2, r0
 800b066:	4b19      	ldr	r3, [pc, #100]	@ (800b0cc <__s2b+0x8c>)
 800b068:	4819      	ldr	r0, [pc, #100]	@ (800b0d0 <__s2b+0x90>)
 800b06a:	21d3      	movs	r1, #211	@ 0xd3
 800b06c:	f7fe fc8a 	bl	8009984 <__assert_func>
 800b070:	0052      	lsls	r2, r2, #1
 800b072:	3101      	adds	r1, #1
 800b074:	e7f0      	b.n	800b058 <__s2b+0x18>
 800b076:	9b08      	ldr	r3, [sp, #32]
 800b078:	6143      	str	r3, [r0, #20]
 800b07a:	2d09      	cmp	r5, #9
 800b07c:	f04f 0301 	mov.w	r3, #1
 800b080:	6103      	str	r3, [r0, #16]
 800b082:	dd16      	ble.n	800b0b2 <__s2b+0x72>
 800b084:	f104 0909 	add.w	r9, r4, #9
 800b088:	46c8      	mov	r8, r9
 800b08a:	442c      	add	r4, r5
 800b08c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b090:	4601      	mov	r1, r0
 800b092:	3b30      	subs	r3, #48	@ 0x30
 800b094:	220a      	movs	r2, #10
 800b096:	4630      	mov	r0, r6
 800b098:	f7ff ff8c 	bl	800afb4 <__multadd>
 800b09c:	45a0      	cmp	r8, r4
 800b09e:	d1f5      	bne.n	800b08c <__s2b+0x4c>
 800b0a0:	f1a5 0408 	sub.w	r4, r5, #8
 800b0a4:	444c      	add	r4, r9
 800b0a6:	1b2d      	subs	r5, r5, r4
 800b0a8:	1963      	adds	r3, r4, r5
 800b0aa:	42bb      	cmp	r3, r7
 800b0ac:	db04      	blt.n	800b0b8 <__s2b+0x78>
 800b0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0b2:	340a      	adds	r4, #10
 800b0b4:	2509      	movs	r5, #9
 800b0b6:	e7f6      	b.n	800b0a6 <__s2b+0x66>
 800b0b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b0bc:	4601      	mov	r1, r0
 800b0be:	3b30      	subs	r3, #48	@ 0x30
 800b0c0:	220a      	movs	r2, #10
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f7ff ff76 	bl	800afb4 <__multadd>
 800b0c8:	e7ee      	b.n	800b0a8 <__s2b+0x68>
 800b0ca:	bf00      	nop
 800b0cc:	0800dd34 	.word	0x0800dd34
 800b0d0:	0800dda5 	.word	0x0800dda5

0800b0d4 <__hi0bits>:
 800b0d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b0d8:	4603      	mov	r3, r0
 800b0da:	bf36      	itet	cc
 800b0dc:	0403      	lslcc	r3, r0, #16
 800b0de:	2000      	movcs	r0, #0
 800b0e0:	2010      	movcc	r0, #16
 800b0e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b0e6:	bf3c      	itt	cc
 800b0e8:	021b      	lslcc	r3, r3, #8
 800b0ea:	3008      	addcc	r0, #8
 800b0ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0f0:	bf3c      	itt	cc
 800b0f2:	011b      	lslcc	r3, r3, #4
 800b0f4:	3004      	addcc	r0, #4
 800b0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0fa:	bf3c      	itt	cc
 800b0fc:	009b      	lslcc	r3, r3, #2
 800b0fe:	3002      	addcc	r0, #2
 800b100:	2b00      	cmp	r3, #0
 800b102:	db05      	blt.n	800b110 <__hi0bits+0x3c>
 800b104:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b108:	f100 0001 	add.w	r0, r0, #1
 800b10c:	bf08      	it	eq
 800b10e:	2020      	moveq	r0, #32
 800b110:	4770      	bx	lr

0800b112 <__lo0bits>:
 800b112:	6803      	ldr	r3, [r0, #0]
 800b114:	4602      	mov	r2, r0
 800b116:	f013 0007 	ands.w	r0, r3, #7
 800b11a:	d00b      	beq.n	800b134 <__lo0bits+0x22>
 800b11c:	07d9      	lsls	r1, r3, #31
 800b11e:	d421      	bmi.n	800b164 <__lo0bits+0x52>
 800b120:	0798      	lsls	r0, r3, #30
 800b122:	bf49      	itett	mi
 800b124:	085b      	lsrmi	r3, r3, #1
 800b126:	089b      	lsrpl	r3, r3, #2
 800b128:	2001      	movmi	r0, #1
 800b12a:	6013      	strmi	r3, [r2, #0]
 800b12c:	bf5c      	itt	pl
 800b12e:	6013      	strpl	r3, [r2, #0]
 800b130:	2002      	movpl	r0, #2
 800b132:	4770      	bx	lr
 800b134:	b299      	uxth	r1, r3
 800b136:	b909      	cbnz	r1, 800b13c <__lo0bits+0x2a>
 800b138:	0c1b      	lsrs	r3, r3, #16
 800b13a:	2010      	movs	r0, #16
 800b13c:	b2d9      	uxtb	r1, r3
 800b13e:	b909      	cbnz	r1, 800b144 <__lo0bits+0x32>
 800b140:	3008      	adds	r0, #8
 800b142:	0a1b      	lsrs	r3, r3, #8
 800b144:	0719      	lsls	r1, r3, #28
 800b146:	bf04      	itt	eq
 800b148:	091b      	lsreq	r3, r3, #4
 800b14a:	3004      	addeq	r0, #4
 800b14c:	0799      	lsls	r1, r3, #30
 800b14e:	bf04      	itt	eq
 800b150:	089b      	lsreq	r3, r3, #2
 800b152:	3002      	addeq	r0, #2
 800b154:	07d9      	lsls	r1, r3, #31
 800b156:	d403      	bmi.n	800b160 <__lo0bits+0x4e>
 800b158:	085b      	lsrs	r3, r3, #1
 800b15a:	f100 0001 	add.w	r0, r0, #1
 800b15e:	d003      	beq.n	800b168 <__lo0bits+0x56>
 800b160:	6013      	str	r3, [r2, #0]
 800b162:	4770      	bx	lr
 800b164:	2000      	movs	r0, #0
 800b166:	4770      	bx	lr
 800b168:	2020      	movs	r0, #32
 800b16a:	4770      	bx	lr

0800b16c <__i2b>:
 800b16c:	b510      	push	{r4, lr}
 800b16e:	460c      	mov	r4, r1
 800b170:	2101      	movs	r1, #1
 800b172:	f7ff febd 	bl	800aef0 <_Balloc>
 800b176:	4602      	mov	r2, r0
 800b178:	b928      	cbnz	r0, 800b186 <__i2b+0x1a>
 800b17a:	4b05      	ldr	r3, [pc, #20]	@ (800b190 <__i2b+0x24>)
 800b17c:	4805      	ldr	r0, [pc, #20]	@ (800b194 <__i2b+0x28>)
 800b17e:	f240 1145 	movw	r1, #325	@ 0x145
 800b182:	f7fe fbff 	bl	8009984 <__assert_func>
 800b186:	2301      	movs	r3, #1
 800b188:	6144      	str	r4, [r0, #20]
 800b18a:	6103      	str	r3, [r0, #16]
 800b18c:	bd10      	pop	{r4, pc}
 800b18e:	bf00      	nop
 800b190:	0800dd34 	.word	0x0800dd34
 800b194:	0800dda5 	.word	0x0800dda5

0800b198 <__multiply>:
 800b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	4614      	mov	r4, r2
 800b19e:	690a      	ldr	r2, [r1, #16]
 800b1a0:	6923      	ldr	r3, [r4, #16]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	bfa8      	it	ge
 800b1a6:	4623      	movge	r3, r4
 800b1a8:	460f      	mov	r7, r1
 800b1aa:	bfa4      	itt	ge
 800b1ac:	460c      	movge	r4, r1
 800b1ae:	461f      	movge	r7, r3
 800b1b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b1b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b1b8:	68a3      	ldr	r3, [r4, #8]
 800b1ba:	6861      	ldr	r1, [r4, #4]
 800b1bc:	eb0a 0609 	add.w	r6, sl, r9
 800b1c0:	42b3      	cmp	r3, r6
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	bfb8      	it	lt
 800b1c6:	3101      	addlt	r1, #1
 800b1c8:	f7ff fe92 	bl	800aef0 <_Balloc>
 800b1cc:	b930      	cbnz	r0, 800b1dc <__multiply+0x44>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	4b44      	ldr	r3, [pc, #272]	@ (800b2e4 <__multiply+0x14c>)
 800b1d2:	4845      	ldr	r0, [pc, #276]	@ (800b2e8 <__multiply+0x150>)
 800b1d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b1d8:	f7fe fbd4 	bl	8009984 <__assert_func>
 800b1dc:	f100 0514 	add.w	r5, r0, #20
 800b1e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1e4:	462b      	mov	r3, r5
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	4543      	cmp	r3, r8
 800b1ea:	d321      	bcc.n	800b230 <__multiply+0x98>
 800b1ec:	f107 0114 	add.w	r1, r7, #20
 800b1f0:	f104 0214 	add.w	r2, r4, #20
 800b1f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b1f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b1fc:	9302      	str	r3, [sp, #8]
 800b1fe:	1b13      	subs	r3, r2, r4
 800b200:	3b15      	subs	r3, #21
 800b202:	f023 0303 	bic.w	r3, r3, #3
 800b206:	3304      	adds	r3, #4
 800b208:	f104 0715 	add.w	r7, r4, #21
 800b20c:	42ba      	cmp	r2, r7
 800b20e:	bf38      	it	cc
 800b210:	2304      	movcc	r3, #4
 800b212:	9301      	str	r3, [sp, #4]
 800b214:	9b02      	ldr	r3, [sp, #8]
 800b216:	9103      	str	r1, [sp, #12]
 800b218:	428b      	cmp	r3, r1
 800b21a:	d80c      	bhi.n	800b236 <__multiply+0x9e>
 800b21c:	2e00      	cmp	r6, #0
 800b21e:	dd03      	ble.n	800b228 <__multiply+0x90>
 800b220:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b224:	2b00      	cmp	r3, #0
 800b226:	d05b      	beq.n	800b2e0 <__multiply+0x148>
 800b228:	6106      	str	r6, [r0, #16]
 800b22a:	b005      	add	sp, #20
 800b22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b230:	f843 2b04 	str.w	r2, [r3], #4
 800b234:	e7d8      	b.n	800b1e8 <__multiply+0x50>
 800b236:	f8b1 a000 	ldrh.w	sl, [r1]
 800b23a:	f1ba 0f00 	cmp.w	sl, #0
 800b23e:	d024      	beq.n	800b28a <__multiply+0xf2>
 800b240:	f104 0e14 	add.w	lr, r4, #20
 800b244:	46a9      	mov	r9, r5
 800b246:	f04f 0c00 	mov.w	ip, #0
 800b24a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b24e:	f8d9 3000 	ldr.w	r3, [r9]
 800b252:	fa1f fb87 	uxth.w	fp, r7
 800b256:	b29b      	uxth	r3, r3
 800b258:	fb0a 330b 	mla	r3, sl, fp, r3
 800b25c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b260:	f8d9 7000 	ldr.w	r7, [r9]
 800b264:	4463      	add	r3, ip
 800b266:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b26a:	fb0a c70b 	mla	r7, sl, fp, ip
 800b26e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b272:	b29b      	uxth	r3, r3
 800b274:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b278:	4572      	cmp	r2, lr
 800b27a:	f849 3b04 	str.w	r3, [r9], #4
 800b27e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b282:	d8e2      	bhi.n	800b24a <__multiply+0xb2>
 800b284:	9b01      	ldr	r3, [sp, #4]
 800b286:	f845 c003 	str.w	ip, [r5, r3]
 800b28a:	9b03      	ldr	r3, [sp, #12]
 800b28c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b290:	3104      	adds	r1, #4
 800b292:	f1b9 0f00 	cmp.w	r9, #0
 800b296:	d021      	beq.n	800b2dc <__multiply+0x144>
 800b298:	682b      	ldr	r3, [r5, #0]
 800b29a:	f104 0c14 	add.w	ip, r4, #20
 800b29e:	46ae      	mov	lr, r5
 800b2a0:	f04f 0a00 	mov.w	sl, #0
 800b2a4:	f8bc b000 	ldrh.w	fp, [ip]
 800b2a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b2ac:	fb09 770b 	mla	r7, r9, fp, r7
 800b2b0:	4457      	add	r7, sl
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b2b8:	f84e 3b04 	str.w	r3, [lr], #4
 800b2bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b2c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b2c4:	f8be 3000 	ldrh.w	r3, [lr]
 800b2c8:	fb09 330a 	mla	r3, r9, sl, r3
 800b2cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b2d0:	4562      	cmp	r2, ip
 800b2d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b2d6:	d8e5      	bhi.n	800b2a4 <__multiply+0x10c>
 800b2d8:	9f01      	ldr	r7, [sp, #4]
 800b2da:	51eb      	str	r3, [r5, r7]
 800b2dc:	3504      	adds	r5, #4
 800b2de:	e799      	b.n	800b214 <__multiply+0x7c>
 800b2e0:	3e01      	subs	r6, #1
 800b2e2:	e79b      	b.n	800b21c <__multiply+0x84>
 800b2e4:	0800dd34 	.word	0x0800dd34
 800b2e8:	0800dda5 	.word	0x0800dda5

0800b2ec <__pow5mult>:
 800b2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f0:	4615      	mov	r5, r2
 800b2f2:	f012 0203 	ands.w	r2, r2, #3
 800b2f6:	4607      	mov	r7, r0
 800b2f8:	460e      	mov	r6, r1
 800b2fa:	d007      	beq.n	800b30c <__pow5mult+0x20>
 800b2fc:	4c25      	ldr	r4, [pc, #148]	@ (800b394 <__pow5mult+0xa8>)
 800b2fe:	3a01      	subs	r2, #1
 800b300:	2300      	movs	r3, #0
 800b302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b306:	f7ff fe55 	bl	800afb4 <__multadd>
 800b30a:	4606      	mov	r6, r0
 800b30c:	10ad      	asrs	r5, r5, #2
 800b30e:	d03d      	beq.n	800b38c <__pow5mult+0xa0>
 800b310:	69fc      	ldr	r4, [r7, #28]
 800b312:	b97c      	cbnz	r4, 800b334 <__pow5mult+0x48>
 800b314:	2010      	movs	r0, #16
 800b316:	f7ff fd23 	bl	800ad60 <malloc>
 800b31a:	4602      	mov	r2, r0
 800b31c:	61f8      	str	r0, [r7, #28]
 800b31e:	b928      	cbnz	r0, 800b32c <__pow5mult+0x40>
 800b320:	4b1d      	ldr	r3, [pc, #116]	@ (800b398 <__pow5mult+0xac>)
 800b322:	481e      	ldr	r0, [pc, #120]	@ (800b39c <__pow5mult+0xb0>)
 800b324:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b328:	f7fe fb2c 	bl	8009984 <__assert_func>
 800b32c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b330:	6004      	str	r4, [r0, #0]
 800b332:	60c4      	str	r4, [r0, #12]
 800b334:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b33c:	b94c      	cbnz	r4, 800b352 <__pow5mult+0x66>
 800b33e:	f240 2171 	movw	r1, #625	@ 0x271
 800b342:	4638      	mov	r0, r7
 800b344:	f7ff ff12 	bl	800b16c <__i2b>
 800b348:	2300      	movs	r3, #0
 800b34a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b34e:	4604      	mov	r4, r0
 800b350:	6003      	str	r3, [r0, #0]
 800b352:	f04f 0900 	mov.w	r9, #0
 800b356:	07eb      	lsls	r3, r5, #31
 800b358:	d50a      	bpl.n	800b370 <__pow5mult+0x84>
 800b35a:	4631      	mov	r1, r6
 800b35c:	4622      	mov	r2, r4
 800b35e:	4638      	mov	r0, r7
 800b360:	f7ff ff1a 	bl	800b198 <__multiply>
 800b364:	4631      	mov	r1, r6
 800b366:	4680      	mov	r8, r0
 800b368:	4638      	mov	r0, r7
 800b36a:	f7ff fe01 	bl	800af70 <_Bfree>
 800b36e:	4646      	mov	r6, r8
 800b370:	106d      	asrs	r5, r5, #1
 800b372:	d00b      	beq.n	800b38c <__pow5mult+0xa0>
 800b374:	6820      	ldr	r0, [r4, #0]
 800b376:	b938      	cbnz	r0, 800b388 <__pow5mult+0x9c>
 800b378:	4622      	mov	r2, r4
 800b37a:	4621      	mov	r1, r4
 800b37c:	4638      	mov	r0, r7
 800b37e:	f7ff ff0b 	bl	800b198 <__multiply>
 800b382:	6020      	str	r0, [r4, #0]
 800b384:	f8c0 9000 	str.w	r9, [r0]
 800b388:	4604      	mov	r4, r0
 800b38a:	e7e4      	b.n	800b356 <__pow5mult+0x6a>
 800b38c:	4630      	mov	r0, r6
 800b38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b392:	bf00      	nop
 800b394:	0800de00 	.word	0x0800de00
 800b398:	0800dc1a 	.word	0x0800dc1a
 800b39c:	0800dda5 	.word	0x0800dda5

0800b3a0 <__lshift>:
 800b3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	6849      	ldr	r1, [r1, #4]
 800b3a8:	6923      	ldr	r3, [r4, #16]
 800b3aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3ae:	68a3      	ldr	r3, [r4, #8]
 800b3b0:	4607      	mov	r7, r0
 800b3b2:	4691      	mov	r9, r2
 800b3b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3b8:	f108 0601 	add.w	r6, r8, #1
 800b3bc:	42b3      	cmp	r3, r6
 800b3be:	db0b      	blt.n	800b3d8 <__lshift+0x38>
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	f7ff fd95 	bl	800aef0 <_Balloc>
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	b948      	cbnz	r0, 800b3de <__lshift+0x3e>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	4b28      	ldr	r3, [pc, #160]	@ (800b470 <__lshift+0xd0>)
 800b3ce:	4829      	ldr	r0, [pc, #164]	@ (800b474 <__lshift+0xd4>)
 800b3d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b3d4:	f7fe fad6 	bl	8009984 <__assert_func>
 800b3d8:	3101      	adds	r1, #1
 800b3da:	005b      	lsls	r3, r3, #1
 800b3dc:	e7ee      	b.n	800b3bc <__lshift+0x1c>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	f100 0114 	add.w	r1, r0, #20
 800b3e4:	f100 0210 	add.w	r2, r0, #16
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	4553      	cmp	r3, sl
 800b3ec:	db33      	blt.n	800b456 <__lshift+0xb6>
 800b3ee:	6920      	ldr	r0, [r4, #16]
 800b3f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3f4:	f104 0314 	add.w	r3, r4, #20
 800b3f8:	f019 091f 	ands.w	r9, r9, #31
 800b3fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b400:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b404:	d02b      	beq.n	800b45e <__lshift+0xbe>
 800b406:	f1c9 0e20 	rsb	lr, r9, #32
 800b40a:	468a      	mov	sl, r1
 800b40c:	2200      	movs	r2, #0
 800b40e:	6818      	ldr	r0, [r3, #0]
 800b410:	fa00 f009 	lsl.w	r0, r0, r9
 800b414:	4310      	orrs	r0, r2
 800b416:	f84a 0b04 	str.w	r0, [sl], #4
 800b41a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b41e:	459c      	cmp	ip, r3
 800b420:	fa22 f20e 	lsr.w	r2, r2, lr
 800b424:	d8f3      	bhi.n	800b40e <__lshift+0x6e>
 800b426:	ebac 0304 	sub.w	r3, ip, r4
 800b42a:	3b15      	subs	r3, #21
 800b42c:	f023 0303 	bic.w	r3, r3, #3
 800b430:	3304      	adds	r3, #4
 800b432:	f104 0015 	add.w	r0, r4, #21
 800b436:	4584      	cmp	ip, r0
 800b438:	bf38      	it	cc
 800b43a:	2304      	movcc	r3, #4
 800b43c:	50ca      	str	r2, [r1, r3]
 800b43e:	b10a      	cbz	r2, 800b444 <__lshift+0xa4>
 800b440:	f108 0602 	add.w	r6, r8, #2
 800b444:	3e01      	subs	r6, #1
 800b446:	4638      	mov	r0, r7
 800b448:	612e      	str	r6, [r5, #16]
 800b44a:	4621      	mov	r1, r4
 800b44c:	f7ff fd90 	bl	800af70 <_Bfree>
 800b450:	4628      	mov	r0, r5
 800b452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b456:	f842 0f04 	str.w	r0, [r2, #4]!
 800b45a:	3301      	adds	r3, #1
 800b45c:	e7c5      	b.n	800b3ea <__lshift+0x4a>
 800b45e:	3904      	subs	r1, #4
 800b460:	f853 2b04 	ldr.w	r2, [r3], #4
 800b464:	f841 2f04 	str.w	r2, [r1, #4]!
 800b468:	459c      	cmp	ip, r3
 800b46a:	d8f9      	bhi.n	800b460 <__lshift+0xc0>
 800b46c:	e7ea      	b.n	800b444 <__lshift+0xa4>
 800b46e:	bf00      	nop
 800b470:	0800dd34 	.word	0x0800dd34
 800b474:	0800dda5 	.word	0x0800dda5

0800b478 <__mcmp>:
 800b478:	690a      	ldr	r2, [r1, #16]
 800b47a:	4603      	mov	r3, r0
 800b47c:	6900      	ldr	r0, [r0, #16]
 800b47e:	1a80      	subs	r0, r0, r2
 800b480:	b530      	push	{r4, r5, lr}
 800b482:	d10e      	bne.n	800b4a2 <__mcmp+0x2a>
 800b484:	3314      	adds	r3, #20
 800b486:	3114      	adds	r1, #20
 800b488:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b48c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b490:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b494:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b498:	4295      	cmp	r5, r2
 800b49a:	d003      	beq.n	800b4a4 <__mcmp+0x2c>
 800b49c:	d205      	bcs.n	800b4aa <__mcmp+0x32>
 800b49e:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a2:	bd30      	pop	{r4, r5, pc}
 800b4a4:	42a3      	cmp	r3, r4
 800b4a6:	d3f3      	bcc.n	800b490 <__mcmp+0x18>
 800b4a8:	e7fb      	b.n	800b4a2 <__mcmp+0x2a>
 800b4aa:	2001      	movs	r0, #1
 800b4ac:	e7f9      	b.n	800b4a2 <__mcmp+0x2a>
	...

0800b4b0 <__mdiff>:
 800b4b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b4:	4689      	mov	r9, r1
 800b4b6:	4606      	mov	r6, r0
 800b4b8:	4611      	mov	r1, r2
 800b4ba:	4648      	mov	r0, r9
 800b4bc:	4614      	mov	r4, r2
 800b4be:	f7ff ffdb 	bl	800b478 <__mcmp>
 800b4c2:	1e05      	subs	r5, r0, #0
 800b4c4:	d112      	bne.n	800b4ec <__mdiff+0x3c>
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	f7ff fd11 	bl	800aef0 <_Balloc>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	b928      	cbnz	r0, 800b4de <__mdiff+0x2e>
 800b4d2:	4b3f      	ldr	r3, [pc, #252]	@ (800b5d0 <__mdiff+0x120>)
 800b4d4:	f240 2137 	movw	r1, #567	@ 0x237
 800b4d8:	483e      	ldr	r0, [pc, #248]	@ (800b5d4 <__mdiff+0x124>)
 800b4da:	f7fe fa53 	bl	8009984 <__assert_func>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	b003      	add	sp, #12
 800b4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ec:	bfbc      	itt	lt
 800b4ee:	464b      	movlt	r3, r9
 800b4f0:	46a1      	movlt	r9, r4
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b4f8:	bfba      	itte	lt
 800b4fa:	461c      	movlt	r4, r3
 800b4fc:	2501      	movlt	r5, #1
 800b4fe:	2500      	movge	r5, #0
 800b500:	f7ff fcf6 	bl	800aef0 <_Balloc>
 800b504:	4602      	mov	r2, r0
 800b506:	b918      	cbnz	r0, 800b510 <__mdiff+0x60>
 800b508:	4b31      	ldr	r3, [pc, #196]	@ (800b5d0 <__mdiff+0x120>)
 800b50a:	f240 2145 	movw	r1, #581	@ 0x245
 800b50e:	e7e3      	b.n	800b4d8 <__mdiff+0x28>
 800b510:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b514:	6926      	ldr	r6, [r4, #16]
 800b516:	60c5      	str	r5, [r0, #12]
 800b518:	f109 0310 	add.w	r3, r9, #16
 800b51c:	f109 0514 	add.w	r5, r9, #20
 800b520:	f104 0e14 	add.w	lr, r4, #20
 800b524:	f100 0b14 	add.w	fp, r0, #20
 800b528:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b52c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b530:	9301      	str	r3, [sp, #4]
 800b532:	46d9      	mov	r9, fp
 800b534:	f04f 0c00 	mov.w	ip, #0
 800b538:	9b01      	ldr	r3, [sp, #4]
 800b53a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b53e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	fa1f f38a 	uxth.w	r3, sl
 800b548:	4619      	mov	r1, r3
 800b54a:	b283      	uxth	r3, r0
 800b54c:	1acb      	subs	r3, r1, r3
 800b54e:	0c00      	lsrs	r0, r0, #16
 800b550:	4463      	add	r3, ip
 800b552:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b556:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b560:	4576      	cmp	r6, lr
 800b562:	f849 3b04 	str.w	r3, [r9], #4
 800b566:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b56a:	d8e5      	bhi.n	800b538 <__mdiff+0x88>
 800b56c:	1b33      	subs	r3, r6, r4
 800b56e:	3b15      	subs	r3, #21
 800b570:	f023 0303 	bic.w	r3, r3, #3
 800b574:	3415      	adds	r4, #21
 800b576:	3304      	adds	r3, #4
 800b578:	42a6      	cmp	r6, r4
 800b57a:	bf38      	it	cc
 800b57c:	2304      	movcc	r3, #4
 800b57e:	441d      	add	r5, r3
 800b580:	445b      	add	r3, fp
 800b582:	461e      	mov	r6, r3
 800b584:	462c      	mov	r4, r5
 800b586:	4544      	cmp	r4, r8
 800b588:	d30e      	bcc.n	800b5a8 <__mdiff+0xf8>
 800b58a:	f108 0103 	add.w	r1, r8, #3
 800b58e:	1b49      	subs	r1, r1, r5
 800b590:	f021 0103 	bic.w	r1, r1, #3
 800b594:	3d03      	subs	r5, #3
 800b596:	45a8      	cmp	r8, r5
 800b598:	bf38      	it	cc
 800b59a:	2100      	movcc	r1, #0
 800b59c:	440b      	add	r3, r1
 800b59e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5a2:	b191      	cbz	r1, 800b5ca <__mdiff+0x11a>
 800b5a4:	6117      	str	r7, [r2, #16]
 800b5a6:	e79d      	b.n	800b4e4 <__mdiff+0x34>
 800b5a8:	f854 1b04 	ldr.w	r1, [r4], #4
 800b5ac:	46e6      	mov	lr, ip
 800b5ae:	0c08      	lsrs	r0, r1, #16
 800b5b0:	fa1c fc81 	uxtah	ip, ip, r1
 800b5b4:	4471      	add	r1, lr
 800b5b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b5ba:	b289      	uxth	r1, r1
 800b5bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b5c0:	f846 1b04 	str.w	r1, [r6], #4
 800b5c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b5c8:	e7dd      	b.n	800b586 <__mdiff+0xd6>
 800b5ca:	3f01      	subs	r7, #1
 800b5cc:	e7e7      	b.n	800b59e <__mdiff+0xee>
 800b5ce:	bf00      	nop
 800b5d0:	0800dd34 	.word	0x0800dd34
 800b5d4:	0800dda5 	.word	0x0800dda5

0800b5d8 <__ulp>:
 800b5d8:	b082      	sub	sp, #8
 800b5da:	ed8d 0b00 	vstr	d0, [sp]
 800b5de:	9a01      	ldr	r2, [sp, #4]
 800b5e0:	4b0f      	ldr	r3, [pc, #60]	@ (800b620 <__ulp+0x48>)
 800b5e2:	4013      	ands	r3, r2
 800b5e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	dc08      	bgt.n	800b5fe <__ulp+0x26>
 800b5ec:	425b      	negs	r3, r3
 800b5ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b5f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b5f6:	da04      	bge.n	800b602 <__ulp+0x2a>
 800b5f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b5fc:	4113      	asrs	r3, r2
 800b5fe:	2200      	movs	r2, #0
 800b600:	e008      	b.n	800b614 <__ulp+0x3c>
 800b602:	f1a2 0314 	sub.w	r3, r2, #20
 800b606:	2b1e      	cmp	r3, #30
 800b608:	bfda      	itte	le
 800b60a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b60e:	40da      	lsrle	r2, r3
 800b610:	2201      	movgt	r2, #1
 800b612:	2300      	movs	r3, #0
 800b614:	4619      	mov	r1, r3
 800b616:	4610      	mov	r0, r2
 800b618:	ec41 0b10 	vmov	d0, r0, r1
 800b61c:	b002      	add	sp, #8
 800b61e:	4770      	bx	lr
 800b620:	7ff00000 	.word	0x7ff00000

0800b624 <__b2d>:
 800b624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b628:	6906      	ldr	r6, [r0, #16]
 800b62a:	f100 0814 	add.w	r8, r0, #20
 800b62e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b632:	1f37      	subs	r7, r6, #4
 800b634:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b638:	4610      	mov	r0, r2
 800b63a:	f7ff fd4b 	bl	800b0d4 <__hi0bits>
 800b63e:	f1c0 0320 	rsb	r3, r0, #32
 800b642:	280a      	cmp	r0, #10
 800b644:	600b      	str	r3, [r1, #0]
 800b646:	491b      	ldr	r1, [pc, #108]	@ (800b6b4 <__b2d+0x90>)
 800b648:	dc15      	bgt.n	800b676 <__b2d+0x52>
 800b64a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b64e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b652:	45b8      	cmp	r8, r7
 800b654:	ea43 0501 	orr.w	r5, r3, r1
 800b658:	bf34      	ite	cc
 800b65a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b65e:	2300      	movcs	r3, #0
 800b660:	3015      	adds	r0, #21
 800b662:	fa02 f000 	lsl.w	r0, r2, r0
 800b666:	fa23 f30c 	lsr.w	r3, r3, ip
 800b66a:	4303      	orrs	r3, r0
 800b66c:	461c      	mov	r4, r3
 800b66e:	ec45 4b10 	vmov	d0, r4, r5
 800b672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b676:	45b8      	cmp	r8, r7
 800b678:	bf3a      	itte	cc
 800b67a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b67e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b682:	2300      	movcs	r3, #0
 800b684:	380b      	subs	r0, #11
 800b686:	d012      	beq.n	800b6ae <__b2d+0x8a>
 800b688:	f1c0 0120 	rsb	r1, r0, #32
 800b68c:	fa23 f401 	lsr.w	r4, r3, r1
 800b690:	4082      	lsls	r2, r0
 800b692:	4322      	orrs	r2, r4
 800b694:	4547      	cmp	r7, r8
 800b696:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b69a:	bf8c      	ite	hi
 800b69c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b6a0:	2200      	movls	r2, #0
 800b6a2:	4083      	lsls	r3, r0
 800b6a4:	40ca      	lsrs	r2, r1
 800b6a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	e7de      	b.n	800b66c <__b2d+0x48>
 800b6ae:	ea42 0501 	orr.w	r5, r2, r1
 800b6b2:	e7db      	b.n	800b66c <__b2d+0x48>
 800b6b4:	3ff00000 	.word	0x3ff00000

0800b6b8 <__d2b>:
 800b6b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6bc:	460f      	mov	r7, r1
 800b6be:	2101      	movs	r1, #1
 800b6c0:	ec59 8b10 	vmov	r8, r9, d0
 800b6c4:	4616      	mov	r6, r2
 800b6c6:	f7ff fc13 	bl	800aef0 <_Balloc>
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	b930      	cbnz	r0, 800b6dc <__d2b+0x24>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	4b23      	ldr	r3, [pc, #140]	@ (800b760 <__d2b+0xa8>)
 800b6d2:	4824      	ldr	r0, [pc, #144]	@ (800b764 <__d2b+0xac>)
 800b6d4:	f240 310f 	movw	r1, #783	@ 0x30f
 800b6d8:	f7fe f954 	bl	8009984 <__assert_func>
 800b6dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b6e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6e4:	b10d      	cbz	r5, 800b6ea <__d2b+0x32>
 800b6e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6ea:	9301      	str	r3, [sp, #4]
 800b6ec:	f1b8 0300 	subs.w	r3, r8, #0
 800b6f0:	d023      	beq.n	800b73a <__d2b+0x82>
 800b6f2:	4668      	mov	r0, sp
 800b6f4:	9300      	str	r3, [sp, #0]
 800b6f6:	f7ff fd0c 	bl	800b112 <__lo0bits>
 800b6fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6fe:	b1d0      	cbz	r0, 800b736 <__d2b+0x7e>
 800b700:	f1c0 0320 	rsb	r3, r0, #32
 800b704:	fa02 f303 	lsl.w	r3, r2, r3
 800b708:	430b      	orrs	r3, r1
 800b70a:	40c2      	lsrs	r2, r0
 800b70c:	6163      	str	r3, [r4, #20]
 800b70e:	9201      	str	r2, [sp, #4]
 800b710:	9b01      	ldr	r3, [sp, #4]
 800b712:	61a3      	str	r3, [r4, #24]
 800b714:	2b00      	cmp	r3, #0
 800b716:	bf0c      	ite	eq
 800b718:	2201      	moveq	r2, #1
 800b71a:	2202      	movne	r2, #2
 800b71c:	6122      	str	r2, [r4, #16]
 800b71e:	b1a5      	cbz	r5, 800b74a <__d2b+0x92>
 800b720:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b724:	4405      	add	r5, r0
 800b726:	603d      	str	r5, [r7, #0]
 800b728:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b72c:	6030      	str	r0, [r6, #0]
 800b72e:	4620      	mov	r0, r4
 800b730:	b003      	add	sp, #12
 800b732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b736:	6161      	str	r1, [r4, #20]
 800b738:	e7ea      	b.n	800b710 <__d2b+0x58>
 800b73a:	a801      	add	r0, sp, #4
 800b73c:	f7ff fce9 	bl	800b112 <__lo0bits>
 800b740:	9b01      	ldr	r3, [sp, #4]
 800b742:	6163      	str	r3, [r4, #20]
 800b744:	3020      	adds	r0, #32
 800b746:	2201      	movs	r2, #1
 800b748:	e7e8      	b.n	800b71c <__d2b+0x64>
 800b74a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b74e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b752:	6038      	str	r0, [r7, #0]
 800b754:	6918      	ldr	r0, [r3, #16]
 800b756:	f7ff fcbd 	bl	800b0d4 <__hi0bits>
 800b75a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b75e:	e7e5      	b.n	800b72c <__d2b+0x74>
 800b760:	0800dd34 	.word	0x0800dd34
 800b764:	0800dda5 	.word	0x0800dda5

0800b768 <__ratio>:
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	b085      	sub	sp, #20
 800b76e:	e9cd 1000 	strd	r1, r0, [sp]
 800b772:	a902      	add	r1, sp, #8
 800b774:	f7ff ff56 	bl	800b624 <__b2d>
 800b778:	9800      	ldr	r0, [sp, #0]
 800b77a:	a903      	add	r1, sp, #12
 800b77c:	ec55 4b10 	vmov	r4, r5, d0
 800b780:	f7ff ff50 	bl	800b624 <__b2d>
 800b784:	9b01      	ldr	r3, [sp, #4]
 800b786:	6919      	ldr	r1, [r3, #16]
 800b788:	9b00      	ldr	r3, [sp, #0]
 800b78a:	691b      	ldr	r3, [r3, #16]
 800b78c:	1ac9      	subs	r1, r1, r3
 800b78e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b792:	1a9b      	subs	r3, r3, r2
 800b794:	ec5b ab10 	vmov	sl, fp, d0
 800b798:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	bfce      	itee	gt
 800b7a0:	462a      	movgt	r2, r5
 800b7a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b7a6:	465a      	movle	r2, fp
 800b7a8:	462f      	mov	r7, r5
 800b7aa:	46d9      	mov	r9, fp
 800b7ac:	bfcc      	ite	gt
 800b7ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b7b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b7b6:	464b      	mov	r3, r9
 800b7b8:	4652      	mov	r2, sl
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	4639      	mov	r1, r7
 800b7be:	f7f5 f845 	bl	800084c <__aeabi_ddiv>
 800b7c2:	ec41 0b10 	vmov	d0, r0, r1
 800b7c6:	b005      	add	sp, #20
 800b7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7cc <__copybits>:
 800b7cc:	3901      	subs	r1, #1
 800b7ce:	b570      	push	{r4, r5, r6, lr}
 800b7d0:	1149      	asrs	r1, r1, #5
 800b7d2:	6914      	ldr	r4, [r2, #16]
 800b7d4:	3101      	adds	r1, #1
 800b7d6:	f102 0314 	add.w	r3, r2, #20
 800b7da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b7de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b7e2:	1f05      	subs	r5, r0, #4
 800b7e4:	42a3      	cmp	r3, r4
 800b7e6:	d30c      	bcc.n	800b802 <__copybits+0x36>
 800b7e8:	1aa3      	subs	r3, r4, r2
 800b7ea:	3b11      	subs	r3, #17
 800b7ec:	f023 0303 	bic.w	r3, r3, #3
 800b7f0:	3211      	adds	r2, #17
 800b7f2:	42a2      	cmp	r2, r4
 800b7f4:	bf88      	it	hi
 800b7f6:	2300      	movhi	r3, #0
 800b7f8:	4418      	add	r0, r3
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	4288      	cmp	r0, r1
 800b7fe:	d305      	bcc.n	800b80c <__copybits+0x40>
 800b800:	bd70      	pop	{r4, r5, r6, pc}
 800b802:	f853 6b04 	ldr.w	r6, [r3], #4
 800b806:	f845 6f04 	str.w	r6, [r5, #4]!
 800b80a:	e7eb      	b.n	800b7e4 <__copybits+0x18>
 800b80c:	f840 3b04 	str.w	r3, [r0], #4
 800b810:	e7f4      	b.n	800b7fc <__copybits+0x30>

0800b812 <__any_on>:
 800b812:	f100 0214 	add.w	r2, r0, #20
 800b816:	6900      	ldr	r0, [r0, #16]
 800b818:	114b      	asrs	r3, r1, #5
 800b81a:	4298      	cmp	r0, r3
 800b81c:	b510      	push	{r4, lr}
 800b81e:	db11      	blt.n	800b844 <__any_on+0x32>
 800b820:	dd0a      	ble.n	800b838 <__any_on+0x26>
 800b822:	f011 011f 	ands.w	r1, r1, #31
 800b826:	d007      	beq.n	800b838 <__any_on+0x26>
 800b828:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b82c:	fa24 f001 	lsr.w	r0, r4, r1
 800b830:	fa00 f101 	lsl.w	r1, r0, r1
 800b834:	428c      	cmp	r4, r1
 800b836:	d10b      	bne.n	800b850 <__any_on+0x3e>
 800b838:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d803      	bhi.n	800b848 <__any_on+0x36>
 800b840:	2000      	movs	r0, #0
 800b842:	bd10      	pop	{r4, pc}
 800b844:	4603      	mov	r3, r0
 800b846:	e7f7      	b.n	800b838 <__any_on+0x26>
 800b848:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b84c:	2900      	cmp	r1, #0
 800b84e:	d0f5      	beq.n	800b83c <__any_on+0x2a>
 800b850:	2001      	movs	r0, #1
 800b852:	e7f6      	b.n	800b842 <__any_on+0x30>

0800b854 <__ascii_wctomb>:
 800b854:	4603      	mov	r3, r0
 800b856:	4608      	mov	r0, r1
 800b858:	b141      	cbz	r1, 800b86c <__ascii_wctomb+0x18>
 800b85a:	2aff      	cmp	r2, #255	@ 0xff
 800b85c:	d904      	bls.n	800b868 <__ascii_wctomb+0x14>
 800b85e:	228a      	movs	r2, #138	@ 0x8a
 800b860:	601a      	str	r2, [r3, #0]
 800b862:	f04f 30ff 	mov.w	r0, #4294967295
 800b866:	4770      	bx	lr
 800b868:	700a      	strb	r2, [r1, #0]
 800b86a:	2001      	movs	r0, #1
 800b86c:	4770      	bx	lr

0800b86e <__ssputs_r>:
 800b86e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b872:	688e      	ldr	r6, [r1, #8]
 800b874:	461f      	mov	r7, r3
 800b876:	42be      	cmp	r6, r7
 800b878:	680b      	ldr	r3, [r1, #0]
 800b87a:	4682      	mov	sl, r0
 800b87c:	460c      	mov	r4, r1
 800b87e:	4690      	mov	r8, r2
 800b880:	d82d      	bhi.n	800b8de <__ssputs_r+0x70>
 800b882:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b886:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b88a:	d026      	beq.n	800b8da <__ssputs_r+0x6c>
 800b88c:	6965      	ldr	r5, [r4, #20]
 800b88e:	6909      	ldr	r1, [r1, #16]
 800b890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b894:	eba3 0901 	sub.w	r9, r3, r1
 800b898:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b89c:	1c7b      	adds	r3, r7, #1
 800b89e:	444b      	add	r3, r9
 800b8a0:	106d      	asrs	r5, r5, #1
 800b8a2:	429d      	cmp	r5, r3
 800b8a4:	bf38      	it	cc
 800b8a6:	461d      	movcc	r5, r3
 800b8a8:	0553      	lsls	r3, r2, #21
 800b8aa:	d527      	bpl.n	800b8fc <__ssputs_r+0x8e>
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	f7ff fa81 	bl	800adb4 <_malloc_r>
 800b8b2:	4606      	mov	r6, r0
 800b8b4:	b360      	cbz	r0, 800b910 <__ssputs_r+0xa2>
 800b8b6:	6921      	ldr	r1, [r4, #16]
 800b8b8:	464a      	mov	r2, r9
 800b8ba:	f7fe f844 	bl	8009946 <memcpy>
 800b8be:	89a3      	ldrh	r3, [r4, #12]
 800b8c0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b8c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8c8:	81a3      	strh	r3, [r4, #12]
 800b8ca:	6126      	str	r6, [r4, #16]
 800b8cc:	6165      	str	r5, [r4, #20]
 800b8ce:	444e      	add	r6, r9
 800b8d0:	eba5 0509 	sub.w	r5, r5, r9
 800b8d4:	6026      	str	r6, [r4, #0]
 800b8d6:	60a5      	str	r5, [r4, #8]
 800b8d8:	463e      	mov	r6, r7
 800b8da:	42be      	cmp	r6, r7
 800b8dc:	d900      	bls.n	800b8e0 <__ssputs_r+0x72>
 800b8de:	463e      	mov	r6, r7
 800b8e0:	6820      	ldr	r0, [r4, #0]
 800b8e2:	4632      	mov	r2, r6
 800b8e4:	4641      	mov	r1, r8
 800b8e6:	f000 f9d7 	bl	800bc98 <memmove>
 800b8ea:	68a3      	ldr	r3, [r4, #8]
 800b8ec:	1b9b      	subs	r3, r3, r6
 800b8ee:	60a3      	str	r3, [r4, #8]
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	4433      	add	r3, r6
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	2000      	movs	r0, #0
 800b8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8fc:	462a      	mov	r2, r5
 800b8fe:	f000 fa10 	bl	800bd22 <_realloc_r>
 800b902:	4606      	mov	r6, r0
 800b904:	2800      	cmp	r0, #0
 800b906:	d1e0      	bne.n	800b8ca <__ssputs_r+0x5c>
 800b908:	6921      	ldr	r1, [r4, #16]
 800b90a:	4650      	mov	r0, sl
 800b90c:	f7fe fea4 	bl	800a658 <_free_r>
 800b910:	230c      	movs	r3, #12
 800b912:	f8ca 3000 	str.w	r3, [sl]
 800b916:	89a3      	ldrh	r3, [r4, #12]
 800b918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b91c:	81a3      	strh	r3, [r4, #12]
 800b91e:	f04f 30ff 	mov.w	r0, #4294967295
 800b922:	e7e9      	b.n	800b8f8 <__ssputs_r+0x8a>

0800b924 <_svfiprintf_r>:
 800b924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b928:	4698      	mov	r8, r3
 800b92a:	898b      	ldrh	r3, [r1, #12]
 800b92c:	061b      	lsls	r3, r3, #24
 800b92e:	b09d      	sub	sp, #116	@ 0x74
 800b930:	4607      	mov	r7, r0
 800b932:	460d      	mov	r5, r1
 800b934:	4614      	mov	r4, r2
 800b936:	d510      	bpl.n	800b95a <_svfiprintf_r+0x36>
 800b938:	690b      	ldr	r3, [r1, #16]
 800b93a:	b973      	cbnz	r3, 800b95a <_svfiprintf_r+0x36>
 800b93c:	2140      	movs	r1, #64	@ 0x40
 800b93e:	f7ff fa39 	bl	800adb4 <_malloc_r>
 800b942:	6028      	str	r0, [r5, #0]
 800b944:	6128      	str	r0, [r5, #16]
 800b946:	b930      	cbnz	r0, 800b956 <_svfiprintf_r+0x32>
 800b948:	230c      	movs	r3, #12
 800b94a:	603b      	str	r3, [r7, #0]
 800b94c:	f04f 30ff 	mov.w	r0, #4294967295
 800b950:	b01d      	add	sp, #116	@ 0x74
 800b952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b956:	2340      	movs	r3, #64	@ 0x40
 800b958:	616b      	str	r3, [r5, #20]
 800b95a:	2300      	movs	r3, #0
 800b95c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b95e:	2320      	movs	r3, #32
 800b960:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b964:	f8cd 800c 	str.w	r8, [sp, #12]
 800b968:	2330      	movs	r3, #48	@ 0x30
 800b96a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bb08 <_svfiprintf_r+0x1e4>
 800b96e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b972:	f04f 0901 	mov.w	r9, #1
 800b976:	4623      	mov	r3, r4
 800b978:	469a      	mov	sl, r3
 800b97a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b97e:	b10a      	cbz	r2, 800b984 <_svfiprintf_r+0x60>
 800b980:	2a25      	cmp	r2, #37	@ 0x25
 800b982:	d1f9      	bne.n	800b978 <_svfiprintf_r+0x54>
 800b984:	ebba 0b04 	subs.w	fp, sl, r4
 800b988:	d00b      	beq.n	800b9a2 <_svfiprintf_r+0x7e>
 800b98a:	465b      	mov	r3, fp
 800b98c:	4622      	mov	r2, r4
 800b98e:	4629      	mov	r1, r5
 800b990:	4638      	mov	r0, r7
 800b992:	f7ff ff6c 	bl	800b86e <__ssputs_r>
 800b996:	3001      	adds	r0, #1
 800b998:	f000 80a7 	beq.w	800baea <_svfiprintf_r+0x1c6>
 800b99c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b99e:	445a      	add	r2, fp
 800b9a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f000 809f 	beq.w	800baea <_svfiprintf_r+0x1c6>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9b6:	f10a 0a01 	add.w	sl, sl, #1
 800b9ba:	9304      	str	r3, [sp, #16]
 800b9bc:	9307      	str	r3, [sp, #28]
 800b9be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9c4:	4654      	mov	r4, sl
 800b9c6:	2205      	movs	r2, #5
 800b9c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9cc:	484e      	ldr	r0, [pc, #312]	@ (800bb08 <_svfiprintf_r+0x1e4>)
 800b9ce:	f7f4 fbff 	bl	80001d0 <memchr>
 800b9d2:	9a04      	ldr	r2, [sp, #16]
 800b9d4:	b9d8      	cbnz	r0, 800ba0e <_svfiprintf_r+0xea>
 800b9d6:	06d0      	lsls	r0, r2, #27
 800b9d8:	bf44      	itt	mi
 800b9da:	2320      	movmi	r3, #32
 800b9dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9e0:	0711      	lsls	r1, r2, #28
 800b9e2:	bf44      	itt	mi
 800b9e4:	232b      	movmi	r3, #43	@ 0x2b
 800b9e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9f0:	d015      	beq.n	800ba1e <_svfiprintf_r+0xfa>
 800b9f2:	9a07      	ldr	r2, [sp, #28]
 800b9f4:	4654      	mov	r4, sl
 800b9f6:	2000      	movs	r0, #0
 800b9f8:	f04f 0c0a 	mov.w	ip, #10
 800b9fc:	4621      	mov	r1, r4
 800b9fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba02:	3b30      	subs	r3, #48	@ 0x30
 800ba04:	2b09      	cmp	r3, #9
 800ba06:	d94b      	bls.n	800baa0 <_svfiprintf_r+0x17c>
 800ba08:	b1b0      	cbz	r0, 800ba38 <_svfiprintf_r+0x114>
 800ba0a:	9207      	str	r2, [sp, #28]
 800ba0c:	e014      	b.n	800ba38 <_svfiprintf_r+0x114>
 800ba0e:	eba0 0308 	sub.w	r3, r0, r8
 800ba12:	fa09 f303 	lsl.w	r3, r9, r3
 800ba16:	4313      	orrs	r3, r2
 800ba18:	9304      	str	r3, [sp, #16]
 800ba1a:	46a2      	mov	sl, r4
 800ba1c:	e7d2      	b.n	800b9c4 <_svfiprintf_r+0xa0>
 800ba1e:	9b03      	ldr	r3, [sp, #12]
 800ba20:	1d19      	adds	r1, r3, #4
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	9103      	str	r1, [sp, #12]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	bfbb      	ittet	lt
 800ba2a:	425b      	neglt	r3, r3
 800ba2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ba30:	9307      	strge	r3, [sp, #28]
 800ba32:	9307      	strlt	r3, [sp, #28]
 800ba34:	bfb8      	it	lt
 800ba36:	9204      	strlt	r2, [sp, #16]
 800ba38:	7823      	ldrb	r3, [r4, #0]
 800ba3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba3c:	d10a      	bne.n	800ba54 <_svfiprintf_r+0x130>
 800ba3e:	7863      	ldrb	r3, [r4, #1]
 800ba40:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba42:	d132      	bne.n	800baaa <_svfiprintf_r+0x186>
 800ba44:	9b03      	ldr	r3, [sp, #12]
 800ba46:	1d1a      	adds	r2, r3, #4
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	9203      	str	r2, [sp, #12]
 800ba4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba50:	3402      	adds	r4, #2
 800ba52:	9305      	str	r3, [sp, #20]
 800ba54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bb18 <_svfiprintf_r+0x1f4>
 800ba58:	7821      	ldrb	r1, [r4, #0]
 800ba5a:	2203      	movs	r2, #3
 800ba5c:	4650      	mov	r0, sl
 800ba5e:	f7f4 fbb7 	bl	80001d0 <memchr>
 800ba62:	b138      	cbz	r0, 800ba74 <_svfiprintf_r+0x150>
 800ba64:	9b04      	ldr	r3, [sp, #16]
 800ba66:	eba0 000a 	sub.w	r0, r0, sl
 800ba6a:	2240      	movs	r2, #64	@ 0x40
 800ba6c:	4082      	lsls	r2, r0
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	3401      	adds	r4, #1
 800ba72:	9304      	str	r3, [sp, #16]
 800ba74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba78:	4824      	ldr	r0, [pc, #144]	@ (800bb0c <_svfiprintf_r+0x1e8>)
 800ba7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba7e:	2206      	movs	r2, #6
 800ba80:	f7f4 fba6 	bl	80001d0 <memchr>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d036      	beq.n	800baf6 <_svfiprintf_r+0x1d2>
 800ba88:	4b21      	ldr	r3, [pc, #132]	@ (800bb10 <_svfiprintf_r+0x1ec>)
 800ba8a:	bb1b      	cbnz	r3, 800bad4 <_svfiprintf_r+0x1b0>
 800ba8c:	9b03      	ldr	r3, [sp, #12]
 800ba8e:	3307      	adds	r3, #7
 800ba90:	f023 0307 	bic.w	r3, r3, #7
 800ba94:	3308      	adds	r3, #8
 800ba96:	9303      	str	r3, [sp, #12]
 800ba98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba9a:	4433      	add	r3, r6
 800ba9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba9e:	e76a      	b.n	800b976 <_svfiprintf_r+0x52>
 800baa0:	fb0c 3202 	mla	r2, ip, r2, r3
 800baa4:	460c      	mov	r4, r1
 800baa6:	2001      	movs	r0, #1
 800baa8:	e7a8      	b.n	800b9fc <_svfiprintf_r+0xd8>
 800baaa:	2300      	movs	r3, #0
 800baac:	3401      	adds	r4, #1
 800baae:	9305      	str	r3, [sp, #20]
 800bab0:	4619      	mov	r1, r3
 800bab2:	f04f 0c0a 	mov.w	ip, #10
 800bab6:	4620      	mov	r0, r4
 800bab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800babc:	3a30      	subs	r2, #48	@ 0x30
 800babe:	2a09      	cmp	r2, #9
 800bac0:	d903      	bls.n	800baca <_svfiprintf_r+0x1a6>
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d0c6      	beq.n	800ba54 <_svfiprintf_r+0x130>
 800bac6:	9105      	str	r1, [sp, #20]
 800bac8:	e7c4      	b.n	800ba54 <_svfiprintf_r+0x130>
 800baca:	fb0c 2101 	mla	r1, ip, r1, r2
 800bace:	4604      	mov	r4, r0
 800bad0:	2301      	movs	r3, #1
 800bad2:	e7f0      	b.n	800bab6 <_svfiprintf_r+0x192>
 800bad4:	ab03      	add	r3, sp, #12
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	462a      	mov	r2, r5
 800bada:	4b0e      	ldr	r3, [pc, #56]	@ (800bb14 <_svfiprintf_r+0x1f0>)
 800badc:	a904      	add	r1, sp, #16
 800bade:	4638      	mov	r0, r7
 800bae0:	f7fc ff52 	bl	8008988 <_printf_float>
 800bae4:	1c42      	adds	r2, r0, #1
 800bae6:	4606      	mov	r6, r0
 800bae8:	d1d6      	bne.n	800ba98 <_svfiprintf_r+0x174>
 800baea:	89ab      	ldrh	r3, [r5, #12]
 800baec:	065b      	lsls	r3, r3, #25
 800baee:	f53f af2d 	bmi.w	800b94c <_svfiprintf_r+0x28>
 800baf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800baf4:	e72c      	b.n	800b950 <_svfiprintf_r+0x2c>
 800baf6:	ab03      	add	r3, sp, #12
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	462a      	mov	r2, r5
 800bafc:	4b05      	ldr	r3, [pc, #20]	@ (800bb14 <_svfiprintf_r+0x1f0>)
 800bafe:	a904      	add	r1, sp, #16
 800bb00:	4638      	mov	r0, r7
 800bb02:	f7fd f9d9 	bl	8008eb8 <_printf_i>
 800bb06:	e7ed      	b.n	800bae4 <_svfiprintf_r+0x1c0>
 800bb08:	0800df00 	.word	0x0800df00
 800bb0c:	0800df0a 	.word	0x0800df0a
 800bb10:	08008989 	.word	0x08008989
 800bb14:	0800b86f 	.word	0x0800b86f
 800bb18:	0800df06 	.word	0x0800df06

0800bb1c <__sflush_r>:
 800bb1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb24:	0716      	lsls	r6, r2, #28
 800bb26:	4605      	mov	r5, r0
 800bb28:	460c      	mov	r4, r1
 800bb2a:	d454      	bmi.n	800bbd6 <__sflush_r+0xba>
 800bb2c:	684b      	ldr	r3, [r1, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	dc02      	bgt.n	800bb38 <__sflush_r+0x1c>
 800bb32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	dd48      	ble.n	800bbca <__sflush_r+0xae>
 800bb38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb3a:	2e00      	cmp	r6, #0
 800bb3c:	d045      	beq.n	800bbca <__sflush_r+0xae>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb44:	682f      	ldr	r7, [r5, #0]
 800bb46:	6a21      	ldr	r1, [r4, #32]
 800bb48:	602b      	str	r3, [r5, #0]
 800bb4a:	d030      	beq.n	800bbae <__sflush_r+0x92>
 800bb4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb4e:	89a3      	ldrh	r3, [r4, #12]
 800bb50:	0759      	lsls	r1, r3, #29
 800bb52:	d505      	bpl.n	800bb60 <__sflush_r+0x44>
 800bb54:	6863      	ldr	r3, [r4, #4]
 800bb56:	1ad2      	subs	r2, r2, r3
 800bb58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb5a:	b10b      	cbz	r3, 800bb60 <__sflush_r+0x44>
 800bb5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb5e:	1ad2      	subs	r2, r2, r3
 800bb60:	2300      	movs	r3, #0
 800bb62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb64:	6a21      	ldr	r1, [r4, #32]
 800bb66:	4628      	mov	r0, r5
 800bb68:	47b0      	blx	r6
 800bb6a:	1c43      	adds	r3, r0, #1
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	d106      	bne.n	800bb7e <__sflush_r+0x62>
 800bb70:	6829      	ldr	r1, [r5, #0]
 800bb72:	291d      	cmp	r1, #29
 800bb74:	d82b      	bhi.n	800bbce <__sflush_r+0xb2>
 800bb76:	4a2a      	ldr	r2, [pc, #168]	@ (800bc20 <__sflush_r+0x104>)
 800bb78:	410a      	asrs	r2, r1
 800bb7a:	07d6      	lsls	r6, r2, #31
 800bb7c:	d427      	bmi.n	800bbce <__sflush_r+0xb2>
 800bb7e:	2200      	movs	r2, #0
 800bb80:	6062      	str	r2, [r4, #4]
 800bb82:	04d9      	lsls	r1, r3, #19
 800bb84:	6922      	ldr	r2, [r4, #16]
 800bb86:	6022      	str	r2, [r4, #0]
 800bb88:	d504      	bpl.n	800bb94 <__sflush_r+0x78>
 800bb8a:	1c42      	adds	r2, r0, #1
 800bb8c:	d101      	bne.n	800bb92 <__sflush_r+0x76>
 800bb8e:	682b      	ldr	r3, [r5, #0]
 800bb90:	b903      	cbnz	r3, 800bb94 <__sflush_r+0x78>
 800bb92:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb96:	602f      	str	r7, [r5, #0]
 800bb98:	b1b9      	cbz	r1, 800bbca <__sflush_r+0xae>
 800bb9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb9e:	4299      	cmp	r1, r3
 800bba0:	d002      	beq.n	800bba8 <__sflush_r+0x8c>
 800bba2:	4628      	mov	r0, r5
 800bba4:	f7fe fd58 	bl	800a658 <_free_r>
 800bba8:	2300      	movs	r3, #0
 800bbaa:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbac:	e00d      	b.n	800bbca <__sflush_r+0xae>
 800bbae:	2301      	movs	r3, #1
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	47b0      	blx	r6
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	1c50      	adds	r0, r2, #1
 800bbb8:	d1c9      	bne.n	800bb4e <__sflush_r+0x32>
 800bbba:	682b      	ldr	r3, [r5, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d0c6      	beq.n	800bb4e <__sflush_r+0x32>
 800bbc0:	2b1d      	cmp	r3, #29
 800bbc2:	d001      	beq.n	800bbc8 <__sflush_r+0xac>
 800bbc4:	2b16      	cmp	r3, #22
 800bbc6:	d11e      	bne.n	800bc06 <__sflush_r+0xea>
 800bbc8:	602f      	str	r7, [r5, #0]
 800bbca:	2000      	movs	r0, #0
 800bbcc:	e022      	b.n	800bc14 <__sflush_r+0xf8>
 800bbce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbd2:	b21b      	sxth	r3, r3
 800bbd4:	e01b      	b.n	800bc0e <__sflush_r+0xf2>
 800bbd6:	690f      	ldr	r7, [r1, #16]
 800bbd8:	2f00      	cmp	r7, #0
 800bbda:	d0f6      	beq.n	800bbca <__sflush_r+0xae>
 800bbdc:	0793      	lsls	r3, r2, #30
 800bbde:	680e      	ldr	r6, [r1, #0]
 800bbe0:	bf08      	it	eq
 800bbe2:	694b      	ldreq	r3, [r1, #20]
 800bbe4:	600f      	str	r7, [r1, #0]
 800bbe6:	bf18      	it	ne
 800bbe8:	2300      	movne	r3, #0
 800bbea:	eba6 0807 	sub.w	r8, r6, r7
 800bbee:	608b      	str	r3, [r1, #8]
 800bbf0:	f1b8 0f00 	cmp.w	r8, #0
 800bbf4:	dde9      	ble.n	800bbca <__sflush_r+0xae>
 800bbf6:	6a21      	ldr	r1, [r4, #32]
 800bbf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bbfa:	4643      	mov	r3, r8
 800bbfc:	463a      	mov	r2, r7
 800bbfe:	4628      	mov	r0, r5
 800bc00:	47b0      	blx	r6
 800bc02:	2800      	cmp	r0, #0
 800bc04:	dc08      	bgt.n	800bc18 <__sflush_r+0xfc>
 800bc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc0e:	81a3      	strh	r3, [r4, #12]
 800bc10:	f04f 30ff 	mov.w	r0, #4294967295
 800bc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc18:	4407      	add	r7, r0
 800bc1a:	eba8 0800 	sub.w	r8, r8, r0
 800bc1e:	e7e7      	b.n	800bbf0 <__sflush_r+0xd4>
 800bc20:	dfbffffe 	.word	0xdfbffffe

0800bc24 <_fflush_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	690b      	ldr	r3, [r1, #16]
 800bc28:	4605      	mov	r5, r0
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	b913      	cbnz	r3, 800bc34 <_fflush_r+0x10>
 800bc2e:	2500      	movs	r5, #0
 800bc30:	4628      	mov	r0, r5
 800bc32:	bd38      	pop	{r3, r4, r5, pc}
 800bc34:	b118      	cbz	r0, 800bc3e <_fflush_r+0x1a>
 800bc36:	6a03      	ldr	r3, [r0, #32]
 800bc38:	b90b      	cbnz	r3, 800bc3e <_fflush_r+0x1a>
 800bc3a:	f7fd fcfd 	bl	8009638 <__sinit>
 800bc3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d0f3      	beq.n	800bc2e <_fflush_r+0xa>
 800bc46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc48:	07d0      	lsls	r0, r2, #31
 800bc4a:	d404      	bmi.n	800bc56 <_fflush_r+0x32>
 800bc4c:	0599      	lsls	r1, r3, #22
 800bc4e:	d402      	bmi.n	800bc56 <_fflush_r+0x32>
 800bc50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc52:	f7fd fe76 	bl	8009942 <__retarget_lock_acquire_recursive>
 800bc56:	4628      	mov	r0, r5
 800bc58:	4621      	mov	r1, r4
 800bc5a:	f7ff ff5f 	bl	800bb1c <__sflush_r>
 800bc5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc60:	07da      	lsls	r2, r3, #31
 800bc62:	4605      	mov	r5, r0
 800bc64:	d4e4      	bmi.n	800bc30 <_fflush_r+0xc>
 800bc66:	89a3      	ldrh	r3, [r4, #12]
 800bc68:	059b      	lsls	r3, r3, #22
 800bc6a:	d4e1      	bmi.n	800bc30 <_fflush_r+0xc>
 800bc6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc6e:	f7fd fe69 	bl	8009944 <__retarget_lock_release_recursive>
 800bc72:	e7dd      	b.n	800bc30 <_fflush_r+0xc>

0800bc74 <fiprintf>:
 800bc74:	b40e      	push	{r1, r2, r3}
 800bc76:	b503      	push	{r0, r1, lr}
 800bc78:	4601      	mov	r1, r0
 800bc7a:	ab03      	add	r3, sp, #12
 800bc7c:	4805      	ldr	r0, [pc, #20]	@ (800bc94 <fiprintf+0x20>)
 800bc7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc82:	6800      	ldr	r0, [r0, #0]
 800bc84:	9301      	str	r3, [sp, #4]
 800bc86:	f000 f8a3 	bl	800bdd0 <_vfiprintf_r>
 800bc8a:	b002      	add	sp, #8
 800bc8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc90:	b003      	add	sp, #12
 800bc92:	4770      	bx	lr
 800bc94:	20000250 	.word	0x20000250

0800bc98 <memmove>:
 800bc98:	4288      	cmp	r0, r1
 800bc9a:	b510      	push	{r4, lr}
 800bc9c:	eb01 0402 	add.w	r4, r1, r2
 800bca0:	d902      	bls.n	800bca8 <memmove+0x10>
 800bca2:	4284      	cmp	r4, r0
 800bca4:	4623      	mov	r3, r4
 800bca6:	d807      	bhi.n	800bcb8 <memmove+0x20>
 800bca8:	1e43      	subs	r3, r0, #1
 800bcaa:	42a1      	cmp	r1, r4
 800bcac:	d008      	beq.n	800bcc0 <memmove+0x28>
 800bcae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcb6:	e7f8      	b.n	800bcaa <memmove+0x12>
 800bcb8:	4402      	add	r2, r0
 800bcba:	4601      	mov	r1, r0
 800bcbc:	428a      	cmp	r2, r1
 800bcbe:	d100      	bne.n	800bcc2 <memmove+0x2a>
 800bcc0:	bd10      	pop	{r4, pc}
 800bcc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcca:	e7f7      	b.n	800bcbc <memmove+0x24>

0800bccc <_sbrk_r>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	4d06      	ldr	r5, [pc, #24]	@ (800bce8 <_sbrk_r+0x1c>)
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	4608      	mov	r0, r1
 800bcd6:	602b      	str	r3, [r5, #0]
 800bcd8:	f7f8 f96e 	bl	8003fb8 <_sbrk>
 800bcdc:	1c43      	adds	r3, r0, #1
 800bcde:	d102      	bne.n	800bce6 <_sbrk_r+0x1a>
 800bce0:	682b      	ldr	r3, [r5, #0]
 800bce2:	b103      	cbz	r3, 800bce6 <_sbrk_r+0x1a>
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	bd38      	pop	{r3, r4, r5, pc}
 800bce8:	20000834 	.word	0x20000834

0800bcec <abort>:
 800bcec:	b508      	push	{r3, lr}
 800bcee:	2006      	movs	r0, #6
 800bcf0:	f000 fa42 	bl	800c178 <raise>
 800bcf4:	2001      	movs	r0, #1
 800bcf6:	f7f8 f8e7 	bl	8003ec8 <_exit>

0800bcfa <_calloc_r>:
 800bcfa:	b570      	push	{r4, r5, r6, lr}
 800bcfc:	fba1 5402 	umull	r5, r4, r1, r2
 800bd00:	b93c      	cbnz	r4, 800bd12 <_calloc_r+0x18>
 800bd02:	4629      	mov	r1, r5
 800bd04:	f7ff f856 	bl	800adb4 <_malloc_r>
 800bd08:	4606      	mov	r6, r0
 800bd0a:	b928      	cbnz	r0, 800bd18 <_calloc_r+0x1e>
 800bd0c:	2600      	movs	r6, #0
 800bd0e:	4630      	mov	r0, r6
 800bd10:	bd70      	pop	{r4, r5, r6, pc}
 800bd12:	220c      	movs	r2, #12
 800bd14:	6002      	str	r2, [r0, #0]
 800bd16:	e7f9      	b.n	800bd0c <_calloc_r+0x12>
 800bd18:	462a      	mov	r2, r5
 800bd1a:	4621      	mov	r1, r4
 800bd1c:	f7fd fd25 	bl	800976a <memset>
 800bd20:	e7f5      	b.n	800bd0e <_calloc_r+0x14>

0800bd22 <_realloc_r>:
 800bd22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd26:	4680      	mov	r8, r0
 800bd28:	4615      	mov	r5, r2
 800bd2a:	460c      	mov	r4, r1
 800bd2c:	b921      	cbnz	r1, 800bd38 <_realloc_r+0x16>
 800bd2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd32:	4611      	mov	r1, r2
 800bd34:	f7ff b83e 	b.w	800adb4 <_malloc_r>
 800bd38:	b92a      	cbnz	r2, 800bd46 <_realloc_r+0x24>
 800bd3a:	f7fe fc8d 	bl	800a658 <_free_r>
 800bd3e:	2400      	movs	r4, #0
 800bd40:	4620      	mov	r0, r4
 800bd42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd46:	f000 fa33 	bl	800c1b0 <_malloc_usable_size_r>
 800bd4a:	4285      	cmp	r5, r0
 800bd4c:	4606      	mov	r6, r0
 800bd4e:	d802      	bhi.n	800bd56 <_realloc_r+0x34>
 800bd50:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bd54:	d8f4      	bhi.n	800bd40 <_realloc_r+0x1e>
 800bd56:	4629      	mov	r1, r5
 800bd58:	4640      	mov	r0, r8
 800bd5a:	f7ff f82b 	bl	800adb4 <_malloc_r>
 800bd5e:	4607      	mov	r7, r0
 800bd60:	2800      	cmp	r0, #0
 800bd62:	d0ec      	beq.n	800bd3e <_realloc_r+0x1c>
 800bd64:	42b5      	cmp	r5, r6
 800bd66:	462a      	mov	r2, r5
 800bd68:	4621      	mov	r1, r4
 800bd6a:	bf28      	it	cs
 800bd6c:	4632      	movcs	r2, r6
 800bd6e:	f7fd fdea 	bl	8009946 <memcpy>
 800bd72:	4621      	mov	r1, r4
 800bd74:	4640      	mov	r0, r8
 800bd76:	f7fe fc6f 	bl	800a658 <_free_r>
 800bd7a:	463c      	mov	r4, r7
 800bd7c:	e7e0      	b.n	800bd40 <_realloc_r+0x1e>

0800bd7e <__sfputc_r>:
 800bd7e:	6893      	ldr	r3, [r2, #8]
 800bd80:	3b01      	subs	r3, #1
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	b410      	push	{r4}
 800bd86:	6093      	str	r3, [r2, #8]
 800bd88:	da08      	bge.n	800bd9c <__sfputc_r+0x1e>
 800bd8a:	6994      	ldr	r4, [r2, #24]
 800bd8c:	42a3      	cmp	r3, r4
 800bd8e:	db01      	blt.n	800bd94 <__sfputc_r+0x16>
 800bd90:	290a      	cmp	r1, #10
 800bd92:	d103      	bne.n	800bd9c <__sfputc_r+0x1e>
 800bd94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd98:	f000 b932 	b.w	800c000 <__swbuf_r>
 800bd9c:	6813      	ldr	r3, [r2, #0]
 800bd9e:	1c58      	adds	r0, r3, #1
 800bda0:	6010      	str	r0, [r2, #0]
 800bda2:	7019      	strb	r1, [r3, #0]
 800bda4:	4608      	mov	r0, r1
 800bda6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <__sfputs_r>:
 800bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdae:	4606      	mov	r6, r0
 800bdb0:	460f      	mov	r7, r1
 800bdb2:	4614      	mov	r4, r2
 800bdb4:	18d5      	adds	r5, r2, r3
 800bdb6:	42ac      	cmp	r4, r5
 800bdb8:	d101      	bne.n	800bdbe <__sfputs_r+0x12>
 800bdba:	2000      	movs	r0, #0
 800bdbc:	e007      	b.n	800bdce <__sfputs_r+0x22>
 800bdbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdc2:	463a      	mov	r2, r7
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	f7ff ffda 	bl	800bd7e <__sfputc_r>
 800bdca:	1c43      	adds	r3, r0, #1
 800bdcc:	d1f3      	bne.n	800bdb6 <__sfputs_r+0xa>
 800bdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bdd0 <_vfiprintf_r>:
 800bdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd4:	460d      	mov	r5, r1
 800bdd6:	b09d      	sub	sp, #116	@ 0x74
 800bdd8:	4614      	mov	r4, r2
 800bdda:	4698      	mov	r8, r3
 800bddc:	4606      	mov	r6, r0
 800bdde:	b118      	cbz	r0, 800bde8 <_vfiprintf_r+0x18>
 800bde0:	6a03      	ldr	r3, [r0, #32]
 800bde2:	b90b      	cbnz	r3, 800bde8 <_vfiprintf_r+0x18>
 800bde4:	f7fd fc28 	bl	8009638 <__sinit>
 800bde8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdea:	07d9      	lsls	r1, r3, #31
 800bdec:	d405      	bmi.n	800bdfa <_vfiprintf_r+0x2a>
 800bdee:	89ab      	ldrh	r3, [r5, #12]
 800bdf0:	059a      	lsls	r2, r3, #22
 800bdf2:	d402      	bmi.n	800bdfa <_vfiprintf_r+0x2a>
 800bdf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdf6:	f7fd fda4 	bl	8009942 <__retarget_lock_acquire_recursive>
 800bdfa:	89ab      	ldrh	r3, [r5, #12]
 800bdfc:	071b      	lsls	r3, r3, #28
 800bdfe:	d501      	bpl.n	800be04 <_vfiprintf_r+0x34>
 800be00:	692b      	ldr	r3, [r5, #16]
 800be02:	b99b      	cbnz	r3, 800be2c <_vfiprintf_r+0x5c>
 800be04:	4629      	mov	r1, r5
 800be06:	4630      	mov	r0, r6
 800be08:	f000 f938 	bl	800c07c <__swsetup_r>
 800be0c:	b170      	cbz	r0, 800be2c <_vfiprintf_r+0x5c>
 800be0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be10:	07dc      	lsls	r4, r3, #31
 800be12:	d504      	bpl.n	800be1e <_vfiprintf_r+0x4e>
 800be14:	f04f 30ff 	mov.w	r0, #4294967295
 800be18:	b01d      	add	sp, #116	@ 0x74
 800be1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1e:	89ab      	ldrh	r3, [r5, #12]
 800be20:	0598      	lsls	r0, r3, #22
 800be22:	d4f7      	bmi.n	800be14 <_vfiprintf_r+0x44>
 800be24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be26:	f7fd fd8d 	bl	8009944 <__retarget_lock_release_recursive>
 800be2a:	e7f3      	b.n	800be14 <_vfiprintf_r+0x44>
 800be2c:	2300      	movs	r3, #0
 800be2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800be30:	2320      	movs	r3, #32
 800be32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be36:	f8cd 800c 	str.w	r8, [sp, #12]
 800be3a:	2330      	movs	r3, #48	@ 0x30
 800be3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bfec <_vfiprintf_r+0x21c>
 800be40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be44:	f04f 0901 	mov.w	r9, #1
 800be48:	4623      	mov	r3, r4
 800be4a:	469a      	mov	sl, r3
 800be4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be50:	b10a      	cbz	r2, 800be56 <_vfiprintf_r+0x86>
 800be52:	2a25      	cmp	r2, #37	@ 0x25
 800be54:	d1f9      	bne.n	800be4a <_vfiprintf_r+0x7a>
 800be56:	ebba 0b04 	subs.w	fp, sl, r4
 800be5a:	d00b      	beq.n	800be74 <_vfiprintf_r+0xa4>
 800be5c:	465b      	mov	r3, fp
 800be5e:	4622      	mov	r2, r4
 800be60:	4629      	mov	r1, r5
 800be62:	4630      	mov	r0, r6
 800be64:	f7ff ffa2 	bl	800bdac <__sfputs_r>
 800be68:	3001      	adds	r0, #1
 800be6a:	f000 80a7 	beq.w	800bfbc <_vfiprintf_r+0x1ec>
 800be6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be70:	445a      	add	r2, fp
 800be72:	9209      	str	r2, [sp, #36]	@ 0x24
 800be74:	f89a 3000 	ldrb.w	r3, [sl]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f000 809f 	beq.w	800bfbc <_vfiprintf_r+0x1ec>
 800be7e:	2300      	movs	r3, #0
 800be80:	f04f 32ff 	mov.w	r2, #4294967295
 800be84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be88:	f10a 0a01 	add.w	sl, sl, #1
 800be8c:	9304      	str	r3, [sp, #16]
 800be8e:	9307      	str	r3, [sp, #28]
 800be90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be94:	931a      	str	r3, [sp, #104]	@ 0x68
 800be96:	4654      	mov	r4, sl
 800be98:	2205      	movs	r2, #5
 800be9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be9e:	4853      	ldr	r0, [pc, #332]	@ (800bfec <_vfiprintf_r+0x21c>)
 800bea0:	f7f4 f996 	bl	80001d0 <memchr>
 800bea4:	9a04      	ldr	r2, [sp, #16]
 800bea6:	b9d8      	cbnz	r0, 800bee0 <_vfiprintf_r+0x110>
 800bea8:	06d1      	lsls	r1, r2, #27
 800beaa:	bf44      	itt	mi
 800beac:	2320      	movmi	r3, #32
 800beae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800beb2:	0713      	lsls	r3, r2, #28
 800beb4:	bf44      	itt	mi
 800beb6:	232b      	movmi	r3, #43	@ 0x2b
 800beb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bebc:	f89a 3000 	ldrb.w	r3, [sl]
 800bec0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bec2:	d015      	beq.n	800bef0 <_vfiprintf_r+0x120>
 800bec4:	9a07      	ldr	r2, [sp, #28]
 800bec6:	4654      	mov	r4, sl
 800bec8:	2000      	movs	r0, #0
 800beca:	f04f 0c0a 	mov.w	ip, #10
 800bece:	4621      	mov	r1, r4
 800bed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bed4:	3b30      	subs	r3, #48	@ 0x30
 800bed6:	2b09      	cmp	r3, #9
 800bed8:	d94b      	bls.n	800bf72 <_vfiprintf_r+0x1a2>
 800beda:	b1b0      	cbz	r0, 800bf0a <_vfiprintf_r+0x13a>
 800bedc:	9207      	str	r2, [sp, #28]
 800bede:	e014      	b.n	800bf0a <_vfiprintf_r+0x13a>
 800bee0:	eba0 0308 	sub.w	r3, r0, r8
 800bee4:	fa09 f303 	lsl.w	r3, r9, r3
 800bee8:	4313      	orrs	r3, r2
 800beea:	9304      	str	r3, [sp, #16]
 800beec:	46a2      	mov	sl, r4
 800beee:	e7d2      	b.n	800be96 <_vfiprintf_r+0xc6>
 800bef0:	9b03      	ldr	r3, [sp, #12]
 800bef2:	1d19      	adds	r1, r3, #4
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	9103      	str	r1, [sp, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	bfbb      	ittet	lt
 800befc:	425b      	neglt	r3, r3
 800befe:	f042 0202 	orrlt.w	r2, r2, #2
 800bf02:	9307      	strge	r3, [sp, #28]
 800bf04:	9307      	strlt	r3, [sp, #28]
 800bf06:	bfb8      	it	lt
 800bf08:	9204      	strlt	r2, [sp, #16]
 800bf0a:	7823      	ldrb	r3, [r4, #0]
 800bf0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf0e:	d10a      	bne.n	800bf26 <_vfiprintf_r+0x156>
 800bf10:	7863      	ldrb	r3, [r4, #1]
 800bf12:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf14:	d132      	bne.n	800bf7c <_vfiprintf_r+0x1ac>
 800bf16:	9b03      	ldr	r3, [sp, #12]
 800bf18:	1d1a      	adds	r2, r3, #4
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	9203      	str	r2, [sp, #12]
 800bf1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf22:	3402      	adds	r4, #2
 800bf24:	9305      	str	r3, [sp, #20]
 800bf26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bffc <_vfiprintf_r+0x22c>
 800bf2a:	7821      	ldrb	r1, [r4, #0]
 800bf2c:	2203      	movs	r2, #3
 800bf2e:	4650      	mov	r0, sl
 800bf30:	f7f4 f94e 	bl	80001d0 <memchr>
 800bf34:	b138      	cbz	r0, 800bf46 <_vfiprintf_r+0x176>
 800bf36:	9b04      	ldr	r3, [sp, #16]
 800bf38:	eba0 000a 	sub.w	r0, r0, sl
 800bf3c:	2240      	movs	r2, #64	@ 0x40
 800bf3e:	4082      	lsls	r2, r0
 800bf40:	4313      	orrs	r3, r2
 800bf42:	3401      	adds	r4, #1
 800bf44:	9304      	str	r3, [sp, #16]
 800bf46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf4a:	4829      	ldr	r0, [pc, #164]	@ (800bff0 <_vfiprintf_r+0x220>)
 800bf4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf50:	2206      	movs	r2, #6
 800bf52:	f7f4 f93d 	bl	80001d0 <memchr>
 800bf56:	2800      	cmp	r0, #0
 800bf58:	d03f      	beq.n	800bfda <_vfiprintf_r+0x20a>
 800bf5a:	4b26      	ldr	r3, [pc, #152]	@ (800bff4 <_vfiprintf_r+0x224>)
 800bf5c:	bb1b      	cbnz	r3, 800bfa6 <_vfiprintf_r+0x1d6>
 800bf5e:	9b03      	ldr	r3, [sp, #12]
 800bf60:	3307      	adds	r3, #7
 800bf62:	f023 0307 	bic.w	r3, r3, #7
 800bf66:	3308      	adds	r3, #8
 800bf68:	9303      	str	r3, [sp, #12]
 800bf6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf6c:	443b      	add	r3, r7
 800bf6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf70:	e76a      	b.n	800be48 <_vfiprintf_r+0x78>
 800bf72:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf76:	460c      	mov	r4, r1
 800bf78:	2001      	movs	r0, #1
 800bf7a:	e7a8      	b.n	800bece <_vfiprintf_r+0xfe>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	3401      	adds	r4, #1
 800bf80:	9305      	str	r3, [sp, #20]
 800bf82:	4619      	mov	r1, r3
 800bf84:	f04f 0c0a 	mov.w	ip, #10
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf8e:	3a30      	subs	r2, #48	@ 0x30
 800bf90:	2a09      	cmp	r2, #9
 800bf92:	d903      	bls.n	800bf9c <_vfiprintf_r+0x1cc>
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d0c6      	beq.n	800bf26 <_vfiprintf_r+0x156>
 800bf98:	9105      	str	r1, [sp, #20]
 800bf9a:	e7c4      	b.n	800bf26 <_vfiprintf_r+0x156>
 800bf9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e7f0      	b.n	800bf88 <_vfiprintf_r+0x1b8>
 800bfa6:	ab03      	add	r3, sp, #12
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	462a      	mov	r2, r5
 800bfac:	4b12      	ldr	r3, [pc, #72]	@ (800bff8 <_vfiprintf_r+0x228>)
 800bfae:	a904      	add	r1, sp, #16
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	f7fc fce9 	bl	8008988 <_printf_float>
 800bfb6:	4607      	mov	r7, r0
 800bfb8:	1c78      	adds	r0, r7, #1
 800bfba:	d1d6      	bne.n	800bf6a <_vfiprintf_r+0x19a>
 800bfbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfbe:	07d9      	lsls	r1, r3, #31
 800bfc0:	d405      	bmi.n	800bfce <_vfiprintf_r+0x1fe>
 800bfc2:	89ab      	ldrh	r3, [r5, #12]
 800bfc4:	059a      	lsls	r2, r3, #22
 800bfc6:	d402      	bmi.n	800bfce <_vfiprintf_r+0x1fe>
 800bfc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfca:	f7fd fcbb 	bl	8009944 <__retarget_lock_release_recursive>
 800bfce:	89ab      	ldrh	r3, [r5, #12]
 800bfd0:	065b      	lsls	r3, r3, #25
 800bfd2:	f53f af1f 	bmi.w	800be14 <_vfiprintf_r+0x44>
 800bfd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bfd8:	e71e      	b.n	800be18 <_vfiprintf_r+0x48>
 800bfda:	ab03      	add	r3, sp, #12
 800bfdc:	9300      	str	r3, [sp, #0]
 800bfde:	462a      	mov	r2, r5
 800bfe0:	4b05      	ldr	r3, [pc, #20]	@ (800bff8 <_vfiprintf_r+0x228>)
 800bfe2:	a904      	add	r1, sp, #16
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	f7fc ff67 	bl	8008eb8 <_printf_i>
 800bfea:	e7e4      	b.n	800bfb6 <_vfiprintf_r+0x1e6>
 800bfec:	0800df00 	.word	0x0800df00
 800bff0:	0800df0a 	.word	0x0800df0a
 800bff4:	08008989 	.word	0x08008989
 800bff8:	0800bdad 	.word	0x0800bdad
 800bffc:	0800df06 	.word	0x0800df06

0800c000 <__swbuf_r>:
 800c000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c002:	460e      	mov	r6, r1
 800c004:	4614      	mov	r4, r2
 800c006:	4605      	mov	r5, r0
 800c008:	b118      	cbz	r0, 800c012 <__swbuf_r+0x12>
 800c00a:	6a03      	ldr	r3, [r0, #32]
 800c00c:	b90b      	cbnz	r3, 800c012 <__swbuf_r+0x12>
 800c00e:	f7fd fb13 	bl	8009638 <__sinit>
 800c012:	69a3      	ldr	r3, [r4, #24]
 800c014:	60a3      	str	r3, [r4, #8]
 800c016:	89a3      	ldrh	r3, [r4, #12]
 800c018:	071a      	lsls	r2, r3, #28
 800c01a:	d501      	bpl.n	800c020 <__swbuf_r+0x20>
 800c01c:	6923      	ldr	r3, [r4, #16]
 800c01e:	b943      	cbnz	r3, 800c032 <__swbuf_r+0x32>
 800c020:	4621      	mov	r1, r4
 800c022:	4628      	mov	r0, r5
 800c024:	f000 f82a 	bl	800c07c <__swsetup_r>
 800c028:	b118      	cbz	r0, 800c032 <__swbuf_r+0x32>
 800c02a:	f04f 37ff 	mov.w	r7, #4294967295
 800c02e:	4638      	mov	r0, r7
 800c030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	6922      	ldr	r2, [r4, #16]
 800c036:	1a98      	subs	r0, r3, r2
 800c038:	6963      	ldr	r3, [r4, #20]
 800c03a:	b2f6      	uxtb	r6, r6
 800c03c:	4283      	cmp	r3, r0
 800c03e:	4637      	mov	r7, r6
 800c040:	dc05      	bgt.n	800c04e <__swbuf_r+0x4e>
 800c042:	4621      	mov	r1, r4
 800c044:	4628      	mov	r0, r5
 800c046:	f7ff fded 	bl	800bc24 <_fflush_r>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	d1ed      	bne.n	800c02a <__swbuf_r+0x2a>
 800c04e:	68a3      	ldr	r3, [r4, #8]
 800c050:	3b01      	subs	r3, #1
 800c052:	60a3      	str	r3, [r4, #8]
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	1c5a      	adds	r2, r3, #1
 800c058:	6022      	str	r2, [r4, #0]
 800c05a:	701e      	strb	r6, [r3, #0]
 800c05c:	6962      	ldr	r2, [r4, #20]
 800c05e:	1c43      	adds	r3, r0, #1
 800c060:	429a      	cmp	r2, r3
 800c062:	d004      	beq.n	800c06e <__swbuf_r+0x6e>
 800c064:	89a3      	ldrh	r3, [r4, #12]
 800c066:	07db      	lsls	r3, r3, #31
 800c068:	d5e1      	bpl.n	800c02e <__swbuf_r+0x2e>
 800c06a:	2e0a      	cmp	r6, #10
 800c06c:	d1df      	bne.n	800c02e <__swbuf_r+0x2e>
 800c06e:	4621      	mov	r1, r4
 800c070:	4628      	mov	r0, r5
 800c072:	f7ff fdd7 	bl	800bc24 <_fflush_r>
 800c076:	2800      	cmp	r0, #0
 800c078:	d0d9      	beq.n	800c02e <__swbuf_r+0x2e>
 800c07a:	e7d6      	b.n	800c02a <__swbuf_r+0x2a>

0800c07c <__swsetup_r>:
 800c07c:	b538      	push	{r3, r4, r5, lr}
 800c07e:	4b29      	ldr	r3, [pc, #164]	@ (800c124 <__swsetup_r+0xa8>)
 800c080:	4605      	mov	r5, r0
 800c082:	6818      	ldr	r0, [r3, #0]
 800c084:	460c      	mov	r4, r1
 800c086:	b118      	cbz	r0, 800c090 <__swsetup_r+0x14>
 800c088:	6a03      	ldr	r3, [r0, #32]
 800c08a:	b90b      	cbnz	r3, 800c090 <__swsetup_r+0x14>
 800c08c:	f7fd fad4 	bl	8009638 <__sinit>
 800c090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c094:	0719      	lsls	r1, r3, #28
 800c096:	d422      	bmi.n	800c0de <__swsetup_r+0x62>
 800c098:	06da      	lsls	r2, r3, #27
 800c09a:	d407      	bmi.n	800c0ac <__swsetup_r+0x30>
 800c09c:	2209      	movs	r2, #9
 800c09e:	602a      	str	r2, [r5, #0]
 800c0a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0a4:	81a3      	strh	r3, [r4, #12]
 800c0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0aa:	e033      	b.n	800c114 <__swsetup_r+0x98>
 800c0ac:	0758      	lsls	r0, r3, #29
 800c0ae:	d512      	bpl.n	800c0d6 <__swsetup_r+0x5a>
 800c0b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0b2:	b141      	cbz	r1, 800c0c6 <__swsetup_r+0x4a>
 800c0b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0b8:	4299      	cmp	r1, r3
 800c0ba:	d002      	beq.n	800c0c2 <__swsetup_r+0x46>
 800c0bc:	4628      	mov	r0, r5
 800c0be:	f7fe facb 	bl	800a658 <_free_r>
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0c6:	89a3      	ldrh	r3, [r4, #12]
 800c0c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c0cc:	81a3      	strh	r3, [r4, #12]
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	6063      	str	r3, [r4, #4]
 800c0d2:	6923      	ldr	r3, [r4, #16]
 800c0d4:	6023      	str	r3, [r4, #0]
 800c0d6:	89a3      	ldrh	r3, [r4, #12]
 800c0d8:	f043 0308 	orr.w	r3, r3, #8
 800c0dc:	81a3      	strh	r3, [r4, #12]
 800c0de:	6923      	ldr	r3, [r4, #16]
 800c0e0:	b94b      	cbnz	r3, 800c0f6 <__swsetup_r+0x7a>
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c0e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0ec:	d003      	beq.n	800c0f6 <__swsetup_r+0x7a>
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f000 f88b 	bl	800c20c <__smakebuf_r>
 800c0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0fa:	f013 0201 	ands.w	r2, r3, #1
 800c0fe:	d00a      	beq.n	800c116 <__swsetup_r+0x9a>
 800c100:	2200      	movs	r2, #0
 800c102:	60a2      	str	r2, [r4, #8]
 800c104:	6962      	ldr	r2, [r4, #20]
 800c106:	4252      	negs	r2, r2
 800c108:	61a2      	str	r2, [r4, #24]
 800c10a:	6922      	ldr	r2, [r4, #16]
 800c10c:	b942      	cbnz	r2, 800c120 <__swsetup_r+0xa4>
 800c10e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c112:	d1c5      	bne.n	800c0a0 <__swsetup_r+0x24>
 800c114:	bd38      	pop	{r3, r4, r5, pc}
 800c116:	0799      	lsls	r1, r3, #30
 800c118:	bf58      	it	pl
 800c11a:	6962      	ldrpl	r2, [r4, #20]
 800c11c:	60a2      	str	r2, [r4, #8]
 800c11e:	e7f4      	b.n	800c10a <__swsetup_r+0x8e>
 800c120:	2000      	movs	r0, #0
 800c122:	e7f7      	b.n	800c114 <__swsetup_r+0x98>
 800c124:	20000250 	.word	0x20000250

0800c128 <_raise_r>:
 800c128:	291f      	cmp	r1, #31
 800c12a:	b538      	push	{r3, r4, r5, lr}
 800c12c:	4605      	mov	r5, r0
 800c12e:	460c      	mov	r4, r1
 800c130:	d904      	bls.n	800c13c <_raise_r+0x14>
 800c132:	2316      	movs	r3, #22
 800c134:	6003      	str	r3, [r0, #0]
 800c136:	f04f 30ff 	mov.w	r0, #4294967295
 800c13a:	bd38      	pop	{r3, r4, r5, pc}
 800c13c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c13e:	b112      	cbz	r2, 800c146 <_raise_r+0x1e>
 800c140:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c144:	b94b      	cbnz	r3, 800c15a <_raise_r+0x32>
 800c146:	4628      	mov	r0, r5
 800c148:	f000 f830 	bl	800c1ac <_getpid_r>
 800c14c:	4622      	mov	r2, r4
 800c14e:	4601      	mov	r1, r0
 800c150:	4628      	mov	r0, r5
 800c152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c156:	f000 b817 	b.w	800c188 <_kill_r>
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d00a      	beq.n	800c174 <_raise_r+0x4c>
 800c15e:	1c59      	adds	r1, r3, #1
 800c160:	d103      	bne.n	800c16a <_raise_r+0x42>
 800c162:	2316      	movs	r3, #22
 800c164:	6003      	str	r3, [r0, #0]
 800c166:	2001      	movs	r0, #1
 800c168:	e7e7      	b.n	800c13a <_raise_r+0x12>
 800c16a:	2100      	movs	r1, #0
 800c16c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c170:	4620      	mov	r0, r4
 800c172:	4798      	blx	r3
 800c174:	2000      	movs	r0, #0
 800c176:	e7e0      	b.n	800c13a <_raise_r+0x12>

0800c178 <raise>:
 800c178:	4b02      	ldr	r3, [pc, #8]	@ (800c184 <raise+0xc>)
 800c17a:	4601      	mov	r1, r0
 800c17c:	6818      	ldr	r0, [r3, #0]
 800c17e:	f7ff bfd3 	b.w	800c128 <_raise_r>
 800c182:	bf00      	nop
 800c184:	20000250 	.word	0x20000250

0800c188 <_kill_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	4d07      	ldr	r5, [pc, #28]	@ (800c1a8 <_kill_r+0x20>)
 800c18c:	2300      	movs	r3, #0
 800c18e:	4604      	mov	r4, r0
 800c190:	4608      	mov	r0, r1
 800c192:	4611      	mov	r1, r2
 800c194:	602b      	str	r3, [r5, #0]
 800c196:	f7f7 fe87 	bl	8003ea8 <_kill>
 800c19a:	1c43      	adds	r3, r0, #1
 800c19c:	d102      	bne.n	800c1a4 <_kill_r+0x1c>
 800c19e:	682b      	ldr	r3, [r5, #0]
 800c1a0:	b103      	cbz	r3, 800c1a4 <_kill_r+0x1c>
 800c1a2:	6023      	str	r3, [r4, #0]
 800c1a4:	bd38      	pop	{r3, r4, r5, pc}
 800c1a6:	bf00      	nop
 800c1a8:	20000834 	.word	0x20000834

0800c1ac <_getpid_r>:
 800c1ac:	f7f7 be74 	b.w	8003e98 <_getpid>

0800c1b0 <_malloc_usable_size_r>:
 800c1b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1b4:	1f18      	subs	r0, r3, #4
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	bfbc      	itt	lt
 800c1ba:	580b      	ldrlt	r3, [r1, r0]
 800c1bc:	18c0      	addlt	r0, r0, r3
 800c1be:	4770      	bx	lr

0800c1c0 <__swhatbuf_r>:
 800c1c0:	b570      	push	{r4, r5, r6, lr}
 800c1c2:	460c      	mov	r4, r1
 800c1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c8:	2900      	cmp	r1, #0
 800c1ca:	b096      	sub	sp, #88	@ 0x58
 800c1cc:	4615      	mov	r5, r2
 800c1ce:	461e      	mov	r6, r3
 800c1d0:	da0d      	bge.n	800c1ee <__swhatbuf_r+0x2e>
 800c1d2:	89a3      	ldrh	r3, [r4, #12]
 800c1d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c1d8:	f04f 0100 	mov.w	r1, #0
 800c1dc:	bf14      	ite	ne
 800c1de:	2340      	movne	r3, #64	@ 0x40
 800c1e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	6031      	str	r1, [r6, #0]
 800c1e8:	602b      	str	r3, [r5, #0]
 800c1ea:	b016      	add	sp, #88	@ 0x58
 800c1ec:	bd70      	pop	{r4, r5, r6, pc}
 800c1ee:	466a      	mov	r2, sp
 800c1f0:	f000 f848 	bl	800c284 <_fstat_r>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	dbec      	blt.n	800c1d2 <__swhatbuf_r+0x12>
 800c1f8:	9901      	ldr	r1, [sp, #4]
 800c1fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c1fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c202:	4259      	negs	r1, r3
 800c204:	4159      	adcs	r1, r3
 800c206:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c20a:	e7eb      	b.n	800c1e4 <__swhatbuf_r+0x24>

0800c20c <__smakebuf_r>:
 800c20c:	898b      	ldrh	r3, [r1, #12]
 800c20e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c210:	079d      	lsls	r5, r3, #30
 800c212:	4606      	mov	r6, r0
 800c214:	460c      	mov	r4, r1
 800c216:	d507      	bpl.n	800c228 <__smakebuf_r+0x1c>
 800c218:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c21c:	6023      	str	r3, [r4, #0]
 800c21e:	6123      	str	r3, [r4, #16]
 800c220:	2301      	movs	r3, #1
 800c222:	6163      	str	r3, [r4, #20]
 800c224:	b003      	add	sp, #12
 800c226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c228:	ab01      	add	r3, sp, #4
 800c22a:	466a      	mov	r2, sp
 800c22c:	f7ff ffc8 	bl	800c1c0 <__swhatbuf_r>
 800c230:	9f00      	ldr	r7, [sp, #0]
 800c232:	4605      	mov	r5, r0
 800c234:	4639      	mov	r1, r7
 800c236:	4630      	mov	r0, r6
 800c238:	f7fe fdbc 	bl	800adb4 <_malloc_r>
 800c23c:	b948      	cbnz	r0, 800c252 <__smakebuf_r+0x46>
 800c23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c242:	059a      	lsls	r2, r3, #22
 800c244:	d4ee      	bmi.n	800c224 <__smakebuf_r+0x18>
 800c246:	f023 0303 	bic.w	r3, r3, #3
 800c24a:	f043 0302 	orr.w	r3, r3, #2
 800c24e:	81a3      	strh	r3, [r4, #12]
 800c250:	e7e2      	b.n	800c218 <__smakebuf_r+0xc>
 800c252:	89a3      	ldrh	r3, [r4, #12]
 800c254:	6020      	str	r0, [r4, #0]
 800c256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c25a:	81a3      	strh	r3, [r4, #12]
 800c25c:	9b01      	ldr	r3, [sp, #4]
 800c25e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c262:	b15b      	cbz	r3, 800c27c <__smakebuf_r+0x70>
 800c264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c268:	4630      	mov	r0, r6
 800c26a:	f000 f81d 	bl	800c2a8 <_isatty_r>
 800c26e:	b128      	cbz	r0, 800c27c <__smakebuf_r+0x70>
 800c270:	89a3      	ldrh	r3, [r4, #12]
 800c272:	f023 0303 	bic.w	r3, r3, #3
 800c276:	f043 0301 	orr.w	r3, r3, #1
 800c27a:	81a3      	strh	r3, [r4, #12]
 800c27c:	89a3      	ldrh	r3, [r4, #12]
 800c27e:	431d      	orrs	r5, r3
 800c280:	81a5      	strh	r5, [r4, #12]
 800c282:	e7cf      	b.n	800c224 <__smakebuf_r+0x18>

0800c284 <_fstat_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4d07      	ldr	r5, [pc, #28]	@ (800c2a4 <_fstat_r+0x20>)
 800c288:	2300      	movs	r3, #0
 800c28a:	4604      	mov	r4, r0
 800c28c:	4608      	mov	r0, r1
 800c28e:	4611      	mov	r1, r2
 800c290:	602b      	str	r3, [r5, #0]
 800c292:	f7f7 fe69 	bl	8003f68 <_fstat>
 800c296:	1c43      	adds	r3, r0, #1
 800c298:	d102      	bne.n	800c2a0 <_fstat_r+0x1c>
 800c29a:	682b      	ldr	r3, [r5, #0]
 800c29c:	b103      	cbz	r3, 800c2a0 <_fstat_r+0x1c>
 800c29e:	6023      	str	r3, [r4, #0]
 800c2a0:	bd38      	pop	{r3, r4, r5, pc}
 800c2a2:	bf00      	nop
 800c2a4:	20000834 	.word	0x20000834

0800c2a8 <_isatty_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4d06      	ldr	r5, [pc, #24]	@ (800c2c4 <_isatty_r+0x1c>)
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	4608      	mov	r0, r1
 800c2b2:	602b      	str	r3, [r5, #0]
 800c2b4:	f7f7 fe68 	bl	8003f88 <_isatty>
 800c2b8:	1c43      	adds	r3, r0, #1
 800c2ba:	d102      	bne.n	800c2c2 <_isatty_r+0x1a>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	b103      	cbz	r3, 800c2c2 <_isatty_r+0x1a>
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	bd38      	pop	{r3, r4, r5, pc}
 800c2c4:	20000834 	.word	0x20000834

0800c2c8 <hypot>:
 800c2c8:	b508      	push	{r3, lr}
 800c2ca:	ed2d 8b06 	vpush	{d8-d10}
 800c2ce:	eeb0 aa40 	vmov.f32	s20, s0
 800c2d2:	eef0 aa60 	vmov.f32	s21, s1
 800c2d6:	eeb0 9a41 	vmov.f32	s18, s2
 800c2da:	eef0 9a61 	vmov.f32	s19, s3
 800c2de:	f000 fbb5 	bl	800ca4c <__ieee754_hypot>
 800c2e2:	eeb0 8a40 	vmov.f32	s16, s0
 800c2e6:	eef0 8a60 	vmov.f32	s17, s1
 800c2ea:	f000 f8c9 	bl	800c480 <finite>
 800c2ee:	b998      	cbnz	r0, 800c318 <hypot+0x50>
 800c2f0:	eeb0 0a4a 	vmov.f32	s0, s20
 800c2f4:	eef0 0a6a 	vmov.f32	s1, s21
 800c2f8:	f000 f8c2 	bl	800c480 <finite>
 800c2fc:	b160      	cbz	r0, 800c318 <hypot+0x50>
 800c2fe:	eeb0 0a49 	vmov.f32	s0, s18
 800c302:	eef0 0a69 	vmov.f32	s1, s19
 800c306:	f000 f8bb 	bl	800c480 <finite>
 800c30a:	b128      	cbz	r0, 800c318 <hypot+0x50>
 800c30c:	f7fd faee 	bl	80098ec <__errno>
 800c310:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800c328 <hypot+0x60>
 800c314:	2322      	movs	r3, #34	@ 0x22
 800c316:	6003      	str	r3, [r0, #0]
 800c318:	eeb0 0a48 	vmov.f32	s0, s16
 800c31c:	eef0 0a68 	vmov.f32	s1, s17
 800c320:	ecbd 8b06 	vpop	{d8-d10}
 800c324:	bd08      	pop	{r3, pc}
 800c326:	bf00      	nop
 800c328:	00000000 	.word	0x00000000
 800c32c:	7ff00000 	.word	0x7ff00000

0800c330 <cos>:
 800c330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c332:	ec53 2b10 	vmov	r2, r3, d0
 800c336:	4826      	ldr	r0, [pc, #152]	@ (800c3d0 <cos+0xa0>)
 800c338:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c33c:	4281      	cmp	r1, r0
 800c33e:	d806      	bhi.n	800c34e <cos+0x1e>
 800c340:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c3c8 <cos+0x98>
 800c344:	b005      	add	sp, #20
 800c346:	f85d eb04 	ldr.w	lr, [sp], #4
 800c34a:	f000 b9fd 	b.w	800c748 <__kernel_cos>
 800c34e:	4821      	ldr	r0, [pc, #132]	@ (800c3d4 <cos+0xa4>)
 800c350:	4281      	cmp	r1, r0
 800c352:	d908      	bls.n	800c366 <cos+0x36>
 800c354:	4610      	mov	r0, r2
 800c356:	4619      	mov	r1, r3
 800c358:	f7f3 ff96 	bl	8000288 <__aeabi_dsub>
 800c35c:	ec41 0b10 	vmov	d0, r0, r1
 800c360:	b005      	add	sp, #20
 800c362:	f85d fb04 	ldr.w	pc, [sp], #4
 800c366:	4668      	mov	r0, sp
 800c368:	f000 fc86 	bl	800cc78 <__ieee754_rem_pio2>
 800c36c:	f000 0003 	and.w	r0, r0, #3
 800c370:	2801      	cmp	r0, #1
 800c372:	d00b      	beq.n	800c38c <cos+0x5c>
 800c374:	2802      	cmp	r0, #2
 800c376:	d015      	beq.n	800c3a4 <cos+0x74>
 800c378:	b9d8      	cbnz	r0, 800c3b2 <cos+0x82>
 800c37a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c37e:	ed9d 0b00 	vldr	d0, [sp]
 800c382:	f000 f9e1 	bl	800c748 <__kernel_cos>
 800c386:	ec51 0b10 	vmov	r0, r1, d0
 800c38a:	e7e7      	b.n	800c35c <cos+0x2c>
 800c38c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c390:	ed9d 0b00 	vldr	d0, [sp]
 800c394:	f000 faa0 	bl	800c8d8 <__kernel_sin>
 800c398:	ec53 2b10 	vmov	r2, r3, d0
 800c39c:	4610      	mov	r0, r2
 800c39e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c3a2:	e7db      	b.n	800c35c <cos+0x2c>
 800c3a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3a8:	ed9d 0b00 	vldr	d0, [sp]
 800c3ac:	f000 f9cc 	bl	800c748 <__kernel_cos>
 800c3b0:	e7f2      	b.n	800c398 <cos+0x68>
 800c3b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3b6:	ed9d 0b00 	vldr	d0, [sp]
 800c3ba:	2001      	movs	r0, #1
 800c3bc:	f000 fa8c 	bl	800c8d8 <__kernel_sin>
 800c3c0:	e7e1      	b.n	800c386 <cos+0x56>
 800c3c2:	bf00      	nop
 800c3c4:	f3af 8000 	nop.w
	...
 800c3d0:	3fe921fb 	.word	0x3fe921fb
 800c3d4:	7fefffff 	.word	0x7fefffff

0800c3d8 <sin>:
 800c3d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3da:	ec53 2b10 	vmov	r2, r3, d0
 800c3de:	4826      	ldr	r0, [pc, #152]	@ (800c478 <sin+0xa0>)
 800c3e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c3e4:	4281      	cmp	r1, r0
 800c3e6:	d807      	bhi.n	800c3f8 <sin+0x20>
 800c3e8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c470 <sin+0x98>
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	b005      	add	sp, #20
 800c3f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3f4:	f000 ba70 	b.w	800c8d8 <__kernel_sin>
 800c3f8:	4820      	ldr	r0, [pc, #128]	@ (800c47c <sin+0xa4>)
 800c3fa:	4281      	cmp	r1, r0
 800c3fc:	d908      	bls.n	800c410 <sin+0x38>
 800c3fe:	4610      	mov	r0, r2
 800c400:	4619      	mov	r1, r3
 800c402:	f7f3 ff41 	bl	8000288 <__aeabi_dsub>
 800c406:	ec41 0b10 	vmov	d0, r0, r1
 800c40a:	b005      	add	sp, #20
 800c40c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c410:	4668      	mov	r0, sp
 800c412:	f000 fc31 	bl	800cc78 <__ieee754_rem_pio2>
 800c416:	f000 0003 	and.w	r0, r0, #3
 800c41a:	2801      	cmp	r0, #1
 800c41c:	d00c      	beq.n	800c438 <sin+0x60>
 800c41e:	2802      	cmp	r0, #2
 800c420:	d011      	beq.n	800c446 <sin+0x6e>
 800c422:	b9e8      	cbnz	r0, 800c460 <sin+0x88>
 800c424:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c428:	ed9d 0b00 	vldr	d0, [sp]
 800c42c:	2001      	movs	r0, #1
 800c42e:	f000 fa53 	bl	800c8d8 <__kernel_sin>
 800c432:	ec51 0b10 	vmov	r0, r1, d0
 800c436:	e7e6      	b.n	800c406 <sin+0x2e>
 800c438:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c43c:	ed9d 0b00 	vldr	d0, [sp]
 800c440:	f000 f982 	bl	800c748 <__kernel_cos>
 800c444:	e7f5      	b.n	800c432 <sin+0x5a>
 800c446:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c44a:	ed9d 0b00 	vldr	d0, [sp]
 800c44e:	2001      	movs	r0, #1
 800c450:	f000 fa42 	bl	800c8d8 <__kernel_sin>
 800c454:	ec53 2b10 	vmov	r2, r3, d0
 800c458:	4610      	mov	r0, r2
 800c45a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c45e:	e7d2      	b.n	800c406 <sin+0x2e>
 800c460:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c464:	ed9d 0b00 	vldr	d0, [sp]
 800c468:	f000 f96e 	bl	800c748 <__kernel_cos>
 800c46c:	e7f2      	b.n	800c454 <sin+0x7c>
 800c46e:	bf00      	nop
	...
 800c478:	3fe921fb 	.word	0x3fe921fb
 800c47c:	7fefffff 	.word	0x7fefffff

0800c480 <finite>:
 800c480:	b082      	sub	sp, #8
 800c482:	ed8d 0b00 	vstr	d0, [sp]
 800c486:	9801      	ldr	r0, [sp, #4]
 800c488:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800c48c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c490:	0fc0      	lsrs	r0, r0, #31
 800c492:	b002      	add	sp, #8
 800c494:	4770      	bx	lr

0800c496 <fmax>:
 800c496:	b508      	push	{r3, lr}
 800c498:	ed2d 8b04 	vpush	{d8-d9}
 800c49c:	eeb0 8a40 	vmov.f32	s16, s0
 800c4a0:	eef0 8a60 	vmov.f32	s17, s1
 800c4a4:	eeb0 9a41 	vmov.f32	s18, s2
 800c4a8:	eef0 9a61 	vmov.f32	s19, s3
 800c4ac:	f000 f848 	bl	800c540 <__fpclassifyd>
 800c4b0:	b950      	cbnz	r0, 800c4c8 <fmax+0x32>
 800c4b2:	eeb0 8a49 	vmov.f32	s16, s18
 800c4b6:	eef0 8a69 	vmov.f32	s17, s19
 800c4ba:	eeb0 0a48 	vmov.f32	s0, s16
 800c4be:	eef0 0a68 	vmov.f32	s1, s17
 800c4c2:	ecbd 8b04 	vpop	{d8-d9}
 800c4c6:	bd08      	pop	{r3, pc}
 800c4c8:	eeb0 0a49 	vmov.f32	s0, s18
 800c4cc:	eef0 0a69 	vmov.f32	s1, s19
 800c4d0:	f000 f836 	bl	800c540 <__fpclassifyd>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d0f0      	beq.n	800c4ba <fmax+0x24>
 800c4d8:	ec53 2b19 	vmov	r2, r3, d9
 800c4dc:	ec51 0b18 	vmov	r0, r1, d8
 800c4e0:	f7f4 fb1a 	bl	8000b18 <__aeabi_dcmpgt>
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d0e4      	beq.n	800c4b2 <fmax+0x1c>
 800c4e8:	e7e7      	b.n	800c4ba <fmax+0x24>

0800c4ea <fmin>:
 800c4ea:	b508      	push	{r3, lr}
 800c4ec:	ed2d 8b04 	vpush	{d8-d9}
 800c4f0:	eeb0 8a40 	vmov.f32	s16, s0
 800c4f4:	eef0 8a60 	vmov.f32	s17, s1
 800c4f8:	eeb0 9a41 	vmov.f32	s18, s2
 800c4fc:	eef0 9a61 	vmov.f32	s19, s3
 800c500:	f000 f81e 	bl	800c540 <__fpclassifyd>
 800c504:	b950      	cbnz	r0, 800c51c <fmin+0x32>
 800c506:	eeb0 8a49 	vmov.f32	s16, s18
 800c50a:	eef0 8a69 	vmov.f32	s17, s19
 800c50e:	eeb0 0a48 	vmov.f32	s0, s16
 800c512:	eef0 0a68 	vmov.f32	s1, s17
 800c516:	ecbd 8b04 	vpop	{d8-d9}
 800c51a:	bd08      	pop	{r3, pc}
 800c51c:	eeb0 0a49 	vmov.f32	s0, s18
 800c520:	eef0 0a69 	vmov.f32	s1, s19
 800c524:	f000 f80c 	bl	800c540 <__fpclassifyd>
 800c528:	2800      	cmp	r0, #0
 800c52a:	d0f0      	beq.n	800c50e <fmin+0x24>
 800c52c:	ec53 2b19 	vmov	r2, r3, d9
 800c530:	ec51 0b18 	vmov	r0, r1, d8
 800c534:	f7f4 fad2 	bl	8000adc <__aeabi_dcmplt>
 800c538:	2800      	cmp	r0, #0
 800c53a:	d0e4      	beq.n	800c506 <fmin+0x1c>
 800c53c:	e7e7      	b.n	800c50e <fmin+0x24>
	...

0800c540 <__fpclassifyd>:
 800c540:	ec51 0b10 	vmov	r0, r1, d0
 800c544:	b510      	push	{r4, lr}
 800c546:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800c54a:	460b      	mov	r3, r1
 800c54c:	d019      	beq.n	800c582 <__fpclassifyd+0x42>
 800c54e:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800c552:	490e      	ldr	r1, [pc, #56]	@ (800c58c <__fpclassifyd+0x4c>)
 800c554:	428a      	cmp	r2, r1
 800c556:	d90e      	bls.n	800c576 <__fpclassifyd+0x36>
 800c558:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800c55c:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800c560:	428a      	cmp	r2, r1
 800c562:	d908      	bls.n	800c576 <__fpclassifyd+0x36>
 800c564:	4a0a      	ldr	r2, [pc, #40]	@ (800c590 <__fpclassifyd+0x50>)
 800c566:	4213      	tst	r3, r2
 800c568:	d007      	beq.n	800c57a <__fpclassifyd+0x3a>
 800c56a:	4294      	cmp	r4, r2
 800c56c:	d107      	bne.n	800c57e <__fpclassifyd+0x3e>
 800c56e:	fab0 f080 	clz	r0, r0
 800c572:	0940      	lsrs	r0, r0, #5
 800c574:	bd10      	pop	{r4, pc}
 800c576:	2004      	movs	r0, #4
 800c578:	e7fc      	b.n	800c574 <__fpclassifyd+0x34>
 800c57a:	2003      	movs	r0, #3
 800c57c:	e7fa      	b.n	800c574 <__fpclassifyd+0x34>
 800c57e:	2000      	movs	r0, #0
 800c580:	e7f8      	b.n	800c574 <__fpclassifyd+0x34>
 800c582:	2800      	cmp	r0, #0
 800c584:	d1ee      	bne.n	800c564 <__fpclassifyd+0x24>
 800c586:	2002      	movs	r0, #2
 800c588:	e7f4      	b.n	800c574 <__fpclassifyd+0x34>
 800c58a:	bf00      	nop
 800c58c:	7fdfffff 	.word	0x7fdfffff
 800c590:	7ff00000 	.word	0x7ff00000

0800c594 <__ieee754_sqrt>:
 800c594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c598:	4a68      	ldr	r2, [pc, #416]	@ (800c73c <__ieee754_sqrt+0x1a8>)
 800c59a:	ec55 4b10 	vmov	r4, r5, d0
 800c59e:	43aa      	bics	r2, r5
 800c5a0:	462b      	mov	r3, r5
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	d110      	bne.n	800c5c8 <__ieee754_sqrt+0x34>
 800c5a6:	4622      	mov	r2, r4
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	4629      	mov	r1, r5
 800c5ac:	f7f4 f824 	bl	80005f8 <__aeabi_dmul>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	4629      	mov	r1, r5
 800c5b8:	f7f3 fe68 	bl	800028c <__adddf3>
 800c5bc:	4604      	mov	r4, r0
 800c5be:	460d      	mov	r5, r1
 800c5c0:	ec45 4b10 	vmov	d0, r4, r5
 800c5c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c8:	2d00      	cmp	r5, #0
 800c5ca:	dc0e      	bgt.n	800c5ea <__ieee754_sqrt+0x56>
 800c5cc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c5d0:	4322      	orrs	r2, r4
 800c5d2:	d0f5      	beq.n	800c5c0 <__ieee754_sqrt+0x2c>
 800c5d4:	b19d      	cbz	r5, 800c5fe <__ieee754_sqrt+0x6a>
 800c5d6:	4622      	mov	r2, r4
 800c5d8:	4620      	mov	r0, r4
 800c5da:	4629      	mov	r1, r5
 800c5dc:	f7f3 fe54 	bl	8000288 <__aeabi_dsub>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	f7f4 f932 	bl	800084c <__aeabi_ddiv>
 800c5e8:	e7e8      	b.n	800c5bc <__ieee754_sqrt+0x28>
 800c5ea:	152a      	asrs	r2, r5, #20
 800c5ec:	d115      	bne.n	800c61a <__ieee754_sqrt+0x86>
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	e009      	b.n	800c606 <__ieee754_sqrt+0x72>
 800c5f2:	0acb      	lsrs	r3, r1, #11
 800c5f4:	3a15      	subs	r2, #21
 800c5f6:	0549      	lsls	r1, r1, #21
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d0fa      	beq.n	800c5f2 <__ieee754_sqrt+0x5e>
 800c5fc:	e7f7      	b.n	800c5ee <__ieee754_sqrt+0x5a>
 800c5fe:	462a      	mov	r2, r5
 800c600:	e7fa      	b.n	800c5f8 <__ieee754_sqrt+0x64>
 800c602:	005b      	lsls	r3, r3, #1
 800c604:	3001      	adds	r0, #1
 800c606:	02dc      	lsls	r4, r3, #11
 800c608:	d5fb      	bpl.n	800c602 <__ieee754_sqrt+0x6e>
 800c60a:	1e44      	subs	r4, r0, #1
 800c60c:	1b12      	subs	r2, r2, r4
 800c60e:	f1c0 0420 	rsb	r4, r0, #32
 800c612:	fa21 f404 	lsr.w	r4, r1, r4
 800c616:	4323      	orrs	r3, r4
 800c618:	4081      	lsls	r1, r0
 800c61a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c61e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c622:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c626:	07d2      	lsls	r2, r2, #31
 800c628:	bf5c      	itt	pl
 800c62a:	005b      	lslpl	r3, r3, #1
 800c62c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c630:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c634:	bf58      	it	pl
 800c636:	0049      	lslpl	r1, r1, #1
 800c638:	2600      	movs	r6, #0
 800c63a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c63e:	106d      	asrs	r5, r5, #1
 800c640:	0049      	lsls	r1, r1, #1
 800c642:	2016      	movs	r0, #22
 800c644:	4632      	mov	r2, r6
 800c646:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c64a:	1917      	adds	r7, r2, r4
 800c64c:	429f      	cmp	r7, r3
 800c64e:	bfde      	ittt	le
 800c650:	193a      	addle	r2, r7, r4
 800c652:	1bdb      	suble	r3, r3, r7
 800c654:	1936      	addle	r6, r6, r4
 800c656:	0fcf      	lsrs	r7, r1, #31
 800c658:	3801      	subs	r0, #1
 800c65a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c65e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c662:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c666:	d1f0      	bne.n	800c64a <__ieee754_sqrt+0xb6>
 800c668:	4604      	mov	r4, r0
 800c66a:	2720      	movs	r7, #32
 800c66c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c670:	429a      	cmp	r2, r3
 800c672:	eb00 0e0c 	add.w	lr, r0, ip
 800c676:	db02      	blt.n	800c67e <__ieee754_sqrt+0xea>
 800c678:	d113      	bne.n	800c6a2 <__ieee754_sqrt+0x10e>
 800c67a:	458e      	cmp	lr, r1
 800c67c:	d811      	bhi.n	800c6a2 <__ieee754_sqrt+0x10e>
 800c67e:	f1be 0f00 	cmp.w	lr, #0
 800c682:	eb0e 000c 	add.w	r0, lr, ip
 800c686:	da42      	bge.n	800c70e <__ieee754_sqrt+0x17a>
 800c688:	2800      	cmp	r0, #0
 800c68a:	db40      	blt.n	800c70e <__ieee754_sqrt+0x17a>
 800c68c:	f102 0801 	add.w	r8, r2, #1
 800c690:	1a9b      	subs	r3, r3, r2
 800c692:	458e      	cmp	lr, r1
 800c694:	bf88      	it	hi
 800c696:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c69a:	eba1 010e 	sub.w	r1, r1, lr
 800c69e:	4464      	add	r4, ip
 800c6a0:	4642      	mov	r2, r8
 800c6a2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c6a6:	3f01      	subs	r7, #1
 800c6a8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c6ac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c6b0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c6b4:	d1dc      	bne.n	800c670 <__ieee754_sqrt+0xdc>
 800c6b6:	4319      	orrs	r1, r3
 800c6b8:	d01b      	beq.n	800c6f2 <__ieee754_sqrt+0x15e>
 800c6ba:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c740 <__ieee754_sqrt+0x1ac>
 800c6be:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c744 <__ieee754_sqrt+0x1b0>
 800c6c2:	e9da 0100 	ldrd	r0, r1, [sl]
 800c6c6:	e9db 2300 	ldrd	r2, r3, [fp]
 800c6ca:	f7f3 fddd 	bl	8000288 <__aeabi_dsub>
 800c6ce:	e9da 8900 	ldrd	r8, r9, [sl]
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	4640      	mov	r0, r8
 800c6d8:	4649      	mov	r1, r9
 800c6da:	f7f4 fa09 	bl	8000af0 <__aeabi_dcmple>
 800c6de:	b140      	cbz	r0, 800c6f2 <__ieee754_sqrt+0x15e>
 800c6e0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c6e4:	e9da 0100 	ldrd	r0, r1, [sl]
 800c6e8:	e9db 2300 	ldrd	r2, r3, [fp]
 800c6ec:	d111      	bne.n	800c712 <__ieee754_sqrt+0x17e>
 800c6ee:	3601      	adds	r6, #1
 800c6f0:	463c      	mov	r4, r7
 800c6f2:	1072      	asrs	r2, r6, #1
 800c6f4:	0863      	lsrs	r3, r4, #1
 800c6f6:	07f1      	lsls	r1, r6, #31
 800c6f8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c6fc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c700:	bf48      	it	mi
 800c702:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c706:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c70a:	4618      	mov	r0, r3
 800c70c:	e756      	b.n	800c5bc <__ieee754_sqrt+0x28>
 800c70e:	4690      	mov	r8, r2
 800c710:	e7be      	b.n	800c690 <__ieee754_sqrt+0xfc>
 800c712:	f7f3 fdbb 	bl	800028c <__adddf3>
 800c716:	e9da 8900 	ldrd	r8, r9, [sl]
 800c71a:	4602      	mov	r2, r0
 800c71c:	460b      	mov	r3, r1
 800c71e:	4640      	mov	r0, r8
 800c720:	4649      	mov	r1, r9
 800c722:	f7f4 f9db 	bl	8000adc <__aeabi_dcmplt>
 800c726:	b120      	cbz	r0, 800c732 <__ieee754_sqrt+0x19e>
 800c728:	1ca0      	adds	r0, r4, #2
 800c72a:	bf08      	it	eq
 800c72c:	3601      	addeq	r6, #1
 800c72e:	3402      	adds	r4, #2
 800c730:	e7df      	b.n	800c6f2 <__ieee754_sqrt+0x15e>
 800c732:	1c63      	adds	r3, r4, #1
 800c734:	f023 0401 	bic.w	r4, r3, #1
 800c738:	e7db      	b.n	800c6f2 <__ieee754_sqrt+0x15e>
 800c73a:	bf00      	nop
 800c73c:	7ff00000 	.word	0x7ff00000
 800c740:	200002a8 	.word	0x200002a8
 800c744:	200002a0 	.word	0x200002a0

0800c748 <__kernel_cos>:
 800c748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74c:	ec57 6b10 	vmov	r6, r7, d0
 800c750:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c754:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800c758:	ed8d 1b00 	vstr	d1, [sp]
 800c75c:	d206      	bcs.n	800c76c <__kernel_cos+0x24>
 800c75e:	4630      	mov	r0, r6
 800c760:	4639      	mov	r1, r7
 800c762:	f7f4 f9f9 	bl	8000b58 <__aeabi_d2iz>
 800c766:	2800      	cmp	r0, #0
 800c768:	f000 8088 	beq.w	800c87c <__kernel_cos+0x134>
 800c76c:	4632      	mov	r2, r6
 800c76e:	463b      	mov	r3, r7
 800c770:	4630      	mov	r0, r6
 800c772:	4639      	mov	r1, r7
 800c774:	f7f3 ff40 	bl	80005f8 <__aeabi_dmul>
 800c778:	4b51      	ldr	r3, [pc, #324]	@ (800c8c0 <__kernel_cos+0x178>)
 800c77a:	2200      	movs	r2, #0
 800c77c:	4604      	mov	r4, r0
 800c77e:	460d      	mov	r5, r1
 800c780:	f7f3 ff3a 	bl	80005f8 <__aeabi_dmul>
 800c784:	a340      	add	r3, pc, #256	@ (adr r3, 800c888 <__kernel_cos+0x140>)
 800c786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78a:	4682      	mov	sl, r0
 800c78c:	468b      	mov	fp, r1
 800c78e:	4620      	mov	r0, r4
 800c790:	4629      	mov	r1, r5
 800c792:	f7f3 ff31 	bl	80005f8 <__aeabi_dmul>
 800c796:	a33e      	add	r3, pc, #248	@ (adr r3, 800c890 <__kernel_cos+0x148>)
 800c798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79c:	f7f3 fd76 	bl	800028c <__adddf3>
 800c7a0:	4622      	mov	r2, r4
 800c7a2:	462b      	mov	r3, r5
 800c7a4:	f7f3 ff28 	bl	80005f8 <__aeabi_dmul>
 800c7a8:	a33b      	add	r3, pc, #236	@ (adr r3, 800c898 <__kernel_cos+0x150>)
 800c7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ae:	f7f3 fd6b 	bl	8000288 <__aeabi_dsub>
 800c7b2:	4622      	mov	r2, r4
 800c7b4:	462b      	mov	r3, r5
 800c7b6:	f7f3 ff1f 	bl	80005f8 <__aeabi_dmul>
 800c7ba:	a339      	add	r3, pc, #228	@ (adr r3, 800c8a0 <__kernel_cos+0x158>)
 800c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c0:	f7f3 fd64 	bl	800028c <__adddf3>
 800c7c4:	4622      	mov	r2, r4
 800c7c6:	462b      	mov	r3, r5
 800c7c8:	f7f3 ff16 	bl	80005f8 <__aeabi_dmul>
 800c7cc:	a336      	add	r3, pc, #216	@ (adr r3, 800c8a8 <__kernel_cos+0x160>)
 800c7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d2:	f7f3 fd59 	bl	8000288 <__aeabi_dsub>
 800c7d6:	4622      	mov	r2, r4
 800c7d8:	462b      	mov	r3, r5
 800c7da:	f7f3 ff0d 	bl	80005f8 <__aeabi_dmul>
 800c7de:	a334      	add	r3, pc, #208	@ (adr r3, 800c8b0 <__kernel_cos+0x168>)
 800c7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e4:	f7f3 fd52 	bl	800028c <__adddf3>
 800c7e8:	4622      	mov	r2, r4
 800c7ea:	462b      	mov	r3, r5
 800c7ec:	f7f3 ff04 	bl	80005f8 <__aeabi_dmul>
 800c7f0:	4622      	mov	r2, r4
 800c7f2:	462b      	mov	r3, r5
 800c7f4:	f7f3 ff00 	bl	80005f8 <__aeabi_dmul>
 800c7f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	460d      	mov	r5, r1
 800c800:	4630      	mov	r0, r6
 800c802:	4639      	mov	r1, r7
 800c804:	f7f3 fef8 	bl	80005f8 <__aeabi_dmul>
 800c808:	460b      	mov	r3, r1
 800c80a:	4602      	mov	r2, r0
 800c80c:	4629      	mov	r1, r5
 800c80e:	4620      	mov	r0, r4
 800c810:	f7f3 fd3a 	bl	8000288 <__aeabi_dsub>
 800c814:	4b2b      	ldr	r3, [pc, #172]	@ (800c8c4 <__kernel_cos+0x17c>)
 800c816:	4598      	cmp	r8, r3
 800c818:	4606      	mov	r6, r0
 800c81a:	460f      	mov	r7, r1
 800c81c:	d810      	bhi.n	800c840 <__kernel_cos+0xf8>
 800c81e:	4602      	mov	r2, r0
 800c820:	460b      	mov	r3, r1
 800c822:	4650      	mov	r0, sl
 800c824:	4659      	mov	r1, fp
 800c826:	f7f3 fd2f 	bl	8000288 <__aeabi_dsub>
 800c82a:	460b      	mov	r3, r1
 800c82c:	4926      	ldr	r1, [pc, #152]	@ (800c8c8 <__kernel_cos+0x180>)
 800c82e:	4602      	mov	r2, r0
 800c830:	2000      	movs	r0, #0
 800c832:	f7f3 fd29 	bl	8000288 <__aeabi_dsub>
 800c836:	ec41 0b10 	vmov	d0, r0, r1
 800c83a:	b003      	add	sp, #12
 800c83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c840:	4b22      	ldr	r3, [pc, #136]	@ (800c8cc <__kernel_cos+0x184>)
 800c842:	4921      	ldr	r1, [pc, #132]	@ (800c8c8 <__kernel_cos+0x180>)
 800c844:	4598      	cmp	r8, r3
 800c846:	bf8c      	ite	hi
 800c848:	4d21      	ldrhi	r5, [pc, #132]	@ (800c8d0 <__kernel_cos+0x188>)
 800c84a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c84e:	2400      	movs	r4, #0
 800c850:	4622      	mov	r2, r4
 800c852:	462b      	mov	r3, r5
 800c854:	2000      	movs	r0, #0
 800c856:	f7f3 fd17 	bl	8000288 <__aeabi_dsub>
 800c85a:	4622      	mov	r2, r4
 800c85c:	4680      	mov	r8, r0
 800c85e:	4689      	mov	r9, r1
 800c860:	462b      	mov	r3, r5
 800c862:	4650      	mov	r0, sl
 800c864:	4659      	mov	r1, fp
 800c866:	f7f3 fd0f 	bl	8000288 <__aeabi_dsub>
 800c86a:	4632      	mov	r2, r6
 800c86c:	463b      	mov	r3, r7
 800c86e:	f7f3 fd0b 	bl	8000288 <__aeabi_dsub>
 800c872:	4602      	mov	r2, r0
 800c874:	460b      	mov	r3, r1
 800c876:	4640      	mov	r0, r8
 800c878:	4649      	mov	r1, r9
 800c87a:	e7da      	b.n	800c832 <__kernel_cos+0xea>
 800c87c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c8b8 <__kernel_cos+0x170>
 800c880:	e7db      	b.n	800c83a <__kernel_cos+0xf2>
 800c882:	bf00      	nop
 800c884:	f3af 8000 	nop.w
 800c888:	be8838d4 	.word	0xbe8838d4
 800c88c:	bda8fae9 	.word	0xbda8fae9
 800c890:	bdb4b1c4 	.word	0xbdb4b1c4
 800c894:	3e21ee9e 	.word	0x3e21ee9e
 800c898:	809c52ad 	.word	0x809c52ad
 800c89c:	3e927e4f 	.word	0x3e927e4f
 800c8a0:	19cb1590 	.word	0x19cb1590
 800c8a4:	3efa01a0 	.word	0x3efa01a0
 800c8a8:	16c15177 	.word	0x16c15177
 800c8ac:	3f56c16c 	.word	0x3f56c16c
 800c8b0:	5555554c 	.word	0x5555554c
 800c8b4:	3fa55555 	.word	0x3fa55555
 800c8b8:	00000000 	.word	0x00000000
 800c8bc:	3ff00000 	.word	0x3ff00000
 800c8c0:	3fe00000 	.word	0x3fe00000
 800c8c4:	3fd33332 	.word	0x3fd33332
 800c8c8:	3ff00000 	.word	0x3ff00000
 800c8cc:	3fe90000 	.word	0x3fe90000
 800c8d0:	3fd20000 	.word	0x3fd20000
 800c8d4:	00000000 	.word	0x00000000

0800c8d8 <__kernel_sin>:
 800c8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8dc:	ec55 4b10 	vmov	r4, r5, d0
 800c8e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c8e4:	b085      	sub	sp, #20
 800c8e6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c8ea:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c8ee:	4680      	mov	r8, r0
 800c8f0:	d205      	bcs.n	800c8fe <__kernel_sin+0x26>
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	f7f4 f92f 	bl	8000b58 <__aeabi_d2iz>
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d052      	beq.n	800c9a4 <__kernel_sin+0xcc>
 800c8fe:	4622      	mov	r2, r4
 800c900:	462b      	mov	r3, r5
 800c902:	4620      	mov	r0, r4
 800c904:	4629      	mov	r1, r5
 800c906:	f7f3 fe77 	bl	80005f8 <__aeabi_dmul>
 800c90a:	4682      	mov	sl, r0
 800c90c:	468b      	mov	fp, r1
 800c90e:	4602      	mov	r2, r0
 800c910:	460b      	mov	r3, r1
 800c912:	4620      	mov	r0, r4
 800c914:	4629      	mov	r1, r5
 800c916:	f7f3 fe6f 	bl	80005f8 <__aeabi_dmul>
 800c91a:	a342      	add	r3, pc, #264	@ (adr r3, 800ca24 <__kernel_sin+0x14c>)
 800c91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c920:	e9cd 0100 	strd	r0, r1, [sp]
 800c924:	4650      	mov	r0, sl
 800c926:	4659      	mov	r1, fp
 800c928:	f7f3 fe66 	bl	80005f8 <__aeabi_dmul>
 800c92c:	a33f      	add	r3, pc, #252	@ (adr r3, 800ca2c <__kernel_sin+0x154>)
 800c92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c932:	f7f3 fca9 	bl	8000288 <__aeabi_dsub>
 800c936:	4652      	mov	r2, sl
 800c938:	465b      	mov	r3, fp
 800c93a:	f7f3 fe5d 	bl	80005f8 <__aeabi_dmul>
 800c93e:	a33d      	add	r3, pc, #244	@ (adr r3, 800ca34 <__kernel_sin+0x15c>)
 800c940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c944:	f7f3 fca2 	bl	800028c <__adddf3>
 800c948:	4652      	mov	r2, sl
 800c94a:	465b      	mov	r3, fp
 800c94c:	f7f3 fe54 	bl	80005f8 <__aeabi_dmul>
 800c950:	a33a      	add	r3, pc, #232	@ (adr r3, 800ca3c <__kernel_sin+0x164>)
 800c952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c956:	f7f3 fc97 	bl	8000288 <__aeabi_dsub>
 800c95a:	4652      	mov	r2, sl
 800c95c:	465b      	mov	r3, fp
 800c95e:	f7f3 fe4b 	bl	80005f8 <__aeabi_dmul>
 800c962:	a338      	add	r3, pc, #224	@ (adr r3, 800ca44 <__kernel_sin+0x16c>)
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	f7f3 fc90 	bl	800028c <__adddf3>
 800c96c:	4606      	mov	r6, r0
 800c96e:	460f      	mov	r7, r1
 800c970:	f1b8 0f00 	cmp.w	r8, #0
 800c974:	d11b      	bne.n	800c9ae <__kernel_sin+0xd6>
 800c976:	4602      	mov	r2, r0
 800c978:	460b      	mov	r3, r1
 800c97a:	4650      	mov	r0, sl
 800c97c:	4659      	mov	r1, fp
 800c97e:	f7f3 fe3b 	bl	80005f8 <__aeabi_dmul>
 800c982:	a325      	add	r3, pc, #148	@ (adr r3, 800ca18 <__kernel_sin+0x140>)
 800c984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c988:	f7f3 fc7e 	bl	8000288 <__aeabi_dsub>
 800c98c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c990:	f7f3 fe32 	bl	80005f8 <__aeabi_dmul>
 800c994:	4602      	mov	r2, r0
 800c996:	460b      	mov	r3, r1
 800c998:	4620      	mov	r0, r4
 800c99a:	4629      	mov	r1, r5
 800c99c:	f7f3 fc76 	bl	800028c <__adddf3>
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	460d      	mov	r5, r1
 800c9a4:	ec45 4b10 	vmov	d0, r4, r5
 800c9a8:	b005      	add	sp, #20
 800c9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9b2:	4b1b      	ldr	r3, [pc, #108]	@ (800ca20 <__kernel_sin+0x148>)
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f7f3 fe1f 	bl	80005f8 <__aeabi_dmul>
 800c9ba:	4632      	mov	r2, r6
 800c9bc:	4680      	mov	r8, r0
 800c9be:	4689      	mov	r9, r1
 800c9c0:	463b      	mov	r3, r7
 800c9c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9c6:	f7f3 fe17 	bl	80005f8 <__aeabi_dmul>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	4640      	mov	r0, r8
 800c9d0:	4649      	mov	r1, r9
 800c9d2:	f7f3 fc59 	bl	8000288 <__aeabi_dsub>
 800c9d6:	4652      	mov	r2, sl
 800c9d8:	465b      	mov	r3, fp
 800c9da:	f7f3 fe0d 	bl	80005f8 <__aeabi_dmul>
 800c9de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9e2:	f7f3 fc51 	bl	8000288 <__aeabi_dsub>
 800c9e6:	a30c      	add	r3, pc, #48	@ (adr r3, 800ca18 <__kernel_sin+0x140>)
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	4606      	mov	r6, r0
 800c9ee:	460f      	mov	r7, r1
 800c9f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9f4:	f7f3 fe00 	bl	80005f8 <__aeabi_dmul>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	4639      	mov	r1, r7
 800ca00:	f7f3 fc44 	bl	800028c <__adddf3>
 800ca04:	4602      	mov	r2, r0
 800ca06:	460b      	mov	r3, r1
 800ca08:	4620      	mov	r0, r4
 800ca0a:	4629      	mov	r1, r5
 800ca0c:	f7f3 fc3c 	bl	8000288 <__aeabi_dsub>
 800ca10:	e7c6      	b.n	800c9a0 <__kernel_sin+0xc8>
 800ca12:	bf00      	nop
 800ca14:	f3af 8000 	nop.w
 800ca18:	55555549 	.word	0x55555549
 800ca1c:	3fc55555 	.word	0x3fc55555
 800ca20:	3fe00000 	.word	0x3fe00000
 800ca24:	5acfd57c 	.word	0x5acfd57c
 800ca28:	3de5d93a 	.word	0x3de5d93a
 800ca2c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ca30:	3e5ae5e6 	.word	0x3e5ae5e6
 800ca34:	57b1fe7d 	.word	0x57b1fe7d
 800ca38:	3ec71de3 	.word	0x3ec71de3
 800ca3c:	19c161d5 	.word	0x19c161d5
 800ca40:	3f2a01a0 	.word	0x3f2a01a0
 800ca44:	1110f8a6 	.word	0x1110f8a6
 800ca48:	3f811111 	.word	0x3f811111

0800ca4c <__ieee754_hypot>:
 800ca4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca50:	ec51 0b10 	vmov	r0, r1, d0
 800ca54:	ec53 2b11 	vmov	r2, r3, d1
 800ca58:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800ca5c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800ca60:	42a5      	cmp	r5, r4
 800ca62:	b087      	sub	sp, #28
 800ca64:	da05      	bge.n	800ca72 <__ieee754_hypot+0x26>
 800ca66:	462e      	mov	r6, r5
 800ca68:	4625      	mov	r5, r4
 800ca6a:	4634      	mov	r4, r6
 800ca6c:	4606      	mov	r6, r0
 800ca6e:	4610      	mov	r0, r2
 800ca70:	4632      	mov	r2, r6
 800ca72:	1b2b      	subs	r3, r5, r4
 800ca74:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800ca78:	4629      	mov	r1, r5
 800ca7a:	4682      	mov	sl, r0
 800ca7c:	46ab      	mov	fp, r5
 800ca7e:	4616      	mov	r6, r2
 800ca80:	4627      	mov	r7, r4
 800ca82:	dd05      	ble.n	800ca90 <__ieee754_hypot+0x44>
 800ca84:	4623      	mov	r3, r4
 800ca86:	f7f3 fc01 	bl	800028c <__adddf3>
 800ca8a:	4682      	mov	sl, r0
 800ca8c:	468b      	mov	fp, r1
 800ca8e:	e016      	b.n	800cabe <__ieee754_hypot+0x72>
 800ca90:	4b75      	ldr	r3, [pc, #468]	@ (800cc68 <__ieee754_hypot+0x21c>)
 800ca92:	429d      	cmp	r5, r3
 800ca94:	f340 8096 	ble.w	800cbc4 <__ieee754_hypot+0x178>
 800ca98:	4b74      	ldr	r3, [pc, #464]	@ (800cc6c <__ieee754_hypot+0x220>)
 800ca9a:	429d      	cmp	r5, r3
 800ca9c:	dd14      	ble.n	800cac8 <__ieee754_hypot+0x7c>
 800ca9e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800caa2:	4305      	orrs	r5, r0
 800caa4:	d004      	beq.n	800cab0 <__ieee754_hypot+0x64>
 800caa6:	4623      	mov	r3, r4
 800caa8:	f7f3 fbf0 	bl	800028c <__adddf3>
 800caac:	4682      	mov	sl, r0
 800caae:	468b      	mov	fp, r1
 800cab0:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800cab4:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800cab8:	4334      	orrs	r4, r6
 800caba:	f000 80d2 	beq.w	800cc62 <__ieee754_hypot+0x216>
 800cabe:	ec4b ab10 	vmov	d0, sl, fp
 800cac2:	b007      	add	sp, #28
 800cac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac8:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800cacc:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800cad0:	46ab      	mov	fp, r5
 800cad2:	4627      	mov	r7, r4
 800cad4:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800cad8:	9301      	str	r3, [sp, #4]
 800cada:	4b65      	ldr	r3, [pc, #404]	@ (800cc70 <__ieee754_hypot+0x224>)
 800cadc:	429c      	cmp	r4, r3
 800cade:	dc19      	bgt.n	800cb14 <__ieee754_hypot+0xc8>
 800cae0:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800cae4:	da70      	bge.n	800cbc8 <__ieee754_hypot+0x17c>
 800cae6:	4633      	mov	r3, r6
 800cae8:	4323      	orrs	r3, r4
 800caea:	d0e8      	beq.n	800cabe <__ieee754_hypot+0x72>
 800caec:	4b61      	ldr	r3, [pc, #388]	@ (800cc74 <__ieee754_hypot+0x228>)
 800caee:	2200      	movs	r2, #0
 800caf0:	4630      	mov	r0, r6
 800caf2:	4639      	mov	r1, r7
 800caf4:	f7f3 fd80 	bl	80005f8 <__aeabi_dmul>
 800caf8:	4b5e      	ldr	r3, [pc, #376]	@ (800cc74 <__ieee754_hypot+0x228>)
 800cafa:	4606      	mov	r6, r0
 800cafc:	460f      	mov	r7, r1
 800cafe:	4650      	mov	r0, sl
 800cb00:	4659      	mov	r1, fp
 800cb02:	2200      	movs	r2, #0
 800cb04:	f7f3 fd78 	bl	80005f8 <__aeabi_dmul>
 800cb08:	9b01      	ldr	r3, [sp, #4]
 800cb0a:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800cb0e:	4682      	mov	sl, r0
 800cb10:	468b      	mov	fp, r1
 800cb12:	9301      	str	r3, [sp, #4]
 800cb14:	4632      	mov	r2, r6
 800cb16:	463b      	mov	r3, r7
 800cb18:	4650      	mov	r0, sl
 800cb1a:	4659      	mov	r1, fp
 800cb1c:	f7f3 fbb4 	bl	8000288 <__aeabi_dsub>
 800cb20:	4602      	mov	r2, r0
 800cb22:	460b      	mov	r3, r1
 800cb24:	4680      	mov	r8, r0
 800cb26:	4689      	mov	r9, r1
 800cb28:	4630      	mov	r0, r6
 800cb2a:	4639      	mov	r1, r7
 800cb2c:	f7f3 ffd6 	bl	8000adc <__aeabi_dcmplt>
 800cb30:	2200      	movs	r2, #0
 800cb32:	2800      	cmp	r0, #0
 800cb34:	d053      	beq.n	800cbde <__ieee754_hypot+0x192>
 800cb36:	462b      	mov	r3, r5
 800cb38:	4610      	mov	r0, r2
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	4614      	mov	r4, r2
 800cb3e:	f7f3 fd5b 	bl	80005f8 <__aeabi_dmul>
 800cb42:	4632      	mov	r2, r6
 800cb44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb48:	463b      	mov	r3, r7
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800cb50:	f7f3 fd52 	bl	80005f8 <__aeabi_dmul>
 800cb54:	4622      	mov	r2, r4
 800cb56:	4606      	mov	r6, r0
 800cb58:	460f      	mov	r7, r1
 800cb5a:	462b      	mov	r3, r5
 800cb5c:	4650      	mov	r0, sl
 800cb5e:	4659      	mov	r1, fp
 800cb60:	f7f3 fb94 	bl	800028c <__adddf3>
 800cb64:	4622      	mov	r2, r4
 800cb66:	4680      	mov	r8, r0
 800cb68:	4689      	mov	r9, r1
 800cb6a:	462b      	mov	r3, r5
 800cb6c:	4650      	mov	r0, sl
 800cb6e:	4659      	mov	r1, fp
 800cb70:	f7f3 fb8a 	bl	8000288 <__aeabi_dsub>
 800cb74:	4602      	mov	r2, r0
 800cb76:	460b      	mov	r3, r1
 800cb78:	4640      	mov	r0, r8
 800cb7a:	4649      	mov	r1, r9
 800cb7c:	f7f3 fd3c 	bl	80005f8 <__aeabi_dmul>
 800cb80:	4602      	mov	r2, r0
 800cb82:	460b      	mov	r3, r1
 800cb84:	4630      	mov	r0, r6
 800cb86:	4639      	mov	r1, r7
 800cb88:	f7f3 fb7e 	bl	8000288 <__aeabi_dsub>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	460b      	mov	r3, r1
 800cb90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb94:	f7f3 fb78 	bl	8000288 <__aeabi_dsub>
 800cb98:	ec41 0b10 	vmov	d0, r0, r1
 800cb9c:	f7ff fcfa 	bl	800c594 <__ieee754_sqrt>
 800cba0:	9b01      	ldr	r3, [sp, #4]
 800cba2:	ec5b ab10 	vmov	sl, fp, d0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d089      	beq.n	800cabe <__ieee754_hypot+0x72>
 800cbaa:	051b      	lsls	r3, r3, #20
 800cbac:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	460b      	mov	r3, r1
 800cbba:	4650      	mov	r0, sl
 800cbbc:	4659      	mov	r1, fp
 800cbbe:	f7f3 fd1b 	bl	80005f8 <__aeabi_dmul>
 800cbc2:	e762      	b.n	800ca8a <__ieee754_hypot+0x3e>
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	e787      	b.n	800cad8 <__ieee754_hypot+0x8c>
 800cbc8:	9b01      	ldr	r3, [sp, #4]
 800cbca:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800cbce:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800cbd2:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800cbd6:	9301      	str	r3, [sp, #4]
 800cbd8:	46ab      	mov	fp, r5
 800cbda:	4627      	mov	r7, r4
 800cbdc:	e79a      	b.n	800cb14 <__ieee754_hypot+0xc8>
 800cbde:	4623      	mov	r3, r4
 800cbe0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cbe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800cbee:	4614      	mov	r4, r2
 800cbf0:	461d      	mov	r5, r3
 800cbf2:	f7f3 fd01 	bl	80005f8 <__aeabi_dmul>
 800cbf6:	4642      	mov	r2, r8
 800cbf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cbfc:	464b      	mov	r3, r9
 800cbfe:	4640      	mov	r0, r8
 800cc00:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800cc04:	f7f3 fcf8 	bl	80005f8 <__aeabi_dmul>
 800cc08:	4652      	mov	r2, sl
 800cc0a:	465b      	mov	r3, fp
 800cc0c:	4680      	mov	r8, r0
 800cc0e:	4689      	mov	r9, r1
 800cc10:	4650      	mov	r0, sl
 800cc12:	4659      	mov	r1, fp
 800cc14:	f7f3 fb3a 	bl	800028c <__adddf3>
 800cc18:	4622      	mov	r2, r4
 800cc1a:	462b      	mov	r3, r5
 800cc1c:	f7f3 fb34 	bl	8000288 <__aeabi_dsub>
 800cc20:	4632      	mov	r2, r6
 800cc22:	463b      	mov	r3, r7
 800cc24:	f7f3 fce8 	bl	80005f8 <__aeabi_dmul>
 800cc28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc2c:	4682      	mov	sl, r0
 800cc2e:	468b      	mov	fp, r1
 800cc30:	4630      	mov	r0, r6
 800cc32:	4639      	mov	r1, r7
 800cc34:	f7f3 fb28 	bl	8000288 <__aeabi_dsub>
 800cc38:	4622      	mov	r2, r4
 800cc3a:	462b      	mov	r3, r5
 800cc3c:	f7f3 fcdc 	bl	80005f8 <__aeabi_dmul>
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	4650      	mov	r0, sl
 800cc46:	4659      	mov	r1, fp
 800cc48:	f7f3 fb20 	bl	800028c <__adddf3>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	460b      	mov	r3, r1
 800cc50:	4640      	mov	r0, r8
 800cc52:	4649      	mov	r1, r9
 800cc54:	f7f3 fb18 	bl	8000288 <__aeabi_dsub>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc60:	e798      	b.n	800cb94 <__ieee754_hypot+0x148>
 800cc62:	46b2      	mov	sl, r6
 800cc64:	46bb      	mov	fp, r7
 800cc66:	e72a      	b.n	800cabe <__ieee754_hypot+0x72>
 800cc68:	5f300000 	.word	0x5f300000
 800cc6c:	7fefffff 	.word	0x7fefffff
 800cc70:	20afffff 	.word	0x20afffff
 800cc74:	7fd00000 	.word	0x7fd00000

0800cc78 <__ieee754_rem_pio2>:
 800cc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7c:	ec57 6b10 	vmov	r6, r7, d0
 800cc80:	4bc5      	ldr	r3, [pc, #788]	@ (800cf98 <__ieee754_rem_pio2+0x320>)
 800cc82:	b08d      	sub	sp, #52	@ 0x34
 800cc84:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800cc88:	4598      	cmp	r8, r3
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	9704      	str	r7, [sp, #16]
 800cc8e:	d807      	bhi.n	800cca0 <__ieee754_rem_pio2+0x28>
 800cc90:	2200      	movs	r2, #0
 800cc92:	2300      	movs	r3, #0
 800cc94:	ed80 0b00 	vstr	d0, [r0]
 800cc98:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cc9c:	2500      	movs	r5, #0
 800cc9e:	e028      	b.n	800ccf2 <__ieee754_rem_pio2+0x7a>
 800cca0:	4bbe      	ldr	r3, [pc, #760]	@ (800cf9c <__ieee754_rem_pio2+0x324>)
 800cca2:	4598      	cmp	r8, r3
 800cca4:	d878      	bhi.n	800cd98 <__ieee754_rem_pio2+0x120>
 800cca6:	9b04      	ldr	r3, [sp, #16]
 800cca8:	4dbd      	ldr	r5, [pc, #756]	@ (800cfa0 <__ieee754_rem_pio2+0x328>)
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	4630      	mov	r0, r6
 800ccae:	a3ac      	add	r3, pc, #688	@ (adr r3, 800cf60 <__ieee754_rem_pio2+0x2e8>)
 800ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb4:	4639      	mov	r1, r7
 800ccb6:	dd38      	ble.n	800cd2a <__ieee754_rem_pio2+0xb2>
 800ccb8:	f7f3 fae6 	bl	8000288 <__aeabi_dsub>
 800ccbc:	45a8      	cmp	r8, r5
 800ccbe:	4606      	mov	r6, r0
 800ccc0:	460f      	mov	r7, r1
 800ccc2:	d01a      	beq.n	800ccfa <__ieee754_rem_pio2+0x82>
 800ccc4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800cf68 <__ieee754_rem_pio2+0x2f0>)
 800ccc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccca:	f7f3 fadd 	bl	8000288 <__aeabi_dsub>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	4680      	mov	r8, r0
 800ccd4:	4689      	mov	r9, r1
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	4639      	mov	r1, r7
 800ccda:	f7f3 fad5 	bl	8000288 <__aeabi_dsub>
 800ccde:	a3a2      	add	r3, pc, #648	@ (adr r3, 800cf68 <__ieee754_rem_pio2+0x2f0>)
 800cce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce4:	f7f3 fad0 	bl	8000288 <__aeabi_dsub>
 800cce8:	e9c4 8900 	strd	r8, r9, [r4]
 800ccec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ccf0:	2501      	movs	r5, #1
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	b00d      	add	sp, #52	@ 0x34
 800ccf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfa:	a39d      	add	r3, pc, #628	@ (adr r3, 800cf70 <__ieee754_rem_pio2+0x2f8>)
 800ccfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd00:	f7f3 fac2 	bl	8000288 <__aeabi_dsub>
 800cd04:	a39c      	add	r3, pc, #624	@ (adr r3, 800cf78 <__ieee754_rem_pio2+0x300>)
 800cd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0a:	4606      	mov	r6, r0
 800cd0c:	460f      	mov	r7, r1
 800cd0e:	f7f3 fabb 	bl	8000288 <__aeabi_dsub>
 800cd12:	4602      	mov	r2, r0
 800cd14:	460b      	mov	r3, r1
 800cd16:	4680      	mov	r8, r0
 800cd18:	4689      	mov	r9, r1
 800cd1a:	4630      	mov	r0, r6
 800cd1c:	4639      	mov	r1, r7
 800cd1e:	f7f3 fab3 	bl	8000288 <__aeabi_dsub>
 800cd22:	a395      	add	r3, pc, #596	@ (adr r3, 800cf78 <__ieee754_rem_pio2+0x300>)
 800cd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd28:	e7dc      	b.n	800cce4 <__ieee754_rem_pio2+0x6c>
 800cd2a:	f7f3 faaf 	bl	800028c <__adddf3>
 800cd2e:	45a8      	cmp	r8, r5
 800cd30:	4606      	mov	r6, r0
 800cd32:	460f      	mov	r7, r1
 800cd34:	d018      	beq.n	800cd68 <__ieee754_rem_pio2+0xf0>
 800cd36:	a38c      	add	r3, pc, #560	@ (adr r3, 800cf68 <__ieee754_rem_pio2+0x2f0>)
 800cd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3c:	f7f3 faa6 	bl	800028c <__adddf3>
 800cd40:	4602      	mov	r2, r0
 800cd42:	460b      	mov	r3, r1
 800cd44:	4680      	mov	r8, r0
 800cd46:	4689      	mov	r9, r1
 800cd48:	4630      	mov	r0, r6
 800cd4a:	4639      	mov	r1, r7
 800cd4c:	f7f3 fa9c 	bl	8000288 <__aeabi_dsub>
 800cd50:	a385      	add	r3, pc, #532	@ (adr r3, 800cf68 <__ieee754_rem_pio2+0x2f0>)
 800cd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd56:	f7f3 fa99 	bl	800028c <__adddf3>
 800cd5a:	f04f 35ff 	mov.w	r5, #4294967295
 800cd5e:	e9c4 8900 	strd	r8, r9, [r4]
 800cd62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cd66:	e7c4      	b.n	800ccf2 <__ieee754_rem_pio2+0x7a>
 800cd68:	a381      	add	r3, pc, #516	@ (adr r3, 800cf70 <__ieee754_rem_pio2+0x2f8>)
 800cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6e:	f7f3 fa8d 	bl	800028c <__adddf3>
 800cd72:	a381      	add	r3, pc, #516	@ (adr r3, 800cf78 <__ieee754_rem_pio2+0x300>)
 800cd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd78:	4606      	mov	r6, r0
 800cd7a:	460f      	mov	r7, r1
 800cd7c:	f7f3 fa86 	bl	800028c <__adddf3>
 800cd80:	4602      	mov	r2, r0
 800cd82:	460b      	mov	r3, r1
 800cd84:	4680      	mov	r8, r0
 800cd86:	4689      	mov	r9, r1
 800cd88:	4630      	mov	r0, r6
 800cd8a:	4639      	mov	r1, r7
 800cd8c:	f7f3 fa7c 	bl	8000288 <__aeabi_dsub>
 800cd90:	a379      	add	r3, pc, #484	@ (adr r3, 800cf78 <__ieee754_rem_pio2+0x300>)
 800cd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd96:	e7de      	b.n	800cd56 <__ieee754_rem_pio2+0xde>
 800cd98:	4b82      	ldr	r3, [pc, #520]	@ (800cfa4 <__ieee754_rem_pio2+0x32c>)
 800cd9a:	4598      	cmp	r8, r3
 800cd9c:	f200 80d1 	bhi.w	800cf42 <__ieee754_rem_pio2+0x2ca>
 800cda0:	f000 f966 	bl	800d070 <fabs>
 800cda4:	ec57 6b10 	vmov	r6, r7, d0
 800cda8:	a375      	add	r3, pc, #468	@ (adr r3, 800cf80 <__ieee754_rem_pio2+0x308>)
 800cdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdae:	4630      	mov	r0, r6
 800cdb0:	4639      	mov	r1, r7
 800cdb2:	f7f3 fc21 	bl	80005f8 <__aeabi_dmul>
 800cdb6:	4b7c      	ldr	r3, [pc, #496]	@ (800cfa8 <__ieee754_rem_pio2+0x330>)
 800cdb8:	2200      	movs	r2, #0
 800cdba:	f7f3 fa67 	bl	800028c <__adddf3>
 800cdbe:	f7f3 fecb 	bl	8000b58 <__aeabi_d2iz>
 800cdc2:	4605      	mov	r5, r0
 800cdc4:	f7f3 fbae 	bl	8000524 <__aeabi_i2d>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	460b      	mov	r3, r1
 800cdcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cdd0:	a363      	add	r3, pc, #396	@ (adr r3, 800cf60 <__ieee754_rem_pio2+0x2e8>)
 800cdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd6:	f7f3 fc0f 	bl	80005f8 <__aeabi_dmul>
 800cdda:	4602      	mov	r2, r0
 800cddc:	460b      	mov	r3, r1
 800cdde:	4630      	mov	r0, r6
 800cde0:	4639      	mov	r1, r7
 800cde2:	f7f3 fa51 	bl	8000288 <__aeabi_dsub>
 800cde6:	a360      	add	r3, pc, #384	@ (adr r3, 800cf68 <__ieee754_rem_pio2+0x2f0>)
 800cde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdec:	4682      	mov	sl, r0
 800cdee:	468b      	mov	fp, r1
 800cdf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdf4:	f7f3 fc00 	bl	80005f8 <__aeabi_dmul>
 800cdf8:	2d1f      	cmp	r5, #31
 800cdfa:	4606      	mov	r6, r0
 800cdfc:	460f      	mov	r7, r1
 800cdfe:	dc0c      	bgt.n	800ce1a <__ieee754_rem_pio2+0x1a2>
 800ce00:	4b6a      	ldr	r3, [pc, #424]	@ (800cfac <__ieee754_rem_pio2+0x334>)
 800ce02:	1e6a      	subs	r2, r5, #1
 800ce04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce08:	4543      	cmp	r3, r8
 800ce0a:	d006      	beq.n	800ce1a <__ieee754_rem_pio2+0x1a2>
 800ce0c:	4632      	mov	r2, r6
 800ce0e:	463b      	mov	r3, r7
 800ce10:	4650      	mov	r0, sl
 800ce12:	4659      	mov	r1, fp
 800ce14:	f7f3 fa38 	bl	8000288 <__aeabi_dsub>
 800ce18:	e00e      	b.n	800ce38 <__ieee754_rem_pio2+0x1c0>
 800ce1a:	463b      	mov	r3, r7
 800ce1c:	4632      	mov	r2, r6
 800ce1e:	4650      	mov	r0, sl
 800ce20:	4659      	mov	r1, fp
 800ce22:	f7f3 fa31 	bl	8000288 <__aeabi_dsub>
 800ce26:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ce2a:	9305      	str	r3, [sp, #20]
 800ce2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ce30:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ce34:	2b10      	cmp	r3, #16
 800ce36:	dc02      	bgt.n	800ce3e <__ieee754_rem_pio2+0x1c6>
 800ce38:	e9c4 0100 	strd	r0, r1, [r4]
 800ce3c:	e039      	b.n	800ceb2 <__ieee754_rem_pio2+0x23a>
 800ce3e:	a34c      	add	r3, pc, #304	@ (adr r3, 800cf70 <__ieee754_rem_pio2+0x2f8>)
 800ce40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce48:	f7f3 fbd6 	bl	80005f8 <__aeabi_dmul>
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	460f      	mov	r7, r1
 800ce50:	4602      	mov	r2, r0
 800ce52:	460b      	mov	r3, r1
 800ce54:	4650      	mov	r0, sl
 800ce56:	4659      	mov	r1, fp
 800ce58:	f7f3 fa16 	bl	8000288 <__aeabi_dsub>
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	460b      	mov	r3, r1
 800ce60:	4680      	mov	r8, r0
 800ce62:	4689      	mov	r9, r1
 800ce64:	4650      	mov	r0, sl
 800ce66:	4659      	mov	r1, fp
 800ce68:	f7f3 fa0e 	bl	8000288 <__aeabi_dsub>
 800ce6c:	4632      	mov	r2, r6
 800ce6e:	463b      	mov	r3, r7
 800ce70:	f7f3 fa0a 	bl	8000288 <__aeabi_dsub>
 800ce74:	a340      	add	r3, pc, #256	@ (adr r3, 800cf78 <__ieee754_rem_pio2+0x300>)
 800ce76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce7a:	4606      	mov	r6, r0
 800ce7c:	460f      	mov	r7, r1
 800ce7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce82:	f7f3 fbb9 	bl	80005f8 <__aeabi_dmul>
 800ce86:	4632      	mov	r2, r6
 800ce88:	463b      	mov	r3, r7
 800ce8a:	f7f3 f9fd 	bl	8000288 <__aeabi_dsub>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	460b      	mov	r3, r1
 800ce92:	4606      	mov	r6, r0
 800ce94:	460f      	mov	r7, r1
 800ce96:	4640      	mov	r0, r8
 800ce98:	4649      	mov	r1, r9
 800ce9a:	f7f3 f9f5 	bl	8000288 <__aeabi_dsub>
 800ce9e:	9a05      	ldr	r2, [sp, #20]
 800cea0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cea4:	1ad3      	subs	r3, r2, r3
 800cea6:	2b31      	cmp	r3, #49	@ 0x31
 800cea8:	dc20      	bgt.n	800ceec <__ieee754_rem_pio2+0x274>
 800ceaa:	e9c4 0100 	strd	r0, r1, [r4]
 800ceae:	46c2      	mov	sl, r8
 800ceb0:	46cb      	mov	fp, r9
 800ceb2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ceb6:	4650      	mov	r0, sl
 800ceb8:	4642      	mov	r2, r8
 800ceba:	464b      	mov	r3, r9
 800cebc:	4659      	mov	r1, fp
 800cebe:	f7f3 f9e3 	bl	8000288 <__aeabi_dsub>
 800cec2:	463b      	mov	r3, r7
 800cec4:	4632      	mov	r2, r6
 800cec6:	f7f3 f9df 	bl	8000288 <__aeabi_dsub>
 800ceca:	9b04      	ldr	r3, [sp, #16]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ced2:	f6bf af0e 	bge.w	800ccf2 <__ieee754_rem_pio2+0x7a>
 800ced6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ceda:	6063      	str	r3, [r4, #4]
 800cedc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cee0:	f8c4 8000 	str.w	r8, [r4]
 800cee4:	60a0      	str	r0, [r4, #8]
 800cee6:	60e3      	str	r3, [r4, #12]
 800cee8:	426d      	negs	r5, r5
 800ceea:	e702      	b.n	800ccf2 <__ieee754_rem_pio2+0x7a>
 800ceec:	a326      	add	r3, pc, #152	@ (adr r3, 800cf88 <__ieee754_rem_pio2+0x310>)
 800ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cef6:	f7f3 fb7f 	bl	80005f8 <__aeabi_dmul>
 800cefa:	4606      	mov	r6, r0
 800cefc:	460f      	mov	r7, r1
 800cefe:	4602      	mov	r2, r0
 800cf00:	460b      	mov	r3, r1
 800cf02:	4640      	mov	r0, r8
 800cf04:	4649      	mov	r1, r9
 800cf06:	f7f3 f9bf 	bl	8000288 <__aeabi_dsub>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	4682      	mov	sl, r0
 800cf10:	468b      	mov	fp, r1
 800cf12:	4640      	mov	r0, r8
 800cf14:	4649      	mov	r1, r9
 800cf16:	f7f3 f9b7 	bl	8000288 <__aeabi_dsub>
 800cf1a:	4632      	mov	r2, r6
 800cf1c:	463b      	mov	r3, r7
 800cf1e:	f7f3 f9b3 	bl	8000288 <__aeabi_dsub>
 800cf22:	a31b      	add	r3, pc, #108	@ (adr r3, 800cf90 <__ieee754_rem_pio2+0x318>)
 800cf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf28:	4606      	mov	r6, r0
 800cf2a:	460f      	mov	r7, r1
 800cf2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf30:	f7f3 fb62 	bl	80005f8 <__aeabi_dmul>
 800cf34:	4632      	mov	r2, r6
 800cf36:	463b      	mov	r3, r7
 800cf38:	f7f3 f9a6 	bl	8000288 <__aeabi_dsub>
 800cf3c:	4606      	mov	r6, r0
 800cf3e:	460f      	mov	r7, r1
 800cf40:	e764      	b.n	800ce0c <__ieee754_rem_pio2+0x194>
 800cf42:	4b1b      	ldr	r3, [pc, #108]	@ (800cfb0 <__ieee754_rem_pio2+0x338>)
 800cf44:	4598      	cmp	r8, r3
 800cf46:	d935      	bls.n	800cfb4 <__ieee754_rem_pio2+0x33c>
 800cf48:	4632      	mov	r2, r6
 800cf4a:	463b      	mov	r3, r7
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	4639      	mov	r1, r7
 800cf50:	f7f3 f99a 	bl	8000288 <__aeabi_dsub>
 800cf54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cf58:	e9c4 0100 	strd	r0, r1, [r4]
 800cf5c:	e69e      	b.n	800cc9c <__ieee754_rem_pio2+0x24>
 800cf5e:	bf00      	nop
 800cf60:	54400000 	.word	0x54400000
 800cf64:	3ff921fb 	.word	0x3ff921fb
 800cf68:	1a626331 	.word	0x1a626331
 800cf6c:	3dd0b461 	.word	0x3dd0b461
 800cf70:	1a600000 	.word	0x1a600000
 800cf74:	3dd0b461 	.word	0x3dd0b461
 800cf78:	2e037073 	.word	0x2e037073
 800cf7c:	3ba3198a 	.word	0x3ba3198a
 800cf80:	6dc9c883 	.word	0x6dc9c883
 800cf84:	3fe45f30 	.word	0x3fe45f30
 800cf88:	2e000000 	.word	0x2e000000
 800cf8c:	3ba3198a 	.word	0x3ba3198a
 800cf90:	252049c1 	.word	0x252049c1
 800cf94:	397b839a 	.word	0x397b839a
 800cf98:	3fe921fb 	.word	0x3fe921fb
 800cf9c:	4002d97b 	.word	0x4002d97b
 800cfa0:	3ff921fb 	.word	0x3ff921fb
 800cfa4:	413921fb 	.word	0x413921fb
 800cfa8:	3fe00000 	.word	0x3fe00000
 800cfac:	0800df14 	.word	0x0800df14
 800cfb0:	7fefffff 	.word	0x7fefffff
 800cfb4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800cfb8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800cfbc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800cfc0:	4630      	mov	r0, r6
 800cfc2:	460f      	mov	r7, r1
 800cfc4:	f7f3 fdc8 	bl	8000b58 <__aeabi_d2iz>
 800cfc8:	f7f3 faac 	bl	8000524 <__aeabi_i2d>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	460b      	mov	r3, r1
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	4639      	mov	r1, r7
 800cfd4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cfd8:	f7f3 f956 	bl	8000288 <__aeabi_dsub>
 800cfdc:	4b22      	ldr	r3, [pc, #136]	@ (800d068 <__ieee754_rem_pio2+0x3f0>)
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f7f3 fb0a 	bl	80005f8 <__aeabi_dmul>
 800cfe4:	460f      	mov	r7, r1
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	f7f3 fdb6 	bl	8000b58 <__aeabi_d2iz>
 800cfec:	f7f3 fa9a 	bl	8000524 <__aeabi_i2d>
 800cff0:	4602      	mov	r2, r0
 800cff2:	460b      	mov	r3, r1
 800cff4:	4630      	mov	r0, r6
 800cff6:	4639      	mov	r1, r7
 800cff8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cffc:	f7f3 f944 	bl	8000288 <__aeabi_dsub>
 800d000:	4b19      	ldr	r3, [pc, #100]	@ (800d068 <__ieee754_rem_pio2+0x3f0>)
 800d002:	2200      	movs	r2, #0
 800d004:	f7f3 faf8 	bl	80005f8 <__aeabi_dmul>
 800d008:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800d00c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800d010:	f04f 0803 	mov.w	r8, #3
 800d014:	2600      	movs	r6, #0
 800d016:	2700      	movs	r7, #0
 800d018:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d01c:	4632      	mov	r2, r6
 800d01e:	463b      	mov	r3, r7
 800d020:	46c2      	mov	sl, r8
 800d022:	f108 38ff 	add.w	r8, r8, #4294967295
 800d026:	f7f3 fd4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	d1f4      	bne.n	800d018 <__ieee754_rem_pio2+0x3a0>
 800d02e:	4b0f      	ldr	r3, [pc, #60]	@ (800d06c <__ieee754_rem_pio2+0x3f4>)
 800d030:	9301      	str	r3, [sp, #4]
 800d032:	2302      	movs	r3, #2
 800d034:	9300      	str	r3, [sp, #0]
 800d036:	462a      	mov	r2, r5
 800d038:	4653      	mov	r3, sl
 800d03a:	4621      	mov	r1, r4
 800d03c:	a806      	add	r0, sp, #24
 800d03e:	f000 f81f 	bl	800d080 <__kernel_rem_pio2>
 800d042:	9b04      	ldr	r3, [sp, #16]
 800d044:	2b00      	cmp	r3, #0
 800d046:	4605      	mov	r5, r0
 800d048:	f6bf ae53 	bge.w	800ccf2 <__ieee754_rem_pio2+0x7a>
 800d04c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800d050:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d054:	e9c4 2300 	strd	r2, r3, [r4]
 800d058:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800d05c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d060:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d064:	e740      	b.n	800cee8 <__ieee754_rem_pio2+0x270>
 800d066:	bf00      	nop
 800d068:	41700000 	.word	0x41700000
 800d06c:	0800df94 	.word	0x0800df94

0800d070 <fabs>:
 800d070:	ec51 0b10 	vmov	r0, r1, d0
 800d074:	4602      	mov	r2, r0
 800d076:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d07a:	ec43 2b10 	vmov	d0, r2, r3
 800d07e:	4770      	bx	lr

0800d080 <__kernel_rem_pio2>:
 800d080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d084:	ed2d 8b02 	vpush	{d8}
 800d088:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800d08c:	f112 0f14 	cmn.w	r2, #20
 800d090:	9306      	str	r3, [sp, #24]
 800d092:	9104      	str	r1, [sp, #16]
 800d094:	4bbe      	ldr	r3, [pc, #760]	@ (800d390 <__kernel_rem_pio2+0x310>)
 800d096:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800d098:	9008      	str	r0, [sp, #32]
 800d09a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d09e:	9300      	str	r3, [sp, #0]
 800d0a0:	9b06      	ldr	r3, [sp, #24]
 800d0a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d0a6:	bfa8      	it	ge
 800d0a8:	1ed4      	subge	r4, r2, #3
 800d0aa:	9305      	str	r3, [sp, #20]
 800d0ac:	bfb2      	itee	lt
 800d0ae:	2400      	movlt	r4, #0
 800d0b0:	2318      	movge	r3, #24
 800d0b2:	fb94 f4f3 	sdivge	r4, r4, r3
 800d0b6:	f06f 0317 	mvn.w	r3, #23
 800d0ba:	fb04 3303 	mla	r3, r4, r3, r3
 800d0be:	eb03 0b02 	add.w	fp, r3, r2
 800d0c2:	9b00      	ldr	r3, [sp, #0]
 800d0c4:	9a05      	ldr	r2, [sp, #20]
 800d0c6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800d380 <__kernel_rem_pio2+0x300>
 800d0ca:	eb03 0802 	add.w	r8, r3, r2
 800d0ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d0d0:	1aa7      	subs	r7, r4, r2
 800d0d2:	ae20      	add	r6, sp, #128	@ 0x80
 800d0d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d0d8:	2500      	movs	r5, #0
 800d0da:	4545      	cmp	r5, r8
 800d0dc:	dd13      	ble.n	800d106 <__kernel_rem_pio2+0x86>
 800d0de:	9b06      	ldr	r3, [sp, #24]
 800d0e0:	aa20      	add	r2, sp, #128	@ 0x80
 800d0e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d0e6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800d0ea:	f04f 0800 	mov.w	r8, #0
 800d0ee:	9b00      	ldr	r3, [sp, #0]
 800d0f0:	4598      	cmp	r8, r3
 800d0f2:	dc31      	bgt.n	800d158 <__kernel_rem_pio2+0xd8>
 800d0f4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800d380 <__kernel_rem_pio2+0x300>
 800d0f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d0fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d100:	462f      	mov	r7, r5
 800d102:	2600      	movs	r6, #0
 800d104:	e01b      	b.n	800d13e <__kernel_rem_pio2+0xbe>
 800d106:	42ef      	cmn	r7, r5
 800d108:	d407      	bmi.n	800d11a <__kernel_rem_pio2+0x9a>
 800d10a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d10e:	f7f3 fa09 	bl	8000524 <__aeabi_i2d>
 800d112:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d116:	3501      	adds	r5, #1
 800d118:	e7df      	b.n	800d0da <__kernel_rem_pio2+0x5a>
 800d11a:	ec51 0b18 	vmov	r0, r1, d8
 800d11e:	e7f8      	b.n	800d112 <__kernel_rem_pio2+0x92>
 800d120:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d124:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d128:	f7f3 fa66 	bl	80005f8 <__aeabi_dmul>
 800d12c:	4602      	mov	r2, r0
 800d12e:	460b      	mov	r3, r1
 800d130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d134:	f7f3 f8aa 	bl	800028c <__adddf3>
 800d138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d13c:	3601      	adds	r6, #1
 800d13e:	9b05      	ldr	r3, [sp, #20]
 800d140:	429e      	cmp	r6, r3
 800d142:	f1a7 0708 	sub.w	r7, r7, #8
 800d146:	ddeb      	ble.n	800d120 <__kernel_rem_pio2+0xa0>
 800d148:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d14c:	f108 0801 	add.w	r8, r8, #1
 800d150:	ecaa 7b02 	vstmia	sl!, {d7}
 800d154:	3508      	adds	r5, #8
 800d156:	e7ca      	b.n	800d0ee <__kernel_rem_pio2+0x6e>
 800d158:	9b00      	ldr	r3, [sp, #0]
 800d15a:	f8dd 8000 	ldr.w	r8, [sp]
 800d15e:	aa0c      	add	r2, sp, #48	@ 0x30
 800d160:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d164:	930a      	str	r3, [sp, #40]	@ 0x28
 800d166:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d168:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d16c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d16e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800d172:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d174:	ab98      	add	r3, sp, #608	@ 0x260
 800d176:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d17a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800d17e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d182:	ac0c      	add	r4, sp, #48	@ 0x30
 800d184:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d186:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800d18a:	46a1      	mov	r9, r4
 800d18c:	46c2      	mov	sl, r8
 800d18e:	f1ba 0f00 	cmp.w	sl, #0
 800d192:	f1a5 0508 	sub.w	r5, r5, #8
 800d196:	dc77      	bgt.n	800d288 <__kernel_rem_pio2+0x208>
 800d198:	4658      	mov	r0, fp
 800d19a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800d19e:	f000 fac7 	bl	800d730 <scalbn>
 800d1a2:	ec57 6b10 	vmov	r6, r7, d0
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	4639      	mov	r1, r7
 800d1b0:	f7f3 fa22 	bl	80005f8 <__aeabi_dmul>
 800d1b4:	ec41 0b10 	vmov	d0, r0, r1
 800d1b8:	f000 fb3a 	bl	800d830 <floor>
 800d1bc:	4b75      	ldr	r3, [pc, #468]	@ (800d394 <__kernel_rem_pio2+0x314>)
 800d1be:	ec51 0b10 	vmov	r0, r1, d0
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f7f3 fa18 	bl	80005f8 <__aeabi_dmul>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	460b      	mov	r3, r1
 800d1cc:	4630      	mov	r0, r6
 800d1ce:	4639      	mov	r1, r7
 800d1d0:	f7f3 f85a 	bl	8000288 <__aeabi_dsub>
 800d1d4:	460f      	mov	r7, r1
 800d1d6:	4606      	mov	r6, r0
 800d1d8:	f7f3 fcbe 	bl	8000b58 <__aeabi_d2iz>
 800d1dc:	9002      	str	r0, [sp, #8]
 800d1de:	f7f3 f9a1 	bl	8000524 <__aeabi_i2d>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	f7f3 f84d 	bl	8000288 <__aeabi_dsub>
 800d1ee:	f1bb 0f00 	cmp.w	fp, #0
 800d1f2:	4606      	mov	r6, r0
 800d1f4:	460f      	mov	r7, r1
 800d1f6:	dd6c      	ble.n	800d2d2 <__kernel_rem_pio2+0x252>
 800d1f8:	f108 31ff 	add.w	r1, r8, #4294967295
 800d1fc:	ab0c      	add	r3, sp, #48	@ 0x30
 800d1fe:	9d02      	ldr	r5, [sp, #8]
 800d200:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d204:	f1cb 0018 	rsb	r0, fp, #24
 800d208:	fa43 f200 	asr.w	r2, r3, r0
 800d20c:	4415      	add	r5, r2
 800d20e:	4082      	lsls	r2, r0
 800d210:	1a9b      	subs	r3, r3, r2
 800d212:	aa0c      	add	r2, sp, #48	@ 0x30
 800d214:	9502      	str	r5, [sp, #8]
 800d216:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d21a:	f1cb 0217 	rsb	r2, fp, #23
 800d21e:	fa43 f902 	asr.w	r9, r3, r2
 800d222:	f1b9 0f00 	cmp.w	r9, #0
 800d226:	dd64      	ble.n	800d2f2 <__kernel_rem_pio2+0x272>
 800d228:	9b02      	ldr	r3, [sp, #8]
 800d22a:	2200      	movs	r2, #0
 800d22c:	3301      	adds	r3, #1
 800d22e:	9302      	str	r3, [sp, #8]
 800d230:	4615      	mov	r5, r2
 800d232:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800d236:	4590      	cmp	r8, r2
 800d238:	f300 80b8 	bgt.w	800d3ac <__kernel_rem_pio2+0x32c>
 800d23c:	f1bb 0f00 	cmp.w	fp, #0
 800d240:	dd07      	ble.n	800d252 <__kernel_rem_pio2+0x1d2>
 800d242:	f1bb 0f01 	cmp.w	fp, #1
 800d246:	f000 80bf 	beq.w	800d3c8 <__kernel_rem_pio2+0x348>
 800d24a:	f1bb 0f02 	cmp.w	fp, #2
 800d24e:	f000 80c6 	beq.w	800d3de <__kernel_rem_pio2+0x35e>
 800d252:	f1b9 0f02 	cmp.w	r9, #2
 800d256:	d14c      	bne.n	800d2f2 <__kernel_rem_pio2+0x272>
 800d258:	4632      	mov	r2, r6
 800d25a:	463b      	mov	r3, r7
 800d25c:	494e      	ldr	r1, [pc, #312]	@ (800d398 <__kernel_rem_pio2+0x318>)
 800d25e:	2000      	movs	r0, #0
 800d260:	f7f3 f812 	bl	8000288 <__aeabi_dsub>
 800d264:	4606      	mov	r6, r0
 800d266:	460f      	mov	r7, r1
 800d268:	2d00      	cmp	r5, #0
 800d26a:	d042      	beq.n	800d2f2 <__kernel_rem_pio2+0x272>
 800d26c:	4658      	mov	r0, fp
 800d26e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800d388 <__kernel_rem_pio2+0x308>
 800d272:	f000 fa5d 	bl	800d730 <scalbn>
 800d276:	4630      	mov	r0, r6
 800d278:	4639      	mov	r1, r7
 800d27a:	ec53 2b10 	vmov	r2, r3, d0
 800d27e:	f7f3 f803 	bl	8000288 <__aeabi_dsub>
 800d282:	4606      	mov	r6, r0
 800d284:	460f      	mov	r7, r1
 800d286:	e034      	b.n	800d2f2 <__kernel_rem_pio2+0x272>
 800d288:	4b44      	ldr	r3, [pc, #272]	@ (800d39c <__kernel_rem_pio2+0x31c>)
 800d28a:	2200      	movs	r2, #0
 800d28c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d290:	f7f3 f9b2 	bl	80005f8 <__aeabi_dmul>
 800d294:	f7f3 fc60 	bl	8000b58 <__aeabi_d2iz>
 800d298:	f7f3 f944 	bl	8000524 <__aeabi_i2d>
 800d29c:	4b40      	ldr	r3, [pc, #256]	@ (800d3a0 <__kernel_rem_pio2+0x320>)
 800d29e:	2200      	movs	r2, #0
 800d2a0:	4606      	mov	r6, r0
 800d2a2:	460f      	mov	r7, r1
 800d2a4:	f7f3 f9a8 	bl	80005f8 <__aeabi_dmul>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2b0:	f7f2 ffea 	bl	8000288 <__aeabi_dsub>
 800d2b4:	f7f3 fc50 	bl	8000b58 <__aeabi_d2iz>
 800d2b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d2bc:	f849 0b04 	str.w	r0, [r9], #4
 800d2c0:	4639      	mov	r1, r7
 800d2c2:	4630      	mov	r0, r6
 800d2c4:	f7f2 ffe2 	bl	800028c <__adddf3>
 800d2c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2d0:	e75d      	b.n	800d18e <__kernel_rem_pio2+0x10e>
 800d2d2:	d107      	bne.n	800d2e4 <__kernel_rem_pio2+0x264>
 800d2d4:	f108 33ff 	add.w	r3, r8, #4294967295
 800d2d8:	aa0c      	add	r2, sp, #48	@ 0x30
 800d2da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2de:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800d2e2:	e79e      	b.n	800d222 <__kernel_rem_pio2+0x1a2>
 800d2e4:	4b2f      	ldr	r3, [pc, #188]	@ (800d3a4 <__kernel_rem_pio2+0x324>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	f7f3 fc0c 	bl	8000b04 <__aeabi_dcmpge>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	d143      	bne.n	800d378 <__kernel_rem_pio2+0x2f8>
 800d2f0:	4681      	mov	r9, r0
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	4639      	mov	r1, r7
 800d2fa:	f7f3 fbe5 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2fe:	2800      	cmp	r0, #0
 800d300:	f000 80bf 	beq.w	800d482 <__kernel_rem_pio2+0x402>
 800d304:	f108 33ff 	add.w	r3, r8, #4294967295
 800d308:	2200      	movs	r2, #0
 800d30a:	9900      	ldr	r1, [sp, #0]
 800d30c:	428b      	cmp	r3, r1
 800d30e:	da6e      	bge.n	800d3ee <__kernel_rem_pio2+0x36e>
 800d310:	2a00      	cmp	r2, #0
 800d312:	f000 8089 	beq.w	800d428 <__kernel_rem_pio2+0x3a8>
 800d316:	f108 38ff 	add.w	r8, r8, #4294967295
 800d31a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d31c:	f1ab 0b18 	sub.w	fp, fp, #24
 800d320:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d0f6      	beq.n	800d316 <__kernel_rem_pio2+0x296>
 800d328:	4658      	mov	r0, fp
 800d32a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800d388 <__kernel_rem_pio2+0x308>
 800d32e:	f000 f9ff 	bl	800d730 <scalbn>
 800d332:	f108 0301 	add.w	r3, r8, #1
 800d336:	00da      	lsls	r2, r3, #3
 800d338:	9205      	str	r2, [sp, #20]
 800d33a:	ec55 4b10 	vmov	r4, r5, d0
 800d33e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800d340:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800d39c <__kernel_rem_pio2+0x31c>
 800d344:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800d348:	4646      	mov	r6, r8
 800d34a:	f04f 0a00 	mov.w	sl, #0
 800d34e:	2e00      	cmp	r6, #0
 800d350:	f280 80cf 	bge.w	800d4f2 <__kernel_rem_pio2+0x472>
 800d354:	4644      	mov	r4, r8
 800d356:	2c00      	cmp	r4, #0
 800d358:	f2c0 80fd 	blt.w	800d556 <__kernel_rem_pio2+0x4d6>
 800d35c:	4b12      	ldr	r3, [pc, #72]	@ (800d3a8 <__kernel_rem_pio2+0x328>)
 800d35e:	461f      	mov	r7, r3
 800d360:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d362:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d366:	9306      	str	r3, [sp, #24]
 800d368:	f04f 0a00 	mov.w	sl, #0
 800d36c:	f04f 0b00 	mov.w	fp, #0
 800d370:	2600      	movs	r6, #0
 800d372:	eba8 0504 	sub.w	r5, r8, r4
 800d376:	e0e2      	b.n	800d53e <__kernel_rem_pio2+0x4be>
 800d378:	f04f 0902 	mov.w	r9, #2
 800d37c:	e754      	b.n	800d228 <__kernel_rem_pio2+0x1a8>
 800d37e:	bf00      	nop
	...
 800d38c:	3ff00000 	.word	0x3ff00000
 800d390:	0800e0e0 	.word	0x0800e0e0
 800d394:	40200000 	.word	0x40200000
 800d398:	3ff00000 	.word	0x3ff00000
 800d39c:	3e700000 	.word	0x3e700000
 800d3a0:	41700000 	.word	0x41700000
 800d3a4:	3fe00000 	.word	0x3fe00000
 800d3a8:	0800e0a0 	.word	0x0800e0a0
 800d3ac:	f854 3b04 	ldr.w	r3, [r4], #4
 800d3b0:	b945      	cbnz	r5, 800d3c4 <__kernel_rem_pio2+0x344>
 800d3b2:	b123      	cbz	r3, 800d3be <__kernel_rem_pio2+0x33e>
 800d3b4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800d3b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3bc:	2301      	movs	r3, #1
 800d3be:	3201      	adds	r2, #1
 800d3c0:	461d      	mov	r5, r3
 800d3c2:	e738      	b.n	800d236 <__kernel_rem_pio2+0x1b6>
 800d3c4:	1acb      	subs	r3, r1, r3
 800d3c6:	e7f7      	b.n	800d3b8 <__kernel_rem_pio2+0x338>
 800d3c8:	f108 32ff 	add.w	r2, r8, #4294967295
 800d3cc:	ab0c      	add	r3, sp, #48	@ 0x30
 800d3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d3d6:	a90c      	add	r1, sp, #48	@ 0x30
 800d3d8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d3dc:	e739      	b.n	800d252 <__kernel_rem_pio2+0x1d2>
 800d3de:	f108 32ff 	add.w	r2, r8, #4294967295
 800d3e2:	ab0c      	add	r3, sp, #48	@ 0x30
 800d3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d3ec:	e7f3      	b.n	800d3d6 <__kernel_rem_pio2+0x356>
 800d3ee:	a90c      	add	r1, sp, #48	@ 0x30
 800d3f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	430a      	orrs	r2, r1
 800d3f8:	e787      	b.n	800d30a <__kernel_rem_pio2+0x28a>
 800d3fa:	3401      	adds	r4, #1
 800d3fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d400:	2a00      	cmp	r2, #0
 800d402:	d0fa      	beq.n	800d3fa <__kernel_rem_pio2+0x37a>
 800d404:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d406:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d40a:	eb0d 0503 	add.w	r5, sp, r3
 800d40e:	9b06      	ldr	r3, [sp, #24]
 800d410:	aa20      	add	r2, sp, #128	@ 0x80
 800d412:	4443      	add	r3, r8
 800d414:	f108 0701 	add.w	r7, r8, #1
 800d418:	3d98      	subs	r5, #152	@ 0x98
 800d41a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800d41e:	4444      	add	r4, r8
 800d420:	42bc      	cmp	r4, r7
 800d422:	da04      	bge.n	800d42e <__kernel_rem_pio2+0x3ae>
 800d424:	46a0      	mov	r8, r4
 800d426:	e6a2      	b.n	800d16e <__kernel_rem_pio2+0xee>
 800d428:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d42a:	2401      	movs	r4, #1
 800d42c:	e7e6      	b.n	800d3fc <__kernel_rem_pio2+0x37c>
 800d42e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d430:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d434:	f7f3 f876 	bl	8000524 <__aeabi_i2d>
 800d438:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800d700 <__kernel_rem_pio2+0x680>
 800d43c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d440:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d444:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d448:	46b2      	mov	sl, r6
 800d44a:	f04f 0800 	mov.w	r8, #0
 800d44e:	9b05      	ldr	r3, [sp, #20]
 800d450:	4598      	cmp	r8, r3
 800d452:	dd05      	ble.n	800d460 <__kernel_rem_pio2+0x3e0>
 800d454:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d458:	3701      	adds	r7, #1
 800d45a:	eca5 7b02 	vstmia	r5!, {d7}
 800d45e:	e7df      	b.n	800d420 <__kernel_rem_pio2+0x3a0>
 800d460:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800d464:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d468:	f7f3 f8c6 	bl	80005f8 <__aeabi_dmul>
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d474:	f7f2 ff0a 	bl	800028c <__adddf3>
 800d478:	f108 0801 	add.w	r8, r8, #1
 800d47c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d480:	e7e5      	b.n	800d44e <__kernel_rem_pio2+0x3ce>
 800d482:	f1cb 0000 	rsb	r0, fp, #0
 800d486:	ec47 6b10 	vmov	d0, r6, r7
 800d48a:	f000 f951 	bl	800d730 <scalbn>
 800d48e:	ec55 4b10 	vmov	r4, r5, d0
 800d492:	4b9d      	ldr	r3, [pc, #628]	@ (800d708 <__kernel_rem_pio2+0x688>)
 800d494:	2200      	movs	r2, #0
 800d496:	4620      	mov	r0, r4
 800d498:	4629      	mov	r1, r5
 800d49a:	f7f3 fb33 	bl	8000b04 <__aeabi_dcmpge>
 800d49e:	b300      	cbz	r0, 800d4e2 <__kernel_rem_pio2+0x462>
 800d4a0:	4b9a      	ldr	r3, [pc, #616]	@ (800d70c <__kernel_rem_pio2+0x68c>)
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	4629      	mov	r1, r5
 800d4a8:	f7f3 f8a6 	bl	80005f8 <__aeabi_dmul>
 800d4ac:	f7f3 fb54 	bl	8000b58 <__aeabi_d2iz>
 800d4b0:	4606      	mov	r6, r0
 800d4b2:	f7f3 f837 	bl	8000524 <__aeabi_i2d>
 800d4b6:	4b94      	ldr	r3, [pc, #592]	@ (800d708 <__kernel_rem_pio2+0x688>)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f7f3 f89d 	bl	80005f8 <__aeabi_dmul>
 800d4be:	460b      	mov	r3, r1
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	4629      	mov	r1, r5
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f7f2 fedf 	bl	8000288 <__aeabi_dsub>
 800d4ca:	f7f3 fb45 	bl	8000b58 <__aeabi_d2iz>
 800d4ce:	ab0c      	add	r3, sp, #48	@ 0x30
 800d4d0:	f10b 0b18 	add.w	fp, fp, #24
 800d4d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d4d8:	f108 0801 	add.w	r8, r8, #1
 800d4dc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800d4e0:	e722      	b.n	800d328 <__kernel_rem_pio2+0x2a8>
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	4629      	mov	r1, r5
 800d4e6:	f7f3 fb37 	bl	8000b58 <__aeabi_d2iz>
 800d4ea:	ab0c      	add	r3, sp, #48	@ 0x30
 800d4ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d4f0:	e71a      	b.n	800d328 <__kernel_rem_pio2+0x2a8>
 800d4f2:	ab0c      	add	r3, sp, #48	@ 0x30
 800d4f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d4f8:	f7f3 f814 	bl	8000524 <__aeabi_i2d>
 800d4fc:	4622      	mov	r2, r4
 800d4fe:	462b      	mov	r3, r5
 800d500:	f7f3 f87a 	bl	80005f8 <__aeabi_dmul>
 800d504:	4652      	mov	r2, sl
 800d506:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800d50a:	465b      	mov	r3, fp
 800d50c:	4620      	mov	r0, r4
 800d50e:	4629      	mov	r1, r5
 800d510:	f7f3 f872 	bl	80005f8 <__aeabi_dmul>
 800d514:	3e01      	subs	r6, #1
 800d516:	4604      	mov	r4, r0
 800d518:	460d      	mov	r5, r1
 800d51a:	e718      	b.n	800d34e <__kernel_rem_pio2+0x2ce>
 800d51c:	9906      	ldr	r1, [sp, #24]
 800d51e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800d522:	9106      	str	r1, [sp, #24]
 800d524:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800d528:	f7f3 f866 	bl	80005f8 <__aeabi_dmul>
 800d52c:	4602      	mov	r2, r0
 800d52e:	460b      	mov	r3, r1
 800d530:	4650      	mov	r0, sl
 800d532:	4659      	mov	r1, fp
 800d534:	f7f2 feaa 	bl	800028c <__adddf3>
 800d538:	3601      	adds	r6, #1
 800d53a:	4682      	mov	sl, r0
 800d53c:	468b      	mov	fp, r1
 800d53e:	9b00      	ldr	r3, [sp, #0]
 800d540:	429e      	cmp	r6, r3
 800d542:	dc01      	bgt.n	800d548 <__kernel_rem_pio2+0x4c8>
 800d544:	42b5      	cmp	r5, r6
 800d546:	dae9      	bge.n	800d51c <__kernel_rem_pio2+0x49c>
 800d548:	ab48      	add	r3, sp, #288	@ 0x120
 800d54a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d54e:	e9c5 ab00 	strd	sl, fp, [r5]
 800d552:	3c01      	subs	r4, #1
 800d554:	e6ff      	b.n	800d356 <__kernel_rem_pio2+0x2d6>
 800d556:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d558:	2b02      	cmp	r3, #2
 800d55a:	dc0b      	bgt.n	800d574 <__kernel_rem_pio2+0x4f4>
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	dc39      	bgt.n	800d5d4 <__kernel_rem_pio2+0x554>
 800d560:	d05d      	beq.n	800d61e <__kernel_rem_pio2+0x59e>
 800d562:	9b02      	ldr	r3, [sp, #8]
 800d564:	f003 0007 	and.w	r0, r3, #7
 800d568:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800d56c:	ecbd 8b02 	vpop	{d8}
 800d570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d574:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d576:	2b03      	cmp	r3, #3
 800d578:	d1f3      	bne.n	800d562 <__kernel_rem_pio2+0x4e2>
 800d57a:	9b05      	ldr	r3, [sp, #20]
 800d57c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d580:	eb0d 0403 	add.w	r4, sp, r3
 800d584:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800d588:	4625      	mov	r5, r4
 800d58a:	46c2      	mov	sl, r8
 800d58c:	f1ba 0f00 	cmp.w	sl, #0
 800d590:	f1a5 0508 	sub.w	r5, r5, #8
 800d594:	dc6b      	bgt.n	800d66e <__kernel_rem_pio2+0x5ee>
 800d596:	4645      	mov	r5, r8
 800d598:	2d01      	cmp	r5, #1
 800d59a:	f1a4 0408 	sub.w	r4, r4, #8
 800d59e:	f300 8087 	bgt.w	800d6b0 <__kernel_rem_pio2+0x630>
 800d5a2:	9c05      	ldr	r4, [sp, #20]
 800d5a4:	ab48      	add	r3, sp, #288	@ 0x120
 800d5a6:	441c      	add	r4, r3
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	2100      	movs	r1, #0
 800d5ac:	f1b8 0f01 	cmp.w	r8, #1
 800d5b0:	f300 809c 	bgt.w	800d6ec <__kernel_rem_pio2+0x66c>
 800d5b4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800d5b8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800d5bc:	f1b9 0f00 	cmp.w	r9, #0
 800d5c0:	f040 80a6 	bne.w	800d710 <__kernel_rem_pio2+0x690>
 800d5c4:	9b04      	ldr	r3, [sp, #16]
 800d5c6:	e9c3 7800 	strd	r7, r8, [r3]
 800d5ca:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d5ce:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d5d2:	e7c6      	b.n	800d562 <__kernel_rem_pio2+0x4e2>
 800d5d4:	9d05      	ldr	r5, [sp, #20]
 800d5d6:	ab48      	add	r3, sp, #288	@ 0x120
 800d5d8:	441d      	add	r5, r3
 800d5da:	4644      	mov	r4, r8
 800d5dc:	2000      	movs	r0, #0
 800d5de:	2100      	movs	r1, #0
 800d5e0:	2c00      	cmp	r4, #0
 800d5e2:	da35      	bge.n	800d650 <__kernel_rem_pio2+0x5d0>
 800d5e4:	f1b9 0f00 	cmp.w	r9, #0
 800d5e8:	d038      	beq.n	800d65c <__kernel_rem_pio2+0x5dc>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d5f0:	9c04      	ldr	r4, [sp, #16]
 800d5f2:	e9c4 2300 	strd	r2, r3, [r4]
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800d5fe:	f7f2 fe43 	bl	8000288 <__aeabi_dsub>
 800d602:	ad4a      	add	r5, sp, #296	@ 0x128
 800d604:	2401      	movs	r4, #1
 800d606:	45a0      	cmp	r8, r4
 800d608:	da2b      	bge.n	800d662 <__kernel_rem_pio2+0x5e2>
 800d60a:	f1b9 0f00 	cmp.w	r9, #0
 800d60e:	d002      	beq.n	800d616 <__kernel_rem_pio2+0x596>
 800d610:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d614:	4619      	mov	r1, r3
 800d616:	9b04      	ldr	r3, [sp, #16]
 800d618:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d61c:	e7a1      	b.n	800d562 <__kernel_rem_pio2+0x4e2>
 800d61e:	9c05      	ldr	r4, [sp, #20]
 800d620:	ab48      	add	r3, sp, #288	@ 0x120
 800d622:	441c      	add	r4, r3
 800d624:	2000      	movs	r0, #0
 800d626:	2100      	movs	r1, #0
 800d628:	f1b8 0f00 	cmp.w	r8, #0
 800d62c:	da09      	bge.n	800d642 <__kernel_rem_pio2+0x5c2>
 800d62e:	f1b9 0f00 	cmp.w	r9, #0
 800d632:	d002      	beq.n	800d63a <__kernel_rem_pio2+0x5ba>
 800d634:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d638:	4619      	mov	r1, r3
 800d63a:	9b04      	ldr	r3, [sp, #16]
 800d63c:	e9c3 0100 	strd	r0, r1, [r3]
 800d640:	e78f      	b.n	800d562 <__kernel_rem_pio2+0x4e2>
 800d642:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d646:	f7f2 fe21 	bl	800028c <__adddf3>
 800d64a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d64e:	e7eb      	b.n	800d628 <__kernel_rem_pio2+0x5a8>
 800d650:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d654:	f7f2 fe1a 	bl	800028c <__adddf3>
 800d658:	3c01      	subs	r4, #1
 800d65a:	e7c1      	b.n	800d5e0 <__kernel_rem_pio2+0x560>
 800d65c:	4602      	mov	r2, r0
 800d65e:	460b      	mov	r3, r1
 800d660:	e7c6      	b.n	800d5f0 <__kernel_rem_pio2+0x570>
 800d662:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d666:	f7f2 fe11 	bl	800028c <__adddf3>
 800d66a:	3401      	adds	r4, #1
 800d66c:	e7cb      	b.n	800d606 <__kernel_rem_pio2+0x586>
 800d66e:	ed95 7b00 	vldr	d7, [r5]
 800d672:	ed8d 7b00 	vstr	d7, [sp]
 800d676:	ed95 7b02 	vldr	d7, [r5, #8]
 800d67a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d67e:	ec53 2b17 	vmov	r2, r3, d7
 800d682:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d686:	f7f2 fe01 	bl	800028c <__adddf3>
 800d68a:	4602      	mov	r2, r0
 800d68c:	460b      	mov	r3, r1
 800d68e:	4606      	mov	r6, r0
 800d690:	460f      	mov	r7, r1
 800d692:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d696:	f7f2 fdf7 	bl	8000288 <__aeabi_dsub>
 800d69a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d69e:	f7f2 fdf5 	bl	800028c <__adddf3>
 800d6a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d6a6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800d6aa:	e9c5 6700 	strd	r6, r7, [r5]
 800d6ae:	e76d      	b.n	800d58c <__kernel_rem_pio2+0x50c>
 800d6b0:	ed94 7b00 	vldr	d7, [r4]
 800d6b4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800d6b8:	ec51 0b17 	vmov	r0, r1, d7
 800d6bc:	4652      	mov	r2, sl
 800d6be:	465b      	mov	r3, fp
 800d6c0:	ed8d 7b00 	vstr	d7, [sp]
 800d6c4:	f7f2 fde2 	bl	800028c <__adddf3>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	4606      	mov	r6, r0
 800d6ce:	460f      	mov	r7, r1
 800d6d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6d4:	f7f2 fdd8 	bl	8000288 <__aeabi_dsub>
 800d6d8:	4652      	mov	r2, sl
 800d6da:	465b      	mov	r3, fp
 800d6dc:	f7f2 fdd6 	bl	800028c <__adddf3>
 800d6e0:	3d01      	subs	r5, #1
 800d6e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d6e6:	e9c4 6700 	strd	r6, r7, [r4]
 800d6ea:	e755      	b.n	800d598 <__kernel_rem_pio2+0x518>
 800d6ec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d6f0:	f7f2 fdcc 	bl	800028c <__adddf3>
 800d6f4:	f108 38ff 	add.w	r8, r8, #4294967295
 800d6f8:	e758      	b.n	800d5ac <__kernel_rem_pio2+0x52c>
 800d6fa:	bf00      	nop
 800d6fc:	f3af 8000 	nop.w
	...
 800d708:	41700000 	.word	0x41700000
 800d70c:	3e700000 	.word	0x3e700000
 800d710:	9b04      	ldr	r3, [sp, #16]
 800d712:	9a04      	ldr	r2, [sp, #16]
 800d714:	601f      	str	r7, [r3, #0]
 800d716:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800d71a:	605c      	str	r4, [r3, #4]
 800d71c:	609d      	str	r5, [r3, #8]
 800d71e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d722:	60d3      	str	r3, [r2, #12]
 800d724:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d728:	6110      	str	r0, [r2, #16]
 800d72a:	6153      	str	r3, [r2, #20]
 800d72c:	e719      	b.n	800d562 <__kernel_rem_pio2+0x4e2>
 800d72e:	bf00      	nop

0800d730 <scalbn>:
 800d730:	b570      	push	{r4, r5, r6, lr}
 800d732:	ec55 4b10 	vmov	r4, r5, d0
 800d736:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d73a:	4606      	mov	r6, r0
 800d73c:	462b      	mov	r3, r5
 800d73e:	b991      	cbnz	r1, 800d766 <scalbn+0x36>
 800d740:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d744:	4323      	orrs	r3, r4
 800d746:	d03d      	beq.n	800d7c4 <scalbn+0x94>
 800d748:	4b35      	ldr	r3, [pc, #212]	@ (800d820 <scalbn+0xf0>)
 800d74a:	4620      	mov	r0, r4
 800d74c:	4629      	mov	r1, r5
 800d74e:	2200      	movs	r2, #0
 800d750:	f7f2 ff52 	bl	80005f8 <__aeabi_dmul>
 800d754:	4b33      	ldr	r3, [pc, #204]	@ (800d824 <scalbn+0xf4>)
 800d756:	429e      	cmp	r6, r3
 800d758:	4604      	mov	r4, r0
 800d75a:	460d      	mov	r5, r1
 800d75c:	da0f      	bge.n	800d77e <scalbn+0x4e>
 800d75e:	a328      	add	r3, pc, #160	@ (adr r3, 800d800 <scalbn+0xd0>)
 800d760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d764:	e01e      	b.n	800d7a4 <scalbn+0x74>
 800d766:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d76a:	4291      	cmp	r1, r2
 800d76c:	d10b      	bne.n	800d786 <scalbn+0x56>
 800d76e:	4622      	mov	r2, r4
 800d770:	4620      	mov	r0, r4
 800d772:	4629      	mov	r1, r5
 800d774:	f7f2 fd8a 	bl	800028c <__adddf3>
 800d778:	4604      	mov	r4, r0
 800d77a:	460d      	mov	r5, r1
 800d77c:	e022      	b.n	800d7c4 <scalbn+0x94>
 800d77e:	460b      	mov	r3, r1
 800d780:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d784:	3936      	subs	r1, #54	@ 0x36
 800d786:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d78a:	4296      	cmp	r6, r2
 800d78c:	dd0d      	ble.n	800d7aa <scalbn+0x7a>
 800d78e:	2d00      	cmp	r5, #0
 800d790:	a11d      	add	r1, pc, #116	@ (adr r1, 800d808 <scalbn+0xd8>)
 800d792:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d796:	da02      	bge.n	800d79e <scalbn+0x6e>
 800d798:	a11d      	add	r1, pc, #116	@ (adr r1, 800d810 <scalbn+0xe0>)
 800d79a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d79e:	a31a      	add	r3, pc, #104	@ (adr r3, 800d808 <scalbn+0xd8>)
 800d7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a4:	f7f2 ff28 	bl	80005f8 <__aeabi_dmul>
 800d7a8:	e7e6      	b.n	800d778 <scalbn+0x48>
 800d7aa:	1872      	adds	r2, r6, r1
 800d7ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d7b0:	428a      	cmp	r2, r1
 800d7b2:	dcec      	bgt.n	800d78e <scalbn+0x5e>
 800d7b4:	2a00      	cmp	r2, #0
 800d7b6:	dd08      	ble.n	800d7ca <scalbn+0x9a>
 800d7b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d7bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d7c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d7c4:	ec45 4b10 	vmov	d0, r4, r5
 800d7c8:	bd70      	pop	{r4, r5, r6, pc}
 800d7ca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d7ce:	da08      	bge.n	800d7e2 <scalbn+0xb2>
 800d7d0:	2d00      	cmp	r5, #0
 800d7d2:	a10b      	add	r1, pc, #44	@ (adr r1, 800d800 <scalbn+0xd0>)
 800d7d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7d8:	dac1      	bge.n	800d75e <scalbn+0x2e>
 800d7da:	a10f      	add	r1, pc, #60	@ (adr r1, 800d818 <scalbn+0xe8>)
 800d7dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7e0:	e7bd      	b.n	800d75e <scalbn+0x2e>
 800d7e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d7e6:	3236      	adds	r2, #54	@ 0x36
 800d7e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d7ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d7f0:	4620      	mov	r0, r4
 800d7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d828 <scalbn+0xf8>)
 800d7f4:	4629      	mov	r1, r5
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	e7d4      	b.n	800d7a4 <scalbn+0x74>
 800d7fa:	bf00      	nop
 800d7fc:	f3af 8000 	nop.w
 800d800:	c2f8f359 	.word	0xc2f8f359
 800d804:	01a56e1f 	.word	0x01a56e1f
 800d808:	8800759c 	.word	0x8800759c
 800d80c:	7e37e43c 	.word	0x7e37e43c
 800d810:	8800759c 	.word	0x8800759c
 800d814:	fe37e43c 	.word	0xfe37e43c
 800d818:	c2f8f359 	.word	0xc2f8f359
 800d81c:	81a56e1f 	.word	0x81a56e1f
 800d820:	43500000 	.word	0x43500000
 800d824:	ffff3cb0 	.word	0xffff3cb0
 800d828:	3c900000 	.word	0x3c900000
 800d82c:	00000000 	.word	0x00000000

0800d830 <floor>:
 800d830:	ec51 0b10 	vmov	r0, r1, d0
 800d834:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d83c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800d840:	2e13      	cmp	r6, #19
 800d842:	460c      	mov	r4, r1
 800d844:	4605      	mov	r5, r0
 800d846:	4680      	mov	r8, r0
 800d848:	dc34      	bgt.n	800d8b4 <floor+0x84>
 800d84a:	2e00      	cmp	r6, #0
 800d84c:	da17      	bge.n	800d87e <floor+0x4e>
 800d84e:	a332      	add	r3, pc, #200	@ (adr r3, 800d918 <floor+0xe8>)
 800d850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d854:	f7f2 fd1a 	bl	800028c <__adddf3>
 800d858:	2200      	movs	r2, #0
 800d85a:	2300      	movs	r3, #0
 800d85c:	f7f3 f95c 	bl	8000b18 <__aeabi_dcmpgt>
 800d860:	b150      	cbz	r0, 800d878 <floor+0x48>
 800d862:	2c00      	cmp	r4, #0
 800d864:	da55      	bge.n	800d912 <floor+0xe2>
 800d866:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d86a:	432c      	orrs	r4, r5
 800d86c:	2500      	movs	r5, #0
 800d86e:	42ac      	cmp	r4, r5
 800d870:	4c2b      	ldr	r4, [pc, #172]	@ (800d920 <floor+0xf0>)
 800d872:	bf08      	it	eq
 800d874:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d878:	4621      	mov	r1, r4
 800d87a:	4628      	mov	r0, r5
 800d87c:	e023      	b.n	800d8c6 <floor+0x96>
 800d87e:	4f29      	ldr	r7, [pc, #164]	@ (800d924 <floor+0xf4>)
 800d880:	4137      	asrs	r7, r6
 800d882:	ea01 0307 	and.w	r3, r1, r7
 800d886:	4303      	orrs	r3, r0
 800d888:	d01d      	beq.n	800d8c6 <floor+0x96>
 800d88a:	a323      	add	r3, pc, #140	@ (adr r3, 800d918 <floor+0xe8>)
 800d88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d890:	f7f2 fcfc 	bl	800028c <__adddf3>
 800d894:	2200      	movs	r2, #0
 800d896:	2300      	movs	r3, #0
 800d898:	f7f3 f93e 	bl	8000b18 <__aeabi_dcmpgt>
 800d89c:	2800      	cmp	r0, #0
 800d89e:	d0eb      	beq.n	800d878 <floor+0x48>
 800d8a0:	2c00      	cmp	r4, #0
 800d8a2:	bfbe      	ittt	lt
 800d8a4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d8a8:	4133      	asrlt	r3, r6
 800d8aa:	18e4      	addlt	r4, r4, r3
 800d8ac:	ea24 0407 	bic.w	r4, r4, r7
 800d8b0:	2500      	movs	r5, #0
 800d8b2:	e7e1      	b.n	800d878 <floor+0x48>
 800d8b4:	2e33      	cmp	r6, #51	@ 0x33
 800d8b6:	dd0a      	ble.n	800d8ce <floor+0x9e>
 800d8b8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d8bc:	d103      	bne.n	800d8c6 <floor+0x96>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	f7f2 fce3 	bl	800028c <__adddf3>
 800d8c6:	ec41 0b10 	vmov	d0, r0, r1
 800d8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ce:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d8d2:	f04f 37ff 	mov.w	r7, #4294967295
 800d8d6:	40df      	lsrs	r7, r3
 800d8d8:	4207      	tst	r7, r0
 800d8da:	d0f4      	beq.n	800d8c6 <floor+0x96>
 800d8dc:	a30e      	add	r3, pc, #56	@ (adr r3, 800d918 <floor+0xe8>)
 800d8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e2:	f7f2 fcd3 	bl	800028c <__adddf3>
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	f7f3 f915 	bl	8000b18 <__aeabi_dcmpgt>
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	d0c2      	beq.n	800d878 <floor+0x48>
 800d8f2:	2c00      	cmp	r4, #0
 800d8f4:	da0a      	bge.n	800d90c <floor+0xdc>
 800d8f6:	2e14      	cmp	r6, #20
 800d8f8:	d101      	bne.n	800d8fe <floor+0xce>
 800d8fa:	3401      	adds	r4, #1
 800d8fc:	e006      	b.n	800d90c <floor+0xdc>
 800d8fe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d902:	2301      	movs	r3, #1
 800d904:	40b3      	lsls	r3, r6
 800d906:	441d      	add	r5, r3
 800d908:	4545      	cmp	r5, r8
 800d90a:	d3f6      	bcc.n	800d8fa <floor+0xca>
 800d90c:	ea25 0507 	bic.w	r5, r5, r7
 800d910:	e7b2      	b.n	800d878 <floor+0x48>
 800d912:	2500      	movs	r5, #0
 800d914:	462c      	mov	r4, r5
 800d916:	e7af      	b.n	800d878 <floor+0x48>
 800d918:	8800759c 	.word	0x8800759c
 800d91c:	7e37e43c 	.word	0x7e37e43c
 800d920:	bff00000 	.word	0xbff00000
 800d924:	000fffff 	.word	0x000fffff

0800d928 <_init>:
 800d928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d92a:	bf00      	nop
 800d92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d92e:	bc08      	pop	{r3}
 800d930:	469e      	mov	lr, r3
 800d932:	4770      	bx	lr

0800d934 <_fini>:
 800d934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d936:	bf00      	nop
 800d938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d93a:	bc08      	pop	{r3}
 800d93c:	469e      	mov	lr, r3
 800d93e:	4770      	bx	lr
