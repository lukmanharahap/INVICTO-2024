
R2_Farmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e30  08010dd0  08010dd0  00011dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c00  08011c00  000132b0  2**0
                  CONTENTS
  4 .ARM          00000008  08011c00  08011c00  00012c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c08  08011c08  000132b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c08  08011c08  00012c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011c0c  08011c0c  00012c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b0  20000000  08011c10  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000132b0  2**0
                  CONTENTS
 10 .bss          000005b4  200002b0  200002b0  000132b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000864  20000864  000132b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000132b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014fd7  00000000  00000000  000132e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cb0  00000000  00000000  000282b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  0002af68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ead  00000000  00000000  0002c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127c1  00000000  00000000  0002d09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005882  00000000  00000000  0003f85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000450e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000692c  00000000  00000000  00045124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0004ba50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b0 	.word	0x200002b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010db8 	.word	0x08010db8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b4 	.word	0x200002b4
 80001cc:	08010db8 	.word	0x08010db8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <motorDirection>:
        {GPIOD, GPIO_PIN_3, GPIOD, GPIO_PIN_4, TIM_CHANNEL_3, &htim2},		//9
        {GPIOB, GPIO_PIN_1, GPIOB, GPIO_PIN_0, TIM_CHANNEL_4, &htim2}		//10
};

void motorDirection(uint8_t motor, uint8_t direction)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
    Motor *currentMotor = &motors[motor - 1];
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <motorDirection+0x74>)
 8001002:	4413      	add	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
    GPIO_PinState dir1_state;
    GPIO_PinState dir2_state;
    switch (direction)
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d006      	beq.n	800101a <motorDirection+0x36>
 800100c:	2b02      	cmp	r3, #2
 800100e:	d109      	bne.n	8001024 <motorDirection+0x40>
    {
    case forward:
        dir1_state = GPIO_PIN_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_SET;
 8001014:	2301      	movs	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
        break;
 8001018:	e009      	b.n	800102e <motorDirection+0x4a>
    case backward:
        dir1_state = GPIO_PIN_SET;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	73bb      	strb	r3, [r7, #14]
        break;
 8001022:	e004      	b.n	800102e <motorDirection+0x4a>
    default:
        dir1_state = GPIO_PIN_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
        break;
 800102c:	bf00      	nop
    }
    HAL_GPIO_WritePin(currentMotor->dir1_port, currentMotor->dir1_pin, dir1_state);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	4619      	mov	r1, r3
 800103a:	f006 fc03 	bl	8007844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(currentMotor->dir2_port, currentMotor->dir2_pin, dir2_state);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	6898      	ldr	r0, [r3, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	899b      	ldrh	r3, [r3, #12]
 8001046:	7bba      	ldrb	r2, [r7, #14]
 8001048:	4619      	mov	r1, r3
 800104a:	f006 fbfb 	bl	8007844 <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000

0800105c <setMotorSpeed>:

void setMotorSpeed(uint8_t motor, double speed)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	ed87 0b00 	vstr	d0, [r7]
 8001068:	73fb      	strb	r3, [r7, #15]
    Motor *currentMotor = &motors[motor - 1];
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4a33      	ldr	r2, [pc, #204]	@ (8001144 <setMotorSpeed+0xe8>)
 8001078:	4413      	add	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
    if (speed > 0)
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001088:	f7ff fd46 	bl	8000b18 <__aeabi_dcmpgt>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <setMotorSpeed+0x42>
    {
        motorDirection(motor, forward);
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffa4 	bl	8000fe4 <motorDirection>
 800109c:	e01b      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else if (speed < 0)
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010aa:	f7ff fd17 	bl	8000adc <__aeabi_dcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <setMotorSpeed+0x70>
    {
        motorDirection(motor, backward);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2101      	movs	r1, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff93 	bl	8000fe4 <motorDirection>
        speed = -speed;
 80010be:	683c      	ldr	r4, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80010c6:	e9c7 4500 	strd	r4, r5, [r7]
 80010ca:	e004      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else
    {
        motorDirection(motor, stop);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff87 	bl	8000fe4 <motorDirection>
    }
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	7b9b      	ldrb	r3, [r3, #14]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <setMotorSpeed+0x96>
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	681c      	ldr	r4, [r3, #0]
 80010e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010e8:	f7ff fd5e 	bl	8000ba8 <__aeabi_d2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80010f0:	e024      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	7b9b      	ldrb	r3, [r3, #14]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d109      	bne.n	800110e <setMotorSpeed+0xb2>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800110c:	e016      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	7b9b      	ldrb	r3, [r3, #14]
 8001112:	2b08      	cmp	r3, #8
 8001114:	d109      	bne.n	800112a <setMotorSpeed+0xce>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001120:	f7ff fd42 	bl	8000ba8 <__aeabi_d2uiz>
 8001124:	4603      	mov	r3, r0
 8001126:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001128:	e008      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001134:	f7ff fd38 	bl	8000ba8 <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bdb0      	pop	{r4, r5, r7, pc}
 8001144:	20000000 	.word	0x20000000

08001148 <Inverse_Kinematics>:

void Inverse_Kinematics(double Vx, double Vy, double W)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b0b8      	sub	sp, #224	@ 0xe0
 800114c:	af00      	add	r7, sp, #0
 800114e:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
 8001152:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8001156:	ed87 2b18 	vstr	d2, [r7, #96]	@ 0x60
    double R = 7.6;
 800115a:	a3c5      	add	r3, pc, #788	@ (adr r3, 8001470 <Inverse_Kinematics+0x328>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
    double minThreshold = 1000;
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4bbf      	ldr	r3, [pc, #764]	@ (8001468 <Inverse_Kinematics+0x320>)
 800116a:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
    double wheelMaxSpeed = 5500;
 800116e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8001420 <Inverse_Kinematics+0x2d8>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double M1 = (-sin(M_PI_4) * Vx * 1.25 + cos(M_PI_4) * Vy - R * W);
 8001178:	a3ab      	add	r3, pc, #684	@ (adr r3, 8001428 <Inverse_Kinematics+0x2e0>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001182:	f7ff fa39 	bl	80005f8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4bb6      	ldr	r3, [pc, #728]	@ (800146c <Inverse_Kinematics+0x324>)
 8001194:	f7ff fa30 	bl	80005f8 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4614      	mov	r4, r2
 800119e:	461d      	mov	r5, r3
 80011a0:	a3a3      	add	r3, pc, #652	@ (adr r3, 8001430 <Inverse_Kinematics+0x2e8>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80011aa:	f7ff fa25 	bl	80005f8 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff f869 	bl	800028c <__adddf3>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4614      	mov	r4, r2
 80011c0:	461d      	mov	r5, r3
 80011c2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80011c6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80011ca:	f7ff fa15 	bl	80005f8 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4620      	mov	r0, r4
 80011d4:	4629      	mov	r1, r5
 80011d6:	f7ff f857 	bl	8000288 <__aeabi_dsub>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double M2 = (-sin(3 * M_PI_4) * Vx * 1.4 + cos(3 * M_PI_4) * Vy - R * W);
 80011e2:	a395      	add	r3, pc, #596	@ (adr r3, 8001438 <Inverse_Kinematics+0x2f0>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	a391      	add	r3, pc, #580	@ (adr r3, 8001440 <Inverse_Kinematics+0x2f8>)
 80011fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fe:	f7ff f9fb 	bl	80005f8 <__aeabi_dmul>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4614      	mov	r4, r2
 8001208:	461d      	mov	r5, r3
 800120a:	a387      	add	r3, pc, #540	@ (adr r3, 8001428 <Inverse_Kinematics+0x2e0>)
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001214:	f7ff f9f0 	bl	80005f8 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f834 	bl	800028c <__adddf3>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	461d      	mov	r5, r3
 800122c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001230:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001234:	f7ff f9e0 	bl	80005f8 <__aeabi_dmul>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4620      	mov	r0, r4
 800123e:	4629      	mov	r1, r5
 8001240:	f7ff f822 	bl	8000288 <__aeabi_dsub>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    double M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W); //0.952702703
 800124c:	a37e      	add	r3, pc, #504	@ (adr r3, 8001448 <Inverse_Kinematics+0x300>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001256:	f7ff f9cf 	bl	80005f8 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4614      	mov	r4, r2
 8001260:	461d      	mov	r5, r3
 8001262:	a37b      	add	r3, pc, #492	@ (adr r3, 8001450 <Inverse_Kinematics+0x308>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800126c:	f7ff f9c4 	bl	80005f8 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4620      	mov	r0, r4
 8001276:	4629      	mov	r1, r5
 8001278:	f7ff f808 	bl	800028c <__adddf3>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4614      	mov	r4, r2
 8001282:	461d      	mov	r5, r3
 8001284:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001288:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800128c:	f7ff f9b4 	bl	80005f8 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4620      	mov	r0, r4
 8001296:	4629      	mov	r1, r5
 8001298:	f7fe fff6 	bl	8000288 <__aeabi_dsub>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
    double M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W); // 0.893632381
 80012a4:	a36c      	add	r3, pc, #432	@ (adr r3, 8001458 <Inverse_Kinematics+0x310>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80012ae:	f7ff f9a3 	bl	80005f8 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	a369      	add	r3, pc, #420	@ (adr r3, 8001460 <Inverse_Kinematics+0x318>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80012c4:	f7ff f998 	bl	80005f8 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7fe ffdc 	bl	800028c <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4614      	mov	r4, r2
 80012da:	461d      	mov	r5, r3
 80012dc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80012e0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80012e4:	f7ff f988 	bl	80005f8 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4620      	mov	r0, r4
 80012ee:	4629      	mov	r1, r5
 80012f0:	f7fe ffca 	bl	8000288 <__aeabi_dsub>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0

    double maxM = fmax(fabs(M1), fmax(fabs(M2), fmax(fabs(M3), fabs(M4))));
 80012fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001300:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001306:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800130a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800130c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001310:	633b      	str	r3, [r7, #48]	@ 0x30
 8001312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001316:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800131a:	637b      	str	r3, [r7, #52]	@ 0x34
 800131c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001322:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001326:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800132a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800132c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001330:	623b      	str	r3, [r7, #32]
 8001332:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001336:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
 800133c:	ed97 1b08 	vldr	d1, [r7, #32]
 8001340:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001344:	f00e f88f 	bl	800f466 <fmax>
 8001348:	eeb0 7a40 	vmov.f32	s14, s0
 800134c:	eef0 7a60 	vmov.f32	s15, s1
 8001350:	eeb0 1a47 	vmov.f32	s2, s14
 8001354:	eef0 1a67 	vmov.f32	s3, s15
 8001358:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800135c:	f00e f883 	bl	800f466 <fmax>
 8001360:	eeb0 7a40 	vmov.f32	s14, s0
 8001364:	eef0 7a60 	vmov.f32	s15, s1
 8001368:	eeb0 1a47 	vmov.f32	s2, s14
 800136c:	eef0 1a67 	vmov.f32	s3, s15
 8001370:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001374:	f00e f877 	bl	800f466 <fmax>
 8001378:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0

    if (maxM > wheelMaxSpeed) {
 800137c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001380:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001384:	f7ff fbc8 	bl	8000b18 <__aeabi_dcmpgt>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d031      	beq.n	80013f2 <Inverse_Kinematics+0x2aa>
        double scale = wheelMaxSpeed / maxM;
 800138e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001392:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001396:	f7ff fa59 	bl	800084c <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        M1 *= scale;
 80013a2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013a6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80013aa:	f7ff f925 	bl	80005f8 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
        M2 *= scale;
 80013b6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013ba:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80013be:	f7ff f91b 	bl	80005f8 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
        M3 *= scale;
 80013ca:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80013d2:	f7ff f911 	bl	80005f8 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
        M4 *= scale;
 80013de:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013e2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80013e6:	f7ff f907 	bl	80005f8 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
    }

    double V1 = (fabs(M1) > minThreshold) ? M1 : (M1 < 0) ? -minThreshold : ((M1 > 0) ? minThreshold : 0);
 80013f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001406:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800140a:	f7ff fb67 	bl	8000adc <__aeabi_dcmplt>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d035      	beq.n	8001480 <Inverse_Kinematics+0x338>
 8001414:	ed97 7b36 	vldr	d7, [r7, #216]	@ 0xd8
 8001418:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800141c:	e058      	b.n	80014d0 <Inverse_Kinematics+0x388>
 800141e:	bf00      	nop
 8001420:	00000000 	.word	0x00000000
 8001424:	40b57c00 	.word	0x40b57c00
 8001428:	667f3bcc 	.word	0x667f3bcc
 800142c:	bfe6a09e 	.word	0xbfe6a09e
 8001430:	667f3bcd 	.word	0x667f3bcd
 8001434:	3fe6a09e 	.word	0x3fe6a09e
 8001438:	667f3bcd 	.word	0x667f3bcd
 800143c:	bfe6a09e 	.word	0xbfe6a09e
 8001440:	66666666 	.word	0x66666666
 8001444:	3ff66666 	.word	0x3ff66666
 8001448:	667f3bcc 	.word	0x667f3bcc
 800144c:	3fe6a09e 	.word	0x3fe6a09e
 8001450:	667f3bce 	.word	0x667f3bce
 8001454:	bfe6a09e 	.word	0xbfe6a09e
 8001458:	667f3bce 	.word	0x667f3bce
 800145c:	3fe6a09e 	.word	0x3fe6a09e
 8001460:	667f3bcb 	.word	0x667f3bcb
 8001464:	3fe6a09e 	.word	0x3fe6a09e
 8001468:	408f4000 	.word	0x408f4000
 800146c:	3ff40000 	.word	0x3ff40000
 8001470:	66666666 	.word	0x66666666
 8001474:	401e6666 	.word	0x401e6666
	...
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 800148c:	f7ff fb26 	bl	8000adc <__aeabi_dcmplt>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d008      	beq.n	80014a8 <Inverse_Kinematics+0x360>
 8001496:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800149a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800149c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80014a6:	e013      	b.n	80014d0 <Inverse_Kinematics+0x388>
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80014b4:	f7ff fb30 	bl	8000b18 <__aeabi_dcmpgt>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d004      	beq.n	80014c8 <Inverse_Kinematics+0x380>
 80014be:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 80014c2:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80014c6:	e003      	b.n	80014d0 <Inverse_Kinematics+0x388>
 80014c8:	ed1f 7b15 	vldr	d7, [pc, #-84]	@ 8001478 <Inverse_Kinematics+0x330>
 80014cc:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80014d0:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80014d4:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
    double V2 = (fabs(M2) > minThreshold) ? M2 : (M2 < 0) ? -minThreshold : ((M2 > 0) ? minThreshold : 0);
 80014d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80014e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014ec:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80014f0:	f7ff faf4 	bl	8000adc <__aeabi_dcmplt>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d004      	beq.n	8001504 <Inverse_Kinematics+0x3bc>
 80014fa:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 80014fe:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001502:	e027      	b.n	8001554 <Inverse_Kinematics+0x40c>
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001510:	f7ff fae4 	bl	8000adc <__aeabi_dcmplt>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <Inverse_Kinematics+0x3e4>
 800151a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800151e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001520:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001524:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001528:	657b      	str	r3, [r7, #84]	@ 0x54
 800152a:	e013      	b.n	8001554 <Inverse_Kinematics+0x40c>
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001538:	f7ff faee 	bl	8000b18 <__aeabi_dcmpgt>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d004      	beq.n	800154c <Inverse_Kinematics+0x404>
 8001542:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8001546:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 800154a:	e003      	b.n	8001554 <Inverse_Kinematics+0x40c>
 800154c:	ed1f 7b36 	vldr	d7, [pc, #-216]	@ 8001478 <Inverse_Kinematics+0x330>
 8001550:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001554:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001558:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    double V3 = (fabs(M3) > minThreshold) ? M3 : (M3 < 0) ? -minThreshold : ((M3 > 0) ? minThreshold : 0);
 800155c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001566:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001570:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001574:	f7ff fab2 	bl	8000adc <__aeabi_dcmplt>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d004      	beq.n	8001588 <Inverse_Kinematics+0x440>
 800157e:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 8001582:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 8001586:	e027      	b.n	80015d8 <Inverse_Kinematics+0x490>
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001594:	f7ff faa2 	bl	8000adc <__aeabi_dcmplt>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d008      	beq.n	80015b0 <Inverse_Kinematics+0x468>
 800159e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80015a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80015a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015ae:	e013      	b.n	80015d8 <Inverse_Kinematics+0x490>
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80015bc:	f7ff faac 	bl	8000b18 <__aeabi_dcmpgt>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d004      	beq.n	80015d0 <Inverse_Kinematics+0x488>
 80015c6:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 80015ca:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80015ce:	e003      	b.n	80015d8 <Inverse_Kinematics+0x490>
 80015d0:	ed1f 7b57 	vldr	d7, [pc, #-348]	@ 8001478 <Inverse_Kinematics+0x330>
 80015d4:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80015d8:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80015dc:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    double V4 = (fabs(M4) > minThreshold) ? M4 : (M4 < 0) ? -minThreshold : ((M4 > 0) ? minThreshold : 0);
 80015e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80015ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015f4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80015f8:	f7ff fa70 	bl	8000adc <__aeabi_dcmplt>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <Inverse_Kinematics+0x4c4>
 8001602:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 8001606:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 800160a:	e027      	b.n	800165c <Inverse_Kinematics+0x514>
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001618:	f7ff fa60 	bl	8000adc <__aeabi_dcmplt>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d008      	beq.n	8001634 <Inverse_Kinematics+0x4ec>
 8001622:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001626:	643b      	str	r3, [r7, #64]	@ 0x40
 8001628:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800162c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001630:	647b      	str	r3, [r7, #68]	@ 0x44
 8001632:	e013      	b.n	800165c <Inverse_Kinematics+0x514>
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001640:	f7ff fa6a 	bl	8000b18 <__aeabi_dcmpgt>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <Inverse_Kinematics+0x50c>
 800164a:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 800164e:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001652:	e003      	b.n	800165c <Inverse_Kinematics+0x514>
 8001654:	ed1f 7b78 	vldr	d7, [pc, #-480]	@ 8001478 <Inverse_Kinematics+0x330>
 8001658:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 800165c:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001660:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78

    setMotorSpeed(6, (int)V1);
 8001664:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001668:	f7ff fa76 	bl	8000b58 <__aeabi_d2iz>
 800166c:	4603      	mov	r3, r0
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff58 	bl	8000524 <__aeabi_i2d>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	ec43 2b10 	vmov	d0, r2, r3
 800167c:	2006      	movs	r0, #6
 800167e:	f7ff fced 	bl	800105c <setMotorSpeed>
    setMotorSpeed(5, (int)V2);
 8001682:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001686:	f7ff fa67 	bl	8000b58 <__aeabi_d2iz>
 800168a:	4603      	mov	r3, r0
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff49 	bl	8000524 <__aeabi_i2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	ec43 2b10 	vmov	d0, r2, r3
 800169a:	2005      	movs	r0, #5
 800169c:	f7ff fcde 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, (int)V3);
 80016a0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80016a4:	f7ff fa58 	bl	8000b58 <__aeabi_d2iz>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff3a 	bl	8000524 <__aeabi_i2d>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	ec43 2b10 	vmov	d0, r2, r3
 80016b8:	2004      	movs	r0, #4
 80016ba:	f7ff fccf 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, (int)V4);
 80016be:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80016c2:	f7ff fa49 	bl	8000b58 <__aeabi_d2iz>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff2b 	bl	8000524 <__aeabi_i2d>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	ec43 2b10 	vmov	d0, r2, r3
 80016d6:	2008      	movs	r0, #8
 80016d8:	f7ff fcc0 	bl	800105c <setMotorSpeed>
}
 80016dc:	bf00      	nop
 80016de:	37e0      	adds	r7, #224	@ 0xe0
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bdb0      	pop	{r4, r5, r7, pc}
 80016e4:	0000      	movs	r0, r0
	...

080016e8 <trying>:

void trying(double Vx, double Vy, double W, double desiredHeading, double KpH)
{
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b0c6      	sub	sp, #280	@ 0x118
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	ed87 0b20 	vstr	d0, [r7, #128]	@ 0x80
 80016f2:	ed87 1b1e 	vstr	d1, [r7, #120]	@ 0x78
 80016f6:	ed87 2b1c 	vstr	d2, [r7, #112]	@ 0x70
 80016fa:	ed87 3b1a 	vstr	d3, [r7, #104]	@ 0x68
 80016fe:	ed87 4b18 	vstr	d4, [r7, #96]	@ 0x60
	external_global currentPosition = odometry_eg();
 8001702:	f003 f9b1 	bl	8004a68 <odometry_eg>
 8001706:	eeb0 5a40 	vmov.f32	s10, s0
 800170a:	eef0 5a60 	vmov.f32	s11, s1
 800170e:	eeb0 6a41 	vmov.f32	s12, s2
 8001712:	eef0 6a61 	vmov.f32	s13, s3
 8001716:	eeb0 7a42 	vmov.f32	s14, s4
 800171a:	eef0 7a62 	vmov.f32	s15, s5
 800171e:	ed87 5b22 	vstr	d5, [r7, #136]	@ 0x88
 8001722:	ed87 6b24 	vstr	d6, [r7, #144]	@ 0x90
 8001726:	ed87 7b26 	vstr	d7, [r7, #152]	@ 0x98

    double R = 7.6;
 800172a:	a3c8      	add	r3, pc, #800	@ (adr r3, 8001a4c <trying+0x364>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
    double minThreshold = 1000;
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	4bbf      	ldr	r3, [pc, #764]	@ (8001a38 <trying+0x350>)
 800173a:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
    double wheelMaxSpeed = 5500;
 800173e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80019f0 <trying+0x308>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8

    // Read current heading
    double yaw = currentPosition.h;
 8001748:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800174c:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0

    // Calculate heading error
    double headingError = desiredHeading - yaw;
 8001750:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8001754:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001758:	f7fe fd96 	bl	8000288 <__aeabi_dsub>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    if (headingError > 180) headingError -= 360;
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4bb4      	ldr	r3, [pc, #720]	@ (8001a3c <trying+0x354>)
 800176a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800176e:	f7ff f9d3 	bl	8000b18 <__aeabi_dcmpgt>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00a      	beq.n	800178e <trying+0xa6>
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	4bb0      	ldr	r3, [pc, #704]	@ (8001a40 <trying+0x358>)
 800177e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001782:	f7fe fd81 	bl	8000288 <__aeabi_dsub>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    if (headingError < -180) headingError += 360;
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4bac      	ldr	r3, [pc, #688]	@ (8001a44 <trying+0x35c>)
 8001794:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001798:	f7ff f9a0 	bl	8000adc <__aeabi_dcmplt>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00a      	beq.n	80017b8 <trying+0xd0>
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	4ba6      	ldr	r3, [pc, #664]	@ (8001a40 <trying+0x358>)
 80017a8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80017ac:	f7fe fd6e 	bl	800028c <__adddf3>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110

    // Adjust rotational speed based on heading error
    W += KpH * headingError; // KpH is a heading correction gain
 80017b8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80017bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80017c0:	f7fe ff1a 	bl	80005f8 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80017cc:	f7fe fd5e 	bl	800028c <__adddf3>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    double M1 = (-sin(M_PI_4) * Vx * 1.25 + cos(M_PI_4) * Vy - R * W);
 80017d8:	a387      	add	r3, pc, #540	@ (adr r3, 80019f8 <trying+0x310>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80017e2:	f7fe ff09 	bl	80005f8 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	4b95      	ldr	r3, [pc, #596]	@ (8001a48 <trying+0x360>)
 80017f4:	f7fe ff00 	bl	80005f8 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4614      	mov	r4, r2
 80017fe:	461d      	mov	r5, r3
 8001800:	a37f      	add	r3, pc, #508	@ (adr r3, 8001a00 <trying+0x318>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800180a:	f7fe fef5 	bl	80005f8 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4620      	mov	r0, r4
 8001814:	4629      	mov	r1, r5
 8001816:	f7fe fd39 	bl	800028c <__adddf3>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4614      	mov	r4, r2
 8001820:	461d      	mov	r5, r3
 8001822:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001826:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 800182a:	f7fe fee5 	bl	80005f8 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4620      	mov	r0, r4
 8001834:	4629      	mov	r1, r5
 8001836:	f7fe fd27 	bl	8000288 <__aeabi_dsub>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
    double M2 = (-sin(3 * M_PI_4) * Vx * 1.4 + cos(3 * M_PI_4) * Vy - R * W);
 8001842:	a371      	add	r3, pc, #452	@ (adr r3, 8001a08 <trying+0x320>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800184c:	f7fe fed4 	bl	80005f8 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	a36d      	add	r3, pc, #436	@ (adr r3, 8001a10 <trying+0x328>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f7fe fecb 	bl	80005f8 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4614      	mov	r4, r2
 8001868:	461d      	mov	r5, r3
 800186a:	a363      	add	r3, pc, #396	@ (adr r3, 80019f8 <trying+0x310>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001874:	f7fe fec0 	bl	80005f8 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4620      	mov	r0, r4
 800187e:	4629      	mov	r1, r5
 8001880:	f7fe fd04 	bl	800028c <__adddf3>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4614      	mov	r4, r2
 800188a:	461d      	mov	r5, r3
 800188c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001890:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8001894:	f7fe feb0 	bl	80005f8 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4620      	mov	r0, r4
 800189e:	4629      	mov	r1, r5
 80018a0:	f7fe fcf2 	bl	8000288 <__aeabi_dsub>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
    double M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W);
 80018ac:	a35a      	add	r3, pc, #360	@ (adr r3, 8001a18 <trying+0x330>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80018b6:	f7fe fe9f 	bl	80005f8 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4614      	mov	r4, r2
 80018c0:	461d      	mov	r5, r3
 80018c2:	a357      	add	r3, pc, #348	@ (adr r3, 8001a20 <trying+0x338>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80018cc:	f7fe fe94 	bl	80005f8 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe fcd8 	bl	800028c <__adddf3>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4614      	mov	r4, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80018e8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80018ec:	f7fe fe84 	bl	80005f8 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fcc6 	bl	8000288 <__aeabi_dsub>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
    double M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W);
 8001904:	a348      	add	r3, pc, #288	@ (adr r3, 8001a28 <trying+0x340>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800190e:	f7fe fe73 	bl	80005f8 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4614      	mov	r4, r2
 8001918:	461d      	mov	r5, r3
 800191a:	a345      	add	r3, pc, #276	@ (adr r3, 8001a30 <trying+0x348>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001924:	f7fe fe68 	bl	80005f8 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4620      	mov	r0, r4
 800192e:	4629      	mov	r1, r5
 8001930:	f7fe fcac 	bl	800028c <__adddf3>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001940:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8001944:	f7fe fe58 	bl	80005f8 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4620      	mov	r0, r4
 800194e:	4629      	mov	r1, r5
 8001950:	f7fe fc9a 	bl	8000288 <__aeabi_dsub>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0

    double maxM = fmax(fabs(M1), fmax(fabs(M2), fmax(fabs(M3), fabs(M4))));
 800195c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001960:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001966:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800196a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800196c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001970:	633b      	str	r3, [r7, #48]	@ 0x30
 8001972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001976:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800197a:	637b      	str	r3, [r7, #52]	@ 0x34
 800197c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001980:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001986:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800198c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001990:	623b      	str	r3, [r7, #32]
 8001992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001996:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
 800199c:	ed97 1b08 	vldr	d1, [r7, #32]
 80019a0:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80019a4:	f00d fd5f 	bl	800f466 <fmax>
 80019a8:	eeb0 7a40 	vmov.f32	s14, s0
 80019ac:	eef0 7a60 	vmov.f32	s15, s1
 80019b0:	eeb0 1a47 	vmov.f32	s2, s14
 80019b4:	eef0 1a67 	vmov.f32	s3, s15
 80019b8:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80019bc:	f00d fd53 	bl	800f466 <fmax>
 80019c0:	eeb0 7a40 	vmov.f32	s14, s0
 80019c4:	eef0 7a60 	vmov.f32	s15, s1
 80019c8:	eeb0 1a47 	vmov.f32	s2, s14
 80019cc:	eef0 1a67 	vmov.f32	s3, s15
 80019d0:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80019d4:	f00d fd47 	bl	800f466 <fmax>
 80019d8:	ed87 0b32 	vstr	d0, [r7, #200]	@ 0xc8

    if (maxM > wheelMaxSpeed) {
 80019dc:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80019e0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80019e4:	f7ff f898 	bl	8000b18 <__aeabi_dcmpgt>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d068      	beq.n	8001ac0 <trying+0x3d8>
 80019ee:	e035      	b.n	8001a5c <trying+0x374>
 80019f0:	00000000 	.word	0x00000000
 80019f4:	40b57c00 	.word	0x40b57c00
 80019f8:	667f3bcc 	.word	0x667f3bcc
 80019fc:	bfe6a09e 	.word	0xbfe6a09e
 8001a00:	667f3bcd 	.word	0x667f3bcd
 8001a04:	3fe6a09e 	.word	0x3fe6a09e
 8001a08:	667f3bcd 	.word	0x667f3bcd
 8001a0c:	bfe6a09e 	.word	0xbfe6a09e
 8001a10:	66666666 	.word	0x66666666
 8001a14:	3ff66666 	.word	0x3ff66666
 8001a18:	667f3bcc 	.word	0x667f3bcc
 8001a1c:	3fe6a09e 	.word	0x3fe6a09e
 8001a20:	667f3bce 	.word	0x667f3bce
 8001a24:	bfe6a09e 	.word	0xbfe6a09e
 8001a28:	667f3bce 	.word	0x667f3bce
 8001a2c:	3fe6a09e 	.word	0x3fe6a09e
 8001a30:	667f3bcb 	.word	0x667f3bcb
 8001a34:	3fe6a09e 	.word	0x3fe6a09e
 8001a38:	408f4000 	.word	0x408f4000
 8001a3c:	40668000 	.word	0x40668000
 8001a40:	40768000 	.word	0x40768000
 8001a44:	c0668000 	.word	0xc0668000
 8001a48:	3ff40000 	.word	0x3ff40000
 8001a4c:	66666666 	.word	0x66666666
 8001a50:	401e6666 	.word	0x401e6666
	...
        double scale = wheelMaxSpeed / maxM;
 8001a5c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8001a60:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001a64:	f7fe fef2 	bl	800084c <__aeabi_ddiv>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
        M1 *= scale;
 8001a70:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001a74:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8001a78:	f7fe fdbe 	bl	80005f8 <__aeabi_dmul>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
        M2 *= scale;
 8001a84:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001a88:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8001a8c:	f7fe fdb4 	bl	80005f8 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
        M3 *= scale;
 8001a98:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001a9c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8001aa0:	f7fe fdaa 	bl	80005f8 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
        M4 *= scale;
 8001aac:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001ab0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8001ab4:	f7fe fda0 	bl	80005f8 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
    }

    double V1 = (fabs(M1) > minThreshold) ? M1 : (M1 < 0) ? -minThreshold : ((M1 > 0) ? minThreshold : 0);
 8001ac0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001aca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ace:	61fb      	str	r3, [r7, #28]
 8001ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001ad8:	f7ff f800 	bl	8000adc <__aeabi_dcmplt>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d004      	beq.n	8001aec <trying+0x404>
 8001ae2:	ed97 7b42 	vldr	d7, [r7, #264]	@ 0x108
 8001ae6:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8001aea:	e027      	b.n	8001b3c <trying+0x454>
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8001af8:	f7fe fff0 	bl	8000adc <__aeabi_dcmplt>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d008      	beq.n	8001b14 <trying+0x42c>
 8001b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b0c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b12:	e013      	b.n	8001b3c <trying+0x454>
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8001b20:	f7fe fffa 	bl	8000b18 <__aeabi_dcmpgt>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <trying+0x44c>
 8001b2a:	ed97 7b38 	vldr	d7, [r7, #224]	@ 0xe0
 8001b2e:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8001b32:	e003      	b.n	8001b3c <trying+0x454>
 8001b34:	ed1f 7b39 	vldr	d7, [pc, #-228]	@ 8001a54 <trying+0x36c>
 8001b38:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8001b3c:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8001b40:	ed87 7b2e 	vstr	d7, [r7, #184]	@ 0xb8
    double V2 = (fabs(M2) > minThreshold) ? M2 : (M2 < 0) ? -minThreshold : ((M2 > 0) ? minThreshold : 0);
 8001b44:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001b4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001b5c:	f7fe ffbe 	bl	8000adc <__aeabi_dcmplt>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <trying+0x488>
 8001b66:	ed97 7b40 	vldr	d7, [r7, #256]	@ 0x100
 8001b6a:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001b6e:	e027      	b.n	8001bc0 <trying+0x4d8>
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8001b7c:	f7fe ffae 	bl	8000adc <__aeabi_dcmplt>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d008      	beq.n	8001b98 <trying+0x4b0>
 8001b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b90:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001b94:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b96:	e013      	b.n	8001bc0 <trying+0x4d8>
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8001ba4:	f7fe ffb8 	bl	8000b18 <__aeabi_dcmpgt>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d004      	beq.n	8001bb8 <trying+0x4d0>
 8001bae:	ed97 7b38 	vldr	d7, [r7, #224]	@ 0xe0
 8001bb2:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001bb6:	e003      	b.n	8001bc0 <trying+0x4d8>
 8001bb8:	ed1f 7b5a 	vldr	d7, [pc, #-360]	@ 8001a54 <trying+0x36c>
 8001bbc:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001bc0:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001bc4:	ed87 7b2c 	vstr	d7, [r7, #176]	@ 0xb0
    double V3 = (fabs(M3) > minThreshold) ? M3 : (M3 < 0) ? -minThreshold : ((M3 > 0) ? minThreshold : 0);
 8001bc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001bd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001be0:	f7fe ff7c 	bl	8000adc <__aeabi_dcmplt>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d004      	beq.n	8001bf4 <trying+0x50c>
 8001bea:	ed97 7b3e 	vldr	d7, [r7, #248]	@ 0xf8
 8001bee:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 8001bf2:	e027      	b.n	8001c44 <trying+0x55c>
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8001c00:	f7fe ff6c 	bl	8000adc <__aeabi_dcmplt>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d008      	beq.n	8001c1c <trying+0x534>
 8001c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c14:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c1a:	e013      	b.n	8001c44 <trying+0x55c>
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8001c28:	f7fe ff76 	bl	8000b18 <__aeabi_dcmpgt>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d004      	beq.n	8001c3c <trying+0x554>
 8001c32:	ed97 7b38 	vldr	d7, [r7, #224]	@ 0xe0
 8001c36:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 8001c3a:	e003      	b.n	8001c44 <trying+0x55c>
 8001c3c:	ed1f 7b7b 	vldr	d7, [pc, #-492]	@ 8001a54 <trying+0x36c>
 8001c40:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 8001c44:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001c48:	ed87 7b2a 	vstr	d7, [r7, #168]	@ 0xa8
    double V4 = (fabs(M4) > minThreshold) ? M4 : (M4 < 0) ? -minThreshold : ((M4 > 0) ? minThreshold : 0);
 8001c4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001c64:	f7fe ff3a 	bl	8000adc <__aeabi_dcmplt>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d004      	beq.n	8001c78 <trying+0x590>
 8001c6e:	ed97 7b3c 	vldr	d7, [r7, #240]	@ 0xf0
 8001c72:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001c76:	e027      	b.n	8001cc8 <trying+0x5e0>
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8001c84:	f7fe ff2a 	bl	8000adc <__aeabi_dcmplt>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <trying+0x5b8>
 8001c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c92:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c98:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c9e:	e013      	b.n	8001cc8 <trying+0x5e0>
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8001cac:	f7fe ff34 	bl	8000b18 <__aeabi_dcmpgt>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d004      	beq.n	8001cc0 <trying+0x5d8>
 8001cb6:	ed97 7b38 	vldr	d7, [r7, #224]	@ 0xe0
 8001cba:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001cbe:	e003      	b.n	8001cc8 <trying+0x5e0>
 8001cc0:	ed1f 7b9c 	vldr	d7, [pc, #-624]	@ 8001a54 <trying+0x36c>
 8001cc4:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001cc8:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001ccc:	ed87 7b28 	vstr	d7, [r7, #160]	@ 0xa0

    setMotorSpeed(6, (int)V1);
 8001cd0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001cd4:	f7fe ff40 	bl	8000b58 <__aeabi_d2iz>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc22 	bl	8000524 <__aeabi_i2d>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	ec43 2b10 	vmov	d0, r2, r3
 8001ce8:	2006      	movs	r0, #6
 8001cea:	f7ff f9b7 	bl	800105c <setMotorSpeed>
    setMotorSpeed(5, (int)V2);
 8001cee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001cf2:	f7fe ff31 	bl	8000b58 <__aeabi_d2iz>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc13 	bl	8000524 <__aeabi_i2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	ec43 2b10 	vmov	d0, r2, r3
 8001d06:	2005      	movs	r0, #5
 8001d08:	f7ff f9a8 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, (int)V3);
 8001d0c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001d10:	f7fe ff22 	bl	8000b58 <__aeabi_d2iz>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc04 	bl	8000524 <__aeabi_i2d>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	ec43 2b10 	vmov	d0, r2, r3
 8001d24:	2004      	movs	r0, #4
 8001d26:	f7ff f999 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, (int)V4);
 8001d2a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001d2e:	f7fe ff13 	bl	8000b58 <__aeabi_d2iz>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fbf5 	bl	8000524 <__aeabi_i2d>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	ec43 2b10 	vmov	d0, r2, r3
 8001d42:	2008      	movs	r0, #8
 8001d44:	f7ff f98a 	bl	800105c <setMotorSpeed>
}
 8001d48:	bf00      	nop
 8001d4a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bdb0      	pop	{r4, r5, r7, pc}
 8001d52:	bf00      	nop
 8001d54:	0000      	movs	r0, r0
	...

08001d58 <putar>:
    setMotorSpeed(4, (int)V3);
    setMotorSpeed(8, (int)V4);
}

void putar(int Vx, int Vy, int W)
{
 8001d58:	b5b0      	push	{r4, r5, r7, lr}
 8001d5a:	ed2d 8b02 	vpush	{d8}
 8001d5e:	b098      	sub	sp, #96	@ 0x60
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
     double R = 7.6;
 8001d68:	f20f 534c 	addw	r3, pc, #1356	@ 0x54c
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
     int minSpeed = 650;
 8001d74:	f240 238a 	movw	r3, #650	@ 0x28a
 8001d78:	657b      	str	r3, [r7, #84]	@ 0x54
     int maxSpeed = 1000;
 8001d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d7e:	653b      	str	r3, [r7, #80]	@ 0x50

     double M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f7fe fbcf 	bl	8000524 <__aeabi_i2d>
 8001d86:	f20f 5338 	addw	r3, pc, #1336	@ 0x538
 8001d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8e:	f7fe fc33 	bl	80005f8 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4614      	mov	r4, r2
 8001d98:	461d      	mov	r5, r3
 8001d9a:	68b8      	ldr	r0, [r7, #8]
 8001d9c:	f7fe fbc2 	bl	8000524 <__aeabi_i2d>
 8001da0:	f20f 5324 	addw	r3, pc, #1316	@ 0x524
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fc26 	bl	80005f8 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4620      	mov	r0, r4
 8001db2:	4629      	mov	r1, r5
 8001db4:	f7fe fa6a 	bl	800028c <__adddf3>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	461d      	mov	r5, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7fe fbaf 	bl	8000524 <__aeabi_i2d>
 8001dc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001dca:	f7fe fc15 	bl	80005f8 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	f7fe fa57 	bl	8000288 <__aeabi_dsub>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
     double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f7fe fb9e 	bl	8000524 <__aeabi_i2d>
 8001de8:	f20f 43e4 	addw	r3, pc, #1252	@ 0x4e4
 8001dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df0:	f7fe fc02 	bl	80005f8 <__aeabi_dmul>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4614      	mov	r4, r2
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	68b8      	ldr	r0, [r7, #8]
 8001dfe:	f7fe fb91 	bl	8000524 <__aeabi_i2d>
 8001e02:	f20f 43bc 	addw	r3, pc, #1212	@ 0x4bc
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	f7fe fbf5 	bl	80005f8 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4620      	mov	r0, r4
 8001e14:	4629      	mov	r1, r5
 8001e16:	f7fe fa39 	bl	800028c <__adddf3>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4614      	mov	r4, r2
 8001e20:	461d      	mov	r5, r3
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7fe fb7e 	bl	8000524 <__aeabi_i2d>
 8001e28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e2c:	f7fe fbe4 	bl	80005f8 <__aeabi_dmul>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4620      	mov	r0, r4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f7fe fa26 	bl	8000288 <__aeabi_dsub>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
     double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7fe fb6d 	bl	8000524 <__aeabi_i2d>
 8001e4a:	f20f 438c 	addw	r3, pc, #1164	@ 0x48c
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe fbd1 	bl	80005f8 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4614      	mov	r4, r2
 8001e5c:	461d      	mov	r5, r3
 8001e5e:	68b8      	ldr	r0, [r7, #8]
 8001e60:	f7fe fb60 	bl	8000524 <__aeabi_i2d>
 8001e64:	f20f 4378 	addw	r3, pc, #1144	@ 0x478
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fbc4 	bl	80005f8 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4620      	mov	r0, r4
 8001e76:	4629      	mov	r1, r5
 8001e78:	f7fe fa08 	bl	800028c <__adddf3>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4614      	mov	r4, r2
 8001e82:	461d      	mov	r5, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7fe fb4d 	bl	8000524 <__aeabi_i2d>
 8001e8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e8e:	f7fe fbb3 	bl	80005f8 <__aeabi_dmul>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4620      	mov	r0, r4
 8001e98:	4629      	mov	r1, r5
 8001e9a:	f7fe f9f5 	bl	8000288 <__aeabi_dsub>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
     double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f7fe fb3c 	bl	8000524 <__aeabi_i2d>
 8001eac:	f20f 4338 	addw	r3, pc, #1080	@ 0x438
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fba0 	bl	80005f8 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4614      	mov	r4, r2
 8001ebe:	461d      	mov	r5, r3
 8001ec0:	68b8      	ldr	r0, [r7, #8]
 8001ec2:	f7fe fb2f 	bl	8000524 <__aeabi_i2d>
 8001ec6:	f20f 4328 	addw	r3, pc, #1064	@ 0x428
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f7fe fb93 	bl	80005f8 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	4629      	mov	r1, r5
 8001eda:	f7fe f9d7 	bl	800028c <__adddf3>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4614      	mov	r4, r2
 8001ee4:	461d      	mov	r5, r3
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe fb1c 	bl	8000524 <__aeabi_i2d>
 8001eec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ef0:	f7fe fb82 	bl	80005f8 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4620      	mov	r0, r4
 8001efa:	4629      	mov	r1, r5
 8001efc:	f7fe f9c4 	bl	8000288 <__aeabi_dsub>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

     double V1 = (M1 > minSpeed || M1 < -minSpeed) ? fmin(fmax(M1, -maxSpeed), maxSpeed) : ((M1 < -0) ? -minSpeed : ((M1 > 0) ? minSpeed : 0));
 8001f08:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001f0a:	f7fe fb0b 	bl	8000524 <__aeabi_i2d>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001f16:	f7fe fdff 	bl	8000b18 <__aeabi_dcmpgt>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <putar+0x1e4>
 8001f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f22:	425b      	negs	r3, r3
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fafd 	bl	8000524 <__aeabi_i2d>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001f32:	f7fe fdd3 	bl	8000adc <__aeabi_dcmplt>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <putar+0x226>
 8001f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f3e:	425b      	negs	r3, r3
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe faef 	bl	8000524 <__aeabi_i2d>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	ec43 2b11 	vmov	d1, r2, r3
 8001f4e:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 8001f52:	f00d fa88 	bl	800f466 <fmax>
 8001f56:	eeb0 8a40 	vmov.f32	s16, s0
 8001f5a:	eef0 8a60 	vmov.f32	s17, s1
 8001f5e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f60:	f7fe fae0 	bl	8000524 <__aeabi_i2d>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	ec43 2b11 	vmov	d1, r2, r3
 8001f6c:	eeb0 0a48 	vmov.f32	s0, s16
 8001f70:	eef0 0a68 	vmov.f32	s1, s17
 8001f74:	f00d faa1 	bl	800f4ba <fmin>
 8001f78:	ec53 2b10 	vmov	r2, r3, d0
 8001f7c:	e027      	b.n	8001fce <putar+0x276>
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001f8a:	f7fe fda7 	bl	8000adc <__aeabi_dcmplt>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <putar+0x24c>
 8001f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f96:	425b      	negs	r3, r3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fac3 	bl	8000524 <__aeabi_i2d>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	e014      	b.n	8001fce <putar+0x276>
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001fb0:	f7fe fdb2 	bl	8000b18 <__aeabi_dcmpgt>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <putar+0x26e>
 8001fba:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001fbc:	f7fe fab2 	bl	8000524 <__aeabi_i2d>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	e003      	b.n	8001fce <putar+0x276>
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
     double V2 = (M2 > minSpeed || M2 < -minSpeed) ? fmin(fmax(M2, -maxSpeed), maxSpeed) : ((M2 < -0) ? -minSpeed : ((M2 > 0) ? minSpeed : 0));
 8001fd2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001fd4:	f7fe faa6 	bl	8000524 <__aeabi_i2d>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001fe0:	f7fe fd9a 	bl	8000b18 <__aeabi_dcmpgt>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10d      	bne.n	8002006 <putar+0x2ae>
 8001fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fec:	425b      	negs	r3, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fa98 	bl	8000524 <__aeabi_i2d>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001ffc:	f7fe fd6e 	bl	8000adc <__aeabi_dcmplt>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d020      	beq.n	8002048 <putar+0x2f0>
 8002006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002008:	425b      	negs	r3, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa8a 	bl	8000524 <__aeabi_i2d>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	ec43 2b11 	vmov	d1, r2, r3
 8002018:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 800201c:	f00d fa23 	bl	800f466 <fmax>
 8002020:	eeb0 8a40 	vmov.f32	s16, s0
 8002024:	eef0 8a60 	vmov.f32	s17, s1
 8002028:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800202a:	f7fe fa7b 	bl	8000524 <__aeabi_i2d>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	ec43 2b11 	vmov	d1, r2, r3
 8002036:	eeb0 0a48 	vmov.f32	s0, s16
 800203a:	eef0 0a68 	vmov.f32	s1, s17
 800203e:	f00d fa3c 	bl	800f4ba <fmin>
 8002042:	ec53 2b10 	vmov	r2, r3, d0
 8002046:	e027      	b.n	8002098 <putar+0x340>
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002054:	f7fe fd42 	bl	8000adc <__aeabi_dcmplt>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <putar+0x316>
 800205e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002060:	425b      	negs	r3, r3
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa5e 	bl	8000524 <__aeabi_i2d>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	e014      	b.n	8002098 <putar+0x340>
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800207a:	f7fe fd4d 	bl	8000b18 <__aeabi_dcmpgt>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <putar+0x338>
 8002084:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002086:	f7fe fa4d 	bl	8000524 <__aeabi_i2d>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	e003      	b.n	8002098 <putar+0x340>
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	e9c7 2308 	strd	r2, r3, [r7, #32]
     double V3 = (M3 > minSpeed || M3 < -minSpeed) ? fmin(fmax(M3, -maxSpeed), maxSpeed) : ((M3 < -0) ? -minSpeed : ((M3 > 0) ? minSpeed : 0));
 800209c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800209e:	f7fe fa41 	bl	8000524 <__aeabi_i2d>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80020aa:	f7fe fd35 	bl	8000b18 <__aeabi_dcmpgt>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10d      	bne.n	80020d0 <putar+0x378>
 80020b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020b6:	425b      	negs	r3, r3
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa33 	bl	8000524 <__aeabi_i2d>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80020c6:	f7fe fd09 	bl	8000adc <__aeabi_dcmplt>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d020      	beq.n	8002112 <putar+0x3ba>
 80020d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020d2:	425b      	negs	r3, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fa25 	bl	8000524 <__aeabi_i2d>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	ec43 2b11 	vmov	d1, r2, r3
 80020e2:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80020e6:	f00d f9be 	bl	800f466 <fmax>
 80020ea:	eeb0 8a40 	vmov.f32	s16, s0
 80020ee:	eef0 8a60 	vmov.f32	s17, s1
 80020f2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020f4:	f7fe fa16 	bl	8000524 <__aeabi_i2d>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	ec43 2b11 	vmov	d1, r2, r3
 8002100:	eeb0 0a48 	vmov.f32	s0, s16
 8002104:	eef0 0a68 	vmov.f32	s1, s17
 8002108:	f00d f9d7 	bl	800f4ba <fmin>
 800210c:	ec53 2b10 	vmov	r2, r3, d0
 8002110:	e027      	b.n	8002162 <putar+0x40a>
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800211e:	f7fe fcdd 	bl	8000adc <__aeabi_dcmplt>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <putar+0x3e0>
 8002128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800212a:	425b      	negs	r3, r3
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe f9f9 	bl	8000524 <__aeabi_i2d>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	e014      	b.n	8002162 <putar+0x40a>
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002144:	f7fe fce8 	bl	8000b18 <__aeabi_dcmpgt>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <putar+0x402>
 800214e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002150:	f7fe f9e8 	bl	8000524 <__aeabi_i2d>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	e003      	b.n	8002162 <putar+0x40a>
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	e9c7 2306 	strd	r2, r3, [r7, #24]
     double V4 = (M4 > minSpeed || M4 < -minSpeed) ? fmin(fmax(M4, -maxSpeed), maxSpeed) : ((M4 < -0) ? -minSpeed : ((M4 > 0) ? minSpeed : 0));
 8002166:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002168:	f7fe f9dc 	bl	8000524 <__aeabi_i2d>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002174:	f7fe fcd0 	bl	8000b18 <__aeabi_dcmpgt>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10d      	bne.n	800219a <putar+0x442>
 800217e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002180:	425b      	negs	r3, r3
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f9ce 	bl	8000524 <__aeabi_i2d>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002190:	f7fe fca4 	bl	8000adc <__aeabi_dcmplt>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d020      	beq.n	80021dc <putar+0x484>
 800219a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800219c:	425b      	negs	r3, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f9c0 	bl	8000524 <__aeabi_i2d>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	ec43 2b11 	vmov	d1, r2, r3
 80021ac:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80021b0:	f00d f959 	bl	800f466 <fmax>
 80021b4:	eeb0 8a40 	vmov.f32	s16, s0
 80021b8:	eef0 8a60 	vmov.f32	s17, s1
 80021bc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80021be:	f7fe f9b1 	bl	8000524 <__aeabi_i2d>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	ec43 2b11 	vmov	d1, r2, r3
 80021ca:	eeb0 0a48 	vmov.f32	s0, s16
 80021ce:	eef0 0a68 	vmov.f32	s1, s17
 80021d2:	f00d f972 	bl	800f4ba <fmin>
 80021d6:	ec53 2b10 	vmov	r2, r3, d0
 80021da:	e027      	b.n	800222c <putar+0x4d4>
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80021e8:	f7fe fc78 	bl	8000adc <__aeabi_dcmplt>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <putar+0x4aa>
 80021f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f4:	425b      	negs	r3, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f994 	bl	8000524 <__aeabi_i2d>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	e014      	b.n	800222c <putar+0x4d4>
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800220e:	f7fe fc83 	bl	8000b18 <__aeabi_dcmpgt>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <putar+0x4cc>
 8002218:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800221a:	f7fe f983 	bl	8000524 <__aeabi_i2d>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	e003      	b.n	800222c <putar+0x4d4>
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	e9c7 2304 	strd	r2, r3, [r7, #16]

     setMotorSpeed(6, (int)V1);
 8002230:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002234:	f7fe fc90 	bl	8000b58 <__aeabi_d2iz>
 8002238:	4603      	mov	r3, r0
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe f972 	bl	8000524 <__aeabi_i2d>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	ec43 2b10 	vmov	d0, r2, r3
 8002248:	2006      	movs	r0, #6
 800224a:	f7fe ff07 	bl	800105c <setMotorSpeed>
     setMotorSpeed(5, (int)V2);
 800224e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002252:	f7fe fc81 	bl	8000b58 <__aeabi_d2iz>
 8002256:	4603      	mov	r3, r0
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f963 	bl	8000524 <__aeabi_i2d>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	ec43 2b10 	vmov	d0, r2, r3
 8002266:	2005      	movs	r0, #5
 8002268:	f7fe fef8 	bl	800105c <setMotorSpeed>
     setMotorSpeed(4, (int)V3);
 800226c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002270:	f7fe fc72 	bl	8000b58 <__aeabi_d2iz>
 8002274:	4603      	mov	r3, r0
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f954 	bl	8000524 <__aeabi_i2d>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	ec43 2b10 	vmov	d0, r2, r3
 8002284:	2004      	movs	r0, #4
 8002286:	f7fe fee9 	bl	800105c <setMotorSpeed>
     setMotorSpeed(8, (int)V4);
 800228a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800228e:	f7fe fc63 	bl	8000b58 <__aeabi_d2iz>
 8002292:	4603      	mov	r3, r0
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f945 	bl	8000524 <__aeabi_i2d>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	ec43 2b10 	vmov	d0, r2, r3
 80022a2:	2008      	movs	r0, #8
 80022a4:	f7fe feda 	bl	800105c <setMotorSpeed>
}
 80022a8:	bf00      	nop
 80022aa:	3760      	adds	r7, #96	@ 0x60
 80022ac:	46bd      	mov	sp, r7
 80022ae:	ecbd 8b02 	vpop	{d8}
 80022b2:	bdb0      	pop	{r4, r5, r7, pc}
 80022b4:	f3af 8000 	nop.w
 80022b8:	66666666 	.word	0x66666666
 80022bc:	401e6666 	.word	0x401e6666
 80022c0:	667f3bcc 	.word	0x667f3bcc
 80022c4:	bfe6a09e 	.word	0xbfe6a09e
 80022c8:	667f3bcd 	.word	0x667f3bcd
 80022cc:	3fe6a09e 	.word	0x3fe6a09e
 80022d0:	667f3bcd 	.word	0x667f3bcd
 80022d4:	bfe6a09e 	.word	0xbfe6a09e
 80022d8:	667f3bcc 	.word	0x667f3bcc
 80022dc:	3fe6a09e 	.word	0x3fe6a09e
 80022e0:	667f3bce 	.word	0x667f3bce
 80022e4:	bfe6a09e 	.word	0xbfe6a09e
 80022e8:	667f3bce 	.word	0x667f3bce
 80022ec:	3fe6a09e 	.word	0x3fe6a09e
 80022f0:	667f3bcb 	.word	0x667f3bcb
 80022f4:	3fe6a09e 	.word	0x3fe6a09e

080022f8 <lcd_write_nibble>:
#define D7_BIT 7      // Data 7 bit

uint8_t backlight_state = 1;

void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	4603      	mov	r3, r0
 8002300:	460a      	mov	r2, r1
 8002302:	71fb      	strb	r3, [r7, #7]
 8002304:	4613      	mov	r3, r2
 8002306:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	b2db      	uxtb	r3, r3
 800230e:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	79bb      	ldrb	r3, [r7, #6]
 8002314:	4313      	orrs	r3, r2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 800231a:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <lcd_write_nibble+0x7c>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	b25a      	sxtb	r2, r3
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	b25b      	sxtb	r3, r3
 8002326:	4313      	orrs	r3, r2
 8002328:	b25b      	sxtb	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	b2db      	uxtb	r3, r3
 8002336:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8002338:	f107 020f 	add.w	r2, r7, #15
 800233c:	2364      	movs	r3, #100	@ 0x64
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2301      	movs	r3, #1
 8002342:	214e      	movs	r1, #78	@ 0x4e
 8002344:	480c      	ldr	r0, [pc, #48]	@ (8002378 <lcd_write_nibble+0x80>)
 8002346:	f005 fbf3 	bl	8007b30 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 800234a:	2001      	movs	r0, #1
 800234c:	f004 fefe 	bl	800714c <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	f023 0304 	bic.w	r3, r3, #4
 8002356:	b2db      	uxtb	r3, r3
 8002358:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 800235a:	f107 020f 	add.w	r2, r7, #15
 800235e:	2364      	movs	r3, #100	@ 0x64
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2301      	movs	r3, #1
 8002364:	214e      	movs	r1, #78	@ 0x4e
 8002366:	4804      	ldr	r0, [pc, #16]	@ (8002378 <lcd_write_nibble+0x80>)
 8002368:	f005 fbe2 	bl	8007b30 <HAL_I2C_Master_Transmit>
}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200000c8 	.word	0x200000c8
 8002378:	200002cc 	.word	0x200002cc

0800237c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ffad 	bl	80022f8 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 800239e:	7bbb      	ldrb	r3, [r7, #14]
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ffa8 	bl	80022f8 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d002      	beq.n	80023b4 <lcd_send_cmd+0x38>
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d102      	bne.n	80023ba <lcd_send_cmd+0x3e>
  {
    HAL_Delay(2);
 80023b4:	2002      	movs	r0, #2
 80023b6:	f004 fec9 	bl	800714c <HAL_Delay>
  }
}
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2101      	movs	r1, #1
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff8a 	bl	80022f8 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 80023e4:	7bbb      	ldrb	r3, [r7, #14]
 80023e6:	2101      	movs	r1, #1
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff85 	bl	80022f8 <lcd_write_nibble>
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <lcd_init>:

void lcd_init()
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 80023fa:	2032      	movs	r0, #50	@ 0x32
 80023fc:	f004 fea6 	bl	800714c <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8002400:	2100      	movs	r1, #0
 8002402:	2003      	movs	r0, #3
 8002404:	f7ff ff78 	bl	80022f8 <lcd_write_nibble>
  HAL_Delay(5);
 8002408:	2005      	movs	r0, #5
 800240a:	f004 fe9f 	bl	800714c <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800240e:	2100      	movs	r1, #0
 8002410:	2003      	movs	r0, #3
 8002412:	f7ff ff71 	bl	80022f8 <lcd_write_nibble>
  HAL_Delay(1);
 8002416:	2001      	movs	r0, #1
 8002418:	f004 fe98 	bl	800714c <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800241c:	2100      	movs	r1, #0
 800241e:	2003      	movs	r0, #3
 8002420:	f7ff ff6a 	bl	80022f8 <lcd_write_nibble>
  HAL_Delay(1);
 8002424:	2001      	movs	r0, #1
 8002426:	f004 fe91 	bl	800714c <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 800242a:	2100      	movs	r1, #0
 800242c:	2002      	movs	r0, #2
 800242e:	f7ff ff63 	bl	80022f8 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 8002432:	2028      	movs	r0, #40	@ 0x28
 8002434:	f7ff ffa2 	bl	800237c <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8002438:	200c      	movs	r0, #12
 800243a:	f7ff ff9f 	bl	800237c <lcd_send_cmd>
  lcd_send_cmd(0x06);
 800243e:	2006      	movs	r0, #6
 8002440:	f7ff ff9c 	bl	800237c <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8002444:	2001      	movs	r0, #1
 8002446:	f7ff ff99 	bl	800237c <lcd_send_cmd>
  HAL_Delay(2);
 800244a:	2002      	movs	r0, #2
 800244c:	f004 fe7e 	bl	800714c <HAL_Delay>
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  while (*str)
 800245c:	e006      	b.n	800246c <lcd_write_string+0x18>
  {
    lcd_send_data(*str++);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ffab 	bl	80023c2 <lcd_send_data>
  while (*str)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f4      	bne.n	800245e <lcd_write_string+0xa>
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	460a      	mov	r2, r1
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	4613      	mov	r3, r2
 800248e:	71bb      	strb	r3, [r7, #6]
  uint8_t address;
  switch (row)
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	2b03      	cmp	r3, #3
 8002494:	d816      	bhi.n	80024c4 <lcd_set_cursor+0x44>
 8002496:	a201      	add	r2, pc, #4	@ (adr r2, 800249c <lcd_set_cursor+0x1c>)
 8002498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	080024b3 	.word	0x080024b3
 80024a4:	080024b9 	.word	0x080024b9
 80024a8:	080024bf 	.word	0x080024bf
  {
  case 0:
    address = 0x00;
 80024ac:	2300      	movs	r3, #0
 80024ae:	73fb      	strb	r3, [r7, #15]
    break;
 80024b0:	e00a      	b.n	80024c8 <lcd_set_cursor+0x48>
  case 1:
    address = 0x40;
 80024b2:	2340      	movs	r3, #64	@ 0x40
 80024b4:	73fb      	strb	r3, [r7, #15]
    break;
 80024b6:	e007      	b.n	80024c8 <lcd_set_cursor+0x48>
  case 2:
    address = 0x14;
 80024b8:	2314      	movs	r3, #20
 80024ba:	73fb      	strb	r3, [r7, #15]
    break;
 80024bc:	e004      	b.n	80024c8 <lcd_set_cursor+0x48>
  case 3:
    address = 0x54;
 80024be:	2354      	movs	r3, #84	@ 0x54
 80024c0:	73fb      	strb	r3, [r7, #15]
    break;
 80024c2:	e001      	b.n	80024c8 <lcd_set_cursor+0x48>
  default:
    address = 0x00;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
  }
  address += column;
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	79bb      	ldrb	r3, [r7, #6]
 80024cc:	4413      	add	r3, r2
 80024ce:	73fb      	strb	r3, [r7, #15]
  lcd_send_cmd(0x80 | address);
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff4f 	bl	800237c <lcd_send_cmd>
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop

080024e8 <lcd_clear>:

void lcd_clear(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x01);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f7ff ff45 	bl	800237c <lcd_send_cmd>
  HAL_Delay(2);
 80024f2:	2002      	movs	r0, #2
 80024f4:	f004 fe2a 	bl	800714c <HAL_Delay>
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
movingState mode = VOID;
char buffMode[10];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	80fb      	strh	r3, [r7, #6]
	// ENCODER
	if((GPIO_Pin == EB_1_Pin) && (HAL_GPIO_ReadPin(EB_1_GPIO_Port, EB_1_Pin) == GPIO_PIN_SET))
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d11d      	bne.n	8002548 <HAL_GPIO_EXTI_Callback+0x4c>
 800250c:	2108      	movs	r1, #8
 800250e:	489a      	ldr	r0, [pc, #616]	@ (8002778 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002510:	f005 f980 	bl	8007814 <HAL_GPIO_ReadPin>
 8002514:	4603      	mov	r3, r0
 8002516:	2b01      	cmp	r3, #1
 8002518:	d116      	bne.n	8002548 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		HAL_GPIO_ReadPin(EA_1_GPIO_Port, EA_1_Pin) ? counter1-- : counter1++;
 800251a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800251e:	4897      	ldr	r0, [pc, #604]	@ (800277c <HAL_GPIO_EXTI_Callback+0x280>)
 8002520:	f005 f978 	bl	8007814 <HAL_GPIO_ReadPin>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_GPIO_EXTI_Callback+0x3a>
 800252a:	4b95      	ldr	r3, [pc, #596]	@ (8002780 <HAL_GPIO_EXTI_Callback+0x284>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3b01      	subs	r3, #1
 8002530:	4a93      	ldr	r2, [pc, #588]	@ (8002780 <HAL_GPIO_EXTI_Callback+0x284>)
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e004      	b.n	8002540 <HAL_GPIO_EXTI_Callback+0x44>
 8002536:	4b92      	ldr	r3, [pc, #584]	@ (8002780 <HAL_GPIO_EXTI_Callback+0x284>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3301      	adds	r3, #1
 800253c:	4a90      	ldr	r2, [pc, #576]	@ (8002780 <HAL_GPIO_EXTI_Callback+0x284>)
 800253e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_1_Pin);
 8002540:	4b90      	ldr	r3, [pc, #576]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x288>)
 8002542:	2208      	movs	r2, #8
 8002544:	615a      	str	r2, [r3, #20]
 8002546:	e151      	b.n	80027ec <HAL_GPIO_EXTI_Callback+0x2f0>
	}
	else if((GPIO_Pin == EB_2_Pin) && (HAL_GPIO_ReadPin(EB_2_GPIO_Port, EB_2_Pin) == GPIO_PIN_SET))
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d11c      	bne.n	8002588 <HAL_GPIO_EXTI_Callback+0x8c>
 800254e:	2102      	movs	r1, #2
 8002550:	488d      	ldr	r0, [pc, #564]	@ (8002788 <HAL_GPIO_EXTI_Callback+0x28c>)
 8002552:	f005 f95f 	bl	8007814 <HAL_GPIO_ReadPin>
 8002556:	4603      	mov	r3, r0
 8002558:	2b01      	cmp	r3, #1
 800255a:	d115      	bne.n	8002588 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		HAL_GPIO_ReadPin(EA_2_GPIO_Port, EA_2_Pin) ? counter2-- : counter2++;
 800255c:	2101      	movs	r1, #1
 800255e:	488a      	ldr	r0, [pc, #552]	@ (8002788 <HAL_GPIO_EXTI_Callback+0x28c>)
 8002560:	f005 f958 	bl	8007814 <HAL_GPIO_ReadPin>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_GPIO_EXTI_Callback+0x7a>
 800256a:	4b88      	ldr	r3, [pc, #544]	@ (800278c <HAL_GPIO_EXTI_Callback+0x290>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3b01      	subs	r3, #1
 8002570:	4a86      	ldr	r2, [pc, #536]	@ (800278c <HAL_GPIO_EXTI_Callback+0x290>)
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	e004      	b.n	8002580 <HAL_GPIO_EXTI_Callback+0x84>
 8002576:	4b85      	ldr	r3, [pc, #532]	@ (800278c <HAL_GPIO_EXTI_Callback+0x290>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	4a83      	ldr	r2, [pc, #524]	@ (800278c <HAL_GPIO_EXTI_Callback+0x290>)
 800257e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_2_Pin);
 8002580:	4b80      	ldr	r3, [pc, #512]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x288>)
 8002582:	2202      	movs	r2, #2
 8002584:	615a      	str	r2, [r3, #20]
 8002586:	e131      	b.n	80027ec <HAL_GPIO_EXTI_Callback+0x2f0>
	}
	else if((GPIO_Pin == EB_3_Pin) && (HAL_GPIO_ReadPin(EB_3_GPIO_Port, EB_3_Pin) == GPIO_PIN_SET))
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	2b20      	cmp	r3, #32
 800258c:	d11c      	bne.n	80025c8 <HAL_GPIO_EXTI_Callback+0xcc>
 800258e:	2120      	movs	r1, #32
 8002590:	4879      	ldr	r0, [pc, #484]	@ (8002778 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002592:	f005 f93f 	bl	8007814 <HAL_GPIO_ReadPin>
 8002596:	4603      	mov	r3, r0
 8002598:	2b01      	cmp	r3, #1
 800259a:	d115      	bne.n	80025c8 <HAL_GPIO_EXTI_Callback+0xcc>
	{
		HAL_GPIO_ReadPin(EA_3_GPIO_Port, EA_3_Pin) ? counter3-- : counter3++;
 800259c:	2110      	movs	r1, #16
 800259e:	4876      	ldr	r0, [pc, #472]	@ (8002778 <HAL_GPIO_EXTI_Callback+0x27c>)
 80025a0:	f005 f938 	bl	8007814 <HAL_GPIO_ReadPin>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_GPIO_EXTI_Callback+0xba>
 80025aa:	4b79      	ldr	r3, [pc, #484]	@ (8002790 <HAL_GPIO_EXTI_Callback+0x294>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	4a77      	ldr	r2, [pc, #476]	@ (8002790 <HAL_GPIO_EXTI_Callback+0x294>)
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	e004      	b.n	80025c0 <HAL_GPIO_EXTI_Callback+0xc4>
 80025b6:	4b76      	ldr	r3, [pc, #472]	@ (8002790 <HAL_GPIO_EXTI_Callback+0x294>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	4a74      	ldr	r2, [pc, #464]	@ (8002790 <HAL_GPIO_EXTI_Callback+0x294>)
 80025be:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_3_Pin);
 80025c0:	4b70      	ldr	r3, [pc, #448]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x288>)
 80025c2:	2220      	movs	r2, #32
 80025c4:	615a      	str	r2, [r3, #20]
 80025c6:	e111      	b.n	80027ec <HAL_GPIO_EXTI_Callback+0x2f0>
	}
	else if((GPIO_Pin == EinB_1_Pin) && (HAL_GPIO_ReadPin(EinB_1_GPIO_Port, EinB_1_Pin) == GPIO_PIN_SET))
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d11c      	bne.n	8002608 <HAL_GPIO_EXTI_Callback+0x10c>
 80025ce:	2104      	movs	r1, #4
 80025d0:	486d      	ldr	r0, [pc, #436]	@ (8002788 <HAL_GPIO_EXTI_Callback+0x28c>)
 80025d2:	f005 f91f 	bl	8007814 <HAL_GPIO_ReadPin>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d115      	bne.n	8002608 <HAL_GPIO_EXTI_Callback+0x10c>
	{
		HAL_GPIO_ReadPin(EinA_1_GPIO_Port, EinA_1_Pin) ? counterIN1++ : counterIN1--;
 80025dc:	2108      	movs	r1, #8
 80025de:	486a      	ldr	r0, [pc, #424]	@ (8002788 <HAL_GPIO_EXTI_Callback+0x28c>)
 80025e0:	f005 f918 	bl	8007814 <HAL_GPIO_ReadPin>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_GPIO_EXTI_Callback+0xfa>
 80025ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002794 <HAL_GPIO_EXTI_Callback+0x298>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3301      	adds	r3, #1
 80025f0:	4a68      	ldr	r2, [pc, #416]	@ (8002794 <HAL_GPIO_EXTI_Callback+0x298>)
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	e004      	b.n	8002600 <HAL_GPIO_EXTI_Callback+0x104>
 80025f6:	4b67      	ldr	r3, [pc, #412]	@ (8002794 <HAL_GPIO_EXTI_Callback+0x298>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	4a65      	ldr	r2, [pc, #404]	@ (8002794 <HAL_GPIO_EXTI_Callback+0x298>)
 80025fe:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_1_Pin);
 8002600:	4b60      	ldr	r3, [pc, #384]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x288>)
 8002602:	2204      	movs	r2, #4
 8002604:	615a      	str	r2, [r3, #20]
 8002606:	e0f1      	b.n	80027ec <HAL_GPIO_EXTI_Callback+0x2f0>
	}
	else if((GPIO_Pin == EinB_2_Pin) && (HAL_GPIO_ReadPin(EinB_2_GPIO_Port, EinB_2_Pin) == GPIO_PIN_SET))
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d11c      	bne.n	8002648 <HAL_GPIO_EXTI_Callback+0x14c>
 800260e:	2101      	movs	r1, #1
 8002610:	485a      	ldr	r0, [pc, #360]	@ (800277c <HAL_GPIO_EXTI_Callback+0x280>)
 8002612:	f005 f8ff 	bl	8007814 <HAL_GPIO_ReadPin>
 8002616:	4603      	mov	r3, r0
 8002618:	2b01      	cmp	r3, #1
 800261a:	d115      	bne.n	8002648 <HAL_GPIO_EXTI_Callback+0x14c>
	{
		HAL_GPIO_ReadPin(EinA_2_GPIO_Port, EinA_2_Pin) ? counterIN2-- : counterIN2++;
 800261c:	2102      	movs	r1, #2
 800261e:	4857      	ldr	r0, [pc, #348]	@ (800277c <HAL_GPIO_EXTI_Callback+0x280>)
 8002620:	f005 f8f8 	bl	8007814 <HAL_GPIO_ReadPin>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <HAL_GPIO_EXTI_Callback+0x13a>
 800262a:	4b5b      	ldr	r3, [pc, #364]	@ (8002798 <HAL_GPIO_EXTI_Callback+0x29c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3b01      	subs	r3, #1
 8002630:	4a59      	ldr	r2, [pc, #356]	@ (8002798 <HAL_GPIO_EXTI_Callback+0x29c>)
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e004      	b.n	8002640 <HAL_GPIO_EXTI_Callback+0x144>
 8002636:	4b58      	ldr	r3, [pc, #352]	@ (8002798 <HAL_GPIO_EXTI_Callback+0x29c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3301      	adds	r3, #1
 800263c:	4a56      	ldr	r2, [pc, #344]	@ (8002798 <HAL_GPIO_EXTI_Callback+0x29c>)
 800263e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_2_Pin);
 8002640:	4b50      	ldr	r3, [pc, #320]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x288>)
 8002642:	2201      	movs	r2, #1
 8002644:	615a      	str	r2, [r3, #20]
 8002646:	e0d1      	b.n	80027ec <HAL_GPIO_EXTI_Callback+0x2f0>
	}
	else if((GPIO_Pin == EinB_3_Pin) && (HAL_GPIO_ReadPin(EinB_3_GPIO_Port, EinB_3_Pin) == GPIO_PIN_SET))
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800264e:	d11f      	bne.n	8002690 <HAL_GPIO_EXTI_Callback+0x194>
 8002650:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002654:	4851      	ldr	r0, [pc, #324]	@ (800279c <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002656:	f005 f8dd 	bl	8007814 <HAL_GPIO_ReadPin>
 800265a:	4603      	mov	r3, r0
 800265c:	2b01      	cmp	r3, #1
 800265e:	d117      	bne.n	8002690 <HAL_GPIO_EXTI_Callback+0x194>
	{
		HAL_GPIO_ReadPin(EinA_3_GPIO_Port, EinA_3_Pin) ? counterIN3++ : counterIN3--;
 8002660:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002664:	484d      	ldr	r0, [pc, #308]	@ (800279c <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002666:	f005 f8d5 	bl	8007814 <HAL_GPIO_ReadPin>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_GPIO_EXTI_Callback+0x180>
 8002670:	4b4b      	ldr	r3, [pc, #300]	@ (80027a0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	4a4a      	ldr	r2, [pc, #296]	@ (80027a0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e004      	b.n	8002686 <HAL_GPIO_EXTI_Callback+0x18a>
 800267c:	4b48      	ldr	r3, [pc, #288]	@ (80027a0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3b01      	subs	r3, #1
 8002682:	4a47      	ldr	r2, [pc, #284]	@ (80027a0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8002684:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_3_Pin);
 8002686:	4b3f      	ldr	r3, [pc, #252]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x288>)
 8002688:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800268c:	615a      	str	r2, [r3, #20]
 800268e:	e0ad      	b.n	80027ec <HAL_GPIO_EXTI_Callback+0x2f0>
	}
	else if((GPIO_Pin == EinB_4_Pin) && (HAL_GPIO_ReadPin(EinB_4_GPIO_Port, EinB_4_Pin) == GPIO_PIN_SET))
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002696:	d11f      	bne.n	80026d8 <HAL_GPIO_EXTI_Callback+0x1dc>
 8002698:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800269c:	4837      	ldr	r0, [pc, #220]	@ (800277c <HAL_GPIO_EXTI_Callback+0x280>)
 800269e:	f005 f8b9 	bl	8007814 <HAL_GPIO_ReadPin>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d117      	bne.n	80026d8 <HAL_GPIO_EXTI_Callback+0x1dc>
	{
		HAL_GPIO_ReadPin(EinA_4_GPIO_Port, EinA_4_Pin) ? counterIN4-- : counterIN4++;
 80026a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026ac:	4833      	ldr	r0, [pc, #204]	@ (800277c <HAL_GPIO_EXTI_Callback+0x280>)
 80026ae:	f005 f8b1 	bl	8007814 <HAL_GPIO_ReadPin>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_GPIO_EXTI_Callback+0x1c8>
 80026b8:	4b3a      	ldr	r3, [pc, #232]	@ (80027a4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3b01      	subs	r3, #1
 80026be:	4a39      	ldr	r2, [pc, #228]	@ (80027a4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e004      	b.n	80026ce <HAL_GPIO_EXTI_Callback+0x1d2>
 80026c4:	4b37      	ldr	r3, [pc, #220]	@ (80027a4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	3301      	adds	r3, #1
 80026ca:	4a36      	ldr	r2, [pc, #216]	@ (80027a4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80026cc:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_4_Pin);
 80026ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x288>)
 80026d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026d4:	615a      	str	r2, [r3, #20]
 80026d6:	e089      	b.n	80027ec <HAL_GPIO_EXTI_Callback+0x2f0>
	}

	// BUTTON
	else if((GPIO_Pin == Button_1_Pin) && (HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin) == GPIO_PIN_RESET))
 80026d8:	88fb      	ldrh	r3, [r7, #6]
 80026da:	2b40      	cmp	r3, #64	@ 0x40
 80026dc:	d117      	bne.n	800270e <HAL_GPIO_EXTI_Callback+0x212>
 80026de:	2140      	movs	r1, #64	@ 0x40
 80026e0:	4826      	ldr	r0, [pc, #152]	@ (800277c <HAL_GPIO_EXTI_Callback+0x280>)
 80026e2:	f005 f897 	bl	8007814 <HAL_GPIO_ReadPin>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d110      	bne.n	800270e <HAL_GPIO_EXTI_Callback+0x212>
	{
		mode = mode + 1;
 80026ec:	4b2e      	ldr	r3, [pc, #184]	@ (80027a8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	4b2c      	ldr	r3, [pc, #176]	@ (80027a8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80026f6:	701a      	strb	r2, [r3, #0]
		if(mode > 22)
 80026f8:	4b2b      	ldr	r3, [pc, #172]	@ (80027a8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b16      	cmp	r3, #22
 80026fe:	d902      	bls.n	8002706 <HAL_GPIO_EXTI_Callback+0x20a>
		{
			mode = VOID;
 8002700:	4b29      	ldr	r3, [pc, #164]	@ (80027a8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_1_Pin);
 8002706:	4b1f      	ldr	r3, [pc, #124]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x288>)
 8002708:	2240      	movs	r2, #64	@ 0x40
 800270a:	615a      	str	r2, [r3, #20]
 800270c:	e06e      	b.n	80027ec <HAL_GPIO_EXTI_Callback+0x2f0>
	}
	else if((GPIO_Pin == Button_2_Pin) && (HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin) == GPIO_PIN_RESET))
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002714:	d119      	bne.n	800274a <HAL_GPIO_EXTI_Callback+0x24e>
 8002716:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800271a:	4824      	ldr	r0, [pc, #144]	@ (80027ac <HAL_GPIO_EXTI_Callback+0x2b0>)
 800271c:	f005 f87a 	bl	8007814 <HAL_GPIO_ReadPin>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d111      	bne.n	800274a <HAL_GPIO_EXTI_Callback+0x24e>
	{
		mode = mode + 1;
 8002726:	4b20      	ldr	r3, [pc, #128]	@ (80027a8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	3301      	adds	r3, #1
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4b1e      	ldr	r3, [pc, #120]	@ (80027a8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002730:	701a      	strb	r2, [r3, #0]
		if(mode > 22)
 8002732:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b16      	cmp	r3, #22
 8002738:	d902      	bls.n	8002740 <HAL_GPIO_EXTI_Callback+0x244>
		{
			mode = VOID;
 800273a:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_2_Pin);
 8002740:	4b10      	ldr	r3, [pc, #64]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x288>)
 8002742:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002746:	615a      	str	r2, [r3, #20]
 8002748:	e050      	b.n	80027ec <HAL_GPIO_EXTI_Callback+0x2f0>
	}
	else if((GPIO_Pin == Button_3_Pin) && (HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin) == GPIO_PIN_RESET))
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002750:	d12e      	bne.n	80027b0 <HAL_GPIO_EXTI_Callback+0x2b4>
 8002752:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002756:	4815      	ldr	r0, [pc, #84]	@ (80027ac <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002758:	f005 f85c 	bl	8007814 <HAL_GPIO_ReadPin>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d126      	bne.n	80027b0 <HAL_GPIO_EXTI_Callback+0x2b4>
	{
		mode = mode - 1;
 8002762:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	3b01      	subs	r3, #1
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800276c:	701a      	strb	r2, [r3, #0]
		if(mode < 0)
		{
			mode = 22;
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_3_Pin);
 800276e:	4b05      	ldr	r3, [pc, #20]	@ (8002784 <HAL_GPIO_EXTI_Callback+0x288>)
 8002770:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002774:	615a      	str	r2, [r3, #20]
 8002776:	e039      	b.n	80027ec <HAL_GPIO_EXTI_Callback+0x2f0>
 8002778:	40020400 	.word	0x40020400
 800277c:	40020000 	.word	0x40020000
 8002780:	200004d0 	.word	0x200004d0
 8002784:	40013c00 	.word	0x40013c00
 8002788:	40020800 	.word	0x40020800
 800278c:	200004d4 	.word	0x200004d4
 8002790:	200004d8 	.word	0x200004d8
 8002794:	200004dc 	.word	0x200004dc
 8002798:	200004e0 	.word	0x200004e0
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	200004e4 	.word	0x200004e4
 80027a4:	200004e8 	.word	0x200004e8
 80027a8:	20000610 	.word	0x20000610
 80027ac:	40021000 	.word	0x40021000
	}
	else if((GPIO_Pin == Button_4_Pin) && (HAL_GPIO_ReadPin(Button_4_GPIO_Port, Button_4_Pin) == GPIO_PIN_RESET))
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027b6:	d119      	bne.n	80027ec <HAL_GPIO_EXTI_Callback+0x2f0>
 80027b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027bc:	480d      	ldr	r0, [pc, #52]	@ (80027f4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80027be:	f005 f829 	bl	8007814 <HAL_GPIO_ReadPin>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d111      	bne.n	80027ec <HAL_GPIO_EXTI_Callback+0x2f0>
	{
		mode = mode + 1;
 80027c8:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	3301      	adds	r3, #1
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80027d2:	701a      	strb	r2, [r3, #0]
		if(mode > 22)
 80027d4:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b16      	cmp	r3, #22
 80027da:	d902      	bls.n	80027e2 <HAL_GPIO_EXTI_Callback+0x2e6>
		{
			mode = VOID;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_4_Pin);
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_GPIO_EXTI_Callback+0x300>)
 80027e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80027e8:	615a      	str	r2, [r3, #20]
	}
}
 80027ea:	e7ff      	b.n	80027ec <HAL_GPIO_EXTI_Callback+0x2f0>
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40020400 	.word	0x40020400
 80027f8:	20000610 	.word	0x20000610
 80027fc:	40013c00 	.word	0x40013c00

08002800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002804:	f5ad 6ded 	sub.w	sp, sp, #1896	@ 0x768
 8002808:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800280a:	f004 fc2d 	bl	8007068 <HAL_Init>
  /* USER CODE BEGIN Init */
  void displayMode();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800280e:	f001 fa37 	bl	8003c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002812:	f001 fd55 	bl	80042c0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002816:	f001 fa9d 	bl	8003d54 <MX_I2C2_Init>
  MX_TIM1_Init();
 800281a:	f001 fac9 	bl	8003db0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800281e:	f001 fb8b 	bl	8003f38 <MX_TIM2_Init>
  MX_TIM8_Init();
 8002822:	f001 fc0b 	bl	800403c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002826:	f001 fccd 	bl	80041c4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800282a:	f001 fcf5 	bl	8004218 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800282e:	f001 fd1d 	bl	800426c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8002832:	2100      	movs	r1, #0
 8002834:	48cd      	ldr	r0, [pc, #820]	@ (8002b6c <main+0x36c>)
 8002836:	f006 fa15 	bl	8008c64 <HAL_TIM_PWM_Start_IT>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <main+0x44>
  {
	  Error_Handler();
 8002840:	f002 f8ee 	bl	8004a20 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8002844:	2104      	movs	r1, #4
 8002846:	48c9      	ldr	r0, [pc, #804]	@ (8002b6c <main+0x36c>)
 8002848:	f006 fa0c 	bl	8008c64 <HAL_TIM_PWM_Start_IT>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <main+0x56>
  {
	  Error_Handler();
 8002852:	f002 f8e5 	bl	8004a20 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8002856:	2108      	movs	r1, #8
 8002858:	48c4      	ldr	r0, [pc, #784]	@ (8002b6c <main+0x36c>)
 800285a:	f006 fa03 	bl	8008c64 <HAL_TIM_PWM_Start_IT>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <main+0x68>
  {
	  Error_Handler();
 8002864:	f002 f8dc 	bl	8004a20 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8002868:	210c      	movs	r1, #12
 800286a:	48c0      	ldr	r0, [pc, #768]	@ (8002b6c <main+0x36c>)
 800286c:	f006 f9fa 	bl	8008c64 <HAL_TIM_PWM_Start_IT>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <main+0x7a>
  {
	  Error_Handler();
 8002876:	f002 f8d3 	bl	8004a20 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1) != HAL_OK)
 800287a:	2100      	movs	r1, #0
 800287c:	48bc      	ldr	r0, [pc, #752]	@ (8002b70 <main+0x370>)
 800287e:	f006 f9f1 	bl	8008c64 <HAL_TIM_PWM_Start_IT>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <main+0x8c>
  {
	  Error_Handler();
 8002888:	f002 f8ca 	bl	8004a20 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2) != HAL_OK)
 800288c:	2104      	movs	r1, #4
 800288e:	48b8      	ldr	r0, [pc, #736]	@ (8002b70 <main+0x370>)
 8002890:	f006 f9e8 	bl	8008c64 <HAL_TIM_PWM_Start_IT>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <main+0x9e>
  {
	  Error_Handler();
 800289a:	f002 f8c1 	bl	8004a20 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3) != HAL_OK)
 800289e:	2108      	movs	r1, #8
 80028a0:	48b3      	ldr	r0, [pc, #716]	@ (8002b70 <main+0x370>)
 80028a2:	f006 f9df 	bl	8008c64 <HAL_TIM_PWM_Start_IT>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <main+0xb0>
  {
	  Error_Handler();
 80028ac:	f002 f8b8 	bl	8004a20 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4) != HAL_OK)
 80028b0:	210c      	movs	r1, #12
 80028b2:	48af      	ldr	r0, [pc, #700]	@ (8002b70 <main+0x370>)
 80028b4:	f006 f9d6 	bl	8008c64 <HAL_TIM_PWM_Start_IT>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <main+0xc2>
  {
	  Error_Handler();
 80028be:	f002 f8af 	bl	8004a20 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3) != HAL_OK)
 80028c2:	2108      	movs	r1, #8
 80028c4:	48ab      	ldr	r0, [pc, #684]	@ (8002b74 <main+0x374>)
 80028c6:	f006 f9cd 	bl	8008c64 <HAL_TIM_PWM_Start_IT>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <main+0xd4>
  {
	  Error_Handler();
 80028d0:	f002 f8a6 	bl	8004a20 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4) != HAL_OK)
 80028d4:	210c      	movs	r1, #12
 80028d6:	48a7      	ldr	r0, [pc, #668]	@ (8002b74 <main+0x374>)
 80028d8:	f006 f9c4 	bl	8008c64 <HAL_TIM_PWM_Start_IT>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <main+0xe6>
  {
	  Error_Handler();
 80028e2:	f002 f89d 	bl	8004a20 <Error_Handler>
  }

  if(HAL_UART_Receive_IT(&huart1, receive, 1) != HAL_OK)
 80028e6:	2201      	movs	r2, #1
 80028e8:	49a3      	ldr	r1, [pc, #652]	@ (8002b78 <main+0x378>)
 80028ea:	48a4      	ldr	r0, [pc, #656]	@ (8002b7c <main+0x37c>)
 80028ec:	f007 f9ca 	bl	8009c84 <HAL_UART_Receive_IT>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <main+0xfa>
  {
	  Error_Handler();
 80028f6:	f002 f893 	bl	8004a20 <Error_Handler>
  }
  if(HAL_UART_Receive_IT(&huart2, receiveCAM, 1) != HAL_OK)
 80028fa:	2201      	movs	r2, #1
 80028fc:	49a0      	ldr	r1, [pc, #640]	@ (8002b80 <main+0x380>)
 80028fe:	48a1      	ldr	r0, [pc, #644]	@ (8002b84 <main+0x384>)
 8002900:	f007 f9c0 	bl	8009c84 <HAL_UART_Receive_IT>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <main+0x10e>
  {
	  Error_Handler();
 800290a:	f002 f889 	bl	8004a20 <Error_Handler>
  }
  if(HAL_UART_Receive_IT(&huart3, receiveMEGA, 1) != HAL_OK)
 800290e:	2201      	movs	r2, #1
 8002910:	499d      	ldr	r1, [pc, #628]	@ (8002b88 <main+0x388>)
 8002912:	489e      	ldr	r0, [pc, #632]	@ (8002b8c <main+0x38c>)
 8002914:	f007 f9b6 	bl	8009c84 <HAL_UART_Receive_IT>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <main+0x122>
  {
	  Error_Handler();
 800291e:	f002 f87f 	bl	8004a20 <Error_Handler>
  }

  initializeSilos();
 8002922:	f003 f91d 	bl	8005b60 <initializeSilos>

  external_global red_step[3] = {
 8002926:	4a9a      	ldr	r2, [pc, #616]	@ (8002b90 <main+0x390>)
 8002928:	f507 63df 	add.w	r3, r7, #1784	@ 0x6f8
 800292c:	4611      	mov	r1, r2
 800292e:	2248      	movs	r2, #72	@ 0x48
 8002930:	4618      	mov	r0, r3
 8002932:	f009 ffec 	bl	800c90e <memcpy>
		  {0.0, 6200.0, 0.0},
		  {3750.0, 6200.0, 0.0},
		  {3750.0, 9500.0, 0.0}
  };
  external_global red_storage = {1100.0, 9500.0, 0.0};
 8002936:	4b97      	ldr	r3, [pc, #604]	@ (8002b94 <main+0x394>)
 8002938:	f507 64dc 	add.w	r4, r7, #1760	@ 0x6e0
 800293c:	461d      	mov	r5, r3
 800293e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002942:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002946:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global red_silo = {3700.0, 9500.0, 90.0};
 800294a:	4b93      	ldr	r3, [pc, #588]	@ (8002b98 <main+0x398>)
 800294c:	f507 64d9 	add.w	r4, r7, #1736	@ 0x6c8
 8002950:	461d      	mov	r5, r3
 8002952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002956:	e895 0003 	ldmia.w	r5, {r0, r1}
 800295a:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global red_throwBall = {1100.0, 8500.0, -179.0};
 800295e:	4b8f      	ldr	r3, [pc, #572]	@ (8002b9c <main+0x39c>)
 8002960:	f507 64d6 	add.w	r4, r7, #1712	@ 0x6b0
 8002964:	461d      	mov	r5, r3
 8002966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800296a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800296e:	e884 0003 	stmia.w	r4, {r0, r1}

  external_global redBall[3] = {
 8002972:	4a8b      	ldr	r2, [pc, #556]	@ (8002ba0 <main+0x3a0>)
 8002974:	f507 63cd 	add.w	r3, r7, #1640	@ 0x668
 8002978:	4611      	mov	r1, r2
 800297a:	2248      	movs	r2, #72	@ 0x48
 800297c:	4618      	mov	r0, r3
 800297e:	f009 ffc6 	bl	800c90e <memcpy>
		  {1150.0, 9500.0, -90.0},
		  {1150.0, 10500.0, -179.0},
		  {1150.0, 8500.0, 0.0}
  };

  external_global red_retry[4] = {
 8002982:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002986:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800298a:	4a86      	ldr	r2, [pc, #536]	@ (8002ba4 <main+0x3a4>)
 800298c:	4618      	mov	r0, r3
 800298e:	4611      	mov	r1, r2
 8002990:	2360      	movs	r3, #96	@ 0x60
 8002992:	461a      	mov	r2, r3
 8002994:	f009 ffbb 	bl	800c90e <memcpy>
		  {500.0, 0.0, 0.0},
		  {500.0, 1000.0, 0.0},
		  {3800.0, 1000.0, 0.0},
		  {3800.0, 4300.0, 0.0}
  };
  external_global red_retry_storage = {1100.0, 4300.0, 0.0};
 8002998:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800299c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80029a0:	4a81      	ldr	r2, [pc, #516]	@ (8002ba8 <main+0x3a8>)
 80029a2:	461c      	mov	r4, r3
 80029a4:	4615      	mov	r5, r2
 80029a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029ae:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global red_retry_silo = {3750.0, 4300.0, 90.0};
 80029b2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80029b6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80029ba:	4a7c      	ldr	r2, [pc, #496]	@ (8002bac <main+0x3ac>)
 80029bc:	461c      	mov	r4, r3
 80029be:	4615      	mov	r5, r2
 80029c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029c8:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global red_retry_throwBall = {1100.0, 3300.0, -179.0};
 80029cc:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80029d0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80029d4:	4a76      	ldr	r2, [pc, #472]	@ (8002bb0 <main+0x3b0>)
 80029d6:	461c      	mov	r4, r3
 80029d8:	4615      	mov	r5, r2
 80029da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029e2:	e884 0003 	stmia.w	r4, {r0, r1}

  external_global redRetryBall[3] = {
 80029e6:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80029ea:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80029ee:	4a71      	ldr	r2, [pc, #452]	@ (8002bb4 <main+0x3b4>)
 80029f0:	4618      	mov	r0, r3
 80029f2:	4611      	mov	r1, r2
 80029f4:	2348      	movs	r3, #72	@ 0x48
 80029f6:	461a      	mov	r2, r3
 80029f8:	f009 ff89 	bl	800c90e <memcpy>
		  {1150.0, 3300.0, 0.0}
  };



  external_global blue_step[3] = {
 80029fc:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002a00:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8002a04:	4a6c      	ldr	r2, [pc, #432]	@ (8002bb8 <main+0x3b8>)
 8002a06:	4618      	mov	r0, r3
 8002a08:	4611      	mov	r1, r2
 8002a0a:	2348      	movs	r3, #72	@ 0x48
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f009 ff7e 	bl	800c90e <memcpy>
		  {0.0, 6200.0, 0.0},
		  {-3750.0, 6200.0, 0.0},
		  {-3750.0, 9500.0, 0.0}
  };
  external_global blue_storage = {-1100.0, 9500.0, 0.0};
 8002a12:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002a16:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002a1a:	4a68      	ldr	r2, [pc, #416]	@ (8002bbc <main+0x3bc>)
 8002a1c:	461c      	mov	r4, r3
 8002a1e:	4615      	mov	r5, r2
 8002a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a28:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_silo = {-3700.0, 9500.0, -90.0};
 8002a2c:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002a30:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002a34:	4a62      	ldr	r2, [pc, #392]	@ (8002bc0 <main+0x3c0>)
 8002a36:	461c      	mov	r4, r3
 8002a38:	4615      	mov	r5, r2
 8002a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a42:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_throwBall = {-1100.0, 8500.0, -179.0};
 8002a46:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002a4a:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002a4e:	4a5d      	ldr	r2, [pc, #372]	@ (8002bc4 <main+0x3c4>)
 8002a50:	461c      	mov	r4, r3
 8002a52:	4615      	mov	r5, r2
 8002a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a5c:	e884 0003 	stmia.w	r4, {r0, r1}

  external_global blueBall[3] = {
 8002a60:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002a64:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8002a68:	4a57      	ldr	r2, [pc, #348]	@ (8002bc8 <main+0x3c8>)
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	2348      	movs	r3, #72	@ 0x48
 8002a70:	461a      	mov	r2, r3
 8002a72:	f009 ff4c 	bl	800c90e <memcpy>
		  {-1100.0, 9500.0, 90.0},
		  {-1100.0, 10500.0, -179.0},
		  {-1100.0, 8500.0, 0.0}
  };

  external_global blue_retry[4] = {
 8002a76:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002a7a:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8002a7e:	4a53      	ldr	r2, [pc, #332]	@ (8002bcc <main+0x3cc>)
 8002a80:	4618      	mov	r0, r3
 8002a82:	4611      	mov	r1, r2
 8002a84:	2360      	movs	r3, #96	@ 0x60
 8002a86:	461a      	mov	r2, r3
 8002a88:	f009 ff41 	bl	800c90e <memcpy>
		  {-500.0, 0.0, 0.0},
		  {-500.0, 1000.0, 0.0},
		  {-3800.0, 1000.0, 0.0},
		  {-3800.0, 4300.0, 0.0}
  };
  external_global blue_retry_storage = {-1150.0, 4300.0, 0.0};
 8002a8c:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002a90:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8002a94:	4a4e      	ldr	r2, [pc, #312]	@ (8002bd0 <main+0x3d0>)
 8002a96:	461c      	mov	r4, r3
 8002a98:	4615      	mov	r5, r2
 8002a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002aa2:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_retry_silo = {-3750.0, 4300.0, -90.0};
 8002aa6:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002aaa:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002aae:	4a49      	ldr	r2, [pc, #292]	@ (8002bd4 <main+0x3d4>)
 8002ab0:	461c      	mov	r4, r3
 8002ab2:	4615      	mov	r5, r2
 8002ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ab8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002abc:	e884 0003 	stmia.w	r4, {r0, r1}
  external_global blue_retry_throwBall = {-1100.0, 3300.0, 179.0};
 8002ac0:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002ac4:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8002ac8:	4a43      	ldr	r2, [pc, #268]	@ (8002bd8 <main+0x3d8>)
 8002aca:	461c      	mov	r4, r3
 8002acc:	4615      	mov	r5, r2
 8002ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ad6:	e884 0003 	stmia.w	r4, {r0, r1}

  external_global blueRetryBall[3] = {
 8002ada:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002ade:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8002ae2:	4a3e      	ldr	r2, [pc, #248]	@ (8002bdc <main+0x3dc>)
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	2348      	movs	r3, #72	@ 0x48
 8002aea:	461a      	mov	r2, r3
 8002aec:	f009 ff0f 	bl	800c90e <memcpy>
		  {-1150.0, 3300.0, 0.0}
  };



  external_global tes = {0.0, 0.0, 0.0};
 8002af0:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002af4:	f5a3 7172 	sub.w	r1, r3, #968	@ 0x3c8
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9c1 2300 	strd	r2, r3, [r1]
 8002b04:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002b08:	f5a3 7172 	sub.w	r1, r3, #968	@ 0x3c8
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002b18:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002b1c:	f5a3 7172 	sub.w	r1, r3, #968	@ 0x3c8
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	e9c1 2304 	strd	r2, r3, [r1, #16]
	double smoothingFactor;
	int maxVelocity;
	double xyTolerance;
	double hTolerance;
   */
  PID_parameter red_step_parameters[3] = {
 8002b2c:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002b30:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 8002b34:	4a2a      	ldr	r2, [pc, #168]	@ (8002be0 <main+0x3e0>)
 8002b36:	4618      	mov	r0, r3
 8002b38:	4611      	mov	r1, r2
 8002b3a:	23c0      	movs	r3, #192	@ 0xc0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f009 fee6 	bl	800c90e <memcpy>
		  {1.25, 0.0, 0.0, 2.5, 0.8, 3000, 200, 2},
		  {1.8, 0.0, 0.0, 3.5, 0.75, 3500, 200, 1},
		  {1.5, 0.0, 0.0, 2.5, 0.8, 3500, 200, 5}
  };

  PID_parameter red_retry_parameters[4] = {
 8002b42:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002b46:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 8002b4a:	4a26      	ldr	r2, [pc, #152]	@ (8002be4 <main+0x3e4>)
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	4611      	mov	r1, r2
 8002b50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b54:	461a      	mov	r2, r3
 8002b56:	f009 feda 	bl	800c90e <memcpy>
		  {2.6, 0.0, 0.0, 2.5, 0.75, 2500, 200, 2},
		  {1.8, 0.0, 0.0, 3.0, 0.75, 3500, 200, 1},
		  {1.5, 0.0, 0.0, 2.8, 0.8, 3500, 200, 5}
  };

  uint16_t red_step_numPoints = sizeof(red_step) / sizeof(red_step[0]);
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	f8a7 375e 	strh.w	r3, [r7, #1886]	@ 0x75e
  uint16_t red_retry_numPoints = sizeof(red_retry) / sizeof(red_retry[0]);
 8002b60:	2304      	movs	r3, #4
 8002b62:	f8a7 375c 	strh.w	r3, [r7, #1884]	@ 0x75c



  PID_parameter blue_step_parameters[3] = {
 8002b66:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002b6a:	e03d      	b.n	8002be8 <main+0x3e8>
 8002b6c:	20000320 	.word	0x20000320
 8002b70:	200003b0 	.word	0x200003b0
 8002b74:	20000368 	.word	0x20000368
 8002b78:	200004ec 	.word	0x200004ec
 8002b7c:	200003f8 	.word	0x200003f8
 8002b80:	20000540 	.word	0x20000540
 8002b84:	20000440 	.word	0x20000440
 8002b88:	200005c4 	.word	0x200005c4
 8002b8c:	20000488 	.word	0x20000488
 8002b90:	08010dd0 	.word	0x08010dd0
 8002b94:	08010e18 	.word	0x08010e18
 8002b98:	08010e30 	.word	0x08010e30
 8002b9c:	08010e48 	.word	0x08010e48
 8002ba0:	08010e60 	.word	0x08010e60
 8002ba4:	08010ea8 	.word	0x08010ea8
 8002ba8:	08010f08 	.word	0x08010f08
 8002bac:	08010f20 	.word	0x08010f20
 8002bb0:	08010f38 	.word	0x08010f38
 8002bb4:	08010f50 	.word	0x08010f50
 8002bb8:	08010f98 	.word	0x08010f98
 8002bbc:	08010fe0 	.word	0x08010fe0
 8002bc0:	08010ff8 	.word	0x08010ff8
 8002bc4:	08011010 	.word	0x08011010
 8002bc8:	08011028 	.word	0x08011028
 8002bcc:	08011070 	.word	0x08011070
 8002bd0:	080110d0 	.word	0x080110d0
 8002bd4:	080110e8 	.word	0x080110e8
 8002bd8:	08011100 	.word	0x08011100
 8002bdc:	08011118 	.word	0x08011118
 8002be0:	08011160 	.word	0x08011160
 8002be4:	08011220 	.word	0x08011220
 8002be8:	f5a3 63c9 	sub.w	r3, r3, #1608	@ 0x648
 8002bec:	4af4      	ldr	r2, [pc, #976]	@ (8002fc0 <main+0x7c0>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	23c0      	movs	r3, #192	@ 0xc0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f009 fe8a 	bl	800c90e <memcpy>
		  {1.25, 0.0, 0.0, 2.5, 0.8, 3000, 200, 2},
		  {1.8, 0.0, 0.0, 3.5, 0.75, 3500, 200, 1},
		  {1.5, 0.0, 0.0, 2.5, 0.8, 3500, 200, 5}
  };

  PID_parameter blue_retry_parameters[4] = {
 8002bfa:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002bfe:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8002c02:	4af0      	ldr	r2, [pc, #960]	@ (8002fc4 <main+0x7c4>)
 8002c04:	4618      	mov	r0, r3
 8002c06:	4611      	mov	r1, r2
 8002c08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f009 fe7e 	bl	800c90e <memcpy>
		  {2.6, 0.0, 0.0, 2.5, 0.75, 2500, 200, 2},
		  {1.8, 0.0, 0.0, 3.0, 0.75, 3500, 200, 1},
		  {1.5, 0.0, 0.0, 2.8, 0.8, 3500, 200, 5}
  };

  uint16_t blue_step_numPoints = sizeof(blue_step) / sizeof(blue_step[0]);
 8002c12:	2303      	movs	r3, #3
 8002c14:	f8a7 375a 	strh.w	r3, [r7, #1882]	@ 0x75a
  uint16_t blue_retry_numPoints = sizeof(blue_retry) / sizeof(blue_retry[0]);
 8002c18:	2304      	movs	r3, #4
 8002c1a:	f8a7 3758 	strh.w	r3, [r7, #1880]	@ 0x758

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_init();
 8002c1e:	f7ff fbea 	bl	80023f6 <lcd_init>

	  int FL_distance = sensorMEGA[0];
 8002c22:	4be9      	ldr	r3, [pc, #932]	@ (8002fc8 <main+0x7c8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8c7 3754 	str.w	r3, [r7, #1876]	@ 0x754
	  int FR_distance = sensorMEGA[2];
 8002c2a:	4be7      	ldr	r3, [pc, #924]	@ (8002fc8 <main+0x7c8>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f8c7 3750 	str.w	r3, [r7, #1872]	@ 0x750

	  external_global position = odometry_eg();
 8002c32:	f001 ff19 	bl	8004a68 <odometry_eg>
 8002c36:	eeb0 5a40 	vmov.f32	s10, s0
 8002c3a:	eef0 5a60 	vmov.f32	s11, s1
 8002c3e:	eeb0 6a41 	vmov.f32	s12, s2
 8002c42:	eef0 6a61 	vmov.f32	s13, s3
 8002c46:	eeb0 7a42 	vmov.f32	s14, s4
 8002c4a:	eef0 7a62 	vmov.f32	s15, s5
 8002c4e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002c52:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002c56:	ed83 5b00 	vstr	d5, [r3]
 8002c5a:	ed83 6b02 	vstr	d6, [r3, #8]
 8002c5e:	ed83 7b04 	vstr	d7, [r3, #16]
	  displayMode();
 8002c62:	f001 fe11 	bl	8004888 <displayMode>
	  display_EG();
 8002c66:	f002 f843 	bl	8004cf0 <display_EG>

//	  displaySilo();
//	  displayCounter();
//	  displayBall();

	  if(fabs(position.x) > 99999 || fabs(position.y) > 99999)
 8002c6a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002c6e:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	4690      	mov	r8, r2
 8002c78:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002c7c:	a3c8      	add	r3, pc, #800	@ (adr r3, 8002fa0 <main+0x7a0>)
 8002c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c82:	4640      	mov	r0, r8
 8002c84:	4649      	mov	r1, r9
 8002c86:	f7fd ff47 	bl	8000b18 <__aeabi_dcmpgt>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d112      	bne.n	8002cb6 <main+0x4b6>
 8002c90:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002c94:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002c98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c9c:	4692      	mov	sl, r2
 8002c9e:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002ca2:	a3bf      	add	r3, pc, #764	@ (adr r3, 8002fa0 <main+0x7a0>)
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	4650      	mov	r0, sl
 8002caa:	4659      	mov	r1, fp
 8002cac:	f7fd ff34 	bl	8000b18 <__aeabi_dcmpgt>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <main+0x4ba>
	  {
		  Error_Handler();
 8002cb6:	f001 feb3 	bl	8004a20 <Error_Handler>
	  }

	  bool red_step_check = atTargetEG(red_step[red_step_numPoints-1], position, 400, 5);
 8002cba:	f8b7 375e 	ldrh.w	r3, [r7, #1886]	@ 0x75e
 8002cbe:	1e5a      	subs	r2, r3, #1
 8002cc0:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002cc4:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002cc8:	ed93 3b00 	vldr	d3, [r3]
 8002ccc:	ed93 4b02 	vldr	d4, [r3, #8]
 8002cd0:	ed93 5b04 	vldr	d5, [r3, #16]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 8002ce0:	443b      	add	r3, r7
 8002ce2:	3b68      	subs	r3, #104	@ 0x68
 8002ce4:	ed93 0b00 	vldr	d0, [r3]
 8002ce8:	ed93 1b02 	vldr	d1, [r3, #8]
 8002cec:	ed93 2b04 	vldr	d2, [r3, #16]
 8002cf0:	ed9f 7bad 	vldr	d7, [pc, #692]	@ 8002fa8 <main+0x7a8>
 8002cf4:	ed9f 6bae 	vldr	d6, [pc, #696]	@ 8002fb0 <main+0x7b0>
 8002cf8:	f002 fa0c 	bl	8005114 <atTargetEG>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f887 374f 	strb.w	r3, [r7, #1871]	@ 0x74f
	  bool red_storage_check = atTargetEG(red_storage, position, 400, 1);
 8002d02:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002d06:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002d0a:	ed93 3b00 	vldr	d3, [r3]
 8002d0e:	ed93 4b02 	vldr	d4, [r3, #8]
 8002d12:	ed93 5b04 	vldr	d5, [r3, #16]
 8002d16:	f507 63dc 	add.w	r3, r7, #1760	@ 0x6e0
 8002d1a:	ed93 0b00 	vldr	d0, [r3]
 8002d1e:	f507 63dd 	add.w	r3, r7, #1768	@ 0x6e8
 8002d22:	ed93 1b00 	vldr	d1, [r3]
 8002d26:	f507 63de 	add.w	r3, r7, #1776	@ 0x6f0
 8002d2a:	ed93 2b00 	vldr	d2, [r3]
 8002d2e:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8002fb8 <main+0x7b8>
 8002d32:	ed9f 6b9f 	vldr	d6, [pc, #636]	@ 8002fb0 <main+0x7b0>
 8002d36:	f002 f9ed 	bl	8005114 <atTargetEG>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f887 374e 	strb.w	r3, [r7, #1870]	@ 0x74e
	  bool red_silo_check = atTargetEG(red_silo, position, 400, 1);
 8002d40:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002d44:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002d48:	ed93 3b00 	vldr	d3, [r3]
 8002d4c:	ed93 4b02 	vldr	d4, [r3, #8]
 8002d50:	ed93 5b04 	vldr	d5, [r3, #16]
 8002d54:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8002d58:	ed93 0b00 	vldr	d0, [r3]
 8002d5c:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 8002d60:	ed93 1b00 	vldr	d1, [r3]
 8002d64:	f507 63db 	add.w	r3, r7, #1752	@ 0x6d8
 8002d68:	ed93 2b00 	vldr	d2, [r3]
 8002d6c:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 8002fb8 <main+0x7b8>
 8002d70:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8002fb0 <main+0x7b0>
 8002d74:	f002 f9ce 	bl	8005114 <atTargetEG>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f887 374d 	strb.w	r3, [r7, #1869]	@ 0x74d

	  bool red_retry_check = atTargetEG(red_retry[red_retry_numPoints-1], position, 400, 5);
 8002d7e:	f8b7 375c 	ldrh.w	r3, [r7, #1884]	@ 0x75c
 8002d82:	1e5a      	subs	r2, r3, #1
 8002d84:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002d88:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002d8c:	ed93 3b00 	vldr	d3, [r3]
 8002d90:	ed93 4b02 	vldr	d4, [r3, #8]
 8002d94:	ed93 5b04 	vldr	d5, [r3, #16]
 8002d98:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002d9c:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	ed93 0b00 	vldr	d0, [r3]
 8002dae:	ed93 1b02 	vldr	d1, [r3, #8]
 8002db2:	ed93 2b04 	vldr	d2, [r3, #16]
 8002db6:	ed9f 7b7c 	vldr	d7, [pc, #496]	@ 8002fa8 <main+0x7a8>
 8002dba:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8002fb0 <main+0x7b0>
 8002dbe:	f002 f9a9 	bl	8005114 <atTargetEG>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f887 374c 	strb.w	r3, [r7, #1868]	@ 0x74c
	  bool red_retry_storage_check = atTargetEG(red_retry_storage, position, 400, 1);
 8002dc8:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002dcc:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002dd0:	ed93 3b00 	vldr	d3, [r3]
 8002dd4:	ed93 4b02 	vldr	d4, [r3, #8]
 8002dd8:	ed93 5b04 	vldr	d5, [r3, #16]
 8002ddc:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002de0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002de4:	ed93 0b00 	vldr	d0, [r3]
 8002de8:	ed93 1b02 	vldr	d1, [r3, #8]
 8002dec:	ed93 2b04 	vldr	d2, [r3, #16]
 8002df0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8002fb8 <main+0x7b8>
 8002df4:	ed9f 6b6e 	vldr	d6, [pc, #440]	@ 8002fb0 <main+0x7b0>
 8002df8:	f002 f98c 	bl	8005114 <atTargetEG>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f887 374b 	strb.w	r3, [r7, #1867]	@ 0x74b
	  bool red_retry_silo_check = atTargetEG(red_retry_silo, position, 400, 1);
 8002e02:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002e06:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002e0a:	ed93 3b00 	vldr	d3, [r3]
 8002e0e:	ed93 4b02 	vldr	d4, [r3, #8]
 8002e12:	ed93 5b04 	vldr	d5, [r3, #16]
 8002e16:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002e1a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e1e:	ed93 0b00 	vldr	d0, [r3]
 8002e22:	ed93 1b02 	vldr	d1, [r3, #8]
 8002e26:	ed93 2b04 	vldr	d2, [r3, #16]
 8002e2a:	ed9f 7b63 	vldr	d7, [pc, #396]	@ 8002fb8 <main+0x7b8>
 8002e2e:	ed9f 6b60 	vldr	d6, [pc, #384]	@ 8002fb0 <main+0x7b0>
 8002e32:	f002 f96f 	bl	8005114 <atTargetEG>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f887 374a 	strb.w	r3, [r7, #1866]	@ 0x74a


	  bool blue_step_check = atTargetEG(blue_step[blue_step_numPoints-1], position, 400, 5);
 8002e3c:	f8b7 375a 	ldrh.w	r3, [r7, #1882]	@ 0x75a
 8002e40:	1e5a      	subs	r2, r3, #1
 8002e42:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002e46:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002e4a:	ed93 3b00 	vldr	d3, [r3]
 8002e4e:	ed93 4b02 	vldr	d4, [r3, #8]
 8002e52:	ed93 5b04 	vldr	d5, [r3, #16]
 8002e56:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002e5a:	f5a3 710c 	sub.w	r1, r3, #560	@ 0x230
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	ed93 0b00 	vldr	d0, [r3]
 8002e6c:	ed93 1b02 	vldr	d1, [r3, #8]
 8002e70:	ed93 2b04 	vldr	d2, [r3, #16]
 8002e74:	ed9f 7b4c 	vldr	d7, [pc, #304]	@ 8002fa8 <main+0x7a8>
 8002e78:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8002fb0 <main+0x7b0>
 8002e7c:	f002 f94a 	bl	8005114 <atTargetEG>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f887 3749 	strb.w	r3, [r7, #1865]	@ 0x749
	  bool blue_storage_check = atTargetEG(blue_storage, position, 400, 1);
 8002e86:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002e8a:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002e8e:	ed93 3b00 	vldr	d3, [r3]
 8002e92:	ed93 4b02 	vldr	d4, [r3, #8]
 8002e96:	ed93 5b04 	vldr	d5, [r3, #16]
 8002e9a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002e9e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002ea2:	ed93 0b00 	vldr	d0, [r3]
 8002ea6:	ed93 1b02 	vldr	d1, [r3, #8]
 8002eaa:	ed93 2b04 	vldr	d2, [r3, #16]
 8002eae:	ed9f 7b42 	vldr	d7, [pc, #264]	@ 8002fb8 <main+0x7b8>
 8002eb2:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8002fb0 <main+0x7b0>
 8002eb6:	f002 f92d 	bl	8005114 <atTargetEG>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f887 3748 	strb.w	r3, [r7, #1864]	@ 0x748
	  bool blue_silo_check = atTargetEG(blue_silo, position, 400, 1);
 8002ec0:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002ec4:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002ec8:	ed93 3b00 	vldr	d3, [r3]
 8002ecc:	ed93 4b02 	vldr	d4, [r3, #8]
 8002ed0:	ed93 5b04 	vldr	d5, [r3, #16]
 8002ed4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002ed8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002edc:	ed93 0b00 	vldr	d0, [r3]
 8002ee0:	ed93 1b02 	vldr	d1, [r3, #8]
 8002ee4:	ed93 2b04 	vldr	d2, [r3, #16]
 8002ee8:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8002fb8 <main+0x7b8>
 8002eec:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 8002fb0 <main+0x7b0>
 8002ef0:	f002 f910 	bl	8005114 <atTargetEG>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 3747 	strb.w	r3, [r7, #1863]	@ 0x747

	  bool blue_retry_check = atTargetEG(blue_retry[blue_retry_numPoints-1], position, 400, 5);
 8002efa:	f8b7 3758 	ldrh.w	r3, [r7, #1880]	@ 0x758
 8002efe:	1e5a      	subs	r2, r3, #1
 8002f00:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002f04:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002f08:	ed93 3b00 	vldr	d3, [r3]
 8002f0c:	ed93 4b02 	vldr	d4, [r3, #8]
 8002f10:	ed93 5b04 	vldr	d5, [r3, #16]
 8002f14:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002f18:	f5a3 7148 	sub.w	r1, r3, #800	@ 0x320
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	440b      	add	r3, r1
 8002f26:	ed93 0b00 	vldr	d0, [r3]
 8002f2a:	ed93 1b02 	vldr	d1, [r3, #8]
 8002f2e:	ed93 2b04 	vldr	d2, [r3, #16]
 8002f32:	ed9f 7b1d 	vldr	d7, [pc, #116]	@ 8002fa8 <main+0x7a8>
 8002f36:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8002fb0 <main+0x7b0>
 8002f3a:	f002 f8eb 	bl	8005114 <atTargetEG>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f887 3746 	strb.w	r3, [r7, #1862]	@ 0x746
	  bool blue_retry_storage_check = atTargetEG(blue_retry_storage, position, 400, 1);
 8002f44:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002f48:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002f4c:	ed93 3b00 	vldr	d3, [r3]
 8002f50:	ed93 4b02 	vldr	d4, [r3, #8]
 8002f54:	ed93 5b04 	vldr	d5, [r3, #16]
 8002f58:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002f5c:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8002f60:	ed93 0b00 	vldr	d0, [r3]
 8002f64:	ed93 1b02 	vldr	d1, [r3, #8]
 8002f68:	ed93 2b04 	vldr	d2, [r3, #16]
 8002f6c:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8002fb8 <main+0x7b8>
 8002f70:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8002fb0 <main+0x7b0>
 8002f74:	f002 f8ce 	bl	8005114 <atTargetEG>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f887 3745 	strb.w	r3, [r7, #1861]	@ 0x745
	  bool blue_retry_silo_check = atTargetEG(blue_retry_silo, position, 400, 1);
 8002f7e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002f82:	f5a3 63ec 	sub.w	r3, r3, #1888	@ 0x760
 8002f86:	ed93 3b00 	vldr	d3, [r3]
 8002f8a:	ed93 4b02 	vldr	d4, [r3, #8]
 8002f8e:	ed93 5b04 	vldr	d5, [r3, #16]
 8002f92:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8002f96:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002f9a:	ed93 0b00 	vldr	d0, [r3]
 8002f9e:	e015      	b.n	8002fcc <main+0x7cc>
 8002fa0:	00000000 	.word	0x00000000
 8002fa4:	40f869f0 	.word	0x40f869f0
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	40140000 	.word	0x40140000
 8002fb0:	00000000 	.word	0x00000000
 8002fb4:	40790000 	.word	0x40790000
 8002fb8:	00000000 	.word	0x00000000
 8002fbc:	3ff00000 	.word	0x3ff00000
 8002fc0:	08011160 	.word	0x08011160
 8002fc4:	08011220 	.word	0x08011220
 8002fc8:	20000600 	.word	0x20000600
 8002fcc:	ed93 1b02 	vldr	d1, [r3, #8]
 8002fd0:	ed93 2b04 	vldr	d2, [r3, #16]
 8002fd4:	ed9f 7bca 	vldr	d7, [pc, #808]	@ 8003300 <main+0xb00>
 8002fd8:	ed9f 6bcb 	vldr	d6, [pc, #812]	@ 8003308 <main+0xb08>
 8002fdc:	f002 f89a 	bl	8005114 <atTargetEG>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f887 3744 	strb.w	r3, [r7, #1860]	@ 0x744

	  switch(mode)
 8002fe6:	4bde      	ldr	r3, [pc, #888]	@ (8003360 <main+0xb60>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	2b15      	cmp	r3, #21
 8002fee:	f200 85da 	bhi.w	8003ba6 <main+0x13a6>
 8002ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff8 <main+0x7f8>)
 8002ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff8:	08003051 	.word	0x08003051
 8002ffc:	0800308f 	.word	0x0800308f
 8003000:	08003113 	.word	0x08003113
 8003004:	080031ab 	.word	0x080031ab
 8003008:	08003217 	.word	0x08003217
 800300c:	080032bd 	.word	0x080032bd
 8003010:	08003371 	.word	0x08003371
 8003014:	080033f1 	.word	0x080033f1
 8003018:	08003481 	.word	0x08003481
 800301c:	080034e7 	.word	0x080034e7
 8003020:	08003587 	.word	0x08003587
 8003024:	080035c3 	.word	0x080035c3
 8003028:	08003641 	.word	0x08003641
 800302c:	08003737 	.word	0x08003737
 8003030:	0800379d 	.word	0x0800379d
 8003034:	0800383d 	.word	0x0800383d
 8003038:	08003879 	.word	0x08003879
 800303c:	080038f7 	.word	0x080038f7
 8003040:	08003987 	.word	0x08003987
 8003044:	08003a51 	.word	0x08003a51
 8003048:	08003af1 	.word	0x08003af1
 800304c:	08003b8d 	.word	0x08003b8d
	  {
	  case RED_STEP:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003050:	2201      	movs	r2, #1
 8003052:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003056:	48c3      	ldr	r0, [pc, #780]	@ (8003364 <main+0xb64>)
 8003058:	f004 fbf4 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800305c:	2200      	movs	r2, #0
 800305e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003062:	48c0      	ldr	r0, [pc, #768]	@ (8003364 <main+0xb64>)
 8003064:	f004 fbee 	bl	8007844 <HAL_GPIO_WritePin>

		  PID_moveToCoordinate(red_step, red_step_parameters, red_step_numPoints);
 8003068:	f8b7 275e 	ldrh.w	r2, [r7, #1886]	@ 0x75e
 800306c:	f507 7136 	add.w	r1, r7, #728	@ 0x2d8
 8003070:	f507 63df 	add.w	r3, r7, #1784	@ 0x6f8
 8003074:	4618      	mov	r0, r3
 8003076:	f002 fa9f 	bl	80055b8 <PID_moveToCoordinate>
		  if(red_step_check)
 800307a:	f897 374f 	ldrb.w	r3, [r7, #1871]	@ 0x74f
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 85b5 	beq.w	8003bee <main+0x13ee>
		  {
			  mode = RED_STORAGE;
 8003084:	4bb6      	ldr	r3, [pc, #728]	@ (8003360 <main+0xb60>)
 8003086:	2202      	movs	r2, #2
 8003088:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800308a:	f000 bdb0 	b.w	8003bee <main+0x13ee>

	  case RED_STORAGE:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800308e:	2200      	movs	r2, #0
 8003090:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003094:	48b3      	ldr	r0, [pc, #716]	@ (8003364 <main+0xb64>)
 8003096:	f004 fbd5 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800309a:	2201      	movs	r2, #1
 800309c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030a0:	48b0      	ldr	r0, [pc, #704]	@ (8003364 <main+0xb64>)
 80030a2:	f004 fbcf 	bl	8007844 <HAL_GPIO_WritePin>

		  setMotorSpeed(1, 0);
 80030a6:	ed9f 0b9a 	vldr	d0, [pc, #616]	@ 8003310 <main+0xb10>
 80030aa:	2001      	movs	r0, #1
 80030ac:	f7fd ffd6 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 80030b0:	ed9f 0b97 	vldr	d0, [pc, #604]	@ 8003310 <main+0xb10>
 80030b4:	2002      	movs	r0, #2
 80030b6:	f7fd ffd1 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 80030ba:	ed9f 0b95 	vldr	d0, [pc, #596]	@ 8003310 <main+0xb10>
 80030be:	2007      	movs	r0, #7
 80030c0:	f7fd ffcc 	bl	800105c <setMotorSpeed>
		  PID_EG(red_storage, 1.8, 0.0, 0.0, 1.5, 0.7, 3500);
 80030c4:	f507 63dc 	add.w	r3, r7, #1760	@ 0x6e0
 80030c8:	ed93 0b00 	vldr	d0, [r3]
 80030cc:	f507 63dd 	add.w	r3, r7, #1768	@ 0x6e8
 80030d0:	ed93 1b00 	vldr	d1, [r3]
 80030d4:	f507 63de 	add.w	r3, r7, #1776	@ 0x6f0
 80030d8:	ed93 2b00 	vldr	d2, [r3]
 80030dc:	a38e      	add	r3, pc, #568	@ (adr r3, 8003318 <main+0xb18>)
 80030de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e2:	e9cd 2300 	strd	r2, r3, [sp]
 80030e6:	ed9f 7b8e 	vldr	d7, [pc, #568]	@ 8003320 <main+0xb20>
 80030ea:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8003328 <main+0xb28>
 80030ee:	ed9f 5b88 	vldr	d5, [pc, #544]	@ 8003310 <main+0xb10>
 80030f2:	ed9f 4b87 	vldr	d4, [pc, #540]	@ 8003310 <main+0xb10>
 80030f6:	ed9f 3b8e 	vldr	d3, [pc, #568]	@ 8003330 <main+0xb30>
 80030fa:	f002 f8d5 	bl	80052a8 <PID_EG>
		  if(red_storage_check)
 80030fe:	f897 374e 	ldrb.w	r3, [r7, #1870]	@ 0x74e
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 8575 	beq.w	8003bf2 <main+0x13f2>
		  {
			  mode = RED_FIND_BALL;
 8003108:	4b95      	ldr	r3, [pc, #596]	@ (8003360 <main+0xb60>)
 800310a:	2203      	movs	r2, #3
 800310c:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800310e:	f000 bd70 	b.w	8003bf2 <main+0x13f2>

	  case RED_FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003112:	2201      	movs	r2, #1
 8003114:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003118:	4892      	ldr	r0, [pc, #584]	@ (8003364 <main+0xb64>)
 800311a:	f004 fb93 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800311e:	2200      	movs	r2, #0
 8003120:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003124:	488f      	ldr	r0, [pc, #572]	@ (8003364 <main+0xb64>)
 8003126:	f004 fb8d 	bl	8007844 <HAL_GPIO_WritePin>

		  findAndTakeBall(redBall);
 800312a:	f507 63cd 	add.w	r3, r7, #1640	@ 0x668
 800312e:	4618      	mov	r0, r3
 8003130:	f003 f8ba 	bl	80062a8 <findAndTakeBall>
//		  if(sensorMEGA[3] == 0)
//		  {
//			  mode = RED_FACING_SILO;
//		  }
		  if(sensorMEGA[3] == 0 && camera[2] == 1)
 8003134:	4b8c      	ldr	r3, [pc, #560]	@ (8003368 <main+0xb68>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d108      	bne.n	800314e <main+0x94e>
 800313c:	4b8b      	ldr	r3, [pc, #556]	@ (800336c <main+0xb6c>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d104      	bne.n	800314e <main+0x94e>
		  {
			  mode = RED_FACING_SILO;
 8003144:	4b86      	ldr	r3, [pc, #536]	@ (8003360 <main+0xb60>)
 8003146:	2204      	movs	r2, #4
 8003148:	701a      	strb	r2, [r3, #0]
		  }
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
		  {
			  throwTheBall(red_throwBall, 1.5, 0.0, 0.0, 1.5);
		  }
		  break;
 800314a:	f000 bd54 	b.w	8003bf6 <main+0x13f6>
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
 800314e:	4b86      	ldr	r3, [pc, #536]	@ (8003368 <main+0xb68>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 854f 	bne.w	8003bf6 <main+0x13f6>
 8003158:	4b84      	ldr	r3, [pc, #528]	@ (800336c <main+0xb6c>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	f040 854a 	bne.w	8003bf6 <main+0x13f6>
			  throwTheBall(red_throwBall, 1.5, 0.0, 0.0, 1.5);
 8003162:	f507 63d6 	add.w	r3, r7, #1712	@ 0x6b0
 8003166:	ed93 1b00 	vldr	d1, [r3]
 800316a:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 800316e:	ed93 2b00 	vldr	d2, [r3]
 8003172:	f507 63d8 	add.w	r3, r7, #1728	@ 0x6c0
 8003176:	ed93 7b00 	vldr	d7, [r3]
 800317a:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8003328 <main+0xb28>
 800317e:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 8003310 <main+0xb10>
 8003182:	ed9f 4b63 	vldr	d4, [pc, #396]	@ 8003310 <main+0xb10>
 8003186:	ed9f 3b68 	vldr	d3, [pc, #416]	@ 8003328 <main+0xb28>
 800318a:	eeb0 0a41 	vmov.f32	s0, s2
 800318e:	eef0 0a61 	vmov.f32	s1, s3
 8003192:	eeb0 1a42 	vmov.f32	s2, s4
 8003196:	eef0 1a62 	vmov.f32	s3, s5
 800319a:	eeb0 2a47 	vmov.f32	s4, s14
 800319e:	eef0 2a67 	vmov.f32	s5, s15
 80031a2:	f003 fb09 	bl	80067b8 <throwTheBall>
		  break;
 80031a6:	f000 bd26 	b.w	8003bf6 <main+0x13f6>

	  case RED_FACING_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80031aa:	2200      	movs	r2, #0
 80031ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80031b0:	486c      	ldr	r0, [pc, #432]	@ (8003364 <main+0xb64>)
 80031b2:	f004 fb47 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80031b6:	2201      	movs	r2, #1
 80031b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031bc:	4869      	ldr	r0, [pc, #420]	@ (8003364 <main+0xb64>)
 80031be:	f004 fb41 	bl	8007844 <HAL_GPIO_WritePin>

		  servo_write(120);
 80031c2:	2078      	movs	r0, #120	@ 0x78
 80031c4:	f002 f858 	bl	8005278 <servo_write>
		  PID_EG(red_silo, 1.8, 0.0, 0.0, 1.5, 0.8, 3000);
 80031c8:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 80031cc:	ed93 0b00 	vldr	d0, [r3]
 80031d0:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 80031d4:	ed93 1b00 	vldr	d1, [r3]
 80031d8:	f507 63db 	add.w	r3, r7, #1752	@ 0x6d8
 80031dc:	ed93 2b00 	vldr	d2, [r3]
 80031e0:	a355      	add	r3, pc, #340	@ (adr r3, 8003338 <main+0xb38>)
 80031e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e6:	e9cd 2300 	strd	r2, r3, [sp]
 80031ea:	ed9f 7b55 	vldr	d7, [pc, #340]	@ 8003340 <main+0xb40>
 80031ee:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 8003328 <main+0xb28>
 80031f2:	ed9f 5b47 	vldr	d5, [pc, #284]	@ 8003310 <main+0xb10>
 80031f6:	ed9f 4b46 	vldr	d4, [pc, #280]	@ 8003310 <main+0xb10>
 80031fa:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8003330 <main+0xb30>
 80031fe:	f002 f853 	bl	80052a8 <PID_EG>
		  if(red_silo_check)
 8003202:	f897 374d 	ldrb.w	r3, [r7, #1869]	@ 0x74d
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 84f7 	beq.w	8003bfa <main+0x13fa>
		  {
			  mode = RED_FIND_SILO;
 800320c:	4b54      	ldr	r3, [pc, #336]	@ (8003360 <main+0xb60>)
 800320e:	2205      	movs	r2, #5
 8003210:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003212:	f000 bcf2 	b.w	8003bfa <main+0x13fa>

	  case RED_FIND_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003216:	2201      	movs	r2, #1
 8003218:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800321c:	4851      	ldr	r0, [pc, #324]	@ (8003364 <main+0xb64>)
 800321e:	f004 fb11 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003222:	2200      	movs	r2, #0
 8003224:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003228:	484e      	ldr	r0, [pc, #312]	@ (8003364 <main+0xb64>)
 800322a:	f004 fb0b 	bl	8007844 <HAL_GPIO_WritePin>

		  placeBallInSilo(red_silo, 1.5, 0.0, 0.0, 1.5, 0.7, 2500);
 800322e:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8003232:	ed93 0b00 	vldr	d0, [r3]
 8003236:	f507 63da 	add.w	r3, r7, #1744	@ 0x6d0
 800323a:	ed93 1b00 	vldr	d1, [r3]
 800323e:	f507 63db 	add.w	r3, r7, #1752	@ 0x6d8
 8003242:	ed93 2b00 	vldr	d2, [r3]
 8003246:	a340      	add	r3, pc, #256	@ (adr r3, 8003348 <main+0xb48>)
 8003248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324c:	e9cd 2300 	strd	r2, r3, [sp]
 8003250:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8003320 <main+0xb20>
 8003254:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8003328 <main+0xb28>
 8003258:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 8003310 <main+0xb10>
 800325c:	ed9f 4b2c 	vldr	d4, [pc, #176]	@ 8003310 <main+0xb10>
 8003260:	ed9f 3b31 	vldr	d3, [pc, #196]	@ 8003328 <main+0xb28>
 8003264:	f002 feb0 	bl	8005fc8 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 8003268:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 800326c:	2b00      	cmp	r3, #0
 800326e:	dd03      	ble.n	8003278 <main+0xa78>
 8003270:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003274:	2b0a      	cmp	r3, #10
 8003276:	dd09      	ble.n	800328c <main+0xa8c>
 8003278:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 800327c:	2b00      	cmp	r3, #0
 800327e:	f340 84be 	ble.w	8003bfe <main+0x13fe>
 8003282:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003286:	2b0a      	cmp	r3, #10
 8003288:	f300 84b9 	bgt.w	8003bfe <main+0x13fe>
		  {
			  setMotorSpeed(1, -2000);
 800328c:	ed9f 0b30 	vldr	d0, [pc, #192]	@ 8003350 <main+0xb50>
 8003290:	2001      	movs	r0, #1
 8003292:	f7fd fee3 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2000);
 8003296:	ed9f 0b2e 	vldr	d0, [pc, #184]	@ 8003350 <main+0xb50>
 800329a:	2002      	movs	r0, #2
 800329c:	f7fd fede 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -2800);
 80032a0:	ed9f 0b2d 	vldr	d0, [pc, #180]	@ 8003358 <main+0xb58>
 80032a4:	2007      	movs	r0, #7
 80032a6:	f7fd fed9 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 80032aa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80032ae:	f003 ff4d 	bl	800714c <HAL_Delay>
			  mode = RED_STORAGE;
 80032b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003360 <main+0xb60>)
 80032b4:	2202      	movs	r2, #2
 80032b6:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80032b8:	f000 bca1 	b.w	8003bfe <main+0x13fe>

	  case RED_RETRY:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80032bc:	2201      	movs	r2, #1
 80032be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80032c2:	4828      	ldr	r0, [pc, #160]	@ (8003364 <main+0xb64>)
 80032c4:	f004 fabe 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80032c8:	2200      	movs	r2, #0
 80032ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032ce:	4825      	ldr	r0, [pc, #148]	@ (8003364 <main+0xb64>)
 80032d0:	f004 fab8 	bl	8007844 <HAL_GPIO_WritePin>

		  PID_moveToCoordinate(red_retry, red_retry_parameters, red_retry_numPoints);
 80032d4:	f8b7 275c 	ldrh.w	r2, [r7, #1884]	@ 0x75c
 80032d8:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 80032dc:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80032e0:	4618      	mov	r0, r3
 80032e2:	f002 f969 	bl	80055b8 <PID_moveToCoordinate>
		  if(red_retry_check)
 80032e6:	f897 374c 	ldrb.w	r3, [r7, #1868]	@ 0x74c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8489 	beq.w	8003c02 <main+0x1402>
		  {
			  mode = RED_RETRY_STORAGE;
 80032f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003360 <main+0xb60>)
 80032f2:	2207      	movs	r2, #7
 80032f4:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80032f6:	f000 bc84 	b.w	8003c02 <main+0x1402>
 80032fa:	bf00      	nop
 80032fc:	f3af 8000 	nop.w
 8003300:	00000000 	.word	0x00000000
 8003304:	3ff00000 	.word	0x3ff00000
 8003308:	00000000 	.word	0x00000000
 800330c:	40790000 	.word	0x40790000
	...
 800331c:	40ab5800 	.word	0x40ab5800
 8003320:	66666666 	.word	0x66666666
 8003324:	3fe66666 	.word	0x3fe66666
 8003328:	00000000 	.word	0x00000000
 800332c:	3ff80000 	.word	0x3ff80000
 8003330:	cccccccd 	.word	0xcccccccd
 8003334:	3ffccccc 	.word	0x3ffccccc
 8003338:	00000000 	.word	0x00000000
 800333c:	40a77000 	.word	0x40a77000
 8003340:	9999999a 	.word	0x9999999a
 8003344:	3fe99999 	.word	0x3fe99999
 8003348:	00000000 	.word	0x00000000
 800334c:	40a38800 	.word	0x40a38800
 8003350:	00000000 	.word	0x00000000
 8003354:	c09f4000 	.word	0xc09f4000
 8003358:	00000000 	.word	0x00000000
 800335c:	c0a5e000 	.word	0xc0a5e000
 8003360:	20000610 	.word	0x20000610
 8003364:	40020c00 	.word	0x40020c00
 8003368:	20000600 	.word	0x20000600
 800336c:	2000057c 	.word	0x2000057c

	  case RED_RETRY_STORAGE:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003370:	2200      	movs	r2, #0
 8003372:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003376:	48d6      	ldr	r0, [pc, #856]	@ (80036d0 <main+0xed0>)
 8003378:	f004 fa64 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800337c:	2201      	movs	r2, #1
 800337e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003382:	48d3      	ldr	r0, [pc, #844]	@ (80036d0 <main+0xed0>)
 8003384:	f004 fa5e 	bl	8007844 <HAL_GPIO_WritePin>

		  setMotorSpeed(1, 0);
 8003388:	ed9f 0bbd 	vldr	d0, [pc, #756]	@ 8003680 <main+0xe80>
 800338c:	2001      	movs	r0, #1
 800338e:	f7fd fe65 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8003392:	ed9f 0bbb 	vldr	d0, [pc, #748]	@ 8003680 <main+0xe80>
 8003396:	2002      	movs	r0, #2
 8003398:	f7fd fe60 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 800339c:	ed9f 0bb8 	vldr	d0, [pc, #736]	@ 8003680 <main+0xe80>
 80033a0:	2007      	movs	r0, #7
 80033a2:	f7fd fe5b 	bl	800105c <setMotorSpeed>
		  PID_EG(red_retry_storage, 1.8, 0.0, 0.0, 1.5, 0.7, 3500);
 80033a6:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80033aa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80033ae:	ed93 0b00 	vldr	d0, [r3]
 80033b2:	ed93 1b02 	vldr	d1, [r3, #8]
 80033b6:	ed93 2b04 	vldr	d2, [r3, #16]
 80033ba:	a3b3      	add	r3, pc, #716	@ (adr r3, 8003688 <main+0xe88>)
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	e9cd 2300 	strd	r2, r3, [sp]
 80033c4:	ed9f 7bb2 	vldr	d7, [pc, #712]	@ 8003690 <main+0xe90>
 80033c8:	ed9f 6bb3 	vldr	d6, [pc, #716]	@ 8003698 <main+0xe98>
 80033cc:	ed9f 5bac 	vldr	d5, [pc, #688]	@ 8003680 <main+0xe80>
 80033d0:	ed9f 4bab 	vldr	d4, [pc, #684]	@ 8003680 <main+0xe80>
 80033d4:	ed9f 3bb2 	vldr	d3, [pc, #712]	@ 80036a0 <main+0xea0>
 80033d8:	f001 ff66 	bl	80052a8 <PID_EG>
		  if(red_retry_storage_check)
 80033dc:	f897 374b 	ldrb.w	r3, [r7, #1867]	@ 0x74b
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8410 	beq.w	8003c06 <main+0x1406>
		  {
			  mode = RED_RETRY_FIND_BALL;
 80033e6:	4bbb      	ldr	r3, [pc, #748]	@ (80036d4 <main+0xed4>)
 80033e8:	2208      	movs	r2, #8
 80033ea:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80033ec:	f000 bc0b 	b.w	8003c06 <main+0x1406>

	  case RED_RETRY_FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80033f0:	2201      	movs	r2, #1
 80033f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80033f6:	48b6      	ldr	r0, [pc, #728]	@ (80036d0 <main+0xed0>)
 80033f8:	f004 fa24 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80033fc:	2200      	movs	r2, #0
 80033fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003402:	48b3      	ldr	r0, [pc, #716]	@ (80036d0 <main+0xed0>)
 8003404:	f004 fa1e 	bl	8007844 <HAL_GPIO_WritePin>

		  findAndTakeBall(redRetryBall);
 8003408:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 800340c:	4618      	mov	r0, r3
 800340e:	f002 ff4b 	bl	80062a8 <findAndTakeBall>
//		  if(sensorMEGA[3] == 0)
//		  {
//			  mode = RED_RETRY_FACING_SILO;
//		  }
		  if(sensorMEGA[3] == 0 && camera[2] == 1)
 8003412:	4bb1      	ldr	r3, [pc, #708]	@ (80036d8 <main+0xed8>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d107      	bne.n	800342a <main+0xc2a>
 800341a:	4bb0      	ldr	r3, [pc, #704]	@ (80036dc <main+0xedc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d103      	bne.n	800342a <main+0xc2a>
		  {
			  mode = RED_RETRY_FACING_SILO;
 8003422:	4bac      	ldr	r3, [pc, #688]	@ (80036d4 <main+0xed4>)
 8003424:	2209      	movs	r2, #9
 8003426:	701a      	strb	r2, [r3, #0]
		  }
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
		  {
			  throwTheBall(red_retry_throwBall, 1.5, 0.0, 0.0, 1.5);
		  }
		  break;
 8003428:	e3ef      	b.n	8003c0a <main+0x140a>
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
 800342a:	4bab      	ldr	r3, [pc, #684]	@ (80036d8 <main+0xed8>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f040 83eb 	bne.w	8003c0a <main+0x140a>
 8003434:	4ba9      	ldr	r3, [pc, #676]	@ (80036dc <main+0xedc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	f040 83e6 	bne.w	8003c0a <main+0x140a>
			  throwTheBall(red_retry_throwBall, 1.5, 0.0, 0.0, 1.5);
 800343e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8003442:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003446:	ed93 1b00 	vldr	d1, [r3]
 800344a:	ed93 2b02 	vldr	d2, [r3, #8]
 800344e:	ed93 7b04 	vldr	d7, [r3, #16]
 8003452:	ed9f 6b91 	vldr	d6, [pc, #580]	@ 8003698 <main+0xe98>
 8003456:	ed9f 5b8a 	vldr	d5, [pc, #552]	@ 8003680 <main+0xe80>
 800345a:	ed9f 4b89 	vldr	d4, [pc, #548]	@ 8003680 <main+0xe80>
 800345e:	ed9f 3b8e 	vldr	d3, [pc, #568]	@ 8003698 <main+0xe98>
 8003462:	eeb0 0a41 	vmov.f32	s0, s2
 8003466:	eef0 0a61 	vmov.f32	s1, s3
 800346a:	eeb0 1a42 	vmov.f32	s2, s4
 800346e:	eef0 1a62 	vmov.f32	s3, s5
 8003472:	eeb0 2a47 	vmov.f32	s4, s14
 8003476:	eef0 2a67 	vmov.f32	s5, s15
 800347a:	f003 f99d 	bl	80067b8 <throwTheBall>
		  break;
 800347e:	e3c4      	b.n	8003c0a <main+0x140a>

	  case RED_RETRY_FACING_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003480:	2200      	movs	r2, #0
 8003482:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003486:	4892      	ldr	r0, [pc, #584]	@ (80036d0 <main+0xed0>)
 8003488:	f004 f9dc 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800348c:	2201      	movs	r2, #1
 800348e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003492:	488f      	ldr	r0, [pc, #572]	@ (80036d0 <main+0xed0>)
 8003494:	f004 f9d6 	bl	8007844 <HAL_GPIO_WritePin>

		  servo_write(120);
 8003498:	2078      	movs	r0, #120	@ 0x78
 800349a:	f001 feed 	bl	8005278 <servo_write>
		  PID_EG(red_retry_silo, 1.8, 0.0, 0.0, 1.5, 0.8, 3000);
 800349e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80034a2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80034a6:	ed93 0b00 	vldr	d0, [r3]
 80034aa:	ed93 1b02 	vldr	d1, [r3, #8]
 80034ae:	ed93 2b04 	vldr	d2, [r3, #16]
 80034b2:	a37d      	add	r3, pc, #500	@ (adr r3, 80036a8 <main+0xea8>)
 80034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b8:	e9cd 2300 	strd	r2, r3, [sp]
 80034bc:	ed9f 7b7c 	vldr	d7, [pc, #496]	@ 80036b0 <main+0xeb0>
 80034c0:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8003698 <main+0xe98>
 80034c4:	ed9f 5b6e 	vldr	d5, [pc, #440]	@ 8003680 <main+0xe80>
 80034c8:	ed9f 4b6d 	vldr	d4, [pc, #436]	@ 8003680 <main+0xe80>
 80034cc:	ed9f 3b74 	vldr	d3, [pc, #464]	@ 80036a0 <main+0xea0>
 80034d0:	f001 feea 	bl	80052a8 <PID_EG>
		  if(red_retry_silo_check)
 80034d4:	f897 374a 	ldrb.w	r3, [r7, #1866]	@ 0x74a
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8398 	beq.w	8003c0e <main+0x140e>
		  {
			  mode = RED_RETRY_FIND_SILO;
 80034de:	4b7d      	ldr	r3, [pc, #500]	@ (80036d4 <main+0xed4>)
 80034e0:	220a      	movs	r2, #10
 80034e2:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80034e4:	e393      	b.n	8003c0e <main+0x140e>

	  case RED_RETRY_FIND_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80034e6:	2201      	movs	r2, #1
 80034e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80034ec:	4878      	ldr	r0, [pc, #480]	@ (80036d0 <main+0xed0>)
 80034ee:	f004 f9a9 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80034f2:	2200      	movs	r2, #0
 80034f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034f8:	4875      	ldr	r0, [pc, #468]	@ (80036d0 <main+0xed0>)
 80034fa:	f004 f9a3 	bl	8007844 <HAL_GPIO_WritePin>

		  placeBallInSilo(red_retry_silo, 1.5, 0.0, 0.0, 1.5, 0.7, 2500);
 80034fe:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8003502:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003506:	ed93 0b00 	vldr	d0, [r3]
 800350a:	ed93 1b02 	vldr	d1, [r3, #8]
 800350e:	ed93 2b04 	vldr	d2, [r3, #16]
 8003512:	a369      	add	r3, pc, #420	@ (adr r3, 80036b8 <main+0xeb8>)
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	e9cd 2300 	strd	r2, r3, [sp]
 800351c:	ed9f 7b5c 	vldr	d7, [pc, #368]	@ 8003690 <main+0xe90>
 8003520:	ed9f 6b5d 	vldr	d6, [pc, #372]	@ 8003698 <main+0xe98>
 8003524:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8003680 <main+0xe80>
 8003528:	ed9f 4b55 	vldr	d4, [pc, #340]	@ 8003680 <main+0xe80>
 800352c:	ed9f 3b5a 	vldr	d3, [pc, #360]	@ 8003698 <main+0xe98>
 8003530:	f002 fd4a 	bl	8005fc8 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 8003534:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003538:	2b00      	cmp	r3, #0
 800353a:	dd03      	ble.n	8003544 <main+0xd44>
 800353c:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003540:	2b0a      	cmp	r3, #10
 8003542:	dd09      	ble.n	8003558 <main+0xd58>
 8003544:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003548:	2b00      	cmp	r3, #0
 800354a:	f340 8362 	ble.w	8003c12 <main+0x1412>
 800354e:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003552:	2b0a      	cmp	r3, #10
 8003554:	f300 835d 	bgt.w	8003c12 <main+0x1412>
		  {
			  setMotorSpeed(1, -2000);
 8003558:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 80036c0 <main+0xec0>
 800355c:	2001      	movs	r0, #1
 800355e:	f7fd fd7d 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2000);
 8003562:	ed9f 0b57 	vldr	d0, [pc, #348]	@ 80036c0 <main+0xec0>
 8003566:	2002      	movs	r0, #2
 8003568:	f7fd fd78 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -2800);
 800356c:	ed9f 0b56 	vldr	d0, [pc, #344]	@ 80036c8 <main+0xec8>
 8003570:	2007      	movs	r0, #7
 8003572:	f7fd fd73 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 8003576:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800357a:	f003 fde7 	bl	800714c <HAL_Delay>
			  mode = RED_RETRY_STORAGE;
 800357e:	4b55      	ldr	r3, [pc, #340]	@ (80036d4 <main+0xed4>)
 8003580:	2207      	movs	r2, #7
 8003582:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003584:	e345      	b.n	8003c12 <main+0x1412>

	  case BLUE_STEP:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003586:	2201      	movs	r2, #1
 8003588:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800358c:	4850      	ldr	r0, [pc, #320]	@ (80036d0 <main+0xed0>)
 800358e:	f004 f959 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003592:	2200      	movs	r2, #0
 8003594:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003598:	484d      	ldr	r0, [pc, #308]	@ (80036d0 <main+0xed0>)
 800359a:	f004 f953 	bl	8007844 <HAL_GPIO_WritePin>

		  PID_moveToCoordinate(blue_step, blue_step_parameters, blue_step_numPoints);
 800359e:	f8b7 275a 	ldrh.w	r2, [r7, #1882]	@ 0x75a
 80035a2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80035a6:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 80035aa:	4618      	mov	r0, r3
 80035ac:	f002 f804 	bl	80055b8 <PID_moveToCoordinate>
		  if(blue_step_check)
 80035b0:	f897 3749 	ldrb.w	r3, [r7, #1865]	@ 0x749
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 832e 	beq.w	8003c16 <main+0x1416>
		  {
			  mode = BLUE_STORAGE;
 80035ba:	4b46      	ldr	r3, [pc, #280]	@ (80036d4 <main+0xed4>)
 80035bc:	220c      	movs	r2, #12
 80035be:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80035c0:	e329      	b.n	8003c16 <main+0x1416>

	  case BLUE_STORAGE:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80035c2:	2200      	movs	r2, #0
 80035c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80035c8:	4841      	ldr	r0, [pc, #260]	@ (80036d0 <main+0xed0>)
 80035ca:	f004 f93b 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80035ce:	2201      	movs	r2, #1
 80035d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035d4:	483e      	ldr	r0, [pc, #248]	@ (80036d0 <main+0xed0>)
 80035d6:	f004 f935 	bl	8007844 <HAL_GPIO_WritePin>

		  setMotorSpeed(1, 0);
 80035da:	ed9f 0b29 	vldr	d0, [pc, #164]	@ 8003680 <main+0xe80>
 80035de:	2001      	movs	r0, #1
 80035e0:	f7fd fd3c 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 80035e4:	ed9f 0b26 	vldr	d0, [pc, #152]	@ 8003680 <main+0xe80>
 80035e8:	2002      	movs	r0, #2
 80035ea:	f7fd fd37 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 80035ee:	ed9f 0b24 	vldr	d0, [pc, #144]	@ 8003680 <main+0xe80>
 80035f2:	2007      	movs	r0, #7
 80035f4:	f7fd fd32 	bl	800105c <setMotorSpeed>
		  PID_EG(blue_storage, 1.8, 0.0, 0.0, 1.5, 0.7, 3500);
 80035f8:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80035fc:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003600:	ed93 0b00 	vldr	d0, [r3]
 8003604:	ed93 1b02 	vldr	d1, [r3, #8]
 8003608:	ed93 2b04 	vldr	d2, [r3, #16]
 800360c:	a31e      	add	r3, pc, #120	@ (adr r3, 8003688 <main+0xe88>)
 800360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003612:	e9cd 2300 	strd	r2, r3, [sp]
 8003616:	ed9f 7b1e 	vldr	d7, [pc, #120]	@ 8003690 <main+0xe90>
 800361a:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8003698 <main+0xe98>
 800361e:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8003680 <main+0xe80>
 8003622:	ed9f 4b17 	vldr	d4, [pc, #92]	@ 8003680 <main+0xe80>
 8003626:	ed9f 3b1e 	vldr	d3, [pc, #120]	@ 80036a0 <main+0xea0>
 800362a:	f001 fe3d 	bl	80052a8 <PID_EG>
		  if(blue_storage_check)
 800362e:	f897 3748 	ldrb.w	r3, [r7, #1864]	@ 0x748
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 82f1 	beq.w	8003c1a <main+0x141a>
		  {
			  mode = BLUE_FIND_BALL;
 8003638:	4b26      	ldr	r3, [pc, #152]	@ (80036d4 <main+0xed4>)
 800363a:	220d      	movs	r2, #13
 800363c:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800363e:	e2ec      	b.n	8003c1a <main+0x141a>

	  case BLUE_FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003640:	2201      	movs	r2, #1
 8003642:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003646:	4822      	ldr	r0, [pc, #136]	@ (80036d0 <main+0xed0>)
 8003648:	f004 f8fc 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800364c:	2200      	movs	r2, #0
 800364e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003652:	481f      	ldr	r0, [pc, #124]	@ (80036d0 <main+0xed0>)
 8003654:	f004 f8f6 	bl	8007844 <HAL_GPIO_WritePin>

		  findAndTakeBall(blueBall);
 8003658:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800365c:	4618      	mov	r0, r3
 800365e:	f002 fe23 	bl	80062a8 <findAndTakeBall>
//		  if(sensorMEGA[3] == 0)
//		  {
//			  mode = BLUE_FACING_SILO;
//		  }
		  if(sensorMEGA[3] == 0 && camera[2] == 1)
 8003662:	4b1d      	ldr	r3, [pc, #116]	@ (80036d8 <main+0xed8>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d13a      	bne.n	80036e0 <main+0xee0>
 800366a:	4b1c      	ldr	r3, [pc, #112]	@ (80036dc <main+0xedc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d136      	bne.n	80036e0 <main+0xee0>
		  {
			  mode = BLUE_FACING_SILO;
 8003672:	4b18      	ldr	r3, [pc, #96]	@ (80036d4 <main+0xed4>)
 8003674:	220e      	movs	r2, #14
 8003676:	701a      	strb	r2, [r3, #0]
		  }
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
		  {
			  throwTheBall(blue_throwBall, 1.5, 0.0, 0.0, 1.5);
		  }
		  break;
 8003678:	e2d1      	b.n	8003c1e <main+0x141e>
 800367a:	bf00      	nop
 800367c:	f3af 8000 	nop.w
	...
 800368c:	40ab5800 	.word	0x40ab5800
 8003690:	66666666 	.word	0x66666666
 8003694:	3fe66666 	.word	0x3fe66666
 8003698:	00000000 	.word	0x00000000
 800369c:	3ff80000 	.word	0x3ff80000
 80036a0:	cccccccd 	.word	0xcccccccd
 80036a4:	3ffccccc 	.word	0x3ffccccc
 80036a8:	00000000 	.word	0x00000000
 80036ac:	40a77000 	.word	0x40a77000
 80036b0:	9999999a 	.word	0x9999999a
 80036b4:	3fe99999 	.word	0x3fe99999
 80036b8:	00000000 	.word	0x00000000
 80036bc:	40a38800 	.word	0x40a38800
 80036c0:	00000000 	.word	0x00000000
 80036c4:	c09f4000 	.word	0xc09f4000
 80036c8:	00000000 	.word	0x00000000
 80036cc:	c0a5e000 	.word	0xc0a5e000
 80036d0:	40020c00 	.word	0x40020c00
 80036d4:	20000610 	.word	0x20000610
 80036d8:	20000600 	.word	0x20000600
 80036dc:	2000057c 	.word	0x2000057c
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
 80036e0:	4bd7      	ldr	r3, [pc, #860]	@ (8003a40 <main+0x1240>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f040 829a 	bne.w	8003c1e <main+0x141e>
 80036ea:	4bd6      	ldr	r3, [pc, #856]	@ (8003a44 <main+0x1244>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f040 8295 	bne.w	8003c1e <main+0x141e>
			  throwTheBall(blue_throwBall, 1.5, 0.0, 0.0, 1.5);
 80036f4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80036f8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80036fc:	ed93 1b00 	vldr	d1, [r3]
 8003700:	ed93 2b02 	vldr	d2, [r3, #8]
 8003704:	ed93 7b04 	vldr	d7, [r3, #16]
 8003708:	ed9f 6bb9 	vldr	d6, [pc, #740]	@ 80039f0 <main+0x11f0>
 800370c:	ed9f 5bba 	vldr	d5, [pc, #744]	@ 80039f8 <main+0x11f8>
 8003710:	ed9f 4bb9 	vldr	d4, [pc, #740]	@ 80039f8 <main+0x11f8>
 8003714:	ed9f 3bb6 	vldr	d3, [pc, #728]	@ 80039f0 <main+0x11f0>
 8003718:	eeb0 0a41 	vmov.f32	s0, s2
 800371c:	eef0 0a61 	vmov.f32	s1, s3
 8003720:	eeb0 1a42 	vmov.f32	s2, s4
 8003724:	eef0 1a62 	vmov.f32	s3, s5
 8003728:	eeb0 2a47 	vmov.f32	s4, s14
 800372c:	eef0 2a67 	vmov.f32	s5, s15
 8003730:	f003 f842 	bl	80067b8 <throwTheBall>
		  break;
 8003734:	e273      	b.n	8003c1e <main+0x141e>

	  case BLUE_FACING_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003736:	2200      	movs	r2, #0
 8003738:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800373c:	48c2      	ldr	r0, [pc, #776]	@ (8003a48 <main+0x1248>)
 800373e:	f004 f881 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8003742:	2201      	movs	r2, #1
 8003744:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003748:	48bf      	ldr	r0, [pc, #764]	@ (8003a48 <main+0x1248>)
 800374a:	f004 f87b 	bl	8007844 <HAL_GPIO_WritePin>

		  servo_write(120);
 800374e:	2078      	movs	r0, #120	@ 0x78
 8003750:	f001 fd92 	bl	8005278 <servo_write>
		  PID_EG(blue_silo, 1.8, 0.0, 0.0, 1.5, 0.8, 3000);
 8003754:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8003758:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800375c:	ed93 0b00 	vldr	d0, [r3]
 8003760:	ed93 1b02 	vldr	d1, [r3, #8]
 8003764:	ed93 2b04 	vldr	d2, [r3, #16]
 8003768:	a3a5      	add	r3, pc, #660	@ (adr r3, 8003a00 <main+0x1200>)
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	e9cd 2300 	strd	r2, r3, [sp]
 8003772:	ed9f 7ba5 	vldr	d7, [pc, #660]	@ 8003a08 <main+0x1208>
 8003776:	ed9f 6b9e 	vldr	d6, [pc, #632]	@ 80039f0 <main+0x11f0>
 800377a:	ed9f 5b9f 	vldr	d5, [pc, #636]	@ 80039f8 <main+0x11f8>
 800377e:	ed9f 4b9e 	vldr	d4, [pc, #632]	@ 80039f8 <main+0x11f8>
 8003782:	ed9f 3ba3 	vldr	d3, [pc, #652]	@ 8003a10 <main+0x1210>
 8003786:	f001 fd8f 	bl	80052a8 <PID_EG>
		  if(blue_silo_check)
 800378a:	f897 3747 	ldrb.w	r3, [r7, #1863]	@ 0x747
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8247 	beq.w	8003c22 <main+0x1422>
		  {
			  mode = BLUE_FIND_SILO;
 8003794:	4bad      	ldr	r3, [pc, #692]	@ (8003a4c <main+0x124c>)
 8003796:	220f      	movs	r2, #15
 8003798:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800379a:	e242      	b.n	8003c22 <main+0x1422>

	  case BLUE_FIND_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800379c:	2201      	movs	r2, #1
 800379e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037a2:	48a9      	ldr	r0, [pc, #676]	@ (8003a48 <main+0x1248>)
 80037a4:	f004 f84e 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80037a8:	2200      	movs	r2, #0
 80037aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037ae:	48a6      	ldr	r0, [pc, #664]	@ (8003a48 <main+0x1248>)
 80037b0:	f004 f848 	bl	8007844 <HAL_GPIO_WritePin>

		  placeBallInSilo(blue_silo, 1.5, 0.0, 0.0, 1.5, 0.7, 2500);
 80037b4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80037b8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80037bc:	ed93 0b00 	vldr	d0, [r3]
 80037c0:	ed93 1b02 	vldr	d1, [r3, #8]
 80037c4:	ed93 2b04 	vldr	d2, [r3, #16]
 80037c8:	a393      	add	r3, pc, #588	@ (adr r3, 8003a18 <main+0x1218>)
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	e9cd 2300 	strd	r2, r3, [sp]
 80037d2:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8003a20 <main+0x1220>
 80037d6:	ed9f 6b86 	vldr	d6, [pc, #536]	@ 80039f0 <main+0x11f0>
 80037da:	ed9f 5b87 	vldr	d5, [pc, #540]	@ 80039f8 <main+0x11f8>
 80037de:	ed9f 4b86 	vldr	d4, [pc, #536]	@ 80039f8 <main+0x11f8>
 80037e2:	ed9f 3b83 	vldr	d3, [pc, #524]	@ 80039f0 <main+0x11f0>
 80037e6:	f002 fbef 	bl	8005fc8 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 80037ea:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	dd03      	ble.n	80037fa <main+0xffa>
 80037f2:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 80037f6:	2b0a      	cmp	r3, #10
 80037f8:	dd09      	ble.n	800380e <main+0x100e>
 80037fa:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f340 8211 	ble.w	8003c26 <main+0x1426>
 8003804:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003808:	2b0a      	cmp	r3, #10
 800380a:	f300 820c 	bgt.w	8003c26 <main+0x1426>
		  {
			  setMotorSpeed(1, -2000);
 800380e:	ed9f 0b86 	vldr	d0, [pc, #536]	@ 8003a28 <main+0x1228>
 8003812:	2001      	movs	r0, #1
 8003814:	f7fd fc22 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2000);
 8003818:	ed9f 0b83 	vldr	d0, [pc, #524]	@ 8003a28 <main+0x1228>
 800381c:	2002      	movs	r0, #2
 800381e:	f7fd fc1d 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -2800);
 8003822:	ed9f 0b83 	vldr	d0, [pc, #524]	@ 8003a30 <main+0x1230>
 8003826:	2007      	movs	r0, #7
 8003828:	f7fd fc18 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 800382c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003830:	f003 fc8c 	bl	800714c <HAL_Delay>
			  mode = BLUE_STORAGE;
 8003834:	4b85      	ldr	r3, [pc, #532]	@ (8003a4c <main+0x124c>)
 8003836:	220c      	movs	r2, #12
 8003838:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800383a:	e1f4      	b.n	8003c26 <main+0x1426>

	  case BLUE_RETRY:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800383c:	2201      	movs	r2, #1
 800383e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003842:	4881      	ldr	r0, [pc, #516]	@ (8003a48 <main+0x1248>)
 8003844:	f003 fffe 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003848:	2200      	movs	r2, #0
 800384a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800384e:	487e      	ldr	r0, [pc, #504]	@ (8003a48 <main+0x1248>)
 8003850:	f003 fff8 	bl	8007844 <HAL_GPIO_WritePin>

		  PID_moveToCoordinate(blue_retry, blue_retry_parameters, blue_retry_numPoints);
 8003854:	f8b7 2758 	ldrh.w	r2, [r7, #1880]	@ 0x758
 8003858:	f107 0118 	add.w	r1, r7, #24
 800385c:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8003860:	4618      	mov	r0, r3
 8003862:	f001 fea9 	bl	80055b8 <PID_moveToCoordinate>
		  if(blue_retry_check)
 8003866:	f897 3746 	ldrb.w	r3, [r7, #1862]	@ 0x746
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 81dd 	beq.w	8003c2a <main+0x142a>
		  {
			  mode = BLUE_RETRY_STORAGE;
 8003870:	4b76      	ldr	r3, [pc, #472]	@ (8003a4c <main+0x124c>)
 8003872:	2211      	movs	r2, #17
 8003874:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003876:	e1d8      	b.n	8003c2a <main+0x142a>

	  case BLUE_RETRY_STORAGE:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003878:	2200      	movs	r2, #0
 800387a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800387e:	4872      	ldr	r0, [pc, #456]	@ (8003a48 <main+0x1248>)
 8003880:	f003 ffe0 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8003884:	2201      	movs	r2, #1
 8003886:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800388a:	486f      	ldr	r0, [pc, #444]	@ (8003a48 <main+0x1248>)
 800388c:	f003 ffda 	bl	8007844 <HAL_GPIO_WritePin>

		  setMotorSpeed(1, 0);
 8003890:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 80039f8 <main+0x11f8>
 8003894:	2001      	movs	r0, #1
 8003896:	f7fd fbe1 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 800389a:	ed9f 0b57 	vldr	d0, [pc, #348]	@ 80039f8 <main+0x11f8>
 800389e:	2002      	movs	r0, #2
 80038a0:	f7fd fbdc 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 80038a4:	ed9f 0b54 	vldr	d0, [pc, #336]	@ 80039f8 <main+0x11f8>
 80038a8:	2007      	movs	r0, #7
 80038aa:	f7fd fbd7 	bl	800105c <setMotorSpeed>
		  PID_EG(blue_retry_storage, 1.8, 0.0, 0.0, 1.5, 0.7, 3500);
 80038ae:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80038b2:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80038b6:	ed93 0b00 	vldr	d0, [r3]
 80038ba:	ed93 1b02 	vldr	d1, [r3, #8]
 80038be:	ed93 2b04 	vldr	d2, [r3, #16]
 80038c2:	a35d      	add	r3, pc, #372	@ (adr r3, 8003a38 <main+0x1238>)
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	e9cd 2300 	strd	r2, r3, [sp]
 80038cc:	ed9f 7b54 	vldr	d7, [pc, #336]	@ 8003a20 <main+0x1220>
 80038d0:	ed9f 6b47 	vldr	d6, [pc, #284]	@ 80039f0 <main+0x11f0>
 80038d4:	ed9f 5b48 	vldr	d5, [pc, #288]	@ 80039f8 <main+0x11f8>
 80038d8:	ed9f 4b47 	vldr	d4, [pc, #284]	@ 80039f8 <main+0x11f8>
 80038dc:	ed9f 3b4c 	vldr	d3, [pc, #304]	@ 8003a10 <main+0x1210>
 80038e0:	f001 fce2 	bl	80052a8 <PID_EG>
		  if(blue_retry_storage_check)
 80038e4:	f897 3745 	ldrb.w	r3, [r7, #1861]	@ 0x745
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 81a0 	beq.w	8003c2e <main+0x142e>
		  {
			  mode = BLUE_RETRY_FIND_BALL;
 80038ee:	4b57      	ldr	r3, [pc, #348]	@ (8003a4c <main+0x124c>)
 80038f0:	2212      	movs	r2, #18
 80038f2:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80038f4:	e19b      	b.n	8003c2e <main+0x142e>

	  case BLUE_RETRY_FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80038f6:	2201      	movs	r2, #1
 80038f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80038fc:	4852      	ldr	r0, [pc, #328]	@ (8003a48 <main+0x1248>)
 80038fe:	f003 ffa1 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003902:	2200      	movs	r2, #0
 8003904:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003908:	484f      	ldr	r0, [pc, #316]	@ (8003a48 <main+0x1248>)
 800390a:	f003 ff9b 	bl	8007844 <HAL_GPIO_WritePin>

		  findAndTakeBall(blueRetryBall);
 800390e:	f507 736c 	add.w	r3, r7, #944	@ 0x3b0
 8003912:	4618      	mov	r0, r3
 8003914:	f002 fcc8 	bl	80062a8 <findAndTakeBall>
//		  if(sensorMEGA[3] == 0)
//		  {
//			  mode = BLUE_RETRY_FACING_SILO;
//		  }
		  if(sensorMEGA[3] == 0 && camera[2] == 1)
 8003918:	4b49      	ldr	r3, [pc, #292]	@ (8003a40 <main+0x1240>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <main+0x1130>
 8003920:	4b48      	ldr	r3, [pc, #288]	@ (8003a44 <main+0x1244>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d103      	bne.n	8003930 <main+0x1130>
		  {
			  mode = BLUE_RETRY_FACING_SILO;
 8003928:	4b48      	ldr	r3, [pc, #288]	@ (8003a4c <main+0x124c>)
 800392a:	2213      	movs	r2, #19
 800392c:	701a      	strb	r2, [r3, #0]
		  }
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
		  {
			  throwTheBall(blue_retry_throwBall, 1.5, 0.0, 0.0, 1.5);
		  }
		  break;
 800392e:	e180      	b.n	8003c32 <main+0x1432>
		  else if(sensorMEGA[3] == 0 && camera[2] == 0)
 8003930:	4b43      	ldr	r3, [pc, #268]	@ (8003a40 <main+0x1240>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	f040 817c 	bne.w	8003c32 <main+0x1432>
 800393a:	4b42      	ldr	r3, [pc, #264]	@ (8003a44 <main+0x1244>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f040 8177 	bne.w	8003c32 <main+0x1432>
			  throwTheBall(blue_retry_throwBall, 1.5, 0.0, 0.0, 1.5);
 8003944:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8003948:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 800394c:	ed93 1b00 	vldr	d1, [r3]
 8003950:	ed93 2b02 	vldr	d2, [r3, #8]
 8003954:	ed93 7b04 	vldr	d7, [r3, #16]
 8003958:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 80039f0 <main+0x11f0>
 800395c:	ed9f 5b26 	vldr	d5, [pc, #152]	@ 80039f8 <main+0x11f8>
 8003960:	ed9f 4b25 	vldr	d4, [pc, #148]	@ 80039f8 <main+0x11f8>
 8003964:	ed9f 3b22 	vldr	d3, [pc, #136]	@ 80039f0 <main+0x11f0>
 8003968:	eeb0 0a41 	vmov.f32	s0, s2
 800396c:	eef0 0a61 	vmov.f32	s1, s3
 8003970:	eeb0 1a42 	vmov.f32	s2, s4
 8003974:	eef0 1a62 	vmov.f32	s3, s5
 8003978:	eeb0 2a47 	vmov.f32	s4, s14
 800397c:	eef0 2a67 	vmov.f32	s5, s15
 8003980:	f002 ff1a 	bl	80067b8 <throwTheBall>
		  break;
 8003984:	e155      	b.n	8003c32 <main+0x1432>

	  case BLUE_RETRY_FACING_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003986:	2200      	movs	r2, #0
 8003988:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800398c:	482e      	ldr	r0, [pc, #184]	@ (8003a48 <main+0x1248>)
 800398e:	f003 ff59 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8003992:	2201      	movs	r2, #1
 8003994:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003998:	482b      	ldr	r0, [pc, #172]	@ (8003a48 <main+0x1248>)
 800399a:	f003 ff53 	bl	8007844 <HAL_GPIO_WritePin>

		  servo_write(120);
 800399e:	2078      	movs	r0, #120	@ 0x78
 80039a0:	f001 fc6a 	bl	8005278 <servo_write>
		  PID_EG(blue_retry_silo, 1.8, 0.0, 0.0, 1.5, 0.8, 3000);
 80039a4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80039a8:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80039ac:	ed93 0b00 	vldr	d0, [r3]
 80039b0:	ed93 1b02 	vldr	d1, [r3, #8]
 80039b4:	ed93 2b04 	vldr	d2, [r3, #16]
 80039b8:	a311      	add	r3, pc, #68	@ (adr r3, 8003a00 <main+0x1200>)
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	e9cd 2300 	strd	r2, r3, [sp]
 80039c2:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8003a08 <main+0x1208>
 80039c6:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 80039f0 <main+0x11f0>
 80039ca:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80039f8 <main+0x11f8>
 80039ce:	ed9f 4b0a 	vldr	d4, [pc, #40]	@ 80039f8 <main+0x11f8>
 80039d2:	ed9f 3b0f 	vldr	d3, [pc, #60]	@ 8003a10 <main+0x1210>
 80039d6:	f001 fc67 	bl	80052a8 <PID_EG>
		  if(blue_retry_silo_check)
 80039da:	f897 3744 	ldrb.w	r3, [r7, #1860]	@ 0x744
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8129 	beq.w	8003c36 <main+0x1436>
		  {
			  mode = BLUE_RETRY_FIND_SILO;
 80039e4:	4b19      	ldr	r3, [pc, #100]	@ (8003a4c <main+0x124c>)
 80039e6:	2214      	movs	r2, #20
 80039e8:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80039ea:	e124      	b.n	8003c36 <main+0x1436>
 80039ec:	f3af 8000 	nop.w
 80039f0:	00000000 	.word	0x00000000
 80039f4:	3ff80000 	.word	0x3ff80000
	...
 8003a04:	40a77000 	.word	0x40a77000
 8003a08:	9999999a 	.word	0x9999999a
 8003a0c:	3fe99999 	.word	0x3fe99999
 8003a10:	cccccccd 	.word	0xcccccccd
 8003a14:	3ffccccc 	.word	0x3ffccccc
 8003a18:	00000000 	.word	0x00000000
 8003a1c:	40a38800 	.word	0x40a38800
 8003a20:	66666666 	.word	0x66666666
 8003a24:	3fe66666 	.word	0x3fe66666
 8003a28:	00000000 	.word	0x00000000
 8003a2c:	c09f4000 	.word	0xc09f4000
 8003a30:	00000000 	.word	0x00000000
 8003a34:	c0a5e000 	.word	0xc0a5e000
 8003a38:	00000000 	.word	0x00000000
 8003a3c:	40ab5800 	.word	0x40ab5800
 8003a40:	20000600 	.word	0x20000600
 8003a44:	2000057c 	.word	0x2000057c
 8003a48:	40020c00 	.word	0x40020c00
 8003a4c:	20000610 	.word	0x20000610

	  case BLUE_RETRY_FIND_SILO:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003a50:	2201      	movs	r2, #1
 8003a52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a56:	4888      	ldr	r0, [pc, #544]	@ (8003c78 <main+0x1478>)
 8003a58:	f003 fef4 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a62:	4885      	ldr	r0, [pc, #532]	@ (8003c78 <main+0x1478>)
 8003a64:	f003 feee 	bl	8007844 <HAL_GPIO_WritePin>

		  placeBallInSilo(blue_retry_silo, 1.5, 0.0, 0.0, 1.5, 0.7, 2500);
 8003a68:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8003a6c:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8003a70:	ed93 0b00 	vldr	d0, [r3]
 8003a74:	ed93 1b02 	vldr	d1, [r3, #8]
 8003a78:	ed93 2b04 	vldr	d2, [r3, #16]
 8003a7c:	a372      	add	r3, pc, #456	@ (adr r3, 8003c48 <main+0x1448>)
 8003a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a82:	e9cd 2300 	strd	r2, r3, [sp]
 8003a86:	ed9f 7b72 	vldr	d7, [pc, #456]	@ 8003c50 <main+0x1450>
 8003a8a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8003c58 <main+0x1458>
 8003a8e:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 8003c60 <main+0x1460>
 8003a92:	ed9f 4b73 	vldr	d4, [pc, #460]	@ 8003c60 <main+0x1460>
 8003a96:	ed9f 3b70 	vldr	d3, [pc, #448]	@ 8003c58 <main+0x1458>
 8003a9a:	f002 fa95 	bl	8005fc8 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 8003a9e:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	dd03      	ble.n	8003aae <main+0x12ae>
 8003aa6:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003aaa:	2b0a      	cmp	r3, #10
 8003aac:	dd09      	ble.n	8003ac2 <main+0x12c2>
 8003aae:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f340 80c1 	ble.w	8003c3a <main+0x143a>
 8003ab8:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003abc:	2b0a      	cmp	r3, #10
 8003abe:	f300 80bc 	bgt.w	8003c3a <main+0x143a>
		  {
			  setMotorSpeed(1, -2000);
 8003ac2:	ed9f 0b69 	vldr	d0, [pc, #420]	@ 8003c68 <main+0x1468>
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	f7fd fac8 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2000);
 8003acc:	ed9f 0b66 	vldr	d0, [pc, #408]	@ 8003c68 <main+0x1468>
 8003ad0:	2002      	movs	r0, #2
 8003ad2:	f7fd fac3 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -2800);
 8003ad6:	ed9f 0b66 	vldr	d0, [pc, #408]	@ 8003c70 <main+0x1470>
 8003ada:	2007      	movs	r0, #7
 8003adc:	f7fd fabe 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 8003ae0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003ae4:	f003 fb32 	bl	800714c <HAL_Delay>
			  mode = BLUE_RETRY_STORAGE;
 8003ae8:	4b64      	ldr	r3, [pc, #400]	@ (8003c7c <main+0x147c>)
 8003aea:	2211      	movs	r2, #17
 8003aec:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003aee:	e0a4      	b.n	8003c3a <main+0x143a>

	  case TES:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003af0:	2201      	movs	r2, #1
 8003af2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003af6:	4860      	ldr	r0, [pc, #384]	@ (8003c78 <main+0x1478>)
 8003af8:	f003 fea4 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003afc:	2200      	movs	r2, #0
 8003afe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b02:	485d      	ldr	r0, [pc, #372]	@ (8003c78 <main+0x1478>)
 8003b04:	f003 fe9e 	bl	8007844 <HAL_GPIO_WritePin>

		  placeBallInSilo(tes, 1.5, 0.0, 0.0, 1.5, 0.7, 2500);
 8003b08:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8003b0c:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8003b10:	ed93 0b00 	vldr	d0, [r3]
 8003b14:	ed93 1b02 	vldr	d1, [r3, #8]
 8003b18:	ed93 2b04 	vldr	d2, [r3, #16]
 8003b1c:	a34a      	add	r3, pc, #296	@ (adr r3, 8003c48 <main+0x1448>)
 8003b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b22:	e9cd 2300 	strd	r2, r3, [sp]
 8003b26:	ed9f 7b4a 	vldr	d7, [pc, #296]	@ 8003c50 <main+0x1450>
 8003b2a:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8003c58 <main+0x1458>
 8003b2e:	ed9f 5b4c 	vldr	d5, [pc, #304]	@ 8003c60 <main+0x1460>
 8003b32:	ed9f 4b4b 	vldr	d4, [pc, #300]	@ 8003c60 <main+0x1460>
 8003b36:	ed9f 3b48 	vldr	d3, [pc, #288]	@ 8003c58 <main+0x1458>
 8003b3a:	f002 fa45 	bl	8005fc8 <placeBallInSilo>
		  if((FL_distance > 0 && FL_distance <= 10) || (FR_distance > 0 && FR_distance <= 10))
 8003b3e:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	dd03      	ble.n	8003b4e <main+0x134e>
 8003b46:	f8d7 3754 	ldr.w	r3, [r7, #1876]	@ 0x754
 8003b4a:	2b0a      	cmp	r3, #10
 8003b4c:	dd07      	ble.n	8003b5e <main+0x135e>
 8003b4e:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	dd73      	ble.n	8003c3e <main+0x143e>
 8003b56:	f8d7 3750 	ldr.w	r3, [r7, #1872]	@ 0x750
 8003b5a:	2b0a      	cmp	r3, #10
 8003b5c:	dc6f      	bgt.n	8003c3e <main+0x143e>
		  {
			  setMotorSpeed(1, -2000);
 8003b5e:	ed9f 0b42 	vldr	d0, [pc, #264]	@ 8003c68 <main+0x1468>
 8003b62:	2001      	movs	r0, #1
 8003b64:	f7fd fa7a 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -2000);
 8003b68:	ed9f 0b3f 	vldr	d0, [pc, #252]	@ 8003c68 <main+0x1468>
 8003b6c:	2002      	movs	r0, #2
 8003b6e:	f7fd fa75 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -2800);
 8003b72:	ed9f 0b3f 	vldr	d0, [pc, #252]	@ 8003c70 <main+0x1470>
 8003b76:	2007      	movs	r0, #7
 8003b78:	f7fd fa70 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 8003b7c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003b80:	f003 fae4 	bl	800714c <HAL_Delay>
			  mode = VOID;
 8003b84:	4b3d      	ldr	r3, [pc, #244]	@ (8003c7c <main+0x147c>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8003b8a:	e058      	b.n	8003c3e <main+0x143e>

	  case TES2:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b92:	4839      	ldr	r0, [pc, #228]	@ (8003c78 <main+0x1478>)
 8003b94:	f003 fe56 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b9e:	4836      	ldr	r0, [pc, #216]	@ (8003c78 <main+0x1478>)
 8003ba0:	f003 fe50 	bl	8007844 <HAL_GPIO_WritePin>
		  break;
 8003ba4:	e04c      	b.n	8003c40 <main+0x1440>
	  default:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003bac:	4832      	ldr	r0, [pc, #200]	@ (8003c78 <main+0x1478>)
 8003bae:	f003 fe49 	bl	8007844 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bb8:	482f      	ldr	r0, [pc, #188]	@ (8003c78 <main+0x1478>)
 8003bba:	f003 fe43 	bl	8007844 <HAL_GPIO_WritePin>

//		  trying(2500, 0, 0, 0.0, 3.0);
		  Inverse_Kinematics(0, 0, 0);
 8003bbe:	ed9f 2b28 	vldr	d2, [pc, #160]	@ 8003c60 <main+0x1460>
 8003bc2:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8003c60 <main+0x1460>
 8003bc6:	ed9f 0b26 	vldr	d0, [pc, #152]	@ 8003c60 <main+0x1460>
 8003bca:	f7fd fabd 	bl	8001148 <Inverse_Kinematics>
		  setMotorSpeed(1, 0);
 8003bce:	ed9f 0b24 	vldr	d0, [pc, #144]	@ 8003c60 <main+0x1460>
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	f7fd fa42 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8003bd8:	ed9f 0b21 	vldr	d0, [pc, #132]	@ 8003c60 <main+0x1460>
 8003bdc:	2002      	movs	r0, #2
 8003bde:	f7fd fa3d 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 8003be2:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8003c60 <main+0x1460>
 8003be6:	2007      	movs	r0, #7
 8003be8:	f7fd fa38 	bl	800105c <setMotorSpeed>
		  break;
 8003bec:	e028      	b.n	8003c40 <main+0x1440>
		  break;
 8003bee:	bf00      	nop
 8003bf0:	e026      	b.n	8003c40 <main+0x1440>
		  break;
 8003bf2:	bf00      	nop
 8003bf4:	e024      	b.n	8003c40 <main+0x1440>
		  break;
 8003bf6:	bf00      	nop
 8003bf8:	e022      	b.n	8003c40 <main+0x1440>
		  break;
 8003bfa:	bf00      	nop
 8003bfc:	e020      	b.n	8003c40 <main+0x1440>
		  break;
 8003bfe:	bf00      	nop
 8003c00:	e01e      	b.n	8003c40 <main+0x1440>
		  break;
 8003c02:	bf00      	nop
 8003c04:	e01c      	b.n	8003c40 <main+0x1440>
		  break;
 8003c06:	bf00      	nop
 8003c08:	e01a      	b.n	8003c40 <main+0x1440>
		  break;
 8003c0a:	bf00      	nop
 8003c0c:	e018      	b.n	8003c40 <main+0x1440>
		  break;
 8003c0e:	bf00      	nop
 8003c10:	e016      	b.n	8003c40 <main+0x1440>
		  break;
 8003c12:	bf00      	nop
 8003c14:	e014      	b.n	8003c40 <main+0x1440>
		  break;
 8003c16:	bf00      	nop
 8003c18:	e012      	b.n	8003c40 <main+0x1440>
		  break;
 8003c1a:	bf00      	nop
 8003c1c:	e010      	b.n	8003c40 <main+0x1440>
		  break;
 8003c1e:	bf00      	nop
 8003c20:	e00e      	b.n	8003c40 <main+0x1440>
		  break;
 8003c22:	bf00      	nop
 8003c24:	e00c      	b.n	8003c40 <main+0x1440>
		  break;
 8003c26:	bf00      	nop
 8003c28:	e00a      	b.n	8003c40 <main+0x1440>
		  break;
 8003c2a:	bf00      	nop
 8003c2c:	e008      	b.n	8003c40 <main+0x1440>
		  break;
 8003c2e:	bf00      	nop
 8003c30:	e006      	b.n	8003c40 <main+0x1440>
		  break;
 8003c32:	bf00      	nop
 8003c34:	e004      	b.n	8003c40 <main+0x1440>
		  break;
 8003c36:	bf00      	nop
 8003c38:	e002      	b.n	8003c40 <main+0x1440>
		  break;
 8003c3a:	bf00      	nop
 8003c3c:	e000      	b.n	8003c40 <main+0x1440>
		  break;
 8003c3e:	bf00      	nop
	  }
	  lcd_clear();
 8003c40:	f7fe fc52 	bl	80024e8 <lcd_clear>
  {
 8003c44:	f7fe bfeb 	b.w	8002c1e <main+0x41e>
 8003c48:	00000000 	.word	0x00000000
 8003c4c:	40a38800 	.word	0x40a38800
 8003c50:	66666666 	.word	0x66666666
 8003c54:	3fe66666 	.word	0x3fe66666
 8003c58:	00000000 	.word	0x00000000
 8003c5c:	3ff80000 	.word	0x3ff80000
	...
 8003c6c:	c09f4000 	.word	0xc09f4000
 8003c70:	00000000 	.word	0x00000000
 8003c74:	c0a5e000 	.word	0xc0a5e000
 8003c78:	40020c00 	.word	0x40020c00
 8003c7c:	20000610 	.word	0x20000610

08003c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b094      	sub	sp, #80	@ 0x50
 8003c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c86:	f107 0320 	add.w	r3, r7, #32
 8003c8a:	2230      	movs	r2, #48	@ 0x30
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f008 fd4f 	bl	800c732 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c94:	f107 030c 	add.w	r3, r7, #12
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	4b28      	ldr	r3, [pc, #160]	@ (8003d4c <SystemClock_Config+0xcc>)
 8003caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cac:	4a27      	ldr	r2, [pc, #156]	@ (8003d4c <SystemClock_Config+0xcc>)
 8003cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cb4:	4b25      	ldr	r3, [pc, #148]	@ (8003d4c <SystemClock_Config+0xcc>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	4b22      	ldr	r3, [pc, #136]	@ (8003d50 <SystemClock_Config+0xd0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a21      	ldr	r2, [pc, #132]	@ (8003d50 <SystemClock_Config+0xd0>)
 8003cca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d50 <SystemClock_Config+0xd0>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cd8:	607b      	str	r3, [r7, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ce0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003cf0:	2308      	movs	r3, #8
 8003cf2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003cf4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003cf8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003cfe:	2307      	movs	r3, #7
 8003d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d02:	f107 0320 	add.w	r3, r7, #32
 8003d06:	4618      	mov	r0, r3
 8003d08:	f004 fa6c 	bl	80081e4 <HAL_RCC_OscConfig>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003d12:	f000 fe85 	bl	8004a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d16:	230f      	movs	r3, #15
 8003d18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d22:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003d26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003d2e:	f107 030c 	add.w	r3, r7, #12
 8003d32:	2105      	movs	r1, #5
 8003d34:	4618      	mov	r0, r3
 8003d36:	f004 fccd 	bl	80086d4 <HAL_RCC_ClockConfig>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003d40:	f000 fe6e 	bl	8004a20 <Error_Handler>
  }
}
 8003d44:	bf00      	nop
 8003d46:	3750      	adds	r7, #80	@ 0x50
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40007000 	.word	0x40007000

08003d54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003d58:	4b12      	ldr	r3, [pc, #72]	@ (8003da4 <MX_I2C2_Init+0x50>)
 8003d5a:	4a13      	ldr	r2, [pc, #76]	@ (8003da8 <MX_I2C2_Init+0x54>)
 8003d5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003d5e:	4b11      	ldr	r3, [pc, #68]	@ (8003da4 <MX_I2C2_Init+0x50>)
 8003d60:	4a12      	ldr	r2, [pc, #72]	@ (8003dac <MX_I2C2_Init+0x58>)
 8003d62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d64:	4b0f      	ldr	r3, [pc, #60]	@ (8003da4 <MX_I2C2_Init+0x50>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003da4 <MX_I2C2_Init+0x50>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d70:	4b0c      	ldr	r3, [pc, #48]	@ (8003da4 <MX_I2C2_Init+0x50>)
 8003d72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d78:	4b0a      	ldr	r3, [pc, #40]	@ (8003da4 <MX_I2C2_Init+0x50>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003d7e:	4b09      	ldr	r3, [pc, #36]	@ (8003da4 <MX_I2C2_Init+0x50>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d84:	4b07      	ldr	r3, [pc, #28]	@ (8003da4 <MX_I2C2_Init+0x50>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d8a:	4b06      	ldr	r3, [pc, #24]	@ (8003da4 <MX_I2C2_Init+0x50>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003d90:	4804      	ldr	r0, [pc, #16]	@ (8003da4 <MX_I2C2_Init+0x50>)
 8003d92:	f003 fd89 	bl	80078a8 <HAL_I2C_Init>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003d9c:	f000 fe40 	bl	8004a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003da0:	bf00      	nop
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	200002cc 	.word	0x200002cc
 8003da8:	40005800 	.word	0x40005800
 8003dac:	000186a0 	.word	0x000186a0

08003db0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b096      	sub	sp, #88	@ 0x58
 8003db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003db6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	609a      	str	r2, [r3, #8]
 8003dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dc4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
 8003dd8:	609a      	str	r2, [r3, #8]
 8003dda:	60da      	str	r2, [r3, #12]
 8003ddc:	611a      	str	r2, [r3, #16]
 8003dde:	615a      	str	r2, [r3, #20]
 8003de0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	2220      	movs	r2, #32
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f008 fca2 	bl	800c732 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003dee:	4b50      	ldr	r3, [pc, #320]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003df0:	4a50      	ldr	r2, [pc, #320]	@ (8003f34 <MX_TIM1_Init+0x184>)
 8003df2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8003df4:	4b4e      	ldr	r3, [pc, #312]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003df6:	2214      	movs	r2, #20
 8003df8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dfa:	4b4d      	ldr	r3, [pc, #308]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000-1;
 8003e00:	4b4b      	ldr	r3, [pc, #300]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003e02:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003e06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e08:	4b49      	ldr	r3, [pc, #292]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e0e:	4b48      	ldr	r3, [pc, #288]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e14:	4b46      	ldr	r3, [pc, #280]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e1a:	4845      	ldr	r0, [pc, #276]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003e1c:	f004 fe7a 	bl	8008b14 <HAL_TIM_Base_Init>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003e26:	f000 fdfb 	bl	8004a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e30:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003e34:	4619      	mov	r1, r3
 8003e36:	483e      	ldr	r0, [pc, #248]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003e38:	f005 f9dc 	bl	80091f4 <HAL_TIM_ConfigClockSource>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003e42:	f000 fded 	bl	8004a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e46:	483a      	ldr	r0, [pc, #232]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003e48:	f004 feb3 	bl	8008bb2 <HAL_TIM_PWM_Init>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003e52:	f000 fde5 	bl	8004a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e56:	2300      	movs	r3, #0
 8003e58:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e5e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003e62:	4619      	mov	r1, r3
 8003e64:	4832      	ldr	r0, [pc, #200]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003e66:	f005 fddb 	bl	8009a20 <HAL_TIMEx_MasterConfigSynchronization>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003e70:	f000 fdd6 	bl	8004a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e74:	2360      	movs	r3, #96	@ 0x60
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e80:	2300      	movs	r3, #0
 8003e82:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e94:	2200      	movs	r2, #0
 8003e96:	4619      	mov	r1, r3
 8003e98:	4825      	ldr	r0, [pc, #148]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003e9a:	f005 f8e9 	bl	8009070 <HAL_TIM_PWM_ConfigChannel>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003ea4:	f000 fdbc 	bl	8004a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eac:	2204      	movs	r2, #4
 8003eae:	4619      	mov	r1, r3
 8003eb0:	481f      	ldr	r0, [pc, #124]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003eb2:	f005 f8dd 	bl	8009070 <HAL_TIM_PWM_ConfigChannel>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003ebc:	f000 fdb0 	bl	8004a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4819      	ldr	r0, [pc, #100]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003eca:	f005 f8d1 	bl	8009070 <HAL_TIM_PWM_ConfigChannel>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003ed4:	f000 fda4 	bl	8004a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003ed8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003edc:	220c      	movs	r2, #12
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4813      	ldr	r0, [pc, #76]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003ee2:	f005 f8c5 	bl	8009070 <HAL_TIM_PWM_ConfigChannel>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003eec:	f000 fd98 	bl	8004a20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f0e:	1d3b      	adds	r3, r7, #4
 8003f10:	4619      	mov	r1, r3
 8003f12:	4807      	ldr	r0, [pc, #28]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003f14:	f005 fe00 	bl	8009b18 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8003f1e:	f000 fd7f 	bl	8004a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f22:	4803      	ldr	r0, [pc, #12]	@ (8003f30 <MX_TIM1_Init+0x180>)
 8003f24:	f002 fd9e 	bl	8006a64 <HAL_TIM_MspPostInit>

}
 8003f28:	bf00      	nop
 8003f2a:	3758      	adds	r7, #88	@ 0x58
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20000320 	.word	0x20000320
 8003f34:	40010000 	.word	0x40010000

08003f38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08e      	sub	sp, #56	@ 0x38
 8003f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	605a      	str	r2, [r3, #4]
 8003f48:	609a      	str	r2, [r3, #8]
 8003f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f4c:	f107 0320 	add.w	r3, r7, #32
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	611a      	str	r2, [r3, #16]
 8003f64:	615a      	str	r2, [r3, #20]
 8003f66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f68:	4b33      	ldr	r3, [pc, #204]	@ (8004038 <MX_TIM2_Init+0x100>)
 8003f6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003f6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8003f70:	4b31      	ldr	r3, [pc, #196]	@ (8004038 <MX_TIM2_Init+0x100>)
 8003f72:	f240 628f 	movw	r2, #1679	@ 0x68f
 8003f76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f78:	4b2f      	ldr	r3, [pc, #188]	@ (8004038 <MX_TIM2_Init+0x100>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003f7e:	4b2e      	ldr	r3, [pc, #184]	@ (8004038 <MX_TIM2_Init+0x100>)
 8003f80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003f84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f86:	4b2c      	ldr	r3, [pc, #176]	@ (8004038 <MX_TIM2_Init+0x100>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8004038 <MX_TIM2_Init+0x100>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f92:	4829      	ldr	r0, [pc, #164]	@ (8004038 <MX_TIM2_Init+0x100>)
 8003f94:	f004 fdbe 	bl	8008b14 <HAL_TIM_Base_Init>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003f9e:	f000 fd3f 	bl	8004a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003fa8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003fac:	4619      	mov	r1, r3
 8003fae:	4822      	ldr	r0, [pc, #136]	@ (8004038 <MX_TIM2_Init+0x100>)
 8003fb0:	f005 f920 	bl	80091f4 <HAL_TIM_ConfigClockSource>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003fba:	f000 fd31 	bl	8004a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003fbe:	481e      	ldr	r0, [pc, #120]	@ (8004038 <MX_TIM2_Init+0x100>)
 8003fc0:	f004 fdf7 	bl	8008bb2 <HAL_TIM_PWM_Init>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003fca:	f000 fd29 	bl	8004a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fd6:	f107 0320 	add.w	r3, r7, #32
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4816      	ldr	r0, [pc, #88]	@ (8004038 <MX_TIM2_Init+0x100>)
 8003fde:	f005 fd1f 	bl	8009a20 <HAL_TIMEx_MasterConfigSynchronization>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003fe8:	f000 fd1a 	bl	8004a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fec:	2360      	movs	r3, #96	@ 0x60
 8003fee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ffc:	1d3b      	adds	r3, r7, #4
 8003ffe:	2208      	movs	r2, #8
 8004000:	4619      	mov	r1, r3
 8004002:	480d      	ldr	r0, [pc, #52]	@ (8004038 <MX_TIM2_Init+0x100>)
 8004004:	f005 f834 	bl	8009070 <HAL_TIM_PWM_ConfigChannel>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800400e:	f000 fd07 	bl	8004a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	220c      	movs	r2, #12
 8004016:	4619      	mov	r1, r3
 8004018:	4807      	ldr	r0, [pc, #28]	@ (8004038 <MX_TIM2_Init+0x100>)
 800401a:	f005 f829 	bl	8009070 <HAL_TIM_PWM_ConfigChannel>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8004024:	f000 fcfc 	bl	8004a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004028:	4803      	ldr	r0, [pc, #12]	@ (8004038 <MX_TIM2_Init+0x100>)
 800402a:	f002 fd1b 	bl	8006a64 <HAL_TIM_MspPostInit>

}
 800402e:	bf00      	nop
 8004030:	3738      	adds	r7, #56	@ 0x38
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000368 	.word	0x20000368

0800403c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b096      	sub	sp, #88	@ 0x58
 8004040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004042:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	605a      	str	r2, [r3, #4]
 800404c:	609a      	str	r2, [r3, #8]
 800404e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004050:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800405a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	605a      	str	r2, [r3, #4]
 8004064:	609a      	str	r2, [r3, #8]
 8004066:	60da      	str	r2, [r3, #12]
 8004068:	611a      	str	r2, [r3, #16]
 800406a:	615a      	str	r2, [r3, #20]
 800406c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800406e:	1d3b      	adds	r3, r7, #4
 8004070:	2220      	movs	r2, #32
 8004072:	2100      	movs	r1, #0
 8004074:	4618      	mov	r0, r3
 8004076:	f008 fb5c 	bl	800c732 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800407a:	4b50      	ldr	r3, [pc, #320]	@ (80041bc <MX_TIM8_Init+0x180>)
 800407c:	4a50      	ldr	r2, [pc, #320]	@ (80041c0 <MX_TIM8_Init+0x184>)
 800407e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 20;
 8004080:	4b4e      	ldr	r3, [pc, #312]	@ (80041bc <MX_TIM8_Init+0x180>)
 8004082:	2214      	movs	r2, #20
 8004084:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004086:	4b4d      	ldr	r3, [pc, #308]	@ (80041bc <MX_TIM8_Init+0x180>)
 8004088:	2200      	movs	r2, #0
 800408a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000-1;
 800408c:	4b4b      	ldr	r3, [pc, #300]	@ (80041bc <MX_TIM8_Init+0x180>)
 800408e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8004092:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004094:	4b49      	ldr	r3, [pc, #292]	@ (80041bc <MX_TIM8_Init+0x180>)
 8004096:	2200      	movs	r2, #0
 8004098:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800409a:	4b48      	ldr	r3, [pc, #288]	@ (80041bc <MX_TIM8_Init+0x180>)
 800409c:	2200      	movs	r2, #0
 800409e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040a0:	4b46      	ldr	r3, [pc, #280]	@ (80041bc <MX_TIM8_Init+0x180>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80040a6:	4845      	ldr	r0, [pc, #276]	@ (80041bc <MX_TIM8_Init+0x180>)
 80040a8:	f004 fd34 	bl	8008b14 <HAL_TIM_Base_Init>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80040b2:	f000 fcb5 	bl	8004a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80040bc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80040c0:	4619      	mov	r1, r3
 80040c2:	483e      	ldr	r0, [pc, #248]	@ (80041bc <MX_TIM8_Init+0x180>)
 80040c4:	f005 f896 	bl	80091f4 <HAL_TIM_ConfigClockSource>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80040ce:	f000 fca7 	bl	8004a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80040d2:	483a      	ldr	r0, [pc, #232]	@ (80041bc <MX_TIM8_Init+0x180>)
 80040d4:	f004 fd6d 	bl	8008bb2 <HAL_TIM_PWM_Init>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80040de:	f000 fc9f 	bl	8004a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040e2:	2300      	movs	r3, #0
 80040e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80040ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80040ee:	4619      	mov	r1, r3
 80040f0:	4832      	ldr	r0, [pc, #200]	@ (80041bc <MX_TIM8_Init+0x180>)
 80040f2:	f005 fc95 	bl	8009a20 <HAL_TIMEx_MasterConfigSynchronization>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80040fc:	f000 fc90 	bl	8004a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004100:	2360      	movs	r3, #96	@ 0x60
 8004102:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004108:	2300      	movs	r3, #0
 800410a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800410c:	2300      	movs	r3, #0
 800410e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004110:	2300      	movs	r3, #0
 8004112:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004114:	2300      	movs	r3, #0
 8004116:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004118:	2300      	movs	r3, #0
 800411a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800411c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004120:	2200      	movs	r2, #0
 8004122:	4619      	mov	r1, r3
 8004124:	4825      	ldr	r0, [pc, #148]	@ (80041bc <MX_TIM8_Init+0x180>)
 8004126:	f004 ffa3 	bl	8009070 <HAL_TIM_PWM_ConfigChannel>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8004130:	f000 fc76 	bl	8004a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004138:	2204      	movs	r2, #4
 800413a:	4619      	mov	r1, r3
 800413c:	481f      	ldr	r0, [pc, #124]	@ (80041bc <MX_TIM8_Init+0x180>)
 800413e:	f004 ff97 	bl	8009070 <HAL_TIM_PWM_ConfigChannel>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8004148:	f000 fc6a 	bl	8004a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800414c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004150:	2208      	movs	r2, #8
 8004152:	4619      	mov	r1, r3
 8004154:	4819      	ldr	r0, [pc, #100]	@ (80041bc <MX_TIM8_Init+0x180>)
 8004156:	f004 ff8b 	bl	8009070 <HAL_TIM_PWM_ConfigChannel>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8004160:	f000 fc5e 	bl	8004a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004168:	220c      	movs	r2, #12
 800416a:	4619      	mov	r1, r3
 800416c:	4813      	ldr	r0, [pc, #76]	@ (80041bc <MX_TIM8_Init+0x180>)
 800416e:	f004 ff7f 	bl	8009070 <HAL_TIM_PWM_ConfigChannel>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8004178:	f000 fc52 	bl	8004a20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800417c:	2300      	movs	r3, #0
 800417e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004180:	2300      	movs	r3, #0
 8004182:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004190:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004194:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004196:	2300      	movs	r3, #0
 8004198:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800419a:	1d3b      	adds	r3, r7, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4807      	ldr	r0, [pc, #28]	@ (80041bc <MX_TIM8_Init+0x180>)
 80041a0:	f005 fcba 	bl	8009b18 <HAL_TIMEx_ConfigBreakDeadTime>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80041aa:	f000 fc39 	bl	8004a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80041ae:	4803      	ldr	r0, [pc, #12]	@ (80041bc <MX_TIM8_Init+0x180>)
 80041b0:	f002 fc58 	bl	8006a64 <HAL_TIM_MspPostInit>

}
 80041b4:	bf00      	nop
 80041b6:	3758      	adds	r7, #88	@ 0x58
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	200003b0 	.word	0x200003b0
 80041c0:	40010400 	.word	0x40010400

080041c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041c8:	4b11      	ldr	r3, [pc, #68]	@ (8004210 <MX_USART1_UART_Init+0x4c>)
 80041ca:	4a12      	ldr	r2, [pc, #72]	@ (8004214 <MX_USART1_UART_Init+0x50>)
 80041cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80041ce:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <MX_USART1_UART_Init+0x4c>)
 80041d0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80041d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004210 <MX_USART1_UART_Init+0x4c>)
 80041d8:	2200      	movs	r2, #0
 80041da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004210 <MX_USART1_UART_Init+0x4c>)
 80041de:	2200      	movs	r2, #0
 80041e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <MX_USART1_UART_Init+0x4c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041e8:	4b09      	ldr	r3, [pc, #36]	@ (8004210 <MX_USART1_UART_Init+0x4c>)
 80041ea:	220c      	movs	r2, #12
 80041ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ee:	4b08      	ldr	r3, [pc, #32]	@ (8004210 <MX_USART1_UART_Init+0x4c>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041f4:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <MX_USART1_UART_Init+0x4c>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041fa:	4805      	ldr	r0, [pc, #20]	@ (8004210 <MX_USART1_UART_Init+0x4c>)
 80041fc:	f005 fcf2 	bl	8009be4 <HAL_UART_Init>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004206:	f000 fc0b 	bl	8004a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800420a:	bf00      	nop
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	200003f8 	.word	0x200003f8
 8004214:	40011000 	.word	0x40011000

08004218 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800421c:	4b11      	ldr	r3, [pc, #68]	@ (8004264 <MX_USART2_UART_Init+0x4c>)
 800421e:	4a12      	ldr	r2, [pc, #72]	@ (8004268 <MX_USART2_UART_Init+0x50>)
 8004220:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004222:	4b10      	ldr	r3, [pc, #64]	@ (8004264 <MX_USART2_UART_Init+0x4c>)
 8004224:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004228:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800422a:	4b0e      	ldr	r3, [pc, #56]	@ (8004264 <MX_USART2_UART_Init+0x4c>)
 800422c:	2200      	movs	r2, #0
 800422e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004230:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <MX_USART2_UART_Init+0x4c>)
 8004232:	2200      	movs	r2, #0
 8004234:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004236:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <MX_USART2_UART_Init+0x4c>)
 8004238:	2200      	movs	r2, #0
 800423a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800423c:	4b09      	ldr	r3, [pc, #36]	@ (8004264 <MX_USART2_UART_Init+0x4c>)
 800423e:	220c      	movs	r2, #12
 8004240:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004242:	4b08      	ldr	r3, [pc, #32]	@ (8004264 <MX_USART2_UART_Init+0x4c>)
 8004244:	2200      	movs	r2, #0
 8004246:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004248:	4b06      	ldr	r3, [pc, #24]	@ (8004264 <MX_USART2_UART_Init+0x4c>)
 800424a:	2200      	movs	r2, #0
 800424c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800424e:	4805      	ldr	r0, [pc, #20]	@ (8004264 <MX_USART2_UART_Init+0x4c>)
 8004250:	f005 fcc8 	bl	8009be4 <HAL_UART_Init>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800425a:	f000 fbe1 	bl	8004a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000440 	.word	0x20000440
 8004268:	40004400 	.word	0x40004400

0800426c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004270:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 8004272:	4a12      	ldr	r2, [pc, #72]	@ (80042bc <MX_USART3_UART_Init+0x50>)
 8004274:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8004276:	4b10      	ldr	r3, [pc, #64]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 8004278:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800427c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800427e:	4b0e      	ldr	r3, [pc, #56]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 8004280:	2200      	movs	r2, #0
 8004282:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004284:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 8004286:	2200      	movs	r2, #0
 8004288:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800428a:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 800428c:	2200      	movs	r2, #0
 800428e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004290:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 8004292:	220c      	movs	r2, #12
 8004294:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004296:	4b08      	ldr	r3, [pc, #32]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 8004298:	2200      	movs	r2, #0
 800429a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800429c:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 800429e:	2200      	movs	r2, #0
 80042a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80042a2:	4805      	ldr	r0, [pc, #20]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 80042a4:	f005 fc9e 	bl	8009be4 <HAL_UART_Init>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80042ae:	f000 fbb7 	bl	8004a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000488 	.word	0x20000488
 80042bc:	40004800 	.word	0x40004800

080042c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08c      	sub	sp, #48	@ 0x30
 80042c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c6:	f107 031c 	add.w	r3, r7, #28
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	605a      	str	r2, [r3, #4]
 80042d0:	609a      	str	r2, [r3, #8]
 80042d2:	60da      	str	r2, [r3, #12]
 80042d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	4bbd      	ldr	r3, [pc, #756]	@ (80045d0 <MX_GPIO_Init+0x310>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042de:	4abc      	ldr	r2, [pc, #752]	@ (80045d0 <MX_GPIO_Init+0x310>)
 80042e0:	f043 0310 	orr.w	r3, r3, #16
 80042e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042e6:	4bba      	ldr	r3, [pc, #744]	@ (80045d0 <MX_GPIO_Init+0x310>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	4bb6      	ldr	r3, [pc, #728]	@ (80045d0 <MX_GPIO_Init+0x310>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	4ab5      	ldr	r2, [pc, #724]	@ (80045d0 <MX_GPIO_Init+0x310>)
 80042fc:	f043 0304 	orr.w	r3, r3, #4
 8004300:	6313      	str	r3, [r2, #48]	@ 0x30
 8004302:	4bb3      	ldr	r3, [pc, #716]	@ (80045d0 <MX_GPIO_Init+0x310>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	4baf      	ldr	r3, [pc, #700]	@ (80045d0 <MX_GPIO_Init+0x310>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004316:	4aae      	ldr	r2, [pc, #696]	@ (80045d0 <MX_GPIO_Init+0x310>)
 8004318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800431c:	6313      	str	r3, [r2, #48]	@ 0x30
 800431e:	4bac      	ldr	r3, [pc, #688]	@ (80045d0 <MX_GPIO_Init+0x310>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	4ba8      	ldr	r3, [pc, #672]	@ (80045d0 <MX_GPIO_Init+0x310>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	4aa7      	ldr	r2, [pc, #668]	@ (80045d0 <MX_GPIO_Init+0x310>)
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	6313      	str	r3, [r2, #48]	@ 0x30
 800433a:	4ba5      	ldr	r3, [pc, #660]	@ (80045d0 <MX_GPIO_Init+0x310>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	4ba1      	ldr	r3, [pc, #644]	@ (80045d0 <MX_GPIO_Init+0x310>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434e:	4aa0      	ldr	r2, [pc, #640]	@ (80045d0 <MX_GPIO_Init+0x310>)
 8004350:	f043 0302 	orr.w	r3, r3, #2
 8004354:	6313      	str	r3, [r2, #48]	@ 0x30
 8004356:	4b9e      	ldr	r3, [pc, #632]	@ (80045d0 <MX_GPIO_Init+0x310>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	4b9a      	ldr	r3, [pc, #616]	@ (80045d0 <MX_GPIO_Init+0x310>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	4a99      	ldr	r2, [pc, #612]	@ (80045d0 <MX_GPIO_Init+0x310>)
 800436c:	f043 0308 	orr.w	r3, r3, #8
 8004370:	6313      	str	r3, [r2, #48]	@ 0x30
 8004372:	4b97      	ldr	r3, [pc, #604]	@ (80045d0 <MX_GPIO_Init+0x310>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	607b      	str	r3, [r7, #4]
 800437c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800437e:	2200      	movs	r2, #0
 8004380:	217f      	movs	r1, #127	@ 0x7f
 8004382:	4894      	ldr	r0, [pc, #592]	@ (80045d4 <MX_GPIO_Init+0x314>)
 8004384:	f003 fa5e 	bl	8007844 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8004388:	2200      	movs	r2, #0
 800438a:	f24f 0130 	movw	r1, #61488	@ 0xf030
 800438e:	4892      	ldr	r0, [pc, #584]	@ (80045d8 <MX_GPIO_Init+0x318>)
 8004390:	f003 fa58 	bl	8007844 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8004394:	2200      	movs	r2, #0
 8004396:	2103      	movs	r1, #3
 8004398:	4890      	ldr	r0, [pc, #576]	@ (80045dc <MX_GPIO_Init+0x31c>)
 800439a:	f003 fa53 	bl	8007844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800439e:	2200      	movs	r2, #0
 80043a0:	f24c 011f 	movw	r1, #49183	@ 0xc01f
 80043a4:	488e      	ldr	r0, [pc, #568]	@ (80045e0 <MX_GPIO_Init+0x320>)
 80043a6:	f003 fa4d 	bl	8007844 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80043aa:	237f      	movs	r3, #127	@ 0x7f
 80043ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80043ae:	2311      	movs	r3, #17
 80043b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b6:	2303      	movs	r3, #3
 80043b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043ba:	f107 031c 	add.w	r3, r7, #28
 80043be:	4619      	mov	r1, r3
 80043c0:	4884      	ldr	r0, [pc, #528]	@ (80045d4 <MX_GPIO_Init+0x314>)
 80043c2:	f003 f88b 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80043c6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80043ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80043cc:	2311      	movs	r3, #17
 80043ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d4:	2300      	movs	r3, #0
 80043d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043d8:	f107 031c 	add.w	r3, r7, #28
 80043dc:	4619      	mov	r1, r3
 80043de:	487e      	ldr	r0, [pc, #504]	@ (80045d8 <MX_GPIO_Init+0x318>)
 80043e0:	f003 f87c 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : EA_2_Pin EinA_1_Pin */
  GPIO_InitStruct.Pin = EA_2_Pin|EinA_1_Pin;
 80043e4:	2309      	movs	r3, #9
 80043e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043e8:	2300      	movs	r3, #0
 80043ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043ec:	2301      	movs	r3, #1
 80043ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043f0:	f107 031c 	add.w	r3, r7, #28
 80043f4:	4619      	mov	r1, r3
 80043f6:	4878      	ldr	r0, [pc, #480]	@ (80045d8 <MX_GPIO_Init+0x318>)
 80043f8:	f003 f870 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_2_Pin EinB_1_Pin */
  GPIO_InitStruct.Pin = EB_2_Pin|EinB_1_Pin;
 80043fc:	2306      	movs	r3, #6
 80043fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004400:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004404:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004406:	2301      	movs	r3, #1
 8004408:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800440a:	f107 031c 	add.w	r3, r7, #28
 800440e:	4619      	mov	r1, r3
 8004410:	4871      	ldr	r0, [pc, #452]	@ (80045d8 <MX_GPIO_Init+0x318>)
 8004412:	f003 f863 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : EinB_2_Pin EinB_4_Pin */
  GPIO_InitStruct.Pin = EinB_2_Pin|EinB_4_Pin;
 8004416:	f244 0301 	movw	r3, #16385	@ 0x4001
 800441a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800441c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004422:	2301      	movs	r3, #1
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004426:	f107 031c 	add.w	r3, r7, #28
 800442a:	4619      	mov	r1, r3
 800442c:	486d      	ldr	r0, [pc, #436]	@ (80045e4 <MX_GPIO_Init+0x324>)
 800442e:	f003 f855 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : EinA_2_Pin EinA_4_Pin EA_1_Pin */
  GPIO_InitStruct.Pin = EinA_2_Pin|EinA_4_Pin|EA_1_Pin;
 8004432:	f248 4302 	movw	r3, #33794	@ 0x8402
 8004436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004438:	2300      	movs	r3, #0
 800443a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800443c:	2301      	movs	r3, #1
 800443e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004440:	f107 031c 	add.w	r3, r7, #28
 8004444:	4619      	mov	r1, r3
 8004446:	4867      	ldr	r0, [pc, #412]	@ (80045e4 <MX_GPIO_Init+0x324>)
 8004448:	f003 f848 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_1_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin;
 800444c:	2340      	movs	r3, #64	@ 0x40
 800444e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004450:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004456:	2301      	movs	r3, #1
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_1_GPIO_Port, &GPIO_InitStruct);
 800445a:	f107 031c 	add.w	r3, r7, #28
 800445e:	4619      	mov	r1, r3
 8004460:	4860      	ldr	r0, [pc, #384]	@ (80045e4 <MX_GPIO_Init+0x324>)
 8004462:	f003 f83b 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 8004466:	f241 0330 	movw	r3, #4144	@ 0x1030
 800446a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800446c:	2311      	movs	r3, #17
 800446e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004470:	2300      	movs	r3, #0
 8004472:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004474:	2303      	movs	r3, #3
 8004476:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004478:	f107 031c 	add.w	r3, r7, #28
 800447c:	4619      	mov	r1, r3
 800447e:	4856      	ldr	r0, [pc, #344]	@ (80045d8 <MX_GPIO_Init+0x318>)
 8004480:	f003 f82c 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004484:	2303      	movs	r3, #3
 8004486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004488:	2311      	movs	r3, #17
 800448a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448c:	2300      	movs	r3, #0
 800448e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004490:	2303      	movs	r3, #3
 8004492:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004494:	f107 031c 	add.w	r3, r7, #28
 8004498:	4619      	mov	r1, r3
 800449a:	4850      	ldr	r0, [pc, #320]	@ (80045dc <MX_GPIO_Init+0x31c>)
 800449c:	f003 f81e 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin|Button_3_Pin;
 80044a0:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80044a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80044a6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80044aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044ac:	2301      	movs	r3, #1
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044b0:	f107 031c 	add.w	r3, r7, #28
 80044b4:	4619      	mov	r1, r3
 80044b6:	4847      	ldr	r0, [pc, #284]	@ (80045d4 <MX_GPIO_Init+0x314>)
 80044b8:	f003 f810 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_4_Pin */
  GPIO_InitStruct.Pin = Button_4_Pin;
 80044bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80044c2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80044c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044c8:	2301      	movs	r3, #1
 80044ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_4_GPIO_Port, &GPIO_InitStruct);
 80044cc:	f107 031c 	add.w	r3, r7, #28
 80044d0:	4619      	mov	r1, r3
 80044d2:	4842      	ldr	r0, [pc, #264]	@ (80045dc <MX_GPIO_Init+0x31c>)
 80044d4:	f003 f802 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pin : EinA_3_Pin */
  GPIO_InitStruct.Pin = EinA_3_Pin;
 80044d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044de:	2300      	movs	r3, #0
 80044e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044e2:	2301      	movs	r3, #1
 80044e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinA_3_GPIO_Port, &GPIO_InitStruct);
 80044e6:	f107 031c 	add.w	r3, r7, #28
 80044ea:	4619      	mov	r1, r3
 80044ec:	483c      	ldr	r0, [pc, #240]	@ (80045e0 <MX_GPIO_Init+0x320>)
 80044ee:	f002 fff5 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pin : EinB_3_Pin */
  GPIO_InitStruct.Pin = EinB_3_Pin;
 80044f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80044f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80044fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044fe:	2301      	movs	r3, #1
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinB_3_GPIO_Port, &GPIO_InitStruct);
 8004502:	f107 031c 	add.w	r3, r7, #28
 8004506:	4619      	mov	r1, r3
 8004508:	4835      	ldr	r0, [pc, #212]	@ (80045e0 <MX_GPIO_Init+0x320>)
 800450a:	f002 ffe7 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800450e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004514:	2301      	movs	r3, #1
 8004516:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004518:	2302      	movs	r3, #2
 800451a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800451c:	2300      	movs	r3, #0
 800451e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004520:	f107 031c 	add.w	r3, r7, #28
 8004524:	4619      	mov	r1, r3
 8004526:	482e      	ldr	r0, [pc, #184]	@ (80045e0 <MX_GPIO_Init+0x320>)
 8004528:	f002 ffd8 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800452c:	231f      	movs	r3, #31
 800452e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004530:	2311      	movs	r3, #17
 8004532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004534:	2300      	movs	r3, #0
 8004536:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004538:	2303      	movs	r3, #3
 800453a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800453c:	f107 031c 	add.w	r3, r7, #28
 8004540:	4619      	mov	r1, r3
 8004542:	4827      	ldr	r0, [pc, #156]	@ (80045e0 <MX_GPIO_Init+0x320>)
 8004544:	f002 ffca 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_1_Pin EB_3_Pin */
  GPIO_InitStruct.Pin = EB_1_Pin|EB_3_Pin;
 8004548:	2328      	movs	r3, #40	@ 0x28
 800454a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800454c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004552:	2301      	movs	r3, #1
 8004554:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004556:	f107 031c 	add.w	r3, r7, #28
 800455a:	4619      	mov	r1, r3
 800455c:	481f      	ldr	r0, [pc, #124]	@ (80045dc <MX_GPIO_Init+0x31c>)
 800455e:	f002 ffbd 	bl	80074dc <HAL_GPIO_Init>

  /*Configure GPIO pin : EA_3_Pin */
  GPIO_InitStruct.Pin = EA_3_Pin;
 8004562:	2310      	movs	r3, #16
 8004564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004566:	2300      	movs	r3, #0
 8004568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800456a:	2301      	movs	r3, #1
 800456c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EA_3_GPIO_Port, &GPIO_InitStruct);
 800456e:	f107 031c 	add.w	r3, r7, #28
 8004572:	4619      	mov	r1, r3
 8004574:	4819      	ldr	r0, [pc, #100]	@ (80045dc <MX_GPIO_Init+0x31c>)
 8004576:	f002 ffb1 	bl	80074dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800457a:	2200      	movs	r2, #0
 800457c:	2100      	movs	r1, #0
 800457e:	2006      	movs	r0, #6
 8004580:	f002 fee3 	bl	800734a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004584:	2006      	movs	r0, #6
 8004586:	f002 fefc 	bl	8007382 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800458a:	2200      	movs	r2, #0
 800458c:	2100      	movs	r1, #0
 800458e:	2007      	movs	r0, #7
 8004590:	f002 fedb 	bl	800734a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004594:	2007      	movs	r0, #7
 8004596:	f002 fef4 	bl	8007382 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800459a:	2200      	movs	r2, #0
 800459c:	2100      	movs	r1, #0
 800459e:	2008      	movs	r0, #8
 80045a0:	f002 fed3 	bl	800734a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80045a4:	2008      	movs	r0, #8
 80045a6:	f002 feec 	bl	8007382 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80045aa:	2200      	movs	r2, #0
 80045ac:	2100      	movs	r1, #0
 80045ae:	2009      	movs	r0, #9
 80045b0:	f002 fecb 	bl	800734a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80045b4:	2009      	movs	r0, #9
 80045b6:	f002 fee4 	bl	8007382 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80045ba:	2200      	movs	r2, #0
 80045bc:	2100      	movs	r1, #0
 80045be:	2017      	movs	r0, #23
 80045c0:	f002 fec3 	bl	800734a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80045c4:	2017      	movs	r0, #23
 80045c6:	f002 fedc 	bl	8007382 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80045ca:	2200      	movs	r2, #0
 80045cc:	e00c      	b.n	80045e8 <MX_GPIO_Init+0x328>
 80045ce:	bf00      	nop
 80045d0:	40023800 	.word	0x40023800
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40020800 	.word	0x40020800
 80045dc:	40020400 	.word	0x40020400
 80045e0:	40020c00 	.word	0x40020c00
 80045e4:	40020000 	.word	0x40020000
 80045e8:	2100      	movs	r1, #0
 80045ea:	2028      	movs	r0, #40	@ 0x28
 80045ec:	f002 fead 	bl	800734a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80045f0:	2028      	movs	r0, #40	@ 0x28
 80045f2:	f002 fec6 	bl	8007382 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80045f6:	bf00      	nop
 80045f8:	3730      	adds	r7, #48	@ 0x30
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop

08004600 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004600:	b590      	push	{r4, r7, lr}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a8b      	ldr	r2, [pc, #556]	@ (800483c <HAL_UART_RxCpltCallback+0x23c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d15a      	bne.n	80046c8 <HAL_UART_RxCpltCallback+0xc8>
	{
		if(receive[rxIndex] == '\r' || receive[rxIndex] == '\n')
 8004612:	4b8b      	ldr	r3, [pc, #556]	@ (8004840 <HAL_UART_RxCpltCallback+0x240>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a8b      	ldr	r2, [pc, #556]	@ (8004844 <HAL_UART_RxCpltCallback+0x244>)
 8004618:	5cd3      	ldrb	r3, [r2, r3]
 800461a:	2b0d      	cmp	r3, #13
 800461c:	d005      	beq.n	800462a <HAL_UART_RxCpltCallback+0x2a>
 800461e:	4b88      	ldr	r3, [pc, #544]	@ (8004840 <HAL_UART_RxCpltCallback+0x240>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a88      	ldr	r2, [pc, #544]	@ (8004844 <HAL_UART_RxCpltCallback+0x244>)
 8004624:	5cd3      	ldrb	r3, [r2, r3]
 8004626:	2b0a      	cmp	r3, #10
 8004628:	d139      	bne.n	800469e <HAL_UART_RxCpltCallback+0x9e>
		{
			receive[rxIndex] = '\0';
 800462a:	4b85      	ldr	r3, [pc, #532]	@ (8004840 <HAL_UART_RxCpltCallback+0x240>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a85      	ldr	r2, [pc, #532]	@ (8004844 <HAL_UART_RxCpltCallback+0x244>)
 8004630:	2100      	movs	r1, #0
 8004632:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receive, ",");
 8004634:	4984      	ldr	r1, [pc, #528]	@ (8004848 <HAL_UART_RxCpltCallback+0x248>)
 8004636:	4883      	ldr	r0, [pc, #524]	@ (8004844 <HAL_UART_RxCpltCallback+0x244>)
 8004638:	f008 f896 	bl	800c768 <strtok>
 800463c:	6178      	str	r0, [r7, #20]
			dataIndex = 0;
 800463e:	4b83      	ldr	r3, [pc, #524]	@ (800484c <HAL_UART_RxCpltCallback+0x24c>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8004644:	e015      	b.n	8004672 <HAL_UART_RxCpltCallback+0x72>
			{
				sensorData[dataIndex++] = atof(token);
 8004646:	4b81      	ldr	r3, [pc, #516]	@ (800484c <HAL_UART_RxCpltCallback+0x24c>)
 8004648:	681c      	ldr	r4, [r3, #0]
 800464a:	1c63      	adds	r3, r4, #1
 800464c:	4a7f      	ldr	r2, [pc, #508]	@ (800484c <HAL_UART_RxCpltCallback+0x24c>)
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	6978      	ldr	r0, [r7, #20]
 8004652:	f006 fa3b 	bl	800aacc <atof>
 8004656:	eeb0 7a40 	vmov.f32	s14, s0
 800465a:	eef0 7a60 	vmov.f32	s15, s1
 800465e:	4a7c      	ldr	r2, [pc, #496]	@ (8004850 <HAL_UART_RxCpltCallback+0x250>)
 8004660:	00e3      	lsls	r3, r4, #3
 8004662:	4413      	add	r3, r2
 8004664:	ed83 7b00 	vstr	d7, [r3]
				token = strtok(NULL, ",");
 8004668:	4977      	ldr	r1, [pc, #476]	@ (8004848 <HAL_UART_RxCpltCallback+0x248>)
 800466a:	2000      	movs	r0, #0
 800466c:	f008 f87c 	bl	800c768 <strtok>
 8004670:	6178      	str	r0, [r7, #20]
			while(token != NULL)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e6      	bne.n	8004646 <HAL_UART_RxCpltCallback+0x46>
			}
			memset(receive, 0, sizeof(receive));
 8004678:	2232      	movs	r2, #50	@ 0x32
 800467a:	2100      	movs	r1, #0
 800467c:	4871      	ldr	r0, [pc, #452]	@ (8004844 <HAL_UART_RxCpltCallback+0x244>)
 800467e:	f008 f858 	bl	800c732 <memset>
			rxIndex = 0;
 8004682:	4b6f      	ldr	r3, [pc, #444]	@ (8004840 <HAL_UART_RxCpltCallback+0x240>)
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart1, receive, 1) != HAL_OK)
 8004688:	2201      	movs	r2, #1
 800468a:	496e      	ldr	r1, [pc, #440]	@ (8004844 <HAL_UART_RxCpltCallback+0x244>)
 800468c:	4871      	ldr	r0, [pc, #452]	@ (8004854 <HAL_UART_RxCpltCallback+0x254>)
 800468e:	f005 faf9 	bl	8009c84 <HAL_UART_Receive_IT>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d016      	beq.n	80046c6 <HAL_UART_RxCpltCallback+0xc6>
			{
				Error_Handler();
 8004698:	f000 f9c2 	bl	8004a20 <Error_Handler>
		{
 800469c:	e013      	b.n	80046c6 <HAL_UART_RxCpltCallback+0xc6>
			}
		}
		else
		{
			rxIndex++;
 800469e:	4b68      	ldr	r3, [pc, #416]	@ (8004840 <HAL_UART_RxCpltCallback+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3301      	adds	r3, #1
 80046a4:	4a66      	ldr	r2, [pc, #408]	@ (8004840 <HAL_UART_RxCpltCallback+0x240>)
 80046a6:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart1, receive + rxIndex, 1) != HAL_OK)
 80046a8:	4b65      	ldr	r3, [pc, #404]	@ (8004840 <HAL_UART_RxCpltCallback+0x240>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a65      	ldr	r2, [pc, #404]	@ (8004844 <HAL_UART_RxCpltCallback+0x244>)
 80046ae:	4413      	add	r3, r2
 80046b0:	2201      	movs	r2, #1
 80046b2:	4619      	mov	r1, r3
 80046b4:	4867      	ldr	r0, [pc, #412]	@ (8004854 <HAL_UART_RxCpltCallback+0x254>)
 80046b6:	f005 fae5 	bl	8009c84 <HAL_UART_Receive_IT>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_UART_RxCpltCallback+0xc8>
			{
				Error_Handler();
 80046c0:	f000 f9ae 	bl	8004a20 <Error_Handler>
 80046c4:	e000      	b.n	80046c8 <HAL_UART_RxCpltCallback+0xc8>
		{
 80046c6:	bf00      	nop
			}
		}
	}
	if(huart->Instance == USART2)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a62      	ldr	r2, [pc, #392]	@ (8004858 <HAL_UART_RxCpltCallback+0x258>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d155      	bne.n	800477e <HAL_UART_RxCpltCallback+0x17e>
	{
		if(receiveCAM[indexCAM] == '\r' || receiveCAM[indexCAM] == '\n')
 80046d2:	4b62      	ldr	r3, [pc, #392]	@ (800485c <HAL_UART_RxCpltCallback+0x25c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a62      	ldr	r2, [pc, #392]	@ (8004860 <HAL_UART_RxCpltCallback+0x260>)
 80046d8:	5cd3      	ldrb	r3, [r2, r3]
 80046da:	2b0d      	cmp	r3, #13
 80046dc:	d005      	beq.n	80046ea <HAL_UART_RxCpltCallback+0xea>
 80046de:	4b5f      	ldr	r3, [pc, #380]	@ (800485c <HAL_UART_RxCpltCallback+0x25c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a5f      	ldr	r2, [pc, #380]	@ (8004860 <HAL_UART_RxCpltCallback+0x260>)
 80046e4:	5cd3      	ldrb	r3, [r2, r3]
 80046e6:	2b0a      	cmp	r3, #10
 80046e8:	d134      	bne.n	8004754 <HAL_UART_RxCpltCallback+0x154>
		{
			receiveCAM[indexCAM] = '\0';
 80046ea:	4b5c      	ldr	r3, [pc, #368]	@ (800485c <HAL_UART_RxCpltCallback+0x25c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a5c      	ldr	r2, [pc, #368]	@ (8004860 <HAL_UART_RxCpltCallback+0x260>)
 80046f0:	2100      	movs	r1, #0
 80046f2:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveCAM, ",");
 80046f4:	4954      	ldr	r1, [pc, #336]	@ (8004848 <HAL_UART_RxCpltCallback+0x248>)
 80046f6:	485a      	ldr	r0, [pc, #360]	@ (8004860 <HAL_UART_RxCpltCallback+0x260>)
 80046f8:	f008 f836 	bl	800c768 <strtok>
 80046fc:	6138      	str	r0, [r7, #16]
			dataindexCAM = 0;
 80046fe:	4b59      	ldr	r3, [pc, #356]	@ (8004864 <HAL_UART_RxCpltCallback+0x264>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8004704:	e010      	b.n	8004728 <HAL_UART_RxCpltCallback+0x128>
			{
				camera[dataindexCAM++] = atoi(token);
 8004706:	4b57      	ldr	r3, [pc, #348]	@ (8004864 <HAL_UART_RxCpltCallback+0x264>)
 8004708:	681c      	ldr	r4, [r3, #0]
 800470a:	1c63      	adds	r3, r4, #1
 800470c:	4a55      	ldr	r2, [pc, #340]	@ (8004864 <HAL_UART_RxCpltCallback+0x264>)
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	6938      	ldr	r0, [r7, #16]
 8004712:	f006 f9de 	bl	800aad2 <atoi>
 8004716:	4603      	mov	r3, r0
 8004718:	4a53      	ldr	r2, [pc, #332]	@ (8004868 <HAL_UART_RxCpltCallback+0x268>)
 800471a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 800471e:	494a      	ldr	r1, [pc, #296]	@ (8004848 <HAL_UART_RxCpltCallback+0x248>)
 8004720:	2000      	movs	r0, #0
 8004722:	f008 f821 	bl	800c768 <strtok>
 8004726:	6138      	str	r0, [r7, #16]
			while(token != NULL)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1eb      	bne.n	8004706 <HAL_UART_RxCpltCallback+0x106>
			}
			memset(receiveCAM, 0, sizeof(receiveCAM));
 800472e:	2232      	movs	r2, #50	@ 0x32
 8004730:	2100      	movs	r1, #0
 8004732:	484b      	ldr	r0, [pc, #300]	@ (8004860 <HAL_UART_RxCpltCallback+0x260>)
 8004734:	f007 fffd 	bl	800c732 <memset>
			indexCAM = 0;
 8004738:	4b48      	ldr	r3, [pc, #288]	@ (800485c <HAL_UART_RxCpltCallback+0x25c>)
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart2, receiveCAM, 1) != HAL_OK)
 800473e:	2201      	movs	r2, #1
 8004740:	4947      	ldr	r1, [pc, #284]	@ (8004860 <HAL_UART_RxCpltCallback+0x260>)
 8004742:	484a      	ldr	r0, [pc, #296]	@ (800486c <HAL_UART_RxCpltCallback+0x26c>)
 8004744:	f005 fa9e 	bl	8009c84 <HAL_UART_Receive_IT>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d016      	beq.n	800477c <HAL_UART_RxCpltCallback+0x17c>
			{
				Error_Handler();
 800474e:	f000 f967 	bl	8004a20 <Error_Handler>
		{
 8004752:	e013      	b.n	800477c <HAL_UART_RxCpltCallback+0x17c>
			}
		}
		else
		{
			indexCAM++;
 8004754:	4b41      	ldr	r3, [pc, #260]	@ (800485c <HAL_UART_RxCpltCallback+0x25c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3301      	adds	r3, #1
 800475a:	4a40      	ldr	r2, [pc, #256]	@ (800485c <HAL_UART_RxCpltCallback+0x25c>)
 800475c:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart2, receiveCAM + indexCAM, 1) != HAL_OK)
 800475e:	4b3f      	ldr	r3, [pc, #252]	@ (800485c <HAL_UART_RxCpltCallback+0x25c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a3f      	ldr	r2, [pc, #252]	@ (8004860 <HAL_UART_RxCpltCallback+0x260>)
 8004764:	4413      	add	r3, r2
 8004766:	2201      	movs	r2, #1
 8004768:	4619      	mov	r1, r3
 800476a:	4840      	ldr	r0, [pc, #256]	@ (800486c <HAL_UART_RxCpltCallback+0x26c>)
 800476c:	f005 fa8a 	bl	8009c84 <HAL_UART_Receive_IT>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_UART_RxCpltCallback+0x17e>
			{
				Error_Handler();
 8004776:	f000 f953 	bl	8004a20 <Error_Handler>
 800477a:	e000      	b.n	800477e <HAL_UART_RxCpltCallback+0x17e>
		{
 800477c:	bf00      	nop
			}
		}
	}
	if(huart->Instance == USART3)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a3b      	ldr	r2, [pc, #236]	@ (8004870 <HAL_UART_RxCpltCallback+0x270>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d155      	bne.n	8004834 <HAL_UART_RxCpltCallback+0x234>
	{
		if(receiveMEGA[indexMEGA] == '\r' || receiveMEGA[indexMEGA] == '\n')
 8004788:	4b3a      	ldr	r3, [pc, #232]	@ (8004874 <HAL_UART_RxCpltCallback+0x274>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a3a      	ldr	r2, [pc, #232]	@ (8004878 <HAL_UART_RxCpltCallback+0x278>)
 800478e:	5cd3      	ldrb	r3, [r2, r3]
 8004790:	2b0d      	cmp	r3, #13
 8004792:	d005      	beq.n	80047a0 <HAL_UART_RxCpltCallback+0x1a0>
 8004794:	4b37      	ldr	r3, [pc, #220]	@ (8004874 <HAL_UART_RxCpltCallback+0x274>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a37      	ldr	r2, [pc, #220]	@ (8004878 <HAL_UART_RxCpltCallback+0x278>)
 800479a:	5cd3      	ldrb	r3, [r2, r3]
 800479c:	2b0a      	cmp	r3, #10
 800479e:	d134      	bne.n	800480a <HAL_UART_RxCpltCallback+0x20a>
		{
			receiveMEGA[indexMEGA] = '\0';
 80047a0:	4b34      	ldr	r3, [pc, #208]	@ (8004874 <HAL_UART_RxCpltCallback+0x274>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a34      	ldr	r2, [pc, #208]	@ (8004878 <HAL_UART_RxCpltCallback+0x278>)
 80047a6:	2100      	movs	r1, #0
 80047a8:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveMEGA, ",");
 80047aa:	4927      	ldr	r1, [pc, #156]	@ (8004848 <HAL_UART_RxCpltCallback+0x248>)
 80047ac:	4832      	ldr	r0, [pc, #200]	@ (8004878 <HAL_UART_RxCpltCallback+0x278>)
 80047ae:	f007 ffdb 	bl	800c768 <strtok>
 80047b2:	60f8      	str	r0, [r7, #12]
			dataindexMEGA = 0;
 80047b4:	4b31      	ldr	r3, [pc, #196]	@ (800487c <HAL_UART_RxCpltCallback+0x27c>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 80047ba:	e010      	b.n	80047de <HAL_UART_RxCpltCallback+0x1de>
			{
				sensorMEGA[dataindexMEGA++] = atoi(token);
 80047bc:	4b2f      	ldr	r3, [pc, #188]	@ (800487c <HAL_UART_RxCpltCallback+0x27c>)
 80047be:	681c      	ldr	r4, [r3, #0]
 80047c0:	1c63      	adds	r3, r4, #1
 80047c2:	4a2e      	ldr	r2, [pc, #184]	@ (800487c <HAL_UART_RxCpltCallback+0x27c>)
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f006 f983 	bl	800aad2 <atoi>
 80047cc:	4603      	mov	r3, r0
 80047ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004880 <HAL_UART_RxCpltCallback+0x280>)
 80047d0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 80047d4:	491c      	ldr	r1, [pc, #112]	@ (8004848 <HAL_UART_RxCpltCallback+0x248>)
 80047d6:	2000      	movs	r0, #0
 80047d8:	f007 ffc6 	bl	800c768 <strtok>
 80047dc:	60f8      	str	r0, [r7, #12]
			while(token != NULL)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1eb      	bne.n	80047bc <HAL_UART_RxCpltCallback+0x1bc>
			}
			memset(receiveMEGA, 0, sizeof(receiveMEGA));
 80047e4:	2232      	movs	r2, #50	@ 0x32
 80047e6:	2100      	movs	r1, #0
 80047e8:	4823      	ldr	r0, [pc, #140]	@ (8004878 <HAL_UART_RxCpltCallback+0x278>)
 80047ea:	f007 ffa2 	bl	800c732 <memset>
			indexMEGA = 0;
 80047ee:	4b21      	ldr	r3, [pc, #132]	@ (8004874 <HAL_UART_RxCpltCallback+0x274>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart3, receiveMEGA, 1) != HAL_OK)
 80047f4:	2201      	movs	r2, #1
 80047f6:	4920      	ldr	r1, [pc, #128]	@ (8004878 <HAL_UART_RxCpltCallback+0x278>)
 80047f8:	4822      	ldr	r0, [pc, #136]	@ (8004884 <HAL_UART_RxCpltCallback+0x284>)
 80047fa:	f005 fa43 	bl	8009c84 <HAL_UART_Receive_IT>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d016      	beq.n	8004832 <HAL_UART_RxCpltCallback+0x232>
			{
				Error_Handler();
 8004804:	f000 f90c 	bl	8004a20 <Error_Handler>
		{
 8004808:	e013      	b.n	8004832 <HAL_UART_RxCpltCallback+0x232>
			}
		}
		else
		{
			indexMEGA++;
 800480a:	4b1a      	ldr	r3, [pc, #104]	@ (8004874 <HAL_UART_RxCpltCallback+0x274>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3301      	adds	r3, #1
 8004810:	4a18      	ldr	r2, [pc, #96]	@ (8004874 <HAL_UART_RxCpltCallback+0x274>)
 8004812:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart3, receiveMEGA + indexMEGA, 1) != HAL_OK)
 8004814:	4b17      	ldr	r3, [pc, #92]	@ (8004874 <HAL_UART_RxCpltCallback+0x274>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a17      	ldr	r2, [pc, #92]	@ (8004878 <HAL_UART_RxCpltCallback+0x278>)
 800481a:	4413      	add	r3, r2
 800481c:	2201      	movs	r2, #1
 800481e:	4619      	mov	r1, r3
 8004820:	4818      	ldr	r0, [pc, #96]	@ (8004884 <HAL_UART_RxCpltCallback+0x284>)
 8004822:	f005 fa2f 	bl	8009c84 <HAL_UART_Receive_IT>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_UART_RxCpltCallback+0x234>
			{
				Error_Handler();
 800482c:	f000 f8f8 	bl	8004a20 <Error_Handler>
			}
		}
	}
}
 8004830:	e000      	b.n	8004834 <HAL_UART_RxCpltCallback+0x234>
		{
 8004832:	bf00      	nop
}
 8004834:	bf00      	nop
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	bd90      	pop	{r4, r7, pc}
 800483c:	40011000 	.word	0x40011000
 8004840:	20000520 	.word	0x20000520
 8004844:	200004ec 	.word	0x200004ec
 8004848:	08011320 	.word	0x08011320
 800484c:	20000524 	.word	0x20000524
 8004850:	20000528 	.word	0x20000528
 8004854:	200003f8 	.word	0x200003f8
 8004858:	40004400 	.word	0x40004400
 800485c:	20000574 	.word	0x20000574
 8004860:	20000540 	.word	0x20000540
 8004864:	20000578 	.word	0x20000578
 8004868:	2000057c 	.word	0x2000057c
 800486c:	20000440 	.word	0x20000440
 8004870:	40004800 	.word	0x40004800
 8004874:	200005f8 	.word	0x200005f8
 8004878:	200005c4 	.word	0x200005c4
 800487c:	200005fc 	.word	0x200005fc
 8004880:	20000600 	.word	0x20000600
 8004884:	20000488 	.word	0x20000488

08004888 <displayMode>:

void displayMode()
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
	lcd_set_cursor(0, 0);
 800488c:	2100      	movs	r1, #0
 800488e:	2000      	movs	r0, #0
 8004890:	f7fd fdf6 	bl	8002480 <lcd_set_cursor>
	switch (mode)
 8004894:	4b49      	ldr	r3, [pc, #292]	@ (80049bc <displayMode+0x134>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	3b01      	subs	r3, #1
 800489a:	2b15      	cmp	r3, #21
 800489c:	f200 8088 	bhi.w	80049b0 <displayMode+0x128>
 80048a0:	a201      	add	r2, pc, #4	@ (adr r2, 80048a8 <displayMode+0x20>)
 80048a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a6:	bf00      	nop
 80048a8:	08004901 	.word	0x08004901
 80048ac:	08004909 	.word	0x08004909
 80048b0:	08004911 	.word	0x08004911
 80048b4:	08004919 	.word	0x08004919
 80048b8:	08004921 	.word	0x08004921
 80048bc:	08004929 	.word	0x08004929
 80048c0:	08004931 	.word	0x08004931
 80048c4:	08004939 	.word	0x08004939
 80048c8:	08004941 	.word	0x08004941
 80048cc:	08004949 	.word	0x08004949
 80048d0:	08004951 	.word	0x08004951
 80048d4:	08004959 	.word	0x08004959
 80048d8:	08004961 	.word	0x08004961
 80048dc:	08004969 	.word	0x08004969
 80048e0:	08004971 	.word	0x08004971
 80048e4:	08004979 	.word	0x08004979
 80048e8:	08004981 	.word	0x08004981
 80048ec:	08004989 	.word	0x08004989
 80048f0:	08004991 	.word	0x08004991
 80048f4:	08004999 	.word	0x08004999
 80048f8:	080049a1 	.word	0x080049a1
 80048fc:	080049a9 	.word	0x080049a9
	{
		case RED_STEP:
			lcd_write_string("R STEP");
 8004900:	482f      	ldr	r0, [pc, #188]	@ (80049c0 <displayMode+0x138>)
 8004902:	f7fd fda7 	bl	8002454 <lcd_write_string>
			break;
 8004906:	e057      	b.n	80049b8 <displayMode+0x130>
		case RED_STORAGE:
			lcd_write_string("R STORAGE");
 8004908:	482e      	ldr	r0, [pc, #184]	@ (80049c4 <displayMode+0x13c>)
 800490a:	f7fd fda3 	bl	8002454 <lcd_write_string>
			break;
 800490e:	e053      	b.n	80049b8 <displayMode+0x130>
		case RED_FIND_BALL:
			lcd_write_string("R FIND BALL");
 8004910:	482d      	ldr	r0, [pc, #180]	@ (80049c8 <displayMode+0x140>)
 8004912:	f7fd fd9f 	bl	8002454 <lcd_write_string>
			break;
 8004916:	e04f      	b.n	80049b8 <displayMode+0x130>
		case RED_FACING_SILO:
			lcd_write_string("R FACING SILO");
 8004918:	482c      	ldr	r0, [pc, #176]	@ (80049cc <displayMode+0x144>)
 800491a:	f7fd fd9b 	bl	8002454 <lcd_write_string>
			break;
 800491e:	e04b      	b.n	80049b8 <displayMode+0x130>
		case RED_FIND_SILO:
			lcd_write_string("R FIND SILO");
 8004920:	482b      	ldr	r0, [pc, #172]	@ (80049d0 <displayMode+0x148>)
 8004922:	f7fd fd97 	bl	8002454 <lcd_write_string>
			break;
 8004926:	e047      	b.n	80049b8 <displayMode+0x130>
		case RED_RETRY:
			lcd_write_string("R R");
 8004928:	482a      	ldr	r0, [pc, #168]	@ (80049d4 <displayMode+0x14c>)
 800492a:	f7fd fd93 	bl	8002454 <lcd_write_string>
			break;
 800492e:	e043      	b.n	80049b8 <displayMode+0x130>
		case RED_RETRY_STORAGE:
			lcd_write_string("R R STORAGE");
 8004930:	4829      	ldr	r0, [pc, #164]	@ (80049d8 <displayMode+0x150>)
 8004932:	f7fd fd8f 	bl	8002454 <lcd_write_string>
			break;
 8004936:	e03f      	b.n	80049b8 <displayMode+0x130>
		case RED_RETRY_FIND_BALL:
			lcd_write_string("R R FIND BALL");
 8004938:	4828      	ldr	r0, [pc, #160]	@ (80049dc <displayMode+0x154>)
 800493a:	f7fd fd8b 	bl	8002454 <lcd_write_string>
			break;
 800493e:	e03b      	b.n	80049b8 <displayMode+0x130>
		case RED_RETRY_FACING_SILO:
			lcd_write_string("R R FACING SILO");
 8004940:	4827      	ldr	r0, [pc, #156]	@ (80049e0 <displayMode+0x158>)
 8004942:	f7fd fd87 	bl	8002454 <lcd_write_string>
			break;
 8004946:	e037      	b.n	80049b8 <displayMode+0x130>
		case RED_RETRY_FIND_SILO:
			lcd_write_string("R R FIND SILO");
 8004948:	4826      	ldr	r0, [pc, #152]	@ (80049e4 <displayMode+0x15c>)
 800494a:	f7fd fd83 	bl	8002454 <lcd_write_string>
			break;
 800494e:	e033      	b.n	80049b8 <displayMode+0x130>
		case BLUE_STEP:
			lcd_write_string("B STEP");
 8004950:	4825      	ldr	r0, [pc, #148]	@ (80049e8 <displayMode+0x160>)
 8004952:	f7fd fd7f 	bl	8002454 <lcd_write_string>
			break;
 8004956:	e02f      	b.n	80049b8 <displayMode+0x130>
		case BLUE_STORAGE:
			lcd_write_string("B STORAGE");
 8004958:	4824      	ldr	r0, [pc, #144]	@ (80049ec <displayMode+0x164>)
 800495a:	f7fd fd7b 	bl	8002454 <lcd_write_string>
			break;
 800495e:	e02b      	b.n	80049b8 <displayMode+0x130>
		case BLUE_FIND_BALL:
			lcd_write_string("B FIND BALL");
 8004960:	4823      	ldr	r0, [pc, #140]	@ (80049f0 <displayMode+0x168>)
 8004962:	f7fd fd77 	bl	8002454 <lcd_write_string>
			break;
 8004966:	e027      	b.n	80049b8 <displayMode+0x130>
		case BLUE_FACING_SILO:
			lcd_write_string("B FACING SILO");
 8004968:	4822      	ldr	r0, [pc, #136]	@ (80049f4 <displayMode+0x16c>)
 800496a:	f7fd fd73 	bl	8002454 <lcd_write_string>
			break;
 800496e:	e023      	b.n	80049b8 <displayMode+0x130>
		case BLUE_FIND_SILO:
			lcd_write_string("B FIND SILO");
 8004970:	4821      	ldr	r0, [pc, #132]	@ (80049f8 <displayMode+0x170>)
 8004972:	f7fd fd6f 	bl	8002454 <lcd_write_string>
			break;
 8004976:	e01f      	b.n	80049b8 <displayMode+0x130>
		case BLUE_RETRY:
			lcd_write_string("B R");
 8004978:	4820      	ldr	r0, [pc, #128]	@ (80049fc <displayMode+0x174>)
 800497a:	f7fd fd6b 	bl	8002454 <lcd_write_string>
			break;
 800497e:	e01b      	b.n	80049b8 <displayMode+0x130>
		case BLUE_RETRY_STORAGE:
			lcd_write_string("B R STORAGE");
 8004980:	481f      	ldr	r0, [pc, #124]	@ (8004a00 <displayMode+0x178>)
 8004982:	f7fd fd67 	bl	8002454 <lcd_write_string>
			break;
 8004986:	e017      	b.n	80049b8 <displayMode+0x130>
		case BLUE_RETRY_FIND_BALL:
			lcd_write_string("B R FIND BALL");
 8004988:	481e      	ldr	r0, [pc, #120]	@ (8004a04 <displayMode+0x17c>)
 800498a:	f7fd fd63 	bl	8002454 <lcd_write_string>
			break;
 800498e:	e013      	b.n	80049b8 <displayMode+0x130>
		case BLUE_RETRY_FACING_SILO:
			lcd_write_string("B R FACING SILO");
 8004990:	481d      	ldr	r0, [pc, #116]	@ (8004a08 <displayMode+0x180>)
 8004992:	f7fd fd5f 	bl	8002454 <lcd_write_string>
			break;
 8004996:	e00f      	b.n	80049b8 <displayMode+0x130>
		case BLUE_RETRY_FIND_SILO:
			lcd_write_string("B R FIND SILO");
 8004998:	481c      	ldr	r0, [pc, #112]	@ (8004a0c <displayMode+0x184>)
 800499a:	f7fd fd5b 	bl	8002454 <lcd_write_string>
			break;
 800499e:	e00b      	b.n	80049b8 <displayMode+0x130>
		case TES:
			lcd_write_string("TES");
 80049a0:	481b      	ldr	r0, [pc, #108]	@ (8004a10 <displayMode+0x188>)
 80049a2:	f7fd fd57 	bl	8002454 <lcd_write_string>
			break;
 80049a6:	e007      	b.n	80049b8 <displayMode+0x130>
		case TES2:
			lcd_write_string("TES2");
 80049a8:	481a      	ldr	r0, [pc, #104]	@ (8004a14 <displayMode+0x18c>)
 80049aa:	f7fd fd53 	bl	8002454 <lcd_write_string>
			break;
 80049ae:	e003      	b.n	80049b8 <displayMode+0x130>
		default:
			lcd_write_string("VOID");
 80049b0:	4819      	ldr	r0, [pc, #100]	@ (8004a18 <displayMode+0x190>)
 80049b2:	f7fd fd4f 	bl	8002454 <lcd_write_string>
			break;
 80049b6:	bf00      	nop
	}
}
 80049b8:	bf00      	nop
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	20000610 	.word	0x20000610
 80049c0:	08011324 	.word	0x08011324
 80049c4:	0801132c 	.word	0x0801132c
 80049c8:	08011338 	.word	0x08011338
 80049cc:	08011344 	.word	0x08011344
 80049d0:	08011354 	.word	0x08011354
 80049d4:	08011360 	.word	0x08011360
 80049d8:	08011364 	.word	0x08011364
 80049dc:	08011370 	.word	0x08011370
 80049e0:	08011380 	.word	0x08011380
 80049e4:	08011390 	.word	0x08011390
 80049e8:	080113a0 	.word	0x080113a0
 80049ec:	080113a8 	.word	0x080113a8
 80049f0:	080113b4 	.word	0x080113b4
 80049f4:	080113c0 	.word	0x080113c0
 80049f8:	080113d0 	.word	0x080113d0
 80049fc:	080113dc 	.word	0x080113dc
 8004a00:	080113e0 	.word	0x080113e0
 8004a04:	080113ec 	.word	0x080113ec
 8004a08:	080113fc 	.word	0x080113fc
 8004a0c:	0801140c 	.word	0x0801140c
 8004a10:	0801141c 	.word	0x0801141c
 8004a14:	08011420 	.word	0x08011420
 8004a18:	08011428 	.word	0x08011428
 8004a1c:	00000000 	.word	0x00000000

08004a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a24:	b672      	cpsid	i
}
 8004a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  Inverse_Kinematics(0, 0, 0);
 8004a28:	ed9f 2b0d 	vldr	d2, [pc, #52]	@ 8004a60 <Error_Handler+0x40>
 8004a2c:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 8004a60 <Error_Handler+0x40>
 8004a30:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 8004a60 <Error_Handler+0x40>
 8004a34:	f7fc fb88 	bl	8001148 <Inverse_Kinematics>
	  setMotorSpeed(1, 0);
 8004a38:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8004a60 <Error_Handler+0x40>
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	f7fc fb0d 	bl	800105c <setMotorSpeed>
	  setMotorSpeed(2, 0);
 8004a42:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8004a60 <Error_Handler+0x40>
 8004a46:	2002      	movs	r0, #2
 8004a48:	f7fc fb08 	bl	800105c <setMotorSpeed>
	  setMotorSpeed(7, 0);
 8004a4c:	ed9f 0b04 	vldr	d0, [pc, #16]	@ 8004a60 <Error_Handler+0x40>
 8004a50:	2007      	movs	r0, #7
 8004a52:	f7fc fb03 	bl	800105c <setMotorSpeed>
	  Inverse_Kinematics(0, 0, 0);
 8004a56:	bf00      	nop
 8004a58:	e7e6      	b.n	8004a28 <Error_Handler+0x8>
 8004a5a:	bf00      	nop
 8004a5c:	f3af 8000 	nop.w
	...

08004a68 <odometry_eg>:

extern int camera[13];
extern int sensorMEGA[4];

external_global odometry_eg()
{
 8004a68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a6c:	b09e      	sub	sp, #120	@ 0x78
 8004a6e:	af00      	add	r7, sp, #0
	external_global currentPosition;
    double yaw = sensorData[0] * M_PI / 180.0;
 8004a70:	4b93      	ldr	r3, [pc, #588]	@ (8004cc0 <odometry_eg+0x258>)
 8004a72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a76:	a38c      	add	r3, pc, #560	@ (adr r3, 8004ca8 <odometry_eg+0x240>)
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f7fb fdbc 	bl	80005f8 <__aeabi_dmul>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4610      	mov	r0, r2
 8004a86:	4619      	mov	r1, r3
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	4b8d      	ldr	r3, [pc, #564]	@ (8004cc4 <odometry_eg+0x25c>)
 8004a8e:	f7fb fedd 	bl	800084c <__aeabi_ddiv>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    /* ENCODER EXTERNAL */
    int dn1 = counter1 - oldEnc1;
 8004a9a:	4b8b      	ldr	r3, [pc, #556]	@ (8004cc8 <odometry_eg+0x260>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4b8b      	ldr	r3, [pc, #556]	@ (8004ccc <odometry_eg+0x264>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int dn2 = counter2 - oldEnc2;
 8004aa6:	4b8a      	ldr	r3, [pc, #552]	@ (8004cd0 <odometry_eg+0x268>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b8a      	ldr	r3, [pc, #552]	@ (8004cd4 <odometry_eg+0x26c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
    int dn3 = counter3 - oldEnc3;
 8004ab2:	4b89      	ldr	r3, [pc, #548]	@ (8004cd8 <odometry_eg+0x270>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	4b89      	ldr	r3, [pc, #548]	@ (8004cdc <odometry_eg+0x274>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	667b      	str	r3, [r7, #100]	@ 0x64

    oldEnc1 = counter1;
 8004abe:	4b82      	ldr	r3, [pc, #520]	@ (8004cc8 <odometry_eg+0x260>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a82      	ldr	r2, [pc, #520]	@ (8004ccc <odometry_eg+0x264>)
 8004ac4:	6013      	str	r3, [r2, #0]
    oldEnc2 = counter2;
 8004ac6:	4b82      	ldr	r3, [pc, #520]	@ (8004cd0 <odometry_eg+0x268>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a82      	ldr	r2, [pc, #520]	@ (8004cd4 <odometry_eg+0x26c>)
 8004acc:	6013      	str	r3, [r2, #0]
    oldEnc3 = counter3;
 8004ace:	4b82      	ldr	r3, [pc, #520]	@ (8004cd8 <odometry_eg+0x270>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a82      	ldr	r2, [pc, #520]	@ (8004cdc <odometry_eg+0x274>)
 8004ad4:	6013      	str	r3, [r2, #0]

    double dtheta = mm_per_tick * (dn2 - dn1) / e1_e2;
 8004ad6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fb fd21 	bl	8000524 <__aeabi_i2d>
 8004ae2:	a373      	add	r3, pc, #460	@ (adr r3, 8004cb0 <odometry_eg+0x248>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f7fb fd86 	bl	80005f8 <__aeabi_dmul>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4610      	mov	r0, r2
 8004af2:	4619      	mov	r1, r3
 8004af4:	a370      	add	r3, pc, #448	@ (adr r3, 8004cb8 <odometry_eg+0x250>)
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	f7fb fea7 	bl	800084c <__aeabi_ddiv>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    double dx = mm_per_tick * (dn3 + (dn2 - dn1) * e12_e3 / e1_e2);
 8004b06:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	22e6      	movs	r2, #230	@ 0xe6
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	4a73      	ldr	r2, [pc, #460]	@ (8004ce0 <odometry_eg+0x278>)
 8004b14:	fb82 1203 	smull	r1, r2, r2, r3
 8004b18:	441a      	add	r2, r3
 8004b1a:	1212      	asrs	r2, r2, #8
 8004b1c:	17db      	asrs	r3, r3, #31
 8004b1e:	1ad2      	subs	r2, r2, r3
 8004b20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b22:	4413      	add	r3, r2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fb fcfd 	bl	8000524 <__aeabi_i2d>
 8004b2a:	a361      	add	r3, pc, #388	@ (adr r3, 8004cb0 <odometry_eg+0x248>)
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	f7fb fd62 	bl	80005f8 <__aeabi_dmul>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double dy = mm_per_tick * (dn1 + dn2) / 2.0;
 8004b3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b40:	4413      	add	r3, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fb fcee 	bl	8000524 <__aeabi_i2d>
 8004b48:	a359      	add	r3, pc, #356	@ (adr r3, 8004cb0 <odometry_eg+0x248>)
 8004b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4e:	f7fb fd53 	bl	80005f8 <__aeabi_dmul>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4610      	mov	r0, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004b62:	f7fb fe73 	bl	800084c <__aeabi_ddiv>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    /* END */

//	double theta = heading + (dtheta / 2.0);
	xGlobal += dx * cos(yaw) + dy * sin(yaw);
 8004b6e:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8004b72:	f00a fbc5 	bl	800f300 <cos>
 8004b76:	ec51 0b10 	vmov	r0, r1, d0
 8004b7a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b7e:	f7fb fd3b 	bl	80005f8 <__aeabi_dmul>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4690      	mov	r8, r2
 8004b88:	4699      	mov	r9, r3
 8004b8a:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8004b8e:	f00a fc0b 	bl	800f3a8 <sin>
 8004b92:	ec51 0b10 	vmov	r0, r1, d0
 8004b96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b9a:	f7fb fd2d 	bl	80005f8 <__aeabi_dmul>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	f7fb fb71 	bl	800028c <__adddf3>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8004ce4 <odometry_eg+0x27c>)
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f7fb fb68 	bl	800028c <__adddf3>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4948      	ldr	r1, [pc, #288]	@ (8004ce4 <odometry_eg+0x27c>)
 8004bc2:	e9c1 2300 	strd	r2, r3, [r1]
	yGlobal += -dx * sin(yaw) + dy * cos(yaw);
 8004bc6:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8004bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bca:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8004bce:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8004bd2:	f00a fbe9 	bl	800f3a8 <sin>
 8004bd6:	ec53 2b10 	vmov	r2, r3, d0
 8004bda:	4620      	mov	r0, r4
 8004bdc:	4629      	mov	r1, r5
 8004bde:	f7fb fd0b 	bl	80005f8 <__aeabi_dmul>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4614      	mov	r4, r2
 8004be8:	461d      	mov	r5, r3
 8004bea:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8004bee:	f00a fb87 	bl	800f300 <cos>
 8004bf2:	ec51 0b10 	vmov	r0, r1, d0
 8004bf6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004bfa:	f7fb fcfd 	bl	80005f8 <__aeabi_dmul>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4620      	mov	r0, r4
 8004c04:	4629      	mov	r1, r5
 8004c06:	f7fb fb41 	bl	800028c <__adddf3>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4610      	mov	r0, r2
 8004c10:	4619      	mov	r1, r3
 8004c12:	4b35      	ldr	r3, [pc, #212]	@ (8004ce8 <odometry_eg+0x280>)
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	f7fb fb38 	bl	800028c <__adddf3>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4931      	ldr	r1, [pc, #196]	@ (8004ce8 <odometry_eg+0x280>)
 8004c22:	e9c1 2300 	strd	r2, r3, [r1]
	heading += dtheta;
 8004c26:	4b31      	ldr	r3, [pc, #196]	@ (8004cec <odometry_eg+0x284>)
 8004c28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c30:	f7fb fb2c 	bl	800028c <__adddf3>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	492c      	ldr	r1, [pc, #176]	@ (8004cec <odometry_eg+0x284>)
 8004c3a:	e9c1 2300 	strd	r2, r3, [r1]

	currentPosition.x = xGlobal;
 8004c3e:	4b29      	ldr	r3, [pc, #164]	@ (8004ce4 <odometry_eg+0x27c>)
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	e9c7 2306 	strd	r2, r3, [r7, #24]
	currentPosition.y = yGlobal;
 8004c48:	4b27      	ldr	r3, [pc, #156]	@ (8004ce8 <odometry_eg+0x280>)
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	currentPosition.h = sensorData[0];
 8004c52:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc0 <odometry_eg+0x258>)
 8004c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c58:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	return currentPosition;
 8004c5c:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8004c60:	f107 0518 	add.w	r5, r7, #24
 8004c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004c6c:	e884 0003 	stmia.w	r4, {r0, r1}
 8004c70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c74:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8004c78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c7c:	ec45 4b15 	vmov	d5, r4, r5
 8004c80:	ec41 0b16 	vmov	d6, r0, r1
 8004c84:	ec43 2b17 	vmov	d7, r2, r3
}
 8004c88:	eeb0 0a45 	vmov.f32	s0, s10
 8004c8c:	eef0 0a65 	vmov.f32	s1, s11
 8004c90:	eeb0 1a46 	vmov.f32	s2, s12
 8004c94:	eef0 1a66 	vmov.f32	s3, s13
 8004c98:	eeb0 2a47 	vmov.f32	s4, s14
 8004c9c:	eef0 2a67 	vmov.f32	s5, s15
 8004ca0:	3778      	adds	r7, #120	@ 0x78
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ca8:	54442d18 	.word	0x54442d18
 8004cac:	400921fb 	.word	0x400921fb
 8004cb0:	2d6e5f19 	.word	0x2d6e5f19
 8004cb4:	3fb752bc 	.word	0x3fb752bc
 8004cb8:	00000000 	.word	0x00000000
 8004cbc:	4077c000 	.word	0x4077c000
 8004cc0:	20000528 	.word	0x20000528
 8004cc4:	40668000 	.word	0x40668000
 8004cc8:	200004d0 	.word	0x200004d0
 8004ccc:	20000630 	.word	0x20000630
 8004cd0:	200004d4 	.word	0x200004d4
 8004cd4:	20000634 	.word	0x20000634
 8004cd8:	200004d8 	.word	0x200004d8
 8004cdc:	20000638 	.word	0x20000638
 8004ce0:	ac769185 	.word	0xac769185
 8004ce4:	20000618 	.word	0x20000618
 8004ce8:	20000620 	.word	0x20000620
 8004cec:	20000628 	.word	0x20000628

08004cf0 <display_EG>:
	sprintf(buffer, "E3:%d", counter3);
	lcd_write_string(buffer);
}

void display_EG()
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
	external_global position = odometry_eg();
 8004cf6:	f7ff feb7 	bl	8004a68 <odometry_eg>
 8004cfa:	eeb0 5a40 	vmov.f32	s10, s0
 8004cfe:	eef0 5a60 	vmov.f32	s11, s1
 8004d02:	eeb0 6a41 	vmov.f32	s12, s2
 8004d06:	eef0 6a61 	vmov.f32	s13, s3
 8004d0a:	eeb0 7a42 	vmov.f32	s14, s4
 8004d0e:	eef0 7a62 	vmov.f32	s15, s5
 8004d12:	ed87 5b00 	vstr	d5, [r7]
 8004d16:	ed87 6b02 	vstr	d6, [r7, #8]
 8004d1a:	ed87 7b04 	vstr	d7, [r7, #16]

	lcd_set_cursor(1, 0);
 8004d1e:	2100      	movs	r1, #0
 8004d20:	2001      	movs	r0, #1
 8004d22:	f7fd fbad 	bl	8002480 <lcd_set_cursor>
	sprintf(buffer, "X:%.2f", position.x);
 8004d26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d2a:	4912      	ldr	r1, [pc, #72]	@ (8004d74 <display_EG+0x84>)
 8004d2c:	4812      	ldr	r0, [pc, #72]	@ (8004d78 <display_EG+0x88>)
 8004d2e:	f007 fc9d 	bl	800c66c <siprintf>
	lcd_write_string(buffer);
 8004d32:	4811      	ldr	r0, [pc, #68]	@ (8004d78 <display_EG+0x88>)
 8004d34:	f7fd fb8e 	bl	8002454 <lcd_write_string>
	lcd_set_cursor(2, 0);
 8004d38:	2100      	movs	r1, #0
 8004d3a:	2002      	movs	r0, #2
 8004d3c:	f7fd fba0 	bl	8002480 <lcd_set_cursor>
	sprintf(buffer, "Y:%.2f", position.y);
 8004d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d44:	490d      	ldr	r1, [pc, #52]	@ (8004d7c <display_EG+0x8c>)
 8004d46:	480c      	ldr	r0, [pc, #48]	@ (8004d78 <display_EG+0x88>)
 8004d48:	f007 fc90 	bl	800c66c <siprintf>
	lcd_write_string(buffer);
 8004d4c:	480a      	ldr	r0, [pc, #40]	@ (8004d78 <display_EG+0x88>)
 8004d4e:	f7fd fb81 	bl	8002454 <lcd_write_string>
	lcd_set_cursor(3, 0);
 8004d52:	2100      	movs	r1, #0
 8004d54:	2003      	movs	r0, #3
 8004d56:	f7fd fb93 	bl	8002480 <lcd_set_cursor>
	sprintf(buffer, "H:%.2f", position.h);
 8004d5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d5e:	4908      	ldr	r1, [pc, #32]	@ (8004d80 <display_EG+0x90>)
 8004d60:	4805      	ldr	r0, [pc, #20]	@ (8004d78 <display_EG+0x88>)
 8004d62:	f007 fc83 	bl	800c66c <siprintf>
	lcd_write_string(buffer);
 8004d66:	4804      	ldr	r0, [pc, #16]	@ (8004d78 <display_EG+0x88>)
 8004d68:	f7fd fb74 	bl	8002454 <lcd_write_string>
}
 8004d6c:	bf00      	nop
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	08011478 	.word	0x08011478
 8004d78:	2000063c 	.word	0x2000063c
 8004d7c:	08011480 	.word	0x08011480
 8004d80:	080114ac 	.word	0x080114ac
 8004d84:	00000000 	.word	0x00000000

08004d88 <PID_controller>:
/* Variable for PID*/
double integral = 0.0, derivative = 0.0, prev_error = 0.0;
/* END */

double PID_controller(double setpoint, double actual_position, double Kp, double Ki, double Kd)
{
 8004d88:	b5b0      	push	{r4, r5, r7, lr}
 8004d8a:	b090      	sub	sp, #64	@ 0x40
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	ed87 0b08 	vstr	d0, [r7, #32]
 8004d92:	ed87 1b06 	vstr	d1, [r7, #24]
 8004d96:	ed87 2b04 	vstr	d2, [r7, #16]
 8004d9a:	ed87 3b02 	vstr	d3, [r7, #8]
 8004d9e:	ed87 4b00 	vstr	d4, [r7]
	double dt = 0.01;
 8004da2:	a33c      	add	r3, pc, #240	@ (adr r3, 8004e94 <PID_controller+0x10c>)
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    // Proportional
    double error = setpoint - actual_position;
 8004dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004db0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004db4:	f7fb fa68 	bl	8000288 <__aeabi_dsub>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Integral
    integral += error * dt;
 8004dc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004dc4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004dc8:	f7fb fc16 	bl	80005f8 <__aeabi_dmul>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8004e88 <PID_controller+0x100>)
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	f7fb fa57 	bl	800028c <__adddf3>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4929      	ldr	r1, [pc, #164]	@ (8004e88 <PID_controller+0x100>)
 8004de4:	e9c1 2300 	strd	r2, r3, [r1]

    // Derivative
	derivative = (error - prev_error) / dt;
 8004de8:	4b28      	ldr	r3, [pc, #160]	@ (8004e8c <PID_controller+0x104>)
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004df2:	f7fb fa49 	bl	8000288 <__aeabi_dsub>
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e02:	f7fb fd23 	bl	800084c <__aeabi_ddiv>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4921      	ldr	r1, [pc, #132]	@ (8004e90 <PID_controller+0x108>)
 8004e0c:	e9c1 2300 	strd	r2, r3, [r1]

    double output = Kp * error + Ki * integral + Kd * derivative;
 8004e10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004e14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e18:	f7fb fbee 	bl	80005f8 <__aeabi_dmul>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4614      	mov	r4, r2
 8004e22:	461d      	mov	r5, r3
 8004e24:	4b18      	ldr	r3, [pc, #96]	@ (8004e88 <PID_controller+0x100>)
 8004e26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e2e:	f7fb fbe3 	bl	80005f8 <__aeabi_dmul>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	4620      	mov	r0, r4
 8004e38:	4629      	mov	r1, r5
 8004e3a:	f7fb fa27 	bl	800028c <__adddf3>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	4614      	mov	r4, r2
 8004e44:	461d      	mov	r5, r3
 8004e46:	4b12      	ldr	r3, [pc, #72]	@ (8004e90 <PID_controller+0x108>)
 8004e48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e50:	f7fb fbd2 	bl	80005f8 <__aeabi_dmul>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4620      	mov	r0, r4
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	f7fb fa16 	bl	800028c <__adddf3>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    prev_error = error;
 8004e68:	4908      	ldr	r1, [pc, #32]	@ (8004e8c <PID_controller+0x104>)
 8004e6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004e6e:	e9c1 2300 	strd	r2, r3, [r1]

    return output;
 8004e72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e76:	ec43 2b17 	vmov	d7, r2, r3
}
 8004e7a:	eeb0 0a47 	vmov.f32	s0, s14
 8004e7e:	eef0 0a67 	vmov.f32	s1, s15
 8004e82:	3740      	adds	r7, #64	@ 0x40
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bdb0      	pop	{r4, r5, r7, pc}
 8004e88:	20000648 	.word	0x20000648
 8004e8c:	20000658 	.word	0x20000658
 8004e90:	20000650 	.word	0x20000650
 8004e94:	47ae147b 	.word	0x47ae147b
 8004e98:	3f847ae1 	.word	0x3f847ae1

08004e9c <PID_controllerH>:

double PID_controllerH(double setpoint, double actual_position, double Kp)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	@ 0x28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	ed87 0b04 	vstr	d0, [r7, #16]
 8004ea6:	ed87 1b02 	vstr	d1, [r7, #8]
 8004eaa:	ed87 2b00 	vstr	d2, [r7]
	double error = setpoint - actual_position;
 8004eae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004eb6:	f7fb f9e7 	bl	8000288 <__aeabi_dsub>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if(error > 180)
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f44 <PID_controllerH+0xa8>)
 8004ec8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004ecc:	f7fb fe24 	bl	8000b18 <__aeabi_dcmpgt>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <PID_controllerH+0x52>
	{
		error -= 360;
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	4b1b      	ldr	r3, [pc, #108]	@ (8004f48 <PID_controllerH+0xac>)
 8004edc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004ee0:	f7fb f9d2 	bl	8000288 <__aeabi_dsub>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004eec:	e014      	b.n	8004f18 <PID_controllerH+0x7c>
	}
	else if(error < -180)
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	4b16      	ldr	r3, [pc, #88]	@ (8004f4c <PID_controllerH+0xb0>)
 8004ef4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004ef8:	f7fb fdf0 	bl	8000adc <__aeabi_dcmplt>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <PID_controllerH+0x7c>
	{
		error += 360;
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	4b10      	ldr	r3, [pc, #64]	@ (8004f48 <PID_controllerH+0xac>)
 8004f08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004f0c:	f7fb f9be 	bl	800028c <__adddf3>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

    // Proportional
	double P = Kp * error;
 8004f18:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f20:	f7fb fb6a 	bl	80005f8 <__aeabi_dmul>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return P;
 8004f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f30:	ec43 2b17 	vmov	d7, r2, r3
}
 8004f34:	eeb0 0a47 	vmov.f32	s0, s14
 8004f38:	eef0 0a67 	vmov.f32	s1, s15
 8004f3c:	3728      	adds	r7, #40	@ 0x28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40668000 	.word	0x40668000
 8004f48:	40768000 	.word	0x40768000
 8004f4c:	c0668000 	.word	0xc0668000

08004f50 <map>:
uint8_t lookingMode = 1;

Silo silos[MAX_SILOS];

int map(int st1, int fn1, int st2, int fn2, int value)
{
 8004f50:	b5b0      	push	{r4, r5, r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
    return (1.0 * (value - st1)) / ((fn1 - st1) * 1.0) * (fn2 - st2) + st2;
 8004f5e:	6a3a      	ldr	r2, [r7, #32]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fb fadd 	bl	8000524 <__aeabi_i2d>
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	460d      	mov	r5, r1
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fb fad5 	bl	8000524 <__aeabi_i2d>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4620      	mov	r0, r4
 8004f80:	4629      	mov	r1, r5
 8004f82:	f7fb fc63 	bl	800084c <__aeabi_ddiv>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4614      	mov	r4, r2
 8004f8c:	461d      	mov	r5, r3
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fb fac5 	bl	8000524 <__aeabi_i2d>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	f7fb fb29 	bl	80005f8 <__aeabi_dmul>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4614      	mov	r4, r2
 8004fac:	461d      	mov	r5, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fb fab8 	bl	8000524 <__aeabi_i2d>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4620      	mov	r0, r4
 8004fba:	4629      	mov	r1, r5
 8004fbc:	f7fb f966 	bl	800028c <__adddf3>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	f7fb fdc6 	bl	8000b58 <__aeabi_d2iz>
 8004fcc:	4603      	mov	r3, r0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004fd8 <smoothVelocity>:
    }
    return target;
}

void smoothVelocity(double* Vx, double* Vy, double* W, double smoothingFactor)
{
 8004fd8:	b5b0      	push	{r4, r5, r7, lr}
 8004fda:	b08c      	sub	sp, #48	@ 0x30
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6178      	str	r0, [r7, #20]
 8004fe0:	6139      	str	r1, [r7, #16]
 8004fe2:	60fa      	str	r2, [r7, #12]
 8004fe4:	ed87 0b00 	vstr	d0, [r7]
	double prevVx = 0.0;
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double prevVy = 0.0;
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double prevW = 0.0;
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *Vx = (1.0 - smoothingFactor) * prevVx + smoothingFactor * (*Vx);
 800500c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005010:	f04f 0000 	mov.w	r0, #0
 8005014:	493e      	ldr	r1, [pc, #248]	@ (8005110 <smoothVelocity+0x138>)
 8005016:	f7fb f937 	bl	8000288 <__aeabi_dsub>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4610      	mov	r0, r2
 8005020:	4619      	mov	r1, r3
 8005022:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005026:	f7fb fae7 	bl	80005f8 <__aeabi_dmul>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4614      	mov	r4, r2
 8005030:	461d      	mov	r5, r3
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800503c:	f7fb fadc 	bl	80005f8 <__aeabi_dmul>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4620      	mov	r0, r4
 8005046:	4629      	mov	r1, r5
 8005048:	f7fb f920 	bl	800028c <__adddf3>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	6979      	ldr	r1, [r7, #20]
 8005052:	e9c1 2300 	strd	r2, r3, [r1]
    *Vy = (1.0 - smoothingFactor) * prevVy + smoothingFactor * (*Vy);
 8005056:	e9d7 2300 	ldrd	r2, r3, [r7]
 800505a:	f04f 0000 	mov.w	r0, #0
 800505e:	492c      	ldr	r1, [pc, #176]	@ (8005110 <smoothVelocity+0x138>)
 8005060:	f7fb f912 	bl	8000288 <__aeabi_dsub>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4610      	mov	r0, r2
 800506a:	4619      	mov	r1, r3
 800506c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005070:	f7fb fac2 	bl	80005f8 <__aeabi_dmul>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4614      	mov	r4, r2
 800507a:	461d      	mov	r5, r3
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005086:	f7fb fab7 	bl	80005f8 <__aeabi_dmul>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4620      	mov	r0, r4
 8005090:	4629      	mov	r1, r5
 8005092:	f7fb f8fb 	bl	800028c <__adddf3>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	6939      	ldr	r1, [r7, #16]
 800509c:	e9c1 2300 	strd	r2, r3, [r1]
    *W = (1.0 - smoothingFactor) * prevW + smoothingFactor * (*W);
 80050a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050a4:	f04f 0000 	mov.w	r0, #0
 80050a8:	4919      	ldr	r1, [pc, #100]	@ (8005110 <smoothVelocity+0x138>)
 80050aa:	f7fb f8ed 	bl	8000288 <__aeabi_dsub>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4610      	mov	r0, r2
 80050b4:	4619      	mov	r1, r3
 80050b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050ba:	f7fb fa9d 	bl	80005f8 <__aeabi_dmul>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4614      	mov	r4, r2
 80050c4:	461d      	mov	r5, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050d0:	f7fb fa92 	bl	80005f8 <__aeabi_dmul>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4620      	mov	r0, r4
 80050da:	4629      	mov	r1, r5
 80050dc:	f7fb f8d6 	bl	800028c <__adddf3>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	68f9      	ldr	r1, [r7, #12]
 80050e6:	e9c1 2300 	strd	r2, r3, [r1]

    prevVx = *Vx;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    prevVy = *Vy;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    prevW = *W;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	e9c7 2306 	strd	r2, r3, [r7, #24]
}
 8005108:	bf00      	nop
 800510a:	3730      	adds	r7, #48	@ 0x30
 800510c:	46bd      	mov	sp, r7
 800510e:	bdb0      	pop	{r4, r5, r7, pc}
 8005110:	3ff00000 	.word	0x3ff00000

08005114 <atTargetEG>:
    }
    return targetVelocity;
}

bool atTargetEG(external_global setpoint, external_global position, double xyTolerance, double hTolerance)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b098      	sub	sp, #96	@ 0x60
 8005118:	af00      	add	r7, sp, #0
 800511a:	ed87 6b02 	vstr	d6, [r7, #8]
 800511e:	ed87 7b00 	vstr	d7, [r7]
 8005122:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 8005126:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 800512a:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
 800512e:	ed87 3b04 	vstr	d3, [r7, #16]
 8005132:	ed87 4b06 	vstr	d4, [r7, #24]
 8005136:	ed87 5b08 	vstr	d5, [r7, #32]
	double error_x = setpoint.x - position.x;
 800513a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800513e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005142:	f7fb f8a1 	bl	8000288 <__aeabi_dsub>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	double error_y = setpoint.y - position.y;
 800514e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8005152:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005156:	f7fb f897 	bl	8000288 <__aeabi_dsub>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double error_h = fabs(setpoint.h - position.h);
 8005162:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8005166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800516a:	f7fb f88d 	bl	8000288 <__aeabi_dsub>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4611      	mov	r1, r2
 8005174:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005176:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800517a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	double distance = hypot(error_x, error_y);
 800517c:	ed97 1b14 	vldr	d1, [r7, #80]	@ 0x50
 8005180:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 8005184:	f00a f888 	bl	800f298 <hypot>
 8005188:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	return distance < xyTolerance && error_h < hTolerance;
 800518c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005190:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8005194:	f7fb fca2 	bl	8000adc <__aeabi_dcmplt>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <atTargetEG+0xa0>
 800519e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80051a6:	f7fb fc99 	bl	8000adc <__aeabi_dcmplt>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <atTargetEG+0xa0>
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <atTargetEG+0xa2>
 80051b4:	2300      	movs	r3, #0
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	b2db      	uxtb	r3, r3
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3760      	adds	r7, #96	@ 0x60
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	0000      	movs	r0, r0
	...

080051c8 <lookForTheBall>:
	double distance = hypot(error_x, error_y);
	return distance < xyTolerance && error_h < hTolerance;
}

void lookForTheBall(double targetAngle1, double targetAngle2, double currentAngle)
{
 80051c8:	b5b0      	push	{r4, r5, r7, lr}
 80051ca:	b08c      	sub	sp, #48	@ 0x30
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	ed87 0b04 	vstr	d0, [r7, #16]
 80051d2:	ed87 1b02 	vstr	d1, [r7, #8]
 80051d6:	ed87 2b00 	vstr	d2, [r7]
    double targetAngle;
    uint8_t nextMode;

    switch (lookingMode)
 80051da:	4b25      	ldr	r3, [pc, #148]	@ (8005270 <lookForTheBall+0xa8>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d002      	beq.n	80051e8 <lookForTheBall+0x20>
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d008      	beq.n	80051f8 <lookForTheBall+0x30>
        case 2:
        	targetAngle = targetAngle1;
            nextMode = 1;
            break;
        default:
            return; // Invalid mode, do nothing
 80051e6:	e03c      	b.n	8005262 <lookForTheBall+0x9a>
        	targetAngle = targetAngle2;
 80051e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            nextMode = 2;
 80051f0:	2302      	movs	r3, #2
 80051f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80051f6:	e007      	b.n	8005208 <lookForTheBall+0x40>
        	targetAngle = targetAngle1;
 80051f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            nextMode = 1;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8005206:	bf00      	nop
    }

    double W = PID_controllerH(targetAngle, currentAngle, 1.0);
 8005208:	ed9f 2b17 	vldr	d2, [pc, #92]	@ 8005268 <lookForTheBall+0xa0>
 800520c:	ed97 1b00 	vldr	d1, [r7]
 8005210:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8005214:	f7ff fe42 	bl	8004e9c <PID_controllerH>
 8005218:	ed87 0b06 	vstr	d0, [r7, #24]
    putar(0, 0, W);
 800521c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005220:	f7fb fc9a 	bl	8000b58 <__aeabi_d2iz>
 8005224:	4603      	mov	r3, r0
 8005226:	461a      	mov	r2, r3
 8005228:	2100      	movs	r1, #0
 800522a:	2000      	movs	r0, #0
 800522c:	f7fc fd94 	bl	8001d58 <putar>
    if (fabs(targetAngle - currentAngle) < 5.0)
 8005230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005234:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005238:	f7fb f826 	bl	8000288 <__aeabi_dsub>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4614      	mov	r4, r2
 8005242:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	4b0a      	ldr	r3, [pc, #40]	@ (8005274 <lookForTheBall+0xac>)
 800524c:	4620      	mov	r0, r4
 800524e:	4629      	mov	r1, r5
 8005250:	f7fb fc44 	bl	8000adc <__aeabi_dcmplt>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <lookForTheBall+0x9a>
    {
        lookingMode = nextMode;
 800525a:	4a05      	ldr	r2, [pc, #20]	@ (8005270 <lookForTheBall+0xa8>)
 800525c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005260:	7013      	strb	r3, [r2, #0]
    }
}
 8005262:	3730      	adds	r7, #48	@ 0x30
 8005264:	46bd      	mov	sp, r7
 8005266:	bdb0      	pop	{r4, r5, r7, pc}
 8005268:	00000000 	.word	0x00000000
 800526c:	3ff00000 	.word	0x3ff00000
 8005270:	200000c9 	.word	0x200000c9
 8005274:	40140000 	.word	0x40140000

08005278 <servo_write>:

void servo_write(int angle)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af02      	add	r7, sp, #8
 800527e:	6078      	str	r0, [r7, #4]
	int i = map(0, 180, 30, 130, angle);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	2382      	movs	r3, #130	@ 0x82
 8005286:	221e      	movs	r2, #30
 8005288:	21b4      	movs	r1, #180	@ 0xb4
 800528a:	2000      	movs	r0, #0
 800528c:	f7ff fe60 	bl	8004f50 <map>
 8005290:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, i);
 8005292:	4b04      	ldr	r3, [pc, #16]	@ (80052a4 <servo_write+0x2c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800529a:	bf00      	nop
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000368 	.word	0x20000368

080052a8 <PID_EG>:

void PID_EG(external_global setpoint, double Kp, double Ki, double Kd, double KpH, double smoothingFactor, double maxVelocity)
{
 80052a8:	b5b0      	push	{r4, r5, r7, lr}
 80052aa:	b0ae      	sub	sp, #184	@ 0xb8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	ed87 3b08 	vstr	d3, [r7, #32]
 80052b2:	ed87 4b06 	vstr	d4, [r7, #24]
 80052b6:	ed87 5b04 	vstr	d5, [r7, #16]
 80052ba:	ed87 6b02 	vstr	d6, [r7, #8]
 80052be:	ed87 7b00 	vstr	d7, [r7]
 80052c2:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 80052c6:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 80052ca:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
	external_global currentPosition = odometry_eg();
 80052ce:	f7ff fbcb 	bl	8004a68 <odometry_eg>
 80052d2:	eeb0 5a40 	vmov.f32	s10, s0
 80052d6:	eef0 5a60 	vmov.f32	s11, s1
 80052da:	eeb0 6a41 	vmov.f32	s12, s2
 80052de:	eef0 6a61 	vmov.f32	s13, s3
 80052e2:	eeb0 7a42 	vmov.f32	s14, s4
 80052e6:	eef0 7a62 	vmov.f32	s15, s5
 80052ea:	ed87 5b16 	vstr	d5, [r7, #88]	@ 0x58
 80052ee:	ed87 6b18 	vstr	d6, [r7, #96]	@ 0x60
 80052f2:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68

	double pitch = sensorData[1] * 300; // IMU pitch
 80052f6:	4bae      	ldr	r3, [pc, #696]	@ (80055b0 <PID_EG+0x308>)
 80052f8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80052fc:	a3a8      	add	r3, pc, #672	@ (adr r3, 80055a0 <PID_EG+0x2f8>)
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	f7fb f979 	bl	80005f8 <__aeabi_dmul>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
	double roll = sensorData[2] * 300; // IMU roll
 800530e:	4ba8      	ldr	r3, [pc, #672]	@ (80055b0 <PID_EG+0x308>)
 8005310:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005314:	a3a2      	add	r3, pc, #648	@ (adr r3, 80055a0 <PID_EG+0x2f8>)
 8005316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531a:	f7fb f96d 	bl	80005f8 <__aeabi_dmul>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double error_x = setpoint.x - currentPosition.x;
 8005326:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800532a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800532e:	f7fa ffab 	bl	8000288 <__aeabi_dsub>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
    double error_y = setpoint.y - currentPosition.y;
 800533a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800533e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8005342:	f7fa ffa1 	bl	8000288 <__aeabi_dsub>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    double current_heading_rad = currentPosition.h * M_PI / 180.0;
 800534e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005352:	a395      	add	r3, pc, #596	@ (adr r3, 80055a8 <PID_EG+0x300>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f7fb f94e 	bl	80005f8 <__aeabi_dmul>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4610      	mov	r0, r2
 8005362:	4619      	mov	r1, r3
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	4b92      	ldr	r3, [pc, #584]	@ (80055b4 <PID_EG+0x30c>)
 800536a:	f7fb fa6f 	bl	800084c <__aeabi_ddiv>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

    double distance = hypot(error_x, error_y);
 8005376:	ed97 1b26 	vldr	d1, [r7, #152]	@ 0x98
 800537a:	ed97 0b28 	vldr	d0, [r7, #160]	@ 0xa0
 800537e:	f009 ff8b 	bl	800f298 <hypot>
 8005382:	ed87 0b22 	vstr	d0, [r7, #136]	@ 0x88
    double velocityFactor = fmin(distance, maxVelocity) / distance;
 8005386:	ed97 1b32 	vldr	d1, [r7, #200]	@ 0xc8
 800538a:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 800538e:	f00a f894 	bl	800f4ba <fmin>
 8005392:	ec51 0b10 	vmov	r0, r1, d0
 8005396:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800539a:	f7fb fa57 	bl	800084c <__aeabi_ddiv>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    double Vx_local = PID_controller(setpoint.x, currentPosition.x, Kp, Ki, Kd) * velocityFactor;
 80053a6:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80053aa:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80053ae:	ed97 4b04 	vldr	d4, [r7, #16]
 80053b2:	ed97 3b06 	vldr	d3, [r7, #24]
 80053b6:	ed97 2b08 	vldr	d2, [r7, #32]
 80053ba:	eeb0 1a46 	vmov.f32	s2, s12
 80053be:	eef0 1a66 	vmov.f32	s3, s13
 80053c2:	eeb0 0a47 	vmov.f32	s0, s14
 80053c6:	eef0 0a67 	vmov.f32	s1, s15
 80053ca:	f7ff fcdd 	bl	8004d88 <PID_controller>
 80053ce:	ec53 2b10 	vmov	r2, r3, d0
 80053d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053d6:	f7fb f90f 	bl	80005f8 <__aeabi_dmul>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    double Vy_local = PID_controller(setpoint.y, currentPosition.y, Kp, Ki, Kd) * velocityFactor;
 80053e2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80053e6:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80053ea:	ed97 4b04 	vldr	d4, [r7, #16]
 80053ee:	ed97 3b06 	vldr	d3, [r7, #24]
 80053f2:	ed97 2b08 	vldr	d2, [r7, #32]
 80053f6:	eeb0 1a46 	vmov.f32	s2, s12
 80053fa:	eef0 1a66 	vmov.f32	s3, s13
 80053fe:	eeb0 0a47 	vmov.f32	s0, s14
 8005402:	eef0 0a67 	vmov.f32	s1, s15
 8005406:	f7ff fcbf 	bl	8004d88 <PID_controller>
 800540a:	ec53 2b10 	vmov	r2, r3, d0
 800540e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005412:	f7fb f8f1 	bl	80005f8 <__aeabi_dmul>
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    double Vx = Vx_local * cos(current_heading_rad) - Vy_local * sin(current_heading_rad);
 800541e:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8005422:	f009 ff6d 	bl	800f300 <cos>
 8005426:	ec51 0b10 	vmov	r0, r1, d0
 800542a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800542e:	f7fb f8e3 	bl	80005f8 <__aeabi_dmul>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4614      	mov	r4, r2
 8005438:	461d      	mov	r5, r3
 800543a:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800543e:	f009 ffb3 	bl	800f3a8 <sin>
 8005442:	ec51 0b10 	vmov	r0, r1, d0
 8005446:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800544a:	f7fb f8d5 	bl	80005f8 <__aeabi_dmul>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	4620      	mov	r0, r4
 8005454:	4629      	mov	r1, r5
 8005456:	f7fa ff17 	bl	8000288 <__aeabi_dsub>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double Vy = Vx_local * sin(current_heading_rad) + Vy_local * cos(current_heading_rad);
 8005462:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8005466:	f009 ff9f 	bl	800f3a8 <sin>
 800546a:	ec51 0b10 	vmov	r0, r1, d0
 800546e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8005472:	f7fb f8c1 	bl	80005f8 <__aeabi_dmul>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4614      	mov	r4, r2
 800547c:	461d      	mov	r5, r3
 800547e:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8005482:	f009 ff3d 	bl	800f300 <cos>
 8005486:	ec51 0b10 	vmov	r0, r1, d0
 800548a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800548e:	f7fb f8b3 	bl	80005f8 <__aeabi_dmul>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4620      	mov	r0, r4
 8005498:	4629      	mov	r1, r5
 800549a:	f7fa fef7 	bl	800028c <__adddf3>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double W = PID_controllerH(setpoint.h, currentPosition.h, KpH);
 80054a6:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80054aa:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 80054ae:	ed97 2b02 	vldr	d2, [r7, #8]
 80054b2:	eeb0 1a46 	vmov.f32	s2, s12
 80054b6:	eef0 1a66 	vmov.f32	s3, s13
 80054ba:	eeb0 0a47 	vmov.f32	s0, s14
 80054be:	eef0 0a67 	vmov.f32	s1, s15
 80054c2:	f7ff fceb 	bl	8004e9c <PID_controllerH>
 80054c6:	eeb0 7a40 	vmov.f32	s14, s0
 80054ca:	eef0 7a60 	vmov.f32	s15, s1
 80054ce:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

    if(roll > 0)	{Vx -= roll;}
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80054de:	f7fb fb1b 	bl	8000b18 <__aeabi_dcmpgt>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <PID_EG+0x256>
 80054e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80054ec:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80054f0:	f7fa feca 	bl	8000288 <__aeabi_dsub>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80054fc:	e009      	b.n	8005512 <PID_EG+0x26a>
    else			{Vx += roll;}
 80054fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8005502:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8005506:	f7fa fec1 	bl	800028c <__adddf3>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    if(pitch > 0)	{Vy += pitch;}
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800551e:	f7fb fafb 	bl	8000b18 <__aeabi_dcmpgt>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <PID_EG+0x296>
 8005528:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800552c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8005530:	f7fa feac 	bl	800028c <__adddf3>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800553c:	e009      	b.n	8005552 <PID_EG+0x2aa>
    else			{Vy -= pitch;}
 800553e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8005542:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8005546:	f7fa fe9f 	bl	8000288 <__aeabi_dsub>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
 8005552:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8005556:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800555a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800555e:	ed97 0b00 	vldr	d0, [r7]
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff fd38 	bl	8004fd8 <smoothVelocity>
    trying(Vx, Vy, W, setpoint.h, KpH);
 8005568:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800556c:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8005570:	ed97 5b10 	vldr	d5, [r7, #64]	@ 0x40
 8005574:	ed97 3b0e 	vldr	d3, [r7, #56]	@ 0x38
 8005578:	ed97 4b02 	vldr	d4, [r7, #8]
 800557c:	eeb0 2a45 	vmov.f32	s4, s10
 8005580:	eef0 2a65 	vmov.f32	s5, s11
 8005584:	eeb0 1a46 	vmov.f32	s2, s12
 8005588:	eef0 1a66 	vmov.f32	s3, s13
 800558c:	eeb0 0a47 	vmov.f32	s0, s14
 8005590:	eef0 0a67 	vmov.f32	s1, s15
 8005594:	f7fc f8a8 	bl	80016e8 <trying>
//    Inverse_Kinematics(Vx, Vy, W);
}
 8005598:	bf00      	nop
 800559a:	37b8      	adds	r7, #184	@ 0xb8
 800559c:	46bd      	mov	sp, r7
 800559e:	bdb0      	pop	{r4, r5, r7, pc}
 80055a0:	00000000 	.word	0x00000000
 80055a4:	4072c000 	.word	0x4072c000
 80055a8:	54442d18 	.word	0x54442d18
 80055ac:	400921fb 	.word	0x400921fb
 80055b0:	20000528 	.word	0x20000528
 80055b4:	40668000 	.word	0x40668000

080055b8 <PID_moveToCoordinate>:
    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
    Inverse_Kinematics(Vx, Vy, W);
}

void PID_moveToCoordinate(external_global *setpoint, PID_parameter *parameters, uint16_t numPoints)
{
 80055b8:	b5b0      	push	{r4, r5, r7, lr}
 80055ba:	b0a2      	sub	sp, #136	@ 0x88
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	4613      	mov	r3, r2
 80055c4:	80fb      	strh	r3, [r7, #6]
	static uint8_t thread = 0;
	if(thread >= numPoints)
 80055c6:	4b0a      	ldr	r3, [pc, #40]	@ (80055f0 <PID_moveToCoordinate+0x38>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	88fb      	ldrh	r3, [r7, #6]
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d810      	bhi.n	80055f4 <PID_moveToCoordinate+0x3c>
	{
		Inverse_Kinematics(0, 0, 0);
 80055d2:	ed9f 2b05 	vldr	d2, [pc, #20]	@ 80055e8 <PID_moveToCoordinate+0x30>
 80055d6:	ed9f 1b04 	vldr	d1, [pc, #16]	@ 80055e8 <PID_moveToCoordinate+0x30>
 80055da:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 80055e8 <PID_moveToCoordinate+0x30>
 80055de:	f7fb fdb3 	bl	8001148 <Inverse_Kinematics>
 80055e2:	e230      	b.n	8005a46 <PID_moveToCoordinate+0x48e>
 80055e4:	f3af 8000 	nop.w
	...
 80055f0:	20000700 	.word	0x20000700
		return;
	}
	external_global currentPosition = odometry_eg();
 80055f4:	f7ff fa38 	bl	8004a68 <odometry_eg>
 80055f8:	eeb0 5a40 	vmov.f32	s10, s0
 80055fc:	eef0 5a60 	vmov.f32	s11, s1
 8005600:	eeb0 6a41 	vmov.f32	s12, s2
 8005604:	eef0 6a61 	vmov.f32	s13, s3
 8005608:	eeb0 7a42 	vmov.f32	s14, s4
 800560c:	eef0 7a62 	vmov.f32	s15, s5
 8005610:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8005614:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8005618:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

	double pitch = sensorData[1] * 300; // IMU pitch
 800561c:	4bbc      	ldr	r3, [pc, #752]	@ (8005910 <PID_moveToCoordinate+0x358>)
 800561e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005622:	a3b7      	add	r3, pc, #732	@ (adr r3, 8005900 <PID_moveToCoordinate+0x348>)
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	f7fa ffe6 	bl	80005f8 <__aeabi_dmul>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	double roll = sensorData[2] * 300; // IMU roll
 8005634:	4bb6      	ldr	r3, [pc, #728]	@ (8005910 <PID_moveToCoordinate+0x358>)
 8005636:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800563a:	a3b1      	add	r3, pc, #708	@ (adr r3, 8005900 <PID_moveToCoordinate+0x348>)
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f7fa ffda 	bl	80005f8 <__aeabi_dmul>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

    double error_x = setpoint[thread].x - currentPosition.x;
 800564c:	4bb1      	ldr	r3, [pc, #708]	@ (8005914 <PID_moveToCoordinate+0x35c>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	4613      	mov	r3, r2
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	4413      	add	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	461a      	mov	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005664:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005668:	f7fa fe0e 	bl	8000288 <__aeabi_dsub>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    double error_y = setpoint[thread].y - currentPosition.y;
 8005674:	4ba7      	ldr	r3, [pc, #668]	@ (8005914 <PID_moveToCoordinate+0x35c>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	4613      	mov	r3, r2
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	4413      	add	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	461a      	mov	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800568c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005690:	f7fa fdfa 	bl	8000288 <__aeabi_dsub>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    double current_heading_rad = currentPosition.h * M_PI / 180.0;
 800569c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80056a0:	a399      	add	r3, pc, #612	@ (adr r3, 8005908 <PID_moveToCoordinate+0x350>)
 80056a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a6:	f7fa ffa7 	bl	80005f8 <__aeabi_dmul>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4610      	mov	r0, r2
 80056b0:	4619      	mov	r1, r3
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	4b98      	ldr	r3, [pc, #608]	@ (8005918 <PID_moveToCoordinate+0x360>)
 80056b8:	f7fb f8c8 	bl	800084c <__aeabi_ddiv>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

    double distance = hypot(error_x, error_y);
 80056c4:	ed97 1b1a 	vldr	d1, [r7, #104]	@ 0x68
 80056c8:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 80056cc:	f009 fde4 	bl	800f298 <hypot>
 80056d0:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
    double velocityFactor = fmin(distance, parameters[thread].maxVelocity) / distance;
 80056d4:	4b8f      	ldr	r3, [pc, #572]	@ (8005914 <PID_moveToCoordinate+0x35c>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	019b      	lsls	r3, r3, #6
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	4413      	add	r3, r2
 80056de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fa ff1f 	bl	8000524 <__aeabi_i2d>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	ec43 2b11 	vmov	d1, r2, r3
 80056ee:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 80056f2:	f009 fee2 	bl	800f4ba <fmin>
 80056f6:	ec51 0b10 	vmov	r0, r1, d0
 80056fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056fe:	f7fb f8a5 	bl	800084c <__aeabi_ddiv>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    double Vx_local = PID_controller(setpoint[thread].x, currentPosition.x, parameters[thread].KP, parameters[thread].KI, parameters[thread].KD) * velocityFactor;
 800570a:	4b82      	ldr	r3, [pc, #520]	@ (8005914 <PID_moveToCoordinate+0x35c>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	4613      	mov	r3, r2
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	4413      	add	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	461a      	mov	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	ed93 7b00 	vldr	d7, [r3]
 8005722:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8005726:	4b7b      	ldr	r3, [pc, #492]	@ (8005914 <PID_moveToCoordinate+0x35c>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	019b      	lsls	r3, r3, #6
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	4413      	add	r3, r2
 8005730:	ed93 5b00 	vldr	d5, [r3]
 8005734:	4b77      	ldr	r3, [pc, #476]	@ (8005914 <PID_moveToCoordinate+0x35c>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	019b      	lsls	r3, r3, #6
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4413      	add	r3, r2
 800573e:	ed93 3b02 	vldr	d3, [r3, #8]
 8005742:	4b74      	ldr	r3, [pc, #464]	@ (8005914 <PID_moveToCoordinate+0x35c>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	019b      	lsls	r3, r3, #6
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	4413      	add	r3, r2
 800574c:	ed93 4b04 	vldr	d4, [r3, #16]
 8005750:	eeb0 2a45 	vmov.f32	s4, s10
 8005754:	eef0 2a65 	vmov.f32	s5, s11
 8005758:	eeb0 1a46 	vmov.f32	s2, s12
 800575c:	eef0 1a66 	vmov.f32	s3, s13
 8005760:	eeb0 0a47 	vmov.f32	s0, s14
 8005764:	eef0 0a67 	vmov.f32	s1, s15
 8005768:	f7ff fb0e 	bl	8004d88 <PID_controller>
 800576c:	ec53 2b10 	vmov	r2, r3, d0
 8005770:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8005774:	f7fa ff40 	bl	80005f8 <__aeabi_dmul>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double Vy_local = PID_controller(setpoint[thread].y, currentPosition.y, parameters[thread].KP, parameters[thread].KI, parameters[thread].KD) * velocityFactor;
 8005780:	4b64      	ldr	r3, [pc, #400]	@ (8005914 <PID_moveToCoordinate+0x35c>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	4613      	mov	r3, r2
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	4413      	add	r3, r2
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	461a      	mov	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	ed93 7b02 	vldr	d7, [r3, #8]
 8005798:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 800579c:	4b5d      	ldr	r3, [pc, #372]	@ (8005914 <PID_moveToCoordinate+0x35c>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	019b      	lsls	r3, r3, #6
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	4413      	add	r3, r2
 80057a6:	ed93 5b00 	vldr	d5, [r3]
 80057aa:	4b5a      	ldr	r3, [pc, #360]	@ (8005914 <PID_moveToCoordinate+0x35c>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	019b      	lsls	r3, r3, #6
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	4413      	add	r3, r2
 80057b4:	ed93 3b02 	vldr	d3, [r3, #8]
 80057b8:	4b56      	ldr	r3, [pc, #344]	@ (8005914 <PID_moveToCoordinate+0x35c>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	019b      	lsls	r3, r3, #6
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	4413      	add	r3, r2
 80057c2:	ed93 4b04 	vldr	d4, [r3, #16]
 80057c6:	eeb0 2a45 	vmov.f32	s4, s10
 80057ca:	eef0 2a65 	vmov.f32	s5, s11
 80057ce:	eeb0 1a46 	vmov.f32	s2, s12
 80057d2:	eef0 1a66 	vmov.f32	s3, s13
 80057d6:	eeb0 0a47 	vmov.f32	s0, s14
 80057da:	eef0 0a67 	vmov.f32	s1, s15
 80057de:	f7ff fad3 	bl	8004d88 <PID_controller>
 80057e2:	ec53 2b10 	vmov	r2, r3, d0
 80057e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80057ea:	f7fa ff05 	bl	80005f8 <__aeabi_dmul>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    double Vx = Vx_local * cos(current_heading_rad) - Vy_local * sin(current_heading_rad);
 80057f6:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80057fa:	f009 fd81 	bl	800f300 <cos>
 80057fe:	ec51 0b10 	vmov	r0, r1, d0
 8005802:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005806:	f7fa fef7 	bl	80005f8 <__aeabi_dmul>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4614      	mov	r4, r2
 8005810:	461d      	mov	r5, r3
 8005812:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8005816:	f009 fdc7 	bl	800f3a8 <sin>
 800581a:	ec51 0b10 	vmov	r0, r1, d0
 800581e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005822:	f7fa fee9 	bl	80005f8 <__aeabi_dmul>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4620      	mov	r0, r4
 800582c:	4629      	mov	r1, r5
 800582e:	f7fa fd2b 	bl	8000288 <__aeabi_dsub>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double Vy = Vx_local * sin(current_heading_rad) + Vy_local * cos(current_heading_rad);
 800583a:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 800583e:	f009 fdb3 	bl	800f3a8 <sin>
 8005842:	ec51 0b10 	vmov	r0, r1, d0
 8005846:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800584a:	f7fa fed5 	bl	80005f8 <__aeabi_dmul>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4614      	mov	r4, r2
 8005854:	461d      	mov	r5, r3
 8005856:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 800585a:	f009 fd51 	bl	800f300 <cos>
 800585e:	ec51 0b10 	vmov	r0, r1, d0
 8005862:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005866:	f7fa fec7 	bl	80005f8 <__aeabi_dmul>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4620      	mov	r0, r4
 8005870:	4629      	mov	r1, r5
 8005872:	f7fa fd0b 	bl	800028c <__adddf3>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double W = PID_controllerH(setpoint[thread].h, currentPosition.h, parameters[thread].KpH);
 800587e:	4b25      	ldr	r3, [pc, #148]	@ (8005914 <PID_moveToCoordinate+0x35c>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	4613      	mov	r3, r2
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	4413      	add	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	461a      	mov	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4413      	add	r3, r2
 8005892:	ed93 7b04 	vldr	d7, [r3, #16]
 8005896:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800589a:	4b1e      	ldr	r3, [pc, #120]	@ (8005914 <PID_moveToCoordinate+0x35c>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	019b      	lsls	r3, r3, #6
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	4413      	add	r3, r2
 80058a4:	ed93 5b06 	vldr	d5, [r3, #24]
 80058a8:	eeb0 2a45 	vmov.f32	s4, s10
 80058ac:	eef0 2a65 	vmov.f32	s5, s11
 80058b0:	eeb0 1a46 	vmov.f32	s2, s12
 80058b4:	eef0 1a66 	vmov.f32	s3, s13
 80058b8:	eeb0 0a47 	vmov.f32	s0, s14
 80058bc:	eef0 0a67 	vmov.f32	s1, s15
 80058c0:	f7ff faec 	bl	8004e9c <PID_controllerH>
 80058c4:	eeb0 7a40 	vmov.f32	s14, s0
 80058c8:	eef0 7a60 	vmov.f32	s15, s1
 80058cc:	ed87 7b04 	vstr	d7, [r7, #16]

    if(roll > 0)	{Vx -= roll;}
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80058dc:	f7fb f91c 	bl	8000b18 <__aeabi_dcmpgt>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d01a      	beq.n	800591c <PID_moveToCoordinate+0x364>
 80058e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80058ea:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80058ee:	f7fa fccb 	bl	8000288 <__aeabi_dsub>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80058fa:	e019      	b.n	8005930 <PID_moveToCoordinate+0x378>
 80058fc:	f3af 8000 	nop.w
 8005900:	00000000 	.word	0x00000000
 8005904:	4072c000 	.word	0x4072c000
 8005908:	54442d18 	.word	0x54442d18
 800590c:	400921fb 	.word	0x400921fb
 8005910:	20000528 	.word	0x20000528
 8005914:	20000700 	.word	0x20000700
 8005918:	40668000 	.word	0x40668000
    else			{Vx += roll;}
 800591c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005920:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8005924:	f7fa fcb2 	bl	800028c <__adddf3>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    if(pitch > 0)	{Vy += pitch;}
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	f04f 0300 	mov.w	r3, #0
 8005938:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800593c:	f7fb f8ec 	bl	8000b18 <__aeabi_dcmpgt>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <PID_moveToCoordinate+0x3a4>
 8005946:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800594a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800594e:	f7fa fc9d 	bl	800028c <__adddf3>
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800595a:	e009      	b.n	8005970 <PID_moveToCoordinate+0x3b8>
    else			{Vy -= pitch;}
 800595c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005960:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8005964:	f7fa fc90 	bl	8000288 <__aeabi_dsub>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if(atTargetEG(setpoint[thread], currentPosition, parameters[thread].xyTolerance, parameters[thread].hTolerance))
 8005970:	4b36      	ldr	r3, [pc, #216]	@ (8005a4c <PID_moveToCoordinate+0x494>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	461a      	mov	r2, r3
 8005976:	4613      	mov	r3, r2
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	4413      	add	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	461a      	mov	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	4a31      	ldr	r2, [pc, #196]	@ (8005a4c <PID_moveToCoordinate+0x494>)
 8005986:	7812      	ldrb	r2, [r2, #0]
 8005988:	0192      	lsls	r2, r2, #6
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	440a      	add	r2, r1
 800598e:	ed92 6b0c 	vldr	d6, [r2, #48]	@ 0x30
 8005992:	4a2e      	ldr	r2, [pc, #184]	@ (8005a4c <PID_moveToCoordinate+0x494>)
 8005994:	7812      	ldrb	r2, [r2, #0]
 8005996:	0192      	lsls	r2, r2, #6
 8005998:	68b9      	ldr	r1, [r7, #8]
 800599a:	440a      	add	r2, r1
 800599c:	ed92 7b0e 	vldr	d7, [r2, #56]	@ 0x38
 80059a0:	ed97 3b0a 	vldr	d3, [r7, #40]	@ 0x28
 80059a4:	ed97 4b0c 	vldr	d4, [r7, #48]	@ 0x30
 80059a8:	ed97 5b0e 	vldr	d5, [r7, #56]	@ 0x38
 80059ac:	ed93 0b00 	vldr	d0, [r3]
 80059b0:	ed93 1b02 	vldr	d1, [r3, #8]
 80059b4:	ed93 2b04 	vldr	d2, [r3, #16]
 80059b8:	f7ff fbac 	bl	8005114 <atTargetEG>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d006      	beq.n	80059d0 <PID_moveToCoordinate+0x418>
    {
    	thread++;
 80059c2:	4b22      	ldr	r3, [pc, #136]	@ (8005a4c <PID_moveToCoordinate+0x494>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	3301      	adds	r3, #1
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	4b20      	ldr	r3, [pc, #128]	@ (8005a4c <PID_moveToCoordinate+0x494>)
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	e03a      	b.n	8005a46 <PID_moveToCoordinate+0x48e>
    }
    else
    {
		smoothVelocity(&Vx, &Vy, &W, parameters[thread].smoothingFactor);
 80059d0:	4b1e      	ldr	r3, [pc, #120]	@ (8005a4c <PID_moveToCoordinate+0x494>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	019b      	lsls	r3, r3, #6
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	4413      	add	r3, r2
 80059da:	ed93 7b08 	vldr	d7, [r3, #32]
 80059de:	f107 0210 	add.w	r2, r7, #16
 80059e2:	f107 0118 	add.w	r1, r7, #24
 80059e6:	f107 0320 	add.w	r3, r7, #32
 80059ea:	eeb0 0a47 	vmov.f32	s0, s14
 80059ee:	eef0 0a67 	vmov.f32	s1, s15
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7ff faf0 	bl	8004fd8 <smoothVelocity>
		trying(Vx, Vy, W, setpoint[thread].h, parameters[thread].KpH);
 80059f8:	ed97 7b08 	vldr	d7, [r7, #32]
 80059fc:	ed97 6b06 	vldr	d6, [r7, #24]
 8005a00:	ed97 5b04 	vldr	d5, [r7, #16]
 8005a04:	4b11      	ldr	r3, [pc, #68]	@ (8005a4c <PID_moveToCoordinate+0x494>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	4413      	add	r3, r2
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	461a      	mov	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	ed93 3b04 	vldr	d3, [r3, #16]
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a4c <PID_moveToCoordinate+0x494>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	019b      	lsls	r3, r3, #6
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	4413      	add	r3, r2
 8005a26:	ed93 4b06 	vldr	d4, [r3, #24]
 8005a2a:	eeb0 2a45 	vmov.f32	s4, s10
 8005a2e:	eef0 2a65 	vmov.f32	s5, s11
 8005a32:	eeb0 1a46 	vmov.f32	s2, s12
 8005a36:	eef0 1a66 	vmov.f32	s3, s13
 8005a3a:	eeb0 0a47 	vmov.f32	s0, s14
 8005a3e:	eef0 0a67 	vmov.f32	s1, s15
 8005a42:	f7fb fe51 	bl	80016e8 <trying>
//		Inverse_Kinematics(Vx, Vy, W);
    }
}
 8005a46:	3788      	adds	r7, #136	@ 0x88
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8005a4c:	20000700 	.word	0x20000700

08005a50 <focusToTheBall>:
    double W = PID_controllerH(setpoint_h, currentPosition.h, KpH);
    putar(0, 0, W);
}

void focusToTheBall()
{
 8005a50:	b5b0      	push	{r4, r5, r7, lr}
 8005a52:	b08c      	sub	sp, #48	@ 0x30
 8005a54:	af02      	add	r7, sp, #8
    int ballDistance = camera[0] * 10; // convert to mm
 8005a56:	4b40      	ldr	r3, [pc, #256]	@ (8005b58 <focusToTheBall+0x108>)
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	627b      	str	r3, [r7, #36]	@ 0x24
    int ballAngle = camera[1];
 8005a64:	4b3c      	ldr	r3, [pc, #240]	@ (8005b58 <focusToTheBall+0x108>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	623b      	str	r3, [r7, #32]
    int ballExistence = camera[2];
 8005a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b58 <focusToTheBall+0x108>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	61fb      	str	r3, [r7, #28]
    int yBALL = cos(ballAngle * M_PI / 180.0) * ballDistance;
 8005a70:	6a38      	ldr	r0, [r7, #32]
 8005a72:	f7fa fd57 	bl	8000524 <__aeabi_i2d>
 8005a76:	a336      	add	r3, pc, #216	@ (adr r3, 8005b50 <focusToTheBall+0x100>)
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f7fa fdbc 	bl	80005f8 <__aeabi_dmul>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4610      	mov	r0, r2
 8005a86:	4619      	mov	r1, r3
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	4b33      	ldr	r3, [pc, #204]	@ (8005b5c <focusToTheBall+0x10c>)
 8005a8e:	f7fa fedd 	bl	800084c <__aeabi_ddiv>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	ec43 2b17 	vmov	d7, r2, r3
 8005a9a:	eeb0 0a47 	vmov.f32	s0, s14
 8005a9e:	eef0 0a67 	vmov.f32	s1, s15
 8005aa2:	f009 fc2d 	bl	800f300 <cos>
 8005aa6:	ec55 4b10 	vmov	r4, r5, d0
 8005aaa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005aac:	f7fa fd3a 	bl	8000524 <__aeabi_i2d>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	f7fa fd9e 	bl	80005f8 <__aeabi_dmul>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	f7fb f848 	bl	8000b58 <__aeabi_d2iz>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	61bb      	str	r3, [r7, #24]

    int gndtoCam = 518; // in mm
 8005acc:	f240 2306 	movw	r3, #518	@ 0x206
 8005ad0:	617b      	str	r3, [r7, #20]
//    static bool increasing = true;
//    static int i = 95;

    if(ballExistence != 0)
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d034      	beq.n	8005b42 <focusToTheBall+0xf2>
    {
        double focus = atan2(yBALL, gndtoCam) * 180.0 / M_PI;
 8005ad8:	69b8      	ldr	r0, [r7, #24]
 8005ada:	f7fa fd23 	bl	8000524 <__aeabi_i2d>
 8005ade:	4604      	mov	r4, r0
 8005ae0:	460d      	mov	r5, r1
 8005ae2:	6978      	ldr	r0, [r7, #20]
 8005ae4:	f7fa fd1e 	bl	8000524 <__aeabi_i2d>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	ec43 2b11 	vmov	d1, r2, r3
 8005af0:	ec45 4b10 	vmov	d0, r4, r5
 8005af4:	f009 fbcc 	bl	800f290 <atan2>
 8005af8:	ec51 0b10 	vmov	r0, r1, d0
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	4b16      	ldr	r3, [pc, #88]	@ (8005b5c <focusToTheBall+0x10c>)
 8005b02:	f7fa fd79 	bl	80005f8 <__aeabi_dmul>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	a310      	add	r3, pc, #64	@ (adr r3, 8005b50 <focusToTheBall+0x100>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f7fa fe9a 	bl	800084c <__aeabi_ddiv>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        int focusMapping = map(0, 90, 45, 130, focus); // 45, 130
 8005b20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b24:	f7fb f818 	bl	8000b58 <__aeabi_d2iz>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	2382      	movs	r3, #130	@ 0x82
 8005b2e:	222d      	movs	r2, #45	@ 0x2d
 8005b30:	215a      	movs	r1, #90	@ 0x5a
 8005b32:	2000      	movs	r0, #0
 8005b34:	f7ff fa0c 	bl	8004f50 <map>
 8005b38:	6078      	str	r0, [r7, #4]
        servo_write(focusMapping);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff fb9c 	bl	8005278 <servo_write>
//    		i-=5;
//    		if(i <= 95) increasing = true;
//    	}
//    	servo_write(i);
    }
}
 8005b40:	e002      	b.n	8005b48 <focusToTheBall+0xf8>
    	servo_write(97); // 100
 8005b42:	2061      	movs	r0, #97	@ 0x61
 8005b44:	f7ff fb98 	bl	8005278 <servo_write>
}
 8005b48:	bf00      	nop
 8005b4a:	3728      	adds	r7, #40	@ 0x28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8005b50:	54442d18 	.word	0x54442d18
 8005b54:	400921fb 	.word	0x400921fb
 8005b58:	2000057c 	.word	0x2000057c
 8005b5c:	40668000 	.word	0x40668000

08005b60 <initializeSilos>:

// Initialize silos array
void initializeSilos()
{
 8005b60:	b5b0      	push	{r4, r5, r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_SILOS; i++)
 8005b66:	2300      	movs	r3, #0
 8005b68:	607b      	str	r3, [r7, #4]
 8005b6a:	e092      	b.n	8005c92 <initializeSilos+0x132>
    {
        silos[i].distance = SILO_NOT_DETECTED_DISTANCE;
 8005b6c:	4a50      	ldr	r2, [pc, #320]	@ (8005cb0 <initializeSilos+0x150>)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	015b      	lsls	r3, r3, #5
 8005b72:	4413      	add	r3, r2
 8005b74:	4a4f      	ldr	r2, [pc, #316]	@ (8005cb4 <initializeSilos+0x154>)
 8005b76:	601a      	str	r2, [r3, #0]
        silos[i].angle = SILO_NOT_DETECTED_ANGLE;
 8005b78:	4a4d      	ldr	r2, [pc, #308]	@ (8005cb0 <initializeSilos+0x150>)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	015b      	lsls	r3, r3, #5
 8005b7e:	4413      	add	r3, r2
 8005b80:	3304      	adds	r3, #4
 8005b82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005b86:	601a      	str	r2, [r3, #0]
        silos[i].detected = false;
 8005b88:	4a49      	ldr	r2, [pc, #292]	@ (8005cb0 <initializeSilos+0x150>)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	015b      	lsls	r3, r3, #5
 8005b8e:	4413      	add	r3, r2
 8005b90:	3308      	adds	r3, #8
 8005b92:	2200      	movs	r2, #0
 8005b94:	701a      	strb	r2, [r3, #0]
        silos[i].ballInSilo = 0;
 8005b96:	4a46      	ldr	r2, [pc, #280]	@ (8005cb0 <initializeSilos+0x150>)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	015b      	lsls	r3, r3, #5
 8005b9c:	4413      	add	r3, r2
 8005b9e:	330c      	adds	r3, #12
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
        silos[i].x = silos[i].distance * sin(silos[i].angle * M_PI/180.0);
 8005ba4:	4a42      	ldr	r2, [pc, #264]	@ (8005cb0 <initializeSilos+0x150>)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	015b      	lsls	r3, r3, #5
 8005baa:	4413      	add	r3, r2
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fa fcb8 	bl	8000524 <__aeabi_i2d>
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	460d      	mov	r5, r1
 8005bb8:	4a3d      	ldr	r2, [pc, #244]	@ (8005cb0 <initializeSilos+0x150>)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	015b      	lsls	r3, r3, #5
 8005bbe:	4413      	add	r3, r2
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fa fcad 	bl	8000524 <__aeabi_i2d>
 8005bca:	a337      	add	r3, pc, #220	@ (adr r3, 8005ca8 <initializeSilos+0x148>)
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	f7fa fd12 	bl	80005f8 <__aeabi_dmul>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4610      	mov	r0, r2
 8005bda:	4619      	mov	r1, r3
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	4b35      	ldr	r3, [pc, #212]	@ (8005cb8 <initializeSilos+0x158>)
 8005be2:	f7fa fe33 	bl	800084c <__aeabi_ddiv>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	ec43 2b17 	vmov	d7, r2, r3
 8005bee:	eeb0 0a47 	vmov.f32	s0, s14
 8005bf2:	eef0 0a67 	vmov.f32	s1, s15
 8005bf6:	f009 fbd7 	bl	800f3a8 <sin>
 8005bfa:	ec53 2b10 	vmov	r2, r3, d0
 8005bfe:	4620      	mov	r0, r4
 8005c00:	4629      	mov	r1, r5
 8005c02:	f7fa fcf9 	bl	80005f8 <__aeabi_dmul>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4829      	ldr	r0, [pc, #164]	@ (8005cb0 <initializeSilos+0x150>)
 8005c0c:	6879      	ldr	r1, [r7, #4]
 8005c0e:	0149      	lsls	r1, r1, #5
 8005c10:	4401      	add	r1, r0
 8005c12:	3110      	adds	r1, #16
 8005c14:	e9c1 2300 	strd	r2, r3, [r1]
        silos[i].y = silos[i].distance * cos(silos[i].angle * M_PI/180.0);
 8005c18:	4a25      	ldr	r2, [pc, #148]	@ (8005cb0 <initializeSilos+0x150>)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	015b      	lsls	r3, r3, #5
 8005c1e:	4413      	add	r3, r2
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fa fc7e 	bl	8000524 <__aeabi_i2d>
 8005c28:	4604      	mov	r4, r0
 8005c2a:	460d      	mov	r5, r1
 8005c2c:	4a20      	ldr	r2, [pc, #128]	@ (8005cb0 <initializeSilos+0x150>)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	015b      	lsls	r3, r3, #5
 8005c32:	4413      	add	r3, r2
 8005c34:	3304      	adds	r3, #4
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fa fc73 	bl	8000524 <__aeabi_i2d>
 8005c3e:	a31a      	add	r3, pc, #104	@ (adr r3, 8005ca8 <initializeSilos+0x148>)
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	f7fa fcd8 	bl	80005f8 <__aeabi_dmul>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4619      	mov	r1, r3
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	4b18      	ldr	r3, [pc, #96]	@ (8005cb8 <initializeSilos+0x158>)
 8005c56:	f7fa fdf9 	bl	800084c <__aeabi_ddiv>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	ec43 2b17 	vmov	d7, r2, r3
 8005c62:	eeb0 0a47 	vmov.f32	s0, s14
 8005c66:	eef0 0a67 	vmov.f32	s1, s15
 8005c6a:	f009 fb49 	bl	800f300 <cos>
 8005c6e:	ec53 2b10 	vmov	r2, r3, d0
 8005c72:	4620      	mov	r0, r4
 8005c74:	4629      	mov	r1, r5
 8005c76:	f7fa fcbf 	bl	80005f8 <__aeabi_dmul>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	480c      	ldr	r0, [pc, #48]	@ (8005cb0 <initializeSilos+0x150>)
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	0149      	lsls	r1, r1, #5
 8005c84:	4401      	add	r1, r0
 8005c86:	3118      	adds	r1, #24
 8005c88:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < MAX_SILOS; i++)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b04      	cmp	r3, #4
 8005c96:	f77f af69 	ble.w	8005b6c <initializeSilos+0xc>
    }
}
 8005c9a:	bf00      	nop
 8005c9c:	bf00      	nop
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ca4:	f3af 8000 	nop.w
 8005ca8:	54442d18 	.word	0x54442d18
 8005cac:	400921fb 	.word	0x400921fb
 8005cb0:	20000660 	.word	0x20000660
 8005cb4:	00018696 	.word	0x00018696
 8005cb8:	40668000 	.word	0x40668000
 8005cbc:	00000000 	.word	0x00000000

08005cc0 <detectAndStoreSilo>:

Silo detectAndStoreSilo()
{
 8005cc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005cc4:	b0a2      	sub	sp, #136	@ 0x88
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
    Silo bestSilo;
    bestSilo.distance = SILO_NOT_DETECTED_DISTANCE;
 8005cca:	4bbb      	ldr	r3, [pc, #748]	@ (8005fb8 <detectAndStoreSilo+0x2f8>)
 8005ccc:	663b      	str	r3, [r7, #96]	@ 0x60
    bestSilo.angle = SILO_NOT_DETECTED_ANGLE;
 8005cce:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8005cd2:	667b      	str	r3, [r7, #100]	@ 0x64
    bestSilo.detected = false;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
    servo_write(120);
 8005cda:	2078      	movs	r0, #120	@ 0x78
 8005cdc:	f7ff facc 	bl	8005278 <servo_write>

    external_global position = odometry_eg();
 8005ce0:	f7fe fec2 	bl	8004a68 <odometry_eg>
 8005ce4:	eeb0 5a40 	vmov.f32	s10, s0
 8005ce8:	eef0 5a60 	vmov.f32	s11, s1
 8005cec:	eeb0 6a41 	vmov.f32	s12, s2
 8005cf0:	eef0 6a61 	vmov.f32	s13, s3
 8005cf4:	eeb0 7a42 	vmov.f32	s14, s4
 8005cf8:	eef0 7a62 	vmov.f32	s15, s5
 8005cfc:	ed87 5b12 	vstr	d5, [r7, #72]	@ 0x48
 8005d00:	ed87 6b14 	vstr	d6, [r7, #80]	@ 0x50
 8005d04:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    int siloDistances[MAX_SILOS] = {camera[3] * 10, camera[5] * 10, camera[7] * 10, camera[9] * 10, camera[11] * 10}; // convert to mm
 8005d08:	4bac      	ldr	r3, [pc, #688]	@ (8005fbc <detectAndStoreSilo+0x2fc>)
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d16:	4ba9      	ldr	r3, [pc, #676]	@ (8005fbc <detectAndStoreSilo+0x2fc>)
 8005d18:	695a      	ldr	r2, [r3, #20]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d24:	4ba5      	ldr	r3, [pc, #660]	@ (8005fbc <detectAndStoreSilo+0x2fc>)
 8005d26:	69da      	ldr	r2, [r3, #28]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d32:	4ba2      	ldr	r3, [pc, #648]	@ (8005fbc <detectAndStoreSilo+0x2fc>)
 8005d34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d36:	4613      	mov	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d40:	4b9e      	ldr	r3, [pc, #632]	@ (8005fbc <detectAndStoreSilo+0x2fc>)
 8005d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	647b      	str	r3, [r7, #68]	@ 0x44
    int siloAngles[MAX_SILOS] = {camera[4], camera[6], camera[8], camera[10], camera[12]};
 8005d4e:	4b9b      	ldr	r3, [pc, #620]	@ (8005fbc <detectAndStoreSilo+0x2fc>)
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	623b      	str	r3, [r7, #32]
 8005d54:	4b99      	ldr	r3, [pc, #612]	@ (8005fbc <detectAndStoreSilo+0x2fc>)
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d5a:	4b98      	ldr	r3, [pc, #608]	@ (8005fbc <detectAndStoreSilo+0x2fc>)
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d60:	4b96      	ldr	r3, [pc, #600]	@ (8005fbc <detectAndStoreSilo+0x2fc>)
 8005d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d66:	4b95      	ldr	r3, [pc, #596]	@ (8005fbc <detectAndStoreSilo+0x2fc>)
 8005d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d6a:	633b      	str	r3, [r7, #48]	@ 0x30

    int ballExistence[5] = {camera[13], camera[14], camera[15], camera[16], camera[17]};
 8005d6c:	4b93      	ldr	r3, [pc, #588]	@ (8005fbc <detectAndStoreSilo+0x2fc>)
 8005d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	4b92      	ldr	r3, [pc, #584]	@ (8005fbc <detectAndStoreSilo+0x2fc>)
 8005d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	4b90      	ldr	r3, [pc, #576]	@ (8005fbc <detectAndStoreSilo+0x2fc>)
 8005d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7c:	617b      	str	r3, [r7, #20]
 8005d7e:	4b8f      	ldr	r3, [pc, #572]	@ (8005fbc <detectAndStoreSilo+0x2fc>)
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	4b8d      	ldr	r3, [pc, #564]	@ (8005fbc <detectAndStoreSilo+0x2fc>)
 8005d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d88:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < MAX_SILOS; i++)
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d90:	e0f8      	b.n	8005f84 <detectAndStoreSilo+0x2c4>
    {
        if (siloDistances[i] != SILO_NOT_DETECTED_DISTANCE && siloAngles[i] != SILO_NOT_DETECTED_ANGLE)
 8005d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	3388      	adds	r3, #136	@ 0x88
 8005d9a:	443b      	add	r3, r7
 8005d9c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005da0:	4a85      	ldr	r2, [pc, #532]	@ (8005fb8 <detectAndStoreSilo+0x2f8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	f000 80e1 	beq.w	8005f6a <detectAndStoreSilo+0x2aa>
 8005da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	3388      	adds	r3, #136	@ 0x88
 8005db0:	443b      	add	r3, r7
 8005db2:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8005db6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	f000 80d5 	beq.w	8005f6a <detectAndStoreSilo+0x2aa>
        {
            silos[i].distance = siloDistances[i];
 8005dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	3388      	adds	r3, #136	@ 0x88
 8005dc8:	443b      	add	r3, r7
 8005dca:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005dce:	497c      	ldr	r1, [pc, #496]	@ (8005fc0 <detectAndStoreSilo+0x300>)
 8005dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dd4:	015b      	lsls	r3, r3, #5
 8005dd6:	440b      	add	r3, r1
 8005dd8:	601a      	str	r2, [r3, #0]
            silos[i].angle = siloAngles[i];
 8005dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	3388      	adds	r3, #136	@ 0x88
 8005de2:	443b      	add	r3, r7
 8005de4:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8005de8:	4975      	ldr	r1, [pc, #468]	@ (8005fc0 <detectAndStoreSilo+0x300>)
 8005dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dee:	015b      	lsls	r3, r3, #5
 8005df0:	440b      	add	r3, r1
 8005df2:	3304      	adds	r3, #4
 8005df4:	601a      	str	r2, [r3, #0]
            silos[i].detected = true;
 8005df6:	4a72      	ldr	r2, [pc, #456]	@ (8005fc0 <detectAndStoreSilo+0x300>)
 8005df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dfc:	015b      	lsls	r3, r3, #5
 8005dfe:	4413      	add	r3, r2
 8005e00:	3308      	adds	r3, #8
 8005e02:	2201      	movs	r2, #1
 8005e04:	701a      	strb	r2, [r3, #0]
            silos[i].ballInSilo = ballExistence[i];
 8005e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	3388      	adds	r3, #136	@ 0x88
 8005e0e:	443b      	add	r3, r7
 8005e10:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 8005e14:	496a      	ldr	r1, [pc, #424]	@ (8005fc0 <detectAndStoreSilo+0x300>)
 8005e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e1a:	015b      	lsls	r3, r3, #5
 8005e1c:	440b      	add	r3, r1
 8005e1e:	330c      	adds	r3, #12
 8005e20:	601a      	str	r2, [r3, #0]

            // Calculate global coordinates of the detected silo
            silos[i].x = position.x + siloDistances[i] * sin(siloAngles[i] * M_PI / 180.0);
 8005e22:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	3388      	adds	r3, #136	@ 0x88
 8005e2e:	443b      	add	r3, r7
 8005e30:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fa fb75 	bl	8000524 <__aeabi_i2d>
 8005e3a:	4680      	mov	r8, r0
 8005e3c:	4689      	mov	r9, r1
 8005e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	3388      	adds	r3, #136	@ 0x88
 8005e46:	443b      	add	r3, r7
 8005e48:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fa fb69 	bl	8000524 <__aeabi_i2d>
 8005e52:	a357      	add	r3, pc, #348	@ (adr r3, 8005fb0 <detectAndStoreSilo+0x2f0>)
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	f7fa fbce 	bl	80005f8 <__aeabi_dmul>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4610      	mov	r0, r2
 8005e62:	4619      	mov	r1, r3
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	4b56      	ldr	r3, [pc, #344]	@ (8005fc4 <detectAndStoreSilo+0x304>)
 8005e6a:	f7fa fcef 	bl	800084c <__aeabi_ddiv>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	ec43 2b17 	vmov	d7, r2, r3
 8005e76:	eeb0 0a47 	vmov.f32	s0, s14
 8005e7a:	eef0 0a67 	vmov.f32	s1, s15
 8005e7e:	f009 fa93 	bl	800f3a8 <sin>
 8005e82:	ec53 2b10 	vmov	r2, r3, d0
 8005e86:	4640      	mov	r0, r8
 8005e88:	4649      	mov	r1, r9
 8005e8a:	f7fa fbb5 	bl	80005f8 <__aeabi_dmul>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4620      	mov	r0, r4
 8005e94:	4629      	mov	r1, r5
 8005e96:	f7fa f9f9 	bl	800028c <__adddf3>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4848      	ldr	r0, [pc, #288]	@ (8005fc0 <detectAndStoreSilo+0x300>)
 8005ea0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8005ea4:	0149      	lsls	r1, r1, #5
 8005ea6:	4401      	add	r1, r0
 8005ea8:	3110      	adds	r1, #16
 8005eaa:	e9c1 2300 	strd	r2, r3, [r1]
            silos[i].y = position.y + siloDistances[i] * cos(siloAngles[i] * M_PI / 180.0);
 8005eae:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8005eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	3388      	adds	r3, #136	@ 0x88
 8005eba:	443b      	add	r3, r7
 8005ebc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fa fb2f 	bl	8000524 <__aeabi_i2d>
 8005ec6:	4680      	mov	r8, r0
 8005ec8:	4689      	mov	r9, r1
 8005eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	3388      	adds	r3, #136	@ 0x88
 8005ed2:	443b      	add	r3, r7
 8005ed4:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fa fb23 	bl	8000524 <__aeabi_i2d>
 8005ede:	a334      	add	r3, pc, #208	@ (adr r3, 8005fb0 <detectAndStoreSilo+0x2f0>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	f7fa fb88 	bl	80005f8 <__aeabi_dmul>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4610      	mov	r0, r2
 8005eee:	4619      	mov	r1, r3
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	4b33      	ldr	r3, [pc, #204]	@ (8005fc4 <detectAndStoreSilo+0x304>)
 8005ef6:	f7fa fca9 	bl	800084c <__aeabi_ddiv>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	ec43 2b17 	vmov	d7, r2, r3
 8005f02:	eeb0 0a47 	vmov.f32	s0, s14
 8005f06:	eef0 0a67 	vmov.f32	s1, s15
 8005f0a:	f009 f9f9 	bl	800f300 <cos>
 8005f0e:	ec53 2b10 	vmov	r2, r3, d0
 8005f12:	4640      	mov	r0, r8
 8005f14:	4649      	mov	r1, r9
 8005f16:	f7fa fb6f 	bl	80005f8 <__aeabi_dmul>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4620      	mov	r0, r4
 8005f20:	4629      	mov	r1, r5
 8005f22:	f7fa f9b3 	bl	800028c <__adddf3>
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4825      	ldr	r0, [pc, #148]	@ (8005fc0 <detectAndStoreSilo+0x300>)
 8005f2c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8005f30:	0149      	lsls	r1, r1, #5
 8005f32:	4401      	add	r1, r0
 8005f34:	3118      	adds	r1, #24
 8005f36:	e9c1 2300 	strd	r2, r3, [r1]

            // Check if this is the nearest silo
            if (silos[i].ballInSilo < 1)
 8005f3a:	4a21      	ldr	r2, [pc, #132]	@ (8005fc0 <detectAndStoreSilo+0x300>)
 8005f3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f40:	015b      	lsls	r3, r3, #5
 8005f42:	4413      	add	r3, r2
 8005f44:	330c      	adds	r3, #12
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	dc16      	bgt.n	8005f7a <detectAndStoreSilo+0x2ba>
            {
                bestSilo = silos[i];
 8005f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8005fc0 <detectAndStoreSilo+0x300>)
 8005f4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f52:	015b      	lsls	r3, r3, #5
 8005f54:	4413      	add	r3, r2
 8005f56:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8005f5a:	461d      	mov	r5, r3
 8005f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (silos[i].ballInSilo < 1)
 8005f68:	e007      	b.n	8005f7a <detectAndStoreSilo+0x2ba>
            }
        }
        else
        {
            silos[i].detected = false;
 8005f6a:	4a15      	ldr	r2, [pc, #84]	@ (8005fc0 <detectAndStoreSilo+0x300>)
 8005f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f70:	015b      	lsls	r3, r3, #5
 8005f72:	4413      	add	r3, r2
 8005f74:	3308      	adds	r3, #8
 8005f76:	2200      	movs	r2, #0
 8005f78:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAX_SILOS; i++)
 8005f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f7e:	3301      	adds	r3, #1
 8005f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	f77f af02 	ble.w	8005d92 <detectAndStoreSilo+0xd2>
        }
    }
    return bestSilo;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	461d      	mov	r5, r3
 8005f92:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8005f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005f9e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	3788      	adds	r7, #136	@ 0x88
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005fac:	f3af 8000 	nop.w
 8005fb0:	54442d18 	.word	0x54442d18
 8005fb4:	400921fb 	.word	0x400921fb
 8005fb8:	00018696 	.word	0x00018696
 8005fbc:	2000057c 	.word	0x2000057c
 8005fc0:	20000660 	.word	0x20000660
 8005fc4:	40668000 	.word	0x40668000

08005fc8 <placeBallInSilo>:

void placeBallInSilo(external_global setpoint, double Kp, double Ki, double Kd, double KpH, double smoothingFactor, double maxVelocity)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	ed2d 8b02 	vpush	{d8}
 8005fce:	b0b4      	sub	sp, #208	@ 0xd0
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	ed87 3b08 	vstr	d3, [r7, #32]
 8005fd6:	ed87 4b06 	vstr	d4, [r7, #24]
 8005fda:	ed87 5b04 	vstr	d5, [r7, #16]
 8005fde:	ed87 6b02 	vstr	d6, [r7, #8]
 8005fe2:	ed87 7b00 	vstr	d7, [r7]
 8005fe6:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 8005fea:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 8005fee:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
    external_global position = odometry_eg();
 8005ff2:	f7fe fd39 	bl	8004a68 <odometry_eg>
 8005ff6:	eeb0 5a40 	vmov.f32	s10, s0
 8005ffa:	eef0 5a60 	vmov.f32	s11, s1
 8005ffe:	eeb0 6a41 	vmov.f32	s12, s2
 8006002:	eef0 6a61 	vmov.f32	s13, s3
 8006006:	eeb0 7a42 	vmov.f32	s14, s4
 800600a:	eef0 7a62 	vmov.f32	s15, s5
 800600e:	ed87 5b1e 	vstr	d5, [r7, #120]	@ 0x78
 8006012:	ed87 6b20 	vstr	d6, [r7, #128]	@ 0x80
 8006016:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    Silo bestSilo = detectAndStoreSilo();
 800601a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff fe4e 	bl	8005cc0 <detectAndStoreSilo>
    double Vx = 0.0, Vy = 0.0, W = 0.0;
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    static uint32_t lastTime = 0;
    uint32_t timer = HAL_GetTick();
 8006048:	f001 f874 	bl	8007134 <HAL_GetTick>
 800604c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

    setMotorSpeed(1, 0);
 8006050:	ed9f 0b89 	vldr	d0, [pc, #548]	@ 8006278 <placeBallInSilo+0x2b0>
 8006054:	2001      	movs	r0, #1
 8006056:	f7fb f801 	bl	800105c <setMotorSpeed>
    setMotorSpeed(2, 0);
 800605a:	ed9f 0b87 	vldr	d0, [pc, #540]	@ 8006278 <placeBallInSilo+0x2b0>
 800605e:	2002      	movs	r0, #2
 8006060:	f7fa fffc 	bl	800105c <setMotorSpeed>
    setMotorSpeed(7, 0);
 8006064:	ed9f 0b84 	vldr	d0, [pc, #528]	@ 8006278 <placeBallInSilo+0x2b0>
 8006068:	2007      	movs	r0, #7
 800606a:	f7fa fff7 	bl	800105c <setMotorSpeed>

    if(bestSilo.detected)
 800606e:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 80c8 	beq.w	8006208 <placeBallInSilo+0x240>
    {
        double targetX = bestSilo.x;
 8006078:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800607c:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
        double targetY = bestSilo.y;
 8006080:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006084:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
    //    double targetH = atan2(targetY - position.y_global, targetX - position.x_global) * 180.0 / M_PI;

        double error_x = targetX - position.x;
 8006088:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800608c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8006090:	f7fa f8fa 	bl	8000288 <__aeabi_dsub>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
        double error_y = targetY - position.y;
 800609c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80060a0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80060a4:	f7fa f8f0 	bl	8000288 <__aeabi_dsub>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        double distance = hypot(error_x, error_y);
 80060b0:	ed97 1b28 	vldr	d1, [r7, #160]	@ 0xa0
 80060b4:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 80060b8:	f009 f8ee 	bl	800f298 <hypot>
 80060bc:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98
        double velocityFactor = fmin(distance, maxVelocity) / distance;
 80060c0:	ed97 1b36 	vldr	d1, [r7, #216]	@ 0xd8
 80060c4:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 80060c8:	f009 f9f7 	bl	800f4ba <fmin>
 80060cc:	ec51 0b10 	vmov	r0, r1, d0
 80060d0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80060d4:	f7fa fbba 	bl	800084c <__aeabi_ddiv>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        Vx = PID_controller(targetX, position.x, Kp, Ki, Kd) * velocityFactor;
 80060e0:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 80060e4:	ed97 4b04 	vldr	d4, [r7, #16]
 80060e8:	ed97 3b06 	vldr	d3, [r7, #24]
 80060ec:	ed97 2b08 	vldr	d2, [r7, #32]
 80060f0:	eeb0 1a47 	vmov.f32	s2, s14
 80060f4:	eef0 1a67 	vmov.f32	s3, s15
 80060f8:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 80060fc:	f7fe fe44 	bl	8004d88 <PID_controller>
 8006100:	ec51 0b10 	vmov	r0, r1, d0
 8006104:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8006108:	f7fa fa76 	bl	80005f8 <__aeabi_dmul>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
        Vy = PID_controller(targetY, position.y, Kp+0.5, Ki, Kd) * velocityFactor;
 8006114:	ed97 8b20 	vldr	d8, [r7, #128]	@ 0x80
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	4b5e      	ldr	r3, [pc, #376]	@ (8006298 <placeBallInSilo+0x2d0>)
 800611e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006122:	f7fa f8b3 	bl	800028c <__adddf3>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	ec43 2b17 	vmov	d7, r2, r3
 800612e:	ed97 4b04 	vldr	d4, [r7, #16]
 8006132:	ed97 3b06 	vldr	d3, [r7, #24]
 8006136:	eeb0 2a47 	vmov.f32	s4, s14
 800613a:	eef0 2a67 	vmov.f32	s5, s15
 800613e:	eeb0 1a48 	vmov.f32	s2, s16
 8006142:	eef0 1a68 	vmov.f32	s3, s17
 8006146:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 800614a:	f7fe fe1d 	bl	8004d88 <PID_controller>
 800614e:	ec51 0b10 	vmov	r0, r1, d0
 8006152:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8006156:	f7fa fa4f 	bl	80005f8 <__aeabi_dmul>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        W = PID_controllerH(setpoint.h, position.h, KpH);
 8006162:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8006166:	ed97 6b22 	vldr	d6, [r7, #136]	@ 0x88
 800616a:	ed97 2b02 	vldr	d2, [r7, #8]
 800616e:	eeb0 1a46 	vmov.f32	s2, s12
 8006172:	eef0 1a66 	vmov.f32	s3, s13
 8006176:	eeb0 0a47 	vmov.f32	s0, s14
 800617a:	eef0 0a67 	vmov.f32	s1, s15
 800617e:	f7fe fe8d 	bl	8004e9c <PID_controllerH>
 8006182:	eeb0 7a40 	vmov.f32	s14, s0
 8006186:	eef0 7a60 	vmov.f32	s15, s1
 800618a:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

        if(bestSilo.distance <= 400) {Vx = 0; Vy = 2000; W = 0;}
 800618e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006190:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8006194:	dc10      	bgt.n	80061b8 <placeBallInSilo+0x1f0>
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	4b3d      	ldr	r3, [pc, #244]	@ (800629c <placeBallInSilo+0x2d4>)
 80061a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

        smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
 80061b8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80061bc:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80061c0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80061c4:	ed97 0b00 	vldr	d0, [r7]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fe ff05 	bl	8004fd8 <smoothVelocity>
//        Inverse_Kinematics(Vx, Vy, W);
        trying(Vx, Vy, W, setpoint.h, KpH);
 80061ce:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80061d2:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 80061d6:	ed97 5b10 	vldr	d5, [r7, #64]	@ 0x40
 80061da:	ed97 3b0e 	vldr	d3, [r7, #56]	@ 0x38
 80061de:	ed97 4b02 	vldr	d4, [r7, #8]
 80061e2:	eeb0 2a45 	vmov.f32	s4, s10
 80061e6:	eef0 2a65 	vmov.f32	s5, s11
 80061ea:	eeb0 1a46 	vmov.f32	s2, s12
 80061ee:	eef0 1a66 	vmov.f32	s3, s13
 80061f2:	eeb0 0a47 	vmov.f32	s0, s14
 80061f6:	eef0 0a67 	vmov.f32	s1, s15
 80061fa:	f7fb fa75 	bl	80016e8 <trying>
        lastTime = timer;
 80061fe:	4a28      	ldr	r2, [pc, #160]	@ (80062a0 <placeBallInSilo+0x2d8>)
 8006200:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006204:	6013      	str	r3, [r2, #0]
    }
    else
    {
    	PID_EG(setpoint, Kp, Ki, Kd, KpH, 0.75, 3000);
    }
}
 8006206:	e02f      	b.n	8006268 <placeBallInSilo+0x2a0>
    else if(timer - lastTime <= 1600)
 8006208:	4b25      	ldr	r3, [pc, #148]	@ (80062a0 <placeBallInSilo+0x2d8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006216:	d810      	bhi.n	800623a <placeBallInSilo+0x272>
    	trying(0, 2000, 0, setpoint.h, KpH);
 8006218:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800621c:	ed97 4b02 	vldr	d4, [r7, #8]
 8006220:	eeb0 3a47 	vmov.f32	s6, s14
 8006224:	eef0 3a67 	vmov.f32	s7, s15
 8006228:	ed9f 2b13 	vldr	d2, [pc, #76]	@ 8006278 <placeBallInSilo+0x2b0>
 800622c:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8006280 <placeBallInSilo+0x2b8>
 8006230:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8006278 <placeBallInSilo+0x2b0>
 8006234:	f7fb fa58 	bl	80016e8 <trying>
}
 8006238:	e016      	b.n	8006268 <placeBallInSilo+0x2a0>
    	PID_EG(setpoint, Kp, Ki, Kd, KpH, 0.75, 3000);
 800623a:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800623e:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8006242:	ed97 2b0e 	vldr	d2, [r7, #56]	@ 0x38
 8006246:	a310      	add	r3, pc, #64	@ (adr r3, 8006288 <placeBallInSilo+0x2c0>)
 8006248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624c:	e9cd 2300 	strd	r2, r3, [sp]
 8006250:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8006290 <placeBallInSilo+0x2c8>
 8006254:	ed97 6b02 	vldr	d6, [r7, #8]
 8006258:	ed97 5b04 	vldr	d5, [r7, #16]
 800625c:	ed97 4b06 	vldr	d4, [r7, #24]
 8006260:	ed97 3b08 	vldr	d3, [r7, #32]
 8006264:	f7ff f820 	bl	80052a8 <PID_EG>
}
 8006268:	bf00      	nop
 800626a:	37c8      	adds	r7, #200	@ 0xc8
 800626c:	46bd      	mov	sp, r7
 800626e:	ecbd 8b02 	vpop	{d8}
 8006272:	bd80      	pop	{r7, pc}
 8006274:	f3af 8000 	nop.w
	...
 8006284:	409f4000 	.word	0x409f4000
 8006288:	00000000 	.word	0x00000000
 800628c:	40a77000 	.word	0x40a77000
 8006290:	00000000 	.word	0x00000000
 8006294:	3fe80000 	.word	0x3fe80000
 8006298:	3fe00000 	.word	0x3fe00000
 800629c:	409f4000 	.word	0x409f4000
 80062a0:	20000704 	.word	0x20000704
 80062a4:	00000000 	.word	0x00000000

080062a8 <findAndTakeBall>:

void findAndTakeBall(external_global *findBall)
{
 80062a8:	b5b0      	push	{r4, r5, r7, lr}
 80062aa:	b098      	sub	sp, #96	@ 0x60
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	6078      	str	r0, [r7, #4]
     * camera[2]: ball existence (number of balls)
     * camera[3]: silo distance (in cm)
     * camera[4]: silo angle (in degree)
     */

	external_global position = odometry_eg();
 80062b0:	f7fe fbda 	bl	8004a68 <odometry_eg>
 80062b4:	eeb0 5a40 	vmov.f32	s10, s0
 80062b8:	eef0 5a60 	vmov.f32	s11, s1
 80062bc:	eeb0 6a41 	vmov.f32	s12, s2
 80062c0:	eef0 6a61 	vmov.f32	s13, s3
 80062c4:	eeb0 7a42 	vmov.f32	s14, s4
 80062c8:	eef0 7a62 	vmov.f32	s15, s5
 80062cc:	ed87 5b02 	vstr	d5, [r7, #8]
 80062d0:	ed87 6b04 	vstr	d6, [r7, #16]
 80062d4:	ed87 7b06 	vstr	d7, [r7, #24]
    static uint32_t lastTimeBallSeen = 0;
    static uint32_t searchStartTime = 0;
    static uint8_t searchMode = 1;
    static uint8_t lastSearchMode = 1;

    uint32_t timer = HAL_GetTick();
 80062d8:	f000 ff2c 	bl	8007134 <HAL_GetTick>
 80062dc:	63f8      	str	r0, [r7, #60]	@ 0x3c

    int ballDistance = camera[0] * 10; // convert to mm
 80062de:	4bbe      	ldr	r3, [pc, #760]	@ (80065d8 <findAndTakeBall+0x330>)
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    int ballAngle = camera[1];
 80062ec:	4bba      	ldr	r3, [pc, #744]	@ (80065d8 <findAndTakeBall+0x330>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	637b      	str	r3, [r7, #52]	@ 0x34
//    int ballExistence = camera[2];

    double Vx = 0.0;
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double Vy = 0.0;
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double W = 0.0;
 800630a:	f04f 0200 	mov.w	r2, #0
 800630e:	f04f 0300 	mov.w	r3, #0
 8006312:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    focusToTheBall();
 8006316:	f7ff fb9b 	bl	8005a50 <focusToTheBall>

    if (ballDistance > 0)
 800631a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631c:	2b00      	cmp	r3, #0
 800631e:	f340 80a8 	ble.w	8006472 <findAndTakeBall+0x1ca>
    {
        double xBall = ballDistance * sin(ballAngle * M_PI / 180.0);
 8006322:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006324:	f7fa f8fe 	bl	8000524 <__aeabi_i2d>
 8006328:	4604      	mov	r4, r0
 800632a:	460d      	mov	r5, r1
 800632c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800632e:	f7fa f8f9 	bl	8000524 <__aeabi_i2d>
 8006332:	a391      	add	r3, pc, #580	@ (adr r3, 8006578 <findAndTakeBall+0x2d0>)
 8006334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006338:	f7fa f95e 	bl	80005f8 <__aeabi_dmul>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4610      	mov	r0, r2
 8006342:	4619      	mov	r1, r3
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	4ba4      	ldr	r3, [pc, #656]	@ (80065dc <findAndTakeBall+0x334>)
 800634a:	f7fa fa7f 	bl	800084c <__aeabi_ddiv>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	ec43 2b17 	vmov	d7, r2, r3
 8006356:	eeb0 0a47 	vmov.f32	s0, s14
 800635a:	eef0 0a67 	vmov.f32	s1, s15
 800635e:	f009 f823 	bl	800f3a8 <sin>
 8006362:	ec53 2b10 	vmov	r2, r3, d0
 8006366:	4620      	mov	r0, r4
 8006368:	4629      	mov	r1, r5
 800636a:	f7fa f945 	bl	80005f8 <__aeabi_dmul>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        double yBall = ballDistance * cos(ballAngle * M_PI / 180.0);
 8006376:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006378:	f7fa f8d4 	bl	8000524 <__aeabi_i2d>
 800637c:	4604      	mov	r4, r0
 800637e:	460d      	mov	r5, r1
 8006380:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006382:	f7fa f8cf 	bl	8000524 <__aeabi_i2d>
 8006386:	a37c      	add	r3, pc, #496	@ (adr r3, 8006578 <findAndTakeBall+0x2d0>)
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	f7fa f934 	bl	80005f8 <__aeabi_dmul>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4610      	mov	r0, r2
 8006396:	4619      	mov	r1, r3
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	4b8f      	ldr	r3, [pc, #572]	@ (80065dc <findAndTakeBall+0x334>)
 800639e:	f7fa fa55 	bl	800084c <__aeabi_ddiv>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	ec43 2b17 	vmov	d7, r2, r3
 80063aa:	eeb0 0a47 	vmov.f32	s0, s14
 80063ae:	eef0 0a67 	vmov.f32	s1, s15
 80063b2:	f008 ffa5 	bl	800f300 <cos>
 80063b6:	ec53 2b10 	vmov	r2, r3, d0
 80063ba:	4620      	mov	r0, r4
 80063bc:	4629      	mov	r1, r5
 80063be:	f7fa f91b 	bl	80005f8 <__aeabi_dmul>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	e9c7 2308 	strd	r2, r3, [r7, #32]

        Vx = PID_controller(xBall, 0.0, 1.5, 0.0, 0.0);
 80063ca:	ed9f 4b6d 	vldr	d4, [pc, #436]	@ 8006580 <findAndTakeBall+0x2d8>
 80063ce:	ed9f 3b6c 	vldr	d3, [pc, #432]	@ 8006580 <findAndTakeBall+0x2d8>
 80063d2:	ed9f 2b6d 	vldr	d2, [pc, #436]	@ 8006588 <findAndTakeBall+0x2e0>
 80063d6:	ed9f 1b6a 	vldr	d1, [pc, #424]	@ 8006580 <findAndTakeBall+0x2d8>
 80063da:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80063de:	f7fe fcd3 	bl	8004d88 <PID_controller>
 80063e2:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
        Vy = PID_controller(yBall, 0.0, 2.0, 0.0, 0.0);
 80063e6:	ed9f 4b66 	vldr	d4, [pc, #408]	@ 8006580 <findAndTakeBall+0x2d8>
 80063ea:	ed9f 3b65 	vldr	d3, [pc, #404]	@ 8006580 <findAndTakeBall+0x2d8>
 80063ee:	ed9f 2b68 	vldr	d2, [pc, #416]	@ 8006590 <findAndTakeBall+0x2e8>
 80063f2:	ed9f 1b63 	vldr	d1, [pc, #396]	@ 8006580 <findAndTakeBall+0x2d8>
 80063f6:	ed97 0b08 	vldr	d0, [r7, #32]
 80063fa:	f7fe fcc5 	bl	8004d88 <PID_controller>
 80063fe:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48
        W = PID_controllerH(ballAngle, 0.0, 1.5);
 8006402:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006404:	f7fa f88e 	bl	8000524 <__aeabi_i2d>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	ed9f 2b5e 	vldr	d2, [pc, #376]	@ 8006588 <findAndTakeBall+0x2e0>
 8006410:	ed9f 1b5b 	vldr	d1, [pc, #364]	@ 8006580 <findAndTakeBall+0x2d8>
 8006414:	ec43 2b10 	vmov	d0, r2, r3
 8006418:	f7fe fd40 	bl	8004e9c <PID_controllerH>
 800641c:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

        if(ballDistance <= 400) {Vx = 0; Vy = 2000; W = 0;}
 8006420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006422:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8006426:	dc10      	bgt.n	800644a <findAndTakeBall+0x1a2>
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	4b69      	ldr	r3, [pc, #420]	@ (80065e0 <findAndTakeBall+0x338>)
 800643a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

        Inverse_Kinematics(Vx, Vy, W);
 800644a:	ed97 2b10 	vldr	d2, [r7, #64]	@ 0x40
 800644e:	ed97 1b12 	vldr	d1, [r7, #72]	@ 0x48
 8006452:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8006456:	f7fa fe77 	bl	8001148 <Inverse_Kinematics>
        setMotorSpeed(1, -2000);
 800645a:	ed9f 0b4f 	vldr	d0, [pc, #316]	@ 8006598 <findAndTakeBall+0x2f0>
 800645e:	2001      	movs	r0, #1
 8006460:	f7fa fdfc 	bl	800105c <setMotorSpeed>
        lastTimeBallSeen = timer;
 8006464:	4a5f      	ldr	r2, [pc, #380]	@ (80065e4 <findAndTakeBall+0x33c>)
 8006466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006468:	6013      	str	r3, [r2, #0]
        searchStartTime = timer;
 800646a:	4a5f      	ldr	r2, [pc, #380]	@ (80065e8 <findAndTakeBall+0x340>)
 800646c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800646e:	6013      	str	r3, [r2, #0]
//                    }
//                    break;
//            }
//        }
    }
}
 8006470:	e173      	b.n	800675a <findAndTakeBall+0x4b2>
    else if (timer - lastTimeBallSeen <= 700)
 8006472:	4b5c      	ldr	r3, [pc, #368]	@ (80065e4 <findAndTakeBall+0x33c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800647e:	d80d      	bhi.n	800649c <findAndTakeBall+0x1f4>
        Inverse_Kinematics(0, 2000, 0);
 8006480:	ed9f 2b3f 	vldr	d2, [pc, #252]	@ 8006580 <findAndTakeBall+0x2d8>
 8006484:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 80065a0 <findAndTakeBall+0x2f8>
 8006488:	ed9f 0b3d 	vldr	d0, [pc, #244]	@ 8006580 <findAndTakeBall+0x2d8>
 800648c:	f7fa fe5c 	bl	8001148 <Inverse_Kinematics>
        setMotorSpeed(1, -2000);
 8006490:	ed9f 0b41 	vldr	d0, [pc, #260]	@ 8006598 <findAndTakeBall+0x2f0>
 8006494:	2001      	movs	r0, #1
 8006496:	f7fa fde1 	bl	800105c <setMotorSpeed>
}
 800649a:	e15e      	b.n	800675a <findAndTakeBall+0x4b2>
        setMotorSpeed(1, 0);
 800649c:	ed9f 0b38 	vldr	d0, [pc, #224]	@ 8006580 <findAndTakeBall+0x2d8>
 80064a0:	2001      	movs	r0, #1
 80064a2:	f7fa fddb 	bl	800105c <setMotorSpeed>
        setMotorSpeed(2, 0);
 80064a6:	ed9f 0b36 	vldr	d0, [pc, #216]	@ 8006580 <findAndTakeBall+0x2d8>
 80064aa:	2002      	movs	r0, #2
 80064ac:	f7fa fdd6 	bl	800105c <setMotorSpeed>
        setMotorSpeed(7, 0);
 80064b0:	ed9f 0b33 	vldr	d0, [pc, #204]	@ 8006580 <findAndTakeBall+0x2d8>
 80064b4:	2007      	movs	r0, #7
 80064b6:	f7fa fdd1 	bl	800105c <setMotorSpeed>
        if (searchStartTime == 0) {searchStartTime = timer;}
 80064ba:	4b4b      	ldr	r3, [pc, #300]	@ (80065e8 <findAndTakeBall+0x340>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d102      	bne.n	80064c8 <findAndTakeBall+0x220>
 80064c2:	4a49      	ldr	r2, [pc, #292]	@ (80065e8 <findAndTakeBall+0x340>)
 80064c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064c6:	6013      	str	r3, [r2, #0]
        switch(searchMode)
 80064c8:	4b48      	ldr	r3, [pc, #288]	@ (80065ec <findAndTakeBall+0x344>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	f200 8143 	bhi.w	800675a <findAndTakeBall+0x4b2>
 80064d4:	a201      	add	r2, pc, #4	@ (adr r2, 80064dc <findAndTakeBall+0x234>)
 80064d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064da:	bf00      	nop
 80064dc:	080064ed 	.word	0x080064ed
 80064e0:	080065f5 	.word	0x080065f5
 80064e4:	08006669 	.word	0x08006669
 80064e8:	080066dd 	.word	0x080066dd
        	if(timer - searchStartTime >= 6000)
 80064ec:	4b3e      	ldr	r3, [pc, #248]	@ (80065e8 <findAndTakeBall+0x340>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	f241 726f 	movw	r2, #5999	@ 0x176f
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d907      	bls.n	800650c <findAndTakeBall+0x264>
        		searchMode += lastSearchMode;
 80064fc:	4b3b      	ldr	r3, [pc, #236]	@ (80065ec <findAndTakeBall+0x344>)
 80064fe:	781a      	ldrb	r2, [r3, #0]
 8006500:	4b3b      	ldr	r3, [pc, #236]	@ (80065f0 <findAndTakeBall+0x348>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	4413      	add	r3, r2
 8006506:	b2da      	uxtb	r2, r3
 8006508:	4b38      	ldr	r3, [pc, #224]	@ (80065ec <findAndTakeBall+0x344>)
 800650a:	701a      	strb	r2, [r3, #0]
        	if(lastSearchMode == 1)
 800650c:	4b38      	ldr	r3, [pc, #224]	@ (80065f0 <findAndTakeBall+0x348>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d10c      	bne.n	800652e <findAndTakeBall+0x286>
        		lookForTheBall(-10.0, -170.0, position.h);
 8006514:	ed97 7b06 	vldr	d7, [r7, #24]
 8006518:	eeb0 2a47 	vmov.f32	s4, s14
 800651c:	eef0 2a67 	vmov.f32	s5, s15
 8006520:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80065a8 <findAndTakeBall+0x300>
 8006524:	ed9f 0b22 	vldr	d0, [pc, #136]	@ 80065b0 <findAndTakeBall+0x308>
 8006528:	f7fe fe4e 	bl	80051c8 <lookForTheBall>
        	break;
 800652c:	e10e      	b.n	800674c <findAndTakeBall+0x4a4>
        	else if(lastSearchMode == 2)
 800652e:	4b30      	ldr	r3, [pc, #192]	@ (80065f0 <findAndTakeBall+0x348>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d10c      	bne.n	8006550 <findAndTakeBall+0x2a8>
        		lookForTheBall(-100.0, 100.0, position.h);
 8006536:	ed97 7b06 	vldr	d7, [r7, #24]
 800653a:	eeb0 2a47 	vmov.f32	s4, s14
 800653e:	eef0 2a67 	vmov.f32	s5, s15
 8006542:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 80065b8 <findAndTakeBall+0x310>
 8006546:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80065c0 <findAndTakeBall+0x318>
 800654a:	f7fe fe3d 	bl	80051c8 <lookForTheBall>
        	break;
 800654e:	e0fd      	b.n	800674c <findAndTakeBall+0x4a4>
        	else if(lastSearchMode == 3)
 8006550:	4b27      	ldr	r3, [pc, #156]	@ (80065f0 <findAndTakeBall+0x348>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b03      	cmp	r3, #3
 8006556:	f040 80f9 	bne.w	800674c <findAndTakeBall+0x4a4>
        		lookForTheBall(-70.0, 70.0, position.h);
 800655a:	ed97 7b06 	vldr	d7, [r7, #24]
 800655e:	eeb0 2a47 	vmov.f32	s4, s14
 8006562:	eef0 2a67 	vmov.f32	s5, s15
 8006566:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80065c8 <findAndTakeBall+0x320>
 800656a:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 80065d0 <findAndTakeBall+0x328>
 800656e:	f7fe fe2b 	bl	80051c8 <lookForTheBall>
        	break;
 8006572:	e0eb      	b.n	800674c <findAndTakeBall+0x4a4>
 8006574:	f3af 8000 	nop.w
 8006578:	54442d18 	.word	0x54442d18
 800657c:	400921fb 	.word	0x400921fb
	...
 800658c:	3ff80000 	.word	0x3ff80000
 8006590:	00000000 	.word	0x00000000
 8006594:	40000000 	.word	0x40000000
 8006598:	00000000 	.word	0x00000000
 800659c:	c09f4000 	.word	0xc09f4000
 80065a0:	00000000 	.word	0x00000000
 80065a4:	409f4000 	.word	0x409f4000
 80065a8:	00000000 	.word	0x00000000
 80065ac:	c0654000 	.word	0xc0654000
 80065b0:	00000000 	.word	0x00000000
 80065b4:	c0240000 	.word	0xc0240000
 80065b8:	00000000 	.word	0x00000000
 80065bc:	40590000 	.word	0x40590000
 80065c0:	00000000 	.word	0x00000000
 80065c4:	c0590000 	.word	0xc0590000
 80065c8:	00000000 	.word	0x00000000
 80065cc:	40518000 	.word	0x40518000
 80065d0:	00000000 	.word	0x00000000
 80065d4:	c0518000 	.word	0xc0518000
 80065d8:	2000057c 	.word	0x2000057c
 80065dc:	40668000 	.word	0x40668000
 80065e0:	409f4000 	.word	0x409f4000
 80065e4:	20000708 	.word	0x20000708
 80065e8:	2000070c 	.word	0x2000070c
 80065ec:	200000ca 	.word	0x200000ca
 80065f0:	200000cb 	.word	0x200000cb
        	lastSearchMode = 2;
 80065f4:	4b6c      	ldr	r3, [pc, #432]	@ (80067a8 <findAndTakeBall+0x500>)
 80065f6:	2202      	movs	r2, #2
 80065f8:	701a      	strb	r2, [r3, #0]
        	PID_EG(findBall[1], 2.8, 0.0, 0.0, 1.3, 0.8, 2700);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3318      	adds	r3, #24
 80065fe:	ed93 0b00 	vldr	d0, [r3]
 8006602:	ed93 1b02 	vldr	d1, [r3, #8]
 8006606:	ed93 2b04 	vldr	d2, [r3, #16]
 800660a:	a357      	add	r3, pc, #348	@ (adr r3, 8006768 <findAndTakeBall+0x4c0>)
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	e9cd 2300 	strd	r2, r3, [sp]
 8006614:	ed9f 7b56 	vldr	d7, [pc, #344]	@ 8006770 <findAndTakeBall+0x4c8>
 8006618:	ed9f 6b57 	vldr	d6, [pc, #348]	@ 8006778 <findAndTakeBall+0x4d0>
 800661c:	ed9f 5b58 	vldr	d5, [pc, #352]	@ 8006780 <findAndTakeBall+0x4d8>
 8006620:	ed9f 4b57 	vldr	d4, [pc, #348]	@ 8006780 <findAndTakeBall+0x4d8>
 8006624:	ed9f 3b58 	vldr	d3, [pc, #352]	@ 8006788 <findAndTakeBall+0x4e0>
 8006628:	f7fe fe3e 	bl	80052a8 <PID_EG>
        	searchStartTime = timer;
 800662c:	4a5f      	ldr	r2, [pc, #380]	@ (80067ac <findAndTakeBall+0x504>)
 800662e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006630:	6013      	str	r3, [r2, #0]
        	if(atTargetEG(findBall[1], position, 500, 10))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3318      	adds	r3, #24
 8006636:	ed97 3b02 	vldr	d3, [r7, #8]
 800663a:	ed97 4b04 	vldr	d4, [r7, #16]
 800663e:	ed97 5b06 	vldr	d5, [r7, #24]
 8006642:	ed93 0b00 	vldr	d0, [r3]
 8006646:	ed93 1b02 	vldr	d1, [r3, #8]
 800664a:	ed93 2b04 	vldr	d2, [r3, #16]
 800664e:	ed9f 7b50 	vldr	d7, [pc, #320]	@ 8006790 <findAndTakeBall+0x4e8>
 8006652:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8006798 <findAndTakeBall+0x4f0>
 8006656:	f7fe fd5d 	bl	8005114 <atTargetEG>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d077      	beq.n	8006750 <findAndTakeBall+0x4a8>
        		searchMode = 1;
 8006660:	4b53      	ldr	r3, [pc, #332]	@ (80067b0 <findAndTakeBall+0x508>)
 8006662:	2201      	movs	r2, #1
 8006664:	701a      	strb	r2, [r3, #0]
        	break;
 8006666:	e073      	b.n	8006750 <findAndTakeBall+0x4a8>
        	lastSearchMode = 3;
 8006668:	4b4f      	ldr	r3, [pc, #316]	@ (80067a8 <findAndTakeBall+0x500>)
 800666a:	2203      	movs	r2, #3
 800666c:	701a      	strb	r2, [r3, #0]
        	PID_EG(findBall[2], 2.0, 0.0, 0.0, 1.3, 0.8, 2700);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3330      	adds	r3, #48	@ 0x30
 8006672:	ed93 0b00 	vldr	d0, [r3]
 8006676:	ed93 1b02 	vldr	d1, [r3, #8]
 800667a:	ed93 2b04 	vldr	d2, [r3, #16]
 800667e:	a33a      	add	r3, pc, #232	@ (adr r3, 8006768 <findAndTakeBall+0x4c0>)
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	e9cd 2300 	strd	r2, r3, [sp]
 8006688:	ed9f 7b39 	vldr	d7, [pc, #228]	@ 8006770 <findAndTakeBall+0x4c8>
 800668c:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8006778 <findAndTakeBall+0x4d0>
 8006690:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8006780 <findAndTakeBall+0x4d8>
 8006694:	ed9f 4b3a 	vldr	d4, [pc, #232]	@ 8006780 <findAndTakeBall+0x4d8>
 8006698:	ed9f 3b41 	vldr	d3, [pc, #260]	@ 80067a0 <findAndTakeBall+0x4f8>
 800669c:	f7fe fe04 	bl	80052a8 <PID_EG>
        	searchStartTime = timer;
 80066a0:	4a42      	ldr	r2, [pc, #264]	@ (80067ac <findAndTakeBall+0x504>)
 80066a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066a4:	6013      	str	r3, [r2, #0]
        	if(atTargetEG(findBall[2], position, 500, 10))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3330      	adds	r3, #48	@ 0x30
 80066aa:	ed97 3b02 	vldr	d3, [r7, #8]
 80066ae:	ed97 4b04 	vldr	d4, [r7, #16]
 80066b2:	ed97 5b06 	vldr	d5, [r7, #24]
 80066b6:	ed93 0b00 	vldr	d0, [r3]
 80066ba:	ed93 1b02 	vldr	d1, [r3, #8]
 80066be:	ed93 2b04 	vldr	d2, [r3, #16]
 80066c2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8006790 <findAndTakeBall+0x4e8>
 80066c6:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8006798 <findAndTakeBall+0x4f0>
 80066ca:	f7fe fd23 	bl	8005114 <atTargetEG>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d03f      	beq.n	8006754 <findAndTakeBall+0x4ac>
        		searchMode = 1;
 80066d4:	4b36      	ldr	r3, [pc, #216]	@ (80067b0 <findAndTakeBall+0x508>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	701a      	strb	r2, [r3, #0]
        	break;
 80066da:	e03b      	b.n	8006754 <findAndTakeBall+0x4ac>
        	lastSearchMode = 1;
 80066dc:	4b32      	ldr	r3, [pc, #200]	@ (80067a8 <findAndTakeBall+0x500>)
 80066de:	2201      	movs	r2, #1
 80066e0:	701a      	strb	r2, [r3, #0]
        	PID_EG(findBall[0], 2.8, 0.0, 0.0, 1.3, 0.8, 2700);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	ed93 0b00 	vldr	d0, [r3]
 80066e8:	ed93 1b02 	vldr	d1, [r3, #8]
 80066ec:	ed93 2b04 	vldr	d2, [r3, #16]
 80066f0:	a31d      	add	r3, pc, #116	@ (adr r3, 8006768 <findAndTakeBall+0x4c0>)
 80066f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f6:	e9cd 2300 	strd	r2, r3, [sp]
 80066fa:	ed9f 7b1d 	vldr	d7, [pc, #116]	@ 8006770 <findAndTakeBall+0x4c8>
 80066fe:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8006778 <findAndTakeBall+0x4d0>
 8006702:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 8006780 <findAndTakeBall+0x4d8>
 8006706:	ed9f 4b1e 	vldr	d4, [pc, #120]	@ 8006780 <findAndTakeBall+0x4d8>
 800670a:	ed9f 3b1f 	vldr	d3, [pc, #124]	@ 8006788 <findAndTakeBall+0x4e0>
 800670e:	f7fe fdcb 	bl	80052a8 <PID_EG>
        	searchStartTime = timer;
 8006712:	4a26      	ldr	r2, [pc, #152]	@ (80067ac <findAndTakeBall+0x504>)
 8006714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006716:	6013      	str	r3, [r2, #0]
        	if(atTargetEG(findBall[0], position, 500, 10))
 8006718:	ed97 3b02 	vldr	d3, [r7, #8]
 800671c:	ed97 4b04 	vldr	d4, [r7, #16]
 8006720:	ed97 5b06 	vldr	d5, [r7, #24]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	ed93 0b00 	vldr	d0, [r3]
 800672a:	ed93 1b02 	vldr	d1, [r3, #8]
 800672e:	ed93 2b04 	vldr	d2, [r3, #16]
 8006732:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8006790 <findAndTakeBall+0x4e8>
 8006736:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8006798 <findAndTakeBall+0x4f0>
 800673a:	f7fe fceb 	bl	8005114 <atTargetEG>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d009      	beq.n	8006758 <findAndTakeBall+0x4b0>
        		searchMode = 1;
 8006744:	4b1a      	ldr	r3, [pc, #104]	@ (80067b0 <findAndTakeBall+0x508>)
 8006746:	2201      	movs	r2, #1
 8006748:	701a      	strb	r2, [r3, #0]
        	break;
 800674a:	e005      	b.n	8006758 <findAndTakeBall+0x4b0>
        	break;
 800674c:	bf00      	nop
 800674e:	e004      	b.n	800675a <findAndTakeBall+0x4b2>
        	break;
 8006750:	bf00      	nop
 8006752:	e002      	b.n	800675a <findAndTakeBall+0x4b2>
        	break;
 8006754:	bf00      	nop
 8006756:	e000      	b.n	800675a <findAndTakeBall+0x4b2>
        	break;
 8006758:	bf00      	nop
}
 800675a:	bf00      	nop
 800675c:	3758      	adds	r7, #88	@ 0x58
 800675e:	46bd      	mov	sp, r7
 8006760:	bdb0      	pop	{r4, r5, r7, pc}
 8006762:	bf00      	nop
 8006764:	f3af 8000 	nop.w
 8006768:	00000000 	.word	0x00000000
 800676c:	40a51800 	.word	0x40a51800
 8006770:	9999999a 	.word	0x9999999a
 8006774:	3fe99999 	.word	0x3fe99999
 8006778:	cccccccd 	.word	0xcccccccd
 800677c:	3ff4cccc 	.word	0x3ff4cccc
	...
 8006788:	66666666 	.word	0x66666666
 800678c:	40066666 	.word	0x40066666
 8006790:	00000000 	.word	0x00000000
 8006794:	40240000 	.word	0x40240000
 8006798:	00000000 	.word	0x00000000
 800679c:	407f4000 	.word	0x407f4000
 80067a0:	00000000 	.word	0x00000000
 80067a4:	40000000 	.word	0x40000000
 80067a8:	200000cb 	.word	0x200000cb
 80067ac:	2000070c 	.word	0x2000070c
 80067b0:	200000ca 	.word	0x200000ca
 80067b4:	00000000 	.word	0x00000000

080067b8 <throwTheBall>:

void throwTheBall(external_global whereTo, double Kp, double Ki, double Kd, double KpH)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b096      	sub	sp, #88	@ 0x58
 80067bc:	af02      	add	r7, sp, #8
 80067be:	eeb0 7a42 	vmov.f32	s14, s4
 80067c2:	eef0 7a62 	vmov.f32	s15, s5
 80067c6:	ed87 3b06 	vstr	d3, [r7, #24]
 80067ca:	ed87 4b04 	vstr	d4, [r7, #16]
 80067ce:	ed87 5b02 	vstr	d5, [r7, #8]
 80067d2:	ed87 6b00 	vstr	d6, [r7]
 80067d6:	ed87 0b08 	vstr	d0, [r7, #32]
 80067da:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 80067de:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
	external_global position = odometry_eg();
 80067e2:	f7fe f941 	bl	8004a68 <odometry_eg>
 80067e6:	eeb0 5a40 	vmov.f32	s10, s0
 80067ea:	eef0 5a60 	vmov.f32	s11, s1
 80067ee:	eeb0 6a41 	vmov.f32	s12, s2
 80067f2:	eef0 6a61 	vmov.f32	s13, s3
 80067f6:	eeb0 7a42 	vmov.f32	s14, s4
 80067fa:	eef0 7a62 	vmov.f32	s15, s5
 80067fe:	ed87 5b0e 	vstr	d5, [r7, #56]	@ 0x38
 8006802:	ed87 6b10 	vstr	d6, [r7, #64]	@ 0x40
 8006806:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48

	if(atTargetEG(whereTo, position, 400, 5))
 800680a:	ed97 3b0e 	vldr	d3, [r7, #56]	@ 0x38
 800680e:	ed97 4b10 	vldr	d4, [r7, #64]	@ 0x40
 8006812:	ed97 5b12 	vldr	d5, [r7, #72]	@ 0x48
 8006816:	ed97 0b08 	vldr	d0, [r7, #32]
 800681a:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 800681e:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 8006822:	ed9f 7b1d 	vldr	d7, [pc, #116]	@ 8006898 <throwTheBall+0xe0>
 8006826:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 80068a0 <throwTheBall+0xe8>
 800682a:	f7fe fc73 	bl	8005114 <atTargetEG>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d013      	beq.n	800685c <throwTheBall+0xa4>
	{
		  setMotorSpeed(1, -2000);
 8006834:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 80068a8 <throwTheBall+0xf0>
 8006838:	2001      	movs	r0, #1
 800683a:	f7fa fc0f 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, -2000);
 800683e:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 80068a8 <throwTheBall+0xf0>
 8006842:	2002      	movs	r0, #2
 8006844:	f7fa fc0a 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, -2000);
 8006848:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80068a8 <throwTheBall+0xf0>
 800684c:	2007      	movs	r0, #7
 800684e:	f7fa fc05 	bl	800105c <setMotorSpeed>
		  HAL_Delay(2500);
 8006852:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8006856:	f000 fc79 	bl	800714c <HAL_Delay>
	}
	else
	{
		PID_EG(whereTo, Kp, Ki, Kd, KpH, 0.7, 2800);
	}
}
 800685a:	e016      	b.n	800688a <throwTheBall+0xd2>
		PID_EG(whereTo, Kp, Ki, Kd, KpH, 0.7, 2800);
 800685c:	ed97 0b08 	vldr	d0, [r7, #32]
 8006860:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 8006864:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 8006868:	a313      	add	r3, pc, #76	@ (adr r3, 80068b8 <throwTheBall+0x100>)
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	e9cd 2300 	strd	r2, r3, [sp]
 8006872:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 80068b0 <throwTheBall+0xf8>
 8006876:	ed97 6b00 	vldr	d6, [r7]
 800687a:	ed97 5b02 	vldr	d5, [r7, #8]
 800687e:	ed97 4b04 	vldr	d4, [r7, #16]
 8006882:	ed97 3b06 	vldr	d3, [r7, #24]
 8006886:	f7fe fd0f 	bl	80052a8 <PID_EG>
}
 800688a:	bf00      	nop
 800688c:	3750      	adds	r7, #80	@ 0x50
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	f3af 8000 	nop.w
 8006898:	00000000 	.word	0x00000000
 800689c:	40140000 	.word	0x40140000
 80068a0:	00000000 	.word	0x00000000
 80068a4:	40790000 	.word	0x40790000
 80068a8:	00000000 	.word	0x00000000
 80068ac:	c09f4000 	.word	0xc09f4000
 80068b0:	66666666 	.word	0x66666666
 80068b4:	3fe66666 	.word	0x3fe66666
 80068b8:	00000000 	.word	0x00000000
 80068bc:	40a5e000 	.word	0x40a5e000

080068c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068c6:	2300      	movs	r3, #0
 80068c8:	607b      	str	r3, [r7, #4]
 80068ca:	4b10      	ldr	r3, [pc, #64]	@ (800690c <HAL_MspInit+0x4c>)
 80068cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ce:	4a0f      	ldr	r2, [pc, #60]	@ (800690c <HAL_MspInit+0x4c>)
 80068d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80068d6:	4b0d      	ldr	r3, [pc, #52]	@ (800690c <HAL_MspInit+0x4c>)
 80068d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068de:	607b      	str	r3, [r7, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80068e2:	2300      	movs	r3, #0
 80068e4:	603b      	str	r3, [r7, #0]
 80068e6:	4b09      	ldr	r3, [pc, #36]	@ (800690c <HAL_MspInit+0x4c>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ea:	4a08      	ldr	r2, [pc, #32]	@ (800690c <HAL_MspInit+0x4c>)
 80068ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80068f2:	4b06      	ldr	r3, [pc, #24]	@ (800690c <HAL_MspInit+0x4c>)
 80068f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80068fe:	2007      	movs	r0, #7
 8006900:	f000 fd18 	bl	8007334 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	40023800 	.word	0x40023800

08006910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b08a      	sub	sp, #40	@ 0x28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006918:	f107 0314 	add.w	r3, r7, #20
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	605a      	str	r2, [r3, #4]
 8006922:	609a      	str	r2, [r3, #8]
 8006924:	60da      	str	r2, [r3, #12]
 8006926:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a19      	ldr	r2, [pc, #100]	@ (8006994 <HAL_I2C_MspInit+0x84>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d12c      	bne.n	800698c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006932:	2300      	movs	r3, #0
 8006934:	613b      	str	r3, [r7, #16]
 8006936:	4b18      	ldr	r3, [pc, #96]	@ (8006998 <HAL_I2C_MspInit+0x88>)
 8006938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693a:	4a17      	ldr	r2, [pc, #92]	@ (8006998 <HAL_I2C_MspInit+0x88>)
 800693c:	f043 0302 	orr.w	r3, r3, #2
 8006940:	6313      	str	r3, [r2, #48]	@ 0x30
 8006942:	4b15      	ldr	r3, [pc, #84]	@ (8006998 <HAL_I2C_MspInit+0x88>)
 8006944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	613b      	str	r3, [r7, #16]
 800694c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800694e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006954:	2312      	movs	r3, #18
 8006956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006958:	2300      	movs	r3, #0
 800695a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800695c:	2303      	movs	r3, #3
 800695e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006960:	2304      	movs	r3, #4
 8006962:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006964:	f107 0314 	add.w	r3, r7, #20
 8006968:	4619      	mov	r1, r3
 800696a:	480c      	ldr	r0, [pc, #48]	@ (800699c <HAL_I2C_MspInit+0x8c>)
 800696c:	f000 fdb6 	bl	80074dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	4b08      	ldr	r3, [pc, #32]	@ (8006998 <HAL_I2C_MspInit+0x88>)
 8006976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006978:	4a07      	ldr	r2, [pc, #28]	@ (8006998 <HAL_I2C_MspInit+0x88>)
 800697a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800697e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006980:	4b05      	ldr	r3, [pc, #20]	@ (8006998 <HAL_I2C_MspInit+0x88>)
 8006982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006984:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800698c:	bf00      	nop
 800698e:	3728      	adds	r7, #40	@ 0x28
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	40005800 	.word	0x40005800
 8006998:	40023800 	.word	0x40023800
 800699c:	40020400 	.word	0x40020400

080069a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a2a      	ldr	r2, [pc, #168]	@ (8006a58 <HAL_TIM_Base_MspInit+0xb8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d116      	bne.n	80069e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80069b2:	2300      	movs	r3, #0
 80069b4:	617b      	str	r3, [r7, #20]
 80069b6:	4b29      	ldr	r3, [pc, #164]	@ (8006a5c <HAL_TIM_Base_MspInit+0xbc>)
 80069b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ba:	4a28      	ldr	r2, [pc, #160]	@ (8006a5c <HAL_TIM_Base_MspInit+0xbc>)
 80069bc:	f043 0301 	orr.w	r3, r3, #1
 80069c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80069c2:	4b26      	ldr	r3, [pc, #152]	@ (8006a5c <HAL_TIM_Base_MspInit+0xbc>)
 80069c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80069ce:	2200      	movs	r2, #0
 80069d0:	2100      	movs	r1, #0
 80069d2:	201b      	movs	r0, #27
 80069d4:	f000 fcb9 	bl	800734a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80069d8:	201b      	movs	r0, #27
 80069da:	f000 fcd2 	bl	8007382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80069de:	e036      	b.n	8006a4e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e8:	d116      	bne.n	8006a18 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80069ea:	2300      	movs	r3, #0
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	4b1b      	ldr	r3, [pc, #108]	@ (8006a5c <HAL_TIM_Base_MspInit+0xbc>)
 80069f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f2:	4a1a      	ldr	r2, [pc, #104]	@ (8006a5c <HAL_TIM_Base_MspInit+0xbc>)
 80069f4:	f043 0301 	orr.w	r3, r3, #1
 80069f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80069fa:	4b18      	ldr	r3, [pc, #96]	@ (8006a5c <HAL_TIM_Base_MspInit+0xbc>)
 80069fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006a06:	2200      	movs	r2, #0
 8006a08:	2100      	movs	r1, #0
 8006a0a:	201c      	movs	r0, #28
 8006a0c:	f000 fc9d 	bl	800734a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006a10:	201c      	movs	r0, #28
 8006a12:	f000 fcb6 	bl	8007382 <HAL_NVIC_EnableIRQ>
}
 8006a16:	e01a      	b.n	8006a4e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a10      	ldr	r2, [pc, #64]	@ (8006a60 <HAL_TIM_Base_MspInit+0xc0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d115      	bne.n	8006a4e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	4b0d      	ldr	r3, [pc, #52]	@ (8006a5c <HAL_TIM_Base_MspInit+0xbc>)
 8006a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a2a:	4a0c      	ldr	r2, [pc, #48]	@ (8006a5c <HAL_TIM_Base_MspInit+0xbc>)
 8006a2c:	f043 0302 	orr.w	r3, r3, #2
 8006a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a32:	4b0a      	ldr	r3, [pc, #40]	@ (8006a5c <HAL_TIM_Base_MspInit+0xbc>)
 8006a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2100      	movs	r1, #0
 8006a42:	202e      	movs	r0, #46	@ 0x2e
 8006a44:	f000 fc81 	bl	800734a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8006a48:	202e      	movs	r0, #46	@ 0x2e
 8006a4a:	f000 fc9a 	bl	8007382 <HAL_NVIC_EnableIRQ>
}
 8006a4e:	bf00      	nop
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	40010000 	.word	0x40010000
 8006a5c:	40023800 	.word	0x40023800
 8006a60:	40010400 	.word	0x40010400

08006a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08a      	sub	sp, #40	@ 0x28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a6c:	f107 0314 	add.w	r3, r7, #20
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	605a      	str	r2, [r3, #4]
 8006a76:	609a      	str	r2, [r3, #8]
 8006a78:	60da      	str	r2, [r3, #12]
 8006a7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a37      	ldr	r2, [pc, #220]	@ (8006b60 <HAL_TIM_MspPostInit+0xfc>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d11f      	bne.n	8006ac6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a86:	2300      	movs	r3, #0
 8006a88:	613b      	str	r3, [r7, #16]
 8006a8a:	4b36      	ldr	r3, [pc, #216]	@ (8006b64 <HAL_TIM_MspPostInit+0x100>)
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8e:	4a35      	ldr	r2, [pc, #212]	@ (8006b64 <HAL_TIM_MspPostInit+0x100>)
 8006a90:	f043 0310 	orr.w	r3, r3, #16
 8006a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a96:	4b33      	ldr	r3, [pc, #204]	@ (8006b64 <HAL_TIM_MspPostInit+0x100>)
 8006a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8006aa2:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8006aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006aa8:	2312      	movs	r3, #18
 8006aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006aac:	2302      	movs	r3, #2
 8006aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ab8:	f107 0314 	add.w	r3, r7, #20
 8006abc:	4619      	mov	r1, r3
 8006abe:	482a      	ldr	r0, [pc, #168]	@ (8006b68 <HAL_TIM_MspPostInit+0x104>)
 8006ac0:	f000 fd0c 	bl	80074dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006ac4:	e047      	b.n	8006b56 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ace:	d11e      	bne.n	8006b0e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	4b23      	ldr	r3, [pc, #140]	@ (8006b64 <HAL_TIM_MspPostInit+0x100>)
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad8:	4a22      	ldr	r2, [pc, #136]	@ (8006b64 <HAL_TIM_MspPostInit+0x100>)
 8006ada:	f043 0301 	orr.w	r3, r3, #1
 8006ade:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ae0:	4b20      	ldr	r3, [pc, #128]	@ (8006b64 <HAL_TIM_MspPostInit+0x100>)
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006aec:	230c      	movs	r3, #12
 8006aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006af0:	2312      	movs	r3, #18
 8006af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006af4:	2302      	movs	r3, #2
 8006af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006af8:	2303      	movs	r3, #3
 8006afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006afc:	2301      	movs	r3, #1
 8006afe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b00:	f107 0314 	add.w	r3, r7, #20
 8006b04:	4619      	mov	r1, r3
 8006b06:	4819      	ldr	r0, [pc, #100]	@ (8006b6c <HAL_TIM_MspPostInit+0x108>)
 8006b08:	f000 fce8 	bl	80074dc <HAL_GPIO_Init>
}
 8006b0c:	e023      	b.n	8006b56 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a17      	ldr	r2, [pc, #92]	@ (8006b70 <HAL_TIM_MspPostInit+0x10c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d11e      	bne.n	8006b56 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60bb      	str	r3, [r7, #8]
 8006b1c:	4b11      	ldr	r3, [pc, #68]	@ (8006b64 <HAL_TIM_MspPostInit+0x100>)
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b20:	4a10      	ldr	r2, [pc, #64]	@ (8006b64 <HAL_TIM_MspPostInit+0x100>)
 8006b22:	f043 0304 	orr.w	r3, r3, #4
 8006b26:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b28:	4b0e      	ldr	r3, [pc, #56]	@ (8006b64 <HAL_TIM_MspPostInit+0x100>)
 8006b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	60bb      	str	r3, [r7, #8]
 8006b32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006b34:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8006b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b3a:	2312      	movs	r3, #18
 8006b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006b3e:	2302      	movs	r3, #2
 8006b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b42:	2303      	movs	r3, #3
 8006b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006b46:	2303      	movs	r3, #3
 8006b48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b4a:	f107 0314 	add.w	r3, r7, #20
 8006b4e:	4619      	mov	r1, r3
 8006b50:	4808      	ldr	r0, [pc, #32]	@ (8006b74 <HAL_TIM_MspPostInit+0x110>)
 8006b52:	f000 fcc3 	bl	80074dc <HAL_GPIO_Init>
}
 8006b56:	bf00      	nop
 8006b58:	3728      	adds	r7, #40	@ 0x28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40023800 	.word	0x40023800
 8006b68:	40021000 	.word	0x40021000
 8006b6c:	40020000 	.word	0x40020000
 8006b70:	40010400 	.word	0x40010400
 8006b74:	40020800 	.word	0x40020800

08006b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08e      	sub	sp, #56	@ 0x38
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	605a      	str	r2, [r3, #4]
 8006b8a:	609a      	str	r2, [r3, #8]
 8006b8c:	60da      	str	r2, [r3, #12]
 8006b8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a57      	ldr	r2, [pc, #348]	@ (8006cf4 <HAL_UART_MspInit+0x17c>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d134      	bne.n	8006c04 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	623b      	str	r3, [r7, #32]
 8006b9e:	4b56      	ldr	r3, [pc, #344]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba2:	4a55      	ldr	r2, [pc, #340]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006ba4:	f043 0310 	orr.w	r3, r3, #16
 8006ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8006baa:	4b53      	ldr	r3, [pc, #332]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bae:	f003 0310 	and.w	r3, r3, #16
 8006bb2:	623b      	str	r3, [r7, #32]
 8006bb4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61fb      	str	r3, [r7, #28]
 8006bba:	4b4f      	ldr	r3, [pc, #316]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bbe:	4a4e      	ldr	r2, [pc, #312]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006bc0:	f043 0302 	orr.w	r3, r3, #2
 8006bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006bc6:	4b4c      	ldr	r3, [pc, #304]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006bd2:	23c0      	movs	r3, #192	@ 0xc0
 8006bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bde:	2303      	movs	r3, #3
 8006be0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006be2:	2307      	movs	r3, #7
 8006be4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006be6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bea:	4619      	mov	r1, r3
 8006bec:	4843      	ldr	r0, [pc, #268]	@ (8006cfc <HAL_UART_MspInit+0x184>)
 8006bee:	f000 fc75 	bl	80074dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	2025      	movs	r0, #37	@ 0x25
 8006bf8:	f000 fba7 	bl	800734a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006bfc:	2025      	movs	r0, #37	@ 0x25
 8006bfe:	f000 fbc0 	bl	8007382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006c02:	e073      	b.n	8006cec <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a3d      	ldr	r2, [pc, #244]	@ (8006d00 <HAL_UART_MspInit+0x188>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d134      	bne.n	8006c78 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	4b39      	ldr	r3, [pc, #228]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c16:	4a38      	ldr	r2, [pc, #224]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c1e:	4b36      	ldr	r3, [pc, #216]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c26:	61bb      	str	r3, [r7, #24]
 8006c28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	617b      	str	r3, [r7, #20]
 8006c2e:	4b32      	ldr	r3, [pc, #200]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c32:	4a31      	ldr	r2, [pc, #196]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006c34:	f043 0308 	orr.w	r3, r3, #8
 8006c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006c46:	2360      	movs	r3, #96	@ 0x60
 8006c48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c52:	2303      	movs	r3, #3
 8006c54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006c56:	2307      	movs	r3, #7
 8006c58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4828      	ldr	r0, [pc, #160]	@ (8006d04 <HAL_UART_MspInit+0x18c>)
 8006c62:	f000 fc3b 	bl	80074dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006c66:	2200      	movs	r2, #0
 8006c68:	2100      	movs	r1, #0
 8006c6a:	2026      	movs	r0, #38	@ 0x26
 8006c6c:	f000 fb6d 	bl	800734a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006c70:	2026      	movs	r0, #38	@ 0x26
 8006c72:	f000 fb86 	bl	8007382 <HAL_NVIC_EnableIRQ>
}
 8006c76:	e039      	b.n	8006cec <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a22      	ldr	r2, [pc, #136]	@ (8006d08 <HAL_UART_MspInit+0x190>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d134      	bne.n	8006cec <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006c82:	2300      	movs	r3, #0
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	4b1c      	ldr	r3, [pc, #112]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c92:	4b19      	ldr	r3, [pc, #100]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	4b15      	ldr	r3, [pc, #84]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca6:	4a14      	ldr	r2, [pc, #80]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006ca8:	f043 0304 	orr.w	r3, r3, #4
 8006cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cae:	4b12      	ldr	r3, [pc, #72]	@ (8006cf8 <HAL_UART_MspInit+0x180>)
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb2:	f003 0304 	and.w	r3, r3, #4
 8006cb6:	60fb      	str	r3, [r7, #12]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006cba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006ccc:	2307      	movs	r3, #7
 8006cce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	480d      	ldr	r0, [pc, #52]	@ (8006d0c <HAL_UART_MspInit+0x194>)
 8006cd8:	f000 fc00 	bl	80074dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2100      	movs	r1, #0
 8006ce0:	2027      	movs	r0, #39	@ 0x27
 8006ce2:	f000 fb32 	bl	800734a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006ce6:	2027      	movs	r0, #39	@ 0x27
 8006ce8:	f000 fb4b 	bl	8007382 <HAL_NVIC_EnableIRQ>
}
 8006cec:	bf00      	nop
 8006cee:	3738      	adds	r7, #56	@ 0x38
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	40011000 	.word	0x40011000
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	40020400 	.word	0x40020400
 8006d00:	40004400 	.word	0x40004400
 8006d04:	40020c00 	.word	0x40020c00
 8006d08:	40004800 	.word	0x40004800
 8006d0c:	40020800 	.word	0x40020800

08006d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006d14:	bf00      	nop
 8006d16:	e7fd      	b.n	8006d14 <NMI_Handler+0x4>

08006d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d1c:	bf00      	nop
 8006d1e:	e7fd      	b.n	8006d1c <HardFault_Handler+0x4>

08006d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d20:	b480      	push	{r7}
 8006d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d24:	bf00      	nop
 8006d26:	e7fd      	b.n	8006d24 <MemManage_Handler+0x4>

08006d28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d2c:	bf00      	nop
 8006d2e:	e7fd      	b.n	8006d2c <BusFault_Handler+0x4>

08006d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d30:	b480      	push	{r7}
 8006d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d34:	bf00      	nop
 8006d36:	e7fd      	b.n	8006d34 <UsageFault_Handler+0x4>

08006d38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006d3c:	bf00      	nop
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d46:	b480      	push	{r7}
 8006d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d4a:	bf00      	nop
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006d58:	bf00      	nop
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006d66:	f000 f9d1 	bl	800710c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006d6a:	bf00      	nop
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_2_Pin);
 8006d72:	2001      	movs	r0, #1
 8006d74:	f000 fd80 	bl	8007878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006d78:	bf00      	nop
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_2_Pin);
 8006d80:	2002      	movs	r0, #2
 8006d82:	f000 fd79 	bl	8007878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006d86:	bf00      	nop
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_1_Pin);
 8006d8e:	2004      	movs	r0, #4
 8006d90:	f000 fd72 	bl	8007878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006d94:	bf00      	nop
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_1_Pin);
 8006d9c:	2008      	movs	r0, #8
 8006d9e:	f000 fd6b 	bl	8007878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8006da2:	bf00      	nop
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_3_Pin);
 8006daa:	2020      	movs	r0, #32
 8006dac:	f000 fd64 	bl	8007878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8006db0:	2040      	movs	r0, #64	@ 0x40
 8006db2:	f000 fd61 	bl	8007878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8006db6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006dba:	f000 fd5d 	bl	8007878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006dbe:	bf00      	nop
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006dc8:	4802      	ldr	r0, [pc, #8]	@ (8006dd4 <TIM1_CC_IRQHandler+0x10>)
 8006dca:	f002 f861 	bl	8008e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006dce:	bf00      	nop
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000320 	.word	0x20000320

08006dd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006ddc:	4802      	ldr	r0, [pc, #8]	@ (8006de8 <TIM2_IRQHandler+0x10>)
 8006dde:	f002 f857 	bl	8008e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006de2:	bf00      	nop
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20000368 	.word	0x20000368

08006dec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
//		pitch = sensorData[1];
//		ax = sensorData[2];
//		ay = sensorData[3];
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006df0:	4802      	ldr	r0, [pc, #8]	@ (8006dfc <USART1_IRQHandler+0x10>)
 8006df2:	f002 ff6d 	bl	8009cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006df6:	bf00      	nop
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	200003f8 	.word	0x200003f8

08006e00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006e04:	4802      	ldr	r0, [pc, #8]	@ (8006e10 <USART2_IRQHandler+0x10>)
 8006e06:	f002 ff63 	bl	8009cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006e0a:	bf00      	nop
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000440 	.word	0x20000440

08006e14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006e18:	4802      	ldr	r0, [pc, #8]	@ (8006e24 <USART3_IRQHandler+0x10>)
 8006e1a:	f002 ff59 	bl	8009cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006e1e:	bf00      	nop
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20000488 	.word	0x20000488

08006e28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8006e2c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006e30:	f000 fd22 	bl	8007878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_3_Pin);
 8006e34:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006e38:	f000 fd1e 	bl	8007878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_4_Pin);
 8006e3c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006e40:	f000 fd1a 	bl	8007878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_4_Pin);
 8006e44:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006e48:	f000 fd16 	bl	8007878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006e4c:	bf00      	nop
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006e54:	4802      	ldr	r0, [pc, #8]	@ (8006e60 <TIM8_CC_IRQHandler+0x10>)
 8006e56:	f002 f81b 	bl	8008e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8006e5a:	bf00      	nop
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	200003b0 	.word	0x200003b0

08006e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0
  return 1;
 8006e68:	2301      	movs	r3, #1
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <_kill>:

int _kill(int pid, int sig)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006e7e:	f005 fd19 	bl	800c8b4 <__errno>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2216      	movs	r2, #22
 8006e86:	601a      	str	r2, [r3, #0]
  return -1;
 8006e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <_exit>:

void _exit (int status)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff ffe7 	bl	8006e74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006ea6:	bf00      	nop
 8006ea8:	e7fd      	b.n	8006ea6 <_exit+0x12>

08006eaa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b086      	sub	sp, #24
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	617b      	str	r3, [r7, #20]
 8006eba:	e00a      	b.n	8006ed2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006ebc:	f3af 8000 	nop.w
 8006ec0:	4601      	mov	r1, r0
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	60ba      	str	r2, [r7, #8]
 8006ec8:	b2ca      	uxtb	r2, r1
 8006eca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	dbf0      	blt.n	8006ebc <_read+0x12>
  }

  return len;
 8006eda:	687b      	ldr	r3, [r7, #4]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	e009      	b.n	8006f0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	60ba      	str	r2, [r7, #8]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	3301      	adds	r3, #1
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	dbf1      	blt.n	8006ef6 <_write+0x12>
  }
  return len;
 8006f12:	687b      	ldr	r3, [r7, #4]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <_close>:

int _close(int file)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006f24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006f44:	605a      	str	r2, [r3, #4]
  return 0;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <_isatty>:

int _isatty(int file)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006f5c:	2301      	movs	r3, #1
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f8c:	4a14      	ldr	r2, [pc, #80]	@ (8006fe0 <_sbrk+0x5c>)
 8006f8e:	4b15      	ldr	r3, [pc, #84]	@ (8006fe4 <_sbrk+0x60>)
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f98:	4b13      	ldr	r3, [pc, #76]	@ (8006fe8 <_sbrk+0x64>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d102      	bne.n	8006fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006fa0:	4b11      	ldr	r3, [pc, #68]	@ (8006fe8 <_sbrk+0x64>)
 8006fa2:	4a12      	ldr	r2, [pc, #72]	@ (8006fec <_sbrk+0x68>)
 8006fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006fa6:	4b10      	ldr	r3, [pc, #64]	@ (8006fe8 <_sbrk+0x64>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4413      	add	r3, r2
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d207      	bcs.n	8006fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006fb4:	f005 fc7e 	bl	800c8b4 <__errno>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	220c      	movs	r2, #12
 8006fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc2:	e009      	b.n	8006fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006fc4:	4b08      	ldr	r3, [pc, #32]	@ (8006fe8 <_sbrk+0x64>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006fca:	4b07      	ldr	r3, [pc, #28]	@ (8006fe8 <_sbrk+0x64>)
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	4a05      	ldr	r2, [pc, #20]	@ (8006fe8 <_sbrk+0x64>)
 8006fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	20020000 	.word	0x20020000
 8006fe4:	00000400 	.word	0x00000400
 8006fe8:	20000710 	.word	0x20000710
 8006fec:	20000868 	.word	0x20000868

08006ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006ff4:	4b06      	ldr	r3, [pc, #24]	@ (8007010 <SystemInit+0x20>)
 8006ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffa:	4a05      	ldr	r2, [pc, #20]	@ (8007010 <SystemInit+0x20>)
 8006ffc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007004:	bf00      	nop
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	e000ed00 	.word	0xe000ed00

08007014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800704c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007018:	f7ff ffea 	bl	8006ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800701c:	480c      	ldr	r0, [pc, #48]	@ (8007050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800701e:	490d      	ldr	r1, [pc, #52]	@ (8007054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007020:	4a0d      	ldr	r2, [pc, #52]	@ (8007058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007024:	e002      	b.n	800702c <LoopCopyDataInit>

08007026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800702a:	3304      	adds	r3, #4

0800702c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800702c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800702e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007030:	d3f9      	bcc.n	8007026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007032:	4a0a      	ldr	r2, [pc, #40]	@ (800705c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007034:	4c0a      	ldr	r4, [pc, #40]	@ (8007060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007038:	e001      	b.n	800703e <LoopFillZerobss>

0800703a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800703a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800703c:	3204      	adds	r2, #4

0800703e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800703e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007040:	d3fb      	bcc.n	800703a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007042:	f005 fc3d 	bl	800c8c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007046:	f7fb fbdb 	bl	8002800 <main>
  bx  lr    
 800704a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800704c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007054:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8007058:	08011c10 	.word	0x08011c10
  ldr r2, =_sbss
 800705c:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8007060:	20000864 	.word	0x20000864

08007064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007064:	e7fe      	b.n	8007064 <ADC_IRQHandler>
	...

08007068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800706c:	4b0e      	ldr	r3, [pc, #56]	@ (80070a8 <HAL_Init+0x40>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a0d      	ldr	r2, [pc, #52]	@ (80070a8 <HAL_Init+0x40>)
 8007072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007078:	4b0b      	ldr	r3, [pc, #44]	@ (80070a8 <HAL_Init+0x40>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a0a      	ldr	r2, [pc, #40]	@ (80070a8 <HAL_Init+0x40>)
 800707e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007084:	4b08      	ldr	r3, [pc, #32]	@ (80070a8 <HAL_Init+0x40>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a07      	ldr	r2, [pc, #28]	@ (80070a8 <HAL_Init+0x40>)
 800708a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800708e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007090:	2003      	movs	r0, #3
 8007092:	f000 f94f 	bl	8007334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007096:	2000      	movs	r0, #0
 8007098:	f000 f808 	bl	80070ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800709c:	f7ff fc10 	bl	80068c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	40023c00 	.word	0x40023c00

080070ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80070b4:	4b12      	ldr	r3, [pc, #72]	@ (8007100 <HAL_InitTick+0x54>)
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	4b12      	ldr	r3, [pc, #72]	@ (8007104 <HAL_InitTick+0x58>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	4619      	mov	r1, r3
 80070be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80070c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80070c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 f967 	bl	800739e <HAL_SYSTICK_Config>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e00e      	b.n	80070f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b0f      	cmp	r3, #15
 80070de:	d80a      	bhi.n	80070f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80070e0:	2200      	movs	r2, #0
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	f04f 30ff 	mov.w	r0, #4294967295
 80070e8:	f000 f92f 	bl	800734a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80070ec:	4a06      	ldr	r2, [pc, #24]	@ (8007108 <HAL_InitTick+0x5c>)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e000      	b.n	80070f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	200000cc 	.word	0x200000cc
 8007104:	200000d4 	.word	0x200000d4
 8007108:	200000d0 	.word	0x200000d0

0800710c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007110:	4b06      	ldr	r3, [pc, #24]	@ (800712c <HAL_IncTick+0x20>)
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	4b06      	ldr	r3, [pc, #24]	@ (8007130 <HAL_IncTick+0x24>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4413      	add	r3, r2
 800711c:	4a04      	ldr	r2, [pc, #16]	@ (8007130 <HAL_IncTick+0x24>)
 800711e:	6013      	str	r3, [r2, #0]
}
 8007120:	bf00      	nop
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	200000d4 	.word	0x200000d4
 8007130:	20000714 	.word	0x20000714

08007134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007134:	b480      	push	{r7}
 8007136:	af00      	add	r7, sp, #0
  return uwTick;
 8007138:	4b03      	ldr	r3, [pc, #12]	@ (8007148 <HAL_GetTick+0x14>)
 800713a:	681b      	ldr	r3, [r3, #0]
}
 800713c:	4618      	mov	r0, r3
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	20000714 	.word	0x20000714

0800714c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007154:	f7ff ffee 	bl	8007134 <HAL_GetTick>
 8007158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007164:	d005      	beq.n	8007172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007166:	4b0a      	ldr	r3, [pc, #40]	@ (8007190 <HAL_Delay+0x44>)
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007172:	bf00      	nop
 8007174:	f7ff ffde 	bl	8007134 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	429a      	cmp	r2, r3
 8007182:	d8f7      	bhi.n	8007174 <HAL_Delay+0x28>
  {
  }
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	200000d4 	.word	0x200000d4

08007194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071a4:	4b0c      	ldr	r3, [pc, #48]	@ (80071d8 <__NVIC_SetPriorityGrouping+0x44>)
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80071b0:	4013      	ands	r3, r2
 80071b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80071bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80071c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80071c6:	4a04      	ldr	r2, [pc, #16]	@ (80071d8 <__NVIC_SetPriorityGrouping+0x44>)
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	60d3      	str	r3, [r2, #12]
}
 80071cc:	bf00      	nop
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	e000ed00 	.word	0xe000ed00

080071dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071e0:	4b04      	ldr	r3, [pc, #16]	@ (80071f4 <__NVIC_GetPriorityGrouping+0x18>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	0a1b      	lsrs	r3, r3, #8
 80071e6:	f003 0307 	and.w	r3, r3, #7
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	e000ed00 	.word	0xe000ed00

080071f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	4603      	mov	r3, r0
 8007200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007206:	2b00      	cmp	r3, #0
 8007208:	db0b      	blt.n	8007222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	f003 021f 	and.w	r2, r3, #31
 8007210:	4907      	ldr	r1, [pc, #28]	@ (8007230 <__NVIC_EnableIRQ+0x38>)
 8007212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007216:	095b      	lsrs	r3, r3, #5
 8007218:	2001      	movs	r0, #1
 800721a:	fa00 f202 	lsl.w	r2, r0, r2
 800721e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007222:	bf00      	nop
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	e000e100 	.word	0xe000e100

08007234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	6039      	str	r1, [r7, #0]
 800723e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007244:	2b00      	cmp	r3, #0
 8007246:	db0a      	blt.n	800725e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	b2da      	uxtb	r2, r3
 800724c:	490c      	ldr	r1, [pc, #48]	@ (8007280 <__NVIC_SetPriority+0x4c>)
 800724e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007252:	0112      	lsls	r2, r2, #4
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	440b      	add	r3, r1
 8007258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800725c:	e00a      	b.n	8007274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	b2da      	uxtb	r2, r3
 8007262:	4908      	ldr	r1, [pc, #32]	@ (8007284 <__NVIC_SetPriority+0x50>)
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	f003 030f 	and.w	r3, r3, #15
 800726a:	3b04      	subs	r3, #4
 800726c:	0112      	lsls	r2, r2, #4
 800726e:	b2d2      	uxtb	r2, r2
 8007270:	440b      	add	r3, r1
 8007272:	761a      	strb	r2, [r3, #24]
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	e000e100 	.word	0xe000e100
 8007284:	e000ed00 	.word	0xe000ed00

08007288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007288:	b480      	push	{r7}
 800728a:	b089      	sub	sp, #36	@ 0x24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	f1c3 0307 	rsb	r3, r3, #7
 80072a2:	2b04      	cmp	r3, #4
 80072a4:	bf28      	it	cs
 80072a6:	2304      	movcs	r3, #4
 80072a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	3304      	adds	r3, #4
 80072ae:	2b06      	cmp	r3, #6
 80072b0:	d902      	bls.n	80072b8 <NVIC_EncodePriority+0x30>
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	3b03      	subs	r3, #3
 80072b6:	e000      	b.n	80072ba <NVIC_EncodePriority+0x32>
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072bc:	f04f 32ff 	mov.w	r2, #4294967295
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	fa02 f303 	lsl.w	r3, r2, r3
 80072c6:	43da      	mvns	r2, r3
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	401a      	ands	r2, r3
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80072d0:	f04f 31ff 	mov.w	r1, #4294967295
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	fa01 f303 	lsl.w	r3, r1, r3
 80072da:	43d9      	mvns	r1, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072e0:	4313      	orrs	r3, r2
         );
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3724      	adds	r7, #36	@ 0x24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
	...

080072f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007300:	d301      	bcc.n	8007306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007302:	2301      	movs	r3, #1
 8007304:	e00f      	b.n	8007326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007306:	4a0a      	ldr	r2, [pc, #40]	@ (8007330 <SysTick_Config+0x40>)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3b01      	subs	r3, #1
 800730c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800730e:	210f      	movs	r1, #15
 8007310:	f04f 30ff 	mov.w	r0, #4294967295
 8007314:	f7ff ff8e 	bl	8007234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007318:	4b05      	ldr	r3, [pc, #20]	@ (8007330 <SysTick_Config+0x40>)
 800731a:	2200      	movs	r2, #0
 800731c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800731e:	4b04      	ldr	r3, [pc, #16]	@ (8007330 <SysTick_Config+0x40>)
 8007320:	2207      	movs	r2, #7
 8007322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	e000e010 	.word	0xe000e010

08007334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff ff29 	bl	8007194 <__NVIC_SetPriorityGrouping>
}
 8007342:	bf00      	nop
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800734a:	b580      	push	{r7, lr}
 800734c:	b086      	sub	sp, #24
 800734e:	af00      	add	r7, sp, #0
 8007350:	4603      	mov	r3, r0
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]
 8007356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007358:	2300      	movs	r3, #0
 800735a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800735c:	f7ff ff3e 	bl	80071dc <__NVIC_GetPriorityGrouping>
 8007360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	68b9      	ldr	r1, [r7, #8]
 8007366:	6978      	ldr	r0, [r7, #20]
 8007368:	f7ff ff8e 	bl	8007288 <NVIC_EncodePriority>
 800736c:	4602      	mov	r2, r0
 800736e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007372:	4611      	mov	r1, r2
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff ff5d 	bl	8007234 <__NVIC_SetPriority>
}
 800737a:	bf00      	nop
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	4603      	mov	r3, r0
 800738a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800738c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007390:	4618      	mov	r0, r3
 8007392:	f7ff ff31 	bl	80071f8 <__NVIC_EnableIRQ>
}
 8007396:	bf00      	nop
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b082      	sub	sp, #8
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7ff ffa2 	bl	80072f0 <SysTick_Config>
 80073ac:	4603      	mov	r3, r0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80073c4:	f7ff feb6 	bl	8007134 <HAL_GetTick>
 80073c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d008      	beq.n	80073e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2280      	movs	r2, #128	@ 0x80
 80073da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e052      	b.n	800748e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0216 	bic.w	r2, r2, #22
 80073f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	695a      	ldr	r2, [r3, #20]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007406:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740c:	2b00      	cmp	r3, #0
 800740e:	d103      	bne.n	8007418 <HAL_DMA_Abort+0x62>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007414:	2b00      	cmp	r3, #0
 8007416:	d007      	beq.n	8007428 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 0208 	bic.w	r2, r2, #8
 8007426:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0201 	bic.w	r2, r2, #1
 8007436:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007438:	e013      	b.n	8007462 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800743a:	f7ff fe7b 	bl	8007134 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b05      	cmp	r3, #5
 8007446:	d90c      	bls.n	8007462 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2220      	movs	r2, #32
 800744c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2203      	movs	r2, #3
 8007452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e015      	b.n	800748e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e4      	bne.n	800743a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007474:	223f      	movs	r2, #63	@ 0x3f
 8007476:	409a      	lsls	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d004      	beq.n	80074b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2280      	movs	r2, #128	@ 0x80
 80074ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e00c      	b.n	80074ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2205      	movs	r2, #5
 80074b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 0201 	bic.w	r2, r2, #1
 80074ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
	...

080074dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074dc:	b480      	push	{r7}
 80074de:	b089      	sub	sp, #36	@ 0x24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80074f2:	2300      	movs	r3, #0
 80074f4:	61fb      	str	r3, [r7, #28]
 80074f6:	e16b      	b.n	80077d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80074f8:	2201      	movs	r2, #1
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4013      	ands	r3, r2
 800750a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	429a      	cmp	r2, r3
 8007512:	f040 815a 	bne.w	80077ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	2b01      	cmp	r3, #1
 8007520:	d005      	beq.n	800752e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800752a:	2b02      	cmp	r3, #2
 800752c:	d130      	bne.n	8007590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	2203      	movs	r2, #3
 800753a:	fa02 f303 	lsl.w	r3, r2, r3
 800753e:	43db      	mvns	r3, r3
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	4013      	ands	r3, r2
 8007544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	68da      	ldr	r2, [r3, #12]
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	fa02 f303 	lsl.w	r3, r2, r3
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	4313      	orrs	r3, r2
 8007556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007564:	2201      	movs	r2, #1
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	fa02 f303 	lsl.w	r3, r2, r3
 800756c:	43db      	mvns	r3, r3
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	4013      	ands	r3, r2
 8007572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	091b      	lsrs	r3, r3, #4
 800757a:	f003 0201 	and.w	r2, r3, #1
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	fa02 f303 	lsl.w	r3, r2, r3
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	4313      	orrs	r3, r2
 8007588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f003 0303 	and.w	r3, r3, #3
 8007598:	2b03      	cmp	r3, #3
 800759a:	d017      	beq.n	80075cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	2203      	movs	r2, #3
 80075a8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ac:	43db      	mvns	r3, r3
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	4013      	ands	r3, r2
 80075b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	fa02 f303 	lsl.w	r3, r2, r3
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f003 0303 	and.w	r3, r3, #3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d123      	bne.n	8007620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	08da      	lsrs	r2, r3, #3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3208      	adds	r2, #8
 80075e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	f003 0307 	and.w	r3, r3, #7
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	220f      	movs	r2, #15
 80075f0:	fa02 f303 	lsl.w	r3, r2, r3
 80075f4:	43db      	mvns	r3, r3
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	4013      	ands	r3, r2
 80075fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	691a      	ldr	r2, [r3, #16]
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	f003 0307 	and.w	r3, r3, #7
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	fa02 f303 	lsl.w	r3, r2, r3
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	4313      	orrs	r3, r2
 8007610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	08da      	lsrs	r2, r3, #3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3208      	adds	r2, #8
 800761a:	69b9      	ldr	r1, [r7, #24]
 800761c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	2203      	movs	r2, #3
 800762c:	fa02 f303 	lsl.w	r3, r2, r3
 8007630:	43db      	mvns	r3, r3
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	4013      	ands	r3, r2
 8007636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f003 0203 	and.w	r2, r3, #3
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	fa02 f303 	lsl.w	r3, r2, r3
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	4313      	orrs	r3, r2
 800764c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 80b4 	beq.w	80077ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007662:	2300      	movs	r3, #0
 8007664:	60fb      	str	r3, [r7, #12]
 8007666:	4b60      	ldr	r3, [pc, #384]	@ (80077e8 <HAL_GPIO_Init+0x30c>)
 8007668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800766a:	4a5f      	ldr	r2, [pc, #380]	@ (80077e8 <HAL_GPIO_Init+0x30c>)
 800766c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007670:	6453      	str	r3, [r2, #68]	@ 0x44
 8007672:	4b5d      	ldr	r3, [pc, #372]	@ (80077e8 <HAL_GPIO_Init+0x30c>)
 8007674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800767e:	4a5b      	ldr	r2, [pc, #364]	@ (80077ec <HAL_GPIO_Init+0x310>)
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	089b      	lsrs	r3, r3, #2
 8007684:	3302      	adds	r3, #2
 8007686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800768a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	f003 0303 	and.w	r3, r3, #3
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	220f      	movs	r2, #15
 8007696:	fa02 f303 	lsl.w	r3, r2, r3
 800769a:	43db      	mvns	r3, r3
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	4013      	ands	r3, r2
 80076a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a52      	ldr	r2, [pc, #328]	@ (80077f0 <HAL_GPIO_Init+0x314>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d02b      	beq.n	8007702 <HAL_GPIO_Init+0x226>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a51      	ldr	r2, [pc, #324]	@ (80077f4 <HAL_GPIO_Init+0x318>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d025      	beq.n	80076fe <HAL_GPIO_Init+0x222>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a50      	ldr	r2, [pc, #320]	@ (80077f8 <HAL_GPIO_Init+0x31c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d01f      	beq.n	80076fa <HAL_GPIO_Init+0x21e>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a4f      	ldr	r2, [pc, #316]	@ (80077fc <HAL_GPIO_Init+0x320>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d019      	beq.n	80076f6 <HAL_GPIO_Init+0x21a>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a4e      	ldr	r2, [pc, #312]	@ (8007800 <HAL_GPIO_Init+0x324>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d013      	beq.n	80076f2 <HAL_GPIO_Init+0x216>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a4d      	ldr	r2, [pc, #308]	@ (8007804 <HAL_GPIO_Init+0x328>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d00d      	beq.n	80076ee <HAL_GPIO_Init+0x212>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a4c      	ldr	r2, [pc, #304]	@ (8007808 <HAL_GPIO_Init+0x32c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d007      	beq.n	80076ea <HAL_GPIO_Init+0x20e>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a4b      	ldr	r2, [pc, #300]	@ (800780c <HAL_GPIO_Init+0x330>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d101      	bne.n	80076e6 <HAL_GPIO_Init+0x20a>
 80076e2:	2307      	movs	r3, #7
 80076e4:	e00e      	b.n	8007704 <HAL_GPIO_Init+0x228>
 80076e6:	2308      	movs	r3, #8
 80076e8:	e00c      	b.n	8007704 <HAL_GPIO_Init+0x228>
 80076ea:	2306      	movs	r3, #6
 80076ec:	e00a      	b.n	8007704 <HAL_GPIO_Init+0x228>
 80076ee:	2305      	movs	r3, #5
 80076f0:	e008      	b.n	8007704 <HAL_GPIO_Init+0x228>
 80076f2:	2304      	movs	r3, #4
 80076f4:	e006      	b.n	8007704 <HAL_GPIO_Init+0x228>
 80076f6:	2303      	movs	r3, #3
 80076f8:	e004      	b.n	8007704 <HAL_GPIO_Init+0x228>
 80076fa:	2302      	movs	r3, #2
 80076fc:	e002      	b.n	8007704 <HAL_GPIO_Init+0x228>
 80076fe:	2301      	movs	r3, #1
 8007700:	e000      	b.n	8007704 <HAL_GPIO_Init+0x228>
 8007702:	2300      	movs	r3, #0
 8007704:	69fa      	ldr	r2, [r7, #28]
 8007706:	f002 0203 	and.w	r2, r2, #3
 800770a:	0092      	lsls	r2, r2, #2
 800770c:	4093      	lsls	r3, r2
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	4313      	orrs	r3, r2
 8007712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007714:	4935      	ldr	r1, [pc, #212]	@ (80077ec <HAL_GPIO_Init+0x310>)
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	089b      	lsrs	r3, r3, #2
 800771a:	3302      	adds	r3, #2
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007722:	4b3b      	ldr	r3, [pc, #236]	@ (8007810 <HAL_GPIO_Init+0x334>)
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	43db      	mvns	r3, r3
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	4013      	ands	r3, r2
 8007730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007746:	4a32      	ldr	r2, [pc, #200]	@ (8007810 <HAL_GPIO_Init+0x334>)
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800774c:	4b30      	ldr	r3, [pc, #192]	@ (8007810 <HAL_GPIO_Init+0x334>)
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	43db      	mvns	r3, r3
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	4013      	ands	r3, r2
 800775a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	4313      	orrs	r3, r2
 800776e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007770:	4a27      	ldr	r2, [pc, #156]	@ (8007810 <HAL_GPIO_Init+0x334>)
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007776:	4b26      	ldr	r3, [pc, #152]	@ (8007810 <HAL_GPIO_Init+0x334>)
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	43db      	mvns	r3, r3
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	4013      	ands	r3, r2
 8007784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	4313      	orrs	r3, r2
 8007798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800779a:	4a1d      	ldr	r2, [pc, #116]	@ (8007810 <HAL_GPIO_Init+0x334>)
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80077a0:	4b1b      	ldr	r3, [pc, #108]	@ (8007810 <HAL_GPIO_Init+0x334>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	43db      	mvns	r3, r3
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	4013      	ands	r3, r2
 80077ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80077c4:	4a12      	ldr	r2, [pc, #72]	@ (8007810 <HAL_GPIO_Init+0x334>)
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	3301      	adds	r3, #1
 80077ce:	61fb      	str	r3, [r7, #28]
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	2b0f      	cmp	r3, #15
 80077d4:	f67f ae90 	bls.w	80074f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80077d8:	bf00      	nop
 80077da:	bf00      	nop
 80077dc:	3724      	adds	r7, #36	@ 0x24
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	40023800 	.word	0x40023800
 80077ec:	40013800 	.word	0x40013800
 80077f0:	40020000 	.word	0x40020000
 80077f4:	40020400 	.word	0x40020400
 80077f8:	40020800 	.word	0x40020800
 80077fc:	40020c00 	.word	0x40020c00
 8007800:	40021000 	.word	0x40021000
 8007804:	40021400 	.word	0x40021400
 8007808:	40021800 	.word	0x40021800
 800780c:	40021c00 	.word	0x40021c00
 8007810:	40013c00 	.word	0x40013c00

08007814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	887b      	ldrh	r3, [r7, #2]
 8007826:	4013      	ands	r3, r2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800782c:	2301      	movs	r3, #1
 800782e:	73fb      	strb	r3, [r7, #15]
 8007830:	e001      	b.n	8007836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007836:	7bfb      	ldrb	r3, [r7, #15]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	807b      	strh	r3, [r7, #2]
 8007850:	4613      	mov	r3, r2
 8007852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007854:	787b      	ldrb	r3, [r7, #1]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800785a:	887a      	ldrh	r2, [r7, #2]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007860:	e003      	b.n	800786a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007862:	887b      	ldrh	r3, [r7, #2]
 8007864:	041a      	lsls	r2, r3, #16
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	619a      	str	r2, [r3, #24]
}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
	...

08007878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	4603      	mov	r3, r0
 8007880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007882:	4b08      	ldr	r3, [pc, #32]	@ (80078a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007884:	695a      	ldr	r2, [r3, #20]
 8007886:	88fb      	ldrh	r3, [r7, #6]
 8007888:	4013      	ands	r3, r2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d006      	beq.n	800789c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800788e:	4a05      	ldr	r2, [pc, #20]	@ (80078a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007890:	88fb      	ldrh	r3, [r7, #6]
 8007892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007894:	88fb      	ldrh	r3, [r7, #6]
 8007896:	4618      	mov	r0, r3
 8007898:	f7fa fe30 	bl	80024fc <HAL_GPIO_EXTI_Callback>
  }
}
 800789c:	bf00      	nop
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	40013c00 	.word	0x40013c00

080078a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e12b      	b.n	8007b12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7ff f81e 	bl	8006910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2224      	movs	r2, #36	@ 0x24
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0201 	bic.w	r2, r2, #1
 80078ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800790a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800790c:	f001 f8da 	bl	8008ac4 <HAL_RCC_GetPCLK1Freq>
 8007910:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	4a81      	ldr	r2, [pc, #516]	@ (8007b1c <HAL_I2C_Init+0x274>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d807      	bhi.n	800792c <HAL_I2C_Init+0x84>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4a80      	ldr	r2, [pc, #512]	@ (8007b20 <HAL_I2C_Init+0x278>)
 8007920:	4293      	cmp	r3, r2
 8007922:	bf94      	ite	ls
 8007924:	2301      	movls	r3, #1
 8007926:	2300      	movhi	r3, #0
 8007928:	b2db      	uxtb	r3, r3
 800792a:	e006      	b.n	800793a <HAL_I2C_Init+0x92>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4a7d      	ldr	r2, [pc, #500]	@ (8007b24 <HAL_I2C_Init+0x27c>)
 8007930:	4293      	cmp	r3, r2
 8007932:	bf94      	ite	ls
 8007934:	2301      	movls	r3, #1
 8007936:	2300      	movhi	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e0e7      	b.n	8007b12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4a78      	ldr	r2, [pc, #480]	@ (8007b28 <HAL_I2C_Init+0x280>)
 8007946:	fba2 2303 	umull	r2, r3, r2, r3
 800794a:	0c9b      	lsrs	r3, r3, #18
 800794c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	430a      	orrs	r2, r1
 8007960:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	4a6a      	ldr	r2, [pc, #424]	@ (8007b1c <HAL_I2C_Init+0x274>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d802      	bhi.n	800797c <HAL_I2C_Init+0xd4>
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	3301      	adds	r3, #1
 800797a:	e009      	b.n	8007990 <HAL_I2C_Init+0xe8>
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007982:	fb02 f303 	mul.w	r3, r2, r3
 8007986:	4a69      	ldr	r2, [pc, #420]	@ (8007b2c <HAL_I2C_Init+0x284>)
 8007988:	fba2 2303 	umull	r2, r3, r2, r3
 800798c:	099b      	lsrs	r3, r3, #6
 800798e:	3301      	adds	r3, #1
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6812      	ldr	r2, [r2, #0]
 8007994:	430b      	orrs	r3, r1
 8007996:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80079a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	495c      	ldr	r1, [pc, #368]	@ (8007b1c <HAL_I2C_Init+0x274>)
 80079ac:	428b      	cmp	r3, r1
 80079ae:	d819      	bhi.n	80079e4 <HAL_I2C_Init+0x13c>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	1e59      	subs	r1, r3, #1
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80079be:	1c59      	adds	r1, r3, #1
 80079c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80079c4:	400b      	ands	r3, r1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00a      	beq.n	80079e0 <HAL_I2C_Init+0x138>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	1e59      	subs	r1, r3, #1
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80079d8:	3301      	adds	r3, #1
 80079da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079de:	e051      	b.n	8007a84 <HAL_I2C_Init+0x1dc>
 80079e0:	2304      	movs	r3, #4
 80079e2:	e04f      	b.n	8007a84 <HAL_I2C_Init+0x1dc>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d111      	bne.n	8007a10 <HAL_I2C_Init+0x168>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	1e58      	subs	r0, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6859      	ldr	r1, [r3, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	440b      	add	r3, r1
 80079fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80079fe:	3301      	adds	r3, #1
 8007a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	bf0c      	ite	eq
 8007a08:	2301      	moveq	r3, #1
 8007a0a:	2300      	movne	r3, #0
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	e012      	b.n	8007a36 <HAL_I2C_Init+0x18e>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	1e58      	subs	r0, r3, #1
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6859      	ldr	r1, [r3, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	0099      	lsls	r1, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a26:	3301      	adds	r3, #1
 8007a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bf0c      	ite	eq
 8007a30:	2301      	moveq	r3, #1
 8007a32:	2300      	movne	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <HAL_I2C_Init+0x196>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e022      	b.n	8007a84 <HAL_I2C_Init+0x1dc>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10e      	bne.n	8007a64 <HAL_I2C_Init+0x1bc>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	1e58      	subs	r0, r3, #1
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6859      	ldr	r1, [r3, #4]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	440b      	add	r3, r1
 8007a54:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a58:	3301      	adds	r3, #1
 8007a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a62:	e00f      	b.n	8007a84 <HAL_I2C_Init+0x1dc>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	1e58      	subs	r0, r3, #1
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6859      	ldr	r1, [r3, #4]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	0099      	lsls	r1, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	6809      	ldr	r1, [r1, #0]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	69da      	ldr	r2, [r3, #28]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007ab2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6911      	ldr	r1, [r2, #16]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	68d2      	ldr	r2, [r2, #12]
 8007abe:	4311      	orrs	r1, r2
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	6812      	ldr	r2, [r2, #0]
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	695a      	ldr	r2, [r3, #20]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	431a      	orrs	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0201 	orr.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	000186a0 	.word	0x000186a0
 8007b20:	001e847f 	.word	0x001e847f
 8007b24:	003d08ff 	.word	0x003d08ff
 8007b28:	431bde83 	.word	0x431bde83
 8007b2c:	10624dd3 	.word	0x10624dd3

08007b30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	607a      	str	r2, [r7, #4]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	817b      	strh	r3, [r7, #10]
 8007b40:	4613      	mov	r3, r2
 8007b42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b44:	f7ff faf6 	bl	8007134 <HAL_GetTick>
 8007b48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	f040 80e0 	bne.w	8007d18 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	2319      	movs	r3, #25
 8007b5e:	2201      	movs	r2, #1
 8007b60:	4970      	ldr	r1, [pc, #448]	@ (8007d24 <HAL_I2C_Master_Transmit+0x1f4>)
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f964 	bl	8007e30 <I2C_WaitOnFlagUntilTimeout>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007b6e:	2302      	movs	r3, #2
 8007b70:	e0d3      	b.n	8007d1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d101      	bne.n	8007b80 <HAL_I2C_Master_Transmit+0x50>
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	e0cc      	b.n	8007d1a <HAL_I2C_Master_Transmit+0x1ea>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d007      	beq.n	8007ba6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f042 0201 	orr.w	r2, r2, #1
 8007ba4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007bb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2221      	movs	r2, #33	@ 0x21
 8007bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2210      	movs	r2, #16
 8007bc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	893a      	ldrh	r2, [r7, #8]
 8007bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	4a50      	ldr	r2, [pc, #320]	@ (8007d28 <HAL_I2C_Master_Transmit+0x1f8>)
 8007be6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007be8:	8979      	ldrh	r1, [r7, #10]
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	6a3a      	ldr	r2, [r7, #32]
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 f89c 	bl	8007d2c <I2C_MasterRequestWrite>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e08d      	b.n	8007d1a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bfe:	2300      	movs	r3, #0
 8007c00:	613b      	str	r3, [r7, #16]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	613b      	str	r3, [r7, #16]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	613b      	str	r3, [r7, #16]
 8007c12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007c14:	e066      	b.n	8007ce4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	6a39      	ldr	r1, [r7, #32]
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 fa22 	bl	8008064 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00d      	beq.n	8007c42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d107      	bne.n	8007c3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e06b      	b.n	8007d1a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c46:	781a      	ldrb	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c52:	1c5a      	adds	r2, r3, #1
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	f003 0304 	and.w	r3, r3, #4
 8007c7c:	2b04      	cmp	r3, #4
 8007c7e:	d11b      	bne.n	8007cb8 <HAL_I2C_Master_Transmit+0x188>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d017      	beq.n	8007cb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8c:	781a      	ldrb	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	6a39      	ldr	r1, [r7, #32]
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fa19 	bl	80080f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00d      	beq.n	8007ce4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ccc:	2b04      	cmp	r3, #4
 8007cce:	d107      	bne.n	8007ce0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e01a      	b.n	8007d1a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d194      	bne.n	8007c16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	e000      	b.n	8007d1a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007d18:	2302      	movs	r3, #2
  }
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	00100002 	.word	0x00100002
 8007d28:	ffff0000 	.word	0xffff0000

08007d2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	607a      	str	r2, [r7, #4]
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d006      	beq.n	8007d56 <I2C_MasterRequestWrite+0x2a>
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d003      	beq.n	8007d56 <I2C_MasterRequestWrite+0x2a>
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007d54:	d108      	bne.n	8007d68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	e00b      	b.n	8007d80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6c:	2b12      	cmp	r3, #18
 8007d6e:	d107      	bne.n	8007d80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 f84f 	bl	8007e30 <I2C_WaitOnFlagUntilTimeout>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00d      	beq.n	8007db4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007da6:	d103      	bne.n	8007db0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e035      	b.n	8007e20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dbc:	d108      	bne.n	8007dd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007dbe:	897b      	ldrh	r3, [r7, #10]
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007dcc:	611a      	str	r2, [r3, #16]
 8007dce:	e01b      	b.n	8007e08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007dd0:	897b      	ldrh	r3, [r7, #10]
 8007dd2:	11db      	asrs	r3, r3, #7
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	f003 0306 	and.w	r3, r3, #6
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	f063 030f 	orn	r3, r3, #15
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	490e      	ldr	r1, [pc, #56]	@ (8007e28 <I2C_MasterRequestWrite+0xfc>)
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 f898 	bl	8007f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e010      	b.n	8007e20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007dfe:	897b      	ldrh	r3, [r7, #10]
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	4907      	ldr	r1, [pc, #28]	@ (8007e2c <I2C_MasterRequestWrite+0x100>)
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 f888 	bl	8007f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e000      	b.n	8007e20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	00010008 	.word	0x00010008
 8007e2c:	00010002 	.word	0x00010002

08007e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e40:	e048      	b.n	8007ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e48:	d044      	beq.n	8007ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e4a:	f7ff f973 	bl	8007134 <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d302      	bcc.n	8007e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d139      	bne.n	8007ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	0c1b      	lsrs	r3, r3, #16
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d10d      	bne.n	8007e86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	43da      	mvns	r2, r3
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	4013      	ands	r3, r2
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bf0c      	ite	eq
 8007e7c:	2301      	moveq	r3, #1
 8007e7e:	2300      	movne	r3, #0
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	461a      	mov	r2, r3
 8007e84:	e00c      	b.n	8007ea0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	43da      	mvns	r2, r3
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	4013      	ands	r3, r2
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	bf0c      	ite	eq
 8007e98:	2301      	moveq	r3, #1
 8007e9a:	2300      	movne	r3, #0
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	79fb      	ldrb	r3, [r7, #7]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d116      	bne.n	8007ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2220      	movs	r2, #32
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec0:	f043 0220 	orr.w	r2, r3, #32
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e023      	b.n	8007f1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	0c1b      	lsrs	r3, r3, #16
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d10d      	bne.n	8007efa <I2C_WaitOnFlagUntilTimeout+0xca>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	43da      	mvns	r2, r3
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	4013      	ands	r3, r2
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	bf0c      	ite	eq
 8007ef0:	2301      	moveq	r3, #1
 8007ef2:	2300      	movne	r3, #0
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	e00c      	b.n	8007f14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	43da      	mvns	r2, r3
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	4013      	ands	r3, r2
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bf0c      	ite	eq
 8007f0c:	2301      	moveq	r3, #1
 8007f0e:	2300      	movne	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	461a      	mov	r2, r3
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d093      	beq.n	8007e42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f32:	e071      	b.n	8008018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f42:	d123      	bne.n	8007f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007f5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f78:	f043 0204 	orr.w	r2, r3, #4
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e067      	b.n	800805c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f92:	d041      	beq.n	8008018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f94:	f7ff f8ce 	bl	8007134 <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d302      	bcc.n	8007faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d136      	bne.n	8008018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	0c1b      	lsrs	r3, r3, #16
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d10c      	bne.n	8007fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	43da      	mvns	r2, r3
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	bf14      	ite	ne
 8007fc6:	2301      	movne	r3, #1
 8007fc8:	2300      	moveq	r3, #0
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	e00b      	b.n	8007fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	43da      	mvns	r2, r3
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	bf14      	ite	ne
 8007fe0:	2301      	movne	r3, #1
 8007fe2:	2300      	moveq	r3, #0
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d016      	beq.n	8008018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008004:	f043 0220 	orr.w	r2, r3, #32
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e021      	b.n	800805c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	0c1b      	lsrs	r3, r3, #16
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b01      	cmp	r3, #1
 8008020:	d10c      	bne.n	800803c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	43da      	mvns	r2, r3
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	4013      	ands	r3, r2
 800802e:	b29b      	uxth	r3, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	bf14      	ite	ne
 8008034:	2301      	movne	r3, #1
 8008036:	2300      	moveq	r3, #0
 8008038:	b2db      	uxtb	r3, r3
 800803a:	e00b      	b.n	8008054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	43da      	mvns	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	4013      	ands	r3, r2
 8008048:	b29b      	uxth	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	bf14      	ite	ne
 800804e:	2301      	movne	r3, #1
 8008050:	2300      	moveq	r3, #0
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	f47f af6d 	bne.w	8007f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008070:	e034      	b.n	80080dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 f886 	bl	8008184 <I2C_IsAcknowledgeFailed>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e034      	b.n	80080ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008088:	d028      	beq.n	80080dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800808a:	f7ff f853 	bl	8007134 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	429a      	cmp	r2, r3
 8008098:	d302      	bcc.n	80080a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d11d      	bne.n	80080dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080aa:	2b80      	cmp	r3, #128	@ 0x80
 80080ac:	d016      	beq.n	80080dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c8:	f043 0220 	orr.w	r2, r3, #32
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e007      	b.n	80080ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080e6:	2b80      	cmp	r3, #128	@ 0x80
 80080e8:	d1c3      	bne.n	8008072 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008100:	e034      	b.n	800816c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 f83e 	bl	8008184 <I2C_IsAcknowledgeFailed>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e034      	b.n	800817c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008118:	d028      	beq.n	800816c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800811a:	f7ff f80b 	bl	8007134 <HAL_GetTick>
 800811e:	4602      	mov	r2, r0
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	429a      	cmp	r2, r3
 8008128:	d302      	bcc.n	8008130 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d11d      	bne.n	800816c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	f003 0304 	and.w	r3, r3, #4
 800813a:	2b04      	cmp	r3, #4
 800813c:	d016      	beq.n	800816c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2220      	movs	r2, #32
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008158:	f043 0220 	orr.w	r2, r3, #32
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e007      	b.n	800817c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	f003 0304 	and.w	r3, r3, #4
 8008176:	2b04      	cmp	r3, #4
 8008178:	d1c3      	bne.n	8008102 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800819a:	d11b      	bne.n	80081d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80081a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c0:	f043 0204 	orr.w	r2, r3, #4
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e000      	b.n	80081d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
	...

080081e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e267      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d075      	beq.n	80082ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008202:	4b88      	ldr	r3, [pc, #544]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f003 030c 	and.w	r3, r3, #12
 800820a:	2b04      	cmp	r3, #4
 800820c:	d00c      	beq.n	8008228 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800820e:	4b85      	ldr	r3, [pc, #532]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008216:	2b08      	cmp	r3, #8
 8008218:	d112      	bne.n	8008240 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800821a:	4b82      	ldr	r3, [pc, #520]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008222:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008226:	d10b      	bne.n	8008240 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008228:	4b7e      	ldr	r3, [pc, #504]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d05b      	beq.n	80082ec <HAL_RCC_OscConfig+0x108>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d157      	bne.n	80082ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e242      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008248:	d106      	bne.n	8008258 <HAL_RCC_OscConfig+0x74>
 800824a:	4b76      	ldr	r3, [pc, #472]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a75      	ldr	r2, [pc, #468]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008254:	6013      	str	r3, [r2, #0]
 8008256:	e01d      	b.n	8008294 <HAL_RCC_OscConfig+0xb0>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008260:	d10c      	bne.n	800827c <HAL_RCC_OscConfig+0x98>
 8008262:	4b70      	ldr	r3, [pc, #448]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a6f      	ldr	r2, [pc, #444]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	4b6d      	ldr	r3, [pc, #436]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a6c      	ldr	r2, [pc, #432]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008278:	6013      	str	r3, [r2, #0]
 800827a:	e00b      	b.n	8008294 <HAL_RCC_OscConfig+0xb0>
 800827c:	4b69      	ldr	r3, [pc, #420]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a68      	ldr	r2, [pc, #416]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008286:	6013      	str	r3, [r2, #0]
 8008288:	4b66      	ldr	r3, [pc, #408]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a65      	ldr	r2, [pc, #404]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 800828e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d013      	beq.n	80082c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800829c:	f7fe ff4a 	bl	8007134 <HAL_GetTick>
 80082a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082a2:	e008      	b.n	80082b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082a4:	f7fe ff46 	bl	8007134 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b64      	cmp	r3, #100	@ 0x64
 80082b0:	d901      	bls.n	80082b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e207      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082b6:	4b5b      	ldr	r3, [pc, #364]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d0f0      	beq.n	80082a4 <HAL_RCC_OscConfig+0xc0>
 80082c2:	e014      	b.n	80082ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082c4:	f7fe ff36 	bl	8007134 <HAL_GetTick>
 80082c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082ca:	e008      	b.n	80082de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082cc:	f7fe ff32 	bl	8007134 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	2b64      	cmp	r3, #100	@ 0x64
 80082d8:	d901      	bls.n	80082de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e1f3      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082de:	4b51      	ldr	r3, [pc, #324]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1f0      	bne.n	80082cc <HAL_RCC_OscConfig+0xe8>
 80082ea:	e000      	b.n	80082ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d063      	beq.n	80083c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80082fa:	4b4a      	ldr	r3, [pc, #296]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f003 030c 	and.w	r3, r3, #12
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00b      	beq.n	800831e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008306:	4b47      	ldr	r3, [pc, #284]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800830e:	2b08      	cmp	r3, #8
 8008310:	d11c      	bne.n	800834c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008312:	4b44      	ldr	r3, [pc, #272]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d116      	bne.n	800834c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800831e:	4b41      	ldr	r3, [pc, #260]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d005      	beq.n	8008336 <HAL_RCC_OscConfig+0x152>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d001      	beq.n	8008336 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e1c7      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008336:	4b3b      	ldr	r3, [pc, #236]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	4937      	ldr	r1, [pc, #220]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008346:	4313      	orrs	r3, r2
 8008348:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800834a:	e03a      	b.n	80083c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d020      	beq.n	8008396 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008354:	4b34      	ldr	r3, [pc, #208]	@ (8008428 <HAL_RCC_OscConfig+0x244>)
 8008356:	2201      	movs	r2, #1
 8008358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800835a:	f7fe feeb 	bl	8007134 <HAL_GetTick>
 800835e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008360:	e008      	b.n	8008374 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008362:	f7fe fee7 	bl	8007134 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	2b02      	cmp	r3, #2
 800836e:	d901      	bls.n	8008374 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e1a8      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008374:	4b2b      	ldr	r3, [pc, #172]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0302 	and.w	r3, r3, #2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0f0      	beq.n	8008362 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008380:	4b28      	ldr	r3, [pc, #160]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	00db      	lsls	r3, r3, #3
 800838e:	4925      	ldr	r1, [pc, #148]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 8008390:	4313      	orrs	r3, r2
 8008392:	600b      	str	r3, [r1, #0]
 8008394:	e015      	b.n	80083c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008396:	4b24      	ldr	r3, [pc, #144]	@ (8008428 <HAL_RCC_OscConfig+0x244>)
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839c:	f7fe feca 	bl	8007134 <HAL_GetTick>
 80083a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083a2:	e008      	b.n	80083b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083a4:	f7fe fec6 	bl	8007134 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d901      	bls.n	80083b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e187      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1f0      	bne.n	80083a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d036      	beq.n	800843c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d016      	beq.n	8008404 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083d6:	4b15      	ldr	r3, [pc, #84]	@ (800842c <HAL_RCC_OscConfig+0x248>)
 80083d8:	2201      	movs	r2, #1
 80083da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083dc:	f7fe feaa 	bl	8007134 <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083e2:	e008      	b.n	80083f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083e4:	f7fe fea6 	bl	8007134 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d901      	bls.n	80083f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e167      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008424 <HAL_RCC_OscConfig+0x240>)
 80083f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083fa:	f003 0302 	and.w	r3, r3, #2
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d0f0      	beq.n	80083e4 <HAL_RCC_OscConfig+0x200>
 8008402:	e01b      	b.n	800843c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008404:	4b09      	ldr	r3, [pc, #36]	@ (800842c <HAL_RCC_OscConfig+0x248>)
 8008406:	2200      	movs	r2, #0
 8008408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800840a:	f7fe fe93 	bl	8007134 <HAL_GetTick>
 800840e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008410:	e00e      	b.n	8008430 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008412:	f7fe fe8f 	bl	8007134 <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	2b02      	cmp	r3, #2
 800841e:	d907      	bls.n	8008430 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e150      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
 8008424:	40023800 	.word	0x40023800
 8008428:	42470000 	.word	0x42470000
 800842c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008430:	4b88      	ldr	r3, [pc, #544]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 8008432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1ea      	bne.n	8008412 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 8097 	beq.w	8008578 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800844a:	2300      	movs	r3, #0
 800844c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800844e:	4b81      	ldr	r3, [pc, #516]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 8008450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10f      	bne.n	800847a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800845a:	2300      	movs	r3, #0
 800845c:	60bb      	str	r3, [r7, #8]
 800845e:	4b7d      	ldr	r3, [pc, #500]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 8008460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008462:	4a7c      	ldr	r2, [pc, #496]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 8008464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008468:	6413      	str	r3, [r2, #64]	@ 0x40
 800846a:	4b7a      	ldr	r3, [pc, #488]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 800846c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008472:	60bb      	str	r3, [r7, #8]
 8008474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008476:	2301      	movs	r3, #1
 8008478:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800847a:	4b77      	ldr	r3, [pc, #476]	@ (8008658 <HAL_RCC_OscConfig+0x474>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008482:	2b00      	cmp	r3, #0
 8008484:	d118      	bne.n	80084b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008486:	4b74      	ldr	r3, [pc, #464]	@ (8008658 <HAL_RCC_OscConfig+0x474>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a73      	ldr	r2, [pc, #460]	@ (8008658 <HAL_RCC_OscConfig+0x474>)
 800848c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008492:	f7fe fe4f 	bl	8007134 <HAL_GetTick>
 8008496:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008498:	e008      	b.n	80084ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800849a:	f7fe fe4b 	bl	8007134 <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d901      	bls.n	80084ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e10c      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084ac:	4b6a      	ldr	r3, [pc, #424]	@ (8008658 <HAL_RCC_OscConfig+0x474>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d0f0      	beq.n	800849a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d106      	bne.n	80084ce <HAL_RCC_OscConfig+0x2ea>
 80084c0:	4b64      	ldr	r3, [pc, #400]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80084c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084c4:	4a63      	ldr	r2, [pc, #396]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80084c6:	f043 0301 	orr.w	r3, r3, #1
 80084ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80084cc:	e01c      	b.n	8008508 <HAL_RCC_OscConfig+0x324>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	2b05      	cmp	r3, #5
 80084d4:	d10c      	bne.n	80084f0 <HAL_RCC_OscConfig+0x30c>
 80084d6:	4b5f      	ldr	r3, [pc, #380]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80084d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084da:	4a5e      	ldr	r2, [pc, #376]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80084dc:	f043 0304 	orr.w	r3, r3, #4
 80084e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80084e2:	4b5c      	ldr	r3, [pc, #368]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80084e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084e6:	4a5b      	ldr	r2, [pc, #364]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80084e8:	f043 0301 	orr.w	r3, r3, #1
 80084ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80084ee:	e00b      	b.n	8008508 <HAL_RCC_OscConfig+0x324>
 80084f0:	4b58      	ldr	r3, [pc, #352]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80084f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084f4:	4a57      	ldr	r2, [pc, #348]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80084f6:	f023 0301 	bic.w	r3, r3, #1
 80084fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80084fc:	4b55      	ldr	r3, [pc, #340]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80084fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008500:	4a54      	ldr	r2, [pc, #336]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 8008502:	f023 0304 	bic.w	r3, r3, #4
 8008506:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d015      	beq.n	800853c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008510:	f7fe fe10 	bl	8007134 <HAL_GetTick>
 8008514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008516:	e00a      	b.n	800852e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008518:	f7fe fe0c 	bl	8007134 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008526:	4293      	cmp	r3, r2
 8008528:	d901      	bls.n	800852e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e0cb      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800852e:	4b49      	ldr	r3, [pc, #292]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 8008530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0ee      	beq.n	8008518 <HAL_RCC_OscConfig+0x334>
 800853a:	e014      	b.n	8008566 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800853c:	f7fe fdfa 	bl	8007134 <HAL_GetTick>
 8008540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008542:	e00a      	b.n	800855a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008544:	f7fe fdf6 	bl	8007134 <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008552:	4293      	cmp	r3, r2
 8008554:	d901      	bls.n	800855a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e0b5      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800855a:	4b3e      	ldr	r3, [pc, #248]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 800855c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1ee      	bne.n	8008544 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008566:	7dfb      	ldrb	r3, [r7, #23]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d105      	bne.n	8008578 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800856c:	4b39      	ldr	r3, [pc, #228]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 800856e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008570:	4a38      	ldr	r2, [pc, #224]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 8008572:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008576:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 80a1 	beq.w	80086c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008582:	4b34      	ldr	r3, [pc, #208]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f003 030c 	and.w	r3, r3, #12
 800858a:	2b08      	cmp	r3, #8
 800858c:	d05c      	beq.n	8008648 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d141      	bne.n	800861a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008596:	4b31      	ldr	r3, [pc, #196]	@ (800865c <HAL_RCC_OscConfig+0x478>)
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800859c:	f7fe fdca 	bl	8007134 <HAL_GetTick>
 80085a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085a2:	e008      	b.n	80085b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085a4:	f7fe fdc6 	bl	8007134 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d901      	bls.n	80085b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e087      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085b6:	4b27      	ldr	r3, [pc, #156]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1f0      	bne.n	80085a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	69da      	ldr	r2, [r3, #28]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	431a      	orrs	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d0:	019b      	lsls	r3, r3, #6
 80085d2:	431a      	orrs	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085d8:	085b      	lsrs	r3, r3, #1
 80085da:	3b01      	subs	r3, #1
 80085dc:	041b      	lsls	r3, r3, #16
 80085de:	431a      	orrs	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e4:	061b      	lsls	r3, r3, #24
 80085e6:	491b      	ldr	r1, [pc, #108]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085ec:	4b1b      	ldr	r3, [pc, #108]	@ (800865c <HAL_RCC_OscConfig+0x478>)
 80085ee:	2201      	movs	r2, #1
 80085f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085f2:	f7fe fd9f 	bl	8007134 <HAL_GetTick>
 80085f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085f8:	e008      	b.n	800860c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085fa:	f7fe fd9b 	bl	8007134 <HAL_GetTick>
 80085fe:	4602      	mov	r2, r0
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	2b02      	cmp	r3, #2
 8008606:	d901      	bls.n	800860c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e05c      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800860c:	4b11      	ldr	r3, [pc, #68]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d0f0      	beq.n	80085fa <HAL_RCC_OscConfig+0x416>
 8008618:	e054      	b.n	80086c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800861a:	4b10      	ldr	r3, [pc, #64]	@ (800865c <HAL_RCC_OscConfig+0x478>)
 800861c:	2200      	movs	r2, #0
 800861e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008620:	f7fe fd88 	bl	8007134 <HAL_GetTick>
 8008624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008626:	e008      	b.n	800863a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008628:	f7fe fd84 	bl	8007134 <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	2b02      	cmp	r3, #2
 8008634:	d901      	bls.n	800863a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e045      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800863a:	4b06      	ldr	r3, [pc, #24]	@ (8008654 <HAL_RCC_OscConfig+0x470>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1f0      	bne.n	8008628 <HAL_RCC_OscConfig+0x444>
 8008646:	e03d      	b.n	80086c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d107      	bne.n	8008660 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e038      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
 8008654:	40023800 	.word	0x40023800
 8008658:	40007000 	.word	0x40007000
 800865c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008660:	4b1b      	ldr	r3, [pc, #108]	@ (80086d0 <HAL_RCC_OscConfig+0x4ec>)
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d028      	beq.n	80086c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008678:	429a      	cmp	r2, r3
 800867a:	d121      	bne.n	80086c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008686:	429a      	cmp	r2, r3
 8008688:	d11a      	bne.n	80086c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008690:	4013      	ands	r3, r2
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008696:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008698:	4293      	cmp	r3, r2
 800869a:	d111      	bne.n	80086c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a6:	085b      	lsrs	r3, r3, #1
 80086a8:	3b01      	subs	r3, #1
 80086aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d107      	bne.n	80086c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086bc:	429a      	cmp	r2, r3
 80086be:	d001      	beq.n	80086c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e000      	b.n	80086c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	40023800 	.word	0x40023800

080086d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e0cc      	b.n	8008882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80086e8:	4b68      	ldr	r3, [pc, #416]	@ (800888c <HAL_RCC_ClockConfig+0x1b8>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0307 	and.w	r3, r3, #7
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d90c      	bls.n	8008710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086f6:	4b65      	ldr	r3, [pc, #404]	@ (800888c <HAL_RCC_ClockConfig+0x1b8>)
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	b2d2      	uxtb	r2, r2
 80086fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086fe:	4b63      	ldr	r3, [pc, #396]	@ (800888c <HAL_RCC_ClockConfig+0x1b8>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 0307 	and.w	r3, r3, #7
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	429a      	cmp	r2, r3
 800870a:	d001      	beq.n	8008710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e0b8      	b.n	8008882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0302 	and.w	r3, r3, #2
 8008718:	2b00      	cmp	r3, #0
 800871a:	d020      	beq.n	800875e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b00      	cmp	r3, #0
 8008726:	d005      	beq.n	8008734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008728:	4b59      	ldr	r3, [pc, #356]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	4a58      	ldr	r2, [pc, #352]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 800872e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008732:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0308 	and.w	r3, r3, #8
 800873c:	2b00      	cmp	r3, #0
 800873e:	d005      	beq.n	800874c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008740:	4b53      	ldr	r3, [pc, #332]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	4a52      	ldr	r2, [pc, #328]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 8008746:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800874a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800874c:	4b50      	ldr	r3, [pc, #320]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	494d      	ldr	r1, [pc, #308]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 800875a:	4313      	orrs	r3, r2
 800875c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	d044      	beq.n	80087f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d107      	bne.n	8008782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008772:	4b47      	ldr	r3, [pc, #284]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d119      	bne.n	80087b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e07f      	b.n	8008882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	2b02      	cmp	r3, #2
 8008788:	d003      	beq.n	8008792 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800878e:	2b03      	cmp	r3, #3
 8008790:	d107      	bne.n	80087a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008792:	4b3f      	ldr	r3, [pc, #252]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d109      	bne.n	80087b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e06f      	b.n	8008882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087a2:	4b3b      	ldr	r3, [pc, #236]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e067      	b.n	8008882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087b2:	4b37      	ldr	r3, [pc, #220]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f023 0203 	bic.w	r2, r3, #3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	4934      	ldr	r1, [pc, #208]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 80087c0:	4313      	orrs	r3, r2
 80087c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087c4:	f7fe fcb6 	bl	8007134 <HAL_GetTick>
 80087c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ca:	e00a      	b.n	80087e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087cc:	f7fe fcb2 	bl	8007134 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087da:	4293      	cmp	r3, r2
 80087dc:	d901      	bls.n	80087e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e04f      	b.n	8008882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087e2:	4b2b      	ldr	r3, [pc, #172]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f003 020c 	and.w	r2, r3, #12
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d1eb      	bne.n	80087cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087f4:	4b25      	ldr	r3, [pc, #148]	@ (800888c <HAL_RCC_ClockConfig+0x1b8>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0307 	and.w	r3, r3, #7
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d20c      	bcs.n	800881c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008802:	4b22      	ldr	r3, [pc, #136]	@ (800888c <HAL_RCC_ClockConfig+0x1b8>)
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	b2d2      	uxtb	r2, r2
 8008808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800880a:	4b20      	ldr	r3, [pc, #128]	@ (800888c <HAL_RCC_ClockConfig+0x1b8>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	429a      	cmp	r2, r3
 8008816:	d001      	beq.n	800881c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e032      	b.n	8008882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0304 	and.w	r3, r3, #4
 8008824:	2b00      	cmp	r3, #0
 8008826:	d008      	beq.n	800883a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008828:	4b19      	ldr	r3, [pc, #100]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	4916      	ldr	r1, [pc, #88]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 8008836:	4313      	orrs	r3, r2
 8008838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0308 	and.w	r3, r3, #8
 8008842:	2b00      	cmp	r3, #0
 8008844:	d009      	beq.n	800885a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008846:	4b12      	ldr	r3, [pc, #72]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	490e      	ldr	r1, [pc, #56]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 8008856:	4313      	orrs	r3, r2
 8008858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800885a:	f000 f821 	bl	80088a0 <HAL_RCC_GetSysClockFreq>
 800885e:	4602      	mov	r2, r0
 8008860:	4b0b      	ldr	r3, [pc, #44]	@ (8008890 <HAL_RCC_ClockConfig+0x1bc>)
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	091b      	lsrs	r3, r3, #4
 8008866:	f003 030f 	and.w	r3, r3, #15
 800886a:	490a      	ldr	r1, [pc, #40]	@ (8008894 <HAL_RCC_ClockConfig+0x1c0>)
 800886c:	5ccb      	ldrb	r3, [r1, r3]
 800886e:	fa22 f303 	lsr.w	r3, r2, r3
 8008872:	4a09      	ldr	r2, [pc, #36]	@ (8008898 <HAL_RCC_ClockConfig+0x1c4>)
 8008874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008876:	4b09      	ldr	r3, [pc, #36]	@ (800889c <HAL_RCC_ClockConfig+0x1c8>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4618      	mov	r0, r3
 800887c:	f7fe fc16 	bl	80070ac <HAL_InitTick>

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	40023c00 	.word	0x40023c00
 8008890:	40023800 	.word	0x40023800
 8008894:	08011514 	.word	0x08011514
 8008898:	200000cc 	.word	0x200000cc
 800889c:	200000d0 	.word	0x200000d0

080088a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088a4:	b094      	sub	sp, #80	@ 0x50
 80088a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80088ac:	2300      	movs	r3, #0
 80088ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088b0:	2300      	movs	r3, #0
 80088b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088b8:	4b79      	ldr	r3, [pc, #484]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	f003 030c 	and.w	r3, r3, #12
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d00d      	beq.n	80088e0 <HAL_RCC_GetSysClockFreq+0x40>
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	f200 80e1 	bhi.w	8008a8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <HAL_RCC_GetSysClockFreq+0x34>
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	d003      	beq.n	80088da <HAL_RCC_GetSysClockFreq+0x3a>
 80088d2:	e0db      	b.n	8008a8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80088d4:	4b73      	ldr	r3, [pc, #460]	@ (8008aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 80088d6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80088d8:	e0db      	b.n	8008a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80088da:	4b73      	ldr	r3, [pc, #460]	@ (8008aa8 <HAL_RCC_GetSysClockFreq+0x208>)
 80088dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80088de:	e0d8      	b.n	8008a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80088e0:	4b6f      	ldr	r3, [pc, #444]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80088ea:	4b6d      	ldr	r3, [pc, #436]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d063      	beq.n	80089be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088f6:	4b6a      	ldr	r3, [pc, #424]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	099b      	lsrs	r3, r3, #6
 80088fc:	2200      	movs	r2, #0
 80088fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008900:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008908:	633b      	str	r3, [r7, #48]	@ 0x30
 800890a:	2300      	movs	r3, #0
 800890c:	637b      	str	r3, [r7, #52]	@ 0x34
 800890e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008912:	4622      	mov	r2, r4
 8008914:	462b      	mov	r3, r5
 8008916:	f04f 0000 	mov.w	r0, #0
 800891a:	f04f 0100 	mov.w	r1, #0
 800891e:	0159      	lsls	r1, r3, #5
 8008920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008924:	0150      	lsls	r0, r2, #5
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4621      	mov	r1, r4
 800892c:	1a51      	subs	r1, r2, r1
 800892e:	6139      	str	r1, [r7, #16]
 8008930:	4629      	mov	r1, r5
 8008932:	eb63 0301 	sbc.w	r3, r3, r1
 8008936:	617b      	str	r3, [r7, #20]
 8008938:	f04f 0200 	mov.w	r2, #0
 800893c:	f04f 0300 	mov.w	r3, #0
 8008940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008944:	4659      	mov	r1, fp
 8008946:	018b      	lsls	r3, r1, #6
 8008948:	4651      	mov	r1, sl
 800894a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800894e:	4651      	mov	r1, sl
 8008950:	018a      	lsls	r2, r1, #6
 8008952:	4651      	mov	r1, sl
 8008954:	ebb2 0801 	subs.w	r8, r2, r1
 8008958:	4659      	mov	r1, fp
 800895a:	eb63 0901 	sbc.w	r9, r3, r1
 800895e:	f04f 0200 	mov.w	r2, #0
 8008962:	f04f 0300 	mov.w	r3, #0
 8008966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800896a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800896e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008972:	4690      	mov	r8, r2
 8008974:	4699      	mov	r9, r3
 8008976:	4623      	mov	r3, r4
 8008978:	eb18 0303 	adds.w	r3, r8, r3
 800897c:	60bb      	str	r3, [r7, #8]
 800897e:	462b      	mov	r3, r5
 8008980:	eb49 0303 	adc.w	r3, r9, r3
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	f04f 0200 	mov.w	r2, #0
 800898a:	f04f 0300 	mov.w	r3, #0
 800898e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008992:	4629      	mov	r1, r5
 8008994:	024b      	lsls	r3, r1, #9
 8008996:	4621      	mov	r1, r4
 8008998:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800899c:	4621      	mov	r1, r4
 800899e:	024a      	lsls	r2, r1, #9
 80089a0:	4610      	mov	r0, r2
 80089a2:	4619      	mov	r1, r3
 80089a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089a6:	2200      	movs	r2, #0
 80089a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80089b0:	f7f8 f96a 	bl	8000c88 <__aeabi_uldivmod>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	4613      	mov	r3, r2
 80089ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089bc:	e058      	b.n	8008a70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089be:	4b38      	ldr	r3, [pc, #224]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	099b      	lsrs	r3, r3, #6
 80089c4:	2200      	movs	r2, #0
 80089c6:	4618      	mov	r0, r3
 80089c8:	4611      	mov	r1, r2
 80089ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80089ce:	623b      	str	r3, [r7, #32]
 80089d0:	2300      	movs	r3, #0
 80089d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80089d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80089d8:	4642      	mov	r2, r8
 80089da:	464b      	mov	r3, r9
 80089dc:	f04f 0000 	mov.w	r0, #0
 80089e0:	f04f 0100 	mov.w	r1, #0
 80089e4:	0159      	lsls	r1, r3, #5
 80089e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80089ea:	0150      	lsls	r0, r2, #5
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4641      	mov	r1, r8
 80089f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80089f6:	4649      	mov	r1, r9
 80089f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80089fc:	f04f 0200 	mov.w	r2, #0
 8008a00:	f04f 0300 	mov.w	r3, #0
 8008a04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008a08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008a0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008a10:	ebb2 040a 	subs.w	r4, r2, sl
 8008a14:	eb63 050b 	sbc.w	r5, r3, fp
 8008a18:	f04f 0200 	mov.w	r2, #0
 8008a1c:	f04f 0300 	mov.w	r3, #0
 8008a20:	00eb      	lsls	r3, r5, #3
 8008a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a26:	00e2      	lsls	r2, r4, #3
 8008a28:	4614      	mov	r4, r2
 8008a2a:	461d      	mov	r5, r3
 8008a2c:	4643      	mov	r3, r8
 8008a2e:	18e3      	adds	r3, r4, r3
 8008a30:	603b      	str	r3, [r7, #0]
 8008a32:	464b      	mov	r3, r9
 8008a34:	eb45 0303 	adc.w	r3, r5, r3
 8008a38:	607b      	str	r3, [r7, #4]
 8008a3a:	f04f 0200 	mov.w	r2, #0
 8008a3e:	f04f 0300 	mov.w	r3, #0
 8008a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a46:	4629      	mov	r1, r5
 8008a48:	028b      	lsls	r3, r1, #10
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a50:	4621      	mov	r1, r4
 8008a52:	028a      	lsls	r2, r1, #10
 8008a54:	4610      	mov	r0, r2
 8008a56:	4619      	mov	r1, r3
 8008a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	61bb      	str	r3, [r7, #24]
 8008a5e:	61fa      	str	r2, [r7, #28]
 8008a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a64:	f7f8 f910 	bl	8000c88 <__aeabi_uldivmod>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008a70:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	0c1b      	lsrs	r3, r3, #16
 8008a76:	f003 0303 	and.w	r3, r3, #3
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	005b      	lsls	r3, r3, #1
 8008a7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008a80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008a8a:	e002      	b.n	8008a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a8c:	4b05      	ldr	r3, [pc, #20]	@ (8008aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3750      	adds	r7, #80	@ 0x50
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a9e:	bf00      	nop
 8008aa0:	40023800 	.word	0x40023800
 8008aa4:	00f42400 	.word	0x00f42400
 8008aa8:	007a1200 	.word	0x007a1200

08008aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008aac:	b480      	push	{r7}
 8008aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ab0:	4b03      	ldr	r3, [pc, #12]	@ (8008ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	200000cc 	.word	0x200000cc

08008ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ac8:	f7ff fff0 	bl	8008aac <HAL_RCC_GetHCLKFreq>
 8008acc:	4602      	mov	r2, r0
 8008ace:	4b05      	ldr	r3, [pc, #20]	@ (8008ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	0a9b      	lsrs	r3, r3, #10
 8008ad4:	f003 0307 	and.w	r3, r3, #7
 8008ad8:	4903      	ldr	r1, [pc, #12]	@ (8008ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ada:	5ccb      	ldrb	r3, [r1, r3]
 8008adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	40023800 	.word	0x40023800
 8008ae8:	08011524 	.word	0x08011524

08008aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008af0:	f7ff ffdc 	bl	8008aac <HAL_RCC_GetHCLKFreq>
 8008af4:	4602      	mov	r2, r0
 8008af6:	4b05      	ldr	r3, [pc, #20]	@ (8008b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	0b5b      	lsrs	r3, r3, #13
 8008afc:	f003 0307 	and.w	r3, r3, #7
 8008b00:	4903      	ldr	r1, [pc, #12]	@ (8008b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b02:	5ccb      	ldrb	r3, [r1, r3]
 8008b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	40023800 	.word	0x40023800
 8008b10:	08011524 	.word	0x08011524

08008b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e041      	b.n	8008baa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d106      	bne.n	8008b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7fd ff30 	bl	80069a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2202      	movs	r2, #2
 8008b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4619      	mov	r1, r3
 8008b52:	4610      	mov	r0, r2
 8008b54:	f000 fc48 	bl	80093e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e041      	b.n	8008c48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d106      	bne.n	8008bde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f839 	bl	8008c50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2202      	movs	r2, #2
 8008be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	3304      	adds	r3, #4
 8008bee:	4619      	mov	r1, r3
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	f000 fbf9 	bl	80093e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d109      	bne.n	8008c8c <HAL_TIM_PWM_Start_IT+0x28>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	bf14      	ite	ne
 8008c84:	2301      	movne	r3, #1
 8008c86:	2300      	moveq	r3, #0
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	e022      	b.n	8008cd2 <HAL_TIM_PWM_Start_IT+0x6e>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	d109      	bne.n	8008ca6 <HAL_TIM_PWM_Start_IT+0x42>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	bf14      	ite	ne
 8008c9e:	2301      	movne	r3, #1
 8008ca0:	2300      	moveq	r3, #0
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	e015      	b.n	8008cd2 <HAL_TIM_PWM_Start_IT+0x6e>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b08      	cmp	r3, #8
 8008caa:	d109      	bne.n	8008cc0 <HAL_TIM_PWM_Start_IT+0x5c>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	bf14      	ite	ne
 8008cb8:	2301      	movne	r3, #1
 8008cba:	2300      	moveq	r3, #0
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	e008      	b.n	8008cd2 <HAL_TIM_PWM_Start_IT+0x6e>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	bf14      	ite	ne
 8008ccc:	2301      	movne	r3, #1
 8008cce:	2300      	moveq	r3, #0
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e0c7      	b.n	8008e6a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d104      	bne.n	8008cea <HAL_TIM_PWM_Start_IT+0x86>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ce8:	e013      	b.n	8008d12 <HAL_TIM_PWM_Start_IT+0xae>
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	d104      	bne.n	8008cfa <HAL_TIM_PWM_Start_IT+0x96>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cf8:	e00b      	b.n	8008d12 <HAL_TIM_PWM_Start_IT+0xae>
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b08      	cmp	r3, #8
 8008cfe:	d104      	bne.n	8008d0a <HAL_TIM_PWM_Start_IT+0xa6>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2202      	movs	r2, #2
 8008d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d08:	e003      	b.n	8008d12 <HAL_TIM_PWM_Start_IT+0xae>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b0c      	cmp	r3, #12
 8008d16:	d841      	bhi.n	8008d9c <HAL_TIM_PWM_Start_IT+0x138>
 8008d18:	a201      	add	r2, pc, #4	@ (adr r2, 8008d20 <HAL_TIM_PWM_Start_IT+0xbc>)
 8008d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1e:	bf00      	nop
 8008d20:	08008d55 	.word	0x08008d55
 8008d24:	08008d9d 	.word	0x08008d9d
 8008d28:	08008d9d 	.word	0x08008d9d
 8008d2c:	08008d9d 	.word	0x08008d9d
 8008d30:	08008d67 	.word	0x08008d67
 8008d34:	08008d9d 	.word	0x08008d9d
 8008d38:	08008d9d 	.word	0x08008d9d
 8008d3c:	08008d9d 	.word	0x08008d9d
 8008d40:	08008d79 	.word	0x08008d79
 8008d44:	08008d9d 	.word	0x08008d9d
 8008d48:	08008d9d 	.word	0x08008d9d
 8008d4c:	08008d9d 	.word	0x08008d9d
 8008d50:	08008d8b 	.word	0x08008d8b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f042 0202 	orr.w	r2, r2, #2
 8008d62:	60da      	str	r2, [r3, #12]
      break;
 8008d64:	e01d      	b.n	8008da2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68da      	ldr	r2, [r3, #12]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f042 0204 	orr.w	r2, r2, #4
 8008d74:	60da      	str	r2, [r3, #12]
      break;
 8008d76:	e014      	b.n	8008da2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68da      	ldr	r2, [r3, #12]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f042 0208 	orr.w	r2, r2, #8
 8008d86:	60da      	str	r2, [r3, #12]
      break;
 8008d88:	e00b      	b.n	8008da2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f042 0210 	orr.w	r2, r2, #16
 8008d98:	60da      	str	r2, [r3, #12]
      break;
 8008d9a:	e002      	b.n	8008da2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008da0:	bf00      	nop
  }

  if (status == HAL_OK)
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d15f      	bne.n	8008e68 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2201      	movs	r2, #1
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fe0f 	bl	80099d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a2e      	ldr	r2, [pc, #184]	@ (8008e74 <HAL_TIM_PWM_Start_IT+0x210>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d004      	beq.n	8008dca <HAL_TIM_PWM_Start_IT+0x166>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a2c      	ldr	r2, [pc, #176]	@ (8008e78 <HAL_TIM_PWM_Start_IT+0x214>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d101      	bne.n	8008dce <HAL_TIM_PWM_Start_IT+0x16a>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e000      	b.n	8008dd0 <HAL_TIM_PWM_Start_IT+0x16c>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d007      	beq.n	8008de4 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008de2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a22      	ldr	r2, [pc, #136]	@ (8008e74 <HAL_TIM_PWM_Start_IT+0x210>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d022      	beq.n	8008e34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008df6:	d01d      	beq.n	8008e34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8008e7c <HAL_TIM_PWM_Start_IT+0x218>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d018      	beq.n	8008e34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a1e      	ldr	r2, [pc, #120]	@ (8008e80 <HAL_TIM_PWM_Start_IT+0x21c>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d013      	beq.n	8008e34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a1c      	ldr	r2, [pc, #112]	@ (8008e84 <HAL_TIM_PWM_Start_IT+0x220>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d00e      	beq.n	8008e34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a17      	ldr	r2, [pc, #92]	@ (8008e78 <HAL_TIM_PWM_Start_IT+0x214>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d009      	beq.n	8008e34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a18      	ldr	r2, [pc, #96]	@ (8008e88 <HAL_TIM_PWM_Start_IT+0x224>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d004      	beq.n	8008e34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a17      	ldr	r2, [pc, #92]	@ (8008e8c <HAL_TIM_PWM_Start_IT+0x228>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d111      	bne.n	8008e58 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f003 0307 	and.w	r3, r3, #7
 8008e3e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b06      	cmp	r3, #6
 8008e44:	d010      	beq.n	8008e68 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f042 0201 	orr.w	r2, r2, #1
 8008e54:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e56:	e007      	b.n	8008e68 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f042 0201 	orr.w	r2, r2, #1
 8008e66:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	40010000 	.word	0x40010000
 8008e78:	40010400 	.word	0x40010400
 8008e7c:	40000400 	.word	0x40000400
 8008e80:	40000800 	.word	0x40000800
 8008e84:	40000c00 	.word	0x40000c00
 8008e88:	40014000 	.word	0x40014000
 8008e8c:	40001800 	.word	0x40001800

08008e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d020      	beq.n	8008ef4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d01b      	beq.n	8008ef4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f06f 0202 	mvn.w	r2, #2
 8008ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	f003 0303 	and.w	r3, r3, #3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fa65 	bl	80093aa <HAL_TIM_IC_CaptureCallback>
 8008ee0:	e005      	b.n	8008eee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fa57 	bl	8009396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fa68 	bl	80093be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f003 0304 	and.w	r3, r3, #4
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d020      	beq.n	8008f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f003 0304 	and.w	r3, r3, #4
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d01b      	beq.n	8008f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f06f 0204 	mvn.w	r2, #4
 8008f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2202      	movs	r2, #2
 8008f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa3f 	bl	80093aa <HAL_TIM_IC_CaptureCallback>
 8008f2c:	e005      	b.n	8008f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fa31 	bl	8009396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fa42 	bl	80093be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	f003 0308 	and.w	r3, r3, #8
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d020      	beq.n	8008f8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f003 0308 	and.w	r3, r3, #8
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d01b      	beq.n	8008f8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f06f 0208 	mvn.w	r2, #8
 8008f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2204      	movs	r2, #4
 8008f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	69db      	ldr	r3, [r3, #28]
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fa19 	bl	80093aa <HAL_TIM_IC_CaptureCallback>
 8008f78:	e005      	b.n	8008f86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa0b 	bl	8009396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fa1c 	bl	80093be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f003 0310 	and.w	r3, r3, #16
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d020      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f003 0310 	and.w	r3, r3, #16
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d01b      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f06f 0210 	mvn.w	r2, #16
 8008fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2208      	movs	r2, #8
 8008fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f9f3 	bl	80093aa <HAL_TIM_IC_CaptureCallback>
 8008fc4:	e005      	b.n	8008fd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f9e5 	bl	8009396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f9f6 	bl	80093be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00c      	beq.n	8008ffc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f003 0301 	and.w	r3, r3, #1
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d007      	beq.n	8008ffc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f06f 0201 	mvn.w	r2, #1
 8008ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f9c3 	bl	8009382 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00c      	beq.n	8009020 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800900c:	2b00      	cmp	r3, #0
 800900e:	d007      	beq.n	8009020 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fdd8 	bl	8009bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00c      	beq.n	8009044 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009030:	2b00      	cmp	r3, #0
 8009032:	d007      	beq.n	8009044 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800903c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f9c7 	bl	80093d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f003 0320 	and.w	r3, r3, #32
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00c      	beq.n	8009068 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f003 0320 	and.w	r3, r3, #32
 8009054:	2b00      	cmp	r3, #0
 8009056:	d007      	beq.n	8009068 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f06f 0220 	mvn.w	r2, #32
 8009060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fdaa 	bl	8009bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009068:	bf00      	nop
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009086:	2b01      	cmp	r3, #1
 8009088:	d101      	bne.n	800908e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800908a:	2302      	movs	r3, #2
 800908c:	e0ae      	b.n	80091ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2b0c      	cmp	r3, #12
 800909a:	f200 809f 	bhi.w	80091dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800909e:	a201      	add	r2, pc, #4	@ (adr r2, 80090a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80090a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a4:	080090d9 	.word	0x080090d9
 80090a8:	080091dd 	.word	0x080091dd
 80090ac:	080091dd 	.word	0x080091dd
 80090b0:	080091dd 	.word	0x080091dd
 80090b4:	08009119 	.word	0x08009119
 80090b8:	080091dd 	.word	0x080091dd
 80090bc:	080091dd 	.word	0x080091dd
 80090c0:	080091dd 	.word	0x080091dd
 80090c4:	0800915b 	.word	0x0800915b
 80090c8:	080091dd 	.word	0x080091dd
 80090cc:	080091dd 	.word	0x080091dd
 80090d0:	080091dd 	.word	0x080091dd
 80090d4:	0800919b 	.word	0x0800919b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68b9      	ldr	r1, [r7, #8]
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 fa2e 	bl	8009540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	699a      	ldr	r2, [r3, #24]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f042 0208 	orr.w	r2, r2, #8
 80090f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f022 0204 	bic.w	r2, r2, #4
 8009102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6999      	ldr	r1, [r3, #24]
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	691a      	ldr	r2, [r3, #16]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	430a      	orrs	r2, r1
 8009114:	619a      	str	r2, [r3, #24]
      break;
 8009116:	e064      	b.n	80091e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68b9      	ldr	r1, [r7, #8]
 800911e:	4618      	mov	r0, r3
 8009120:	f000 fa7e 	bl	8009620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	699a      	ldr	r2, [r3, #24]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	699a      	ldr	r2, [r3, #24]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6999      	ldr	r1, [r3, #24]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	021a      	lsls	r2, r3, #8
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	430a      	orrs	r2, r1
 8009156:	619a      	str	r2, [r3, #24]
      break;
 8009158:	e043      	b.n	80091e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68b9      	ldr	r1, [r7, #8]
 8009160:	4618      	mov	r0, r3
 8009162:	f000 fad3 	bl	800970c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	69da      	ldr	r2, [r3, #28]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f042 0208 	orr.w	r2, r2, #8
 8009174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	69da      	ldr	r2, [r3, #28]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 0204 	bic.w	r2, r2, #4
 8009184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	69d9      	ldr	r1, [r3, #28]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	691a      	ldr	r2, [r3, #16]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	61da      	str	r2, [r3, #28]
      break;
 8009198:	e023      	b.n	80091e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68b9      	ldr	r1, [r7, #8]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 fb27 	bl	80097f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	69da      	ldr	r2, [r3, #28]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	69da      	ldr	r2, [r3, #28]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	69d9      	ldr	r1, [r3, #28]
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	021a      	lsls	r2, r3, #8
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	430a      	orrs	r2, r1
 80091d8:	61da      	str	r2, [r3, #28]
      break;
 80091da:	e002      	b.n	80091e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	75fb      	strb	r3, [r7, #23]
      break;
 80091e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3718      	adds	r7, #24
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009208:	2b01      	cmp	r3, #1
 800920a:	d101      	bne.n	8009210 <HAL_TIM_ConfigClockSource+0x1c>
 800920c:	2302      	movs	r3, #2
 800920e:	e0b4      	b.n	800937a <HAL_TIM_ConfigClockSource+0x186>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2202      	movs	r2, #2
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800922e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009248:	d03e      	beq.n	80092c8 <HAL_TIM_ConfigClockSource+0xd4>
 800924a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800924e:	f200 8087 	bhi.w	8009360 <HAL_TIM_ConfigClockSource+0x16c>
 8009252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009256:	f000 8086 	beq.w	8009366 <HAL_TIM_ConfigClockSource+0x172>
 800925a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800925e:	d87f      	bhi.n	8009360 <HAL_TIM_ConfigClockSource+0x16c>
 8009260:	2b70      	cmp	r3, #112	@ 0x70
 8009262:	d01a      	beq.n	800929a <HAL_TIM_ConfigClockSource+0xa6>
 8009264:	2b70      	cmp	r3, #112	@ 0x70
 8009266:	d87b      	bhi.n	8009360 <HAL_TIM_ConfigClockSource+0x16c>
 8009268:	2b60      	cmp	r3, #96	@ 0x60
 800926a:	d050      	beq.n	800930e <HAL_TIM_ConfigClockSource+0x11a>
 800926c:	2b60      	cmp	r3, #96	@ 0x60
 800926e:	d877      	bhi.n	8009360 <HAL_TIM_ConfigClockSource+0x16c>
 8009270:	2b50      	cmp	r3, #80	@ 0x50
 8009272:	d03c      	beq.n	80092ee <HAL_TIM_ConfigClockSource+0xfa>
 8009274:	2b50      	cmp	r3, #80	@ 0x50
 8009276:	d873      	bhi.n	8009360 <HAL_TIM_ConfigClockSource+0x16c>
 8009278:	2b40      	cmp	r3, #64	@ 0x40
 800927a:	d058      	beq.n	800932e <HAL_TIM_ConfigClockSource+0x13a>
 800927c:	2b40      	cmp	r3, #64	@ 0x40
 800927e:	d86f      	bhi.n	8009360 <HAL_TIM_ConfigClockSource+0x16c>
 8009280:	2b30      	cmp	r3, #48	@ 0x30
 8009282:	d064      	beq.n	800934e <HAL_TIM_ConfigClockSource+0x15a>
 8009284:	2b30      	cmp	r3, #48	@ 0x30
 8009286:	d86b      	bhi.n	8009360 <HAL_TIM_ConfigClockSource+0x16c>
 8009288:	2b20      	cmp	r3, #32
 800928a:	d060      	beq.n	800934e <HAL_TIM_ConfigClockSource+0x15a>
 800928c:	2b20      	cmp	r3, #32
 800928e:	d867      	bhi.n	8009360 <HAL_TIM_ConfigClockSource+0x16c>
 8009290:	2b00      	cmp	r3, #0
 8009292:	d05c      	beq.n	800934e <HAL_TIM_ConfigClockSource+0x15a>
 8009294:	2b10      	cmp	r3, #16
 8009296:	d05a      	beq.n	800934e <HAL_TIM_ConfigClockSource+0x15a>
 8009298:	e062      	b.n	8009360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092aa:	f000 fb73 	bl	8009994 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80092bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	609a      	str	r2, [r3, #8]
      break;
 80092c6:	e04f      	b.n	8009368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092d8:	f000 fb5c 	bl	8009994 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689a      	ldr	r2, [r3, #8]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80092ea:	609a      	str	r2, [r3, #8]
      break;
 80092ec:	e03c      	b.n	8009368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092fa:	461a      	mov	r2, r3
 80092fc:	f000 fad0 	bl	80098a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2150      	movs	r1, #80	@ 0x50
 8009306:	4618      	mov	r0, r3
 8009308:	f000 fb29 	bl	800995e <TIM_ITRx_SetConfig>
      break;
 800930c:	e02c      	b.n	8009368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800931a:	461a      	mov	r2, r3
 800931c:	f000 faef 	bl	80098fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2160      	movs	r1, #96	@ 0x60
 8009326:	4618      	mov	r0, r3
 8009328:	f000 fb19 	bl	800995e <TIM_ITRx_SetConfig>
      break;
 800932c:	e01c      	b.n	8009368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800933a:	461a      	mov	r2, r3
 800933c:	f000 fab0 	bl	80098a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2140      	movs	r1, #64	@ 0x40
 8009346:	4618      	mov	r0, r3
 8009348:	f000 fb09 	bl	800995e <TIM_ITRx_SetConfig>
      break;
 800934c:	e00c      	b.n	8009368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4619      	mov	r1, r3
 8009358:	4610      	mov	r0, r2
 800935a:	f000 fb00 	bl	800995e <TIM_ITRx_SetConfig>
      break;
 800935e:	e003      	b.n	8009368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	73fb      	strb	r3, [r7, #15]
      break;
 8009364:	e000      	b.n	8009368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009378:	7bfb      	ldrb	r3, [r7, #15]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800938a:	bf00      	nop
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009396:	b480      	push	{r7}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800939e:	bf00      	nop
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b083      	sub	sp, #12
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093b2:	bf00      	nop
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093be:	b480      	push	{r7}
 80093c0:	b083      	sub	sp, #12
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093c6:	bf00      	nop
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b083      	sub	sp, #12
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093da:	bf00      	nop
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr
	...

080093e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a46      	ldr	r2, [pc, #280]	@ (8009514 <TIM_Base_SetConfig+0x12c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d013      	beq.n	8009428 <TIM_Base_SetConfig+0x40>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009406:	d00f      	beq.n	8009428 <TIM_Base_SetConfig+0x40>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a43      	ldr	r2, [pc, #268]	@ (8009518 <TIM_Base_SetConfig+0x130>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d00b      	beq.n	8009428 <TIM_Base_SetConfig+0x40>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a42      	ldr	r2, [pc, #264]	@ (800951c <TIM_Base_SetConfig+0x134>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d007      	beq.n	8009428 <TIM_Base_SetConfig+0x40>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a41      	ldr	r2, [pc, #260]	@ (8009520 <TIM_Base_SetConfig+0x138>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d003      	beq.n	8009428 <TIM_Base_SetConfig+0x40>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a40      	ldr	r2, [pc, #256]	@ (8009524 <TIM_Base_SetConfig+0x13c>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d108      	bne.n	800943a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800942e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	4313      	orrs	r3, r2
 8009438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a35      	ldr	r2, [pc, #212]	@ (8009514 <TIM_Base_SetConfig+0x12c>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d02b      	beq.n	800949a <TIM_Base_SetConfig+0xb2>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009448:	d027      	beq.n	800949a <TIM_Base_SetConfig+0xb2>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a32      	ldr	r2, [pc, #200]	@ (8009518 <TIM_Base_SetConfig+0x130>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d023      	beq.n	800949a <TIM_Base_SetConfig+0xb2>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a31      	ldr	r2, [pc, #196]	@ (800951c <TIM_Base_SetConfig+0x134>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d01f      	beq.n	800949a <TIM_Base_SetConfig+0xb2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a30      	ldr	r2, [pc, #192]	@ (8009520 <TIM_Base_SetConfig+0x138>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d01b      	beq.n	800949a <TIM_Base_SetConfig+0xb2>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a2f      	ldr	r2, [pc, #188]	@ (8009524 <TIM_Base_SetConfig+0x13c>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d017      	beq.n	800949a <TIM_Base_SetConfig+0xb2>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a2e      	ldr	r2, [pc, #184]	@ (8009528 <TIM_Base_SetConfig+0x140>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d013      	beq.n	800949a <TIM_Base_SetConfig+0xb2>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a2d      	ldr	r2, [pc, #180]	@ (800952c <TIM_Base_SetConfig+0x144>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d00f      	beq.n	800949a <TIM_Base_SetConfig+0xb2>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a2c      	ldr	r2, [pc, #176]	@ (8009530 <TIM_Base_SetConfig+0x148>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00b      	beq.n	800949a <TIM_Base_SetConfig+0xb2>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a2b      	ldr	r2, [pc, #172]	@ (8009534 <TIM_Base_SetConfig+0x14c>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d007      	beq.n	800949a <TIM_Base_SetConfig+0xb2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a2a      	ldr	r2, [pc, #168]	@ (8009538 <TIM_Base_SetConfig+0x150>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d003      	beq.n	800949a <TIM_Base_SetConfig+0xb2>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a29      	ldr	r2, [pc, #164]	@ (800953c <TIM_Base_SetConfig+0x154>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d108      	bne.n	80094ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	689a      	ldr	r2, [r3, #8]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a10      	ldr	r2, [pc, #64]	@ (8009514 <TIM_Base_SetConfig+0x12c>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d003      	beq.n	80094e0 <TIM_Base_SetConfig+0xf8>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a12      	ldr	r2, [pc, #72]	@ (8009524 <TIM_Base_SetConfig+0x13c>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d103      	bne.n	80094e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	691a      	ldr	r2, [r3, #16]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d105      	bne.n	8009506 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	f023 0201 	bic.w	r2, r3, #1
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	611a      	str	r2, [r3, #16]
  }
}
 8009506:	bf00      	nop
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	40010000 	.word	0x40010000
 8009518:	40000400 	.word	0x40000400
 800951c:	40000800 	.word	0x40000800
 8009520:	40000c00 	.word	0x40000c00
 8009524:	40010400 	.word	0x40010400
 8009528:	40014000 	.word	0x40014000
 800952c:	40014400 	.word	0x40014400
 8009530:	40014800 	.word	0x40014800
 8009534:	40001800 	.word	0x40001800
 8009538:	40001c00 	.word	0x40001c00
 800953c:	40002000 	.word	0x40002000

08009540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a1b      	ldr	r3, [r3, #32]
 8009554:	f023 0201 	bic.w	r2, r3, #1
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800956e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 0303 	bic.w	r3, r3, #3
 8009576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	4313      	orrs	r3, r2
 8009580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f023 0302 	bic.w	r3, r3, #2
 8009588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	4313      	orrs	r3, r2
 8009592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a20      	ldr	r2, [pc, #128]	@ (8009618 <TIM_OC1_SetConfig+0xd8>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d003      	beq.n	80095a4 <TIM_OC1_SetConfig+0x64>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a1f      	ldr	r2, [pc, #124]	@ (800961c <TIM_OC1_SetConfig+0xdc>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d10c      	bne.n	80095be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	f023 0308 	bic.w	r3, r3, #8
 80095aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	697a      	ldr	r2, [r7, #20]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f023 0304 	bic.w	r3, r3, #4
 80095bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a15      	ldr	r2, [pc, #84]	@ (8009618 <TIM_OC1_SetConfig+0xd8>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d003      	beq.n	80095ce <TIM_OC1_SetConfig+0x8e>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a14      	ldr	r2, [pc, #80]	@ (800961c <TIM_OC1_SetConfig+0xdc>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d111      	bne.n	80095f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80095dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	695b      	ldr	r3, [r3, #20]
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	693a      	ldr	r2, [r7, #16]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	697a      	ldr	r2, [r7, #20]
 800960a:	621a      	str	r2, [r3, #32]
}
 800960c:	bf00      	nop
 800960e:	371c      	adds	r7, #28
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr
 8009618:	40010000 	.word	0x40010000
 800961c:	40010400 	.word	0x40010400

08009620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a1b      	ldr	r3, [r3, #32]
 8009634:	f023 0210 	bic.w	r2, r3, #16
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800964e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	4313      	orrs	r3, r2
 8009662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f023 0320 	bic.w	r3, r3, #32
 800966a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	011b      	lsls	r3, r3, #4
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	4313      	orrs	r3, r2
 8009676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a22      	ldr	r2, [pc, #136]	@ (8009704 <TIM_OC2_SetConfig+0xe4>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d003      	beq.n	8009688 <TIM_OC2_SetConfig+0x68>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a21      	ldr	r2, [pc, #132]	@ (8009708 <TIM_OC2_SetConfig+0xe8>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d10d      	bne.n	80096a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800968e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	011b      	lsls	r3, r3, #4
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	4313      	orrs	r3, r2
 800969a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a17      	ldr	r2, [pc, #92]	@ (8009704 <TIM_OC2_SetConfig+0xe4>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d003      	beq.n	80096b4 <TIM_OC2_SetConfig+0x94>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a16      	ldr	r2, [pc, #88]	@ (8009708 <TIM_OC2_SetConfig+0xe8>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d113      	bne.n	80096dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80096ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80096c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	4313      	orrs	r3, r2
 80096da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	621a      	str	r2, [r3, #32]
}
 80096f6:	bf00      	nop
 80096f8:	371c      	adds	r7, #28
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	40010000 	.word	0x40010000
 8009708:	40010400 	.word	0x40010400

0800970c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800970c:	b480      	push	{r7}
 800970e:	b087      	sub	sp, #28
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a1b      	ldr	r3, [r3, #32]
 8009720:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800973a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f023 0303 	bic.w	r3, r3, #3
 8009742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	4313      	orrs	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	021b      	lsls	r3, r3, #8
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	4313      	orrs	r3, r2
 8009760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a21      	ldr	r2, [pc, #132]	@ (80097ec <TIM_OC3_SetConfig+0xe0>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d003      	beq.n	8009772 <TIM_OC3_SetConfig+0x66>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a20      	ldr	r2, [pc, #128]	@ (80097f0 <TIM_OC3_SetConfig+0xe4>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d10d      	bne.n	800978e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	021b      	lsls	r3, r3, #8
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	4313      	orrs	r3, r2
 8009784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800978c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a16      	ldr	r2, [pc, #88]	@ (80097ec <TIM_OC3_SetConfig+0xe0>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d003      	beq.n	800979e <TIM_OC3_SetConfig+0x92>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a15      	ldr	r2, [pc, #84]	@ (80097f0 <TIM_OC3_SetConfig+0xe4>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d113      	bne.n	80097c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	011b      	lsls	r3, r3, #4
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	011b      	lsls	r3, r3, #4
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	685a      	ldr	r2, [r3, #4]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	621a      	str	r2, [r3, #32]
}
 80097e0:	bf00      	nop
 80097e2:	371c      	adds	r7, #28
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	40010000 	.word	0x40010000
 80097f0:	40010400 	.word	0x40010400

080097f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	69db      	ldr	r3, [r3, #28]
 800981a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800982a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	021b      	lsls	r3, r3, #8
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	4313      	orrs	r3, r2
 8009836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800983e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	031b      	lsls	r3, r3, #12
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	4313      	orrs	r3, r2
 800984a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a12      	ldr	r2, [pc, #72]	@ (8009898 <TIM_OC4_SetConfig+0xa4>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d003      	beq.n	800985c <TIM_OC4_SetConfig+0x68>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a11      	ldr	r2, [pc, #68]	@ (800989c <TIM_OC4_SetConfig+0xa8>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d109      	bne.n	8009870 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	019b      	lsls	r3, r3, #6
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	4313      	orrs	r3, r2
 800986e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	621a      	str	r2, [r3, #32]
}
 800988a:	bf00      	nop
 800988c:	371c      	adds	r7, #28
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	40010000 	.word	0x40010000
 800989c:	40010400 	.word	0x40010400

080098a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b087      	sub	sp, #28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6a1b      	ldr	r3, [r3, #32]
 80098b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	f023 0201 	bic.w	r2, r3, #1
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	011b      	lsls	r3, r3, #4
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	f023 030a 	bic.w	r3, r3, #10
 80098dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	621a      	str	r2, [r3, #32]
}
 80098f2:	bf00      	nop
 80098f4:	371c      	adds	r7, #28
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr

080098fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098fe:	b480      	push	{r7}
 8009900:	b087      	sub	sp, #28
 8009902:	af00      	add	r7, sp, #0
 8009904:	60f8      	str	r0, [r7, #12]
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6a1b      	ldr	r3, [r3, #32]
 800990e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6a1b      	ldr	r3, [r3, #32]
 8009914:	f023 0210 	bic.w	r2, r3, #16
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009928:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	031b      	lsls	r3, r3, #12
 800992e:	693a      	ldr	r2, [r7, #16]
 8009930:	4313      	orrs	r3, r2
 8009932:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800993a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	011b      	lsls	r3, r3, #4
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	4313      	orrs	r3, r2
 8009944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	621a      	str	r2, [r3, #32]
}
 8009952:	bf00      	nop
 8009954:	371c      	adds	r7, #28
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800995e:	b480      	push	{r7}
 8009960:	b085      	sub	sp, #20
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009974:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4313      	orrs	r3, r2
 800997c:	f043 0307 	orr.w	r3, r3, #7
 8009980:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	609a      	str	r2, [r3, #8]
}
 8009988:	bf00      	nop
 800998a:	3714      	adds	r7, #20
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009994:	b480      	push	{r7}
 8009996:	b087      	sub	sp, #28
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
 80099a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	021a      	lsls	r2, r3, #8
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	431a      	orrs	r2, r3
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	4313      	orrs	r3, r2
 80099c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	609a      	str	r2, [r3, #8]
}
 80099c8:	bf00      	nop
 80099ca:	371c      	adds	r7, #28
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b087      	sub	sp, #28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	f003 031f 	and.w	r3, r3, #31
 80099e6:	2201      	movs	r2, #1
 80099e8:	fa02 f303 	lsl.w	r3, r2, r3
 80099ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6a1a      	ldr	r2, [r3, #32]
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	43db      	mvns	r3, r3
 80099f6:	401a      	ands	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6a1a      	ldr	r2, [r3, #32]
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	f003 031f 	and.w	r3, r3, #31
 8009a06:	6879      	ldr	r1, [r7, #4]
 8009a08:	fa01 f303 	lsl.w	r3, r1, r3
 8009a0c:	431a      	orrs	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	621a      	str	r2, [r3, #32]
}
 8009a12:	bf00      	nop
 8009a14:	371c      	adds	r7, #28
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
	...

08009a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d101      	bne.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a34:	2302      	movs	r3, #2
 8009a36:	e05a      	b.n	8009aee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2202      	movs	r2, #2
 8009a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a21      	ldr	r2, [pc, #132]	@ (8009afc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d022      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a84:	d01d      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8009b00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d018      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a1b      	ldr	r2, [pc, #108]	@ (8009b04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d013      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8009b08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d00e      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a18      	ldr	r2, [pc, #96]	@ (8009b0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d009      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a17      	ldr	r2, [pc, #92]	@ (8009b10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d004      	beq.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a15      	ldr	r2, [pc, #84]	@ (8009b14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d10c      	bne.n	8009adc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	40010000 	.word	0x40010000
 8009b00:	40000400 	.word	0x40000400
 8009b04:	40000800 	.word	0x40000800
 8009b08:	40000c00 	.word	0x40000c00
 8009b0c:	40010400 	.word	0x40010400
 8009b10:	40014000 	.word	0x40014000
 8009b14:	40001800 	.word	0x40001800

08009b18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b22:	2300      	movs	r3, #0
 8009b24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d101      	bne.n	8009b34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b30:	2302      	movs	r3, #2
 8009b32:	e03d      	b.n	8009bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	695b      	ldr	r3, [r3, #20]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	69db      	ldr	r3, [r3, #28]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d101      	bne.n	8009bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e042      	b.n	8009c7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d106      	bne.n	8009c10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7fc ffb4 	bl	8006b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2224      	movs	r2, #36	@ 0x24
 8009c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68da      	ldr	r2, [r3, #12]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fcdb 	bl	800a5e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	691a      	ldr	r2, [r3, #16]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	695a      	ldr	r2, [r3, #20]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68da      	ldr	r2, [r3, #12]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2220      	movs	r2, #32
 8009c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2220      	movs	r2, #32
 8009c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	2b20      	cmp	r3, #32
 8009c9c:	d112      	bne.n	8009cc4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <HAL_UART_Receive_IT+0x26>
 8009ca4:	88fb      	ldrh	r3, [r7, #6]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d101      	bne.n	8009cae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e00b      	b.n	8009cc6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009cb4:	88fb      	ldrh	r3, [r7, #6]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	68b9      	ldr	r1, [r7, #8]
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f000 faba 	bl	800a234 <UART_Start_Receive_IT>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	e000      	b.n	8009cc6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009cc4:	2302      	movs	r3, #2
  }
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
	...

08009cd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b0ba      	sub	sp, #232	@ 0xe8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	695b      	ldr	r3, [r3, #20]
 8009cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d06:	f003 030f 	and.w	r3, r3, #15
 8009d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009d0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10f      	bne.n	8009d36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d1a:	f003 0320 	and.w	r3, r3, #32
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d009      	beq.n	8009d36 <HAL_UART_IRQHandler+0x66>
 8009d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d26:	f003 0320 	and.w	r3, r3, #32
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d003      	beq.n	8009d36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fb99 	bl	800a466 <UART_Receive_IT>
      return;
 8009d34:	e25b      	b.n	800a1ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 80de 	beq.w	8009efc <HAL_UART_IRQHandler+0x22c>
 8009d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d44:	f003 0301 	and.w	r3, r3, #1
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d106      	bne.n	8009d5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d50:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f000 80d1 	beq.w	8009efc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d5e:	f003 0301 	and.w	r3, r3, #1
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00b      	beq.n	8009d7e <HAL_UART_IRQHandler+0xae>
 8009d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d005      	beq.n	8009d7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d76:	f043 0201 	orr.w	r2, r3, #1
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d82:	f003 0304 	and.w	r3, r3, #4
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00b      	beq.n	8009da2 <HAL_UART_IRQHandler+0xd2>
 8009d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d005      	beq.n	8009da2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d9a:	f043 0202 	orr.w	r2, r3, #2
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009da6:	f003 0302 	and.w	r3, r3, #2
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00b      	beq.n	8009dc6 <HAL_UART_IRQHandler+0xf6>
 8009dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009db2:	f003 0301 	and.w	r3, r3, #1
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dbe:	f043 0204 	orr.w	r2, r3, #4
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dca:	f003 0308 	and.w	r3, r3, #8
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d011      	beq.n	8009df6 <HAL_UART_IRQHandler+0x126>
 8009dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dd6:	f003 0320 	and.w	r3, r3, #32
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d105      	bne.n	8009dea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d005      	beq.n	8009df6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dee:	f043 0208 	orr.w	r2, r3, #8
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f000 81f2 	beq.w	800a1e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e04:	f003 0320 	and.w	r3, r3, #32
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d008      	beq.n	8009e1e <HAL_UART_IRQHandler+0x14e>
 8009e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e10:	f003 0320 	and.w	r3, r3, #32
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fb24 	bl	800a466 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	695b      	ldr	r3, [r3, #20]
 8009e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e28:	2b40      	cmp	r3, #64	@ 0x40
 8009e2a:	bf0c      	ite	eq
 8009e2c:	2301      	moveq	r3, #1
 8009e2e:	2300      	movne	r3, #0
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e3a:	f003 0308 	and.w	r3, r3, #8
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d103      	bne.n	8009e4a <HAL_UART_IRQHandler+0x17a>
 8009e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d04f      	beq.n	8009eea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fa2c 	bl	800a2a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	695b      	ldr	r3, [r3, #20]
 8009e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e5a:	2b40      	cmp	r3, #64	@ 0x40
 8009e5c:	d141      	bne.n	8009ee2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3314      	adds	r3, #20
 8009e64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e6c:	e853 3f00 	ldrex	r3, [r3]
 8009e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	3314      	adds	r3, #20
 8009e86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009e8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009e96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009e9a:	e841 2300 	strex	r3, r2, [r1]
 8009e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1d9      	bne.n	8009e5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d013      	beq.n	8009eda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eb6:	4a7e      	ldr	r2, [pc, #504]	@ (800a0b0 <HAL_UART_IRQHandler+0x3e0>)
 8009eb8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7fd fae9 	bl	8007496 <HAL_DMA_Abort_IT>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d016      	beq.n	8009ef8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ed8:	e00e      	b.n	8009ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f994 	bl	800a208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ee0:	e00a      	b.n	8009ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f990 	bl	800a208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ee8:	e006      	b.n	8009ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f98c 	bl	800a208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009ef6:	e175      	b.n	800a1e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ef8:	bf00      	nop
    return;
 8009efa:	e173      	b.n	800a1e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	f040 814f 	bne.w	800a1a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f0a:	f003 0310 	and.w	r3, r3, #16
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f000 8148 	beq.w	800a1a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f18:	f003 0310 	and.w	r3, r3, #16
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 8141 	beq.w	800a1a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f22:	2300      	movs	r3, #0
 8009f24:	60bb      	str	r3, [r7, #8]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	60bb      	str	r3, [r7, #8]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	60bb      	str	r3, [r7, #8]
 8009f36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f42:	2b40      	cmp	r3, #64	@ 0x40
 8009f44:	f040 80b6 	bne.w	800a0b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f000 8145 	beq.w	800a1e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f66:	429a      	cmp	r2, r3
 8009f68:	f080 813e 	bcs.w	800a1e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f7e:	f000 8088 	beq.w	800a092 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	330c      	adds	r3, #12
 8009f88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f90:	e853 3f00 	ldrex	r3, [r3]
 8009f94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	330c      	adds	r3, #12
 8009faa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009fae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009fb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009fba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009fbe:	e841 2300 	strex	r3, r2, [r1]
 8009fc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1d9      	bne.n	8009f82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3314      	adds	r3, #20
 8009fd4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009fd8:	e853 3f00 	ldrex	r3, [r3]
 8009fdc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009fde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009fe0:	f023 0301 	bic.w	r3, r3, #1
 8009fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	3314      	adds	r3, #20
 8009fee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ff2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009ff6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009ffa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009ffe:	e841 2300 	strex	r3, r2, [r1]
 800a002:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1e1      	bne.n	8009fce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	3314      	adds	r3, #20
 800a010:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a012:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a01a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a01c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3314      	adds	r3, #20
 800a02a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a02e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a030:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a032:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a034:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a036:	e841 2300 	strex	r3, r2, [r1]
 800a03a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a03c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1e3      	bne.n	800a00a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2220      	movs	r2, #32
 800a046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	330c      	adds	r3, #12
 800a056:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a062:	f023 0310 	bic.w	r3, r3, #16
 800a066:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	330c      	adds	r3, #12
 800a070:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a074:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a076:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a078:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a07a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a07c:	e841 2300 	strex	r3, r2, [r1]
 800a080:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1e3      	bne.n	800a050 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fd f992 	bl	80073b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2202      	movs	r2, #2
 800a096:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f8b7 	bl	800a21c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a0ae:	e09b      	b.n	800a1e8 <HAL_UART_IRQHandler+0x518>
 800a0b0:	0800a36f 	.word	0x0800a36f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	1ad3      	subs	r3, r2, r3
 800a0c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 808e 	beq.w	800a1ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a0d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f000 8089 	beq.w	800a1ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	330c      	adds	r3, #12
 800a0e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e4:	e853 3f00 	ldrex	r3, [r3]
 800a0e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	330c      	adds	r3, #12
 800a0fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a0fe:	647a      	str	r2, [r7, #68]	@ 0x44
 800a100:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a102:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a104:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a106:	e841 2300 	strex	r3, r2, [r1]
 800a10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a10c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1e3      	bne.n	800a0da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3314      	adds	r3, #20
 800a118:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11c:	e853 3f00 	ldrex	r3, [r3]
 800a120:	623b      	str	r3, [r7, #32]
   return(result);
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	f023 0301 	bic.w	r3, r3, #1
 800a128:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	3314      	adds	r3, #20
 800a132:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a136:	633a      	str	r2, [r7, #48]	@ 0x30
 800a138:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a13c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a13e:	e841 2300 	strex	r3, r2, [r1]
 800a142:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1e3      	bne.n	800a112 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2220      	movs	r2, #32
 800a14e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	330c      	adds	r3, #12
 800a15e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	e853 3f00 	ldrex	r3, [r3]
 800a166:	60fb      	str	r3, [r7, #12]
   return(result);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f023 0310 	bic.w	r3, r3, #16
 800a16e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	330c      	adds	r3, #12
 800a178:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a17c:	61fa      	str	r2, [r7, #28]
 800a17e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a180:	69b9      	ldr	r1, [r7, #24]
 800a182:	69fa      	ldr	r2, [r7, #28]
 800a184:	e841 2300 	strex	r3, r2, [r1]
 800a188:	617b      	str	r3, [r7, #20]
   return(result);
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1e3      	bne.n	800a158 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a196:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a19a:	4619      	mov	r1, r3
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f83d 	bl	800a21c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1a2:	e023      	b.n	800a1ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a1a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d009      	beq.n	800a1c4 <HAL_UART_IRQHandler+0x4f4>
 800a1b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f8ea 	bl	800a396 <UART_Transmit_IT>
    return;
 800a1c2:	e014      	b.n	800a1ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a1c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00e      	beq.n	800a1ee <HAL_UART_IRQHandler+0x51e>
 800a1d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d008      	beq.n	800a1ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f92a 	bl	800a436 <UART_EndTransmit_IT>
    return;
 800a1e2:	e004      	b.n	800a1ee <HAL_UART_IRQHandler+0x51e>
    return;
 800a1e4:	bf00      	nop
 800a1e6:	e002      	b.n	800a1ee <HAL_UART_IRQHandler+0x51e>
      return;
 800a1e8:	bf00      	nop
 800a1ea:	e000      	b.n	800a1ee <HAL_UART_IRQHandler+0x51e>
      return;
 800a1ec:	bf00      	nop
  }
}
 800a1ee:	37e8      	adds	r7, #232	@ 0xe8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a234:	b480      	push	{r7}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	4613      	mov	r3, r2
 800a240:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	88fa      	ldrh	r2, [r7, #6]
 800a24c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	88fa      	ldrh	r2, [r7, #6]
 800a252:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2222      	movs	r2, #34	@ 0x22
 800a25e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d007      	beq.n	800a27a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68da      	ldr	r2, [r3, #12]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a278:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	695a      	ldr	r2, [r3, #20]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f042 0201 	orr.w	r2, r2, #1
 800a288:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68da      	ldr	r2, [r3, #12]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f042 0220 	orr.w	r2, r2, #32
 800a298:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b095      	sub	sp, #84	@ 0x54
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	330c      	adds	r3, #12
 800a2b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ba:	e853 3f00 	ldrex	r3, [r3]
 800a2be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	330c      	adds	r3, #12
 800a2ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a2d0:	643a      	str	r2, [r7, #64]	@ 0x40
 800a2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2d8:	e841 2300 	strex	r3, r2, [r1]
 800a2dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e5      	bne.n	800a2b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3314      	adds	r3, #20
 800a2ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	e853 3f00 	ldrex	r3, [r3]
 800a2f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	f023 0301 	bic.w	r3, r3, #1
 800a2fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3314      	adds	r3, #20
 800a302:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a304:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a306:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a308:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a30a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a30c:	e841 2300 	strex	r3, r2, [r1]
 800a310:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1e5      	bne.n	800a2e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d119      	bne.n	800a354 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	330c      	adds	r3, #12
 800a326:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	e853 3f00 	ldrex	r3, [r3]
 800a32e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	f023 0310 	bic.w	r3, r3, #16
 800a336:	647b      	str	r3, [r7, #68]	@ 0x44
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	330c      	adds	r3, #12
 800a33e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a340:	61ba      	str	r2, [r7, #24]
 800a342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a344:	6979      	ldr	r1, [r7, #20]
 800a346:	69ba      	ldr	r2, [r7, #24]
 800a348:	e841 2300 	strex	r3, r2, [r1]
 800a34c:	613b      	str	r3, [r7, #16]
   return(result);
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1e5      	bne.n	800a320 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2220      	movs	r2, #32
 800a358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a362:	bf00      	nop
 800a364:	3754      	adds	r7, #84	@ 0x54
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b084      	sub	sp, #16
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a37a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f7ff ff3d 	bl	800a208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a38e:	bf00      	nop
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a396:	b480      	push	{r7}
 800a398:	b085      	sub	sp, #20
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b21      	cmp	r3, #33	@ 0x21
 800a3a8:	d13e      	bne.n	800a428 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3b2:	d114      	bne.n	800a3de <UART_Transmit_IT+0x48>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d110      	bne.n	800a3de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a1b      	ldr	r3, [r3, #32]
 800a3c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	1c9a      	adds	r2, r3, #2
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	621a      	str	r2, [r3, #32]
 800a3dc:	e008      	b.n	800a3f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	1c59      	adds	r1, r3, #1
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	6211      	str	r1, [r2, #32]
 800a3e8:	781a      	ldrb	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10f      	bne.n	800a424 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68da      	ldr	r2, [r3, #12]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a412:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68da      	ldr	r2, [r3, #12]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a422:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	e000      	b.n	800a42a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a428:	2302      	movs	r3, #2
  }
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b082      	sub	sp, #8
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68da      	ldr	r2, [r3, #12]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a44c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2220      	movs	r2, #32
 800a452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff fecc 	bl	800a1f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b08c      	sub	sp, #48	@ 0x30
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b22      	cmp	r3, #34	@ 0x22
 800a478:	f040 80ae 	bne.w	800a5d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a484:	d117      	bne.n	800a4b6 <UART_Receive_IT+0x50>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d113      	bne.n	800a4b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a48e:	2300      	movs	r3, #0
 800a490:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a496:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ae:	1c9a      	adds	r2, r3, #2
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	629a      	str	r2, [r3, #40]	@ 0x28
 800a4b4:	e026      	b.n	800a504 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4c8:	d007      	beq.n	800a4da <UART_Receive_IT+0x74>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10a      	bne.n	800a4e8 <UART_Receive_IT+0x82>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d106      	bne.n	800a4e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	b2da      	uxtb	r2, r3
 800a4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e4:	701a      	strb	r2, [r3, #0]
 800a4e6:	e008      	b.n	800a4fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a508:	b29b      	uxth	r3, r3
 800a50a:	3b01      	subs	r3, #1
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	4619      	mov	r1, r3
 800a512:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a514:	2b00      	cmp	r3, #0
 800a516:	d15d      	bne.n	800a5d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68da      	ldr	r2, [r3, #12]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f022 0220 	bic.w	r2, r2, #32
 800a526:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a536:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	695a      	ldr	r2, [r3, #20]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f022 0201 	bic.w	r2, r2, #1
 800a546:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2220      	movs	r2, #32
 800a54c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d135      	bne.n	800a5ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	330c      	adds	r3, #12
 800a56a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	e853 3f00 	ldrex	r3, [r3]
 800a572:	613b      	str	r3, [r7, #16]
   return(result);
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	f023 0310 	bic.w	r3, r3, #16
 800a57a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	330c      	adds	r3, #12
 800a582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a584:	623a      	str	r2, [r7, #32]
 800a586:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a588:	69f9      	ldr	r1, [r7, #28]
 800a58a:	6a3a      	ldr	r2, [r7, #32]
 800a58c:	e841 2300 	strex	r3, r2, [r1]
 800a590:	61bb      	str	r3, [r7, #24]
   return(result);
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1e5      	bne.n	800a564 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0310 	and.w	r3, r3, #16
 800a5a2:	2b10      	cmp	r3, #16
 800a5a4:	d10a      	bne.n	800a5bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	60fb      	str	r3, [r7, #12]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	60fb      	str	r3, [r7, #12]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	60fb      	str	r3, [r7, #12]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7ff fe2a 	bl	800a21c <HAL_UARTEx_RxEventCallback>
 800a5c8:	e002      	b.n	800a5d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7fa f818 	bl	8004600 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	e002      	b.n	800a5da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	e000      	b.n	800a5da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a5d8:	2302      	movs	r3, #2
  }
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3730      	adds	r7, #48	@ 0x30
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
	...

0800a5e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5e8:	b0c0      	sub	sp, #256	@ 0x100
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a5fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a600:	68d9      	ldr	r1, [r3, #12]
 800a602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	ea40 0301 	orr.w	r3, r0, r1
 800a60c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a60e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a612:	689a      	ldr	r2, [r3, #8]
 800a614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	431a      	orrs	r2, r3
 800a61c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a620:	695b      	ldr	r3, [r3, #20]
 800a622:	431a      	orrs	r2, r3
 800a624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a628:	69db      	ldr	r3, [r3, #28]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a63c:	f021 010c 	bic.w	r1, r1, #12
 800a640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a64a:	430b      	orrs	r3, r1
 800a64c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a64e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a65a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a65e:	6999      	ldr	r1, [r3, #24]
 800a660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	ea40 0301 	orr.w	r3, r0, r1
 800a66a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a66c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	4b8f      	ldr	r3, [pc, #572]	@ (800a8b0 <UART_SetConfig+0x2cc>)
 800a674:	429a      	cmp	r2, r3
 800a676:	d005      	beq.n	800a684 <UART_SetConfig+0xa0>
 800a678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	4b8d      	ldr	r3, [pc, #564]	@ (800a8b4 <UART_SetConfig+0x2d0>)
 800a680:	429a      	cmp	r2, r3
 800a682:	d104      	bne.n	800a68e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a684:	f7fe fa32 	bl	8008aec <HAL_RCC_GetPCLK2Freq>
 800a688:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a68c:	e003      	b.n	800a696 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a68e:	f7fe fa19 	bl	8008ac4 <HAL_RCC_GetPCLK1Freq>
 800a692:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a69a:	69db      	ldr	r3, [r3, #28]
 800a69c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6a0:	f040 810c 	bne.w	800a8bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a6a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a6ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a6b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a6b6:	4622      	mov	r2, r4
 800a6b8:	462b      	mov	r3, r5
 800a6ba:	1891      	adds	r1, r2, r2
 800a6bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a6be:	415b      	adcs	r3, r3
 800a6c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	eb12 0801 	adds.w	r8, r2, r1
 800a6cc:	4629      	mov	r1, r5
 800a6ce:	eb43 0901 	adc.w	r9, r3, r1
 800a6d2:	f04f 0200 	mov.w	r2, #0
 800a6d6:	f04f 0300 	mov.w	r3, #0
 800a6da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a6de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a6e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a6e6:	4690      	mov	r8, r2
 800a6e8:	4699      	mov	r9, r3
 800a6ea:	4623      	mov	r3, r4
 800a6ec:	eb18 0303 	adds.w	r3, r8, r3
 800a6f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a6f4:	462b      	mov	r3, r5
 800a6f6:	eb49 0303 	adc.w	r3, r9, r3
 800a6fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a70a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a70e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a712:	460b      	mov	r3, r1
 800a714:	18db      	adds	r3, r3, r3
 800a716:	653b      	str	r3, [r7, #80]	@ 0x50
 800a718:	4613      	mov	r3, r2
 800a71a:	eb42 0303 	adc.w	r3, r2, r3
 800a71e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a720:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a724:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a728:	f7f6 faae 	bl	8000c88 <__aeabi_uldivmod>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	4b61      	ldr	r3, [pc, #388]	@ (800a8b8 <UART_SetConfig+0x2d4>)
 800a732:	fba3 2302 	umull	r2, r3, r3, r2
 800a736:	095b      	lsrs	r3, r3, #5
 800a738:	011c      	lsls	r4, r3, #4
 800a73a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a73e:	2200      	movs	r2, #0
 800a740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a744:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a748:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a74c:	4642      	mov	r2, r8
 800a74e:	464b      	mov	r3, r9
 800a750:	1891      	adds	r1, r2, r2
 800a752:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a754:	415b      	adcs	r3, r3
 800a756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a758:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a75c:	4641      	mov	r1, r8
 800a75e:	eb12 0a01 	adds.w	sl, r2, r1
 800a762:	4649      	mov	r1, r9
 800a764:	eb43 0b01 	adc.w	fp, r3, r1
 800a768:	f04f 0200 	mov.w	r2, #0
 800a76c:	f04f 0300 	mov.w	r3, #0
 800a770:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a774:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a778:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a77c:	4692      	mov	sl, r2
 800a77e:	469b      	mov	fp, r3
 800a780:	4643      	mov	r3, r8
 800a782:	eb1a 0303 	adds.w	r3, sl, r3
 800a786:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a78a:	464b      	mov	r3, r9
 800a78c:	eb4b 0303 	adc.w	r3, fp, r3
 800a790:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a7a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a7a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	18db      	adds	r3, r3, r3
 800a7ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	eb42 0303 	adc.w	r3, r2, r3
 800a7b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a7ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a7be:	f7f6 fa63 	bl	8000c88 <__aeabi_uldivmod>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	4b3b      	ldr	r3, [pc, #236]	@ (800a8b8 <UART_SetConfig+0x2d4>)
 800a7ca:	fba3 2301 	umull	r2, r3, r3, r1
 800a7ce:	095b      	lsrs	r3, r3, #5
 800a7d0:	2264      	movs	r2, #100	@ 0x64
 800a7d2:	fb02 f303 	mul.w	r3, r2, r3
 800a7d6:	1acb      	subs	r3, r1, r3
 800a7d8:	00db      	lsls	r3, r3, #3
 800a7da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a7de:	4b36      	ldr	r3, [pc, #216]	@ (800a8b8 <UART_SetConfig+0x2d4>)
 800a7e0:	fba3 2302 	umull	r2, r3, r3, r2
 800a7e4:	095b      	lsrs	r3, r3, #5
 800a7e6:	005b      	lsls	r3, r3, #1
 800a7e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a7ec:	441c      	add	r4, r3
 800a7ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a7fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a800:	4642      	mov	r2, r8
 800a802:	464b      	mov	r3, r9
 800a804:	1891      	adds	r1, r2, r2
 800a806:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a808:	415b      	adcs	r3, r3
 800a80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a80c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a810:	4641      	mov	r1, r8
 800a812:	1851      	adds	r1, r2, r1
 800a814:	6339      	str	r1, [r7, #48]	@ 0x30
 800a816:	4649      	mov	r1, r9
 800a818:	414b      	adcs	r3, r1
 800a81a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a81c:	f04f 0200 	mov.w	r2, #0
 800a820:	f04f 0300 	mov.w	r3, #0
 800a824:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a828:	4659      	mov	r1, fp
 800a82a:	00cb      	lsls	r3, r1, #3
 800a82c:	4651      	mov	r1, sl
 800a82e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a832:	4651      	mov	r1, sl
 800a834:	00ca      	lsls	r2, r1, #3
 800a836:	4610      	mov	r0, r2
 800a838:	4619      	mov	r1, r3
 800a83a:	4603      	mov	r3, r0
 800a83c:	4642      	mov	r2, r8
 800a83e:	189b      	adds	r3, r3, r2
 800a840:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a844:	464b      	mov	r3, r9
 800a846:	460a      	mov	r2, r1
 800a848:	eb42 0303 	adc.w	r3, r2, r3
 800a84c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a85c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a860:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a864:	460b      	mov	r3, r1
 800a866:	18db      	adds	r3, r3, r3
 800a868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a86a:	4613      	mov	r3, r2
 800a86c:	eb42 0303 	adc.w	r3, r2, r3
 800a870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a876:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a87a:	f7f6 fa05 	bl	8000c88 <__aeabi_uldivmod>
 800a87e:	4602      	mov	r2, r0
 800a880:	460b      	mov	r3, r1
 800a882:	4b0d      	ldr	r3, [pc, #52]	@ (800a8b8 <UART_SetConfig+0x2d4>)
 800a884:	fba3 1302 	umull	r1, r3, r3, r2
 800a888:	095b      	lsrs	r3, r3, #5
 800a88a:	2164      	movs	r1, #100	@ 0x64
 800a88c:	fb01 f303 	mul.w	r3, r1, r3
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	00db      	lsls	r3, r3, #3
 800a894:	3332      	adds	r3, #50	@ 0x32
 800a896:	4a08      	ldr	r2, [pc, #32]	@ (800a8b8 <UART_SetConfig+0x2d4>)
 800a898:	fba2 2303 	umull	r2, r3, r2, r3
 800a89c:	095b      	lsrs	r3, r3, #5
 800a89e:	f003 0207 	and.w	r2, r3, #7
 800a8a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4422      	add	r2, r4
 800a8aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a8ac:	e106      	b.n	800aabc <UART_SetConfig+0x4d8>
 800a8ae:	bf00      	nop
 800a8b0:	40011000 	.word	0x40011000
 800a8b4:	40011400 	.word	0x40011400
 800a8b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a8bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a8c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a8ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a8ce:	4642      	mov	r2, r8
 800a8d0:	464b      	mov	r3, r9
 800a8d2:	1891      	adds	r1, r2, r2
 800a8d4:	6239      	str	r1, [r7, #32]
 800a8d6:	415b      	adcs	r3, r3
 800a8d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a8de:	4641      	mov	r1, r8
 800a8e0:	1854      	adds	r4, r2, r1
 800a8e2:	4649      	mov	r1, r9
 800a8e4:	eb43 0501 	adc.w	r5, r3, r1
 800a8e8:	f04f 0200 	mov.w	r2, #0
 800a8ec:	f04f 0300 	mov.w	r3, #0
 800a8f0:	00eb      	lsls	r3, r5, #3
 800a8f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8f6:	00e2      	lsls	r2, r4, #3
 800a8f8:	4614      	mov	r4, r2
 800a8fa:	461d      	mov	r5, r3
 800a8fc:	4643      	mov	r3, r8
 800a8fe:	18e3      	adds	r3, r4, r3
 800a900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a904:	464b      	mov	r3, r9
 800a906:	eb45 0303 	adc.w	r3, r5, r3
 800a90a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a90e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a91a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a91e:	f04f 0200 	mov.w	r2, #0
 800a922:	f04f 0300 	mov.w	r3, #0
 800a926:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a92a:	4629      	mov	r1, r5
 800a92c:	008b      	lsls	r3, r1, #2
 800a92e:	4621      	mov	r1, r4
 800a930:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a934:	4621      	mov	r1, r4
 800a936:	008a      	lsls	r2, r1, #2
 800a938:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a93c:	f7f6 f9a4 	bl	8000c88 <__aeabi_uldivmod>
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	4b60      	ldr	r3, [pc, #384]	@ (800aac8 <UART_SetConfig+0x4e4>)
 800a946:	fba3 2302 	umull	r2, r3, r3, r2
 800a94a:	095b      	lsrs	r3, r3, #5
 800a94c:	011c      	lsls	r4, r3, #4
 800a94e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a952:	2200      	movs	r2, #0
 800a954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a958:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a95c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a960:	4642      	mov	r2, r8
 800a962:	464b      	mov	r3, r9
 800a964:	1891      	adds	r1, r2, r2
 800a966:	61b9      	str	r1, [r7, #24]
 800a968:	415b      	adcs	r3, r3
 800a96a:	61fb      	str	r3, [r7, #28]
 800a96c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a970:	4641      	mov	r1, r8
 800a972:	1851      	adds	r1, r2, r1
 800a974:	6139      	str	r1, [r7, #16]
 800a976:	4649      	mov	r1, r9
 800a978:	414b      	adcs	r3, r1
 800a97a:	617b      	str	r3, [r7, #20]
 800a97c:	f04f 0200 	mov.w	r2, #0
 800a980:	f04f 0300 	mov.w	r3, #0
 800a984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a988:	4659      	mov	r1, fp
 800a98a:	00cb      	lsls	r3, r1, #3
 800a98c:	4651      	mov	r1, sl
 800a98e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a992:	4651      	mov	r1, sl
 800a994:	00ca      	lsls	r2, r1, #3
 800a996:	4610      	mov	r0, r2
 800a998:	4619      	mov	r1, r3
 800a99a:	4603      	mov	r3, r0
 800a99c:	4642      	mov	r2, r8
 800a99e:	189b      	adds	r3, r3, r2
 800a9a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a9a4:	464b      	mov	r3, r9
 800a9a6:	460a      	mov	r2, r1
 800a9a8:	eb42 0303 	adc.w	r3, r2, r3
 800a9ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a9b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a9ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a9bc:	f04f 0200 	mov.w	r2, #0
 800a9c0:	f04f 0300 	mov.w	r3, #0
 800a9c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a9c8:	4649      	mov	r1, r9
 800a9ca:	008b      	lsls	r3, r1, #2
 800a9cc:	4641      	mov	r1, r8
 800a9ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9d2:	4641      	mov	r1, r8
 800a9d4:	008a      	lsls	r2, r1, #2
 800a9d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a9da:	f7f6 f955 	bl	8000c88 <__aeabi_uldivmod>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	4b38      	ldr	r3, [pc, #224]	@ (800aac8 <UART_SetConfig+0x4e4>)
 800a9e6:	fba3 2301 	umull	r2, r3, r3, r1
 800a9ea:	095b      	lsrs	r3, r3, #5
 800a9ec:	2264      	movs	r2, #100	@ 0x64
 800a9ee:	fb02 f303 	mul.w	r3, r2, r3
 800a9f2:	1acb      	subs	r3, r1, r3
 800a9f4:	011b      	lsls	r3, r3, #4
 800a9f6:	3332      	adds	r3, #50	@ 0x32
 800a9f8:	4a33      	ldr	r2, [pc, #204]	@ (800aac8 <UART_SetConfig+0x4e4>)
 800a9fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a9fe:	095b      	lsrs	r3, r3, #5
 800aa00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aa04:	441c      	add	r4, r3
 800aa06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	673b      	str	r3, [r7, #112]	@ 0x70
 800aa0e:	677a      	str	r2, [r7, #116]	@ 0x74
 800aa10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800aa14:	4642      	mov	r2, r8
 800aa16:	464b      	mov	r3, r9
 800aa18:	1891      	adds	r1, r2, r2
 800aa1a:	60b9      	str	r1, [r7, #8]
 800aa1c:	415b      	adcs	r3, r3
 800aa1e:	60fb      	str	r3, [r7, #12]
 800aa20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa24:	4641      	mov	r1, r8
 800aa26:	1851      	adds	r1, r2, r1
 800aa28:	6039      	str	r1, [r7, #0]
 800aa2a:	4649      	mov	r1, r9
 800aa2c:	414b      	adcs	r3, r1
 800aa2e:	607b      	str	r3, [r7, #4]
 800aa30:	f04f 0200 	mov.w	r2, #0
 800aa34:	f04f 0300 	mov.w	r3, #0
 800aa38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aa3c:	4659      	mov	r1, fp
 800aa3e:	00cb      	lsls	r3, r1, #3
 800aa40:	4651      	mov	r1, sl
 800aa42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa46:	4651      	mov	r1, sl
 800aa48:	00ca      	lsls	r2, r1, #3
 800aa4a:	4610      	mov	r0, r2
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	4603      	mov	r3, r0
 800aa50:	4642      	mov	r2, r8
 800aa52:	189b      	adds	r3, r3, r2
 800aa54:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa56:	464b      	mov	r3, r9
 800aa58:	460a      	mov	r2, r1
 800aa5a:	eb42 0303 	adc.w	r3, r2, r3
 800aa5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aa60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa6a:	667a      	str	r2, [r7, #100]	@ 0x64
 800aa6c:	f04f 0200 	mov.w	r2, #0
 800aa70:	f04f 0300 	mov.w	r3, #0
 800aa74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aa78:	4649      	mov	r1, r9
 800aa7a:	008b      	lsls	r3, r1, #2
 800aa7c:	4641      	mov	r1, r8
 800aa7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa82:	4641      	mov	r1, r8
 800aa84:	008a      	lsls	r2, r1, #2
 800aa86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aa8a:	f7f6 f8fd 	bl	8000c88 <__aeabi_uldivmod>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	460b      	mov	r3, r1
 800aa92:	4b0d      	ldr	r3, [pc, #52]	@ (800aac8 <UART_SetConfig+0x4e4>)
 800aa94:	fba3 1302 	umull	r1, r3, r3, r2
 800aa98:	095b      	lsrs	r3, r3, #5
 800aa9a:	2164      	movs	r1, #100	@ 0x64
 800aa9c:	fb01 f303 	mul.w	r3, r1, r3
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	011b      	lsls	r3, r3, #4
 800aaa4:	3332      	adds	r3, #50	@ 0x32
 800aaa6:	4a08      	ldr	r2, [pc, #32]	@ (800aac8 <UART_SetConfig+0x4e4>)
 800aaa8:	fba2 2303 	umull	r2, r3, r2, r3
 800aaac:	095b      	lsrs	r3, r3, #5
 800aaae:	f003 020f 	and.w	r2, r3, #15
 800aab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4422      	add	r2, r4
 800aaba:	609a      	str	r2, [r3, #8]
}
 800aabc:	bf00      	nop
 800aabe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800aac2:	46bd      	mov	sp, r7
 800aac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aac8:	51eb851f 	.word	0x51eb851f

0800aacc <atof>:
 800aacc:	2100      	movs	r1, #0
 800aace:	f000 be0d 	b.w	800b6ec <strtod>

0800aad2 <atoi>:
 800aad2:	220a      	movs	r2, #10
 800aad4:	2100      	movs	r1, #0
 800aad6:	f000 be91 	b.w	800b7fc <strtol>

0800aada <sulp>:
 800aada:	b570      	push	{r4, r5, r6, lr}
 800aadc:	4604      	mov	r4, r0
 800aade:	460d      	mov	r5, r1
 800aae0:	ec45 4b10 	vmov	d0, r4, r5
 800aae4:	4616      	mov	r6, r2
 800aae6:	f003 fd5b 	bl	800e5a0 <__ulp>
 800aaea:	ec51 0b10 	vmov	r0, r1, d0
 800aaee:	b17e      	cbz	r6, 800ab10 <sulp+0x36>
 800aaf0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aaf4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	dd09      	ble.n	800ab10 <sulp+0x36>
 800aafc:	051b      	lsls	r3, r3, #20
 800aafe:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ab02:	2400      	movs	r4, #0
 800ab04:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ab08:	4622      	mov	r2, r4
 800ab0a:	462b      	mov	r3, r5
 800ab0c:	f7f5 fd74 	bl	80005f8 <__aeabi_dmul>
 800ab10:	ec41 0b10 	vmov	d0, r0, r1
 800ab14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab18 <_strtod_l>:
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	b09f      	sub	sp, #124	@ 0x7c
 800ab1e:	460c      	mov	r4, r1
 800ab20:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ab22:	2200      	movs	r2, #0
 800ab24:	921a      	str	r2, [sp, #104]	@ 0x68
 800ab26:	9005      	str	r0, [sp, #20]
 800ab28:	f04f 0a00 	mov.w	sl, #0
 800ab2c:	f04f 0b00 	mov.w	fp, #0
 800ab30:	460a      	mov	r2, r1
 800ab32:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab34:	7811      	ldrb	r1, [r2, #0]
 800ab36:	292b      	cmp	r1, #43	@ 0x2b
 800ab38:	d04a      	beq.n	800abd0 <_strtod_l+0xb8>
 800ab3a:	d838      	bhi.n	800abae <_strtod_l+0x96>
 800ab3c:	290d      	cmp	r1, #13
 800ab3e:	d832      	bhi.n	800aba6 <_strtod_l+0x8e>
 800ab40:	2908      	cmp	r1, #8
 800ab42:	d832      	bhi.n	800abaa <_strtod_l+0x92>
 800ab44:	2900      	cmp	r1, #0
 800ab46:	d03b      	beq.n	800abc0 <_strtod_l+0xa8>
 800ab48:	2200      	movs	r2, #0
 800ab4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ab4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ab4e:	782a      	ldrb	r2, [r5, #0]
 800ab50:	2a30      	cmp	r2, #48	@ 0x30
 800ab52:	f040 80b3 	bne.w	800acbc <_strtod_l+0x1a4>
 800ab56:	786a      	ldrb	r2, [r5, #1]
 800ab58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab5c:	2a58      	cmp	r2, #88	@ 0x58
 800ab5e:	d16e      	bne.n	800ac3e <_strtod_l+0x126>
 800ab60:	9302      	str	r3, [sp, #8]
 800ab62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	ab1a      	add	r3, sp, #104	@ 0x68
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	4a8e      	ldr	r2, [pc, #568]	@ (800ada4 <_strtod_l+0x28c>)
 800ab6c:	9805      	ldr	r0, [sp, #20]
 800ab6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ab70:	a919      	add	r1, sp, #100	@ 0x64
 800ab72:	f002 fe07 	bl	800d784 <__gethex>
 800ab76:	f010 060f 	ands.w	r6, r0, #15
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	d005      	beq.n	800ab8a <_strtod_l+0x72>
 800ab7e:	2e06      	cmp	r6, #6
 800ab80:	d128      	bne.n	800abd4 <_strtod_l+0xbc>
 800ab82:	3501      	adds	r5, #1
 800ab84:	2300      	movs	r3, #0
 800ab86:	9519      	str	r5, [sp, #100]	@ 0x64
 800ab88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f040 858e 	bne.w	800b6ae <_strtod_l+0xb96>
 800ab92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab94:	b1cb      	cbz	r3, 800abca <_strtod_l+0xb2>
 800ab96:	4652      	mov	r2, sl
 800ab98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ab9c:	ec43 2b10 	vmov	d0, r2, r3
 800aba0:	b01f      	add	sp, #124	@ 0x7c
 800aba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba6:	2920      	cmp	r1, #32
 800aba8:	d1ce      	bne.n	800ab48 <_strtod_l+0x30>
 800abaa:	3201      	adds	r2, #1
 800abac:	e7c1      	b.n	800ab32 <_strtod_l+0x1a>
 800abae:	292d      	cmp	r1, #45	@ 0x2d
 800abb0:	d1ca      	bne.n	800ab48 <_strtod_l+0x30>
 800abb2:	2101      	movs	r1, #1
 800abb4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800abb6:	1c51      	adds	r1, r2, #1
 800abb8:	9119      	str	r1, [sp, #100]	@ 0x64
 800abba:	7852      	ldrb	r2, [r2, #1]
 800abbc:	2a00      	cmp	r2, #0
 800abbe:	d1c5      	bne.n	800ab4c <_strtod_l+0x34>
 800abc0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abc2:	9419      	str	r4, [sp, #100]	@ 0x64
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f040 8570 	bne.w	800b6aa <_strtod_l+0xb92>
 800abca:	4652      	mov	r2, sl
 800abcc:	465b      	mov	r3, fp
 800abce:	e7e5      	b.n	800ab9c <_strtod_l+0x84>
 800abd0:	2100      	movs	r1, #0
 800abd2:	e7ef      	b.n	800abb4 <_strtod_l+0x9c>
 800abd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800abd6:	b13a      	cbz	r2, 800abe8 <_strtod_l+0xd0>
 800abd8:	2135      	movs	r1, #53	@ 0x35
 800abda:	a81c      	add	r0, sp, #112	@ 0x70
 800abdc:	f003 fdda 	bl	800e794 <__copybits>
 800abe0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abe2:	9805      	ldr	r0, [sp, #20]
 800abe4:	f003 f9a8 	bl	800df38 <_Bfree>
 800abe8:	3e01      	subs	r6, #1
 800abea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800abec:	2e04      	cmp	r6, #4
 800abee:	d806      	bhi.n	800abfe <_strtod_l+0xe6>
 800abf0:	e8df f006 	tbb	[pc, r6]
 800abf4:	201d0314 	.word	0x201d0314
 800abf8:	14          	.byte	0x14
 800abf9:	00          	.byte	0x00
 800abfa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800abfe:	05e1      	lsls	r1, r4, #23
 800ac00:	bf48      	it	mi
 800ac02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ac06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac0a:	0d1b      	lsrs	r3, r3, #20
 800ac0c:	051b      	lsls	r3, r3, #20
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1bb      	bne.n	800ab8a <_strtod_l+0x72>
 800ac12:	f001 fe4f 	bl	800c8b4 <__errno>
 800ac16:	2322      	movs	r3, #34	@ 0x22
 800ac18:	6003      	str	r3, [r0, #0]
 800ac1a:	e7b6      	b.n	800ab8a <_strtod_l+0x72>
 800ac1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ac20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ac24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ac28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac2c:	e7e7      	b.n	800abfe <_strtod_l+0xe6>
 800ac2e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800adac <_strtod_l+0x294>
 800ac32:	e7e4      	b.n	800abfe <_strtod_l+0xe6>
 800ac34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ac38:	f04f 3aff 	mov.w	sl, #4294967295
 800ac3c:	e7df      	b.n	800abfe <_strtod_l+0xe6>
 800ac3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac40:	1c5a      	adds	r2, r3, #1
 800ac42:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac44:	785b      	ldrb	r3, [r3, #1]
 800ac46:	2b30      	cmp	r3, #48	@ 0x30
 800ac48:	d0f9      	beq.n	800ac3e <_strtod_l+0x126>
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d09d      	beq.n	800ab8a <_strtod_l+0x72>
 800ac4e:	2301      	movs	r3, #1
 800ac50:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac54:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac56:	2300      	movs	r3, #0
 800ac58:	9308      	str	r3, [sp, #32]
 800ac5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac5c:	461f      	mov	r7, r3
 800ac5e:	220a      	movs	r2, #10
 800ac60:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ac62:	7805      	ldrb	r5, [r0, #0]
 800ac64:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ac68:	b2d9      	uxtb	r1, r3
 800ac6a:	2909      	cmp	r1, #9
 800ac6c:	d928      	bls.n	800acc0 <_strtod_l+0x1a8>
 800ac6e:	494e      	ldr	r1, [pc, #312]	@ (800ada8 <_strtod_l+0x290>)
 800ac70:	2201      	movs	r2, #1
 800ac72:	f001 fd66 	bl	800c742 <strncmp>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d032      	beq.n	800ace0 <_strtod_l+0x1c8>
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	462a      	mov	r2, r5
 800ac7e:	4681      	mov	r9, r0
 800ac80:	463d      	mov	r5, r7
 800ac82:	4603      	mov	r3, r0
 800ac84:	2a65      	cmp	r2, #101	@ 0x65
 800ac86:	d001      	beq.n	800ac8c <_strtod_l+0x174>
 800ac88:	2a45      	cmp	r2, #69	@ 0x45
 800ac8a:	d114      	bne.n	800acb6 <_strtod_l+0x19e>
 800ac8c:	b91d      	cbnz	r5, 800ac96 <_strtod_l+0x17e>
 800ac8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac90:	4302      	orrs	r2, r0
 800ac92:	d095      	beq.n	800abc0 <_strtod_l+0xa8>
 800ac94:	2500      	movs	r5, #0
 800ac96:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ac98:	1c62      	adds	r2, r4, #1
 800ac9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac9c:	7862      	ldrb	r2, [r4, #1]
 800ac9e:	2a2b      	cmp	r2, #43	@ 0x2b
 800aca0:	d077      	beq.n	800ad92 <_strtod_l+0x27a>
 800aca2:	2a2d      	cmp	r2, #45	@ 0x2d
 800aca4:	d07b      	beq.n	800ad9e <_strtod_l+0x286>
 800aca6:	f04f 0c00 	mov.w	ip, #0
 800acaa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800acae:	2909      	cmp	r1, #9
 800acb0:	f240 8082 	bls.w	800adb8 <_strtod_l+0x2a0>
 800acb4:	9419      	str	r4, [sp, #100]	@ 0x64
 800acb6:	f04f 0800 	mov.w	r8, #0
 800acba:	e0a2      	b.n	800ae02 <_strtod_l+0x2ea>
 800acbc:	2300      	movs	r3, #0
 800acbe:	e7c7      	b.n	800ac50 <_strtod_l+0x138>
 800acc0:	2f08      	cmp	r7, #8
 800acc2:	bfd5      	itete	le
 800acc4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800acc6:	9908      	ldrgt	r1, [sp, #32]
 800acc8:	fb02 3301 	mlale	r3, r2, r1, r3
 800accc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800acd0:	f100 0001 	add.w	r0, r0, #1
 800acd4:	bfd4      	ite	le
 800acd6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800acd8:	9308      	strgt	r3, [sp, #32]
 800acda:	3701      	adds	r7, #1
 800acdc:	9019      	str	r0, [sp, #100]	@ 0x64
 800acde:	e7bf      	b.n	800ac60 <_strtod_l+0x148>
 800ace0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	9219      	str	r2, [sp, #100]	@ 0x64
 800ace6:	785a      	ldrb	r2, [r3, #1]
 800ace8:	b37f      	cbz	r7, 800ad4a <_strtod_l+0x232>
 800acea:	4681      	mov	r9, r0
 800acec:	463d      	mov	r5, r7
 800acee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800acf2:	2b09      	cmp	r3, #9
 800acf4:	d912      	bls.n	800ad1c <_strtod_l+0x204>
 800acf6:	2301      	movs	r3, #1
 800acf8:	e7c4      	b.n	800ac84 <_strtod_l+0x16c>
 800acfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acfc:	1c5a      	adds	r2, r3, #1
 800acfe:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad00:	785a      	ldrb	r2, [r3, #1]
 800ad02:	3001      	adds	r0, #1
 800ad04:	2a30      	cmp	r2, #48	@ 0x30
 800ad06:	d0f8      	beq.n	800acfa <_strtod_l+0x1e2>
 800ad08:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ad0c:	2b08      	cmp	r3, #8
 800ad0e:	f200 84d3 	bhi.w	800b6b8 <_strtod_l+0xba0>
 800ad12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad14:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad16:	4681      	mov	r9, r0
 800ad18:	2000      	movs	r0, #0
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	3a30      	subs	r2, #48	@ 0x30
 800ad1e:	f100 0301 	add.w	r3, r0, #1
 800ad22:	d02a      	beq.n	800ad7a <_strtod_l+0x262>
 800ad24:	4499      	add	r9, r3
 800ad26:	eb00 0c05 	add.w	ip, r0, r5
 800ad2a:	462b      	mov	r3, r5
 800ad2c:	210a      	movs	r1, #10
 800ad2e:	4563      	cmp	r3, ip
 800ad30:	d10d      	bne.n	800ad4e <_strtod_l+0x236>
 800ad32:	1c69      	adds	r1, r5, #1
 800ad34:	4401      	add	r1, r0
 800ad36:	4428      	add	r0, r5
 800ad38:	2808      	cmp	r0, #8
 800ad3a:	dc16      	bgt.n	800ad6a <_strtod_l+0x252>
 800ad3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad3e:	230a      	movs	r3, #10
 800ad40:	fb03 2300 	mla	r3, r3, r0, r2
 800ad44:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad46:	2300      	movs	r3, #0
 800ad48:	e018      	b.n	800ad7c <_strtod_l+0x264>
 800ad4a:	4638      	mov	r0, r7
 800ad4c:	e7da      	b.n	800ad04 <_strtod_l+0x1ec>
 800ad4e:	2b08      	cmp	r3, #8
 800ad50:	f103 0301 	add.w	r3, r3, #1
 800ad54:	dc03      	bgt.n	800ad5e <_strtod_l+0x246>
 800ad56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ad58:	434e      	muls	r6, r1
 800ad5a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ad5c:	e7e7      	b.n	800ad2e <_strtod_l+0x216>
 800ad5e:	2b10      	cmp	r3, #16
 800ad60:	bfde      	ittt	le
 800ad62:	9e08      	ldrle	r6, [sp, #32]
 800ad64:	434e      	mulle	r6, r1
 800ad66:	9608      	strle	r6, [sp, #32]
 800ad68:	e7e1      	b.n	800ad2e <_strtod_l+0x216>
 800ad6a:	280f      	cmp	r0, #15
 800ad6c:	dceb      	bgt.n	800ad46 <_strtod_l+0x22e>
 800ad6e:	9808      	ldr	r0, [sp, #32]
 800ad70:	230a      	movs	r3, #10
 800ad72:	fb03 2300 	mla	r3, r3, r0, r2
 800ad76:	9308      	str	r3, [sp, #32]
 800ad78:	e7e5      	b.n	800ad46 <_strtod_l+0x22e>
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad7e:	1c50      	adds	r0, r2, #1
 800ad80:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad82:	7852      	ldrb	r2, [r2, #1]
 800ad84:	4618      	mov	r0, r3
 800ad86:	460d      	mov	r5, r1
 800ad88:	e7b1      	b.n	800acee <_strtod_l+0x1d6>
 800ad8a:	f04f 0900 	mov.w	r9, #0
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e77d      	b.n	800ac8e <_strtod_l+0x176>
 800ad92:	f04f 0c00 	mov.w	ip, #0
 800ad96:	1ca2      	adds	r2, r4, #2
 800ad98:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad9a:	78a2      	ldrb	r2, [r4, #2]
 800ad9c:	e785      	b.n	800acaa <_strtod_l+0x192>
 800ad9e:	f04f 0c01 	mov.w	ip, #1
 800ada2:	e7f8      	b.n	800ad96 <_strtod_l+0x27e>
 800ada4:	08011544 	.word	0x08011544
 800ada8:	0801152c 	.word	0x0801152c
 800adac:	7ff00000 	.word	0x7ff00000
 800adb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adb2:	1c51      	adds	r1, r2, #1
 800adb4:	9119      	str	r1, [sp, #100]	@ 0x64
 800adb6:	7852      	ldrb	r2, [r2, #1]
 800adb8:	2a30      	cmp	r2, #48	@ 0x30
 800adba:	d0f9      	beq.n	800adb0 <_strtod_l+0x298>
 800adbc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800adc0:	2908      	cmp	r1, #8
 800adc2:	f63f af78 	bhi.w	800acb6 <_strtod_l+0x19e>
 800adc6:	3a30      	subs	r2, #48	@ 0x30
 800adc8:	920e      	str	r2, [sp, #56]	@ 0x38
 800adca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adcc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800adce:	f04f 080a 	mov.w	r8, #10
 800add2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800add4:	1c56      	adds	r6, r2, #1
 800add6:	9619      	str	r6, [sp, #100]	@ 0x64
 800add8:	7852      	ldrb	r2, [r2, #1]
 800adda:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800adde:	f1be 0f09 	cmp.w	lr, #9
 800ade2:	d939      	bls.n	800ae58 <_strtod_l+0x340>
 800ade4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ade6:	1a76      	subs	r6, r6, r1
 800ade8:	2e08      	cmp	r6, #8
 800adea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800adee:	dc03      	bgt.n	800adf8 <_strtod_l+0x2e0>
 800adf0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800adf2:	4588      	cmp	r8, r1
 800adf4:	bfa8      	it	ge
 800adf6:	4688      	movge	r8, r1
 800adf8:	f1bc 0f00 	cmp.w	ip, #0
 800adfc:	d001      	beq.n	800ae02 <_strtod_l+0x2ea>
 800adfe:	f1c8 0800 	rsb	r8, r8, #0
 800ae02:	2d00      	cmp	r5, #0
 800ae04:	d14e      	bne.n	800aea4 <_strtod_l+0x38c>
 800ae06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae08:	4308      	orrs	r0, r1
 800ae0a:	f47f aebe 	bne.w	800ab8a <_strtod_l+0x72>
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f47f aed6 	bne.w	800abc0 <_strtod_l+0xa8>
 800ae14:	2a69      	cmp	r2, #105	@ 0x69
 800ae16:	d028      	beq.n	800ae6a <_strtod_l+0x352>
 800ae18:	dc25      	bgt.n	800ae66 <_strtod_l+0x34e>
 800ae1a:	2a49      	cmp	r2, #73	@ 0x49
 800ae1c:	d025      	beq.n	800ae6a <_strtod_l+0x352>
 800ae1e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ae20:	f47f aece 	bne.w	800abc0 <_strtod_l+0xa8>
 800ae24:	499b      	ldr	r1, [pc, #620]	@ (800b094 <_strtod_l+0x57c>)
 800ae26:	a819      	add	r0, sp, #100	@ 0x64
 800ae28:	f002 fece 	bl	800dbc8 <__match>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	f43f aec7 	beq.w	800abc0 <_strtod_l+0xa8>
 800ae32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	2b28      	cmp	r3, #40	@ 0x28
 800ae38:	d12e      	bne.n	800ae98 <_strtod_l+0x380>
 800ae3a:	4997      	ldr	r1, [pc, #604]	@ (800b098 <_strtod_l+0x580>)
 800ae3c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ae3e:	a819      	add	r0, sp, #100	@ 0x64
 800ae40:	f002 fed6 	bl	800dbf0 <__hexnan>
 800ae44:	2805      	cmp	r0, #5
 800ae46:	d127      	bne.n	800ae98 <_strtod_l+0x380>
 800ae48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ae4a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ae4e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ae52:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ae56:	e698      	b.n	800ab8a <_strtod_l+0x72>
 800ae58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ae5a:	fb08 2101 	mla	r1, r8, r1, r2
 800ae5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ae62:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae64:	e7b5      	b.n	800add2 <_strtod_l+0x2ba>
 800ae66:	2a6e      	cmp	r2, #110	@ 0x6e
 800ae68:	e7da      	b.n	800ae20 <_strtod_l+0x308>
 800ae6a:	498c      	ldr	r1, [pc, #560]	@ (800b09c <_strtod_l+0x584>)
 800ae6c:	a819      	add	r0, sp, #100	@ 0x64
 800ae6e:	f002 feab 	bl	800dbc8 <__match>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	f43f aea4 	beq.w	800abc0 <_strtod_l+0xa8>
 800ae78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae7a:	4989      	ldr	r1, [pc, #548]	@ (800b0a0 <_strtod_l+0x588>)
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	a819      	add	r0, sp, #100	@ 0x64
 800ae80:	9319      	str	r3, [sp, #100]	@ 0x64
 800ae82:	f002 fea1 	bl	800dbc8 <__match>
 800ae86:	b910      	cbnz	r0, 800ae8e <_strtod_l+0x376>
 800ae88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ae8e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b0b0 <_strtod_l+0x598>
 800ae92:	f04f 0a00 	mov.w	sl, #0
 800ae96:	e678      	b.n	800ab8a <_strtod_l+0x72>
 800ae98:	4882      	ldr	r0, [pc, #520]	@ (800b0a4 <_strtod_l+0x58c>)
 800ae9a:	f001 fd49 	bl	800c930 <nan>
 800ae9e:	ec5b ab10 	vmov	sl, fp, d0
 800aea2:	e672      	b.n	800ab8a <_strtod_l+0x72>
 800aea4:	eba8 0309 	sub.w	r3, r8, r9
 800aea8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aeaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeac:	2f00      	cmp	r7, #0
 800aeae:	bf08      	it	eq
 800aeb0:	462f      	moveq	r7, r5
 800aeb2:	2d10      	cmp	r5, #16
 800aeb4:	462c      	mov	r4, r5
 800aeb6:	bfa8      	it	ge
 800aeb8:	2410      	movge	r4, #16
 800aeba:	f7f5 fb23 	bl	8000504 <__aeabi_ui2d>
 800aebe:	2d09      	cmp	r5, #9
 800aec0:	4682      	mov	sl, r0
 800aec2:	468b      	mov	fp, r1
 800aec4:	dc13      	bgt.n	800aeee <_strtod_l+0x3d6>
 800aec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f43f ae5e 	beq.w	800ab8a <_strtod_l+0x72>
 800aece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aed0:	dd78      	ble.n	800afc4 <_strtod_l+0x4ac>
 800aed2:	2b16      	cmp	r3, #22
 800aed4:	dc5f      	bgt.n	800af96 <_strtod_l+0x47e>
 800aed6:	4974      	ldr	r1, [pc, #464]	@ (800b0a8 <_strtod_l+0x590>)
 800aed8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aedc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aee0:	4652      	mov	r2, sl
 800aee2:	465b      	mov	r3, fp
 800aee4:	f7f5 fb88 	bl	80005f8 <__aeabi_dmul>
 800aee8:	4682      	mov	sl, r0
 800aeea:	468b      	mov	fp, r1
 800aeec:	e64d      	b.n	800ab8a <_strtod_l+0x72>
 800aeee:	4b6e      	ldr	r3, [pc, #440]	@ (800b0a8 <_strtod_l+0x590>)
 800aef0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aef4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aef8:	f7f5 fb7e 	bl	80005f8 <__aeabi_dmul>
 800aefc:	4682      	mov	sl, r0
 800aefe:	9808      	ldr	r0, [sp, #32]
 800af00:	468b      	mov	fp, r1
 800af02:	f7f5 faff 	bl	8000504 <__aeabi_ui2d>
 800af06:	4602      	mov	r2, r0
 800af08:	460b      	mov	r3, r1
 800af0a:	4650      	mov	r0, sl
 800af0c:	4659      	mov	r1, fp
 800af0e:	f7f5 f9bd 	bl	800028c <__adddf3>
 800af12:	2d0f      	cmp	r5, #15
 800af14:	4682      	mov	sl, r0
 800af16:	468b      	mov	fp, r1
 800af18:	ddd5      	ble.n	800aec6 <_strtod_l+0x3ae>
 800af1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af1c:	1b2c      	subs	r4, r5, r4
 800af1e:	441c      	add	r4, r3
 800af20:	2c00      	cmp	r4, #0
 800af22:	f340 8096 	ble.w	800b052 <_strtod_l+0x53a>
 800af26:	f014 030f 	ands.w	r3, r4, #15
 800af2a:	d00a      	beq.n	800af42 <_strtod_l+0x42a>
 800af2c:	495e      	ldr	r1, [pc, #376]	@ (800b0a8 <_strtod_l+0x590>)
 800af2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af32:	4652      	mov	r2, sl
 800af34:	465b      	mov	r3, fp
 800af36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af3a:	f7f5 fb5d 	bl	80005f8 <__aeabi_dmul>
 800af3e:	4682      	mov	sl, r0
 800af40:	468b      	mov	fp, r1
 800af42:	f034 040f 	bics.w	r4, r4, #15
 800af46:	d073      	beq.n	800b030 <_strtod_l+0x518>
 800af48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800af4c:	dd48      	ble.n	800afe0 <_strtod_l+0x4c8>
 800af4e:	2400      	movs	r4, #0
 800af50:	46a0      	mov	r8, r4
 800af52:	940a      	str	r4, [sp, #40]	@ 0x28
 800af54:	46a1      	mov	r9, r4
 800af56:	9a05      	ldr	r2, [sp, #20]
 800af58:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b0b0 <_strtod_l+0x598>
 800af5c:	2322      	movs	r3, #34	@ 0x22
 800af5e:	6013      	str	r3, [r2, #0]
 800af60:	f04f 0a00 	mov.w	sl, #0
 800af64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af66:	2b00      	cmp	r3, #0
 800af68:	f43f ae0f 	beq.w	800ab8a <_strtod_l+0x72>
 800af6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af6e:	9805      	ldr	r0, [sp, #20]
 800af70:	f002 ffe2 	bl	800df38 <_Bfree>
 800af74:	9805      	ldr	r0, [sp, #20]
 800af76:	4649      	mov	r1, r9
 800af78:	f002 ffde 	bl	800df38 <_Bfree>
 800af7c:	9805      	ldr	r0, [sp, #20]
 800af7e:	4641      	mov	r1, r8
 800af80:	f002 ffda 	bl	800df38 <_Bfree>
 800af84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af86:	9805      	ldr	r0, [sp, #20]
 800af88:	f002 ffd6 	bl	800df38 <_Bfree>
 800af8c:	9805      	ldr	r0, [sp, #20]
 800af8e:	4621      	mov	r1, r4
 800af90:	f002 ffd2 	bl	800df38 <_Bfree>
 800af94:	e5f9      	b.n	800ab8a <_strtod_l+0x72>
 800af96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800af9c:	4293      	cmp	r3, r2
 800af9e:	dbbc      	blt.n	800af1a <_strtod_l+0x402>
 800afa0:	4c41      	ldr	r4, [pc, #260]	@ (800b0a8 <_strtod_l+0x590>)
 800afa2:	f1c5 050f 	rsb	r5, r5, #15
 800afa6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800afaa:	4652      	mov	r2, sl
 800afac:	465b      	mov	r3, fp
 800afae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afb2:	f7f5 fb21 	bl	80005f8 <__aeabi_dmul>
 800afb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb8:	1b5d      	subs	r5, r3, r5
 800afba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800afbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800afc2:	e78f      	b.n	800aee4 <_strtod_l+0x3cc>
 800afc4:	3316      	adds	r3, #22
 800afc6:	dba8      	blt.n	800af1a <_strtod_l+0x402>
 800afc8:	4b37      	ldr	r3, [pc, #220]	@ (800b0a8 <_strtod_l+0x590>)
 800afca:	eba9 0808 	sub.w	r8, r9, r8
 800afce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800afd2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800afd6:	4650      	mov	r0, sl
 800afd8:	4659      	mov	r1, fp
 800afda:	f7f5 fc37 	bl	800084c <__aeabi_ddiv>
 800afde:	e783      	b.n	800aee8 <_strtod_l+0x3d0>
 800afe0:	4b32      	ldr	r3, [pc, #200]	@ (800b0ac <_strtod_l+0x594>)
 800afe2:	9308      	str	r3, [sp, #32]
 800afe4:	2300      	movs	r3, #0
 800afe6:	1124      	asrs	r4, r4, #4
 800afe8:	4650      	mov	r0, sl
 800afea:	4659      	mov	r1, fp
 800afec:	461e      	mov	r6, r3
 800afee:	2c01      	cmp	r4, #1
 800aff0:	dc21      	bgt.n	800b036 <_strtod_l+0x51e>
 800aff2:	b10b      	cbz	r3, 800aff8 <_strtod_l+0x4e0>
 800aff4:	4682      	mov	sl, r0
 800aff6:	468b      	mov	fp, r1
 800aff8:	492c      	ldr	r1, [pc, #176]	@ (800b0ac <_strtod_l+0x594>)
 800affa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800affe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b002:	4652      	mov	r2, sl
 800b004:	465b      	mov	r3, fp
 800b006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b00a:	f7f5 faf5 	bl	80005f8 <__aeabi_dmul>
 800b00e:	4b28      	ldr	r3, [pc, #160]	@ (800b0b0 <_strtod_l+0x598>)
 800b010:	460a      	mov	r2, r1
 800b012:	400b      	ands	r3, r1
 800b014:	4927      	ldr	r1, [pc, #156]	@ (800b0b4 <_strtod_l+0x59c>)
 800b016:	428b      	cmp	r3, r1
 800b018:	4682      	mov	sl, r0
 800b01a:	d898      	bhi.n	800af4e <_strtod_l+0x436>
 800b01c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b020:	428b      	cmp	r3, r1
 800b022:	bf86      	itte	hi
 800b024:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b0b8 <_strtod_l+0x5a0>
 800b028:	f04f 3aff 	movhi.w	sl, #4294967295
 800b02c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b030:	2300      	movs	r3, #0
 800b032:	9308      	str	r3, [sp, #32]
 800b034:	e07a      	b.n	800b12c <_strtod_l+0x614>
 800b036:	07e2      	lsls	r2, r4, #31
 800b038:	d505      	bpl.n	800b046 <_strtod_l+0x52e>
 800b03a:	9b08      	ldr	r3, [sp, #32]
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	f7f5 fada 	bl	80005f8 <__aeabi_dmul>
 800b044:	2301      	movs	r3, #1
 800b046:	9a08      	ldr	r2, [sp, #32]
 800b048:	3208      	adds	r2, #8
 800b04a:	3601      	adds	r6, #1
 800b04c:	1064      	asrs	r4, r4, #1
 800b04e:	9208      	str	r2, [sp, #32]
 800b050:	e7cd      	b.n	800afee <_strtod_l+0x4d6>
 800b052:	d0ed      	beq.n	800b030 <_strtod_l+0x518>
 800b054:	4264      	negs	r4, r4
 800b056:	f014 020f 	ands.w	r2, r4, #15
 800b05a:	d00a      	beq.n	800b072 <_strtod_l+0x55a>
 800b05c:	4b12      	ldr	r3, [pc, #72]	@ (800b0a8 <_strtod_l+0x590>)
 800b05e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b062:	4650      	mov	r0, sl
 800b064:	4659      	mov	r1, fp
 800b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06a:	f7f5 fbef 	bl	800084c <__aeabi_ddiv>
 800b06e:	4682      	mov	sl, r0
 800b070:	468b      	mov	fp, r1
 800b072:	1124      	asrs	r4, r4, #4
 800b074:	d0dc      	beq.n	800b030 <_strtod_l+0x518>
 800b076:	2c1f      	cmp	r4, #31
 800b078:	dd20      	ble.n	800b0bc <_strtod_l+0x5a4>
 800b07a:	2400      	movs	r4, #0
 800b07c:	46a0      	mov	r8, r4
 800b07e:	940a      	str	r4, [sp, #40]	@ 0x28
 800b080:	46a1      	mov	r9, r4
 800b082:	9a05      	ldr	r2, [sp, #20]
 800b084:	2322      	movs	r3, #34	@ 0x22
 800b086:	f04f 0a00 	mov.w	sl, #0
 800b08a:	f04f 0b00 	mov.w	fp, #0
 800b08e:	6013      	str	r3, [r2, #0]
 800b090:	e768      	b.n	800af64 <_strtod_l+0x44c>
 800b092:	bf00      	nop
 800b094:	0801168e 	.word	0x0801168e
 800b098:	08011530 	.word	0x08011530
 800b09c:	08011686 	.word	0x08011686
 800b0a0:	08011772 	.word	0x08011772
 800b0a4:	0801176e 	.word	0x0801176e
 800b0a8:	080118d8 	.word	0x080118d8
 800b0ac:	080118b0 	.word	0x080118b0
 800b0b0:	7ff00000 	.word	0x7ff00000
 800b0b4:	7ca00000 	.word	0x7ca00000
 800b0b8:	7fefffff 	.word	0x7fefffff
 800b0bc:	f014 0310 	ands.w	r3, r4, #16
 800b0c0:	bf18      	it	ne
 800b0c2:	236a      	movne	r3, #106	@ 0x6a
 800b0c4:	4ea9      	ldr	r6, [pc, #676]	@ (800b36c <_strtod_l+0x854>)
 800b0c6:	9308      	str	r3, [sp, #32]
 800b0c8:	4650      	mov	r0, sl
 800b0ca:	4659      	mov	r1, fp
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	07e2      	lsls	r2, r4, #31
 800b0d0:	d504      	bpl.n	800b0dc <_strtod_l+0x5c4>
 800b0d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b0d6:	f7f5 fa8f 	bl	80005f8 <__aeabi_dmul>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	1064      	asrs	r4, r4, #1
 800b0de:	f106 0608 	add.w	r6, r6, #8
 800b0e2:	d1f4      	bne.n	800b0ce <_strtod_l+0x5b6>
 800b0e4:	b10b      	cbz	r3, 800b0ea <_strtod_l+0x5d2>
 800b0e6:	4682      	mov	sl, r0
 800b0e8:	468b      	mov	fp, r1
 800b0ea:	9b08      	ldr	r3, [sp, #32]
 800b0ec:	b1b3      	cbz	r3, 800b11c <_strtod_l+0x604>
 800b0ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b0f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	4659      	mov	r1, fp
 800b0fa:	dd0f      	ble.n	800b11c <_strtod_l+0x604>
 800b0fc:	2b1f      	cmp	r3, #31
 800b0fe:	dd55      	ble.n	800b1ac <_strtod_l+0x694>
 800b100:	2b34      	cmp	r3, #52	@ 0x34
 800b102:	bfde      	ittt	le
 800b104:	f04f 33ff 	movle.w	r3, #4294967295
 800b108:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b10c:	4093      	lslle	r3, r2
 800b10e:	f04f 0a00 	mov.w	sl, #0
 800b112:	bfcc      	ite	gt
 800b114:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b118:	ea03 0b01 	andle.w	fp, r3, r1
 800b11c:	2200      	movs	r2, #0
 800b11e:	2300      	movs	r3, #0
 800b120:	4650      	mov	r0, sl
 800b122:	4659      	mov	r1, fp
 800b124:	f7f5 fcd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b128:	2800      	cmp	r0, #0
 800b12a:	d1a6      	bne.n	800b07a <_strtod_l+0x562>
 800b12c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b132:	9805      	ldr	r0, [sp, #20]
 800b134:	462b      	mov	r3, r5
 800b136:	463a      	mov	r2, r7
 800b138:	f002 ff66 	bl	800e008 <__s2b>
 800b13c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b13e:	2800      	cmp	r0, #0
 800b140:	f43f af05 	beq.w	800af4e <_strtod_l+0x436>
 800b144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b146:	2a00      	cmp	r2, #0
 800b148:	eba9 0308 	sub.w	r3, r9, r8
 800b14c:	bfa8      	it	ge
 800b14e:	2300      	movge	r3, #0
 800b150:	9312      	str	r3, [sp, #72]	@ 0x48
 800b152:	2400      	movs	r4, #0
 800b154:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b158:	9316      	str	r3, [sp, #88]	@ 0x58
 800b15a:	46a0      	mov	r8, r4
 800b15c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b15e:	9805      	ldr	r0, [sp, #20]
 800b160:	6859      	ldr	r1, [r3, #4]
 800b162:	f002 fea9 	bl	800deb8 <_Balloc>
 800b166:	4681      	mov	r9, r0
 800b168:	2800      	cmp	r0, #0
 800b16a:	f43f aef4 	beq.w	800af56 <_strtod_l+0x43e>
 800b16e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b170:	691a      	ldr	r2, [r3, #16]
 800b172:	3202      	adds	r2, #2
 800b174:	f103 010c 	add.w	r1, r3, #12
 800b178:	0092      	lsls	r2, r2, #2
 800b17a:	300c      	adds	r0, #12
 800b17c:	f001 fbc7 	bl	800c90e <memcpy>
 800b180:	ec4b ab10 	vmov	d0, sl, fp
 800b184:	9805      	ldr	r0, [sp, #20]
 800b186:	aa1c      	add	r2, sp, #112	@ 0x70
 800b188:	a91b      	add	r1, sp, #108	@ 0x6c
 800b18a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b18e:	f003 fa77 	bl	800e680 <__d2b>
 800b192:	901a      	str	r0, [sp, #104]	@ 0x68
 800b194:	2800      	cmp	r0, #0
 800b196:	f43f aede 	beq.w	800af56 <_strtod_l+0x43e>
 800b19a:	9805      	ldr	r0, [sp, #20]
 800b19c:	2101      	movs	r1, #1
 800b19e:	f002 ffc9 	bl	800e134 <__i2b>
 800b1a2:	4680      	mov	r8, r0
 800b1a4:	b948      	cbnz	r0, 800b1ba <_strtod_l+0x6a2>
 800b1a6:	f04f 0800 	mov.w	r8, #0
 800b1aa:	e6d4      	b.n	800af56 <_strtod_l+0x43e>
 800b1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b4:	ea03 0a0a 	and.w	sl, r3, sl
 800b1b8:	e7b0      	b.n	800b11c <_strtod_l+0x604>
 800b1ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b1bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b1be:	2d00      	cmp	r5, #0
 800b1c0:	bfab      	itete	ge
 800b1c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b1c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b1c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b1c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b1ca:	bfac      	ite	ge
 800b1cc:	18ef      	addge	r7, r5, r3
 800b1ce:	1b5e      	sublt	r6, r3, r5
 800b1d0:	9b08      	ldr	r3, [sp, #32]
 800b1d2:	1aed      	subs	r5, r5, r3
 800b1d4:	4415      	add	r5, r2
 800b1d6:	4b66      	ldr	r3, [pc, #408]	@ (800b370 <_strtod_l+0x858>)
 800b1d8:	3d01      	subs	r5, #1
 800b1da:	429d      	cmp	r5, r3
 800b1dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b1e0:	da50      	bge.n	800b284 <_strtod_l+0x76c>
 800b1e2:	1b5b      	subs	r3, r3, r5
 800b1e4:	2b1f      	cmp	r3, #31
 800b1e6:	eba2 0203 	sub.w	r2, r2, r3
 800b1ea:	f04f 0101 	mov.w	r1, #1
 800b1ee:	dc3d      	bgt.n	800b26c <_strtod_l+0x754>
 800b1f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b1f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1fa:	18bd      	adds	r5, r7, r2
 800b1fc:	9b08      	ldr	r3, [sp, #32]
 800b1fe:	42af      	cmp	r7, r5
 800b200:	4416      	add	r6, r2
 800b202:	441e      	add	r6, r3
 800b204:	463b      	mov	r3, r7
 800b206:	bfa8      	it	ge
 800b208:	462b      	movge	r3, r5
 800b20a:	42b3      	cmp	r3, r6
 800b20c:	bfa8      	it	ge
 800b20e:	4633      	movge	r3, r6
 800b210:	2b00      	cmp	r3, #0
 800b212:	bfc2      	ittt	gt
 800b214:	1aed      	subgt	r5, r5, r3
 800b216:	1af6      	subgt	r6, r6, r3
 800b218:	1aff      	subgt	r7, r7, r3
 800b21a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	dd16      	ble.n	800b24e <_strtod_l+0x736>
 800b220:	4641      	mov	r1, r8
 800b222:	9805      	ldr	r0, [sp, #20]
 800b224:	461a      	mov	r2, r3
 800b226:	f003 f845 	bl	800e2b4 <__pow5mult>
 800b22a:	4680      	mov	r8, r0
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d0ba      	beq.n	800b1a6 <_strtod_l+0x68e>
 800b230:	4601      	mov	r1, r0
 800b232:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b234:	9805      	ldr	r0, [sp, #20]
 800b236:	f002 ff93 	bl	800e160 <__multiply>
 800b23a:	900e      	str	r0, [sp, #56]	@ 0x38
 800b23c:	2800      	cmp	r0, #0
 800b23e:	f43f ae8a 	beq.w	800af56 <_strtod_l+0x43e>
 800b242:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b244:	9805      	ldr	r0, [sp, #20]
 800b246:	f002 fe77 	bl	800df38 <_Bfree>
 800b24a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b24c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b24e:	2d00      	cmp	r5, #0
 800b250:	dc1d      	bgt.n	800b28e <_strtod_l+0x776>
 800b252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b254:	2b00      	cmp	r3, #0
 800b256:	dd23      	ble.n	800b2a0 <_strtod_l+0x788>
 800b258:	4649      	mov	r1, r9
 800b25a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b25c:	9805      	ldr	r0, [sp, #20]
 800b25e:	f003 f829 	bl	800e2b4 <__pow5mult>
 800b262:	4681      	mov	r9, r0
 800b264:	b9e0      	cbnz	r0, 800b2a0 <_strtod_l+0x788>
 800b266:	f04f 0900 	mov.w	r9, #0
 800b26a:	e674      	b.n	800af56 <_strtod_l+0x43e>
 800b26c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b270:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b274:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b278:	35e2      	adds	r5, #226	@ 0xe2
 800b27a:	fa01 f305 	lsl.w	r3, r1, r5
 800b27e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b280:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b282:	e7ba      	b.n	800b1fa <_strtod_l+0x6e2>
 800b284:	2300      	movs	r3, #0
 800b286:	9310      	str	r3, [sp, #64]	@ 0x40
 800b288:	2301      	movs	r3, #1
 800b28a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b28c:	e7b5      	b.n	800b1fa <_strtod_l+0x6e2>
 800b28e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b290:	9805      	ldr	r0, [sp, #20]
 800b292:	462a      	mov	r2, r5
 800b294:	f003 f868 	bl	800e368 <__lshift>
 800b298:	901a      	str	r0, [sp, #104]	@ 0x68
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d1d9      	bne.n	800b252 <_strtod_l+0x73a>
 800b29e:	e65a      	b.n	800af56 <_strtod_l+0x43e>
 800b2a0:	2e00      	cmp	r6, #0
 800b2a2:	dd07      	ble.n	800b2b4 <_strtod_l+0x79c>
 800b2a4:	4649      	mov	r1, r9
 800b2a6:	9805      	ldr	r0, [sp, #20]
 800b2a8:	4632      	mov	r2, r6
 800b2aa:	f003 f85d 	bl	800e368 <__lshift>
 800b2ae:	4681      	mov	r9, r0
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	d0d8      	beq.n	800b266 <_strtod_l+0x74e>
 800b2b4:	2f00      	cmp	r7, #0
 800b2b6:	dd08      	ble.n	800b2ca <_strtod_l+0x7b2>
 800b2b8:	4641      	mov	r1, r8
 800b2ba:	9805      	ldr	r0, [sp, #20]
 800b2bc:	463a      	mov	r2, r7
 800b2be:	f003 f853 	bl	800e368 <__lshift>
 800b2c2:	4680      	mov	r8, r0
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	f43f ae46 	beq.w	800af56 <_strtod_l+0x43e>
 800b2ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2cc:	9805      	ldr	r0, [sp, #20]
 800b2ce:	464a      	mov	r2, r9
 800b2d0:	f003 f8d2 	bl	800e478 <__mdiff>
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	f43f ae3d 	beq.w	800af56 <_strtod_l+0x43e>
 800b2dc:	68c3      	ldr	r3, [r0, #12]
 800b2de:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	60c3      	str	r3, [r0, #12]
 800b2e4:	4641      	mov	r1, r8
 800b2e6:	f003 f8ab 	bl	800e440 <__mcmp>
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	da46      	bge.n	800b37c <_strtod_l+0x864>
 800b2ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2f0:	ea53 030a 	orrs.w	r3, r3, sl
 800b2f4:	d16c      	bne.n	800b3d0 <_strtod_l+0x8b8>
 800b2f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d168      	bne.n	800b3d0 <_strtod_l+0x8b8>
 800b2fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b302:	0d1b      	lsrs	r3, r3, #20
 800b304:	051b      	lsls	r3, r3, #20
 800b306:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b30a:	d961      	bls.n	800b3d0 <_strtod_l+0x8b8>
 800b30c:	6963      	ldr	r3, [r4, #20]
 800b30e:	b913      	cbnz	r3, 800b316 <_strtod_l+0x7fe>
 800b310:	6923      	ldr	r3, [r4, #16]
 800b312:	2b01      	cmp	r3, #1
 800b314:	dd5c      	ble.n	800b3d0 <_strtod_l+0x8b8>
 800b316:	4621      	mov	r1, r4
 800b318:	2201      	movs	r2, #1
 800b31a:	9805      	ldr	r0, [sp, #20]
 800b31c:	f003 f824 	bl	800e368 <__lshift>
 800b320:	4641      	mov	r1, r8
 800b322:	4604      	mov	r4, r0
 800b324:	f003 f88c 	bl	800e440 <__mcmp>
 800b328:	2800      	cmp	r0, #0
 800b32a:	dd51      	ble.n	800b3d0 <_strtod_l+0x8b8>
 800b32c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b330:	9a08      	ldr	r2, [sp, #32]
 800b332:	0d1b      	lsrs	r3, r3, #20
 800b334:	051b      	lsls	r3, r3, #20
 800b336:	2a00      	cmp	r2, #0
 800b338:	d06b      	beq.n	800b412 <_strtod_l+0x8fa>
 800b33a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b33e:	d868      	bhi.n	800b412 <_strtod_l+0x8fa>
 800b340:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b344:	f67f ae9d 	bls.w	800b082 <_strtod_l+0x56a>
 800b348:	4b0a      	ldr	r3, [pc, #40]	@ (800b374 <_strtod_l+0x85c>)
 800b34a:	4650      	mov	r0, sl
 800b34c:	4659      	mov	r1, fp
 800b34e:	2200      	movs	r2, #0
 800b350:	f7f5 f952 	bl	80005f8 <__aeabi_dmul>
 800b354:	4b08      	ldr	r3, [pc, #32]	@ (800b378 <_strtod_l+0x860>)
 800b356:	400b      	ands	r3, r1
 800b358:	4682      	mov	sl, r0
 800b35a:	468b      	mov	fp, r1
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f47f ae05 	bne.w	800af6c <_strtod_l+0x454>
 800b362:	9a05      	ldr	r2, [sp, #20]
 800b364:	2322      	movs	r3, #34	@ 0x22
 800b366:	6013      	str	r3, [r2, #0]
 800b368:	e600      	b.n	800af6c <_strtod_l+0x454>
 800b36a:	bf00      	nop
 800b36c:	08011558 	.word	0x08011558
 800b370:	fffffc02 	.word	0xfffffc02
 800b374:	39500000 	.word	0x39500000
 800b378:	7ff00000 	.word	0x7ff00000
 800b37c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b380:	d165      	bne.n	800b44e <_strtod_l+0x936>
 800b382:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b384:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b388:	b35a      	cbz	r2, 800b3e2 <_strtod_l+0x8ca>
 800b38a:	4a9f      	ldr	r2, [pc, #636]	@ (800b608 <_strtod_l+0xaf0>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d12b      	bne.n	800b3e8 <_strtod_l+0x8d0>
 800b390:	9b08      	ldr	r3, [sp, #32]
 800b392:	4651      	mov	r1, sl
 800b394:	b303      	cbz	r3, 800b3d8 <_strtod_l+0x8c0>
 800b396:	4b9d      	ldr	r3, [pc, #628]	@ (800b60c <_strtod_l+0xaf4>)
 800b398:	465a      	mov	r2, fp
 800b39a:	4013      	ands	r3, r2
 800b39c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b3a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a4:	d81b      	bhi.n	800b3de <_strtod_l+0x8c6>
 800b3a6:	0d1b      	lsrs	r3, r3, #20
 800b3a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b3ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b3b0:	4299      	cmp	r1, r3
 800b3b2:	d119      	bne.n	800b3e8 <_strtod_l+0x8d0>
 800b3b4:	4b96      	ldr	r3, [pc, #600]	@ (800b610 <_strtod_l+0xaf8>)
 800b3b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d102      	bne.n	800b3c2 <_strtod_l+0x8aa>
 800b3bc:	3101      	adds	r1, #1
 800b3be:	f43f adca 	beq.w	800af56 <_strtod_l+0x43e>
 800b3c2:	4b92      	ldr	r3, [pc, #584]	@ (800b60c <_strtod_l+0xaf4>)
 800b3c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3c6:	401a      	ands	r2, r3
 800b3c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b3cc:	f04f 0a00 	mov.w	sl, #0
 800b3d0:	9b08      	ldr	r3, [sp, #32]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1b8      	bne.n	800b348 <_strtod_l+0x830>
 800b3d6:	e5c9      	b.n	800af6c <_strtod_l+0x454>
 800b3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3dc:	e7e8      	b.n	800b3b0 <_strtod_l+0x898>
 800b3de:	4613      	mov	r3, r2
 800b3e0:	e7e6      	b.n	800b3b0 <_strtod_l+0x898>
 800b3e2:	ea53 030a 	orrs.w	r3, r3, sl
 800b3e6:	d0a1      	beq.n	800b32c <_strtod_l+0x814>
 800b3e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b3ea:	b1db      	cbz	r3, 800b424 <_strtod_l+0x90c>
 800b3ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3ee:	4213      	tst	r3, r2
 800b3f0:	d0ee      	beq.n	800b3d0 <_strtod_l+0x8b8>
 800b3f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3f4:	9a08      	ldr	r2, [sp, #32]
 800b3f6:	4650      	mov	r0, sl
 800b3f8:	4659      	mov	r1, fp
 800b3fa:	b1bb      	cbz	r3, 800b42c <_strtod_l+0x914>
 800b3fc:	f7ff fb6d 	bl	800aada <sulp>
 800b400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b404:	ec53 2b10 	vmov	r2, r3, d0
 800b408:	f7f4 ff40 	bl	800028c <__adddf3>
 800b40c:	4682      	mov	sl, r0
 800b40e:	468b      	mov	fp, r1
 800b410:	e7de      	b.n	800b3d0 <_strtod_l+0x8b8>
 800b412:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b416:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b41a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b41e:	f04f 3aff 	mov.w	sl, #4294967295
 800b422:	e7d5      	b.n	800b3d0 <_strtod_l+0x8b8>
 800b424:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b426:	ea13 0f0a 	tst.w	r3, sl
 800b42a:	e7e1      	b.n	800b3f0 <_strtod_l+0x8d8>
 800b42c:	f7ff fb55 	bl	800aada <sulp>
 800b430:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b434:	ec53 2b10 	vmov	r2, r3, d0
 800b438:	f7f4 ff26 	bl	8000288 <__aeabi_dsub>
 800b43c:	2200      	movs	r2, #0
 800b43e:	2300      	movs	r3, #0
 800b440:	4682      	mov	sl, r0
 800b442:	468b      	mov	fp, r1
 800b444:	f7f5 fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 800b448:	2800      	cmp	r0, #0
 800b44a:	d0c1      	beq.n	800b3d0 <_strtod_l+0x8b8>
 800b44c:	e619      	b.n	800b082 <_strtod_l+0x56a>
 800b44e:	4641      	mov	r1, r8
 800b450:	4620      	mov	r0, r4
 800b452:	f003 f96d 	bl	800e730 <__ratio>
 800b456:	ec57 6b10 	vmov	r6, r7, d0
 800b45a:	2200      	movs	r2, #0
 800b45c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b460:	4630      	mov	r0, r6
 800b462:	4639      	mov	r1, r7
 800b464:	f7f5 fb44 	bl	8000af0 <__aeabi_dcmple>
 800b468:	2800      	cmp	r0, #0
 800b46a:	d06f      	beq.n	800b54c <_strtod_l+0xa34>
 800b46c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d17a      	bne.n	800b568 <_strtod_l+0xa50>
 800b472:	f1ba 0f00 	cmp.w	sl, #0
 800b476:	d158      	bne.n	800b52a <_strtod_l+0xa12>
 800b478:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b47a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d15a      	bne.n	800b538 <_strtod_l+0xa20>
 800b482:	4b64      	ldr	r3, [pc, #400]	@ (800b614 <_strtod_l+0xafc>)
 800b484:	2200      	movs	r2, #0
 800b486:	4630      	mov	r0, r6
 800b488:	4639      	mov	r1, r7
 800b48a:	f7f5 fb27 	bl	8000adc <__aeabi_dcmplt>
 800b48e:	2800      	cmp	r0, #0
 800b490:	d159      	bne.n	800b546 <_strtod_l+0xa2e>
 800b492:	4630      	mov	r0, r6
 800b494:	4639      	mov	r1, r7
 800b496:	4b60      	ldr	r3, [pc, #384]	@ (800b618 <_strtod_l+0xb00>)
 800b498:	2200      	movs	r2, #0
 800b49a:	f7f5 f8ad 	bl	80005f8 <__aeabi_dmul>
 800b49e:	4606      	mov	r6, r0
 800b4a0:	460f      	mov	r7, r1
 800b4a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b4a6:	9606      	str	r6, [sp, #24]
 800b4a8:	9307      	str	r3, [sp, #28]
 800b4aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4ae:	4d57      	ldr	r5, [pc, #348]	@ (800b60c <_strtod_l+0xaf4>)
 800b4b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b4b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4b6:	401d      	ands	r5, r3
 800b4b8:	4b58      	ldr	r3, [pc, #352]	@ (800b61c <_strtod_l+0xb04>)
 800b4ba:	429d      	cmp	r5, r3
 800b4bc:	f040 80b2 	bne.w	800b624 <_strtod_l+0xb0c>
 800b4c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b4c6:	ec4b ab10 	vmov	d0, sl, fp
 800b4ca:	f003 f869 	bl	800e5a0 <__ulp>
 800b4ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4d2:	ec51 0b10 	vmov	r0, r1, d0
 800b4d6:	f7f5 f88f 	bl	80005f8 <__aeabi_dmul>
 800b4da:	4652      	mov	r2, sl
 800b4dc:	465b      	mov	r3, fp
 800b4de:	f7f4 fed5 	bl	800028c <__adddf3>
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4949      	ldr	r1, [pc, #292]	@ (800b60c <_strtod_l+0xaf4>)
 800b4e6:	4a4e      	ldr	r2, [pc, #312]	@ (800b620 <_strtod_l+0xb08>)
 800b4e8:	4019      	ands	r1, r3
 800b4ea:	4291      	cmp	r1, r2
 800b4ec:	4682      	mov	sl, r0
 800b4ee:	d942      	bls.n	800b576 <_strtod_l+0xa5e>
 800b4f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b4f2:	4b47      	ldr	r3, [pc, #284]	@ (800b610 <_strtod_l+0xaf8>)
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d103      	bne.n	800b500 <_strtod_l+0x9e8>
 800b4f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	f43f ad2b 	beq.w	800af56 <_strtod_l+0x43e>
 800b500:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b610 <_strtod_l+0xaf8>
 800b504:	f04f 3aff 	mov.w	sl, #4294967295
 800b508:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b50a:	9805      	ldr	r0, [sp, #20]
 800b50c:	f002 fd14 	bl	800df38 <_Bfree>
 800b510:	9805      	ldr	r0, [sp, #20]
 800b512:	4649      	mov	r1, r9
 800b514:	f002 fd10 	bl	800df38 <_Bfree>
 800b518:	9805      	ldr	r0, [sp, #20]
 800b51a:	4641      	mov	r1, r8
 800b51c:	f002 fd0c 	bl	800df38 <_Bfree>
 800b520:	9805      	ldr	r0, [sp, #20]
 800b522:	4621      	mov	r1, r4
 800b524:	f002 fd08 	bl	800df38 <_Bfree>
 800b528:	e618      	b.n	800b15c <_strtod_l+0x644>
 800b52a:	f1ba 0f01 	cmp.w	sl, #1
 800b52e:	d103      	bne.n	800b538 <_strtod_l+0xa20>
 800b530:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b532:	2b00      	cmp	r3, #0
 800b534:	f43f ada5 	beq.w	800b082 <_strtod_l+0x56a>
 800b538:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b5e8 <_strtod_l+0xad0>
 800b53c:	4f35      	ldr	r7, [pc, #212]	@ (800b614 <_strtod_l+0xafc>)
 800b53e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b542:	2600      	movs	r6, #0
 800b544:	e7b1      	b.n	800b4aa <_strtod_l+0x992>
 800b546:	4f34      	ldr	r7, [pc, #208]	@ (800b618 <_strtod_l+0xb00>)
 800b548:	2600      	movs	r6, #0
 800b54a:	e7aa      	b.n	800b4a2 <_strtod_l+0x98a>
 800b54c:	4b32      	ldr	r3, [pc, #200]	@ (800b618 <_strtod_l+0xb00>)
 800b54e:	4630      	mov	r0, r6
 800b550:	4639      	mov	r1, r7
 800b552:	2200      	movs	r2, #0
 800b554:	f7f5 f850 	bl	80005f8 <__aeabi_dmul>
 800b558:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b55a:	4606      	mov	r6, r0
 800b55c:	460f      	mov	r7, r1
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d09f      	beq.n	800b4a2 <_strtod_l+0x98a>
 800b562:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b566:	e7a0      	b.n	800b4aa <_strtod_l+0x992>
 800b568:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b5f0 <_strtod_l+0xad8>
 800b56c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b570:	ec57 6b17 	vmov	r6, r7, d7
 800b574:	e799      	b.n	800b4aa <_strtod_l+0x992>
 800b576:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b57a:	9b08      	ldr	r3, [sp, #32]
 800b57c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1c1      	bne.n	800b508 <_strtod_l+0x9f0>
 800b584:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b588:	0d1b      	lsrs	r3, r3, #20
 800b58a:	051b      	lsls	r3, r3, #20
 800b58c:	429d      	cmp	r5, r3
 800b58e:	d1bb      	bne.n	800b508 <_strtod_l+0x9f0>
 800b590:	4630      	mov	r0, r6
 800b592:	4639      	mov	r1, r7
 800b594:	f7f5 fb90 	bl	8000cb8 <__aeabi_d2lz>
 800b598:	f7f5 f800 	bl	800059c <__aeabi_l2d>
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	4639      	mov	r1, r7
 800b5a4:	f7f4 fe70 	bl	8000288 <__aeabi_dsub>
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b5b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5b6:	ea46 060a 	orr.w	r6, r6, sl
 800b5ba:	431e      	orrs	r6, r3
 800b5bc:	d06f      	beq.n	800b69e <_strtod_l+0xb86>
 800b5be:	a30e      	add	r3, pc, #56	@ (adr r3, 800b5f8 <_strtod_l+0xae0>)
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f7f5 fa8a 	bl	8000adc <__aeabi_dcmplt>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	f47f accf 	bne.w	800af6c <_strtod_l+0x454>
 800b5ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800b600 <_strtod_l+0xae8>)
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5d8:	f7f5 fa9e 	bl	8000b18 <__aeabi_dcmpgt>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d093      	beq.n	800b508 <_strtod_l+0x9f0>
 800b5e0:	e4c4      	b.n	800af6c <_strtod_l+0x454>
 800b5e2:	bf00      	nop
 800b5e4:	f3af 8000 	nop.w
 800b5e8:	00000000 	.word	0x00000000
 800b5ec:	bff00000 	.word	0xbff00000
 800b5f0:	00000000 	.word	0x00000000
 800b5f4:	3ff00000 	.word	0x3ff00000
 800b5f8:	94a03595 	.word	0x94a03595
 800b5fc:	3fdfffff 	.word	0x3fdfffff
 800b600:	35afe535 	.word	0x35afe535
 800b604:	3fe00000 	.word	0x3fe00000
 800b608:	000fffff 	.word	0x000fffff
 800b60c:	7ff00000 	.word	0x7ff00000
 800b610:	7fefffff 	.word	0x7fefffff
 800b614:	3ff00000 	.word	0x3ff00000
 800b618:	3fe00000 	.word	0x3fe00000
 800b61c:	7fe00000 	.word	0x7fe00000
 800b620:	7c9fffff 	.word	0x7c9fffff
 800b624:	9b08      	ldr	r3, [sp, #32]
 800b626:	b323      	cbz	r3, 800b672 <_strtod_l+0xb5a>
 800b628:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b62c:	d821      	bhi.n	800b672 <_strtod_l+0xb5a>
 800b62e:	a328      	add	r3, pc, #160	@ (adr r3, 800b6d0 <_strtod_l+0xbb8>)
 800b630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b634:	4630      	mov	r0, r6
 800b636:	4639      	mov	r1, r7
 800b638:	f7f5 fa5a 	bl	8000af0 <__aeabi_dcmple>
 800b63c:	b1a0      	cbz	r0, 800b668 <_strtod_l+0xb50>
 800b63e:	4639      	mov	r1, r7
 800b640:	4630      	mov	r0, r6
 800b642:	f7f5 fab1 	bl	8000ba8 <__aeabi_d2uiz>
 800b646:	2801      	cmp	r0, #1
 800b648:	bf38      	it	cc
 800b64a:	2001      	movcc	r0, #1
 800b64c:	f7f4 ff5a 	bl	8000504 <__aeabi_ui2d>
 800b650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b652:	4606      	mov	r6, r0
 800b654:	460f      	mov	r7, r1
 800b656:	b9fb      	cbnz	r3, 800b698 <_strtod_l+0xb80>
 800b658:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b65c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b65e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b660:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b664:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b668:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b66a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b66e:	1b5b      	subs	r3, r3, r5
 800b670:	9311      	str	r3, [sp, #68]	@ 0x44
 800b672:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b676:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b67a:	f002 ff91 	bl	800e5a0 <__ulp>
 800b67e:	4650      	mov	r0, sl
 800b680:	ec53 2b10 	vmov	r2, r3, d0
 800b684:	4659      	mov	r1, fp
 800b686:	f7f4 ffb7 	bl	80005f8 <__aeabi_dmul>
 800b68a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b68e:	f7f4 fdfd 	bl	800028c <__adddf3>
 800b692:	4682      	mov	sl, r0
 800b694:	468b      	mov	fp, r1
 800b696:	e770      	b.n	800b57a <_strtod_l+0xa62>
 800b698:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b69c:	e7e0      	b.n	800b660 <_strtod_l+0xb48>
 800b69e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b6d8 <_strtod_l+0xbc0>)
 800b6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a4:	f7f5 fa1a 	bl	8000adc <__aeabi_dcmplt>
 800b6a8:	e798      	b.n	800b5dc <_strtod_l+0xac4>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b6b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6b2:	6013      	str	r3, [r2, #0]
 800b6b4:	f7ff ba6d 	b.w	800ab92 <_strtod_l+0x7a>
 800b6b8:	2a65      	cmp	r2, #101	@ 0x65
 800b6ba:	f43f ab66 	beq.w	800ad8a <_strtod_l+0x272>
 800b6be:	2a45      	cmp	r2, #69	@ 0x45
 800b6c0:	f43f ab63 	beq.w	800ad8a <_strtod_l+0x272>
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	f7ff bb9e 	b.w	800ae06 <_strtod_l+0x2ee>
 800b6ca:	bf00      	nop
 800b6cc:	f3af 8000 	nop.w
 800b6d0:	ffc00000 	.word	0xffc00000
 800b6d4:	41dfffff 	.word	0x41dfffff
 800b6d8:	94a03595 	.word	0x94a03595
 800b6dc:	3fcfffff 	.word	0x3fcfffff

0800b6e0 <_strtod_r>:
 800b6e0:	4b01      	ldr	r3, [pc, #4]	@ (800b6e8 <_strtod_r+0x8>)
 800b6e2:	f7ff ba19 	b.w	800ab18 <_strtod_l>
 800b6e6:	bf00      	nop
 800b6e8:	200000e4 	.word	0x200000e4

0800b6ec <strtod>:
 800b6ec:	460a      	mov	r2, r1
 800b6ee:	4601      	mov	r1, r0
 800b6f0:	4802      	ldr	r0, [pc, #8]	@ (800b6fc <strtod+0x10>)
 800b6f2:	4b03      	ldr	r3, [pc, #12]	@ (800b700 <strtod+0x14>)
 800b6f4:	6800      	ldr	r0, [r0, #0]
 800b6f6:	f7ff ba0f 	b.w	800ab18 <_strtod_l>
 800b6fa:	bf00      	nop
 800b6fc:	20000250 	.word	0x20000250
 800b700:	200000e4 	.word	0x200000e4

0800b704 <_strtol_l.constprop.0>:
 800b704:	2b24      	cmp	r3, #36	@ 0x24
 800b706:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b70a:	4686      	mov	lr, r0
 800b70c:	4690      	mov	r8, r2
 800b70e:	d801      	bhi.n	800b714 <_strtol_l.constprop.0+0x10>
 800b710:	2b01      	cmp	r3, #1
 800b712:	d106      	bne.n	800b722 <_strtol_l.constprop.0+0x1e>
 800b714:	f001 f8ce 	bl	800c8b4 <__errno>
 800b718:	2316      	movs	r3, #22
 800b71a:	6003      	str	r3, [r0, #0]
 800b71c:	2000      	movs	r0, #0
 800b71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b722:	4834      	ldr	r0, [pc, #208]	@ (800b7f4 <_strtol_l.constprop.0+0xf0>)
 800b724:	460d      	mov	r5, r1
 800b726:	462a      	mov	r2, r5
 800b728:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b72c:	5d06      	ldrb	r6, [r0, r4]
 800b72e:	f016 0608 	ands.w	r6, r6, #8
 800b732:	d1f8      	bne.n	800b726 <_strtol_l.constprop.0+0x22>
 800b734:	2c2d      	cmp	r4, #45	@ 0x2d
 800b736:	d12d      	bne.n	800b794 <_strtol_l.constprop.0+0x90>
 800b738:	782c      	ldrb	r4, [r5, #0]
 800b73a:	2601      	movs	r6, #1
 800b73c:	1c95      	adds	r5, r2, #2
 800b73e:	f033 0210 	bics.w	r2, r3, #16
 800b742:	d109      	bne.n	800b758 <_strtol_l.constprop.0+0x54>
 800b744:	2c30      	cmp	r4, #48	@ 0x30
 800b746:	d12a      	bne.n	800b79e <_strtol_l.constprop.0+0x9a>
 800b748:	782a      	ldrb	r2, [r5, #0]
 800b74a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b74e:	2a58      	cmp	r2, #88	@ 0x58
 800b750:	d125      	bne.n	800b79e <_strtol_l.constprop.0+0x9a>
 800b752:	786c      	ldrb	r4, [r5, #1]
 800b754:	2310      	movs	r3, #16
 800b756:	3502      	adds	r5, #2
 800b758:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b75c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b760:	2200      	movs	r2, #0
 800b762:	fbbc f9f3 	udiv	r9, ip, r3
 800b766:	4610      	mov	r0, r2
 800b768:	fb03 ca19 	mls	sl, r3, r9, ip
 800b76c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b770:	2f09      	cmp	r7, #9
 800b772:	d81b      	bhi.n	800b7ac <_strtol_l.constprop.0+0xa8>
 800b774:	463c      	mov	r4, r7
 800b776:	42a3      	cmp	r3, r4
 800b778:	dd27      	ble.n	800b7ca <_strtol_l.constprop.0+0xc6>
 800b77a:	1c57      	adds	r7, r2, #1
 800b77c:	d007      	beq.n	800b78e <_strtol_l.constprop.0+0x8a>
 800b77e:	4581      	cmp	r9, r0
 800b780:	d320      	bcc.n	800b7c4 <_strtol_l.constprop.0+0xc0>
 800b782:	d101      	bne.n	800b788 <_strtol_l.constprop.0+0x84>
 800b784:	45a2      	cmp	sl, r4
 800b786:	db1d      	blt.n	800b7c4 <_strtol_l.constprop.0+0xc0>
 800b788:	fb00 4003 	mla	r0, r0, r3, r4
 800b78c:	2201      	movs	r2, #1
 800b78e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b792:	e7eb      	b.n	800b76c <_strtol_l.constprop.0+0x68>
 800b794:	2c2b      	cmp	r4, #43	@ 0x2b
 800b796:	bf04      	itt	eq
 800b798:	782c      	ldrbeq	r4, [r5, #0]
 800b79a:	1c95      	addeq	r5, r2, #2
 800b79c:	e7cf      	b.n	800b73e <_strtol_l.constprop.0+0x3a>
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1da      	bne.n	800b758 <_strtol_l.constprop.0+0x54>
 800b7a2:	2c30      	cmp	r4, #48	@ 0x30
 800b7a4:	bf0c      	ite	eq
 800b7a6:	2308      	moveq	r3, #8
 800b7a8:	230a      	movne	r3, #10
 800b7aa:	e7d5      	b.n	800b758 <_strtol_l.constprop.0+0x54>
 800b7ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b7b0:	2f19      	cmp	r7, #25
 800b7b2:	d801      	bhi.n	800b7b8 <_strtol_l.constprop.0+0xb4>
 800b7b4:	3c37      	subs	r4, #55	@ 0x37
 800b7b6:	e7de      	b.n	800b776 <_strtol_l.constprop.0+0x72>
 800b7b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b7bc:	2f19      	cmp	r7, #25
 800b7be:	d804      	bhi.n	800b7ca <_strtol_l.constprop.0+0xc6>
 800b7c0:	3c57      	subs	r4, #87	@ 0x57
 800b7c2:	e7d8      	b.n	800b776 <_strtol_l.constprop.0+0x72>
 800b7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c8:	e7e1      	b.n	800b78e <_strtol_l.constprop.0+0x8a>
 800b7ca:	1c53      	adds	r3, r2, #1
 800b7cc:	d108      	bne.n	800b7e0 <_strtol_l.constprop.0+0xdc>
 800b7ce:	2322      	movs	r3, #34	@ 0x22
 800b7d0:	f8ce 3000 	str.w	r3, [lr]
 800b7d4:	4660      	mov	r0, ip
 800b7d6:	f1b8 0f00 	cmp.w	r8, #0
 800b7da:	d0a0      	beq.n	800b71e <_strtol_l.constprop.0+0x1a>
 800b7dc:	1e69      	subs	r1, r5, #1
 800b7de:	e006      	b.n	800b7ee <_strtol_l.constprop.0+0xea>
 800b7e0:	b106      	cbz	r6, 800b7e4 <_strtol_l.constprop.0+0xe0>
 800b7e2:	4240      	negs	r0, r0
 800b7e4:	f1b8 0f00 	cmp.w	r8, #0
 800b7e8:	d099      	beq.n	800b71e <_strtol_l.constprop.0+0x1a>
 800b7ea:	2a00      	cmp	r2, #0
 800b7ec:	d1f6      	bne.n	800b7dc <_strtol_l.constprop.0+0xd8>
 800b7ee:	f8c8 1000 	str.w	r1, [r8]
 800b7f2:	e794      	b.n	800b71e <_strtol_l.constprop.0+0x1a>
 800b7f4:	08011581 	.word	0x08011581

0800b7f8 <_strtol_r>:
 800b7f8:	f7ff bf84 	b.w	800b704 <_strtol_l.constprop.0>

0800b7fc <strtol>:
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	460a      	mov	r2, r1
 800b800:	4601      	mov	r1, r0
 800b802:	4802      	ldr	r0, [pc, #8]	@ (800b80c <strtol+0x10>)
 800b804:	6800      	ldr	r0, [r0, #0]
 800b806:	f7ff bf7d 	b.w	800b704 <_strtol_l.constprop.0>
 800b80a:	bf00      	nop
 800b80c:	20000250 	.word	0x20000250

0800b810 <__cvt>:
 800b810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b814:	ec57 6b10 	vmov	r6, r7, d0
 800b818:	2f00      	cmp	r7, #0
 800b81a:	460c      	mov	r4, r1
 800b81c:	4619      	mov	r1, r3
 800b81e:	463b      	mov	r3, r7
 800b820:	bfbb      	ittet	lt
 800b822:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b826:	461f      	movlt	r7, r3
 800b828:	2300      	movge	r3, #0
 800b82a:	232d      	movlt	r3, #45	@ 0x2d
 800b82c:	700b      	strb	r3, [r1, #0]
 800b82e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b830:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b834:	4691      	mov	r9, r2
 800b836:	f023 0820 	bic.w	r8, r3, #32
 800b83a:	bfbc      	itt	lt
 800b83c:	4632      	movlt	r2, r6
 800b83e:	4616      	movlt	r6, r2
 800b840:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b844:	d005      	beq.n	800b852 <__cvt+0x42>
 800b846:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b84a:	d100      	bne.n	800b84e <__cvt+0x3e>
 800b84c:	3401      	adds	r4, #1
 800b84e:	2102      	movs	r1, #2
 800b850:	e000      	b.n	800b854 <__cvt+0x44>
 800b852:	2103      	movs	r1, #3
 800b854:	ab03      	add	r3, sp, #12
 800b856:	9301      	str	r3, [sp, #4]
 800b858:	ab02      	add	r3, sp, #8
 800b85a:	9300      	str	r3, [sp, #0]
 800b85c:	ec47 6b10 	vmov	d0, r6, r7
 800b860:	4653      	mov	r3, sl
 800b862:	4622      	mov	r2, r4
 800b864:	f001 f918 	bl	800ca98 <_dtoa_r>
 800b868:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b86c:	4605      	mov	r5, r0
 800b86e:	d119      	bne.n	800b8a4 <__cvt+0x94>
 800b870:	f019 0f01 	tst.w	r9, #1
 800b874:	d00e      	beq.n	800b894 <__cvt+0x84>
 800b876:	eb00 0904 	add.w	r9, r0, r4
 800b87a:	2200      	movs	r2, #0
 800b87c:	2300      	movs	r3, #0
 800b87e:	4630      	mov	r0, r6
 800b880:	4639      	mov	r1, r7
 800b882:	f7f5 f921 	bl	8000ac8 <__aeabi_dcmpeq>
 800b886:	b108      	cbz	r0, 800b88c <__cvt+0x7c>
 800b888:	f8cd 900c 	str.w	r9, [sp, #12]
 800b88c:	2230      	movs	r2, #48	@ 0x30
 800b88e:	9b03      	ldr	r3, [sp, #12]
 800b890:	454b      	cmp	r3, r9
 800b892:	d31e      	bcc.n	800b8d2 <__cvt+0xc2>
 800b894:	9b03      	ldr	r3, [sp, #12]
 800b896:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b898:	1b5b      	subs	r3, r3, r5
 800b89a:	4628      	mov	r0, r5
 800b89c:	6013      	str	r3, [r2, #0]
 800b89e:	b004      	add	sp, #16
 800b8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b8a8:	eb00 0904 	add.w	r9, r0, r4
 800b8ac:	d1e5      	bne.n	800b87a <__cvt+0x6a>
 800b8ae:	7803      	ldrb	r3, [r0, #0]
 800b8b0:	2b30      	cmp	r3, #48	@ 0x30
 800b8b2:	d10a      	bne.n	800b8ca <__cvt+0xba>
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	4639      	mov	r1, r7
 800b8bc:	f7f5 f904 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8c0:	b918      	cbnz	r0, 800b8ca <__cvt+0xba>
 800b8c2:	f1c4 0401 	rsb	r4, r4, #1
 800b8c6:	f8ca 4000 	str.w	r4, [sl]
 800b8ca:	f8da 3000 	ldr.w	r3, [sl]
 800b8ce:	4499      	add	r9, r3
 800b8d0:	e7d3      	b.n	800b87a <__cvt+0x6a>
 800b8d2:	1c59      	adds	r1, r3, #1
 800b8d4:	9103      	str	r1, [sp, #12]
 800b8d6:	701a      	strb	r2, [r3, #0]
 800b8d8:	e7d9      	b.n	800b88e <__cvt+0x7e>

0800b8da <__exponent>:
 800b8da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8dc:	2900      	cmp	r1, #0
 800b8de:	bfba      	itte	lt
 800b8e0:	4249      	neglt	r1, r1
 800b8e2:	232d      	movlt	r3, #45	@ 0x2d
 800b8e4:	232b      	movge	r3, #43	@ 0x2b
 800b8e6:	2909      	cmp	r1, #9
 800b8e8:	7002      	strb	r2, [r0, #0]
 800b8ea:	7043      	strb	r3, [r0, #1]
 800b8ec:	dd29      	ble.n	800b942 <__exponent+0x68>
 800b8ee:	f10d 0307 	add.w	r3, sp, #7
 800b8f2:	461d      	mov	r5, r3
 800b8f4:	270a      	movs	r7, #10
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	fbb1 f6f7 	udiv	r6, r1, r7
 800b8fc:	fb07 1416 	mls	r4, r7, r6, r1
 800b900:	3430      	adds	r4, #48	@ 0x30
 800b902:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b906:	460c      	mov	r4, r1
 800b908:	2c63      	cmp	r4, #99	@ 0x63
 800b90a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b90e:	4631      	mov	r1, r6
 800b910:	dcf1      	bgt.n	800b8f6 <__exponent+0x1c>
 800b912:	3130      	adds	r1, #48	@ 0x30
 800b914:	1e94      	subs	r4, r2, #2
 800b916:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b91a:	1c41      	adds	r1, r0, #1
 800b91c:	4623      	mov	r3, r4
 800b91e:	42ab      	cmp	r3, r5
 800b920:	d30a      	bcc.n	800b938 <__exponent+0x5e>
 800b922:	f10d 0309 	add.w	r3, sp, #9
 800b926:	1a9b      	subs	r3, r3, r2
 800b928:	42ac      	cmp	r4, r5
 800b92a:	bf88      	it	hi
 800b92c:	2300      	movhi	r3, #0
 800b92e:	3302      	adds	r3, #2
 800b930:	4403      	add	r3, r0
 800b932:	1a18      	subs	r0, r3, r0
 800b934:	b003      	add	sp, #12
 800b936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b938:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b93c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b940:	e7ed      	b.n	800b91e <__exponent+0x44>
 800b942:	2330      	movs	r3, #48	@ 0x30
 800b944:	3130      	adds	r1, #48	@ 0x30
 800b946:	7083      	strb	r3, [r0, #2]
 800b948:	70c1      	strb	r1, [r0, #3]
 800b94a:	1d03      	adds	r3, r0, #4
 800b94c:	e7f1      	b.n	800b932 <__exponent+0x58>
	...

0800b950 <_printf_float>:
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	b08d      	sub	sp, #52	@ 0x34
 800b956:	460c      	mov	r4, r1
 800b958:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b95c:	4616      	mov	r6, r2
 800b95e:	461f      	mov	r7, r3
 800b960:	4605      	mov	r5, r0
 800b962:	f000 ff5d 	bl	800c820 <_localeconv_r>
 800b966:	6803      	ldr	r3, [r0, #0]
 800b968:	9304      	str	r3, [sp, #16]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7f4 fc80 	bl	8000270 <strlen>
 800b970:	2300      	movs	r3, #0
 800b972:	930a      	str	r3, [sp, #40]	@ 0x28
 800b974:	f8d8 3000 	ldr.w	r3, [r8]
 800b978:	9005      	str	r0, [sp, #20]
 800b97a:	3307      	adds	r3, #7
 800b97c:	f023 0307 	bic.w	r3, r3, #7
 800b980:	f103 0208 	add.w	r2, r3, #8
 800b984:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b988:	f8d4 b000 	ldr.w	fp, [r4]
 800b98c:	f8c8 2000 	str.w	r2, [r8]
 800b990:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b994:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b998:	9307      	str	r3, [sp, #28]
 800b99a:	f8cd 8018 	str.w	r8, [sp, #24]
 800b99e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b9a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9a6:	4b9c      	ldr	r3, [pc, #624]	@ (800bc18 <_printf_float+0x2c8>)
 800b9a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ac:	f7f5 f8be 	bl	8000b2c <__aeabi_dcmpun>
 800b9b0:	bb70      	cbnz	r0, 800ba10 <_printf_float+0xc0>
 800b9b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9b6:	4b98      	ldr	r3, [pc, #608]	@ (800bc18 <_printf_float+0x2c8>)
 800b9b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9bc:	f7f5 f898 	bl	8000af0 <__aeabi_dcmple>
 800b9c0:	bb30      	cbnz	r0, 800ba10 <_printf_float+0xc0>
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	4640      	mov	r0, r8
 800b9c8:	4649      	mov	r1, r9
 800b9ca:	f7f5 f887 	bl	8000adc <__aeabi_dcmplt>
 800b9ce:	b110      	cbz	r0, 800b9d6 <_printf_float+0x86>
 800b9d0:	232d      	movs	r3, #45	@ 0x2d
 800b9d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9d6:	4a91      	ldr	r2, [pc, #580]	@ (800bc1c <_printf_float+0x2cc>)
 800b9d8:	4b91      	ldr	r3, [pc, #580]	@ (800bc20 <_printf_float+0x2d0>)
 800b9da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b9de:	bf94      	ite	ls
 800b9e0:	4690      	movls	r8, r2
 800b9e2:	4698      	movhi	r8, r3
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	6123      	str	r3, [r4, #16]
 800b9e8:	f02b 0304 	bic.w	r3, fp, #4
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	f04f 0900 	mov.w	r9, #0
 800b9f2:	9700      	str	r7, [sp, #0]
 800b9f4:	4633      	mov	r3, r6
 800b9f6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b9f8:	4621      	mov	r1, r4
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f000 f9d2 	bl	800bda4 <_printf_common>
 800ba00:	3001      	adds	r0, #1
 800ba02:	f040 808d 	bne.w	800bb20 <_printf_float+0x1d0>
 800ba06:	f04f 30ff 	mov.w	r0, #4294967295
 800ba0a:	b00d      	add	sp, #52	@ 0x34
 800ba0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba10:	4642      	mov	r2, r8
 800ba12:	464b      	mov	r3, r9
 800ba14:	4640      	mov	r0, r8
 800ba16:	4649      	mov	r1, r9
 800ba18:	f7f5 f888 	bl	8000b2c <__aeabi_dcmpun>
 800ba1c:	b140      	cbz	r0, 800ba30 <_printf_float+0xe0>
 800ba1e:	464b      	mov	r3, r9
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	bfbc      	itt	lt
 800ba24:	232d      	movlt	r3, #45	@ 0x2d
 800ba26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ba2a:	4a7e      	ldr	r2, [pc, #504]	@ (800bc24 <_printf_float+0x2d4>)
 800ba2c:	4b7e      	ldr	r3, [pc, #504]	@ (800bc28 <_printf_float+0x2d8>)
 800ba2e:	e7d4      	b.n	800b9da <_printf_float+0x8a>
 800ba30:	6863      	ldr	r3, [r4, #4]
 800ba32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ba36:	9206      	str	r2, [sp, #24]
 800ba38:	1c5a      	adds	r2, r3, #1
 800ba3a:	d13b      	bne.n	800bab4 <_printf_float+0x164>
 800ba3c:	2306      	movs	r3, #6
 800ba3e:	6063      	str	r3, [r4, #4]
 800ba40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ba44:	2300      	movs	r3, #0
 800ba46:	6022      	str	r2, [r4, #0]
 800ba48:	9303      	str	r3, [sp, #12]
 800ba4a:	ab0a      	add	r3, sp, #40	@ 0x28
 800ba4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ba50:	ab09      	add	r3, sp, #36	@ 0x24
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	6861      	ldr	r1, [r4, #4]
 800ba56:	ec49 8b10 	vmov	d0, r8, r9
 800ba5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ba5e:	4628      	mov	r0, r5
 800ba60:	f7ff fed6 	bl	800b810 <__cvt>
 800ba64:	9b06      	ldr	r3, [sp, #24]
 800ba66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba68:	2b47      	cmp	r3, #71	@ 0x47
 800ba6a:	4680      	mov	r8, r0
 800ba6c:	d129      	bne.n	800bac2 <_printf_float+0x172>
 800ba6e:	1cc8      	adds	r0, r1, #3
 800ba70:	db02      	blt.n	800ba78 <_printf_float+0x128>
 800ba72:	6863      	ldr	r3, [r4, #4]
 800ba74:	4299      	cmp	r1, r3
 800ba76:	dd41      	ble.n	800bafc <_printf_float+0x1ac>
 800ba78:	f1aa 0a02 	sub.w	sl, sl, #2
 800ba7c:	fa5f fa8a 	uxtb.w	sl, sl
 800ba80:	3901      	subs	r1, #1
 800ba82:	4652      	mov	r2, sl
 800ba84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ba88:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba8a:	f7ff ff26 	bl	800b8da <__exponent>
 800ba8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba90:	1813      	adds	r3, r2, r0
 800ba92:	2a01      	cmp	r2, #1
 800ba94:	4681      	mov	r9, r0
 800ba96:	6123      	str	r3, [r4, #16]
 800ba98:	dc02      	bgt.n	800baa0 <_printf_float+0x150>
 800ba9a:	6822      	ldr	r2, [r4, #0]
 800ba9c:	07d2      	lsls	r2, r2, #31
 800ba9e:	d501      	bpl.n	800baa4 <_printf_float+0x154>
 800baa0:	3301      	adds	r3, #1
 800baa2:	6123      	str	r3, [r4, #16]
 800baa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d0a2      	beq.n	800b9f2 <_printf_float+0xa2>
 800baac:	232d      	movs	r3, #45	@ 0x2d
 800baae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bab2:	e79e      	b.n	800b9f2 <_printf_float+0xa2>
 800bab4:	9a06      	ldr	r2, [sp, #24]
 800bab6:	2a47      	cmp	r2, #71	@ 0x47
 800bab8:	d1c2      	bne.n	800ba40 <_printf_float+0xf0>
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1c0      	bne.n	800ba40 <_printf_float+0xf0>
 800babe:	2301      	movs	r3, #1
 800bac0:	e7bd      	b.n	800ba3e <_printf_float+0xee>
 800bac2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bac6:	d9db      	bls.n	800ba80 <_printf_float+0x130>
 800bac8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bacc:	d118      	bne.n	800bb00 <_printf_float+0x1b0>
 800bace:	2900      	cmp	r1, #0
 800bad0:	6863      	ldr	r3, [r4, #4]
 800bad2:	dd0b      	ble.n	800baec <_printf_float+0x19c>
 800bad4:	6121      	str	r1, [r4, #16]
 800bad6:	b913      	cbnz	r3, 800bade <_printf_float+0x18e>
 800bad8:	6822      	ldr	r2, [r4, #0]
 800bada:	07d0      	lsls	r0, r2, #31
 800badc:	d502      	bpl.n	800bae4 <_printf_float+0x194>
 800bade:	3301      	adds	r3, #1
 800bae0:	440b      	add	r3, r1
 800bae2:	6123      	str	r3, [r4, #16]
 800bae4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bae6:	f04f 0900 	mov.w	r9, #0
 800baea:	e7db      	b.n	800baa4 <_printf_float+0x154>
 800baec:	b913      	cbnz	r3, 800baf4 <_printf_float+0x1a4>
 800baee:	6822      	ldr	r2, [r4, #0]
 800baf0:	07d2      	lsls	r2, r2, #31
 800baf2:	d501      	bpl.n	800baf8 <_printf_float+0x1a8>
 800baf4:	3302      	adds	r3, #2
 800baf6:	e7f4      	b.n	800bae2 <_printf_float+0x192>
 800baf8:	2301      	movs	r3, #1
 800bafa:	e7f2      	b.n	800bae2 <_printf_float+0x192>
 800bafc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bb00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb02:	4299      	cmp	r1, r3
 800bb04:	db05      	blt.n	800bb12 <_printf_float+0x1c2>
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	6121      	str	r1, [r4, #16]
 800bb0a:	07d8      	lsls	r0, r3, #31
 800bb0c:	d5ea      	bpl.n	800bae4 <_printf_float+0x194>
 800bb0e:	1c4b      	adds	r3, r1, #1
 800bb10:	e7e7      	b.n	800bae2 <_printf_float+0x192>
 800bb12:	2900      	cmp	r1, #0
 800bb14:	bfd4      	ite	le
 800bb16:	f1c1 0202 	rsble	r2, r1, #2
 800bb1a:	2201      	movgt	r2, #1
 800bb1c:	4413      	add	r3, r2
 800bb1e:	e7e0      	b.n	800bae2 <_printf_float+0x192>
 800bb20:	6823      	ldr	r3, [r4, #0]
 800bb22:	055a      	lsls	r2, r3, #21
 800bb24:	d407      	bmi.n	800bb36 <_printf_float+0x1e6>
 800bb26:	6923      	ldr	r3, [r4, #16]
 800bb28:	4642      	mov	r2, r8
 800bb2a:	4631      	mov	r1, r6
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	47b8      	blx	r7
 800bb30:	3001      	adds	r0, #1
 800bb32:	d12b      	bne.n	800bb8c <_printf_float+0x23c>
 800bb34:	e767      	b.n	800ba06 <_printf_float+0xb6>
 800bb36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb3a:	f240 80dd 	bls.w	800bcf8 <_printf_float+0x3a8>
 800bb3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bb42:	2200      	movs	r2, #0
 800bb44:	2300      	movs	r3, #0
 800bb46:	f7f4 ffbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d033      	beq.n	800bbb6 <_printf_float+0x266>
 800bb4e:	4a37      	ldr	r2, [pc, #220]	@ (800bc2c <_printf_float+0x2dc>)
 800bb50:	2301      	movs	r3, #1
 800bb52:	4631      	mov	r1, r6
 800bb54:	4628      	mov	r0, r5
 800bb56:	47b8      	blx	r7
 800bb58:	3001      	adds	r0, #1
 800bb5a:	f43f af54 	beq.w	800ba06 <_printf_float+0xb6>
 800bb5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bb62:	4543      	cmp	r3, r8
 800bb64:	db02      	blt.n	800bb6c <_printf_float+0x21c>
 800bb66:	6823      	ldr	r3, [r4, #0]
 800bb68:	07d8      	lsls	r0, r3, #31
 800bb6a:	d50f      	bpl.n	800bb8c <_printf_float+0x23c>
 800bb6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb70:	4631      	mov	r1, r6
 800bb72:	4628      	mov	r0, r5
 800bb74:	47b8      	blx	r7
 800bb76:	3001      	adds	r0, #1
 800bb78:	f43f af45 	beq.w	800ba06 <_printf_float+0xb6>
 800bb7c:	f04f 0900 	mov.w	r9, #0
 800bb80:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb84:	f104 0a1a 	add.w	sl, r4, #26
 800bb88:	45c8      	cmp	r8, r9
 800bb8a:	dc09      	bgt.n	800bba0 <_printf_float+0x250>
 800bb8c:	6823      	ldr	r3, [r4, #0]
 800bb8e:	079b      	lsls	r3, r3, #30
 800bb90:	f100 8103 	bmi.w	800bd9a <_printf_float+0x44a>
 800bb94:	68e0      	ldr	r0, [r4, #12]
 800bb96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb98:	4298      	cmp	r0, r3
 800bb9a:	bfb8      	it	lt
 800bb9c:	4618      	movlt	r0, r3
 800bb9e:	e734      	b.n	800ba0a <_printf_float+0xba>
 800bba0:	2301      	movs	r3, #1
 800bba2:	4652      	mov	r2, sl
 800bba4:	4631      	mov	r1, r6
 800bba6:	4628      	mov	r0, r5
 800bba8:	47b8      	blx	r7
 800bbaa:	3001      	adds	r0, #1
 800bbac:	f43f af2b 	beq.w	800ba06 <_printf_float+0xb6>
 800bbb0:	f109 0901 	add.w	r9, r9, #1
 800bbb4:	e7e8      	b.n	800bb88 <_printf_float+0x238>
 800bbb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	dc39      	bgt.n	800bc30 <_printf_float+0x2e0>
 800bbbc:	4a1b      	ldr	r2, [pc, #108]	@ (800bc2c <_printf_float+0x2dc>)
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	4631      	mov	r1, r6
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	47b8      	blx	r7
 800bbc6:	3001      	adds	r0, #1
 800bbc8:	f43f af1d 	beq.w	800ba06 <_printf_float+0xb6>
 800bbcc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bbd0:	ea59 0303 	orrs.w	r3, r9, r3
 800bbd4:	d102      	bne.n	800bbdc <_printf_float+0x28c>
 800bbd6:	6823      	ldr	r3, [r4, #0]
 800bbd8:	07d9      	lsls	r1, r3, #31
 800bbda:	d5d7      	bpl.n	800bb8c <_printf_float+0x23c>
 800bbdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbe0:	4631      	mov	r1, r6
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	47b8      	blx	r7
 800bbe6:	3001      	adds	r0, #1
 800bbe8:	f43f af0d 	beq.w	800ba06 <_printf_float+0xb6>
 800bbec:	f04f 0a00 	mov.w	sl, #0
 800bbf0:	f104 0b1a 	add.w	fp, r4, #26
 800bbf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf6:	425b      	negs	r3, r3
 800bbf8:	4553      	cmp	r3, sl
 800bbfa:	dc01      	bgt.n	800bc00 <_printf_float+0x2b0>
 800bbfc:	464b      	mov	r3, r9
 800bbfe:	e793      	b.n	800bb28 <_printf_float+0x1d8>
 800bc00:	2301      	movs	r3, #1
 800bc02:	465a      	mov	r2, fp
 800bc04:	4631      	mov	r1, r6
 800bc06:	4628      	mov	r0, r5
 800bc08:	47b8      	blx	r7
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	f43f aefb 	beq.w	800ba06 <_printf_float+0xb6>
 800bc10:	f10a 0a01 	add.w	sl, sl, #1
 800bc14:	e7ee      	b.n	800bbf4 <_printf_float+0x2a4>
 800bc16:	bf00      	nop
 800bc18:	7fefffff 	.word	0x7fefffff
 800bc1c:	08011681 	.word	0x08011681
 800bc20:	08011685 	.word	0x08011685
 800bc24:	08011689 	.word	0x08011689
 800bc28:	0801168d 	.word	0x0801168d
 800bc2c:	08011691 	.word	0x08011691
 800bc30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc32:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bc36:	4553      	cmp	r3, sl
 800bc38:	bfa8      	it	ge
 800bc3a:	4653      	movge	r3, sl
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	4699      	mov	r9, r3
 800bc40:	dc36      	bgt.n	800bcb0 <_printf_float+0x360>
 800bc42:	f04f 0b00 	mov.w	fp, #0
 800bc46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc4a:	f104 021a 	add.w	r2, r4, #26
 800bc4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc50:	9306      	str	r3, [sp, #24]
 800bc52:	eba3 0309 	sub.w	r3, r3, r9
 800bc56:	455b      	cmp	r3, fp
 800bc58:	dc31      	bgt.n	800bcbe <_printf_float+0x36e>
 800bc5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc5c:	459a      	cmp	sl, r3
 800bc5e:	dc3a      	bgt.n	800bcd6 <_printf_float+0x386>
 800bc60:	6823      	ldr	r3, [r4, #0]
 800bc62:	07da      	lsls	r2, r3, #31
 800bc64:	d437      	bmi.n	800bcd6 <_printf_float+0x386>
 800bc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc68:	ebaa 0903 	sub.w	r9, sl, r3
 800bc6c:	9b06      	ldr	r3, [sp, #24]
 800bc6e:	ebaa 0303 	sub.w	r3, sl, r3
 800bc72:	4599      	cmp	r9, r3
 800bc74:	bfa8      	it	ge
 800bc76:	4699      	movge	r9, r3
 800bc78:	f1b9 0f00 	cmp.w	r9, #0
 800bc7c:	dc33      	bgt.n	800bce6 <_printf_float+0x396>
 800bc7e:	f04f 0800 	mov.w	r8, #0
 800bc82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc86:	f104 0b1a 	add.w	fp, r4, #26
 800bc8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc8c:	ebaa 0303 	sub.w	r3, sl, r3
 800bc90:	eba3 0309 	sub.w	r3, r3, r9
 800bc94:	4543      	cmp	r3, r8
 800bc96:	f77f af79 	ble.w	800bb8c <_printf_float+0x23c>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	465a      	mov	r2, fp
 800bc9e:	4631      	mov	r1, r6
 800bca0:	4628      	mov	r0, r5
 800bca2:	47b8      	blx	r7
 800bca4:	3001      	adds	r0, #1
 800bca6:	f43f aeae 	beq.w	800ba06 <_printf_float+0xb6>
 800bcaa:	f108 0801 	add.w	r8, r8, #1
 800bcae:	e7ec      	b.n	800bc8a <_printf_float+0x33a>
 800bcb0:	4642      	mov	r2, r8
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	47b8      	blx	r7
 800bcb8:	3001      	adds	r0, #1
 800bcba:	d1c2      	bne.n	800bc42 <_printf_float+0x2f2>
 800bcbc:	e6a3      	b.n	800ba06 <_printf_float+0xb6>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	4631      	mov	r1, r6
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	9206      	str	r2, [sp, #24]
 800bcc6:	47b8      	blx	r7
 800bcc8:	3001      	adds	r0, #1
 800bcca:	f43f ae9c 	beq.w	800ba06 <_printf_float+0xb6>
 800bcce:	9a06      	ldr	r2, [sp, #24]
 800bcd0:	f10b 0b01 	add.w	fp, fp, #1
 800bcd4:	e7bb      	b.n	800bc4e <_printf_float+0x2fe>
 800bcd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcda:	4631      	mov	r1, r6
 800bcdc:	4628      	mov	r0, r5
 800bcde:	47b8      	blx	r7
 800bce0:	3001      	adds	r0, #1
 800bce2:	d1c0      	bne.n	800bc66 <_printf_float+0x316>
 800bce4:	e68f      	b.n	800ba06 <_printf_float+0xb6>
 800bce6:	9a06      	ldr	r2, [sp, #24]
 800bce8:	464b      	mov	r3, r9
 800bcea:	4442      	add	r2, r8
 800bcec:	4631      	mov	r1, r6
 800bcee:	4628      	mov	r0, r5
 800bcf0:	47b8      	blx	r7
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	d1c3      	bne.n	800bc7e <_printf_float+0x32e>
 800bcf6:	e686      	b.n	800ba06 <_printf_float+0xb6>
 800bcf8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bcfc:	f1ba 0f01 	cmp.w	sl, #1
 800bd00:	dc01      	bgt.n	800bd06 <_printf_float+0x3b6>
 800bd02:	07db      	lsls	r3, r3, #31
 800bd04:	d536      	bpl.n	800bd74 <_printf_float+0x424>
 800bd06:	2301      	movs	r3, #1
 800bd08:	4642      	mov	r2, r8
 800bd0a:	4631      	mov	r1, r6
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	47b8      	blx	r7
 800bd10:	3001      	adds	r0, #1
 800bd12:	f43f ae78 	beq.w	800ba06 <_printf_float+0xb6>
 800bd16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd1a:	4631      	mov	r1, r6
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	47b8      	blx	r7
 800bd20:	3001      	adds	r0, #1
 800bd22:	f43f ae70 	beq.w	800ba06 <_printf_float+0xb6>
 800bd26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd32:	f7f4 fec9 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd36:	b9c0      	cbnz	r0, 800bd6a <_printf_float+0x41a>
 800bd38:	4653      	mov	r3, sl
 800bd3a:	f108 0201 	add.w	r2, r8, #1
 800bd3e:	4631      	mov	r1, r6
 800bd40:	4628      	mov	r0, r5
 800bd42:	47b8      	blx	r7
 800bd44:	3001      	adds	r0, #1
 800bd46:	d10c      	bne.n	800bd62 <_printf_float+0x412>
 800bd48:	e65d      	b.n	800ba06 <_printf_float+0xb6>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	465a      	mov	r2, fp
 800bd4e:	4631      	mov	r1, r6
 800bd50:	4628      	mov	r0, r5
 800bd52:	47b8      	blx	r7
 800bd54:	3001      	adds	r0, #1
 800bd56:	f43f ae56 	beq.w	800ba06 <_printf_float+0xb6>
 800bd5a:	f108 0801 	add.w	r8, r8, #1
 800bd5e:	45d0      	cmp	r8, sl
 800bd60:	dbf3      	blt.n	800bd4a <_printf_float+0x3fa>
 800bd62:	464b      	mov	r3, r9
 800bd64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bd68:	e6df      	b.n	800bb2a <_printf_float+0x1da>
 800bd6a:	f04f 0800 	mov.w	r8, #0
 800bd6e:	f104 0b1a 	add.w	fp, r4, #26
 800bd72:	e7f4      	b.n	800bd5e <_printf_float+0x40e>
 800bd74:	2301      	movs	r3, #1
 800bd76:	4642      	mov	r2, r8
 800bd78:	e7e1      	b.n	800bd3e <_printf_float+0x3ee>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	464a      	mov	r2, r9
 800bd7e:	4631      	mov	r1, r6
 800bd80:	4628      	mov	r0, r5
 800bd82:	47b8      	blx	r7
 800bd84:	3001      	adds	r0, #1
 800bd86:	f43f ae3e 	beq.w	800ba06 <_printf_float+0xb6>
 800bd8a:	f108 0801 	add.w	r8, r8, #1
 800bd8e:	68e3      	ldr	r3, [r4, #12]
 800bd90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd92:	1a5b      	subs	r3, r3, r1
 800bd94:	4543      	cmp	r3, r8
 800bd96:	dcf0      	bgt.n	800bd7a <_printf_float+0x42a>
 800bd98:	e6fc      	b.n	800bb94 <_printf_float+0x244>
 800bd9a:	f04f 0800 	mov.w	r8, #0
 800bd9e:	f104 0919 	add.w	r9, r4, #25
 800bda2:	e7f4      	b.n	800bd8e <_printf_float+0x43e>

0800bda4 <_printf_common>:
 800bda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bda8:	4616      	mov	r6, r2
 800bdaa:	4698      	mov	r8, r3
 800bdac:	688a      	ldr	r2, [r1, #8]
 800bdae:	690b      	ldr	r3, [r1, #16]
 800bdb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	bfb8      	it	lt
 800bdb8:	4613      	movlt	r3, r2
 800bdba:	6033      	str	r3, [r6, #0]
 800bdbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bdc0:	4607      	mov	r7, r0
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	b10a      	cbz	r2, 800bdca <_printf_common+0x26>
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	6033      	str	r3, [r6, #0]
 800bdca:	6823      	ldr	r3, [r4, #0]
 800bdcc:	0699      	lsls	r1, r3, #26
 800bdce:	bf42      	ittt	mi
 800bdd0:	6833      	ldrmi	r3, [r6, #0]
 800bdd2:	3302      	addmi	r3, #2
 800bdd4:	6033      	strmi	r3, [r6, #0]
 800bdd6:	6825      	ldr	r5, [r4, #0]
 800bdd8:	f015 0506 	ands.w	r5, r5, #6
 800bddc:	d106      	bne.n	800bdec <_printf_common+0x48>
 800bdde:	f104 0a19 	add.w	sl, r4, #25
 800bde2:	68e3      	ldr	r3, [r4, #12]
 800bde4:	6832      	ldr	r2, [r6, #0]
 800bde6:	1a9b      	subs	r3, r3, r2
 800bde8:	42ab      	cmp	r3, r5
 800bdea:	dc26      	bgt.n	800be3a <_printf_common+0x96>
 800bdec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bdf0:	6822      	ldr	r2, [r4, #0]
 800bdf2:	3b00      	subs	r3, #0
 800bdf4:	bf18      	it	ne
 800bdf6:	2301      	movne	r3, #1
 800bdf8:	0692      	lsls	r2, r2, #26
 800bdfa:	d42b      	bmi.n	800be54 <_printf_common+0xb0>
 800bdfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be00:	4641      	mov	r1, r8
 800be02:	4638      	mov	r0, r7
 800be04:	47c8      	blx	r9
 800be06:	3001      	adds	r0, #1
 800be08:	d01e      	beq.n	800be48 <_printf_common+0xa4>
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	6922      	ldr	r2, [r4, #16]
 800be0e:	f003 0306 	and.w	r3, r3, #6
 800be12:	2b04      	cmp	r3, #4
 800be14:	bf02      	ittt	eq
 800be16:	68e5      	ldreq	r5, [r4, #12]
 800be18:	6833      	ldreq	r3, [r6, #0]
 800be1a:	1aed      	subeq	r5, r5, r3
 800be1c:	68a3      	ldr	r3, [r4, #8]
 800be1e:	bf0c      	ite	eq
 800be20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be24:	2500      	movne	r5, #0
 800be26:	4293      	cmp	r3, r2
 800be28:	bfc4      	itt	gt
 800be2a:	1a9b      	subgt	r3, r3, r2
 800be2c:	18ed      	addgt	r5, r5, r3
 800be2e:	2600      	movs	r6, #0
 800be30:	341a      	adds	r4, #26
 800be32:	42b5      	cmp	r5, r6
 800be34:	d11a      	bne.n	800be6c <_printf_common+0xc8>
 800be36:	2000      	movs	r0, #0
 800be38:	e008      	b.n	800be4c <_printf_common+0xa8>
 800be3a:	2301      	movs	r3, #1
 800be3c:	4652      	mov	r2, sl
 800be3e:	4641      	mov	r1, r8
 800be40:	4638      	mov	r0, r7
 800be42:	47c8      	blx	r9
 800be44:	3001      	adds	r0, #1
 800be46:	d103      	bne.n	800be50 <_printf_common+0xac>
 800be48:	f04f 30ff 	mov.w	r0, #4294967295
 800be4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be50:	3501      	adds	r5, #1
 800be52:	e7c6      	b.n	800bde2 <_printf_common+0x3e>
 800be54:	18e1      	adds	r1, r4, r3
 800be56:	1c5a      	adds	r2, r3, #1
 800be58:	2030      	movs	r0, #48	@ 0x30
 800be5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800be5e:	4422      	add	r2, r4
 800be60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800be68:	3302      	adds	r3, #2
 800be6a:	e7c7      	b.n	800bdfc <_printf_common+0x58>
 800be6c:	2301      	movs	r3, #1
 800be6e:	4622      	mov	r2, r4
 800be70:	4641      	mov	r1, r8
 800be72:	4638      	mov	r0, r7
 800be74:	47c8      	blx	r9
 800be76:	3001      	adds	r0, #1
 800be78:	d0e6      	beq.n	800be48 <_printf_common+0xa4>
 800be7a:	3601      	adds	r6, #1
 800be7c:	e7d9      	b.n	800be32 <_printf_common+0x8e>
	...

0800be80 <_printf_i>:
 800be80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be84:	7e0f      	ldrb	r7, [r1, #24]
 800be86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be88:	2f78      	cmp	r7, #120	@ 0x78
 800be8a:	4691      	mov	r9, r2
 800be8c:	4680      	mov	r8, r0
 800be8e:	460c      	mov	r4, r1
 800be90:	469a      	mov	sl, r3
 800be92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be96:	d807      	bhi.n	800bea8 <_printf_i+0x28>
 800be98:	2f62      	cmp	r7, #98	@ 0x62
 800be9a:	d80a      	bhi.n	800beb2 <_printf_i+0x32>
 800be9c:	2f00      	cmp	r7, #0
 800be9e:	f000 80d2 	beq.w	800c046 <_printf_i+0x1c6>
 800bea2:	2f58      	cmp	r7, #88	@ 0x58
 800bea4:	f000 80b9 	beq.w	800c01a <_printf_i+0x19a>
 800bea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800beac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800beb0:	e03a      	b.n	800bf28 <_printf_i+0xa8>
 800beb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800beb6:	2b15      	cmp	r3, #21
 800beb8:	d8f6      	bhi.n	800bea8 <_printf_i+0x28>
 800beba:	a101      	add	r1, pc, #4	@ (adr r1, 800bec0 <_printf_i+0x40>)
 800bebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bec0:	0800bf19 	.word	0x0800bf19
 800bec4:	0800bf2d 	.word	0x0800bf2d
 800bec8:	0800bea9 	.word	0x0800bea9
 800becc:	0800bea9 	.word	0x0800bea9
 800bed0:	0800bea9 	.word	0x0800bea9
 800bed4:	0800bea9 	.word	0x0800bea9
 800bed8:	0800bf2d 	.word	0x0800bf2d
 800bedc:	0800bea9 	.word	0x0800bea9
 800bee0:	0800bea9 	.word	0x0800bea9
 800bee4:	0800bea9 	.word	0x0800bea9
 800bee8:	0800bea9 	.word	0x0800bea9
 800beec:	0800c02d 	.word	0x0800c02d
 800bef0:	0800bf57 	.word	0x0800bf57
 800bef4:	0800bfe7 	.word	0x0800bfe7
 800bef8:	0800bea9 	.word	0x0800bea9
 800befc:	0800bea9 	.word	0x0800bea9
 800bf00:	0800c04f 	.word	0x0800c04f
 800bf04:	0800bea9 	.word	0x0800bea9
 800bf08:	0800bf57 	.word	0x0800bf57
 800bf0c:	0800bea9 	.word	0x0800bea9
 800bf10:	0800bea9 	.word	0x0800bea9
 800bf14:	0800bfef 	.word	0x0800bfef
 800bf18:	6833      	ldr	r3, [r6, #0]
 800bf1a:	1d1a      	adds	r2, r3, #4
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	6032      	str	r2, [r6, #0]
 800bf20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e09d      	b.n	800c068 <_printf_i+0x1e8>
 800bf2c:	6833      	ldr	r3, [r6, #0]
 800bf2e:	6820      	ldr	r0, [r4, #0]
 800bf30:	1d19      	adds	r1, r3, #4
 800bf32:	6031      	str	r1, [r6, #0]
 800bf34:	0606      	lsls	r6, r0, #24
 800bf36:	d501      	bpl.n	800bf3c <_printf_i+0xbc>
 800bf38:	681d      	ldr	r5, [r3, #0]
 800bf3a:	e003      	b.n	800bf44 <_printf_i+0xc4>
 800bf3c:	0645      	lsls	r5, r0, #25
 800bf3e:	d5fb      	bpl.n	800bf38 <_printf_i+0xb8>
 800bf40:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf44:	2d00      	cmp	r5, #0
 800bf46:	da03      	bge.n	800bf50 <_printf_i+0xd0>
 800bf48:	232d      	movs	r3, #45	@ 0x2d
 800bf4a:	426d      	negs	r5, r5
 800bf4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf50:	4859      	ldr	r0, [pc, #356]	@ (800c0b8 <_printf_i+0x238>)
 800bf52:	230a      	movs	r3, #10
 800bf54:	e011      	b.n	800bf7a <_printf_i+0xfa>
 800bf56:	6821      	ldr	r1, [r4, #0]
 800bf58:	6833      	ldr	r3, [r6, #0]
 800bf5a:	0608      	lsls	r0, r1, #24
 800bf5c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf60:	d402      	bmi.n	800bf68 <_printf_i+0xe8>
 800bf62:	0649      	lsls	r1, r1, #25
 800bf64:	bf48      	it	mi
 800bf66:	b2ad      	uxthmi	r5, r5
 800bf68:	2f6f      	cmp	r7, #111	@ 0x6f
 800bf6a:	4853      	ldr	r0, [pc, #332]	@ (800c0b8 <_printf_i+0x238>)
 800bf6c:	6033      	str	r3, [r6, #0]
 800bf6e:	bf14      	ite	ne
 800bf70:	230a      	movne	r3, #10
 800bf72:	2308      	moveq	r3, #8
 800bf74:	2100      	movs	r1, #0
 800bf76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf7a:	6866      	ldr	r6, [r4, #4]
 800bf7c:	60a6      	str	r6, [r4, #8]
 800bf7e:	2e00      	cmp	r6, #0
 800bf80:	bfa2      	ittt	ge
 800bf82:	6821      	ldrge	r1, [r4, #0]
 800bf84:	f021 0104 	bicge.w	r1, r1, #4
 800bf88:	6021      	strge	r1, [r4, #0]
 800bf8a:	b90d      	cbnz	r5, 800bf90 <_printf_i+0x110>
 800bf8c:	2e00      	cmp	r6, #0
 800bf8e:	d04b      	beq.n	800c028 <_printf_i+0x1a8>
 800bf90:	4616      	mov	r6, r2
 800bf92:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf96:	fb03 5711 	mls	r7, r3, r1, r5
 800bf9a:	5dc7      	ldrb	r7, [r0, r7]
 800bf9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfa0:	462f      	mov	r7, r5
 800bfa2:	42bb      	cmp	r3, r7
 800bfa4:	460d      	mov	r5, r1
 800bfa6:	d9f4      	bls.n	800bf92 <_printf_i+0x112>
 800bfa8:	2b08      	cmp	r3, #8
 800bfaa:	d10b      	bne.n	800bfc4 <_printf_i+0x144>
 800bfac:	6823      	ldr	r3, [r4, #0]
 800bfae:	07df      	lsls	r7, r3, #31
 800bfb0:	d508      	bpl.n	800bfc4 <_printf_i+0x144>
 800bfb2:	6923      	ldr	r3, [r4, #16]
 800bfb4:	6861      	ldr	r1, [r4, #4]
 800bfb6:	4299      	cmp	r1, r3
 800bfb8:	bfde      	ittt	le
 800bfba:	2330      	movle	r3, #48	@ 0x30
 800bfbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bfc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bfc4:	1b92      	subs	r2, r2, r6
 800bfc6:	6122      	str	r2, [r4, #16]
 800bfc8:	f8cd a000 	str.w	sl, [sp]
 800bfcc:	464b      	mov	r3, r9
 800bfce:	aa03      	add	r2, sp, #12
 800bfd0:	4621      	mov	r1, r4
 800bfd2:	4640      	mov	r0, r8
 800bfd4:	f7ff fee6 	bl	800bda4 <_printf_common>
 800bfd8:	3001      	adds	r0, #1
 800bfda:	d14a      	bne.n	800c072 <_printf_i+0x1f2>
 800bfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe0:	b004      	add	sp, #16
 800bfe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe6:	6823      	ldr	r3, [r4, #0]
 800bfe8:	f043 0320 	orr.w	r3, r3, #32
 800bfec:	6023      	str	r3, [r4, #0]
 800bfee:	4833      	ldr	r0, [pc, #204]	@ (800c0bc <_printf_i+0x23c>)
 800bff0:	2778      	movs	r7, #120	@ 0x78
 800bff2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bff6:	6823      	ldr	r3, [r4, #0]
 800bff8:	6831      	ldr	r1, [r6, #0]
 800bffa:	061f      	lsls	r7, r3, #24
 800bffc:	f851 5b04 	ldr.w	r5, [r1], #4
 800c000:	d402      	bmi.n	800c008 <_printf_i+0x188>
 800c002:	065f      	lsls	r7, r3, #25
 800c004:	bf48      	it	mi
 800c006:	b2ad      	uxthmi	r5, r5
 800c008:	6031      	str	r1, [r6, #0]
 800c00a:	07d9      	lsls	r1, r3, #31
 800c00c:	bf44      	itt	mi
 800c00e:	f043 0320 	orrmi.w	r3, r3, #32
 800c012:	6023      	strmi	r3, [r4, #0]
 800c014:	b11d      	cbz	r5, 800c01e <_printf_i+0x19e>
 800c016:	2310      	movs	r3, #16
 800c018:	e7ac      	b.n	800bf74 <_printf_i+0xf4>
 800c01a:	4827      	ldr	r0, [pc, #156]	@ (800c0b8 <_printf_i+0x238>)
 800c01c:	e7e9      	b.n	800bff2 <_printf_i+0x172>
 800c01e:	6823      	ldr	r3, [r4, #0]
 800c020:	f023 0320 	bic.w	r3, r3, #32
 800c024:	6023      	str	r3, [r4, #0]
 800c026:	e7f6      	b.n	800c016 <_printf_i+0x196>
 800c028:	4616      	mov	r6, r2
 800c02a:	e7bd      	b.n	800bfa8 <_printf_i+0x128>
 800c02c:	6833      	ldr	r3, [r6, #0]
 800c02e:	6825      	ldr	r5, [r4, #0]
 800c030:	6961      	ldr	r1, [r4, #20]
 800c032:	1d18      	adds	r0, r3, #4
 800c034:	6030      	str	r0, [r6, #0]
 800c036:	062e      	lsls	r6, r5, #24
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	d501      	bpl.n	800c040 <_printf_i+0x1c0>
 800c03c:	6019      	str	r1, [r3, #0]
 800c03e:	e002      	b.n	800c046 <_printf_i+0x1c6>
 800c040:	0668      	lsls	r0, r5, #25
 800c042:	d5fb      	bpl.n	800c03c <_printf_i+0x1bc>
 800c044:	8019      	strh	r1, [r3, #0]
 800c046:	2300      	movs	r3, #0
 800c048:	6123      	str	r3, [r4, #16]
 800c04a:	4616      	mov	r6, r2
 800c04c:	e7bc      	b.n	800bfc8 <_printf_i+0x148>
 800c04e:	6833      	ldr	r3, [r6, #0]
 800c050:	1d1a      	adds	r2, r3, #4
 800c052:	6032      	str	r2, [r6, #0]
 800c054:	681e      	ldr	r6, [r3, #0]
 800c056:	6862      	ldr	r2, [r4, #4]
 800c058:	2100      	movs	r1, #0
 800c05a:	4630      	mov	r0, r6
 800c05c:	f7f4 f8b8 	bl	80001d0 <memchr>
 800c060:	b108      	cbz	r0, 800c066 <_printf_i+0x1e6>
 800c062:	1b80      	subs	r0, r0, r6
 800c064:	6060      	str	r0, [r4, #4]
 800c066:	6863      	ldr	r3, [r4, #4]
 800c068:	6123      	str	r3, [r4, #16]
 800c06a:	2300      	movs	r3, #0
 800c06c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c070:	e7aa      	b.n	800bfc8 <_printf_i+0x148>
 800c072:	6923      	ldr	r3, [r4, #16]
 800c074:	4632      	mov	r2, r6
 800c076:	4649      	mov	r1, r9
 800c078:	4640      	mov	r0, r8
 800c07a:	47d0      	blx	sl
 800c07c:	3001      	adds	r0, #1
 800c07e:	d0ad      	beq.n	800bfdc <_printf_i+0x15c>
 800c080:	6823      	ldr	r3, [r4, #0]
 800c082:	079b      	lsls	r3, r3, #30
 800c084:	d413      	bmi.n	800c0ae <_printf_i+0x22e>
 800c086:	68e0      	ldr	r0, [r4, #12]
 800c088:	9b03      	ldr	r3, [sp, #12]
 800c08a:	4298      	cmp	r0, r3
 800c08c:	bfb8      	it	lt
 800c08e:	4618      	movlt	r0, r3
 800c090:	e7a6      	b.n	800bfe0 <_printf_i+0x160>
 800c092:	2301      	movs	r3, #1
 800c094:	4632      	mov	r2, r6
 800c096:	4649      	mov	r1, r9
 800c098:	4640      	mov	r0, r8
 800c09a:	47d0      	blx	sl
 800c09c:	3001      	adds	r0, #1
 800c09e:	d09d      	beq.n	800bfdc <_printf_i+0x15c>
 800c0a0:	3501      	adds	r5, #1
 800c0a2:	68e3      	ldr	r3, [r4, #12]
 800c0a4:	9903      	ldr	r1, [sp, #12]
 800c0a6:	1a5b      	subs	r3, r3, r1
 800c0a8:	42ab      	cmp	r3, r5
 800c0aa:	dcf2      	bgt.n	800c092 <_printf_i+0x212>
 800c0ac:	e7eb      	b.n	800c086 <_printf_i+0x206>
 800c0ae:	2500      	movs	r5, #0
 800c0b0:	f104 0619 	add.w	r6, r4, #25
 800c0b4:	e7f5      	b.n	800c0a2 <_printf_i+0x222>
 800c0b6:	bf00      	nop
 800c0b8:	08011693 	.word	0x08011693
 800c0bc:	080116a4 	.word	0x080116a4

0800c0c0 <_scanf_float>:
 800c0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c4:	b087      	sub	sp, #28
 800c0c6:	4617      	mov	r7, r2
 800c0c8:	9303      	str	r3, [sp, #12]
 800c0ca:	688b      	ldr	r3, [r1, #8]
 800c0cc:	1e5a      	subs	r2, r3, #1
 800c0ce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c0d2:	bf81      	itttt	hi
 800c0d4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c0d8:	eb03 0b05 	addhi.w	fp, r3, r5
 800c0dc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c0e0:	608b      	strhi	r3, [r1, #8]
 800c0e2:	680b      	ldr	r3, [r1, #0]
 800c0e4:	460a      	mov	r2, r1
 800c0e6:	f04f 0500 	mov.w	r5, #0
 800c0ea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c0ee:	f842 3b1c 	str.w	r3, [r2], #28
 800c0f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c0f6:	4680      	mov	r8, r0
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	bf98      	it	ls
 800c0fc:	f04f 0b00 	movls.w	fp, #0
 800c100:	9201      	str	r2, [sp, #4]
 800c102:	4616      	mov	r6, r2
 800c104:	46aa      	mov	sl, r5
 800c106:	46a9      	mov	r9, r5
 800c108:	9502      	str	r5, [sp, #8]
 800c10a:	68a2      	ldr	r2, [r4, #8]
 800c10c:	b152      	cbz	r2, 800c124 <_scanf_float+0x64>
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	2b4e      	cmp	r3, #78	@ 0x4e
 800c114:	d864      	bhi.n	800c1e0 <_scanf_float+0x120>
 800c116:	2b40      	cmp	r3, #64	@ 0x40
 800c118:	d83c      	bhi.n	800c194 <_scanf_float+0xd4>
 800c11a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c11e:	b2c8      	uxtb	r0, r1
 800c120:	280e      	cmp	r0, #14
 800c122:	d93a      	bls.n	800c19a <_scanf_float+0xda>
 800c124:	f1b9 0f00 	cmp.w	r9, #0
 800c128:	d003      	beq.n	800c132 <_scanf_float+0x72>
 800c12a:	6823      	ldr	r3, [r4, #0]
 800c12c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c136:	f1ba 0f01 	cmp.w	sl, #1
 800c13a:	f200 8117 	bhi.w	800c36c <_scanf_float+0x2ac>
 800c13e:	9b01      	ldr	r3, [sp, #4]
 800c140:	429e      	cmp	r6, r3
 800c142:	f200 8108 	bhi.w	800c356 <_scanf_float+0x296>
 800c146:	2001      	movs	r0, #1
 800c148:	b007      	add	sp, #28
 800c14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c14e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c152:	2a0d      	cmp	r2, #13
 800c154:	d8e6      	bhi.n	800c124 <_scanf_float+0x64>
 800c156:	a101      	add	r1, pc, #4	@ (adr r1, 800c15c <_scanf_float+0x9c>)
 800c158:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c15c:	0800c2a3 	.word	0x0800c2a3
 800c160:	0800c125 	.word	0x0800c125
 800c164:	0800c125 	.word	0x0800c125
 800c168:	0800c125 	.word	0x0800c125
 800c16c:	0800c303 	.word	0x0800c303
 800c170:	0800c2db 	.word	0x0800c2db
 800c174:	0800c125 	.word	0x0800c125
 800c178:	0800c125 	.word	0x0800c125
 800c17c:	0800c2b1 	.word	0x0800c2b1
 800c180:	0800c125 	.word	0x0800c125
 800c184:	0800c125 	.word	0x0800c125
 800c188:	0800c125 	.word	0x0800c125
 800c18c:	0800c125 	.word	0x0800c125
 800c190:	0800c269 	.word	0x0800c269
 800c194:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c198:	e7db      	b.n	800c152 <_scanf_float+0x92>
 800c19a:	290e      	cmp	r1, #14
 800c19c:	d8c2      	bhi.n	800c124 <_scanf_float+0x64>
 800c19e:	a001      	add	r0, pc, #4	@ (adr r0, 800c1a4 <_scanf_float+0xe4>)
 800c1a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c1a4:	0800c259 	.word	0x0800c259
 800c1a8:	0800c125 	.word	0x0800c125
 800c1ac:	0800c259 	.word	0x0800c259
 800c1b0:	0800c2ef 	.word	0x0800c2ef
 800c1b4:	0800c125 	.word	0x0800c125
 800c1b8:	0800c201 	.word	0x0800c201
 800c1bc:	0800c23f 	.word	0x0800c23f
 800c1c0:	0800c23f 	.word	0x0800c23f
 800c1c4:	0800c23f 	.word	0x0800c23f
 800c1c8:	0800c23f 	.word	0x0800c23f
 800c1cc:	0800c23f 	.word	0x0800c23f
 800c1d0:	0800c23f 	.word	0x0800c23f
 800c1d4:	0800c23f 	.word	0x0800c23f
 800c1d8:	0800c23f 	.word	0x0800c23f
 800c1dc:	0800c23f 	.word	0x0800c23f
 800c1e0:	2b6e      	cmp	r3, #110	@ 0x6e
 800c1e2:	d809      	bhi.n	800c1f8 <_scanf_float+0x138>
 800c1e4:	2b60      	cmp	r3, #96	@ 0x60
 800c1e6:	d8b2      	bhi.n	800c14e <_scanf_float+0x8e>
 800c1e8:	2b54      	cmp	r3, #84	@ 0x54
 800c1ea:	d07b      	beq.n	800c2e4 <_scanf_float+0x224>
 800c1ec:	2b59      	cmp	r3, #89	@ 0x59
 800c1ee:	d199      	bne.n	800c124 <_scanf_float+0x64>
 800c1f0:	2d07      	cmp	r5, #7
 800c1f2:	d197      	bne.n	800c124 <_scanf_float+0x64>
 800c1f4:	2508      	movs	r5, #8
 800c1f6:	e02c      	b.n	800c252 <_scanf_float+0x192>
 800c1f8:	2b74      	cmp	r3, #116	@ 0x74
 800c1fa:	d073      	beq.n	800c2e4 <_scanf_float+0x224>
 800c1fc:	2b79      	cmp	r3, #121	@ 0x79
 800c1fe:	e7f6      	b.n	800c1ee <_scanf_float+0x12e>
 800c200:	6821      	ldr	r1, [r4, #0]
 800c202:	05c8      	lsls	r0, r1, #23
 800c204:	d51b      	bpl.n	800c23e <_scanf_float+0x17e>
 800c206:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c20a:	6021      	str	r1, [r4, #0]
 800c20c:	f109 0901 	add.w	r9, r9, #1
 800c210:	f1bb 0f00 	cmp.w	fp, #0
 800c214:	d003      	beq.n	800c21e <_scanf_float+0x15e>
 800c216:	3201      	adds	r2, #1
 800c218:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c21c:	60a2      	str	r2, [r4, #8]
 800c21e:	68a3      	ldr	r3, [r4, #8]
 800c220:	3b01      	subs	r3, #1
 800c222:	60a3      	str	r3, [r4, #8]
 800c224:	6923      	ldr	r3, [r4, #16]
 800c226:	3301      	adds	r3, #1
 800c228:	6123      	str	r3, [r4, #16]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	3b01      	subs	r3, #1
 800c22e:	2b00      	cmp	r3, #0
 800c230:	607b      	str	r3, [r7, #4]
 800c232:	f340 8087 	ble.w	800c344 <_scanf_float+0x284>
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	3301      	adds	r3, #1
 800c23a:	603b      	str	r3, [r7, #0]
 800c23c:	e765      	b.n	800c10a <_scanf_float+0x4a>
 800c23e:	eb1a 0105 	adds.w	r1, sl, r5
 800c242:	f47f af6f 	bne.w	800c124 <_scanf_float+0x64>
 800c246:	6822      	ldr	r2, [r4, #0]
 800c248:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c24c:	6022      	str	r2, [r4, #0]
 800c24e:	460d      	mov	r5, r1
 800c250:	468a      	mov	sl, r1
 800c252:	f806 3b01 	strb.w	r3, [r6], #1
 800c256:	e7e2      	b.n	800c21e <_scanf_float+0x15e>
 800c258:	6822      	ldr	r2, [r4, #0]
 800c25a:	0610      	lsls	r0, r2, #24
 800c25c:	f57f af62 	bpl.w	800c124 <_scanf_float+0x64>
 800c260:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c264:	6022      	str	r2, [r4, #0]
 800c266:	e7f4      	b.n	800c252 <_scanf_float+0x192>
 800c268:	f1ba 0f00 	cmp.w	sl, #0
 800c26c:	d10e      	bne.n	800c28c <_scanf_float+0x1cc>
 800c26e:	f1b9 0f00 	cmp.w	r9, #0
 800c272:	d10e      	bne.n	800c292 <_scanf_float+0x1d2>
 800c274:	6822      	ldr	r2, [r4, #0]
 800c276:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c27a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c27e:	d108      	bne.n	800c292 <_scanf_float+0x1d2>
 800c280:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c284:	6022      	str	r2, [r4, #0]
 800c286:	f04f 0a01 	mov.w	sl, #1
 800c28a:	e7e2      	b.n	800c252 <_scanf_float+0x192>
 800c28c:	f1ba 0f02 	cmp.w	sl, #2
 800c290:	d055      	beq.n	800c33e <_scanf_float+0x27e>
 800c292:	2d01      	cmp	r5, #1
 800c294:	d002      	beq.n	800c29c <_scanf_float+0x1dc>
 800c296:	2d04      	cmp	r5, #4
 800c298:	f47f af44 	bne.w	800c124 <_scanf_float+0x64>
 800c29c:	3501      	adds	r5, #1
 800c29e:	b2ed      	uxtb	r5, r5
 800c2a0:	e7d7      	b.n	800c252 <_scanf_float+0x192>
 800c2a2:	f1ba 0f01 	cmp.w	sl, #1
 800c2a6:	f47f af3d 	bne.w	800c124 <_scanf_float+0x64>
 800c2aa:	f04f 0a02 	mov.w	sl, #2
 800c2ae:	e7d0      	b.n	800c252 <_scanf_float+0x192>
 800c2b0:	b97d      	cbnz	r5, 800c2d2 <_scanf_float+0x212>
 800c2b2:	f1b9 0f00 	cmp.w	r9, #0
 800c2b6:	f47f af38 	bne.w	800c12a <_scanf_float+0x6a>
 800c2ba:	6822      	ldr	r2, [r4, #0]
 800c2bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c2c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c2c4:	f040 8108 	bne.w	800c4d8 <_scanf_float+0x418>
 800c2c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c2cc:	6022      	str	r2, [r4, #0]
 800c2ce:	2501      	movs	r5, #1
 800c2d0:	e7bf      	b.n	800c252 <_scanf_float+0x192>
 800c2d2:	2d03      	cmp	r5, #3
 800c2d4:	d0e2      	beq.n	800c29c <_scanf_float+0x1dc>
 800c2d6:	2d05      	cmp	r5, #5
 800c2d8:	e7de      	b.n	800c298 <_scanf_float+0x1d8>
 800c2da:	2d02      	cmp	r5, #2
 800c2dc:	f47f af22 	bne.w	800c124 <_scanf_float+0x64>
 800c2e0:	2503      	movs	r5, #3
 800c2e2:	e7b6      	b.n	800c252 <_scanf_float+0x192>
 800c2e4:	2d06      	cmp	r5, #6
 800c2e6:	f47f af1d 	bne.w	800c124 <_scanf_float+0x64>
 800c2ea:	2507      	movs	r5, #7
 800c2ec:	e7b1      	b.n	800c252 <_scanf_float+0x192>
 800c2ee:	6822      	ldr	r2, [r4, #0]
 800c2f0:	0591      	lsls	r1, r2, #22
 800c2f2:	f57f af17 	bpl.w	800c124 <_scanf_float+0x64>
 800c2f6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c2fa:	6022      	str	r2, [r4, #0]
 800c2fc:	f8cd 9008 	str.w	r9, [sp, #8]
 800c300:	e7a7      	b.n	800c252 <_scanf_float+0x192>
 800c302:	6822      	ldr	r2, [r4, #0]
 800c304:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c308:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c30c:	d006      	beq.n	800c31c <_scanf_float+0x25c>
 800c30e:	0550      	lsls	r0, r2, #21
 800c310:	f57f af08 	bpl.w	800c124 <_scanf_float+0x64>
 800c314:	f1b9 0f00 	cmp.w	r9, #0
 800c318:	f000 80de 	beq.w	800c4d8 <_scanf_float+0x418>
 800c31c:	0591      	lsls	r1, r2, #22
 800c31e:	bf58      	it	pl
 800c320:	9902      	ldrpl	r1, [sp, #8]
 800c322:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c326:	bf58      	it	pl
 800c328:	eba9 0101 	subpl.w	r1, r9, r1
 800c32c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c330:	bf58      	it	pl
 800c332:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c336:	6022      	str	r2, [r4, #0]
 800c338:	f04f 0900 	mov.w	r9, #0
 800c33c:	e789      	b.n	800c252 <_scanf_float+0x192>
 800c33e:	f04f 0a03 	mov.w	sl, #3
 800c342:	e786      	b.n	800c252 <_scanf_float+0x192>
 800c344:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c348:	4639      	mov	r1, r7
 800c34a:	4640      	mov	r0, r8
 800c34c:	4798      	blx	r3
 800c34e:	2800      	cmp	r0, #0
 800c350:	f43f aedb 	beq.w	800c10a <_scanf_float+0x4a>
 800c354:	e6e6      	b.n	800c124 <_scanf_float+0x64>
 800c356:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c35a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c35e:	463a      	mov	r2, r7
 800c360:	4640      	mov	r0, r8
 800c362:	4798      	blx	r3
 800c364:	6923      	ldr	r3, [r4, #16]
 800c366:	3b01      	subs	r3, #1
 800c368:	6123      	str	r3, [r4, #16]
 800c36a:	e6e8      	b.n	800c13e <_scanf_float+0x7e>
 800c36c:	1e6b      	subs	r3, r5, #1
 800c36e:	2b06      	cmp	r3, #6
 800c370:	d824      	bhi.n	800c3bc <_scanf_float+0x2fc>
 800c372:	2d02      	cmp	r5, #2
 800c374:	d836      	bhi.n	800c3e4 <_scanf_float+0x324>
 800c376:	9b01      	ldr	r3, [sp, #4]
 800c378:	429e      	cmp	r6, r3
 800c37a:	f67f aee4 	bls.w	800c146 <_scanf_float+0x86>
 800c37e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c386:	463a      	mov	r2, r7
 800c388:	4640      	mov	r0, r8
 800c38a:	4798      	blx	r3
 800c38c:	6923      	ldr	r3, [r4, #16]
 800c38e:	3b01      	subs	r3, #1
 800c390:	6123      	str	r3, [r4, #16]
 800c392:	e7f0      	b.n	800c376 <_scanf_float+0x2b6>
 800c394:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c398:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c39c:	463a      	mov	r2, r7
 800c39e:	4640      	mov	r0, r8
 800c3a0:	4798      	blx	r3
 800c3a2:	6923      	ldr	r3, [r4, #16]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	6123      	str	r3, [r4, #16]
 800c3a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3ac:	fa5f fa8a 	uxtb.w	sl, sl
 800c3b0:	f1ba 0f02 	cmp.w	sl, #2
 800c3b4:	d1ee      	bne.n	800c394 <_scanf_float+0x2d4>
 800c3b6:	3d03      	subs	r5, #3
 800c3b8:	b2ed      	uxtb	r5, r5
 800c3ba:	1b76      	subs	r6, r6, r5
 800c3bc:	6823      	ldr	r3, [r4, #0]
 800c3be:	05da      	lsls	r2, r3, #23
 800c3c0:	d530      	bpl.n	800c424 <_scanf_float+0x364>
 800c3c2:	055b      	lsls	r3, r3, #21
 800c3c4:	d511      	bpl.n	800c3ea <_scanf_float+0x32a>
 800c3c6:	9b01      	ldr	r3, [sp, #4]
 800c3c8:	429e      	cmp	r6, r3
 800c3ca:	f67f aebc 	bls.w	800c146 <_scanf_float+0x86>
 800c3ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c3d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c3d6:	463a      	mov	r2, r7
 800c3d8:	4640      	mov	r0, r8
 800c3da:	4798      	blx	r3
 800c3dc:	6923      	ldr	r3, [r4, #16]
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	6123      	str	r3, [r4, #16]
 800c3e2:	e7f0      	b.n	800c3c6 <_scanf_float+0x306>
 800c3e4:	46aa      	mov	sl, r5
 800c3e6:	46b3      	mov	fp, r6
 800c3e8:	e7de      	b.n	800c3a8 <_scanf_float+0x2e8>
 800c3ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c3ee:	6923      	ldr	r3, [r4, #16]
 800c3f0:	2965      	cmp	r1, #101	@ 0x65
 800c3f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c3f6:	f106 35ff 	add.w	r5, r6, #4294967295
 800c3fa:	6123      	str	r3, [r4, #16]
 800c3fc:	d00c      	beq.n	800c418 <_scanf_float+0x358>
 800c3fe:	2945      	cmp	r1, #69	@ 0x45
 800c400:	d00a      	beq.n	800c418 <_scanf_float+0x358>
 800c402:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c406:	463a      	mov	r2, r7
 800c408:	4640      	mov	r0, r8
 800c40a:	4798      	blx	r3
 800c40c:	6923      	ldr	r3, [r4, #16]
 800c40e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c412:	3b01      	subs	r3, #1
 800c414:	1eb5      	subs	r5, r6, #2
 800c416:	6123      	str	r3, [r4, #16]
 800c418:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c41c:	463a      	mov	r2, r7
 800c41e:	4640      	mov	r0, r8
 800c420:	4798      	blx	r3
 800c422:	462e      	mov	r6, r5
 800c424:	6822      	ldr	r2, [r4, #0]
 800c426:	f012 0210 	ands.w	r2, r2, #16
 800c42a:	d001      	beq.n	800c430 <_scanf_float+0x370>
 800c42c:	2000      	movs	r0, #0
 800c42e:	e68b      	b.n	800c148 <_scanf_float+0x88>
 800c430:	7032      	strb	r2, [r6, #0]
 800c432:	6823      	ldr	r3, [r4, #0]
 800c434:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c438:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c43c:	d11c      	bne.n	800c478 <_scanf_float+0x3b8>
 800c43e:	9b02      	ldr	r3, [sp, #8]
 800c440:	454b      	cmp	r3, r9
 800c442:	eba3 0209 	sub.w	r2, r3, r9
 800c446:	d123      	bne.n	800c490 <_scanf_float+0x3d0>
 800c448:	9901      	ldr	r1, [sp, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	4640      	mov	r0, r8
 800c44e:	f7ff f947 	bl	800b6e0 <_strtod_r>
 800c452:	9b03      	ldr	r3, [sp, #12]
 800c454:	6821      	ldr	r1, [r4, #0]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f011 0f02 	tst.w	r1, #2
 800c45c:	ec57 6b10 	vmov	r6, r7, d0
 800c460:	f103 0204 	add.w	r2, r3, #4
 800c464:	d01f      	beq.n	800c4a6 <_scanf_float+0x3e6>
 800c466:	9903      	ldr	r1, [sp, #12]
 800c468:	600a      	str	r2, [r1, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	e9c3 6700 	strd	r6, r7, [r3]
 800c470:	68e3      	ldr	r3, [r4, #12]
 800c472:	3301      	adds	r3, #1
 800c474:	60e3      	str	r3, [r4, #12]
 800c476:	e7d9      	b.n	800c42c <_scanf_float+0x36c>
 800c478:	9b04      	ldr	r3, [sp, #16]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d0e4      	beq.n	800c448 <_scanf_float+0x388>
 800c47e:	9905      	ldr	r1, [sp, #20]
 800c480:	230a      	movs	r3, #10
 800c482:	3101      	adds	r1, #1
 800c484:	4640      	mov	r0, r8
 800c486:	f7ff f9b7 	bl	800b7f8 <_strtol_r>
 800c48a:	9b04      	ldr	r3, [sp, #16]
 800c48c:	9e05      	ldr	r6, [sp, #20]
 800c48e:	1ac2      	subs	r2, r0, r3
 800c490:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c494:	429e      	cmp	r6, r3
 800c496:	bf28      	it	cs
 800c498:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c49c:	4910      	ldr	r1, [pc, #64]	@ (800c4e0 <_scanf_float+0x420>)
 800c49e:	4630      	mov	r0, r6
 800c4a0:	f000 f8e4 	bl	800c66c <siprintf>
 800c4a4:	e7d0      	b.n	800c448 <_scanf_float+0x388>
 800c4a6:	f011 0f04 	tst.w	r1, #4
 800c4aa:	9903      	ldr	r1, [sp, #12]
 800c4ac:	600a      	str	r2, [r1, #0]
 800c4ae:	d1dc      	bne.n	800c46a <_scanf_float+0x3aa>
 800c4b0:	681d      	ldr	r5, [r3, #0]
 800c4b2:	4632      	mov	r2, r6
 800c4b4:	463b      	mov	r3, r7
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	4639      	mov	r1, r7
 800c4ba:	f7f4 fb37 	bl	8000b2c <__aeabi_dcmpun>
 800c4be:	b128      	cbz	r0, 800c4cc <_scanf_float+0x40c>
 800c4c0:	4808      	ldr	r0, [pc, #32]	@ (800c4e4 <_scanf_float+0x424>)
 800c4c2:	f000 fa3d 	bl	800c940 <nanf>
 800c4c6:	ed85 0a00 	vstr	s0, [r5]
 800c4ca:	e7d1      	b.n	800c470 <_scanf_float+0x3b0>
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	4639      	mov	r1, r7
 800c4d0:	f7f4 fb8a 	bl	8000be8 <__aeabi_d2f>
 800c4d4:	6028      	str	r0, [r5, #0]
 800c4d6:	e7cb      	b.n	800c470 <_scanf_float+0x3b0>
 800c4d8:	f04f 0900 	mov.w	r9, #0
 800c4dc:	e629      	b.n	800c132 <_scanf_float+0x72>
 800c4de:	bf00      	nop
 800c4e0:	080116b5 	.word	0x080116b5
 800c4e4:	0801176e 	.word	0x0801176e

0800c4e8 <std>:
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	b510      	push	{r4, lr}
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	e9c0 3300 	strd	r3, r3, [r0]
 800c4f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4f6:	6083      	str	r3, [r0, #8]
 800c4f8:	8181      	strh	r1, [r0, #12]
 800c4fa:	6643      	str	r3, [r0, #100]	@ 0x64
 800c4fc:	81c2      	strh	r2, [r0, #14]
 800c4fe:	6183      	str	r3, [r0, #24]
 800c500:	4619      	mov	r1, r3
 800c502:	2208      	movs	r2, #8
 800c504:	305c      	adds	r0, #92	@ 0x5c
 800c506:	f000 f914 	bl	800c732 <memset>
 800c50a:	4b0d      	ldr	r3, [pc, #52]	@ (800c540 <std+0x58>)
 800c50c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c50e:	4b0d      	ldr	r3, [pc, #52]	@ (800c544 <std+0x5c>)
 800c510:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c512:	4b0d      	ldr	r3, [pc, #52]	@ (800c548 <std+0x60>)
 800c514:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c516:	4b0d      	ldr	r3, [pc, #52]	@ (800c54c <std+0x64>)
 800c518:	6323      	str	r3, [r4, #48]	@ 0x30
 800c51a:	4b0d      	ldr	r3, [pc, #52]	@ (800c550 <std+0x68>)
 800c51c:	6224      	str	r4, [r4, #32]
 800c51e:	429c      	cmp	r4, r3
 800c520:	d006      	beq.n	800c530 <std+0x48>
 800c522:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c526:	4294      	cmp	r4, r2
 800c528:	d002      	beq.n	800c530 <std+0x48>
 800c52a:	33d0      	adds	r3, #208	@ 0xd0
 800c52c:	429c      	cmp	r4, r3
 800c52e:	d105      	bne.n	800c53c <std+0x54>
 800c530:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c538:	f000 b9e6 	b.w	800c908 <__retarget_lock_init_recursive>
 800c53c:	bd10      	pop	{r4, pc}
 800c53e:	bf00      	nop
 800c540:	0800c6ad 	.word	0x0800c6ad
 800c544:	0800c6cf 	.word	0x0800c6cf
 800c548:	0800c707 	.word	0x0800c707
 800c54c:	0800c72b 	.word	0x0800c72b
 800c550:	20000718 	.word	0x20000718

0800c554 <stdio_exit_handler>:
 800c554:	4a02      	ldr	r2, [pc, #8]	@ (800c560 <stdio_exit_handler+0xc>)
 800c556:	4903      	ldr	r1, [pc, #12]	@ (800c564 <stdio_exit_handler+0x10>)
 800c558:	4803      	ldr	r0, [pc, #12]	@ (800c568 <stdio_exit_handler+0x14>)
 800c55a:	f000 b869 	b.w	800c630 <_fwalk_sglue>
 800c55e:	bf00      	nop
 800c560:	200000d8 	.word	0x200000d8
 800c564:	0800ebed 	.word	0x0800ebed
 800c568:	20000254 	.word	0x20000254

0800c56c <cleanup_stdio>:
 800c56c:	6841      	ldr	r1, [r0, #4]
 800c56e:	4b0c      	ldr	r3, [pc, #48]	@ (800c5a0 <cleanup_stdio+0x34>)
 800c570:	4299      	cmp	r1, r3
 800c572:	b510      	push	{r4, lr}
 800c574:	4604      	mov	r4, r0
 800c576:	d001      	beq.n	800c57c <cleanup_stdio+0x10>
 800c578:	f002 fb38 	bl	800ebec <_fflush_r>
 800c57c:	68a1      	ldr	r1, [r4, #8]
 800c57e:	4b09      	ldr	r3, [pc, #36]	@ (800c5a4 <cleanup_stdio+0x38>)
 800c580:	4299      	cmp	r1, r3
 800c582:	d002      	beq.n	800c58a <cleanup_stdio+0x1e>
 800c584:	4620      	mov	r0, r4
 800c586:	f002 fb31 	bl	800ebec <_fflush_r>
 800c58a:	68e1      	ldr	r1, [r4, #12]
 800c58c:	4b06      	ldr	r3, [pc, #24]	@ (800c5a8 <cleanup_stdio+0x3c>)
 800c58e:	4299      	cmp	r1, r3
 800c590:	d004      	beq.n	800c59c <cleanup_stdio+0x30>
 800c592:	4620      	mov	r0, r4
 800c594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c598:	f002 bb28 	b.w	800ebec <_fflush_r>
 800c59c:	bd10      	pop	{r4, pc}
 800c59e:	bf00      	nop
 800c5a0:	20000718 	.word	0x20000718
 800c5a4:	20000780 	.word	0x20000780
 800c5a8:	200007e8 	.word	0x200007e8

0800c5ac <global_stdio_init.part.0>:
 800c5ac:	b510      	push	{r4, lr}
 800c5ae:	4b0b      	ldr	r3, [pc, #44]	@ (800c5dc <global_stdio_init.part.0+0x30>)
 800c5b0:	4c0b      	ldr	r4, [pc, #44]	@ (800c5e0 <global_stdio_init.part.0+0x34>)
 800c5b2:	4a0c      	ldr	r2, [pc, #48]	@ (800c5e4 <global_stdio_init.part.0+0x38>)
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	2104      	movs	r1, #4
 800c5bc:	f7ff ff94 	bl	800c4e8 <std>
 800c5c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	2109      	movs	r1, #9
 800c5c8:	f7ff ff8e 	bl	800c4e8 <std>
 800c5cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c5d0:	2202      	movs	r2, #2
 800c5d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5d6:	2112      	movs	r1, #18
 800c5d8:	f7ff bf86 	b.w	800c4e8 <std>
 800c5dc:	20000850 	.word	0x20000850
 800c5e0:	20000718 	.word	0x20000718
 800c5e4:	0800c555 	.word	0x0800c555

0800c5e8 <__sfp_lock_acquire>:
 800c5e8:	4801      	ldr	r0, [pc, #4]	@ (800c5f0 <__sfp_lock_acquire+0x8>)
 800c5ea:	f000 b98e 	b.w	800c90a <__retarget_lock_acquire_recursive>
 800c5ee:	bf00      	nop
 800c5f0:	20000859 	.word	0x20000859

0800c5f4 <__sfp_lock_release>:
 800c5f4:	4801      	ldr	r0, [pc, #4]	@ (800c5fc <__sfp_lock_release+0x8>)
 800c5f6:	f000 b989 	b.w	800c90c <__retarget_lock_release_recursive>
 800c5fa:	bf00      	nop
 800c5fc:	20000859 	.word	0x20000859

0800c600 <__sinit>:
 800c600:	b510      	push	{r4, lr}
 800c602:	4604      	mov	r4, r0
 800c604:	f7ff fff0 	bl	800c5e8 <__sfp_lock_acquire>
 800c608:	6a23      	ldr	r3, [r4, #32]
 800c60a:	b11b      	cbz	r3, 800c614 <__sinit+0x14>
 800c60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c610:	f7ff bff0 	b.w	800c5f4 <__sfp_lock_release>
 800c614:	4b04      	ldr	r3, [pc, #16]	@ (800c628 <__sinit+0x28>)
 800c616:	6223      	str	r3, [r4, #32]
 800c618:	4b04      	ldr	r3, [pc, #16]	@ (800c62c <__sinit+0x2c>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1f5      	bne.n	800c60c <__sinit+0xc>
 800c620:	f7ff ffc4 	bl	800c5ac <global_stdio_init.part.0>
 800c624:	e7f2      	b.n	800c60c <__sinit+0xc>
 800c626:	bf00      	nop
 800c628:	0800c56d 	.word	0x0800c56d
 800c62c:	20000850 	.word	0x20000850

0800c630 <_fwalk_sglue>:
 800c630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c634:	4607      	mov	r7, r0
 800c636:	4688      	mov	r8, r1
 800c638:	4614      	mov	r4, r2
 800c63a:	2600      	movs	r6, #0
 800c63c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c640:	f1b9 0901 	subs.w	r9, r9, #1
 800c644:	d505      	bpl.n	800c652 <_fwalk_sglue+0x22>
 800c646:	6824      	ldr	r4, [r4, #0]
 800c648:	2c00      	cmp	r4, #0
 800c64a:	d1f7      	bne.n	800c63c <_fwalk_sglue+0xc>
 800c64c:	4630      	mov	r0, r6
 800c64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c652:	89ab      	ldrh	r3, [r5, #12]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d907      	bls.n	800c668 <_fwalk_sglue+0x38>
 800c658:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c65c:	3301      	adds	r3, #1
 800c65e:	d003      	beq.n	800c668 <_fwalk_sglue+0x38>
 800c660:	4629      	mov	r1, r5
 800c662:	4638      	mov	r0, r7
 800c664:	47c0      	blx	r8
 800c666:	4306      	orrs	r6, r0
 800c668:	3568      	adds	r5, #104	@ 0x68
 800c66a:	e7e9      	b.n	800c640 <_fwalk_sglue+0x10>

0800c66c <siprintf>:
 800c66c:	b40e      	push	{r1, r2, r3}
 800c66e:	b500      	push	{lr}
 800c670:	b09c      	sub	sp, #112	@ 0x70
 800c672:	ab1d      	add	r3, sp, #116	@ 0x74
 800c674:	9002      	str	r0, [sp, #8]
 800c676:	9006      	str	r0, [sp, #24]
 800c678:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c67c:	4809      	ldr	r0, [pc, #36]	@ (800c6a4 <siprintf+0x38>)
 800c67e:	9107      	str	r1, [sp, #28]
 800c680:	9104      	str	r1, [sp, #16]
 800c682:	4909      	ldr	r1, [pc, #36]	@ (800c6a8 <siprintf+0x3c>)
 800c684:	f853 2b04 	ldr.w	r2, [r3], #4
 800c688:	9105      	str	r1, [sp, #20]
 800c68a:	6800      	ldr	r0, [r0, #0]
 800c68c:	9301      	str	r3, [sp, #4]
 800c68e:	a902      	add	r1, sp, #8
 800c690:	f002 f92c 	bl	800e8ec <_svfiprintf_r>
 800c694:	9b02      	ldr	r3, [sp, #8]
 800c696:	2200      	movs	r2, #0
 800c698:	701a      	strb	r2, [r3, #0]
 800c69a:	b01c      	add	sp, #112	@ 0x70
 800c69c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6a0:	b003      	add	sp, #12
 800c6a2:	4770      	bx	lr
 800c6a4:	20000250 	.word	0x20000250
 800c6a8:	ffff0208 	.word	0xffff0208

0800c6ac <__sread>:
 800c6ac:	b510      	push	{r4, lr}
 800c6ae:	460c      	mov	r4, r1
 800c6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6b4:	f000 f8da 	bl	800c86c <_read_r>
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	bfab      	itete	ge
 800c6bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c6be:	89a3      	ldrhlt	r3, [r4, #12]
 800c6c0:	181b      	addge	r3, r3, r0
 800c6c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c6c6:	bfac      	ite	ge
 800c6c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c6ca:	81a3      	strhlt	r3, [r4, #12]
 800c6cc:	bd10      	pop	{r4, pc}

0800c6ce <__swrite>:
 800c6ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d2:	461f      	mov	r7, r3
 800c6d4:	898b      	ldrh	r3, [r1, #12]
 800c6d6:	05db      	lsls	r3, r3, #23
 800c6d8:	4605      	mov	r5, r0
 800c6da:	460c      	mov	r4, r1
 800c6dc:	4616      	mov	r6, r2
 800c6de:	d505      	bpl.n	800c6ec <__swrite+0x1e>
 800c6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f000 f8ae 	bl	800c848 <_lseek_r>
 800c6ec:	89a3      	ldrh	r3, [r4, #12]
 800c6ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c6f6:	81a3      	strh	r3, [r4, #12]
 800c6f8:	4632      	mov	r2, r6
 800c6fa:	463b      	mov	r3, r7
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c702:	f000 b8c5 	b.w	800c890 <_write_r>

0800c706 <__sseek>:
 800c706:	b510      	push	{r4, lr}
 800c708:	460c      	mov	r4, r1
 800c70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c70e:	f000 f89b 	bl	800c848 <_lseek_r>
 800c712:	1c43      	adds	r3, r0, #1
 800c714:	89a3      	ldrh	r3, [r4, #12]
 800c716:	bf15      	itete	ne
 800c718:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c71a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c71e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c722:	81a3      	strheq	r3, [r4, #12]
 800c724:	bf18      	it	ne
 800c726:	81a3      	strhne	r3, [r4, #12]
 800c728:	bd10      	pop	{r4, pc}

0800c72a <__sclose>:
 800c72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c72e:	f000 b87b 	b.w	800c828 <_close_r>

0800c732 <memset>:
 800c732:	4402      	add	r2, r0
 800c734:	4603      	mov	r3, r0
 800c736:	4293      	cmp	r3, r2
 800c738:	d100      	bne.n	800c73c <memset+0xa>
 800c73a:	4770      	bx	lr
 800c73c:	f803 1b01 	strb.w	r1, [r3], #1
 800c740:	e7f9      	b.n	800c736 <memset+0x4>

0800c742 <strncmp>:
 800c742:	b510      	push	{r4, lr}
 800c744:	b16a      	cbz	r2, 800c762 <strncmp+0x20>
 800c746:	3901      	subs	r1, #1
 800c748:	1884      	adds	r4, r0, r2
 800c74a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c74e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c752:	429a      	cmp	r2, r3
 800c754:	d103      	bne.n	800c75e <strncmp+0x1c>
 800c756:	42a0      	cmp	r0, r4
 800c758:	d001      	beq.n	800c75e <strncmp+0x1c>
 800c75a:	2a00      	cmp	r2, #0
 800c75c:	d1f5      	bne.n	800c74a <strncmp+0x8>
 800c75e:	1ad0      	subs	r0, r2, r3
 800c760:	bd10      	pop	{r4, pc}
 800c762:	4610      	mov	r0, r2
 800c764:	e7fc      	b.n	800c760 <strncmp+0x1e>
	...

0800c768 <strtok>:
 800c768:	4b16      	ldr	r3, [pc, #88]	@ (800c7c4 <strtok+0x5c>)
 800c76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c76e:	681f      	ldr	r7, [r3, #0]
 800c770:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c772:	4605      	mov	r5, r0
 800c774:	460e      	mov	r6, r1
 800c776:	b9ec      	cbnz	r4, 800c7b4 <strtok+0x4c>
 800c778:	2050      	movs	r0, #80	@ 0x50
 800c77a:	f001 fad5 	bl	800dd28 <malloc>
 800c77e:	4602      	mov	r2, r0
 800c780:	6478      	str	r0, [r7, #68]	@ 0x44
 800c782:	b920      	cbnz	r0, 800c78e <strtok+0x26>
 800c784:	4b10      	ldr	r3, [pc, #64]	@ (800c7c8 <strtok+0x60>)
 800c786:	4811      	ldr	r0, [pc, #68]	@ (800c7cc <strtok+0x64>)
 800c788:	215b      	movs	r1, #91	@ 0x5b
 800c78a:	f000 f8df 	bl	800c94c <__assert_func>
 800c78e:	e9c0 4400 	strd	r4, r4, [r0]
 800c792:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c796:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c79a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c79e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c7a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c7a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c7aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c7ae:	6184      	str	r4, [r0, #24]
 800c7b0:	7704      	strb	r4, [r0, #28]
 800c7b2:	6244      	str	r4, [r0, #36]	@ 0x24
 800c7b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7b6:	4631      	mov	r1, r6
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c0:	f000 b806 	b.w	800c7d0 <__strtok_r>
 800c7c4:	20000250 	.word	0x20000250
 800c7c8:	080116ba 	.word	0x080116ba
 800c7cc:	080116d1 	.word	0x080116d1

0800c7d0 <__strtok_r>:
 800c7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	b908      	cbnz	r0, 800c7da <__strtok_r+0xa>
 800c7d6:	6814      	ldr	r4, [r2, #0]
 800c7d8:	b144      	cbz	r4, 800c7ec <__strtok_r+0x1c>
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c7e0:	460f      	mov	r7, r1
 800c7e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c7e6:	b91e      	cbnz	r6, 800c7f0 <__strtok_r+0x20>
 800c7e8:	b965      	cbnz	r5, 800c804 <__strtok_r+0x34>
 800c7ea:	6015      	str	r5, [r2, #0]
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	e005      	b.n	800c7fc <__strtok_r+0x2c>
 800c7f0:	42b5      	cmp	r5, r6
 800c7f2:	d1f6      	bne.n	800c7e2 <__strtok_r+0x12>
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d1f0      	bne.n	800c7da <__strtok_r+0xa>
 800c7f8:	6014      	str	r4, [r2, #0]
 800c7fa:	7003      	strb	r3, [r0, #0]
 800c7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7fe:	461c      	mov	r4, r3
 800c800:	e00c      	b.n	800c81c <__strtok_r+0x4c>
 800c802:	b915      	cbnz	r5, 800c80a <__strtok_r+0x3a>
 800c804:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c808:	460e      	mov	r6, r1
 800c80a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c80e:	42ab      	cmp	r3, r5
 800c810:	d1f7      	bne.n	800c802 <__strtok_r+0x32>
 800c812:	2b00      	cmp	r3, #0
 800c814:	d0f3      	beq.n	800c7fe <__strtok_r+0x2e>
 800c816:	2300      	movs	r3, #0
 800c818:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c81c:	6014      	str	r4, [r2, #0]
 800c81e:	e7ed      	b.n	800c7fc <__strtok_r+0x2c>

0800c820 <_localeconv_r>:
 800c820:	4800      	ldr	r0, [pc, #0]	@ (800c824 <_localeconv_r+0x4>)
 800c822:	4770      	bx	lr
 800c824:	200001d4 	.word	0x200001d4

0800c828 <_close_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	4d06      	ldr	r5, [pc, #24]	@ (800c844 <_close_r+0x1c>)
 800c82c:	2300      	movs	r3, #0
 800c82e:	4604      	mov	r4, r0
 800c830:	4608      	mov	r0, r1
 800c832:	602b      	str	r3, [r5, #0]
 800c834:	f7fa fb72 	bl	8006f1c <_close>
 800c838:	1c43      	adds	r3, r0, #1
 800c83a:	d102      	bne.n	800c842 <_close_r+0x1a>
 800c83c:	682b      	ldr	r3, [r5, #0]
 800c83e:	b103      	cbz	r3, 800c842 <_close_r+0x1a>
 800c840:	6023      	str	r3, [r4, #0]
 800c842:	bd38      	pop	{r3, r4, r5, pc}
 800c844:	20000854 	.word	0x20000854

0800c848 <_lseek_r>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	4d07      	ldr	r5, [pc, #28]	@ (800c868 <_lseek_r+0x20>)
 800c84c:	4604      	mov	r4, r0
 800c84e:	4608      	mov	r0, r1
 800c850:	4611      	mov	r1, r2
 800c852:	2200      	movs	r2, #0
 800c854:	602a      	str	r2, [r5, #0]
 800c856:	461a      	mov	r2, r3
 800c858:	f7fa fb87 	bl	8006f6a <_lseek>
 800c85c:	1c43      	adds	r3, r0, #1
 800c85e:	d102      	bne.n	800c866 <_lseek_r+0x1e>
 800c860:	682b      	ldr	r3, [r5, #0]
 800c862:	b103      	cbz	r3, 800c866 <_lseek_r+0x1e>
 800c864:	6023      	str	r3, [r4, #0]
 800c866:	bd38      	pop	{r3, r4, r5, pc}
 800c868:	20000854 	.word	0x20000854

0800c86c <_read_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	4d07      	ldr	r5, [pc, #28]	@ (800c88c <_read_r+0x20>)
 800c870:	4604      	mov	r4, r0
 800c872:	4608      	mov	r0, r1
 800c874:	4611      	mov	r1, r2
 800c876:	2200      	movs	r2, #0
 800c878:	602a      	str	r2, [r5, #0]
 800c87a:	461a      	mov	r2, r3
 800c87c:	f7fa fb15 	bl	8006eaa <_read>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d102      	bne.n	800c88a <_read_r+0x1e>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	b103      	cbz	r3, 800c88a <_read_r+0x1e>
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	20000854 	.word	0x20000854

0800c890 <_write_r>:
 800c890:	b538      	push	{r3, r4, r5, lr}
 800c892:	4d07      	ldr	r5, [pc, #28]	@ (800c8b0 <_write_r+0x20>)
 800c894:	4604      	mov	r4, r0
 800c896:	4608      	mov	r0, r1
 800c898:	4611      	mov	r1, r2
 800c89a:	2200      	movs	r2, #0
 800c89c:	602a      	str	r2, [r5, #0]
 800c89e:	461a      	mov	r2, r3
 800c8a0:	f7fa fb20 	bl	8006ee4 <_write>
 800c8a4:	1c43      	adds	r3, r0, #1
 800c8a6:	d102      	bne.n	800c8ae <_write_r+0x1e>
 800c8a8:	682b      	ldr	r3, [r5, #0]
 800c8aa:	b103      	cbz	r3, 800c8ae <_write_r+0x1e>
 800c8ac:	6023      	str	r3, [r4, #0]
 800c8ae:	bd38      	pop	{r3, r4, r5, pc}
 800c8b0:	20000854 	.word	0x20000854

0800c8b4 <__errno>:
 800c8b4:	4b01      	ldr	r3, [pc, #4]	@ (800c8bc <__errno+0x8>)
 800c8b6:	6818      	ldr	r0, [r3, #0]
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	20000250 	.word	0x20000250

0800c8c0 <__libc_init_array>:
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	4d0d      	ldr	r5, [pc, #52]	@ (800c8f8 <__libc_init_array+0x38>)
 800c8c4:	4c0d      	ldr	r4, [pc, #52]	@ (800c8fc <__libc_init_array+0x3c>)
 800c8c6:	1b64      	subs	r4, r4, r5
 800c8c8:	10a4      	asrs	r4, r4, #2
 800c8ca:	2600      	movs	r6, #0
 800c8cc:	42a6      	cmp	r6, r4
 800c8ce:	d109      	bne.n	800c8e4 <__libc_init_array+0x24>
 800c8d0:	4d0b      	ldr	r5, [pc, #44]	@ (800c900 <__libc_init_array+0x40>)
 800c8d2:	4c0c      	ldr	r4, [pc, #48]	@ (800c904 <__libc_init_array+0x44>)
 800c8d4:	f004 fa70 	bl	8010db8 <_init>
 800c8d8:	1b64      	subs	r4, r4, r5
 800c8da:	10a4      	asrs	r4, r4, #2
 800c8dc:	2600      	movs	r6, #0
 800c8de:	42a6      	cmp	r6, r4
 800c8e0:	d105      	bne.n	800c8ee <__libc_init_array+0x2e>
 800c8e2:	bd70      	pop	{r4, r5, r6, pc}
 800c8e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8e8:	4798      	blx	r3
 800c8ea:	3601      	adds	r6, #1
 800c8ec:	e7ee      	b.n	800c8cc <__libc_init_array+0xc>
 800c8ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8f2:	4798      	blx	r3
 800c8f4:	3601      	adds	r6, #1
 800c8f6:	e7f2      	b.n	800c8de <__libc_init_array+0x1e>
 800c8f8:	08011c08 	.word	0x08011c08
 800c8fc:	08011c08 	.word	0x08011c08
 800c900:	08011c08 	.word	0x08011c08
 800c904:	08011c0c 	.word	0x08011c0c

0800c908 <__retarget_lock_init_recursive>:
 800c908:	4770      	bx	lr

0800c90a <__retarget_lock_acquire_recursive>:
 800c90a:	4770      	bx	lr

0800c90c <__retarget_lock_release_recursive>:
 800c90c:	4770      	bx	lr

0800c90e <memcpy>:
 800c90e:	440a      	add	r2, r1
 800c910:	4291      	cmp	r1, r2
 800c912:	f100 33ff 	add.w	r3, r0, #4294967295
 800c916:	d100      	bne.n	800c91a <memcpy+0xc>
 800c918:	4770      	bx	lr
 800c91a:	b510      	push	{r4, lr}
 800c91c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c920:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c924:	4291      	cmp	r1, r2
 800c926:	d1f9      	bne.n	800c91c <memcpy+0xe>
 800c928:	bd10      	pop	{r4, pc}
 800c92a:	0000      	movs	r0, r0
 800c92c:	0000      	movs	r0, r0
	...

0800c930 <nan>:
 800c930:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c938 <nan+0x8>
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	00000000 	.word	0x00000000
 800c93c:	7ff80000 	.word	0x7ff80000

0800c940 <nanf>:
 800c940:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c948 <nanf+0x8>
 800c944:	4770      	bx	lr
 800c946:	bf00      	nop
 800c948:	7fc00000 	.word	0x7fc00000

0800c94c <__assert_func>:
 800c94c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c94e:	4614      	mov	r4, r2
 800c950:	461a      	mov	r2, r3
 800c952:	4b09      	ldr	r3, [pc, #36]	@ (800c978 <__assert_func+0x2c>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4605      	mov	r5, r0
 800c958:	68d8      	ldr	r0, [r3, #12]
 800c95a:	b954      	cbnz	r4, 800c972 <__assert_func+0x26>
 800c95c:	4b07      	ldr	r3, [pc, #28]	@ (800c97c <__assert_func+0x30>)
 800c95e:	461c      	mov	r4, r3
 800c960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c964:	9100      	str	r1, [sp, #0]
 800c966:	462b      	mov	r3, r5
 800c968:	4905      	ldr	r1, [pc, #20]	@ (800c980 <__assert_func+0x34>)
 800c96a:	f002 f967 	bl	800ec3c <fiprintf>
 800c96e:	f002 f9a1 	bl	800ecb4 <abort>
 800c972:	4b04      	ldr	r3, [pc, #16]	@ (800c984 <__assert_func+0x38>)
 800c974:	e7f4      	b.n	800c960 <__assert_func+0x14>
 800c976:	bf00      	nop
 800c978:	20000250 	.word	0x20000250
 800c97c:	0801176e 	.word	0x0801176e
 800c980:	08011740 	.word	0x08011740
 800c984:	08011733 	.word	0x08011733

0800c988 <quorem>:
 800c988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c98c:	6903      	ldr	r3, [r0, #16]
 800c98e:	690c      	ldr	r4, [r1, #16]
 800c990:	42a3      	cmp	r3, r4
 800c992:	4607      	mov	r7, r0
 800c994:	db7e      	blt.n	800ca94 <quorem+0x10c>
 800c996:	3c01      	subs	r4, #1
 800c998:	f101 0814 	add.w	r8, r1, #20
 800c99c:	00a3      	lsls	r3, r4, #2
 800c99e:	f100 0514 	add.w	r5, r0, #20
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9a8:	9301      	str	r3, [sp, #4]
 800c9aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c9ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9ba:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9be:	d32e      	bcc.n	800ca1e <quorem+0x96>
 800c9c0:	f04f 0a00 	mov.w	sl, #0
 800c9c4:	46c4      	mov	ip, r8
 800c9c6:	46ae      	mov	lr, r5
 800c9c8:	46d3      	mov	fp, sl
 800c9ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c9ce:	b298      	uxth	r0, r3
 800c9d0:	fb06 a000 	mla	r0, r6, r0, sl
 800c9d4:	0c02      	lsrs	r2, r0, #16
 800c9d6:	0c1b      	lsrs	r3, r3, #16
 800c9d8:	fb06 2303 	mla	r3, r6, r3, r2
 800c9dc:	f8de 2000 	ldr.w	r2, [lr]
 800c9e0:	b280      	uxth	r0, r0
 800c9e2:	b292      	uxth	r2, r2
 800c9e4:	1a12      	subs	r2, r2, r0
 800c9e6:	445a      	add	r2, fp
 800c9e8:	f8de 0000 	ldr.w	r0, [lr]
 800c9ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c9f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c9fa:	b292      	uxth	r2, r2
 800c9fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ca00:	45e1      	cmp	r9, ip
 800ca02:	f84e 2b04 	str.w	r2, [lr], #4
 800ca06:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ca0a:	d2de      	bcs.n	800c9ca <quorem+0x42>
 800ca0c:	9b00      	ldr	r3, [sp, #0]
 800ca0e:	58eb      	ldr	r3, [r5, r3]
 800ca10:	b92b      	cbnz	r3, 800ca1e <quorem+0x96>
 800ca12:	9b01      	ldr	r3, [sp, #4]
 800ca14:	3b04      	subs	r3, #4
 800ca16:	429d      	cmp	r5, r3
 800ca18:	461a      	mov	r2, r3
 800ca1a:	d32f      	bcc.n	800ca7c <quorem+0xf4>
 800ca1c:	613c      	str	r4, [r7, #16]
 800ca1e:	4638      	mov	r0, r7
 800ca20:	f001 fd0e 	bl	800e440 <__mcmp>
 800ca24:	2800      	cmp	r0, #0
 800ca26:	db25      	blt.n	800ca74 <quorem+0xec>
 800ca28:	4629      	mov	r1, r5
 800ca2a:	2000      	movs	r0, #0
 800ca2c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca30:	f8d1 c000 	ldr.w	ip, [r1]
 800ca34:	fa1f fe82 	uxth.w	lr, r2
 800ca38:	fa1f f38c 	uxth.w	r3, ip
 800ca3c:	eba3 030e 	sub.w	r3, r3, lr
 800ca40:	4403      	add	r3, r0
 800ca42:	0c12      	lsrs	r2, r2, #16
 800ca44:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ca48:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca52:	45c1      	cmp	r9, r8
 800ca54:	f841 3b04 	str.w	r3, [r1], #4
 800ca58:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ca5c:	d2e6      	bcs.n	800ca2c <quorem+0xa4>
 800ca5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca66:	b922      	cbnz	r2, 800ca72 <quorem+0xea>
 800ca68:	3b04      	subs	r3, #4
 800ca6a:	429d      	cmp	r5, r3
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	d30b      	bcc.n	800ca88 <quorem+0x100>
 800ca70:	613c      	str	r4, [r7, #16]
 800ca72:	3601      	adds	r6, #1
 800ca74:	4630      	mov	r0, r6
 800ca76:	b003      	add	sp, #12
 800ca78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca7c:	6812      	ldr	r2, [r2, #0]
 800ca7e:	3b04      	subs	r3, #4
 800ca80:	2a00      	cmp	r2, #0
 800ca82:	d1cb      	bne.n	800ca1c <quorem+0x94>
 800ca84:	3c01      	subs	r4, #1
 800ca86:	e7c6      	b.n	800ca16 <quorem+0x8e>
 800ca88:	6812      	ldr	r2, [r2, #0]
 800ca8a:	3b04      	subs	r3, #4
 800ca8c:	2a00      	cmp	r2, #0
 800ca8e:	d1ef      	bne.n	800ca70 <quorem+0xe8>
 800ca90:	3c01      	subs	r4, #1
 800ca92:	e7ea      	b.n	800ca6a <quorem+0xe2>
 800ca94:	2000      	movs	r0, #0
 800ca96:	e7ee      	b.n	800ca76 <quorem+0xee>

0800ca98 <_dtoa_r>:
 800ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	69c7      	ldr	r7, [r0, #28]
 800ca9e:	b099      	sub	sp, #100	@ 0x64
 800caa0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800caa4:	ec55 4b10 	vmov	r4, r5, d0
 800caa8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800caaa:	9109      	str	r1, [sp, #36]	@ 0x24
 800caac:	4683      	mov	fp, r0
 800caae:	920e      	str	r2, [sp, #56]	@ 0x38
 800cab0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cab2:	b97f      	cbnz	r7, 800cad4 <_dtoa_r+0x3c>
 800cab4:	2010      	movs	r0, #16
 800cab6:	f001 f937 	bl	800dd28 <malloc>
 800caba:	4602      	mov	r2, r0
 800cabc:	f8cb 001c 	str.w	r0, [fp, #28]
 800cac0:	b920      	cbnz	r0, 800cacc <_dtoa_r+0x34>
 800cac2:	4ba7      	ldr	r3, [pc, #668]	@ (800cd60 <_dtoa_r+0x2c8>)
 800cac4:	21ef      	movs	r1, #239	@ 0xef
 800cac6:	48a7      	ldr	r0, [pc, #668]	@ (800cd64 <_dtoa_r+0x2cc>)
 800cac8:	f7ff ff40 	bl	800c94c <__assert_func>
 800cacc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cad0:	6007      	str	r7, [r0, #0]
 800cad2:	60c7      	str	r7, [r0, #12]
 800cad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cad8:	6819      	ldr	r1, [r3, #0]
 800cada:	b159      	cbz	r1, 800caf4 <_dtoa_r+0x5c>
 800cadc:	685a      	ldr	r2, [r3, #4]
 800cade:	604a      	str	r2, [r1, #4]
 800cae0:	2301      	movs	r3, #1
 800cae2:	4093      	lsls	r3, r2
 800cae4:	608b      	str	r3, [r1, #8]
 800cae6:	4658      	mov	r0, fp
 800cae8:	f001 fa26 	bl	800df38 <_Bfree>
 800caec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800caf0:	2200      	movs	r2, #0
 800caf2:	601a      	str	r2, [r3, #0]
 800caf4:	1e2b      	subs	r3, r5, #0
 800caf6:	bfb9      	ittee	lt
 800caf8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cafc:	9303      	strlt	r3, [sp, #12]
 800cafe:	2300      	movge	r3, #0
 800cb00:	6033      	strge	r3, [r6, #0]
 800cb02:	9f03      	ldr	r7, [sp, #12]
 800cb04:	4b98      	ldr	r3, [pc, #608]	@ (800cd68 <_dtoa_r+0x2d0>)
 800cb06:	bfbc      	itt	lt
 800cb08:	2201      	movlt	r2, #1
 800cb0a:	6032      	strlt	r2, [r6, #0]
 800cb0c:	43bb      	bics	r3, r7
 800cb0e:	d112      	bne.n	800cb36 <_dtoa_r+0x9e>
 800cb10:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cb12:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cb16:	6013      	str	r3, [r2, #0]
 800cb18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb1c:	4323      	orrs	r3, r4
 800cb1e:	f000 854d 	beq.w	800d5bc <_dtoa_r+0xb24>
 800cb22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb24:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cd7c <_dtoa_r+0x2e4>
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f000 854f 	beq.w	800d5cc <_dtoa_r+0xb34>
 800cb2e:	f10a 0303 	add.w	r3, sl, #3
 800cb32:	f000 bd49 	b.w	800d5c8 <_dtoa_r+0xb30>
 800cb36:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	ec51 0b17 	vmov	r0, r1, d7
 800cb40:	2300      	movs	r3, #0
 800cb42:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cb46:	f7f3 ffbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb4a:	4680      	mov	r8, r0
 800cb4c:	b158      	cbz	r0, 800cb66 <_dtoa_r+0xce>
 800cb4e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cb50:	2301      	movs	r3, #1
 800cb52:	6013      	str	r3, [r2, #0]
 800cb54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb56:	b113      	cbz	r3, 800cb5e <_dtoa_r+0xc6>
 800cb58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cb5a:	4b84      	ldr	r3, [pc, #528]	@ (800cd6c <_dtoa_r+0x2d4>)
 800cb5c:	6013      	str	r3, [r2, #0]
 800cb5e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cd80 <_dtoa_r+0x2e8>
 800cb62:	f000 bd33 	b.w	800d5cc <_dtoa_r+0xb34>
 800cb66:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cb6a:	aa16      	add	r2, sp, #88	@ 0x58
 800cb6c:	a917      	add	r1, sp, #92	@ 0x5c
 800cb6e:	4658      	mov	r0, fp
 800cb70:	f001 fd86 	bl	800e680 <__d2b>
 800cb74:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cb78:	4681      	mov	r9, r0
 800cb7a:	2e00      	cmp	r6, #0
 800cb7c:	d077      	beq.n	800cc6e <_dtoa_r+0x1d6>
 800cb7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb80:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cb84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb8c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cb90:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cb94:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cb98:	4619      	mov	r1, r3
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	4b74      	ldr	r3, [pc, #464]	@ (800cd70 <_dtoa_r+0x2d8>)
 800cb9e:	f7f3 fb73 	bl	8000288 <__aeabi_dsub>
 800cba2:	a369      	add	r3, pc, #420	@ (adr r3, 800cd48 <_dtoa_r+0x2b0>)
 800cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba8:	f7f3 fd26 	bl	80005f8 <__aeabi_dmul>
 800cbac:	a368      	add	r3, pc, #416	@ (adr r3, 800cd50 <_dtoa_r+0x2b8>)
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	f7f3 fb6b 	bl	800028c <__adddf3>
 800cbb6:	4604      	mov	r4, r0
 800cbb8:	4630      	mov	r0, r6
 800cbba:	460d      	mov	r5, r1
 800cbbc:	f7f3 fcb2 	bl	8000524 <__aeabi_i2d>
 800cbc0:	a365      	add	r3, pc, #404	@ (adr r3, 800cd58 <_dtoa_r+0x2c0>)
 800cbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc6:	f7f3 fd17 	bl	80005f8 <__aeabi_dmul>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	460b      	mov	r3, r1
 800cbce:	4620      	mov	r0, r4
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	f7f3 fb5b 	bl	800028c <__adddf3>
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	460d      	mov	r5, r1
 800cbda:	f7f3 ffbd 	bl	8000b58 <__aeabi_d2iz>
 800cbde:	2200      	movs	r2, #0
 800cbe0:	4607      	mov	r7, r0
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	f7f3 ff78 	bl	8000adc <__aeabi_dcmplt>
 800cbec:	b140      	cbz	r0, 800cc00 <_dtoa_r+0x168>
 800cbee:	4638      	mov	r0, r7
 800cbf0:	f7f3 fc98 	bl	8000524 <__aeabi_i2d>
 800cbf4:	4622      	mov	r2, r4
 800cbf6:	462b      	mov	r3, r5
 800cbf8:	f7f3 ff66 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbfc:	b900      	cbnz	r0, 800cc00 <_dtoa_r+0x168>
 800cbfe:	3f01      	subs	r7, #1
 800cc00:	2f16      	cmp	r7, #22
 800cc02:	d851      	bhi.n	800cca8 <_dtoa_r+0x210>
 800cc04:	4b5b      	ldr	r3, [pc, #364]	@ (800cd74 <_dtoa_r+0x2dc>)
 800cc06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc12:	f7f3 ff63 	bl	8000adc <__aeabi_dcmplt>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	d048      	beq.n	800ccac <_dtoa_r+0x214>
 800cc1a:	3f01      	subs	r7, #1
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	9312      	str	r3, [sp, #72]	@ 0x48
 800cc20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cc22:	1b9b      	subs	r3, r3, r6
 800cc24:	1e5a      	subs	r2, r3, #1
 800cc26:	bf44      	itt	mi
 800cc28:	f1c3 0801 	rsbmi	r8, r3, #1
 800cc2c:	2300      	movmi	r3, #0
 800cc2e:	9208      	str	r2, [sp, #32]
 800cc30:	bf54      	ite	pl
 800cc32:	f04f 0800 	movpl.w	r8, #0
 800cc36:	9308      	strmi	r3, [sp, #32]
 800cc38:	2f00      	cmp	r7, #0
 800cc3a:	db39      	blt.n	800ccb0 <_dtoa_r+0x218>
 800cc3c:	9b08      	ldr	r3, [sp, #32]
 800cc3e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cc40:	443b      	add	r3, r7
 800cc42:	9308      	str	r3, [sp, #32]
 800cc44:	2300      	movs	r3, #0
 800cc46:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc4a:	2b09      	cmp	r3, #9
 800cc4c:	d864      	bhi.n	800cd18 <_dtoa_r+0x280>
 800cc4e:	2b05      	cmp	r3, #5
 800cc50:	bfc4      	itt	gt
 800cc52:	3b04      	subgt	r3, #4
 800cc54:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cc56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc58:	f1a3 0302 	sub.w	r3, r3, #2
 800cc5c:	bfcc      	ite	gt
 800cc5e:	2400      	movgt	r4, #0
 800cc60:	2401      	movle	r4, #1
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d863      	bhi.n	800cd2e <_dtoa_r+0x296>
 800cc66:	e8df f003 	tbb	[pc, r3]
 800cc6a:	372a      	.short	0x372a
 800cc6c:	5535      	.short	0x5535
 800cc6e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cc72:	441e      	add	r6, r3
 800cc74:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cc78:	2b20      	cmp	r3, #32
 800cc7a:	bfc1      	itttt	gt
 800cc7c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cc80:	409f      	lslgt	r7, r3
 800cc82:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cc86:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cc8a:	bfd6      	itet	le
 800cc8c:	f1c3 0320 	rsble	r3, r3, #32
 800cc90:	ea47 0003 	orrgt.w	r0, r7, r3
 800cc94:	fa04 f003 	lslle.w	r0, r4, r3
 800cc98:	f7f3 fc34 	bl	8000504 <__aeabi_ui2d>
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cca2:	3e01      	subs	r6, #1
 800cca4:	9214      	str	r2, [sp, #80]	@ 0x50
 800cca6:	e777      	b.n	800cb98 <_dtoa_r+0x100>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e7b8      	b.n	800cc1e <_dtoa_r+0x186>
 800ccac:	9012      	str	r0, [sp, #72]	@ 0x48
 800ccae:	e7b7      	b.n	800cc20 <_dtoa_r+0x188>
 800ccb0:	427b      	negs	r3, r7
 800ccb2:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	eba8 0807 	sub.w	r8, r8, r7
 800ccba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ccbc:	e7c4      	b.n	800cc48 <_dtoa_r+0x1b0>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	dc35      	bgt.n	800cd34 <_dtoa_r+0x29c>
 800ccc8:	2301      	movs	r3, #1
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	9307      	str	r3, [sp, #28]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	920e      	str	r2, [sp, #56]	@ 0x38
 800ccd2:	e00b      	b.n	800ccec <_dtoa_r+0x254>
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e7f3      	b.n	800ccc0 <_dtoa_r+0x228>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccde:	18fb      	adds	r3, r7, r3
 800cce0:	9300      	str	r3, [sp, #0]
 800cce2:	3301      	adds	r3, #1
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	9307      	str	r3, [sp, #28]
 800cce8:	bfb8      	it	lt
 800ccea:	2301      	movlt	r3, #1
 800ccec:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	2204      	movs	r2, #4
 800ccf4:	f102 0514 	add.w	r5, r2, #20
 800ccf8:	429d      	cmp	r5, r3
 800ccfa:	d91f      	bls.n	800cd3c <_dtoa_r+0x2a4>
 800ccfc:	6041      	str	r1, [r0, #4]
 800ccfe:	4658      	mov	r0, fp
 800cd00:	f001 f8da 	bl	800deb8 <_Balloc>
 800cd04:	4682      	mov	sl, r0
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d13c      	bne.n	800cd84 <_dtoa_r+0x2ec>
 800cd0a:	4b1b      	ldr	r3, [pc, #108]	@ (800cd78 <_dtoa_r+0x2e0>)
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	f240 11af 	movw	r1, #431	@ 0x1af
 800cd12:	e6d8      	b.n	800cac6 <_dtoa_r+0x2e>
 800cd14:	2301      	movs	r3, #1
 800cd16:	e7e0      	b.n	800ccda <_dtoa_r+0x242>
 800cd18:	2401      	movs	r4, #1
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd1e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cd20:	f04f 33ff 	mov.w	r3, #4294967295
 800cd24:	9300      	str	r3, [sp, #0]
 800cd26:	9307      	str	r3, [sp, #28]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	2312      	movs	r3, #18
 800cd2c:	e7d0      	b.n	800ccd0 <_dtoa_r+0x238>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd32:	e7f5      	b.n	800cd20 <_dtoa_r+0x288>
 800cd34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd36:	9300      	str	r3, [sp, #0]
 800cd38:	9307      	str	r3, [sp, #28]
 800cd3a:	e7d7      	b.n	800ccec <_dtoa_r+0x254>
 800cd3c:	3101      	adds	r1, #1
 800cd3e:	0052      	lsls	r2, r2, #1
 800cd40:	e7d8      	b.n	800ccf4 <_dtoa_r+0x25c>
 800cd42:	bf00      	nop
 800cd44:	f3af 8000 	nop.w
 800cd48:	636f4361 	.word	0x636f4361
 800cd4c:	3fd287a7 	.word	0x3fd287a7
 800cd50:	8b60c8b3 	.word	0x8b60c8b3
 800cd54:	3fc68a28 	.word	0x3fc68a28
 800cd58:	509f79fb 	.word	0x509f79fb
 800cd5c:	3fd34413 	.word	0x3fd34413
 800cd60:	080116ba 	.word	0x080116ba
 800cd64:	0801177c 	.word	0x0801177c
 800cd68:	7ff00000 	.word	0x7ff00000
 800cd6c:	08011692 	.word	0x08011692
 800cd70:	3ff80000 	.word	0x3ff80000
 800cd74:	080118d8 	.word	0x080118d8
 800cd78:	080117d4 	.word	0x080117d4
 800cd7c:	08011778 	.word	0x08011778
 800cd80:	08011691 	.word	0x08011691
 800cd84:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cd88:	6018      	str	r0, [r3, #0]
 800cd8a:	9b07      	ldr	r3, [sp, #28]
 800cd8c:	2b0e      	cmp	r3, #14
 800cd8e:	f200 80a4 	bhi.w	800ceda <_dtoa_r+0x442>
 800cd92:	2c00      	cmp	r4, #0
 800cd94:	f000 80a1 	beq.w	800ceda <_dtoa_r+0x442>
 800cd98:	2f00      	cmp	r7, #0
 800cd9a:	dd33      	ble.n	800ce04 <_dtoa_r+0x36c>
 800cd9c:	4bad      	ldr	r3, [pc, #692]	@ (800d054 <_dtoa_r+0x5bc>)
 800cd9e:	f007 020f 	and.w	r2, r7, #15
 800cda2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cda6:	ed93 7b00 	vldr	d7, [r3]
 800cdaa:	05f8      	lsls	r0, r7, #23
 800cdac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cdb0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cdb4:	d516      	bpl.n	800cde4 <_dtoa_r+0x34c>
 800cdb6:	4ba8      	ldr	r3, [pc, #672]	@ (800d058 <_dtoa_r+0x5c0>)
 800cdb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cdc0:	f7f3 fd44 	bl	800084c <__aeabi_ddiv>
 800cdc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdc8:	f004 040f 	and.w	r4, r4, #15
 800cdcc:	2603      	movs	r6, #3
 800cdce:	4da2      	ldr	r5, [pc, #648]	@ (800d058 <_dtoa_r+0x5c0>)
 800cdd0:	b954      	cbnz	r4, 800cde8 <_dtoa_r+0x350>
 800cdd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdda:	f7f3 fd37 	bl	800084c <__aeabi_ddiv>
 800cdde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cde2:	e028      	b.n	800ce36 <_dtoa_r+0x39e>
 800cde4:	2602      	movs	r6, #2
 800cde6:	e7f2      	b.n	800cdce <_dtoa_r+0x336>
 800cde8:	07e1      	lsls	r1, r4, #31
 800cdea:	d508      	bpl.n	800cdfe <_dtoa_r+0x366>
 800cdec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdf0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cdf4:	f7f3 fc00 	bl	80005f8 <__aeabi_dmul>
 800cdf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cdfc:	3601      	adds	r6, #1
 800cdfe:	1064      	asrs	r4, r4, #1
 800ce00:	3508      	adds	r5, #8
 800ce02:	e7e5      	b.n	800cdd0 <_dtoa_r+0x338>
 800ce04:	f000 80d2 	beq.w	800cfac <_dtoa_r+0x514>
 800ce08:	427c      	negs	r4, r7
 800ce0a:	4b92      	ldr	r3, [pc, #584]	@ (800d054 <_dtoa_r+0x5bc>)
 800ce0c:	4d92      	ldr	r5, [pc, #584]	@ (800d058 <_dtoa_r+0x5c0>)
 800ce0e:	f004 020f 	and.w	r2, r4, #15
 800ce12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce1e:	f7f3 fbeb 	bl	80005f8 <__aeabi_dmul>
 800ce22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce26:	1124      	asrs	r4, r4, #4
 800ce28:	2300      	movs	r3, #0
 800ce2a:	2602      	movs	r6, #2
 800ce2c:	2c00      	cmp	r4, #0
 800ce2e:	f040 80b2 	bne.w	800cf96 <_dtoa_r+0x4fe>
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1d3      	bne.n	800cdde <_dtoa_r+0x346>
 800ce36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ce38:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f000 80b7 	beq.w	800cfb0 <_dtoa_r+0x518>
 800ce42:	4b86      	ldr	r3, [pc, #536]	@ (800d05c <_dtoa_r+0x5c4>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	4620      	mov	r0, r4
 800ce48:	4629      	mov	r1, r5
 800ce4a:	f7f3 fe47 	bl	8000adc <__aeabi_dcmplt>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	f000 80ae 	beq.w	800cfb0 <_dtoa_r+0x518>
 800ce54:	9b07      	ldr	r3, [sp, #28]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	f000 80aa 	beq.w	800cfb0 <_dtoa_r+0x518>
 800ce5c:	9b00      	ldr	r3, [sp, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	dd37      	ble.n	800ced2 <_dtoa_r+0x43a>
 800ce62:	1e7b      	subs	r3, r7, #1
 800ce64:	9304      	str	r3, [sp, #16]
 800ce66:	4620      	mov	r0, r4
 800ce68:	4b7d      	ldr	r3, [pc, #500]	@ (800d060 <_dtoa_r+0x5c8>)
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	f7f3 fbc3 	bl	80005f8 <__aeabi_dmul>
 800ce72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce76:	9c00      	ldr	r4, [sp, #0]
 800ce78:	3601      	adds	r6, #1
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	f7f3 fb52 	bl	8000524 <__aeabi_i2d>
 800ce80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce84:	f7f3 fbb8 	bl	80005f8 <__aeabi_dmul>
 800ce88:	4b76      	ldr	r3, [pc, #472]	@ (800d064 <_dtoa_r+0x5cc>)
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f7f3 f9fe 	bl	800028c <__adddf3>
 800ce90:	4605      	mov	r5, r0
 800ce92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ce96:	2c00      	cmp	r4, #0
 800ce98:	f040 808d 	bne.w	800cfb6 <_dtoa_r+0x51e>
 800ce9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cea0:	4b71      	ldr	r3, [pc, #452]	@ (800d068 <_dtoa_r+0x5d0>)
 800cea2:	2200      	movs	r2, #0
 800cea4:	f7f3 f9f0 	bl	8000288 <__aeabi_dsub>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ceb0:	462a      	mov	r2, r5
 800ceb2:	4633      	mov	r3, r6
 800ceb4:	f7f3 fe30 	bl	8000b18 <__aeabi_dcmpgt>
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	f040 828b 	bne.w	800d3d4 <_dtoa_r+0x93c>
 800cebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cec2:	462a      	mov	r2, r5
 800cec4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cec8:	f7f3 fe08 	bl	8000adc <__aeabi_dcmplt>
 800cecc:	2800      	cmp	r0, #0
 800cece:	f040 8128 	bne.w	800d122 <_dtoa_r+0x68a>
 800ced2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ced6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ceda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f2c0 815a 	blt.w	800d196 <_dtoa_r+0x6fe>
 800cee2:	2f0e      	cmp	r7, #14
 800cee4:	f300 8157 	bgt.w	800d196 <_dtoa_r+0x6fe>
 800cee8:	4b5a      	ldr	r3, [pc, #360]	@ (800d054 <_dtoa_r+0x5bc>)
 800ceea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ceee:	ed93 7b00 	vldr	d7, [r3]
 800cef2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	ed8d 7b00 	vstr	d7, [sp]
 800cefa:	da03      	bge.n	800cf04 <_dtoa_r+0x46c>
 800cefc:	9b07      	ldr	r3, [sp, #28]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f340 8101 	ble.w	800d106 <_dtoa_r+0x66e>
 800cf04:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cf08:	4656      	mov	r6, sl
 800cf0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf0e:	4620      	mov	r0, r4
 800cf10:	4629      	mov	r1, r5
 800cf12:	f7f3 fc9b 	bl	800084c <__aeabi_ddiv>
 800cf16:	f7f3 fe1f 	bl	8000b58 <__aeabi_d2iz>
 800cf1a:	4680      	mov	r8, r0
 800cf1c:	f7f3 fb02 	bl	8000524 <__aeabi_i2d>
 800cf20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf24:	f7f3 fb68 	bl	80005f8 <__aeabi_dmul>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	4629      	mov	r1, r5
 800cf30:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cf34:	f7f3 f9a8 	bl	8000288 <__aeabi_dsub>
 800cf38:	f806 4b01 	strb.w	r4, [r6], #1
 800cf3c:	9d07      	ldr	r5, [sp, #28]
 800cf3e:	eba6 040a 	sub.w	r4, r6, sl
 800cf42:	42a5      	cmp	r5, r4
 800cf44:	4602      	mov	r2, r0
 800cf46:	460b      	mov	r3, r1
 800cf48:	f040 8117 	bne.w	800d17a <_dtoa_r+0x6e2>
 800cf4c:	f7f3 f99e 	bl	800028c <__adddf3>
 800cf50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf54:	4604      	mov	r4, r0
 800cf56:	460d      	mov	r5, r1
 800cf58:	f7f3 fdde 	bl	8000b18 <__aeabi_dcmpgt>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	f040 80f9 	bne.w	800d154 <_dtoa_r+0x6bc>
 800cf62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf66:	4620      	mov	r0, r4
 800cf68:	4629      	mov	r1, r5
 800cf6a:	f7f3 fdad 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf6e:	b118      	cbz	r0, 800cf78 <_dtoa_r+0x4e0>
 800cf70:	f018 0f01 	tst.w	r8, #1
 800cf74:	f040 80ee 	bne.w	800d154 <_dtoa_r+0x6bc>
 800cf78:	4649      	mov	r1, r9
 800cf7a:	4658      	mov	r0, fp
 800cf7c:	f000 ffdc 	bl	800df38 <_Bfree>
 800cf80:	2300      	movs	r3, #0
 800cf82:	7033      	strb	r3, [r6, #0]
 800cf84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf86:	3701      	adds	r7, #1
 800cf88:	601f      	str	r7, [r3, #0]
 800cf8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f000 831d 	beq.w	800d5cc <_dtoa_r+0xb34>
 800cf92:	601e      	str	r6, [r3, #0]
 800cf94:	e31a      	b.n	800d5cc <_dtoa_r+0xb34>
 800cf96:	07e2      	lsls	r2, r4, #31
 800cf98:	d505      	bpl.n	800cfa6 <_dtoa_r+0x50e>
 800cf9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf9e:	f7f3 fb2b 	bl	80005f8 <__aeabi_dmul>
 800cfa2:	3601      	adds	r6, #1
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	1064      	asrs	r4, r4, #1
 800cfa8:	3508      	adds	r5, #8
 800cfaa:	e73f      	b.n	800ce2c <_dtoa_r+0x394>
 800cfac:	2602      	movs	r6, #2
 800cfae:	e742      	b.n	800ce36 <_dtoa_r+0x39e>
 800cfb0:	9c07      	ldr	r4, [sp, #28]
 800cfb2:	9704      	str	r7, [sp, #16]
 800cfb4:	e761      	b.n	800ce7a <_dtoa_r+0x3e2>
 800cfb6:	4b27      	ldr	r3, [pc, #156]	@ (800d054 <_dtoa_r+0x5bc>)
 800cfb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cfba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cfbe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cfc2:	4454      	add	r4, sl
 800cfc4:	2900      	cmp	r1, #0
 800cfc6:	d053      	beq.n	800d070 <_dtoa_r+0x5d8>
 800cfc8:	4928      	ldr	r1, [pc, #160]	@ (800d06c <_dtoa_r+0x5d4>)
 800cfca:	2000      	movs	r0, #0
 800cfcc:	f7f3 fc3e 	bl	800084c <__aeabi_ddiv>
 800cfd0:	4633      	mov	r3, r6
 800cfd2:	462a      	mov	r2, r5
 800cfd4:	f7f3 f958 	bl	8000288 <__aeabi_dsub>
 800cfd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cfdc:	4656      	mov	r6, sl
 800cfde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfe2:	f7f3 fdb9 	bl	8000b58 <__aeabi_d2iz>
 800cfe6:	4605      	mov	r5, r0
 800cfe8:	f7f3 fa9c 	bl	8000524 <__aeabi_i2d>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cff4:	f7f3 f948 	bl	8000288 <__aeabi_dsub>
 800cff8:	3530      	adds	r5, #48	@ 0x30
 800cffa:	4602      	mov	r2, r0
 800cffc:	460b      	mov	r3, r1
 800cffe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d002:	f806 5b01 	strb.w	r5, [r6], #1
 800d006:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d00a:	f7f3 fd67 	bl	8000adc <__aeabi_dcmplt>
 800d00e:	2800      	cmp	r0, #0
 800d010:	d171      	bne.n	800d0f6 <_dtoa_r+0x65e>
 800d012:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d016:	4911      	ldr	r1, [pc, #68]	@ (800d05c <_dtoa_r+0x5c4>)
 800d018:	2000      	movs	r0, #0
 800d01a:	f7f3 f935 	bl	8000288 <__aeabi_dsub>
 800d01e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d022:	f7f3 fd5b 	bl	8000adc <__aeabi_dcmplt>
 800d026:	2800      	cmp	r0, #0
 800d028:	f040 8095 	bne.w	800d156 <_dtoa_r+0x6be>
 800d02c:	42a6      	cmp	r6, r4
 800d02e:	f43f af50 	beq.w	800ced2 <_dtoa_r+0x43a>
 800d032:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d036:	4b0a      	ldr	r3, [pc, #40]	@ (800d060 <_dtoa_r+0x5c8>)
 800d038:	2200      	movs	r2, #0
 800d03a:	f7f3 fadd 	bl	80005f8 <__aeabi_dmul>
 800d03e:	4b08      	ldr	r3, [pc, #32]	@ (800d060 <_dtoa_r+0x5c8>)
 800d040:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d044:	2200      	movs	r2, #0
 800d046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d04a:	f7f3 fad5 	bl	80005f8 <__aeabi_dmul>
 800d04e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d052:	e7c4      	b.n	800cfde <_dtoa_r+0x546>
 800d054:	080118d8 	.word	0x080118d8
 800d058:	080118b0 	.word	0x080118b0
 800d05c:	3ff00000 	.word	0x3ff00000
 800d060:	40240000 	.word	0x40240000
 800d064:	401c0000 	.word	0x401c0000
 800d068:	40140000 	.word	0x40140000
 800d06c:	3fe00000 	.word	0x3fe00000
 800d070:	4631      	mov	r1, r6
 800d072:	4628      	mov	r0, r5
 800d074:	f7f3 fac0 	bl	80005f8 <__aeabi_dmul>
 800d078:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d07c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d07e:	4656      	mov	r6, sl
 800d080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d084:	f7f3 fd68 	bl	8000b58 <__aeabi_d2iz>
 800d088:	4605      	mov	r5, r0
 800d08a:	f7f3 fa4b 	bl	8000524 <__aeabi_i2d>
 800d08e:	4602      	mov	r2, r0
 800d090:	460b      	mov	r3, r1
 800d092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d096:	f7f3 f8f7 	bl	8000288 <__aeabi_dsub>
 800d09a:	3530      	adds	r5, #48	@ 0x30
 800d09c:	f806 5b01 	strb.w	r5, [r6], #1
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	42a6      	cmp	r6, r4
 800d0a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0aa:	f04f 0200 	mov.w	r2, #0
 800d0ae:	d124      	bne.n	800d0fa <_dtoa_r+0x662>
 800d0b0:	4bac      	ldr	r3, [pc, #688]	@ (800d364 <_dtoa_r+0x8cc>)
 800d0b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d0b6:	f7f3 f8e9 	bl	800028c <__adddf3>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	460b      	mov	r3, r1
 800d0be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0c2:	f7f3 fd29 	bl	8000b18 <__aeabi_dcmpgt>
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	d145      	bne.n	800d156 <_dtoa_r+0x6be>
 800d0ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d0ce:	49a5      	ldr	r1, [pc, #660]	@ (800d364 <_dtoa_r+0x8cc>)
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	f7f3 f8d9 	bl	8000288 <__aeabi_dsub>
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	460b      	mov	r3, r1
 800d0da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0de:	f7f3 fcfd 	bl	8000adc <__aeabi_dcmplt>
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	f43f aef5 	beq.w	800ced2 <_dtoa_r+0x43a>
 800d0e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d0ea:	1e73      	subs	r3, r6, #1
 800d0ec:	9315      	str	r3, [sp, #84]	@ 0x54
 800d0ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d0f2:	2b30      	cmp	r3, #48	@ 0x30
 800d0f4:	d0f8      	beq.n	800d0e8 <_dtoa_r+0x650>
 800d0f6:	9f04      	ldr	r7, [sp, #16]
 800d0f8:	e73e      	b.n	800cf78 <_dtoa_r+0x4e0>
 800d0fa:	4b9b      	ldr	r3, [pc, #620]	@ (800d368 <_dtoa_r+0x8d0>)
 800d0fc:	f7f3 fa7c 	bl	80005f8 <__aeabi_dmul>
 800d100:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d104:	e7bc      	b.n	800d080 <_dtoa_r+0x5e8>
 800d106:	d10c      	bne.n	800d122 <_dtoa_r+0x68a>
 800d108:	4b98      	ldr	r3, [pc, #608]	@ (800d36c <_dtoa_r+0x8d4>)
 800d10a:	2200      	movs	r2, #0
 800d10c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d110:	f7f3 fa72 	bl	80005f8 <__aeabi_dmul>
 800d114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d118:	f7f3 fcf4 	bl	8000b04 <__aeabi_dcmpge>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	f000 8157 	beq.w	800d3d0 <_dtoa_r+0x938>
 800d122:	2400      	movs	r4, #0
 800d124:	4625      	mov	r5, r4
 800d126:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d128:	43db      	mvns	r3, r3
 800d12a:	9304      	str	r3, [sp, #16]
 800d12c:	4656      	mov	r6, sl
 800d12e:	2700      	movs	r7, #0
 800d130:	4621      	mov	r1, r4
 800d132:	4658      	mov	r0, fp
 800d134:	f000 ff00 	bl	800df38 <_Bfree>
 800d138:	2d00      	cmp	r5, #0
 800d13a:	d0dc      	beq.n	800d0f6 <_dtoa_r+0x65e>
 800d13c:	b12f      	cbz	r7, 800d14a <_dtoa_r+0x6b2>
 800d13e:	42af      	cmp	r7, r5
 800d140:	d003      	beq.n	800d14a <_dtoa_r+0x6b2>
 800d142:	4639      	mov	r1, r7
 800d144:	4658      	mov	r0, fp
 800d146:	f000 fef7 	bl	800df38 <_Bfree>
 800d14a:	4629      	mov	r1, r5
 800d14c:	4658      	mov	r0, fp
 800d14e:	f000 fef3 	bl	800df38 <_Bfree>
 800d152:	e7d0      	b.n	800d0f6 <_dtoa_r+0x65e>
 800d154:	9704      	str	r7, [sp, #16]
 800d156:	4633      	mov	r3, r6
 800d158:	461e      	mov	r6, r3
 800d15a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d15e:	2a39      	cmp	r2, #57	@ 0x39
 800d160:	d107      	bne.n	800d172 <_dtoa_r+0x6da>
 800d162:	459a      	cmp	sl, r3
 800d164:	d1f8      	bne.n	800d158 <_dtoa_r+0x6c0>
 800d166:	9a04      	ldr	r2, [sp, #16]
 800d168:	3201      	adds	r2, #1
 800d16a:	9204      	str	r2, [sp, #16]
 800d16c:	2230      	movs	r2, #48	@ 0x30
 800d16e:	f88a 2000 	strb.w	r2, [sl]
 800d172:	781a      	ldrb	r2, [r3, #0]
 800d174:	3201      	adds	r2, #1
 800d176:	701a      	strb	r2, [r3, #0]
 800d178:	e7bd      	b.n	800d0f6 <_dtoa_r+0x65e>
 800d17a:	4b7b      	ldr	r3, [pc, #492]	@ (800d368 <_dtoa_r+0x8d0>)
 800d17c:	2200      	movs	r2, #0
 800d17e:	f7f3 fa3b 	bl	80005f8 <__aeabi_dmul>
 800d182:	2200      	movs	r2, #0
 800d184:	2300      	movs	r3, #0
 800d186:	4604      	mov	r4, r0
 800d188:	460d      	mov	r5, r1
 800d18a:	f7f3 fc9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d18e:	2800      	cmp	r0, #0
 800d190:	f43f aebb 	beq.w	800cf0a <_dtoa_r+0x472>
 800d194:	e6f0      	b.n	800cf78 <_dtoa_r+0x4e0>
 800d196:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d198:	2a00      	cmp	r2, #0
 800d19a:	f000 80db 	beq.w	800d354 <_dtoa_r+0x8bc>
 800d19e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1a0:	2a01      	cmp	r2, #1
 800d1a2:	f300 80bf 	bgt.w	800d324 <_dtoa_r+0x88c>
 800d1a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d1a8:	2a00      	cmp	r2, #0
 800d1aa:	f000 80b7 	beq.w	800d31c <_dtoa_r+0x884>
 800d1ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d1b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d1b4:	4646      	mov	r6, r8
 800d1b6:	9a08      	ldr	r2, [sp, #32]
 800d1b8:	2101      	movs	r1, #1
 800d1ba:	441a      	add	r2, r3
 800d1bc:	4658      	mov	r0, fp
 800d1be:	4498      	add	r8, r3
 800d1c0:	9208      	str	r2, [sp, #32]
 800d1c2:	f000 ffb7 	bl	800e134 <__i2b>
 800d1c6:	4605      	mov	r5, r0
 800d1c8:	b15e      	cbz	r6, 800d1e2 <_dtoa_r+0x74a>
 800d1ca:	9b08      	ldr	r3, [sp, #32]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	dd08      	ble.n	800d1e2 <_dtoa_r+0x74a>
 800d1d0:	42b3      	cmp	r3, r6
 800d1d2:	9a08      	ldr	r2, [sp, #32]
 800d1d4:	bfa8      	it	ge
 800d1d6:	4633      	movge	r3, r6
 800d1d8:	eba8 0803 	sub.w	r8, r8, r3
 800d1dc:	1af6      	subs	r6, r6, r3
 800d1de:	1ad3      	subs	r3, r2, r3
 800d1e0:	9308      	str	r3, [sp, #32]
 800d1e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1e4:	b1f3      	cbz	r3, 800d224 <_dtoa_r+0x78c>
 800d1e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f000 80b7 	beq.w	800d35c <_dtoa_r+0x8c4>
 800d1ee:	b18c      	cbz	r4, 800d214 <_dtoa_r+0x77c>
 800d1f0:	4629      	mov	r1, r5
 800d1f2:	4622      	mov	r2, r4
 800d1f4:	4658      	mov	r0, fp
 800d1f6:	f001 f85d 	bl	800e2b4 <__pow5mult>
 800d1fa:	464a      	mov	r2, r9
 800d1fc:	4601      	mov	r1, r0
 800d1fe:	4605      	mov	r5, r0
 800d200:	4658      	mov	r0, fp
 800d202:	f000 ffad 	bl	800e160 <__multiply>
 800d206:	4649      	mov	r1, r9
 800d208:	9004      	str	r0, [sp, #16]
 800d20a:	4658      	mov	r0, fp
 800d20c:	f000 fe94 	bl	800df38 <_Bfree>
 800d210:	9b04      	ldr	r3, [sp, #16]
 800d212:	4699      	mov	r9, r3
 800d214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d216:	1b1a      	subs	r2, r3, r4
 800d218:	d004      	beq.n	800d224 <_dtoa_r+0x78c>
 800d21a:	4649      	mov	r1, r9
 800d21c:	4658      	mov	r0, fp
 800d21e:	f001 f849 	bl	800e2b4 <__pow5mult>
 800d222:	4681      	mov	r9, r0
 800d224:	2101      	movs	r1, #1
 800d226:	4658      	mov	r0, fp
 800d228:	f000 ff84 	bl	800e134 <__i2b>
 800d22c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d22e:	4604      	mov	r4, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	f000 81cf 	beq.w	800d5d4 <_dtoa_r+0xb3c>
 800d236:	461a      	mov	r2, r3
 800d238:	4601      	mov	r1, r0
 800d23a:	4658      	mov	r0, fp
 800d23c:	f001 f83a 	bl	800e2b4 <__pow5mult>
 800d240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d242:	2b01      	cmp	r3, #1
 800d244:	4604      	mov	r4, r0
 800d246:	f300 8095 	bgt.w	800d374 <_dtoa_r+0x8dc>
 800d24a:	9b02      	ldr	r3, [sp, #8]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f040 8087 	bne.w	800d360 <_dtoa_r+0x8c8>
 800d252:	9b03      	ldr	r3, [sp, #12]
 800d254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f040 8089 	bne.w	800d370 <_dtoa_r+0x8d8>
 800d25e:	9b03      	ldr	r3, [sp, #12]
 800d260:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d264:	0d1b      	lsrs	r3, r3, #20
 800d266:	051b      	lsls	r3, r3, #20
 800d268:	b12b      	cbz	r3, 800d276 <_dtoa_r+0x7de>
 800d26a:	9b08      	ldr	r3, [sp, #32]
 800d26c:	3301      	adds	r3, #1
 800d26e:	9308      	str	r3, [sp, #32]
 800d270:	f108 0801 	add.w	r8, r8, #1
 800d274:	2301      	movs	r3, #1
 800d276:	930a      	str	r3, [sp, #40]	@ 0x28
 800d278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	f000 81b0 	beq.w	800d5e0 <_dtoa_r+0xb48>
 800d280:	6923      	ldr	r3, [r4, #16]
 800d282:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d286:	6918      	ldr	r0, [r3, #16]
 800d288:	f000 ff08 	bl	800e09c <__hi0bits>
 800d28c:	f1c0 0020 	rsb	r0, r0, #32
 800d290:	9b08      	ldr	r3, [sp, #32]
 800d292:	4418      	add	r0, r3
 800d294:	f010 001f 	ands.w	r0, r0, #31
 800d298:	d077      	beq.n	800d38a <_dtoa_r+0x8f2>
 800d29a:	f1c0 0320 	rsb	r3, r0, #32
 800d29e:	2b04      	cmp	r3, #4
 800d2a0:	dd6b      	ble.n	800d37a <_dtoa_r+0x8e2>
 800d2a2:	9b08      	ldr	r3, [sp, #32]
 800d2a4:	f1c0 001c 	rsb	r0, r0, #28
 800d2a8:	4403      	add	r3, r0
 800d2aa:	4480      	add	r8, r0
 800d2ac:	4406      	add	r6, r0
 800d2ae:	9308      	str	r3, [sp, #32]
 800d2b0:	f1b8 0f00 	cmp.w	r8, #0
 800d2b4:	dd05      	ble.n	800d2c2 <_dtoa_r+0x82a>
 800d2b6:	4649      	mov	r1, r9
 800d2b8:	4642      	mov	r2, r8
 800d2ba:	4658      	mov	r0, fp
 800d2bc:	f001 f854 	bl	800e368 <__lshift>
 800d2c0:	4681      	mov	r9, r0
 800d2c2:	9b08      	ldr	r3, [sp, #32]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	dd05      	ble.n	800d2d4 <_dtoa_r+0x83c>
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	4658      	mov	r0, fp
 800d2ce:	f001 f84b 	bl	800e368 <__lshift>
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d059      	beq.n	800d38e <_dtoa_r+0x8f6>
 800d2da:	4621      	mov	r1, r4
 800d2dc:	4648      	mov	r0, r9
 800d2de:	f001 f8af 	bl	800e440 <__mcmp>
 800d2e2:	2800      	cmp	r0, #0
 800d2e4:	da53      	bge.n	800d38e <_dtoa_r+0x8f6>
 800d2e6:	1e7b      	subs	r3, r7, #1
 800d2e8:	9304      	str	r3, [sp, #16]
 800d2ea:	4649      	mov	r1, r9
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	220a      	movs	r2, #10
 800d2f0:	4658      	mov	r0, fp
 800d2f2:	f000 fe43 	bl	800df7c <__multadd>
 800d2f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2f8:	4681      	mov	r9, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	f000 8172 	beq.w	800d5e4 <_dtoa_r+0xb4c>
 800d300:	2300      	movs	r3, #0
 800d302:	4629      	mov	r1, r5
 800d304:	220a      	movs	r2, #10
 800d306:	4658      	mov	r0, fp
 800d308:	f000 fe38 	bl	800df7c <__multadd>
 800d30c:	9b00      	ldr	r3, [sp, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	4605      	mov	r5, r0
 800d312:	dc67      	bgt.n	800d3e4 <_dtoa_r+0x94c>
 800d314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d316:	2b02      	cmp	r3, #2
 800d318:	dc41      	bgt.n	800d39e <_dtoa_r+0x906>
 800d31a:	e063      	b.n	800d3e4 <_dtoa_r+0x94c>
 800d31c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d31e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d322:	e746      	b.n	800d1b2 <_dtoa_r+0x71a>
 800d324:	9b07      	ldr	r3, [sp, #28]
 800d326:	1e5c      	subs	r4, r3, #1
 800d328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d32a:	42a3      	cmp	r3, r4
 800d32c:	bfbf      	itttt	lt
 800d32e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d330:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d332:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d334:	1ae3      	sublt	r3, r4, r3
 800d336:	bfb4      	ite	lt
 800d338:	18d2      	addlt	r2, r2, r3
 800d33a:	1b1c      	subge	r4, r3, r4
 800d33c:	9b07      	ldr	r3, [sp, #28]
 800d33e:	bfbc      	itt	lt
 800d340:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d342:	2400      	movlt	r4, #0
 800d344:	2b00      	cmp	r3, #0
 800d346:	bfb5      	itete	lt
 800d348:	eba8 0603 	sublt.w	r6, r8, r3
 800d34c:	9b07      	ldrge	r3, [sp, #28]
 800d34e:	2300      	movlt	r3, #0
 800d350:	4646      	movge	r6, r8
 800d352:	e730      	b.n	800d1b6 <_dtoa_r+0x71e>
 800d354:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d356:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d358:	4646      	mov	r6, r8
 800d35a:	e735      	b.n	800d1c8 <_dtoa_r+0x730>
 800d35c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d35e:	e75c      	b.n	800d21a <_dtoa_r+0x782>
 800d360:	2300      	movs	r3, #0
 800d362:	e788      	b.n	800d276 <_dtoa_r+0x7de>
 800d364:	3fe00000 	.word	0x3fe00000
 800d368:	40240000 	.word	0x40240000
 800d36c:	40140000 	.word	0x40140000
 800d370:	9b02      	ldr	r3, [sp, #8]
 800d372:	e780      	b.n	800d276 <_dtoa_r+0x7de>
 800d374:	2300      	movs	r3, #0
 800d376:	930a      	str	r3, [sp, #40]	@ 0x28
 800d378:	e782      	b.n	800d280 <_dtoa_r+0x7e8>
 800d37a:	d099      	beq.n	800d2b0 <_dtoa_r+0x818>
 800d37c:	9a08      	ldr	r2, [sp, #32]
 800d37e:	331c      	adds	r3, #28
 800d380:	441a      	add	r2, r3
 800d382:	4498      	add	r8, r3
 800d384:	441e      	add	r6, r3
 800d386:	9208      	str	r2, [sp, #32]
 800d388:	e792      	b.n	800d2b0 <_dtoa_r+0x818>
 800d38a:	4603      	mov	r3, r0
 800d38c:	e7f6      	b.n	800d37c <_dtoa_r+0x8e4>
 800d38e:	9b07      	ldr	r3, [sp, #28]
 800d390:	9704      	str	r7, [sp, #16]
 800d392:	2b00      	cmp	r3, #0
 800d394:	dc20      	bgt.n	800d3d8 <_dtoa_r+0x940>
 800d396:	9300      	str	r3, [sp, #0]
 800d398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d39a:	2b02      	cmp	r3, #2
 800d39c:	dd1e      	ble.n	800d3dc <_dtoa_r+0x944>
 800d39e:	9b00      	ldr	r3, [sp, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	f47f aec0 	bne.w	800d126 <_dtoa_r+0x68e>
 800d3a6:	4621      	mov	r1, r4
 800d3a8:	2205      	movs	r2, #5
 800d3aa:	4658      	mov	r0, fp
 800d3ac:	f000 fde6 	bl	800df7c <__multadd>
 800d3b0:	4601      	mov	r1, r0
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	4648      	mov	r0, r9
 800d3b6:	f001 f843 	bl	800e440 <__mcmp>
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	f77f aeb3 	ble.w	800d126 <_dtoa_r+0x68e>
 800d3c0:	4656      	mov	r6, sl
 800d3c2:	2331      	movs	r3, #49	@ 0x31
 800d3c4:	f806 3b01 	strb.w	r3, [r6], #1
 800d3c8:	9b04      	ldr	r3, [sp, #16]
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	9304      	str	r3, [sp, #16]
 800d3ce:	e6ae      	b.n	800d12e <_dtoa_r+0x696>
 800d3d0:	9c07      	ldr	r4, [sp, #28]
 800d3d2:	9704      	str	r7, [sp, #16]
 800d3d4:	4625      	mov	r5, r4
 800d3d6:	e7f3      	b.n	800d3c0 <_dtoa_r+0x928>
 800d3d8:	9b07      	ldr	r3, [sp, #28]
 800d3da:	9300      	str	r3, [sp, #0]
 800d3dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	f000 8104 	beq.w	800d5ec <_dtoa_r+0xb54>
 800d3e4:	2e00      	cmp	r6, #0
 800d3e6:	dd05      	ble.n	800d3f4 <_dtoa_r+0x95c>
 800d3e8:	4629      	mov	r1, r5
 800d3ea:	4632      	mov	r2, r6
 800d3ec:	4658      	mov	r0, fp
 800d3ee:	f000 ffbb 	bl	800e368 <__lshift>
 800d3f2:	4605      	mov	r5, r0
 800d3f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d05a      	beq.n	800d4b0 <_dtoa_r+0xa18>
 800d3fa:	6869      	ldr	r1, [r5, #4]
 800d3fc:	4658      	mov	r0, fp
 800d3fe:	f000 fd5b 	bl	800deb8 <_Balloc>
 800d402:	4606      	mov	r6, r0
 800d404:	b928      	cbnz	r0, 800d412 <_dtoa_r+0x97a>
 800d406:	4b84      	ldr	r3, [pc, #528]	@ (800d618 <_dtoa_r+0xb80>)
 800d408:	4602      	mov	r2, r0
 800d40a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d40e:	f7ff bb5a 	b.w	800cac6 <_dtoa_r+0x2e>
 800d412:	692a      	ldr	r2, [r5, #16]
 800d414:	3202      	adds	r2, #2
 800d416:	0092      	lsls	r2, r2, #2
 800d418:	f105 010c 	add.w	r1, r5, #12
 800d41c:	300c      	adds	r0, #12
 800d41e:	f7ff fa76 	bl	800c90e <memcpy>
 800d422:	2201      	movs	r2, #1
 800d424:	4631      	mov	r1, r6
 800d426:	4658      	mov	r0, fp
 800d428:	f000 ff9e 	bl	800e368 <__lshift>
 800d42c:	f10a 0301 	add.w	r3, sl, #1
 800d430:	9307      	str	r3, [sp, #28]
 800d432:	9b00      	ldr	r3, [sp, #0]
 800d434:	4453      	add	r3, sl
 800d436:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d438:	9b02      	ldr	r3, [sp, #8]
 800d43a:	f003 0301 	and.w	r3, r3, #1
 800d43e:	462f      	mov	r7, r5
 800d440:	930a      	str	r3, [sp, #40]	@ 0x28
 800d442:	4605      	mov	r5, r0
 800d444:	9b07      	ldr	r3, [sp, #28]
 800d446:	4621      	mov	r1, r4
 800d448:	3b01      	subs	r3, #1
 800d44a:	4648      	mov	r0, r9
 800d44c:	9300      	str	r3, [sp, #0]
 800d44e:	f7ff fa9b 	bl	800c988 <quorem>
 800d452:	4639      	mov	r1, r7
 800d454:	9002      	str	r0, [sp, #8]
 800d456:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d45a:	4648      	mov	r0, r9
 800d45c:	f000 fff0 	bl	800e440 <__mcmp>
 800d460:	462a      	mov	r2, r5
 800d462:	9008      	str	r0, [sp, #32]
 800d464:	4621      	mov	r1, r4
 800d466:	4658      	mov	r0, fp
 800d468:	f001 f806 	bl	800e478 <__mdiff>
 800d46c:	68c2      	ldr	r2, [r0, #12]
 800d46e:	4606      	mov	r6, r0
 800d470:	bb02      	cbnz	r2, 800d4b4 <_dtoa_r+0xa1c>
 800d472:	4601      	mov	r1, r0
 800d474:	4648      	mov	r0, r9
 800d476:	f000 ffe3 	bl	800e440 <__mcmp>
 800d47a:	4602      	mov	r2, r0
 800d47c:	4631      	mov	r1, r6
 800d47e:	4658      	mov	r0, fp
 800d480:	920e      	str	r2, [sp, #56]	@ 0x38
 800d482:	f000 fd59 	bl	800df38 <_Bfree>
 800d486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d488:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d48a:	9e07      	ldr	r6, [sp, #28]
 800d48c:	ea43 0102 	orr.w	r1, r3, r2
 800d490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d492:	4319      	orrs	r1, r3
 800d494:	d110      	bne.n	800d4b8 <_dtoa_r+0xa20>
 800d496:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d49a:	d029      	beq.n	800d4f0 <_dtoa_r+0xa58>
 800d49c:	9b08      	ldr	r3, [sp, #32]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	dd02      	ble.n	800d4a8 <_dtoa_r+0xa10>
 800d4a2:	9b02      	ldr	r3, [sp, #8]
 800d4a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d4a8:	9b00      	ldr	r3, [sp, #0]
 800d4aa:	f883 8000 	strb.w	r8, [r3]
 800d4ae:	e63f      	b.n	800d130 <_dtoa_r+0x698>
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	e7bb      	b.n	800d42c <_dtoa_r+0x994>
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	e7e1      	b.n	800d47c <_dtoa_r+0x9e4>
 800d4b8:	9b08      	ldr	r3, [sp, #32]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	db04      	blt.n	800d4c8 <_dtoa_r+0xa30>
 800d4be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d4c0:	430b      	orrs	r3, r1
 800d4c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4c4:	430b      	orrs	r3, r1
 800d4c6:	d120      	bne.n	800d50a <_dtoa_r+0xa72>
 800d4c8:	2a00      	cmp	r2, #0
 800d4ca:	dded      	ble.n	800d4a8 <_dtoa_r+0xa10>
 800d4cc:	4649      	mov	r1, r9
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	4658      	mov	r0, fp
 800d4d2:	f000 ff49 	bl	800e368 <__lshift>
 800d4d6:	4621      	mov	r1, r4
 800d4d8:	4681      	mov	r9, r0
 800d4da:	f000 ffb1 	bl	800e440 <__mcmp>
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	dc03      	bgt.n	800d4ea <_dtoa_r+0xa52>
 800d4e2:	d1e1      	bne.n	800d4a8 <_dtoa_r+0xa10>
 800d4e4:	f018 0f01 	tst.w	r8, #1
 800d4e8:	d0de      	beq.n	800d4a8 <_dtoa_r+0xa10>
 800d4ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d4ee:	d1d8      	bne.n	800d4a2 <_dtoa_r+0xa0a>
 800d4f0:	9a00      	ldr	r2, [sp, #0]
 800d4f2:	2339      	movs	r3, #57	@ 0x39
 800d4f4:	7013      	strb	r3, [r2, #0]
 800d4f6:	4633      	mov	r3, r6
 800d4f8:	461e      	mov	r6, r3
 800d4fa:	3b01      	subs	r3, #1
 800d4fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d500:	2a39      	cmp	r2, #57	@ 0x39
 800d502:	d052      	beq.n	800d5aa <_dtoa_r+0xb12>
 800d504:	3201      	adds	r2, #1
 800d506:	701a      	strb	r2, [r3, #0]
 800d508:	e612      	b.n	800d130 <_dtoa_r+0x698>
 800d50a:	2a00      	cmp	r2, #0
 800d50c:	dd07      	ble.n	800d51e <_dtoa_r+0xa86>
 800d50e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d512:	d0ed      	beq.n	800d4f0 <_dtoa_r+0xa58>
 800d514:	9a00      	ldr	r2, [sp, #0]
 800d516:	f108 0301 	add.w	r3, r8, #1
 800d51a:	7013      	strb	r3, [r2, #0]
 800d51c:	e608      	b.n	800d130 <_dtoa_r+0x698>
 800d51e:	9b07      	ldr	r3, [sp, #28]
 800d520:	9a07      	ldr	r2, [sp, #28]
 800d522:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d528:	4293      	cmp	r3, r2
 800d52a:	d028      	beq.n	800d57e <_dtoa_r+0xae6>
 800d52c:	4649      	mov	r1, r9
 800d52e:	2300      	movs	r3, #0
 800d530:	220a      	movs	r2, #10
 800d532:	4658      	mov	r0, fp
 800d534:	f000 fd22 	bl	800df7c <__multadd>
 800d538:	42af      	cmp	r7, r5
 800d53a:	4681      	mov	r9, r0
 800d53c:	f04f 0300 	mov.w	r3, #0
 800d540:	f04f 020a 	mov.w	r2, #10
 800d544:	4639      	mov	r1, r7
 800d546:	4658      	mov	r0, fp
 800d548:	d107      	bne.n	800d55a <_dtoa_r+0xac2>
 800d54a:	f000 fd17 	bl	800df7c <__multadd>
 800d54e:	4607      	mov	r7, r0
 800d550:	4605      	mov	r5, r0
 800d552:	9b07      	ldr	r3, [sp, #28]
 800d554:	3301      	adds	r3, #1
 800d556:	9307      	str	r3, [sp, #28]
 800d558:	e774      	b.n	800d444 <_dtoa_r+0x9ac>
 800d55a:	f000 fd0f 	bl	800df7c <__multadd>
 800d55e:	4629      	mov	r1, r5
 800d560:	4607      	mov	r7, r0
 800d562:	2300      	movs	r3, #0
 800d564:	220a      	movs	r2, #10
 800d566:	4658      	mov	r0, fp
 800d568:	f000 fd08 	bl	800df7c <__multadd>
 800d56c:	4605      	mov	r5, r0
 800d56e:	e7f0      	b.n	800d552 <_dtoa_r+0xaba>
 800d570:	9b00      	ldr	r3, [sp, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	bfcc      	ite	gt
 800d576:	461e      	movgt	r6, r3
 800d578:	2601      	movle	r6, #1
 800d57a:	4456      	add	r6, sl
 800d57c:	2700      	movs	r7, #0
 800d57e:	4649      	mov	r1, r9
 800d580:	2201      	movs	r2, #1
 800d582:	4658      	mov	r0, fp
 800d584:	f000 fef0 	bl	800e368 <__lshift>
 800d588:	4621      	mov	r1, r4
 800d58a:	4681      	mov	r9, r0
 800d58c:	f000 ff58 	bl	800e440 <__mcmp>
 800d590:	2800      	cmp	r0, #0
 800d592:	dcb0      	bgt.n	800d4f6 <_dtoa_r+0xa5e>
 800d594:	d102      	bne.n	800d59c <_dtoa_r+0xb04>
 800d596:	f018 0f01 	tst.w	r8, #1
 800d59a:	d1ac      	bne.n	800d4f6 <_dtoa_r+0xa5e>
 800d59c:	4633      	mov	r3, r6
 800d59e:	461e      	mov	r6, r3
 800d5a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5a4:	2a30      	cmp	r2, #48	@ 0x30
 800d5a6:	d0fa      	beq.n	800d59e <_dtoa_r+0xb06>
 800d5a8:	e5c2      	b.n	800d130 <_dtoa_r+0x698>
 800d5aa:	459a      	cmp	sl, r3
 800d5ac:	d1a4      	bne.n	800d4f8 <_dtoa_r+0xa60>
 800d5ae:	9b04      	ldr	r3, [sp, #16]
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	9304      	str	r3, [sp, #16]
 800d5b4:	2331      	movs	r3, #49	@ 0x31
 800d5b6:	f88a 3000 	strb.w	r3, [sl]
 800d5ba:	e5b9      	b.n	800d130 <_dtoa_r+0x698>
 800d5bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d5be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d61c <_dtoa_r+0xb84>
 800d5c2:	b11b      	cbz	r3, 800d5cc <_dtoa_r+0xb34>
 800d5c4:	f10a 0308 	add.w	r3, sl, #8
 800d5c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d5ca:	6013      	str	r3, [r2, #0]
 800d5cc:	4650      	mov	r0, sl
 800d5ce:	b019      	add	sp, #100	@ 0x64
 800d5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	f77f ae37 	ble.w	800d24a <_dtoa_r+0x7b2>
 800d5dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5de:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5e0:	2001      	movs	r0, #1
 800d5e2:	e655      	b.n	800d290 <_dtoa_r+0x7f8>
 800d5e4:	9b00      	ldr	r3, [sp, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	f77f aed6 	ble.w	800d398 <_dtoa_r+0x900>
 800d5ec:	4656      	mov	r6, sl
 800d5ee:	4621      	mov	r1, r4
 800d5f0:	4648      	mov	r0, r9
 800d5f2:	f7ff f9c9 	bl	800c988 <quorem>
 800d5f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d5fa:	f806 8b01 	strb.w	r8, [r6], #1
 800d5fe:	9b00      	ldr	r3, [sp, #0]
 800d600:	eba6 020a 	sub.w	r2, r6, sl
 800d604:	4293      	cmp	r3, r2
 800d606:	ddb3      	ble.n	800d570 <_dtoa_r+0xad8>
 800d608:	4649      	mov	r1, r9
 800d60a:	2300      	movs	r3, #0
 800d60c:	220a      	movs	r2, #10
 800d60e:	4658      	mov	r0, fp
 800d610:	f000 fcb4 	bl	800df7c <__multadd>
 800d614:	4681      	mov	r9, r0
 800d616:	e7ea      	b.n	800d5ee <_dtoa_r+0xb56>
 800d618:	080117d4 	.word	0x080117d4
 800d61c:	0801176f 	.word	0x0801176f

0800d620 <_free_r>:
 800d620:	b538      	push	{r3, r4, r5, lr}
 800d622:	4605      	mov	r5, r0
 800d624:	2900      	cmp	r1, #0
 800d626:	d041      	beq.n	800d6ac <_free_r+0x8c>
 800d628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d62c:	1f0c      	subs	r4, r1, #4
 800d62e:	2b00      	cmp	r3, #0
 800d630:	bfb8      	it	lt
 800d632:	18e4      	addlt	r4, r4, r3
 800d634:	f000 fc34 	bl	800dea0 <__malloc_lock>
 800d638:	4a1d      	ldr	r2, [pc, #116]	@ (800d6b0 <_free_r+0x90>)
 800d63a:	6813      	ldr	r3, [r2, #0]
 800d63c:	b933      	cbnz	r3, 800d64c <_free_r+0x2c>
 800d63e:	6063      	str	r3, [r4, #4]
 800d640:	6014      	str	r4, [r2, #0]
 800d642:	4628      	mov	r0, r5
 800d644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d648:	f000 bc30 	b.w	800deac <__malloc_unlock>
 800d64c:	42a3      	cmp	r3, r4
 800d64e:	d908      	bls.n	800d662 <_free_r+0x42>
 800d650:	6820      	ldr	r0, [r4, #0]
 800d652:	1821      	adds	r1, r4, r0
 800d654:	428b      	cmp	r3, r1
 800d656:	bf01      	itttt	eq
 800d658:	6819      	ldreq	r1, [r3, #0]
 800d65a:	685b      	ldreq	r3, [r3, #4]
 800d65c:	1809      	addeq	r1, r1, r0
 800d65e:	6021      	streq	r1, [r4, #0]
 800d660:	e7ed      	b.n	800d63e <_free_r+0x1e>
 800d662:	461a      	mov	r2, r3
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	b10b      	cbz	r3, 800d66c <_free_r+0x4c>
 800d668:	42a3      	cmp	r3, r4
 800d66a:	d9fa      	bls.n	800d662 <_free_r+0x42>
 800d66c:	6811      	ldr	r1, [r2, #0]
 800d66e:	1850      	adds	r0, r2, r1
 800d670:	42a0      	cmp	r0, r4
 800d672:	d10b      	bne.n	800d68c <_free_r+0x6c>
 800d674:	6820      	ldr	r0, [r4, #0]
 800d676:	4401      	add	r1, r0
 800d678:	1850      	adds	r0, r2, r1
 800d67a:	4283      	cmp	r3, r0
 800d67c:	6011      	str	r1, [r2, #0]
 800d67e:	d1e0      	bne.n	800d642 <_free_r+0x22>
 800d680:	6818      	ldr	r0, [r3, #0]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	6053      	str	r3, [r2, #4]
 800d686:	4408      	add	r0, r1
 800d688:	6010      	str	r0, [r2, #0]
 800d68a:	e7da      	b.n	800d642 <_free_r+0x22>
 800d68c:	d902      	bls.n	800d694 <_free_r+0x74>
 800d68e:	230c      	movs	r3, #12
 800d690:	602b      	str	r3, [r5, #0]
 800d692:	e7d6      	b.n	800d642 <_free_r+0x22>
 800d694:	6820      	ldr	r0, [r4, #0]
 800d696:	1821      	adds	r1, r4, r0
 800d698:	428b      	cmp	r3, r1
 800d69a:	bf04      	itt	eq
 800d69c:	6819      	ldreq	r1, [r3, #0]
 800d69e:	685b      	ldreq	r3, [r3, #4]
 800d6a0:	6063      	str	r3, [r4, #4]
 800d6a2:	bf04      	itt	eq
 800d6a4:	1809      	addeq	r1, r1, r0
 800d6a6:	6021      	streq	r1, [r4, #0]
 800d6a8:	6054      	str	r4, [r2, #4]
 800d6aa:	e7ca      	b.n	800d642 <_free_r+0x22>
 800d6ac:	bd38      	pop	{r3, r4, r5, pc}
 800d6ae:	bf00      	nop
 800d6b0:	20000860 	.word	0x20000860

0800d6b4 <rshift>:
 800d6b4:	6903      	ldr	r3, [r0, #16]
 800d6b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d6ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d6c2:	f100 0414 	add.w	r4, r0, #20
 800d6c6:	dd45      	ble.n	800d754 <rshift+0xa0>
 800d6c8:	f011 011f 	ands.w	r1, r1, #31
 800d6cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d6d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d6d4:	d10c      	bne.n	800d6f0 <rshift+0x3c>
 800d6d6:	f100 0710 	add.w	r7, r0, #16
 800d6da:	4629      	mov	r1, r5
 800d6dc:	42b1      	cmp	r1, r6
 800d6de:	d334      	bcc.n	800d74a <rshift+0x96>
 800d6e0:	1a9b      	subs	r3, r3, r2
 800d6e2:	009b      	lsls	r3, r3, #2
 800d6e4:	1eea      	subs	r2, r5, #3
 800d6e6:	4296      	cmp	r6, r2
 800d6e8:	bf38      	it	cc
 800d6ea:	2300      	movcc	r3, #0
 800d6ec:	4423      	add	r3, r4
 800d6ee:	e015      	b.n	800d71c <rshift+0x68>
 800d6f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d6f4:	f1c1 0820 	rsb	r8, r1, #32
 800d6f8:	40cf      	lsrs	r7, r1
 800d6fa:	f105 0e04 	add.w	lr, r5, #4
 800d6fe:	46a1      	mov	r9, r4
 800d700:	4576      	cmp	r6, lr
 800d702:	46f4      	mov	ip, lr
 800d704:	d815      	bhi.n	800d732 <rshift+0x7e>
 800d706:	1a9a      	subs	r2, r3, r2
 800d708:	0092      	lsls	r2, r2, #2
 800d70a:	3a04      	subs	r2, #4
 800d70c:	3501      	adds	r5, #1
 800d70e:	42ae      	cmp	r6, r5
 800d710:	bf38      	it	cc
 800d712:	2200      	movcc	r2, #0
 800d714:	18a3      	adds	r3, r4, r2
 800d716:	50a7      	str	r7, [r4, r2]
 800d718:	b107      	cbz	r7, 800d71c <rshift+0x68>
 800d71a:	3304      	adds	r3, #4
 800d71c:	1b1a      	subs	r2, r3, r4
 800d71e:	42a3      	cmp	r3, r4
 800d720:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d724:	bf08      	it	eq
 800d726:	2300      	moveq	r3, #0
 800d728:	6102      	str	r2, [r0, #16]
 800d72a:	bf08      	it	eq
 800d72c:	6143      	streq	r3, [r0, #20]
 800d72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d732:	f8dc c000 	ldr.w	ip, [ip]
 800d736:	fa0c fc08 	lsl.w	ip, ip, r8
 800d73a:	ea4c 0707 	orr.w	r7, ip, r7
 800d73e:	f849 7b04 	str.w	r7, [r9], #4
 800d742:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d746:	40cf      	lsrs	r7, r1
 800d748:	e7da      	b.n	800d700 <rshift+0x4c>
 800d74a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d74e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d752:	e7c3      	b.n	800d6dc <rshift+0x28>
 800d754:	4623      	mov	r3, r4
 800d756:	e7e1      	b.n	800d71c <rshift+0x68>

0800d758 <__hexdig_fun>:
 800d758:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d75c:	2b09      	cmp	r3, #9
 800d75e:	d802      	bhi.n	800d766 <__hexdig_fun+0xe>
 800d760:	3820      	subs	r0, #32
 800d762:	b2c0      	uxtb	r0, r0
 800d764:	4770      	bx	lr
 800d766:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d76a:	2b05      	cmp	r3, #5
 800d76c:	d801      	bhi.n	800d772 <__hexdig_fun+0x1a>
 800d76e:	3847      	subs	r0, #71	@ 0x47
 800d770:	e7f7      	b.n	800d762 <__hexdig_fun+0xa>
 800d772:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d776:	2b05      	cmp	r3, #5
 800d778:	d801      	bhi.n	800d77e <__hexdig_fun+0x26>
 800d77a:	3827      	subs	r0, #39	@ 0x27
 800d77c:	e7f1      	b.n	800d762 <__hexdig_fun+0xa>
 800d77e:	2000      	movs	r0, #0
 800d780:	4770      	bx	lr
	...

0800d784 <__gethex>:
 800d784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d788:	b085      	sub	sp, #20
 800d78a:	468a      	mov	sl, r1
 800d78c:	9302      	str	r3, [sp, #8]
 800d78e:	680b      	ldr	r3, [r1, #0]
 800d790:	9001      	str	r0, [sp, #4]
 800d792:	4690      	mov	r8, r2
 800d794:	1c9c      	adds	r4, r3, #2
 800d796:	46a1      	mov	r9, r4
 800d798:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d79c:	2830      	cmp	r0, #48	@ 0x30
 800d79e:	d0fa      	beq.n	800d796 <__gethex+0x12>
 800d7a0:	eba9 0303 	sub.w	r3, r9, r3
 800d7a4:	f1a3 0b02 	sub.w	fp, r3, #2
 800d7a8:	f7ff ffd6 	bl	800d758 <__hexdig_fun>
 800d7ac:	4605      	mov	r5, r0
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	d168      	bne.n	800d884 <__gethex+0x100>
 800d7b2:	49a0      	ldr	r1, [pc, #640]	@ (800da34 <__gethex+0x2b0>)
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	4648      	mov	r0, r9
 800d7b8:	f7fe ffc3 	bl	800c742 <strncmp>
 800d7bc:	4607      	mov	r7, r0
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d167      	bne.n	800d892 <__gethex+0x10e>
 800d7c2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d7c6:	4626      	mov	r6, r4
 800d7c8:	f7ff ffc6 	bl	800d758 <__hexdig_fun>
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d062      	beq.n	800d896 <__gethex+0x112>
 800d7d0:	4623      	mov	r3, r4
 800d7d2:	7818      	ldrb	r0, [r3, #0]
 800d7d4:	2830      	cmp	r0, #48	@ 0x30
 800d7d6:	4699      	mov	r9, r3
 800d7d8:	f103 0301 	add.w	r3, r3, #1
 800d7dc:	d0f9      	beq.n	800d7d2 <__gethex+0x4e>
 800d7de:	f7ff ffbb 	bl	800d758 <__hexdig_fun>
 800d7e2:	fab0 f580 	clz	r5, r0
 800d7e6:	096d      	lsrs	r5, r5, #5
 800d7e8:	f04f 0b01 	mov.w	fp, #1
 800d7ec:	464a      	mov	r2, r9
 800d7ee:	4616      	mov	r6, r2
 800d7f0:	3201      	adds	r2, #1
 800d7f2:	7830      	ldrb	r0, [r6, #0]
 800d7f4:	f7ff ffb0 	bl	800d758 <__hexdig_fun>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d1f8      	bne.n	800d7ee <__gethex+0x6a>
 800d7fc:	498d      	ldr	r1, [pc, #564]	@ (800da34 <__gethex+0x2b0>)
 800d7fe:	2201      	movs	r2, #1
 800d800:	4630      	mov	r0, r6
 800d802:	f7fe ff9e 	bl	800c742 <strncmp>
 800d806:	2800      	cmp	r0, #0
 800d808:	d13f      	bne.n	800d88a <__gethex+0x106>
 800d80a:	b944      	cbnz	r4, 800d81e <__gethex+0x9a>
 800d80c:	1c74      	adds	r4, r6, #1
 800d80e:	4622      	mov	r2, r4
 800d810:	4616      	mov	r6, r2
 800d812:	3201      	adds	r2, #1
 800d814:	7830      	ldrb	r0, [r6, #0]
 800d816:	f7ff ff9f 	bl	800d758 <__hexdig_fun>
 800d81a:	2800      	cmp	r0, #0
 800d81c:	d1f8      	bne.n	800d810 <__gethex+0x8c>
 800d81e:	1ba4      	subs	r4, r4, r6
 800d820:	00a7      	lsls	r7, r4, #2
 800d822:	7833      	ldrb	r3, [r6, #0]
 800d824:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d828:	2b50      	cmp	r3, #80	@ 0x50
 800d82a:	d13e      	bne.n	800d8aa <__gethex+0x126>
 800d82c:	7873      	ldrb	r3, [r6, #1]
 800d82e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d830:	d033      	beq.n	800d89a <__gethex+0x116>
 800d832:	2b2d      	cmp	r3, #45	@ 0x2d
 800d834:	d034      	beq.n	800d8a0 <__gethex+0x11c>
 800d836:	1c71      	adds	r1, r6, #1
 800d838:	2400      	movs	r4, #0
 800d83a:	7808      	ldrb	r0, [r1, #0]
 800d83c:	f7ff ff8c 	bl	800d758 <__hexdig_fun>
 800d840:	1e43      	subs	r3, r0, #1
 800d842:	b2db      	uxtb	r3, r3
 800d844:	2b18      	cmp	r3, #24
 800d846:	d830      	bhi.n	800d8aa <__gethex+0x126>
 800d848:	f1a0 0210 	sub.w	r2, r0, #16
 800d84c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d850:	f7ff ff82 	bl	800d758 <__hexdig_fun>
 800d854:	f100 3cff 	add.w	ip, r0, #4294967295
 800d858:	fa5f fc8c 	uxtb.w	ip, ip
 800d85c:	f1bc 0f18 	cmp.w	ip, #24
 800d860:	f04f 030a 	mov.w	r3, #10
 800d864:	d91e      	bls.n	800d8a4 <__gethex+0x120>
 800d866:	b104      	cbz	r4, 800d86a <__gethex+0xe6>
 800d868:	4252      	negs	r2, r2
 800d86a:	4417      	add	r7, r2
 800d86c:	f8ca 1000 	str.w	r1, [sl]
 800d870:	b1ed      	cbz	r5, 800d8ae <__gethex+0x12a>
 800d872:	f1bb 0f00 	cmp.w	fp, #0
 800d876:	bf0c      	ite	eq
 800d878:	2506      	moveq	r5, #6
 800d87a:	2500      	movne	r5, #0
 800d87c:	4628      	mov	r0, r5
 800d87e:	b005      	add	sp, #20
 800d880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d884:	2500      	movs	r5, #0
 800d886:	462c      	mov	r4, r5
 800d888:	e7b0      	b.n	800d7ec <__gethex+0x68>
 800d88a:	2c00      	cmp	r4, #0
 800d88c:	d1c7      	bne.n	800d81e <__gethex+0x9a>
 800d88e:	4627      	mov	r7, r4
 800d890:	e7c7      	b.n	800d822 <__gethex+0x9e>
 800d892:	464e      	mov	r6, r9
 800d894:	462f      	mov	r7, r5
 800d896:	2501      	movs	r5, #1
 800d898:	e7c3      	b.n	800d822 <__gethex+0x9e>
 800d89a:	2400      	movs	r4, #0
 800d89c:	1cb1      	adds	r1, r6, #2
 800d89e:	e7cc      	b.n	800d83a <__gethex+0xb6>
 800d8a0:	2401      	movs	r4, #1
 800d8a2:	e7fb      	b.n	800d89c <__gethex+0x118>
 800d8a4:	fb03 0002 	mla	r0, r3, r2, r0
 800d8a8:	e7ce      	b.n	800d848 <__gethex+0xc4>
 800d8aa:	4631      	mov	r1, r6
 800d8ac:	e7de      	b.n	800d86c <__gethex+0xe8>
 800d8ae:	eba6 0309 	sub.w	r3, r6, r9
 800d8b2:	3b01      	subs	r3, #1
 800d8b4:	4629      	mov	r1, r5
 800d8b6:	2b07      	cmp	r3, #7
 800d8b8:	dc0a      	bgt.n	800d8d0 <__gethex+0x14c>
 800d8ba:	9801      	ldr	r0, [sp, #4]
 800d8bc:	f000 fafc 	bl	800deb8 <_Balloc>
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	b940      	cbnz	r0, 800d8d6 <__gethex+0x152>
 800d8c4:	4b5c      	ldr	r3, [pc, #368]	@ (800da38 <__gethex+0x2b4>)
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	21e4      	movs	r1, #228	@ 0xe4
 800d8ca:	485c      	ldr	r0, [pc, #368]	@ (800da3c <__gethex+0x2b8>)
 800d8cc:	f7ff f83e 	bl	800c94c <__assert_func>
 800d8d0:	3101      	adds	r1, #1
 800d8d2:	105b      	asrs	r3, r3, #1
 800d8d4:	e7ef      	b.n	800d8b6 <__gethex+0x132>
 800d8d6:	f100 0a14 	add.w	sl, r0, #20
 800d8da:	2300      	movs	r3, #0
 800d8dc:	4655      	mov	r5, sl
 800d8de:	469b      	mov	fp, r3
 800d8e0:	45b1      	cmp	r9, r6
 800d8e2:	d337      	bcc.n	800d954 <__gethex+0x1d0>
 800d8e4:	f845 bb04 	str.w	fp, [r5], #4
 800d8e8:	eba5 050a 	sub.w	r5, r5, sl
 800d8ec:	10ad      	asrs	r5, r5, #2
 800d8ee:	6125      	str	r5, [r4, #16]
 800d8f0:	4658      	mov	r0, fp
 800d8f2:	f000 fbd3 	bl	800e09c <__hi0bits>
 800d8f6:	016d      	lsls	r5, r5, #5
 800d8f8:	f8d8 6000 	ldr.w	r6, [r8]
 800d8fc:	1a2d      	subs	r5, r5, r0
 800d8fe:	42b5      	cmp	r5, r6
 800d900:	dd54      	ble.n	800d9ac <__gethex+0x228>
 800d902:	1bad      	subs	r5, r5, r6
 800d904:	4629      	mov	r1, r5
 800d906:	4620      	mov	r0, r4
 800d908:	f000 ff67 	bl	800e7da <__any_on>
 800d90c:	4681      	mov	r9, r0
 800d90e:	b178      	cbz	r0, 800d930 <__gethex+0x1ac>
 800d910:	1e6b      	subs	r3, r5, #1
 800d912:	1159      	asrs	r1, r3, #5
 800d914:	f003 021f 	and.w	r2, r3, #31
 800d918:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d91c:	f04f 0901 	mov.w	r9, #1
 800d920:	fa09 f202 	lsl.w	r2, r9, r2
 800d924:	420a      	tst	r2, r1
 800d926:	d003      	beq.n	800d930 <__gethex+0x1ac>
 800d928:	454b      	cmp	r3, r9
 800d92a:	dc36      	bgt.n	800d99a <__gethex+0x216>
 800d92c:	f04f 0902 	mov.w	r9, #2
 800d930:	4629      	mov	r1, r5
 800d932:	4620      	mov	r0, r4
 800d934:	f7ff febe 	bl	800d6b4 <rshift>
 800d938:	442f      	add	r7, r5
 800d93a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d93e:	42bb      	cmp	r3, r7
 800d940:	da42      	bge.n	800d9c8 <__gethex+0x244>
 800d942:	9801      	ldr	r0, [sp, #4]
 800d944:	4621      	mov	r1, r4
 800d946:	f000 faf7 	bl	800df38 <_Bfree>
 800d94a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d94c:	2300      	movs	r3, #0
 800d94e:	6013      	str	r3, [r2, #0]
 800d950:	25a3      	movs	r5, #163	@ 0xa3
 800d952:	e793      	b.n	800d87c <__gethex+0xf8>
 800d954:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d958:	2a2e      	cmp	r2, #46	@ 0x2e
 800d95a:	d012      	beq.n	800d982 <__gethex+0x1fe>
 800d95c:	2b20      	cmp	r3, #32
 800d95e:	d104      	bne.n	800d96a <__gethex+0x1e6>
 800d960:	f845 bb04 	str.w	fp, [r5], #4
 800d964:	f04f 0b00 	mov.w	fp, #0
 800d968:	465b      	mov	r3, fp
 800d96a:	7830      	ldrb	r0, [r6, #0]
 800d96c:	9303      	str	r3, [sp, #12]
 800d96e:	f7ff fef3 	bl	800d758 <__hexdig_fun>
 800d972:	9b03      	ldr	r3, [sp, #12]
 800d974:	f000 000f 	and.w	r0, r0, #15
 800d978:	4098      	lsls	r0, r3
 800d97a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d97e:	3304      	adds	r3, #4
 800d980:	e7ae      	b.n	800d8e0 <__gethex+0x15c>
 800d982:	45b1      	cmp	r9, r6
 800d984:	d8ea      	bhi.n	800d95c <__gethex+0x1d8>
 800d986:	492b      	ldr	r1, [pc, #172]	@ (800da34 <__gethex+0x2b0>)
 800d988:	9303      	str	r3, [sp, #12]
 800d98a:	2201      	movs	r2, #1
 800d98c:	4630      	mov	r0, r6
 800d98e:	f7fe fed8 	bl	800c742 <strncmp>
 800d992:	9b03      	ldr	r3, [sp, #12]
 800d994:	2800      	cmp	r0, #0
 800d996:	d1e1      	bne.n	800d95c <__gethex+0x1d8>
 800d998:	e7a2      	b.n	800d8e0 <__gethex+0x15c>
 800d99a:	1ea9      	subs	r1, r5, #2
 800d99c:	4620      	mov	r0, r4
 800d99e:	f000 ff1c 	bl	800e7da <__any_on>
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	d0c2      	beq.n	800d92c <__gethex+0x1a8>
 800d9a6:	f04f 0903 	mov.w	r9, #3
 800d9aa:	e7c1      	b.n	800d930 <__gethex+0x1ac>
 800d9ac:	da09      	bge.n	800d9c2 <__gethex+0x23e>
 800d9ae:	1b75      	subs	r5, r6, r5
 800d9b0:	4621      	mov	r1, r4
 800d9b2:	9801      	ldr	r0, [sp, #4]
 800d9b4:	462a      	mov	r2, r5
 800d9b6:	f000 fcd7 	bl	800e368 <__lshift>
 800d9ba:	1b7f      	subs	r7, r7, r5
 800d9bc:	4604      	mov	r4, r0
 800d9be:	f100 0a14 	add.w	sl, r0, #20
 800d9c2:	f04f 0900 	mov.w	r9, #0
 800d9c6:	e7b8      	b.n	800d93a <__gethex+0x1b6>
 800d9c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d9cc:	42bd      	cmp	r5, r7
 800d9ce:	dd6f      	ble.n	800dab0 <__gethex+0x32c>
 800d9d0:	1bed      	subs	r5, r5, r7
 800d9d2:	42ae      	cmp	r6, r5
 800d9d4:	dc34      	bgt.n	800da40 <__gethex+0x2bc>
 800d9d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	d022      	beq.n	800da24 <__gethex+0x2a0>
 800d9de:	2b03      	cmp	r3, #3
 800d9e0:	d024      	beq.n	800da2c <__gethex+0x2a8>
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d115      	bne.n	800da12 <__gethex+0x28e>
 800d9e6:	42ae      	cmp	r6, r5
 800d9e8:	d113      	bne.n	800da12 <__gethex+0x28e>
 800d9ea:	2e01      	cmp	r6, #1
 800d9ec:	d10b      	bne.n	800da06 <__gethex+0x282>
 800d9ee:	9a02      	ldr	r2, [sp, #8]
 800d9f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d9f4:	6013      	str	r3, [r2, #0]
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	6123      	str	r3, [r4, #16]
 800d9fa:	f8ca 3000 	str.w	r3, [sl]
 800d9fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da00:	2562      	movs	r5, #98	@ 0x62
 800da02:	601c      	str	r4, [r3, #0]
 800da04:	e73a      	b.n	800d87c <__gethex+0xf8>
 800da06:	1e71      	subs	r1, r6, #1
 800da08:	4620      	mov	r0, r4
 800da0a:	f000 fee6 	bl	800e7da <__any_on>
 800da0e:	2800      	cmp	r0, #0
 800da10:	d1ed      	bne.n	800d9ee <__gethex+0x26a>
 800da12:	9801      	ldr	r0, [sp, #4]
 800da14:	4621      	mov	r1, r4
 800da16:	f000 fa8f 	bl	800df38 <_Bfree>
 800da1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da1c:	2300      	movs	r3, #0
 800da1e:	6013      	str	r3, [r2, #0]
 800da20:	2550      	movs	r5, #80	@ 0x50
 800da22:	e72b      	b.n	800d87c <__gethex+0xf8>
 800da24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da26:	2b00      	cmp	r3, #0
 800da28:	d1f3      	bne.n	800da12 <__gethex+0x28e>
 800da2a:	e7e0      	b.n	800d9ee <__gethex+0x26a>
 800da2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d1dd      	bne.n	800d9ee <__gethex+0x26a>
 800da32:	e7ee      	b.n	800da12 <__gethex+0x28e>
 800da34:	0801152c 	.word	0x0801152c
 800da38:	080117d4 	.word	0x080117d4
 800da3c:	080117e5 	.word	0x080117e5
 800da40:	1e6f      	subs	r7, r5, #1
 800da42:	f1b9 0f00 	cmp.w	r9, #0
 800da46:	d130      	bne.n	800daaa <__gethex+0x326>
 800da48:	b127      	cbz	r7, 800da54 <__gethex+0x2d0>
 800da4a:	4639      	mov	r1, r7
 800da4c:	4620      	mov	r0, r4
 800da4e:	f000 fec4 	bl	800e7da <__any_on>
 800da52:	4681      	mov	r9, r0
 800da54:	117a      	asrs	r2, r7, #5
 800da56:	2301      	movs	r3, #1
 800da58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800da5c:	f007 071f 	and.w	r7, r7, #31
 800da60:	40bb      	lsls	r3, r7
 800da62:	4213      	tst	r3, r2
 800da64:	4629      	mov	r1, r5
 800da66:	4620      	mov	r0, r4
 800da68:	bf18      	it	ne
 800da6a:	f049 0902 	orrne.w	r9, r9, #2
 800da6e:	f7ff fe21 	bl	800d6b4 <rshift>
 800da72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800da76:	1b76      	subs	r6, r6, r5
 800da78:	2502      	movs	r5, #2
 800da7a:	f1b9 0f00 	cmp.w	r9, #0
 800da7e:	d047      	beq.n	800db10 <__gethex+0x38c>
 800da80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da84:	2b02      	cmp	r3, #2
 800da86:	d015      	beq.n	800dab4 <__gethex+0x330>
 800da88:	2b03      	cmp	r3, #3
 800da8a:	d017      	beq.n	800dabc <__gethex+0x338>
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d109      	bne.n	800daa4 <__gethex+0x320>
 800da90:	f019 0f02 	tst.w	r9, #2
 800da94:	d006      	beq.n	800daa4 <__gethex+0x320>
 800da96:	f8da 3000 	ldr.w	r3, [sl]
 800da9a:	ea49 0903 	orr.w	r9, r9, r3
 800da9e:	f019 0f01 	tst.w	r9, #1
 800daa2:	d10e      	bne.n	800dac2 <__gethex+0x33e>
 800daa4:	f045 0510 	orr.w	r5, r5, #16
 800daa8:	e032      	b.n	800db10 <__gethex+0x38c>
 800daaa:	f04f 0901 	mov.w	r9, #1
 800daae:	e7d1      	b.n	800da54 <__gethex+0x2d0>
 800dab0:	2501      	movs	r5, #1
 800dab2:	e7e2      	b.n	800da7a <__gethex+0x2f6>
 800dab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dab6:	f1c3 0301 	rsb	r3, r3, #1
 800daba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dabc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d0f0      	beq.n	800daa4 <__gethex+0x320>
 800dac2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dac6:	f104 0314 	add.w	r3, r4, #20
 800daca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dace:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dad2:	f04f 0c00 	mov.w	ip, #0
 800dad6:	4618      	mov	r0, r3
 800dad8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dadc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dae0:	d01b      	beq.n	800db1a <__gethex+0x396>
 800dae2:	3201      	adds	r2, #1
 800dae4:	6002      	str	r2, [r0, #0]
 800dae6:	2d02      	cmp	r5, #2
 800dae8:	f104 0314 	add.w	r3, r4, #20
 800daec:	d13c      	bne.n	800db68 <__gethex+0x3e4>
 800daee:	f8d8 2000 	ldr.w	r2, [r8]
 800daf2:	3a01      	subs	r2, #1
 800daf4:	42b2      	cmp	r2, r6
 800daf6:	d109      	bne.n	800db0c <__gethex+0x388>
 800daf8:	1171      	asrs	r1, r6, #5
 800dafa:	2201      	movs	r2, #1
 800dafc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db00:	f006 061f 	and.w	r6, r6, #31
 800db04:	fa02 f606 	lsl.w	r6, r2, r6
 800db08:	421e      	tst	r6, r3
 800db0a:	d13a      	bne.n	800db82 <__gethex+0x3fe>
 800db0c:	f045 0520 	orr.w	r5, r5, #32
 800db10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db12:	601c      	str	r4, [r3, #0]
 800db14:	9b02      	ldr	r3, [sp, #8]
 800db16:	601f      	str	r7, [r3, #0]
 800db18:	e6b0      	b.n	800d87c <__gethex+0xf8>
 800db1a:	4299      	cmp	r1, r3
 800db1c:	f843 cc04 	str.w	ip, [r3, #-4]
 800db20:	d8d9      	bhi.n	800dad6 <__gethex+0x352>
 800db22:	68a3      	ldr	r3, [r4, #8]
 800db24:	459b      	cmp	fp, r3
 800db26:	db17      	blt.n	800db58 <__gethex+0x3d4>
 800db28:	6861      	ldr	r1, [r4, #4]
 800db2a:	9801      	ldr	r0, [sp, #4]
 800db2c:	3101      	adds	r1, #1
 800db2e:	f000 f9c3 	bl	800deb8 <_Balloc>
 800db32:	4681      	mov	r9, r0
 800db34:	b918      	cbnz	r0, 800db3e <__gethex+0x3ba>
 800db36:	4b1a      	ldr	r3, [pc, #104]	@ (800dba0 <__gethex+0x41c>)
 800db38:	4602      	mov	r2, r0
 800db3a:	2184      	movs	r1, #132	@ 0x84
 800db3c:	e6c5      	b.n	800d8ca <__gethex+0x146>
 800db3e:	6922      	ldr	r2, [r4, #16]
 800db40:	3202      	adds	r2, #2
 800db42:	f104 010c 	add.w	r1, r4, #12
 800db46:	0092      	lsls	r2, r2, #2
 800db48:	300c      	adds	r0, #12
 800db4a:	f7fe fee0 	bl	800c90e <memcpy>
 800db4e:	4621      	mov	r1, r4
 800db50:	9801      	ldr	r0, [sp, #4]
 800db52:	f000 f9f1 	bl	800df38 <_Bfree>
 800db56:	464c      	mov	r4, r9
 800db58:	6923      	ldr	r3, [r4, #16]
 800db5a:	1c5a      	adds	r2, r3, #1
 800db5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db60:	6122      	str	r2, [r4, #16]
 800db62:	2201      	movs	r2, #1
 800db64:	615a      	str	r2, [r3, #20]
 800db66:	e7be      	b.n	800dae6 <__gethex+0x362>
 800db68:	6922      	ldr	r2, [r4, #16]
 800db6a:	455a      	cmp	r2, fp
 800db6c:	dd0b      	ble.n	800db86 <__gethex+0x402>
 800db6e:	2101      	movs	r1, #1
 800db70:	4620      	mov	r0, r4
 800db72:	f7ff fd9f 	bl	800d6b4 <rshift>
 800db76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db7a:	3701      	adds	r7, #1
 800db7c:	42bb      	cmp	r3, r7
 800db7e:	f6ff aee0 	blt.w	800d942 <__gethex+0x1be>
 800db82:	2501      	movs	r5, #1
 800db84:	e7c2      	b.n	800db0c <__gethex+0x388>
 800db86:	f016 061f 	ands.w	r6, r6, #31
 800db8a:	d0fa      	beq.n	800db82 <__gethex+0x3fe>
 800db8c:	4453      	add	r3, sl
 800db8e:	f1c6 0620 	rsb	r6, r6, #32
 800db92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800db96:	f000 fa81 	bl	800e09c <__hi0bits>
 800db9a:	42b0      	cmp	r0, r6
 800db9c:	dbe7      	blt.n	800db6e <__gethex+0x3ea>
 800db9e:	e7f0      	b.n	800db82 <__gethex+0x3fe>
 800dba0:	080117d4 	.word	0x080117d4

0800dba4 <L_shift>:
 800dba4:	f1c2 0208 	rsb	r2, r2, #8
 800dba8:	0092      	lsls	r2, r2, #2
 800dbaa:	b570      	push	{r4, r5, r6, lr}
 800dbac:	f1c2 0620 	rsb	r6, r2, #32
 800dbb0:	6843      	ldr	r3, [r0, #4]
 800dbb2:	6804      	ldr	r4, [r0, #0]
 800dbb4:	fa03 f506 	lsl.w	r5, r3, r6
 800dbb8:	432c      	orrs	r4, r5
 800dbba:	40d3      	lsrs	r3, r2
 800dbbc:	6004      	str	r4, [r0, #0]
 800dbbe:	f840 3f04 	str.w	r3, [r0, #4]!
 800dbc2:	4288      	cmp	r0, r1
 800dbc4:	d3f4      	bcc.n	800dbb0 <L_shift+0xc>
 800dbc6:	bd70      	pop	{r4, r5, r6, pc}

0800dbc8 <__match>:
 800dbc8:	b530      	push	{r4, r5, lr}
 800dbca:	6803      	ldr	r3, [r0, #0]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbd2:	b914      	cbnz	r4, 800dbda <__match+0x12>
 800dbd4:	6003      	str	r3, [r0, #0]
 800dbd6:	2001      	movs	r0, #1
 800dbd8:	bd30      	pop	{r4, r5, pc}
 800dbda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbde:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dbe2:	2d19      	cmp	r5, #25
 800dbe4:	bf98      	it	ls
 800dbe6:	3220      	addls	r2, #32
 800dbe8:	42a2      	cmp	r2, r4
 800dbea:	d0f0      	beq.n	800dbce <__match+0x6>
 800dbec:	2000      	movs	r0, #0
 800dbee:	e7f3      	b.n	800dbd8 <__match+0x10>

0800dbf0 <__hexnan>:
 800dbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf4:	680b      	ldr	r3, [r1, #0]
 800dbf6:	6801      	ldr	r1, [r0, #0]
 800dbf8:	115e      	asrs	r6, r3, #5
 800dbfa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dbfe:	f013 031f 	ands.w	r3, r3, #31
 800dc02:	b087      	sub	sp, #28
 800dc04:	bf18      	it	ne
 800dc06:	3604      	addne	r6, #4
 800dc08:	2500      	movs	r5, #0
 800dc0a:	1f37      	subs	r7, r6, #4
 800dc0c:	4682      	mov	sl, r0
 800dc0e:	4690      	mov	r8, r2
 800dc10:	9301      	str	r3, [sp, #4]
 800dc12:	f846 5c04 	str.w	r5, [r6, #-4]
 800dc16:	46b9      	mov	r9, r7
 800dc18:	463c      	mov	r4, r7
 800dc1a:	9502      	str	r5, [sp, #8]
 800dc1c:	46ab      	mov	fp, r5
 800dc1e:	784a      	ldrb	r2, [r1, #1]
 800dc20:	1c4b      	adds	r3, r1, #1
 800dc22:	9303      	str	r3, [sp, #12]
 800dc24:	b342      	cbz	r2, 800dc78 <__hexnan+0x88>
 800dc26:	4610      	mov	r0, r2
 800dc28:	9105      	str	r1, [sp, #20]
 800dc2a:	9204      	str	r2, [sp, #16]
 800dc2c:	f7ff fd94 	bl	800d758 <__hexdig_fun>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d151      	bne.n	800dcd8 <__hexnan+0xe8>
 800dc34:	9a04      	ldr	r2, [sp, #16]
 800dc36:	9905      	ldr	r1, [sp, #20]
 800dc38:	2a20      	cmp	r2, #32
 800dc3a:	d818      	bhi.n	800dc6e <__hexnan+0x7e>
 800dc3c:	9b02      	ldr	r3, [sp, #8]
 800dc3e:	459b      	cmp	fp, r3
 800dc40:	dd13      	ble.n	800dc6a <__hexnan+0x7a>
 800dc42:	454c      	cmp	r4, r9
 800dc44:	d206      	bcs.n	800dc54 <__hexnan+0x64>
 800dc46:	2d07      	cmp	r5, #7
 800dc48:	dc04      	bgt.n	800dc54 <__hexnan+0x64>
 800dc4a:	462a      	mov	r2, r5
 800dc4c:	4649      	mov	r1, r9
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f7ff ffa8 	bl	800dba4 <L_shift>
 800dc54:	4544      	cmp	r4, r8
 800dc56:	d952      	bls.n	800dcfe <__hexnan+0x10e>
 800dc58:	2300      	movs	r3, #0
 800dc5a:	f1a4 0904 	sub.w	r9, r4, #4
 800dc5e:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc62:	f8cd b008 	str.w	fp, [sp, #8]
 800dc66:	464c      	mov	r4, r9
 800dc68:	461d      	mov	r5, r3
 800dc6a:	9903      	ldr	r1, [sp, #12]
 800dc6c:	e7d7      	b.n	800dc1e <__hexnan+0x2e>
 800dc6e:	2a29      	cmp	r2, #41	@ 0x29
 800dc70:	d157      	bne.n	800dd22 <__hexnan+0x132>
 800dc72:	3102      	adds	r1, #2
 800dc74:	f8ca 1000 	str.w	r1, [sl]
 800dc78:	f1bb 0f00 	cmp.w	fp, #0
 800dc7c:	d051      	beq.n	800dd22 <__hexnan+0x132>
 800dc7e:	454c      	cmp	r4, r9
 800dc80:	d206      	bcs.n	800dc90 <__hexnan+0xa0>
 800dc82:	2d07      	cmp	r5, #7
 800dc84:	dc04      	bgt.n	800dc90 <__hexnan+0xa0>
 800dc86:	462a      	mov	r2, r5
 800dc88:	4649      	mov	r1, r9
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	f7ff ff8a 	bl	800dba4 <L_shift>
 800dc90:	4544      	cmp	r4, r8
 800dc92:	d936      	bls.n	800dd02 <__hexnan+0x112>
 800dc94:	f1a8 0204 	sub.w	r2, r8, #4
 800dc98:	4623      	mov	r3, r4
 800dc9a:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc9e:	f842 1f04 	str.w	r1, [r2, #4]!
 800dca2:	429f      	cmp	r7, r3
 800dca4:	d2f9      	bcs.n	800dc9a <__hexnan+0xaa>
 800dca6:	1b3b      	subs	r3, r7, r4
 800dca8:	f023 0303 	bic.w	r3, r3, #3
 800dcac:	3304      	adds	r3, #4
 800dcae:	3401      	adds	r4, #1
 800dcb0:	3e03      	subs	r6, #3
 800dcb2:	42b4      	cmp	r4, r6
 800dcb4:	bf88      	it	hi
 800dcb6:	2304      	movhi	r3, #4
 800dcb8:	4443      	add	r3, r8
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f843 2b04 	str.w	r2, [r3], #4
 800dcc0:	429f      	cmp	r7, r3
 800dcc2:	d2fb      	bcs.n	800dcbc <__hexnan+0xcc>
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	b91b      	cbnz	r3, 800dcd0 <__hexnan+0xe0>
 800dcc8:	4547      	cmp	r7, r8
 800dcca:	d128      	bne.n	800dd1e <__hexnan+0x12e>
 800dccc:	2301      	movs	r3, #1
 800dcce:	603b      	str	r3, [r7, #0]
 800dcd0:	2005      	movs	r0, #5
 800dcd2:	b007      	add	sp, #28
 800dcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd8:	3501      	adds	r5, #1
 800dcda:	2d08      	cmp	r5, #8
 800dcdc:	f10b 0b01 	add.w	fp, fp, #1
 800dce0:	dd06      	ble.n	800dcf0 <__hexnan+0x100>
 800dce2:	4544      	cmp	r4, r8
 800dce4:	d9c1      	bls.n	800dc6a <__hexnan+0x7a>
 800dce6:	2300      	movs	r3, #0
 800dce8:	f844 3c04 	str.w	r3, [r4, #-4]
 800dcec:	2501      	movs	r5, #1
 800dcee:	3c04      	subs	r4, #4
 800dcf0:	6822      	ldr	r2, [r4, #0]
 800dcf2:	f000 000f 	and.w	r0, r0, #15
 800dcf6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dcfa:	6020      	str	r0, [r4, #0]
 800dcfc:	e7b5      	b.n	800dc6a <__hexnan+0x7a>
 800dcfe:	2508      	movs	r5, #8
 800dd00:	e7b3      	b.n	800dc6a <__hexnan+0x7a>
 800dd02:	9b01      	ldr	r3, [sp, #4]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d0dd      	beq.n	800dcc4 <__hexnan+0xd4>
 800dd08:	f1c3 0320 	rsb	r3, r3, #32
 800dd0c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd10:	40da      	lsrs	r2, r3
 800dd12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dd16:	4013      	ands	r3, r2
 800dd18:	f846 3c04 	str.w	r3, [r6, #-4]
 800dd1c:	e7d2      	b.n	800dcc4 <__hexnan+0xd4>
 800dd1e:	3f04      	subs	r7, #4
 800dd20:	e7d0      	b.n	800dcc4 <__hexnan+0xd4>
 800dd22:	2004      	movs	r0, #4
 800dd24:	e7d5      	b.n	800dcd2 <__hexnan+0xe2>
	...

0800dd28 <malloc>:
 800dd28:	4b02      	ldr	r3, [pc, #8]	@ (800dd34 <malloc+0xc>)
 800dd2a:	4601      	mov	r1, r0
 800dd2c:	6818      	ldr	r0, [r3, #0]
 800dd2e:	f000 b825 	b.w	800dd7c <_malloc_r>
 800dd32:	bf00      	nop
 800dd34:	20000250 	.word	0x20000250

0800dd38 <sbrk_aligned>:
 800dd38:	b570      	push	{r4, r5, r6, lr}
 800dd3a:	4e0f      	ldr	r6, [pc, #60]	@ (800dd78 <sbrk_aligned+0x40>)
 800dd3c:	460c      	mov	r4, r1
 800dd3e:	6831      	ldr	r1, [r6, #0]
 800dd40:	4605      	mov	r5, r0
 800dd42:	b911      	cbnz	r1, 800dd4a <sbrk_aligned+0x12>
 800dd44:	f000 ffa6 	bl	800ec94 <_sbrk_r>
 800dd48:	6030      	str	r0, [r6, #0]
 800dd4a:	4621      	mov	r1, r4
 800dd4c:	4628      	mov	r0, r5
 800dd4e:	f000 ffa1 	bl	800ec94 <_sbrk_r>
 800dd52:	1c43      	adds	r3, r0, #1
 800dd54:	d103      	bne.n	800dd5e <sbrk_aligned+0x26>
 800dd56:	f04f 34ff 	mov.w	r4, #4294967295
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	bd70      	pop	{r4, r5, r6, pc}
 800dd5e:	1cc4      	adds	r4, r0, #3
 800dd60:	f024 0403 	bic.w	r4, r4, #3
 800dd64:	42a0      	cmp	r0, r4
 800dd66:	d0f8      	beq.n	800dd5a <sbrk_aligned+0x22>
 800dd68:	1a21      	subs	r1, r4, r0
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	f000 ff92 	bl	800ec94 <_sbrk_r>
 800dd70:	3001      	adds	r0, #1
 800dd72:	d1f2      	bne.n	800dd5a <sbrk_aligned+0x22>
 800dd74:	e7ef      	b.n	800dd56 <sbrk_aligned+0x1e>
 800dd76:	bf00      	nop
 800dd78:	2000085c 	.word	0x2000085c

0800dd7c <_malloc_r>:
 800dd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd80:	1ccd      	adds	r5, r1, #3
 800dd82:	f025 0503 	bic.w	r5, r5, #3
 800dd86:	3508      	adds	r5, #8
 800dd88:	2d0c      	cmp	r5, #12
 800dd8a:	bf38      	it	cc
 800dd8c:	250c      	movcc	r5, #12
 800dd8e:	2d00      	cmp	r5, #0
 800dd90:	4606      	mov	r6, r0
 800dd92:	db01      	blt.n	800dd98 <_malloc_r+0x1c>
 800dd94:	42a9      	cmp	r1, r5
 800dd96:	d904      	bls.n	800dda2 <_malloc_r+0x26>
 800dd98:	230c      	movs	r3, #12
 800dd9a:	6033      	str	r3, [r6, #0]
 800dd9c:	2000      	movs	r0, #0
 800dd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dda2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800de78 <_malloc_r+0xfc>
 800dda6:	f000 f87b 	bl	800dea0 <__malloc_lock>
 800ddaa:	f8d8 3000 	ldr.w	r3, [r8]
 800ddae:	461c      	mov	r4, r3
 800ddb0:	bb44      	cbnz	r4, 800de04 <_malloc_r+0x88>
 800ddb2:	4629      	mov	r1, r5
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	f7ff ffbf 	bl	800dd38 <sbrk_aligned>
 800ddba:	1c43      	adds	r3, r0, #1
 800ddbc:	4604      	mov	r4, r0
 800ddbe:	d158      	bne.n	800de72 <_malloc_r+0xf6>
 800ddc0:	f8d8 4000 	ldr.w	r4, [r8]
 800ddc4:	4627      	mov	r7, r4
 800ddc6:	2f00      	cmp	r7, #0
 800ddc8:	d143      	bne.n	800de52 <_malloc_r+0xd6>
 800ddca:	2c00      	cmp	r4, #0
 800ddcc:	d04b      	beq.n	800de66 <_malloc_r+0xea>
 800ddce:	6823      	ldr	r3, [r4, #0]
 800ddd0:	4639      	mov	r1, r7
 800ddd2:	4630      	mov	r0, r6
 800ddd4:	eb04 0903 	add.w	r9, r4, r3
 800ddd8:	f000 ff5c 	bl	800ec94 <_sbrk_r>
 800dddc:	4581      	cmp	r9, r0
 800ddde:	d142      	bne.n	800de66 <_malloc_r+0xea>
 800dde0:	6821      	ldr	r1, [r4, #0]
 800dde2:	1a6d      	subs	r5, r5, r1
 800dde4:	4629      	mov	r1, r5
 800dde6:	4630      	mov	r0, r6
 800dde8:	f7ff ffa6 	bl	800dd38 <sbrk_aligned>
 800ddec:	3001      	adds	r0, #1
 800ddee:	d03a      	beq.n	800de66 <_malloc_r+0xea>
 800ddf0:	6823      	ldr	r3, [r4, #0]
 800ddf2:	442b      	add	r3, r5
 800ddf4:	6023      	str	r3, [r4, #0]
 800ddf6:	f8d8 3000 	ldr.w	r3, [r8]
 800ddfa:	685a      	ldr	r2, [r3, #4]
 800ddfc:	bb62      	cbnz	r2, 800de58 <_malloc_r+0xdc>
 800ddfe:	f8c8 7000 	str.w	r7, [r8]
 800de02:	e00f      	b.n	800de24 <_malloc_r+0xa8>
 800de04:	6822      	ldr	r2, [r4, #0]
 800de06:	1b52      	subs	r2, r2, r5
 800de08:	d420      	bmi.n	800de4c <_malloc_r+0xd0>
 800de0a:	2a0b      	cmp	r2, #11
 800de0c:	d917      	bls.n	800de3e <_malloc_r+0xc2>
 800de0e:	1961      	adds	r1, r4, r5
 800de10:	42a3      	cmp	r3, r4
 800de12:	6025      	str	r5, [r4, #0]
 800de14:	bf18      	it	ne
 800de16:	6059      	strne	r1, [r3, #4]
 800de18:	6863      	ldr	r3, [r4, #4]
 800de1a:	bf08      	it	eq
 800de1c:	f8c8 1000 	streq.w	r1, [r8]
 800de20:	5162      	str	r2, [r4, r5]
 800de22:	604b      	str	r3, [r1, #4]
 800de24:	4630      	mov	r0, r6
 800de26:	f000 f841 	bl	800deac <__malloc_unlock>
 800de2a:	f104 000b 	add.w	r0, r4, #11
 800de2e:	1d23      	adds	r3, r4, #4
 800de30:	f020 0007 	bic.w	r0, r0, #7
 800de34:	1ac2      	subs	r2, r0, r3
 800de36:	bf1c      	itt	ne
 800de38:	1a1b      	subne	r3, r3, r0
 800de3a:	50a3      	strne	r3, [r4, r2]
 800de3c:	e7af      	b.n	800dd9e <_malloc_r+0x22>
 800de3e:	6862      	ldr	r2, [r4, #4]
 800de40:	42a3      	cmp	r3, r4
 800de42:	bf0c      	ite	eq
 800de44:	f8c8 2000 	streq.w	r2, [r8]
 800de48:	605a      	strne	r2, [r3, #4]
 800de4a:	e7eb      	b.n	800de24 <_malloc_r+0xa8>
 800de4c:	4623      	mov	r3, r4
 800de4e:	6864      	ldr	r4, [r4, #4]
 800de50:	e7ae      	b.n	800ddb0 <_malloc_r+0x34>
 800de52:	463c      	mov	r4, r7
 800de54:	687f      	ldr	r7, [r7, #4]
 800de56:	e7b6      	b.n	800ddc6 <_malloc_r+0x4a>
 800de58:	461a      	mov	r2, r3
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	42a3      	cmp	r3, r4
 800de5e:	d1fb      	bne.n	800de58 <_malloc_r+0xdc>
 800de60:	2300      	movs	r3, #0
 800de62:	6053      	str	r3, [r2, #4]
 800de64:	e7de      	b.n	800de24 <_malloc_r+0xa8>
 800de66:	230c      	movs	r3, #12
 800de68:	6033      	str	r3, [r6, #0]
 800de6a:	4630      	mov	r0, r6
 800de6c:	f000 f81e 	bl	800deac <__malloc_unlock>
 800de70:	e794      	b.n	800dd9c <_malloc_r+0x20>
 800de72:	6005      	str	r5, [r0, #0]
 800de74:	e7d6      	b.n	800de24 <_malloc_r+0xa8>
 800de76:	bf00      	nop
 800de78:	20000860 	.word	0x20000860

0800de7c <__ascii_mbtowc>:
 800de7c:	b082      	sub	sp, #8
 800de7e:	b901      	cbnz	r1, 800de82 <__ascii_mbtowc+0x6>
 800de80:	a901      	add	r1, sp, #4
 800de82:	b142      	cbz	r2, 800de96 <__ascii_mbtowc+0x1a>
 800de84:	b14b      	cbz	r3, 800de9a <__ascii_mbtowc+0x1e>
 800de86:	7813      	ldrb	r3, [r2, #0]
 800de88:	600b      	str	r3, [r1, #0]
 800de8a:	7812      	ldrb	r2, [r2, #0]
 800de8c:	1e10      	subs	r0, r2, #0
 800de8e:	bf18      	it	ne
 800de90:	2001      	movne	r0, #1
 800de92:	b002      	add	sp, #8
 800de94:	4770      	bx	lr
 800de96:	4610      	mov	r0, r2
 800de98:	e7fb      	b.n	800de92 <__ascii_mbtowc+0x16>
 800de9a:	f06f 0001 	mvn.w	r0, #1
 800de9e:	e7f8      	b.n	800de92 <__ascii_mbtowc+0x16>

0800dea0 <__malloc_lock>:
 800dea0:	4801      	ldr	r0, [pc, #4]	@ (800dea8 <__malloc_lock+0x8>)
 800dea2:	f7fe bd32 	b.w	800c90a <__retarget_lock_acquire_recursive>
 800dea6:	bf00      	nop
 800dea8:	20000858 	.word	0x20000858

0800deac <__malloc_unlock>:
 800deac:	4801      	ldr	r0, [pc, #4]	@ (800deb4 <__malloc_unlock+0x8>)
 800deae:	f7fe bd2d 	b.w	800c90c <__retarget_lock_release_recursive>
 800deb2:	bf00      	nop
 800deb4:	20000858 	.word	0x20000858

0800deb8 <_Balloc>:
 800deb8:	b570      	push	{r4, r5, r6, lr}
 800deba:	69c6      	ldr	r6, [r0, #28]
 800debc:	4604      	mov	r4, r0
 800debe:	460d      	mov	r5, r1
 800dec0:	b976      	cbnz	r6, 800dee0 <_Balloc+0x28>
 800dec2:	2010      	movs	r0, #16
 800dec4:	f7ff ff30 	bl	800dd28 <malloc>
 800dec8:	4602      	mov	r2, r0
 800deca:	61e0      	str	r0, [r4, #28]
 800decc:	b920      	cbnz	r0, 800ded8 <_Balloc+0x20>
 800dece:	4b18      	ldr	r3, [pc, #96]	@ (800df30 <_Balloc+0x78>)
 800ded0:	4818      	ldr	r0, [pc, #96]	@ (800df34 <_Balloc+0x7c>)
 800ded2:	216b      	movs	r1, #107	@ 0x6b
 800ded4:	f7fe fd3a 	bl	800c94c <__assert_func>
 800ded8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dedc:	6006      	str	r6, [r0, #0]
 800dede:	60c6      	str	r6, [r0, #12]
 800dee0:	69e6      	ldr	r6, [r4, #28]
 800dee2:	68f3      	ldr	r3, [r6, #12]
 800dee4:	b183      	cbz	r3, 800df08 <_Balloc+0x50>
 800dee6:	69e3      	ldr	r3, [r4, #28]
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800deee:	b9b8      	cbnz	r0, 800df20 <_Balloc+0x68>
 800def0:	2101      	movs	r1, #1
 800def2:	fa01 f605 	lsl.w	r6, r1, r5
 800def6:	1d72      	adds	r2, r6, #5
 800def8:	0092      	lsls	r2, r2, #2
 800defa:	4620      	mov	r0, r4
 800defc:	f000 fee1 	bl	800ecc2 <_calloc_r>
 800df00:	b160      	cbz	r0, 800df1c <_Balloc+0x64>
 800df02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df06:	e00e      	b.n	800df26 <_Balloc+0x6e>
 800df08:	2221      	movs	r2, #33	@ 0x21
 800df0a:	2104      	movs	r1, #4
 800df0c:	4620      	mov	r0, r4
 800df0e:	f000 fed8 	bl	800ecc2 <_calloc_r>
 800df12:	69e3      	ldr	r3, [r4, #28]
 800df14:	60f0      	str	r0, [r6, #12]
 800df16:	68db      	ldr	r3, [r3, #12]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d1e4      	bne.n	800dee6 <_Balloc+0x2e>
 800df1c:	2000      	movs	r0, #0
 800df1e:	bd70      	pop	{r4, r5, r6, pc}
 800df20:	6802      	ldr	r2, [r0, #0]
 800df22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df26:	2300      	movs	r3, #0
 800df28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df2c:	e7f7      	b.n	800df1e <_Balloc+0x66>
 800df2e:	bf00      	nop
 800df30:	080116ba 	.word	0x080116ba
 800df34:	08011845 	.word	0x08011845

0800df38 <_Bfree>:
 800df38:	b570      	push	{r4, r5, r6, lr}
 800df3a:	69c6      	ldr	r6, [r0, #28]
 800df3c:	4605      	mov	r5, r0
 800df3e:	460c      	mov	r4, r1
 800df40:	b976      	cbnz	r6, 800df60 <_Bfree+0x28>
 800df42:	2010      	movs	r0, #16
 800df44:	f7ff fef0 	bl	800dd28 <malloc>
 800df48:	4602      	mov	r2, r0
 800df4a:	61e8      	str	r0, [r5, #28]
 800df4c:	b920      	cbnz	r0, 800df58 <_Bfree+0x20>
 800df4e:	4b09      	ldr	r3, [pc, #36]	@ (800df74 <_Bfree+0x3c>)
 800df50:	4809      	ldr	r0, [pc, #36]	@ (800df78 <_Bfree+0x40>)
 800df52:	218f      	movs	r1, #143	@ 0x8f
 800df54:	f7fe fcfa 	bl	800c94c <__assert_func>
 800df58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df5c:	6006      	str	r6, [r0, #0]
 800df5e:	60c6      	str	r6, [r0, #12]
 800df60:	b13c      	cbz	r4, 800df72 <_Bfree+0x3a>
 800df62:	69eb      	ldr	r3, [r5, #28]
 800df64:	6862      	ldr	r2, [r4, #4]
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df6c:	6021      	str	r1, [r4, #0]
 800df6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df72:	bd70      	pop	{r4, r5, r6, pc}
 800df74:	080116ba 	.word	0x080116ba
 800df78:	08011845 	.word	0x08011845

0800df7c <__multadd>:
 800df7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df80:	690d      	ldr	r5, [r1, #16]
 800df82:	4607      	mov	r7, r0
 800df84:	460c      	mov	r4, r1
 800df86:	461e      	mov	r6, r3
 800df88:	f101 0c14 	add.w	ip, r1, #20
 800df8c:	2000      	movs	r0, #0
 800df8e:	f8dc 3000 	ldr.w	r3, [ip]
 800df92:	b299      	uxth	r1, r3
 800df94:	fb02 6101 	mla	r1, r2, r1, r6
 800df98:	0c1e      	lsrs	r6, r3, #16
 800df9a:	0c0b      	lsrs	r3, r1, #16
 800df9c:	fb02 3306 	mla	r3, r2, r6, r3
 800dfa0:	b289      	uxth	r1, r1
 800dfa2:	3001      	adds	r0, #1
 800dfa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dfa8:	4285      	cmp	r5, r0
 800dfaa:	f84c 1b04 	str.w	r1, [ip], #4
 800dfae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dfb2:	dcec      	bgt.n	800df8e <__multadd+0x12>
 800dfb4:	b30e      	cbz	r6, 800dffa <__multadd+0x7e>
 800dfb6:	68a3      	ldr	r3, [r4, #8]
 800dfb8:	42ab      	cmp	r3, r5
 800dfba:	dc19      	bgt.n	800dff0 <__multadd+0x74>
 800dfbc:	6861      	ldr	r1, [r4, #4]
 800dfbe:	4638      	mov	r0, r7
 800dfc0:	3101      	adds	r1, #1
 800dfc2:	f7ff ff79 	bl	800deb8 <_Balloc>
 800dfc6:	4680      	mov	r8, r0
 800dfc8:	b928      	cbnz	r0, 800dfd6 <__multadd+0x5a>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	4b0c      	ldr	r3, [pc, #48]	@ (800e000 <__multadd+0x84>)
 800dfce:	480d      	ldr	r0, [pc, #52]	@ (800e004 <__multadd+0x88>)
 800dfd0:	21ba      	movs	r1, #186	@ 0xba
 800dfd2:	f7fe fcbb 	bl	800c94c <__assert_func>
 800dfd6:	6922      	ldr	r2, [r4, #16]
 800dfd8:	3202      	adds	r2, #2
 800dfda:	f104 010c 	add.w	r1, r4, #12
 800dfde:	0092      	lsls	r2, r2, #2
 800dfe0:	300c      	adds	r0, #12
 800dfe2:	f7fe fc94 	bl	800c90e <memcpy>
 800dfe6:	4621      	mov	r1, r4
 800dfe8:	4638      	mov	r0, r7
 800dfea:	f7ff ffa5 	bl	800df38 <_Bfree>
 800dfee:	4644      	mov	r4, r8
 800dff0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dff4:	3501      	adds	r5, #1
 800dff6:	615e      	str	r6, [r3, #20]
 800dff8:	6125      	str	r5, [r4, #16]
 800dffa:	4620      	mov	r0, r4
 800dffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e000:	080117d4 	.word	0x080117d4
 800e004:	08011845 	.word	0x08011845

0800e008 <__s2b>:
 800e008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e00c:	460c      	mov	r4, r1
 800e00e:	4615      	mov	r5, r2
 800e010:	461f      	mov	r7, r3
 800e012:	2209      	movs	r2, #9
 800e014:	3308      	adds	r3, #8
 800e016:	4606      	mov	r6, r0
 800e018:	fb93 f3f2 	sdiv	r3, r3, r2
 800e01c:	2100      	movs	r1, #0
 800e01e:	2201      	movs	r2, #1
 800e020:	429a      	cmp	r2, r3
 800e022:	db09      	blt.n	800e038 <__s2b+0x30>
 800e024:	4630      	mov	r0, r6
 800e026:	f7ff ff47 	bl	800deb8 <_Balloc>
 800e02a:	b940      	cbnz	r0, 800e03e <__s2b+0x36>
 800e02c:	4602      	mov	r2, r0
 800e02e:	4b19      	ldr	r3, [pc, #100]	@ (800e094 <__s2b+0x8c>)
 800e030:	4819      	ldr	r0, [pc, #100]	@ (800e098 <__s2b+0x90>)
 800e032:	21d3      	movs	r1, #211	@ 0xd3
 800e034:	f7fe fc8a 	bl	800c94c <__assert_func>
 800e038:	0052      	lsls	r2, r2, #1
 800e03a:	3101      	adds	r1, #1
 800e03c:	e7f0      	b.n	800e020 <__s2b+0x18>
 800e03e:	9b08      	ldr	r3, [sp, #32]
 800e040:	6143      	str	r3, [r0, #20]
 800e042:	2d09      	cmp	r5, #9
 800e044:	f04f 0301 	mov.w	r3, #1
 800e048:	6103      	str	r3, [r0, #16]
 800e04a:	dd16      	ble.n	800e07a <__s2b+0x72>
 800e04c:	f104 0909 	add.w	r9, r4, #9
 800e050:	46c8      	mov	r8, r9
 800e052:	442c      	add	r4, r5
 800e054:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e058:	4601      	mov	r1, r0
 800e05a:	3b30      	subs	r3, #48	@ 0x30
 800e05c:	220a      	movs	r2, #10
 800e05e:	4630      	mov	r0, r6
 800e060:	f7ff ff8c 	bl	800df7c <__multadd>
 800e064:	45a0      	cmp	r8, r4
 800e066:	d1f5      	bne.n	800e054 <__s2b+0x4c>
 800e068:	f1a5 0408 	sub.w	r4, r5, #8
 800e06c:	444c      	add	r4, r9
 800e06e:	1b2d      	subs	r5, r5, r4
 800e070:	1963      	adds	r3, r4, r5
 800e072:	42bb      	cmp	r3, r7
 800e074:	db04      	blt.n	800e080 <__s2b+0x78>
 800e076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e07a:	340a      	adds	r4, #10
 800e07c:	2509      	movs	r5, #9
 800e07e:	e7f6      	b.n	800e06e <__s2b+0x66>
 800e080:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e084:	4601      	mov	r1, r0
 800e086:	3b30      	subs	r3, #48	@ 0x30
 800e088:	220a      	movs	r2, #10
 800e08a:	4630      	mov	r0, r6
 800e08c:	f7ff ff76 	bl	800df7c <__multadd>
 800e090:	e7ee      	b.n	800e070 <__s2b+0x68>
 800e092:	bf00      	nop
 800e094:	080117d4 	.word	0x080117d4
 800e098:	08011845 	.word	0x08011845

0800e09c <__hi0bits>:
 800e09c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	bf36      	itet	cc
 800e0a4:	0403      	lslcc	r3, r0, #16
 800e0a6:	2000      	movcs	r0, #0
 800e0a8:	2010      	movcc	r0, #16
 800e0aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e0ae:	bf3c      	itt	cc
 800e0b0:	021b      	lslcc	r3, r3, #8
 800e0b2:	3008      	addcc	r0, #8
 800e0b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e0b8:	bf3c      	itt	cc
 800e0ba:	011b      	lslcc	r3, r3, #4
 800e0bc:	3004      	addcc	r0, #4
 800e0be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0c2:	bf3c      	itt	cc
 800e0c4:	009b      	lslcc	r3, r3, #2
 800e0c6:	3002      	addcc	r0, #2
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	db05      	blt.n	800e0d8 <__hi0bits+0x3c>
 800e0cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e0d0:	f100 0001 	add.w	r0, r0, #1
 800e0d4:	bf08      	it	eq
 800e0d6:	2020      	moveq	r0, #32
 800e0d8:	4770      	bx	lr

0800e0da <__lo0bits>:
 800e0da:	6803      	ldr	r3, [r0, #0]
 800e0dc:	4602      	mov	r2, r0
 800e0de:	f013 0007 	ands.w	r0, r3, #7
 800e0e2:	d00b      	beq.n	800e0fc <__lo0bits+0x22>
 800e0e4:	07d9      	lsls	r1, r3, #31
 800e0e6:	d421      	bmi.n	800e12c <__lo0bits+0x52>
 800e0e8:	0798      	lsls	r0, r3, #30
 800e0ea:	bf49      	itett	mi
 800e0ec:	085b      	lsrmi	r3, r3, #1
 800e0ee:	089b      	lsrpl	r3, r3, #2
 800e0f0:	2001      	movmi	r0, #1
 800e0f2:	6013      	strmi	r3, [r2, #0]
 800e0f4:	bf5c      	itt	pl
 800e0f6:	6013      	strpl	r3, [r2, #0]
 800e0f8:	2002      	movpl	r0, #2
 800e0fa:	4770      	bx	lr
 800e0fc:	b299      	uxth	r1, r3
 800e0fe:	b909      	cbnz	r1, 800e104 <__lo0bits+0x2a>
 800e100:	0c1b      	lsrs	r3, r3, #16
 800e102:	2010      	movs	r0, #16
 800e104:	b2d9      	uxtb	r1, r3
 800e106:	b909      	cbnz	r1, 800e10c <__lo0bits+0x32>
 800e108:	3008      	adds	r0, #8
 800e10a:	0a1b      	lsrs	r3, r3, #8
 800e10c:	0719      	lsls	r1, r3, #28
 800e10e:	bf04      	itt	eq
 800e110:	091b      	lsreq	r3, r3, #4
 800e112:	3004      	addeq	r0, #4
 800e114:	0799      	lsls	r1, r3, #30
 800e116:	bf04      	itt	eq
 800e118:	089b      	lsreq	r3, r3, #2
 800e11a:	3002      	addeq	r0, #2
 800e11c:	07d9      	lsls	r1, r3, #31
 800e11e:	d403      	bmi.n	800e128 <__lo0bits+0x4e>
 800e120:	085b      	lsrs	r3, r3, #1
 800e122:	f100 0001 	add.w	r0, r0, #1
 800e126:	d003      	beq.n	800e130 <__lo0bits+0x56>
 800e128:	6013      	str	r3, [r2, #0]
 800e12a:	4770      	bx	lr
 800e12c:	2000      	movs	r0, #0
 800e12e:	4770      	bx	lr
 800e130:	2020      	movs	r0, #32
 800e132:	4770      	bx	lr

0800e134 <__i2b>:
 800e134:	b510      	push	{r4, lr}
 800e136:	460c      	mov	r4, r1
 800e138:	2101      	movs	r1, #1
 800e13a:	f7ff febd 	bl	800deb8 <_Balloc>
 800e13e:	4602      	mov	r2, r0
 800e140:	b928      	cbnz	r0, 800e14e <__i2b+0x1a>
 800e142:	4b05      	ldr	r3, [pc, #20]	@ (800e158 <__i2b+0x24>)
 800e144:	4805      	ldr	r0, [pc, #20]	@ (800e15c <__i2b+0x28>)
 800e146:	f240 1145 	movw	r1, #325	@ 0x145
 800e14a:	f7fe fbff 	bl	800c94c <__assert_func>
 800e14e:	2301      	movs	r3, #1
 800e150:	6144      	str	r4, [r0, #20]
 800e152:	6103      	str	r3, [r0, #16]
 800e154:	bd10      	pop	{r4, pc}
 800e156:	bf00      	nop
 800e158:	080117d4 	.word	0x080117d4
 800e15c:	08011845 	.word	0x08011845

0800e160 <__multiply>:
 800e160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e164:	4614      	mov	r4, r2
 800e166:	690a      	ldr	r2, [r1, #16]
 800e168:	6923      	ldr	r3, [r4, #16]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	bfa8      	it	ge
 800e16e:	4623      	movge	r3, r4
 800e170:	460f      	mov	r7, r1
 800e172:	bfa4      	itt	ge
 800e174:	460c      	movge	r4, r1
 800e176:	461f      	movge	r7, r3
 800e178:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e17c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e180:	68a3      	ldr	r3, [r4, #8]
 800e182:	6861      	ldr	r1, [r4, #4]
 800e184:	eb0a 0609 	add.w	r6, sl, r9
 800e188:	42b3      	cmp	r3, r6
 800e18a:	b085      	sub	sp, #20
 800e18c:	bfb8      	it	lt
 800e18e:	3101      	addlt	r1, #1
 800e190:	f7ff fe92 	bl	800deb8 <_Balloc>
 800e194:	b930      	cbnz	r0, 800e1a4 <__multiply+0x44>
 800e196:	4602      	mov	r2, r0
 800e198:	4b44      	ldr	r3, [pc, #272]	@ (800e2ac <__multiply+0x14c>)
 800e19a:	4845      	ldr	r0, [pc, #276]	@ (800e2b0 <__multiply+0x150>)
 800e19c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e1a0:	f7fe fbd4 	bl	800c94c <__assert_func>
 800e1a4:	f100 0514 	add.w	r5, r0, #20
 800e1a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1ac:	462b      	mov	r3, r5
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	4543      	cmp	r3, r8
 800e1b2:	d321      	bcc.n	800e1f8 <__multiply+0x98>
 800e1b4:	f107 0114 	add.w	r1, r7, #20
 800e1b8:	f104 0214 	add.w	r2, r4, #20
 800e1bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e1c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e1c4:	9302      	str	r3, [sp, #8]
 800e1c6:	1b13      	subs	r3, r2, r4
 800e1c8:	3b15      	subs	r3, #21
 800e1ca:	f023 0303 	bic.w	r3, r3, #3
 800e1ce:	3304      	adds	r3, #4
 800e1d0:	f104 0715 	add.w	r7, r4, #21
 800e1d4:	42ba      	cmp	r2, r7
 800e1d6:	bf38      	it	cc
 800e1d8:	2304      	movcc	r3, #4
 800e1da:	9301      	str	r3, [sp, #4]
 800e1dc:	9b02      	ldr	r3, [sp, #8]
 800e1de:	9103      	str	r1, [sp, #12]
 800e1e0:	428b      	cmp	r3, r1
 800e1e2:	d80c      	bhi.n	800e1fe <__multiply+0x9e>
 800e1e4:	2e00      	cmp	r6, #0
 800e1e6:	dd03      	ble.n	800e1f0 <__multiply+0x90>
 800e1e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d05b      	beq.n	800e2a8 <__multiply+0x148>
 800e1f0:	6106      	str	r6, [r0, #16]
 800e1f2:	b005      	add	sp, #20
 800e1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1f8:	f843 2b04 	str.w	r2, [r3], #4
 800e1fc:	e7d8      	b.n	800e1b0 <__multiply+0x50>
 800e1fe:	f8b1 a000 	ldrh.w	sl, [r1]
 800e202:	f1ba 0f00 	cmp.w	sl, #0
 800e206:	d024      	beq.n	800e252 <__multiply+0xf2>
 800e208:	f104 0e14 	add.w	lr, r4, #20
 800e20c:	46a9      	mov	r9, r5
 800e20e:	f04f 0c00 	mov.w	ip, #0
 800e212:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e216:	f8d9 3000 	ldr.w	r3, [r9]
 800e21a:	fa1f fb87 	uxth.w	fp, r7
 800e21e:	b29b      	uxth	r3, r3
 800e220:	fb0a 330b 	mla	r3, sl, fp, r3
 800e224:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e228:	f8d9 7000 	ldr.w	r7, [r9]
 800e22c:	4463      	add	r3, ip
 800e22e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e232:	fb0a c70b 	mla	r7, sl, fp, ip
 800e236:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e240:	4572      	cmp	r2, lr
 800e242:	f849 3b04 	str.w	r3, [r9], #4
 800e246:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e24a:	d8e2      	bhi.n	800e212 <__multiply+0xb2>
 800e24c:	9b01      	ldr	r3, [sp, #4]
 800e24e:	f845 c003 	str.w	ip, [r5, r3]
 800e252:	9b03      	ldr	r3, [sp, #12]
 800e254:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e258:	3104      	adds	r1, #4
 800e25a:	f1b9 0f00 	cmp.w	r9, #0
 800e25e:	d021      	beq.n	800e2a4 <__multiply+0x144>
 800e260:	682b      	ldr	r3, [r5, #0]
 800e262:	f104 0c14 	add.w	ip, r4, #20
 800e266:	46ae      	mov	lr, r5
 800e268:	f04f 0a00 	mov.w	sl, #0
 800e26c:	f8bc b000 	ldrh.w	fp, [ip]
 800e270:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e274:	fb09 770b 	mla	r7, r9, fp, r7
 800e278:	4457      	add	r7, sl
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e280:	f84e 3b04 	str.w	r3, [lr], #4
 800e284:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e288:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e28c:	f8be 3000 	ldrh.w	r3, [lr]
 800e290:	fb09 330a 	mla	r3, r9, sl, r3
 800e294:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e298:	4562      	cmp	r2, ip
 800e29a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e29e:	d8e5      	bhi.n	800e26c <__multiply+0x10c>
 800e2a0:	9f01      	ldr	r7, [sp, #4]
 800e2a2:	51eb      	str	r3, [r5, r7]
 800e2a4:	3504      	adds	r5, #4
 800e2a6:	e799      	b.n	800e1dc <__multiply+0x7c>
 800e2a8:	3e01      	subs	r6, #1
 800e2aa:	e79b      	b.n	800e1e4 <__multiply+0x84>
 800e2ac:	080117d4 	.word	0x080117d4
 800e2b0:	08011845 	.word	0x08011845

0800e2b4 <__pow5mult>:
 800e2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2b8:	4615      	mov	r5, r2
 800e2ba:	f012 0203 	ands.w	r2, r2, #3
 800e2be:	4607      	mov	r7, r0
 800e2c0:	460e      	mov	r6, r1
 800e2c2:	d007      	beq.n	800e2d4 <__pow5mult+0x20>
 800e2c4:	4c25      	ldr	r4, [pc, #148]	@ (800e35c <__pow5mult+0xa8>)
 800e2c6:	3a01      	subs	r2, #1
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2ce:	f7ff fe55 	bl	800df7c <__multadd>
 800e2d2:	4606      	mov	r6, r0
 800e2d4:	10ad      	asrs	r5, r5, #2
 800e2d6:	d03d      	beq.n	800e354 <__pow5mult+0xa0>
 800e2d8:	69fc      	ldr	r4, [r7, #28]
 800e2da:	b97c      	cbnz	r4, 800e2fc <__pow5mult+0x48>
 800e2dc:	2010      	movs	r0, #16
 800e2de:	f7ff fd23 	bl	800dd28 <malloc>
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	61f8      	str	r0, [r7, #28]
 800e2e6:	b928      	cbnz	r0, 800e2f4 <__pow5mult+0x40>
 800e2e8:	4b1d      	ldr	r3, [pc, #116]	@ (800e360 <__pow5mult+0xac>)
 800e2ea:	481e      	ldr	r0, [pc, #120]	@ (800e364 <__pow5mult+0xb0>)
 800e2ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e2f0:	f7fe fb2c 	bl	800c94c <__assert_func>
 800e2f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2f8:	6004      	str	r4, [r0, #0]
 800e2fa:	60c4      	str	r4, [r0, #12]
 800e2fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e300:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e304:	b94c      	cbnz	r4, 800e31a <__pow5mult+0x66>
 800e306:	f240 2171 	movw	r1, #625	@ 0x271
 800e30a:	4638      	mov	r0, r7
 800e30c:	f7ff ff12 	bl	800e134 <__i2b>
 800e310:	2300      	movs	r3, #0
 800e312:	f8c8 0008 	str.w	r0, [r8, #8]
 800e316:	4604      	mov	r4, r0
 800e318:	6003      	str	r3, [r0, #0]
 800e31a:	f04f 0900 	mov.w	r9, #0
 800e31e:	07eb      	lsls	r3, r5, #31
 800e320:	d50a      	bpl.n	800e338 <__pow5mult+0x84>
 800e322:	4631      	mov	r1, r6
 800e324:	4622      	mov	r2, r4
 800e326:	4638      	mov	r0, r7
 800e328:	f7ff ff1a 	bl	800e160 <__multiply>
 800e32c:	4631      	mov	r1, r6
 800e32e:	4680      	mov	r8, r0
 800e330:	4638      	mov	r0, r7
 800e332:	f7ff fe01 	bl	800df38 <_Bfree>
 800e336:	4646      	mov	r6, r8
 800e338:	106d      	asrs	r5, r5, #1
 800e33a:	d00b      	beq.n	800e354 <__pow5mult+0xa0>
 800e33c:	6820      	ldr	r0, [r4, #0]
 800e33e:	b938      	cbnz	r0, 800e350 <__pow5mult+0x9c>
 800e340:	4622      	mov	r2, r4
 800e342:	4621      	mov	r1, r4
 800e344:	4638      	mov	r0, r7
 800e346:	f7ff ff0b 	bl	800e160 <__multiply>
 800e34a:	6020      	str	r0, [r4, #0]
 800e34c:	f8c0 9000 	str.w	r9, [r0]
 800e350:	4604      	mov	r4, r0
 800e352:	e7e4      	b.n	800e31e <__pow5mult+0x6a>
 800e354:	4630      	mov	r0, r6
 800e356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e35a:	bf00      	nop
 800e35c:	080118a0 	.word	0x080118a0
 800e360:	080116ba 	.word	0x080116ba
 800e364:	08011845 	.word	0x08011845

0800e368 <__lshift>:
 800e368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e36c:	460c      	mov	r4, r1
 800e36e:	6849      	ldr	r1, [r1, #4]
 800e370:	6923      	ldr	r3, [r4, #16]
 800e372:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e376:	68a3      	ldr	r3, [r4, #8]
 800e378:	4607      	mov	r7, r0
 800e37a:	4691      	mov	r9, r2
 800e37c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e380:	f108 0601 	add.w	r6, r8, #1
 800e384:	42b3      	cmp	r3, r6
 800e386:	db0b      	blt.n	800e3a0 <__lshift+0x38>
 800e388:	4638      	mov	r0, r7
 800e38a:	f7ff fd95 	bl	800deb8 <_Balloc>
 800e38e:	4605      	mov	r5, r0
 800e390:	b948      	cbnz	r0, 800e3a6 <__lshift+0x3e>
 800e392:	4602      	mov	r2, r0
 800e394:	4b28      	ldr	r3, [pc, #160]	@ (800e438 <__lshift+0xd0>)
 800e396:	4829      	ldr	r0, [pc, #164]	@ (800e43c <__lshift+0xd4>)
 800e398:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e39c:	f7fe fad6 	bl	800c94c <__assert_func>
 800e3a0:	3101      	adds	r1, #1
 800e3a2:	005b      	lsls	r3, r3, #1
 800e3a4:	e7ee      	b.n	800e384 <__lshift+0x1c>
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	f100 0114 	add.w	r1, r0, #20
 800e3ac:	f100 0210 	add.w	r2, r0, #16
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	4553      	cmp	r3, sl
 800e3b4:	db33      	blt.n	800e41e <__lshift+0xb6>
 800e3b6:	6920      	ldr	r0, [r4, #16]
 800e3b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3bc:	f104 0314 	add.w	r3, r4, #20
 800e3c0:	f019 091f 	ands.w	r9, r9, #31
 800e3c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3cc:	d02b      	beq.n	800e426 <__lshift+0xbe>
 800e3ce:	f1c9 0e20 	rsb	lr, r9, #32
 800e3d2:	468a      	mov	sl, r1
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	6818      	ldr	r0, [r3, #0]
 800e3d8:	fa00 f009 	lsl.w	r0, r0, r9
 800e3dc:	4310      	orrs	r0, r2
 800e3de:	f84a 0b04 	str.w	r0, [sl], #4
 800e3e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3e6:	459c      	cmp	ip, r3
 800e3e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e3ec:	d8f3      	bhi.n	800e3d6 <__lshift+0x6e>
 800e3ee:	ebac 0304 	sub.w	r3, ip, r4
 800e3f2:	3b15      	subs	r3, #21
 800e3f4:	f023 0303 	bic.w	r3, r3, #3
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	f104 0015 	add.w	r0, r4, #21
 800e3fe:	4584      	cmp	ip, r0
 800e400:	bf38      	it	cc
 800e402:	2304      	movcc	r3, #4
 800e404:	50ca      	str	r2, [r1, r3]
 800e406:	b10a      	cbz	r2, 800e40c <__lshift+0xa4>
 800e408:	f108 0602 	add.w	r6, r8, #2
 800e40c:	3e01      	subs	r6, #1
 800e40e:	4638      	mov	r0, r7
 800e410:	612e      	str	r6, [r5, #16]
 800e412:	4621      	mov	r1, r4
 800e414:	f7ff fd90 	bl	800df38 <_Bfree>
 800e418:	4628      	mov	r0, r5
 800e41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e41e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e422:	3301      	adds	r3, #1
 800e424:	e7c5      	b.n	800e3b2 <__lshift+0x4a>
 800e426:	3904      	subs	r1, #4
 800e428:	f853 2b04 	ldr.w	r2, [r3], #4
 800e42c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e430:	459c      	cmp	ip, r3
 800e432:	d8f9      	bhi.n	800e428 <__lshift+0xc0>
 800e434:	e7ea      	b.n	800e40c <__lshift+0xa4>
 800e436:	bf00      	nop
 800e438:	080117d4 	.word	0x080117d4
 800e43c:	08011845 	.word	0x08011845

0800e440 <__mcmp>:
 800e440:	690a      	ldr	r2, [r1, #16]
 800e442:	4603      	mov	r3, r0
 800e444:	6900      	ldr	r0, [r0, #16]
 800e446:	1a80      	subs	r0, r0, r2
 800e448:	b530      	push	{r4, r5, lr}
 800e44a:	d10e      	bne.n	800e46a <__mcmp+0x2a>
 800e44c:	3314      	adds	r3, #20
 800e44e:	3114      	adds	r1, #20
 800e450:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e454:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e458:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e45c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e460:	4295      	cmp	r5, r2
 800e462:	d003      	beq.n	800e46c <__mcmp+0x2c>
 800e464:	d205      	bcs.n	800e472 <__mcmp+0x32>
 800e466:	f04f 30ff 	mov.w	r0, #4294967295
 800e46a:	bd30      	pop	{r4, r5, pc}
 800e46c:	42a3      	cmp	r3, r4
 800e46e:	d3f3      	bcc.n	800e458 <__mcmp+0x18>
 800e470:	e7fb      	b.n	800e46a <__mcmp+0x2a>
 800e472:	2001      	movs	r0, #1
 800e474:	e7f9      	b.n	800e46a <__mcmp+0x2a>
	...

0800e478 <__mdiff>:
 800e478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	4689      	mov	r9, r1
 800e47e:	4606      	mov	r6, r0
 800e480:	4611      	mov	r1, r2
 800e482:	4648      	mov	r0, r9
 800e484:	4614      	mov	r4, r2
 800e486:	f7ff ffdb 	bl	800e440 <__mcmp>
 800e48a:	1e05      	subs	r5, r0, #0
 800e48c:	d112      	bne.n	800e4b4 <__mdiff+0x3c>
 800e48e:	4629      	mov	r1, r5
 800e490:	4630      	mov	r0, r6
 800e492:	f7ff fd11 	bl	800deb8 <_Balloc>
 800e496:	4602      	mov	r2, r0
 800e498:	b928      	cbnz	r0, 800e4a6 <__mdiff+0x2e>
 800e49a:	4b3f      	ldr	r3, [pc, #252]	@ (800e598 <__mdiff+0x120>)
 800e49c:	f240 2137 	movw	r1, #567	@ 0x237
 800e4a0:	483e      	ldr	r0, [pc, #248]	@ (800e59c <__mdiff+0x124>)
 800e4a2:	f7fe fa53 	bl	800c94c <__assert_func>
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4ac:	4610      	mov	r0, r2
 800e4ae:	b003      	add	sp, #12
 800e4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4b4:	bfbc      	itt	lt
 800e4b6:	464b      	movlt	r3, r9
 800e4b8:	46a1      	movlt	r9, r4
 800e4ba:	4630      	mov	r0, r6
 800e4bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e4c0:	bfba      	itte	lt
 800e4c2:	461c      	movlt	r4, r3
 800e4c4:	2501      	movlt	r5, #1
 800e4c6:	2500      	movge	r5, #0
 800e4c8:	f7ff fcf6 	bl	800deb8 <_Balloc>
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	b918      	cbnz	r0, 800e4d8 <__mdiff+0x60>
 800e4d0:	4b31      	ldr	r3, [pc, #196]	@ (800e598 <__mdiff+0x120>)
 800e4d2:	f240 2145 	movw	r1, #581	@ 0x245
 800e4d6:	e7e3      	b.n	800e4a0 <__mdiff+0x28>
 800e4d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e4dc:	6926      	ldr	r6, [r4, #16]
 800e4de:	60c5      	str	r5, [r0, #12]
 800e4e0:	f109 0310 	add.w	r3, r9, #16
 800e4e4:	f109 0514 	add.w	r5, r9, #20
 800e4e8:	f104 0e14 	add.w	lr, r4, #20
 800e4ec:	f100 0b14 	add.w	fp, r0, #20
 800e4f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e4f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e4f8:	9301      	str	r3, [sp, #4]
 800e4fa:	46d9      	mov	r9, fp
 800e4fc:	f04f 0c00 	mov.w	ip, #0
 800e500:	9b01      	ldr	r3, [sp, #4]
 800e502:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e506:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e50a:	9301      	str	r3, [sp, #4]
 800e50c:	fa1f f38a 	uxth.w	r3, sl
 800e510:	4619      	mov	r1, r3
 800e512:	b283      	uxth	r3, r0
 800e514:	1acb      	subs	r3, r1, r3
 800e516:	0c00      	lsrs	r0, r0, #16
 800e518:	4463      	add	r3, ip
 800e51a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e51e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e522:	b29b      	uxth	r3, r3
 800e524:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e528:	4576      	cmp	r6, lr
 800e52a:	f849 3b04 	str.w	r3, [r9], #4
 800e52e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e532:	d8e5      	bhi.n	800e500 <__mdiff+0x88>
 800e534:	1b33      	subs	r3, r6, r4
 800e536:	3b15      	subs	r3, #21
 800e538:	f023 0303 	bic.w	r3, r3, #3
 800e53c:	3415      	adds	r4, #21
 800e53e:	3304      	adds	r3, #4
 800e540:	42a6      	cmp	r6, r4
 800e542:	bf38      	it	cc
 800e544:	2304      	movcc	r3, #4
 800e546:	441d      	add	r5, r3
 800e548:	445b      	add	r3, fp
 800e54a:	461e      	mov	r6, r3
 800e54c:	462c      	mov	r4, r5
 800e54e:	4544      	cmp	r4, r8
 800e550:	d30e      	bcc.n	800e570 <__mdiff+0xf8>
 800e552:	f108 0103 	add.w	r1, r8, #3
 800e556:	1b49      	subs	r1, r1, r5
 800e558:	f021 0103 	bic.w	r1, r1, #3
 800e55c:	3d03      	subs	r5, #3
 800e55e:	45a8      	cmp	r8, r5
 800e560:	bf38      	it	cc
 800e562:	2100      	movcc	r1, #0
 800e564:	440b      	add	r3, r1
 800e566:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e56a:	b191      	cbz	r1, 800e592 <__mdiff+0x11a>
 800e56c:	6117      	str	r7, [r2, #16]
 800e56e:	e79d      	b.n	800e4ac <__mdiff+0x34>
 800e570:	f854 1b04 	ldr.w	r1, [r4], #4
 800e574:	46e6      	mov	lr, ip
 800e576:	0c08      	lsrs	r0, r1, #16
 800e578:	fa1c fc81 	uxtah	ip, ip, r1
 800e57c:	4471      	add	r1, lr
 800e57e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e582:	b289      	uxth	r1, r1
 800e584:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e588:	f846 1b04 	str.w	r1, [r6], #4
 800e58c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e590:	e7dd      	b.n	800e54e <__mdiff+0xd6>
 800e592:	3f01      	subs	r7, #1
 800e594:	e7e7      	b.n	800e566 <__mdiff+0xee>
 800e596:	bf00      	nop
 800e598:	080117d4 	.word	0x080117d4
 800e59c:	08011845 	.word	0x08011845

0800e5a0 <__ulp>:
 800e5a0:	b082      	sub	sp, #8
 800e5a2:	ed8d 0b00 	vstr	d0, [sp]
 800e5a6:	9a01      	ldr	r2, [sp, #4]
 800e5a8:	4b0f      	ldr	r3, [pc, #60]	@ (800e5e8 <__ulp+0x48>)
 800e5aa:	4013      	ands	r3, r2
 800e5ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	dc08      	bgt.n	800e5c6 <__ulp+0x26>
 800e5b4:	425b      	negs	r3, r3
 800e5b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e5ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e5be:	da04      	bge.n	800e5ca <__ulp+0x2a>
 800e5c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e5c4:	4113      	asrs	r3, r2
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	e008      	b.n	800e5dc <__ulp+0x3c>
 800e5ca:	f1a2 0314 	sub.w	r3, r2, #20
 800e5ce:	2b1e      	cmp	r3, #30
 800e5d0:	bfda      	itte	le
 800e5d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e5d6:	40da      	lsrle	r2, r3
 800e5d8:	2201      	movgt	r2, #1
 800e5da:	2300      	movs	r3, #0
 800e5dc:	4619      	mov	r1, r3
 800e5de:	4610      	mov	r0, r2
 800e5e0:	ec41 0b10 	vmov	d0, r0, r1
 800e5e4:	b002      	add	sp, #8
 800e5e6:	4770      	bx	lr
 800e5e8:	7ff00000 	.word	0x7ff00000

0800e5ec <__b2d>:
 800e5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f0:	6906      	ldr	r6, [r0, #16]
 800e5f2:	f100 0814 	add.w	r8, r0, #20
 800e5f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e5fa:	1f37      	subs	r7, r6, #4
 800e5fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e600:	4610      	mov	r0, r2
 800e602:	f7ff fd4b 	bl	800e09c <__hi0bits>
 800e606:	f1c0 0320 	rsb	r3, r0, #32
 800e60a:	280a      	cmp	r0, #10
 800e60c:	600b      	str	r3, [r1, #0]
 800e60e:	491b      	ldr	r1, [pc, #108]	@ (800e67c <__b2d+0x90>)
 800e610:	dc15      	bgt.n	800e63e <__b2d+0x52>
 800e612:	f1c0 0c0b 	rsb	ip, r0, #11
 800e616:	fa22 f30c 	lsr.w	r3, r2, ip
 800e61a:	45b8      	cmp	r8, r7
 800e61c:	ea43 0501 	orr.w	r5, r3, r1
 800e620:	bf34      	ite	cc
 800e622:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e626:	2300      	movcs	r3, #0
 800e628:	3015      	adds	r0, #21
 800e62a:	fa02 f000 	lsl.w	r0, r2, r0
 800e62e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e632:	4303      	orrs	r3, r0
 800e634:	461c      	mov	r4, r3
 800e636:	ec45 4b10 	vmov	d0, r4, r5
 800e63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e63e:	45b8      	cmp	r8, r7
 800e640:	bf3a      	itte	cc
 800e642:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e646:	f1a6 0708 	subcc.w	r7, r6, #8
 800e64a:	2300      	movcs	r3, #0
 800e64c:	380b      	subs	r0, #11
 800e64e:	d012      	beq.n	800e676 <__b2d+0x8a>
 800e650:	f1c0 0120 	rsb	r1, r0, #32
 800e654:	fa23 f401 	lsr.w	r4, r3, r1
 800e658:	4082      	lsls	r2, r0
 800e65a:	4322      	orrs	r2, r4
 800e65c:	4547      	cmp	r7, r8
 800e65e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e662:	bf8c      	ite	hi
 800e664:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e668:	2200      	movls	r2, #0
 800e66a:	4083      	lsls	r3, r0
 800e66c:	40ca      	lsrs	r2, r1
 800e66e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e672:	4313      	orrs	r3, r2
 800e674:	e7de      	b.n	800e634 <__b2d+0x48>
 800e676:	ea42 0501 	orr.w	r5, r2, r1
 800e67a:	e7db      	b.n	800e634 <__b2d+0x48>
 800e67c:	3ff00000 	.word	0x3ff00000

0800e680 <__d2b>:
 800e680:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e684:	460f      	mov	r7, r1
 800e686:	2101      	movs	r1, #1
 800e688:	ec59 8b10 	vmov	r8, r9, d0
 800e68c:	4616      	mov	r6, r2
 800e68e:	f7ff fc13 	bl	800deb8 <_Balloc>
 800e692:	4604      	mov	r4, r0
 800e694:	b930      	cbnz	r0, 800e6a4 <__d2b+0x24>
 800e696:	4602      	mov	r2, r0
 800e698:	4b23      	ldr	r3, [pc, #140]	@ (800e728 <__d2b+0xa8>)
 800e69a:	4824      	ldr	r0, [pc, #144]	@ (800e72c <__d2b+0xac>)
 800e69c:	f240 310f 	movw	r1, #783	@ 0x30f
 800e6a0:	f7fe f954 	bl	800c94c <__assert_func>
 800e6a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e6a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e6ac:	b10d      	cbz	r5, 800e6b2 <__d2b+0x32>
 800e6ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e6b2:	9301      	str	r3, [sp, #4]
 800e6b4:	f1b8 0300 	subs.w	r3, r8, #0
 800e6b8:	d023      	beq.n	800e702 <__d2b+0x82>
 800e6ba:	4668      	mov	r0, sp
 800e6bc:	9300      	str	r3, [sp, #0]
 800e6be:	f7ff fd0c 	bl	800e0da <__lo0bits>
 800e6c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e6c6:	b1d0      	cbz	r0, 800e6fe <__d2b+0x7e>
 800e6c8:	f1c0 0320 	rsb	r3, r0, #32
 800e6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800e6d0:	430b      	orrs	r3, r1
 800e6d2:	40c2      	lsrs	r2, r0
 800e6d4:	6163      	str	r3, [r4, #20]
 800e6d6:	9201      	str	r2, [sp, #4]
 800e6d8:	9b01      	ldr	r3, [sp, #4]
 800e6da:	61a3      	str	r3, [r4, #24]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	bf0c      	ite	eq
 800e6e0:	2201      	moveq	r2, #1
 800e6e2:	2202      	movne	r2, #2
 800e6e4:	6122      	str	r2, [r4, #16]
 800e6e6:	b1a5      	cbz	r5, 800e712 <__d2b+0x92>
 800e6e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e6ec:	4405      	add	r5, r0
 800e6ee:	603d      	str	r5, [r7, #0]
 800e6f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e6f4:	6030      	str	r0, [r6, #0]
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	b003      	add	sp, #12
 800e6fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6fe:	6161      	str	r1, [r4, #20]
 800e700:	e7ea      	b.n	800e6d8 <__d2b+0x58>
 800e702:	a801      	add	r0, sp, #4
 800e704:	f7ff fce9 	bl	800e0da <__lo0bits>
 800e708:	9b01      	ldr	r3, [sp, #4]
 800e70a:	6163      	str	r3, [r4, #20]
 800e70c:	3020      	adds	r0, #32
 800e70e:	2201      	movs	r2, #1
 800e710:	e7e8      	b.n	800e6e4 <__d2b+0x64>
 800e712:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e716:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e71a:	6038      	str	r0, [r7, #0]
 800e71c:	6918      	ldr	r0, [r3, #16]
 800e71e:	f7ff fcbd 	bl	800e09c <__hi0bits>
 800e722:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e726:	e7e5      	b.n	800e6f4 <__d2b+0x74>
 800e728:	080117d4 	.word	0x080117d4
 800e72c:	08011845 	.word	0x08011845

0800e730 <__ratio>:
 800e730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e734:	b085      	sub	sp, #20
 800e736:	e9cd 1000 	strd	r1, r0, [sp]
 800e73a:	a902      	add	r1, sp, #8
 800e73c:	f7ff ff56 	bl	800e5ec <__b2d>
 800e740:	9800      	ldr	r0, [sp, #0]
 800e742:	a903      	add	r1, sp, #12
 800e744:	ec55 4b10 	vmov	r4, r5, d0
 800e748:	f7ff ff50 	bl	800e5ec <__b2d>
 800e74c:	9b01      	ldr	r3, [sp, #4]
 800e74e:	6919      	ldr	r1, [r3, #16]
 800e750:	9b00      	ldr	r3, [sp, #0]
 800e752:	691b      	ldr	r3, [r3, #16]
 800e754:	1ac9      	subs	r1, r1, r3
 800e756:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e75a:	1a9b      	subs	r3, r3, r2
 800e75c:	ec5b ab10 	vmov	sl, fp, d0
 800e760:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e764:	2b00      	cmp	r3, #0
 800e766:	bfce      	itee	gt
 800e768:	462a      	movgt	r2, r5
 800e76a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e76e:	465a      	movle	r2, fp
 800e770:	462f      	mov	r7, r5
 800e772:	46d9      	mov	r9, fp
 800e774:	bfcc      	ite	gt
 800e776:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e77a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e77e:	464b      	mov	r3, r9
 800e780:	4652      	mov	r2, sl
 800e782:	4620      	mov	r0, r4
 800e784:	4639      	mov	r1, r7
 800e786:	f7f2 f861 	bl	800084c <__aeabi_ddiv>
 800e78a:	ec41 0b10 	vmov	d0, r0, r1
 800e78e:	b005      	add	sp, #20
 800e790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e794 <__copybits>:
 800e794:	3901      	subs	r1, #1
 800e796:	b570      	push	{r4, r5, r6, lr}
 800e798:	1149      	asrs	r1, r1, #5
 800e79a:	6914      	ldr	r4, [r2, #16]
 800e79c:	3101      	adds	r1, #1
 800e79e:	f102 0314 	add.w	r3, r2, #20
 800e7a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e7a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e7aa:	1f05      	subs	r5, r0, #4
 800e7ac:	42a3      	cmp	r3, r4
 800e7ae:	d30c      	bcc.n	800e7ca <__copybits+0x36>
 800e7b0:	1aa3      	subs	r3, r4, r2
 800e7b2:	3b11      	subs	r3, #17
 800e7b4:	f023 0303 	bic.w	r3, r3, #3
 800e7b8:	3211      	adds	r2, #17
 800e7ba:	42a2      	cmp	r2, r4
 800e7bc:	bf88      	it	hi
 800e7be:	2300      	movhi	r3, #0
 800e7c0:	4418      	add	r0, r3
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	4288      	cmp	r0, r1
 800e7c6:	d305      	bcc.n	800e7d4 <__copybits+0x40>
 800e7c8:	bd70      	pop	{r4, r5, r6, pc}
 800e7ca:	f853 6b04 	ldr.w	r6, [r3], #4
 800e7ce:	f845 6f04 	str.w	r6, [r5, #4]!
 800e7d2:	e7eb      	b.n	800e7ac <__copybits+0x18>
 800e7d4:	f840 3b04 	str.w	r3, [r0], #4
 800e7d8:	e7f4      	b.n	800e7c4 <__copybits+0x30>

0800e7da <__any_on>:
 800e7da:	f100 0214 	add.w	r2, r0, #20
 800e7de:	6900      	ldr	r0, [r0, #16]
 800e7e0:	114b      	asrs	r3, r1, #5
 800e7e2:	4298      	cmp	r0, r3
 800e7e4:	b510      	push	{r4, lr}
 800e7e6:	db11      	blt.n	800e80c <__any_on+0x32>
 800e7e8:	dd0a      	ble.n	800e800 <__any_on+0x26>
 800e7ea:	f011 011f 	ands.w	r1, r1, #31
 800e7ee:	d007      	beq.n	800e800 <__any_on+0x26>
 800e7f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e7f4:	fa24 f001 	lsr.w	r0, r4, r1
 800e7f8:	fa00 f101 	lsl.w	r1, r0, r1
 800e7fc:	428c      	cmp	r4, r1
 800e7fe:	d10b      	bne.n	800e818 <__any_on+0x3e>
 800e800:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e804:	4293      	cmp	r3, r2
 800e806:	d803      	bhi.n	800e810 <__any_on+0x36>
 800e808:	2000      	movs	r0, #0
 800e80a:	bd10      	pop	{r4, pc}
 800e80c:	4603      	mov	r3, r0
 800e80e:	e7f7      	b.n	800e800 <__any_on+0x26>
 800e810:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e814:	2900      	cmp	r1, #0
 800e816:	d0f5      	beq.n	800e804 <__any_on+0x2a>
 800e818:	2001      	movs	r0, #1
 800e81a:	e7f6      	b.n	800e80a <__any_on+0x30>

0800e81c <__ascii_wctomb>:
 800e81c:	4603      	mov	r3, r0
 800e81e:	4608      	mov	r0, r1
 800e820:	b141      	cbz	r1, 800e834 <__ascii_wctomb+0x18>
 800e822:	2aff      	cmp	r2, #255	@ 0xff
 800e824:	d904      	bls.n	800e830 <__ascii_wctomb+0x14>
 800e826:	228a      	movs	r2, #138	@ 0x8a
 800e828:	601a      	str	r2, [r3, #0]
 800e82a:	f04f 30ff 	mov.w	r0, #4294967295
 800e82e:	4770      	bx	lr
 800e830:	700a      	strb	r2, [r1, #0]
 800e832:	2001      	movs	r0, #1
 800e834:	4770      	bx	lr

0800e836 <__ssputs_r>:
 800e836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e83a:	688e      	ldr	r6, [r1, #8]
 800e83c:	461f      	mov	r7, r3
 800e83e:	42be      	cmp	r6, r7
 800e840:	680b      	ldr	r3, [r1, #0]
 800e842:	4682      	mov	sl, r0
 800e844:	460c      	mov	r4, r1
 800e846:	4690      	mov	r8, r2
 800e848:	d82d      	bhi.n	800e8a6 <__ssputs_r+0x70>
 800e84a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e84e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e852:	d026      	beq.n	800e8a2 <__ssputs_r+0x6c>
 800e854:	6965      	ldr	r5, [r4, #20]
 800e856:	6909      	ldr	r1, [r1, #16]
 800e858:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e85c:	eba3 0901 	sub.w	r9, r3, r1
 800e860:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e864:	1c7b      	adds	r3, r7, #1
 800e866:	444b      	add	r3, r9
 800e868:	106d      	asrs	r5, r5, #1
 800e86a:	429d      	cmp	r5, r3
 800e86c:	bf38      	it	cc
 800e86e:	461d      	movcc	r5, r3
 800e870:	0553      	lsls	r3, r2, #21
 800e872:	d527      	bpl.n	800e8c4 <__ssputs_r+0x8e>
 800e874:	4629      	mov	r1, r5
 800e876:	f7ff fa81 	bl	800dd7c <_malloc_r>
 800e87a:	4606      	mov	r6, r0
 800e87c:	b360      	cbz	r0, 800e8d8 <__ssputs_r+0xa2>
 800e87e:	6921      	ldr	r1, [r4, #16]
 800e880:	464a      	mov	r2, r9
 800e882:	f7fe f844 	bl	800c90e <memcpy>
 800e886:	89a3      	ldrh	r3, [r4, #12]
 800e888:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e88c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e890:	81a3      	strh	r3, [r4, #12]
 800e892:	6126      	str	r6, [r4, #16]
 800e894:	6165      	str	r5, [r4, #20]
 800e896:	444e      	add	r6, r9
 800e898:	eba5 0509 	sub.w	r5, r5, r9
 800e89c:	6026      	str	r6, [r4, #0]
 800e89e:	60a5      	str	r5, [r4, #8]
 800e8a0:	463e      	mov	r6, r7
 800e8a2:	42be      	cmp	r6, r7
 800e8a4:	d900      	bls.n	800e8a8 <__ssputs_r+0x72>
 800e8a6:	463e      	mov	r6, r7
 800e8a8:	6820      	ldr	r0, [r4, #0]
 800e8aa:	4632      	mov	r2, r6
 800e8ac:	4641      	mov	r1, r8
 800e8ae:	f000 f9d7 	bl	800ec60 <memmove>
 800e8b2:	68a3      	ldr	r3, [r4, #8]
 800e8b4:	1b9b      	subs	r3, r3, r6
 800e8b6:	60a3      	str	r3, [r4, #8]
 800e8b8:	6823      	ldr	r3, [r4, #0]
 800e8ba:	4433      	add	r3, r6
 800e8bc:	6023      	str	r3, [r4, #0]
 800e8be:	2000      	movs	r0, #0
 800e8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8c4:	462a      	mov	r2, r5
 800e8c6:	f000 fa10 	bl	800ecea <_realloc_r>
 800e8ca:	4606      	mov	r6, r0
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	d1e0      	bne.n	800e892 <__ssputs_r+0x5c>
 800e8d0:	6921      	ldr	r1, [r4, #16]
 800e8d2:	4650      	mov	r0, sl
 800e8d4:	f7fe fea4 	bl	800d620 <_free_r>
 800e8d8:	230c      	movs	r3, #12
 800e8da:	f8ca 3000 	str.w	r3, [sl]
 800e8de:	89a3      	ldrh	r3, [r4, #12]
 800e8e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8e4:	81a3      	strh	r3, [r4, #12]
 800e8e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ea:	e7e9      	b.n	800e8c0 <__ssputs_r+0x8a>

0800e8ec <_svfiprintf_r>:
 800e8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f0:	4698      	mov	r8, r3
 800e8f2:	898b      	ldrh	r3, [r1, #12]
 800e8f4:	061b      	lsls	r3, r3, #24
 800e8f6:	b09d      	sub	sp, #116	@ 0x74
 800e8f8:	4607      	mov	r7, r0
 800e8fa:	460d      	mov	r5, r1
 800e8fc:	4614      	mov	r4, r2
 800e8fe:	d510      	bpl.n	800e922 <_svfiprintf_r+0x36>
 800e900:	690b      	ldr	r3, [r1, #16]
 800e902:	b973      	cbnz	r3, 800e922 <_svfiprintf_r+0x36>
 800e904:	2140      	movs	r1, #64	@ 0x40
 800e906:	f7ff fa39 	bl	800dd7c <_malloc_r>
 800e90a:	6028      	str	r0, [r5, #0]
 800e90c:	6128      	str	r0, [r5, #16]
 800e90e:	b930      	cbnz	r0, 800e91e <_svfiprintf_r+0x32>
 800e910:	230c      	movs	r3, #12
 800e912:	603b      	str	r3, [r7, #0]
 800e914:	f04f 30ff 	mov.w	r0, #4294967295
 800e918:	b01d      	add	sp, #116	@ 0x74
 800e91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e91e:	2340      	movs	r3, #64	@ 0x40
 800e920:	616b      	str	r3, [r5, #20]
 800e922:	2300      	movs	r3, #0
 800e924:	9309      	str	r3, [sp, #36]	@ 0x24
 800e926:	2320      	movs	r3, #32
 800e928:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e92c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e930:	2330      	movs	r3, #48	@ 0x30
 800e932:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ead0 <_svfiprintf_r+0x1e4>
 800e936:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e93a:	f04f 0901 	mov.w	r9, #1
 800e93e:	4623      	mov	r3, r4
 800e940:	469a      	mov	sl, r3
 800e942:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e946:	b10a      	cbz	r2, 800e94c <_svfiprintf_r+0x60>
 800e948:	2a25      	cmp	r2, #37	@ 0x25
 800e94a:	d1f9      	bne.n	800e940 <_svfiprintf_r+0x54>
 800e94c:	ebba 0b04 	subs.w	fp, sl, r4
 800e950:	d00b      	beq.n	800e96a <_svfiprintf_r+0x7e>
 800e952:	465b      	mov	r3, fp
 800e954:	4622      	mov	r2, r4
 800e956:	4629      	mov	r1, r5
 800e958:	4638      	mov	r0, r7
 800e95a:	f7ff ff6c 	bl	800e836 <__ssputs_r>
 800e95e:	3001      	adds	r0, #1
 800e960:	f000 80a7 	beq.w	800eab2 <_svfiprintf_r+0x1c6>
 800e964:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e966:	445a      	add	r2, fp
 800e968:	9209      	str	r2, [sp, #36]	@ 0x24
 800e96a:	f89a 3000 	ldrb.w	r3, [sl]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	f000 809f 	beq.w	800eab2 <_svfiprintf_r+0x1c6>
 800e974:	2300      	movs	r3, #0
 800e976:	f04f 32ff 	mov.w	r2, #4294967295
 800e97a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e97e:	f10a 0a01 	add.w	sl, sl, #1
 800e982:	9304      	str	r3, [sp, #16]
 800e984:	9307      	str	r3, [sp, #28]
 800e986:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e98a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e98c:	4654      	mov	r4, sl
 800e98e:	2205      	movs	r2, #5
 800e990:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e994:	484e      	ldr	r0, [pc, #312]	@ (800ead0 <_svfiprintf_r+0x1e4>)
 800e996:	f7f1 fc1b 	bl	80001d0 <memchr>
 800e99a:	9a04      	ldr	r2, [sp, #16]
 800e99c:	b9d8      	cbnz	r0, 800e9d6 <_svfiprintf_r+0xea>
 800e99e:	06d0      	lsls	r0, r2, #27
 800e9a0:	bf44      	itt	mi
 800e9a2:	2320      	movmi	r3, #32
 800e9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9a8:	0711      	lsls	r1, r2, #28
 800e9aa:	bf44      	itt	mi
 800e9ac:	232b      	movmi	r3, #43	@ 0x2b
 800e9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e9b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9b8:	d015      	beq.n	800e9e6 <_svfiprintf_r+0xfa>
 800e9ba:	9a07      	ldr	r2, [sp, #28]
 800e9bc:	4654      	mov	r4, sl
 800e9be:	2000      	movs	r0, #0
 800e9c0:	f04f 0c0a 	mov.w	ip, #10
 800e9c4:	4621      	mov	r1, r4
 800e9c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9ca:	3b30      	subs	r3, #48	@ 0x30
 800e9cc:	2b09      	cmp	r3, #9
 800e9ce:	d94b      	bls.n	800ea68 <_svfiprintf_r+0x17c>
 800e9d0:	b1b0      	cbz	r0, 800ea00 <_svfiprintf_r+0x114>
 800e9d2:	9207      	str	r2, [sp, #28]
 800e9d4:	e014      	b.n	800ea00 <_svfiprintf_r+0x114>
 800e9d6:	eba0 0308 	sub.w	r3, r0, r8
 800e9da:	fa09 f303 	lsl.w	r3, r9, r3
 800e9de:	4313      	orrs	r3, r2
 800e9e0:	9304      	str	r3, [sp, #16]
 800e9e2:	46a2      	mov	sl, r4
 800e9e4:	e7d2      	b.n	800e98c <_svfiprintf_r+0xa0>
 800e9e6:	9b03      	ldr	r3, [sp, #12]
 800e9e8:	1d19      	adds	r1, r3, #4
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	9103      	str	r1, [sp, #12]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	bfbb      	ittet	lt
 800e9f2:	425b      	neglt	r3, r3
 800e9f4:	f042 0202 	orrlt.w	r2, r2, #2
 800e9f8:	9307      	strge	r3, [sp, #28]
 800e9fa:	9307      	strlt	r3, [sp, #28]
 800e9fc:	bfb8      	it	lt
 800e9fe:	9204      	strlt	r2, [sp, #16]
 800ea00:	7823      	ldrb	r3, [r4, #0]
 800ea02:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea04:	d10a      	bne.n	800ea1c <_svfiprintf_r+0x130>
 800ea06:	7863      	ldrb	r3, [r4, #1]
 800ea08:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea0a:	d132      	bne.n	800ea72 <_svfiprintf_r+0x186>
 800ea0c:	9b03      	ldr	r3, [sp, #12]
 800ea0e:	1d1a      	adds	r2, r3, #4
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	9203      	str	r2, [sp, #12]
 800ea14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea18:	3402      	adds	r4, #2
 800ea1a:	9305      	str	r3, [sp, #20]
 800ea1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eae0 <_svfiprintf_r+0x1f4>
 800ea20:	7821      	ldrb	r1, [r4, #0]
 800ea22:	2203      	movs	r2, #3
 800ea24:	4650      	mov	r0, sl
 800ea26:	f7f1 fbd3 	bl	80001d0 <memchr>
 800ea2a:	b138      	cbz	r0, 800ea3c <_svfiprintf_r+0x150>
 800ea2c:	9b04      	ldr	r3, [sp, #16]
 800ea2e:	eba0 000a 	sub.w	r0, r0, sl
 800ea32:	2240      	movs	r2, #64	@ 0x40
 800ea34:	4082      	lsls	r2, r0
 800ea36:	4313      	orrs	r3, r2
 800ea38:	3401      	adds	r4, #1
 800ea3a:	9304      	str	r3, [sp, #16]
 800ea3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea40:	4824      	ldr	r0, [pc, #144]	@ (800ead4 <_svfiprintf_r+0x1e8>)
 800ea42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea46:	2206      	movs	r2, #6
 800ea48:	f7f1 fbc2 	bl	80001d0 <memchr>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d036      	beq.n	800eabe <_svfiprintf_r+0x1d2>
 800ea50:	4b21      	ldr	r3, [pc, #132]	@ (800ead8 <_svfiprintf_r+0x1ec>)
 800ea52:	bb1b      	cbnz	r3, 800ea9c <_svfiprintf_r+0x1b0>
 800ea54:	9b03      	ldr	r3, [sp, #12]
 800ea56:	3307      	adds	r3, #7
 800ea58:	f023 0307 	bic.w	r3, r3, #7
 800ea5c:	3308      	adds	r3, #8
 800ea5e:	9303      	str	r3, [sp, #12]
 800ea60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea62:	4433      	add	r3, r6
 800ea64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea66:	e76a      	b.n	800e93e <_svfiprintf_r+0x52>
 800ea68:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea6c:	460c      	mov	r4, r1
 800ea6e:	2001      	movs	r0, #1
 800ea70:	e7a8      	b.n	800e9c4 <_svfiprintf_r+0xd8>
 800ea72:	2300      	movs	r3, #0
 800ea74:	3401      	adds	r4, #1
 800ea76:	9305      	str	r3, [sp, #20]
 800ea78:	4619      	mov	r1, r3
 800ea7a:	f04f 0c0a 	mov.w	ip, #10
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea84:	3a30      	subs	r2, #48	@ 0x30
 800ea86:	2a09      	cmp	r2, #9
 800ea88:	d903      	bls.n	800ea92 <_svfiprintf_r+0x1a6>
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d0c6      	beq.n	800ea1c <_svfiprintf_r+0x130>
 800ea8e:	9105      	str	r1, [sp, #20]
 800ea90:	e7c4      	b.n	800ea1c <_svfiprintf_r+0x130>
 800ea92:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea96:	4604      	mov	r4, r0
 800ea98:	2301      	movs	r3, #1
 800ea9a:	e7f0      	b.n	800ea7e <_svfiprintf_r+0x192>
 800ea9c:	ab03      	add	r3, sp, #12
 800ea9e:	9300      	str	r3, [sp, #0]
 800eaa0:	462a      	mov	r2, r5
 800eaa2:	4b0e      	ldr	r3, [pc, #56]	@ (800eadc <_svfiprintf_r+0x1f0>)
 800eaa4:	a904      	add	r1, sp, #16
 800eaa6:	4638      	mov	r0, r7
 800eaa8:	f7fc ff52 	bl	800b950 <_printf_float>
 800eaac:	1c42      	adds	r2, r0, #1
 800eaae:	4606      	mov	r6, r0
 800eab0:	d1d6      	bne.n	800ea60 <_svfiprintf_r+0x174>
 800eab2:	89ab      	ldrh	r3, [r5, #12]
 800eab4:	065b      	lsls	r3, r3, #25
 800eab6:	f53f af2d 	bmi.w	800e914 <_svfiprintf_r+0x28>
 800eaba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eabc:	e72c      	b.n	800e918 <_svfiprintf_r+0x2c>
 800eabe:	ab03      	add	r3, sp, #12
 800eac0:	9300      	str	r3, [sp, #0]
 800eac2:	462a      	mov	r2, r5
 800eac4:	4b05      	ldr	r3, [pc, #20]	@ (800eadc <_svfiprintf_r+0x1f0>)
 800eac6:	a904      	add	r1, sp, #16
 800eac8:	4638      	mov	r0, r7
 800eaca:	f7fd f9d9 	bl	800be80 <_printf_i>
 800eace:	e7ed      	b.n	800eaac <_svfiprintf_r+0x1c0>
 800ead0:	080119a0 	.word	0x080119a0
 800ead4:	080119aa 	.word	0x080119aa
 800ead8:	0800b951 	.word	0x0800b951
 800eadc:	0800e837 	.word	0x0800e837
 800eae0:	080119a6 	.word	0x080119a6

0800eae4 <__sflush_r>:
 800eae4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaec:	0716      	lsls	r6, r2, #28
 800eaee:	4605      	mov	r5, r0
 800eaf0:	460c      	mov	r4, r1
 800eaf2:	d454      	bmi.n	800eb9e <__sflush_r+0xba>
 800eaf4:	684b      	ldr	r3, [r1, #4]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	dc02      	bgt.n	800eb00 <__sflush_r+0x1c>
 800eafa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	dd48      	ble.n	800eb92 <__sflush_r+0xae>
 800eb00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb02:	2e00      	cmp	r6, #0
 800eb04:	d045      	beq.n	800eb92 <__sflush_r+0xae>
 800eb06:	2300      	movs	r3, #0
 800eb08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eb0c:	682f      	ldr	r7, [r5, #0]
 800eb0e:	6a21      	ldr	r1, [r4, #32]
 800eb10:	602b      	str	r3, [r5, #0]
 800eb12:	d030      	beq.n	800eb76 <__sflush_r+0x92>
 800eb14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eb16:	89a3      	ldrh	r3, [r4, #12]
 800eb18:	0759      	lsls	r1, r3, #29
 800eb1a:	d505      	bpl.n	800eb28 <__sflush_r+0x44>
 800eb1c:	6863      	ldr	r3, [r4, #4]
 800eb1e:	1ad2      	subs	r2, r2, r3
 800eb20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eb22:	b10b      	cbz	r3, 800eb28 <__sflush_r+0x44>
 800eb24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eb26:	1ad2      	subs	r2, r2, r3
 800eb28:	2300      	movs	r3, #0
 800eb2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb2c:	6a21      	ldr	r1, [r4, #32]
 800eb2e:	4628      	mov	r0, r5
 800eb30:	47b0      	blx	r6
 800eb32:	1c43      	adds	r3, r0, #1
 800eb34:	89a3      	ldrh	r3, [r4, #12]
 800eb36:	d106      	bne.n	800eb46 <__sflush_r+0x62>
 800eb38:	6829      	ldr	r1, [r5, #0]
 800eb3a:	291d      	cmp	r1, #29
 800eb3c:	d82b      	bhi.n	800eb96 <__sflush_r+0xb2>
 800eb3e:	4a2a      	ldr	r2, [pc, #168]	@ (800ebe8 <__sflush_r+0x104>)
 800eb40:	410a      	asrs	r2, r1
 800eb42:	07d6      	lsls	r6, r2, #31
 800eb44:	d427      	bmi.n	800eb96 <__sflush_r+0xb2>
 800eb46:	2200      	movs	r2, #0
 800eb48:	6062      	str	r2, [r4, #4]
 800eb4a:	04d9      	lsls	r1, r3, #19
 800eb4c:	6922      	ldr	r2, [r4, #16]
 800eb4e:	6022      	str	r2, [r4, #0]
 800eb50:	d504      	bpl.n	800eb5c <__sflush_r+0x78>
 800eb52:	1c42      	adds	r2, r0, #1
 800eb54:	d101      	bne.n	800eb5a <__sflush_r+0x76>
 800eb56:	682b      	ldr	r3, [r5, #0]
 800eb58:	b903      	cbnz	r3, 800eb5c <__sflush_r+0x78>
 800eb5a:	6560      	str	r0, [r4, #84]	@ 0x54
 800eb5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb5e:	602f      	str	r7, [r5, #0]
 800eb60:	b1b9      	cbz	r1, 800eb92 <__sflush_r+0xae>
 800eb62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb66:	4299      	cmp	r1, r3
 800eb68:	d002      	beq.n	800eb70 <__sflush_r+0x8c>
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	f7fe fd58 	bl	800d620 <_free_r>
 800eb70:	2300      	movs	r3, #0
 800eb72:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb74:	e00d      	b.n	800eb92 <__sflush_r+0xae>
 800eb76:	2301      	movs	r3, #1
 800eb78:	4628      	mov	r0, r5
 800eb7a:	47b0      	blx	r6
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	1c50      	adds	r0, r2, #1
 800eb80:	d1c9      	bne.n	800eb16 <__sflush_r+0x32>
 800eb82:	682b      	ldr	r3, [r5, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d0c6      	beq.n	800eb16 <__sflush_r+0x32>
 800eb88:	2b1d      	cmp	r3, #29
 800eb8a:	d001      	beq.n	800eb90 <__sflush_r+0xac>
 800eb8c:	2b16      	cmp	r3, #22
 800eb8e:	d11e      	bne.n	800ebce <__sflush_r+0xea>
 800eb90:	602f      	str	r7, [r5, #0]
 800eb92:	2000      	movs	r0, #0
 800eb94:	e022      	b.n	800ebdc <__sflush_r+0xf8>
 800eb96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb9a:	b21b      	sxth	r3, r3
 800eb9c:	e01b      	b.n	800ebd6 <__sflush_r+0xf2>
 800eb9e:	690f      	ldr	r7, [r1, #16]
 800eba0:	2f00      	cmp	r7, #0
 800eba2:	d0f6      	beq.n	800eb92 <__sflush_r+0xae>
 800eba4:	0793      	lsls	r3, r2, #30
 800eba6:	680e      	ldr	r6, [r1, #0]
 800eba8:	bf08      	it	eq
 800ebaa:	694b      	ldreq	r3, [r1, #20]
 800ebac:	600f      	str	r7, [r1, #0]
 800ebae:	bf18      	it	ne
 800ebb0:	2300      	movne	r3, #0
 800ebb2:	eba6 0807 	sub.w	r8, r6, r7
 800ebb6:	608b      	str	r3, [r1, #8]
 800ebb8:	f1b8 0f00 	cmp.w	r8, #0
 800ebbc:	dde9      	ble.n	800eb92 <__sflush_r+0xae>
 800ebbe:	6a21      	ldr	r1, [r4, #32]
 800ebc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ebc2:	4643      	mov	r3, r8
 800ebc4:	463a      	mov	r2, r7
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	47b0      	blx	r6
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	dc08      	bgt.n	800ebe0 <__sflush_r+0xfc>
 800ebce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebd6:	81a3      	strh	r3, [r4, #12]
 800ebd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebe0:	4407      	add	r7, r0
 800ebe2:	eba8 0800 	sub.w	r8, r8, r0
 800ebe6:	e7e7      	b.n	800ebb8 <__sflush_r+0xd4>
 800ebe8:	dfbffffe 	.word	0xdfbffffe

0800ebec <_fflush_r>:
 800ebec:	b538      	push	{r3, r4, r5, lr}
 800ebee:	690b      	ldr	r3, [r1, #16]
 800ebf0:	4605      	mov	r5, r0
 800ebf2:	460c      	mov	r4, r1
 800ebf4:	b913      	cbnz	r3, 800ebfc <_fflush_r+0x10>
 800ebf6:	2500      	movs	r5, #0
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	bd38      	pop	{r3, r4, r5, pc}
 800ebfc:	b118      	cbz	r0, 800ec06 <_fflush_r+0x1a>
 800ebfe:	6a03      	ldr	r3, [r0, #32]
 800ec00:	b90b      	cbnz	r3, 800ec06 <_fflush_r+0x1a>
 800ec02:	f7fd fcfd 	bl	800c600 <__sinit>
 800ec06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d0f3      	beq.n	800ebf6 <_fflush_r+0xa>
 800ec0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ec10:	07d0      	lsls	r0, r2, #31
 800ec12:	d404      	bmi.n	800ec1e <_fflush_r+0x32>
 800ec14:	0599      	lsls	r1, r3, #22
 800ec16:	d402      	bmi.n	800ec1e <_fflush_r+0x32>
 800ec18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec1a:	f7fd fe76 	bl	800c90a <__retarget_lock_acquire_recursive>
 800ec1e:	4628      	mov	r0, r5
 800ec20:	4621      	mov	r1, r4
 800ec22:	f7ff ff5f 	bl	800eae4 <__sflush_r>
 800ec26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ec28:	07da      	lsls	r2, r3, #31
 800ec2a:	4605      	mov	r5, r0
 800ec2c:	d4e4      	bmi.n	800ebf8 <_fflush_r+0xc>
 800ec2e:	89a3      	ldrh	r3, [r4, #12]
 800ec30:	059b      	lsls	r3, r3, #22
 800ec32:	d4e1      	bmi.n	800ebf8 <_fflush_r+0xc>
 800ec34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec36:	f7fd fe69 	bl	800c90c <__retarget_lock_release_recursive>
 800ec3a:	e7dd      	b.n	800ebf8 <_fflush_r+0xc>

0800ec3c <fiprintf>:
 800ec3c:	b40e      	push	{r1, r2, r3}
 800ec3e:	b503      	push	{r0, r1, lr}
 800ec40:	4601      	mov	r1, r0
 800ec42:	ab03      	add	r3, sp, #12
 800ec44:	4805      	ldr	r0, [pc, #20]	@ (800ec5c <fiprintf+0x20>)
 800ec46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec4a:	6800      	ldr	r0, [r0, #0]
 800ec4c:	9301      	str	r3, [sp, #4]
 800ec4e:	f000 f8a3 	bl	800ed98 <_vfiprintf_r>
 800ec52:	b002      	add	sp, #8
 800ec54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec58:	b003      	add	sp, #12
 800ec5a:	4770      	bx	lr
 800ec5c:	20000250 	.word	0x20000250

0800ec60 <memmove>:
 800ec60:	4288      	cmp	r0, r1
 800ec62:	b510      	push	{r4, lr}
 800ec64:	eb01 0402 	add.w	r4, r1, r2
 800ec68:	d902      	bls.n	800ec70 <memmove+0x10>
 800ec6a:	4284      	cmp	r4, r0
 800ec6c:	4623      	mov	r3, r4
 800ec6e:	d807      	bhi.n	800ec80 <memmove+0x20>
 800ec70:	1e43      	subs	r3, r0, #1
 800ec72:	42a1      	cmp	r1, r4
 800ec74:	d008      	beq.n	800ec88 <memmove+0x28>
 800ec76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec7e:	e7f8      	b.n	800ec72 <memmove+0x12>
 800ec80:	4402      	add	r2, r0
 800ec82:	4601      	mov	r1, r0
 800ec84:	428a      	cmp	r2, r1
 800ec86:	d100      	bne.n	800ec8a <memmove+0x2a>
 800ec88:	bd10      	pop	{r4, pc}
 800ec8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec92:	e7f7      	b.n	800ec84 <memmove+0x24>

0800ec94 <_sbrk_r>:
 800ec94:	b538      	push	{r3, r4, r5, lr}
 800ec96:	4d06      	ldr	r5, [pc, #24]	@ (800ecb0 <_sbrk_r+0x1c>)
 800ec98:	2300      	movs	r3, #0
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	4608      	mov	r0, r1
 800ec9e:	602b      	str	r3, [r5, #0]
 800eca0:	f7f8 f970 	bl	8006f84 <_sbrk>
 800eca4:	1c43      	adds	r3, r0, #1
 800eca6:	d102      	bne.n	800ecae <_sbrk_r+0x1a>
 800eca8:	682b      	ldr	r3, [r5, #0]
 800ecaa:	b103      	cbz	r3, 800ecae <_sbrk_r+0x1a>
 800ecac:	6023      	str	r3, [r4, #0]
 800ecae:	bd38      	pop	{r3, r4, r5, pc}
 800ecb0:	20000854 	.word	0x20000854

0800ecb4 <abort>:
 800ecb4:	b508      	push	{r3, lr}
 800ecb6:	2006      	movs	r0, #6
 800ecb8:	f000 fa42 	bl	800f140 <raise>
 800ecbc:	2001      	movs	r0, #1
 800ecbe:	f7f8 f8e9 	bl	8006e94 <_exit>

0800ecc2 <_calloc_r>:
 800ecc2:	b570      	push	{r4, r5, r6, lr}
 800ecc4:	fba1 5402 	umull	r5, r4, r1, r2
 800ecc8:	b93c      	cbnz	r4, 800ecda <_calloc_r+0x18>
 800ecca:	4629      	mov	r1, r5
 800eccc:	f7ff f856 	bl	800dd7c <_malloc_r>
 800ecd0:	4606      	mov	r6, r0
 800ecd2:	b928      	cbnz	r0, 800ece0 <_calloc_r+0x1e>
 800ecd4:	2600      	movs	r6, #0
 800ecd6:	4630      	mov	r0, r6
 800ecd8:	bd70      	pop	{r4, r5, r6, pc}
 800ecda:	220c      	movs	r2, #12
 800ecdc:	6002      	str	r2, [r0, #0]
 800ecde:	e7f9      	b.n	800ecd4 <_calloc_r+0x12>
 800ece0:	462a      	mov	r2, r5
 800ece2:	4621      	mov	r1, r4
 800ece4:	f7fd fd25 	bl	800c732 <memset>
 800ece8:	e7f5      	b.n	800ecd6 <_calloc_r+0x14>

0800ecea <_realloc_r>:
 800ecea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecee:	4680      	mov	r8, r0
 800ecf0:	4615      	mov	r5, r2
 800ecf2:	460c      	mov	r4, r1
 800ecf4:	b921      	cbnz	r1, 800ed00 <_realloc_r+0x16>
 800ecf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecfa:	4611      	mov	r1, r2
 800ecfc:	f7ff b83e 	b.w	800dd7c <_malloc_r>
 800ed00:	b92a      	cbnz	r2, 800ed0e <_realloc_r+0x24>
 800ed02:	f7fe fc8d 	bl	800d620 <_free_r>
 800ed06:	2400      	movs	r4, #0
 800ed08:	4620      	mov	r0, r4
 800ed0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed0e:	f000 fa33 	bl	800f178 <_malloc_usable_size_r>
 800ed12:	4285      	cmp	r5, r0
 800ed14:	4606      	mov	r6, r0
 800ed16:	d802      	bhi.n	800ed1e <_realloc_r+0x34>
 800ed18:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ed1c:	d8f4      	bhi.n	800ed08 <_realloc_r+0x1e>
 800ed1e:	4629      	mov	r1, r5
 800ed20:	4640      	mov	r0, r8
 800ed22:	f7ff f82b 	bl	800dd7c <_malloc_r>
 800ed26:	4607      	mov	r7, r0
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	d0ec      	beq.n	800ed06 <_realloc_r+0x1c>
 800ed2c:	42b5      	cmp	r5, r6
 800ed2e:	462a      	mov	r2, r5
 800ed30:	4621      	mov	r1, r4
 800ed32:	bf28      	it	cs
 800ed34:	4632      	movcs	r2, r6
 800ed36:	f7fd fdea 	bl	800c90e <memcpy>
 800ed3a:	4621      	mov	r1, r4
 800ed3c:	4640      	mov	r0, r8
 800ed3e:	f7fe fc6f 	bl	800d620 <_free_r>
 800ed42:	463c      	mov	r4, r7
 800ed44:	e7e0      	b.n	800ed08 <_realloc_r+0x1e>

0800ed46 <__sfputc_r>:
 800ed46:	6893      	ldr	r3, [r2, #8]
 800ed48:	3b01      	subs	r3, #1
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	b410      	push	{r4}
 800ed4e:	6093      	str	r3, [r2, #8]
 800ed50:	da08      	bge.n	800ed64 <__sfputc_r+0x1e>
 800ed52:	6994      	ldr	r4, [r2, #24]
 800ed54:	42a3      	cmp	r3, r4
 800ed56:	db01      	blt.n	800ed5c <__sfputc_r+0x16>
 800ed58:	290a      	cmp	r1, #10
 800ed5a:	d103      	bne.n	800ed64 <__sfputc_r+0x1e>
 800ed5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed60:	f000 b932 	b.w	800efc8 <__swbuf_r>
 800ed64:	6813      	ldr	r3, [r2, #0]
 800ed66:	1c58      	adds	r0, r3, #1
 800ed68:	6010      	str	r0, [r2, #0]
 800ed6a:	7019      	strb	r1, [r3, #0]
 800ed6c:	4608      	mov	r0, r1
 800ed6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <__sfputs_r>:
 800ed74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed76:	4606      	mov	r6, r0
 800ed78:	460f      	mov	r7, r1
 800ed7a:	4614      	mov	r4, r2
 800ed7c:	18d5      	adds	r5, r2, r3
 800ed7e:	42ac      	cmp	r4, r5
 800ed80:	d101      	bne.n	800ed86 <__sfputs_r+0x12>
 800ed82:	2000      	movs	r0, #0
 800ed84:	e007      	b.n	800ed96 <__sfputs_r+0x22>
 800ed86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed8a:	463a      	mov	r2, r7
 800ed8c:	4630      	mov	r0, r6
 800ed8e:	f7ff ffda 	bl	800ed46 <__sfputc_r>
 800ed92:	1c43      	adds	r3, r0, #1
 800ed94:	d1f3      	bne.n	800ed7e <__sfputs_r+0xa>
 800ed96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ed98 <_vfiprintf_r>:
 800ed98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed9c:	460d      	mov	r5, r1
 800ed9e:	b09d      	sub	sp, #116	@ 0x74
 800eda0:	4614      	mov	r4, r2
 800eda2:	4698      	mov	r8, r3
 800eda4:	4606      	mov	r6, r0
 800eda6:	b118      	cbz	r0, 800edb0 <_vfiprintf_r+0x18>
 800eda8:	6a03      	ldr	r3, [r0, #32]
 800edaa:	b90b      	cbnz	r3, 800edb0 <_vfiprintf_r+0x18>
 800edac:	f7fd fc28 	bl	800c600 <__sinit>
 800edb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edb2:	07d9      	lsls	r1, r3, #31
 800edb4:	d405      	bmi.n	800edc2 <_vfiprintf_r+0x2a>
 800edb6:	89ab      	ldrh	r3, [r5, #12]
 800edb8:	059a      	lsls	r2, r3, #22
 800edba:	d402      	bmi.n	800edc2 <_vfiprintf_r+0x2a>
 800edbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edbe:	f7fd fda4 	bl	800c90a <__retarget_lock_acquire_recursive>
 800edc2:	89ab      	ldrh	r3, [r5, #12]
 800edc4:	071b      	lsls	r3, r3, #28
 800edc6:	d501      	bpl.n	800edcc <_vfiprintf_r+0x34>
 800edc8:	692b      	ldr	r3, [r5, #16]
 800edca:	b99b      	cbnz	r3, 800edf4 <_vfiprintf_r+0x5c>
 800edcc:	4629      	mov	r1, r5
 800edce:	4630      	mov	r0, r6
 800edd0:	f000 f938 	bl	800f044 <__swsetup_r>
 800edd4:	b170      	cbz	r0, 800edf4 <_vfiprintf_r+0x5c>
 800edd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edd8:	07dc      	lsls	r4, r3, #31
 800edda:	d504      	bpl.n	800ede6 <_vfiprintf_r+0x4e>
 800eddc:	f04f 30ff 	mov.w	r0, #4294967295
 800ede0:	b01d      	add	sp, #116	@ 0x74
 800ede2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ede6:	89ab      	ldrh	r3, [r5, #12]
 800ede8:	0598      	lsls	r0, r3, #22
 800edea:	d4f7      	bmi.n	800eddc <_vfiprintf_r+0x44>
 800edec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edee:	f7fd fd8d 	bl	800c90c <__retarget_lock_release_recursive>
 800edf2:	e7f3      	b.n	800eddc <_vfiprintf_r+0x44>
 800edf4:	2300      	movs	r3, #0
 800edf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800edf8:	2320      	movs	r3, #32
 800edfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800edfe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee02:	2330      	movs	r3, #48	@ 0x30
 800ee04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800efb4 <_vfiprintf_r+0x21c>
 800ee08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee0c:	f04f 0901 	mov.w	r9, #1
 800ee10:	4623      	mov	r3, r4
 800ee12:	469a      	mov	sl, r3
 800ee14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee18:	b10a      	cbz	r2, 800ee1e <_vfiprintf_r+0x86>
 800ee1a:	2a25      	cmp	r2, #37	@ 0x25
 800ee1c:	d1f9      	bne.n	800ee12 <_vfiprintf_r+0x7a>
 800ee1e:	ebba 0b04 	subs.w	fp, sl, r4
 800ee22:	d00b      	beq.n	800ee3c <_vfiprintf_r+0xa4>
 800ee24:	465b      	mov	r3, fp
 800ee26:	4622      	mov	r2, r4
 800ee28:	4629      	mov	r1, r5
 800ee2a:	4630      	mov	r0, r6
 800ee2c:	f7ff ffa2 	bl	800ed74 <__sfputs_r>
 800ee30:	3001      	adds	r0, #1
 800ee32:	f000 80a7 	beq.w	800ef84 <_vfiprintf_r+0x1ec>
 800ee36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee38:	445a      	add	r2, fp
 800ee3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	f000 809f 	beq.w	800ef84 <_vfiprintf_r+0x1ec>
 800ee46:	2300      	movs	r3, #0
 800ee48:	f04f 32ff 	mov.w	r2, #4294967295
 800ee4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee50:	f10a 0a01 	add.w	sl, sl, #1
 800ee54:	9304      	str	r3, [sp, #16]
 800ee56:	9307      	str	r3, [sp, #28]
 800ee58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee5e:	4654      	mov	r4, sl
 800ee60:	2205      	movs	r2, #5
 800ee62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee66:	4853      	ldr	r0, [pc, #332]	@ (800efb4 <_vfiprintf_r+0x21c>)
 800ee68:	f7f1 f9b2 	bl	80001d0 <memchr>
 800ee6c:	9a04      	ldr	r2, [sp, #16]
 800ee6e:	b9d8      	cbnz	r0, 800eea8 <_vfiprintf_r+0x110>
 800ee70:	06d1      	lsls	r1, r2, #27
 800ee72:	bf44      	itt	mi
 800ee74:	2320      	movmi	r3, #32
 800ee76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee7a:	0713      	lsls	r3, r2, #28
 800ee7c:	bf44      	itt	mi
 800ee7e:	232b      	movmi	r3, #43	@ 0x2b
 800ee80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee84:	f89a 3000 	ldrb.w	r3, [sl]
 800ee88:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee8a:	d015      	beq.n	800eeb8 <_vfiprintf_r+0x120>
 800ee8c:	9a07      	ldr	r2, [sp, #28]
 800ee8e:	4654      	mov	r4, sl
 800ee90:	2000      	movs	r0, #0
 800ee92:	f04f 0c0a 	mov.w	ip, #10
 800ee96:	4621      	mov	r1, r4
 800ee98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee9c:	3b30      	subs	r3, #48	@ 0x30
 800ee9e:	2b09      	cmp	r3, #9
 800eea0:	d94b      	bls.n	800ef3a <_vfiprintf_r+0x1a2>
 800eea2:	b1b0      	cbz	r0, 800eed2 <_vfiprintf_r+0x13a>
 800eea4:	9207      	str	r2, [sp, #28]
 800eea6:	e014      	b.n	800eed2 <_vfiprintf_r+0x13a>
 800eea8:	eba0 0308 	sub.w	r3, r0, r8
 800eeac:	fa09 f303 	lsl.w	r3, r9, r3
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	9304      	str	r3, [sp, #16]
 800eeb4:	46a2      	mov	sl, r4
 800eeb6:	e7d2      	b.n	800ee5e <_vfiprintf_r+0xc6>
 800eeb8:	9b03      	ldr	r3, [sp, #12]
 800eeba:	1d19      	adds	r1, r3, #4
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	9103      	str	r1, [sp, #12]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	bfbb      	ittet	lt
 800eec4:	425b      	neglt	r3, r3
 800eec6:	f042 0202 	orrlt.w	r2, r2, #2
 800eeca:	9307      	strge	r3, [sp, #28]
 800eecc:	9307      	strlt	r3, [sp, #28]
 800eece:	bfb8      	it	lt
 800eed0:	9204      	strlt	r2, [sp, #16]
 800eed2:	7823      	ldrb	r3, [r4, #0]
 800eed4:	2b2e      	cmp	r3, #46	@ 0x2e
 800eed6:	d10a      	bne.n	800eeee <_vfiprintf_r+0x156>
 800eed8:	7863      	ldrb	r3, [r4, #1]
 800eeda:	2b2a      	cmp	r3, #42	@ 0x2a
 800eedc:	d132      	bne.n	800ef44 <_vfiprintf_r+0x1ac>
 800eede:	9b03      	ldr	r3, [sp, #12]
 800eee0:	1d1a      	adds	r2, r3, #4
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	9203      	str	r2, [sp, #12]
 800eee6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eeea:	3402      	adds	r4, #2
 800eeec:	9305      	str	r3, [sp, #20]
 800eeee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800efc4 <_vfiprintf_r+0x22c>
 800eef2:	7821      	ldrb	r1, [r4, #0]
 800eef4:	2203      	movs	r2, #3
 800eef6:	4650      	mov	r0, sl
 800eef8:	f7f1 f96a 	bl	80001d0 <memchr>
 800eefc:	b138      	cbz	r0, 800ef0e <_vfiprintf_r+0x176>
 800eefe:	9b04      	ldr	r3, [sp, #16]
 800ef00:	eba0 000a 	sub.w	r0, r0, sl
 800ef04:	2240      	movs	r2, #64	@ 0x40
 800ef06:	4082      	lsls	r2, r0
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	3401      	adds	r4, #1
 800ef0c:	9304      	str	r3, [sp, #16]
 800ef0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef12:	4829      	ldr	r0, [pc, #164]	@ (800efb8 <_vfiprintf_r+0x220>)
 800ef14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef18:	2206      	movs	r2, #6
 800ef1a:	f7f1 f959 	bl	80001d0 <memchr>
 800ef1e:	2800      	cmp	r0, #0
 800ef20:	d03f      	beq.n	800efa2 <_vfiprintf_r+0x20a>
 800ef22:	4b26      	ldr	r3, [pc, #152]	@ (800efbc <_vfiprintf_r+0x224>)
 800ef24:	bb1b      	cbnz	r3, 800ef6e <_vfiprintf_r+0x1d6>
 800ef26:	9b03      	ldr	r3, [sp, #12]
 800ef28:	3307      	adds	r3, #7
 800ef2a:	f023 0307 	bic.w	r3, r3, #7
 800ef2e:	3308      	adds	r3, #8
 800ef30:	9303      	str	r3, [sp, #12]
 800ef32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef34:	443b      	add	r3, r7
 800ef36:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef38:	e76a      	b.n	800ee10 <_vfiprintf_r+0x78>
 800ef3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef3e:	460c      	mov	r4, r1
 800ef40:	2001      	movs	r0, #1
 800ef42:	e7a8      	b.n	800ee96 <_vfiprintf_r+0xfe>
 800ef44:	2300      	movs	r3, #0
 800ef46:	3401      	adds	r4, #1
 800ef48:	9305      	str	r3, [sp, #20]
 800ef4a:	4619      	mov	r1, r3
 800ef4c:	f04f 0c0a 	mov.w	ip, #10
 800ef50:	4620      	mov	r0, r4
 800ef52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef56:	3a30      	subs	r2, #48	@ 0x30
 800ef58:	2a09      	cmp	r2, #9
 800ef5a:	d903      	bls.n	800ef64 <_vfiprintf_r+0x1cc>
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d0c6      	beq.n	800eeee <_vfiprintf_r+0x156>
 800ef60:	9105      	str	r1, [sp, #20]
 800ef62:	e7c4      	b.n	800eeee <_vfiprintf_r+0x156>
 800ef64:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef68:	4604      	mov	r4, r0
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	e7f0      	b.n	800ef50 <_vfiprintf_r+0x1b8>
 800ef6e:	ab03      	add	r3, sp, #12
 800ef70:	9300      	str	r3, [sp, #0]
 800ef72:	462a      	mov	r2, r5
 800ef74:	4b12      	ldr	r3, [pc, #72]	@ (800efc0 <_vfiprintf_r+0x228>)
 800ef76:	a904      	add	r1, sp, #16
 800ef78:	4630      	mov	r0, r6
 800ef7a:	f7fc fce9 	bl	800b950 <_printf_float>
 800ef7e:	4607      	mov	r7, r0
 800ef80:	1c78      	adds	r0, r7, #1
 800ef82:	d1d6      	bne.n	800ef32 <_vfiprintf_r+0x19a>
 800ef84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef86:	07d9      	lsls	r1, r3, #31
 800ef88:	d405      	bmi.n	800ef96 <_vfiprintf_r+0x1fe>
 800ef8a:	89ab      	ldrh	r3, [r5, #12]
 800ef8c:	059a      	lsls	r2, r3, #22
 800ef8e:	d402      	bmi.n	800ef96 <_vfiprintf_r+0x1fe>
 800ef90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef92:	f7fd fcbb 	bl	800c90c <__retarget_lock_release_recursive>
 800ef96:	89ab      	ldrh	r3, [r5, #12]
 800ef98:	065b      	lsls	r3, r3, #25
 800ef9a:	f53f af1f 	bmi.w	800eddc <_vfiprintf_r+0x44>
 800ef9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800efa0:	e71e      	b.n	800ede0 <_vfiprintf_r+0x48>
 800efa2:	ab03      	add	r3, sp, #12
 800efa4:	9300      	str	r3, [sp, #0]
 800efa6:	462a      	mov	r2, r5
 800efa8:	4b05      	ldr	r3, [pc, #20]	@ (800efc0 <_vfiprintf_r+0x228>)
 800efaa:	a904      	add	r1, sp, #16
 800efac:	4630      	mov	r0, r6
 800efae:	f7fc ff67 	bl	800be80 <_printf_i>
 800efb2:	e7e4      	b.n	800ef7e <_vfiprintf_r+0x1e6>
 800efb4:	080119a0 	.word	0x080119a0
 800efb8:	080119aa 	.word	0x080119aa
 800efbc:	0800b951 	.word	0x0800b951
 800efc0:	0800ed75 	.word	0x0800ed75
 800efc4:	080119a6 	.word	0x080119a6

0800efc8 <__swbuf_r>:
 800efc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efca:	460e      	mov	r6, r1
 800efcc:	4614      	mov	r4, r2
 800efce:	4605      	mov	r5, r0
 800efd0:	b118      	cbz	r0, 800efda <__swbuf_r+0x12>
 800efd2:	6a03      	ldr	r3, [r0, #32]
 800efd4:	b90b      	cbnz	r3, 800efda <__swbuf_r+0x12>
 800efd6:	f7fd fb13 	bl	800c600 <__sinit>
 800efda:	69a3      	ldr	r3, [r4, #24]
 800efdc:	60a3      	str	r3, [r4, #8]
 800efde:	89a3      	ldrh	r3, [r4, #12]
 800efe0:	071a      	lsls	r2, r3, #28
 800efe2:	d501      	bpl.n	800efe8 <__swbuf_r+0x20>
 800efe4:	6923      	ldr	r3, [r4, #16]
 800efe6:	b943      	cbnz	r3, 800effa <__swbuf_r+0x32>
 800efe8:	4621      	mov	r1, r4
 800efea:	4628      	mov	r0, r5
 800efec:	f000 f82a 	bl	800f044 <__swsetup_r>
 800eff0:	b118      	cbz	r0, 800effa <__swbuf_r+0x32>
 800eff2:	f04f 37ff 	mov.w	r7, #4294967295
 800eff6:	4638      	mov	r0, r7
 800eff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800effa:	6823      	ldr	r3, [r4, #0]
 800effc:	6922      	ldr	r2, [r4, #16]
 800effe:	1a98      	subs	r0, r3, r2
 800f000:	6963      	ldr	r3, [r4, #20]
 800f002:	b2f6      	uxtb	r6, r6
 800f004:	4283      	cmp	r3, r0
 800f006:	4637      	mov	r7, r6
 800f008:	dc05      	bgt.n	800f016 <__swbuf_r+0x4e>
 800f00a:	4621      	mov	r1, r4
 800f00c:	4628      	mov	r0, r5
 800f00e:	f7ff fded 	bl	800ebec <_fflush_r>
 800f012:	2800      	cmp	r0, #0
 800f014:	d1ed      	bne.n	800eff2 <__swbuf_r+0x2a>
 800f016:	68a3      	ldr	r3, [r4, #8]
 800f018:	3b01      	subs	r3, #1
 800f01a:	60a3      	str	r3, [r4, #8]
 800f01c:	6823      	ldr	r3, [r4, #0]
 800f01e:	1c5a      	adds	r2, r3, #1
 800f020:	6022      	str	r2, [r4, #0]
 800f022:	701e      	strb	r6, [r3, #0]
 800f024:	6962      	ldr	r2, [r4, #20]
 800f026:	1c43      	adds	r3, r0, #1
 800f028:	429a      	cmp	r2, r3
 800f02a:	d004      	beq.n	800f036 <__swbuf_r+0x6e>
 800f02c:	89a3      	ldrh	r3, [r4, #12]
 800f02e:	07db      	lsls	r3, r3, #31
 800f030:	d5e1      	bpl.n	800eff6 <__swbuf_r+0x2e>
 800f032:	2e0a      	cmp	r6, #10
 800f034:	d1df      	bne.n	800eff6 <__swbuf_r+0x2e>
 800f036:	4621      	mov	r1, r4
 800f038:	4628      	mov	r0, r5
 800f03a:	f7ff fdd7 	bl	800ebec <_fflush_r>
 800f03e:	2800      	cmp	r0, #0
 800f040:	d0d9      	beq.n	800eff6 <__swbuf_r+0x2e>
 800f042:	e7d6      	b.n	800eff2 <__swbuf_r+0x2a>

0800f044 <__swsetup_r>:
 800f044:	b538      	push	{r3, r4, r5, lr}
 800f046:	4b29      	ldr	r3, [pc, #164]	@ (800f0ec <__swsetup_r+0xa8>)
 800f048:	4605      	mov	r5, r0
 800f04a:	6818      	ldr	r0, [r3, #0]
 800f04c:	460c      	mov	r4, r1
 800f04e:	b118      	cbz	r0, 800f058 <__swsetup_r+0x14>
 800f050:	6a03      	ldr	r3, [r0, #32]
 800f052:	b90b      	cbnz	r3, 800f058 <__swsetup_r+0x14>
 800f054:	f7fd fad4 	bl	800c600 <__sinit>
 800f058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f05c:	0719      	lsls	r1, r3, #28
 800f05e:	d422      	bmi.n	800f0a6 <__swsetup_r+0x62>
 800f060:	06da      	lsls	r2, r3, #27
 800f062:	d407      	bmi.n	800f074 <__swsetup_r+0x30>
 800f064:	2209      	movs	r2, #9
 800f066:	602a      	str	r2, [r5, #0]
 800f068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f06c:	81a3      	strh	r3, [r4, #12]
 800f06e:	f04f 30ff 	mov.w	r0, #4294967295
 800f072:	e033      	b.n	800f0dc <__swsetup_r+0x98>
 800f074:	0758      	lsls	r0, r3, #29
 800f076:	d512      	bpl.n	800f09e <__swsetup_r+0x5a>
 800f078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f07a:	b141      	cbz	r1, 800f08e <__swsetup_r+0x4a>
 800f07c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f080:	4299      	cmp	r1, r3
 800f082:	d002      	beq.n	800f08a <__swsetup_r+0x46>
 800f084:	4628      	mov	r0, r5
 800f086:	f7fe facb 	bl	800d620 <_free_r>
 800f08a:	2300      	movs	r3, #0
 800f08c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f08e:	89a3      	ldrh	r3, [r4, #12]
 800f090:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f094:	81a3      	strh	r3, [r4, #12]
 800f096:	2300      	movs	r3, #0
 800f098:	6063      	str	r3, [r4, #4]
 800f09a:	6923      	ldr	r3, [r4, #16]
 800f09c:	6023      	str	r3, [r4, #0]
 800f09e:	89a3      	ldrh	r3, [r4, #12]
 800f0a0:	f043 0308 	orr.w	r3, r3, #8
 800f0a4:	81a3      	strh	r3, [r4, #12]
 800f0a6:	6923      	ldr	r3, [r4, #16]
 800f0a8:	b94b      	cbnz	r3, 800f0be <__swsetup_r+0x7a>
 800f0aa:	89a3      	ldrh	r3, [r4, #12]
 800f0ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f0b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f0b4:	d003      	beq.n	800f0be <__swsetup_r+0x7a>
 800f0b6:	4621      	mov	r1, r4
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	f000 f88b 	bl	800f1d4 <__smakebuf_r>
 800f0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0c2:	f013 0201 	ands.w	r2, r3, #1
 800f0c6:	d00a      	beq.n	800f0de <__swsetup_r+0x9a>
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	60a2      	str	r2, [r4, #8]
 800f0cc:	6962      	ldr	r2, [r4, #20]
 800f0ce:	4252      	negs	r2, r2
 800f0d0:	61a2      	str	r2, [r4, #24]
 800f0d2:	6922      	ldr	r2, [r4, #16]
 800f0d4:	b942      	cbnz	r2, 800f0e8 <__swsetup_r+0xa4>
 800f0d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f0da:	d1c5      	bne.n	800f068 <__swsetup_r+0x24>
 800f0dc:	bd38      	pop	{r3, r4, r5, pc}
 800f0de:	0799      	lsls	r1, r3, #30
 800f0e0:	bf58      	it	pl
 800f0e2:	6962      	ldrpl	r2, [r4, #20]
 800f0e4:	60a2      	str	r2, [r4, #8]
 800f0e6:	e7f4      	b.n	800f0d2 <__swsetup_r+0x8e>
 800f0e8:	2000      	movs	r0, #0
 800f0ea:	e7f7      	b.n	800f0dc <__swsetup_r+0x98>
 800f0ec:	20000250 	.word	0x20000250

0800f0f0 <_raise_r>:
 800f0f0:	291f      	cmp	r1, #31
 800f0f2:	b538      	push	{r3, r4, r5, lr}
 800f0f4:	4605      	mov	r5, r0
 800f0f6:	460c      	mov	r4, r1
 800f0f8:	d904      	bls.n	800f104 <_raise_r+0x14>
 800f0fa:	2316      	movs	r3, #22
 800f0fc:	6003      	str	r3, [r0, #0]
 800f0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f102:	bd38      	pop	{r3, r4, r5, pc}
 800f104:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f106:	b112      	cbz	r2, 800f10e <_raise_r+0x1e>
 800f108:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f10c:	b94b      	cbnz	r3, 800f122 <_raise_r+0x32>
 800f10e:	4628      	mov	r0, r5
 800f110:	f000 f830 	bl	800f174 <_getpid_r>
 800f114:	4622      	mov	r2, r4
 800f116:	4601      	mov	r1, r0
 800f118:	4628      	mov	r0, r5
 800f11a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f11e:	f000 b817 	b.w	800f150 <_kill_r>
 800f122:	2b01      	cmp	r3, #1
 800f124:	d00a      	beq.n	800f13c <_raise_r+0x4c>
 800f126:	1c59      	adds	r1, r3, #1
 800f128:	d103      	bne.n	800f132 <_raise_r+0x42>
 800f12a:	2316      	movs	r3, #22
 800f12c:	6003      	str	r3, [r0, #0]
 800f12e:	2001      	movs	r0, #1
 800f130:	e7e7      	b.n	800f102 <_raise_r+0x12>
 800f132:	2100      	movs	r1, #0
 800f134:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f138:	4620      	mov	r0, r4
 800f13a:	4798      	blx	r3
 800f13c:	2000      	movs	r0, #0
 800f13e:	e7e0      	b.n	800f102 <_raise_r+0x12>

0800f140 <raise>:
 800f140:	4b02      	ldr	r3, [pc, #8]	@ (800f14c <raise+0xc>)
 800f142:	4601      	mov	r1, r0
 800f144:	6818      	ldr	r0, [r3, #0]
 800f146:	f7ff bfd3 	b.w	800f0f0 <_raise_r>
 800f14a:	bf00      	nop
 800f14c:	20000250 	.word	0x20000250

0800f150 <_kill_r>:
 800f150:	b538      	push	{r3, r4, r5, lr}
 800f152:	4d07      	ldr	r5, [pc, #28]	@ (800f170 <_kill_r+0x20>)
 800f154:	2300      	movs	r3, #0
 800f156:	4604      	mov	r4, r0
 800f158:	4608      	mov	r0, r1
 800f15a:	4611      	mov	r1, r2
 800f15c:	602b      	str	r3, [r5, #0]
 800f15e:	f7f7 fe89 	bl	8006e74 <_kill>
 800f162:	1c43      	adds	r3, r0, #1
 800f164:	d102      	bne.n	800f16c <_kill_r+0x1c>
 800f166:	682b      	ldr	r3, [r5, #0]
 800f168:	b103      	cbz	r3, 800f16c <_kill_r+0x1c>
 800f16a:	6023      	str	r3, [r4, #0]
 800f16c:	bd38      	pop	{r3, r4, r5, pc}
 800f16e:	bf00      	nop
 800f170:	20000854 	.word	0x20000854

0800f174 <_getpid_r>:
 800f174:	f7f7 be76 	b.w	8006e64 <_getpid>

0800f178 <_malloc_usable_size_r>:
 800f178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f17c:	1f18      	subs	r0, r3, #4
 800f17e:	2b00      	cmp	r3, #0
 800f180:	bfbc      	itt	lt
 800f182:	580b      	ldrlt	r3, [r1, r0]
 800f184:	18c0      	addlt	r0, r0, r3
 800f186:	4770      	bx	lr

0800f188 <__swhatbuf_r>:
 800f188:	b570      	push	{r4, r5, r6, lr}
 800f18a:	460c      	mov	r4, r1
 800f18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f190:	2900      	cmp	r1, #0
 800f192:	b096      	sub	sp, #88	@ 0x58
 800f194:	4615      	mov	r5, r2
 800f196:	461e      	mov	r6, r3
 800f198:	da0d      	bge.n	800f1b6 <__swhatbuf_r+0x2e>
 800f19a:	89a3      	ldrh	r3, [r4, #12]
 800f19c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f1a0:	f04f 0100 	mov.w	r1, #0
 800f1a4:	bf14      	ite	ne
 800f1a6:	2340      	movne	r3, #64	@ 0x40
 800f1a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f1ac:	2000      	movs	r0, #0
 800f1ae:	6031      	str	r1, [r6, #0]
 800f1b0:	602b      	str	r3, [r5, #0]
 800f1b2:	b016      	add	sp, #88	@ 0x58
 800f1b4:	bd70      	pop	{r4, r5, r6, pc}
 800f1b6:	466a      	mov	r2, sp
 800f1b8:	f000 f848 	bl	800f24c <_fstat_r>
 800f1bc:	2800      	cmp	r0, #0
 800f1be:	dbec      	blt.n	800f19a <__swhatbuf_r+0x12>
 800f1c0:	9901      	ldr	r1, [sp, #4]
 800f1c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f1c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f1ca:	4259      	negs	r1, r3
 800f1cc:	4159      	adcs	r1, r3
 800f1ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f1d2:	e7eb      	b.n	800f1ac <__swhatbuf_r+0x24>

0800f1d4 <__smakebuf_r>:
 800f1d4:	898b      	ldrh	r3, [r1, #12]
 800f1d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1d8:	079d      	lsls	r5, r3, #30
 800f1da:	4606      	mov	r6, r0
 800f1dc:	460c      	mov	r4, r1
 800f1de:	d507      	bpl.n	800f1f0 <__smakebuf_r+0x1c>
 800f1e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f1e4:	6023      	str	r3, [r4, #0]
 800f1e6:	6123      	str	r3, [r4, #16]
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	6163      	str	r3, [r4, #20]
 800f1ec:	b003      	add	sp, #12
 800f1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1f0:	ab01      	add	r3, sp, #4
 800f1f2:	466a      	mov	r2, sp
 800f1f4:	f7ff ffc8 	bl	800f188 <__swhatbuf_r>
 800f1f8:	9f00      	ldr	r7, [sp, #0]
 800f1fa:	4605      	mov	r5, r0
 800f1fc:	4639      	mov	r1, r7
 800f1fe:	4630      	mov	r0, r6
 800f200:	f7fe fdbc 	bl	800dd7c <_malloc_r>
 800f204:	b948      	cbnz	r0, 800f21a <__smakebuf_r+0x46>
 800f206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f20a:	059a      	lsls	r2, r3, #22
 800f20c:	d4ee      	bmi.n	800f1ec <__smakebuf_r+0x18>
 800f20e:	f023 0303 	bic.w	r3, r3, #3
 800f212:	f043 0302 	orr.w	r3, r3, #2
 800f216:	81a3      	strh	r3, [r4, #12]
 800f218:	e7e2      	b.n	800f1e0 <__smakebuf_r+0xc>
 800f21a:	89a3      	ldrh	r3, [r4, #12]
 800f21c:	6020      	str	r0, [r4, #0]
 800f21e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f222:	81a3      	strh	r3, [r4, #12]
 800f224:	9b01      	ldr	r3, [sp, #4]
 800f226:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f22a:	b15b      	cbz	r3, 800f244 <__smakebuf_r+0x70>
 800f22c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f230:	4630      	mov	r0, r6
 800f232:	f000 f81d 	bl	800f270 <_isatty_r>
 800f236:	b128      	cbz	r0, 800f244 <__smakebuf_r+0x70>
 800f238:	89a3      	ldrh	r3, [r4, #12]
 800f23a:	f023 0303 	bic.w	r3, r3, #3
 800f23e:	f043 0301 	orr.w	r3, r3, #1
 800f242:	81a3      	strh	r3, [r4, #12]
 800f244:	89a3      	ldrh	r3, [r4, #12]
 800f246:	431d      	orrs	r5, r3
 800f248:	81a5      	strh	r5, [r4, #12]
 800f24a:	e7cf      	b.n	800f1ec <__smakebuf_r+0x18>

0800f24c <_fstat_r>:
 800f24c:	b538      	push	{r3, r4, r5, lr}
 800f24e:	4d07      	ldr	r5, [pc, #28]	@ (800f26c <_fstat_r+0x20>)
 800f250:	2300      	movs	r3, #0
 800f252:	4604      	mov	r4, r0
 800f254:	4608      	mov	r0, r1
 800f256:	4611      	mov	r1, r2
 800f258:	602b      	str	r3, [r5, #0]
 800f25a:	f7f7 fe6b 	bl	8006f34 <_fstat>
 800f25e:	1c43      	adds	r3, r0, #1
 800f260:	d102      	bne.n	800f268 <_fstat_r+0x1c>
 800f262:	682b      	ldr	r3, [r5, #0]
 800f264:	b103      	cbz	r3, 800f268 <_fstat_r+0x1c>
 800f266:	6023      	str	r3, [r4, #0]
 800f268:	bd38      	pop	{r3, r4, r5, pc}
 800f26a:	bf00      	nop
 800f26c:	20000854 	.word	0x20000854

0800f270 <_isatty_r>:
 800f270:	b538      	push	{r3, r4, r5, lr}
 800f272:	4d06      	ldr	r5, [pc, #24]	@ (800f28c <_isatty_r+0x1c>)
 800f274:	2300      	movs	r3, #0
 800f276:	4604      	mov	r4, r0
 800f278:	4608      	mov	r0, r1
 800f27a:	602b      	str	r3, [r5, #0]
 800f27c:	f7f7 fe6a 	bl	8006f54 <_isatty>
 800f280:	1c43      	adds	r3, r0, #1
 800f282:	d102      	bne.n	800f28a <_isatty_r+0x1a>
 800f284:	682b      	ldr	r3, [r5, #0]
 800f286:	b103      	cbz	r3, 800f28a <_isatty_r+0x1a>
 800f288:	6023      	str	r3, [r4, #0]
 800f28a:	bd38      	pop	{r3, r4, r5, pc}
 800f28c:	20000854 	.word	0x20000854

0800f290 <atan2>:
 800f290:	f000 bbc6 	b.w	800fa20 <__ieee754_atan2>
 800f294:	0000      	movs	r0, r0
	...

0800f298 <hypot>:
 800f298:	b508      	push	{r3, lr}
 800f29a:	ed2d 8b06 	vpush	{d8-d10}
 800f29e:	eeb0 aa40 	vmov.f32	s20, s0
 800f2a2:	eef0 aa60 	vmov.f32	s21, s1
 800f2a6:	eeb0 9a41 	vmov.f32	s18, s2
 800f2aa:	eef0 9a61 	vmov.f32	s19, s3
 800f2ae:	f000 fc7d 	bl	800fbac <__ieee754_hypot>
 800f2b2:	eeb0 8a40 	vmov.f32	s16, s0
 800f2b6:	eef0 8a60 	vmov.f32	s17, s1
 800f2ba:	f000 f8c9 	bl	800f450 <finite>
 800f2be:	b998      	cbnz	r0, 800f2e8 <hypot+0x50>
 800f2c0:	eeb0 0a4a 	vmov.f32	s0, s20
 800f2c4:	eef0 0a6a 	vmov.f32	s1, s21
 800f2c8:	f000 f8c2 	bl	800f450 <finite>
 800f2cc:	b160      	cbz	r0, 800f2e8 <hypot+0x50>
 800f2ce:	eeb0 0a49 	vmov.f32	s0, s18
 800f2d2:	eef0 0a69 	vmov.f32	s1, s19
 800f2d6:	f000 f8bb 	bl	800f450 <finite>
 800f2da:	b128      	cbz	r0, 800f2e8 <hypot+0x50>
 800f2dc:	f7fd faea 	bl	800c8b4 <__errno>
 800f2e0:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800f2f8 <hypot+0x60>
 800f2e4:	2322      	movs	r3, #34	@ 0x22
 800f2e6:	6003      	str	r3, [r0, #0]
 800f2e8:	eeb0 0a48 	vmov.f32	s0, s16
 800f2ec:	eef0 0a68 	vmov.f32	s1, s17
 800f2f0:	ecbd 8b06 	vpop	{d8-d10}
 800f2f4:	bd08      	pop	{r3, pc}
 800f2f6:	bf00      	nop
 800f2f8:	00000000 	.word	0x00000000
 800f2fc:	7ff00000 	.word	0x7ff00000

0800f300 <cos>:
 800f300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f302:	ec53 2b10 	vmov	r2, r3, d0
 800f306:	4826      	ldr	r0, [pc, #152]	@ (800f3a0 <cos+0xa0>)
 800f308:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f30c:	4281      	cmp	r1, r0
 800f30e:	d806      	bhi.n	800f31e <cos+0x1e>
 800f310:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f398 <cos+0x98>
 800f314:	b005      	add	sp, #20
 800f316:	f85d eb04 	ldr.w	lr, [sp], #4
 800f31a:	f000 b9fd 	b.w	800f718 <__kernel_cos>
 800f31e:	4821      	ldr	r0, [pc, #132]	@ (800f3a4 <cos+0xa4>)
 800f320:	4281      	cmp	r1, r0
 800f322:	d908      	bls.n	800f336 <cos+0x36>
 800f324:	4610      	mov	r0, r2
 800f326:	4619      	mov	r1, r3
 800f328:	f7f0 ffae 	bl	8000288 <__aeabi_dsub>
 800f32c:	ec41 0b10 	vmov	d0, r0, r1
 800f330:	b005      	add	sp, #20
 800f332:	f85d fb04 	ldr.w	pc, [sp], #4
 800f336:	4668      	mov	r0, sp
 800f338:	f000 fd4e 	bl	800fdd8 <__ieee754_rem_pio2>
 800f33c:	f000 0003 	and.w	r0, r0, #3
 800f340:	2801      	cmp	r0, #1
 800f342:	d00b      	beq.n	800f35c <cos+0x5c>
 800f344:	2802      	cmp	r0, #2
 800f346:	d015      	beq.n	800f374 <cos+0x74>
 800f348:	b9d8      	cbnz	r0, 800f382 <cos+0x82>
 800f34a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f34e:	ed9d 0b00 	vldr	d0, [sp]
 800f352:	f000 f9e1 	bl	800f718 <__kernel_cos>
 800f356:	ec51 0b10 	vmov	r0, r1, d0
 800f35a:	e7e7      	b.n	800f32c <cos+0x2c>
 800f35c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f360:	ed9d 0b00 	vldr	d0, [sp]
 800f364:	f000 faa0 	bl	800f8a8 <__kernel_sin>
 800f368:	ec53 2b10 	vmov	r2, r3, d0
 800f36c:	4610      	mov	r0, r2
 800f36e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f372:	e7db      	b.n	800f32c <cos+0x2c>
 800f374:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f378:	ed9d 0b00 	vldr	d0, [sp]
 800f37c:	f000 f9cc 	bl	800f718 <__kernel_cos>
 800f380:	e7f2      	b.n	800f368 <cos+0x68>
 800f382:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f386:	ed9d 0b00 	vldr	d0, [sp]
 800f38a:	2001      	movs	r0, #1
 800f38c:	f000 fa8c 	bl	800f8a8 <__kernel_sin>
 800f390:	e7e1      	b.n	800f356 <cos+0x56>
 800f392:	bf00      	nop
 800f394:	f3af 8000 	nop.w
	...
 800f3a0:	3fe921fb 	.word	0x3fe921fb
 800f3a4:	7fefffff 	.word	0x7fefffff

0800f3a8 <sin>:
 800f3a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3aa:	ec53 2b10 	vmov	r2, r3, d0
 800f3ae:	4826      	ldr	r0, [pc, #152]	@ (800f448 <sin+0xa0>)
 800f3b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f3b4:	4281      	cmp	r1, r0
 800f3b6:	d807      	bhi.n	800f3c8 <sin+0x20>
 800f3b8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f440 <sin+0x98>
 800f3bc:	2000      	movs	r0, #0
 800f3be:	b005      	add	sp, #20
 800f3c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3c4:	f000 ba70 	b.w	800f8a8 <__kernel_sin>
 800f3c8:	4820      	ldr	r0, [pc, #128]	@ (800f44c <sin+0xa4>)
 800f3ca:	4281      	cmp	r1, r0
 800f3cc:	d908      	bls.n	800f3e0 <sin+0x38>
 800f3ce:	4610      	mov	r0, r2
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	f7f0 ff59 	bl	8000288 <__aeabi_dsub>
 800f3d6:	ec41 0b10 	vmov	d0, r0, r1
 800f3da:	b005      	add	sp, #20
 800f3dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f3e0:	4668      	mov	r0, sp
 800f3e2:	f000 fcf9 	bl	800fdd8 <__ieee754_rem_pio2>
 800f3e6:	f000 0003 	and.w	r0, r0, #3
 800f3ea:	2801      	cmp	r0, #1
 800f3ec:	d00c      	beq.n	800f408 <sin+0x60>
 800f3ee:	2802      	cmp	r0, #2
 800f3f0:	d011      	beq.n	800f416 <sin+0x6e>
 800f3f2:	b9e8      	cbnz	r0, 800f430 <sin+0x88>
 800f3f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f3f8:	ed9d 0b00 	vldr	d0, [sp]
 800f3fc:	2001      	movs	r0, #1
 800f3fe:	f000 fa53 	bl	800f8a8 <__kernel_sin>
 800f402:	ec51 0b10 	vmov	r0, r1, d0
 800f406:	e7e6      	b.n	800f3d6 <sin+0x2e>
 800f408:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f40c:	ed9d 0b00 	vldr	d0, [sp]
 800f410:	f000 f982 	bl	800f718 <__kernel_cos>
 800f414:	e7f5      	b.n	800f402 <sin+0x5a>
 800f416:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f41a:	ed9d 0b00 	vldr	d0, [sp]
 800f41e:	2001      	movs	r0, #1
 800f420:	f000 fa42 	bl	800f8a8 <__kernel_sin>
 800f424:	ec53 2b10 	vmov	r2, r3, d0
 800f428:	4610      	mov	r0, r2
 800f42a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f42e:	e7d2      	b.n	800f3d6 <sin+0x2e>
 800f430:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f434:	ed9d 0b00 	vldr	d0, [sp]
 800f438:	f000 f96e 	bl	800f718 <__kernel_cos>
 800f43c:	e7f2      	b.n	800f424 <sin+0x7c>
 800f43e:	bf00      	nop
	...
 800f448:	3fe921fb 	.word	0x3fe921fb
 800f44c:	7fefffff 	.word	0x7fefffff

0800f450 <finite>:
 800f450:	b082      	sub	sp, #8
 800f452:	ed8d 0b00 	vstr	d0, [sp]
 800f456:	9801      	ldr	r0, [sp, #4]
 800f458:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f45c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f460:	0fc0      	lsrs	r0, r0, #31
 800f462:	b002      	add	sp, #8
 800f464:	4770      	bx	lr

0800f466 <fmax>:
 800f466:	b508      	push	{r3, lr}
 800f468:	ed2d 8b04 	vpush	{d8-d9}
 800f46c:	eeb0 8a40 	vmov.f32	s16, s0
 800f470:	eef0 8a60 	vmov.f32	s17, s1
 800f474:	eeb0 9a41 	vmov.f32	s18, s2
 800f478:	eef0 9a61 	vmov.f32	s19, s3
 800f47c:	f000 f848 	bl	800f510 <__fpclassifyd>
 800f480:	b950      	cbnz	r0, 800f498 <fmax+0x32>
 800f482:	eeb0 8a49 	vmov.f32	s16, s18
 800f486:	eef0 8a69 	vmov.f32	s17, s19
 800f48a:	eeb0 0a48 	vmov.f32	s0, s16
 800f48e:	eef0 0a68 	vmov.f32	s1, s17
 800f492:	ecbd 8b04 	vpop	{d8-d9}
 800f496:	bd08      	pop	{r3, pc}
 800f498:	eeb0 0a49 	vmov.f32	s0, s18
 800f49c:	eef0 0a69 	vmov.f32	s1, s19
 800f4a0:	f000 f836 	bl	800f510 <__fpclassifyd>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d0f0      	beq.n	800f48a <fmax+0x24>
 800f4a8:	ec53 2b19 	vmov	r2, r3, d9
 800f4ac:	ec51 0b18 	vmov	r0, r1, d8
 800f4b0:	f7f1 fb32 	bl	8000b18 <__aeabi_dcmpgt>
 800f4b4:	2800      	cmp	r0, #0
 800f4b6:	d0e4      	beq.n	800f482 <fmax+0x1c>
 800f4b8:	e7e7      	b.n	800f48a <fmax+0x24>

0800f4ba <fmin>:
 800f4ba:	b508      	push	{r3, lr}
 800f4bc:	ed2d 8b04 	vpush	{d8-d9}
 800f4c0:	eeb0 8a40 	vmov.f32	s16, s0
 800f4c4:	eef0 8a60 	vmov.f32	s17, s1
 800f4c8:	eeb0 9a41 	vmov.f32	s18, s2
 800f4cc:	eef0 9a61 	vmov.f32	s19, s3
 800f4d0:	f000 f81e 	bl	800f510 <__fpclassifyd>
 800f4d4:	b950      	cbnz	r0, 800f4ec <fmin+0x32>
 800f4d6:	eeb0 8a49 	vmov.f32	s16, s18
 800f4da:	eef0 8a69 	vmov.f32	s17, s19
 800f4de:	eeb0 0a48 	vmov.f32	s0, s16
 800f4e2:	eef0 0a68 	vmov.f32	s1, s17
 800f4e6:	ecbd 8b04 	vpop	{d8-d9}
 800f4ea:	bd08      	pop	{r3, pc}
 800f4ec:	eeb0 0a49 	vmov.f32	s0, s18
 800f4f0:	eef0 0a69 	vmov.f32	s1, s19
 800f4f4:	f000 f80c 	bl	800f510 <__fpclassifyd>
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	d0f0      	beq.n	800f4de <fmin+0x24>
 800f4fc:	ec53 2b19 	vmov	r2, r3, d9
 800f500:	ec51 0b18 	vmov	r0, r1, d8
 800f504:	f7f1 faea 	bl	8000adc <__aeabi_dcmplt>
 800f508:	2800      	cmp	r0, #0
 800f50a:	d0e4      	beq.n	800f4d6 <fmin+0x1c>
 800f50c:	e7e7      	b.n	800f4de <fmin+0x24>
	...

0800f510 <__fpclassifyd>:
 800f510:	ec51 0b10 	vmov	r0, r1, d0
 800f514:	b510      	push	{r4, lr}
 800f516:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800f51a:	460b      	mov	r3, r1
 800f51c:	d019      	beq.n	800f552 <__fpclassifyd+0x42>
 800f51e:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800f522:	490e      	ldr	r1, [pc, #56]	@ (800f55c <__fpclassifyd+0x4c>)
 800f524:	428a      	cmp	r2, r1
 800f526:	d90e      	bls.n	800f546 <__fpclassifyd+0x36>
 800f528:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800f52c:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800f530:	428a      	cmp	r2, r1
 800f532:	d908      	bls.n	800f546 <__fpclassifyd+0x36>
 800f534:	4a0a      	ldr	r2, [pc, #40]	@ (800f560 <__fpclassifyd+0x50>)
 800f536:	4213      	tst	r3, r2
 800f538:	d007      	beq.n	800f54a <__fpclassifyd+0x3a>
 800f53a:	4294      	cmp	r4, r2
 800f53c:	d107      	bne.n	800f54e <__fpclassifyd+0x3e>
 800f53e:	fab0 f080 	clz	r0, r0
 800f542:	0940      	lsrs	r0, r0, #5
 800f544:	bd10      	pop	{r4, pc}
 800f546:	2004      	movs	r0, #4
 800f548:	e7fc      	b.n	800f544 <__fpclassifyd+0x34>
 800f54a:	2003      	movs	r0, #3
 800f54c:	e7fa      	b.n	800f544 <__fpclassifyd+0x34>
 800f54e:	2000      	movs	r0, #0
 800f550:	e7f8      	b.n	800f544 <__fpclassifyd+0x34>
 800f552:	2800      	cmp	r0, #0
 800f554:	d1ee      	bne.n	800f534 <__fpclassifyd+0x24>
 800f556:	2002      	movs	r0, #2
 800f558:	e7f4      	b.n	800f544 <__fpclassifyd+0x34>
 800f55a:	bf00      	nop
 800f55c:	7fdfffff 	.word	0x7fdfffff
 800f560:	7ff00000 	.word	0x7ff00000

0800f564 <__ieee754_sqrt>:
 800f564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f568:	4a68      	ldr	r2, [pc, #416]	@ (800f70c <__ieee754_sqrt+0x1a8>)
 800f56a:	ec55 4b10 	vmov	r4, r5, d0
 800f56e:	43aa      	bics	r2, r5
 800f570:	462b      	mov	r3, r5
 800f572:	4621      	mov	r1, r4
 800f574:	d110      	bne.n	800f598 <__ieee754_sqrt+0x34>
 800f576:	4622      	mov	r2, r4
 800f578:	4620      	mov	r0, r4
 800f57a:	4629      	mov	r1, r5
 800f57c:	f7f1 f83c 	bl	80005f8 <__aeabi_dmul>
 800f580:	4602      	mov	r2, r0
 800f582:	460b      	mov	r3, r1
 800f584:	4620      	mov	r0, r4
 800f586:	4629      	mov	r1, r5
 800f588:	f7f0 fe80 	bl	800028c <__adddf3>
 800f58c:	4604      	mov	r4, r0
 800f58e:	460d      	mov	r5, r1
 800f590:	ec45 4b10 	vmov	d0, r4, r5
 800f594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f598:	2d00      	cmp	r5, #0
 800f59a:	dc0e      	bgt.n	800f5ba <__ieee754_sqrt+0x56>
 800f59c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f5a0:	4322      	orrs	r2, r4
 800f5a2:	d0f5      	beq.n	800f590 <__ieee754_sqrt+0x2c>
 800f5a4:	b19d      	cbz	r5, 800f5ce <__ieee754_sqrt+0x6a>
 800f5a6:	4622      	mov	r2, r4
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	4629      	mov	r1, r5
 800f5ac:	f7f0 fe6c 	bl	8000288 <__aeabi_dsub>
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	460b      	mov	r3, r1
 800f5b4:	f7f1 f94a 	bl	800084c <__aeabi_ddiv>
 800f5b8:	e7e8      	b.n	800f58c <__ieee754_sqrt+0x28>
 800f5ba:	152a      	asrs	r2, r5, #20
 800f5bc:	d115      	bne.n	800f5ea <__ieee754_sqrt+0x86>
 800f5be:	2000      	movs	r0, #0
 800f5c0:	e009      	b.n	800f5d6 <__ieee754_sqrt+0x72>
 800f5c2:	0acb      	lsrs	r3, r1, #11
 800f5c4:	3a15      	subs	r2, #21
 800f5c6:	0549      	lsls	r1, r1, #21
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d0fa      	beq.n	800f5c2 <__ieee754_sqrt+0x5e>
 800f5cc:	e7f7      	b.n	800f5be <__ieee754_sqrt+0x5a>
 800f5ce:	462a      	mov	r2, r5
 800f5d0:	e7fa      	b.n	800f5c8 <__ieee754_sqrt+0x64>
 800f5d2:	005b      	lsls	r3, r3, #1
 800f5d4:	3001      	adds	r0, #1
 800f5d6:	02dc      	lsls	r4, r3, #11
 800f5d8:	d5fb      	bpl.n	800f5d2 <__ieee754_sqrt+0x6e>
 800f5da:	1e44      	subs	r4, r0, #1
 800f5dc:	1b12      	subs	r2, r2, r4
 800f5de:	f1c0 0420 	rsb	r4, r0, #32
 800f5e2:	fa21 f404 	lsr.w	r4, r1, r4
 800f5e6:	4323      	orrs	r3, r4
 800f5e8:	4081      	lsls	r1, r0
 800f5ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5ee:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f5f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f5f6:	07d2      	lsls	r2, r2, #31
 800f5f8:	bf5c      	itt	pl
 800f5fa:	005b      	lslpl	r3, r3, #1
 800f5fc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f600:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f604:	bf58      	it	pl
 800f606:	0049      	lslpl	r1, r1, #1
 800f608:	2600      	movs	r6, #0
 800f60a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f60e:	106d      	asrs	r5, r5, #1
 800f610:	0049      	lsls	r1, r1, #1
 800f612:	2016      	movs	r0, #22
 800f614:	4632      	mov	r2, r6
 800f616:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f61a:	1917      	adds	r7, r2, r4
 800f61c:	429f      	cmp	r7, r3
 800f61e:	bfde      	ittt	le
 800f620:	193a      	addle	r2, r7, r4
 800f622:	1bdb      	suble	r3, r3, r7
 800f624:	1936      	addle	r6, r6, r4
 800f626:	0fcf      	lsrs	r7, r1, #31
 800f628:	3801      	subs	r0, #1
 800f62a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f62e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f632:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f636:	d1f0      	bne.n	800f61a <__ieee754_sqrt+0xb6>
 800f638:	4604      	mov	r4, r0
 800f63a:	2720      	movs	r7, #32
 800f63c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f640:	429a      	cmp	r2, r3
 800f642:	eb00 0e0c 	add.w	lr, r0, ip
 800f646:	db02      	blt.n	800f64e <__ieee754_sqrt+0xea>
 800f648:	d113      	bne.n	800f672 <__ieee754_sqrt+0x10e>
 800f64a:	458e      	cmp	lr, r1
 800f64c:	d811      	bhi.n	800f672 <__ieee754_sqrt+0x10e>
 800f64e:	f1be 0f00 	cmp.w	lr, #0
 800f652:	eb0e 000c 	add.w	r0, lr, ip
 800f656:	da42      	bge.n	800f6de <__ieee754_sqrt+0x17a>
 800f658:	2800      	cmp	r0, #0
 800f65a:	db40      	blt.n	800f6de <__ieee754_sqrt+0x17a>
 800f65c:	f102 0801 	add.w	r8, r2, #1
 800f660:	1a9b      	subs	r3, r3, r2
 800f662:	458e      	cmp	lr, r1
 800f664:	bf88      	it	hi
 800f666:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f66a:	eba1 010e 	sub.w	r1, r1, lr
 800f66e:	4464      	add	r4, ip
 800f670:	4642      	mov	r2, r8
 800f672:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f676:	3f01      	subs	r7, #1
 800f678:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f67c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f680:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f684:	d1dc      	bne.n	800f640 <__ieee754_sqrt+0xdc>
 800f686:	4319      	orrs	r1, r3
 800f688:	d01b      	beq.n	800f6c2 <__ieee754_sqrt+0x15e>
 800f68a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f710 <__ieee754_sqrt+0x1ac>
 800f68e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f714 <__ieee754_sqrt+0x1b0>
 800f692:	e9da 0100 	ldrd	r0, r1, [sl]
 800f696:	e9db 2300 	ldrd	r2, r3, [fp]
 800f69a:	f7f0 fdf5 	bl	8000288 <__aeabi_dsub>
 800f69e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f6a2:	4602      	mov	r2, r0
 800f6a4:	460b      	mov	r3, r1
 800f6a6:	4640      	mov	r0, r8
 800f6a8:	4649      	mov	r1, r9
 800f6aa:	f7f1 fa21 	bl	8000af0 <__aeabi_dcmple>
 800f6ae:	b140      	cbz	r0, 800f6c2 <__ieee754_sqrt+0x15e>
 800f6b0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f6b4:	e9da 0100 	ldrd	r0, r1, [sl]
 800f6b8:	e9db 2300 	ldrd	r2, r3, [fp]
 800f6bc:	d111      	bne.n	800f6e2 <__ieee754_sqrt+0x17e>
 800f6be:	3601      	adds	r6, #1
 800f6c0:	463c      	mov	r4, r7
 800f6c2:	1072      	asrs	r2, r6, #1
 800f6c4:	0863      	lsrs	r3, r4, #1
 800f6c6:	07f1      	lsls	r1, r6, #31
 800f6c8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f6cc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f6d0:	bf48      	it	mi
 800f6d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f6d6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f6da:	4618      	mov	r0, r3
 800f6dc:	e756      	b.n	800f58c <__ieee754_sqrt+0x28>
 800f6de:	4690      	mov	r8, r2
 800f6e0:	e7be      	b.n	800f660 <__ieee754_sqrt+0xfc>
 800f6e2:	f7f0 fdd3 	bl	800028c <__adddf3>
 800f6e6:	e9da 8900 	ldrd	r8, r9, [sl]
 800f6ea:	4602      	mov	r2, r0
 800f6ec:	460b      	mov	r3, r1
 800f6ee:	4640      	mov	r0, r8
 800f6f0:	4649      	mov	r1, r9
 800f6f2:	f7f1 f9f3 	bl	8000adc <__aeabi_dcmplt>
 800f6f6:	b120      	cbz	r0, 800f702 <__ieee754_sqrt+0x19e>
 800f6f8:	1ca0      	adds	r0, r4, #2
 800f6fa:	bf08      	it	eq
 800f6fc:	3601      	addeq	r6, #1
 800f6fe:	3402      	adds	r4, #2
 800f700:	e7df      	b.n	800f6c2 <__ieee754_sqrt+0x15e>
 800f702:	1c63      	adds	r3, r4, #1
 800f704:	f023 0401 	bic.w	r4, r3, #1
 800f708:	e7db      	b.n	800f6c2 <__ieee754_sqrt+0x15e>
 800f70a:	bf00      	nop
 800f70c:	7ff00000 	.word	0x7ff00000
 800f710:	200002a8 	.word	0x200002a8
 800f714:	200002a0 	.word	0x200002a0

0800f718 <__kernel_cos>:
 800f718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f71c:	ec57 6b10 	vmov	r6, r7, d0
 800f720:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f724:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f728:	ed8d 1b00 	vstr	d1, [sp]
 800f72c:	d206      	bcs.n	800f73c <__kernel_cos+0x24>
 800f72e:	4630      	mov	r0, r6
 800f730:	4639      	mov	r1, r7
 800f732:	f7f1 fa11 	bl	8000b58 <__aeabi_d2iz>
 800f736:	2800      	cmp	r0, #0
 800f738:	f000 8088 	beq.w	800f84c <__kernel_cos+0x134>
 800f73c:	4632      	mov	r2, r6
 800f73e:	463b      	mov	r3, r7
 800f740:	4630      	mov	r0, r6
 800f742:	4639      	mov	r1, r7
 800f744:	f7f0 ff58 	bl	80005f8 <__aeabi_dmul>
 800f748:	4b51      	ldr	r3, [pc, #324]	@ (800f890 <__kernel_cos+0x178>)
 800f74a:	2200      	movs	r2, #0
 800f74c:	4604      	mov	r4, r0
 800f74e:	460d      	mov	r5, r1
 800f750:	f7f0 ff52 	bl	80005f8 <__aeabi_dmul>
 800f754:	a340      	add	r3, pc, #256	@ (adr r3, 800f858 <__kernel_cos+0x140>)
 800f756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75a:	4682      	mov	sl, r0
 800f75c:	468b      	mov	fp, r1
 800f75e:	4620      	mov	r0, r4
 800f760:	4629      	mov	r1, r5
 800f762:	f7f0 ff49 	bl	80005f8 <__aeabi_dmul>
 800f766:	a33e      	add	r3, pc, #248	@ (adr r3, 800f860 <__kernel_cos+0x148>)
 800f768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76c:	f7f0 fd8e 	bl	800028c <__adddf3>
 800f770:	4622      	mov	r2, r4
 800f772:	462b      	mov	r3, r5
 800f774:	f7f0 ff40 	bl	80005f8 <__aeabi_dmul>
 800f778:	a33b      	add	r3, pc, #236	@ (adr r3, 800f868 <__kernel_cos+0x150>)
 800f77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77e:	f7f0 fd83 	bl	8000288 <__aeabi_dsub>
 800f782:	4622      	mov	r2, r4
 800f784:	462b      	mov	r3, r5
 800f786:	f7f0 ff37 	bl	80005f8 <__aeabi_dmul>
 800f78a:	a339      	add	r3, pc, #228	@ (adr r3, 800f870 <__kernel_cos+0x158>)
 800f78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f790:	f7f0 fd7c 	bl	800028c <__adddf3>
 800f794:	4622      	mov	r2, r4
 800f796:	462b      	mov	r3, r5
 800f798:	f7f0 ff2e 	bl	80005f8 <__aeabi_dmul>
 800f79c:	a336      	add	r3, pc, #216	@ (adr r3, 800f878 <__kernel_cos+0x160>)
 800f79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a2:	f7f0 fd71 	bl	8000288 <__aeabi_dsub>
 800f7a6:	4622      	mov	r2, r4
 800f7a8:	462b      	mov	r3, r5
 800f7aa:	f7f0 ff25 	bl	80005f8 <__aeabi_dmul>
 800f7ae:	a334      	add	r3, pc, #208	@ (adr r3, 800f880 <__kernel_cos+0x168>)
 800f7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b4:	f7f0 fd6a 	bl	800028c <__adddf3>
 800f7b8:	4622      	mov	r2, r4
 800f7ba:	462b      	mov	r3, r5
 800f7bc:	f7f0 ff1c 	bl	80005f8 <__aeabi_dmul>
 800f7c0:	4622      	mov	r2, r4
 800f7c2:	462b      	mov	r3, r5
 800f7c4:	f7f0 ff18 	bl	80005f8 <__aeabi_dmul>
 800f7c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7cc:	4604      	mov	r4, r0
 800f7ce:	460d      	mov	r5, r1
 800f7d0:	4630      	mov	r0, r6
 800f7d2:	4639      	mov	r1, r7
 800f7d4:	f7f0 ff10 	bl	80005f8 <__aeabi_dmul>
 800f7d8:	460b      	mov	r3, r1
 800f7da:	4602      	mov	r2, r0
 800f7dc:	4629      	mov	r1, r5
 800f7de:	4620      	mov	r0, r4
 800f7e0:	f7f0 fd52 	bl	8000288 <__aeabi_dsub>
 800f7e4:	4b2b      	ldr	r3, [pc, #172]	@ (800f894 <__kernel_cos+0x17c>)
 800f7e6:	4598      	cmp	r8, r3
 800f7e8:	4606      	mov	r6, r0
 800f7ea:	460f      	mov	r7, r1
 800f7ec:	d810      	bhi.n	800f810 <__kernel_cos+0xf8>
 800f7ee:	4602      	mov	r2, r0
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	4650      	mov	r0, sl
 800f7f4:	4659      	mov	r1, fp
 800f7f6:	f7f0 fd47 	bl	8000288 <__aeabi_dsub>
 800f7fa:	460b      	mov	r3, r1
 800f7fc:	4926      	ldr	r1, [pc, #152]	@ (800f898 <__kernel_cos+0x180>)
 800f7fe:	4602      	mov	r2, r0
 800f800:	2000      	movs	r0, #0
 800f802:	f7f0 fd41 	bl	8000288 <__aeabi_dsub>
 800f806:	ec41 0b10 	vmov	d0, r0, r1
 800f80a:	b003      	add	sp, #12
 800f80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f810:	4b22      	ldr	r3, [pc, #136]	@ (800f89c <__kernel_cos+0x184>)
 800f812:	4921      	ldr	r1, [pc, #132]	@ (800f898 <__kernel_cos+0x180>)
 800f814:	4598      	cmp	r8, r3
 800f816:	bf8c      	ite	hi
 800f818:	4d21      	ldrhi	r5, [pc, #132]	@ (800f8a0 <__kernel_cos+0x188>)
 800f81a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f81e:	2400      	movs	r4, #0
 800f820:	4622      	mov	r2, r4
 800f822:	462b      	mov	r3, r5
 800f824:	2000      	movs	r0, #0
 800f826:	f7f0 fd2f 	bl	8000288 <__aeabi_dsub>
 800f82a:	4622      	mov	r2, r4
 800f82c:	4680      	mov	r8, r0
 800f82e:	4689      	mov	r9, r1
 800f830:	462b      	mov	r3, r5
 800f832:	4650      	mov	r0, sl
 800f834:	4659      	mov	r1, fp
 800f836:	f7f0 fd27 	bl	8000288 <__aeabi_dsub>
 800f83a:	4632      	mov	r2, r6
 800f83c:	463b      	mov	r3, r7
 800f83e:	f7f0 fd23 	bl	8000288 <__aeabi_dsub>
 800f842:	4602      	mov	r2, r0
 800f844:	460b      	mov	r3, r1
 800f846:	4640      	mov	r0, r8
 800f848:	4649      	mov	r1, r9
 800f84a:	e7da      	b.n	800f802 <__kernel_cos+0xea>
 800f84c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800f888 <__kernel_cos+0x170>
 800f850:	e7db      	b.n	800f80a <__kernel_cos+0xf2>
 800f852:	bf00      	nop
 800f854:	f3af 8000 	nop.w
 800f858:	be8838d4 	.word	0xbe8838d4
 800f85c:	bda8fae9 	.word	0xbda8fae9
 800f860:	bdb4b1c4 	.word	0xbdb4b1c4
 800f864:	3e21ee9e 	.word	0x3e21ee9e
 800f868:	809c52ad 	.word	0x809c52ad
 800f86c:	3e927e4f 	.word	0x3e927e4f
 800f870:	19cb1590 	.word	0x19cb1590
 800f874:	3efa01a0 	.word	0x3efa01a0
 800f878:	16c15177 	.word	0x16c15177
 800f87c:	3f56c16c 	.word	0x3f56c16c
 800f880:	5555554c 	.word	0x5555554c
 800f884:	3fa55555 	.word	0x3fa55555
 800f888:	00000000 	.word	0x00000000
 800f88c:	3ff00000 	.word	0x3ff00000
 800f890:	3fe00000 	.word	0x3fe00000
 800f894:	3fd33332 	.word	0x3fd33332
 800f898:	3ff00000 	.word	0x3ff00000
 800f89c:	3fe90000 	.word	0x3fe90000
 800f8a0:	3fd20000 	.word	0x3fd20000
 800f8a4:	00000000 	.word	0x00000000

0800f8a8 <__kernel_sin>:
 800f8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ac:	ec55 4b10 	vmov	r4, r5, d0
 800f8b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f8b4:	b085      	sub	sp, #20
 800f8b6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f8ba:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f8be:	4680      	mov	r8, r0
 800f8c0:	d205      	bcs.n	800f8ce <__kernel_sin+0x26>
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	4629      	mov	r1, r5
 800f8c6:	f7f1 f947 	bl	8000b58 <__aeabi_d2iz>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	d052      	beq.n	800f974 <__kernel_sin+0xcc>
 800f8ce:	4622      	mov	r2, r4
 800f8d0:	462b      	mov	r3, r5
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	4629      	mov	r1, r5
 800f8d6:	f7f0 fe8f 	bl	80005f8 <__aeabi_dmul>
 800f8da:	4682      	mov	sl, r0
 800f8dc:	468b      	mov	fp, r1
 800f8de:	4602      	mov	r2, r0
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	4629      	mov	r1, r5
 800f8e6:	f7f0 fe87 	bl	80005f8 <__aeabi_dmul>
 800f8ea:	a342      	add	r3, pc, #264	@ (adr r3, 800f9f4 <__kernel_sin+0x14c>)
 800f8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f0:	e9cd 0100 	strd	r0, r1, [sp]
 800f8f4:	4650      	mov	r0, sl
 800f8f6:	4659      	mov	r1, fp
 800f8f8:	f7f0 fe7e 	bl	80005f8 <__aeabi_dmul>
 800f8fc:	a33f      	add	r3, pc, #252	@ (adr r3, 800f9fc <__kernel_sin+0x154>)
 800f8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f902:	f7f0 fcc1 	bl	8000288 <__aeabi_dsub>
 800f906:	4652      	mov	r2, sl
 800f908:	465b      	mov	r3, fp
 800f90a:	f7f0 fe75 	bl	80005f8 <__aeabi_dmul>
 800f90e:	a33d      	add	r3, pc, #244	@ (adr r3, 800fa04 <__kernel_sin+0x15c>)
 800f910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f914:	f7f0 fcba 	bl	800028c <__adddf3>
 800f918:	4652      	mov	r2, sl
 800f91a:	465b      	mov	r3, fp
 800f91c:	f7f0 fe6c 	bl	80005f8 <__aeabi_dmul>
 800f920:	a33a      	add	r3, pc, #232	@ (adr r3, 800fa0c <__kernel_sin+0x164>)
 800f922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f926:	f7f0 fcaf 	bl	8000288 <__aeabi_dsub>
 800f92a:	4652      	mov	r2, sl
 800f92c:	465b      	mov	r3, fp
 800f92e:	f7f0 fe63 	bl	80005f8 <__aeabi_dmul>
 800f932:	a338      	add	r3, pc, #224	@ (adr r3, 800fa14 <__kernel_sin+0x16c>)
 800f934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f938:	f7f0 fca8 	bl	800028c <__adddf3>
 800f93c:	4606      	mov	r6, r0
 800f93e:	460f      	mov	r7, r1
 800f940:	f1b8 0f00 	cmp.w	r8, #0
 800f944:	d11b      	bne.n	800f97e <__kernel_sin+0xd6>
 800f946:	4602      	mov	r2, r0
 800f948:	460b      	mov	r3, r1
 800f94a:	4650      	mov	r0, sl
 800f94c:	4659      	mov	r1, fp
 800f94e:	f7f0 fe53 	bl	80005f8 <__aeabi_dmul>
 800f952:	a325      	add	r3, pc, #148	@ (adr r3, 800f9e8 <__kernel_sin+0x140>)
 800f954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f958:	f7f0 fc96 	bl	8000288 <__aeabi_dsub>
 800f95c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f960:	f7f0 fe4a 	bl	80005f8 <__aeabi_dmul>
 800f964:	4602      	mov	r2, r0
 800f966:	460b      	mov	r3, r1
 800f968:	4620      	mov	r0, r4
 800f96a:	4629      	mov	r1, r5
 800f96c:	f7f0 fc8e 	bl	800028c <__adddf3>
 800f970:	4604      	mov	r4, r0
 800f972:	460d      	mov	r5, r1
 800f974:	ec45 4b10 	vmov	d0, r4, r5
 800f978:	b005      	add	sp, #20
 800f97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f982:	4b1b      	ldr	r3, [pc, #108]	@ (800f9f0 <__kernel_sin+0x148>)
 800f984:	2200      	movs	r2, #0
 800f986:	f7f0 fe37 	bl	80005f8 <__aeabi_dmul>
 800f98a:	4632      	mov	r2, r6
 800f98c:	4680      	mov	r8, r0
 800f98e:	4689      	mov	r9, r1
 800f990:	463b      	mov	r3, r7
 800f992:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f996:	f7f0 fe2f 	bl	80005f8 <__aeabi_dmul>
 800f99a:	4602      	mov	r2, r0
 800f99c:	460b      	mov	r3, r1
 800f99e:	4640      	mov	r0, r8
 800f9a0:	4649      	mov	r1, r9
 800f9a2:	f7f0 fc71 	bl	8000288 <__aeabi_dsub>
 800f9a6:	4652      	mov	r2, sl
 800f9a8:	465b      	mov	r3, fp
 800f9aa:	f7f0 fe25 	bl	80005f8 <__aeabi_dmul>
 800f9ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9b2:	f7f0 fc69 	bl	8000288 <__aeabi_dsub>
 800f9b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800f9e8 <__kernel_sin+0x140>)
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	4606      	mov	r6, r0
 800f9be:	460f      	mov	r7, r1
 800f9c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9c4:	f7f0 fe18 	bl	80005f8 <__aeabi_dmul>
 800f9c8:	4602      	mov	r2, r0
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	4639      	mov	r1, r7
 800f9d0:	f7f0 fc5c 	bl	800028c <__adddf3>
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	460b      	mov	r3, r1
 800f9d8:	4620      	mov	r0, r4
 800f9da:	4629      	mov	r1, r5
 800f9dc:	f7f0 fc54 	bl	8000288 <__aeabi_dsub>
 800f9e0:	e7c6      	b.n	800f970 <__kernel_sin+0xc8>
 800f9e2:	bf00      	nop
 800f9e4:	f3af 8000 	nop.w
 800f9e8:	55555549 	.word	0x55555549
 800f9ec:	3fc55555 	.word	0x3fc55555
 800f9f0:	3fe00000 	.word	0x3fe00000
 800f9f4:	5acfd57c 	.word	0x5acfd57c
 800f9f8:	3de5d93a 	.word	0x3de5d93a
 800f9fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800fa00:	3e5ae5e6 	.word	0x3e5ae5e6
 800fa04:	57b1fe7d 	.word	0x57b1fe7d
 800fa08:	3ec71de3 	.word	0x3ec71de3
 800fa0c:	19c161d5 	.word	0x19c161d5
 800fa10:	3f2a01a0 	.word	0x3f2a01a0
 800fa14:	1110f8a6 	.word	0x1110f8a6
 800fa18:	3f811111 	.word	0x3f811111
 800fa1c:	00000000 	.word	0x00000000

0800fa20 <__ieee754_atan2>:
 800fa20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa24:	ec57 6b11 	vmov	r6, r7, d1
 800fa28:	4273      	negs	r3, r6
 800fa2a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800fba8 <__ieee754_atan2+0x188>
 800fa2e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800fa32:	4333      	orrs	r3, r6
 800fa34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fa38:	4543      	cmp	r3, r8
 800fa3a:	ec51 0b10 	vmov	r0, r1, d0
 800fa3e:	4635      	mov	r5, r6
 800fa40:	d809      	bhi.n	800fa56 <__ieee754_atan2+0x36>
 800fa42:	4244      	negs	r4, r0
 800fa44:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fa48:	4304      	orrs	r4, r0
 800fa4a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fa4e:	4544      	cmp	r4, r8
 800fa50:	468e      	mov	lr, r1
 800fa52:	4681      	mov	r9, r0
 800fa54:	d907      	bls.n	800fa66 <__ieee754_atan2+0x46>
 800fa56:	4632      	mov	r2, r6
 800fa58:	463b      	mov	r3, r7
 800fa5a:	f7f0 fc17 	bl	800028c <__adddf3>
 800fa5e:	ec41 0b10 	vmov	d0, r0, r1
 800fa62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa66:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800fa6a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800fa6e:	4334      	orrs	r4, r6
 800fa70:	d103      	bne.n	800fa7a <__ieee754_atan2+0x5a>
 800fa72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa76:	f000 bbab 	b.w	80101d0 <atan>
 800fa7a:	17bc      	asrs	r4, r7, #30
 800fa7c:	f004 0402 	and.w	r4, r4, #2
 800fa80:	ea53 0909 	orrs.w	r9, r3, r9
 800fa84:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fa88:	d107      	bne.n	800fa9a <__ieee754_atan2+0x7a>
 800fa8a:	2c02      	cmp	r4, #2
 800fa8c:	d05f      	beq.n	800fb4e <__ieee754_atan2+0x12e>
 800fa8e:	2c03      	cmp	r4, #3
 800fa90:	d1e5      	bne.n	800fa5e <__ieee754_atan2+0x3e>
 800fa92:	a141      	add	r1, pc, #260	@ (adr r1, 800fb98 <__ieee754_atan2+0x178>)
 800fa94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa98:	e7e1      	b.n	800fa5e <__ieee754_atan2+0x3e>
 800fa9a:	4315      	orrs	r5, r2
 800fa9c:	d106      	bne.n	800faac <__ieee754_atan2+0x8c>
 800fa9e:	f1be 0f00 	cmp.w	lr, #0
 800faa2:	da5f      	bge.n	800fb64 <__ieee754_atan2+0x144>
 800faa4:	a13e      	add	r1, pc, #248	@ (adr r1, 800fba0 <__ieee754_atan2+0x180>)
 800faa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800faaa:	e7d8      	b.n	800fa5e <__ieee754_atan2+0x3e>
 800faac:	4542      	cmp	r2, r8
 800faae:	d10f      	bne.n	800fad0 <__ieee754_atan2+0xb0>
 800fab0:	4293      	cmp	r3, r2
 800fab2:	f104 34ff 	add.w	r4, r4, #4294967295
 800fab6:	d107      	bne.n	800fac8 <__ieee754_atan2+0xa8>
 800fab8:	2c02      	cmp	r4, #2
 800faba:	d84c      	bhi.n	800fb56 <__ieee754_atan2+0x136>
 800fabc:	4b34      	ldr	r3, [pc, #208]	@ (800fb90 <__ieee754_atan2+0x170>)
 800fabe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fac2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fac6:	e7ca      	b.n	800fa5e <__ieee754_atan2+0x3e>
 800fac8:	2c02      	cmp	r4, #2
 800faca:	d848      	bhi.n	800fb5e <__ieee754_atan2+0x13e>
 800facc:	4b31      	ldr	r3, [pc, #196]	@ (800fb94 <__ieee754_atan2+0x174>)
 800face:	e7f6      	b.n	800fabe <__ieee754_atan2+0x9e>
 800fad0:	4543      	cmp	r3, r8
 800fad2:	d0e4      	beq.n	800fa9e <__ieee754_atan2+0x7e>
 800fad4:	1a9b      	subs	r3, r3, r2
 800fad6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800fada:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fade:	da1e      	bge.n	800fb1e <__ieee754_atan2+0xfe>
 800fae0:	2f00      	cmp	r7, #0
 800fae2:	da01      	bge.n	800fae8 <__ieee754_atan2+0xc8>
 800fae4:	323c      	adds	r2, #60	@ 0x3c
 800fae6:	db1e      	blt.n	800fb26 <__ieee754_atan2+0x106>
 800fae8:	4632      	mov	r2, r6
 800faea:	463b      	mov	r3, r7
 800faec:	f7f0 feae 	bl	800084c <__aeabi_ddiv>
 800faf0:	ec41 0b10 	vmov	d0, r0, r1
 800faf4:	f000 fd04 	bl	8010500 <fabs>
 800faf8:	f000 fb6a 	bl	80101d0 <atan>
 800fafc:	ec51 0b10 	vmov	r0, r1, d0
 800fb00:	2c01      	cmp	r4, #1
 800fb02:	d013      	beq.n	800fb2c <__ieee754_atan2+0x10c>
 800fb04:	2c02      	cmp	r4, #2
 800fb06:	d015      	beq.n	800fb34 <__ieee754_atan2+0x114>
 800fb08:	2c00      	cmp	r4, #0
 800fb0a:	d0a8      	beq.n	800fa5e <__ieee754_atan2+0x3e>
 800fb0c:	a318      	add	r3, pc, #96	@ (adr r3, 800fb70 <__ieee754_atan2+0x150>)
 800fb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb12:	f7f0 fbb9 	bl	8000288 <__aeabi_dsub>
 800fb16:	a318      	add	r3, pc, #96	@ (adr r3, 800fb78 <__ieee754_atan2+0x158>)
 800fb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1c:	e014      	b.n	800fb48 <__ieee754_atan2+0x128>
 800fb1e:	a118      	add	r1, pc, #96	@ (adr r1, 800fb80 <__ieee754_atan2+0x160>)
 800fb20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb24:	e7ec      	b.n	800fb00 <__ieee754_atan2+0xe0>
 800fb26:	2000      	movs	r0, #0
 800fb28:	2100      	movs	r1, #0
 800fb2a:	e7e9      	b.n	800fb00 <__ieee754_atan2+0xe0>
 800fb2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fb30:	4619      	mov	r1, r3
 800fb32:	e794      	b.n	800fa5e <__ieee754_atan2+0x3e>
 800fb34:	a30e      	add	r3, pc, #56	@ (adr r3, 800fb70 <__ieee754_atan2+0x150>)
 800fb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3a:	f7f0 fba5 	bl	8000288 <__aeabi_dsub>
 800fb3e:	4602      	mov	r2, r0
 800fb40:	460b      	mov	r3, r1
 800fb42:	a10d      	add	r1, pc, #52	@ (adr r1, 800fb78 <__ieee754_atan2+0x158>)
 800fb44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb48:	f7f0 fb9e 	bl	8000288 <__aeabi_dsub>
 800fb4c:	e787      	b.n	800fa5e <__ieee754_atan2+0x3e>
 800fb4e:	a10a      	add	r1, pc, #40	@ (adr r1, 800fb78 <__ieee754_atan2+0x158>)
 800fb50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb54:	e783      	b.n	800fa5e <__ieee754_atan2+0x3e>
 800fb56:	a10c      	add	r1, pc, #48	@ (adr r1, 800fb88 <__ieee754_atan2+0x168>)
 800fb58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb5c:	e77f      	b.n	800fa5e <__ieee754_atan2+0x3e>
 800fb5e:	2000      	movs	r0, #0
 800fb60:	2100      	movs	r1, #0
 800fb62:	e77c      	b.n	800fa5e <__ieee754_atan2+0x3e>
 800fb64:	a106      	add	r1, pc, #24	@ (adr r1, 800fb80 <__ieee754_atan2+0x160>)
 800fb66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb6a:	e778      	b.n	800fa5e <__ieee754_atan2+0x3e>
 800fb6c:	f3af 8000 	nop.w
 800fb70:	33145c07 	.word	0x33145c07
 800fb74:	3ca1a626 	.word	0x3ca1a626
 800fb78:	54442d18 	.word	0x54442d18
 800fb7c:	400921fb 	.word	0x400921fb
 800fb80:	54442d18 	.word	0x54442d18
 800fb84:	3ff921fb 	.word	0x3ff921fb
 800fb88:	54442d18 	.word	0x54442d18
 800fb8c:	3fe921fb 	.word	0x3fe921fb
 800fb90:	080119d0 	.word	0x080119d0
 800fb94:	080119b8 	.word	0x080119b8
 800fb98:	54442d18 	.word	0x54442d18
 800fb9c:	c00921fb 	.word	0xc00921fb
 800fba0:	54442d18 	.word	0x54442d18
 800fba4:	bff921fb 	.word	0xbff921fb
 800fba8:	7ff00000 	.word	0x7ff00000

0800fbac <__ieee754_hypot>:
 800fbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb0:	ec51 0b10 	vmov	r0, r1, d0
 800fbb4:	ec53 2b11 	vmov	r2, r3, d1
 800fbb8:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800fbbc:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800fbc0:	42a5      	cmp	r5, r4
 800fbc2:	b087      	sub	sp, #28
 800fbc4:	da05      	bge.n	800fbd2 <__ieee754_hypot+0x26>
 800fbc6:	462e      	mov	r6, r5
 800fbc8:	4625      	mov	r5, r4
 800fbca:	4634      	mov	r4, r6
 800fbcc:	4606      	mov	r6, r0
 800fbce:	4610      	mov	r0, r2
 800fbd0:	4632      	mov	r2, r6
 800fbd2:	1b2b      	subs	r3, r5, r4
 800fbd4:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800fbd8:	4629      	mov	r1, r5
 800fbda:	4682      	mov	sl, r0
 800fbdc:	46ab      	mov	fp, r5
 800fbde:	4616      	mov	r6, r2
 800fbe0:	4627      	mov	r7, r4
 800fbe2:	dd05      	ble.n	800fbf0 <__ieee754_hypot+0x44>
 800fbe4:	4623      	mov	r3, r4
 800fbe6:	f7f0 fb51 	bl	800028c <__adddf3>
 800fbea:	4682      	mov	sl, r0
 800fbec:	468b      	mov	fp, r1
 800fbee:	e016      	b.n	800fc1e <__ieee754_hypot+0x72>
 800fbf0:	4b75      	ldr	r3, [pc, #468]	@ (800fdc8 <__ieee754_hypot+0x21c>)
 800fbf2:	429d      	cmp	r5, r3
 800fbf4:	f340 8096 	ble.w	800fd24 <__ieee754_hypot+0x178>
 800fbf8:	4b74      	ldr	r3, [pc, #464]	@ (800fdcc <__ieee754_hypot+0x220>)
 800fbfa:	429d      	cmp	r5, r3
 800fbfc:	dd14      	ble.n	800fc28 <__ieee754_hypot+0x7c>
 800fbfe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800fc02:	4305      	orrs	r5, r0
 800fc04:	d004      	beq.n	800fc10 <__ieee754_hypot+0x64>
 800fc06:	4623      	mov	r3, r4
 800fc08:	f7f0 fb40 	bl	800028c <__adddf3>
 800fc0c:	4682      	mov	sl, r0
 800fc0e:	468b      	mov	fp, r1
 800fc10:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800fc14:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800fc18:	4334      	orrs	r4, r6
 800fc1a:	f000 80d2 	beq.w	800fdc2 <__ieee754_hypot+0x216>
 800fc1e:	ec4b ab10 	vmov	d0, sl, fp
 800fc22:	b007      	add	sp, #28
 800fc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc28:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800fc2c:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800fc30:	46ab      	mov	fp, r5
 800fc32:	4627      	mov	r7, r4
 800fc34:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800fc38:	9301      	str	r3, [sp, #4]
 800fc3a:	4b65      	ldr	r3, [pc, #404]	@ (800fdd0 <__ieee754_hypot+0x224>)
 800fc3c:	429c      	cmp	r4, r3
 800fc3e:	dc19      	bgt.n	800fc74 <__ieee754_hypot+0xc8>
 800fc40:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800fc44:	da70      	bge.n	800fd28 <__ieee754_hypot+0x17c>
 800fc46:	4633      	mov	r3, r6
 800fc48:	4323      	orrs	r3, r4
 800fc4a:	d0e8      	beq.n	800fc1e <__ieee754_hypot+0x72>
 800fc4c:	4b61      	ldr	r3, [pc, #388]	@ (800fdd4 <__ieee754_hypot+0x228>)
 800fc4e:	2200      	movs	r2, #0
 800fc50:	4630      	mov	r0, r6
 800fc52:	4639      	mov	r1, r7
 800fc54:	f7f0 fcd0 	bl	80005f8 <__aeabi_dmul>
 800fc58:	4b5e      	ldr	r3, [pc, #376]	@ (800fdd4 <__ieee754_hypot+0x228>)
 800fc5a:	4606      	mov	r6, r0
 800fc5c:	460f      	mov	r7, r1
 800fc5e:	4650      	mov	r0, sl
 800fc60:	4659      	mov	r1, fp
 800fc62:	2200      	movs	r2, #0
 800fc64:	f7f0 fcc8 	bl	80005f8 <__aeabi_dmul>
 800fc68:	9b01      	ldr	r3, [sp, #4]
 800fc6a:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800fc6e:	4682      	mov	sl, r0
 800fc70:	468b      	mov	fp, r1
 800fc72:	9301      	str	r3, [sp, #4]
 800fc74:	4632      	mov	r2, r6
 800fc76:	463b      	mov	r3, r7
 800fc78:	4650      	mov	r0, sl
 800fc7a:	4659      	mov	r1, fp
 800fc7c:	f7f0 fb04 	bl	8000288 <__aeabi_dsub>
 800fc80:	4602      	mov	r2, r0
 800fc82:	460b      	mov	r3, r1
 800fc84:	4680      	mov	r8, r0
 800fc86:	4689      	mov	r9, r1
 800fc88:	4630      	mov	r0, r6
 800fc8a:	4639      	mov	r1, r7
 800fc8c:	f7f0 ff26 	bl	8000adc <__aeabi_dcmplt>
 800fc90:	2200      	movs	r2, #0
 800fc92:	2800      	cmp	r0, #0
 800fc94:	d053      	beq.n	800fd3e <__ieee754_hypot+0x192>
 800fc96:	462b      	mov	r3, r5
 800fc98:	4610      	mov	r0, r2
 800fc9a:	4629      	mov	r1, r5
 800fc9c:	4614      	mov	r4, r2
 800fc9e:	f7f0 fcab 	bl	80005f8 <__aeabi_dmul>
 800fca2:	4632      	mov	r2, r6
 800fca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fca8:	463b      	mov	r3, r7
 800fcaa:	4630      	mov	r0, r6
 800fcac:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800fcb0:	f7f0 fca2 	bl	80005f8 <__aeabi_dmul>
 800fcb4:	4622      	mov	r2, r4
 800fcb6:	4606      	mov	r6, r0
 800fcb8:	460f      	mov	r7, r1
 800fcba:	462b      	mov	r3, r5
 800fcbc:	4650      	mov	r0, sl
 800fcbe:	4659      	mov	r1, fp
 800fcc0:	f7f0 fae4 	bl	800028c <__adddf3>
 800fcc4:	4622      	mov	r2, r4
 800fcc6:	4680      	mov	r8, r0
 800fcc8:	4689      	mov	r9, r1
 800fcca:	462b      	mov	r3, r5
 800fccc:	4650      	mov	r0, sl
 800fcce:	4659      	mov	r1, fp
 800fcd0:	f7f0 fada 	bl	8000288 <__aeabi_dsub>
 800fcd4:	4602      	mov	r2, r0
 800fcd6:	460b      	mov	r3, r1
 800fcd8:	4640      	mov	r0, r8
 800fcda:	4649      	mov	r1, r9
 800fcdc:	f7f0 fc8c 	bl	80005f8 <__aeabi_dmul>
 800fce0:	4602      	mov	r2, r0
 800fce2:	460b      	mov	r3, r1
 800fce4:	4630      	mov	r0, r6
 800fce6:	4639      	mov	r1, r7
 800fce8:	f7f0 face 	bl	8000288 <__aeabi_dsub>
 800fcec:	4602      	mov	r2, r0
 800fcee:	460b      	mov	r3, r1
 800fcf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcf4:	f7f0 fac8 	bl	8000288 <__aeabi_dsub>
 800fcf8:	ec41 0b10 	vmov	d0, r0, r1
 800fcfc:	f7ff fc32 	bl	800f564 <__ieee754_sqrt>
 800fd00:	9b01      	ldr	r3, [sp, #4]
 800fd02:	ec5b ab10 	vmov	sl, fp, d0
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d089      	beq.n	800fc1e <__ieee754_hypot+0x72>
 800fd0a:	051b      	lsls	r3, r3, #20
 800fd0c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800fd10:	2000      	movs	r0, #0
 800fd12:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800fd16:	4602      	mov	r2, r0
 800fd18:	460b      	mov	r3, r1
 800fd1a:	4650      	mov	r0, sl
 800fd1c:	4659      	mov	r1, fp
 800fd1e:	f7f0 fc6b 	bl	80005f8 <__aeabi_dmul>
 800fd22:	e762      	b.n	800fbea <__ieee754_hypot+0x3e>
 800fd24:	2300      	movs	r3, #0
 800fd26:	e787      	b.n	800fc38 <__ieee754_hypot+0x8c>
 800fd28:	9b01      	ldr	r3, [sp, #4]
 800fd2a:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800fd2e:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800fd32:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800fd36:	9301      	str	r3, [sp, #4]
 800fd38:	46ab      	mov	fp, r5
 800fd3a:	4627      	mov	r7, r4
 800fd3c:	e79a      	b.n	800fc74 <__ieee754_hypot+0xc8>
 800fd3e:	4623      	mov	r3, r4
 800fd40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fd44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800fd4e:	4614      	mov	r4, r2
 800fd50:	461d      	mov	r5, r3
 800fd52:	f7f0 fc51 	bl	80005f8 <__aeabi_dmul>
 800fd56:	4642      	mov	r2, r8
 800fd58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd5c:	464b      	mov	r3, r9
 800fd5e:	4640      	mov	r0, r8
 800fd60:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800fd64:	f7f0 fc48 	bl	80005f8 <__aeabi_dmul>
 800fd68:	4652      	mov	r2, sl
 800fd6a:	465b      	mov	r3, fp
 800fd6c:	4680      	mov	r8, r0
 800fd6e:	4689      	mov	r9, r1
 800fd70:	4650      	mov	r0, sl
 800fd72:	4659      	mov	r1, fp
 800fd74:	f7f0 fa8a 	bl	800028c <__adddf3>
 800fd78:	4622      	mov	r2, r4
 800fd7a:	462b      	mov	r3, r5
 800fd7c:	f7f0 fa84 	bl	8000288 <__aeabi_dsub>
 800fd80:	4632      	mov	r2, r6
 800fd82:	463b      	mov	r3, r7
 800fd84:	f7f0 fc38 	bl	80005f8 <__aeabi_dmul>
 800fd88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd8c:	4682      	mov	sl, r0
 800fd8e:	468b      	mov	fp, r1
 800fd90:	4630      	mov	r0, r6
 800fd92:	4639      	mov	r1, r7
 800fd94:	f7f0 fa78 	bl	8000288 <__aeabi_dsub>
 800fd98:	4622      	mov	r2, r4
 800fd9a:	462b      	mov	r3, r5
 800fd9c:	f7f0 fc2c 	bl	80005f8 <__aeabi_dmul>
 800fda0:	4602      	mov	r2, r0
 800fda2:	460b      	mov	r3, r1
 800fda4:	4650      	mov	r0, sl
 800fda6:	4659      	mov	r1, fp
 800fda8:	f7f0 fa70 	bl	800028c <__adddf3>
 800fdac:	4602      	mov	r2, r0
 800fdae:	460b      	mov	r3, r1
 800fdb0:	4640      	mov	r0, r8
 800fdb2:	4649      	mov	r1, r9
 800fdb4:	f7f0 fa68 	bl	8000288 <__aeabi_dsub>
 800fdb8:	4602      	mov	r2, r0
 800fdba:	460b      	mov	r3, r1
 800fdbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fdc0:	e798      	b.n	800fcf4 <__ieee754_hypot+0x148>
 800fdc2:	46b2      	mov	sl, r6
 800fdc4:	46bb      	mov	fp, r7
 800fdc6:	e72a      	b.n	800fc1e <__ieee754_hypot+0x72>
 800fdc8:	5f300000 	.word	0x5f300000
 800fdcc:	7fefffff 	.word	0x7fefffff
 800fdd0:	20afffff 	.word	0x20afffff
 800fdd4:	7fd00000 	.word	0x7fd00000

0800fdd8 <__ieee754_rem_pio2>:
 800fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	ec57 6b10 	vmov	r6, r7, d0
 800fde0:	4bc5      	ldr	r3, [pc, #788]	@ (80100f8 <__ieee754_rem_pio2+0x320>)
 800fde2:	b08d      	sub	sp, #52	@ 0x34
 800fde4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fde8:	4598      	cmp	r8, r3
 800fdea:	4604      	mov	r4, r0
 800fdec:	9704      	str	r7, [sp, #16]
 800fdee:	d807      	bhi.n	800fe00 <__ieee754_rem_pio2+0x28>
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	ed80 0b00 	vstr	d0, [r0]
 800fdf8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fdfc:	2500      	movs	r5, #0
 800fdfe:	e028      	b.n	800fe52 <__ieee754_rem_pio2+0x7a>
 800fe00:	4bbe      	ldr	r3, [pc, #760]	@ (80100fc <__ieee754_rem_pio2+0x324>)
 800fe02:	4598      	cmp	r8, r3
 800fe04:	d878      	bhi.n	800fef8 <__ieee754_rem_pio2+0x120>
 800fe06:	9b04      	ldr	r3, [sp, #16]
 800fe08:	4dbd      	ldr	r5, [pc, #756]	@ (8010100 <__ieee754_rem_pio2+0x328>)
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	4630      	mov	r0, r6
 800fe0e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80100c0 <__ieee754_rem_pio2+0x2e8>)
 800fe10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe14:	4639      	mov	r1, r7
 800fe16:	dd38      	ble.n	800fe8a <__ieee754_rem_pio2+0xb2>
 800fe18:	f7f0 fa36 	bl	8000288 <__aeabi_dsub>
 800fe1c:	45a8      	cmp	r8, r5
 800fe1e:	4606      	mov	r6, r0
 800fe20:	460f      	mov	r7, r1
 800fe22:	d01a      	beq.n	800fe5a <__ieee754_rem_pio2+0x82>
 800fe24:	a3a8      	add	r3, pc, #672	@ (adr r3, 80100c8 <__ieee754_rem_pio2+0x2f0>)
 800fe26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2a:	f7f0 fa2d 	bl	8000288 <__aeabi_dsub>
 800fe2e:	4602      	mov	r2, r0
 800fe30:	460b      	mov	r3, r1
 800fe32:	4680      	mov	r8, r0
 800fe34:	4689      	mov	r9, r1
 800fe36:	4630      	mov	r0, r6
 800fe38:	4639      	mov	r1, r7
 800fe3a:	f7f0 fa25 	bl	8000288 <__aeabi_dsub>
 800fe3e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80100c8 <__ieee754_rem_pio2+0x2f0>)
 800fe40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe44:	f7f0 fa20 	bl	8000288 <__aeabi_dsub>
 800fe48:	e9c4 8900 	strd	r8, r9, [r4]
 800fe4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fe50:	2501      	movs	r5, #1
 800fe52:	4628      	mov	r0, r5
 800fe54:	b00d      	add	sp, #52	@ 0x34
 800fe56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe5a:	a39d      	add	r3, pc, #628	@ (adr r3, 80100d0 <__ieee754_rem_pio2+0x2f8>)
 800fe5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe60:	f7f0 fa12 	bl	8000288 <__aeabi_dsub>
 800fe64:	a39c      	add	r3, pc, #624	@ (adr r3, 80100d8 <__ieee754_rem_pio2+0x300>)
 800fe66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe6a:	4606      	mov	r6, r0
 800fe6c:	460f      	mov	r7, r1
 800fe6e:	f7f0 fa0b 	bl	8000288 <__aeabi_dsub>
 800fe72:	4602      	mov	r2, r0
 800fe74:	460b      	mov	r3, r1
 800fe76:	4680      	mov	r8, r0
 800fe78:	4689      	mov	r9, r1
 800fe7a:	4630      	mov	r0, r6
 800fe7c:	4639      	mov	r1, r7
 800fe7e:	f7f0 fa03 	bl	8000288 <__aeabi_dsub>
 800fe82:	a395      	add	r3, pc, #596	@ (adr r3, 80100d8 <__ieee754_rem_pio2+0x300>)
 800fe84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe88:	e7dc      	b.n	800fe44 <__ieee754_rem_pio2+0x6c>
 800fe8a:	f7f0 f9ff 	bl	800028c <__adddf3>
 800fe8e:	45a8      	cmp	r8, r5
 800fe90:	4606      	mov	r6, r0
 800fe92:	460f      	mov	r7, r1
 800fe94:	d018      	beq.n	800fec8 <__ieee754_rem_pio2+0xf0>
 800fe96:	a38c      	add	r3, pc, #560	@ (adr r3, 80100c8 <__ieee754_rem_pio2+0x2f0>)
 800fe98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9c:	f7f0 f9f6 	bl	800028c <__adddf3>
 800fea0:	4602      	mov	r2, r0
 800fea2:	460b      	mov	r3, r1
 800fea4:	4680      	mov	r8, r0
 800fea6:	4689      	mov	r9, r1
 800fea8:	4630      	mov	r0, r6
 800feaa:	4639      	mov	r1, r7
 800feac:	f7f0 f9ec 	bl	8000288 <__aeabi_dsub>
 800feb0:	a385      	add	r3, pc, #532	@ (adr r3, 80100c8 <__ieee754_rem_pio2+0x2f0>)
 800feb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb6:	f7f0 f9e9 	bl	800028c <__adddf3>
 800feba:	f04f 35ff 	mov.w	r5, #4294967295
 800febe:	e9c4 8900 	strd	r8, r9, [r4]
 800fec2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fec6:	e7c4      	b.n	800fe52 <__ieee754_rem_pio2+0x7a>
 800fec8:	a381      	add	r3, pc, #516	@ (adr r3, 80100d0 <__ieee754_rem_pio2+0x2f8>)
 800feca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fece:	f7f0 f9dd 	bl	800028c <__adddf3>
 800fed2:	a381      	add	r3, pc, #516	@ (adr r3, 80100d8 <__ieee754_rem_pio2+0x300>)
 800fed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed8:	4606      	mov	r6, r0
 800feda:	460f      	mov	r7, r1
 800fedc:	f7f0 f9d6 	bl	800028c <__adddf3>
 800fee0:	4602      	mov	r2, r0
 800fee2:	460b      	mov	r3, r1
 800fee4:	4680      	mov	r8, r0
 800fee6:	4689      	mov	r9, r1
 800fee8:	4630      	mov	r0, r6
 800feea:	4639      	mov	r1, r7
 800feec:	f7f0 f9cc 	bl	8000288 <__aeabi_dsub>
 800fef0:	a379      	add	r3, pc, #484	@ (adr r3, 80100d8 <__ieee754_rem_pio2+0x300>)
 800fef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef6:	e7de      	b.n	800feb6 <__ieee754_rem_pio2+0xde>
 800fef8:	4b82      	ldr	r3, [pc, #520]	@ (8010104 <__ieee754_rem_pio2+0x32c>)
 800fefa:	4598      	cmp	r8, r3
 800fefc:	f200 80d1 	bhi.w	80100a2 <__ieee754_rem_pio2+0x2ca>
 800ff00:	f000 fafe 	bl	8010500 <fabs>
 800ff04:	ec57 6b10 	vmov	r6, r7, d0
 800ff08:	a375      	add	r3, pc, #468	@ (adr r3, 80100e0 <__ieee754_rem_pio2+0x308>)
 800ff0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0e:	4630      	mov	r0, r6
 800ff10:	4639      	mov	r1, r7
 800ff12:	f7f0 fb71 	bl	80005f8 <__aeabi_dmul>
 800ff16:	4b7c      	ldr	r3, [pc, #496]	@ (8010108 <__ieee754_rem_pio2+0x330>)
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f7f0 f9b7 	bl	800028c <__adddf3>
 800ff1e:	f7f0 fe1b 	bl	8000b58 <__aeabi_d2iz>
 800ff22:	4605      	mov	r5, r0
 800ff24:	f7f0 fafe 	bl	8000524 <__aeabi_i2d>
 800ff28:	4602      	mov	r2, r0
 800ff2a:	460b      	mov	r3, r1
 800ff2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ff30:	a363      	add	r3, pc, #396	@ (adr r3, 80100c0 <__ieee754_rem_pio2+0x2e8>)
 800ff32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff36:	f7f0 fb5f 	bl	80005f8 <__aeabi_dmul>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	4630      	mov	r0, r6
 800ff40:	4639      	mov	r1, r7
 800ff42:	f7f0 f9a1 	bl	8000288 <__aeabi_dsub>
 800ff46:	a360      	add	r3, pc, #384	@ (adr r3, 80100c8 <__ieee754_rem_pio2+0x2f0>)
 800ff48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4c:	4682      	mov	sl, r0
 800ff4e:	468b      	mov	fp, r1
 800ff50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff54:	f7f0 fb50 	bl	80005f8 <__aeabi_dmul>
 800ff58:	2d1f      	cmp	r5, #31
 800ff5a:	4606      	mov	r6, r0
 800ff5c:	460f      	mov	r7, r1
 800ff5e:	dc0c      	bgt.n	800ff7a <__ieee754_rem_pio2+0x1a2>
 800ff60:	4b6a      	ldr	r3, [pc, #424]	@ (801010c <__ieee754_rem_pio2+0x334>)
 800ff62:	1e6a      	subs	r2, r5, #1
 800ff64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff68:	4543      	cmp	r3, r8
 800ff6a:	d006      	beq.n	800ff7a <__ieee754_rem_pio2+0x1a2>
 800ff6c:	4632      	mov	r2, r6
 800ff6e:	463b      	mov	r3, r7
 800ff70:	4650      	mov	r0, sl
 800ff72:	4659      	mov	r1, fp
 800ff74:	f7f0 f988 	bl	8000288 <__aeabi_dsub>
 800ff78:	e00e      	b.n	800ff98 <__ieee754_rem_pio2+0x1c0>
 800ff7a:	463b      	mov	r3, r7
 800ff7c:	4632      	mov	r2, r6
 800ff7e:	4650      	mov	r0, sl
 800ff80:	4659      	mov	r1, fp
 800ff82:	f7f0 f981 	bl	8000288 <__aeabi_dsub>
 800ff86:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ff8a:	9305      	str	r3, [sp, #20]
 800ff8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ff90:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ff94:	2b10      	cmp	r3, #16
 800ff96:	dc02      	bgt.n	800ff9e <__ieee754_rem_pio2+0x1c6>
 800ff98:	e9c4 0100 	strd	r0, r1, [r4]
 800ff9c:	e039      	b.n	8010012 <__ieee754_rem_pio2+0x23a>
 800ff9e:	a34c      	add	r3, pc, #304	@ (adr r3, 80100d0 <__ieee754_rem_pio2+0x2f8>)
 800ffa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffa8:	f7f0 fb26 	bl	80005f8 <__aeabi_dmul>
 800ffac:	4606      	mov	r6, r0
 800ffae:	460f      	mov	r7, r1
 800ffb0:	4602      	mov	r2, r0
 800ffb2:	460b      	mov	r3, r1
 800ffb4:	4650      	mov	r0, sl
 800ffb6:	4659      	mov	r1, fp
 800ffb8:	f7f0 f966 	bl	8000288 <__aeabi_dsub>
 800ffbc:	4602      	mov	r2, r0
 800ffbe:	460b      	mov	r3, r1
 800ffc0:	4680      	mov	r8, r0
 800ffc2:	4689      	mov	r9, r1
 800ffc4:	4650      	mov	r0, sl
 800ffc6:	4659      	mov	r1, fp
 800ffc8:	f7f0 f95e 	bl	8000288 <__aeabi_dsub>
 800ffcc:	4632      	mov	r2, r6
 800ffce:	463b      	mov	r3, r7
 800ffd0:	f7f0 f95a 	bl	8000288 <__aeabi_dsub>
 800ffd4:	a340      	add	r3, pc, #256	@ (adr r3, 80100d8 <__ieee754_rem_pio2+0x300>)
 800ffd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffda:	4606      	mov	r6, r0
 800ffdc:	460f      	mov	r7, r1
 800ffde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffe2:	f7f0 fb09 	bl	80005f8 <__aeabi_dmul>
 800ffe6:	4632      	mov	r2, r6
 800ffe8:	463b      	mov	r3, r7
 800ffea:	f7f0 f94d 	bl	8000288 <__aeabi_dsub>
 800ffee:	4602      	mov	r2, r0
 800fff0:	460b      	mov	r3, r1
 800fff2:	4606      	mov	r6, r0
 800fff4:	460f      	mov	r7, r1
 800fff6:	4640      	mov	r0, r8
 800fff8:	4649      	mov	r1, r9
 800fffa:	f7f0 f945 	bl	8000288 <__aeabi_dsub>
 800fffe:	9a05      	ldr	r2, [sp, #20]
 8010000:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	2b31      	cmp	r3, #49	@ 0x31
 8010008:	dc20      	bgt.n	801004c <__ieee754_rem_pio2+0x274>
 801000a:	e9c4 0100 	strd	r0, r1, [r4]
 801000e:	46c2      	mov	sl, r8
 8010010:	46cb      	mov	fp, r9
 8010012:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010016:	4650      	mov	r0, sl
 8010018:	4642      	mov	r2, r8
 801001a:	464b      	mov	r3, r9
 801001c:	4659      	mov	r1, fp
 801001e:	f7f0 f933 	bl	8000288 <__aeabi_dsub>
 8010022:	463b      	mov	r3, r7
 8010024:	4632      	mov	r2, r6
 8010026:	f7f0 f92f 	bl	8000288 <__aeabi_dsub>
 801002a:	9b04      	ldr	r3, [sp, #16]
 801002c:	2b00      	cmp	r3, #0
 801002e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010032:	f6bf af0e 	bge.w	800fe52 <__ieee754_rem_pio2+0x7a>
 8010036:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801003a:	6063      	str	r3, [r4, #4]
 801003c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010040:	f8c4 8000 	str.w	r8, [r4]
 8010044:	60a0      	str	r0, [r4, #8]
 8010046:	60e3      	str	r3, [r4, #12]
 8010048:	426d      	negs	r5, r5
 801004a:	e702      	b.n	800fe52 <__ieee754_rem_pio2+0x7a>
 801004c:	a326      	add	r3, pc, #152	@ (adr r3, 80100e8 <__ieee754_rem_pio2+0x310>)
 801004e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010056:	f7f0 facf 	bl	80005f8 <__aeabi_dmul>
 801005a:	4606      	mov	r6, r0
 801005c:	460f      	mov	r7, r1
 801005e:	4602      	mov	r2, r0
 8010060:	460b      	mov	r3, r1
 8010062:	4640      	mov	r0, r8
 8010064:	4649      	mov	r1, r9
 8010066:	f7f0 f90f 	bl	8000288 <__aeabi_dsub>
 801006a:	4602      	mov	r2, r0
 801006c:	460b      	mov	r3, r1
 801006e:	4682      	mov	sl, r0
 8010070:	468b      	mov	fp, r1
 8010072:	4640      	mov	r0, r8
 8010074:	4649      	mov	r1, r9
 8010076:	f7f0 f907 	bl	8000288 <__aeabi_dsub>
 801007a:	4632      	mov	r2, r6
 801007c:	463b      	mov	r3, r7
 801007e:	f7f0 f903 	bl	8000288 <__aeabi_dsub>
 8010082:	a31b      	add	r3, pc, #108	@ (adr r3, 80100f0 <__ieee754_rem_pio2+0x318>)
 8010084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010088:	4606      	mov	r6, r0
 801008a:	460f      	mov	r7, r1
 801008c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010090:	f7f0 fab2 	bl	80005f8 <__aeabi_dmul>
 8010094:	4632      	mov	r2, r6
 8010096:	463b      	mov	r3, r7
 8010098:	f7f0 f8f6 	bl	8000288 <__aeabi_dsub>
 801009c:	4606      	mov	r6, r0
 801009e:	460f      	mov	r7, r1
 80100a0:	e764      	b.n	800ff6c <__ieee754_rem_pio2+0x194>
 80100a2:	4b1b      	ldr	r3, [pc, #108]	@ (8010110 <__ieee754_rem_pio2+0x338>)
 80100a4:	4598      	cmp	r8, r3
 80100a6:	d935      	bls.n	8010114 <__ieee754_rem_pio2+0x33c>
 80100a8:	4632      	mov	r2, r6
 80100aa:	463b      	mov	r3, r7
 80100ac:	4630      	mov	r0, r6
 80100ae:	4639      	mov	r1, r7
 80100b0:	f7f0 f8ea 	bl	8000288 <__aeabi_dsub>
 80100b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80100b8:	e9c4 0100 	strd	r0, r1, [r4]
 80100bc:	e69e      	b.n	800fdfc <__ieee754_rem_pio2+0x24>
 80100be:	bf00      	nop
 80100c0:	54400000 	.word	0x54400000
 80100c4:	3ff921fb 	.word	0x3ff921fb
 80100c8:	1a626331 	.word	0x1a626331
 80100cc:	3dd0b461 	.word	0x3dd0b461
 80100d0:	1a600000 	.word	0x1a600000
 80100d4:	3dd0b461 	.word	0x3dd0b461
 80100d8:	2e037073 	.word	0x2e037073
 80100dc:	3ba3198a 	.word	0x3ba3198a
 80100e0:	6dc9c883 	.word	0x6dc9c883
 80100e4:	3fe45f30 	.word	0x3fe45f30
 80100e8:	2e000000 	.word	0x2e000000
 80100ec:	3ba3198a 	.word	0x3ba3198a
 80100f0:	252049c1 	.word	0x252049c1
 80100f4:	397b839a 	.word	0x397b839a
 80100f8:	3fe921fb 	.word	0x3fe921fb
 80100fc:	4002d97b 	.word	0x4002d97b
 8010100:	3ff921fb 	.word	0x3ff921fb
 8010104:	413921fb 	.word	0x413921fb
 8010108:	3fe00000 	.word	0x3fe00000
 801010c:	080119e8 	.word	0x080119e8
 8010110:	7fefffff 	.word	0x7fefffff
 8010114:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010118:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801011c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010120:	4630      	mov	r0, r6
 8010122:	460f      	mov	r7, r1
 8010124:	f7f0 fd18 	bl	8000b58 <__aeabi_d2iz>
 8010128:	f7f0 f9fc 	bl	8000524 <__aeabi_i2d>
 801012c:	4602      	mov	r2, r0
 801012e:	460b      	mov	r3, r1
 8010130:	4630      	mov	r0, r6
 8010132:	4639      	mov	r1, r7
 8010134:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010138:	f7f0 f8a6 	bl	8000288 <__aeabi_dsub>
 801013c:	4b22      	ldr	r3, [pc, #136]	@ (80101c8 <__ieee754_rem_pio2+0x3f0>)
 801013e:	2200      	movs	r2, #0
 8010140:	f7f0 fa5a 	bl	80005f8 <__aeabi_dmul>
 8010144:	460f      	mov	r7, r1
 8010146:	4606      	mov	r6, r0
 8010148:	f7f0 fd06 	bl	8000b58 <__aeabi_d2iz>
 801014c:	f7f0 f9ea 	bl	8000524 <__aeabi_i2d>
 8010150:	4602      	mov	r2, r0
 8010152:	460b      	mov	r3, r1
 8010154:	4630      	mov	r0, r6
 8010156:	4639      	mov	r1, r7
 8010158:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801015c:	f7f0 f894 	bl	8000288 <__aeabi_dsub>
 8010160:	4b19      	ldr	r3, [pc, #100]	@ (80101c8 <__ieee754_rem_pio2+0x3f0>)
 8010162:	2200      	movs	r2, #0
 8010164:	f7f0 fa48 	bl	80005f8 <__aeabi_dmul>
 8010168:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801016c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010170:	f04f 0803 	mov.w	r8, #3
 8010174:	2600      	movs	r6, #0
 8010176:	2700      	movs	r7, #0
 8010178:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801017c:	4632      	mov	r2, r6
 801017e:	463b      	mov	r3, r7
 8010180:	46c2      	mov	sl, r8
 8010182:	f108 38ff 	add.w	r8, r8, #4294967295
 8010186:	f7f0 fc9f 	bl	8000ac8 <__aeabi_dcmpeq>
 801018a:	2800      	cmp	r0, #0
 801018c:	d1f4      	bne.n	8010178 <__ieee754_rem_pio2+0x3a0>
 801018e:	4b0f      	ldr	r3, [pc, #60]	@ (80101cc <__ieee754_rem_pio2+0x3f4>)
 8010190:	9301      	str	r3, [sp, #4]
 8010192:	2302      	movs	r3, #2
 8010194:	9300      	str	r3, [sp, #0]
 8010196:	462a      	mov	r2, r5
 8010198:	4653      	mov	r3, sl
 801019a:	4621      	mov	r1, r4
 801019c:	a806      	add	r0, sp, #24
 801019e:	f000 f9b7 	bl	8010510 <__kernel_rem_pio2>
 80101a2:	9b04      	ldr	r3, [sp, #16]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	4605      	mov	r5, r0
 80101a8:	f6bf ae53 	bge.w	800fe52 <__ieee754_rem_pio2+0x7a>
 80101ac:	e9d4 2100 	ldrd	r2, r1, [r4]
 80101b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80101b4:	e9c4 2300 	strd	r2, r3, [r4]
 80101b8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80101bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80101c0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80101c4:	e740      	b.n	8010048 <__ieee754_rem_pio2+0x270>
 80101c6:	bf00      	nop
 80101c8:	41700000 	.word	0x41700000
 80101cc:	08011a68 	.word	0x08011a68

080101d0 <atan>:
 80101d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d4:	ec55 4b10 	vmov	r4, r5, d0
 80101d8:	4bbf      	ldr	r3, [pc, #764]	@ (80104d8 <atan+0x308>)
 80101da:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80101de:	429e      	cmp	r6, r3
 80101e0:	46ab      	mov	fp, r5
 80101e2:	d918      	bls.n	8010216 <atan+0x46>
 80101e4:	4bbd      	ldr	r3, [pc, #756]	@ (80104dc <atan+0x30c>)
 80101e6:	429e      	cmp	r6, r3
 80101e8:	d801      	bhi.n	80101ee <atan+0x1e>
 80101ea:	d109      	bne.n	8010200 <atan+0x30>
 80101ec:	b144      	cbz	r4, 8010200 <atan+0x30>
 80101ee:	4622      	mov	r2, r4
 80101f0:	462b      	mov	r3, r5
 80101f2:	4620      	mov	r0, r4
 80101f4:	4629      	mov	r1, r5
 80101f6:	f7f0 f849 	bl	800028c <__adddf3>
 80101fa:	4604      	mov	r4, r0
 80101fc:	460d      	mov	r5, r1
 80101fe:	e006      	b.n	801020e <atan+0x3e>
 8010200:	f1bb 0f00 	cmp.w	fp, #0
 8010204:	f340 812b 	ble.w	801045e <atan+0x28e>
 8010208:	a597      	add	r5, pc, #604	@ (adr r5, 8010468 <atan+0x298>)
 801020a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801020e:	ec45 4b10 	vmov	d0, r4, r5
 8010212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010216:	4bb2      	ldr	r3, [pc, #712]	@ (80104e0 <atan+0x310>)
 8010218:	429e      	cmp	r6, r3
 801021a:	d813      	bhi.n	8010244 <atan+0x74>
 801021c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010220:	429e      	cmp	r6, r3
 8010222:	d80c      	bhi.n	801023e <atan+0x6e>
 8010224:	a392      	add	r3, pc, #584	@ (adr r3, 8010470 <atan+0x2a0>)
 8010226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022a:	4620      	mov	r0, r4
 801022c:	4629      	mov	r1, r5
 801022e:	f7f0 f82d 	bl	800028c <__adddf3>
 8010232:	4bac      	ldr	r3, [pc, #688]	@ (80104e4 <atan+0x314>)
 8010234:	2200      	movs	r2, #0
 8010236:	f7f0 fc6f 	bl	8000b18 <__aeabi_dcmpgt>
 801023a:	2800      	cmp	r0, #0
 801023c:	d1e7      	bne.n	801020e <atan+0x3e>
 801023e:	f04f 3aff 	mov.w	sl, #4294967295
 8010242:	e029      	b.n	8010298 <atan+0xc8>
 8010244:	f000 f95c 	bl	8010500 <fabs>
 8010248:	4ba7      	ldr	r3, [pc, #668]	@ (80104e8 <atan+0x318>)
 801024a:	429e      	cmp	r6, r3
 801024c:	ec55 4b10 	vmov	r4, r5, d0
 8010250:	f200 80bc 	bhi.w	80103cc <atan+0x1fc>
 8010254:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010258:	429e      	cmp	r6, r3
 801025a:	f200 809e 	bhi.w	801039a <atan+0x1ca>
 801025e:	4622      	mov	r2, r4
 8010260:	462b      	mov	r3, r5
 8010262:	4620      	mov	r0, r4
 8010264:	4629      	mov	r1, r5
 8010266:	f7f0 f811 	bl	800028c <__adddf3>
 801026a:	4b9e      	ldr	r3, [pc, #632]	@ (80104e4 <atan+0x314>)
 801026c:	2200      	movs	r2, #0
 801026e:	f7f0 f80b 	bl	8000288 <__aeabi_dsub>
 8010272:	2200      	movs	r2, #0
 8010274:	4606      	mov	r6, r0
 8010276:	460f      	mov	r7, r1
 8010278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801027c:	4620      	mov	r0, r4
 801027e:	4629      	mov	r1, r5
 8010280:	f7f0 f804 	bl	800028c <__adddf3>
 8010284:	4602      	mov	r2, r0
 8010286:	460b      	mov	r3, r1
 8010288:	4630      	mov	r0, r6
 801028a:	4639      	mov	r1, r7
 801028c:	f7f0 fade 	bl	800084c <__aeabi_ddiv>
 8010290:	f04f 0a00 	mov.w	sl, #0
 8010294:	4604      	mov	r4, r0
 8010296:	460d      	mov	r5, r1
 8010298:	4622      	mov	r2, r4
 801029a:	462b      	mov	r3, r5
 801029c:	4620      	mov	r0, r4
 801029e:	4629      	mov	r1, r5
 80102a0:	f7f0 f9aa 	bl	80005f8 <__aeabi_dmul>
 80102a4:	4602      	mov	r2, r0
 80102a6:	460b      	mov	r3, r1
 80102a8:	4680      	mov	r8, r0
 80102aa:	4689      	mov	r9, r1
 80102ac:	f7f0 f9a4 	bl	80005f8 <__aeabi_dmul>
 80102b0:	a371      	add	r3, pc, #452	@ (adr r3, 8010478 <atan+0x2a8>)
 80102b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b6:	4606      	mov	r6, r0
 80102b8:	460f      	mov	r7, r1
 80102ba:	f7f0 f99d 	bl	80005f8 <__aeabi_dmul>
 80102be:	a370      	add	r3, pc, #448	@ (adr r3, 8010480 <atan+0x2b0>)
 80102c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c4:	f7ef ffe2 	bl	800028c <__adddf3>
 80102c8:	4632      	mov	r2, r6
 80102ca:	463b      	mov	r3, r7
 80102cc:	f7f0 f994 	bl	80005f8 <__aeabi_dmul>
 80102d0:	a36d      	add	r3, pc, #436	@ (adr r3, 8010488 <atan+0x2b8>)
 80102d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d6:	f7ef ffd9 	bl	800028c <__adddf3>
 80102da:	4632      	mov	r2, r6
 80102dc:	463b      	mov	r3, r7
 80102de:	f7f0 f98b 	bl	80005f8 <__aeabi_dmul>
 80102e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8010490 <atan+0x2c0>)
 80102e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e8:	f7ef ffd0 	bl	800028c <__adddf3>
 80102ec:	4632      	mov	r2, r6
 80102ee:	463b      	mov	r3, r7
 80102f0:	f7f0 f982 	bl	80005f8 <__aeabi_dmul>
 80102f4:	a368      	add	r3, pc, #416	@ (adr r3, 8010498 <atan+0x2c8>)
 80102f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fa:	f7ef ffc7 	bl	800028c <__adddf3>
 80102fe:	4632      	mov	r2, r6
 8010300:	463b      	mov	r3, r7
 8010302:	f7f0 f979 	bl	80005f8 <__aeabi_dmul>
 8010306:	a366      	add	r3, pc, #408	@ (adr r3, 80104a0 <atan+0x2d0>)
 8010308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030c:	f7ef ffbe 	bl	800028c <__adddf3>
 8010310:	4642      	mov	r2, r8
 8010312:	464b      	mov	r3, r9
 8010314:	f7f0 f970 	bl	80005f8 <__aeabi_dmul>
 8010318:	a363      	add	r3, pc, #396	@ (adr r3, 80104a8 <atan+0x2d8>)
 801031a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031e:	4680      	mov	r8, r0
 8010320:	4689      	mov	r9, r1
 8010322:	4630      	mov	r0, r6
 8010324:	4639      	mov	r1, r7
 8010326:	f7f0 f967 	bl	80005f8 <__aeabi_dmul>
 801032a:	a361      	add	r3, pc, #388	@ (adr r3, 80104b0 <atan+0x2e0>)
 801032c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010330:	f7ef ffaa 	bl	8000288 <__aeabi_dsub>
 8010334:	4632      	mov	r2, r6
 8010336:	463b      	mov	r3, r7
 8010338:	f7f0 f95e 	bl	80005f8 <__aeabi_dmul>
 801033c:	a35e      	add	r3, pc, #376	@ (adr r3, 80104b8 <atan+0x2e8>)
 801033e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010342:	f7ef ffa1 	bl	8000288 <__aeabi_dsub>
 8010346:	4632      	mov	r2, r6
 8010348:	463b      	mov	r3, r7
 801034a:	f7f0 f955 	bl	80005f8 <__aeabi_dmul>
 801034e:	a35c      	add	r3, pc, #368	@ (adr r3, 80104c0 <atan+0x2f0>)
 8010350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010354:	f7ef ff98 	bl	8000288 <__aeabi_dsub>
 8010358:	4632      	mov	r2, r6
 801035a:	463b      	mov	r3, r7
 801035c:	f7f0 f94c 	bl	80005f8 <__aeabi_dmul>
 8010360:	a359      	add	r3, pc, #356	@ (adr r3, 80104c8 <atan+0x2f8>)
 8010362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010366:	f7ef ff8f 	bl	8000288 <__aeabi_dsub>
 801036a:	4632      	mov	r2, r6
 801036c:	463b      	mov	r3, r7
 801036e:	f7f0 f943 	bl	80005f8 <__aeabi_dmul>
 8010372:	4602      	mov	r2, r0
 8010374:	460b      	mov	r3, r1
 8010376:	4640      	mov	r0, r8
 8010378:	4649      	mov	r1, r9
 801037a:	f7ef ff87 	bl	800028c <__adddf3>
 801037e:	4622      	mov	r2, r4
 8010380:	462b      	mov	r3, r5
 8010382:	f7f0 f939 	bl	80005f8 <__aeabi_dmul>
 8010386:	f1ba 3fff 	cmp.w	sl, #4294967295
 801038a:	4602      	mov	r2, r0
 801038c:	460b      	mov	r3, r1
 801038e:	d148      	bne.n	8010422 <atan+0x252>
 8010390:	4620      	mov	r0, r4
 8010392:	4629      	mov	r1, r5
 8010394:	f7ef ff78 	bl	8000288 <__aeabi_dsub>
 8010398:	e72f      	b.n	80101fa <atan+0x2a>
 801039a:	4b52      	ldr	r3, [pc, #328]	@ (80104e4 <atan+0x314>)
 801039c:	2200      	movs	r2, #0
 801039e:	4620      	mov	r0, r4
 80103a0:	4629      	mov	r1, r5
 80103a2:	f7ef ff71 	bl	8000288 <__aeabi_dsub>
 80103a6:	4b4f      	ldr	r3, [pc, #316]	@ (80104e4 <atan+0x314>)
 80103a8:	4606      	mov	r6, r0
 80103aa:	460f      	mov	r7, r1
 80103ac:	2200      	movs	r2, #0
 80103ae:	4620      	mov	r0, r4
 80103b0:	4629      	mov	r1, r5
 80103b2:	f7ef ff6b 	bl	800028c <__adddf3>
 80103b6:	4602      	mov	r2, r0
 80103b8:	460b      	mov	r3, r1
 80103ba:	4630      	mov	r0, r6
 80103bc:	4639      	mov	r1, r7
 80103be:	f7f0 fa45 	bl	800084c <__aeabi_ddiv>
 80103c2:	f04f 0a01 	mov.w	sl, #1
 80103c6:	4604      	mov	r4, r0
 80103c8:	460d      	mov	r5, r1
 80103ca:	e765      	b.n	8010298 <atan+0xc8>
 80103cc:	4b47      	ldr	r3, [pc, #284]	@ (80104ec <atan+0x31c>)
 80103ce:	429e      	cmp	r6, r3
 80103d0:	d21c      	bcs.n	801040c <atan+0x23c>
 80103d2:	4b47      	ldr	r3, [pc, #284]	@ (80104f0 <atan+0x320>)
 80103d4:	2200      	movs	r2, #0
 80103d6:	4620      	mov	r0, r4
 80103d8:	4629      	mov	r1, r5
 80103da:	f7ef ff55 	bl	8000288 <__aeabi_dsub>
 80103de:	4b44      	ldr	r3, [pc, #272]	@ (80104f0 <atan+0x320>)
 80103e0:	4606      	mov	r6, r0
 80103e2:	460f      	mov	r7, r1
 80103e4:	2200      	movs	r2, #0
 80103e6:	4620      	mov	r0, r4
 80103e8:	4629      	mov	r1, r5
 80103ea:	f7f0 f905 	bl	80005f8 <__aeabi_dmul>
 80103ee:	4b3d      	ldr	r3, [pc, #244]	@ (80104e4 <atan+0x314>)
 80103f0:	2200      	movs	r2, #0
 80103f2:	f7ef ff4b 	bl	800028c <__adddf3>
 80103f6:	4602      	mov	r2, r0
 80103f8:	460b      	mov	r3, r1
 80103fa:	4630      	mov	r0, r6
 80103fc:	4639      	mov	r1, r7
 80103fe:	f7f0 fa25 	bl	800084c <__aeabi_ddiv>
 8010402:	f04f 0a02 	mov.w	sl, #2
 8010406:	4604      	mov	r4, r0
 8010408:	460d      	mov	r5, r1
 801040a:	e745      	b.n	8010298 <atan+0xc8>
 801040c:	4622      	mov	r2, r4
 801040e:	462b      	mov	r3, r5
 8010410:	4938      	ldr	r1, [pc, #224]	@ (80104f4 <atan+0x324>)
 8010412:	2000      	movs	r0, #0
 8010414:	f7f0 fa1a 	bl	800084c <__aeabi_ddiv>
 8010418:	f04f 0a03 	mov.w	sl, #3
 801041c:	4604      	mov	r4, r0
 801041e:	460d      	mov	r5, r1
 8010420:	e73a      	b.n	8010298 <atan+0xc8>
 8010422:	4b35      	ldr	r3, [pc, #212]	@ (80104f8 <atan+0x328>)
 8010424:	4e35      	ldr	r6, [pc, #212]	@ (80104fc <atan+0x32c>)
 8010426:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801042a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042e:	f7ef ff2b 	bl	8000288 <__aeabi_dsub>
 8010432:	4622      	mov	r2, r4
 8010434:	462b      	mov	r3, r5
 8010436:	f7ef ff27 	bl	8000288 <__aeabi_dsub>
 801043a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801043e:	4602      	mov	r2, r0
 8010440:	460b      	mov	r3, r1
 8010442:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010446:	f7ef ff1f 	bl	8000288 <__aeabi_dsub>
 801044a:	f1bb 0f00 	cmp.w	fp, #0
 801044e:	4604      	mov	r4, r0
 8010450:	460d      	mov	r5, r1
 8010452:	f6bf aedc 	bge.w	801020e <atan+0x3e>
 8010456:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801045a:	461d      	mov	r5, r3
 801045c:	e6d7      	b.n	801020e <atan+0x3e>
 801045e:	a51c      	add	r5, pc, #112	@ (adr r5, 80104d0 <atan+0x300>)
 8010460:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010464:	e6d3      	b.n	801020e <atan+0x3e>
 8010466:	bf00      	nop
 8010468:	54442d18 	.word	0x54442d18
 801046c:	3ff921fb 	.word	0x3ff921fb
 8010470:	8800759c 	.word	0x8800759c
 8010474:	7e37e43c 	.word	0x7e37e43c
 8010478:	e322da11 	.word	0xe322da11
 801047c:	3f90ad3a 	.word	0x3f90ad3a
 8010480:	24760deb 	.word	0x24760deb
 8010484:	3fa97b4b 	.word	0x3fa97b4b
 8010488:	a0d03d51 	.word	0xa0d03d51
 801048c:	3fb10d66 	.word	0x3fb10d66
 8010490:	c54c206e 	.word	0xc54c206e
 8010494:	3fb745cd 	.word	0x3fb745cd
 8010498:	920083ff 	.word	0x920083ff
 801049c:	3fc24924 	.word	0x3fc24924
 80104a0:	5555550d 	.word	0x5555550d
 80104a4:	3fd55555 	.word	0x3fd55555
 80104a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80104ac:	bfa2b444 	.word	0xbfa2b444
 80104b0:	52defd9a 	.word	0x52defd9a
 80104b4:	3fadde2d 	.word	0x3fadde2d
 80104b8:	af749a6d 	.word	0xaf749a6d
 80104bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80104c0:	fe231671 	.word	0xfe231671
 80104c4:	3fbc71c6 	.word	0x3fbc71c6
 80104c8:	9998ebc4 	.word	0x9998ebc4
 80104cc:	3fc99999 	.word	0x3fc99999
 80104d0:	54442d18 	.word	0x54442d18
 80104d4:	bff921fb 	.word	0xbff921fb
 80104d8:	440fffff 	.word	0x440fffff
 80104dc:	7ff00000 	.word	0x7ff00000
 80104e0:	3fdbffff 	.word	0x3fdbffff
 80104e4:	3ff00000 	.word	0x3ff00000
 80104e8:	3ff2ffff 	.word	0x3ff2ffff
 80104ec:	40038000 	.word	0x40038000
 80104f0:	3ff80000 	.word	0x3ff80000
 80104f4:	bff00000 	.word	0xbff00000
 80104f8:	08011b70 	.word	0x08011b70
 80104fc:	08011b90 	.word	0x08011b90

08010500 <fabs>:
 8010500:	ec51 0b10 	vmov	r0, r1, d0
 8010504:	4602      	mov	r2, r0
 8010506:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801050a:	ec43 2b10 	vmov	d0, r2, r3
 801050e:	4770      	bx	lr

08010510 <__kernel_rem_pio2>:
 8010510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010514:	ed2d 8b02 	vpush	{d8}
 8010518:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801051c:	f112 0f14 	cmn.w	r2, #20
 8010520:	9306      	str	r3, [sp, #24]
 8010522:	9104      	str	r1, [sp, #16]
 8010524:	4bbe      	ldr	r3, [pc, #760]	@ (8010820 <__kernel_rem_pio2+0x310>)
 8010526:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8010528:	9008      	str	r0, [sp, #32]
 801052a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801052e:	9300      	str	r3, [sp, #0]
 8010530:	9b06      	ldr	r3, [sp, #24]
 8010532:	f103 33ff 	add.w	r3, r3, #4294967295
 8010536:	bfa8      	it	ge
 8010538:	1ed4      	subge	r4, r2, #3
 801053a:	9305      	str	r3, [sp, #20]
 801053c:	bfb2      	itee	lt
 801053e:	2400      	movlt	r4, #0
 8010540:	2318      	movge	r3, #24
 8010542:	fb94 f4f3 	sdivge	r4, r4, r3
 8010546:	f06f 0317 	mvn.w	r3, #23
 801054a:	fb04 3303 	mla	r3, r4, r3, r3
 801054e:	eb03 0b02 	add.w	fp, r3, r2
 8010552:	9b00      	ldr	r3, [sp, #0]
 8010554:	9a05      	ldr	r2, [sp, #20]
 8010556:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8010810 <__kernel_rem_pio2+0x300>
 801055a:	eb03 0802 	add.w	r8, r3, r2
 801055e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010560:	1aa7      	subs	r7, r4, r2
 8010562:	ae20      	add	r6, sp, #128	@ 0x80
 8010564:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010568:	2500      	movs	r5, #0
 801056a:	4545      	cmp	r5, r8
 801056c:	dd13      	ble.n	8010596 <__kernel_rem_pio2+0x86>
 801056e:	9b06      	ldr	r3, [sp, #24]
 8010570:	aa20      	add	r2, sp, #128	@ 0x80
 8010572:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010576:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801057a:	f04f 0800 	mov.w	r8, #0
 801057e:	9b00      	ldr	r3, [sp, #0]
 8010580:	4598      	cmp	r8, r3
 8010582:	dc31      	bgt.n	80105e8 <__kernel_rem_pio2+0xd8>
 8010584:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8010810 <__kernel_rem_pio2+0x300>
 8010588:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801058c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010590:	462f      	mov	r7, r5
 8010592:	2600      	movs	r6, #0
 8010594:	e01b      	b.n	80105ce <__kernel_rem_pio2+0xbe>
 8010596:	42ef      	cmn	r7, r5
 8010598:	d407      	bmi.n	80105aa <__kernel_rem_pio2+0x9a>
 801059a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801059e:	f7ef ffc1 	bl	8000524 <__aeabi_i2d>
 80105a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80105a6:	3501      	adds	r5, #1
 80105a8:	e7df      	b.n	801056a <__kernel_rem_pio2+0x5a>
 80105aa:	ec51 0b18 	vmov	r0, r1, d8
 80105ae:	e7f8      	b.n	80105a2 <__kernel_rem_pio2+0x92>
 80105b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80105b8:	f7f0 f81e 	bl	80005f8 <__aeabi_dmul>
 80105bc:	4602      	mov	r2, r0
 80105be:	460b      	mov	r3, r1
 80105c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105c4:	f7ef fe62 	bl	800028c <__adddf3>
 80105c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105cc:	3601      	adds	r6, #1
 80105ce:	9b05      	ldr	r3, [sp, #20]
 80105d0:	429e      	cmp	r6, r3
 80105d2:	f1a7 0708 	sub.w	r7, r7, #8
 80105d6:	ddeb      	ble.n	80105b0 <__kernel_rem_pio2+0xa0>
 80105d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80105dc:	f108 0801 	add.w	r8, r8, #1
 80105e0:	ecaa 7b02 	vstmia	sl!, {d7}
 80105e4:	3508      	adds	r5, #8
 80105e6:	e7ca      	b.n	801057e <__kernel_rem_pio2+0x6e>
 80105e8:	9b00      	ldr	r3, [sp, #0]
 80105ea:	f8dd 8000 	ldr.w	r8, [sp]
 80105ee:	aa0c      	add	r2, sp, #48	@ 0x30
 80105f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80105f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80105f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80105f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80105fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80105fe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8010602:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010604:	ab98      	add	r3, sp, #608	@ 0x260
 8010606:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801060a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801060e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010612:	ac0c      	add	r4, sp, #48	@ 0x30
 8010614:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010616:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801061a:	46a1      	mov	r9, r4
 801061c:	46c2      	mov	sl, r8
 801061e:	f1ba 0f00 	cmp.w	sl, #0
 8010622:	f1a5 0508 	sub.w	r5, r5, #8
 8010626:	dc77      	bgt.n	8010718 <__kernel_rem_pio2+0x208>
 8010628:	4658      	mov	r0, fp
 801062a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801062e:	f000 fac7 	bl	8010bc0 <scalbn>
 8010632:	ec57 6b10 	vmov	r6, r7, d0
 8010636:	2200      	movs	r2, #0
 8010638:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801063c:	4630      	mov	r0, r6
 801063e:	4639      	mov	r1, r7
 8010640:	f7ef ffda 	bl	80005f8 <__aeabi_dmul>
 8010644:	ec41 0b10 	vmov	d0, r0, r1
 8010648:	f000 fb3a 	bl	8010cc0 <floor>
 801064c:	4b75      	ldr	r3, [pc, #468]	@ (8010824 <__kernel_rem_pio2+0x314>)
 801064e:	ec51 0b10 	vmov	r0, r1, d0
 8010652:	2200      	movs	r2, #0
 8010654:	f7ef ffd0 	bl	80005f8 <__aeabi_dmul>
 8010658:	4602      	mov	r2, r0
 801065a:	460b      	mov	r3, r1
 801065c:	4630      	mov	r0, r6
 801065e:	4639      	mov	r1, r7
 8010660:	f7ef fe12 	bl	8000288 <__aeabi_dsub>
 8010664:	460f      	mov	r7, r1
 8010666:	4606      	mov	r6, r0
 8010668:	f7f0 fa76 	bl	8000b58 <__aeabi_d2iz>
 801066c:	9002      	str	r0, [sp, #8]
 801066e:	f7ef ff59 	bl	8000524 <__aeabi_i2d>
 8010672:	4602      	mov	r2, r0
 8010674:	460b      	mov	r3, r1
 8010676:	4630      	mov	r0, r6
 8010678:	4639      	mov	r1, r7
 801067a:	f7ef fe05 	bl	8000288 <__aeabi_dsub>
 801067e:	f1bb 0f00 	cmp.w	fp, #0
 8010682:	4606      	mov	r6, r0
 8010684:	460f      	mov	r7, r1
 8010686:	dd6c      	ble.n	8010762 <__kernel_rem_pio2+0x252>
 8010688:	f108 31ff 	add.w	r1, r8, #4294967295
 801068c:	ab0c      	add	r3, sp, #48	@ 0x30
 801068e:	9d02      	ldr	r5, [sp, #8]
 8010690:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010694:	f1cb 0018 	rsb	r0, fp, #24
 8010698:	fa43 f200 	asr.w	r2, r3, r0
 801069c:	4415      	add	r5, r2
 801069e:	4082      	lsls	r2, r0
 80106a0:	1a9b      	subs	r3, r3, r2
 80106a2:	aa0c      	add	r2, sp, #48	@ 0x30
 80106a4:	9502      	str	r5, [sp, #8]
 80106a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80106aa:	f1cb 0217 	rsb	r2, fp, #23
 80106ae:	fa43 f902 	asr.w	r9, r3, r2
 80106b2:	f1b9 0f00 	cmp.w	r9, #0
 80106b6:	dd64      	ble.n	8010782 <__kernel_rem_pio2+0x272>
 80106b8:	9b02      	ldr	r3, [sp, #8]
 80106ba:	2200      	movs	r2, #0
 80106bc:	3301      	adds	r3, #1
 80106be:	9302      	str	r3, [sp, #8]
 80106c0:	4615      	mov	r5, r2
 80106c2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80106c6:	4590      	cmp	r8, r2
 80106c8:	f300 80b8 	bgt.w	801083c <__kernel_rem_pio2+0x32c>
 80106cc:	f1bb 0f00 	cmp.w	fp, #0
 80106d0:	dd07      	ble.n	80106e2 <__kernel_rem_pio2+0x1d2>
 80106d2:	f1bb 0f01 	cmp.w	fp, #1
 80106d6:	f000 80bf 	beq.w	8010858 <__kernel_rem_pio2+0x348>
 80106da:	f1bb 0f02 	cmp.w	fp, #2
 80106de:	f000 80c6 	beq.w	801086e <__kernel_rem_pio2+0x35e>
 80106e2:	f1b9 0f02 	cmp.w	r9, #2
 80106e6:	d14c      	bne.n	8010782 <__kernel_rem_pio2+0x272>
 80106e8:	4632      	mov	r2, r6
 80106ea:	463b      	mov	r3, r7
 80106ec:	494e      	ldr	r1, [pc, #312]	@ (8010828 <__kernel_rem_pio2+0x318>)
 80106ee:	2000      	movs	r0, #0
 80106f0:	f7ef fdca 	bl	8000288 <__aeabi_dsub>
 80106f4:	4606      	mov	r6, r0
 80106f6:	460f      	mov	r7, r1
 80106f8:	2d00      	cmp	r5, #0
 80106fa:	d042      	beq.n	8010782 <__kernel_rem_pio2+0x272>
 80106fc:	4658      	mov	r0, fp
 80106fe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8010818 <__kernel_rem_pio2+0x308>
 8010702:	f000 fa5d 	bl	8010bc0 <scalbn>
 8010706:	4630      	mov	r0, r6
 8010708:	4639      	mov	r1, r7
 801070a:	ec53 2b10 	vmov	r2, r3, d0
 801070e:	f7ef fdbb 	bl	8000288 <__aeabi_dsub>
 8010712:	4606      	mov	r6, r0
 8010714:	460f      	mov	r7, r1
 8010716:	e034      	b.n	8010782 <__kernel_rem_pio2+0x272>
 8010718:	4b44      	ldr	r3, [pc, #272]	@ (801082c <__kernel_rem_pio2+0x31c>)
 801071a:	2200      	movs	r2, #0
 801071c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010720:	f7ef ff6a 	bl	80005f8 <__aeabi_dmul>
 8010724:	f7f0 fa18 	bl	8000b58 <__aeabi_d2iz>
 8010728:	f7ef fefc 	bl	8000524 <__aeabi_i2d>
 801072c:	4b40      	ldr	r3, [pc, #256]	@ (8010830 <__kernel_rem_pio2+0x320>)
 801072e:	2200      	movs	r2, #0
 8010730:	4606      	mov	r6, r0
 8010732:	460f      	mov	r7, r1
 8010734:	f7ef ff60 	bl	80005f8 <__aeabi_dmul>
 8010738:	4602      	mov	r2, r0
 801073a:	460b      	mov	r3, r1
 801073c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010740:	f7ef fda2 	bl	8000288 <__aeabi_dsub>
 8010744:	f7f0 fa08 	bl	8000b58 <__aeabi_d2iz>
 8010748:	e9d5 2300 	ldrd	r2, r3, [r5]
 801074c:	f849 0b04 	str.w	r0, [r9], #4
 8010750:	4639      	mov	r1, r7
 8010752:	4630      	mov	r0, r6
 8010754:	f7ef fd9a 	bl	800028c <__adddf3>
 8010758:	f10a 3aff 	add.w	sl, sl, #4294967295
 801075c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010760:	e75d      	b.n	801061e <__kernel_rem_pio2+0x10e>
 8010762:	d107      	bne.n	8010774 <__kernel_rem_pio2+0x264>
 8010764:	f108 33ff 	add.w	r3, r8, #4294967295
 8010768:	aa0c      	add	r2, sp, #48	@ 0x30
 801076a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801076e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8010772:	e79e      	b.n	80106b2 <__kernel_rem_pio2+0x1a2>
 8010774:	4b2f      	ldr	r3, [pc, #188]	@ (8010834 <__kernel_rem_pio2+0x324>)
 8010776:	2200      	movs	r2, #0
 8010778:	f7f0 f9c4 	bl	8000b04 <__aeabi_dcmpge>
 801077c:	2800      	cmp	r0, #0
 801077e:	d143      	bne.n	8010808 <__kernel_rem_pio2+0x2f8>
 8010780:	4681      	mov	r9, r0
 8010782:	2200      	movs	r2, #0
 8010784:	2300      	movs	r3, #0
 8010786:	4630      	mov	r0, r6
 8010788:	4639      	mov	r1, r7
 801078a:	f7f0 f99d 	bl	8000ac8 <__aeabi_dcmpeq>
 801078e:	2800      	cmp	r0, #0
 8010790:	f000 80bf 	beq.w	8010912 <__kernel_rem_pio2+0x402>
 8010794:	f108 33ff 	add.w	r3, r8, #4294967295
 8010798:	2200      	movs	r2, #0
 801079a:	9900      	ldr	r1, [sp, #0]
 801079c:	428b      	cmp	r3, r1
 801079e:	da6e      	bge.n	801087e <__kernel_rem_pio2+0x36e>
 80107a0:	2a00      	cmp	r2, #0
 80107a2:	f000 8089 	beq.w	80108b8 <__kernel_rem_pio2+0x3a8>
 80107a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80107aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80107ac:	f1ab 0b18 	sub.w	fp, fp, #24
 80107b0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d0f6      	beq.n	80107a6 <__kernel_rem_pio2+0x296>
 80107b8:	4658      	mov	r0, fp
 80107ba:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8010818 <__kernel_rem_pio2+0x308>
 80107be:	f000 f9ff 	bl	8010bc0 <scalbn>
 80107c2:	f108 0301 	add.w	r3, r8, #1
 80107c6:	00da      	lsls	r2, r3, #3
 80107c8:	9205      	str	r2, [sp, #20]
 80107ca:	ec55 4b10 	vmov	r4, r5, d0
 80107ce:	aa70      	add	r2, sp, #448	@ 0x1c0
 80107d0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801082c <__kernel_rem_pio2+0x31c>
 80107d4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80107d8:	4646      	mov	r6, r8
 80107da:	f04f 0a00 	mov.w	sl, #0
 80107de:	2e00      	cmp	r6, #0
 80107e0:	f280 80cf 	bge.w	8010982 <__kernel_rem_pio2+0x472>
 80107e4:	4644      	mov	r4, r8
 80107e6:	2c00      	cmp	r4, #0
 80107e8:	f2c0 80fd 	blt.w	80109e6 <__kernel_rem_pio2+0x4d6>
 80107ec:	4b12      	ldr	r3, [pc, #72]	@ (8010838 <__kernel_rem_pio2+0x328>)
 80107ee:	461f      	mov	r7, r3
 80107f0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80107f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80107f6:	9306      	str	r3, [sp, #24]
 80107f8:	f04f 0a00 	mov.w	sl, #0
 80107fc:	f04f 0b00 	mov.w	fp, #0
 8010800:	2600      	movs	r6, #0
 8010802:	eba8 0504 	sub.w	r5, r8, r4
 8010806:	e0e2      	b.n	80109ce <__kernel_rem_pio2+0x4be>
 8010808:	f04f 0902 	mov.w	r9, #2
 801080c:	e754      	b.n	80106b8 <__kernel_rem_pio2+0x1a8>
 801080e:	bf00      	nop
	...
 801081c:	3ff00000 	.word	0x3ff00000
 8010820:	08011bf0 	.word	0x08011bf0
 8010824:	40200000 	.word	0x40200000
 8010828:	3ff00000 	.word	0x3ff00000
 801082c:	3e700000 	.word	0x3e700000
 8010830:	41700000 	.word	0x41700000
 8010834:	3fe00000 	.word	0x3fe00000
 8010838:	08011bb0 	.word	0x08011bb0
 801083c:	f854 3b04 	ldr.w	r3, [r4], #4
 8010840:	b945      	cbnz	r5, 8010854 <__kernel_rem_pio2+0x344>
 8010842:	b123      	cbz	r3, 801084e <__kernel_rem_pio2+0x33e>
 8010844:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8010848:	f844 3c04 	str.w	r3, [r4, #-4]
 801084c:	2301      	movs	r3, #1
 801084e:	3201      	adds	r2, #1
 8010850:	461d      	mov	r5, r3
 8010852:	e738      	b.n	80106c6 <__kernel_rem_pio2+0x1b6>
 8010854:	1acb      	subs	r3, r1, r3
 8010856:	e7f7      	b.n	8010848 <__kernel_rem_pio2+0x338>
 8010858:	f108 32ff 	add.w	r2, r8, #4294967295
 801085c:	ab0c      	add	r3, sp, #48	@ 0x30
 801085e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010862:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010866:	a90c      	add	r1, sp, #48	@ 0x30
 8010868:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801086c:	e739      	b.n	80106e2 <__kernel_rem_pio2+0x1d2>
 801086e:	f108 32ff 	add.w	r2, r8, #4294967295
 8010872:	ab0c      	add	r3, sp, #48	@ 0x30
 8010874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010878:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801087c:	e7f3      	b.n	8010866 <__kernel_rem_pio2+0x356>
 801087e:	a90c      	add	r1, sp, #48	@ 0x30
 8010880:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010884:	3b01      	subs	r3, #1
 8010886:	430a      	orrs	r2, r1
 8010888:	e787      	b.n	801079a <__kernel_rem_pio2+0x28a>
 801088a:	3401      	adds	r4, #1
 801088c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010890:	2a00      	cmp	r2, #0
 8010892:	d0fa      	beq.n	801088a <__kernel_rem_pio2+0x37a>
 8010894:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010896:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801089a:	eb0d 0503 	add.w	r5, sp, r3
 801089e:	9b06      	ldr	r3, [sp, #24]
 80108a0:	aa20      	add	r2, sp, #128	@ 0x80
 80108a2:	4443      	add	r3, r8
 80108a4:	f108 0701 	add.w	r7, r8, #1
 80108a8:	3d98      	subs	r5, #152	@ 0x98
 80108aa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80108ae:	4444      	add	r4, r8
 80108b0:	42bc      	cmp	r4, r7
 80108b2:	da04      	bge.n	80108be <__kernel_rem_pio2+0x3ae>
 80108b4:	46a0      	mov	r8, r4
 80108b6:	e6a2      	b.n	80105fe <__kernel_rem_pio2+0xee>
 80108b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108ba:	2401      	movs	r4, #1
 80108bc:	e7e6      	b.n	801088c <__kernel_rem_pio2+0x37c>
 80108be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108c0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80108c4:	f7ef fe2e 	bl	8000524 <__aeabi_i2d>
 80108c8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8010b90 <__kernel_rem_pio2+0x680>
 80108cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80108d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80108d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80108d8:	46b2      	mov	sl, r6
 80108da:	f04f 0800 	mov.w	r8, #0
 80108de:	9b05      	ldr	r3, [sp, #20]
 80108e0:	4598      	cmp	r8, r3
 80108e2:	dd05      	ble.n	80108f0 <__kernel_rem_pio2+0x3e0>
 80108e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80108e8:	3701      	adds	r7, #1
 80108ea:	eca5 7b02 	vstmia	r5!, {d7}
 80108ee:	e7df      	b.n	80108b0 <__kernel_rem_pio2+0x3a0>
 80108f0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80108f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80108f8:	f7ef fe7e 	bl	80005f8 <__aeabi_dmul>
 80108fc:	4602      	mov	r2, r0
 80108fe:	460b      	mov	r3, r1
 8010900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010904:	f7ef fcc2 	bl	800028c <__adddf3>
 8010908:	f108 0801 	add.w	r8, r8, #1
 801090c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010910:	e7e5      	b.n	80108de <__kernel_rem_pio2+0x3ce>
 8010912:	f1cb 0000 	rsb	r0, fp, #0
 8010916:	ec47 6b10 	vmov	d0, r6, r7
 801091a:	f000 f951 	bl	8010bc0 <scalbn>
 801091e:	ec55 4b10 	vmov	r4, r5, d0
 8010922:	4b9d      	ldr	r3, [pc, #628]	@ (8010b98 <__kernel_rem_pio2+0x688>)
 8010924:	2200      	movs	r2, #0
 8010926:	4620      	mov	r0, r4
 8010928:	4629      	mov	r1, r5
 801092a:	f7f0 f8eb 	bl	8000b04 <__aeabi_dcmpge>
 801092e:	b300      	cbz	r0, 8010972 <__kernel_rem_pio2+0x462>
 8010930:	4b9a      	ldr	r3, [pc, #616]	@ (8010b9c <__kernel_rem_pio2+0x68c>)
 8010932:	2200      	movs	r2, #0
 8010934:	4620      	mov	r0, r4
 8010936:	4629      	mov	r1, r5
 8010938:	f7ef fe5e 	bl	80005f8 <__aeabi_dmul>
 801093c:	f7f0 f90c 	bl	8000b58 <__aeabi_d2iz>
 8010940:	4606      	mov	r6, r0
 8010942:	f7ef fdef 	bl	8000524 <__aeabi_i2d>
 8010946:	4b94      	ldr	r3, [pc, #592]	@ (8010b98 <__kernel_rem_pio2+0x688>)
 8010948:	2200      	movs	r2, #0
 801094a:	f7ef fe55 	bl	80005f8 <__aeabi_dmul>
 801094e:	460b      	mov	r3, r1
 8010950:	4602      	mov	r2, r0
 8010952:	4629      	mov	r1, r5
 8010954:	4620      	mov	r0, r4
 8010956:	f7ef fc97 	bl	8000288 <__aeabi_dsub>
 801095a:	f7f0 f8fd 	bl	8000b58 <__aeabi_d2iz>
 801095e:	ab0c      	add	r3, sp, #48	@ 0x30
 8010960:	f10b 0b18 	add.w	fp, fp, #24
 8010964:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010968:	f108 0801 	add.w	r8, r8, #1
 801096c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8010970:	e722      	b.n	80107b8 <__kernel_rem_pio2+0x2a8>
 8010972:	4620      	mov	r0, r4
 8010974:	4629      	mov	r1, r5
 8010976:	f7f0 f8ef 	bl	8000b58 <__aeabi_d2iz>
 801097a:	ab0c      	add	r3, sp, #48	@ 0x30
 801097c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010980:	e71a      	b.n	80107b8 <__kernel_rem_pio2+0x2a8>
 8010982:	ab0c      	add	r3, sp, #48	@ 0x30
 8010984:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010988:	f7ef fdcc 	bl	8000524 <__aeabi_i2d>
 801098c:	4622      	mov	r2, r4
 801098e:	462b      	mov	r3, r5
 8010990:	f7ef fe32 	bl	80005f8 <__aeabi_dmul>
 8010994:	4652      	mov	r2, sl
 8010996:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801099a:	465b      	mov	r3, fp
 801099c:	4620      	mov	r0, r4
 801099e:	4629      	mov	r1, r5
 80109a0:	f7ef fe2a 	bl	80005f8 <__aeabi_dmul>
 80109a4:	3e01      	subs	r6, #1
 80109a6:	4604      	mov	r4, r0
 80109a8:	460d      	mov	r5, r1
 80109aa:	e718      	b.n	80107de <__kernel_rem_pio2+0x2ce>
 80109ac:	9906      	ldr	r1, [sp, #24]
 80109ae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80109b2:	9106      	str	r1, [sp, #24]
 80109b4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80109b8:	f7ef fe1e 	bl	80005f8 <__aeabi_dmul>
 80109bc:	4602      	mov	r2, r0
 80109be:	460b      	mov	r3, r1
 80109c0:	4650      	mov	r0, sl
 80109c2:	4659      	mov	r1, fp
 80109c4:	f7ef fc62 	bl	800028c <__adddf3>
 80109c8:	3601      	adds	r6, #1
 80109ca:	4682      	mov	sl, r0
 80109cc:	468b      	mov	fp, r1
 80109ce:	9b00      	ldr	r3, [sp, #0]
 80109d0:	429e      	cmp	r6, r3
 80109d2:	dc01      	bgt.n	80109d8 <__kernel_rem_pio2+0x4c8>
 80109d4:	42b5      	cmp	r5, r6
 80109d6:	dae9      	bge.n	80109ac <__kernel_rem_pio2+0x49c>
 80109d8:	ab48      	add	r3, sp, #288	@ 0x120
 80109da:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80109de:	e9c5 ab00 	strd	sl, fp, [r5]
 80109e2:	3c01      	subs	r4, #1
 80109e4:	e6ff      	b.n	80107e6 <__kernel_rem_pio2+0x2d6>
 80109e6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80109e8:	2b02      	cmp	r3, #2
 80109ea:	dc0b      	bgt.n	8010a04 <__kernel_rem_pio2+0x4f4>
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	dc39      	bgt.n	8010a64 <__kernel_rem_pio2+0x554>
 80109f0:	d05d      	beq.n	8010aae <__kernel_rem_pio2+0x59e>
 80109f2:	9b02      	ldr	r3, [sp, #8]
 80109f4:	f003 0007 	and.w	r0, r3, #7
 80109f8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80109fc:	ecbd 8b02 	vpop	{d8}
 8010a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a04:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010a06:	2b03      	cmp	r3, #3
 8010a08:	d1f3      	bne.n	80109f2 <__kernel_rem_pio2+0x4e2>
 8010a0a:	9b05      	ldr	r3, [sp, #20]
 8010a0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010a10:	eb0d 0403 	add.w	r4, sp, r3
 8010a14:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8010a18:	4625      	mov	r5, r4
 8010a1a:	46c2      	mov	sl, r8
 8010a1c:	f1ba 0f00 	cmp.w	sl, #0
 8010a20:	f1a5 0508 	sub.w	r5, r5, #8
 8010a24:	dc6b      	bgt.n	8010afe <__kernel_rem_pio2+0x5ee>
 8010a26:	4645      	mov	r5, r8
 8010a28:	2d01      	cmp	r5, #1
 8010a2a:	f1a4 0408 	sub.w	r4, r4, #8
 8010a2e:	f300 8087 	bgt.w	8010b40 <__kernel_rem_pio2+0x630>
 8010a32:	9c05      	ldr	r4, [sp, #20]
 8010a34:	ab48      	add	r3, sp, #288	@ 0x120
 8010a36:	441c      	add	r4, r3
 8010a38:	2000      	movs	r0, #0
 8010a3a:	2100      	movs	r1, #0
 8010a3c:	f1b8 0f01 	cmp.w	r8, #1
 8010a40:	f300 809c 	bgt.w	8010b7c <__kernel_rem_pio2+0x66c>
 8010a44:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8010a48:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8010a4c:	f1b9 0f00 	cmp.w	r9, #0
 8010a50:	f040 80a6 	bne.w	8010ba0 <__kernel_rem_pio2+0x690>
 8010a54:	9b04      	ldr	r3, [sp, #16]
 8010a56:	e9c3 7800 	strd	r7, r8, [r3]
 8010a5a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010a5e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010a62:	e7c6      	b.n	80109f2 <__kernel_rem_pio2+0x4e2>
 8010a64:	9d05      	ldr	r5, [sp, #20]
 8010a66:	ab48      	add	r3, sp, #288	@ 0x120
 8010a68:	441d      	add	r5, r3
 8010a6a:	4644      	mov	r4, r8
 8010a6c:	2000      	movs	r0, #0
 8010a6e:	2100      	movs	r1, #0
 8010a70:	2c00      	cmp	r4, #0
 8010a72:	da35      	bge.n	8010ae0 <__kernel_rem_pio2+0x5d0>
 8010a74:	f1b9 0f00 	cmp.w	r9, #0
 8010a78:	d038      	beq.n	8010aec <__kernel_rem_pio2+0x5dc>
 8010a7a:	4602      	mov	r2, r0
 8010a7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010a80:	9c04      	ldr	r4, [sp, #16]
 8010a82:	e9c4 2300 	strd	r2, r3, [r4]
 8010a86:	4602      	mov	r2, r0
 8010a88:	460b      	mov	r3, r1
 8010a8a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8010a8e:	f7ef fbfb 	bl	8000288 <__aeabi_dsub>
 8010a92:	ad4a      	add	r5, sp, #296	@ 0x128
 8010a94:	2401      	movs	r4, #1
 8010a96:	45a0      	cmp	r8, r4
 8010a98:	da2b      	bge.n	8010af2 <__kernel_rem_pio2+0x5e2>
 8010a9a:	f1b9 0f00 	cmp.w	r9, #0
 8010a9e:	d002      	beq.n	8010aa6 <__kernel_rem_pio2+0x596>
 8010aa0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	9b04      	ldr	r3, [sp, #16]
 8010aa8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010aac:	e7a1      	b.n	80109f2 <__kernel_rem_pio2+0x4e2>
 8010aae:	9c05      	ldr	r4, [sp, #20]
 8010ab0:	ab48      	add	r3, sp, #288	@ 0x120
 8010ab2:	441c      	add	r4, r3
 8010ab4:	2000      	movs	r0, #0
 8010ab6:	2100      	movs	r1, #0
 8010ab8:	f1b8 0f00 	cmp.w	r8, #0
 8010abc:	da09      	bge.n	8010ad2 <__kernel_rem_pio2+0x5c2>
 8010abe:	f1b9 0f00 	cmp.w	r9, #0
 8010ac2:	d002      	beq.n	8010aca <__kernel_rem_pio2+0x5ba>
 8010ac4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010ac8:	4619      	mov	r1, r3
 8010aca:	9b04      	ldr	r3, [sp, #16]
 8010acc:	e9c3 0100 	strd	r0, r1, [r3]
 8010ad0:	e78f      	b.n	80109f2 <__kernel_rem_pio2+0x4e2>
 8010ad2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010ad6:	f7ef fbd9 	bl	800028c <__adddf3>
 8010ada:	f108 38ff 	add.w	r8, r8, #4294967295
 8010ade:	e7eb      	b.n	8010ab8 <__kernel_rem_pio2+0x5a8>
 8010ae0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8010ae4:	f7ef fbd2 	bl	800028c <__adddf3>
 8010ae8:	3c01      	subs	r4, #1
 8010aea:	e7c1      	b.n	8010a70 <__kernel_rem_pio2+0x560>
 8010aec:	4602      	mov	r2, r0
 8010aee:	460b      	mov	r3, r1
 8010af0:	e7c6      	b.n	8010a80 <__kernel_rem_pio2+0x570>
 8010af2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8010af6:	f7ef fbc9 	bl	800028c <__adddf3>
 8010afa:	3401      	adds	r4, #1
 8010afc:	e7cb      	b.n	8010a96 <__kernel_rem_pio2+0x586>
 8010afe:	ed95 7b00 	vldr	d7, [r5]
 8010b02:	ed8d 7b00 	vstr	d7, [sp]
 8010b06:	ed95 7b02 	vldr	d7, [r5, #8]
 8010b0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b0e:	ec53 2b17 	vmov	r2, r3, d7
 8010b12:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010b16:	f7ef fbb9 	bl	800028c <__adddf3>
 8010b1a:	4602      	mov	r2, r0
 8010b1c:	460b      	mov	r3, r1
 8010b1e:	4606      	mov	r6, r0
 8010b20:	460f      	mov	r7, r1
 8010b22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b26:	f7ef fbaf 	bl	8000288 <__aeabi_dsub>
 8010b2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010b2e:	f7ef fbad 	bl	800028c <__adddf3>
 8010b32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010b36:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8010b3a:	e9c5 6700 	strd	r6, r7, [r5]
 8010b3e:	e76d      	b.n	8010a1c <__kernel_rem_pio2+0x50c>
 8010b40:	ed94 7b00 	vldr	d7, [r4]
 8010b44:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8010b48:	ec51 0b17 	vmov	r0, r1, d7
 8010b4c:	4652      	mov	r2, sl
 8010b4e:	465b      	mov	r3, fp
 8010b50:	ed8d 7b00 	vstr	d7, [sp]
 8010b54:	f7ef fb9a 	bl	800028c <__adddf3>
 8010b58:	4602      	mov	r2, r0
 8010b5a:	460b      	mov	r3, r1
 8010b5c:	4606      	mov	r6, r0
 8010b5e:	460f      	mov	r7, r1
 8010b60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b64:	f7ef fb90 	bl	8000288 <__aeabi_dsub>
 8010b68:	4652      	mov	r2, sl
 8010b6a:	465b      	mov	r3, fp
 8010b6c:	f7ef fb8e 	bl	800028c <__adddf3>
 8010b70:	3d01      	subs	r5, #1
 8010b72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010b76:	e9c4 6700 	strd	r6, r7, [r4]
 8010b7a:	e755      	b.n	8010a28 <__kernel_rem_pio2+0x518>
 8010b7c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010b80:	f7ef fb84 	bl	800028c <__adddf3>
 8010b84:	f108 38ff 	add.w	r8, r8, #4294967295
 8010b88:	e758      	b.n	8010a3c <__kernel_rem_pio2+0x52c>
 8010b8a:	bf00      	nop
 8010b8c:	f3af 8000 	nop.w
	...
 8010b98:	41700000 	.word	0x41700000
 8010b9c:	3e700000 	.word	0x3e700000
 8010ba0:	9b04      	ldr	r3, [sp, #16]
 8010ba2:	9a04      	ldr	r2, [sp, #16]
 8010ba4:	601f      	str	r7, [r3, #0]
 8010ba6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8010baa:	605c      	str	r4, [r3, #4]
 8010bac:	609d      	str	r5, [r3, #8]
 8010bae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010bb2:	60d3      	str	r3, [r2, #12]
 8010bb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010bb8:	6110      	str	r0, [r2, #16]
 8010bba:	6153      	str	r3, [r2, #20]
 8010bbc:	e719      	b.n	80109f2 <__kernel_rem_pio2+0x4e2>
 8010bbe:	bf00      	nop

08010bc0 <scalbn>:
 8010bc0:	b570      	push	{r4, r5, r6, lr}
 8010bc2:	ec55 4b10 	vmov	r4, r5, d0
 8010bc6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010bca:	4606      	mov	r6, r0
 8010bcc:	462b      	mov	r3, r5
 8010bce:	b991      	cbnz	r1, 8010bf6 <scalbn+0x36>
 8010bd0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010bd4:	4323      	orrs	r3, r4
 8010bd6:	d03d      	beq.n	8010c54 <scalbn+0x94>
 8010bd8:	4b35      	ldr	r3, [pc, #212]	@ (8010cb0 <scalbn+0xf0>)
 8010bda:	4620      	mov	r0, r4
 8010bdc:	4629      	mov	r1, r5
 8010bde:	2200      	movs	r2, #0
 8010be0:	f7ef fd0a 	bl	80005f8 <__aeabi_dmul>
 8010be4:	4b33      	ldr	r3, [pc, #204]	@ (8010cb4 <scalbn+0xf4>)
 8010be6:	429e      	cmp	r6, r3
 8010be8:	4604      	mov	r4, r0
 8010bea:	460d      	mov	r5, r1
 8010bec:	da0f      	bge.n	8010c0e <scalbn+0x4e>
 8010bee:	a328      	add	r3, pc, #160	@ (adr r3, 8010c90 <scalbn+0xd0>)
 8010bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf4:	e01e      	b.n	8010c34 <scalbn+0x74>
 8010bf6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010bfa:	4291      	cmp	r1, r2
 8010bfc:	d10b      	bne.n	8010c16 <scalbn+0x56>
 8010bfe:	4622      	mov	r2, r4
 8010c00:	4620      	mov	r0, r4
 8010c02:	4629      	mov	r1, r5
 8010c04:	f7ef fb42 	bl	800028c <__adddf3>
 8010c08:	4604      	mov	r4, r0
 8010c0a:	460d      	mov	r5, r1
 8010c0c:	e022      	b.n	8010c54 <scalbn+0x94>
 8010c0e:	460b      	mov	r3, r1
 8010c10:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010c14:	3936      	subs	r1, #54	@ 0x36
 8010c16:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010c1a:	4296      	cmp	r6, r2
 8010c1c:	dd0d      	ble.n	8010c3a <scalbn+0x7a>
 8010c1e:	2d00      	cmp	r5, #0
 8010c20:	a11d      	add	r1, pc, #116	@ (adr r1, 8010c98 <scalbn+0xd8>)
 8010c22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c26:	da02      	bge.n	8010c2e <scalbn+0x6e>
 8010c28:	a11d      	add	r1, pc, #116	@ (adr r1, 8010ca0 <scalbn+0xe0>)
 8010c2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c2e:	a31a      	add	r3, pc, #104	@ (adr r3, 8010c98 <scalbn+0xd8>)
 8010c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c34:	f7ef fce0 	bl	80005f8 <__aeabi_dmul>
 8010c38:	e7e6      	b.n	8010c08 <scalbn+0x48>
 8010c3a:	1872      	adds	r2, r6, r1
 8010c3c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010c40:	428a      	cmp	r2, r1
 8010c42:	dcec      	bgt.n	8010c1e <scalbn+0x5e>
 8010c44:	2a00      	cmp	r2, #0
 8010c46:	dd08      	ble.n	8010c5a <scalbn+0x9a>
 8010c48:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010c4c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010c50:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c54:	ec45 4b10 	vmov	d0, r4, r5
 8010c58:	bd70      	pop	{r4, r5, r6, pc}
 8010c5a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010c5e:	da08      	bge.n	8010c72 <scalbn+0xb2>
 8010c60:	2d00      	cmp	r5, #0
 8010c62:	a10b      	add	r1, pc, #44	@ (adr r1, 8010c90 <scalbn+0xd0>)
 8010c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c68:	dac1      	bge.n	8010bee <scalbn+0x2e>
 8010c6a:	a10f      	add	r1, pc, #60	@ (adr r1, 8010ca8 <scalbn+0xe8>)
 8010c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c70:	e7bd      	b.n	8010bee <scalbn+0x2e>
 8010c72:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010c76:	3236      	adds	r2, #54	@ 0x36
 8010c78:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010c7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c80:	4620      	mov	r0, r4
 8010c82:	4b0d      	ldr	r3, [pc, #52]	@ (8010cb8 <scalbn+0xf8>)
 8010c84:	4629      	mov	r1, r5
 8010c86:	2200      	movs	r2, #0
 8010c88:	e7d4      	b.n	8010c34 <scalbn+0x74>
 8010c8a:	bf00      	nop
 8010c8c:	f3af 8000 	nop.w
 8010c90:	c2f8f359 	.word	0xc2f8f359
 8010c94:	01a56e1f 	.word	0x01a56e1f
 8010c98:	8800759c 	.word	0x8800759c
 8010c9c:	7e37e43c 	.word	0x7e37e43c
 8010ca0:	8800759c 	.word	0x8800759c
 8010ca4:	fe37e43c 	.word	0xfe37e43c
 8010ca8:	c2f8f359 	.word	0xc2f8f359
 8010cac:	81a56e1f 	.word	0x81a56e1f
 8010cb0:	43500000 	.word	0x43500000
 8010cb4:	ffff3cb0 	.word	0xffff3cb0
 8010cb8:	3c900000 	.word	0x3c900000
 8010cbc:	00000000 	.word	0x00000000

08010cc0 <floor>:
 8010cc0:	ec51 0b10 	vmov	r0, r1, d0
 8010cc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ccc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010cd0:	2e13      	cmp	r6, #19
 8010cd2:	460c      	mov	r4, r1
 8010cd4:	4605      	mov	r5, r0
 8010cd6:	4680      	mov	r8, r0
 8010cd8:	dc34      	bgt.n	8010d44 <floor+0x84>
 8010cda:	2e00      	cmp	r6, #0
 8010cdc:	da17      	bge.n	8010d0e <floor+0x4e>
 8010cde:	a332      	add	r3, pc, #200	@ (adr r3, 8010da8 <floor+0xe8>)
 8010ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce4:	f7ef fad2 	bl	800028c <__adddf3>
 8010ce8:	2200      	movs	r2, #0
 8010cea:	2300      	movs	r3, #0
 8010cec:	f7ef ff14 	bl	8000b18 <__aeabi_dcmpgt>
 8010cf0:	b150      	cbz	r0, 8010d08 <floor+0x48>
 8010cf2:	2c00      	cmp	r4, #0
 8010cf4:	da55      	bge.n	8010da2 <floor+0xe2>
 8010cf6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8010cfa:	432c      	orrs	r4, r5
 8010cfc:	2500      	movs	r5, #0
 8010cfe:	42ac      	cmp	r4, r5
 8010d00:	4c2b      	ldr	r4, [pc, #172]	@ (8010db0 <floor+0xf0>)
 8010d02:	bf08      	it	eq
 8010d04:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010d08:	4621      	mov	r1, r4
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	e023      	b.n	8010d56 <floor+0x96>
 8010d0e:	4f29      	ldr	r7, [pc, #164]	@ (8010db4 <floor+0xf4>)
 8010d10:	4137      	asrs	r7, r6
 8010d12:	ea01 0307 	and.w	r3, r1, r7
 8010d16:	4303      	orrs	r3, r0
 8010d18:	d01d      	beq.n	8010d56 <floor+0x96>
 8010d1a:	a323      	add	r3, pc, #140	@ (adr r3, 8010da8 <floor+0xe8>)
 8010d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d20:	f7ef fab4 	bl	800028c <__adddf3>
 8010d24:	2200      	movs	r2, #0
 8010d26:	2300      	movs	r3, #0
 8010d28:	f7ef fef6 	bl	8000b18 <__aeabi_dcmpgt>
 8010d2c:	2800      	cmp	r0, #0
 8010d2e:	d0eb      	beq.n	8010d08 <floor+0x48>
 8010d30:	2c00      	cmp	r4, #0
 8010d32:	bfbe      	ittt	lt
 8010d34:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8010d38:	4133      	asrlt	r3, r6
 8010d3a:	18e4      	addlt	r4, r4, r3
 8010d3c:	ea24 0407 	bic.w	r4, r4, r7
 8010d40:	2500      	movs	r5, #0
 8010d42:	e7e1      	b.n	8010d08 <floor+0x48>
 8010d44:	2e33      	cmp	r6, #51	@ 0x33
 8010d46:	dd0a      	ble.n	8010d5e <floor+0x9e>
 8010d48:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8010d4c:	d103      	bne.n	8010d56 <floor+0x96>
 8010d4e:	4602      	mov	r2, r0
 8010d50:	460b      	mov	r3, r1
 8010d52:	f7ef fa9b 	bl	800028c <__adddf3>
 8010d56:	ec41 0b10 	vmov	d0, r0, r1
 8010d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d5e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010d62:	f04f 37ff 	mov.w	r7, #4294967295
 8010d66:	40df      	lsrs	r7, r3
 8010d68:	4207      	tst	r7, r0
 8010d6a:	d0f4      	beq.n	8010d56 <floor+0x96>
 8010d6c:	a30e      	add	r3, pc, #56	@ (adr r3, 8010da8 <floor+0xe8>)
 8010d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d72:	f7ef fa8b 	bl	800028c <__adddf3>
 8010d76:	2200      	movs	r2, #0
 8010d78:	2300      	movs	r3, #0
 8010d7a:	f7ef fecd 	bl	8000b18 <__aeabi_dcmpgt>
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	d0c2      	beq.n	8010d08 <floor+0x48>
 8010d82:	2c00      	cmp	r4, #0
 8010d84:	da0a      	bge.n	8010d9c <floor+0xdc>
 8010d86:	2e14      	cmp	r6, #20
 8010d88:	d101      	bne.n	8010d8e <floor+0xce>
 8010d8a:	3401      	adds	r4, #1
 8010d8c:	e006      	b.n	8010d9c <floor+0xdc>
 8010d8e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010d92:	2301      	movs	r3, #1
 8010d94:	40b3      	lsls	r3, r6
 8010d96:	441d      	add	r5, r3
 8010d98:	4545      	cmp	r5, r8
 8010d9a:	d3f6      	bcc.n	8010d8a <floor+0xca>
 8010d9c:	ea25 0507 	bic.w	r5, r5, r7
 8010da0:	e7b2      	b.n	8010d08 <floor+0x48>
 8010da2:	2500      	movs	r5, #0
 8010da4:	462c      	mov	r4, r5
 8010da6:	e7af      	b.n	8010d08 <floor+0x48>
 8010da8:	8800759c 	.word	0x8800759c
 8010dac:	7e37e43c 	.word	0x7e37e43c
 8010db0:	bff00000 	.word	0xbff00000
 8010db4:	000fffff 	.word	0x000fffff

08010db8 <_init>:
 8010db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dba:	bf00      	nop
 8010dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dbe:	bc08      	pop	{r3}
 8010dc0:	469e      	mov	lr, r3
 8010dc2:	4770      	bx	lr

08010dc4 <_fini>:
 8010dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dc6:	bf00      	nop
 8010dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dca:	bc08      	pop	{r3}
 8010dcc:	469e      	mov	lr, r3
 8010dce:	4770      	bx	lr
