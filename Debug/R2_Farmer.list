
R2_Farmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fff0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  08010180  08010180  00011180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a00  08010a00  000122c8  2**0
                  CONTENTS
  4 .ARM          00000008  08010a00  08010a00  00011a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a08  08010a08  000122c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a08  08010a08  00011a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010a0c  08010a0c  00011a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  08010a10  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122c8  2**0
                  CONTENTS
 10 .bss          000004a0  200002c8  200002c8  000122c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000768  20000768  000122c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001306f  00000000  00000000  000122f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002af6  00000000  00000000  00025367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  00027e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df7  00000000  00000000  00029018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a90  00000000  00000000  00029e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000052e4  00000000  00000000  0003b89f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00040b83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065ac  00000000  00000000  00040bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00047174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010168 	.word	0x08010168

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	08010168 	.word	0x08010168

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <motorDirection>:
        {GPIOD, GPIO_PIN_3, GPIOD, GPIO_PIN_4, TIM_CHANNEL_3, &htim2},		//9
        {GPIOB, GPIO_PIN_1, GPIOB, GPIO_PIN_0, TIM_CHANNEL_4, &htim2}		//10
};

void motorDirection(uint8_t motor, uint8_t direction)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
    Motor *currentMotor = &motors[motor - 1];
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <motorDirection+0x74>)
 8001002:	4413      	add	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
    GPIO_PinState dir1_state;
    GPIO_PinState dir2_state;
    switch (direction)
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d006      	beq.n	800101a <motorDirection+0x36>
 800100c:	2b02      	cmp	r3, #2
 800100e:	d109      	bne.n	8001024 <motorDirection+0x40>
    {
    case forward:
        dir1_state = GPIO_PIN_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_SET;
 8001014:	2301      	movs	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
        break;
 8001018:	e009      	b.n	800102e <motorDirection+0x4a>
    case backward:
        dir1_state = GPIO_PIN_SET;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	73bb      	strb	r3, [r7, #14]
        break;
 8001022:	e004      	b.n	800102e <motorDirection+0x4a>
    default:
        dir1_state = GPIO_PIN_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
        break;
 800102c:	bf00      	nop
    }
    HAL_GPIO_WritePin(currentMotor->dir1_port, currentMotor->dir1_pin, dir1_state);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	4619      	mov	r1, r3
 800103a:	f005 fb9f 	bl	800677c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(currentMotor->dir2_port, currentMotor->dir2_pin, dir2_state);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	6898      	ldr	r0, [r3, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	899b      	ldrh	r3, [r3, #12]
 8001046:	7bba      	ldrb	r2, [r7, #14]
 8001048:	4619      	mov	r1, r3
 800104a:	f005 fb97 	bl	800677c <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000

0800105c <setMotorSpeed>:

void setMotorSpeed(uint8_t motor, double speed)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	ed87 0b00 	vstr	d0, [r7]
 8001068:	73fb      	strb	r3, [r7, #15]
    Motor *currentMotor = &motors[motor - 1];
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4a33      	ldr	r2, [pc, #204]	@ (8001144 <setMotorSpeed+0xe8>)
 8001078:	4413      	add	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
    if (speed > 0)
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001088:	f7ff fd46 	bl	8000b18 <__aeabi_dcmpgt>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <setMotorSpeed+0x42>
    {
        motorDirection(motor, forward);
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffa4 	bl	8000fe4 <motorDirection>
 800109c:	e01b      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else if (speed < 0)
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010aa:	f7ff fd17 	bl	8000adc <__aeabi_dcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <setMotorSpeed+0x70>
    {
        motorDirection(motor, backward);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2101      	movs	r1, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff93 	bl	8000fe4 <motorDirection>
        speed = -speed;
 80010be:	683c      	ldr	r4, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80010c6:	e9c7 4500 	strd	r4, r5, [r7]
 80010ca:	e004      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else
    {
        motorDirection(motor, stop);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff87 	bl	8000fe4 <motorDirection>
    }
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	7b9b      	ldrb	r3, [r3, #14]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <setMotorSpeed+0x96>
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	681c      	ldr	r4, [r3, #0]
 80010e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010e8:	f7ff fd5e 	bl	8000ba8 <__aeabi_d2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80010f0:	e024      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	7b9b      	ldrb	r3, [r3, #14]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d109      	bne.n	800110e <setMotorSpeed+0xb2>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800110c:	e016      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	7b9b      	ldrb	r3, [r3, #14]
 8001112:	2b08      	cmp	r3, #8
 8001114:	d109      	bne.n	800112a <setMotorSpeed+0xce>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001120:	f7ff fd42 	bl	8000ba8 <__aeabi_d2uiz>
 8001124:	4603      	mov	r3, r0
 8001126:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001128:	e008      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001134:	f7ff fd38 	bl	8000ba8 <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bdb0      	pop	{r4, r5, r7, pc}
 8001144:	20000000 	.word	0x20000000

08001148 <Inverse_Kinematics>:

void Inverse_Kinematics(int Vx, int Vy, int W)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b096      	sub	sp, #88	@ 0x58
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
     double R = 7.6;
 8001154:	f20f 433c 	addw	r3, pc, #1084	@ 0x43c
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

     double M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff f9df 	bl	8000524 <__aeabi_i2d>
 8001166:	f20f 4334 	addw	r3, pc, #1076	@ 0x434
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff fa43 	bl	80005f8 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4614      	mov	r4, r2
 8001178:	461d      	mov	r5, r3
 800117a:	68b8      	ldr	r0, [r7, #8]
 800117c:	f7ff f9d2 	bl	8000524 <__aeabi_i2d>
 8001180:	f20f 4320 	addw	r3, pc, #1056	@ 0x420
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fa36 	bl	80005f8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4620      	mov	r0, r4
 8001192:	4629      	mov	r1, r5
 8001194:	f7ff f87a 	bl	800028c <__adddf3>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4614      	mov	r4, r2
 800119e:	461d      	mov	r5, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff f9bf 	bl	8000524 <__aeabi_i2d>
 80011a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80011aa:	f7ff fa25 	bl	80005f8 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff f867 	bl	8000288 <__aeabi_dsub>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
     double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff f9ae 	bl	8000524 <__aeabi_i2d>
 80011c8:	a3f8      	add	r3, pc, #992	@ (adr r3, 80015ac <Inverse_Kinematics+0x464>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff fa13 	bl	80005f8 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4614      	mov	r4, r2
 80011d8:	461d      	mov	r5, r3
 80011da:	68b8      	ldr	r0, [r7, #8]
 80011dc:	f7ff f9a2 	bl	8000524 <__aeabi_i2d>
 80011e0:	a3ee      	add	r3, pc, #952	@ (adr r3, 800159c <Inverse_Kinematics+0x454>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff fa07 	bl	80005f8 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7ff f84b 	bl	800028c <__adddf3>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff f990 	bl	8000524 <__aeabi_i2d>
 8001204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001208:	f7ff f9f6 	bl	80005f8 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4620      	mov	r0, r4
 8001212:	4629      	mov	r1, r5
 8001214:	f7ff f838 	bl	8000288 <__aeabi_dsub>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
     double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff f97f 	bl	8000524 <__aeabi_i2d>
 8001226:	a3e3      	add	r3, pc, #908	@ (adr r3, 80015b4 <Inverse_Kinematics+0x46c>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f9e4 	bl	80005f8 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4614      	mov	r4, r2
 8001236:	461d      	mov	r5, r3
 8001238:	68b8      	ldr	r0, [r7, #8]
 800123a:	f7ff f973 	bl	8000524 <__aeabi_i2d>
 800123e:	a3df      	add	r3, pc, #892	@ (adr r3, 80015bc <Inverse_Kinematics+0x474>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f9d8 	bl	80005f8 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	f7ff f81c 	bl	800028c <__adddf3>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4614      	mov	r4, r2
 800125a:	461d      	mov	r5, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff f961 	bl	8000524 <__aeabi_i2d>
 8001262:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001266:	f7ff f9c7 	bl	80005f8 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7ff f809 	bl	8000288 <__aeabi_dsub>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
     double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff f950 	bl	8000524 <__aeabi_i2d>
 8001284:	a3cf      	add	r3, pc, #828	@ (adr r3, 80015c4 <Inverse_Kinematics+0x47c>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9b5 	bl	80005f8 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4614      	mov	r4, r2
 8001294:	461d      	mov	r5, r3
 8001296:	68b8      	ldr	r0, [r7, #8]
 8001298:	f7ff f944 	bl	8000524 <__aeabi_i2d>
 800129c:	a3cb      	add	r3, pc, #812	@ (adr r3, 80015cc <Inverse_Kinematics+0x484>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f9a9 	bl	80005f8 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4620      	mov	r0, r4
 80012ac:	4629      	mov	r1, r5
 80012ae:	f7fe ffed 	bl	800028c <__adddf3>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff f932 	bl	8000524 <__aeabi_i2d>
 80012c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80012c4:	f7ff f998 	bl	80005f8 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7fe ffda 	bl	8000288 <__aeabi_dsub>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

     double V1 = (M1 > 500 || M1 < -500) ? fmin(fmax(M1, -2600), 2600) : ((M1 < -0) ? -500 : ((M1 > 0) ? 500 : 0));
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4bab      	ldr	r3, [pc, #684]	@ (8001590 <Inverse_Kinematics+0x448>)
 80012e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80012e6:	f7ff fc17 	bl	8000b18 <__aeabi_dcmpgt>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d109      	bne.n	8001304 <Inverse_Kinematics+0x1bc>
 80012f0:	a39d      	add	r3, pc, #628	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80012fa:	f7ff fbef 	bl	8000adc <__aeabi_dcmplt>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d016      	beq.n	8001332 <Inverse_Kinematics+0x1ea>
 8001304:	ed9f 1b9a 	vldr	d1, [pc, #616]	@ 8001570 <Inverse_Kinematics+0x428>
 8001308:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 800130c:	f00d f87b 	bl	800e406 <fmax>
 8001310:	eeb0 7a40 	vmov.f32	s14, s0
 8001314:	eef0 7a60 	vmov.f32	s15, s1
 8001318:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 8001578 <Inverse_Kinematics+0x430>
 800131c:	eeb0 0a47 	vmov.f32	s0, s14
 8001320:	eef0 0a67 	vmov.f32	s1, s15
 8001324:	f00d f899 	bl	800e45a <fmin>
 8001328:	eeb0 7a40 	vmov.f32	s14, s0
 800132c:	eef0 7a60 	vmov.f32	s15, s1
 8001330:	e01d      	b.n	800136e <Inverse_Kinematics+0x226>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800133e:	f7ff fbcd 	bl	8000adc <__aeabi_dcmplt>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <Inverse_Kinematics+0x206>
 8001348:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8001568 <Inverse_Kinematics+0x420>
 800134c:	e00f      	b.n	800136e <Inverse_Kinematics+0x226>
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800135a:	f7ff fbdd 	bl	8000b18 <__aeabi_dcmpgt>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <Inverse_Kinematics+0x222>
 8001364:	ed9f 7b86 	vldr	d7, [pc, #536]	@ 8001580 <Inverse_Kinematics+0x438>
 8001368:	e001      	b.n	800136e <Inverse_Kinematics+0x226>
 800136a:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 8001588 <Inverse_Kinematics+0x440>
 800136e:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
     double V2 = (M2 > 500 || M2 < -500) ? fmin(fmax(M2, -2600), 2600) : ((M2 < -0) ? -500 : ((M2 > 0) ? 500 : 0));
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b86      	ldr	r3, [pc, #536]	@ (8001590 <Inverse_Kinematics+0x448>)
 8001378:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800137c:	f7ff fbcc 	bl	8000b18 <__aeabi_dcmpgt>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <Inverse_Kinematics+0x252>
 8001386:	a378      	add	r3, pc, #480	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001390:	f7ff fba4 	bl	8000adc <__aeabi_dcmplt>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d016      	beq.n	80013c8 <Inverse_Kinematics+0x280>
 800139a:	ed9f 1b75 	vldr	d1, [pc, #468]	@ 8001570 <Inverse_Kinematics+0x428>
 800139e:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80013a2:	f00d f830 	bl	800e406 <fmax>
 80013a6:	eeb0 7a40 	vmov.f32	s14, s0
 80013aa:	eef0 7a60 	vmov.f32	s15, s1
 80013ae:	ed9f 1b72 	vldr	d1, [pc, #456]	@ 8001578 <Inverse_Kinematics+0x430>
 80013b2:	eeb0 0a47 	vmov.f32	s0, s14
 80013b6:	eef0 0a67 	vmov.f32	s1, s15
 80013ba:	f00d f84e 	bl	800e45a <fmin>
 80013be:	eeb0 7a40 	vmov.f32	s14, s0
 80013c2:	eef0 7a60 	vmov.f32	s15, s1
 80013c6:	e01d      	b.n	8001404 <Inverse_Kinematics+0x2bc>
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80013d4:	f7ff fb82 	bl	8000adc <__aeabi_dcmplt>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <Inverse_Kinematics+0x29c>
 80013de:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8001568 <Inverse_Kinematics+0x420>
 80013e2:	e00f      	b.n	8001404 <Inverse_Kinematics+0x2bc>
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80013f0:	f7ff fb92 	bl	8000b18 <__aeabi_dcmpgt>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <Inverse_Kinematics+0x2b8>
 80013fa:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001580 <Inverse_Kinematics+0x438>
 80013fe:	e001      	b.n	8001404 <Inverse_Kinematics+0x2bc>
 8001400:	ed9f 7b61 	vldr	d7, [pc, #388]	@ 8001588 <Inverse_Kinematics+0x440>
 8001404:	ed87 7b08 	vstr	d7, [r7, #32]
     double V3 = (M3 > 500 || M3 < -500) ? fmin(fmax(M3, -2600), 2600) : ((M3 < -0) ? -500 : ((M3 > 0) ? 500 : 0));
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b60      	ldr	r3, [pc, #384]	@ (8001590 <Inverse_Kinematics+0x448>)
 800140e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001412:	f7ff fb81 	bl	8000b18 <__aeabi_dcmpgt>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d109      	bne.n	8001430 <Inverse_Kinematics+0x2e8>
 800141c:	a352      	add	r3, pc, #328	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001426:	f7ff fb59 	bl	8000adc <__aeabi_dcmplt>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d016      	beq.n	800145e <Inverse_Kinematics+0x316>
 8001430:	ed9f 1b4f 	vldr	d1, [pc, #316]	@ 8001570 <Inverse_Kinematics+0x428>
 8001434:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001438:	f00c ffe5 	bl	800e406 <fmax>
 800143c:	eeb0 7a40 	vmov.f32	s14, s0
 8001440:	eef0 7a60 	vmov.f32	s15, s1
 8001444:	ed9f 1b4c 	vldr	d1, [pc, #304]	@ 8001578 <Inverse_Kinematics+0x430>
 8001448:	eeb0 0a47 	vmov.f32	s0, s14
 800144c:	eef0 0a67 	vmov.f32	s1, s15
 8001450:	f00d f803 	bl	800e45a <fmin>
 8001454:	eeb0 7a40 	vmov.f32	s14, s0
 8001458:	eef0 7a60 	vmov.f32	s15, s1
 800145c:	e01d      	b.n	800149a <Inverse_Kinematics+0x352>
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800146a:	f7ff fb37 	bl	8000adc <__aeabi_dcmplt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <Inverse_Kinematics+0x332>
 8001474:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8001568 <Inverse_Kinematics+0x420>
 8001478:	e00f      	b.n	800149a <Inverse_Kinematics+0x352>
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001486:	f7ff fb47 	bl	8000b18 <__aeabi_dcmpgt>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <Inverse_Kinematics+0x34e>
 8001490:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8001580 <Inverse_Kinematics+0x438>
 8001494:	e001      	b.n	800149a <Inverse_Kinematics+0x352>
 8001496:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 8001588 <Inverse_Kinematics+0x440>
 800149a:	ed87 7b06 	vstr	d7, [r7, #24]
     double V4 = (M4 > 500 || M4 < -500) ? fmin(fmax(M4, -2600), 2600) : ((M4 < -0) ? -500 : ((M4 > 0) ? 500 : 0));
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001590 <Inverse_Kinematics+0x448>)
 80014a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80014a8:	f7ff fb36 	bl	8000b18 <__aeabi_dcmpgt>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <Inverse_Kinematics+0x37e>
 80014b2:	a32d      	add	r3, pc, #180	@ (adr r3, 8001568 <Inverse_Kinematics+0x420>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80014bc:	f7ff fb0e 	bl	8000adc <__aeabi_dcmplt>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d016      	beq.n	80014f4 <Inverse_Kinematics+0x3ac>
 80014c6:	ed9f 1b2a 	vldr	d1, [pc, #168]	@ 8001570 <Inverse_Kinematics+0x428>
 80014ca:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80014ce:	f00c ff9a 	bl	800e406 <fmax>
 80014d2:	eeb0 7a40 	vmov.f32	s14, s0
 80014d6:	eef0 7a60 	vmov.f32	s15, s1
 80014da:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8001578 <Inverse_Kinematics+0x430>
 80014de:	eeb0 0a47 	vmov.f32	s0, s14
 80014e2:	eef0 0a67 	vmov.f32	s1, s15
 80014e6:	f00c ffb8 	bl	800e45a <fmin>
 80014ea:	eeb0 7a40 	vmov.f32	s14, s0
 80014ee:	eef0 7a60 	vmov.f32	s15, s1
 80014f2:	e01d      	b.n	8001530 <Inverse_Kinematics+0x3e8>
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001500:	f7ff faec 	bl	8000adc <__aeabi_dcmplt>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <Inverse_Kinematics+0x3c8>
 800150a:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8001568 <Inverse_Kinematics+0x420>
 800150e:	e00f      	b.n	8001530 <Inverse_Kinematics+0x3e8>
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800151c:	f7ff fafc 	bl	8000b18 <__aeabi_dcmpgt>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <Inverse_Kinematics+0x3e4>
 8001526:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001580 <Inverse_Kinematics+0x438>
 800152a:	e001      	b.n	8001530 <Inverse_Kinematics+0x3e8>
 800152c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8001588 <Inverse_Kinematics+0x440>
 8001530:	ed87 7b04 	vstr	d7, [r7, #16]

     setMotorSpeed(6, V1);
 8001534:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001538:	2006      	movs	r0, #6
 800153a:	f7ff fd8f 	bl	800105c <setMotorSpeed>
     setMotorSpeed(8, V2);
 800153e:	ed97 0b08 	vldr	d0, [r7, #32]
 8001542:	2008      	movs	r0, #8
 8001544:	f7ff fd8a 	bl	800105c <setMotorSpeed>
     setMotorSpeed(4, V3);
 8001548:	ed97 0b06 	vldr	d0, [r7, #24]
 800154c:	2004      	movs	r0, #4
 800154e:	f7ff fd85 	bl	800105c <setMotorSpeed>
     setMotorSpeed(7, V4);
 8001552:	ed97 0b04 	vldr	d0, [r7, #16]
 8001556:	2007      	movs	r0, #7
 8001558:	f7ff fd80 	bl	800105c <setMotorSpeed>
}
 800155c:	bf00      	nop
 800155e:	3758      	adds	r7, #88	@ 0x58
 8001560:	46bd      	mov	sp, r7
 8001562:	bdb0      	pop	{r4, r5, r7, pc}
 8001564:	f3af 8000 	nop.w
 8001568:	00000000 	.word	0x00000000
 800156c:	c07f4000 	.word	0xc07f4000
 8001570:	00000000 	.word	0x00000000
 8001574:	c0a45000 	.word	0xc0a45000
 8001578:	00000000 	.word	0x00000000
 800157c:	40a45000 	.word	0x40a45000
 8001580:	00000000 	.word	0x00000000
 8001584:	407f4000 	.word	0x407f4000
	...
 8001590:	407f4000 	.word	0x407f4000
 8001594:	66666666 	.word	0x66666666
 8001598:	401e6666 	.word	0x401e6666
 800159c:	667f3bcc 	.word	0x667f3bcc
 80015a0:	bfe6a09e 	.word	0xbfe6a09e
 80015a4:	667f3bcd 	.word	0x667f3bcd
 80015a8:	3fe6a09e 	.word	0x3fe6a09e
 80015ac:	667f3bcd 	.word	0x667f3bcd
 80015b0:	bfe6a09e 	.word	0xbfe6a09e
 80015b4:	667f3bcc 	.word	0x667f3bcc
 80015b8:	3fe6a09e 	.word	0x3fe6a09e
 80015bc:	667f3bce 	.word	0x667f3bce
 80015c0:	bfe6a09e 	.word	0xbfe6a09e
 80015c4:	667f3bce 	.word	0x667f3bce
 80015c8:	3fe6a09e 	.word	0x3fe6a09e
 80015cc:	667f3bcb 	.word	0x667f3bcb
 80015d0:	3fe6a09e 	.word	0x3fe6a09e
 80015d4:	00000000 	.word	0x00000000

080015d8 <nanjak>:
    setMotorSpeed(4, V3);
    setMotorSpeed(7, V4);
}

void nanjak(int Vx, int Vy, int W)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b096      	sub	sp, #88	@ 0x58
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
    double R = 7.6;
 80015e4:	f20f 4378 	addw	r3, pc, #1144	@ 0x478
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    double M1 = (-sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W);
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f7fe ff97 	bl	8000524 <__aeabi_i2d>
 80015f6:	f20f 4370 	addw	r3, pc, #1136	@ 0x470
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7fe fffb 	bl	80005f8 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4614      	mov	r4, r2
 8001608:	461d      	mov	r5, r3
 800160a:	68b8      	ldr	r0, [r7, #8]
 800160c:	f7fe ff8a 	bl	8000524 <__aeabi_i2d>
 8001610:	f20f 435c 	addw	r3, pc, #1116	@ 0x45c
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f7fe ffee 	bl	80005f8 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4620      	mov	r0, r4
 8001622:	4629      	mov	r1, r5
 8001624:	f7fe fe32 	bl	800028c <__adddf3>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4614      	mov	r4, r2
 800162e:	461d      	mov	r5, r3
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7fe ff77 	bl	8000524 <__aeabi_i2d>
 8001636:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800163a:	f7fe ffdd 	bl	80005f8 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4620      	mov	r0, r4
 8001644:	4629      	mov	r1, r5
 8001646:	f7fe fe1f 	bl	8000288 <__aeabi_dsub>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W)*1.1;
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f7fe ff66 	bl	8000524 <__aeabi_i2d>
 8001658:	f20f 431c 	addw	r3, pc, #1052	@ 0x41c
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7fe ffca 	bl	80005f8 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4614      	mov	r4, r2
 800166a:	461d      	mov	r5, r3
 800166c:	68b8      	ldr	r0, [r7, #8]
 800166e:	f7fe ff59 	bl	8000524 <__aeabi_i2d>
 8001672:	a3fd      	add	r3, pc, #1012	@ (adr r3, 8001a68 <nanjak+0x490>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ffbe 	bl	80005f8 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4620      	mov	r0, r4
 8001682:	4629      	mov	r1, r5
 8001684:	f7fe fe02 	bl	800028c <__adddf3>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4614      	mov	r4, r2
 800168e:	461d      	mov	r5, r3
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7fe ff47 	bl	8000524 <__aeabi_i2d>
 8001696:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800169a:	f7fe ffad 	bl	80005f8 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4620      	mov	r0, r4
 80016a4:	4629      	mov	r1, r5
 80016a6:	f7fe fdef 	bl	8000288 <__aeabi_dsub>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	a3f3      	add	r3, pc, #972	@ (adr r3, 8001a80 <nanjak+0x4a8>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe ff9e 	bl	80005f8 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.2;
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f7fe ff2d 	bl	8000524 <__aeabi_i2d>
 80016ca:	a3ef      	add	r3, pc, #956	@ (adr r3, 8001a88 <nanjak+0x4b0>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ff92 	bl	80005f8 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4614      	mov	r4, r2
 80016da:	461d      	mov	r5, r3
 80016dc:	68b8      	ldr	r0, [r7, #8]
 80016de:	f7fe ff21 	bl	8000524 <__aeabi_i2d>
 80016e2:	a3eb      	add	r3, pc, #940	@ (adr r3, 8001a90 <nanjak+0x4b8>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7fe ff86 	bl	80005f8 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4620      	mov	r0, r4
 80016f2:	4629      	mov	r1, r5
 80016f4:	f7fe fdca 	bl	800028c <__adddf3>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4614      	mov	r4, r2
 80016fe:	461d      	mov	r5, r3
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7fe ff0f 	bl	8000524 <__aeabi_i2d>
 8001706:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800170a:	f7fe ff75 	bl	80005f8 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4620      	mov	r0, r4
 8001714:	4629      	mov	r1, r5
 8001716:	f7fe fdb7 	bl	8000288 <__aeabi_dsub>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001726:	4bcc      	ldr	r3, [pc, #816]	@ (8001a58 <nanjak+0x480>)
 8001728:	f7fe ff66 	bl	80005f8 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W);
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f7fe fef5 	bl	8000524 <__aeabi_i2d>
 800173a:	a3b9      	add	r3, pc, #740	@ (adr r3, 8001a20 <nanjak+0x448>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	f7fe ff5a 	bl	80005f8 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4614      	mov	r4, r2
 800174a:	461d      	mov	r5, r3
 800174c:	68b8      	ldr	r0, [r7, #8]
 800174e:	f7fe fee9 	bl	8000524 <__aeabi_i2d>
 8001752:	a3b5      	add	r3, pc, #724	@ (adr r3, 8001a28 <nanjak+0x450>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe ff4e 	bl	80005f8 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4620      	mov	r0, r4
 8001762:	4629      	mov	r1, r5
 8001764:	f7fe fd92 	bl	800028c <__adddf3>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4614      	mov	r4, r2
 800176e:	461d      	mov	r5, r3
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7fe fed7 	bl	8000524 <__aeabi_i2d>
 8001776:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800177a:	f7fe ff3d 	bl	80005f8 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe fd7f 	bl	8000288 <__aeabi_dsub>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double V1 = (M1 > 500 || M1 < -500) ? fmin(fmax(M1, -2600), 2600) : ((M1 < -0) ? -500 : ((M1 > 0) ? 500 : 0));
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4bb1      	ldr	r3, [pc, #708]	@ (8001a5c <nanjak+0x484>)
 8001798:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800179c:	f7ff f9bc 	bl	8000b18 <__aeabi_dcmpgt>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d109      	bne.n	80017ba <nanjak+0x1e2>
 80017a6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8001a30 <nanjak+0x458>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80017b0:	f7ff f994 	bl	8000adc <__aeabi_dcmplt>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d016      	beq.n	80017e8 <nanjak+0x210>
 80017ba:	ed9f 1b9f 	vldr	d1, [pc, #636]	@ 8001a38 <nanjak+0x460>
 80017be:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 80017c2:	f00c fe20 	bl	800e406 <fmax>
 80017c6:	eeb0 7a40 	vmov.f32	s14, s0
 80017ca:	eef0 7a60 	vmov.f32	s15, s1
 80017ce:	ed9f 1b9c 	vldr	d1, [pc, #624]	@ 8001a40 <nanjak+0x468>
 80017d2:	eeb0 0a47 	vmov.f32	s0, s14
 80017d6:	eef0 0a67 	vmov.f32	s1, s15
 80017da:	f00c fe3e 	bl	800e45a <fmin>
 80017de:	eeb0 7a40 	vmov.f32	s14, s0
 80017e2:	eef0 7a60 	vmov.f32	s15, s1
 80017e6:	e01d      	b.n	8001824 <nanjak+0x24c>
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80017f4:	f7ff f972 	bl	8000adc <__aeabi_dcmplt>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <nanjak+0x22c>
 80017fe:	ed9f 7b8c 	vldr	d7, [pc, #560]	@ 8001a30 <nanjak+0x458>
 8001802:	e00f      	b.n	8001824 <nanjak+0x24c>
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001810:	f7ff f982 	bl	8000b18 <__aeabi_dcmpgt>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <nanjak+0x248>
 800181a:	ed9f 7b8b 	vldr	d7, [pc, #556]	@ 8001a48 <nanjak+0x470>
 800181e:	e001      	b.n	8001824 <nanjak+0x24c>
 8001820:	ed9f 7b8b 	vldr	d7, [pc, #556]	@ 8001a50 <nanjak+0x478>
 8001824:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    double V2 = (M2 > 500 || M2 < -500) ? fmin(fmax(M2, -2600), 2600) : ((M2 < -0) ? -500 : ((M2 > 0) ? 500 : 0));
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b8b      	ldr	r3, [pc, #556]	@ (8001a5c <nanjak+0x484>)
 800182e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001832:	f7ff f971 	bl	8000b18 <__aeabi_dcmpgt>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <nanjak+0x278>
 800183c:	a37c      	add	r3, pc, #496	@ (adr r3, 8001a30 <nanjak+0x458>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001846:	f7ff f949 	bl	8000adc <__aeabi_dcmplt>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d016      	beq.n	800187e <nanjak+0x2a6>
 8001850:	ed9f 1b79 	vldr	d1, [pc, #484]	@ 8001a38 <nanjak+0x460>
 8001854:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8001858:	f00c fdd5 	bl	800e406 <fmax>
 800185c:	eeb0 7a40 	vmov.f32	s14, s0
 8001860:	eef0 7a60 	vmov.f32	s15, s1
 8001864:	ed9f 1b76 	vldr	d1, [pc, #472]	@ 8001a40 <nanjak+0x468>
 8001868:	eeb0 0a47 	vmov.f32	s0, s14
 800186c:	eef0 0a67 	vmov.f32	s1, s15
 8001870:	f00c fdf3 	bl	800e45a <fmin>
 8001874:	eeb0 7a40 	vmov.f32	s14, s0
 8001878:	eef0 7a60 	vmov.f32	s15, s1
 800187c:	e01d      	b.n	80018ba <nanjak+0x2e2>
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800188a:	f7ff f927 	bl	8000adc <__aeabi_dcmplt>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <nanjak+0x2c2>
 8001894:	ed9f 7b66 	vldr	d7, [pc, #408]	@ 8001a30 <nanjak+0x458>
 8001898:	e00f      	b.n	80018ba <nanjak+0x2e2>
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80018a6:	f7ff f937 	bl	8000b18 <__aeabi_dcmpgt>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d002      	beq.n	80018b6 <nanjak+0x2de>
 80018b0:	ed9f 7b65 	vldr	d7, [pc, #404]	@ 8001a48 <nanjak+0x470>
 80018b4:	e001      	b.n	80018ba <nanjak+0x2e2>
 80018b6:	ed9f 7b66 	vldr	d7, [pc, #408]	@ 8001a50 <nanjak+0x478>
 80018ba:	ed87 7b08 	vstr	d7, [r7, #32]
    double V3 = (M3 > 500 || M3 < -500) ? fmin(fmax(M3, -2600), 2600) : ((M3 < -0) ? -500 : ((M3 > 0) ? 500 : 0));
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4b66      	ldr	r3, [pc, #408]	@ (8001a5c <nanjak+0x484>)
 80018c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80018c8:	f7ff f926 	bl	8000b18 <__aeabi_dcmpgt>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <nanjak+0x30e>
 80018d2:	a357      	add	r3, pc, #348	@ (adr r3, 8001a30 <nanjak+0x458>)
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80018dc:	f7ff f8fe 	bl	8000adc <__aeabi_dcmplt>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d016      	beq.n	8001914 <nanjak+0x33c>
 80018e6:	ed9f 1b54 	vldr	d1, [pc, #336]	@ 8001a38 <nanjak+0x460>
 80018ea:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80018ee:	f00c fd8a 	bl	800e406 <fmax>
 80018f2:	eeb0 7a40 	vmov.f32	s14, s0
 80018f6:	eef0 7a60 	vmov.f32	s15, s1
 80018fa:	ed9f 1b51 	vldr	d1, [pc, #324]	@ 8001a40 <nanjak+0x468>
 80018fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001902:	eef0 0a67 	vmov.f32	s1, s15
 8001906:	f00c fda8 	bl	800e45a <fmin>
 800190a:	eeb0 7a40 	vmov.f32	s14, s0
 800190e:	eef0 7a60 	vmov.f32	s15, s1
 8001912:	e01d      	b.n	8001950 <nanjak+0x378>
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001920:	f7ff f8dc 	bl	8000adc <__aeabi_dcmplt>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <nanjak+0x358>
 800192a:	ed9f 7b41 	vldr	d7, [pc, #260]	@ 8001a30 <nanjak+0x458>
 800192e:	e00f      	b.n	8001950 <nanjak+0x378>
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800193c:	f7ff f8ec 	bl	8000b18 <__aeabi_dcmpgt>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <nanjak+0x374>
 8001946:	ed9f 7b40 	vldr	d7, [pc, #256]	@ 8001a48 <nanjak+0x470>
 800194a:	e001      	b.n	8001950 <nanjak+0x378>
 800194c:	ed9f 7b40 	vldr	d7, [pc, #256]	@ 8001a50 <nanjak+0x478>
 8001950:	ed87 7b06 	vstr	d7, [r7, #24]
    double V4 = (M4 > 500 || M4 < -500) ? fmin(fmax(M4, -2600), 2600) : ((M4 < -0) ? -500 : ((M4 > 0) ? 500 : 0));
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4b40      	ldr	r3, [pc, #256]	@ (8001a5c <nanjak+0x484>)
 800195a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800195e:	f7ff f8db 	bl	8000b18 <__aeabi_dcmpgt>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d109      	bne.n	800197c <nanjak+0x3a4>
 8001968:	a331      	add	r3, pc, #196	@ (adr r3, 8001a30 <nanjak+0x458>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001972:	f7ff f8b3 	bl	8000adc <__aeabi_dcmplt>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d016      	beq.n	80019aa <nanjak+0x3d2>
 800197c:	ed9f 1b2e 	vldr	d1, [pc, #184]	@ 8001a38 <nanjak+0x460>
 8001980:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8001984:	f00c fd3f 	bl	800e406 <fmax>
 8001988:	eeb0 7a40 	vmov.f32	s14, s0
 800198c:	eef0 7a60 	vmov.f32	s15, s1
 8001990:	ed9f 1b2b 	vldr	d1, [pc, #172]	@ 8001a40 <nanjak+0x468>
 8001994:	eeb0 0a47 	vmov.f32	s0, s14
 8001998:	eef0 0a67 	vmov.f32	s1, s15
 800199c:	f00c fd5d 	bl	800e45a <fmin>
 80019a0:	eeb0 7a40 	vmov.f32	s14, s0
 80019a4:	eef0 7a60 	vmov.f32	s15, s1
 80019a8:	e01d      	b.n	80019e6 <nanjak+0x40e>
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80019b6:	f7ff f891 	bl	8000adc <__aeabi_dcmplt>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <nanjak+0x3ee>
 80019c0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8001a30 <nanjak+0x458>
 80019c4:	e00f      	b.n	80019e6 <nanjak+0x40e>
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80019d2:	f7ff f8a1 	bl	8000b18 <__aeabi_dcmpgt>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <nanjak+0x40a>
 80019dc:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8001a48 <nanjak+0x470>
 80019e0:	e001      	b.n	80019e6 <nanjak+0x40e>
 80019e2:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8001a50 <nanjak+0x478>
 80019e6:	ed87 7b04 	vstr	d7, [r7, #16]

    setMotorSpeed(6, V1);
 80019ea:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80019ee:	2006      	movs	r0, #6
 80019f0:	f7ff fb34 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, V2);
 80019f4:	ed97 0b08 	vldr	d0, [r7, #32]
 80019f8:	2008      	movs	r0, #8
 80019fa:	f7ff fb2f 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, V3);
 80019fe:	ed97 0b06 	vldr	d0, [r7, #24]
 8001a02:	2004      	movs	r0, #4
 8001a04:	f7ff fb2a 	bl	800105c <setMotorSpeed>
    setMotorSpeed(7, V4);
 8001a08:	ed97 0b04 	vldr	d0, [r7, #16]
 8001a0c:	2007      	movs	r0, #7
 8001a0e:	f7ff fb25 	bl	800105c <setMotorSpeed>
}
 8001a12:	bf00      	nop
 8001a14:	3758      	adds	r7, #88	@ 0x58
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	f3af 8000 	nop.w
 8001a20:	667f3bce 	.word	0x667f3bce
 8001a24:	3fe6a09e 	.word	0x3fe6a09e
 8001a28:	667f3bcb 	.word	0x667f3bcb
 8001a2c:	3fe6a09e 	.word	0x3fe6a09e
 8001a30:	00000000 	.word	0x00000000
 8001a34:	c07f4000 	.word	0xc07f4000
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	c0a45000 	.word	0xc0a45000
 8001a40:	00000000 	.word	0x00000000
 8001a44:	40a45000 	.word	0x40a45000
 8001a48:	00000000 	.word	0x00000000
 8001a4c:	407f4000 	.word	0x407f4000
	...
 8001a58:	3ff33333 	.word	0x3ff33333
 8001a5c:	407f4000 	.word	0x407f4000
 8001a60:	66666666 	.word	0x66666666
 8001a64:	401e6666 	.word	0x401e6666
 8001a68:	667f3bcc 	.word	0x667f3bcc
 8001a6c:	bfe6a09e 	.word	0xbfe6a09e
 8001a70:	667f3bcd 	.word	0x667f3bcd
 8001a74:	3fe6a09e 	.word	0x3fe6a09e
 8001a78:	667f3bcd 	.word	0x667f3bcd
 8001a7c:	bfe6a09e 	.word	0xbfe6a09e
 8001a80:	9999999a 	.word	0x9999999a
 8001a84:	3ff19999 	.word	0x3ff19999
 8001a88:	667f3bcc 	.word	0x667f3bcc
 8001a8c:	3fe6a09e 	.word	0x3fe6a09e
 8001a90:	667f3bce 	.word	0x667f3bce
 8001a94:	bfe6a09e 	.word	0xbfe6a09e

08001a98 <lcd_write_nibble>:
#define D7_BIT 7      // Data 7 bit

uint8_t backlight_state = 1;

void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	460a      	mov	r2, r1
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	79bb      	ldrb	r3, [r7, #6]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8001aba:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <lcd_write_nibble+0x7c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	b25a      	sxtb	r2, r3
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	b25b      	sxtb	r3, r3
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	b25b      	sxtb	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8001ad8:	f107 020f 	add.w	r2, r7, #15
 8001adc:	2364      	movs	r3, #100	@ 0x64
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	214e      	movs	r1, #78	@ 0x4e
 8001ae4:	480c      	ldr	r0, [pc, #48]	@ (8001b18 <lcd_write_nibble+0x80>)
 8001ae6:	f004 ffbf 	bl	8006a68 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8001aea:	2001      	movs	r0, #1
 8001aec:	f004 faca 	bl	8006084 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	f023 0304 	bic.w	r3, r3, #4
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8001afa:	f107 020f 	add.w	r2, r7, #15
 8001afe:	2364      	movs	r3, #100	@ 0x64
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2301      	movs	r3, #1
 8001b04:	214e      	movs	r1, #78	@ 0x4e
 8001b06:	4804      	ldr	r0, [pc, #16]	@ (8001b18 <lcd_write_nibble+0x80>)
 8001b08:	f004 ffae 	bl	8006a68 <HAL_I2C_Master_Transmit>
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200000c8 	.word	0x200000c8
 8001b18:	200002e4 	.word	0x200002e4

08001b1c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ffad 	bl	8001a98 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 8001b3e:	7bbb      	ldrb	r3, [r7, #14]
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ffa8 	bl	8001a98 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d002      	beq.n	8001b54 <lcd_send_cmd+0x38>
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d102      	bne.n	8001b5a <lcd_send_cmd+0x3e>
  {
    HAL_Delay(2);
 8001b54:	2002      	movs	r0, #2
 8001b56:	f004 fa95 	bl	8006084 <HAL_Delay>
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff8a 	bl	8001a98 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 8001b84:	7bbb      	ldrb	r3, [r7, #14]
 8001b86:	2101      	movs	r1, #1
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff85 	bl	8001a98 <lcd_write_nibble>
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <lcd_init>:

void lcd_init()
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8001b9a:	2032      	movs	r0, #50	@ 0x32
 8001b9c:	f004 fa72 	bl	8006084 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2003      	movs	r0, #3
 8001ba4:	f7ff ff78 	bl	8001a98 <lcd_write_nibble>
  HAL_Delay(5);
 8001ba8:	2005      	movs	r0, #5
 8001baa:	f004 fa6b 	bl	8006084 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f7ff ff71 	bl	8001a98 <lcd_write_nibble>
  HAL_Delay(1);
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f004 fa64 	bl	8006084 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2003      	movs	r0, #3
 8001bc0:	f7ff ff6a 	bl	8001a98 <lcd_write_nibble>
  HAL_Delay(1);
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f004 fa5d 	bl	8006084 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2002      	movs	r0, #2
 8001bce:	f7ff ff63 	bl	8001a98 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 8001bd2:	2028      	movs	r0, #40	@ 0x28
 8001bd4:	f7ff ffa2 	bl	8001b1c <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8001bd8:	200c      	movs	r0, #12
 8001bda:	f7ff ff9f 	bl	8001b1c <lcd_send_cmd>
  lcd_send_cmd(0x06);
 8001bde:	2006      	movs	r0, #6
 8001be0:	f7ff ff9c 	bl	8001b1c <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7ff ff99 	bl	8001b1c <lcd_send_cmd>
  HAL_Delay(2);
 8001bea:	2002      	movs	r0, #2
 8001bec:	f004 fa4a 	bl	8006084 <HAL_Delay>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  while (*str)
 8001bfc:	e006      	b.n	8001c0c <lcd_write_string+0x18>
  {
    lcd_send_data(*str++);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ffab 	bl	8001b62 <lcd_send_data>
  while (*str)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f4      	bne.n	8001bfe <lcd_write_string+0xa>
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	460a      	mov	r2, r1
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	71bb      	strb	r3, [r7, #6]
  uint8_t address;
  switch (row)
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d816      	bhi.n	8001c64 <lcd_set_cursor+0x44>
 8001c36:	a201      	add	r2, pc, #4	@ (adr r2, 8001c3c <lcd_set_cursor+0x1c>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001c4d 	.word	0x08001c4d
 8001c40:	08001c53 	.word	0x08001c53
 8001c44:	08001c59 	.word	0x08001c59
 8001c48:	08001c5f 	.word	0x08001c5f
  {
  case 0:
    address = 0x00;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8001c50:	e00a      	b.n	8001c68 <lcd_set_cursor+0x48>
  case 1:
    address = 0x40;
 8001c52:	2340      	movs	r3, #64	@ 0x40
 8001c54:	73fb      	strb	r3, [r7, #15]
    break;
 8001c56:	e007      	b.n	8001c68 <lcd_set_cursor+0x48>
  case 2:
    address = 0x14;
 8001c58:	2314      	movs	r3, #20
 8001c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8001c5c:	e004      	b.n	8001c68 <lcd_set_cursor+0x48>
  case 3:
    address = 0x54;
 8001c5e:	2354      	movs	r3, #84	@ 0x54
 8001c60:	73fb      	strb	r3, [r7, #15]
    break;
 8001c62:	e001      	b.n	8001c68 <lcd_set_cursor+0x48>
  default:
    address = 0x00;
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]
  }
  address += column;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	79bb      	ldrb	r3, [r7, #6]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	73fb      	strb	r3, [r7, #15]
  lcd_send_cmd(0x80 | address);
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff4f 	bl	8001b1c <lcd_send_cmd>
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop

08001c88 <lcd_clear>:

void lcd_clear(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x01);
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f7ff ff45 	bl	8001b1c <lcd_send_cmd>
  HAL_Delay(2);
 8001c92:	2002      	movs	r0, #2
 8001c94:	f004 f9f6 	bl	8006084 <HAL_Delay>
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_GPIO_EXTI_Callback>:
uint32_t lastDebounceTime4 = 0;

uint8_t mode = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	80fb      	strh	r3, [r7, #6]
	// ENCODER
	if((GPIO_Pin == EB_1_Pin) && (HAL_GPIO_ReadPin(EB_1_GPIO_Port, EB_1_Pin) == GPIO_PIN_SET))
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d11d      	bne.n	8001ce8 <HAL_GPIO_EXTI_Callback+0x4c>
 8001cac:	2108      	movs	r1, #8
 8001cae:	4890      	ldr	r0, [pc, #576]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x254>)
 8001cb0:	f004 fd4c 	bl	800674c <HAL_GPIO_ReadPin>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d116      	bne.n	8001ce8 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		HAL_GPIO_ReadPin(EA_1_GPIO_Port, EA_1_Pin) ? counter1-- : counter1++;
 8001cba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cbe:	488d      	ldr	r0, [pc, #564]	@ (8001ef4 <HAL_GPIO_EXTI_Callback+0x258>)
 8001cc0:	f004 fd44 	bl	800674c <HAL_GPIO_ReadPin>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <HAL_GPIO_EXTI_Callback+0x3a>
 8001cca:	4b8b      	ldr	r3, [pc, #556]	@ (8001ef8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	4a89      	ldr	r2, [pc, #548]	@ (8001ef8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e004      	b.n	8001ce0 <HAL_GPIO_EXTI_Callback+0x44>
 8001cd6:	4b88      	ldr	r3, [pc, #544]	@ (8001ef8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	4a86      	ldr	r2, [pc, #536]	@ (8001ef8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001cde:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_1_Pin);
 8001ce0:	4b86      	ldr	r3, [pc, #536]	@ (8001efc <HAL_GPIO_EXTI_Callback+0x260>)
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	615a      	str	r2, [r3, #20]
 8001ce6:	e15b      	b.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_2_Pin) && (HAL_GPIO_ReadPin(EB_2_GPIO_Port, EB_2_Pin) == GPIO_PIN_SET))
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d11c      	bne.n	8001d28 <HAL_GPIO_EXTI_Callback+0x8c>
 8001cee:	2102      	movs	r1, #2
 8001cf0:	4883      	ldr	r0, [pc, #524]	@ (8001f00 <HAL_GPIO_EXTI_Callback+0x264>)
 8001cf2:	f004 fd2b 	bl	800674c <HAL_GPIO_ReadPin>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d115      	bne.n	8001d28 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		HAL_GPIO_ReadPin(EA_2_GPIO_Port, EA_2_Pin) ? counter2-- : counter2++;
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	4880      	ldr	r0, [pc, #512]	@ (8001f00 <HAL_GPIO_EXTI_Callback+0x264>)
 8001d00:	f004 fd24 	bl	800674c <HAL_GPIO_ReadPin>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_GPIO_EXTI_Callback+0x7a>
 8001d0a:	4b7e      	ldr	r3, [pc, #504]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0x268>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	4a7c      	ldr	r2, [pc, #496]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0x268>)
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	e004      	b.n	8001d20 <HAL_GPIO_EXTI_Callback+0x84>
 8001d16:	4b7b      	ldr	r3, [pc, #492]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0x268>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	4a79      	ldr	r2, [pc, #484]	@ (8001f04 <HAL_GPIO_EXTI_Callback+0x268>)
 8001d1e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_2_Pin);
 8001d20:	4b76      	ldr	r3, [pc, #472]	@ (8001efc <HAL_GPIO_EXTI_Callback+0x260>)
 8001d22:	2202      	movs	r2, #2
 8001d24:	615a      	str	r2, [r3, #20]
 8001d26:	e13b      	b.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_3_Pin) && (HAL_GPIO_ReadPin(EB_3_GPIO_Port, EB_3_Pin) == GPIO_PIN_SET))
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	2b20      	cmp	r3, #32
 8001d2c:	d11c      	bne.n	8001d68 <HAL_GPIO_EXTI_Callback+0xcc>
 8001d2e:	2120      	movs	r1, #32
 8001d30:	486f      	ldr	r0, [pc, #444]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x254>)
 8001d32:	f004 fd0b 	bl	800674c <HAL_GPIO_ReadPin>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d115      	bne.n	8001d68 <HAL_GPIO_EXTI_Callback+0xcc>
	{
		HAL_GPIO_ReadPin(EA_3_GPIO_Port, EA_3_Pin) ? counter3-- : counter3++;
 8001d3c:	2110      	movs	r1, #16
 8001d3e:	486c      	ldr	r0, [pc, #432]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0x254>)
 8001d40:	f004 fd04 	bl	800674c <HAL_GPIO_ReadPin>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_GPIO_EXTI_Callback+0xba>
 8001d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f08 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	4a6d      	ldr	r2, [pc, #436]	@ (8001f08 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e004      	b.n	8001d60 <HAL_GPIO_EXTI_Callback+0xc4>
 8001d56:	4b6c      	ldr	r3, [pc, #432]	@ (8001f08 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f08 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001d5e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_3_Pin);
 8001d60:	4b66      	ldr	r3, [pc, #408]	@ (8001efc <HAL_GPIO_EXTI_Callback+0x260>)
 8001d62:	2220      	movs	r2, #32
 8001d64:	615a      	str	r2, [r3, #20]
 8001d66:	e11b      	b.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_1_Pin) && (HAL_GPIO_ReadPin(EinB_1_GPIO_Port, EinB_1_Pin) == GPIO_PIN_SET))
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d11c      	bne.n	8001da8 <HAL_GPIO_EXTI_Callback+0x10c>
 8001d6e:	2104      	movs	r1, #4
 8001d70:	4863      	ldr	r0, [pc, #396]	@ (8001f00 <HAL_GPIO_EXTI_Callback+0x264>)
 8001d72:	f004 fceb 	bl	800674c <HAL_GPIO_ReadPin>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d115      	bne.n	8001da8 <HAL_GPIO_EXTI_Callback+0x10c>
	{
		HAL_GPIO_ReadPin(EinA_1_GPIO_Port, EinA_1_Pin) ? counterIN1++ : counterIN1--;
 8001d7c:	2108      	movs	r1, #8
 8001d7e:	4860      	ldr	r0, [pc, #384]	@ (8001f00 <HAL_GPIO_EXTI_Callback+0x264>)
 8001d80:	f004 fce4 	bl	800674c <HAL_GPIO_ReadPin>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_GPIO_EXTI_Callback+0xfa>
 8001d8a:	4b60      	ldr	r3, [pc, #384]	@ (8001f0c <HAL_GPIO_EXTI_Callback+0x270>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	4a5e      	ldr	r2, [pc, #376]	@ (8001f0c <HAL_GPIO_EXTI_Callback+0x270>)
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	e004      	b.n	8001da0 <HAL_GPIO_EXTI_Callback+0x104>
 8001d96:	4b5d      	ldr	r3, [pc, #372]	@ (8001f0c <HAL_GPIO_EXTI_Callback+0x270>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	4a5b      	ldr	r2, [pc, #364]	@ (8001f0c <HAL_GPIO_EXTI_Callback+0x270>)
 8001d9e:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_1_Pin);
 8001da0:	4b56      	ldr	r3, [pc, #344]	@ (8001efc <HAL_GPIO_EXTI_Callback+0x260>)
 8001da2:	2204      	movs	r2, #4
 8001da4:	615a      	str	r2, [r3, #20]
 8001da6:	e0fb      	b.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_2_Pin) && (HAL_GPIO_ReadPin(EinB_2_GPIO_Port, EinB_2_Pin) == GPIO_PIN_SET))
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d11c      	bne.n	8001de8 <HAL_GPIO_EXTI_Callback+0x14c>
 8001dae:	2101      	movs	r1, #1
 8001db0:	4850      	ldr	r0, [pc, #320]	@ (8001ef4 <HAL_GPIO_EXTI_Callback+0x258>)
 8001db2:	f004 fccb 	bl	800674c <HAL_GPIO_ReadPin>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d115      	bne.n	8001de8 <HAL_GPIO_EXTI_Callback+0x14c>
	{
		HAL_GPIO_ReadPin(EinA_2_GPIO_Port, EinA_2_Pin) ? counterIN2-- : counterIN2++;
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	484d      	ldr	r0, [pc, #308]	@ (8001ef4 <HAL_GPIO_EXTI_Callback+0x258>)
 8001dc0:	f004 fcc4 	bl	800674c <HAL_GPIO_ReadPin>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_GPIO_EXTI_Callback+0x13a>
 8001dca:	4b51      	ldr	r3, [pc, #324]	@ (8001f10 <HAL_GPIO_EXTI_Callback+0x274>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	4a4f      	ldr	r2, [pc, #316]	@ (8001f10 <HAL_GPIO_EXTI_Callback+0x274>)
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e004      	b.n	8001de0 <HAL_GPIO_EXTI_Callback+0x144>
 8001dd6:	4b4e      	ldr	r3, [pc, #312]	@ (8001f10 <HAL_GPIO_EXTI_Callback+0x274>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	4a4c      	ldr	r2, [pc, #304]	@ (8001f10 <HAL_GPIO_EXTI_Callback+0x274>)
 8001dde:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_2_Pin);
 8001de0:	4b46      	ldr	r3, [pc, #280]	@ (8001efc <HAL_GPIO_EXTI_Callback+0x260>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	615a      	str	r2, [r3, #20]
 8001de6:	e0db      	b.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_3_Pin) && (HAL_GPIO_ReadPin(EinB_3_GPIO_Port, EinB_3_Pin) == GPIO_PIN_SET))
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dee:	d11f      	bne.n	8001e30 <HAL_GPIO_EXTI_Callback+0x194>
 8001df0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001df4:	4847      	ldr	r0, [pc, #284]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0x278>)
 8001df6:	f004 fca9 	bl	800674c <HAL_GPIO_ReadPin>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d117      	bne.n	8001e30 <HAL_GPIO_EXTI_Callback+0x194>
	{
		HAL_GPIO_ReadPin(EinA_3_GPIO_Port, EinA_3_Pin) ? counterIN3++ : counterIN3--;
 8001e00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e04:	4843      	ldr	r0, [pc, #268]	@ (8001f14 <HAL_GPIO_EXTI_Callback+0x278>)
 8001e06:	f004 fca1 	bl	800674c <HAL_GPIO_ReadPin>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_GPIO_EXTI_Callback+0x180>
 8001e10:	4b41      	ldr	r3, [pc, #260]	@ (8001f18 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	4a40      	ldr	r2, [pc, #256]	@ (8001f18 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e004      	b.n	8001e26 <HAL_GPIO_EXTI_Callback+0x18a>
 8001e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f18 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	4a3d      	ldr	r2, [pc, #244]	@ (8001f18 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001e24:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_3_Pin);
 8001e26:	4b35      	ldr	r3, [pc, #212]	@ (8001efc <HAL_GPIO_EXTI_Callback+0x260>)
 8001e28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e2c:	615a      	str	r2, [r3, #20]
 8001e2e:	e0b7      	b.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_4_Pin) && (HAL_GPIO_ReadPin(EinB_4_GPIO_Port, EinB_4_Pin) == GPIO_PIN_SET))
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e36:	d11f      	bne.n	8001e78 <HAL_GPIO_EXTI_Callback+0x1dc>
 8001e38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e3c:	482d      	ldr	r0, [pc, #180]	@ (8001ef4 <HAL_GPIO_EXTI_Callback+0x258>)
 8001e3e:	f004 fc85 	bl	800674c <HAL_GPIO_ReadPin>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d117      	bne.n	8001e78 <HAL_GPIO_EXTI_Callback+0x1dc>
	{
		HAL_GPIO_ReadPin(EinA_4_GPIO_Port, EinA_4_Pin) ? counterIN4-- : counterIN4++;
 8001e48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e4c:	4829      	ldr	r0, [pc, #164]	@ (8001ef4 <HAL_GPIO_EXTI_Callback+0x258>)
 8001e4e:	f004 fc7d 	bl	800674c <HAL_GPIO_ReadPin>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_GPIO_EXTI_Callback+0x1c8>
 8001e58:	4b30      	ldr	r3, [pc, #192]	@ (8001f1c <HAL_GPIO_EXTI_Callback+0x280>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	4a2f      	ldr	r2, [pc, #188]	@ (8001f1c <HAL_GPIO_EXTI_Callback+0x280>)
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e004      	b.n	8001e6e <HAL_GPIO_EXTI_Callback+0x1d2>
 8001e64:	4b2d      	ldr	r3, [pc, #180]	@ (8001f1c <HAL_GPIO_EXTI_Callback+0x280>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8001f1c <HAL_GPIO_EXTI_Callback+0x280>)
 8001e6c:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_4_Pin);
 8001e6e:	4b23      	ldr	r3, [pc, #140]	@ (8001efc <HAL_GPIO_EXTI_Callback+0x260>)
 8001e70:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e74:	615a      	str	r2, [r3, #20]
 8001e76:	e093      	b.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x304>
	}

	// BUTTON
	else if((GPIO_Pin == Button_1_Pin) && (HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin) == GPIO_PIN_RESET))
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e7e:	d119      	bne.n	8001eb4 <HAL_GPIO_EXTI_Callback+0x218>
 8001e80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e84:	4826      	ldr	r0, [pc, #152]	@ (8001f20 <HAL_GPIO_EXTI_Callback+0x284>)
 8001e86:	f004 fc61 	bl	800674c <HAL_GPIO_ReadPin>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d111      	bne.n	8001eb4 <HAL_GPIO_EXTI_Callback+0x218>
	{
		mode = mode + 1;
 8001e90:	4b24      	ldr	r3, [pc, #144]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0x288>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b22      	ldr	r3, [pc, #136]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0x288>)
 8001e9a:	701a      	strb	r2, [r3, #0]
		if(mode > 1)
 8001e9c:	4b21      	ldr	r3, [pc, #132]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0x288>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d902      	bls.n	8001eaa <HAL_GPIO_EXTI_Callback+0x20e>
		{
			mode = 0;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0x288>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_1_Pin);
 8001eaa:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <HAL_GPIO_EXTI_Callback+0x260>)
 8001eac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eb0:	615a      	str	r2, [r3, #20]
 8001eb2:	e075      	b.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_2_Pin) && (HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin) == GPIO_PIN_RESET))
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eba:	d135      	bne.n	8001f28 <HAL_GPIO_EXTI_Callback+0x28c>
 8001ebc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ec0:	4817      	ldr	r0, [pc, #92]	@ (8001f20 <HAL_GPIO_EXTI_Callback+0x284>)
 8001ec2:	f004 fc43 	bl	800674c <HAL_GPIO_ReadPin>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d12d      	bne.n	8001f28 <HAL_GPIO_EXTI_Callback+0x28c>
	{
		mode = mode + 1;
 8001ecc:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0x288>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0x288>)
 8001ed6:	701a      	strb	r2, [r3, #0]
		if(mode > 1)
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0x288>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d902      	bls.n	8001ee6 <HAL_GPIO_EXTI_Callback+0x24a>
		{
			mode = 0;
 8001ee0:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0x288>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_2_Pin);
 8001ee6:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <HAL_GPIO_EXTI_Callback+0x260>)
 8001ee8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eec:	615a      	str	r2, [r3, #20]
 8001eee:	e057      	b.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x304>
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	200004a0 	.word	0x200004a0
 8001efc:	40013c00 	.word	0x40013c00
 8001f00:	40020800 	.word	0x40020800
 8001f04:	200004a4 	.word	0x200004a4
 8001f08:	200004a8 	.word	0x200004a8
 8001f0c:	200004ac 	.word	0x200004ac
 8001f10:	200004b0 	.word	0x200004b0
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	200004b4 	.word	0x200004b4
 8001f1c:	200004b8 	.word	0x200004b8
 8001f20:	40021000 	.word	0x40021000
 8001f24:	20000558 	.word	0x20000558
	}
	else if((GPIO_Pin == Button_3_Pin) && (HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin) == GPIO_PIN_RESET))
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f2e:	d119      	bne.n	8001f64 <HAL_GPIO_EXTI_Callback+0x2c8>
 8001f30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f34:	481c      	ldr	r0, [pc, #112]	@ (8001fa8 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001f36:	f004 fc09 	bl	800674c <HAL_GPIO_ReadPin>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d111      	bne.n	8001f64 <HAL_GPIO_EXTI_Callback+0x2c8>
	{
		mode = mode + 1;
 8001f40:	4b1a      	ldr	r3, [pc, #104]	@ (8001fac <HAL_GPIO_EXTI_Callback+0x310>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	3301      	adds	r3, #1
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	4b18      	ldr	r3, [pc, #96]	@ (8001fac <HAL_GPIO_EXTI_Callback+0x310>)
 8001f4a:	701a      	strb	r2, [r3, #0]
		if(mode > 1)
 8001f4c:	4b17      	ldr	r3, [pc, #92]	@ (8001fac <HAL_GPIO_EXTI_Callback+0x310>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d902      	bls.n	8001f5a <HAL_GPIO_EXTI_Callback+0x2be>
		{
			mode = 0;
 8001f54:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <HAL_GPIO_EXTI_Callback+0x310>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_3_Pin);
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001f5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f60:	615a      	str	r2, [r3, #20]
 8001f62:	e01d      	b.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_4_Pin) && (HAL_GPIO_ReadPin(Button_4_GPIO_Port, Button_4_Pin) == GPIO_PIN_RESET))
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f6a:	d119      	bne.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x304>
 8001f6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f70:	4810      	ldr	r0, [pc, #64]	@ (8001fb4 <HAL_GPIO_EXTI_Callback+0x318>)
 8001f72:	f004 fbeb 	bl	800674c <HAL_GPIO_ReadPin>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d111      	bne.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x304>
	{
		mode = mode + 1;
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <HAL_GPIO_EXTI_Callback+0x310>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <HAL_GPIO_EXTI_Callback+0x310>)
 8001f86:	701a      	strb	r2, [r3, #0]
		if(mode > 1)
 8001f88:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <HAL_GPIO_EXTI_Callback+0x310>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d902      	bls.n	8001f96 <HAL_GPIO_EXTI_Callback+0x2fa>
		{
			mode = 0;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_GPIO_EXTI_Callback+0x310>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_4_Pin);
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001f98:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f9c:	615a      	str	r2, [r3, #20]
	}
}
 8001f9e:	e7ff      	b.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x304>
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	20000558 	.word	0x20000558
 8001fb0:	40013c00 	.word	0x40013c00
 8001fb4:	40020c00 	.word	0x40020c00

08001fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fbc:	b0e0      	sub	sp, #384	@ 0x180
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc0:	f003 ffee 	bl	8005fa0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fc4:	f000 fbbe 	bl	8002744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fc8:	f000 feb0 	bl	8002d2c <MX_GPIO_Init>
  MX_I2C2_Init();
 8001fcc:	f000 fc24 	bl	8002818 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001fd0:	f000 fc50 	bl	8002874 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001fd4:	f000 fd12 	bl	80029fc <MX_TIM2_Init>
  MX_TIM8_Init();
 8001fd8:	f000 fd90 	bl	8002afc <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001fdc:	f000 fe52 	bl	8002c84 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001fe0:	f000 fe7a 	bl	8002cd8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001fe4:	f7ff fdd7 	bl	8001b96 <lcd_init>

  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8001fe8:	2104      	movs	r1, #4
 8001fea:	489f      	ldr	r0, [pc, #636]	@ (8002268 <main+0x2b0>)
 8001fec:	f005 fdd6 	bl	8007b9c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8001ff0:	210c      	movs	r1, #12
 8001ff2:	489d      	ldr	r0, [pc, #628]	@ (8002268 <main+0x2b0>)
 8001ff4:	f005 fdd2 	bl	8007b9c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 8001ff8:	2108      	movs	r1, #8
 8001ffa:	489c      	ldr	r0, [pc, #624]	@ (800226c <main+0x2b4>)
 8001ffc:	f005 fdce 	bl	8007b9c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4);
 8002000:	210c      	movs	r1, #12
 8002002:	489a      	ldr	r0, [pc, #616]	@ (800226c <main+0x2b4>)
 8002004:	f005 fdca 	bl	8007b9c <HAL_TIM_PWM_Start_IT>

  HAL_UART_Receive_IT(&huart1, receive, 1);
 8002008:	2201      	movs	r2, #1
 800200a:	4999      	ldr	r1, [pc, #612]	@ (8002270 <main+0x2b8>)
 800200c:	4899      	ldr	r0, [pc, #612]	@ (8002274 <main+0x2bc>)
 800200e:	f006 fdd5 	bl	8008bbc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, receiveCAM, 1);
 8002012:	2201      	movs	r2, #1
 8002014:	4998      	ldr	r1, [pc, #608]	@ (8002278 <main+0x2c0>)
 8002016:	4899      	ldr	r0, [pc, #612]	@ (800227c <main+0x2c4>)
 8002018:	f006 fdd0 	bl	8008bbc <HAL_UART_Receive_IT>

//  EKF first = {0.0, 6700.0, 0.0};
  EKF second = {4300.0, 6640.0, 0.0};
 800201c:	4b98      	ldr	r3, [pc, #608]	@ (8002280 <main+0x2c8>)
 800201e:	f507 75ac 	add.w	r5, r7, #344	@ 0x158
 8002022:	461c      	mov	r4, r3
 8002024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002028:	e894 0003 	ldmia.w	r4, {r0, r1}
 800202c:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF third = {4300.0, 6400.0, 0.0};
 8002030:	4b94      	ldr	r3, [pc, #592]	@ (8002284 <main+0x2cc>)
 8002032:	f507 75a0 	add.w	r5, r7, #320	@ 0x140
 8002036:	461c      	mov	r4, r3
 8002038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002040:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF fourth = {4300.0, 10000.0, 0.0};
 8002044:	4b90      	ldr	r3, [pc, #576]	@ (8002288 <main+0x2d0>)
 8002046:	f507 7594 	add.w	r5, r7, #296	@ 0x128
 800204a:	461c      	mov	r4, r3
 800204c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002050:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002054:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF fifth = {4300.0, 10000.0, -90.0};
 8002058:	4b8c      	ldr	r3, [pc, #560]	@ (800228c <main+0x2d4>)
 800205a:	f507 7588 	add.w	r5, r7, #272	@ 0x110
 800205e:	461c      	mov	r4, r3
 8002060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002064:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002068:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF sixth = {4300.0, 14000.0, -90.0};
 800206c:	4b88      	ldr	r3, [pc, #544]	@ (8002290 <main+0x2d8>)
 800206e:	f107 05f8 	add.w	r5, r7, #248	@ 0xf8
 8002072:	461c      	mov	r4, r3
 8002074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002078:	e894 0003 	ldmia.w	r4, {r0, r1}
 800207c:	e885 0003 	stmia.w	r5, {r0, r1}
  EKF tuning = {0.0, 1000.0, 0.0};
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	4b80      	ldr	r3, [pc, #512]	@ (8002294 <main+0x2dc>)
 8002092:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0

  EKF waypoint[4] = {
 80020a2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80020a6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80020aa:	4a7b      	ldr	r2, [pc, #492]	@ (8002298 <main+0x2e0>)
 80020ac:	4618      	mov	r0, r3
 80020ae:	4611      	mov	r1, r2
 80020b0:	2360      	movs	r3, #96	@ 0x60
 80020b2:	461a      	mov	r2, r3
 80020b4:	f009 fbc7 	bl	800b846 <memcpy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  EKF position = extendedKalmanFilter();
 80020b8:	f001 fcaa 	bl	8003a10 <extendedKalmanFilter>
 80020bc:	eeb0 5a40 	vmov.f32	s10, s0
 80020c0:	eef0 5a60 	vmov.f32	s11, s1
 80020c4:	eeb0 6a41 	vmov.f32	s12, s2
 80020c8:	eef0 6a61 	vmov.f32	s13, s3
 80020cc:	eeb0 7a42 	vmov.f32	s14, s4
 80020d0:	eef0 7a62 	vmov.f32	s15, s5
 80020d4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80020d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020dc:	ed83 5b00 	vstr	d5, [r3]
 80020e0:	ed83 6b02 	vstr	d6, [r3, #8]
 80020e4:	ed83 7b04 	vstr	d7, [r3, #16]
//	  cek2(tuning, position);
	  cek(position);
 80020e8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80020ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020f0:	ed93 5b00 	vldr	d5, [r3]
 80020f4:	ed93 6b02 	vldr	d6, [r3, #8]
 80020f8:	ed93 7b04 	vldr	d7, [r3, #16]
 80020fc:	eeb0 0a45 	vmov.f32	s0, s10
 8002100:	eef0 0a65 	vmov.f32	s1, s11
 8002104:	eeb0 1a46 	vmov.f32	s2, s12
 8002108:	eef0 1a66 	vmov.f32	s3, s13
 800210c:	eeb0 2a47 	vmov.f32	s4, s14
 8002110:	eef0 2a67 	vmov.f32	s5, s15
 8002114:	f002 fc0c 	bl	8004930 <cek>
//	  displayKalman(position);
//	  displayCounter(1);

//	  bool firstStep = fabs(first.x - position.x) < 10 && fabs(first.y - position.y) < 10 && fabs(first.h - position.h) < 0.5;
	  bool secondStep = fabs(second.x - position.x) < 10 && fabs(second.y - position.y) < 10 && fabs(second.h - position.h) < 0.5;
 8002118:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800211c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002120:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe f8ae 	bl	8000288 <__aeabi_dsub>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4690      	mov	r8, r2
 8002132:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	4b58      	ldr	r3, [pc, #352]	@ (800229c <main+0x2e4>)
 800213c:	4640      	mov	r0, r8
 800213e:	4649      	mov	r1, r9
 8002140:	f7fe fccc 	bl	8000adc <__aeabi_dcmplt>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d034      	beq.n	80021b4 <main+0x1fc>
 800214a:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 800214e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002152:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002156:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800215a:	f7fe f895 	bl	8000288 <__aeabi_dsub>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4692      	mov	sl, r2
 8002164:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	4b4b      	ldr	r3, [pc, #300]	@ (800229c <main+0x2e4>)
 800216e:	4650      	mov	r0, sl
 8002170:	4659      	mov	r1, fp
 8002172:	f7fe fcb3 	bl	8000adc <__aeabi_dcmplt>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01b      	beq.n	80021b4 <main+0x1fc>
 800217c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8002180:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002184:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002188:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800218c:	f7fe f87c 	bl	8000288 <__aeabi_dsub>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	663a      	str	r2, [r7, #96]	@ 0x60
 8002196:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800219a:	667b      	str	r3, [r7, #100]	@ 0x64
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	4b3f      	ldr	r3, [pc, #252]	@ (80022a0 <main+0x2e8>)
 80021a2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80021a6:	f7fe fc99 	bl	8000adc <__aeabi_dcmplt>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <main+0x1fc>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <main+0x1fe>
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
 80021ba:	f897 317f 	ldrb.w	r3, [r7, #383]	@ 0x17f
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
	  bool thirdStep = fabs(third.x - position.x) < 10 && fabs(third.y - position.y) < 10 && fabs(third.h - position.h) < 0.5;
 80021c6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80021ca:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80021ce:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f7fe f857 	bl	8000288 <__aeabi_dsub>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	65ba      	str	r2, [r7, #88]	@ 0x58
 80021e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	4b2c      	ldr	r3, [pc, #176]	@ (800229c <main+0x2e4>)
 80021ec:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80021f0:	f7fe fc74 	bl	8000adc <__aeabi_dcmplt>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d054      	beq.n	80022a4 <main+0x2ec>
 80021fa:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80021fe:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002202:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002206:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800220a:	f7fe f83d 	bl	8000288 <__aeabi_dsub>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	653a      	str	r2, [r7, #80]	@ 0x50
 8002214:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002218:	657b      	str	r3, [r7, #84]	@ 0x54
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	4b1f      	ldr	r3, [pc, #124]	@ (800229c <main+0x2e4>)
 8002220:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002224:	f7fe fc5a 	bl	8000adc <__aeabi_dcmplt>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d03a      	beq.n	80022a4 <main+0x2ec>
 800222e:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8002232:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002236:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800223a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800223e:	f7fe f823 	bl	8000288 <__aeabi_dsub>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800224c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <main+0x2e8>)
 8002254:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002258:	f7fe fc40 	bl	8000adc <__aeabi_dcmplt>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d020      	beq.n	80022a4 <main+0x2ec>
 8002262:	2301      	movs	r3, #1
 8002264:	e01f      	b.n	80022a6 <main+0x2ee>
 8002266:	bf00      	nop
 8002268:	20000338 	.word	0x20000338
 800226c:	200003c8 	.word	0x200003c8
 8002270:	200004bc 	.word	0x200004bc
 8002274:	20000410 	.word	0x20000410
 8002278:	20000508 	.word	0x20000508
 800227c:	20000458 	.word	0x20000458
 8002280:	08010180 	.word	0x08010180
 8002284:	08010198 	.word	0x08010198
 8002288:	080101b0 	.word	0x080101b0
 800228c:	080101c8 	.word	0x080101c8
 8002290:	080101e0 	.word	0x080101e0
 8002294:	408f4000 	.word	0x408f4000
 8002298:	080101f8 	.word	0x080101f8
 800229c:	40240000 	.word	0x40240000
 80022a0:	3fe00000 	.word	0x3fe00000
 80022a4:	2300      	movs	r3, #0
 80022a6:	f887 317e 	strb.w	r3, [r7, #382]	@ 0x17e
 80022aa:	f897 317e 	ldrb.w	r3, [r7, #382]	@ 0x17e
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	f887 317e 	strb.w	r3, [r7, #382]	@ 0x17e
	  bool fourthStep = fabs(fourth.x - position.x) < 10 && fabs(fourth.y - position.y) < 10 && fabs(fourth.h - position.h) < 0.5;
 80022b6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80022ba:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80022be:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	f7fd ffdf 	bl	8000288 <__aeabi_dsub>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80022d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	4bb7      	ldr	r3, [pc, #732]	@ (80025b8 <main+0x600>)
 80022dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80022e0:	f7fe fbfc 	bl	8000adc <__aeabi_dcmplt>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d035      	beq.n	8002356 <main+0x39e>
 80022ea:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 80022ee:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80022f2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022fa:	f7fd ffc5 	bl	8000288 <__aeabi_dsub>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002304:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	4baa      	ldr	r3, [pc, #680]	@ (80025b8 <main+0x600>)
 8002310:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002314:	f7fe fbe2 	bl	8000adc <__aeabi_dcmplt>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d01b      	beq.n	8002356 <main+0x39e>
 800231e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 8002322:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002326:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800232a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800232e:	f7fd ffab 	bl	8000288 <__aeabi_dsub>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	633a      	str	r2, [r7, #48]	@ 0x30
 8002338:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800233c:	637b      	str	r3, [r7, #52]	@ 0x34
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	4b9e      	ldr	r3, [pc, #632]	@ (80025bc <main+0x604>)
 8002344:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002348:	f7fe fbc8 	bl	8000adc <__aeabi_dcmplt>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <main+0x39e>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <main+0x3a0>
 8002356:	2300      	movs	r3, #0
 8002358:	f887 317d 	strb.w	r3, [r7, #381]	@ 0x17d
 800235c:	f897 317d 	ldrb.w	r3, [r7, #381]	@ 0x17d
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	f887 317d 	strb.w	r3, [r7, #381]	@ 0x17d
	  bool fifthStep = fabs(fifth.x - position.x) < 10 && fabs(fifth.y - position.y) < 10 && fabs(fifth.h - position.h) < 0.5;
 8002368:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800236c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002370:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	f7fd ff86 	bl	8000288 <__aeabi_dsub>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002382:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	4b8a      	ldr	r3, [pc, #552]	@ (80025b8 <main+0x600>)
 800238e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002392:	f7fe fba3 	bl	8000adc <__aeabi_dcmplt>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d035      	beq.n	8002408 <main+0x450>
 800239c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80023a0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80023a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023ac:	f7fd ff6c 	bl	8000288 <__aeabi_dsub>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	623a      	str	r2, [r7, #32]
 80023b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	4b7d      	ldr	r3, [pc, #500]	@ (80025b8 <main+0x600>)
 80023c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023c6:	f7fe fb89 	bl	8000adc <__aeabi_dcmplt>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01b      	beq.n	8002408 <main+0x450>
 80023d0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80023d4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80023d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023e0:	f7fd ff52 	bl	8000288 <__aeabi_dsub>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	61ba      	str	r2, [r7, #24]
 80023ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023ee:	61fb      	str	r3, [r7, #28]
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	4b71      	ldr	r3, [pc, #452]	@ (80025bc <main+0x604>)
 80023f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023fa:	f7fe fb6f 	bl	8000adc <__aeabi_dcmplt>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <main+0x450>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <main+0x452>
 8002408:	2300      	movs	r3, #0
 800240a:	f887 317c 	strb.w	r3, [r7, #380]	@ 0x17c
 800240e:	f897 317c 	ldrb.w	r3, [r7, #380]	@ 0x17c
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	f887 317c 	strb.w	r3, [r7, #380]	@ 0x17c
	  bool sixthStep = fabs(sixth.x - position.x) < 10 && fabs(sixth.y - position.y) < 10 && fabs(sixth.h - position.h) < 0.5;
 800241a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800241e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002422:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	f7fd ff2d 	bl	8000288 <__aeabi_dsub>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	613a      	str	r2, [r7, #16]
 8002434:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	4b5e      	ldr	r3, [pc, #376]	@ (80025b8 <main+0x600>)
 8002440:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002444:	f7fe fb4a 	bl	8000adc <__aeabi_dcmplt>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d035      	beq.n	80024ba <main+0x502>
 800244e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8002452:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002456:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800245a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800245e:	f7fd ff13 	bl	8000288 <__aeabi_dsub>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	60ba      	str	r2, [r7, #8]
 8002468:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	4b51      	ldr	r3, [pc, #324]	@ (80025b8 <main+0x600>)
 8002474:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002478:	f7fe fb30 	bl	8000adc <__aeabi_dcmplt>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d01b      	beq.n	80024ba <main+0x502>
 8002482:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8002486:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800248a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800248e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002492:	f7fd fef9 	bl	8000288 <__aeabi_dsub>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	603a      	str	r2, [r7, #0]
 800249c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	4b45      	ldr	r3, [pc, #276]	@ (80025bc <main+0x604>)
 80024a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024ac:	f7fe fb16 	bl	8000adc <__aeabi_dcmplt>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <main+0x502>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <main+0x504>
 80024ba:	2300      	movs	r3, #0
 80024bc:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
 80024c0:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b

	  switch(mode)
 80024cc:	4b3c      	ldr	r3, [pc, #240]	@ (80025c0 <main+0x608>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	2b05      	cmp	r3, #5
 80024d4:	f200 810f 	bhi.w	80026f6 <main+0x73e>
 80024d8:	a201      	add	r2, pc, #4	@ (adr r2, 80024e0 <main+0x528>)
 80024da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024de:	bf00      	nop
 80024e0:	080024f9 	.word	0x080024f9
 80024e4:	0800251d 	.word	0x0800251d
 80024e8:	08002565 	.word	0x08002565
 80024ec:	080025c9 	.word	0x080025c9
 80024f0:	0800266b 	.word	0x0800266b
 80024f4:	080026b1 	.word	0x080026b1
	  {
		  case 1:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80024f8:	2201      	movs	r2, #1
 80024fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024fe:	4831      	ldr	r0, [pc, #196]	@ (80025c4 <main+0x60c>)
 8002500:	f004 f93c 	bl	800677c <HAL_GPIO_WritePin>
			  findtheBall();
 8002504:	f003 f90c 	bl	8005720 <findtheBall>
//			  PID_Tuning(tuning, 5.0, 0.0, 0.0);
			  PID_steptoCoordinate(waypoint, 2, 10, sizeof(waypoint));
 8002508:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800250c:	2260      	movs	r2, #96	@ 0x60
 800250e:	ed9f 0b28 	vldr	d0, [pc, #160]	@ 80025b0 <main+0x5f8>
 8002512:	2102      	movs	r1, #2
 8002514:	4618      	mov	r0, r3
 8002516:	f002 ffff 	bl	8005518 <PID_steptoCoordinate>
//				  if(firstStep)
//				  {
//					  mode = 2;
//				  }
//			  }
			  break;
 800251a:	e101      	b.n	8002720 <main+0x768>
		  case 2:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
 800251e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002522:	4828      	ldr	r0, [pc, #160]	@ (80025c4 <main+0x60c>)
 8002524:	f004 f92a 	bl	800677c <HAL_GPIO_WritePin>
			  PID_Kalman(second, 2);
 8002528:	ed97 5b56 	vldr	d5, [r7, #344]	@ 0x158
 800252c:	ed97 6b58 	vldr	d6, [r7, #352]	@ 0x160
 8002530:	ed97 7b5a 	vldr	d7, [r7, #360]	@ 0x168
 8002534:	2002      	movs	r0, #2
 8002536:	eeb0 0a45 	vmov.f32	s0, s10
 800253a:	eef0 0a65 	vmov.f32	s1, s11
 800253e:	eeb0 1a46 	vmov.f32	s2, s12
 8002542:	eef0 1a66 	vmov.f32	s3, s13
 8002546:	eeb0 2a47 	vmov.f32	s4, s14
 800254a:	eef0 2a67 	vmov.f32	s5, s15
 800254e:	f002 ff37 	bl	80053c0 <PID_Kalman>
			  if(secondStep)
 8002552:	f897 317f 	ldrb.w	r3, [r7, #383]	@ 0x17f
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80d9 	beq.w	800270e <main+0x756>
			  {
				  mode = 3;
 800255c:	4a18      	ldr	r2, [pc, #96]	@ (80025c0 <main+0x608>)
 800255e:	2303      	movs	r3, #3
 8002560:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 8002562:	e0d4      	b.n	800270e <main+0x756>
		  case 3:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002564:	2201      	movs	r2, #1
 8002566:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800256a:	4816      	ldr	r0, [pc, #88]	@ (80025c4 <main+0x60c>)
 800256c:	f004 f906 	bl	800677c <HAL_GPIO_WritePin>
			  PID_Kalman(third, 4);
 8002570:	ed97 5b50 	vldr	d5, [r7, #320]	@ 0x140
 8002574:	ed97 6b52 	vldr	d6, [r7, #328]	@ 0x148
 8002578:	ed97 7b54 	vldr	d7, [r7, #336]	@ 0x150
 800257c:	2004      	movs	r0, #4
 800257e:	eeb0 0a45 	vmov.f32	s0, s10
 8002582:	eef0 0a65 	vmov.f32	s1, s11
 8002586:	eeb0 1a46 	vmov.f32	s2, s12
 800258a:	eef0 1a66 	vmov.f32	s3, s13
 800258e:	eeb0 2a47 	vmov.f32	s4, s14
 8002592:	eef0 2a67 	vmov.f32	s5, s15
 8002596:	f002 ff13 	bl	80053c0 <PID_Kalman>
			  if(thirdStep)
 800259a:	f897 317e 	ldrb.w	r3, [r7, #382]	@ 0x17e
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 80b7 	beq.w	8002712 <main+0x75a>
			  {
				  mode = 4;
 80025a4:	4a06      	ldr	r2, [pc, #24]	@ (80025c0 <main+0x608>)
 80025a6:	2304      	movs	r3, #4
 80025a8:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 80025aa:	e0b2      	b.n	8002712 <main+0x75a>
 80025ac:	f3af 8000 	nop.w
 80025b0:	00000000 	.word	0x00000000
 80025b4:	40240000 	.word	0x40240000
 80025b8:	40240000 	.word	0x40240000
 80025bc:	3fe00000 	.word	0x3fe00000
 80025c0:	20000558 	.word	0x20000558
 80025c4:	40020c00 	.word	0x40020c00
		  case 4:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80025c8:	2200      	movs	r2, #0
 80025ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025ce:	4858      	ldr	r0, [pc, #352]	@ (8002730 <main+0x778>)
 80025d0:	f004 f8d4 	bl	800677c <HAL_GPIO_WritePin>
			  if(position.y < 9000)
 80025d4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80025d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025dc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025e0:	a351      	add	r3, pc, #324	@ (adr r3, 8002728 <main+0x770>)
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	f7fe fa79 	bl	8000adc <__aeabi_dcmplt>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01f      	beq.n	8002630 <main+0x678>
			  {
				  double gain = sensorData[1] * 200;
 80025f0:	4b50      	ldr	r3, [pc, #320]	@ (8002734 <main+0x77c>)
 80025f2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002738 <main+0x780>)
 80025fc:	f7fd fffc 	bl	80005f8 <__aeabi_dmul>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
				  nanjak(0, 2000 + gain, 0);
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	4b4b      	ldr	r3, [pc, #300]	@ (800273c <main+0x784>)
 800260e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8002612:	f7fd fe3b 	bl	800028c <__adddf3>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4610      	mov	r0, r2
 800261c:	4619      	mov	r1, r3
 800261e:	f7fe fa9b 	bl	8000b58 <__aeabi_d2iz>
 8002622:	4603      	mov	r3, r0
 8002624:	2200      	movs	r2, #0
 8002626:	4619      	mov	r1, r3
 8002628:	2000      	movs	r0, #0
 800262a:	f7fe ffd5 	bl	80015d8 <nanjak>
				  if(fourthStep)
				  {
					  mode = 5;
				  }
			  }
			  break;
 800262e:	e072      	b.n	8002716 <main+0x75e>
				  PID_Kalman(fourth, 3);
 8002630:	ed97 5b4a 	vldr	d5, [r7, #296]	@ 0x128
 8002634:	ed97 6b4c 	vldr	d6, [r7, #304]	@ 0x130
 8002638:	ed97 7b4e 	vldr	d7, [r7, #312]	@ 0x138
 800263c:	2003      	movs	r0, #3
 800263e:	eeb0 0a45 	vmov.f32	s0, s10
 8002642:	eef0 0a65 	vmov.f32	s1, s11
 8002646:	eeb0 1a46 	vmov.f32	s2, s12
 800264a:	eef0 1a66 	vmov.f32	s3, s13
 800264e:	eeb0 2a47 	vmov.f32	s4, s14
 8002652:	eef0 2a67 	vmov.f32	s5, s15
 8002656:	f002 feb3 	bl	80053c0 <PID_Kalman>
				  if(fourthStep)
 800265a:	f897 317d 	ldrb.w	r3, [r7, #381]	@ 0x17d
 800265e:	2b00      	cmp	r3, #0
 8002660:	d059      	beq.n	8002716 <main+0x75e>
					  mode = 5;
 8002662:	4a37      	ldr	r2, [pc, #220]	@ (8002740 <main+0x788>)
 8002664:	2305      	movs	r3, #5
 8002666:	7013      	strb	r3, [r2, #0]
			  break;
 8002668:	e055      	b.n	8002716 <main+0x75e>
		  case 5:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800266a:	2201      	movs	r2, #1
 800266c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002670:	482f      	ldr	r0, [pc, #188]	@ (8002730 <main+0x778>)
 8002672:	f004 f883 	bl	800677c <HAL_GPIO_WritePin>
			  PID_Kalman(fifth, 3);
 8002676:	ed97 5b44 	vldr	d5, [r7, #272]	@ 0x110
 800267a:	ed97 6b46 	vldr	d6, [r7, #280]	@ 0x118
 800267e:	ed97 7b48 	vldr	d7, [r7, #288]	@ 0x120
 8002682:	2003      	movs	r0, #3
 8002684:	eeb0 0a45 	vmov.f32	s0, s10
 8002688:	eef0 0a65 	vmov.f32	s1, s11
 800268c:	eeb0 1a46 	vmov.f32	s2, s12
 8002690:	eef0 1a66 	vmov.f32	s3, s13
 8002694:	eeb0 2a47 	vmov.f32	s4, s14
 8002698:	eef0 2a67 	vmov.f32	s5, s15
 800269c:	f002 fe90 	bl	80053c0 <PID_Kalman>
			  if(fifthStep)
 80026a0:	f897 317c 	ldrb.w	r3, [r7, #380]	@ 0x17c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d038      	beq.n	800271a <main+0x762>
			  {
				  mode = 6;
 80026a8:	4a25      	ldr	r2, [pc, #148]	@ (8002740 <main+0x788>)
 80026aa:	2306      	movs	r3, #6
 80026ac:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 80026ae:	e034      	b.n	800271a <main+0x762>
		  case 6:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80026b0:	2200      	movs	r2, #0
 80026b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026b6:	481e      	ldr	r0, [pc, #120]	@ (8002730 <main+0x778>)
 80026b8:	f004 f860 	bl	800677c <HAL_GPIO_WritePin>
			  PID_Kalman(sixth, 3);
 80026bc:	ed97 5b3e 	vldr	d5, [r7, #248]	@ 0xf8
 80026c0:	ed97 6b40 	vldr	d6, [r7, #256]	@ 0x100
 80026c4:	ed97 7b42 	vldr	d7, [r7, #264]	@ 0x108
 80026c8:	2003      	movs	r0, #3
 80026ca:	eeb0 0a45 	vmov.f32	s0, s10
 80026ce:	eef0 0a65 	vmov.f32	s1, s11
 80026d2:	eeb0 1a46 	vmov.f32	s2, s12
 80026d6:	eef0 1a66 	vmov.f32	s3, s13
 80026da:	eeb0 2a47 	vmov.f32	s4, s14
 80026de:	eef0 2a67 	vmov.f32	s5, s15
 80026e2:	f002 fe6d 	bl	80053c0 <PID_Kalman>
			  if(sixthStep)
 80026e6:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d017      	beq.n	800271e <main+0x766>
			  {
				  mode = 0;
 80026ee:	4a14      	ldr	r2, [pc, #80]	@ (8002740 <main+0x788>)
 80026f0:	2300      	movs	r3, #0
 80026f2:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 80026f4:	e013      	b.n	800271e <main+0x766>
		  default:
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026fc:	480c      	ldr	r0, [pc, #48]	@ (8002730 <main+0x778>)
 80026fe:	f004 f83d 	bl	800677c <HAL_GPIO_WritePin>
			  Inverse_Kinematics(0, 0, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	2100      	movs	r1, #0
 8002706:	2000      	movs	r0, #0
 8002708:	f7fe fd1e 	bl	8001148 <Inverse_Kinematics>
			  break;
 800270c:	e008      	b.n	8002720 <main+0x768>
			  break;
 800270e:	bf00      	nop
 8002710:	e006      	b.n	8002720 <main+0x768>
			  break;
 8002712:	bf00      	nop
 8002714:	e004      	b.n	8002720 <main+0x768>
			  break;
 8002716:	bf00      	nop
 8002718:	e002      	b.n	8002720 <main+0x768>
			  break;
 800271a:	bf00      	nop
 800271c:	e000      	b.n	8002720 <main+0x768>
			  break;
 800271e:	bf00      	nop
	  }
	  lcd_clear();
 8002720:	f7ff fab2 	bl	8001c88 <lcd_clear>
  {
 8002724:	e4c8      	b.n	80020b8 <main+0x100>
 8002726:	bf00      	nop
 8002728:	00000000 	.word	0x00000000
 800272c:	40c19400 	.word	0x40c19400
 8002730:	40020c00 	.word	0x40020c00
 8002734:	200004f8 	.word	0x200004f8
 8002738:	40690000 	.word	0x40690000
 800273c:	409f4000 	.word	0x409f4000
 8002740:	20000558 	.word	0x20000558

08002744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b094      	sub	sp, #80	@ 0x50
 8002748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800274a:	f107 0320 	add.w	r3, r7, #32
 800274e:	2230      	movs	r2, #48	@ 0x30
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f008 ff89 	bl	800b66a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002758:	f107 030c 	add.w	r3, r7, #12
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	2300      	movs	r3, #0
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	4b28      	ldr	r3, [pc, #160]	@ (8002810 <SystemClock_Config+0xcc>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	4a27      	ldr	r2, [pc, #156]	@ (8002810 <SystemClock_Config+0xcc>)
 8002772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002776:	6413      	str	r3, [r2, #64]	@ 0x40
 8002778:	4b25      	ldr	r3, [pc, #148]	@ (8002810 <SystemClock_Config+0xcc>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002784:	2300      	movs	r3, #0
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	4b22      	ldr	r3, [pc, #136]	@ (8002814 <SystemClock_Config+0xd0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a21      	ldr	r2, [pc, #132]	@ (8002814 <SystemClock_Config+0xd0>)
 800278e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b1f      	ldr	r3, [pc, #124]	@ (8002814 <SystemClock_Config+0xd0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027a0:	2301      	movs	r3, #1
 80027a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027aa:	2302      	movs	r3, #2
 80027ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027b4:	2308      	movs	r3, #8
 80027b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80027b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80027bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027be:	2302      	movs	r3, #2
 80027c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80027c2:	2307      	movs	r3, #7
 80027c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c6:	f107 0320 	add.w	r3, r7, #32
 80027ca:	4618      	mov	r0, r3
 80027cc:	f004 fca6 	bl	800711c <HAL_RCC_OscConfig>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80027d6:	f000 fcfd 	bl	80031d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027da:	230f      	movs	r3, #15
 80027dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027de:	2302      	movs	r3, #2
 80027e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027f2:	f107 030c 	add.w	r3, r7, #12
 80027f6:	2105      	movs	r1, #5
 80027f8:	4618      	mov	r0, r3
 80027fa:	f004 ff07 	bl	800760c <HAL_RCC_ClockConfig>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002804:	f000 fce6 	bl	80031d4 <Error_Handler>
  }
}
 8002808:	bf00      	nop
 800280a:	3750      	adds	r7, #80	@ 0x50
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40023800 	.word	0x40023800
 8002814:	40007000 	.word	0x40007000

08002818 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800281c:	4b12      	ldr	r3, [pc, #72]	@ (8002868 <MX_I2C2_Init+0x50>)
 800281e:	4a13      	ldr	r2, [pc, #76]	@ (800286c <MX_I2C2_Init+0x54>)
 8002820:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002822:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <MX_I2C2_Init+0x50>)
 8002824:	4a12      	ldr	r2, [pc, #72]	@ (8002870 <MX_I2C2_Init+0x58>)
 8002826:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002828:	4b0f      	ldr	r3, [pc, #60]	@ (8002868 <MX_I2C2_Init+0x50>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800282e:	4b0e      	ldr	r3, [pc, #56]	@ (8002868 <MX_I2C2_Init+0x50>)
 8002830:	2200      	movs	r2, #0
 8002832:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002834:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <MX_I2C2_Init+0x50>)
 8002836:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800283a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800283c:	4b0a      	ldr	r3, [pc, #40]	@ (8002868 <MX_I2C2_Init+0x50>)
 800283e:	2200      	movs	r2, #0
 8002840:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002842:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <MX_I2C2_Init+0x50>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002848:	4b07      	ldr	r3, [pc, #28]	@ (8002868 <MX_I2C2_Init+0x50>)
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800284e:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <MX_I2C2_Init+0x50>)
 8002850:	2200      	movs	r2, #0
 8002852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002854:	4804      	ldr	r0, [pc, #16]	@ (8002868 <MX_I2C2_Init+0x50>)
 8002856:	f003 ffc3 	bl	80067e0 <HAL_I2C_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002860:	f000 fcb8 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}
 8002868:	200002e4 	.word	0x200002e4
 800286c:	40005800 	.word	0x40005800
 8002870:	000186a0 	.word	0x000186a0

08002874 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b096      	sub	sp, #88	@ 0x58
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002888:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
 80028a0:	611a      	str	r2, [r3, #16]
 80028a2:	615a      	str	r2, [r3, #20]
 80028a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	2220      	movs	r2, #32
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f008 fedc 	bl	800b66a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028b2:	4b50      	ldr	r3, [pc, #320]	@ (80029f4 <MX_TIM1_Init+0x180>)
 80028b4:	4a50      	ldr	r2, [pc, #320]	@ (80029f8 <MX_TIM1_Init+0x184>)
 80028b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 80028b8:	4b4e      	ldr	r3, [pc, #312]	@ (80029f4 <MX_TIM1_Init+0x180>)
 80028ba:	2205      	movs	r2, #5
 80028bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028be:	4b4d      	ldr	r3, [pc, #308]	@ (80029f4 <MX_TIM1_Init+0x180>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 80028c4:	4b4b      	ldr	r3, [pc, #300]	@ (80029f4 <MX_TIM1_Init+0x180>)
 80028c6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80028ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028cc:	4b49      	ldr	r3, [pc, #292]	@ (80029f4 <MX_TIM1_Init+0x180>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028d2:	4b48      	ldr	r3, [pc, #288]	@ (80029f4 <MX_TIM1_Init+0x180>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d8:	4b46      	ldr	r3, [pc, #280]	@ (80029f4 <MX_TIM1_Init+0x180>)
 80028da:	2200      	movs	r2, #0
 80028dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028de:	4845      	ldr	r0, [pc, #276]	@ (80029f4 <MX_TIM1_Init+0x180>)
 80028e0:	f005 f8b4 	bl	8007a4c <HAL_TIM_Base_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80028ea:	f000 fc73 	bl	80031d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80028f8:	4619      	mov	r1, r3
 80028fa:	483e      	ldr	r0, [pc, #248]	@ (80029f4 <MX_TIM1_Init+0x180>)
 80028fc:	f005 fc16 	bl	800812c <HAL_TIM_ConfigClockSource>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002906:	f000 fc65 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800290a:	483a      	ldr	r0, [pc, #232]	@ (80029f4 <MX_TIM1_Init+0x180>)
 800290c:	f005 f8ed 	bl	8007aea <HAL_TIM_PWM_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002916:	f000 fc5d 	bl	80031d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002922:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002926:	4619      	mov	r1, r3
 8002928:	4832      	ldr	r0, [pc, #200]	@ (80029f4 <MX_TIM1_Init+0x180>)
 800292a:	f006 f815 	bl	8008958 <HAL_TIMEx_MasterConfigSynchronization>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002934:	f000 fc4e 	bl	80031d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002938:	2360      	movs	r3, #96	@ 0x60
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002940:	2300      	movs	r3, #0
 8002942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002944:	2300      	movs	r3, #0
 8002946:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800294c:	2300      	movs	r3, #0
 800294e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002950:	2300      	movs	r3, #0
 8002952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002954:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002958:	2200      	movs	r2, #0
 800295a:	4619      	mov	r1, r3
 800295c:	4825      	ldr	r0, [pc, #148]	@ (80029f4 <MX_TIM1_Init+0x180>)
 800295e:	f005 fb23 	bl	8007fa8 <HAL_TIM_PWM_ConfigChannel>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002968:	f000 fc34 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800296c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002970:	2204      	movs	r2, #4
 8002972:	4619      	mov	r1, r3
 8002974:	481f      	ldr	r0, [pc, #124]	@ (80029f4 <MX_TIM1_Init+0x180>)
 8002976:	f005 fb17 	bl	8007fa8 <HAL_TIM_PWM_ConfigChannel>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002980:	f000 fc28 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002988:	2208      	movs	r2, #8
 800298a:	4619      	mov	r1, r3
 800298c:	4819      	ldr	r0, [pc, #100]	@ (80029f4 <MX_TIM1_Init+0x180>)
 800298e:	f005 fb0b 	bl	8007fa8 <HAL_TIM_PWM_ConfigChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002998:	f000 fc1c 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800299c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029a0:	220c      	movs	r2, #12
 80029a2:	4619      	mov	r1, r3
 80029a4:	4813      	ldr	r0, [pc, #76]	@ (80029f4 <MX_TIM1_Init+0x180>)
 80029a6:	f005 faff 	bl	8007fa8 <HAL_TIM_PWM_ConfigChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80029b0:	f000 fc10 	bl	80031d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	4619      	mov	r1, r3
 80029d6:	4807      	ldr	r0, [pc, #28]	@ (80029f4 <MX_TIM1_Init+0x180>)
 80029d8:	f006 f83a 	bl	8008a50 <HAL_TIMEx_ConfigBreakDeadTime>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80029e2:	f000 fbf7 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029e6:	4803      	ldr	r0, [pc, #12]	@ (80029f4 <MX_TIM1_Init+0x180>)
 80029e8:	f003 f820 	bl	8005a2c <HAL_TIM_MspPostInit>

}
 80029ec:	bf00      	nop
 80029ee:	3758      	adds	r7, #88	@ 0x58
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000338 	.word	0x20000338
 80029f8:	40010000 	.word	0x40010000

080029fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08e      	sub	sp, #56	@ 0x38
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a10:	f107 0320 	add.w	r3, r7, #32
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
 8002a28:	615a      	str	r2, [r3, #20]
 8002a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a2c:	4b32      	ldr	r3, [pc, #200]	@ (8002af8 <MX_TIM2_Init+0xfc>)
 8002a2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5;
 8002a34:	4b30      	ldr	r3, [pc, #192]	@ (8002af8 <MX_TIM2_Init+0xfc>)
 8002a36:	2205      	movs	r2, #5
 8002a38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002af8 <MX_TIM2_Init+0xfc>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8002a40:	4b2d      	ldr	r3, [pc, #180]	@ (8002af8 <MX_TIM2_Init+0xfc>)
 8002a42:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002a46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a48:	4b2b      	ldr	r3, [pc, #172]	@ (8002af8 <MX_TIM2_Init+0xfc>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002af8 <MX_TIM2_Init+0xfc>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a54:	4828      	ldr	r0, [pc, #160]	@ (8002af8 <MX_TIM2_Init+0xfc>)
 8002a56:	f004 fff9 	bl	8007a4c <HAL_TIM_Base_Init>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a60:	f000 fbb8 	bl	80031d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4821      	ldr	r0, [pc, #132]	@ (8002af8 <MX_TIM2_Init+0xfc>)
 8002a72:	f005 fb5b 	bl	800812c <HAL_TIM_ConfigClockSource>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002a7c:	f000 fbaa 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a80:	481d      	ldr	r0, [pc, #116]	@ (8002af8 <MX_TIM2_Init+0xfc>)
 8002a82:	f005 f832 	bl	8007aea <HAL_TIM_PWM_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002a8c:	f000 fba2 	bl	80031d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a90:	2300      	movs	r3, #0
 8002a92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a98:	f107 0320 	add.w	r3, r7, #32
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4816      	ldr	r0, [pc, #88]	@ (8002af8 <MX_TIM2_Init+0xfc>)
 8002aa0:	f005 ff5a 	bl	8008958 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002aaa:	f000 fb93 	bl	80031d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aae:	2360      	movs	r3, #96	@ 0x60
 8002ab0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	480c      	ldr	r0, [pc, #48]	@ (8002af8 <MX_TIM2_Init+0xfc>)
 8002ac6:	f005 fa6f 	bl	8007fa8 <HAL_TIM_PWM_ConfigChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002ad0:	f000 fb80 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4807      	ldr	r0, [pc, #28]	@ (8002af8 <MX_TIM2_Init+0xfc>)
 8002adc:	f005 fa64 	bl	8007fa8 <HAL_TIM_PWM_ConfigChannel>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002ae6:	f000 fb75 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002aea:	4803      	ldr	r0, [pc, #12]	@ (8002af8 <MX_TIM2_Init+0xfc>)
 8002aec:	f002 ff9e 	bl	8005a2c <HAL_TIM_MspPostInit>

}
 8002af0:	bf00      	nop
 8002af2:	3738      	adds	r7, #56	@ 0x38
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20000380 	.word	0x20000380

08002afc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b096      	sub	sp, #88	@ 0x58
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b02:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	60da      	str	r2, [r3, #12]
 8002b28:	611a      	str	r2, [r3, #16]
 8002b2a:	615a      	str	r2, [r3, #20]
 8002b2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	2220      	movs	r2, #32
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f008 fd98 	bl	800b66a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002b3a:	4b50      	ldr	r3, [pc, #320]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002b3c:	4a50      	ldr	r2, [pc, #320]	@ (8002c80 <MX_TIM8_Init+0x184>)
 8002b3e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5;
 8002b40:	4b4e      	ldr	r3, [pc, #312]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002b42:	2205      	movs	r2, #5
 8002b44:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b46:	4b4d      	ldr	r3, [pc, #308]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 8002b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002b4e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002b52:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b54:	4b49      	ldr	r3, [pc, #292]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002b5a:	4b48      	ldr	r3, [pc, #288]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b60:	4b46      	ldr	r3, [pc, #280]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002b66:	4845      	ldr	r0, [pc, #276]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002b68:	f004 ff70 	bl	8007a4c <HAL_TIM_Base_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002b72:	f000 fb2f 	bl	80031d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002b7c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002b80:	4619      	mov	r1, r3
 8002b82:	483e      	ldr	r0, [pc, #248]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002b84:	f005 fad2 	bl	800812c <HAL_TIM_ConfigClockSource>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002b8e:	f000 fb21 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002b92:	483a      	ldr	r0, [pc, #232]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002b94:	f004 ffa9 	bl	8007aea <HAL_TIM_PWM_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002b9e:	f000 fb19 	bl	80031d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002baa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4832      	ldr	r0, [pc, #200]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002bb2:	f005 fed1 	bl	8008958 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002bbc:	f000 fb0a 	bl	80031d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc0:	2360      	movs	r3, #96	@ 0x60
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002be0:	2200      	movs	r2, #0
 8002be2:	4619      	mov	r1, r3
 8002be4:	4825      	ldr	r0, [pc, #148]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002be6:	f005 f9df 	bl	8007fa8 <HAL_TIM_PWM_ConfigChannel>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002bf0:	f000 faf0 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	481f      	ldr	r0, [pc, #124]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002bfe:	f005 f9d3 	bl	8007fa8 <HAL_TIM_PWM_ConfigChannel>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002c08:	f000 fae4 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c10:	2208      	movs	r2, #8
 8002c12:	4619      	mov	r1, r3
 8002c14:	4819      	ldr	r0, [pc, #100]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002c16:	f005 f9c7 	bl	8007fa8 <HAL_TIM_PWM_ConfigChannel>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002c20:	f000 fad8 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c28:	220c      	movs	r2, #12
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4813      	ldr	r0, [pc, #76]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002c2e:	f005 f9bb 	bl	8007fa8 <HAL_TIM_PWM_ConfigChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002c38:	f000 facc 	bl	80031d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4807      	ldr	r0, [pc, #28]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002c60:	f005 fef6 	bl	8008a50 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002c6a:	f000 fab3 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002c6e:	4803      	ldr	r0, [pc, #12]	@ (8002c7c <MX_TIM8_Init+0x180>)
 8002c70:	f002 fedc 	bl	8005a2c <HAL_TIM_MspPostInit>

}
 8002c74:	bf00      	nop
 8002c76:	3758      	adds	r7, #88	@ 0x58
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	200003c8 	.word	0x200003c8
 8002c80:	40010400 	.word	0x40010400

08002c84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c88:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002c8a:	4a12      	ldr	r2, [pc, #72]	@ (8002cd4 <MX_USART1_UART_Init+0x50>)
 8002c8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8002c8e:	4b10      	ldr	r3, [pc, #64]	@ (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002c90:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002c94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c96:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ca8:	4b09      	ldr	r3, [pc, #36]	@ (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002caa:	220c      	movs	r2, #12
 8002cac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cae:	4b08      	ldr	r3, [pc, #32]	@ (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cba:	4805      	ldr	r0, [pc, #20]	@ (8002cd0 <MX_USART1_UART_Init+0x4c>)
 8002cbc:	f005 ff2e 	bl	8008b1c <HAL_UART_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002cc6:	f000 fa85 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000410 	.word	0x20000410
 8002cd4:	40011000 	.word	0x40011000

08002cd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002cde:	4a12      	ldr	r2, [pc, #72]	@ (8002d28 <MX_USART2_UART_Init+0x50>)
 8002ce0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ce2:	4b10      	ldr	r3, [pc, #64]	@ (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002ce4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ce8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cea:	4b0e      	ldr	r3, [pc, #56]	@ (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cfc:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002cfe:	220c      	movs	r2, #12
 8002d00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d02:	4b08      	ldr	r3, [pc, #32]	@ (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d08:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d0e:	4805      	ldr	r0, [pc, #20]	@ (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002d10:	f005 ff04 	bl	8008b1c <HAL_UART_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d1a:	f000 fa5b 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000458 	.word	0x20000458
 8002d28:	40004400 	.word	0x40004400

08002d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08c      	sub	sp, #48	@ 0x30
 8002d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d32:	f107 031c 	add.w	r3, r7, #28
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	4bb9      	ldr	r3, [pc, #740]	@ (800302c <MX_GPIO_Init+0x300>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4a:	4ab8      	ldr	r2, [pc, #736]	@ (800302c <MX_GPIO_Init+0x300>)
 8002d4c:	f043 0310 	orr.w	r3, r3, #16
 8002d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d52:	4bb6      	ldr	r3, [pc, #728]	@ (800302c <MX_GPIO_Init+0x300>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	4bb2      	ldr	r3, [pc, #712]	@ (800302c <MX_GPIO_Init+0x300>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	4ab1      	ldr	r2, [pc, #708]	@ (800302c <MX_GPIO_Init+0x300>)
 8002d68:	f043 0304 	orr.w	r3, r3, #4
 8002d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d6e:	4baf      	ldr	r3, [pc, #700]	@ (800302c <MX_GPIO_Init+0x300>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	4bab      	ldr	r3, [pc, #684]	@ (800302c <MX_GPIO_Init+0x300>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	4aaa      	ldr	r2, [pc, #680]	@ (800302c <MX_GPIO_Init+0x300>)
 8002d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d8a:	4ba8      	ldr	r3, [pc, #672]	@ (800302c <MX_GPIO_Init+0x300>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	4ba4      	ldr	r3, [pc, #656]	@ (800302c <MX_GPIO_Init+0x300>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	4aa3      	ldr	r2, [pc, #652]	@ (800302c <MX_GPIO_Init+0x300>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da6:	4ba1      	ldr	r3, [pc, #644]	@ (800302c <MX_GPIO_Init+0x300>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	4b9d      	ldr	r3, [pc, #628]	@ (800302c <MX_GPIO_Init+0x300>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	4a9c      	ldr	r2, [pc, #624]	@ (800302c <MX_GPIO_Init+0x300>)
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc2:	4b9a      	ldr	r3, [pc, #616]	@ (800302c <MX_GPIO_Init+0x300>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	4b96      	ldr	r3, [pc, #600]	@ (800302c <MX_GPIO_Init+0x300>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	4a95      	ldr	r2, [pc, #596]	@ (800302c <MX_GPIO_Init+0x300>)
 8002dd8:	f043 0308 	orr.w	r3, r3, #8
 8002ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dde:	4b93      	ldr	r3, [pc, #588]	@ (800302c <MX_GPIO_Init+0x300>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8002dea:	2200      	movs	r2, #0
 8002dec:	2173      	movs	r1, #115	@ 0x73
 8002dee:	4890      	ldr	r0, [pc, #576]	@ (8003030 <MX_GPIO_Init+0x304>)
 8002df0:	f003 fcc4 	bl	800677c <HAL_GPIO_WritePin>
                          |GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);
 8002df4:	2200      	movs	r2, #0
 8002df6:	f243 0130 	movw	r1, #12336	@ 0x3030
 8002dfa:	488e      	ldr	r0, [pc, #568]	@ (8003034 <MX_GPIO_Init+0x308>)
 8002dfc:	f003 fcbe 	bl	800677c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8002e00:	2200      	movs	r2, #0
 8002e02:	f244 0107 	movw	r1, #16391	@ 0x4007
 8002e06:	488c      	ldr	r0, [pc, #560]	@ (8003038 <MX_GPIO_Init+0x30c>)
 8002e08:	f003 fcb8 	bl	800677c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_0|GPIO_PIN_1;
 8002e0c:	2333      	movs	r3, #51	@ 0x33
 8002e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002e10:	2311      	movs	r3, #17
 8002e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e1c:	f107 031c 	add.w	r3, r7, #28
 8002e20:	4619      	mov	r1, r3
 8002e22:	4883      	ldr	r0, [pc, #524]	@ (8003030 <MX_GPIO_Init+0x304>)
 8002e24:	f003 faf6 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e28:	2340      	movs	r3, #64	@ 0x40
 8002e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002e2c:	2311      	movs	r3, #17
 8002e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e38:	f107 031c 	add.w	r3, r7, #28
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	487c      	ldr	r0, [pc, #496]	@ (8003030 <MX_GPIO_Init+0x304>)
 8002e40:	f003 fae8 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002e4a:	2311      	movs	r3, #17
 8002e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e52:	2300      	movs	r3, #0
 8002e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e56:	f107 031c 	add.w	r3, r7, #28
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4875      	ldr	r0, [pc, #468]	@ (8003034 <MX_GPIO_Init+0x308>)
 8002e5e:	f003 fad9 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pins : EA_2_Pin EinA_1_Pin */
  GPIO_InitStruct.Pin = EA_2_Pin|EinA_1_Pin;
 8002e62:	2309      	movs	r3, #9
 8002e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e66:	2300      	movs	r3, #0
 8002e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6e:	f107 031c 	add.w	r3, r7, #28
 8002e72:	4619      	mov	r1, r3
 8002e74:	486f      	ldr	r0, [pc, #444]	@ (8003034 <MX_GPIO_Init+0x308>)
 8002e76:	f003 facd 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_2_Pin EinB_1_Pin */
  GPIO_InitStruct.Pin = EB_2_Pin|EinB_1_Pin;
 8002e7a:	2306      	movs	r3, #6
 8002e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e84:	2301      	movs	r3, #1
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e88:	f107 031c 	add.w	r3, r7, #28
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4869      	ldr	r0, [pc, #420]	@ (8003034 <MX_GPIO_Init+0x308>)
 8002e90:	f003 fac0 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinB_2_Pin EinB_4_Pin */
  GPIO_InitStruct.Pin = EinB_2_Pin|EinB_4_Pin;
 8002e94:	f244 0301 	movw	r3, #16385	@ 0x4001
 8002e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea4:	f107 031c 	add.w	r3, r7, #28
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4864      	ldr	r0, [pc, #400]	@ (800303c <MX_GPIO_Init+0x310>)
 8002eac:	f003 fab2 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinA_2_Pin EinA_4_Pin EA_1_Pin */
  GPIO_InitStruct.Pin = EinA_2_Pin|EinA_4_Pin|EA_1_Pin;
 8002eb0:	f248 4302 	movw	r3, #33794	@ 0x8402
 8002eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	485d      	ldr	r0, [pc, #372]	@ (800303c <MX_GPIO_Init+0x310>)
 8002ec6:	f003 faa5 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 8002eca:	f241 0330 	movw	r3, #4144	@ 0x1030
 8002ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002ed0:	2311      	movs	r3, #17
 8002ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002edc:	f107 031c 	add.w	r3, r7, #28
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4854      	ldr	r0, [pc, #336]	@ (8003034 <MX_GPIO_Init+0x308>)
 8002ee4:	f003 fa96 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 8002ee8:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8002eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002eee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	4619      	mov	r1, r3
 8002efe:	484c      	ldr	r0, [pc, #304]	@ (8003030 <MX_GPIO_Init+0x304>)
 8002f00:	f003 fa88 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinA_3_Pin */
  GPIO_InitStruct.Pin = EinA_3_Pin;
 8002f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinA_3_GPIO_Port, &GPIO_InitStruct);
 8002f12:	f107 031c 	add.w	r3, r7, #28
 8002f16:	4619      	mov	r1, r3
 8002f18:	4847      	ldr	r0, [pc, #284]	@ (8003038 <MX_GPIO_Init+0x30c>)
 8002f1a:	f003 fa7b 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinB_3_Pin */
  GPIO_InitStruct.Pin = EinB_3_Pin;
 8002f1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f24:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinB_3_GPIO_Port, &GPIO_InitStruct);
 8002f2e:	f107 031c 	add.w	r3, r7, #28
 8002f32:	4619      	mov	r1, r3
 8002f34:	4840      	ldr	r0, [pc, #256]	@ (8003038 <MX_GPIO_Init+0x30c>)
 8002f36:	f003 fa6d 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002f3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f40:	2301      	movs	r3, #1
 8002f42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f44:	2302      	movs	r3, #2
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f4c:	f107 031c 	add.w	r3, r7, #28
 8002f50:	4619      	mov	r1, r3
 8002f52:	4839      	ldr	r0, [pc, #228]	@ (8003038 <MX_GPIO_Init+0x30c>)
 8002f54:	f003 fa5e 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_4_Pin */
  GPIO_InitStruct.Pin = Button_4_Pin;
 8002f58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f5e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f64:	2301      	movs	r3, #1
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_4_GPIO_Port, &GPIO_InitStruct);
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4832      	ldr	r0, [pc, #200]	@ (8003038 <MX_GPIO_Init+0x30c>)
 8002f70:	f003 fa50 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002f74:	2307      	movs	r3, #7
 8002f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002f78:	2311      	movs	r3, #17
 8002f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f80:	2303      	movs	r3, #3
 8002f82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f84:	f107 031c 	add.w	r3, r7, #28
 8002f88:	4619      	mov	r1, r3
 8002f8a:	482b      	ldr	r0, [pc, #172]	@ (8003038 <MX_GPIO_Init+0x30c>)
 8002f8c:	f003 fa42 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_1_Pin EB_3_Pin */
  GPIO_InitStruct.Pin = EB_1_Pin|EB_3_Pin;
 8002f90:	2328      	movs	r3, #40	@ 0x28
 8002f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f94:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9e:	f107 031c 	add.w	r3, r7, #28
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4826      	ldr	r0, [pc, #152]	@ (8003040 <MX_GPIO_Init+0x314>)
 8002fa6:	f003 fa35 	bl	8006414 <HAL_GPIO_Init>

  /*Configure GPIO pin : EA_3_Pin */
  GPIO_InitStruct.Pin = EA_3_Pin;
 8002faa:	2310      	movs	r3, #16
 8002fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EA_3_GPIO_Port, &GPIO_InitStruct);
 8002fb6:	f107 031c 	add.w	r3, r7, #28
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4820      	ldr	r0, [pc, #128]	@ (8003040 <MX_GPIO_Init+0x314>)
 8002fbe:	f003 fa29 	bl	8006414 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	2006      	movs	r0, #6
 8002fc8:	f003 f95b 	bl	8006282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002fcc:	2006      	movs	r0, #6
 8002fce:	f003 f974 	bl	80062ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	2007      	movs	r0, #7
 8002fd8:	f003 f953 	bl	8006282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002fdc:	2007      	movs	r0, #7
 8002fde:	f003 f96c 	bl	80062ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	2008      	movs	r0, #8
 8002fe8:	f003 f94b 	bl	8006282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002fec:	2008      	movs	r0, #8
 8002fee:	f003 f964 	bl	80062ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	2009      	movs	r0, #9
 8002ff8:	f003 f943 	bl	8006282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002ffc:	2009      	movs	r0, #9
 8002ffe:	f003 f95c 	bl	80062ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	2100      	movs	r1, #0
 8003006:	2017      	movs	r0, #23
 8003008:	f003 f93b 	bl	8006282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800300c:	2017      	movs	r0, #23
 800300e:	f003 f954 	bl	80062ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	2100      	movs	r1, #0
 8003016:	2028      	movs	r0, #40	@ 0x28
 8003018:	f003 f933 	bl	8006282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800301c:	2028      	movs	r0, #40	@ 0x28
 800301e:	f003 f94c 	bl	80062ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003022:	bf00      	nop
 8003024:	3730      	adds	r7, #48	@ 0x30
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	40021000 	.word	0x40021000
 8003034:	40020800 	.word	0x40020800
 8003038:	40020c00 	.word	0x40020c00
 800303c:	40020000 	.word	0x40020000
 8003040:	40020400 	.word	0x40020400

08003044 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a53      	ldr	r2, [pc, #332]	@ (80031a0 <HAL_UART_RxCpltCallback+0x15c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d14f      	bne.n	80030f6 <HAL_UART_RxCpltCallback+0xb2>
	{
		if(receive[rxIndex] == '\r' || receive[rxIndex] == '\n')
 8003056:	4b53      	ldr	r3, [pc, #332]	@ (80031a4 <HAL_UART_RxCpltCallback+0x160>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a53      	ldr	r2, [pc, #332]	@ (80031a8 <HAL_UART_RxCpltCallback+0x164>)
 800305c:	5cd3      	ldrb	r3, [r2, r3]
 800305e:	2b0d      	cmp	r3, #13
 8003060:	d005      	beq.n	800306e <HAL_UART_RxCpltCallback+0x2a>
 8003062:	4b50      	ldr	r3, [pc, #320]	@ (80031a4 <HAL_UART_RxCpltCallback+0x160>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a50      	ldr	r2, [pc, #320]	@ (80031a8 <HAL_UART_RxCpltCallback+0x164>)
 8003068:	5cd3      	ldrb	r3, [r2, r3]
 800306a:	2b0a      	cmp	r3, #10
 800306c:	d134      	bne.n	80030d8 <HAL_UART_RxCpltCallback+0x94>
		{
			receive[rxIndex] = '\0';
 800306e:	4b4d      	ldr	r3, [pc, #308]	@ (80031a4 <HAL_UART_RxCpltCallback+0x160>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a4d      	ldr	r2, [pc, #308]	@ (80031a8 <HAL_UART_RxCpltCallback+0x164>)
 8003074:	2100      	movs	r1, #0
 8003076:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receive, ",");
 8003078:	494c      	ldr	r1, [pc, #304]	@ (80031ac <HAL_UART_RxCpltCallback+0x168>)
 800307a:	484b      	ldr	r0, [pc, #300]	@ (80031a8 <HAL_UART_RxCpltCallback+0x164>)
 800307c:	f008 fb10 	bl	800b6a0 <strtok>
 8003080:	60f8      	str	r0, [r7, #12]
			dataIndex = 0;
 8003082:	4b4b      	ldr	r3, [pc, #300]	@ (80031b0 <HAL_UART_RxCpltCallback+0x16c>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8003088:	e015      	b.n	80030b6 <HAL_UART_RxCpltCallback+0x72>
			{
				sensorData[dataIndex++] = atof(token);
 800308a:	4b49      	ldr	r3, [pc, #292]	@ (80031b0 <HAL_UART_RxCpltCallback+0x16c>)
 800308c:	681c      	ldr	r4, [r3, #0]
 800308e:	1c63      	adds	r3, r4, #1
 8003090:	4a47      	ldr	r2, [pc, #284]	@ (80031b0 <HAL_UART_RxCpltCallback+0x16c>)
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f006 fcb5 	bl	8009a04 <atof>
 800309a:	eeb0 7a40 	vmov.f32	s14, s0
 800309e:	eef0 7a60 	vmov.f32	s15, s1
 80030a2:	4a44      	ldr	r2, [pc, #272]	@ (80031b4 <HAL_UART_RxCpltCallback+0x170>)
 80030a4:	00e3      	lsls	r3, r4, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	ed83 7b00 	vstr	d7, [r3]
				token = strtok(NULL, ",");
 80030ac:	493f      	ldr	r1, [pc, #252]	@ (80031ac <HAL_UART_RxCpltCallback+0x168>)
 80030ae:	2000      	movs	r0, #0
 80030b0:	f008 faf6 	bl	800b6a0 <strtok>
 80030b4:	60f8      	str	r0, [r7, #12]
			while(token != NULL)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e6      	bne.n	800308a <HAL_UART_RxCpltCallback+0x46>
			}
			memset(receive, 0, sizeof(receive));
 80030bc:	2232      	movs	r2, #50	@ 0x32
 80030be:	2100      	movs	r1, #0
 80030c0:	4839      	ldr	r0, [pc, #228]	@ (80031a8 <HAL_UART_RxCpltCallback+0x164>)
 80030c2:	f008 fad2 	bl	800b66a <memset>
			rxIndex = 0;
 80030c6:	4b37      	ldr	r3, [pc, #220]	@ (80031a4 <HAL_UART_RxCpltCallback+0x160>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, receive, 1);
 80030cc:	2201      	movs	r2, #1
 80030ce:	4936      	ldr	r1, [pc, #216]	@ (80031a8 <HAL_UART_RxCpltCallback+0x164>)
 80030d0:	4839      	ldr	r0, [pc, #228]	@ (80031b8 <HAL_UART_RxCpltCallback+0x174>)
 80030d2:	f005 fd73 	bl	8008bbc <HAL_UART_Receive_IT>
		{
 80030d6:	e05e      	b.n	8003196 <HAL_UART_RxCpltCallback+0x152>
		}
		else
		{
			rxIndex++;
 80030d8:	4b32      	ldr	r3, [pc, #200]	@ (80031a4 <HAL_UART_RxCpltCallback+0x160>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	4a31      	ldr	r2, [pc, #196]	@ (80031a4 <HAL_UART_RxCpltCallback+0x160>)
 80030e0:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart1, receive + rxIndex, 1);
 80030e2:	4b30      	ldr	r3, [pc, #192]	@ (80031a4 <HAL_UART_RxCpltCallback+0x160>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a30      	ldr	r2, [pc, #192]	@ (80031a8 <HAL_UART_RxCpltCallback+0x164>)
 80030e8:	4413      	add	r3, r2
 80030ea:	2201      	movs	r2, #1
 80030ec:	4619      	mov	r1, r3
 80030ee:	4832      	ldr	r0, [pc, #200]	@ (80031b8 <HAL_UART_RxCpltCallback+0x174>)
 80030f0:	f005 fd64 	bl	8008bbc <HAL_UART_Receive_IT>
		{
			indexCAM++;
			HAL_UART_Receive_IT(&huart2, receiveCAM + indexCAM, 1);
		}
	}
}
 80030f4:	e04f      	b.n	8003196 <HAL_UART_RxCpltCallback+0x152>
	else if(huart->Instance == USART2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a30      	ldr	r2, [pc, #192]	@ (80031bc <HAL_UART_RxCpltCallback+0x178>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d14a      	bne.n	8003196 <HAL_UART_RxCpltCallback+0x152>
		if(receiveCAM[indexCAM] == '\r' || receiveCAM[indexCAM] == '\n')
 8003100:	4b2f      	ldr	r3, [pc, #188]	@ (80031c0 <HAL_UART_RxCpltCallback+0x17c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2f      	ldr	r2, [pc, #188]	@ (80031c4 <HAL_UART_RxCpltCallback+0x180>)
 8003106:	5cd3      	ldrb	r3, [r2, r3]
 8003108:	2b0d      	cmp	r3, #13
 800310a:	d005      	beq.n	8003118 <HAL_UART_RxCpltCallback+0xd4>
 800310c:	4b2c      	ldr	r3, [pc, #176]	@ (80031c0 <HAL_UART_RxCpltCallback+0x17c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2c      	ldr	r2, [pc, #176]	@ (80031c4 <HAL_UART_RxCpltCallback+0x180>)
 8003112:	5cd3      	ldrb	r3, [r2, r3]
 8003114:	2b0a      	cmp	r3, #10
 8003116:	d12f      	bne.n	8003178 <HAL_UART_RxCpltCallback+0x134>
			receiveCAM[indexCAM] = '\0';
 8003118:	4b29      	ldr	r3, [pc, #164]	@ (80031c0 <HAL_UART_RxCpltCallback+0x17c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a29      	ldr	r2, [pc, #164]	@ (80031c4 <HAL_UART_RxCpltCallback+0x180>)
 800311e:	2100      	movs	r1, #0
 8003120:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveCAM, ",");
 8003122:	4922      	ldr	r1, [pc, #136]	@ (80031ac <HAL_UART_RxCpltCallback+0x168>)
 8003124:	4827      	ldr	r0, [pc, #156]	@ (80031c4 <HAL_UART_RxCpltCallback+0x180>)
 8003126:	f008 fabb 	bl	800b6a0 <strtok>
 800312a:	60b8      	str	r0, [r7, #8]
			dataindexCAM = 0;
 800312c:	4b26      	ldr	r3, [pc, #152]	@ (80031c8 <HAL_UART_RxCpltCallback+0x184>)
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8003132:	e010      	b.n	8003156 <HAL_UART_RxCpltCallback+0x112>
				camera[dataindexCAM++] = atoi(token);
 8003134:	4b24      	ldr	r3, [pc, #144]	@ (80031c8 <HAL_UART_RxCpltCallback+0x184>)
 8003136:	681c      	ldr	r4, [r3, #0]
 8003138:	1c63      	adds	r3, r4, #1
 800313a:	4a23      	ldr	r2, [pc, #140]	@ (80031c8 <HAL_UART_RxCpltCallback+0x184>)
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	68b8      	ldr	r0, [r7, #8]
 8003140:	f006 fc63 	bl	8009a0a <atoi>
 8003144:	4603      	mov	r3, r0
 8003146:	4a21      	ldr	r2, [pc, #132]	@ (80031cc <HAL_UART_RxCpltCallback+0x188>)
 8003148:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 800314c:	4917      	ldr	r1, [pc, #92]	@ (80031ac <HAL_UART_RxCpltCallback+0x168>)
 800314e:	2000      	movs	r0, #0
 8003150:	f008 faa6 	bl	800b6a0 <strtok>
 8003154:	60b8      	str	r0, [r7, #8]
			while(token != NULL)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1eb      	bne.n	8003134 <HAL_UART_RxCpltCallback+0xf0>
			memset(receiveCAM, 0, sizeof(receiveCAM));
 800315c:	2232      	movs	r2, #50	@ 0x32
 800315e:	2100      	movs	r1, #0
 8003160:	4818      	ldr	r0, [pc, #96]	@ (80031c4 <HAL_UART_RxCpltCallback+0x180>)
 8003162:	f008 fa82 	bl	800b66a <memset>
			indexCAM = 0;
 8003166:	4b16      	ldr	r3, [pc, #88]	@ (80031c0 <HAL_UART_RxCpltCallback+0x17c>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, receiveCAM, 1);
 800316c:	2201      	movs	r2, #1
 800316e:	4915      	ldr	r1, [pc, #84]	@ (80031c4 <HAL_UART_RxCpltCallback+0x180>)
 8003170:	4817      	ldr	r0, [pc, #92]	@ (80031d0 <HAL_UART_RxCpltCallback+0x18c>)
 8003172:	f005 fd23 	bl	8008bbc <HAL_UART_Receive_IT>
		{
 8003176:	e00e      	b.n	8003196 <HAL_UART_RxCpltCallback+0x152>
			indexCAM++;
 8003178:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <HAL_UART_RxCpltCallback+0x17c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	4a10      	ldr	r2, [pc, #64]	@ (80031c0 <HAL_UART_RxCpltCallback+0x17c>)
 8003180:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2, receiveCAM + indexCAM, 1);
 8003182:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <HAL_UART_RxCpltCallback+0x17c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a0f      	ldr	r2, [pc, #60]	@ (80031c4 <HAL_UART_RxCpltCallback+0x180>)
 8003188:	4413      	add	r3, r2
 800318a:	2201      	movs	r2, #1
 800318c:	4619      	mov	r1, r3
 800318e:	4810      	ldr	r0, [pc, #64]	@ (80031d0 <HAL_UART_RxCpltCallback+0x18c>)
 8003190:	f005 fd14 	bl	8008bbc <HAL_UART_Receive_IT>
}
 8003194:	e7ff      	b.n	8003196 <HAL_UART_RxCpltCallback+0x152>
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	bd90      	pop	{r4, r7, pc}
 800319e:	bf00      	nop
 80031a0:	40011000 	.word	0x40011000
 80031a4:	200004f0 	.word	0x200004f0
 80031a8:	200004bc 	.word	0x200004bc
 80031ac:	08010258 	.word	0x08010258
 80031b0:	200004f4 	.word	0x200004f4
 80031b4:	200004f8 	.word	0x200004f8
 80031b8:	20000410 	.word	0x20000410
 80031bc:	40004400 	.word	0x40004400
 80031c0:	2000053c 	.word	0x2000053c
 80031c4:	20000508 	.word	0x20000508
 80031c8:	20000540 	.word	0x20000540
 80031cc:	20000544 	.word	0x20000544
 80031d0:	20000458 	.word	0x20000458

080031d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031d8:	b672      	cpsid	i
}
 80031da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <Error_Handler+0x8>

080031e0 <odometry>:
/* END */

extern int camera[5];

robotPosition odometry()
{
 80031e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031e4:	b0bc      	sub	sp, #240	@ 0xf0
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
    robotPosition currentPosition;

    /* ENCODER INTERNAL */
    int dn1_in = counterIN1 - oldEncIN1;
 80031ea:	4bc5      	ldr	r3, [pc, #788]	@ (8003500 <odometry+0x320>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4bc5      	ldr	r3, [pc, #788]	@ (8003504 <odometry+0x324>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int dn2_in = counterIN2 - oldEncIN2;
 80031f8:	4bc3      	ldr	r3, [pc, #780]	@ (8003508 <odometry+0x328>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4bc3      	ldr	r3, [pc, #780]	@ (800350c <odometry+0x32c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    int dn3_in = counterIN3 - oldEncIN3;
 8003206:	4bc2      	ldr	r3, [pc, #776]	@ (8003510 <odometry+0x330>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4bc2      	ldr	r3, [pc, #776]	@ (8003514 <odometry+0x334>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    int dn4_in = counterIN4 - oldEncIN4;
 8003214:	4bc0      	ldr	r3, [pc, #768]	@ (8003518 <odometry+0x338>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4bc0      	ldr	r3, [pc, #768]	@ (800351c <odometry+0x33c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    oldEncIN1 = counterIN1;
 8003222:	4bb7      	ldr	r3, [pc, #732]	@ (8003500 <odometry+0x320>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4ab7      	ldr	r2, [pc, #732]	@ (8003504 <odometry+0x324>)
 8003228:	6013      	str	r3, [r2, #0]
    oldEncIN2 = counterIN2;
 800322a:	4bb7      	ldr	r3, [pc, #732]	@ (8003508 <odometry+0x328>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4ab7      	ldr	r2, [pc, #732]	@ (800350c <odometry+0x32c>)
 8003230:	6013      	str	r3, [r2, #0]
    oldEncIN3 = counterIN3;
 8003232:	4bb7      	ldr	r3, [pc, #732]	@ (8003510 <odometry+0x330>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4ab7      	ldr	r2, [pc, #732]	@ (8003514 <odometry+0x334>)
 8003238:	6013      	str	r3, [r2, #0]
    oldEncIN4 = counterIN4;
 800323a:	4bb7      	ldr	r3, [pc, #732]	@ (8003518 <odometry+0x338>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4ab7      	ldr	r2, [pc, #732]	@ (800351c <odometry+0x33c>)
 8003240:	6013      	str	r3, [r2, #0]

    double dthetaIN = mm_per_tick_IN * ((-dn1_in + dn3_in) + (dn2_in - dn4_in))/(m1_m3 * 4);
 8003242:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003246:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800324a:	1ad2      	subs	r2, r2, r3
 800324c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003254:	1acb      	subs	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd f963 	bl	8000524 <__aeabi_i2d>
 800325e:	a3a0      	add	r3, pc, #640	@ (adr r3, 80034e0 <odometry+0x300>)
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f7fd f9c8 	bl	80005f8 <__aeabi_dmul>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	a39d      	add	r3, pc, #628	@ (adr r3, 80034e8 <odometry+0x308>)
 8003272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003276:	f7fd fae9 	bl	800084c <__aeabi_ddiv>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double dxIN = mm_per_tick_IN * (-dn1_in + dn2_in - dn3_in + dn4_in)/4 * cos(M_PI_4);
 8003282:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003286:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800328a:	1ad2      	subs	r2, r2, r3
 800328c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003290:	1ad2      	subs	r2, r2, r3
 8003292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003296:	4413      	add	r3, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd f943 	bl	8000524 <__aeabi_i2d>
 800329e:	a390      	add	r3, pc, #576	@ (adr r3, 80034e0 <odometry+0x300>)
 80032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a4:	f7fd f9a8 	bl	80005f8 <__aeabi_dmul>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4610      	mov	r0, r2
 80032ae:	4619      	mov	r1, r3
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	4b9a      	ldr	r3, [pc, #616]	@ (8003520 <odometry+0x340>)
 80032b6:	f7fd fac9 	bl	800084c <__aeabi_ddiv>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4610      	mov	r0, r2
 80032c0:	4619      	mov	r1, r3
 80032c2:	a38b      	add	r3, pc, #556	@ (adr r3, 80034f0 <odometry+0x310>)
 80032c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c8:	f7fd f996 	bl	80005f8 <__aeabi_dmul>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    double dyIN = mm_per_tick_IN * (dn1_in + dn2_in + dn3_in + dn4_in)/4 * sin(M_PI_4);
 80032d4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80032d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80032dc:	441a      	add	r2, r3
 80032de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032e2:	441a      	add	r2, r3
 80032e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e8:	4413      	add	r3, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd f91a 	bl	8000524 <__aeabi_i2d>
 80032f0:	a37b      	add	r3, pc, #492	@ (adr r3, 80034e0 <odometry+0x300>)
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	f7fd f97f 	bl	80005f8 <__aeabi_dmul>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4610      	mov	r0, r2
 8003300:	4619      	mov	r1, r3
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	4b86      	ldr	r3, [pc, #536]	@ (8003520 <odometry+0x340>)
 8003308:	f7fd faa0 	bl	800084c <__aeabi_ddiv>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	a378      	add	r3, pc, #480	@ (adr r3, 80034f8 <odometry+0x318>)
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	f7fd f96d 	bl	80005f8 <__aeabi_dmul>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8

    double distanceIN = hypot(dxIN, dyIN);
 8003326:	ed97 1b32 	vldr	d1, [r7, #200]	@ 0xc8
 800332a:	ed97 0b34 	vldr	d0, [r7, #208]	@ 0xd0
 800332e:	f00a ff4f 	bl	800e1d0 <hypot>
 8003332:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0
	double directionIN = atan2(dyIN, dxIN);
 8003336:	ed97 1b34 	vldr	d1, [r7, #208]	@ 0xd0
 800333a:	ed97 0b32 	vldr	d0, [r7, #200]	@ 0xc8
 800333e:	f00a ff43 	bl	800e1c8 <atan2>
 8003342:	ed87 0b2e 	vstr	d0, [r7, #184]	@ 0xb8
	double theta_localIN = directionIN - dthetaIN;
 8003346:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800334a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800334e:	f7fc ff9b 	bl	8000288 <__aeabi_dsub>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0

	xLocalIN += distanceIN * cos(theta_localIN);
 800335a:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 800335e:	f00a ff6b 	bl	800e238 <cos>
 8003362:	ec51 0b10 	vmov	r0, r1, d0
 8003366:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800336a:	f7fd f945 	bl	80005f8 <__aeabi_dmul>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	4b6b      	ldr	r3, [pc, #428]	@ (8003524 <odometry+0x344>)
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	f7fc ff86 	bl	800028c <__adddf3>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4967      	ldr	r1, [pc, #412]	@ (8003524 <odometry+0x344>)
 8003386:	e9c1 2300 	strd	r2, r3, [r1]
	yLocalIN += distanceIN * sin(theta_localIN);
 800338a:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 800338e:	f00a ffa7 	bl	800e2e0 <sin>
 8003392:	ec51 0b10 	vmov	r0, r1, d0
 8003396:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800339a:	f7fd f92d 	bl	80005f8 <__aeabi_dmul>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4610      	mov	r0, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	4b60      	ldr	r3, [pc, #384]	@ (8003528 <odometry+0x348>)
 80033a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ac:	f7fc ff6e 	bl	800028c <__adddf3>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	495c      	ldr	r1, [pc, #368]	@ (8003528 <odometry+0x348>)
 80033b6:	e9c1 2300 	strd	r2, r3, [r1]

    double thetaIN = headingIN + (dthetaIN / 2.0);
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033c2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80033c6:	f7fd fa41 	bl	800084c <__aeabi_ddiv>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	4b56      	ldr	r3, [pc, #344]	@ (800352c <odometry+0x34c>)
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f7fc ff58 	bl	800028c <__adddf3>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
    xGlobalIN += dxIN * cos(thetaIN) + dyIN * sin(thetaIN);
 80033e4:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 80033e8:	f00a ff26 	bl	800e238 <cos>
 80033ec:	ec51 0b10 	vmov	r0, r1, d0
 80033f0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80033f4:	f7fd f900 	bl	80005f8 <__aeabi_dmul>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4690      	mov	r8, r2
 80033fe:	4699      	mov	r9, r3
 8003400:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8003404:	f00a ff6c 	bl	800e2e0 <sin>
 8003408:	ec51 0b10 	vmov	r0, r1, d0
 800340c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8003410:	f7fd f8f2 	bl	80005f8 <__aeabi_dmul>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4640      	mov	r0, r8
 800341a:	4649      	mov	r1, r9
 800341c:	f7fc ff36 	bl	800028c <__adddf3>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	4b41      	ldr	r3, [pc, #260]	@ (8003530 <odometry+0x350>)
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	f7fc ff2d 	bl	800028c <__adddf3>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	493e      	ldr	r1, [pc, #248]	@ (8003530 <odometry+0x350>)
 8003438:	e9c1 2300 	strd	r2, r3, [r1]
    yGlobalIN += -dxIN * sin(thetaIN) + dyIN * cos(thetaIN);
 800343c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003440:	603b      	str	r3, [r7, #0]
 8003442:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003446:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8003450:	f00a ff46 	bl	800e2e0 <sin>
 8003454:	ec53 2b10 	vmov	r2, r3, d0
 8003458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800345c:	f7fd f8cc 	bl	80005f8 <__aeabi_dmul>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4690      	mov	r8, r2
 8003466:	4699      	mov	r9, r3
 8003468:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 800346c:	f00a fee4 	bl	800e238 <cos>
 8003470:	ec51 0b10 	vmov	r0, r1, d0
 8003474:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8003478:	f7fd f8be 	bl	80005f8 <__aeabi_dmul>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4640      	mov	r0, r8
 8003482:	4649      	mov	r1, r9
 8003484:	f7fc ff02 	bl	800028c <__adddf3>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	4b28      	ldr	r3, [pc, #160]	@ (8003534 <odometry+0x354>)
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	f7fc fef9 	bl	800028c <__adddf3>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4925      	ldr	r1, [pc, #148]	@ (8003534 <odometry+0x354>)
 80034a0:	e9c1 2300 	strd	r2, r3, [r1]
    headingIN += dthetaIN;
 80034a4:	4b21      	ldr	r3, [pc, #132]	@ (800352c <odometry+0x34c>)
 80034a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034aa:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80034ae:	f7fc feed 	bl	800028c <__adddf3>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	491d      	ldr	r1, [pc, #116]	@ (800352c <odometry+0x34c>)
 80034b8:	e9c1 2300 	strd	r2, r3, [r1]
    /* END */

    /* ENCODER EXTERNAL */
    int dn1 = counter1 - oldEnc1;
 80034bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003538 <odometry+0x358>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b1e      	ldr	r3, [pc, #120]	@ (800353c <odometry+0x35c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    int dn2 = counter2 - oldEnc2;
 80034ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003540 <odometry+0x360>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003544 <odometry+0x364>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034d8:	e036      	b.n	8003548 <odometry+0x368>
 80034da:	bf00      	nop
 80034dc:	f3af 8000 	nop.w
 80034e0:	458bd930 	.word	0x458bd930
 80034e4:	401b4977 	.word	0x401b4977
 80034e8:	00000000 	.word	0x00000000
 80034ec:	40a45000 	.word	0x40a45000
 80034f0:	667f3bcd 	.word	0x667f3bcd
 80034f4:	3fe6a09e 	.word	0x3fe6a09e
 80034f8:	667f3bcc 	.word	0x667f3bcc
 80034fc:	3fe6a09e 	.word	0x3fe6a09e
 8003500:	200004ac 	.word	0x200004ac
 8003504:	200005a0 	.word	0x200005a0
 8003508:	200004b0 	.word	0x200004b0
 800350c:	200005a4 	.word	0x200005a4
 8003510:	200004b4 	.word	0x200004b4
 8003514:	200005a8 	.word	0x200005a8
 8003518:	200004b8 	.word	0x200004b8
 800351c:	200005ac 	.word	0x200005ac
 8003520:	40100000 	.word	0x40100000
 8003524:	200005c0 	.word	0x200005c0
 8003528:	200005c8 	.word	0x200005c8
 800352c:	200005d0 	.word	0x200005d0
 8003530:	200005b0 	.word	0x200005b0
 8003534:	200005b8 	.word	0x200005b8
 8003538:	200004a0 	.word	0x200004a0
 800353c:	20000588 	.word	0x20000588
 8003540:	200004a4 	.word	0x200004a4
 8003544:	2000058c 	.word	0x2000058c
    int dn3 = counter3 - oldEnc3;
 8003548:	4bbb      	ldr	r3, [pc, #748]	@ (8003838 <odometry+0x658>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4bbb      	ldr	r3, [pc, #748]	@ (800383c <odometry+0x65c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    oldEnc1 = counter1;
 8003556:	4bba      	ldr	r3, [pc, #744]	@ (8003840 <odometry+0x660>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4aba      	ldr	r2, [pc, #744]	@ (8003844 <odometry+0x664>)
 800355c:	6013      	str	r3, [r2, #0]
    oldEnc2 = counter2;
 800355e:	4bba      	ldr	r3, [pc, #744]	@ (8003848 <odometry+0x668>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4aba      	ldr	r2, [pc, #744]	@ (800384c <odometry+0x66c>)
 8003564:	6013      	str	r3, [r2, #0]
    oldEnc3 = counter3;
 8003566:	4bb4      	ldr	r3, [pc, #720]	@ (8003838 <odometry+0x658>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4ab4      	ldr	r2, [pc, #720]	@ (800383c <odometry+0x65c>)
 800356c:	6013      	str	r3, [r2, #0]

    double dtheta = mm_per_tick * (dn2 - dn1) / e1_e2;
 800356e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003572:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	4618      	mov	r0, r3
 800357a:	f7fc ffd3 	bl	8000524 <__aeabi_i2d>
 800357e:	a3aa      	add	r3, pc, #680	@ (adr r3, 8003828 <odometry+0x648>)
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f7fd f838 	bl	80005f8 <__aeabi_dmul>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	a3a7      	add	r3, pc, #668	@ (adr r3, 8003830 <odometry+0x650>)
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f7fd f959 	bl	800084c <__aeabi_ddiv>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    double dx = mm_per_tick * (dn3 + (dn2 - dn1) * e12_e3 / e1_e2);
 80035a2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80035a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	22e6      	movs	r2, #230	@ 0xe6
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	4aa7      	ldr	r2, [pc, #668]	@ (8003850 <odometry+0x670>)
 80035b4:	fb82 1203 	smull	r1, r2, r2, r3
 80035b8:	441a      	add	r2, r3
 80035ba:	1212      	asrs	r2, r2, #8
 80035bc:	17db      	asrs	r3, r3, #31
 80035be:	1ad2      	subs	r2, r2, r3
 80035c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035c4:	4413      	add	r3, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fc ffac 	bl	8000524 <__aeabi_i2d>
 80035cc:	a396      	add	r3, pc, #600	@ (adr r3, 8003828 <odometry+0x648>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f7fd f811 	bl	80005f8 <__aeabi_dmul>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    double dy = mm_per_tick * (dn1 + dn2) / 2.0;
 80035de:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80035e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035e6:	4413      	add	r3, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fc ff9b 	bl	8000524 <__aeabi_i2d>
 80035ee:	a38e      	add	r3, pc, #568	@ (adr r3, 8003828 <odometry+0x648>)
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f7fd f800 	bl	80005f8 <__aeabi_dmul>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003608:	f7fd f920 	bl	800084c <__aeabi_ddiv>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    double distance = hypot(dx, dy);
 8003614:	ed97 1b20 	vldr	d1, [r7, #128]	@ 0x80
 8003618:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 800361c:	f00a fdd8 	bl	800e1d0 <hypot>
 8003620:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
	double direction = atan2(dy, dx);
 8003624:	ed97 1b22 	vldr	d1, [r7, #136]	@ 0x88
 8003628:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 800362c:	f00a fdcc 	bl	800e1c8 <atan2>
 8003630:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
	double theta_local = direction - dtheta;
 8003634:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003638:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800363c:	f7fc fe24 	bl	8000288 <__aeabi_dsub>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

	xLocal += distance * cos(theta_local);
 8003648:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 800364c:	f00a fdf4 	bl	800e238 <cos>
 8003650:	ec51 0b10 	vmov	r0, r1, d0
 8003654:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8003658:	f7fc ffce 	bl	80005f8 <__aeabi_dmul>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4610      	mov	r0, r2
 8003662:	4619      	mov	r1, r3
 8003664:	4b7b      	ldr	r3, [pc, #492]	@ (8003854 <odometry+0x674>)
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f7fc fe0f 	bl	800028c <__adddf3>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4978      	ldr	r1, [pc, #480]	@ (8003854 <odometry+0x674>)
 8003674:	e9c1 2300 	strd	r2, r3, [r1]
	yLocal += distance * sin(theta_local);
 8003678:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 800367c:	f00a fe30 	bl	800e2e0 <sin>
 8003680:	ec51 0b10 	vmov	r0, r1, d0
 8003684:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8003688:	f7fc ffb6 	bl	80005f8 <__aeabi_dmul>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	4b70      	ldr	r3, [pc, #448]	@ (8003858 <odometry+0x678>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f7fc fdf7 	bl	800028c <__adddf3>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	496d      	ldr	r1, [pc, #436]	@ (8003858 <odometry+0x678>)
 80036a4:	e9c1 2300 	strd	r2, r3, [r1]

    double theta = heading + (dtheta / 2.0);
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80036b0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80036b4:	f7fd f8ca 	bl	800084c <__aeabi_ddiv>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4610      	mov	r0, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	4b66      	ldr	r3, [pc, #408]	@ (800385c <odometry+0x67c>)
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	f7fc fde1 	bl	800028c <__adddf3>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    xGlobal += dx * cos(theta) + dy * sin(theta);
 80036d2:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80036d6:	f00a fdaf 	bl	800e238 <cos>
 80036da:	ec51 0b10 	vmov	r0, r1, d0
 80036de:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80036e2:	f7fc ff89 	bl	80005f8 <__aeabi_dmul>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	4690      	mov	r8, r2
 80036ec:	4699      	mov	r9, r3
 80036ee:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80036f2:	f00a fdf5 	bl	800e2e0 <sin>
 80036f6:	ec51 0b10 	vmov	r0, r1, d0
 80036fa:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80036fe:	f7fc ff7b 	bl	80005f8 <__aeabi_dmul>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4640      	mov	r0, r8
 8003708:	4649      	mov	r1, r9
 800370a:	f7fc fdbf 	bl	800028c <__adddf3>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4610      	mov	r0, r2
 8003714:	4619      	mov	r1, r3
 8003716:	4b52      	ldr	r3, [pc, #328]	@ (8003860 <odometry+0x680>)
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	f7fc fdb6 	bl	800028c <__adddf3>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	494e      	ldr	r1, [pc, #312]	@ (8003860 <odometry+0x680>)
 8003726:	e9c1 2300 	strd	r2, r3, [r1]
    yGlobal += -dx * sin(theta) + dy * cos(theta);
 800372a:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 800372e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003732:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003736:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 800373a:	f00a fdd1 	bl	800e2e0 <sin>
 800373e:	ec53 2b10 	vmov	r2, r3, d0
 8003742:	4620      	mov	r0, r4
 8003744:	4629      	mov	r1, r5
 8003746:	f7fc ff57 	bl	80005f8 <__aeabi_dmul>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4614      	mov	r4, r2
 8003750:	461d      	mov	r5, r3
 8003752:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8003756:	f00a fd6f 	bl	800e238 <cos>
 800375a:	ec51 0b10 	vmov	r0, r1, d0
 800375e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8003762:	f7fc ff49 	bl	80005f8 <__aeabi_dmul>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4620      	mov	r0, r4
 800376c:	4629      	mov	r1, r5
 800376e:	f7fc fd8d 	bl	800028c <__adddf3>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4610      	mov	r0, r2
 8003778:	4619      	mov	r1, r3
 800377a:	4b3a      	ldr	r3, [pc, #232]	@ (8003864 <odometry+0x684>)
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f7fc fd84 	bl	800028c <__adddf3>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4936      	ldr	r1, [pc, #216]	@ (8003864 <odometry+0x684>)
 800378a:	e9c1 2300 	strd	r2, r3, [r1]
    heading += dtheta;
 800378e:	4b33      	ldr	r3, [pc, #204]	@ (800385c <odometry+0x67c>)
 8003790:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003794:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003798:	f7fc fd78 	bl	800028c <__adddf3>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	492e      	ldr	r1, [pc, #184]	@ (800385c <odometry+0x67c>)
 80037a2:	e9c1 2300 	strd	r2, r3, [r1]
    /* END */

    currentPosition.x_global = xGlobal;
 80037a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003860 <odometry+0x680>)
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    currentPosition.y_global = yGlobal;
 80037b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003864 <odometry+0x684>)
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    currentPosition.x_local = xLocal;
 80037ba:	4b26      	ldr	r3, [pc, #152]	@ (8003854 <odometry+0x674>)
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    currentPosition.y_local = yLocal;
 80037c4:	4b24      	ldr	r3, [pc, #144]	@ (8003858 <odometry+0x678>)
 80037c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    currentPosition.x_in_global = xGlobalIN;
 80037ce:	4b26      	ldr	r3, [pc, #152]	@ (8003868 <odometry+0x688>)
 80037d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    currentPosition.y_in_global = yGlobalIN;
 80037d8:	4b24      	ldr	r3, [pc, #144]	@ (800386c <odometry+0x68c>)
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    currentPosition.x_in_local = xLocalIN;
 80037e2:	4b23      	ldr	r3, [pc, #140]	@ (8003870 <odometry+0x690>)
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    currentPosition.y_in_local = yLocalIN;
 80037ec:	4b21      	ldr	r3, [pc, #132]	@ (8003874 <odometry+0x694>)
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    currentPosition.h_en = (heading + headingIN) * 90/M_PI;
 80037f6:	4b19      	ldr	r3, [pc, #100]	@ (800385c <odometry+0x67c>)
 80037f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003878 <odometry+0x698>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f7fc fd43 	bl	800028c <__adddf3>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4610      	mov	r0, r2
 800380c:	4619      	mov	r1, r3
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	4b1a      	ldr	r3, [pc, #104]	@ (800387c <odometry+0x69c>)
 8003814:	f7fc fef0 	bl	80005f8 <__aeabi_dmul>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	e02e      	b.n	8003880 <odometry+0x6a0>
 8003822:	bf00      	nop
 8003824:	f3af 8000 	nop.w
 8003828:	2d6e5f19 	.word	0x2d6e5f19
 800382c:	3fb752bc 	.word	0x3fb752bc
 8003830:	00000000 	.word	0x00000000
 8003834:	4077c000 	.word	0x4077c000
 8003838:	200004a8 	.word	0x200004a8
 800383c:	20000590 	.word	0x20000590
 8003840:	200004a0 	.word	0x200004a0
 8003844:	20000588 	.word	0x20000588
 8003848:	200004a4 	.word	0x200004a4
 800384c:	2000058c 	.word	0x2000058c
 8003850:	ac769185 	.word	0xac769185
 8003854:	20000570 	.word	0x20000570
 8003858:	20000578 	.word	0x20000578
 800385c:	20000580 	.word	0x20000580
 8003860:	20000560 	.word	0x20000560
 8003864:	20000568 	.word	0x20000568
 8003868:	200005b0 	.word	0x200005b0
 800386c:	200005b8 	.word	0x200005b8
 8003870:	200005c0 	.word	0x200005c0
 8003874:	200005c8 	.word	0x200005c8
 8003878:	200005d0 	.word	0x200005d0
 800387c:	40568000 	.word	0x40568000
 8003880:	a30e      	add	r3, pc, #56	@ (adr r3, 80038bc <odometry+0x6dc>)
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	f7fc ffe1 	bl	800084c <__aeabi_ddiv>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    currentPosition.h = sensorData[0];
 8003892:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <odometry+0x6d8>)
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    return currentPosition;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4618      	mov	r0, r3
 80038a0:	f107 0310 	add.w	r3, r7, #16
 80038a4:	2250      	movs	r2, #80	@ 0x50
 80038a6:	4619      	mov	r1, r3
 80038a8:	f007 ffcd 	bl	800b846 <memcpy>
}
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	37f0      	adds	r7, #240	@ 0xf0
 80038b0:	46bd      	mov	sp, r7
 80038b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038b6:	bf00      	nop
 80038b8:	200004f8 	.word	0x200004f8
 80038bc:	54442d18 	.word	0x54442d18
 80038c0:	400921fb 	.word	0x400921fb

080038c4 <stateTransition>:
    {0, 0, 0.1}
};

// State transition function f
StateVector stateTransition(StateVector X)
{
 80038c4:	b5b0      	push	{r4, r5, r7, lr}
 80038c6:	b0ac      	sub	sp, #176	@ 0xb0
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	eeb0 5a40 	vmov.f32	s10, s0
 80038ce:	eef0 5a60 	vmov.f32	s11, s1
 80038d2:	eeb0 6a41 	vmov.f32	s12, s2
 80038d6:	eef0 6a61 	vmov.f32	s13, s3
 80038da:	eeb0 7a42 	vmov.f32	s14, s4
 80038de:	eef0 7a62 	vmov.f32	s15, s5
 80038e2:	ed87 5b06 	vstr	d5, [r7, #24]
 80038e6:	ed87 6b08 	vstr	d6, [r7, #32]
 80038ea:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    StateVector X_next;
    robotPosition position = odometry();
 80038ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fc74 	bl	80031e0 <odometry>
//    X_next.x = X.x + v * cos(X.theta) * dt + 0.5 * ax * pow(dt, 2) * cos(X.theta);
//    X_next.y = X.y + v * sin(X.theta) * dt + 0.5 * ay * pow(dt, 2) * sin(X.theta);
//    X_next.theta = X.theta + heading;
    X_next.x = X.x + position.x_local;
 80038f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003900:	f7fc fcc4 	bl	800028c <__adddf3>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    X_next.y = X.y + position.y_local;
 800390c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003910:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003914:	f7fc fcba 	bl	800028c <__adddf3>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    X_next.theta = X.theta + position.h;
 8003920:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003924:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8003928:	f7fc fcb0 	bl	800028c <__adddf3>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    return X_next;
 8003934:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 8003938:	f107 0580 	add.w	r5, r7, #128	@ 0x80
 800393c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800393e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003940:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003944:	e884 0003 	stmia.w	r4, {r0, r1}
 8003948:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800394c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003950:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8003954:	ec45 4b15 	vmov	d5, r4, r5
 8003958:	ec41 0b16 	vmov	d6, r0, r1
 800395c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003960:	eeb0 0a45 	vmov.f32	s0, s10
 8003964:	eef0 0a65 	vmov.f32	s1, s11
 8003968:	eeb0 1a46 	vmov.f32	s2, s12
 800396c:	eef0 1a66 	vmov.f32	s3, s13
 8003970:	eeb0 2a47 	vmov.f32	s4, s14
 8003974:	eef0 2a67 	vmov.f32	s5, s15
 8003978:	37b0      	adds	r7, #176	@ 0xb0
 800397a:	46bd      	mov	sp, r7
 800397c:	bdb0      	pop	{r4, r5, r7, pc}

0800397e <measurementFunction>:

// Measurement function h
MeasurementVector measurementFunction(StateVector X)
{
 800397e:	b4b0      	push	{r4, r5, r7}
 8003980:	b099      	sub	sp, #100	@ 0x64
 8003982:	af00      	add	r7, sp, #0
 8003984:	eeb0 5a40 	vmov.f32	s10, s0
 8003988:	eef0 5a60 	vmov.f32	s11, s1
 800398c:	eeb0 6a41 	vmov.f32	s12, s2
 8003990:	eef0 6a61 	vmov.f32	s13, s3
 8003994:	eeb0 7a42 	vmov.f32	s14, s4
 8003998:	eef0 7a62 	vmov.f32	s15, s5
 800399c:	ed87 5b06 	vstr	d5, [r7, #24]
 80039a0:	ed87 6b08 	vstr	d6, [r7, #32]
 80039a4:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    MeasurementVector Z;
    Z.x = X.x;
 80039a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Z.y = X.y;
 80039b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    Z.theta = X.theta;
 80039b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    return Z;
 80039c0:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 80039c4:	f107 0530 	add.w	r5, r7, #48	@ 0x30
 80039c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80039d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80039d4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80039d8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80039dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039e0:	ec45 4b15 	vmov	d5, r4, r5
 80039e4:	ec41 0b16 	vmov	d6, r0, r1
 80039e8:	ec43 2b17 	vmov	d7, r2, r3
}
 80039ec:	eeb0 0a45 	vmov.f32	s0, s10
 80039f0:	eef0 0a65 	vmov.f32	s1, s11
 80039f4:	eeb0 1a46 	vmov.f32	s2, s12
 80039f8:	eef0 1a66 	vmov.f32	s3, s13
 80039fc:	eeb0 2a47 	vmov.f32	s4, s14
 8003a00:	eef0 2a67 	vmov.f32	s5, s15
 8003a04:	3764      	adds	r7, #100	@ 0x64
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bcb0      	pop	{r4, r5, r7}
 8003a0a:	4770      	bx	lr
 8003a0c:	0000      	movs	r0, r0
	...

08003a10 <extendedKalmanFilter>:

// Extended Kalman Filter
EKF extendedKalmanFilter()
{
 8003a10:	b5b0      	push	{r4, r5, r7, lr}
 8003a12:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8003a16:	af00      	add	r7, sp, #0
	EKF currentPosition;
	robotPosition position = odometry();
 8003a18:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fbdf 	bl	80031e0 <odometry>
	double P[STATE_DIM][STATE_DIM] = {
 8003a22:	4ac7      	ldr	r2, [pc, #796]	@ (8003d40 <extendedKalmanFilter+0x330>)
 8003a24:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8003a28:	4611      	mov	r1, r2
 8003a2a:	2248      	movs	r2, #72	@ 0x48
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f007 ff0a 	bl	800b846 <memcpy>
		{1, 0, 0},
		{0, 1, 0},
		{0, 0, 1}};

    // Prediction step
	StateVector X = {position.x_local, position.y_local, 0.0};
 8003a32:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8003a36:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 8003a3a:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8003a3e:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
    StateVector X_pred = stateTransition(X);
 8003a4e:	ed97 5b54 	vldr	d5, [r7, #336]	@ 0x150
 8003a52:	ed97 6b56 	vldr	d6, [r7, #344]	@ 0x158
 8003a56:	ed97 7b58 	vldr	d7, [r7, #352]	@ 0x160
 8003a5a:	eeb0 0a45 	vmov.f32	s0, s10
 8003a5e:	eef0 0a65 	vmov.f32	s1, s11
 8003a62:	eeb0 1a46 	vmov.f32	s2, s12
 8003a66:	eef0 1a66 	vmov.f32	s3, s13
 8003a6a:	eeb0 2a47 	vmov.f32	s4, s14
 8003a6e:	eef0 2a67 	vmov.f32	s5, s15
 8003a72:	f7ff ff27 	bl	80038c4 <stateTransition>
 8003a76:	eeb0 5a40 	vmov.f32	s10, s0
 8003a7a:	eef0 5a60 	vmov.f32	s11, s1
 8003a7e:	eeb0 6a41 	vmov.f32	s12, s2
 8003a82:	eef0 6a61 	vmov.f32	s13, s3
 8003a86:	eeb0 7a42 	vmov.f32	s14, s4
 8003a8a:	eef0 7a62 	vmov.f32	s15, s5
 8003a8e:	ed87 5b4e 	vstr	d5, [r7, #312]	@ 0x138
 8003a92:	ed87 6b50 	vstr	d6, [r7, #320]	@ 0x140
 8003a96:	ed87 7b52 	vstr	d7, [r7, #328]	@ 0x148
    double P_pred[STATE_DIM][STATE_DIM] = {
        {P[0][0] + Q[0][0], P[0][1], P[0][2]},
 8003a9a:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8003a9e:	a3a6      	add	r3, pc, #664	@ (adr r3, 8003d38 <extendedKalmanFilter+0x328>)
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f7fc fbf2 	bl	800028c <__adddf3>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
    double P_pred[STATE_DIM][STATE_DIM] = {
 8003aac:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003ab0:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8003ab4:	e9c1 2300 	strd	r2, r3, [r1]
        {P[0][0] + Q[0][0], P[0][1], P[0][2]},
 8003ab8:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
    double P_pred[STATE_DIM][STATE_DIM] = {
 8003abc:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003ac0:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8003ac4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        {P[0][0] + Q[0][0], P[0][1], P[0][2]},
 8003ac8:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
    double P_pred[STATE_DIM][STATE_DIM] = {
 8003acc:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003ad0:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8003ad4:	e9c1 2304 	strd	r2, r3, [r1, #16]
        {P[1][0], P[1][1] + Q[1][1], P[1][2]},
 8003ad8:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
    double P_pred[STATE_DIM][STATE_DIM] = {
 8003adc:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003ae0:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8003ae4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        {P[1][0], P[1][1] + Q[1][1], P[1][2]},
 8003ae8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003aec:	a392      	add	r3, pc, #584	@ (adr r3, 8003d38 <extendedKalmanFilter+0x328>)
 8003aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af2:	f7fc fbcb 	bl	800028c <__adddf3>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
    double P_pred[STATE_DIM][STATE_DIM] = {
 8003afa:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003afe:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8003b02:	e9c1 2308 	strd	r2, r3, [r1, #32]
        {P[1][0], P[1][1] + Q[1][1], P[1][2]},
 8003b06:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
    double P_pred[STATE_DIM][STATE_DIM] = {
 8003b0a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003b0e:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8003b12:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        {P[2][0], P[2][1], P[2][2] + Q[2][2]}
 8003b16:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
    double P_pred[STATE_DIM][STATE_DIM] = {
 8003b1a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003b1e:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8003b22:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        {P[2][0], P[2][1], P[2][2] + Q[2][2]}
 8003b26:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
    double P_pred[STATE_DIM][STATE_DIM] = {
 8003b2a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003b2e:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8003b32:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        {P[2][0], P[2][1], P[2][2] + Q[2][2]}
 8003b36:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8003b3a:	a37f      	add	r3, pc, #508	@ (adr r3, 8003d38 <extendedKalmanFilter+0x328>)
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f7fc fba4 	bl	800028c <__adddf3>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
    double P_pred[STATE_DIM][STATE_DIM] = {
 8003b48:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003b4c:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8003b50:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    };

    // Update step
	MeasurementVector Z = {position.x_in_local, position.y_in_local, 0.0};
 8003b54:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8003b58:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003b5c:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 8003b60:	e9c1 2300 	strd	r2, r3, [r1]
 8003b64:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8003b68:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003b6c:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 8003b70:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003b74:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003b78:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	e9c1 2304 	strd	r2, r3, [r1, #16]
    MeasurementVector Z_pred = measurementFunction(X_pred);
 8003b88:	ed97 5b4e 	vldr	d5, [r7, #312]	@ 0x138
 8003b8c:	ed97 6b50 	vldr	d6, [r7, #320]	@ 0x140
 8003b90:	ed97 7b52 	vldr	d7, [r7, #328]	@ 0x148
 8003b94:	eeb0 0a45 	vmov.f32	s0, s10
 8003b98:	eef0 0a65 	vmov.f32	s1, s11
 8003b9c:	eeb0 1a46 	vmov.f32	s2, s12
 8003ba0:	eef0 1a66 	vmov.f32	s3, s13
 8003ba4:	eeb0 2a47 	vmov.f32	s4, s14
 8003ba8:	eef0 2a67 	vmov.f32	s5, s15
 8003bac:	f7ff fee7 	bl	800397e <measurementFunction>
 8003bb0:	eeb0 5a40 	vmov.f32	s10, s0
 8003bb4:	eef0 5a60 	vmov.f32	s11, s1
 8003bb8:	eeb0 6a41 	vmov.f32	s12, s2
 8003bbc:	eef0 6a61 	vmov.f32	s13, s3
 8003bc0:	eeb0 7a42 	vmov.f32	s14, s4
 8003bc4:	eef0 7a62 	vmov.f32	s15, s5
 8003bc8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003bcc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003bd0:	ed83 5b00 	vstr	d5, [r3]
 8003bd4:	ed83 6b02 	vstr	d6, [r3, #8]
 8003bd8:	ed83 7b04 	vstr	d7, [r3, #16]
    double Y[MEASUREMENT_DIM] = {Z.x - Z_pred.x, Z.y - Z_pred.y, Z.theta - Z_pred.theta};
 8003bdc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003be0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003be4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003be8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003bec:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f7fc fb48 	bl	8000288 <__aeabi_dsub>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003c00:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8003c04:	e9c1 2300 	strd	r2, r3, [r1]
 8003c08:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003c0c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003c10:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003c14:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003c18:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c20:	f7fc fb32 	bl	8000288 <__aeabi_dsub>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003c2c:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8003c30:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003c34:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003c38:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003c3c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003c40:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003c44:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c48:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c4c:	f7fc fb1c 	bl	8000288 <__aeabi_dsub>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003c58:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8003c5c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
        {P_pred[0][0] + R[0][0], P_pred[0][1], P_pred[0][2]},
 8003c60:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003c64:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003c68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c6c:	a332      	add	r3, pc, #200	@ (adr r3, 8003d38 <extendedKalmanFilter+0x328>)
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	f7fc fb0b 	bl	800028c <__adddf3>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8003c7a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003c7e:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8003c82:	e9c1 2300 	strd	r2, r3, [r1]
        {P_pred[0][0] + R[0][0], P_pred[0][1], P_pred[0][2]},
 8003c86:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003c8a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003c8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8003c92:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003c96:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8003c9a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        {P_pred[0][0] + R[0][0], P_pred[0][1], P_pred[0][2]},
 8003c9e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003ca2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003ca6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8003caa:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003cae:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8003cb2:	e9c1 2304 	strd	r2, r3, [r1, #16]
        {P_pred[1][0], P_pred[1][1] + R[1][1], P_pred[1][2]},
 8003cb6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003cba:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003cbe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8003cc2:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003cc6:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8003cca:	e9c1 2306 	strd	r2, r3, [r1, #24]
        {P_pred[1][0], P_pred[1][1] + R[1][1], P_pred[1][2]},
 8003cce:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003cd2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003cd6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003cda:	a317      	add	r3, pc, #92	@ (adr r3, 8003d38 <extendedKalmanFilter+0x328>)
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f7fc fad4 	bl	800028c <__adddf3>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8003ce8:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003cec:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8003cf0:	e9c1 2308 	strd	r2, r3, [r1, #32]
        {P_pred[1][0], P_pred[1][1] + R[1][1], P_pred[1][2]},
 8003cf4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003cf8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003cfc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8003d00:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003d04:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8003d08:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        {P_pred[2][0], P_pred[2][1], P_pred[2][2] + R[2][2]}
 8003d0c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003d10:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003d14:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8003d18:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003d1c:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8003d20:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        {P_pred[2][0], P_pred[2][1], P_pred[2][2] + R[2][2]}
 8003d24:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003d28:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003d2c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003d30:	e008      	b.n	8003d44 <extendedKalmanFilter+0x334>
 8003d32:	bf00      	nop
 8003d34:	f3af 8000 	nop.w
 8003d38:	9999999a 	.word	0x9999999a
 8003d3c:	3fb99999 	.word	0x3fb99999
 8003d40:	08010260 	.word	0x08010260
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8003d44:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003d48:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8003d4c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        {P_pred[2][0], P_pred[2][1], P_pred[2][2] + R[2][2]}
 8003d50:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003d54:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003d58:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003d5c:	f60f 33c8 	addw	r3, pc, #3016	@ 0xbc8
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f7fc fa92 	bl	800028c <__adddf3>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8003d6c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003d70:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8003d74:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    };
    double K[STATE_DIM][MEASUREMENT_DIM] = {
        {P_pred[0][0] / S[0][0], P_pred[0][1] / S[1][1], P_pred[0][2] / S[2][2]},
 8003d78:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003d7c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003d80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d84:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003d88:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d90:	f7fc fd5c 	bl	800084c <__aeabi_ddiv>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8003d98:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003d9c:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8003da0:	e9c1 2300 	strd	r2, r3, [r1]
        {P_pred[0][0] / S[0][0], P_pred[0][1] / S[1][1], P_pred[0][2] / S[2][2]},
 8003da4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003da8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003dac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003db0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003db4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003db8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003dbc:	f7fc fd46 	bl	800084c <__aeabi_ddiv>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8003dc4:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003dc8:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8003dcc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        {P_pred[0][0] / S[0][0], P_pred[0][1] / S[1][1], P_pred[0][2] / S[2][2]},
 8003dd0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003dd4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003dd8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003ddc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003de0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003de4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003de8:	f7fc fd30 	bl	800084c <__aeabi_ddiv>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8003df0:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003df4:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8003df8:	e9c1 2304 	strd	r2, r3, [r1, #16]
        {P_pred[1][0] / S[0][0], P_pred[1][1] / S[1][1], P_pred[1][2] / S[2][2]},
 8003dfc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003e00:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e04:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003e08:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003e0c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f7fc fd1a 	bl	800084c <__aeabi_ddiv>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8003e1c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003e20:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8003e24:	e9c1 2306 	strd	r2, r3, [r1, #24]
        {P_pred[1][0] / S[0][0], P_pred[1][1] / S[1][1], P_pred[1][2] / S[2][2]},
 8003e28:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003e2c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e30:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003e34:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003e38:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003e3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e40:	f7fc fd04 	bl	800084c <__aeabi_ddiv>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8003e48:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003e4c:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8003e50:	e9c1 2308 	strd	r2, r3, [r1, #32]
        {P_pred[1][0] / S[0][0], P_pred[1][1] / S[1][1], P_pred[1][2] / S[2][2]},
 8003e54:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003e58:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e5c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8003e60:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003e64:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003e68:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003e6c:	f7fc fcee 	bl	800084c <__aeabi_ddiv>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8003e74:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003e78:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8003e7c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        {P_pred[2][0] / S[0][0], P_pred[2][1] / S[1][1], P_pred[2][2] / S[2][2]}
 8003e80:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003e84:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e88:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8003e8c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003e90:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f7fc fcd8 	bl	800084c <__aeabi_ddiv>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8003ea0:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003ea4:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8003ea8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        {P_pred[2][0] / S[0][0], P_pred[2][1] / S[1][1], P_pred[2][2] / S[2][2]}
 8003eac:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003eb0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003eb4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8003eb8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003ebc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003ec0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ec4:	f7fc fcc2 	bl	800084c <__aeabi_ddiv>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8003ecc:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003ed0:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8003ed4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        {P_pred[2][0] / S[0][0], P_pred[2][1] / S[1][1], P_pred[2][2] / S[2][2]}
 8003ed8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003edc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003ee0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003ee4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003ee8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003eec:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003ef0:	f7fc fcac 	bl	800084c <__aeabi_ddiv>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8003ef8:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8003efc:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8003f00:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    };

    // Update state estimate
    X.x = X_pred.x + K[0][0] * Y[0] + K[0][1] * Y[1] + K[0][2] * Y[2];
 8003f04:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8003f08:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003f0c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f14:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003f18:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f7fc fb6a 	bl	80005f8 <__aeabi_dmul>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4620      	mov	r0, r4
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	f7fc f9ae 	bl	800028c <__adddf3>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4614      	mov	r4, r2
 8003f36:	461d      	mov	r5, r3
 8003f38:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003f3c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003f40:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003f44:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003f48:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003f4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003f50:	f7fc fb52 	bl	80005f8 <__aeabi_dmul>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4620      	mov	r0, r4
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	f7fc f996 	bl	800028c <__adddf3>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4614      	mov	r4, r2
 8003f66:	461d      	mov	r5, r3
 8003f68:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003f6c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003f70:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003f74:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003f78:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003f7c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003f80:	f7fc fb3a 	bl	80005f8 <__aeabi_dmul>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4620      	mov	r0, r4
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	f7fc f97e 	bl	800028c <__adddf3>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
    X.y = X_pred.y + K[1][0] * Y[0] + K[1][1] * Y[1] + K[1][2] * Y[2];
 8003f98:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8003f9c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003fa0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003fa4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003fa8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003fac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f7fc fb20 	bl	80005f8 <__aeabi_dmul>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	f7fc f964 	bl	800028c <__adddf3>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4614      	mov	r4, r2
 8003fca:	461d      	mov	r5, r3
 8003fcc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003fd0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003fd4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003fd8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003fdc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003fe0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003fe4:	f7fc fb08 	bl	80005f8 <__aeabi_dmul>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4620      	mov	r0, r4
 8003fee:	4629      	mov	r1, r5
 8003ff0:	f7fc f94c 	bl	800028c <__adddf3>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4614      	mov	r4, r2
 8003ffa:	461d      	mov	r5, r3
 8003ffc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004000:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004004:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8004008:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800400c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004010:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004014:	f7fc faf0 	bl	80005f8 <__aeabi_dmul>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4620      	mov	r0, r4
 800401e:	4629      	mov	r1, r5
 8004020:	f7fc f934 	bl	800028c <__adddf3>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
    X.theta = X_pred.theta + K[2][0] * Y[0] + K[2][1] * Y[1] + K[2][2] * Y[2];
 800402c:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8004030:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004034:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004038:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800403c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004040:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004048:	f7fc fad6 	bl	80005f8 <__aeabi_dmul>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4620      	mov	r0, r4
 8004052:	4629      	mov	r1, r5
 8004054:	f7fc f91a 	bl	800028c <__adddf3>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4614      	mov	r4, r2
 800405e:	461d      	mov	r5, r3
 8004060:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004064:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004068:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800406c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004070:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004074:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004078:	f7fc fabe 	bl	80005f8 <__aeabi_dmul>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4620      	mov	r0, r4
 8004082:	4629      	mov	r1, r5
 8004084:	f7fc f902 	bl	800028c <__adddf3>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4614      	mov	r4, r2
 800408e:	461d      	mov	r5, r3
 8004090:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004094:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004098:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800409c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80040a0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80040a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80040a8:	f7fc faa6 	bl	80005f8 <__aeabi_dmul>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4620      	mov	r0, r4
 80040b2:	4629      	mov	r1, r5
 80040b4:	f7fc f8ea 	bl	800028c <__adddf3>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160

    // Update covariance matrix
    P[0][0] = P_pred[0][0] - K[0][0] * S[0][0] * K[0][0] - K[0][1] * S[1][1] * K[0][1] - K[0][2] * S[2][2] * K[0][2];
 80040c0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80040c4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80040c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80040cc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80040d0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80040d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040d8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80040dc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f7fc fa88 	bl	80005f8 <__aeabi_dmul>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4610      	mov	r0, r2
 80040ee:	4619      	mov	r1, r3
 80040f0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80040f4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f7fc fa7c 	bl	80005f8 <__aeabi_dmul>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4620      	mov	r0, r4
 8004106:	4629      	mov	r1, r5
 8004108:	f7fc f8be 	bl	8000288 <__aeabi_dsub>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4614      	mov	r4, r2
 8004112:	461d      	mov	r5, r3
 8004114:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004118:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800411c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004120:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004124:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800412c:	f7fc fa64 	bl	80005f8 <__aeabi_dmul>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4610      	mov	r0, r2
 8004136:	4619      	mov	r1, r3
 8004138:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800413c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004140:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004144:	f7fc fa58 	bl	80005f8 <__aeabi_dmul>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4620      	mov	r0, r4
 800414e:	4629      	mov	r1, r5
 8004150:	f7fc f89a 	bl	8000288 <__aeabi_dsub>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4614      	mov	r4, r2
 800415a:	461d      	mov	r5, r3
 800415c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004160:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004164:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004168:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800416c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004170:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004174:	f7fc fa40 	bl	80005f8 <__aeabi_dmul>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4610      	mov	r0, r2
 800417e:	4619      	mov	r1, r3
 8004180:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004184:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004188:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800418c:	f7fc fa34 	bl	80005f8 <__aeabi_dmul>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4620      	mov	r0, r4
 8004196:	4629      	mov	r1, r5
 8004198:	f7fc f876 	bl	8000288 <__aeabi_dsub>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
    P[0][1] = P_pred[0][1] - K[0][0] * S[0][0] * K[1][0] - K[0][1] * S[1][1] * K[1][1] - K[0][2] * S[2][2] * K[1][2];
 80041a4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80041a8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80041ac:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80041b0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80041b4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80041b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041bc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80041c0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80041c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c8:	f7fc fa16 	bl	80005f8 <__aeabi_dmul>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80041d8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80041dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80041e0:	f7fc fa0a 	bl	80005f8 <__aeabi_dmul>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4620      	mov	r0, r4
 80041ea:	4629      	mov	r1, r5
 80041ec:	f7fc f84c 	bl	8000288 <__aeabi_dsub>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4614      	mov	r4, r2
 80041f6:	461d      	mov	r5, r3
 80041f8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80041fc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004200:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004204:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004208:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800420c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004210:	f7fc f9f2 	bl	80005f8 <__aeabi_dmul>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4610      	mov	r0, r2
 800421a:	4619      	mov	r1, r3
 800421c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004220:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004224:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004228:	f7fc f9e6 	bl	80005f8 <__aeabi_dmul>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4620      	mov	r0, r4
 8004232:	4629      	mov	r1, r5
 8004234:	f7fc f828 	bl	8000288 <__aeabi_dsub>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4614      	mov	r4, r2
 800423e:	461d      	mov	r5, r3
 8004240:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004244:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004248:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800424c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004250:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004254:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004258:	f7fc f9ce 	bl	80005f8 <__aeabi_dmul>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004268:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800426c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004270:	f7fc f9c2 	bl	80005f8 <__aeabi_dmul>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4620      	mov	r0, r4
 800427a:	4629      	mov	r1, r5
 800427c:	f7fc f804 	bl	8000288 <__aeabi_dsub>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
    P[0][2] = P_pred[0][2] - K[0][0] * S[0][0] * K[2][0] - K[0][1] * S[1][1] * K[2][1] - K[0][2] * S[2][2] * K[2][2];
 8004288:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800428c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004290:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004294:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004298:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800429c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042a0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80042a4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	f7fc f9a4 	bl	80005f8 <__aeabi_dmul>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80042bc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80042c0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80042c4:	f7fc f998 	bl	80005f8 <__aeabi_dmul>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4620      	mov	r0, r4
 80042ce:	4629      	mov	r1, r5
 80042d0:	f7fb ffda 	bl	8000288 <__aeabi_dsub>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4614      	mov	r4, r2
 80042da:	461d      	mov	r5, r3
 80042dc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80042e0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80042e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80042e8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80042ec:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80042f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80042f4:	f7fc f980 	bl	80005f8 <__aeabi_dmul>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004304:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004308:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800430c:	f7fc f974 	bl	80005f8 <__aeabi_dmul>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4620      	mov	r0, r4
 8004316:	4629      	mov	r1, r5
 8004318:	f7fb ffb6 	bl	8000288 <__aeabi_dsub>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4614      	mov	r4, r2
 8004322:	461d      	mov	r5, r3
 8004324:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004328:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800432c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004330:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004334:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004338:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800433c:	f7fc f95c 	bl	80005f8 <__aeabi_dmul>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4610      	mov	r0, r2
 8004346:	4619      	mov	r1, r3
 8004348:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800434c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004350:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004354:	f7fc f950 	bl	80005f8 <__aeabi_dmul>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4620      	mov	r0, r4
 800435e:	4629      	mov	r1, r5
 8004360:	f7fb ff92 	bl	8000288 <__aeabi_dsub>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
    P[1][0] = P_pred[1][0] - K[1][0] * S[0][0] * K[0][0] - K[1][1] * S[1][1] * K[0][1] - K[1][2] * S[2][2] * K[0][2];
 800436c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004370:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004374:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004378:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800437c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004380:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004384:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004388:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	f7fc f932 	bl	80005f8 <__aeabi_dmul>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
 800439c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80043a0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	f7fc f926 	bl	80005f8 <__aeabi_dmul>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4620      	mov	r0, r4
 80043b2:	4629      	mov	r1, r5
 80043b4:	f7fb ff68 	bl	8000288 <__aeabi_dsub>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4614      	mov	r4, r2
 80043be:	461d      	mov	r5, r3
 80043c0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80043c4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80043c8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80043cc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80043d0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80043d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80043d8:	f7fc f90e 	bl	80005f8 <__aeabi_dmul>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4610      	mov	r0, r2
 80043e2:	4619      	mov	r1, r3
 80043e4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80043e8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80043ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80043f0:	f7fc f902 	bl	80005f8 <__aeabi_dmul>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4620      	mov	r0, r4
 80043fa:	4629      	mov	r1, r5
 80043fc:	f7fb ff44 	bl	8000288 <__aeabi_dsub>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4614      	mov	r4, r2
 8004406:	461d      	mov	r5, r3
 8004408:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800440c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004410:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8004414:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004418:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800441c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004420:	f7fc f8ea 	bl	80005f8 <__aeabi_dmul>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4610      	mov	r0, r2
 800442a:	4619      	mov	r1, r3
 800442c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004430:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004434:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004438:	f7fc f8de 	bl	80005f8 <__aeabi_dmul>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4620      	mov	r0, r4
 8004442:	4629      	mov	r1, r5
 8004444:	f7fb ff20 	bl	8000288 <__aeabi_dsub>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
    P[1][1] = P_pred[1][1] - K[1][0] * S[0][0] * K[1][0] - K[1][1] * S[1][1] * K[1][1] - K[1][2] * S[2][2] * K[1][2];
 8004450:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004454:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004458:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800445c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004460:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004464:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004468:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800446c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f7fc f8c0 	bl	80005f8 <__aeabi_dmul>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4610      	mov	r0, r2
 800447e:	4619      	mov	r1, r3
 8004480:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004484:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004488:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800448c:	f7fc f8b4 	bl	80005f8 <__aeabi_dmul>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4620      	mov	r0, r4
 8004496:	4629      	mov	r1, r5
 8004498:	f7fb fef6 	bl	8000288 <__aeabi_dsub>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4614      	mov	r4, r2
 80044a2:	461d      	mov	r5, r3
 80044a4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80044a8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80044ac:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80044b0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80044b4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80044b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80044bc:	f7fc f89c 	bl	80005f8 <__aeabi_dmul>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80044cc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80044d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80044d4:	f7fc f890 	bl	80005f8 <__aeabi_dmul>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4620      	mov	r0, r4
 80044de:	4629      	mov	r1, r5
 80044e0:	f7fb fed2 	bl	8000288 <__aeabi_dsub>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4614      	mov	r4, r2
 80044ea:	461d      	mov	r5, r3
 80044ec:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80044f0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80044f4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80044f8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80044fc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004500:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004504:	f7fc f878 	bl	80005f8 <__aeabi_dmul>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4610      	mov	r0, r2
 800450e:	4619      	mov	r1, r3
 8004510:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004514:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004518:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800451c:	f7fc f86c 	bl	80005f8 <__aeabi_dmul>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4620      	mov	r0, r4
 8004526:	4629      	mov	r1, r5
 8004528:	f7fb feae 	bl	8000288 <__aeabi_dsub>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
    P[1][2] = P_pred[1][2] - K[1][0] * S[0][0] * K[2][0] - K[1][1] * S[1][1] * K[2][1] - K[1][2] * S[2][2] * K[2][2];
 8004534:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004538:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800453c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8004540:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004544:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004548:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800454c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004550:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f7fc f84e 	bl	80005f8 <__aeabi_dmul>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4610      	mov	r0, r2
 8004562:	4619      	mov	r1, r3
 8004564:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004568:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800456c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004570:	f7fc f842 	bl	80005f8 <__aeabi_dmul>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4620      	mov	r0, r4
 800457a:	4629      	mov	r1, r5
 800457c:	f7fb fe84 	bl	8000288 <__aeabi_dsub>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4614      	mov	r4, r2
 8004586:	461d      	mov	r5, r3
 8004588:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800458c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004590:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004594:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004598:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800459c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045a0:	f7fc f82a 	bl	80005f8 <__aeabi_dmul>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4610      	mov	r0, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80045b0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80045b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80045b8:	f7fc f81e 	bl	80005f8 <__aeabi_dmul>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4620      	mov	r0, r4
 80045c2:	4629      	mov	r1, r5
 80045c4:	f7fb fe60 	bl	8000288 <__aeabi_dsub>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4614      	mov	r4, r2
 80045ce:	461d      	mov	r5, r3
 80045d0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80045d4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80045d8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80045dc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80045e0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80045e4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80045e8:	f7fc f806 	bl	80005f8 <__aeabi_dmul>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4610      	mov	r0, r2
 80045f2:	4619      	mov	r1, r3
 80045f4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80045f8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80045fc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004600:	f7fb fffa 	bl	80005f8 <__aeabi_dmul>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4620      	mov	r0, r4
 800460a:	4629      	mov	r1, r5
 800460c:	f7fb fe3c 	bl	8000288 <__aeabi_dsub>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
    P[2][0] = P_pred[2][0] - K[2][0] * S[0][0] * K[0][0] - K[2][1] * S[1][1] * K[0][1] - K[2][2] * S[2][2] * K[0][2];
 8004618:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800461c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004620:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8004624:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004628:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800462c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8004630:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004634:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f7fb ffdc 	bl	80005f8 <__aeabi_dmul>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4610      	mov	r0, r2
 8004646:	4619      	mov	r1, r3
 8004648:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800464c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f7fb ffd0 	bl	80005f8 <__aeabi_dmul>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4620      	mov	r0, r4
 800465e:	4629      	mov	r1, r5
 8004660:	f7fb fe12 	bl	8000288 <__aeabi_dsub>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4614      	mov	r4, r2
 800466a:	461d      	mov	r5, r3
 800466c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004670:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004674:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8004678:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800467c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004680:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004684:	f7fb ffb8 	bl	80005f8 <__aeabi_dmul>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4610      	mov	r0, r2
 800468e:	4619      	mov	r1, r3
 8004690:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004694:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004698:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800469c:	f7fb ffac 	bl	80005f8 <__aeabi_dmul>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4620      	mov	r0, r4
 80046a6:	4629      	mov	r1, r5
 80046a8:	f7fb fdee 	bl	8000288 <__aeabi_dsub>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4614      	mov	r4, r2
 80046b2:	461d      	mov	r5, r3
 80046b4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80046b8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80046bc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80046c0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80046c4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80046c8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80046cc:	f7fb ff94 	bl	80005f8 <__aeabi_dmul>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80046dc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80046e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80046e4:	f7fb ff88 	bl	80005f8 <__aeabi_dmul>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4620      	mov	r0, r4
 80046ee:	4629      	mov	r1, r5
 80046f0:	f7fb fdca 	bl	8000288 <__aeabi_dsub>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    P[2][1] = P_pred[2][1] - K[2][0] * S[0][0] * K[1][0] - K[2][1] * S[1][1] * K[1][1] - K[2][2] * S[2][2] * K[1][2];
 80046fc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004700:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004704:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8004708:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800470c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004710:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8004714:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004718:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f7fb ff6a 	bl	80005f8 <__aeabi_dmul>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4610      	mov	r0, r2
 800472a:	4619      	mov	r1, r3
 800472c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004730:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004734:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004738:	f7fb ff5e 	bl	80005f8 <__aeabi_dmul>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4620      	mov	r0, r4
 8004742:	4629      	mov	r1, r5
 8004744:	f7fb fda0 	bl	8000288 <__aeabi_dsub>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4614      	mov	r4, r2
 800474e:	461d      	mov	r5, r3
 8004750:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004754:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004758:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800475c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004760:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004764:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004768:	f7fb ff46 	bl	80005f8 <__aeabi_dmul>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4610      	mov	r0, r2
 8004772:	4619      	mov	r1, r3
 8004774:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004778:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800477c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004780:	f7fb ff3a 	bl	80005f8 <__aeabi_dmul>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4620      	mov	r0, r4
 800478a:	4629      	mov	r1, r5
 800478c:	f7fb fd7c 	bl	8000288 <__aeabi_dsub>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4614      	mov	r4, r2
 8004796:	461d      	mov	r5, r3
 8004798:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800479c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80047a0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80047a4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80047a8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80047ac:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80047b0:	f7fb ff22 	bl	80005f8 <__aeabi_dmul>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80047c0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80047c4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80047c8:	f7fb ff16 	bl	80005f8 <__aeabi_dmul>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4620      	mov	r0, r4
 80047d2:	4629      	mov	r1, r5
 80047d4:	f7fb fd58 	bl	8000288 <__aeabi_dsub>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
    P[2][2] = P_pred[2][2] - K[2][0] * S[0][0] * K[2][0] - K[2][1] * S[1][1] * K[2][1] - K[2][2] * S[2][2] * K[2][2];
 80047e0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80047e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80047e8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80047ec:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80047f0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80047f4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80047f8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80047fc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004804:	f7fb fef8 	bl	80005f8 <__aeabi_dmul>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4610      	mov	r0, r2
 800480e:	4619      	mov	r1, r3
 8004810:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004814:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004818:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800481c:	f7fb feec 	bl	80005f8 <__aeabi_dmul>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4620      	mov	r0, r4
 8004826:	4629      	mov	r1, r5
 8004828:	f7fb fd2e 	bl	8000288 <__aeabi_dsub>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4614      	mov	r4, r2
 8004832:	461d      	mov	r5, r3
 8004834:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004838:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800483c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8004840:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004844:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004848:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800484c:	f7fb fed4 	bl	80005f8 <__aeabi_dmul>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4610      	mov	r0, r2
 8004856:	4619      	mov	r1, r3
 8004858:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800485c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004860:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8004864:	f7fb fec8 	bl	80005f8 <__aeabi_dmul>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4620      	mov	r0, r4
 800486e:	4629      	mov	r1, r5
 8004870:	f7fb fd0a 	bl	8000288 <__aeabi_dsub>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4614      	mov	r4, r2
 800487a:	461d      	mov	r5, r3
 800487c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004880:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004884:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8004888:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800488c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004890:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004894:	f7fb feb0 	bl	80005f8 <__aeabi_dmul>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80048a4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80048a8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80048ac:	f7fb fea4 	bl	80005f8 <__aeabi_dmul>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4620      	mov	r0, r4
 80048b6:	4629      	mov	r1, r5
 80048b8:	f7fb fce6 	bl	8000288 <__aeabi_dsub>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8

    currentPosition.x = X.x;
 80048c4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80048c8:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
    currentPosition.y = X.y;
 80048cc:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 80048d0:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
    currentPosition.h = position.h;
 80048d4:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 80048d8:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210

    return currentPosition;
 80048dc:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 80048e0:	f507 7500 	add.w	r5, r7, #512	@ 0x200
 80048e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80048ec:	e884 0003 	stmia.w	r4, {r0, r1}
 80048f0:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 80048f4:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 80048f8:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 80048fc:	ec45 4b15 	vmov	d5, r4, r5
 8004900:	ec41 0b16 	vmov	d6, r0, r1
 8004904:	ec43 2b17 	vmov	d7, r2, r3
}
 8004908:	eeb0 0a45 	vmov.f32	s0, s10
 800490c:	eef0 0a65 	vmov.f32	s1, s11
 8004910:	eeb0 1a46 	vmov.f32	s2, s12
 8004914:	eef0 1a66 	vmov.f32	s3, s13
 8004918:	eeb0 2a47 	vmov.f32	s4, s14
 800491c:	eef0 2a67 	vmov.f32	s5, s15
 8004920:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8004924:	46bd      	mov	sp, r7
 8004926:	bdb0      	pop	{r4, r5, r7, pc}
 8004928:	9999999a 	.word	0x9999999a
 800492c:	3fb99999 	.word	0x3fb99999

08004930 <cek>:
	sprintf(buffer, "EYaw:%.2f", setpoint.h - position.h);
	lcd_write_string(buffer);
}

void cek(EKF position)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	eeb0 5a40 	vmov.f32	s10, s0
 800493a:	eef0 5a60 	vmov.f32	s11, s1
 800493e:	eeb0 6a41 	vmov.f32	s12, s2
 8004942:	eef0 6a61 	vmov.f32	s13, s3
 8004946:	eeb0 7a42 	vmov.f32	s14, s4
 800494a:	eef0 7a62 	vmov.f32	s15, s5
 800494e:	ed87 5b00 	vstr	d5, [r7]
 8004952:	ed87 6b02 	vstr	d6, [r7, #8]
 8004956:	ed87 7b04 	vstr	d7, [r7, #16]
	lcd_set_cursor(0, 0);
 800495a:	2100      	movs	r1, #0
 800495c:	2000      	movs	r0, #0
 800495e:	f7fd f95f 	bl	8001c20 <lcd_set_cursor>
	sprintf(buffer, "%d", camera[0]);
 8004962:	4b36      	ldr	r3, [pc, #216]	@ (8004a3c <cek+0x10c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	4935      	ldr	r1, [pc, #212]	@ (8004a40 <cek+0x110>)
 800496a:	4836      	ldr	r0, [pc, #216]	@ (8004a44 <cek+0x114>)
 800496c:	f006 fe1a 	bl	800b5a4 <siprintf>
	lcd_write_string(buffer);
 8004970:	4834      	ldr	r0, [pc, #208]	@ (8004a44 <cek+0x114>)
 8004972:	f7fd f93f 	bl	8001bf4 <lcd_write_string>

	lcd_set_cursor(1, 0);
 8004976:	2100      	movs	r1, #0
 8004978:	2001      	movs	r0, #1
 800497a:	f7fd f951 	bl	8001c20 <lcd_set_cursor>
	sprintf(buffer, "%d", camera[1]);
 800497e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a3c <cek+0x10c>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	461a      	mov	r2, r3
 8004984:	492e      	ldr	r1, [pc, #184]	@ (8004a40 <cek+0x110>)
 8004986:	482f      	ldr	r0, [pc, #188]	@ (8004a44 <cek+0x114>)
 8004988:	f006 fe0c 	bl	800b5a4 <siprintf>
	lcd_write_string(buffer);
 800498c:	482d      	ldr	r0, [pc, #180]	@ (8004a44 <cek+0x114>)
 800498e:	f7fd f931 	bl	8001bf4 <lcd_write_string>

	lcd_set_cursor(2, 0);
 8004992:	2100      	movs	r1, #0
 8004994:	2002      	movs	r0, #2
 8004996:	f7fd f943 	bl	8001c20 <lcd_set_cursor>
	sprintf(buffer, "%d", camera[2]);
 800499a:	4b28      	ldr	r3, [pc, #160]	@ (8004a3c <cek+0x10c>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	461a      	mov	r2, r3
 80049a0:	4927      	ldr	r1, [pc, #156]	@ (8004a40 <cek+0x110>)
 80049a2:	4828      	ldr	r0, [pc, #160]	@ (8004a44 <cek+0x114>)
 80049a4:	f006 fdfe 	bl	800b5a4 <siprintf>
	lcd_write_string(buffer);
 80049a8:	4826      	ldr	r0, [pc, #152]	@ (8004a44 <cek+0x114>)
 80049aa:	f7fd f923 	bl	8001bf4 <lcd_write_string>

	lcd_set_cursor(3, 0);
 80049ae:	2100      	movs	r1, #0
 80049b0:	2003      	movs	r0, #3
 80049b2:	f7fd f935 	bl	8001c20 <lcd_set_cursor>
	sprintf(buffer, "%d", camera[3]);
 80049b6:	4b21      	ldr	r3, [pc, #132]	@ (8004a3c <cek+0x10c>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	461a      	mov	r2, r3
 80049bc:	4920      	ldr	r1, [pc, #128]	@ (8004a40 <cek+0x110>)
 80049be:	4821      	ldr	r0, [pc, #132]	@ (8004a44 <cek+0x114>)
 80049c0:	f006 fdf0 	bl	800b5a4 <siprintf>
	lcd_write_string(buffer);
 80049c4:	481f      	ldr	r0, [pc, #124]	@ (8004a44 <cek+0x114>)
 80049c6:	f7fd f915 	bl	8001bf4 <lcd_write_string>

	lcd_set_cursor(0, 10);
 80049ca:	210a      	movs	r1, #10
 80049cc:	2000      	movs	r0, #0
 80049ce:	f7fd f927 	bl	8001c20 <lcd_set_cursor>
	sprintf(buffer, "%d", camera[4]);
 80049d2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a3c <cek+0x10c>)
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	461a      	mov	r2, r3
 80049d8:	4919      	ldr	r1, [pc, #100]	@ (8004a40 <cek+0x110>)
 80049da:	481a      	ldr	r0, [pc, #104]	@ (8004a44 <cek+0x114>)
 80049dc:	f006 fde2 	bl	800b5a4 <siprintf>
	lcd_write_string(buffer);
 80049e0:	4818      	ldr	r0, [pc, #96]	@ (8004a44 <cek+0x114>)
 80049e2:	f7fd f907 	bl	8001bf4 <lcd_write_string>

	lcd_set_cursor(1, 10);
 80049e6:	210a      	movs	r1, #10
 80049e8:	2001      	movs	r0, #1
 80049ea:	f7fd f919 	bl	8001c20 <lcd_set_cursor>
	sprintf(buffer, "X:%.2f", position.x);
 80049ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f2:	4915      	ldr	r1, [pc, #84]	@ (8004a48 <cek+0x118>)
 80049f4:	4813      	ldr	r0, [pc, #76]	@ (8004a44 <cek+0x114>)
 80049f6:	f006 fdd5 	bl	800b5a4 <siprintf>
	lcd_write_string(buffer);
 80049fa:	4812      	ldr	r0, [pc, #72]	@ (8004a44 <cek+0x114>)
 80049fc:	f7fd f8fa 	bl	8001bf4 <lcd_write_string>

	lcd_set_cursor(2, 10);
 8004a00:	210a      	movs	r1, #10
 8004a02:	2002      	movs	r0, #2
 8004a04:	f7fd f90c 	bl	8001c20 <lcd_set_cursor>
	sprintf(buffer, "Y:%.2f", position.y);
 8004a08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a0c:	490f      	ldr	r1, [pc, #60]	@ (8004a4c <cek+0x11c>)
 8004a0e:	480d      	ldr	r0, [pc, #52]	@ (8004a44 <cek+0x114>)
 8004a10:	f006 fdc8 	bl	800b5a4 <siprintf>
	lcd_write_string(buffer);
 8004a14:	480b      	ldr	r0, [pc, #44]	@ (8004a44 <cek+0x114>)
 8004a16:	f7fd f8ed 	bl	8001bf4 <lcd_write_string>

	lcd_set_cursor(3, 10);
 8004a1a:	210a      	movs	r1, #10
 8004a1c:	2003      	movs	r0, #3
 8004a1e:	f7fd f8ff 	bl	8001c20 <lcd_set_cursor>
	sprintf(buffer, "Yaw:%.2f", position.h);
 8004a22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a26:	490a      	ldr	r1, [pc, #40]	@ (8004a50 <cek+0x120>)
 8004a28:	4806      	ldr	r0, [pc, #24]	@ (8004a44 <cek+0x114>)
 8004a2a:	f006 fdbb 	bl	800b5a4 <siprintf>
	lcd_write_string(buffer);
 8004a2e:	4805      	ldr	r0, [pc, #20]	@ (8004a44 <cek+0x114>)
 8004a30:	f7fd f8e0 	bl	8001bf4 <lcd_write_string>
}
 8004a34:	bf00      	nop
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20000544 	.word	0x20000544
 8004a40:	080102e0 	.word	0x080102e0
 8004a44:	20000594 	.word	0x20000594
 8004a48:	080102a8 	.word	0x080102a8
 8004a4c:	080102b0 	.word	0x080102b0
 8004a50:	080102b8 	.word	0x080102b8
 8004a54:	00000000 	.word	0x00000000

08004a58 <PID_controller>:

    return output;
}

double PID_controller(double setpoint, double actual_position, uint8_t pidMode)
{
 8004a58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a5c:	b08c      	sub	sp, #48	@ 0x30
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	ed87 0b04 	vstr	d0, [r7, #16]
 8004a64:	ed87 1b02 	vstr	d1, [r7, #8]
 8004a68:	4603      	mov	r3, r0
 8004a6a:	71fb      	strb	r3, [r7, #7]
	switch(pidMode)
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	f200 8258 	bhi.w	8004f26 <PID_controller+0x4ce>
 8004a76:	a201      	add	r2, pc, #4	@ (adr r2, 8004a7c <PID_controller+0x24>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004a91 	.word	0x08004a91
 8004a80:	08004ac7 	.word	0x08004ac7
 8004a84:	08004c77 	.word	0x08004c77
 8004a88:	08004e7f 	.word	0x08004e7f
 8004a8c:	08004ef1 	.word	0x08004ef1
	{
	case 1:
		Kp = 1.5, Ki = 0.0, Kd = 0.0;
 8004a90:	499b      	ldr	r1, [pc, #620]	@ (8004d00 <PID_controller+0x2a8>)
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	4b9b      	ldr	r3, [pc, #620]	@ (8004d04 <PID_controller+0x2ac>)
 8004a98:	e9c1 2300 	strd	r2, r3, [r1]
 8004a9c:	499a      	ldr	r1, [pc, #616]	@ (8004d08 <PID_controller+0x2b0>)
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	e9c1 2300 	strd	r2, r3, [r1]
 8004aaa:	4998      	ldr	r1, [pc, #608]	@ (8004d0c <PID_controller+0x2b4>)
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9c1 2300 	strd	r2, r3, [r1]
		tau = 0.1;
 8004ab8:	4995      	ldr	r1, [pc, #596]	@ (8004d10 <PID_controller+0x2b8>)
 8004aba:	a387      	add	r3, pc, #540	@ (adr r3, 8004cd8 <PID_controller+0x280>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8004ac4:	e22f      	b.n	8004f26 <PID_controller+0x4ce>
	case 2:
		if(setpoint > 0 && setpoint < 100)
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ad2:	f7fc f821 	bl	8000b18 <__aeabi_dcmpgt>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d023      	beq.n	8004b24 <PID_controller+0xcc>
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	4b8c      	ldr	r3, [pc, #560]	@ (8004d14 <PID_controller+0x2bc>)
 8004ae2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ae6:	f7fb fff9 	bl	8000adc <__aeabi_dcmplt>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d019      	beq.n	8004b24 <PID_controller+0xcc>
		{
			Kp = 35, Ki = 0.001, Kd = 0.0;
 8004af0:	4983      	ldr	r1, [pc, #524]	@ (8004d00 <PID_controller+0x2a8>)
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	4b88      	ldr	r3, [pc, #544]	@ (8004d18 <PID_controller+0x2c0>)
 8004af8:	e9c1 2300 	strd	r2, r3, [r1]
 8004afc:	4982      	ldr	r1, [pc, #520]	@ (8004d08 <PID_controller+0x2b0>)
 8004afe:	a378      	add	r3, pc, #480	@ (adr r3, 8004ce0 <PID_controller+0x288>)
 8004b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b04:	e9c1 2300 	strd	r2, r3, [r1]
 8004b08:	4980      	ldr	r1, [pc, #512]	@ (8004d0c <PID_controller+0x2b4>)
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8004b16:	497e      	ldr	r1, [pc, #504]	@ (8004d10 <PID_controller+0x2b8>)
 8004b18:	a36f      	add	r3, pc, #444	@ (adr r3, 8004cd8 <PID_controller+0x280>)
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	e9c1 2300 	strd	r2, r3, [r1]
 8004b22:	e0a7      	b.n	8004c74 <PID_controller+0x21c>
		}
		else if(setpoint >= 100 && setpoint < 250)
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	4b7a      	ldr	r3, [pc, #488]	@ (8004d14 <PID_controller+0x2bc>)
 8004b2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b2e:	f7fb ffe9 	bl	8000b04 <__aeabi_dcmpge>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d024      	beq.n	8004b82 <PID_controller+0x12a>
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	4b77      	ldr	r3, [pc, #476]	@ (8004d1c <PID_controller+0x2c4>)
 8004b3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b42:	f7fb ffcb 	bl	8000adc <__aeabi_dcmplt>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01a      	beq.n	8004b82 <PID_controller+0x12a>
		{
			Kp = 12, Ki = 0.0, Kd = 0.0;
 8004b4c:	496c      	ldr	r1, [pc, #432]	@ (8004d00 <PID_controller+0x2a8>)
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	4b73      	ldr	r3, [pc, #460]	@ (8004d20 <PID_controller+0x2c8>)
 8004b54:	e9c1 2300 	strd	r2, r3, [r1]
 8004b58:	496b      	ldr	r1, [pc, #428]	@ (8004d08 <PID_controller+0x2b0>)
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	e9c1 2300 	strd	r2, r3, [r1]
 8004b66:	4969      	ldr	r1, [pc, #420]	@ (8004d0c <PID_controller+0x2b4>)
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8004b74:	4966      	ldr	r1, [pc, #408]	@ (8004d10 <PID_controller+0x2b8>)
 8004b76:	a358      	add	r3, pc, #352	@ (adr r3, 8004cd8 <PID_controller+0x280>)
 8004b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7c:	e9c1 2300 	strd	r2, r3, [r1]
 8004b80:	e078      	b.n	8004c74 <PID_controller+0x21c>
		}
		else if(setpoint >= 250 && setpoint < 750)
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	4b65      	ldr	r3, [pc, #404]	@ (8004d1c <PID_controller+0x2c4>)
 8004b88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b8c:	f7fb ffba 	bl	8000b04 <__aeabi_dcmpge>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d024      	beq.n	8004be0 <PID_controller+0x188>
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	4b62      	ldr	r3, [pc, #392]	@ (8004d24 <PID_controller+0x2cc>)
 8004b9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ba0:	f7fb ff9c 	bl	8000adc <__aeabi_dcmplt>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d01a      	beq.n	8004be0 <PID_controller+0x188>
		{
			Kp = 6, Ki = 0.0, Kd = 0.0;
 8004baa:	4955      	ldr	r1, [pc, #340]	@ (8004d00 <PID_controller+0x2a8>)
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	4b5d      	ldr	r3, [pc, #372]	@ (8004d28 <PID_controller+0x2d0>)
 8004bb2:	e9c1 2300 	strd	r2, r3, [r1]
 8004bb6:	4954      	ldr	r1, [pc, #336]	@ (8004d08 <PID_controller+0x2b0>)
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	e9c1 2300 	strd	r2, r3, [r1]
 8004bc4:	4951      	ldr	r1, [pc, #324]	@ (8004d0c <PID_controller+0x2b4>)
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8004bd2:	494f      	ldr	r1, [pc, #316]	@ (8004d10 <PID_controller+0x2b8>)
 8004bd4:	a340      	add	r3, pc, #256	@ (adr r3, 8004cd8 <PID_controller+0x280>)
 8004bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bda:	e9c1 2300 	strd	r2, r3, [r1]
 8004bde:	e049      	b.n	8004c74 <PID_controller+0x21c>
		}
		else if(setpoint >= 750 && setpoint < 2500)
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	4b4f      	ldr	r3, [pc, #316]	@ (8004d24 <PID_controller+0x2cc>)
 8004be6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004bea:	f7fb ff8b 	bl	8000b04 <__aeabi_dcmpge>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d024      	beq.n	8004c3e <PID_controller+0x1e6>
 8004bf4:	a33c      	add	r3, pc, #240	@ (adr r3, 8004ce8 <PID_controller+0x290>)
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004bfe:	f7fb ff6d 	bl	8000adc <__aeabi_dcmplt>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01a      	beq.n	8004c3e <PID_controller+0x1e6>
		{
			Kp = 3.2, Ki = 0.0, Kd = 0.0;
 8004c08:	493d      	ldr	r1, [pc, #244]	@ (8004d00 <PID_controller+0x2a8>)
 8004c0a:	a339      	add	r3, pc, #228	@ (adr r3, 8004cf0 <PID_controller+0x298>)
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	e9c1 2300 	strd	r2, r3, [r1]
 8004c14:	493c      	ldr	r1, [pc, #240]	@ (8004d08 <PID_controller+0x2b0>)
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	e9c1 2300 	strd	r2, r3, [r1]
 8004c22:	493a      	ldr	r1, [pc, #232]	@ (8004d0c <PID_controller+0x2b4>)
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8004c30:	4937      	ldr	r1, [pc, #220]	@ (8004d10 <PID_controller+0x2b8>)
 8004c32:	a329      	add	r3, pc, #164	@ (adr r3, 8004cd8 <PID_controller+0x280>)
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	e9c1 2300 	strd	r2, r3, [r1]
 8004c3c:	e01a      	b.n	8004c74 <PID_controller+0x21c>
		}
		else
		{
			Kp = 0.7, Ki = 0.0, Kd = 0.0;
 8004c3e:	4930      	ldr	r1, [pc, #192]	@ (8004d00 <PID_controller+0x2a8>)
 8004c40:	a32d      	add	r3, pc, #180	@ (adr r3, 8004cf8 <PID_controller+0x2a0>)
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	e9c1 2300 	strd	r2, r3, [r1]
 8004c4a:	492f      	ldr	r1, [pc, #188]	@ (8004d08 <PID_controller+0x2b0>)
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9c1 2300 	strd	r2, r3, [r1]
 8004c58:	492c      	ldr	r1, [pc, #176]	@ (8004d0c <PID_controller+0x2b4>)
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8004c66:	492a      	ldr	r1, [pc, #168]	@ (8004d10 <PID_controller+0x2b8>)
 8004c68:	a31b      	add	r3, pc, #108	@ (adr r3, 8004cd8 <PID_controller+0x280>)
 8004c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6e:	e9c1 2300 	strd	r2, r3, [r1]
		}
		break;
 8004c72:	e158      	b.n	8004f26 <PID_controller+0x4ce>
 8004c74:	e157      	b.n	8004f26 <PID_controller+0x4ce>
	case 3:
		if(setpoint > 0 && setpoint < 100)
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c82:	f7fb ff49 	bl	8000b18 <__aeabi_dcmpgt>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d04f      	beq.n	8004d2c <PID_controller+0x2d4>
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	4b20      	ldr	r3, [pc, #128]	@ (8004d14 <PID_controller+0x2bc>)
 8004c92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c96:	f7fb ff21 	bl	8000adc <__aeabi_dcmplt>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d045      	beq.n	8004d2c <PID_controller+0x2d4>
		{
			Kp = 35.0, Ki = 0.0, Kd = 0.0;
 8004ca0:	4917      	ldr	r1, [pc, #92]	@ (8004d00 <PID_controller+0x2a8>)
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8004d18 <PID_controller+0x2c0>)
 8004ca8:	e9c1 2300 	strd	r2, r3, [r1]
 8004cac:	4916      	ldr	r1, [pc, #88]	@ (8004d08 <PID_controller+0x2b0>)
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	e9c1 2300 	strd	r2, r3, [r1]
 8004cba:	4914      	ldr	r1, [pc, #80]	@ (8004d0c <PID_controller+0x2b4>)
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8004cc8:	4911      	ldr	r1, [pc, #68]	@ (8004d10 <PID_controller+0x2b8>)
 8004cca:	a303      	add	r3, pc, #12	@ (adr r3, 8004cd8 <PID_controller+0x280>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	e9c1 2300 	strd	r2, r3, [r1]
 8004cd4:	e0d2      	b.n	8004e7c <PID_controller+0x424>
 8004cd6:	bf00      	nop
 8004cd8:	9999999a 	.word	0x9999999a
 8004cdc:	3fb99999 	.word	0x3fb99999
 8004ce0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004ce4:	3f50624d 	.word	0x3f50624d
 8004ce8:	00000000 	.word	0x00000000
 8004cec:	40a38800 	.word	0x40a38800
 8004cf0:	9999999a 	.word	0x9999999a
 8004cf4:	40099999 	.word	0x40099999
 8004cf8:	66666666 	.word	0x66666666
 8004cfc:	3fe66666 	.word	0x3fe66666
 8004d00:	200005f8 	.word	0x200005f8
 8004d04:	3ff80000 	.word	0x3ff80000
 8004d08:	20000600 	.word	0x20000600
 8004d0c:	20000608 	.word	0x20000608
 8004d10:	200000d0 	.word	0x200000d0
 8004d14:	40590000 	.word	0x40590000
 8004d18:	40418000 	.word	0x40418000
 8004d1c:	406f4000 	.word	0x406f4000
 8004d20:	40280000 	.word	0x40280000
 8004d24:	40877000 	.word	0x40877000
 8004d28:	40180000 	.word	0x40180000
		}
		else if(setpoint >= 100 && setpoint < 250)
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	4b63      	ldr	r3, [pc, #396]	@ (8004ec0 <PID_controller+0x468>)
 8004d32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d36:	f7fb fee5 	bl	8000b04 <__aeabi_dcmpge>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d024      	beq.n	8004d8a <PID_controller+0x332>
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	4b5f      	ldr	r3, [pc, #380]	@ (8004ec4 <PID_controller+0x46c>)
 8004d46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d4a:	f7fb fec7 	bl	8000adc <__aeabi_dcmplt>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01a      	beq.n	8004d8a <PID_controller+0x332>
		{
			Kp = 10.0, Ki = 0.0, Kd = 0.0;
 8004d54:	495c      	ldr	r1, [pc, #368]	@ (8004ec8 <PID_controller+0x470>)
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	4b5c      	ldr	r3, [pc, #368]	@ (8004ecc <PID_controller+0x474>)
 8004d5c:	e9c1 2300 	strd	r2, r3, [r1]
 8004d60:	495b      	ldr	r1, [pc, #364]	@ (8004ed0 <PID_controller+0x478>)
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9c1 2300 	strd	r2, r3, [r1]
 8004d6e:	4959      	ldr	r1, [pc, #356]	@ (8004ed4 <PID_controller+0x47c>)
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8004d7c:	4956      	ldr	r1, [pc, #344]	@ (8004ed8 <PID_controller+0x480>)
 8004d7e:	a34e      	add	r3, pc, #312	@ (adr r3, 8004eb8 <PID_controller+0x460>)
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	e9c1 2300 	strd	r2, r3, [r1]
 8004d88:	e078      	b.n	8004e7c <PID_controller+0x424>
		}
		else if(setpoint >= 250 && setpoint < 750)
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	4b4d      	ldr	r3, [pc, #308]	@ (8004ec4 <PID_controller+0x46c>)
 8004d90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d94:	f7fb feb6 	bl	8000b04 <__aeabi_dcmpge>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d024      	beq.n	8004de8 <PID_controller+0x390>
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	4b4e      	ldr	r3, [pc, #312]	@ (8004edc <PID_controller+0x484>)
 8004da4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004da8:	f7fb fe98 	bl	8000adc <__aeabi_dcmplt>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01a      	beq.n	8004de8 <PID_controller+0x390>
		{
			Kp = 6.0, Ki = 0.0, Kd = 0.0;
 8004db2:	4945      	ldr	r1, [pc, #276]	@ (8004ec8 <PID_controller+0x470>)
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	4b49      	ldr	r3, [pc, #292]	@ (8004ee0 <PID_controller+0x488>)
 8004dba:	e9c1 2300 	strd	r2, r3, [r1]
 8004dbe:	4944      	ldr	r1, [pc, #272]	@ (8004ed0 <PID_controller+0x478>)
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	e9c1 2300 	strd	r2, r3, [r1]
 8004dcc:	4941      	ldr	r1, [pc, #260]	@ (8004ed4 <PID_controller+0x47c>)
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8004dda:	493f      	ldr	r1, [pc, #252]	@ (8004ed8 <PID_controller+0x480>)
 8004ddc:	a336      	add	r3, pc, #216	@ (adr r3, 8004eb8 <PID_controller+0x460>)
 8004dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de2:	e9c1 2300 	strd	r2, r3, [r1]
 8004de6:	e049      	b.n	8004e7c <PID_controller+0x424>
		}
		else if(setpoint >= 750 && setpoint < 1200)
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	4b3b      	ldr	r3, [pc, #236]	@ (8004edc <PID_controller+0x484>)
 8004dee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004df2:	f7fb fe87 	bl	8000b04 <__aeabi_dcmpge>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d024      	beq.n	8004e46 <PID_controller+0x3ee>
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	4b38      	ldr	r3, [pc, #224]	@ (8004ee4 <PID_controller+0x48c>)
 8004e02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e06:	f7fb fe69 	bl	8000adc <__aeabi_dcmplt>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01a      	beq.n	8004e46 <PID_controller+0x3ee>
		{
			Kp = 5.0, Ki = 0.0, Kd = 0.0;
 8004e10:	492d      	ldr	r1, [pc, #180]	@ (8004ec8 <PID_controller+0x470>)
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	4b34      	ldr	r3, [pc, #208]	@ (8004ee8 <PID_controller+0x490>)
 8004e18:	e9c1 2300 	strd	r2, r3, [r1]
 8004e1c:	492c      	ldr	r1, [pc, #176]	@ (8004ed0 <PID_controller+0x478>)
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	e9c1 2300 	strd	r2, r3, [r1]
 8004e2a:	492a      	ldr	r1, [pc, #168]	@ (8004ed4 <PID_controller+0x47c>)
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8004e38:	4927      	ldr	r1, [pc, #156]	@ (8004ed8 <PID_controller+0x480>)
 8004e3a:	a31f      	add	r3, pc, #124	@ (adr r3, 8004eb8 <PID_controller+0x460>)
 8004e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e40:	e9c1 2300 	strd	r2, r3, [r1]
 8004e44:	e01a      	b.n	8004e7c <PID_controller+0x424>
		}
		else
		{
			Kp = 1.0, Ki = 0.0, Kd = 0.0;
 8004e46:	4920      	ldr	r1, [pc, #128]	@ (8004ec8 <PID_controller+0x470>)
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	4b27      	ldr	r3, [pc, #156]	@ (8004eec <PID_controller+0x494>)
 8004e4e:	e9c1 2300 	strd	r2, r3, [r1]
 8004e52:	491f      	ldr	r1, [pc, #124]	@ (8004ed0 <PID_controller+0x478>)
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	e9c1 2300 	strd	r2, r3, [r1]
 8004e60:	491c      	ldr	r1, [pc, #112]	@ (8004ed4 <PID_controller+0x47c>)
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	e9c1 2300 	strd	r2, r3, [r1]
			tau = 0.1;
 8004e6e:	491a      	ldr	r1, [pc, #104]	@ (8004ed8 <PID_controller+0x480>)
 8004e70:	a311      	add	r3, pc, #68	@ (adr r3, 8004eb8 <PID_controller+0x460>)
 8004e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e76:	e9c1 2300 	strd	r2, r3, [r1]
		}
		break;
 8004e7a:	e054      	b.n	8004f26 <PID_controller+0x4ce>
 8004e7c:	e053      	b.n	8004f26 <PID_controller+0x4ce>
	case 4:
		Kp = 1.0, Ki = 0.0, Kd = 0.0;
 8004e7e:	4912      	ldr	r1, [pc, #72]	@ (8004ec8 <PID_controller+0x470>)
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	4b19      	ldr	r3, [pc, #100]	@ (8004eec <PID_controller+0x494>)
 8004e86:	e9c1 2300 	strd	r2, r3, [r1]
 8004e8a:	4911      	ldr	r1, [pc, #68]	@ (8004ed0 <PID_controller+0x478>)
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	e9c1 2300 	strd	r2, r3, [r1]
 8004e98:	490e      	ldr	r1, [pc, #56]	@ (8004ed4 <PID_controller+0x47c>)
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	e9c1 2300 	strd	r2, r3, [r1]
		tau = 0.1;
 8004ea6:	490c      	ldr	r1, [pc, #48]	@ (8004ed8 <PID_controller+0x480>)
 8004ea8:	a303      	add	r3, pc, #12	@ (adr r3, 8004eb8 <PID_controller+0x460>)
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8004eb2:	e038      	b.n	8004f26 <PID_controller+0x4ce>
 8004eb4:	f3af 8000 	nop.w
 8004eb8:	9999999a 	.word	0x9999999a
 8004ebc:	3fb99999 	.word	0x3fb99999
 8004ec0:	40590000 	.word	0x40590000
 8004ec4:	406f4000 	.word	0x406f4000
 8004ec8:	200005f8 	.word	0x200005f8
 8004ecc:	40240000 	.word	0x40240000
 8004ed0:	20000600 	.word	0x20000600
 8004ed4:	20000608 	.word	0x20000608
 8004ed8:	200000d0 	.word	0x200000d0
 8004edc:	40877000 	.word	0x40877000
 8004ee0:	40180000 	.word	0x40180000
 8004ee4:	4092c000 	.word	0x4092c000
 8004ee8:	40140000 	.word	0x40140000
 8004eec:	3ff00000 	.word	0x3ff00000
	case 5:
		Kp = 30.0, Ki = 0.0, Kd = 0.0;
 8004ef0:	4975      	ldr	r1, [pc, #468]	@ (80050c8 <PID_controller+0x670>)
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	4b75      	ldr	r3, [pc, #468]	@ (80050cc <PID_controller+0x674>)
 8004ef8:	e9c1 2300 	strd	r2, r3, [r1]
 8004efc:	4974      	ldr	r1, [pc, #464]	@ (80050d0 <PID_controller+0x678>)
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	e9c1 2300 	strd	r2, r3, [r1]
 8004f0a:	4972      	ldr	r1, [pc, #456]	@ (80050d4 <PID_controller+0x67c>)
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	e9c1 2300 	strd	r2, r3, [r1]
		tau = 0.1;
 8004f18:	496f      	ldr	r1, [pc, #444]	@ (80050d8 <PID_controller+0x680>)
 8004f1a:	a369      	add	r3, pc, #420	@ (adr r3, 80050c0 <PID_controller+0x668>)
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8004f24:	bf00      	nop
	}
    double error = setpoint - actual_position;
 8004f26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f2e:	f7fb f9ab 	bl	8000288 <__aeabi_dsub>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Proportional
    double proportional = Kp * error;
 8004f3a:	4b63      	ldr	r3, [pc, #396]	@ (80050c8 <PID_controller+0x670>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004f44:	f7fb fb58 	bl	80005f8 <__aeabi_dmul>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Integral
    integral = integral + 0.5 * Ki * T * (error + prev_error);
 8004f50:	4b5f      	ldr	r3, [pc, #380]	@ (80050d0 <PID_controller+0x678>)
 8004f52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	4b60      	ldr	r3, [pc, #384]	@ (80050dc <PID_controller+0x684>)
 8004f5c:	f7fb fb4c 	bl	80005f8 <__aeabi_dmul>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4610      	mov	r0, r2
 8004f66:	4619      	mov	r1, r3
 8004f68:	4b5d      	ldr	r3, [pc, #372]	@ (80050e0 <PID_controller+0x688>)
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f7fb fb43 	bl	80005f8 <__aeabi_dmul>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4690      	mov	r8, r2
 8004f78:	4699      	mov	r9, r3
 8004f7a:	4b5a      	ldr	r3, [pc, #360]	@ (80050e4 <PID_controller+0x68c>)
 8004f7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f84:	f7fb f982 	bl	800028c <__adddf3>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4640      	mov	r0, r8
 8004f8e:	4649      	mov	r1, r9
 8004f90:	f7fb fb32 	bl	80005f8 <__aeabi_dmul>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4b52      	ldr	r3, [pc, #328]	@ (80050e8 <PID_controller+0x690>)
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	f7fb f973 	bl	800028c <__adddf3>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	494f      	ldr	r1, [pc, #316]	@ (80050e8 <PID_controller+0x690>)
 8004fac:	e9c1 2300 	strd	r2, r3, [r1]

    // Derivative
	derivative = -(2.0 * Kd * (actual_position - prevMeasurement) + (2.0 * tau - T) * derivative) / (2.0 * tau + T);
 8004fb0:	4b48      	ldr	r3, [pc, #288]	@ (80050d4 <PID_controller+0x67c>)
 8004fb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	f7fb f967 	bl	800028c <__adddf3>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4690      	mov	r8, r2
 8004fc4:	4699      	mov	r9, r3
 8004fc6:	4b49      	ldr	r3, [pc, #292]	@ (80050ec <PID_controller+0x694>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fd0:	f7fb f95a 	bl	8000288 <__aeabi_dsub>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4640      	mov	r0, r8
 8004fda:	4649      	mov	r1, r9
 8004fdc:	f7fb fb0c 	bl	80005f8 <__aeabi_dmul>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4690      	mov	r8, r2
 8004fe6:	4699      	mov	r9, r3
 8004fe8:	4b3b      	ldr	r3, [pc, #236]	@ (80050d8 <PID_controller+0x680>)
 8004fea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	f7fb f94b 	bl	800028c <__adddf3>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4b38      	ldr	r3, [pc, #224]	@ (80050e0 <PID_controller+0x688>)
 8005000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005004:	f7fb f940 	bl	8000288 <__aeabi_dsub>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4610      	mov	r0, r2
 800500e:	4619      	mov	r1, r3
 8005010:	4b37      	ldr	r3, [pc, #220]	@ (80050f0 <PID_controller+0x698>)
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	f7fb faef 	bl	80005f8 <__aeabi_dmul>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4640      	mov	r0, r8
 8005020:	4649      	mov	r1, r9
 8005022:	f7fb f933 	bl	800028c <__adddf3>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4614      	mov	r4, r2
 800502c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8005030:	4b29      	ldr	r3, [pc, #164]	@ (80050d8 <PID_controller+0x680>)
 8005032:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005036:	4602      	mov	r2, r0
 8005038:	460b      	mov	r3, r1
 800503a:	f7fb f927 	bl	800028c <__adddf3>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4610      	mov	r0, r2
 8005044:	4619      	mov	r1, r3
 8005046:	4b26      	ldr	r3, [pc, #152]	@ (80050e0 <PID_controller+0x688>)
 8005048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504c:	f7fb f91e 	bl	800028c <__adddf3>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4620      	mov	r0, r4
 8005056:	4629      	mov	r1, r5
 8005058:	f7fb fbf8 	bl	800084c <__aeabi_ddiv>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4923      	ldr	r1, [pc, #140]	@ (80050f0 <PID_controller+0x698>)
 8005062:	e9c1 2300 	strd	r2, r3, [r1]

    double output = proportional + integral + derivative;
 8005066:	4b20      	ldr	r3, [pc, #128]	@ (80050e8 <PID_controller+0x690>)
 8005068:	e9d3 0100 	ldrd	r0, r1, [r3]
 800506c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005070:	f7fb f90c 	bl	800028c <__adddf3>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4610      	mov	r0, r2
 800507a:	4619      	mov	r1, r3
 800507c:	4b1c      	ldr	r3, [pc, #112]	@ (80050f0 <PID_controller+0x698>)
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	f7fb f903 	bl	800028c <__adddf3>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    prev_error = error;
 800508e:	4915      	ldr	r1, [pc, #84]	@ (80050e4 <PID_controller+0x68c>)
 8005090:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005094:	e9c1 2300 	strd	r2, r3, [r1]
	prevMeasurement = actual_position;
 8005098:	4914      	ldr	r1, [pc, #80]	@ (80050ec <PID_controller+0x694>)
 800509a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800509e:	e9c1 2300 	strd	r2, r3, [r1]

    return output;
 80050a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050a6:	ec43 2b17 	vmov	d7, r2, r3
}
 80050aa:	eeb0 0a47 	vmov.f32	s0, s14
 80050ae:	eef0 0a67 	vmov.f32	s1, s15
 80050b2:	3730      	adds	r7, #48	@ 0x30
 80050b4:	46bd      	mov	sp, r7
 80050b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80050ba:	bf00      	nop
 80050bc:	f3af 8000 	nop.w
 80050c0:	9999999a 	.word	0x9999999a
 80050c4:	3fb99999 	.word	0x3fb99999
 80050c8:	200005f8 	.word	0x200005f8
 80050cc:	403e0000 	.word	0x403e0000
 80050d0:	20000600 	.word	0x20000600
 80050d4:	20000608 	.word	0x20000608
 80050d8:	200000d0 	.word	0x200000d0
 80050dc:	3fe00000 	.word	0x3fe00000
 80050e0:	200000d8 	.word	0x200000d8
 80050e4:	200005e8 	.word	0x200005e8
 80050e8:	200005d8 	.word	0x200005d8
 80050ec:	200005f0 	.word	0x200005f0
 80050f0:	200005e0 	.word	0x200005e0
 80050f4:	00000000 	.word	0x00000000

080050f8 <PID_controllerH>:

double PID_controllerH(double setpoint, double actual_position)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	ed87 0b02 	vstr	d0, [r7, #8]
 8005102:	ed87 1b00 	vstr	d1, [r7]
	double error, P;
	if(setpoint >= 45 && setpoint < 90)
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	4b57      	ldr	r3, [pc, #348]	@ (8005268 <PID_controllerH+0x170>)
 800510c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005110:	f7fb fcf8 	bl	8000b04 <__aeabi_dcmpge>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d010      	beq.n	800513c <PID_controllerH+0x44>
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	4b53      	ldr	r3, [pc, #332]	@ (800526c <PID_controllerH+0x174>)
 8005120:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005124:	f7fb fcda 	bl	8000adc <__aeabi_dcmplt>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d006      	beq.n	800513c <PID_controllerH+0x44>
	{
		Kp = 1.7;
 800512e:	4950      	ldr	r1, [pc, #320]	@ (8005270 <PID_controllerH+0x178>)
 8005130:	a347      	add	r3, pc, #284	@ (adr r3, 8005250 <PID_controllerH+0x158>)
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	e9c1 2300 	strd	r2, r3, [r1]
 800513a:	e02a      	b.n	8005192 <PID_controllerH+0x9a>
	}
	else if(setpoint >= 90 && setpoint < 135)
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	4b4a      	ldr	r3, [pc, #296]	@ (800526c <PID_controllerH+0x174>)
 8005142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005146:	f7fb fcdd 	bl	8000b04 <__aeabi_dcmpge>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d010      	beq.n	8005172 <PID_controllerH+0x7a>
 8005150:	a341      	add	r3, pc, #260	@ (adr r3, 8005258 <PID_controllerH+0x160>)
 8005152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005156:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800515a:	f7fb fcbf 	bl	8000adc <__aeabi_dcmplt>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d006      	beq.n	8005172 <PID_controllerH+0x7a>
	{
		Kp = 2.5;
 8005164:	4942      	ldr	r1, [pc, #264]	@ (8005270 <PID_controllerH+0x178>)
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	4b42      	ldr	r3, [pc, #264]	@ (8005274 <PID_controllerH+0x17c>)
 800516c:	e9c1 2300 	strd	r2, r3, [r1]
 8005170:	e00f      	b.n	8005192 <PID_controllerH+0x9a>
	}
	else if(setpoint >= 135)
 8005172:	a339      	add	r3, pc, #228	@ (adr r3, 8005258 <PID_controllerH+0x160>)
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800517c:	f7fb fcc2 	bl	8000b04 <__aeabi_dcmpge>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <PID_controllerH+0x9a>
	{
		Kp = 3.3;
 8005186:	493a      	ldr	r1, [pc, #232]	@ (8005270 <PID_controllerH+0x178>)
 8005188:	a335      	add	r3, pc, #212	@ (adr r3, 8005260 <PID_controllerH+0x168>)
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if((setpoint - actual_position) > 180)
 8005192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005196:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800519a:	f7fb f875 	bl	8000288 <__aeabi_dsub>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4610      	mov	r0, r2
 80051a4:	4619      	mov	r1, r3
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	4b33      	ldr	r3, [pc, #204]	@ (8005278 <PID_controllerH+0x180>)
 80051ac:	f7fb fcb4 	bl	8000b18 <__aeabi_dcmpgt>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00d      	beq.n	80051d2 <PID_controllerH+0xda>
	{
	    error = -(setpoint + actual_position);
 80051b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051be:	f7fb f865 	bl	800028c <__adddf3>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4611      	mov	r1, r2
 80051c8:	61b9      	str	r1, [r7, #24]
 80051ca:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80051ce:	61fb      	str	r3, [r7, #28]
 80051d0:	e026      	b.n	8005220 <PID_controllerH+0x128>
	}
	else if((setpoint - actual_position) < -180)
 80051d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051da:	f7fb f855 	bl	8000288 <__aeabi_dsub>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4610      	mov	r0, r2
 80051e4:	4619      	mov	r1, r3
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	4b24      	ldr	r3, [pc, #144]	@ (800527c <PID_controllerH+0x184>)
 80051ec:	f7fb fc76 	bl	8000adc <__aeabi_dcmplt>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <PID_controllerH+0x114>
	{
		error = setpoint + actual_position;
 80051f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051fe:	f7fb f845 	bl	800028c <__adddf3>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800520a:	e009      	b.n	8005220 <PID_controllerH+0x128>
	}
	else
	{
	    error = setpoint - actual_position;
 800520c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005210:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005214:	f7fb f838 	bl	8000288 <__aeabi_dsub>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}

    // Proportional
	P = Kp * error;
 8005220:	4b13      	ldr	r3, [pc, #76]	@ (8005270 <PID_controllerH+0x178>)
 8005222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005226:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800522a:	f7fb f9e5 	bl	80005f8 <__aeabi_dmul>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return P;
 8005236:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800523a:	ec43 2b17 	vmov	d7, r2, r3
}
 800523e:	eeb0 0a47 	vmov.f32	s0, s14
 8005242:	eef0 0a67 	vmov.f32	s1, s15
 8005246:	3720      	adds	r7, #32
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	f3af 8000 	nop.w
 8005250:	33333333 	.word	0x33333333
 8005254:	3ffb3333 	.word	0x3ffb3333
 8005258:	00000000 	.word	0x00000000
 800525c:	4060e000 	.word	0x4060e000
 8005260:	66666666 	.word	0x66666666
 8005264:	400a6666 	.word	0x400a6666
 8005268:	40468000 	.word	0x40468000
 800526c:	40568000 	.word	0x40568000
 8005270:	200005f8 	.word	0x200005f8
 8005274:	40040000 	.word	0x40040000
 8005278:	40668000 	.word	0x40668000
 800527c:	c0668000 	.word	0xc0668000

08005280 <smoothVelocity>:
#include <robot_control.h>

extern int camera[5];

void smoothVelocity(double* Vx, double* Vy, double* W, double smoothingFactor)
{
 8005280:	b5b0      	push	{r4, r5, r7, lr}
 8005282:	b08c      	sub	sp, #48	@ 0x30
 8005284:	af00      	add	r7, sp, #0
 8005286:	6178      	str	r0, [r7, #20]
 8005288:	6139      	str	r1, [r7, #16]
 800528a:	60fa      	str	r2, [r7, #12]
 800528c:	ed87 0b00 	vstr	d0, [r7]
	double prevVx = 0.0;
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double prevVy = 0.0;
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double prevW = 0.0;
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *Vx = (1.0 - smoothingFactor) * prevVx + smoothingFactor * (*Vx);
 80052b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052b8:	f04f 0000 	mov.w	r0, #0
 80052bc:	493e      	ldr	r1, [pc, #248]	@ (80053b8 <smoothVelocity+0x138>)
 80052be:	f7fa ffe3 	bl	8000288 <__aeabi_dsub>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4610      	mov	r0, r2
 80052c8:	4619      	mov	r1, r3
 80052ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052ce:	f7fb f993 	bl	80005f8 <__aeabi_dmul>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4614      	mov	r4, r2
 80052d8:	461d      	mov	r5, r3
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052e4:	f7fb f988 	bl	80005f8 <__aeabi_dmul>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4620      	mov	r0, r4
 80052ee:	4629      	mov	r1, r5
 80052f0:	f7fa ffcc 	bl	800028c <__adddf3>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	6979      	ldr	r1, [r7, #20]
 80052fa:	e9c1 2300 	strd	r2, r3, [r1]
    *Vy = (1.0 - smoothingFactor) * prevVy + smoothingFactor * (*Vy);
 80052fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005302:	f04f 0000 	mov.w	r0, #0
 8005306:	492c      	ldr	r1, [pc, #176]	@ (80053b8 <smoothVelocity+0x138>)
 8005308:	f7fa ffbe 	bl	8000288 <__aeabi_dsub>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4610      	mov	r0, r2
 8005312:	4619      	mov	r1, r3
 8005314:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005318:	f7fb f96e 	bl	80005f8 <__aeabi_dmul>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4614      	mov	r4, r2
 8005322:	461d      	mov	r5, r3
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800532a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800532e:	f7fb f963 	bl	80005f8 <__aeabi_dmul>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4620      	mov	r0, r4
 8005338:	4629      	mov	r1, r5
 800533a:	f7fa ffa7 	bl	800028c <__adddf3>
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	6939      	ldr	r1, [r7, #16]
 8005344:	e9c1 2300 	strd	r2, r3, [r1]
    *W = (1.0 - smoothingFactor) * prevW + smoothingFactor * (*W);
 8005348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800534c:	f04f 0000 	mov.w	r0, #0
 8005350:	4919      	ldr	r1, [pc, #100]	@ (80053b8 <smoothVelocity+0x138>)
 8005352:	f7fa ff99 	bl	8000288 <__aeabi_dsub>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4610      	mov	r0, r2
 800535c:	4619      	mov	r1, r3
 800535e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005362:	f7fb f949 	bl	80005f8 <__aeabi_dmul>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4614      	mov	r4, r2
 800536c:	461d      	mov	r5, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005378:	f7fb f93e 	bl	80005f8 <__aeabi_dmul>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4620      	mov	r0, r4
 8005382:	4629      	mov	r1, r5
 8005384:	f7fa ff82 	bl	800028c <__adddf3>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	68f9      	ldr	r1, [r7, #12]
 800538e:	e9c1 2300 	strd	r2, r3, [r1]

    prevVx = *Vx;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    prevVy = *Vy;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    prevW = *W;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
}
 80053b0:	bf00      	nop
 80053b2:	3730      	adds	r7, #48	@ 0x30
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bdb0      	pop	{r4, r5, r7, pc}
 80053b8:	3ff00000 	.word	0x3ff00000
 80053bc:	00000000 	.word	0x00000000

080053c0 <PID_Kalman>:
    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
    Inverse_Kinematics(Vx, Vy, W);
}

void PID_Kalman(EKF setpoint, uint8_t pidMode)
{
 80053c0:	b5b0      	push	{r4, r5, r7, lr}
 80053c2:	b094      	sub	sp, #80	@ 0x50
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	eeb0 5a40 	vmov.f32	s10, s0
 80053ca:	eef0 5a60 	vmov.f32	s11, s1
 80053ce:	eeb0 6a41 	vmov.f32	s12, s2
 80053d2:	eef0 6a61 	vmov.f32	s13, s3
 80053d6:	eeb0 7a42 	vmov.f32	s14, s4
 80053da:	eef0 7a62 	vmov.f32	s15, s5
 80053de:	4603      	mov	r3, r0
 80053e0:	ed87 5b02 	vstr	d5, [r7, #8]
 80053e4:	ed87 6b04 	vstr	d6, [r7, #16]
 80053e8:	ed87 7b06 	vstr	d7, [r7, #24]
 80053ec:	71fb      	strb	r3, [r7, #7]
	EKF position = extendedKalmanFilter();
 80053ee:	f7fe fb0f 	bl	8003a10 <extendedKalmanFilter>
 80053f2:	eeb0 5a40 	vmov.f32	s10, s0
 80053f6:	eef0 5a60 	vmov.f32	s11, s1
 80053fa:	eeb0 6a41 	vmov.f32	s12, s2
 80053fe:	eef0 6a61 	vmov.f32	s13, s3
 8005402:	eeb0 7a42 	vmov.f32	s14, s4
 8005406:	eef0 7a62 	vmov.f32	s15, s5
 800540a:	ed87 5b0e 	vstr	d5, [r7, #56]	@ 0x38
 800540e:	ed87 6b10 	vstr	d6, [r7, #64]	@ 0x40
 8005412:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
	double Vx = 0;
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double Vy = 0;
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double W = 0;
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	e9c7 2308 	strd	r2, r3, [r7, #32]
//		Vx = PID_controller(setpoint.x, position.x, pidMode);
//		Vy = PID_controller(setpoint.y, position.y, pidMode);
//		W = PID_controllerH(setpoint.h, position.h);
//	}

	Vx = PID_controller(setpoint.x, position.x, pidMode);
 800543a:	ed97 7b02 	vldr	d7, [r7, #8]
 800543e:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	4618      	mov	r0, r3
 8005446:	eeb0 1a46 	vmov.f32	s2, s12
 800544a:	eef0 1a66 	vmov.f32	s3, s13
 800544e:	eeb0 0a47 	vmov.f32	s0, s14
 8005452:	eef0 0a67 	vmov.f32	s1, s15
 8005456:	f7ff faff 	bl	8004a58 <PID_controller>
 800545a:	eeb0 7a40 	vmov.f32	s14, s0
 800545e:	eef0 7a60 	vmov.f32	s15, s1
 8005462:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
	Vy = PID_controller(setpoint.y, position.y, pidMode);
 8005466:	ed97 7b04 	vldr	d7, [r7, #16]
 800546a:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	4618      	mov	r0, r3
 8005472:	eeb0 1a46 	vmov.f32	s2, s12
 8005476:	eef0 1a66 	vmov.f32	s3, s13
 800547a:	eeb0 0a47 	vmov.f32	s0, s14
 800547e:	eef0 0a67 	vmov.f32	s1, s15
 8005482:	f7ff fae9 	bl	8004a58 <PID_controller>
 8005486:	eeb0 7a40 	vmov.f32	s14, s0
 800548a:	eef0 7a60 	vmov.f32	s15, s1
 800548e:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
	W = PID_controllerH(setpoint.h, position.h);
 8005492:	ed97 7b06 	vldr	d7, [r7, #24]
 8005496:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800549a:	eeb0 1a46 	vmov.f32	s2, s12
 800549e:	eef0 1a66 	vmov.f32	s3, s13
 80054a2:	eeb0 0a47 	vmov.f32	s0, s14
 80054a6:	eef0 0a67 	vmov.f32	s1, s15
 80054aa:	f7ff fe25 	bl	80050f8 <PID_controllerH>
 80054ae:	eeb0 7a40 	vmov.f32	s14, s0
 80054b2:	eef0 7a60 	vmov.f32	s15, s1
 80054b6:	ed87 7b08 	vstr	d7, [r7, #32]

    smoothVelocity(&Vx, &Vy, &W, 0.5);
 80054ba:	f107 0220 	add.w	r2, r7, #32
 80054be:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80054c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80054c6:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8005510 <PID_Kalman+0x150>
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff fed8 	bl	8005280 <smoothVelocity>
	Inverse_Kinematics(Vx, Vy, W);
 80054d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80054d4:	4610      	mov	r0, r2
 80054d6:	4619      	mov	r1, r3
 80054d8:	f7fb fb3e 	bl	8000b58 <__aeabi_d2iz>
 80054dc:	4604      	mov	r4, r0
 80054de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054e2:	4610      	mov	r0, r2
 80054e4:	4619      	mov	r1, r3
 80054e6:	f7fb fb37 	bl	8000b58 <__aeabi_d2iz>
 80054ea:	4605      	mov	r5, r0
 80054ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054f0:	4610      	mov	r0, r2
 80054f2:	4619      	mov	r1, r3
 80054f4:	f7fb fb30 	bl	8000b58 <__aeabi_d2iz>
 80054f8:	4603      	mov	r3, r0
 80054fa:	461a      	mov	r2, r3
 80054fc:	4629      	mov	r1, r5
 80054fe:	4620      	mov	r0, r4
 8005500:	f7fb fe22 	bl	8001148 <Inverse_Kinematics>
}
 8005504:	bf00      	nop
 8005506:	3750      	adds	r7, #80	@ 0x50
 8005508:	46bd      	mov	sp, r7
 800550a:	bdb0      	pop	{r4, r5, r7, pc}
 800550c:	f3af 8000 	nop.w
 8005510:	00000000 	.word	0x00000000
 8005514:	3fe00000 	.word	0x3fe00000

08005518 <PID_steptoCoordinate>:

    Inverse_Kinematics(Vx, Vy, W);
}

void PID_steptoCoordinate(EKF *setpoint, uint8_t pidMode, double tolerance, uint16_t amount)
{
 8005518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800551c:	b090      	sub	sp, #64	@ 0x40
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	460b      	mov	r3, r1
 8005524:	ed87 0b00 	vstr	d0, [r7]
 8005528:	72fb      	strb	r3, [r7, #11]
 800552a:	4613      	mov	r3, r2
 800552c:	813b      	strh	r3, [r7, #8]
	EKF currentPosition = extendedKalmanFilter();
 800552e:	f7fe fa6f 	bl	8003a10 <extendedKalmanFilter>
 8005532:	eeb0 5a40 	vmov.f32	s10, s0
 8005536:	eef0 5a60 	vmov.f32	s11, s1
 800553a:	eeb0 6a41 	vmov.f32	s12, s2
 800553e:	eef0 6a61 	vmov.f32	s13, s3
 8005542:	eeb0 7a42 	vmov.f32	s14, s4
 8005546:	eef0 7a62 	vmov.f32	s15, s5
 800554a:	ed87 5b04 	vstr	d5, [r7, #16]
 800554e:	ed87 6b06 	vstr	d6, [r7, #24]
 8005552:	ed87 7b08 	vstr	d7, [r7, #32]
	static uint8_t index = 0;

	double Vx = PID_controller(setpoint[index].x, currentPosition.x, pidMode);
 8005556:	4b6f      	ldr	r3, [pc, #444]	@ (8005714 <PID_steptoCoordinate+0x1fc>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	4613      	mov	r3, r2
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	4413      	add	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	461a      	mov	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4413      	add	r3, r2
 800556a:	ed93 7b00 	vldr	d7, [r3]
 800556e:	ed97 6b04 	vldr	d6, [r7, #16]
 8005572:	7afb      	ldrb	r3, [r7, #11]
 8005574:	4618      	mov	r0, r3
 8005576:	eeb0 1a46 	vmov.f32	s2, s12
 800557a:	eef0 1a66 	vmov.f32	s3, s13
 800557e:	eeb0 0a47 	vmov.f32	s0, s14
 8005582:	eef0 0a67 	vmov.f32	s1, s15
 8005586:	f7ff fa67 	bl	8004a58 <PID_controller>
 800558a:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
	double Vy = PID_controller(setpoint[index].y, currentPosition.y, pidMode);
 800558e:	4b61      	ldr	r3, [pc, #388]	@ (8005714 <PID_steptoCoordinate+0x1fc>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	4613      	mov	r3, r2
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	4413      	add	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	461a      	mov	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	ed93 7b02 	vldr	d7, [r3, #8]
 80055a6:	ed97 6b06 	vldr	d6, [r7, #24]
 80055aa:	7afb      	ldrb	r3, [r7, #11]
 80055ac:	4618      	mov	r0, r3
 80055ae:	eeb0 1a46 	vmov.f32	s2, s12
 80055b2:	eef0 1a66 	vmov.f32	s3, s13
 80055b6:	eeb0 0a47 	vmov.f32	s0, s14
 80055ba:	eef0 0a67 	vmov.f32	s1, s15
 80055be:	f7ff fa4b 	bl	8004a58 <PID_controller>
 80055c2:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	double W = PID_controllerH(setpoint[index].h, currentPosition.h);
 80055c6:	4b53      	ldr	r3, [pc, #332]	@ (8005714 <PID_steptoCoordinate+0x1fc>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	4613      	mov	r3, r2
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	4413      	add	r3, r2
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	461a      	mov	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4413      	add	r3, r2
 80055da:	ed93 7b04 	vldr	d7, [r3, #16]
 80055de:	ed97 6b08 	vldr	d6, [r7, #32]
 80055e2:	eeb0 1a46 	vmov.f32	s2, s12
 80055e6:	eef0 1a66 	vmov.f32	s3, s13
 80055ea:	eeb0 0a47 	vmov.f32	s0, s14
 80055ee:	eef0 0a67 	vmov.f32	s1, s15
 80055f2:	f7ff fd81 	bl	80050f8 <PID_controllerH>
 80055f6:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	if(fabs(setpoint[index].x - currentPosition.x) < tolerance && fabs(setpoint[index].y - currentPosition.y) < tolerance && fabs(setpoint[index].h - currentPosition.h) < 0.5)
 80055fa:	4b46      	ldr	r3, [pc, #280]	@ (8005714 <PID_steptoCoordinate+0x1fc>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	4613      	mov	r3, r2
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	4413      	add	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	461a      	mov	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4413      	add	r3, r2
 800560e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005612:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005616:	f7fa fe37 	bl	8000288 <__aeabi_dsub>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4692      	mov	sl, r2
 8005620:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8005624:	4652      	mov	r2, sl
 8005626:	465b      	mov	r3, fp
 8005628:	e9d7 0100 	ldrd	r0, r1, [r7]
 800562c:	f7fb fa74 	bl	8000b18 <__aeabi_dcmpgt>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d048      	beq.n	80056c8 <PID_steptoCoordinate+0x1b0>
 8005636:	4b37      	ldr	r3, [pc, #220]	@ (8005714 <PID_steptoCoordinate+0x1fc>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	4613      	mov	r3, r2
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4413      	add	r3, r2
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	461a      	mov	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800564e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005652:	f7fa fe19 	bl	8000288 <__aeabi_dsub>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4690      	mov	r8, r2
 800565c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8005660:	4642      	mov	r2, r8
 8005662:	464b      	mov	r3, r9
 8005664:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005668:	f7fb fa56 	bl	8000b18 <__aeabi_dcmpgt>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d02a      	beq.n	80056c8 <PID_steptoCoordinate+0x1b0>
 8005672:	4b28      	ldr	r3, [pc, #160]	@ (8005714 <PID_steptoCoordinate+0x1fc>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	4613      	mov	r3, r2
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	4413      	add	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	461a      	mov	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4413      	add	r3, r2
 8005686:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800568a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800568e:	f7fa fdfb 	bl	8000288 <__aeabi_dsub>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4614      	mov	r4, r2
 8005698:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005718 <PID_steptoCoordinate+0x200>)
 80056a2:	4620      	mov	r0, r4
 80056a4:	4629      	mov	r1, r5
 80056a6:	f7fb fa19 	bl	8000adc <__aeabi_dcmplt>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00b      	beq.n	80056c8 <PID_steptoCoordinate+0x1b0>
	{
		Inverse_Kinematics(0, 0, 0);
 80056b0:	2200      	movs	r2, #0
 80056b2:	2100      	movs	r1, #0
 80056b4:	2000      	movs	r0, #0
 80056b6:	f7fb fd47 	bl	8001148 <Inverse_Kinematics>
		index++;
 80056ba:	4b16      	ldr	r3, [pc, #88]	@ (8005714 <PID_steptoCoordinate+0x1fc>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	3301      	adds	r3, #1
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	4b14      	ldr	r3, [pc, #80]	@ (8005714 <PID_steptoCoordinate+0x1fc>)
 80056c4:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Inverse_Kinematics(Vx, Vy, W);
	}
}
 80056c6:	e01f      	b.n	8005708 <PID_steptoCoordinate+0x1f0>
	else if(index > amount)
 80056c8:	4b12      	ldr	r3, [pc, #72]	@ (8005714 <PID_steptoCoordinate+0x1fc>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	893b      	ldrh	r3, [r7, #8]
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d205      	bcs.n	80056e0 <PID_steptoCoordinate+0x1c8>
		Inverse_Kinematics(0, 0, 0);
 80056d4:	2200      	movs	r2, #0
 80056d6:	2100      	movs	r1, #0
 80056d8:	2000      	movs	r0, #0
 80056da:	f7fb fd35 	bl	8001148 <Inverse_Kinematics>
}
 80056de:	e013      	b.n	8005708 <PID_steptoCoordinate+0x1f0>
		Inverse_Kinematics(Vx, Vy, W);
 80056e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80056e4:	f7fb fa38 	bl	8000b58 <__aeabi_d2iz>
 80056e8:	4604      	mov	r4, r0
 80056ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80056ee:	f7fb fa33 	bl	8000b58 <__aeabi_d2iz>
 80056f2:	4605      	mov	r5, r0
 80056f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80056f8:	f7fb fa2e 	bl	8000b58 <__aeabi_d2iz>
 80056fc:	4603      	mov	r3, r0
 80056fe:	461a      	mov	r2, r3
 8005700:	4629      	mov	r1, r5
 8005702:	4620      	mov	r0, r4
 8005704:	f7fb fd20 	bl	8001148 <Inverse_Kinematics>
}
 8005708:	bf00      	nop
 800570a:	3740      	adds	r7, #64	@ 0x40
 800570c:	46bd      	mov	sp, r7
 800570e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005712:	bf00      	nop
 8005714:	20000610 	.word	0x20000610
 8005718:	3fe00000 	.word	0x3fe00000
 800571c:	00000000 	.word	0x00000000

08005720 <findtheBall>:
    // Apply inverse kinematics
    Inverse_Kinematics(Vx, Vy, W);
}

void findtheBall()
{
 8005720:	b5b0      	push	{r4, r5, r7, lr}
 8005722:	b08a      	sub	sp, #40	@ 0x28
 8005724:	af00      	add	r7, sp, #0
	 * 2: ball angle
	 * 3: 3 ball existence
	 * 4: silo distance
	 * 5: silo angle
	 */
	int yBALL = camera[0];
 8005726:	4b56      	ldr	r3, [pc, #344]	@ (8005880 <findtheBall+0x160>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	627b      	str	r3, [r7, #36]	@ 0x24
	int ballAngle = camera[1];
 800572c:	4b54      	ldr	r3, [pc, #336]	@ (8005880 <findtheBall+0x160>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	623b      	str	r3, [r7, #32]
	int xBALL = tan(ballAngle*M_PI/180) * yBALL;
 8005732:	6a38      	ldr	r0, [r7, #32]
 8005734:	f7fa fef6 	bl	8000524 <__aeabi_i2d>
 8005738:	a34b      	add	r3, pc, #300	@ (adr r3, 8005868 <findtheBall+0x148>)
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f7fa ff5b 	bl	80005f8 <__aeabi_dmul>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4610      	mov	r0, r2
 8005748:	4619      	mov	r1, r3
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	4b4d      	ldr	r3, [pc, #308]	@ (8005884 <findtheBall+0x164>)
 8005750:	f7fb f87c 	bl	800084c <__aeabi_ddiv>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	ec43 2b17 	vmov	d7, r2, r3
 800575c:	eeb0 0a47 	vmov.f32	s0, s14
 8005760:	eef0 0a67 	vmov.f32	s1, s15
 8005764:	f008 fe10 	bl	800e388 <tan>
 8005768:	ec55 4b10 	vmov	r4, r5, d0
 800576c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800576e:	f7fa fed9 	bl	8000524 <__aeabi_i2d>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4620      	mov	r0, r4
 8005778:	4629      	mov	r1, r5
 800577a:	f7fa ff3d 	bl	80005f8 <__aeabi_dmul>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4610      	mov	r0, r2
 8005784:	4619      	mov	r1, r3
 8005786:	f7fb f9e7 	bl	8000b58 <__aeabi_d2iz>
 800578a:	4603      	mov	r3, r0
 800578c:	61fb      	str	r3, [r7, #28]

	double Vx = PID_controller(xBALL, 0.0, 3);
 800578e:	69f8      	ldr	r0, [r7, #28]
 8005790:	f7fa fec8 	bl	8000524 <__aeabi_i2d>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	2003      	movs	r0, #3
 800579a:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 8005870 <findtheBall+0x150>
 800579e:	ec43 2b10 	vmov	d0, r2, r3
 80057a2:	f7ff f959 	bl	8004a58 <PID_controller>
 80057a6:	eeb0 7a40 	vmov.f32	s14, s0
 80057aa:	eef0 7a60 	vmov.f32	s15, s1
 80057ae:	ed87 7b04 	vstr	d7, [r7, #16]
	double Vy = PID_controller(yBALL, 0.0, 3);
 80057b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057b4:	f7fa feb6 	bl	8000524 <__aeabi_i2d>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	2003      	movs	r0, #3
 80057be:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 8005870 <findtheBall+0x150>
 80057c2:	ec43 2b10 	vmov	d0, r2, r3
 80057c6:	f7ff f947 	bl	8004a58 <PID_controller>
 80057ca:	eeb0 7a40 	vmov.f32	s14, s0
 80057ce:	eef0 7a60 	vmov.f32	s15, s1
 80057d2:	ed87 7b02 	vstr	d7, [r7, #8]
	double W = PID_controllerH(ballAngle, 0.0);
 80057d6:	6a38      	ldr	r0, [r7, #32]
 80057d8:	f7fa fea4 	bl	8000524 <__aeabi_i2d>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8005870 <findtheBall+0x150>
 80057e4:	ec43 2b10 	vmov	d0, r2, r3
 80057e8:	f7ff fc86 	bl	80050f8 <PID_controllerH>
 80057ec:	eeb0 7a40 	vmov.f32	s14, s0
 80057f0:	eef0 7a60 	vmov.f32	s15, s1
 80057f4:	ed87 7b00 	vstr	d7, [r7]

    smoothVelocity(&Vx, &Vy, &W, 0.5);
 80057f8:	463a      	mov	r2, r7
 80057fa:	f107 0108 	add.w	r1, r7, #8
 80057fe:	f107 0310 	add.w	r3, r7, #16
 8005802:	ed9f 0b1d 	vldr	d0, [pc, #116]	@ 8005878 <findtheBall+0x158>
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff fd3a 	bl	8005280 <smoothVelocity>

	//	goto the ball
	if(xBALL != 0 && yBALL != 0 && ballAngle != 0)
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d020      	beq.n	8005854 <findtheBall+0x134>
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01d      	beq.n	8005854 <findtheBall+0x134>
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01a      	beq.n	8005854 <findtheBall+0x134>
	{
		Inverse_Kinematics(Vx, Vy, W);
 800581e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005822:	4610      	mov	r0, r2
 8005824:	4619      	mov	r1, r3
 8005826:	f7fb f997 	bl	8000b58 <__aeabi_d2iz>
 800582a:	4604      	mov	r4, r0
 800582c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005830:	4610      	mov	r0, r2
 8005832:	4619      	mov	r1, r3
 8005834:	f7fb f990 	bl	8000b58 <__aeabi_d2iz>
 8005838:	4605      	mov	r5, r0
 800583a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800583e:	4610      	mov	r0, r2
 8005840:	4619      	mov	r1, r3
 8005842:	f7fb f989 	bl	8000b58 <__aeabi_d2iz>
 8005846:	4603      	mov	r3, r0
 8005848:	461a      	mov	r2, r3
 800584a:	4629      	mov	r1, r5
 800584c:	4620      	mov	r0, r4
 800584e:	f7fb fc7b 	bl	8001148 <Inverse_Kinematics>
 8005852:	e005      	b.n	8005860 <findtheBall+0x140>
	}
	else
	{
		Inverse_Kinematics(0, 0, 120);
 8005854:	2278      	movs	r2, #120	@ 0x78
 8005856:	2100      	movs	r1, #0
 8005858:	2000      	movs	r0, #0
 800585a:	f7fb fc75 	bl	8001148 <Inverse_Kinematics>
	}
}
 800585e:	bf00      	nop
 8005860:	bf00      	nop
 8005862:	3728      	adds	r7, #40	@ 0x28
 8005864:	46bd      	mov	sp, r7
 8005866:	bdb0      	pop	{r4, r5, r7, pc}
 8005868:	54442d18 	.word	0x54442d18
 800586c:	400921fb 	.word	0x400921fb
	...
 800587c:	3fe00000 	.word	0x3fe00000
 8005880:	20000544 	.word	0x20000544
 8005884:	40668000 	.word	0x40668000

08005888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800588e:	2300      	movs	r3, #0
 8005890:	607b      	str	r3, [r7, #4]
 8005892:	4b10      	ldr	r3, [pc, #64]	@ (80058d4 <HAL_MspInit+0x4c>)
 8005894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005896:	4a0f      	ldr	r2, [pc, #60]	@ (80058d4 <HAL_MspInit+0x4c>)
 8005898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800589c:	6453      	str	r3, [r2, #68]	@ 0x44
 800589e:	4b0d      	ldr	r3, [pc, #52]	@ (80058d4 <HAL_MspInit+0x4c>)
 80058a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058a6:	607b      	str	r3, [r7, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058aa:	2300      	movs	r3, #0
 80058ac:	603b      	str	r3, [r7, #0]
 80058ae:	4b09      	ldr	r3, [pc, #36]	@ (80058d4 <HAL_MspInit+0x4c>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b2:	4a08      	ldr	r2, [pc, #32]	@ (80058d4 <HAL_MspInit+0x4c>)
 80058b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80058ba:	4b06      	ldr	r3, [pc, #24]	@ (80058d4 <HAL_MspInit+0x4c>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80058c6:	2007      	movs	r0, #7
 80058c8:	f000 fcd0 	bl	800626c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40023800 	.word	0x40023800

080058d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08a      	sub	sp, #40	@ 0x28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058e0:	f107 0314 	add.w	r3, r7, #20
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	609a      	str	r2, [r3, #8]
 80058ec:	60da      	str	r2, [r3, #12]
 80058ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a19      	ldr	r2, [pc, #100]	@ (800595c <HAL_I2C_MspInit+0x84>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d12c      	bne.n	8005954 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058fa:	2300      	movs	r3, #0
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	4b18      	ldr	r3, [pc, #96]	@ (8005960 <HAL_I2C_MspInit+0x88>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005902:	4a17      	ldr	r2, [pc, #92]	@ (8005960 <HAL_I2C_MspInit+0x88>)
 8005904:	f043 0302 	orr.w	r3, r3, #2
 8005908:	6313      	str	r3, [r2, #48]	@ 0x30
 800590a:	4b15      	ldr	r3, [pc, #84]	@ (8005960 <HAL_I2C_MspInit+0x88>)
 800590c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005916:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800591a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800591c:	2312      	movs	r3, #18
 800591e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005920:	2300      	movs	r3, #0
 8005922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005924:	2303      	movs	r3, #3
 8005926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005928:	2304      	movs	r3, #4
 800592a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800592c:	f107 0314 	add.w	r3, r7, #20
 8005930:	4619      	mov	r1, r3
 8005932:	480c      	ldr	r0, [pc, #48]	@ (8005964 <HAL_I2C_MspInit+0x8c>)
 8005934:	f000 fd6e 	bl	8006414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	4b08      	ldr	r3, [pc, #32]	@ (8005960 <HAL_I2C_MspInit+0x88>)
 800593e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005940:	4a07      	ldr	r2, [pc, #28]	@ (8005960 <HAL_I2C_MspInit+0x88>)
 8005942:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005946:	6413      	str	r3, [r2, #64]	@ 0x40
 8005948:	4b05      	ldr	r3, [pc, #20]	@ (8005960 <HAL_I2C_MspInit+0x88>)
 800594a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005954:	bf00      	nop
 8005956:	3728      	adds	r7, #40	@ 0x28
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	40005800 	.word	0x40005800
 8005960:	40023800 	.word	0x40023800
 8005964:	40020400 	.word	0x40020400

08005968 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a2a      	ldr	r2, [pc, #168]	@ (8005a20 <HAL_TIM_Base_MspInit+0xb8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d116      	bne.n	80059a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	4b29      	ldr	r3, [pc, #164]	@ (8005a24 <HAL_TIM_Base_MspInit+0xbc>)
 8005980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005982:	4a28      	ldr	r2, [pc, #160]	@ (8005a24 <HAL_TIM_Base_MspInit+0xbc>)
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	6453      	str	r3, [r2, #68]	@ 0x44
 800598a:	4b26      	ldr	r3, [pc, #152]	@ (8005a24 <HAL_TIM_Base_MspInit+0xbc>)
 800598c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005996:	2200      	movs	r2, #0
 8005998:	2100      	movs	r1, #0
 800599a:	201b      	movs	r0, #27
 800599c:	f000 fc71 	bl	8006282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80059a0:	201b      	movs	r0, #27
 80059a2:	f000 fc8a 	bl	80062ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80059a6:	e036      	b.n	8005a16 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b0:	d116      	bne.n	80059e0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80059b2:	2300      	movs	r3, #0
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005a24 <HAL_TIM_Base_MspInit+0xbc>)
 80059b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005a24 <HAL_TIM_Base_MspInit+0xbc>)
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80059c2:	4b18      	ldr	r3, [pc, #96]	@ (8005a24 <HAL_TIM_Base_MspInit+0xbc>)
 80059c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	613b      	str	r3, [r7, #16]
 80059cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80059ce:	2200      	movs	r2, #0
 80059d0:	2100      	movs	r1, #0
 80059d2:	201c      	movs	r0, #28
 80059d4:	f000 fc55 	bl	8006282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80059d8:	201c      	movs	r0, #28
 80059da:	f000 fc6e 	bl	80062ba <HAL_NVIC_EnableIRQ>
}
 80059de:	e01a      	b.n	8005a16 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a10      	ldr	r2, [pc, #64]	@ (8005a28 <HAL_TIM_Base_MspInit+0xc0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d115      	bne.n	8005a16 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005a24 <HAL_TIM_Base_MspInit+0xbc>)
 80059f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005a24 <HAL_TIM_Base_MspInit+0xbc>)
 80059f4:	f043 0302 	orr.w	r3, r3, #2
 80059f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80059fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005a24 <HAL_TIM_Base_MspInit+0xbc>)
 80059fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8005a06:	2200      	movs	r2, #0
 8005a08:	2100      	movs	r1, #0
 8005a0a:	202e      	movs	r0, #46	@ 0x2e
 8005a0c:	f000 fc39 	bl	8006282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8005a10:	202e      	movs	r0, #46	@ 0x2e
 8005a12:	f000 fc52 	bl	80062ba <HAL_NVIC_EnableIRQ>
}
 8005a16:	bf00      	nop
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40023800 	.word	0x40023800
 8005a28:	40010400 	.word	0x40010400

08005a2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08a      	sub	sp, #40	@ 0x28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a34:	f107 0314 	add.w	r3, r7, #20
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	605a      	str	r2, [r3, #4]
 8005a3e:	609a      	str	r2, [r3, #8]
 8005a40:	60da      	str	r2, [r3, #12]
 8005a42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a37      	ldr	r2, [pc, #220]	@ (8005b28 <HAL_TIM_MspPostInit+0xfc>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d11f      	bne.n	8005a8e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a4e:	2300      	movs	r3, #0
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	4b36      	ldr	r3, [pc, #216]	@ (8005b2c <HAL_TIM_MspPostInit+0x100>)
 8005a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a56:	4a35      	ldr	r2, [pc, #212]	@ (8005b2c <HAL_TIM_MspPostInit+0x100>)
 8005a58:	f043 0310 	orr.w	r3, r3, #16
 8005a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a5e:	4b33      	ldr	r3, [pc, #204]	@ (8005b2c <HAL_TIM_MspPostInit+0x100>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a62:	f003 0310 	and.w	r3, r3, #16
 8005a66:	613b      	str	r3, [r7, #16]
 8005a68:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8005a6a:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8005a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a70:	2312      	movs	r3, #18
 8005a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005a74:	2302      	movs	r3, #2
 8005a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a80:	f107 0314 	add.w	r3, r7, #20
 8005a84:	4619      	mov	r1, r3
 8005a86:	482a      	ldr	r0, [pc, #168]	@ (8005b30 <HAL_TIM_MspPostInit+0x104>)
 8005a88:	f000 fcc4 	bl	8006414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005a8c:	e047      	b.n	8005b1e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a96:	d11e      	bne.n	8005ad6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	4b23      	ldr	r3, [pc, #140]	@ (8005b2c <HAL_TIM_MspPostInit+0x100>)
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa0:	4a22      	ldr	r2, [pc, #136]	@ (8005b2c <HAL_TIM_MspPostInit+0x100>)
 8005aa2:	f043 0301 	orr.w	r3, r3, #1
 8005aa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005aa8:	4b20      	ldr	r3, [pc, #128]	@ (8005b2c <HAL_TIM_MspPostInit+0x100>)
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005ab4:	230c      	movs	r3, #12
 8005ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ab8:	2312      	movs	r3, #18
 8005aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005abc:	2302      	movs	r3, #2
 8005abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ac8:	f107 0314 	add.w	r3, r7, #20
 8005acc:	4619      	mov	r1, r3
 8005ace:	4819      	ldr	r0, [pc, #100]	@ (8005b34 <HAL_TIM_MspPostInit+0x108>)
 8005ad0:	f000 fca0 	bl	8006414 <HAL_GPIO_Init>
}
 8005ad4:	e023      	b.n	8005b1e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a17      	ldr	r2, [pc, #92]	@ (8005b38 <HAL_TIM_MspPostInit+0x10c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d11e      	bne.n	8005b1e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60bb      	str	r3, [r7, #8]
 8005ae4:	4b11      	ldr	r3, [pc, #68]	@ (8005b2c <HAL_TIM_MspPostInit+0x100>)
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae8:	4a10      	ldr	r2, [pc, #64]	@ (8005b2c <HAL_TIM_MspPostInit+0x100>)
 8005aea:	f043 0304 	orr.w	r3, r3, #4
 8005aee:	6313      	str	r3, [r2, #48]	@ 0x30
 8005af0:	4b0e      	ldr	r3, [pc, #56]	@ (8005b2c <HAL_TIM_MspPostInit+0x100>)
 8005af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	60bb      	str	r3, [r7, #8]
 8005afa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005afc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8005b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b02:	2312      	movs	r3, #18
 8005b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b06:	2302      	movs	r3, #2
 8005b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b12:	f107 0314 	add.w	r3, r7, #20
 8005b16:	4619      	mov	r1, r3
 8005b18:	4808      	ldr	r0, [pc, #32]	@ (8005b3c <HAL_TIM_MspPostInit+0x110>)
 8005b1a:	f000 fc7b 	bl	8006414 <HAL_GPIO_Init>
}
 8005b1e:	bf00      	nop
 8005b20:	3728      	adds	r7, #40	@ 0x28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	40021000 	.word	0x40021000
 8005b34:	40020000 	.word	0x40020000
 8005b38:	40010400 	.word	0x40010400
 8005b3c:	40020800 	.word	0x40020800

08005b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	@ 0x30
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b48:	f107 031c 	add.w	r3, r7, #28
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	605a      	str	r2, [r3, #4]
 8005b52:	609a      	str	r2, [r3, #8]
 8005b54:	60da      	str	r2, [r3, #12]
 8005b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a3a      	ldr	r2, [pc, #232]	@ (8005c48 <HAL_UART_MspInit+0x108>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d134      	bne.n	8005bcc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b62:	2300      	movs	r3, #0
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	4b39      	ldr	r3, [pc, #228]	@ (8005c4c <HAL_UART_MspInit+0x10c>)
 8005b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6a:	4a38      	ldr	r2, [pc, #224]	@ (8005c4c <HAL_UART_MspInit+0x10c>)
 8005b6c:	f043 0310 	orr.w	r3, r3, #16
 8005b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b72:	4b36      	ldr	r3, [pc, #216]	@ (8005c4c <HAL_UART_MspInit+0x10c>)
 8005b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	61bb      	str	r3, [r7, #24]
 8005b7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b7e:	2300      	movs	r3, #0
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	4b32      	ldr	r3, [pc, #200]	@ (8005c4c <HAL_UART_MspInit+0x10c>)
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	4a31      	ldr	r2, [pc, #196]	@ (8005c4c <HAL_UART_MspInit+0x10c>)
 8005b88:	f043 0302 	orr.w	r3, r3, #2
 8005b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005c4c <HAL_UART_MspInit+0x10c>)
 8005b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005b9a:	23c0      	movs	r3, #192	@ 0xc0
 8005b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005baa:	2307      	movs	r3, #7
 8005bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bae:	f107 031c 	add.w	r3, r7, #28
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4826      	ldr	r0, [pc, #152]	@ (8005c50 <HAL_UART_MspInit+0x110>)
 8005bb6:	f000 fc2d 	bl	8006414 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	2025      	movs	r0, #37	@ 0x25
 8005bc0:	f000 fb5f 	bl	8006282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005bc4:	2025      	movs	r0, #37	@ 0x25
 8005bc6:	f000 fb78 	bl	80062ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005bca:	e038      	b.n	8005c3e <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a20      	ldr	r2, [pc, #128]	@ (8005c54 <HAL_UART_MspInit+0x114>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d133      	bne.n	8005c3e <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	613b      	str	r3, [r7, #16]
 8005bda:	4b1c      	ldr	r3, [pc, #112]	@ (8005c4c <HAL_UART_MspInit+0x10c>)
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bde:	4a1b      	ldr	r2, [pc, #108]	@ (8005c4c <HAL_UART_MspInit+0x10c>)
 8005be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005be6:	4b19      	ldr	r3, [pc, #100]	@ (8005c4c <HAL_UART_MspInit+0x10c>)
 8005be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bee:	613b      	str	r3, [r7, #16]
 8005bf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	4b15      	ldr	r3, [pc, #84]	@ (8005c4c <HAL_UART_MspInit+0x10c>)
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfa:	4a14      	ldr	r2, [pc, #80]	@ (8005c4c <HAL_UART_MspInit+0x10c>)
 8005bfc:	f043 0308 	orr.w	r3, r3, #8
 8005c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c02:	4b12      	ldr	r3, [pc, #72]	@ (8005c4c <HAL_UART_MspInit+0x10c>)
 8005c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005c0e:	2360      	movs	r3, #96	@ 0x60
 8005c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c12:	2302      	movs	r3, #2
 8005c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005c1e:	2307      	movs	r3, #7
 8005c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c22:	f107 031c 	add.w	r3, r7, #28
 8005c26:	4619      	mov	r1, r3
 8005c28:	480b      	ldr	r0, [pc, #44]	@ (8005c58 <HAL_UART_MspInit+0x118>)
 8005c2a:	f000 fbf3 	bl	8006414 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2100      	movs	r1, #0
 8005c32:	2026      	movs	r0, #38	@ 0x26
 8005c34:	f000 fb25 	bl	8006282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005c38:	2026      	movs	r0, #38	@ 0x26
 8005c3a:	f000 fb3e 	bl	80062ba <HAL_NVIC_EnableIRQ>
}
 8005c3e:	bf00      	nop
 8005c40:	3730      	adds	r7, #48	@ 0x30
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40011000 	.word	0x40011000
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	40020400 	.word	0x40020400
 8005c54:	40004400 	.word	0x40004400
 8005c58:	40020c00 	.word	0x40020c00

08005c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005c60:	bf00      	nop
 8005c62:	e7fd      	b.n	8005c60 <NMI_Handler+0x4>

08005c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c68:	bf00      	nop
 8005c6a:	e7fd      	b.n	8005c68 <HardFault_Handler+0x4>

08005c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <MemManage_Handler+0x4>

08005c74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c78:	bf00      	nop
 8005c7a:	e7fd      	b.n	8005c78 <BusFault_Handler+0x4>

08005c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <UsageFault_Handler+0x4>

08005c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c88:	bf00      	nop
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c92:	b480      	push	{r7}
 8005c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c96:	bf00      	nop
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ca4:	bf00      	nop
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005cb2:	f000 f9c7 	bl	8006044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005cb6:	bf00      	nop
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_2_Pin);
 8005cbe:	2001      	movs	r0, #1
 8005cc0:	f000 fd76 	bl	80067b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005cc4:	bf00      	nop
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_2_Pin);
 8005ccc:	2002      	movs	r0, #2
 8005cce:	f000 fd6f 	bl	80067b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005cd2:	bf00      	nop
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_1_Pin);
 8005cda:	2004      	movs	r0, #4
 8005cdc:	f000 fd68 	bl	80067b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005ce0:	bf00      	nop
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_1_Pin);
 8005ce8:	2008      	movs	r0, #8
 8005cea:	f000 fd61 	bl	80067b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005cee:	bf00      	nop
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_3_Pin);
 8005cf6:	2020      	movs	r0, #32
 8005cf8:	f000 fd5a 	bl	80067b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8005cfc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005d00:	f000 fd56 	bl	80067b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005d04:	bf00      	nop
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d0c:	4802      	ldr	r0, [pc, #8]	@ (8005d18 <TIM1_CC_IRQHandler+0x10>)
 8005d0e:	f002 f85b 	bl	8007dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005d12:	bf00      	nop
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20000338 	.word	0x20000338

08005d1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005d20:	4802      	ldr	r0, [pc, #8]	@ (8005d2c <TIM2_IRQHandler+0x10>)
 8005d22:	f002 f851 	bl	8007dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005d26:	bf00      	nop
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000380 	.word	0x20000380

08005d30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
//		pitch = sensorData[1];
//		ax = sensorData[2];
//		ay = sensorData[3];
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005d34:	4802      	ldr	r0, [pc, #8]	@ (8005d40 <USART1_IRQHandler+0x10>)
 8005d36:	f002 ff67 	bl	8008c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005d3a:	bf00      	nop
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000410 	.word	0x20000410

08005d44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005d48:	4802      	ldr	r0, [pc, #8]	@ (8005d54 <USART2_IRQHandler+0x10>)
 8005d4a:	f002 ff5d 	bl	8008c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005d4e:	bf00      	nop
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000458 	.word	0x20000458

08005d58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8005d5c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005d60:	f000 fd26 	bl	80067b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8005d64:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005d68:	f000 fd22 	bl	80067b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_3_Pin);
 8005d6c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005d70:	f000 fd1e 	bl	80067b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_4_Pin);
 8005d74:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005d78:	f000 fd1a 	bl	80067b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_4_Pin);
 8005d7c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005d80:	f000 fd16 	bl	80067b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005d84:	bf00      	nop
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005d8c:	4802      	ldr	r0, [pc, #8]	@ (8005d98 <TIM8_CC_IRQHandler+0x10>)
 8005d8e:	f002 f81b 	bl	8007dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	200003c8 	.word	0x200003c8

08005d9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  return 1;
 8005da0:	2301      	movs	r3, #1
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <_kill>:

int _kill(int pid, int sig)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005db6:	f005 fd19 	bl	800b7ec <__errno>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2216      	movs	r2, #22
 8005dbe:	601a      	str	r2, [r3, #0]
  return -1;
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <_exit>:

void _exit (int status)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff ffe7 	bl	8005dac <_kill>
  while (1) {}    /* Make sure we hang here */
 8005dde:	bf00      	nop
 8005de0:	e7fd      	b.n	8005dde <_exit+0x12>

08005de2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b086      	sub	sp, #24
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005dee:	2300      	movs	r3, #0
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	e00a      	b.n	8005e0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005df4:	f3af 8000 	nop.w
 8005df8:	4601      	mov	r1, r0
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	60ba      	str	r2, [r7, #8]
 8005e00:	b2ca      	uxtb	r2, r1
 8005e02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	3301      	adds	r3, #1
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	dbf0      	blt.n	8005df4 <_read+0x12>
  }

  return len;
 8005e12:	687b      	ldr	r3, [r7, #4]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	e009      	b.n	8005e42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	60ba      	str	r2, [r7, #8]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	dbf1      	blt.n	8005e2e <_write+0x12>
  }
  return len;
 8005e4a:	687b      	ldr	r3, [r7, #4]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <_close>:

int _close(int file)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005e7c:	605a      	str	r2, [r3, #4]
  return 0;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <_isatty>:

int _isatty(int file)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005e94:	2301      	movs	r3, #1
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b085      	sub	sp, #20
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ec4:	4a14      	ldr	r2, [pc, #80]	@ (8005f18 <_sbrk+0x5c>)
 8005ec6:	4b15      	ldr	r3, [pc, #84]	@ (8005f1c <_sbrk+0x60>)
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ed0:	4b13      	ldr	r3, [pc, #76]	@ (8005f20 <_sbrk+0x64>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d102      	bne.n	8005ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ed8:	4b11      	ldr	r3, [pc, #68]	@ (8005f20 <_sbrk+0x64>)
 8005eda:	4a12      	ldr	r2, [pc, #72]	@ (8005f24 <_sbrk+0x68>)
 8005edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ede:	4b10      	ldr	r3, [pc, #64]	@ (8005f20 <_sbrk+0x64>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d207      	bcs.n	8005efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005eec:	f005 fc7e 	bl	800b7ec <__errno>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	220c      	movs	r2, #12
 8005ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8005efa:	e009      	b.n	8005f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005efc:	4b08      	ldr	r3, [pc, #32]	@ (8005f20 <_sbrk+0x64>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f02:	4b07      	ldr	r3, [pc, #28]	@ (8005f20 <_sbrk+0x64>)
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4413      	add	r3, r2
 8005f0a:	4a05      	ldr	r2, [pc, #20]	@ (8005f20 <_sbrk+0x64>)
 8005f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	20020000 	.word	0x20020000
 8005f1c:	00000400 	.word	0x00000400
 8005f20:	20000614 	.word	0x20000614
 8005f24:	20000768 	.word	0x20000768

08005f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f2c:	4b06      	ldr	r3, [pc, #24]	@ (8005f48 <SystemInit+0x20>)
 8005f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f32:	4a05      	ldr	r2, [pc, #20]	@ (8005f48 <SystemInit+0x20>)
 8005f34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f3c:	bf00      	nop
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	e000ed00 	.word	0xe000ed00

08005f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005f84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005f50:	f7ff ffea 	bl	8005f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005f54:	480c      	ldr	r0, [pc, #48]	@ (8005f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005f56:	490d      	ldr	r1, [pc, #52]	@ (8005f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005f58:	4a0d      	ldr	r2, [pc, #52]	@ (8005f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f5c:	e002      	b.n	8005f64 <LoopCopyDataInit>

08005f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f62:	3304      	adds	r3, #4

08005f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f68:	d3f9      	bcc.n	8005f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8005f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8005f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f70:	e001      	b.n	8005f76 <LoopFillZerobss>

08005f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f74:	3204      	adds	r2, #4

08005f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f78:	d3fb      	bcc.n	8005f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f7a:	f005 fc3d 	bl	800b7f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f7e:	f7fc f81b 	bl	8001fb8 <main>
  bx  lr    
 8005f82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f8c:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8005f90:	08010a10 	.word	0x08010a10
  ldr r2, =_sbss
 8005f94:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8005f98:	20000768 	.word	0x20000768

08005f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f9c:	e7fe      	b.n	8005f9c <ADC_IRQHandler>
	...

08005fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8005fe0 <HAL_Init+0x40>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8005fe0 <HAL_Init+0x40>)
 8005faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe0 <HAL_Init+0x40>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe0 <HAL_Init+0x40>)
 8005fb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fbc:	4b08      	ldr	r3, [pc, #32]	@ (8005fe0 <HAL_Init+0x40>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a07      	ldr	r2, [pc, #28]	@ (8005fe0 <HAL_Init+0x40>)
 8005fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fc8:	2003      	movs	r0, #3
 8005fca:	f000 f94f 	bl	800626c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005fce:	2000      	movs	r0, #0
 8005fd0:	f000 f808 	bl	8005fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005fd4:	f7ff fc58 	bl	8005888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40023c00 	.word	0x40023c00

08005fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005fec:	4b12      	ldr	r3, [pc, #72]	@ (8006038 <HAL_InitTick+0x54>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4b12      	ldr	r3, [pc, #72]	@ (800603c <HAL_InitTick+0x58>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006002:	4618      	mov	r0, r3
 8006004:	f000 f967 	bl	80062d6 <HAL_SYSTICK_Config>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e00e      	b.n	8006030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b0f      	cmp	r3, #15
 8006016:	d80a      	bhi.n	800602e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006018:	2200      	movs	r2, #0
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	f000 f92f 	bl	8006282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006024:	4a06      	ldr	r2, [pc, #24]	@ (8006040 <HAL_InitTick+0x5c>)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e000      	b.n	8006030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
}
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	200000e0 	.word	0x200000e0
 800603c:	200000e8 	.word	0x200000e8
 8006040:	200000e4 	.word	0x200000e4

08006044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006048:	4b06      	ldr	r3, [pc, #24]	@ (8006064 <HAL_IncTick+0x20>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	4b06      	ldr	r3, [pc, #24]	@ (8006068 <HAL_IncTick+0x24>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4413      	add	r3, r2
 8006054:	4a04      	ldr	r2, [pc, #16]	@ (8006068 <HAL_IncTick+0x24>)
 8006056:	6013      	str	r3, [r2, #0]
}
 8006058:	bf00      	nop
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	200000e8 	.word	0x200000e8
 8006068:	20000618 	.word	0x20000618

0800606c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  return uwTick;
 8006070:	4b03      	ldr	r3, [pc, #12]	@ (8006080 <HAL_GetTick+0x14>)
 8006072:	681b      	ldr	r3, [r3, #0]
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20000618 	.word	0x20000618

08006084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800608c:	f7ff ffee 	bl	800606c <HAL_GetTick>
 8006090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d005      	beq.n	80060aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800609e:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <HAL_Delay+0x44>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80060aa:	bf00      	nop
 80060ac:	f7ff ffde 	bl	800606c <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d8f7      	bhi.n	80060ac <HAL_Delay+0x28>
  {
  }
}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	200000e8 	.word	0x200000e8

080060cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006110 <__NVIC_SetPriorityGrouping+0x44>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80060e8:	4013      	ands	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80060f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060fe:	4a04      	ldr	r2, [pc, #16]	@ (8006110 <__NVIC_SetPriorityGrouping+0x44>)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	60d3      	str	r3, [r2, #12]
}
 8006104:	bf00      	nop
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	e000ed00 	.word	0xe000ed00

08006114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006118:	4b04      	ldr	r3, [pc, #16]	@ (800612c <__NVIC_GetPriorityGrouping+0x18>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	0a1b      	lsrs	r3, r3, #8
 800611e:	f003 0307 	and.w	r3, r3, #7
}
 8006122:	4618      	mov	r0, r3
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	e000ed00 	.word	0xe000ed00

08006130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	4603      	mov	r3, r0
 8006138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800613a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800613e:	2b00      	cmp	r3, #0
 8006140:	db0b      	blt.n	800615a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	f003 021f 	and.w	r2, r3, #31
 8006148:	4907      	ldr	r1, [pc, #28]	@ (8006168 <__NVIC_EnableIRQ+0x38>)
 800614a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	2001      	movs	r0, #1
 8006152:	fa00 f202 	lsl.w	r2, r0, r2
 8006156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	e000e100 	.word	0xe000e100

0800616c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	4603      	mov	r3, r0
 8006174:	6039      	str	r1, [r7, #0]
 8006176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800617c:	2b00      	cmp	r3, #0
 800617e:	db0a      	blt.n	8006196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	b2da      	uxtb	r2, r3
 8006184:	490c      	ldr	r1, [pc, #48]	@ (80061b8 <__NVIC_SetPriority+0x4c>)
 8006186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800618a:	0112      	lsls	r2, r2, #4
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	440b      	add	r3, r1
 8006190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006194:	e00a      	b.n	80061ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	4908      	ldr	r1, [pc, #32]	@ (80061bc <__NVIC_SetPriority+0x50>)
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	3b04      	subs	r3, #4
 80061a4:	0112      	lsls	r2, r2, #4
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	440b      	add	r3, r1
 80061aa:	761a      	strb	r2, [r3, #24]
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	e000e100 	.word	0xe000e100
 80061bc:	e000ed00 	.word	0xe000ed00

080061c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b089      	sub	sp, #36	@ 0x24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	f1c3 0307 	rsb	r3, r3, #7
 80061da:	2b04      	cmp	r3, #4
 80061dc:	bf28      	it	cs
 80061de:	2304      	movcs	r3, #4
 80061e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	3304      	adds	r3, #4
 80061e6:	2b06      	cmp	r3, #6
 80061e8:	d902      	bls.n	80061f0 <NVIC_EncodePriority+0x30>
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	3b03      	subs	r3, #3
 80061ee:	e000      	b.n	80061f2 <NVIC_EncodePriority+0x32>
 80061f0:	2300      	movs	r3, #0
 80061f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061f4:	f04f 32ff 	mov.w	r2, #4294967295
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	fa02 f303 	lsl.w	r3, r2, r3
 80061fe:	43da      	mvns	r2, r3
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	401a      	ands	r2, r3
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006208:	f04f 31ff 	mov.w	r1, #4294967295
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	fa01 f303 	lsl.w	r3, r1, r3
 8006212:	43d9      	mvns	r1, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006218:	4313      	orrs	r3, r2
         );
}
 800621a:	4618      	mov	r0, r3
 800621c:	3724      	adds	r7, #36	@ 0x24
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
	...

08006228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3b01      	subs	r3, #1
 8006234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006238:	d301      	bcc.n	800623e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800623a:	2301      	movs	r3, #1
 800623c:	e00f      	b.n	800625e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800623e:	4a0a      	ldr	r2, [pc, #40]	@ (8006268 <SysTick_Config+0x40>)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3b01      	subs	r3, #1
 8006244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006246:	210f      	movs	r1, #15
 8006248:	f04f 30ff 	mov.w	r0, #4294967295
 800624c:	f7ff ff8e 	bl	800616c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006250:	4b05      	ldr	r3, [pc, #20]	@ (8006268 <SysTick_Config+0x40>)
 8006252:	2200      	movs	r2, #0
 8006254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006256:	4b04      	ldr	r3, [pc, #16]	@ (8006268 <SysTick_Config+0x40>)
 8006258:	2207      	movs	r2, #7
 800625a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	e000e010 	.word	0xe000e010

0800626c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff ff29 	bl	80060cc <__NVIC_SetPriorityGrouping>
}
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006282:	b580      	push	{r7, lr}
 8006284:	b086      	sub	sp, #24
 8006286:	af00      	add	r7, sp, #0
 8006288:	4603      	mov	r3, r0
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	607a      	str	r2, [r7, #4]
 800628e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006290:	2300      	movs	r3, #0
 8006292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006294:	f7ff ff3e 	bl	8006114 <__NVIC_GetPriorityGrouping>
 8006298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	6978      	ldr	r0, [r7, #20]
 80062a0:	f7ff ff8e 	bl	80061c0 <NVIC_EncodePriority>
 80062a4:	4602      	mov	r2, r0
 80062a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062aa:	4611      	mov	r1, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff ff5d 	bl	800616c <__NVIC_SetPriority>
}
 80062b2:	bf00      	nop
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	4603      	mov	r3, r0
 80062c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7ff ff31 	bl	8006130 <__NVIC_EnableIRQ>
}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b082      	sub	sp, #8
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff ffa2 	bl	8006228 <SysTick_Config>
 80062e4:	4603      	mov	r3, r0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80062fc:	f7ff feb6 	bl	800606c <HAL_GetTick>
 8006300:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b02      	cmp	r3, #2
 800630c:	d008      	beq.n	8006320 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2280      	movs	r2, #128	@ 0x80
 8006312:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e052      	b.n	80063c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0216 	bic.w	r2, r2, #22
 800632e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695a      	ldr	r2, [r3, #20]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800633e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006344:	2b00      	cmp	r3, #0
 8006346:	d103      	bne.n	8006350 <HAL_DMA_Abort+0x62>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0208 	bic.w	r2, r2, #8
 800635e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0201 	bic.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006370:	e013      	b.n	800639a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006372:	f7ff fe7b 	bl	800606c <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b05      	cmp	r3, #5
 800637e:	d90c      	bls.n	800639a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2203      	movs	r2, #3
 800638a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e015      	b.n	80063c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e4      	bne.n	8006372 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ac:	223f      	movs	r2, #63	@ 0x3f
 80063ae:	409a      	lsls	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d004      	beq.n	80063ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2280      	movs	r2, #128	@ 0x80
 80063e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e00c      	b.n	8006406 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2205      	movs	r2, #5
 80063f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0201 	bic.w	r2, r2, #1
 8006402:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006414:	b480      	push	{r7}
 8006416:	b089      	sub	sp, #36	@ 0x24
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006422:	2300      	movs	r3, #0
 8006424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006426:	2300      	movs	r3, #0
 8006428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	e16b      	b.n	8006708 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006430:	2201      	movs	r2, #1
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4013      	ands	r3, r2
 8006442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	429a      	cmp	r2, r3
 800644a:	f040 815a 	bne.w	8006702 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	2b01      	cmp	r3, #1
 8006458:	d005      	beq.n	8006466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006462:	2b02      	cmp	r3, #2
 8006464:	d130      	bne.n	80064c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	2203      	movs	r2, #3
 8006472:	fa02 f303 	lsl.w	r3, r2, r3
 8006476:	43db      	mvns	r3, r3
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	4013      	ands	r3, r2
 800647c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	fa02 f303 	lsl.w	r3, r2, r3
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	4313      	orrs	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800649c:	2201      	movs	r2, #1
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	43db      	mvns	r3, r3
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	4013      	ands	r3, r2
 80064aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	f003 0201 	and.w	r2, r3, #1
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	4313      	orrs	r3, r2
 80064c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f003 0303 	and.w	r3, r3, #3
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d017      	beq.n	8006504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	2203      	movs	r2, #3
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	43db      	mvns	r3, r3
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	4013      	ands	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	fa02 f303 	lsl.w	r3, r2, r3
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f003 0303 	and.w	r3, r3, #3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d123      	bne.n	8006558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	08da      	lsrs	r2, r3, #3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3208      	adds	r2, #8
 8006518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	220f      	movs	r2, #15
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	43db      	mvns	r3, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4013      	ands	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	fa02 f303 	lsl.w	r3, r2, r3
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	4313      	orrs	r3, r2
 8006548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	08da      	lsrs	r2, r3, #3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3208      	adds	r2, #8
 8006552:	69b9      	ldr	r1, [r7, #24]
 8006554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	2203      	movs	r2, #3
 8006564:	fa02 f303 	lsl.w	r3, r2, r3
 8006568:	43db      	mvns	r3, r3
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	4013      	ands	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f003 0203 	and.w	r2, r3, #3
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	4313      	orrs	r3, r2
 8006584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 80b4 	beq.w	8006702 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	4b60      	ldr	r3, [pc, #384]	@ (8006720 <HAL_GPIO_Init+0x30c>)
 80065a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a2:	4a5f      	ldr	r2, [pc, #380]	@ (8006720 <HAL_GPIO_Init+0x30c>)
 80065a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80065aa:	4b5d      	ldr	r3, [pc, #372]	@ (8006720 <HAL_GPIO_Init+0x30c>)
 80065ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065b6:	4a5b      	ldr	r2, [pc, #364]	@ (8006724 <HAL_GPIO_Init+0x310>)
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	089b      	lsrs	r3, r3, #2
 80065bc:	3302      	adds	r3, #2
 80065be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	220f      	movs	r2, #15
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	43db      	mvns	r3, r3
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	4013      	ands	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a52      	ldr	r2, [pc, #328]	@ (8006728 <HAL_GPIO_Init+0x314>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d02b      	beq.n	800663a <HAL_GPIO_Init+0x226>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a51      	ldr	r2, [pc, #324]	@ (800672c <HAL_GPIO_Init+0x318>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d025      	beq.n	8006636 <HAL_GPIO_Init+0x222>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a50      	ldr	r2, [pc, #320]	@ (8006730 <HAL_GPIO_Init+0x31c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d01f      	beq.n	8006632 <HAL_GPIO_Init+0x21e>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a4f      	ldr	r2, [pc, #316]	@ (8006734 <HAL_GPIO_Init+0x320>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d019      	beq.n	800662e <HAL_GPIO_Init+0x21a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a4e      	ldr	r2, [pc, #312]	@ (8006738 <HAL_GPIO_Init+0x324>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d013      	beq.n	800662a <HAL_GPIO_Init+0x216>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a4d      	ldr	r2, [pc, #308]	@ (800673c <HAL_GPIO_Init+0x328>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00d      	beq.n	8006626 <HAL_GPIO_Init+0x212>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a4c      	ldr	r2, [pc, #304]	@ (8006740 <HAL_GPIO_Init+0x32c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d007      	beq.n	8006622 <HAL_GPIO_Init+0x20e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a4b      	ldr	r2, [pc, #300]	@ (8006744 <HAL_GPIO_Init+0x330>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d101      	bne.n	800661e <HAL_GPIO_Init+0x20a>
 800661a:	2307      	movs	r3, #7
 800661c:	e00e      	b.n	800663c <HAL_GPIO_Init+0x228>
 800661e:	2308      	movs	r3, #8
 8006620:	e00c      	b.n	800663c <HAL_GPIO_Init+0x228>
 8006622:	2306      	movs	r3, #6
 8006624:	e00a      	b.n	800663c <HAL_GPIO_Init+0x228>
 8006626:	2305      	movs	r3, #5
 8006628:	e008      	b.n	800663c <HAL_GPIO_Init+0x228>
 800662a:	2304      	movs	r3, #4
 800662c:	e006      	b.n	800663c <HAL_GPIO_Init+0x228>
 800662e:	2303      	movs	r3, #3
 8006630:	e004      	b.n	800663c <HAL_GPIO_Init+0x228>
 8006632:	2302      	movs	r3, #2
 8006634:	e002      	b.n	800663c <HAL_GPIO_Init+0x228>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <HAL_GPIO_Init+0x228>
 800663a:	2300      	movs	r3, #0
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	f002 0203 	and.w	r2, r2, #3
 8006642:	0092      	lsls	r2, r2, #2
 8006644:	4093      	lsls	r3, r2
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	4313      	orrs	r3, r2
 800664a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800664c:	4935      	ldr	r1, [pc, #212]	@ (8006724 <HAL_GPIO_Init+0x310>)
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	089b      	lsrs	r3, r3, #2
 8006652:	3302      	adds	r3, #2
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800665a:	4b3b      	ldr	r3, [pc, #236]	@ (8006748 <HAL_GPIO_Init+0x334>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	43db      	mvns	r3, r3
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	4013      	ands	r3, r2
 8006668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	4313      	orrs	r3, r2
 800667c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800667e:	4a32      	ldr	r2, [pc, #200]	@ (8006748 <HAL_GPIO_Init+0x334>)
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006684:	4b30      	ldr	r3, [pc, #192]	@ (8006748 <HAL_GPIO_Init+0x334>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	43db      	mvns	r3, r3
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4013      	ands	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066a8:	4a27      	ldr	r2, [pc, #156]	@ (8006748 <HAL_GPIO_Init+0x334>)
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066ae:	4b26      	ldr	r3, [pc, #152]	@ (8006748 <HAL_GPIO_Init+0x334>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	43db      	mvns	r3, r3
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4013      	ands	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006748 <HAL_GPIO_Init+0x334>)
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006748 <HAL_GPIO_Init+0x334>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	4013      	ands	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80066fc:	4a12      	ldr	r2, [pc, #72]	@ (8006748 <HAL_GPIO_Init+0x334>)
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	3301      	adds	r3, #1
 8006706:	61fb      	str	r3, [r7, #28]
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	2b0f      	cmp	r3, #15
 800670c:	f67f ae90 	bls.w	8006430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	3724      	adds	r7, #36	@ 0x24
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40023800 	.word	0x40023800
 8006724:	40013800 	.word	0x40013800
 8006728:	40020000 	.word	0x40020000
 800672c:	40020400 	.word	0x40020400
 8006730:	40020800 	.word	0x40020800
 8006734:	40020c00 	.word	0x40020c00
 8006738:	40021000 	.word	0x40021000
 800673c:	40021400 	.word	0x40021400
 8006740:	40021800 	.word	0x40021800
 8006744:	40021c00 	.word	0x40021c00
 8006748:	40013c00 	.word	0x40013c00

0800674c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	460b      	mov	r3, r1
 8006756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	887b      	ldrh	r3, [r7, #2]
 800675e:	4013      	ands	r3, r2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]
 8006768:	e001      	b.n	800676e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800676a:	2300      	movs	r3, #0
 800676c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800676e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	807b      	strh	r3, [r7, #2]
 8006788:	4613      	mov	r3, r2
 800678a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800678c:	787b      	ldrb	r3, [r7, #1]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006792:	887a      	ldrh	r2, [r7, #2]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006798:	e003      	b.n	80067a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800679a:	887b      	ldrh	r3, [r7, #2]
 800679c:	041a      	lsls	r2, r3, #16
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	619a      	str	r2, [r3, #24]
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
	...

080067b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	4603      	mov	r3, r0
 80067b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067ba:	4b08      	ldr	r3, [pc, #32]	@ (80067dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067bc:	695a      	ldr	r2, [r3, #20]
 80067be:	88fb      	ldrh	r3, [r7, #6]
 80067c0:	4013      	ands	r3, r2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d006      	beq.n	80067d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067c6:	4a05      	ldr	r2, [pc, #20]	@ (80067dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067c8:	88fb      	ldrh	r3, [r7, #6]
 80067ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067cc:	88fb      	ldrh	r3, [r7, #6]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fb fa64 	bl	8001c9c <HAL_GPIO_EXTI_Callback>
  }
}
 80067d4:	bf00      	nop
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	40013c00 	.word	0x40013c00

080067e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e12b      	b.n	8006a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d106      	bne.n	800680c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7ff f866 	bl	80058d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2224      	movs	r2, #36	@ 0x24
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 0201 	bic.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006844:	f001 f8da 	bl	80079fc <HAL_RCC_GetPCLK1Freq>
 8006848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	4a81      	ldr	r2, [pc, #516]	@ (8006a54 <HAL_I2C_Init+0x274>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d807      	bhi.n	8006864 <HAL_I2C_Init+0x84>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4a80      	ldr	r2, [pc, #512]	@ (8006a58 <HAL_I2C_Init+0x278>)
 8006858:	4293      	cmp	r3, r2
 800685a:	bf94      	ite	ls
 800685c:	2301      	movls	r3, #1
 800685e:	2300      	movhi	r3, #0
 8006860:	b2db      	uxtb	r3, r3
 8006862:	e006      	b.n	8006872 <HAL_I2C_Init+0x92>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4a7d      	ldr	r2, [pc, #500]	@ (8006a5c <HAL_I2C_Init+0x27c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	bf94      	ite	ls
 800686c:	2301      	movls	r3, #1
 800686e:	2300      	movhi	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e0e7      	b.n	8006a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4a78      	ldr	r2, [pc, #480]	@ (8006a60 <HAL_I2C_Init+0x280>)
 800687e:	fba2 2303 	umull	r2, r3, r2, r3
 8006882:	0c9b      	lsrs	r3, r3, #18
 8006884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	4a6a      	ldr	r2, [pc, #424]	@ (8006a54 <HAL_I2C_Init+0x274>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d802      	bhi.n	80068b4 <HAL_I2C_Init+0xd4>
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	3301      	adds	r3, #1
 80068b2:	e009      	b.n	80068c8 <HAL_I2C_Init+0xe8>
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80068ba:	fb02 f303 	mul.w	r3, r2, r3
 80068be:	4a69      	ldr	r2, [pc, #420]	@ (8006a64 <HAL_I2C_Init+0x284>)
 80068c0:	fba2 2303 	umull	r2, r3, r2, r3
 80068c4:	099b      	lsrs	r3, r3, #6
 80068c6:	3301      	adds	r3, #1
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	6812      	ldr	r2, [r2, #0]
 80068cc:	430b      	orrs	r3, r1
 80068ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80068da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	495c      	ldr	r1, [pc, #368]	@ (8006a54 <HAL_I2C_Init+0x274>)
 80068e4:	428b      	cmp	r3, r1
 80068e6:	d819      	bhi.n	800691c <HAL_I2C_Init+0x13c>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	1e59      	subs	r1, r3, #1
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80068f6:	1c59      	adds	r1, r3, #1
 80068f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80068fc:	400b      	ands	r3, r1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <HAL_I2C_Init+0x138>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1e59      	subs	r1, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	005b      	lsls	r3, r3, #1
 800690c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006910:	3301      	adds	r3, #1
 8006912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006916:	e051      	b.n	80069bc <HAL_I2C_Init+0x1dc>
 8006918:	2304      	movs	r3, #4
 800691a:	e04f      	b.n	80069bc <HAL_I2C_Init+0x1dc>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d111      	bne.n	8006948 <HAL_I2C_Init+0x168>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	1e58      	subs	r0, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6859      	ldr	r1, [r3, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	440b      	add	r3, r1
 8006932:	fbb0 f3f3 	udiv	r3, r0, r3
 8006936:	3301      	adds	r3, #1
 8006938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800693c:	2b00      	cmp	r3, #0
 800693e:	bf0c      	ite	eq
 8006940:	2301      	moveq	r3, #1
 8006942:	2300      	movne	r3, #0
 8006944:	b2db      	uxtb	r3, r3
 8006946:	e012      	b.n	800696e <HAL_I2C_Init+0x18e>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	1e58      	subs	r0, r3, #1
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6859      	ldr	r1, [r3, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	440b      	add	r3, r1
 8006956:	0099      	lsls	r1, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	fbb0 f3f3 	udiv	r3, r0, r3
 800695e:	3301      	adds	r3, #1
 8006960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006964:	2b00      	cmp	r3, #0
 8006966:	bf0c      	ite	eq
 8006968:	2301      	moveq	r3, #1
 800696a:	2300      	movne	r3, #0
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <HAL_I2C_Init+0x196>
 8006972:	2301      	movs	r3, #1
 8006974:	e022      	b.n	80069bc <HAL_I2C_Init+0x1dc>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10e      	bne.n	800699c <HAL_I2C_Init+0x1bc>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1e58      	subs	r0, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6859      	ldr	r1, [r3, #4]
 8006986:	460b      	mov	r3, r1
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	440b      	add	r3, r1
 800698c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006990:	3301      	adds	r3, #1
 8006992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800699a:	e00f      	b.n	80069bc <HAL_I2C_Init+0x1dc>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	1e58      	subs	r0, r3, #1
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6859      	ldr	r1, [r3, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	0099      	lsls	r1, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80069b2:	3301      	adds	r3, #1
 80069b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	6809      	ldr	r1, [r1, #0]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69da      	ldr	r2, [r3, #28]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80069ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6911      	ldr	r1, [r2, #16]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	68d2      	ldr	r2, [r2, #12]
 80069f6:	4311      	orrs	r1, r2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	430b      	orrs	r3, r1
 80069fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	695a      	ldr	r2, [r3, #20]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	000186a0 	.word	0x000186a0
 8006a58:	001e847f 	.word	0x001e847f
 8006a5c:	003d08ff 	.word	0x003d08ff
 8006a60:	431bde83 	.word	0x431bde83
 8006a64:	10624dd3 	.word	0x10624dd3

08006a68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	607a      	str	r2, [r7, #4]
 8006a72:	461a      	mov	r2, r3
 8006a74:	460b      	mov	r3, r1
 8006a76:	817b      	strh	r3, [r7, #10]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a7c:	f7ff faf6 	bl	800606c <HAL_GetTick>
 8006a80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	f040 80e0 	bne.w	8006c50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	2319      	movs	r3, #25
 8006a96:	2201      	movs	r2, #1
 8006a98:	4970      	ldr	r1, [pc, #448]	@ (8006c5c <HAL_I2C_Master_Transmit+0x1f4>)
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f964 	bl	8006d68 <I2C_WaitOnFlagUntilTimeout>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e0d3      	b.n	8006c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_I2C_Master_Transmit+0x50>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e0cc      	b.n	8006c52 <HAL_I2C_Master_Transmit+0x1ea>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d007      	beq.n	8006ade <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f042 0201 	orr.w	r2, r2, #1
 8006adc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006aec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2221      	movs	r2, #33	@ 0x21
 8006af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2210      	movs	r2, #16
 8006afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	893a      	ldrh	r2, [r7, #8]
 8006b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4a50      	ldr	r2, [pc, #320]	@ (8006c60 <HAL_I2C_Master_Transmit+0x1f8>)
 8006b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006b20:	8979      	ldrh	r1, [r7, #10]
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	6a3a      	ldr	r2, [r7, #32]
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 f89c 	bl	8006c64 <I2C_MasterRequestWrite>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e08d      	b.n	8006c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b36:	2300      	movs	r3, #0
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006b4c:	e066      	b.n	8006c1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	6a39      	ldr	r1, [r7, #32]
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 fa22 	bl	8006f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00d      	beq.n	8006b7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d107      	bne.n	8006b76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e06b      	b.n	8006c52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7e:	781a      	ldrb	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d11b      	bne.n	8006bf0 <HAL_I2C_Master_Transmit+0x188>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d017      	beq.n	8006bf0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be8:	3b01      	subs	r3, #1
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	6a39      	ldr	r1, [r7, #32]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 fa19 	bl	800702c <I2C_WaitOnBTFFlagUntilTimeout>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00d      	beq.n	8006c1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d107      	bne.n	8006c18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e01a      	b.n	8006c52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d194      	bne.n	8006b4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e000      	b.n	8006c52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006c50:	2302      	movs	r3, #2
  }
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	00100002 	.word	0x00100002
 8006c60:	ffff0000 	.word	0xffff0000

08006c64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af02      	add	r7, sp, #8
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	607a      	str	r2, [r7, #4]
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	460b      	mov	r3, r1
 8006c72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d006      	beq.n	8006c8e <I2C_MasterRequestWrite+0x2a>
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d003      	beq.n	8006c8e <I2C_MasterRequestWrite+0x2a>
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c8c:	d108      	bne.n	8006ca0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	e00b      	b.n	8006cb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca4:	2b12      	cmp	r3, #18
 8006ca6:	d107      	bne.n	8006cb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f000 f84f 	bl	8006d68 <I2C_WaitOnFlagUntilTimeout>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00d      	beq.n	8006cec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cde:	d103      	bne.n	8006ce8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e035      	b.n	8006d58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cf4:	d108      	bne.n	8006d08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cf6:	897b      	ldrh	r3, [r7, #10]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006d04:	611a      	str	r2, [r3, #16]
 8006d06:	e01b      	b.n	8006d40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006d08:	897b      	ldrh	r3, [r7, #10]
 8006d0a:	11db      	asrs	r3, r3, #7
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	f003 0306 	and.w	r3, r3, #6
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	f063 030f 	orn	r3, r3, #15
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	490e      	ldr	r1, [pc, #56]	@ (8006d60 <I2C_MasterRequestWrite+0xfc>)
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 f898 	bl	8006e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e010      	b.n	8006d58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006d36:	897b      	ldrh	r3, [r7, #10]
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	4907      	ldr	r1, [pc, #28]	@ (8006d64 <I2C_MasterRequestWrite+0x100>)
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 f888 	bl	8006e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e000      	b.n	8006d58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	00010008 	.word	0x00010008
 8006d64:	00010002 	.word	0x00010002

08006d68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	4613      	mov	r3, r2
 8006d76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d78:	e048      	b.n	8006e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d80:	d044      	beq.n	8006e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d82:	f7ff f973 	bl	800606c <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d302      	bcc.n	8006d98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d139      	bne.n	8006e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	0c1b      	lsrs	r3, r3, #16
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d10d      	bne.n	8006dbe <I2C_WaitOnFlagUntilTimeout+0x56>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	43da      	mvns	r2, r3
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	4013      	ands	r3, r2
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	bf0c      	ite	eq
 8006db4:	2301      	moveq	r3, #1
 8006db6:	2300      	movne	r3, #0
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	461a      	mov	r2, r3
 8006dbc:	e00c      	b.n	8006dd8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	43da      	mvns	r2, r3
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	bf0c      	ite	eq
 8006dd0:	2301      	moveq	r3, #1
 8006dd2:	2300      	movne	r3, #0
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	79fb      	ldrb	r3, [r7, #7]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d116      	bne.n	8006e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df8:	f043 0220 	orr.w	r2, r3, #32
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e023      	b.n	8006e54 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	0c1b      	lsrs	r3, r3, #16
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d10d      	bne.n	8006e32 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	43da      	mvns	r2, r3
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	4013      	ands	r3, r2
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bf0c      	ite	eq
 8006e28:	2301      	moveq	r3, #1
 8006e2a:	2300      	movne	r3, #0
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	461a      	mov	r2, r3
 8006e30:	e00c      	b.n	8006e4c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	43da      	mvns	r2, r3
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	bf0c      	ite	eq
 8006e44:	2301      	moveq	r3, #1
 8006e46:	2300      	movne	r3, #0
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	79fb      	ldrb	r3, [r7, #7]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d093      	beq.n	8006d7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e6a:	e071      	b.n	8006f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e7a:	d123      	bne.n	8006ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb0:	f043 0204 	orr.w	r2, r3, #4
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e067      	b.n	8006f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eca:	d041      	beq.n	8006f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ecc:	f7ff f8ce 	bl	800606c <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d302      	bcc.n	8006ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d136      	bne.n	8006f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	0c1b      	lsrs	r3, r3, #16
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d10c      	bne.n	8006f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	43da      	mvns	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bf14      	ite	ne
 8006efe:	2301      	movne	r3, #1
 8006f00:	2300      	moveq	r3, #0
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	e00b      	b.n	8006f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	43da      	mvns	r2, r3
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	4013      	ands	r3, r2
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bf14      	ite	ne
 8006f18:	2301      	movne	r3, #1
 8006f1a:	2300      	moveq	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d016      	beq.n	8006f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3c:	f043 0220 	orr.w	r2, r3, #32
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e021      	b.n	8006f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	0c1b      	lsrs	r3, r3, #16
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d10c      	bne.n	8006f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	43da      	mvns	r2, r3
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	4013      	ands	r3, r2
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bf14      	ite	ne
 8006f6c:	2301      	movne	r3, #1
 8006f6e:	2300      	moveq	r3, #0
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	e00b      	b.n	8006f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	43da      	mvns	r2, r3
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	bf14      	ite	ne
 8006f86:	2301      	movne	r3, #1
 8006f88:	2300      	moveq	r3, #0
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f47f af6d 	bne.w	8006e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fa8:	e034      	b.n	8007014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 f886 	bl	80070bc <I2C_IsAcknowledgeFailed>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e034      	b.n	8007024 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc0:	d028      	beq.n	8007014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc2:	f7ff f853 	bl	800606c <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d302      	bcc.n	8006fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d11d      	bne.n	8007014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fe2:	2b80      	cmp	r3, #128	@ 0x80
 8006fe4:	d016      	beq.n	8007014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007000:	f043 0220 	orr.w	r2, r3, #32
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e007      	b.n	8007024 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800701e:	2b80      	cmp	r3, #128	@ 0x80
 8007020:	d1c3      	bne.n	8006faa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007038:	e034      	b.n	80070a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f83e 	bl	80070bc <I2C_IsAcknowledgeFailed>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e034      	b.n	80070b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007050:	d028      	beq.n	80070a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007052:	f7ff f80b 	bl	800606c <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	429a      	cmp	r2, r3
 8007060:	d302      	bcc.n	8007068 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d11d      	bne.n	80070a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	2b04      	cmp	r3, #4
 8007074:	d016      	beq.n	80070a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2220      	movs	r2, #32
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007090:	f043 0220 	orr.w	r2, r3, #32
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e007      	b.n	80070b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	f003 0304 	and.w	r3, r3, #4
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d1c3      	bne.n	800703a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070d2:	d11b      	bne.n	800710c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80070dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f8:	f043 0204 	orr.w	r2, r3, #4
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e000      	b.n	800710e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e267      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d075      	beq.n	8007226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800713a:	4b88      	ldr	r3, [pc, #544]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f003 030c 	and.w	r3, r3, #12
 8007142:	2b04      	cmp	r3, #4
 8007144:	d00c      	beq.n	8007160 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007146:	4b85      	ldr	r3, [pc, #532]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800714e:	2b08      	cmp	r3, #8
 8007150:	d112      	bne.n	8007178 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007152:	4b82      	ldr	r3, [pc, #520]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800715a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800715e:	d10b      	bne.n	8007178 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007160:	4b7e      	ldr	r3, [pc, #504]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d05b      	beq.n	8007224 <HAL_RCC_OscConfig+0x108>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d157      	bne.n	8007224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e242      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007180:	d106      	bne.n	8007190 <HAL_RCC_OscConfig+0x74>
 8007182:	4b76      	ldr	r3, [pc, #472]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a75      	ldr	r2, [pc, #468]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 8007188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	e01d      	b.n	80071cc <HAL_RCC_OscConfig+0xb0>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007198:	d10c      	bne.n	80071b4 <HAL_RCC_OscConfig+0x98>
 800719a:	4b70      	ldr	r3, [pc, #448]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a6f      	ldr	r2, [pc, #444]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 80071a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	4b6d      	ldr	r3, [pc, #436]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a6c      	ldr	r2, [pc, #432]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 80071ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	e00b      	b.n	80071cc <HAL_RCC_OscConfig+0xb0>
 80071b4:	4b69      	ldr	r3, [pc, #420]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a68      	ldr	r2, [pc, #416]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 80071ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	4b66      	ldr	r3, [pc, #408]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a65      	ldr	r2, [pc, #404]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 80071c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d013      	beq.n	80071fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071d4:	f7fe ff4a 	bl	800606c <HAL_GetTick>
 80071d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071da:	e008      	b.n	80071ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071dc:	f7fe ff46 	bl	800606c <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b64      	cmp	r3, #100	@ 0x64
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e207      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ee:	4b5b      	ldr	r3, [pc, #364]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0f0      	beq.n	80071dc <HAL_RCC_OscConfig+0xc0>
 80071fa:	e014      	b.n	8007226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071fc:	f7fe ff36 	bl	800606c <HAL_GetTick>
 8007200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007204:	f7fe ff32 	bl	800606c <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b64      	cmp	r3, #100	@ 0x64
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e1f3      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007216:	4b51      	ldr	r3, [pc, #324]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1f0      	bne.n	8007204 <HAL_RCC_OscConfig+0xe8>
 8007222:	e000      	b.n	8007226 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d063      	beq.n	80072fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007232:	4b4a      	ldr	r3, [pc, #296]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f003 030c 	and.w	r3, r3, #12
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00b      	beq.n	8007256 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800723e:	4b47      	ldr	r3, [pc, #284]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007246:	2b08      	cmp	r3, #8
 8007248:	d11c      	bne.n	8007284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800724a:	4b44      	ldr	r3, [pc, #272]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d116      	bne.n	8007284 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007256:	4b41      	ldr	r3, [pc, #260]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d005      	beq.n	800726e <HAL_RCC_OscConfig+0x152>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d001      	beq.n	800726e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e1c7      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800726e:	4b3b      	ldr	r3, [pc, #236]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	4937      	ldr	r1, [pc, #220]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 800727e:	4313      	orrs	r3, r2
 8007280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007282:	e03a      	b.n	80072fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d020      	beq.n	80072ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800728c:	4b34      	ldr	r3, [pc, #208]	@ (8007360 <HAL_RCC_OscConfig+0x244>)
 800728e:	2201      	movs	r2, #1
 8007290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007292:	f7fe feeb 	bl	800606c <HAL_GetTick>
 8007296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007298:	e008      	b.n	80072ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800729a:	f7fe fee7 	bl	800606c <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d901      	bls.n	80072ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e1a8      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072ac:	4b2b      	ldr	r3, [pc, #172]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0f0      	beq.n	800729a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072b8:	4b28      	ldr	r3, [pc, #160]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	4925      	ldr	r1, [pc, #148]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	600b      	str	r3, [r1, #0]
 80072cc:	e015      	b.n	80072fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072ce:	4b24      	ldr	r3, [pc, #144]	@ (8007360 <HAL_RCC_OscConfig+0x244>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d4:	f7fe feca 	bl	800606c <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072da:	e008      	b.n	80072ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072dc:	f7fe fec6 	bl	800606c <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d901      	bls.n	80072ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e187      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072ee:	4b1b      	ldr	r3, [pc, #108]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1f0      	bne.n	80072dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b00      	cmp	r3, #0
 8007304:	d036      	beq.n	8007374 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d016      	beq.n	800733c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800730e:	4b15      	ldr	r3, [pc, #84]	@ (8007364 <HAL_RCC_OscConfig+0x248>)
 8007310:	2201      	movs	r2, #1
 8007312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007314:	f7fe feaa 	bl	800606c <HAL_GetTick>
 8007318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800731a:	e008      	b.n	800732e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800731c:	f7fe fea6 	bl	800606c <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	2b02      	cmp	r3, #2
 8007328:	d901      	bls.n	800732e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e167      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800732e:	4b0b      	ldr	r3, [pc, #44]	@ (800735c <HAL_RCC_OscConfig+0x240>)
 8007330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0f0      	beq.n	800731c <HAL_RCC_OscConfig+0x200>
 800733a:	e01b      	b.n	8007374 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800733c:	4b09      	ldr	r3, [pc, #36]	@ (8007364 <HAL_RCC_OscConfig+0x248>)
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007342:	f7fe fe93 	bl	800606c <HAL_GetTick>
 8007346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007348:	e00e      	b.n	8007368 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800734a:	f7fe fe8f 	bl	800606c <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	2b02      	cmp	r3, #2
 8007356:	d907      	bls.n	8007368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e150      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
 800735c:	40023800 	.word	0x40023800
 8007360:	42470000 	.word	0x42470000
 8007364:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007368:	4b88      	ldr	r3, [pc, #544]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 800736a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1ea      	bne.n	800734a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 8097 	beq.w	80074b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007382:	2300      	movs	r3, #0
 8007384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007386:	4b81      	ldr	r3, [pc, #516]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 8007388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10f      	bne.n	80073b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007392:	2300      	movs	r3, #0
 8007394:	60bb      	str	r3, [r7, #8]
 8007396:	4b7d      	ldr	r3, [pc, #500]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 8007398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739a:	4a7c      	ldr	r2, [pc, #496]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 800739c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80073a2:	4b7a      	ldr	r3, [pc, #488]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 80073a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073aa:	60bb      	str	r3, [r7, #8]
 80073ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ae:	2301      	movs	r3, #1
 80073b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073b2:	4b77      	ldr	r3, [pc, #476]	@ (8007590 <HAL_RCC_OscConfig+0x474>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d118      	bne.n	80073f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073be:	4b74      	ldr	r3, [pc, #464]	@ (8007590 <HAL_RCC_OscConfig+0x474>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a73      	ldr	r2, [pc, #460]	@ (8007590 <HAL_RCC_OscConfig+0x474>)
 80073c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073ca:	f7fe fe4f 	bl	800606c <HAL_GetTick>
 80073ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073d0:	e008      	b.n	80073e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073d2:	f7fe fe4b 	bl	800606c <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d901      	bls.n	80073e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e10c      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073e4:	4b6a      	ldr	r3, [pc, #424]	@ (8007590 <HAL_RCC_OscConfig+0x474>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0f0      	beq.n	80073d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d106      	bne.n	8007406 <HAL_RCC_OscConfig+0x2ea>
 80073f8:	4b64      	ldr	r3, [pc, #400]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 80073fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fc:	4a63      	ldr	r2, [pc, #396]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 80073fe:	f043 0301 	orr.w	r3, r3, #1
 8007402:	6713      	str	r3, [r2, #112]	@ 0x70
 8007404:	e01c      	b.n	8007440 <HAL_RCC_OscConfig+0x324>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	2b05      	cmp	r3, #5
 800740c:	d10c      	bne.n	8007428 <HAL_RCC_OscConfig+0x30c>
 800740e:	4b5f      	ldr	r3, [pc, #380]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007412:	4a5e      	ldr	r2, [pc, #376]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 8007414:	f043 0304 	orr.w	r3, r3, #4
 8007418:	6713      	str	r3, [r2, #112]	@ 0x70
 800741a:	4b5c      	ldr	r3, [pc, #368]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 800741c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800741e:	4a5b      	ldr	r2, [pc, #364]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 8007420:	f043 0301 	orr.w	r3, r3, #1
 8007424:	6713      	str	r3, [r2, #112]	@ 0x70
 8007426:	e00b      	b.n	8007440 <HAL_RCC_OscConfig+0x324>
 8007428:	4b58      	ldr	r3, [pc, #352]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 800742a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742c:	4a57      	ldr	r2, [pc, #348]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 800742e:	f023 0301 	bic.w	r3, r3, #1
 8007432:	6713      	str	r3, [r2, #112]	@ 0x70
 8007434:	4b55      	ldr	r3, [pc, #340]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 8007436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007438:	4a54      	ldr	r2, [pc, #336]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 800743a:	f023 0304 	bic.w	r3, r3, #4
 800743e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d015      	beq.n	8007474 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007448:	f7fe fe10 	bl	800606c <HAL_GetTick>
 800744c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800744e:	e00a      	b.n	8007466 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007450:	f7fe fe0c 	bl	800606c <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800745e:	4293      	cmp	r3, r2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e0cb      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007466:	4b49      	ldr	r3, [pc, #292]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 8007468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0ee      	beq.n	8007450 <HAL_RCC_OscConfig+0x334>
 8007472:	e014      	b.n	800749e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007474:	f7fe fdfa 	bl	800606c <HAL_GetTick>
 8007478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800747a:	e00a      	b.n	8007492 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800747c:	f7fe fdf6 	bl	800606c <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800748a:	4293      	cmp	r3, r2
 800748c:	d901      	bls.n	8007492 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e0b5      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007492:	4b3e      	ldr	r3, [pc, #248]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 8007494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1ee      	bne.n	800747c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d105      	bne.n	80074b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074a4:	4b39      	ldr	r3, [pc, #228]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 80074a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a8:	4a38      	ldr	r2, [pc, #224]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 80074aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 80a1 	beq.w	80075fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074ba:	4b34      	ldr	r3, [pc, #208]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f003 030c 	and.w	r3, r3, #12
 80074c2:	2b08      	cmp	r3, #8
 80074c4:	d05c      	beq.n	8007580 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d141      	bne.n	8007552 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ce:	4b31      	ldr	r3, [pc, #196]	@ (8007594 <HAL_RCC_OscConfig+0x478>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074d4:	f7fe fdca 	bl	800606c <HAL_GetTick>
 80074d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074da:	e008      	b.n	80074ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074dc:	f7fe fdc6 	bl	800606c <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d901      	bls.n	80074ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e087      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ee:	4b27      	ldr	r3, [pc, #156]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1f0      	bne.n	80074dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	69da      	ldr	r2, [r3, #28]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007508:	019b      	lsls	r3, r3, #6
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007510:	085b      	lsrs	r3, r3, #1
 8007512:	3b01      	subs	r3, #1
 8007514:	041b      	lsls	r3, r3, #16
 8007516:	431a      	orrs	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751c:	061b      	lsls	r3, r3, #24
 800751e:	491b      	ldr	r1, [pc, #108]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 8007520:	4313      	orrs	r3, r2
 8007522:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007524:	4b1b      	ldr	r3, [pc, #108]	@ (8007594 <HAL_RCC_OscConfig+0x478>)
 8007526:	2201      	movs	r2, #1
 8007528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800752a:	f7fe fd9f 	bl	800606c <HAL_GetTick>
 800752e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007530:	e008      	b.n	8007544 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007532:	f7fe fd9b 	bl	800606c <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	2b02      	cmp	r3, #2
 800753e:	d901      	bls.n	8007544 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e05c      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007544:	4b11      	ldr	r3, [pc, #68]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d0f0      	beq.n	8007532 <HAL_RCC_OscConfig+0x416>
 8007550:	e054      	b.n	80075fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007552:	4b10      	ldr	r3, [pc, #64]	@ (8007594 <HAL_RCC_OscConfig+0x478>)
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007558:	f7fe fd88 	bl	800606c <HAL_GetTick>
 800755c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800755e:	e008      	b.n	8007572 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007560:	f7fe fd84 	bl	800606c <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b02      	cmp	r3, #2
 800756c:	d901      	bls.n	8007572 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e045      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007572:	4b06      	ldr	r3, [pc, #24]	@ (800758c <HAL_RCC_OscConfig+0x470>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1f0      	bne.n	8007560 <HAL_RCC_OscConfig+0x444>
 800757e:	e03d      	b.n	80075fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d107      	bne.n	8007598 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e038      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
 800758c:	40023800 	.word	0x40023800
 8007590:	40007000 	.word	0x40007000
 8007594:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007598:	4b1b      	ldr	r3, [pc, #108]	@ (8007608 <HAL_RCC_OscConfig+0x4ec>)
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d028      	beq.n	80075f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d121      	bne.n	80075f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075be:	429a      	cmp	r2, r3
 80075c0:	d11a      	bne.n	80075f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80075c8:	4013      	ands	r3, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80075ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d111      	bne.n	80075f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075de:	085b      	lsrs	r3, r3, #1
 80075e0:	3b01      	subs	r3, #1
 80075e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d107      	bne.n	80075f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d001      	beq.n	80075fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	40023800 	.word	0x40023800

0800760c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e0cc      	b.n	80077ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007620:	4b68      	ldr	r3, [pc, #416]	@ (80077c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0307 	and.w	r3, r3, #7
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d90c      	bls.n	8007648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800762e:	4b65      	ldr	r3, [pc, #404]	@ (80077c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007636:	4b63      	ldr	r3, [pc, #396]	@ (80077c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	429a      	cmp	r2, r3
 8007642:	d001      	beq.n	8007648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e0b8      	b.n	80077ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d020      	beq.n	8007696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b00      	cmp	r3, #0
 800765e:	d005      	beq.n	800766c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007660:	4b59      	ldr	r3, [pc, #356]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	4a58      	ldr	r2, [pc, #352]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007666:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800766a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0308 	and.w	r3, r3, #8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d005      	beq.n	8007684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007678:	4b53      	ldr	r3, [pc, #332]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	4a52      	ldr	r2, [pc, #328]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 800767e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007684:	4b50      	ldr	r3, [pc, #320]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	494d      	ldr	r1, [pc, #308]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007692:	4313      	orrs	r3, r2
 8007694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d044      	beq.n	800772c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d107      	bne.n	80076ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076aa:	4b47      	ldr	r3, [pc, #284]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d119      	bne.n	80076ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e07f      	b.n	80077ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d003      	beq.n	80076ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d107      	bne.n	80076da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ca:	4b3f      	ldr	r3, [pc, #252]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d109      	bne.n	80076ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e06f      	b.n	80077ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076da:	4b3b      	ldr	r3, [pc, #236]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e067      	b.n	80077ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076ea:	4b37      	ldr	r3, [pc, #220]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f023 0203 	bic.w	r2, r3, #3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	4934      	ldr	r1, [pc, #208]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076fc:	f7fe fcb6 	bl	800606c <HAL_GetTick>
 8007700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007702:	e00a      	b.n	800771a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007704:	f7fe fcb2 	bl	800606c <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007712:	4293      	cmp	r3, r2
 8007714:	d901      	bls.n	800771a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e04f      	b.n	80077ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800771a:	4b2b      	ldr	r3, [pc, #172]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 020c 	and.w	r2, r3, #12
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	429a      	cmp	r2, r3
 800772a:	d1eb      	bne.n	8007704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800772c:	4b25      	ldr	r3, [pc, #148]	@ (80077c4 <HAL_RCC_ClockConfig+0x1b8>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d20c      	bcs.n	8007754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800773a:	4b22      	ldr	r3, [pc, #136]	@ (80077c4 <HAL_RCC_ClockConfig+0x1b8>)
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007742:	4b20      	ldr	r3, [pc, #128]	@ (80077c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d001      	beq.n	8007754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e032      	b.n	80077ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b00      	cmp	r3, #0
 800775e:	d008      	beq.n	8007772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007760:	4b19      	ldr	r3, [pc, #100]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	4916      	ldr	r1, [pc, #88]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 800776e:	4313      	orrs	r3, r2
 8007770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0308 	and.w	r3, r3, #8
 800777a:	2b00      	cmp	r3, #0
 800777c:	d009      	beq.n	8007792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800777e:	4b12      	ldr	r3, [pc, #72]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	490e      	ldr	r1, [pc, #56]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 800778e:	4313      	orrs	r3, r2
 8007790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007792:	f000 f821 	bl	80077d8 <HAL_RCC_GetSysClockFreq>
 8007796:	4602      	mov	r2, r0
 8007798:	4b0b      	ldr	r3, [pc, #44]	@ (80077c8 <HAL_RCC_ClockConfig+0x1bc>)
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	091b      	lsrs	r3, r3, #4
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	490a      	ldr	r1, [pc, #40]	@ (80077cc <HAL_RCC_ClockConfig+0x1c0>)
 80077a4:	5ccb      	ldrb	r3, [r1, r3]
 80077a6:	fa22 f303 	lsr.w	r3, r2, r3
 80077aa:	4a09      	ldr	r2, [pc, #36]	@ (80077d0 <HAL_RCC_ClockConfig+0x1c4>)
 80077ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80077ae:	4b09      	ldr	r3, [pc, #36]	@ (80077d4 <HAL_RCC_ClockConfig+0x1c8>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe fc16 	bl	8005fe4 <HAL_InitTick>

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40023c00 	.word	0x40023c00
 80077c8:	40023800 	.word	0x40023800
 80077cc:	08010310 	.word	0x08010310
 80077d0:	200000e0 	.word	0x200000e0
 80077d4:	200000e4 	.word	0x200000e4

080077d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077dc:	b094      	sub	sp, #80	@ 0x50
 80077de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80077e4:	2300      	movs	r3, #0
 80077e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077e8:	2300      	movs	r3, #0
 80077ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077f0:	4b79      	ldr	r3, [pc, #484]	@ (80079d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f003 030c 	and.w	r3, r3, #12
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	d00d      	beq.n	8007818 <HAL_RCC_GetSysClockFreq+0x40>
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	f200 80e1 	bhi.w	80079c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <HAL_RCC_GetSysClockFreq+0x34>
 8007806:	2b04      	cmp	r3, #4
 8007808:	d003      	beq.n	8007812 <HAL_RCC_GetSysClockFreq+0x3a>
 800780a:	e0db      	b.n	80079c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800780c:	4b73      	ldr	r3, [pc, #460]	@ (80079dc <HAL_RCC_GetSysClockFreq+0x204>)
 800780e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007810:	e0db      	b.n	80079ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007812:	4b73      	ldr	r3, [pc, #460]	@ (80079e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8007814:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007816:	e0d8      	b.n	80079ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007818:	4b6f      	ldr	r3, [pc, #444]	@ (80079d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007820:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007822:	4b6d      	ldr	r3, [pc, #436]	@ (80079d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d063      	beq.n	80078f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800782e:	4b6a      	ldr	r3, [pc, #424]	@ (80079d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	099b      	lsrs	r3, r3, #6
 8007834:	2200      	movs	r2, #0
 8007836:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007838:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800783a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007840:	633b      	str	r3, [r7, #48]	@ 0x30
 8007842:	2300      	movs	r3, #0
 8007844:	637b      	str	r3, [r7, #52]	@ 0x34
 8007846:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800784a:	4622      	mov	r2, r4
 800784c:	462b      	mov	r3, r5
 800784e:	f04f 0000 	mov.w	r0, #0
 8007852:	f04f 0100 	mov.w	r1, #0
 8007856:	0159      	lsls	r1, r3, #5
 8007858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800785c:	0150      	lsls	r0, r2, #5
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	4621      	mov	r1, r4
 8007864:	1a51      	subs	r1, r2, r1
 8007866:	6139      	str	r1, [r7, #16]
 8007868:	4629      	mov	r1, r5
 800786a:	eb63 0301 	sbc.w	r3, r3, r1
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800787c:	4659      	mov	r1, fp
 800787e:	018b      	lsls	r3, r1, #6
 8007880:	4651      	mov	r1, sl
 8007882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007886:	4651      	mov	r1, sl
 8007888:	018a      	lsls	r2, r1, #6
 800788a:	4651      	mov	r1, sl
 800788c:	ebb2 0801 	subs.w	r8, r2, r1
 8007890:	4659      	mov	r1, fp
 8007892:	eb63 0901 	sbc.w	r9, r3, r1
 8007896:	f04f 0200 	mov.w	r2, #0
 800789a:	f04f 0300 	mov.w	r3, #0
 800789e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078aa:	4690      	mov	r8, r2
 80078ac:	4699      	mov	r9, r3
 80078ae:	4623      	mov	r3, r4
 80078b0:	eb18 0303 	adds.w	r3, r8, r3
 80078b4:	60bb      	str	r3, [r7, #8]
 80078b6:	462b      	mov	r3, r5
 80078b8:	eb49 0303 	adc.w	r3, r9, r3
 80078bc:	60fb      	str	r3, [r7, #12]
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	f04f 0300 	mov.w	r3, #0
 80078c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80078ca:	4629      	mov	r1, r5
 80078cc:	024b      	lsls	r3, r1, #9
 80078ce:	4621      	mov	r1, r4
 80078d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80078d4:	4621      	mov	r1, r4
 80078d6:	024a      	lsls	r2, r1, #9
 80078d8:	4610      	mov	r0, r2
 80078da:	4619      	mov	r1, r3
 80078dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078de:	2200      	movs	r2, #0
 80078e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80078e8:	f7f9 f9ce 	bl	8000c88 <__aeabi_uldivmod>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4613      	mov	r3, r2
 80078f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078f4:	e058      	b.n	80079a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078f6:	4b38      	ldr	r3, [pc, #224]	@ (80079d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	099b      	lsrs	r3, r3, #6
 80078fc:	2200      	movs	r2, #0
 80078fe:	4618      	mov	r0, r3
 8007900:	4611      	mov	r1, r2
 8007902:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007906:	623b      	str	r3, [r7, #32]
 8007908:	2300      	movs	r3, #0
 800790a:	627b      	str	r3, [r7, #36]	@ 0x24
 800790c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007910:	4642      	mov	r2, r8
 8007912:	464b      	mov	r3, r9
 8007914:	f04f 0000 	mov.w	r0, #0
 8007918:	f04f 0100 	mov.w	r1, #0
 800791c:	0159      	lsls	r1, r3, #5
 800791e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007922:	0150      	lsls	r0, r2, #5
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	4641      	mov	r1, r8
 800792a:	ebb2 0a01 	subs.w	sl, r2, r1
 800792e:	4649      	mov	r1, r9
 8007930:	eb63 0b01 	sbc.w	fp, r3, r1
 8007934:	f04f 0200 	mov.w	r2, #0
 8007938:	f04f 0300 	mov.w	r3, #0
 800793c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007940:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007944:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007948:	ebb2 040a 	subs.w	r4, r2, sl
 800794c:	eb63 050b 	sbc.w	r5, r3, fp
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	00eb      	lsls	r3, r5, #3
 800795a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800795e:	00e2      	lsls	r2, r4, #3
 8007960:	4614      	mov	r4, r2
 8007962:	461d      	mov	r5, r3
 8007964:	4643      	mov	r3, r8
 8007966:	18e3      	adds	r3, r4, r3
 8007968:	603b      	str	r3, [r7, #0]
 800796a:	464b      	mov	r3, r9
 800796c:	eb45 0303 	adc.w	r3, r5, r3
 8007970:	607b      	str	r3, [r7, #4]
 8007972:	f04f 0200 	mov.w	r2, #0
 8007976:	f04f 0300 	mov.w	r3, #0
 800797a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800797e:	4629      	mov	r1, r5
 8007980:	028b      	lsls	r3, r1, #10
 8007982:	4621      	mov	r1, r4
 8007984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007988:	4621      	mov	r1, r4
 800798a:	028a      	lsls	r2, r1, #10
 800798c:	4610      	mov	r0, r2
 800798e:	4619      	mov	r1, r3
 8007990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007992:	2200      	movs	r2, #0
 8007994:	61bb      	str	r3, [r7, #24]
 8007996:	61fa      	str	r2, [r7, #28]
 8007998:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800799c:	f7f9 f974 	bl	8000c88 <__aeabi_uldivmod>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4613      	mov	r3, r2
 80079a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80079a8:	4b0b      	ldr	r3, [pc, #44]	@ (80079d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	0c1b      	lsrs	r3, r3, #16
 80079ae:	f003 0303 	and.w	r3, r3, #3
 80079b2:	3301      	adds	r3, #1
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80079b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80079c2:	e002      	b.n	80079ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80079c4:	4b05      	ldr	r3, [pc, #20]	@ (80079dc <HAL_RCC_GetSysClockFreq+0x204>)
 80079c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80079c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3750      	adds	r7, #80	@ 0x50
 80079d0:	46bd      	mov	sp, r7
 80079d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079d6:	bf00      	nop
 80079d8:	40023800 	.word	0x40023800
 80079dc:	00f42400 	.word	0x00f42400
 80079e0:	007a1200 	.word	0x007a1200

080079e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079e4:	b480      	push	{r7}
 80079e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079e8:	4b03      	ldr	r3, [pc, #12]	@ (80079f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80079ea:	681b      	ldr	r3, [r3, #0]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	200000e0 	.word	0x200000e0

080079fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a00:	f7ff fff0 	bl	80079e4 <HAL_RCC_GetHCLKFreq>
 8007a04:	4602      	mov	r2, r0
 8007a06:	4b05      	ldr	r3, [pc, #20]	@ (8007a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	0a9b      	lsrs	r3, r3, #10
 8007a0c:	f003 0307 	and.w	r3, r3, #7
 8007a10:	4903      	ldr	r1, [pc, #12]	@ (8007a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a12:	5ccb      	ldrb	r3, [r1, r3]
 8007a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40023800 	.word	0x40023800
 8007a20:	08010320 	.word	0x08010320

08007a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007a28:	f7ff ffdc 	bl	80079e4 <HAL_RCC_GetHCLKFreq>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	4b05      	ldr	r3, [pc, #20]	@ (8007a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	0b5b      	lsrs	r3, r3, #13
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	4903      	ldr	r1, [pc, #12]	@ (8007a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a3a:	5ccb      	ldrb	r3, [r1, r3]
 8007a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40023800 	.word	0x40023800
 8007a48:	08010320 	.word	0x08010320

08007a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e041      	b.n	8007ae2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d106      	bne.n	8007a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fd ff78 	bl	8005968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3304      	adds	r3, #4
 8007a88:	4619      	mov	r1, r3
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	f000 fc48 	bl	8008320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e041      	b.n	8007b80 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d106      	bne.n	8007b16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f839 	bl	8007b88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2202      	movs	r2, #2
 8007b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3304      	adds	r3, #4
 8007b26:	4619      	mov	r1, r3
 8007b28:	4610      	mov	r0, r2
 8007b2a:	f000 fbf9 	bl	8008320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d109      	bne.n	8007bc4 <HAL_TIM_PWM_Start_IT+0x28>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	bf14      	ite	ne
 8007bbc:	2301      	movne	r3, #1
 8007bbe:	2300      	moveq	r3, #0
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	e022      	b.n	8007c0a <HAL_TIM_PWM_Start_IT+0x6e>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	d109      	bne.n	8007bde <HAL_TIM_PWM_Start_IT+0x42>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	bf14      	ite	ne
 8007bd6:	2301      	movne	r3, #1
 8007bd8:	2300      	moveq	r3, #0
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	e015      	b.n	8007c0a <HAL_TIM_PWM_Start_IT+0x6e>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d109      	bne.n	8007bf8 <HAL_TIM_PWM_Start_IT+0x5c>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	bf14      	ite	ne
 8007bf0:	2301      	movne	r3, #1
 8007bf2:	2300      	moveq	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	e008      	b.n	8007c0a <HAL_TIM_PWM_Start_IT+0x6e>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	bf14      	ite	ne
 8007c04:	2301      	movne	r3, #1
 8007c06:	2300      	moveq	r3, #0
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e0c7      	b.n	8007da2 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d104      	bne.n	8007c22 <HAL_TIM_PWM_Start_IT+0x86>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c20:	e013      	b.n	8007c4a <HAL_TIM_PWM_Start_IT+0xae>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	d104      	bne.n	8007c32 <HAL_TIM_PWM_Start_IT+0x96>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c30:	e00b      	b.n	8007c4a <HAL_TIM_PWM_Start_IT+0xae>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b08      	cmp	r3, #8
 8007c36:	d104      	bne.n	8007c42 <HAL_TIM_PWM_Start_IT+0xa6>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c40:	e003      	b.n	8007c4a <HAL_TIM_PWM_Start_IT+0xae>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2202      	movs	r2, #2
 8007c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b0c      	cmp	r3, #12
 8007c4e:	d841      	bhi.n	8007cd4 <HAL_TIM_PWM_Start_IT+0x138>
 8007c50:	a201      	add	r2, pc, #4	@ (adr r2, 8007c58 <HAL_TIM_PWM_Start_IT+0xbc>)
 8007c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c56:	bf00      	nop
 8007c58:	08007c8d 	.word	0x08007c8d
 8007c5c:	08007cd5 	.word	0x08007cd5
 8007c60:	08007cd5 	.word	0x08007cd5
 8007c64:	08007cd5 	.word	0x08007cd5
 8007c68:	08007c9f 	.word	0x08007c9f
 8007c6c:	08007cd5 	.word	0x08007cd5
 8007c70:	08007cd5 	.word	0x08007cd5
 8007c74:	08007cd5 	.word	0x08007cd5
 8007c78:	08007cb1 	.word	0x08007cb1
 8007c7c:	08007cd5 	.word	0x08007cd5
 8007c80:	08007cd5 	.word	0x08007cd5
 8007c84:	08007cd5 	.word	0x08007cd5
 8007c88:	08007cc3 	.word	0x08007cc3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f042 0202 	orr.w	r2, r2, #2
 8007c9a:	60da      	str	r2, [r3, #12]
      break;
 8007c9c:	e01d      	b.n	8007cda <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68da      	ldr	r2, [r3, #12]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f042 0204 	orr.w	r2, r2, #4
 8007cac:	60da      	str	r2, [r3, #12]
      break;
 8007cae:	e014      	b.n	8007cda <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f042 0208 	orr.w	r2, r2, #8
 8007cbe:	60da      	str	r2, [r3, #12]
      break;
 8007cc0:	e00b      	b.n	8007cda <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f042 0210 	orr.w	r2, r2, #16
 8007cd0:	60da      	str	r2, [r3, #12]
      break;
 8007cd2:	e002      	b.n	8007cda <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd8:	bf00      	nop
  }

  if (status == HAL_OK)
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d15f      	bne.n	8007da0 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 fe0f 	bl	800890c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a2e      	ldr	r2, [pc, #184]	@ (8007dac <HAL_TIM_PWM_Start_IT+0x210>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d004      	beq.n	8007d02 <HAL_TIM_PWM_Start_IT+0x166>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8007db0 <HAL_TIM_PWM_Start_IT+0x214>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d101      	bne.n	8007d06 <HAL_TIM_PWM_Start_IT+0x16a>
 8007d02:	2301      	movs	r3, #1
 8007d04:	e000      	b.n	8007d08 <HAL_TIM_PWM_Start_IT+0x16c>
 8007d06:	2300      	movs	r3, #0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d007      	beq.n	8007d1c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d1a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a22      	ldr	r2, [pc, #136]	@ (8007dac <HAL_TIM_PWM_Start_IT+0x210>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d022      	beq.n	8007d6c <HAL_TIM_PWM_Start_IT+0x1d0>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d2e:	d01d      	beq.n	8007d6c <HAL_TIM_PWM_Start_IT+0x1d0>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a1f      	ldr	r2, [pc, #124]	@ (8007db4 <HAL_TIM_PWM_Start_IT+0x218>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d018      	beq.n	8007d6c <HAL_TIM_PWM_Start_IT+0x1d0>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8007db8 <HAL_TIM_PWM_Start_IT+0x21c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d013      	beq.n	8007d6c <HAL_TIM_PWM_Start_IT+0x1d0>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a1c      	ldr	r2, [pc, #112]	@ (8007dbc <HAL_TIM_PWM_Start_IT+0x220>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d00e      	beq.n	8007d6c <HAL_TIM_PWM_Start_IT+0x1d0>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a17      	ldr	r2, [pc, #92]	@ (8007db0 <HAL_TIM_PWM_Start_IT+0x214>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d009      	beq.n	8007d6c <HAL_TIM_PWM_Start_IT+0x1d0>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a18      	ldr	r2, [pc, #96]	@ (8007dc0 <HAL_TIM_PWM_Start_IT+0x224>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d004      	beq.n	8007d6c <HAL_TIM_PWM_Start_IT+0x1d0>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a17      	ldr	r2, [pc, #92]	@ (8007dc4 <HAL_TIM_PWM_Start_IT+0x228>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d111      	bne.n	8007d90 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2b06      	cmp	r3, #6
 8007d7c:	d010      	beq.n	8007da0 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f042 0201 	orr.w	r2, r2, #1
 8007d8c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d8e:	e007      	b.n	8007da0 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	40010000 	.word	0x40010000
 8007db0:	40010400 	.word	0x40010400
 8007db4:	40000400 	.word	0x40000400
 8007db8:	40000800 	.word	0x40000800
 8007dbc:	40000c00 	.word	0x40000c00
 8007dc0:	40014000 	.word	0x40014000
 8007dc4:	40001800 	.word	0x40001800

08007dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d020      	beq.n	8007e2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01b      	beq.n	8007e2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f06f 0202 	mvn.w	r2, #2
 8007dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fa65 	bl	80082e2 <HAL_TIM_IC_CaptureCallback>
 8007e18:	e005      	b.n	8007e26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fa57 	bl	80082ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fa68 	bl	80082f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f003 0304 	and.w	r3, r3, #4
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d020      	beq.n	8007e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f003 0304 	and.w	r3, r3, #4
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01b      	beq.n	8007e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f06f 0204 	mvn.w	r2, #4
 8007e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa3f 	bl	80082e2 <HAL_TIM_IC_CaptureCallback>
 8007e64:	e005      	b.n	8007e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa31 	bl	80082ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fa42 	bl	80082f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f003 0308 	and.w	r3, r3, #8
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d020      	beq.n	8007ec4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f003 0308 	and.w	r3, r3, #8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d01b      	beq.n	8007ec4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f06f 0208 	mvn.w	r2, #8
 8007e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2204      	movs	r2, #4
 8007e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	f003 0303 	and.w	r3, r3, #3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa19 	bl	80082e2 <HAL_TIM_IC_CaptureCallback>
 8007eb0:	e005      	b.n	8007ebe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fa0b 	bl	80082ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fa1c 	bl	80082f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f003 0310 	and.w	r3, r3, #16
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d020      	beq.n	8007f10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f003 0310 	and.w	r3, r3, #16
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01b      	beq.n	8007f10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f06f 0210 	mvn.w	r2, #16
 8007ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2208      	movs	r2, #8
 8007ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f9f3 	bl	80082e2 <HAL_TIM_IC_CaptureCallback>
 8007efc:	e005      	b.n	8007f0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f9e5 	bl	80082ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f9f6 	bl	80082f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00c      	beq.n	8007f34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d007      	beq.n	8007f34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f06f 0201 	mvn.w	r2, #1
 8007f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f9c3 	bl	80082ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00c      	beq.n	8007f58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d007      	beq.n	8007f58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fdd8 	bl	8008b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00c      	beq.n	8007f7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d007      	beq.n	8007f7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f9c7 	bl	800830a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00c      	beq.n	8007fa0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f003 0320 	and.w	r3, r3, #32
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d007      	beq.n	8007fa0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f06f 0220 	mvn.w	r2, #32
 8007f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fdaa 	bl	8008af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fa0:	bf00      	nop
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d101      	bne.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	e0ae      	b.n	8008124 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b0c      	cmp	r3, #12
 8007fd2:	f200 809f 	bhi.w	8008114 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fdc:	08008011 	.word	0x08008011
 8007fe0:	08008115 	.word	0x08008115
 8007fe4:	08008115 	.word	0x08008115
 8007fe8:	08008115 	.word	0x08008115
 8007fec:	08008051 	.word	0x08008051
 8007ff0:	08008115 	.word	0x08008115
 8007ff4:	08008115 	.word	0x08008115
 8007ff8:	08008115 	.word	0x08008115
 8007ffc:	08008093 	.word	0x08008093
 8008000:	08008115 	.word	0x08008115
 8008004:	08008115 	.word	0x08008115
 8008008:	08008115 	.word	0x08008115
 800800c:	080080d3 	.word	0x080080d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68b9      	ldr	r1, [r7, #8]
 8008016:	4618      	mov	r0, r3
 8008018:	f000 fa2e 	bl	8008478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	699a      	ldr	r2, [r3, #24]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0208 	orr.w	r2, r2, #8
 800802a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	699a      	ldr	r2, [r3, #24]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0204 	bic.w	r2, r2, #4
 800803a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6999      	ldr	r1, [r3, #24]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	691a      	ldr	r2, [r3, #16]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	619a      	str	r2, [r3, #24]
      break;
 800804e:	e064      	b.n	800811a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68b9      	ldr	r1, [r7, #8]
 8008056:	4618      	mov	r0, r3
 8008058:	f000 fa7e 	bl	8008558 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	699a      	ldr	r2, [r3, #24]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800806a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	699a      	ldr	r2, [r3, #24]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800807a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6999      	ldr	r1, [r3, #24]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	021a      	lsls	r2, r3, #8
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	619a      	str	r2, [r3, #24]
      break;
 8008090:	e043      	b.n	800811a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68b9      	ldr	r1, [r7, #8]
 8008098:	4618      	mov	r0, r3
 800809a:	f000 fad3 	bl	8008644 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	69da      	ldr	r2, [r3, #28]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f042 0208 	orr.w	r2, r2, #8
 80080ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	69da      	ldr	r2, [r3, #28]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 0204 	bic.w	r2, r2, #4
 80080bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	69d9      	ldr	r1, [r3, #28]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	691a      	ldr	r2, [r3, #16]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	61da      	str	r2, [r3, #28]
      break;
 80080d0:	e023      	b.n	800811a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68b9      	ldr	r1, [r7, #8]
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 fb27 	bl	800872c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	69da      	ldr	r2, [r3, #28]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	69da      	ldr	r2, [r3, #28]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	69d9      	ldr	r1, [r3, #28]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	021a      	lsls	r2, r3, #8
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	430a      	orrs	r2, r1
 8008110:	61da      	str	r2, [r3, #28]
      break;
 8008112:	e002      	b.n	800811a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	75fb      	strb	r3, [r7, #23]
      break;
 8008118:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008122:	7dfb      	ldrb	r3, [r7, #23]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3718      	adds	r7, #24
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008140:	2b01      	cmp	r3, #1
 8008142:	d101      	bne.n	8008148 <HAL_TIM_ConfigClockSource+0x1c>
 8008144:	2302      	movs	r3, #2
 8008146:	e0b4      	b.n	80082b2 <HAL_TIM_ConfigClockSource+0x186>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2202      	movs	r2, #2
 8008154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800816e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008180:	d03e      	beq.n	8008200 <HAL_TIM_ConfigClockSource+0xd4>
 8008182:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008186:	f200 8087 	bhi.w	8008298 <HAL_TIM_ConfigClockSource+0x16c>
 800818a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800818e:	f000 8086 	beq.w	800829e <HAL_TIM_ConfigClockSource+0x172>
 8008192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008196:	d87f      	bhi.n	8008298 <HAL_TIM_ConfigClockSource+0x16c>
 8008198:	2b70      	cmp	r3, #112	@ 0x70
 800819a:	d01a      	beq.n	80081d2 <HAL_TIM_ConfigClockSource+0xa6>
 800819c:	2b70      	cmp	r3, #112	@ 0x70
 800819e:	d87b      	bhi.n	8008298 <HAL_TIM_ConfigClockSource+0x16c>
 80081a0:	2b60      	cmp	r3, #96	@ 0x60
 80081a2:	d050      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0x11a>
 80081a4:	2b60      	cmp	r3, #96	@ 0x60
 80081a6:	d877      	bhi.n	8008298 <HAL_TIM_ConfigClockSource+0x16c>
 80081a8:	2b50      	cmp	r3, #80	@ 0x50
 80081aa:	d03c      	beq.n	8008226 <HAL_TIM_ConfigClockSource+0xfa>
 80081ac:	2b50      	cmp	r3, #80	@ 0x50
 80081ae:	d873      	bhi.n	8008298 <HAL_TIM_ConfigClockSource+0x16c>
 80081b0:	2b40      	cmp	r3, #64	@ 0x40
 80081b2:	d058      	beq.n	8008266 <HAL_TIM_ConfigClockSource+0x13a>
 80081b4:	2b40      	cmp	r3, #64	@ 0x40
 80081b6:	d86f      	bhi.n	8008298 <HAL_TIM_ConfigClockSource+0x16c>
 80081b8:	2b30      	cmp	r3, #48	@ 0x30
 80081ba:	d064      	beq.n	8008286 <HAL_TIM_ConfigClockSource+0x15a>
 80081bc:	2b30      	cmp	r3, #48	@ 0x30
 80081be:	d86b      	bhi.n	8008298 <HAL_TIM_ConfigClockSource+0x16c>
 80081c0:	2b20      	cmp	r3, #32
 80081c2:	d060      	beq.n	8008286 <HAL_TIM_ConfigClockSource+0x15a>
 80081c4:	2b20      	cmp	r3, #32
 80081c6:	d867      	bhi.n	8008298 <HAL_TIM_ConfigClockSource+0x16c>
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d05c      	beq.n	8008286 <HAL_TIM_ConfigClockSource+0x15a>
 80081cc:	2b10      	cmp	r3, #16
 80081ce:	d05a      	beq.n	8008286 <HAL_TIM_ConfigClockSource+0x15a>
 80081d0:	e062      	b.n	8008298 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80081e2:	f000 fb73 	bl	80088cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80081f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	609a      	str	r2, [r3, #8]
      break;
 80081fe:	e04f      	b.n	80082a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008210:	f000 fb5c 	bl	80088cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689a      	ldr	r2, [r3, #8]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008222:	609a      	str	r2, [r3, #8]
      break;
 8008224:	e03c      	b.n	80082a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008232:	461a      	mov	r2, r3
 8008234:	f000 fad0 	bl	80087d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2150      	movs	r1, #80	@ 0x50
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fb29 	bl	8008896 <TIM_ITRx_SetConfig>
      break;
 8008244:	e02c      	b.n	80082a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008252:	461a      	mov	r2, r3
 8008254:	f000 faef 	bl	8008836 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2160      	movs	r1, #96	@ 0x60
 800825e:	4618      	mov	r0, r3
 8008260:	f000 fb19 	bl	8008896 <TIM_ITRx_SetConfig>
      break;
 8008264:	e01c      	b.n	80082a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008272:	461a      	mov	r2, r3
 8008274:	f000 fab0 	bl	80087d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2140      	movs	r1, #64	@ 0x40
 800827e:	4618      	mov	r0, r3
 8008280:	f000 fb09 	bl	8008896 <TIM_ITRx_SetConfig>
      break;
 8008284:	e00c      	b.n	80082a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4619      	mov	r1, r3
 8008290:	4610      	mov	r0, r2
 8008292:	f000 fb00 	bl	8008896 <TIM_ITRx_SetConfig>
      break;
 8008296:	e003      	b.n	80082a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	73fb      	strb	r3, [r7, #15]
      break;
 800829c:	e000      	b.n	80082a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800829e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b083      	sub	sp, #12
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80082c2:	bf00      	nop
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b083      	sub	sp, #12
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082d6:	bf00      	nop
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
	...

08008320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a46      	ldr	r2, [pc, #280]	@ (800844c <TIM_Base_SetConfig+0x12c>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d013      	beq.n	8008360 <TIM_Base_SetConfig+0x40>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800833e:	d00f      	beq.n	8008360 <TIM_Base_SetConfig+0x40>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a43      	ldr	r2, [pc, #268]	@ (8008450 <TIM_Base_SetConfig+0x130>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d00b      	beq.n	8008360 <TIM_Base_SetConfig+0x40>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a42      	ldr	r2, [pc, #264]	@ (8008454 <TIM_Base_SetConfig+0x134>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d007      	beq.n	8008360 <TIM_Base_SetConfig+0x40>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a41      	ldr	r2, [pc, #260]	@ (8008458 <TIM_Base_SetConfig+0x138>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d003      	beq.n	8008360 <TIM_Base_SetConfig+0x40>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a40      	ldr	r2, [pc, #256]	@ (800845c <TIM_Base_SetConfig+0x13c>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d108      	bne.n	8008372 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	4313      	orrs	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a35      	ldr	r2, [pc, #212]	@ (800844c <TIM_Base_SetConfig+0x12c>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d02b      	beq.n	80083d2 <TIM_Base_SetConfig+0xb2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008380:	d027      	beq.n	80083d2 <TIM_Base_SetConfig+0xb2>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a32      	ldr	r2, [pc, #200]	@ (8008450 <TIM_Base_SetConfig+0x130>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d023      	beq.n	80083d2 <TIM_Base_SetConfig+0xb2>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a31      	ldr	r2, [pc, #196]	@ (8008454 <TIM_Base_SetConfig+0x134>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d01f      	beq.n	80083d2 <TIM_Base_SetConfig+0xb2>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a30      	ldr	r2, [pc, #192]	@ (8008458 <TIM_Base_SetConfig+0x138>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d01b      	beq.n	80083d2 <TIM_Base_SetConfig+0xb2>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a2f      	ldr	r2, [pc, #188]	@ (800845c <TIM_Base_SetConfig+0x13c>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d017      	beq.n	80083d2 <TIM_Base_SetConfig+0xb2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a2e      	ldr	r2, [pc, #184]	@ (8008460 <TIM_Base_SetConfig+0x140>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d013      	beq.n	80083d2 <TIM_Base_SetConfig+0xb2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a2d      	ldr	r2, [pc, #180]	@ (8008464 <TIM_Base_SetConfig+0x144>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d00f      	beq.n	80083d2 <TIM_Base_SetConfig+0xb2>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a2c      	ldr	r2, [pc, #176]	@ (8008468 <TIM_Base_SetConfig+0x148>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d00b      	beq.n	80083d2 <TIM_Base_SetConfig+0xb2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a2b      	ldr	r2, [pc, #172]	@ (800846c <TIM_Base_SetConfig+0x14c>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d007      	beq.n	80083d2 <TIM_Base_SetConfig+0xb2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a2a      	ldr	r2, [pc, #168]	@ (8008470 <TIM_Base_SetConfig+0x150>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d003      	beq.n	80083d2 <TIM_Base_SetConfig+0xb2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a29      	ldr	r2, [pc, #164]	@ (8008474 <TIM_Base_SetConfig+0x154>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d108      	bne.n	80083e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	689a      	ldr	r2, [r3, #8]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a10      	ldr	r2, [pc, #64]	@ (800844c <TIM_Base_SetConfig+0x12c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d003      	beq.n	8008418 <TIM_Base_SetConfig+0xf8>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a12      	ldr	r2, [pc, #72]	@ (800845c <TIM_Base_SetConfig+0x13c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d103      	bne.n	8008420 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	691a      	ldr	r2, [r3, #16]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b01      	cmp	r3, #1
 8008430:	d105      	bne.n	800843e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f023 0201 	bic.w	r2, r3, #1
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	611a      	str	r2, [r3, #16]
  }
}
 800843e:	bf00      	nop
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	40010000 	.word	0x40010000
 8008450:	40000400 	.word	0x40000400
 8008454:	40000800 	.word	0x40000800
 8008458:	40000c00 	.word	0x40000c00
 800845c:	40010400 	.word	0x40010400
 8008460:	40014000 	.word	0x40014000
 8008464:	40014400 	.word	0x40014400
 8008468:	40014800 	.word	0x40014800
 800846c:	40001800 	.word	0x40001800
 8008470:	40001c00 	.word	0x40001c00
 8008474:	40002000 	.word	0x40002000

08008478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a1b      	ldr	r3, [r3, #32]
 800848c:	f023 0201 	bic.w	r2, r3, #1
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0303 	bic.w	r3, r3, #3
 80084ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f023 0302 	bic.w	r3, r3, #2
 80084c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a20      	ldr	r2, [pc, #128]	@ (8008550 <TIM_OC1_SetConfig+0xd8>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d003      	beq.n	80084dc <TIM_OC1_SetConfig+0x64>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a1f      	ldr	r2, [pc, #124]	@ (8008554 <TIM_OC1_SetConfig+0xdc>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d10c      	bne.n	80084f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	f023 0308 	bic.w	r3, r3, #8
 80084e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f023 0304 	bic.w	r3, r3, #4
 80084f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a15      	ldr	r2, [pc, #84]	@ (8008550 <TIM_OC1_SetConfig+0xd8>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d003      	beq.n	8008506 <TIM_OC1_SetConfig+0x8e>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a14      	ldr	r2, [pc, #80]	@ (8008554 <TIM_OC1_SetConfig+0xdc>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d111      	bne.n	800852a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800850c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	4313      	orrs	r3, r2
 800851e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	4313      	orrs	r3, r2
 8008528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	621a      	str	r2, [r3, #32]
}
 8008544:	bf00      	nop
 8008546:	371c      	adds	r7, #28
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	40010000 	.word	0x40010000
 8008554:	40010400 	.word	0x40010400

08008558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	f023 0210 	bic.w	r2, r3, #16
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800858e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	021b      	lsls	r3, r3, #8
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	4313      	orrs	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	f023 0320 	bic.w	r3, r3, #32
 80085a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	011b      	lsls	r3, r3, #4
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a22      	ldr	r2, [pc, #136]	@ (800863c <TIM_OC2_SetConfig+0xe4>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d003      	beq.n	80085c0 <TIM_OC2_SetConfig+0x68>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a21      	ldr	r2, [pc, #132]	@ (8008640 <TIM_OC2_SetConfig+0xe8>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d10d      	bne.n	80085dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	011b      	lsls	r3, r3, #4
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a17      	ldr	r2, [pc, #92]	@ (800863c <TIM_OC2_SetConfig+0xe4>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d003      	beq.n	80085ec <TIM_OC2_SetConfig+0x94>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a16      	ldr	r2, [pc, #88]	@ (8008640 <TIM_OC2_SetConfig+0xe8>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d113      	bne.n	8008614 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80085fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	4313      	orrs	r3, r2
 8008606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	4313      	orrs	r3, r2
 8008612:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	693a      	ldr	r2, [r7, #16]
 8008618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	621a      	str	r2, [r3, #32]
}
 800862e:	bf00      	nop
 8008630:	371c      	adds	r7, #28
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	40010000 	.word	0x40010000
 8008640:	40010400 	.word	0x40010400

08008644 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008644:	b480      	push	{r7}
 8008646:	b087      	sub	sp, #28
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a1b      	ldr	r3, [r3, #32]
 8008658:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f023 0303 	bic.w	r3, r3, #3
 800867a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	4313      	orrs	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800868c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	021b      	lsls	r3, r3, #8
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	4313      	orrs	r3, r2
 8008698:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a21      	ldr	r2, [pc, #132]	@ (8008724 <TIM_OC3_SetConfig+0xe0>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d003      	beq.n	80086aa <TIM_OC3_SetConfig+0x66>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a20      	ldr	r2, [pc, #128]	@ (8008728 <TIM_OC3_SetConfig+0xe4>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d10d      	bne.n	80086c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	021b      	lsls	r3, r3, #8
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a16      	ldr	r2, [pc, #88]	@ (8008724 <TIM_OC3_SetConfig+0xe0>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d003      	beq.n	80086d6 <TIM_OC3_SetConfig+0x92>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a15      	ldr	r2, [pc, #84]	@ (8008728 <TIM_OC3_SetConfig+0xe4>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d113      	bne.n	80086fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80086e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	011b      	lsls	r3, r3, #4
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	011b      	lsls	r3, r3, #4
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	621a      	str	r2, [r3, #32]
}
 8008718:	bf00      	nop
 800871a:	371c      	adds	r7, #28
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	40010000 	.word	0x40010000
 8008728:	40010400 	.word	0x40010400

0800872c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800875a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	021b      	lsls	r3, r3, #8
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	4313      	orrs	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008776:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	031b      	lsls	r3, r3, #12
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	4313      	orrs	r3, r2
 8008782:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a12      	ldr	r2, [pc, #72]	@ (80087d0 <TIM_OC4_SetConfig+0xa4>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d003      	beq.n	8008794 <TIM_OC4_SetConfig+0x68>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a11      	ldr	r2, [pc, #68]	@ (80087d4 <TIM_OC4_SetConfig+0xa8>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d109      	bne.n	80087a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800879a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	695b      	ldr	r3, [r3, #20]
 80087a0:	019b      	lsls	r3, r3, #6
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	621a      	str	r2, [r3, #32]
}
 80087c2:	bf00      	nop
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	40010000 	.word	0x40010000
 80087d4:	40010400 	.word	0x40010400

080087d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	f023 0201 	bic.w	r2, r3, #1
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	4313      	orrs	r3, r2
 800880c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f023 030a 	bic.w	r3, r3, #10
 8008814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	4313      	orrs	r3, r2
 800881c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	621a      	str	r2, [r3, #32]
}
 800882a:	bf00      	nop
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008836:	b480      	push	{r7}
 8008838:	b087      	sub	sp, #28
 800883a:	af00      	add	r7, sp, #0
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	60b9      	str	r1, [r7, #8]
 8008840:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6a1b      	ldr	r3, [r3, #32]
 800884c:	f023 0210 	bic.w	r2, r3, #16
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008860:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	031b      	lsls	r3, r3, #12
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	4313      	orrs	r3, r2
 800886a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008872:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	011b      	lsls	r3, r3, #4
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	4313      	orrs	r3, r2
 800887c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	621a      	str	r2, [r3, #32]
}
 800888a:	bf00      	nop
 800888c:	371c      	adds	r7, #28
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008896:	b480      	push	{r7}
 8008898:	b085      	sub	sp, #20
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	f043 0307 	orr.w	r3, r3, #7
 80088b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	609a      	str	r2, [r3, #8]
}
 80088c0:	bf00      	nop
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
 80088d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	021a      	lsls	r2, r3, #8
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	431a      	orrs	r2, r3
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	609a      	str	r2, [r3, #8]
}
 8008900:	bf00      	nop
 8008902:	371c      	adds	r7, #28
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800890c:	b480      	push	{r7}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	f003 031f 	and.w	r3, r3, #31
 800891e:	2201      	movs	r2, #1
 8008920:	fa02 f303 	lsl.w	r3, r2, r3
 8008924:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6a1a      	ldr	r2, [r3, #32]
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	43db      	mvns	r3, r3
 800892e:	401a      	ands	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6a1a      	ldr	r2, [r3, #32]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	f003 031f 	and.w	r3, r3, #31
 800893e:	6879      	ldr	r1, [r7, #4]
 8008940:	fa01 f303 	lsl.w	r3, r1, r3
 8008944:	431a      	orrs	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	621a      	str	r2, [r3, #32]
}
 800894a:	bf00      	nop
 800894c:	371c      	adds	r7, #28
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
	...

08008958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008968:	2b01      	cmp	r3, #1
 800896a:	d101      	bne.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800896c:	2302      	movs	r3, #2
 800896e:	e05a      	b.n	8008a26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	4313      	orrs	r3, r2
 80089a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a21      	ldr	r2, [pc, #132]	@ (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d022      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089bc:	d01d      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a1d      	ldr	r2, [pc, #116]	@ (8008a38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d018      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a1b      	ldr	r2, [pc, #108]	@ (8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d013      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a1a      	ldr	r2, [pc, #104]	@ (8008a40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d00e      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a18      	ldr	r2, [pc, #96]	@ (8008a44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d009      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a17      	ldr	r2, [pc, #92]	@ (8008a48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d004      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a15      	ldr	r2, [pc, #84]	@ (8008a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d10c      	bne.n	8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	40010000 	.word	0x40010000
 8008a38:	40000400 	.word	0x40000400
 8008a3c:	40000800 	.word	0x40000800
 8008a40:	40000c00 	.word	0x40000c00
 8008a44:	40010400 	.word	0x40010400
 8008a48:	40014000 	.word	0x40014000
 8008a4c:	40001800 	.word	0x40001800

08008a50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d101      	bne.n	8008a6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a68:	2302      	movs	r3, #2
 8008a6a:	e03d      	b.n	8008ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e042      	b.n	8008bb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d106      	bne.n	8008b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7fc fffc 	bl	8005b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2224      	movs	r2, #36	@ 0x24
 8008b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fcdb 	bl	800951c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	691a      	ldr	r2, [r3, #16]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	695a      	ldr	r2, [r3, #20]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68da      	ldr	r2, [r3, #12]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2220      	movs	r2, #32
 8008ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b20      	cmp	r3, #32
 8008bd4:	d112      	bne.n	8008bfc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <HAL_UART_Receive_IT+0x26>
 8008bdc:	88fb      	ldrh	r3, [r7, #6]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e00b      	b.n	8008bfe <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008bec:	88fb      	ldrh	r3, [r7, #6]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	68b9      	ldr	r1, [r7, #8]
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f000 faba 	bl	800916c <UART_Start_Receive_IT>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	e000      	b.n	8008bfe <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008bfc:	2302      	movs	r3, #2
  }
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
	...

08008c08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b0ba      	sub	sp, #232	@ 0xe8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008c34:	2300      	movs	r3, #0
 8008c36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c3e:	f003 030f 	and.w	r3, r3, #15
 8008c42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10f      	bne.n	8008c6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c52:	f003 0320 	and.w	r3, r3, #32
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d009      	beq.n	8008c6e <HAL_UART_IRQHandler+0x66>
 8008c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c5e:	f003 0320 	and.w	r3, r3, #32
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fb99 	bl	800939e <UART_Receive_IT>
      return;
 8008c6c:	e25b      	b.n	8009126 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008c6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 80de 	beq.w	8008e34 <HAL_UART_IRQHandler+0x22c>
 8008c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c88:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 80d1 	beq.w	8008e34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00b      	beq.n	8008cb6 <HAL_UART_IRQHandler+0xae>
 8008c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d005      	beq.n	8008cb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cae:	f043 0201 	orr.w	r2, r3, #1
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cba:	f003 0304 	and.w	r3, r3, #4
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00b      	beq.n	8008cda <HAL_UART_IRQHandler+0xd2>
 8008cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d005      	beq.n	8008cda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cd2:	f043 0202 	orr.w	r2, r3, #2
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00b      	beq.n	8008cfe <HAL_UART_IRQHandler+0xf6>
 8008ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d005      	beq.n	8008cfe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cf6:	f043 0204 	orr.w	r2, r3, #4
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d02:	f003 0308 	and.w	r3, r3, #8
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d011      	beq.n	8008d2e <HAL_UART_IRQHandler+0x126>
 8008d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d0e:	f003 0320 	and.w	r3, r3, #32
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d105      	bne.n	8008d22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d005      	beq.n	8008d2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d26:	f043 0208 	orr.w	r2, r3, #8
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 81f2 	beq.w	800911c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d3c:	f003 0320 	and.w	r3, r3, #32
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d008      	beq.n	8008d56 <HAL_UART_IRQHandler+0x14e>
 8008d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d48:	f003 0320 	and.w	r3, r3, #32
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fb24 	bl	800939e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d60:	2b40      	cmp	r3, #64	@ 0x40
 8008d62:	bf0c      	ite	eq
 8008d64:	2301      	moveq	r3, #1
 8008d66:	2300      	movne	r3, #0
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d72:	f003 0308 	and.w	r3, r3, #8
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d103      	bne.n	8008d82 <HAL_UART_IRQHandler+0x17a>
 8008d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d04f      	beq.n	8008e22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fa2c 	bl	80091e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d92:	2b40      	cmp	r3, #64	@ 0x40
 8008d94:	d141      	bne.n	8008e1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3314      	adds	r3, #20
 8008d9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008da4:	e853 3f00 	ldrex	r3, [r3]
 8008da8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008db4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3314      	adds	r3, #20
 8008dbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008dc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008dce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1d9      	bne.n	8008d96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d013      	beq.n	8008e12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dee:	4a7e      	ldr	r2, [pc, #504]	@ (8008fe8 <HAL_UART_IRQHandler+0x3e0>)
 8008df0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fd fae9 	bl	80063ce <HAL_DMA_Abort_IT>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d016      	beq.n	8008e30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e10:	e00e      	b.n	8008e30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f994 	bl	8009140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e18:	e00a      	b.n	8008e30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f990 	bl	8009140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e20:	e006      	b.n	8008e30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f98c 	bl	8009140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008e2e:	e175      	b.n	800911c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e30:	bf00      	nop
    return;
 8008e32:	e173      	b.n	800911c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	f040 814f 	bne.w	80090dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e42:	f003 0310 	and.w	r3, r3, #16
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 8148 	beq.w	80090dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e50:	f003 0310 	and.w	r3, r3, #16
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 8141 	beq.w	80090dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60bb      	str	r3, [r7, #8]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	60bb      	str	r3, [r7, #8]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	60bb      	str	r3, [r7, #8]
 8008e6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e7a:	2b40      	cmp	r3, #64	@ 0x40
 8008e7c:	f040 80b6 	bne.w	8008fec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 8145 	beq.w	8009120 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	f080 813e 	bcs.w	8009120 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008eaa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eb6:	f000 8088 	beq.w	8008fca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	330c      	adds	r3, #12
 8008ec0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ec8:	e853 3f00 	ldrex	r3, [r3]
 8008ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ed4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	330c      	adds	r3, #12
 8008ee2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008ee6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008eea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ef2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ef6:	e841 2300 	strex	r3, r2, [r1]
 8008efa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1d9      	bne.n	8008eba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3314      	adds	r3, #20
 8008f0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008f16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f18:	f023 0301 	bic.w	r3, r3, #1
 8008f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3314      	adds	r3, #20
 8008f26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008f2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008f32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008f3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e1      	bne.n	8008f06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3314      	adds	r3, #20
 8008f48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3314      	adds	r3, #20
 8008f62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e3      	bne.n	8008f42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	330c      	adds	r3, #12
 8008f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f92:	e853 3f00 	ldrex	r3, [r3]
 8008f96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f9a:	f023 0310 	bic.w	r3, r3, #16
 8008f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	330c      	adds	r3, #12
 8008fa8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008fac:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008fae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008fb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fb4:	e841 2300 	strex	r3, r2, [r1]
 8008fb8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e3      	bne.n	8008f88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fd f992 	bl	80062ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2202      	movs	r2, #2
 8008fce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f8b7 	bl	8009154 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008fe6:	e09b      	b.n	8009120 <HAL_UART_IRQHandler+0x518>
 8008fe8:	080092a7 	.word	0x080092a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009000:	b29b      	uxth	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 808e 	beq.w	8009124 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009008:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 8089 	beq.w	8009124 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	330c      	adds	r3, #12
 8009018:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901c:	e853 3f00 	ldrex	r3, [r3]
 8009020:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009024:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009028:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	330c      	adds	r3, #12
 8009032:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009036:	647a      	str	r2, [r7, #68]	@ 0x44
 8009038:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800903c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e3      	bne.n	8009012 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3314      	adds	r3, #20
 8009050:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	623b      	str	r3, [r7, #32]
   return(result);
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	f023 0301 	bic.w	r3, r3, #1
 8009060:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3314      	adds	r3, #20
 800906a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800906e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009070:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009072:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009076:	e841 2300 	strex	r3, r2, [r1]
 800907a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800907c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1e3      	bne.n	800904a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2220      	movs	r2, #32
 8009086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	330c      	adds	r3, #12
 8009096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	e853 3f00 	ldrex	r3, [r3]
 800909e:	60fb      	str	r3, [r7, #12]
   return(result);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f023 0310 	bic.w	r3, r3, #16
 80090a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	330c      	adds	r3, #12
 80090b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80090b4:	61fa      	str	r2, [r7, #28]
 80090b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b8:	69b9      	ldr	r1, [r7, #24]
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	e841 2300 	strex	r3, r2, [r1]
 80090c0:	617b      	str	r3, [r7, #20]
   return(result);
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1e3      	bne.n	8009090 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f83d 	bl	8009154 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80090da:	e023      	b.n	8009124 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80090dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d009      	beq.n	80090fc <HAL_UART_IRQHandler+0x4f4>
 80090e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d003      	beq.n	80090fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f8ea 	bl	80092ce <UART_Transmit_IT>
    return;
 80090fa:	e014      	b.n	8009126 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80090fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00e      	beq.n	8009126 <HAL_UART_IRQHandler+0x51e>
 8009108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800910c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009110:	2b00      	cmp	r3, #0
 8009112:	d008      	beq.n	8009126 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f92a 	bl	800936e <UART_EndTransmit_IT>
    return;
 800911a:	e004      	b.n	8009126 <HAL_UART_IRQHandler+0x51e>
    return;
 800911c:	bf00      	nop
 800911e:	e002      	b.n	8009126 <HAL_UART_IRQHandler+0x51e>
      return;
 8009120:	bf00      	nop
 8009122:	e000      	b.n	8009126 <HAL_UART_IRQHandler+0x51e>
      return;
 8009124:	bf00      	nop
  }
}
 8009126:	37e8      	adds	r7, #232	@ 0xe8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	460b      	mov	r3, r1
 800915e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	4613      	mov	r3, r2
 8009178:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	88fa      	ldrh	r2, [r7, #6]
 8009184:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	88fa      	ldrh	r2, [r7, #6]
 800918a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2222      	movs	r2, #34	@ 0x22
 8009196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d007      	beq.n	80091b2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68da      	ldr	r2, [r3, #12]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	695a      	ldr	r2, [r3, #20]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f042 0201 	orr.w	r2, r2, #1
 80091c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68da      	ldr	r2, [r3, #12]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f042 0220 	orr.w	r2, r2, #32
 80091d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3714      	adds	r7, #20
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b095      	sub	sp, #84	@ 0x54
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	330c      	adds	r3, #12
 80091ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f2:	e853 3f00 	ldrex	r3, [r3]
 80091f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	330c      	adds	r3, #12
 8009206:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009208:	643a      	str	r2, [r7, #64]	@ 0x40
 800920a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800920e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009210:	e841 2300 	strex	r3, r2, [r1]
 8009214:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e5      	bne.n	80091e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3314      	adds	r3, #20
 8009222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	e853 3f00 	ldrex	r3, [r3]
 800922a:	61fb      	str	r3, [r7, #28]
   return(result);
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	f023 0301 	bic.w	r3, r3, #1
 8009232:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3314      	adds	r3, #20
 800923a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800923c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800923e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009240:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009244:	e841 2300 	strex	r3, r2, [r1]
 8009248:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800924a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1e5      	bne.n	800921c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009254:	2b01      	cmp	r3, #1
 8009256:	d119      	bne.n	800928c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	330c      	adds	r3, #12
 800925e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	e853 3f00 	ldrex	r3, [r3]
 8009266:	60bb      	str	r3, [r7, #8]
   return(result);
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	f023 0310 	bic.w	r3, r3, #16
 800926e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	330c      	adds	r3, #12
 8009276:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009278:	61ba      	str	r2, [r7, #24]
 800927a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927c:	6979      	ldr	r1, [r7, #20]
 800927e:	69ba      	ldr	r2, [r7, #24]
 8009280:	e841 2300 	strex	r3, r2, [r1]
 8009284:	613b      	str	r3, [r7, #16]
   return(result);
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1e5      	bne.n	8009258 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2220      	movs	r2, #32
 8009290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800929a:	bf00      	nop
 800929c:	3754      	adds	r7, #84	@ 0x54
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f7ff ff3d 	bl	8009140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092c6:	bf00      	nop
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b085      	sub	sp, #20
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b21      	cmp	r3, #33	@ 0x21
 80092e0:	d13e      	bne.n	8009360 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ea:	d114      	bne.n	8009316 <UART_Transmit_IT+0x48>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d110      	bne.n	8009316 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	461a      	mov	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009308:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	1c9a      	adds	r2, r3, #2
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	621a      	str	r2, [r3, #32]
 8009314:	e008      	b.n	8009328 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	1c59      	adds	r1, r3, #1
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	6211      	str	r1, [r2, #32]
 8009320:	781a      	ldrb	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800932c:	b29b      	uxth	r3, r3
 800932e:	3b01      	subs	r3, #1
 8009330:	b29b      	uxth	r3, r3
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	4619      	mov	r1, r3
 8009336:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10f      	bne.n	800935c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800934a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68da      	ldr	r2, [r3, #12]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800935a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	e000      	b.n	8009362 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009360:	2302      	movs	r3, #2
  }
}
 8009362:	4618      	mov	r0, r3
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b082      	sub	sp, #8
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68da      	ldr	r2, [r3, #12]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009384:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2220      	movs	r2, #32
 800938a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff fecc 	bl	800912c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b08c      	sub	sp, #48	@ 0x30
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b22      	cmp	r3, #34	@ 0x22
 80093b0:	f040 80ae 	bne.w	8009510 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093bc:	d117      	bne.n	80093ee <UART_Receive_IT+0x50>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d113      	bne.n	80093ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80093c6:	2300      	movs	r3, #0
 80093c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093dc:	b29a      	uxth	r2, r3
 80093de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e6:	1c9a      	adds	r2, r3, #2
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80093ec:	e026      	b.n	800943c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80093f4:	2300      	movs	r3, #0
 80093f6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009400:	d007      	beq.n	8009412 <UART_Receive_IT+0x74>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10a      	bne.n	8009420 <UART_Receive_IT+0x82>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d106      	bne.n	8009420 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	b2da      	uxtb	r2, r3
 800941a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800941c:	701a      	strb	r2, [r3, #0]
 800941e:	e008      	b.n	8009432 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	b2db      	uxtb	r3, r3
 8009428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800942c:	b2da      	uxtb	r2, r3
 800942e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009430:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009436:	1c5a      	adds	r2, r3, #1
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009440:	b29b      	uxth	r3, r3
 8009442:	3b01      	subs	r3, #1
 8009444:	b29b      	uxth	r3, r3
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	4619      	mov	r1, r3
 800944a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800944c:	2b00      	cmp	r3, #0
 800944e:	d15d      	bne.n	800950c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68da      	ldr	r2, [r3, #12]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f022 0220 	bic.w	r2, r2, #32
 800945e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68da      	ldr	r2, [r3, #12]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800946e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	695a      	ldr	r2, [r3, #20]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f022 0201 	bic.w	r2, r2, #1
 800947e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2220      	movs	r2, #32
 8009484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009492:	2b01      	cmp	r3, #1
 8009494:	d135      	bne.n	8009502 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	330c      	adds	r3, #12
 80094a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	e853 3f00 	ldrex	r3, [r3]
 80094aa:	613b      	str	r3, [r7, #16]
   return(result);
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f023 0310 	bic.w	r3, r3, #16
 80094b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	330c      	adds	r3, #12
 80094ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094bc:	623a      	str	r2, [r7, #32]
 80094be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c0:	69f9      	ldr	r1, [r7, #28]
 80094c2:	6a3a      	ldr	r2, [r7, #32]
 80094c4:	e841 2300 	strex	r3, r2, [r1]
 80094c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1e5      	bne.n	800949c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 0310 	and.w	r3, r3, #16
 80094da:	2b10      	cmp	r3, #16
 80094dc:	d10a      	bne.n	80094f4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094de:	2300      	movs	r3, #0
 80094e0:	60fb      	str	r3, [r7, #12]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	60fb      	str	r3, [r7, #12]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	60fb      	str	r3, [r7, #12]
 80094f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff fe2a 	bl	8009154 <HAL_UARTEx_RxEventCallback>
 8009500:	e002      	b.n	8009508 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7f9 fd9e 	bl	8003044 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	e002      	b.n	8009512 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	e000      	b.n	8009512 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009510:	2302      	movs	r3, #2
  }
}
 8009512:	4618      	mov	r0, r3
 8009514:	3730      	adds	r7, #48	@ 0x30
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800951c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009520:	b0c0      	sub	sp, #256	@ 0x100
 8009522:	af00      	add	r7, sp, #0
 8009524:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009538:	68d9      	ldr	r1, [r3, #12]
 800953a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	ea40 0301 	orr.w	r3, r0, r1
 8009544:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	431a      	orrs	r2, r3
 8009554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	431a      	orrs	r2, r3
 800955c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	4313      	orrs	r3, r2
 8009564:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009574:	f021 010c 	bic.w	r1, r1, #12
 8009578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009582:	430b      	orrs	r3, r1
 8009584:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009596:	6999      	ldr	r1, [r3, #24]
 8009598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	ea40 0301 	orr.w	r3, r0, r1
 80095a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80095a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	4b8f      	ldr	r3, [pc, #572]	@ (80097e8 <UART_SetConfig+0x2cc>)
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d005      	beq.n	80095bc <UART_SetConfig+0xa0>
 80095b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	4b8d      	ldr	r3, [pc, #564]	@ (80097ec <UART_SetConfig+0x2d0>)
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d104      	bne.n	80095c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095bc:	f7fe fa32 	bl	8007a24 <HAL_RCC_GetPCLK2Freq>
 80095c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80095c4:	e003      	b.n	80095ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095c6:	f7fe fa19 	bl	80079fc <HAL_RCC_GetPCLK1Freq>
 80095ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095d2:	69db      	ldr	r3, [r3, #28]
 80095d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095d8:	f040 810c 	bne.w	80097f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095e0:	2200      	movs	r2, #0
 80095e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80095e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80095ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80095ee:	4622      	mov	r2, r4
 80095f0:	462b      	mov	r3, r5
 80095f2:	1891      	adds	r1, r2, r2
 80095f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80095f6:	415b      	adcs	r3, r3
 80095f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80095fe:	4621      	mov	r1, r4
 8009600:	eb12 0801 	adds.w	r8, r2, r1
 8009604:	4629      	mov	r1, r5
 8009606:	eb43 0901 	adc.w	r9, r3, r1
 800960a:	f04f 0200 	mov.w	r2, #0
 800960e:	f04f 0300 	mov.w	r3, #0
 8009612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800961a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800961e:	4690      	mov	r8, r2
 8009620:	4699      	mov	r9, r3
 8009622:	4623      	mov	r3, r4
 8009624:	eb18 0303 	adds.w	r3, r8, r3
 8009628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800962c:	462b      	mov	r3, r5
 800962e:	eb49 0303 	adc.w	r3, r9, r3
 8009632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009642:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009646:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800964a:	460b      	mov	r3, r1
 800964c:	18db      	adds	r3, r3, r3
 800964e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009650:	4613      	mov	r3, r2
 8009652:	eb42 0303 	adc.w	r3, r2, r3
 8009656:	657b      	str	r3, [r7, #84]	@ 0x54
 8009658:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800965c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009660:	f7f7 fb12 	bl	8000c88 <__aeabi_uldivmod>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	4b61      	ldr	r3, [pc, #388]	@ (80097f0 <UART_SetConfig+0x2d4>)
 800966a:	fba3 2302 	umull	r2, r3, r3, r2
 800966e:	095b      	lsrs	r3, r3, #5
 8009670:	011c      	lsls	r4, r3, #4
 8009672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009676:	2200      	movs	r2, #0
 8009678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800967c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009680:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009684:	4642      	mov	r2, r8
 8009686:	464b      	mov	r3, r9
 8009688:	1891      	adds	r1, r2, r2
 800968a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800968c:	415b      	adcs	r3, r3
 800968e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009690:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009694:	4641      	mov	r1, r8
 8009696:	eb12 0a01 	adds.w	sl, r2, r1
 800969a:	4649      	mov	r1, r9
 800969c:	eb43 0b01 	adc.w	fp, r3, r1
 80096a0:	f04f 0200 	mov.w	r2, #0
 80096a4:	f04f 0300 	mov.w	r3, #0
 80096a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80096ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80096b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096b4:	4692      	mov	sl, r2
 80096b6:	469b      	mov	fp, r3
 80096b8:	4643      	mov	r3, r8
 80096ba:	eb1a 0303 	adds.w	r3, sl, r3
 80096be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096c2:	464b      	mov	r3, r9
 80096c4:	eb4b 0303 	adc.w	r3, fp, r3
 80096c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80096cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80096dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80096e0:	460b      	mov	r3, r1
 80096e2:	18db      	adds	r3, r3, r3
 80096e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80096e6:	4613      	mov	r3, r2
 80096e8:	eb42 0303 	adc.w	r3, r2, r3
 80096ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80096ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80096f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80096f6:	f7f7 fac7 	bl	8000c88 <__aeabi_uldivmod>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	4611      	mov	r1, r2
 8009700:	4b3b      	ldr	r3, [pc, #236]	@ (80097f0 <UART_SetConfig+0x2d4>)
 8009702:	fba3 2301 	umull	r2, r3, r3, r1
 8009706:	095b      	lsrs	r3, r3, #5
 8009708:	2264      	movs	r2, #100	@ 0x64
 800970a:	fb02 f303 	mul.w	r3, r2, r3
 800970e:	1acb      	subs	r3, r1, r3
 8009710:	00db      	lsls	r3, r3, #3
 8009712:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009716:	4b36      	ldr	r3, [pc, #216]	@ (80097f0 <UART_SetConfig+0x2d4>)
 8009718:	fba3 2302 	umull	r2, r3, r3, r2
 800971c:	095b      	lsrs	r3, r3, #5
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009724:	441c      	add	r4, r3
 8009726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800972a:	2200      	movs	r2, #0
 800972c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009730:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009734:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009738:	4642      	mov	r2, r8
 800973a:	464b      	mov	r3, r9
 800973c:	1891      	adds	r1, r2, r2
 800973e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009740:	415b      	adcs	r3, r3
 8009742:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009744:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009748:	4641      	mov	r1, r8
 800974a:	1851      	adds	r1, r2, r1
 800974c:	6339      	str	r1, [r7, #48]	@ 0x30
 800974e:	4649      	mov	r1, r9
 8009750:	414b      	adcs	r3, r1
 8009752:	637b      	str	r3, [r7, #52]	@ 0x34
 8009754:	f04f 0200 	mov.w	r2, #0
 8009758:	f04f 0300 	mov.w	r3, #0
 800975c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009760:	4659      	mov	r1, fp
 8009762:	00cb      	lsls	r3, r1, #3
 8009764:	4651      	mov	r1, sl
 8009766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800976a:	4651      	mov	r1, sl
 800976c:	00ca      	lsls	r2, r1, #3
 800976e:	4610      	mov	r0, r2
 8009770:	4619      	mov	r1, r3
 8009772:	4603      	mov	r3, r0
 8009774:	4642      	mov	r2, r8
 8009776:	189b      	adds	r3, r3, r2
 8009778:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800977c:	464b      	mov	r3, r9
 800977e:	460a      	mov	r2, r1
 8009780:	eb42 0303 	adc.w	r3, r2, r3
 8009784:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009794:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009798:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800979c:	460b      	mov	r3, r1
 800979e:	18db      	adds	r3, r3, r3
 80097a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097a2:	4613      	mov	r3, r2
 80097a4:	eb42 0303 	adc.w	r3, r2, r3
 80097a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80097ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80097b2:	f7f7 fa69 	bl	8000c88 <__aeabi_uldivmod>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	4b0d      	ldr	r3, [pc, #52]	@ (80097f0 <UART_SetConfig+0x2d4>)
 80097bc:	fba3 1302 	umull	r1, r3, r3, r2
 80097c0:	095b      	lsrs	r3, r3, #5
 80097c2:	2164      	movs	r1, #100	@ 0x64
 80097c4:	fb01 f303 	mul.w	r3, r1, r3
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	00db      	lsls	r3, r3, #3
 80097cc:	3332      	adds	r3, #50	@ 0x32
 80097ce:	4a08      	ldr	r2, [pc, #32]	@ (80097f0 <UART_SetConfig+0x2d4>)
 80097d0:	fba2 2303 	umull	r2, r3, r2, r3
 80097d4:	095b      	lsrs	r3, r3, #5
 80097d6:	f003 0207 	and.w	r2, r3, #7
 80097da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4422      	add	r2, r4
 80097e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097e4:	e106      	b.n	80099f4 <UART_SetConfig+0x4d8>
 80097e6:	bf00      	nop
 80097e8:	40011000 	.word	0x40011000
 80097ec:	40011400 	.word	0x40011400
 80097f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097f8:	2200      	movs	r2, #0
 80097fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80097fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009802:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009806:	4642      	mov	r2, r8
 8009808:	464b      	mov	r3, r9
 800980a:	1891      	adds	r1, r2, r2
 800980c:	6239      	str	r1, [r7, #32]
 800980e:	415b      	adcs	r3, r3
 8009810:	627b      	str	r3, [r7, #36]	@ 0x24
 8009812:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009816:	4641      	mov	r1, r8
 8009818:	1854      	adds	r4, r2, r1
 800981a:	4649      	mov	r1, r9
 800981c:	eb43 0501 	adc.w	r5, r3, r1
 8009820:	f04f 0200 	mov.w	r2, #0
 8009824:	f04f 0300 	mov.w	r3, #0
 8009828:	00eb      	lsls	r3, r5, #3
 800982a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800982e:	00e2      	lsls	r2, r4, #3
 8009830:	4614      	mov	r4, r2
 8009832:	461d      	mov	r5, r3
 8009834:	4643      	mov	r3, r8
 8009836:	18e3      	adds	r3, r4, r3
 8009838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800983c:	464b      	mov	r3, r9
 800983e:	eb45 0303 	adc.w	r3, r5, r3
 8009842:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009852:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009856:	f04f 0200 	mov.w	r2, #0
 800985a:	f04f 0300 	mov.w	r3, #0
 800985e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009862:	4629      	mov	r1, r5
 8009864:	008b      	lsls	r3, r1, #2
 8009866:	4621      	mov	r1, r4
 8009868:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800986c:	4621      	mov	r1, r4
 800986e:	008a      	lsls	r2, r1, #2
 8009870:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009874:	f7f7 fa08 	bl	8000c88 <__aeabi_uldivmod>
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	4b60      	ldr	r3, [pc, #384]	@ (8009a00 <UART_SetConfig+0x4e4>)
 800987e:	fba3 2302 	umull	r2, r3, r3, r2
 8009882:	095b      	lsrs	r3, r3, #5
 8009884:	011c      	lsls	r4, r3, #4
 8009886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800988a:	2200      	movs	r2, #0
 800988c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009890:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009894:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009898:	4642      	mov	r2, r8
 800989a:	464b      	mov	r3, r9
 800989c:	1891      	adds	r1, r2, r2
 800989e:	61b9      	str	r1, [r7, #24]
 80098a0:	415b      	adcs	r3, r3
 80098a2:	61fb      	str	r3, [r7, #28]
 80098a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098a8:	4641      	mov	r1, r8
 80098aa:	1851      	adds	r1, r2, r1
 80098ac:	6139      	str	r1, [r7, #16]
 80098ae:	4649      	mov	r1, r9
 80098b0:	414b      	adcs	r3, r1
 80098b2:	617b      	str	r3, [r7, #20]
 80098b4:	f04f 0200 	mov.w	r2, #0
 80098b8:	f04f 0300 	mov.w	r3, #0
 80098bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098c0:	4659      	mov	r1, fp
 80098c2:	00cb      	lsls	r3, r1, #3
 80098c4:	4651      	mov	r1, sl
 80098c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098ca:	4651      	mov	r1, sl
 80098cc:	00ca      	lsls	r2, r1, #3
 80098ce:	4610      	mov	r0, r2
 80098d0:	4619      	mov	r1, r3
 80098d2:	4603      	mov	r3, r0
 80098d4:	4642      	mov	r2, r8
 80098d6:	189b      	adds	r3, r3, r2
 80098d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80098dc:	464b      	mov	r3, r9
 80098de:	460a      	mov	r2, r1
 80098e0:	eb42 0303 	adc.w	r3, r2, r3
 80098e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80098f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80098f4:	f04f 0200 	mov.w	r2, #0
 80098f8:	f04f 0300 	mov.w	r3, #0
 80098fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009900:	4649      	mov	r1, r9
 8009902:	008b      	lsls	r3, r1, #2
 8009904:	4641      	mov	r1, r8
 8009906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800990a:	4641      	mov	r1, r8
 800990c:	008a      	lsls	r2, r1, #2
 800990e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009912:	f7f7 f9b9 	bl	8000c88 <__aeabi_uldivmod>
 8009916:	4602      	mov	r2, r0
 8009918:	460b      	mov	r3, r1
 800991a:	4611      	mov	r1, r2
 800991c:	4b38      	ldr	r3, [pc, #224]	@ (8009a00 <UART_SetConfig+0x4e4>)
 800991e:	fba3 2301 	umull	r2, r3, r3, r1
 8009922:	095b      	lsrs	r3, r3, #5
 8009924:	2264      	movs	r2, #100	@ 0x64
 8009926:	fb02 f303 	mul.w	r3, r2, r3
 800992a:	1acb      	subs	r3, r1, r3
 800992c:	011b      	lsls	r3, r3, #4
 800992e:	3332      	adds	r3, #50	@ 0x32
 8009930:	4a33      	ldr	r2, [pc, #204]	@ (8009a00 <UART_SetConfig+0x4e4>)
 8009932:	fba2 2303 	umull	r2, r3, r2, r3
 8009936:	095b      	lsrs	r3, r3, #5
 8009938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800993c:	441c      	add	r4, r3
 800993e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009942:	2200      	movs	r2, #0
 8009944:	673b      	str	r3, [r7, #112]	@ 0x70
 8009946:	677a      	str	r2, [r7, #116]	@ 0x74
 8009948:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800994c:	4642      	mov	r2, r8
 800994e:	464b      	mov	r3, r9
 8009950:	1891      	adds	r1, r2, r2
 8009952:	60b9      	str	r1, [r7, #8]
 8009954:	415b      	adcs	r3, r3
 8009956:	60fb      	str	r3, [r7, #12]
 8009958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800995c:	4641      	mov	r1, r8
 800995e:	1851      	adds	r1, r2, r1
 8009960:	6039      	str	r1, [r7, #0]
 8009962:	4649      	mov	r1, r9
 8009964:	414b      	adcs	r3, r1
 8009966:	607b      	str	r3, [r7, #4]
 8009968:	f04f 0200 	mov.w	r2, #0
 800996c:	f04f 0300 	mov.w	r3, #0
 8009970:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009974:	4659      	mov	r1, fp
 8009976:	00cb      	lsls	r3, r1, #3
 8009978:	4651      	mov	r1, sl
 800997a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800997e:	4651      	mov	r1, sl
 8009980:	00ca      	lsls	r2, r1, #3
 8009982:	4610      	mov	r0, r2
 8009984:	4619      	mov	r1, r3
 8009986:	4603      	mov	r3, r0
 8009988:	4642      	mov	r2, r8
 800998a:	189b      	adds	r3, r3, r2
 800998c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800998e:	464b      	mov	r3, r9
 8009990:	460a      	mov	r2, r1
 8009992:	eb42 0303 	adc.w	r3, r2, r3
 8009996:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80099a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	f04f 0300 	mov.w	r3, #0
 80099ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80099b0:	4649      	mov	r1, r9
 80099b2:	008b      	lsls	r3, r1, #2
 80099b4:	4641      	mov	r1, r8
 80099b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099ba:	4641      	mov	r1, r8
 80099bc:	008a      	lsls	r2, r1, #2
 80099be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80099c2:	f7f7 f961 	bl	8000c88 <__aeabi_uldivmod>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009a00 <UART_SetConfig+0x4e4>)
 80099cc:	fba3 1302 	umull	r1, r3, r3, r2
 80099d0:	095b      	lsrs	r3, r3, #5
 80099d2:	2164      	movs	r1, #100	@ 0x64
 80099d4:	fb01 f303 	mul.w	r3, r1, r3
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	011b      	lsls	r3, r3, #4
 80099dc:	3332      	adds	r3, #50	@ 0x32
 80099de:	4a08      	ldr	r2, [pc, #32]	@ (8009a00 <UART_SetConfig+0x4e4>)
 80099e0:	fba2 2303 	umull	r2, r3, r2, r3
 80099e4:	095b      	lsrs	r3, r3, #5
 80099e6:	f003 020f 	and.w	r2, r3, #15
 80099ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4422      	add	r2, r4
 80099f2:	609a      	str	r2, [r3, #8]
}
 80099f4:	bf00      	nop
 80099f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80099fa:	46bd      	mov	sp, r7
 80099fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a00:	51eb851f 	.word	0x51eb851f

08009a04 <atof>:
 8009a04:	2100      	movs	r1, #0
 8009a06:	f000 be0d 	b.w	800a624 <strtod>

08009a0a <atoi>:
 8009a0a:	220a      	movs	r2, #10
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	f000 be91 	b.w	800a734 <strtol>

08009a12 <sulp>:
 8009a12:	b570      	push	{r4, r5, r6, lr}
 8009a14:	4604      	mov	r4, r0
 8009a16:	460d      	mov	r5, r1
 8009a18:	ec45 4b10 	vmov	d0, r4, r5
 8009a1c:	4616      	mov	r6, r2
 8009a1e:	f003 fd5b 	bl	800d4d8 <__ulp>
 8009a22:	ec51 0b10 	vmov	r0, r1, d0
 8009a26:	b17e      	cbz	r6, 8009a48 <sulp+0x36>
 8009a28:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a2c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	dd09      	ble.n	8009a48 <sulp+0x36>
 8009a34:	051b      	lsls	r3, r3, #20
 8009a36:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009a3a:	2400      	movs	r4, #0
 8009a3c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009a40:	4622      	mov	r2, r4
 8009a42:	462b      	mov	r3, r5
 8009a44:	f7f6 fdd8 	bl	80005f8 <__aeabi_dmul>
 8009a48:	ec41 0b10 	vmov	d0, r0, r1
 8009a4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a50 <_strtod_l>:
 8009a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a54:	b09f      	sub	sp, #124	@ 0x7c
 8009a56:	460c      	mov	r4, r1
 8009a58:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009a5e:	9005      	str	r0, [sp, #20]
 8009a60:	f04f 0a00 	mov.w	sl, #0
 8009a64:	f04f 0b00 	mov.w	fp, #0
 8009a68:	460a      	mov	r2, r1
 8009a6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a6c:	7811      	ldrb	r1, [r2, #0]
 8009a6e:	292b      	cmp	r1, #43	@ 0x2b
 8009a70:	d04a      	beq.n	8009b08 <_strtod_l+0xb8>
 8009a72:	d838      	bhi.n	8009ae6 <_strtod_l+0x96>
 8009a74:	290d      	cmp	r1, #13
 8009a76:	d832      	bhi.n	8009ade <_strtod_l+0x8e>
 8009a78:	2908      	cmp	r1, #8
 8009a7a:	d832      	bhi.n	8009ae2 <_strtod_l+0x92>
 8009a7c:	2900      	cmp	r1, #0
 8009a7e:	d03b      	beq.n	8009af8 <_strtod_l+0xa8>
 8009a80:	2200      	movs	r2, #0
 8009a82:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009a84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009a86:	782a      	ldrb	r2, [r5, #0]
 8009a88:	2a30      	cmp	r2, #48	@ 0x30
 8009a8a:	f040 80b3 	bne.w	8009bf4 <_strtod_l+0x1a4>
 8009a8e:	786a      	ldrb	r2, [r5, #1]
 8009a90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a94:	2a58      	cmp	r2, #88	@ 0x58
 8009a96:	d16e      	bne.n	8009b76 <_strtod_l+0x126>
 8009a98:	9302      	str	r3, [sp, #8]
 8009a9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	4a8e      	ldr	r2, [pc, #568]	@ (8009cdc <_strtod_l+0x28c>)
 8009aa4:	9805      	ldr	r0, [sp, #20]
 8009aa6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009aa8:	a919      	add	r1, sp, #100	@ 0x64
 8009aaa:	f002 fe07 	bl	800c6bc <__gethex>
 8009aae:	f010 060f 	ands.w	r6, r0, #15
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	d005      	beq.n	8009ac2 <_strtod_l+0x72>
 8009ab6:	2e06      	cmp	r6, #6
 8009ab8:	d128      	bne.n	8009b0c <_strtod_l+0xbc>
 8009aba:	3501      	adds	r5, #1
 8009abc:	2300      	movs	r3, #0
 8009abe:	9519      	str	r5, [sp, #100]	@ 0x64
 8009ac0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ac2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f040 858e 	bne.w	800a5e6 <_strtod_l+0xb96>
 8009aca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009acc:	b1cb      	cbz	r3, 8009b02 <_strtod_l+0xb2>
 8009ace:	4652      	mov	r2, sl
 8009ad0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009ad4:	ec43 2b10 	vmov	d0, r2, r3
 8009ad8:	b01f      	add	sp, #124	@ 0x7c
 8009ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ade:	2920      	cmp	r1, #32
 8009ae0:	d1ce      	bne.n	8009a80 <_strtod_l+0x30>
 8009ae2:	3201      	adds	r2, #1
 8009ae4:	e7c1      	b.n	8009a6a <_strtod_l+0x1a>
 8009ae6:	292d      	cmp	r1, #45	@ 0x2d
 8009ae8:	d1ca      	bne.n	8009a80 <_strtod_l+0x30>
 8009aea:	2101      	movs	r1, #1
 8009aec:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009aee:	1c51      	adds	r1, r2, #1
 8009af0:	9119      	str	r1, [sp, #100]	@ 0x64
 8009af2:	7852      	ldrb	r2, [r2, #1]
 8009af4:	2a00      	cmp	r2, #0
 8009af6:	d1c5      	bne.n	8009a84 <_strtod_l+0x34>
 8009af8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009afa:	9419      	str	r4, [sp, #100]	@ 0x64
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f040 8570 	bne.w	800a5e2 <_strtod_l+0xb92>
 8009b02:	4652      	mov	r2, sl
 8009b04:	465b      	mov	r3, fp
 8009b06:	e7e5      	b.n	8009ad4 <_strtod_l+0x84>
 8009b08:	2100      	movs	r1, #0
 8009b0a:	e7ef      	b.n	8009aec <_strtod_l+0x9c>
 8009b0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b0e:	b13a      	cbz	r2, 8009b20 <_strtod_l+0xd0>
 8009b10:	2135      	movs	r1, #53	@ 0x35
 8009b12:	a81c      	add	r0, sp, #112	@ 0x70
 8009b14:	f003 fdda 	bl	800d6cc <__copybits>
 8009b18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b1a:	9805      	ldr	r0, [sp, #20]
 8009b1c:	f003 f9a8 	bl	800ce70 <_Bfree>
 8009b20:	3e01      	subs	r6, #1
 8009b22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009b24:	2e04      	cmp	r6, #4
 8009b26:	d806      	bhi.n	8009b36 <_strtod_l+0xe6>
 8009b28:	e8df f006 	tbb	[pc, r6]
 8009b2c:	201d0314 	.word	0x201d0314
 8009b30:	14          	.byte	0x14
 8009b31:	00          	.byte	0x00
 8009b32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009b36:	05e1      	lsls	r1, r4, #23
 8009b38:	bf48      	it	mi
 8009b3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009b3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b42:	0d1b      	lsrs	r3, r3, #20
 8009b44:	051b      	lsls	r3, r3, #20
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1bb      	bne.n	8009ac2 <_strtod_l+0x72>
 8009b4a:	f001 fe4f 	bl	800b7ec <__errno>
 8009b4e:	2322      	movs	r3, #34	@ 0x22
 8009b50:	6003      	str	r3, [r0, #0]
 8009b52:	e7b6      	b.n	8009ac2 <_strtod_l+0x72>
 8009b54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009b58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009b5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009b60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009b64:	e7e7      	b.n	8009b36 <_strtod_l+0xe6>
 8009b66:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009ce4 <_strtod_l+0x294>
 8009b6a:	e7e4      	b.n	8009b36 <_strtod_l+0xe6>
 8009b6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009b70:	f04f 3aff 	mov.w	sl, #4294967295
 8009b74:	e7df      	b.n	8009b36 <_strtod_l+0xe6>
 8009b76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b78:	1c5a      	adds	r2, r3, #1
 8009b7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b7c:	785b      	ldrb	r3, [r3, #1]
 8009b7e:	2b30      	cmp	r3, #48	@ 0x30
 8009b80:	d0f9      	beq.n	8009b76 <_strtod_l+0x126>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d09d      	beq.n	8009ac2 <_strtod_l+0x72>
 8009b86:	2301      	movs	r3, #1
 8009b88:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b8e:	2300      	movs	r3, #0
 8009b90:	9308      	str	r3, [sp, #32]
 8009b92:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b94:	461f      	mov	r7, r3
 8009b96:	220a      	movs	r2, #10
 8009b98:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009b9a:	7805      	ldrb	r5, [r0, #0]
 8009b9c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009ba0:	b2d9      	uxtb	r1, r3
 8009ba2:	2909      	cmp	r1, #9
 8009ba4:	d928      	bls.n	8009bf8 <_strtod_l+0x1a8>
 8009ba6:	494e      	ldr	r1, [pc, #312]	@ (8009ce0 <_strtod_l+0x290>)
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f001 fd66 	bl	800b67a <strncmp>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d032      	beq.n	8009c18 <_strtod_l+0x1c8>
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	462a      	mov	r2, r5
 8009bb6:	4681      	mov	r9, r0
 8009bb8:	463d      	mov	r5, r7
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2a65      	cmp	r2, #101	@ 0x65
 8009bbe:	d001      	beq.n	8009bc4 <_strtod_l+0x174>
 8009bc0:	2a45      	cmp	r2, #69	@ 0x45
 8009bc2:	d114      	bne.n	8009bee <_strtod_l+0x19e>
 8009bc4:	b91d      	cbnz	r5, 8009bce <_strtod_l+0x17e>
 8009bc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bc8:	4302      	orrs	r2, r0
 8009bca:	d095      	beq.n	8009af8 <_strtod_l+0xa8>
 8009bcc:	2500      	movs	r5, #0
 8009bce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009bd0:	1c62      	adds	r2, r4, #1
 8009bd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bd4:	7862      	ldrb	r2, [r4, #1]
 8009bd6:	2a2b      	cmp	r2, #43	@ 0x2b
 8009bd8:	d077      	beq.n	8009cca <_strtod_l+0x27a>
 8009bda:	2a2d      	cmp	r2, #45	@ 0x2d
 8009bdc:	d07b      	beq.n	8009cd6 <_strtod_l+0x286>
 8009bde:	f04f 0c00 	mov.w	ip, #0
 8009be2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009be6:	2909      	cmp	r1, #9
 8009be8:	f240 8082 	bls.w	8009cf0 <_strtod_l+0x2a0>
 8009bec:	9419      	str	r4, [sp, #100]	@ 0x64
 8009bee:	f04f 0800 	mov.w	r8, #0
 8009bf2:	e0a2      	b.n	8009d3a <_strtod_l+0x2ea>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	e7c7      	b.n	8009b88 <_strtod_l+0x138>
 8009bf8:	2f08      	cmp	r7, #8
 8009bfa:	bfd5      	itete	le
 8009bfc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009bfe:	9908      	ldrgt	r1, [sp, #32]
 8009c00:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c04:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009c08:	f100 0001 	add.w	r0, r0, #1
 8009c0c:	bfd4      	ite	le
 8009c0e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009c10:	9308      	strgt	r3, [sp, #32]
 8009c12:	3701      	adds	r7, #1
 8009c14:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c16:	e7bf      	b.n	8009b98 <_strtod_l+0x148>
 8009c18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c1e:	785a      	ldrb	r2, [r3, #1]
 8009c20:	b37f      	cbz	r7, 8009c82 <_strtod_l+0x232>
 8009c22:	4681      	mov	r9, r0
 8009c24:	463d      	mov	r5, r7
 8009c26:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009c2a:	2b09      	cmp	r3, #9
 8009c2c:	d912      	bls.n	8009c54 <_strtod_l+0x204>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e7c4      	b.n	8009bbc <_strtod_l+0x16c>
 8009c32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c38:	785a      	ldrb	r2, [r3, #1]
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	2a30      	cmp	r2, #48	@ 0x30
 8009c3e:	d0f8      	beq.n	8009c32 <_strtod_l+0x1e2>
 8009c40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009c44:	2b08      	cmp	r3, #8
 8009c46:	f200 84d3 	bhi.w	800a5f0 <_strtod_l+0xba0>
 8009c4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c4e:	4681      	mov	r9, r0
 8009c50:	2000      	movs	r0, #0
 8009c52:	4605      	mov	r5, r0
 8009c54:	3a30      	subs	r2, #48	@ 0x30
 8009c56:	f100 0301 	add.w	r3, r0, #1
 8009c5a:	d02a      	beq.n	8009cb2 <_strtod_l+0x262>
 8009c5c:	4499      	add	r9, r3
 8009c5e:	eb00 0c05 	add.w	ip, r0, r5
 8009c62:	462b      	mov	r3, r5
 8009c64:	210a      	movs	r1, #10
 8009c66:	4563      	cmp	r3, ip
 8009c68:	d10d      	bne.n	8009c86 <_strtod_l+0x236>
 8009c6a:	1c69      	adds	r1, r5, #1
 8009c6c:	4401      	add	r1, r0
 8009c6e:	4428      	add	r0, r5
 8009c70:	2808      	cmp	r0, #8
 8009c72:	dc16      	bgt.n	8009ca2 <_strtod_l+0x252>
 8009c74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c76:	230a      	movs	r3, #10
 8009c78:	fb03 2300 	mla	r3, r3, r0, r2
 8009c7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c7e:	2300      	movs	r3, #0
 8009c80:	e018      	b.n	8009cb4 <_strtod_l+0x264>
 8009c82:	4638      	mov	r0, r7
 8009c84:	e7da      	b.n	8009c3c <_strtod_l+0x1ec>
 8009c86:	2b08      	cmp	r3, #8
 8009c88:	f103 0301 	add.w	r3, r3, #1
 8009c8c:	dc03      	bgt.n	8009c96 <_strtod_l+0x246>
 8009c8e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009c90:	434e      	muls	r6, r1
 8009c92:	960a      	str	r6, [sp, #40]	@ 0x28
 8009c94:	e7e7      	b.n	8009c66 <_strtod_l+0x216>
 8009c96:	2b10      	cmp	r3, #16
 8009c98:	bfde      	ittt	le
 8009c9a:	9e08      	ldrle	r6, [sp, #32]
 8009c9c:	434e      	mulle	r6, r1
 8009c9e:	9608      	strle	r6, [sp, #32]
 8009ca0:	e7e1      	b.n	8009c66 <_strtod_l+0x216>
 8009ca2:	280f      	cmp	r0, #15
 8009ca4:	dceb      	bgt.n	8009c7e <_strtod_l+0x22e>
 8009ca6:	9808      	ldr	r0, [sp, #32]
 8009ca8:	230a      	movs	r3, #10
 8009caa:	fb03 2300 	mla	r3, r3, r0, r2
 8009cae:	9308      	str	r3, [sp, #32]
 8009cb0:	e7e5      	b.n	8009c7e <_strtod_l+0x22e>
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009cb6:	1c50      	adds	r0, r2, #1
 8009cb8:	9019      	str	r0, [sp, #100]	@ 0x64
 8009cba:	7852      	ldrb	r2, [r2, #1]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	460d      	mov	r5, r1
 8009cc0:	e7b1      	b.n	8009c26 <_strtod_l+0x1d6>
 8009cc2:	f04f 0900 	mov.w	r9, #0
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e77d      	b.n	8009bc6 <_strtod_l+0x176>
 8009cca:	f04f 0c00 	mov.w	ip, #0
 8009cce:	1ca2      	adds	r2, r4, #2
 8009cd0:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cd2:	78a2      	ldrb	r2, [r4, #2]
 8009cd4:	e785      	b.n	8009be2 <_strtod_l+0x192>
 8009cd6:	f04f 0c01 	mov.w	ip, #1
 8009cda:	e7f8      	b.n	8009cce <_strtod_l+0x27e>
 8009cdc:	08010340 	.word	0x08010340
 8009ce0:	08010328 	.word	0x08010328
 8009ce4:	7ff00000 	.word	0x7ff00000
 8009ce8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009cea:	1c51      	adds	r1, r2, #1
 8009cec:	9119      	str	r1, [sp, #100]	@ 0x64
 8009cee:	7852      	ldrb	r2, [r2, #1]
 8009cf0:	2a30      	cmp	r2, #48	@ 0x30
 8009cf2:	d0f9      	beq.n	8009ce8 <_strtod_l+0x298>
 8009cf4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009cf8:	2908      	cmp	r1, #8
 8009cfa:	f63f af78 	bhi.w	8009bee <_strtod_l+0x19e>
 8009cfe:	3a30      	subs	r2, #48	@ 0x30
 8009d00:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d04:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009d06:	f04f 080a 	mov.w	r8, #10
 8009d0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d0c:	1c56      	adds	r6, r2, #1
 8009d0e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009d10:	7852      	ldrb	r2, [r2, #1]
 8009d12:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009d16:	f1be 0f09 	cmp.w	lr, #9
 8009d1a:	d939      	bls.n	8009d90 <_strtod_l+0x340>
 8009d1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009d1e:	1a76      	subs	r6, r6, r1
 8009d20:	2e08      	cmp	r6, #8
 8009d22:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009d26:	dc03      	bgt.n	8009d30 <_strtod_l+0x2e0>
 8009d28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009d2a:	4588      	cmp	r8, r1
 8009d2c:	bfa8      	it	ge
 8009d2e:	4688      	movge	r8, r1
 8009d30:	f1bc 0f00 	cmp.w	ip, #0
 8009d34:	d001      	beq.n	8009d3a <_strtod_l+0x2ea>
 8009d36:	f1c8 0800 	rsb	r8, r8, #0
 8009d3a:	2d00      	cmp	r5, #0
 8009d3c:	d14e      	bne.n	8009ddc <_strtod_l+0x38c>
 8009d3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d40:	4308      	orrs	r0, r1
 8009d42:	f47f aebe 	bne.w	8009ac2 <_strtod_l+0x72>
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f47f aed6 	bne.w	8009af8 <_strtod_l+0xa8>
 8009d4c:	2a69      	cmp	r2, #105	@ 0x69
 8009d4e:	d028      	beq.n	8009da2 <_strtod_l+0x352>
 8009d50:	dc25      	bgt.n	8009d9e <_strtod_l+0x34e>
 8009d52:	2a49      	cmp	r2, #73	@ 0x49
 8009d54:	d025      	beq.n	8009da2 <_strtod_l+0x352>
 8009d56:	2a4e      	cmp	r2, #78	@ 0x4e
 8009d58:	f47f aece 	bne.w	8009af8 <_strtod_l+0xa8>
 8009d5c:	499b      	ldr	r1, [pc, #620]	@ (8009fcc <_strtod_l+0x57c>)
 8009d5e:	a819      	add	r0, sp, #100	@ 0x64
 8009d60:	f002 fece 	bl	800cb00 <__match>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	f43f aec7 	beq.w	8009af8 <_strtod_l+0xa8>
 8009d6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	2b28      	cmp	r3, #40	@ 0x28
 8009d70:	d12e      	bne.n	8009dd0 <_strtod_l+0x380>
 8009d72:	4997      	ldr	r1, [pc, #604]	@ (8009fd0 <_strtod_l+0x580>)
 8009d74:	aa1c      	add	r2, sp, #112	@ 0x70
 8009d76:	a819      	add	r0, sp, #100	@ 0x64
 8009d78:	f002 fed6 	bl	800cb28 <__hexnan>
 8009d7c:	2805      	cmp	r0, #5
 8009d7e:	d127      	bne.n	8009dd0 <_strtod_l+0x380>
 8009d80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d82:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009d86:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009d8a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009d8e:	e698      	b.n	8009ac2 <_strtod_l+0x72>
 8009d90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009d92:	fb08 2101 	mla	r1, r8, r1, r2
 8009d96:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009d9a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d9c:	e7b5      	b.n	8009d0a <_strtod_l+0x2ba>
 8009d9e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009da0:	e7da      	b.n	8009d58 <_strtod_l+0x308>
 8009da2:	498c      	ldr	r1, [pc, #560]	@ (8009fd4 <_strtod_l+0x584>)
 8009da4:	a819      	add	r0, sp, #100	@ 0x64
 8009da6:	f002 feab 	bl	800cb00 <__match>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	f43f aea4 	beq.w	8009af8 <_strtod_l+0xa8>
 8009db0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009db2:	4989      	ldr	r1, [pc, #548]	@ (8009fd8 <_strtod_l+0x588>)
 8009db4:	3b01      	subs	r3, #1
 8009db6:	a819      	add	r0, sp, #100	@ 0x64
 8009db8:	9319      	str	r3, [sp, #100]	@ 0x64
 8009dba:	f002 fea1 	bl	800cb00 <__match>
 8009dbe:	b910      	cbnz	r0, 8009dc6 <_strtod_l+0x376>
 8009dc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	9319      	str	r3, [sp, #100]	@ 0x64
 8009dc6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009fe8 <_strtod_l+0x598>
 8009dca:	f04f 0a00 	mov.w	sl, #0
 8009dce:	e678      	b.n	8009ac2 <_strtod_l+0x72>
 8009dd0:	4882      	ldr	r0, [pc, #520]	@ (8009fdc <_strtod_l+0x58c>)
 8009dd2:	f001 fd49 	bl	800b868 <nan>
 8009dd6:	ec5b ab10 	vmov	sl, fp, d0
 8009dda:	e672      	b.n	8009ac2 <_strtod_l+0x72>
 8009ddc:	eba8 0309 	sub.w	r3, r8, r9
 8009de0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009de2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009de4:	2f00      	cmp	r7, #0
 8009de6:	bf08      	it	eq
 8009de8:	462f      	moveq	r7, r5
 8009dea:	2d10      	cmp	r5, #16
 8009dec:	462c      	mov	r4, r5
 8009dee:	bfa8      	it	ge
 8009df0:	2410      	movge	r4, #16
 8009df2:	f7f6 fb87 	bl	8000504 <__aeabi_ui2d>
 8009df6:	2d09      	cmp	r5, #9
 8009df8:	4682      	mov	sl, r0
 8009dfa:	468b      	mov	fp, r1
 8009dfc:	dc13      	bgt.n	8009e26 <_strtod_l+0x3d6>
 8009dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f43f ae5e 	beq.w	8009ac2 <_strtod_l+0x72>
 8009e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e08:	dd78      	ble.n	8009efc <_strtod_l+0x4ac>
 8009e0a:	2b16      	cmp	r3, #22
 8009e0c:	dc5f      	bgt.n	8009ece <_strtod_l+0x47e>
 8009e0e:	4974      	ldr	r1, [pc, #464]	@ (8009fe0 <_strtod_l+0x590>)
 8009e10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e18:	4652      	mov	r2, sl
 8009e1a:	465b      	mov	r3, fp
 8009e1c:	f7f6 fbec 	bl	80005f8 <__aeabi_dmul>
 8009e20:	4682      	mov	sl, r0
 8009e22:	468b      	mov	fp, r1
 8009e24:	e64d      	b.n	8009ac2 <_strtod_l+0x72>
 8009e26:	4b6e      	ldr	r3, [pc, #440]	@ (8009fe0 <_strtod_l+0x590>)
 8009e28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009e30:	f7f6 fbe2 	bl	80005f8 <__aeabi_dmul>
 8009e34:	4682      	mov	sl, r0
 8009e36:	9808      	ldr	r0, [sp, #32]
 8009e38:	468b      	mov	fp, r1
 8009e3a:	f7f6 fb63 	bl	8000504 <__aeabi_ui2d>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	4650      	mov	r0, sl
 8009e44:	4659      	mov	r1, fp
 8009e46:	f7f6 fa21 	bl	800028c <__adddf3>
 8009e4a:	2d0f      	cmp	r5, #15
 8009e4c:	4682      	mov	sl, r0
 8009e4e:	468b      	mov	fp, r1
 8009e50:	ddd5      	ble.n	8009dfe <_strtod_l+0x3ae>
 8009e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e54:	1b2c      	subs	r4, r5, r4
 8009e56:	441c      	add	r4, r3
 8009e58:	2c00      	cmp	r4, #0
 8009e5a:	f340 8096 	ble.w	8009f8a <_strtod_l+0x53a>
 8009e5e:	f014 030f 	ands.w	r3, r4, #15
 8009e62:	d00a      	beq.n	8009e7a <_strtod_l+0x42a>
 8009e64:	495e      	ldr	r1, [pc, #376]	@ (8009fe0 <_strtod_l+0x590>)
 8009e66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e6a:	4652      	mov	r2, sl
 8009e6c:	465b      	mov	r3, fp
 8009e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e72:	f7f6 fbc1 	bl	80005f8 <__aeabi_dmul>
 8009e76:	4682      	mov	sl, r0
 8009e78:	468b      	mov	fp, r1
 8009e7a:	f034 040f 	bics.w	r4, r4, #15
 8009e7e:	d073      	beq.n	8009f68 <_strtod_l+0x518>
 8009e80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009e84:	dd48      	ble.n	8009f18 <_strtod_l+0x4c8>
 8009e86:	2400      	movs	r4, #0
 8009e88:	46a0      	mov	r8, r4
 8009e8a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e8c:	46a1      	mov	r9, r4
 8009e8e:	9a05      	ldr	r2, [sp, #20]
 8009e90:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009fe8 <_strtod_l+0x598>
 8009e94:	2322      	movs	r3, #34	@ 0x22
 8009e96:	6013      	str	r3, [r2, #0]
 8009e98:	f04f 0a00 	mov.w	sl, #0
 8009e9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f43f ae0f 	beq.w	8009ac2 <_strtod_l+0x72>
 8009ea4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ea6:	9805      	ldr	r0, [sp, #20]
 8009ea8:	f002 ffe2 	bl	800ce70 <_Bfree>
 8009eac:	9805      	ldr	r0, [sp, #20]
 8009eae:	4649      	mov	r1, r9
 8009eb0:	f002 ffde 	bl	800ce70 <_Bfree>
 8009eb4:	9805      	ldr	r0, [sp, #20]
 8009eb6:	4641      	mov	r1, r8
 8009eb8:	f002 ffda 	bl	800ce70 <_Bfree>
 8009ebc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ebe:	9805      	ldr	r0, [sp, #20]
 8009ec0:	f002 ffd6 	bl	800ce70 <_Bfree>
 8009ec4:	9805      	ldr	r0, [sp, #20]
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	f002 ffd2 	bl	800ce70 <_Bfree>
 8009ecc:	e5f9      	b.n	8009ac2 <_strtod_l+0x72>
 8009ece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ed0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	dbbc      	blt.n	8009e52 <_strtod_l+0x402>
 8009ed8:	4c41      	ldr	r4, [pc, #260]	@ (8009fe0 <_strtod_l+0x590>)
 8009eda:	f1c5 050f 	rsb	r5, r5, #15
 8009ede:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009ee2:	4652      	mov	r2, sl
 8009ee4:	465b      	mov	r3, fp
 8009ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eea:	f7f6 fb85 	bl	80005f8 <__aeabi_dmul>
 8009eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ef0:	1b5d      	subs	r5, r3, r5
 8009ef2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009ef6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009efa:	e78f      	b.n	8009e1c <_strtod_l+0x3cc>
 8009efc:	3316      	adds	r3, #22
 8009efe:	dba8      	blt.n	8009e52 <_strtod_l+0x402>
 8009f00:	4b37      	ldr	r3, [pc, #220]	@ (8009fe0 <_strtod_l+0x590>)
 8009f02:	eba9 0808 	sub.w	r8, r9, r8
 8009f06:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009f0a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009f0e:	4650      	mov	r0, sl
 8009f10:	4659      	mov	r1, fp
 8009f12:	f7f6 fc9b 	bl	800084c <__aeabi_ddiv>
 8009f16:	e783      	b.n	8009e20 <_strtod_l+0x3d0>
 8009f18:	4b32      	ldr	r3, [pc, #200]	@ (8009fe4 <_strtod_l+0x594>)
 8009f1a:	9308      	str	r3, [sp, #32]
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	1124      	asrs	r4, r4, #4
 8009f20:	4650      	mov	r0, sl
 8009f22:	4659      	mov	r1, fp
 8009f24:	461e      	mov	r6, r3
 8009f26:	2c01      	cmp	r4, #1
 8009f28:	dc21      	bgt.n	8009f6e <_strtod_l+0x51e>
 8009f2a:	b10b      	cbz	r3, 8009f30 <_strtod_l+0x4e0>
 8009f2c:	4682      	mov	sl, r0
 8009f2e:	468b      	mov	fp, r1
 8009f30:	492c      	ldr	r1, [pc, #176]	@ (8009fe4 <_strtod_l+0x594>)
 8009f32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009f36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009f3a:	4652      	mov	r2, sl
 8009f3c:	465b      	mov	r3, fp
 8009f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f42:	f7f6 fb59 	bl	80005f8 <__aeabi_dmul>
 8009f46:	4b28      	ldr	r3, [pc, #160]	@ (8009fe8 <_strtod_l+0x598>)
 8009f48:	460a      	mov	r2, r1
 8009f4a:	400b      	ands	r3, r1
 8009f4c:	4927      	ldr	r1, [pc, #156]	@ (8009fec <_strtod_l+0x59c>)
 8009f4e:	428b      	cmp	r3, r1
 8009f50:	4682      	mov	sl, r0
 8009f52:	d898      	bhi.n	8009e86 <_strtod_l+0x436>
 8009f54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009f58:	428b      	cmp	r3, r1
 8009f5a:	bf86      	itte	hi
 8009f5c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009ff0 <_strtod_l+0x5a0>
 8009f60:	f04f 3aff 	movhi.w	sl, #4294967295
 8009f64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009f68:	2300      	movs	r3, #0
 8009f6a:	9308      	str	r3, [sp, #32]
 8009f6c:	e07a      	b.n	800a064 <_strtod_l+0x614>
 8009f6e:	07e2      	lsls	r2, r4, #31
 8009f70:	d505      	bpl.n	8009f7e <_strtod_l+0x52e>
 8009f72:	9b08      	ldr	r3, [sp, #32]
 8009f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f78:	f7f6 fb3e 	bl	80005f8 <__aeabi_dmul>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	9a08      	ldr	r2, [sp, #32]
 8009f80:	3208      	adds	r2, #8
 8009f82:	3601      	adds	r6, #1
 8009f84:	1064      	asrs	r4, r4, #1
 8009f86:	9208      	str	r2, [sp, #32]
 8009f88:	e7cd      	b.n	8009f26 <_strtod_l+0x4d6>
 8009f8a:	d0ed      	beq.n	8009f68 <_strtod_l+0x518>
 8009f8c:	4264      	negs	r4, r4
 8009f8e:	f014 020f 	ands.w	r2, r4, #15
 8009f92:	d00a      	beq.n	8009faa <_strtod_l+0x55a>
 8009f94:	4b12      	ldr	r3, [pc, #72]	@ (8009fe0 <_strtod_l+0x590>)
 8009f96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	4659      	mov	r1, fp
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	f7f6 fc53 	bl	800084c <__aeabi_ddiv>
 8009fa6:	4682      	mov	sl, r0
 8009fa8:	468b      	mov	fp, r1
 8009faa:	1124      	asrs	r4, r4, #4
 8009fac:	d0dc      	beq.n	8009f68 <_strtod_l+0x518>
 8009fae:	2c1f      	cmp	r4, #31
 8009fb0:	dd20      	ble.n	8009ff4 <_strtod_l+0x5a4>
 8009fb2:	2400      	movs	r4, #0
 8009fb4:	46a0      	mov	r8, r4
 8009fb6:	940a      	str	r4, [sp, #40]	@ 0x28
 8009fb8:	46a1      	mov	r9, r4
 8009fba:	9a05      	ldr	r2, [sp, #20]
 8009fbc:	2322      	movs	r3, #34	@ 0x22
 8009fbe:	f04f 0a00 	mov.w	sl, #0
 8009fc2:	f04f 0b00 	mov.w	fp, #0
 8009fc6:	6013      	str	r3, [r2, #0]
 8009fc8:	e768      	b.n	8009e9c <_strtod_l+0x44c>
 8009fca:	bf00      	nop
 8009fcc:	0801048e 	.word	0x0801048e
 8009fd0:	0801032c 	.word	0x0801032c
 8009fd4:	08010486 	.word	0x08010486
 8009fd8:	08010572 	.word	0x08010572
 8009fdc:	0801056e 	.word	0x0801056e
 8009fe0:	080106d8 	.word	0x080106d8
 8009fe4:	080106b0 	.word	0x080106b0
 8009fe8:	7ff00000 	.word	0x7ff00000
 8009fec:	7ca00000 	.word	0x7ca00000
 8009ff0:	7fefffff 	.word	0x7fefffff
 8009ff4:	f014 0310 	ands.w	r3, r4, #16
 8009ff8:	bf18      	it	ne
 8009ffa:	236a      	movne	r3, #106	@ 0x6a
 8009ffc:	4ea9      	ldr	r6, [pc, #676]	@ (800a2a4 <_strtod_l+0x854>)
 8009ffe:	9308      	str	r3, [sp, #32]
 800a000:	4650      	mov	r0, sl
 800a002:	4659      	mov	r1, fp
 800a004:	2300      	movs	r3, #0
 800a006:	07e2      	lsls	r2, r4, #31
 800a008:	d504      	bpl.n	800a014 <_strtod_l+0x5c4>
 800a00a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a00e:	f7f6 faf3 	bl	80005f8 <__aeabi_dmul>
 800a012:	2301      	movs	r3, #1
 800a014:	1064      	asrs	r4, r4, #1
 800a016:	f106 0608 	add.w	r6, r6, #8
 800a01a:	d1f4      	bne.n	800a006 <_strtod_l+0x5b6>
 800a01c:	b10b      	cbz	r3, 800a022 <_strtod_l+0x5d2>
 800a01e:	4682      	mov	sl, r0
 800a020:	468b      	mov	fp, r1
 800a022:	9b08      	ldr	r3, [sp, #32]
 800a024:	b1b3      	cbz	r3, 800a054 <_strtod_l+0x604>
 800a026:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a02a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a02e:	2b00      	cmp	r3, #0
 800a030:	4659      	mov	r1, fp
 800a032:	dd0f      	ble.n	800a054 <_strtod_l+0x604>
 800a034:	2b1f      	cmp	r3, #31
 800a036:	dd55      	ble.n	800a0e4 <_strtod_l+0x694>
 800a038:	2b34      	cmp	r3, #52	@ 0x34
 800a03a:	bfde      	ittt	le
 800a03c:	f04f 33ff 	movle.w	r3, #4294967295
 800a040:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a044:	4093      	lslle	r3, r2
 800a046:	f04f 0a00 	mov.w	sl, #0
 800a04a:	bfcc      	ite	gt
 800a04c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a050:	ea03 0b01 	andle.w	fp, r3, r1
 800a054:	2200      	movs	r2, #0
 800a056:	2300      	movs	r3, #0
 800a058:	4650      	mov	r0, sl
 800a05a:	4659      	mov	r1, fp
 800a05c:	f7f6 fd34 	bl	8000ac8 <__aeabi_dcmpeq>
 800a060:	2800      	cmp	r0, #0
 800a062:	d1a6      	bne.n	8009fb2 <_strtod_l+0x562>
 800a064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a06a:	9805      	ldr	r0, [sp, #20]
 800a06c:	462b      	mov	r3, r5
 800a06e:	463a      	mov	r2, r7
 800a070:	f002 ff66 	bl	800cf40 <__s2b>
 800a074:	900a      	str	r0, [sp, #40]	@ 0x28
 800a076:	2800      	cmp	r0, #0
 800a078:	f43f af05 	beq.w	8009e86 <_strtod_l+0x436>
 800a07c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a07e:	2a00      	cmp	r2, #0
 800a080:	eba9 0308 	sub.w	r3, r9, r8
 800a084:	bfa8      	it	ge
 800a086:	2300      	movge	r3, #0
 800a088:	9312      	str	r3, [sp, #72]	@ 0x48
 800a08a:	2400      	movs	r4, #0
 800a08c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a090:	9316      	str	r3, [sp, #88]	@ 0x58
 800a092:	46a0      	mov	r8, r4
 800a094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a096:	9805      	ldr	r0, [sp, #20]
 800a098:	6859      	ldr	r1, [r3, #4]
 800a09a:	f002 fea9 	bl	800cdf0 <_Balloc>
 800a09e:	4681      	mov	r9, r0
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	f43f aef4 	beq.w	8009e8e <_strtod_l+0x43e>
 800a0a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0a8:	691a      	ldr	r2, [r3, #16]
 800a0aa:	3202      	adds	r2, #2
 800a0ac:	f103 010c 	add.w	r1, r3, #12
 800a0b0:	0092      	lsls	r2, r2, #2
 800a0b2:	300c      	adds	r0, #12
 800a0b4:	f001 fbc7 	bl	800b846 <memcpy>
 800a0b8:	ec4b ab10 	vmov	d0, sl, fp
 800a0bc:	9805      	ldr	r0, [sp, #20]
 800a0be:	aa1c      	add	r2, sp, #112	@ 0x70
 800a0c0:	a91b      	add	r1, sp, #108	@ 0x6c
 800a0c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a0c6:	f003 fa77 	bl	800d5b8 <__d2b>
 800a0ca:	901a      	str	r0, [sp, #104]	@ 0x68
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	f43f aede 	beq.w	8009e8e <_strtod_l+0x43e>
 800a0d2:	9805      	ldr	r0, [sp, #20]
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	f002 ffc9 	bl	800d06c <__i2b>
 800a0da:	4680      	mov	r8, r0
 800a0dc:	b948      	cbnz	r0, 800a0f2 <_strtod_l+0x6a2>
 800a0de:	f04f 0800 	mov.w	r8, #0
 800a0e2:	e6d4      	b.n	8009e8e <_strtod_l+0x43e>
 800a0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ec:	ea03 0a0a 	and.w	sl, r3, sl
 800a0f0:	e7b0      	b.n	800a054 <_strtod_l+0x604>
 800a0f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a0f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a0f6:	2d00      	cmp	r5, #0
 800a0f8:	bfab      	itete	ge
 800a0fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a0fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a0fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a100:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a102:	bfac      	ite	ge
 800a104:	18ef      	addge	r7, r5, r3
 800a106:	1b5e      	sublt	r6, r3, r5
 800a108:	9b08      	ldr	r3, [sp, #32]
 800a10a:	1aed      	subs	r5, r5, r3
 800a10c:	4415      	add	r5, r2
 800a10e:	4b66      	ldr	r3, [pc, #408]	@ (800a2a8 <_strtod_l+0x858>)
 800a110:	3d01      	subs	r5, #1
 800a112:	429d      	cmp	r5, r3
 800a114:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a118:	da50      	bge.n	800a1bc <_strtod_l+0x76c>
 800a11a:	1b5b      	subs	r3, r3, r5
 800a11c:	2b1f      	cmp	r3, #31
 800a11e:	eba2 0203 	sub.w	r2, r2, r3
 800a122:	f04f 0101 	mov.w	r1, #1
 800a126:	dc3d      	bgt.n	800a1a4 <_strtod_l+0x754>
 800a128:	fa01 f303 	lsl.w	r3, r1, r3
 800a12c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a12e:	2300      	movs	r3, #0
 800a130:	9310      	str	r3, [sp, #64]	@ 0x40
 800a132:	18bd      	adds	r5, r7, r2
 800a134:	9b08      	ldr	r3, [sp, #32]
 800a136:	42af      	cmp	r7, r5
 800a138:	4416      	add	r6, r2
 800a13a:	441e      	add	r6, r3
 800a13c:	463b      	mov	r3, r7
 800a13e:	bfa8      	it	ge
 800a140:	462b      	movge	r3, r5
 800a142:	42b3      	cmp	r3, r6
 800a144:	bfa8      	it	ge
 800a146:	4633      	movge	r3, r6
 800a148:	2b00      	cmp	r3, #0
 800a14a:	bfc2      	ittt	gt
 800a14c:	1aed      	subgt	r5, r5, r3
 800a14e:	1af6      	subgt	r6, r6, r3
 800a150:	1aff      	subgt	r7, r7, r3
 800a152:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a154:	2b00      	cmp	r3, #0
 800a156:	dd16      	ble.n	800a186 <_strtod_l+0x736>
 800a158:	4641      	mov	r1, r8
 800a15a:	9805      	ldr	r0, [sp, #20]
 800a15c:	461a      	mov	r2, r3
 800a15e:	f003 f845 	bl	800d1ec <__pow5mult>
 800a162:	4680      	mov	r8, r0
 800a164:	2800      	cmp	r0, #0
 800a166:	d0ba      	beq.n	800a0de <_strtod_l+0x68e>
 800a168:	4601      	mov	r1, r0
 800a16a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a16c:	9805      	ldr	r0, [sp, #20]
 800a16e:	f002 ff93 	bl	800d098 <__multiply>
 800a172:	900e      	str	r0, [sp, #56]	@ 0x38
 800a174:	2800      	cmp	r0, #0
 800a176:	f43f ae8a 	beq.w	8009e8e <_strtod_l+0x43e>
 800a17a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a17c:	9805      	ldr	r0, [sp, #20]
 800a17e:	f002 fe77 	bl	800ce70 <_Bfree>
 800a182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a184:	931a      	str	r3, [sp, #104]	@ 0x68
 800a186:	2d00      	cmp	r5, #0
 800a188:	dc1d      	bgt.n	800a1c6 <_strtod_l+0x776>
 800a18a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	dd23      	ble.n	800a1d8 <_strtod_l+0x788>
 800a190:	4649      	mov	r1, r9
 800a192:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a194:	9805      	ldr	r0, [sp, #20]
 800a196:	f003 f829 	bl	800d1ec <__pow5mult>
 800a19a:	4681      	mov	r9, r0
 800a19c:	b9e0      	cbnz	r0, 800a1d8 <_strtod_l+0x788>
 800a19e:	f04f 0900 	mov.w	r9, #0
 800a1a2:	e674      	b.n	8009e8e <_strtod_l+0x43e>
 800a1a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a1a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a1ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a1b0:	35e2      	adds	r5, #226	@ 0xe2
 800a1b2:	fa01 f305 	lsl.w	r3, r1, r5
 800a1b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a1ba:	e7ba      	b.n	800a132 <_strtod_l+0x6e2>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1c4:	e7b5      	b.n	800a132 <_strtod_l+0x6e2>
 800a1c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1c8:	9805      	ldr	r0, [sp, #20]
 800a1ca:	462a      	mov	r2, r5
 800a1cc:	f003 f868 	bl	800d2a0 <__lshift>
 800a1d0:	901a      	str	r0, [sp, #104]	@ 0x68
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d1d9      	bne.n	800a18a <_strtod_l+0x73a>
 800a1d6:	e65a      	b.n	8009e8e <_strtod_l+0x43e>
 800a1d8:	2e00      	cmp	r6, #0
 800a1da:	dd07      	ble.n	800a1ec <_strtod_l+0x79c>
 800a1dc:	4649      	mov	r1, r9
 800a1de:	9805      	ldr	r0, [sp, #20]
 800a1e0:	4632      	mov	r2, r6
 800a1e2:	f003 f85d 	bl	800d2a0 <__lshift>
 800a1e6:	4681      	mov	r9, r0
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d0d8      	beq.n	800a19e <_strtod_l+0x74e>
 800a1ec:	2f00      	cmp	r7, #0
 800a1ee:	dd08      	ble.n	800a202 <_strtod_l+0x7b2>
 800a1f0:	4641      	mov	r1, r8
 800a1f2:	9805      	ldr	r0, [sp, #20]
 800a1f4:	463a      	mov	r2, r7
 800a1f6:	f003 f853 	bl	800d2a0 <__lshift>
 800a1fa:	4680      	mov	r8, r0
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	f43f ae46 	beq.w	8009e8e <_strtod_l+0x43e>
 800a202:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a204:	9805      	ldr	r0, [sp, #20]
 800a206:	464a      	mov	r2, r9
 800a208:	f003 f8d2 	bl	800d3b0 <__mdiff>
 800a20c:	4604      	mov	r4, r0
 800a20e:	2800      	cmp	r0, #0
 800a210:	f43f ae3d 	beq.w	8009e8e <_strtod_l+0x43e>
 800a214:	68c3      	ldr	r3, [r0, #12]
 800a216:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a218:	2300      	movs	r3, #0
 800a21a:	60c3      	str	r3, [r0, #12]
 800a21c:	4641      	mov	r1, r8
 800a21e:	f003 f8ab 	bl	800d378 <__mcmp>
 800a222:	2800      	cmp	r0, #0
 800a224:	da46      	bge.n	800a2b4 <_strtod_l+0x864>
 800a226:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a228:	ea53 030a 	orrs.w	r3, r3, sl
 800a22c:	d16c      	bne.n	800a308 <_strtod_l+0x8b8>
 800a22e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a232:	2b00      	cmp	r3, #0
 800a234:	d168      	bne.n	800a308 <_strtod_l+0x8b8>
 800a236:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a23a:	0d1b      	lsrs	r3, r3, #20
 800a23c:	051b      	lsls	r3, r3, #20
 800a23e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a242:	d961      	bls.n	800a308 <_strtod_l+0x8b8>
 800a244:	6963      	ldr	r3, [r4, #20]
 800a246:	b913      	cbnz	r3, 800a24e <_strtod_l+0x7fe>
 800a248:	6923      	ldr	r3, [r4, #16]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	dd5c      	ble.n	800a308 <_strtod_l+0x8b8>
 800a24e:	4621      	mov	r1, r4
 800a250:	2201      	movs	r2, #1
 800a252:	9805      	ldr	r0, [sp, #20]
 800a254:	f003 f824 	bl	800d2a0 <__lshift>
 800a258:	4641      	mov	r1, r8
 800a25a:	4604      	mov	r4, r0
 800a25c:	f003 f88c 	bl	800d378 <__mcmp>
 800a260:	2800      	cmp	r0, #0
 800a262:	dd51      	ble.n	800a308 <_strtod_l+0x8b8>
 800a264:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a268:	9a08      	ldr	r2, [sp, #32]
 800a26a:	0d1b      	lsrs	r3, r3, #20
 800a26c:	051b      	lsls	r3, r3, #20
 800a26e:	2a00      	cmp	r2, #0
 800a270:	d06b      	beq.n	800a34a <_strtod_l+0x8fa>
 800a272:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a276:	d868      	bhi.n	800a34a <_strtod_l+0x8fa>
 800a278:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a27c:	f67f ae9d 	bls.w	8009fba <_strtod_l+0x56a>
 800a280:	4b0a      	ldr	r3, [pc, #40]	@ (800a2ac <_strtod_l+0x85c>)
 800a282:	4650      	mov	r0, sl
 800a284:	4659      	mov	r1, fp
 800a286:	2200      	movs	r2, #0
 800a288:	f7f6 f9b6 	bl	80005f8 <__aeabi_dmul>
 800a28c:	4b08      	ldr	r3, [pc, #32]	@ (800a2b0 <_strtod_l+0x860>)
 800a28e:	400b      	ands	r3, r1
 800a290:	4682      	mov	sl, r0
 800a292:	468b      	mov	fp, r1
 800a294:	2b00      	cmp	r3, #0
 800a296:	f47f ae05 	bne.w	8009ea4 <_strtod_l+0x454>
 800a29a:	9a05      	ldr	r2, [sp, #20]
 800a29c:	2322      	movs	r3, #34	@ 0x22
 800a29e:	6013      	str	r3, [r2, #0]
 800a2a0:	e600      	b.n	8009ea4 <_strtod_l+0x454>
 800a2a2:	bf00      	nop
 800a2a4:	08010358 	.word	0x08010358
 800a2a8:	fffffc02 	.word	0xfffffc02
 800a2ac:	39500000 	.word	0x39500000
 800a2b0:	7ff00000 	.word	0x7ff00000
 800a2b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a2b8:	d165      	bne.n	800a386 <_strtod_l+0x936>
 800a2ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a2bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2c0:	b35a      	cbz	r2, 800a31a <_strtod_l+0x8ca>
 800a2c2:	4a9f      	ldr	r2, [pc, #636]	@ (800a540 <_strtod_l+0xaf0>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d12b      	bne.n	800a320 <_strtod_l+0x8d0>
 800a2c8:	9b08      	ldr	r3, [sp, #32]
 800a2ca:	4651      	mov	r1, sl
 800a2cc:	b303      	cbz	r3, 800a310 <_strtod_l+0x8c0>
 800a2ce:	4b9d      	ldr	r3, [pc, #628]	@ (800a544 <_strtod_l+0xaf4>)
 800a2d0:	465a      	mov	r2, fp
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2dc:	d81b      	bhi.n	800a316 <_strtod_l+0x8c6>
 800a2de:	0d1b      	lsrs	r3, r3, #20
 800a2e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e8:	4299      	cmp	r1, r3
 800a2ea:	d119      	bne.n	800a320 <_strtod_l+0x8d0>
 800a2ec:	4b96      	ldr	r3, [pc, #600]	@ (800a548 <_strtod_l+0xaf8>)
 800a2ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d102      	bne.n	800a2fa <_strtod_l+0x8aa>
 800a2f4:	3101      	adds	r1, #1
 800a2f6:	f43f adca 	beq.w	8009e8e <_strtod_l+0x43e>
 800a2fa:	4b92      	ldr	r3, [pc, #584]	@ (800a544 <_strtod_l+0xaf4>)
 800a2fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2fe:	401a      	ands	r2, r3
 800a300:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a304:	f04f 0a00 	mov.w	sl, #0
 800a308:	9b08      	ldr	r3, [sp, #32]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1b8      	bne.n	800a280 <_strtod_l+0x830>
 800a30e:	e5c9      	b.n	8009ea4 <_strtod_l+0x454>
 800a310:	f04f 33ff 	mov.w	r3, #4294967295
 800a314:	e7e8      	b.n	800a2e8 <_strtod_l+0x898>
 800a316:	4613      	mov	r3, r2
 800a318:	e7e6      	b.n	800a2e8 <_strtod_l+0x898>
 800a31a:	ea53 030a 	orrs.w	r3, r3, sl
 800a31e:	d0a1      	beq.n	800a264 <_strtod_l+0x814>
 800a320:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a322:	b1db      	cbz	r3, 800a35c <_strtod_l+0x90c>
 800a324:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a326:	4213      	tst	r3, r2
 800a328:	d0ee      	beq.n	800a308 <_strtod_l+0x8b8>
 800a32a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a32c:	9a08      	ldr	r2, [sp, #32]
 800a32e:	4650      	mov	r0, sl
 800a330:	4659      	mov	r1, fp
 800a332:	b1bb      	cbz	r3, 800a364 <_strtod_l+0x914>
 800a334:	f7ff fb6d 	bl	8009a12 <sulp>
 800a338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a33c:	ec53 2b10 	vmov	r2, r3, d0
 800a340:	f7f5 ffa4 	bl	800028c <__adddf3>
 800a344:	4682      	mov	sl, r0
 800a346:	468b      	mov	fp, r1
 800a348:	e7de      	b.n	800a308 <_strtod_l+0x8b8>
 800a34a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a34e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a352:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a356:	f04f 3aff 	mov.w	sl, #4294967295
 800a35a:	e7d5      	b.n	800a308 <_strtod_l+0x8b8>
 800a35c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a35e:	ea13 0f0a 	tst.w	r3, sl
 800a362:	e7e1      	b.n	800a328 <_strtod_l+0x8d8>
 800a364:	f7ff fb55 	bl	8009a12 <sulp>
 800a368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a36c:	ec53 2b10 	vmov	r2, r3, d0
 800a370:	f7f5 ff8a 	bl	8000288 <__aeabi_dsub>
 800a374:	2200      	movs	r2, #0
 800a376:	2300      	movs	r3, #0
 800a378:	4682      	mov	sl, r0
 800a37a:	468b      	mov	fp, r1
 800a37c:	f7f6 fba4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a380:	2800      	cmp	r0, #0
 800a382:	d0c1      	beq.n	800a308 <_strtod_l+0x8b8>
 800a384:	e619      	b.n	8009fba <_strtod_l+0x56a>
 800a386:	4641      	mov	r1, r8
 800a388:	4620      	mov	r0, r4
 800a38a:	f003 f96d 	bl	800d668 <__ratio>
 800a38e:	ec57 6b10 	vmov	r6, r7, d0
 800a392:	2200      	movs	r2, #0
 800a394:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a398:	4630      	mov	r0, r6
 800a39a:	4639      	mov	r1, r7
 800a39c:	f7f6 fba8 	bl	8000af0 <__aeabi_dcmple>
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	d06f      	beq.n	800a484 <_strtod_l+0xa34>
 800a3a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d17a      	bne.n	800a4a0 <_strtod_l+0xa50>
 800a3aa:	f1ba 0f00 	cmp.w	sl, #0
 800a3ae:	d158      	bne.n	800a462 <_strtod_l+0xa12>
 800a3b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d15a      	bne.n	800a470 <_strtod_l+0xa20>
 800a3ba:	4b64      	ldr	r3, [pc, #400]	@ (800a54c <_strtod_l+0xafc>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	4630      	mov	r0, r6
 800a3c0:	4639      	mov	r1, r7
 800a3c2:	f7f6 fb8b 	bl	8000adc <__aeabi_dcmplt>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d159      	bne.n	800a47e <_strtod_l+0xa2e>
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	4639      	mov	r1, r7
 800a3ce:	4b60      	ldr	r3, [pc, #384]	@ (800a550 <_strtod_l+0xb00>)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f7f6 f911 	bl	80005f8 <__aeabi_dmul>
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	460f      	mov	r7, r1
 800a3da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a3de:	9606      	str	r6, [sp, #24]
 800a3e0:	9307      	str	r3, [sp, #28]
 800a3e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3e6:	4d57      	ldr	r5, [pc, #348]	@ (800a544 <_strtod_l+0xaf4>)
 800a3e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a3ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3ee:	401d      	ands	r5, r3
 800a3f0:	4b58      	ldr	r3, [pc, #352]	@ (800a554 <_strtod_l+0xb04>)
 800a3f2:	429d      	cmp	r5, r3
 800a3f4:	f040 80b2 	bne.w	800a55c <_strtod_l+0xb0c>
 800a3f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a3fe:	ec4b ab10 	vmov	d0, sl, fp
 800a402:	f003 f869 	bl	800d4d8 <__ulp>
 800a406:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a40a:	ec51 0b10 	vmov	r0, r1, d0
 800a40e:	f7f6 f8f3 	bl	80005f8 <__aeabi_dmul>
 800a412:	4652      	mov	r2, sl
 800a414:	465b      	mov	r3, fp
 800a416:	f7f5 ff39 	bl	800028c <__adddf3>
 800a41a:	460b      	mov	r3, r1
 800a41c:	4949      	ldr	r1, [pc, #292]	@ (800a544 <_strtod_l+0xaf4>)
 800a41e:	4a4e      	ldr	r2, [pc, #312]	@ (800a558 <_strtod_l+0xb08>)
 800a420:	4019      	ands	r1, r3
 800a422:	4291      	cmp	r1, r2
 800a424:	4682      	mov	sl, r0
 800a426:	d942      	bls.n	800a4ae <_strtod_l+0xa5e>
 800a428:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a42a:	4b47      	ldr	r3, [pc, #284]	@ (800a548 <_strtod_l+0xaf8>)
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d103      	bne.n	800a438 <_strtod_l+0x9e8>
 800a430:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a432:	3301      	adds	r3, #1
 800a434:	f43f ad2b 	beq.w	8009e8e <_strtod_l+0x43e>
 800a438:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a548 <_strtod_l+0xaf8>
 800a43c:	f04f 3aff 	mov.w	sl, #4294967295
 800a440:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a442:	9805      	ldr	r0, [sp, #20]
 800a444:	f002 fd14 	bl	800ce70 <_Bfree>
 800a448:	9805      	ldr	r0, [sp, #20]
 800a44a:	4649      	mov	r1, r9
 800a44c:	f002 fd10 	bl	800ce70 <_Bfree>
 800a450:	9805      	ldr	r0, [sp, #20]
 800a452:	4641      	mov	r1, r8
 800a454:	f002 fd0c 	bl	800ce70 <_Bfree>
 800a458:	9805      	ldr	r0, [sp, #20]
 800a45a:	4621      	mov	r1, r4
 800a45c:	f002 fd08 	bl	800ce70 <_Bfree>
 800a460:	e618      	b.n	800a094 <_strtod_l+0x644>
 800a462:	f1ba 0f01 	cmp.w	sl, #1
 800a466:	d103      	bne.n	800a470 <_strtod_l+0xa20>
 800a468:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f43f ada5 	beq.w	8009fba <_strtod_l+0x56a>
 800a470:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a520 <_strtod_l+0xad0>
 800a474:	4f35      	ldr	r7, [pc, #212]	@ (800a54c <_strtod_l+0xafc>)
 800a476:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a47a:	2600      	movs	r6, #0
 800a47c:	e7b1      	b.n	800a3e2 <_strtod_l+0x992>
 800a47e:	4f34      	ldr	r7, [pc, #208]	@ (800a550 <_strtod_l+0xb00>)
 800a480:	2600      	movs	r6, #0
 800a482:	e7aa      	b.n	800a3da <_strtod_l+0x98a>
 800a484:	4b32      	ldr	r3, [pc, #200]	@ (800a550 <_strtod_l+0xb00>)
 800a486:	4630      	mov	r0, r6
 800a488:	4639      	mov	r1, r7
 800a48a:	2200      	movs	r2, #0
 800a48c:	f7f6 f8b4 	bl	80005f8 <__aeabi_dmul>
 800a490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a492:	4606      	mov	r6, r0
 800a494:	460f      	mov	r7, r1
 800a496:	2b00      	cmp	r3, #0
 800a498:	d09f      	beq.n	800a3da <_strtod_l+0x98a>
 800a49a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a49e:	e7a0      	b.n	800a3e2 <_strtod_l+0x992>
 800a4a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a528 <_strtod_l+0xad8>
 800a4a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a4a8:	ec57 6b17 	vmov	r6, r7, d7
 800a4ac:	e799      	b.n	800a3e2 <_strtod_l+0x992>
 800a4ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a4b2:	9b08      	ldr	r3, [sp, #32]
 800a4b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1c1      	bne.n	800a440 <_strtod_l+0x9f0>
 800a4bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4c0:	0d1b      	lsrs	r3, r3, #20
 800a4c2:	051b      	lsls	r3, r3, #20
 800a4c4:	429d      	cmp	r5, r3
 800a4c6:	d1bb      	bne.n	800a440 <_strtod_l+0x9f0>
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	f7f6 fbf4 	bl	8000cb8 <__aeabi_d2lz>
 800a4d0:	f7f6 f864 	bl	800059c <__aeabi_l2d>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	4630      	mov	r0, r6
 800a4da:	4639      	mov	r1, r7
 800a4dc:	f7f5 fed4 	bl	8000288 <__aeabi_dsub>
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a4e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a4ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4ee:	ea46 060a 	orr.w	r6, r6, sl
 800a4f2:	431e      	orrs	r6, r3
 800a4f4:	d06f      	beq.n	800a5d6 <_strtod_l+0xb86>
 800a4f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a530 <_strtod_l+0xae0>)
 800a4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fc:	f7f6 faee 	bl	8000adc <__aeabi_dcmplt>
 800a500:	2800      	cmp	r0, #0
 800a502:	f47f accf 	bne.w	8009ea4 <_strtod_l+0x454>
 800a506:	a30c      	add	r3, pc, #48	@ (adr r3, 800a538 <_strtod_l+0xae8>)
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a510:	f7f6 fb02 	bl	8000b18 <__aeabi_dcmpgt>
 800a514:	2800      	cmp	r0, #0
 800a516:	d093      	beq.n	800a440 <_strtod_l+0x9f0>
 800a518:	e4c4      	b.n	8009ea4 <_strtod_l+0x454>
 800a51a:	bf00      	nop
 800a51c:	f3af 8000 	nop.w
 800a520:	00000000 	.word	0x00000000
 800a524:	bff00000 	.word	0xbff00000
 800a528:	00000000 	.word	0x00000000
 800a52c:	3ff00000 	.word	0x3ff00000
 800a530:	94a03595 	.word	0x94a03595
 800a534:	3fdfffff 	.word	0x3fdfffff
 800a538:	35afe535 	.word	0x35afe535
 800a53c:	3fe00000 	.word	0x3fe00000
 800a540:	000fffff 	.word	0x000fffff
 800a544:	7ff00000 	.word	0x7ff00000
 800a548:	7fefffff 	.word	0x7fefffff
 800a54c:	3ff00000 	.word	0x3ff00000
 800a550:	3fe00000 	.word	0x3fe00000
 800a554:	7fe00000 	.word	0x7fe00000
 800a558:	7c9fffff 	.word	0x7c9fffff
 800a55c:	9b08      	ldr	r3, [sp, #32]
 800a55e:	b323      	cbz	r3, 800a5aa <_strtod_l+0xb5a>
 800a560:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a564:	d821      	bhi.n	800a5aa <_strtod_l+0xb5a>
 800a566:	a328      	add	r3, pc, #160	@ (adr r3, 800a608 <_strtod_l+0xbb8>)
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	4630      	mov	r0, r6
 800a56e:	4639      	mov	r1, r7
 800a570:	f7f6 fabe 	bl	8000af0 <__aeabi_dcmple>
 800a574:	b1a0      	cbz	r0, 800a5a0 <_strtod_l+0xb50>
 800a576:	4639      	mov	r1, r7
 800a578:	4630      	mov	r0, r6
 800a57a:	f7f6 fb15 	bl	8000ba8 <__aeabi_d2uiz>
 800a57e:	2801      	cmp	r0, #1
 800a580:	bf38      	it	cc
 800a582:	2001      	movcc	r0, #1
 800a584:	f7f5 ffbe 	bl	8000504 <__aeabi_ui2d>
 800a588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a58a:	4606      	mov	r6, r0
 800a58c:	460f      	mov	r7, r1
 800a58e:	b9fb      	cbnz	r3, 800a5d0 <_strtod_l+0xb80>
 800a590:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a594:	9014      	str	r0, [sp, #80]	@ 0x50
 800a596:	9315      	str	r3, [sp, #84]	@ 0x54
 800a598:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a59c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a5a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a5a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a5a6:	1b5b      	subs	r3, r3, r5
 800a5a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a5aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a5ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a5b2:	f002 ff91 	bl	800d4d8 <__ulp>
 800a5b6:	4650      	mov	r0, sl
 800a5b8:	ec53 2b10 	vmov	r2, r3, d0
 800a5bc:	4659      	mov	r1, fp
 800a5be:	f7f6 f81b 	bl	80005f8 <__aeabi_dmul>
 800a5c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a5c6:	f7f5 fe61 	bl	800028c <__adddf3>
 800a5ca:	4682      	mov	sl, r0
 800a5cc:	468b      	mov	fp, r1
 800a5ce:	e770      	b.n	800a4b2 <_strtod_l+0xa62>
 800a5d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a5d4:	e7e0      	b.n	800a598 <_strtod_l+0xb48>
 800a5d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a610 <_strtod_l+0xbc0>)
 800a5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5dc:	f7f6 fa7e 	bl	8000adc <__aeabi_dcmplt>
 800a5e0:	e798      	b.n	800a514 <_strtod_l+0xac4>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a5e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5ea:	6013      	str	r3, [r2, #0]
 800a5ec:	f7ff ba6d 	b.w	8009aca <_strtod_l+0x7a>
 800a5f0:	2a65      	cmp	r2, #101	@ 0x65
 800a5f2:	f43f ab66 	beq.w	8009cc2 <_strtod_l+0x272>
 800a5f6:	2a45      	cmp	r2, #69	@ 0x45
 800a5f8:	f43f ab63 	beq.w	8009cc2 <_strtod_l+0x272>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	f7ff bb9e 	b.w	8009d3e <_strtod_l+0x2ee>
 800a602:	bf00      	nop
 800a604:	f3af 8000 	nop.w
 800a608:	ffc00000 	.word	0xffc00000
 800a60c:	41dfffff 	.word	0x41dfffff
 800a610:	94a03595 	.word	0x94a03595
 800a614:	3fcfffff 	.word	0x3fcfffff

0800a618 <_strtod_r>:
 800a618:	4b01      	ldr	r3, [pc, #4]	@ (800a620 <_strtod_r+0x8>)
 800a61a:	f7ff ba19 	b.w	8009a50 <_strtod_l>
 800a61e:	bf00      	nop
 800a620:	200000f8 	.word	0x200000f8

0800a624 <strtod>:
 800a624:	460a      	mov	r2, r1
 800a626:	4601      	mov	r1, r0
 800a628:	4802      	ldr	r0, [pc, #8]	@ (800a634 <strtod+0x10>)
 800a62a:	4b03      	ldr	r3, [pc, #12]	@ (800a638 <strtod+0x14>)
 800a62c:	6800      	ldr	r0, [r0, #0]
 800a62e:	f7ff ba0f 	b.w	8009a50 <_strtod_l>
 800a632:	bf00      	nop
 800a634:	20000264 	.word	0x20000264
 800a638:	200000f8 	.word	0x200000f8

0800a63c <_strtol_l.constprop.0>:
 800a63c:	2b24      	cmp	r3, #36	@ 0x24
 800a63e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a642:	4686      	mov	lr, r0
 800a644:	4690      	mov	r8, r2
 800a646:	d801      	bhi.n	800a64c <_strtol_l.constprop.0+0x10>
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d106      	bne.n	800a65a <_strtol_l.constprop.0+0x1e>
 800a64c:	f001 f8ce 	bl	800b7ec <__errno>
 800a650:	2316      	movs	r3, #22
 800a652:	6003      	str	r3, [r0, #0]
 800a654:	2000      	movs	r0, #0
 800a656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65a:	4834      	ldr	r0, [pc, #208]	@ (800a72c <_strtol_l.constprop.0+0xf0>)
 800a65c:	460d      	mov	r5, r1
 800a65e:	462a      	mov	r2, r5
 800a660:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a664:	5d06      	ldrb	r6, [r0, r4]
 800a666:	f016 0608 	ands.w	r6, r6, #8
 800a66a:	d1f8      	bne.n	800a65e <_strtol_l.constprop.0+0x22>
 800a66c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a66e:	d12d      	bne.n	800a6cc <_strtol_l.constprop.0+0x90>
 800a670:	782c      	ldrb	r4, [r5, #0]
 800a672:	2601      	movs	r6, #1
 800a674:	1c95      	adds	r5, r2, #2
 800a676:	f033 0210 	bics.w	r2, r3, #16
 800a67a:	d109      	bne.n	800a690 <_strtol_l.constprop.0+0x54>
 800a67c:	2c30      	cmp	r4, #48	@ 0x30
 800a67e:	d12a      	bne.n	800a6d6 <_strtol_l.constprop.0+0x9a>
 800a680:	782a      	ldrb	r2, [r5, #0]
 800a682:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a686:	2a58      	cmp	r2, #88	@ 0x58
 800a688:	d125      	bne.n	800a6d6 <_strtol_l.constprop.0+0x9a>
 800a68a:	786c      	ldrb	r4, [r5, #1]
 800a68c:	2310      	movs	r3, #16
 800a68e:	3502      	adds	r5, #2
 800a690:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a694:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a698:	2200      	movs	r2, #0
 800a69a:	fbbc f9f3 	udiv	r9, ip, r3
 800a69e:	4610      	mov	r0, r2
 800a6a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800a6a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a6a8:	2f09      	cmp	r7, #9
 800a6aa:	d81b      	bhi.n	800a6e4 <_strtol_l.constprop.0+0xa8>
 800a6ac:	463c      	mov	r4, r7
 800a6ae:	42a3      	cmp	r3, r4
 800a6b0:	dd27      	ble.n	800a702 <_strtol_l.constprop.0+0xc6>
 800a6b2:	1c57      	adds	r7, r2, #1
 800a6b4:	d007      	beq.n	800a6c6 <_strtol_l.constprop.0+0x8a>
 800a6b6:	4581      	cmp	r9, r0
 800a6b8:	d320      	bcc.n	800a6fc <_strtol_l.constprop.0+0xc0>
 800a6ba:	d101      	bne.n	800a6c0 <_strtol_l.constprop.0+0x84>
 800a6bc:	45a2      	cmp	sl, r4
 800a6be:	db1d      	blt.n	800a6fc <_strtol_l.constprop.0+0xc0>
 800a6c0:	fb00 4003 	mla	r0, r0, r3, r4
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6ca:	e7eb      	b.n	800a6a4 <_strtol_l.constprop.0+0x68>
 800a6cc:	2c2b      	cmp	r4, #43	@ 0x2b
 800a6ce:	bf04      	itt	eq
 800a6d0:	782c      	ldrbeq	r4, [r5, #0]
 800a6d2:	1c95      	addeq	r5, r2, #2
 800a6d4:	e7cf      	b.n	800a676 <_strtol_l.constprop.0+0x3a>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1da      	bne.n	800a690 <_strtol_l.constprop.0+0x54>
 800a6da:	2c30      	cmp	r4, #48	@ 0x30
 800a6dc:	bf0c      	ite	eq
 800a6de:	2308      	moveq	r3, #8
 800a6e0:	230a      	movne	r3, #10
 800a6e2:	e7d5      	b.n	800a690 <_strtol_l.constprop.0+0x54>
 800a6e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a6e8:	2f19      	cmp	r7, #25
 800a6ea:	d801      	bhi.n	800a6f0 <_strtol_l.constprop.0+0xb4>
 800a6ec:	3c37      	subs	r4, #55	@ 0x37
 800a6ee:	e7de      	b.n	800a6ae <_strtol_l.constprop.0+0x72>
 800a6f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a6f4:	2f19      	cmp	r7, #25
 800a6f6:	d804      	bhi.n	800a702 <_strtol_l.constprop.0+0xc6>
 800a6f8:	3c57      	subs	r4, #87	@ 0x57
 800a6fa:	e7d8      	b.n	800a6ae <_strtol_l.constprop.0+0x72>
 800a6fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a700:	e7e1      	b.n	800a6c6 <_strtol_l.constprop.0+0x8a>
 800a702:	1c53      	adds	r3, r2, #1
 800a704:	d108      	bne.n	800a718 <_strtol_l.constprop.0+0xdc>
 800a706:	2322      	movs	r3, #34	@ 0x22
 800a708:	f8ce 3000 	str.w	r3, [lr]
 800a70c:	4660      	mov	r0, ip
 800a70e:	f1b8 0f00 	cmp.w	r8, #0
 800a712:	d0a0      	beq.n	800a656 <_strtol_l.constprop.0+0x1a>
 800a714:	1e69      	subs	r1, r5, #1
 800a716:	e006      	b.n	800a726 <_strtol_l.constprop.0+0xea>
 800a718:	b106      	cbz	r6, 800a71c <_strtol_l.constprop.0+0xe0>
 800a71a:	4240      	negs	r0, r0
 800a71c:	f1b8 0f00 	cmp.w	r8, #0
 800a720:	d099      	beq.n	800a656 <_strtol_l.constprop.0+0x1a>
 800a722:	2a00      	cmp	r2, #0
 800a724:	d1f6      	bne.n	800a714 <_strtol_l.constprop.0+0xd8>
 800a726:	f8c8 1000 	str.w	r1, [r8]
 800a72a:	e794      	b.n	800a656 <_strtol_l.constprop.0+0x1a>
 800a72c:	08010381 	.word	0x08010381

0800a730 <_strtol_r>:
 800a730:	f7ff bf84 	b.w	800a63c <_strtol_l.constprop.0>

0800a734 <strtol>:
 800a734:	4613      	mov	r3, r2
 800a736:	460a      	mov	r2, r1
 800a738:	4601      	mov	r1, r0
 800a73a:	4802      	ldr	r0, [pc, #8]	@ (800a744 <strtol+0x10>)
 800a73c:	6800      	ldr	r0, [r0, #0]
 800a73e:	f7ff bf7d 	b.w	800a63c <_strtol_l.constprop.0>
 800a742:	bf00      	nop
 800a744:	20000264 	.word	0x20000264

0800a748 <__cvt>:
 800a748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a74c:	ec57 6b10 	vmov	r6, r7, d0
 800a750:	2f00      	cmp	r7, #0
 800a752:	460c      	mov	r4, r1
 800a754:	4619      	mov	r1, r3
 800a756:	463b      	mov	r3, r7
 800a758:	bfbb      	ittet	lt
 800a75a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a75e:	461f      	movlt	r7, r3
 800a760:	2300      	movge	r3, #0
 800a762:	232d      	movlt	r3, #45	@ 0x2d
 800a764:	700b      	strb	r3, [r1, #0]
 800a766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a768:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a76c:	4691      	mov	r9, r2
 800a76e:	f023 0820 	bic.w	r8, r3, #32
 800a772:	bfbc      	itt	lt
 800a774:	4632      	movlt	r2, r6
 800a776:	4616      	movlt	r6, r2
 800a778:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a77c:	d005      	beq.n	800a78a <__cvt+0x42>
 800a77e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a782:	d100      	bne.n	800a786 <__cvt+0x3e>
 800a784:	3401      	adds	r4, #1
 800a786:	2102      	movs	r1, #2
 800a788:	e000      	b.n	800a78c <__cvt+0x44>
 800a78a:	2103      	movs	r1, #3
 800a78c:	ab03      	add	r3, sp, #12
 800a78e:	9301      	str	r3, [sp, #4]
 800a790:	ab02      	add	r3, sp, #8
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	ec47 6b10 	vmov	d0, r6, r7
 800a798:	4653      	mov	r3, sl
 800a79a:	4622      	mov	r2, r4
 800a79c:	f001 f918 	bl	800b9d0 <_dtoa_r>
 800a7a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a7a4:	4605      	mov	r5, r0
 800a7a6:	d119      	bne.n	800a7dc <__cvt+0x94>
 800a7a8:	f019 0f01 	tst.w	r9, #1
 800a7ac:	d00e      	beq.n	800a7cc <__cvt+0x84>
 800a7ae:	eb00 0904 	add.w	r9, r0, r4
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	4639      	mov	r1, r7
 800a7ba:	f7f6 f985 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7be:	b108      	cbz	r0, 800a7c4 <__cvt+0x7c>
 800a7c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a7c4:	2230      	movs	r2, #48	@ 0x30
 800a7c6:	9b03      	ldr	r3, [sp, #12]
 800a7c8:	454b      	cmp	r3, r9
 800a7ca:	d31e      	bcc.n	800a80a <__cvt+0xc2>
 800a7cc:	9b03      	ldr	r3, [sp, #12]
 800a7ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7d0:	1b5b      	subs	r3, r3, r5
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	6013      	str	r3, [r2, #0]
 800a7d6:	b004      	add	sp, #16
 800a7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a7e0:	eb00 0904 	add.w	r9, r0, r4
 800a7e4:	d1e5      	bne.n	800a7b2 <__cvt+0x6a>
 800a7e6:	7803      	ldrb	r3, [r0, #0]
 800a7e8:	2b30      	cmp	r3, #48	@ 0x30
 800a7ea:	d10a      	bne.n	800a802 <__cvt+0xba>
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	f7f6 f968 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7f8:	b918      	cbnz	r0, 800a802 <__cvt+0xba>
 800a7fa:	f1c4 0401 	rsb	r4, r4, #1
 800a7fe:	f8ca 4000 	str.w	r4, [sl]
 800a802:	f8da 3000 	ldr.w	r3, [sl]
 800a806:	4499      	add	r9, r3
 800a808:	e7d3      	b.n	800a7b2 <__cvt+0x6a>
 800a80a:	1c59      	adds	r1, r3, #1
 800a80c:	9103      	str	r1, [sp, #12]
 800a80e:	701a      	strb	r2, [r3, #0]
 800a810:	e7d9      	b.n	800a7c6 <__cvt+0x7e>

0800a812 <__exponent>:
 800a812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a814:	2900      	cmp	r1, #0
 800a816:	bfba      	itte	lt
 800a818:	4249      	neglt	r1, r1
 800a81a:	232d      	movlt	r3, #45	@ 0x2d
 800a81c:	232b      	movge	r3, #43	@ 0x2b
 800a81e:	2909      	cmp	r1, #9
 800a820:	7002      	strb	r2, [r0, #0]
 800a822:	7043      	strb	r3, [r0, #1]
 800a824:	dd29      	ble.n	800a87a <__exponent+0x68>
 800a826:	f10d 0307 	add.w	r3, sp, #7
 800a82a:	461d      	mov	r5, r3
 800a82c:	270a      	movs	r7, #10
 800a82e:	461a      	mov	r2, r3
 800a830:	fbb1 f6f7 	udiv	r6, r1, r7
 800a834:	fb07 1416 	mls	r4, r7, r6, r1
 800a838:	3430      	adds	r4, #48	@ 0x30
 800a83a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a83e:	460c      	mov	r4, r1
 800a840:	2c63      	cmp	r4, #99	@ 0x63
 800a842:	f103 33ff 	add.w	r3, r3, #4294967295
 800a846:	4631      	mov	r1, r6
 800a848:	dcf1      	bgt.n	800a82e <__exponent+0x1c>
 800a84a:	3130      	adds	r1, #48	@ 0x30
 800a84c:	1e94      	subs	r4, r2, #2
 800a84e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a852:	1c41      	adds	r1, r0, #1
 800a854:	4623      	mov	r3, r4
 800a856:	42ab      	cmp	r3, r5
 800a858:	d30a      	bcc.n	800a870 <__exponent+0x5e>
 800a85a:	f10d 0309 	add.w	r3, sp, #9
 800a85e:	1a9b      	subs	r3, r3, r2
 800a860:	42ac      	cmp	r4, r5
 800a862:	bf88      	it	hi
 800a864:	2300      	movhi	r3, #0
 800a866:	3302      	adds	r3, #2
 800a868:	4403      	add	r3, r0
 800a86a:	1a18      	subs	r0, r3, r0
 800a86c:	b003      	add	sp, #12
 800a86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a870:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a874:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a878:	e7ed      	b.n	800a856 <__exponent+0x44>
 800a87a:	2330      	movs	r3, #48	@ 0x30
 800a87c:	3130      	adds	r1, #48	@ 0x30
 800a87e:	7083      	strb	r3, [r0, #2]
 800a880:	70c1      	strb	r1, [r0, #3]
 800a882:	1d03      	adds	r3, r0, #4
 800a884:	e7f1      	b.n	800a86a <__exponent+0x58>
	...

0800a888 <_printf_float>:
 800a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88c:	b08d      	sub	sp, #52	@ 0x34
 800a88e:	460c      	mov	r4, r1
 800a890:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a894:	4616      	mov	r6, r2
 800a896:	461f      	mov	r7, r3
 800a898:	4605      	mov	r5, r0
 800a89a:	f000 ff5d 	bl	800b758 <_localeconv_r>
 800a89e:	6803      	ldr	r3, [r0, #0]
 800a8a0:	9304      	str	r3, [sp, #16]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7f5 fce4 	bl	8000270 <strlen>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8ac:	f8d8 3000 	ldr.w	r3, [r8]
 800a8b0:	9005      	str	r0, [sp, #20]
 800a8b2:	3307      	adds	r3, #7
 800a8b4:	f023 0307 	bic.w	r3, r3, #7
 800a8b8:	f103 0208 	add.w	r2, r3, #8
 800a8bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a8c0:	f8d4 b000 	ldr.w	fp, [r4]
 800a8c4:	f8c8 2000 	str.w	r2, [r8]
 800a8c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a8d0:	9307      	str	r3, [sp, #28]
 800a8d2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a8d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a8da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8de:	4b9c      	ldr	r3, [pc, #624]	@ (800ab50 <_printf_float+0x2c8>)
 800a8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e4:	f7f6 f922 	bl	8000b2c <__aeabi_dcmpun>
 800a8e8:	bb70      	cbnz	r0, 800a948 <_printf_float+0xc0>
 800a8ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8ee:	4b98      	ldr	r3, [pc, #608]	@ (800ab50 <_printf_float+0x2c8>)
 800a8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f4:	f7f6 f8fc 	bl	8000af0 <__aeabi_dcmple>
 800a8f8:	bb30      	cbnz	r0, 800a948 <_printf_float+0xc0>
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	4640      	mov	r0, r8
 800a900:	4649      	mov	r1, r9
 800a902:	f7f6 f8eb 	bl	8000adc <__aeabi_dcmplt>
 800a906:	b110      	cbz	r0, 800a90e <_printf_float+0x86>
 800a908:	232d      	movs	r3, #45	@ 0x2d
 800a90a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a90e:	4a91      	ldr	r2, [pc, #580]	@ (800ab54 <_printf_float+0x2cc>)
 800a910:	4b91      	ldr	r3, [pc, #580]	@ (800ab58 <_printf_float+0x2d0>)
 800a912:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a916:	bf94      	ite	ls
 800a918:	4690      	movls	r8, r2
 800a91a:	4698      	movhi	r8, r3
 800a91c:	2303      	movs	r3, #3
 800a91e:	6123      	str	r3, [r4, #16]
 800a920:	f02b 0304 	bic.w	r3, fp, #4
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	f04f 0900 	mov.w	r9, #0
 800a92a:	9700      	str	r7, [sp, #0]
 800a92c:	4633      	mov	r3, r6
 800a92e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a930:	4621      	mov	r1, r4
 800a932:	4628      	mov	r0, r5
 800a934:	f000 f9d2 	bl	800acdc <_printf_common>
 800a938:	3001      	adds	r0, #1
 800a93a:	f040 808d 	bne.w	800aa58 <_printf_float+0x1d0>
 800a93e:	f04f 30ff 	mov.w	r0, #4294967295
 800a942:	b00d      	add	sp, #52	@ 0x34
 800a944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a948:	4642      	mov	r2, r8
 800a94a:	464b      	mov	r3, r9
 800a94c:	4640      	mov	r0, r8
 800a94e:	4649      	mov	r1, r9
 800a950:	f7f6 f8ec 	bl	8000b2c <__aeabi_dcmpun>
 800a954:	b140      	cbz	r0, 800a968 <_printf_float+0xe0>
 800a956:	464b      	mov	r3, r9
 800a958:	2b00      	cmp	r3, #0
 800a95a:	bfbc      	itt	lt
 800a95c:	232d      	movlt	r3, #45	@ 0x2d
 800a95e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a962:	4a7e      	ldr	r2, [pc, #504]	@ (800ab5c <_printf_float+0x2d4>)
 800a964:	4b7e      	ldr	r3, [pc, #504]	@ (800ab60 <_printf_float+0x2d8>)
 800a966:	e7d4      	b.n	800a912 <_printf_float+0x8a>
 800a968:	6863      	ldr	r3, [r4, #4]
 800a96a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a96e:	9206      	str	r2, [sp, #24]
 800a970:	1c5a      	adds	r2, r3, #1
 800a972:	d13b      	bne.n	800a9ec <_printf_float+0x164>
 800a974:	2306      	movs	r3, #6
 800a976:	6063      	str	r3, [r4, #4]
 800a978:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a97c:	2300      	movs	r3, #0
 800a97e:	6022      	str	r2, [r4, #0]
 800a980:	9303      	str	r3, [sp, #12]
 800a982:	ab0a      	add	r3, sp, #40	@ 0x28
 800a984:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a988:	ab09      	add	r3, sp, #36	@ 0x24
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	6861      	ldr	r1, [r4, #4]
 800a98e:	ec49 8b10 	vmov	d0, r8, r9
 800a992:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a996:	4628      	mov	r0, r5
 800a998:	f7ff fed6 	bl	800a748 <__cvt>
 800a99c:	9b06      	ldr	r3, [sp, #24]
 800a99e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a9a0:	2b47      	cmp	r3, #71	@ 0x47
 800a9a2:	4680      	mov	r8, r0
 800a9a4:	d129      	bne.n	800a9fa <_printf_float+0x172>
 800a9a6:	1cc8      	adds	r0, r1, #3
 800a9a8:	db02      	blt.n	800a9b0 <_printf_float+0x128>
 800a9aa:	6863      	ldr	r3, [r4, #4]
 800a9ac:	4299      	cmp	r1, r3
 800a9ae:	dd41      	ble.n	800aa34 <_printf_float+0x1ac>
 800a9b0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a9b4:	fa5f fa8a 	uxtb.w	sl, sl
 800a9b8:	3901      	subs	r1, #1
 800a9ba:	4652      	mov	r2, sl
 800a9bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a9c0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9c2:	f7ff ff26 	bl	800a812 <__exponent>
 800a9c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9c8:	1813      	adds	r3, r2, r0
 800a9ca:	2a01      	cmp	r2, #1
 800a9cc:	4681      	mov	r9, r0
 800a9ce:	6123      	str	r3, [r4, #16]
 800a9d0:	dc02      	bgt.n	800a9d8 <_printf_float+0x150>
 800a9d2:	6822      	ldr	r2, [r4, #0]
 800a9d4:	07d2      	lsls	r2, r2, #31
 800a9d6:	d501      	bpl.n	800a9dc <_printf_float+0x154>
 800a9d8:	3301      	adds	r3, #1
 800a9da:	6123      	str	r3, [r4, #16]
 800a9dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d0a2      	beq.n	800a92a <_printf_float+0xa2>
 800a9e4:	232d      	movs	r3, #45	@ 0x2d
 800a9e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9ea:	e79e      	b.n	800a92a <_printf_float+0xa2>
 800a9ec:	9a06      	ldr	r2, [sp, #24]
 800a9ee:	2a47      	cmp	r2, #71	@ 0x47
 800a9f0:	d1c2      	bne.n	800a978 <_printf_float+0xf0>
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1c0      	bne.n	800a978 <_printf_float+0xf0>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e7bd      	b.n	800a976 <_printf_float+0xee>
 800a9fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a9fe:	d9db      	bls.n	800a9b8 <_printf_float+0x130>
 800aa00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aa04:	d118      	bne.n	800aa38 <_printf_float+0x1b0>
 800aa06:	2900      	cmp	r1, #0
 800aa08:	6863      	ldr	r3, [r4, #4]
 800aa0a:	dd0b      	ble.n	800aa24 <_printf_float+0x19c>
 800aa0c:	6121      	str	r1, [r4, #16]
 800aa0e:	b913      	cbnz	r3, 800aa16 <_printf_float+0x18e>
 800aa10:	6822      	ldr	r2, [r4, #0]
 800aa12:	07d0      	lsls	r0, r2, #31
 800aa14:	d502      	bpl.n	800aa1c <_printf_float+0x194>
 800aa16:	3301      	adds	r3, #1
 800aa18:	440b      	add	r3, r1
 800aa1a:	6123      	str	r3, [r4, #16]
 800aa1c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aa1e:	f04f 0900 	mov.w	r9, #0
 800aa22:	e7db      	b.n	800a9dc <_printf_float+0x154>
 800aa24:	b913      	cbnz	r3, 800aa2c <_printf_float+0x1a4>
 800aa26:	6822      	ldr	r2, [r4, #0]
 800aa28:	07d2      	lsls	r2, r2, #31
 800aa2a:	d501      	bpl.n	800aa30 <_printf_float+0x1a8>
 800aa2c:	3302      	adds	r3, #2
 800aa2e:	e7f4      	b.n	800aa1a <_printf_float+0x192>
 800aa30:	2301      	movs	r3, #1
 800aa32:	e7f2      	b.n	800aa1a <_printf_float+0x192>
 800aa34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aa38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa3a:	4299      	cmp	r1, r3
 800aa3c:	db05      	blt.n	800aa4a <_printf_float+0x1c2>
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	6121      	str	r1, [r4, #16]
 800aa42:	07d8      	lsls	r0, r3, #31
 800aa44:	d5ea      	bpl.n	800aa1c <_printf_float+0x194>
 800aa46:	1c4b      	adds	r3, r1, #1
 800aa48:	e7e7      	b.n	800aa1a <_printf_float+0x192>
 800aa4a:	2900      	cmp	r1, #0
 800aa4c:	bfd4      	ite	le
 800aa4e:	f1c1 0202 	rsble	r2, r1, #2
 800aa52:	2201      	movgt	r2, #1
 800aa54:	4413      	add	r3, r2
 800aa56:	e7e0      	b.n	800aa1a <_printf_float+0x192>
 800aa58:	6823      	ldr	r3, [r4, #0]
 800aa5a:	055a      	lsls	r2, r3, #21
 800aa5c:	d407      	bmi.n	800aa6e <_printf_float+0x1e6>
 800aa5e:	6923      	ldr	r3, [r4, #16]
 800aa60:	4642      	mov	r2, r8
 800aa62:	4631      	mov	r1, r6
 800aa64:	4628      	mov	r0, r5
 800aa66:	47b8      	blx	r7
 800aa68:	3001      	adds	r0, #1
 800aa6a:	d12b      	bne.n	800aac4 <_printf_float+0x23c>
 800aa6c:	e767      	b.n	800a93e <_printf_float+0xb6>
 800aa6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa72:	f240 80dd 	bls.w	800ac30 <_printf_float+0x3a8>
 800aa76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	f7f6 f823 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d033      	beq.n	800aaee <_printf_float+0x266>
 800aa86:	4a37      	ldr	r2, [pc, #220]	@ (800ab64 <_printf_float+0x2dc>)
 800aa88:	2301      	movs	r3, #1
 800aa8a:	4631      	mov	r1, r6
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	47b8      	blx	r7
 800aa90:	3001      	adds	r0, #1
 800aa92:	f43f af54 	beq.w	800a93e <_printf_float+0xb6>
 800aa96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aa9a:	4543      	cmp	r3, r8
 800aa9c:	db02      	blt.n	800aaa4 <_printf_float+0x21c>
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	07d8      	lsls	r0, r3, #31
 800aaa2:	d50f      	bpl.n	800aac4 <_printf_float+0x23c>
 800aaa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaa8:	4631      	mov	r1, r6
 800aaaa:	4628      	mov	r0, r5
 800aaac:	47b8      	blx	r7
 800aaae:	3001      	adds	r0, #1
 800aab0:	f43f af45 	beq.w	800a93e <_printf_float+0xb6>
 800aab4:	f04f 0900 	mov.w	r9, #0
 800aab8:	f108 38ff 	add.w	r8, r8, #4294967295
 800aabc:	f104 0a1a 	add.w	sl, r4, #26
 800aac0:	45c8      	cmp	r8, r9
 800aac2:	dc09      	bgt.n	800aad8 <_printf_float+0x250>
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	079b      	lsls	r3, r3, #30
 800aac8:	f100 8103 	bmi.w	800acd2 <_printf_float+0x44a>
 800aacc:	68e0      	ldr	r0, [r4, #12]
 800aace:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aad0:	4298      	cmp	r0, r3
 800aad2:	bfb8      	it	lt
 800aad4:	4618      	movlt	r0, r3
 800aad6:	e734      	b.n	800a942 <_printf_float+0xba>
 800aad8:	2301      	movs	r3, #1
 800aada:	4652      	mov	r2, sl
 800aadc:	4631      	mov	r1, r6
 800aade:	4628      	mov	r0, r5
 800aae0:	47b8      	blx	r7
 800aae2:	3001      	adds	r0, #1
 800aae4:	f43f af2b 	beq.w	800a93e <_printf_float+0xb6>
 800aae8:	f109 0901 	add.w	r9, r9, #1
 800aaec:	e7e8      	b.n	800aac0 <_printf_float+0x238>
 800aaee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	dc39      	bgt.n	800ab68 <_printf_float+0x2e0>
 800aaf4:	4a1b      	ldr	r2, [pc, #108]	@ (800ab64 <_printf_float+0x2dc>)
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	4631      	mov	r1, r6
 800aafa:	4628      	mov	r0, r5
 800aafc:	47b8      	blx	r7
 800aafe:	3001      	adds	r0, #1
 800ab00:	f43f af1d 	beq.w	800a93e <_printf_float+0xb6>
 800ab04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ab08:	ea59 0303 	orrs.w	r3, r9, r3
 800ab0c:	d102      	bne.n	800ab14 <_printf_float+0x28c>
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	07d9      	lsls	r1, r3, #31
 800ab12:	d5d7      	bpl.n	800aac4 <_printf_float+0x23c>
 800ab14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab18:	4631      	mov	r1, r6
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	47b8      	blx	r7
 800ab1e:	3001      	adds	r0, #1
 800ab20:	f43f af0d 	beq.w	800a93e <_printf_float+0xb6>
 800ab24:	f04f 0a00 	mov.w	sl, #0
 800ab28:	f104 0b1a 	add.w	fp, r4, #26
 800ab2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab2e:	425b      	negs	r3, r3
 800ab30:	4553      	cmp	r3, sl
 800ab32:	dc01      	bgt.n	800ab38 <_printf_float+0x2b0>
 800ab34:	464b      	mov	r3, r9
 800ab36:	e793      	b.n	800aa60 <_printf_float+0x1d8>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	465a      	mov	r2, fp
 800ab3c:	4631      	mov	r1, r6
 800ab3e:	4628      	mov	r0, r5
 800ab40:	47b8      	blx	r7
 800ab42:	3001      	adds	r0, #1
 800ab44:	f43f aefb 	beq.w	800a93e <_printf_float+0xb6>
 800ab48:	f10a 0a01 	add.w	sl, sl, #1
 800ab4c:	e7ee      	b.n	800ab2c <_printf_float+0x2a4>
 800ab4e:	bf00      	nop
 800ab50:	7fefffff 	.word	0x7fefffff
 800ab54:	08010481 	.word	0x08010481
 800ab58:	08010485 	.word	0x08010485
 800ab5c:	08010489 	.word	0x08010489
 800ab60:	0801048d 	.word	0x0801048d
 800ab64:	08010491 	.word	0x08010491
 800ab68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab6a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ab6e:	4553      	cmp	r3, sl
 800ab70:	bfa8      	it	ge
 800ab72:	4653      	movge	r3, sl
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	4699      	mov	r9, r3
 800ab78:	dc36      	bgt.n	800abe8 <_printf_float+0x360>
 800ab7a:	f04f 0b00 	mov.w	fp, #0
 800ab7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab82:	f104 021a 	add.w	r2, r4, #26
 800ab86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab88:	9306      	str	r3, [sp, #24]
 800ab8a:	eba3 0309 	sub.w	r3, r3, r9
 800ab8e:	455b      	cmp	r3, fp
 800ab90:	dc31      	bgt.n	800abf6 <_printf_float+0x36e>
 800ab92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab94:	459a      	cmp	sl, r3
 800ab96:	dc3a      	bgt.n	800ac0e <_printf_float+0x386>
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	07da      	lsls	r2, r3, #31
 800ab9c:	d437      	bmi.n	800ac0e <_printf_float+0x386>
 800ab9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aba0:	ebaa 0903 	sub.w	r9, sl, r3
 800aba4:	9b06      	ldr	r3, [sp, #24]
 800aba6:	ebaa 0303 	sub.w	r3, sl, r3
 800abaa:	4599      	cmp	r9, r3
 800abac:	bfa8      	it	ge
 800abae:	4699      	movge	r9, r3
 800abb0:	f1b9 0f00 	cmp.w	r9, #0
 800abb4:	dc33      	bgt.n	800ac1e <_printf_float+0x396>
 800abb6:	f04f 0800 	mov.w	r8, #0
 800abba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abbe:	f104 0b1a 	add.w	fp, r4, #26
 800abc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abc4:	ebaa 0303 	sub.w	r3, sl, r3
 800abc8:	eba3 0309 	sub.w	r3, r3, r9
 800abcc:	4543      	cmp	r3, r8
 800abce:	f77f af79 	ble.w	800aac4 <_printf_float+0x23c>
 800abd2:	2301      	movs	r3, #1
 800abd4:	465a      	mov	r2, fp
 800abd6:	4631      	mov	r1, r6
 800abd8:	4628      	mov	r0, r5
 800abda:	47b8      	blx	r7
 800abdc:	3001      	adds	r0, #1
 800abde:	f43f aeae 	beq.w	800a93e <_printf_float+0xb6>
 800abe2:	f108 0801 	add.w	r8, r8, #1
 800abe6:	e7ec      	b.n	800abc2 <_printf_float+0x33a>
 800abe8:	4642      	mov	r2, r8
 800abea:	4631      	mov	r1, r6
 800abec:	4628      	mov	r0, r5
 800abee:	47b8      	blx	r7
 800abf0:	3001      	adds	r0, #1
 800abf2:	d1c2      	bne.n	800ab7a <_printf_float+0x2f2>
 800abf4:	e6a3      	b.n	800a93e <_printf_float+0xb6>
 800abf6:	2301      	movs	r3, #1
 800abf8:	4631      	mov	r1, r6
 800abfa:	4628      	mov	r0, r5
 800abfc:	9206      	str	r2, [sp, #24]
 800abfe:	47b8      	blx	r7
 800ac00:	3001      	adds	r0, #1
 800ac02:	f43f ae9c 	beq.w	800a93e <_printf_float+0xb6>
 800ac06:	9a06      	ldr	r2, [sp, #24]
 800ac08:	f10b 0b01 	add.w	fp, fp, #1
 800ac0c:	e7bb      	b.n	800ab86 <_printf_float+0x2fe>
 800ac0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac12:	4631      	mov	r1, r6
 800ac14:	4628      	mov	r0, r5
 800ac16:	47b8      	blx	r7
 800ac18:	3001      	adds	r0, #1
 800ac1a:	d1c0      	bne.n	800ab9e <_printf_float+0x316>
 800ac1c:	e68f      	b.n	800a93e <_printf_float+0xb6>
 800ac1e:	9a06      	ldr	r2, [sp, #24]
 800ac20:	464b      	mov	r3, r9
 800ac22:	4442      	add	r2, r8
 800ac24:	4631      	mov	r1, r6
 800ac26:	4628      	mov	r0, r5
 800ac28:	47b8      	blx	r7
 800ac2a:	3001      	adds	r0, #1
 800ac2c:	d1c3      	bne.n	800abb6 <_printf_float+0x32e>
 800ac2e:	e686      	b.n	800a93e <_printf_float+0xb6>
 800ac30:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac34:	f1ba 0f01 	cmp.w	sl, #1
 800ac38:	dc01      	bgt.n	800ac3e <_printf_float+0x3b6>
 800ac3a:	07db      	lsls	r3, r3, #31
 800ac3c:	d536      	bpl.n	800acac <_printf_float+0x424>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	4642      	mov	r2, r8
 800ac42:	4631      	mov	r1, r6
 800ac44:	4628      	mov	r0, r5
 800ac46:	47b8      	blx	r7
 800ac48:	3001      	adds	r0, #1
 800ac4a:	f43f ae78 	beq.w	800a93e <_printf_float+0xb6>
 800ac4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac52:	4631      	mov	r1, r6
 800ac54:	4628      	mov	r0, r5
 800ac56:	47b8      	blx	r7
 800ac58:	3001      	adds	r0, #1
 800ac5a:	f43f ae70 	beq.w	800a93e <_printf_float+0xb6>
 800ac5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac62:	2200      	movs	r2, #0
 800ac64:	2300      	movs	r3, #0
 800ac66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac6a:	f7f5 ff2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac6e:	b9c0      	cbnz	r0, 800aca2 <_printf_float+0x41a>
 800ac70:	4653      	mov	r3, sl
 800ac72:	f108 0201 	add.w	r2, r8, #1
 800ac76:	4631      	mov	r1, r6
 800ac78:	4628      	mov	r0, r5
 800ac7a:	47b8      	blx	r7
 800ac7c:	3001      	adds	r0, #1
 800ac7e:	d10c      	bne.n	800ac9a <_printf_float+0x412>
 800ac80:	e65d      	b.n	800a93e <_printf_float+0xb6>
 800ac82:	2301      	movs	r3, #1
 800ac84:	465a      	mov	r2, fp
 800ac86:	4631      	mov	r1, r6
 800ac88:	4628      	mov	r0, r5
 800ac8a:	47b8      	blx	r7
 800ac8c:	3001      	adds	r0, #1
 800ac8e:	f43f ae56 	beq.w	800a93e <_printf_float+0xb6>
 800ac92:	f108 0801 	add.w	r8, r8, #1
 800ac96:	45d0      	cmp	r8, sl
 800ac98:	dbf3      	blt.n	800ac82 <_printf_float+0x3fa>
 800ac9a:	464b      	mov	r3, r9
 800ac9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aca0:	e6df      	b.n	800aa62 <_printf_float+0x1da>
 800aca2:	f04f 0800 	mov.w	r8, #0
 800aca6:	f104 0b1a 	add.w	fp, r4, #26
 800acaa:	e7f4      	b.n	800ac96 <_printf_float+0x40e>
 800acac:	2301      	movs	r3, #1
 800acae:	4642      	mov	r2, r8
 800acb0:	e7e1      	b.n	800ac76 <_printf_float+0x3ee>
 800acb2:	2301      	movs	r3, #1
 800acb4:	464a      	mov	r2, r9
 800acb6:	4631      	mov	r1, r6
 800acb8:	4628      	mov	r0, r5
 800acba:	47b8      	blx	r7
 800acbc:	3001      	adds	r0, #1
 800acbe:	f43f ae3e 	beq.w	800a93e <_printf_float+0xb6>
 800acc2:	f108 0801 	add.w	r8, r8, #1
 800acc6:	68e3      	ldr	r3, [r4, #12]
 800acc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acca:	1a5b      	subs	r3, r3, r1
 800accc:	4543      	cmp	r3, r8
 800acce:	dcf0      	bgt.n	800acb2 <_printf_float+0x42a>
 800acd0:	e6fc      	b.n	800aacc <_printf_float+0x244>
 800acd2:	f04f 0800 	mov.w	r8, #0
 800acd6:	f104 0919 	add.w	r9, r4, #25
 800acda:	e7f4      	b.n	800acc6 <_printf_float+0x43e>

0800acdc <_printf_common>:
 800acdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ace0:	4616      	mov	r6, r2
 800ace2:	4698      	mov	r8, r3
 800ace4:	688a      	ldr	r2, [r1, #8]
 800ace6:	690b      	ldr	r3, [r1, #16]
 800ace8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800acec:	4293      	cmp	r3, r2
 800acee:	bfb8      	it	lt
 800acf0:	4613      	movlt	r3, r2
 800acf2:	6033      	str	r3, [r6, #0]
 800acf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800acf8:	4607      	mov	r7, r0
 800acfa:	460c      	mov	r4, r1
 800acfc:	b10a      	cbz	r2, 800ad02 <_printf_common+0x26>
 800acfe:	3301      	adds	r3, #1
 800ad00:	6033      	str	r3, [r6, #0]
 800ad02:	6823      	ldr	r3, [r4, #0]
 800ad04:	0699      	lsls	r1, r3, #26
 800ad06:	bf42      	ittt	mi
 800ad08:	6833      	ldrmi	r3, [r6, #0]
 800ad0a:	3302      	addmi	r3, #2
 800ad0c:	6033      	strmi	r3, [r6, #0]
 800ad0e:	6825      	ldr	r5, [r4, #0]
 800ad10:	f015 0506 	ands.w	r5, r5, #6
 800ad14:	d106      	bne.n	800ad24 <_printf_common+0x48>
 800ad16:	f104 0a19 	add.w	sl, r4, #25
 800ad1a:	68e3      	ldr	r3, [r4, #12]
 800ad1c:	6832      	ldr	r2, [r6, #0]
 800ad1e:	1a9b      	subs	r3, r3, r2
 800ad20:	42ab      	cmp	r3, r5
 800ad22:	dc26      	bgt.n	800ad72 <_printf_common+0x96>
 800ad24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad28:	6822      	ldr	r2, [r4, #0]
 800ad2a:	3b00      	subs	r3, #0
 800ad2c:	bf18      	it	ne
 800ad2e:	2301      	movne	r3, #1
 800ad30:	0692      	lsls	r2, r2, #26
 800ad32:	d42b      	bmi.n	800ad8c <_printf_common+0xb0>
 800ad34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad38:	4641      	mov	r1, r8
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	47c8      	blx	r9
 800ad3e:	3001      	adds	r0, #1
 800ad40:	d01e      	beq.n	800ad80 <_printf_common+0xa4>
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	6922      	ldr	r2, [r4, #16]
 800ad46:	f003 0306 	and.w	r3, r3, #6
 800ad4a:	2b04      	cmp	r3, #4
 800ad4c:	bf02      	ittt	eq
 800ad4e:	68e5      	ldreq	r5, [r4, #12]
 800ad50:	6833      	ldreq	r3, [r6, #0]
 800ad52:	1aed      	subeq	r5, r5, r3
 800ad54:	68a3      	ldr	r3, [r4, #8]
 800ad56:	bf0c      	ite	eq
 800ad58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad5c:	2500      	movne	r5, #0
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	bfc4      	itt	gt
 800ad62:	1a9b      	subgt	r3, r3, r2
 800ad64:	18ed      	addgt	r5, r5, r3
 800ad66:	2600      	movs	r6, #0
 800ad68:	341a      	adds	r4, #26
 800ad6a:	42b5      	cmp	r5, r6
 800ad6c:	d11a      	bne.n	800ada4 <_printf_common+0xc8>
 800ad6e:	2000      	movs	r0, #0
 800ad70:	e008      	b.n	800ad84 <_printf_common+0xa8>
 800ad72:	2301      	movs	r3, #1
 800ad74:	4652      	mov	r2, sl
 800ad76:	4641      	mov	r1, r8
 800ad78:	4638      	mov	r0, r7
 800ad7a:	47c8      	blx	r9
 800ad7c:	3001      	adds	r0, #1
 800ad7e:	d103      	bne.n	800ad88 <_printf_common+0xac>
 800ad80:	f04f 30ff 	mov.w	r0, #4294967295
 800ad84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad88:	3501      	adds	r5, #1
 800ad8a:	e7c6      	b.n	800ad1a <_printf_common+0x3e>
 800ad8c:	18e1      	adds	r1, r4, r3
 800ad8e:	1c5a      	adds	r2, r3, #1
 800ad90:	2030      	movs	r0, #48	@ 0x30
 800ad92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad96:	4422      	add	r2, r4
 800ad98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ada0:	3302      	adds	r3, #2
 800ada2:	e7c7      	b.n	800ad34 <_printf_common+0x58>
 800ada4:	2301      	movs	r3, #1
 800ada6:	4622      	mov	r2, r4
 800ada8:	4641      	mov	r1, r8
 800adaa:	4638      	mov	r0, r7
 800adac:	47c8      	blx	r9
 800adae:	3001      	adds	r0, #1
 800adb0:	d0e6      	beq.n	800ad80 <_printf_common+0xa4>
 800adb2:	3601      	adds	r6, #1
 800adb4:	e7d9      	b.n	800ad6a <_printf_common+0x8e>
	...

0800adb8 <_printf_i>:
 800adb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adbc:	7e0f      	ldrb	r7, [r1, #24]
 800adbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800adc0:	2f78      	cmp	r7, #120	@ 0x78
 800adc2:	4691      	mov	r9, r2
 800adc4:	4680      	mov	r8, r0
 800adc6:	460c      	mov	r4, r1
 800adc8:	469a      	mov	sl, r3
 800adca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800adce:	d807      	bhi.n	800ade0 <_printf_i+0x28>
 800add0:	2f62      	cmp	r7, #98	@ 0x62
 800add2:	d80a      	bhi.n	800adea <_printf_i+0x32>
 800add4:	2f00      	cmp	r7, #0
 800add6:	f000 80d2 	beq.w	800af7e <_printf_i+0x1c6>
 800adda:	2f58      	cmp	r7, #88	@ 0x58
 800addc:	f000 80b9 	beq.w	800af52 <_printf_i+0x19a>
 800ade0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ade4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ade8:	e03a      	b.n	800ae60 <_printf_i+0xa8>
 800adea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800adee:	2b15      	cmp	r3, #21
 800adf0:	d8f6      	bhi.n	800ade0 <_printf_i+0x28>
 800adf2:	a101      	add	r1, pc, #4	@ (adr r1, 800adf8 <_printf_i+0x40>)
 800adf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800adf8:	0800ae51 	.word	0x0800ae51
 800adfc:	0800ae65 	.word	0x0800ae65
 800ae00:	0800ade1 	.word	0x0800ade1
 800ae04:	0800ade1 	.word	0x0800ade1
 800ae08:	0800ade1 	.word	0x0800ade1
 800ae0c:	0800ade1 	.word	0x0800ade1
 800ae10:	0800ae65 	.word	0x0800ae65
 800ae14:	0800ade1 	.word	0x0800ade1
 800ae18:	0800ade1 	.word	0x0800ade1
 800ae1c:	0800ade1 	.word	0x0800ade1
 800ae20:	0800ade1 	.word	0x0800ade1
 800ae24:	0800af65 	.word	0x0800af65
 800ae28:	0800ae8f 	.word	0x0800ae8f
 800ae2c:	0800af1f 	.word	0x0800af1f
 800ae30:	0800ade1 	.word	0x0800ade1
 800ae34:	0800ade1 	.word	0x0800ade1
 800ae38:	0800af87 	.word	0x0800af87
 800ae3c:	0800ade1 	.word	0x0800ade1
 800ae40:	0800ae8f 	.word	0x0800ae8f
 800ae44:	0800ade1 	.word	0x0800ade1
 800ae48:	0800ade1 	.word	0x0800ade1
 800ae4c:	0800af27 	.word	0x0800af27
 800ae50:	6833      	ldr	r3, [r6, #0]
 800ae52:	1d1a      	adds	r2, r3, #4
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6032      	str	r2, [r6, #0]
 800ae58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae60:	2301      	movs	r3, #1
 800ae62:	e09d      	b.n	800afa0 <_printf_i+0x1e8>
 800ae64:	6833      	ldr	r3, [r6, #0]
 800ae66:	6820      	ldr	r0, [r4, #0]
 800ae68:	1d19      	adds	r1, r3, #4
 800ae6a:	6031      	str	r1, [r6, #0]
 800ae6c:	0606      	lsls	r6, r0, #24
 800ae6e:	d501      	bpl.n	800ae74 <_printf_i+0xbc>
 800ae70:	681d      	ldr	r5, [r3, #0]
 800ae72:	e003      	b.n	800ae7c <_printf_i+0xc4>
 800ae74:	0645      	lsls	r5, r0, #25
 800ae76:	d5fb      	bpl.n	800ae70 <_printf_i+0xb8>
 800ae78:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae7c:	2d00      	cmp	r5, #0
 800ae7e:	da03      	bge.n	800ae88 <_printf_i+0xd0>
 800ae80:	232d      	movs	r3, #45	@ 0x2d
 800ae82:	426d      	negs	r5, r5
 800ae84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae88:	4859      	ldr	r0, [pc, #356]	@ (800aff0 <_printf_i+0x238>)
 800ae8a:	230a      	movs	r3, #10
 800ae8c:	e011      	b.n	800aeb2 <_printf_i+0xfa>
 800ae8e:	6821      	ldr	r1, [r4, #0]
 800ae90:	6833      	ldr	r3, [r6, #0]
 800ae92:	0608      	lsls	r0, r1, #24
 800ae94:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae98:	d402      	bmi.n	800aea0 <_printf_i+0xe8>
 800ae9a:	0649      	lsls	r1, r1, #25
 800ae9c:	bf48      	it	mi
 800ae9e:	b2ad      	uxthmi	r5, r5
 800aea0:	2f6f      	cmp	r7, #111	@ 0x6f
 800aea2:	4853      	ldr	r0, [pc, #332]	@ (800aff0 <_printf_i+0x238>)
 800aea4:	6033      	str	r3, [r6, #0]
 800aea6:	bf14      	ite	ne
 800aea8:	230a      	movne	r3, #10
 800aeaa:	2308      	moveq	r3, #8
 800aeac:	2100      	movs	r1, #0
 800aeae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aeb2:	6866      	ldr	r6, [r4, #4]
 800aeb4:	60a6      	str	r6, [r4, #8]
 800aeb6:	2e00      	cmp	r6, #0
 800aeb8:	bfa2      	ittt	ge
 800aeba:	6821      	ldrge	r1, [r4, #0]
 800aebc:	f021 0104 	bicge.w	r1, r1, #4
 800aec0:	6021      	strge	r1, [r4, #0]
 800aec2:	b90d      	cbnz	r5, 800aec8 <_printf_i+0x110>
 800aec4:	2e00      	cmp	r6, #0
 800aec6:	d04b      	beq.n	800af60 <_printf_i+0x1a8>
 800aec8:	4616      	mov	r6, r2
 800aeca:	fbb5 f1f3 	udiv	r1, r5, r3
 800aece:	fb03 5711 	mls	r7, r3, r1, r5
 800aed2:	5dc7      	ldrb	r7, [r0, r7]
 800aed4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aed8:	462f      	mov	r7, r5
 800aeda:	42bb      	cmp	r3, r7
 800aedc:	460d      	mov	r5, r1
 800aede:	d9f4      	bls.n	800aeca <_printf_i+0x112>
 800aee0:	2b08      	cmp	r3, #8
 800aee2:	d10b      	bne.n	800aefc <_printf_i+0x144>
 800aee4:	6823      	ldr	r3, [r4, #0]
 800aee6:	07df      	lsls	r7, r3, #31
 800aee8:	d508      	bpl.n	800aefc <_printf_i+0x144>
 800aeea:	6923      	ldr	r3, [r4, #16]
 800aeec:	6861      	ldr	r1, [r4, #4]
 800aeee:	4299      	cmp	r1, r3
 800aef0:	bfde      	ittt	le
 800aef2:	2330      	movle	r3, #48	@ 0x30
 800aef4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aef8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aefc:	1b92      	subs	r2, r2, r6
 800aefe:	6122      	str	r2, [r4, #16]
 800af00:	f8cd a000 	str.w	sl, [sp]
 800af04:	464b      	mov	r3, r9
 800af06:	aa03      	add	r2, sp, #12
 800af08:	4621      	mov	r1, r4
 800af0a:	4640      	mov	r0, r8
 800af0c:	f7ff fee6 	bl	800acdc <_printf_common>
 800af10:	3001      	adds	r0, #1
 800af12:	d14a      	bne.n	800afaa <_printf_i+0x1f2>
 800af14:	f04f 30ff 	mov.w	r0, #4294967295
 800af18:	b004      	add	sp, #16
 800af1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af1e:	6823      	ldr	r3, [r4, #0]
 800af20:	f043 0320 	orr.w	r3, r3, #32
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	4833      	ldr	r0, [pc, #204]	@ (800aff4 <_printf_i+0x23c>)
 800af28:	2778      	movs	r7, #120	@ 0x78
 800af2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	6831      	ldr	r1, [r6, #0]
 800af32:	061f      	lsls	r7, r3, #24
 800af34:	f851 5b04 	ldr.w	r5, [r1], #4
 800af38:	d402      	bmi.n	800af40 <_printf_i+0x188>
 800af3a:	065f      	lsls	r7, r3, #25
 800af3c:	bf48      	it	mi
 800af3e:	b2ad      	uxthmi	r5, r5
 800af40:	6031      	str	r1, [r6, #0]
 800af42:	07d9      	lsls	r1, r3, #31
 800af44:	bf44      	itt	mi
 800af46:	f043 0320 	orrmi.w	r3, r3, #32
 800af4a:	6023      	strmi	r3, [r4, #0]
 800af4c:	b11d      	cbz	r5, 800af56 <_printf_i+0x19e>
 800af4e:	2310      	movs	r3, #16
 800af50:	e7ac      	b.n	800aeac <_printf_i+0xf4>
 800af52:	4827      	ldr	r0, [pc, #156]	@ (800aff0 <_printf_i+0x238>)
 800af54:	e7e9      	b.n	800af2a <_printf_i+0x172>
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	f023 0320 	bic.w	r3, r3, #32
 800af5c:	6023      	str	r3, [r4, #0]
 800af5e:	e7f6      	b.n	800af4e <_printf_i+0x196>
 800af60:	4616      	mov	r6, r2
 800af62:	e7bd      	b.n	800aee0 <_printf_i+0x128>
 800af64:	6833      	ldr	r3, [r6, #0]
 800af66:	6825      	ldr	r5, [r4, #0]
 800af68:	6961      	ldr	r1, [r4, #20]
 800af6a:	1d18      	adds	r0, r3, #4
 800af6c:	6030      	str	r0, [r6, #0]
 800af6e:	062e      	lsls	r6, r5, #24
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	d501      	bpl.n	800af78 <_printf_i+0x1c0>
 800af74:	6019      	str	r1, [r3, #0]
 800af76:	e002      	b.n	800af7e <_printf_i+0x1c6>
 800af78:	0668      	lsls	r0, r5, #25
 800af7a:	d5fb      	bpl.n	800af74 <_printf_i+0x1bc>
 800af7c:	8019      	strh	r1, [r3, #0]
 800af7e:	2300      	movs	r3, #0
 800af80:	6123      	str	r3, [r4, #16]
 800af82:	4616      	mov	r6, r2
 800af84:	e7bc      	b.n	800af00 <_printf_i+0x148>
 800af86:	6833      	ldr	r3, [r6, #0]
 800af88:	1d1a      	adds	r2, r3, #4
 800af8a:	6032      	str	r2, [r6, #0]
 800af8c:	681e      	ldr	r6, [r3, #0]
 800af8e:	6862      	ldr	r2, [r4, #4]
 800af90:	2100      	movs	r1, #0
 800af92:	4630      	mov	r0, r6
 800af94:	f7f5 f91c 	bl	80001d0 <memchr>
 800af98:	b108      	cbz	r0, 800af9e <_printf_i+0x1e6>
 800af9a:	1b80      	subs	r0, r0, r6
 800af9c:	6060      	str	r0, [r4, #4]
 800af9e:	6863      	ldr	r3, [r4, #4]
 800afa0:	6123      	str	r3, [r4, #16]
 800afa2:	2300      	movs	r3, #0
 800afa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afa8:	e7aa      	b.n	800af00 <_printf_i+0x148>
 800afaa:	6923      	ldr	r3, [r4, #16]
 800afac:	4632      	mov	r2, r6
 800afae:	4649      	mov	r1, r9
 800afb0:	4640      	mov	r0, r8
 800afb2:	47d0      	blx	sl
 800afb4:	3001      	adds	r0, #1
 800afb6:	d0ad      	beq.n	800af14 <_printf_i+0x15c>
 800afb8:	6823      	ldr	r3, [r4, #0]
 800afba:	079b      	lsls	r3, r3, #30
 800afbc:	d413      	bmi.n	800afe6 <_printf_i+0x22e>
 800afbe:	68e0      	ldr	r0, [r4, #12]
 800afc0:	9b03      	ldr	r3, [sp, #12]
 800afc2:	4298      	cmp	r0, r3
 800afc4:	bfb8      	it	lt
 800afc6:	4618      	movlt	r0, r3
 800afc8:	e7a6      	b.n	800af18 <_printf_i+0x160>
 800afca:	2301      	movs	r3, #1
 800afcc:	4632      	mov	r2, r6
 800afce:	4649      	mov	r1, r9
 800afd0:	4640      	mov	r0, r8
 800afd2:	47d0      	blx	sl
 800afd4:	3001      	adds	r0, #1
 800afd6:	d09d      	beq.n	800af14 <_printf_i+0x15c>
 800afd8:	3501      	adds	r5, #1
 800afda:	68e3      	ldr	r3, [r4, #12]
 800afdc:	9903      	ldr	r1, [sp, #12]
 800afde:	1a5b      	subs	r3, r3, r1
 800afe0:	42ab      	cmp	r3, r5
 800afe2:	dcf2      	bgt.n	800afca <_printf_i+0x212>
 800afe4:	e7eb      	b.n	800afbe <_printf_i+0x206>
 800afe6:	2500      	movs	r5, #0
 800afe8:	f104 0619 	add.w	r6, r4, #25
 800afec:	e7f5      	b.n	800afda <_printf_i+0x222>
 800afee:	bf00      	nop
 800aff0:	08010493 	.word	0x08010493
 800aff4:	080104a4 	.word	0x080104a4

0800aff8 <_scanf_float>:
 800aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affc:	b087      	sub	sp, #28
 800affe:	4617      	mov	r7, r2
 800b000:	9303      	str	r3, [sp, #12]
 800b002:	688b      	ldr	r3, [r1, #8]
 800b004:	1e5a      	subs	r2, r3, #1
 800b006:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b00a:	bf81      	itttt	hi
 800b00c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b010:	eb03 0b05 	addhi.w	fp, r3, r5
 800b014:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b018:	608b      	strhi	r3, [r1, #8]
 800b01a:	680b      	ldr	r3, [r1, #0]
 800b01c:	460a      	mov	r2, r1
 800b01e:	f04f 0500 	mov.w	r5, #0
 800b022:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b026:	f842 3b1c 	str.w	r3, [r2], #28
 800b02a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b02e:	4680      	mov	r8, r0
 800b030:	460c      	mov	r4, r1
 800b032:	bf98      	it	ls
 800b034:	f04f 0b00 	movls.w	fp, #0
 800b038:	9201      	str	r2, [sp, #4]
 800b03a:	4616      	mov	r6, r2
 800b03c:	46aa      	mov	sl, r5
 800b03e:	46a9      	mov	r9, r5
 800b040:	9502      	str	r5, [sp, #8]
 800b042:	68a2      	ldr	r2, [r4, #8]
 800b044:	b152      	cbz	r2, 800b05c <_scanf_float+0x64>
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	2b4e      	cmp	r3, #78	@ 0x4e
 800b04c:	d864      	bhi.n	800b118 <_scanf_float+0x120>
 800b04e:	2b40      	cmp	r3, #64	@ 0x40
 800b050:	d83c      	bhi.n	800b0cc <_scanf_float+0xd4>
 800b052:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b056:	b2c8      	uxtb	r0, r1
 800b058:	280e      	cmp	r0, #14
 800b05a:	d93a      	bls.n	800b0d2 <_scanf_float+0xda>
 800b05c:	f1b9 0f00 	cmp.w	r9, #0
 800b060:	d003      	beq.n	800b06a <_scanf_float+0x72>
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b06e:	f1ba 0f01 	cmp.w	sl, #1
 800b072:	f200 8117 	bhi.w	800b2a4 <_scanf_float+0x2ac>
 800b076:	9b01      	ldr	r3, [sp, #4]
 800b078:	429e      	cmp	r6, r3
 800b07a:	f200 8108 	bhi.w	800b28e <_scanf_float+0x296>
 800b07e:	2001      	movs	r0, #1
 800b080:	b007      	add	sp, #28
 800b082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b086:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b08a:	2a0d      	cmp	r2, #13
 800b08c:	d8e6      	bhi.n	800b05c <_scanf_float+0x64>
 800b08e:	a101      	add	r1, pc, #4	@ (adr r1, 800b094 <_scanf_float+0x9c>)
 800b090:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b094:	0800b1db 	.word	0x0800b1db
 800b098:	0800b05d 	.word	0x0800b05d
 800b09c:	0800b05d 	.word	0x0800b05d
 800b0a0:	0800b05d 	.word	0x0800b05d
 800b0a4:	0800b23b 	.word	0x0800b23b
 800b0a8:	0800b213 	.word	0x0800b213
 800b0ac:	0800b05d 	.word	0x0800b05d
 800b0b0:	0800b05d 	.word	0x0800b05d
 800b0b4:	0800b1e9 	.word	0x0800b1e9
 800b0b8:	0800b05d 	.word	0x0800b05d
 800b0bc:	0800b05d 	.word	0x0800b05d
 800b0c0:	0800b05d 	.word	0x0800b05d
 800b0c4:	0800b05d 	.word	0x0800b05d
 800b0c8:	0800b1a1 	.word	0x0800b1a1
 800b0cc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b0d0:	e7db      	b.n	800b08a <_scanf_float+0x92>
 800b0d2:	290e      	cmp	r1, #14
 800b0d4:	d8c2      	bhi.n	800b05c <_scanf_float+0x64>
 800b0d6:	a001      	add	r0, pc, #4	@ (adr r0, 800b0dc <_scanf_float+0xe4>)
 800b0d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b0dc:	0800b191 	.word	0x0800b191
 800b0e0:	0800b05d 	.word	0x0800b05d
 800b0e4:	0800b191 	.word	0x0800b191
 800b0e8:	0800b227 	.word	0x0800b227
 800b0ec:	0800b05d 	.word	0x0800b05d
 800b0f0:	0800b139 	.word	0x0800b139
 800b0f4:	0800b177 	.word	0x0800b177
 800b0f8:	0800b177 	.word	0x0800b177
 800b0fc:	0800b177 	.word	0x0800b177
 800b100:	0800b177 	.word	0x0800b177
 800b104:	0800b177 	.word	0x0800b177
 800b108:	0800b177 	.word	0x0800b177
 800b10c:	0800b177 	.word	0x0800b177
 800b110:	0800b177 	.word	0x0800b177
 800b114:	0800b177 	.word	0x0800b177
 800b118:	2b6e      	cmp	r3, #110	@ 0x6e
 800b11a:	d809      	bhi.n	800b130 <_scanf_float+0x138>
 800b11c:	2b60      	cmp	r3, #96	@ 0x60
 800b11e:	d8b2      	bhi.n	800b086 <_scanf_float+0x8e>
 800b120:	2b54      	cmp	r3, #84	@ 0x54
 800b122:	d07b      	beq.n	800b21c <_scanf_float+0x224>
 800b124:	2b59      	cmp	r3, #89	@ 0x59
 800b126:	d199      	bne.n	800b05c <_scanf_float+0x64>
 800b128:	2d07      	cmp	r5, #7
 800b12a:	d197      	bne.n	800b05c <_scanf_float+0x64>
 800b12c:	2508      	movs	r5, #8
 800b12e:	e02c      	b.n	800b18a <_scanf_float+0x192>
 800b130:	2b74      	cmp	r3, #116	@ 0x74
 800b132:	d073      	beq.n	800b21c <_scanf_float+0x224>
 800b134:	2b79      	cmp	r3, #121	@ 0x79
 800b136:	e7f6      	b.n	800b126 <_scanf_float+0x12e>
 800b138:	6821      	ldr	r1, [r4, #0]
 800b13a:	05c8      	lsls	r0, r1, #23
 800b13c:	d51b      	bpl.n	800b176 <_scanf_float+0x17e>
 800b13e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b142:	6021      	str	r1, [r4, #0]
 800b144:	f109 0901 	add.w	r9, r9, #1
 800b148:	f1bb 0f00 	cmp.w	fp, #0
 800b14c:	d003      	beq.n	800b156 <_scanf_float+0x15e>
 800b14e:	3201      	adds	r2, #1
 800b150:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b154:	60a2      	str	r2, [r4, #8]
 800b156:	68a3      	ldr	r3, [r4, #8]
 800b158:	3b01      	subs	r3, #1
 800b15a:	60a3      	str	r3, [r4, #8]
 800b15c:	6923      	ldr	r3, [r4, #16]
 800b15e:	3301      	adds	r3, #1
 800b160:	6123      	str	r3, [r4, #16]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	3b01      	subs	r3, #1
 800b166:	2b00      	cmp	r3, #0
 800b168:	607b      	str	r3, [r7, #4]
 800b16a:	f340 8087 	ble.w	800b27c <_scanf_float+0x284>
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	3301      	adds	r3, #1
 800b172:	603b      	str	r3, [r7, #0]
 800b174:	e765      	b.n	800b042 <_scanf_float+0x4a>
 800b176:	eb1a 0105 	adds.w	r1, sl, r5
 800b17a:	f47f af6f 	bne.w	800b05c <_scanf_float+0x64>
 800b17e:	6822      	ldr	r2, [r4, #0]
 800b180:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b184:	6022      	str	r2, [r4, #0]
 800b186:	460d      	mov	r5, r1
 800b188:	468a      	mov	sl, r1
 800b18a:	f806 3b01 	strb.w	r3, [r6], #1
 800b18e:	e7e2      	b.n	800b156 <_scanf_float+0x15e>
 800b190:	6822      	ldr	r2, [r4, #0]
 800b192:	0610      	lsls	r0, r2, #24
 800b194:	f57f af62 	bpl.w	800b05c <_scanf_float+0x64>
 800b198:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b19c:	6022      	str	r2, [r4, #0]
 800b19e:	e7f4      	b.n	800b18a <_scanf_float+0x192>
 800b1a0:	f1ba 0f00 	cmp.w	sl, #0
 800b1a4:	d10e      	bne.n	800b1c4 <_scanf_float+0x1cc>
 800b1a6:	f1b9 0f00 	cmp.w	r9, #0
 800b1aa:	d10e      	bne.n	800b1ca <_scanf_float+0x1d2>
 800b1ac:	6822      	ldr	r2, [r4, #0]
 800b1ae:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b1b2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b1b6:	d108      	bne.n	800b1ca <_scanf_float+0x1d2>
 800b1b8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b1bc:	6022      	str	r2, [r4, #0]
 800b1be:	f04f 0a01 	mov.w	sl, #1
 800b1c2:	e7e2      	b.n	800b18a <_scanf_float+0x192>
 800b1c4:	f1ba 0f02 	cmp.w	sl, #2
 800b1c8:	d055      	beq.n	800b276 <_scanf_float+0x27e>
 800b1ca:	2d01      	cmp	r5, #1
 800b1cc:	d002      	beq.n	800b1d4 <_scanf_float+0x1dc>
 800b1ce:	2d04      	cmp	r5, #4
 800b1d0:	f47f af44 	bne.w	800b05c <_scanf_float+0x64>
 800b1d4:	3501      	adds	r5, #1
 800b1d6:	b2ed      	uxtb	r5, r5
 800b1d8:	e7d7      	b.n	800b18a <_scanf_float+0x192>
 800b1da:	f1ba 0f01 	cmp.w	sl, #1
 800b1de:	f47f af3d 	bne.w	800b05c <_scanf_float+0x64>
 800b1e2:	f04f 0a02 	mov.w	sl, #2
 800b1e6:	e7d0      	b.n	800b18a <_scanf_float+0x192>
 800b1e8:	b97d      	cbnz	r5, 800b20a <_scanf_float+0x212>
 800b1ea:	f1b9 0f00 	cmp.w	r9, #0
 800b1ee:	f47f af38 	bne.w	800b062 <_scanf_float+0x6a>
 800b1f2:	6822      	ldr	r2, [r4, #0]
 800b1f4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b1f8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b1fc:	f040 8108 	bne.w	800b410 <_scanf_float+0x418>
 800b200:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b204:	6022      	str	r2, [r4, #0]
 800b206:	2501      	movs	r5, #1
 800b208:	e7bf      	b.n	800b18a <_scanf_float+0x192>
 800b20a:	2d03      	cmp	r5, #3
 800b20c:	d0e2      	beq.n	800b1d4 <_scanf_float+0x1dc>
 800b20e:	2d05      	cmp	r5, #5
 800b210:	e7de      	b.n	800b1d0 <_scanf_float+0x1d8>
 800b212:	2d02      	cmp	r5, #2
 800b214:	f47f af22 	bne.w	800b05c <_scanf_float+0x64>
 800b218:	2503      	movs	r5, #3
 800b21a:	e7b6      	b.n	800b18a <_scanf_float+0x192>
 800b21c:	2d06      	cmp	r5, #6
 800b21e:	f47f af1d 	bne.w	800b05c <_scanf_float+0x64>
 800b222:	2507      	movs	r5, #7
 800b224:	e7b1      	b.n	800b18a <_scanf_float+0x192>
 800b226:	6822      	ldr	r2, [r4, #0]
 800b228:	0591      	lsls	r1, r2, #22
 800b22a:	f57f af17 	bpl.w	800b05c <_scanf_float+0x64>
 800b22e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b232:	6022      	str	r2, [r4, #0]
 800b234:	f8cd 9008 	str.w	r9, [sp, #8]
 800b238:	e7a7      	b.n	800b18a <_scanf_float+0x192>
 800b23a:	6822      	ldr	r2, [r4, #0]
 800b23c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b240:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b244:	d006      	beq.n	800b254 <_scanf_float+0x25c>
 800b246:	0550      	lsls	r0, r2, #21
 800b248:	f57f af08 	bpl.w	800b05c <_scanf_float+0x64>
 800b24c:	f1b9 0f00 	cmp.w	r9, #0
 800b250:	f000 80de 	beq.w	800b410 <_scanf_float+0x418>
 800b254:	0591      	lsls	r1, r2, #22
 800b256:	bf58      	it	pl
 800b258:	9902      	ldrpl	r1, [sp, #8]
 800b25a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b25e:	bf58      	it	pl
 800b260:	eba9 0101 	subpl.w	r1, r9, r1
 800b264:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b268:	bf58      	it	pl
 800b26a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b26e:	6022      	str	r2, [r4, #0]
 800b270:	f04f 0900 	mov.w	r9, #0
 800b274:	e789      	b.n	800b18a <_scanf_float+0x192>
 800b276:	f04f 0a03 	mov.w	sl, #3
 800b27a:	e786      	b.n	800b18a <_scanf_float+0x192>
 800b27c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b280:	4639      	mov	r1, r7
 800b282:	4640      	mov	r0, r8
 800b284:	4798      	blx	r3
 800b286:	2800      	cmp	r0, #0
 800b288:	f43f aedb 	beq.w	800b042 <_scanf_float+0x4a>
 800b28c:	e6e6      	b.n	800b05c <_scanf_float+0x64>
 800b28e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b292:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b296:	463a      	mov	r2, r7
 800b298:	4640      	mov	r0, r8
 800b29a:	4798      	blx	r3
 800b29c:	6923      	ldr	r3, [r4, #16]
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	6123      	str	r3, [r4, #16]
 800b2a2:	e6e8      	b.n	800b076 <_scanf_float+0x7e>
 800b2a4:	1e6b      	subs	r3, r5, #1
 800b2a6:	2b06      	cmp	r3, #6
 800b2a8:	d824      	bhi.n	800b2f4 <_scanf_float+0x2fc>
 800b2aa:	2d02      	cmp	r5, #2
 800b2ac:	d836      	bhi.n	800b31c <_scanf_float+0x324>
 800b2ae:	9b01      	ldr	r3, [sp, #4]
 800b2b0:	429e      	cmp	r6, r3
 800b2b2:	f67f aee4 	bls.w	800b07e <_scanf_float+0x86>
 800b2b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b2be:	463a      	mov	r2, r7
 800b2c0:	4640      	mov	r0, r8
 800b2c2:	4798      	blx	r3
 800b2c4:	6923      	ldr	r3, [r4, #16]
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	6123      	str	r3, [r4, #16]
 800b2ca:	e7f0      	b.n	800b2ae <_scanf_float+0x2b6>
 800b2cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2d0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b2d4:	463a      	mov	r2, r7
 800b2d6:	4640      	mov	r0, r8
 800b2d8:	4798      	blx	r3
 800b2da:	6923      	ldr	r3, [r4, #16]
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	6123      	str	r3, [r4, #16]
 800b2e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2e4:	fa5f fa8a 	uxtb.w	sl, sl
 800b2e8:	f1ba 0f02 	cmp.w	sl, #2
 800b2ec:	d1ee      	bne.n	800b2cc <_scanf_float+0x2d4>
 800b2ee:	3d03      	subs	r5, #3
 800b2f0:	b2ed      	uxtb	r5, r5
 800b2f2:	1b76      	subs	r6, r6, r5
 800b2f4:	6823      	ldr	r3, [r4, #0]
 800b2f6:	05da      	lsls	r2, r3, #23
 800b2f8:	d530      	bpl.n	800b35c <_scanf_float+0x364>
 800b2fa:	055b      	lsls	r3, r3, #21
 800b2fc:	d511      	bpl.n	800b322 <_scanf_float+0x32a>
 800b2fe:	9b01      	ldr	r3, [sp, #4]
 800b300:	429e      	cmp	r6, r3
 800b302:	f67f aebc 	bls.w	800b07e <_scanf_float+0x86>
 800b306:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b30a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b30e:	463a      	mov	r2, r7
 800b310:	4640      	mov	r0, r8
 800b312:	4798      	blx	r3
 800b314:	6923      	ldr	r3, [r4, #16]
 800b316:	3b01      	subs	r3, #1
 800b318:	6123      	str	r3, [r4, #16]
 800b31a:	e7f0      	b.n	800b2fe <_scanf_float+0x306>
 800b31c:	46aa      	mov	sl, r5
 800b31e:	46b3      	mov	fp, r6
 800b320:	e7de      	b.n	800b2e0 <_scanf_float+0x2e8>
 800b322:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b326:	6923      	ldr	r3, [r4, #16]
 800b328:	2965      	cmp	r1, #101	@ 0x65
 800b32a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b32e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b332:	6123      	str	r3, [r4, #16]
 800b334:	d00c      	beq.n	800b350 <_scanf_float+0x358>
 800b336:	2945      	cmp	r1, #69	@ 0x45
 800b338:	d00a      	beq.n	800b350 <_scanf_float+0x358>
 800b33a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b33e:	463a      	mov	r2, r7
 800b340:	4640      	mov	r0, r8
 800b342:	4798      	blx	r3
 800b344:	6923      	ldr	r3, [r4, #16]
 800b346:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b34a:	3b01      	subs	r3, #1
 800b34c:	1eb5      	subs	r5, r6, #2
 800b34e:	6123      	str	r3, [r4, #16]
 800b350:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b354:	463a      	mov	r2, r7
 800b356:	4640      	mov	r0, r8
 800b358:	4798      	blx	r3
 800b35a:	462e      	mov	r6, r5
 800b35c:	6822      	ldr	r2, [r4, #0]
 800b35e:	f012 0210 	ands.w	r2, r2, #16
 800b362:	d001      	beq.n	800b368 <_scanf_float+0x370>
 800b364:	2000      	movs	r0, #0
 800b366:	e68b      	b.n	800b080 <_scanf_float+0x88>
 800b368:	7032      	strb	r2, [r6, #0]
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b374:	d11c      	bne.n	800b3b0 <_scanf_float+0x3b8>
 800b376:	9b02      	ldr	r3, [sp, #8]
 800b378:	454b      	cmp	r3, r9
 800b37a:	eba3 0209 	sub.w	r2, r3, r9
 800b37e:	d123      	bne.n	800b3c8 <_scanf_float+0x3d0>
 800b380:	9901      	ldr	r1, [sp, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	4640      	mov	r0, r8
 800b386:	f7ff f947 	bl	800a618 <_strtod_r>
 800b38a:	9b03      	ldr	r3, [sp, #12]
 800b38c:	6821      	ldr	r1, [r4, #0]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f011 0f02 	tst.w	r1, #2
 800b394:	ec57 6b10 	vmov	r6, r7, d0
 800b398:	f103 0204 	add.w	r2, r3, #4
 800b39c:	d01f      	beq.n	800b3de <_scanf_float+0x3e6>
 800b39e:	9903      	ldr	r1, [sp, #12]
 800b3a0:	600a      	str	r2, [r1, #0]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	e9c3 6700 	strd	r6, r7, [r3]
 800b3a8:	68e3      	ldr	r3, [r4, #12]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	60e3      	str	r3, [r4, #12]
 800b3ae:	e7d9      	b.n	800b364 <_scanf_float+0x36c>
 800b3b0:	9b04      	ldr	r3, [sp, #16]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d0e4      	beq.n	800b380 <_scanf_float+0x388>
 800b3b6:	9905      	ldr	r1, [sp, #20]
 800b3b8:	230a      	movs	r3, #10
 800b3ba:	3101      	adds	r1, #1
 800b3bc:	4640      	mov	r0, r8
 800b3be:	f7ff f9b7 	bl	800a730 <_strtol_r>
 800b3c2:	9b04      	ldr	r3, [sp, #16]
 800b3c4:	9e05      	ldr	r6, [sp, #20]
 800b3c6:	1ac2      	subs	r2, r0, r3
 800b3c8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b3cc:	429e      	cmp	r6, r3
 800b3ce:	bf28      	it	cs
 800b3d0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b3d4:	4910      	ldr	r1, [pc, #64]	@ (800b418 <_scanf_float+0x420>)
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	f000 f8e4 	bl	800b5a4 <siprintf>
 800b3dc:	e7d0      	b.n	800b380 <_scanf_float+0x388>
 800b3de:	f011 0f04 	tst.w	r1, #4
 800b3e2:	9903      	ldr	r1, [sp, #12]
 800b3e4:	600a      	str	r2, [r1, #0]
 800b3e6:	d1dc      	bne.n	800b3a2 <_scanf_float+0x3aa>
 800b3e8:	681d      	ldr	r5, [r3, #0]
 800b3ea:	4632      	mov	r2, r6
 800b3ec:	463b      	mov	r3, r7
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	4639      	mov	r1, r7
 800b3f2:	f7f5 fb9b 	bl	8000b2c <__aeabi_dcmpun>
 800b3f6:	b128      	cbz	r0, 800b404 <_scanf_float+0x40c>
 800b3f8:	4808      	ldr	r0, [pc, #32]	@ (800b41c <_scanf_float+0x424>)
 800b3fa:	f000 fa3d 	bl	800b878 <nanf>
 800b3fe:	ed85 0a00 	vstr	s0, [r5]
 800b402:	e7d1      	b.n	800b3a8 <_scanf_float+0x3b0>
 800b404:	4630      	mov	r0, r6
 800b406:	4639      	mov	r1, r7
 800b408:	f7f5 fbee 	bl	8000be8 <__aeabi_d2f>
 800b40c:	6028      	str	r0, [r5, #0]
 800b40e:	e7cb      	b.n	800b3a8 <_scanf_float+0x3b0>
 800b410:	f04f 0900 	mov.w	r9, #0
 800b414:	e629      	b.n	800b06a <_scanf_float+0x72>
 800b416:	bf00      	nop
 800b418:	080104b5 	.word	0x080104b5
 800b41c:	0801056e 	.word	0x0801056e

0800b420 <std>:
 800b420:	2300      	movs	r3, #0
 800b422:	b510      	push	{r4, lr}
 800b424:	4604      	mov	r4, r0
 800b426:	e9c0 3300 	strd	r3, r3, [r0]
 800b42a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b42e:	6083      	str	r3, [r0, #8]
 800b430:	8181      	strh	r1, [r0, #12]
 800b432:	6643      	str	r3, [r0, #100]	@ 0x64
 800b434:	81c2      	strh	r2, [r0, #14]
 800b436:	6183      	str	r3, [r0, #24]
 800b438:	4619      	mov	r1, r3
 800b43a:	2208      	movs	r2, #8
 800b43c:	305c      	adds	r0, #92	@ 0x5c
 800b43e:	f000 f914 	bl	800b66a <memset>
 800b442:	4b0d      	ldr	r3, [pc, #52]	@ (800b478 <std+0x58>)
 800b444:	6263      	str	r3, [r4, #36]	@ 0x24
 800b446:	4b0d      	ldr	r3, [pc, #52]	@ (800b47c <std+0x5c>)
 800b448:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b44a:	4b0d      	ldr	r3, [pc, #52]	@ (800b480 <std+0x60>)
 800b44c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b44e:	4b0d      	ldr	r3, [pc, #52]	@ (800b484 <std+0x64>)
 800b450:	6323      	str	r3, [r4, #48]	@ 0x30
 800b452:	4b0d      	ldr	r3, [pc, #52]	@ (800b488 <std+0x68>)
 800b454:	6224      	str	r4, [r4, #32]
 800b456:	429c      	cmp	r4, r3
 800b458:	d006      	beq.n	800b468 <std+0x48>
 800b45a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b45e:	4294      	cmp	r4, r2
 800b460:	d002      	beq.n	800b468 <std+0x48>
 800b462:	33d0      	adds	r3, #208	@ 0xd0
 800b464:	429c      	cmp	r4, r3
 800b466:	d105      	bne.n	800b474 <std+0x54>
 800b468:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b470:	f000 b9e6 	b.w	800b840 <__retarget_lock_init_recursive>
 800b474:	bd10      	pop	{r4, pc}
 800b476:	bf00      	nop
 800b478:	0800b5e5 	.word	0x0800b5e5
 800b47c:	0800b607 	.word	0x0800b607
 800b480:	0800b63f 	.word	0x0800b63f
 800b484:	0800b663 	.word	0x0800b663
 800b488:	2000061c 	.word	0x2000061c

0800b48c <stdio_exit_handler>:
 800b48c:	4a02      	ldr	r2, [pc, #8]	@ (800b498 <stdio_exit_handler+0xc>)
 800b48e:	4903      	ldr	r1, [pc, #12]	@ (800b49c <stdio_exit_handler+0x10>)
 800b490:	4803      	ldr	r0, [pc, #12]	@ (800b4a0 <stdio_exit_handler+0x14>)
 800b492:	f000 b869 	b.w	800b568 <_fwalk_sglue>
 800b496:	bf00      	nop
 800b498:	200000ec 	.word	0x200000ec
 800b49c:	0800db25 	.word	0x0800db25
 800b4a0:	20000268 	.word	0x20000268

0800b4a4 <cleanup_stdio>:
 800b4a4:	6841      	ldr	r1, [r0, #4]
 800b4a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b4d8 <cleanup_stdio+0x34>)
 800b4a8:	4299      	cmp	r1, r3
 800b4aa:	b510      	push	{r4, lr}
 800b4ac:	4604      	mov	r4, r0
 800b4ae:	d001      	beq.n	800b4b4 <cleanup_stdio+0x10>
 800b4b0:	f002 fb38 	bl	800db24 <_fflush_r>
 800b4b4:	68a1      	ldr	r1, [r4, #8]
 800b4b6:	4b09      	ldr	r3, [pc, #36]	@ (800b4dc <cleanup_stdio+0x38>)
 800b4b8:	4299      	cmp	r1, r3
 800b4ba:	d002      	beq.n	800b4c2 <cleanup_stdio+0x1e>
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f002 fb31 	bl	800db24 <_fflush_r>
 800b4c2:	68e1      	ldr	r1, [r4, #12]
 800b4c4:	4b06      	ldr	r3, [pc, #24]	@ (800b4e0 <cleanup_stdio+0x3c>)
 800b4c6:	4299      	cmp	r1, r3
 800b4c8:	d004      	beq.n	800b4d4 <cleanup_stdio+0x30>
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d0:	f002 bb28 	b.w	800db24 <_fflush_r>
 800b4d4:	bd10      	pop	{r4, pc}
 800b4d6:	bf00      	nop
 800b4d8:	2000061c 	.word	0x2000061c
 800b4dc:	20000684 	.word	0x20000684
 800b4e0:	200006ec 	.word	0x200006ec

0800b4e4 <global_stdio_init.part.0>:
 800b4e4:	b510      	push	{r4, lr}
 800b4e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b514 <global_stdio_init.part.0+0x30>)
 800b4e8:	4c0b      	ldr	r4, [pc, #44]	@ (800b518 <global_stdio_init.part.0+0x34>)
 800b4ea:	4a0c      	ldr	r2, [pc, #48]	@ (800b51c <global_stdio_init.part.0+0x38>)
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	2104      	movs	r1, #4
 800b4f4:	f7ff ff94 	bl	800b420 <std>
 800b4f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	2109      	movs	r1, #9
 800b500:	f7ff ff8e 	bl	800b420 <std>
 800b504:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b508:	2202      	movs	r2, #2
 800b50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b50e:	2112      	movs	r1, #18
 800b510:	f7ff bf86 	b.w	800b420 <std>
 800b514:	20000754 	.word	0x20000754
 800b518:	2000061c 	.word	0x2000061c
 800b51c:	0800b48d 	.word	0x0800b48d

0800b520 <__sfp_lock_acquire>:
 800b520:	4801      	ldr	r0, [pc, #4]	@ (800b528 <__sfp_lock_acquire+0x8>)
 800b522:	f000 b98e 	b.w	800b842 <__retarget_lock_acquire_recursive>
 800b526:	bf00      	nop
 800b528:	2000075d 	.word	0x2000075d

0800b52c <__sfp_lock_release>:
 800b52c:	4801      	ldr	r0, [pc, #4]	@ (800b534 <__sfp_lock_release+0x8>)
 800b52e:	f000 b989 	b.w	800b844 <__retarget_lock_release_recursive>
 800b532:	bf00      	nop
 800b534:	2000075d 	.word	0x2000075d

0800b538 <__sinit>:
 800b538:	b510      	push	{r4, lr}
 800b53a:	4604      	mov	r4, r0
 800b53c:	f7ff fff0 	bl	800b520 <__sfp_lock_acquire>
 800b540:	6a23      	ldr	r3, [r4, #32]
 800b542:	b11b      	cbz	r3, 800b54c <__sinit+0x14>
 800b544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b548:	f7ff bff0 	b.w	800b52c <__sfp_lock_release>
 800b54c:	4b04      	ldr	r3, [pc, #16]	@ (800b560 <__sinit+0x28>)
 800b54e:	6223      	str	r3, [r4, #32]
 800b550:	4b04      	ldr	r3, [pc, #16]	@ (800b564 <__sinit+0x2c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1f5      	bne.n	800b544 <__sinit+0xc>
 800b558:	f7ff ffc4 	bl	800b4e4 <global_stdio_init.part.0>
 800b55c:	e7f2      	b.n	800b544 <__sinit+0xc>
 800b55e:	bf00      	nop
 800b560:	0800b4a5 	.word	0x0800b4a5
 800b564:	20000754 	.word	0x20000754

0800b568 <_fwalk_sglue>:
 800b568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b56c:	4607      	mov	r7, r0
 800b56e:	4688      	mov	r8, r1
 800b570:	4614      	mov	r4, r2
 800b572:	2600      	movs	r6, #0
 800b574:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b578:	f1b9 0901 	subs.w	r9, r9, #1
 800b57c:	d505      	bpl.n	800b58a <_fwalk_sglue+0x22>
 800b57e:	6824      	ldr	r4, [r4, #0]
 800b580:	2c00      	cmp	r4, #0
 800b582:	d1f7      	bne.n	800b574 <_fwalk_sglue+0xc>
 800b584:	4630      	mov	r0, r6
 800b586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b58a:	89ab      	ldrh	r3, [r5, #12]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d907      	bls.n	800b5a0 <_fwalk_sglue+0x38>
 800b590:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b594:	3301      	adds	r3, #1
 800b596:	d003      	beq.n	800b5a0 <_fwalk_sglue+0x38>
 800b598:	4629      	mov	r1, r5
 800b59a:	4638      	mov	r0, r7
 800b59c:	47c0      	blx	r8
 800b59e:	4306      	orrs	r6, r0
 800b5a0:	3568      	adds	r5, #104	@ 0x68
 800b5a2:	e7e9      	b.n	800b578 <_fwalk_sglue+0x10>

0800b5a4 <siprintf>:
 800b5a4:	b40e      	push	{r1, r2, r3}
 800b5a6:	b500      	push	{lr}
 800b5a8:	b09c      	sub	sp, #112	@ 0x70
 800b5aa:	ab1d      	add	r3, sp, #116	@ 0x74
 800b5ac:	9002      	str	r0, [sp, #8]
 800b5ae:	9006      	str	r0, [sp, #24]
 800b5b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b5b4:	4809      	ldr	r0, [pc, #36]	@ (800b5dc <siprintf+0x38>)
 800b5b6:	9107      	str	r1, [sp, #28]
 800b5b8:	9104      	str	r1, [sp, #16]
 800b5ba:	4909      	ldr	r1, [pc, #36]	@ (800b5e0 <siprintf+0x3c>)
 800b5bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5c0:	9105      	str	r1, [sp, #20]
 800b5c2:	6800      	ldr	r0, [r0, #0]
 800b5c4:	9301      	str	r3, [sp, #4]
 800b5c6:	a902      	add	r1, sp, #8
 800b5c8:	f002 f92c 	bl	800d824 <_svfiprintf_r>
 800b5cc:	9b02      	ldr	r3, [sp, #8]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	701a      	strb	r2, [r3, #0]
 800b5d2:	b01c      	add	sp, #112	@ 0x70
 800b5d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5d8:	b003      	add	sp, #12
 800b5da:	4770      	bx	lr
 800b5dc:	20000264 	.word	0x20000264
 800b5e0:	ffff0208 	.word	0xffff0208

0800b5e4 <__sread>:
 800b5e4:	b510      	push	{r4, lr}
 800b5e6:	460c      	mov	r4, r1
 800b5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ec:	f000 f8da 	bl	800b7a4 <_read_r>
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	bfab      	itete	ge
 800b5f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b5f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b5f8:	181b      	addge	r3, r3, r0
 800b5fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b5fe:	bfac      	ite	ge
 800b600:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b602:	81a3      	strhlt	r3, [r4, #12]
 800b604:	bd10      	pop	{r4, pc}

0800b606 <__swrite>:
 800b606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b60a:	461f      	mov	r7, r3
 800b60c:	898b      	ldrh	r3, [r1, #12]
 800b60e:	05db      	lsls	r3, r3, #23
 800b610:	4605      	mov	r5, r0
 800b612:	460c      	mov	r4, r1
 800b614:	4616      	mov	r6, r2
 800b616:	d505      	bpl.n	800b624 <__swrite+0x1e>
 800b618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b61c:	2302      	movs	r3, #2
 800b61e:	2200      	movs	r2, #0
 800b620:	f000 f8ae 	bl	800b780 <_lseek_r>
 800b624:	89a3      	ldrh	r3, [r4, #12]
 800b626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b62a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b62e:	81a3      	strh	r3, [r4, #12]
 800b630:	4632      	mov	r2, r6
 800b632:	463b      	mov	r3, r7
 800b634:	4628      	mov	r0, r5
 800b636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b63a:	f000 b8c5 	b.w	800b7c8 <_write_r>

0800b63e <__sseek>:
 800b63e:	b510      	push	{r4, lr}
 800b640:	460c      	mov	r4, r1
 800b642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b646:	f000 f89b 	bl	800b780 <_lseek_r>
 800b64a:	1c43      	adds	r3, r0, #1
 800b64c:	89a3      	ldrh	r3, [r4, #12]
 800b64e:	bf15      	itete	ne
 800b650:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b652:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b656:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b65a:	81a3      	strheq	r3, [r4, #12]
 800b65c:	bf18      	it	ne
 800b65e:	81a3      	strhne	r3, [r4, #12]
 800b660:	bd10      	pop	{r4, pc}

0800b662 <__sclose>:
 800b662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b666:	f000 b87b 	b.w	800b760 <_close_r>

0800b66a <memset>:
 800b66a:	4402      	add	r2, r0
 800b66c:	4603      	mov	r3, r0
 800b66e:	4293      	cmp	r3, r2
 800b670:	d100      	bne.n	800b674 <memset+0xa>
 800b672:	4770      	bx	lr
 800b674:	f803 1b01 	strb.w	r1, [r3], #1
 800b678:	e7f9      	b.n	800b66e <memset+0x4>

0800b67a <strncmp>:
 800b67a:	b510      	push	{r4, lr}
 800b67c:	b16a      	cbz	r2, 800b69a <strncmp+0x20>
 800b67e:	3901      	subs	r1, #1
 800b680:	1884      	adds	r4, r0, r2
 800b682:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b686:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d103      	bne.n	800b696 <strncmp+0x1c>
 800b68e:	42a0      	cmp	r0, r4
 800b690:	d001      	beq.n	800b696 <strncmp+0x1c>
 800b692:	2a00      	cmp	r2, #0
 800b694:	d1f5      	bne.n	800b682 <strncmp+0x8>
 800b696:	1ad0      	subs	r0, r2, r3
 800b698:	bd10      	pop	{r4, pc}
 800b69a:	4610      	mov	r0, r2
 800b69c:	e7fc      	b.n	800b698 <strncmp+0x1e>
	...

0800b6a0 <strtok>:
 800b6a0:	4b16      	ldr	r3, [pc, #88]	@ (800b6fc <strtok+0x5c>)
 800b6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a6:	681f      	ldr	r7, [r3, #0]
 800b6a8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b6aa:	4605      	mov	r5, r0
 800b6ac:	460e      	mov	r6, r1
 800b6ae:	b9ec      	cbnz	r4, 800b6ec <strtok+0x4c>
 800b6b0:	2050      	movs	r0, #80	@ 0x50
 800b6b2:	f001 fad5 	bl	800cc60 <malloc>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	6478      	str	r0, [r7, #68]	@ 0x44
 800b6ba:	b920      	cbnz	r0, 800b6c6 <strtok+0x26>
 800b6bc:	4b10      	ldr	r3, [pc, #64]	@ (800b700 <strtok+0x60>)
 800b6be:	4811      	ldr	r0, [pc, #68]	@ (800b704 <strtok+0x64>)
 800b6c0:	215b      	movs	r1, #91	@ 0x5b
 800b6c2:	f000 f8df 	bl	800b884 <__assert_func>
 800b6c6:	e9c0 4400 	strd	r4, r4, [r0]
 800b6ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b6ce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b6d2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b6d6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b6da:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b6de:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b6e2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b6e6:	6184      	str	r4, [r0, #24]
 800b6e8:	7704      	strb	r4, [r0, #28]
 800b6ea:	6244      	str	r4, [r0, #36]	@ 0x24
 800b6ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6ee:	4631      	mov	r1, r6
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f8:	f000 b806 	b.w	800b708 <__strtok_r>
 800b6fc:	20000264 	.word	0x20000264
 800b700:	080104ba 	.word	0x080104ba
 800b704:	080104d1 	.word	0x080104d1

0800b708 <__strtok_r>:
 800b708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b70a:	4604      	mov	r4, r0
 800b70c:	b908      	cbnz	r0, 800b712 <__strtok_r+0xa>
 800b70e:	6814      	ldr	r4, [r2, #0]
 800b710:	b144      	cbz	r4, 800b724 <__strtok_r+0x1c>
 800b712:	4620      	mov	r0, r4
 800b714:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b718:	460f      	mov	r7, r1
 800b71a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b71e:	b91e      	cbnz	r6, 800b728 <__strtok_r+0x20>
 800b720:	b965      	cbnz	r5, 800b73c <__strtok_r+0x34>
 800b722:	6015      	str	r5, [r2, #0]
 800b724:	2000      	movs	r0, #0
 800b726:	e005      	b.n	800b734 <__strtok_r+0x2c>
 800b728:	42b5      	cmp	r5, r6
 800b72a:	d1f6      	bne.n	800b71a <__strtok_r+0x12>
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1f0      	bne.n	800b712 <__strtok_r+0xa>
 800b730:	6014      	str	r4, [r2, #0]
 800b732:	7003      	strb	r3, [r0, #0]
 800b734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b736:	461c      	mov	r4, r3
 800b738:	e00c      	b.n	800b754 <__strtok_r+0x4c>
 800b73a:	b915      	cbnz	r5, 800b742 <__strtok_r+0x3a>
 800b73c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b740:	460e      	mov	r6, r1
 800b742:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b746:	42ab      	cmp	r3, r5
 800b748:	d1f7      	bne.n	800b73a <__strtok_r+0x32>
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d0f3      	beq.n	800b736 <__strtok_r+0x2e>
 800b74e:	2300      	movs	r3, #0
 800b750:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b754:	6014      	str	r4, [r2, #0]
 800b756:	e7ed      	b.n	800b734 <__strtok_r+0x2c>

0800b758 <_localeconv_r>:
 800b758:	4800      	ldr	r0, [pc, #0]	@ (800b75c <_localeconv_r+0x4>)
 800b75a:	4770      	bx	lr
 800b75c:	200001e8 	.word	0x200001e8

0800b760 <_close_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4d06      	ldr	r5, [pc, #24]	@ (800b77c <_close_r+0x1c>)
 800b764:	2300      	movs	r3, #0
 800b766:	4604      	mov	r4, r0
 800b768:	4608      	mov	r0, r1
 800b76a:	602b      	str	r3, [r5, #0]
 800b76c:	f7fa fb72 	bl	8005e54 <_close>
 800b770:	1c43      	adds	r3, r0, #1
 800b772:	d102      	bne.n	800b77a <_close_r+0x1a>
 800b774:	682b      	ldr	r3, [r5, #0]
 800b776:	b103      	cbz	r3, 800b77a <_close_r+0x1a>
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	bd38      	pop	{r3, r4, r5, pc}
 800b77c:	20000758 	.word	0x20000758

0800b780 <_lseek_r>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	4d07      	ldr	r5, [pc, #28]	@ (800b7a0 <_lseek_r+0x20>)
 800b784:	4604      	mov	r4, r0
 800b786:	4608      	mov	r0, r1
 800b788:	4611      	mov	r1, r2
 800b78a:	2200      	movs	r2, #0
 800b78c:	602a      	str	r2, [r5, #0]
 800b78e:	461a      	mov	r2, r3
 800b790:	f7fa fb87 	bl	8005ea2 <_lseek>
 800b794:	1c43      	adds	r3, r0, #1
 800b796:	d102      	bne.n	800b79e <_lseek_r+0x1e>
 800b798:	682b      	ldr	r3, [r5, #0]
 800b79a:	b103      	cbz	r3, 800b79e <_lseek_r+0x1e>
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	bd38      	pop	{r3, r4, r5, pc}
 800b7a0:	20000758 	.word	0x20000758

0800b7a4 <_read_r>:
 800b7a4:	b538      	push	{r3, r4, r5, lr}
 800b7a6:	4d07      	ldr	r5, [pc, #28]	@ (800b7c4 <_read_r+0x20>)
 800b7a8:	4604      	mov	r4, r0
 800b7aa:	4608      	mov	r0, r1
 800b7ac:	4611      	mov	r1, r2
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	602a      	str	r2, [r5, #0]
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	f7fa fb15 	bl	8005de2 <_read>
 800b7b8:	1c43      	adds	r3, r0, #1
 800b7ba:	d102      	bne.n	800b7c2 <_read_r+0x1e>
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	b103      	cbz	r3, 800b7c2 <_read_r+0x1e>
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	bd38      	pop	{r3, r4, r5, pc}
 800b7c4:	20000758 	.word	0x20000758

0800b7c8 <_write_r>:
 800b7c8:	b538      	push	{r3, r4, r5, lr}
 800b7ca:	4d07      	ldr	r5, [pc, #28]	@ (800b7e8 <_write_r+0x20>)
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	4608      	mov	r0, r1
 800b7d0:	4611      	mov	r1, r2
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	602a      	str	r2, [r5, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	f7fa fb20 	bl	8005e1c <_write>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	d102      	bne.n	800b7e6 <_write_r+0x1e>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	b103      	cbz	r3, 800b7e6 <_write_r+0x1e>
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	20000758 	.word	0x20000758

0800b7ec <__errno>:
 800b7ec:	4b01      	ldr	r3, [pc, #4]	@ (800b7f4 <__errno+0x8>)
 800b7ee:	6818      	ldr	r0, [r3, #0]
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	20000264 	.word	0x20000264

0800b7f8 <__libc_init_array>:
 800b7f8:	b570      	push	{r4, r5, r6, lr}
 800b7fa:	4d0d      	ldr	r5, [pc, #52]	@ (800b830 <__libc_init_array+0x38>)
 800b7fc:	4c0d      	ldr	r4, [pc, #52]	@ (800b834 <__libc_init_array+0x3c>)
 800b7fe:	1b64      	subs	r4, r4, r5
 800b800:	10a4      	asrs	r4, r4, #2
 800b802:	2600      	movs	r6, #0
 800b804:	42a6      	cmp	r6, r4
 800b806:	d109      	bne.n	800b81c <__libc_init_array+0x24>
 800b808:	4d0b      	ldr	r5, [pc, #44]	@ (800b838 <__libc_init_array+0x40>)
 800b80a:	4c0c      	ldr	r4, [pc, #48]	@ (800b83c <__libc_init_array+0x44>)
 800b80c:	f004 fcac 	bl	8010168 <_init>
 800b810:	1b64      	subs	r4, r4, r5
 800b812:	10a4      	asrs	r4, r4, #2
 800b814:	2600      	movs	r6, #0
 800b816:	42a6      	cmp	r6, r4
 800b818:	d105      	bne.n	800b826 <__libc_init_array+0x2e>
 800b81a:	bd70      	pop	{r4, r5, r6, pc}
 800b81c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b820:	4798      	blx	r3
 800b822:	3601      	adds	r6, #1
 800b824:	e7ee      	b.n	800b804 <__libc_init_array+0xc>
 800b826:	f855 3b04 	ldr.w	r3, [r5], #4
 800b82a:	4798      	blx	r3
 800b82c:	3601      	adds	r6, #1
 800b82e:	e7f2      	b.n	800b816 <__libc_init_array+0x1e>
 800b830:	08010a08 	.word	0x08010a08
 800b834:	08010a08 	.word	0x08010a08
 800b838:	08010a08 	.word	0x08010a08
 800b83c:	08010a0c 	.word	0x08010a0c

0800b840 <__retarget_lock_init_recursive>:
 800b840:	4770      	bx	lr

0800b842 <__retarget_lock_acquire_recursive>:
 800b842:	4770      	bx	lr

0800b844 <__retarget_lock_release_recursive>:
 800b844:	4770      	bx	lr

0800b846 <memcpy>:
 800b846:	440a      	add	r2, r1
 800b848:	4291      	cmp	r1, r2
 800b84a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b84e:	d100      	bne.n	800b852 <memcpy+0xc>
 800b850:	4770      	bx	lr
 800b852:	b510      	push	{r4, lr}
 800b854:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b858:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b85c:	4291      	cmp	r1, r2
 800b85e:	d1f9      	bne.n	800b854 <memcpy+0xe>
 800b860:	bd10      	pop	{r4, pc}
 800b862:	0000      	movs	r0, r0
 800b864:	0000      	movs	r0, r0
	...

0800b868 <nan>:
 800b868:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b870 <nan+0x8>
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	00000000 	.word	0x00000000
 800b874:	7ff80000 	.word	0x7ff80000

0800b878 <nanf>:
 800b878:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b880 <nanf+0x8>
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	7fc00000 	.word	0x7fc00000

0800b884 <__assert_func>:
 800b884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b886:	4614      	mov	r4, r2
 800b888:	461a      	mov	r2, r3
 800b88a:	4b09      	ldr	r3, [pc, #36]	@ (800b8b0 <__assert_func+0x2c>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4605      	mov	r5, r0
 800b890:	68d8      	ldr	r0, [r3, #12]
 800b892:	b954      	cbnz	r4, 800b8aa <__assert_func+0x26>
 800b894:	4b07      	ldr	r3, [pc, #28]	@ (800b8b4 <__assert_func+0x30>)
 800b896:	461c      	mov	r4, r3
 800b898:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b89c:	9100      	str	r1, [sp, #0]
 800b89e:	462b      	mov	r3, r5
 800b8a0:	4905      	ldr	r1, [pc, #20]	@ (800b8b8 <__assert_func+0x34>)
 800b8a2:	f002 f967 	bl	800db74 <fiprintf>
 800b8a6:	f002 f9a1 	bl	800dbec <abort>
 800b8aa:	4b04      	ldr	r3, [pc, #16]	@ (800b8bc <__assert_func+0x38>)
 800b8ac:	e7f4      	b.n	800b898 <__assert_func+0x14>
 800b8ae:	bf00      	nop
 800b8b0:	20000264 	.word	0x20000264
 800b8b4:	0801056e 	.word	0x0801056e
 800b8b8:	08010540 	.word	0x08010540
 800b8bc:	08010533 	.word	0x08010533

0800b8c0 <quorem>:
 800b8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	6903      	ldr	r3, [r0, #16]
 800b8c6:	690c      	ldr	r4, [r1, #16]
 800b8c8:	42a3      	cmp	r3, r4
 800b8ca:	4607      	mov	r7, r0
 800b8cc:	db7e      	blt.n	800b9cc <quorem+0x10c>
 800b8ce:	3c01      	subs	r4, #1
 800b8d0:	f101 0814 	add.w	r8, r1, #20
 800b8d4:	00a3      	lsls	r3, r4, #2
 800b8d6:	f100 0514 	add.w	r5, r0, #20
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8e0:	9301      	str	r3, [sp, #4]
 800b8e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b8e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b8f2:	fbb2 f6f3 	udiv	r6, r2, r3
 800b8f6:	d32e      	bcc.n	800b956 <quorem+0x96>
 800b8f8:	f04f 0a00 	mov.w	sl, #0
 800b8fc:	46c4      	mov	ip, r8
 800b8fe:	46ae      	mov	lr, r5
 800b900:	46d3      	mov	fp, sl
 800b902:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b906:	b298      	uxth	r0, r3
 800b908:	fb06 a000 	mla	r0, r6, r0, sl
 800b90c:	0c02      	lsrs	r2, r0, #16
 800b90e:	0c1b      	lsrs	r3, r3, #16
 800b910:	fb06 2303 	mla	r3, r6, r3, r2
 800b914:	f8de 2000 	ldr.w	r2, [lr]
 800b918:	b280      	uxth	r0, r0
 800b91a:	b292      	uxth	r2, r2
 800b91c:	1a12      	subs	r2, r2, r0
 800b91e:	445a      	add	r2, fp
 800b920:	f8de 0000 	ldr.w	r0, [lr]
 800b924:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b928:	b29b      	uxth	r3, r3
 800b92a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b92e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b932:	b292      	uxth	r2, r2
 800b934:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b938:	45e1      	cmp	r9, ip
 800b93a:	f84e 2b04 	str.w	r2, [lr], #4
 800b93e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b942:	d2de      	bcs.n	800b902 <quorem+0x42>
 800b944:	9b00      	ldr	r3, [sp, #0]
 800b946:	58eb      	ldr	r3, [r5, r3]
 800b948:	b92b      	cbnz	r3, 800b956 <quorem+0x96>
 800b94a:	9b01      	ldr	r3, [sp, #4]
 800b94c:	3b04      	subs	r3, #4
 800b94e:	429d      	cmp	r5, r3
 800b950:	461a      	mov	r2, r3
 800b952:	d32f      	bcc.n	800b9b4 <quorem+0xf4>
 800b954:	613c      	str	r4, [r7, #16]
 800b956:	4638      	mov	r0, r7
 800b958:	f001 fd0e 	bl	800d378 <__mcmp>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	db25      	blt.n	800b9ac <quorem+0xec>
 800b960:	4629      	mov	r1, r5
 800b962:	2000      	movs	r0, #0
 800b964:	f858 2b04 	ldr.w	r2, [r8], #4
 800b968:	f8d1 c000 	ldr.w	ip, [r1]
 800b96c:	fa1f fe82 	uxth.w	lr, r2
 800b970:	fa1f f38c 	uxth.w	r3, ip
 800b974:	eba3 030e 	sub.w	r3, r3, lr
 800b978:	4403      	add	r3, r0
 800b97a:	0c12      	lsrs	r2, r2, #16
 800b97c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b980:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b984:	b29b      	uxth	r3, r3
 800b986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b98a:	45c1      	cmp	r9, r8
 800b98c:	f841 3b04 	str.w	r3, [r1], #4
 800b990:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b994:	d2e6      	bcs.n	800b964 <quorem+0xa4>
 800b996:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b99a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b99e:	b922      	cbnz	r2, 800b9aa <quorem+0xea>
 800b9a0:	3b04      	subs	r3, #4
 800b9a2:	429d      	cmp	r5, r3
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	d30b      	bcc.n	800b9c0 <quorem+0x100>
 800b9a8:	613c      	str	r4, [r7, #16]
 800b9aa:	3601      	adds	r6, #1
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	b003      	add	sp, #12
 800b9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b4:	6812      	ldr	r2, [r2, #0]
 800b9b6:	3b04      	subs	r3, #4
 800b9b8:	2a00      	cmp	r2, #0
 800b9ba:	d1cb      	bne.n	800b954 <quorem+0x94>
 800b9bc:	3c01      	subs	r4, #1
 800b9be:	e7c6      	b.n	800b94e <quorem+0x8e>
 800b9c0:	6812      	ldr	r2, [r2, #0]
 800b9c2:	3b04      	subs	r3, #4
 800b9c4:	2a00      	cmp	r2, #0
 800b9c6:	d1ef      	bne.n	800b9a8 <quorem+0xe8>
 800b9c8:	3c01      	subs	r4, #1
 800b9ca:	e7ea      	b.n	800b9a2 <quorem+0xe2>
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	e7ee      	b.n	800b9ae <quorem+0xee>

0800b9d0 <_dtoa_r>:
 800b9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	69c7      	ldr	r7, [r0, #28]
 800b9d6:	b099      	sub	sp, #100	@ 0x64
 800b9d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b9dc:	ec55 4b10 	vmov	r4, r5, d0
 800b9e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b9e2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b9e4:	4683      	mov	fp, r0
 800b9e6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b9ea:	b97f      	cbnz	r7, 800ba0c <_dtoa_r+0x3c>
 800b9ec:	2010      	movs	r0, #16
 800b9ee:	f001 f937 	bl	800cc60 <malloc>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b9f8:	b920      	cbnz	r0, 800ba04 <_dtoa_r+0x34>
 800b9fa:	4ba7      	ldr	r3, [pc, #668]	@ (800bc98 <_dtoa_r+0x2c8>)
 800b9fc:	21ef      	movs	r1, #239	@ 0xef
 800b9fe:	48a7      	ldr	r0, [pc, #668]	@ (800bc9c <_dtoa_r+0x2cc>)
 800ba00:	f7ff ff40 	bl	800b884 <__assert_func>
 800ba04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ba08:	6007      	str	r7, [r0, #0]
 800ba0a:	60c7      	str	r7, [r0, #12]
 800ba0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ba10:	6819      	ldr	r1, [r3, #0]
 800ba12:	b159      	cbz	r1, 800ba2c <_dtoa_r+0x5c>
 800ba14:	685a      	ldr	r2, [r3, #4]
 800ba16:	604a      	str	r2, [r1, #4]
 800ba18:	2301      	movs	r3, #1
 800ba1a:	4093      	lsls	r3, r2
 800ba1c:	608b      	str	r3, [r1, #8]
 800ba1e:	4658      	mov	r0, fp
 800ba20:	f001 fa26 	bl	800ce70 <_Bfree>
 800ba24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	601a      	str	r2, [r3, #0]
 800ba2c:	1e2b      	subs	r3, r5, #0
 800ba2e:	bfb9      	ittee	lt
 800ba30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ba34:	9303      	strlt	r3, [sp, #12]
 800ba36:	2300      	movge	r3, #0
 800ba38:	6033      	strge	r3, [r6, #0]
 800ba3a:	9f03      	ldr	r7, [sp, #12]
 800ba3c:	4b98      	ldr	r3, [pc, #608]	@ (800bca0 <_dtoa_r+0x2d0>)
 800ba3e:	bfbc      	itt	lt
 800ba40:	2201      	movlt	r2, #1
 800ba42:	6032      	strlt	r2, [r6, #0]
 800ba44:	43bb      	bics	r3, r7
 800ba46:	d112      	bne.n	800ba6e <_dtoa_r+0x9e>
 800ba48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ba4e:	6013      	str	r3, [r2, #0]
 800ba50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba54:	4323      	orrs	r3, r4
 800ba56:	f000 854d 	beq.w	800c4f4 <_dtoa_r+0xb24>
 800ba5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bcb4 <_dtoa_r+0x2e4>
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 854f 	beq.w	800c504 <_dtoa_r+0xb34>
 800ba66:	f10a 0303 	add.w	r3, sl, #3
 800ba6a:	f000 bd49 	b.w	800c500 <_dtoa_r+0xb30>
 800ba6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba72:	2200      	movs	r2, #0
 800ba74:	ec51 0b17 	vmov	r0, r1, d7
 800ba78:	2300      	movs	r3, #0
 800ba7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ba7e:	f7f5 f823 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba82:	4680      	mov	r8, r0
 800ba84:	b158      	cbz	r0, 800ba9e <_dtoa_r+0xce>
 800ba86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba88:	2301      	movs	r3, #1
 800ba8a:	6013      	str	r3, [r2, #0]
 800ba8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba8e:	b113      	cbz	r3, 800ba96 <_dtoa_r+0xc6>
 800ba90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ba92:	4b84      	ldr	r3, [pc, #528]	@ (800bca4 <_dtoa_r+0x2d4>)
 800ba94:	6013      	str	r3, [r2, #0]
 800ba96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bcb8 <_dtoa_r+0x2e8>
 800ba9a:	f000 bd33 	b.w	800c504 <_dtoa_r+0xb34>
 800ba9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800baa2:	aa16      	add	r2, sp, #88	@ 0x58
 800baa4:	a917      	add	r1, sp, #92	@ 0x5c
 800baa6:	4658      	mov	r0, fp
 800baa8:	f001 fd86 	bl	800d5b8 <__d2b>
 800baac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bab0:	4681      	mov	r9, r0
 800bab2:	2e00      	cmp	r6, #0
 800bab4:	d077      	beq.n	800bba6 <_dtoa_r+0x1d6>
 800bab6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bab8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800babc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bac4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bac8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bacc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bad0:	4619      	mov	r1, r3
 800bad2:	2200      	movs	r2, #0
 800bad4:	4b74      	ldr	r3, [pc, #464]	@ (800bca8 <_dtoa_r+0x2d8>)
 800bad6:	f7f4 fbd7 	bl	8000288 <__aeabi_dsub>
 800bada:	a369      	add	r3, pc, #420	@ (adr r3, 800bc80 <_dtoa_r+0x2b0>)
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	f7f4 fd8a 	bl	80005f8 <__aeabi_dmul>
 800bae4:	a368      	add	r3, pc, #416	@ (adr r3, 800bc88 <_dtoa_r+0x2b8>)
 800bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baea:	f7f4 fbcf 	bl	800028c <__adddf3>
 800baee:	4604      	mov	r4, r0
 800baf0:	4630      	mov	r0, r6
 800baf2:	460d      	mov	r5, r1
 800baf4:	f7f4 fd16 	bl	8000524 <__aeabi_i2d>
 800baf8:	a365      	add	r3, pc, #404	@ (adr r3, 800bc90 <_dtoa_r+0x2c0>)
 800bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafe:	f7f4 fd7b 	bl	80005f8 <__aeabi_dmul>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	4620      	mov	r0, r4
 800bb08:	4629      	mov	r1, r5
 800bb0a:	f7f4 fbbf 	bl	800028c <__adddf3>
 800bb0e:	4604      	mov	r4, r0
 800bb10:	460d      	mov	r5, r1
 800bb12:	f7f5 f821 	bl	8000b58 <__aeabi_d2iz>
 800bb16:	2200      	movs	r2, #0
 800bb18:	4607      	mov	r7, r0
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	4629      	mov	r1, r5
 800bb20:	f7f4 ffdc 	bl	8000adc <__aeabi_dcmplt>
 800bb24:	b140      	cbz	r0, 800bb38 <_dtoa_r+0x168>
 800bb26:	4638      	mov	r0, r7
 800bb28:	f7f4 fcfc 	bl	8000524 <__aeabi_i2d>
 800bb2c:	4622      	mov	r2, r4
 800bb2e:	462b      	mov	r3, r5
 800bb30:	f7f4 ffca 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb34:	b900      	cbnz	r0, 800bb38 <_dtoa_r+0x168>
 800bb36:	3f01      	subs	r7, #1
 800bb38:	2f16      	cmp	r7, #22
 800bb3a:	d851      	bhi.n	800bbe0 <_dtoa_r+0x210>
 800bb3c:	4b5b      	ldr	r3, [pc, #364]	@ (800bcac <_dtoa_r+0x2dc>)
 800bb3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb4a:	f7f4 ffc7 	bl	8000adc <__aeabi_dcmplt>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d048      	beq.n	800bbe4 <_dtoa_r+0x214>
 800bb52:	3f01      	subs	r7, #1
 800bb54:	2300      	movs	r3, #0
 800bb56:	9312      	str	r3, [sp, #72]	@ 0x48
 800bb58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bb5a:	1b9b      	subs	r3, r3, r6
 800bb5c:	1e5a      	subs	r2, r3, #1
 800bb5e:	bf44      	itt	mi
 800bb60:	f1c3 0801 	rsbmi	r8, r3, #1
 800bb64:	2300      	movmi	r3, #0
 800bb66:	9208      	str	r2, [sp, #32]
 800bb68:	bf54      	ite	pl
 800bb6a:	f04f 0800 	movpl.w	r8, #0
 800bb6e:	9308      	strmi	r3, [sp, #32]
 800bb70:	2f00      	cmp	r7, #0
 800bb72:	db39      	blt.n	800bbe8 <_dtoa_r+0x218>
 800bb74:	9b08      	ldr	r3, [sp, #32]
 800bb76:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bb78:	443b      	add	r3, r7
 800bb7a:	9308      	str	r3, [sp, #32]
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb82:	2b09      	cmp	r3, #9
 800bb84:	d864      	bhi.n	800bc50 <_dtoa_r+0x280>
 800bb86:	2b05      	cmp	r3, #5
 800bb88:	bfc4      	itt	gt
 800bb8a:	3b04      	subgt	r3, #4
 800bb8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bb8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb90:	f1a3 0302 	sub.w	r3, r3, #2
 800bb94:	bfcc      	ite	gt
 800bb96:	2400      	movgt	r4, #0
 800bb98:	2401      	movle	r4, #1
 800bb9a:	2b03      	cmp	r3, #3
 800bb9c:	d863      	bhi.n	800bc66 <_dtoa_r+0x296>
 800bb9e:	e8df f003 	tbb	[pc, r3]
 800bba2:	372a      	.short	0x372a
 800bba4:	5535      	.short	0x5535
 800bba6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bbaa:	441e      	add	r6, r3
 800bbac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bbb0:	2b20      	cmp	r3, #32
 800bbb2:	bfc1      	itttt	gt
 800bbb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bbb8:	409f      	lslgt	r7, r3
 800bbba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bbbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bbc2:	bfd6      	itet	le
 800bbc4:	f1c3 0320 	rsble	r3, r3, #32
 800bbc8:	ea47 0003 	orrgt.w	r0, r7, r3
 800bbcc:	fa04 f003 	lslle.w	r0, r4, r3
 800bbd0:	f7f4 fc98 	bl	8000504 <__aeabi_ui2d>
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bbda:	3e01      	subs	r6, #1
 800bbdc:	9214      	str	r2, [sp, #80]	@ 0x50
 800bbde:	e777      	b.n	800bad0 <_dtoa_r+0x100>
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e7b8      	b.n	800bb56 <_dtoa_r+0x186>
 800bbe4:	9012      	str	r0, [sp, #72]	@ 0x48
 800bbe6:	e7b7      	b.n	800bb58 <_dtoa_r+0x188>
 800bbe8:	427b      	negs	r3, r7
 800bbea:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbec:	2300      	movs	r3, #0
 800bbee:	eba8 0807 	sub.w	r8, r8, r7
 800bbf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbf4:	e7c4      	b.n	800bb80 <_dtoa_r+0x1b0>
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	dc35      	bgt.n	800bc6c <_dtoa_r+0x29c>
 800bc00:	2301      	movs	r3, #1
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	9307      	str	r3, [sp, #28]
 800bc06:	461a      	mov	r2, r3
 800bc08:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc0a:	e00b      	b.n	800bc24 <_dtoa_r+0x254>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e7f3      	b.n	800bbf8 <_dtoa_r+0x228>
 800bc10:	2300      	movs	r3, #0
 800bc12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc16:	18fb      	adds	r3, r7, r3
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	9307      	str	r3, [sp, #28]
 800bc20:	bfb8      	it	lt
 800bc22:	2301      	movlt	r3, #1
 800bc24:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bc28:	2100      	movs	r1, #0
 800bc2a:	2204      	movs	r2, #4
 800bc2c:	f102 0514 	add.w	r5, r2, #20
 800bc30:	429d      	cmp	r5, r3
 800bc32:	d91f      	bls.n	800bc74 <_dtoa_r+0x2a4>
 800bc34:	6041      	str	r1, [r0, #4]
 800bc36:	4658      	mov	r0, fp
 800bc38:	f001 f8da 	bl	800cdf0 <_Balloc>
 800bc3c:	4682      	mov	sl, r0
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d13c      	bne.n	800bcbc <_dtoa_r+0x2ec>
 800bc42:	4b1b      	ldr	r3, [pc, #108]	@ (800bcb0 <_dtoa_r+0x2e0>)
 800bc44:	4602      	mov	r2, r0
 800bc46:	f240 11af 	movw	r1, #431	@ 0x1af
 800bc4a:	e6d8      	b.n	800b9fe <_dtoa_r+0x2e>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e7e0      	b.n	800bc12 <_dtoa_r+0x242>
 800bc50:	2401      	movs	r4, #1
 800bc52:	2300      	movs	r3, #0
 800bc54:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc56:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bc58:	f04f 33ff 	mov.w	r3, #4294967295
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	9307      	str	r3, [sp, #28]
 800bc60:	2200      	movs	r2, #0
 800bc62:	2312      	movs	r3, #18
 800bc64:	e7d0      	b.n	800bc08 <_dtoa_r+0x238>
 800bc66:	2301      	movs	r3, #1
 800bc68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc6a:	e7f5      	b.n	800bc58 <_dtoa_r+0x288>
 800bc6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	9307      	str	r3, [sp, #28]
 800bc72:	e7d7      	b.n	800bc24 <_dtoa_r+0x254>
 800bc74:	3101      	adds	r1, #1
 800bc76:	0052      	lsls	r2, r2, #1
 800bc78:	e7d8      	b.n	800bc2c <_dtoa_r+0x25c>
 800bc7a:	bf00      	nop
 800bc7c:	f3af 8000 	nop.w
 800bc80:	636f4361 	.word	0x636f4361
 800bc84:	3fd287a7 	.word	0x3fd287a7
 800bc88:	8b60c8b3 	.word	0x8b60c8b3
 800bc8c:	3fc68a28 	.word	0x3fc68a28
 800bc90:	509f79fb 	.word	0x509f79fb
 800bc94:	3fd34413 	.word	0x3fd34413
 800bc98:	080104ba 	.word	0x080104ba
 800bc9c:	0801057c 	.word	0x0801057c
 800bca0:	7ff00000 	.word	0x7ff00000
 800bca4:	08010492 	.word	0x08010492
 800bca8:	3ff80000 	.word	0x3ff80000
 800bcac:	080106d8 	.word	0x080106d8
 800bcb0:	080105d4 	.word	0x080105d4
 800bcb4:	08010578 	.word	0x08010578
 800bcb8:	08010491 	.word	0x08010491
 800bcbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bcc0:	6018      	str	r0, [r3, #0]
 800bcc2:	9b07      	ldr	r3, [sp, #28]
 800bcc4:	2b0e      	cmp	r3, #14
 800bcc6:	f200 80a4 	bhi.w	800be12 <_dtoa_r+0x442>
 800bcca:	2c00      	cmp	r4, #0
 800bccc:	f000 80a1 	beq.w	800be12 <_dtoa_r+0x442>
 800bcd0:	2f00      	cmp	r7, #0
 800bcd2:	dd33      	ble.n	800bd3c <_dtoa_r+0x36c>
 800bcd4:	4bad      	ldr	r3, [pc, #692]	@ (800bf8c <_dtoa_r+0x5bc>)
 800bcd6:	f007 020f 	and.w	r2, r7, #15
 800bcda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcde:	ed93 7b00 	vldr	d7, [r3]
 800bce2:	05f8      	lsls	r0, r7, #23
 800bce4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bce8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bcec:	d516      	bpl.n	800bd1c <_dtoa_r+0x34c>
 800bcee:	4ba8      	ldr	r3, [pc, #672]	@ (800bf90 <_dtoa_r+0x5c0>)
 800bcf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bcf8:	f7f4 fda8 	bl	800084c <__aeabi_ddiv>
 800bcfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd00:	f004 040f 	and.w	r4, r4, #15
 800bd04:	2603      	movs	r6, #3
 800bd06:	4da2      	ldr	r5, [pc, #648]	@ (800bf90 <_dtoa_r+0x5c0>)
 800bd08:	b954      	cbnz	r4, 800bd20 <_dtoa_r+0x350>
 800bd0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd12:	f7f4 fd9b 	bl	800084c <__aeabi_ddiv>
 800bd16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd1a:	e028      	b.n	800bd6e <_dtoa_r+0x39e>
 800bd1c:	2602      	movs	r6, #2
 800bd1e:	e7f2      	b.n	800bd06 <_dtoa_r+0x336>
 800bd20:	07e1      	lsls	r1, r4, #31
 800bd22:	d508      	bpl.n	800bd36 <_dtoa_r+0x366>
 800bd24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd2c:	f7f4 fc64 	bl	80005f8 <__aeabi_dmul>
 800bd30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd34:	3601      	adds	r6, #1
 800bd36:	1064      	asrs	r4, r4, #1
 800bd38:	3508      	adds	r5, #8
 800bd3a:	e7e5      	b.n	800bd08 <_dtoa_r+0x338>
 800bd3c:	f000 80d2 	beq.w	800bee4 <_dtoa_r+0x514>
 800bd40:	427c      	negs	r4, r7
 800bd42:	4b92      	ldr	r3, [pc, #584]	@ (800bf8c <_dtoa_r+0x5bc>)
 800bd44:	4d92      	ldr	r5, [pc, #584]	@ (800bf90 <_dtoa_r+0x5c0>)
 800bd46:	f004 020f 	and.w	r2, r4, #15
 800bd4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd56:	f7f4 fc4f 	bl	80005f8 <__aeabi_dmul>
 800bd5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd5e:	1124      	asrs	r4, r4, #4
 800bd60:	2300      	movs	r3, #0
 800bd62:	2602      	movs	r6, #2
 800bd64:	2c00      	cmp	r4, #0
 800bd66:	f040 80b2 	bne.w	800bece <_dtoa_r+0x4fe>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1d3      	bne.n	800bd16 <_dtoa_r+0x346>
 800bd6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	f000 80b7 	beq.w	800bee8 <_dtoa_r+0x518>
 800bd7a:	4b86      	ldr	r3, [pc, #536]	@ (800bf94 <_dtoa_r+0x5c4>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	4620      	mov	r0, r4
 800bd80:	4629      	mov	r1, r5
 800bd82:	f7f4 feab 	bl	8000adc <__aeabi_dcmplt>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	f000 80ae 	beq.w	800bee8 <_dtoa_r+0x518>
 800bd8c:	9b07      	ldr	r3, [sp, #28]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 80aa 	beq.w	800bee8 <_dtoa_r+0x518>
 800bd94:	9b00      	ldr	r3, [sp, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	dd37      	ble.n	800be0a <_dtoa_r+0x43a>
 800bd9a:	1e7b      	subs	r3, r7, #1
 800bd9c:	9304      	str	r3, [sp, #16]
 800bd9e:	4620      	mov	r0, r4
 800bda0:	4b7d      	ldr	r3, [pc, #500]	@ (800bf98 <_dtoa_r+0x5c8>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	4629      	mov	r1, r5
 800bda6:	f7f4 fc27 	bl	80005f8 <__aeabi_dmul>
 800bdaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdae:	9c00      	ldr	r4, [sp, #0]
 800bdb0:	3601      	adds	r6, #1
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f7f4 fbb6 	bl	8000524 <__aeabi_i2d>
 800bdb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdbc:	f7f4 fc1c 	bl	80005f8 <__aeabi_dmul>
 800bdc0:	4b76      	ldr	r3, [pc, #472]	@ (800bf9c <_dtoa_r+0x5cc>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f7f4 fa62 	bl	800028c <__adddf3>
 800bdc8:	4605      	mov	r5, r0
 800bdca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bdce:	2c00      	cmp	r4, #0
 800bdd0:	f040 808d 	bne.w	800beee <_dtoa_r+0x51e>
 800bdd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdd8:	4b71      	ldr	r3, [pc, #452]	@ (800bfa0 <_dtoa_r+0x5d0>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	f7f4 fa54 	bl	8000288 <__aeabi_dsub>
 800bde0:	4602      	mov	r2, r0
 800bde2:	460b      	mov	r3, r1
 800bde4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bde8:	462a      	mov	r2, r5
 800bdea:	4633      	mov	r3, r6
 800bdec:	f7f4 fe94 	bl	8000b18 <__aeabi_dcmpgt>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	f040 828b 	bne.w	800c30c <_dtoa_r+0x93c>
 800bdf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdfa:	462a      	mov	r2, r5
 800bdfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800be00:	f7f4 fe6c 	bl	8000adc <__aeabi_dcmplt>
 800be04:	2800      	cmp	r0, #0
 800be06:	f040 8128 	bne.w	800c05a <_dtoa_r+0x68a>
 800be0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800be0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800be12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800be14:	2b00      	cmp	r3, #0
 800be16:	f2c0 815a 	blt.w	800c0ce <_dtoa_r+0x6fe>
 800be1a:	2f0e      	cmp	r7, #14
 800be1c:	f300 8157 	bgt.w	800c0ce <_dtoa_r+0x6fe>
 800be20:	4b5a      	ldr	r3, [pc, #360]	@ (800bf8c <_dtoa_r+0x5bc>)
 800be22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be26:	ed93 7b00 	vldr	d7, [r3]
 800be2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	ed8d 7b00 	vstr	d7, [sp]
 800be32:	da03      	bge.n	800be3c <_dtoa_r+0x46c>
 800be34:	9b07      	ldr	r3, [sp, #28]
 800be36:	2b00      	cmp	r3, #0
 800be38:	f340 8101 	ble.w	800c03e <_dtoa_r+0x66e>
 800be3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800be40:	4656      	mov	r6, sl
 800be42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be46:	4620      	mov	r0, r4
 800be48:	4629      	mov	r1, r5
 800be4a:	f7f4 fcff 	bl	800084c <__aeabi_ddiv>
 800be4e:	f7f4 fe83 	bl	8000b58 <__aeabi_d2iz>
 800be52:	4680      	mov	r8, r0
 800be54:	f7f4 fb66 	bl	8000524 <__aeabi_i2d>
 800be58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be5c:	f7f4 fbcc 	bl	80005f8 <__aeabi_dmul>
 800be60:	4602      	mov	r2, r0
 800be62:	460b      	mov	r3, r1
 800be64:	4620      	mov	r0, r4
 800be66:	4629      	mov	r1, r5
 800be68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800be6c:	f7f4 fa0c 	bl	8000288 <__aeabi_dsub>
 800be70:	f806 4b01 	strb.w	r4, [r6], #1
 800be74:	9d07      	ldr	r5, [sp, #28]
 800be76:	eba6 040a 	sub.w	r4, r6, sl
 800be7a:	42a5      	cmp	r5, r4
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	f040 8117 	bne.w	800c0b2 <_dtoa_r+0x6e2>
 800be84:	f7f4 fa02 	bl	800028c <__adddf3>
 800be88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be8c:	4604      	mov	r4, r0
 800be8e:	460d      	mov	r5, r1
 800be90:	f7f4 fe42 	bl	8000b18 <__aeabi_dcmpgt>
 800be94:	2800      	cmp	r0, #0
 800be96:	f040 80f9 	bne.w	800c08c <_dtoa_r+0x6bc>
 800be9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be9e:	4620      	mov	r0, r4
 800bea0:	4629      	mov	r1, r5
 800bea2:	f7f4 fe11 	bl	8000ac8 <__aeabi_dcmpeq>
 800bea6:	b118      	cbz	r0, 800beb0 <_dtoa_r+0x4e0>
 800bea8:	f018 0f01 	tst.w	r8, #1
 800beac:	f040 80ee 	bne.w	800c08c <_dtoa_r+0x6bc>
 800beb0:	4649      	mov	r1, r9
 800beb2:	4658      	mov	r0, fp
 800beb4:	f000 ffdc 	bl	800ce70 <_Bfree>
 800beb8:	2300      	movs	r3, #0
 800beba:	7033      	strb	r3, [r6, #0]
 800bebc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bebe:	3701      	adds	r7, #1
 800bec0:	601f      	str	r7, [r3, #0]
 800bec2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 831d 	beq.w	800c504 <_dtoa_r+0xb34>
 800beca:	601e      	str	r6, [r3, #0]
 800becc:	e31a      	b.n	800c504 <_dtoa_r+0xb34>
 800bece:	07e2      	lsls	r2, r4, #31
 800bed0:	d505      	bpl.n	800bede <_dtoa_r+0x50e>
 800bed2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bed6:	f7f4 fb8f 	bl	80005f8 <__aeabi_dmul>
 800beda:	3601      	adds	r6, #1
 800bedc:	2301      	movs	r3, #1
 800bede:	1064      	asrs	r4, r4, #1
 800bee0:	3508      	adds	r5, #8
 800bee2:	e73f      	b.n	800bd64 <_dtoa_r+0x394>
 800bee4:	2602      	movs	r6, #2
 800bee6:	e742      	b.n	800bd6e <_dtoa_r+0x39e>
 800bee8:	9c07      	ldr	r4, [sp, #28]
 800beea:	9704      	str	r7, [sp, #16]
 800beec:	e761      	b.n	800bdb2 <_dtoa_r+0x3e2>
 800beee:	4b27      	ldr	r3, [pc, #156]	@ (800bf8c <_dtoa_r+0x5bc>)
 800bef0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bef2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bef6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800befa:	4454      	add	r4, sl
 800befc:	2900      	cmp	r1, #0
 800befe:	d053      	beq.n	800bfa8 <_dtoa_r+0x5d8>
 800bf00:	4928      	ldr	r1, [pc, #160]	@ (800bfa4 <_dtoa_r+0x5d4>)
 800bf02:	2000      	movs	r0, #0
 800bf04:	f7f4 fca2 	bl	800084c <__aeabi_ddiv>
 800bf08:	4633      	mov	r3, r6
 800bf0a:	462a      	mov	r2, r5
 800bf0c:	f7f4 f9bc 	bl	8000288 <__aeabi_dsub>
 800bf10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf14:	4656      	mov	r6, sl
 800bf16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf1a:	f7f4 fe1d 	bl	8000b58 <__aeabi_d2iz>
 800bf1e:	4605      	mov	r5, r0
 800bf20:	f7f4 fb00 	bl	8000524 <__aeabi_i2d>
 800bf24:	4602      	mov	r2, r0
 800bf26:	460b      	mov	r3, r1
 800bf28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf2c:	f7f4 f9ac 	bl	8000288 <__aeabi_dsub>
 800bf30:	3530      	adds	r5, #48	@ 0x30
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf3a:	f806 5b01 	strb.w	r5, [r6], #1
 800bf3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf42:	f7f4 fdcb 	bl	8000adc <__aeabi_dcmplt>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d171      	bne.n	800c02e <_dtoa_r+0x65e>
 800bf4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf4e:	4911      	ldr	r1, [pc, #68]	@ (800bf94 <_dtoa_r+0x5c4>)
 800bf50:	2000      	movs	r0, #0
 800bf52:	f7f4 f999 	bl	8000288 <__aeabi_dsub>
 800bf56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf5a:	f7f4 fdbf 	bl	8000adc <__aeabi_dcmplt>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	f040 8095 	bne.w	800c08e <_dtoa_r+0x6be>
 800bf64:	42a6      	cmp	r6, r4
 800bf66:	f43f af50 	beq.w	800be0a <_dtoa_r+0x43a>
 800bf6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bf6e:	4b0a      	ldr	r3, [pc, #40]	@ (800bf98 <_dtoa_r+0x5c8>)
 800bf70:	2200      	movs	r2, #0
 800bf72:	f7f4 fb41 	bl	80005f8 <__aeabi_dmul>
 800bf76:	4b08      	ldr	r3, [pc, #32]	@ (800bf98 <_dtoa_r+0x5c8>)
 800bf78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf82:	f7f4 fb39 	bl	80005f8 <__aeabi_dmul>
 800bf86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf8a:	e7c4      	b.n	800bf16 <_dtoa_r+0x546>
 800bf8c:	080106d8 	.word	0x080106d8
 800bf90:	080106b0 	.word	0x080106b0
 800bf94:	3ff00000 	.word	0x3ff00000
 800bf98:	40240000 	.word	0x40240000
 800bf9c:	401c0000 	.word	0x401c0000
 800bfa0:	40140000 	.word	0x40140000
 800bfa4:	3fe00000 	.word	0x3fe00000
 800bfa8:	4631      	mov	r1, r6
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f7f4 fb24 	bl	80005f8 <__aeabi_dmul>
 800bfb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bfb4:	9415      	str	r4, [sp, #84]	@ 0x54
 800bfb6:	4656      	mov	r6, sl
 800bfb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfbc:	f7f4 fdcc 	bl	8000b58 <__aeabi_d2iz>
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	f7f4 faaf 	bl	8000524 <__aeabi_i2d>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	460b      	mov	r3, r1
 800bfca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfce:	f7f4 f95b 	bl	8000288 <__aeabi_dsub>
 800bfd2:	3530      	adds	r5, #48	@ 0x30
 800bfd4:	f806 5b01 	strb.w	r5, [r6], #1
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	42a6      	cmp	r6, r4
 800bfde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfe2:	f04f 0200 	mov.w	r2, #0
 800bfe6:	d124      	bne.n	800c032 <_dtoa_r+0x662>
 800bfe8:	4bac      	ldr	r3, [pc, #688]	@ (800c29c <_dtoa_r+0x8cc>)
 800bfea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bfee:	f7f4 f94d 	bl	800028c <__adddf3>
 800bff2:	4602      	mov	r2, r0
 800bff4:	460b      	mov	r3, r1
 800bff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bffa:	f7f4 fd8d 	bl	8000b18 <__aeabi_dcmpgt>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d145      	bne.n	800c08e <_dtoa_r+0x6be>
 800c002:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c006:	49a5      	ldr	r1, [pc, #660]	@ (800c29c <_dtoa_r+0x8cc>)
 800c008:	2000      	movs	r0, #0
 800c00a:	f7f4 f93d 	bl	8000288 <__aeabi_dsub>
 800c00e:	4602      	mov	r2, r0
 800c010:	460b      	mov	r3, r1
 800c012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c016:	f7f4 fd61 	bl	8000adc <__aeabi_dcmplt>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	f43f aef5 	beq.w	800be0a <_dtoa_r+0x43a>
 800c020:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c022:	1e73      	subs	r3, r6, #1
 800c024:	9315      	str	r3, [sp, #84]	@ 0x54
 800c026:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c02a:	2b30      	cmp	r3, #48	@ 0x30
 800c02c:	d0f8      	beq.n	800c020 <_dtoa_r+0x650>
 800c02e:	9f04      	ldr	r7, [sp, #16]
 800c030:	e73e      	b.n	800beb0 <_dtoa_r+0x4e0>
 800c032:	4b9b      	ldr	r3, [pc, #620]	@ (800c2a0 <_dtoa_r+0x8d0>)
 800c034:	f7f4 fae0 	bl	80005f8 <__aeabi_dmul>
 800c038:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c03c:	e7bc      	b.n	800bfb8 <_dtoa_r+0x5e8>
 800c03e:	d10c      	bne.n	800c05a <_dtoa_r+0x68a>
 800c040:	4b98      	ldr	r3, [pc, #608]	@ (800c2a4 <_dtoa_r+0x8d4>)
 800c042:	2200      	movs	r2, #0
 800c044:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c048:	f7f4 fad6 	bl	80005f8 <__aeabi_dmul>
 800c04c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c050:	f7f4 fd58 	bl	8000b04 <__aeabi_dcmpge>
 800c054:	2800      	cmp	r0, #0
 800c056:	f000 8157 	beq.w	800c308 <_dtoa_r+0x938>
 800c05a:	2400      	movs	r4, #0
 800c05c:	4625      	mov	r5, r4
 800c05e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c060:	43db      	mvns	r3, r3
 800c062:	9304      	str	r3, [sp, #16]
 800c064:	4656      	mov	r6, sl
 800c066:	2700      	movs	r7, #0
 800c068:	4621      	mov	r1, r4
 800c06a:	4658      	mov	r0, fp
 800c06c:	f000 ff00 	bl	800ce70 <_Bfree>
 800c070:	2d00      	cmp	r5, #0
 800c072:	d0dc      	beq.n	800c02e <_dtoa_r+0x65e>
 800c074:	b12f      	cbz	r7, 800c082 <_dtoa_r+0x6b2>
 800c076:	42af      	cmp	r7, r5
 800c078:	d003      	beq.n	800c082 <_dtoa_r+0x6b2>
 800c07a:	4639      	mov	r1, r7
 800c07c:	4658      	mov	r0, fp
 800c07e:	f000 fef7 	bl	800ce70 <_Bfree>
 800c082:	4629      	mov	r1, r5
 800c084:	4658      	mov	r0, fp
 800c086:	f000 fef3 	bl	800ce70 <_Bfree>
 800c08a:	e7d0      	b.n	800c02e <_dtoa_r+0x65e>
 800c08c:	9704      	str	r7, [sp, #16]
 800c08e:	4633      	mov	r3, r6
 800c090:	461e      	mov	r6, r3
 800c092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c096:	2a39      	cmp	r2, #57	@ 0x39
 800c098:	d107      	bne.n	800c0aa <_dtoa_r+0x6da>
 800c09a:	459a      	cmp	sl, r3
 800c09c:	d1f8      	bne.n	800c090 <_dtoa_r+0x6c0>
 800c09e:	9a04      	ldr	r2, [sp, #16]
 800c0a0:	3201      	adds	r2, #1
 800c0a2:	9204      	str	r2, [sp, #16]
 800c0a4:	2230      	movs	r2, #48	@ 0x30
 800c0a6:	f88a 2000 	strb.w	r2, [sl]
 800c0aa:	781a      	ldrb	r2, [r3, #0]
 800c0ac:	3201      	adds	r2, #1
 800c0ae:	701a      	strb	r2, [r3, #0]
 800c0b0:	e7bd      	b.n	800c02e <_dtoa_r+0x65e>
 800c0b2:	4b7b      	ldr	r3, [pc, #492]	@ (800c2a0 <_dtoa_r+0x8d0>)
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f7f4 fa9f 	bl	80005f8 <__aeabi_dmul>
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	2300      	movs	r3, #0
 800c0be:	4604      	mov	r4, r0
 800c0c0:	460d      	mov	r5, r1
 800c0c2:	f7f4 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	f43f aebb 	beq.w	800be42 <_dtoa_r+0x472>
 800c0cc:	e6f0      	b.n	800beb0 <_dtoa_r+0x4e0>
 800c0ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c0d0:	2a00      	cmp	r2, #0
 800c0d2:	f000 80db 	beq.w	800c28c <_dtoa_r+0x8bc>
 800c0d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0d8:	2a01      	cmp	r2, #1
 800c0da:	f300 80bf 	bgt.w	800c25c <_dtoa_r+0x88c>
 800c0de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c0e0:	2a00      	cmp	r2, #0
 800c0e2:	f000 80b7 	beq.w	800c254 <_dtoa_r+0x884>
 800c0e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c0ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c0ec:	4646      	mov	r6, r8
 800c0ee:	9a08      	ldr	r2, [sp, #32]
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	441a      	add	r2, r3
 800c0f4:	4658      	mov	r0, fp
 800c0f6:	4498      	add	r8, r3
 800c0f8:	9208      	str	r2, [sp, #32]
 800c0fa:	f000 ffb7 	bl	800d06c <__i2b>
 800c0fe:	4605      	mov	r5, r0
 800c100:	b15e      	cbz	r6, 800c11a <_dtoa_r+0x74a>
 800c102:	9b08      	ldr	r3, [sp, #32]
 800c104:	2b00      	cmp	r3, #0
 800c106:	dd08      	ble.n	800c11a <_dtoa_r+0x74a>
 800c108:	42b3      	cmp	r3, r6
 800c10a:	9a08      	ldr	r2, [sp, #32]
 800c10c:	bfa8      	it	ge
 800c10e:	4633      	movge	r3, r6
 800c110:	eba8 0803 	sub.w	r8, r8, r3
 800c114:	1af6      	subs	r6, r6, r3
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	9308      	str	r3, [sp, #32]
 800c11a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c11c:	b1f3      	cbz	r3, 800c15c <_dtoa_r+0x78c>
 800c11e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c120:	2b00      	cmp	r3, #0
 800c122:	f000 80b7 	beq.w	800c294 <_dtoa_r+0x8c4>
 800c126:	b18c      	cbz	r4, 800c14c <_dtoa_r+0x77c>
 800c128:	4629      	mov	r1, r5
 800c12a:	4622      	mov	r2, r4
 800c12c:	4658      	mov	r0, fp
 800c12e:	f001 f85d 	bl	800d1ec <__pow5mult>
 800c132:	464a      	mov	r2, r9
 800c134:	4601      	mov	r1, r0
 800c136:	4605      	mov	r5, r0
 800c138:	4658      	mov	r0, fp
 800c13a:	f000 ffad 	bl	800d098 <__multiply>
 800c13e:	4649      	mov	r1, r9
 800c140:	9004      	str	r0, [sp, #16]
 800c142:	4658      	mov	r0, fp
 800c144:	f000 fe94 	bl	800ce70 <_Bfree>
 800c148:	9b04      	ldr	r3, [sp, #16]
 800c14a:	4699      	mov	r9, r3
 800c14c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c14e:	1b1a      	subs	r2, r3, r4
 800c150:	d004      	beq.n	800c15c <_dtoa_r+0x78c>
 800c152:	4649      	mov	r1, r9
 800c154:	4658      	mov	r0, fp
 800c156:	f001 f849 	bl	800d1ec <__pow5mult>
 800c15a:	4681      	mov	r9, r0
 800c15c:	2101      	movs	r1, #1
 800c15e:	4658      	mov	r0, fp
 800c160:	f000 ff84 	bl	800d06c <__i2b>
 800c164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c166:	4604      	mov	r4, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f000 81cf 	beq.w	800c50c <_dtoa_r+0xb3c>
 800c16e:	461a      	mov	r2, r3
 800c170:	4601      	mov	r1, r0
 800c172:	4658      	mov	r0, fp
 800c174:	f001 f83a 	bl	800d1ec <__pow5mult>
 800c178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	4604      	mov	r4, r0
 800c17e:	f300 8095 	bgt.w	800c2ac <_dtoa_r+0x8dc>
 800c182:	9b02      	ldr	r3, [sp, #8]
 800c184:	2b00      	cmp	r3, #0
 800c186:	f040 8087 	bne.w	800c298 <_dtoa_r+0x8c8>
 800c18a:	9b03      	ldr	r3, [sp, #12]
 800c18c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c190:	2b00      	cmp	r3, #0
 800c192:	f040 8089 	bne.w	800c2a8 <_dtoa_r+0x8d8>
 800c196:	9b03      	ldr	r3, [sp, #12]
 800c198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c19c:	0d1b      	lsrs	r3, r3, #20
 800c19e:	051b      	lsls	r3, r3, #20
 800c1a0:	b12b      	cbz	r3, 800c1ae <_dtoa_r+0x7de>
 800c1a2:	9b08      	ldr	r3, [sp, #32]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	9308      	str	r3, [sp, #32]
 800c1a8:	f108 0801 	add.w	r8, r8, #1
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f000 81b0 	beq.w	800c518 <_dtoa_r+0xb48>
 800c1b8:	6923      	ldr	r3, [r4, #16]
 800c1ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c1be:	6918      	ldr	r0, [r3, #16]
 800c1c0:	f000 ff08 	bl	800cfd4 <__hi0bits>
 800c1c4:	f1c0 0020 	rsb	r0, r0, #32
 800c1c8:	9b08      	ldr	r3, [sp, #32]
 800c1ca:	4418      	add	r0, r3
 800c1cc:	f010 001f 	ands.w	r0, r0, #31
 800c1d0:	d077      	beq.n	800c2c2 <_dtoa_r+0x8f2>
 800c1d2:	f1c0 0320 	rsb	r3, r0, #32
 800c1d6:	2b04      	cmp	r3, #4
 800c1d8:	dd6b      	ble.n	800c2b2 <_dtoa_r+0x8e2>
 800c1da:	9b08      	ldr	r3, [sp, #32]
 800c1dc:	f1c0 001c 	rsb	r0, r0, #28
 800c1e0:	4403      	add	r3, r0
 800c1e2:	4480      	add	r8, r0
 800c1e4:	4406      	add	r6, r0
 800c1e6:	9308      	str	r3, [sp, #32]
 800c1e8:	f1b8 0f00 	cmp.w	r8, #0
 800c1ec:	dd05      	ble.n	800c1fa <_dtoa_r+0x82a>
 800c1ee:	4649      	mov	r1, r9
 800c1f0:	4642      	mov	r2, r8
 800c1f2:	4658      	mov	r0, fp
 800c1f4:	f001 f854 	bl	800d2a0 <__lshift>
 800c1f8:	4681      	mov	r9, r0
 800c1fa:	9b08      	ldr	r3, [sp, #32]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	dd05      	ble.n	800c20c <_dtoa_r+0x83c>
 800c200:	4621      	mov	r1, r4
 800c202:	461a      	mov	r2, r3
 800c204:	4658      	mov	r0, fp
 800c206:	f001 f84b 	bl	800d2a0 <__lshift>
 800c20a:	4604      	mov	r4, r0
 800c20c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d059      	beq.n	800c2c6 <_dtoa_r+0x8f6>
 800c212:	4621      	mov	r1, r4
 800c214:	4648      	mov	r0, r9
 800c216:	f001 f8af 	bl	800d378 <__mcmp>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	da53      	bge.n	800c2c6 <_dtoa_r+0x8f6>
 800c21e:	1e7b      	subs	r3, r7, #1
 800c220:	9304      	str	r3, [sp, #16]
 800c222:	4649      	mov	r1, r9
 800c224:	2300      	movs	r3, #0
 800c226:	220a      	movs	r2, #10
 800c228:	4658      	mov	r0, fp
 800c22a:	f000 fe43 	bl	800ceb4 <__multadd>
 800c22e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c230:	4681      	mov	r9, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	f000 8172 	beq.w	800c51c <_dtoa_r+0xb4c>
 800c238:	2300      	movs	r3, #0
 800c23a:	4629      	mov	r1, r5
 800c23c:	220a      	movs	r2, #10
 800c23e:	4658      	mov	r0, fp
 800c240:	f000 fe38 	bl	800ceb4 <__multadd>
 800c244:	9b00      	ldr	r3, [sp, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	4605      	mov	r5, r0
 800c24a:	dc67      	bgt.n	800c31c <_dtoa_r+0x94c>
 800c24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c24e:	2b02      	cmp	r3, #2
 800c250:	dc41      	bgt.n	800c2d6 <_dtoa_r+0x906>
 800c252:	e063      	b.n	800c31c <_dtoa_r+0x94c>
 800c254:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c256:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c25a:	e746      	b.n	800c0ea <_dtoa_r+0x71a>
 800c25c:	9b07      	ldr	r3, [sp, #28]
 800c25e:	1e5c      	subs	r4, r3, #1
 800c260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c262:	42a3      	cmp	r3, r4
 800c264:	bfbf      	itttt	lt
 800c266:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c268:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c26a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c26c:	1ae3      	sublt	r3, r4, r3
 800c26e:	bfb4      	ite	lt
 800c270:	18d2      	addlt	r2, r2, r3
 800c272:	1b1c      	subge	r4, r3, r4
 800c274:	9b07      	ldr	r3, [sp, #28]
 800c276:	bfbc      	itt	lt
 800c278:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c27a:	2400      	movlt	r4, #0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	bfb5      	itete	lt
 800c280:	eba8 0603 	sublt.w	r6, r8, r3
 800c284:	9b07      	ldrge	r3, [sp, #28]
 800c286:	2300      	movlt	r3, #0
 800c288:	4646      	movge	r6, r8
 800c28a:	e730      	b.n	800c0ee <_dtoa_r+0x71e>
 800c28c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c28e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c290:	4646      	mov	r6, r8
 800c292:	e735      	b.n	800c100 <_dtoa_r+0x730>
 800c294:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c296:	e75c      	b.n	800c152 <_dtoa_r+0x782>
 800c298:	2300      	movs	r3, #0
 800c29a:	e788      	b.n	800c1ae <_dtoa_r+0x7de>
 800c29c:	3fe00000 	.word	0x3fe00000
 800c2a0:	40240000 	.word	0x40240000
 800c2a4:	40140000 	.word	0x40140000
 800c2a8:	9b02      	ldr	r3, [sp, #8]
 800c2aa:	e780      	b.n	800c1ae <_dtoa_r+0x7de>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2b0:	e782      	b.n	800c1b8 <_dtoa_r+0x7e8>
 800c2b2:	d099      	beq.n	800c1e8 <_dtoa_r+0x818>
 800c2b4:	9a08      	ldr	r2, [sp, #32]
 800c2b6:	331c      	adds	r3, #28
 800c2b8:	441a      	add	r2, r3
 800c2ba:	4498      	add	r8, r3
 800c2bc:	441e      	add	r6, r3
 800c2be:	9208      	str	r2, [sp, #32]
 800c2c0:	e792      	b.n	800c1e8 <_dtoa_r+0x818>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	e7f6      	b.n	800c2b4 <_dtoa_r+0x8e4>
 800c2c6:	9b07      	ldr	r3, [sp, #28]
 800c2c8:	9704      	str	r7, [sp, #16]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	dc20      	bgt.n	800c310 <_dtoa_r+0x940>
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	dd1e      	ble.n	800c314 <_dtoa_r+0x944>
 800c2d6:	9b00      	ldr	r3, [sp, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	f47f aec0 	bne.w	800c05e <_dtoa_r+0x68e>
 800c2de:	4621      	mov	r1, r4
 800c2e0:	2205      	movs	r2, #5
 800c2e2:	4658      	mov	r0, fp
 800c2e4:	f000 fde6 	bl	800ceb4 <__multadd>
 800c2e8:	4601      	mov	r1, r0
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	4648      	mov	r0, r9
 800c2ee:	f001 f843 	bl	800d378 <__mcmp>
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	f77f aeb3 	ble.w	800c05e <_dtoa_r+0x68e>
 800c2f8:	4656      	mov	r6, sl
 800c2fa:	2331      	movs	r3, #49	@ 0x31
 800c2fc:	f806 3b01 	strb.w	r3, [r6], #1
 800c300:	9b04      	ldr	r3, [sp, #16]
 800c302:	3301      	adds	r3, #1
 800c304:	9304      	str	r3, [sp, #16]
 800c306:	e6ae      	b.n	800c066 <_dtoa_r+0x696>
 800c308:	9c07      	ldr	r4, [sp, #28]
 800c30a:	9704      	str	r7, [sp, #16]
 800c30c:	4625      	mov	r5, r4
 800c30e:	e7f3      	b.n	800c2f8 <_dtoa_r+0x928>
 800c310:	9b07      	ldr	r3, [sp, #28]
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c316:	2b00      	cmp	r3, #0
 800c318:	f000 8104 	beq.w	800c524 <_dtoa_r+0xb54>
 800c31c:	2e00      	cmp	r6, #0
 800c31e:	dd05      	ble.n	800c32c <_dtoa_r+0x95c>
 800c320:	4629      	mov	r1, r5
 800c322:	4632      	mov	r2, r6
 800c324:	4658      	mov	r0, fp
 800c326:	f000 ffbb 	bl	800d2a0 <__lshift>
 800c32a:	4605      	mov	r5, r0
 800c32c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d05a      	beq.n	800c3e8 <_dtoa_r+0xa18>
 800c332:	6869      	ldr	r1, [r5, #4]
 800c334:	4658      	mov	r0, fp
 800c336:	f000 fd5b 	bl	800cdf0 <_Balloc>
 800c33a:	4606      	mov	r6, r0
 800c33c:	b928      	cbnz	r0, 800c34a <_dtoa_r+0x97a>
 800c33e:	4b84      	ldr	r3, [pc, #528]	@ (800c550 <_dtoa_r+0xb80>)
 800c340:	4602      	mov	r2, r0
 800c342:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c346:	f7ff bb5a 	b.w	800b9fe <_dtoa_r+0x2e>
 800c34a:	692a      	ldr	r2, [r5, #16]
 800c34c:	3202      	adds	r2, #2
 800c34e:	0092      	lsls	r2, r2, #2
 800c350:	f105 010c 	add.w	r1, r5, #12
 800c354:	300c      	adds	r0, #12
 800c356:	f7ff fa76 	bl	800b846 <memcpy>
 800c35a:	2201      	movs	r2, #1
 800c35c:	4631      	mov	r1, r6
 800c35e:	4658      	mov	r0, fp
 800c360:	f000 ff9e 	bl	800d2a0 <__lshift>
 800c364:	f10a 0301 	add.w	r3, sl, #1
 800c368:	9307      	str	r3, [sp, #28]
 800c36a:	9b00      	ldr	r3, [sp, #0]
 800c36c:	4453      	add	r3, sl
 800c36e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c370:	9b02      	ldr	r3, [sp, #8]
 800c372:	f003 0301 	and.w	r3, r3, #1
 800c376:	462f      	mov	r7, r5
 800c378:	930a      	str	r3, [sp, #40]	@ 0x28
 800c37a:	4605      	mov	r5, r0
 800c37c:	9b07      	ldr	r3, [sp, #28]
 800c37e:	4621      	mov	r1, r4
 800c380:	3b01      	subs	r3, #1
 800c382:	4648      	mov	r0, r9
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	f7ff fa9b 	bl	800b8c0 <quorem>
 800c38a:	4639      	mov	r1, r7
 800c38c:	9002      	str	r0, [sp, #8]
 800c38e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c392:	4648      	mov	r0, r9
 800c394:	f000 fff0 	bl	800d378 <__mcmp>
 800c398:	462a      	mov	r2, r5
 800c39a:	9008      	str	r0, [sp, #32]
 800c39c:	4621      	mov	r1, r4
 800c39e:	4658      	mov	r0, fp
 800c3a0:	f001 f806 	bl	800d3b0 <__mdiff>
 800c3a4:	68c2      	ldr	r2, [r0, #12]
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	bb02      	cbnz	r2, 800c3ec <_dtoa_r+0xa1c>
 800c3aa:	4601      	mov	r1, r0
 800c3ac:	4648      	mov	r0, r9
 800c3ae:	f000 ffe3 	bl	800d378 <__mcmp>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	4658      	mov	r0, fp
 800c3b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c3ba:	f000 fd59 	bl	800ce70 <_Bfree>
 800c3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3c2:	9e07      	ldr	r6, [sp, #28]
 800c3c4:	ea43 0102 	orr.w	r1, r3, r2
 800c3c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3ca:	4319      	orrs	r1, r3
 800c3cc:	d110      	bne.n	800c3f0 <_dtoa_r+0xa20>
 800c3ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c3d2:	d029      	beq.n	800c428 <_dtoa_r+0xa58>
 800c3d4:	9b08      	ldr	r3, [sp, #32]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	dd02      	ble.n	800c3e0 <_dtoa_r+0xa10>
 800c3da:	9b02      	ldr	r3, [sp, #8]
 800c3dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c3e0:	9b00      	ldr	r3, [sp, #0]
 800c3e2:	f883 8000 	strb.w	r8, [r3]
 800c3e6:	e63f      	b.n	800c068 <_dtoa_r+0x698>
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	e7bb      	b.n	800c364 <_dtoa_r+0x994>
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	e7e1      	b.n	800c3b4 <_dtoa_r+0x9e4>
 800c3f0:	9b08      	ldr	r3, [sp, #32]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	db04      	blt.n	800c400 <_dtoa_r+0xa30>
 800c3f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3f8:	430b      	orrs	r3, r1
 800c3fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	d120      	bne.n	800c442 <_dtoa_r+0xa72>
 800c400:	2a00      	cmp	r2, #0
 800c402:	dded      	ble.n	800c3e0 <_dtoa_r+0xa10>
 800c404:	4649      	mov	r1, r9
 800c406:	2201      	movs	r2, #1
 800c408:	4658      	mov	r0, fp
 800c40a:	f000 ff49 	bl	800d2a0 <__lshift>
 800c40e:	4621      	mov	r1, r4
 800c410:	4681      	mov	r9, r0
 800c412:	f000 ffb1 	bl	800d378 <__mcmp>
 800c416:	2800      	cmp	r0, #0
 800c418:	dc03      	bgt.n	800c422 <_dtoa_r+0xa52>
 800c41a:	d1e1      	bne.n	800c3e0 <_dtoa_r+0xa10>
 800c41c:	f018 0f01 	tst.w	r8, #1
 800c420:	d0de      	beq.n	800c3e0 <_dtoa_r+0xa10>
 800c422:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c426:	d1d8      	bne.n	800c3da <_dtoa_r+0xa0a>
 800c428:	9a00      	ldr	r2, [sp, #0]
 800c42a:	2339      	movs	r3, #57	@ 0x39
 800c42c:	7013      	strb	r3, [r2, #0]
 800c42e:	4633      	mov	r3, r6
 800c430:	461e      	mov	r6, r3
 800c432:	3b01      	subs	r3, #1
 800c434:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c438:	2a39      	cmp	r2, #57	@ 0x39
 800c43a:	d052      	beq.n	800c4e2 <_dtoa_r+0xb12>
 800c43c:	3201      	adds	r2, #1
 800c43e:	701a      	strb	r2, [r3, #0]
 800c440:	e612      	b.n	800c068 <_dtoa_r+0x698>
 800c442:	2a00      	cmp	r2, #0
 800c444:	dd07      	ble.n	800c456 <_dtoa_r+0xa86>
 800c446:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c44a:	d0ed      	beq.n	800c428 <_dtoa_r+0xa58>
 800c44c:	9a00      	ldr	r2, [sp, #0]
 800c44e:	f108 0301 	add.w	r3, r8, #1
 800c452:	7013      	strb	r3, [r2, #0]
 800c454:	e608      	b.n	800c068 <_dtoa_r+0x698>
 800c456:	9b07      	ldr	r3, [sp, #28]
 800c458:	9a07      	ldr	r2, [sp, #28]
 800c45a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c45e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c460:	4293      	cmp	r3, r2
 800c462:	d028      	beq.n	800c4b6 <_dtoa_r+0xae6>
 800c464:	4649      	mov	r1, r9
 800c466:	2300      	movs	r3, #0
 800c468:	220a      	movs	r2, #10
 800c46a:	4658      	mov	r0, fp
 800c46c:	f000 fd22 	bl	800ceb4 <__multadd>
 800c470:	42af      	cmp	r7, r5
 800c472:	4681      	mov	r9, r0
 800c474:	f04f 0300 	mov.w	r3, #0
 800c478:	f04f 020a 	mov.w	r2, #10
 800c47c:	4639      	mov	r1, r7
 800c47e:	4658      	mov	r0, fp
 800c480:	d107      	bne.n	800c492 <_dtoa_r+0xac2>
 800c482:	f000 fd17 	bl	800ceb4 <__multadd>
 800c486:	4607      	mov	r7, r0
 800c488:	4605      	mov	r5, r0
 800c48a:	9b07      	ldr	r3, [sp, #28]
 800c48c:	3301      	adds	r3, #1
 800c48e:	9307      	str	r3, [sp, #28]
 800c490:	e774      	b.n	800c37c <_dtoa_r+0x9ac>
 800c492:	f000 fd0f 	bl	800ceb4 <__multadd>
 800c496:	4629      	mov	r1, r5
 800c498:	4607      	mov	r7, r0
 800c49a:	2300      	movs	r3, #0
 800c49c:	220a      	movs	r2, #10
 800c49e:	4658      	mov	r0, fp
 800c4a0:	f000 fd08 	bl	800ceb4 <__multadd>
 800c4a4:	4605      	mov	r5, r0
 800c4a6:	e7f0      	b.n	800c48a <_dtoa_r+0xaba>
 800c4a8:	9b00      	ldr	r3, [sp, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	bfcc      	ite	gt
 800c4ae:	461e      	movgt	r6, r3
 800c4b0:	2601      	movle	r6, #1
 800c4b2:	4456      	add	r6, sl
 800c4b4:	2700      	movs	r7, #0
 800c4b6:	4649      	mov	r1, r9
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	4658      	mov	r0, fp
 800c4bc:	f000 fef0 	bl	800d2a0 <__lshift>
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	4681      	mov	r9, r0
 800c4c4:	f000 ff58 	bl	800d378 <__mcmp>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	dcb0      	bgt.n	800c42e <_dtoa_r+0xa5e>
 800c4cc:	d102      	bne.n	800c4d4 <_dtoa_r+0xb04>
 800c4ce:	f018 0f01 	tst.w	r8, #1
 800c4d2:	d1ac      	bne.n	800c42e <_dtoa_r+0xa5e>
 800c4d4:	4633      	mov	r3, r6
 800c4d6:	461e      	mov	r6, r3
 800c4d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4dc:	2a30      	cmp	r2, #48	@ 0x30
 800c4de:	d0fa      	beq.n	800c4d6 <_dtoa_r+0xb06>
 800c4e0:	e5c2      	b.n	800c068 <_dtoa_r+0x698>
 800c4e2:	459a      	cmp	sl, r3
 800c4e4:	d1a4      	bne.n	800c430 <_dtoa_r+0xa60>
 800c4e6:	9b04      	ldr	r3, [sp, #16]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	9304      	str	r3, [sp, #16]
 800c4ec:	2331      	movs	r3, #49	@ 0x31
 800c4ee:	f88a 3000 	strb.w	r3, [sl]
 800c4f2:	e5b9      	b.n	800c068 <_dtoa_r+0x698>
 800c4f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c4f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c554 <_dtoa_r+0xb84>
 800c4fa:	b11b      	cbz	r3, 800c504 <_dtoa_r+0xb34>
 800c4fc:	f10a 0308 	add.w	r3, sl, #8
 800c500:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c502:	6013      	str	r3, [r2, #0]
 800c504:	4650      	mov	r0, sl
 800c506:	b019      	add	sp, #100	@ 0x64
 800c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c50e:	2b01      	cmp	r3, #1
 800c510:	f77f ae37 	ble.w	800c182 <_dtoa_r+0x7b2>
 800c514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c516:	930a      	str	r3, [sp, #40]	@ 0x28
 800c518:	2001      	movs	r0, #1
 800c51a:	e655      	b.n	800c1c8 <_dtoa_r+0x7f8>
 800c51c:	9b00      	ldr	r3, [sp, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	f77f aed6 	ble.w	800c2d0 <_dtoa_r+0x900>
 800c524:	4656      	mov	r6, sl
 800c526:	4621      	mov	r1, r4
 800c528:	4648      	mov	r0, r9
 800c52a:	f7ff f9c9 	bl	800b8c0 <quorem>
 800c52e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c532:	f806 8b01 	strb.w	r8, [r6], #1
 800c536:	9b00      	ldr	r3, [sp, #0]
 800c538:	eba6 020a 	sub.w	r2, r6, sl
 800c53c:	4293      	cmp	r3, r2
 800c53e:	ddb3      	ble.n	800c4a8 <_dtoa_r+0xad8>
 800c540:	4649      	mov	r1, r9
 800c542:	2300      	movs	r3, #0
 800c544:	220a      	movs	r2, #10
 800c546:	4658      	mov	r0, fp
 800c548:	f000 fcb4 	bl	800ceb4 <__multadd>
 800c54c:	4681      	mov	r9, r0
 800c54e:	e7ea      	b.n	800c526 <_dtoa_r+0xb56>
 800c550:	080105d4 	.word	0x080105d4
 800c554:	0801056f 	.word	0x0801056f

0800c558 <_free_r>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	4605      	mov	r5, r0
 800c55c:	2900      	cmp	r1, #0
 800c55e:	d041      	beq.n	800c5e4 <_free_r+0x8c>
 800c560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c564:	1f0c      	subs	r4, r1, #4
 800c566:	2b00      	cmp	r3, #0
 800c568:	bfb8      	it	lt
 800c56a:	18e4      	addlt	r4, r4, r3
 800c56c:	f000 fc34 	bl	800cdd8 <__malloc_lock>
 800c570:	4a1d      	ldr	r2, [pc, #116]	@ (800c5e8 <_free_r+0x90>)
 800c572:	6813      	ldr	r3, [r2, #0]
 800c574:	b933      	cbnz	r3, 800c584 <_free_r+0x2c>
 800c576:	6063      	str	r3, [r4, #4]
 800c578:	6014      	str	r4, [r2, #0]
 800c57a:	4628      	mov	r0, r5
 800c57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c580:	f000 bc30 	b.w	800cde4 <__malloc_unlock>
 800c584:	42a3      	cmp	r3, r4
 800c586:	d908      	bls.n	800c59a <_free_r+0x42>
 800c588:	6820      	ldr	r0, [r4, #0]
 800c58a:	1821      	adds	r1, r4, r0
 800c58c:	428b      	cmp	r3, r1
 800c58e:	bf01      	itttt	eq
 800c590:	6819      	ldreq	r1, [r3, #0]
 800c592:	685b      	ldreq	r3, [r3, #4]
 800c594:	1809      	addeq	r1, r1, r0
 800c596:	6021      	streq	r1, [r4, #0]
 800c598:	e7ed      	b.n	800c576 <_free_r+0x1e>
 800c59a:	461a      	mov	r2, r3
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	b10b      	cbz	r3, 800c5a4 <_free_r+0x4c>
 800c5a0:	42a3      	cmp	r3, r4
 800c5a2:	d9fa      	bls.n	800c59a <_free_r+0x42>
 800c5a4:	6811      	ldr	r1, [r2, #0]
 800c5a6:	1850      	adds	r0, r2, r1
 800c5a8:	42a0      	cmp	r0, r4
 800c5aa:	d10b      	bne.n	800c5c4 <_free_r+0x6c>
 800c5ac:	6820      	ldr	r0, [r4, #0]
 800c5ae:	4401      	add	r1, r0
 800c5b0:	1850      	adds	r0, r2, r1
 800c5b2:	4283      	cmp	r3, r0
 800c5b4:	6011      	str	r1, [r2, #0]
 800c5b6:	d1e0      	bne.n	800c57a <_free_r+0x22>
 800c5b8:	6818      	ldr	r0, [r3, #0]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	6053      	str	r3, [r2, #4]
 800c5be:	4408      	add	r0, r1
 800c5c0:	6010      	str	r0, [r2, #0]
 800c5c2:	e7da      	b.n	800c57a <_free_r+0x22>
 800c5c4:	d902      	bls.n	800c5cc <_free_r+0x74>
 800c5c6:	230c      	movs	r3, #12
 800c5c8:	602b      	str	r3, [r5, #0]
 800c5ca:	e7d6      	b.n	800c57a <_free_r+0x22>
 800c5cc:	6820      	ldr	r0, [r4, #0]
 800c5ce:	1821      	adds	r1, r4, r0
 800c5d0:	428b      	cmp	r3, r1
 800c5d2:	bf04      	itt	eq
 800c5d4:	6819      	ldreq	r1, [r3, #0]
 800c5d6:	685b      	ldreq	r3, [r3, #4]
 800c5d8:	6063      	str	r3, [r4, #4]
 800c5da:	bf04      	itt	eq
 800c5dc:	1809      	addeq	r1, r1, r0
 800c5de:	6021      	streq	r1, [r4, #0]
 800c5e0:	6054      	str	r4, [r2, #4]
 800c5e2:	e7ca      	b.n	800c57a <_free_r+0x22>
 800c5e4:	bd38      	pop	{r3, r4, r5, pc}
 800c5e6:	bf00      	nop
 800c5e8:	20000764 	.word	0x20000764

0800c5ec <rshift>:
 800c5ec:	6903      	ldr	r3, [r0, #16]
 800c5ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c5f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c5fa:	f100 0414 	add.w	r4, r0, #20
 800c5fe:	dd45      	ble.n	800c68c <rshift+0xa0>
 800c600:	f011 011f 	ands.w	r1, r1, #31
 800c604:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c608:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c60c:	d10c      	bne.n	800c628 <rshift+0x3c>
 800c60e:	f100 0710 	add.w	r7, r0, #16
 800c612:	4629      	mov	r1, r5
 800c614:	42b1      	cmp	r1, r6
 800c616:	d334      	bcc.n	800c682 <rshift+0x96>
 800c618:	1a9b      	subs	r3, r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	1eea      	subs	r2, r5, #3
 800c61e:	4296      	cmp	r6, r2
 800c620:	bf38      	it	cc
 800c622:	2300      	movcc	r3, #0
 800c624:	4423      	add	r3, r4
 800c626:	e015      	b.n	800c654 <rshift+0x68>
 800c628:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c62c:	f1c1 0820 	rsb	r8, r1, #32
 800c630:	40cf      	lsrs	r7, r1
 800c632:	f105 0e04 	add.w	lr, r5, #4
 800c636:	46a1      	mov	r9, r4
 800c638:	4576      	cmp	r6, lr
 800c63a:	46f4      	mov	ip, lr
 800c63c:	d815      	bhi.n	800c66a <rshift+0x7e>
 800c63e:	1a9a      	subs	r2, r3, r2
 800c640:	0092      	lsls	r2, r2, #2
 800c642:	3a04      	subs	r2, #4
 800c644:	3501      	adds	r5, #1
 800c646:	42ae      	cmp	r6, r5
 800c648:	bf38      	it	cc
 800c64a:	2200      	movcc	r2, #0
 800c64c:	18a3      	adds	r3, r4, r2
 800c64e:	50a7      	str	r7, [r4, r2]
 800c650:	b107      	cbz	r7, 800c654 <rshift+0x68>
 800c652:	3304      	adds	r3, #4
 800c654:	1b1a      	subs	r2, r3, r4
 800c656:	42a3      	cmp	r3, r4
 800c658:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c65c:	bf08      	it	eq
 800c65e:	2300      	moveq	r3, #0
 800c660:	6102      	str	r2, [r0, #16]
 800c662:	bf08      	it	eq
 800c664:	6143      	streq	r3, [r0, #20]
 800c666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c66a:	f8dc c000 	ldr.w	ip, [ip]
 800c66e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c672:	ea4c 0707 	orr.w	r7, ip, r7
 800c676:	f849 7b04 	str.w	r7, [r9], #4
 800c67a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c67e:	40cf      	lsrs	r7, r1
 800c680:	e7da      	b.n	800c638 <rshift+0x4c>
 800c682:	f851 cb04 	ldr.w	ip, [r1], #4
 800c686:	f847 cf04 	str.w	ip, [r7, #4]!
 800c68a:	e7c3      	b.n	800c614 <rshift+0x28>
 800c68c:	4623      	mov	r3, r4
 800c68e:	e7e1      	b.n	800c654 <rshift+0x68>

0800c690 <__hexdig_fun>:
 800c690:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c694:	2b09      	cmp	r3, #9
 800c696:	d802      	bhi.n	800c69e <__hexdig_fun+0xe>
 800c698:	3820      	subs	r0, #32
 800c69a:	b2c0      	uxtb	r0, r0
 800c69c:	4770      	bx	lr
 800c69e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c6a2:	2b05      	cmp	r3, #5
 800c6a4:	d801      	bhi.n	800c6aa <__hexdig_fun+0x1a>
 800c6a6:	3847      	subs	r0, #71	@ 0x47
 800c6a8:	e7f7      	b.n	800c69a <__hexdig_fun+0xa>
 800c6aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c6ae:	2b05      	cmp	r3, #5
 800c6b0:	d801      	bhi.n	800c6b6 <__hexdig_fun+0x26>
 800c6b2:	3827      	subs	r0, #39	@ 0x27
 800c6b4:	e7f1      	b.n	800c69a <__hexdig_fun+0xa>
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	4770      	bx	lr
	...

0800c6bc <__gethex>:
 800c6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c0:	b085      	sub	sp, #20
 800c6c2:	468a      	mov	sl, r1
 800c6c4:	9302      	str	r3, [sp, #8]
 800c6c6:	680b      	ldr	r3, [r1, #0]
 800c6c8:	9001      	str	r0, [sp, #4]
 800c6ca:	4690      	mov	r8, r2
 800c6cc:	1c9c      	adds	r4, r3, #2
 800c6ce:	46a1      	mov	r9, r4
 800c6d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c6d4:	2830      	cmp	r0, #48	@ 0x30
 800c6d6:	d0fa      	beq.n	800c6ce <__gethex+0x12>
 800c6d8:	eba9 0303 	sub.w	r3, r9, r3
 800c6dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800c6e0:	f7ff ffd6 	bl	800c690 <__hexdig_fun>
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d168      	bne.n	800c7bc <__gethex+0x100>
 800c6ea:	49a0      	ldr	r1, [pc, #640]	@ (800c96c <__gethex+0x2b0>)
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	4648      	mov	r0, r9
 800c6f0:	f7fe ffc3 	bl	800b67a <strncmp>
 800c6f4:	4607      	mov	r7, r0
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	d167      	bne.n	800c7ca <__gethex+0x10e>
 800c6fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c6fe:	4626      	mov	r6, r4
 800c700:	f7ff ffc6 	bl	800c690 <__hexdig_fun>
 800c704:	2800      	cmp	r0, #0
 800c706:	d062      	beq.n	800c7ce <__gethex+0x112>
 800c708:	4623      	mov	r3, r4
 800c70a:	7818      	ldrb	r0, [r3, #0]
 800c70c:	2830      	cmp	r0, #48	@ 0x30
 800c70e:	4699      	mov	r9, r3
 800c710:	f103 0301 	add.w	r3, r3, #1
 800c714:	d0f9      	beq.n	800c70a <__gethex+0x4e>
 800c716:	f7ff ffbb 	bl	800c690 <__hexdig_fun>
 800c71a:	fab0 f580 	clz	r5, r0
 800c71e:	096d      	lsrs	r5, r5, #5
 800c720:	f04f 0b01 	mov.w	fp, #1
 800c724:	464a      	mov	r2, r9
 800c726:	4616      	mov	r6, r2
 800c728:	3201      	adds	r2, #1
 800c72a:	7830      	ldrb	r0, [r6, #0]
 800c72c:	f7ff ffb0 	bl	800c690 <__hexdig_fun>
 800c730:	2800      	cmp	r0, #0
 800c732:	d1f8      	bne.n	800c726 <__gethex+0x6a>
 800c734:	498d      	ldr	r1, [pc, #564]	@ (800c96c <__gethex+0x2b0>)
 800c736:	2201      	movs	r2, #1
 800c738:	4630      	mov	r0, r6
 800c73a:	f7fe ff9e 	bl	800b67a <strncmp>
 800c73e:	2800      	cmp	r0, #0
 800c740:	d13f      	bne.n	800c7c2 <__gethex+0x106>
 800c742:	b944      	cbnz	r4, 800c756 <__gethex+0x9a>
 800c744:	1c74      	adds	r4, r6, #1
 800c746:	4622      	mov	r2, r4
 800c748:	4616      	mov	r6, r2
 800c74a:	3201      	adds	r2, #1
 800c74c:	7830      	ldrb	r0, [r6, #0]
 800c74e:	f7ff ff9f 	bl	800c690 <__hexdig_fun>
 800c752:	2800      	cmp	r0, #0
 800c754:	d1f8      	bne.n	800c748 <__gethex+0x8c>
 800c756:	1ba4      	subs	r4, r4, r6
 800c758:	00a7      	lsls	r7, r4, #2
 800c75a:	7833      	ldrb	r3, [r6, #0]
 800c75c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c760:	2b50      	cmp	r3, #80	@ 0x50
 800c762:	d13e      	bne.n	800c7e2 <__gethex+0x126>
 800c764:	7873      	ldrb	r3, [r6, #1]
 800c766:	2b2b      	cmp	r3, #43	@ 0x2b
 800c768:	d033      	beq.n	800c7d2 <__gethex+0x116>
 800c76a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c76c:	d034      	beq.n	800c7d8 <__gethex+0x11c>
 800c76e:	1c71      	adds	r1, r6, #1
 800c770:	2400      	movs	r4, #0
 800c772:	7808      	ldrb	r0, [r1, #0]
 800c774:	f7ff ff8c 	bl	800c690 <__hexdig_fun>
 800c778:	1e43      	subs	r3, r0, #1
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	2b18      	cmp	r3, #24
 800c77e:	d830      	bhi.n	800c7e2 <__gethex+0x126>
 800c780:	f1a0 0210 	sub.w	r2, r0, #16
 800c784:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c788:	f7ff ff82 	bl	800c690 <__hexdig_fun>
 800c78c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c790:	fa5f fc8c 	uxtb.w	ip, ip
 800c794:	f1bc 0f18 	cmp.w	ip, #24
 800c798:	f04f 030a 	mov.w	r3, #10
 800c79c:	d91e      	bls.n	800c7dc <__gethex+0x120>
 800c79e:	b104      	cbz	r4, 800c7a2 <__gethex+0xe6>
 800c7a0:	4252      	negs	r2, r2
 800c7a2:	4417      	add	r7, r2
 800c7a4:	f8ca 1000 	str.w	r1, [sl]
 800c7a8:	b1ed      	cbz	r5, 800c7e6 <__gethex+0x12a>
 800c7aa:	f1bb 0f00 	cmp.w	fp, #0
 800c7ae:	bf0c      	ite	eq
 800c7b0:	2506      	moveq	r5, #6
 800c7b2:	2500      	movne	r5, #0
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	b005      	add	sp, #20
 800c7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7bc:	2500      	movs	r5, #0
 800c7be:	462c      	mov	r4, r5
 800c7c0:	e7b0      	b.n	800c724 <__gethex+0x68>
 800c7c2:	2c00      	cmp	r4, #0
 800c7c4:	d1c7      	bne.n	800c756 <__gethex+0x9a>
 800c7c6:	4627      	mov	r7, r4
 800c7c8:	e7c7      	b.n	800c75a <__gethex+0x9e>
 800c7ca:	464e      	mov	r6, r9
 800c7cc:	462f      	mov	r7, r5
 800c7ce:	2501      	movs	r5, #1
 800c7d0:	e7c3      	b.n	800c75a <__gethex+0x9e>
 800c7d2:	2400      	movs	r4, #0
 800c7d4:	1cb1      	adds	r1, r6, #2
 800c7d6:	e7cc      	b.n	800c772 <__gethex+0xb6>
 800c7d8:	2401      	movs	r4, #1
 800c7da:	e7fb      	b.n	800c7d4 <__gethex+0x118>
 800c7dc:	fb03 0002 	mla	r0, r3, r2, r0
 800c7e0:	e7ce      	b.n	800c780 <__gethex+0xc4>
 800c7e2:	4631      	mov	r1, r6
 800c7e4:	e7de      	b.n	800c7a4 <__gethex+0xe8>
 800c7e6:	eba6 0309 	sub.w	r3, r6, r9
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	2b07      	cmp	r3, #7
 800c7f0:	dc0a      	bgt.n	800c808 <__gethex+0x14c>
 800c7f2:	9801      	ldr	r0, [sp, #4]
 800c7f4:	f000 fafc 	bl	800cdf0 <_Balloc>
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	b940      	cbnz	r0, 800c80e <__gethex+0x152>
 800c7fc:	4b5c      	ldr	r3, [pc, #368]	@ (800c970 <__gethex+0x2b4>)
 800c7fe:	4602      	mov	r2, r0
 800c800:	21e4      	movs	r1, #228	@ 0xe4
 800c802:	485c      	ldr	r0, [pc, #368]	@ (800c974 <__gethex+0x2b8>)
 800c804:	f7ff f83e 	bl	800b884 <__assert_func>
 800c808:	3101      	adds	r1, #1
 800c80a:	105b      	asrs	r3, r3, #1
 800c80c:	e7ef      	b.n	800c7ee <__gethex+0x132>
 800c80e:	f100 0a14 	add.w	sl, r0, #20
 800c812:	2300      	movs	r3, #0
 800c814:	4655      	mov	r5, sl
 800c816:	469b      	mov	fp, r3
 800c818:	45b1      	cmp	r9, r6
 800c81a:	d337      	bcc.n	800c88c <__gethex+0x1d0>
 800c81c:	f845 bb04 	str.w	fp, [r5], #4
 800c820:	eba5 050a 	sub.w	r5, r5, sl
 800c824:	10ad      	asrs	r5, r5, #2
 800c826:	6125      	str	r5, [r4, #16]
 800c828:	4658      	mov	r0, fp
 800c82a:	f000 fbd3 	bl	800cfd4 <__hi0bits>
 800c82e:	016d      	lsls	r5, r5, #5
 800c830:	f8d8 6000 	ldr.w	r6, [r8]
 800c834:	1a2d      	subs	r5, r5, r0
 800c836:	42b5      	cmp	r5, r6
 800c838:	dd54      	ble.n	800c8e4 <__gethex+0x228>
 800c83a:	1bad      	subs	r5, r5, r6
 800c83c:	4629      	mov	r1, r5
 800c83e:	4620      	mov	r0, r4
 800c840:	f000 ff67 	bl	800d712 <__any_on>
 800c844:	4681      	mov	r9, r0
 800c846:	b178      	cbz	r0, 800c868 <__gethex+0x1ac>
 800c848:	1e6b      	subs	r3, r5, #1
 800c84a:	1159      	asrs	r1, r3, #5
 800c84c:	f003 021f 	and.w	r2, r3, #31
 800c850:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c854:	f04f 0901 	mov.w	r9, #1
 800c858:	fa09 f202 	lsl.w	r2, r9, r2
 800c85c:	420a      	tst	r2, r1
 800c85e:	d003      	beq.n	800c868 <__gethex+0x1ac>
 800c860:	454b      	cmp	r3, r9
 800c862:	dc36      	bgt.n	800c8d2 <__gethex+0x216>
 800c864:	f04f 0902 	mov.w	r9, #2
 800c868:	4629      	mov	r1, r5
 800c86a:	4620      	mov	r0, r4
 800c86c:	f7ff febe 	bl	800c5ec <rshift>
 800c870:	442f      	add	r7, r5
 800c872:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c876:	42bb      	cmp	r3, r7
 800c878:	da42      	bge.n	800c900 <__gethex+0x244>
 800c87a:	9801      	ldr	r0, [sp, #4]
 800c87c:	4621      	mov	r1, r4
 800c87e:	f000 faf7 	bl	800ce70 <_Bfree>
 800c882:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c884:	2300      	movs	r3, #0
 800c886:	6013      	str	r3, [r2, #0]
 800c888:	25a3      	movs	r5, #163	@ 0xa3
 800c88a:	e793      	b.n	800c7b4 <__gethex+0xf8>
 800c88c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c890:	2a2e      	cmp	r2, #46	@ 0x2e
 800c892:	d012      	beq.n	800c8ba <__gethex+0x1fe>
 800c894:	2b20      	cmp	r3, #32
 800c896:	d104      	bne.n	800c8a2 <__gethex+0x1e6>
 800c898:	f845 bb04 	str.w	fp, [r5], #4
 800c89c:	f04f 0b00 	mov.w	fp, #0
 800c8a0:	465b      	mov	r3, fp
 800c8a2:	7830      	ldrb	r0, [r6, #0]
 800c8a4:	9303      	str	r3, [sp, #12]
 800c8a6:	f7ff fef3 	bl	800c690 <__hexdig_fun>
 800c8aa:	9b03      	ldr	r3, [sp, #12]
 800c8ac:	f000 000f 	and.w	r0, r0, #15
 800c8b0:	4098      	lsls	r0, r3
 800c8b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c8b6:	3304      	adds	r3, #4
 800c8b8:	e7ae      	b.n	800c818 <__gethex+0x15c>
 800c8ba:	45b1      	cmp	r9, r6
 800c8bc:	d8ea      	bhi.n	800c894 <__gethex+0x1d8>
 800c8be:	492b      	ldr	r1, [pc, #172]	@ (800c96c <__gethex+0x2b0>)
 800c8c0:	9303      	str	r3, [sp, #12]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f7fe fed8 	bl	800b67a <strncmp>
 800c8ca:	9b03      	ldr	r3, [sp, #12]
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d1e1      	bne.n	800c894 <__gethex+0x1d8>
 800c8d0:	e7a2      	b.n	800c818 <__gethex+0x15c>
 800c8d2:	1ea9      	subs	r1, r5, #2
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	f000 ff1c 	bl	800d712 <__any_on>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d0c2      	beq.n	800c864 <__gethex+0x1a8>
 800c8de:	f04f 0903 	mov.w	r9, #3
 800c8e2:	e7c1      	b.n	800c868 <__gethex+0x1ac>
 800c8e4:	da09      	bge.n	800c8fa <__gethex+0x23e>
 800c8e6:	1b75      	subs	r5, r6, r5
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	9801      	ldr	r0, [sp, #4]
 800c8ec:	462a      	mov	r2, r5
 800c8ee:	f000 fcd7 	bl	800d2a0 <__lshift>
 800c8f2:	1b7f      	subs	r7, r7, r5
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	f100 0a14 	add.w	sl, r0, #20
 800c8fa:	f04f 0900 	mov.w	r9, #0
 800c8fe:	e7b8      	b.n	800c872 <__gethex+0x1b6>
 800c900:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c904:	42bd      	cmp	r5, r7
 800c906:	dd6f      	ble.n	800c9e8 <__gethex+0x32c>
 800c908:	1bed      	subs	r5, r5, r7
 800c90a:	42ae      	cmp	r6, r5
 800c90c:	dc34      	bgt.n	800c978 <__gethex+0x2bc>
 800c90e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c912:	2b02      	cmp	r3, #2
 800c914:	d022      	beq.n	800c95c <__gethex+0x2a0>
 800c916:	2b03      	cmp	r3, #3
 800c918:	d024      	beq.n	800c964 <__gethex+0x2a8>
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d115      	bne.n	800c94a <__gethex+0x28e>
 800c91e:	42ae      	cmp	r6, r5
 800c920:	d113      	bne.n	800c94a <__gethex+0x28e>
 800c922:	2e01      	cmp	r6, #1
 800c924:	d10b      	bne.n	800c93e <__gethex+0x282>
 800c926:	9a02      	ldr	r2, [sp, #8]
 800c928:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c92c:	6013      	str	r3, [r2, #0]
 800c92e:	2301      	movs	r3, #1
 800c930:	6123      	str	r3, [r4, #16]
 800c932:	f8ca 3000 	str.w	r3, [sl]
 800c936:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c938:	2562      	movs	r5, #98	@ 0x62
 800c93a:	601c      	str	r4, [r3, #0]
 800c93c:	e73a      	b.n	800c7b4 <__gethex+0xf8>
 800c93e:	1e71      	subs	r1, r6, #1
 800c940:	4620      	mov	r0, r4
 800c942:	f000 fee6 	bl	800d712 <__any_on>
 800c946:	2800      	cmp	r0, #0
 800c948:	d1ed      	bne.n	800c926 <__gethex+0x26a>
 800c94a:	9801      	ldr	r0, [sp, #4]
 800c94c:	4621      	mov	r1, r4
 800c94e:	f000 fa8f 	bl	800ce70 <_Bfree>
 800c952:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c954:	2300      	movs	r3, #0
 800c956:	6013      	str	r3, [r2, #0]
 800c958:	2550      	movs	r5, #80	@ 0x50
 800c95a:	e72b      	b.n	800c7b4 <__gethex+0xf8>
 800c95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1f3      	bne.n	800c94a <__gethex+0x28e>
 800c962:	e7e0      	b.n	800c926 <__gethex+0x26a>
 800c964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c966:	2b00      	cmp	r3, #0
 800c968:	d1dd      	bne.n	800c926 <__gethex+0x26a>
 800c96a:	e7ee      	b.n	800c94a <__gethex+0x28e>
 800c96c:	08010328 	.word	0x08010328
 800c970:	080105d4 	.word	0x080105d4
 800c974:	080105e5 	.word	0x080105e5
 800c978:	1e6f      	subs	r7, r5, #1
 800c97a:	f1b9 0f00 	cmp.w	r9, #0
 800c97e:	d130      	bne.n	800c9e2 <__gethex+0x326>
 800c980:	b127      	cbz	r7, 800c98c <__gethex+0x2d0>
 800c982:	4639      	mov	r1, r7
 800c984:	4620      	mov	r0, r4
 800c986:	f000 fec4 	bl	800d712 <__any_on>
 800c98a:	4681      	mov	r9, r0
 800c98c:	117a      	asrs	r2, r7, #5
 800c98e:	2301      	movs	r3, #1
 800c990:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c994:	f007 071f 	and.w	r7, r7, #31
 800c998:	40bb      	lsls	r3, r7
 800c99a:	4213      	tst	r3, r2
 800c99c:	4629      	mov	r1, r5
 800c99e:	4620      	mov	r0, r4
 800c9a0:	bf18      	it	ne
 800c9a2:	f049 0902 	orrne.w	r9, r9, #2
 800c9a6:	f7ff fe21 	bl	800c5ec <rshift>
 800c9aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c9ae:	1b76      	subs	r6, r6, r5
 800c9b0:	2502      	movs	r5, #2
 800c9b2:	f1b9 0f00 	cmp.w	r9, #0
 800c9b6:	d047      	beq.n	800ca48 <__gethex+0x38c>
 800c9b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d015      	beq.n	800c9ec <__gethex+0x330>
 800c9c0:	2b03      	cmp	r3, #3
 800c9c2:	d017      	beq.n	800c9f4 <__gethex+0x338>
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d109      	bne.n	800c9dc <__gethex+0x320>
 800c9c8:	f019 0f02 	tst.w	r9, #2
 800c9cc:	d006      	beq.n	800c9dc <__gethex+0x320>
 800c9ce:	f8da 3000 	ldr.w	r3, [sl]
 800c9d2:	ea49 0903 	orr.w	r9, r9, r3
 800c9d6:	f019 0f01 	tst.w	r9, #1
 800c9da:	d10e      	bne.n	800c9fa <__gethex+0x33e>
 800c9dc:	f045 0510 	orr.w	r5, r5, #16
 800c9e0:	e032      	b.n	800ca48 <__gethex+0x38c>
 800c9e2:	f04f 0901 	mov.w	r9, #1
 800c9e6:	e7d1      	b.n	800c98c <__gethex+0x2d0>
 800c9e8:	2501      	movs	r5, #1
 800c9ea:	e7e2      	b.n	800c9b2 <__gethex+0x2f6>
 800c9ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9ee:	f1c3 0301 	rsb	r3, r3, #1
 800c9f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c9f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d0f0      	beq.n	800c9dc <__gethex+0x320>
 800c9fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c9fe:	f104 0314 	add.w	r3, r4, #20
 800ca02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ca06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ca0a:	f04f 0c00 	mov.w	ip, #0
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca14:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ca18:	d01b      	beq.n	800ca52 <__gethex+0x396>
 800ca1a:	3201      	adds	r2, #1
 800ca1c:	6002      	str	r2, [r0, #0]
 800ca1e:	2d02      	cmp	r5, #2
 800ca20:	f104 0314 	add.w	r3, r4, #20
 800ca24:	d13c      	bne.n	800caa0 <__gethex+0x3e4>
 800ca26:	f8d8 2000 	ldr.w	r2, [r8]
 800ca2a:	3a01      	subs	r2, #1
 800ca2c:	42b2      	cmp	r2, r6
 800ca2e:	d109      	bne.n	800ca44 <__gethex+0x388>
 800ca30:	1171      	asrs	r1, r6, #5
 800ca32:	2201      	movs	r2, #1
 800ca34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca38:	f006 061f 	and.w	r6, r6, #31
 800ca3c:	fa02 f606 	lsl.w	r6, r2, r6
 800ca40:	421e      	tst	r6, r3
 800ca42:	d13a      	bne.n	800caba <__gethex+0x3fe>
 800ca44:	f045 0520 	orr.w	r5, r5, #32
 800ca48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca4a:	601c      	str	r4, [r3, #0]
 800ca4c:	9b02      	ldr	r3, [sp, #8]
 800ca4e:	601f      	str	r7, [r3, #0]
 800ca50:	e6b0      	b.n	800c7b4 <__gethex+0xf8>
 800ca52:	4299      	cmp	r1, r3
 800ca54:	f843 cc04 	str.w	ip, [r3, #-4]
 800ca58:	d8d9      	bhi.n	800ca0e <__gethex+0x352>
 800ca5a:	68a3      	ldr	r3, [r4, #8]
 800ca5c:	459b      	cmp	fp, r3
 800ca5e:	db17      	blt.n	800ca90 <__gethex+0x3d4>
 800ca60:	6861      	ldr	r1, [r4, #4]
 800ca62:	9801      	ldr	r0, [sp, #4]
 800ca64:	3101      	adds	r1, #1
 800ca66:	f000 f9c3 	bl	800cdf0 <_Balloc>
 800ca6a:	4681      	mov	r9, r0
 800ca6c:	b918      	cbnz	r0, 800ca76 <__gethex+0x3ba>
 800ca6e:	4b1a      	ldr	r3, [pc, #104]	@ (800cad8 <__gethex+0x41c>)
 800ca70:	4602      	mov	r2, r0
 800ca72:	2184      	movs	r1, #132	@ 0x84
 800ca74:	e6c5      	b.n	800c802 <__gethex+0x146>
 800ca76:	6922      	ldr	r2, [r4, #16]
 800ca78:	3202      	adds	r2, #2
 800ca7a:	f104 010c 	add.w	r1, r4, #12
 800ca7e:	0092      	lsls	r2, r2, #2
 800ca80:	300c      	adds	r0, #12
 800ca82:	f7fe fee0 	bl	800b846 <memcpy>
 800ca86:	4621      	mov	r1, r4
 800ca88:	9801      	ldr	r0, [sp, #4]
 800ca8a:	f000 f9f1 	bl	800ce70 <_Bfree>
 800ca8e:	464c      	mov	r4, r9
 800ca90:	6923      	ldr	r3, [r4, #16]
 800ca92:	1c5a      	adds	r2, r3, #1
 800ca94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca98:	6122      	str	r2, [r4, #16]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	615a      	str	r2, [r3, #20]
 800ca9e:	e7be      	b.n	800ca1e <__gethex+0x362>
 800caa0:	6922      	ldr	r2, [r4, #16]
 800caa2:	455a      	cmp	r2, fp
 800caa4:	dd0b      	ble.n	800cabe <__gethex+0x402>
 800caa6:	2101      	movs	r1, #1
 800caa8:	4620      	mov	r0, r4
 800caaa:	f7ff fd9f 	bl	800c5ec <rshift>
 800caae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cab2:	3701      	adds	r7, #1
 800cab4:	42bb      	cmp	r3, r7
 800cab6:	f6ff aee0 	blt.w	800c87a <__gethex+0x1be>
 800caba:	2501      	movs	r5, #1
 800cabc:	e7c2      	b.n	800ca44 <__gethex+0x388>
 800cabe:	f016 061f 	ands.w	r6, r6, #31
 800cac2:	d0fa      	beq.n	800caba <__gethex+0x3fe>
 800cac4:	4453      	add	r3, sl
 800cac6:	f1c6 0620 	rsb	r6, r6, #32
 800caca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cace:	f000 fa81 	bl	800cfd4 <__hi0bits>
 800cad2:	42b0      	cmp	r0, r6
 800cad4:	dbe7      	blt.n	800caa6 <__gethex+0x3ea>
 800cad6:	e7f0      	b.n	800caba <__gethex+0x3fe>
 800cad8:	080105d4 	.word	0x080105d4

0800cadc <L_shift>:
 800cadc:	f1c2 0208 	rsb	r2, r2, #8
 800cae0:	0092      	lsls	r2, r2, #2
 800cae2:	b570      	push	{r4, r5, r6, lr}
 800cae4:	f1c2 0620 	rsb	r6, r2, #32
 800cae8:	6843      	ldr	r3, [r0, #4]
 800caea:	6804      	ldr	r4, [r0, #0]
 800caec:	fa03 f506 	lsl.w	r5, r3, r6
 800caf0:	432c      	orrs	r4, r5
 800caf2:	40d3      	lsrs	r3, r2
 800caf4:	6004      	str	r4, [r0, #0]
 800caf6:	f840 3f04 	str.w	r3, [r0, #4]!
 800cafa:	4288      	cmp	r0, r1
 800cafc:	d3f4      	bcc.n	800cae8 <L_shift+0xc>
 800cafe:	bd70      	pop	{r4, r5, r6, pc}

0800cb00 <__match>:
 800cb00:	b530      	push	{r4, r5, lr}
 800cb02:	6803      	ldr	r3, [r0, #0]
 800cb04:	3301      	adds	r3, #1
 800cb06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb0a:	b914      	cbnz	r4, 800cb12 <__match+0x12>
 800cb0c:	6003      	str	r3, [r0, #0]
 800cb0e:	2001      	movs	r0, #1
 800cb10:	bd30      	pop	{r4, r5, pc}
 800cb12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cb1a:	2d19      	cmp	r5, #25
 800cb1c:	bf98      	it	ls
 800cb1e:	3220      	addls	r2, #32
 800cb20:	42a2      	cmp	r2, r4
 800cb22:	d0f0      	beq.n	800cb06 <__match+0x6>
 800cb24:	2000      	movs	r0, #0
 800cb26:	e7f3      	b.n	800cb10 <__match+0x10>

0800cb28 <__hexnan>:
 800cb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2c:	680b      	ldr	r3, [r1, #0]
 800cb2e:	6801      	ldr	r1, [r0, #0]
 800cb30:	115e      	asrs	r6, r3, #5
 800cb32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb36:	f013 031f 	ands.w	r3, r3, #31
 800cb3a:	b087      	sub	sp, #28
 800cb3c:	bf18      	it	ne
 800cb3e:	3604      	addne	r6, #4
 800cb40:	2500      	movs	r5, #0
 800cb42:	1f37      	subs	r7, r6, #4
 800cb44:	4682      	mov	sl, r0
 800cb46:	4690      	mov	r8, r2
 800cb48:	9301      	str	r3, [sp, #4]
 800cb4a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cb4e:	46b9      	mov	r9, r7
 800cb50:	463c      	mov	r4, r7
 800cb52:	9502      	str	r5, [sp, #8]
 800cb54:	46ab      	mov	fp, r5
 800cb56:	784a      	ldrb	r2, [r1, #1]
 800cb58:	1c4b      	adds	r3, r1, #1
 800cb5a:	9303      	str	r3, [sp, #12]
 800cb5c:	b342      	cbz	r2, 800cbb0 <__hexnan+0x88>
 800cb5e:	4610      	mov	r0, r2
 800cb60:	9105      	str	r1, [sp, #20]
 800cb62:	9204      	str	r2, [sp, #16]
 800cb64:	f7ff fd94 	bl	800c690 <__hexdig_fun>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d151      	bne.n	800cc10 <__hexnan+0xe8>
 800cb6c:	9a04      	ldr	r2, [sp, #16]
 800cb6e:	9905      	ldr	r1, [sp, #20]
 800cb70:	2a20      	cmp	r2, #32
 800cb72:	d818      	bhi.n	800cba6 <__hexnan+0x7e>
 800cb74:	9b02      	ldr	r3, [sp, #8]
 800cb76:	459b      	cmp	fp, r3
 800cb78:	dd13      	ble.n	800cba2 <__hexnan+0x7a>
 800cb7a:	454c      	cmp	r4, r9
 800cb7c:	d206      	bcs.n	800cb8c <__hexnan+0x64>
 800cb7e:	2d07      	cmp	r5, #7
 800cb80:	dc04      	bgt.n	800cb8c <__hexnan+0x64>
 800cb82:	462a      	mov	r2, r5
 800cb84:	4649      	mov	r1, r9
 800cb86:	4620      	mov	r0, r4
 800cb88:	f7ff ffa8 	bl	800cadc <L_shift>
 800cb8c:	4544      	cmp	r4, r8
 800cb8e:	d952      	bls.n	800cc36 <__hexnan+0x10e>
 800cb90:	2300      	movs	r3, #0
 800cb92:	f1a4 0904 	sub.w	r9, r4, #4
 800cb96:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb9a:	f8cd b008 	str.w	fp, [sp, #8]
 800cb9e:	464c      	mov	r4, r9
 800cba0:	461d      	mov	r5, r3
 800cba2:	9903      	ldr	r1, [sp, #12]
 800cba4:	e7d7      	b.n	800cb56 <__hexnan+0x2e>
 800cba6:	2a29      	cmp	r2, #41	@ 0x29
 800cba8:	d157      	bne.n	800cc5a <__hexnan+0x132>
 800cbaa:	3102      	adds	r1, #2
 800cbac:	f8ca 1000 	str.w	r1, [sl]
 800cbb0:	f1bb 0f00 	cmp.w	fp, #0
 800cbb4:	d051      	beq.n	800cc5a <__hexnan+0x132>
 800cbb6:	454c      	cmp	r4, r9
 800cbb8:	d206      	bcs.n	800cbc8 <__hexnan+0xa0>
 800cbba:	2d07      	cmp	r5, #7
 800cbbc:	dc04      	bgt.n	800cbc8 <__hexnan+0xa0>
 800cbbe:	462a      	mov	r2, r5
 800cbc0:	4649      	mov	r1, r9
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	f7ff ff8a 	bl	800cadc <L_shift>
 800cbc8:	4544      	cmp	r4, r8
 800cbca:	d936      	bls.n	800cc3a <__hexnan+0x112>
 800cbcc:	f1a8 0204 	sub.w	r2, r8, #4
 800cbd0:	4623      	mov	r3, r4
 800cbd2:	f853 1b04 	ldr.w	r1, [r3], #4
 800cbd6:	f842 1f04 	str.w	r1, [r2, #4]!
 800cbda:	429f      	cmp	r7, r3
 800cbdc:	d2f9      	bcs.n	800cbd2 <__hexnan+0xaa>
 800cbde:	1b3b      	subs	r3, r7, r4
 800cbe0:	f023 0303 	bic.w	r3, r3, #3
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	3401      	adds	r4, #1
 800cbe8:	3e03      	subs	r6, #3
 800cbea:	42b4      	cmp	r4, r6
 800cbec:	bf88      	it	hi
 800cbee:	2304      	movhi	r3, #4
 800cbf0:	4443      	add	r3, r8
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f843 2b04 	str.w	r2, [r3], #4
 800cbf8:	429f      	cmp	r7, r3
 800cbfa:	d2fb      	bcs.n	800cbf4 <__hexnan+0xcc>
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	b91b      	cbnz	r3, 800cc08 <__hexnan+0xe0>
 800cc00:	4547      	cmp	r7, r8
 800cc02:	d128      	bne.n	800cc56 <__hexnan+0x12e>
 800cc04:	2301      	movs	r3, #1
 800cc06:	603b      	str	r3, [r7, #0]
 800cc08:	2005      	movs	r0, #5
 800cc0a:	b007      	add	sp, #28
 800cc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc10:	3501      	adds	r5, #1
 800cc12:	2d08      	cmp	r5, #8
 800cc14:	f10b 0b01 	add.w	fp, fp, #1
 800cc18:	dd06      	ble.n	800cc28 <__hexnan+0x100>
 800cc1a:	4544      	cmp	r4, r8
 800cc1c:	d9c1      	bls.n	800cba2 <__hexnan+0x7a>
 800cc1e:	2300      	movs	r3, #0
 800cc20:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc24:	2501      	movs	r5, #1
 800cc26:	3c04      	subs	r4, #4
 800cc28:	6822      	ldr	r2, [r4, #0]
 800cc2a:	f000 000f 	and.w	r0, r0, #15
 800cc2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cc32:	6020      	str	r0, [r4, #0]
 800cc34:	e7b5      	b.n	800cba2 <__hexnan+0x7a>
 800cc36:	2508      	movs	r5, #8
 800cc38:	e7b3      	b.n	800cba2 <__hexnan+0x7a>
 800cc3a:	9b01      	ldr	r3, [sp, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d0dd      	beq.n	800cbfc <__hexnan+0xd4>
 800cc40:	f1c3 0320 	rsb	r3, r3, #32
 800cc44:	f04f 32ff 	mov.w	r2, #4294967295
 800cc48:	40da      	lsrs	r2, r3
 800cc4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cc4e:	4013      	ands	r3, r2
 800cc50:	f846 3c04 	str.w	r3, [r6, #-4]
 800cc54:	e7d2      	b.n	800cbfc <__hexnan+0xd4>
 800cc56:	3f04      	subs	r7, #4
 800cc58:	e7d0      	b.n	800cbfc <__hexnan+0xd4>
 800cc5a:	2004      	movs	r0, #4
 800cc5c:	e7d5      	b.n	800cc0a <__hexnan+0xe2>
	...

0800cc60 <malloc>:
 800cc60:	4b02      	ldr	r3, [pc, #8]	@ (800cc6c <malloc+0xc>)
 800cc62:	4601      	mov	r1, r0
 800cc64:	6818      	ldr	r0, [r3, #0]
 800cc66:	f000 b825 	b.w	800ccb4 <_malloc_r>
 800cc6a:	bf00      	nop
 800cc6c:	20000264 	.word	0x20000264

0800cc70 <sbrk_aligned>:
 800cc70:	b570      	push	{r4, r5, r6, lr}
 800cc72:	4e0f      	ldr	r6, [pc, #60]	@ (800ccb0 <sbrk_aligned+0x40>)
 800cc74:	460c      	mov	r4, r1
 800cc76:	6831      	ldr	r1, [r6, #0]
 800cc78:	4605      	mov	r5, r0
 800cc7a:	b911      	cbnz	r1, 800cc82 <sbrk_aligned+0x12>
 800cc7c:	f000 ffa6 	bl	800dbcc <_sbrk_r>
 800cc80:	6030      	str	r0, [r6, #0]
 800cc82:	4621      	mov	r1, r4
 800cc84:	4628      	mov	r0, r5
 800cc86:	f000 ffa1 	bl	800dbcc <_sbrk_r>
 800cc8a:	1c43      	adds	r3, r0, #1
 800cc8c:	d103      	bne.n	800cc96 <sbrk_aligned+0x26>
 800cc8e:	f04f 34ff 	mov.w	r4, #4294967295
 800cc92:	4620      	mov	r0, r4
 800cc94:	bd70      	pop	{r4, r5, r6, pc}
 800cc96:	1cc4      	adds	r4, r0, #3
 800cc98:	f024 0403 	bic.w	r4, r4, #3
 800cc9c:	42a0      	cmp	r0, r4
 800cc9e:	d0f8      	beq.n	800cc92 <sbrk_aligned+0x22>
 800cca0:	1a21      	subs	r1, r4, r0
 800cca2:	4628      	mov	r0, r5
 800cca4:	f000 ff92 	bl	800dbcc <_sbrk_r>
 800cca8:	3001      	adds	r0, #1
 800ccaa:	d1f2      	bne.n	800cc92 <sbrk_aligned+0x22>
 800ccac:	e7ef      	b.n	800cc8e <sbrk_aligned+0x1e>
 800ccae:	bf00      	nop
 800ccb0:	20000760 	.word	0x20000760

0800ccb4 <_malloc_r>:
 800ccb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccb8:	1ccd      	adds	r5, r1, #3
 800ccba:	f025 0503 	bic.w	r5, r5, #3
 800ccbe:	3508      	adds	r5, #8
 800ccc0:	2d0c      	cmp	r5, #12
 800ccc2:	bf38      	it	cc
 800ccc4:	250c      	movcc	r5, #12
 800ccc6:	2d00      	cmp	r5, #0
 800ccc8:	4606      	mov	r6, r0
 800ccca:	db01      	blt.n	800ccd0 <_malloc_r+0x1c>
 800cccc:	42a9      	cmp	r1, r5
 800ccce:	d904      	bls.n	800ccda <_malloc_r+0x26>
 800ccd0:	230c      	movs	r3, #12
 800ccd2:	6033      	str	r3, [r6, #0]
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cdb0 <_malloc_r+0xfc>
 800ccde:	f000 f87b 	bl	800cdd8 <__malloc_lock>
 800cce2:	f8d8 3000 	ldr.w	r3, [r8]
 800cce6:	461c      	mov	r4, r3
 800cce8:	bb44      	cbnz	r4, 800cd3c <_malloc_r+0x88>
 800ccea:	4629      	mov	r1, r5
 800ccec:	4630      	mov	r0, r6
 800ccee:	f7ff ffbf 	bl	800cc70 <sbrk_aligned>
 800ccf2:	1c43      	adds	r3, r0, #1
 800ccf4:	4604      	mov	r4, r0
 800ccf6:	d158      	bne.n	800cdaa <_malloc_r+0xf6>
 800ccf8:	f8d8 4000 	ldr.w	r4, [r8]
 800ccfc:	4627      	mov	r7, r4
 800ccfe:	2f00      	cmp	r7, #0
 800cd00:	d143      	bne.n	800cd8a <_malloc_r+0xd6>
 800cd02:	2c00      	cmp	r4, #0
 800cd04:	d04b      	beq.n	800cd9e <_malloc_r+0xea>
 800cd06:	6823      	ldr	r3, [r4, #0]
 800cd08:	4639      	mov	r1, r7
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	eb04 0903 	add.w	r9, r4, r3
 800cd10:	f000 ff5c 	bl	800dbcc <_sbrk_r>
 800cd14:	4581      	cmp	r9, r0
 800cd16:	d142      	bne.n	800cd9e <_malloc_r+0xea>
 800cd18:	6821      	ldr	r1, [r4, #0]
 800cd1a:	1a6d      	subs	r5, r5, r1
 800cd1c:	4629      	mov	r1, r5
 800cd1e:	4630      	mov	r0, r6
 800cd20:	f7ff ffa6 	bl	800cc70 <sbrk_aligned>
 800cd24:	3001      	adds	r0, #1
 800cd26:	d03a      	beq.n	800cd9e <_malloc_r+0xea>
 800cd28:	6823      	ldr	r3, [r4, #0]
 800cd2a:	442b      	add	r3, r5
 800cd2c:	6023      	str	r3, [r4, #0]
 800cd2e:	f8d8 3000 	ldr.w	r3, [r8]
 800cd32:	685a      	ldr	r2, [r3, #4]
 800cd34:	bb62      	cbnz	r2, 800cd90 <_malloc_r+0xdc>
 800cd36:	f8c8 7000 	str.w	r7, [r8]
 800cd3a:	e00f      	b.n	800cd5c <_malloc_r+0xa8>
 800cd3c:	6822      	ldr	r2, [r4, #0]
 800cd3e:	1b52      	subs	r2, r2, r5
 800cd40:	d420      	bmi.n	800cd84 <_malloc_r+0xd0>
 800cd42:	2a0b      	cmp	r2, #11
 800cd44:	d917      	bls.n	800cd76 <_malloc_r+0xc2>
 800cd46:	1961      	adds	r1, r4, r5
 800cd48:	42a3      	cmp	r3, r4
 800cd4a:	6025      	str	r5, [r4, #0]
 800cd4c:	bf18      	it	ne
 800cd4e:	6059      	strne	r1, [r3, #4]
 800cd50:	6863      	ldr	r3, [r4, #4]
 800cd52:	bf08      	it	eq
 800cd54:	f8c8 1000 	streq.w	r1, [r8]
 800cd58:	5162      	str	r2, [r4, r5]
 800cd5a:	604b      	str	r3, [r1, #4]
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	f000 f841 	bl	800cde4 <__malloc_unlock>
 800cd62:	f104 000b 	add.w	r0, r4, #11
 800cd66:	1d23      	adds	r3, r4, #4
 800cd68:	f020 0007 	bic.w	r0, r0, #7
 800cd6c:	1ac2      	subs	r2, r0, r3
 800cd6e:	bf1c      	itt	ne
 800cd70:	1a1b      	subne	r3, r3, r0
 800cd72:	50a3      	strne	r3, [r4, r2]
 800cd74:	e7af      	b.n	800ccd6 <_malloc_r+0x22>
 800cd76:	6862      	ldr	r2, [r4, #4]
 800cd78:	42a3      	cmp	r3, r4
 800cd7a:	bf0c      	ite	eq
 800cd7c:	f8c8 2000 	streq.w	r2, [r8]
 800cd80:	605a      	strne	r2, [r3, #4]
 800cd82:	e7eb      	b.n	800cd5c <_malloc_r+0xa8>
 800cd84:	4623      	mov	r3, r4
 800cd86:	6864      	ldr	r4, [r4, #4]
 800cd88:	e7ae      	b.n	800cce8 <_malloc_r+0x34>
 800cd8a:	463c      	mov	r4, r7
 800cd8c:	687f      	ldr	r7, [r7, #4]
 800cd8e:	e7b6      	b.n	800ccfe <_malloc_r+0x4a>
 800cd90:	461a      	mov	r2, r3
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	42a3      	cmp	r3, r4
 800cd96:	d1fb      	bne.n	800cd90 <_malloc_r+0xdc>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	6053      	str	r3, [r2, #4]
 800cd9c:	e7de      	b.n	800cd5c <_malloc_r+0xa8>
 800cd9e:	230c      	movs	r3, #12
 800cda0:	6033      	str	r3, [r6, #0]
 800cda2:	4630      	mov	r0, r6
 800cda4:	f000 f81e 	bl	800cde4 <__malloc_unlock>
 800cda8:	e794      	b.n	800ccd4 <_malloc_r+0x20>
 800cdaa:	6005      	str	r5, [r0, #0]
 800cdac:	e7d6      	b.n	800cd5c <_malloc_r+0xa8>
 800cdae:	bf00      	nop
 800cdb0:	20000764 	.word	0x20000764

0800cdb4 <__ascii_mbtowc>:
 800cdb4:	b082      	sub	sp, #8
 800cdb6:	b901      	cbnz	r1, 800cdba <__ascii_mbtowc+0x6>
 800cdb8:	a901      	add	r1, sp, #4
 800cdba:	b142      	cbz	r2, 800cdce <__ascii_mbtowc+0x1a>
 800cdbc:	b14b      	cbz	r3, 800cdd2 <__ascii_mbtowc+0x1e>
 800cdbe:	7813      	ldrb	r3, [r2, #0]
 800cdc0:	600b      	str	r3, [r1, #0]
 800cdc2:	7812      	ldrb	r2, [r2, #0]
 800cdc4:	1e10      	subs	r0, r2, #0
 800cdc6:	bf18      	it	ne
 800cdc8:	2001      	movne	r0, #1
 800cdca:	b002      	add	sp, #8
 800cdcc:	4770      	bx	lr
 800cdce:	4610      	mov	r0, r2
 800cdd0:	e7fb      	b.n	800cdca <__ascii_mbtowc+0x16>
 800cdd2:	f06f 0001 	mvn.w	r0, #1
 800cdd6:	e7f8      	b.n	800cdca <__ascii_mbtowc+0x16>

0800cdd8 <__malloc_lock>:
 800cdd8:	4801      	ldr	r0, [pc, #4]	@ (800cde0 <__malloc_lock+0x8>)
 800cdda:	f7fe bd32 	b.w	800b842 <__retarget_lock_acquire_recursive>
 800cdde:	bf00      	nop
 800cde0:	2000075c 	.word	0x2000075c

0800cde4 <__malloc_unlock>:
 800cde4:	4801      	ldr	r0, [pc, #4]	@ (800cdec <__malloc_unlock+0x8>)
 800cde6:	f7fe bd2d 	b.w	800b844 <__retarget_lock_release_recursive>
 800cdea:	bf00      	nop
 800cdec:	2000075c 	.word	0x2000075c

0800cdf0 <_Balloc>:
 800cdf0:	b570      	push	{r4, r5, r6, lr}
 800cdf2:	69c6      	ldr	r6, [r0, #28]
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	460d      	mov	r5, r1
 800cdf8:	b976      	cbnz	r6, 800ce18 <_Balloc+0x28>
 800cdfa:	2010      	movs	r0, #16
 800cdfc:	f7ff ff30 	bl	800cc60 <malloc>
 800ce00:	4602      	mov	r2, r0
 800ce02:	61e0      	str	r0, [r4, #28]
 800ce04:	b920      	cbnz	r0, 800ce10 <_Balloc+0x20>
 800ce06:	4b18      	ldr	r3, [pc, #96]	@ (800ce68 <_Balloc+0x78>)
 800ce08:	4818      	ldr	r0, [pc, #96]	@ (800ce6c <_Balloc+0x7c>)
 800ce0a:	216b      	movs	r1, #107	@ 0x6b
 800ce0c:	f7fe fd3a 	bl	800b884 <__assert_func>
 800ce10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce14:	6006      	str	r6, [r0, #0]
 800ce16:	60c6      	str	r6, [r0, #12]
 800ce18:	69e6      	ldr	r6, [r4, #28]
 800ce1a:	68f3      	ldr	r3, [r6, #12]
 800ce1c:	b183      	cbz	r3, 800ce40 <_Balloc+0x50>
 800ce1e:	69e3      	ldr	r3, [r4, #28]
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce26:	b9b8      	cbnz	r0, 800ce58 <_Balloc+0x68>
 800ce28:	2101      	movs	r1, #1
 800ce2a:	fa01 f605 	lsl.w	r6, r1, r5
 800ce2e:	1d72      	adds	r2, r6, #5
 800ce30:	0092      	lsls	r2, r2, #2
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 fee1 	bl	800dbfa <_calloc_r>
 800ce38:	b160      	cbz	r0, 800ce54 <_Balloc+0x64>
 800ce3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce3e:	e00e      	b.n	800ce5e <_Balloc+0x6e>
 800ce40:	2221      	movs	r2, #33	@ 0x21
 800ce42:	2104      	movs	r1, #4
 800ce44:	4620      	mov	r0, r4
 800ce46:	f000 fed8 	bl	800dbfa <_calloc_r>
 800ce4a:	69e3      	ldr	r3, [r4, #28]
 800ce4c:	60f0      	str	r0, [r6, #12]
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d1e4      	bne.n	800ce1e <_Balloc+0x2e>
 800ce54:	2000      	movs	r0, #0
 800ce56:	bd70      	pop	{r4, r5, r6, pc}
 800ce58:	6802      	ldr	r2, [r0, #0]
 800ce5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce5e:	2300      	movs	r3, #0
 800ce60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce64:	e7f7      	b.n	800ce56 <_Balloc+0x66>
 800ce66:	bf00      	nop
 800ce68:	080104ba 	.word	0x080104ba
 800ce6c:	08010645 	.word	0x08010645

0800ce70 <_Bfree>:
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	69c6      	ldr	r6, [r0, #28]
 800ce74:	4605      	mov	r5, r0
 800ce76:	460c      	mov	r4, r1
 800ce78:	b976      	cbnz	r6, 800ce98 <_Bfree+0x28>
 800ce7a:	2010      	movs	r0, #16
 800ce7c:	f7ff fef0 	bl	800cc60 <malloc>
 800ce80:	4602      	mov	r2, r0
 800ce82:	61e8      	str	r0, [r5, #28]
 800ce84:	b920      	cbnz	r0, 800ce90 <_Bfree+0x20>
 800ce86:	4b09      	ldr	r3, [pc, #36]	@ (800ceac <_Bfree+0x3c>)
 800ce88:	4809      	ldr	r0, [pc, #36]	@ (800ceb0 <_Bfree+0x40>)
 800ce8a:	218f      	movs	r1, #143	@ 0x8f
 800ce8c:	f7fe fcfa 	bl	800b884 <__assert_func>
 800ce90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce94:	6006      	str	r6, [r0, #0]
 800ce96:	60c6      	str	r6, [r0, #12]
 800ce98:	b13c      	cbz	r4, 800ceaa <_Bfree+0x3a>
 800ce9a:	69eb      	ldr	r3, [r5, #28]
 800ce9c:	6862      	ldr	r2, [r4, #4]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cea4:	6021      	str	r1, [r4, #0]
 800cea6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ceaa:	bd70      	pop	{r4, r5, r6, pc}
 800ceac:	080104ba 	.word	0x080104ba
 800ceb0:	08010645 	.word	0x08010645

0800ceb4 <__multadd>:
 800ceb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb8:	690d      	ldr	r5, [r1, #16]
 800ceba:	4607      	mov	r7, r0
 800cebc:	460c      	mov	r4, r1
 800cebe:	461e      	mov	r6, r3
 800cec0:	f101 0c14 	add.w	ip, r1, #20
 800cec4:	2000      	movs	r0, #0
 800cec6:	f8dc 3000 	ldr.w	r3, [ip]
 800ceca:	b299      	uxth	r1, r3
 800cecc:	fb02 6101 	mla	r1, r2, r1, r6
 800ced0:	0c1e      	lsrs	r6, r3, #16
 800ced2:	0c0b      	lsrs	r3, r1, #16
 800ced4:	fb02 3306 	mla	r3, r2, r6, r3
 800ced8:	b289      	uxth	r1, r1
 800ceda:	3001      	adds	r0, #1
 800cedc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cee0:	4285      	cmp	r5, r0
 800cee2:	f84c 1b04 	str.w	r1, [ip], #4
 800cee6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ceea:	dcec      	bgt.n	800cec6 <__multadd+0x12>
 800ceec:	b30e      	cbz	r6, 800cf32 <__multadd+0x7e>
 800ceee:	68a3      	ldr	r3, [r4, #8]
 800cef0:	42ab      	cmp	r3, r5
 800cef2:	dc19      	bgt.n	800cf28 <__multadd+0x74>
 800cef4:	6861      	ldr	r1, [r4, #4]
 800cef6:	4638      	mov	r0, r7
 800cef8:	3101      	adds	r1, #1
 800cefa:	f7ff ff79 	bl	800cdf0 <_Balloc>
 800cefe:	4680      	mov	r8, r0
 800cf00:	b928      	cbnz	r0, 800cf0e <__multadd+0x5a>
 800cf02:	4602      	mov	r2, r0
 800cf04:	4b0c      	ldr	r3, [pc, #48]	@ (800cf38 <__multadd+0x84>)
 800cf06:	480d      	ldr	r0, [pc, #52]	@ (800cf3c <__multadd+0x88>)
 800cf08:	21ba      	movs	r1, #186	@ 0xba
 800cf0a:	f7fe fcbb 	bl	800b884 <__assert_func>
 800cf0e:	6922      	ldr	r2, [r4, #16]
 800cf10:	3202      	adds	r2, #2
 800cf12:	f104 010c 	add.w	r1, r4, #12
 800cf16:	0092      	lsls	r2, r2, #2
 800cf18:	300c      	adds	r0, #12
 800cf1a:	f7fe fc94 	bl	800b846 <memcpy>
 800cf1e:	4621      	mov	r1, r4
 800cf20:	4638      	mov	r0, r7
 800cf22:	f7ff ffa5 	bl	800ce70 <_Bfree>
 800cf26:	4644      	mov	r4, r8
 800cf28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf2c:	3501      	adds	r5, #1
 800cf2e:	615e      	str	r6, [r3, #20]
 800cf30:	6125      	str	r5, [r4, #16]
 800cf32:	4620      	mov	r0, r4
 800cf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf38:	080105d4 	.word	0x080105d4
 800cf3c:	08010645 	.word	0x08010645

0800cf40 <__s2b>:
 800cf40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf44:	460c      	mov	r4, r1
 800cf46:	4615      	mov	r5, r2
 800cf48:	461f      	mov	r7, r3
 800cf4a:	2209      	movs	r2, #9
 800cf4c:	3308      	adds	r3, #8
 800cf4e:	4606      	mov	r6, r0
 800cf50:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf54:	2100      	movs	r1, #0
 800cf56:	2201      	movs	r2, #1
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	db09      	blt.n	800cf70 <__s2b+0x30>
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	f7ff ff47 	bl	800cdf0 <_Balloc>
 800cf62:	b940      	cbnz	r0, 800cf76 <__s2b+0x36>
 800cf64:	4602      	mov	r2, r0
 800cf66:	4b19      	ldr	r3, [pc, #100]	@ (800cfcc <__s2b+0x8c>)
 800cf68:	4819      	ldr	r0, [pc, #100]	@ (800cfd0 <__s2b+0x90>)
 800cf6a:	21d3      	movs	r1, #211	@ 0xd3
 800cf6c:	f7fe fc8a 	bl	800b884 <__assert_func>
 800cf70:	0052      	lsls	r2, r2, #1
 800cf72:	3101      	adds	r1, #1
 800cf74:	e7f0      	b.n	800cf58 <__s2b+0x18>
 800cf76:	9b08      	ldr	r3, [sp, #32]
 800cf78:	6143      	str	r3, [r0, #20]
 800cf7a:	2d09      	cmp	r5, #9
 800cf7c:	f04f 0301 	mov.w	r3, #1
 800cf80:	6103      	str	r3, [r0, #16]
 800cf82:	dd16      	ble.n	800cfb2 <__s2b+0x72>
 800cf84:	f104 0909 	add.w	r9, r4, #9
 800cf88:	46c8      	mov	r8, r9
 800cf8a:	442c      	add	r4, r5
 800cf8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cf90:	4601      	mov	r1, r0
 800cf92:	3b30      	subs	r3, #48	@ 0x30
 800cf94:	220a      	movs	r2, #10
 800cf96:	4630      	mov	r0, r6
 800cf98:	f7ff ff8c 	bl	800ceb4 <__multadd>
 800cf9c:	45a0      	cmp	r8, r4
 800cf9e:	d1f5      	bne.n	800cf8c <__s2b+0x4c>
 800cfa0:	f1a5 0408 	sub.w	r4, r5, #8
 800cfa4:	444c      	add	r4, r9
 800cfa6:	1b2d      	subs	r5, r5, r4
 800cfa8:	1963      	adds	r3, r4, r5
 800cfaa:	42bb      	cmp	r3, r7
 800cfac:	db04      	blt.n	800cfb8 <__s2b+0x78>
 800cfae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfb2:	340a      	adds	r4, #10
 800cfb4:	2509      	movs	r5, #9
 800cfb6:	e7f6      	b.n	800cfa6 <__s2b+0x66>
 800cfb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cfbc:	4601      	mov	r1, r0
 800cfbe:	3b30      	subs	r3, #48	@ 0x30
 800cfc0:	220a      	movs	r2, #10
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f7ff ff76 	bl	800ceb4 <__multadd>
 800cfc8:	e7ee      	b.n	800cfa8 <__s2b+0x68>
 800cfca:	bf00      	nop
 800cfcc:	080105d4 	.word	0x080105d4
 800cfd0:	08010645 	.word	0x08010645

0800cfd4 <__hi0bits>:
 800cfd4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cfd8:	4603      	mov	r3, r0
 800cfda:	bf36      	itet	cc
 800cfdc:	0403      	lslcc	r3, r0, #16
 800cfde:	2000      	movcs	r0, #0
 800cfe0:	2010      	movcc	r0, #16
 800cfe2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cfe6:	bf3c      	itt	cc
 800cfe8:	021b      	lslcc	r3, r3, #8
 800cfea:	3008      	addcc	r0, #8
 800cfec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cff0:	bf3c      	itt	cc
 800cff2:	011b      	lslcc	r3, r3, #4
 800cff4:	3004      	addcc	r0, #4
 800cff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cffa:	bf3c      	itt	cc
 800cffc:	009b      	lslcc	r3, r3, #2
 800cffe:	3002      	addcc	r0, #2
 800d000:	2b00      	cmp	r3, #0
 800d002:	db05      	blt.n	800d010 <__hi0bits+0x3c>
 800d004:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d008:	f100 0001 	add.w	r0, r0, #1
 800d00c:	bf08      	it	eq
 800d00e:	2020      	moveq	r0, #32
 800d010:	4770      	bx	lr

0800d012 <__lo0bits>:
 800d012:	6803      	ldr	r3, [r0, #0]
 800d014:	4602      	mov	r2, r0
 800d016:	f013 0007 	ands.w	r0, r3, #7
 800d01a:	d00b      	beq.n	800d034 <__lo0bits+0x22>
 800d01c:	07d9      	lsls	r1, r3, #31
 800d01e:	d421      	bmi.n	800d064 <__lo0bits+0x52>
 800d020:	0798      	lsls	r0, r3, #30
 800d022:	bf49      	itett	mi
 800d024:	085b      	lsrmi	r3, r3, #1
 800d026:	089b      	lsrpl	r3, r3, #2
 800d028:	2001      	movmi	r0, #1
 800d02a:	6013      	strmi	r3, [r2, #0]
 800d02c:	bf5c      	itt	pl
 800d02e:	6013      	strpl	r3, [r2, #0]
 800d030:	2002      	movpl	r0, #2
 800d032:	4770      	bx	lr
 800d034:	b299      	uxth	r1, r3
 800d036:	b909      	cbnz	r1, 800d03c <__lo0bits+0x2a>
 800d038:	0c1b      	lsrs	r3, r3, #16
 800d03a:	2010      	movs	r0, #16
 800d03c:	b2d9      	uxtb	r1, r3
 800d03e:	b909      	cbnz	r1, 800d044 <__lo0bits+0x32>
 800d040:	3008      	adds	r0, #8
 800d042:	0a1b      	lsrs	r3, r3, #8
 800d044:	0719      	lsls	r1, r3, #28
 800d046:	bf04      	itt	eq
 800d048:	091b      	lsreq	r3, r3, #4
 800d04a:	3004      	addeq	r0, #4
 800d04c:	0799      	lsls	r1, r3, #30
 800d04e:	bf04      	itt	eq
 800d050:	089b      	lsreq	r3, r3, #2
 800d052:	3002      	addeq	r0, #2
 800d054:	07d9      	lsls	r1, r3, #31
 800d056:	d403      	bmi.n	800d060 <__lo0bits+0x4e>
 800d058:	085b      	lsrs	r3, r3, #1
 800d05a:	f100 0001 	add.w	r0, r0, #1
 800d05e:	d003      	beq.n	800d068 <__lo0bits+0x56>
 800d060:	6013      	str	r3, [r2, #0]
 800d062:	4770      	bx	lr
 800d064:	2000      	movs	r0, #0
 800d066:	4770      	bx	lr
 800d068:	2020      	movs	r0, #32
 800d06a:	4770      	bx	lr

0800d06c <__i2b>:
 800d06c:	b510      	push	{r4, lr}
 800d06e:	460c      	mov	r4, r1
 800d070:	2101      	movs	r1, #1
 800d072:	f7ff febd 	bl	800cdf0 <_Balloc>
 800d076:	4602      	mov	r2, r0
 800d078:	b928      	cbnz	r0, 800d086 <__i2b+0x1a>
 800d07a:	4b05      	ldr	r3, [pc, #20]	@ (800d090 <__i2b+0x24>)
 800d07c:	4805      	ldr	r0, [pc, #20]	@ (800d094 <__i2b+0x28>)
 800d07e:	f240 1145 	movw	r1, #325	@ 0x145
 800d082:	f7fe fbff 	bl	800b884 <__assert_func>
 800d086:	2301      	movs	r3, #1
 800d088:	6144      	str	r4, [r0, #20]
 800d08a:	6103      	str	r3, [r0, #16]
 800d08c:	bd10      	pop	{r4, pc}
 800d08e:	bf00      	nop
 800d090:	080105d4 	.word	0x080105d4
 800d094:	08010645 	.word	0x08010645

0800d098 <__multiply>:
 800d098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09c:	4614      	mov	r4, r2
 800d09e:	690a      	ldr	r2, [r1, #16]
 800d0a0:	6923      	ldr	r3, [r4, #16]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	bfa8      	it	ge
 800d0a6:	4623      	movge	r3, r4
 800d0a8:	460f      	mov	r7, r1
 800d0aa:	bfa4      	itt	ge
 800d0ac:	460c      	movge	r4, r1
 800d0ae:	461f      	movge	r7, r3
 800d0b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d0b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d0b8:	68a3      	ldr	r3, [r4, #8]
 800d0ba:	6861      	ldr	r1, [r4, #4]
 800d0bc:	eb0a 0609 	add.w	r6, sl, r9
 800d0c0:	42b3      	cmp	r3, r6
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	bfb8      	it	lt
 800d0c6:	3101      	addlt	r1, #1
 800d0c8:	f7ff fe92 	bl	800cdf0 <_Balloc>
 800d0cc:	b930      	cbnz	r0, 800d0dc <__multiply+0x44>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	4b44      	ldr	r3, [pc, #272]	@ (800d1e4 <__multiply+0x14c>)
 800d0d2:	4845      	ldr	r0, [pc, #276]	@ (800d1e8 <__multiply+0x150>)
 800d0d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d0d8:	f7fe fbd4 	bl	800b884 <__assert_func>
 800d0dc:	f100 0514 	add.w	r5, r0, #20
 800d0e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d0e4:	462b      	mov	r3, r5
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	4543      	cmp	r3, r8
 800d0ea:	d321      	bcc.n	800d130 <__multiply+0x98>
 800d0ec:	f107 0114 	add.w	r1, r7, #20
 800d0f0:	f104 0214 	add.w	r2, r4, #20
 800d0f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d0f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d0fc:	9302      	str	r3, [sp, #8]
 800d0fe:	1b13      	subs	r3, r2, r4
 800d100:	3b15      	subs	r3, #21
 800d102:	f023 0303 	bic.w	r3, r3, #3
 800d106:	3304      	adds	r3, #4
 800d108:	f104 0715 	add.w	r7, r4, #21
 800d10c:	42ba      	cmp	r2, r7
 800d10e:	bf38      	it	cc
 800d110:	2304      	movcc	r3, #4
 800d112:	9301      	str	r3, [sp, #4]
 800d114:	9b02      	ldr	r3, [sp, #8]
 800d116:	9103      	str	r1, [sp, #12]
 800d118:	428b      	cmp	r3, r1
 800d11a:	d80c      	bhi.n	800d136 <__multiply+0x9e>
 800d11c:	2e00      	cmp	r6, #0
 800d11e:	dd03      	ble.n	800d128 <__multiply+0x90>
 800d120:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d124:	2b00      	cmp	r3, #0
 800d126:	d05b      	beq.n	800d1e0 <__multiply+0x148>
 800d128:	6106      	str	r6, [r0, #16]
 800d12a:	b005      	add	sp, #20
 800d12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d130:	f843 2b04 	str.w	r2, [r3], #4
 800d134:	e7d8      	b.n	800d0e8 <__multiply+0x50>
 800d136:	f8b1 a000 	ldrh.w	sl, [r1]
 800d13a:	f1ba 0f00 	cmp.w	sl, #0
 800d13e:	d024      	beq.n	800d18a <__multiply+0xf2>
 800d140:	f104 0e14 	add.w	lr, r4, #20
 800d144:	46a9      	mov	r9, r5
 800d146:	f04f 0c00 	mov.w	ip, #0
 800d14a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d14e:	f8d9 3000 	ldr.w	r3, [r9]
 800d152:	fa1f fb87 	uxth.w	fp, r7
 800d156:	b29b      	uxth	r3, r3
 800d158:	fb0a 330b 	mla	r3, sl, fp, r3
 800d15c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d160:	f8d9 7000 	ldr.w	r7, [r9]
 800d164:	4463      	add	r3, ip
 800d166:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d16a:	fb0a c70b 	mla	r7, sl, fp, ip
 800d16e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d172:	b29b      	uxth	r3, r3
 800d174:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d178:	4572      	cmp	r2, lr
 800d17a:	f849 3b04 	str.w	r3, [r9], #4
 800d17e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d182:	d8e2      	bhi.n	800d14a <__multiply+0xb2>
 800d184:	9b01      	ldr	r3, [sp, #4]
 800d186:	f845 c003 	str.w	ip, [r5, r3]
 800d18a:	9b03      	ldr	r3, [sp, #12]
 800d18c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d190:	3104      	adds	r1, #4
 800d192:	f1b9 0f00 	cmp.w	r9, #0
 800d196:	d021      	beq.n	800d1dc <__multiply+0x144>
 800d198:	682b      	ldr	r3, [r5, #0]
 800d19a:	f104 0c14 	add.w	ip, r4, #20
 800d19e:	46ae      	mov	lr, r5
 800d1a0:	f04f 0a00 	mov.w	sl, #0
 800d1a4:	f8bc b000 	ldrh.w	fp, [ip]
 800d1a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d1ac:	fb09 770b 	mla	r7, r9, fp, r7
 800d1b0:	4457      	add	r7, sl
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d1b8:	f84e 3b04 	str.w	r3, [lr], #4
 800d1bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d1c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1c4:	f8be 3000 	ldrh.w	r3, [lr]
 800d1c8:	fb09 330a 	mla	r3, r9, sl, r3
 800d1cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d1d0:	4562      	cmp	r2, ip
 800d1d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1d6:	d8e5      	bhi.n	800d1a4 <__multiply+0x10c>
 800d1d8:	9f01      	ldr	r7, [sp, #4]
 800d1da:	51eb      	str	r3, [r5, r7]
 800d1dc:	3504      	adds	r5, #4
 800d1de:	e799      	b.n	800d114 <__multiply+0x7c>
 800d1e0:	3e01      	subs	r6, #1
 800d1e2:	e79b      	b.n	800d11c <__multiply+0x84>
 800d1e4:	080105d4 	.word	0x080105d4
 800d1e8:	08010645 	.word	0x08010645

0800d1ec <__pow5mult>:
 800d1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1f0:	4615      	mov	r5, r2
 800d1f2:	f012 0203 	ands.w	r2, r2, #3
 800d1f6:	4607      	mov	r7, r0
 800d1f8:	460e      	mov	r6, r1
 800d1fa:	d007      	beq.n	800d20c <__pow5mult+0x20>
 800d1fc:	4c25      	ldr	r4, [pc, #148]	@ (800d294 <__pow5mult+0xa8>)
 800d1fe:	3a01      	subs	r2, #1
 800d200:	2300      	movs	r3, #0
 800d202:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d206:	f7ff fe55 	bl	800ceb4 <__multadd>
 800d20a:	4606      	mov	r6, r0
 800d20c:	10ad      	asrs	r5, r5, #2
 800d20e:	d03d      	beq.n	800d28c <__pow5mult+0xa0>
 800d210:	69fc      	ldr	r4, [r7, #28]
 800d212:	b97c      	cbnz	r4, 800d234 <__pow5mult+0x48>
 800d214:	2010      	movs	r0, #16
 800d216:	f7ff fd23 	bl	800cc60 <malloc>
 800d21a:	4602      	mov	r2, r0
 800d21c:	61f8      	str	r0, [r7, #28]
 800d21e:	b928      	cbnz	r0, 800d22c <__pow5mult+0x40>
 800d220:	4b1d      	ldr	r3, [pc, #116]	@ (800d298 <__pow5mult+0xac>)
 800d222:	481e      	ldr	r0, [pc, #120]	@ (800d29c <__pow5mult+0xb0>)
 800d224:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d228:	f7fe fb2c 	bl	800b884 <__assert_func>
 800d22c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d230:	6004      	str	r4, [r0, #0]
 800d232:	60c4      	str	r4, [r0, #12]
 800d234:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d238:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d23c:	b94c      	cbnz	r4, 800d252 <__pow5mult+0x66>
 800d23e:	f240 2171 	movw	r1, #625	@ 0x271
 800d242:	4638      	mov	r0, r7
 800d244:	f7ff ff12 	bl	800d06c <__i2b>
 800d248:	2300      	movs	r3, #0
 800d24a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d24e:	4604      	mov	r4, r0
 800d250:	6003      	str	r3, [r0, #0]
 800d252:	f04f 0900 	mov.w	r9, #0
 800d256:	07eb      	lsls	r3, r5, #31
 800d258:	d50a      	bpl.n	800d270 <__pow5mult+0x84>
 800d25a:	4631      	mov	r1, r6
 800d25c:	4622      	mov	r2, r4
 800d25e:	4638      	mov	r0, r7
 800d260:	f7ff ff1a 	bl	800d098 <__multiply>
 800d264:	4631      	mov	r1, r6
 800d266:	4680      	mov	r8, r0
 800d268:	4638      	mov	r0, r7
 800d26a:	f7ff fe01 	bl	800ce70 <_Bfree>
 800d26e:	4646      	mov	r6, r8
 800d270:	106d      	asrs	r5, r5, #1
 800d272:	d00b      	beq.n	800d28c <__pow5mult+0xa0>
 800d274:	6820      	ldr	r0, [r4, #0]
 800d276:	b938      	cbnz	r0, 800d288 <__pow5mult+0x9c>
 800d278:	4622      	mov	r2, r4
 800d27a:	4621      	mov	r1, r4
 800d27c:	4638      	mov	r0, r7
 800d27e:	f7ff ff0b 	bl	800d098 <__multiply>
 800d282:	6020      	str	r0, [r4, #0]
 800d284:	f8c0 9000 	str.w	r9, [r0]
 800d288:	4604      	mov	r4, r0
 800d28a:	e7e4      	b.n	800d256 <__pow5mult+0x6a>
 800d28c:	4630      	mov	r0, r6
 800d28e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d292:	bf00      	nop
 800d294:	080106a0 	.word	0x080106a0
 800d298:	080104ba 	.word	0x080104ba
 800d29c:	08010645 	.word	0x08010645

0800d2a0 <__lshift>:
 800d2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a4:	460c      	mov	r4, r1
 800d2a6:	6849      	ldr	r1, [r1, #4]
 800d2a8:	6923      	ldr	r3, [r4, #16]
 800d2aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d2ae:	68a3      	ldr	r3, [r4, #8]
 800d2b0:	4607      	mov	r7, r0
 800d2b2:	4691      	mov	r9, r2
 800d2b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d2b8:	f108 0601 	add.w	r6, r8, #1
 800d2bc:	42b3      	cmp	r3, r6
 800d2be:	db0b      	blt.n	800d2d8 <__lshift+0x38>
 800d2c0:	4638      	mov	r0, r7
 800d2c2:	f7ff fd95 	bl	800cdf0 <_Balloc>
 800d2c6:	4605      	mov	r5, r0
 800d2c8:	b948      	cbnz	r0, 800d2de <__lshift+0x3e>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	4b28      	ldr	r3, [pc, #160]	@ (800d370 <__lshift+0xd0>)
 800d2ce:	4829      	ldr	r0, [pc, #164]	@ (800d374 <__lshift+0xd4>)
 800d2d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d2d4:	f7fe fad6 	bl	800b884 <__assert_func>
 800d2d8:	3101      	adds	r1, #1
 800d2da:	005b      	lsls	r3, r3, #1
 800d2dc:	e7ee      	b.n	800d2bc <__lshift+0x1c>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	f100 0114 	add.w	r1, r0, #20
 800d2e4:	f100 0210 	add.w	r2, r0, #16
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	4553      	cmp	r3, sl
 800d2ec:	db33      	blt.n	800d356 <__lshift+0xb6>
 800d2ee:	6920      	ldr	r0, [r4, #16]
 800d2f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2f4:	f104 0314 	add.w	r3, r4, #20
 800d2f8:	f019 091f 	ands.w	r9, r9, #31
 800d2fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d300:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d304:	d02b      	beq.n	800d35e <__lshift+0xbe>
 800d306:	f1c9 0e20 	rsb	lr, r9, #32
 800d30a:	468a      	mov	sl, r1
 800d30c:	2200      	movs	r2, #0
 800d30e:	6818      	ldr	r0, [r3, #0]
 800d310:	fa00 f009 	lsl.w	r0, r0, r9
 800d314:	4310      	orrs	r0, r2
 800d316:	f84a 0b04 	str.w	r0, [sl], #4
 800d31a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d31e:	459c      	cmp	ip, r3
 800d320:	fa22 f20e 	lsr.w	r2, r2, lr
 800d324:	d8f3      	bhi.n	800d30e <__lshift+0x6e>
 800d326:	ebac 0304 	sub.w	r3, ip, r4
 800d32a:	3b15      	subs	r3, #21
 800d32c:	f023 0303 	bic.w	r3, r3, #3
 800d330:	3304      	adds	r3, #4
 800d332:	f104 0015 	add.w	r0, r4, #21
 800d336:	4584      	cmp	ip, r0
 800d338:	bf38      	it	cc
 800d33a:	2304      	movcc	r3, #4
 800d33c:	50ca      	str	r2, [r1, r3]
 800d33e:	b10a      	cbz	r2, 800d344 <__lshift+0xa4>
 800d340:	f108 0602 	add.w	r6, r8, #2
 800d344:	3e01      	subs	r6, #1
 800d346:	4638      	mov	r0, r7
 800d348:	612e      	str	r6, [r5, #16]
 800d34a:	4621      	mov	r1, r4
 800d34c:	f7ff fd90 	bl	800ce70 <_Bfree>
 800d350:	4628      	mov	r0, r5
 800d352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d356:	f842 0f04 	str.w	r0, [r2, #4]!
 800d35a:	3301      	adds	r3, #1
 800d35c:	e7c5      	b.n	800d2ea <__lshift+0x4a>
 800d35e:	3904      	subs	r1, #4
 800d360:	f853 2b04 	ldr.w	r2, [r3], #4
 800d364:	f841 2f04 	str.w	r2, [r1, #4]!
 800d368:	459c      	cmp	ip, r3
 800d36a:	d8f9      	bhi.n	800d360 <__lshift+0xc0>
 800d36c:	e7ea      	b.n	800d344 <__lshift+0xa4>
 800d36e:	bf00      	nop
 800d370:	080105d4 	.word	0x080105d4
 800d374:	08010645 	.word	0x08010645

0800d378 <__mcmp>:
 800d378:	690a      	ldr	r2, [r1, #16]
 800d37a:	4603      	mov	r3, r0
 800d37c:	6900      	ldr	r0, [r0, #16]
 800d37e:	1a80      	subs	r0, r0, r2
 800d380:	b530      	push	{r4, r5, lr}
 800d382:	d10e      	bne.n	800d3a2 <__mcmp+0x2a>
 800d384:	3314      	adds	r3, #20
 800d386:	3114      	adds	r1, #20
 800d388:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d38c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d390:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d394:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d398:	4295      	cmp	r5, r2
 800d39a:	d003      	beq.n	800d3a4 <__mcmp+0x2c>
 800d39c:	d205      	bcs.n	800d3aa <__mcmp+0x32>
 800d39e:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a2:	bd30      	pop	{r4, r5, pc}
 800d3a4:	42a3      	cmp	r3, r4
 800d3a6:	d3f3      	bcc.n	800d390 <__mcmp+0x18>
 800d3a8:	e7fb      	b.n	800d3a2 <__mcmp+0x2a>
 800d3aa:	2001      	movs	r0, #1
 800d3ac:	e7f9      	b.n	800d3a2 <__mcmp+0x2a>
	...

0800d3b0 <__mdiff>:
 800d3b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b4:	4689      	mov	r9, r1
 800d3b6:	4606      	mov	r6, r0
 800d3b8:	4611      	mov	r1, r2
 800d3ba:	4648      	mov	r0, r9
 800d3bc:	4614      	mov	r4, r2
 800d3be:	f7ff ffdb 	bl	800d378 <__mcmp>
 800d3c2:	1e05      	subs	r5, r0, #0
 800d3c4:	d112      	bne.n	800d3ec <__mdiff+0x3c>
 800d3c6:	4629      	mov	r1, r5
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	f7ff fd11 	bl	800cdf0 <_Balloc>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	b928      	cbnz	r0, 800d3de <__mdiff+0x2e>
 800d3d2:	4b3f      	ldr	r3, [pc, #252]	@ (800d4d0 <__mdiff+0x120>)
 800d3d4:	f240 2137 	movw	r1, #567	@ 0x237
 800d3d8:	483e      	ldr	r0, [pc, #248]	@ (800d4d4 <__mdiff+0x124>)
 800d3da:	f7fe fa53 	bl	800b884 <__assert_func>
 800d3de:	2301      	movs	r3, #1
 800d3e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	b003      	add	sp, #12
 800d3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ec:	bfbc      	itt	lt
 800d3ee:	464b      	movlt	r3, r9
 800d3f0:	46a1      	movlt	r9, r4
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d3f8:	bfba      	itte	lt
 800d3fa:	461c      	movlt	r4, r3
 800d3fc:	2501      	movlt	r5, #1
 800d3fe:	2500      	movge	r5, #0
 800d400:	f7ff fcf6 	bl	800cdf0 <_Balloc>
 800d404:	4602      	mov	r2, r0
 800d406:	b918      	cbnz	r0, 800d410 <__mdiff+0x60>
 800d408:	4b31      	ldr	r3, [pc, #196]	@ (800d4d0 <__mdiff+0x120>)
 800d40a:	f240 2145 	movw	r1, #581	@ 0x245
 800d40e:	e7e3      	b.n	800d3d8 <__mdiff+0x28>
 800d410:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d414:	6926      	ldr	r6, [r4, #16]
 800d416:	60c5      	str	r5, [r0, #12]
 800d418:	f109 0310 	add.w	r3, r9, #16
 800d41c:	f109 0514 	add.w	r5, r9, #20
 800d420:	f104 0e14 	add.w	lr, r4, #20
 800d424:	f100 0b14 	add.w	fp, r0, #20
 800d428:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d42c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d430:	9301      	str	r3, [sp, #4]
 800d432:	46d9      	mov	r9, fp
 800d434:	f04f 0c00 	mov.w	ip, #0
 800d438:	9b01      	ldr	r3, [sp, #4]
 800d43a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d43e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d442:	9301      	str	r3, [sp, #4]
 800d444:	fa1f f38a 	uxth.w	r3, sl
 800d448:	4619      	mov	r1, r3
 800d44a:	b283      	uxth	r3, r0
 800d44c:	1acb      	subs	r3, r1, r3
 800d44e:	0c00      	lsrs	r0, r0, #16
 800d450:	4463      	add	r3, ip
 800d452:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d456:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d460:	4576      	cmp	r6, lr
 800d462:	f849 3b04 	str.w	r3, [r9], #4
 800d466:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d46a:	d8e5      	bhi.n	800d438 <__mdiff+0x88>
 800d46c:	1b33      	subs	r3, r6, r4
 800d46e:	3b15      	subs	r3, #21
 800d470:	f023 0303 	bic.w	r3, r3, #3
 800d474:	3415      	adds	r4, #21
 800d476:	3304      	adds	r3, #4
 800d478:	42a6      	cmp	r6, r4
 800d47a:	bf38      	it	cc
 800d47c:	2304      	movcc	r3, #4
 800d47e:	441d      	add	r5, r3
 800d480:	445b      	add	r3, fp
 800d482:	461e      	mov	r6, r3
 800d484:	462c      	mov	r4, r5
 800d486:	4544      	cmp	r4, r8
 800d488:	d30e      	bcc.n	800d4a8 <__mdiff+0xf8>
 800d48a:	f108 0103 	add.w	r1, r8, #3
 800d48e:	1b49      	subs	r1, r1, r5
 800d490:	f021 0103 	bic.w	r1, r1, #3
 800d494:	3d03      	subs	r5, #3
 800d496:	45a8      	cmp	r8, r5
 800d498:	bf38      	it	cc
 800d49a:	2100      	movcc	r1, #0
 800d49c:	440b      	add	r3, r1
 800d49e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4a2:	b191      	cbz	r1, 800d4ca <__mdiff+0x11a>
 800d4a4:	6117      	str	r7, [r2, #16]
 800d4a6:	e79d      	b.n	800d3e4 <__mdiff+0x34>
 800d4a8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d4ac:	46e6      	mov	lr, ip
 800d4ae:	0c08      	lsrs	r0, r1, #16
 800d4b0:	fa1c fc81 	uxtah	ip, ip, r1
 800d4b4:	4471      	add	r1, lr
 800d4b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d4ba:	b289      	uxth	r1, r1
 800d4bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d4c0:	f846 1b04 	str.w	r1, [r6], #4
 800d4c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4c8:	e7dd      	b.n	800d486 <__mdiff+0xd6>
 800d4ca:	3f01      	subs	r7, #1
 800d4cc:	e7e7      	b.n	800d49e <__mdiff+0xee>
 800d4ce:	bf00      	nop
 800d4d0:	080105d4 	.word	0x080105d4
 800d4d4:	08010645 	.word	0x08010645

0800d4d8 <__ulp>:
 800d4d8:	b082      	sub	sp, #8
 800d4da:	ed8d 0b00 	vstr	d0, [sp]
 800d4de:	9a01      	ldr	r2, [sp, #4]
 800d4e0:	4b0f      	ldr	r3, [pc, #60]	@ (800d520 <__ulp+0x48>)
 800d4e2:	4013      	ands	r3, r2
 800d4e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	dc08      	bgt.n	800d4fe <__ulp+0x26>
 800d4ec:	425b      	negs	r3, r3
 800d4ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d4f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d4f6:	da04      	bge.n	800d502 <__ulp+0x2a>
 800d4f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d4fc:	4113      	asrs	r3, r2
 800d4fe:	2200      	movs	r2, #0
 800d500:	e008      	b.n	800d514 <__ulp+0x3c>
 800d502:	f1a2 0314 	sub.w	r3, r2, #20
 800d506:	2b1e      	cmp	r3, #30
 800d508:	bfda      	itte	le
 800d50a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d50e:	40da      	lsrle	r2, r3
 800d510:	2201      	movgt	r2, #1
 800d512:	2300      	movs	r3, #0
 800d514:	4619      	mov	r1, r3
 800d516:	4610      	mov	r0, r2
 800d518:	ec41 0b10 	vmov	d0, r0, r1
 800d51c:	b002      	add	sp, #8
 800d51e:	4770      	bx	lr
 800d520:	7ff00000 	.word	0x7ff00000

0800d524 <__b2d>:
 800d524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d528:	6906      	ldr	r6, [r0, #16]
 800d52a:	f100 0814 	add.w	r8, r0, #20
 800d52e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d532:	1f37      	subs	r7, r6, #4
 800d534:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d538:	4610      	mov	r0, r2
 800d53a:	f7ff fd4b 	bl	800cfd4 <__hi0bits>
 800d53e:	f1c0 0320 	rsb	r3, r0, #32
 800d542:	280a      	cmp	r0, #10
 800d544:	600b      	str	r3, [r1, #0]
 800d546:	491b      	ldr	r1, [pc, #108]	@ (800d5b4 <__b2d+0x90>)
 800d548:	dc15      	bgt.n	800d576 <__b2d+0x52>
 800d54a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d54e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d552:	45b8      	cmp	r8, r7
 800d554:	ea43 0501 	orr.w	r5, r3, r1
 800d558:	bf34      	ite	cc
 800d55a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d55e:	2300      	movcs	r3, #0
 800d560:	3015      	adds	r0, #21
 800d562:	fa02 f000 	lsl.w	r0, r2, r0
 800d566:	fa23 f30c 	lsr.w	r3, r3, ip
 800d56a:	4303      	orrs	r3, r0
 800d56c:	461c      	mov	r4, r3
 800d56e:	ec45 4b10 	vmov	d0, r4, r5
 800d572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d576:	45b8      	cmp	r8, r7
 800d578:	bf3a      	itte	cc
 800d57a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d57e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d582:	2300      	movcs	r3, #0
 800d584:	380b      	subs	r0, #11
 800d586:	d012      	beq.n	800d5ae <__b2d+0x8a>
 800d588:	f1c0 0120 	rsb	r1, r0, #32
 800d58c:	fa23 f401 	lsr.w	r4, r3, r1
 800d590:	4082      	lsls	r2, r0
 800d592:	4322      	orrs	r2, r4
 800d594:	4547      	cmp	r7, r8
 800d596:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d59a:	bf8c      	ite	hi
 800d59c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d5a0:	2200      	movls	r2, #0
 800d5a2:	4083      	lsls	r3, r0
 800d5a4:	40ca      	lsrs	r2, r1
 800d5a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	e7de      	b.n	800d56c <__b2d+0x48>
 800d5ae:	ea42 0501 	orr.w	r5, r2, r1
 800d5b2:	e7db      	b.n	800d56c <__b2d+0x48>
 800d5b4:	3ff00000 	.word	0x3ff00000

0800d5b8 <__d2b>:
 800d5b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d5bc:	460f      	mov	r7, r1
 800d5be:	2101      	movs	r1, #1
 800d5c0:	ec59 8b10 	vmov	r8, r9, d0
 800d5c4:	4616      	mov	r6, r2
 800d5c6:	f7ff fc13 	bl	800cdf0 <_Balloc>
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	b930      	cbnz	r0, 800d5dc <__d2b+0x24>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	4b23      	ldr	r3, [pc, #140]	@ (800d660 <__d2b+0xa8>)
 800d5d2:	4824      	ldr	r0, [pc, #144]	@ (800d664 <__d2b+0xac>)
 800d5d4:	f240 310f 	movw	r1, #783	@ 0x30f
 800d5d8:	f7fe f954 	bl	800b884 <__assert_func>
 800d5dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d5e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d5e4:	b10d      	cbz	r5, 800d5ea <__d2b+0x32>
 800d5e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d5ea:	9301      	str	r3, [sp, #4]
 800d5ec:	f1b8 0300 	subs.w	r3, r8, #0
 800d5f0:	d023      	beq.n	800d63a <__d2b+0x82>
 800d5f2:	4668      	mov	r0, sp
 800d5f4:	9300      	str	r3, [sp, #0]
 800d5f6:	f7ff fd0c 	bl	800d012 <__lo0bits>
 800d5fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d5fe:	b1d0      	cbz	r0, 800d636 <__d2b+0x7e>
 800d600:	f1c0 0320 	rsb	r3, r0, #32
 800d604:	fa02 f303 	lsl.w	r3, r2, r3
 800d608:	430b      	orrs	r3, r1
 800d60a:	40c2      	lsrs	r2, r0
 800d60c:	6163      	str	r3, [r4, #20]
 800d60e:	9201      	str	r2, [sp, #4]
 800d610:	9b01      	ldr	r3, [sp, #4]
 800d612:	61a3      	str	r3, [r4, #24]
 800d614:	2b00      	cmp	r3, #0
 800d616:	bf0c      	ite	eq
 800d618:	2201      	moveq	r2, #1
 800d61a:	2202      	movne	r2, #2
 800d61c:	6122      	str	r2, [r4, #16]
 800d61e:	b1a5      	cbz	r5, 800d64a <__d2b+0x92>
 800d620:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d624:	4405      	add	r5, r0
 800d626:	603d      	str	r5, [r7, #0]
 800d628:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d62c:	6030      	str	r0, [r6, #0]
 800d62e:	4620      	mov	r0, r4
 800d630:	b003      	add	sp, #12
 800d632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d636:	6161      	str	r1, [r4, #20]
 800d638:	e7ea      	b.n	800d610 <__d2b+0x58>
 800d63a:	a801      	add	r0, sp, #4
 800d63c:	f7ff fce9 	bl	800d012 <__lo0bits>
 800d640:	9b01      	ldr	r3, [sp, #4]
 800d642:	6163      	str	r3, [r4, #20]
 800d644:	3020      	adds	r0, #32
 800d646:	2201      	movs	r2, #1
 800d648:	e7e8      	b.n	800d61c <__d2b+0x64>
 800d64a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d64e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d652:	6038      	str	r0, [r7, #0]
 800d654:	6918      	ldr	r0, [r3, #16]
 800d656:	f7ff fcbd 	bl	800cfd4 <__hi0bits>
 800d65a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d65e:	e7e5      	b.n	800d62c <__d2b+0x74>
 800d660:	080105d4 	.word	0x080105d4
 800d664:	08010645 	.word	0x08010645

0800d668 <__ratio>:
 800d668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d66c:	b085      	sub	sp, #20
 800d66e:	e9cd 1000 	strd	r1, r0, [sp]
 800d672:	a902      	add	r1, sp, #8
 800d674:	f7ff ff56 	bl	800d524 <__b2d>
 800d678:	9800      	ldr	r0, [sp, #0]
 800d67a:	a903      	add	r1, sp, #12
 800d67c:	ec55 4b10 	vmov	r4, r5, d0
 800d680:	f7ff ff50 	bl	800d524 <__b2d>
 800d684:	9b01      	ldr	r3, [sp, #4]
 800d686:	6919      	ldr	r1, [r3, #16]
 800d688:	9b00      	ldr	r3, [sp, #0]
 800d68a:	691b      	ldr	r3, [r3, #16]
 800d68c:	1ac9      	subs	r1, r1, r3
 800d68e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d692:	1a9b      	subs	r3, r3, r2
 800d694:	ec5b ab10 	vmov	sl, fp, d0
 800d698:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	bfce      	itee	gt
 800d6a0:	462a      	movgt	r2, r5
 800d6a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d6a6:	465a      	movle	r2, fp
 800d6a8:	462f      	mov	r7, r5
 800d6aa:	46d9      	mov	r9, fp
 800d6ac:	bfcc      	ite	gt
 800d6ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d6b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d6b6:	464b      	mov	r3, r9
 800d6b8:	4652      	mov	r2, sl
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	4639      	mov	r1, r7
 800d6be:	f7f3 f8c5 	bl	800084c <__aeabi_ddiv>
 800d6c2:	ec41 0b10 	vmov	d0, r0, r1
 800d6c6:	b005      	add	sp, #20
 800d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6cc <__copybits>:
 800d6cc:	3901      	subs	r1, #1
 800d6ce:	b570      	push	{r4, r5, r6, lr}
 800d6d0:	1149      	asrs	r1, r1, #5
 800d6d2:	6914      	ldr	r4, [r2, #16]
 800d6d4:	3101      	adds	r1, #1
 800d6d6:	f102 0314 	add.w	r3, r2, #20
 800d6da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d6de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d6e2:	1f05      	subs	r5, r0, #4
 800d6e4:	42a3      	cmp	r3, r4
 800d6e6:	d30c      	bcc.n	800d702 <__copybits+0x36>
 800d6e8:	1aa3      	subs	r3, r4, r2
 800d6ea:	3b11      	subs	r3, #17
 800d6ec:	f023 0303 	bic.w	r3, r3, #3
 800d6f0:	3211      	adds	r2, #17
 800d6f2:	42a2      	cmp	r2, r4
 800d6f4:	bf88      	it	hi
 800d6f6:	2300      	movhi	r3, #0
 800d6f8:	4418      	add	r0, r3
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	4288      	cmp	r0, r1
 800d6fe:	d305      	bcc.n	800d70c <__copybits+0x40>
 800d700:	bd70      	pop	{r4, r5, r6, pc}
 800d702:	f853 6b04 	ldr.w	r6, [r3], #4
 800d706:	f845 6f04 	str.w	r6, [r5, #4]!
 800d70a:	e7eb      	b.n	800d6e4 <__copybits+0x18>
 800d70c:	f840 3b04 	str.w	r3, [r0], #4
 800d710:	e7f4      	b.n	800d6fc <__copybits+0x30>

0800d712 <__any_on>:
 800d712:	f100 0214 	add.w	r2, r0, #20
 800d716:	6900      	ldr	r0, [r0, #16]
 800d718:	114b      	asrs	r3, r1, #5
 800d71a:	4298      	cmp	r0, r3
 800d71c:	b510      	push	{r4, lr}
 800d71e:	db11      	blt.n	800d744 <__any_on+0x32>
 800d720:	dd0a      	ble.n	800d738 <__any_on+0x26>
 800d722:	f011 011f 	ands.w	r1, r1, #31
 800d726:	d007      	beq.n	800d738 <__any_on+0x26>
 800d728:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d72c:	fa24 f001 	lsr.w	r0, r4, r1
 800d730:	fa00 f101 	lsl.w	r1, r0, r1
 800d734:	428c      	cmp	r4, r1
 800d736:	d10b      	bne.n	800d750 <__any_on+0x3e>
 800d738:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d803      	bhi.n	800d748 <__any_on+0x36>
 800d740:	2000      	movs	r0, #0
 800d742:	bd10      	pop	{r4, pc}
 800d744:	4603      	mov	r3, r0
 800d746:	e7f7      	b.n	800d738 <__any_on+0x26>
 800d748:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d74c:	2900      	cmp	r1, #0
 800d74e:	d0f5      	beq.n	800d73c <__any_on+0x2a>
 800d750:	2001      	movs	r0, #1
 800d752:	e7f6      	b.n	800d742 <__any_on+0x30>

0800d754 <__ascii_wctomb>:
 800d754:	4603      	mov	r3, r0
 800d756:	4608      	mov	r0, r1
 800d758:	b141      	cbz	r1, 800d76c <__ascii_wctomb+0x18>
 800d75a:	2aff      	cmp	r2, #255	@ 0xff
 800d75c:	d904      	bls.n	800d768 <__ascii_wctomb+0x14>
 800d75e:	228a      	movs	r2, #138	@ 0x8a
 800d760:	601a      	str	r2, [r3, #0]
 800d762:	f04f 30ff 	mov.w	r0, #4294967295
 800d766:	4770      	bx	lr
 800d768:	700a      	strb	r2, [r1, #0]
 800d76a:	2001      	movs	r0, #1
 800d76c:	4770      	bx	lr

0800d76e <__ssputs_r>:
 800d76e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d772:	688e      	ldr	r6, [r1, #8]
 800d774:	461f      	mov	r7, r3
 800d776:	42be      	cmp	r6, r7
 800d778:	680b      	ldr	r3, [r1, #0]
 800d77a:	4682      	mov	sl, r0
 800d77c:	460c      	mov	r4, r1
 800d77e:	4690      	mov	r8, r2
 800d780:	d82d      	bhi.n	800d7de <__ssputs_r+0x70>
 800d782:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d786:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d78a:	d026      	beq.n	800d7da <__ssputs_r+0x6c>
 800d78c:	6965      	ldr	r5, [r4, #20]
 800d78e:	6909      	ldr	r1, [r1, #16]
 800d790:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d794:	eba3 0901 	sub.w	r9, r3, r1
 800d798:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d79c:	1c7b      	adds	r3, r7, #1
 800d79e:	444b      	add	r3, r9
 800d7a0:	106d      	asrs	r5, r5, #1
 800d7a2:	429d      	cmp	r5, r3
 800d7a4:	bf38      	it	cc
 800d7a6:	461d      	movcc	r5, r3
 800d7a8:	0553      	lsls	r3, r2, #21
 800d7aa:	d527      	bpl.n	800d7fc <__ssputs_r+0x8e>
 800d7ac:	4629      	mov	r1, r5
 800d7ae:	f7ff fa81 	bl	800ccb4 <_malloc_r>
 800d7b2:	4606      	mov	r6, r0
 800d7b4:	b360      	cbz	r0, 800d810 <__ssputs_r+0xa2>
 800d7b6:	6921      	ldr	r1, [r4, #16]
 800d7b8:	464a      	mov	r2, r9
 800d7ba:	f7fe f844 	bl	800b846 <memcpy>
 800d7be:	89a3      	ldrh	r3, [r4, #12]
 800d7c0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d7c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7c8:	81a3      	strh	r3, [r4, #12]
 800d7ca:	6126      	str	r6, [r4, #16]
 800d7cc:	6165      	str	r5, [r4, #20]
 800d7ce:	444e      	add	r6, r9
 800d7d0:	eba5 0509 	sub.w	r5, r5, r9
 800d7d4:	6026      	str	r6, [r4, #0]
 800d7d6:	60a5      	str	r5, [r4, #8]
 800d7d8:	463e      	mov	r6, r7
 800d7da:	42be      	cmp	r6, r7
 800d7dc:	d900      	bls.n	800d7e0 <__ssputs_r+0x72>
 800d7de:	463e      	mov	r6, r7
 800d7e0:	6820      	ldr	r0, [r4, #0]
 800d7e2:	4632      	mov	r2, r6
 800d7e4:	4641      	mov	r1, r8
 800d7e6:	f000 f9d7 	bl	800db98 <memmove>
 800d7ea:	68a3      	ldr	r3, [r4, #8]
 800d7ec:	1b9b      	subs	r3, r3, r6
 800d7ee:	60a3      	str	r3, [r4, #8]
 800d7f0:	6823      	ldr	r3, [r4, #0]
 800d7f2:	4433      	add	r3, r6
 800d7f4:	6023      	str	r3, [r4, #0]
 800d7f6:	2000      	movs	r0, #0
 800d7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7fc:	462a      	mov	r2, r5
 800d7fe:	f000 fa10 	bl	800dc22 <_realloc_r>
 800d802:	4606      	mov	r6, r0
 800d804:	2800      	cmp	r0, #0
 800d806:	d1e0      	bne.n	800d7ca <__ssputs_r+0x5c>
 800d808:	6921      	ldr	r1, [r4, #16]
 800d80a:	4650      	mov	r0, sl
 800d80c:	f7fe fea4 	bl	800c558 <_free_r>
 800d810:	230c      	movs	r3, #12
 800d812:	f8ca 3000 	str.w	r3, [sl]
 800d816:	89a3      	ldrh	r3, [r4, #12]
 800d818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d81c:	81a3      	strh	r3, [r4, #12]
 800d81e:	f04f 30ff 	mov.w	r0, #4294967295
 800d822:	e7e9      	b.n	800d7f8 <__ssputs_r+0x8a>

0800d824 <_svfiprintf_r>:
 800d824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d828:	4698      	mov	r8, r3
 800d82a:	898b      	ldrh	r3, [r1, #12]
 800d82c:	061b      	lsls	r3, r3, #24
 800d82e:	b09d      	sub	sp, #116	@ 0x74
 800d830:	4607      	mov	r7, r0
 800d832:	460d      	mov	r5, r1
 800d834:	4614      	mov	r4, r2
 800d836:	d510      	bpl.n	800d85a <_svfiprintf_r+0x36>
 800d838:	690b      	ldr	r3, [r1, #16]
 800d83a:	b973      	cbnz	r3, 800d85a <_svfiprintf_r+0x36>
 800d83c:	2140      	movs	r1, #64	@ 0x40
 800d83e:	f7ff fa39 	bl	800ccb4 <_malloc_r>
 800d842:	6028      	str	r0, [r5, #0]
 800d844:	6128      	str	r0, [r5, #16]
 800d846:	b930      	cbnz	r0, 800d856 <_svfiprintf_r+0x32>
 800d848:	230c      	movs	r3, #12
 800d84a:	603b      	str	r3, [r7, #0]
 800d84c:	f04f 30ff 	mov.w	r0, #4294967295
 800d850:	b01d      	add	sp, #116	@ 0x74
 800d852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d856:	2340      	movs	r3, #64	@ 0x40
 800d858:	616b      	str	r3, [r5, #20]
 800d85a:	2300      	movs	r3, #0
 800d85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d85e:	2320      	movs	r3, #32
 800d860:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d864:	f8cd 800c 	str.w	r8, [sp, #12]
 800d868:	2330      	movs	r3, #48	@ 0x30
 800d86a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800da08 <_svfiprintf_r+0x1e4>
 800d86e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d872:	f04f 0901 	mov.w	r9, #1
 800d876:	4623      	mov	r3, r4
 800d878:	469a      	mov	sl, r3
 800d87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d87e:	b10a      	cbz	r2, 800d884 <_svfiprintf_r+0x60>
 800d880:	2a25      	cmp	r2, #37	@ 0x25
 800d882:	d1f9      	bne.n	800d878 <_svfiprintf_r+0x54>
 800d884:	ebba 0b04 	subs.w	fp, sl, r4
 800d888:	d00b      	beq.n	800d8a2 <_svfiprintf_r+0x7e>
 800d88a:	465b      	mov	r3, fp
 800d88c:	4622      	mov	r2, r4
 800d88e:	4629      	mov	r1, r5
 800d890:	4638      	mov	r0, r7
 800d892:	f7ff ff6c 	bl	800d76e <__ssputs_r>
 800d896:	3001      	adds	r0, #1
 800d898:	f000 80a7 	beq.w	800d9ea <_svfiprintf_r+0x1c6>
 800d89c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d89e:	445a      	add	r2, fp
 800d8a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f000 809f 	beq.w	800d9ea <_svfiprintf_r+0x1c6>
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d8b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8b6:	f10a 0a01 	add.w	sl, sl, #1
 800d8ba:	9304      	str	r3, [sp, #16]
 800d8bc:	9307      	str	r3, [sp, #28]
 800d8be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d8c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d8c4:	4654      	mov	r4, sl
 800d8c6:	2205      	movs	r2, #5
 800d8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8cc:	484e      	ldr	r0, [pc, #312]	@ (800da08 <_svfiprintf_r+0x1e4>)
 800d8ce:	f7f2 fc7f 	bl	80001d0 <memchr>
 800d8d2:	9a04      	ldr	r2, [sp, #16]
 800d8d4:	b9d8      	cbnz	r0, 800d90e <_svfiprintf_r+0xea>
 800d8d6:	06d0      	lsls	r0, r2, #27
 800d8d8:	bf44      	itt	mi
 800d8da:	2320      	movmi	r3, #32
 800d8dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8e0:	0711      	lsls	r1, r2, #28
 800d8e2:	bf44      	itt	mi
 800d8e4:	232b      	movmi	r3, #43	@ 0x2b
 800d8e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d8ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8f0:	d015      	beq.n	800d91e <_svfiprintf_r+0xfa>
 800d8f2:	9a07      	ldr	r2, [sp, #28]
 800d8f4:	4654      	mov	r4, sl
 800d8f6:	2000      	movs	r0, #0
 800d8f8:	f04f 0c0a 	mov.w	ip, #10
 800d8fc:	4621      	mov	r1, r4
 800d8fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d902:	3b30      	subs	r3, #48	@ 0x30
 800d904:	2b09      	cmp	r3, #9
 800d906:	d94b      	bls.n	800d9a0 <_svfiprintf_r+0x17c>
 800d908:	b1b0      	cbz	r0, 800d938 <_svfiprintf_r+0x114>
 800d90a:	9207      	str	r2, [sp, #28]
 800d90c:	e014      	b.n	800d938 <_svfiprintf_r+0x114>
 800d90e:	eba0 0308 	sub.w	r3, r0, r8
 800d912:	fa09 f303 	lsl.w	r3, r9, r3
 800d916:	4313      	orrs	r3, r2
 800d918:	9304      	str	r3, [sp, #16]
 800d91a:	46a2      	mov	sl, r4
 800d91c:	e7d2      	b.n	800d8c4 <_svfiprintf_r+0xa0>
 800d91e:	9b03      	ldr	r3, [sp, #12]
 800d920:	1d19      	adds	r1, r3, #4
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	9103      	str	r1, [sp, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	bfbb      	ittet	lt
 800d92a:	425b      	neglt	r3, r3
 800d92c:	f042 0202 	orrlt.w	r2, r2, #2
 800d930:	9307      	strge	r3, [sp, #28]
 800d932:	9307      	strlt	r3, [sp, #28]
 800d934:	bfb8      	it	lt
 800d936:	9204      	strlt	r2, [sp, #16]
 800d938:	7823      	ldrb	r3, [r4, #0]
 800d93a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d93c:	d10a      	bne.n	800d954 <_svfiprintf_r+0x130>
 800d93e:	7863      	ldrb	r3, [r4, #1]
 800d940:	2b2a      	cmp	r3, #42	@ 0x2a
 800d942:	d132      	bne.n	800d9aa <_svfiprintf_r+0x186>
 800d944:	9b03      	ldr	r3, [sp, #12]
 800d946:	1d1a      	adds	r2, r3, #4
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	9203      	str	r2, [sp, #12]
 800d94c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d950:	3402      	adds	r4, #2
 800d952:	9305      	str	r3, [sp, #20]
 800d954:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800da18 <_svfiprintf_r+0x1f4>
 800d958:	7821      	ldrb	r1, [r4, #0]
 800d95a:	2203      	movs	r2, #3
 800d95c:	4650      	mov	r0, sl
 800d95e:	f7f2 fc37 	bl	80001d0 <memchr>
 800d962:	b138      	cbz	r0, 800d974 <_svfiprintf_r+0x150>
 800d964:	9b04      	ldr	r3, [sp, #16]
 800d966:	eba0 000a 	sub.w	r0, r0, sl
 800d96a:	2240      	movs	r2, #64	@ 0x40
 800d96c:	4082      	lsls	r2, r0
 800d96e:	4313      	orrs	r3, r2
 800d970:	3401      	adds	r4, #1
 800d972:	9304      	str	r3, [sp, #16]
 800d974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d978:	4824      	ldr	r0, [pc, #144]	@ (800da0c <_svfiprintf_r+0x1e8>)
 800d97a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d97e:	2206      	movs	r2, #6
 800d980:	f7f2 fc26 	bl	80001d0 <memchr>
 800d984:	2800      	cmp	r0, #0
 800d986:	d036      	beq.n	800d9f6 <_svfiprintf_r+0x1d2>
 800d988:	4b21      	ldr	r3, [pc, #132]	@ (800da10 <_svfiprintf_r+0x1ec>)
 800d98a:	bb1b      	cbnz	r3, 800d9d4 <_svfiprintf_r+0x1b0>
 800d98c:	9b03      	ldr	r3, [sp, #12]
 800d98e:	3307      	adds	r3, #7
 800d990:	f023 0307 	bic.w	r3, r3, #7
 800d994:	3308      	adds	r3, #8
 800d996:	9303      	str	r3, [sp, #12]
 800d998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d99a:	4433      	add	r3, r6
 800d99c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d99e:	e76a      	b.n	800d876 <_svfiprintf_r+0x52>
 800d9a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9a4:	460c      	mov	r4, r1
 800d9a6:	2001      	movs	r0, #1
 800d9a8:	e7a8      	b.n	800d8fc <_svfiprintf_r+0xd8>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	3401      	adds	r4, #1
 800d9ae:	9305      	str	r3, [sp, #20]
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	f04f 0c0a 	mov.w	ip, #10
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9bc:	3a30      	subs	r2, #48	@ 0x30
 800d9be:	2a09      	cmp	r2, #9
 800d9c0:	d903      	bls.n	800d9ca <_svfiprintf_r+0x1a6>
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d0c6      	beq.n	800d954 <_svfiprintf_r+0x130>
 800d9c6:	9105      	str	r1, [sp, #20]
 800d9c8:	e7c4      	b.n	800d954 <_svfiprintf_r+0x130>
 800d9ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	e7f0      	b.n	800d9b6 <_svfiprintf_r+0x192>
 800d9d4:	ab03      	add	r3, sp, #12
 800d9d6:	9300      	str	r3, [sp, #0]
 800d9d8:	462a      	mov	r2, r5
 800d9da:	4b0e      	ldr	r3, [pc, #56]	@ (800da14 <_svfiprintf_r+0x1f0>)
 800d9dc:	a904      	add	r1, sp, #16
 800d9de:	4638      	mov	r0, r7
 800d9e0:	f7fc ff52 	bl	800a888 <_printf_float>
 800d9e4:	1c42      	adds	r2, r0, #1
 800d9e6:	4606      	mov	r6, r0
 800d9e8:	d1d6      	bne.n	800d998 <_svfiprintf_r+0x174>
 800d9ea:	89ab      	ldrh	r3, [r5, #12]
 800d9ec:	065b      	lsls	r3, r3, #25
 800d9ee:	f53f af2d 	bmi.w	800d84c <_svfiprintf_r+0x28>
 800d9f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9f4:	e72c      	b.n	800d850 <_svfiprintf_r+0x2c>
 800d9f6:	ab03      	add	r3, sp, #12
 800d9f8:	9300      	str	r3, [sp, #0]
 800d9fa:	462a      	mov	r2, r5
 800d9fc:	4b05      	ldr	r3, [pc, #20]	@ (800da14 <_svfiprintf_r+0x1f0>)
 800d9fe:	a904      	add	r1, sp, #16
 800da00:	4638      	mov	r0, r7
 800da02:	f7fd f9d9 	bl	800adb8 <_printf_i>
 800da06:	e7ed      	b.n	800d9e4 <_svfiprintf_r+0x1c0>
 800da08:	080107a0 	.word	0x080107a0
 800da0c:	080107aa 	.word	0x080107aa
 800da10:	0800a889 	.word	0x0800a889
 800da14:	0800d76f 	.word	0x0800d76f
 800da18:	080107a6 	.word	0x080107a6

0800da1c <__sflush_r>:
 800da1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da24:	0716      	lsls	r6, r2, #28
 800da26:	4605      	mov	r5, r0
 800da28:	460c      	mov	r4, r1
 800da2a:	d454      	bmi.n	800dad6 <__sflush_r+0xba>
 800da2c:	684b      	ldr	r3, [r1, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	dc02      	bgt.n	800da38 <__sflush_r+0x1c>
 800da32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800da34:	2b00      	cmp	r3, #0
 800da36:	dd48      	ble.n	800daca <__sflush_r+0xae>
 800da38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da3a:	2e00      	cmp	r6, #0
 800da3c:	d045      	beq.n	800daca <__sflush_r+0xae>
 800da3e:	2300      	movs	r3, #0
 800da40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800da44:	682f      	ldr	r7, [r5, #0]
 800da46:	6a21      	ldr	r1, [r4, #32]
 800da48:	602b      	str	r3, [r5, #0]
 800da4a:	d030      	beq.n	800daae <__sflush_r+0x92>
 800da4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800da4e:	89a3      	ldrh	r3, [r4, #12]
 800da50:	0759      	lsls	r1, r3, #29
 800da52:	d505      	bpl.n	800da60 <__sflush_r+0x44>
 800da54:	6863      	ldr	r3, [r4, #4]
 800da56:	1ad2      	subs	r2, r2, r3
 800da58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da5a:	b10b      	cbz	r3, 800da60 <__sflush_r+0x44>
 800da5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800da5e:	1ad2      	subs	r2, r2, r3
 800da60:	2300      	movs	r3, #0
 800da62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da64:	6a21      	ldr	r1, [r4, #32]
 800da66:	4628      	mov	r0, r5
 800da68:	47b0      	blx	r6
 800da6a:	1c43      	adds	r3, r0, #1
 800da6c:	89a3      	ldrh	r3, [r4, #12]
 800da6e:	d106      	bne.n	800da7e <__sflush_r+0x62>
 800da70:	6829      	ldr	r1, [r5, #0]
 800da72:	291d      	cmp	r1, #29
 800da74:	d82b      	bhi.n	800dace <__sflush_r+0xb2>
 800da76:	4a2a      	ldr	r2, [pc, #168]	@ (800db20 <__sflush_r+0x104>)
 800da78:	410a      	asrs	r2, r1
 800da7a:	07d6      	lsls	r6, r2, #31
 800da7c:	d427      	bmi.n	800dace <__sflush_r+0xb2>
 800da7e:	2200      	movs	r2, #0
 800da80:	6062      	str	r2, [r4, #4]
 800da82:	04d9      	lsls	r1, r3, #19
 800da84:	6922      	ldr	r2, [r4, #16]
 800da86:	6022      	str	r2, [r4, #0]
 800da88:	d504      	bpl.n	800da94 <__sflush_r+0x78>
 800da8a:	1c42      	adds	r2, r0, #1
 800da8c:	d101      	bne.n	800da92 <__sflush_r+0x76>
 800da8e:	682b      	ldr	r3, [r5, #0]
 800da90:	b903      	cbnz	r3, 800da94 <__sflush_r+0x78>
 800da92:	6560      	str	r0, [r4, #84]	@ 0x54
 800da94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da96:	602f      	str	r7, [r5, #0]
 800da98:	b1b9      	cbz	r1, 800daca <__sflush_r+0xae>
 800da9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da9e:	4299      	cmp	r1, r3
 800daa0:	d002      	beq.n	800daa8 <__sflush_r+0x8c>
 800daa2:	4628      	mov	r0, r5
 800daa4:	f7fe fd58 	bl	800c558 <_free_r>
 800daa8:	2300      	movs	r3, #0
 800daaa:	6363      	str	r3, [r4, #52]	@ 0x34
 800daac:	e00d      	b.n	800daca <__sflush_r+0xae>
 800daae:	2301      	movs	r3, #1
 800dab0:	4628      	mov	r0, r5
 800dab2:	47b0      	blx	r6
 800dab4:	4602      	mov	r2, r0
 800dab6:	1c50      	adds	r0, r2, #1
 800dab8:	d1c9      	bne.n	800da4e <__sflush_r+0x32>
 800daba:	682b      	ldr	r3, [r5, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d0c6      	beq.n	800da4e <__sflush_r+0x32>
 800dac0:	2b1d      	cmp	r3, #29
 800dac2:	d001      	beq.n	800dac8 <__sflush_r+0xac>
 800dac4:	2b16      	cmp	r3, #22
 800dac6:	d11e      	bne.n	800db06 <__sflush_r+0xea>
 800dac8:	602f      	str	r7, [r5, #0]
 800daca:	2000      	movs	r0, #0
 800dacc:	e022      	b.n	800db14 <__sflush_r+0xf8>
 800dace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dad2:	b21b      	sxth	r3, r3
 800dad4:	e01b      	b.n	800db0e <__sflush_r+0xf2>
 800dad6:	690f      	ldr	r7, [r1, #16]
 800dad8:	2f00      	cmp	r7, #0
 800dada:	d0f6      	beq.n	800daca <__sflush_r+0xae>
 800dadc:	0793      	lsls	r3, r2, #30
 800dade:	680e      	ldr	r6, [r1, #0]
 800dae0:	bf08      	it	eq
 800dae2:	694b      	ldreq	r3, [r1, #20]
 800dae4:	600f      	str	r7, [r1, #0]
 800dae6:	bf18      	it	ne
 800dae8:	2300      	movne	r3, #0
 800daea:	eba6 0807 	sub.w	r8, r6, r7
 800daee:	608b      	str	r3, [r1, #8]
 800daf0:	f1b8 0f00 	cmp.w	r8, #0
 800daf4:	dde9      	ble.n	800daca <__sflush_r+0xae>
 800daf6:	6a21      	ldr	r1, [r4, #32]
 800daf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dafa:	4643      	mov	r3, r8
 800dafc:	463a      	mov	r2, r7
 800dafe:	4628      	mov	r0, r5
 800db00:	47b0      	blx	r6
 800db02:	2800      	cmp	r0, #0
 800db04:	dc08      	bgt.n	800db18 <__sflush_r+0xfc>
 800db06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db0e:	81a3      	strh	r3, [r4, #12]
 800db10:	f04f 30ff 	mov.w	r0, #4294967295
 800db14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db18:	4407      	add	r7, r0
 800db1a:	eba8 0800 	sub.w	r8, r8, r0
 800db1e:	e7e7      	b.n	800daf0 <__sflush_r+0xd4>
 800db20:	dfbffffe 	.word	0xdfbffffe

0800db24 <_fflush_r>:
 800db24:	b538      	push	{r3, r4, r5, lr}
 800db26:	690b      	ldr	r3, [r1, #16]
 800db28:	4605      	mov	r5, r0
 800db2a:	460c      	mov	r4, r1
 800db2c:	b913      	cbnz	r3, 800db34 <_fflush_r+0x10>
 800db2e:	2500      	movs	r5, #0
 800db30:	4628      	mov	r0, r5
 800db32:	bd38      	pop	{r3, r4, r5, pc}
 800db34:	b118      	cbz	r0, 800db3e <_fflush_r+0x1a>
 800db36:	6a03      	ldr	r3, [r0, #32]
 800db38:	b90b      	cbnz	r3, 800db3e <_fflush_r+0x1a>
 800db3a:	f7fd fcfd 	bl	800b538 <__sinit>
 800db3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d0f3      	beq.n	800db2e <_fflush_r+0xa>
 800db46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db48:	07d0      	lsls	r0, r2, #31
 800db4a:	d404      	bmi.n	800db56 <_fflush_r+0x32>
 800db4c:	0599      	lsls	r1, r3, #22
 800db4e:	d402      	bmi.n	800db56 <_fflush_r+0x32>
 800db50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db52:	f7fd fe76 	bl	800b842 <__retarget_lock_acquire_recursive>
 800db56:	4628      	mov	r0, r5
 800db58:	4621      	mov	r1, r4
 800db5a:	f7ff ff5f 	bl	800da1c <__sflush_r>
 800db5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db60:	07da      	lsls	r2, r3, #31
 800db62:	4605      	mov	r5, r0
 800db64:	d4e4      	bmi.n	800db30 <_fflush_r+0xc>
 800db66:	89a3      	ldrh	r3, [r4, #12]
 800db68:	059b      	lsls	r3, r3, #22
 800db6a:	d4e1      	bmi.n	800db30 <_fflush_r+0xc>
 800db6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db6e:	f7fd fe69 	bl	800b844 <__retarget_lock_release_recursive>
 800db72:	e7dd      	b.n	800db30 <_fflush_r+0xc>

0800db74 <fiprintf>:
 800db74:	b40e      	push	{r1, r2, r3}
 800db76:	b503      	push	{r0, r1, lr}
 800db78:	4601      	mov	r1, r0
 800db7a:	ab03      	add	r3, sp, #12
 800db7c:	4805      	ldr	r0, [pc, #20]	@ (800db94 <fiprintf+0x20>)
 800db7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800db82:	6800      	ldr	r0, [r0, #0]
 800db84:	9301      	str	r3, [sp, #4]
 800db86:	f000 f8a3 	bl	800dcd0 <_vfiprintf_r>
 800db8a:	b002      	add	sp, #8
 800db8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800db90:	b003      	add	sp, #12
 800db92:	4770      	bx	lr
 800db94:	20000264 	.word	0x20000264

0800db98 <memmove>:
 800db98:	4288      	cmp	r0, r1
 800db9a:	b510      	push	{r4, lr}
 800db9c:	eb01 0402 	add.w	r4, r1, r2
 800dba0:	d902      	bls.n	800dba8 <memmove+0x10>
 800dba2:	4284      	cmp	r4, r0
 800dba4:	4623      	mov	r3, r4
 800dba6:	d807      	bhi.n	800dbb8 <memmove+0x20>
 800dba8:	1e43      	subs	r3, r0, #1
 800dbaa:	42a1      	cmp	r1, r4
 800dbac:	d008      	beq.n	800dbc0 <memmove+0x28>
 800dbae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbb6:	e7f8      	b.n	800dbaa <memmove+0x12>
 800dbb8:	4402      	add	r2, r0
 800dbba:	4601      	mov	r1, r0
 800dbbc:	428a      	cmp	r2, r1
 800dbbe:	d100      	bne.n	800dbc2 <memmove+0x2a>
 800dbc0:	bd10      	pop	{r4, pc}
 800dbc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbca:	e7f7      	b.n	800dbbc <memmove+0x24>

0800dbcc <_sbrk_r>:
 800dbcc:	b538      	push	{r3, r4, r5, lr}
 800dbce:	4d06      	ldr	r5, [pc, #24]	@ (800dbe8 <_sbrk_r+0x1c>)
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	4604      	mov	r4, r0
 800dbd4:	4608      	mov	r0, r1
 800dbd6:	602b      	str	r3, [r5, #0]
 800dbd8:	f7f8 f970 	bl	8005ebc <_sbrk>
 800dbdc:	1c43      	adds	r3, r0, #1
 800dbde:	d102      	bne.n	800dbe6 <_sbrk_r+0x1a>
 800dbe0:	682b      	ldr	r3, [r5, #0]
 800dbe2:	b103      	cbz	r3, 800dbe6 <_sbrk_r+0x1a>
 800dbe4:	6023      	str	r3, [r4, #0]
 800dbe6:	bd38      	pop	{r3, r4, r5, pc}
 800dbe8:	20000758 	.word	0x20000758

0800dbec <abort>:
 800dbec:	b508      	push	{r3, lr}
 800dbee:	2006      	movs	r0, #6
 800dbf0:	f000 fa42 	bl	800e078 <raise>
 800dbf4:	2001      	movs	r0, #1
 800dbf6:	f7f8 f8e9 	bl	8005dcc <_exit>

0800dbfa <_calloc_r>:
 800dbfa:	b570      	push	{r4, r5, r6, lr}
 800dbfc:	fba1 5402 	umull	r5, r4, r1, r2
 800dc00:	b93c      	cbnz	r4, 800dc12 <_calloc_r+0x18>
 800dc02:	4629      	mov	r1, r5
 800dc04:	f7ff f856 	bl	800ccb4 <_malloc_r>
 800dc08:	4606      	mov	r6, r0
 800dc0a:	b928      	cbnz	r0, 800dc18 <_calloc_r+0x1e>
 800dc0c:	2600      	movs	r6, #0
 800dc0e:	4630      	mov	r0, r6
 800dc10:	bd70      	pop	{r4, r5, r6, pc}
 800dc12:	220c      	movs	r2, #12
 800dc14:	6002      	str	r2, [r0, #0]
 800dc16:	e7f9      	b.n	800dc0c <_calloc_r+0x12>
 800dc18:	462a      	mov	r2, r5
 800dc1a:	4621      	mov	r1, r4
 800dc1c:	f7fd fd25 	bl	800b66a <memset>
 800dc20:	e7f5      	b.n	800dc0e <_calloc_r+0x14>

0800dc22 <_realloc_r>:
 800dc22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc26:	4680      	mov	r8, r0
 800dc28:	4615      	mov	r5, r2
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	b921      	cbnz	r1, 800dc38 <_realloc_r+0x16>
 800dc2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc32:	4611      	mov	r1, r2
 800dc34:	f7ff b83e 	b.w	800ccb4 <_malloc_r>
 800dc38:	b92a      	cbnz	r2, 800dc46 <_realloc_r+0x24>
 800dc3a:	f7fe fc8d 	bl	800c558 <_free_r>
 800dc3e:	2400      	movs	r4, #0
 800dc40:	4620      	mov	r0, r4
 800dc42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc46:	f000 fa33 	bl	800e0b0 <_malloc_usable_size_r>
 800dc4a:	4285      	cmp	r5, r0
 800dc4c:	4606      	mov	r6, r0
 800dc4e:	d802      	bhi.n	800dc56 <_realloc_r+0x34>
 800dc50:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dc54:	d8f4      	bhi.n	800dc40 <_realloc_r+0x1e>
 800dc56:	4629      	mov	r1, r5
 800dc58:	4640      	mov	r0, r8
 800dc5a:	f7ff f82b 	bl	800ccb4 <_malloc_r>
 800dc5e:	4607      	mov	r7, r0
 800dc60:	2800      	cmp	r0, #0
 800dc62:	d0ec      	beq.n	800dc3e <_realloc_r+0x1c>
 800dc64:	42b5      	cmp	r5, r6
 800dc66:	462a      	mov	r2, r5
 800dc68:	4621      	mov	r1, r4
 800dc6a:	bf28      	it	cs
 800dc6c:	4632      	movcs	r2, r6
 800dc6e:	f7fd fdea 	bl	800b846 <memcpy>
 800dc72:	4621      	mov	r1, r4
 800dc74:	4640      	mov	r0, r8
 800dc76:	f7fe fc6f 	bl	800c558 <_free_r>
 800dc7a:	463c      	mov	r4, r7
 800dc7c:	e7e0      	b.n	800dc40 <_realloc_r+0x1e>

0800dc7e <__sfputc_r>:
 800dc7e:	6893      	ldr	r3, [r2, #8]
 800dc80:	3b01      	subs	r3, #1
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	b410      	push	{r4}
 800dc86:	6093      	str	r3, [r2, #8]
 800dc88:	da08      	bge.n	800dc9c <__sfputc_r+0x1e>
 800dc8a:	6994      	ldr	r4, [r2, #24]
 800dc8c:	42a3      	cmp	r3, r4
 800dc8e:	db01      	blt.n	800dc94 <__sfputc_r+0x16>
 800dc90:	290a      	cmp	r1, #10
 800dc92:	d103      	bne.n	800dc9c <__sfputc_r+0x1e>
 800dc94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc98:	f000 b932 	b.w	800df00 <__swbuf_r>
 800dc9c:	6813      	ldr	r3, [r2, #0]
 800dc9e:	1c58      	adds	r0, r3, #1
 800dca0:	6010      	str	r0, [r2, #0]
 800dca2:	7019      	strb	r1, [r3, #0]
 800dca4:	4608      	mov	r0, r1
 800dca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcaa:	4770      	bx	lr

0800dcac <__sfputs_r>:
 800dcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcae:	4606      	mov	r6, r0
 800dcb0:	460f      	mov	r7, r1
 800dcb2:	4614      	mov	r4, r2
 800dcb4:	18d5      	adds	r5, r2, r3
 800dcb6:	42ac      	cmp	r4, r5
 800dcb8:	d101      	bne.n	800dcbe <__sfputs_r+0x12>
 800dcba:	2000      	movs	r0, #0
 800dcbc:	e007      	b.n	800dcce <__sfputs_r+0x22>
 800dcbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcc2:	463a      	mov	r2, r7
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	f7ff ffda 	bl	800dc7e <__sfputc_r>
 800dcca:	1c43      	adds	r3, r0, #1
 800dccc:	d1f3      	bne.n	800dcb6 <__sfputs_r+0xa>
 800dcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dcd0 <_vfiprintf_r>:
 800dcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd4:	460d      	mov	r5, r1
 800dcd6:	b09d      	sub	sp, #116	@ 0x74
 800dcd8:	4614      	mov	r4, r2
 800dcda:	4698      	mov	r8, r3
 800dcdc:	4606      	mov	r6, r0
 800dcde:	b118      	cbz	r0, 800dce8 <_vfiprintf_r+0x18>
 800dce0:	6a03      	ldr	r3, [r0, #32]
 800dce2:	b90b      	cbnz	r3, 800dce8 <_vfiprintf_r+0x18>
 800dce4:	f7fd fc28 	bl	800b538 <__sinit>
 800dce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcea:	07d9      	lsls	r1, r3, #31
 800dcec:	d405      	bmi.n	800dcfa <_vfiprintf_r+0x2a>
 800dcee:	89ab      	ldrh	r3, [r5, #12]
 800dcf0:	059a      	lsls	r2, r3, #22
 800dcf2:	d402      	bmi.n	800dcfa <_vfiprintf_r+0x2a>
 800dcf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcf6:	f7fd fda4 	bl	800b842 <__retarget_lock_acquire_recursive>
 800dcfa:	89ab      	ldrh	r3, [r5, #12]
 800dcfc:	071b      	lsls	r3, r3, #28
 800dcfe:	d501      	bpl.n	800dd04 <_vfiprintf_r+0x34>
 800dd00:	692b      	ldr	r3, [r5, #16]
 800dd02:	b99b      	cbnz	r3, 800dd2c <_vfiprintf_r+0x5c>
 800dd04:	4629      	mov	r1, r5
 800dd06:	4630      	mov	r0, r6
 800dd08:	f000 f938 	bl	800df7c <__swsetup_r>
 800dd0c:	b170      	cbz	r0, 800dd2c <_vfiprintf_r+0x5c>
 800dd0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd10:	07dc      	lsls	r4, r3, #31
 800dd12:	d504      	bpl.n	800dd1e <_vfiprintf_r+0x4e>
 800dd14:	f04f 30ff 	mov.w	r0, #4294967295
 800dd18:	b01d      	add	sp, #116	@ 0x74
 800dd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd1e:	89ab      	ldrh	r3, [r5, #12]
 800dd20:	0598      	lsls	r0, r3, #22
 800dd22:	d4f7      	bmi.n	800dd14 <_vfiprintf_r+0x44>
 800dd24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd26:	f7fd fd8d 	bl	800b844 <__retarget_lock_release_recursive>
 800dd2a:	e7f3      	b.n	800dd14 <_vfiprintf_r+0x44>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd30:	2320      	movs	r3, #32
 800dd32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd36:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd3a:	2330      	movs	r3, #48	@ 0x30
 800dd3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800deec <_vfiprintf_r+0x21c>
 800dd40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd44:	f04f 0901 	mov.w	r9, #1
 800dd48:	4623      	mov	r3, r4
 800dd4a:	469a      	mov	sl, r3
 800dd4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd50:	b10a      	cbz	r2, 800dd56 <_vfiprintf_r+0x86>
 800dd52:	2a25      	cmp	r2, #37	@ 0x25
 800dd54:	d1f9      	bne.n	800dd4a <_vfiprintf_r+0x7a>
 800dd56:	ebba 0b04 	subs.w	fp, sl, r4
 800dd5a:	d00b      	beq.n	800dd74 <_vfiprintf_r+0xa4>
 800dd5c:	465b      	mov	r3, fp
 800dd5e:	4622      	mov	r2, r4
 800dd60:	4629      	mov	r1, r5
 800dd62:	4630      	mov	r0, r6
 800dd64:	f7ff ffa2 	bl	800dcac <__sfputs_r>
 800dd68:	3001      	adds	r0, #1
 800dd6a:	f000 80a7 	beq.w	800debc <_vfiprintf_r+0x1ec>
 800dd6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd70:	445a      	add	r2, fp
 800dd72:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd74:	f89a 3000 	ldrb.w	r3, [sl]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	f000 809f 	beq.w	800debc <_vfiprintf_r+0x1ec>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	f04f 32ff 	mov.w	r2, #4294967295
 800dd84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd88:	f10a 0a01 	add.w	sl, sl, #1
 800dd8c:	9304      	str	r3, [sp, #16]
 800dd8e:	9307      	str	r3, [sp, #28]
 800dd90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd94:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd96:	4654      	mov	r4, sl
 800dd98:	2205      	movs	r2, #5
 800dd9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd9e:	4853      	ldr	r0, [pc, #332]	@ (800deec <_vfiprintf_r+0x21c>)
 800dda0:	f7f2 fa16 	bl	80001d0 <memchr>
 800dda4:	9a04      	ldr	r2, [sp, #16]
 800dda6:	b9d8      	cbnz	r0, 800dde0 <_vfiprintf_r+0x110>
 800dda8:	06d1      	lsls	r1, r2, #27
 800ddaa:	bf44      	itt	mi
 800ddac:	2320      	movmi	r3, #32
 800ddae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ddb2:	0713      	lsls	r3, r2, #28
 800ddb4:	bf44      	itt	mi
 800ddb6:	232b      	movmi	r3, #43	@ 0x2b
 800ddb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ddbc:	f89a 3000 	ldrb.w	r3, [sl]
 800ddc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddc2:	d015      	beq.n	800ddf0 <_vfiprintf_r+0x120>
 800ddc4:	9a07      	ldr	r2, [sp, #28]
 800ddc6:	4654      	mov	r4, sl
 800ddc8:	2000      	movs	r0, #0
 800ddca:	f04f 0c0a 	mov.w	ip, #10
 800ddce:	4621      	mov	r1, r4
 800ddd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddd4:	3b30      	subs	r3, #48	@ 0x30
 800ddd6:	2b09      	cmp	r3, #9
 800ddd8:	d94b      	bls.n	800de72 <_vfiprintf_r+0x1a2>
 800ddda:	b1b0      	cbz	r0, 800de0a <_vfiprintf_r+0x13a>
 800dddc:	9207      	str	r2, [sp, #28]
 800ddde:	e014      	b.n	800de0a <_vfiprintf_r+0x13a>
 800dde0:	eba0 0308 	sub.w	r3, r0, r8
 800dde4:	fa09 f303 	lsl.w	r3, r9, r3
 800dde8:	4313      	orrs	r3, r2
 800ddea:	9304      	str	r3, [sp, #16]
 800ddec:	46a2      	mov	sl, r4
 800ddee:	e7d2      	b.n	800dd96 <_vfiprintf_r+0xc6>
 800ddf0:	9b03      	ldr	r3, [sp, #12]
 800ddf2:	1d19      	adds	r1, r3, #4
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	9103      	str	r1, [sp, #12]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	bfbb      	ittet	lt
 800ddfc:	425b      	neglt	r3, r3
 800ddfe:	f042 0202 	orrlt.w	r2, r2, #2
 800de02:	9307      	strge	r3, [sp, #28]
 800de04:	9307      	strlt	r3, [sp, #28]
 800de06:	bfb8      	it	lt
 800de08:	9204      	strlt	r2, [sp, #16]
 800de0a:	7823      	ldrb	r3, [r4, #0]
 800de0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800de0e:	d10a      	bne.n	800de26 <_vfiprintf_r+0x156>
 800de10:	7863      	ldrb	r3, [r4, #1]
 800de12:	2b2a      	cmp	r3, #42	@ 0x2a
 800de14:	d132      	bne.n	800de7c <_vfiprintf_r+0x1ac>
 800de16:	9b03      	ldr	r3, [sp, #12]
 800de18:	1d1a      	adds	r2, r3, #4
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	9203      	str	r2, [sp, #12]
 800de1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de22:	3402      	adds	r4, #2
 800de24:	9305      	str	r3, [sp, #20]
 800de26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800defc <_vfiprintf_r+0x22c>
 800de2a:	7821      	ldrb	r1, [r4, #0]
 800de2c:	2203      	movs	r2, #3
 800de2e:	4650      	mov	r0, sl
 800de30:	f7f2 f9ce 	bl	80001d0 <memchr>
 800de34:	b138      	cbz	r0, 800de46 <_vfiprintf_r+0x176>
 800de36:	9b04      	ldr	r3, [sp, #16]
 800de38:	eba0 000a 	sub.w	r0, r0, sl
 800de3c:	2240      	movs	r2, #64	@ 0x40
 800de3e:	4082      	lsls	r2, r0
 800de40:	4313      	orrs	r3, r2
 800de42:	3401      	adds	r4, #1
 800de44:	9304      	str	r3, [sp, #16]
 800de46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de4a:	4829      	ldr	r0, [pc, #164]	@ (800def0 <_vfiprintf_r+0x220>)
 800de4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de50:	2206      	movs	r2, #6
 800de52:	f7f2 f9bd 	bl	80001d0 <memchr>
 800de56:	2800      	cmp	r0, #0
 800de58:	d03f      	beq.n	800deda <_vfiprintf_r+0x20a>
 800de5a:	4b26      	ldr	r3, [pc, #152]	@ (800def4 <_vfiprintf_r+0x224>)
 800de5c:	bb1b      	cbnz	r3, 800dea6 <_vfiprintf_r+0x1d6>
 800de5e:	9b03      	ldr	r3, [sp, #12]
 800de60:	3307      	adds	r3, #7
 800de62:	f023 0307 	bic.w	r3, r3, #7
 800de66:	3308      	adds	r3, #8
 800de68:	9303      	str	r3, [sp, #12]
 800de6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de6c:	443b      	add	r3, r7
 800de6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800de70:	e76a      	b.n	800dd48 <_vfiprintf_r+0x78>
 800de72:	fb0c 3202 	mla	r2, ip, r2, r3
 800de76:	460c      	mov	r4, r1
 800de78:	2001      	movs	r0, #1
 800de7a:	e7a8      	b.n	800ddce <_vfiprintf_r+0xfe>
 800de7c:	2300      	movs	r3, #0
 800de7e:	3401      	adds	r4, #1
 800de80:	9305      	str	r3, [sp, #20]
 800de82:	4619      	mov	r1, r3
 800de84:	f04f 0c0a 	mov.w	ip, #10
 800de88:	4620      	mov	r0, r4
 800de8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de8e:	3a30      	subs	r2, #48	@ 0x30
 800de90:	2a09      	cmp	r2, #9
 800de92:	d903      	bls.n	800de9c <_vfiprintf_r+0x1cc>
 800de94:	2b00      	cmp	r3, #0
 800de96:	d0c6      	beq.n	800de26 <_vfiprintf_r+0x156>
 800de98:	9105      	str	r1, [sp, #20]
 800de9a:	e7c4      	b.n	800de26 <_vfiprintf_r+0x156>
 800de9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dea0:	4604      	mov	r4, r0
 800dea2:	2301      	movs	r3, #1
 800dea4:	e7f0      	b.n	800de88 <_vfiprintf_r+0x1b8>
 800dea6:	ab03      	add	r3, sp, #12
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	462a      	mov	r2, r5
 800deac:	4b12      	ldr	r3, [pc, #72]	@ (800def8 <_vfiprintf_r+0x228>)
 800deae:	a904      	add	r1, sp, #16
 800deb0:	4630      	mov	r0, r6
 800deb2:	f7fc fce9 	bl	800a888 <_printf_float>
 800deb6:	4607      	mov	r7, r0
 800deb8:	1c78      	adds	r0, r7, #1
 800deba:	d1d6      	bne.n	800de6a <_vfiprintf_r+0x19a>
 800debc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800debe:	07d9      	lsls	r1, r3, #31
 800dec0:	d405      	bmi.n	800dece <_vfiprintf_r+0x1fe>
 800dec2:	89ab      	ldrh	r3, [r5, #12]
 800dec4:	059a      	lsls	r2, r3, #22
 800dec6:	d402      	bmi.n	800dece <_vfiprintf_r+0x1fe>
 800dec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800deca:	f7fd fcbb 	bl	800b844 <__retarget_lock_release_recursive>
 800dece:	89ab      	ldrh	r3, [r5, #12]
 800ded0:	065b      	lsls	r3, r3, #25
 800ded2:	f53f af1f 	bmi.w	800dd14 <_vfiprintf_r+0x44>
 800ded6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ded8:	e71e      	b.n	800dd18 <_vfiprintf_r+0x48>
 800deda:	ab03      	add	r3, sp, #12
 800dedc:	9300      	str	r3, [sp, #0]
 800dede:	462a      	mov	r2, r5
 800dee0:	4b05      	ldr	r3, [pc, #20]	@ (800def8 <_vfiprintf_r+0x228>)
 800dee2:	a904      	add	r1, sp, #16
 800dee4:	4630      	mov	r0, r6
 800dee6:	f7fc ff67 	bl	800adb8 <_printf_i>
 800deea:	e7e4      	b.n	800deb6 <_vfiprintf_r+0x1e6>
 800deec:	080107a0 	.word	0x080107a0
 800def0:	080107aa 	.word	0x080107aa
 800def4:	0800a889 	.word	0x0800a889
 800def8:	0800dcad 	.word	0x0800dcad
 800defc:	080107a6 	.word	0x080107a6

0800df00 <__swbuf_r>:
 800df00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df02:	460e      	mov	r6, r1
 800df04:	4614      	mov	r4, r2
 800df06:	4605      	mov	r5, r0
 800df08:	b118      	cbz	r0, 800df12 <__swbuf_r+0x12>
 800df0a:	6a03      	ldr	r3, [r0, #32]
 800df0c:	b90b      	cbnz	r3, 800df12 <__swbuf_r+0x12>
 800df0e:	f7fd fb13 	bl	800b538 <__sinit>
 800df12:	69a3      	ldr	r3, [r4, #24]
 800df14:	60a3      	str	r3, [r4, #8]
 800df16:	89a3      	ldrh	r3, [r4, #12]
 800df18:	071a      	lsls	r2, r3, #28
 800df1a:	d501      	bpl.n	800df20 <__swbuf_r+0x20>
 800df1c:	6923      	ldr	r3, [r4, #16]
 800df1e:	b943      	cbnz	r3, 800df32 <__swbuf_r+0x32>
 800df20:	4621      	mov	r1, r4
 800df22:	4628      	mov	r0, r5
 800df24:	f000 f82a 	bl	800df7c <__swsetup_r>
 800df28:	b118      	cbz	r0, 800df32 <__swbuf_r+0x32>
 800df2a:	f04f 37ff 	mov.w	r7, #4294967295
 800df2e:	4638      	mov	r0, r7
 800df30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df32:	6823      	ldr	r3, [r4, #0]
 800df34:	6922      	ldr	r2, [r4, #16]
 800df36:	1a98      	subs	r0, r3, r2
 800df38:	6963      	ldr	r3, [r4, #20]
 800df3a:	b2f6      	uxtb	r6, r6
 800df3c:	4283      	cmp	r3, r0
 800df3e:	4637      	mov	r7, r6
 800df40:	dc05      	bgt.n	800df4e <__swbuf_r+0x4e>
 800df42:	4621      	mov	r1, r4
 800df44:	4628      	mov	r0, r5
 800df46:	f7ff fded 	bl	800db24 <_fflush_r>
 800df4a:	2800      	cmp	r0, #0
 800df4c:	d1ed      	bne.n	800df2a <__swbuf_r+0x2a>
 800df4e:	68a3      	ldr	r3, [r4, #8]
 800df50:	3b01      	subs	r3, #1
 800df52:	60a3      	str	r3, [r4, #8]
 800df54:	6823      	ldr	r3, [r4, #0]
 800df56:	1c5a      	adds	r2, r3, #1
 800df58:	6022      	str	r2, [r4, #0]
 800df5a:	701e      	strb	r6, [r3, #0]
 800df5c:	6962      	ldr	r2, [r4, #20]
 800df5e:	1c43      	adds	r3, r0, #1
 800df60:	429a      	cmp	r2, r3
 800df62:	d004      	beq.n	800df6e <__swbuf_r+0x6e>
 800df64:	89a3      	ldrh	r3, [r4, #12]
 800df66:	07db      	lsls	r3, r3, #31
 800df68:	d5e1      	bpl.n	800df2e <__swbuf_r+0x2e>
 800df6a:	2e0a      	cmp	r6, #10
 800df6c:	d1df      	bne.n	800df2e <__swbuf_r+0x2e>
 800df6e:	4621      	mov	r1, r4
 800df70:	4628      	mov	r0, r5
 800df72:	f7ff fdd7 	bl	800db24 <_fflush_r>
 800df76:	2800      	cmp	r0, #0
 800df78:	d0d9      	beq.n	800df2e <__swbuf_r+0x2e>
 800df7a:	e7d6      	b.n	800df2a <__swbuf_r+0x2a>

0800df7c <__swsetup_r>:
 800df7c:	b538      	push	{r3, r4, r5, lr}
 800df7e:	4b29      	ldr	r3, [pc, #164]	@ (800e024 <__swsetup_r+0xa8>)
 800df80:	4605      	mov	r5, r0
 800df82:	6818      	ldr	r0, [r3, #0]
 800df84:	460c      	mov	r4, r1
 800df86:	b118      	cbz	r0, 800df90 <__swsetup_r+0x14>
 800df88:	6a03      	ldr	r3, [r0, #32]
 800df8a:	b90b      	cbnz	r3, 800df90 <__swsetup_r+0x14>
 800df8c:	f7fd fad4 	bl	800b538 <__sinit>
 800df90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df94:	0719      	lsls	r1, r3, #28
 800df96:	d422      	bmi.n	800dfde <__swsetup_r+0x62>
 800df98:	06da      	lsls	r2, r3, #27
 800df9a:	d407      	bmi.n	800dfac <__swsetup_r+0x30>
 800df9c:	2209      	movs	r2, #9
 800df9e:	602a      	str	r2, [r5, #0]
 800dfa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfa4:	81a3      	strh	r3, [r4, #12]
 800dfa6:	f04f 30ff 	mov.w	r0, #4294967295
 800dfaa:	e033      	b.n	800e014 <__swsetup_r+0x98>
 800dfac:	0758      	lsls	r0, r3, #29
 800dfae:	d512      	bpl.n	800dfd6 <__swsetup_r+0x5a>
 800dfb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dfb2:	b141      	cbz	r1, 800dfc6 <__swsetup_r+0x4a>
 800dfb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfb8:	4299      	cmp	r1, r3
 800dfba:	d002      	beq.n	800dfc2 <__swsetup_r+0x46>
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	f7fe facb 	bl	800c558 <_free_r>
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dfc6:	89a3      	ldrh	r3, [r4, #12]
 800dfc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dfcc:	81a3      	strh	r3, [r4, #12]
 800dfce:	2300      	movs	r3, #0
 800dfd0:	6063      	str	r3, [r4, #4]
 800dfd2:	6923      	ldr	r3, [r4, #16]
 800dfd4:	6023      	str	r3, [r4, #0]
 800dfd6:	89a3      	ldrh	r3, [r4, #12]
 800dfd8:	f043 0308 	orr.w	r3, r3, #8
 800dfdc:	81a3      	strh	r3, [r4, #12]
 800dfde:	6923      	ldr	r3, [r4, #16]
 800dfe0:	b94b      	cbnz	r3, 800dff6 <__swsetup_r+0x7a>
 800dfe2:	89a3      	ldrh	r3, [r4, #12]
 800dfe4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dfe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dfec:	d003      	beq.n	800dff6 <__swsetup_r+0x7a>
 800dfee:	4621      	mov	r1, r4
 800dff0:	4628      	mov	r0, r5
 800dff2:	f000 f88b 	bl	800e10c <__smakebuf_r>
 800dff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dffa:	f013 0201 	ands.w	r2, r3, #1
 800dffe:	d00a      	beq.n	800e016 <__swsetup_r+0x9a>
 800e000:	2200      	movs	r2, #0
 800e002:	60a2      	str	r2, [r4, #8]
 800e004:	6962      	ldr	r2, [r4, #20]
 800e006:	4252      	negs	r2, r2
 800e008:	61a2      	str	r2, [r4, #24]
 800e00a:	6922      	ldr	r2, [r4, #16]
 800e00c:	b942      	cbnz	r2, 800e020 <__swsetup_r+0xa4>
 800e00e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e012:	d1c5      	bne.n	800dfa0 <__swsetup_r+0x24>
 800e014:	bd38      	pop	{r3, r4, r5, pc}
 800e016:	0799      	lsls	r1, r3, #30
 800e018:	bf58      	it	pl
 800e01a:	6962      	ldrpl	r2, [r4, #20]
 800e01c:	60a2      	str	r2, [r4, #8]
 800e01e:	e7f4      	b.n	800e00a <__swsetup_r+0x8e>
 800e020:	2000      	movs	r0, #0
 800e022:	e7f7      	b.n	800e014 <__swsetup_r+0x98>
 800e024:	20000264 	.word	0x20000264

0800e028 <_raise_r>:
 800e028:	291f      	cmp	r1, #31
 800e02a:	b538      	push	{r3, r4, r5, lr}
 800e02c:	4605      	mov	r5, r0
 800e02e:	460c      	mov	r4, r1
 800e030:	d904      	bls.n	800e03c <_raise_r+0x14>
 800e032:	2316      	movs	r3, #22
 800e034:	6003      	str	r3, [r0, #0]
 800e036:	f04f 30ff 	mov.w	r0, #4294967295
 800e03a:	bd38      	pop	{r3, r4, r5, pc}
 800e03c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e03e:	b112      	cbz	r2, 800e046 <_raise_r+0x1e>
 800e040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e044:	b94b      	cbnz	r3, 800e05a <_raise_r+0x32>
 800e046:	4628      	mov	r0, r5
 800e048:	f000 f830 	bl	800e0ac <_getpid_r>
 800e04c:	4622      	mov	r2, r4
 800e04e:	4601      	mov	r1, r0
 800e050:	4628      	mov	r0, r5
 800e052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e056:	f000 b817 	b.w	800e088 <_kill_r>
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d00a      	beq.n	800e074 <_raise_r+0x4c>
 800e05e:	1c59      	adds	r1, r3, #1
 800e060:	d103      	bne.n	800e06a <_raise_r+0x42>
 800e062:	2316      	movs	r3, #22
 800e064:	6003      	str	r3, [r0, #0]
 800e066:	2001      	movs	r0, #1
 800e068:	e7e7      	b.n	800e03a <_raise_r+0x12>
 800e06a:	2100      	movs	r1, #0
 800e06c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e070:	4620      	mov	r0, r4
 800e072:	4798      	blx	r3
 800e074:	2000      	movs	r0, #0
 800e076:	e7e0      	b.n	800e03a <_raise_r+0x12>

0800e078 <raise>:
 800e078:	4b02      	ldr	r3, [pc, #8]	@ (800e084 <raise+0xc>)
 800e07a:	4601      	mov	r1, r0
 800e07c:	6818      	ldr	r0, [r3, #0]
 800e07e:	f7ff bfd3 	b.w	800e028 <_raise_r>
 800e082:	bf00      	nop
 800e084:	20000264 	.word	0x20000264

0800e088 <_kill_r>:
 800e088:	b538      	push	{r3, r4, r5, lr}
 800e08a:	4d07      	ldr	r5, [pc, #28]	@ (800e0a8 <_kill_r+0x20>)
 800e08c:	2300      	movs	r3, #0
 800e08e:	4604      	mov	r4, r0
 800e090:	4608      	mov	r0, r1
 800e092:	4611      	mov	r1, r2
 800e094:	602b      	str	r3, [r5, #0]
 800e096:	f7f7 fe89 	bl	8005dac <_kill>
 800e09a:	1c43      	adds	r3, r0, #1
 800e09c:	d102      	bne.n	800e0a4 <_kill_r+0x1c>
 800e09e:	682b      	ldr	r3, [r5, #0]
 800e0a0:	b103      	cbz	r3, 800e0a4 <_kill_r+0x1c>
 800e0a2:	6023      	str	r3, [r4, #0]
 800e0a4:	bd38      	pop	{r3, r4, r5, pc}
 800e0a6:	bf00      	nop
 800e0a8:	20000758 	.word	0x20000758

0800e0ac <_getpid_r>:
 800e0ac:	f7f7 be76 	b.w	8005d9c <_getpid>

0800e0b0 <_malloc_usable_size_r>:
 800e0b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0b4:	1f18      	subs	r0, r3, #4
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	bfbc      	itt	lt
 800e0ba:	580b      	ldrlt	r3, [r1, r0]
 800e0bc:	18c0      	addlt	r0, r0, r3
 800e0be:	4770      	bx	lr

0800e0c0 <__swhatbuf_r>:
 800e0c0:	b570      	push	{r4, r5, r6, lr}
 800e0c2:	460c      	mov	r4, r1
 800e0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0c8:	2900      	cmp	r1, #0
 800e0ca:	b096      	sub	sp, #88	@ 0x58
 800e0cc:	4615      	mov	r5, r2
 800e0ce:	461e      	mov	r6, r3
 800e0d0:	da0d      	bge.n	800e0ee <__swhatbuf_r+0x2e>
 800e0d2:	89a3      	ldrh	r3, [r4, #12]
 800e0d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e0d8:	f04f 0100 	mov.w	r1, #0
 800e0dc:	bf14      	ite	ne
 800e0de:	2340      	movne	r3, #64	@ 0x40
 800e0e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	6031      	str	r1, [r6, #0]
 800e0e8:	602b      	str	r3, [r5, #0]
 800e0ea:	b016      	add	sp, #88	@ 0x58
 800e0ec:	bd70      	pop	{r4, r5, r6, pc}
 800e0ee:	466a      	mov	r2, sp
 800e0f0:	f000 f848 	bl	800e184 <_fstat_r>
 800e0f4:	2800      	cmp	r0, #0
 800e0f6:	dbec      	blt.n	800e0d2 <__swhatbuf_r+0x12>
 800e0f8:	9901      	ldr	r1, [sp, #4]
 800e0fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e0fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e102:	4259      	negs	r1, r3
 800e104:	4159      	adcs	r1, r3
 800e106:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e10a:	e7eb      	b.n	800e0e4 <__swhatbuf_r+0x24>

0800e10c <__smakebuf_r>:
 800e10c:	898b      	ldrh	r3, [r1, #12]
 800e10e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e110:	079d      	lsls	r5, r3, #30
 800e112:	4606      	mov	r6, r0
 800e114:	460c      	mov	r4, r1
 800e116:	d507      	bpl.n	800e128 <__smakebuf_r+0x1c>
 800e118:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e11c:	6023      	str	r3, [r4, #0]
 800e11e:	6123      	str	r3, [r4, #16]
 800e120:	2301      	movs	r3, #1
 800e122:	6163      	str	r3, [r4, #20]
 800e124:	b003      	add	sp, #12
 800e126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e128:	ab01      	add	r3, sp, #4
 800e12a:	466a      	mov	r2, sp
 800e12c:	f7ff ffc8 	bl	800e0c0 <__swhatbuf_r>
 800e130:	9f00      	ldr	r7, [sp, #0]
 800e132:	4605      	mov	r5, r0
 800e134:	4639      	mov	r1, r7
 800e136:	4630      	mov	r0, r6
 800e138:	f7fe fdbc 	bl	800ccb4 <_malloc_r>
 800e13c:	b948      	cbnz	r0, 800e152 <__smakebuf_r+0x46>
 800e13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e142:	059a      	lsls	r2, r3, #22
 800e144:	d4ee      	bmi.n	800e124 <__smakebuf_r+0x18>
 800e146:	f023 0303 	bic.w	r3, r3, #3
 800e14a:	f043 0302 	orr.w	r3, r3, #2
 800e14e:	81a3      	strh	r3, [r4, #12]
 800e150:	e7e2      	b.n	800e118 <__smakebuf_r+0xc>
 800e152:	89a3      	ldrh	r3, [r4, #12]
 800e154:	6020      	str	r0, [r4, #0]
 800e156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e15a:	81a3      	strh	r3, [r4, #12]
 800e15c:	9b01      	ldr	r3, [sp, #4]
 800e15e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e162:	b15b      	cbz	r3, 800e17c <__smakebuf_r+0x70>
 800e164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e168:	4630      	mov	r0, r6
 800e16a:	f000 f81d 	bl	800e1a8 <_isatty_r>
 800e16e:	b128      	cbz	r0, 800e17c <__smakebuf_r+0x70>
 800e170:	89a3      	ldrh	r3, [r4, #12]
 800e172:	f023 0303 	bic.w	r3, r3, #3
 800e176:	f043 0301 	orr.w	r3, r3, #1
 800e17a:	81a3      	strh	r3, [r4, #12]
 800e17c:	89a3      	ldrh	r3, [r4, #12]
 800e17e:	431d      	orrs	r5, r3
 800e180:	81a5      	strh	r5, [r4, #12]
 800e182:	e7cf      	b.n	800e124 <__smakebuf_r+0x18>

0800e184 <_fstat_r>:
 800e184:	b538      	push	{r3, r4, r5, lr}
 800e186:	4d07      	ldr	r5, [pc, #28]	@ (800e1a4 <_fstat_r+0x20>)
 800e188:	2300      	movs	r3, #0
 800e18a:	4604      	mov	r4, r0
 800e18c:	4608      	mov	r0, r1
 800e18e:	4611      	mov	r1, r2
 800e190:	602b      	str	r3, [r5, #0]
 800e192:	f7f7 fe6b 	bl	8005e6c <_fstat>
 800e196:	1c43      	adds	r3, r0, #1
 800e198:	d102      	bne.n	800e1a0 <_fstat_r+0x1c>
 800e19a:	682b      	ldr	r3, [r5, #0]
 800e19c:	b103      	cbz	r3, 800e1a0 <_fstat_r+0x1c>
 800e19e:	6023      	str	r3, [r4, #0]
 800e1a0:	bd38      	pop	{r3, r4, r5, pc}
 800e1a2:	bf00      	nop
 800e1a4:	20000758 	.word	0x20000758

0800e1a8 <_isatty_r>:
 800e1a8:	b538      	push	{r3, r4, r5, lr}
 800e1aa:	4d06      	ldr	r5, [pc, #24]	@ (800e1c4 <_isatty_r+0x1c>)
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	4604      	mov	r4, r0
 800e1b0:	4608      	mov	r0, r1
 800e1b2:	602b      	str	r3, [r5, #0]
 800e1b4:	f7f7 fe6a 	bl	8005e8c <_isatty>
 800e1b8:	1c43      	adds	r3, r0, #1
 800e1ba:	d102      	bne.n	800e1c2 <_isatty_r+0x1a>
 800e1bc:	682b      	ldr	r3, [r5, #0]
 800e1be:	b103      	cbz	r3, 800e1c2 <_isatty_r+0x1a>
 800e1c0:	6023      	str	r3, [r4, #0]
 800e1c2:	bd38      	pop	{r3, r4, r5, pc}
 800e1c4:	20000758 	.word	0x20000758

0800e1c8 <atan2>:
 800e1c8:	f000 bd26 	b.w	800ec18 <__ieee754_atan2>
 800e1cc:	0000      	movs	r0, r0
	...

0800e1d0 <hypot>:
 800e1d0:	b508      	push	{r3, lr}
 800e1d2:	ed2d 8b06 	vpush	{d8-d10}
 800e1d6:	eeb0 aa40 	vmov.f32	s20, s0
 800e1da:	eef0 aa60 	vmov.f32	s21, s1
 800e1de:	eeb0 9a41 	vmov.f32	s18, s2
 800e1e2:	eef0 9a61 	vmov.f32	s19, s3
 800e1e6:	f000 fddd 	bl	800eda4 <__ieee754_hypot>
 800e1ea:	eeb0 8a40 	vmov.f32	s16, s0
 800e1ee:	eef0 8a60 	vmov.f32	s17, s1
 800e1f2:	f000 f8fd 	bl	800e3f0 <finite>
 800e1f6:	b998      	cbnz	r0, 800e220 <hypot+0x50>
 800e1f8:	eeb0 0a4a 	vmov.f32	s0, s20
 800e1fc:	eef0 0a6a 	vmov.f32	s1, s21
 800e200:	f000 f8f6 	bl	800e3f0 <finite>
 800e204:	b160      	cbz	r0, 800e220 <hypot+0x50>
 800e206:	eeb0 0a49 	vmov.f32	s0, s18
 800e20a:	eef0 0a69 	vmov.f32	s1, s19
 800e20e:	f000 f8ef 	bl	800e3f0 <finite>
 800e212:	b128      	cbz	r0, 800e220 <hypot+0x50>
 800e214:	f7fd faea 	bl	800b7ec <__errno>
 800e218:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800e230 <hypot+0x60>
 800e21c:	2322      	movs	r3, #34	@ 0x22
 800e21e:	6003      	str	r3, [r0, #0]
 800e220:	eeb0 0a48 	vmov.f32	s0, s16
 800e224:	eef0 0a68 	vmov.f32	s1, s17
 800e228:	ecbd 8b06 	vpop	{d8-d10}
 800e22c:	bd08      	pop	{r3, pc}
 800e22e:	bf00      	nop
 800e230:	00000000 	.word	0x00000000
 800e234:	7ff00000 	.word	0x7ff00000

0800e238 <cos>:
 800e238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e23a:	ec53 2b10 	vmov	r2, r3, d0
 800e23e:	4826      	ldr	r0, [pc, #152]	@ (800e2d8 <cos+0xa0>)
 800e240:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e244:	4281      	cmp	r1, r0
 800e246:	d806      	bhi.n	800e256 <cos+0x1e>
 800e248:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800e2d0 <cos+0x98>
 800e24c:	b005      	add	sp, #20
 800e24e:	f85d eb04 	ldr.w	lr, [sp], #4
 800e252:	f000 b959 	b.w	800e508 <__kernel_cos>
 800e256:	4821      	ldr	r0, [pc, #132]	@ (800e2dc <cos+0xa4>)
 800e258:	4281      	cmp	r1, r0
 800e25a:	d908      	bls.n	800e26e <cos+0x36>
 800e25c:	4610      	mov	r0, r2
 800e25e:	4619      	mov	r1, r3
 800e260:	f7f2 f812 	bl	8000288 <__aeabi_dsub>
 800e264:	ec41 0b10 	vmov	d0, r0, r1
 800e268:	b005      	add	sp, #20
 800e26a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e26e:	4668      	mov	r0, sp
 800e270:	f000 feae 	bl	800efd0 <__ieee754_rem_pio2>
 800e274:	f000 0003 	and.w	r0, r0, #3
 800e278:	2801      	cmp	r0, #1
 800e27a:	d00b      	beq.n	800e294 <cos+0x5c>
 800e27c:	2802      	cmp	r0, #2
 800e27e:	d015      	beq.n	800e2ac <cos+0x74>
 800e280:	b9d8      	cbnz	r0, 800e2ba <cos+0x82>
 800e282:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e286:	ed9d 0b00 	vldr	d0, [sp]
 800e28a:	f000 f93d 	bl	800e508 <__kernel_cos>
 800e28e:	ec51 0b10 	vmov	r0, r1, d0
 800e292:	e7e7      	b.n	800e264 <cos+0x2c>
 800e294:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e298:	ed9d 0b00 	vldr	d0, [sp]
 800e29c:	f000 f9fc 	bl	800e698 <__kernel_sin>
 800e2a0:	ec53 2b10 	vmov	r2, r3, d0
 800e2a4:	4610      	mov	r0, r2
 800e2a6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e2aa:	e7db      	b.n	800e264 <cos+0x2c>
 800e2ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2b0:	ed9d 0b00 	vldr	d0, [sp]
 800e2b4:	f000 f928 	bl	800e508 <__kernel_cos>
 800e2b8:	e7f2      	b.n	800e2a0 <cos+0x68>
 800e2ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2be:	ed9d 0b00 	vldr	d0, [sp]
 800e2c2:	2001      	movs	r0, #1
 800e2c4:	f000 f9e8 	bl	800e698 <__kernel_sin>
 800e2c8:	e7e1      	b.n	800e28e <cos+0x56>
 800e2ca:	bf00      	nop
 800e2cc:	f3af 8000 	nop.w
	...
 800e2d8:	3fe921fb 	.word	0x3fe921fb
 800e2dc:	7fefffff 	.word	0x7fefffff

0800e2e0 <sin>:
 800e2e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e2e2:	ec53 2b10 	vmov	r2, r3, d0
 800e2e6:	4826      	ldr	r0, [pc, #152]	@ (800e380 <sin+0xa0>)
 800e2e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e2ec:	4281      	cmp	r1, r0
 800e2ee:	d807      	bhi.n	800e300 <sin+0x20>
 800e2f0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800e378 <sin+0x98>
 800e2f4:	2000      	movs	r0, #0
 800e2f6:	b005      	add	sp, #20
 800e2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2fc:	f000 b9cc 	b.w	800e698 <__kernel_sin>
 800e300:	4820      	ldr	r0, [pc, #128]	@ (800e384 <sin+0xa4>)
 800e302:	4281      	cmp	r1, r0
 800e304:	d908      	bls.n	800e318 <sin+0x38>
 800e306:	4610      	mov	r0, r2
 800e308:	4619      	mov	r1, r3
 800e30a:	f7f1 ffbd 	bl	8000288 <__aeabi_dsub>
 800e30e:	ec41 0b10 	vmov	d0, r0, r1
 800e312:	b005      	add	sp, #20
 800e314:	f85d fb04 	ldr.w	pc, [sp], #4
 800e318:	4668      	mov	r0, sp
 800e31a:	f000 fe59 	bl	800efd0 <__ieee754_rem_pio2>
 800e31e:	f000 0003 	and.w	r0, r0, #3
 800e322:	2801      	cmp	r0, #1
 800e324:	d00c      	beq.n	800e340 <sin+0x60>
 800e326:	2802      	cmp	r0, #2
 800e328:	d011      	beq.n	800e34e <sin+0x6e>
 800e32a:	b9e8      	cbnz	r0, 800e368 <sin+0x88>
 800e32c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e330:	ed9d 0b00 	vldr	d0, [sp]
 800e334:	2001      	movs	r0, #1
 800e336:	f000 f9af 	bl	800e698 <__kernel_sin>
 800e33a:	ec51 0b10 	vmov	r0, r1, d0
 800e33e:	e7e6      	b.n	800e30e <sin+0x2e>
 800e340:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e344:	ed9d 0b00 	vldr	d0, [sp]
 800e348:	f000 f8de 	bl	800e508 <__kernel_cos>
 800e34c:	e7f5      	b.n	800e33a <sin+0x5a>
 800e34e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e352:	ed9d 0b00 	vldr	d0, [sp]
 800e356:	2001      	movs	r0, #1
 800e358:	f000 f99e 	bl	800e698 <__kernel_sin>
 800e35c:	ec53 2b10 	vmov	r2, r3, d0
 800e360:	4610      	mov	r0, r2
 800e362:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e366:	e7d2      	b.n	800e30e <sin+0x2e>
 800e368:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e36c:	ed9d 0b00 	vldr	d0, [sp]
 800e370:	f000 f8ca 	bl	800e508 <__kernel_cos>
 800e374:	e7f2      	b.n	800e35c <sin+0x7c>
 800e376:	bf00      	nop
	...
 800e380:	3fe921fb 	.word	0x3fe921fb
 800e384:	7fefffff 	.word	0x7fefffff

0800e388 <tan>:
 800e388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e38a:	ec53 2b10 	vmov	r2, r3, d0
 800e38e:	4816      	ldr	r0, [pc, #88]	@ (800e3e8 <tan+0x60>)
 800e390:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e394:	4281      	cmp	r1, r0
 800e396:	d807      	bhi.n	800e3a8 <tan+0x20>
 800e398:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 800e3e0 <tan+0x58>
 800e39c:	2001      	movs	r0, #1
 800e39e:	b005      	add	sp, #20
 800e3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3a4:	f000 ba34 	b.w	800e810 <__kernel_tan>
 800e3a8:	4810      	ldr	r0, [pc, #64]	@ (800e3ec <tan+0x64>)
 800e3aa:	4281      	cmp	r1, r0
 800e3ac:	d908      	bls.n	800e3c0 <tan+0x38>
 800e3ae:	4610      	mov	r0, r2
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	f7f1 ff69 	bl	8000288 <__aeabi_dsub>
 800e3b6:	ec41 0b10 	vmov	d0, r0, r1
 800e3ba:	b005      	add	sp, #20
 800e3bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800e3c0:	4668      	mov	r0, sp
 800e3c2:	f000 fe05 	bl	800efd0 <__ieee754_rem_pio2>
 800e3c6:	0040      	lsls	r0, r0, #1
 800e3c8:	f000 0002 	and.w	r0, r0, #2
 800e3cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e3d0:	ed9d 0b00 	vldr	d0, [sp]
 800e3d4:	f1c0 0001 	rsb	r0, r0, #1
 800e3d8:	f000 fa1a 	bl	800e810 <__kernel_tan>
 800e3dc:	e7ed      	b.n	800e3ba <tan+0x32>
 800e3de:	bf00      	nop
	...
 800e3e8:	3fe921fb 	.word	0x3fe921fb
 800e3ec:	7fefffff 	.word	0x7fefffff

0800e3f0 <finite>:
 800e3f0:	b082      	sub	sp, #8
 800e3f2:	ed8d 0b00 	vstr	d0, [sp]
 800e3f6:	9801      	ldr	r0, [sp, #4]
 800e3f8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800e3fc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800e400:	0fc0      	lsrs	r0, r0, #31
 800e402:	b002      	add	sp, #8
 800e404:	4770      	bx	lr

0800e406 <fmax>:
 800e406:	b508      	push	{r3, lr}
 800e408:	ed2d 8b04 	vpush	{d8-d9}
 800e40c:	eeb0 8a40 	vmov.f32	s16, s0
 800e410:	eef0 8a60 	vmov.f32	s17, s1
 800e414:	eeb0 9a41 	vmov.f32	s18, s2
 800e418:	eef0 9a61 	vmov.f32	s19, s3
 800e41c:	f000 f848 	bl	800e4b0 <__fpclassifyd>
 800e420:	b950      	cbnz	r0, 800e438 <fmax+0x32>
 800e422:	eeb0 8a49 	vmov.f32	s16, s18
 800e426:	eef0 8a69 	vmov.f32	s17, s19
 800e42a:	eeb0 0a48 	vmov.f32	s0, s16
 800e42e:	eef0 0a68 	vmov.f32	s1, s17
 800e432:	ecbd 8b04 	vpop	{d8-d9}
 800e436:	bd08      	pop	{r3, pc}
 800e438:	eeb0 0a49 	vmov.f32	s0, s18
 800e43c:	eef0 0a69 	vmov.f32	s1, s19
 800e440:	f000 f836 	bl	800e4b0 <__fpclassifyd>
 800e444:	2800      	cmp	r0, #0
 800e446:	d0f0      	beq.n	800e42a <fmax+0x24>
 800e448:	ec53 2b19 	vmov	r2, r3, d9
 800e44c:	ec51 0b18 	vmov	r0, r1, d8
 800e450:	f7f2 fb62 	bl	8000b18 <__aeabi_dcmpgt>
 800e454:	2800      	cmp	r0, #0
 800e456:	d0e4      	beq.n	800e422 <fmax+0x1c>
 800e458:	e7e7      	b.n	800e42a <fmax+0x24>

0800e45a <fmin>:
 800e45a:	b508      	push	{r3, lr}
 800e45c:	ed2d 8b04 	vpush	{d8-d9}
 800e460:	eeb0 8a40 	vmov.f32	s16, s0
 800e464:	eef0 8a60 	vmov.f32	s17, s1
 800e468:	eeb0 9a41 	vmov.f32	s18, s2
 800e46c:	eef0 9a61 	vmov.f32	s19, s3
 800e470:	f000 f81e 	bl	800e4b0 <__fpclassifyd>
 800e474:	b950      	cbnz	r0, 800e48c <fmin+0x32>
 800e476:	eeb0 8a49 	vmov.f32	s16, s18
 800e47a:	eef0 8a69 	vmov.f32	s17, s19
 800e47e:	eeb0 0a48 	vmov.f32	s0, s16
 800e482:	eef0 0a68 	vmov.f32	s1, s17
 800e486:	ecbd 8b04 	vpop	{d8-d9}
 800e48a:	bd08      	pop	{r3, pc}
 800e48c:	eeb0 0a49 	vmov.f32	s0, s18
 800e490:	eef0 0a69 	vmov.f32	s1, s19
 800e494:	f000 f80c 	bl	800e4b0 <__fpclassifyd>
 800e498:	2800      	cmp	r0, #0
 800e49a:	d0f0      	beq.n	800e47e <fmin+0x24>
 800e49c:	ec53 2b19 	vmov	r2, r3, d9
 800e4a0:	ec51 0b18 	vmov	r0, r1, d8
 800e4a4:	f7f2 fb1a 	bl	8000adc <__aeabi_dcmplt>
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	d0e4      	beq.n	800e476 <fmin+0x1c>
 800e4ac:	e7e7      	b.n	800e47e <fmin+0x24>
	...

0800e4b0 <__fpclassifyd>:
 800e4b0:	ec51 0b10 	vmov	r0, r1, d0
 800e4b4:	b510      	push	{r4, lr}
 800e4b6:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	d019      	beq.n	800e4f2 <__fpclassifyd+0x42>
 800e4be:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800e4c2:	490e      	ldr	r1, [pc, #56]	@ (800e4fc <__fpclassifyd+0x4c>)
 800e4c4:	428a      	cmp	r2, r1
 800e4c6:	d90e      	bls.n	800e4e6 <__fpclassifyd+0x36>
 800e4c8:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800e4cc:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800e4d0:	428a      	cmp	r2, r1
 800e4d2:	d908      	bls.n	800e4e6 <__fpclassifyd+0x36>
 800e4d4:	4a0a      	ldr	r2, [pc, #40]	@ (800e500 <__fpclassifyd+0x50>)
 800e4d6:	4213      	tst	r3, r2
 800e4d8:	d007      	beq.n	800e4ea <__fpclassifyd+0x3a>
 800e4da:	4294      	cmp	r4, r2
 800e4dc:	d107      	bne.n	800e4ee <__fpclassifyd+0x3e>
 800e4de:	fab0 f080 	clz	r0, r0
 800e4e2:	0940      	lsrs	r0, r0, #5
 800e4e4:	bd10      	pop	{r4, pc}
 800e4e6:	2004      	movs	r0, #4
 800e4e8:	e7fc      	b.n	800e4e4 <__fpclassifyd+0x34>
 800e4ea:	2003      	movs	r0, #3
 800e4ec:	e7fa      	b.n	800e4e4 <__fpclassifyd+0x34>
 800e4ee:	2000      	movs	r0, #0
 800e4f0:	e7f8      	b.n	800e4e4 <__fpclassifyd+0x34>
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	d1ee      	bne.n	800e4d4 <__fpclassifyd+0x24>
 800e4f6:	2002      	movs	r0, #2
 800e4f8:	e7f4      	b.n	800e4e4 <__fpclassifyd+0x34>
 800e4fa:	bf00      	nop
 800e4fc:	7fdfffff 	.word	0x7fdfffff
 800e500:	7ff00000 	.word	0x7ff00000
 800e504:	00000000 	.word	0x00000000

0800e508 <__kernel_cos>:
 800e508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e50c:	ec57 6b10 	vmov	r6, r7, d0
 800e510:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e514:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800e518:	ed8d 1b00 	vstr	d1, [sp]
 800e51c:	d206      	bcs.n	800e52c <__kernel_cos+0x24>
 800e51e:	4630      	mov	r0, r6
 800e520:	4639      	mov	r1, r7
 800e522:	f7f2 fb19 	bl	8000b58 <__aeabi_d2iz>
 800e526:	2800      	cmp	r0, #0
 800e528:	f000 8088 	beq.w	800e63c <__kernel_cos+0x134>
 800e52c:	4632      	mov	r2, r6
 800e52e:	463b      	mov	r3, r7
 800e530:	4630      	mov	r0, r6
 800e532:	4639      	mov	r1, r7
 800e534:	f7f2 f860 	bl	80005f8 <__aeabi_dmul>
 800e538:	4b51      	ldr	r3, [pc, #324]	@ (800e680 <__kernel_cos+0x178>)
 800e53a:	2200      	movs	r2, #0
 800e53c:	4604      	mov	r4, r0
 800e53e:	460d      	mov	r5, r1
 800e540:	f7f2 f85a 	bl	80005f8 <__aeabi_dmul>
 800e544:	a340      	add	r3, pc, #256	@ (adr r3, 800e648 <__kernel_cos+0x140>)
 800e546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54a:	4682      	mov	sl, r0
 800e54c:	468b      	mov	fp, r1
 800e54e:	4620      	mov	r0, r4
 800e550:	4629      	mov	r1, r5
 800e552:	f7f2 f851 	bl	80005f8 <__aeabi_dmul>
 800e556:	a33e      	add	r3, pc, #248	@ (adr r3, 800e650 <__kernel_cos+0x148>)
 800e558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55c:	f7f1 fe96 	bl	800028c <__adddf3>
 800e560:	4622      	mov	r2, r4
 800e562:	462b      	mov	r3, r5
 800e564:	f7f2 f848 	bl	80005f8 <__aeabi_dmul>
 800e568:	a33b      	add	r3, pc, #236	@ (adr r3, 800e658 <__kernel_cos+0x150>)
 800e56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56e:	f7f1 fe8b 	bl	8000288 <__aeabi_dsub>
 800e572:	4622      	mov	r2, r4
 800e574:	462b      	mov	r3, r5
 800e576:	f7f2 f83f 	bl	80005f8 <__aeabi_dmul>
 800e57a:	a339      	add	r3, pc, #228	@ (adr r3, 800e660 <__kernel_cos+0x158>)
 800e57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e580:	f7f1 fe84 	bl	800028c <__adddf3>
 800e584:	4622      	mov	r2, r4
 800e586:	462b      	mov	r3, r5
 800e588:	f7f2 f836 	bl	80005f8 <__aeabi_dmul>
 800e58c:	a336      	add	r3, pc, #216	@ (adr r3, 800e668 <__kernel_cos+0x160>)
 800e58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e592:	f7f1 fe79 	bl	8000288 <__aeabi_dsub>
 800e596:	4622      	mov	r2, r4
 800e598:	462b      	mov	r3, r5
 800e59a:	f7f2 f82d 	bl	80005f8 <__aeabi_dmul>
 800e59e:	a334      	add	r3, pc, #208	@ (adr r3, 800e670 <__kernel_cos+0x168>)
 800e5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a4:	f7f1 fe72 	bl	800028c <__adddf3>
 800e5a8:	4622      	mov	r2, r4
 800e5aa:	462b      	mov	r3, r5
 800e5ac:	f7f2 f824 	bl	80005f8 <__aeabi_dmul>
 800e5b0:	4622      	mov	r2, r4
 800e5b2:	462b      	mov	r3, r5
 800e5b4:	f7f2 f820 	bl	80005f8 <__aeabi_dmul>
 800e5b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5bc:	4604      	mov	r4, r0
 800e5be:	460d      	mov	r5, r1
 800e5c0:	4630      	mov	r0, r6
 800e5c2:	4639      	mov	r1, r7
 800e5c4:	f7f2 f818 	bl	80005f8 <__aeabi_dmul>
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	4629      	mov	r1, r5
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	f7f1 fe5a 	bl	8000288 <__aeabi_dsub>
 800e5d4:	4b2b      	ldr	r3, [pc, #172]	@ (800e684 <__kernel_cos+0x17c>)
 800e5d6:	4598      	cmp	r8, r3
 800e5d8:	4606      	mov	r6, r0
 800e5da:	460f      	mov	r7, r1
 800e5dc:	d810      	bhi.n	800e600 <__kernel_cos+0xf8>
 800e5de:	4602      	mov	r2, r0
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	4650      	mov	r0, sl
 800e5e4:	4659      	mov	r1, fp
 800e5e6:	f7f1 fe4f 	bl	8000288 <__aeabi_dsub>
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	4926      	ldr	r1, [pc, #152]	@ (800e688 <__kernel_cos+0x180>)
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	2000      	movs	r0, #0
 800e5f2:	f7f1 fe49 	bl	8000288 <__aeabi_dsub>
 800e5f6:	ec41 0b10 	vmov	d0, r0, r1
 800e5fa:	b003      	add	sp, #12
 800e5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e600:	4b22      	ldr	r3, [pc, #136]	@ (800e68c <__kernel_cos+0x184>)
 800e602:	4921      	ldr	r1, [pc, #132]	@ (800e688 <__kernel_cos+0x180>)
 800e604:	4598      	cmp	r8, r3
 800e606:	bf8c      	ite	hi
 800e608:	4d21      	ldrhi	r5, [pc, #132]	@ (800e690 <__kernel_cos+0x188>)
 800e60a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800e60e:	2400      	movs	r4, #0
 800e610:	4622      	mov	r2, r4
 800e612:	462b      	mov	r3, r5
 800e614:	2000      	movs	r0, #0
 800e616:	f7f1 fe37 	bl	8000288 <__aeabi_dsub>
 800e61a:	4622      	mov	r2, r4
 800e61c:	4680      	mov	r8, r0
 800e61e:	4689      	mov	r9, r1
 800e620:	462b      	mov	r3, r5
 800e622:	4650      	mov	r0, sl
 800e624:	4659      	mov	r1, fp
 800e626:	f7f1 fe2f 	bl	8000288 <__aeabi_dsub>
 800e62a:	4632      	mov	r2, r6
 800e62c:	463b      	mov	r3, r7
 800e62e:	f7f1 fe2b 	bl	8000288 <__aeabi_dsub>
 800e632:	4602      	mov	r2, r0
 800e634:	460b      	mov	r3, r1
 800e636:	4640      	mov	r0, r8
 800e638:	4649      	mov	r1, r9
 800e63a:	e7da      	b.n	800e5f2 <__kernel_cos+0xea>
 800e63c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800e678 <__kernel_cos+0x170>
 800e640:	e7db      	b.n	800e5fa <__kernel_cos+0xf2>
 800e642:	bf00      	nop
 800e644:	f3af 8000 	nop.w
 800e648:	be8838d4 	.word	0xbe8838d4
 800e64c:	bda8fae9 	.word	0xbda8fae9
 800e650:	bdb4b1c4 	.word	0xbdb4b1c4
 800e654:	3e21ee9e 	.word	0x3e21ee9e
 800e658:	809c52ad 	.word	0x809c52ad
 800e65c:	3e927e4f 	.word	0x3e927e4f
 800e660:	19cb1590 	.word	0x19cb1590
 800e664:	3efa01a0 	.word	0x3efa01a0
 800e668:	16c15177 	.word	0x16c15177
 800e66c:	3f56c16c 	.word	0x3f56c16c
 800e670:	5555554c 	.word	0x5555554c
 800e674:	3fa55555 	.word	0x3fa55555
 800e678:	00000000 	.word	0x00000000
 800e67c:	3ff00000 	.word	0x3ff00000
 800e680:	3fe00000 	.word	0x3fe00000
 800e684:	3fd33332 	.word	0x3fd33332
 800e688:	3ff00000 	.word	0x3ff00000
 800e68c:	3fe90000 	.word	0x3fe90000
 800e690:	3fd20000 	.word	0x3fd20000
 800e694:	00000000 	.word	0x00000000

0800e698 <__kernel_sin>:
 800e698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e69c:	ec55 4b10 	vmov	r4, r5, d0
 800e6a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e6a4:	b085      	sub	sp, #20
 800e6a6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800e6aa:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e6ae:	4680      	mov	r8, r0
 800e6b0:	d205      	bcs.n	800e6be <__kernel_sin+0x26>
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	4629      	mov	r1, r5
 800e6b6:	f7f2 fa4f 	bl	8000b58 <__aeabi_d2iz>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d052      	beq.n	800e764 <__kernel_sin+0xcc>
 800e6be:	4622      	mov	r2, r4
 800e6c0:	462b      	mov	r3, r5
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	4629      	mov	r1, r5
 800e6c6:	f7f1 ff97 	bl	80005f8 <__aeabi_dmul>
 800e6ca:	4682      	mov	sl, r0
 800e6cc:	468b      	mov	fp, r1
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	4629      	mov	r1, r5
 800e6d6:	f7f1 ff8f 	bl	80005f8 <__aeabi_dmul>
 800e6da:	a342      	add	r3, pc, #264	@ (adr r3, 800e7e4 <__kernel_sin+0x14c>)
 800e6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e0:	e9cd 0100 	strd	r0, r1, [sp]
 800e6e4:	4650      	mov	r0, sl
 800e6e6:	4659      	mov	r1, fp
 800e6e8:	f7f1 ff86 	bl	80005f8 <__aeabi_dmul>
 800e6ec:	a33f      	add	r3, pc, #252	@ (adr r3, 800e7ec <__kernel_sin+0x154>)
 800e6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f2:	f7f1 fdc9 	bl	8000288 <__aeabi_dsub>
 800e6f6:	4652      	mov	r2, sl
 800e6f8:	465b      	mov	r3, fp
 800e6fa:	f7f1 ff7d 	bl	80005f8 <__aeabi_dmul>
 800e6fe:	a33d      	add	r3, pc, #244	@ (adr r3, 800e7f4 <__kernel_sin+0x15c>)
 800e700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e704:	f7f1 fdc2 	bl	800028c <__adddf3>
 800e708:	4652      	mov	r2, sl
 800e70a:	465b      	mov	r3, fp
 800e70c:	f7f1 ff74 	bl	80005f8 <__aeabi_dmul>
 800e710:	a33a      	add	r3, pc, #232	@ (adr r3, 800e7fc <__kernel_sin+0x164>)
 800e712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e716:	f7f1 fdb7 	bl	8000288 <__aeabi_dsub>
 800e71a:	4652      	mov	r2, sl
 800e71c:	465b      	mov	r3, fp
 800e71e:	f7f1 ff6b 	bl	80005f8 <__aeabi_dmul>
 800e722:	a338      	add	r3, pc, #224	@ (adr r3, 800e804 <__kernel_sin+0x16c>)
 800e724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e728:	f7f1 fdb0 	bl	800028c <__adddf3>
 800e72c:	4606      	mov	r6, r0
 800e72e:	460f      	mov	r7, r1
 800e730:	f1b8 0f00 	cmp.w	r8, #0
 800e734:	d11b      	bne.n	800e76e <__kernel_sin+0xd6>
 800e736:	4602      	mov	r2, r0
 800e738:	460b      	mov	r3, r1
 800e73a:	4650      	mov	r0, sl
 800e73c:	4659      	mov	r1, fp
 800e73e:	f7f1 ff5b 	bl	80005f8 <__aeabi_dmul>
 800e742:	a325      	add	r3, pc, #148	@ (adr r3, 800e7d8 <__kernel_sin+0x140>)
 800e744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e748:	f7f1 fd9e 	bl	8000288 <__aeabi_dsub>
 800e74c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e750:	f7f1 ff52 	bl	80005f8 <__aeabi_dmul>
 800e754:	4602      	mov	r2, r0
 800e756:	460b      	mov	r3, r1
 800e758:	4620      	mov	r0, r4
 800e75a:	4629      	mov	r1, r5
 800e75c:	f7f1 fd96 	bl	800028c <__adddf3>
 800e760:	4604      	mov	r4, r0
 800e762:	460d      	mov	r5, r1
 800e764:	ec45 4b10 	vmov	d0, r4, r5
 800e768:	b005      	add	sp, #20
 800e76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e76e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e772:	4b1b      	ldr	r3, [pc, #108]	@ (800e7e0 <__kernel_sin+0x148>)
 800e774:	2200      	movs	r2, #0
 800e776:	f7f1 ff3f 	bl	80005f8 <__aeabi_dmul>
 800e77a:	4632      	mov	r2, r6
 800e77c:	4680      	mov	r8, r0
 800e77e:	4689      	mov	r9, r1
 800e780:	463b      	mov	r3, r7
 800e782:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e786:	f7f1 ff37 	bl	80005f8 <__aeabi_dmul>
 800e78a:	4602      	mov	r2, r0
 800e78c:	460b      	mov	r3, r1
 800e78e:	4640      	mov	r0, r8
 800e790:	4649      	mov	r1, r9
 800e792:	f7f1 fd79 	bl	8000288 <__aeabi_dsub>
 800e796:	4652      	mov	r2, sl
 800e798:	465b      	mov	r3, fp
 800e79a:	f7f1 ff2d 	bl	80005f8 <__aeabi_dmul>
 800e79e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7a2:	f7f1 fd71 	bl	8000288 <__aeabi_dsub>
 800e7a6:	a30c      	add	r3, pc, #48	@ (adr r3, 800e7d8 <__kernel_sin+0x140>)
 800e7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ac:	4606      	mov	r6, r0
 800e7ae:	460f      	mov	r7, r1
 800e7b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7b4:	f7f1 ff20 	bl	80005f8 <__aeabi_dmul>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	4630      	mov	r0, r6
 800e7be:	4639      	mov	r1, r7
 800e7c0:	f7f1 fd64 	bl	800028c <__adddf3>
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	460b      	mov	r3, r1
 800e7c8:	4620      	mov	r0, r4
 800e7ca:	4629      	mov	r1, r5
 800e7cc:	f7f1 fd5c 	bl	8000288 <__aeabi_dsub>
 800e7d0:	e7c6      	b.n	800e760 <__kernel_sin+0xc8>
 800e7d2:	bf00      	nop
 800e7d4:	f3af 8000 	nop.w
 800e7d8:	55555549 	.word	0x55555549
 800e7dc:	3fc55555 	.word	0x3fc55555
 800e7e0:	3fe00000 	.word	0x3fe00000
 800e7e4:	5acfd57c 	.word	0x5acfd57c
 800e7e8:	3de5d93a 	.word	0x3de5d93a
 800e7ec:	8a2b9ceb 	.word	0x8a2b9ceb
 800e7f0:	3e5ae5e6 	.word	0x3e5ae5e6
 800e7f4:	57b1fe7d 	.word	0x57b1fe7d
 800e7f8:	3ec71de3 	.word	0x3ec71de3
 800e7fc:	19c161d5 	.word	0x19c161d5
 800e800:	3f2a01a0 	.word	0x3f2a01a0
 800e804:	1110f8a6 	.word	0x1110f8a6
 800e808:	3f811111 	.word	0x3f811111
 800e80c:	00000000 	.word	0x00000000

0800e810 <__kernel_tan>:
 800e810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e814:	ec5b ab10 	vmov	sl, fp, d0
 800e818:	4bdb      	ldr	r3, [pc, #876]	@ (800eb88 <__kernel_tan+0x378>)
 800e81a:	b089      	sub	sp, #36	@ 0x24
 800e81c:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 800e820:	429f      	cmp	r7, r3
 800e822:	ec59 8b11 	vmov	r8, r9, d1
 800e826:	4606      	mov	r6, r0
 800e828:	f8cd b008 	str.w	fp, [sp, #8]
 800e82c:	d85d      	bhi.n	800e8ea <__kernel_tan+0xda>
 800e82e:	4650      	mov	r0, sl
 800e830:	4659      	mov	r1, fp
 800e832:	f7f2 f991 	bl	8000b58 <__aeabi_d2iz>
 800e836:	4605      	mov	r5, r0
 800e838:	2800      	cmp	r0, #0
 800e83a:	d17c      	bne.n	800e936 <__kernel_tan+0x126>
 800e83c:	1c73      	adds	r3, r6, #1
 800e83e:	4652      	mov	r2, sl
 800e840:	4313      	orrs	r3, r2
 800e842:	433b      	orrs	r3, r7
 800e844:	d110      	bne.n	800e868 <__kernel_tan+0x58>
 800e846:	ec4b ab10 	vmov	d0, sl, fp
 800e84a:	f000 ff55 	bl	800f6f8 <fabs>
 800e84e:	49cf      	ldr	r1, [pc, #828]	@ (800eb8c <__kernel_tan+0x37c>)
 800e850:	ec53 2b10 	vmov	r2, r3, d0
 800e854:	2000      	movs	r0, #0
 800e856:	f7f1 fff9 	bl	800084c <__aeabi_ddiv>
 800e85a:	4682      	mov	sl, r0
 800e85c:	468b      	mov	fp, r1
 800e85e:	ec4b ab10 	vmov	d0, sl, fp
 800e862:	b009      	add	sp, #36	@ 0x24
 800e864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e868:	2e01      	cmp	r6, #1
 800e86a:	d0f8      	beq.n	800e85e <__kernel_tan+0x4e>
 800e86c:	4642      	mov	r2, r8
 800e86e:	464b      	mov	r3, r9
 800e870:	4650      	mov	r0, sl
 800e872:	4659      	mov	r1, fp
 800e874:	f7f1 fd0a 	bl	800028c <__adddf3>
 800e878:	4602      	mov	r2, r0
 800e87a:	460b      	mov	r3, r1
 800e87c:	460f      	mov	r7, r1
 800e87e:	2000      	movs	r0, #0
 800e880:	49c3      	ldr	r1, [pc, #780]	@ (800eb90 <__kernel_tan+0x380>)
 800e882:	f7f1 ffe3 	bl	800084c <__aeabi_ddiv>
 800e886:	e9cd 0100 	strd	r0, r1, [sp]
 800e88a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e88e:	462e      	mov	r6, r5
 800e890:	4652      	mov	r2, sl
 800e892:	462c      	mov	r4, r5
 800e894:	4630      	mov	r0, r6
 800e896:	461d      	mov	r5, r3
 800e898:	4639      	mov	r1, r7
 800e89a:	465b      	mov	r3, fp
 800e89c:	f7f1 fcf4 	bl	8000288 <__aeabi_dsub>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	460b      	mov	r3, r1
 800e8a4:	4640      	mov	r0, r8
 800e8a6:	4649      	mov	r1, r9
 800e8a8:	f7f1 fcee 	bl	8000288 <__aeabi_dsub>
 800e8ac:	4632      	mov	r2, r6
 800e8ae:	462b      	mov	r3, r5
 800e8b0:	f7f1 fea2 	bl	80005f8 <__aeabi_dmul>
 800e8b4:	4632      	mov	r2, r6
 800e8b6:	4682      	mov	sl, r0
 800e8b8:	468b      	mov	fp, r1
 800e8ba:	462b      	mov	r3, r5
 800e8bc:	4630      	mov	r0, r6
 800e8be:	4639      	mov	r1, r7
 800e8c0:	f7f1 fe9a 	bl	80005f8 <__aeabi_dmul>
 800e8c4:	4bb1      	ldr	r3, [pc, #708]	@ (800eb8c <__kernel_tan+0x37c>)
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f7f1 fce0 	bl	800028c <__adddf3>
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	4650      	mov	r0, sl
 800e8d2:	4659      	mov	r1, fp
 800e8d4:	f7f1 fcda 	bl	800028c <__adddf3>
 800e8d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8dc:	f7f1 fe8c 	bl	80005f8 <__aeabi_dmul>
 800e8e0:	4622      	mov	r2, r4
 800e8e2:	462b      	mov	r3, r5
 800e8e4:	f7f1 fcd2 	bl	800028c <__adddf3>
 800e8e8:	e7b7      	b.n	800e85a <__kernel_tan+0x4a>
 800e8ea:	4baa      	ldr	r3, [pc, #680]	@ (800eb94 <__kernel_tan+0x384>)
 800e8ec:	429f      	cmp	r7, r3
 800e8ee:	d922      	bls.n	800e936 <__kernel_tan+0x126>
 800e8f0:	9b02      	ldr	r3, [sp, #8]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	da05      	bge.n	800e902 <__kernel_tan+0xf2>
 800e8f6:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e8fa:	469b      	mov	fp, r3
 800e8fc:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800e900:	4699      	mov	r9, r3
 800e902:	4652      	mov	r2, sl
 800e904:	465b      	mov	r3, fp
 800e906:	a182      	add	r1, pc, #520	@ (adr r1, 800eb10 <__kernel_tan+0x300>)
 800e908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e90c:	f7f1 fcbc 	bl	8000288 <__aeabi_dsub>
 800e910:	4642      	mov	r2, r8
 800e912:	464b      	mov	r3, r9
 800e914:	4604      	mov	r4, r0
 800e916:	460d      	mov	r5, r1
 800e918:	a17f      	add	r1, pc, #508	@ (adr r1, 800eb18 <__kernel_tan+0x308>)
 800e91a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e91e:	f7f1 fcb3 	bl	8000288 <__aeabi_dsub>
 800e922:	4622      	mov	r2, r4
 800e924:	462b      	mov	r3, r5
 800e926:	f7f1 fcb1 	bl	800028c <__adddf3>
 800e92a:	f04f 0800 	mov.w	r8, #0
 800e92e:	4682      	mov	sl, r0
 800e930:	468b      	mov	fp, r1
 800e932:	f04f 0900 	mov.w	r9, #0
 800e936:	4652      	mov	r2, sl
 800e938:	465b      	mov	r3, fp
 800e93a:	4650      	mov	r0, sl
 800e93c:	4659      	mov	r1, fp
 800e93e:	f7f1 fe5b 	bl	80005f8 <__aeabi_dmul>
 800e942:	4602      	mov	r2, r0
 800e944:	460b      	mov	r3, r1
 800e946:	e9cd 2300 	strd	r2, r3, [sp]
 800e94a:	f7f1 fe55 	bl	80005f8 <__aeabi_dmul>
 800e94e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e952:	4604      	mov	r4, r0
 800e954:	460d      	mov	r5, r1
 800e956:	4650      	mov	r0, sl
 800e958:	4659      	mov	r1, fp
 800e95a:	f7f1 fe4d 	bl	80005f8 <__aeabi_dmul>
 800e95e:	a370      	add	r3, pc, #448	@ (adr r3, 800eb20 <__kernel_tan+0x310>)
 800e960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e964:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e968:	4620      	mov	r0, r4
 800e96a:	4629      	mov	r1, r5
 800e96c:	f7f1 fe44 	bl	80005f8 <__aeabi_dmul>
 800e970:	a36d      	add	r3, pc, #436	@ (adr r3, 800eb28 <__kernel_tan+0x318>)
 800e972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e976:	f7f1 fc89 	bl	800028c <__adddf3>
 800e97a:	4622      	mov	r2, r4
 800e97c:	462b      	mov	r3, r5
 800e97e:	f7f1 fe3b 	bl	80005f8 <__aeabi_dmul>
 800e982:	a36b      	add	r3, pc, #428	@ (adr r3, 800eb30 <__kernel_tan+0x320>)
 800e984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e988:	f7f1 fc80 	bl	800028c <__adddf3>
 800e98c:	4622      	mov	r2, r4
 800e98e:	462b      	mov	r3, r5
 800e990:	f7f1 fe32 	bl	80005f8 <__aeabi_dmul>
 800e994:	a368      	add	r3, pc, #416	@ (adr r3, 800eb38 <__kernel_tan+0x328>)
 800e996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99a:	f7f1 fc77 	bl	800028c <__adddf3>
 800e99e:	4622      	mov	r2, r4
 800e9a0:	462b      	mov	r3, r5
 800e9a2:	f7f1 fe29 	bl	80005f8 <__aeabi_dmul>
 800e9a6:	a366      	add	r3, pc, #408	@ (adr r3, 800eb40 <__kernel_tan+0x330>)
 800e9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ac:	f7f1 fc6e 	bl	800028c <__adddf3>
 800e9b0:	4622      	mov	r2, r4
 800e9b2:	462b      	mov	r3, r5
 800e9b4:	f7f1 fe20 	bl	80005f8 <__aeabi_dmul>
 800e9b8:	a363      	add	r3, pc, #396	@ (adr r3, 800eb48 <__kernel_tan+0x338>)
 800e9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9be:	f7f1 fc65 	bl	800028c <__adddf3>
 800e9c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9c6:	f7f1 fe17 	bl	80005f8 <__aeabi_dmul>
 800e9ca:	a361      	add	r3, pc, #388	@ (adr r3, 800eb50 <__kernel_tan+0x340>)
 800e9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	4629      	mov	r1, r5
 800e9d8:	f7f1 fe0e 	bl	80005f8 <__aeabi_dmul>
 800e9dc:	a35e      	add	r3, pc, #376	@ (adr r3, 800eb58 <__kernel_tan+0x348>)
 800e9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e2:	f7f1 fc53 	bl	800028c <__adddf3>
 800e9e6:	4622      	mov	r2, r4
 800e9e8:	462b      	mov	r3, r5
 800e9ea:	f7f1 fe05 	bl	80005f8 <__aeabi_dmul>
 800e9ee:	a35c      	add	r3, pc, #368	@ (adr r3, 800eb60 <__kernel_tan+0x350>)
 800e9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f4:	f7f1 fc4a 	bl	800028c <__adddf3>
 800e9f8:	4622      	mov	r2, r4
 800e9fa:	462b      	mov	r3, r5
 800e9fc:	f7f1 fdfc 	bl	80005f8 <__aeabi_dmul>
 800ea00:	a359      	add	r3, pc, #356	@ (adr r3, 800eb68 <__kernel_tan+0x358>)
 800ea02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea06:	f7f1 fc41 	bl	800028c <__adddf3>
 800ea0a:	4622      	mov	r2, r4
 800ea0c:	462b      	mov	r3, r5
 800ea0e:	f7f1 fdf3 	bl	80005f8 <__aeabi_dmul>
 800ea12:	a357      	add	r3, pc, #348	@ (adr r3, 800eb70 <__kernel_tan+0x360>)
 800ea14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea18:	f7f1 fc38 	bl	800028c <__adddf3>
 800ea1c:	4622      	mov	r2, r4
 800ea1e:	462b      	mov	r3, r5
 800ea20:	f7f1 fdea 	bl	80005f8 <__aeabi_dmul>
 800ea24:	a354      	add	r3, pc, #336	@ (adr r3, 800eb78 <__kernel_tan+0x368>)
 800ea26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2a:	f7f1 fc2f 	bl	800028c <__adddf3>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	460b      	mov	r3, r1
 800ea32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea36:	f7f1 fc29 	bl	800028c <__adddf3>
 800ea3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea3e:	f7f1 fddb 	bl	80005f8 <__aeabi_dmul>
 800ea42:	4642      	mov	r2, r8
 800ea44:	464b      	mov	r3, r9
 800ea46:	f7f1 fc21 	bl	800028c <__adddf3>
 800ea4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea4e:	f7f1 fdd3 	bl	80005f8 <__aeabi_dmul>
 800ea52:	4642      	mov	r2, r8
 800ea54:	464b      	mov	r3, r9
 800ea56:	f7f1 fc19 	bl	800028c <__adddf3>
 800ea5a:	a349      	add	r3, pc, #292	@ (adr r3, 800eb80 <__kernel_tan+0x370>)
 800ea5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea60:	4604      	mov	r4, r0
 800ea62:	460d      	mov	r5, r1
 800ea64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea68:	f7f1 fdc6 	bl	80005f8 <__aeabi_dmul>
 800ea6c:	4622      	mov	r2, r4
 800ea6e:	462b      	mov	r3, r5
 800ea70:	f7f1 fc0c 	bl	800028c <__adddf3>
 800ea74:	e9cd 0100 	strd	r0, r1, [sp]
 800ea78:	460b      	mov	r3, r1
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	4659      	mov	r1, fp
 800ea7e:	4650      	mov	r0, sl
 800ea80:	f7f1 fc04 	bl	800028c <__adddf3>
 800ea84:	4b43      	ldr	r3, [pc, #268]	@ (800eb94 <__kernel_tan+0x384>)
 800ea86:	429f      	cmp	r7, r3
 800ea88:	4604      	mov	r4, r0
 800ea8a:	460d      	mov	r5, r1
 800ea8c:	f240 8084 	bls.w	800eb98 <__kernel_tan+0x388>
 800ea90:	4630      	mov	r0, r6
 800ea92:	f7f1 fd47 	bl	8000524 <__aeabi_i2d>
 800ea96:	4622      	mov	r2, r4
 800ea98:	4680      	mov	r8, r0
 800ea9a:	4689      	mov	r9, r1
 800ea9c:	462b      	mov	r3, r5
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	4629      	mov	r1, r5
 800eaa2:	f7f1 fda9 	bl	80005f8 <__aeabi_dmul>
 800eaa6:	4642      	mov	r2, r8
 800eaa8:	4606      	mov	r6, r0
 800eaaa:	460f      	mov	r7, r1
 800eaac:	464b      	mov	r3, r9
 800eaae:	4620      	mov	r0, r4
 800eab0:	4629      	mov	r1, r5
 800eab2:	f7f1 fbeb 	bl	800028c <__adddf3>
 800eab6:	4602      	mov	r2, r0
 800eab8:	460b      	mov	r3, r1
 800eaba:	4630      	mov	r0, r6
 800eabc:	4639      	mov	r1, r7
 800eabe:	f7f1 fec5 	bl	800084c <__aeabi_ddiv>
 800eac2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eac6:	f7f1 fbdf 	bl	8000288 <__aeabi_dsub>
 800eaca:	4602      	mov	r2, r0
 800eacc:	460b      	mov	r3, r1
 800eace:	4650      	mov	r0, sl
 800ead0:	4659      	mov	r1, fp
 800ead2:	f7f1 fbd9 	bl	8000288 <__aeabi_dsub>
 800ead6:	4602      	mov	r2, r0
 800ead8:	460b      	mov	r3, r1
 800eada:	f7f1 fbd7 	bl	800028c <__adddf3>
 800eade:	4602      	mov	r2, r0
 800eae0:	460b      	mov	r3, r1
 800eae2:	4640      	mov	r0, r8
 800eae4:	4649      	mov	r1, r9
 800eae6:	f7f1 fbcf 	bl	8000288 <__aeabi_dsub>
 800eaea:	9b02      	ldr	r3, [sp, #8]
 800eaec:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800eaf0:	f00a 0a02 	and.w	sl, sl, #2
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	f1ca 0001 	rsb	r0, sl, #1
 800eafa:	460d      	mov	r5, r1
 800eafc:	f7f1 fd12 	bl	8000524 <__aeabi_i2d>
 800eb00:	4602      	mov	r2, r0
 800eb02:	460b      	mov	r3, r1
 800eb04:	4620      	mov	r0, r4
 800eb06:	4629      	mov	r1, r5
 800eb08:	f7f1 fd76 	bl	80005f8 <__aeabi_dmul>
 800eb0c:	e6a5      	b.n	800e85a <__kernel_tan+0x4a>
 800eb0e:	bf00      	nop
 800eb10:	54442d18 	.word	0x54442d18
 800eb14:	3fe921fb 	.word	0x3fe921fb
 800eb18:	33145c07 	.word	0x33145c07
 800eb1c:	3c81a626 	.word	0x3c81a626
 800eb20:	74bf7ad4 	.word	0x74bf7ad4
 800eb24:	3efb2a70 	.word	0x3efb2a70
 800eb28:	32f0a7e9 	.word	0x32f0a7e9
 800eb2c:	3f12b80f 	.word	0x3f12b80f
 800eb30:	1a8d1068 	.word	0x1a8d1068
 800eb34:	3f3026f7 	.word	0x3f3026f7
 800eb38:	fee08315 	.word	0xfee08315
 800eb3c:	3f57dbc8 	.word	0x3f57dbc8
 800eb40:	e96e8493 	.word	0xe96e8493
 800eb44:	3f8226e3 	.word	0x3f8226e3
 800eb48:	1bb341fe 	.word	0x1bb341fe
 800eb4c:	3faba1ba 	.word	0x3faba1ba
 800eb50:	db605373 	.word	0xdb605373
 800eb54:	bef375cb 	.word	0xbef375cb
 800eb58:	a03792a6 	.word	0xa03792a6
 800eb5c:	3f147e88 	.word	0x3f147e88
 800eb60:	f2f26501 	.word	0xf2f26501
 800eb64:	3f4344d8 	.word	0x3f4344d8
 800eb68:	c9560328 	.word	0xc9560328
 800eb6c:	3f6d6d22 	.word	0x3f6d6d22
 800eb70:	8406d637 	.word	0x8406d637
 800eb74:	3f9664f4 	.word	0x3f9664f4
 800eb78:	1110fe7a 	.word	0x1110fe7a
 800eb7c:	3fc11111 	.word	0x3fc11111
 800eb80:	55555563 	.word	0x55555563
 800eb84:	3fd55555 	.word	0x3fd55555
 800eb88:	3e2fffff 	.word	0x3e2fffff
 800eb8c:	3ff00000 	.word	0x3ff00000
 800eb90:	bff00000 	.word	0xbff00000
 800eb94:	3fe59427 	.word	0x3fe59427
 800eb98:	2e01      	cmp	r6, #1
 800eb9a:	d033      	beq.n	800ec04 <__kernel_tan+0x3f4>
 800eb9c:	f04f 0800 	mov.w	r8, #0
 800eba0:	4689      	mov	r9, r1
 800eba2:	4602      	mov	r2, r0
 800eba4:	460b      	mov	r3, r1
 800eba6:	2000      	movs	r0, #0
 800eba8:	4918      	ldr	r1, [pc, #96]	@ (800ec0c <__kernel_tan+0x3fc>)
 800ebaa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ebae:	f7f1 fe4d 	bl	800084c <__aeabi_ddiv>
 800ebb2:	4652      	mov	r2, sl
 800ebb4:	460f      	mov	r7, r1
 800ebb6:	465b      	mov	r3, fp
 800ebb8:	4606      	mov	r6, r0
 800ebba:	460d      	mov	r5, r1
 800ebbc:	4640      	mov	r0, r8
 800ebbe:	4649      	mov	r1, r9
 800ebc0:	f7f1 fb62 	bl	8000288 <__aeabi_dsub>
 800ebc4:	4602      	mov	r2, r0
 800ebc6:	460b      	mov	r3, r1
 800ebc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebcc:	f7f1 fb5c 	bl	8000288 <__aeabi_dsub>
 800ebd0:	4642      	mov	r2, r8
 800ebd2:	463b      	mov	r3, r7
 800ebd4:	f7f1 fd10 	bl	80005f8 <__aeabi_dmul>
 800ebd8:	4642      	mov	r2, r8
 800ebda:	4682      	mov	sl, r0
 800ebdc:	468b      	mov	fp, r1
 800ebde:	463b      	mov	r3, r7
 800ebe0:	4640      	mov	r0, r8
 800ebe2:	4649      	mov	r1, r9
 800ebe4:	f7f1 fd08 	bl	80005f8 <__aeabi_dmul>
 800ebe8:	4b09      	ldr	r3, [pc, #36]	@ (800ec10 <__kernel_tan+0x400>)
 800ebea:	2200      	movs	r2, #0
 800ebec:	f7f1 fb4e 	bl	800028c <__adddf3>
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	4650      	mov	r0, sl
 800ebf6:	4659      	mov	r1, fp
 800ebf8:	f7f1 fb48 	bl	800028c <__adddf3>
 800ebfc:	4644      	mov	r4, r8
 800ebfe:	4632      	mov	r2, r6
 800ec00:	463b      	mov	r3, r7
 800ec02:	e66b      	b.n	800e8dc <__kernel_tan+0xcc>
 800ec04:	4682      	mov	sl, r0
 800ec06:	468b      	mov	fp, r1
 800ec08:	e629      	b.n	800e85e <__kernel_tan+0x4e>
 800ec0a:	bf00      	nop
 800ec0c:	bff00000 	.word	0xbff00000
 800ec10:	3ff00000 	.word	0x3ff00000
 800ec14:	00000000 	.word	0x00000000

0800ec18 <__ieee754_atan2>:
 800ec18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec1c:	ec57 6b11 	vmov	r6, r7, d1
 800ec20:	4273      	negs	r3, r6
 800ec22:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800eda0 <__ieee754_atan2+0x188>
 800ec26:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800ec2a:	4333      	orrs	r3, r6
 800ec2c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ec30:	4543      	cmp	r3, r8
 800ec32:	ec51 0b10 	vmov	r0, r1, d0
 800ec36:	4635      	mov	r5, r6
 800ec38:	d809      	bhi.n	800ec4e <__ieee754_atan2+0x36>
 800ec3a:	4244      	negs	r4, r0
 800ec3c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ec40:	4304      	orrs	r4, r0
 800ec42:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ec46:	4544      	cmp	r4, r8
 800ec48:	468e      	mov	lr, r1
 800ec4a:	4681      	mov	r9, r0
 800ec4c:	d907      	bls.n	800ec5e <__ieee754_atan2+0x46>
 800ec4e:	4632      	mov	r2, r6
 800ec50:	463b      	mov	r3, r7
 800ec52:	f7f1 fb1b 	bl	800028c <__adddf3>
 800ec56:	ec41 0b10 	vmov	d0, r0, r1
 800ec5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec5e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800ec62:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800ec66:	4334      	orrs	r4, r6
 800ec68:	d103      	bne.n	800ec72 <__ieee754_atan2+0x5a>
 800ec6a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec6e:	f000 bbab 	b.w	800f3c8 <atan>
 800ec72:	17bc      	asrs	r4, r7, #30
 800ec74:	f004 0402 	and.w	r4, r4, #2
 800ec78:	ea53 0909 	orrs.w	r9, r3, r9
 800ec7c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ec80:	d107      	bne.n	800ec92 <__ieee754_atan2+0x7a>
 800ec82:	2c02      	cmp	r4, #2
 800ec84:	d05f      	beq.n	800ed46 <__ieee754_atan2+0x12e>
 800ec86:	2c03      	cmp	r4, #3
 800ec88:	d1e5      	bne.n	800ec56 <__ieee754_atan2+0x3e>
 800ec8a:	a141      	add	r1, pc, #260	@ (adr r1, 800ed90 <__ieee754_atan2+0x178>)
 800ec8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec90:	e7e1      	b.n	800ec56 <__ieee754_atan2+0x3e>
 800ec92:	4315      	orrs	r5, r2
 800ec94:	d106      	bne.n	800eca4 <__ieee754_atan2+0x8c>
 800ec96:	f1be 0f00 	cmp.w	lr, #0
 800ec9a:	da5f      	bge.n	800ed5c <__ieee754_atan2+0x144>
 800ec9c:	a13e      	add	r1, pc, #248	@ (adr r1, 800ed98 <__ieee754_atan2+0x180>)
 800ec9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eca2:	e7d8      	b.n	800ec56 <__ieee754_atan2+0x3e>
 800eca4:	4542      	cmp	r2, r8
 800eca6:	d10f      	bne.n	800ecc8 <__ieee754_atan2+0xb0>
 800eca8:	4293      	cmp	r3, r2
 800ecaa:	f104 34ff 	add.w	r4, r4, #4294967295
 800ecae:	d107      	bne.n	800ecc0 <__ieee754_atan2+0xa8>
 800ecb0:	2c02      	cmp	r4, #2
 800ecb2:	d84c      	bhi.n	800ed4e <__ieee754_atan2+0x136>
 800ecb4:	4b34      	ldr	r3, [pc, #208]	@ (800ed88 <__ieee754_atan2+0x170>)
 800ecb6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ecba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ecbe:	e7ca      	b.n	800ec56 <__ieee754_atan2+0x3e>
 800ecc0:	2c02      	cmp	r4, #2
 800ecc2:	d848      	bhi.n	800ed56 <__ieee754_atan2+0x13e>
 800ecc4:	4b31      	ldr	r3, [pc, #196]	@ (800ed8c <__ieee754_atan2+0x174>)
 800ecc6:	e7f6      	b.n	800ecb6 <__ieee754_atan2+0x9e>
 800ecc8:	4543      	cmp	r3, r8
 800ecca:	d0e4      	beq.n	800ec96 <__ieee754_atan2+0x7e>
 800eccc:	1a9b      	subs	r3, r3, r2
 800ecce:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800ecd2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ecd6:	da1e      	bge.n	800ed16 <__ieee754_atan2+0xfe>
 800ecd8:	2f00      	cmp	r7, #0
 800ecda:	da01      	bge.n	800ece0 <__ieee754_atan2+0xc8>
 800ecdc:	323c      	adds	r2, #60	@ 0x3c
 800ecde:	db1e      	blt.n	800ed1e <__ieee754_atan2+0x106>
 800ece0:	4632      	mov	r2, r6
 800ece2:	463b      	mov	r3, r7
 800ece4:	f7f1 fdb2 	bl	800084c <__aeabi_ddiv>
 800ece8:	ec41 0b10 	vmov	d0, r0, r1
 800ecec:	f000 fd04 	bl	800f6f8 <fabs>
 800ecf0:	f000 fb6a 	bl	800f3c8 <atan>
 800ecf4:	ec51 0b10 	vmov	r0, r1, d0
 800ecf8:	2c01      	cmp	r4, #1
 800ecfa:	d013      	beq.n	800ed24 <__ieee754_atan2+0x10c>
 800ecfc:	2c02      	cmp	r4, #2
 800ecfe:	d015      	beq.n	800ed2c <__ieee754_atan2+0x114>
 800ed00:	2c00      	cmp	r4, #0
 800ed02:	d0a8      	beq.n	800ec56 <__ieee754_atan2+0x3e>
 800ed04:	a318      	add	r3, pc, #96	@ (adr r3, 800ed68 <__ieee754_atan2+0x150>)
 800ed06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0a:	f7f1 fabd 	bl	8000288 <__aeabi_dsub>
 800ed0e:	a318      	add	r3, pc, #96	@ (adr r3, 800ed70 <__ieee754_atan2+0x158>)
 800ed10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed14:	e014      	b.n	800ed40 <__ieee754_atan2+0x128>
 800ed16:	a118      	add	r1, pc, #96	@ (adr r1, 800ed78 <__ieee754_atan2+0x160>)
 800ed18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed1c:	e7ec      	b.n	800ecf8 <__ieee754_atan2+0xe0>
 800ed1e:	2000      	movs	r0, #0
 800ed20:	2100      	movs	r1, #0
 800ed22:	e7e9      	b.n	800ecf8 <__ieee754_atan2+0xe0>
 800ed24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ed28:	4619      	mov	r1, r3
 800ed2a:	e794      	b.n	800ec56 <__ieee754_atan2+0x3e>
 800ed2c:	a30e      	add	r3, pc, #56	@ (adr r3, 800ed68 <__ieee754_atan2+0x150>)
 800ed2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed32:	f7f1 faa9 	bl	8000288 <__aeabi_dsub>
 800ed36:	4602      	mov	r2, r0
 800ed38:	460b      	mov	r3, r1
 800ed3a:	a10d      	add	r1, pc, #52	@ (adr r1, 800ed70 <__ieee754_atan2+0x158>)
 800ed3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed40:	f7f1 faa2 	bl	8000288 <__aeabi_dsub>
 800ed44:	e787      	b.n	800ec56 <__ieee754_atan2+0x3e>
 800ed46:	a10a      	add	r1, pc, #40	@ (adr r1, 800ed70 <__ieee754_atan2+0x158>)
 800ed48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed4c:	e783      	b.n	800ec56 <__ieee754_atan2+0x3e>
 800ed4e:	a10c      	add	r1, pc, #48	@ (adr r1, 800ed80 <__ieee754_atan2+0x168>)
 800ed50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed54:	e77f      	b.n	800ec56 <__ieee754_atan2+0x3e>
 800ed56:	2000      	movs	r0, #0
 800ed58:	2100      	movs	r1, #0
 800ed5a:	e77c      	b.n	800ec56 <__ieee754_atan2+0x3e>
 800ed5c:	a106      	add	r1, pc, #24	@ (adr r1, 800ed78 <__ieee754_atan2+0x160>)
 800ed5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed62:	e778      	b.n	800ec56 <__ieee754_atan2+0x3e>
 800ed64:	f3af 8000 	nop.w
 800ed68:	33145c07 	.word	0x33145c07
 800ed6c:	3ca1a626 	.word	0x3ca1a626
 800ed70:	54442d18 	.word	0x54442d18
 800ed74:	400921fb 	.word	0x400921fb
 800ed78:	54442d18 	.word	0x54442d18
 800ed7c:	3ff921fb 	.word	0x3ff921fb
 800ed80:	54442d18 	.word	0x54442d18
 800ed84:	3fe921fb 	.word	0x3fe921fb
 800ed88:	080107d0 	.word	0x080107d0
 800ed8c:	080107b8 	.word	0x080107b8
 800ed90:	54442d18 	.word	0x54442d18
 800ed94:	c00921fb 	.word	0xc00921fb
 800ed98:	54442d18 	.word	0x54442d18
 800ed9c:	bff921fb 	.word	0xbff921fb
 800eda0:	7ff00000 	.word	0x7ff00000

0800eda4 <__ieee754_hypot>:
 800eda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda8:	ec51 0b10 	vmov	r0, r1, d0
 800edac:	ec53 2b11 	vmov	r2, r3, d1
 800edb0:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800edb4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800edb8:	42a5      	cmp	r5, r4
 800edba:	b087      	sub	sp, #28
 800edbc:	da05      	bge.n	800edca <__ieee754_hypot+0x26>
 800edbe:	462e      	mov	r6, r5
 800edc0:	4625      	mov	r5, r4
 800edc2:	4634      	mov	r4, r6
 800edc4:	4606      	mov	r6, r0
 800edc6:	4610      	mov	r0, r2
 800edc8:	4632      	mov	r2, r6
 800edca:	1b2b      	subs	r3, r5, r4
 800edcc:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800edd0:	4629      	mov	r1, r5
 800edd2:	4682      	mov	sl, r0
 800edd4:	46ab      	mov	fp, r5
 800edd6:	4616      	mov	r6, r2
 800edd8:	4627      	mov	r7, r4
 800edda:	dd05      	ble.n	800ede8 <__ieee754_hypot+0x44>
 800eddc:	4623      	mov	r3, r4
 800edde:	f7f1 fa55 	bl	800028c <__adddf3>
 800ede2:	4682      	mov	sl, r0
 800ede4:	468b      	mov	fp, r1
 800ede6:	e016      	b.n	800ee16 <__ieee754_hypot+0x72>
 800ede8:	4b75      	ldr	r3, [pc, #468]	@ (800efc0 <__ieee754_hypot+0x21c>)
 800edea:	429d      	cmp	r5, r3
 800edec:	f340 8096 	ble.w	800ef1c <__ieee754_hypot+0x178>
 800edf0:	4b74      	ldr	r3, [pc, #464]	@ (800efc4 <__ieee754_hypot+0x220>)
 800edf2:	429d      	cmp	r5, r3
 800edf4:	dd14      	ble.n	800ee20 <__ieee754_hypot+0x7c>
 800edf6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800edfa:	4305      	orrs	r5, r0
 800edfc:	d004      	beq.n	800ee08 <__ieee754_hypot+0x64>
 800edfe:	4623      	mov	r3, r4
 800ee00:	f7f1 fa44 	bl	800028c <__adddf3>
 800ee04:	4682      	mov	sl, r0
 800ee06:	468b      	mov	fp, r1
 800ee08:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800ee0c:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800ee10:	4334      	orrs	r4, r6
 800ee12:	f000 80d2 	beq.w	800efba <__ieee754_hypot+0x216>
 800ee16:	ec4b ab10 	vmov	d0, sl, fp
 800ee1a:	b007      	add	sp, #28
 800ee1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee20:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800ee24:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800ee28:	46ab      	mov	fp, r5
 800ee2a:	4627      	mov	r7, r4
 800ee2c:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800ee30:	9301      	str	r3, [sp, #4]
 800ee32:	4b65      	ldr	r3, [pc, #404]	@ (800efc8 <__ieee754_hypot+0x224>)
 800ee34:	429c      	cmp	r4, r3
 800ee36:	dc19      	bgt.n	800ee6c <__ieee754_hypot+0xc8>
 800ee38:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800ee3c:	da70      	bge.n	800ef20 <__ieee754_hypot+0x17c>
 800ee3e:	4633      	mov	r3, r6
 800ee40:	4323      	orrs	r3, r4
 800ee42:	d0e8      	beq.n	800ee16 <__ieee754_hypot+0x72>
 800ee44:	4b61      	ldr	r3, [pc, #388]	@ (800efcc <__ieee754_hypot+0x228>)
 800ee46:	2200      	movs	r2, #0
 800ee48:	4630      	mov	r0, r6
 800ee4a:	4639      	mov	r1, r7
 800ee4c:	f7f1 fbd4 	bl	80005f8 <__aeabi_dmul>
 800ee50:	4b5e      	ldr	r3, [pc, #376]	@ (800efcc <__ieee754_hypot+0x228>)
 800ee52:	4606      	mov	r6, r0
 800ee54:	460f      	mov	r7, r1
 800ee56:	4650      	mov	r0, sl
 800ee58:	4659      	mov	r1, fp
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f7f1 fbcc 	bl	80005f8 <__aeabi_dmul>
 800ee60:	9b01      	ldr	r3, [sp, #4]
 800ee62:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800ee66:	4682      	mov	sl, r0
 800ee68:	468b      	mov	fp, r1
 800ee6a:	9301      	str	r3, [sp, #4]
 800ee6c:	4632      	mov	r2, r6
 800ee6e:	463b      	mov	r3, r7
 800ee70:	4650      	mov	r0, sl
 800ee72:	4659      	mov	r1, fp
 800ee74:	f7f1 fa08 	bl	8000288 <__aeabi_dsub>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	460b      	mov	r3, r1
 800ee7c:	4680      	mov	r8, r0
 800ee7e:	4689      	mov	r9, r1
 800ee80:	4630      	mov	r0, r6
 800ee82:	4639      	mov	r1, r7
 800ee84:	f7f1 fe2a 	bl	8000adc <__aeabi_dcmplt>
 800ee88:	2200      	movs	r2, #0
 800ee8a:	2800      	cmp	r0, #0
 800ee8c:	d053      	beq.n	800ef36 <__ieee754_hypot+0x192>
 800ee8e:	462b      	mov	r3, r5
 800ee90:	4610      	mov	r0, r2
 800ee92:	4629      	mov	r1, r5
 800ee94:	4614      	mov	r4, r2
 800ee96:	f7f1 fbaf 	bl	80005f8 <__aeabi_dmul>
 800ee9a:	4632      	mov	r2, r6
 800ee9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eea0:	463b      	mov	r3, r7
 800eea2:	4630      	mov	r0, r6
 800eea4:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800eea8:	f7f1 fba6 	bl	80005f8 <__aeabi_dmul>
 800eeac:	4622      	mov	r2, r4
 800eeae:	4606      	mov	r6, r0
 800eeb0:	460f      	mov	r7, r1
 800eeb2:	462b      	mov	r3, r5
 800eeb4:	4650      	mov	r0, sl
 800eeb6:	4659      	mov	r1, fp
 800eeb8:	f7f1 f9e8 	bl	800028c <__adddf3>
 800eebc:	4622      	mov	r2, r4
 800eebe:	4680      	mov	r8, r0
 800eec0:	4689      	mov	r9, r1
 800eec2:	462b      	mov	r3, r5
 800eec4:	4650      	mov	r0, sl
 800eec6:	4659      	mov	r1, fp
 800eec8:	f7f1 f9de 	bl	8000288 <__aeabi_dsub>
 800eecc:	4602      	mov	r2, r0
 800eece:	460b      	mov	r3, r1
 800eed0:	4640      	mov	r0, r8
 800eed2:	4649      	mov	r1, r9
 800eed4:	f7f1 fb90 	bl	80005f8 <__aeabi_dmul>
 800eed8:	4602      	mov	r2, r0
 800eeda:	460b      	mov	r3, r1
 800eedc:	4630      	mov	r0, r6
 800eede:	4639      	mov	r1, r7
 800eee0:	f7f1 f9d2 	bl	8000288 <__aeabi_dsub>
 800eee4:	4602      	mov	r2, r0
 800eee6:	460b      	mov	r3, r1
 800eee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eeec:	f7f1 f9cc 	bl	8000288 <__aeabi_dsub>
 800eef0:	ec41 0b10 	vmov	d0, r0, r1
 800eef4:	f000 fc08 	bl	800f708 <__ieee754_sqrt>
 800eef8:	9b01      	ldr	r3, [sp, #4]
 800eefa:	ec5b ab10 	vmov	sl, fp, d0
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d089      	beq.n	800ee16 <__ieee754_hypot+0x72>
 800ef02:	051b      	lsls	r3, r3, #20
 800ef04:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800ef08:	2000      	movs	r0, #0
 800ef0a:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800ef0e:	4602      	mov	r2, r0
 800ef10:	460b      	mov	r3, r1
 800ef12:	4650      	mov	r0, sl
 800ef14:	4659      	mov	r1, fp
 800ef16:	f7f1 fb6f 	bl	80005f8 <__aeabi_dmul>
 800ef1a:	e762      	b.n	800ede2 <__ieee754_hypot+0x3e>
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	e787      	b.n	800ee30 <__ieee754_hypot+0x8c>
 800ef20:	9b01      	ldr	r3, [sp, #4]
 800ef22:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800ef26:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800ef2a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800ef2e:	9301      	str	r3, [sp, #4]
 800ef30:	46ab      	mov	fp, r5
 800ef32:	4627      	mov	r7, r4
 800ef34:	e79a      	b.n	800ee6c <__ieee754_hypot+0xc8>
 800ef36:	4623      	mov	r3, r4
 800ef38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ef3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef40:	2200      	movs	r2, #0
 800ef42:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800ef46:	4614      	mov	r4, r2
 800ef48:	461d      	mov	r5, r3
 800ef4a:	f7f1 fb55 	bl	80005f8 <__aeabi_dmul>
 800ef4e:	4642      	mov	r2, r8
 800ef50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef54:	464b      	mov	r3, r9
 800ef56:	4640      	mov	r0, r8
 800ef58:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800ef5c:	f7f1 fb4c 	bl	80005f8 <__aeabi_dmul>
 800ef60:	4652      	mov	r2, sl
 800ef62:	465b      	mov	r3, fp
 800ef64:	4680      	mov	r8, r0
 800ef66:	4689      	mov	r9, r1
 800ef68:	4650      	mov	r0, sl
 800ef6a:	4659      	mov	r1, fp
 800ef6c:	f7f1 f98e 	bl	800028c <__adddf3>
 800ef70:	4622      	mov	r2, r4
 800ef72:	462b      	mov	r3, r5
 800ef74:	f7f1 f988 	bl	8000288 <__aeabi_dsub>
 800ef78:	4632      	mov	r2, r6
 800ef7a:	463b      	mov	r3, r7
 800ef7c:	f7f1 fb3c 	bl	80005f8 <__aeabi_dmul>
 800ef80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef84:	4682      	mov	sl, r0
 800ef86:	468b      	mov	fp, r1
 800ef88:	4630      	mov	r0, r6
 800ef8a:	4639      	mov	r1, r7
 800ef8c:	f7f1 f97c 	bl	8000288 <__aeabi_dsub>
 800ef90:	4622      	mov	r2, r4
 800ef92:	462b      	mov	r3, r5
 800ef94:	f7f1 fb30 	bl	80005f8 <__aeabi_dmul>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	460b      	mov	r3, r1
 800ef9c:	4650      	mov	r0, sl
 800ef9e:	4659      	mov	r1, fp
 800efa0:	f7f1 f974 	bl	800028c <__adddf3>
 800efa4:	4602      	mov	r2, r0
 800efa6:	460b      	mov	r3, r1
 800efa8:	4640      	mov	r0, r8
 800efaa:	4649      	mov	r1, r9
 800efac:	f7f1 f96c 	bl	8000288 <__aeabi_dsub>
 800efb0:	4602      	mov	r2, r0
 800efb2:	460b      	mov	r3, r1
 800efb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efb8:	e798      	b.n	800eeec <__ieee754_hypot+0x148>
 800efba:	46b2      	mov	sl, r6
 800efbc:	46bb      	mov	fp, r7
 800efbe:	e72a      	b.n	800ee16 <__ieee754_hypot+0x72>
 800efc0:	5f300000 	.word	0x5f300000
 800efc4:	7fefffff 	.word	0x7fefffff
 800efc8:	20afffff 	.word	0x20afffff
 800efcc:	7fd00000 	.word	0x7fd00000

0800efd0 <__ieee754_rem_pio2>:
 800efd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd4:	ec57 6b10 	vmov	r6, r7, d0
 800efd8:	4bc5      	ldr	r3, [pc, #788]	@ (800f2f0 <__ieee754_rem_pio2+0x320>)
 800efda:	b08d      	sub	sp, #52	@ 0x34
 800efdc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800efe0:	4598      	cmp	r8, r3
 800efe2:	4604      	mov	r4, r0
 800efe4:	9704      	str	r7, [sp, #16]
 800efe6:	d807      	bhi.n	800eff8 <__ieee754_rem_pio2+0x28>
 800efe8:	2200      	movs	r2, #0
 800efea:	2300      	movs	r3, #0
 800efec:	ed80 0b00 	vstr	d0, [r0]
 800eff0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eff4:	2500      	movs	r5, #0
 800eff6:	e028      	b.n	800f04a <__ieee754_rem_pio2+0x7a>
 800eff8:	4bbe      	ldr	r3, [pc, #760]	@ (800f2f4 <__ieee754_rem_pio2+0x324>)
 800effa:	4598      	cmp	r8, r3
 800effc:	d878      	bhi.n	800f0f0 <__ieee754_rem_pio2+0x120>
 800effe:	9b04      	ldr	r3, [sp, #16]
 800f000:	4dbd      	ldr	r5, [pc, #756]	@ (800f2f8 <__ieee754_rem_pio2+0x328>)
 800f002:	2b00      	cmp	r3, #0
 800f004:	4630      	mov	r0, r6
 800f006:	a3ac      	add	r3, pc, #688	@ (adr r3, 800f2b8 <__ieee754_rem_pio2+0x2e8>)
 800f008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00c:	4639      	mov	r1, r7
 800f00e:	dd38      	ble.n	800f082 <__ieee754_rem_pio2+0xb2>
 800f010:	f7f1 f93a 	bl	8000288 <__aeabi_dsub>
 800f014:	45a8      	cmp	r8, r5
 800f016:	4606      	mov	r6, r0
 800f018:	460f      	mov	r7, r1
 800f01a:	d01a      	beq.n	800f052 <__ieee754_rem_pio2+0x82>
 800f01c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800f2c0 <__ieee754_rem_pio2+0x2f0>)
 800f01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f022:	f7f1 f931 	bl	8000288 <__aeabi_dsub>
 800f026:	4602      	mov	r2, r0
 800f028:	460b      	mov	r3, r1
 800f02a:	4680      	mov	r8, r0
 800f02c:	4689      	mov	r9, r1
 800f02e:	4630      	mov	r0, r6
 800f030:	4639      	mov	r1, r7
 800f032:	f7f1 f929 	bl	8000288 <__aeabi_dsub>
 800f036:	a3a2      	add	r3, pc, #648	@ (adr r3, 800f2c0 <__ieee754_rem_pio2+0x2f0>)
 800f038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03c:	f7f1 f924 	bl	8000288 <__aeabi_dsub>
 800f040:	e9c4 8900 	strd	r8, r9, [r4]
 800f044:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f048:	2501      	movs	r5, #1
 800f04a:	4628      	mov	r0, r5
 800f04c:	b00d      	add	sp, #52	@ 0x34
 800f04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f052:	a39d      	add	r3, pc, #628	@ (adr r3, 800f2c8 <__ieee754_rem_pio2+0x2f8>)
 800f054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f058:	f7f1 f916 	bl	8000288 <__aeabi_dsub>
 800f05c:	a39c      	add	r3, pc, #624	@ (adr r3, 800f2d0 <__ieee754_rem_pio2+0x300>)
 800f05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f062:	4606      	mov	r6, r0
 800f064:	460f      	mov	r7, r1
 800f066:	f7f1 f90f 	bl	8000288 <__aeabi_dsub>
 800f06a:	4602      	mov	r2, r0
 800f06c:	460b      	mov	r3, r1
 800f06e:	4680      	mov	r8, r0
 800f070:	4689      	mov	r9, r1
 800f072:	4630      	mov	r0, r6
 800f074:	4639      	mov	r1, r7
 800f076:	f7f1 f907 	bl	8000288 <__aeabi_dsub>
 800f07a:	a395      	add	r3, pc, #596	@ (adr r3, 800f2d0 <__ieee754_rem_pio2+0x300>)
 800f07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f080:	e7dc      	b.n	800f03c <__ieee754_rem_pio2+0x6c>
 800f082:	f7f1 f903 	bl	800028c <__adddf3>
 800f086:	45a8      	cmp	r8, r5
 800f088:	4606      	mov	r6, r0
 800f08a:	460f      	mov	r7, r1
 800f08c:	d018      	beq.n	800f0c0 <__ieee754_rem_pio2+0xf0>
 800f08e:	a38c      	add	r3, pc, #560	@ (adr r3, 800f2c0 <__ieee754_rem_pio2+0x2f0>)
 800f090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f094:	f7f1 f8fa 	bl	800028c <__adddf3>
 800f098:	4602      	mov	r2, r0
 800f09a:	460b      	mov	r3, r1
 800f09c:	4680      	mov	r8, r0
 800f09e:	4689      	mov	r9, r1
 800f0a0:	4630      	mov	r0, r6
 800f0a2:	4639      	mov	r1, r7
 800f0a4:	f7f1 f8f0 	bl	8000288 <__aeabi_dsub>
 800f0a8:	a385      	add	r3, pc, #532	@ (adr r3, 800f2c0 <__ieee754_rem_pio2+0x2f0>)
 800f0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ae:	f7f1 f8ed 	bl	800028c <__adddf3>
 800f0b2:	f04f 35ff 	mov.w	r5, #4294967295
 800f0b6:	e9c4 8900 	strd	r8, r9, [r4]
 800f0ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f0be:	e7c4      	b.n	800f04a <__ieee754_rem_pio2+0x7a>
 800f0c0:	a381      	add	r3, pc, #516	@ (adr r3, 800f2c8 <__ieee754_rem_pio2+0x2f8>)
 800f0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c6:	f7f1 f8e1 	bl	800028c <__adddf3>
 800f0ca:	a381      	add	r3, pc, #516	@ (adr r3, 800f2d0 <__ieee754_rem_pio2+0x300>)
 800f0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d0:	4606      	mov	r6, r0
 800f0d2:	460f      	mov	r7, r1
 800f0d4:	f7f1 f8da 	bl	800028c <__adddf3>
 800f0d8:	4602      	mov	r2, r0
 800f0da:	460b      	mov	r3, r1
 800f0dc:	4680      	mov	r8, r0
 800f0de:	4689      	mov	r9, r1
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	4639      	mov	r1, r7
 800f0e4:	f7f1 f8d0 	bl	8000288 <__aeabi_dsub>
 800f0e8:	a379      	add	r3, pc, #484	@ (adr r3, 800f2d0 <__ieee754_rem_pio2+0x300>)
 800f0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ee:	e7de      	b.n	800f0ae <__ieee754_rem_pio2+0xde>
 800f0f0:	4b82      	ldr	r3, [pc, #520]	@ (800f2fc <__ieee754_rem_pio2+0x32c>)
 800f0f2:	4598      	cmp	r8, r3
 800f0f4:	f200 80d1 	bhi.w	800f29a <__ieee754_rem_pio2+0x2ca>
 800f0f8:	f000 fafe 	bl	800f6f8 <fabs>
 800f0fc:	ec57 6b10 	vmov	r6, r7, d0
 800f100:	a375      	add	r3, pc, #468	@ (adr r3, 800f2d8 <__ieee754_rem_pio2+0x308>)
 800f102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f106:	4630      	mov	r0, r6
 800f108:	4639      	mov	r1, r7
 800f10a:	f7f1 fa75 	bl	80005f8 <__aeabi_dmul>
 800f10e:	4b7c      	ldr	r3, [pc, #496]	@ (800f300 <__ieee754_rem_pio2+0x330>)
 800f110:	2200      	movs	r2, #0
 800f112:	f7f1 f8bb 	bl	800028c <__adddf3>
 800f116:	f7f1 fd1f 	bl	8000b58 <__aeabi_d2iz>
 800f11a:	4605      	mov	r5, r0
 800f11c:	f7f1 fa02 	bl	8000524 <__aeabi_i2d>
 800f120:	4602      	mov	r2, r0
 800f122:	460b      	mov	r3, r1
 800f124:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f128:	a363      	add	r3, pc, #396	@ (adr r3, 800f2b8 <__ieee754_rem_pio2+0x2e8>)
 800f12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12e:	f7f1 fa63 	bl	80005f8 <__aeabi_dmul>
 800f132:	4602      	mov	r2, r0
 800f134:	460b      	mov	r3, r1
 800f136:	4630      	mov	r0, r6
 800f138:	4639      	mov	r1, r7
 800f13a:	f7f1 f8a5 	bl	8000288 <__aeabi_dsub>
 800f13e:	a360      	add	r3, pc, #384	@ (adr r3, 800f2c0 <__ieee754_rem_pio2+0x2f0>)
 800f140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f144:	4682      	mov	sl, r0
 800f146:	468b      	mov	fp, r1
 800f148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f14c:	f7f1 fa54 	bl	80005f8 <__aeabi_dmul>
 800f150:	2d1f      	cmp	r5, #31
 800f152:	4606      	mov	r6, r0
 800f154:	460f      	mov	r7, r1
 800f156:	dc0c      	bgt.n	800f172 <__ieee754_rem_pio2+0x1a2>
 800f158:	4b6a      	ldr	r3, [pc, #424]	@ (800f304 <__ieee754_rem_pio2+0x334>)
 800f15a:	1e6a      	subs	r2, r5, #1
 800f15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f160:	4543      	cmp	r3, r8
 800f162:	d006      	beq.n	800f172 <__ieee754_rem_pio2+0x1a2>
 800f164:	4632      	mov	r2, r6
 800f166:	463b      	mov	r3, r7
 800f168:	4650      	mov	r0, sl
 800f16a:	4659      	mov	r1, fp
 800f16c:	f7f1 f88c 	bl	8000288 <__aeabi_dsub>
 800f170:	e00e      	b.n	800f190 <__ieee754_rem_pio2+0x1c0>
 800f172:	463b      	mov	r3, r7
 800f174:	4632      	mov	r2, r6
 800f176:	4650      	mov	r0, sl
 800f178:	4659      	mov	r1, fp
 800f17a:	f7f1 f885 	bl	8000288 <__aeabi_dsub>
 800f17e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f182:	9305      	str	r3, [sp, #20]
 800f184:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f188:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f18c:	2b10      	cmp	r3, #16
 800f18e:	dc02      	bgt.n	800f196 <__ieee754_rem_pio2+0x1c6>
 800f190:	e9c4 0100 	strd	r0, r1, [r4]
 800f194:	e039      	b.n	800f20a <__ieee754_rem_pio2+0x23a>
 800f196:	a34c      	add	r3, pc, #304	@ (adr r3, 800f2c8 <__ieee754_rem_pio2+0x2f8>)
 800f198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1a0:	f7f1 fa2a 	bl	80005f8 <__aeabi_dmul>
 800f1a4:	4606      	mov	r6, r0
 800f1a6:	460f      	mov	r7, r1
 800f1a8:	4602      	mov	r2, r0
 800f1aa:	460b      	mov	r3, r1
 800f1ac:	4650      	mov	r0, sl
 800f1ae:	4659      	mov	r1, fp
 800f1b0:	f7f1 f86a 	bl	8000288 <__aeabi_dsub>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	4680      	mov	r8, r0
 800f1ba:	4689      	mov	r9, r1
 800f1bc:	4650      	mov	r0, sl
 800f1be:	4659      	mov	r1, fp
 800f1c0:	f7f1 f862 	bl	8000288 <__aeabi_dsub>
 800f1c4:	4632      	mov	r2, r6
 800f1c6:	463b      	mov	r3, r7
 800f1c8:	f7f1 f85e 	bl	8000288 <__aeabi_dsub>
 800f1cc:	a340      	add	r3, pc, #256	@ (adr r3, 800f2d0 <__ieee754_rem_pio2+0x300>)
 800f1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d2:	4606      	mov	r6, r0
 800f1d4:	460f      	mov	r7, r1
 800f1d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1da:	f7f1 fa0d 	bl	80005f8 <__aeabi_dmul>
 800f1de:	4632      	mov	r2, r6
 800f1e0:	463b      	mov	r3, r7
 800f1e2:	f7f1 f851 	bl	8000288 <__aeabi_dsub>
 800f1e6:	4602      	mov	r2, r0
 800f1e8:	460b      	mov	r3, r1
 800f1ea:	4606      	mov	r6, r0
 800f1ec:	460f      	mov	r7, r1
 800f1ee:	4640      	mov	r0, r8
 800f1f0:	4649      	mov	r1, r9
 800f1f2:	f7f1 f849 	bl	8000288 <__aeabi_dsub>
 800f1f6:	9a05      	ldr	r2, [sp, #20]
 800f1f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f1fc:	1ad3      	subs	r3, r2, r3
 800f1fe:	2b31      	cmp	r3, #49	@ 0x31
 800f200:	dc20      	bgt.n	800f244 <__ieee754_rem_pio2+0x274>
 800f202:	e9c4 0100 	strd	r0, r1, [r4]
 800f206:	46c2      	mov	sl, r8
 800f208:	46cb      	mov	fp, r9
 800f20a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f20e:	4650      	mov	r0, sl
 800f210:	4642      	mov	r2, r8
 800f212:	464b      	mov	r3, r9
 800f214:	4659      	mov	r1, fp
 800f216:	f7f1 f837 	bl	8000288 <__aeabi_dsub>
 800f21a:	463b      	mov	r3, r7
 800f21c:	4632      	mov	r2, r6
 800f21e:	f7f1 f833 	bl	8000288 <__aeabi_dsub>
 800f222:	9b04      	ldr	r3, [sp, #16]
 800f224:	2b00      	cmp	r3, #0
 800f226:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f22a:	f6bf af0e 	bge.w	800f04a <__ieee754_rem_pio2+0x7a>
 800f22e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800f232:	6063      	str	r3, [r4, #4]
 800f234:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f238:	f8c4 8000 	str.w	r8, [r4]
 800f23c:	60a0      	str	r0, [r4, #8]
 800f23e:	60e3      	str	r3, [r4, #12]
 800f240:	426d      	negs	r5, r5
 800f242:	e702      	b.n	800f04a <__ieee754_rem_pio2+0x7a>
 800f244:	a326      	add	r3, pc, #152	@ (adr r3, 800f2e0 <__ieee754_rem_pio2+0x310>)
 800f246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f24a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f24e:	f7f1 f9d3 	bl	80005f8 <__aeabi_dmul>
 800f252:	4606      	mov	r6, r0
 800f254:	460f      	mov	r7, r1
 800f256:	4602      	mov	r2, r0
 800f258:	460b      	mov	r3, r1
 800f25a:	4640      	mov	r0, r8
 800f25c:	4649      	mov	r1, r9
 800f25e:	f7f1 f813 	bl	8000288 <__aeabi_dsub>
 800f262:	4602      	mov	r2, r0
 800f264:	460b      	mov	r3, r1
 800f266:	4682      	mov	sl, r0
 800f268:	468b      	mov	fp, r1
 800f26a:	4640      	mov	r0, r8
 800f26c:	4649      	mov	r1, r9
 800f26e:	f7f1 f80b 	bl	8000288 <__aeabi_dsub>
 800f272:	4632      	mov	r2, r6
 800f274:	463b      	mov	r3, r7
 800f276:	f7f1 f807 	bl	8000288 <__aeabi_dsub>
 800f27a:	a31b      	add	r3, pc, #108	@ (adr r3, 800f2e8 <__ieee754_rem_pio2+0x318>)
 800f27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f280:	4606      	mov	r6, r0
 800f282:	460f      	mov	r7, r1
 800f284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f288:	f7f1 f9b6 	bl	80005f8 <__aeabi_dmul>
 800f28c:	4632      	mov	r2, r6
 800f28e:	463b      	mov	r3, r7
 800f290:	f7f0 fffa 	bl	8000288 <__aeabi_dsub>
 800f294:	4606      	mov	r6, r0
 800f296:	460f      	mov	r7, r1
 800f298:	e764      	b.n	800f164 <__ieee754_rem_pio2+0x194>
 800f29a:	4b1b      	ldr	r3, [pc, #108]	@ (800f308 <__ieee754_rem_pio2+0x338>)
 800f29c:	4598      	cmp	r8, r3
 800f29e:	d935      	bls.n	800f30c <__ieee754_rem_pio2+0x33c>
 800f2a0:	4632      	mov	r2, r6
 800f2a2:	463b      	mov	r3, r7
 800f2a4:	4630      	mov	r0, r6
 800f2a6:	4639      	mov	r1, r7
 800f2a8:	f7f0 ffee 	bl	8000288 <__aeabi_dsub>
 800f2ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f2b0:	e9c4 0100 	strd	r0, r1, [r4]
 800f2b4:	e69e      	b.n	800eff4 <__ieee754_rem_pio2+0x24>
 800f2b6:	bf00      	nop
 800f2b8:	54400000 	.word	0x54400000
 800f2bc:	3ff921fb 	.word	0x3ff921fb
 800f2c0:	1a626331 	.word	0x1a626331
 800f2c4:	3dd0b461 	.word	0x3dd0b461
 800f2c8:	1a600000 	.word	0x1a600000
 800f2cc:	3dd0b461 	.word	0x3dd0b461
 800f2d0:	2e037073 	.word	0x2e037073
 800f2d4:	3ba3198a 	.word	0x3ba3198a
 800f2d8:	6dc9c883 	.word	0x6dc9c883
 800f2dc:	3fe45f30 	.word	0x3fe45f30
 800f2e0:	2e000000 	.word	0x2e000000
 800f2e4:	3ba3198a 	.word	0x3ba3198a
 800f2e8:	252049c1 	.word	0x252049c1
 800f2ec:	397b839a 	.word	0x397b839a
 800f2f0:	3fe921fb 	.word	0x3fe921fb
 800f2f4:	4002d97b 	.word	0x4002d97b
 800f2f8:	3ff921fb 	.word	0x3ff921fb
 800f2fc:	413921fb 	.word	0x413921fb
 800f300:	3fe00000 	.word	0x3fe00000
 800f304:	080107e8 	.word	0x080107e8
 800f308:	7fefffff 	.word	0x7fefffff
 800f30c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800f310:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800f314:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800f318:	4630      	mov	r0, r6
 800f31a:	460f      	mov	r7, r1
 800f31c:	f7f1 fc1c 	bl	8000b58 <__aeabi_d2iz>
 800f320:	f7f1 f900 	bl	8000524 <__aeabi_i2d>
 800f324:	4602      	mov	r2, r0
 800f326:	460b      	mov	r3, r1
 800f328:	4630      	mov	r0, r6
 800f32a:	4639      	mov	r1, r7
 800f32c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f330:	f7f0 ffaa 	bl	8000288 <__aeabi_dsub>
 800f334:	4b22      	ldr	r3, [pc, #136]	@ (800f3c0 <__ieee754_rem_pio2+0x3f0>)
 800f336:	2200      	movs	r2, #0
 800f338:	f7f1 f95e 	bl	80005f8 <__aeabi_dmul>
 800f33c:	460f      	mov	r7, r1
 800f33e:	4606      	mov	r6, r0
 800f340:	f7f1 fc0a 	bl	8000b58 <__aeabi_d2iz>
 800f344:	f7f1 f8ee 	bl	8000524 <__aeabi_i2d>
 800f348:	4602      	mov	r2, r0
 800f34a:	460b      	mov	r3, r1
 800f34c:	4630      	mov	r0, r6
 800f34e:	4639      	mov	r1, r7
 800f350:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f354:	f7f0 ff98 	bl	8000288 <__aeabi_dsub>
 800f358:	4b19      	ldr	r3, [pc, #100]	@ (800f3c0 <__ieee754_rem_pio2+0x3f0>)
 800f35a:	2200      	movs	r2, #0
 800f35c:	f7f1 f94c 	bl	80005f8 <__aeabi_dmul>
 800f360:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800f364:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800f368:	f04f 0803 	mov.w	r8, #3
 800f36c:	2600      	movs	r6, #0
 800f36e:	2700      	movs	r7, #0
 800f370:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800f374:	4632      	mov	r2, r6
 800f376:	463b      	mov	r3, r7
 800f378:	46c2      	mov	sl, r8
 800f37a:	f108 38ff 	add.w	r8, r8, #4294967295
 800f37e:	f7f1 fba3 	bl	8000ac8 <__aeabi_dcmpeq>
 800f382:	2800      	cmp	r0, #0
 800f384:	d1f4      	bne.n	800f370 <__ieee754_rem_pio2+0x3a0>
 800f386:	4b0f      	ldr	r3, [pc, #60]	@ (800f3c4 <__ieee754_rem_pio2+0x3f4>)
 800f388:	9301      	str	r3, [sp, #4]
 800f38a:	2302      	movs	r3, #2
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	462a      	mov	r2, r5
 800f390:	4653      	mov	r3, sl
 800f392:	4621      	mov	r1, r4
 800f394:	a806      	add	r0, sp, #24
 800f396:	f000 fa93 	bl	800f8c0 <__kernel_rem_pio2>
 800f39a:	9b04      	ldr	r3, [sp, #16]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	4605      	mov	r5, r0
 800f3a0:	f6bf ae53 	bge.w	800f04a <__ieee754_rem_pio2+0x7a>
 800f3a4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f3a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f3ac:	e9c4 2300 	strd	r2, r3, [r4]
 800f3b0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800f3b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f3b8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f3bc:	e740      	b.n	800f240 <__ieee754_rem_pio2+0x270>
 800f3be:	bf00      	nop
 800f3c0:	41700000 	.word	0x41700000
 800f3c4:	08010868 	.word	0x08010868

0800f3c8 <atan>:
 800f3c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3cc:	ec55 4b10 	vmov	r4, r5, d0
 800f3d0:	4bbf      	ldr	r3, [pc, #764]	@ (800f6d0 <atan+0x308>)
 800f3d2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f3d6:	429e      	cmp	r6, r3
 800f3d8:	46ab      	mov	fp, r5
 800f3da:	d918      	bls.n	800f40e <atan+0x46>
 800f3dc:	4bbd      	ldr	r3, [pc, #756]	@ (800f6d4 <atan+0x30c>)
 800f3de:	429e      	cmp	r6, r3
 800f3e0:	d801      	bhi.n	800f3e6 <atan+0x1e>
 800f3e2:	d109      	bne.n	800f3f8 <atan+0x30>
 800f3e4:	b144      	cbz	r4, 800f3f8 <atan+0x30>
 800f3e6:	4622      	mov	r2, r4
 800f3e8:	462b      	mov	r3, r5
 800f3ea:	4620      	mov	r0, r4
 800f3ec:	4629      	mov	r1, r5
 800f3ee:	f7f0 ff4d 	bl	800028c <__adddf3>
 800f3f2:	4604      	mov	r4, r0
 800f3f4:	460d      	mov	r5, r1
 800f3f6:	e006      	b.n	800f406 <atan+0x3e>
 800f3f8:	f1bb 0f00 	cmp.w	fp, #0
 800f3fc:	f340 812b 	ble.w	800f656 <atan+0x28e>
 800f400:	a597      	add	r5, pc, #604	@ (adr r5, 800f660 <atan+0x298>)
 800f402:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f406:	ec45 4b10 	vmov	d0, r4, r5
 800f40a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f40e:	4bb2      	ldr	r3, [pc, #712]	@ (800f6d8 <atan+0x310>)
 800f410:	429e      	cmp	r6, r3
 800f412:	d813      	bhi.n	800f43c <atan+0x74>
 800f414:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800f418:	429e      	cmp	r6, r3
 800f41a:	d80c      	bhi.n	800f436 <atan+0x6e>
 800f41c:	a392      	add	r3, pc, #584	@ (adr r3, 800f668 <atan+0x2a0>)
 800f41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f422:	4620      	mov	r0, r4
 800f424:	4629      	mov	r1, r5
 800f426:	f7f0 ff31 	bl	800028c <__adddf3>
 800f42a:	4bac      	ldr	r3, [pc, #688]	@ (800f6dc <atan+0x314>)
 800f42c:	2200      	movs	r2, #0
 800f42e:	f7f1 fb73 	bl	8000b18 <__aeabi_dcmpgt>
 800f432:	2800      	cmp	r0, #0
 800f434:	d1e7      	bne.n	800f406 <atan+0x3e>
 800f436:	f04f 3aff 	mov.w	sl, #4294967295
 800f43a:	e029      	b.n	800f490 <atan+0xc8>
 800f43c:	f000 f95c 	bl	800f6f8 <fabs>
 800f440:	4ba7      	ldr	r3, [pc, #668]	@ (800f6e0 <atan+0x318>)
 800f442:	429e      	cmp	r6, r3
 800f444:	ec55 4b10 	vmov	r4, r5, d0
 800f448:	f200 80bc 	bhi.w	800f5c4 <atan+0x1fc>
 800f44c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800f450:	429e      	cmp	r6, r3
 800f452:	f200 809e 	bhi.w	800f592 <atan+0x1ca>
 800f456:	4622      	mov	r2, r4
 800f458:	462b      	mov	r3, r5
 800f45a:	4620      	mov	r0, r4
 800f45c:	4629      	mov	r1, r5
 800f45e:	f7f0 ff15 	bl	800028c <__adddf3>
 800f462:	4b9e      	ldr	r3, [pc, #632]	@ (800f6dc <atan+0x314>)
 800f464:	2200      	movs	r2, #0
 800f466:	f7f0 ff0f 	bl	8000288 <__aeabi_dsub>
 800f46a:	2200      	movs	r2, #0
 800f46c:	4606      	mov	r6, r0
 800f46e:	460f      	mov	r7, r1
 800f470:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f474:	4620      	mov	r0, r4
 800f476:	4629      	mov	r1, r5
 800f478:	f7f0 ff08 	bl	800028c <__adddf3>
 800f47c:	4602      	mov	r2, r0
 800f47e:	460b      	mov	r3, r1
 800f480:	4630      	mov	r0, r6
 800f482:	4639      	mov	r1, r7
 800f484:	f7f1 f9e2 	bl	800084c <__aeabi_ddiv>
 800f488:	f04f 0a00 	mov.w	sl, #0
 800f48c:	4604      	mov	r4, r0
 800f48e:	460d      	mov	r5, r1
 800f490:	4622      	mov	r2, r4
 800f492:	462b      	mov	r3, r5
 800f494:	4620      	mov	r0, r4
 800f496:	4629      	mov	r1, r5
 800f498:	f7f1 f8ae 	bl	80005f8 <__aeabi_dmul>
 800f49c:	4602      	mov	r2, r0
 800f49e:	460b      	mov	r3, r1
 800f4a0:	4680      	mov	r8, r0
 800f4a2:	4689      	mov	r9, r1
 800f4a4:	f7f1 f8a8 	bl	80005f8 <__aeabi_dmul>
 800f4a8:	a371      	add	r3, pc, #452	@ (adr r3, 800f670 <atan+0x2a8>)
 800f4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ae:	4606      	mov	r6, r0
 800f4b0:	460f      	mov	r7, r1
 800f4b2:	f7f1 f8a1 	bl	80005f8 <__aeabi_dmul>
 800f4b6:	a370      	add	r3, pc, #448	@ (adr r3, 800f678 <atan+0x2b0>)
 800f4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4bc:	f7f0 fee6 	bl	800028c <__adddf3>
 800f4c0:	4632      	mov	r2, r6
 800f4c2:	463b      	mov	r3, r7
 800f4c4:	f7f1 f898 	bl	80005f8 <__aeabi_dmul>
 800f4c8:	a36d      	add	r3, pc, #436	@ (adr r3, 800f680 <atan+0x2b8>)
 800f4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ce:	f7f0 fedd 	bl	800028c <__adddf3>
 800f4d2:	4632      	mov	r2, r6
 800f4d4:	463b      	mov	r3, r7
 800f4d6:	f7f1 f88f 	bl	80005f8 <__aeabi_dmul>
 800f4da:	a36b      	add	r3, pc, #428	@ (adr r3, 800f688 <atan+0x2c0>)
 800f4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e0:	f7f0 fed4 	bl	800028c <__adddf3>
 800f4e4:	4632      	mov	r2, r6
 800f4e6:	463b      	mov	r3, r7
 800f4e8:	f7f1 f886 	bl	80005f8 <__aeabi_dmul>
 800f4ec:	a368      	add	r3, pc, #416	@ (adr r3, 800f690 <atan+0x2c8>)
 800f4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f2:	f7f0 fecb 	bl	800028c <__adddf3>
 800f4f6:	4632      	mov	r2, r6
 800f4f8:	463b      	mov	r3, r7
 800f4fa:	f7f1 f87d 	bl	80005f8 <__aeabi_dmul>
 800f4fe:	a366      	add	r3, pc, #408	@ (adr r3, 800f698 <atan+0x2d0>)
 800f500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f504:	f7f0 fec2 	bl	800028c <__adddf3>
 800f508:	4642      	mov	r2, r8
 800f50a:	464b      	mov	r3, r9
 800f50c:	f7f1 f874 	bl	80005f8 <__aeabi_dmul>
 800f510:	a363      	add	r3, pc, #396	@ (adr r3, 800f6a0 <atan+0x2d8>)
 800f512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f516:	4680      	mov	r8, r0
 800f518:	4689      	mov	r9, r1
 800f51a:	4630      	mov	r0, r6
 800f51c:	4639      	mov	r1, r7
 800f51e:	f7f1 f86b 	bl	80005f8 <__aeabi_dmul>
 800f522:	a361      	add	r3, pc, #388	@ (adr r3, 800f6a8 <atan+0x2e0>)
 800f524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f528:	f7f0 feae 	bl	8000288 <__aeabi_dsub>
 800f52c:	4632      	mov	r2, r6
 800f52e:	463b      	mov	r3, r7
 800f530:	f7f1 f862 	bl	80005f8 <__aeabi_dmul>
 800f534:	a35e      	add	r3, pc, #376	@ (adr r3, 800f6b0 <atan+0x2e8>)
 800f536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53a:	f7f0 fea5 	bl	8000288 <__aeabi_dsub>
 800f53e:	4632      	mov	r2, r6
 800f540:	463b      	mov	r3, r7
 800f542:	f7f1 f859 	bl	80005f8 <__aeabi_dmul>
 800f546:	a35c      	add	r3, pc, #368	@ (adr r3, 800f6b8 <atan+0x2f0>)
 800f548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54c:	f7f0 fe9c 	bl	8000288 <__aeabi_dsub>
 800f550:	4632      	mov	r2, r6
 800f552:	463b      	mov	r3, r7
 800f554:	f7f1 f850 	bl	80005f8 <__aeabi_dmul>
 800f558:	a359      	add	r3, pc, #356	@ (adr r3, 800f6c0 <atan+0x2f8>)
 800f55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55e:	f7f0 fe93 	bl	8000288 <__aeabi_dsub>
 800f562:	4632      	mov	r2, r6
 800f564:	463b      	mov	r3, r7
 800f566:	f7f1 f847 	bl	80005f8 <__aeabi_dmul>
 800f56a:	4602      	mov	r2, r0
 800f56c:	460b      	mov	r3, r1
 800f56e:	4640      	mov	r0, r8
 800f570:	4649      	mov	r1, r9
 800f572:	f7f0 fe8b 	bl	800028c <__adddf3>
 800f576:	4622      	mov	r2, r4
 800f578:	462b      	mov	r3, r5
 800f57a:	f7f1 f83d 	bl	80005f8 <__aeabi_dmul>
 800f57e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f582:	4602      	mov	r2, r0
 800f584:	460b      	mov	r3, r1
 800f586:	d148      	bne.n	800f61a <atan+0x252>
 800f588:	4620      	mov	r0, r4
 800f58a:	4629      	mov	r1, r5
 800f58c:	f7f0 fe7c 	bl	8000288 <__aeabi_dsub>
 800f590:	e72f      	b.n	800f3f2 <atan+0x2a>
 800f592:	4b52      	ldr	r3, [pc, #328]	@ (800f6dc <atan+0x314>)
 800f594:	2200      	movs	r2, #0
 800f596:	4620      	mov	r0, r4
 800f598:	4629      	mov	r1, r5
 800f59a:	f7f0 fe75 	bl	8000288 <__aeabi_dsub>
 800f59e:	4b4f      	ldr	r3, [pc, #316]	@ (800f6dc <atan+0x314>)
 800f5a0:	4606      	mov	r6, r0
 800f5a2:	460f      	mov	r7, r1
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	4629      	mov	r1, r5
 800f5aa:	f7f0 fe6f 	bl	800028c <__adddf3>
 800f5ae:	4602      	mov	r2, r0
 800f5b0:	460b      	mov	r3, r1
 800f5b2:	4630      	mov	r0, r6
 800f5b4:	4639      	mov	r1, r7
 800f5b6:	f7f1 f949 	bl	800084c <__aeabi_ddiv>
 800f5ba:	f04f 0a01 	mov.w	sl, #1
 800f5be:	4604      	mov	r4, r0
 800f5c0:	460d      	mov	r5, r1
 800f5c2:	e765      	b.n	800f490 <atan+0xc8>
 800f5c4:	4b47      	ldr	r3, [pc, #284]	@ (800f6e4 <atan+0x31c>)
 800f5c6:	429e      	cmp	r6, r3
 800f5c8:	d21c      	bcs.n	800f604 <atan+0x23c>
 800f5ca:	4b47      	ldr	r3, [pc, #284]	@ (800f6e8 <atan+0x320>)
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	4629      	mov	r1, r5
 800f5d2:	f7f0 fe59 	bl	8000288 <__aeabi_dsub>
 800f5d6:	4b44      	ldr	r3, [pc, #272]	@ (800f6e8 <atan+0x320>)
 800f5d8:	4606      	mov	r6, r0
 800f5da:	460f      	mov	r7, r1
 800f5dc:	2200      	movs	r2, #0
 800f5de:	4620      	mov	r0, r4
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	f7f1 f809 	bl	80005f8 <__aeabi_dmul>
 800f5e6:	4b3d      	ldr	r3, [pc, #244]	@ (800f6dc <atan+0x314>)
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	f7f0 fe4f 	bl	800028c <__adddf3>
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	4639      	mov	r1, r7
 800f5f6:	f7f1 f929 	bl	800084c <__aeabi_ddiv>
 800f5fa:	f04f 0a02 	mov.w	sl, #2
 800f5fe:	4604      	mov	r4, r0
 800f600:	460d      	mov	r5, r1
 800f602:	e745      	b.n	800f490 <atan+0xc8>
 800f604:	4622      	mov	r2, r4
 800f606:	462b      	mov	r3, r5
 800f608:	4938      	ldr	r1, [pc, #224]	@ (800f6ec <atan+0x324>)
 800f60a:	2000      	movs	r0, #0
 800f60c:	f7f1 f91e 	bl	800084c <__aeabi_ddiv>
 800f610:	f04f 0a03 	mov.w	sl, #3
 800f614:	4604      	mov	r4, r0
 800f616:	460d      	mov	r5, r1
 800f618:	e73a      	b.n	800f490 <atan+0xc8>
 800f61a:	4b35      	ldr	r3, [pc, #212]	@ (800f6f0 <atan+0x328>)
 800f61c:	4e35      	ldr	r6, [pc, #212]	@ (800f6f4 <atan+0x32c>)
 800f61e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f626:	f7f0 fe2f 	bl	8000288 <__aeabi_dsub>
 800f62a:	4622      	mov	r2, r4
 800f62c:	462b      	mov	r3, r5
 800f62e:	f7f0 fe2b 	bl	8000288 <__aeabi_dsub>
 800f632:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f636:	4602      	mov	r2, r0
 800f638:	460b      	mov	r3, r1
 800f63a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f63e:	f7f0 fe23 	bl	8000288 <__aeabi_dsub>
 800f642:	f1bb 0f00 	cmp.w	fp, #0
 800f646:	4604      	mov	r4, r0
 800f648:	460d      	mov	r5, r1
 800f64a:	f6bf aedc 	bge.w	800f406 <atan+0x3e>
 800f64e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f652:	461d      	mov	r5, r3
 800f654:	e6d7      	b.n	800f406 <atan+0x3e>
 800f656:	a51c      	add	r5, pc, #112	@ (adr r5, 800f6c8 <atan+0x300>)
 800f658:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f65c:	e6d3      	b.n	800f406 <atan+0x3e>
 800f65e:	bf00      	nop
 800f660:	54442d18 	.word	0x54442d18
 800f664:	3ff921fb 	.word	0x3ff921fb
 800f668:	8800759c 	.word	0x8800759c
 800f66c:	7e37e43c 	.word	0x7e37e43c
 800f670:	e322da11 	.word	0xe322da11
 800f674:	3f90ad3a 	.word	0x3f90ad3a
 800f678:	24760deb 	.word	0x24760deb
 800f67c:	3fa97b4b 	.word	0x3fa97b4b
 800f680:	a0d03d51 	.word	0xa0d03d51
 800f684:	3fb10d66 	.word	0x3fb10d66
 800f688:	c54c206e 	.word	0xc54c206e
 800f68c:	3fb745cd 	.word	0x3fb745cd
 800f690:	920083ff 	.word	0x920083ff
 800f694:	3fc24924 	.word	0x3fc24924
 800f698:	5555550d 	.word	0x5555550d
 800f69c:	3fd55555 	.word	0x3fd55555
 800f6a0:	2c6a6c2f 	.word	0x2c6a6c2f
 800f6a4:	bfa2b444 	.word	0xbfa2b444
 800f6a8:	52defd9a 	.word	0x52defd9a
 800f6ac:	3fadde2d 	.word	0x3fadde2d
 800f6b0:	af749a6d 	.word	0xaf749a6d
 800f6b4:	3fb3b0f2 	.word	0x3fb3b0f2
 800f6b8:	fe231671 	.word	0xfe231671
 800f6bc:	3fbc71c6 	.word	0x3fbc71c6
 800f6c0:	9998ebc4 	.word	0x9998ebc4
 800f6c4:	3fc99999 	.word	0x3fc99999
 800f6c8:	54442d18 	.word	0x54442d18
 800f6cc:	bff921fb 	.word	0xbff921fb
 800f6d0:	440fffff 	.word	0x440fffff
 800f6d4:	7ff00000 	.word	0x7ff00000
 800f6d8:	3fdbffff 	.word	0x3fdbffff
 800f6dc:	3ff00000 	.word	0x3ff00000
 800f6e0:	3ff2ffff 	.word	0x3ff2ffff
 800f6e4:	40038000 	.word	0x40038000
 800f6e8:	3ff80000 	.word	0x3ff80000
 800f6ec:	bff00000 	.word	0xbff00000
 800f6f0:	08010970 	.word	0x08010970
 800f6f4:	08010990 	.word	0x08010990

0800f6f8 <fabs>:
 800f6f8:	ec51 0b10 	vmov	r0, r1, d0
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f702:	ec43 2b10 	vmov	d0, r2, r3
 800f706:	4770      	bx	lr

0800f708 <__ieee754_sqrt>:
 800f708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f70c:	4a68      	ldr	r2, [pc, #416]	@ (800f8b0 <__ieee754_sqrt+0x1a8>)
 800f70e:	ec55 4b10 	vmov	r4, r5, d0
 800f712:	43aa      	bics	r2, r5
 800f714:	462b      	mov	r3, r5
 800f716:	4621      	mov	r1, r4
 800f718:	d110      	bne.n	800f73c <__ieee754_sqrt+0x34>
 800f71a:	4622      	mov	r2, r4
 800f71c:	4620      	mov	r0, r4
 800f71e:	4629      	mov	r1, r5
 800f720:	f7f0 ff6a 	bl	80005f8 <__aeabi_dmul>
 800f724:	4602      	mov	r2, r0
 800f726:	460b      	mov	r3, r1
 800f728:	4620      	mov	r0, r4
 800f72a:	4629      	mov	r1, r5
 800f72c:	f7f0 fdae 	bl	800028c <__adddf3>
 800f730:	4604      	mov	r4, r0
 800f732:	460d      	mov	r5, r1
 800f734:	ec45 4b10 	vmov	d0, r4, r5
 800f738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f73c:	2d00      	cmp	r5, #0
 800f73e:	dc0e      	bgt.n	800f75e <__ieee754_sqrt+0x56>
 800f740:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f744:	4322      	orrs	r2, r4
 800f746:	d0f5      	beq.n	800f734 <__ieee754_sqrt+0x2c>
 800f748:	b19d      	cbz	r5, 800f772 <__ieee754_sqrt+0x6a>
 800f74a:	4622      	mov	r2, r4
 800f74c:	4620      	mov	r0, r4
 800f74e:	4629      	mov	r1, r5
 800f750:	f7f0 fd9a 	bl	8000288 <__aeabi_dsub>
 800f754:	4602      	mov	r2, r0
 800f756:	460b      	mov	r3, r1
 800f758:	f7f1 f878 	bl	800084c <__aeabi_ddiv>
 800f75c:	e7e8      	b.n	800f730 <__ieee754_sqrt+0x28>
 800f75e:	152a      	asrs	r2, r5, #20
 800f760:	d115      	bne.n	800f78e <__ieee754_sqrt+0x86>
 800f762:	2000      	movs	r0, #0
 800f764:	e009      	b.n	800f77a <__ieee754_sqrt+0x72>
 800f766:	0acb      	lsrs	r3, r1, #11
 800f768:	3a15      	subs	r2, #21
 800f76a:	0549      	lsls	r1, r1, #21
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d0fa      	beq.n	800f766 <__ieee754_sqrt+0x5e>
 800f770:	e7f7      	b.n	800f762 <__ieee754_sqrt+0x5a>
 800f772:	462a      	mov	r2, r5
 800f774:	e7fa      	b.n	800f76c <__ieee754_sqrt+0x64>
 800f776:	005b      	lsls	r3, r3, #1
 800f778:	3001      	adds	r0, #1
 800f77a:	02dc      	lsls	r4, r3, #11
 800f77c:	d5fb      	bpl.n	800f776 <__ieee754_sqrt+0x6e>
 800f77e:	1e44      	subs	r4, r0, #1
 800f780:	1b12      	subs	r2, r2, r4
 800f782:	f1c0 0420 	rsb	r4, r0, #32
 800f786:	fa21 f404 	lsr.w	r4, r1, r4
 800f78a:	4323      	orrs	r3, r4
 800f78c:	4081      	lsls	r1, r0
 800f78e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f792:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f79a:	07d2      	lsls	r2, r2, #31
 800f79c:	bf5c      	itt	pl
 800f79e:	005b      	lslpl	r3, r3, #1
 800f7a0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f7a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f7a8:	bf58      	it	pl
 800f7aa:	0049      	lslpl	r1, r1, #1
 800f7ac:	2600      	movs	r6, #0
 800f7ae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f7b2:	106d      	asrs	r5, r5, #1
 800f7b4:	0049      	lsls	r1, r1, #1
 800f7b6:	2016      	movs	r0, #22
 800f7b8:	4632      	mov	r2, r6
 800f7ba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f7be:	1917      	adds	r7, r2, r4
 800f7c0:	429f      	cmp	r7, r3
 800f7c2:	bfde      	ittt	le
 800f7c4:	193a      	addle	r2, r7, r4
 800f7c6:	1bdb      	suble	r3, r3, r7
 800f7c8:	1936      	addle	r6, r6, r4
 800f7ca:	0fcf      	lsrs	r7, r1, #31
 800f7cc:	3801      	subs	r0, #1
 800f7ce:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f7d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f7d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f7da:	d1f0      	bne.n	800f7be <__ieee754_sqrt+0xb6>
 800f7dc:	4604      	mov	r4, r0
 800f7de:	2720      	movs	r7, #32
 800f7e0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	eb00 0e0c 	add.w	lr, r0, ip
 800f7ea:	db02      	blt.n	800f7f2 <__ieee754_sqrt+0xea>
 800f7ec:	d113      	bne.n	800f816 <__ieee754_sqrt+0x10e>
 800f7ee:	458e      	cmp	lr, r1
 800f7f0:	d811      	bhi.n	800f816 <__ieee754_sqrt+0x10e>
 800f7f2:	f1be 0f00 	cmp.w	lr, #0
 800f7f6:	eb0e 000c 	add.w	r0, lr, ip
 800f7fa:	da42      	bge.n	800f882 <__ieee754_sqrt+0x17a>
 800f7fc:	2800      	cmp	r0, #0
 800f7fe:	db40      	blt.n	800f882 <__ieee754_sqrt+0x17a>
 800f800:	f102 0801 	add.w	r8, r2, #1
 800f804:	1a9b      	subs	r3, r3, r2
 800f806:	458e      	cmp	lr, r1
 800f808:	bf88      	it	hi
 800f80a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f80e:	eba1 010e 	sub.w	r1, r1, lr
 800f812:	4464      	add	r4, ip
 800f814:	4642      	mov	r2, r8
 800f816:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f81a:	3f01      	subs	r7, #1
 800f81c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f820:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f824:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f828:	d1dc      	bne.n	800f7e4 <__ieee754_sqrt+0xdc>
 800f82a:	4319      	orrs	r1, r3
 800f82c:	d01b      	beq.n	800f866 <__ieee754_sqrt+0x15e>
 800f82e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f8b4 <__ieee754_sqrt+0x1ac>
 800f832:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f8b8 <__ieee754_sqrt+0x1b0>
 800f836:	e9da 0100 	ldrd	r0, r1, [sl]
 800f83a:	e9db 2300 	ldrd	r2, r3, [fp]
 800f83e:	f7f0 fd23 	bl	8000288 <__aeabi_dsub>
 800f842:	e9da 8900 	ldrd	r8, r9, [sl]
 800f846:	4602      	mov	r2, r0
 800f848:	460b      	mov	r3, r1
 800f84a:	4640      	mov	r0, r8
 800f84c:	4649      	mov	r1, r9
 800f84e:	f7f1 f94f 	bl	8000af0 <__aeabi_dcmple>
 800f852:	b140      	cbz	r0, 800f866 <__ieee754_sqrt+0x15e>
 800f854:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f858:	e9da 0100 	ldrd	r0, r1, [sl]
 800f85c:	e9db 2300 	ldrd	r2, r3, [fp]
 800f860:	d111      	bne.n	800f886 <__ieee754_sqrt+0x17e>
 800f862:	3601      	adds	r6, #1
 800f864:	463c      	mov	r4, r7
 800f866:	1072      	asrs	r2, r6, #1
 800f868:	0863      	lsrs	r3, r4, #1
 800f86a:	07f1      	lsls	r1, r6, #31
 800f86c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f870:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f874:	bf48      	it	mi
 800f876:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f87a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f87e:	4618      	mov	r0, r3
 800f880:	e756      	b.n	800f730 <__ieee754_sqrt+0x28>
 800f882:	4690      	mov	r8, r2
 800f884:	e7be      	b.n	800f804 <__ieee754_sqrt+0xfc>
 800f886:	f7f0 fd01 	bl	800028c <__adddf3>
 800f88a:	e9da 8900 	ldrd	r8, r9, [sl]
 800f88e:	4602      	mov	r2, r0
 800f890:	460b      	mov	r3, r1
 800f892:	4640      	mov	r0, r8
 800f894:	4649      	mov	r1, r9
 800f896:	f7f1 f921 	bl	8000adc <__aeabi_dcmplt>
 800f89a:	b120      	cbz	r0, 800f8a6 <__ieee754_sqrt+0x19e>
 800f89c:	1ca0      	adds	r0, r4, #2
 800f89e:	bf08      	it	eq
 800f8a0:	3601      	addeq	r6, #1
 800f8a2:	3402      	adds	r4, #2
 800f8a4:	e7df      	b.n	800f866 <__ieee754_sqrt+0x15e>
 800f8a6:	1c63      	adds	r3, r4, #1
 800f8a8:	f023 0401 	bic.w	r4, r3, #1
 800f8ac:	e7db      	b.n	800f866 <__ieee754_sqrt+0x15e>
 800f8ae:	bf00      	nop
 800f8b0:	7ff00000 	.word	0x7ff00000
 800f8b4:	200002c0 	.word	0x200002c0
 800f8b8:	200002b8 	.word	0x200002b8
 800f8bc:	00000000 	.word	0x00000000

0800f8c0 <__kernel_rem_pio2>:
 800f8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c4:	ed2d 8b02 	vpush	{d8}
 800f8c8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f8cc:	f112 0f14 	cmn.w	r2, #20
 800f8d0:	9306      	str	r3, [sp, #24]
 800f8d2:	9104      	str	r1, [sp, #16]
 800f8d4:	4bbe      	ldr	r3, [pc, #760]	@ (800fbd0 <__kernel_rem_pio2+0x310>)
 800f8d6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800f8d8:	9008      	str	r0, [sp, #32]
 800f8da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f8de:	9300      	str	r3, [sp, #0]
 800f8e0:	9b06      	ldr	r3, [sp, #24]
 800f8e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f8e6:	bfa8      	it	ge
 800f8e8:	1ed4      	subge	r4, r2, #3
 800f8ea:	9305      	str	r3, [sp, #20]
 800f8ec:	bfb2      	itee	lt
 800f8ee:	2400      	movlt	r4, #0
 800f8f0:	2318      	movge	r3, #24
 800f8f2:	fb94 f4f3 	sdivge	r4, r4, r3
 800f8f6:	f06f 0317 	mvn.w	r3, #23
 800f8fa:	fb04 3303 	mla	r3, r4, r3, r3
 800f8fe:	eb03 0b02 	add.w	fp, r3, r2
 800f902:	9b00      	ldr	r3, [sp, #0]
 800f904:	9a05      	ldr	r2, [sp, #20]
 800f906:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800fbc0 <__kernel_rem_pio2+0x300>
 800f90a:	eb03 0802 	add.w	r8, r3, r2
 800f90e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f910:	1aa7      	subs	r7, r4, r2
 800f912:	ae20      	add	r6, sp, #128	@ 0x80
 800f914:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f918:	2500      	movs	r5, #0
 800f91a:	4545      	cmp	r5, r8
 800f91c:	dd13      	ble.n	800f946 <__kernel_rem_pio2+0x86>
 800f91e:	9b06      	ldr	r3, [sp, #24]
 800f920:	aa20      	add	r2, sp, #128	@ 0x80
 800f922:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f926:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800f92a:	f04f 0800 	mov.w	r8, #0
 800f92e:	9b00      	ldr	r3, [sp, #0]
 800f930:	4598      	cmp	r8, r3
 800f932:	dc31      	bgt.n	800f998 <__kernel_rem_pio2+0xd8>
 800f934:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800fbc0 <__kernel_rem_pio2+0x300>
 800f938:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f93c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f940:	462f      	mov	r7, r5
 800f942:	2600      	movs	r6, #0
 800f944:	e01b      	b.n	800f97e <__kernel_rem_pio2+0xbe>
 800f946:	42ef      	cmn	r7, r5
 800f948:	d407      	bmi.n	800f95a <__kernel_rem_pio2+0x9a>
 800f94a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f94e:	f7f0 fde9 	bl	8000524 <__aeabi_i2d>
 800f952:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f956:	3501      	adds	r5, #1
 800f958:	e7df      	b.n	800f91a <__kernel_rem_pio2+0x5a>
 800f95a:	ec51 0b18 	vmov	r0, r1, d8
 800f95e:	e7f8      	b.n	800f952 <__kernel_rem_pio2+0x92>
 800f960:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f964:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f968:	f7f0 fe46 	bl	80005f8 <__aeabi_dmul>
 800f96c:	4602      	mov	r2, r0
 800f96e:	460b      	mov	r3, r1
 800f970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f974:	f7f0 fc8a 	bl	800028c <__adddf3>
 800f978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f97c:	3601      	adds	r6, #1
 800f97e:	9b05      	ldr	r3, [sp, #20]
 800f980:	429e      	cmp	r6, r3
 800f982:	f1a7 0708 	sub.w	r7, r7, #8
 800f986:	ddeb      	ble.n	800f960 <__kernel_rem_pio2+0xa0>
 800f988:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f98c:	f108 0801 	add.w	r8, r8, #1
 800f990:	ecaa 7b02 	vstmia	sl!, {d7}
 800f994:	3508      	adds	r5, #8
 800f996:	e7ca      	b.n	800f92e <__kernel_rem_pio2+0x6e>
 800f998:	9b00      	ldr	r3, [sp, #0]
 800f99a:	f8dd 8000 	ldr.w	r8, [sp]
 800f99e:	aa0c      	add	r2, sp, #48	@ 0x30
 800f9a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f9a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9a6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f9a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f9ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9ae:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800f9b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9b4:	ab98      	add	r3, sp, #608	@ 0x260
 800f9b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f9ba:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800f9be:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f9c2:	ac0c      	add	r4, sp, #48	@ 0x30
 800f9c4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f9c6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800f9ca:	46a1      	mov	r9, r4
 800f9cc:	46c2      	mov	sl, r8
 800f9ce:	f1ba 0f00 	cmp.w	sl, #0
 800f9d2:	f1a5 0508 	sub.w	r5, r5, #8
 800f9d6:	dc77      	bgt.n	800fac8 <__kernel_rem_pio2+0x208>
 800f9d8:	4658      	mov	r0, fp
 800f9da:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f9de:	f000 fac7 	bl	800ff70 <scalbn>
 800f9e2:	ec57 6b10 	vmov	r6, r7, d0
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	4639      	mov	r1, r7
 800f9f0:	f7f0 fe02 	bl	80005f8 <__aeabi_dmul>
 800f9f4:	ec41 0b10 	vmov	d0, r0, r1
 800f9f8:	f000 fb3a 	bl	8010070 <floor>
 800f9fc:	4b75      	ldr	r3, [pc, #468]	@ (800fbd4 <__kernel_rem_pio2+0x314>)
 800f9fe:	ec51 0b10 	vmov	r0, r1, d0
 800fa02:	2200      	movs	r2, #0
 800fa04:	f7f0 fdf8 	bl	80005f8 <__aeabi_dmul>
 800fa08:	4602      	mov	r2, r0
 800fa0a:	460b      	mov	r3, r1
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	4639      	mov	r1, r7
 800fa10:	f7f0 fc3a 	bl	8000288 <__aeabi_dsub>
 800fa14:	460f      	mov	r7, r1
 800fa16:	4606      	mov	r6, r0
 800fa18:	f7f1 f89e 	bl	8000b58 <__aeabi_d2iz>
 800fa1c:	9002      	str	r0, [sp, #8]
 800fa1e:	f7f0 fd81 	bl	8000524 <__aeabi_i2d>
 800fa22:	4602      	mov	r2, r0
 800fa24:	460b      	mov	r3, r1
 800fa26:	4630      	mov	r0, r6
 800fa28:	4639      	mov	r1, r7
 800fa2a:	f7f0 fc2d 	bl	8000288 <__aeabi_dsub>
 800fa2e:	f1bb 0f00 	cmp.w	fp, #0
 800fa32:	4606      	mov	r6, r0
 800fa34:	460f      	mov	r7, r1
 800fa36:	dd6c      	ble.n	800fb12 <__kernel_rem_pio2+0x252>
 800fa38:	f108 31ff 	add.w	r1, r8, #4294967295
 800fa3c:	ab0c      	add	r3, sp, #48	@ 0x30
 800fa3e:	9d02      	ldr	r5, [sp, #8]
 800fa40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fa44:	f1cb 0018 	rsb	r0, fp, #24
 800fa48:	fa43 f200 	asr.w	r2, r3, r0
 800fa4c:	4415      	add	r5, r2
 800fa4e:	4082      	lsls	r2, r0
 800fa50:	1a9b      	subs	r3, r3, r2
 800fa52:	aa0c      	add	r2, sp, #48	@ 0x30
 800fa54:	9502      	str	r5, [sp, #8]
 800fa56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800fa5a:	f1cb 0217 	rsb	r2, fp, #23
 800fa5e:	fa43 f902 	asr.w	r9, r3, r2
 800fa62:	f1b9 0f00 	cmp.w	r9, #0
 800fa66:	dd64      	ble.n	800fb32 <__kernel_rem_pio2+0x272>
 800fa68:	9b02      	ldr	r3, [sp, #8]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	9302      	str	r3, [sp, #8]
 800fa70:	4615      	mov	r5, r2
 800fa72:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800fa76:	4590      	cmp	r8, r2
 800fa78:	f300 80b8 	bgt.w	800fbec <__kernel_rem_pio2+0x32c>
 800fa7c:	f1bb 0f00 	cmp.w	fp, #0
 800fa80:	dd07      	ble.n	800fa92 <__kernel_rem_pio2+0x1d2>
 800fa82:	f1bb 0f01 	cmp.w	fp, #1
 800fa86:	f000 80bf 	beq.w	800fc08 <__kernel_rem_pio2+0x348>
 800fa8a:	f1bb 0f02 	cmp.w	fp, #2
 800fa8e:	f000 80c6 	beq.w	800fc1e <__kernel_rem_pio2+0x35e>
 800fa92:	f1b9 0f02 	cmp.w	r9, #2
 800fa96:	d14c      	bne.n	800fb32 <__kernel_rem_pio2+0x272>
 800fa98:	4632      	mov	r2, r6
 800fa9a:	463b      	mov	r3, r7
 800fa9c:	494e      	ldr	r1, [pc, #312]	@ (800fbd8 <__kernel_rem_pio2+0x318>)
 800fa9e:	2000      	movs	r0, #0
 800faa0:	f7f0 fbf2 	bl	8000288 <__aeabi_dsub>
 800faa4:	4606      	mov	r6, r0
 800faa6:	460f      	mov	r7, r1
 800faa8:	2d00      	cmp	r5, #0
 800faaa:	d042      	beq.n	800fb32 <__kernel_rem_pio2+0x272>
 800faac:	4658      	mov	r0, fp
 800faae:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800fbc8 <__kernel_rem_pio2+0x308>
 800fab2:	f000 fa5d 	bl	800ff70 <scalbn>
 800fab6:	4630      	mov	r0, r6
 800fab8:	4639      	mov	r1, r7
 800faba:	ec53 2b10 	vmov	r2, r3, d0
 800fabe:	f7f0 fbe3 	bl	8000288 <__aeabi_dsub>
 800fac2:	4606      	mov	r6, r0
 800fac4:	460f      	mov	r7, r1
 800fac6:	e034      	b.n	800fb32 <__kernel_rem_pio2+0x272>
 800fac8:	4b44      	ldr	r3, [pc, #272]	@ (800fbdc <__kernel_rem_pio2+0x31c>)
 800faca:	2200      	movs	r2, #0
 800facc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fad0:	f7f0 fd92 	bl	80005f8 <__aeabi_dmul>
 800fad4:	f7f1 f840 	bl	8000b58 <__aeabi_d2iz>
 800fad8:	f7f0 fd24 	bl	8000524 <__aeabi_i2d>
 800fadc:	4b40      	ldr	r3, [pc, #256]	@ (800fbe0 <__kernel_rem_pio2+0x320>)
 800fade:	2200      	movs	r2, #0
 800fae0:	4606      	mov	r6, r0
 800fae2:	460f      	mov	r7, r1
 800fae4:	f7f0 fd88 	bl	80005f8 <__aeabi_dmul>
 800fae8:	4602      	mov	r2, r0
 800faea:	460b      	mov	r3, r1
 800faec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800faf0:	f7f0 fbca 	bl	8000288 <__aeabi_dsub>
 800faf4:	f7f1 f830 	bl	8000b58 <__aeabi_d2iz>
 800faf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fafc:	f849 0b04 	str.w	r0, [r9], #4
 800fb00:	4639      	mov	r1, r7
 800fb02:	4630      	mov	r0, r6
 800fb04:	f7f0 fbc2 	bl	800028c <__adddf3>
 800fb08:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb10:	e75d      	b.n	800f9ce <__kernel_rem_pio2+0x10e>
 800fb12:	d107      	bne.n	800fb24 <__kernel_rem_pio2+0x264>
 800fb14:	f108 33ff 	add.w	r3, r8, #4294967295
 800fb18:	aa0c      	add	r2, sp, #48	@ 0x30
 800fb1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb1e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800fb22:	e79e      	b.n	800fa62 <__kernel_rem_pio2+0x1a2>
 800fb24:	4b2f      	ldr	r3, [pc, #188]	@ (800fbe4 <__kernel_rem_pio2+0x324>)
 800fb26:	2200      	movs	r2, #0
 800fb28:	f7f0 ffec 	bl	8000b04 <__aeabi_dcmpge>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	d143      	bne.n	800fbb8 <__kernel_rem_pio2+0x2f8>
 800fb30:	4681      	mov	r9, r0
 800fb32:	2200      	movs	r2, #0
 800fb34:	2300      	movs	r3, #0
 800fb36:	4630      	mov	r0, r6
 800fb38:	4639      	mov	r1, r7
 800fb3a:	f7f0 ffc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	f000 80bf 	beq.w	800fcc2 <__kernel_rem_pio2+0x402>
 800fb44:	f108 33ff 	add.w	r3, r8, #4294967295
 800fb48:	2200      	movs	r2, #0
 800fb4a:	9900      	ldr	r1, [sp, #0]
 800fb4c:	428b      	cmp	r3, r1
 800fb4e:	da6e      	bge.n	800fc2e <__kernel_rem_pio2+0x36e>
 800fb50:	2a00      	cmp	r2, #0
 800fb52:	f000 8089 	beq.w	800fc68 <__kernel_rem_pio2+0x3a8>
 800fb56:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb5a:	ab0c      	add	r3, sp, #48	@ 0x30
 800fb5c:	f1ab 0b18 	sub.w	fp, fp, #24
 800fb60:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d0f6      	beq.n	800fb56 <__kernel_rem_pio2+0x296>
 800fb68:	4658      	mov	r0, fp
 800fb6a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800fbc8 <__kernel_rem_pio2+0x308>
 800fb6e:	f000 f9ff 	bl	800ff70 <scalbn>
 800fb72:	f108 0301 	add.w	r3, r8, #1
 800fb76:	00da      	lsls	r2, r3, #3
 800fb78:	9205      	str	r2, [sp, #20]
 800fb7a:	ec55 4b10 	vmov	r4, r5, d0
 800fb7e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800fb80:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800fbdc <__kernel_rem_pio2+0x31c>
 800fb84:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800fb88:	4646      	mov	r6, r8
 800fb8a:	f04f 0a00 	mov.w	sl, #0
 800fb8e:	2e00      	cmp	r6, #0
 800fb90:	f280 80cf 	bge.w	800fd32 <__kernel_rem_pio2+0x472>
 800fb94:	4644      	mov	r4, r8
 800fb96:	2c00      	cmp	r4, #0
 800fb98:	f2c0 80fd 	blt.w	800fd96 <__kernel_rem_pio2+0x4d6>
 800fb9c:	4b12      	ldr	r3, [pc, #72]	@ (800fbe8 <__kernel_rem_pio2+0x328>)
 800fb9e:	461f      	mov	r7, r3
 800fba0:	ab70      	add	r3, sp, #448	@ 0x1c0
 800fba2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fba6:	9306      	str	r3, [sp, #24]
 800fba8:	f04f 0a00 	mov.w	sl, #0
 800fbac:	f04f 0b00 	mov.w	fp, #0
 800fbb0:	2600      	movs	r6, #0
 800fbb2:	eba8 0504 	sub.w	r5, r8, r4
 800fbb6:	e0e2      	b.n	800fd7e <__kernel_rem_pio2+0x4be>
 800fbb8:	f04f 0902 	mov.w	r9, #2
 800fbbc:	e754      	b.n	800fa68 <__kernel_rem_pio2+0x1a8>
 800fbbe:	bf00      	nop
	...
 800fbcc:	3ff00000 	.word	0x3ff00000
 800fbd0:	080109f0 	.word	0x080109f0
 800fbd4:	40200000 	.word	0x40200000
 800fbd8:	3ff00000 	.word	0x3ff00000
 800fbdc:	3e700000 	.word	0x3e700000
 800fbe0:	41700000 	.word	0x41700000
 800fbe4:	3fe00000 	.word	0x3fe00000
 800fbe8:	080109b0 	.word	0x080109b0
 800fbec:	f854 3b04 	ldr.w	r3, [r4], #4
 800fbf0:	b945      	cbnz	r5, 800fc04 <__kernel_rem_pio2+0x344>
 800fbf2:	b123      	cbz	r3, 800fbfe <__kernel_rem_pio2+0x33e>
 800fbf4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800fbf8:	f844 3c04 	str.w	r3, [r4, #-4]
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	3201      	adds	r2, #1
 800fc00:	461d      	mov	r5, r3
 800fc02:	e738      	b.n	800fa76 <__kernel_rem_pio2+0x1b6>
 800fc04:	1acb      	subs	r3, r1, r3
 800fc06:	e7f7      	b.n	800fbf8 <__kernel_rem_pio2+0x338>
 800fc08:	f108 32ff 	add.w	r2, r8, #4294967295
 800fc0c:	ab0c      	add	r3, sp, #48	@ 0x30
 800fc0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc12:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fc16:	a90c      	add	r1, sp, #48	@ 0x30
 800fc18:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fc1c:	e739      	b.n	800fa92 <__kernel_rem_pio2+0x1d2>
 800fc1e:	f108 32ff 	add.w	r2, r8, #4294967295
 800fc22:	ab0c      	add	r3, sp, #48	@ 0x30
 800fc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc28:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fc2c:	e7f3      	b.n	800fc16 <__kernel_rem_pio2+0x356>
 800fc2e:	a90c      	add	r1, sp, #48	@ 0x30
 800fc30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fc34:	3b01      	subs	r3, #1
 800fc36:	430a      	orrs	r2, r1
 800fc38:	e787      	b.n	800fb4a <__kernel_rem_pio2+0x28a>
 800fc3a:	3401      	adds	r4, #1
 800fc3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fc40:	2a00      	cmp	r2, #0
 800fc42:	d0fa      	beq.n	800fc3a <__kernel_rem_pio2+0x37a>
 800fc44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc46:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fc4a:	eb0d 0503 	add.w	r5, sp, r3
 800fc4e:	9b06      	ldr	r3, [sp, #24]
 800fc50:	aa20      	add	r2, sp, #128	@ 0x80
 800fc52:	4443      	add	r3, r8
 800fc54:	f108 0701 	add.w	r7, r8, #1
 800fc58:	3d98      	subs	r5, #152	@ 0x98
 800fc5a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800fc5e:	4444      	add	r4, r8
 800fc60:	42bc      	cmp	r4, r7
 800fc62:	da04      	bge.n	800fc6e <__kernel_rem_pio2+0x3ae>
 800fc64:	46a0      	mov	r8, r4
 800fc66:	e6a2      	b.n	800f9ae <__kernel_rem_pio2+0xee>
 800fc68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc6a:	2401      	movs	r4, #1
 800fc6c:	e7e6      	b.n	800fc3c <__kernel_rem_pio2+0x37c>
 800fc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc70:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800fc74:	f7f0 fc56 	bl	8000524 <__aeabi_i2d>
 800fc78:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800ff40 <__kernel_rem_pio2+0x680>
 800fc7c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fc80:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fc84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fc88:	46b2      	mov	sl, r6
 800fc8a:	f04f 0800 	mov.w	r8, #0
 800fc8e:	9b05      	ldr	r3, [sp, #20]
 800fc90:	4598      	cmp	r8, r3
 800fc92:	dd05      	ble.n	800fca0 <__kernel_rem_pio2+0x3e0>
 800fc94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc98:	3701      	adds	r7, #1
 800fc9a:	eca5 7b02 	vstmia	r5!, {d7}
 800fc9e:	e7df      	b.n	800fc60 <__kernel_rem_pio2+0x3a0>
 800fca0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800fca4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fca8:	f7f0 fca6 	bl	80005f8 <__aeabi_dmul>
 800fcac:	4602      	mov	r2, r0
 800fcae:	460b      	mov	r3, r1
 800fcb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcb4:	f7f0 faea 	bl	800028c <__adddf3>
 800fcb8:	f108 0801 	add.w	r8, r8, #1
 800fcbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fcc0:	e7e5      	b.n	800fc8e <__kernel_rem_pio2+0x3ce>
 800fcc2:	f1cb 0000 	rsb	r0, fp, #0
 800fcc6:	ec47 6b10 	vmov	d0, r6, r7
 800fcca:	f000 f951 	bl	800ff70 <scalbn>
 800fcce:	ec55 4b10 	vmov	r4, r5, d0
 800fcd2:	4b9d      	ldr	r3, [pc, #628]	@ (800ff48 <__kernel_rem_pio2+0x688>)
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	4629      	mov	r1, r5
 800fcda:	f7f0 ff13 	bl	8000b04 <__aeabi_dcmpge>
 800fcde:	b300      	cbz	r0, 800fd22 <__kernel_rem_pio2+0x462>
 800fce0:	4b9a      	ldr	r3, [pc, #616]	@ (800ff4c <__kernel_rem_pio2+0x68c>)
 800fce2:	2200      	movs	r2, #0
 800fce4:	4620      	mov	r0, r4
 800fce6:	4629      	mov	r1, r5
 800fce8:	f7f0 fc86 	bl	80005f8 <__aeabi_dmul>
 800fcec:	f7f0 ff34 	bl	8000b58 <__aeabi_d2iz>
 800fcf0:	4606      	mov	r6, r0
 800fcf2:	f7f0 fc17 	bl	8000524 <__aeabi_i2d>
 800fcf6:	4b94      	ldr	r3, [pc, #592]	@ (800ff48 <__kernel_rem_pio2+0x688>)
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	f7f0 fc7d 	bl	80005f8 <__aeabi_dmul>
 800fcfe:	460b      	mov	r3, r1
 800fd00:	4602      	mov	r2, r0
 800fd02:	4629      	mov	r1, r5
 800fd04:	4620      	mov	r0, r4
 800fd06:	f7f0 fabf 	bl	8000288 <__aeabi_dsub>
 800fd0a:	f7f0 ff25 	bl	8000b58 <__aeabi_d2iz>
 800fd0e:	ab0c      	add	r3, sp, #48	@ 0x30
 800fd10:	f10b 0b18 	add.w	fp, fp, #24
 800fd14:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fd18:	f108 0801 	add.w	r8, r8, #1
 800fd1c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800fd20:	e722      	b.n	800fb68 <__kernel_rem_pio2+0x2a8>
 800fd22:	4620      	mov	r0, r4
 800fd24:	4629      	mov	r1, r5
 800fd26:	f7f0 ff17 	bl	8000b58 <__aeabi_d2iz>
 800fd2a:	ab0c      	add	r3, sp, #48	@ 0x30
 800fd2c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fd30:	e71a      	b.n	800fb68 <__kernel_rem_pio2+0x2a8>
 800fd32:	ab0c      	add	r3, sp, #48	@ 0x30
 800fd34:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fd38:	f7f0 fbf4 	bl	8000524 <__aeabi_i2d>
 800fd3c:	4622      	mov	r2, r4
 800fd3e:	462b      	mov	r3, r5
 800fd40:	f7f0 fc5a 	bl	80005f8 <__aeabi_dmul>
 800fd44:	4652      	mov	r2, sl
 800fd46:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800fd4a:	465b      	mov	r3, fp
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	4629      	mov	r1, r5
 800fd50:	f7f0 fc52 	bl	80005f8 <__aeabi_dmul>
 800fd54:	3e01      	subs	r6, #1
 800fd56:	4604      	mov	r4, r0
 800fd58:	460d      	mov	r5, r1
 800fd5a:	e718      	b.n	800fb8e <__kernel_rem_pio2+0x2ce>
 800fd5c:	9906      	ldr	r1, [sp, #24]
 800fd5e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800fd62:	9106      	str	r1, [sp, #24]
 800fd64:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800fd68:	f7f0 fc46 	bl	80005f8 <__aeabi_dmul>
 800fd6c:	4602      	mov	r2, r0
 800fd6e:	460b      	mov	r3, r1
 800fd70:	4650      	mov	r0, sl
 800fd72:	4659      	mov	r1, fp
 800fd74:	f7f0 fa8a 	bl	800028c <__adddf3>
 800fd78:	3601      	adds	r6, #1
 800fd7a:	4682      	mov	sl, r0
 800fd7c:	468b      	mov	fp, r1
 800fd7e:	9b00      	ldr	r3, [sp, #0]
 800fd80:	429e      	cmp	r6, r3
 800fd82:	dc01      	bgt.n	800fd88 <__kernel_rem_pio2+0x4c8>
 800fd84:	42b5      	cmp	r5, r6
 800fd86:	dae9      	bge.n	800fd5c <__kernel_rem_pio2+0x49c>
 800fd88:	ab48      	add	r3, sp, #288	@ 0x120
 800fd8a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800fd8e:	e9c5 ab00 	strd	sl, fp, [r5]
 800fd92:	3c01      	subs	r4, #1
 800fd94:	e6ff      	b.n	800fb96 <__kernel_rem_pio2+0x2d6>
 800fd96:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800fd98:	2b02      	cmp	r3, #2
 800fd9a:	dc0b      	bgt.n	800fdb4 <__kernel_rem_pio2+0x4f4>
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	dc39      	bgt.n	800fe14 <__kernel_rem_pio2+0x554>
 800fda0:	d05d      	beq.n	800fe5e <__kernel_rem_pio2+0x59e>
 800fda2:	9b02      	ldr	r3, [sp, #8]
 800fda4:	f003 0007 	and.w	r0, r3, #7
 800fda8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800fdac:	ecbd 8b02 	vpop	{d8}
 800fdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdb4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800fdb6:	2b03      	cmp	r3, #3
 800fdb8:	d1f3      	bne.n	800fda2 <__kernel_rem_pio2+0x4e2>
 800fdba:	9b05      	ldr	r3, [sp, #20]
 800fdbc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fdc0:	eb0d 0403 	add.w	r4, sp, r3
 800fdc4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800fdc8:	4625      	mov	r5, r4
 800fdca:	46c2      	mov	sl, r8
 800fdcc:	f1ba 0f00 	cmp.w	sl, #0
 800fdd0:	f1a5 0508 	sub.w	r5, r5, #8
 800fdd4:	dc6b      	bgt.n	800feae <__kernel_rem_pio2+0x5ee>
 800fdd6:	4645      	mov	r5, r8
 800fdd8:	2d01      	cmp	r5, #1
 800fdda:	f1a4 0408 	sub.w	r4, r4, #8
 800fdde:	f300 8087 	bgt.w	800fef0 <__kernel_rem_pio2+0x630>
 800fde2:	9c05      	ldr	r4, [sp, #20]
 800fde4:	ab48      	add	r3, sp, #288	@ 0x120
 800fde6:	441c      	add	r4, r3
 800fde8:	2000      	movs	r0, #0
 800fdea:	2100      	movs	r1, #0
 800fdec:	f1b8 0f01 	cmp.w	r8, #1
 800fdf0:	f300 809c 	bgt.w	800ff2c <__kernel_rem_pio2+0x66c>
 800fdf4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800fdf8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800fdfc:	f1b9 0f00 	cmp.w	r9, #0
 800fe00:	f040 80a6 	bne.w	800ff50 <__kernel_rem_pio2+0x690>
 800fe04:	9b04      	ldr	r3, [sp, #16]
 800fe06:	e9c3 7800 	strd	r7, r8, [r3]
 800fe0a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800fe0e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fe12:	e7c6      	b.n	800fda2 <__kernel_rem_pio2+0x4e2>
 800fe14:	9d05      	ldr	r5, [sp, #20]
 800fe16:	ab48      	add	r3, sp, #288	@ 0x120
 800fe18:	441d      	add	r5, r3
 800fe1a:	4644      	mov	r4, r8
 800fe1c:	2000      	movs	r0, #0
 800fe1e:	2100      	movs	r1, #0
 800fe20:	2c00      	cmp	r4, #0
 800fe22:	da35      	bge.n	800fe90 <__kernel_rem_pio2+0x5d0>
 800fe24:	f1b9 0f00 	cmp.w	r9, #0
 800fe28:	d038      	beq.n	800fe9c <__kernel_rem_pio2+0x5dc>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fe30:	9c04      	ldr	r4, [sp, #16]
 800fe32:	e9c4 2300 	strd	r2, r3, [r4]
 800fe36:	4602      	mov	r2, r0
 800fe38:	460b      	mov	r3, r1
 800fe3a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800fe3e:	f7f0 fa23 	bl	8000288 <__aeabi_dsub>
 800fe42:	ad4a      	add	r5, sp, #296	@ 0x128
 800fe44:	2401      	movs	r4, #1
 800fe46:	45a0      	cmp	r8, r4
 800fe48:	da2b      	bge.n	800fea2 <__kernel_rem_pio2+0x5e2>
 800fe4a:	f1b9 0f00 	cmp.w	r9, #0
 800fe4e:	d002      	beq.n	800fe56 <__kernel_rem_pio2+0x596>
 800fe50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fe54:	4619      	mov	r1, r3
 800fe56:	9b04      	ldr	r3, [sp, #16]
 800fe58:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fe5c:	e7a1      	b.n	800fda2 <__kernel_rem_pio2+0x4e2>
 800fe5e:	9c05      	ldr	r4, [sp, #20]
 800fe60:	ab48      	add	r3, sp, #288	@ 0x120
 800fe62:	441c      	add	r4, r3
 800fe64:	2000      	movs	r0, #0
 800fe66:	2100      	movs	r1, #0
 800fe68:	f1b8 0f00 	cmp.w	r8, #0
 800fe6c:	da09      	bge.n	800fe82 <__kernel_rem_pio2+0x5c2>
 800fe6e:	f1b9 0f00 	cmp.w	r9, #0
 800fe72:	d002      	beq.n	800fe7a <__kernel_rem_pio2+0x5ba>
 800fe74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fe78:	4619      	mov	r1, r3
 800fe7a:	9b04      	ldr	r3, [sp, #16]
 800fe7c:	e9c3 0100 	strd	r0, r1, [r3]
 800fe80:	e78f      	b.n	800fda2 <__kernel_rem_pio2+0x4e2>
 800fe82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fe86:	f7f0 fa01 	bl	800028c <__adddf3>
 800fe8a:	f108 38ff 	add.w	r8, r8, #4294967295
 800fe8e:	e7eb      	b.n	800fe68 <__kernel_rem_pio2+0x5a8>
 800fe90:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800fe94:	f7f0 f9fa 	bl	800028c <__adddf3>
 800fe98:	3c01      	subs	r4, #1
 800fe9a:	e7c1      	b.n	800fe20 <__kernel_rem_pio2+0x560>
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	460b      	mov	r3, r1
 800fea0:	e7c6      	b.n	800fe30 <__kernel_rem_pio2+0x570>
 800fea2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800fea6:	f7f0 f9f1 	bl	800028c <__adddf3>
 800feaa:	3401      	adds	r4, #1
 800feac:	e7cb      	b.n	800fe46 <__kernel_rem_pio2+0x586>
 800feae:	ed95 7b00 	vldr	d7, [r5]
 800feb2:	ed8d 7b00 	vstr	d7, [sp]
 800feb6:	ed95 7b02 	vldr	d7, [r5, #8]
 800feba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800febe:	ec53 2b17 	vmov	r2, r3, d7
 800fec2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fec6:	f7f0 f9e1 	bl	800028c <__adddf3>
 800feca:	4602      	mov	r2, r0
 800fecc:	460b      	mov	r3, r1
 800fece:	4606      	mov	r6, r0
 800fed0:	460f      	mov	r7, r1
 800fed2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fed6:	f7f0 f9d7 	bl	8000288 <__aeabi_dsub>
 800feda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fede:	f7f0 f9d5 	bl	800028c <__adddf3>
 800fee2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fee6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800feea:	e9c5 6700 	strd	r6, r7, [r5]
 800feee:	e76d      	b.n	800fdcc <__kernel_rem_pio2+0x50c>
 800fef0:	ed94 7b00 	vldr	d7, [r4]
 800fef4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800fef8:	ec51 0b17 	vmov	r0, r1, d7
 800fefc:	4652      	mov	r2, sl
 800fefe:	465b      	mov	r3, fp
 800ff00:	ed8d 7b00 	vstr	d7, [sp]
 800ff04:	f7f0 f9c2 	bl	800028c <__adddf3>
 800ff08:	4602      	mov	r2, r0
 800ff0a:	460b      	mov	r3, r1
 800ff0c:	4606      	mov	r6, r0
 800ff0e:	460f      	mov	r7, r1
 800ff10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff14:	f7f0 f9b8 	bl	8000288 <__aeabi_dsub>
 800ff18:	4652      	mov	r2, sl
 800ff1a:	465b      	mov	r3, fp
 800ff1c:	f7f0 f9b6 	bl	800028c <__adddf3>
 800ff20:	3d01      	subs	r5, #1
 800ff22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ff26:	e9c4 6700 	strd	r6, r7, [r4]
 800ff2a:	e755      	b.n	800fdd8 <__kernel_rem_pio2+0x518>
 800ff2c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ff30:	f7f0 f9ac 	bl	800028c <__adddf3>
 800ff34:	f108 38ff 	add.w	r8, r8, #4294967295
 800ff38:	e758      	b.n	800fdec <__kernel_rem_pio2+0x52c>
 800ff3a:	bf00      	nop
 800ff3c:	f3af 8000 	nop.w
	...
 800ff48:	41700000 	.word	0x41700000
 800ff4c:	3e700000 	.word	0x3e700000
 800ff50:	9b04      	ldr	r3, [sp, #16]
 800ff52:	9a04      	ldr	r2, [sp, #16]
 800ff54:	601f      	str	r7, [r3, #0]
 800ff56:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800ff5a:	605c      	str	r4, [r3, #4]
 800ff5c:	609d      	str	r5, [r3, #8]
 800ff5e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ff62:	60d3      	str	r3, [r2, #12]
 800ff64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff68:	6110      	str	r0, [r2, #16]
 800ff6a:	6153      	str	r3, [r2, #20]
 800ff6c:	e719      	b.n	800fda2 <__kernel_rem_pio2+0x4e2>
 800ff6e:	bf00      	nop

0800ff70 <scalbn>:
 800ff70:	b570      	push	{r4, r5, r6, lr}
 800ff72:	ec55 4b10 	vmov	r4, r5, d0
 800ff76:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ff7a:	4606      	mov	r6, r0
 800ff7c:	462b      	mov	r3, r5
 800ff7e:	b991      	cbnz	r1, 800ffa6 <scalbn+0x36>
 800ff80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ff84:	4323      	orrs	r3, r4
 800ff86:	d03d      	beq.n	8010004 <scalbn+0x94>
 800ff88:	4b35      	ldr	r3, [pc, #212]	@ (8010060 <scalbn+0xf0>)
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	4629      	mov	r1, r5
 800ff8e:	2200      	movs	r2, #0
 800ff90:	f7f0 fb32 	bl	80005f8 <__aeabi_dmul>
 800ff94:	4b33      	ldr	r3, [pc, #204]	@ (8010064 <scalbn+0xf4>)
 800ff96:	429e      	cmp	r6, r3
 800ff98:	4604      	mov	r4, r0
 800ff9a:	460d      	mov	r5, r1
 800ff9c:	da0f      	bge.n	800ffbe <scalbn+0x4e>
 800ff9e:	a328      	add	r3, pc, #160	@ (adr r3, 8010040 <scalbn+0xd0>)
 800ffa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa4:	e01e      	b.n	800ffe4 <scalbn+0x74>
 800ffa6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ffaa:	4291      	cmp	r1, r2
 800ffac:	d10b      	bne.n	800ffc6 <scalbn+0x56>
 800ffae:	4622      	mov	r2, r4
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	4629      	mov	r1, r5
 800ffb4:	f7f0 f96a 	bl	800028c <__adddf3>
 800ffb8:	4604      	mov	r4, r0
 800ffba:	460d      	mov	r5, r1
 800ffbc:	e022      	b.n	8010004 <scalbn+0x94>
 800ffbe:	460b      	mov	r3, r1
 800ffc0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ffc4:	3936      	subs	r1, #54	@ 0x36
 800ffc6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ffca:	4296      	cmp	r6, r2
 800ffcc:	dd0d      	ble.n	800ffea <scalbn+0x7a>
 800ffce:	2d00      	cmp	r5, #0
 800ffd0:	a11d      	add	r1, pc, #116	@ (adr r1, 8010048 <scalbn+0xd8>)
 800ffd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffd6:	da02      	bge.n	800ffde <scalbn+0x6e>
 800ffd8:	a11d      	add	r1, pc, #116	@ (adr r1, 8010050 <scalbn+0xe0>)
 800ffda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffde:	a31a      	add	r3, pc, #104	@ (adr r3, 8010048 <scalbn+0xd8>)
 800ffe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe4:	f7f0 fb08 	bl	80005f8 <__aeabi_dmul>
 800ffe8:	e7e6      	b.n	800ffb8 <scalbn+0x48>
 800ffea:	1872      	adds	r2, r6, r1
 800ffec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800fff0:	428a      	cmp	r2, r1
 800fff2:	dcec      	bgt.n	800ffce <scalbn+0x5e>
 800fff4:	2a00      	cmp	r2, #0
 800fff6:	dd08      	ble.n	801000a <scalbn+0x9a>
 800fff8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fffc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010000:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010004:	ec45 4b10 	vmov	d0, r4, r5
 8010008:	bd70      	pop	{r4, r5, r6, pc}
 801000a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801000e:	da08      	bge.n	8010022 <scalbn+0xb2>
 8010010:	2d00      	cmp	r5, #0
 8010012:	a10b      	add	r1, pc, #44	@ (adr r1, 8010040 <scalbn+0xd0>)
 8010014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010018:	dac1      	bge.n	800ff9e <scalbn+0x2e>
 801001a:	a10f      	add	r1, pc, #60	@ (adr r1, 8010058 <scalbn+0xe8>)
 801001c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010020:	e7bd      	b.n	800ff9e <scalbn+0x2e>
 8010022:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010026:	3236      	adds	r2, #54	@ 0x36
 8010028:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801002c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010030:	4620      	mov	r0, r4
 8010032:	4b0d      	ldr	r3, [pc, #52]	@ (8010068 <scalbn+0xf8>)
 8010034:	4629      	mov	r1, r5
 8010036:	2200      	movs	r2, #0
 8010038:	e7d4      	b.n	800ffe4 <scalbn+0x74>
 801003a:	bf00      	nop
 801003c:	f3af 8000 	nop.w
 8010040:	c2f8f359 	.word	0xc2f8f359
 8010044:	01a56e1f 	.word	0x01a56e1f
 8010048:	8800759c 	.word	0x8800759c
 801004c:	7e37e43c 	.word	0x7e37e43c
 8010050:	8800759c 	.word	0x8800759c
 8010054:	fe37e43c 	.word	0xfe37e43c
 8010058:	c2f8f359 	.word	0xc2f8f359
 801005c:	81a56e1f 	.word	0x81a56e1f
 8010060:	43500000 	.word	0x43500000
 8010064:	ffff3cb0 	.word	0xffff3cb0
 8010068:	3c900000 	.word	0x3c900000
 801006c:	00000000 	.word	0x00000000

08010070 <floor>:
 8010070:	ec51 0b10 	vmov	r0, r1, d0
 8010074:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801007c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010080:	2e13      	cmp	r6, #19
 8010082:	460c      	mov	r4, r1
 8010084:	4605      	mov	r5, r0
 8010086:	4680      	mov	r8, r0
 8010088:	dc34      	bgt.n	80100f4 <floor+0x84>
 801008a:	2e00      	cmp	r6, #0
 801008c:	da17      	bge.n	80100be <floor+0x4e>
 801008e:	a332      	add	r3, pc, #200	@ (adr r3, 8010158 <floor+0xe8>)
 8010090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010094:	f7f0 f8fa 	bl	800028c <__adddf3>
 8010098:	2200      	movs	r2, #0
 801009a:	2300      	movs	r3, #0
 801009c:	f7f0 fd3c 	bl	8000b18 <__aeabi_dcmpgt>
 80100a0:	b150      	cbz	r0, 80100b8 <floor+0x48>
 80100a2:	2c00      	cmp	r4, #0
 80100a4:	da55      	bge.n	8010152 <floor+0xe2>
 80100a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80100aa:	432c      	orrs	r4, r5
 80100ac:	2500      	movs	r5, #0
 80100ae:	42ac      	cmp	r4, r5
 80100b0:	4c2b      	ldr	r4, [pc, #172]	@ (8010160 <floor+0xf0>)
 80100b2:	bf08      	it	eq
 80100b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80100b8:	4621      	mov	r1, r4
 80100ba:	4628      	mov	r0, r5
 80100bc:	e023      	b.n	8010106 <floor+0x96>
 80100be:	4f29      	ldr	r7, [pc, #164]	@ (8010164 <floor+0xf4>)
 80100c0:	4137      	asrs	r7, r6
 80100c2:	ea01 0307 	and.w	r3, r1, r7
 80100c6:	4303      	orrs	r3, r0
 80100c8:	d01d      	beq.n	8010106 <floor+0x96>
 80100ca:	a323      	add	r3, pc, #140	@ (adr r3, 8010158 <floor+0xe8>)
 80100cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d0:	f7f0 f8dc 	bl	800028c <__adddf3>
 80100d4:	2200      	movs	r2, #0
 80100d6:	2300      	movs	r3, #0
 80100d8:	f7f0 fd1e 	bl	8000b18 <__aeabi_dcmpgt>
 80100dc:	2800      	cmp	r0, #0
 80100de:	d0eb      	beq.n	80100b8 <floor+0x48>
 80100e0:	2c00      	cmp	r4, #0
 80100e2:	bfbe      	ittt	lt
 80100e4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80100e8:	4133      	asrlt	r3, r6
 80100ea:	18e4      	addlt	r4, r4, r3
 80100ec:	ea24 0407 	bic.w	r4, r4, r7
 80100f0:	2500      	movs	r5, #0
 80100f2:	e7e1      	b.n	80100b8 <floor+0x48>
 80100f4:	2e33      	cmp	r6, #51	@ 0x33
 80100f6:	dd0a      	ble.n	801010e <floor+0x9e>
 80100f8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80100fc:	d103      	bne.n	8010106 <floor+0x96>
 80100fe:	4602      	mov	r2, r0
 8010100:	460b      	mov	r3, r1
 8010102:	f7f0 f8c3 	bl	800028c <__adddf3>
 8010106:	ec41 0b10 	vmov	d0, r0, r1
 801010a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801010e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010112:	f04f 37ff 	mov.w	r7, #4294967295
 8010116:	40df      	lsrs	r7, r3
 8010118:	4207      	tst	r7, r0
 801011a:	d0f4      	beq.n	8010106 <floor+0x96>
 801011c:	a30e      	add	r3, pc, #56	@ (adr r3, 8010158 <floor+0xe8>)
 801011e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010122:	f7f0 f8b3 	bl	800028c <__adddf3>
 8010126:	2200      	movs	r2, #0
 8010128:	2300      	movs	r3, #0
 801012a:	f7f0 fcf5 	bl	8000b18 <__aeabi_dcmpgt>
 801012e:	2800      	cmp	r0, #0
 8010130:	d0c2      	beq.n	80100b8 <floor+0x48>
 8010132:	2c00      	cmp	r4, #0
 8010134:	da0a      	bge.n	801014c <floor+0xdc>
 8010136:	2e14      	cmp	r6, #20
 8010138:	d101      	bne.n	801013e <floor+0xce>
 801013a:	3401      	adds	r4, #1
 801013c:	e006      	b.n	801014c <floor+0xdc>
 801013e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010142:	2301      	movs	r3, #1
 8010144:	40b3      	lsls	r3, r6
 8010146:	441d      	add	r5, r3
 8010148:	4545      	cmp	r5, r8
 801014a:	d3f6      	bcc.n	801013a <floor+0xca>
 801014c:	ea25 0507 	bic.w	r5, r5, r7
 8010150:	e7b2      	b.n	80100b8 <floor+0x48>
 8010152:	2500      	movs	r5, #0
 8010154:	462c      	mov	r4, r5
 8010156:	e7af      	b.n	80100b8 <floor+0x48>
 8010158:	8800759c 	.word	0x8800759c
 801015c:	7e37e43c 	.word	0x7e37e43c
 8010160:	bff00000 	.word	0xbff00000
 8010164:	000fffff 	.word	0x000fffff

08010168 <_init>:
 8010168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801016a:	bf00      	nop
 801016c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801016e:	bc08      	pop	{r3}
 8010170:	469e      	mov	lr, r3
 8010172:	4770      	bx	lr

08010174 <_fini>:
 8010174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010176:	bf00      	nop
 8010178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801017a:	bc08      	pop	{r3}
 801017c:	469e      	mov	lr, r3
 801017e:	4770      	bx	lr
