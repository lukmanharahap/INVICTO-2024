
R2_Farmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  08011868  08011868  00012868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012130  08012130  000142b0  2**0
                  CONTENTS
  4 .ARM          00000008  08012130  08012130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012138  08012138  000142b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012138  08012138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801213c  0801213c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b0  20000000  08012140  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000142b0  2**0
                  CONTENTS
 10 .bss          000005e8  200002b0  200002b0  000142b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  000142b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000142b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000144aa  00000000  00000000  000142e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c1d  00000000  00000000  0002878a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  0002b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e52  00000000  00000000  0002c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001221c  00000000  00000000  0002d41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000056aa  00000000  00000000  0003f636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00044ce0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006758  00000000  00000000  00044d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0004b47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b0 	.word	0x200002b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011850 	.word	0x08011850

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b4 	.word	0x200002b4
 80001cc:	08011850 	.word	0x08011850

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <motorDirection>:
        {GPIOD, GPIO_PIN_3, GPIOD, GPIO_PIN_4, TIM_CHANNEL_3, &htim2},		//9
        {GPIOB, GPIO_PIN_1, GPIOB, GPIO_PIN_0, TIM_CHANNEL_4, &htim2}		//10
};

void motorDirection(uint8_t motor, uint8_t direction)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
    Motor *currentMotor = &motors[motor - 1];
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <motorDirection+0x74>)
 8001002:	4413      	add	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
    GPIO_PinState dir1_state;
    GPIO_PinState dir2_state;
    switch (direction)
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d006      	beq.n	800101a <motorDirection+0x36>
 800100c:	2b02      	cmp	r3, #2
 800100e:	d109      	bne.n	8001024 <motorDirection+0x40>
    {
    case forward:
        dir1_state = GPIO_PIN_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_SET;
 8001014:	2301      	movs	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
        break;
 8001018:	e009      	b.n	800102e <motorDirection+0x4a>
    case backward:
        dir1_state = GPIO_PIN_SET;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	73bb      	strb	r3, [r7, #14]
        break;
 8001022:	e004      	b.n	800102e <motorDirection+0x4a>
    default:
        dir1_state = GPIO_PIN_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
        dir2_state = GPIO_PIN_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
        break;
 800102c:	bf00      	nop
    }
    HAL_GPIO_WritePin(currentMotor->dir1_port, currentMotor->dir1_pin, dir1_state);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	4619      	mov	r1, r3
 800103a:	f007 f94d 	bl	80082d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(currentMotor->dir2_port, currentMotor->dir2_pin, dir2_state);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	6898      	ldr	r0, [r3, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	899b      	ldrh	r3, [r3, #12]
 8001046:	7bba      	ldrb	r2, [r7, #14]
 8001048:	4619      	mov	r1, r3
 800104a:	f007 f945 	bl	80082d8 <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000

0800105c <setMotorSpeed>:

void setMotorSpeed(uint8_t motor, double speed)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	ed87 0b00 	vstr	d0, [r7]
 8001068:	73fb      	strb	r3, [r7, #15]
    Motor *currentMotor = &motors[motor - 1];
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4a33      	ldr	r2, [pc, #204]	@ (8001144 <setMotorSpeed+0xe8>)
 8001078:	4413      	add	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
    if (speed > 0)
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001088:	f7ff fd46 	bl	8000b18 <__aeabi_dcmpgt>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <setMotorSpeed+0x42>
    {
        motorDirection(motor, forward);
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffa4 	bl	8000fe4 <motorDirection>
 800109c:	e01b      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else if (speed < 0)
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010aa:	f7ff fd17 	bl	8000adc <__aeabi_dcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <setMotorSpeed+0x70>
    {
        motorDirection(motor, backward);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2101      	movs	r1, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff93 	bl	8000fe4 <motorDirection>
        speed = -speed;
 80010be:	683c      	ldr	r4, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80010c6:	e9c7 4500 	strd	r4, r5, [r7]
 80010ca:	e004      	b.n	80010d6 <setMotorSpeed+0x7a>
    }
    else
    {
        motorDirection(motor, stop);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff87 	bl	8000fe4 <motorDirection>
    }
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	7b9b      	ldrb	r3, [r3, #14]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d109      	bne.n	80010f2 <setMotorSpeed+0x96>
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	681c      	ldr	r4, [r3, #0]
 80010e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010e8:	f7ff fd5e 	bl	8000ba8 <__aeabi_d2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80010f0:	e024      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	7b9b      	ldrb	r3, [r3, #14]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d109      	bne.n	800110e <setMotorSpeed+0xb2>
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800110c:	e016      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	7b9b      	ldrb	r3, [r3, #14]
 8001112:	2b08      	cmp	r3, #8
 8001114:	d109      	bne.n	800112a <setMotorSpeed+0xce>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001120:	f7ff fd42 	bl	8000ba8 <__aeabi_d2uiz>
 8001124:	4603      	mov	r3, r0
 8001126:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8001128:	e008      	b.n	800113c <setMotorSpeed+0xe0>
    __HAL_TIM_SET_COMPARE(currentMotor->timer, currentMotor->channel, (uint32_t) speed);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001134:	f7ff fd38 	bl	8000ba8 <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bdb0      	pop	{r4, r5, r7, pc}
 8001144:	20000000 	.word	0x20000000

08001148 <Inverse_Kinematics>:

void Inverse_Kinematics(double Vx, double Vy, double W)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b0b8      	sub	sp, #224	@ 0xe0
 800114c:	af00      	add	r7, sp, #0
 800114e:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
 8001152:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8001156:	ed87 2b18 	vstr	d2, [r7, #96]	@ 0x60
    double R = 7.6;
 800115a:	a3c2      	add	r3, pc, #776	@ (adr r3, 8001464 <Inverse_Kinematics+0x31c>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
    double minThreshold = 1000;
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4bbd      	ldr	r3, [pc, #756]	@ (8001460 <Inverse_Kinematics+0x318>)
 800116a:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
    double wheelMaxSpeed = 5500;
 800116e:	a3a6      	add	r3, pc, #664	@ (adr r3, 8001408 <Inverse_Kinematics+0x2c0>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double M1 = (-sin(M_PI_4) * Vx + cos(M_PI_4) * Vy - R * W)*1.016985;
 8001178:	a3a5      	add	r3, pc, #660	@ (adr r3, 8001410 <Inverse_Kinematics+0x2c8>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001182:	f7ff fa39 	bl	80005f8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4614      	mov	r4, r2
 800118c:	461d      	mov	r5, r3
 800118e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8001418 <Inverse_Kinematics+0x2d0>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001198:	f7ff fa2e 	bl	80005f8 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4620      	mov	r0, r4
 80011a2:	4629      	mov	r1, r5
 80011a4:	f7ff f872 	bl	800028c <__adddf3>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4614      	mov	r4, r2
 80011ae:	461d      	mov	r5, r3
 80011b0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80011b4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80011b8:	f7ff fa1e 	bl	80005f8 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff f860 	bl	8000288 <__aeabi_dsub>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	a393      	add	r3, pc, #588	@ (adr r3, 8001420 <Inverse_Kinematics+0x2d8>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fa0f 	bl	80005f8 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double M2 = (-sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W);
 80011e2:	a391      	add	r3, pc, #580	@ (adr r3, 8001428 <Inverse_Kinematics+0x2e0>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4614      	mov	r4, r2
 80011f6:	461d      	mov	r5, r3
 80011f8:	a385      	add	r3, pc, #532	@ (adr r3, 8001410 <Inverse_Kinematics+0x2c8>)
 80011fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001202:	f7ff f9f9 	bl	80005f8 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4620      	mov	r0, r4
 800120c:	4629      	mov	r1, r5
 800120e:	f7ff f83d 	bl	800028c <__adddf3>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4614      	mov	r4, r2
 8001218:	461d      	mov	r5, r3
 800121a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800121e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001222:	f7ff f9e9 	bl	80005f8 <__aeabi_dmul>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4620      	mov	r0, r4
 800122c:	4629      	mov	r1, r5
 800122e:	f7ff f82b 	bl	8000288 <__aeabi_dsub>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    double M3 = (-sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W)*1.05296;
 800123a:	a37d      	add	r3, pc, #500	@ (adr r3, 8001430 <Inverse_Kinematics+0x2e8>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001244:	f7ff f9d8 	bl	80005f8 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4614      	mov	r4, r2
 800124e:	461d      	mov	r5, r3
 8001250:	a379      	add	r3, pc, #484	@ (adr r3, 8001438 <Inverse_Kinematics+0x2f0>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800125a:	f7ff f9cd 	bl	80005f8 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff f811 	bl	800028c <__adddf3>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4614      	mov	r4, r2
 8001270:	461d      	mov	r5, r3
 8001272:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001276:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800127a:	f7ff f9bd 	bl	80005f8 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4620      	mov	r0, r4
 8001284:	4629      	mov	r1, r5
 8001286:	f7fe ffff 	bl	8000288 <__aeabi_dsub>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	a36b      	add	r3, pc, #428	@ (adr r3, 8001440 <Inverse_Kinematics+0x2f8>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9ae 	bl	80005f8 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
    double M4 = (-sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W)*0.95038;
 80012a4:	a368      	add	r3, pc, #416	@ (adr r3, 8001448 <Inverse_Kinematics+0x300>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80012ae:	f7ff f9a3 	bl	80005f8 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	a365      	add	r3, pc, #404	@ (adr r3, 8001450 <Inverse_Kinematics+0x308>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80012c4:	f7ff f998 	bl	80005f8 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7fe ffdc 	bl	800028c <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4614      	mov	r4, r2
 80012da:	461d      	mov	r5, r3
 80012dc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80012e0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80012e4:	f7ff f988 	bl	80005f8 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4620      	mov	r0, r4
 80012ee:	4629      	mov	r1, r5
 80012f0:	f7fe ffca 	bl	8000288 <__aeabi_dsub>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	a356      	add	r3, pc, #344	@ (adr r3, 8001458 <Inverse_Kinematics+0x310>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff f979 	bl	80005f8 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0

    double maxM = fmax(fabs(M1), fmax(fabs(M2), fmax(fabs(M3), fabs(M4))));
 800130e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001312:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800131c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800131e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001322:	633b      	str	r3, [r7, #48]	@ 0x30
 8001324:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800132c:	637b      	str	r3, [r7, #52]	@ 0x34
 800132e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001334:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001338:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800133e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001342:	623b      	str	r3, [r7, #32]
 8001344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001348:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
 800134e:	ed97 1b08 	vldr	d1, [r7, #32]
 8001352:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001356:	f00e fdd2 	bl	800fefe <fmax>
 800135a:	eeb0 7a40 	vmov.f32	s14, s0
 800135e:	eef0 7a60 	vmov.f32	s15, s1
 8001362:	eeb0 1a47 	vmov.f32	s2, s14
 8001366:	eef0 1a67 	vmov.f32	s3, s15
 800136a:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800136e:	f00e fdc6 	bl	800fefe <fmax>
 8001372:	eeb0 7a40 	vmov.f32	s14, s0
 8001376:	eef0 7a60 	vmov.f32	s15, s1
 800137a:	eeb0 1a47 	vmov.f32	s2, s14
 800137e:	eef0 1a67 	vmov.f32	s3, s15
 8001382:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001386:	f00e fdba 	bl	800fefe <fmax>
 800138a:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0

    if (maxM > wheelMaxSpeed) {
 800138e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8001392:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001396:	f7ff fbbf 	bl	8000b18 <__aeabi_dcmpgt>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d069      	beq.n	8001474 <Inverse_Kinematics+0x32c>
        double scale = wheelMaxSpeed / maxM;
 80013a0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80013a4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80013a8:	f7ff fa50 	bl	800084c <__aeabi_ddiv>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
        M1 *= scale;
 80013b4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013b8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80013bc:	f7ff f91c 	bl	80005f8 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
        M2 *= scale;
 80013c8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013cc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80013d0:	f7ff f912 	bl	80005f8 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
        M3 *= scale;
 80013dc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013e0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80013e4:	f7ff f908 	bl	80005f8 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
        M4 *= scale;
 80013f0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80013f4:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80013f8:	f7ff f8fe 	bl	80005f8 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
 8001404:	e036      	b.n	8001474 <Inverse_Kinematics+0x32c>
 8001406:	bf00      	nop
 8001408:	00000000 	.word	0x00000000
 800140c:	40b57c00 	.word	0x40b57c00
 8001410:	667f3bcc 	.word	0x667f3bcc
 8001414:	bfe6a09e 	.word	0xbfe6a09e
 8001418:	667f3bcd 	.word	0x667f3bcd
 800141c:	3fe6a09e 	.word	0x3fe6a09e
 8001420:	10385c68 	.word	0x10385c68
 8001424:	3ff04592 	.word	0x3ff04592
 8001428:	667f3bcd 	.word	0x667f3bcd
 800142c:	bfe6a09e 	.word	0xbfe6a09e
 8001430:	667f3bcc 	.word	0x667f3bcc
 8001434:	3fe6a09e 	.word	0x3fe6a09e
 8001438:	667f3bce 	.word	0x667f3bce
 800143c:	bfe6a09e 	.word	0xbfe6a09e
 8001440:	95bff045 	.word	0x95bff045
 8001444:	3ff0d8ec 	.word	0x3ff0d8ec
 8001448:	667f3bce 	.word	0x667f3bce
 800144c:	3fe6a09e 	.word	0x3fe6a09e
 8001450:	667f3bcb 	.word	0x667f3bcb
 8001454:	3fe6a09e 	.word	0x3fe6a09e
 8001458:	5158b828 	.word	0x5158b828
 800145c:	3fee6983 	.word	0x3fee6983
 8001460:	408f4000 	.word	0x408f4000
 8001464:	66666666 	.word	0x66666666
 8001468:	401e6666 	.word	0x401e6666
	...
    }

    double V1 = (fabs(M1) > minThreshold) ? M1 : (M1 < 0) ? -minThreshold : ((M1 > 0) ? minThreshold : 0);
 8001474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800147e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001488:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800148c:	f7ff fb26 	bl	8000adc <__aeabi_dcmplt>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d004      	beq.n	80014a0 <Inverse_Kinematics+0x358>
 8001496:	ed97 7b36 	vldr	d7, [r7, #216]	@ 0xd8
 800149a:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800149e:	e027      	b.n	80014f0 <Inverse_Kinematics+0x3a8>
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80014ac:	f7ff fb16 	bl	8000adc <__aeabi_dcmplt>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d008      	beq.n	80014c8 <Inverse_Kinematics+0x380>
 80014b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80014ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80014bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80014c6:	e013      	b.n	80014f0 <Inverse_Kinematics+0x3a8>
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 80014d4:	f7ff fb20 	bl	8000b18 <__aeabi_dcmpgt>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d004      	beq.n	80014e8 <Inverse_Kinematics+0x3a0>
 80014de:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 80014e2:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80014e6:	e003      	b.n	80014f0 <Inverse_Kinematics+0x3a8>
 80014e8:	ed1f 7b20 	vldr	d7, [pc, #-128]	@ 800146c <Inverse_Kinematics+0x324>
 80014ec:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80014f0:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80014f4:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
    double V2 = (fabs(M2) > minThreshold) ? M2 : (M2 < 0) ? -minThreshold : ((M2 > 0) ? minThreshold : 0);
 80014f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001502:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800150c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001510:	f7ff fae4 	bl	8000adc <__aeabi_dcmplt>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d004      	beq.n	8001524 <Inverse_Kinematics+0x3dc>
 800151a:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 800151e:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001522:	e027      	b.n	8001574 <Inverse_Kinematics+0x42c>
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001530:	f7ff fad4 	bl	8000adc <__aeabi_dcmplt>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <Inverse_Kinematics+0x404>
 800153a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800153e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001540:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001544:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001548:	657b      	str	r3, [r7, #84]	@ 0x54
 800154a:	e013      	b.n	8001574 <Inverse_Kinematics+0x42c>
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001558:	f7ff fade 	bl	8000b18 <__aeabi_dcmpgt>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <Inverse_Kinematics+0x424>
 8001562:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8001566:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 800156a:	e003      	b.n	8001574 <Inverse_Kinematics+0x42c>
 800156c:	ed1f 7b41 	vldr	d7, [pc, #-260]	@ 800146c <Inverse_Kinematics+0x324>
 8001570:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8001574:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001578:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    double V3 = (fabs(M3) > minThreshold) ? M3 : (M3 < 0) ? -minThreshold : ((M3 > 0) ? minThreshold : 0);
 800157c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001586:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001590:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001594:	f7ff faa2 	bl	8000adc <__aeabi_dcmplt>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <Inverse_Kinematics+0x460>
 800159e:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 80015a2:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80015a6:	e027      	b.n	80015f8 <Inverse_Kinematics+0x4b0>
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80015b4:	f7ff fa92 	bl	8000adc <__aeabi_dcmplt>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d008      	beq.n	80015d0 <Inverse_Kinematics+0x488>
 80015be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80015c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80015c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015ce:	e013      	b.n	80015f8 <Inverse_Kinematics+0x4b0>
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80015dc:	f7ff fa9c 	bl	8000b18 <__aeabi_dcmpgt>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d004      	beq.n	80015f0 <Inverse_Kinematics+0x4a8>
 80015e6:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 80015ea:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80015ee:	e003      	b.n	80015f8 <Inverse_Kinematics+0x4b0>
 80015f0:	ed1f 7b62 	vldr	d7, [pc, #-392]	@ 800146c <Inverse_Kinematics+0x324>
 80015f4:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
 80015f8:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80015fc:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    double V4 = (fabs(M4) > minThreshold) ? M4 : (M4 < 0) ? -minThreshold : ((M4 > 0) ? minThreshold : 0);
 8001600:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800160a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001614:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001618:	f7ff fa60 	bl	8000adc <__aeabi_dcmplt>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d004      	beq.n	800162c <Inverse_Kinematics+0x4e4>
 8001622:	ed97 7b30 	vldr	d7, [r7, #192]	@ 0xc0
 8001626:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 800162a:	e027      	b.n	800167c <Inverse_Kinematics+0x534>
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001638:	f7ff fa50 	bl	8000adc <__aeabi_dcmplt>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <Inverse_Kinematics+0x50c>
 8001642:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001646:	643b      	str	r3, [r7, #64]	@ 0x40
 8001648:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800164c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001650:	647b      	str	r3, [r7, #68]	@ 0x44
 8001652:	e013      	b.n	800167c <Inverse_Kinematics+0x534>
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001660:	f7ff fa5a 	bl	8000b18 <__aeabi_dcmpgt>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d004      	beq.n	8001674 <Inverse_Kinematics+0x52c>
 800166a:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 800166e:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8001672:	e003      	b.n	800167c <Inverse_Kinematics+0x534>
 8001674:	ed1f 7b83 	vldr	d7, [pc, #-524]	@ 800146c <Inverse_Kinematics+0x324>
 8001678:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 800167c:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001680:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78

    setMotorSpeed(6, (int)V1);
 8001684:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8001688:	f7ff fa66 	bl	8000b58 <__aeabi_d2iz>
 800168c:	4603      	mov	r3, r0
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff48 	bl	8000524 <__aeabi_i2d>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	ec43 2b10 	vmov	d0, r2, r3
 800169c:	2006      	movs	r0, #6
 800169e:	f7ff fcdd 	bl	800105c <setMotorSpeed>
    setMotorSpeed(5, (int)V2);
 80016a2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80016a6:	f7ff fa57 	bl	8000b58 <__aeabi_d2iz>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff39 	bl	8000524 <__aeabi_i2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	ec43 2b10 	vmov	d0, r2, r3
 80016ba:	2005      	movs	r0, #5
 80016bc:	f7ff fcce 	bl	800105c <setMotorSpeed>
    setMotorSpeed(4, (int)V3);
 80016c0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80016c4:	f7ff fa48 	bl	8000b58 <__aeabi_d2iz>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff2a 	bl	8000524 <__aeabi_i2d>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	ec43 2b10 	vmov	d0, r2, r3
 80016d8:	2004      	movs	r0, #4
 80016da:	f7ff fcbf 	bl	800105c <setMotorSpeed>
    setMotorSpeed(8, (int)V4);
 80016de:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80016e2:	f7ff fa39 	bl	8000b58 <__aeabi_d2iz>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff1b 	bl	8000524 <__aeabi_i2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	ec43 2b10 	vmov	d0, r2, r3
 80016f6:	2008      	movs	r0, #8
 80016f8:	f7ff fcb0 	bl	800105c <setMotorSpeed>
}
 80016fc:	bf00      	nop
 80016fe:	37e0      	adds	r7, #224	@ 0xe0
 8001700:	46bd      	mov	sp, r7
 8001702:	bdb0      	pop	{r4, r5, r7, pc}
 8001704:	0000      	movs	r0, r0
	...

08001708 <putar>:
     setMotorSpeed(4, V3);
     setMotorSpeed(5, V4);
}

void putar(int Vx, int Vy, int W)
{
 8001708:	b5b0      	push	{r4, r5, r7, lr}
 800170a:	ed2d 8b02 	vpush	{d8}
 800170e:	b098      	sub	sp, #96	@ 0x60
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
     double R = 7.6;
 8001718:	f20f 43f4 	addw	r3, pc, #1268	@ 0x4f4
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
     int minSpeed = 100;
 8001724:	2364      	movs	r3, #100	@ 0x64
 8001726:	657b      	str	r3, [r7, #84]	@ 0x54
     int maxSpeed = 500;
 8001728:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800172c:	653b      	str	r3, [r7, #80]	@ 0x50

     double M1 = -sin(1 * M_PI_4) * Vx + cos(1 * M_PI_4) * Vy - R * W;
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7fe fef8 	bl	8000524 <__aeabi_i2d>
 8001734:	f20f 43e0 	addw	r3, pc, #1248	@ 0x4e0
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7fe ff5c 	bl	80005f8 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4614      	mov	r4, r2
 8001746:	461d      	mov	r5, r3
 8001748:	68b8      	ldr	r0, [r7, #8]
 800174a:	f7fe feeb 	bl	8000524 <__aeabi_i2d>
 800174e:	f20f 43d0 	addw	r3, pc, #1232	@ 0x4d0
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	f7fe ff4f 	bl	80005f8 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7fe fd93 	bl	800028c <__adddf3>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4614      	mov	r4, r2
 800176c:	461d      	mov	r5, r3
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7fe fed8 	bl	8000524 <__aeabi_i2d>
 8001774:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001778:	f7fe ff3e 	bl	80005f8 <__aeabi_dmul>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4620      	mov	r0, r4
 8001782:	4629      	mov	r1, r5
 8001784:	f7fe fd80 	bl	8000288 <__aeabi_dsub>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
     double M2 = -sin(3 * M_PI_4) * Vx + cos(3 * M_PI_4) * Vy - R * W;
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f7fe fec7 	bl	8000524 <__aeabi_i2d>
 8001796:	f20f 4390 	addw	r3, pc, #1168	@ 0x490
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe ff2b 	bl	80005f8 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4614      	mov	r4, r2
 80017a8:	461d      	mov	r5, r3
 80017aa:	68b8      	ldr	r0, [r7, #8]
 80017ac:	f7fe feba 	bl	8000524 <__aeabi_i2d>
 80017b0:	f20f 4364 	addw	r3, pc, #1124	@ 0x464
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7fe ff1e 	bl	80005f8 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4620      	mov	r0, r4
 80017c2:	4629      	mov	r1, r5
 80017c4:	f7fe fd62 	bl	800028c <__adddf3>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4614      	mov	r4, r2
 80017ce:	461d      	mov	r5, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7fe fea7 	bl	8000524 <__aeabi_i2d>
 80017d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80017da:	f7fe ff0d 	bl	80005f8 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4620      	mov	r0, r4
 80017e4:	4629      	mov	r1, r5
 80017e6:	f7fe fd4f 	bl	8000288 <__aeabi_dsub>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
     double M3 = -sin(5 * M_PI_4) * Vx + cos(5 * M_PI_4) * Vy - R * W;
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f7fe fe96 	bl	8000524 <__aeabi_i2d>
 80017f8:	f20f 4334 	addw	r3, pc, #1076	@ 0x434
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	f7fe fefa 	bl	80005f8 <__aeabi_dmul>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4614      	mov	r4, r2
 800180a:	461d      	mov	r5, r3
 800180c:	68b8      	ldr	r0, [r7, #8]
 800180e:	f7fe fe89 	bl	8000524 <__aeabi_i2d>
 8001812:	f20f 4324 	addw	r3, pc, #1060	@ 0x424
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	f7fe feed 	bl	80005f8 <__aeabi_dmul>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4620      	mov	r0, r4
 8001824:	4629      	mov	r1, r5
 8001826:	f7fe fd31 	bl	800028c <__adddf3>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4614      	mov	r4, r2
 8001830:	461d      	mov	r5, r3
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7fe fe76 	bl	8000524 <__aeabi_i2d>
 8001838:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800183c:	f7fe fedc 	bl	80005f8 <__aeabi_dmul>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4620      	mov	r0, r4
 8001846:	4629      	mov	r1, r5
 8001848:	f7fe fd1e 	bl	8000288 <__aeabi_dsub>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
     double M4 = -sin(7 * M_PI_4) * Vx + cos(7 * M_PI_4) * Vy - R * W;
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f7fe fe65 	bl	8000524 <__aeabi_i2d>
 800185a:	a3f9      	add	r3, pc, #996	@ (adr r3, 8001c40 <putar+0x538>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7fe feca 	bl	80005f8 <__aeabi_dmul>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4614      	mov	r4, r2
 800186a:	461d      	mov	r5, r3
 800186c:	68b8      	ldr	r0, [r7, #8]
 800186e:	f7fe fe59 	bl	8000524 <__aeabi_i2d>
 8001872:	a3f5      	add	r3, pc, #980	@ (adr r3, 8001c48 <putar+0x540>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7fe febe 	bl	80005f8 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4620      	mov	r0, r4
 8001882:	4629      	mov	r1, r5
 8001884:	f7fe fd02 	bl	800028c <__adddf3>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4614      	mov	r4, r2
 800188e:	461d      	mov	r5, r3
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7fe fe47 	bl	8000524 <__aeabi_i2d>
 8001896:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800189a:	f7fe fead 	bl	80005f8 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4620      	mov	r0, r4
 80018a4:	4629      	mov	r1, r5
 80018a6:	f7fe fcef 	bl	8000288 <__aeabi_dsub>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

     double V1 = (M1 > minSpeed || M1 < -minSpeed) ? fmin(fmax(M1, -maxSpeed), maxSpeed) : ((M1 < -0) ? -minSpeed : ((M1 > 0) ? minSpeed : 0));
 80018b2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80018b4:	f7fe fe36 	bl	8000524 <__aeabi_i2d>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80018c0:	f7ff f92a 	bl	8000b18 <__aeabi_dcmpgt>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10d      	bne.n	80018e6 <putar+0x1de>
 80018ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018cc:	425b      	negs	r3, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe28 	bl	8000524 <__aeabi_i2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80018dc:	f7ff f8fe 	bl	8000adc <__aeabi_dcmplt>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d020      	beq.n	8001928 <putar+0x220>
 80018e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018e8:	425b      	negs	r3, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe1a 	bl	8000524 <__aeabi_i2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	ec43 2b11 	vmov	d1, r2, r3
 80018f8:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 80018fc:	f00e faff 	bl	800fefe <fmax>
 8001900:	eeb0 8a40 	vmov.f32	s16, s0
 8001904:	eef0 8a60 	vmov.f32	s17, s1
 8001908:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800190a:	f7fe fe0b 	bl	8000524 <__aeabi_i2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	ec43 2b11 	vmov	d1, r2, r3
 8001916:	eeb0 0a48 	vmov.f32	s0, s16
 800191a:	eef0 0a68 	vmov.f32	s1, s17
 800191e:	f00e fb18 	bl	800ff52 <fmin>
 8001922:	ec53 2b10 	vmov	r2, r3, d0
 8001926:	e027      	b.n	8001978 <putar+0x270>
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001934:	f7ff f8d2 	bl	8000adc <__aeabi_dcmplt>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <putar+0x246>
 800193e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001940:	425b      	negs	r3, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fdee 	bl	8000524 <__aeabi_i2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	e014      	b.n	8001978 <putar+0x270>
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800195a:	f7ff f8dd 	bl	8000b18 <__aeabi_dcmpgt>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <putar+0x268>
 8001964:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001966:	f7fe fddd 	bl	8000524 <__aeabi_i2d>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	e003      	b.n	8001978 <putar+0x270>
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
     double V2 = (M2 > minSpeed || M2 < -minSpeed) ? fmin(fmax(M2, -maxSpeed), maxSpeed) : ((M2 < -0) ? -minSpeed : ((M2 > 0) ? minSpeed : 0));
 800197c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800197e:	f7fe fdd1 	bl	8000524 <__aeabi_i2d>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800198a:	f7ff f8c5 	bl	8000b18 <__aeabi_dcmpgt>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10d      	bne.n	80019b0 <putar+0x2a8>
 8001994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001996:	425b      	negs	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fdc3 	bl	8000524 <__aeabi_i2d>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80019a6:	f7ff f899 	bl	8000adc <__aeabi_dcmplt>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <putar+0x2ea>
 80019b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019b2:	425b      	negs	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fdb5 	bl	8000524 <__aeabi_i2d>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	ec43 2b11 	vmov	d1, r2, r3
 80019c2:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80019c6:	f00e fa9a 	bl	800fefe <fmax>
 80019ca:	eeb0 8a40 	vmov.f32	s16, s0
 80019ce:	eef0 8a60 	vmov.f32	s17, s1
 80019d2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80019d4:	f7fe fda6 	bl	8000524 <__aeabi_i2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	ec43 2b11 	vmov	d1, r2, r3
 80019e0:	eeb0 0a48 	vmov.f32	s0, s16
 80019e4:	eef0 0a68 	vmov.f32	s1, s17
 80019e8:	f00e fab3 	bl	800ff52 <fmin>
 80019ec:	ec53 2b10 	vmov	r2, r3, d0
 80019f0:	e027      	b.n	8001a42 <putar+0x33a>
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80019fe:	f7ff f86d 	bl	8000adc <__aeabi_dcmplt>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d007      	beq.n	8001a18 <putar+0x310>
 8001a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a0a:	425b      	negs	r3, r3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fd89 	bl	8000524 <__aeabi_i2d>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	e014      	b.n	8001a42 <putar+0x33a>
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001a24:	f7ff f878 	bl	8000b18 <__aeabi_dcmpgt>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <putar+0x332>
 8001a2e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001a30:	f7fe fd78 	bl	8000524 <__aeabi_i2d>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	e003      	b.n	8001a42 <putar+0x33a>
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9c7 2308 	strd	r2, r3, [r7, #32]
     double V3 = (M3 > minSpeed || M3 < -minSpeed) ? fmin(fmax(M3, -maxSpeed), maxSpeed) : ((M3 < -0) ? -minSpeed : ((M3 > 0) ? minSpeed : 0));
 8001a46:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001a48:	f7fe fd6c 	bl	8000524 <__aeabi_i2d>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a54:	f7ff f860 	bl	8000b18 <__aeabi_dcmpgt>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10d      	bne.n	8001a7a <putar+0x372>
 8001a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a60:	425b      	negs	r3, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd5e 	bl	8000524 <__aeabi_i2d>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a70:	f7ff f834 	bl	8000adc <__aeabi_dcmplt>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d020      	beq.n	8001abc <putar+0x3b4>
 8001a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a7c:	425b      	negs	r3, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd50 	bl	8000524 <__aeabi_i2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	ec43 2b11 	vmov	d1, r2, r3
 8001a8c:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001a90:	f00e fa35 	bl	800fefe <fmax>
 8001a94:	eeb0 8a40 	vmov.f32	s16, s0
 8001a98:	eef0 8a60 	vmov.f32	s17, s1
 8001a9c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001a9e:	f7fe fd41 	bl	8000524 <__aeabi_i2d>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	ec43 2b11 	vmov	d1, r2, r3
 8001aaa:	eeb0 0a48 	vmov.f32	s0, s16
 8001aae:	eef0 0a68 	vmov.f32	s1, s17
 8001ab2:	f00e fa4e 	bl	800ff52 <fmin>
 8001ab6:	ec53 2b10 	vmov	r2, r3, d0
 8001aba:	e027      	b.n	8001b0c <putar+0x404>
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001ac8:	f7ff f808 	bl	8000adc <__aeabi_dcmplt>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <putar+0x3da>
 8001ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad4:	425b      	negs	r3, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fd24 	bl	8000524 <__aeabi_i2d>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	e014      	b.n	8001b0c <putar+0x404>
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001aee:	f7ff f813 	bl	8000b18 <__aeabi_dcmpgt>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <putar+0x3fc>
 8001af8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001afa:	f7fe fd13 	bl	8000524 <__aeabi_i2d>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	e003      	b.n	8001b0c <putar+0x404>
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
     double V4 = (M4 > minSpeed || M4 < -minSpeed) ? fmin(fmax(M4, -maxSpeed), maxSpeed) : ((M4 < -0) ? -minSpeed : ((M4 > 0) ? minSpeed : 0));
 8001b10:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001b12:	f7fe fd07 	bl	8000524 <__aeabi_i2d>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001b1e:	f7fe fffb 	bl	8000b18 <__aeabi_dcmpgt>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10d      	bne.n	8001b44 <putar+0x43c>
 8001b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b2a:	425b      	negs	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fcf9 	bl	8000524 <__aeabi_i2d>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001b3a:	f7fe ffcf 	bl	8000adc <__aeabi_dcmplt>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d020      	beq.n	8001b86 <putar+0x47e>
 8001b44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b46:	425b      	negs	r3, r3
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fceb 	bl	8000524 <__aeabi_i2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	ec43 2b11 	vmov	d1, r2, r3
 8001b56:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8001b5a:	f00e f9d0 	bl	800fefe <fmax>
 8001b5e:	eeb0 8a40 	vmov.f32	s16, s0
 8001b62:	eef0 8a60 	vmov.f32	s17, s1
 8001b66:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001b68:	f7fe fcdc 	bl	8000524 <__aeabi_i2d>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	ec43 2b11 	vmov	d1, r2, r3
 8001b74:	eeb0 0a48 	vmov.f32	s0, s16
 8001b78:	eef0 0a68 	vmov.f32	s1, s17
 8001b7c:	f00e f9e9 	bl	800ff52 <fmin>
 8001b80:	ec53 2b10 	vmov	r2, r3, d0
 8001b84:	e027      	b.n	8001bd6 <putar+0x4ce>
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001b92:	f7fe ffa3 	bl	8000adc <__aeabi_dcmplt>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d007      	beq.n	8001bac <putar+0x4a4>
 8001b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9e:	425b      	negs	r3, r3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcbf 	bl	8000524 <__aeabi_i2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	e014      	b.n	8001bd6 <putar+0x4ce>
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001bb8:	f7fe ffae 	bl	8000b18 <__aeabi_dcmpgt>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <putar+0x4c6>
 8001bc2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001bc4:	f7fe fcae 	bl	8000524 <__aeabi_i2d>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	e003      	b.n	8001bd6 <putar+0x4ce>
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9c7 2304 	strd	r2, r3, [r7, #16]

     setMotorSpeed(6, V1);
 8001bda:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001bde:	2006      	movs	r0, #6
 8001be0:	f7ff fa3c 	bl	800105c <setMotorSpeed>
     setMotorSpeed(8, V2);
 8001be4:	ed97 0b08 	vldr	d0, [r7, #32]
 8001be8:	2008      	movs	r0, #8
 8001bea:	f7ff fa37 	bl	800105c <setMotorSpeed>
     setMotorSpeed(4, V3);
 8001bee:	ed97 0b06 	vldr	d0, [r7, #24]
 8001bf2:	2004      	movs	r0, #4
 8001bf4:	f7ff fa32 	bl	800105c <setMotorSpeed>
     setMotorSpeed(5, V4);
 8001bf8:	ed97 0b04 	vldr	d0, [r7, #16]
 8001bfc:	2005      	movs	r0, #5
 8001bfe:	f7ff fa2d 	bl	800105c <setMotorSpeed>
}
 8001c02:	bf00      	nop
 8001c04:	3760      	adds	r7, #96	@ 0x60
 8001c06:	46bd      	mov	sp, r7
 8001c08:	ecbd 8b02 	vpop	{d8}
 8001c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	66666666 	.word	0x66666666
 8001c14:	401e6666 	.word	0x401e6666
 8001c18:	667f3bcc 	.word	0x667f3bcc
 8001c1c:	bfe6a09e 	.word	0xbfe6a09e
 8001c20:	667f3bcd 	.word	0x667f3bcd
 8001c24:	3fe6a09e 	.word	0x3fe6a09e
 8001c28:	667f3bcd 	.word	0x667f3bcd
 8001c2c:	bfe6a09e 	.word	0xbfe6a09e
 8001c30:	667f3bcc 	.word	0x667f3bcc
 8001c34:	3fe6a09e 	.word	0x3fe6a09e
 8001c38:	667f3bce 	.word	0x667f3bce
 8001c3c:	bfe6a09e 	.word	0xbfe6a09e
 8001c40:	667f3bce 	.word	0x667f3bce
 8001c44:	3fe6a09e 	.word	0x3fe6a09e
 8001c48:	667f3bcb 	.word	0x667f3bcb
 8001c4c:	3fe6a09e 	.word	0x3fe6a09e

08001c50 <lcd_write_nibble>:
#define D7_BIT 7      // Data 7 bit

uint8_t backlight_state = 1;

void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	4603      	mov	r3, r0
 8001c58:	460a      	mov	r2, r1
 8001c5a:	71fb      	strb	r3, [r7, #7]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	79bb      	ldrb	r3, [r7, #6]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8001c72:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <lcd_write_nibble+0x7c>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	b25a      	sxtb	r2, r3
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	b25b      	sxtb	r3, r3
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8001c90:	f107 020f 	add.w	r2, r7, #15
 8001c94:	2364      	movs	r3, #100	@ 0x64
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	214e      	movs	r1, #78	@ 0x4e
 8001c9c:	480c      	ldr	r0, [pc, #48]	@ (8001cd0 <lcd_write_nibble+0x80>)
 8001c9e:	f006 fc91 	bl	80085c4 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f005 ff9c 	bl	8007be0 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	f023 0304 	bic.w	r3, r3, #4
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8001cb2:	f107 020f 	add.w	r2, r7, #15
 8001cb6:	2364      	movs	r3, #100	@ 0x64
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2301      	movs	r3, #1
 8001cbc:	214e      	movs	r1, #78	@ 0x4e
 8001cbe:	4804      	ldr	r0, [pc, #16]	@ (8001cd0 <lcd_write_nibble+0x80>)
 8001cc0:	f006 fc80 	bl	80085c4 <HAL_I2C_Master_Transmit>
}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200000c8 	.word	0x200000c8
 8001cd0:	200002cc 	.word	0x200002cc

08001cd4 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ffad 	bl	8001c50 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 8001cf6:	7bbb      	ldrb	r3, [r7, #14]
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ffa8 	bl	8001c50 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d002      	beq.n	8001d0c <lcd_send_cmd+0x38>
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d102      	bne.n	8001d12 <lcd_send_cmd+0x3e>
  {
    HAL_Delay(2);
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	f005 ff67 	bl	8007be0 <HAL_Delay>
  }
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	2101      	movs	r1, #1
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff8a 	bl	8001c50 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 8001d3c:	7bbb      	ldrb	r3, [r7, #14]
 8001d3e:	2101      	movs	r1, #1
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff85 	bl	8001c50 <lcd_write_nibble>
}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <lcd_init>:

void lcd_init()
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8001d52:	2032      	movs	r0, #50	@ 0x32
 8001d54:	f005 ff44 	bl	8007be0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2003      	movs	r0, #3
 8001d5c:	f7ff ff78 	bl	8001c50 <lcd_write_nibble>
  HAL_Delay(5);
 8001d60:	2005      	movs	r0, #5
 8001d62:	f005 ff3d 	bl	8007be0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001d66:	2100      	movs	r1, #0
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f7ff ff71 	bl	8001c50 <lcd_write_nibble>
  HAL_Delay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f005 ff36 	bl	8007be0 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001d74:	2100      	movs	r1, #0
 8001d76:	2003      	movs	r0, #3
 8001d78:	f7ff ff6a 	bl	8001c50 <lcd_write_nibble>
  HAL_Delay(1);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f005 ff2f 	bl	8007be0 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 8001d82:	2100      	movs	r1, #0
 8001d84:	2002      	movs	r0, #2
 8001d86:	f7ff ff63 	bl	8001c50 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 8001d8a:	2028      	movs	r0, #40	@ 0x28
 8001d8c:	f7ff ffa2 	bl	8001cd4 <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8001d90:	200c      	movs	r0, #12
 8001d92:	f7ff ff9f 	bl	8001cd4 <lcd_send_cmd>
  lcd_send_cmd(0x06);
 8001d96:	2006      	movs	r0, #6
 8001d98:	f7ff ff9c 	bl	8001cd4 <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f7ff ff99 	bl	8001cd4 <lcd_send_cmd>
  HAL_Delay(2);
 8001da2:	2002      	movs	r0, #2
 8001da4:	f005 ff1c 	bl	8007be0 <HAL_Delay>
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}

08001dac <lcd_write_string>:

void lcd_write_string(char *str)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  while (*str)
 8001db4:	e006      	b.n	8001dc4 <lcd_write_string+0x18>
  {
    lcd_send_data(*str++);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ffab 	bl	8001d1a <lcd_send_data>
  while (*str)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f4      	bne.n	8001db6 <lcd_write_string+0xa>
  }
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	460a      	mov	r2, r1
 8001de2:	71fb      	strb	r3, [r7, #7]
 8001de4:	4613      	mov	r3, r2
 8001de6:	71bb      	strb	r3, [r7, #6]
  uint8_t address;
  switch (row)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d816      	bhi.n	8001e1c <lcd_set_cursor+0x44>
 8001dee:	a201      	add	r2, pc, #4	@ (adr r2, 8001df4 <lcd_set_cursor+0x1c>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001e05 	.word	0x08001e05
 8001df8:	08001e0b 	.word	0x08001e0b
 8001dfc:	08001e11 	.word	0x08001e11
 8001e00:	08001e17 	.word	0x08001e17
  {
  case 0:
    address = 0x00;
 8001e04:	2300      	movs	r3, #0
 8001e06:	73fb      	strb	r3, [r7, #15]
    break;
 8001e08:	e00a      	b.n	8001e20 <lcd_set_cursor+0x48>
  case 1:
    address = 0x40;
 8001e0a:	2340      	movs	r3, #64	@ 0x40
 8001e0c:	73fb      	strb	r3, [r7, #15]
    break;
 8001e0e:	e007      	b.n	8001e20 <lcd_set_cursor+0x48>
  case 2:
    address = 0x14;
 8001e10:	2314      	movs	r3, #20
 8001e12:	73fb      	strb	r3, [r7, #15]
    break;
 8001e14:	e004      	b.n	8001e20 <lcd_set_cursor+0x48>
  case 3:
    address = 0x54;
 8001e16:	2354      	movs	r3, #84	@ 0x54
 8001e18:	73fb      	strb	r3, [r7, #15]
    break;
 8001e1a:	e001      	b.n	8001e20 <lcd_set_cursor+0x48>
  default:
    address = 0x00;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]
  }
  address += column;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	79bb      	ldrb	r3, [r7, #6]
 8001e24:	4413      	add	r3, r2
 8001e26:	73fb      	strb	r3, [r7, #15]
  lcd_send_cmd(0x80 | address);
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff4f 	bl	8001cd4 <lcd_send_cmd>
}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop

08001e40 <lcd_clear>:

void lcd_clear(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  lcd_send_cmd(0x01);
 8001e44:	2001      	movs	r0, #1
 8001e46:	f7ff ff45 	bl	8001cd4 <lcd_send_cmd>
  HAL_Delay(2);
 8001e4a:	2002      	movs	r0, #2
 8001e4c:	f005 fec8 	bl	8007be0 <HAL_Delay>
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
movingState mode = VOID;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
	// ENCODER
	if((GPIO_Pin == EB_1_Pin) && (HAL_GPIO_ReadPin(EB_1_GPIO_Port, EB_1_Pin) == GPIO_PIN_SET))
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d11d      	bne.n	8001ea0 <HAL_GPIO_EXTI_Callback+0x4c>
 8001e64:	2108      	movs	r1, #8
 8001e66:	4890      	ldr	r0, [pc, #576]	@ (80020a8 <HAL_GPIO_EXTI_Callback+0x254>)
 8001e68:	f006 fa1e 	bl	80082a8 <HAL_GPIO_ReadPin>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d116      	bne.n	8001ea0 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		HAL_GPIO_ReadPin(EA_1_GPIO_Port, EA_1_Pin) ? counter1-- : counter1++;
 8001e72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e76:	488d      	ldr	r0, [pc, #564]	@ (80020ac <HAL_GPIO_EXTI_Callback+0x258>)
 8001e78:	f006 fa16 	bl	80082a8 <HAL_GPIO_ReadPin>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_GPIO_EXTI_Callback+0x3a>
 8001e82:	4b8b      	ldr	r3, [pc, #556]	@ (80020b0 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	4a89      	ldr	r2, [pc, #548]	@ (80020b0 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	e004      	b.n	8001e98 <HAL_GPIO_EXTI_Callback+0x44>
 8001e8e:	4b88      	ldr	r3, [pc, #544]	@ (80020b0 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3301      	adds	r3, #1
 8001e94:	4a86      	ldr	r2, [pc, #536]	@ (80020b0 <HAL_GPIO_EXTI_Callback+0x25c>)
 8001e96:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_1_Pin);
 8001e98:	4b86      	ldr	r3, [pc, #536]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x260>)
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	615a      	str	r2, [r3, #20]
 8001e9e:	e15b      	b.n	8002158 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_2_Pin) && (HAL_GPIO_ReadPin(EB_2_GPIO_Port, EB_2_Pin) == GPIO_PIN_SET))
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d11c      	bne.n	8001ee0 <HAL_GPIO_EXTI_Callback+0x8c>
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	4883      	ldr	r0, [pc, #524]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x264>)
 8001eaa:	f006 f9fd 	bl	80082a8 <HAL_GPIO_ReadPin>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d115      	bne.n	8001ee0 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		HAL_GPIO_ReadPin(EA_2_GPIO_Port, EA_2_Pin) ? counter2-- : counter2++;
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4880      	ldr	r0, [pc, #512]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x264>)
 8001eb8:	f006 f9f6 	bl	80082a8 <HAL_GPIO_ReadPin>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_GPIO_EXTI_Callback+0x7a>
 8001ec2:	4b7e      	ldr	r3, [pc, #504]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x268>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	4a7c      	ldr	r2, [pc, #496]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x268>)
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e004      	b.n	8001ed8 <HAL_GPIO_EXTI_Callback+0x84>
 8001ece:	4b7b      	ldr	r3, [pc, #492]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x268>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	4a79      	ldr	r2, [pc, #484]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x268>)
 8001ed6:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_2_Pin);
 8001ed8:	4b76      	ldr	r3, [pc, #472]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x260>)
 8001eda:	2202      	movs	r2, #2
 8001edc:	615a      	str	r2, [r3, #20]
 8001ede:	e13b      	b.n	8002158 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EB_3_Pin) && (HAL_GPIO_ReadPin(EB_3_GPIO_Port, EB_3_Pin) == GPIO_PIN_SET))
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	d11c      	bne.n	8001f20 <HAL_GPIO_EXTI_Callback+0xcc>
 8001ee6:	2120      	movs	r1, #32
 8001ee8:	486f      	ldr	r0, [pc, #444]	@ (80020a8 <HAL_GPIO_EXTI_Callback+0x254>)
 8001eea:	f006 f9dd 	bl	80082a8 <HAL_GPIO_ReadPin>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d115      	bne.n	8001f20 <HAL_GPIO_EXTI_Callback+0xcc>
	{
		HAL_GPIO_ReadPin(EA_3_GPIO_Port, EA_3_Pin) ? counter3-- : counter3++;
 8001ef4:	2110      	movs	r1, #16
 8001ef6:	486c      	ldr	r0, [pc, #432]	@ (80020a8 <HAL_GPIO_EXTI_Callback+0x254>)
 8001ef8:	f006 f9d6 	bl	80082a8 <HAL_GPIO_ReadPin>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_GPIO_EXTI_Callback+0xba>
 8001f02:	4b6f      	ldr	r3, [pc, #444]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	4a6d      	ldr	r2, [pc, #436]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	e004      	b.n	8001f18 <HAL_GPIO_EXTI_Callback+0xc4>
 8001f0e:	4b6c      	ldr	r3, [pc, #432]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3301      	adds	r3, #1
 8001f14:	4a6a      	ldr	r2, [pc, #424]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001f16:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EB_3_Pin);
 8001f18:	4b66      	ldr	r3, [pc, #408]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x260>)
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	615a      	str	r2, [r3, #20]
 8001f1e:	e11b      	b.n	8002158 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_1_Pin) && (HAL_GPIO_ReadPin(EinB_1_GPIO_Port, EinB_1_Pin) == GPIO_PIN_SET))
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d11c      	bne.n	8001f60 <HAL_GPIO_EXTI_Callback+0x10c>
 8001f26:	2104      	movs	r1, #4
 8001f28:	4863      	ldr	r0, [pc, #396]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x264>)
 8001f2a:	f006 f9bd 	bl	80082a8 <HAL_GPIO_ReadPin>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d115      	bne.n	8001f60 <HAL_GPIO_EXTI_Callback+0x10c>
	{
		HAL_GPIO_ReadPin(EinA_1_GPIO_Port, EinA_1_Pin) ? counterIN1++ : counterIN1--;
 8001f34:	2108      	movs	r1, #8
 8001f36:	4860      	ldr	r0, [pc, #384]	@ (80020b8 <HAL_GPIO_EXTI_Callback+0x264>)
 8001f38:	f006 f9b6 	bl	80082a8 <HAL_GPIO_ReadPin>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_GPIO_EXTI_Callback+0xfa>
 8001f42:	4b60      	ldr	r3, [pc, #384]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	4a5e      	ldr	r2, [pc, #376]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_EXTI_Callback+0x104>
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	4a5b      	ldr	r2, [pc, #364]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 8001f56:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_1_Pin);
 8001f58:	4b56      	ldr	r3, [pc, #344]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x260>)
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	615a      	str	r2, [r3, #20]
 8001f5e:	e0fb      	b.n	8002158 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_2_Pin) && (HAL_GPIO_ReadPin(EinB_2_GPIO_Port, EinB_2_Pin) == GPIO_PIN_SET))
 8001f60:	88fb      	ldrh	r3, [r7, #6]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d11c      	bne.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x14c>
 8001f66:	2101      	movs	r1, #1
 8001f68:	4850      	ldr	r0, [pc, #320]	@ (80020ac <HAL_GPIO_EXTI_Callback+0x258>)
 8001f6a:	f006 f99d 	bl	80082a8 <HAL_GPIO_ReadPin>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d115      	bne.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x14c>
	{
		HAL_GPIO_ReadPin(EinA_2_GPIO_Port, EinA_2_Pin) ? counterIN2-- : counterIN2++;
 8001f74:	2102      	movs	r1, #2
 8001f76:	484d      	ldr	r0, [pc, #308]	@ (80020ac <HAL_GPIO_EXTI_Callback+0x258>)
 8001f78:	f006 f996 	bl	80082a8 <HAL_GPIO_ReadPin>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_GPIO_EXTI_Callback+0x13a>
 8001f82:	4b51      	ldr	r3, [pc, #324]	@ (80020c8 <HAL_GPIO_EXTI_Callback+0x274>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	4a4f      	ldr	r2, [pc, #316]	@ (80020c8 <HAL_GPIO_EXTI_Callback+0x274>)
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	e004      	b.n	8001f98 <HAL_GPIO_EXTI_Callback+0x144>
 8001f8e:	4b4e      	ldr	r3, [pc, #312]	@ (80020c8 <HAL_GPIO_EXTI_Callback+0x274>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	4a4c      	ldr	r2, [pc, #304]	@ (80020c8 <HAL_GPIO_EXTI_Callback+0x274>)
 8001f96:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_2_Pin);
 8001f98:	4b46      	ldr	r3, [pc, #280]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x260>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	615a      	str	r2, [r3, #20]
 8001f9e:	e0db      	b.n	8002158 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_3_Pin) && (HAL_GPIO_ReadPin(EinB_3_GPIO_Port, EinB_3_Pin) == GPIO_PIN_SET))
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fa6:	d11f      	bne.n	8001fe8 <HAL_GPIO_EXTI_Callback+0x194>
 8001fa8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fac:	4847      	ldr	r0, [pc, #284]	@ (80020cc <HAL_GPIO_EXTI_Callback+0x278>)
 8001fae:	f006 f97b 	bl	80082a8 <HAL_GPIO_ReadPin>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d117      	bne.n	8001fe8 <HAL_GPIO_EXTI_Callback+0x194>
	{
		HAL_GPIO_ReadPin(EinA_3_GPIO_Port, EinA_3_Pin) ? counterIN3++ : counterIN3--;
 8001fb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fbc:	4843      	ldr	r0, [pc, #268]	@ (80020cc <HAL_GPIO_EXTI_Callback+0x278>)
 8001fbe:	f006 f973 	bl	80082a8 <HAL_GPIO_ReadPin>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_GPIO_EXTI_Callback+0x180>
 8001fc8:	4b41      	ldr	r3, [pc, #260]	@ (80020d0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	4a40      	ldr	r2, [pc, #256]	@ (80020d0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e004      	b.n	8001fde <HAL_GPIO_EXTI_Callback+0x18a>
 8001fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80020d0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	4a3d      	ldr	r2, [pc, #244]	@ (80020d0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001fdc:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_3_Pin);
 8001fde:	4b35      	ldr	r3, [pc, #212]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x260>)
 8001fe0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fe4:	615a      	str	r2, [r3, #20]
 8001fe6:	e0b7      	b.n	8002158 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == EinB_4_Pin) && (HAL_GPIO_ReadPin(EinB_4_GPIO_Port, EinB_4_Pin) == GPIO_PIN_SET))
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fee:	d11f      	bne.n	8002030 <HAL_GPIO_EXTI_Callback+0x1dc>
 8001ff0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ff4:	482d      	ldr	r0, [pc, #180]	@ (80020ac <HAL_GPIO_EXTI_Callback+0x258>)
 8001ff6:	f006 f957 	bl	80082a8 <HAL_GPIO_ReadPin>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d117      	bne.n	8002030 <HAL_GPIO_EXTI_Callback+0x1dc>
	{
		HAL_GPIO_ReadPin(EinA_4_GPIO_Port, EinA_4_Pin) ? counterIN4-- : counterIN4++;
 8002000:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002004:	4829      	ldr	r0, [pc, #164]	@ (80020ac <HAL_GPIO_EXTI_Callback+0x258>)
 8002006:	f006 f94f 	bl	80082a8 <HAL_GPIO_ReadPin>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_GPIO_EXTI_Callback+0x1c8>
 8002010:	4b30      	ldr	r3, [pc, #192]	@ (80020d4 <HAL_GPIO_EXTI_Callback+0x280>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	3b01      	subs	r3, #1
 8002016:	4a2f      	ldr	r2, [pc, #188]	@ (80020d4 <HAL_GPIO_EXTI_Callback+0x280>)
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e004      	b.n	8002026 <HAL_GPIO_EXTI_Callback+0x1d2>
 800201c:	4b2d      	ldr	r3, [pc, #180]	@ (80020d4 <HAL_GPIO_EXTI_Callback+0x280>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	4a2c      	ldr	r2, [pc, #176]	@ (80020d4 <HAL_GPIO_EXTI_Callback+0x280>)
 8002024:	6013      	str	r3, [r2, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(EinB_4_Pin);
 8002026:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x260>)
 8002028:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800202c:	615a      	str	r2, [r3, #20]
 800202e:	e093      	b.n	8002158 <HAL_GPIO_EXTI_Callback+0x304>
	}

	// BUTTON
	else if((GPIO_Pin == Button_1_Pin) && (HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin) == GPIO_PIN_RESET))
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002036:	d119      	bne.n	800206c <HAL_GPIO_EXTI_Callback+0x218>
 8002038:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800203c:	4826      	ldr	r0, [pc, #152]	@ (80020d8 <HAL_GPIO_EXTI_Callback+0x284>)
 800203e:	f006 f933 	bl	80082a8 <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d111      	bne.n	800206c <HAL_GPIO_EXTI_Callback+0x218>
	{
		mode = mode + BLUE_STEP1;
 8002048:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	3301      	adds	r3, #1
 800204e:	b2da      	uxtb	r2, r3
 8002050:	4b22      	ldr	r3, [pc, #136]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 8002052:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_STEP1)
 8002054:	4b21      	ldr	r3, [pc, #132]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d902      	bls.n	8002062 <HAL_GPIO_EXTI_Callback+0x20e>
		{
			mode = VOID;
 800205c:	4b1f      	ldr	r3, [pc, #124]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_1_Pin);
 8002062:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x260>)
 8002064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002068:	615a      	str	r2, [r3, #20]
 800206a:	e075      	b.n	8002158 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_2_Pin) && (HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin) == GPIO_PIN_RESET))
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002072:	d135      	bne.n	80020e0 <HAL_GPIO_EXTI_Callback+0x28c>
 8002074:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002078:	4817      	ldr	r0, [pc, #92]	@ (80020d8 <HAL_GPIO_EXTI_Callback+0x284>)
 800207a:	f006 f915 	bl	80082a8 <HAL_GPIO_ReadPin>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d12d      	bne.n	80020e0 <HAL_GPIO_EXTI_Callback+0x28c>
	{
		mode = mode + BLUE_STEP1;
 8002084:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	3301      	adds	r3, #1
 800208a:	b2da      	uxtb	r2, r3
 800208c:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 800208e:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_STEP1)
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d902      	bls.n	800209e <HAL_GPIO_EXTI_Callback+0x24a>
		{
			mode = VOID;
 8002098:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_2_Pin);
 800209e:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <HAL_GPIO_EXTI_Callback+0x260>)
 80020a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020a4:	615a      	str	r2, [r3, #20]
 80020a6:	e057      	b.n	8002158 <HAL_GPIO_EXTI_Callback+0x304>
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40020000 	.word	0x40020000
 80020b0:	200004d0 	.word	0x200004d0
 80020b4:	40013c00 	.word	0x40013c00
 80020b8:	40020800 	.word	0x40020800
 80020bc:	200004d4 	.word	0x200004d4
 80020c0:	200004d8 	.word	0x200004d8
 80020c4:	200004dc 	.word	0x200004dc
 80020c8:	200004e0 	.word	0x200004e0
 80020cc:	40020c00 	.word	0x40020c00
 80020d0:	200004e4 	.word	0x200004e4
 80020d4:	200004e8 	.word	0x200004e8
 80020d8:	40021000 	.word	0x40021000
 80020dc:	20000600 	.word	0x20000600
	}
	else if((GPIO_Pin == Button_3_Pin) && (HAL_GPIO_ReadPin(Button_3_GPIO_Port, Button_3_Pin) == GPIO_PIN_RESET))
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020e6:	d119      	bne.n	800211c <HAL_GPIO_EXTI_Callback+0x2c8>
 80020e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020ec:	481c      	ldr	r0, [pc, #112]	@ (8002160 <HAL_GPIO_EXTI_Callback+0x30c>)
 80020ee:	f006 f8db 	bl	80082a8 <HAL_GPIO_ReadPin>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d111      	bne.n	800211c <HAL_GPIO_EXTI_Callback+0x2c8>
	{
		mode = mode + BLUE_STORAGE;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <HAL_GPIO_EXTI_Callback+0x310>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	3305      	adds	r3, #5
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b18      	ldr	r3, [pc, #96]	@ (8002164 <HAL_GPIO_EXTI_Callback+0x310>)
 8002102:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_STORAGE)
 8002104:	4b17      	ldr	r3, [pc, #92]	@ (8002164 <HAL_GPIO_EXTI_Callback+0x310>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b05      	cmp	r3, #5
 800210a:	d902      	bls.n	8002112 <HAL_GPIO_EXTI_Callback+0x2be>
		{
			mode = VOID;
 800210c:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <HAL_GPIO_EXTI_Callback+0x310>)
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_3_Pin);
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <HAL_GPIO_EXTI_Callback+0x314>)
 8002114:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002118:	615a      	str	r2, [r3, #20]
 800211a:	e01d      	b.n	8002158 <HAL_GPIO_EXTI_Callback+0x304>
	}
	else if((GPIO_Pin == Button_4_Pin) && (HAL_GPIO_ReadPin(Button_4_GPIO_Port, Button_4_Pin) == GPIO_PIN_RESET))
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002122:	d119      	bne.n	8002158 <HAL_GPIO_EXTI_Callback+0x304>
 8002124:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002128:	4810      	ldr	r0, [pc, #64]	@ (800216c <HAL_GPIO_EXTI_Callback+0x318>)
 800212a:	f006 f8bd 	bl	80082a8 <HAL_GPIO_ReadPin>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d111      	bne.n	8002158 <HAL_GPIO_EXTI_Callback+0x304>
	{
		mode = mode + BLUE_STORAGE;
 8002134:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <HAL_GPIO_EXTI_Callback+0x310>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	3305      	adds	r3, #5
 800213a:	b2da      	uxtb	r2, r3
 800213c:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <HAL_GPIO_EXTI_Callback+0x310>)
 800213e:	701a      	strb	r2, [r3, #0]
		if(mode > BLUE_STORAGE)
 8002140:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <HAL_GPIO_EXTI_Callback+0x310>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b05      	cmp	r3, #5
 8002146:	d902      	bls.n	800214e <HAL_GPIO_EXTI_Callback+0x2fa>
		{
			mode = VOID;
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_GPIO_EXTI_Callback+0x310>)
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
		}
		__HAL_GPIO_EXTI_CLEAR_IT(Button_4_Pin);
 800214e:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_GPIO_EXTI_Callback+0x314>)
 8002150:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002154:	615a      	str	r2, [r3, #20]
	}
}
 8002156:	e7ff      	b.n	8002158 <HAL_GPIO_EXTI_Callback+0x304>
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	20000600 	.word	0x20000600
 8002168:	40013c00 	.word	0x40013c00
 800216c:	40020c00 	.word	0x40020c00

08002170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002174:	f5ad 7d67 	sub.w	sp, sp, #924	@ 0x39c
 8002178:	af24      	add	r7, sp, #144	@ 0x90
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800217a:	f005 fcbf 	bl	8007afc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800217e:	f000 ff95 	bl	80030ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002182:	f001 fab3 	bl	80036ec <MX_GPIO_Init>
  MX_I2C2_Init();
 8002186:	f000 fffb 	bl	8003180 <MX_I2C2_Init>
  MX_TIM1_Init();
 800218a:	f001 f827 	bl	80031dc <MX_TIM1_Init>
  MX_TIM2_Init();
 800218e:	f001 f8e9 	bl	8003364 <MX_TIM2_Init>
  MX_TIM8_Init();
 8002192:	f001 f969 	bl	8003468 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002196:	f001 fa2b 	bl	80035f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800219a:	f001 fa53 	bl	8003644 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800219e:	f001 fa7b 	bl	8003698 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80021a2:	2100      	movs	r1, #0
 80021a4:	48c6      	ldr	r0, [pc, #792]	@ (80024c0 <main+0x350>)
 80021a6:	f007 faa7 	bl	80096f8 <HAL_TIM_PWM_Start_IT>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <main+0x44>
  {
	  Error_Handler();
 80021b0:	f001 fd72 	bl	8003c98 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK)
 80021b4:	2104      	movs	r1, #4
 80021b6:	48c2      	ldr	r0, [pc, #776]	@ (80024c0 <main+0x350>)
 80021b8:	f007 fa9e 	bl	80096f8 <HAL_TIM_PWM_Start_IT>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <main+0x56>
  {
	  Error_Handler();
 80021c2:	f001 fd69 	bl	8003c98 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3) != HAL_OK)
 80021c6:	2108      	movs	r1, #8
 80021c8:	48bd      	ldr	r0, [pc, #756]	@ (80024c0 <main+0x350>)
 80021ca:	f007 fa95 	bl	80096f8 <HAL_TIM_PWM_Start_IT>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <main+0x68>
  {
	  Error_Handler();
 80021d4:	f001 fd60 	bl	8003c98 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 80021d8:	210c      	movs	r1, #12
 80021da:	48b9      	ldr	r0, [pc, #740]	@ (80024c0 <main+0x350>)
 80021dc:	f007 fa8c 	bl	80096f8 <HAL_TIM_PWM_Start_IT>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <main+0x7a>
  {
	  Error_Handler();
 80021e6:	f001 fd57 	bl	8003c98 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1) != HAL_OK)
 80021ea:	2100      	movs	r1, #0
 80021ec:	48b5      	ldr	r0, [pc, #724]	@ (80024c4 <main+0x354>)
 80021ee:	f007 fa83 	bl	80096f8 <HAL_TIM_PWM_Start_IT>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <main+0x8c>
  {
	  Error_Handler();
 80021f8:	f001 fd4e 	bl	8003c98 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2) != HAL_OK)
 80021fc:	2104      	movs	r1, #4
 80021fe:	48b1      	ldr	r0, [pc, #708]	@ (80024c4 <main+0x354>)
 8002200:	f007 fa7a 	bl	80096f8 <HAL_TIM_PWM_Start_IT>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <main+0x9e>
  {
	  Error_Handler();
 800220a:	f001 fd45 	bl	8003c98 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3) != HAL_OK)
 800220e:	2108      	movs	r1, #8
 8002210:	48ac      	ldr	r0, [pc, #688]	@ (80024c4 <main+0x354>)
 8002212:	f007 fa71 	bl	80096f8 <HAL_TIM_PWM_Start_IT>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <main+0xb0>
  {
	  Error_Handler();
 800221c:	f001 fd3c 	bl	8003c98 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_4) != HAL_OK)
 8002220:	210c      	movs	r1, #12
 8002222:	48a8      	ldr	r0, [pc, #672]	@ (80024c4 <main+0x354>)
 8002224:	f007 fa68 	bl	80096f8 <HAL_TIM_PWM_Start_IT>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <main+0xc2>
  {
	  Error_Handler();
 800222e:	f001 fd33 	bl	8003c98 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3) != HAL_OK)
 8002232:	2108      	movs	r1, #8
 8002234:	48a4      	ldr	r0, [pc, #656]	@ (80024c8 <main+0x358>)
 8002236:	f007 fa5f 	bl	80096f8 <HAL_TIM_PWM_Start_IT>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <main+0xd4>
  {
	  Error_Handler();
 8002240:	f001 fd2a 	bl	8003c98 <Error_Handler>
  }
  if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4) != HAL_OK)
 8002244:	210c      	movs	r1, #12
 8002246:	48a0      	ldr	r0, [pc, #640]	@ (80024c8 <main+0x358>)
 8002248:	f007 fa56 	bl	80096f8 <HAL_TIM_PWM_Start_IT>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <main+0xe6>
  {
	  Error_Handler();
 8002252:	f001 fd21 	bl	8003c98 <Error_Handler>
  }

  if(HAL_UART_Receive_IT(&huart1, receive, 1) != HAL_OK)
 8002256:	2201      	movs	r2, #1
 8002258:	499c      	ldr	r1, [pc, #624]	@ (80024cc <main+0x35c>)
 800225a:	489d      	ldr	r0, [pc, #628]	@ (80024d0 <main+0x360>)
 800225c:	f008 fa5c 	bl	800a718 <HAL_UART_Receive_IT>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <main+0xfa>
  {
	  Error_Handler();
 8002266:	f001 fd17 	bl	8003c98 <Error_Handler>
  }
  if(HAL_UART_Receive_IT(&huart2, receiveCAM, 1) != HAL_OK)
 800226a:	2201      	movs	r2, #1
 800226c:	4999      	ldr	r1, [pc, #612]	@ (80024d4 <main+0x364>)
 800226e:	489a      	ldr	r0, [pc, #616]	@ (80024d8 <main+0x368>)
 8002270:	f008 fa52 	bl	800a718 <HAL_UART_Receive_IT>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <main+0x10e>
  {
	  Error_Handler();
 800227a:	f001 fd0d 	bl	8003c98 <Error_Handler>
  }
  if(HAL_UART_Receive_IT(&huart3, receiveMEGA, 1) != HAL_OK)
 800227e:	2201      	movs	r2, #1
 8002280:	4996      	ldr	r1, [pc, #600]	@ (80024dc <main+0x36c>)
 8002282:	4897      	ldr	r0, [pc, #604]	@ (80024e0 <main+0x370>)
 8002284:	f008 fa48 	bl	800a718 <HAL_UART_Receive_IT>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <main+0x122>
  {
	  Error_Handler();
 800228e:	f001 fd03 	bl	8003c98 <Error_Handler>
  }

  initializeSilos();
 8002292:	f004 fa0d 	bl	80066b0 <initializeSilos>

  EKF blue_step1 = {0.0, 6700.0, 0.0};
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e9c7 23b6 	strd	r2, r3, [r7, #728]	@ 0x2d8
 80022a2:	a381      	add	r3, pc, #516	@ (adr r3, 80024a8 <main+0x338>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9c7 23ba 	strd	r2, r3, [r7, #744]	@ 0x2e8
  EKF blue_step2 = {4200.0, 6700.0, 0.0};
 80022b8:	4b8a      	ldr	r3, [pc, #552]	@ (80024e4 <main+0x374>)
 80022ba:	f507 7430 	add.w	r4, r7, #704	@ 0x2c0
 80022be:	461d      	mov	r5, r3
 80022c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022c8:	e884 0003 	stmia.w	r4, {r0, r1}
  EKF blue_step3 = {4200.0, 9500.0, 0.0};
 80022cc:	4b86      	ldr	r3, [pc, #536]	@ (80024e8 <main+0x378>)
 80022ce:	f507 742a 	add.w	r4, r7, #680	@ 0x2a8
 80022d2:	461d      	mov	r5, r3
 80022d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022dc:	e884 0003 	stmia.w	r4, {r0, r1}
  EKF blue_step4 = {4200.0, 9500.0, -90.0};
 80022e0:	4b82      	ldr	r3, [pc, #520]	@ (80024ec <main+0x37c>)
 80022e2:	f507 7424 	add.w	r4, r7, #656	@ 0x290
 80022e6:	461d      	mov	r5, r3
 80022e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022f0:	e884 0003 	stmia.w	r4, {r0, r1}
  EKF blue_storage = {-2600.0, 0.0, 0.0};
 80022f4:	a36e      	add	r3, pc, #440	@ (adr r3, 80024b0 <main+0x340>)
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	e9c7 23a2 	strd	r2, r3, [r7, #648]	@ 0x288
  EKF blue_facing_silo_EKF = {0.0, 0.0, 90.0};
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	e9c7 2398 	strd	r2, r3, [r7, #608]	@ 0x260
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	4b6f      	ldr	r3, [pc, #444]	@ (80024f0 <main+0x380>)
 8002334:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
  robotPosition blue_facing_silo = {0.0, 0.0, 90.0};
 8002338:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800233c:	2250      	movs	r2, #80	@ 0x50
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f00a ff42 	bl	800d1ca <memset>
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	4b69      	ldr	r3, [pc, #420]	@ (80024f0 <main+0x380>)
 800234c:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220

  EKF red_step1 = {0.0, 6700.0, 0.0};
 8002350:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002354:	f5a3 7188 	sub.w	r1, r3, #272	@ 0x110
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9c1 2300 	strd	r2, r3, [r1]
 8002364:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002368:	f5a3 7188 	sub.w	r1, r3, #272	@ 0x110
 800236c:	a34e      	add	r3, pc, #312	@ (adr r3, 80024a8 <main+0x338>)
 800236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002372:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002376:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800237a:	f5a3 7188 	sub.w	r1, r3, #272	@ 0x110
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	e9c1 2304 	strd	r2, r3, [r1, #16]
  EKF red_step2 = {-3500.0, 6200.0, 0.0};
 800238a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800238e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002392:	4a58      	ldr	r2, [pc, #352]	@ (80024f4 <main+0x384>)
 8002394:	461c      	mov	r4, r3
 8002396:	4615      	mov	r5, r2
 8002398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800239a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800239c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023a0:	e884 0003 	stmia.w	r4, {r0, r1}
  EKF red_step3 = {-3500.0, 9500.0, 0.0};
 80023a4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80023a8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023ac:	4a52      	ldr	r2, [pc, #328]	@ (80024f8 <main+0x388>)
 80023ae:	461c      	mov	r4, r3
 80023b0:	4615      	mov	r5, r2
 80023b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023ba:	e884 0003 	stmia.w	r4, {r0, r1}
  EKF red_step4 = {-3500.0, 9500.0, 90.0};
 80023be:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80023c2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80023c6:	4a4d      	ldr	r2, [pc, #308]	@ (80024fc <main+0x38c>)
 80023c8:	461c      	mov	r4, r3
 80023ca:	4615      	mov	r5, r2
 80023cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023d4:	e884 0003 	stmia.w	r4, {r0, r1}
  EKF red_storage = {-900.0, 0.0, 0.0};
 80023d8:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80023dc:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 80023e0:	a335      	add	r3, pc, #212	@ (adr r3, 80024b8 <main+0x348>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	e9c1 2300 	strd	r2, r3, [r1]
 80023ea:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80023ee:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80023fe:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002402:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  EKF red_facing_silo_EKF = {0.0, 0.0, 90.0};
 8002412:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002416:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	e9c1 2300 	strd	r2, r3, [r1]
 8002426:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800242a:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800243a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800243e:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	4b2a      	ldr	r3, [pc, #168]	@ (80024f0 <main+0x380>)
 8002448:	e9c1 2304 	strd	r2, r3, [r1, #16]
  robotPosition red_facing_silo = {0.0, 0.0, 90.0};
 800244c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002450:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002454:	4618      	mov	r0, r3
 8002456:	2350      	movs	r3, #80	@ 0x50
 8002458:	461a      	mov	r2, r3
 800245a:	2100      	movs	r1, #0
 800245c:	f00a feb5 	bl	800d1ca <memset>
 8002460:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002464:	f5a3 71ec 	sub.w	r1, r3, #472	@ 0x1d8
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	4b20      	ldr	r3, [pc, #128]	@ (80024f0 <main+0x380>)
 800246e:	e9c1 2304 	strd	r2, r3, [r1, #16]

  EKF coba[4] = {
 8002472:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002476:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800247a:	4a21      	ldr	r2, [pc, #132]	@ (8002500 <main+0x390>)
 800247c:	4618      	mov	r0, r3
 800247e:	4611      	mov	r1, r2
 8002480:	2360      	movs	r3, #96	@ 0x60
 8002482:	461a      	mov	r2, r3
 8002484:	f00a ff8f 	bl	800d3a6 <memcpy>
		  {0.0, 6400.0, 0.0},
		  {3500.0, 6400.0, 0.0},
		  {3500.0, 9500.0, 0.0},
		  {3500.0, 9500.0, -90.0}
  };
  EKF tes = {0.0, 2000.0, 0.0};
 8002488:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800248c:	f5a3 7114 	sub.w	r1, r3, #592	@ 0x250
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	e9c1 2300 	strd	r2, r3, [r1]
 800249c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80024a0:	e030      	b.n	8002504 <main+0x394>
 80024a2:	bf00      	nop
 80024a4:	f3af 8000 	nop.w
 80024a8:	00000000 	.word	0x00000000
 80024ac:	40ba2c00 	.word	0x40ba2c00
 80024b0:	00000000 	.word	0x00000000
 80024b4:	c0a45000 	.word	0xc0a45000
 80024b8:	00000000 	.word	0x00000000
 80024bc:	c08c2000 	.word	0xc08c2000
 80024c0:	20000320 	.word	0x20000320
 80024c4:	200003b0 	.word	0x200003b0
 80024c8:	20000368 	.word	0x20000368
 80024cc:	200004ec 	.word	0x200004ec
 80024d0:	200003f8 	.word	0x200003f8
 80024d4:	20000540 	.word	0x20000540
 80024d8:	20000440 	.word	0x20000440
 80024dc:	200005b0 	.word	0x200005b0
 80024e0:	20000488 	.word	0x20000488
 80024e4:	08011868 	.word	0x08011868
 80024e8:	08011880 	.word	0x08011880
 80024ec:	08011898 	.word	0x08011898
 80024f0:	40568000 	.word	0x40568000
 80024f4:	080118b0 	.word	0x080118b0
 80024f8:	080118c8 	.word	0x080118c8
 80024fc:	080118e0 	.word	0x080118e0
 8002500:	080118f8 	.word	0x080118f8
 8002504:	f5a3 7114 	sub.w	r1, r3, #592	@ 0x250
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	4bf0      	ldr	r3, [pc, #960]	@ (80028d0 <main+0x760>)
 800250e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002512:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002516:	f5a3 7114 	sub.w	r1, r3, #592	@ 0x250
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9c1 2304 	strd	r2, r3, [r1, #16]
  robotPosition nyoba_internal = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6700.0};
 8002526:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800252a:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800252e:	4618      	mov	r0, r3
 8002530:	2350      	movs	r3, #80	@ 0x50
 8002532:	461a      	mov	r2, r3
 8002534:	2100      	movs	r1, #0
 8002536:	f00a fe48 	bl	800d1ca <memset>
 800253a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800253e:	f5a3 7128 	sub.w	r1, r3, #672	@ 0x2a0
 8002542:	a3df      	add	r3, pc, #892	@ (adr r3, 80028c0 <main+0x750>)
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_init();
 800254c:	f7ff fbff 	bl	8001d4e <lcd_init>
	  EKF position = extendedKalmanFilter();
 8002550:	f001 ffee 	bl	8004530 <extendedKalmanFilter>
 8002554:	eeb0 5a40 	vmov.f32	s10, s0
 8002558:	eef0 5a60 	vmov.f32	s11, s1
 800255c:	eeb0 6a41 	vmov.f32	s12, s2
 8002560:	eef0 6a61 	vmov.f32	s13, s3
 8002564:	eeb0 7a42 	vmov.f32	s14, s4
 8002568:	eef0 7a62 	vmov.f32	s15, s5
 800256c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002570:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8002574:	ed83 5b00 	vstr	d5, [r3]
 8002578:	ed83 6b02 	vstr	d6, [r3, #8]
 800257c:	ed83 7b04 	vstr	d7, [r3, #16]
	  robotPosition positionExtenal = odometry();
 8002580:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002584:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8002588:	4618      	mov	r0, r3
 800258a:	f001 fba9 	bl	8003ce0 <odometry>
//	  displayKalman(position);
	  displayPosition(positionExtenal, in_global);
 800258e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002592:	f5a3 7642 	sub.w	r6, r3, #776	@ 0x308
 8002596:	2303      	movs	r3, #3
 8002598:	9310      	str	r3, [sp, #64]	@ 0x40
 800259a:	466d      	mov	r5, sp
 800259c:	f106 0410 	add.w	r4, r6, #16
 80025a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80025b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80025b8:	f002 ff4a 	bl	8005450 <displayPosition>
//	  displayCounter();

	  int frontLeftDistance = sensorMEGA[0];
 80025bc:	4bc5      	ldr	r3, [pc, #788]	@ (80028d4 <main+0x764>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
	  int frontRightDistance = sensorMEGA[1];
 80025c4:	4bc3      	ldr	r3, [pc, #780]	@ (80028d4 <main+0x764>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
	  int tolerance = 400;
 80025cc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80025d0:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc

	  bool blue_step1_check = atTargetPosition(blue_step1, position, tolerance, 1);
 80025d4:	f8d7 02fc 	ldr.w	r0, [r7, #764]	@ 0x2fc
 80025d8:	f7fd ffa4 	bl	8000524 <__aeabi_i2d>
 80025dc:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80025e0:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 80025e4:	ed93 3b00 	vldr	d3, [r3]
 80025e8:	ed93 4b02 	vldr	d4, [r3, #8]
 80025ec:	ed93 5b04 	vldr	d5, [r3, #16]
 80025f0:	ed97 0bb6 	vldr	d0, [r7, #728]	@ 0x2d8
 80025f4:	ed97 1bb8 	vldr	d1, [r7, #736]	@ 0x2e0
 80025f8:	ed97 2bba 	vldr	d2, [r7, #744]	@ 0x2e8
 80025fc:	ed9f 7bb2 	vldr	d7, [pc, #712]	@ 80028c8 <main+0x758>
 8002600:	ec41 0b16 	vmov	d6, r0, r1
 8002604:	f003 fa02 	bl	8005a0c <atTargetPosition>
 8002608:	4603      	mov	r3, r0
 800260a:	f887 32fb 	strb.w	r3, [r7, #763]	@ 0x2fb
	  bool blue_step2_check = atTargetPosition(blue_step2, position, tolerance, 1);
 800260e:	f8d7 02fc 	ldr.w	r0, [r7, #764]	@ 0x2fc
 8002612:	f7fd ff87 	bl	8000524 <__aeabi_i2d>
 8002616:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800261a:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 800261e:	ed93 3b00 	vldr	d3, [r3]
 8002622:	ed93 4b02 	vldr	d4, [r3, #8]
 8002626:	ed93 5b04 	vldr	d5, [r3, #16]
 800262a:	ed97 0bb0 	vldr	d0, [r7, #704]	@ 0x2c0
 800262e:	ed97 1bb2 	vldr	d1, [r7, #712]	@ 0x2c8
 8002632:	ed97 2bb4 	vldr	d2, [r7, #720]	@ 0x2d0
 8002636:	ed9f 7ba4 	vldr	d7, [pc, #656]	@ 80028c8 <main+0x758>
 800263a:	ec41 0b16 	vmov	d6, r0, r1
 800263e:	f003 f9e5 	bl	8005a0c <atTargetPosition>
 8002642:	4603      	mov	r3, r0
 8002644:	f887 32fa 	strb.w	r3, [r7, #762]	@ 0x2fa
	  bool blue_step3_check = atTargetPosition(blue_step3, position, tolerance, 1);
 8002648:	f8d7 02fc 	ldr.w	r0, [r7, #764]	@ 0x2fc
 800264c:	f7fd ff6a 	bl	8000524 <__aeabi_i2d>
 8002650:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002654:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8002658:	ed93 3b00 	vldr	d3, [r3]
 800265c:	ed93 4b02 	vldr	d4, [r3, #8]
 8002660:	ed93 5b04 	vldr	d5, [r3, #16]
 8002664:	ed97 0baa 	vldr	d0, [r7, #680]	@ 0x2a8
 8002668:	ed97 1bac 	vldr	d1, [r7, #688]	@ 0x2b0
 800266c:	ed97 2bae 	vldr	d2, [r7, #696]	@ 0x2b8
 8002670:	ed9f 7b95 	vldr	d7, [pc, #596]	@ 80028c8 <main+0x758>
 8002674:	ec41 0b16 	vmov	d6, r0, r1
 8002678:	f003 f9c8 	bl	8005a0c <atTargetPosition>
 800267c:	4603      	mov	r3, r0
 800267e:	f887 32f9 	strb.w	r3, [r7, #761]	@ 0x2f9
	  bool blue_step4_check = atTargetPosition(blue_step4, position, tolerance, 1);
 8002682:	f8d7 02fc 	ldr.w	r0, [r7, #764]	@ 0x2fc
 8002686:	f7fd ff4d 	bl	8000524 <__aeabi_i2d>
 800268a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800268e:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8002692:	ed93 3b00 	vldr	d3, [r3]
 8002696:	ed93 4b02 	vldr	d4, [r3, #8]
 800269a:	ed93 5b04 	vldr	d5, [r3, #16]
 800269e:	ed97 0ba4 	vldr	d0, [r7, #656]	@ 0x290
 80026a2:	ed97 1ba6 	vldr	d1, [r7, #664]	@ 0x298
 80026a6:	ed97 2ba8 	vldr	d2, [r7, #672]	@ 0x2a0
 80026aa:	ed9f 7b87 	vldr	d7, [pc, #540]	@ 80028c8 <main+0x758>
 80026ae:	ec41 0b16 	vmov	d6, r0, r1
 80026b2:	f003 f9ab 	bl	8005a0c <atTargetPosition>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f887 32f8 	strb.w	r3, [r7, #760]	@ 0x2f8
	  bool blue_storage_check = atTargetPosition(blue_storage, position, tolerance+500, 1);
 80026bc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80026c0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd ff2d 	bl	8000524 <__aeabi_i2d>
 80026ca:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80026ce:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 80026d2:	ed93 3b00 	vldr	d3, [r3]
 80026d6:	ed93 4b02 	vldr	d4, [r3, #8]
 80026da:	ed93 5b04 	vldr	d5, [r3, #16]
 80026de:	ed97 0b9e 	vldr	d0, [r7, #632]	@ 0x278
 80026e2:	ed97 1ba0 	vldr	d1, [r7, #640]	@ 0x280
 80026e6:	ed97 2ba2 	vldr	d2, [r7, #648]	@ 0x288
 80026ea:	ed9f 7b77 	vldr	d7, [pc, #476]	@ 80028c8 <main+0x758>
 80026ee:	ec41 0b16 	vmov	d6, r0, r1
 80026f2:	f003 f98b 	bl	8005a0c <atTargetPosition>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f887 32f7 	strb.w	r3, [r7, #759]	@ 0x2f7

	  bool blue_facing_silo_check = atTargetExternal(blue_facing_silo, positionExtenal, tolerance+500, 1);
 80026fc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002700:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd ff0d 	bl	8000524 <__aeabi_i2d>
 800270a:	4680      	mov	r8, r0
 800270c:	4689      	mov	r9, r1
 800270e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002712:	f5a3 7242 	sub.w	r2, r3, #776	@ 0x308
 8002716:	ab10      	add	r3, sp, #64	@ 0x40
 8002718:	4611      	mov	r1, r2
 800271a:	2250      	movs	r2, #80	@ 0x50
 800271c:	4618      	mov	r0, r3
 800271e:	f00a fe42 	bl	800d3a6 <memcpy>
 8002722:	466d      	mov	r5, sp
 8002724:	f507 7408 	add.w	r4, r7, #544	@ 0x220
 8002728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800272a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800272c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800272e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002734:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002738:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800273c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002740:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002742:	ed9f 1b61 	vldr	d1, [pc, #388]	@ 80028c8 <main+0x758>
 8002746:	ec49 8b10 	vmov	d0, r8, r9
 800274a:	f003 f90b 	bl	8005964 <atTargetExternal>
 800274e:	4603      	mov	r3, r0
 8002750:	f887 32f6 	strb.w	r3, [r7, #758]	@ 0x2f6

	  bool red_step1_check = atTargetPosition(red_step1, position, tolerance, 1);
 8002754:	f8d7 02fc 	ldr.w	r0, [r7, #764]	@ 0x2fc
 8002758:	f7fd fee4 	bl	8000524 <__aeabi_i2d>
 800275c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002760:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8002764:	ed93 3b00 	vldr	d3, [r3]
 8002768:	ed93 4b02 	vldr	d4, [r3, #8]
 800276c:	ed93 5b04 	vldr	d5, [r3, #16]
 8002770:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002774:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002778:	ed93 0b00 	vldr	d0, [r3]
 800277c:	ed93 1b02 	vldr	d1, [r3, #8]
 8002780:	ed93 2b04 	vldr	d2, [r3, #16]
 8002784:	ed9f 7b50 	vldr	d7, [pc, #320]	@ 80028c8 <main+0x758>
 8002788:	ec41 0b16 	vmov	d6, r0, r1
 800278c:	f003 f93e 	bl	8005a0c <atTargetPosition>
 8002790:	4603      	mov	r3, r0
 8002792:	f887 32f5 	strb.w	r3, [r7, #757]	@ 0x2f5
	  bool red_step2_check = atTargetPosition(red_step2, position, tolerance, 1);
 8002796:	f8d7 02fc 	ldr.w	r0, [r7, #764]	@ 0x2fc
 800279a:	f7fd fec3 	bl	8000524 <__aeabi_i2d>
 800279e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80027a2:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 80027a6:	ed93 3b00 	vldr	d3, [r3]
 80027aa:	ed93 4b02 	vldr	d4, [r3, #8]
 80027ae:	ed93 5b04 	vldr	d5, [r3, #16]
 80027b2:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80027b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80027ba:	ed93 0b00 	vldr	d0, [r3]
 80027be:	ed93 1b02 	vldr	d1, [r3, #8]
 80027c2:	ed93 2b04 	vldr	d2, [r3, #16]
 80027c6:	ed9f 7b40 	vldr	d7, [pc, #256]	@ 80028c8 <main+0x758>
 80027ca:	ec41 0b16 	vmov	d6, r0, r1
 80027ce:	f003 f91d 	bl	8005a0c <atTargetPosition>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f887 32f4 	strb.w	r3, [r7, #756]	@ 0x2f4
	  bool red_step3_check = atTargetPosition(red_step3, position, tolerance, 1);
 80027d8:	f8d7 02fc 	ldr.w	r0, [r7, #764]	@ 0x2fc
 80027dc:	f7fd fea2 	bl	8000524 <__aeabi_i2d>
 80027e0:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80027e4:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 80027e8:	ed93 3b00 	vldr	d3, [r3]
 80027ec:	ed93 4b02 	vldr	d4, [r3, #8]
 80027f0:	ed93 5b04 	vldr	d5, [r3, #16]
 80027f4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80027f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027fc:	ed93 0b00 	vldr	d0, [r3]
 8002800:	ed93 1b02 	vldr	d1, [r3, #8]
 8002804:	ed93 2b04 	vldr	d2, [r3, #16]
 8002808:	ed9f 7b2f 	vldr	d7, [pc, #188]	@ 80028c8 <main+0x758>
 800280c:	ec41 0b16 	vmov	d6, r0, r1
 8002810:	f003 f8fc 	bl	8005a0c <atTargetPosition>
 8002814:	4603      	mov	r3, r0
 8002816:	f887 32f3 	strb.w	r3, [r7, #755]	@ 0x2f3
	  bool red_step4_check = atTargetPosition(red_step4, position, tolerance, 1);
 800281a:	f8d7 02fc 	ldr.w	r0, [r7, #764]	@ 0x2fc
 800281e:	f7fd fe81 	bl	8000524 <__aeabi_i2d>
 8002822:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002826:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 800282a:	ed93 3b00 	vldr	d3, [r3]
 800282e:	ed93 4b02 	vldr	d4, [r3, #8]
 8002832:	ed93 5b04 	vldr	d5, [r3, #16]
 8002836:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800283a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800283e:	ed93 0b00 	vldr	d0, [r3]
 8002842:	ed93 1b02 	vldr	d1, [r3, #8]
 8002846:	ed93 2b04 	vldr	d2, [r3, #16]
 800284a:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 80028c8 <main+0x758>
 800284e:	ec41 0b16 	vmov	d6, r0, r1
 8002852:	f003 f8db 	bl	8005a0c <atTargetPosition>
 8002856:	4603      	mov	r3, r0
 8002858:	f887 32f2 	strb.w	r3, [r7, #754]	@ 0x2f2
	  bool red_storage_check = atTargetPosition(red_storage, position, tolerance+500, 1);
 800285c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8002860:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fe5d 	bl	8000524 <__aeabi_i2d>
 800286a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800286e:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8002872:	ed93 3b00 	vldr	d3, [r3]
 8002876:	ed93 4b02 	vldr	d4, [r3, #8]
 800287a:	ed93 5b04 	vldr	d5, [r3, #16]
 800287e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002882:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002886:	ed93 0b00 	vldr	d0, [r3]
 800288a:	ed93 1b02 	vldr	d1, [r3, #8]
 800288e:	ed93 2b04 	vldr	d2, [r3, #16]
 8002892:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80028c8 <main+0x758>
 8002896:	ec41 0b16 	vmov	d6, r0, r1
 800289a:	f003 f8b7 	bl	8005a0c <atTargetPosition>
 800289e:	4603      	mov	r3, r0
 80028a0:	f887 32f1 	strb.w	r3, [r7, #753]	@ 0x2f1
	  bool red_facing_silo_check = atTargetExternal(red_facing_silo, positionExtenal, tolerance+500, 1);
 80028a4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80028a8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fe39 	bl	8000524 <__aeabi_i2d>
 80028b2:	4680      	mov	r8, r0
 80028b4:	4689      	mov	r9, r1
 80028b6:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80028ba:	e00d      	b.n	80028d8 <main+0x768>
 80028bc:	f3af 8000 	nop.w
 80028c0:	00000000 	.word	0x00000000
 80028c4:	40ba2c00 	.word	0x40ba2c00
 80028c8:	00000000 	.word	0x00000000
 80028cc:	3ff00000 	.word	0x3ff00000
 80028d0:	409f4000 	.word	0x409f4000
 80028d4:	200005ec 	.word	0x200005ec
 80028d8:	f5a3 76ec 	sub.w	r6, r3, #472	@ 0x1d8
 80028dc:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80028e0:	f5a3 7242 	sub.w	r2, r3, #776	@ 0x308
 80028e4:	ab10      	add	r3, sp, #64	@ 0x40
 80028e6:	4611      	mov	r1, r2
 80028e8:	2250      	movs	r2, #80	@ 0x50
 80028ea:	4618      	mov	r0, r3
 80028ec:	f00a fd5b 	bl	800d3a6 <memcpy>
 80028f0:	466d      	mov	r5, sp
 80028f2:	f106 0410 	add.w	r4, r6, #16
 80028f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002902:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002906:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800290a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800290e:	ed9f 1ba4 	vldr	d1, [pc, #656]	@ 8002ba0 <main+0xa30>
 8002912:	ec49 8b10 	vmov	d0, r8, r9
 8002916:	f003 f825 	bl	8005964 <atTargetExternal>
 800291a:	4603      	mov	r3, r0
 800291c:	f887 32f0 	strb.w	r3, [r7, #752]	@ 0x2f0

	  switch(mode)
 8002920:	4bbd      	ldr	r3, [pc, #756]	@ (8002c18 <main+0xaa8>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	3b01      	subs	r3, #1
 8002926:	2b10      	cmp	r3, #16
 8002928:	f200 837a 	bhi.w	8003020 <main+0xeb0>
 800292c:	a201      	add	r2, pc, #4	@ (adr r2, 8002934 <main+0x7c4>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002979 	.word	0x08002979
 8002938:	080029c9 	.word	0x080029c9
 800293c:	08002a15 	.word	0x08002a15
 8002940:	08002a61 	.word	0x08002a61
 8002944:	08002aad 	.word	0x08002aad
 8002948:	08002b17 	.word	0x08002b17
 800294c:	08002b39 	.word	0x08002b39
 8002950:	08002c29 	.word	0x08002c29
 8002954:	08002cbf 	.word	0x08002cbf
 8002958:	08002d07 	.word	0x08002d07
 800295c:	08002d4f 	.word	0x08002d4f
 8002960:	08002d97 	.word	0x08002d97
 8002964:	08002ddf 	.word	0x08002ddf
 8002968:	08002e45 	.word	0x08002e45
 800296c:	08002e5b 	.word	0x08002e5b
 8002970:	08002ec7 	.word	0x08002ec7
 8002974:	08002f63 	.word	0x08002f63
	  {
	  case BLUE_STEP1:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002978:	2201      	movs	r2, #1
 800297a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800297e:	48a7      	ldr	r0, [pc, #668]	@ (8002c1c <main+0xaac>)
 8002980:	f005 fcaa 	bl	80082d8 <HAL_GPIO_WritePin>
		  PID_Internal(nyoba_internal, 1.3, 0.0, 0.0, 2.0, 0.8, 4000);
 8002984:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002988:	f5a3 7628 	sub.w	r6, r3, #672	@ 0x2a0
 800298c:	466d      	mov	r5, sp
 800298e:	f106 0410 	add.w	r4, r6, #16
 8002992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800299c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80029a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029aa:	ed9f 5b7f 	vldr	d5, [pc, #508]	@ 8002ba8 <main+0xa38>
 80029ae:	ed9f 4b80 	vldr	d4, [pc, #512]	@ 8002bb0 <main+0xa40>
 80029b2:	ed9f 3b81 	vldr	d3, [pc, #516]	@ 8002bb8 <main+0xa48>
 80029b6:	ed9f 2b82 	vldr	d2, [pc, #520]	@ 8002bc0 <main+0xa50>
 80029ba:	ed9f 1b81 	vldr	d1, [pc, #516]	@ 8002bc0 <main+0xa50>
 80029be:	ed9f 0b82 	vldr	d0, [pc, #520]	@ 8002bc8 <main+0xa58>
 80029c2:	f003 fa91 	bl	8005ee8 <PID_Internal>
//		  PID_KFtocoordinate(blue_step1, 1.3, 0.0, 0.0, 2.5, 0.8, 4000);
//		  if(blue_step1_check)
//		  {
//			  mode = BLUE_STEP2;
//		  }
		  break;
 80029c6:	e366      	b.n	8003096 <main+0xf26>
	  case BLUE_STEP2:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80029c8:	2200      	movs	r2, #0
 80029ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80029ce:	4893      	ldr	r0, [pc, #588]	@ (8002c1c <main+0xaac>)
 80029d0:	f005 fc82 	bl	80082d8 <HAL_GPIO_WritePin>
		  PID_KFtocoordinate(blue_step2, 2.4, 0.0, 0.0, 2.5, 0.8, 4000);
 80029d4:	ed97 0bb0 	vldr	d0, [r7, #704]	@ 0x2c0
 80029d8:	ed97 1bb2 	vldr	d1, [r7, #712]	@ 0x2c8
 80029dc:	ed97 2bb4 	vldr	d2, [r7, #720]	@ 0x2d0
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002c20 <main+0xab0>)
 80029e6:	e9cd 2300 	strd	r2, r3, [sp]
 80029ea:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8002bb0 <main+0xa40>
 80029ee:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8002bd0 <main+0xa60>
 80029f2:	ed9f 5b73 	vldr	d5, [pc, #460]	@ 8002bc0 <main+0xa50>
 80029f6:	ed9f 4b72 	vldr	d4, [pc, #456]	@ 8002bc0 <main+0xa50>
 80029fa:	ed9f 3b77 	vldr	d3, [pc, #476]	@ 8002bd8 <main+0xa68>
 80029fe:	f003 fc17 	bl	8006230 <PID_KFtocoordinate>
		  if(blue_step2_check)
 8002a02:	f897 32fa 	ldrb.w	r3, [r7, #762]	@ 0x2fa
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8328 	beq.w	800305c <main+0xeec>
		  {
			  mode = BLUE_STEP3;
 8002a0c:	4b82      	ldr	r3, [pc, #520]	@ (8002c18 <main+0xaa8>)
 8002a0e:	2203      	movs	r2, #3
 8002a10:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002a12:	e323      	b.n	800305c <main+0xeec>
	  case BLUE_STEP3:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002a14:	2201      	movs	r2, #1
 8002a16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a1a:	4880      	ldr	r0, [pc, #512]	@ (8002c1c <main+0xaac>)
 8002a1c:	f005 fc5c 	bl	80082d8 <HAL_GPIO_WritePin>
		  PID_KFtocoordinate(blue_step3, 1.8, 0.0, 0.0, 2.0, 0.8, 5500);
 8002a20:	ed97 0baa 	vldr	d0, [r7, #680]	@ 0x2a8
 8002a24:	ed97 1bac 	vldr	d1, [r7, #688]	@ 0x2b0
 8002a28:	ed97 2bae 	vldr	d2, [r7, #696]	@ 0x2b8
 8002a2c:	a36c      	add	r3, pc, #432	@ (adr r3, 8002be0 <main+0xa70>)
 8002a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a32:	e9cd 2300 	strd	r2, r3, [sp]
 8002a36:	ed9f 7b5e 	vldr	d7, [pc, #376]	@ 8002bb0 <main+0xa40>
 8002a3a:	ed9f 6b5f 	vldr	d6, [pc, #380]	@ 8002bb8 <main+0xa48>
 8002a3e:	ed9f 5b60 	vldr	d5, [pc, #384]	@ 8002bc0 <main+0xa50>
 8002a42:	ed9f 4b5f 	vldr	d4, [pc, #380]	@ 8002bc0 <main+0xa50>
 8002a46:	ed9f 3b68 	vldr	d3, [pc, #416]	@ 8002be8 <main+0xa78>
 8002a4a:	f003 fbf1 	bl	8006230 <PID_KFtocoordinate>
		  if(blue_step3_check)
 8002a4e:	f897 32f9 	ldrb.w	r3, [r7, #761]	@ 0x2f9
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8304 	beq.w	8003060 <main+0xef0>
		  {
			  mode = BLUE_STEP4;
 8002a58:	4b6f      	ldr	r3, [pc, #444]	@ (8002c18 <main+0xaa8>)
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002a5e:	e2ff      	b.n	8003060 <main+0xef0>
	  case BLUE_STEP4:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002a60:	2200      	movs	r2, #0
 8002a62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a66:	486d      	ldr	r0, [pc, #436]	@ (8002c1c <main+0xaac>)
 8002a68:	f005 fc36 	bl	80082d8 <HAL_GPIO_WritePin>
		  PID_KFtocoordinate(blue_step4, 2.0, 0.0, 0.0, 1.0, 0.8, 3000);
 8002a6c:	ed97 0ba4 	vldr	d0, [r7, #656]	@ 0x290
 8002a70:	ed97 1ba6 	vldr	d1, [r7, #664]	@ 0x298
 8002a74:	ed97 2ba8 	vldr	d2, [r7, #672]	@ 0x2a0
 8002a78:	a35d      	add	r3, pc, #372	@ (adr r3, 8002bf0 <main+0xa80>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	e9cd 2300 	strd	r2, r3, [sp]
 8002a82:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 8002bb0 <main+0xa40>
 8002a86:	ed9f 6b46 	vldr	d6, [pc, #280]	@ 8002ba0 <main+0xa30>
 8002a8a:	ed9f 5b4d 	vldr	d5, [pc, #308]	@ 8002bc0 <main+0xa50>
 8002a8e:	ed9f 4b4c 	vldr	d4, [pc, #304]	@ 8002bc0 <main+0xa50>
 8002a92:	ed9f 3b49 	vldr	d3, [pc, #292]	@ 8002bb8 <main+0xa48>
 8002a96:	f003 fbcb 	bl	8006230 <PID_KFtocoordinate>
		  if(blue_step4_check)
 8002a9a:	f897 32f8 	ldrb.w	r3, [r7, #760]	@ 0x2f8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 82e0 	beq.w	8003064 <main+0xef4>
		  {
			  mode = VOID;
 8002aa4:	4b5c      	ldr	r3, [pc, #368]	@ (8002c18 <main+0xaa8>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002aaa:	e2db      	b.n	8003064 <main+0xef4>
	  case BLUE_STORAGE:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002aac:	2201      	movs	r2, #1
 8002aae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002ab2:	485a      	ldr	r0, [pc, #360]	@ (8002c1c <main+0xaac>)
 8002ab4:	f005 fc10 	bl	80082d8 <HAL_GPIO_WritePin>
		  setMotorSpeed(1, 0);
 8002ab8:	ed9f 0b41 	vldr	d0, [pc, #260]	@ 8002bc0 <main+0xa50>
 8002abc:	2001      	movs	r0, #1
 8002abe:	f7fe facd 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8002ac2:	ed9f 0b3f 	vldr	d0, [pc, #252]	@ 8002bc0 <main+0xa50>
 8002ac6:	2002      	movs	r0, #2
 8002ac8:	f7fe fac8 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 8002acc:	ed9f 0b3c 	vldr	d0, [pc, #240]	@ 8002bc0 <main+0xa50>
 8002ad0:	2007      	movs	r0, #7
 8002ad2:	f7fe fac3 	bl	800105c <setMotorSpeed>
		  PID_KFtocoordinate(blue_storage, 1.3, 0.0, 0.0, 1.4, 0.6, 3000);
 8002ad6:	ed97 0b9e 	vldr	d0, [r7, #632]	@ 0x278
 8002ada:	ed97 1ba0 	vldr	d1, [r7, #640]	@ 0x280
 8002ade:	ed97 2ba2 	vldr	d2, [r7, #648]	@ 0x288
 8002ae2:	a343      	add	r3, pc, #268	@ (adr r3, 8002bf0 <main+0xa80>)
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	e9cd 2300 	strd	r2, r3, [sp]
 8002aec:	ed9f 7b42 	vldr	d7, [pc, #264]	@ 8002bf8 <main+0xa88>
 8002af0:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8002c00 <main+0xa90>
 8002af4:	ed9f 5b32 	vldr	d5, [pc, #200]	@ 8002bc0 <main+0xa50>
 8002af8:	ed9f 4b31 	vldr	d4, [pc, #196]	@ 8002bc0 <main+0xa50>
 8002afc:	ed9f 3b32 	vldr	d3, [pc, #200]	@ 8002bc8 <main+0xa58>
 8002b00:	f003 fb96 	bl	8006230 <PID_KFtocoordinate>
		  if(blue_storage_check)
 8002b04:	f897 32f7 	ldrb.w	r3, [r7, #759]	@ 0x2f7
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 82ad 	beq.w	8003068 <main+0xef8>
		  {
			  mode = BLUE_FIND_BALL;
 8002b0e:	4b42      	ldr	r3, [pc, #264]	@ (8002c18 <main+0xaa8>)
 8002b10:	2206      	movs	r2, #6
 8002b12:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002b14:	e2a8      	b.n	8003068 <main+0xef8>
	  case BLUE_FIND_BALL:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002b16:	2200      	movs	r2, #0
 8002b18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b1c:	483f      	ldr	r0, [pc, #252]	@ (8002c1c <main+0xaac>)
 8002b1e:	f005 fbdb 	bl	80082d8 <HAL_GPIO_WritePin>
		  findAndTakeBall();
 8002b22:	f004 f8f9 	bl	8006d18 <findAndTakeBall>
		  if(sensorMEGA[4] == 0)
 8002b26:	4b3f      	ldr	r3, [pc, #252]	@ (8002c24 <main+0xab4>)
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 829e 	bne.w	800306c <main+0xefc>
		  {
			  mode = BLUE_FACING_SILO;
 8002b30:	4b39      	ldr	r3, [pc, #228]	@ (8002c18 <main+0xaa8>)
 8002b32:	2207      	movs	r2, #7
 8002b34:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002b36:	e299      	b.n	800306c <main+0xefc>
	  case BLUE_FACING_SILO:
		  setMotorSpeed(1, 0);
 8002b38:	ed9f 0b21 	vldr	d0, [pc, #132]	@ 8002bc0 <main+0xa50>
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f7fe fa8d 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8002b42:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8002bc0 <main+0xa50>
 8002b46:	2002      	movs	r0, #2
 8002b48:	f7fe fa88 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 8002b4c:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 8002bc0 <main+0xa50>
 8002b50:	2007      	movs	r0, #7
 8002b52:	f7fe fa83 	bl	800105c <setMotorSpeed>
		  servo_write(126);
 8002b56:	207e      	movs	r0, #126	@ 0x7e
 8002b58:	f003 f80a 	bl	8005b70 <servo_write>
		  PID_KFtocoordinate(blue_facing_silo_EKF, 1.5, 0.0, 0.0, 1.2, 0.6, 3000);
 8002b5c:	ed97 0b98 	vldr	d0, [r7, #608]	@ 0x260
 8002b60:	ed97 1b9a 	vldr	d1, [r7, #616]	@ 0x268
 8002b64:	ed97 2b9c 	vldr	d2, [r7, #624]	@ 0x270
 8002b68:	a321      	add	r3, pc, #132	@ (adr r3, 8002bf0 <main+0xa80>)
 8002b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6e:	e9cd 2300 	strd	r2, r3, [sp]
 8002b72:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8002bf8 <main+0xa88>
 8002b76:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8002c08 <main+0xa98>
 8002b7a:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8002bc0 <main+0xa50>
 8002b7e:	ed9f 4b10 	vldr	d4, [pc, #64]	@ 8002bc0 <main+0xa50>
 8002b82:	ed9f 3b23 	vldr	d3, [pc, #140]	@ 8002c10 <main+0xaa0>
 8002b86:	f003 fb53 	bl	8006230 <PID_KFtocoordinate>
		  if(blue_facing_silo_check)
 8002b8a:	f897 32f6 	ldrb.w	r3, [r7, #758]	@ 0x2f6
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 826e 	beq.w	8003070 <main+0xf00>
		  {
			  mode = BLUE_FIND_SILO;
 8002b94:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <main+0xaa8>)
 8002b96:	2208      	movs	r2, #8
 8002b98:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002b9a:	e269      	b.n	8003070 <main+0xf00>
 8002b9c:	f3af 8000 	nop.w
 8002ba0:	00000000 	.word	0x00000000
 8002ba4:	3ff00000 	.word	0x3ff00000
 8002ba8:	00000000 	.word	0x00000000
 8002bac:	40af4000 	.word	0x40af4000
 8002bb0:	9999999a 	.word	0x9999999a
 8002bb4:	3fe99999 	.word	0x3fe99999
 8002bb8:	00000000 	.word	0x00000000
 8002bbc:	40000000 	.word	0x40000000
	...
 8002bc8:	cccccccd 	.word	0xcccccccd
 8002bcc:	3ff4cccc 	.word	0x3ff4cccc
 8002bd0:	00000000 	.word	0x00000000
 8002bd4:	40040000 	.word	0x40040000
 8002bd8:	33333333 	.word	0x33333333
 8002bdc:	40033333 	.word	0x40033333
 8002be0:	00000000 	.word	0x00000000
 8002be4:	40b57c00 	.word	0x40b57c00
 8002be8:	cccccccd 	.word	0xcccccccd
 8002bec:	3ffccccc 	.word	0x3ffccccc
 8002bf0:	00000000 	.word	0x00000000
 8002bf4:	40a77000 	.word	0x40a77000
 8002bf8:	33333333 	.word	0x33333333
 8002bfc:	3fe33333 	.word	0x3fe33333
 8002c00:	66666666 	.word	0x66666666
 8002c04:	3ff66666 	.word	0x3ff66666
 8002c08:	33333333 	.word	0x33333333
 8002c0c:	3ff33333 	.word	0x3ff33333
 8002c10:	00000000 	.word	0x00000000
 8002c14:	3ff80000 	.word	0x3ff80000
 8002c18:	20000600 	.word	0x20000600
 8002c1c:	40020c00 	.word	0x40020c00
 8002c20:	40af4000 	.word	0x40af4000
 8002c24:	200005ec 	.word	0x200005ec
	  case BLUE_FIND_SILO:
		  placeBallInSilo(blue_facing_silo, 1.2, 0.0, 0.0, 1.1);
 8002c28:	466d      	mov	r5, sp
 8002c2a:	f507 7408 	add.w	r4, r7, #544	@ 0x220
 8002c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c3e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002c42:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c48:	ed9f 3bd5 	vldr	d3, [pc, #852]	@ 8002fa0 <main+0xe30>
 8002c4c:	ed9f 2bd6 	vldr	d2, [pc, #856]	@ 8002fa8 <main+0xe38>
 8002c50:	ed9f 1bd5 	vldr	d1, [pc, #852]	@ 8002fa8 <main+0xe38>
 8002c54:	ed9f 0bd6 	vldr	d0, [pc, #856]	@ 8002fb0 <main+0xe40>
 8002c58:	f003 ff42 	bl	8006ae0 <placeBallInSilo>
		  if((frontLeftDistance > 0 && frontLeftDistance <= 10) || (frontRightDistance > 0 && frontRightDistance <= 10))
 8002c5c:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	dd03      	ble.n	8002c6c <main+0xafc>
 8002c64:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8002c68:	2b0a      	cmp	r3, #10
 8002c6a:	dd09      	ble.n	8002c80 <main+0xb10>
 8002c6c:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f340 81ff 	ble.w	8003074 <main+0xf04>
 8002c76:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8002c7a:	2b0a      	cmp	r3, #10
 8002c7c:	f300 81fa 	bgt.w	8003074 <main+0xf04>
		  {
			  Inverse_Kinematics(0, 0, 0);
 8002c80:	ed9f 2bc9 	vldr	d2, [pc, #804]	@ 8002fa8 <main+0xe38>
 8002c84:	ed9f 1bc8 	vldr	d1, [pc, #800]	@ 8002fa8 <main+0xe38>
 8002c88:	ed9f 0bc7 	vldr	d0, [pc, #796]	@ 8002fa8 <main+0xe38>
 8002c8c:	f7fe fa5c 	bl	8001148 <Inverse_Kinematics>
			  setMotorSpeed(1, -800);
 8002c90:	ed9f 0bc9 	vldr	d0, [pc, #804]	@ 8002fb8 <main+0xe48>
 8002c94:	2001      	movs	r0, #1
 8002c96:	f7fe f9e1 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -1000);
 8002c9a:	ed9f 0bc9 	vldr	d0, [pc, #804]	@ 8002fc0 <main+0xe50>
 8002c9e:	2002      	movs	r0, #2
 8002ca0:	f7fe f9dc 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -1200);
 8002ca4:	ed9f 0bc8 	vldr	d0, [pc, #800]	@ 8002fc8 <main+0xe58>
 8002ca8:	2007      	movs	r0, #7
 8002caa:	f7fe f9d7 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 8002cae:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002cb2:	f004 ff95 	bl	8007be0 <HAL_Delay>
			  mode = BLUE_STORAGE;
 8002cb6:	4bd8      	ldr	r3, [pc, #864]	@ (8003018 <main+0xea8>)
 8002cb8:	2205      	movs	r2, #5
 8002cba:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002cbc:	e1da      	b.n	8003074 <main+0xf04>
	  case RED_STEP1:
		  PID_KFtocoordinate(red_step1, 1.0, 0.0, 0.0, 1.0, 0.8, 5000);
 8002cbe:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002cc2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002cc6:	ed93 0b00 	vldr	d0, [r3]
 8002cca:	ed93 1b02 	vldr	d1, [r3, #8]
 8002cce:	ed93 2b04 	vldr	d2, [r3, #16]
 8002cd2:	a3bf      	add	r3, pc, #764	@ (adr r3, 8002fd0 <main+0xe60>)
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	e9cd 2300 	strd	r2, r3, [sp]
 8002cdc:	ed9f 7bbe 	vldr	d7, [pc, #760]	@ 8002fd8 <main+0xe68>
 8002ce0:	ed9f 6bbf 	vldr	d6, [pc, #764]	@ 8002fe0 <main+0xe70>
 8002ce4:	ed9f 5bb0 	vldr	d5, [pc, #704]	@ 8002fa8 <main+0xe38>
 8002ce8:	ed9f 4baf 	vldr	d4, [pc, #700]	@ 8002fa8 <main+0xe38>
 8002cec:	ed9f 3bbc 	vldr	d3, [pc, #752]	@ 8002fe0 <main+0xe70>
 8002cf0:	f003 fa9e 	bl	8006230 <PID_KFtocoordinate>
		  if(red_step1_check)
 8002cf4:	f897 32f5 	ldrb.w	r3, [r7, #757]	@ 0x2f5
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 81bd 	beq.w	8003078 <main+0xf08>
		  {
			  mode = RED_STEP2;
 8002cfe:	4bc6      	ldr	r3, [pc, #792]	@ (8003018 <main+0xea8>)
 8002d00:	220a      	movs	r2, #10
 8002d02:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002d04:	e1b8      	b.n	8003078 <main+0xf08>
	  case RED_STEP2:
		  PID_KFtocoordinate(red_step2, 1.0, 0.0, 0.0, 1.0, 0.8, 5000);
 8002d06:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002d0a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d0e:	ed93 0b00 	vldr	d0, [r3]
 8002d12:	ed93 1b02 	vldr	d1, [r3, #8]
 8002d16:	ed93 2b04 	vldr	d2, [r3, #16]
 8002d1a:	a3ad      	add	r3, pc, #692	@ (adr r3, 8002fd0 <main+0xe60>)
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	e9cd 2300 	strd	r2, r3, [sp]
 8002d24:	ed9f 7bac 	vldr	d7, [pc, #688]	@ 8002fd8 <main+0xe68>
 8002d28:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8002fe0 <main+0xe70>
 8002d2c:	ed9f 5b9e 	vldr	d5, [pc, #632]	@ 8002fa8 <main+0xe38>
 8002d30:	ed9f 4b9d 	vldr	d4, [pc, #628]	@ 8002fa8 <main+0xe38>
 8002d34:	ed9f 3baa 	vldr	d3, [pc, #680]	@ 8002fe0 <main+0xe70>
 8002d38:	f003 fa7a 	bl	8006230 <PID_KFtocoordinate>
		  if(red_step2_check)
 8002d3c:	f897 32f4 	ldrb.w	r3, [r7, #756]	@ 0x2f4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 819b 	beq.w	800307c <main+0xf0c>
		  {
			  mode = RED_STEP3;
 8002d46:	4bb4      	ldr	r3, [pc, #720]	@ (8003018 <main+0xea8>)
 8002d48:	220b      	movs	r2, #11
 8002d4a:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002d4c:	e196      	b.n	800307c <main+0xf0c>
	  case RED_STEP3:
		  PID_KFtocoordinate(red_step3, 1.0, 0.0, 0.0, 1.0, 0.8, 5000);
 8002d4e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002d52:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d56:	ed93 0b00 	vldr	d0, [r3]
 8002d5a:	ed93 1b02 	vldr	d1, [r3, #8]
 8002d5e:	ed93 2b04 	vldr	d2, [r3, #16]
 8002d62:	a39b      	add	r3, pc, #620	@ (adr r3, 8002fd0 <main+0xe60>)
 8002d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d68:	e9cd 2300 	strd	r2, r3, [sp]
 8002d6c:	ed9f 7b9a 	vldr	d7, [pc, #616]	@ 8002fd8 <main+0xe68>
 8002d70:	ed9f 6b9b 	vldr	d6, [pc, #620]	@ 8002fe0 <main+0xe70>
 8002d74:	ed9f 5b8c 	vldr	d5, [pc, #560]	@ 8002fa8 <main+0xe38>
 8002d78:	ed9f 4b8b 	vldr	d4, [pc, #556]	@ 8002fa8 <main+0xe38>
 8002d7c:	ed9f 3b98 	vldr	d3, [pc, #608]	@ 8002fe0 <main+0xe70>
 8002d80:	f003 fa56 	bl	8006230 <PID_KFtocoordinate>
		  if(red_step3_check)
 8002d84:	f897 32f3 	ldrb.w	r3, [r7, #755]	@ 0x2f3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8179 	beq.w	8003080 <main+0xf10>
		  {
			  mode = RED_STEP4;
 8002d8e:	4ba2      	ldr	r3, [pc, #648]	@ (8003018 <main+0xea8>)
 8002d90:	220c      	movs	r2, #12
 8002d92:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002d94:	e174      	b.n	8003080 <main+0xf10>
	  case RED_STEP4:
		  PID_KFtocoordinate(red_step4, 1.0, 0.0, 0.0, 1.0, 0.8, 5000);
 8002d96:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002d9a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002d9e:	ed93 0b00 	vldr	d0, [r3]
 8002da2:	ed93 1b02 	vldr	d1, [r3, #8]
 8002da6:	ed93 2b04 	vldr	d2, [r3, #16]
 8002daa:	a389      	add	r3, pc, #548	@ (adr r3, 8002fd0 <main+0xe60>)
 8002dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db0:	e9cd 2300 	strd	r2, r3, [sp]
 8002db4:	ed9f 7b88 	vldr	d7, [pc, #544]	@ 8002fd8 <main+0xe68>
 8002db8:	ed9f 6b89 	vldr	d6, [pc, #548]	@ 8002fe0 <main+0xe70>
 8002dbc:	ed9f 5b7a 	vldr	d5, [pc, #488]	@ 8002fa8 <main+0xe38>
 8002dc0:	ed9f 4b79 	vldr	d4, [pc, #484]	@ 8002fa8 <main+0xe38>
 8002dc4:	ed9f 3b86 	vldr	d3, [pc, #536]	@ 8002fe0 <main+0xe70>
 8002dc8:	f003 fa32 	bl	8006230 <PID_KFtocoordinate>
		  if(red_step4_check)
 8002dcc:	f897 32f2 	ldrb.w	r3, [r7, #754]	@ 0x2f2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8157 	beq.w	8003084 <main+0xf14>
		  {
			  mode = RED_STORAGE;
 8002dd6:	4b90      	ldr	r3, [pc, #576]	@ (8003018 <main+0xea8>)
 8002dd8:	220d      	movs	r2, #13
 8002dda:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002ddc:	e152      	b.n	8003084 <main+0xf14>
	  case RED_STORAGE:
		  setMotorSpeed(1, 0);
 8002dde:	ed9f 0b72 	vldr	d0, [pc, #456]	@ 8002fa8 <main+0xe38>
 8002de2:	2001      	movs	r0, #1
 8002de4:	f7fe f93a 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8002de8:	ed9f 0b6f 	vldr	d0, [pc, #444]	@ 8002fa8 <main+0xe38>
 8002dec:	2002      	movs	r0, #2
 8002dee:	f7fe f935 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 8002df2:	ed9f 0b6d 	vldr	d0, [pc, #436]	@ 8002fa8 <main+0xe38>
 8002df6:	2007      	movs	r0, #7
 8002df8:	f7fe f930 	bl	800105c <setMotorSpeed>
		  PID_KFtocoordinate(red_storage, 1.3, 0.0, 0.0, 1.4, 0.6, 5000);
 8002dfc:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002e00:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e04:	ed93 0b00 	vldr	d0, [r3]
 8002e08:	ed93 1b02 	vldr	d1, [r3, #8]
 8002e0c:	ed93 2b04 	vldr	d2, [r3, #16]
 8002e10:	a36f      	add	r3, pc, #444	@ (adr r3, 8002fd0 <main+0xe60>)
 8002e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e16:	e9cd 2300 	strd	r2, r3, [sp]
 8002e1a:	ed9f 7b73 	vldr	d7, [pc, #460]	@ 8002fe8 <main+0xe78>
 8002e1e:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8002ff0 <main+0xe80>
 8002e22:	ed9f 5b61 	vldr	d5, [pc, #388]	@ 8002fa8 <main+0xe38>
 8002e26:	ed9f 4b60 	vldr	d4, [pc, #384]	@ 8002fa8 <main+0xe38>
 8002e2a:	ed9f 3b73 	vldr	d3, [pc, #460]	@ 8002ff8 <main+0xe88>
 8002e2e:	f003 f9ff 	bl	8006230 <PID_KFtocoordinate>
		  if(red_storage_check)
 8002e32:	f897 32f1 	ldrb.w	r3, [r7, #753]	@ 0x2f1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8126 	beq.w	8003088 <main+0xf18>
		  {
			  mode = RED_FIND_BALL;
 8002e3c:	4b76      	ldr	r3, [pc, #472]	@ (8003018 <main+0xea8>)
 8002e3e:	220e      	movs	r2, #14
 8002e40:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002e42:	e121      	b.n	8003088 <main+0xf18>
	  case RED_FIND_BALL:
		  findAndTakeBall();
 8002e44:	f003 ff68 	bl	8006d18 <findAndTakeBall>
		  if(sensorMEGA[4] == 0)
 8002e48:	4b74      	ldr	r3, [pc, #464]	@ (800301c <main+0xeac>)
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f040 811d 	bne.w	800308c <main+0xf1c>
		  {
			  mode = RED_FACING_SILO;
 8002e52:	4b71      	ldr	r3, [pc, #452]	@ (8003018 <main+0xea8>)
 8002e54:	220f      	movs	r2, #15
 8002e56:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002e58:	e118      	b.n	800308c <main+0xf1c>
	  case RED_FACING_SILO:
		  setMotorSpeed(1, 0);
 8002e5a:	ed9f 0b53 	vldr	d0, [pc, #332]	@ 8002fa8 <main+0xe38>
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f7fe f8fc 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8002e64:	ed9f 0b50 	vldr	d0, [pc, #320]	@ 8002fa8 <main+0xe38>
 8002e68:	2002      	movs	r0, #2
 8002e6a:	f7fe f8f7 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 8002e6e:	ed9f 0b4e 	vldr	d0, [pc, #312]	@ 8002fa8 <main+0xe38>
 8002e72:	2007      	movs	r0, #7
 8002e74:	f7fe f8f2 	bl	800105c <setMotorSpeed>
		  servo_write(126);
 8002e78:	207e      	movs	r0, #126	@ 0x7e
 8002e7a:	f002 fe79 	bl	8005b70 <servo_write>
		  PID_KFtocoordinate(red_facing_silo_EKF, 1.5, 0.0, 0.0, 1.2, 0.7, 5000);
 8002e7e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002e82:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e86:	ed93 0b00 	vldr	d0, [r3]
 8002e8a:	ed93 1b02 	vldr	d1, [r3, #8]
 8002e8e:	ed93 2b04 	vldr	d2, [r3, #16]
 8002e92:	a34f      	add	r3, pc, #316	@ (adr r3, 8002fd0 <main+0xe60>)
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	e9cd 2300 	strd	r2, r3, [sp]
 8002e9c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8003000 <main+0xe90>
 8002ea0:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8002fb0 <main+0xe40>
 8002ea4:	ed9f 5b40 	vldr	d5, [pc, #256]	@ 8002fa8 <main+0xe38>
 8002ea8:	ed9f 4b3f 	vldr	d4, [pc, #252]	@ 8002fa8 <main+0xe38>
 8002eac:	ed9f 3b56 	vldr	d3, [pc, #344]	@ 8003008 <main+0xe98>
 8002eb0:	f003 f9be 	bl	8006230 <PID_KFtocoordinate>
		  if(red_facing_silo_check)
 8002eb4:	f897 32f0 	ldrb.w	r3, [r7, #752]	@ 0x2f0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80e9 	beq.w	8003090 <main+0xf20>
		  {
			  mode = RED_FIND_SILO;
 8002ebe:	4b56      	ldr	r3, [pc, #344]	@ (8003018 <main+0xea8>)
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002ec4:	e0e4      	b.n	8003090 <main+0xf20>
	  case RED_FIND_SILO:
		  placeBallInSilo(red_facing_silo, 1.2, 0.0, 0.0, 1.1);
 8002ec6:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002eca:	f5a3 76ec 	sub.w	r6, r3, #472	@ 0x1d8
 8002ece:	466d      	mov	r5, sp
 8002ed0:	f106 0410 	add.w	r4, r6, #16
 8002ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ee4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002ee8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002eec:	ed9f 3b2c 	vldr	d3, [pc, #176]	@ 8002fa0 <main+0xe30>
 8002ef0:	ed9f 2b2d 	vldr	d2, [pc, #180]	@ 8002fa8 <main+0xe38>
 8002ef4:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 8002fa8 <main+0xe38>
 8002ef8:	ed9f 0b2d 	vldr	d0, [pc, #180]	@ 8002fb0 <main+0xe40>
 8002efc:	f003 fdf0 	bl	8006ae0 <placeBallInSilo>
		  if((frontLeftDistance > 0 && frontLeftDistance <= 10) || (frontRightDistance > 0 && frontRightDistance <= 10))
 8002f00:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	dd03      	ble.n	8002f10 <main+0xda0>
 8002f08:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8002f0c:	2b0a      	cmp	r3, #10
 8002f0e:	dd09      	ble.n	8002f24 <main+0xdb4>
 8002f10:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f340 80bd 	ble.w	8003094 <main+0xf24>
 8002f1a:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8002f1e:	2b0a      	cmp	r3, #10
 8002f20:	f300 80b8 	bgt.w	8003094 <main+0xf24>
		  {
			  Inverse_Kinematics(0, 0, 0);
 8002f24:	ed9f 2b20 	vldr	d2, [pc, #128]	@ 8002fa8 <main+0xe38>
 8002f28:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 8002fa8 <main+0xe38>
 8002f2c:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8002fa8 <main+0xe38>
 8002f30:	f7fe f90a 	bl	8001148 <Inverse_Kinematics>
			  setMotorSpeed(1, -800);
 8002f34:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 8002fb8 <main+0xe48>
 8002f38:	2001      	movs	r0, #1
 8002f3a:	f7fe f88f 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(2, -1000);
 8002f3e:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 8002fc0 <main+0xe50>
 8002f42:	2002      	movs	r0, #2
 8002f44:	f7fe f88a 	bl	800105c <setMotorSpeed>
			  setMotorSpeed(7, -1200);
 8002f48:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8002fc8 <main+0xe58>
 8002f4c:	2007      	movs	r0, #7
 8002f4e:	f7fe f885 	bl	800105c <setMotorSpeed>
			  HAL_Delay(3000);
 8002f52:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002f56:	f004 fe43 	bl	8007be0 <HAL_Delay>
			  mode = RED_STORAGE;
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003018 <main+0xea8>)
 8002f5c:	220d      	movs	r2, #13
 8002f5e:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8002f60:	e098      	b.n	8003094 <main+0xf24>
	  case TES:
		  PID_KFtocoordinate(tes, 1.0, 0.0, 0.0, 1.0, 0.8, 3000);
 8002f62:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8002f66:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002f6a:	ed93 0b00 	vldr	d0, [r3]
 8002f6e:	ed93 1b02 	vldr	d1, [r3, #8]
 8002f72:	ed93 2b04 	vldr	d2, [r3, #16]
 8002f76:	a326      	add	r3, pc, #152	@ (adr r3, 8003010 <main+0xea0>)
 8002f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7c:	e9cd 2300 	strd	r2, r3, [sp]
 8002f80:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8002fd8 <main+0xe68>
 8002f84:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8002fe0 <main+0xe70>
 8002f88:	ed9f 5b07 	vldr	d5, [pc, #28]	@ 8002fa8 <main+0xe38>
 8002f8c:	ed9f 4b06 	vldr	d4, [pc, #24]	@ 8002fa8 <main+0xe38>
 8002f90:	ed9f 3b13 	vldr	d3, [pc, #76]	@ 8002fe0 <main+0xe70>
 8002f94:	f003 f94c 	bl	8006230 <PID_KFtocoordinate>
		  break;
 8002f98:	e07d      	b.n	8003096 <main+0xf26>
 8002f9a:	bf00      	nop
 8002f9c:	f3af 8000 	nop.w
 8002fa0:	9999999a 	.word	0x9999999a
 8002fa4:	3ff19999 	.word	0x3ff19999
	...
 8002fb0:	33333333 	.word	0x33333333
 8002fb4:	3ff33333 	.word	0x3ff33333
 8002fb8:	00000000 	.word	0x00000000
 8002fbc:	c0890000 	.word	0xc0890000
 8002fc0:	00000000 	.word	0x00000000
 8002fc4:	c08f4000 	.word	0xc08f4000
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	c092c000 	.word	0xc092c000
 8002fd0:	00000000 	.word	0x00000000
 8002fd4:	40b38800 	.word	0x40b38800
 8002fd8:	9999999a 	.word	0x9999999a
 8002fdc:	3fe99999 	.word	0x3fe99999
 8002fe0:	00000000 	.word	0x00000000
 8002fe4:	3ff00000 	.word	0x3ff00000
 8002fe8:	33333333 	.word	0x33333333
 8002fec:	3fe33333 	.word	0x3fe33333
 8002ff0:	66666666 	.word	0x66666666
 8002ff4:	3ff66666 	.word	0x3ff66666
 8002ff8:	cccccccd 	.word	0xcccccccd
 8002ffc:	3ff4cccc 	.word	0x3ff4cccc
 8003000:	66666666 	.word	0x66666666
 8003004:	3fe66666 	.word	0x3fe66666
 8003008:	00000000 	.word	0x00000000
 800300c:	3ff80000 	.word	0x3ff80000
 8003010:	00000000 	.word	0x00000000
 8003014:	40a77000 	.word	0x40a77000
 8003018:	20000600 	.word	0x20000600
 800301c:	200005ec 	.word	0x200005ec
	  default:
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003020:	2200      	movs	r2, #0
 8003022:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003026:	4820      	ldr	r0, [pc, #128]	@ (80030a8 <main+0xf38>)
 8003028:	f005 f956 	bl	80082d8 <HAL_GPIO_WritePin>
		  Inverse_Kinematics(0, 0, 0);
 800302c:	ed9f 2b1c 	vldr	d2, [pc, #112]	@ 80030a0 <main+0xf30>
 8003030:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 80030a0 <main+0xf30>
 8003034:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 80030a0 <main+0xf30>
 8003038:	f7fe f886 	bl	8001148 <Inverse_Kinematics>
		  setMotorSpeed(1, 0);
 800303c:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 80030a0 <main+0xf30>
 8003040:	2001      	movs	r0, #1
 8003042:	f7fe f80b 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(2, 0);
 8003046:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80030a0 <main+0xf30>
 800304a:	2002      	movs	r0, #2
 800304c:	f7fe f806 	bl	800105c <setMotorSpeed>
		  setMotorSpeed(7, 0);
 8003050:	ed9f 0b13 	vldr	d0, [pc, #76]	@ 80030a0 <main+0xf30>
 8003054:	2007      	movs	r0, #7
 8003056:	f7fe f801 	bl	800105c <setMotorSpeed>
		  break;
 800305a:	e01c      	b.n	8003096 <main+0xf26>
		  break;
 800305c:	bf00      	nop
 800305e:	e01a      	b.n	8003096 <main+0xf26>
		  break;
 8003060:	bf00      	nop
 8003062:	e018      	b.n	8003096 <main+0xf26>
		  break;
 8003064:	bf00      	nop
 8003066:	e016      	b.n	8003096 <main+0xf26>
		  break;
 8003068:	bf00      	nop
 800306a:	e014      	b.n	8003096 <main+0xf26>
		  break;
 800306c:	bf00      	nop
 800306e:	e012      	b.n	8003096 <main+0xf26>
		  break;
 8003070:	bf00      	nop
 8003072:	e010      	b.n	8003096 <main+0xf26>
		  break;
 8003074:	bf00      	nop
 8003076:	e00e      	b.n	8003096 <main+0xf26>
		  break;
 8003078:	bf00      	nop
 800307a:	e00c      	b.n	8003096 <main+0xf26>
		  break;
 800307c:	bf00      	nop
 800307e:	e00a      	b.n	8003096 <main+0xf26>
		  break;
 8003080:	bf00      	nop
 8003082:	e008      	b.n	8003096 <main+0xf26>
		  break;
 8003084:	bf00      	nop
 8003086:	e006      	b.n	8003096 <main+0xf26>
		  break;
 8003088:	bf00      	nop
 800308a:	e004      	b.n	8003096 <main+0xf26>
		  break;
 800308c:	bf00      	nop
 800308e:	e002      	b.n	8003096 <main+0xf26>
		  break;
 8003090:	bf00      	nop
 8003092:	e000      	b.n	8003096 <main+0xf26>
		  break;
 8003094:	bf00      	nop
	  }
	  lcd_clear();
 8003096:	f7fe fed3 	bl	8001e40 <lcd_clear>
  {
 800309a:	f7ff ba57 	b.w	800254c <main+0x3dc>
 800309e:	bf00      	nop
	...
 80030a8:	40020c00 	.word	0x40020c00

080030ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b094      	sub	sp, #80	@ 0x50
 80030b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030b2:	f107 0320 	add.w	r3, r7, #32
 80030b6:	2230      	movs	r2, #48	@ 0x30
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f00a f885 	bl	800d1ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030c0:	f107 030c 	add.w	r3, r7, #12
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030d0:	2300      	movs	r3, #0
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	4b28      	ldr	r3, [pc, #160]	@ (8003178 <SystemClock_Config+0xcc>)
 80030d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d8:	4a27      	ldr	r2, [pc, #156]	@ (8003178 <SystemClock_Config+0xcc>)
 80030da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030de:	6413      	str	r3, [r2, #64]	@ 0x40
 80030e0:	4b25      	ldr	r3, [pc, #148]	@ (8003178 <SystemClock_Config+0xcc>)
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030ec:	2300      	movs	r3, #0
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	4b22      	ldr	r3, [pc, #136]	@ (800317c <SystemClock_Config+0xd0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a21      	ldr	r2, [pc, #132]	@ (800317c <SystemClock_Config+0xd0>)
 80030f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b1f      	ldr	r3, [pc, #124]	@ (800317c <SystemClock_Config+0xd0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003108:	2301      	movs	r3, #1
 800310a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800310c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003112:	2302      	movs	r3, #2
 8003114:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003116:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800311a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800311c:	2308      	movs	r3, #8
 800311e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003120:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003124:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003126:	2302      	movs	r3, #2
 8003128:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800312a:	2307      	movs	r3, #7
 800312c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800312e:	f107 0320 	add.w	r3, r7, #32
 8003132:	4618      	mov	r0, r3
 8003134:	f005 fda0 	bl	8008c78 <HAL_RCC_OscConfig>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800313e:	f000 fdab 	bl	8003c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003142:	230f      	movs	r3, #15
 8003144:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003146:	2302      	movs	r3, #2
 8003148:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800314e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003152:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003158:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800315a:	f107 030c 	add.w	r3, r7, #12
 800315e:	2105      	movs	r1, #5
 8003160:	4618      	mov	r0, r3
 8003162:	f006 f801 	bl	8009168 <HAL_RCC_ClockConfig>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800316c:	f000 fd94 	bl	8003c98 <Error_Handler>
  }
}
 8003170:	bf00      	nop
 8003172:	3750      	adds	r7, #80	@ 0x50
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40023800 	.word	0x40023800
 800317c:	40007000 	.word	0x40007000

08003180 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003184:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <MX_I2C2_Init+0x50>)
 8003186:	4a13      	ldr	r2, [pc, #76]	@ (80031d4 <MX_I2C2_Init+0x54>)
 8003188:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800318a:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <MX_I2C2_Init+0x50>)
 800318c:	4a12      	ldr	r2, [pc, #72]	@ (80031d8 <MX_I2C2_Init+0x58>)
 800318e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003190:	4b0f      	ldr	r3, [pc, #60]	@ (80031d0 <MX_I2C2_Init+0x50>)
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003196:	4b0e      	ldr	r3, [pc, #56]	@ (80031d0 <MX_I2C2_Init+0x50>)
 8003198:	2200      	movs	r2, #0
 800319a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800319c:	4b0c      	ldr	r3, [pc, #48]	@ (80031d0 <MX_I2C2_Init+0x50>)
 800319e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031a4:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <MX_I2C2_Init+0x50>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80031aa:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <MX_I2C2_Init+0x50>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031b0:	4b07      	ldr	r3, [pc, #28]	@ (80031d0 <MX_I2C2_Init+0x50>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <MX_I2C2_Init+0x50>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80031bc:	4804      	ldr	r0, [pc, #16]	@ (80031d0 <MX_I2C2_Init+0x50>)
 80031be:	f005 f8bd 	bl	800833c <HAL_I2C_Init>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80031c8:	f000 fd66 	bl	8003c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80031cc:	bf00      	nop
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	200002cc 	.word	0x200002cc
 80031d4:	40005800 	.word	0x40005800
 80031d8:	000186a0 	.word	0x000186a0

080031dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b096      	sub	sp, #88	@ 0x58
 80031e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	60da      	str	r2, [r3, #12]
 8003208:	611a      	str	r2, [r3, #16]
 800320a:	615a      	str	r2, [r3, #20]
 800320c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800320e:	1d3b      	adds	r3, r7, #4
 8003210:	2220      	movs	r2, #32
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f009 ffd8 	bl	800d1ca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800321a:	4b50      	ldr	r3, [pc, #320]	@ (800335c <MX_TIM1_Init+0x180>)
 800321c:	4a50      	ldr	r2, [pc, #320]	@ (8003360 <MX_TIM1_Init+0x184>)
 800321e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8003220:	4b4e      	ldr	r3, [pc, #312]	@ (800335c <MX_TIM1_Init+0x180>)
 8003222:	2214      	movs	r2, #20
 8003224:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003226:	4b4d      	ldr	r3, [pc, #308]	@ (800335c <MX_TIM1_Init+0x180>)
 8003228:	2200      	movs	r2, #0
 800322a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000-1;
 800322c:	4b4b      	ldr	r3, [pc, #300]	@ (800335c <MX_TIM1_Init+0x180>)
 800322e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003232:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003234:	4b49      	ldr	r3, [pc, #292]	@ (800335c <MX_TIM1_Init+0x180>)
 8003236:	2200      	movs	r2, #0
 8003238:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800323a:	4b48      	ldr	r3, [pc, #288]	@ (800335c <MX_TIM1_Init+0x180>)
 800323c:	2200      	movs	r2, #0
 800323e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003240:	4b46      	ldr	r3, [pc, #280]	@ (800335c <MX_TIM1_Init+0x180>)
 8003242:	2200      	movs	r2, #0
 8003244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003246:	4845      	ldr	r0, [pc, #276]	@ (800335c <MX_TIM1_Init+0x180>)
 8003248:	f006 f9ae 	bl	80095a8 <HAL_TIM_Base_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003252:	f000 fd21 	bl	8003c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800325a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800325c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003260:	4619      	mov	r1, r3
 8003262:	483e      	ldr	r0, [pc, #248]	@ (800335c <MX_TIM1_Init+0x180>)
 8003264:	f006 fd10 	bl	8009c88 <HAL_TIM_ConfigClockSource>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800326e:	f000 fd13 	bl	8003c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003272:	483a      	ldr	r0, [pc, #232]	@ (800335c <MX_TIM1_Init+0x180>)
 8003274:	f006 f9e7 	bl	8009646 <HAL_TIM_PWM_Init>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800327e:	f000 fd0b 	bl	8003c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003286:	2300      	movs	r3, #0
 8003288:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800328a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800328e:	4619      	mov	r1, r3
 8003290:	4832      	ldr	r0, [pc, #200]	@ (800335c <MX_TIM1_Init+0x180>)
 8003292:	f007 f90f 	bl	800a4b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800329c:	f000 fcfc 	bl	8003c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032a0:	2360      	movs	r3, #96	@ 0x60
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80032ac:	2300      	movs	r3, #0
 80032ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80032b4:	2300      	movs	r3, #0
 80032b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032b8:	2300      	movs	r3, #0
 80032ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032c0:	2200      	movs	r2, #0
 80032c2:	4619      	mov	r1, r3
 80032c4:	4825      	ldr	r0, [pc, #148]	@ (800335c <MX_TIM1_Init+0x180>)
 80032c6:	f006 fc1d 	bl	8009b04 <HAL_TIM_PWM_ConfigChannel>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80032d0:	f000 fce2 	bl	8003c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032d8:	2204      	movs	r2, #4
 80032da:	4619      	mov	r1, r3
 80032dc:	481f      	ldr	r0, [pc, #124]	@ (800335c <MX_TIM1_Init+0x180>)
 80032de:	f006 fc11 	bl	8009b04 <HAL_TIM_PWM_ConfigChannel>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80032e8:	f000 fcd6 	bl	8003c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032f0:	2208      	movs	r2, #8
 80032f2:	4619      	mov	r1, r3
 80032f4:	4819      	ldr	r0, [pc, #100]	@ (800335c <MX_TIM1_Init+0x180>)
 80032f6:	f006 fc05 	bl	8009b04 <HAL_TIM_PWM_ConfigChannel>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003300:	f000 fcca 	bl	8003c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003308:	220c      	movs	r2, #12
 800330a:	4619      	mov	r1, r3
 800330c:	4813      	ldr	r0, [pc, #76]	@ (800335c <MX_TIM1_Init+0x180>)
 800330e:	f006 fbf9 	bl	8009b04 <HAL_TIM_PWM_ConfigChannel>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003318:	f000 fcbe 	bl	8003c98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800331c:	2300      	movs	r3, #0
 800331e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003320:	2300      	movs	r3, #0
 8003322:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003330:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003334:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003336:	2300      	movs	r3, #0
 8003338:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800333a:	1d3b      	adds	r3, r7, #4
 800333c:	4619      	mov	r1, r3
 800333e:	4807      	ldr	r0, [pc, #28]	@ (800335c <MX_TIM1_Init+0x180>)
 8003340:	f007 f934 	bl	800a5ac <HAL_TIMEx_ConfigBreakDeadTime>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800334a:	f000 fca5 	bl	8003c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800334e:	4803      	ldr	r0, [pc, #12]	@ (800335c <MX_TIM1_Init+0x180>)
 8003350:	f004 f8d2 	bl	80074f8 <HAL_TIM_MspPostInit>

}
 8003354:	bf00      	nop
 8003356:	3758      	adds	r7, #88	@ 0x58
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000320 	.word	0x20000320
 8003360:	40010000 	.word	0x40010000

08003364 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08e      	sub	sp, #56	@ 0x38
 8003368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800336a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003378:	f107 0320 	add.w	r3, r7, #32
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	611a      	str	r2, [r3, #16]
 8003390:	615a      	str	r2, [r3, #20]
 8003392:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003394:	4b33      	ldr	r3, [pc, #204]	@ (8003464 <MX_TIM2_Init+0x100>)
 8003396:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800339a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 800339c:	4b31      	ldr	r3, [pc, #196]	@ (8003464 <MX_TIM2_Init+0x100>)
 800339e:	f240 628f 	movw	r2, #1679	@ 0x68f
 80033a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003464 <MX_TIM2_Init+0x100>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80033aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003464 <MX_TIM2_Init+0x100>)
 80033ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80033b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003464 <MX_TIM2_Init+0x100>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003464 <MX_TIM2_Init+0x100>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80033be:	4829      	ldr	r0, [pc, #164]	@ (8003464 <MX_TIM2_Init+0x100>)
 80033c0:	f006 f8f2 	bl	80095a8 <HAL_TIM_Base_Init>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80033ca:	f000 fc65 	bl	8003c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80033d8:	4619      	mov	r1, r3
 80033da:	4822      	ldr	r0, [pc, #136]	@ (8003464 <MX_TIM2_Init+0x100>)
 80033dc:	f006 fc54 	bl	8009c88 <HAL_TIM_ConfigClockSource>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80033e6:	f000 fc57 	bl	8003c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80033ea:	481e      	ldr	r0, [pc, #120]	@ (8003464 <MX_TIM2_Init+0x100>)
 80033ec:	f006 f92b 	bl	8009646 <HAL_TIM_PWM_Init>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80033f6:	f000 fc4f 	bl	8003c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033fe:	2300      	movs	r3, #0
 8003400:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003402:	f107 0320 	add.w	r3, r7, #32
 8003406:	4619      	mov	r1, r3
 8003408:	4816      	ldr	r0, [pc, #88]	@ (8003464 <MX_TIM2_Init+0x100>)
 800340a:	f007 f853 	bl	800a4b4 <HAL_TIMEx_MasterConfigSynchronization>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003414:	f000 fc40 	bl	8003c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003418:	2360      	movs	r3, #96	@ 0x60
 800341a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003428:	1d3b      	adds	r3, r7, #4
 800342a:	2208      	movs	r2, #8
 800342c:	4619      	mov	r1, r3
 800342e:	480d      	ldr	r0, [pc, #52]	@ (8003464 <MX_TIM2_Init+0x100>)
 8003430:	f006 fb68 	bl	8009b04 <HAL_TIM_PWM_ConfigChannel>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800343a:	f000 fc2d 	bl	8003c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800343e:	1d3b      	adds	r3, r7, #4
 8003440:	220c      	movs	r2, #12
 8003442:	4619      	mov	r1, r3
 8003444:	4807      	ldr	r0, [pc, #28]	@ (8003464 <MX_TIM2_Init+0x100>)
 8003446:	f006 fb5d 	bl	8009b04 <HAL_TIM_PWM_ConfigChannel>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8003450:	f000 fc22 	bl	8003c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003454:	4803      	ldr	r0, [pc, #12]	@ (8003464 <MX_TIM2_Init+0x100>)
 8003456:	f004 f84f 	bl	80074f8 <HAL_TIM_MspPostInit>

}
 800345a:	bf00      	nop
 800345c:	3738      	adds	r7, #56	@ 0x38
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000368 	.word	0x20000368

08003468 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b096      	sub	sp, #88	@ 0x58
 800346c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800346e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	609a      	str	r2, [r3, #8]
 800347a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800347c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	609a      	str	r2, [r3, #8]
 8003492:	60da      	str	r2, [r3, #12]
 8003494:	611a      	str	r2, [r3, #16]
 8003496:	615a      	str	r2, [r3, #20]
 8003498:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800349a:	1d3b      	adds	r3, r7, #4
 800349c:	2220      	movs	r2, #32
 800349e:	2100      	movs	r1, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	f009 fe92 	bl	800d1ca <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80034a6:	4b50      	ldr	r3, [pc, #320]	@ (80035e8 <MX_TIM8_Init+0x180>)
 80034a8:	4a50      	ldr	r2, [pc, #320]	@ (80035ec <MX_TIM8_Init+0x184>)
 80034aa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 20;
 80034ac:	4b4e      	ldr	r3, [pc, #312]	@ (80035e8 <MX_TIM8_Init+0x180>)
 80034ae:	2214      	movs	r2, #20
 80034b0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034b2:	4b4d      	ldr	r3, [pc, #308]	@ (80035e8 <MX_TIM8_Init+0x180>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000-1;
 80034b8:	4b4b      	ldr	r3, [pc, #300]	@ (80035e8 <MX_TIM8_Init+0x180>)
 80034ba:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80034be:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034c0:	4b49      	ldr	r3, [pc, #292]	@ (80035e8 <MX_TIM8_Init+0x180>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80034c6:	4b48      	ldr	r3, [pc, #288]	@ (80035e8 <MX_TIM8_Init+0x180>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034cc:	4b46      	ldr	r3, [pc, #280]	@ (80035e8 <MX_TIM8_Init+0x180>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80034d2:	4845      	ldr	r0, [pc, #276]	@ (80035e8 <MX_TIM8_Init+0x180>)
 80034d4:	f006 f868 	bl	80095a8 <HAL_TIM_Base_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80034de:	f000 fbdb 	bl	8003c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80034e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80034ec:	4619      	mov	r1, r3
 80034ee:	483e      	ldr	r0, [pc, #248]	@ (80035e8 <MX_TIM8_Init+0x180>)
 80034f0:	f006 fbca 	bl	8009c88 <HAL_TIM_ConfigClockSource>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80034fa:	f000 fbcd 	bl	8003c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80034fe:	483a      	ldr	r0, [pc, #232]	@ (80035e8 <MX_TIM8_Init+0x180>)
 8003500:	f006 f8a1 	bl	8009646 <HAL_TIM_PWM_Init>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800350a:	f000 fbc5 	bl	8003c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003512:	2300      	movs	r3, #0
 8003514:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003516:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800351a:	4619      	mov	r1, r3
 800351c:	4832      	ldr	r0, [pc, #200]	@ (80035e8 <MX_TIM8_Init+0x180>)
 800351e:	f006 ffc9 	bl	800a4b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003528:	f000 fbb6 	bl	8003c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800352c:	2360      	movs	r3, #96	@ 0x60
 800352e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003534:	2300      	movs	r3, #0
 8003536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003538:	2300      	movs	r3, #0
 800353a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800353c:	2300      	movs	r3, #0
 800353e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003540:	2300      	movs	r3, #0
 8003542:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003544:	2300      	movs	r3, #0
 8003546:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800354c:	2200      	movs	r2, #0
 800354e:	4619      	mov	r1, r3
 8003550:	4825      	ldr	r0, [pc, #148]	@ (80035e8 <MX_TIM8_Init+0x180>)
 8003552:	f006 fad7 	bl	8009b04 <HAL_TIM_PWM_ConfigChannel>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800355c:	f000 fb9c 	bl	8003c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003564:	2204      	movs	r2, #4
 8003566:	4619      	mov	r1, r3
 8003568:	481f      	ldr	r0, [pc, #124]	@ (80035e8 <MX_TIM8_Init+0x180>)
 800356a:	f006 facb 	bl	8009b04 <HAL_TIM_PWM_ConfigChannel>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8003574:	f000 fb90 	bl	8003c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800357c:	2208      	movs	r2, #8
 800357e:	4619      	mov	r1, r3
 8003580:	4819      	ldr	r0, [pc, #100]	@ (80035e8 <MX_TIM8_Init+0x180>)
 8003582:	f006 fabf 	bl	8009b04 <HAL_TIM_PWM_ConfigChannel>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800358c:	f000 fb84 	bl	8003c98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003594:	220c      	movs	r2, #12
 8003596:	4619      	mov	r1, r3
 8003598:	4813      	ldr	r0, [pc, #76]	@ (80035e8 <MX_TIM8_Init+0x180>)
 800359a:	f006 fab3 	bl	8009b04 <HAL_TIM_PWM_ConfigChannel>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80035a4:	f000 fb78 	bl	8003c98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80035c6:	1d3b      	adds	r3, r7, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4807      	ldr	r0, [pc, #28]	@ (80035e8 <MX_TIM8_Init+0x180>)
 80035cc:	f006 ffee 	bl	800a5ac <HAL_TIMEx_ConfigBreakDeadTime>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80035d6:	f000 fb5f 	bl	8003c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80035da:	4803      	ldr	r0, [pc, #12]	@ (80035e8 <MX_TIM8_Init+0x180>)
 80035dc:	f003 ff8c 	bl	80074f8 <HAL_TIM_MspPostInit>

}
 80035e0:	bf00      	nop
 80035e2:	3758      	adds	r7, #88	@ 0x58
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200003b0 	.word	0x200003b0
 80035ec:	40010400 	.word	0x40010400

080035f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80035f4:	4b11      	ldr	r3, [pc, #68]	@ (800363c <MX_USART1_UART_Init+0x4c>)
 80035f6:	4a12      	ldr	r2, [pc, #72]	@ (8003640 <MX_USART1_UART_Init+0x50>)
 80035f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80035fa:	4b10      	ldr	r3, [pc, #64]	@ (800363c <MX_USART1_UART_Init+0x4c>)
 80035fc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003602:	4b0e      	ldr	r3, [pc, #56]	@ (800363c <MX_USART1_UART_Init+0x4c>)
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003608:	4b0c      	ldr	r3, [pc, #48]	@ (800363c <MX_USART1_UART_Init+0x4c>)
 800360a:	2200      	movs	r2, #0
 800360c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800360e:	4b0b      	ldr	r3, [pc, #44]	@ (800363c <MX_USART1_UART_Init+0x4c>)
 8003610:	2200      	movs	r2, #0
 8003612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003614:	4b09      	ldr	r3, [pc, #36]	@ (800363c <MX_USART1_UART_Init+0x4c>)
 8003616:	220c      	movs	r2, #12
 8003618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800361a:	4b08      	ldr	r3, [pc, #32]	@ (800363c <MX_USART1_UART_Init+0x4c>)
 800361c:	2200      	movs	r2, #0
 800361e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003620:	4b06      	ldr	r3, [pc, #24]	@ (800363c <MX_USART1_UART_Init+0x4c>)
 8003622:	2200      	movs	r2, #0
 8003624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003626:	4805      	ldr	r0, [pc, #20]	@ (800363c <MX_USART1_UART_Init+0x4c>)
 8003628:	f007 f826 	bl	800a678 <HAL_UART_Init>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003632:	f000 fb31 	bl	8003c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	200003f8 	.word	0x200003f8
 8003640:	40011000 	.word	0x40011000

08003644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003648:	4b11      	ldr	r3, [pc, #68]	@ (8003690 <MX_USART2_UART_Init+0x4c>)
 800364a:	4a12      	ldr	r2, [pc, #72]	@ (8003694 <MX_USART2_UART_Init+0x50>)
 800364c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800364e:	4b10      	ldr	r3, [pc, #64]	@ (8003690 <MX_USART2_UART_Init+0x4c>)
 8003650:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003656:	4b0e      	ldr	r3, [pc, #56]	@ (8003690 <MX_USART2_UART_Init+0x4c>)
 8003658:	2200      	movs	r2, #0
 800365a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800365c:	4b0c      	ldr	r3, [pc, #48]	@ (8003690 <MX_USART2_UART_Init+0x4c>)
 800365e:	2200      	movs	r2, #0
 8003660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003662:	4b0b      	ldr	r3, [pc, #44]	@ (8003690 <MX_USART2_UART_Init+0x4c>)
 8003664:	2200      	movs	r2, #0
 8003666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003668:	4b09      	ldr	r3, [pc, #36]	@ (8003690 <MX_USART2_UART_Init+0x4c>)
 800366a:	220c      	movs	r2, #12
 800366c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800366e:	4b08      	ldr	r3, [pc, #32]	@ (8003690 <MX_USART2_UART_Init+0x4c>)
 8003670:	2200      	movs	r2, #0
 8003672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003674:	4b06      	ldr	r3, [pc, #24]	@ (8003690 <MX_USART2_UART_Init+0x4c>)
 8003676:	2200      	movs	r2, #0
 8003678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800367a:	4805      	ldr	r0, [pc, #20]	@ (8003690 <MX_USART2_UART_Init+0x4c>)
 800367c:	f006 fffc 	bl	800a678 <HAL_UART_Init>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003686:	f000 fb07 	bl	8003c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000440 	.word	0x20000440
 8003694:	40004400 	.word	0x40004400

08003698 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800369c:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <MX_USART3_UART_Init+0x4c>)
 800369e:	4a12      	ldr	r2, [pc, #72]	@ (80036e8 <MX_USART3_UART_Init+0x50>)
 80036a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80036a2:	4b10      	ldr	r3, [pc, #64]	@ (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036a4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80036a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80036aa:	4b0e      	ldr	r3, [pc, #56]	@ (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80036b0:	4b0c      	ldr	r3, [pc, #48]	@ (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80036b6:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80036bc:	4b09      	ldr	r3, [pc, #36]	@ (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036be:	220c      	movs	r2, #12
 80036c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036c2:	4b08      	ldr	r3, [pc, #32]	@ (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80036c8:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80036ce:	4805      	ldr	r0, [pc, #20]	@ (80036e4 <MX_USART3_UART_Init+0x4c>)
 80036d0:	f006 ffd2 	bl	800a678 <HAL_UART_Init>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80036da:	f000 fadd 	bl	8003c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000488 	.word	0x20000488
 80036e8:	40004800 	.word	0x40004800

080036ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08c      	sub	sp, #48	@ 0x30
 80036f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f2:	f107 031c 	add.w	r3, r7, #28
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	605a      	str	r2, [r3, #4]
 80036fc:	609a      	str	r2, [r3, #8]
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	4bbb      	ldr	r3, [pc, #748]	@ (80039f4 <MX_GPIO_Init+0x308>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	4aba      	ldr	r2, [pc, #744]	@ (80039f4 <MX_GPIO_Init+0x308>)
 800370c:	f043 0310 	orr.w	r3, r3, #16
 8003710:	6313      	str	r3, [r2, #48]	@ 0x30
 8003712:	4bb8      	ldr	r3, [pc, #736]	@ (80039f4 <MX_GPIO_Init+0x308>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	61bb      	str	r3, [r7, #24]
 800371c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	4bb4      	ldr	r3, [pc, #720]	@ (80039f4 <MX_GPIO_Init+0x308>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	4ab3      	ldr	r2, [pc, #716]	@ (80039f4 <MX_GPIO_Init+0x308>)
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	6313      	str	r3, [r2, #48]	@ 0x30
 800372e:	4bb1      	ldr	r3, [pc, #708]	@ (80039f4 <MX_GPIO_Init+0x308>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	4bad      	ldr	r3, [pc, #692]	@ (80039f4 <MX_GPIO_Init+0x308>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	4aac      	ldr	r2, [pc, #688]	@ (80039f4 <MX_GPIO_Init+0x308>)
 8003744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003748:	6313      	str	r3, [r2, #48]	@ 0x30
 800374a:	4baa      	ldr	r3, [pc, #680]	@ (80039f4 <MX_GPIO_Init+0x308>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	4ba6      	ldr	r3, [pc, #664]	@ (80039f4 <MX_GPIO_Init+0x308>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375e:	4aa5      	ldr	r2, [pc, #660]	@ (80039f4 <MX_GPIO_Init+0x308>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	6313      	str	r3, [r2, #48]	@ 0x30
 8003766:	4ba3      	ldr	r3, [pc, #652]	@ (80039f4 <MX_GPIO_Init+0x308>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	4b9f      	ldr	r3, [pc, #636]	@ (80039f4 <MX_GPIO_Init+0x308>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	4a9e      	ldr	r2, [pc, #632]	@ (80039f4 <MX_GPIO_Init+0x308>)
 800377c:	f043 0302 	orr.w	r3, r3, #2
 8003780:	6313      	str	r3, [r2, #48]	@ 0x30
 8003782:	4b9c      	ldr	r3, [pc, #624]	@ (80039f4 <MX_GPIO_Init+0x308>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	4b98      	ldr	r3, [pc, #608]	@ (80039f4 <MX_GPIO_Init+0x308>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	4a97      	ldr	r2, [pc, #604]	@ (80039f4 <MX_GPIO_Init+0x308>)
 8003798:	f043 0308 	orr.w	r3, r3, #8
 800379c:	6313      	str	r3, [r2, #48]	@ 0x30
 800379e:	4b95      	ldr	r3, [pc, #596]	@ (80039f4 <MX_GPIO_Init+0x308>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	607b      	str	r3, [r7, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80037aa:	2200      	movs	r2, #0
 80037ac:	217f      	movs	r1, #127	@ 0x7f
 80037ae:	4892      	ldr	r0, [pc, #584]	@ (80039f8 <MX_GPIO_Init+0x30c>)
 80037b0:	f004 fd92 	bl	80082d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 80037b4:	2200      	movs	r2, #0
 80037b6:	f24f 0130 	movw	r1, #61488	@ 0xf030
 80037ba:	4890      	ldr	r0, [pc, #576]	@ (80039fc <MX_GPIO_Init+0x310>)
 80037bc:	f004 fd8c 	bl	80082d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80037c0:	2200      	movs	r2, #0
 80037c2:	2103      	movs	r1, #3
 80037c4:	488e      	ldr	r0, [pc, #568]	@ (8003a00 <MX_GPIO_Init+0x314>)
 80037c6:	f004 fd87 	bl	80082d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80037ca:	2200      	movs	r2, #0
 80037cc:	f244 011f 	movw	r1, #16415	@ 0x401f
 80037d0:	488c      	ldr	r0, [pc, #560]	@ (8003a04 <MX_GPIO_Init+0x318>)
 80037d2:	f004 fd81 	bl	80082d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80037d6:	237f      	movs	r3, #127	@ 0x7f
 80037d8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80037da:	2311      	movs	r3, #17
 80037dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e2:	2303      	movs	r3, #3
 80037e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037e6:	f107 031c 	add.w	r3, r7, #28
 80037ea:	4619      	mov	r1, r3
 80037ec:	4882      	ldr	r0, [pc, #520]	@ (80039f8 <MX_GPIO_Init+0x30c>)
 80037ee:	f004 fbbf 	bl	8007f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80037f2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80037f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80037f8:	2311      	movs	r3, #17
 80037fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003800:	2300      	movs	r3, #0
 8003802:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003804:	f107 031c 	add.w	r3, r7, #28
 8003808:	4619      	mov	r1, r3
 800380a:	487c      	ldr	r0, [pc, #496]	@ (80039fc <MX_GPIO_Init+0x310>)
 800380c:	f004 fbb0 	bl	8007f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : EA_2_Pin EinA_1_Pin */
  GPIO_InitStruct.Pin = EA_2_Pin|EinA_1_Pin;
 8003810:	2309      	movs	r3, #9
 8003812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003814:	2300      	movs	r3, #0
 8003816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003818:	2301      	movs	r3, #1
 800381a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800381c:	f107 031c 	add.w	r3, r7, #28
 8003820:	4619      	mov	r1, r3
 8003822:	4876      	ldr	r0, [pc, #472]	@ (80039fc <MX_GPIO_Init+0x310>)
 8003824:	f004 fba4 	bl	8007f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_2_Pin EinB_1_Pin */
  GPIO_InitStruct.Pin = EB_2_Pin|EinB_1_Pin;
 8003828:	2306      	movs	r3, #6
 800382a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800382c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003832:	2301      	movs	r3, #1
 8003834:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003836:	f107 031c 	add.w	r3, r7, #28
 800383a:	4619      	mov	r1, r3
 800383c:	486f      	ldr	r0, [pc, #444]	@ (80039fc <MX_GPIO_Init+0x310>)
 800383e:	f004 fb97 	bl	8007f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinB_2_Pin EinB_4_Pin */
  GPIO_InitStruct.Pin = EinB_2_Pin|EinB_4_Pin;
 8003842:	f244 0301 	movw	r3, #16385	@ 0x4001
 8003846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003848:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800384c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800384e:	2301      	movs	r3, #1
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003852:	f107 031c 	add.w	r3, r7, #28
 8003856:	4619      	mov	r1, r3
 8003858:	486b      	ldr	r0, [pc, #428]	@ (8003a08 <MX_GPIO_Init+0x31c>)
 800385a:	f004 fb89 	bl	8007f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : EinA_2_Pin EinA_4_Pin EA_1_Pin */
  GPIO_InitStruct.Pin = EinA_2_Pin|EinA_4_Pin|EA_1_Pin;
 800385e:	f248 4302 	movw	r3, #33794	@ 0x8402
 8003862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003864:	2300      	movs	r3, #0
 8003866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003868:	2301      	movs	r3, #1
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800386c:	f107 031c 	add.w	r3, r7, #28
 8003870:	4619      	mov	r1, r3
 8003872:	4865      	ldr	r0, [pc, #404]	@ (8003a08 <MX_GPIO_Init+0x31c>)
 8003874:	f004 fb7c 	bl	8007f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12;
 8003878:	f241 0330 	movw	r3, #4144	@ 0x1030
 800387c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800387e:	2311      	movs	r3, #17
 8003880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003886:	2303      	movs	r3, #3
 8003888:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800388a:	f107 031c 	add.w	r3, r7, #28
 800388e:	4619      	mov	r1, r3
 8003890:	485a      	ldr	r0, [pc, #360]	@ (80039fc <MX_GPIO_Init+0x310>)
 8003892:	f004 fb6d 	bl	8007f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003896:	2303      	movs	r3, #3
 8003898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800389a:	2311      	movs	r3, #17
 800389c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a2:	2303      	movs	r3, #3
 80038a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a6:	f107 031c 	add.w	r3, r7, #28
 80038aa:	4619      	mov	r1, r3
 80038ac:	4854      	ldr	r0, [pc, #336]	@ (8003a00 <MX_GPIO_Init+0x314>)
 80038ae:	f004 fb5f 	bl	8007f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin;
 80038b2:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 80038b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80038b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80038bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038be:	2301      	movs	r3, #1
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038c2:	f107 031c 	add.w	r3, r7, #28
 80038c6:	4619      	mov	r1, r3
 80038c8:	484b      	ldr	r0, [pc, #300]	@ (80039f8 <MX_GPIO_Init+0x30c>)
 80038ca:	f004 fb51 	bl	8007f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinA_3_Pin */
  GPIO_InitStruct.Pin = EinA_3_Pin;
 80038ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038d4:	2300      	movs	r3, #0
 80038d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038d8:	2301      	movs	r3, #1
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinA_3_GPIO_Port, &GPIO_InitStruct);
 80038dc:	f107 031c 	add.w	r3, r7, #28
 80038e0:	4619      	mov	r1, r3
 80038e2:	4848      	ldr	r0, [pc, #288]	@ (8003a04 <MX_GPIO_Init+0x318>)
 80038e4:	f004 fb44 	bl	8007f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : EinB_3_Pin */
  GPIO_InitStruct.Pin = EinB_3_Pin;
 80038e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80038f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038f4:	2301      	movs	r3, #1
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EinB_3_GPIO_Port, &GPIO_InitStruct);
 80038f8:	f107 031c 	add.w	r3, r7, #28
 80038fc:	4619      	mov	r1, r3
 80038fe:	4841      	ldr	r0, [pc, #260]	@ (8003a04 <MX_GPIO_Init+0x318>)
 8003900:	f004 fb36 	bl	8007f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003904:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800390a:	2301      	movs	r3, #1
 800390c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800390e:	2302      	movs	r3, #2
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003912:	2300      	movs	r3, #0
 8003914:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003916:	f107 031c 	add.w	r3, r7, #28
 800391a:	4619      	mov	r1, r3
 800391c:	4839      	ldr	r0, [pc, #228]	@ (8003a04 <MX_GPIO_Init+0x318>)
 800391e:	f004 fb27 	bl	8007f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_4_Pin */
  GPIO_InitStruct.Pin = Button_4_Pin;
 8003922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003928:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800392c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800392e:	2301      	movs	r3, #1
 8003930:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_4_GPIO_Port, &GPIO_InitStruct);
 8003932:	f107 031c 	add.w	r3, r7, #28
 8003936:	4619      	mov	r1, r3
 8003938:	4832      	ldr	r0, [pc, #200]	@ (8003a04 <MX_GPIO_Init+0x318>)
 800393a:	f004 fb19 	bl	8007f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800393e:	231f      	movs	r3, #31
 8003940:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003942:	2311      	movs	r3, #17
 8003944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394a:	2303      	movs	r3, #3
 800394c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800394e:	f107 031c 	add.w	r3, r7, #28
 8003952:	4619      	mov	r1, r3
 8003954:	482b      	ldr	r0, [pc, #172]	@ (8003a04 <MX_GPIO_Init+0x318>)
 8003956:	f004 fb0b 	bl	8007f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : EB_1_Pin EB_3_Pin */
  GPIO_InitStruct.Pin = EB_1_Pin|EB_3_Pin;
 800395a:	2328      	movs	r3, #40	@ 0x28
 800395c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800395e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003964:	2301      	movs	r3, #1
 8003966:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003968:	f107 031c 	add.w	r3, r7, #28
 800396c:	4619      	mov	r1, r3
 800396e:	4824      	ldr	r0, [pc, #144]	@ (8003a00 <MX_GPIO_Init+0x314>)
 8003970:	f004 fafe 	bl	8007f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : EA_3_Pin */
  GPIO_InitStruct.Pin = EA_3_Pin;
 8003974:	2310      	movs	r3, #16
 8003976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003978:	2300      	movs	r3, #0
 800397a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800397c:	2301      	movs	r3, #1
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EA_3_GPIO_Port, &GPIO_InitStruct);
 8003980:	f107 031c 	add.w	r3, r7, #28
 8003984:	4619      	mov	r1, r3
 8003986:	481e      	ldr	r0, [pc, #120]	@ (8003a00 <MX_GPIO_Init+0x314>)
 8003988:	f004 faf2 	bl	8007f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800398c:	2200      	movs	r2, #0
 800398e:	2100      	movs	r1, #0
 8003990:	2006      	movs	r0, #6
 8003992:	f004 fa24 	bl	8007dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003996:	2006      	movs	r0, #6
 8003998:	f004 fa3d 	bl	8007e16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800399c:	2200      	movs	r2, #0
 800399e:	2100      	movs	r1, #0
 80039a0:	2007      	movs	r0, #7
 80039a2:	f004 fa1c 	bl	8007dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80039a6:	2007      	movs	r0, #7
 80039a8:	f004 fa35 	bl	8007e16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80039ac:	2200      	movs	r2, #0
 80039ae:	2100      	movs	r1, #0
 80039b0:	2008      	movs	r0, #8
 80039b2:	f004 fa14 	bl	8007dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80039b6:	2008      	movs	r0, #8
 80039b8:	f004 fa2d 	bl	8007e16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80039bc:	2200      	movs	r2, #0
 80039be:	2100      	movs	r1, #0
 80039c0:	2009      	movs	r0, #9
 80039c2:	f004 fa0c 	bl	8007dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80039c6:	2009      	movs	r0, #9
 80039c8:	f004 fa25 	bl	8007e16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80039cc:	2200      	movs	r2, #0
 80039ce:	2100      	movs	r1, #0
 80039d0:	2017      	movs	r0, #23
 80039d2:	f004 fa04 	bl	8007dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80039d6:	2017      	movs	r0, #23
 80039d8:	f004 fa1d 	bl	8007e16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80039dc:	2200      	movs	r2, #0
 80039de:	2100      	movs	r1, #0
 80039e0:	2028      	movs	r0, #40	@ 0x28
 80039e2:	f004 f9fc 	bl	8007dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80039e6:	2028      	movs	r0, #40	@ 0x28
 80039e8:	f004 fa15 	bl	8007e16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039ec:	bf00      	nop
 80039ee:	3730      	adds	r7, #48	@ 0x30
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40020800 	.word	0x40020800
 8003a00:	40020400 	.word	0x40020400
 8003a04:	40020c00 	.word	0x40020c00
 8003a08:	40020000 	.word	0x40020000

08003a0c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a0c:	b590      	push	{r4, r7, lr}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a8b      	ldr	r2, [pc, #556]	@ (8003c48 <HAL_UART_RxCpltCallback+0x23c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d15a      	bne.n	8003ad4 <HAL_UART_RxCpltCallback+0xc8>
	{
		if(receive[rxIndex] == '\r' || receive[rxIndex] == '\n')
 8003a1e:	4b8b      	ldr	r3, [pc, #556]	@ (8003c4c <HAL_UART_RxCpltCallback+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a8b      	ldr	r2, [pc, #556]	@ (8003c50 <HAL_UART_RxCpltCallback+0x244>)
 8003a24:	5cd3      	ldrb	r3, [r2, r3]
 8003a26:	2b0d      	cmp	r3, #13
 8003a28:	d005      	beq.n	8003a36 <HAL_UART_RxCpltCallback+0x2a>
 8003a2a:	4b88      	ldr	r3, [pc, #544]	@ (8003c4c <HAL_UART_RxCpltCallback+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a88      	ldr	r2, [pc, #544]	@ (8003c50 <HAL_UART_RxCpltCallback+0x244>)
 8003a30:	5cd3      	ldrb	r3, [r2, r3]
 8003a32:	2b0a      	cmp	r3, #10
 8003a34:	d139      	bne.n	8003aaa <HAL_UART_RxCpltCallback+0x9e>
		{
			receive[rxIndex] = '\0';
 8003a36:	4b85      	ldr	r3, [pc, #532]	@ (8003c4c <HAL_UART_RxCpltCallback+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a85      	ldr	r2, [pc, #532]	@ (8003c50 <HAL_UART_RxCpltCallback+0x244>)
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receive, ",");
 8003a40:	4984      	ldr	r1, [pc, #528]	@ (8003c54 <HAL_UART_RxCpltCallback+0x248>)
 8003a42:	4883      	ldr	r0, [pc, #524]	@ (8003c50 <HAL_UART_RxCpltCallback+0x244>)
 8003a44:	f009 fbdc 	bl	800d200 <strtok>
 8003a48:	6178      	str	r0, [r7, #20]
			dataIndex = 0;
 8003a4a:	4b83      	ldr	r3, [pc, #524]	@ (8003c58 <HAL_UART_RxCpltCallback+0x24c>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8003a50:	e015      	b.n	8003a7e <HAL_UART_RxCpltCallback+0x72>
			{
				sensorData[dataIndex++] = atof(token);
 8003a52:	4b81      	ldr	r3, [pc, #516]	@ (8003c58 <HAL_UART_RxCpltCallback+0x24c>)
 8003a54:	681c      	ldr	r4, [r3, #0]
 8003a56:	1c63      	adds	r3, r4, #1
 8003a58:	4a7f      	ldr	r2, [pc, #508]	@ (8003c58 <HAL_UART_RxCpltCallback+0x24c>)
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	6978      	ldr	r0, [r7, #20]
 8003a5e:	f007 fd7f 	bl	800b560 <atof>
 8003a62:	eeb0 7a40 	vmov.f32	s14, s0
 8003a66:	eef0 7a60 	vmov.f32	s15, s1
 8003a6a:	4a7c      	ldr	r2, [pc, #496]	@ (8003c5c <HAL_UART_RxCpltCallback+0x250>)
 8003a6c:	00e3      	lsls	r3, r4, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	ed83 7b00 	vstr	d7, [r3]
				token = strtok(NULL, ",");
 8003a74:	4977      	ldr	r1, [pc, #476]	@ (8003c54 <HAL_UART_RxCpltCallback+0x248>)
 8003a76:	2000      	movs	r0, #0
 8003a78:	f009 fbc2 	bl	800d200 <strtok>
 8003a7c:	6178      	str	r0, [r7, #20]
			while(token != NULL)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e6      	bne.n	8003a52 <HAL_UART_RxCpltCallback+0x46>
			}
			memset(receive, 0, sizeof(receive));
 8003a84:	2232      	movs	r2, #50	@ 0x32
 8003a86:	2100      	movs	r1, #0
 8003a88:	4871      	ldr	r0, [pc, #452]	@ (8003c50 <HAL_UART_RxCpltCallback+0x244>)
 8003a8a:	f009 fb9e 	bl	800d1ca <memset>
			rxIndex = 0;
 8003a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8003c4c <HAL_UART_RxCpltCallback+0x240>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart1, receive, 1) != HAL_OK)
 8003a94:	2201      	movs	r2, #1
 8003a96:	496e      	ldr	r1, [pc, #440]	@ (8003c50 <HAL_UART_RxCpltCallback+0x244>)
 8003a98:	4871      	ldr	r0, [pc, #452]	@ (8003c60 <HAL_UART_RxCpltCallback+0x254>)
 8003a9a:	f006 fe3d 	bl	800a718 <HAL_UART_Receive_IT>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d016      	beq.n	8003ad2 <HAL_UART_RxCpltCallback+0xc6>
			{
				Error_Handler();
 8003aa4:	f000 f8f8 	bl	8003c98 <Error_Handler>
		{
 8003aa8:	e013      	b.n	8003ad2 <HAL_UART_RxCpltCallback+0xc6>
			}
		}
		else
		{
			rxIndex++;
 8003aaa:	4b68      	ldr	r3, [pc, #416]	@ (8003c4c <HAL_UART_RxCpltCallback+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	4a66      	ldr	r2, [pc, #408]	@ (8003c4c <HAL_UART_RxCpltCallback+0x240>)
 8003ab2:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart1, receive + rxIndex, 1) != HAL_OK)
 8003ab4:	4b65      	ldr	r3, [pc, #404]	@ (8003c4c <HAL_UART_RxCpltCallback+0x240>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a65      	ldr	r2, [pc, #404]	@ (8003c50 <HAL_UART_RxCpltCallback+0x244>)
 8003aba:	4413      	add	r3, r2
 8003abc:	2201      	movs	r2, #1
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4867      	ldr	r0, [pc, #412]	@ (8003c60 <HAL_UART_RxCpltCallback+0x254>)
 8003ac2:	f006 fe29 	bl	800a718 <HAL_UART_Receive_IT>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_UART_RxCpltCallback+0xc8>
			{
				Error_Handler();
 8003acc:	f000 f8e4 	bl	8003c98 <Error_Handler>
 8003ad0:	e000      	b.n	8003ad4 <HAL_UART_RxCpltCallback+0xc8>
		{
 8003ad2:	bf00      	nop
			}
		}
	}
	if(huart->Instance == USART2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a62      	ldr	r2, [pc, #392]	@ (8003c64 <HAL_UART_RxCpltCallback+0x258>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d155      	bne.n	8003b8a <HAL_UART_RxCpltCallback+0x17e>
	{
		if(receiveCAM[indexCAM] == '\r' || receiveCAM[indexCAM] == '\n')
 8003ade:	4b62      	ldr	r3, [pc, #392]	@ (8003c68 <HAL_UART_RxCpltCallback+0x25c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a62      	ldr	r2, [pc, #392]	@ (8003c6c <HAL_UART_RxCpltCallback+0x260>)
 8003ae4:	5cd3      	ldrb	r3, [r2, r3]
 8003ae6:	2b0d      	cmp	r3, #13
 8003ae8:	d005      	beq.n	8003af6 <HAL_UART_RxCpltCallback+0xea>
 8003aea:	4b5f      	ldr	r3, [pc, #380]	@ (8003c68 <HAL_UART_RxCpltCallback+0x25c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a5f      	ldr	r2, [pc, #380]	@ (8003c6c <HAL_UART_RxCpltCallback+0x260>)
 8003af0:	5cd3      	ldrb	r3, [r2, r3]
 8003af2:	2b0a      	cmp	r3, #10
 8003af4:	d134      	bne.n	8003b60 <HAL_UART_RxCpltCallback+0x154>
		{
			receiveCAM[indexCAM] = '\0';
 8003af6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c68 <HAL_UART_RxCpltCallback+0x25c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a5c      	ldr	r2, [pc, #368]	@ (8003c6c <HAL_UART_RxCpltCallback+0x260>)
 8003afc:	2100      	movs	r1, #0
 8003afe:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveCAM, ",");
 8003b00:	4954      	ldr	r1, [pc, #336]	@ (8003c54 <HAL_UART_RxCpltCallback+0x248>)
 8003b02:	485a      	ldr	r0, [pc, #360]	@ (8003c6c <HAL_UART_RxCpltCallback+0x260>)
 8003b04:	f009 fb7c 	bl	800d200 <strtok>
 8003b08:	6138      	str	r0, [r7, #16]
			dataindexCAM = 0;
 8003b0a:	4b59      	ldr	r3, [pc, #356]	@ (8003c70 <HAL_UART_RxCpltCallback+0x264>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8003b10:	e010      	b.n	8003b34 <HAL_UART_RxCpltCallback+0x128>
			{
				camera[dataindexCAM++] = atoi(token);
 8003b12:	4b57      	ldr	r3, [pc, #348]	@ (8003c70 <HAL_UART_RxCpltCallback+0x264>)
 8003b14:	681c      	ldr	r4, [r3, #0]
 8003b16:	1c63      	adds	r3, r4, #1
 8003b18:	4a55      	ldr	r2, [pc, #340]	@ (8003c70 <HAL_UART_RxCpltCallback+0x264>)
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	6938      	ldr	r0, [r7, #16]
 8003b1e:	f007 fd22 	bl	800b566 <atoi>
 8003b22:	4603      	mov	r3, r0
 8003b24:	4a53      	ldr	r2, [pc, #332]	@ (8003c74 <HAL_UART_RxCpltCallback+0x268>)
 8003b26:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 8003b2a:	494a      	ldr	r1, [pc, #296]	@ (8003c54 <HAL_UART_RxCpltCallback+0x248>)
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f009 fb67 	bl	800d200 <strtok>
 8003b32:	6138      	str	r0, [r7, #16]
			while(token != NULL)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1eb      	bne.n	8003b12 <HAL_UART_RxCpltCallback+0x106>
			}
			memset(receiveCAM, 0, sizeof(receiveCAM));
 8003b3a:	2232      	movs	r2, #50	@ 0x32
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	484b      	ldr	r0, [pc, #300]	@ (8003c6c <HAL_UART_RxCpltCallback+0x260>)
 8003b40:	f009 fb43 	bl	800d1ca <memset>
			indexCAM = 0;
 8003b44:	4b48      	ldr	r3, [pc, #288]	@ (8003c68 <HAL_UART_RxCpltCallback+0x25c>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart2, receiveCAM, 1) != HAL_OK)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	4947      	ldr	r1, [pc, #284]	@ (8003c6c <HAL_UART_RxCpltCallback+0x260>)
 8003b4e:	484a      	ldr	r0, [pc, #296]	@ (8003c78 <HAL_UART_RxCpltCallback+0x26c>)
 8003b50:	f006 fde2 	bl	800a718 <HAL_UART_Receive_IT>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d016      	beq.n	8003b88 <HAL_UART_RxCpltCallback+0x17c>
			{
				Error_Handler();
 8003b5a:	f000 f89d 	bl	8003c98 <Error_Handler>
		{
 8003b5e:	e013      	b.n	8003b88 <HAL_UART_RxCpltCallback+0x17c>
			}
		}
		else
		{
			indexCAM++;
 8003b60:	4b41      	ldr	r3, [pc, #260]	@ (8003c68 <HAL_UART_RxCpltCallback+0x25c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3301      	adds	r3, #1
 8003b66:	4a40      	ldr	r2, [pc, #256]	@ (8003c68 <HAL_UART_RxCpltCallback+0x25c>)
 8003b68:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart2, receiveCAM + indexCAM, 1) != HAL_OK)
 8003b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c68 <HAL_UART_RxCpltCallback+0x25c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a3f      	ldr	r2, [pc, #252]	@ (8003c6c <HAL_UART_RxCpltCallback+0x260>)
 8003b70:	4413      	add	r3, r2
 8003b72:	2201      	movs	r2, #1
 8003b74:	4619      	mov	r1, r3
 8003b76:	4840      	ldr	r0, [pc, #256]	@ (8003c78 <HAL_UART_RxCpltCallback+0x26c>)
 8003b78:	f006 fdce 	bl	800a718 <HAL_UART_Receive_IT>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_UART_RxCpltCallback+0x17e>
			{
				Error_Handler();
 8003b82:	f000 f889 	bl	8003c98 <Error_Handler>
 8003b86:	e000      	b.n	8003b8a <HAL_UART_RxCpltCallback+0x17e>
		{
 8003b88:	bf00      	nop
			}
		}
	}
	if(huart->Instance == USART3)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a3b      	ldr	r2, [pc, #236]	@ (8003c7c <HAL_UART_RxCpltCallback+0x270>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d155      	bne.n	8003c40 <HAL_UART_RxCpltCallback+0x234>
	{
		if(receiveMEGA[indexMEGA] == '\r' || receiveMEGA[indexMEGA] == '\n')
 8003b94:	4b3a      	ldr	r3, [pc, #232]	@ (8003c80 <HAL_UART_RxCpltCallback+0x274>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a3a      	ldr	r2, [pc, #232]	@ (8003c84 <HAL_UART_RxCpltCallback+0x278>)
 8003b9a:	5cd3      	ldrb	r3, [r2, r3]
 8003b9c:	2b0d      	cmp	r3, #13
 8003b9e:	d005      	beq.n	8003bac <HAL_UART_RxCpltCallback+0x1a0>
 8003ba0:	4b37      	ldr	r3, [pc, #220]	@ (8003c80 <HAL_UART_RxCpltCallback+0x274>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a37      	ldr	r2, [pc, #220]	@ (8003c84 <HAL_UART_RxCpltCallback+0x278>)
 8003ba6:	5cd3      	ldrb	r3, [r2, r3]
 8003ba8:	2b0a      	cmp	r3, #10
 8003baa:	d134      	bne.n	8003c16 <HAL_UART_RxCpltCallback+0x20a>
		{
			receiveMEGA[indexMEGA] = '\0';
 8003bac:	4b34      	ldr	r3, [pc, #208]	@ (8003c80 <HAL_UART_RxCpltCallback+0x274>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a34      	ldr	r2, [pc, #208]	@ (8003c84 <HAL_UART_RxCpltCallback+0x278>)
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	54d1      	strb	r1, [r2, r3]
			char *token = strtok((char *)receiveMEGA, ",");
 8003bb6:	4927      	ldr	r1, [pc, #156]	@ (8003c54 <HAL_UART_RxCpltCallback+0x248>)
 8003bb8:	4832      	ldr	r0, [pc, #200]	@ (8003c84 <HAL_UART_RxCpltCallback+0x278>)
 8003bba:	f009 fb21 	bl	800d200 <strtok>
 8003bbe:	60f8      	str	r0, [r7, #12]
			dataindexMEGA = 0;
 8003bc0:	4b31      	ldr	r3, [pc, #196]	@ (8003c88 <HAL_UART_RxCpltCallback+0x27c>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
			while(token != NULL)
 8003bc6:	e010      	b.n	8003bea <HAL_UART_RxCpltCallback+0x1de>
			{
				sensorMEGA[dataindexMEGA++] = atoi(token);
 8003bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8003c88 <HAL_UART_RxCpltCallback+0x27c>)
 8003bca:	681c      	ldr	r4, [r3, #0]
 8003bcc:	1c63      	adds	r3, r4, #1
 8003bce:	4a2e      	ldr	r2, [pc, #184]	@ (8003c88 <HAL_UART_RxCpltCallback+0x27c>)
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f007 fcc7 	bl	800b566 <atoi>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	4a2c      	ldr	r2, [pc, #176]	@ (8003c8c <HAL_UART_RxCpltCallback+0x280>)
 8003bdc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				token = strtok(NULL, ",");
 8003be0:	491c      	ldr	r1, [pc, #112]	@ (8003c54 <HAL_UART_RxCpltCallback+0x248>)
 8003be2:	2000      	movs	r0, #0
 8003be4:	f009 fb0c 	bl	800d200 <strtok>
 8003be8:	60f8      	str	r0, [r7, #12]
			while(token != NULL)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1eb      	bne.n	8003bc8 <HAL_UART_RxCpltCallback+0x1bc>
			}
			memset(receiveMEGA, 0, sizeof(receiveMEGA));
 8003bf0:	2232      	movs	r2, #50	@ 0x32
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4823      	ldr	r0, [pc, #140]	@ (8003c84 <HAL_UART_RxCpltCallback+0x278>)
 8003bf6:	f009 fae8 	bl	800d1ca <memset>
			indexMEGA = 0;
 8003bfa:	4b21      	ldr	r3, [pc, #132]	@ (8003c80 <HAL_UART_RxCpltCallback+0x274>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
			if(HAL_UART_Receive_IT(&huart3, receiveMEGA, 1) != HAL_OK)
 8003c00:	2201      	movs	r2, #1
 8003c02:	4920      	ldr	r1, [pc, #128]	@ (8003c84 <HAL_UART_RxCpltCallback+0x278>)
 8003c04:	4822      	ldr	r0, [pc, #136]	@ (8003c90 <HAL_UART_RxCpltCallback+0x284>)
 8003c06:	f006 fd87 	bl	800a718 <HAL_UART_Receive_IT>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d016      	beq.n	8003c3e <HAL_UART_RxCpltCallback+0x232>
			{
				Error_Handler();
 8003c10:	f000 f842 	bl	8003c98 <Error_Handler>
		{
 8003c14:	e013      	b.n	8003c3e <HAL_UART_RxCpltCallback+0x232>
			}
		}
		else
		{
			indexMEGA++;
 8003c16:	4b1a      	ldr	r3, [pc, #104]	@ (8003c80 <HAL_UART_RxCpltCallback+0x274>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	4a18      	ldr	r2, [pc, #96]	@ (8003c80 <HAL_UART_RxCpltCallback+0x274>)
 8003c1e:	6013      	str	r3, [r2, #0]
			if(HAL_UART_Receive_IT(&huart3, receiveMEGA + indexMEGA, 1) != HAL_OK)
 8003c20:	4b17      	ldr	r3, [pc, #92]	@ (8003c80 <HAL_UART_RxCpltCallback+0x274>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a17      	ldr	r2, [pc, #92]	@ (8003c84 <HAL_UART_RxCpltCallback+0x278>)
 8003c26:	4413      	add	r3, r2
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4818      	ldr	r0, [pc, #96]	@ (8003c90 <HAL_UART_RxCpltCallback+0x284>)
 8003c2e:	f006 fd73 	bl	800a718 <HAL_UART_Receive_IT>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_UART_RxCpltCallback+0x234>
			{
				Error_Handler();
 8003c38:	f000 f82e 	bl	8003c98 <Error_Handler>
			}
		}
	}
}
 8003c3c:	e000      	b.n	8003c40 <HAL_UART_RxCpltCallback+0x234>
		{
 8003c3e:	bf00      	nop
}
 8003c40:	bf00      	nop
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd90      	pop	{r4, r7, pc}
 8003c48:	40011000 	.word	0x40011000
 8003c4c:	20000520 	.word	0x20000520
 8003c50:	200004ec 	.word	0x200004ec
 8003c54:	08011958 	.word	0x08011958
 8003c58:	20000524 	.word	0x20000524
 8003c5c:	20000528 	.word	0x20000528
 8003c60:	200003f8 	.word	0x200003f8
 8003c64:	40004400 	.word	0x40004400
 8003c68:	20000574 	.word	0x20000574
 8003c6c:	20000540 	.word	0x20000540
 8003c70:	20000578 	.word	0x20000578
 8003c74:	2000057c 	.word	0x2000057c
 8003c78:	20000440 	.word	0x20000440
 8003c7c:	40004800 	.word	0x40004800
 8003c80:	200005e4 	.word	0x200005e4
 8003c84:	200005b0 	.word	0x200005b0
 8003c88:	200005e8 	.word	0x200005e8
 8003c8c:	200005ec 	.word	0x200005ec
 8003c90:	20000488 	.word	0x20000488
 8003c94:	00000000 	.word	0x00000000

08003c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c9c:	b672      	cpsid	i
}
 8003c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  Inverse_Kinematics(0, 0, 0);
 8003ca0:	ed9f 2b0d 	vldr	d2, [pc, #52]	@ 8003cd8 <Error_Handler+0x40>
 8003ca4:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 8003cd8 <Error_Handler+0x40>
 8003ca8:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 8003cd8 <Error_Handler+0x40>
 8003cac:	f7fd fa4c 	bl	8001148 <Inverse_Kinematics>
	  setMotorSpeed(1, 0);
 8003cb0:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8003cd8 <Error_Handler+0x40>
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	f7fd f9d1 	bl	800105c <setMotorSpeed>
	  setMotorSpeed(2, 0);
 8003cba:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8003cd8 <Error_Handler+0x40>
 8003cbe:	2002      	movs	r0, #2
 8003cc0:	f7fd f9cc 	bl	800105c <setMotorSpeed>
	  setMotorSpeed(7, 0);
 8003cc4:	ed9f 0b04 	vldr	d0, [pc, #16]	@ 8003cd8 <Error_Handler+0x40>
 8003cc8:	2007      	movs	r0, #7
 8003cca:	f7fd f9c7 	bl	800105c <setMotorSpeed>
	  Inverse_Kinematics(0, 0, 0);
 8003cce:	bf00      	nop
 8003cd0:	e7e6      	b.n	8003ca0 <Error_Handler+0x8>
 8003cd2:	bf00      	nop
 8003cd4:	f3af 8000 	nop.w
	...

08003ce0 <odometry>:

extern int camera[13];
extern int sensorMEGA[4];

robotPosition odometry()
{
 8003ce0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ce4:	b0bc      	sub	sp, #240	@ 0xf0
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
    robotPosition currentPosition;

    /* ENCODER INTERNAL */
    int dn1_in = counterIN1 - oldEncIN1;
 8003cea:	4bc9      	ldr	r3, [pc, #804]	@ (8004010 <odometry+0x330>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4bc9      	ldr	r3, [pc, #804]	@ (8004014 <odometry+0x334>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int dn2_in = counterIN2 - oldEncIN2;
 8003cf8:	4bc7      	ldr	r3, [pc, #796]	@ (8004018 <odometry+0x338>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4bc7      	ldr	r3, [pc, #796]	@ (800401c <odometry+0x33c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    int dn3_in = counterIN3 - oldEncIN3;
 8003d06:	4bc6      	ldr	r3, [pc, #792]	@ (8004020 <odometry+0x340>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	4bc6      	ldr	r3, [pc, #792]	@ (8004024 <odometry+0x344>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    int dn4_in = counterIN4 - oldEncIN4;
 8003d14:	4bc4      	ldr	r3, [pc, #784]	@ (8004028 <odometry+0x348>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4bc4      	ldr	r3, [pc, #784]	@ (800402c <odometry+0x34c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    oldEncIN1 = counterIN1;
 8003d22:	4bbb      	ldr	r3, [pc, #748]	@ (8004010 <odometry+0x330>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4abb      	ldr	r2, [pc, #748]	@ (8004014 <odometry+0x334>)
 8003d28:	6013      	str	r3, [r2, #0]
    oldEncIN2 = counterIN2;
 8003d2a:	4bbb      	ldr	r3, [pc, #748]	@ (8004018 <odometry+0x338>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4abb      	ldr	r2, [pc, #748]	@ (800401c <odometry+0x33c>)
 8003d30:	6013      	str	r3, [r2, #0]
    oldEncIN3 = counterIN3;
 8003d32:	4bbb      	ldr	r3, [pc, #748]	@ (8004020 <odometry+0x340>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4abb      	ldr	r2, [pc, #748]	@ (8004024 <odometry+0x344>)
 8003d38:	6013      	str	r3, [r2, #0]
    oldEncIN4 = counterIN4;
 8003d3a:	4bbb      	ldr	r3, [pc, #748]	@ (8004028 <odometry+0x348>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4abb      	ldr	r2, [pc, #748]	@ (800402c <odometry+0x34c>)
 8003d40:	6013      	str	r3, [r2, #0]

    double dthetaIN = mm_per_tick_IN * ((-dn1_in + dn3_in) + (dn2_in - dn4_in)) / (m1_m3 * 4);
 8003d42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003d46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003d4a:	1ad2      	subs	r2, r2, r3
 8003d4c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d54:	1acb      	subs	r3, r1, r3
 8003d56:	4413      	add	r3, r2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fc fbe3 	bl	8000524 <__aeabi_i2d>
 8003d5e:	a3a4      	add	r3, pc, #656	@ (adr r3, 8003ff0 <odometry+0x310>)
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f7fc fc48 	bl	80005f8 <__aeabi_dmul>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	a3a1      	add	r3, pc, #644	@ (adr r3, 8003ff8 <odometry+0x318>)
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	f7fc fd69 	bl	800084c <__aeabi_ddiv>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double dxIN = mm_per_tick_IN * ((-dn1_in + dn2_in - dn3_in + dn4_in)/4 * cos(M_PI_4) + ((-dn1_in + dn3_in) + (dn2_in - dn4_in)) / (m1_m3 * 16));
 8003d82:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003d86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003d8a:	1ad2      	subs	r2, r2, r3
 8003d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d90:	1ad2      	subs	r2, r2, r3
 8003d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d96:	4413      	add	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	da00      	bge.n	8003d9e <odometry+0xbe>
 8003d9c:	3303      	adds	r3, #3
 8003d9e:	109b      	asrs	r3, r3, #2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fc fbbf 	bl	8000524 <__aeabi_i2d>
 8003da6:	a396      	add	r3, pc, #600	@ (adr r3, 8004000 <odometry+0x320>)
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f7fc fc24 	bl	80005f8 <__aeabi_dmul>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4690      	mov	r8, r2
 8003db6:	4699      	mov	r9, r3
 8003db8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003dbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003dc0:	1ad2      	subs	r2, r2, r3
 8003dc2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dca:	1acb      	subs	r3, r1, r3
 8003dcc:	4413      	add	r3, r2
 8003dce:	4a98      	ldr	r2, [pc, #608]	@ (8004030 <odometry+0x350>)
 8003dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8003dd4:	1312      	asrs	r2, r2, #12
 8003dd6:	17db      	asrs	r3, r3, #31
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fc fba2 	bl	8000524 <__aeabi_i2d>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4640      	mov	r0, r8
 8003de6:	4649      	mov	r1, r9
 8003de8:	f7fc fa50 	bl	800028c <__adddf3>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	a37e      	add	r3, pc, #504	@ (adr r3, 8003ff0 <odometry+0x310>)
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	f7fc fbfd 	bl	80005f8 <__aeabi_dmul>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0
    double dyIN = mm_per_tick_IN * (dn1_in + dn2_in + dn3_in + dn4_in)/4 * sin(M_PI_4);
 8003e06:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003e0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003e0e:	441a      	add	r2, r3
 8003e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e14:	441a      	add	r2, r3
 8003e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e1a:	4413      	add	r3, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fc fb81 	bl	8000524 <__aeabi_i2d>
 8003e22:	a373      	add	r3, pc, #460	@ (adr r3, 8003ff0 <odometry+0x310>)
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	f7fc fbe6 	bl	80005f8 <__aeabi_dmul>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	4b7e      	ldr	r3, [pc, #504]	@ (8004034 <odometry+0x354>)
 8003e3a:	f7fc fd07 	bl	800084c <__aeabi_ddiv>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4610      	mov	r0, r2
 8003e44:	4619      	mov	r1, r3
 8003e46:	a370      	add	r3, pc, #448	@ (adr r3, 8004008 <odometry+0x328>)
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	f7fc fbd4 	bl	80005f8 <__aeabi_dmul>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8

    double distanceIN = hypot(dxIN, dyIN);
 8003e58:	ed97 1b32 	vldr	d1, [r7, #200]	@ 0xc8
 8003e5c:	ed97 0b34 	vldr	d0, [r7, #208]	@ 0xd0
 8003e60:	f00b ff66 	bl	800fd30 <hypot>
 8003e64:	ed87 0b30 	vstr	d0, [r7, #192]	@ 0xc0
	double directionIN = atan2(dyIN, dxIN);
 8003e68:	ed97 1b34 	vldr	d1, [r7, #208]	@ 0xd0
 8003e6c:	ed97 0b32 	vldr	d0, [r7, #200]	@ 0xc8
 8003e70:	f00b ff5a 	bl	800fd28 <atan2>
 8003e74:	ed87 0b2e 	vstr	d0, [r7, #184]	@ 0xb8
	double theta_localIN = directionIN - dthetaIN;
 8003e78:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8003e7c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003e80:	f7fc fa02 	bl	8000288 <__aeabi_dsub>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0

	xLocalIN += distanceIN * cos(theta_localIN);
 8003e8c:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8003e90:	f00b ff82 	bl	800fd98 <cos>
 8003e94:	ec51 0b10 	vmov	r0, r1, d0
 8003e98:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8003e9c:	f7fc fbac 	bl	80005f8 <__aeabi_dmul>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4b63      	ldr	r3, [pc, #396]	@ (8004038 <odometry+0x358>)
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f7fc f9ed 	bl	800028c <__adddf3>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4960      	ldr	r1, [pc, #384]	@ (8004038 <odometry+0x358>)
 8003eb8:	e9c1 2300 	strd	r2, r3, [r1]
	yLocalIN += distanceIN * sin(theta_localIN);
 8003ebc:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8003ec0:	f00b ffbe 	bl	800fe40 <sin>
 8003ec4:	ec51 0b10 	vmov	r0, r1, d0
 8003ec8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8003ecc:	f7fc fb94 	bl	80005f8 <__aeabi_dmul>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4b58      	ldr	r3, [pc, #352]	@ (800403c <odometry+0x35c>)
 8003eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ede:	f7fc f9d5 	bl	800028c <__adddf3>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4955      	ldr	r1, [pc, #340]	@ (800403c <odometry+0x35c>)
 8003ee8:	e9c1 2300 	strd	r2, r3, [r1]

    double thetaIN = headingIN + (dthetaIN / 2.0);
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003ef4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8003ef8:	f7fc fca8 	bl	800084c <__aeabi_ddiv>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	4b4e      	ldr	r3, [pc, #312]	@ (8004040 <odometry+0x360>)
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	f7fc f9bf 	bl	800028c <__adddf3>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
    xGlobalIN += dxIN * cos(thetaIN) + dyIN * sin(thetaIN);
 8003f16:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8003f1a:	f00b ff3d 	bl	800fd98 <cos>
 8003f1e:	ec51 0b10 	vmov	r0, r1, d0
 8003f22:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8003f26:	f7fc fb67 	bl	80005f8 <__aeabi_dmul>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4690      	mov	r8, r2
 8003f30:	4699      	mov	r9, r3
 8003f32:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8003f36:	f00b ff83 	bl	800fe40 <sin>
 8003f3a:	ec51 0b10 	vmov	r0, r1, d0
 8003f3e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8003f42:	f7fc fb59 	bl	80005f8 <__aeabi_dmul>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4640      	mov	r0, r8
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	f7fc f99d 	bl	800028c <__adddf3>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4610      	mov	r0, r2
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4b3a      	ldr	r3, [pc, #232]	@ (8004044 <odometry+0x364>)
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f7fc f994 	bl	800028c <__adddf3>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4936      	ldr	r1, [pc, #216]	@ (8004044 <odometry+0x364>)
 8003f6a:	e9c1 2300 	strd	r2, r3, [r1]
    yGlobalIN += -dxIN * sin(thetaIN) + dyIN * cos(thetaIN);
 8003f6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f78:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003f7c:	607b      	str	r3, [r7, #4]
 8003f7e:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8003f82:	f00b ff5d 	bl	800fe40 <sin>
 8003f86:	ec53 2b10 	vmov	r2, r3, d0
 8003f8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f8e:	f7fc fb33 	bl	80005f8 <__aeabi_dmul>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4690      	mov	r8, r2
 8003f98:	4699      	mov	r9, r3
 8003f9a:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8003f9e:	f00b fefb 	bl	800fd98 <cos>
 8003fa2:	ec51 0b10 	vmov	r0, r1, d0
 8003fa6:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8003faa:	f7fc fb25 	bl	80005f8 <__aeabi_dmul>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4640      	mov	r0, r8
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	f7fc f969 	bl	800028c <__adddf3>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4b21      	ldr	r3, [pc, #132]	@ (8004048 <odometry+0x368>)
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f7fc f960 	bl	800028c <__adddf3>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	491d      	ldr	r1, [pc, #116]	@ (8004048 <odometry+0x368>)
 8003fd2:	e9c1 2300 	strd	r2, r3, [r1]
    headingIN += dthetaIN;
 8003fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8004040 <odometry+0x360>)
 8003fd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fdc:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8003fe0:	f7fc f954 	bl	800028c <__adddf3>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	e030      	b.n	800404c <odometry+0x36c>
 8003fea:	bf00      	nop
 8003fec:	f3af 8000 	nop.w
 8003ff0:	458bd930 	.word	0x458bd930
 8003ff4:	401b4977 	.word	0x401b4977
 8003ff8:	00000000 	.word	0x00000000
 8003ffc:	40a45000 	.word	0x40a45000
 8004000:	667f3bcd 	.word	0x667f3bcd
 8004004:	3fe6a09e 	.word	0x3fe6a09e
 8004008:	667f3bcc 	.word	0x667f3bcc
 800400c:	3fe6a09e 	.word	0x3fe6a09e
 8004010:	200004dc 	.word	0x200004dc
 8004014:	20000648 	.word	0x20000648
 8004018:	200004e0 	.word	0x200004e0
 800401c:	2000064c 	.word	0x2000064c
 8004020:	200004e4 	.word	0x200004e4
 8004024:	20000650 	.word	0x20000650
 8004028:	200004e8 	.word	0x200004e8
 800402c:	20000654 	.word	0x20000654
 8004030:	64d319ff 	.word	0x64d319ff
 8004034:	40100000 	.word	0x40100000
 8004038:	20000668 	.word	0x20000668
 800403c:	20000670 	.word	0x20000670
 8004040:	20000678 	.word	0x20000678
 8004044:	20000658 	.word	0x20000658
 8004048:	20000660 	.word	0x20000660
 800404c:	49ba      	ldr	r1, [pc, #744]	@ (8004338 <odometry+0x658>)
 800404e:	e9c1 2300 	strd	r2, r3, [r1]
    /* END */

    /* ENCODER EXTERNAL */
    int dn1 = counter1 - oldEnc1;
 8004052:	4bba      	ldr	r3, [pc, #744]	@ (800433c <odometry+0x65c>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4bba      	ldr	r3, [pc, #744]	@ (8004340 <odometry+0x660>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    int dn2 = counter2 - oldEnc2;
 8004060:	4bb8      	ldr	r3, [pc, #736]	@ (8004344 <odometry+0x664>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4bb8      	ldr	r3, [pc, #736]	@ (8004348 <odometry+0x668>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    int dn3 = counter3 - oldEnc3;
 800406e:	4bb7      	ldr	r3, [pc, #732]	@ (800434c <odometry+0x66c>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4bb7      	ldr	r3, [pc, #732]	@ (8004350 <odometry+0x670>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    oldEnc1 = counter1;
 800407c:	4baf      	ldr	r3, [pc, #700]	@ (800433c <odometry+0x65c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4aaf      	ldr	r2, [pc, #700]	@ (8004340 <odometry+0x660>)
 8004082:	6013      	str	r3, [r2, #0]
    oldEnc2 = counter2;
 8004084:	4baf      	ldr	r3, [pc, #700]	@ (8004344 <odometry+0x664>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4aaf      	ldr	r2, [pc, #700]	@ (8004348 <odometry+0x668>)
 800408a:	6013      	str	r3, [r2, #0]
    oldEnc3 = counter3;
 800408c:	4baf      	ldr	r3, [pc, #700]	@ (800434c <odometry+0x66c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4aaf      	ldr	r2, [pc, #700]	@ (8004350 <odometry+0x670>)
 8004092:	6013      	str	r3, [r2, #0]

    double dtheta = mm_per_tick * (dn2 - dn1) / e1_e2;
 8004094:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8004098:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fc fa40 	bl	8000524 <__aeabi_i2d>
 80040a4:	a3a0      	add	r3, pc, #640	@ (adr r3, 8004328 <odometry+0x648>)
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	f7fc faa5 	bl	80005f8 <__aeabi_dmul>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4610      	mov	r0, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	a39e      	add	r3, pc, #632	@ (adr r3, 8004330 <odometry+0x650>)
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f7fc fbc6 	bl	800084c <__aeabi_ddiv>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    double dx = mm_per_tick * (dn3 + (dn2 - dn1) * e12_e3 / e1_e2);
 80040c8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80040cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	22e6      	movs	r2, #230	@ 0xe6
 80040d4:	fb02 f303 	mul.w	r3, r2, r3
 80040d8:	4a9e      	ldr	r2, [pc, #632]	@ (8004354 <odometry+0x674>)
 80040da:	fb82 1203 	smull	r1, r2, r2, r3
 80040de:	441a      	add	r2, r3
 80040e0:	1212      	asrs	r2, r2, #8
 80040e2:	17db      	asrs	r3, r3, #31
 80040e4:	1ad2      	subs	r2, r2, r3
 80040e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040ea:	4413      	add	r3, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fc fa19 	bl	8000524 <__aeabi_i2d>
 80040f2:	a38d      	add	r3, pc, #564	@ (adr r3, 8004328 <odometry+0x648>)
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f7fc fa7e 	bl	80005f8 <__aeabi_dmul>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    double dy = mm_per_tick * (dn1 + dn2) / 2.0;
 8004104:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004108:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800410c:	4413      	add	r3, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f7fc fa08 	bl	8000524 <__aeabi_i2d>
 8004114:	a384      	add	r3, pc, #528	@ (adr r3, 8004328 <odometry+0x648>)
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	f7fc fa6d 	bl	80005f8 <__aeabi_dmul>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4610      	mov	r0, r2
 8004124:	4619      	mov	r1, r3
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800412e:	f7fc fb8d 	bl	800084c <__aeabi_ddiv>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    double distance = hypot(dx, dy);
 800413a:	ed97 1b20 	vldr	d1, [r7, #128]	@ 0x80
 800413e:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 8004142:	f00b fdf5 	bl	800fd30 <hypot>
 8004146:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
	double direction = atan2(dy, dx);
 800414a:	ed97 1b22 	vldr	d1, [r7, #136]	@ 0x88
 800414e:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8004152:	f00b fde9 	bl	800fd28 <atan2>
 8004156:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70
	double theta_local = direction - dtheta;
 800415a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800415e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004162:	f7fc f891 	bl	8000288 <__aeabi_dsub>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

	xLocal += distance * cos(theta_local);
 800416e:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 8004172:	f00b fe11 	bl	800fd98 <cos>
 8004176:	ec51 0b10 	vmov	r0, r1, d0
 800417a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800417e:	f7fc fa3b 	bl	80005f8 <__aeabi_dmul>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4610      	mov	r0, r2
 8004188:	4619      	mov	r1, r3
 800418a:	4b73      	ldr	r3, [pc, #460]	@ (8004358 <odometry+0x678>)
 800418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004190:	f7fc f87c 	bl	800028c <__adddf3>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	496f      	ldr	r1, [pc, #444]	@ (8004358 <odometry+0x678>)
 800419a:	e9c1 2300 	strd	r2, r3, [r1]
	yLocal += distance * sin(theta_local);
 800419e:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 80041a2:	f00b fe4d 	bl	800fe40 <sin>
 80041a6:	ec51 0b10 	vmov	r0, r1, d0
 80041aa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80041ae:	f7fc fa23 	bl	80005f8 <__aeabi_dmul>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4610      	mov	r0, r2
 80041b8:	4619      	mov	r1, r3
 80041ba:	4b68      	ldr	r3, [pc, #416]	@ (800435c <odometry+0x67c>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f7fc f864 	bl	800028c <__adddf3>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4964      	ldr	r1, [pc, #400]	@ (800435c <odometry+0x67c>)
 80041ca:	e9c1 2300 	strd	r2, r3, [r1]

    double theta = heading + (dtheta / 2.0);
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80041d6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80041da:	f7fc fb37 	bl	800084c <__aeabi_ddiv>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4610      	mov	r0, r2
 80041e4:	4619      	mov	r1, r3
 80041e6:	4b5e      	ldr	r3, [pc, #376]	@ (8004360 <odometry+0x680>)
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f7fc f84e 	bl	800028c <__adddf3>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    xGlobal += dx * cos(theta) + dy * sin(theta);
 80041f8:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 80041fc:	f00b fdcc 	bl	800fd98 <cos>
 8004200:	ec51 0b10 	vmov	r0, r1, d0
 8004204:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004208:	f7fc f9f6 	bl	80005f8 <__aeabi_dmul>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4690      	mov	r8, r2
 8004212:	4699      	mov	r9, r3
 8004214:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8004218:	f00b fe12 	bl	800fe40 <sin>
 800421c:	ec51 0b10 	vmov	r0, r1, d0
 8004220:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8004224:	f7fc f9e8 	bl	80005f8 <__aeabi_dmul>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4640      	mov	r0, r8
 800422e:	4649      	mov	r1, r9
 8004230:	f7fc f82c 	bl	800028c <__adddf3>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4610      	mov	r0, r2
 800423a:	4619      	mov	r1, r3
 800423c:	4b49      	ldr	r3, [pc, #292]	@ (8004364 <odometry+0x684>)
 800423e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004242:	f7fc f823 	bl	800028c <__adddf3>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4946      	ldr	r1, [pc, #280]	@ (8004364 <odometry+0x684>)
 800424c:	e9c1 2300 	strd	r2, r3, [r1]
    yGlobal += -dx * sin(theta) + dy * cos(theta);
 8004250:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 8004254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004258:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800425c:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8004260:	f00b fdee 	bl	800fe40 <sin>
 8004264:	ec53 2b10 	vmov	r2, r3, d0
 8004268:	4620      	mov	r0, r4
 800426a:	4629      	mov	r1, r5
 800426c:	f7fc f9c4 	bl	80005f8 <__aeabi_dmul>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4614      	mov	r4, r2
 8004276:	461d      	mov	r5, r3
 8004278:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 800427c:	f00b fd8c 	bl	800fd98 <cos>
 8004280:	ec51 0b10 	vmov	r0, r1, d0
 8004284:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8004288:	f7fc f9b6 	bl	80005f8 <__aeabi_dmul>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4620      	mov	r0, r4
 8004292:	4629      	mov	r1, r5
 8004294:	f7fb fffa 	bl	800028c <__adddf3>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4610      	mov	r0, r2
 800429e:	4619      	mov	r1, r3
 80042a0:	4b31      	ldr	r3, [pc, #196]	@ (8004368 <odometry+0x688>)
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f7fb fff1 	bl	800028c <__adddf3>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	492e      	ldr	r1, [pc, #184]	@ (8004368 <odometry+0x688>)
 80042b0:	e9c1 2300 	strd	r2, r3, [r1]
    heading += dtheta;
 80042b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004360 <odometry+0x680>)
 80042b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042ba:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80042be:	f7fb ffe5 	bl	800028c <__adddf3>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4926      	ldr	r1, [pc, #152]	@ (8004360 <odometry+0x680>)
 80042c8:	e9c1 2300 	strd	r2, r3, [r1]
    /* END */

    currentPosition.x_global = xGlobal;
 80042cc:	4b25      	ldr	r3, [pc, #148]	@ (8004364 <odometry+0x684>)
 80042ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    currentPosition.y_global = yGlobal;
 80042d6:	4b24      	ldr	r3, [pc, #144]	@ (8004368 <odometry+0x688>)
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    currentPosition.h = sensorData[0];
 80042e0:	4b22      	ldr	r3, [pc, #136]	@ (800436c <odometry+0x68c>)
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    currentPosition.x_local = xLocal;
 80042ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <odometry+0x678>)
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    currentPosition.y_local = yLocal;
 80042f4:	4b19      	ldr	r3, [pc, #100]	@ (800435c <odometry+0x67c>)
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    currentPosition.x_in_global = xGlobalIN;
 80042fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004370 <odometry+0x690>)
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    currentPosition.y_in_global = yGlobalIN;
 8004308:	4b1a      	ldr	r3, [pc, #104]	@ (8004374 <odometry+0x694>)
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    currentPosition.h_en = (heading + headingIN) * 90.0 / M_PI;
 8004312:	4b13      	ldr	r3, [pc, #76]	@ (8004360 <odometry+0x680>)
 8004314:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004318:	4b07      	ldr	r3, [pc, #28]	@ (8004338 <odometry+0x658>)
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	f7fb ffb5 	bl	800028c <__adddf3>
 8004322:	4602      	mov	r2, r0
 8004324:	e028      	b.n	8004378 <odometry+0x698>
 8004326:	bf00      	nop
 8004328:	2d6e5f19 	.word	0x2d6e5f19
 800432c:	3fb752bc 	.word	0x3fb752bc
 8004330:	00000000 	.word	0x00000000
 8004334:	4077c000 	.word	0x4077c000
 8004338:	20000678 	.word	0x20000678
 800433c:	200004d0 	.word	0x200004d0
 8004340:	20000630 	.word	0x20000630
 8004344:	200004d4 	.word	0x200004d4
 8004348:	20000634 	.word	0x20000634
 800434c:	200004d8 	.word	0x200004d8
 8004350:	20000638 	.word	0x20000638
 8004354:	ac769185 	.word	0xac769185
 8004358:	20000618 	.word	0x20000618
 800435c:	20000620 	.word	0x20000620
 8004360:	20000628 	.word	0x20000628
 8004364:	20000608 	.word	0x20000608
 8004368:	20000610 	.word	0x20000610
 800436c:	20000528 	.word	0x20000528
 8004370:	20000658 	.word	0x20000658
 8004374:	20000660 	.word	0x20000660
 8004378:	460b      	mov	r3, r1
 800437a:	4610      	mov	r0, r2
 800437c:	4619      	mov	r1, r3
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	4b15      	ldr	r3, [pc, #84]	@ (80043d8 <odometry+0x6f8>)
 8004384:	f7fc f938 	bl	80005f8 <__aeabi_dmul>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4610      	mov	r0, r2
 800438e:	4619      	mov	r1, r3
 8004390:	a30f      	add	r3, pc, #60	@ (adr r3, 80043d0 <odometry+0x6f0>)
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f7fc fa59 	bl	800084c <__aeabi_ddiv>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    currentPosition.x_in_local = xLocalIN;
 80043a2:	4b0e      	ldr	r3, [pc, #56]	@ (80043dc <odometry+0x6fc>)
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    currentPosition.y_in_local = yLocalIN;
 80043ac:	4b0c      	ldr	r3, [pc, #48]	@ (80043e0 <odometry+0x700>)
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    return currentPosition;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f107 0310 	add.w	r3, r7, #16
 80043be:	2250      	movs	r2, #80	@ 0x50
 80043c0:	4619      	mov	r1, r3
 80043c2:	f008 fff0 	bl	800d3a6 <memcpy>
}
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	37f0      	adds	r7, #240	@ 0xf0
 80043ca:	46bd      	mov	sp, r7
 80043cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80043d0:	54442d18 	.word	0x54442d18
 80043d4:	400921fb 	.word	0x400921fb
 80043d8:	40568000 	.word	0x40568000
 80043dc:	20000668 	.word	0x20000668
 80043e0:	20000670 	.word	0x20000670

080043e4 <stateTransition>:
    {0.0, 0.0, 0.1}
};

// State transition function f
StateVector stateTransition(StateVector X)
{
 80043e4:	b5b0      	push	{r4, r5, r7, lr}
 80043e6:	b0ac      	sub	sp, #176	@ 0xb0
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	eeb0 5a40 	vmov.f32	s10, s0
 80043ee:	eef0 5a60 	vmov.f32	s11, s1
 80043f2:	eeb0 6a41 	vmov.f32	s12, s2
 80043f6:	eef0 6a61 	vmov.f32	s13, s3
 80043fa:	eeb0 7a42 	vmov.f32	s14, s4
 80043fe:	eef0 7a62 	vmov.f32	s15, s5
 8004402:	ed87 5b06 	vstr	d5, [r7, #24]
 8004406:	ed87 6b08 	vstr	d6, [r7, #32]
 800440a:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    StateVector X_next;
    robotPosition position = odometry();
 800440e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fc64 	bl	8003ce0 <odometry>
//    X_next.x = X.x + v * cos(X.theta) * dt + 0.5 * ax * pow(dt, 2) * cos(X.theta);
//    X_next.y = X.y + v * sin(X.theta) * dt + 0.5 * ay * pow(dt, 2) * sin(X.theta);
//    X_next.theta = X.theta + heading;
    X_next.x = X.x + position.x_global;
 8004418:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800441c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004420:	f7fb ff34 	bl	800028c <__adddf3>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    X_next.y = X.y + position.y_global;
 800442c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004430:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004434:	f7fb ff2a 	bl	800028c <__adddf3>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    X_next.theta = X.theta + position.h;
 8004440:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004444:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004448:	f7fb ff20 	bl	800028c <__adddf3>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    return X_next;
 8004454:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 8004458:	f107 0580 	add.w	r5, r7, #128	@ 0x80
 800445c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800445e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004460:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004464:	e884 0003 	stmia.w	r4, {r0, r1}
 8004468:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800446c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8004470:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8004474:	ec45 4b15 	vmov	d5, r4, r5
 8004478:	ec41 0b16 	vmov	d6, r0, r1
 800447c:	ec43 2b17 	vmov	d7, r2, r3
}
 8004480:	eeb0 0a45 	vmov.f32	s0, s10
 8004484:	eef0 0a65 	vmov.f32	s1, s11
 8004488:	eeb0 1a46 	vmov.f32	s2, s12
 800448c:	eef0 1a66 	vmov.f32	s3, s13
 8004490:	eeb0 2a47 	vmov.f32	s4, s14
 8004494:	eef0 2a67 	vmov.f32	s5, s15
 8004498:	37b0      	adds	r7, #176	@ 0xb0
 800449a:	46bd      	mov	sp, r7
 800449c:	bdb0      	pop	{r4, r5, r7, pc}

0800449e <measurementFunction>:

// Measurement function h
MeasurementVector measurementFunction(StateVector X)
{
 800449e:	b4b0      	push	{r4, r5, r7}
 80044a0:	b099      	sub	sp, #100	@ 0x64
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	eeb0 5a40 	vmov.f32	s10, s0
 80044a8:	eef0 5a60 	vmov.f32	s11, s1
 80044ac:	eeb0 6a41 	vmov.f32	s12, s2
 80044b0:	eef0 6a61 	vmov.f32	s13, s3
 80044b4:	eeb0 7a42 	vmov.f32	s14, s4
 80044b8:	eef0 7a62 	vmov.f32	s15, s5
 80044bc:	ed87 5b06 	vstr	d5, [r7, #24]
 80044c0:	ed87 6b08 	vstr	d6, [r7, #32]
 80044c4:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    MeasurementVector Z;
    Z.x = X.x;
 80044c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Z.y = X.y;
 80044d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044d4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    Z.theta = X.theta;
 80044d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    return Z;
 80044e0:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 80044e4:	f107 0530 	add.w	r5, r7, #48	@ 0x30
 80044e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80044f0:	e884 0003 	stmia.w	r4, {r0, r1}
 80044f4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80044f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80044fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004500:	ec45 4b15 	vmov	d5, r4, r5
 8004504:	ec41 0b16 	vmov	d6, r0, r1
 8004508:	ec43 2b17 	vmov	d7, r2, r3
}
 800450c:	eeb0 0a45 	vmov.f32	s0, s10
 8004510:	eef0 0a65 	vmov.f32	s1, s11
 8004514:	eeb0 1a46 	vmov.f32	s2, s12
 8004518:	eef0 1a66 	vmov.f32	s3, s13
 800451c:	eeb0 2a47 	vmov.f32	s4, s14
 8004520:	eef0 2a67 	vmov.f32	s5, s15
 8004524:	3764      	adds	r7, #100	@ 0x64
 8004526:	46bd      	mov	sp, r7
 8004528:	bcb0      	pop	{r4, r5, r7}
 800452a:	4770      	bx	lr
 800452c:	0000      	movs	r0, r0
	...

08004530 <extendedKalmanFilter>:

// Extended Kalman Filter
EKF extendedKalmanFilter()
{
 8004530:	b5b0      	push	{r4, r5, r7, lr}
 8004532:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8004536:	af00      	add	r7, sp, #0
	EKF currentPosition;
	robotPosition position = odometry();
 8004538:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff fbcf 	bl	8003ce0 <odometry>
	double P[STATE_DIM][STATE_DIM] = {
 8004542:	4ac7      	ldr	r2, [pc, #796]	@ (8004860 <extendedKalmanFilter+0x330>)
 8004544:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004548:	4611      	mov	r1, r2
 800454a:	2248      	movs	r2, #72	@ 0x48
 800454c:	4618      	mov	r0, r3
 800454e:	f008 ff2a 	bl	800d3a6 <memcpy>
		{1.0, 0.0, 0.0},
		{0.0, 1.0, 0.0},
		{0.0, 0.0, 1.0}};

    // Prediction step
	StateVector X = {position.x_global, position.y_global, 0.0};
 8004552:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8004556:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 800455a:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 800455e:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
    StateVector X_pred = stateTransition(X);
 800456e:	ed97 5b54 	vldr	d5, [r7, #336]	@ 0x150
 8004572:	ed97 6b56 	vldr	d6, [r7, #344]	@ 0x158
 8004576:	ed97 7b58 	vldr	d7, [r7, #352]	@ 0x160
 800457a:	eeb0 0a45 	vmov.f32	s0, s10
 800457e:	eef0 0a65 	vmov.f32	s1, s11
 8004582:	eeb0 1a46 	vmov.f32	s2, s12
 8004586:	eef0 1a66 	vmov.f32	s3, s13
 800458a:	eeb0 2a47 	vmov.f32	s4, s14
 800458e:	eef0 2a67 	vmov.f32	s5, s15
 8004592:	f7ff ff27 	bl	80043e4 <stateTransition>
 8004596:	eeb0 5a40 	vmov.f32	s10, s0
 800459a:	eef0 5a60 	vmov.f32	s11, s1
 800459e:	eeb0 6a41 	vmov.f32	s12, s2
 80045a2:	eef0 6a61 	vmov.f32	s13, s3
 80045a6:	eeb0 7a42 	vmov.f32	s14, s4
 80045aa:	eef0 7a62 	vmov.f32	s15, s5
 80045ae:	ed87 5b4e 	vstr	d5, [r7, #312]	@ 0x138
 80045b2:	ed87 6b50 	vstr	d6, [r7, #320]	@ 0x140
 80045b6:	ed87 7b52 	vstr	d7, [r7, #328]	@ 0x148
    double P_pred[STATE_DIM][STATE_DIM] = {
        {P[0][0] + Q[0][0], P[0][1], P[0][2]},
 80045ba:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 80045be:	a3a6      	add	r3, pc, #664	@ (adr r3, 8004858 <extendedKalmanFilter+0x328>)
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	f7fb fe62 	bl	800028c <__adddf3>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
    double P_pred[STATE_DIM][STATE_DIM] = {
 80045cc:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80045d0:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80045d4:	e9c1 2300 	strd	r2, r3, [r1]
        {P[0][0] + Q[0][0], P[0][1], P[0][2]},
 80045d8:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
    double P_pred[STATE_DIM][STATE_DIM] = {
 80045dc:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80045e0:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80045e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        {P[0][0] + Q[0][0], P[0][1], P[0][2]},
 80045e8:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
    double P_pred[STATE_DIM][STATE_DIM] = {
 80045ec:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80045f0:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 80045f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
        {P[1][0], P[1][1] + Q[1][1], P[1][2]},
 80045f8:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
    double P_pred[STATE_DIM][STATE_DIM] = {
 80045fc:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004600:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8004604:	e9c1 2306 	strd	r2, r3, [r1, #24]
        {P[1][0], P[1][1] + Q[1][1], P[1][2]},
 8004608:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800460c:	a392      	add	r3, pc, #584	@ (adr r3, 8004858 <extendedKalmanFilter+0x328>)
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	f7fb fe3b 	bl	800028c <__adddf3>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
    double P_pred[STATE_DIM][STATE_DIM] = {
 800461a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800461e:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8004622:	e9c1 2308 	strd	r2, r3, [r1, #32]
        {P[1][0], P[1][1] + Q[1][1], P[1][2]},
 8004626:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
    double P_pred[STATE_DIM][STATE_DIM] = {
 800462a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800462e:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8004632:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        {P[2][0], P[2][1], P[2][2] + Q[2][2]}
 8004636:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
    double P_pred[STATE_DIM][STATE_DIM] = {
 800463a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800463e:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8004642:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        {P[2][0], P[2][1], P[2][2] + Q[2][2]}
 8004646:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
    double P_pred[STATE_DIM][STATE_DIM] = {
 800464a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800464e:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8004652:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        {P[2][0], P[2][1], P[2][2] + Q[2][2]}
 8004656:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 800465a:	a37f      	add	r3, pc, #508	@ (adr r3, 8004858 <extendedKalmanFilter+0x328>)
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f7fb fe14 	bl	800028c <__adddf3>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
    double P_pred[STATE_DIM][STATE_DIM] = {
 8004668:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800466c:	f5a1 71a0 	sub.w	r1, r1, #320	@ 0x140
 8004670:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    };

    // Update step
	MeasurementVector Z = {position.x_in_global, position.y_in_global, 0.0};
 8004674:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8004678:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800467c:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 8004680:	e9c1 2300 	strd	r2, r3, [r1]
 8004684:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8004688:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800468c:	f5a1 71ac 	sub.w	r1, r1, #344	@ 0x158
 8004690:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004694:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004698:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    MeasurementVector Z_pred = measurementFunction(X_pred);
 80046a8:	ed97 5b4e 	vldr	d5, [r7, #312]	@ 0x138
 80046ac:	ed97 6b50 	vldr	d6, [r7, #320]	@ 0x140
 80046b0:	ed97 7b52 	vldr	d7, [r7, #328]	@ 0x148
 80046b4:	eeb0 0a45 	vmov.f32	s0, s10
 80046b8:	eef0 0a65 	vmov.f32	s1, s11
 80046bc:	eeb0 1a46 	vmov.f32	s2, s12
 80046c0:	eef0 1a66 	vmov.f32	s3, s13
 80046c4:	eeb0 2a47 	vmov.f32	s4, s14
 80046c8:	eef0 2a67 	vmov.f32	s5, s15
 80046cc:	f7ff fee7 	bl	800449e <measurementFunction>
 80046d0:	eeb0 5a40 	vmov.f32	s10, s0
 80046d4:	eef0 5a60 	vmov.f32	s11, s1
 80046d8:	eeb0 6a41 	vmov.f32	s12, s2
 80046dc:	eef0 6a61 	vmov.f32	s13, s3
 80046e0:	eeb0 7a42 	vmov.f32	s14, s4
 80046e4:	eef0 7a62 	vmov.f32	s15, s5
 80046e8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80046ec:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80046f0:	ed83 5b00 	vstr	d5, [r3]
 80046f4:	ed83 6b02 	vstr	d6, [r3, #8]
 80046f8:	ed83 7b04 	vstr	d7, [r3, #16]
    double Y[MEASUREMENT_DIM] = {Z.x - Z_pred.x, Z.y - Z_pred.y, Z.theta - Z_pred.theta};
 80046fc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004700:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004704:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004708:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800470c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f7fb fdb8 	bl	8000288 <__aeabi_dsub>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004720:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8004724:	e9c1 2300 	strd	r2, r3, [r1]
 8004728:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800472c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004730:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004734:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004738:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800473c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004740:	f7fb fda2 	bl	8000288 <__aeabi_dsub>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800474c:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 8004750:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004754:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004758:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800475c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004760:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004764:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004768:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800476c:	f7fb fd8c 	bl	8000288 <__aeabi_dsub>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004778:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 800477c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
        {P_pred[0][0] + R[0][0], P_pred[0][1], P_pred[0][2]},
 8004780:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004784:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004788:	e9d3 0100 	ldrd	r0, r1, [r3]
 800478c:	a332      	add	r3, pc, #200	@ (adr r3, 8004858 <extendedKalmanFilter+0x328>)
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f7fb fd7b 	bl	800028c <__adddf3>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 800479a:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800479e:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 80047a2:	e9c1 2300 	strd	r2, r3, [r1]
        {P_pred[0][0] + R[0][0], P_pred[0][1], P_pred[0][2]},
 80047a6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80047aa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80047ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 80047b2:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80047b6:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 80047ba:	e9c1 2302 	strd	r2, r3, [r1, #8]
        {P_pred[0][0] + R[0][0], P_pred[0][1], P_pred[0][2]},
 80047be:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80047c2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80047c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 80047ca:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80047ce:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 80047d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
        {P_pred[1][0], P_pred[1][1] + R[1][1], P_pred[1][2]},
 80047d6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80047da:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80047de:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 80047e2:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80047e6:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 80047ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
        {P_pred[1][0], P_pred[1][1] + R[1][1], P_pred[1][2]},
 80047ee:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80047f2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80047f6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80047fa:	a317      	add	r3, pc, #92	@ (adr r3, 8004858 <extendedKalmanFilter+0x328>)
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f7fb fd44 	bl	800028c <__adddf3>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8004808:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800480c:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8004810:	e9c1 2308 	strd	r2, r3, [r1, #32]
        {P_pred[1][0], P_pred[1][1] + R[1][1], P_pred[1][2]},
 8004814:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004818:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800481c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8004820:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004824:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8004828:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        {P_pred[2][0], P_pred[2][1], P_pred[2][2] + R[2][2]}
 800482c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004830:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004834:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8004838:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800483c:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8004840:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        {P_pred[2][0], P_pred[2][1], P_pred[2][2] + R[2][2]}
 8004844:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004848:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800484c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8004850:	e008      	b.n	8004864 <extendedKalmanFilter+0x334>
 8004852:	bf00      	nop
 8004854:	f3af 8000 	nop.w
 8004858:	9999999a 	.word	0x9999999a
 800485c:	3fb99999 	.word	0x3fb99999
 8004860:	08011960 	.word	0x08011960
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 8004864:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004868:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 800486c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        {P_pred[2][0], P_pred[2][1], P_pred[2][2] + R[2][2]}
 8004870:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004874:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004878:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800487c:	f60f 33c8 	addw	r3, pc, #3016	@ 0xbc8
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	f7fb fd02 	bl	800028c <__adddf3>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
    double S[MEASUREMENT_DIM][MEASUREMENT_DIM] = {
 800488c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004890:	f5a1 71e8 	sub.w	r1, r1, #464	@ 0x1d0
 8004894:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    };
    double K[STATE_DIM][MEASUREMENT_DIM] = {
        {P_pred[0][0] / S[0][0], P_pred[0][1] / S[1][1], P_pred[0][2] / S[2][2]},
 8004898:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800489c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80048a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048a4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80048a8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f7fb ffcc 	bl	800084c <__aeabi_ddiv>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 80048b8:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80048bc:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 80048c0:	e9c1 2300 	strd	r2, r3, [r1]
        {P_pred[0][0] / S[0][0], P_pred[0][1] / S[1][1], P_pred[0][2] / S[2][2]},
 80048c4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80048c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80048cc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80048d0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80048d4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80048d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80048dc:	f7fb ffb6 	bl	800084c <__aeabi_ddiv>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 80048e4:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80048e8:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 80048ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
        {P_pred[0][0] / S[0][0], P_pred[0][1] / S[1][1], P_pred[0][2] / S[2][2]},
 80048f0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80048f4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80048f8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80048fc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004900:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004904:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004908:	f7fb ffa0 	bl	800084c <__aeabi_ddiv>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8004910:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004914:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8004918:	e9c1 2304 	strd	r2, r3, [r1, #16]
        {P_pred[1][0] / S[0][0], P_pred[1][1] / S[1][1], P_pred[1][2] / S[2][2]},
 800491c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004920:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004924:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004928:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800492c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f7fb ff8a 	bl	800084c <__aeabi_ddiv>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 800493c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004940:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8004944:	e9c1 2306 	strd	r2, r3, [r1, #24]
        {P_pred[1][0] / S[0][0], P_pred[1][1] / S[1][1], P_pred[1][2] / S[2][2]},
 8004948:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800494c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004950:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004954:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004958:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800495c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004960:	f7fb ff74 	bl	800084c <__aeabi_ddiv>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8004968:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800496c:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8004970:	e9c1 2308 	strd	r2, r3, [r1, #32]
        {P_pred[1][0] / S[0][0], P_pred[1][1] / S[1][1], P_pred[1][2] / S[2][2]},
 8004974:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004978:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800497c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8004980:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004984:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004988:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800498c:	f7fb ff5e 	bl	800084c <__aeabi_ddiv>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8004994:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004998:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 800499c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        {P_pred[2][0] / S[0][0], P_pred[2][1] / S[1][1], P_pred[2][2] / S[2][2]}
 80049a0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80049a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80049a8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80049ac:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80049b0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80049b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b8:	f7fb ff48 	bl	800084c <__aeabi_ddiv>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 80049c0:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80049c4:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 80049c8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        {P_pred[2][0] / S[0][0], P_pred[2][1] / S[1][1], P_pred[2][2] / S[2][2]}
 80049cc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80049d0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80049d4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80049d8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80049dc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80049e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049e4:	f7fb ff32 	bl	800084c <__aeabi_ddiv>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 80049ec:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80049f0:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 80049f4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        {P_pred[2][0] / S[0][0], P_pred[2][1] / S[1][1], P_pred[2][2] / S[2][2]}
 80049f8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80049fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004a00:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8004a04:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004a08:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004a0c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004a10:	f7fb ff1c 	bl	800084c <__aeabi_ddiv>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
    double K[STATE_DIM][MEASUREMENT_DIM] = {
 8004a18:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8004a1c:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8004a20:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    };

    // Update state estimate
    X.x = X_pred.x + K[0][0] * Y[0] + K[0][1] * Y[1] + K[0][2] * Y[2];
 8004a24:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8004a28:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004a2c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a34:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004a38:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f7fb fdda 	bl	80005f8 <__aeabi_dmul>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4620      	mov	r0, r4
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	f7fb fc1e 	bl	800028c <__adddf3>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4614      	mov	r4, r2
 8004a56:	461d      	mov	r5, r3
 8004a58:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004a5c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004a60:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004a64:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004a68:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004a6c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004a70:	f7fb fdc2 	bl	80005f8 <__aeabi_dmul>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4620      	mov	r0, r4
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	f7fb fc06 	bl	800028c <__adddf3>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4614      	mov	r4, r2
 8004a86:	461d      	mov	r5, r3
 8004a88:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004a8c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004a90:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004a94:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004a98:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004a9c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004aa0:	f7fb fdaa 	bl	80005f8 <__aeabi_dmul>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	4629      	mov	r1, r5
 8004aac:	f7fb fbee 	bl	800028c <__adddf3>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
    X.y = X_pred.y + K[1][0] * Y[0] + K[1][1] * Y[1] + K[1][2] * Y[2];
 8004ab8:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8004abc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004ac0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004ac4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004ac8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004acc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad4:	f7fb fd90 	bl	80005f8 <__aeabi_dmul>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4620      	mov	r0, r4
 8004ade:	4629      	mov	r1, r5
 8004ae0:	f7fb fbd4 	bl	800028c <__adddf3>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4614      	mov	r4, r2
 8004aea:	461d      	mov	r5, r3
 8004aec:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004af0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004af4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004af8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004afc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004b00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b04:	f7fb fd78 	bl	80005f8 <__aeabi_dmul>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	4629      	mov	r1, r5
 8004b10:	f7fb fbbc 	bl	800028c <__adddf3>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4614      	mov	r4, r2
 8004b1a:	461d      	mov	r5, r3
 8004b1c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004b20:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004b24:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8004b28:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004b2c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004b30:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004b34:	f7fb fd60 	bl	80005f8 <__aeabi_dmul>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	4629      	mov	r1, r5
 8004b40:	f7fb fba4 	bl	800028c <__adddf3>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
    X.theta = X_pred.theta + K[2][0] * Y[0] + K[2][1] * Y[1] + K[2][2] * Y[2];
 8004b4c:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8004b50:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004b54:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004b58:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8004b5c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004b60:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b68:	f7fb fd46 	bl	80005f8 <__aeabi_dmul>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4620      	mov	r0, r4
 8004b72:	4629      	mov	r1, r5
 8004b74:	f7fb fb8a 	bl	800028c <__adddf3>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	461d      	mov	r5, r3
 8004b80:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004b84:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004b88:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8004b8c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004b90:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004b94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b98:	f7fb fd2e 	bl	80005f8 <__aeabi_dmul>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	f7fb fb72 	bl	800028c <__adddf3>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4614      	mov	r4, r2
 8004bae:	461d      	mov	r5, r3
 8004bb0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004bb4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004bb8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8004bbc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004bc0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004bc4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004bc8:	f7fb fd16 	bl	80005f8 <__aeabi_dmul>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	f7fb fb5a 	bl	800028c <__adddf3>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160

    // Update covariance matrix
    P[0][0] = P_pred[0][0] - K[0][0] * S[0][0] * K[0][0] - K[0][1] * S[1][1] * K[0][1] - K[0][2] * S[2][2] * K[0][2];
 8004be0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004be4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004be8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004bec:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004bf0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004bf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bf8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004bfc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f7fb fcf8 	bl	80005f8 <__aeabi_dmul>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	4619      	mov	r1, r3
 8004c10:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004c14:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1c:	f7fb fcec 	bl	80005f8 <__aeabi_dmul>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4620      	mov	r0, r4
 8004c26:	4629      	mov	r1, r5
 8004c28:	f7fb fb2e 	bl	8000288 <__aeabi_dsub>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4614      	mov	r4, r2
 8004c32:	461d      	mov	r5, r3
 8004c34:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004c38:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004c3c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004c40:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004c44:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004c48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c4c:	f7fb fcd4 	bl	80005f8 <__aeabi_dmul>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004c5c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004c60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004c64:	f7fb fcc8 	bl	80005f8 <__aeabi_dmul>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	4629      	mov	r1, r5
 8004c70:	f7fb fb0a 	bl	8000288 <__aeabi_dsub>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4614      	mov	r4, r2
 8004c7a:	461d      	mov	r5, r3
 8004c7c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004c80:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004c84:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004c88:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004c8c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004c90:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004c94:	f7fb fcb0 	bl	80005f8 <__aeabi_dmul>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004ca4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004ca8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004cac:	f7fb fca4 	bl	80005f8 <__aeabi_dmul>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	f7fb fae6 	bl	8000288 <__aeabi_dsub>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
    P[0][1] = P_pred[0][1] - K[0][0] * S[0][0] * K[1][0] - K[0][1] * S[1][1] * K[1][1] - K[0][2] * S[2][2] * K[1][2];
 8004cc4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004cc8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ccc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004cd0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004cd4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cdc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004ce0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f7fb fc86 	bl	80005f8 <__aeabi_dmul>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004cf8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004cfc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004d00:	f7fb fc7a 	bl	80005f8 <__aeabi_dmul>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4620      	mov	r0, r4
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	f7fb fabc 	bl	8000288 <__aeabi_dsub>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4614      	mov	r4, r2
 8004d16:	461d      	mov	r5, r3
 8004d18:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004d1c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004d20:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004d24:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004d28:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004d2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d30:	f7fb fc62 	bl	80005f8 <__aeabi_dmul>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4610      	mov	r0, r2
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004d40:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004d44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d48:	f7fb fc56 	bl	80005f8 <__aeabi_dmul>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4620      	mov	r0, r4
 8004d52:	4629      	mov	r1, r5
 8004d54:	f7fb fa98 	bl	8000288 <__aeabi_dsub>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	461d      	mov	r5, r3
 8004d60:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004d64:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004d68:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004d6c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004d70:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004d74:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004d78:	f7fb fc3e 	bl	80005f8 <__aeabi_dmul>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4610      	mov	r0, r2
 8004d82:	4619      	mov	r1, r3
 8004d84:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004d88:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004d8c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004d90:	f7fb fc32 	bl	80005f8 <__aeabi_dmul>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4620      	mov	r0, r4
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	f7fb fa74 	bl	8000288 <__aeabi_dsub>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
    P[0][2] = P_pred[0][2] - K[0][0] * S[0][0] * K[2][0] - K[0][1] * S[1][1] * K[2][1] - K[0][2] * S[2][2] * K[2][2];
 8004da8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004dac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004db0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004db4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004db8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004dbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dc0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004dc4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	f7fb fc14 	bl	80005f8 <__aeabi_dmul>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004ddc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004de0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004de4:	f7fb fc08 	bl	80005f8 <__aeabi_dmul>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4620      	mov	r0, r4
 8004dee:	4629      	mov	r1, r5
 8004df0:	f7fb fa4a 	bl	8000288 <__aeabi_dsub>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4614      	mov	r4, r2
 8004dfa:	461d      	mov	r5, r3
 8004dfc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004e00:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004e04:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004e08:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004e0c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004e10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e14:	f7fb fbf0 	bl	80005f8 <__aeabi_dmul>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	4619      	mov	r1, r3
 8004e20:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004e24:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004e28:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8004e2c:	f7fb fbe4 	bl	80005f8 <__aeabi_dmul>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4620      	mov	r0, r4
 8004e36:	4629      	mov	r1, r5
 8004e38:	f7fb fa26 	bl	8000288 <__aeabi_dsub>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4614      	mov	r4, r2
 8004e42:	461d      	mov	r5, r3
 8004e44:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004e48:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004e4c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004e50:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004e54:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004e58:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004e5c:	f7fb fbcc 	bl	80005f8 <__aeabi_dmul>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4610      	mov	r0, r2
 8004e66:	4619      	mov	r1, r3
 8004e68:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004e6c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004e70:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004e74:	f7fb fbc0 	bl	80005f8 <__aeabi_dmul>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	4629      	mov	r1, r5
 8004e80:	f7fb fa02 	bl	8000288 <__aeabi_dsub>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
    P[1][0] = P_pred[1][0] - K[1][0] * S[0][0] * K[0][0] - K[1][1] * S[1][1] * K[0][1] - K[1][2] * S[2][2] * K[0][2];
 8004e8c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004e90:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004e94:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004e98:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004e9c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004ea0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004ea4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004ea8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	f7fb fba2 	bl	80005f8 <__aeabi_dmul>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4610      	mov	r0, r2
 8004eba:	4619      	mov	r1, r3
 8004ebc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004ec0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f7fb fb96 	bl	80005f8 <__aeabi_dmul>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	f7fb f9d8 	bl	8000288 <__aeabi_dsub>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4614      	mov	r4, r2
 8004ede:	461d      	mov	r5, r3
 8004ee0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004ee4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004ee8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004eec:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004ef0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004ef4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ef8:	f7fb fb7e 	bl	80005f8 <__aeabi_dmul>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4610      	mov	r0, r2
 8004f02:	4619      	mov	r1, r3
 8004f04:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004f08:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004f0c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004f10:	f7fb fb72 	bl	80005f8 <__aeabi_dmul>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4620      	mov	r0, r4
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	f7fb f9b4 	bl	8000288 <__aeabi_dsub>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4614      	mov	r4, r2
 8004f26:	461d      	mov	r5, r3
 8004f28:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004f2c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004f30:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8004f34:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004f38:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004f3c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004f40:	f7fb fb5a 	bl	80005f8 <__aeabi_dmul>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004f50:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004f54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004f58:	f7fb fb4e 	bl	80005f8 <__aeabi_dmul>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4620      	mov	r0, r4
 8004f62:	4629      	mov	r1, r5
 8004f64:	f7fb f990 	bl	8000288 <__aeabi_dsub>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
    P[1][1] = P_pred[1][1] - K[1][0] * S[0][0] * K[1][0] - K[1][1] * S[1][1] * K[1][1] - K[1][2] * S[2][2] * K[1][2];
 8004f70:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004f74:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004f78:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8004f7c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004f80:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004f84:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004f88:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004f8c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f7fb fb30 	bl	80005f8 <__aeabi_dmul>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004fa4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004fa8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004fac:	f7fb fb24 	bl	80005f8 <__aeabi_dmul>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	f7fb f966 	bl	8000288 <__aeabi_dsub>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4614      	mov	r4, r2
 8004fc2:	461d      	mov	r5, r3
 8004fc4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004fc8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004fcc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004fd0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004fd4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004fd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fdc:	f7fb fb0c 	bl	80005f8 <__aeabi_dmul>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8004fec:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004ff0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ff4:	f7fb fb00 	bl	80005f8 <__aeabi_dmul>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	4629      	mov	r1, r5
 8005000:	f7fb f942 	bl	8000288 <__aeabi_dsub>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4614      	mov	r4, r2
 800500a:	461d      	mov	r5, r3
 800500c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005010:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005014:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8005018:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800501c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005020:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005024:	f7fb fae8 	bl	80005f8 <__aeabi_dmul>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4610      	mov	r0, r2
 800502e:	4619      	mov	r1, r3
 8005030:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005034:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005038:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800503c:	f7fb fadc 	bl	80005f8 <__aeabi_dmul>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4620      	mov	r0, r4
 8005046:	4629      	mov	r1, r5
 8005048:	f7fb f91e 	bl	8000288 <__aeabi_dsub>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
    P[1][2] = P_pred[1][2] - K[1][0] * S[0][0] * K[2][0] - K[1][1] * S[1][1] * K[2][1] - K[1][2] * S[2][2] * K[2][2];
 8005054:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005058:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800505c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8005060:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005064:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005068:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800506c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005070:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	f7fb fabe 	bl	80005f8 <__aeabi_dmul>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4610      	mov	r0, r2
 8005082:	4619      	mov	r1, r3
 8005084:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005088:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800508c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005090:	f7fb fab2 	bl	80005f8 <__aeabi_dmul>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4620      	mov	r0, r4
 800509a:	4629      	mov	r1, r5
 800509c:	f7fb f8f4 	bl	8000288 <__aeabi_dsub>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4614      	mov	r4, r2
 80050a6:	461d      	mov	r5, r3
 80050a8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80050ac:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80050b0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80050b4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80050b8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80050bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050c0:	f7fb fa9a 	bl	80005f8 <__aeabi_dmul>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4610      	mov	r0, r2
 80050ca:	4619      	mov	r1, r3
 80050cc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80050d0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80050d4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80050d8:	f7fb fa8e 	bl	80005f8 <__aeabi_dmul>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4620      	mov	r0, r4
 80050e2:	4629      	mov	r1, r5
 80050e4:	f7fb f8d0 	bl	8000288 <__aeabi_dsub>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4614      	mov	r4, r2
 80050ee:	461d      	mov	r5, r3
 80050f0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80050f4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80050f8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80050fc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005100:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005104:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005108:	f7fb fa76 	bl	80005f8 <__aeabi_dmul>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4610      	mov	r0, r2
 8005112:	4619      	mov	r1, r3
 8005114:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005118:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800511c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005120:	f7fb fa6a 	bl	80005f8 <__aeabi_dmul>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4620      	mov	r0, r4
 800512a:	4629      	mov	r1, r5
 800512c:	f7fb f8ac 	bl	8000288 <__aeabi_dsub>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
    P[2][0] = P_pred[2][0] - K[2][0] * S[0][0] * K[0][0] - K[2][1] * S[1][1] * K[0][1] - K[2][2] * S[2][2] * K[0][2];
 8005138:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800513c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005140:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8005144:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005148:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800514c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8005150:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005154:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f7fb fa4c 	bl	80005f8 <__aeabi_dmul>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4610      	mov	r0, r2
 8005166:	4619      	mov	r1, r3
 8005168:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800516c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	f7fb fa40 	bl	80005f8 <__aeabi_dmul>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4620      	mov	r0, r4
 800517e:	4629      	mov	r1, r5
 8005180:	f7fb f882 	bl	8000288 <__aeabi_dsub>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4614      	mov	r4, r2
 800518a:	461d      	mov	r5, r3
 800518c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005190:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005194:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8005198:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800519c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80051a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051a4:	f7fb fa28 	bl	80005f8 <__aeabi_dmul>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4610      	mov	r0, r2
 80051ae:	4619      	mov	r1, r3
 80051b0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80051b4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80051b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80051bc:	f7fb fa1c 	bl	80005f8 <__aeabi_dmul>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4620      	mov	r0, r4
 80051c6:	4629      	mov	r1, r5
 80051c8:	f7fb f85e 	bl	8000288 <__aeabi_dsub>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4614      	mov	r4, r2
 80051d2:	461d      	mov	r5, r3
 80051d4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80051d8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80051dc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80051e0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80051e4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80051e8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80051ec:	f7fb fa04 	bl	80005f8 <__aeabi_dmul>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4610      	mov	r0, r2
 80051f6:	4619      	mov	r1, r3
 80051f8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80051fc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005200:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005204:	f7fb f9f8 	bl	80005f8 <__aeabi_dmul>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4620      	mov	r0, r4
 800520e:	4629      	mov	r1, r5
 8005210:	f7fb f83a 	bl	8000288 <__aeabi_dsub>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
    P[2][1] = P_pred[2][1] - K[2][0] * S[0][0] * K[1][0] - K[2][1] * S[1][1] * K[1][1] - K[2][2] * S[2][2] * K[1][2];
 800521c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005220:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005224:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8005228:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800522c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005230:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8005234:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005238:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	f7fb f9da 	bl	80005f8 <__aeabi_dmul>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4610      	mov	r0, r2
 800524a:	4619      	mov	r1, r3
 800524c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005250:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005254:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005258:	f7fb f9ce 	bl	80005f8 <__aeabi_dmul>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4620      	mov	r0, r4
 8005262:	4629      	mov	r1, r5
 8005264:	f7fb f810 	bl	8000288 <__aeabi_dsub>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4614      	mov	r4, r2
 800526e:	461d      	mov	r5, r3
 8005270:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005274:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005278:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800527c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005280:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005284:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005288:	f7fb f9b6 	bl	80005f8 <__aeabi_dmul>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4610      	mov	r0, r2
 8005292:	4619      	mov	r1, r3
 8005294:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005298:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800529c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052a0:	f7fb f9aa 	bl	80005f8 <__aeabi_dmul>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4620      	mov	r0, r4
 80052aa:	4629      	mov	r1, r5
 80052ac:	f7fa ffec 	bl	8000288 <__aeabi_dsub>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4614      	mov	r4, r2
 80052b6:	461d      	mov	r5, r3
 80052b8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80052bc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80052c0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80052c4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80052c8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80052cc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80052d0:	f7fb f992 	bl	80005f8 <__aeabi_dmul>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4610      	mov	r0, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80052e0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80052e4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80052e8:	f7fb f986 	bl	80005f8 <__aeabi_dmul>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4620      	mov	r0, r4
 80052f2:	4629      	mov	r1, r5
 80052f4:	f7fa ffc8 	bl	8000288 <__aeabi_dsub>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
    P[2][2] = P_pred[2][2] - K[2][0] * S[0][0] * K[2][0] - K[2][1] * S[1][1] * K[2][1] - K[2][2] * S[2][2] * K[2][2];
 8005300:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005304:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005308:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 800530c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005310:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005314:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8005318:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800531c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f7fb f968 	bl	80005f8 <__aeabi_dmul>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005334:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005338:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800533c:	f7fb f95c 	bl	80005f8 <__aeabi_dmul>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4620      	mov	r0, r4
 8005346:	4629      	mov	r1, r5
 8005348:	f7fa ff9e 	bl	8000288 <__aeabi_dsub>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4614      	mov	r4, r2
 8005352:	461d      	mov	r5, r3
 8005354:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005358:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800535c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8005360:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8005364:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005368:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800536c:	f7fb f944 	bl	80005f8 <__aeabi_dmul>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4610      	mov	r0, r2
 8005376:	4619      	mov	r1, r3
 8005378:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800537c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005380:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005384:	f7fb f938 	bl	80005f8 <__aeabi_dmul>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4620      	mov	r0, r4
 800538e:	4629      	mov	r1, r5
 8005390:	f7fa ff7a 	bl	8000288 <__aeabi_dsub>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4614      	mov	r4, r2
 800539a:	461d      	mov	r5, r3
 800539c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80053a0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80053a4:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80053a8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80053ac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80053b0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80053b4:	f7fb f920 	bl	80005f8 <__aeabi_dmul>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4610      	mov	r0, r2
 80053be:	4619      	mov	r1, r3
 80053c0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80053c4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80053c8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80053cc:	f7fb f914 	bl	80005f8 <__aeabi_dmul>
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	4620      	mov	r0, r4
 80053d6:	4629      	mov	r1, r5
 80053d8:	f7fa ff56 	bl	8000288 <__aeabi_dsub>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	e9c7 236a 	strd	r2, r3, [r7, #424]	@ 0x1a8

    currentPosition.x = X.x;
 80053e4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80053e8:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
    currentPosition.y = X.y;
 80053ec:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 80053f0:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
    currentPosition.h = position.h;
 80053f4:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 80053f8:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210

    return currentPosition;
 80053fc:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 8005400:	f507 7500 	add.w	r5, r7, #512	@ 0x200
 8005404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005408:	e895 0003 	ldmia.w	r5, {r0, r1}
 800540c:	e884 0003 	stmia.w	r4, {r0, r1}
 8005410:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8005414:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8005418:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 800541c:	ec45 4b15 	vmov	d5, r4, r5
 8005420:	ec41 0b16 	vmov	d6, r0, r1
 8005424:	ec43 2b17 	vmov	d7, r2, r3
}
 8005428:	eeb0 0a45 	vmov.f32	s0, s10
 800542c:	eef0 0a65 	vmov.f32	s1, s11
 8005430:	eeb0 1a46 	vmov.f32	s2, s12
 8005434:	eef0 1a66 	vmov.f32	s3, s13
 8005438:	eeb0 2a47 	vmov.f32	s4, s14
 800543c:	eef0 2a67 	vmov.f32	s5, s15
 8005440:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8005444:	46bd      	mov	sp, r7
 8005446:	bdb0      	pop	{r4, r5, r7, pc}
 8005448:	9999999a 	.word	0x9999999a
 800544c:	3fb99999 	.word	0x3fb99999

08005450 <displayPosition>:
	sprintf(buffer, "E3:%d", counter3);
	lcd_write_string(buffer);
}

void displayPosition(robotPosition position, uint8_t type)
{
 8005450:	b084      	sub	sp, #16
 8005452:	b580      	push	{r7, lr}
 8005454:	af00      	add	r7, sp, #0
 8005456:	f107 0c08 	add.w	ip, r7, #8
 800545a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch (type)
 800545e:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8005462:	3b01      	subs	r3, #1
 8005464:	2b03      	cmp	r3, #3
 8005466:	d877      	bhi.n	8005558 <displayPosition+0x108>
 8005468:	a201      	add	r2, pc, #4	@ (adr r2, 8005470 <displayPosition+0x20>)
 800546a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546e:	bf00      	nop
 8005470:	08005481 	.word	0x08005481
 8005474:	080054b7 	.word	0x080054b7
 8005478:	080054ed 	.word	0x080054ed
 800547c:	08005523 	.word	0x08005523
	{
		case global:
			lcd_set_cursor(0, 0);
 8005480:	2100      	movs	r1, #0
 8005482:	2000      	movs	r0, #0
 8005484:	f7fc fca8 	bl	8001dd8 <lcd_set_cursor>
			sprintf(buffer, "X:%.2f", position.x_global);
 8005488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800548c:	494a      	ldr	r1, [pc, #296]	@ (80055b8 <displayPosition+0x168>)
 800548e:	484b      	ldr	r0, [pc, #300]	@ (80055bc <displayPosition+0x16c>)
 8005490:	f007 fe38 	bl	800d104 <siprintf>
			lcd_write_string(buffer);
 8005494:	4849      	ldr	r0, [pc, #292]	@ (80055bc <displayPosition+0x16c>)
 8005496:	f7fc fc89 	bl	8001dac <lcd_write_string>
			lcd_set_cursor(1, 0);
 800549a:	2100      	movs	r1, #0
 800549c:	2001      	movs	r0, #1
 800549e:	f7fc fc9b 	bl	8001dd8 <lcd_set_cursor>
			sprintf(buffer, "Y:%.2f", position.y_global);
 80054a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80054a6:	4946      	ldr	r1, [pc, #280]	@ (80055c0 <displayPosition+0x170>)
 80054a8:	4844      	ldr	r0, [pc, #272]	@ (80055bc <displayPosition+0x16c>)
 80054aa:	f007 fe2b 	bl	800d104 <siprintf>
			lcd_write_string(buffer);
 80054ae:	4843      	ldr	r0, [pc, #268]	@ (80055bc <displayPosition+0x16c>)
 80054b0:	f7fc fc7c 	bl	8001dac <lcd_write_string>
			break;
 80054b4:	e050      	b.n	8005558 <displayPosition+0x108>
		case local:
			lcd_set_cursor(0, 0);
 80054b6:	2100      	movs	r1, #0
 80054b8:	2000      	movs	r0, #0
 80054ba:	f7fc fc8d 	bl	8001dd8 <lcd_set_cursor>
			sprintf(buffer, "X:%.2f", position.x_local);
 80054be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054c2:	493d      	ldr	r1, [pc, #244]	@ (80055b8 <displayPosition+0x168>)
 80054c4:	483d      	ldr	r0, [pc, #244]	@ (80055bc <displayPosition+0x16c>)
 80054c6:	f007 fe1d 	bl	800d104 <siprintf>
			lcd_write_string(buffer);
 80054ca:	483c      	ldr	r0, [pc, #240]	@ (80055bc <displayPosition+0x16c>)
 80054cc:	f7fc fc6e 	bl	8001dac <lcd_write_string>
			lcd_set_cursor(1, 0);
 80054d0:	2100      	movs	r1, #0
 80054d2:	2001      	movs	r0, #1
 80054d4:	f7fc fc80 	bl	8001dd8 <lcd_set_cursor>
			sprintf(buffer, "Y:%.2f", position.y_local);
 80054d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054dc:	4938      	ldr	r1, [pc, #224]	@ (80055c0 <displayPosition+0x170>)
 80054de:	4837      	ldr	r0, [pc, #220]	@ (80055bc <displayPosition+0x16c>)
 80054e0:	f007 fe10 	bl	800d104 <siprintf>
			lcd_write_string(buffer);
 80054e4:	4835      	ldr	r0, [pc, #212]	@ (80055bc <displayPosition+0x16c>)
 80054e6:	f7fc fc61 	bl	8001dac <lcd_write_string>
			break;
 80054ea:	e035      	b.n	8005558 <displayPosition+0x108>
		case in_global:
			lcd_set_cursor(0, 0);
 80054ec:	2100      	movs	r1, #0
 80054ee:	2000      	movs	r0, #0
 80054f0:	f7fc fc72 	bl	8001dd8 <lcd_set_cursor>
			sprintf(buffer, "X:%.2f", position.x_in_global);
 80054f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80054f8:	492f      	ldr	r1, [pc, #188]	@ (80055b8 <displayPosition+0x168>)
 80054fa:	4830      	ldr	r0, [pc, #192]	@ (80055bc <displayPosition+0x16c>)
 80054fc:	f007 fe02 	bl	800d104 <siprintf>
			lcd_write_string(buffer);
 8005500:	482e      	ldr	r0, [pc, #184]	@ (80055bc <displayPosition+0x16c>)
 8005502:	f7fc fc53 	bl	8001dac <lcd_write_string>
			lcd_set_cursor(1, 0);
 8005506:	2100      	movs	r1, #0
 8005508:	2001      	movs	r0, #1
 800550a:	f7fc fc65 	bl	8001dd8 <lcd_set_cursor>
			sprintf(buffer, "Y:%.2f", position.y_in_global);
 800550e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005512:	492b      	ldr	r1, [pc, #172]	@ (80055c0 <displayPosition+0x170>)
 8005514:	4829      	ldr	r0, [pc, #164]	@ (80055bc <displayPosition+0x16c>)
 8005516:	f007 fdf5 	bl	800d104 <siprintf>
			lcd_write_string(buffer);
 800551a:	4828      	ldr	r0, [pc, #160]	@ (80055bc <displayPosition+0x16c>)
 800551c:	f7fc fc46 	bl	8001dac <lcd_write_string>
			break;
 8005520:	e01a      	b.n	8005558 <displayPosition+0x108>
		case in_local:
			lcd_set_cursor(0, 0);
 8005522:	2100      	movs	r1, #0
 8005524:	2000      	movs	r0, #0
 8005526:	f7fc fc57 	bl	8001dd8 <lcd_set_cursor>
			sprintf(buffer, "X:%.2f", position.x_in_local);
 800552a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800552e:	4922      	ldr	r1, [pc, #136]	@ (80055b8 <displayPosition+0x168>)
 8005530:	4822      	ldr	r0, [pc, #136]	@ (80055bc <displayPosition+0x16c>)
 8005532:	f007 fde7 	bl	800d104 <siprintf>
			lcd_write_string(buffer);
 8005536:	4821      	ldr	r0, [pc, #132]	@ (80055bc <displayPosition+0x16c>)
 8005538:	f7fc fc38 	bl	8001dac <lcd_write_string>
			lcd_set_cursor(1, 0);
 800553c:	2100      	movs	r1, #0
 800553e:	2001      	movs	r0, #1
 8005540:	f7fc fc4a 	bl	8001dd8 <lcd_set_cursor>
			sprintf(buffer, "Y:%.2f", position.y_in_local);
 8005544:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005548:	491d      	ldr	r1, [pc, #116]	@ (80055c0 <displayPosition+0x170>)
 800554a:	481c      	ldr	r0, [pc, #112]	@ (80055bc <displayPosition+0x16c>)
 800554c:	f007 fdda 	bl	800d104 <siprintf>
			lcd_write_string(buffer);
 8005550:	481a      	ldr	r0, [pc, #104]	@ (80055bc <displayPosition+0x16c>)
 8005552:	f7fc fc2b 	bl	8001dac <lcd_write_string>
			break;
 8005556:	bf00      	nop
	}
	lcd_set_cursor(2, 0);
 8005558:	2100      	movs	r1, #0
 800555a:	2002      	movs	r0, #2
 800555c:	f7fc fc3c 	bl	8001dd8 <lcd_set_cursor>
	sprintf(buffer, "Yaw:%.2f", position.h);
 8005560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005564:	4917      	ldr	r1, [pc, #92]	@ (80055c4 <displayPosition+0x174>)
 8005566:	4815      	ldr	r0, [pc, #84]	@ (80055bc <displayPosition+0x16c>)
 8005568:	f007 fdcc 	bl	800d104 <siprintf>
	lcd_write_string(buffer);
 800556c:	4813      	ldr	r0, [pc, #76]	@ (80055bc <displayPosition+0x16c>)
 800556e:	f7fc fc1d 	bl	8001dac <lcd_write_string>
	lcd_set_cursor(3, 0);
 8005572:	2100      	movs	r1, #0
 8005574:	2003      	movs	r0, #3
 8005576:	f7fc fc2f 	bl	8001dd8 <lcd_set_cursor>
	sprintf(buffer, "P:%.2f", sensorData[1]);
 800557a:	4b13      	ldr	r3, [pc, #76]	@ (80055c8 <displayPosition+0x178>)
 800557c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005580:	4912      	ldr	r1, [pc, #72]	@ (80055cc <displayPosition+0x17c>)
 8005582:	480e      	ldr	r0, [pc, #56]	@ (80055bc <displayPosition+0x16c>)
 8005584:	f007 fdbe 	bl	800d104 <siprintf>
	lcd_write_string(buffer);
 8005588:	480c      	ldr	r0, [pc, #48]	@ (80055bc <displayPosition+0x16c>)
 800558a:	f7fc fc0f 	bl	8001dac <lcd_write_string>
	lcd_set_cursor(3, 10);
 800558e:	210a      	movs	r1, #10
 8005590:	2003      	movs	r0, #3
 8005592:	f7fc fc21 	bl	8001dd8 <lcd_set_cursor>
	sprintf(buffer, "R:%.2f", sensorData[2]);
 8005596:	4b0c      	ldr	r3, [pc, #48]	@ (80055c8 <displayPosition+0x178>)
 8005598:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800559c:	490c      	ldr	r1, [pc, #48]	@ (80055d0 <displayPosition+0x180>)
 800559e:	4807      	ldr	r0, [pc, #28]	@ (80055bc <displayPosition+0x16c>)
 80055a0:	f007 fdb0 	bl	800d104 <siprintf>
	lcd_write_string(buffer);
 80055a4:	4805      	ldr	r0, [pc, #20]	@ (80055bc <displayPosition+0x16c>)
 80055a6:	f7fc fc01 	bl	8001dac <lcd_write_string>
}
 80055aa:	bf00      	nop
 80055ac:	46bd      	mov	sp, r7
 80055ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055b2:	b004      	add	sp, #16
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	080119a8 	.word	0x080119a8
 80055bc:	2000063c 	.word	0x2000063c
 80055c0:	080119b0 	.word	0x080119b0
 80055c4:	080119b8 	.word	0x080119b8
 80055c8:	20000528 	.word	0x20000528
 80055cc:	08011a34 	.word	0x08011a34
 80055d0:	08011a3c 	.word	0x08011a3c
 80055d4:	00000000 	.word	0x00000000

080055d8 <PID_controller>:
/* Variable for PID*/
double integral = 0.0, derivative = 0.0, prev_error = 0.0;
/* END */

double PID_controller(double setpoint, double actual_position, double Kp, double Ki, double Kd)
{
 80055d8:	b5b0      	push	{r4, r5, r7, lr}
 80055da:	b090      	sub	sp, #64	@ 0x40
 80055dc:	af00      	add	r7, sp, #0
 80055de:	ed87 0b08 	vstr	d0, [r7, #32]
 80055e2:	ed87 1b06 	vstr	d1, [r7, #24]
 80055e6:	ed87 2b04 	vstr	d2, [r7, #16]
 80055ea:	ed87 3b02 	vstr	d3, [r7, #8]
 80055ee:	ed87 4b00 	vstr	d4, [r7]
	double dt = 0.01;
 80055f2:	a33c      	add	r3, pc, #240	@ (adr r3, 80056e4 <PID_controller+0x10c>)
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    // Proportional
    double error = setpoint - actual_position;
 80055fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005600:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005604:	f7fa fe40 	bl	8000288 <__aeabi_dsub>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

//    if(fabs(error) < 200) error = 0;

    // Integral
    integral += error * dt;
 8005610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005614:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8005618:	f7fa ffee 	bl	80005f8 <__aeabi_dmul>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	4b2c      	ldr	r3, [pc, #176]	@ (80056d8 <PID_controller+0x100>)
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	f7fa fe2f 	bl	800028c <__adddf3>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4929      	ldr	r1, [pc, #164]	@ (80056d8 <PID_controller+0x100>)
 8005634:	e9c1 2300 	strd	r2, r3, [r1]

    // Derivative
	derivative = (error - prev_error) / dt;
 8005638:	4b28      	ldr	r3, [pc, #160]	@ (80056dc <PID_controller+0x104>)
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8005642:	f7fa fe21 	bl	8000288 <__aeabi_dsub>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4610      	mov	r0, r2
 800564c:	4619      	mov	r1, r3
 800564e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005652:	f7fb f8fb 	bl	800084c <__aeabi_ddiv>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4921      	ldr	r1, [pc, #132]	@ (80056e0 <PID_controller+0x108>)
 800565c:	e9c1 2300 	strd	r2, r3, [r1]

    double output = Kp * error + Ki * integral + Kd * derivative;
 8005660:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005664:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005668:	f7fa ffc6 	bl	80005f8 <__aeabi_dmul>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4614      	mov	r4, r2
 8005672:	461d      	mov	r5, r3
 8005674:	4b18      	ldr	r3, [pc, #96]	@ (80056d8 <PID_controller+0x100>)
 8005676:	e9d3 0100 	ldrd	r0, r1, [r3]
 800567a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800567e:	f7fa ffbb 	bl	80005f8 <__aeabi_dmul>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4620      	mov	r0, r4
 8005688:	4629      	mov	r1, r5
 800568a:	f7fa fdff 	bl	800028c <__adddf3>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4614      	mov	r4, r2
 8005694:	461d      	mov	r5, r3
 8005696:	4b12      	ldr	r3, [pc, #72]	@ (80056e0 <PID_controller+0x108>)
 8005698:	e9d3 0100 	ldrd	r0, r1, [r3]
 800569c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056a0:	f7fa ffaa 	bl	80005f8 <__aeabi_dmul>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4620      	mov	r0, r4
 80056aa:	4629      	mov	r1, r5
 80056ac:	f7fa fdee 	bl	800028c <__adddf3>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    prev_error = error;
 80056b8:	4908      	ldr	r1, [pc, #32]	@ (80056dc <PID_controller+0x104>)
 80056ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80056be:	e9c1 2300 	strd	r2, r3, [r1]

    return output;
 80056c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056c6:	ec43 2b17 	vmov	d7, r2, r3
}
 80056ca:	eeb0 0a47 	vmov.f32	s0, s14
 80056ce:	eef0 0a67 	vmov.f32	s1, s15
 80056d2:	3740      	adds	r7, #64	@ 0x40
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bdb0      	pop	{r4, r5, r7, pc}
 80056d8:	20000680 	.word	0x20000680
 80056dc:	20000690 	.word	0x20000690
 80056e0:	20000688 	.word	0x20000688
 80056e4:	47ae147b 	.word	0x47ae147b
 80056e8:	3f847ae1 	.word	0x3f847ae1

080056ec <PID_controllerH>:

double PID_controllerH(double setpoint, double actual_position, double Kp)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08a      	sub	sp, #40	@ 0x28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	ed87 0b04 	vstr	d0, [r7, #16]
 80056f6:	ed87 1b02 	vstr	d1, [r7, #8]
 80056fa:	ed87 2b00 	vstr	d2, [r7]
	double error = setpoint - actual_position;
 80056fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005702:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005706:	f7fa fdbf 	bl	8000288 <__aeabi_dsub>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if(error > 180)
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	4b1f      	ldr	r3, [pc, #124]	@ (8005794 <PID_controllerH+0xa8>)
 8005718:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800571c:	f7fb f9fc 	bl	8000b18 <__aeabi_dcmpgt>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00b      	beq.n	800573e <PID_controllerH+0x52>
	{
		error -= 360;
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	4b1b      	ldr	r3, [pc, #108]	@ (8005798 <PID_controllerH+0xac>)
 800572c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005730:	f7fa fdaa 	bl	8000288 <__aeabi_dsub>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800573c:	e014      	b.n	8005768 <PID_controllerH+0x7c>
	}
	else if(error < -180)
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	4b16      	ldr	r3, [pc, #88]	@ (800579c <PID_controllerH+0xb0>)
 8005744:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005748:	f7fb f9c8 	bl	8000adc <__aeabi_dcmplt>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <PID_controllerH+0x7c>
	{
		error += 360;
 8005752:	f04f 0200 	mov.w	r2, #0
 8005756:	4b10      	ldr	r3, [pc, #64]	@ (8005798 <PID_controllerH+0xac>)
 8005758:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800575c:	f7fa fd96 	bl	800028c <__adddf3>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

//	if(fabs(error) < 1) error = 0;

    // Proportional
	double P = Kp * error;
 8005768:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800576c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005770:	f7fa ff42 	bl	80005f8 <__aeabi_dmul>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return P;
 800577c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005780:	ec43 2b17 	vmov	d7, r2, r3
}
 8005784:	eeb0 0a47 	vmov.f32	s0, s14
 8005788:	eef0 0a67 	vmov.f32	s1, s15
 800578c:	3728      	adds	r7, #40	@ 0x28
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40668000 	.word	0x40668000
 8005798:	40768000 	.word	0x40768000
 800579c:	c0668000 	.word	0xc0668000

080057a0 <map>:
uint8_t lookingMode = 1;

Silo silos[MAX_SILOS];

int map(int st1, int fn1, int st2, int fn2, int value)
{
 80057a0:	b5b0      	push	{r4, r5, r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
    return (1.0 * (value - st1)) / ((fn1 - st1) * 1.0) * (fn2 - st2) + st2;
 80057ae:	6a3a      	ldr	r2, [r7, #32]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fa feb5 	bl	8000524 <__aeabi_i2d>
 80057ba:	4604      	mov	r4, r0
 80057bc:	460d      	mov	r5, r1
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fa fead 	bl	8000524 <__aeabi_i2d>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	4620      	mov	r0, r4
 80057d0:	4629      	mov	r1, r5
 80057d2:	f7fb f83b 	bl	800084c <__aeabi_ddiv>
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	4614      	mov	r4, r2
 80057dc:	461d      	mov	r5, r3
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fa fe9d 	bl	8000524 <__aeabi_i2d>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4620      	mov	r0, r4
 80057f0:	4629      	mov	r1, r5
 80057f2:	f7fa ff01 	bl	80005f8 <__aeabi_dmul>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	4614      	mov	r4, r2
 80057fc:	461d      	mov	r5, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fa fe90 	bl	8000524 <__aeabi_i2d>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4620      	mov	r0, r4
 800580a:	4629      	mov	r1, r5
 800580c:	f7fa fd3e 	bl	800028c <__adddf3>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	4610      	mov	r0, r2
 8005816:	4619      	mov	r1, r3
 8005818:	f7fb f99e 	bl	8000b58 <__aeabi_d2iz>
 800581c:	4603      	mov	r3, r0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005828 <smoothVelocity>:
    }
    return target;
}

void smoothVelocity(double* Vx, double* Vy, double* W, double smoothingFactor)
{
 8005828:	b5b0      	push	{r4, r5, r7, lr}
 800582a:	b08c      	sub	sp, #48	@ 0x30
 800582c:	af00      	add	r7, sp, #0
 800582e:	6178      	str	r0, [r7, #20]
 8005830:	6139      	str	r1, [r7, #16]
 8005832:	60fa      	str	r2, [r7, #12]
 8005834:	ed87 0b00 	vstr	d0, [r7]
	double prevVx = 0.0;
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double prevVy = 0.0;
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double prevW = 0.0;
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *Vx = (1.0 - smoothingFactor) * prevVx + smoothingFactor * (*Vx);
 800585c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005860:	f04f 0000 	mov.w	r0, #0
 8005864:	493e      	ldr	r1, [pc, #248]	@ (8005960 <smoothVelocity+0x138>)
 8005866:	f7fa fd0f 	bl	8000288 <__aeabi_dsub>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4610      	mov	r0, r2
 8005870:	4619      	mov	r1, r3
 8005872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005876:	f7fa febf 	bl	80005f8 <__aeabi_dmul>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4614      	mov	r4, r2
 8005880:	461d      	mov	r5, r3
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800588c:	f7fa feb4 	bl	80005f8 <__aeabi_dmul>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4620      	mov	r0, r4
 8005896:	4629      	mov	r1, r5
 8005898:	f7fa fcf8 	bl	800028c <__adddf3>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	6979      	ldr	r1, [r7, #20]
 80058a2:	e9c1 2300 	strd	r2, r3, [r1]
    *Vy = (1.0 - smoothingFactor) * prevVy + smoothingFactor * (*Vy);
 80058a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058aa:	f04f 0000 	mov.w	r0, #0
 80058ae:	492c      	ldr	r1, [pc, #176]	@ (8005960 <smoothVelocity+0x138>)
 80058b0:	f7fa fcea 	bl	8000288 <__aeabi_dsub>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4610      	mov	r0, r2
 80058ba:	4619      	mov	r1, r3
 80058bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058c0:	f7fa fe9a 	bl	80005f8 <__aeabi_dmul>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4614      	mov	r4, r2
 80058ca:	461d      	mov	r5, r3
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058d6:	f7fa fe8f 	bl	80005f8 <__aeabi_dmul>
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	4620      	mov	r0, r4
 80058e0:	4629      	mov	r1, r5
 80058e2:	f7fa fcd3 	bl	800028c <__adddf3>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	6939      	ldr	r1, [r7, #16]
 80058ec:	e9c1 2300 	strd	r2, r3, [r1]
    *W = (1.0 - smoothingFactor) * prevW + smoothingFactor * (*W);
 80058f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058f4:	f04f 0000 	mov.w	r0, #0
 80058f8:	4919      	ldr	r1, [pc, #100]	@ (8005960 <smoothVelocity+0x138>)
 80058fa:	f7fa fcc5 	bl	8000288 <__aeabi_dsub>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4610      	mov	r0, r2
 8005904:	4619      	mov	r1, r3
 8005906:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800590a:	f7fa fe75 	bl	80005f8 <__aeabi_dmul>
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	4614      	mov	r4, r2
 8005914:	461d      	mov	r5, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	e9d3 0100 	ldrd	r0, r1, [r3]
 800591c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005920:	f7fa fe6a 	bl	80005f8 <__aeabi_dmul>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4620      	mov	r0, r4
 800592a:	4629      	mov	r1, r5
 800592c:	f7fa fcae 	bl	800028c <__adddf3>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	e9c1 2300 	strd	r2, r3, [r1]

    prevVx = *Vx;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005940:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    prevVy = *Vy;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    prevW = *W;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	e9c7 2306 	strd	r2, r3, [r7, #24]
}
 8005958:	bf00      	nop
 800595a:	3730      	adds	r7, #48	@ 0x30
 800595c:	46bd      	mov	sp, r7
 800595e:	bdb0      	pop	{r4, r5, r7, pc}
 8005960:	3ff00000 	.word	0x3ff00000

08005964 <atTargetExternal>:
    }
    return targetVelocity;
}

bool atTargetExternal(robotPosition setpoint, robotPosition position, double xyTolerance, double Htolerance)
{
 8005964:	b084      	sub	sp, #16
 8005966:	b580      	push	{r7, lr}
 8005968:	b08c      	sub	sp, #48	@ 0x30
 800596a:	af00      	add	r7, sp, #0
 800596c:	f107 0c38 	add.w	ip, r7, #56	@ 0x38
 8005970:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8005974:	ed87 0b02 	vstr	d0, [r7, #8]
 8005978:	ed87 1b00 	vstr	d1, [r7]
	double error_x = setpoint.x_global - position.x_global;
 800597c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8005980:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005984:	f7fa fc80 	bl	8000288 <__aeabi_dsub>
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double error_y = setpoint.y_global - position.y_global;
 8005990:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8005994:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8005998:	f7fa fc76 	bl	8000288 <__aeabi_dsub>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double error_h = fabs(setpoint.h - position.h);
 80059a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80059a8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80059ac:	f7fa fc6c 	bl	8000288 <__aeabi_dsub>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4611      	mov	r1, r2
 80059b6:	61b9      	str	r1, [r7, #24]
 80059b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059bc:	61fb      	str	r3, [r7, #28]
	double distance = hypot(error_x, error_y);
 80059be:	ed97 1b08 	vldr	d1, [r7, #32]
 80059c2:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80059c6:	f00a f9b3 	bl	800fd30 <hypot>
 80059ca:	ed87 0b04 	vstr	d0, [r7, #16]
	return distance < xyTolerance && error_h < Htolerance;
 80059ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059d6:	f7fb f881 	bl	8000adc <__aeabi_dcmplt>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <atTargetExternal+0x92>
 80059e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80059e8:	f7fb f878 	bl	8000adc <__aeabi_dcmplt>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <atTargetExternal+0x92>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <atTargetExternal+0x94>
 80059f6:	2300      	movs	r3, #0
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	b2db      	uxtb	r3, r3
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3730      	adds	r7, #48	@ 0x30
 8005a02:	46bd      	mov	sp, r7
 8005a04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a08:	b004      	add	sp, #16
 8005a0a:	4770      	bx	lr

08005a0c <atTargetPosition>:

bool atTargetPosition(EKF setpoint, EKF position, double xyTolerance, double Htolerance)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b098      	sub	sp, #96	@ 0x60
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	ed87 6b02 	vstr	d6, [r7, #8]
 8005a16:	ed87 7b00 	vstr	d7, [r7]
 8005a1a:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 8005a1e:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 8005a22:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
 8005a26:	ed87 3b04 	vstr	d3, [r7, #16]
 8005a2a:	ed87 4b06 	vstr	d4, [r7, #24]
 8005a2e:	ed87 5b08 	vstr	d5, [r7, #32]
	double error_x = setpoint.x - position.x;
 8005a32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005a36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a3a:	f7fa fc25 	bl	8000288 <__aeabi_dsub>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	double error_y = setpoint.y - position.y;
 8005a46:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8005a4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a4e:	f7fa fc1b 	bl	8000288 <__aeabi_dsub>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	double error_h = fabs(setpoint.h - position.h);
 8005a5a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8005a5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a62:	f7fa fc11 	bl	8000288 <__aeabi_dsub>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
	double distance = hypot(error_x, error_y);
 8005a74:	ed97 1b14 	vldr	d1, [r7, #80]	@ 0x50
 8005a78:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 8005a7c:	f00a f958 	bl	800fd30 <hypot>
 8005a80:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
	return distance < xyTolerance && error_h < Htolerance;
 8005a84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a88:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8005a8c:	f7fb f826 	bl	8000adc <__aeabi_dcmplt>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <atTargetPosition+0xa0>
 8005a96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a9a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8005a9e:	f7fb f81d 	bl	8000adc <__aeabi_dcmplt>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <atTargetPosition+0xa0>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <atTargetPosition+0xa2>
 8005aac:	2300      	movs	r3, #0
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	b2db      	uxtb	r3, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3760      	adds	r7, #96	@ 0x60
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	0000      	movs	r0, r0
	...

08005ac0 <lookForTheBall>:

void lookForTheBall(double targetAngle1, double targetAngle2, double currentAngle)
{
 8005ac0:	b5b0      	push	{r4, r5, r7, lr}
 8005ac2:	b08c      	sub	sp, #48	@ 0x30
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	ed87 0b04 	vstr	d0, [r7, #16]
 8005aca:	ed87 1b02 	vstr	d1, [r7, #8]
 8005ace:	ed87 2b00 	vstr	d2, [r7]
    double targetAngle;
    uint8_t nextMode;

    switch (lookingMode)
 8005ad2:	4b25      	ldr	r3, [pc, #148]	@ (8005b68 <lookForTheBall+0xa8>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d002      	beq.n	8005ae0 <lookForTheBall+0x20>
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d008      	beq.n	8005af0 <lookForTheBall+0x30>
        case 2:
        	targetAngle = targetAngle1;
            nextMode = 1;
            break;
        default:
            return; // Invalid mode, do nothing
 8005ade:	e03c      	b.n	8005b5a <lookForTheBall+0x9a>
        	targetAngle = targetAngle2;
 8005ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ae4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            nextMode = 2;
 8005ae8:	2302      	movs	r3, #2
 8005aea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8005aee:	e007      	b.n	8005b00 <lookForTheBall+0x40>
        	targetAngle = targetAngle1;
 8005af0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005af4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            nextMode = 1;
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8005afe:	bf00      	nop
    }

    double W = PID_controllerH(targetAngle, currentAngle, 1.3);
 8005b00:	ed9f 2b17 	vldr	d2, [pc, #92]	@ 8005b60 <lookForTheBall+0xa0>
 8005b04:	ed97 1b00 	vldr	d1, [r7]
 8005b08:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8005b0c:	f7ff fdee 	bl	80056ec <PID_controllerH>
 8005b10:	ed87 0b06 	vstr	d0, [r7, #24]
    putar(0, 0, W);
 8005b14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005b18:	f7fb f81e 	bl	8000b58 <__aeabi_d2iz>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	461a      	mov	r2, r3
 8005b20:	2100      	movs	r1, #0
 8005b22:	2000      	movs	r0, #0
 8005b24:	f7fb fdf0 	bl	8001708 <putar>
    if (fabs(targetAngle - currentAngle) < 5.0)
 8005b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005b30:	f7fa fbaa 	bl	8000288 <__aeabi_dsub>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	4614      	mov	r4, r2
 8005b3a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	4b0a      	ldr	r3, [pc, #40]	@ (8005b6c <lookForTheBall+0xac>)
 8005b44:	4620      	mov	r0, r4
 8005b46:	4629      	mov	r1, r5
 8005b48:	f7fa ffc8 	bl	8000adc <__aeabi_dcmplt>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <lookForTheBall+0x9a>
    {
        lookingMode = nextMode;
 8005b52:	4a05      	ldr	r2, [pc, #20]	@ (8005b68 <lookForTheBall+0xa8>)
 8005b54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b58:	7013      	strb	r3, [r2, #0]
    }
}
 8005b5a:	3730      	adds	r7, #48	@ 0x30
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8005b60:	cccccccd 	.word	0xcccccccd
 8005b64:	3ff4cccc 	.word	0x3ff4cccc
 8005b68:	200000c9 	.word	0x200000c9
 8005b6c:	40140000 	.word	0x40140000

08005b70 <servo_write>:

void servo_write(int angle)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	6078      	str	r0, [r7, #4]
	int i = map(0, 180, 10, 65, angle);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	2341      	movs	r3, #65	@ 0x41
 8005b7e:	220a      	movs	r2, #10
 8005b80:	21b4      	movs	r1, #180	@ 0xb4
 8005b82:	2000      	movs	r0, #0
 8005b84:	f7ff fe0c 	bl	80057a0 <map>
 8005b88:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, i);
 8005b8a:	4b04      	ldr	r3, [pc, #16]	@ (8005b9c <servo_write+0x2c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005b92:	bf00      	nop
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000368 	.word	0x20000368

08005ba0 <PID_External>:

void PID_External(robotPosition setpoint, double Kp, double Ki, double Kd, double KpH, double smoothingFactor, double maxVelocity)
{
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	b5b0      	push	{r4, r5, r7, lr}
 8005ba4:	b0bc      	sub	sp, #240	@ 0xf0
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 8005bac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005bb0:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 8005bb4:	ed87 1b08 	vstr	d1, [r7, #32]
 8005bb8:	ed87 2b06 	vstr	d2, [r7, #24]
 8005bbc:	ed87 3b04 	vstr	d3, [r7, #16]
 8005bc0:	ed87 4b02 	vstr	d4, [r7, #8]
 8005bc4:	ed87 5b00 	vstr	d5, [r7]
    robotPosition currentPosition = odometry();
 8005bc8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fe f887 	bl	8003ce0 <odometry>

	double pitch = sensorData[1] * 300; // IMU pitch
 8005bd2:	4bc3      	ldr	r3, [pc, #780]	@ (8005ee0 <PID_External+0x340>)
 8005bd4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005bd8:	a3bd      	add	r3, pc, #756	@ (adr r3, 8005ed0 <PID_External+0x330>)
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	f7fa fd0b 	bl	80005f8 <__aeabi_dmul>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
	double roll = sensorData[2] * 300; // IMU roll
 8005bea:	4bbd      	ldr	r3, [pc, #756]	@ (8005ee0 <PID_External+0x340>)
 8005bec:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005bf0:	a3b7      	add	r3, pc, #732	@ (adr r3, 8005ed0 <PID_External+0x330>)
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f7fa fcff 	bl	80005f8 <__aeabi_dmul>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0

    double error_x = setpoint.x_global - currentPosition.x_global;
 8005c02:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8005c06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c0a:	f7fa fb3d 	bl	8000288 <__aeabi_dsub>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double error_y = setpoint.y_global - currentPosition.y_global;
 8005c16:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8005c1a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c1e:	f7fa fb33 	bl	8000288 <__aeabi_dsub>
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0

    double heading = atan2(error_y, error_x);
 8005c2a:	ed97 1b36 	vldr	d1, [r7, #216]	@ 0xd8
 8005c2e:	ed97 0b34 	vldr	d0, [r7, #208]	@ 0xd0
 8005c32:	f00a f879 	bl	800fd28 <atan2>
 8005c36:	ed87 0b32 	vstr	d0, [r7, #200]	@ 0xc8
    double current_heading_rad = currentPosition.h * M_PI / 180.0;
 8005c3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8005c3e:	a3a6      	add	r3, pc, #664	@ (adr r3, 8005ed8 <PID_External+0x338>)
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	f7fa fcd8 	bl	80005f8 <__aeabi_dmul>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4619      	mov	r1, r3
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	4ba3      	ldr	r3, [pc, #652]	@ (8005ee4 <PID_External+0x344>)
 8005c56:	f7fa fdf9 	bl	800084c <__aeabi_ddiv>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
    double heading_rad = heading - current_heading_rad;
 8005c62:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8005c66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c6a:	f7fa fb0d 	bl	8000288 <__aeabi_dsub>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

    double distance = hypot(error_x, error_y);
 8005c76:	ed97 1b34 	vldr	d1, [r7, #208]	@ 0xd0
 8005c7a:	ed97 0b36 	vldr	d0, [r7, #216]	@ 0xd8
 8005c7e:	f00a f857 	bl	800fd30 <hypot>
 8005c82:	ed87 0b2c 	vstr	d0, [r7, #176]	@ 0xb0
    double velocityFactor = fmin(distance, maxVelocity) / distance;
 8005c86:	ed97 1b00 	vldr	d1, [r7]
 8005c8a:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8005c8e:	f00a f960 	bl	800ff52 <fmin>
 8005c92:	ec51 0b10 	vmov	r0, r1, d0
 8005c96:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8005c9a:	f7fa fdd7 	bl	800084c <__aeabi_ddiv>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double Vx_local = PID_controller(setpoint.x_global, currentPosition.x_global, Kp, Ki, Kd) * cos(heading_rad) * velocityFactor;
 8005ca6:	ed97 7b40 	vldr	d7, [r7, #256]	@ 0x100
 8005caa:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8005cae:	ed97 4b06 	vldr	d4, [r7, #24]
 8005cb2:	ed97 3b08 	vldr	d3, [r7, #32]
 8005cb6:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8005cba:	eeb0 1a46 	vmov.f32	s2, s12
 8005cbe:	eef0 1a66 	vmov.f32	s3, s13
 8005cc2:	eeb0 0a47 	vmov.f32	s0, s14
 8005cc6:	eef0 0a67 	vmov.f32	s1, s15
 8005cca:	f7ff fc85 	bl	80055d8 <PID_controller>
 8005cce:	ec55 4b10 	vmov	r4, r5, d0
 8005cd2:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 8005cd6:	f00a f85f 	bl	800fd98 <cos>
 8005cda:	ec53 2b10 	vmov	r2, r3, d0
 8005cde:	4620      	mov	r0, r4
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	f7fa fc89 	bl	80005f8 <__aeabi_dmul>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8005cee:	f7fa fc83 	bl	80005f8 <__aeabi_dmul>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
    double Vy_local = PID_controller(setpoint.y_global, currentPosition.y_global, Kp, Ki, Kd) * sin(heading_rad) * velocityFactor;
 8005cfa:	ed97 7b42 	vldr	d7, [r7, #264]	@ 0x108
 8005cfe:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8005d02:	ed97 4b06 	vldr	d4, [r7, #24]
 8005d06:	ed97 3b08 	vldr	d3, [r7, #32]
 8005d0a:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8005d0e:	eeb0 1a46 	vmov.f32	s2, s12
 8005d12:	eef0 1a66 	vmov.f32	s3, s13
 8005d16:	eeb0 0a47 	vmov.f32	s0, s14
 8005d1a:	eef0 0a67 	vmov.f32	s1, s15
 8005d1e:	f7ff fc5b 	bl	80055d8 <PID_controller>
 8005d22:	ec55 4b10 	vmov	r4, r5, d0
 8005d26:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 8005d2a:	f00a f889 	bl	800fe40 <sin>
 8005d2e:	ec53 2b10 	vmov	r2, r3, d0
 8005d32:	4620      	mov	r0, r4
 8005d34:	4629      	mov	r1, r5
 8005d36:	f7fa fc5f 	bl	80005f8 <__aeabi_dmul>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8005d42:	f7fa fc59 	bl	80005f8 <__aeabi_dmul>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98

    double Vx = Vx_local * cos(current_heading_rad) - Vy_local * sin(current_heading_rad);
 8005d4e:	ed97 0b30 	vldr	d0, [r7, #192]	@ 0xc0
 8005d52:	f00a f821 	bl	800fd98 <cos>
 8005d56:	ec51 0b10 	vmov	r0, r1, d0
 8005d5a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8005d5e:	f7fa fc4b 	bl	80005f8 <__aeabi_dmul>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4614      	mov	r4, r2
 8005d68:	461d      	mov	r5, r3
 8005d6a:	ed97 0b30 	vldr	d0, [r7, #192]	@ 0xc0
 8005d6e:	f00a f867 	bl	800fe40 <sin>
 8005d72:	ec51 0b10 	vmov	r0, r1, d0
 8005d76:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8005d7a:	f7fa fc3d 	bl	80005f8 <__aeabi_dmul>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4620      	mov	r0, r4
 8005d84:	4629      	mov	r1, r5
 8005d86:	f7fa fa7f 	bl	8000288 <__aeabi_dsub>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double Vy = Vx_local * sin(current_heading_rad) + Vy_local * cos(current_heading_rad);
 8005d92:	ed97 0b30 	vldr	d0, [r7, #192]	@ 0xc0
 8005d96:	f00a f853 	bl	800fe40 <sin>
 8005d9a:	ec51 0b10 	vmov	r0, r1, d0
 8005d9e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8005da2:	f7fa fc29 	bl	80005f8 <__aeabi_dmul>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4614      	mov	r4, r2
 8005dac:	461d      	mov	r5, r3
 8005dae:	ed97 0b30 	vldr	d0, [r7, #192]	@ 0xc0
 8005db2:	f009 fff1 	bl	800fd98 <cos>
 8005db6:	ec51 0b10 	vmov	r0, r1, d0
 8005dba:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8005dbe:	f7fa fc1b 	bl	80005f8 <__aeabi_dmul>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	4629      	mov	r1, r5
 8005dca:	f7fa fa5f 	bl	800028c <__adddf3>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double W = PID_controllerH(setpoint.h, currentPosition.h, KpH);
 8005dd6:	ed97 7b44 	vldr	d7, [r7, #272]	@ 0x110
 8005dda:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8005dde:	ed97 2b04 	vldr	d2, [r7, #16]
 8005de2:	eeb0 1a46 	vmov.f32	s2, s12
 8005de6:	eef0 1a66 	vmov.f32	s3, s13
 8005dea:	eeb0 0a47 	vmov.f32	s0, s14
 8005dee:	eef0 0a67 	vmov.f32	s1, s15
 8005df2:	f7ff fc7b 	bl	80056ec <PID_controllerH>
 8005df6:	eeb0 7a40 	vmov.f32	s14, s0
 8005dfa:	eef0 7a60 	vmov.f32	s15, s1
 8005dfe:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30

    if(roll > 0)	{Vx -= roll;}
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e0e:	f7fa fe83 	bl	8000b18 <__aeabi_dcmpgt>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00a      	beq.n	8005e2e <PID_External+0x28e>
 8005e18:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8005e1c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8005e20:	f7fa fa32 	bl	8000288 <__aeabi_dsub>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8005e2c:	e009      	b.n	8005e42 <PID_External+0x2a2>
    else			{Vx += roll;}
 8005e2e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8005e32:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8005e36:	f7fa fa29 	bl	800028c <__adddf3>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    if(pitch > 0)	{Vy += pitch;}
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	f04f 0300 	mov.w	r3, #0
 8005e4a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8005e4e:	f7fa fe63 	bl	8000b18 <__aeabi_dcmpgt>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <PID_External+0x2ce>
 8005e58:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8005e5c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8005e60:	f7fa fa14 	bl	800028c <__adddf3>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8005e6c:	e009      	b.n	8005e82 <PID_External+0x2e2>
    else			{Vy -= pitch;}
 8005e6e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8005e72:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8005e76:	f7fa fa07 	bl	8000288 <__aeabi_dsub>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
 8005e82:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005e86:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8005e8a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005e8e:	ed97 0b02 	vldr	d0, [r7, #8]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff fcc8 	bl	8005828 <smoothVelocity>
    Inverse_Kinematics(Vx, Vy, W);
 8005e98:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8005e9c:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8005ea0:	ed97 5b0c 	vldr	d5, [r7, #48]	@ 0x30
 8005ea4:	eeb0 2a45 	vmov.f32	s4, s10
 8005ea8:	eef0 2a65 	vmov.f32	s5, s11
 8005eac:	eeb0 1a46 	vmov.f32	s2, s12
 8005eb0:	eef0 1a66 	vmov.f32	s3, s13
 8005eb4:	eeb0 0a47 	vmov.f32	s0, s14
 8005eb8:	eef0 0a67 	vmov.f32	s1, s15
 8005ebc:	f7fb f944 	bl	8001148 <Inverse_Kinematics>
}
 8005ec0:	bf00      	nop
 8005ec2:	37f0      	adds	r7, #240	@ 0xf0
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005eca:	b004      	add	sp, #16
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	00000000 	.word	0x00000000
 8005ed4:	4072c000 	.word	0x4072c000
 8005ed8:	54442d18 	.word	0x54442d18
 8005edc:	400921fb 	.word	0x400921fb
 8005ee0:	20000528 	.word	0x20000528
 8005ee4:	40668000 	.word	0x40668000

08005ee8 <PID_Internal>:

void PID_Internal(robotPosition setpoint, double Kp, double Ki, double Kd, double KpH, double smoothingFactor, double maxVelocity)
{
 8005ee8:	b084      	sub	sp, #16
 8005eea:	b5b0      	push	{r4, r5, r7, lr}
 8005eec:	b0bc      	sub	sp, #240	@ 0xf0
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 8005ef4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005ef8:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 8005efc:	ed87 1b08 	vstr	d1, [r7, #32]
 8005f00:	ed87 2b06 	vstr	d2, [r7, #24]
 8005f04:	ed87 3b04 	vstr	d3, [r7, #16]
 8005f08:	ed87 4b02 	vstr	d4, [r7, #8]
 8005f0c:	ed87 5b00 	vstr	d5, [r7]
    robotPosition currentPosition = odometry();
 8005f10:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fd fee3 	bl	8003ce0 <odometry>

	double pitch = sensorData[1] * 300; // IMU pitch
 8005f1a:	4bc3      	ldr	r3, [pc, #780]	@ (8006228 <PID_Internal+0x340>)
 8005f1c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005f20:	a3bd      	add	r3, pc, #756	@ (adr r3, 8006218 <PID_Internal+0x330>)
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	f7fa fb67 	bl	80005f8 <__aeabi_dmul>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
	double roll = sensorData[2] * 300; // IMU roll
 8005f32:	4bbd      	ldr	r3, [pc, #756]	@ (8006228 <PID_Internal+0x340>)
 8005f34:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005f38:	a3b7      	add	r3, pc, #732	@ (adr r3, 8006218 <PID_Internal+0x330>)
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	f7fa fb5b 	bl	80005f8 <__aeabi_dmul>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0

    double error_x = setpoint.x_in_global - currentPosition.x_in_global;
 8005f4a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8005f4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005f52:	f7fa f999 	bl	8000288 <__aeabi_dsub>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
    double error_y = setpoint.y_in_global - currentPosition.y_in_global;
 8005f5e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8005f62:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8005f66:	f7fa f98f 	bl	8000288 <__aeabi_dsub>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	e9c7 2334 	strd	r2, r3, [r7, #208]	@ 0xd0

    double heading = atan2(error_y, error_x);
 8005f72:	ed97 1b36 	vldr	d1, [r7, #216]	@ 0xd8
 8005f76:	ed97 0b34 	vldr	d0, [r7, #208]	@ 0xd0
 8005f7a:	f009 fed5 	bl	800fd28 <atan2>
 8005f7e:	ed87 0b32 	vstr	d0, [r7, #200]	@ 0xc8
    double current_heading_rad = currentPosition.h * M_PI / 180.0;
 8005f82:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8005f86:	a3a6      	add	r3, pc, #664	@ (adr r3, 8006220 <PID_Internal+0x338>)
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	f7fa fb34 	bl	80005f8 <__aeabi_dmul>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4610      	mov	r0, r2
 8005f96:	4619      	mov	r1, r3
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	4ba3      	ldr	r3, [pc, #652]	@ (800622c <PID_Internal+0x344>)
 8005f9e:	f7fa fc55 	bl	800084c <__aeabi_ddiv>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
    double heading_rad = heading - current_heading_rad;
 8005faa:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8005fae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005fb2:	f7fa f969 	bl	8000288 <__aeabi_dsub>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

    double distance = hypot(error_x, error_y);
 8005fbe:	ed97 1b34 	vldr	d1, [r7, #208]	@ 0xd0
 8005fc2:	ed97 0b36 	vldr	d0, [r7, #216]	@ 0xd8
 8005fc6:	f009 feb3 	bl	800fd30 <hypot>
 8005fca:	ed87 0b2c 	vstr	d0, [r7, #176]	@ 0xb0
    double velocityFactor = fmin(distance, maxVelocity) / distance;
 8005fce:	ed97 1b00 	vldr	d1, [r7]
 8005fd2:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8005fd6:	f009 ffbc 	bl	800ff52 <fmin>
 8005fda:	ec51 0b10 	vmov	r0, r1, d0
 8005fde:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8005fe2:	f7fa fc33 	bl	800084c <__aeabi_ddiv>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double Vx_local = PID_controller(setpoint.x_in_global, currentPosition.x_in_global, Kp, Ki, Kd) * cos(heading_rad) * velocityFactor;
 8005fee:	ed97 7b4a 	vldr	d7, [r7, #296]	@ 0x128
 8005ff2:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8005ff6:	ed97 4b06 	vldr	d4, [r7, #24]
 8005ffa:	ed97 3b08 	vldr	d3, [r7, #32]
 8005ffe:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8006002:	eeb0 1a46 	vmov.f32	s2, s12
 8006006:	eef0 1a66 	vmov.f32	s3, s13
 800600a:	eeb0 0a47 	vmov.f32	s0, s14
 800600e:	eef0 0a67 	vmov.f32	s1, s15
 8006012:	f7ff fae1 	bl	80055d8 <PID_controller>
 8006016:	ec55 4b10 	vmov	r4, r5, d0
 800601a:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 800601e:	f009 febb 	bl	800fd98 <cos>
 8006022:	ec53 2b10 	vmov	r2, r3, d0
 8006026:	4620      	mov	r0, r4
 8006028:	4629      	mov	r1, r5
 800602a:	f7fa fae5 	bl	80005f8 <__aeabi_dmul>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8006036:	f7fa fadf 	bl	80005f8 <__aeabi_dmul>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
    double Vy_local = PID_controller(setpoint.y_in_global, currentPosition.y_in_global, Kp, Ki, Kd) * sin(heading_rad) * velocityFactor;
 8006042:	ed97 7b4c 	vldr	d7, [r7, #304]	@ 0x130
 8006046:	ed97 6b1e 	vldr	d6, [r7, #120]	@ 0x78
 800604a:	ed97 4b06 	vldr	d4, [r7, #24]
 800604e:	ed97 3b08 	vldr	d3, [r7, #32]
 8006052:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8006056:	eeb0 1a46 	vmov.f32	s2, s12
 800605a:	eef0 1a66 	vmov.f32	s3, s13
 800605e:	eeb0 0a47 	vmov.f32	s0, s14
 8006062:	eef0 0a67 	vmov.f32	s1, s15
 8006066:	f7ff fab7 	bl	80055d8 <PID_controller>
 800606a:	ec55 4b10 	vmov	r4, r5, d0
 800606e:	ed97 0b2e 	vldr	d0, [r7, #184]	@ 0xb8
 8006072:	f009 fee5 	bl	800fe40 <sin>
 8006076:	ec53 2b10 	vmov	r2, r3, d0
 800607a:	4620      	mov	r0, r4
 800607c:	4629      	mov	r1, r5
 800607e:	f7fa fabb 	bl	80005f8 <__aeabi_dmul>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 800608a:	f7fa fab5 	bl	80005f8 <__aeabi_dmul>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98

    double Vx = Vx_local * cos(current_heading_rad) - Vy_local * sin(current_heading_rad);
 8006096:	ed97 0b30 	vldr	d0, [r7, #192]	@ 0xc0
 800609a:	f009 fe7d 	bl	800fd98 <cos>
 800609e:	ec51 0b10 	vmov	r0, r1, d0
 80060a2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80060a6:	f7fa faa7 	bl	80005f8 <__aeabi_dmul>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4614      	mov	r4, r2
 80060b0:	461d      	mov	r5, r3
 80060b2:	ed97 0b30 	vldr	d0, [r7, #192]	@ 0xc0
 80060b6:	f009 fec3 	bl	800fe40 <sin>
 80060ba:	ec51 0b10 	vmov	r0, r1, d0
 80060be:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80060c2:	f7fa fa99 	bl	80005f8 <__aeabi_dmul>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4620      	mov	r0, r4
 80060cc:	4629      	mov	r1, r5
 80060ce:	f7fa f8db 	bl	8000288 <__aeabi_dsub>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double Vy = Vx_local * sin(current_heading_rad) + Vy_local * cos(current_heading_rad);
 80060da:	ed97 0b30 	vldr	d0, [r7, #192]	@ 0xc0
 80060de:	f009 feaf 	bl	800fe40 <sin>
 80060e2:	ec51 0b10 	vmov	r0, r1, d0
 80060e6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80060ea:	f7fa fa85 	bl	80005f8 <__aeabi_dmul>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4614      	mov	r4, r2
 80060f4:	461d      	mov	r5, r3
 80060f6:	ed97 0b30 	vldr	d0, [r7, #192]	@ 0xc0
 80060fa:	f009 fe4d 	bl	800fd98 <cos>
 80060fe:	ec51 0b10 	vmov	r0, r1, d0
 8006102:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8006106:	f7fa fa77 	bl	80005f8 <__aeabi_dmul>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4620      	mov	r0, r4
 8006110:	4629      	mov	r1, r5
 8006112:	f7fa f8bb 	bl	800028c <__adddf3>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double W = PID_controllerH(setpoint.h, currentPosition.h, KpH);
 800611e:	ed97 7b44 	vldr	d7, [r7, #272]	@ 0x110
 8006122:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8006126:	ed97 2b04 	vldr	d2, [r7, #16]
 800612a:	eeb0 1a46 	vmov.f32	s2, s12
 800612e:	eef0 1a66 	vmov.f32	s3, s13
 8006132:	eeb0 0a47 	vmov.f32	s0, s14
 8006136:	eef0 0a67 	vmov.f32	s1, s15
 800613a:	f7ff fad7 	bl	80056ec <PID_controllerH>
 800613e:	eeb0 7a40 	vmov.f32	s14, s0
 8006142:	eef0 7a60 	vmov.f32	s15, s1
 8006146:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30

    if(roll > 0)	{Vx -= roll;}
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006156:	f7fa fcdf 	bl	8000b18 <__aeabi_dcmpgt>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <PID_Internal+0x28e>
 8006160:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8006164:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8006168:	f7fa f88e 	bl	8000288 <__aeabi_dsub>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8006174:	e009      	b.n	800618a <PID_Internal+0x2a2>
    else			{Vx += roll;}
 8006176:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800617a:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800617e:	f7fa f885 	bl	800028c <__adddf3>
 8006182:	4602      	mov	r2, r0
 8006184:	460b      	mov	r3, r1
 8006186:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    if(pitch > 0)	{Vy += pitch;}
 800618a:	f04f 0200 	mov.w	r2, #0
 800618e:	f04f 0300 	mov.w	r3, #0
 8006192:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8006196:	f7fa fcbf 	bl	8000b18 <__aeabi_dcmpgt>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <PID_Internal+0x2ce>
 80061a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80061a4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 80061a8:	f7fa f870 	bl	800028c <__adddf3>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80061b4:	e009      	b.n	80061ca <PID_Internal+0x2e2>
    else			{Vy -= pitch;}
 80061b6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80061ba:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 80061be:	f7fa f863 	bl	8000288 <__aeabi_dsub>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
 80061ca:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80061ce:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80061d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80061d6:	ed97 0b02 	vldr	d0, [r7, #8]
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff fb24 	bl	8005828 <smoothVelocity>
    Inverse_Kinematics(Vx, Vy, W);
 80061e0:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 80061e4:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 80061e8:	ed97 5b0c 	vldr	d5, [r7, #48]	@ 0x30
 80061ec:	eeb0 2a45 	vmov.f32	s4, s10
 80061f0:	eef0 2a65 	vmov.f32	s5, s11
 80061f4:	eeb0 1a46 	vmov.f32	s2, s12
 80061f8:	eef0 1a66 	vmov.f32	s3, s13
 80061fc:	eeb0 0a47 	vmov.f32	s0, s14
 8006200:	eef0 0a67 	vmov.f32	s1, s15
 8006204:	f7fa ffa0 	bl	8001148 <Inverse_Kinematics>
}
 8006208:	bf00      	nop
 800620a:	37f0      	adds	r7, #240	@ 0xf0
 800620c:	46bd      	mov	sp, r7
 800620e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006212:	b004      	add	sp, #16
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	00000000 	.word	0x00000000
 800621c:	4072c000 	.word	0x4072c000
 8006220:	54442d18 	.word	0x54442d18
 8006224:	400921fb 	.word	0x400921fb
 8006228:	20000528 	.word	0x20000528
 800622c:	40668000 	.word	0x40668000

08006230 <PID_KFtocoordinate>:

void PID_KFtocoordinate(EKF setpoint, double Kp, double Ki, double Kd, double KpH, double smoothingFactor, double maxVelocity)
{
 8006230:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006234:	b0b2      	sub	sp, #200	@ 0xc8
 8006236:	af00      	add	r7, sp, #0
 8006238:	ed87 3b08 	vstr	d3, [r7, #32]
 800623c:	ed87 4b06 	vstr	d4, [r7, #24]
 8006240:	ed87 5b04 	vstr	d5, [r7, #16]
 8006244:	ed87 6b02 	vstr	d6, [r7, #8]
 8006248:	ed87 7b00 	vstr	d7, [r7]
 800624c:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 8006250:	ed87 1b0c 	vstr	d1, [r7, #48]	@ 0x30
 8006254:	ed87 2b0e 	vstr	d2, [r7, #56]	@ 0x38
    EKF currentPosition = extendedKalmanFilter();
 8006258:	f7fe f96a 	bl	8004530 <extendedKalmanFilter>
 800625c:	eeb0 5a40 	vmov.f32	s10, s0
 8006260:	eef0 5a60 	vmov.f32	s11, s1
 8006264:	eeb0 6a41 	vmov.f32	s12, s2
 8006268:	eef0 6a61 	vmov.f32	s13, s3
 800626c:	eeb0 7a42 	vmov.f32	s14, s4
 8006270:	eef0 7a62 	vmov.f32	s15, s5
 8006274:	ed87 5b16 	vstr	d5, [r7, #88]	@ 0x58
 8006278:	ed87 6b18 	vstr	d6, [r7, #96]	@ 0x60
 800627c:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68
//	robotPosition currentPosition = odometry();

	double pitch = sensorData[1] * 300; // IMU pitch
 8006280:	4bc5      	ldr	r3, [pc, #788]	@ (8006598 <PID_KFtocoordinate+0x368>)
 8006282:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006286:	a3c0      	add	r3, pc, #768	@ (adr r3, 8006588 <PID_KFtocoordinate+0x358>)
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	f7fa f9b4 	bl	80005f8 <__aeabi_dmul>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
	double roll = sensorData[2] * 300; // IMU roll
 8006298:	4bbf      	ldr	r3, [pc, #764]	@ (8006598 <PID_KFtocoordinate+0x368>)
 800629a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800629e:	a3ba      	add	r3, pc, #744	@ (adr r3, 8006588 <PID_KFtocoordinate+0x358>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f7fa f9a8 	bl	80005f8 <__aeabi_dmul>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8

    double error_x = setpoint.x - currentPosition.x;
 80062b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80062b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80062b8:	f7f9 ffe6 	bl	8000288 <__aeabi_dsub>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
    double error_y = setpoint.y - currentPosition.y;
 80062c4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80062c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80062cc:	f7f9 ffdc 	bl	8000288 <__aeabi_dsub>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

    double heading = atan2(error_y, error_x);
 80062d8:	ed97 1b2c 	vldr	d1, [r7, #176]	@ 0xb0
 80062dc:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 80062e0:	f009 fd22 	bl	800fd28 <atan2>
 80062e4:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0
    double current_heading_rad = currentPosition.h * M_PI / 180.0; // IMU yaw
 80062e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80062ec:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006590 <PID_KFtocoordinate+0x360>)
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f7fa f981 	bl	80005f8 <__aeabi_dmul>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4610      	mov	r0, r2
 80062fc:	4619      	mov	r1, r3
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	4ba6      	ldr	r3, [pc, #664]	@ (800659c <PID_KFtocoordinate+0x36c>)
 8006304:	f7fa faa2 	bl	800084c <__aeabi_ddiv>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    double heading_rad = heading - current_heading_rad;
 8006310:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8006314:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8006318:	f7f9 ffb6 	bl	8000288 <__aeabi_dsub>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

    double distance = hypot(error_x, error_y);
 8006324:	ed97 1b2a 	vldr	d1, [r7, #168]	@ 0xa8
 8006328:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 800632c:	f009 fd00 	bl	800fd30 <hypot>
 8006330:	ed87 0b22 	vstr	d0, [r7, #136]	@ 0x88
    double velocityFactor = fmin(distance, maxVelocity) / distance;
 8006334:	ed97 1b38 	vldr	d1, [r7, #224]	@ 0xe0
 8006338:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 800633c:	f009 fe09 	bl	800ff52 <fmin>
 8006340:	ec51 0b10 	vmov	r0, r1, d0
 8006344:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006348:	f7fa fa80 	bl	800084c <__aeabi_ddiv>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    double Vx_local = fabs(PID_controller(setpoint.x, currentPosition.x, Kp, Ki, Kd)) * cos(heading_rad) * velocityFactor;
 8006354:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8006358:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800635c:	ed97 4b04 	vldr	d4, [r7, #16]
 8006360:	ed97 3b06 	vldr	d3, [r7, #24]
 8006364:	ed97 2b08 	vldr	d2, [r7, #32]
 8006368:	eeb0 1a46 	vmov.f32	s2, s12
 800636c:	eef0 1a66 	vmov.f32	s3, s13
 8006370:	eeb0 0a47 	vmov.f32	s0, s14
 8006374:	eef0 0a67 	vmov.f32	s1, s15
 8006378:	f7ff f92e 	bl	80055d8 <PID_controller>
 800637c:	ec53 2b10 	vmov	r2, r3, d0
 8006380:	4690      	mov	r8, r2
 8006382:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8006386:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 800638a:	f009 fd05 	bl	800fd98 <cos>
 800638e:	ec53 2b10 	vmov	r2, r3, d0
 8006392:	4640      	mov	r0, r8
 8006394:	4649      	mov	r1, r9
 8006396:	f7fa f92f 	bl	80005f8 <__aeabi_dmul>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80063a2:	f7fa f929 	bl	80005f8 <__aeabi_dmul>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    double Vy_local = fabs(PID_controller(setpoint.y, currentPosition.y, Kp, Ki, Kd)) * sin(heading_rad) * velocityFactor;
 80063ae:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80063b2:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80063b6:	ed97 4b04 	vldr	d4, [r7, #16]
 80063ba:	ed97 3b06 	vldr	d3, [r7, #24]
 80063be:	ed97 2b08 	vldr	d2, [r7, #32]
 80063c2:	eeb0 1a46 	vmov.f32	s2, s12
 80063c6:	eef0 1a66 	vmov.f32	s3, s13
 80063ca:	eeb0 0a47 	vmov.f32	s0, s14
 80063ce:	eef0 0a67 	vmov.f32	s1, s15
 80063d2:	f7ff f901 	bl	80055d8 <PID_controller>
 80063d6:	ec53 2b10 	vmov	r2, r3, d0
 80063da:	4614      	mov	r4, r2
 80063dc:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80063e0:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 80063e4:	f009 fd2c 	bl	800fe40 <sin>
 80063e8:	ec53 2b10 	vmov	r2, r3, d0
 80063ec:	4620      	mov	r0, r4
 80063ee:	4629      	mov	r1, r5
 80063f0:	f7fa f902 	bl	80005f8 <__aeabi_dmul>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80063fc:	f7fa f8fc 	bl	80005f8 <__aeabi_dmul>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    double Vx = Vx_local * cos(current_heading_rad) - Vy_local * sin(current_heading_rad);
 8006408:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 800640c:	f009 fcc4 	bl	800fd98 <cos>
 8006410:	ec51 0b10 	vmov	r0, r1, d0
 8006414:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8006418:	f7fa f8ee 	bl	80005f8 <__aeabi_dmul>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4614      	mov	r4, r2
 8006422:	461d      	mov	r5, r3
 8006424:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 8006428:	f009 fd0a 	bl	800fe40 <sin>
 800642c:	ec51 0b10 	vmov	r0, r1, d0
 8006430:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006434:	f7fa f8e0 	bl	80005f8 <__aeabi_dmul>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4620      	mov	r0, r4
 800643e:	4629      	mov	r1, r5
 8006440:	f7f9 ff22 	bl	8000288 <__aeabi_dsub>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double Vy = Vx_local * sin(current_heading_rad) + Vy_local * cos(current_heading_rad);
 800644c:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 8006450:	f009 fcf6 	bl	800fe40 <sin>
 8006454:	ec51 0b10 	vmov	r0, r1, d0
 8006458:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800645c:	f7fa f8cc 	bl	80005f8 <__aeabi_dmul>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4614      	mov	r4, r2
 8006466:	461d      	mov	r5, r3
 8006468:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 800646c:	f009 fc94 	bl	800fd98 <cos>
 8006470:	ec51 0b10 	vmov	r0, r1, d0
 8006474:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006478:	f7fa f8be 	bl	80005f8 <__aeabi_dmul>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	4620      	mov	r0, r4
 8006482:	4629      	mov	r1, r5
 8006484:	f7f9 ff02 	bl	800028c <__adddf3>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double W = PID_controllerH(setpoint.h, currentPosition.h, KpH);
 8006490:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8006494:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 8006498:	ed97 2b02 	vldr	d2, [r7, #8]
 800649c:	eeb0 1a46 	vmov.f32	s2, s12
 80064a0:	eef0 1a66 	vmov.f32	s3, s13
 80064a4:	eeb0 0a47 	vmov.f32	s0, s14
 80064a8:	eef0 0a67 	vmov.f32	s1, s15
 80064ac:	f7ff f91e 	bl	80056ec <PID_controllerH>
 80064b0:	eeb0 7a40 	vmov.f32	s14, s0
 80064b4:	eef0 7a60 	vmov.f32	s15, s1
 80064b8:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

    if(roll > 0)	{Vx -= roll;}
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80064c8:	f7fa fb26 	bl	8000b18 <__aeabi_dcmpgt>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <PID_KFtocoordinate+0x2b8>
 80064d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80064d6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80064da:	f7f9 fed5 	bl	8000288 <__aeabi_dsub>
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80064e6:	e009      	b.n	80064fc <PID_KFtocoordinate+0x2cc>
    else			{Vx += roll;}
 80064e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80064ec:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80064f0:	f7f9 fecc 	bl	800028c <__adddf3>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    if(pitch > 0)	{Vy += pitch;}
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8006508:	f7fa fb06 	bl	8000b18 <__aeabi_dcmpgt>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <PID_KFtocoordinate+0x2f8>
 8006512:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8006516:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800651a:	f7f9 feb7 	bl	800028c <__adddf3>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8006526:	e009      	b.n	800653c <PID_KFtocoordinate+0x30c>
    else			{Vy -= pitch;}
 8006528:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800652c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8006530:	f7f9 feaa 	bl	8000288 <__aeabi_dsub>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    smoothVelocity(&Vx, &Vy, &W, smoothingFactor);
 800653c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8006540:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8006544:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8006548:	ed97 0b00 	vldr	d0, [r7]
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff f96b 	bl	8005828 <smoothVelocity>
    Inverse_Kinematics(Vx, Vy, W);
 8006552:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8006556:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800655a:	ed97 5b10 	vldr	d5, [r7, #64]	@ 0x40
 800655e:	eeb0 2a45 	vmov.f32	s4, s10
 8006562:	eef0 2a65 	vmov.f32	s5, s11
 8006566:	eeb0 1a46 	vmov.f32	s2, s12
 800656a:	eef0 1a66 	vmov.f32	s3, s13
 800656e:	eeb0 0a47 	vmov.f32	s0, s14
 8006572:	eef0 0a67 	vmov.f32	s1, s15
 8006576:	f7fa fde7 	bl	8001148 <Inverse_Kinematics>
}
 800657a:	bf00      	nop
 800657c:	37c8      	adds	r7, #200	@ 0xc8
 800657e:	46bd      	mov	sp, r7
 8006580:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006584:	f3af 8000 	nop.w
 8006588:	00000000 	.word	0x00000000
 800658c:	4072c000 	.word	0x4072c000
 8006590:	54442d18 	.word	0x54442d18
 8006594:	400921fb 	.word	0x400921fb
 8006598:	20000528 	.word	0x20000528
 800659c:	40668000 	.word	0x40668000

080065a0 <focusToTheBall>:
    putar(0, 0, W);
//    Inverse_Kinematics(0, 0, W);
}

void focusToTheBall()
{
 80065a0:	b5b0      	push	{r4, r5, r7, lr}
 80065a2:	b08c      	sub	sp, #48	@ 0x30
 80065a4:	af02      	add	r7, sp, #8
    int ballDistance = camera[0] * 10; // convert to mm
 80065a6:	4b40      	ldr	r3, [pc, #256]	@ (80066a8 <focusToTheBall+0x108>)
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4613      	mov	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	627b      	str	r3, [r7, #36]	@ 0x24
    int ballAngle = camera[1];
 80065b4:	4b3c      	ldr	r3, [pc, #240]	@ (80066a8 <focusToTheBall+0x108>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	623b      	str	r3, [r7, #32]
    int ballExistence = camera[2];
 80065ba:	4b3b      	ldr	r3, [pc, #236]	@ (80066a8 <focusToTheBall+0x108>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	61fb      	str	r3, [r7, #28]
    int yBALL = cos(ballAngle * M_PI / 180.0) * ballDistance;
 80065c0:	6a38      	ldr	r0, [r7, #32]
 80065c2:	f7f9 ffaf 	bl	8000524 <__aeabi_i2d>
 80065c6:	a336      	add	r3, pc, #216	@ (adr r3, 80066a0 <focusToTheBall+0x100>)
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	f7fa f814 	bl	80005f8 <__aeabi_dmul>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4610      	mov	r0, r2
 80065d6:	4619      	mov	r1, r3
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	4b33      	ldr	r3, [pc, #204]	@ (80066ac <focusToTheBall+0x10c>)
 80065de:	f7fa f935 	bl	800084c <__aeabi_ddiv>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	ec43 2b17 	vmov	d7, r2, r3
 80065ea:	eeb0 0a47 	vmov.f32	s0, s14
 80065ee:	eef0 0a67 	vmov.f32	s1, s15
 80065f2:	f009 fbd1 	bl	800fd98 <cos>
 80065f6:	ec55 4b10 	vmov	r4, r5, d0
 80065fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80065fc:	f7f9 ff92 	bl	8000524 <__aeabi_i2d>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4620      	mov	r0, r4
 8006606:	4629      	mov	r1, r5
 8006608:	f7f9 fff6 	bl	80005f8 <__aeabi_dmul>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4610      	mov	r0, r2
 8006612:	4619      	mov	r1, r3
 8006614:	f7fa faa0 	bl	8000b58 <__aeabi_d2iz>
 8006618:	4603      	mov	r3, r0
 800661a:	61bb      	str	r3, [r7, #24]

    int gndtoCam = 518; // in mm
 800661c:	f240 2306 	movw	r3, #518	@ 0x206
 8006620:	617b      	str	r3, [r7, #20]
//    static bool increasing = true;
//    static int i = 95;

    if(ballExistence != 0)
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d034      	beq.n	8006692 <focusToTheBall+0xf2>
    {
        double focus = atan2(yBALL, gndtoCam) * 180.0 / M_PI;
 8006628:	69b8      	ldr	r0, [r7, #24]
 800662a:	f7f9 ff7b 	bl	8000524 <__aeabi_i2d>
 800662e:	4604      	mov	r4, r0
 8006630:	460d      	mov	r5, r1
 8006632:	6978      	ldr	r0, [r7, #20]
 8006634:	f7f9 ff76 	bl	8000524 <__aeabi_i2d>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	ec43 2b11 	vmov	d1, r2, r3
 8006640:	ec45 4b10 	vmov	d0, r4, r5
 8006644:	f009 fb70 	bl	800fd28 <atan2>
 8006648:	ec51 0b10 	vmov	r0, r1, d0
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	4b16      	ldr	r3, [pc, #88]	@ (80066ac <focusToTheBall+0x10c>)
 8006652:	f7f9 ffd1 	bl	80005f8 <__aeabi_dmul>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	4610      	mov	r0, r2
 800665c:	4619      	mov	r1, r3
 800665e:	a310      	add	r3, pc, #64	@ (adr r3, 80066a0 <focusToTheBall+0x100>)
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	f7fa f8f2 	bl	800084c <__aeabi_ddiv>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        int focusMapping = map(0, 90, 50, 134, focus); // 50, 134
 8006670:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006674:	f7fa fa70 	bl	8000b58 <__aeabi_d2iz>
 8006678:	4603      	mov	r3, r0
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	2386      	movs	r3, #134	@ 0x86
 800667e:	2232      	movs	r2, #50	@ 0x32
 8006680:	215a      	movs	r1, #90	@ 0x5a
 8006682:	2000      	movs	r0, #0
 8006684:	f7ff f88c 	bl	80057a0 <map>
 8006688:	6078      	str	r0, [r7, #4]
        servo_write(focusMapping);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff fa70 	bl	8005b70 <servo_write>
//    		i-=5;
//    		if(i <= 95) increasing = true;
//    	}
//    	servo_write(i);
    }
}
 8006690:	e002      	b.n	8006698 <focusToTheBall+0xf8>
    	servo_write(110);
 8006692:	206e      	movs	r0, #110	@ 0x6e
 8006694:	f7ff fa6c 	bl	8005b70 <servo_write>
}
 8006698:	bf00      	nop
 800669a:	3728      	adds	r7, #40	@ 0x28
 800669c:	46bd      	mov	sp, r7
 800669e:	bdb0      	pop	{r4, r5, r7, pc}
 80066a0:	54442d18 	.word	0x54442d18
 80066a4:	400921fb 	.word	0x400921fb
 80066a8:	2000057c 	.word	0x2000057c
 80066ac:	40668000 	.word	0x40668000

080066b0 <initializeSilos>:

// Initialize silos array
void initializeSilos()
{
 80066b0:	b5b0      	push	{r4, r5, r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_SILOS; i++)
 80066b6:	2300      	movs	r3, #0
 80066b8:	607b      	str	r3, [r7, #4]
 80066ba:	e092      	b.n	80067e2 <initializeSilos+0x132>
    {
        silos[i].distance = SILO_NOT_DETECTED_DISTANCE;
 80066bc:	4a50      	ldr	r2, [pc, #320]	@ (8006800 <initializeSilos+0x150>)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	015b      	lsls	r3, r3, #5
 80066c2:	4413      	add	r3, r2
 80066c4:	4a4f      	ldr	r2, [pc, #316]	@ (8006804 <initializeSilos+0x154>)
 80066c6:	601a      	str	r2, [r3, #0]
        silos[i].angle = SILO_NOT_DETECTED_ANGLE;
 80066c8:	4a4d      	ldr	r2, [pc, #308]	@ (8006800 <initializeSilos+0x150>)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	015b      	lsls	r3, r3, #5
 80066ce:	4413      	add	r3, r2
 80066d0:	3304      	adds	r3, #4
 80066d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80066d6:	601a      	str	r2, [r3, #0]
        silos[i].detected = false;
 80066d8:	4a49      	ldr	r2, [pc, #292]	@ (8006800 <initializeSilos+0x150>)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	015b      	lsls	r3, r3, #5
 80066de:	4413      	add	r3, r2
 80066e0:	3308      	adds	r3, #8
 80066e2:	2200      	movs	r2, #0
 80066e4:	701a      	strb	r2, [r3, #0]
        silos[i].ballInSilo = 0;
 80066e6:	4a46      	ldr	r2, [pc, #280]	@ (8006800 <initializeSilos+0x150>)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	015b      	lsls	r3, r3, #5
 80066ec:	4413      	add	r3, r2
 80066ee:	330c      	adds	r3, #12
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]
        silos[i].x = silos[i].distance * sin(silos[i].angle * M_PI/180);
 80066f4:	4a42      	ldr	r2, [pc, #264]	@ (8006800 <initializeSilos+0x150>)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	015b      	lsls	r3, r3, #5
 80066fa:	4413      	add	r3, r2
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7f9 ff10 	bl	8000524 <__aeabi_i2d>
 8006704:	4604      	mov	r4, r0
 8006706:	460d      	mov	r5, r1
 8006708:	4a3d      	ldr	r2, [pc, #244]	@ (8006800 <initializeSilos+0x150>)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	015b      	lsls	r3, r3, #5
 800670e:	4413      	add	r3, r2
 8006710:	3304      	adds	r3, #4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4618      	mov	r0, r3
 8006716:	f7f9 ff05 	bl	8000524 <__aeabi_i2d>
 800671a:	a337      	add	r3, pc, #220	@ (adr r3, 80067f8 <initializeSilos+0x148>)
 800671c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006720:	f7f9 ff6a 	bl	80005f8 <__aeabi_dmul>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4610      	mov	r0, r2
 800672a:	4619      	mov	r1, r3
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	4b35      	ldr	r3, [pc, #212]	@ (8006808 <initializeSilos+0x158>)
 8006732:	f7fa f88b 	bl	800084c <__aeabi_ddiv>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	ec43 2b17 	vmov	d7, r2, r3
 800673e:	eeb0 0a47 	vmov.f32	s0, s14
 8006742:	eef0 0a67 	vmov.f32	s1, s15
 8006746:	f009 fb7b 	bl	800fe40 <sin>
 800674a:	ec53 2b10 	vmov	r2, r3, d0
 800674e:	4620      	mov	r0, r4
 8006750:	4629      	mov	r1, r5
 8006752:	f7f9 ff51 	bl	80005f8 <__aeabi_dmul>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4829      	ldr	r0, [pc, #164]	@ (8006800 <initializeSilos+0x150>)
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	0149      	lsls	r1, r1, #5
 8006760:	4401      	add	r1, r0
 8006762:	3110      	adds	r1, #16
 8006764:	e9c1 2300 	strd	r2, r3, [r1]
        silos[i].y = silos[i].distance * cos(silos[i].angle * M_PI/180);
 8006768:	4a25      	ldr	r2, [pc, #148]	@ (8006800 <initializeSilos+0x150>)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	015b      	lsls	r3, r3, #5
 800676e:	4413      	add	r3, r2
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4618      	mov	r0, r3
 8006774:	f7f9 fed6 	bl	8000524 <__aeabi_i2d>
 8006778:	4604      	mov	r4, r0
 800677a:	460d      	mov	r5, r1
 800677c:	4a20      	ldr	r2, [pc, #128]	@ (8006800 <initializeSilos+0x150>)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	015b      	lsls	r3, r3, #5
 8006782:	4413      	add	r3, r2
 8006784:	3304      	adds	r3, #4
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4618      	mov	r0, r3
 800678a:	f7f9 fecb 	bl	8000524 <__aeabi_i2d>
 800678e:	a31a      	add	r3, pc, #104	@ (adr r3, 80067f8 <initializeSilos+0x148>)
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	f7f9 ff30 	bl	80005f8 <__aeabi_dmul>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4610      	mov	r0, r2
 800679e:	4619      	mov	r1, r3
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	4b18      	ldr	r3, [pc, #96]	@ (8006808 <initializeSilos+0x158>)
 80067a6:	f7fa f851 	bl	800084c <__aeabi_ddiv>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	ec43 2b17 	vmov	d7, r2, r3
 80067b2:	eeb0 0a47 	vmov.f32	s0, s14
 80067b6:	eef0 0a67 	vmov.f32	s1, s15
 80067ba:	f009 faed 	bl	800fd98 <cos>
 80067be:	ec53 2b10 	vmov	r2, r3, d0
 80067c2:	4620      	mov	r0, r4
 80067c4:	4629      	mov	r1, r5
 80067c6:	f7f9 ff17 	bl	80005f8 <__aeabi_dmul>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	480c      	ldr	r0, [pc, #48]	@ (8006800 <initializeSilos+0x150>)
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	0149      	lsls	r1, r1, #5
 80067d4:	4401      	add	r1, r0
 80067d6:	3118      	adds	r1, #24
 80067d8:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < MAX_SILOS; i++)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3301      	adds	r3, #1
 80067e0:	607b      	str	r3, [r7, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	f77f af69 	ble.w	80066bc <initializeSilos+0xc>
    }
}
 80067ea:	bf00      	nop
 80067ec:	bf00      	nop
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bdb0      	pop	{r4, r5, r7, pc}
 80067f4:	f3af 8000 	nop.w
 80067f8:	54442d18 	.word	0x54442d18
 80067fc:	400921fb 	.word	0x400921fb
 8006800:	20000698 	.word	0x20000698
 8006804:	00018696 	.word	0x00018696
 8006808:	40668000 	.word	0x40668000
 800680c:	00000000 	.word	0x00000000

08006810 <detectAndStoreSilo>:

Silo detectAndStoreSilo()
{
 8006810:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006814:	b0aa      	sub	sp, #168	@ 0xa8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
    Silo bestSilo;
    bestSilo.distance = SILO_NOT_DETECTED_DISTANCE;
 800681a:	4bad      	ldr	r3, [pc, #692]	@ (8006ad0 <detectAndStoreSilo+0x2c0>)
 800681c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    bestSilo.angle = SILO_NOT_DETECTED_ANGLE;
 8006820:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8006824:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    bestSilo.detected = false;
 8006828:	2300      	movs	r3, #0
 800682a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
    servo_write(126);
 800682e:	207e      	movs	r0, #126	@ 0x7e
 8006830:	f7ff f99e 	bl	8005b70 <servo_write>

    robotPosition position = odometry();
 8006834:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006838:	4618      	mov	r0, r3
 800683a:	f7fd fa51 	bl	8003ce0 <odometry>
    int siloDistances[MAX_SILOS] = {camera[3] * 10, camera[5] * 10, camera[7] * 10, camera[9] * 10, camera[11] * 10}; // convert to mm
 800683e:	4ba5      	ldr	r3, [pc, #660]	@ (8006ad4 <detectAndStoreSilo+0x2c4>)
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	61fb      	str	r3, [r7, #28]
 800684c:	4ba1      	ldr	r3, [pc, #644]	@ (8006ad4 <detectAndStoreSilo+0x2c4>)
 800684e:	695a      	ldr	r2, [r3, #20]
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	623b      	str	r3, [r7, #32]
 800685a:	4b9e      	ldr	r3, [pc, #632]	@ (8006ad4 <detectAndStoreSilo+0x2c4>)
 800685c:	69da      	ldr	r2, [r3, #28]
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	627b      	str	r3, [r7, #36]	@ 0x24
 8006868:	4b9a      	ldr	r3, [pc, #616]	@ (8006ad4 <detectAndStoreSilo+0x2c4>)
 800686a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006876:	4b97      	ldr	r3, [pc, #604]	@ (8006ad4 <detectAndStoreSilo+0x2c4>)
 8006878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int siloAngles[MAX_SILOS] = {camera[4], camera[6], camera[8], camera[10], camera[12]};
 8006884:	4b93      	ldr	r3, [pc, #588]	@ (8006ad4 <detectAndStoreSilo+0x2c4>)
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	60bb      	str	r3, [r7, #8]
 800688a:	4b92      	ldr	r3, [pc, #584]	@ (8006ad4 <detectAndStoreSilo+0x2c4>)
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	4b90      	ldr	r3, [pc, #576]	@ (8006ad4 <detectAndStoreSilo+0x2c4>)
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	4b8f      	ldr	r3, [pc, #572]	@ (8006ad4 <detectAndStoreSilo+0x2c4>)
 8006898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	4b8d      	ldr	r3, [pc, #564]	@ (8006ad4 <detectAndStoreSilo+0x2c4>)
 800689e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a0:	61bb      	str	r3, [r7, #24]

//    int ballDistance = camera[0] * 10; // convert to mm
//    int ballAngle = camera[1];
    int ballExistence = camera[2];
 80068a2:	4b8c      	ldr	r3, [pc, #560]	@ (8006ad4 <detectAndStoreSilo+0x2c4>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
//    double xBall = position.x_global + ballDistance * sin(ballAngle * M_PI / 180.0);

    for (int i = 0; i < MAX_SILOS; i++)
 80068aa:	2300      	movs	r3, #0
 80068ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80068b0:	e0f4      	b.n	8006a9c <detectAndStoreSilo+0x28c>
    {
        if (siloDistances[i] != SILO_NOT_DETECTED_DISTANCE && siloAngles[i] != SILO_NOT_DETECTED_ANGLE)
 80068b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	33a8      	adds	r3, #168	@ 0xa8
 80068ba:	443b      	add	r3, r7
 80068bc:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 80068c0:	4a83      	ldr	r2, [pc, #524]	@ (8006ad0 <detectAndStoreSilo+0x2c0>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	f000 80dd 	beq.w	8006a82 <detectAndStoreSilo+0x272>
 80068c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	33a8      	adds	r3, #168	@ 0xa8
 80068d0:	443b      	add	r3, r7
 80068d2:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 80068d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80068da:	4293      	cmp	r3, r2
 80068dc:	f000 80d1 	beq.w	8006a82 <detectAndStoreSilo+0x272>
        {
            silos[i].distance = siloDistances[i];
 80068e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	33a8      	adds	r3, #168	@ 0xa8
 80068e8:	443b      	add	r3, r7
 80068ea:	f853 2c8c 	ldr.w	r2, [r3, #-140]
 80068ee:	497a      	ldr	r1, [pc, #488]	@ (8006ad8 <detectAndStoreSilo+0x2c8>)
 80068f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80068f4:	015b      	lsls	r3, r3, #5
 80068f6:	440b      	add	r3, r1
 80068f8:	601a      	str	r2, [r3, #0]
            silos[i].angle = siloAngles[i];
 80068fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	33a8      	adds	r3, #168	@ 0xa8
 8006902:	443b      	add	r3, r7
 8006904:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8006908:	4973      	ldr	r1, [pc, #460]	@ (8006ad8 <detectAndStoreSilo+0x2c8>)
 800690a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800690e:	015b      	lsls	r3, r3, #5
 8006910:	440b      	add	r3, r1
 8006912:	3304      	adds	r3, #4
 8006914:	601a      	str	r2, [r3, #0]
            silos[i].detected = true;
 8006916:	4a70      	ldr	r2, [pc, #448]	@ (8006ad8 <detectAndStoreSilo+0x2c8>)
 8006918:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800691c:	015b      	lsls	r3, r3, #5
 800691e:	4413      	add	r3, r2
 8006920:	3308      	adds	r3, #8
 8006922:	2201      	movs	r2, #1
 8006924:	701a      	strb	r2, [r3, #0]
            silos[i].ballInSilo = ballExistence;
 8006926:	4a6c      	ldr	r2, [pc, #432]	@ (8006ad8 <detectAndStoreSilo+0x2c8>)
 8006928:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800692c:	015b      	lsls	r3, r3, #5
 800692e:	4413      	add	r3, r2
 8006930:	330c      	adds	r3, #12
 8006932:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8006936:	601a      	str	r2, [r3, #0]
            // Calculate global coordinates of the detected silo
            silos[i].x = position.x_global + siloDistances[i] * sin(siloAngles[i] * M_PI / 180.0);
 8006938:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800693c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	33a8      	adds	r3, #168	@ 0xa8
 8006944:	443b      	add	r3, r7
 8006946:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800694a:	4618      	mov	r0, r3
 800694c:	f7f9 fdea 	bl	8000524 <__aeabi_i2d>
 8006950:	4680      	mov	r8, r0
 8006952:	4689      	mov	r9, r1
 8006954:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	33a8      	adds	r3, #168	@ 0xa8
 800695c:	443b      	add	r3, r7
 800695e:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 8006962:	4618      	mov	r0, r3
 8006964:	f7f9 fdde 	bl	8000524 <__aeabi_i2d>
 8006968:	a357      	add	r3, pc, #348	@ (adr r3, 8006ac8 <detectAndStoreSilo+0x2b8>)
 800696a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696e:	f7f9 fe43 	bl	80005f8 <__aeabi_dmul>
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	4610      	mov	r0, r2
 8006978:	4619      	mov	r1, r3
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	4b57      	ldr	r3, [pc, #348]	@ (8006adc <detectAndStoreSilo+0x2cc>)
 8006980:	f7f9 ff64 	bl	800084c <__aeabi_ddiv>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	ec43 2b17 	vmov	d7, r2, r3
 800698c:	eeb0 0a47 	vmov.f32	s0, s14
 8006990:	eef0 0a67 	vmov.f32	s1, s15
 8006994:	f009 fa54 	bl	800fe40 <sin>
 8006998:	ec53 2b10 	vmov	r2, r3, d0
 800699c:	4640      	mov	r0, r8
 800699e:	4649      	mov	r1, r9
 80069a0:	f7f9 fe2a 	bl	80005f8 <__aeabi_dmul>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4620      	mov	r0, r4
 80069aa:	4629      	mov	r1, r5
 80069ac:	f7f9 fc6e 	bl	800028c <__adddf3>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	4848      	ldr	r0, [pc, #288]	@ (8006ad8 <detectAndStoreSilo+0x2c8>)
 80069b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069ba:	0149      	lsls	r1, r1, #5
 80069bc:	4401      	add	r1, r0
 80069be:	3110      	adds	r1, #16
 80069c0:	e9c1 2300 	strd	r2, r3, [r1]
            silos[i].y = position.y_global + siloDistances[i] * cos(siloAngles[i] * M_PI / 180.0);
 80069c4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80069c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	33a8      	adds	r3, #168	@ 0xa8
 80069d0:	443b      	add	r3, r7
 80069d2:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7f9 fda4 	bl	8000524 <__aeabi_i2d>
 80069dc:	4680      	mov	r8, r0
 80069de:	4689      	mov	r9, r1
 80069e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	33a8      	adds	r3, #168	@ 0xa8
 80069e8:	443b      	add	r3, r7
 80069ea:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7f9 fd98 	bl	8000524 <__aeabi_i2d>
 80069f4:	a334      	add	r3, pc, #208	@ (adr r3, 8006ac8 <detectAndStoreSilo+0x2b8>)
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	f7f9 fdfd 	bl	80005f8 <__aeabi_dmul>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4610      	mov	r0, r2
 8006a04:	4619      	mov	r1, r3
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	4b34      	ldr	r3, [pc, #208]	@ (8006adc <detectAndStoreSilo+0x2cc>)
 8006a0c:	f7f9 ff1e 	bl	800084c <__aeabi_ddiv>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	ec43 2b17 	vmov	d7, r2, r3
 8006a18:	eeb0 0a47 	vmov.f32	s0, s14
 8006a1c:	eef0 0a67 	vmov.f32	s1, s15
 8006a20:	f009 f9ba 	bl	800fd98 <cos>
 8006a24:	ec53 2b10 	vmov	r2, r3, d0
 8006a28:	4640      	mov	r0, r8
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	f7f9 fde4 	bl	80005f8 <__aeabi_dmul>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4620      	mov	r0, r4
 8006a36:	4629      	mov	r1, r5
 8006a38:	f7f9 fc28 	bl	800028c <__adddf3>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4825      	ldr	r0, [pc, #148]	@ (8006ad8 <detectAndStoreSilo+0x2c8>)
 8006a42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a46:	0149      	lsls	r1, r1, #5
 8006a48:	4401      	add	r1, r0
 8006a4a:	3118      	adds	r1, #24
 8006a4c:	e9c1 2300 	strd	r2, r3, [r1]

            // Check if this is the nearest silo
            if (silos[i].distance < bestSilo.distance)
 8006a50:	4a21      	ldr	r2, [pc, #132]	@ (8006ad8 <detectAndStoreSilo+0x2c8>)
 8006a52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a56:	015b      	lsls	r3, r3, #5
 8006a58:	4413      	add	r3, r2
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a60:	429a      	cmp	r2, r3
 8006a62:	da16      	bge.n	8006a92 <detectAndStoreSilo+0x282>
            {
                bestSilo = silos[i];
 8006a64:	4a1c      	ldr	r2, [pc, #112]	@ (8006ad8 <detectAndStoreSilo+0x2c8>)
 8006a66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a6a:	015b      	lsls	r3, r3, #5
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8006a72:	461d      	mov	r5, r3
 8006a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006a7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (silos[i].distance < bestSilo.distance)
 8006a80:	e007      	b.n	8006a92 <detectAndStoreSilo+0x282>
            }
        }
        else
        {
            silos[i].detected = false;
 8006a82:	4a15      	ldr	r2, [pc, #84]	@ (8006ad8 <detectAndStoreSilo+0x2c8>)
 8006a84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a88:	015b      	lsls	r3, r3, #5
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	2200      	movs	r2, #0
 8006a90:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAX_SILOS; i++)
 8006a92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a96:	3301      	adds	r3, #1
 8006a98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006a9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006aa0:	2b04      	cmp	r3, #4
 8006aa2:	f77f af06 	ble.w	80068b2 <detectAndStoreSilo+0xa2>
        }
    }
    return bestSilo;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	461d      	mov	r5, r3
 8006aaa:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8006aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ab2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006ab6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	37a8      	adds	r7, #168	@ 0xa8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006ac4:	f3af 8000 	nop.w
 8006ac8:	54442d18 	.word	0x54442d18
 8006acc:	400921fb 	.word	0x400921fb
 8006ad0:	00018696 	.word	0x00018696
 8006ad4:	2000057c 	.word	0x2000057c
 8006ad8:	20000698 	.word	0x20000698
 8006adc:	40668000 	.word	0x40668000

08006ae0 <placeBallInSilo>:

void placeBallInSilo(robotPosition setpoint, double Kp, double Ki, double Kd, double KpH)
{
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	b5b0      	push	{r4, r5, r7, lr}
 8006ae4:	b0c0      	sub	sp, #256	@ 0x100
 8006ae6:	af10      	add	r7, sp, #64	@ 0x40
 8006ae8:	f107 04d0 	add.w	r4, r7, #208	@ 0xd0
 8006aec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006af0:	ed87 0b06 	vstr	d0, [r7, #24]
 8006af4:	ed87 1b04 	vstr	d1, [r7, #16]
 8006af8:	ed87 2b02 	vstr	d2, [r7, #8]
 8006afc:	ed87 3b00 	vstr	d3, [r7]
    robotPosition position = odometry();
 8006b00:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fd f8eb 	bl	8003ce0 <odometry>
    Silo bestSilo = detectAndStoreSilo();
 8006b0a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff fe7e 	bl	8006810 <detectAndStoreSilo>
    double Vx = 0.0, Vy = 0.0, W = 0.0;
 8006b14:	f04f 0200 	mov.w	r2, #0
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8006b20:	f04f 0200 	mov.w	r2, #0
 8006b24:	f04f 0300 	mov.w	r3, #0
 8006b28:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	e9c7 2308 	strd	r2, r3, [r7, #32]

    static uint32_t lastTime = 0;
    uint32_t timer = HAL_GetTick();
 8006b38:	f001 f846 	bl	8007bc8 <HAL_GetTick>
 8006b3c:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

    setMotorSpeed(1, 0);
 8006b40:	ed9f 0b67 	vldr	d0, [pc, #412]	@ 8006ce0 <placeBallInSilo+0x200>
 8006b44:	2001      	movs	r0, #1
 8006b46:	f7fa fa89 	bl	800105c <setMotorSpeed>
    setMotorSpeed(2, 0);
 8006b4a:	ed9f 0b65 	vldr	d0, [pc, #404]	@ 8006ce0 <placeBallInSilo+0x200>
 8006b4e:	2002      	movs	r0, #2
 8006b50:	f7fa fa84 	bl	800105c <setMotorSpeed>
    setMotorSpeed(7, 0);
 8006b54:	ed9f 0b62 	vldr	d0, [pc, #392]	@ 8006ce0 <placeBallInSilo+0x200>
 8006b58:	2007      	movs	r0, #7
 8006b5a:	f7fa fa7f 	bl	800105c <setMotorSpeed>

    if(bestSilo.detected && bestSilo.ballInSilo < 3)
 8006b5e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 8083 	beq.w	8006c6e <placeBallInSilo+0x18e>
 8006b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	dc7f      	bgt.n	8006c6e <placeBallInSilo+0x18e>
    {
        double targetX = bestSilo.x;
 8006b6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b72:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
        double targetY = bestSilo.y;
 8006b76:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006b7a:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
    //    double targetH = atan2(targetY - position.y_global, targetX - position.x_global) * 180.0 / M_PI;

        Vx = PID_controller(targetX, position.x_global, Kp, Ki, Kd);
 8006b7e:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8006b82:	ed97 4b02 	vldr	d4, [r7, #8]
 8006b86:	ed97 3b04 	vldr	d3, [r7, #16]
 8006b8a:	ed97 2b06 	vldr	d2, [r7, #24]
 8006b8e:	eeb0 1a47 	vmov.f32	s2, s14
 8006b92:	eef0 1a67 	vmov.f32	s3, s15
 8006b96:	ed97 0b2c 	vldr	d0, [r7, #176]	@ 0xb0
 8006b9a:	f7fe fd1d 	bl	80055d8 <PID_controller>
 8006b9e:	eeb0 7a40 	vmov.f32	s14, s0
 8006ba2:	eef0 7a60 	vmov.f32	s15, s1
 8006ba6:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
        Vy = PID_controller(targetY, position.y_global, 1.6, Ki, Kd);
 8006baa:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8006bae:	ed97 4b02 	vldr	d4, [r7, #8]
 8006bb2:	ed97 3b04 	vldr	d3, [r7, #16]
 8006bb6:	ed9f 2b4c 	vldr	d2, [pc, #304]	@ 8006ce8 <placeBallInSilo+0x208>
 8006bba:	eeb0 1a47 	vmov.f32	s2, s14
 8006bbe:	eef0 1a67 	vmov.f32	s3, s15
 8006bc2:	ed97 0b2a 	vldr	d0, [r7, #168]	@ 0xa8
 8006bc6:	f7fe fd07 	bl	80055d8 <PID_controller>
 8006bca:	eeb0 7a40 	vmov.f32	s14, s0
 8006bce:	eef0 7a60 	vmov.f32	s15, s1
 8006bd2:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
        W = PID_controllerH(90.0, position.h, KpH);
 8006bd6:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8006bda:	ed97 2b00 	vldr	d2, [r7]
 8006bde:	eeb0 1a47 	vmov.f32	s2, s14
 8006be2:	eef0 1a67 	vmov.f32	s3, s15
 8006be6:	ed9f 0b42 	vldr	d0, [pc, #264]	@ 8006cf0 <placeBallInSilo+0x210>
 8006bea:	f7fe fd7f 	bl	80056ec <PID_controllerH>
 8006bee:	eeb0 7a40 	vmov.f32	s14, s0
 8006bf2:	eef0 7a60 	vmov.f32	s15, s1
 8006bf6:	ed87 7b08 	vstr	d7, [r7, #32]

        if(bestSilo.distance <= 400) {Vx = 0; Vy = 1000; W = 0;}
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8006c00:	dc10      	bgt.n	8006c24 <placeBallInSilo+0x144>
 8006c02:	f04f 0200 	mov.w	r2, #0
 8006c06:	f04f 0300 	mov.w	r3, #0
 8006c0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	4b3f      	ldr	r3, [pc, #252]	@ (8006d10 <placeBallInSilo+0x230>)
 8006c14:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	f04f 0300 	mov.w	r3, #0
 8006c20:	e9c7 2308 	strd	r2, r3, [r7, #32]

        smoothVelocity(&Vx, &Vy, &W, 0.75);
 8006c24:	f107 0220 	add.w	r2, r7, #32
 8006c28:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8006c2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006c30:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 8006cf8 <placeBallInSilo+0x218>
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fe fdf7 	bl	8005828 <smoothVelocity>
        Inverse_Kinematics(Vx, Vy, W);
 8006c3a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8006c3e:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8006c42:	ed97 5b08 	vldr	d5, [r7, #32]
 8006c46:	eeb0 2a45 	vmov.f32	s4, s10
 8006c4a:	eef0 2a65 	vmov.f32	s5, s11
 8006c4e:	eeb0 1a46 	vmov.f32	s2, s12
 8006c52:	eef0 1a66 	vmov.f32	s3, s13
 8006c56:	eeb0 0a47 	vmov.f32	s0, s14
 8006c5a:	eef0 0a67 	vmov.f32	s1, s15
 8006c5e:	f7fa fa73 	bl	8001148 <Inverse_Kinematics>
        lastTime = timer;
 8006c62:	4a2c      	ldr	r2, [pc, #176]	@ (8006d14 <placeBallInSilo+0x234>)
 8006c64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006c68:	6013      	str	r3, [r2, #0]
    {
 8006c6a:	bf00      	nop
    }
    else
    {
    	PID_External(setpoint, Kp, Ki, Kd, KpH, 0.75, 3000);
    }
}
 8006c6c:	e02e      	b.n	8006ccc <placeBallInSilo+0x1ec>
    else if(timer - lastTime <= 1600)
 8006c6e:	4b29      	ldr	r3, [pc, #164]	@ (8006d14 <placeBallInSilo+0x234>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006c7c:	d808      	bhi.n	8006c90 <placeBallInSilo+0x1b0>
        Inverse_Kinematics(0, 1000, 0);
 8006c7e:	ed9f 2b18 	vldr	d2, [pc, #96]	@ 8006ce0 <placeBallInSilo+0x200>
 8006c82:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 8006d00 <placeBallInSilo+0x220>
 8006c86:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8006ce0 <placeBallInSilo+0x200>
 8006c8a:	f7fa fa5d 	bl	8001148 <Inverse_Kinematics>
}
 8006c8e:	e01d      	b.n	8006ccc <placeBallInSilo+0x1ec>
    	PID_External(setpoint, Kp, Ki, Kd, KpH, 0.75, 3000);
 8006c90:	466d      	mov	r5, sp
 8006c92:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 8006c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ca2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006ca6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006caa:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8006cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006cb0:	ed9f 5b15 	vldr	d5, [pc, #84]	@ 8006d08 <placeBallInSilo+0x228>
 8006cb4:	ed9f 4b10 	vldr	d4, [pc, #64]	@ 8006cf8 <placeBallInSilo+0x218>
 8006cb8:	ed97 3b00 	vldr	d3, [r7]
 8006cbc:	ed97 2b02 	vldr	d2, [r7, #8]
 8006cc0:	ed97 1b04 	vldr	d1, [r7, #16]
 8006cc4:	ed97 0b06 	vldr	d0, [r7, #24]
 8006cc8:	f7fe ff6a 	bl	8005ba0 <PID_External>
}
 8006ccc:	bf00      	nop
 8006cce:	37c0      	adds	r7, #192	@ 0xc0
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006cd6:	b004      	add	sp, #16
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	f3af 8000 	nop.w
	...
 8006ce8:	9999999a 	.word	0x9999999a
 8006cec:	3ff99999 	.word	0x3ff99999
 8006cf0:	00000000 	.word	0x00000000
 8006cf4:	40568000 	.word	0x40568000
 8006cf8:	00000000 	.word	0x00000000
 8006cfc:	3fe80000 	.word	0x3fe80000
 8006d00:	00000000 	.word	0x00000000
 8006d04:	408f4000 	.word	0x408f4000
 8006d08:	00000000 	.word	0x00000000
 8006d0c:	40a77000 	.word	0x40a77000
 8006d10:	408f4000 	.word	0x408f4000
 8006d14:	20000738 	.word	0x20000738

08006d18 <findAndTakeBall>:

void findAndTakeBall()
{
 8006d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d1a:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
 8006d1e:	af24      	add	r7, sp, #144	@ 0x90
     * camera[2]: ball existence (number of balls)
     * camera[3]: silo distance (in cm)
     * camera[4]: silo angle (in degree)
     */

    robotPosition position = odometry();
 8006d20:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fc ffdb 	bl	8003ce0 <odometry>
    static uint32_t lastTimeBallSeen = 0;
    static uint32_t searchStartTime = 0;
    static uint8_t searchMode = 1;
    static uint8_t lastSearchMode = 1;

    uint32_t timer = HAL_GetTick();
 8006d2a:	f000 ff4d 	bl	8007bc8 <HAL_GetTick>
 8006d2e:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c

    int ballDistance = camera[0] * 10; // convert to mm
 8006d32:	4bc7      	ldr	r3, [pc, #796]	@ (8007050 <findAndTakeBall+0x338>)
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    int ballAngle = camera[1];
 8006d42:	4bc3      	ldr	r3, [pc, #780]	@ (8007050 <findAndTakeBall+0x338>)
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    int ballExistence = camera[2];
 8006d4a:	4bc1      	ldr	r3, [pc, #772]	@ (8007050 <findAndTakeBall+0x338>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

    double Vx = 0.0;
 8006d52:	f04f 0200 	mov.w	r2, #0
 8006d56:	f04f 0300 	mov.w	r3, #0
 8006d5a:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
    double Vy = 0.0;
 8006d5e:	f04f 0200 	mov.w	r2, #0
 8006d62:	f04f 0300 	mov.w	r3, #0
 8006d66:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
    double W = 0.0;
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160

    robotPosition findBall1 = {-2800.0, 0.0, -90.0};
 8006d76:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8006d7a:	2250      	movs	r2, #80	@ 0x50
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f006 fa23 	bl	800d1ca <memset>
 8006d84:	a3a0      	add	r3, pc, #640	@ (adr r3, 8007008 <findAndTakeBall+0x2f0>)
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
 8006d8e:	f04f 0200 	mov.w	r2, #0
 8006d92:	4bb0      	ldr	r3, [pc, #704]	@ (8007054 <findAndTakeBall+0x33c>)
 8006d94:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
    robotPosition findBall2 = {-2800.0, 900.0, -179.0};
 8006d98:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8006d9c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006da0:	4618      	mov	r0, r3
 8006da2:	2350      	movs	r3, #80	@ 0x50
 8006da4:	461a      	mov	r2, r3
 8006da6:	2100      	movs	r1, #0
 8006da8:	f006 fa0f 	bl	800d1ca <memset>
 8006dac:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8006db0:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 8006db4:	a394      	add	r3, pc, #592	@ (adr r3, 8007008 <findAndTakeBall+0x2f0>)
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	e9c1 2300 	strd	r2, r3, [r1]
 8006dbe:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8006dc2:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	4ba3      	ldr	r3, [pc, #652]	@ (8007058 <findAndTakeBall+0x340>)
 8006dcc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006dd0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8006dd4:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 8006dd8:	a38d      	add	r3, pc, #564	@ (adr r3, 8007010 <findAndTakeBall+0x2f8>)
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	e9c1 2304 	strd	r2, r3, [r1, #16]
    robotPosition findBall3 = {-2800.0, -900.0, 0.0};
 8006de2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8006de6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8006dea:	4618      	mov	r0, r3
 8006dec:	2350      	movs	r3, #80	@ 0x50
 8006dee:	461a      	mov	r2, r3
 8006df0:	2100      	movs	r1, #0
 8006df2:	f006 f9ea 	bl	800d1ca <memset>
 8006df6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8006dfa:	f5a3 71bc 	sub.w	r1, r3, #376	@ 0x178
 8006dfe:	a382      	add	r3, pc, #520	@ (adr r3, 8007008 <findAndTakeBall+0x2f0>)
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	e9c1 2300 	strd	r2, r3, [r1]
 8006e08:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8006e0c:	f5a3 71bc 	sub.w	r1, r3, #376	@ 0x178
 8006e10:	a381      	add	r3, pc, #516	@ (adr r3, 8007018 <findAndTakeBall+0x300>)
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	e9c1 2302 	strd	r2, r3, [r1, #8]

    focusToTheBall();
 8006e1a:	f7ff fbc1 	bl	80065a0 <focusToTheBall>

    if (ballExistence != 0)
 8006e1e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 80b0 	beq.w	8006f88 <findAndTakeBall+0x270>
    {
        double xBall = ballDistance * sin(ballAngle * M_PI / 180.0);
 8006e28:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8006e2c:	f7f9 fb7a 	bl	8000524 <__aeabi_i2d>
 8006e30:	4604      	mov	r4, r0
 8006e32:	460d      	mov	r5, r1
 8006e34:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 8006e38:	f7f9 fb74 	bl	8000524 <__aeabi_i2d>
 8006e3c:	a378      	add	r3, pc, #480	@ (adr r3, 8007020 <findAndTakeBall+0x308>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	f7f9 fbd9 	bl	80005f8 <__aeabi_dmul>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	f04f 0200 	mov.w	r2, #0
 8006e52:	4b82      	ldr	r3, [pc, #520]	@ (800705c <findAndTakeBall+0x344>)
 8006e54:	f7f9 fcfa 	bl	800084c <__aeabi_ddiv>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	ec43 2b17 	vmov	d7, r2, r3
 8006e60:	eeb0 0a47 	vmov.f32	s0, s14
 8006e64:	eef0 0a67 	vmov.f32	s1, s15
 8006e68:	f008 ffea 	bl	800fe40 <sin>
 8006e6c:	ec53 2b10 	vmov	r2, r3, d0
 8006e70:	4620      	mov	r0, r4
 8006e72:	4629      	mov	r1, r5
 8006e74:	f7f9 fbc0 	bl	80005f8 <__aeabi_dmul>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
        double yBall = ballDistance * cos(ballAngle * M_PI / 180.0);
 8006e80:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8006e84:	f7f9 fb4e 	bl	8000524 <__aeabi_i2d>
 8006e88:	4604      	mov	r4, r0
 8006e8a:	460d      	mov	r5, r1
 8006e8c:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 8006e90:	f7f9 fb48 	bl	8000524 <__aeabi_i2d>
 8006e94:	a362      	add	r3, pc, #392	@ (adr r3, 8007020 <findAndTakeBall+0x308>)
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	f7f9 fbad 	bl	80005f8 <__aeabi_dmul>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f04f 0200 	mov.w	r2, #0
 8006eaa:	4b6c      	ldr	r3, [pc, #432]	@ (800705c <findAndTakeBall+0x344>)
 8006eac:	f7f9 fcce 	bl	800084c <__aeabi_ddiv>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	ec43 2b17 	vmov	d7, r2, r3
 8006eb8:	eeb0 0a47 	vmov.f32	s0, s14
 8006ebc:	eef0 0a67 	vmov.f32	s1, s15
 8006ec0:	f008 ff6a 	bl	800fd98 <cos>
 8006ec4:	ec53 2b10 	vmov	r2, r3, d0
 8006ec8:	4620      	mov	r0, r4
 8006eca:	4629      	mov	r1, r5
 8006ecc:	f7f9 fb94 	bl	80005f8 <__aeabi_dmul>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

        Vx = PID_controller(xBall, 0.0, 1.0, 0.0, 0.0);
 8006ed8:	ed9f 4b53 	vldr	d4, [pc, #332]	@ 8007028 <findAndTakeBall+0x310>
 8006edc:	ed9f 3b52 	vldr	d3, [pc, #328]	@ 8007028 <findAndTakeBall+0x310>
 8006ee0:	ed9f 2b53 	vldr	d2, [pc, #332]	@ 8007030 <findAndTakeBall+0x318>
 8006ee4:	ed9f 1b50 	vldr	d1, [pc, #320]	@ 8007028 <findAndTakeBall+0x310>
 8006ee8:	ed97 0b52 	vldr	d0, [r7, #328]	@ 0x148
 8006eec:	f7fe fb74 	bl	80055d8 <PID_controller>
 8006ef0:	ed87 0b5c 	vstr	d0, [r7, #368]	@ 0x170
        Vy = PID_controller(yBall, 0.0, 1.4, 0.0, 0.0);
 8006ef4:	ed9f 4b4c 	vldr	d4, [pc, #304]	@ 8007028 <findAndTakeBall+0x310>
 8006ef8:	ed9f 3b4b 	vldr	d3, [pc, #300]	@ 8007028 <findAndTakeBall+0x310>
 8006efc:	ed9f 2b4e 	vldr	d2, [pc, #312]	@ 8007038 <findAndTakeBall+0x320>
 8006f00:	ed9f 1b49 	vldr	d1, [pc, #292]	@ 8007028 <findAndTakeBall+0x310>
 8006f04:	ed97 0b50 	vldr	d0, [r7, #320]	@ 0x140
 8006f08:	f7fe fb66 	bl	80055d8 <PID_controller>
 8006f0c:	ed87 0b5a 	vstr	d0, [r7, #360]	@ 0x168
        W = PID_controllerH(ballAngle, 0.0, 1.0);
 8006f10:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 8006f14:	f7f9 fb06 	bl	8000524 <__aeabi_i2d>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	ed9f 2b44 	vldr	d2, [pc, #272]	@ 8007030 <findAndTakeBall+0x318>
 8006f20:	ed9f 1b41 	vldr	d1, [pc, #260]	@ 8007028 <findAndTakeBall+0x310>
 8006f24:	ec43 2b10 	vmov	d0, r2, r3
 8006f28:	f7fe fbe0 	bl	80056ec <PID_controllerH>
 8006f2c:	ed87 0b58 	vstr	d0, [r7, #352]	@ 0x160

        if(ballDistance <= 400) {Vx = 0; Vy = 1000; W = 0;}
 8006f30:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8006f34:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8006f38:	dc10      	bgt.n	8006f5c <findAndTakeBall+0x244>
 8006f3a:	f04f 0200 	mov.w	r2, #0
 8006f3e:	f04f 0300 	mov.w	r3, #0
 8006f42:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
 8006f46:	f04f 0200 	mov.w	r2, #0
 8006f4a:	4b45      	ldr	r3, [pc, #276]	@ (8007060 <findAndTakeBall+0x348>)
 8006f4c:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	f04f 0300 	mov.w	r3, #0
 8006f58:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160

        Inverse_Kinematics(Vx, Vy, W);
 8006f5c:	ed97 2b58 	vldr	d2, [r7, #352]	@ 0x160
 8006f60:	ed97 1b5a 	vldr	d1, [r7, #360]	@ 0x168
 8006f64:	ed97 0b5c 	vldr	d0, [r7, #368]	@ 0x170
 8006f68:	f7fa f8ee 	bl	8001148 <Inverse_Kinematics>
        setMotorSpeed(1, -1000);
 8006f6c:	ed9f 0b34 	vldr	d0, [pc, #208]	@ 8007040 <findAndTakeBall+0x328>
 8006f70:	2001      	movs	r0, #1
 8006f72:	f7fa f873 	bl	800105c <setMotorSpeed>
        lastTimeBallSeen = timer;
 8006f76:	4a3b      	ldr	r2, [pc, #236]	@ (8007064 <findAndTakeBall+0x34c>)
 8006f78:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006f7c:	6013      	str	r3, [r2, #0]
        searchStartTime = timer;
 8006f7e:	4a3a      	ldr	r2, [pc, #232]	@ (8007068 <findAndTakeBall+0x350>)
 8006f80:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006f84:	6013      	str	r3, [r2, #0]
//                    }
//                    break;
//            }
//        }
    }
}
 8006f86:	e1a7      	b.n	80072d8 <findAndTakeBall+0x5c0>
    else if (timer - lastTimeBallSeen <= 700)
 8006f88:	4b36      	ldr	r3, [pc, #216]	@ (8007064 <findAndTakeBall+0x34c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8006f96:	d80d      	bhi.n	8006fb4 <findAndTakeBall+0x29c>
        Inverse_Kinematics(0, 1300, 0);
 8006f98:	ed9f 2b23 	vldr	d2, [pc, #140]	@ 8007028 <findAndTakeBall+0x310>
 8006f9c:	ed9f 1b2a 	vldr	d1, [pc, #168]	@ 8007048 <findAndTakeBall+0x330>
 8006fa0:	ed9f 0b21 	vldr	d0, [pc, #132]	@ 8007028 <findAndTakeBall+0x310>
 8006fa4:	f7fa f8d0 	bl	8001148 <Inverse_Kinematics>
        setMotorSpeed(1, -1000);
 8006fa8:	ed9f 0b25 	vldr	d0, [pc, #148]	@ 8007040 <findAndTakeBall+0x328>
 8006fac:	2001      	movs	r0, #1
 8006fae:	f7fa f855 	bl	800105c <setMotorSpeed>
}
 8006fb2:	e191      	b.n	80072d8 <findAndTakeBall+0x5c0>
        setMotorSpeed(1, 0);
 8006fb4:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 8007028 <findAndTakeBall+0x310>
 8006fb8:	2001      	movs	r0, #1
 8006fba:	f7fa f84f 	bl	800105c <setMotorSpeed>
        setMotorSpeed(2, 0);
 8006fbe:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 8007028 <findAndTakeBall+0x310>
 8006fc2:	2002      	movs	r0, #2
 8006fc4:	f7fa f84a 	bl	800105c <setMotorSpeed>
        setMotorSpeed(7, 0);
 8006fc8:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8007028 <findAndTakeBall+0x310>
 8006fcc:	2007      	movs	r0, #7
 8006fce:	f7fa f845 	bl	800105c <setMotorSpeed>
        if (searchStartTime == 0) {searchStartTime = timer;}
 8006fd2:	4b25      	ldr	r3, [pc, #148]	@ (8007068 <findAndTakeBall+0x350>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d103      	bne.n	8006fe2 <findAndTakeBall+0x2ca>
 8006fda:	4a23      	ldr	r2, [pc, #140]	@ (8007068 <findAndTakeBall+0x350>)
 8006fdc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006fe0:	6013      	str	r3, [r2, #0]
        switch(searchMode)
 8006fe2:	4b22      	ldr	r3, [pc, #136]	@ (800706c <findAndTakeBall+0x354>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	f200 8175 	bhi.w	80072d8 <findAndTakeBall+0x5c0>
 8006fee:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff4 <findAndTakeBall+0x2dc>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	08007071 	.word	0x08007071
 8006ff8:	080070fb 	.word	0x080070fb
 8006ffc:	0800719b 	.word	0x0800719b
 8007000:	08007239 	.word	0x08007239
 8007004:	f3af 8000 	nop.w
 8007008:	00000000 	.word	0x00000000
 800700c:	c0a5e000 	.word	0xc0a5e000
 8007010:	00000000 	.word	0x00000000
 8007014:	c0666000 	.word	0xc0666000
 8007018:	00000000 	.word	0x00000000
 800701c:	c08c2000 	.word	0xc08c2000
 8007020:	54442d18 	.word	0x54442d18
 8007024:	400921fb 	.word	0x400921fb
	...
 8007034:	3ff00000 	.word	0x3ff00000
 8007038:	66666666 	.word	0x66666666
 800703c:	3ff66666 	.word	0x3ff66666
 8007040:	00000000 	.word	0x00000000
 8007044:	c08f4000 	.word	0xc08f4000
 8007048:	00000000 	.word	0x00000000
 800704c:	40945000 	.word	0x40945000
 8007050:	2000057c 	.word	0x2000057c
 8007054:	c0568000 	.word	0xc0568000
 8007058:	408c2000 	.word	0x408c2000
 800705c:	40668000 	.word	0x40668000
 8007060:	408f4000 	.word	0x408f4000
 8007064:	2000073c 	.word	0x2000073c
 8007068:	20000740 	.word	0x20000740
 800706c:	200000ca 	.word	0x200000ca
        	if(timer - searchStartTime >= 6000)
 8007070:	4bb5      	ldr	r3, [pc, #724]	@ (8007348 <findAndTakeBall+0x630>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	f241 726f 	movw	r2, #5999	@ 0x176f
 800707e:	4293      	cmp	r3, r2
 8007080:	d907      	bls.n	8007092 <findAndTakeBall+0x37a>
        		searchMode += lastSearchMode;
 8007082:	4bb2      	ldr	r3, [pc, #712]	@ (800734c <findAndTakeBall+0x634>)
 8007084:	781a      	ldrb	r2, [r3, #0]
 8007086:	4bb2      	ldr	r3, [pc, #712]	@ (8007350 <findAndTakeBall+0x638>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	4413      	add	r3, r2
 800708c:	b2da      	uxtb	r2, r3
 800708e:	4baf      	ldr	r3, [pc, #700]	@ (800734c <findAndTakeBall+0x634>)
 8007090:	701a      	strb	r2, [r3, #0]
        	if(lastSearchMode == 1)
 8007092:	4baf      	ldr	r3, [pc, #700]	@ (8007350 <findAndTakeBall+0x638>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d10c      	bne.n	80070b4 <findAndTakeBall+0x39c>
        		lookForTheBall(-10.0, -170.0, position.h);
 800709a:	ed97 7b40 	vldr	d7, [r7, #256]	@ 0x100
 800709e:	eeb0 2a47 	vmov.f32	s4, s14
 80070a2:	eef0 2a67 	vmov.f32	s5, s15
 80070a6:	ed9f 1b90 	vldr	d1, [pc, #576]	@ 80072e8 <findAndTakeBall+0x5d0>
 80070aa:	ed9f 0b91 	vldr	d0, [pc, #580]	@ 80072f0 <findAndTakeBall+0x5d8>
 80070ae:	f7fe fd07 	bl	8005ac0 <lookForTheBall>
        	break;
 80070b2:	e10a      	b.n	80072ca <findAndTakeBall+0x5b2>
        	else if(lastSearchMode == 2)
 80070b4:	4ba6      	ldr	r3, [pc, #664]	@ (8007350 <findAndTakeBall+0x638>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d10c      	bne.n	80070d6 <findAndTakeBall+0x3be>
        		lookForTheBall(-100.0, 100.0, position.h);
 80070bc:	ed97 7b40 	vldr	d7, [r7, #256]	@ 0x100
 80070c0:	eeb0 2a47 	vmov.f32	s4, s14
 80070c4:	eef0 2a67 	vmov.f32	s5, s15
 80070c8:	ed9f 1b8b 	vldr	d1, [pc, #556]	@ 80072f8 <findAndTakeBall+0x5e0>
 80070cc:	ed9f 0b8c 	vldr	d0, [pc, #560]	@ 8007300 <findAndTakeBall+0x5e8>
 80070d0:	f7fe fcf6 	bl	8005ac0 <lookForTheBall>
        	break;
 80070d4:	e0f9      	b.n	80072ca <findAndTakeBall+0x5b2>
        	else if(lastSearchMode == 3)
 80070d6:	4b9e      	ldr	r3, [pc, #632]	@ (8007350 <findAndTakeBall+0x638>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b03      	cmp	r3, #3
 80070dc:	f040 80f5 	bne.w	80072ca <findAndTakeBall+0x5b2>
        		lookForTheBall(-70.0, 70.0, position.h);
 80070e0:	ed97 7b40 	vldr	d7, [r7, #256]	@ 0x100
 80070e4:	eeb0 2a47 	vmov.f32	s4, s14
 80070e8:	eef0 2a67 	vmov.f32	s5, s15
 80070ec:	ed9f 1b86 	vldr	d1, [pc, #536]	@ 8007308 <findAndTakeBall+0x5f0>
 80070f0:	ed9f 0b87 	vldr	d0, [pc, #540]	@ 8007310 <findAndTakeBall+0x5f8>
 80070f4:	f7fe fce4 	bl	8005ac0 <lookForTheBall>
        	break;
 80070f8:	e0e7      	b.n	80072ca <findAndTakeBall+0x5b2>
        	lastSearchMode = 2;
 80070fa:	4b95      	ldr	r3, [pc, #596]	@ (8007350 <findAndTakeBall+0x638>)
 80070fc:	2202      	movs	r2, #2
 80070fe:	701a      	strb	r2, [r3, #0]
        	PID_External(findBall2, 1.8, 0.0, 0.0, 1.3, 0.8, 3000);
 8007100:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8007104:	f5a3 7694 	sub.w	r6, r3, #296	@ 0x128
 8007108:	466d      	mov	r5, sp
 800710a:	f106 0410 	add.w	r4, r6, #16
 800710e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800711a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800711e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007122:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007126:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8007318 <findAndTakeBall+0x600>
 800712a:	ed9f 4b7d 	vldr	d4, [pc, #500]	@ 8007320 <findAndTakeBall+0x608>
 800712e:	ed9f 3b7e 	vldr	d3, [pc, #504]	@ 8007328 <findAndTakeBall+0x610>
 8007132:	ed9f 2b7f 	vldr	d2, [pc, #508]	@ 8007330 <findAndTakeBall+0x618>
 8007136:	ed9f 1b7e 	vldr	d1, [pc, #504]	@ 8007330 <findAndTakeBall+0x618>
 800713a:	ed9f 0b7f 	vldr	d0, [pc, #508]	@ 8007338 <findAndTakeBall+0x620>
 800713e:	f7fe fd2f 	bl	8005ba0 <PID_External>
        	searchStartTime = timer;
 8007142:	4a81      	ldr	r2, [pc, #516]	@ (8007348 <findAndTakeBall+0x630>)
 8007144:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007148:	6013      	str	r3, [r2, #0]
        	if(atTargetExternal(findBall2, position, 100, 10))
 800714a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800714e:	f5a3 7694 	sub.w	r6, r3, #296	@ 0x128
 8007152:	a810      	add	r0, sp, #64	@ 0x40
 8007154:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8007158:	2250      	movs	r2, #80	@ 0x50
 800715a:	4619      	mov	r1, r3
 800715c:	f006 f923 	bl	800d3a6 <memcpy>
 8007160:	466d      	mov	r5, sp
 8007162:	f106 0410 	add.w	r4, r6, #16
 8007166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800716a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800716c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800716e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007172:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007176:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800717a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800717e:	ed9f 1b70 	vldr	d1, [pc, #448]	@ 8007340 <findAndTakeBall+0x628>
 8007182:	ed9f 0b5d 	vldr	d0, [pc, #372]	@ 80072f8 <findAndTakeBall+0x5e0>
 8007186:	f7fe fbed 	bl	8005964 <atTargetExternal>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 809e 	beq.w	80072ce <findAndTakeBall+0x5b6>
        		searchMode = 1;
 8007192:	4b6e      	ldr	r3, [pc, #440]	@ (800734c <findAndTakeBall+0x634>)
 8007194:	2201      	movs	r2, #1
 8007196:	701a      	strb	r2, [r3, #0]
        	break;
 8007198:	e099      	b.n	80072ce <findAndTakeBall+0x5b6>
        	lastSearchMode = 3;
 800719a:	4b6d      	ldr	r3, [pc, #436]	@ (8007350 <findAndTakeBall+0x638>)
 800719c:	2203      	movs	r2, #3
 800719e:	701a      	strb	r2, [r3, #0]
        	PID_External(findBall3, 1.8, 0.0, 0.0, 1.3, 0.8, 3000);
 80071a0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80071a4:	f5a3 76bc 	sub.w	r6, r3, #376	@ 0x178
 80071a8:	466d      	mov	r5, sp
 80071aa:	f106 0410 	add.w	r4, r6, #16
 80071ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80071be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80071c2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80071c6:	ed9f 5b54 	vldr	d5, [pc, #336]	@ 8007318 <findAndTakeBall+0x600>
 80071ca:	ed9f 4b55 	vldr	d4, [pc, #340]	@ 8007320 <findAndTakeBall+0x608>
 80071ce:	ed9f 3b56 	vldr	d3, [pc, #344]	@ 8007328 <findAndTakeBall+0x610>
 80071d2:	ed9f 2b57 	vldr	d2, [pc, #348]	@ 8007330 <findAndTakeBall+0x618>
 80071d6:	ed9f 1b56 	vldr	d1, [pc, #344]	@ 8007330 <findAndTakeBall+0x618>
 80071da:	ed9f 0b57 	vldr	d0, [pc, #348]	@ 8007338 <findAndTakeBall+0x620>
 80071de:	f7fe fcdf 	bl	8005ba0 <PID_External>
        	searchStartTime = timer;
 80071e2:	4a59      	ldr	r2, [pc, #356]	@ (8007348 <findAndTakeBall+0x630>)
 80071e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80071e8:	6013      	str	r3, [r2, #0]
        	if(atTargetExternal(findBall3, position, 100, 10))
 80071ea:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80071ee:	f5a3 76bc 	sub.w	r6, r3, #376	@ 0x178
 80071f2:	a810      	add	r0, sp, #64	@ 0x40
 80071f4:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80071f8:	2250      	movs	r2, #80	@ 0x50
 80071fa:	4619      	mov	r1, r3
 80071fc:	f006 f8d3 	bl	800d3a6 <memcpy>
 8007200:	466d      	mov	r5, sp
 8007202:	f106 0410 	add.w	r4, r6, #16
 8007206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800720a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800720c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800720e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007212:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007216:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800721a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800721e:	ed9f 1b48 	vldr	d1, [pc, #288]	@ 8007340 <findAndTakeBall+0x628>
 8007222:	ed9f 0b35 	vldr	d0, [pc, #212]	@ 80072f8 <findAndTakeBall+0x5e0>
 8007226:	f7fe fb9d 	bl	8005964 <atTargetExternal>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d050      	beq.n	80072d2 <findAndTakeBall+0x5ba>
        		searchMode = 1;
 8007230:	4b46      	ldr	r3, [pc, #280]	@ (800734c <findAndTakeBall+0x634>)
 8007232:	2201      	movs	r2, #1
 8007234:	701a      	strb	r2, [r3, #0]
        	break;
 8007236:	e04c      	b.n	80072d2 <findAndTakeBall+0x5ba>
        	lastSearchMode = 1;
 8007238:	4b45      	ldr	r3, [pc, #276]	@ (8007350 <findAndTakeBall+0x638>)
 800723a:	2201      	movs	r2, #1
 800723c:	701a      	strb	r2, [r3, #0]
        	PID_External(findBall1, 1.8, 0.0, 0.0, 1.3, 0.8, 3000);
 800723e:	466d      	mov	r5, sp
 8007240:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8007244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800724a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800724c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800724e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007250:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007254:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007258:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800725c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800725e:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8007318 <findAndTakeBall+0x600>
 8007262:	ed9f 4b2f 	vldr	d4, [pc, #188]	@ 8007320 <findAndTakeBall+0x608>
 8007266:	ed9f 3b30 	vldr	d3, [pc, #192]	@ 8007328 <findAndTakeBall+0x610>
 800726a:	ed9f 2b31 	vldr	d2, [pc, #196]	@ 8007330 <findAndTakeBall+0x618>
 800726e:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 8007330 <findAndTakeBall+0x618>
 8007272:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 8007338 <findAndTakeBall+0x620>
 8007276:	f7fe fc93 	bl	8005ba0 <PID_External>
        	searchStartTime = timer;
 800727a:	4a33      	ldr	r2, [pc, #204]	@ (8007348 <findAndTakeBall+0x630>)
 800727c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007280:	6013      	str	r3, [r2, #0]
        	if(atTargetExternal(findBall1, position, 100, 10))
 8007282:	a810      	add	r0, sp, #64	@ 0x40
 8007284:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8007288:	2250      	movs	r2, #80	@ 0x50
 800728a:	4619      	mov	r1, r3
 800728c:	f006 f88b 	bl	800d3a6 <memcpy>
 8007290:	466d      	mov	r5, sp
 8007292:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8007296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800729a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800729c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800729e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80072a6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80072aa:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80072ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072b0:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8007340 <findAndTakeBall+0x628>
 80072b4:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 80072f8 <findAndTakeBall+0x5e0>
 80072b8:	f7fe fb54 	bl	8005964 <atTargetExternal>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d009      	beq.n	80072d6 <findAndTakeBall+0x5be>
        		searchMode = 1;
 80072c2:	4b22      	ldr	r3, [pc, #136]	@ (800734c <findAndTakeBall+0x634>)
 80072c4:	2201      	movs	r2, #1
 80072c6:	701a      	strb	r2, [r3, #0]
        	break;
 80072c8:	e005      	b.n	80072d6 <findAndTakeBall+0x5be>
        	break;
 80072ca:	bf00      	nop
 80072cc:	e004      	b.n	80072d8 <findAndTakeBall+0x5c0>
        	break;
 80072ce:	bf00      	nop
 80072d0:	e002      	b.n	80072d8 <findAndTakeBall+0x5c0>
        	break;
 80072d2:	bf00      	nop
 80072d4:	e000      	b.n	80072d8 <findAndTakeBall+0x5c0>
        	break;
 80072d6:	bf00      	nop
}
 80072d8:	bf00      	nop
 80072da:	f507 77be 	add.w	r7, r7, #380	@ 0x17c
 80072de:	46bd      	mov	sp, r7
 80072e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072e2:	bf00      	nop
 80072e4:	f3af 8000 	nop.w
 80072e8:	00000000 	.word	0x00000000
 80072ec:	c0654000 	.word	0xc0654000
 80072f0:	00000000 	.word	0x00000000
 80072f4:	c0240000 	.word	0xc0240000
 80072f8:	00000000 	.word	0x00000000
 80072fc:	40590000 	.word	0x40590000
 8007300:	00000000 	.word	0x00000000
 8007304:	c0590000 	.word	0xc0590000
 8007308:	00000000 	.word	0x00000000
 800730c:	40518000 	.word	0x40518000
 8007310:	00000000 	.word	0x00000000
 8007314:	c0518000 	.word	0xc0518000
 8007318:	00000000 	.word	0x00000000
 800731c:	40a77000 	.word	0x40a77000
 8007320:	9999999a 	.word	0x9999999a
 8007324:	3fe99999 	.word	0x3fe99999
 8007328:	cccccccd 	.word	0xcccccccd
 800732c:	3ff4cccc 	.word	0x3ff4cccc
	...
 8007338:	cccccccd 	.word	0xcccccccd
 800733c:	3ffccccc 	.word	0x3ffccccc
 8007340:	00000000 	.word	0x00000000
 8007344:	40240000 	.word	0x40240000
 8007348:	20000740 	.word	0x20000740
 800734c:	200000ca 	.word	0x200000ca
 8007350:	200000cb 	.word	0x200000cb

08007354 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800735a:	2300      	movs	r3, #0
 800735c:	607b      	str	r3, [r7, #4]
 800735e:	4b10      	ldr	r3, [pc, #64]	@ (80073a0 <HAL_MspInit+0x4c>)
 8007360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007362:	4a0f      	ldr	r2, [pc, #60]	@ (80073a0 <HAL_MspInit+0x4c>)
 8007364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007368:	6453      	str	r3, [r2, #68]	@ 0x44
 800736a:	4b0d      	ldr	r3, [pc, #52]	@ (80073a0 <HAL_MspInit+0x4c>)
 800736c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800736e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007372:	607b      	str	r3, [r7, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007376:	2300      	movs	r3, #0
 8007378:	603b      	str	r3, [r7, #0]
 800737a:	4b09      	ldr	r3, [pc, #36]	@ (80073a0 <HAL_MspInit+0x4c>)
 800737c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800737e:	4a08      	ldr	r2, [pc, #32]	@ (80073a0 <HAL_MspInit+0x4c>)
 8007380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007384:	6413      	str	r3, [r2, #64]	@ 0x40
 8007386:	4b06      	ldr	r3, [pc, #24]	@ (80073a0 <HAL_MspInit+0x4c>)
 8007388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007392:	2007      	movs	r0, #7
 8007394:	f000 fd18 	bl	8007dc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007398:	bf00      	nop
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	40023800 	.word	0x40023800

080073a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b08a      	sub	sp, #40	@ 0x28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073ac:	f107 0314 	add.w	r3, r7, #20
 80073b0:	2200      	movs	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	605a      	str	r2, [r3, #4]
 80073b6:	609a      	str	r2, [r3, #8]
 80073b8:	60da      	str	r2, [r3, #12]
 80073ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a19      	ldr	r2, [pc, #100]	@ (8007428 <HAL_I2C_MspInit+0x84>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d12c      	bne.n	8007420 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073c6:	2300      	movs	r3, #0
 80073c8:	613b      	str	r3, [r7, #16]
 80073ca:	4b18      	ldr	r3, [pc, #96]	@ (800742c <HAL_I2C_MspInit+0x88>)
 80073cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ce:	4a17      	ldr	r2, [pc, #92]	@ (800742c <HAL_I2C_MspInit+0x88>)
 80073d0:	f043 0302 	orr.w	r3, r3, #2
 80073d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80073d6:	4b15      	ldr	r3, [pc, #84]	@ (800742c <HAL_I2C_MspInit+0x88>)
 80073d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	613b      	str	r3, [r7, #16]
 80073e0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80073e2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80073e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80073e8:	2312      	movs	r3, #18
 80073ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ec:	2300      	movs	r3, #0
 80073ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073f0:	2303      	movs	r3, #3
 80073f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80073f4:	2304      	movs	r3, #4
 80073f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073f8:	f107 0314 	add.w	r3, r7, #20
 80073fc:	4619      	mov	r1, r3
 80073fe:	480c      	ldr	r0, [pc, #48]	@ (8007430 <HAL_I2C_MspInit+0x8c>)
 8007400:	f000 fdb6 	bl	8007f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	4b08      	ldr	r3, [pc, #32]	@ (800742c <HAL_I2C_MspInit+0x88>)
 800740a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740c:	4a07      	ldr	r2, [pc, #28]	@ (800742c <HAL_I2C_MspInit+0x88>)
 800740e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007412:	6413      	str	r3, [r2, #64]	@ 0x40
 8007414:	4b05      	ldr	r3, [pc, #20]	@ (800742c <HAL_I2C_MspInit+0x88>)
 8007416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007418:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007420:	bf00      	nop
 8007422:	3728      	adds	r7, #40	@ 0x28
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40005800 	.word	0x40005800
 800742c:	40023800 	.word	0x40023800
 8007430:	40020400 	.word	0x40020400

08007434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a2a      	ldr	r2, [pc, #168]	@ (80074ec <HAL_TIM_Base_MspInit+0xb8>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d116      	bne.n	8007474 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]
 800744a:	4b29      	ldr	r3, [pc, #164]	@ (80074f0 <HAL_TIM_Base_MspInit+0xbc>)
 800744c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800744e:	4a28      	ldr	r2, [pc, #160]	@ (80074f0 <HAL_TIM_Base_MspInit+0xbc>)
 8007450:	f043 0301 	orr.w	r3, r3, #1
 8007454:	6453      	str	r3, [r2, #68]	@ 0x44
 8007456:	4b26      	ldr	r3, [pc, #152]	@ (80074f0 <HAL_TIM_Base_MspInit+0xbc>)
 8007458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	617b      	str	r3, [r7, #20]
 8007460:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8007462:	2200      	movs	r2, #0
 8007464:	2100      	movs	r1, #0
 8007466:	201b      	movs	r0, #27
 8007468:	f000 fcb9 	bl	8007dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800746c:	201b      	movs	r0, #27
 800746e:	f000 fcd2 	bl	8007e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007472:	e036      	b.n	80074e2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800747c:	d116      	bne.n	80074ac <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800747e:	2300      	movs	r3, #0
 8007480:	613b      	str	r3, [r7, #16]
 8007482:	4b1b      	ldr	r3, [pc, #108]	@ (80074f0 <HAL_TIM_Base_MspInit+0xbc>)
 8007484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007486:	4a1a      	ldr	r2, [pc, #104]	@ (80074f0 <HAL_TIM_Base_MspInit+0xbc>)
 8007488:	f043 0301 	orr.w	r3, r3, #1
 800748c:	6413      	str	r3, [r2, #64]	@ 0x40
 800748e:	4b18      	ldr	r3, [pc, #96]	@ (80074f0 <HAL_TIM_Base_MspInit+0xbc>)
 8007490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	613b      	str	r3, [r7, #16]
 8007498:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800749a:	2200      	movs	r2, #0
 800749c:	2100      	movs	r1, #0
 800749e:	201c      	movs	r0, #28
 80074a0:	f000 fc9d 	bl	8007dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80074a4:	201c      	movs	r0, #28
 80074a6:	f000 fcb6 	bl	8007e16 <HAL_NVIC_EnableIRQ>
}
 80074aa:	e01a      	b.n	80074e2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a10      	ldr	r2, [pc, #64]	@ (80074f4 <HAL_TIM_Base_MspInit+0xc0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d115      	bne.n	80074e2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	4b0d      	ldr	r3, [pc, #52]	@ (80074f0 <HAL_TIM_Base_MspInit+0xbc>)
 80074bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074be:	4a0c      	ldr	r2, [pc, #48]	@ (80074f0 <HAL_TIM_Base_MspInit+0xbc>)
 80074c0:	f043 0302 	orr.w	r3, r3, #2
 80074c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80074c6:	4b0a      	ldr	r3, [pc, #40]	@ (80074f0 <HAL_TIM_Base_MspInit+0xbc>)
 80074c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80074d2:	2200      	movs	r2, #0
 80074d4:	2100      	movs	r1, #0
 80074d6:	202e      	movs	r0, #46	@ 0x2e
 80074d8:	f000 fc81 	bl	8007dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80074dc:	202e      	movs	r0, #46	@ 0x2e
 80074de:	f000 fc9a 	bl	8007e16 <HAL_NVIC_EnableIRQ>
}
 80074e2:	bf00      	nop
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	40010000 	.word	0x40010000
 80074f0:	40023800 	.word	0x40023800
 80074f4:	40010400 	.word	0x40010400

080074f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08a      	sub	sp, #40	@ 0x28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007500:	f107 0314 	add.w	r3, r7, #20
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	605a      	str	r2, [r3, #4]
 800750a:	609a      	str	r2, [r3, #8]
 800750c:	60da      	str	r2, [r3, #12]
 800750e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a37      	ldr	r2, [pc, #220]	@ (80075f4 <HAL_TIM_MspPostInit+0xfc>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d11f      	bne.n	800755a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800751a:	2300      	movs	r3, #0
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	4b36      	ldr	r3, [pc, #216]	@ (80075f8 <HAL_TIM_MspPostInit+0x100>)
 8007520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007522:	4a35      	ldr	r2, [pc, #212]	@ (80075f8 <HAL_TIM_MspPostInit+0x100>)
 8007524:	f043 0310 	orr.w	r3, r3, #16
 8007528:	6313      	str	r3, [r2, #48]	@ 0x30
 800752a:	4b33      	ldr	r3, [pc, #204]	@ (80075f8 <HAL_TIM_MspPostInit+0x100>)
 800752c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752e:	f003 0310 	and.w	r3, r3, #16
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8007536:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800753a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800753c:	2312      	movs	r3, #18
 800753e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007540:	2302      	movs	r3, #2
 8007542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007544:	2303      	movs	r3, #3
 8007546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007548:	2301      	movs	r3, #1
 800754a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800754c:	f107 0314 	add.w	r3, r7, #20
 8007550:	4619      	mov	r1, r3
 8007552:	482a      	ldr	r0, [pc, #168]	@ (80075fc <HAL_TIM_MspPostInit+0x104>)
 8007554:	f000 fd0c 	bl	8007f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8007558:	e047      	b.n	80075ea <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007562:	d11e      	bne.n	80075a2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	4b23      	ldr	r3, [pc, #140]	@ (80075f8 <HAL_TIM_MspPostInit+0x100>)
 800756a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756c:	4a22      	ldr	r2, [pc, #136]	@ (80075f8 <HAL_TIM_MspPostInit+0x100>)
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	6313      	str	r3, [r2, #48]	@ 0x30
 8007574:	4b20      	ldr	r3, [pc, #128]	@ (80075f8 <HAL_TIM_MspPostInit+0x100>)
 8007576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007580:	230c      	movs	r3, #12
 8007582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007584:	2312      	movs	r3, #18
 8007586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007588:	2302      	movs	r3, #2
 800758a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800758c:	2303      	movs	r3, #3
 800758e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007590:	2301      	movs	r3, #1
 8007592:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007594:	f107 0314 	add.w	r3, r7, #20
 8007598:	4619      	mov	r1, r3
 800759a:	4819      	ldr	r0, [pc, #100]	@ (8007600 <HAL_TIM_MspPostInit+0x108>)
 800759c:	f000 fce8 	bl	8007f70 <HAL_GPIO_Init>
}
 80075a0:	e023      	b.n	80075ea <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a17      	ldr	r2, [pc, #92]	@ (8007604 <HAL_TIM_MspPostInit+0x10c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d11e      	bne.n	80075ea <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075ac:	2300      	movs	r3, #0
 80075ae:	60bb      	str	r3, [r7, #8]
 80075b0:	4b11      	ldr	r3, [pc, #68]	@ (80075f8 <HAL_TIM_MspPostInit+0x100>)
 80075b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b4:	4a10      	ldr	r2, [pc, #64]	@ (80075f8 <HAL_TIM_MspPostInit+0x100>)
 80075b6:	f043 0304 	orr.w	r3, r3, #4
 80075ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80075bc:	4b0e      	ldr	r3, [pc, #56]	@ (80075f8 <HAL_TIM_MspPostInit+0x100>)
 80075be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c0:	f003 0304 	and.w	r3, r3, #4
 80075c4:	60bb      	str	r3, [r7, #8]
 80075c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80075c8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80075cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075ce:	2312      	movs	r3, #18
 80075d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80075d2:	2302      	movs	r3, #2
 80075d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075d6:	2303      	movs	r3, #3
 80075d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80075da:	2303      	movs	r3, #3
 80075dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075de:	f107 0314 	add.w	r3, r7, #20
 80075e2:	4619      	mov	r1, r3
 80075e4:	4808      	ldr	r0, [pc, #32]	@ (8007608 <HAL_TIM_MspPostInit+0x110>)
 80075e6:	f000 fcc3 	bl	8007f70 <HAL_GPIO_Init>
}
 80075ea:	bf00      	nop
 80075ec:	3728      	adds	r7, #40	@ 0x28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	40010000 	.word	0x40010000
 80075f8:	40023800 	.word	0x40023800
 80075fc:	40021000 	.word	0x40021000
 8007600:	40020000 	.word	0x40020000
 8007604:	40010400 	.word	0x40010400
 8007608:	40020800 	.word	0x40020800

0800760c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08e      	sub	sp, #56	@ 0x38
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	605a      	str	r2, [r3, #4]
 800761e:	609a      	str	r2, [r3, #8]
 8007620:	60da      	str	r2, [r3, #12]
 8007622:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a57      	ldr	r2, [pc, #348]	@ (8007788 <HAL_UART_MspInit+0x17c>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d134      	bne.n	8007698 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800762e:	2300      	movs	r3, #0
 8007630:	623b      	str	r3, [r7, #32]
 8007632:	4b56      	ldr	r3, [pc, #344]	@ (800778c <HAL_UART_MspInit+0x180>)
 8007634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007636:	4a55      	ldr	r2, [pc, #340]	@ (800778c <HAL_UART_MspInit+0x180>)
 8007638:	f043 0310 	orr.w	r3, r3, #16
 800763c:	6453      	str	r3, [r2, #68]	@ 0x44
 800763e:	4b53      	ldr	r3, [pc, #332]	@ (800778c <HAL_UART_MspInit+0x180>)
 8007640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007642:	f003 0310 	and.w	r3, r3, #16
 8007646:	623b      	str	r3, [r7, #32]
 8007648:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800764a:	2300      	movs	r3, #0
 800764c:	61fb      	str	r3, [r7, #28]
 800764e:	4b4f      	ldr	r3, [pc, #316]	@ (800778c <HAL_UART_MspInit+0x180>)
 8007650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007652:	4a4e      	ldr	r2, [pc, #312]	@ (800778c <HAL_UART_MspInit+0x180>)
 8007654:	f043 0302 	orr.w	r3, r3, #2
 8007658:	6313      	str	r3, [r2, #48]	@ 0x30
 800765a:	4b4c      	ldr	r3, [pc, #304]	@ (800778c <HAL_UART_MspInit+0x180>)
 800765c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	61fb      	str	r3, [r7, #28]
 8007664:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007666:	23c0      	movs	r3, #192	@ 0xc0
 8007668:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800766a:	2302      	movs	r3, #2
 800766c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800766e:	2300      	movs	r3, #0
 8007670:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007672:	2303      	movs	r3, #3
 8007674:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007676:	2307      	movs	r3, #7
 8007678:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800767a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800767e:	4619      	mov	r1, r3
 8007680:	4843      	ldr	r0, [pc, #268]	@ (8007790 <HAL_UART_MspInit+0x184>)
 8007682:	f000 fc75 	bl	8007f70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007686:	2200      	movs	r2, #0
 8007688:	2100      	movs	r1, #0
 800768a:	2025      	movs	r0, #37	@ 0x25
 800768c:	f000 fba7 	bl	8007dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007690:	2025      	movs	r0, #37	@ 0x25
 8007692:	f000 fbc0 	bl	8007e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007696:	e073      	b.n	8007780 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a3d      	ldr	r2, [pc, #244]	@ (8007794 <HAL_UART_MspInit+0x188>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d134      	bne.n	800770c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80076a2:	2300      	movs	r3, #0
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	4b39      	ldr	r3, [pc, #228]	@ (800778c <HAL_UART_MspInit+0x180>)
 80076a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076aa:	4a38      	ldr	r2, [pc, #224]	@ (800778c <HAL_UART_MspInit+0x180>)
 80076ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80076b2:	4b36      	ldr	r3, [pc, #216]	@ (800778c <HAL_UART_MspInit+0x180>)
 80076b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80076be:	2300      	movs	r3, #0
 80076c0:	617b      	str	r3, [r7, #20]
 80076c2:	4b32      	ldr	r3, [pc, #200]	@ (800778c <HAL_UART_MspInit+0x180>)
 80076c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c6:	4a31      	ldr	r2, [pc, #196]	@ (800778c <HAL_UART_MspInit+0x180>)
 80076c8:	f043 0308 	orr.w	r3, r3, #8
 80076cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80076ce:	4b2f      	ldr	r3, [pc, #188]	@ (800778c <HAL_UART_MspInit+0x180>)
 80076d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	617b      	str	r3, [r7, #20]
 80076d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80076da:	2360      	movs	r3, #96	@ 0x60
 80076dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076de:	2302      	movs	r3, #2
 80076e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076e6:	2303      	movs	r3, #3
 80076e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80076ea:	2307      	movs	r3, #7
 80076ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076f2:	4619      	mov	r1, r3
 80076f4:	4828      	ldr	r0, [pc, #160]	@ (8007798 <HAL_UART_MspInit+0x18c>)
 80076f6:	f000 fc3b 	bl	8007f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80076fa:	2200      	movs	r2, #0
 80076fc:	2100      	movs	r1, #0
 80076fe:	2026      	movs	r0, #38	@ 0x26
 8007700:	f000 fb6d 	bl	8007dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007704:	2026      	movs	r0, #38	@ 0x26
 8007706:	f000 fb86 	bl	8007e16 <HAL_NVIC_EnableIRQ>
}
 800770a:	e039      	b.n	8007780 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a22      	ldr	r2, [pc, #136]	@ (800779c <HAL_UART_MspInit+0x190>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d134      	bne.n	8007780 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	4b1c      	ldr	r3, [pc, #112]	@ (800778c <HAL_UART_MspInit+0x180>)
 800771c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771e:	4a1b      	ldr	r2, [pc, #108]	@ (800778c <HAL_UART_MspInit+0x180>)
 8007720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007724:	6413      	str	r3, [r2, #64]	@ 0x40
 8007726:	4b19      	ldr	r3, [pc, #100]	@ (800778c <HAL_UART_MspInit+0x180>)
 8007728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	4b15      	ldr	r3, [pc, #84]	@ (800778c <HAL_UART_MspInit+0x180>)
 8007738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800773a:	4a14      	ldr	r2, [pc, #80]	@ (800778c <HAL_UART_MspInit+0x180>)
 800773c:	f043 0304 	orr.w	r3, r3, #4
 8007740:	6313      	str	r3, [r2, #48]	@ 0x30
 8007742:	4b12      	ldr	r3, [pc, #72]	@ (800778c <HAL_UART_MspInit+0x180>)
 8007744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800774e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007752:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007754:	2302      	movs	r3, #2
 8007756:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007758:	2300      	movs	r3, #0
 800775a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800775c:	2303      	movs	r3, #3
 800775e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007760:	2307      	movs	r3, #7
 8007762:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007768:	4619      	mov	r1, r3
 800776a:	480d      	ldr	r0, [pc, #52]	@ (80077a0 <HAL_UART_MspInit+0x194>)
 800776c:	f000 fc00 	bl	8007f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007770:	2200      	movs	r2, #0
 8007772:	2100      	movs	r1, #0
 8007774:	2027      	movs	r0, #39	@ 0x27
 8007776:	f000 fb32 	bl	8007dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800777a:	2027      	movs	r0, #39	@ 0x27
 800777c:	f000 fb4b 	bl	8007e16 <HAL_NVIC_EnableIRQ>
}
 8007780:	bf00      	nop
 8007782:	3738      	adds	r7, #56	@ 0x38
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	40011000 	.word	0x40011000
 800778c:	40023800 	.word	0x40023800
 8007790:	40020400 	.word	0x40020400
 8007794:	40004400 	.word	0x40004400
 8007798:	40020c00 	.word	0x40020c00
 800779c:	40004800 	.word	0x40004800
 80077a0:	40020800 	.word	0x40020800

080077a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <NMI_Handler+0x4>

080077ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80077b0:	bf00      	nop
 80077b2:	e7fd      	b.n	80077b0 <HardFault_Handler+0x4>

080077b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80077b8:	bf00      	nop
 80077ba:	e7fd      	b.n	80077b8 <MemManage_Handler+0x4>

080077bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80077bc:	b480      	push	{r7}
 80077be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80077c0:	bf00      	nop
 80077c2:	e7fd      	b.n	80077c0 <BusFault_Handler+0x4>

080077c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80077c8:	bf00      	nop
 80077ca:	e7fd      	b.n	80077c8 <UsageFault_Handler+0x4>

080077cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80077d0:	bf00      	nop
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80077da:	b480      	push	{r7}
 80077dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80077de:	bf00      	nop
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80077ec:	bf00      	nop
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80077fa:	f000 f9d1 	bl	8007ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80077fe:	bf00      	nop
 8007800:	bd80      	pop	{r7, pc}

08007802 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_2_Pin);
 8007806:	2001      	movs	r0, #1
 8007808:	f000 fd80 	bl	800830c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800780c:	bf00      	nop
 800780e:	bd80      	pop	{r7, pc}

08007810 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_2_Pin);
 8007814:	2002      	movs	r0, #2
 8007816:	f000 fd79 	bl	800830c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800781a:	bf00      	nop
 800781c:	bd80      	pop	{r7, pc}

0800781e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EinB_1_Pin);
 8007822:	2004      	movs	r0, #4
 8007824:	f000 fd72 	bl	800830c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007828:	bf00      	nop
 800782a:	bd80      	pop	{r7, pc}

0800782c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_1_Pin);
 8007830:	2008      	movs	r0, #8
 8007832:	f000 fd6b 	bl	800830c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007836:	bf00      	nop
 8007838:	bd80      	pop	{r7, pc}

0800783a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EB_3_Pin);
 800783e:	2020      	movs	r0, #32
 8007840:	f000 fd64 	bl	800830c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8007844:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007848:	f000 fd60 	bl	800830c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800784c:	bf00      	nop
 800784e:	bd80      	pop	{r7, pc}

08007850 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007854:	4802      	ldr	r0, [pc, #8]	@ (8007860 <TIM1_CC_IRQHandler+0x10>)
 8007856:	f002 f865 	bl	8009924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800785a:	bf00      	nop
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20000320 	.word	0x20000320

08007864 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007868:	4802      	ldr	r0, [pc, #8]	@ (8007874 <TIM2_IRQHandler+0x10>)
 800786a:	f002 f85b 	bl	8009924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800786e:	bf00      	nop
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	20000368 	.word	0x20000368

08007878 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0
//		pitch = sensorData[1];
//		ax = sensorData[2];
//		ay = sensorData[3];
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800787c:	4802      	ldr	r0, [pc, #8]	@ (8007888 <USART1_IRQHandler+0x10>)
 800787e:	f002 ff71 	bl	800a764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007882:	bf00      	nop
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	200003f8 	.word	0x200003f8

0800788c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007890:	4802      	ldr	r0, [pc, #8]	@ (800789c <USART2_IRQHandler+0x10>)
 8007892:	f002 ff67 	bl	800a764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007896:	bf00      	nop
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20000440 	.word	0x20000440

080078a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80078a4:	4802      	ldr	r0, [pc, #8]	@ (80078b0 <USART3_IRQHandler+0x10>)
 80078a6:	f002 ff5d 	bl	800a764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80078aa:	bf00      	nop
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000488 	.word	0x20000488

080078b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 80078b8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80078bc:	f000 fd26 	bl	800830c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 80078c0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80078c4:	f000 fd22 	bl	800830c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_3_Pin);
 80078c8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80078cc:	f000 fd1e 	bl	800830c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EinB_4_Pin);
 80078d0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80078d4:	f000 fd1a 	bl	800830c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button_4_Pin);
 80078d8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80078dc:	f000 fd16 	bl	800830c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80078e0:	bf00      	nop
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80078e8:	4802      	ldr	r0, [pc, #8]	@ (80078f4 <TIM8_CC_IRQHandler+0x10>)
 80078ea:	f002 f81b 	bl	8009924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80078ee:	bf00      	nop
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	200003b0 	.word	0x200003b0

080078f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
  return 1;
 80078fc:	2301      	movs	r3, #1
}
 80078fe:	4618      	mov	r0, r3
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <_kill>:

int _kill(int pid, int sig)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007912:	f005 fd1b 	bl	800d34c <__errno>
 8007916:	4603      	mov	r3, r0
 8007918:	2216      	movs	r2, #22
 800791a:	601a      	str	r2, [r3, #0]
  return -1;
 800791c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <_exit>:

void _exit (int status)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007930:	f04f 31ff 	mov.w	r1, #4294967295
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff ffe7 	bl	8007908 <_kill>
  while (1) {}    /* Make sure we hang here */
 800793a:	bf00      	nop
 800793c:	e7fd      	b.n	800793a <_exit+0x12>

0800793e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b086      	sub	sp, #24
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800794a:	2300      	movs	r3, #0
 800794c:	617b      	str	r3, [r7, #20]
 800794e:	e00a      	b.n	8007966 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007950:	f3af 8000 	nop.w
 8007954:	4601      	mov	r1, r0
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	1c5a      	adds	r2, r3, #1
 800795a:	60ba      	str	r2, [r7, #8]
 800795c:	b2ca      	uxtb	r2, r1
 800795e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	3301      	adds	r3, #1
 8007964:	617b      	str	r3, [r7, #20]
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	429a      	cmp	r2, r3
 800796c:	dbf0      	blt.n	8007950 <_read+0x12>
  }

  return len;
 800796e:	687b      	ldr	r3, [r7, #4]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007984:	2300      	movs	r3, #0
 8007986:	617b      	str	r3, [r7, #20]
 8007988:	e009      	b.n	800799e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	1c5a      	adds	r2, r3, #1
 800798e:	60ba      	str	r2, [r7, #8]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	4618      	mov	r0, r3
 8007994:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	3301      	adds	r3, #1
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	dbf1      	blt.n	800798a <_write+0x12>
  }
  return len;
 80079a6:	687b      	ldr	r3, [r7, #4]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <_close>:

int _close(int file)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80079b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80079d8:	605a      	str	r2, [r3, #4]
  return 0;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <_isatty>:

int _isatty(int file)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80079f0:	2301      	movs	r3, #1
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b085      	sub	sp, #20
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007a20:	4a14      	ldr	r2, [pc, #80]	@ (8007a74 <_sbrk+0x5c>)
 8007a22:	4b15      	ldr	r3, [pc, #84]	@ (8007a78 <_sbrk+0x60>)
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a2c:	4b13      	ldr	r3, [pc, #76]	@ (8007a7c <_sbrk+0x64>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d102      	bne.n	8007a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007a34:	4b11      	ldr	r3, [pc, #68]	@ (8007a7c <_sbrk+0x64>)
 8007a36:	4a12      	ldr	r2, [pc, #72]	@ (8007a80 <_sbrk+0x68>)
 8007a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007a3a:	4b10      	ldr	r3, [pc, #64]	@ (8007a7c <_sbrk+0x64>)
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4413      	add	r3, r2
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d207      	bcs.n	8007a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a48:	f005 fc80 	bl	800d34c <__errno>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	220c      	movs	r2, #12
 8007a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007a52:	f04f 33ff 	mov.w	r3, #4294967295
 8007a56:	e009      	b.n	8007a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a58:	4b08      	ldr	r3, [pc, #32]	@ (8007a7c <_sbrk+0x64>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a5e:	4b07      	ldr	r3, [pc, #28]	@ (8007a7c <_sbrk+0x64>)
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4413      	add	r3, r2
 8007a66:	4a05      	ldr	r2, [pc, #20]	@ (8007a7c <_sbrk+0x64>)
 8007a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	20020000 	.word	0x20020000
 8007a78:	00000400 	.word	0x00000400
 8007a7c:	20000744 	.word	0x20000744
 8007a80:	20000898 	.word	0x20000898

08007a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a88:	4b06      	ldr	r3, [pc, #24]	@ (8007aa4 <SystemInit+0x20>)
 8007a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a8e:	4a05      	ldr	r2, [pc, #20]	@ (8007aa4 <SystemInit+0x20>)
 8007a90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007a94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007a98:	bf00      	nop
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	e000ed00 	.word	0xe000ed00

08007aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007aa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007ae0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007aac:	f7ff ffea 	bl	8007a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007ab0:	480c      	ldr	r0, [pc, #48]	@ (8007ae4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007ab2:	490d      	ldr	r1, [pc, #52]	@ (8007ae8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8007aec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007ab8:	e002      	b.n	8007ac0 <LoopCopyDataInit>

08007aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007abe:	3304      	adds	r3, #4

08007ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007ac4:	d3f9      	bcc.n	8007aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8007af0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8007af4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007acc:	e001      	b.n	8007ad2 <LoopFillZerobss>

08007ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ad0:	3204      	adds	r2, #4

08007ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ad4:	d3fb      	bcc.n	8007ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007ad6:	f005 fc3f 	bl	800d358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007ada:	f7fa fb49 	bl	8002170 <main>
  bx  lr    
 8007ade:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007ae8:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8007aec:	08012140 	.word	0x08012140
  ldr r2, =_sbss
 8007af0:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8007af4:	20000898 	.word	0x20000898

08007af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007af8:	e7fe      	b.n	8007af8 <ADC_IRQHandler>
	...

08007afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007b00:	4b0e      	ldr	r3, [pc, #56]	@ (8007b3c <HAL_Init+0x40>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a0d      	ldr	r2, [pc, #52]	@ (8007b3c <HAL_Init+0x40>)
 8007b06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b3c <HAL_Init+0x40>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a0a      	ldr	r2, [pc, #40]	@ (8007b3c <HAL_Init+0x40>)
 8007b12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007b18:	4b08      	ldr	r3, [pc, #32]	@ (8007b3c <HAL_Init+0x40>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a07      	ldr	r2, [pc, #28]	@ (8007b3c <HAL_Init+0x40>)
 8007b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b24:	2003      	movs	r0, #3
 8007b26:	f000 f94f 	bl	8007dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	f000 f808 	bl	8007b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007b30:	f7ff fc10 	bl	8007354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	40023c00 	.word	0x40023c00

08007b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007b48:	4b12      	ldr	r3, [pc, #72]	@ (8007b94 <HAL_InitTick+0x54>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	4b12      	ldr	r3, [pc, #72]	@ (8007b98 <HAL_InitTick+0x58>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	4619      	mov	r1, r3
 8007b52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 f967 	bl	8007e32 <HAL_SYSTICK_Config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e00e      	b.n	8007b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b0f      	cmp	r3, #15
 8007b72:	d80a      	bhi.n	8007b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007b74:	2200      	movs	r2, #0
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7c:	f000 f92f 	bl	8007dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007b80:	4a06      	ldr	r2, [pc, #24]	@ (8007b9c <HAL_InitTick+0x5c>)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	e000      	b.n	8007b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	200000cc 	.word	0x200000cc
 8007b98:	200000d4 	.word	0x200000d4
 8007b9c:	200000d0 	.word	0x200000d0

08007ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007ba4:	4b06      	ldr	r3, [pc, #24]	@ (8007bc0 <HAL_IncTick+0x20>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	4b06      	ldr	r3, [pc, #24]	@ (8007bc4 <HAL_IncTick+0x24>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4413      	add	r3, r2
 8007bb0:	4a04      	ldr	r2, [pc, #16]	@ (8007bc4 <HAL_IncTick+0x24>)
 8007bb2:	6013      	str	r3, [r2, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	200000d4 	.word	0x200000d4
 8007bc4:	20000748 	.word	0x20000748

08007bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	af00      	add	r7, sp, #0
  return uwTick;
 8007bcc:	4b03      	ldr	r3, [pc, #12]	@ (8007bdc <HAL_GetTick+0x14>)
 8007bce:	681b      	ldr	r3, [r3, #0]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	20000748 	.word	0x20000748

08007be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007be8:	f7ff ffee 	bl	8007bc8 <HAL_GetTick>
 8007bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf8:	d005      	beq.n	8007c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8007c24 <HAL_Delay+0x44>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	4413      	add	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007c06:	bf00      	nop
 8007c08:	f7ff ffde 	bl	8007bc8 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d8f7      	bhi.n	8007c08 <HAL_Delay+0x28>
  {
  }
}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	200000d4 	.word	0x200000d4

08007c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c38:	4b0c      	ldr	r3, [pc, #48]	@ (8007c6c <__NVIC_SetPriorityGrouping+0x44>)
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007c44:	4013      	ands	r3, r2
 8007c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c5a:	4a04      	ldr	r2, [pc, #16]	@ (8007c6c <__NVIC_SetPriorityGrouping+0x44>)
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	60d3      	str	r3, [r2, #12]
}
 8007c60:	bf00      	nop
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	e000ed00 	.word	0xe000ed00

08007c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c74:	4b04      	ldr	r3, [pc, #16]	@ (8007c88 <__NVIC_GetPriorityGrouping+0x18>)
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	0a1b      	lsrs	r3, r3, #8
 8007c7a:	f003 0307 	and.w	r3, r3, #7
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	e000ed00 	.word	0xe000ed00

08007c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	4603      	mov	r3, r0
 8007c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	db0b      	blt.n	8007cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	f003 021f 	and.w	r2, r3, #31
 8007ca4:	4907      	ldr	r1, [pc, #28]	@ (8007cc4 <__NVIC_EnableIRQ+0x38>)
 8007ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007caa:	095b      	lsrs	r3, r3, #5
 8007cac:	2001      	movs	r0, #1
 8007cae:	fa00 f202 	lsl.w	r2, r0, r2
 8007cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007cb6:	bf00      	nop
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	e000e100 	.word	0xe000e100

08007cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	4603      	mov	r3, r0
 8007cd0:	6039      	str	r1, [r7, #0]
 8007cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	db0a      	blt.n	8007cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	490c      	ldr	r1, [pc, #48]	@ (8007d14 <__NVIC_SetPriority+0x4c>)
 8007ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ce6:	0112      	lsls	r2, r2, #4
 8007ce8:	b2d2      	uxtb	r2, r2
 8007cea:	440b      	add	r3, r1
 8007cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007cf0:	e00a      	b.n	8007d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	4908      	ldr	r1, [pc, #32]	@ (8007d18 <__NVIC_SetPriority+0x50>)
 8007cf8:	79fb      	ldrb	r3, [r7, #7]
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	3b04      	subs	r3, #4
 8007d00:	0112      	lsls	r2, r2, #4
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	440b      	add	r3, r1
 8007d06:	761a      	strb	r2, [r3, #24]
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	e000e100 	.word	0xe000e100
 8007d18:	e000ed00 	.word	0xe000ed00

08007d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b089      	sub	sp, #36	@ 0x24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	f1c3 0307 	rsb	r3, r3, #7
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	bf28      	it	cs
 8007d3a:	2304      	movcs	r3, #4
 8007d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	3304      	adds	r3, #4
 8007d42:	2b06      	cmp	r3, #6
 8007d44:	d902      	bls.n	8007d4c <NVIC_EncodePriority+0x30>
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	3b03      	subs	r3, #3
 8007d4a:	e000      	b.n	8007d4e <NVIC_EncodePriority+0x32>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d50:	f04f 32ff 	mov.w	r2, #4294967295
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5a:	43da      	mvns	r2, r3
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	401a      	ands	r2, r3
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d64:	f04f 31ff 	mov.w	r1, #4294967295
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6e:	43d9      	mvns	r1, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d74:	4313      	orrs	r3, r2
         );
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3724      	adds	r7, #36	@ 0x24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
	...

08007d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d94:	d301      	bcc.n	8007d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d96:	2301      	movs	r3, #1
 8007d98:	e00f      	b.n	8007dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8007dc4 <SysTick_Config+0x40>)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007da2:	210f      	movs	r1, #15
 8007da4:	f04f 30ff 	mov.w	r0, #4294967295
 8007da8:	f7ff ff8e 	bl	8007cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007dac:	4b05      	ldr	r3, [pc, #20]	@ (8007dc4 <SysTick_Config+0x40>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007db2:	4b04      	ldr	r3, [pc, #16]	@ (8007dc4 <SysTick_Config+0x40>)
 8007db4:	2207      	movs	r2, #7
 8007db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	e000e010 	.word	0xe000e010

08007dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff ff29 	bl	8007c28 <__NVIC_SetPriorityGrouping>
}
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b086      	sub	sp, #24
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	4603      	mov	r3, r0
 8007de6:	60b9      	str	r1, [r7, #8]
 8007de8:	607a      	str	r2, [r7, #4]
 8007dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007df0:	f7ff ff3e 	bl	8007c70 <__NVIC_GetPriorityGrouping>
 8007df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	68b9      	ldr	r1, [r7, #8]
 8007dfa:	6978      	ldr	r0, [r7, #20]
 8007dfc:	f7ff ff8e 	bl	8007d1c <NVIC_EncodePriority>
 8007e00:	4602      	mov	r2, r0
 8007e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e06:	4611      	mov	r1, r2
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7ff ff5d 	bl	8007cc8 <__NVIC_SetPriority>
}
 8007e0e:	bf00      	nop
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7ff ff31 	bl	8007c8c <__NVIC_EnableIRQ>
}
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b082      	sub	sp, #8
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7ff ffa2 	bl	8007d84 <SysTick_Config>
 8007e40:	4603      	mov	r3, r0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007e58:	f7ff feb6 	bl	8007bc8 <HAL_GetTick>
 8007e5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d008      	beq.n	8007e7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2280      	movs	r2, #128	@ 0x80
 8007e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e052      	b.n	8007f22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0216 	bic.w	r2, r2, #22
 8007e8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	695a      	ldr	r2, [r3, #20]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007e9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d103      	bne.n	8007eac <HAL_DMA_Abort+0x62>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d007      	beq.n	8007ebc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 0208 	bic.w	r2, r2, #8
 8007eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 0201 	bic.w	r2, r2, #1
 8007eca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ecc:	e013      	b.n	8007ef6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ece:	f7ff fe7b 	bl	8007bc8 <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	2b05      	cmp	r3, #5
 8007eda:	d90c      	bls.n	8007ef6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2203      	movs	r2, #3
 8007ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e015      	b.n	8007f22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e4      	bne.n	8007ece <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f08:	223f      	movs	r2, #63	@ 0x3f
 8007f0a:	409a      	lsls	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d004      	beq.n	8007f48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2280      	movs	r2, #128	@ 0x80
 8007f42:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e00c      	b.n	8007f62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2205      	movs	r2, #5
 8007f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f022 0201 	bic.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
	...

08007f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b089      	sub	sp, #36	@ 0x24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f86:	2300      	movs	r3, #0
 8007f88:	61fb      	str	r3, [r7, #28]
 8007f8a:	e16b      	b.n	8008264 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	fa02 f303 	lsl.w	r3, r2, r3
 8007f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	f040 815a 	bne.w	800825e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d005      	beq.n	8007fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d130      	bne.n	8008024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	2203      	movs	r2, #3
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	43db      	mvns	r3, r3
 8007fd4:	69ba      	ldr	r2, [r7, #24]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8008000:	43db      	mvns	r3, r3
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	4013      	ands	r3, r2
 8008006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	091b      	lsrs	r3, r3, #4
 800800e:	f003 0201 	and.w	r2, r3, #1
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	fa02 f303 	lsl.w	r3, r2, r3
 8008018:	69ba      	ldr	r2, [r7, #24]
 800801a:	4313      	orrs	r3, r2
 800801c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f003 0303 	and.w	r3, r3, #3
 800802c:	2b03      	cmp	r3, #3
 800802e:	d017      	beq.n	8008060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	005b      	lsls	r3, r3, #1
 800803a:	2203      	movs	r2, #3
 800803c:	fa02 f303 	lsl.w	r3, r2, r3
 8008040:	43db      	mvns	r3, r3
 8008042:	69ba      	ldr	r2, [r7, #24]
 8008044:	4013      	ands	r3, r2
 8008046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	005b      	lsls	r3, r3, #1
 8008050:	fa02 f303 	lsl.w	r3, r2, r3
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	4313      	orrs	r3, r2
 8008058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f003 0303 	and.w	r3, r3, #3
 8008068:	2b02      	cmp	r3, #2
 800806a:	d123      	bne.n	80080b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	08da      	lsrs	r2, r3, #3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3208      	adds	r2, #8
 8008074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	f003 0307 	and.w	r3, r3, #7
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	220f      	movs	r2, #15
 8008084:	fa02 f303 	lsl.w	r3, r2, r3
 8008088:	43db      	mvns	r3, r3
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	4013      	ands	r3, r2
 800808e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	691a      	ldr	r2, [r3, #16]
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	fa02 f303 	lsl.w	r3, r2, r3
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	08da      	lsrs	r2, r3, #3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	3208      	adds	r2, #8
 80080ae:	69b9      	ldr	r1, [r7, #24]
 80080b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	2203      	movs	r2, #3
 80080c0:	fa02 f303 	lsl.w	r3, r2, r3
 80080c4:	43db      	mvns	r3, r3
 80080c6:	69ba      	ldr	r2, [r7, #24]
 80080c8:	4013      	ands	r3, r2
 80080ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f003 0203 	and.w	r2, r3, #3
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	fa02 f303 	lsl.w	r3, r2, r3
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	4313      	orrs	r3, r2
 80080e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 80b4 	beq.w	800825e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080f6:	2300      	movs	r3, #0
 80080f8:	60fb      	str	r3, [r7, #12]
 80080fa:	4b60      	ldr	r3, [pc, #384]	@ (800827c <HAL_GPIO_Init+0x30c>)
 80080fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080fe:	4a5f      	ldr	r2, [pc, #380]	@ (800827c <HAL_GPIO_Init+0x30c>)
 8008100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008104:	6453      	str	r3, [r2, #68]	@ 0x44
 8008106:	4b5d      	ldr	r3, [pc, #372]	@ (800827c <HAL_GPIO_Init+0x30c>)
 8008108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800810a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008112:	4a5b      	ldr	r2, [pc, #364]	@ (8008280 <HAL_GPIO_Init+0x310>)
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	089b      	lsrs	r3, r3, #2
 8008118:	3302      	adds	r3, #2
 800811a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800811e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	f003 0303 	and.w	r3, r3, #3
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	220f      	movs	r2, #15
 800812a:	fa02 f303 	lsl.w	r3, r2, r3
 800812e:	43db      	mvns	r3, r3
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	4013      	ands	r3, r2
 8008134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a52      	ldr	r2, [pc, #328]	@ (8008284 <HAL_GPIO_Init+0x314>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d02b      	beq.n	8008196 <HAL_GPIO_Init+0x226>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a51      	ldr	r2, [pc, #324]	@ (8008288 <HAL_GPIO_Init+0x318>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d025      	beq.n	8008192 <HAL_GPIO_Init+0x222>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a50      	ldr	r2, [pc, #320]	@ (800828c <HAL_GPIO_Init+0x31c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d01f      	beq.n	800818e <HAL_GPIO_Init+0x21e>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a4f      	ldr	r2, [pc, #316]	@ (8008290 <HAL_GPIO_Init+0x320>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d019      	beq.n	800818a <HAL_GPIO_Init+0x21a>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a4e      	ldr	r2, [pc, #312]	@ (8008294 <HAL_GPIO_Init+0x324>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d013      	beq.n	8008186 <HAL_GPIO_Init+0x216>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a4d      	ldr	r2, [pc, #308]	@ (8008298 <HAL_GPIO_Init+0x328>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d00d      	beq.n	8008182 <HAL_GPIO_Init+0x212>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a4c      	ldr	r2, [pc, #304]	@ (800829c <HAL_GPIO_Init+0x32c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d007      	beq.n	800817e <HAL_GPIO_Init+0x20e>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a4b      	ldr	r2, [pc, #300]	@ (80082a0 <HAL_GPIO_Init+0x330>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d101      	bne.n	800817a <HAL_GPIO_Init+0x20a>
 8008176:	2307      	movs	r3, #7
 8008178:	e00e      	b.n	8008198 <HAL_GPIO_Init+0x228>
 800817a:	2308      	movs	r3, #8
 800817c:	e00c      	b.n	8008198 <HAL_GPIO_Init+0x228>
 800817e:	2306      	movs	r3, #6
 8008180:	e00a      	b.n	8008198 <HAL_GPIO_Init+0x228>
 8008182:	2305      	movs	r3, #5
 8008184:	e008      	b.n	8008198 <HAL_GPIO_Init+0x228>
 8008186:	2304      	movs	r3, #4
 8008188:	e006      	b.n	8008198 <HAL_GPIO_Init+0x228>
 800818a:	2303      	movs	r3, #3
 800818c:	e004      	b.n	8008198 <HAL_GPIO_Init+0x228>
 800818e:	2302      	movs	r3, #2
 8008190:	e002      	b.n	8008198 <HAL_GPIO_Init+0x228>
 8008192:	2301      	movs	r3, #1
 8008194:	e000      	b.n	8008198 <HAL_GPIO_Init+0x228>
 8008196:	2300      	movs	r3, #0
 8008198:	69fa      	ldr	r2, [r7, #28]
 800819a:	f002 0203 	and.w	r2, r2, #3
 800819e:	0092      	lsls	r2, r2, #2
 80081a0:	4093      	lsls	r3, r2
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80081a8:	4935      	ldr	r1, [pc, #212]	@ (8008280 <HAL_GPIO_Init+0x310>)
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	089b      	lsrs	r3, r3, #2
 80081ae:	3302      	adds	r3, #2
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80081b6:	4b3b      	ldr	r3, [pc, #236]	@ (80082a4 <HAL_GPIO_Init+0x334>)
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	43db      	mvns	r3, r3
 80081c0:	69ba      	ldr	r2, [r7, #24]
 80081c2:	4013      	ands	r3, r2
 80081c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80081da:	4a32      	ldr	r2, [pc, #200]	@ (80082a4 <HAL_GPIO_Init+0x334>)
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80081e0:	4b30      	ldr	r3, [pc, #192]	@ (80082a4 <HAL_GPIO_Init+0x334>)
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	43db      	mvns	r3, r3
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	4013      	ands	r3, r2
 80081ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d003      	beq.n	8008204 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	4313      	orrs	r3, r2
 8008202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008204:	4a27      	ldr	r2, [pc, #156]	@ (80082a4 <HAL_GPIO_Init+0x334>)
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800820a:	4b26      	ldr	r3, [pc, #152]	@ (80082a4 <HAL_GPIO_Init+0x334>)
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	43db      	mvns	r3, r3
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	4013      	ands	r3, r2
 8008218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	4313      	orrs	r3, r2
 800822c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800822e:	4a1d      	ldr	r2, [pc, #116]	@ (80082a4 <HAL_GPIO_Init+0x334>)
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008234:	4b1b      	ldr	r3, [pc, #108]	@ (80082a4 <HAL_GPIO_Init+0x334>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	43db      	mvns	r3, r3
 800823e:	69ba      	ldr	r2, [r7, #24]
 8008240:	4013      	ands	r3, r2
 8008242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d003      	beq.n	8008258 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008250:	69ba      	ldr	r2, [r7, #24]
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	4313      	orrs	r3, r2
 8008256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008258:	4a12      	ldr	r2, [pc, #72]	@ (80082a4 <HAL_GPIO_Init+0x334>)
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	3301      	adds	r3, #1
 8008262:	61fb      	str	r3, [r7, #28]
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	2b0f      	cmp	r3, #15
 8008268:	f67f ae90 	bls.w	8007f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800826c:	bf00      	nop
 800826e:	bf00      	nop
 8008270:	3724      	adds	r7, #36	@ 0x24
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	40023800 	.word	0x40023800
 8008280:	40013800 	.word	0x40013800
 8008284:	40020000 	.word	0x40020000
 8008288:	40020400 	.word	0x40020400
 800828c:	40020800 	.word	0x40020800
 8008290:	40020c00 	.word	0x40020c00
 8008294:	40021000 	.word	0x40021000
 8008298:	40021400 	.word	0x40021400
 800829c:	40021800 	.word	0x40021800
 80082a0:	40021c00 	.word	0x40021c00
 80082a4:	40013c00 	.word	0x40013c00

080082a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	460b      	mov	r3, r1
 80082b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	691a      	ldr	r2, [r3, #16]
 80082b8:	887b      	ldrh	r3, [r7, #2]
 80082ba:	4013      	ands	r3, r2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]
 80082c4:	e001      	b.n	80082ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80082c6:	2300      	movs	r3, #0
 80082c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	807b      	strh	r3, [r7, #2]
 80082e4:	4613      	mov	r3, r2
 80082e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80082e8:	787b      	ldrb	r3, [r7, #1]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80082ee:	887a      	ldrh	r2, [r7, #2]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80082f4:	e003      	b.n	80082fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80082f6:	887b      	ldrh	r3, [r7, #2]
 80082f8:	041a      	lsls	r2, r3, #16
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	619a      	str	r2, [r3, #24]
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
	...

0800830c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008316:	4b08      	ldr	r3, [pc, #32]	@ (8008338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008318:	695a      	ldr	r2, [r3, #20]
 800831a:	88fb      	ldrh	r3, [r7, #6]
 800831c:	4013      	ands	r3, r2
 800831e:	2b00      	cmp	r3, #0
 8008320:	d006      	beq.n	8008330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008322:	4a05      	ldr	r2, [pc, #20]	@ (8008338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008324:	88fb      	ldrh	r3, [r7, #6]
 8008326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008328:	88fb      	ldrh	r3, [r7, #6]
 800832a:	4618      	mov	r0, r3
 800832c:	f7f9 fd92 	bl	8001e54 <HAL_GPIO_EXTI_Callback>
  }
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	40013c00 	.word	0x40013c00

0800833c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e12b      	b.n	80085a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d106      	bne.n	8008368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff f81e 	bl	80073a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2224      	movs	r2, #36	@ 0x24
 800836c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 0201 	bic.w	r2, r2, #1
 800837e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800838e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800839e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80083a0:	f001 f8da 	bl	8009558 <HAL_RCC_GetPCLK1Freq>
 80083a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	4a81      	ldr	r2, [pc, #516]	@ (80085b0 <HAL_I2C_Init+0x274>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d807      	bhi.n	80083c0 <HAL_I2C_Init+0x84>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4a80      	ldr	r2, [pc, #512]	@ (80085b4 <HAL_I2C_Init+0x278>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	bf94      	ite	ls
 80083b8:	2301      	movls	r3, #1
 80083ba:	2300      	movhi	r3, #0
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	e006      	b.n	80083ce <HAL_I2C_Init+0x92>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4a7d      	ldr	r2, [pc, #500]	@ (80085b8 <HAL_I2C_Init+0x27c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	bf94      	ite	ls
 80083c8:	2301      	movls	r3, #1
 80083ca:	2300      	movhi	r3, #0
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e0e7      	b.n	80085a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	4a78      	ldr	r2, [pc, #480]	@ (80085bc <HAL_I2C_Init+0x280>)
 80083da:	fba2 2303 	umull	r2, r3, r2, r3
 80083de:	0c9b      	lsrs	r3, r3, #18
 80083e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	430a      	orrs	r2, r1
 80083f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6a1b      	ldr	r3, [r3, #32]
 80083fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	4a6a      	ldr	r2, [pc, #424]	@ (80085b0 <HAL_I2C_Init+0x274>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d802      	bhi.n	8008410 <HAL_I2C_Init+0xd4>
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	3301      	adds	r3, #1
 800840e:	e009      	b.n	8008424 <HAL_I2C_Init+0xe8>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008416:	fb02 f303 	mul.w	r3, r2, r3
 800841a:	4a69      	ldr	r2, [pc, #420]	@ (80085c0 <HAL_I2C_Init+0x284>)
 800841c:	fba2 2303 	umull	r2, r3, r2, r3
 8008420:	099b      	lsrs	r3, r3, #6
 8008422:	3301      	adds	r3, #1
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	6812      	ldr	r2, [r2, #0]
 8008428:	430b      	orrs	r3, r1
 800842a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008436:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	495c      	ldr	r1, [pc, #368]	@ (80085b0 <HAL_I2C_Init+0x274>)
 8008440:	428b      	cmp	r3, r1
 8008442:	d819      	bhi.n	8008478 <HAL_I2C_Init+0x13c>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	1e59      	subs	r1, r3, #1
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008452:	1c59      	adds	r1, r3, #1
 8008454:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008458:	400b      	ands	r3, r1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00a      	beq.n	8008474 <HAL_I2C_Init+0x138>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	1e59      	subs	r1, r3, #1
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	fbb1 f3f3 	udiv	r3, r1, r3
 800846c:	3301      	adds	r3, #1
 800846e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008472:	e051      	b.n	8008518 <HAL_I2C_Init+0x1dc>
 8008474:	2304      	movs	r3, #4
 8008476:	e04f      	b.n	8008518 <HAL_I2C_Init+0x1dc>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d111      	bne.n	80084a4 <HAL_I2C_Init+0x168>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	1e58      	subs	r0, r3, #1
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6859      	ldr	r1, [r3, #4]
 8008488:	460b      	mov	r3, r1
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	440b      	add	r3, r1
 800848e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008492:	3301      	adds	r3, #1
 8008494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008498:	2b00      	cmp	r3, #0
 800849a:	bf0c      	ite	eq
 800849c:	2301      	moveq	r3, #1
 800849e:	2300      	movne	r3, #0
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	e012      	b.n	80084ca <HAL_I2C_Init+0x18e>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	1e58      	subs	r0, r3, #1
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6859      	ldr	r1, [r3, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	440b      	add	r3, r1
 80084b2:	0099      	lsls	r1, r3, #2
 80084b4:	440b      	add	r3, r1
 80084b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80084ba:	3301      	adds	r3, #1
 80084bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	bf0c      	ite	eq
 80084c4:	2301      	moveq	r3, #1
 80084c6:	2300      	movne	r3, #0
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <HAL_I2C_Init+0x196>
 80084ce:	2301      	movs	r3, #1
 80084d0:	e022      	b.n	8008518 <HAL_I2C_Init+0x1dc>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10e      	bne.n	80084f8 <HAL_I2C_Init+0x1bc>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	1e58      	subs	r0, r3, #1
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6859      	ldr	r1, [r3, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	005b      	lsls	r3, r3, #1
 80084e6:	440b      	add	r3, r1
 80084e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80084ec:	3301      	adds	r3, #1
 80084ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084f6:	e00f      	b.n	8008518 <HAL_I2C_Init+0x1dc>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	1e58      	subs	r0, r3, #1
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6859      	ldr	r1, [r3, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	440b      	add	r3, r1
 8008506:	0099      	lsls	r1, r3, #2
 8008508:	440b      	add	r3, r1
 800850a:	fbb0 f3f3 	udiv	r3, r0, r3
 800850e:	3301      	adds	r3, #1
 8008510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008514:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008518:	6879      	ldr	r1, [r7, #4]
 800851a:	6809      	ldr	r1, [r1, #0]
 800851c:	4313      	orrs	r3, r2
 800851e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	69da      	ldr	r2, [r3, #28]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	431a      	orrs	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008546:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	6911      	ldr	r1, [r2, #16]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	68d2      	ldr	r2, [r2, #12]
 8008552:	4311      	orrs	r1, r2
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	6812      	ldr	r2, [r2, #0]
 8008558:	430b      	orrs	r3, r1
 800855a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	695a      	ldr	r2, [r3, #20]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	431a      	orrs	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f042 0201 	orr.w	r2, r2, #1
 8008586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2220      	movs	r2, #32
 8008592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	000186a0 	.word	0x000186a0
 80085b4:	001e847f 	.word	0x001e847f
 80085b8:	003d08ff 	.word	0x003d08ff
 80085bc:	431bde83 	.word	0x431bde83
 80085c0:	10624dd3 	.word	0x10624dd3

080085c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af02      	add	r7, sp, #8
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	607a      	str	r2, [r7, #4]
 80085ce:	461a      	mov	r2, r3
 80085d0:	460b      	mov	r3, r1
 80085d2:	817b      	strh	r3, [r7, #10]
 80085d4:	4613      	mov	r3, r2
 80085d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80085d8:	f7ff faf6 	bl	8007bc8 <HAL_GetTick>
 80085dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b20      	cmp	r3, #32
 80085e8:	f040 80e0 	bne.w	80087ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	2319      	movs	r3, #25
 80085f2:	2201      	movs	r2, #1
 80085f4:	4970      	ldr	r1, [pc, #448]	@ (80087b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 f964 	bl	80088c4 <I2C_WaitOnFlagUntilTimeout>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008602:	2302      	movs	r3, #2
 8008604:	e0d3      	b.n	80087ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800860c:	2b01      	cmp	r3, #1
 800860e:	d101      	bne.n	8008614 <HAL_I2C_Master_Transmit+0x50>
 8008610:	2302      	movs	r3, #2
 8008612:	e0cc      	b.n	80087ae <HAL_I2C_Master_Transmit+0x1ea>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b01      	cmp	r3, #1
 8008628:	d007      	beq.n	800863a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f042 0201 	orr.w	r2, r2, #1
 8008638:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008648:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2221      	movs	r2, #33	@ 0x21
 800864e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2210      	movs	r2, #16
 8008656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	893a      	ldrh	r2, [r7, #8]
 800866a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008670:	b29a      	uxth	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4a50      	ldr	r2, [pc, #320]	@ (80087bc <HAL_I2C_Master_Transmit+0x1f8>)
 800867a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800867c:	8979      	ldrh	r1, [r7, #10]
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	6a3a      	ldr	r2, [r7, #32]
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f000 f89c 	bl	80087c0 <I2C_MasterRequestWrite>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e08d      	b.n	80087ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008692:	2300      	movs	r3, #0
 8008694:	613b      	str	r3, [r7, #16]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	613b      	str	r3, [r7, #16]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	613b      	str	r3, [r7, #16]
 80086a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80086a8:	e066      	b.n	8008778 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	6a39      	ldr	r1, [r7, #32]
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f000 fa22 	bl	8008af8 <I2C_WaitOnTXEFlagUntilTimeout>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00d      	beq.n	80086d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086be:	2b04      	cmp	r3, #4
 80086c0:	d107      	bne.n	80086d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e06b      	b.n	80087ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086da:	781a      	ldrb	r2, [r3, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	3b01      	subs	r3, #1
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086fe:	3b01      	subs	r3, #1
 8008700:	b29a      	uxth	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	f003 0304 	and.w	r3, r3, #4
 8008710:	2b04      	cmp	r3, #4
 8008712:	d11b      	bne.n	800874c <HAL_I2C_Master_Transmit+0x188>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008718:	2b00      	cmp	r3, #0
 800871a:	d017      	beq.n	800874c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008720:	781a      	ldrb	r2, [r3, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800872c:	1c5a      	adds	r2, r3, #1
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008736:	b29b      	uxth	r3, r3
 8008738:	3b01      	subs	r3, #1
 800873a:	b29a      	uxth	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008744:	3b01      	subs	r3, #1
 8008746:	b29a      	uxth	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	6a39      	ldr	r1, [r7, #32]
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 fa19 	bl	8008b88 <I2C_WaitOnBTFFlagUntilTimeout>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00d      	beq.n	8008778 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008760:	2b04      	cmp	r3, #4
 8008762:	d107      	bne.n	8008774 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008772:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e01a      	b.n	80087ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800877c:	2b00      	cmp	r3, #0
 800877e:	d194      	bne.n	80086aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800878e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2220      	movs	r2, #32
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	e000      	b.n	80087ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80087ac:	2302      	movs	r3, #2
  }
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	00100002 	.word	0x00100002
 80087bc:	ffff0000 	.word	0xffff0000

080087c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af02      	add	r7, sp, #8
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	607a      	str	r2, [r7, #4]
 80087ca:	603b      	str	r3, [r7, #0]
 80087cc:	460b      	mov	r3, r1
 80087ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b08      	cmp	r3, #8
 80087da:	d006      	beq.n	80087ea <I2C_MasterRequestWrite+0x2a>
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d003      	beq.n	80087ea <I2C_MasterRequestWrite+0x2a>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80087e8:	d108      	bne.n	80087fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	e00b      	b.n	8008814 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008800:	2b12      	cmp	r3, #18
 8008802:	d107      	bne.n	8008814 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008812:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 f84f 	bl	80088c4 <I2C_WaitOnFlagUntilTimeout>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00d      	beq.n	8008848 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800883a:	d103      	bne.n	8008844 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008842:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e035      	b.n	80088b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008850:	d108      	bne.n	8008864 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008852:	897b      	ldrh	r3, [r7, #10]
 8008854:	b2db      	uxtb	r3, r3
 8008856:	461a      	mov	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008860:	611a      	str	r2, [r3, #16]
 8008862:	e01b      	b.n	800889c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008864:	897b      	ldrh	r3, [r7, #10]
 8008866:	11db      	asrs	r3, r3, #7
 8008868:	b2db      	uxtb	r3, r3
 800886a:	f003 0306 	and.w	r3, r3, #6
 800886e:	b2db      	uxtb	r3, r3
 8008870:	f063 030f 	orn	r3, r3, #15
 8008874:	b2da      	uxtb	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	490e      	ldr	r1, [pc, #56]	@ (80088bc <I2C_MasterRequestWrite+0xfc>)
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 f898 	bl	80089b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e010      	b.n	80088b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008892:	897b      	ldrh	r3, [r7, #10]
 8008894:	b2da      	uxtb	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	4907      	ldr	r1, [pc, #28]	@ (80088c0 <I2C_MasterRequestWrite+0x100>)
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 f888 	bl	80089b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e000      	b.n	80088b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3718      	adds	r7, #24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	00010008 	.word	0x00010008
 80088c0:	00010002 	.word	0x00010002

080088c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	4613      	mov	r3, r2
 80088d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088d4:	e048      	b.n	8008968 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088dc:	d044      	beq.n	8008968 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088de:	f7ff f973 	bl	8007bc8 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d302      	bcc.n	80088f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d139      	bne.n	8008968 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	0c1b      	lsrs	r3, r3, #16
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d10d      	bne.n	800891a <I2C_WaitOnFlagUntilTimeout+0x56>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	43da      	mvns	r2, r3
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	4013      	ands	r3, r2
 800890a:	b29b      	uxth	r3, r3
 800890c:	2b00      	cmp	r3, #0
 800890e:	bf0c      	ite	eq
 8008910:	2301      	moveq	r3, #1
 8008912:	2300      	movne	r3, #0
 8008914:	b2db      	uxtb	r3, r3
 8008916:	461a      	mov	r2, r3
 8008918:	e00c      	b.n	8008934 <I2C_WaitOnFlagUntilTimeout+0x70>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	43da      	mvns	r2, r3
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	4013      	ands	r3, r2
 8008926:	b29b      	uxth	r3, r3
 8008928:	2b00      	cmp	r3, #0
 800892a:	bf0c      	ite	eq
 800892c:	2301      	moveq	r3, #1
 800892e:	2300      	movne	r3, #0
 8008930:	b2db      	uxtb	r3, r3
 8008932:	461a      	mov	r2, r3
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	429a      	cmp	r2, r3
 8008938:	d116      	bne.n	8008968 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2220      	movs	r2, #32
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008954:	f043 0220 	orr.w	r2, r3, #32
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e023      	b.n	80089b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	0c1b      	lsrs	r3, r3, #16
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b01      	cmp	r3, #1
 8008970:	d10d      	bne.n	800898e <I2C_WaitOnFlagUntilTimeout+0xca>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	695b      	ldr	r3, [r3, #20]
 8008978:	43da      	mvns	r2, r3
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4013      	ands	r3, r2
 800897e:	b29b      	uxth	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	bf0c      	ite	eq
 8008984:	2301      	moveq	r3, #1
 8008986:	2300      	movne	r3, #0
 8008988:	b2db      	uxtb	r3, r3
 800898a:	461a      	mov	r2, r3
 800898c:	e00c      	b.n	80089a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	43da      	mvns	r2, r3
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	4013      	ands	r3, r2
 800899a:	b29b      	uxth	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	bf0c      	ite	eq
 80089a0:	2301      	moveq	r3, #1
 80089a2:	2300      	movne	r3, #0
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	461a      	mov	r2, r3
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d093      	beq.n	80088d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80089c6:	e071      	b.n	8008aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089d6:	d123      	bne.n	8008a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80089f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2220      	movs	r2, #32
 80089fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a0c:	f043 0204 	orr.w	r2, r3, #4
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e067      	b.n	8008af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a26:	d041      	beq.n	8008aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a28:	f7ff f8ce 	bl	8007bc8 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d302      	bcc.n	8008a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d136      	bne.n	8008aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	0c1b      	lsrs	r3, r3, #16
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d10c      	bne.n	8008a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	43da      	mvns	r2, r3
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	4013      	ands	r3, r2
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	bf14      	ite	ne
 8008a5a:	2301      	movne	r3, #1
 8008a5c:	2300      	moveq	r3, #0
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	e00b      	b.n	8008a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	43da      	mvns	r2, r3
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bf14      	ite	ne
 8008a74:	2301      	movne	r3, #1
 8008a76:	2300      	moveq	r3, #0
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d016      	beq.n	8008aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2220      	movs	r2, #32
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a98:	f043 0220 	orr.w	r2, r3, #32
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e021      	b.n	8008af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	0c1b      	lsrs	r3, r3, #16
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d10c      	bne.n	8008ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	43da      	mvns	r2, r3
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bf14      	ite	ne
 8008ac8:	2301      	movne	r3, #1
 8008aca:	2300      	moveq	r3, #0
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	e00b      	b.n	8008ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	43da      	mvns	r2, r3
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	4013      	ands	r3, r2
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	bf14      	ite	ne
 8008ae2:	2301      	movne	r3, #1
 8008ae4:	2300      	moveq	r3, #0
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f47f af6d 	bne.w	80089c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b04:	e034      	b.n	8008b70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 f886 	bl	8008c18 <I2C_IsAcknowledgeFailed>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e034      	b.n	8008b80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1c:	d028      	beq.n	8008b70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b1e:	f7ff f853 	bl	8007bc8 <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d302      	bcc.n	8008b34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d11d      	bne.n	8008b70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b3e:	2b80      	cmp	r3, #128	@ 0x80
 8008b40:	d016      	beq.n	8008b70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b5c:	f043 0220 	orr.w	r2, r3, #32
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e007      	b.n	8008b80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b7a:	2b80      	cmp	r3, #128	@ 0x80
 8008b7c:	d1c3      	bne.n	8008b06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b94:	e034      	b.n	8008c00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 f83e 	bl	8008c18 <I2C_IsAcknowledgeFailed>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e034      	b.n	8008c10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bac:	d028      	beq.n	8008c00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bae:	f7ff f80b 	bl	8007bc8 <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d302      	bcc.n	8008bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d11d      	bne.n	8008c00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	f003 0304 	and.w	r3, r3, #4
 8008bce:	2b04      	cmp	r3, #4
 8008bd0:	d016      	beq.n	8008c00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bec:	f043 0220 	orr.w	r2, r3, #32
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e007      	b.n	8008c10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	f003 0304 	and.w	r3, r3, #4
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	d1c3      	bne.n	8008b96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c2e:	d11b      	bne.n	8008c68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008c38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2220      	movs	r2, #32
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c54:	f043 0204 	orr.w	r2, r3, #4
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e000      	b.n	8008c6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	370c      	adds	r7, #12
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
	...

08008c78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e267      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d075      	beq.n	8008d82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c96:	4b88      	ldr	r3, [pc, #544]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f003 030c 	and.w	r3, r3, #12
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	d00c      	beq.n	8008cbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ca2:	4b85      	ldr	r3, [pc, #532]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008caa:	2b08      	cmp	r3, #8
 8008cac:	d112      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008cae:	4b82      	ldr	r3, [pc, #520]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cba:	d10b      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cbc:	4b7e      	ldr	r3, [pc, #504]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d05b      	beq.n	8008d80 <HAL_RCC_OscConfig+0x108>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d157      	bne.n	8008d80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e242      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cdc:	d106      	bne.n	8008cec <HAL_RCC_OscConfig+0x74>
 8008cde:	4b76      	ldr	r3, [pc, #472]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a75      	ldr	r2, [pc, #468]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	e01d      	b.n	8008d28 <HAL_RCC_OscConfig+0xb0>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008cf4:	d10c      	bne.n	8008d10 <HAL_RCC_OscConfig+0x98>
 8008cf6:	4b70      	ldr	r3, [pc, #448]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a6f      	ldr	r2, [pc, #444]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008cfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	4b6d      	ldr	r3, [pc, #436]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a6c      	ldr	r2, [pc, #432]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	e00b      	b.n	8008d28 <HAL_RCC_OscConfig+0xb0>
 8008d10:	4b69      	ldr	r3, [pc, #420]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a68      	ldr	r2, [pc, #416]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	4b66      	ldr	r3, [pc, #408]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a65      	ldr	r2, [pc, #404]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d013      	beq.n	8008d58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d30:	f7fe ff4a 	bl	8007bc8 <HAL_GetTick>
 8008d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d36:	e008      	b.n	8008d4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d38:	f7fe ff46 	bl	8007bc8 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b64      	cmp	r3, #100	@ 0x64
 8008d44:	d901      	bls.n	8008d4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e207      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d4a:	4b5b      	ldr	r3, [pc, #364]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0f0      	beq.n	8008d38 <HAL_RCC_OscConfig+0xc0>
 8008d56:	e014      	b.n	8008d82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d58:	f7fe ff36 	bl	8007bc8 <HAL_GetTick>
 8008d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d5e:	e008      	b.n	8008d72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d60:	f7fe ff32 	bl	8007bc8 <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	2b64      	cmp	r3, #100	@ 0x64
 8008d6c:	d901      	bls.n	8008d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e1f3      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d72:	4b51      	ldr	r3, [pc, #324]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1f0      	bne.n	8008d60 <HAL_RCC_OscConfig+0xe8>
 8008d7e:	e000      	b.n	8008d82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d063      	beq.n	8008e56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f003 030c 	and.w	r3, r3, #12
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00b      	beq.n	8008db2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d9a:	4b47      	ldr	r3, [pc, #284]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008da2:	2b08      	cmp	r3, #8
 8008da4:	d11c      	bne.n	8008de0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008da6:	4b44      	ldr	r3, [pc, #272]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d116      	bne.n	8008de0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008db2:	4b41      	ldr	r3, [pc, #260]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d005      	beq.n	8008dca <HAL_RCC_OscConfig+0x152>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d001      	beq.n	8008dca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e1c7      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dca:	4b3b      	ldr	r3, [pc, #236]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	4937      	ldr	r1, [pc, #220]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dde:	e03a      	b.n	8008e56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d020      	beq.n	8008e2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008de8:	4b34      	ldr	r3, [pc, #208]	@ (8008ebc <HAL_RCC_OscConfig+0x244>)
 8008dea:	2201      	movs	r2, #1
 8008dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dee:	f7fe feeb 	bl	8007bc8 <HAL_GetTick>
 8008df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008df4:	e008      	b.n	8008e08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008df6:	f7fe fee7 	bl	8007bc8 <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d901      	bls.n	8008e08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e1a8      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e08:	4b2b      	ldr	r3, [pc, #172]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 0302 	and.w	r3, r3, #2
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d0f0      	beq.n	8008df6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e14:	4b28      	ldr	r3, [pc, #160]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	4925      	ldr	r1, [pc, #148]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	600b      	str	r3, [r1, #0]
 8008e28:	e015      	b.n	8008e56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e2a:	4b24      	ldr	r3, [pc, #144]	@ (8008ebc <HAL_RCC_OscConfig+0x244>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e30:	f7fe feca 	bl	8007bc8 <HAL_GetTick>
 8008e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e36:	e008      	b.n	8008e4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e38:	f7fe fec6 	bl	8007bc8 <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d901      	bls.n	8008e4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e187      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0302 	and.w	r3, r3, #2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1f0      	bne.n	8008e38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0308 	and.w	r3, r3, #8
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d036      	beq.n	8008ed0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d016      	beq.n	8008e98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e6a:	4b15      	ldr	r3, [pc, #84]	@ (8008ec0 <HAL_RCC_OscConfig+0x248>)
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e70:	f7fe feaa 	bl	8007bc8 <HAL_GetTick>
 8008e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e76:	e008      	b.n	8008e8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e78:	f7fe fea6 	bl	8007bc8 <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d901      	bls.n	8008e8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e167      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008eb8 <HAL_RCC_OscConfig+0x240>)
 8008e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0f0      	beq.n	8008e78 <HAL_RCC_OscConfig+0x200>
 8008e96:	e01b      	b.n	8008ed0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e98:	4b09      	ldr	r3, [pc, #36]	@ (8008ec0 <HAL_RCC_OscConfig+0x248>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e9e:	f7fe fe93 	bl	8007bc8 <HAL_GetTick>
 8008ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ea4:	e00e      	b.n	8008ec4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ea6:	f7fe fe8f 	bl	8007bc8 <HAL_GetTick>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d907      	bls.n	8008ec4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e150      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
 8008eb8:	40023800 	.word	0x40023800
 8008ebc:	42470000 	.word	0x42470000
 8008ec0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ec4:	4b88      	ldr	r3, [pc, #544]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ec8:	f003 0302 	and.w	r3, r3, #2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1ea      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 8097 	beq.w	800900c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ee2:	4b81      	ldr	r3, [pc, #516]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10f      	bne.n	8008f0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60bb      	str	r3, [r7, #8]
 8008ef2:	4b7d      	ldr	r3, [pc, #500]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef6:	4a7c      	ldr	r2, [pc, #496]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8008efe:	4b7a      	ldr	r3, [pc, #488]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f06:	60bb      	str	r3, [r7, #8]
 8008f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f0e:	4b77      	ldr	r3, [pc, #476]	@ (80090ec <HAL_RCC_OscConfig+0x474>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d118      	bne.n	8008f4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f1a:	4b74      	ldr	r3, [pc, #464]	@ (80090ec <HAL_RCC_OscConfig+0x474>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a73      	ldr	r2, [pc, #460]	@ (80090ec <HAL_RCC_OscConfig+0x474>)
 8008f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f26:	f7fe fe4f 	bl	8007bc8 <HAL_GetTick>
 8008f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f2c:	e008      	b.n	8008f40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f2e:	f7fe fe4b 	bl	8007bc8 <HAL_GetTick>
 8008f32:	4602      	mov	r2, r0
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d901      	bls.n	8008f40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e10c      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f40:	4b6a      	ldr	r3, [pc, #424]	@ (80090ec <HAL_RCC_OscConfig+0x474>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d0f0      	beq.n	8008f2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d106      	bne.n	8008f62 <HAL_RCC_OscConfig+0x2ea>
 8008f54:	4b64      	ldr	r3, [pc, #400]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f58:	4a63      	ldr	r2, [pc, #396]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f5a:	f043 0301 	orr.w	r3, r3, #1
 8008f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f60:	e01c      	b.n	8008f9c <HAL_RCC_OscConfig+0x324>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	2b05      	cmp	r3, #5
 8008f68:	d10c      	bne.n	8008f84 <HAL_RCC_OscConfig+0x30c>
 8008f6a:	4b5f      	ldr	r3, [pc, #380]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f6e:	4a5e      	ldr	r2, [pc, #376]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f70:	f043 0304 	orr.w	r3, r3, #4
 8008f74:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f76:	4b5c      	ldr	r3, [pc, #368]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f7a:	4a5b      	ldr	r2, [pc, #364]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f7c:	f043 0301 	orr.w	r3, r3, #1
 8008f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f82:	e00b      	b.n	8008f9c <HAL_RCC_OscConfig+0x324>
 8008f84:	4b58      	ldr	r3, [pc, #352]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f88:	4a57      	ldr	r2, [pc, #348]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f8a:	f023 0301 	bic.w	r3, r3, #1
 8008f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f90:	4b55      	ldr	r3, [pc, #340]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f94:	4a54      	ldr	r2, [pc, #336]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008f96:	f023 0304 	bic.w	r3, r3, #4
 8008f9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d015      	beq.n	8008fd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fa4:	f7fe fe10 	bl	8007bc8 <HAL_GetTick>
 8008fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008faa:	e00a      	b.n	8008fc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fac:	f7fe fe0c 	bl	8007bc8 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d901      	bls.n	8008fc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e0cb      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fc2:	4b49      	ldr	r3, [pc, #292]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d0ee      	beq.n	8008fac <HAL_RCC_OscConfig+0x334>
 8008fce:	e014      	b.n	8008ffa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fd0:	f7fe fdfa 	bl	8007bc8 <HAL_GetTick>
 8008fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fd6:	e00a      	b.n	8008fee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fd8:	f7fe fdf6 	bl	8007bc8 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d901      	bls.n	8008fee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e0b5      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fee:	4b3e      	ldr	r3, [pc, #248]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8008ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ff2:	f003 0302 	and.w	r3, r3, #2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1ee      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d105      	bne.n	800900c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009000:	4b39      	ldr	r3, [pc, #228]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8009002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009004:	4a38      	ldr	r2, [pc, #224]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8009006:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800900a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 80a1 	beq.w	8009158 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009016:	4b34      	ldr	r3, [pc, #208]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f003 030c 	and.w	r3, r3, #12
 800901e:	2b08      	cmp	r3, #8
 8009020:	d05c      	beq.n	80090dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	2b02      	cmp	r3, #2
 8009028:	d141      	bne.n	80090ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800902a:	4b31      	ldr	r3, [pc, #196]	@ (80090f0 <HAL_RCC_OscConfig+0x478>)
 800902c:	2200      	movs	r2, #0
 800902e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009030:	f7fe fdca 	bl	8007bc8 <HAL_GetTick>
 8009034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009036:	e008      	b.n	800904a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009038:	f7fe fdc6 	bl	8007bc8 <HAL_GetTick>
 800903c:	4602      	mov	r2, r0
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	2b02      	cmp	r3, #2
 8009044:	d901      	bls.n	800904a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009046:	2303      	movs	r3, #3
 8009048:	e087      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800904a:	4b27      	ldr	r3, [pc, #156]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1f0      	bne.n	8009038 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	69da      	ldr	r2, [r3, #28]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	431a      	orrs	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009064:	019b      	lsls	r3, r3, #6
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800906c:	085b      	lsrs	r3, r3, #1
 800906e:	3b01      	subs	r3, #1
 8009070:	041b      	lsls	r3, r3, #16
 8009072:	431a      	orrs	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009078:	061b      	lsls	r3, r3, #24
 800907a:	491b      	ldr	r1, [pc, #108]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 800907c:	4313      	orrs	r3, r2
 800907e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009080:	4b1b      	ldr	r3, [pc, #108]	@ (80090f0 <HAL_RCC_OscConfig+0x478>)
 8009082:	2201      	movs	r2, #1
 8009084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009086:	f7fe fd9f 	bl	8007bc8 <HAL_GetTick>
 800908a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800908c:	e008      	b.n	80090a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800908e:	f7fe fd9b 	bl	8007bc8 <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	2b02      	cmp	r3, #2
 800909a:	d901      	bls.n	80090a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e05c      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090a0:	4b11      	ldr	r3, [pc, #68]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0f0      	beq.n	800908e <HAL_RCC_OscConfig+0x416>
 80090ac:	e054      	b.n	8009158 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090ae:	4b10      	ldr	r3, [pc, #64]	@ (80090f0 <HAL_RCC_OscConfig+0x478>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090b4:	f7fe fd88 	bl	8007bc8 <HAL_GetTick>
 80090b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090ba:	e008      	b.n	80090ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090bc:	f7fe fd84 	bl	8007bc8 <HAL_GetTick>
 80090c0:	4602      	mov	r2, r0
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d901      	bls.n	80090ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e045      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090ce:	4b06      	ldr	r3, [pc, #24]	@ (80090e8 <HAL_RCC_OscConfig+0x470>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1f0      	bne.n	80090bc <HAL_RCC_OscConfig+0x444>
 80090da:	e03d      	b.n	8009158 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d107      	bne.n	80090f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e038      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
 80090e8:	40023800 	.word	0x40023800
 80090ec:	40007000 	.word	0x40007000
 80090f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80090f4:	4b1b      	ldr	r3, [pc, #108]	@ (8009164 <HAL_RCC_OscConfig+0x4ec>)
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d028      	beq.n	8009154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800910c:	429a      	cmp	r2, r3
 800910e:	d121      	bne.n	8009154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800911a:	429a      	cmp	r2, r3
 800911c:	d11a      	bne.n	8009154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009124:	4013      	ands	r3, r2
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800912a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800912c:	4293      	cmp	r3, r2
 800912e:	d111      	bne.n	8009154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800913a:	085b      	lsrs	r3, r3, #1
 800913c:	3b01      	subs	r3, #1
 800913e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009140:	429a      	cmp	r2, r3
 8009142:	d107      	bne.n	8009154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800914e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009150:	429a      	cmp	r2, r3
 8009152:	d001      	beq.n	8009158 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e000      	b.n	800915a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3718      	adds	r7, #24
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	40023800 	.word	0x40023800

08009168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e0cc      	b.n	8009316 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800917c:	4b68      	ldr	r3, [pc, #416]	@ (8009320 <HAL_RCC_ClockConfig+0x1b8>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0307 	and.w	r3, r3, #7
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d90c      	bls.n	80091a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800918a:	4b65      	ldr	r3, [pc, #404]	@ (8009320 <HAL_RCC_ClockConfig+0x1b8>)
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	b2d2      	uxtb	r2, r2
 8009190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009192:	4b63      	ldr	r3, [pc, #396]	@ (8009320 <HAL_RCC_ClockConfig+0x1b8>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0307 	and.w	r3, r3, #7
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	429a      	cmp	r2, r3
 800919e:	d001      	beq.n	80091a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e0b8      	b.n	8009316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 0302 	and.w	r3, r3, #2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d020      	beq.n	80091f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d005      	beq.n	80091c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091bc:	4b59      	ldr	r3, [pc, #356]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	4a58      	ldr	r2, [pc, #352]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80091c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80091c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0308 	and.w	r3, r3, #8
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d005      	beq.n	80091e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091d4:	4b53      	ldr	r3, [pc, #332]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	4a52      	ldr	r2, [pc, #328]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80091da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80091de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091e0:	4b50      	ldr	r3, [pc, #320]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	494d      	ldr	r1, [pc, #308]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80091ee:	4313      	orrs	r3, r2
 80091f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d044      	beq.n	8009288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d107      	bne.n	8009216 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009206:	4b47      	ldr	r3, [pc, #284]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d119      	bne.n	8009246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e07f      	b.n	8009316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	2b02      	cmp	r3, #2
 800921c:	d003      	beq.n	8009226 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009222:	2b03      	cmp	r3, #3
 8009224:	d107      	bne.n	8009236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009226:	4b3f      	ldr	r3, [pc, #252]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d109      	bne.n	8009246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e06f      	b.n	8009316 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009236:	4b3b      	ldr	r3, [pc, #236]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d101      	bne.n	8009246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e067      	b.n	8009316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009246:	4b37      	ldr	r3, [pc, #220]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f023 0203 	bic.w	r2, r3, #3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	4934      	ldr	r1, [pc, #208]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 8009254:	4313      	orrs	r3, r2
 8009256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009258:	f7fe fcb6 	bl	8007bc8 <HAL_GetTick>
 800925c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800925e:	e00a      	b.n	8009276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009260:	f7fe fcb2 	bl	8007bc8 <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800926e:	4293      	cmp	r3, r2
 8009270:	d901      	bls.n	8009276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e04f      	b.n	8009316 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009276:	4b2b      	ldr	r3, [pc, #172]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f003 020c 	and.w	r2, r3, #12
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	429a      	cmp	r2, r3
 8009286:	d1eb      	bne.n	8009260 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009288:	4b25      	ldr	r3, [pc, #148]	@ (8009320 <HAL_RCC_ClockConfig+0x1b8>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 0307 	and.w	r3, r3, #7
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	429a      	cmp	r2, r3
 8009294:	d20c      	bcs.n	80092b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009296:	4b22      	ldr	r3, [pc, #136]	@ (8009320 <HAL_RCC_ClockConfig+0x1b8>)
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	b2d2      	uxtb	r2, r2
 800929c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800929e:	4b20      	ldr	r3, [pc, #128]	@ (8009320 <HAL_RCC_ClockConfig+0x1b8>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0307 	and.w	r3, r3, #7
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d001      	beq.n	80092b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e032      	b.n	8009316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 0304 	and.w	r3, r3, #4
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d008      	beq.n	80092ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092bc:	4b19      	ldr	r3, [pc, #100]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	4916      	ldr	r1, [pc, #88]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80092ca:	4313      	orrs	r3, r2
 80092cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0308 	and.w	r3, r3, #8
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d009      	beq.n	80092ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092da:	4b12      	ldr	r3, [pc, #72]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	490e      	ldr	r1, [pc, #56]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80092ea:	4313      	orrs	r3, r2
 80092ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80092ee:	f000 f821 	bl	8009334 <HAL_RCC_GetSysClockFreq>
 80092f2:	4602      	mov	r2, r0
 80092f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009324 <HAL_RCC_ClockConfig+0x1bc>)
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	091b      	lsrs	r3, r3, #4
 80092fa:	f003 030f 	and.w	r3, r3, #15
 80092fe:	490a      	ldr	r1, [pc, #40]	@ (8009328 <HAL_RCC_ClockConfig+0x1c0>)
 8009300:	5ccb      	ldrb	r3, [r1, r3]
 8009302:	fa22 f303 	lsr.w	r3, r2, r3
 8009306:	4a09      	ldr	r2, [pc, #36]	@ (800932c <HAL_RCC_ClockConfig+0x1c4>)
 8009308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800930a:	4b09      	ldr	r3, [pc, #36]	@ (8009330 <HAL_RCC_ClockConfig+0x1c8>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4618      	mov	r0, r3
 8009310:	f7fe fc16 	bl	8007b40 <HAL_InitTick>

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	40023c00 	.word	0x40023c00
 8009324:	40023800 	.word	0x40023800
 8009328:	08011a44 	.word	0x08011a44
 800932c:	200000cc 	.word	0x200000cc
 8009330:	200000d0 	.word	0x200000d0

08009334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009338:	b094      	sub	sp, #80	@ 0x50
 800933a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800933c:	2300      	movs	r3, #0
 800933e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009340:	2300      	movs	r3, #0
 8009342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009344:	2300      	movs	r3, #0
 8009346:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009348:	2300      	movs	r3, #0
 800934a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800934c:	4b79      	ldr	r3, [pc, #484]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x200>)
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f003 030c 	and.w	r3, r3, #12
 8009354:	2b08      	cmp	r3, #8
 8009356:	d00d      	beq.n	8009374 <HAL_RCC_GetSysClockFreq+0x40>
 8009358:	2b08      	cmp	r3, #8
 800935a:	f200 80e1 	bhi.w	8009520 <HAL_RCC_GetSysClockFreq+0x1ec>
 800935e:	2b00      	cmp	r3, #0
 8009360:	d002      	beq.n	8009368 <HAL_RCC_GetSysClockFreq+0x34>
 8009362:	2b04      	cmp	r3, #4
 8009364:	d003      	beq.n	800936e <HAL_RCC_GetSysClockFreq+0x3a>
 8009366:	e0db      	b.n	8009520 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009368:	4b73      	ldr	r3, [pc, #460]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x204>)
 800936a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800936c:	e0db      	b.n	8009526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800936e:	4b73      	ldr	r3, [pc, #460]	@ (800953c <HAL_RCC_GetSysClockFreq+0x208>)
 8009370:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009372:	e0d8      	b.n	8009526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009374:	4b6f      	ldr	r3, [pc, #444]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x200>)
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800937c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800937e:	4b6d      	ldr	r3, [pc, #436]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x200>)
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d063      	beq.n	8009452 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800938a:	4b6a      	ldr	r3, [pc, #424]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x200>)
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	099b      	lsrs	r3, r3, #6
 8009390:	2200      	movs	r2, #0
 8009392:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009394:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939c:	633b      	str	r3, [r7, #48]	@ 0x30
 800939e:	2300      	movs	r3, #0
 80093a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80093a6:	4622      	mov	r2, r4
 80093a8:	462b      	mov	r3, r5
 80093aa:	f04f 0000 	mov.w	r0, #0
 80093ae:	f04f 0100 	mov.w	r1, #0
 80093b2:	0159      	lsls	r1, r3, #5
 80093b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80093b8:	0150      	lsls	r0, r2, #5
 80093ba:	4602      	mov	r2, r0
 80093bc:	460b      	mov	r3, r1
 80093be:	4621      	mov	r1, r4
 80093c0:	1a51      	subs	r1, r2, r1
 80093c2:	6139      	str	r1, [r7, #16]
 80093c4:	4629      	mov	r1, r5
 80093c6:	eb63 0301 	sbc.w	r3, r3, r1
 80093ca:	617b      	str	r3, [r7, #20]
 80093cc:	f04f 0200 	mov.w	r2, #0
 80093d0:	f04f 0300 	mov.w	r3, #0
 80093d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093d8:	4659      	mov	r1, fp
 80093da:	018b      	lsls	r3, r1, #6
 80093dc:	4651      	mov	r1, sl
 80093de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80093e2:	4651      	mov	r1, sl
 80093e4:	018a      	lsls	r2, r1, #6
 80093e6:	4651      	mov	r1, sl
 80093e8:	ebb2 0801 	subs.w	r8, r2, r1
 80093ec:	4659      	mov	r1, fp
 80093ee:	eb63 0901 	sbc.w	r9, r3, r1
 80093f2:	f04f 0200 	mov.w	r2, #0
 80093f6:	f04f 0300 	mov.w	r3, #0
 80093fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009406:	4690      	mov	r8, r2
 8009408:	4699      	mov	r9, r3
 800940a:	4623      	mov	r3, r4
 800940c:	eb18 0303 	adds.w	r3, r8, r3
 8009410:	60bb      	str	r3, [r7, #8]
 8009412:	462b      	mov	r3, r5
 8009414:	eb49 0303 	adc.w	r3, r9, r3
 8009418:	60fb      	str	r3, [r7, #12]
 800941a:	f04f 0200 	mov.w	r2, #0
 800941e:	f04f 0300 	mov.w	r3, #0
 8009422:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009426:	4629      	mov	r1, r5
 8009428:	024b      	lsls	r3, r1, #9
 800942a:	4621      	mov	r1, r4
 800942c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009430:	4621      	mov	r1, r4
 8009432:	024a      	lsls	r2, r1, #9
 8009434:	4610      	mov	r0, r2
 8009436:	4619      	mov	r1, r3
 8009438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800943a:	2200      	movs	r2, #0
 800943c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800943e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009440:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009444:	f7f7 fc20 	bl	8000c88 <__aeabi_uldivmod>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4613      	mov	r3, r2
 800944e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009450:	e058      	b.n	8009504 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009452:	4b38      	ldr	r3, [pc, #224]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x200>)
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	099b      	lsrs	r3, r3, #6
 8009458:	2200      	movs	r2, #0
 800945a:	4618      	mov	r0, r3
 800945c:	4611      	mov	r1, r2
 800945e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009462:	623b      	str	r3, [r7, #32]
 8009464:	2300      	movs	r3, #0
 8009466:	627b      	str	r3, [r7, #36]	@ 0x24
 8009468:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800946c:	4642      	mov	r2, r8
 800946e:	464b      	mov	r3, r9
 8009470:	f04f 0000 	mov.w	r0, #0
 8009474:	f04f 0100 	mov.w	r1, #0
 8009478:	0159      	lsls	r1, r3, #5
 800947a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800947e:	0150      	lsls	r0, r2, #5
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	4641      	mov	r1, r8
 8009486:	ebb2 0a01 	subs.w	sl, r2, r1
 800948a:	4649      	mov	r1, r9
 800948c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009490:	f04f 0200 	mov.w	r2, #0
 8009494:	f04f 0300 	mov.w	r3, #0
 8009498:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800949c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80094a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80094a4:	ebb2 040a 	subs.w	r4, r2, sl
 80094a8:	eb63 050b 	sbc.w	r5, r3, fp
 80094ac:	f04f 0200 	mov.w	r2, #0
 80094b0:	f04f 0300 	mov.w	r3, #0
 80094b4:	00eb      	lsls	r3, r5, #3
 80094b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80094ba:	00e2      	lsls	r2, r4, #3
 80094bc:	4614      	mov	r4, r2
 80094be:	461d      	mov	r5, r3
 80094c0:	4643      	mov	r3, r8
 80094c2:	18e3      	adds	r3, r4, r3
 80094c4:	603b      	str	r3, [r7, #0]
 80094c6:	464b      	mov	r3, r9
 80094c8:	eb45 0303 	adc.w	r3, r5, r3
 80094cc:	607b      	str	r3, [r7, #4]
 80094ce:	f04f 0200 	mov.w	r2, #0
 80094d2:	f04f 0300 	mov.w	r3, #0
 80094d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80094da:	4629      	mov	r1, r5
 80094dc:	028b      	lsls	r3, r1, #10
 80094de:	4621      	mov	r1, r4
 80094e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80094e4:	4621      	mov	r1, r4
 80094e6:	028a      	lsls	r2, r1, #10
 80094e8:	4610      	mov	r0, r2
 80094ea:	4619      	mov	r1, r3
 80094ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094ee:	2200      	movs	r2, #0
 80094f0:	61bb      	str	r3, [r7, #24]
 80094f2:	61fa      	str	r2, [r7, #28]
 80094f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094f8:	f7f7 fbc6 	bl	8000c88 <__aeabi_uldivmod>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4613      	mov	r3, r2
 8009502:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009504:	4b0b      	ldr	r3, [pc, #44]	@ (8009534 <HAL_RCC_GetSysClockFreq+0x200>)
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	0c1b      	lsrs	r3, r3, #16
 800950a:	f003 0303 	and.w	r3, r3, #3
 800950e:	3301      	adds	r3, #1
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8009514:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009518:	fbb2 f3f3 	udiv	r3, r2, r3
 800951c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800951e:	e002      	b.n	8009526 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009520:	4b05      	ldr	r3, [pc, #20]	@ (8009538 <HAL_RCC_GetSysClockFreq+0x204>)
 8009522:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009528:	4618      	mov	r0, r3
 800952a:	3750      	adds	r7, #80	@ 0x50
 800952c:	46bd      	mov	sp, r7
 800952e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009532:	bf00      	nop
 8009534:	40023800 	.word	0x40023800
 8009538:	00f42400 	.word	0x00f42400
 800953c:	007a1200 	.word	0x007a1200

08009540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009540:	b480      	push	{r7}
 8009542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009544:	4b03      	ldr	r3, [pc, #12]	@ (8009554 <HAL_RCC_GetHCLKFreq+0x14>)
 8009546:	681b      	ldr	r3, [r3, #0]
}
 8009548:	4618      	mov	r0, r3
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	200000cc 	.word	0x200000cc

08009558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800955c:	f7ff fff0 	bl	8009540 <HAL_RCC_GetHCLKFreq>
 8009560:	4602      	mov	r2, r0
 8009562:	4b05      	ldr	r3, [pc, #20]	@ (8009578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	0a9b      	lsrs	r3, r3, #10
 8009568:	f003 0307 	and.w	r3, r3, #7
 800956c:	4903      	ldr	r1, [pc, #12]	@ (800957c <HAL_RCC_GetPCLK1Freq+0x24>)
 800956e:	5ccb      	ldrb	r3, [r1, r3]
 8009570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009574:	4618      	mov	r0, r3
 8009576:	bd80      	pop	{r7, pc}
 8009578:	40023800 	.word	0x40023800
 800957c:	08011a54 	.word	0x08011a54

08009580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009584:	f7ff ffdc 	bl	8009540 <HAL_RCC_GetHCLKFreq>
 8009588:	4602      	mov	r2, r0
 800958a:	4b05      	ldr	r3, [pc, #20]	@ (80095a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	0b5b      	lsrs	r3, r3, #13
 8009590:	f003 0307 	and.w	r3, r3, #7
 8009594:	4903      	ldr	r1, [pc, #12]	@ (80095a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009596:	5ccb      	ldrb	r3, [r1, r3]
 8009598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800959c:	4618      	mov	r0, r3
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	40023800 	.word	0x40023800
 80095a4:	08011a54 	.word	0x08011a54

080095a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d101      	bne.n	80095ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e041      	b.n	800963e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d106      	bne.n	80095d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7fd ff30 	bl	8007434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2202      	movs	r2, #2
 80095d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3304      	adds	r3, #4
 80095e4:	4619      	mov	r1, r3
 80095e6:	4610      	mov	r0, r2
 80095e8:	f000 fc48 	bl	8009e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b082      	sub	sp, #8
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d101      	bne.n	8009658 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e041      	b.n	80096dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b00      	cmp	r3, #0
 8009662:	d106      	bne.n	8009672 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f839 	bl	80096e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2202      	movs	r2, #2
 8009676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	3304      	adds	r3, #4
 8009682:	4619      	mov	r1, r3
 8009684:	4610      	mov	r0, r2
 8009686:	f000 fbf9 	bl	8009e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2201      	movs	r2, #1
 80096be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d109      	bne.n	8009720 <HAL_TIM_PWM_Start_IT+0x28>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2b01      	cmp	r3, #1
 8009716:	bf14      	ite	ne
 8009718:	2301      	movne	r3, #1
 800971a:	2300      	moveq	r3, #0
 800971c:	b2db      	uxtb	r3, r3
 800971e:	e022      	b.n	8009766 <HAL_TIM_PWM_Start_IT+0x6e>
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b04      	cmp	r3, #4
 8009724:	d109      	bne.n	800973a <HAL_TIM_PWM_Start_IT+0x42>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b01      	cmp	r3, #1
 8009730:	bf14      	ite	ne
 8009732:	2301      	movne	r3, #1
 8009734:	2300      	moveq	r3, #0
 8009736:	b2db      	uxtb	r3, r3
 8009738:	e015      	b.n	8009766 <HAL_TIM_PWM_Start_IT+0x6e>
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b08      	cmp	r3, #8
 800973e:	d109      	bne.n	8009754 <HAL_TIM_PWM_Start_IT+0x5c>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b01      	cmp	r3, #1
 800974a:	bf14      	ite	ne
 800974c:	2301      	movne	r3, #1
 800974e:	2300      	moveq	r3, #0
 8009750:	b2db      	uxtb	r3, r3
 8009752:	e008      	b.n	8009766 <HAL_TIM_PWM_Start_IT+0x6e>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b01      	cmp	r3, #1
 800975e:	bf14      	ite	ne
 8009760:	2301      	movne	r3, #1
 8009762:	2300      	moveq	r3, #0
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e0c7      	b.n	80098fe <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d104      	bne.n	800977e <HAL_TIM_PWM_Start_IT+0x86>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2202      	movs	r2, #2
 8009778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800977c:	e013      	b.n	80097a6 <HAL_TIM_PWM_Start_IT+0xae>
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b04      	cmp	r3, #4
 8009782:	d104      	bne.n	800978e <HAL_TIM_PWM_Start_IT+0x96>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2202      	movs	r2, #2
 8009788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800978c:	e00b      	b.n	80097a6 <HAL_TIM_PWM_Start_IT+0xae>
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2b08      	cmp	r3, #8
 8009792:	d104      	bne.n	800979e <HAL_TIM_PWM_Start_IT+0xa6>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800979c:	e003      	b.n	80097a6 <HAL_TIM_PWM_Start_IT+0xae>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2202      	movs	r2, #2
 80097a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b0c      	cmp	r3, #12
 80097aa:	d841      	bhi.n	8009830 <HAL_TIM_PWM_Start_IT+0x138>
 80097ac:	a201      	add	r2, pc, #4	@ (adr r2, 80097b4 <HAL_TIM_PWM_Start_IT+0xbc>)
 80097ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b2:	bf00      	nop
 80097b4:	080097e9 	.word	0x080097e9
 80097b8:	08009831 	.word	0x08009831
 80097bc:	08009831 	.word	0x08009831
 80097c0:	08009831 	.word	0x08009831
 80097c4:	080097fb 	.word	0x080097fb
 80097c8:	08009831 	.word	0x08009831
 80097cc:	08009831 	.word	0x08009831
 80097d0:	08009831 	.word	0x08009831
 80097d4:	0800980d 	.word	0x0800980d
 80097d8:	08009831 	.word	0x08009831
 80097dc:	08009831 	.word	0x08009831
 80097e0:	08009831 	.word	0x08009831
 80097e4:	0800981f 	.word	0x0800981f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68da      	ldr	r2, [r3, #12]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0202 	orr.w	r2, r2, #2
 80097f6:	60da      	str	r2, [r3, #12]
      break;
 80097f8:	e01d      	b.n	8009836 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68da      	ldr	r2, [r3, #12]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f042 0204 	orr.w	r2, r2, #4
 8009808:	60da      	str	r2, [r3, #12]
      break;
 800980a:	e014      	b.n	8009836 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68da      	ldr	r2, [r3, #12]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f042 0208 	orr.w	r2, r2, #8
 800981a:	60da      	str	r2, [r3, #12]
      break;
 800981c:	e00b      	b.n	8009836 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68da      	ldr	r2, [r3, #12]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f042 0210 	orr.w	r2, r2, #16
 800982c:	60da      	str	r2, [r3, #12]
      break;
 800982e:	e002      	b.n	8009836 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	73fb      	strb	r3, [r7, #15]
      break;
 8009834:	bf00      	nop
  }

  if (status == HAL_OK)
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d15f      	bne.n	80098fc <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2201      	movs	r2, #1
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	4618      	mov	r0, r3
 8009846:	f000 fe0f 	bl	800a468 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a2e      	ldr	r2, [pc, #184]	@ (8009908 <HAL_TIM_PWM_Start_IT+0x210>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d004      	beq.n	800985e <HAL_TIM_PWM_Start_IT+0x166>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a2c      	ldr	r2, [pc, #176]	@ (800990c <HAL_TIM_PWM_Start_IT+0x214>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d101      	bne.n	8009862 <HAL_TIM_PWM_Start_IT+0x16a>
 800985e:	2301      	movs	r3, #1
 8009860:	e000      	b.n	8009864 <HAL_TIM_PWM_Start_IT+0x16c>
 8009862:	2300      	movs	r3, #0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d007      	beq.n	8009878 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009876:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a22      	ldr	r2, [pc, #136]	@ (8009908 <HAL_TIM_PWM_Start_IT+0x210>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d022      	beq.n	80098c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800988a:	d01d      	beq.n	80098c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a1f      	ldr	r2, [pc, #124]	@ (8009910 <HAL_TIM_PWM_Start_IT+0x218>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d018      	beq.n	80098c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a1e      	ldr	r2, [pc, #120]	@ (8009914 <HAL_TIM_PWM_Start_IT+0x21c>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d013      	beq.n	80098c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009918 <HAL_TIM_PWM_Start_IT+0x220>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d00e      	beq.n	80098c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a17      	ldr	r2, [pc, #92]	@ (800990c <HAL_TIM_PWM_Start_IT+0x214>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d009      	beq.n	80098c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a18      	ldr	r2, [pc, #96]	@ (800991c <HAL_TIM_PWM_Start_IT+0x224>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d004      	beq.n	80098c8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a17      	ldr	r2, [pc, #92]	@ (8009920 <HAL_TIM_PWM_Start_IT+0x228>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d111      	bne.n	80098ec <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	f003 0307 	and.w	r3, r3, #7
 80098d2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	2b06      	cmp	r3, #6
 80098d8:	d010      	beq.n	80098fc <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f042 0201 	orr.w	r2, r2, #1
 80098e8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098ea:	e007      	b.n	80098fc <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f042 0201 	orr.w	r2, r2, #1
 80098fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	40010000 	.word	0x40010000
 800990c:	40010400 	.word	0x40010400
 8009910:	40000400 	.word	0x40000400
 8009914:	40000800 	.word	0x40000800
 8009918:	40000c00 	.word	0x40000c00
 800991c:	40014000 	.word	0x40014000
 8009920:	40001800 	.word	0x40001800

08009924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f003 0302 	and.w	r3, r3, #2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d020      	beq.n	8009988 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f003 0302 	and.w	r3, r3, #2
 800994c:	2b00      	cmp	r3, #0
 800994e:	d01b      	beq.n	8009988 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f06f 0202 	mvn.w	r2, #2
 8009958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2201      	movs	r2, #1
 800995e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	f003 0303 	and.w	r3, r3, #3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d003      	beq.n	8009976 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fa65 	bl	8009e3e <HAL_TIM_IC_CaptureCallback>
 8009974:	e005      	b.n	8009982 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fa57 	bl	8009e2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fa68 	bl	8009e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f003 0304 	and.w	r3, r3, #4
 800998e:	2b00      	cmp	r3, #0
 8009990:	d020      	beq.n	80099d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f003 0304 	and.w	r3, r3, #4
 8009998:	2b00      	cmp	r3, #0
 800999a:	d01b      	beq.n	80099d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f06f 0204 	mvn.w	r2, #4
 80099a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2202      	movs	r2, #2
 80099aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fa3f 	bl	8009e3e <HAL_TIM_IC_CaptureCallback>
 80099c0:	e005      	b.n	80099ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fa31 	bl	8009e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fa42 	bl	8009e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f003 0308 	and.w	r3, r3, #8
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d020      	beq.n	8009a20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f003 0308 	and.w	r3, r3, #8
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d01b      	beq.n	8009a20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f06f 0208 	mvn.w	r2, #8
 80099f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2204      	movs	r2, #4
 80099f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	f003 0303 	and.w	r3, r3, #3
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d003      	beq.n	8009a0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fa19 	bl	8009e3e <HAL_TIM_IC_CaptureCallback>
 8009a0c:	e005      	b.n	8009a1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fa0b 	bl	8009e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fa1c 	bl	8009e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	f003 0310 	and.w	r3, r3, #16
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d020      	beq.n	8009a6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f003 0310 	and.w	r3, r3, #16
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d01b      	beq.n	8009a6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f06f 0210 	mvn.w	r2, #16
 8009a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2208      	movs	r2, #8
 8009a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d003      	beq.n	8009a5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f9f3 	bl	8009e3e <HAL_TIM_IC_CaptureCallback>
 8009a58:	e005      	b.n	8009a66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f9e5 	bl	8009e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f9f6 	bl	8009e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	f003 0301 	and.w	r3, r3, #1
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00c      	beq.n	8009a90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f003 0301 	and.w	r3, r3, #1
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d007      	beq.n	8009a90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f06f 0201 	mvn.w	r2, #1
 8009a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f9c3 	bl	8009e16 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00c      	beq.n	8009ab4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d007      	beq.n	8009ab4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fdd8 	bl	800a664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00c      	beq.n	8009ad8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d007      	beq.n	8009ad8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f9c7 	bl	8009e66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f003 0320 	and.w	r3, r3, #32
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00c      	beq.n	8009afc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f003 0320 	and.w	r3, r3, #32
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d007      	beq.n	8009afc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f06f 0220 	mvn.w	r2, #32
 8009af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 fdaa 	bl	800a650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009afc:	bf00      	nop
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d101      	bne.n	8009b22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b1e:	2302      	movs	r3, #2
 8009b20:	e0ae      	b.n	8009c80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b0c      	cmp	r3, #12
 8009b2e:	f200 809f 	bhi.w	8009c70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009b32:	a201      	add	r2, pc, #4	@ (adr r2, 8009b38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b38:	08009b6d 	.word	0x08009b6d
 8009b3c:	08009c71 	.word	0x08009c71
 8009b40:	08009c71 	.word	0x08009c71
 8009b44:	08009c71 	.word	0x08009c71
 8009b48:	08009bad 	.word	0x08009bad
 8009b4c:	08009c71 	.word	0x08009c71
 8009b50:	08009c71 	.word	0x08009c71
 8009b54:	08009c71 	.word	0x08009c71
 8009b58:	08009bef 	.word	0x08009bef
 8009b5c:	08009c71 	.word	0x08009c71
 8009b60:	08009c71 	.word	0x08009c71
 8009b64:	08009c71 	.word	0x08009c71
 8009b68:	08009c2f 	.word	0x08009c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68b9      	ldr	r1, [r7, #8]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 fa2e 	bl	8009fd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699a      	ldr	r2, [r3, #24]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f042 0208 	orr.w	r2, r2, #8
 8009b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	699a      	ldr	r2, [r3, #24]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f022 0204 	bic.w	r2, r2, #4
 8009b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6999      	ldr	r1, [r3, #24]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	691a      	ldr	r2, [r3, #16]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	619a      	str	r2, [r3, #24]
      break;
 8009baa:	e064      	b.n	8009c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68b9      	ldr	r1, [r7, #8]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 fa7e 	bl	800a0b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	699a      	ldr	r2, [r3, #24]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	699a      	ldr	r2, [r3, #24]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6999      	ldr	r1, [r3, #24]
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	021a      	lsls	r2, r3, #8
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	430a      	orrs	r2, r1
 8009bea:	619a      	str	r2, [r3, #24]
      break;
 8009bec:	e043      	b.n	8009c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68b9      	ldr	r1, [r7, #8]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f000 fad3 	bl	800a1a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	69da      	ldr	r2, [r3, #28]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f042 0208 	orr.w	r2, r2, #8
 8009c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	69da      	ldr	r2, [r3, #28]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f022 0204 	bic.w	r2, r2, #4
 8009c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	69d9      	ldr	r1, [r3, #28]
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	691a      	ldr	r2, [r3, #16]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	430a      	orrs	r2, r1
 8009c2a:	61da      	str	r2, [r3, #28]
      break;
 8009c2c:	e023      	b.n	8009c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68b9      	ldr	r1, [r7, #8]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 fb27 	bl	800a288 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	69da      	ldr	r2, [r3, #28]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	69da      	ldr	r2, [r3, #28]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	69d9      	ldr	r1, [r3, #28]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	021a      	lsls	r2, r3, #8
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	61da      	str	r2, [r3, #28]
      break;
 8009c6e:	e002      	b.n	8009c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	75fb      	strb	r3, [r7, #23]
      break;
 8009c74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3718      	adds	r7, #24
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d101      	bne.n	8009ca4 <HAL_TIM_ConfigClockSource+0x1c>
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	e0b4      	b.n	8009e0e <HAL_TIM_ConfigClockSource+0x186>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cdc:	d03e      	beq.n	8009d5c <HAL_TIM_ConfigClockSource+0xd4>
 8009cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ce2:	f200 8087 	bhi.w	8009df4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cea:	f000 8086 	beq.w	8009dfa <HAL_TIM_ConfigClockSource+0x172>
 8009cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cf2:	d87f      	bhi.n	8009df4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cf4:	2b70      	cmp	r3, #112	@ 0x70
 8009cf6:	d01a      	beq.n	8009d2e <HAL_TIM_ConfigClockSource+0xa6>
 8009cf8:	2b70      	cmp	r3, #112	@ 0x70
 8009cfa:	d87b      	bhi.n	8009df4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cfc:	2b60      	cmp	r3, #96	@ 0x60
 8009cfe:	d050      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0x11a>
 8009d00:	2b60      	cmp	r3, #96	@ 0x60
 8009d02:	d877      	bhi.n	8009df4 <HAL_TIM_ConfigClockSource+0x16c>
 8009d04:	2b50      	cmp	r3, #80	@ 0x50
 8009d06:	d03c      	beq.n	8009d82 <HAL_TIM_ConfigClockSource+0xfa>
 8009d08:	2b50      	cmp	r3, #80	@ 0x50
 8009d0a:	d873      	bhi.n	8009df4 <HAL_TIM_ConfigClockSource+0x16c>
 8009d0c:	2b40      	cmp	r3, #64	@ 0x40
 8009d0e:	d058      	beq.n	8009dc2 <HAL_TIM_ConfigClockSource+0x13a>
 8009d10:	2b40      	cmp	r3, #64	@ 0x40
 8009d12:	d86f      	bhi.n	8009df4 <HAL_TIM_ConfigClockSource+0x16c>
 8009d14:	2b30      	cmp	r3, #48	@ 0x30
 8009d16:	d064      	beq.n	8009de2 <HAL_TIM_ConfigClockSource+0x15a>
 8009d18:	2b30      	cmp	r3, #48	@ 0x30
 8009d1a:	d86b      	bhi.n	8009df4 <HAL_TIM_ConfigClockSource+0x16c>
 8009d1c:	2b20      	cmp	r3, #32
 8009d1e:	d060      	beq.n	8009de2 <HAL_TIM_ConfigClockSource+0x15a>
 8009d20:	2b20      	cmp	r3, #32
 8009d22:	d867      	bhi.n	8009df4 <HAL_TIM_ConfigClockSource+0x16c>
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d05c      	beq.n	8009de2 <HAL_TIM_ConfigClockSource+0x15a>
 8009d28:	2b10      	cmp	r3, #16
 8009d2a:	d05a      	beq.n	8009de2 <HAL_TIM_ConfigClockSource+0x15a>
 8009d2c:	e062      	b.n	8009df4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d3e:	f000 fb73 	bl	800a428 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	609a      	str	r2, [r3, #8]
      break;
 8009d5a:	e04f      	b.n	8009dfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d6c:	f000 fb5c 	bl	800a428 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	689a      	ldr	r2, [r3, #8]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d7e:	609a      	str	r2, [r3, #8]
      break;
 8009d80:	e03c      	b.n	8009dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f000 fad0 	bl	800a334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2150      	movs	r1, #80	@ 0x50
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 fb29 	bl	800a3f2 <TIM_ITRx_SetConfig>
      break;
 8009da0:	e02c      	b.n	8009dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dae:	461a      	mov	r2, r3
 8009db0:	f000 faef 	bl	800a392 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2160      	movs	r1, #96	@ 0x60
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f000 fb19 	bl	800a3f2 <TIM_ITRx_SetConfig>
      break;
 8009dc0:	e01c      	b.n	8009dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f000 fab0 	bl	800a334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2140      	movs	r1, #64	@ 0x40
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 fb09 	bl	800a3f2 <TIM_ITRx_SetConfig>
      break;
 8009de0:	e00c      	b.n	8009dfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4619      	mov	r1, r3
 8009dec:	4610      	mov	r0, r2
 8009dee:	f000 fb00 	bl	800a3f2 <TIM_ITRx_SetConfig>
      break;
 8009df2:	e003      	b.n	8009dfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	73fb      	strb	r3, [r7, #15]
      break;
 8009df8:	e000      	b.n	8009dfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b083      	sub	sp, #12
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009e1e:	bf00      	nop
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b083      	sub	sp, #12
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e32:	bf00      	nop
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b083      	sub	sp, #12
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e46:	bf00      	nop
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b083      	sub	sp, #12
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e5a:	bf00      	nop
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b083      	sub	sp, #12
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e6e:	bf00      	nop
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
	...

08009e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a46      	ldr	r2, [pc, #280]	@ (8009fa8 <TIM_Base_SetConfig+0x12c>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d013      	beq.n	8009ebc <TIM_Base_SetConfig+0x40>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e9a:	d00f      	beq.n	8009ebc <TIM_Base_SetConfig+0x40>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a43      	ldr	r2, [pc, #268]	@ (8009fac <TIM_Base_SetConfig+0x130>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d00b      	beq.n	8009ebc <TIM_Base_SetConfig+0x40>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a42      	ldr	r2, [pc, #264]	@ (8009fb0 <TIM_Base_SetConfig+0x134>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d007      	beq.n	8009ebc <TIM_Base_SetConfig+0x40>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a41      	ldr	r2, [pc, #260]	@ (8009fb4 <TIM_Base_SetConfig+0x138>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d003      	beq.n	8009ebc <TIM_Base_SetConfig+0x40>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a40      	ldr	r2, [pc, #256]	@ (8009fb8 <TIM_Base_SetConfig+0x13c>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d108      	bne.n	8009ece <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a35      	ldr	r2, [pc, #212]	@ (8009fa8 <TIM_Base_SetConfig+0x12c>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d02b      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009edc:	d027      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a32      	ldr	r2, [pc, #200]	@ (8009fac <TIM_Base_SetConfig+0x130>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d023      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a31      	ldr	r2, [pc, #196]	@ (8009fb0 <TIM_Base_SetConfig+0x134>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d01f      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a30      	ldr	r2, [pc, #192]	@ (8009fb4 <TIM_Base_SetConfig+0x138>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d01b      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8009fb8 <TIM_Base_SetConfig+0x13c>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d017      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a2e      	ldr	r2, [pc, #184]	@ (8009fbc <TIM_Base_SetConfig+0x140>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d013      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a2d      	ldr	r2, [pc, #180]	@ (8009fc0 <TIM_Base_SetConfig+0x144>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d00f      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a2c      	ldr	r2, [pc, #176]	@ (8009fc4 <TIM_Base_SetConfig+0x148>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d00b      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a2b      	ldr	r2, [pc, #172]	@ (8009fc8 <TIM_Base_SetConfig+0x14c>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d007      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a2a      	ldr	r2, [pc, #168]	@ (8009fcc <TIM_Base_SetConfig+0x150>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d003      	beq.n	8009f2e <TIM_Base_SetConfig+0xb2>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a29      	ldr	r2, [pc, #164]	@ (8009fd0 <TIM_Base_SetConfig+0x154>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d108      	bne.n	8009f40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	689a      	ldr	r2, [r3, #8]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a10      	ldr	r2, [pc, #64]	@ (8009fa8 <TIM_Base_SetConfig+0x12c>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d003      	beq.n	8009f74 <TIM_Base_SetConfig+0xf8>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a12      	ldr	r2, [pc, #72]	@ (8009fb8 <TIM_Base_SetConfig+0x13c>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d103      	bne.n	8009f7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	691a      	ldr	r2, [r3, #16]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d105      	bne.n	8009f9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	f023 0201 	bic.w	r2, r3, #1
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	611a      	str	r2, [r3, #16]
  }
}
 8009f9a:	bf00      	nop
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	40010000 	.word	0x40010000
 8009fac:	40000400 	.word	0x40000400
 8009fb0:	40000800 	.word	0x40000800
 8009fb4:	40000c00 	.word	0x40000c00
 8009fb8:	40010400 	.word	0x40010400
 8009fbc:	40014000 	.word	0x40014000
 8009fc0:	40014400 	.word	0x40014400
 8009fc4:	40014800 	.word	0x40014800
 8009fc8:	40001800 	.word	0x40001800
 8009fcc:	40001c00 	.word	0x40001c00
 8009fd0:	40002000 	.word	0x40002000

08009fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a1b      	ldr	r3, [r3, #32]
 8009fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a1b      	ldr	r3, [r3, #32]
 8009fe8:	f023 0201 	bic.w	r2, r3, #1
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f023 0303 	bic.w	r3, r3, #3
 800a00a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	4313      	orrs	r3, r2
 800a014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f023 0302 	bic.w	r3, r3, #2
 800a01c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	4313      	orrs	r3, r2
 800a026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a20      	ldr	r2, [pc, #128]	@ (800a0ac <TIM_OC1_SetConfig+0xd8>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d003      	beq.n	800a038 <TIM_OC1_SetConfig+0x64>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a1f      	ldr	r2, [pc, #124]	@ (800a0b0 <TIM_OC1_SetConfig+0xdc>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d10c      	bne.n	800a052 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	f023 0308 	bic.w	r3, r3, #8
 800a03e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	4313      	orrs	r3, r2
 800a048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f023 0304 	bic.w	r3, r3, #4
 800a050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a15      	ldr	r2, [pc, #84]	@ (800a0ac <TIM_OC1_SetConfig+0xd8>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d003      	beq.n	800a062 <TIM_OC1_SetConfig+0x8e>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a14      	ldr	r2, [pc, #80]	@ (800a0b0 <TIM_OC1_SetConfig+0xdc>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d111      	bne.n	800a086 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	695b      	ldr	r3, [r3, #20]
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	4313      	orrs	r3, r2
 800a07a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	4313      	orrs	r3, r2
 800a084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	685a      	ldr	r2, [r3, #4]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	697a      	ldr	r2, [r7, #20]
 800a09e:	621a      	str	r2, [r3, #32]
}
 800a0a0:	bf00      	nop
 800a0a2:	371c      	adds	r7, #28
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr
 800a0ac:	40010000 	.word	0x40010000
 800a0b0:	40010400 	.word	0x40010400

0800a0b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b087      	sub	sp, #28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a1b      	ldr	r3, [r3, #32]
 800a0c8:	f023 0210 	bic.w	r2, r3, #16
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	021b      	lsls	r3, r3, #8
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	f023 0320 	bic.w	r3, r3, #32
 800a0fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	011b      	lsls	r3, r3, #4
 800a106:	697a      	ldr	r2, [r7, #20]
 800a108:	4313      	orrs	r3, r2
 800a10a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a22      	ldr	r2, [pc, #136]	@ (800a198 <TIM_OC2_SetConfig+0xe4>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d003      	beq.n	800a11c <TIM_OC2_SetConfig+0x68>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a21      	ldr	r2, [pc, #132]	@ (800a19c <TIM_OC2_SetConfig+0xe8>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d10d      	bne.n	800a138 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	011b      	lsls	r3, r3, #4
 800a12a:	697a      	ldr	r2, [r7, #20]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a136:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a17      	ldr	r2, [pc, #92]	@ (800a198 <TIM_OC2_SetConfig+0xe4>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d003      	beq.n	800a148 <TIM_OC2_SetConfig+0x94>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a16      	ldr	r2, [pc, #88]	@ (800a19c <TIM_OC2_SetConfig+0xe8>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d113      	bne.n	800a170 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a14e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	695b      	ldr	r3, [r3, #20]
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	4313      	orrs	r3, r2
 800a162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	699b      	ldr	r3, [r3, #24]
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	685a      	ldr	r2, [r3, #4]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	621a      	str	r2, [r3, #32]
}
 800a18a:	bf00      	nop
 800a18c:	371c      	adds	r7, #28
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	40010000 	.word	0x40010000
 800a19c:	40010400 	.word	0x40010400

0800a1a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b087      	sub	sp, #28
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a1b      	ldr	r3, [r3, #32]
 800a1ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a1b      	ldr	r3, [r3, #32]
 800a1b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	69db      	ldr	r3, [r3, #28]
 800a1c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f023 0303 	bic.w	r3, r3, #3
 800a1d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a1e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	021b      	lsls	r3, r3, #8
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a21      	ldr	r2, [pc, #132]	@ (800a280 <TIM_OC3_SetConfig+0xe0>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d003      	beq.n	800a206 <TIM_OC3_SetConfig+0x66>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a20      	ldr	r2, [pc, #128]	@ (800a284 <TIM_OC3_SetConfig+0xe4>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d10d      	bne.n	800a222 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a20c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	021b      	lsls	r3, r3, #8
 800a214:	697a      	ldr	r2, [r7, #20]
 800a216:	4313      	orrs	r3, r2
 800a218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a16      	ldr	r2, [pc, #88]	@ (800a280 <TIM_OC3_SetConfig+0xe0>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d003      	beq.n	800a232 <TIM_OC3_SetConfig+0x92>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a15      	ldr	r2, [pc, #84]	@ (800a284 <TIM_OC3_SetConfig+0xe4>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d113      	bne.n	800a25a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	011b      	lsls	r3, r3, #4
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	011b      	lsls	r3, r3, #4
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	4313      	orrs	r3, r2
 800a258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	685a      	ldr	r2, [r3, #4]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	621a      	str	r2, [r3, #32]
}
 800a274:	bf00      	nop
 800a276:	371c      	adds	r7, #28
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	40010000 	.word	0x40010000
 800a284:	40010400 	.word	0x40010400

0800a288 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a288:	b480      	push	{r7}
 800a28a:	b087      	sub	sp, #28
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a1b      	ldr	r3, [r3, #32]
 800a29c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	69db      	ldr	r3, [r3, #28]
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	021b      	lsls	r3, r3, #8
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	031b      	lsls	r3, r3, #12
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a12      	ldr	r2, [pc, #72]	@ (800a32c <TIM_OC4_SetConfig+0xa4>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d003      	beq.n	800a2f0 <TIM_OC4_SetConfig+0x68>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a11      	ldr	r2, [pc, #68]	@ (800a330 <TIM_OC4_SetConfig+0xa8>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d109      	bne.n	800a304 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	019b      	lsls	r3, r3, #6
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	4313      	orrs	r3, r2
 800a302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	621a      	str	r2, [r3, #32]
}
 800a31e:	bf00      	nop
 800a320:	371c      	adds	r7, #28
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	40010000 	.word	0x40010000
 800a330:	40010400 	.word	0x40010400

0800a334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a334:	b480      	push	{r7}
 800a336:	b087      	sub	sp, #28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6a1b      	ldr	r3, [r3, #32]
 800a344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6a1b      	ldr	r3, [r3, #32]
 800a34a:	f023 0201 	bic.w	r2, r3, #1
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a35e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	011b      	lsls	r3, r3, #4
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	4313      	orrs	r3, r2
 800a368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	f023 030a 	bic.w	r3, r3, #10
 800a370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a372:	697a      	ldr	r2, [r7, #20]
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	4313      	orrs	r3, r2
 800a378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	621a      	str	r2, [r3, #32]
}
 800a386:	bf00      	nop
 800a388:	371c      	adds	r7, #28
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a392:	b480      	push	{r7}
 800a394:	b087      	sub	sp, #28
 800a396:	af00      	add	r7, sp, #0
 800a398:	60f8      	str	r0, [r7, #12]
 800a39a:	60b9      	str	r1, [r7, #8]
 800a39c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
 800a3a8:	f023 0210 	bic.w	r2, r3, #16
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	699b      	ldr	r3, [r3, #24]
 800a3b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a3bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	031b      	lsls	r3, r3, #12
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a3ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	011b      	lsls	r3, r3, #4
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	621a      	str	r2, [r3, #32]
}
 800a3e6:	bf00      	nop
 800a3e8:	371c      	adds	r7, #28
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b085      	sub	sp, #20
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	4313      	orrs	r3, r2
 800a410:	f043 0307 	orr.w	r3, r3, #7
 800a414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	609a      	str	r2, [r3, #8]
}
 800a41c:	bf00      	nop
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a428:	b480      	push	{r7}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
 800a434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	021a      	lsls	r2, r3, #8
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	431a      	orrs	r2, r3
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	4313      	orrs	r3, r2
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	4313      	orrs	r3, r2
 800a454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	609a      	str	r2, [r3, #8]
}
 800a45c:	bf00      	nop
 800a45e:	371c      	adds	r7, #28
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a468:	b480      	push	{r7}
 800a46a:	b087      	sub	sp, #28
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	f003 031f 	and.w	r3, r3, #31
 800a47a:	2201      	movs	r2, #1
 800a47c:	fa02 f303 	lsl.w	r3, r2, r3
 800a480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6a1a      	ldr	r2, [r3, #32]
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	43db      	mvns	r3, r3
 800a48a:	401a      	ands	r2, r3
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6a1a      	ldr	r2, [r3, #32]
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f003 031f 	and.w	r3, r3, #31
 800a49a:	6879      	ldr	r1, [r7, #4]
 800a49c:	fa01 f303 	lsl.w	r3, r1, r3
 800a4a0:	431a      	orrs	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	621a      	str	r2, [r3, #32]
}
 800a4a6:	bf00      	nop
 800a4a8:	371c      	adds	r7, #28
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
	...

0800a4b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d101      	bne.n	800a4cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	e05a      	b.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a21      	ldr	r2, [pc, #132]	@ (800a590 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d022      	beq.n	800a556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a518:	d01d      	beq.n	800a556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a1d      	ldr	r2, [pc, #116]	@ (800a594 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d018      	beq.n	800a556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a1b      	ldr	r2, [pc, #108]	@ (800a598 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d013      	beq.n	800a556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a1a      	ldr	r2, [pc, #104]	@ (800a59c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d00e      	beq.n	800a556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a18      	ldr	r2, [pc, #96]	@ (800a5a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d009      	beq.n	800a556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a17      	ldr	r2, [pc, #92]	@ (800a5a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d004      	beq.n	800a556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a15      	ldr	r2, [pc, #84]	@ (800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d10c      	bne.n	800a570 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a55c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	4313      	orrs	r3, r2
 800a566:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	40010000 	.word	0x40010000
 800a594:	40000400 	.word	0x40000400
 800a598:	40000800 	.word	0x40000800
 800a59c:	40000c00 	.word	0x40000c00
 800a5a0:	40010400 	.word	0x40010400
 800a5a4:	40014000 	.word	0x40014000
 800a5a8:	40001800 	.word	0x40001800

0800a5ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d101      	bne.n	800a5c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	e03d      	b.n	800a644 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4313      	orrs	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	4313      	orrs	r3, r2
 800a614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	695b      	ldr	r3, [r3, #20]
 800a620:	4313      	orrs	r3, r2
 800a622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	4313      	orrs	r3, r2
 800a630:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d101      	bne.n	800a68a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e042      	b.n	800a710 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b00      	cmp	r3, #0
 800a694:	d106      	bne.n	800a6a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f7fc ffb4 	bl	800760c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2224      	movs	r2, #36	@ 0x24
 800a6a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68da      	ldr	r2, [r3, #12]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a6ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fcdb 	bl	800b078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	691a      	ldr	r2, [r3, #16]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a6d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	695a      	ldr	r2, [r3, #20]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a6e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68da      	ldr	r2, [r3, #12]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a6f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2220      	movs	r2, #32
 800a6fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2220      	movs	r2, #32
 800a704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	4613      	mov	r3, r2
 800a724:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b20      	cmp	r3, #32
 800a730:	d112      	bne.n	800a758 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d002      	beq.n	800a73e <HAL_UART_Receive_IT+0x26>
 800a738:	88fb      	ldrh	r3, [r7, #6]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d101      	bne.n	800a742 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e00b      	b.n	800a75a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a748:	88fb      	ldrh	r3, [r7, #6]
 800a74a:	461a      	mov	r2, r3
 800a74c:	68b9      	ldr	r1, [r7, #8]
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f000 faba 	bl	800acc8 <UART_Start_Receive_IT>
 800a754:	4603      	mov	r3, r0
 800a756:	e000      	b.n	800a75a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a758:	2302      	movs	r3, #2
  }
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
	...

0800a764 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b0ba      	sub	sp, #232	@ 0xe8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	695b      	ldr	r3, [r3, #20]
 800a786:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a78a:	2300      	movs	r3, #0
 800a78c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a790:	2300      	movs	r3, #0
 800a792:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a79a:	f003 030f 	and.w	r3, r3, #15
 800a79e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a7a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10f      	bne.n	800a7ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7ae:	f003 0320 	and.w	r3, r3, #32
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d009      	beq.n	800a7ca <HAL_UART_IRQHandler+0x66>
 800a7b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7ba:	f003 0320 	and.w	r3, r3, #32
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d003      	beq.n	800a7ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fb99 	bl	800aefa <UART_Receive_IT>
      return;
 800a7c8:	e25b      	b.n	800ac82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a7ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f000 80de 	beq.w	800a990 <HAL_UART_IRQHandler+0x22c>
 800a7d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7d8:	f003 0301 	and.w	r3, r3, #1
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d106      	bne.n	800a7ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a7e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 80d1 	beq.w	800a990 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a7ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00b      	beq.n	800a812 <HAL_UART_IRQHandler+0xae>
 800a7fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a802:	2b00      	cmp	r3, #0
 800a804:	d005      	beq.n	800a812 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a80a:	f043 0201 	orr.w	r2, r3, #1
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a816:	f003 0304 	and.w	r3, r3, #4
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00b      	beq.n	800a836 <HAL_UART_IRQHandler+0xd2>
 800a81e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	2b00      	cmp	r3, #0
 800a828:	d005      	beq.n	800a836 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a82e:	f043 0202 	orr.w	r2, r3, #2
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a83a:	f003 0302 	and.w	r3, r3, #2
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00b      	beq.n	800a85a <HAL_UART_IRQHandler+0xf6>
 800a842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a846:	f003 0301 	and.w	r3, r3, #1
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d005      	beq.n	800a85a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a852:	f043 0204 	orr.w	r2, r3, #4
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a85a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a85e:	f003 0308 	and.w	r3, r3, #8
 800a862:	2b00      	cmp	r3, #0
 800a864:	d011      	beq.n	800a88a <HAL_UART_IRQHandler+0x126>
 800a866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a86a:	f003 0320 	and.w	r3, r3, #32
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d105      	bne.n	800a87e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d005      	beq.n	800a88a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a882:	f043 0208 	orr.w	r2, r3, #8
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f000 81f2 	beq.w	800ac78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a898:	f003 0320 	and.w	r3, r3, #32
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d008      	beq.n	800a8b2 <HAL_UART_IRQHandler+0x14e>
 800a8a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8a4:	f003 0320 	and.w	r3, r3, #32
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fb24 	bl	800aefa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8bc:	2b40      	cmp	r3, #64	@ 0x40
 800a8be:	bf0c      	ite	eq
 800a8c0:	2301      	moveq	r3, #1
 800a8c2:	2300      	movne	r3, #0
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8ce:	f003 0308 	and.w	r3, r3, #8
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d103      	bne.n	800a8de <HAL_UART_IRQHandler+0x17a>
 800a8d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d04f      	beq.n	800a97e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fa2c 	bl	800ad3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8ee:	2b40      	cmp	r3, #64	@ 0x40
 800a8f0:	d141      	bne.n	800a976 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	3314      	adds	r3, #20
 800a8f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a900:	e853 3f00 	ldrex	r3, [r3]
 800a904:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a908:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a90c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a910:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3314      	adds	r3, #20
 800a91a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a91e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a922:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a926:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a92a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a92e:	e841 2300 	strex	r3, r2, [r1]
 800a932:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1d9      	bne.n	800a8f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a942:	2b00      	cmp	r3, #0
 800a944:	d013      	beq.n	800a96e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a94a:	4a7e      	ldr	r2, [pc, #504]	@ (800ab44 <HAL_UART_IRQHandler+0x3e0>)
 800a94c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a952:	4618      	mov	r0, r3
 800a954:	f7fd fae9 	bl	8007f2a <HAL_DMA_Abort_IT>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d016      	beq.n	800a98c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a968:	4610      	mov	r0, r2
 800a96a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a96c:	e00e      	b.n	800a98c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f994 	bl	800ac9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a974:	e00a      	b.n	800a98c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f990 	bl	800ac9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a97c:	e006      	b.n	800a98c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 f98c 	bl	800ac9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a98a:	e175      	b.n	800ac78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a98c:	bf00      	nop
    return;
 800a98e:	e173      	b.n	800ac78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a994:	2b01      	cmp	r3, #1
 800a996:	f040 814f 	bne.w	800ac38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a99a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a99e:	f003 0310 	and.w	r3, r3, #16
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	f000 8148 	beq.w	800ac38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9ac:	f003 0310 	and.w	r3, r3, #16
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 8141 	beq.w	800ac38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60bb      	str	r3, [r7, #8]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	60bb      	str	r3, [r7, #8]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	60bb      	str	r3, [r7, #8]
 800a9ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	695b      	ldr	r3, [r3, #20]
 800a9d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9d6:	2b40      	cmp	r3, #64	@ 0x40
 800a9d8:	f040 80b6 	bne.w	800ab48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a9e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f000 8145 	beq.w	800ac7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a9f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	f080 813e 	bcs.w	800ac7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa12:	f000 8088 	beq.w	800ab26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	330c      	adds	r3, #12
 800aa1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aa24:	e853 3f00 	ldrex	r3, [r3]
 800aa28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aa2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	330c      	adds	r3, #12
 800aa3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800aa42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800aa46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aa4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aa52:	e841 2300 	strex	r3, r2, [r1]
 800aa56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800aa5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1d9      	bne.n	800aa16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3314      	adds	r3, #20
 800aa68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa6c:	e853 3f00 	ldrex	r3, [r3]
 800aa70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800aa72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aa74:	f023 0301 	bic.w	r3, r3, #1
 800aa78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	3314      	adds	r3, #20
 800aa82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aa86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aa8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aa8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800aa92:	e841 2300 	strex	r3, r2, [r1]
 800aa96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800aa98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1e1      	bne.n	800aa62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3314      	adds	r3, #20
 800aaa4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aaae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aab0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aab4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	3314      	adds	r3, #20
 800aabe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aac2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aac4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aac8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aaca:	e841 2300 	strex	r3, r2, [r1]
 800aace:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aad0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1e3      	bne.n	800aa9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2220      	movs	r2, #32
 800aada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	330c      	adds	r3, #12
 800aaea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aaee:	e853 3f00 	ldrex	r3, [r3]
 800aaf2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aaf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aaf6:	f023 0310 	bic.w	r3, r3, #16
 800aafa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	330c      	adds	r3, #12
 800ab04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ab08:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ab0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ab0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab10:	e841 2300 	strex	r3, r2, [r1]
 800ab14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ab16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1e3      	bne.n	800aae4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7fd f992 	bl	8007e4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2202      	movs	r2, #2
 800ab2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f8b7 	bl	800acb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab42:	e09b      	b.n	800ac7c <HAL_UART_IRQHandler+0x518>
 800ab44:	0800ae03 	.word	0x0800ae03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	1ad3      	subs	r3, r2, r3
 800ab54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f000 808e 	beq.w	800ac80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ab64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f000 8089 	beq.w	800ac80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	330c      	adds	r3, #12
 800ab74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab78:	e853 3f00 	ldrex	r3, [r3]
 800ab7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	330c      	adds	r3, #12
 800ab8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800ab92:	647a      	str	r2, [r7, #68]	@ 0x44
 800ab94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab9a:	e841 2300 	strex	r3, r2, [r1]
 800ab9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e3      	bne.n	800ab6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3314      	adds	r3, #20
 800abac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb0:	e853 3f00 	ldrex	r3, [r3]
 800abb4:	623b      	str	r3, [r7, #32]
   return(result);
 800abb6:	6a3b      	ldr	r3, [r7, #32]
 800abb8:	f023 0301 	bic.w	r3, r3, #1
 800abbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	3314      	adds	r3, #20
 800abc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800abca:	633a      	str	r2, [r7, #48]	@ 0x30
 800abcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abd2:	e841 2300 	strex	r3, r2, [r1]
 800abd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1e3      	bne.n	800aba6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2220      	movs	r2, #32
 800abe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	330c      	adds	r3, #12
 800abf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	e853 3f00 	ldrex	r3, [r3]
 800abfa:	60fb      	str	r3, [r7, #12]
   return(result);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f023 0310 	bic.w	r3, r3, #16
 800ac02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	330c      	adds	r3, #12
 800ac0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ac10:	61fa      	str	r2, [r7, #28]
 800ac12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac14:	69b9      	ldr	r1, [r7, #24]
 800ac16:	69fa      	ldr	r2, [r7, #28]
 800ac18:	e841 2300 	strex	r3, r2, [r1]
 800ac1c:	617b      	str	r3, [r7, #20]
   return(result);
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1e3      	bne.n	800abec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2202      	movs	r2, #2
 800ac28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 f83d 	bl	800acb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ac36:	e023      	b.n	800ac80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d009      	beq.n	800ac58 <HAL_UART_IRQHandler+0x4f4>
 800ac44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d003      	beq.n	800ac58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f8ea 	bl	800ae2a <UART_Transmit_IT>
    return;
 800ac56:	e014      	b.n	800ac82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00e      	beq.n	800ac82 <HAL_UART_IRQHandler+0x51e>
 800ac64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d008      	beq.n	800ac82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 f92a 	bl	800aeca <UART_EndTransmit_IT>
    return;
 800ac76:	e004      	b.n	800ac82 <HAL_UART_IRQHandler+0x51e>
    return;
 800ac78:	bf00      	nop
 800ac7a:	e002      	b.n	800ac82 <HAL_UART_IRQHandler+0x51e>
      return;
 800ac7c:	bf00      	nop
 800ac7e:	e000      	b.n	800ac82 <HAL_UART_IRQHandler+0x51e>
      return;
 800ac80:	bf00      	nop
  }
}
 800ac82:	37e8      	adds	r7, #232	@ 0xe8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	460b      	mov	r3, r1
 800acba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800acbc:	bf00      	nop
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	4613      	mov	r3, r2
 800acd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	68ba      	ldr	r2, [r7, #8]
 800acda:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	88fa      	ldrh	r2, [r7, #6]
 800ace0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	88fa      	ldrh	r2, [r7, #6]
 800ace6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2200      	movs	r2, #0
 800acec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2222      	movs	r2, #34	@ 0x22
 800acf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	691b      	ldr	r3, [r3, #16]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d007      	beq.n	800ad0e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68da      	ldr	r2, [r3, #12]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad0c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	695a      	ldr	r2, [r3, #20]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f042 0201 	orr.w	r2, r2, #1
 800ad1c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	68da      	ldr	r2, [r3, #12]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f042 0220 	orr.w	r2, r2, #32
 800ad2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3714      	adds	r7, #20
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b095      	sub	sp, #84	@ 0x54
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	330c      	adds	r3, #12
 800ad4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad4e:	e853 3f00 	ldrex	r3, [r3]
 800ad52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	330c      	adds	r3, #12
 800ad62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ad64:	643a      	str	r2, [r7, #64]	@ 0x40
 800ad66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad6c:	e841 2300 	strex	r3, r2, [r1]
 800ad70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d1e5      	bne.n	800ad44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	3314      	adds	r3, #20
 800ad7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad80:	6a3b      	ldr	r3, [r7, #32]
 800ad82:	e853 3f00 	ldrex	r3, [r3]
 800ad86:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	f023 0301 	bic.w	r3, r3, #1
 800ad8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3314      	adds	r3, #20
 800ad96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ada0:	e841 2300 	strex	r3, r2, [r1]
 800ada4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ada6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1e5      	bne.n	800ad78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d119      	bne.n	800ade8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	330c      	adds	r3, #12
 800adba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	e853 3f00 	ldrex	r3, [r3]
 800adc2:	60bb      	str	r3, [r7, #8]
   return(result);
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	f023 0310 	bic.w	r3, r3, #16
 800adca:	647b      	str	r3, [r7, #68]	@ 0x44
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	330c      	adds	r3, #12
 800add2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800add4:	61ba      	str	r2, [r7, #24]
 800add6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add8:	6979      	ldr	r1, [r7, #20]
 800adda:	69ba      	ldr	r2, [r7, #24]
 800addc:	e841 2300 	strex	r3, r2, [r1]
 800ade0:	613b      	str	r3, [r7, #16]
   return(result);
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1e5      	bne.n	800adb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2220      	movs	r2, #32
 800adec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800adf6:	bf00      	nop
 800adf8:	3754      	adds	r7, #84	@ 0x54
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr

0800ae02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b084      	sub	sp, #16
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f7ff ff3d 	bl	800ac9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae22:	bf00      	nop
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b085      	sub	sp, #20
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b21      	cmp	r3, #33	@ 0x21
 800ae3c:	d13e      	bne.n	800aebc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae46:	d114      	bne.n	800ae72 <UART_Transmit_IT+0x48>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	691b      	ldr	r3, [r3, #16]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d110      	bne.n	800ae72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	1c9a      	adds	r2, r3, #2
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	621a      	str	r2, [r3, #32]
 800ae70:	e008      	b.n	800ae84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	1c59      	adds	r1, r3, #1
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	6211      	str	r1, [r2, #32]
 800ae7c:	781a      	ldrb	r2, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	4619      	mov	r1, r3
 800ae92:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10f      	bne.n	800aeb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68da      	ldr	r2, [r3, #12]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aea6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	68da      	ldr	r2, [r3, #12]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aeb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	e000      	b.n	800aebe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aebc:	2302      	movs	r3, #2
  }
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3714      	adds	r7, #20
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b082      	sub	sp, #8
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68da      	ldr	r2, [r3, #12]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aee0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2220      	movs	r2, #32
 800aee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7ff fecc 	bl	800ac88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3708      	adds	r7, #8
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b08c      	sub	sp, #48	@ 0x30
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	2b22      	cmp	r3, #34	@ 0x22
 800af0c:	f040 80ae 	bne.w	800b06c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af18:	d117      	bne.n	800af4a <UART_Receive_IT+0x50>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d113      	bne.n	800af4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800af22:	2300      	movs	r3, #0
 800af24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	b29b      	uxth	r3, r3
 800af34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af38:	b29a      	uxth	r2, r3
 800af3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af42:	1c9a      	adds	r2, r3, #2
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	629a      	str	r2, [r3, #40]	@ 0x28
 800af48:	e026      	b.n	800af98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800af50:	2300      	movs	r3, #0
 800af52:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af5c:	d007      	beq.n	800af6e <UART_Receive_IT+0x74>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d10a      	bne.n	800af7c <UART_Receive_IT+0x82>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d106      	bne.n	800af7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	b2da      	uxtb	r2, r3
 800af76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af78:	701a      	strb	r2, [r3, #0]
 800af7a:	e008      	b.n	800af8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	b2db      	uxtb	r3, r3
 800af84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af88:	b2da      	uxtb	r2, r3
 800af8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af92:	1c5a      	adds	r2, r3, #1
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	3b01      	subs	r3, #1
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	4619      	mov	r1, r3
 800afa6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d15d      	bne.n	800b068 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	68da      	ldr	r2, [r3, #12]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f022 0220 	bic.w	r2, r2, #32
 800afba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68da      	ldr	r2, [r3, #12]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800afca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	695a      	ldr	r2, [r3, #20]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f022 0201 	bic.w	r2, r2, #1
 800afda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2220      	movs	r2, #32
 800afe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d135      	bne.n	800b05e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	330c      	adds	r3, #12
 800affe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	e853 3f00 	ldrex	r3, [r3]
 800b006:	613b      	str	r3, [r7, #16]
   return(result);
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	f023 0310 	bic.w	r3, r3, #16
 800b00e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	330c      	adds	r3, #12
 800b016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b018:	623a      	str	r2, [r7, #32]
 800b01a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01c:	69f9      	ldr	r1, [r7, #28]
 800b01e:	6a3a      	ldr	r2, [r7, #32]
 800b020:	e841 2300 	strex	r3, r2, [r1]
 800b024:	61bb      	str	r3, [r7, #24]
   return(result);
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1e5      	bne.n	800aff8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f003 0310 	and.w	r3, r3, #16
 800b036:	2b10      	cmp	r3, #16
 800b038:	d10a      	bne.n	800b050 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b03a:	2300      	movs	r3, #0
 800b03c:	60fb      	str	r3, [r7, #12]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	60fb      	str	r3, [r7, #12]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	60fb      	str	r3, [r7, #12]
 800b04e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b054:	4619      	mov	r1, r3
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7ff fe2a 	bl	800acb0 <HAL_UARTEx_RxEventCallback>
 800b05c:	e002      	b.n	800b064 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7f8 fcd4 	bl	8003a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	e002      	b.n	800b06e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b068:	2300      	movs	r3, #0
 800b06a:	e000      	b.n	800b06e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b06c:	2302      	movs	r3, #2
  }
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3730      	adds	r7, #48	@ 0x30
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
	...

0800b078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b07c:	b0c0      	sub	sp, #256	@ 0x100
 800b07e:	af00      	add	r7, sp, #0
 800b080:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	691b      	ldr	r3, [r3, #16]
 800b08c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b094:	68d9      	ldr	r1, [r3, #12]
 800b096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	ea40 0301 	orr.w	r3, r0, r1
 800b0a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b0a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0a6:	689a      	ldr	r2, [r3, #8]
 800b0a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0b4:	695b      	ldr	r3, [r3, #20]
 800b0b6:	431a      	orrs	r2, r3
 800b0b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0bc:	69db      	ldr	r3, [r3, #28]
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b0c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b0d0:	f021 010c 	bic.w	r1, r1, #12
 800b0d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b0de:	430b      	orrs	r3, r1
 800b0e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b0e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	695b      	ldr	r3, [r3, #20]
 800b0ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b0ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0f2:	6999      	ldr	r1, [r3, #24]
 800b0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	ea40 0301 	orr.w	r3, r0, r1
 800b0fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	4b8f      	ldr	r3, [pc, #572]	@ (800b344 <UART_SetConfig+0x2cc>)
 800b108:	429a      	cmp	r2, r3
 800b10a:	d005      	beq.n	800b118 <UART_SetConfig+0xa0>
 800b10c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	4b8d      	ldr	r3, [pc, #564]	@ (800b348 <UART_SetConfig+0x2d0>)
 800b114:	429a      	cmp	r2, r3
 800b116:	d104      	bne.n	800b122 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b118:	f7fe fa32 	bl	8009580 <HAL_RCC_GetPCLK2Freq>
 800b11c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b120:	e003      	b.n	800b12a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b122:	f7fe fa19 	bl	8009558 <HAL_RCC_GetPCLK1Freq>
 800b126:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b12a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b12e:	69db      	ldr	r3, [r3, #28]
 800b130:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b134:	f040 810c 	bne.w	800b350 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b13c:	2200      	movs	r2, #0
 800b13e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b142:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b146:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b14a:	4622      	mov	r2, r4
 800b14c:	462b      	mov	r3, r5
 800b14e:	1891      	adds	r1, r2, r2
 800b150:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b152:	415b      	adcs	r3, r3
 800b154:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b156:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b15a:	4621      	mov	r1, r4
 800b15c:	eb12 0801 	adds.w	r8, r2, r1
 800b160:	4629      	mov	r1, r5
 800b162:	eb43 0901 	adc.w	r9, r3, r1
 800b166:	f04f 0200 	mov.w	r2, #0
 800b16a:	f04f 0300 	mov.w	r3, #0
 800b16e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b17a:	4690      	mov	r8, r2
 800b17c:	4699      	mov	r9, r3
 800b17e:	4623      	mov	r3, r4
 800b180:	eb18 0303 	adds.w	r3, r8, r3
 800b184:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b188:	462b      	mov	r3, r5
 800b18a:	eb49 0303 	adc.w	r3, r9, r3
 800b18e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b19e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b1a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	18db      	adds	r3, r3, r3
 800b1aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	eb42 0303 	adc.w	r3, r2, r3
 800b1b2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b1b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b1b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b1bc:	f7f5 fd64 	bl	8000c88 <__aeabi_uldivmod>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4b61      	ldr	r3, [pc, #388]	@ (800b34c <UART_SetConfig+0x2d4>)
 800b1c6:	fba3 2302 	umull	r2, r3, r3, r2
 800b1ca:	095b      	lsrs	r3, r3, #5
 800b1cc:	011c      	lsls	r4, r3, #4
 800b1ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b1d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b1dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b1e0:	4642      	mov	r2, r8
 800b1e2:	464b      	mov	r3, r9
 800b1e4:	1891      	adds	r1, r2, r2
 800b1e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b1e8:	415b      	adcs	r3, r3
 800b1ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b1f0:	4641      	mov	r1, r8
 800b1f2:	eb12 0a01 	adds.w	sl, r2, r1
 800b1f6:	4649      	mov	r1, r9
 800b1f8:	eb43 0b01 	adc.w	fp, r3, r1
 800b1fc:	f04f 0200 	mov.w	r2, #0
 800b200:	f04f 0300 	mov.w	r3, #0
 800b204:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b208:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b20c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b210:	4692      	mov	sl, r2
 800b212:	469b      	mov	fp, r3
 800b214:	4643      	mov	r3, r8
 800b216:	eb1a 0303 	adds.w	r3, sl, r3
 800b21a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b21e:	464b      	mov	r3, r9
 800b220:	eb4b 0303 	adc.w	r3, fp, r3
 800b224:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b234:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b238:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b23c:	460b      	mov	r3, r1
 800b23e:	18db      	adds	r3, r3, r3
 800b240:	643b      	str	r3, [r7, #64]	@ 0x40
 800b242:	4613      	mov	r3, r2
 800b244:	eb42 0303 	adc.w	r3, r2, r3
 800b248:	647b      	str	r3, [r7, #68]	@ 0x44
 800b24a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b24e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b252:	f7f5 fd19 	bl	8000c88 <__aeabi_uldivmod>
 800b256:	4602      	mov	r2, r0
 800b258:	460b      	mov	r3, r1
 800b25a:	4611      	mov	r1, r2
 800b25c:	4b3b      	ldr	r3, [pc, #236]	@ (800b34c <UART_SetConfig+0x2d4>)
 800b25e:	fba3 2301 	umull	r2, r3, r3, r1
 800b262:	095b      	lsrs	r3, r3, #5
 800b264:	2264      	movs	r2, #100	@ 0x64
 800b266:	fb02 f303 	mul.w	r3, r2, r3
 800b26a:	1acb      	subs	r3, r1, r3
 800b26c:	00db      	lsls	r3, r3, #3
 800b26e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b272:	4b36      	ldr	r3, [pc, #216]	@ (800b34c <UART_SetConfig+0x2d4>)
 800b274:	fba3 2302 	umull	r2, r3, r3, r2
 800b278:	095b      	lsrs	r3, r3, #5
 800b27a:	005b      	lsls	r3, r3, #1
 800b27c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b280:	441c      	add	r4, r3
 800b282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b286:	2200      	movs	r2, #0
 800b288:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b28c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b290:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b294:	4642      	mov	r2, r8
 800b296:	464b      	mov	r3, r9
 800b298:	1891      	adds	r1, r2, r2
 800b29a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b29c:	415b      	adcs	r3, r3
 800b29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b2a4:	4641      	mov	r1, r8
 800b2a6:	1851      	adds	r1, r2, r1
 800b2a8:	6339      	str	r1, [r7, #48]	@ 0x30
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	414b      	adcs	r3, r1
 800b2ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2b0:	f04f 0200 	mov.w	r2, #0
 800b2b4:	f04f 0300 	mov.w	r3, #0
 800b2b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b2bc:	4659      	mov	r1, fp
 800b2be:	00cb      	lsls	r3, r1, #3
 800b2c0:	4651      	mov	r1, sl
 800b2c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2c6:	4651      	mov	r1, sl
 800b2c8:	00ca      	lsls	r2, r1, #3
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	4642      	mov	r2, r8
 800b2d2:	189b      	adds	r3, r3, r2
 800b2d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b2d8:	464b      	mov	r3, r9
 800b2da:	460a      	mov	r2, r1
 800b2dc:	eb42 0303 	adc.w	r3, r2, r3
 800b2e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b2e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b2f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b2f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	18db      	adds	r3, r3, r3
 800b2fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2fe:	4613      	mov	r3, r2
 800b300:	eb42 0303 	adc.w	r3, r2, r3
 800b304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b306:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b30a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b30e:	f7f5 fcbb 	bl	8000c88 <__aeabi_uldivmod>
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	4b0d      	ldr	r3, [pc, #52]	@ (800b34c <UART_SetConfig+0x2d4>)
 800b318:	fba3 1302 	umull	r1, r3, r3, r2
 800b31c:	095b      	lsrs	r3, r3, #5
 800b31e:	2164      	movs	r1, #100	@ 0x64
 800b320:	fb01 f303 	mul.w	r3, r1, r3
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	00db      	lsls	r3, r3, #3
 800b328:	3332      	adds	r3, #50	@ 0x32
 800b32a:	4a08      	ldr	r2, [pc, #32]	@ (800b34c <UART_SetConfig+0x2d4>)
 800b32c:	fba2 2303 	umull	r2, r3, r2, r3
 800b330:	095b      	lsrs	r3, r3, #5
 800b332:	f003 0207 	and.w	r2, r3, #7
 800b336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4422      	add	r2, r4
 800b33e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b340:	e106      	b.n	800b550 <UART_SetConfig+0x4d8>
 800b342:	bf00      	nop
 800b344:	40011000 	.word	0x40011000
 800b348:	40011400 	.word	0x40011400
 800b34c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b354:	2200      	movs	r2, #0
 800b356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b35a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b35e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b362:	4642      	mov	r2, r8
 800b364:	464b      	mov	r3, r9
 800b366:	1891      	adds	r1, r2, r2
 800b368:	6239      	str	r1, [r7, #32]
 800b36a:	415b      	adcs	r3, r3
 800b36c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b36e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b372:	4641      	mov	r1, r8
 800b374:	1854      	adds	r4, r2, r1
 800b376:	4649      	mov	r1, r9
 800b378:	eb43 0501 	adc.w	r5, r3, r1
 800b37c:	f04f 0200 	mov.w	r2, #0
 800b380:	f04f 0300 	mov.w	r3, #0
 800b384:	00eb      	lsls	r3, r5, #3
 800b386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b38a:	00e2      	lsls	r2, r4, #3
 800b38c:	4614      	mov	r4, r2
 800b38e:	461d      	mov	r5, r3
 800b390:	4643      	mov	r3, r8
 800b392:	18e3      	adds	r3, r4, r3
 800b394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b398:	464b      	mov	r3, r9
 800b39a:	eb45 0303 	adc.w	r3, r5, r3
 800b39e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b3a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b3ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b3b2:	f04f 0200 	mov.w	r2, #0
 800b3b6:	f04f 0300 	mov.w	r3, #0
 800b3ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b3be:	4629      	mov	r1, r5
 800b3c0:	008b      	lsls	r3, r1, #2
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3c8:	4621      	mov	r1, r4
 800b3ca:	008a      	lsls	r2, r1, #2
 800b3cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b3d0:	f7f5 fc5a 	bl	8000c88 <__aeabi_uldivmod>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	4b60      	ldr	r3, [pc, #384]	@ (800b55c <UART_SetConfig+0x4e4>)
 800b3da:	fba3 2302 	umull	r2, r3, r3, r2
 800b3de:	095b      	lsrs	r3, r3, #5
 800b3e0:	011c      	lsls	r4, r3, #4
 800b3e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b3ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b3f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b3f4:	4642      	mov	r2, r8
 800b3f6:	464b      	mov	r3, r9
 800b3f8:	1891      	adds	r1, r2, r2
 800b3fa:	61b9      	str	r1, [r7, #24]
 800b3fc:	415b      	adcs	r3, r3
 800b3fe:	61fb      	str	r3, [r7, #28]
 800b400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b404:	4641      	mov	r1, r8
 800b406:	1851      	adds	r1, r2, r1
 800b408:	6139      	str	r1, [r7, #16]
 800b40a:	4649      	mov	r1, r9
 800b40c:	414b      	adcs	r3, r1
 800b40e:	617b      	str	r3, [r7, #20]
 800b410:	f04f 0200 	mov.w	r2, #0
 800b414:	f04f 0300 	mov.w	r3, #0
 800b418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b41c:	4659      	mov	r1, fp
 800b41e:	00cb      	lsls	r3, r1, #3
 800b420:	4651      	mov	r1, sl
 800b422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b426:	4651      	mov	r1, sl
 800b428:	00ca      	lsls	r2, r1, #3
 800b42a:	4610      	mov	r0, r2
 800b42c:	4619      	mov	r1, r3
 800b42e:	4603      	mov	r3, r0
 800b430:	4642      	mov	r2, r8
 800b432:	189b      	adds	r3, r3, r2
 800b434:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b438:	464b      	mov	r3, r9
 800b43a:	460a      	mov	r2, r1
 800b43c:	eb42 0303 	adc.w	r3, r2, r3
 800b440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b44e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b450:	f04f 0200 	mov.w	r2, #0
 800b454:	f04f 0300 	mov.w	r3, #0
 800b458:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b45c:	4649      	mov	r1, r9
 800b45e:	008b      	lsls	r3, r1, #2
 800b460:	4641      	mov	r1, r8
 800b462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b466:	4641      	mov	r1, r8
 800b468:	008a      	lsls	r2, r1, #2
 800b46a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b46e:	f7f5 fc0b 	bl	8000c88 <__aeabi_uldivmod>
 800b472:	4602      	mov	r2, r0
 800b474:	460b      	mov	r3, r1
 800b476:	4611      	mov	r1, r2
 800b478:	4b38      	ldr	r3, [pc, #224]	@ (800b55c <UART_SetConfig+0x4e4>)
 800b47a:	fba3 2301 	umull	r2, r3, r3, r1
 800b47e:	095b      	lsrs	r3, r3, #5
 800b480:	2264      	movs	r2, #100	@ 0x64
 800b482:	fb02 f303 	mul.w	r3, r2, r3
 800b486:	1acb      	subs	r3, r1, r3
 800b488:	011b      	lsls	r3, r3, #4
 800b48a:	3332      	adds	r3, #50	@ 0x32
 800b48c:	4a33      	ldr	r2, [pc, #204]	@ (800b55c <UART_SetConfig+0x4e4>)
 800b48e:	fba2 2303 	umull	r2, r3, r2, r3
 800b492:	095b      	lsrs	r3, r3, #5
 800b494:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b498:	441c      	add	r4, r3
 800b49a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b49e:	2200      	movs	r2, #0
 800b4a0:	673b      	str	r3, [r7, #112]	@ 0x70
 800b4a2:	677a      	str	r2, [r7, #116]	@ 0x74
 800b4a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b4a8:	4642      	mov	r2, r8
 800b4aa:	464b      	mov	r3, r9
 800b4ac:	1891      	adds	r1, r2, r2
 800b4ae:	60b9      	str	r1, [r7, #8]
 800b4b0:	415b      	adcs	r3, r3
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b4b8:	4641      	mov	r1, r8
 800b4ba:	1851      	adds	r1, r2, r1
 800b4bc:	6039      	str	r1, [r7, #0]
 800b4be:	4649      	mov	r1, r9
 800b4c0:	414b      	adcs	r3, r1
 800b4c2:	607b      	str	r3, [r7, #4]
 800b4c4:	f04f 0200 	mov.w	r2, #0
 800b4c8:	f04f 0300 	mov.w	r3, #0
 800b4cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b4d0:	4659      	mov	r1, fp
 800b4d2:	00cb      	lsls	r3, r1, #3
 800b4d4:	4651      	mov	r1, sl
 800b4d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4da:	4651      	mov	r1, sl
 800b4dc:	00ca      	lsls	r2, r1, #3
 800b4de:	4610      	mov	r0, r2
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	4642      	mov	r2, r8
 800b4e6:	189b      	adds	r3, r3, r2
 800b4e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b4ea:	464b      	mov	r3, r9
 800b4ec:	460a      	mov	r2, r1
 800b4ee:	eb42 0303 	adc.w	r3, r2, r3
 800b4f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4fe:	667a      	str	r2, [r7, #100]	@ 0x64
 800b500:	f04f 0200 	mov.w	r2, #0
 800b504:	f04f 0300 	mov.w	r3, #0
 800b508:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b50c:	4649      	mov	r1, r9
 800b50e:	008b      	lsls	r3, r1, #2
 800b510:	4641      	mov	r1, r8
 800b512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b516:	4641      	mov	r1, r8
 800b518:	008a      	lsls	r2, r1, #2
 800b51a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b51e:	f7f5 fbb3 	bl	8000c88 <__aeabi_uldivmod>
 800b522:	4602      	mov	r2, r0
 800b524:	460b      	mov	r3, r1
 800b526:	4b0d      	ldr	r3, [pc, #52]	@ (800b55c <UART_SetConfig+0x4e4>)
 800b528:	fba3 1302 	umull	r1, r3, r3, r2
 800b52c:	095b      	lsrs	r3, r3, #5
 800b52e:	2164      	movs	r1, #100	@ 0x64
 800b530:	fb01 f303 	mul.w	r3, r1, r3
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	011b      	lsls	r3, r3, #4
 800b538:	3332      	adds	r3, #50	@ 0x32
 800b53a:	4a08      	ldr	r2, [pc, #32]	@ (800b55c <UART_SetConfig+0x4e4>)
 800b53c:	fba2 2303 	umull	r2, r3, r2, r3
 800b540:	095b      	lsrs	r3, r3, #5
 800b542:	f003 020f 	and.w	r2, r3, #15
 800b546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4422      	add	r2, r4
 800b54e:	609a      	str	r2, [r3, #8]
}
 800b550:	bf00      	nop
 800b552:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b556:	46bd      	mov	sp, r7
 800b558:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b55c:	51eb851f 	.word	0x51eb851f

0800b560 <atof>:
 800b560:	2100      	movs	r1, #0
 800b562:	f000 be0f 	b.w	800c184 <strtod>

0800b566 <atoi>:
 800b566:	220a      	movs	r2, #10
 800b568:	2100      	movs	r1, #0
 800b56a:	f000 be93 	b.w	800c294 <strtol>

0800b56e <sulp>:
 800b56e:	b570      	push	{r4, r5, r6, lr}
 800b570:	4604      	mov	r4, r0
 800b572:	460d      	mov	r5, r1
 800b574:	ec45 4b10 	vmov	d0, r4, r5
 800b578:	4616      	mov	r6, r2
 800b57a:	f003 fd5d 	bl	800f038 <__ulp>
 800b57e:	ec51 0b10 	vmov	r0, r1, d0
 800b582:	b17e      	cbz	r6, 800b5a4 <sulp+0x36>
 800b584:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b588:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	dd09      	ble.n	800b5a4 <sulp+0x36>
 800b590:	051b      	lsls	r3, r3, #20
 800b592:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b596:	2400      	movs	r4, #0
 800b598:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b59c:	4622      	mov	r2, r4
 800b59e:	462b      	mov	r3, r5
 800b5a0:	f7f5 f82a 	bl	80005f8 <__aeabi_dmul>
 800b5a4:	ec41 0b10 	vmov	d0, r0, r1
 800b5a8:	bd70      	pop	{r4, r5, r6, pc}
 800b5aa:	0000      	movs	r0, r0
 800b5ac:	0000      	movs	r0, r0
	...

0800b5b0 <_strtod_l>:
 800b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b4:	b09f      	sub	sp, #124	@ 0x7c
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	921a      	str	r2, [sp, #104]	@ 0x68
 800b5be:	9005      	str	r0, [sp, #20]
 800b5c0:	f04f 0a00 	mov.w	sl, #0
 800b5c4:	f04f 0b00 	mov.w	fp, #0
 800b5c8:	460a      	mov	r2, r1
 800b5ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5cc:	7811      	ldrb	r1, [r2, #0]
 800b5ce:	292b      	cmp	r1, #43	@ 0x2b
 800b5d0:	d04a      	beq.n	800b668 <_strtod_l+0xb8>
 800b5d2:	d838      	bhi.n	800b646 <_strtod_l+0x96>
 800b5d4:	290d      	cmp	r1, #13
 800b5d6:	d832      	bhi.n	800b63e <_strtod_l+0x8e>
 800b5d8:	2908      	cmp	r1, #8
 800b5da:	d832      	bhi.n	800b642 <_strtod_l+0x92>
 800b5dc:	2900      	cmp	r1, #0
 800b5de:	d03b      	beq.n	800b658 <_strtod_l+0xa8>
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b5e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b5e6:	782a      	ldrb	r2, [r5, #0]
 800b5e8:	2a30      	cmp	r2, #48	@ 0x30
 800b5ea:	f040 80b3 	bne.w	800b754 <_strtod_l+0x1a4>
 800b5ee:	786a      	ldrb	r2, [r5, #1]
 800b5f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b5f4:	2a58      	cmp	r2, #88	@ 0x58
 800b5f6:	d16e      	bne.n	800b6d6 <_strtod_l+0x126>
 800b5f8:	9302      	str	r3, [sp, #8]
 800b5fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5fc:	9301      	str	r3, [sp, #4]
 800b5fe:	ab1a      	add	r3, sp, #104	@ 0x68
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	4a8e      	ldr	r2, [pc, #568]	@ (800b83c <_strtod_l+0x28c>)
 800b604:	9805      	ldr	r0, [sp, #20]
 800b606:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b608:	a919      	add	r1, sp, #100	@ 0x64
 800b60a:	f002 fe07 	bl	800e21c <__gethex>
 800b60e:	f010 060f 	ands.w	r6, r0, #15
 800b612:	4604      	mov	r4, r0
 800b614:	d005      	beq.n	800b622 <_strtod_l+0x72>
 800b616:	2e06      	cmp	r6, #6
 800b618:	d128      	bne.n	800b66c <_strtod_l+0xbc>
 800b61a:	3501      	adds	r5, #1
 800b61c:	2300      	movs	r3, #0
 800b61e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b620:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b622:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b624:	2b00      	cmp	r3, #0
 800b626:	f040 858e 	bne.w	800c146 <_strtod_l+0xb96>
 800b62a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b62c:	b1cb      	cbz	r3, 800b662 <_strtod_l+0xb2>
 800b62e:	4652      	mov	r2, sl
 800b630:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b634:	ec43 2b10 	vmov	d0, r2, r3
 800b638:	b01f      	add	sp, #124	@ 0x7c
 800b63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63e:	2920      	cmp	r1, #32
 800b640:	d1ce      	bne.n	800b5e0 <_strtod_l+0x30>
 800b642:	3201      	adds	r2, #1
 800b644:	e7c1      	b.n	800b5ca <_strtod_l+0x1a>
 800b646:	292d      	cmp	r1, #45	@ 0x2d
 800b648:	d1ca      	bne.n	800b5e0 <_strtod_l+0x30>
 800b64a:	2101      	movs	r1, #1
 800b64c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b64e:	1c51      	adds	r1, r2, #1
 800b650:	9119      	str	r1, [sp, #100]	@ 0x64
 800b652:	7852      	ldrb	r2, [r2, #1]
 800b654:	2a00      	cmp	r2, #0
 800b656:	d1c5      	bne.n	800b5e4 <_strtod_l+0x34>
 800b658:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b65a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f040 8570 	bne.w	800c142 <_strtod_l+0xb92>
 800b662:	4652      	mov	r2, sl
 800b664:	465b      	mov	r3, fp
 800b666:	e7e5      	b.n	800b634 <_strtod_l+0x84>
 800b668:	2100      	movs	r1, #0
 800b66a:	e7ef      	b.n	800b64c <_strtod_l+0x9c>
 800b66c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b66e:	b13a      	cbz	r2, 800b680 <_strtod_l+0xd0>
 800b670:	2135      	movs	r1, #53	@ 0x35
 800b672:	a81c      	add	r0, sp, #112	@ 0x70
 800b674:	f003 fdda 	bl	800f22c <__copybits>
 800b678:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b67a:	9805      	ldr	r0, [sp, #20]
 800b67c:	f003 f9a8 	bl	800e9d0 <_Bfree>
 800b680:	3e01      	subs	r6, #1
 800b682:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b684:	2e04      	cmp	r6, #4
 800b686:	d806      	bhi.n	800b696 <_strtod_l+0xe6>
 800b688:	e8df f006 	tbb	[pc, r6]
 800b68c:	201d0314 	.word	0x201d0314
 800b690:	14          	.byte	0x14
 800b691:	00          	.byte	0x00
 800b692:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b696:	05e1      	lsls	r1, r4, #23
 800b698:	bf48      	it	mi
 800b69a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b69e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b6a2:	0d1b      	lsrs	r3, r3, #20
 800b6a4:	051b      	lsls	r3, r3, #20
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1bb      	bne.n	800b622 <_strtod_l+0x72>
 800b6aa:	f001 fe4f 	bl	800d34c <__errno>
 800b6ae:	2322      	movs	r3, #34	@ 0x22
 800b6b0:	6003      	str	r3, [r0, #0]
 800b6b2:	e7b6      	b.n	800b622 <_strtod_l+0x72>
 800b6b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b6b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b6bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b6c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b6c4:	e7e7      	b.n	800b696 <_strtod_l+0xe6>
 800b6c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b844 <_strtod_l+0x294>
 800b6ca:	e7e4      	b.n	800b696 <_strtod_l+0xe6>
 800b6cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b6d0:	f04f 3aff 	mov.w	sl, #4294967295
 800b6d4:	e7df      	b.n	800b696 <_strtod_l+0xe6>
 800b6d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6d8:	1c5a      	adds	r2, r3, #1
 800b6da:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6dc:	785b      	ldrb	r3, [r3, #1]
 800b6de:	2b30      	cmp	r3, #48	@ 0x30
 800b6e0:	d0f9      	beq.n	800b6d6 <_strtod_l+0x126>
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d09d      	beq.n	800b622 <_strtod_l+0x72>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	9308      	str	r3, [sp, #32]
 800b6f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6f4:	461f      	mov	r7, r3
 800b6f6:	220a      	movs	r2, #10
 800b6f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b6fa:	7805      	ldrb	r5, [r0, #0]
 800b6fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b700:	b2d9      	uxtb	r1, r3
 800b702:	2909      	cmp	r1, #9
 800b704:	d928      	bls.n	800b758 <_strtod_l+0x1a8>
 800b706:	494e      	ldr	r1, [pc, #312]	@ (800b840 <_strtod_l+0x290>)
 800b708:	2201      	movs	r2, #1
 800b70a:	f001 fd66 	bl	800d1da <strncmp>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d032      	beq.n	800b778 <_strtod_l+0x1c8>
 800b712:	2000      	movs	r0, #0
 800b714:	462a      	mov	r2, r5
 800b716:	4681      	mov	r9, r0
 800b718:	463d      	mov	r5, r7
 800b71a:	4603      	mov	r3, r0
 800b71c:	2a65      	cmp	r2, #101	@ 0x65
 800b71e:	d001      	beq.n	800b724 <_strtod_l+0x174>
 800b720:	2a45      	cmp	r2, #69	@ 0x45
 800b722:	d114      	bne.n	800b74e <_strtod_l+0x19e>
 800b724:	b91d      	cbnz	r5, 800b72e <_strtod_l+0x17e>
 800b726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b728:	4302      	orrs	r2, r0
 800b72a:	d095      	beq.n	800b658 <_strtod_l+0xa8>
 800b72c:	2500      	movs	r5, #0
 800b72e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b730:	1c62      	adds	r2, r4, #1
 800b732:	9219      	str	r2, [sp, #100]	@ 0x64
 800b734:	7862      	ldrb	r2, [r4, #1]
 800b736:	2a2b      	cmp	r2, #43	@ 0x2b
 800b738:	d077      	beq.n	800b82a <_strtod_l+0x27a>
 800b73a:	2a2d      	cmp	r2, #45	@ 0x2d
 800b73c:	d07b      	beq.n	800b836 <_strtod_l+0x286>
 800b73e:	f04f 0c00 	mov.w	ip, #0
 800b742:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b746:	2909      	cmp	r1, #9
 800b748:	f240 8082 	bls.w	800b850 <_strtod_l+0x2a0>
 800b74c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b74e:	f04f 0800 	mov.w	r8, #0
 800b752:	e0a2      	b.n	800b89a <_strtod_l+0x2ea>
 800b754:	2300      	movs	r3, #0
 800b756:	e7c7      	b.n	800b6e8 <_strtod_l+0x138>
 800b758:	2f08      	cmp	r7, #8
 800b75a:	bfd5      	itete	le
 800b75c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b75e:	9908      	ldrgt	r1, [sp, #32]
 800b760:	fb02 3301 	mlale	r3, r2, r1, r3
 800b764:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b768:	f100 0001 	add.w	r0, r0, #1
 800b76c:	bfd4      	ite	le
 800b76e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b770:	9308      	strgt	r3, [sp, #32]
 800b772:	3701      	adds	r7, #1
 800b774:	9019      	str	r0, [sp, #100]	@ 0x64
 800b776:	e7bf      	b.n	800b6f8 <_strtod_l+0x148>
 800b778:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b77e:	785a      	ldrb	r2, [r3, #1]
 800b780:	b37f      	cbz	r7, 800b7e2 <_strtod_l+0x232>
 800b782:	4681      	mov	r9, r0
 800b784:	463d      	mov	r5, r7
 800b786:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b78a:	2b09      	cmp	r3, #9
 800b78c:	d912      	bls.n	800b7b4 <_strtod_l+0x204>
 800b78e:	2301      	movs	r3, #1
 800b790:	e7c4      	b.n	800b71c <_strtod_l+0x16c>
 800b792:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b794:	1c5a      	adds	r2, r3, #1
 800b796:	9219      	str	r2, [sp, #100]	@ 0x64
 800b798:	785a      	ldrb	r2, [r3, #1]
 800b79a:	3001      	adds	r0, #1
 800b79c:	2a30      	cmp	r2, #48	@ 0x30
 800b79e:	d0f8      	beq.n	800b792 <_strtod_l+0x1e2>
 800b7a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b7a4:	2b08      	cmp	r3, #8
 800b7a6:	f200 84d3 	bhi.w	800c150 <_strtod_l+0xba0>
 800b7aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800b7ae:	4681      	mov	r9, r0
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	4605      	mov	r5, r0
 800b7b4:	3a30      	subs	r2, #48	@ 0x30
 800b7b6:	f100 0301 	add.w	r3, r0, #1
 800b7ba:	d02a      	beq.n	800b812 <_strtod_l+0x262>
 800b7bc:	4499      	add	r9, r3
 800b7be:	eb00 0c05 	add.w	ip, r0, r5
 800b7c2:	462b      	mov	r3, r5
 800b7c4:	210a      	movs	r1, #10
 800b7c6:	4563      	cmp	r3, ip
 800b7c8:	d10d      	bne.n	800b7e6 <_strtod_l+0x236>
 800b7ca:	1c69      	adds	r1, r5, #1
 800b7cc:	4401      	add	r1, r0
 800b7ce:	4428      	add	r0, r5
 800b7d0:	2808      	cmp	r0, #8
 800b7d2:	dc16      	bgt.n	800b802 <_strtod_l+0x252>
 800b7d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b7d6:	230a      	movs	r3, #10
 800b7d8:	fb03 2300 	mla	r3, r3, r0, r2
 800b7dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e018      	b.n	800b814 <_strtod_l+0x264>
 800b7e2:	4638      	mov	r0, r7
 800b7e4:	e7da      	b.n	800b79c <_strtod_l+0x1ec>
 800b7e6:	2b08      	cmp	r3, #8
 800b7e8:	f103 0301 	add.w	r3, r3, #1
 800b7ec:	dc03      	bgt.n	800b7f6 <_strtod_l+0x246>
 800b7ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b7f0:	434e      	muls	r6, r1
 800b7f2:	960a      	str	r6, [sp, #40]	@ 0x28
 800b7f4:	e7e7      	b.n	800b7c6 <_strtod_l+0x216>
 800b7f6:	2b10      	cmp	r3, #16
 800b7f8:	bfde      	ittt	le
 800b7fa:	9e08      	ldrle	r6, [sp, #32]
 800b7fc:	434e      	mulle	r6, r1
 800b7fe:	9608      	strle	r6, [sp, #32]
 800b800:	e7e1      	b.n	800b7c6 <_strtod_l+0x216>
 800b802:	280f      	cmp	r0, #15
 800b804:	dceb      	bgt.n	800b7de <_strtod_l+0x22e>
 800b806:	9808      	ldr	r0, [sp, #32]
 800b808:	230a      	movs	r3, #10
 800b80a:	fb03 2300 	mla	r3, r3, r0, r2
 800b80e:	9308      	str	r3, [sp, #32]
 800b810:	e7e5      	b.n	800b7de <_strtod_l+0x22e>
 800b812:	4629      	mov	r1, r5
 800b814:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b816:	1c50      	adds	r0, r2, #1
 800b818:	9019      	str	r0, [sp, #100]	@ 0x64
 800b81a:	7852      	ldrb	r2, [r2, #1]
 800b81c:	4618      	mov	r0, r3
 800b81e:	460d      	mov	r5, r1
 800b820:	e7b1      	b.n	800b786 <_strtod_l+0x1d6>
 800b822:	f04f 0900 	mov.w	r9, #0
 800b826:	2301      	movs	r3, #1
 800b828:	e77d      	b.n	800b726 <_strtod_l+0x176>
 800b82a:	f04f 0c00 	mov.w	ip, #0
 800b82e:	1ca2      	adds	r2, r4, #2
 800b830:	9219      	str	r2, [sp, #100]	@ 0x64
 800b832:	78a2      	ldrb	r2, [r4, #2]
 800b834:	e785      	b.n	800b742 <_strtod_l+0x192>
 800b836:	f04f 0c01 	mov.w	ip, #1
 800b83a:	e7f8      	b.n	800b82e <_strtod_l+0x27e>
 800b83c:	08011a74 	.word	0x08011a74
 800b840:	08011a5c 	.word	0x08011a5c
 800b844:	7ff00000 	.word	0x7ff00000
 800b848:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b84a:	1c51      	adds	r1, r2, #1
 800b84c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b84e:	7852      	ldrb	r2, [r2, #1]
 800b850:	2a30      	cmp	r2, #48	@ 0x30
 800b852:	d0f9      	beq.n	800b848 <_strtod_l+0x298>
 800b854:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b858:	2908      	cmp	r1, #8
 800b85a:	f63f af78 	bhi.w	800b74e <_strtod_l+0x19e>
 800b85e:	3a30      	subs	r2, #48	@ 0x30
 800b860:	920e      	str	r2, [sp, #56]	@ 0x38
 800b862:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b864:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b866:	f04f 080a 	mov.w	r8, #10
 800b86a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b86c:	1c56      	adds	r6, r2, #1
 800b86e:	9619      	str	r6, [sp, #100]	@ 0x64
 800b870:	7852      	ldrb	r2, [r2, #1]
 800b872:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b876:	f1be 0f09 	cmp.w	lr, #9
 800b87a:	d939      	bls.n	800b8f0 <_strtod_l+0x340>
 800b87c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b87e:	1a76      	subs	r6, r6, r1
 800b880:	2e08      	cmp	r6, #8
 800b882:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b886:	dc03      	bgt.n	800b890 <_strtod_l+0x2e0>
 800b888:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b88a:	4588      	cmp	r8, r1
 800b88c:	bfa8      	it	ge
 800b88e:	4688      	movge	r8, r1
 800b890:	f1bc 0f00 	cmp.w	ip, #0
 800b894:	d001      	beq.n	800b89a <_strtod_l+0x2ea>
 800b896:	f1c8 0800 	rsb	r8, r8, #0
 800b89a:	2d00      	cmp	r5, #0
 800b89c:	d14e      	bne.n	800b93c <_strtod_l+0x38c>
 800b89e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b8a0:	4308      	orrs	r0, r1
 800b8a2:	f47f aebe 	bne.w	800b622 <_strtod_l+0x72>
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f47f aed6 	bne.w	800b658 <_strtod_l+0xa8>
 800b8ac:	2a69      	cmp	r2, #105	@ 0x69
 800b8ae:	d028      	beq.n	800b902 <_strtod_l+0x352>
 800b8b0:	dc25      	bgt.n	800b8fe <_strtod_l+0x34e>
 800b8b2:	2a49      	cmp	r2, #73	@ 0x49
 800b8b4:	d025      	beq.n	800b902 <_strtod_l+0x352>
 800b8b6:	2a4e      	cmp	r2, #78	@ 0x4e
 800b8b8:	f47f aece 	bne.w	800b658 <_strtod_l+0xa8>
 800b8bc:	499b      	ldr	r1, [pc, #620]	@ (800bb2c <_strtod_l+0x57c>)
 800b8be:	a819      	add	r0, sp, #100	@ 0x64
 800b8c0:	f002 fece 	bl	800e660 <__match>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	f43f aec7 	beq.w	800b658 <_strtod_l+0xa8>
 800b8ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	2b28      	cmp	r3, #40	@ 0x28
 800b8d0:	d12e      	bne.n	800b930 <_strtod_l+0x380>
 800b8d2:	4997      	ldr	r1, [pc, #604]	@ (800bb30 <_strtod_l+0x580>)
 800b8d4:	aa1c      	add	r2, sp, #112	@ 0x70
 800b8d6:	a819      	add	r0, sp, #100	@ 0x64
 800b8d8:	f002 fed6 	bl	800e688 <__hexnan>
 800b8dc:	2805      	cmp	r0, #5
 800b8de:	d127      	bne.n	800b930 <_strtod_l+0x380>
 800b8e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b8e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b8e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b8ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b8ee:	e698      	b.n	800b622 <_strtod_l+0x72>
 800b8f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b8f2:	fb08 2101 	mla	r1, r8, r1, r2
 800b8f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b8fa:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8fc:	e7b5      	b.n	800b86a <_strtod_l+0x2ba>
 800b8fe:	2a6e      	cmp	r2, #110	@ 0x6e
 800b900:	e7da      	b.n	800b8b8 <_strtod_l+0x308>
 800b902:	498c      	ldr	r1, [pc, #560]	@ (800bb34 <_strtod_l+0x584>)
 800b904:	a819      	add	r0, sp, #100	@ 0x64
 800b906:	f002 feab 	bl	800e660 <__match>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	f43f aea4 	beq.w	800b658 <_strtod_l+0xa8>
 800b910:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b912:	4989      	ldr	r1, [pc, #548]	@ (800bb38 <_strtod_l+0x588>)
 800b914:	3b01      	subs	r3, #1
 800b916:	a819      	add	r0, sp, #100	@ 0x64
 800b918:	9319      	str	r3, [sp, #100]	@ 0x64
 800b91a:	f002 fea1 	bl	800e660 <__match>
 800b91e:	b910      	cbnz	r0, 800b926 <_strtod_l+0x376>
 800b920:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b922:	3301      	adds	r3, #1
 800b924:	9319      	str	r3, [sp, #100]	@ 0x64
 800b926:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bb48 <_strtod_l+0x598>
 800b92a:	f04f 0a00 	mov.w	sl, #0
 800b92e:	e678      	b.n	800b622 <_strtod_l+0x72>
 800b930:	4882      	ldr	r0, [pc, #520]	@ (800bb3c <_strtod_l+0x58c>)
 800b932:	f001 fd49 	bl	800d3c8 <nan>
 800b936:	ec5b ab10 	vmov	sl, fp, d0
 800b93a:	e672      	b.n	800b622 <_strtod_l+0x72>
 800b93c:	eba8 0309 	sub.w	r3, r8, r9
 800b940:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b942:	9309      	str	r3, [sp, #36]	@ 0x24
 800b944:	2f00      	cmp	r7, #0
 800b946:	bf08      	it	eq
 800b948:	462f      	moveq	r7, r5
 800b94a:	2d10      	cmp	r5, #16
 800b94c:	462c      	mov	r4, r5
 800b94e:	bfa8      	it	ge
 800b950:	2410      	movge	r4, #16
 800b952:	f7f4 fdd7 	bl	8000504 <__aeabi_ui2d>
 800b956:	2d09      	cmp	r5, #9
 800b958:	4682      	mov	sl, r0
 800b95a:	468b      	mov	fp, r1
 800b95c:	dc13      	bgt.n	800b986 <_strtod_l+0x3d6>
 800b95e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b960:	2b00      	cmp	r3, #0
 800b962:	f43f ae5e 	beq.w	800b622 <_strtod_l+0x72>
 800b966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b968:	dd78      	ble.n	800ba5c <_strtod_l+0x4ac>
 800b96a:	2b16      	cmp	r3, #22
 800b96c:	dc5f      	bgt.n	800ba2e <_strtod_l+0x47e>
 800b96e:	4974      	ldr	r1, [pc, #464]	@ (800bb40 <_strtod_l+0x590>)
 800b970:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b974:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b978:	4652      	mov	r2, sl
 800b97a:	465b      	mov	r3, fp
 800b97c:	f7f4 fe3c 	bl	80005f8 <__aeabi_dmul>
 800b980:	4682      	mov	sl, r0
 800b982:	468b      	mov	fp, r1
 800b984:	e64d      	b.n	800b622 <_strtod_l+0x72>
 800b986:	4b6e      	ldr	r3, [pc, #440]	@ (800bb40 <_strtod_l+0x590>)
 800b988:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b98c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b990:	f7f4 fe32 	bl	80005f8 <__aeabi_dmul>
 800b994:	4682      	mov	sl, r0
 800b996:	9808      	ldr	r0, [sp, #32]
 800b998:	468b      	mov	fp, r1
 800b99a:	f7f4 fdb3 	bl	8000504 <__aeabi_ui2d>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4650      	mov	r0, sl
 800b9a4:	4659      	mov	r1, fp
 800b9a6:	f7f4 fc71 	bl	800028c <__adddf3>
 800b9aa:	2d0f      	cmp	r5, #15
 800b9ac:	4682      	mov	sl, r0
 800b9ae:	468b      	mov	fp, r1
 800b9b0:	ddd5      	ble.n	800b95e <_strtod_l+0x3ae>
 800b9b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9b4:	1b2c      	subs	r4, r5, r4
 800b9b6:	441c      	add	r4, r3
 800b9b8:	2c00      	cmp	r4, #0
 800b9ba:	f340 8096 	ble.w	800baea <_strtod_l+0x53a>
 800b9be:	f014 030f 	ands.w	r3, r4, #15
 800b9c2:	d00a      	beq.n	800b9da <_strtod_l+0x42a>
 800b9c4:	495e      	ldr	r1, [pc, #376]	@ (800bb40 <_strtod_l+0x590>)
 800b9c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b9ca:	4652      	mov	r2, sl
 800b9cc:	465b      	mov	r3, fp
 800b9ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9d2:	f7f4 fe11 	bl	80005f8 <__aeabi_dmul>
 800b9d6:	4682      	mov	sl, r0
 800b9d8:	468b      	mov	fp, r1
 800b9da:	f034 040f 	bics.w	r4, r4, #15
 800b9de:	d073      	beq.n	800bac8 <_strtod_l+0x518>
 800b9e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b9e4:	dd48      	ble.n	800ba78 <_strtod_l+0x4c8>
 800b9e6:	2400      	movs	r4, #0
 800b9e8:	46a0      	mov	r8, r4
 800b9ea:	940a      	str	r4, [sp, #40]	@ 0x28
 800b9ec:	46a1      	mov	r9, r4
 800b9ee:	9a05      	ldr	r2, [sp, #20]
 800b9f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bb48 <_strtod_l+0x598>
 800b9f4:	2322      	movs	r3, #34	@ 0x22
 800b9f6:	6013      	str	r3, [r2, #0]
 800b9f8:	f04f 0a00 	mov.w	sl, #0
 800b9fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f43f ae0f 	beq.w	800b622 <_strtod_l+0x72>
 800ba04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba06:	9805      	ldr	r0, [sp, #20]
 800ba08:	f002 ffe2 	bl	800e9d0 <_Bfree>
 800ba0c:	9805      	ldr	r0, [sp, #20]
 800ba0e:	4649      	mov	r1, r9
 800ba10:	f002 ffde 	bl	800e9d0 <_Bfree>
 800ba14:	9805      	ldr	r0, [sp, #20]
 800ba16:	4641      	mov	r1, r8
 800ba18:	f002 ffda 	bl	800e9d0 <_Bfree>
 800ba1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ba1e:	9805      	ldr	r0, [sp, #20]
 800ba20:	f002 ffd6 	bl	800e9d0 <_Bfree>
 800ba24:	9805      	ldr	r0, [sp, #20]
 800ba26:	4621      	mov	r1, r4
 800ba28:	f002 ffd2 	bl	800e9d0 <_Bfree>
 800ba2c:	e5f9      	b.n	800b622 <_strtod_l+0x72>
 800ba2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ba34:	4293      	cmp	r3, r2
 800ba36:	dbbc      	blt.n	800b9b2 <_strtod_l+0x402>
 800ba38:	4c41      	ldr	r4, [pc, #260]	@ (800bb40 <_strtod_l+0x590>)
 800ba3a:	f1c5 050f 	rsb	r5, r5, #15
 800ba3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ba42:	4652      	mov	r2, sl
 800ba44:	465b      	mov	r3, fp
 800ba46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba4a:	f7f4 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ba4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba50:	1b5d      	subs	r5, r3, r5
 800ba52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ba56:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba5a:	e78f      	b.n	800b97c <_strtod_l+0x3cc>
 800ba5c:	3316      	adds	r3, #22
 800ba5e:	dba8      	blt.n	800b9b2 <_strtod_l+0x402>
 800ba60:	4b37      	ldr	r3, [pc, #220]	@ (800bb40 <_strtod_l+0x590>)
 800ba62:	eba9 0808 	sub.w	r8, r9, r8
 800ba66:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ba6a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ba6e:	4650      	mov	r0, sl
 800ba70:	4659      	mov	r1, fp
 800ba72:	f7f4 feeb 	bl	800084c <__aeabi_ddiv>
 800ba76:	e783      	b.n	800b980 <_strtod_l+0x3d0>
 800ba78:	4b32      	ldr	r3, [pc, #200]	@ (800bb44 <_strtod_l+0x594>)
 800ba7a:	9308      	str	r3, [sp, #32]
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	1124      	asrs	r4, r4, #4
 800ba80:	4650      	mov	r0, sl
 800ba82:	4659      	mov	r1, fp
 800ba84:	461e      	mov	r6, r3
 800ba86:	2c01      	cmp	r4, #1
 800ba88:	dc21      	bgt.n	800bace <_strtod_l+0x51e>
 800ba8a:	b10b      	cbz	r3, 800ba90 <_strtod_l+0x4e0>
 800ba8c:	4682      	mov	sl, r0
 800ba8e:	468b      	mov	fp, r1
 800ba90:	492c      	ldr	r1, [pc, #176]	@ (800bb44 <_strtod_l+0x594>)
 800ba92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ba96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ba9a:	4652      	mov	r2, sl
 800ba9c:	465b      	mov	r3, fp
 800ba9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baa2:	f7f4 fda9 	bl	80005f8 <__aeabi_dmul>
 800baa6:	4b28      	ldr	r3, [pc, #160]	@ (800bb48 <_strtod_l+0x598>)
 800baa8:	460a      	mov	r2, r1
 800baaa:	400b      	ands	r3, r1
 800baac:	4927      	ldr	r1, [pc, #156]	@ (800bb4c <_strtod_l+0x59c>)
 800baae:	428b      	cmp	r3, r1
 800bab0:	4682      	mov	sl, r0
 800bab2:	d898      	bhi.n	800b9e6 <_strtod_l+0x436>
 800bab4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bab8:	428b      	cmp	r3, r1
 800baba:	bf86      	itte	hi
 800babc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bb50 <_strtod_l+0x5a0>
 800bac0:	f04f 3aff 	movhi.w	sl, #4294967295
 800bac4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bac8:	2300      	movs	r3, #0
 800baca:	9308      	str	r3, [sp, #32]
 800bacc:	e07a      	b.n	800bbc4 <_strtod_l+0x614>
 800bace:	07e2      	lsls	r2, r4, #31
 800bad0:	d505      	bpl.n	800bade <_strtod_l+0x52e>
 800bad2:	9b08      	ldr	r3, [sp, #32]
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	f7f4 fd8e 	bl	80005f8 <__aeabi_dmul>
 800badc:	2301      	movs	r3, #1
 800bade:	9a08      	ldr	r2, [sp, #32]
 800bae0:	3208      	adds	r2, #8
 800bae2:	3601      	adds	r6, #1
 800bae4:	1064      	asrs	r4, r4, #1
 800bae6:	9208      	str	r2, [sp, #32]
 800bae8:	e7cd      	b.n	800ba86 <_strtod_l+0x4d6>
 800baea:	d0ed      	beq.n	800bac8 <_strtod_l+0x518>
 800baec:	4264      	negs	r4, r4
 800baee:	f014 020f 	ands.w	r2, r4, #15
 800baf2:	d00a      	beq.n	800bb0a <_strtod_l+0x55a>
 800baf4:	4b12      	ldr	r3, [pc, #72]	@ (800bb40 <_strtod_l+0x590>)
 800baf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bafa:	4650      	mov	r0, sl
 800bafc:	4659      	mov	r1, fp
 800bafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb02:	f7f4 fea3 	bl	800084c <__aeabi_ddiv>
 800bb06:	4682      	mov	sl, r0
 800bb08:	468b      	mov	fp, r1
 800bb0a:	1124      	asrs	r4, r4, #4
 800bb0c:	d0dc      	beq.n	800bac8 <_strtod_l+0x518>
 800bb0e:	2c1f      	cmp	r4, #31
 800bb10:	dd20      	ble.n	800bb54 <_strtod_l+0x5a4>
 800bb12:	2400      	movs	r4, #0
 800bb14:	46a0      	mov	r8, r4
 800bb16:	940a      	str	r4, [sp, #40]	@ 0x28
 800bb18:	46a1      	mov	r9, r4
 800bb1a:	9a05      	ldr	r2, [sp, #20]
 800bb1c:	2322      	movs	r3, #34	@ 0x22
 800bb1e:	f04f 0a00 	mov.w	sl, #0
 800bb22:	f04f 0b00 	mov.w	fp, #0
 800bb26:	6013      	str	r3, [r2, #0]
 800bb28:	e768      	b.n	800b9fc <_strtod_l+0x44c>
 800bb2a:	bf00      	nop
 800bb2c:	08011bbe 	.word	0x08011bbe
 800bb30:	08011a60 	.word	0x08011a60
 800bb34:	08011bb6 	.word	0x08011bb6
 800bb38:	08011ca2 	.word	0x08011ca2
 800bb3c:	08011c9e 	.word	0x08011c9e
 800bb40:	08011e08 	.word	0x08011e08
 800bb44:	08011de0 	.word	0x08011de0
 800bb48:	7ff00000 	.word	0x7ff00000
 800bb4c:	7ca00000 	.word	0x7ca00000
 800bb50:	7fefffff 	.word	0x7fefffff
 800bb54:	f014 0310 	ands.w	r3, r4, #16
 800bb58:	bf18      	it	ne
 800bb5a:	236a      	movne	r3, #106	@ 0x6a
 800bb5c:	4ea9      	ldr	r6, [pc, #676]	@ (800be04 <_strtod_l+0x854>)
 800bb5e:	9308      	str	r3, [sp, #32]
 800bb60:	4650      	mov	r0, sl
 800bb62:	4659      	mov	r1, fp
 800bb64:	2300      	movs	r3, #0
 800bb66:	07e2      	lsls	r2, r4, #31
 800bb68:	d504      	bpl.n	800bb74 <_strtod_l+0x5c4>
 800bb6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb6e:	f7f4 fd43 	bl	80005f8 <__aeabi_dmul>
 800bb72:	2301      	movs	r3, #1
 800bb74:	1064      	asrs	r4, r4, #1
 800bb76:	f106 0608 	add.w	r6, r6, #8
 800bb7a:	d1f4      	bne.n	800bb66 <_strtod_l+0x5b6>
 800bb7c:	b10b      	cbz	r3, 800bb82 <_strtod_l+0x5d2>
 800bb7e:	4682      	mov	sl, r0
 800bb80:	468b      	mov	fp, r1
 800bb82:	9b08      	ldr	r3, [sp, #32]
 800bb84:	b1b3      	cbz	r3, 800bbb4 <_strtod_l+0x604>
 800bb86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bb8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	4659      	mov	r1, fp
 800bb92:	dd0f      	ble.n	800bbb4 <_strtod_l+0x604>
 800bb94:	2b1f      	cmp	r3, #31
 800bb96:	dd55      	ble.n	800bc44 <_strtod_l+0x694>
 800bb98:	2b34      	cmp	r3, #52	@ 0x34
 800bb9a:	bfde      	ittt	le
 800bb9c:	f04f 33ff 	movle.w	r3, #4294967295
 800bba0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bba4:	4093      	lslle	r3, r2
 800bba6:	f04f 0a00 	mov.w	sl, #0
 800bbaa:	bfcc      	ite	gt
 800bbac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bbb0:	ea03 0b01 	andle.w	fp, r3, r1
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	4650      	mov	r0, sl
 800bbba:	4659      	mov	r1, fp
 800bbbc:	f7f4 ff84 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	d1a6      	bne.n	800bb12 <_strtod_l+0x562>
 800bbc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbc6:	9300      	str	r3, [sp, #0]
 800bbc8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bbca:	9805      	ldr	r0, [sp, #20]
 800bbcc:	462b      	mov	r3, r5
 800bbce:	463a      	mov	r2, r7
 800bbd0:	f002 ff66 	bl	800eaa0 <__s2b>
 800bbd4:	900a      	str	r0, [sp, #40]	@ 0x28
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	f43f af05 	beq.w	800b9e6 <_strtod_l+0x436>
 800bbdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbde:	2a00      	cmp	r2, #0
 800bbe0:	eba9 0308 	sub.w	r3, r9, r8
 800bbe4:	bfa8      	it	ge
 800bbe6:	2300      	movge	r3, #0
 800bbe8:	9312      	str	r3, [sp, #72]	@ 0x48
 800bbea:	2400      	movs	r4, #0
 800bbec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bbf0:	9316      	str	r3, [sp, #88]	@ 0x58
 800bbf2:	46a0      	mov	r8, r4
 800bbf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbf6:	9805      	ldr	r0, [sp, #20]
 800bbf8:	6859      	ldr	r1, [r3, #4]
 800bbfa:	f002 fea9 	bl	800e950 <_Balloc>
 800bbfe:	4681      	mov	r9, r0
 800bc00:	2800      	cmp	r0, #0
 800bc02:	f43f aef4 	beq.w	800b9ee <_strtod_l+0x43e>
 800bc06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc08:	691a      	ldr	r2, [r3, #16]
 800bc0a:	3202      	adds	r2, #2
 800bc0c:	f103 010c 	add.w	r1, r3, #12
 800bc10:	0092      	lsls	r2, r2, #2
 800bc12:	300c      	adds	r0, #12
 800bc14:	f001 fbc7 	bl	800d3a6 <memcpy>
 800bc18:	ec4b ab10 	vmov	d0, sl, fp
 800bc1c:	9805      	ldr	r0, [sp, #20]
 800bc1e:	aa1c      	add	r2, sp, #112	@ 0x70
 800bc20:	a91b      	add	r1, sp, #108	@ 0x6c
 800bc22:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bc26:	f003 fa77 	bl	800f118 <__d2b>
 800bc2a:	901a      	str	r0, [sp, #104]	@ 0x68
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	f43f aede 	beq.w	800b9ee <_strtod_l+0x43e>
 800bc32:	9805      	ldr	r0, [sp, #20]
 800bc34:	2101      	movs	r1, #1
 800bc36:	f002 ffc9 	bl	800ebcc <__i2b>
 800bc3a:	4680      	mov	r8, r0
 800bc3c:	b948      	cbnz	r0, 800bc52 <_strtod_l+0x6a2>
 800bc3e:	f04f 0800 	mov.w	r8, #0
 800bc42:	e6d4      	b.n	800b9ee <_strtod_l+0x43e>
 800bc44:	f04f 32ff 	mov.w	r2, #4294967295
 800bc48:	fa02 f303 	lsl.w	r3, r2, r3
 800bc4c:	ea03 0a0a 	and.w	sl, r3, sl
 800bc50:	e7b0      	b.n	800bbb4 <_strtod_l+0x604>
 800bc52:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bc54:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bc56:	2d00      	cmp	r5, #0
 800bc58:	bfab      	itete	ge
 800bc5a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bc5c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bc5e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bc60:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bc62:	bfac      	ite	ge
 800bc64:	18ef      	addge	r7, r5, r3
 800bc66:	1b5e      	sublt	r6, r3, r5
 800bc68:	9b08      	ldr	r3, [sp, #32]
 800bc6a:	1aed      	subs	r5, r5, r3
 800bc6c:	4415      	add	r5, r2
 800bc6e:	4b66      	ldr	r3, [pc, #408]	@ (800be08 <_strtod_l+0x858>)
 800bc70:	3d01      	subs	r5, #1
 800bc72:	429d      	cmp	r5, r3
 800bc74:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bc78:	da50      	bge.n	800bd1c <_strtod_l+0x76c>
 800bc7a:	1b5b      	subs	r3, r3, r5
 800bc7c:	2b1f      	cmp	r3, #31
 800bc7e:	eba2 0203 	sub.w	r2, r2, r3
 800bc82:	f04f 0101 	mov.w	r1, #1
 800bc86:	dc3d      	bgt.n	800bd04 <_strtod_l+0x754>
 800bc88:	fa01 f303 	lsl.w	r3, r1, r3
 800bc8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc8e:	2300      	movs	r3, #0
 800bc90:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc92:	18bd      	adds	r5, r7, r2
 800bc94:	9b08      	ldr	r3, [sp, #32]
 800bc96:	42af      	cmp	r7, r5
 800bc98:	4416      	add	r6, r2
 800bc9a:	441e      	add	r6, r3
 800bc9c:	463b      	mov	r3, r7
 800bc9e:	bfa8      	it	ge
 800bca0:	462b      	movge	r3, r5
 800bca2:	42b3      	cmp	r3, r6
 800bca4:	bfa8      	it	ge
 800bca6:	4633      	movge	r3, r6
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	bfc2      	ittt	gt
 800bcac:	1aed      	subgt	r5, r5, r3
 800bcae:	1af6      	subgt	r6, r6, r3
 800bcb0:	1aff      	subgt	r7, r7, r3
 800bcb2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	dd16      	ble.n	800bce6 <_strtod_l+0x736>
 800bcb8:	4641      	mov	r1, r8
 800bcba:	9805      	ldr	r0, [sp, #20]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	f003 f845 	bl	800ed4c <__pow5mult>
 800bcc2:	4680      	mov	r8, r0
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d0ba      	beq.n	800bc3e <_strtod_l+0x68e>
 800bcc8:	4601      	mov	r1, r0
 800bcca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bccc:	9805      	ldr	r0, [sp, #20]
 800bcce:	f002 ff93 	bl	800ebf8 <__multiply>
 800bcd2:	900e      	str	r0, [sp, #56]	@ 0x38
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	f43f ae8a 	beq.w	800b9ee <_strtod_l+0x43e>
 800bcda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcdc:	9805      	ldr	r0, [sp, #20]
 800bcde:	f002 fe77 	bl	800e9d0 <_Bfree>
 800bce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bce4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bce6:	2d00      	cmp	r5, #0
 800bce8:	dc1d      	bgt.n	800bd26 <_strtod_l+0x776>
 800bcea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	dd23      	ble.n	800bd38 <_strtod_l+0x788>
 800bcf0:	4649      	mov	r1, r9
 800bcf2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bcf4:	9805      	ldr	r0, [sp, #20]
 800bcf6:	f003 f829 	bl	800ed4c <__pow5mult>
 800bcfa:	4681      	mov	r9, r0
 800bcfc:	b9e0      	cbnz	r0, 800bd38 <_strtod_l+0x788>
 800bcfe:	f04f 0900 	mov.w	r9, #0
 800bd02:	e674      	b.n	800b9ee <_strtod_l+0x43e>
 800bd04:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bd08:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bd0c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bd10:	35e2      	adds	r5, #226	@ 0xe2
 800bd12:	fa01 f305 	lsl.w	r3, r1, r5
 800bd16:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd18:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bd1a:	e7ba      	b.n	800bc92 <_strtod_l+0x6e2>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd20:	2301      	movs	r3, #1
 800bd22:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd24:	e7b5      	b.n	800bc92 <_strtod_l+0x6e2>
 800bd26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd28:	9805      	ldr	r0, [sp, #20]
 800bd2a:	462a      	mov	r2, r5
 800bd2c:	f003 f868 	bl	800ee00 <__lshift>
 800bd30:	901a      	str	r0, [sp, #104]	@ 0x68
 800bd32:	2800      	cmp	r0, #0
 800bd34:	d1d9      	bne.n	800bcea <_strtod_l+0x73a>
 800bd36:	e65a      	b.n	800b9ee <_strtod_l+0x43e>
 800bd38:	2e00      	cmp	r6, #0
 800bd3a:	dd07      	ble.n	800bd4c <_strtod_l+0x79c>
 800bd3c:	4649      	mov	r1, r9
 800bd3e:	9805      	ldr	r0, [sp, #20]
 800bd40:	4632      	mov	r2, r6
 800bd42:	f003 f85d 	bl	800ee00 <__lshift>
 800bd46:	4681      	mov	r9, r0
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	d0d8      	beq.n	800bcfe <_strtod_l+0x74e>
 800bd4c:	2f00      	cmp	r7, #0
 800bd4e:	dd08      	ble.n	800bd62 <_strtod_l+0x7b2>
 800bd50:	4641      	mov	r1, r8
 800bd52:	9805      	ldr	r0, [sp, #20]
 800bd54:	463a      	mov	r2, r7
 800bd56:	f003 f853 	bl	800ee00 <__lshift>
 800bd5a:	4680      	mov	r8, r0
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	f43f ae46 	beq.w	800b9ee <_strtod_l+0x43e>
 800bd62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd64:	9805      	ldr	r0, [sp, #20]
 800bd66:	464a      	mov	r2, r9
 800bd68:	f003 f8d2 	bl	800ef10 <__mdiff>
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	f43f ae3d 	beq.w	800b9ee <_strtod_l+0x43e>
 800bd74:	68c3      	ldr	r3, [r0, #12]
 800bd76:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd78:	2300      	movs	r3, #0
 800bd7a:	60c3      	str	r3, [r0, #12]
 800bd7c:	4641      	mov	r1, r8
 800bd7e:	f003 f8ab 	bl	800eed8 <__mcmp>
 800bd82:	2800      	cmp	r0, #0
 800bd84:	da46      	bge.n	800be14 <_strtod_l+0x864>
 800bd86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd88:	ea53 030a 	orrs.w	r3, r3, sl
 800bd8c:	d16c      	bne.n	800be68 <_strtod_l+0x8b8>
 800bd8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d168      	bne.n	800be68 <_strtod_l+0x8b8>
 800bd96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd9a:	0d1b      	lsrs	r3, r3, #20
 800bd9c:	051b      	lsls	r3, r3, #20
 800bd9e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bda2:	d961      	bls.n	800be68 <_strtod_l+0x8b8>
 800bda4:	6963      	ldr	r3, [r4, #20]
 800bda6:	b913      	cbnz	r3, 800bdae <_strtod_l+0x7fe>
 800bda8:	6923      	ldr	r3, [r4, #16]
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	dd5c      	ble.n	800be68 <_strtod_l+0x8b8>
 800bdae:	4621      	mov	r1, r4
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	9805      	ldr	r0, [sp, #20]
 800bdb4:	f003 f824 	bl	800ee00 <__lshift>
 800bdb8:	4641      	mov	r1, r8
 800bdba:	4604      	mov	r4, r0
 800bdbc:	f003 f88c 	bl	800eed8 <__mcmp>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	dd51      	ble.n	800be68 <_strtod_l+0x8b8>
 800bdc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bdc8:	9a08      	ldr	r2, [sp, #32]
 800bdca:	0d1b      	lsrs	r3, r3, #20
 800bdcc:	051b      	lsls	r3, r3, #20
 800bdce:	2a00      	cmp	r2, #0
 800bdd0:	d06b      	beq.n	800beaa <_strtod_l+0x8fa>
 800bdd2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bdd6:	d868      	bhi.n	800beaa <_strtod_l+0x8fa>
 800bdd8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bddc:	f67f ae9d 	bls.w	800bb1a <_strtod_l+0x56a>
 800bde0:	4b0a      	ldr	r3, [pc, #40]	@ (800be0c <_strtod_l+0x85c>)
 800bde2:	4650      	mov	r0, sl
 800bde4:	4659      	mov	r1, fp
 800bde6:	2200      	movs	r2, #0
 800bde8:	f7f4 fc06 	bl	80005f8 <__aeabi_dmul>
 800bdec:	4b08      	ldr	r3, [pc, #32]	@ (800be10 <_strtod_l+0x860>)
 800bdee:	400b      	ands	r3, r1
 800bdf0:	4682      	mov	sl, r0
 800bdf2:	468b      	mov	fp, r1
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f47f ae05 	bne.w	800ba04 <_strtod_l+0x454>
 800bdfa:	9a05      	ldr	r2, [sp, #20]
 800bdfc:	2322      	movs	r3, #34	@ 0x22
 800bdfe:	6013      	str	r3, [r2, #0]
 800be00:	e600      	b.n	800ba04 <_strtod_l+0x454>
 800be02:	bf00      	nop
 800be04:	08011a88 	.word	0x08011a88
 800be08:	fffffc02 	.word	0xfffffc02
 800be0c:	39500000 	.word	0x39500000
 800be10:	7ff00000 	.word	0x7ff00000
 800be14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800be18:	d165      	bne.n	800bee6 <_strtod_l+0x936>
 800be1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800be1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be20:	b35a      	cbz	r2, 800be7a <_strtod_l+0x8ca>
 800be22:	4a9f      	ldr	r2, [pc, #636]	@ (800c0a0 <_strtod_l+0xaf0>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d12b      	bne.n	800be80 <_strtod_l+0x8d0>
 800be28:	9b08      	ldr	r3, [sp, #32]
 800be2a:	4651      	mov	r1, sl
 800be2c:	b303      	cbz	r3, 800be70 <_strtod_l+0x8c0>
 800be2e:	4b9d      	ldr	r3, [pc, #628]	@ (800c0a4 <_strtod_l+0xaf4>)
 800be30:	465a      	mov	r2, fp
 800be32:	4013      	ands	r3, r2
 800be34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800be38:	f04f 32ff 	mov.w	r2, #4294967295
 800be3c:	d81b      	bhi.n	800be76 <_strtod_l+0x8c6>
 800be3e:	0d1b      	lsrs	r3, r3, #20
 800be40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800be44:	fa02 f303 	lsl.w	r3, r2, r3
 800be48:	4299      	cmp	r1, r3
 800be4a:	d119      	bne.n	800be80 <_strtod_l+0x8d0>
 800be4c:	4b96      	ldr	r3, [pc, #600]	@ (800c0a8 <_strtod_l+0xaf8>)
 800be4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be50:	429a      	cmp	r2, r3
 800be52:	d102      	bne.n	800be5a <_strtod_l+0x8aa>
 800be54:	3101      	adds	r1, #1
 800be56:	f43f adca 	beq.w	800b9ee <_strtod_l+0x43e>
 800be5a:	4b92      	ldr	r3, [pc, #584]	@ (800c0a4 <_strtod_l+0xaf4>)
 800be5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be5e:	401a      	ands	r2, r3
 800be60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800be64:	f04f 0a00 	mov.w	sl, #0
 800be68:	9b08      	ldr	r3, [sp, #32]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d1b8      	bne.n	800bde0 <_strtod_l+0x830>
 800be6e:	e5c9      	b.n	800ba04 <_strtod_l+0x454>
 800be70:	f04f 33ff 	mov.w	r3, #4294967295
 800be74:	e7e8      	b.n	800be48 <_strtod_l+0x898>
 800be76:	4613      	mov	r3, r2
 800be78:	e7e6      	b.n	800be48 <_strtod_l+0x898>
 800be7a:	ea53 030a 	orrs.w	r3, r3, sl
 800be7e:	d0a1      	beq.n	800bdc4 <_strtod_l+0x814>
 800be80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be82:	b1db      	cbz	r3, 800bebc <_strtod_l+0x90c>
 800be84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be86:	4213      	tst	r3, r2
 800be88:	d0ee      	beq.n	800be68 <_strtod_l+0x8b8>
 800be8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be8c:	9a08      	ldr	r2, [sp, #32]
 800be8e:	4650      	mov	r0, sl
 800be90:	4659      	mov	r1, fp
 800be92:	b1bb      	cbz	r3, 800bec4 <_strtod_l+0x914>
 800be94:	f7ff fb6b 	bl	800b56e <sulp>
 800be98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be9c:	ec53 2b10 	vmov	r2, r3, d0
 800bea0:	f7f4 f9f4 	bl	800028c <__adddf3>
 800bea4:	4682      	mov	sl, r0
 800bea6:	468b      	mov	fp, r1
 800bea8:	e7de      	b.n	800be68 <_strtod_l+0x8b8>
 800beaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800beae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800beb2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800beb6:	f04f 3aff 	mov.w	sl, #4294967295
 800beba:	e7d5      	b.n	800be68 <_strtod_l+0x8b8>
 800bebc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bebe:	ea13 0f0a 	tst.w	r3, sl
 800bec2:	e7e1      	b.n	800be88 <_strtod_l+0x8d8>
 800bec4:	f7ff fb53 	bl	800b56e <sulp>
 800bec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800becc:	ec53 2b10 	vmov	r2, r3, d0
 800bed0:	f7f4 f9da 	bl	8000288 <__aeabi_dsub>
 800bed4:	2200      	movs	r2, #0
 800bed6:	2300      	movs	r3, #0
 800bed8:	4682      	mov	sl, r0
 800beda:	468b      	mov	fp, r1
 800bedc:	f7f4 fdf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	d0c1      	beq.n	800be68 <_strtod_l+0x8b8>
 800bee4:	e619      	b.n	800bb1a <_strtod_l+0x56a>
 800bee6:	4641      	mov	r1, r8
 800bee8:	4620      	mov	r0, r4
 800beea:	f003 f96d 	bl	800f1c8 <__ratio>
 800beee:	ec57 6b10 	vmov	r6, r7, d0
 800bef2:	2200      	movs	r2, #0
 800bef4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bef8:	4630      	mov	r0, r6
 800befa:	4639      	mov	r1, r7
 800befc:	f7f4 fdf8 	bl	8000af0 <__aeabi_dcmple>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	d06f      	beq.n	800bfe4 <_strtod_l+0xa34>
 800bf04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d17a      	bne.n	800c000 <_strtod_l+0xa50>
 800bf0a:	f1ba 0f00 	cmp.w	sl, #0
 800bf0e:	d158      	bne.n	800bfc2 <_strtod_l+0xa12>
 800bf10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d15a      	bne.n	800bfd0 <_strtod_l+0xa20>
 800bf1a:	4b64      	ldr	r3, [pc, #400]	@ (800c0ac <_strtod_l+0xafc>)
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	4630      	mov	r0, r6
 800bf20:	4639      	mov	r1, r7
 800bf22:	f7f4 fddb 	bl	8000adc <__aeabi_dcmplt>
 800bf26:	2800      	cmp	r0, #0
 800bf28:	d159      	bne.n	800bfde <_strtod_l+0xa2e>
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	4b60      	ldr	r3, [pc, #384]	@ (800c0b0 <_strtod_l+0xb00>)
 800bf30:	2200      	movs	r2, #0
 800bf32:	f7f4 fb61 	bl	80005f8 <__aeabi_dmul>
 800bf36:	4606      	mov	r6, r0
 800bf38:	460f      	mov	r7, r1
 800bf3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bf3e:	9606      	str	r6, [sp, #24]
 800bf40:	9307      	str	r3, [sp, #28]
 800bf42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf46:	4d57      	ldr	r5, [pc, #348]	@ (800c0a4 <_strtod_l+0xaf4>)
 800bf48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf4e:	401d      	ands	r5, r3
 800bf50:	4b58      	ldr	r3, [pc, #352]	@ (800c0b4 <_strtod_l+0xb04>)
 800bf52:	429d      	cmp	r5, r3
 800bf54:	f040 80b2 	bne.w	800c0bc <_strtod_l+0xb0c>
 800bf58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bf5e:	ec4b ab10 	vmov	d0, sl, fp
 800bf62:	f003 f869 	bl	800f038 <__ulp>
 800bf66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf6a:	ec51 0b10 	vmov	r0, r1, d0
 800bf6e:	f7f4 fb43 	bl	80005f8 <__aeabi_dmul>
 800bf72:	4652      	mov	r2, sl
 800bf74:	465b      	mov	r3, fp
 800bf76:	f7f4 f989 	bl	800028c <__adddf3>
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	4949      	ldr	r1, [pc, #292]	@ (800c0a4 <_strtod_l+0xaf4>)
 800bf7e:	4a4e      	ldr	r2, [pc, #312]	@ (800c0b8 <_strtod_l+0xb08>)
 800bf80:	4019      	ands	r1, r3
 800bf82:	4291      	cmp	r1, r2
 800bf84:	4682      	mov	sl, r0
 800bf86:	d942      	bls.n	800c00e <_strtod_l+0xa5e>
 800bf88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf8a:	4b47      	ldr	r3, [pc, #284]	@ (800c0a8 <_strtod_l+0xaf8>)
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d103      	bne.n	800bf98 <_strtod_l+0x9e8>
 800bf90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf92:	3301      	adds	r3, #1
 800bf94:	f43f ad2b 	beq.w	800b9ee <_strtod_l+0x43e>
 800bf98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c0a8 <_strtod_l+0xaf8>
 800bf9c:	f04f 3aff 	mov.w	sl, #4294967295
 800bfa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfa2:	9805      	ldr	r0, [sp, #20]
 800bfa4:	f002 fd14 	bl	800e9d0 <_Bfree>
 800bfa8:	9805      	ldr	r0, [sp, #20]
 800bfaa:	4649      	mov	r1, r9
 800bfac:	f002 fd10 	bl	800e9d0 <_Bfree>
 800bfb0:	9805      	ldr	r0, [sp, #20]
 800bfb2:	4641      	mov	r1, r8
 800bfb4:	f002 fd0c 	bl	800e9d0 <_Bfree>
 800bfb8:	9805      	ldr	r0, [sp, #20]
 800bfba:	4621      	mov	r1, r4
 800bfbc:	f002 fd08 	bl	800e9d0 <_Bfree>
 800bfc0:	e618      	b.n	800bbf4 <_strtod_l+0x644>
 800bfc2:	f1ba 0f01 	cmp.w	sl, #1
 800bfc6:	d103      	bne.n	800bfd0 <_strtod_l+0xa20>
 800bfc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f43f ada5 	beq.w	800bb1a <_strtod_l+0x56a>
 800bfd0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c080 <_strtod_l+0xad0>
 800bfd4:	4f35      	ldr	r7, [pc, #212]	@ (800c0ac <_strtod_l+0xafc>)
 800bfd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bfda:	2600      	movs	r6, #0
 800bfdc:	e7b1      	b.n	800bf42 <_strtod_l+0x992>
 800bfde:	4f34      	ldr	r7, [pc, #208]	@ (800c0b0 <_strtod_l+0xb00>)
 800bfe0:	2600      	movs	r6, #0
 800bfe2:	e7aa      	b.n	800bf3a <_strtod_l+0x98a>
 800bfe4:	4b32      	ldr	r3, [pc, #200]	@ (800c0b0 <_strtod_l+0xb00>)
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	4639      	mov	r1, r7
 800bfea:	2200      	movs	r2, #0
 800bfec:	f7f4 fb04 	bl	80005f8 <__aeabi_dmul>
 800bff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bff2:	4606      	mov	r6, r0
 800bff4:	460f      	mov	r7, r1
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d09f      	beq.n	800bf3a <_strtod_l+0x98a>
 800bffa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bffe:	e7a0      	b.n	800bf42 <_strtod_l+0x992>
 800c000:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c088 <_strtod_l+0xad8>
 800c004:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c008:	ec57 6b17 	vmov	r6, r7, d7
 800c00c:	e799      	b.n	800bf42 <_strtod_l+0x992>
 800c00e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c012:	9b08      	ldr	r3, [sp, #32]
 800c014:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d1c1      	bne.n	800bfa0 <_strtod_l+0x9f0>
 800c01c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c020:	0d1b      	lsrs	r3, r3, #20
 800c022:	051b      	lsls	r3, r3, #20
 800c024:	429d      	cmp	r5, r3
 800c026:	d1bb      	bne.n	800bfa0 <_strtod_l+0x9f0>
 800c028:	4630      	mov	r0, r6
 800c02a:	4639      	mov	r1, r7
 800c02c:	f7f4 fe44 	bl	8000cb8 <__aeabi_d2lz>
 800c030:	f7f4 fab4 	bl	800059c <__aeabi_l2d>
 800c034:	4602      	mov	r2, r0
 800c036:	460b      	mov	r3, r1
 800c038:	4630      	mov	r0, r6
 800c03a:	4639      	mov	r1, r7
 800c03c:	f7f4 f924 	bl	8000288 <__aeabi_dsub>
 800c040:	460b      	mov	r3, r1
 800c042:	4602      	mov	r2, r0
 800c044:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c048:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c04c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c04e:	ea46 060a 	orr.w	r6, r6, sl
 800c052:	431e      	orrs	r6, r3
 800c054:	d06f      	beq.n	800c136 <_strtod_l+0xb86>
 800c056:	a30e      	add	r3, pc, #56	@ (adr r3, 800c090 <_strtod_l+0xae0>)
 800c058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05c:	f7f4 fd3e 	bl	8000adc <__aeabi_dcmplt>
 800c060:	2800      	cmp	r0, #0
 800c062:	f47f accf 	bne.w	800ba04 <_strtod_l+0x454>
 800c066:	a30c      	add	r3, pc, #48	@ (adr r3, 800c098 <_strtod_l+0xae8>)
 800c068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c070:	f7f4 fd52 	bl	8000b18 <__aeabi_dcmpgt>
 800c074:	2800      	cmp	r0, #0
 800c076:	d093      	beq.n	800bfa0 <_strtod_l+0x9f0>
 800c078:	e4c4      	b.n	800ba04 <_strtod_l+0x454>
 800c07a:	bf00      	nop
 800c07c:	f3af 8000 	nop.w
 800c080:	00000000 	.word	0x00000000
 800c084:	bff00000 	.word	0xbff00000
 800c088:	00000000 	.word	0x00000000
 800c08c:	3ff00000 	.word	0x3ff00000
 800c090:	94a03595 	.word	0x94a03595
 800c094:	3fdfffff 	.word	0x3fdfffff
 800c098:	35afe535 	.word	0x35afe535
 800c09c:	3fe00000 	.word	0x3fe00000
 800c0a0:	000fffff 	.word	0x000fffff
 800c0a4:	7ff00000 	.word	0x7ff00000
 800c0a8:	7fefffff 	.word	0x7fefffff
 800c0ac:	3ff00000 	.word	0x3ff00000
 800c0b0:	3fe00000 	.word	0x3fe00000
 800c0b4:	7fe00000 	.word	0x7fe00000
 800c0b8:	7c9fffff 	.word	0x7c9fffff
 800c0bc:	9b08      	ldr	r3, [sp, #32]
 800c0be:	b323      	cbz	r3, 800c10a <_strtod_l+0xb5a>
 800c0c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c0c4:	d821      	bhi.n	800c10a <_strtod_l+0xb5a>
 800c0c6:	a328      	add	r3, pc, #160	@ (adr r3, 800c168 <_strtod_l+0xbb8>)
 800c0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	4639      	mov	r1, r7
 800c0d0:	f7f4 fd0e 	bl	8000af0 <__aeabi_dcmple>
 800c0d4:	b1a0      	cbz	r0, 800c100 <_strtod_l+0xb50>
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f7f4 fd65 	bl	8000ba8 <__aeabi_d2uiz>
 800c0de:	2801      	cmp	r0, #1
 800c0e0:	bf38      	it	cc
 800c0e2:	2001      	movcc	r0, #1
 800c0e4:	f7f4 fa0e 	bl	8000504 <__aeabi_ui2d>
 800c0e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0ea:	4606      	mov	r6, r0
 800c0ec:	460f      	mov	r7, r1
 800c0ee:	b9fb      	cbnz	r3, 800c130 <_strtod_l+0xb80>
 800c0f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c0f4:	9014      	str	r0, [sp, #80]	@ 0x50
 800c0f6:	9315      	str	r3, [sp, #84]	@ 0x54
 800c0f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c0fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c100:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c102:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c106:	1b5b      	subs	r3, r3, r5
 800c108:	9311      	str	r3, [sp, #68]	@ 0x44
 800c10a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c10e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c112:	f002 ff91 	bl	800f038 <__ulp>
 800c116:	4650      	mov	r0, sl
 800c118:	ec53 2b10 	vmov	r2, r3, d0
 800c11c:	4659      	mov	r1, fp
 800c11e:	f7f4 fa6b 	bl	80005f8 <__aeabi_dmul>
 800c122:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c126:	f7f4 f8b1 	bl	800028c <__adddf3>
 800c12a:	4682      	mov	sl, r0
 800c12c:	468b      	mov	fp, r1
 800c12e:	e770      	b.n	800c012 <_strtod_l+0xa62>
 800c130:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c134:	e7e0      	b.n	800c0f8 <_strtod_l+0xb48>
 800c136:	a30e      	add	r3, pc, #56	@ (adr r3, 800c170 <_strtod_l+0xbc0>)
 800c138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13c:	f7f4 fcce 	bl	8000adc <__aeabi_dcmplt>
 800c140:	e798      	b.n	800c074 <_strtod_l+0xac4>
 800c142:	2300      	movs	r3, #0
 800c144:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c146:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c148:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c14a:	6013      	str	r3, [r2, #0]
 800c14c:	f7ff ba6d 	b.w	800b62a <_strtod_l+0x7a>
 800c150:	2a65      	cmp	r2, #101	@ 0x65
 800c152:	f43f ab66 	beq.w	800b822 <_strtod_l+0x272>
 800c156:	2a45      	cmp	r2, #69	@ 0x45
 800c158:	f43f ab63 	beq.w	800b822 <_strtod_l+0x272>
 800c15c:	2301      	movs	r3, #1
 800c15e:	f7ff bb9e 	b.w	800b89e <_strtod_l+0x2ee>
 800c162:	bf00      	nop
 800c164:	f3af 8000 	nop.w
 800c168:	ffc00000 	.word	0xffc00000
 800c16c:	41dfffff 	.word	0x41dfffff
 800c170:	94a03595 	.word	0x94a03595
 800c174:	3fcfffff 	.word	0x3fcfffff

0800c178 <_strtod_r>:
 800c178:	4b01      	ldr	r3, [pc, #4]	@ (800c180 <_strtod_r+0x8>)
 800c17a:	f7ff ba19 	b.w	800b5b0 <_strtod_l>
 800c17e:	bf00      	nop
 800c180:	200000e4 	.word	0x200000e4

0800c184 <strtod>:
 800c184:	460a      	mov	r2, r1
 800c186:	4601      	mov	r1, r0
 800c188:	4802      	ldr	r0, [pc, #8]	@ (800c194 <strtod+0x10>)
 800c18a:	4b03      	ldr	r3, [pc, #12]	@ (800c198 <strtod+0x14>)
 800c18c:	6800      	ldr	r0, [r0, #0]
 800c18e:	f7ff ba0f 	b.w	800b5b0 <_strtod_l>
 800c192:	bf00      	nop
 800c194:	20000250 	.word	0x20000250
 800c198:	200000e4 	.word	0x200000e4

0800c19c <_strtol_l.constprop.0>:
 800c19c:	2b24      	cmp	r3, #36	@ 0x24
 800c19e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a2:	4686      	mov	lr, r0
 800c1a4:	4690      	mov	r8, r2
 800c1a6:	d801      	bhi.n	800c1ac <_strtol_l.constprop.0+0x10>
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d106      	bne.n	800c1ba <_strtol_l.constprop.0+0x1e>
 800c1ac:	f001 f8ce 	bl	800d34c <__errno>
 800c1b0:	2316      	movs	r3, #22
 800c1b2:	6003      	str	r3, [r0, #0]
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ba:	4834      	ldr	r0, [pc, #208]	@ (800c28c <_strtol_l.constprop.0+0xf0>)
 800c1bc:	460d      	mov	r5, r1
 800c1be:	462a      	mov	r2, r5
 800c1c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1c4:	5d06      	ldrb	r6, [r0, r4]
 800c1c6:	f016 0608 	ands.w	r6, r6, #8
 800c1ca:	d1f8      	bne.n	800c1be <_strtol_l.constprop.0+0x22>
 800c1cc:	2c2d      	cmp	r4, #45	@ 0x2d
 800c1ce:	d12d      	bne.n	800c22c <_strtol_l.constprop.0+0x90>
 800c1d0:	782c      	ldrb	r4, [r5, #0]
 800c1d2:	2601      	movs	r6, #1
 800c1d4:	1c95      	adds	r5, r2, #2
 800c1d6:	f033 0210 	bics.w	r2, r3, #16
 800c1da:	d109      	bne.n	800c1f0 <_strtol_l.constprop.0+0x54>
 800c1dc:	2c30      	cmp	r4, #48	@ 0x30
 800c1de:	d12a      	bne.n	800c236 <_strtol_l.constprop.0+0x9a>
 800c1e0:	782a      	ldrb	r2, [r5, #0]
 800c1e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c1e6:	2a58      	cmp	r2, #88	@ 0x58
 800c1e8:	d125      	bne.n	800c236 <_strtol_l.constprop.0+0x9a>
 800c1ea:	786c      	ldrb	r4, [r5, #1]
 800c1ec:	2310      	movs	r3, #16
 800c1ee:	3502      	adds	r5, #2
 800c1f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c1f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	fbbc f9f3 	udiv	r9, ip, r3
 800c1fe:	4610      	mov	r0, r2
 800c200:	fb03 ca19 	mls	sl, r3, r9, ip
 800c204:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c208:	2f09      	cmp	r7, #9
 800c20a:	d81b      	bhi.n	800c244 <_strtol_l.constprop.0+0xa8>
 800c20c:	463c      	mov	r4, r7
 800c20e:	42a3      	cmp	r3, r4
 800c210:	dd27      	ble.n	800c262 <_strtol_l.constprop.0+0xc6>
 800c212:	1c57      	adds	r7, r2, #1
 800c214:	d007      	beq.n	800c226 <_strtol_l.constprop.0+0x8a>
 800c216:	4581      	cmp	r9, r0
 800c218:	d320      	bcc.n	800c25c <_strtol_l.constprop.0+0xc0>
 800c21a:	d101      	bne.n	800c220 <_strtol_l.constprop.0+0x84>
 800c21c:	45a2      	cmp	sl, r4
 800c21e:	db1d      	blt.n	800c25c <_strtol_l.constprop.0+0xc0>
 800c220:	fb00 4003 	mla	r0, r0, r3, r4
 800c224:	2201      	movs	r2, #1
 800c226:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c22a:	e7eb      	b.n	800c204 <_strtol_l.constprop.0+0x68>
 800c22c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c22e:	bf04      	itt	eq
 800c230:	782c      	ldrbeq	r4, [r5, #0]
 800c232:	1c95      	addeq	r5, r2, #2
 800c234:	e7cf      	b.n	800c1d6 <_strtol_l.constprop.0+0x3a>
 800c236:	2b00      	cmp	r3, #0
 800c238:	d1da      	bne.n	800c1f0 <_strtol_l.constprop.0+0x54>
 800c23a:	2c30      	cmp	r4, #48	@ 0x30
 800c23c:	bf0c      	ite	eq
 800c23e:	2308      	moveq	r3, #8
 800c240:	230a      	movne	r3, #10
 800c242:	e7d5      	b.n	800c1f0 <_strtol_l.constprop.0+0x54>
 800c244:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c248:	2f19      	cmp	r7, #25
 800c24a:	d801      	bhi.n	800c250 <_strtol_l.constprop.0+0xb4>
 800c24c:	3c37      	subs	r4, #55	@ 0x37
 800c24e:	e7de      	b.n	800c20e <_strtol_l.constprop.0+0x72>
 800c250:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c254:	2f19      	cmp	r7, #25
 800c256:	d804      	bhi.n	800c262 <_strtol_l.constprop.0+0xc6>
 800c258:	3c57      	subs	r4, #87	@ 0x57
 800c25a:	e7d8      	b.n	800c20e <_strtol_l.constprop.0+0x72>
 800c25c:	f04f 32ff 	mov.w	r2, #4294967295
 800c260:	e7e1      	b.n	800c226 <_strtol_l.constprop.0+0x8a>
 800c262:	1c53      	adds	r3, r2, #1
 800c264:	d108      	bne.n	800c278 <_strtol_l.constprop.0+0xdc>
 800c266:	2322      	movs	r3, #34	@ 0x22
 800c268:	f8ce 3000 	str.w	r3, [lr]
 800c26c:	4660      	mov	r0, ip
 800c26e:	f1b8 0f00 	cmp.w	r8, #0
 800c272:	d0a0      	beq.n	800c1b6 <_strtol_l.constprop.0+0x1a>
 800c274:	1e69      	subs	r1, r5, #1
 800c276:	e006      	b.n	800c286 <_strtol_l.constprop.0+0xea>
 800c278:	b106      	cbz	r6, 800c27c <_strtol_l.constprop.0+0xe0>
 800c27a:	4240      	negs	r0, r0
 800c27c:	f1b8 0f00 	cmp.w	r8, #0
 800c280:	d099      	beq.n	800c1b6 <_strtol_l.constprop.0+0x1a>
 800c282:	2a00      	cmp	r2, #0
 800c284:	d1f6      	bne.n	800c274 <_strtol_l.constprop.0+0xd8>
 800c286:	f8c8 1000 	str.w	r1, [r8]
 800c28a:	e794      	b.n	800c1b6 <_strtol_l.constprop.0+0x1a>
 800c28c:	08011ab1 	.word	0x08011ab1

0800c290 <_strtol_r>:
 800c290:	f7ff bf84 	b.w	800c19c <_strtol_l.constprop.0>

0800c294 <strtol>:
 800c294:	4613      	mov	r3, r2
 800c296:	460a      	mov	r2, r1
 800c298:	4601      	mov	r1, r0
 800c29a:	4802      	ldr	r0, [pc, #8]	@ (800c2a4 <strtol+0x10>)
 800c29c:	6800      	ldr	r0, [r0, #0]
 800c29e:	f7ff bf7d 	b.w	800c19c <_strtol_l.constprop.0>
 800c2a2:	bf00      	nop
 800c2a4:	20000250 	.word	0x20000250

0800c2a8 <__cvt>:
 800c2a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2ac:	ec57 6b10 	vmov	r6, r7, d0
 800c2b0:	2f00      	cmp	r7, #0
 800c2b2:	460c      	mov	r4, r1
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	463b      	mov	r3, r7
 800c2b8:	bfbb      	ittet	lt
 800c2ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c2be:	461f      	movlt	r7, r3
 800c2c0:	2300      	movge	r3, #0
 800c2c2:	232d      	movlt	r3, #45	@ 0x2d
 800c2c4:	700b      	strb	r3, [r1, #0]
 800c2c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c2cc:	4691      	mov	r9, r2
 800c2ce:	f023 0820 	bic.w	r8, r3, #32
 800c2d2:	bfbc      	itt	lt
 800c2d4:	4632      	movlt	r2, r6
 800c2d6:	4616      	movlt	r6, r2
 800c2d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c2dc:	d005      	beq.n	800c2ea <__cvt+0x42>
 800c2de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c2e2:	d100      	bne.n	800c2e6 <__cvt+0x3e>
 800c2e4:	3401      	adds	r4, #1
 800c2e6:	2102      	movs	r1, #2
 800c2e8:	e000      	b.n	800c2ec <__cvt+0x44>
 800c2ea:	2103      	movs	r1, #3
 800c2ec:	ab03      	add	r3, sp, #12
 800c2ee:	9301      	str	r3, [sp, #4]
 800c2f0:	ab02      	add	r3, sp, #8
 800c2f2:	9300      	str	r3, [sp, #0]
 800c2f4:	ec47 6b10 	vmov	d0, r6, r7
 800c2f8:	4653      	mov	r3, sl
 800c2fa:	4622      	mov	r2, r4
 800c2fc:	f001 f918 	bl	800d530 <_dtoa_r>
 800c300:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c304:	4605      	mov	r5, r0
 800c306:	d119      	bne.n	800c33c <__cvt+0x94>
 800c308:	f019 0f01 	tst.w	r9, #1
 800c30c:	d00e      	beq.n	800c32c <__cvt+0x84>
 800c30e:	eb00 0904 	add.w	r9, r0, r4
 800c312:	2200      	movs	r2, #0
 800c314:	2300      	movs	r3, #0
 800c316:	4630      	mov	r0, r6
 800c318:	4639      	mov	r1, r7
 800c31a:	f7f4 fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c31e:	b108      	cbz	r0, 800c324 <__cvt+0x7c>
 800c320:	f8cd 900c 	str.w	r9, [sp, #12]
 800c324:	2230      	movs	r2, #48	@ 0x30
 800c326:	9b03      	ldr	r3, [sp, #12]
 800c328:	454b      	cmp	r3, r9
 800c32a:	d31e      	bcc.n	800c36a <__cvt+0xc2>
 800c32c:	9b03      	ldr	r3, [sp, #12]
 800c32e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c330:	1b5b      	subs	r3, r3, r5
 800c332:	4628      	mov	r0, r5
 800c334:	6013      	str	r3, [r2, #0]
 800c336:	b004      	add	sp, #16
 800c338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c33c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c340:	eb00 0904 	add.w	r9, r0, r4
 800c344:	d1e5      	bne.n	800c312 <__cvt+0x6a>
 800c346:	7803      	ldrb	r3, [r0, #0]
 800c348:	2b30      	cmp	r3, #48	@ 0x30
 800c34a:	d10a      	bne.n	800c362 <__cvt+0xba>
 800c34c:	2200      	movs	r2, #0
 800c34e:	2300      	movs	r3, #0
 800c350:	4630      	mov	r0, r6
 800c352:	4639      	mov	r1, r7
 800c354:	f7f4 fbb8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c358:	b918      	cbnz	r0, 800c362 <__cvt+0xba>
 800c35a:	f1c4 0401 	rsb	r4, r4, #1
 800c35e:	f8ca 4000 	str.w	r4, [sl]
 800c362:	f8da 3000 	ldr.w	r3, [sl]
 800c366:	4499      	add	r9, r3
 800c368:	e7d3      	b.n	800c312 <__cvt+0x6a>
 800c36a:	1c59      	adds	r1, r3, #1
 800c36c:	9103      	str	r1, [sp, #12]
 800c36e:	701a      	strb	r2, [r3, #0]
 800c370:	e7d9      	b.n	800c326 <__cvt+0x7e>

0800c372 <__exponent>:
 800c372:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c374:	2900      	cmp	r1, #0
 800c376:	bfba      	itte	lt
 800c378:	4249      	neglt	r1, r1
 800c37a:	232d      	movlt	r3, #45	@ 0x2d
 800c37c:	232b      	movge	r3, #43	@ 0x2b
 800c37e:	2909      	cmp	r1, #9
 800c380:	7002      	strb	r2, [r0, #0]
 800c382:	7043      	strb	r3, [r0, #1]
 800c384:	dd29      	ble.n	800c3da <__exponent+0x68>
 800c386:	f10d 0307 	add.w	r3, sp, #7
 800c38a:	461d      	mov	r5, r3
 800c38c:	270a      	movs	r7, #10
 800c38e:	461a      	mov	r2, r3
 800c390:	fbb1 f6f7 	udiv	r6, r1, r7
 800c394:	fb07 1416 	mls	r4, r7, r6, r1
 800c398:	3430      	adds	r4, #48	@ 0x30
 800c39a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c39e:	460c      	mov	r4, r1
 800c3a0:	2c63      	cmp	r4, #99	@ 0x63
 800c3a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c3a6:	4631      	mov	r1, r6
 800c3a8:	dcf1      	bgt.n	800c38e <__exponent+0x1c>
 800c3aa:	3130      	adds	r1, #48	@ 0x30
 800c3ac:	1e94      	subs	r4, r2, #2
 800c3ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c3b2:	1c41      	adds	r1, r0, #1
 800c3b4:	4623      	mov	r3, r4
 800c3b6:	42ab      	cmp	r3, r5
 800c3b8:	d30a      	bcc.n	800c3d0 <__exponent+0x5e>
 800c3ba:	f10d 0309 	add.w	r3, sp, #9
 800c3be:	1a9b      	subs	r3, r3, r2
 800c3c0:	42ac      	cmp	r4, r5
 800c3c2:	bf88      	it	hi
 800c3c4:	2300      	movhi	r3, #0
 800c3c6:	3302      	adds	r3, #2
 800c3c8:	4403      	add	r3, r0
 800c3ca:	1a18      	subs	r0, r3, r0
 800c3cc:	b003      	add	sp, #12
 800c3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c3d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c3d8:	e7ed      	b.n	800c3b6 <__exponent+0x44>
 800c3da:	2330      	movs	r3, #48	@ 0x30
 800c3dc:	3130      	adds	r1, #48	@ 0x30
 800c3de:	7083      	strb	r3, [r0, #2]
 800c3e0:	70c1      	strb	r1, [r0, #3]
 800c3e2:	1d03      	adds	r3, r0, #4
 800c3e4:	e7f1      	b.n	800c3ca <__exponent+0x58>
	...

0800c3e8 <_printf_float>:
 800c3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	b08d      	sub	sp, #52	@ 0x34
 800c3ee:	460c      	mov	r4, r1
 800c3f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c3f4:	4616      	mov	r6, r2
 800c3f6:	461f      	mov	r7, r3
 800c3f8:	4605      	mov	r5, r0
 800c3fa:	f000 ff5d 	bl	800d2b8 <_localeconv_r>
 800c3fe:	6803      	ldr	r3, [r0, #0]
 800c400:	9304      	str	r3, [sp, #16]
 800c402:	4618      	mov	r0, r3
 800c404:	f7f3 ff34 	bl	8000270 <strlen>
 800c408:	2300      	movs	r3, #0
 800c40a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c40c:	f8d8 3000 	ldr.w	r3, [r8]
 800c410:	9005      	str	r0, [sp, #20]
 800c412:	3307      	adds	r3, #7
 800c414:	f023 0307 	bic.w	r3, r3, #7
 800c418:	f103 0208 	add.w	r2, r3, #8
 800c41c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c420:	f8d4 b000 	ldr.w	fp, [r4]
 800c424:	f8c8 2000 	str.w	r2, [r8]
 800c428:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c42c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c430:	9307      	str	r3, [sp, #28]
 800c432:	f8cd 8018 	str.w	r8, [sp, #24]
 800c436:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c43a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c43e:	4b9c      	ldr	r3, [pc, #624]	@ (800c6b0 <_printf_float+0x2c8>)
 800c440:	f04f 32ff 	mov.w	r2, #4294967295
 800c444:	f7f4 fb72 	bl	8000b2c <__aeabi_dcmpun>
 800c448:	bb70      	cbnz	r0, 800c4a8 <_printf_float+0xc0>
 800c44a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c44e:	4b98      	ldr	r3, [pc, #608]	@ (800c6b0 <_printf_float+0x2c8>)
 800c450:	f04f 32ff 	mov.w	r2, #4294967295
 800c454:	f7f4 fb4c 	bl	8000af0 <__aeabi_dcmple>
 800c458:	bb30      	cbnz	r0, 800c4a8 <_printf_float+0xc0>
 800c45a:	2200      	movs	r2, #0
 800c45c:	2300      	movs	r3, #0
 800c45e:	4640      	mov	r0, r8
 800c460:	4649      	mov	r1, r9
 800c462:	f7f4 fb3b 	bl	8000adc <__aeabi_dcmplt>
 800c466:	b110      	cbz	r0, 800c46e <_printf_float+0x86>
 800c468:	232d      	movs	r3, #45	@ 0x2d
 800c46a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c46e:	4a91      	ldr	r2, [pc, #580]	@ (800c6b4 <_printf_float+0x2cc>)
 800c470:	4b91      	ldr	r3, [pc, #580]	@ (800c6b8 <_printf_float+0x2d0>)
 800c472:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c476:	bf94      	ite	ls
 800c478:	4690      	movls	r8, r2
 800c47a:	4698      	movhi	r8, r3
 800c47c:	2303      	movs	r3, #3
 800c47e:	6123      	str	r3, [r4, #16]
 800c480:	f02b 0304 	bic.w	r3, fp, #4
 800c484:	6023      	str	r3, [r4, #0]
 800c486:	f04f 0900 	mov.w	r9, #0
 800c48a:	9700      	str	r7, [sp, #0]
 800c48c:	4633      	mov	r3, r6
 800c48e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c490:	4621      	mov	r1, r4
 800c492:	4628      	mov	r0, r5
 800c494:	f000 f9d2 	bl	800c83c <_printf_common>
 800c498:	3001      	adds	r0, #1
 800c49a:	f040 808d 	bne.w	800c5b8 <_printf_float+0x1d0>
 800c49e:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a2:	b00d      	add	sp, #52	@ 0x34
 800c4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a8:	4642      	mov	r2, r8
 800c4aa:	464b      	mov	r3, r9
 800c4ac:	4640      	mov	r0, r8
 800c4ae:	4649      	mov	r1, r9
 800c4b0:	f7f4 fb3c 	bl	8000b2c <__aeabi_dcmpun>
 800c4b4:	b140      	cbz	r0, 800c4c8 <_printf_float+0xe0>
 800c4b6:	464b      	mov	r3, r9
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	bfbc      	itt	lt
 800c4bc:	232d      	movlt	r3, #45	@ 0x2d
 800c4be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c4c2:	4a7e      	ldr	r2, [pc, #504]	@ (800c6bc <_printf_float+0x2d4>)
 800c4c4:	4b7e      	ldr	r3, [pc, #504]	@ (800c6c0 <_printf_float+0x2d8>)
 800c4c6:	e7d4      	b.n	800c472 <_printf_float+0x8a>
 800c4c8:	6863      	ldr	r3, [r4, #4]
 800c4ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c4ce:	9206      	str	r2, [sp, #24]
 800c4d0:	1c5a      	adds	r2, r3, #1
 800c4d2:	d13b      	bne.n	800c54c <_printf_float+0x164>
 800c4d4:	2306      	movs	r3, #6
 800c4d6:	6063      	str	r3, [r4, #4]
 800c4d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c4dc:	2300      	movs	r3, #0
 800c4de:	6022      	str	r2, [r4, #0]
 800c4e0:	9303      	str	r3, [sp, #12]
 800c4e2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c4e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c4e8:	ab09      	add	r3, sp, #36	@ 0x24
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	6861      	ldr	r1, [r4, #4]
 800c4ee:	ec49 8b10 	vmov	d0, r8, r9
 800c4f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	f7ff fed6 	bl	800c2a8 <__cvt>
 800c4fc:	9b06      	ldr	r3, [sp, #24]
 800c4fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c500:	2b47      	cmp	r3, #71	@ 0x47
 800c502:	4680      	mov	r8, r0
 800c504:	d129      	bne.n	800c55a <_printf_float+0x172>
 800c506:	1cc8      	adds	r0, r1, #3
 800c508:	db02      	blt.n	800c510 <_printf_float+0x128>
 800c50a:	6863      	ldr	r3, [r4, #4]
 800c50c:	4299      	cmp	r1, r3
 800c50e:	dd41      	ble.n	800c594 <_printf_float+0x1ac>
 800c510:	f1aa 0a02 	sub.w	sl, sl, #2
 800c514:	fa5f fa8a 	uxtb.w	sl, sl
 800c518:	3901      	subs	r1, #1
 800c51a:	4652      	mov	r2, sl
 800c51c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c520:	9109      	str	r1, [sp, #36]	@ 0x24
 800c522:	f7ff ff26 	bl	800c372 <__exponent>
 800c526:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c528:	1813      	adds	r3, r2, r0
 800c52a:	2a01      	cmp	r2, #1
 800c52c:	4681      	mov	r9, r0
 800c52e:	6123      	str	r3, [r4, #16]
 800c530:	dc02      	bgt.n	800c538 <_printf_float+0x150>
 800c532:	6822      	ldr	r2, [r4, #0]
 800c534:	07d2      	lsls	r2, r2, #31
 800c536:	d501      	bpl.n	800c53c <_printf_float+0x154>
 800c538:	3301      	adds	r3, #1
 800c53a:	6123      	str	r3, [r4, #16]
 800c53c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c540:	2b00      	cmp	r3, #0
 800c542:	d0a2      	beq.n	800c48a <_printf_float+0xa2>
 800c544:	232d      	movs	r3, #45	@ 0x2d
 800c546:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c54a:	e79e      	b.n	800c48a <_printf_float+0xa2>
 800c54c:	9a06      	ldr	r2, [sp, #24]
 800c54e:	2a47      	cmp	r2, #71	@ 0x47
 800c550:	d1c2      	bne.n	800c4d8 <_printf_float+0xf0>
 800c552:	2b00      	cmp	r3, #0
 800c554:	d1c0      	bne.n	800c4d8 <_printf_float+0xf0>
 800c556:	2301      	movs	r3, #1
 800c558:	e7bd      	b.n	800c4d6 <_printf_float+0xee>
 800c55a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c55e:	d9db      	bls.n	800c518 <_printf_float+0x130>
 800c560:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c564:	d118      	bne.n	800c598 <_printf_float+0x1b0>
 800c566:	2900      	cmp	r1, #0
 800c568:	6863      	ldr	r3, [r4, #4]
 800c56a:	dd0b      	ble.n	800c584 <_printf_float+0x19c>
 800c56c:	6121      	str	r1, [r4, #16]
 800c56e:	b913      	cbnz	r3, 800c576 <_printf_float+0x18e>
 800c570:	6822      	ldr	r2, [r4, #0]
 800c572:	07d0      	lsls	r0, r2, #31
 800c574:	d502      	bpl.n	800c57c <_printf_float+0x194>
 800c576:	3301      	adds	r3, #1
 800c578:	440b      	add	r3, r1
 800c57a:	6123      	str	r3, [r4, #16]
 800c57c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c57e:	f04f 0900 	mov.w	r9, #0
 800c582:	e7db      	b.n	800c53c <_printf_float+0x154>
 800c584:	b913      	cbnz	r3, 800c58c <_printf_float+0x1a4>
 800c586:	6822      	ldr	r2, [r4, #0]
 800c588:	07d2      	lsls	r2, r2, #31
 800c58a:	d501      	bpl.n	800c590 <_printf_float+0x1a8>
 800c58c:	3302      	adds	r3, #2
 800c58e:	e7f4      	b.n	800c57a <_printf_float+0x192>
 800c590:	2301      	movs	r3, #1
 800c592:	e7f2      	b.n	800c57a <_printf_float+0x192>
 800c594:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c59a:	4299      	cmp	r1, r3
 800c59c:	db05      	blt.n	800c5aa <_printf_float+0x1c2>
 800c59e:	6823      	ldr	r3, [r4, #0]
 800c5a0:	6121      	str	r1, [r4, #16]
 800c5a2:	07d8      	lsls	r0, r3, #31
 800c5a4:	d5ea      	bpl.n	800c57c <_printf_float+0x194>
 800c5a6:	1c4b      	adds	r3, r1, #1
 800c5a8:	e7e7      	b.n	800c57a <_printf_float+0x192>
 800c5aa:	2900      	cmp	r1, #0
 800c5ac:	bfd4      	ite	le
 800c5ae:	f1c1 0202 	rsble	r2, r1, #2
 800c5b2:	2201      	movgt	r2, #1
 800c5b4:	4413      	add	r3, r2
 800c5b6:	e7e0      	b.n	800c57a <_printf_float+0x192>
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	055a      	lsls	r2, r3, #21
 800c5bc:	d407      	bmi.n	800c5ce <_printf_float+0x1e6>
 800c5be:	6923      	ldr	r3, [r4, #16]
 800c5c0:	4642      	mov	r2, r8
 800c5c2:	4631      	mov	r1, r6
 800c5c4:	4628      	mov	r0, r5
 800c5c6:	47b8      	blx	r7
 800c5c8:	3001      	adds	r0, #1
 800c5ca:	d12b      	bne.n	800c624 <_printf_float+0x23c>
 800c5cc:	e767      	b.n	800c49e <_printf_float+0xb6>
 800c5ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c5d2:	f240 80dd 	bls.w	800c790 <_printf_float+0x3a8>
 800c5d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c5da:	2200      	movs	r2, #0
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f7f4 fa73 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	d033      	beq.n	800c64e <_printf_float+0x266>
 800c5e6:	4a37      	ldr	r2, [pc, #220]	@ (800c6c4 <_printf_float+0x2dc>)
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	4631      	mov	r1, r6
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	47b8      	blx	r7
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	f43f af54 	beq.w	800c49e <_printf_float+0xb6>
 800c5f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c5fa:	4543      	cmp	r3, r8
 800c5fc:	db02      	blt.n	800c604 <_printf_float+0x21c>
 800c5fe:	6823      	ldr	r3, [r4, #0]
 800c600:	07d8      	lsls	r0, r3, #31
 800c602:	d50f      	bpl.n	800c624 <_printf_float+0x23c>
 800c604:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c608:	4631      	mov	r1, r6
 800c60a:	4628      	mov	r0, r5
 800c60c:	47b8      	blx	r7
 800c60e:	3001      	adds	r0, #1
 800c610:	f43f af45 	beq.w	800c49e <_printf_float+0xb6>
 800c614:	f04f 0900 	mov.w	r9, #0
 800c618:	f108 38ff 	add.w	r8, r8, #4294967295
 800c61c:	f104 0a1a 	add.w	sl, r4, #26
 800c620:	45c8      	cmp	r8, r9
 800c622:	dc09      	bgt.n	800c638 <_printf_float+0x250>
 800c624:	6823      	ldr	r3, [r4, #0]
 800c626:	079b      	lsls	r3, r3, #30
 800c628:	f100 8103 	bmi.w	800c832 <_printf_float+0x44a>
 800c62c:	68e0      	ldr	r0, [r4, #12]
 800c62e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c630:	4298      	cmp	r0, r3
 800c632:	bfb8      	it	lt
 800c634:	4618      	movlt	r0, r3
 800c636:	e734      	b.n	800c4a2 <_printf_float+0xba>
 800c638:	2301      	movs	r3, #1
 800c63a:	4652      	mov	r2, sl
 800c63c:	4631      	mov	r1, r6
 800c63e:	4628      	mov	r0, r5
 800c640:	47b8      	blx	r7
 800c642:	3001      	adds	r0, #1
 800c644:	f43f af2b 	beq.w	800c49e <_printf_float+0xb6>
 800c648:	f109 0901 	add.w	r9, r9, #1
 800c64c:	e7e8      	b.n	800c620 <_printf_float+0x238>
 800c64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c650:	2b00      	cmp	r3, #0
 800c652:	dc39      	bgt.n	800c6c8 <_printf_float+0x2e0>
 800c654:	4a1b      	ldr	r2, [pc, #108]	@ (800c6c4 <_printf_float+0x2dc>)
 800c656:	2301      	movs	r3, #1
 800c658:	4631      	mov	r1, r6
 800c65a:	4628      	mov	r0, r5
 800c65c:	47b8      	blx	r7
 800c65e:	3001      	adds	r0, #1
 800c660:	f43f af1d 	beq.w	800c49e <_printf_float+0xb6>
 800c664:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c668:	ea59 0303 	orrs.w	r3, r9, r3
 800c66c:	d102      	bne.n	800c674 <_printf_float+0x28c>
 800c66e:	6823      	ldr	r3, [r4, #0]
 800c670:	07d9      	lsls	r1, r3, #31
 800c672:	d5d7      	bpl.n	800c624 <_printf_float+0x23c>
 800c674:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c678:	4631      	mov	r1, r6
 800c67a:	4628      	mov	r0, r5
 800c67c:	47b8      	blx	r7
 800c67e:	3001      	adds	r0, #1
 800c680:	f43f af0d 	beq.w	800c49e <_printf_float+0xb6>
 800c684:	f04f 0a00 	mov.w	sl, #0
 800c688:	f104 0b1a 	add.w	fp, r4, #26
 800c68c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c68e:	425b      	negs	r3, r3
 800c690:	4553      	cmp	r3, sl
 800c692:	dc01      	bgt.n	800c698 <_printf_float+0x2b0>
 800c694:	464b      	mov	r3, r9
 800c696:	e793      	b.n	800c5c0 <_printf_float+0x1d8>
 800c698:	2301      	movs	r3, #1
 800c69a:	465a      	mov	r2, fp
 800c69c:	4631      	mov	r1, r6
 800c69e:	4628      	mov	r0, r5
 800c6a0:	47b8      	blx	r7
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	f43f aefb 	beq.w	800c49e <_printf_float+0xb6>
 800c6a8:	f10a 0a01 	add.w	sl, sl, #1
 800c6ac:	e7ee      	b.n	800c68c <_printf_float+0x2a4>
 800c6ae:	bf00      	nop
 800c6b0:	7fefffff 	.word	0x7fefffff
 800c6b4:	08011bb1 	.word	0x08011bb1
 800c6b8:	08011bb5 	.word	0x08011bb5
 800c6bc:	08011bb9 	.word	0x08011bb9
 800c6c0:	08011bbd 	.word	0x08011bbd
 800c6c4:	08011bc1 	.word	0x08011bc1
 800c6c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c6ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c6ce:	4553      	cmp	r3, sl
 800c6d0:	bfa8      	it	ge
 800c6d2:	4653      	movge	r3, sl
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	4699      	mov	r9, r3
 800c6d8:	dc36      	bgt.n	800c748 <_printf_float+0x360>
 800c6da:	f04f 0b00 	mov.w	fp, #0
 800c6de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6e2:	f104 021a 	add.w	r2, r4, #26
 800c6e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c6e8:	9306      	str	r3, [sp, #24]
 800c6ea:	eba3 0309 	sub.w	r3, r3, r9
 800c6ee:	455b      	cmp	r3, fp
 800c6f0:	dc31      	bgt.n	800c756 <_printf_float+0x36e>
 800c6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6f4:	459a      	cmp	sl, r3
 800c6f6:	dc3a      	bgt.n	800c76e <_printf_float+0x386>
 800c6f8:	6823      	ldr	r3, [r4, #0]
 800c6fa:	07da      	lsls	r2, r3, #31
 800c6fc:	d437      	bmi.n	800c76e <_printf_float+0x386>
 800c6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c700:	ebaa 0903 	sub.w	r9, sl, r3
 800c704:	9b06      	ldr	r3, [sp, #24]
 800c706:	ebaa 0303 	sub.w	r3, sl, r3
 800c70a:	4599      	cmp	r9, r3
 800c70c:	bfa8      	it	ge
 800c70e:	4699      	movge	r9, r3
 800c710:	f1b9 0f00 	cmp.w	r9, #0
 800c714:	dc33      	bgt.n	800c77e <_printf_float+0x396>
 800c716:	f04f 0800 	mov.w	r8, #0
 800c71a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c71e:	f104 0b1a 	add.w	fp, r4, #26
 800c722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c724:	ebaa 0303 	sub.w	r3, sl, r3
 800c728:	eba3 0309 	sub.w	r3, r3, r9
 800c72c:	4543      	cmp	r3, r8
 800c72e:	f77f af79 	ble.w	800c624 <_printf_float+0x23c>
 800c732:	2301      	movs	r3, #1
 800c734:	465a      	mov	r2, fp
 800c736:	4631      	mov	r1, r6
 800c738:	4628      	mov	r0, r5
 800c73a:	47b8      	blx	r7
 800c73c:	3001      	adds	r0, #1
 800c73e:	f43f aeae 	beq.w	800c49e <_printf_float+0xb6>
 800c742:	f108 0801 	add.w	r8, r8, #1
 800c746:	e7ec      	b.n	800c722 <_printf_float+0x33a>
 800c748:	4642      	mov	r2, r8
 800c74a:	4631      	mov	r1, r6
 800c74c:	4628      	mov	r0, r5
 800c74e:	47b8      	blx	r7
 800c750:	3001      	adds	r0, #1
 800c752:	d1c2      	bne.n	800c6da <_printf_float+0x2f2>
 800c754:	e6a3      	b.n	800c49e <_printf_float+0xb6>
 800c756:	2301      	movs	r3, #1
 800c758:	4631      	mov	r1, r6
 800c75a:	4628      	mov	r0, r5
 800c75c:	9206      	str	r2, [sp, #24]
 800c75e:	47b8      	blx	r7
 800c760:	3001      	adds	r0, #1
 800c762:	f43f ae9c 	beq.w	800c49e <_printf_float+0xb6>
 800c766:	9a06      	ldr	r2, [sp, #24]
 800c768:	f10b 0b01 	add.w	fp, fp, #1
 800c76c:	e7bb      	b.n	800c6e6 <_printf_float+0x2fe>
 800c76e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c772:	4631      	mov	r1, r6
 800c774:	4628      	mov	r0, r5
 800c776:	47b8      	blx	r7
 800c778:	3001      	adds	r0, #1
 800c77a:	d1c0      	bne.n	800c6fe <_printf_float+0x316>
 800c77c:	e68f      	b.n	800c49e <_printf_float+0xb6>
 800c77e:	9a06      	ldr	r2, [sp, #24]
 800c780:	464b      	mov	r3, r9
 800c782:	4442      	add	r2, r8
 800c784:	4631      	mov	r1, r6
 800c786:	4628      	mov	r0, r5
 800c788:	47b8      	blx	r7
 800c78a:	3001      	adds	r0, #1
 800c78c:	d1c3      	bne.n	800c716 <_printf_float+0x32e>
 800c78e:	e686      	b.n	800c49e <_printf_float+0xb6>
 800c790:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c794:	f1ba 0f01 	cmp.w	sl, #1
 800c798:	dc01      	bgt.n	800c79e <_printf_float+0x3b6>
 800c79a:	07db      	lsls	r3, r3, #31
 800c79c:	d536      	bpl.n	800c80c <_printf_float+0x424>
 800c79e:	2301      	movs	r3, #1
 800c7a0:	4642      	mov	r2, r8
 800c7a2:	4631      	mov	r1, r6
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	47b8      	blx	r7
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	f43f ae78 	beq.w	800c49e <_printf_float+0xb6>
 800c7ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7b2:	4631      	mov	r1, r6
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	47b8      	blx	r7
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	f43f ae70 	beq.w	800c49e <_printf_float+0xb6>
 800c7be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7ca:	f7f4 f97d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7ce:	b9c0      	cbnz	r0, 800c802 <_printf_float+0x41a>
 800c7d0:	4653      	mov	r3, sl
 800c7d2:	f108 0201 	add.w	r2, r8, #1
 800c7d6:	4631      	mov	r1, r6
 800c7d8:	4628      	mov	r0, r5
 800c7da:	47b8      	blx	r7
 800c7dc:	3001      	adds	r0, #1
 800c7de:	d10c      	bne.n	800c7fa <_printf_float+0x412>
 800c7e0:	e65d      	b.n	800c49e <_printf_float+0xb6>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	465a      	mov	r2, fp
 800c7e6:	4631      	mov	r1, r6
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	47b8      	blx	r7
 800c7ec:	3001      	adds	r0, #1
 800c7ee:	f43f ae56 	beq.w	800c49e <_printf_float+0xb6>
 800c7f2:	f108 0801 	add.w	r8, r8, #1
 800c7f6:	45d0      	cmp	r8, sl
 800c7f8:	dbf3      	blt.n	800c7e2 <_printf_float+0x3fa>
 800c7fa:	464b      	mov	r3, r9
 800c7fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c800:	e6df      	b.n	800c5c2 <_printf_float+0x1da>
 800c802:	f04f 0800 	mov.w	r8, #0
 800c806:	f104 0b1a 	add.w	fp, r4, #26
 800c80a:	e7f4      	b.n	800c7f6 <_printf_float+0x40e>
 800c80c:	2301      	movs	r3, #1
 800c80e:	4642      	mov	r2, r8
 800c810:	e7e1      	b.n	800c7d6 <_printf_float+0x3ee>
 800c812:	2301      	movs	r3, #1
 800c814:	464a      	mov	r2, r9
 800c816:	4631      	mov	r1, r6
 800c818:	4628      	mov	r0, r5
 800c81a:	47b8      	blx	r7
 800c81c:	3001      	adds	r0, #1
 800c81e:	f43f ae3e 	beq.w	800c49e <_printf_float+0xb6>
 800c822:	f108 0801 	add.w	r8, r8, #1
 800c826:	68e3      	ldr	r3, [r4, #12]
 800c828:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c82a:	1a5b      	subs	r3, r3, r1
 800c82c:	4543      	cmp	r3, r8
 800c82e:	dcf0      	bgt.n	800c812 <_printf_float+0x42a>
 800c830:	e6fc      	b.n	800c62c <_printf_float+0x244>
 800c832:	f04f 0800 	mov.w	r8, #0
 800c836:	f104 0919 	add.w	r9, r4, #25
 800c83a:	e7f4      	b.n	800c826 <_printf_float+0x43e>

0800c83c <_printf_common>:
 800c83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c840:	4616      	mov	r6, r2
 800c842:	4698      	mov	r8, r3
 800c844:	688a      	ldr	r2, [r1, #8]
 800c846:	690b      	ldr	r3, [r1, #16]
 800c848:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c84c:	4293      	cmp	r3, r2
 800c84e:	bfb8      	it	lt
 800c850:	4613      	movlt	r3, r2
 800c852:	6033      	str	r3, [r6, #0]
 800c854:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c858:	4607      	mov	r7, r0
 800c85a:	460c      	mov	r4, r1
 800c85c:	b10a      	cbz	r2, 800c862 <_printf_common+0x26>
 800c85e:	3301      	adds	r3, #1
 800c860:	6033      	str	r3, [r6, #0]
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	0699      	lsls	r1, r3, #26
 800c866:	bf42      	ittt	mi
 800c868:	6833      	ldrmi	r3, [r6, #0]
 800c86a:	3302      	addmi	r3, #2
 800c86c:	6033      	strmi	r3, [r6, #0]
 800c86e:	6825      	ldr	r5, [r4, #0]
 800c870:	f015 0506 	ands.w	r5, r5, #6
 800c874:	d106      	bne.n	800c884 <_printf_common+0x48>
 800c876:	f104 0a19 	add.w	sl, r4, #25
 800c87a:	68e3      	ldr	r3, [r4, #12]
 800c87c:	6832      	ldr	r2, [r6, #0]
 800c87e:	1a9b      	subs	r3, r3, r2
 800c880:	42ab      	cmp	r3, r5
 800c882:	dc26      	bgt.n	800c8d2 <_printf_common+0x96>
 800c884:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c888:	6822      	ldr	r2, [r4, #0]
 800c88a:	3b00      	subs	r3, #0
 800c88c:	bf18      	it	ne
 800c88e:	2301      	movne	r3, #1
 800c890:	0692      	lsls	r2, r2, #26
 800c892:	d42b      	bmi.n	800c8ec <_printf_common+0xb0>
 800c894:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c898:	4641      	mov	r1, r8
 800c89a:	4638      	mov	r0, r7
 800c89c:	47c8      	blx	r9
 800c89e:	3001      	adds	r0, #1
 800c8a0:	d01e      	beq.n	800c8e0 <_printf_common+0xa4>
 800c8a2:	6823      	ldr	r3, [r4, #0]
 800c8a4:	6922      	ldr	r2, [r4, #16]
 800c8a6:	f003 0306 	and.w	r3, r3, #6
 800c8aa:	2b04      	cmp	r3, #4
 800c8ac:	bf02      	ittt	eq
 800c8ae:	68e5      	ldreq	r5, [r4, #12]
 800c8b0:	6833      	ldreq	r3, [r6, #0]
 800c8b2:	1aed      	subeq	r5, r5, r3
 800c8b4:	68a3      	ldr	r3, [r4, #8]
 800c8b6:	bf0c      	ite	eq
 800c8b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8bc:	2500      	movne	r5, #0
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	bfc4      	itt	gt
 800c8c2:	1a9b      	subgt	r3, r3, r2
 800c8c4:	18ed      	addgt	r5, r5, r3
 800c8c6:	2600      	movs	r6, #0
 800c8c8:	341a      	adds	r4, #26
 800c8ca:	42b5      	cmp	r5, r6
 800c8cc:	d11a      	bne.n	800c904 <_printf_common+0xc8>
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	e008      	b.n	800c8e4 <_printf_common+0xa8>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	4652      	mov	r2, sl
 800c8d6:	4641      	mov	r1, r8
 800c8d8:	4638      	mov	r0, r7
 800c8da:	47c8      	blx	r9
 800c8dc:	3001      	adds	r0, #1
 800c8de:	d103      	bne.n	800c8e8 <_printf_common+0xac>
 800c8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8e8:	3501      	adds	r5, #1
 800c8ea:	e7c6      	b.n	800c87a <_printf_common+0x3e>
 800c8ec:	18e1      	adds	r1, r4, r3
 800c8ee:	1c5a      	adds	r2, r3, #1
 800c8f0:	2030      	movs	r0, #48	@ 0x30
 800c8f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c8f6:	4422      	add	r2, r4
 800c8f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c8fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c900:	3302      	adds	r3, #2
 800c902:	e7c7      	b.n	800c894 <_printf_common+0x58>
 800c904:	2301      	movs	r3, #1
 800c906:	4622      	mov	r2, r4
 800c908:	4641      	mov	r1, r8
 800c90a:	4638      	mov	r0, r7
 800c90c:	47c8      	blx	r9
 800c90e:	3001      	adds	r0, #1
 800c910:	d0e6      	beq.n	800c8e0 <_printf_common+0xa4>
 800c912:	3601      	adds	r6, #1
 800c914:	e7d9      	b.n	800c8ca <_printf_common+0x8e>
	...

0800c918 <_printf_i>:
 800c918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c91c:	7e0f      	ldrb	r7, [r1, #24]
 800c91e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c920:	2f78      	cmp	r7, #120	@ 0x78
 800c922:	4691      	mov	r9, r2
 800c924:	4680      	mov	r8, r0
 800c926:	460c      	mov	r4, r1
 800c928:	469a      	mov	sl, r3
 800c92a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c92e:	d807      	bhi.n	800c940 <_printf_i+0x28>
 800c930:	2f62      	cmp	r7, #98	@ 0x62
 800c932:	d80a      	bhi.n	800c94a <_printf_i+0x32>
 800c934:	2f00      	cmp	r7, #0
 800c936:	f000 80d2 	beq.w	800cade <_printf_i+0x1c6>
 800c93a:	2f58      	cmp	r7, #88	@ 0x58
 800c93c:	f000 80b9 	beq.w	800cab2 <_printf_i+0x19a>
 800c940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c944:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c948:	e03a      	b.n	800c9c0 <_printf_i+0xa8>
 800c94a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c94e:	2b15      	cmp	r3, #21
 800c950:	d8f6      	bhi.n	800c940 <_printf_i+0x28>
 800c952:	a101      	add	r1, pc, #4	@ (adr r1, 800c958 <_printf_i+0x40>)
 800c954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c958:	0800c9b1 	.word	0x0800c9b1
 800c95c:	0800c9c5 	.word	0x0800c9c5
 800c960:	0800c941 	.word	0x0800c941
 800c964:	0800c941 	.word	0x0800c941
 800c968:	0800c941 	.word	0x0800c941
 800c96c:	0800c941 	.word	0x0800c941
 800c970:	0800c9c5 	.word	0x0800c9c5
 800c974:	0800c941 	.word	0x0800c941
 800c978:	0800c941 	.word	0x0800c941
 800c97c:	0800c941 	.word	0x0800c941
 800c980:	0800c941 	.word	0x0800c941
 800c984:	0800cac5 	.word	0x0800cac5
 800c988:	0800c9ef 	.word	0x0800c9ef
 800c98c:	0800ca7f 	.word	0x0800ca7f
 800c990:	0800c941 	.word	0x0800c941
 800c994:	0800c941 	.word	0x0800c941
 800c998:	0800cae7 	.word	0x0800cae7
 800c99c:	0800c941 	.word	0x0800c941
 800c9a0:	0800c9ef 	.word	0x0800c9ef
 800c9a4:	0800c941 	.word	0x0800c941
 800c9a8:	0800c941 	.word	0x0800c941
 800c9ac:	0800ca87 	.word	0x0800ca87
 800c9b0:	6833      	ldr	r3, [r6, #0]
 800c9b2:	1d1a      	adds	r2, r3, #4
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	6032      	str	r2, [r6, #0]
 800c9b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c9bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	e09d      	b.n	800cb00 <_printf_i+0x1e8>
 800c9c4:	6833      	ldr	r3, [r6, #0]
 800c9c6:	6820      	ldr	r0, [r4, #0]
 800c9c8:	1d19      	adds	r1, r3, #4
 800c9ca:	6031      	str	r1, [r6, #0]
 800c9cc:	0606      	lsls	r6, r0, #24
 800c9ce:	d501      	bpl.n	800c9d4 <_printf_i+0xbc>
 800c9d0:	681d      	ldr	r5, [r3, #0]
 800c9d2:	e003      	b.n	800c9dc <_printf_i+0xc4>
 800c9d4:	0645      	lsls	r5, r0, #25
 800c9d6:	d5fb      	bpl.n	800c9d0 <_printf_i+0xb8>
 800c9d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c9dc:	2d00      	cmp	r5, #0
 800c9de:	da03      	bge.n	800c9e8 <_printf_i+0xd0>
 800c9e0:	232d      	movs	r3, #45	@ 0x2d
 800c9e2:	426d      	negs	r5, r5
 800c9e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9e8:	4859      	ldr	r0, [pc, #356]	@ (800cb50 <_printf_i+0x238>)
 800c9ea:	230a      	movs	r3, #10
 800c9ec:	e011      	b.n	800ca12 <_printf_i+0xfa>
 800c9ee:	6821      	ldr	r1, [r4, #0]
 800c9f0:	6833      	ldr	r3, [r6, #0]
 800c9f2:	0608      	lsls	r0, r1, #24
 800c9f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c9f8:	d402      	bmi.n	800ca00 <_printf_i+0xe8>
 800c9fa:	0649      	lsls	r1, r1, #25
 800c9fc:	bf48      	it	mi
 800c9fe:	b2ad      	uxthmi	r5, r5
 800ca00:	2f6f      	cmp	r7, #111	@ 0x6f
 800ca02:	4853      	ldr	r0, [pc, #332]	@ (800cb50 <_printf_i+0x238>)
 800ca04:	6033      	str	r3, [r6, #0]
 800ca06:	bf14      	ite	ne
 800ca08:	230a      	movne	r3, #10
 800ca0a:	2308      	moveq	r3, #8
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ca12:	6866      	ldr	r6, [r4, #4]
 800ca14:	60a6      	str	r6, [r4, #8]
 800ca16:	2e00      	cmp	r6, #0
 800ca18:	bfa2      	ittt	ge
 800ca1a:	6821      	ldrge	r1, [r4, #0]
 800ca1c:	f021 0104 	bicge.w	r1, r1, #4
 800ca20:	6021      	strge	r1, [r4, #0]
 800ca22:	b90d      	cbnz	r5, 800ca28 <_printf_i+0x110>
 800ca24:	2e00      	cmp	r6, #0
 800ca26:	d04b      	beq.n	800cac0 <_printf_i+0x1a8>
 800ca28:	4616      	mov	r6, r2
 800ca2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca2e:	fb03 5711 	mls	r7, r3, r1, r5
 800ca32:	5dc7      	ldrb	r7, [r0, r7]
 800ca34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca38:	462f      	mov	r7, r5
 800ca3a:	42bb      	cmp	r3, r7
 800ca3c:	460d      	mov	r5, r1
 800ca3e:	d9f4      	bls.n	800ca2a <_printf_i+0x112>
 800ca40:	2b08      	cmp	r3, #8
 800ca42:	d10b      	bne.n	800ca5c <_printf_i+0x144>
 800ca44:	6823      	ldr	r3, [r4, #0]
 800ca46:	07df      	lsls	r7, r3, #31
 800ca48:	d508      	bpl.n	800ca5c <_printf_i+0x144>
 800ca4a:	6923      	ldr	r3, [r4, #16]
 800ca4c:	6861      	ldr	r1, [r4, #4]
 800ca4e:	4299      	cmp	r1, r3
 800ca50:	bfde      	ittt	le
 800ca52:	2330      	movle	r3, #48	@ 0x30
 800ca54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca5c:	1b92      	subs	r2, r2, r6
 800ca5e:	6122      	str	r2, [r4, #16]
 800ca60:	f8cd a000 	str.w	sl, [sp]
 800ca64:	464b      	mov	r3, r9
 800ca66:	aa03      	add	r2, sp, #12
 800ca68:	4621      	mov	r1, r4
 800ca6a:	4640      	mov	r0, r8
 800ca6c:	f7ff fee6 	bl	800c83c <_printf_common>
 800ca70:	3001      	adds	r0, #1
 800ca72:	d14a      	bne.n	800cb0a <_printf_i+0x1f2>
 800ca74:	f04f 30ff 	mov.w	r0, #4294967295
 800ca78:	b004      	add	sp, #16
 800ca7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca7e:	6823      	ldr	r3, [r4, #0]
 800ca80:	f043 0320 	orr.w	r3, r3, #32
 800ca84:	6023      	str	r3, [r4, #0]
 800ca86:	4833      	ldr	r0, [pc, #204]	@ (800cb54 <_printf_i+0x23c>)
 800ca88:	2778      	movs	r7, #120	@ 0x78
 800ca8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ca8e:	6823      	ldr	r3, [r4, #0]
 800ca90:	6831      	ldr	r1, [r6, #0]
 800ca92:	061f      	lsls	r7, r3, #24
 800ca94:	f851 5b04 	ldr.w	r5, [r1], #4
 800ca98:	d402      	bmi.n	800caa0 <_printf_i+0x188>
 800ca9a:	065f      	lsls	r7, r3, #25
 800ca9c:	bf48      	it	mi
 800ca9e:	b2ad      	uxthmi	r5, r5
 800caa0:	6031      	str	r1, [r6, #0]
 800caa2:	07d9      	lsls	r1, r3, #31
 800caa4:	bf44      	itt	mi
 800caa6:	f043 0320 	orrmi.w	r3, r3, #32
 800caaa:	6023      	strmi	r3, [r4, #0]
 800caac:	b11d      	cbz	r5, 800cab6 <_printf_i+0x19e>
 800caae:	2310      	movs	r3, #16
 800cab0:	e7ac      	b.n	800ca0c <_printf_i+0xf4>
 800cab2:	4827      	ldr	r0, [pc, #156]	@ (800cb50 <_printf_i+0x238>)
 800cab4:	e7e9      	b.n	800ca8a <_printf_i+0x172>
 800cab6:	6823      	ldr	r3, [r4, #0]
 800cab8:	f023 0320 	bic.w	r3, r3, #32
 800cabc:	6023      	str	r3, [r4, #0]
 800cabe:	e7f6      	b.n	800caae <_printf_i+0x196>
 800cac0:	4616      	mov	r6, r2
 800cac2:	e7bd      	b.n	800ca40 <_printf_i+0x128>
 800cac4:	6833      	ldr	r3, [r6, #0]
 800cac6:	6825      	ldr	r5, [r4, #0]
 800cac8:	6961      	ldr	r1, [r4, #20]
 800caca:	1d18      	adds	r0, r3, #4
 800cacc:	6030      	str	r0, [r6, #0]
 800cace:	062e      	lsls	r6, r5, #24
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	d501      	bpl.n	800cad8 <_printf_i+0x1c0>
 800cad4:	6019      	str	r1, [r3, #0]
 800cad6:	e002      	b.n	800cade <_printf_i+0x1c6>
 800cad8:	0668      	lsls	r0, r5, #25
 800cada:	d5fb      	bpl.n	800cad4 <_printf_i+0x1bc>
 800cadc:	8019      	strh	r1, [r3, #0]
 800cade:	2300      	movs	r3, #0
 800cae0:	6123      	str	r3, [r4, #16]
 800cae2:	4616      	mov	r6, r2
 800cae4:	e7bc      	b.n	800ca60 <_printf_i+0x148>
 800cae6:	6833      	ldr	r3, [r6, #0]
 800cae8:	1d1a      	adds	r2, r3, #4
 800caea:	6032      	str	r2, [r6, #0]
 800caec:	681e      	ldr	r6, [r3, #0]
 800caee:	6862      	ldr	r2, [r4, #4]
 800caf0:	2100      	movs	r1, #0
 800caf2:	4630      	mov	r0, r6
 800caf4:	f7f3 fb6c 	bl	80001d0 <memchr>
 800caf8:	b108      	cbz	r0, 800cafe <_printf_i+0x1e6>
 800cafa:	1b80      	subs	r0, r0, r6
 800cafc:	6060      	str	r0, [r4, #4]
 800cafe:	6863      	ldr	r3, [r4, #4]
 800cb00:	6123      	str	r3, [r4, #16]
 800cb02:	2300      	movs	r3, #0
 800cb04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb08:	e7aa      	b.n	800ca60 <_printf_i+0x148>
 800cb0a:	6923      	ldr	r3, [r4, #16]
 800cb0c:	4632      	mov	r2, r6
 800cb0e:	4649      	mov	r1, r9
 800cb10:	4640      	mov	r0, r8
 800cb12:	47d0      	blx	sl
 800cb14:	3001      	adds	r0, #1
 800cb16:	d0ad      	beq.n	800ca74 <_printf_i+0x15c>
 800cb18:	6823      	ldr	r3, [r4, #0]
 800cb1a:	079b      	lsls	r3, r3, #30
 800cb1c:	d413      	bmi.n	800cb46 <_printf_i+0x22e>
 800cb1e:	68e0      	ldr	r0, [r4, #12]
 800cb20:	9b03      	ldr	r3, [sp, #12]
 800cb22:	4298      	cmp	r0, r3
 800cb24:	bfb8      	it	lt
 800cb26:	4618      	movlt	r0, r3
 800cb28:	e7a6      	b.n	800ca78 <_printf_i+0x160>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	4632      	mov	r2, r6
 800cb2e:	4649      	mov	r1, r9
 800cb30:	4640      	mov	r0, r8
 800cb32:	47d0      	blx	sl
 800cb34:	3001      	adds	r0, #1
 800cb36:	d09d      	beq.n	800ca74 <_printf_i+0x15c>
 800cb38:	3501      	adds	r5, #1
 800cb3a:	68e3      	ldr	r3, [r4, #12]
 800cb3c:	9903      	ldr	r1, [sp, #12]
 800cb3e:	1a5b      	subs	r3, r3, r1
 800cb40:	42ab      	cmp	r3, r5
 800cb42:	dcf2      	bgt.n	800cb2a <_printf_i+0x212>
 800cb44:	e7eb      	b.n	800cb1e <_printf_i+0x206>
 800cb46:	2500      	movs	r5, #0
 800cb48:	f104 0619 	add.w	r6, r4, #25
 800cb4c:	e7f5      	b.n	800cb3a <_printf_i+0x222>
 800cb4e:	bf00      	nop
 800cb50:	08011bc3 	.word	0x08011bc3
 800cb54:	08011bd4 	.word	0x08011bd4

0800cb58 <_scanf_float>:
 800cb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5c:	b087      	sub	sp, #28
 800cb5e:	4617      	mov	r7, r2
 800cb60:	9303      	str	r3, [sp, #12]
 800cb62:	688b      	ldr	r3, [r1, #8]
 800cb64:	1e5a      	subs	r2, r3, #1
 800cb66:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cb6a:	bf81      	itttt	hi
 800cb6c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cb70:	eb03 0b05 	addhi.w	fp, r3, r5
 800cb74:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cb78:	608b      	strhi	r3, [r1, #8]
 800cb7a:	680b      	ldr	r3, [r1, #0]
 800cb7c:	460a      	mov	r2, r1
 800cb7e:	f04f 0500 	mov.w	r5, #0
 800cb82:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cb86:	f842 3b1c 	str.w	r3, [r2], #28
 800cb8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cb8e:	4680      	mov	r8, r0
 800cb90:	460c      	mov	r4, r1
 800cb92:	bf98      	it	ls
 800cb94:	f04f 0b00 	movls.w	fp, #0
 800cb98:	9201      	str	r2, [sp, #4]
 800cb9a:	4616      	mov	r6, r2
 800cb9c:	46aa      	mov	sl, r5
 800cb9e:	46a9      	mov	r9, r5
 800cba0:	9502      	str	r5, [sp, #8]
 800cba2:	68a2      	ldr	r2, [r4, #8]
 800cba4:	b152      	cbz	r2, 800cbbc <_scanf_float+0x64>
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	2b4e      	cmp	r3, #78	@ 0x4e
 800cbac:	d864      	bhi.n	800cc78 <_scanf_float+0x120>
 800cbae:	2b40      	cmp	r3, #64	@ 0x40
 800cbb0:	d83c      	bhi.n	800cc2c <_scanf_float+0xd4>
 800cbb2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cbb6:	b2c8      	uxtb	r0, r1
 800cbb8:	280e      	cmp	r0, #14
 800cbba:	d93a      	bls.n	800cc32 <_scanf_float+0xda>
 800cbbc:	f1b9 0f00 	cmp.w	r9, #0
 800cbc0:	d003      	beq.n	800cbca <_scanf_float+0x72>
 800cbc2:	6823      	ldr	r3, [r4, #0]
 800cbc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cbc8:	6023      	str	r3, [r4, #0]
 800cbca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cbce:	f1ba 0f01 	cmp.w	sl, #1
 800cbd2:	f200 8117 	bhi.w	800ce04 <_scanf_float+0x2ac>
 800cbd6:	9b01      	ldr	r3, [sp, #4]
 800cbd8:	429e      	cmp	r6, r3
 800cbda:	f200 8108 	bhi.w	800cdee <_scanf_float+0x296>
 800cbde:	2001      	movs	r0, #1
 800cbe0:	b007      	add	sp, #28
 800cbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cbea:	2a0d      	cmp	r2, #13
 800cbec:	d8e6      	bhi.n	800cbbc <_scanf_float+0x64>
 800cbee:	a101      	add	r1, pc, #4	@ (adr r1, 800cbf4 <_scanf_float+0x9c>)
 800cbf0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cbf4:	0800cd3b 	.word	0x0800cd3b
 800cbf8:	0800cbbd 	.word	0x0800cbbd
 800cbfc:	0800cbbd 	.word	0x0800cbbd
 800cc00:	0800cbbd 	.word	0x0800cbbd
 800cc04:	0800cd9b 	.word	0x0800cd9b
 800cc08:	0800cd73 	.word	0x0800cd73
 800cc0c:	0800cbbd 	.word	0x0800cbbd
 800cc10:	0800cbbd 	.word	0x0800cbbd
 800cc14:	0800cd49 	.word	0x0800cd49
 800cc18:	0800cbbd 	.word	0x0800cbbd
 800cc1c:	0800cbbd 	.word	0x0800cbbd
 800cc20:	0800cbbd 	.word	0x0800cbbd
 800cc24:	0800cbbd 	.word	0x0800cbbd
 800cc28:	0800cd01 	.word	0x0800cd01
 800cc2c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cc30:	e7db      	b.n	800cbea <_scanf_float+0x92>
 800cc32:	290e      	cmp	r1, #14
 800cc34:	d8c2      	bhi.n	800cbbc <_scanf_float+0x64>
 800cc36:	a001      	add	r0, pc, #4	@ (adr r0, 800cc3c <_scanf_float+0xe4>)
 800cc38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cc3c:	0800ccf1 	.word	0x0800ccf1
 800cc40:	0800cbbd 	.word	0x0800cbbd
 800cc44:	0800ccf1 	.word	0x0800ccf1
 800cc48:	0800cd87 	.word	0x0800cd87
 800cc4c:	0800cbbd 	.word	0x0800cbbd
 800cc50:	0800cc99 	.word	0x0800cc99
 800cc54:	0800ccd7 	.word	0x0800ccd7
 800cc58:	0800ccd7 	.word	0x0800ccd7
 800cc5c:	0800ccd7 	.word	0x0800ccd7
 800cc60:	0800ccd7 	.word	0x0800ccd7
 800cc64:	0800ccd7 	.word	0x0800ccd7
 800cc68:	0800ccd7 	.word	0x0800ccd7
 800cc6c:	0800ccd7 	.word	0x0800ccd7
 800cc70:	0800ccd7 	.word	0x0800ccd7
 800cc74:	0800ccd7 	.word	0x0800ccd7
 800cc78:	2b6e      	cmp	r3, #110	@ 0x6e
 800cc7a:	d809      	bhi.n	800cc90 <_scanf_float+0x138>
 800cc7c:	2b60      	cmp	r3, #96	@ 0x60
 800cc7e:	d8b2      	bhi.n	800cbe6 <_scanf_float+0x8e>
 800cc80:	2b54      	cmp	r3, #84	@ 0x54
 800cc82:	d07b      	beq.n	800cd7c <_scanf_float+0x224>
 800cc84:	2b59      	cmp	r3, #89	@ 0x59
 800cc86:	d199      	bne.n	800cbbc <_scanf_float+0x64>
 800cc88:	2d07      	cmp	r5, #7
 800cc8a:	d197      	bne.n	800cbbc <_scanf_float+0x64>
 800cc8c:	2508      	movs	r5, #8
 800cc8e:	e02c      	b.n	800ccea <_scanf_float+0x192>
 800cc90:	2b74      	cmp	r3, #116	@ 0x74
 800cc92:	d073      	beq.n	800cd7c <_scanf_float+0x224>
 800cc94:	2b79      	cmp	r3, #121	@ 0x79
 800cc96:	e7f6      	b.n	800cc86 <_scanf_float+0x12e>
 800cc98:	6821      	ldr	r1, [r4, #0]
 800cc9a:	05c8      	lsls	r0, r1, #23
 800cc9c:	d51b      	bpl.n	800ccd6 <_scanf_float+0x17e>
 800cc9e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cca2:	6021      	str	r1, [r4, #0]
 800cca4:	f109 0901 	add.w	r9, r9, #1
 800cca8:	f1bb 0f00 	cmp.w	fp, #0
 800ccac:	d003      	beq.n	800ccb6 <_scanf_float+0x15e>
 800ccae:	3201      	adds	r2, #1
 800ccb0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ccb4:	60a2      	str	r2, [r4, #8]
 800ccb6:	68a3      	ldr	r3, [r4, #8]
 800ccb8:	3b01      	subs	r3, #1
 800ccba:	60a3      	str	r3, [r4, #8]
 800ccbc:	6923      	ldr	r3, [r4, #16]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	6123      	str	r3, [r4, #16]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	607b      	str	r3, [r7, #4]
 800ccca:	f340 8087 	ble.w	800cddc <_scanf_float+0x284>
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	603b      	str	r3, [r7, #0]
 800ccd4:	e765      	b.n	800cba2 <_scanf_float+0x4a>
 800ccd6:	eb1a 0105 	adds.w	r1, sl, r5
 800ccda:	f47f af6f 	bne.w	800cbbc <_scanf_float+0x64>
 800ccde:	6822      	ldr	r2, [r4, #0]
 800cce0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cce4:	6022      	str	r2, [r4, #0]
 800cce6:	460d      	mov	r5, r1
 800cce8:	468a      	mov	sl, r1
 800ccea:	f806 3b01 	strb.w	r3, [r6], #1
 800ccee:	e7e2      	b.n	800ccb6 <_scanf_float+0x15e>
 800ccf0:	6822      	ldr	r2, [r4, #0]
 800ccf2:	0610      	lsls	r0, r2, #24
 800ccf4:	f57f af62 	bpl.w	800cbbc <_scanf_float+0x64>
 800ccf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ccfc:	6022      	str	r2, [r4, #0]
 800ccfe:	e7f4      	b.n	800ccea <_scanf_float+0x192>
 800cd00:	f1ba 0f00 	cmp.w	sl, #0
 800cd04:	d10e      	bne.n	800cd24 <_scanf_float+0x1cc>
 800cd06:	f1b9 0f00 	cmp.w	r9, #0
 800cd0a:	d10e      	bne.n	800cd2a <_scanf_float+0x1d2>
 800cd0c:	6822      	ldr	r2, [r4, #0]
 800cd0e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cd12:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cd16:	d108      	bne.n	800cd2a <_scanf_float+0x1d2>
 800cd18:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cd1c:	6022      	str	r2, [r4, #0]
 800cd1e:	f04f 0a01 	mov.w	sl, #1
 800cd22:	e7e2      	b.n	800ccea <_scanf_float+0x192>
 800cd24:	f1ba 0f02 	cmp.w	sl, #2
 800cd28:	d055      	beq.n	800cdd6 <_scanf_float+0x27e>
 800cd2a:	2d01      	cmp	r5, #1
 800cd2c:	d002      	beq.n	800cd34 <_scanf_float+0x1dc>
 800cd2e:	2d04      	cmp	r5, #4
 800cd30:	f47f af44 	bne.w	800cbbc <_scanf_float+0x64>
 800cd34:	3501      	adds	r5, #1
 800cd36:	b2ed      	uxtb	r5, r5
 800cd38:	e7d7      	b.n	800ccea <_scanf_float+0x192>
 800cd3a:	f1ba 0f01 	cmp.w	sl, #1
 800cd3e:	f47f af3d 	bne.w	800cbbc <_scanf_float+0x64>
 800cd42:	f04f 0a02 	mov.w	sl, #2
 800cd46:	e7d0      	b.n	800ccea <_scanf_float+0x192>
 800cd48:	b97d      	cbnz	r5, 800cd6a <_scanf_float+0x212>
 800cd4a:	f1b9 0f00 	cmp.w	r9, #0
 800cd4e:	f47f af38 	bne.w	800cbc2 <_scanf_float+0x6a>
 800cd52:	6822      	ldr	r2, [r4, #0]
 800cd54:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cd58:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cd5c:	f040 8108 	bne.w	800cf70 <_scanf_float+0x418>
 800cd60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cd64:	6022      	str	r2, [r4, #0]
 800cd66:	2501      	movs	r5, #1
 800cd68:	e7bf      	b.n	800ccea <_scanf_float+0x192>
 800cd6a:	2d03      	cmp	r5, #3
 800cd6c:	d0e2      	beq.n	800cd34 <_scanf_float+0x1dc>
 800cd6e:	2d05      	cmp	r5, #5
 800cd70:	e7de      	b.n	800cd30 <_scanf_float+0x1d8>
 800cd72:	2d02      	cmp	r5, #2
 800cd74:	f47f af22 	bne.w	800cbbc <_scanf_float+0x64>
 800cd78:	2503      	movs	r5, #3
 800cd7a:	e7b6      	b.n	800ccea <_scanf_float+0x192>
 800cd7c:	2d06      	cmp	r5, #6
 800cd7e:	f47f af1d 	bne.w	800cbbc <_scanf_float+0x64>
 800cd82:	2507      	movs	r5, #7
 800cd84:	e7b1      	b.n	800ccea <_scanf_float+0x192>
 800cd86:	6822      	ldr	r2, [r4, #0]
 800cd88:	0591      	lsls	r1, r2, #22
 800cd8a:	f57f af17 	bpl.w	800cbbc <_scanf_float+0x64>
 800cd8e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cd92:	6022      	str	r2, [r4, #0]
 800cd94:	f8cd 9008 	str.w	r9, [sp, #8]
 800cd98:	e7a7      	b.n	800ccea <_scanf_float+0x192>
 800cd9a:	6822      	ldr	r2, [r4, #0]
 800cd9c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cda0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cda4:	d006      	beq.n	800cdb4 <_scanf_float+0x25c>
 800cda6:	0550      	lsls	r0, r2, #21
 800cda8:	f57f af08 	bpl.w	800cbbc <_scanf_float+0x64>
 800cdac:	f1b9 0f00 	cmp.w	r9, #0
 800cdb0:	f000 80de 	beq.w	800cf70 <_scanf_float+0x418>
 800cdb4:	0591      	lsls	r1, r2, #22
 800cdb6:	bf58      	it	pl
 800cdb8:	9902      	ldrpl	r1, [sp, #8]
 800cdba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cdbe:	bf58      	it	pl
 800cdc0:	eba9 0101 	subpl.w	r1, r9, r1
 800cdc4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cdc8:	bf58      	it	pl
 800cdca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cdce:	6022      	str	r2, [r4, #0]
 800cdd0:	f04f 0900 	mov.w	r9, #0
 800cdd4:	e789      	b.n	800ccea <_scanf_float+0x192>
 800cdd6:	f04f 0a03 	mov.w	sl, #3
 800cdda:	e786      	b.n	800ccea <_scanf_float+0x192>
 800cddc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cde0:	4639      	mov	r1, r7
 800cde2:	4640      	mov	r0, r8
 800cde4:	4798      	blx	r3
 800cde6:	2800      	cmp	r0, #0
 800cde8:	f43f aedb 	beq.w	800cba2 <_scanf_float+0x4a>
 800cdec:	e6e6      	b.n	800cbbc <_scanf_float+0x64>
 800cdee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cdf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cdf6:	463a      	mov	r2, r7
 800cdf8:	4640      	mov	r0, r8
 800cdfa:	4798      	blx	r3
 800cdfc:	6923      	ldr	r3, [r4, #16]
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	6123      	str	r3, [r4, #16]
 800ce02:	e6e8      	b.n	800cbd6 <_scanf_float+0x7e>
 800ce04:	1e6b      	subs	r3, r5, #1
 800ce06:	2b06      	cmp	r3, #6
 800ce08:	d824      	bhi.n	800ce54 <_scanf_float+0x2fc>
 800ce0a:	2d02      	cmp	r5, #2
 800ce0c:	d836      	bhi.n	800ce7c <_scanf_float+0x324>
 800ce0e:	9b01      	ldr	r3, [sp, #4]
 800ce10:	429e      	cmp	r6, r3
 800ce12:	f67f aee4 	bls.w	800cbde <_scanf_float+0x86>
 800ce16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce1e:	463a      	mov	r2, r7
 800ce20:	4640      	mov	r0, r8
 800ce22:	4798      	blx	r3
 800ce24:	6923      	ldr	r3, [r4, #16]
 800ce26:	3b01      	subs	r3, #1
 800ce28:	6123      	str	r3, [r4, #16]
 800ce2a:	e7f0      	b.n	800ce0e <_scanf_float+0x2b6>
 800ce2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce30:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ce34:	463a      	mov	r2, r7
 800ce36:	4640      	mov	r0, r8
 800ce38:	4798      	blx	r3
 800ce3a:	6923      	ldr	r3, [r4, #16]
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	6123      	str	r3, [r4, #16]
 800ce40:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce44:	fa5f fa8a 	uxtb.w	sl, sl
 800ce48:	f1ba 0f02 	cmp.w	sl, #2
 800ce4c:	d1ee      	bne.n	800ce2c <_scanf_float+0x2d4>
 800ce4e:	3d03      	subs	r5, #3
 800ce50:	b2ed      	uxtb	r5, r5
 800ce52:	1b76      	subs	r6, r6, r5
 800ce54:	6823      	ldr	r3, [r4, #0]
 800ce56:	05da      	lsls	r2, r3, #23
 800ce58:	d530      	bpl.n	800cebc <_scanf_float+0x364>
 800ce5a:	055b      	lsls	r3, r3, #21
 800ce5c:	d511      	bpl.n	800ce82 <_scanf_float+0x32a>
 800ce5e:	9b01      	ldr	r3, [sp, #4]
 800ce60:	429e      	cmp	r6, r3
 800ce62:	f67f aebc 	bls.w	800cbde <_scanf_float+0x86>
 800ce66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce6e:	463a      	mov	r2, r7
 800ce70:	4640      	mov	r0, r8
 800ce72:	4798      	blx	r3
 800ce74:	6923      	ldr	r3, [r4, #16]
 800ce76:	3b01      	subs	r3, #1
 800ce78:	6123      	str	r3, [r4, #16]
 800ce7a:	e7f0      	b.n	800ce5e <_scanf_float+0x306>
 800ce7c:	46aa      	mov	sl, r5
 800ce7e:	46b3      	mov	fp, r6
 800ce80:	e7de      	b.n	800ce40 <_scanf_float+0x2e8>
 800ce82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ce86:	6923      	ldr	r3, [r4, #16]
 800ce88:	2965      	cmp	r1, #101	@ 0x65
 800ce8a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ce8e:	f106 35ff 	add.w	r5, r6, #4294967295
 800ce92:	6123      	str	r3, [r4, #16]
 800ce94:	d00c      	beq.n	800ceb0 <_scanf_float+0x358>
 800ce96:	2945      	cmp	r1, #69	@ 0x45
 800ce98:	d00a      	beq.n	800ceb0 <_scanf_float+0x358>
 800ce9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce9e:	463a      	mov	r2, r7
 800cea0:	4640      	mov	r0, r8
 800cea2:	4798      	blx	r3
 800cea4:	6923      	ldr	r3, [r4, #16]
 800cea6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	1eb5      	subs	r5, r6, #2
 800ceae:	6123      	str	r3, [r4, #16]
 800ceb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ceb4:	463a      	mov	r2, r7
 800ceb6:	4640      	mov	r0, r8
 800ceb8:	4798      	blx	r3
 800ceba:	462e      	mov	r6, r5
 800cebc:	6822      	ldr	r2, [r4, #0]
 800cebe:	f012 0210 	ands.w	r2, r2, #16
 800cec2:	d001      	beq.n	800cec8 <_scanf_float+0x370>
 800cec4:	2000      	movs	r0, #0
 800cec6:	e68b      	b.n	800cbe0 <_scanf_float+0x88>
 800cec8:	7032      	strb	r2, [r6, #0]
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ced0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ced4:	d11c      	bne.n	800cf10 <_scanf_float+0x3b8>
 800ced6:	9b02      	ldr	r3, [sp, #8]
 800ced8:	454b      	cmp	r3, r9
 800ceda:	eba3 0209 	sub.w	r2, r3, r9
 800cede:	d123      	bne.n	800cf28 <_scanf_float+0x3d0>
 800cee0:	9901      	ldr	r1, [sp, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	4640      	mov	r0, r8
 800cee6:	f7ff f947 	bl	800c178 <_strtod_r>
 800ceea:	9b03      	ldr	r3, [sp, #12]
 800ceec:	6821      	ldr	r1, [r4, #0]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f011 0f02 	tst.w	r1, #2
 800cef4:	ec57 6b10 	vmov	r6, r7, d0
 800cef8:	f103 0204 	add.w	r2, r3, #4
 800cefc:	d01f      	beq.n	800cf3e <_scanf_float+0x3e6>
 800cefe:	9903      	ldr	r1, [sp, #12]
 800cf00:	600a      	str	r2, [r1, #0]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	e9c3 6700 	strd	r6, r7, [r3]
 800cf08:	68e3      	ldr	r3, [r4, #12]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	60e3      	str	r3, [r4, #12]
 800cf0e:	e7d9      	b.n	800cec4 <_scanf_float+0x36c>
 800cf10:	9b04      	ldr	r3, [sp, #16]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d0e4      	beq.n	800cee0 <_scanf_float+0x388>
 800cf16:	9905      	ldr	r1, [sp, #20]
 800cf18:	230a      	movs	r3, #10
 800cf1a:	3101      	adds	r1, #1
 800cf1c:	4640      	mov	r0, r8
 800cf1e:	f7ff f9b7 	bl	800c290 <_strtol_r>
 800cf22:	9b04      	ldr	r3, [sp, #16]
 800cf24:	9e05      	ldr	r6, [sp, #20]
 800cf26:	1ac2      	subs	r2, r0, r3
 800cf28:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cf2c:	429e      	cmp	r6, r3
 800cf2e:	bf28      	it	cs
 800cf30:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cf34:	4910      	ldr	r1, [pc, #64]	@ (800cf78 <_scanf_float+0x420>)
 800cf36:	4630      	mov	r0, r6
 800cf38:	f000 f8e4 	bl	800d104 <siprintf>
 800cf3c:	e7d0      	b.n	800cee0 <_scanf_float+0x388>
 800cf3e:	f011 0f04 	tst.w	r1, #4
 800cf42:	9903      	ldr	r1, [sp, #12]
 800cf44:	600a      	str	r2, [r1, #0]
 800cf46:	d1dc      	bne.n	800cf02 <_scanf_float+0x3aa>
 800cf48:	681d      	ldr	r5, [r3, #0]
 800cf4a:	4632      	mov	r2, r6
 800cf4c:	463b      	mov	r3, r7
 800cf4e:	4630      	mov	r0, r6
 800cf50:	4639      	mov	r1, r7
 800cf52:	f7f3 fdeb 	bl	8000b2c <__aeabi_dcmpun>
 800cf56:	b128      	cbz	r0, 800cf64 <_scanf_float+0x40c>
 800cf58:	4808      	ldr	r0, [pc, #32]	@ (800cf7c <_scanf_float+0x424>)
 800cf5a:	f000 fa3d 	bl	800d3d8 <nanf>
 800cf5e:	ed85 0a00 	vstr	s0, [r5]
 800cf62:	e7d1      	b.n	800cf08 <_scanf_float+0x3b0>
 800cf64:	4630      	mov	r0, r6
 800cf66:	4639      	mov	r1, r7
 800cf68:	f7f3 fe3e 	bl	8000be8 <__aeabi_d2f>
 800cf6c:	6028      	str	r0, [r5, #0]
 800cf6e:	e7cb      	b.n	800cf08 <_scanf_float+0x3b0>
 800cf70:	f04f 0900 	mov.w	r9, #0
 800cf74:	e629      	b.n	800cbca <_scanf_float+0x72>
 800cf76:	bf00      	nop
 800cf78:	08011be5 	.word	0x08011be5
 800cf7c:	08011c9e 	.word	0x08011c9e

0800cf80 <std>:
 800cf80:	2300      	movs	r3, #0
 800cf82:	b510      	push	{r4, lr}
 800cf84:	4604      	mov	r4, r0
 800cf86:	e9c0 3300 	strd	r3, r3, [r0]
 800cf8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf8e:	6083      	str	r3, [r0, #8]
 800cf90:	8181      	strh	r1, [r0, #12]
 800cf92:	6643      	str	r3, [r0, #100]	@ 0x64
 800cf94:	81c2      	strh	r2, [r0, #14]
 800cf96:	6183      	str	r3, [r0, #24]
 800cf98:	4619      	mov	r1, r3
 800cf9a:	2208      	movs	r2, #8
 800cf9c:	305c      	adds	r0, #92	@ 0x5c
 800cf9e:	f000 f914 	bl	800d1ca <memset>
 800cfa2:	4b0d      	ldr	r3, [pc, #52]	@ (800cfd8 <std+0x58>)
 800cfa4:	6263      	str	r3, [r4, #36]	@ 0x24
 800cfa6:	4b0d      	ldr	r3, [pc, #52]	@ (800cfdc <std+0x5c>)
 800cfa8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cfaa:	4b0d      	ldr	r3, [pc, #52]	@ (800cfe0 <std+0x60>)
 800cfac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cfae:	4b0d      	ldr	r3, [pc, #52]	@ (800cfe4 <std+0x64>)
 800cfb0:	6323      	str	r3, [r4, #48]	@ 0x30
 800cfb2:	4b0d      	ldr	r3, [pc, #52]	@ (800cfe8 <std+0x68>)
 800cfb4:	6224      	str	r4, [r4, #32]
 800cfb6:	429c      	cmp	r4, r3
 800cfb8:	d006      	beq.n	800cfc8 <std+0x48>
 800cfba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cfbe:	4294      	cmp	r4, r2
 800cfc0:	d002      	beq.n	800cfc8 <std+0x48>
 800cfc2:	33d0      	adds	r3, #208	@ 0xd0
 800cfc4:	429c      	cmp	r4, r3
 800cfc6:	d105      	bne.n	800cfd4 <std+0x54>
 800cfc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cfcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfd0:	f000 b9e6 	b.w	800d3a0 <__retarget_lock_init_recursive>
 800cfd4:	bd10      	pop	{r4, pc}
 800cfd6:	bf00      	nop
 800cfd8:	0800d145 	.word	0x0800d145
 800cfdc:	0800d167 	.word	0x0800d167
 800cfe0:	0800d19f 	.word	0x0800d19f
 800cfe4:	0800d1c3 	.word	0x0800d1c3
 800cfe8:	2000074c 	.word	0x2000074c

0800cfec <stdio_exit_handler>:
 800cfec:	4a02      	ldr	r2, [pc, #8]	@ (800cff8 <stdio_exit_handler+0xc>)
 800cfee:	4903      	ldr	r1, [pc, #12]	@ (800cffc <stdio_exit_handler+0x10>)
 800cff0:	4803      	ldr	r0, [pc, #12]	@ (800d000 <stdio_exit_handler+0x14>)
 800cff2:	f000 b869 	b.w	800d0c8 <_fwalk_sglue>
 800cff6:	bf00      	nop
 800cff8:	200000d8 	.word	0x200000d8
 800cffc:	0800f685 	.word	0x0800f685
 800d000:	20000254 	.word	0x20000254

0800d004 <cleanup_stdio>:
 800d004:	6841      	ldr	r1, [r0, #4]
 800d006:	4b0c      	ldr	r3, [pc, #48]	@ (800d038 <cleanup_stdio+0x34>)
 800d008:	4299      	cmp	r1, r3
 800d00a:	b510      	push	{r4, lr}
 800d00c:	4604      	mov	r4, r0
 800d00e:	d001      	beq.n	800d014 <cleanup_stdio+0x10>
 800d010:	f002 fb38 	bl	800f684 <_fflush_r>
 800d014:	68a1      	ldr	r1, [r4, #8]
 800d016:	4b09      	ldr	r3, [pc, #36]	@ (800d03c <cleanup_stdio+0x38>)
 800d018:	4299      	cmp	r1, r3
 800d01a:	d002      	beq.n	800d022 <cleanup_stdio+0x1e>
 800d01c:	4620      	mov	r0, r4
 800d01e:	f002 fb31 	bl	800f684 <_fflush_r>
 800d022:	68e1      	ldr	r1, [r4, #12]
 800d024:	4b06      	ldr	r3, [pc, #24]	@ (800d040 <cleanup_stdio+0x3c>)
 800d026:	4299      	cmp	r1, r3
 800d028:	d004      	beq.n	800d034 <cleanup_stdio+0x30>
 800d02a:	4620      	mov	r0, r4
 800d02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d030:	f002 bb28 	b.w	800f684 <_fflush_r>
 800d034:	bd10      	pop	{r4, pc}
 800d036:	bf00      	nop
 800d038:	2000074c 	.word	0x2000074c
 800d03c:	200007b4 	.word	0x200007b4
 800d040:	2000081c 	.word	0x2000081c

0800d044 <global_stdio_init.part.0>:
 800d044:	b510      	push	{r4, lr}
 800d046:	4b0b      	ldr	r3, [pc, #44]	@ (800d074 <global_stdio_init.part.0+0x30>)
 800d048:	4c0b      	ldr	r4, [pc, #44]	@ (800d078 <global_stdio_init.part.0+0x34>)
 800d04a:	4a0c      	ldr	r2, [pc, #48]	@ (800d07c <global_stdio_init.part.0+0x38>)
 800d04c:	601a      	str	r2, [r3, #0]
 800d04e:	4620      	mov	r0, r4
 800d050:	2200      	movs	r2, #0
 800d052:	2104      	movs	r1, #4
 800d054:	f7ff ff94 	bl	800cf80 <std>
 800d058:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d05c:	2201      	movs	r2, #1
 800d05e:	2109      	movs	r1, #9
 800d060:	f7ff ff8e 	bl	800cf80 <std>
 800d064:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d068:	2202      	movs	r2, #2
 800d06a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d06e:	2112      	movs	r1, #18
 800d070:	f7ff bf86 	b.w	800cf80 <std>
 800d074:	20000884 	.word	0x20000884
 800d078:	2000074c 	.word	0x2000074c
 800d07c:	0800cfed 	.word	0x0800cfed

0800d080 <__sfp_lock_acquire>:
 800d080:	4801      	ldr	r0, [pc, #4]	@ (800d088 <__sfp_lock_acquire+0x8>)
 800d082:	f000 b98e 	b.w	800d3a2 <__retarget_lock_acquire_recursive>
 800d086:	bf00      	nop
 800d088:	2000088d 	.word	0x2000088d

0800d08c <__sfp_lock_release>:
 800d08c:	4801      	ldr	r0, [pc, #4]	@ (800d094 <__sfp_lock_release+0x8>)
 800d08e:	f000 b989 	b.w	800d3a4 <__retarget_lock_release_recursive>
 800d092:	bf00      	nop
 800d094:	2000088d 	.word	0x2000088d

0800d098 <__sinit>:
 800d098:	b510      	push	{r4, lr}
 800d09a:	4604      	mov	r4, r0
 800d09c:	f7ff fff0 	bl	800d080 <__sfp_lock_acquire>
 800d0a0:	6a23      	ldr	r3, [r4, #32]
 800d0a2:	b11b      	cbz	r3, 800d0ac <__sinit+0x14>
 800d0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0a8:	f7ff bff0 	b.w	800d08c <__sfp_lock_release>
 800d0ac:	4b04      	ldr	r3, [pc, #16]	@ (800d0c0 <__sinit+0x28>)
 800d0ae:	6223      	str	r3, [r4, #32]
 800d0b0:	4b04      	ldr	r3, [pc, #16]	@ (800d0c4 <__sinit+0x2c>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1f5      	bne.n	800d0a4 <__sinit+0xc>
 800d0b8:	f7ff ffc4 	bl	800d044 <global_stdio_init.part.0>
 800d0bc:	e7f2      	b.n	800d0a4 <__sinit+0xc>
 800d0be:	bf00      	nop
 800d0c0:	0800d005 	.word	0x0800d005
 800d0c4:	20000884 	.word	0x20000884

0800d0c8 <_fwalk_sglue>:
 800d0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0cc:	4607      	mov	r7, r0
 800d0ce:	4688      	mov	r8, r1
 800d0d0:	4614      	mov	r4, r2
 800d0d2:	2600      	movs	r6, #0
 800d0d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0d8:	f1b9 0901 	subs.w	r9, r9, #1
 800d0dc:	d505      	bpl.n	800d0ea <_fwalk_sglue+0x22>
 800d0de:	6824      	ldr	r4, [r4, #0]
 800d0e0:	2c00      	cmp	r4, #0
 800d0e2:	d1f7      	bne.n	800d0d4 <_fwalk_sglue+0xc>
 800d0e4:	4630      	mov	r0, r6
 800d0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ea:	89ab      	ldrh	r3, [r5, #12]
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d907      	bls.n	800d100 <_fwalk_sglue+0x38>
 800d0f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	d003      	beq.n	800d100 <_fwalk_sglue+0x38>
 800d0f8:	4629      	mov	r1, r5
 800d0fa:	4638      	mov	r0, r7
 800d0fc:	47c0      	blx	r8
 800d0fe:	4306      	orrs	r6, r0
 800d100:	3568      	adds	r5, #104	@ 0x68
 800d102:	e7e9      	b.n	800d0d8 <_fwalk_sglue+0x10>

0800d104 <siprintf>:
 800d104:	b40e      	push	{r1, r2, r3}
 800d106:	b500      	push	{lr}
 800d108:	b09c      	sub	sp, #112	@ 0x70
 800d10a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d10c:	9002      	str	r0, [sp, #8]
 800d10e:	9006      	str	r0, [sp, #24]
 800d110:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d114:	4809      	ldr	r0, [pc, #36]	@ (800d13c <siprintf+0x38>)
 800d116:	9107      	str	r1, [sp, #28]
 800d118:	9104      	str	r1, [sp, #16]
 800d11a:	4909      	ldr	r1, [pc, #36]	@ (800d140 <siprintf+0x3c>)
 800d11c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d120:	9105      	str	r1, [sp, #20]
 800d122:	6800      	ldr	r0, [r0, #0]
 800d124:	9301      	str	r3, [sp, #4]
 800d126:	a902      	add	r1, sp, #8
 800d128:	f002 f92c 	bl	800f384 <_svfiprintf_r>
 800d12c:	9b02      	ldr	r3, [sp, #8]
 800d12e:	2200      	movs	r2, #0
 800d130:	701a      	strb	r2, [r3, #0]
 800d132:	b01c      	add	sp, #112	@ 0x70
 800d134:	f85d eb04 	ldr.w	lr, [sp], #4
 800d138:	b003      	add	sp, #12
 800d13a:	4770      	bx	lr
 800d13c:	20000250 	.word	0x20000250
 800d140:	ffff0208 	.word	0xffff0208

0800d144 <__sread>:
 800d144:	b510      	push	{r4, lr}
 800d146:	460c      	mov	r4, r1
 800d148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d14c:	f000 f8da 	bl	800d304 <_read_r>
 800d150:	2800      	cmp	r0, #0
 800d152:	bfab      	itete	ge
 800d154:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d156:	89a3      	ldrhlt	r3, [r4, #12]
 800d158:	181b      	addge	r3, r3, r0
 800d15a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d15e:	bfac      	ite	ge
 800d160:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d162:	81a3      	strhlt	r3, [r4, #12]
 800d164:	bd10      	pop	{r4, pc}

0800d166 <__swrite>:
 800d166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d16a:	461f      	mov	r7, r3
 800d16c:	898b      	ldrh	r3, [r1, #12]
 800d16e:	05db      	lsls	r3, r3, #23
 800d170:	4605      	mov	r5, r0
 800d172:	460c      	mov	r4, r1
 800d174:	4616      	mov	r6, r2
 800d176:	d505      	bpl.n	800d184 <__swrite+0x1e>
 800d178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d17c:	2302      	movs	r3, #2
 800d17e:	2200      	movs	r2, #0
 800d180:	f000 f8ae 	bl	800d2e0 <_lseek_r>
 800d184:	89a3      	ldrh	r3, [r4, #12]
 800d186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d18a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d18e:	81a3      	strh	r3, [r4, #12]
 800d190:	4632      	mov	r2, r6
 800d192:	463b      	mov	r3, r7
 800d194:	4628      	mov	r0, r5
 800d196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d19a:	f000 b8c5 	b.w	800d328 <_write_r>

0800d19e <__sseek>:
 800d19e:	b510      	push	{r4, lr}
 800d1a0:	460c      	mov	r4, r1
 800d1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1a6:	f000 f89b 	bl	800d2e0 <_lseek_r>
 800d1aa:	1c43      	adds	r3, r0, #1
 800d1ac:	89a3      	ldrh	r3, [r4, #12]
 800d1ae:	bf15      	itete	ne
 800d1b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d1b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d1b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d1ba:	81a3      	strheq	r3, [r4, #12]
 800d1bc:	bf18      	it	ne
 800d1be:	81a3      	strhne	r3, [r4, #12]
 800d1c0:	bd10      	pop	{r4, pc}

0800d1c2 <__sclose>:
 800d1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1c6:	f000 b87b 	b.w	800d2c0 <_close_r>

0800d1ca <memset>:
 800d1ca:	4402      	add	r2, r0
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d100      	bne.n	800d1d4 <memset+0xa>
 800d1d2:	4770      	bx	lr
 800d1d4:	f803 1b01 	strb.w	r1, [r3], #1
 800d1d8:	e7f9      	b.n	800d1ce <memset+0x4>

0800d1da <strncmp>:
 800d1da:	b510      	push	{r4, lr}
 800d1dc:	b16a      	cbz	r2, 800d1fa <strncmp+0x20>
 800d1de:	3901      	subs	r1, #1
 800d1e0:	1884      	adds	r4, r0, r2
 800d1e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d103      	bne.n	800d1f6 <strncmp+0x1c>
 800d1ee:	42a0      	cmp	r0, r4
 800d1f0:	d001      	beq.n	800d1f6 <strncmp+0x1c>
 800d1f2:	2a00      	cmp	r2, #0
 800d1f4:	d1f5      	bne.n	800d1e2 <strncmp+0x8>
 800d1f6:	1ad0      	subs	r0, r2, r3
 800d1f8:	bd10      	pop	{r4, pc}
 800d1fa:	4610      	mov	r0, r2
 800d1fc:	e7fc      	b.n	800d1f8 <strncmp+0x1e>
	...

0800d200 <strtok>:
 800d200:	4b16      	ldr	r3, [pc, #88]	@ (800d25c <strtok+0x5c>)
 800d202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d206:	681f      	ldr	r7, [r3, #0]
 800d208:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800d20a:	4605      	mov	r5, r0
 800d20c:	460e      	mov	r6, r1
 800d20e:	b9ec      	cbnz	r4, 800d24c <strtok+0x4c>
 800d210:	2050      	movs	r0, #80	@ 0x50
 800d212:	f001 fad5 	bl	800e7c0 <malloc>
 800d216:	4602      	mov	r2, r0
 800d218:	6478      	str	r0, [r7, #68]	@ 0x44
 800d21a:	b920      	cbnz	r0, 800d226 <strtok+0x26>
 800d21c:	4b10      	ldr	r3, [pc, #64]	@ (800d260 <strtok+0x60>)
 800d21e:	4811      	ldr	r0, [pc, #68]	@ (800d264 <strtok+0x64>)
 800d220:	215b      	movs	r1, #91	@ 0x5b
 800d222:	f000 f8df 	bl	800d3e4 <__assert_func>
 800d226:	e9c0 4400 	strd	r4, r4, [r0]
 800d22a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d22e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d232:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800d236:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800d23a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800d23e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800d242:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800d246:	6184      	str	r4, [r0, #24]
 800d248:	7704      	strb	r4, [r0, #28]
 800d24a:	6244      	str	r4, [r0, #36]	@ 0x24
 800d24c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d24e:	4631      	mov	r1, r6
 800d250:	4628      	mov	r0, r5
 800d252:	2301      	movs	r3, #1
 800d254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d258:	f000 b806 	b.w	800d268 <__strtok_r>
 800d25c:	20000250 	.word	0x20000250
 800d260:	08011bea 	.word	0x08011bea
 800d264:	08011c01 	.word	0x08011c01

0800d268 <__strtok_r>:
 800d268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d26a:	4604      	mov	r4, r0
 800d26c:	b908      	cbnz	r0, 800d272 <__strtok_r+0xa>
 800d26e:	6814      	ldr	r4, [r2, #0]
 800d270:	b144      	cbz	r4, 800d284 <__strtok_r+0x1c>
 800d272:	4620      	mov	r0, r4
 800d274:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d278:	460f      	mov	r7, r1
 800d27a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d27e:	b91e      	cbnz	r6, 800d288 <__strtok_r+0x20>
 800d280:	b965      	cbnz	r5, 800d29c <__strtok_r+0x34>
 800d282:	6015      	str	r5, [r2, #0]
 800d284:	2000      	movs	r0, #0
 800d286:	e005      	b.n	800d294 <__strtok_r+0x2c>
 800d288:	42b5      	cmp	r5, r6
 800d28a:	d1f6      	bne.n	800d27a <__strtok_r+0x12>
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1f0      	bne.n	800d272 <__strtok_r+0xa>
 800d290:	6014      	str	r4, [r2, #0]
 800d292:	7003      	strb	r3, [r0, #0]
 800d294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d296:	461c      	mov	r4, r3
 800d298:	e00c      	b.n	800d2b4 <__strtok_r+0x4c>
 800d29a:	b915      	cbnz	r5, 800d2a2 <__strtok_r+0x3a>
 800d29c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d2a0:	460e      	mov	r6, r1
 800d2a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d2a6:	42ab      	cmp	r3, r5
 800d2a8:	d1f7      	bne.n	800d29a <__strtok_r+0x32>
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d0f3      	beq.n	800d296 <__strtok_r+0x2e>
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d2b4:	6014      	str	r4, [r2, #0]
 800d2b6:	e7ed      	b.n	800d294 <__strtok_r+0x2c>

0800d2b8 <_localeconv_r>:
 800d2b8:	4800      	ldr	r0, [pc, #0]	@ (800d2bc <_localeconv_r+0x4>)
 800d2ba:	4770      	bx	lr
 800d2bc:	200001d4 	.word	0x200001d4

0800d2c0 <_close_r>:
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	4d06      	ldr	r5, [pc, #24]	@ (800d2dc <_close_r+0x1c>)
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	4608      	mov	r0, r1
 800d2ca:	602b      	str	r3, [r5, #0]
 800d2cc:	f7fa fb70 	bl	80079b0 <_close>
 800d2d0:	1c43      	adds	r3, r0, #1
 800d2d2:	d102      	bne.n	800d2da <_close_r+0x1a>
 800d2d4:	682b      	ldr	r3, [r5, #0]
 800d2d6:	b103      	cbz	r3, 800d2da <_close_r+0x1a>
 800d2d8:	6023      	str	r3, [r4, #0]
 800d2da:	bd38      	pop	{r3, r4, r5, pc}
 800d2dc:	20000888 	.word	0x20000888

0800d2e0 <_lseek_r>:
 800d2e0:	b538      	push	{r3, r4, r5, lr}
 800d2e2:	4d07      	ldr	r5, [pc, #28]	@ (800d300 <_lseek_r+0x20>)
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	4608      	mov	r0, r1
 800d2e8:	4611      	mov	r1, r2
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	602a      	str	r2, [r5, #0]
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	f7fa fb85 	bl	80079fe <_lseek>
 800d2f4:	1c43      	adds	r3, r0, #1
 800d2f6:	d102      	bne.n	800d2fe <_lseek_r+0x1e>
 800d2f8:	682b      	ldr	r3, [r5, #0]
 800d2fa:	b103      	cbz	r3, 800d2fe <_lseek_r+0x1e>
 800d2fc:	6023      	str	r3, [r4, #0]
 800d2fe:	bd38      	pop	{r3, r4, r5, pc}
 800d300:	20000888 	.word	0x20000888

0800d304 <_read_r>:
 800d304:	b538      	push	{r3, r4, r5, lr}
 800d306:	4d07      	ldr	r5, [pc, #28]	@ (800d324 <_read_r+0x20>)
 800d308:	4604      	mov	r4, r0
 800d30a:	4608      	mov	r0, r1
 800d30c:	4611      	mov	r1, r2
 800d30e:	2200      	movs	r2, #0
 800d310:	602a      	str	r2, [r5, #0]
 800d312:	461a      	mov	r2, r3
 800d314:	f7fa fb13 	bl	800793e <_read>
 800d318:	1c43      	adds	r3, r0, #1
 800d31a:	d102      	bne.n	800d322 <_read_r+0x1e>
 800d31c:	682b      	ldr	r3, [r5, #0]
 800d31e:	b103      	cbz	r3, 800d322 <_read_r+0x1e>
 800d320:	6023      	str	r3, [r4, #0]
 800d322:	bd38      	pop	{r3, r4, r5, pc}
 800d324:	20000888 	.word	0x20000888

0800d328 <_write_r>:
 800d328:	b538      	push	{r3, r4, r5, lr}
 800d32a:	4d07      	ldr	r5, [pc, #28]	@ (800d348 <_write_r+0x20>)
 800d32c:	4604      	mov	r4, r0
 800d32e:	4608      	mov	r0, r1
 800d330:	4611      	mov	r1, r2
 800d332:	2200      	movs	r2, #0
 800d334:	602a      	str	r2, [r5, #0]
 800d336:	461a      	mov	r2, r3
 800d338:	f7fa fb1e 	bl	8007978 <_write>
 800d33c:	1c43      	adds	r3, r0, #1
 800d33e:	d102      	bne.n	800d346 <_write_r+0x1e>
 800d340:	682b      	ldr	r3, [r5, #0]
 800d342:	b103      	cbz	r3, 800d346 <_write_r+0x1e>
 800d344:	6023      	str	r3, [r4, #0]
 800d346:	bd38      	pop	{r3, r4, r5, pc}
 800d348:	20000888 	.word	0x20000888

0800d34c <__errno>:
 800d34c:	4b01      	ldr	r3, [pc, #4]	@ (800d354 <__errno+0x8>)
 800d34e:	6818      	ldr	r0, [r3, #0]
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	20000250 	.word	0x20000250

0800d358 <__libc_init_array>:
 800d358:	b570      	push	{r4, r5, r6, lr}
 800d35a:	4d0d      	ldr	r5, [pc, #52]	@ (800d390 <__libc_init_array+0x38>)
 800d35c:	4c0d      	ldr	r4, [pc, #52]	@ (800d394 <__libc_init_array+0x3c>)
 800d35e:	1b64      	subs	r4, r4, r5
 800d360:	10a4      	asrs	r4, r4, #2
 800d362:	2600      	movs	r6, #0
 800d364:	42a6      	cmp	r6, r4
 800d366:	d109      	bne.n	800d37c <__libc_init_array+0x24>
 800d368:	4d0b      	ldr	r5, [pc, #44]	@ (800d398 <__libc_init_array+0x40>)
 800d36a:	4c0c      	ldr	r4, [pc, #48]	@ (800d39c <__libc_init_array+0x44>)
 800d36c:	f004 fa70 	bl	8011850 <_init>
 800d370:	1b64      	subs	r4, r4, r5
 800d372:	10a4      	asrs	r4, r4, #2
 800d374:	2600      	movs	r6, #0
 800d376:	42a6      	cmp	r6, r4
 800d378:	d105      	bne.n	800d386 <__libc_init_array+0x2e>
 800d37a:	bd70      	pop	{r4, r5, r6, pc}
 800d37c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d380:	4798      	blx	r3
 800d382:	3601      	adds	r6, #1
 800d384:	e7ee      	b.n	800d364 <__libc_init_array+0xc>
 800d386:	f855 3b04 	ldr.w	r3, [r5], #4
 800d38a:	4798      	blx	r3
 800d38c:	3601      	adds	r6, #1
 800d38e:	e7f2      	b.n	800d376 <__libc_init_array+0x1e>
 800d390:	08012138 	.word	0x08012138
 800d394:	08012138 	.word	0x08012138
 800d398:	08012138 	.word	0x08012138
 800d39c:	0801213c 	.word	0x0801213c

0800d3a0 <__retarget_lock_init_recursive>:
 800d3a0:	4770      	bx	lr

0800d3a2 <__retarget_lock_acquire_recursive>:
 800d3a2:	4770      	bx	lr

0800d3a4 <__retarget_lock_release_recursive>:
 800d3a4:	4770      	bx	lr

0800d3a6 <memcpy>:
 800d3a6:	440a      	add	r2, r1
 800d3a8:	4291      	cmp	r1, r2
 800d3aa:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3ae:	d100      	bne.n	800d3b2 <memcpy+0xc>
 800d3b0:	4770      	bx	lr
 800d3b2:	b510      	push	{r4, lr}
 800d3b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3bc:	4291      	cmp	r1, r2
 800d3be:	d1f9      	bne.n	800d3b4 <memcpy+0xe>
 800d3c0:	bd10      	pop	{r4, pc}
 800d3c2:	0000      	movs	r0, r0
 800d3c4:	0000      	movs	r0, r0
	...

0800d3c8 <nan>:
 800d3c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d3d0 <nan+0x8>
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	00000000 	.word	0x00000000
 800d3d4:	7ff80000 	.word	0x7ff80000

0800d3d8 <nanf>:
 800d3d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d3e0 <nanf+0x8>
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop
 800d3e0:	7fc00000 	.word	0x7fc00000

0800d3e4 <__assert_func>:
 800d3e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3e6:	4614      	mov	r4, r2
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	4b09      	ldr	r3, [pc, #36]	@ (800d410 <__assert_func+0x2c>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4605      	mov	r5, r0
 800d3f0:	68d8      	ldr	r0, [r3, #12]
 800d3f2:	b954      	cbnz	r4, 800d40a <__assert_func+0x26>
 800d3f4:	4b07      	ldr	r3, [pc, #28]	@ (800d414 <__assert_func+0x30>)
 800d3f6:	461c      	mov	r4, r3
 800d3f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3fc:	9100      	str	r1, [sp, #0]
 800d3fe:	462b      	mov	r3, r5
 800d400:	4905      	ldr	r1, [pc, #20]	@ (800d418 <__assert_func+0x34>)
 800d402:	f002 f967 	bl	800f6d4 <fiprintf>
 800d406:	f002 f9a1 	bl	800f74c <abort>
 800d40a:	4b04      	ldr	r3, [pc, #16]	@ (800d41c <__assert_func+0x38>)
 800d40c:	e7f4      	b.n	800d3f8 <__assert_func+0x14>
 800d40e:	bf00      	nop
 800d410:	20000250 	.word	0x20000250
 800d414:	08011c9e 	.word	0x08011c9e
 800d418:	08011c70 	.word	0x08011c70
 800d41c:	08011c63 	.word	0x08011c63

0800d420 <quorem>:
 800d420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d424:	6903      	ldr	r3, [r0, #16]
 800d426:	690c      	ldr	r4, [r1, #16]
 800d428:	42a3      	cmp	r3, r4
 800d42a:	4607      	mov	r7, r0
 800d42c:	db7e      	blt.n	800d52c <quorem+0x10c>
 800d42e:	3c01      	subs	r4, #1
 800d430:	f101 0814 	add.w	r8, r1, #20
 800d434:	00a3      	lsls	r3, r4, #2
 800d436:	f100 0514 	add.w	r5, r0, #20
 800d43a:	9300      	str	r3, [sp, #0]
 800d43c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d440:	9301      	str	r3, [sp, #4]
 800d442:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d446:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d44a:	3301      	adds	r3, #1
 800d44c:	429a      	cmp	r2, r3
 800d44e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d452:	fbb2 f6f3 	udiv	r6, r2, r3
 800d456:	d32e      	bcc.n	800d4b6 <quorem+0x96>
 800d458:	f04f 0a00 	mov.w	sl, #0
 800d45c:	46c4      	mov	ip, r8
 800d45e:	46ae      	mov	lr, r5
 800d460:	46d3      	mov	fp, sl
 800d462:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d466:	b298      	uxth	r0, r3
 800d468:	fb06 a000 	mla	r0, r6, r0, sl
 800d46c:	0c02      	lsrs	r2, r0, #16
 800d46e:	0c1b      	lsrs	r3, r3, #16
 800d470:	fb06 2303 	mla	r3, r6, r3, r2
 800d474:	f8de 2000 	ldr.w	r2, [lr]
 800d478:	b280      	uxth	r0, r0
 800d47a:	b292      	uxth	r2, r2
 800d47c:	1a12      	subs	r2, r2, r0
 800d47e:	445a      	add	r2, fp
 800d480:	f8de 0000 	ldr.w	r0, [lr]
 800d484:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d488:	b29b      	uxth	r3, r3
 800d48a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d48e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d492:	b292      	uxth	r2, r2
 800d494:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d498:	45e1      	cmp	r9, ip
 800d49a:	f84e 2b04 	str.w	r2, [lr], #4
 800d49e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d4a2:	d2de      	bcs.n	800d462 <quorem+0x42>
 800d4a4:	9b00      	ldr	r3, [sp, #0]
 800d4a6:	58eb      	ldr	r3, [r5, r3]
 800d4a8:	b92b      	cbnz	r3, 800d4b6 <quorem+0x96>
 800d4aa:	9b01      	ldr	r3, [sp, #4]
 800d4ac:	3b04      	subs	r3, #4
 800d4ae:	429d      	cmp	r5, r3
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	d32f      	bcc.n	800d514 <quorem+0xf4>
 800d4b4:	613c      	str	r4, [r7, #16]
 800d4b6:	4638      	mov	r0, r7
 800d4b8:	f001 fd0e 	bl	800eed8 <__mcmp>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	db25      	blt.n	800d50c <quorem+0xec>
 800d4c0:	4629      	mov	r1, r5
 800d4c2:	2000      	movs	r0, #0
 800d4c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d4c8:	f8d1 c000 	ldr.w	ip, [r1]
 800d4cc:	fa1f fe82 	uxth.w	lr, r2
 800d4d0:	fa1f f38c 	uxth.w	r3, ip
 800d4d4:	eba3 030e 	sub.w	r3, r3, lr
 800d4d8:	4403      	add	r3, r0
 800d4da:	0c12      	lsrs	r2, r2, #16
 800d4dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d4e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4ea:	45c1      	cmp	r9, r8
 800d4ec:	f841 3b04 	str.w	r3, [r1], #4
 800d4f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d4f4:	d2e6      	bcs.n	800d4c4 <quorem+0xa4>
 800d4f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4fe:	b922      	cbnz	r2, 800d50a <quorem+0xea>
 800d500:	3b04      	subs	r3, #4
 800d502:	429d      	cmp	r5, r3
 800d504:	461a      	mov	r2, r3
 800d506:	d30b      	bcc.n	800d520 <quorem+0x100>
 800d508:	613c      	str	r4, [r7, #16]
 800d50a:	3601      	adds	r6, #1
 800d50c:	4630      	mov	r0, r6
 800d50e:	b003      	add	sp, #12
 800d510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d514:	6812      	ldr	r2, [r2, #0]
 800d516:	3b04      	subs	r3, #4
 800d518:	2a00      	cmp	r2, #0
 800d51a:	d1cb      	bne.n	800d4b4 <quorem+0x94>
 800d51c:	3c01      	subs	r4, #1
 800d51e:	e7c6      	b.n	800d4ae <quorem+0x8e>
 800d520:	6812      	ldr	r2, [r2, #0]
 800d522:	3b04      	subs	r3, #4
 800d524:	2a00      	cmp	r2, #0
 800d526:	d1ef      	bne.n	800d508 <quorem+0xe8>
 800d528:	3c01      	subs	r4, #1
 800d52a:	e7ea      	b.n	800d502 <quorem+0xe2>
 800d52c:	2000      	movs	r0, #0
 800d52e:	e7ee      	b.n	800d50e <quorem+0xee>

0800d530 <_dtoa_r>:
 800d530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d534:	69c7      	ldr	r7, [r0, #28]
 800d536:	b099      	sub	sp, #100	@ 0x64
 800d538:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d53c:	ec55 4b10 	vmov	r4, r5, d0
 800d540:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d542:	9109      	str	r1, [sp, #36]	@ 0x24
 800d544:	4683      	mov	fp, r0
 800d546:	920e      	str	r2, [sp, #56]	@ 0x38
 800d548:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d54a:	b97f      	cbnz	r7, 800d56c <_dtoa_r+0x3c>
 800d54c:	2010      	movs	r0, #16
 800d54e:	f001 f937 	bl	800e7c0 <malloc>
 800d552:	4602      	mov	r2, r0
 800d554:	f8cb 001c 	str.w	r0, [fp, #28]
 800d558:	b920      	cbnz	r0, 800d564 <_dtoa_r+0x34>
 800d55a:	4ba7      	ldr	r3, [pc, #668]	@ (800d7f8 <_dtoa_r+0x2c8>)
 800d55c:	21ef      	movs	r1, #239	@ 0xef
 800d55e:	48a7      	ldr	r0, [pc, #668]	@ (800d7fc <_dtoa_r+0x2cc>)
 800d560:	f7ff ff40 	bl	800d3e4 <__assert_func>
 800d564:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d568:	6007      	str	r7, [r0, #0]
 800d56a:	60c7      	str	r7, [r0, #12]
 800d56c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d570:	6819      	ldr	r1, [r3, #0]
 800d572:	b159      	cbz	r1, 800d58c <_dtoa_r+0x5c>
 800d574:	685a      	ldr	r2, [r3, #4]
 800d576:	604a      	str	r2, [r1, #4]
 800d578:	2301      	movs	r3, #1
 800d57a:	4093      	lsls	r3, r2
 800d57c:	608b      	str	r3, [r1, #8]
 800d57e:	4658      	mov	r0, fp
 800d580:	f001 fa26 	bl	800e9d0 <_Bfree>
 800d584:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d588:	2200      	movs	r2, #0
 800d58a:	601a      	str	r2, [r3, #0]
 800d58c:	1e2b      	subs	r3, r5, #0
 800d58e:	bfb9      	ittee	lt
 800d590:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d594:	9303      	strlt	r3, [sp, #12]
 800d596:	2300      	movge	r3, #0
 800d598:	6033      	strge	r3, [r6, #0]
 800d59a:	9f03      	ldr	r7, [sp, #12]
 800d59c:	4b98      	ldr	r3, [pc, #608]	@ (800d800 <_dtoa_r+0x2d0>)
 800d59e:	bfbc      	itt	lt
 800d5a0:	2201      	movlt	r2, #1
 800d5a2:	6032      	strlt	r2, [r6, #0]
 800d5a4:	43bb      	bics	r3, r7
 800d5a6:	d112      	bne.n	800d5ce <_dtoa_r+0x9e>
 800d5a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d5aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d5ae:	6013      	str	r3, [r2, #0]
 800d5b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d5b4:	4323      	orrs	r3, r4
 800d5b6:	f000 854d 	beq.w	800e054 <_dtoa_r+0xb24>
 800d5ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d5bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d814 <_dtoa_r+0x2e4>
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	f000 854f 	beq.w	800e064 <_dtoa_r+0xb34>
 800d5c6:	f10a 0303 	add.w	r3, sl, #3
 800d5ca:	f000 bd49 	b.w	800e060 <_dtoa_r+0xb30>
 800d5ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	ec51 0b17 	vmov	r0, r1, d7
 800d5d8:	2300      	movs	r3, #0
 800d5da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d5de:	f7f3 fa73 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5e2:	4680      	mov	r8, r0
 800d5e4:	b158      	cbz	r0, 800d5fe <_dtoa_r+0xce>
 800d5e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	6013      	str	r3, [r2, #0]
 800d5ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d5ee:	b113      	cbz	r3, 800d5f6 <_dtoa_r+0xc6>
 800d5f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d5f2:	4b84      	ldr	r3, [pc, #528]	@ (800d804 <_dtoa_r+0x2d4>)
 800d5f4:	6013      	str	r3, [r2, #0]
 800d5f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d818 <_dtoa_r+0x2e8>
 800d5fa:	f000 bd33 	b.w	800e064 <_dtoa_r+0xb34>
 800d5fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d602:	aa16      	add	r2, sp, #88	@ 0x58
 800d604:	a917      	add	r1, sp, #92	@ 0x5c
 800d606:	4658      	mov	r0, fp
 800d608:	f001 fd86 	bl	800f118 <__d2b>
 800d60c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d610:	4681      	mov	r9, r0
 800d612:	2e00      	cmp	r6, #0
 800d614:	d077      	beq.n	800d706 <_dtoa_r+0x1d6>
 800d616:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d618:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d61c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d620:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d624:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d628:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d62c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d630:	4619      	mov	r1, r3
 800d632:	2200      	movs	r2, #0
 800d634:	4b74      	ldr	r3, [pc, #464]	@ (800d808 <_dtoa_r+0x2d8>)
 800d636:	f7f2 fe27 	bl	8000288 <__aeabi_dsub>
 800d63a:	a369      	add	r3, pc, #420	@ (adr r3, 800d7e0 <_dtoa_r+0x2b0>)
 800d63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d640:	f7f2 ffda 	bl	80005f8 <__aeabi_dmul>
 800d644:	a368      	add	r3, pc, #416	@ (adr r3, 800d7e8 <_dtoa_r+0x2b8>)
 800d646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64a:	f7f2 fe1f 	bl	800028c <__adddf3>
 800d64e:	4604      	mov	r4, r0
 800d650:	4630      	mov	r0, r6
 800d652:	460d      	mov	r5, r1
 800d654:	f7f2 ff66 	bl	8000524 <__aeabi_i2d>
 800d658:	a365      	add	r3, pc, #404	@ (adr r3, 800d7f0 <_dtoa_r+0x2c0>)
 800d65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65e:	f7f2 ffcb 	bl	80005f8 <__aeabi_dmul>
 800d662:	4602      	mov	r2, r0
 800d664:	460b      	mov	r3, r1
 800d666:	4620      	mov	r0, r4
 800d668:	4629      	mov	r1, r5
 800d66a:	f7f2 fe0f 	bl	800028c <__adddf3>
 800d66e:	4604      	mov	r4, r0
 800d670:	460d      	mov	r5, r1
 800d672:	f7f3 fa71 	bl	8000b58 <__aeabi_d2iz>
 800d676:	2200      	movs	r2, #0
 800d678:	4607      	mov	r7, r0
 800d67a:	2300      	movs	r3, #0
 800d67c:	4620      	mov	r0, r4
 800d67e:	4629      	mov	r1, r5
 800d680:	f7f3 fa2c 	bl	8000adc <__aeabi_dcmplt>
 800d684:	b140      	cbz	r0, 800d698 <_dtoa_r+0x168>
 800d686:	4638      	mov	r0, r7
 800d688:	f7f2 ff4c 	bl	8000524 <__aeabi_i2d>
 800d68c:	4622      	mov	r2, r4
 800d68e:	462b      	mov	r3, r5
 800d690:	f7f3 fa1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d694:	b900      	cbnz	r0, 800d698 <_dtoa_r+0x168>
 800d696:	3f01      	subs	r7, #1
 800d698:	2f16      	cmp	r7, #22
 800d69a:	d851      	bhi.n	800d740 <_dtoa_r+0x210>
 800d69c:	4b5b      	ldr	r3, [pc, #364]	@ (800d80c <_dtoa_r+0x2dc>)
 800d69e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6aa:	f7f3 fa17 	bl	8000adc <__aeabi_dcmplt>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d048      	beq.n	800d744 <_dtoa_r+0x214>
 800d6b2:	3f01      	subs	r7, #1
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	9312      	str	r3, [sp, #72]	@ 0x48
 800d6b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d6ba:	1b9b      	subs	r3, r3, r6
 800d6bc:	1e5a      	subs	r2, r3, #1
 800d6be:	bf44      	itt	mi
 800d6c0:	f1c3 0801 	rsbmi	r8, r3, #1
 800d6c4:	2300      	movmi	r3, #0
 800d6c6:	9208      	str	r2, [sp, #32]
 800d6c8:	bf54      	ite	pl
 800d6ca:	f04f 0800 	movpl.w	r8, #0
 800d6ce:	9308      	strmi	r3, [sp, #32]
 800d6d0:	2f00      	cmp	r7, #0
 800d6d2:	db39      	blt.n	800d748 <_dtoa_r+0x218>
 800d6d4:	9b08      	ldr	r3, [sp, #32]
 800d6d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d6d8:	443b      	add	r3, r7
 800d6da:	9308      	str	r3, [sp, #32]
 800d6dc:	2300      	movs	r3, #0
 800d6de:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6e2:	2b09      	cmp	r3, #9
 800d6e4:	d864      	bhi.n	800d7b0 <_dtoa_r+0x280>
 800d6e6:	2b05      	cmp	r3, #5
 800d6e8:	bfc4      	itt	gt
 800d6ea:	3b04      	subgt	r3, #4
 800d6ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6f0:	f1a3 0302 	sub.w	r3, r3, #2
 800d6f4:	bfcc      	ite	gt
 800d6f6:	2400      	movgt	r4, #0
 800d6f8:	2401      	movle	r4, #1
 800d6fa:	2b03      	cmp	r3, #3
 800d6fc:	d863      	bhi.n	800d7c6 <_dtoa_r+0x296>
 800d6fe:	e8df f003 	tbb	[pc, r3]
 800d702:	372a      	.short	0x372a
 800d704:	5535      	.short	0x5535
 800d706:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d70a:	441e      	add	r6, r3
 800d70c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d710:	2b20      	cmp	r3, #32
 800d712:	bfc1      	itttt	gt
 800d714:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d718:	409f      	lslgt	r7, r3
 800d71a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d71e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d722:	bfd6      	itet	le
 800d724:	f1c3 0320 	rsble	r3, r3, #32
 800d728:	ea47 0003 	orrgt.w	r0, r7, r3
 800d72c:	fa04 f003 	lslle.w	r0, r4, r3
 800d730:	f7f2 fee8 	bl	8000504 <__aeabi_ui2d>
 800d734:	2201      	movs	r2, #1
 800d736:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d73a:	3e01      	subs	r6, #1
 800d73c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d73e:	e777      	b.n	800d630 <_dtoa_r+0x100>
 800d740:	2301      	movs	r3, #1
 800d742:	e7b8      	b.n	800d6b6 <_dtoa_r+0x186>
 800d744:	9012      	str	r0, [sp, #72]	@ 0x48
 800d746:	e7b7      	b.n	800d6b8 <_dtoa_r+0x188>
 800d748:	427b      	negs	r3, r7
 800d74a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d74c:	2300      	movs	r3, #0
 800d74e:	eba8 0807 	sub.w	r8, r8, r7
 800d752:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d754:	e7c4      	b.n	800d6e0 <_dtoa_r+0x1b0>
 800d756:	2300      	movs	r3, #0
 800d758:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d75a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	dc35      	bgt.n	800d7cc <_dtoa_r+0x29c>
 800d760:	2301      	movs	r3, #1
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	9307      	str	r3, [sp, #28]
 800d766:	461a      	mov	r2, r3
 800d768:	920e      	str	r2, [sp, #56]	@ 0x38
 800d76a:	e00b      	b.n	800d784 <_dtoa_r+0x254>
 800d76c:	2301      	movs	r3, #1
 800d76e:	e7f3      	b.n	800d758 <_dtoa_r+0x228>
 800d770:	2300      	movs	r3, #0
 800d772:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d774:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d776:	18fb      	adds	r3, r7, r3
 800d778:	9300      	str	r3, [sp, #0]
 800d77a:	3301      	adds	r3, #1
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	9307      	str	r3, [sp, #28]
 800d780:	bfb8      	it	lt
 800d782:	2301      	movlt	r3, #1
 800d784:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d788:	2100      	movs	r1, #0
 800d78a:	2204      	movs	r2, #4
 800d78c:	f102 0514 	add.w	r5, r2, #20
 800d790:	429d      	cmp	r5, r3
 800d792:	d91f      	bls.n	800d7d4 <_dtoa_r+0x2a4>
 800d794:	6041      	str	r1, [r0, #4]
 800d796:	4658      	mov	r0, fp
 800d798:	f001 f8da 	bl	800e950 <_Balloc>
 800d79c:	4682      	mov	sl, r0
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	d13c      	bne.n	800d81c <_dtoa_r+0x2ec>
 800d7a2:	4b1b      	ldr	r3, [pc, #108]	@ (800d810 <_dtoa_r+0x2e0>)
 800d7a4:	4602      	mov	r2, r0
 800d7a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d7aa:	e6d8      	b.n	800d55e <_dtoa_r+0x2e>
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	e7e0      	b.n	800d772 <_dtoa_r+0x242>
 800d7b0:	2401      	movs	r4, #1
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7bc:	9300      	str	r3, [sp, #0]
 800d7be:	9307      	str	r3, [sp, #28]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	2312      	movs	r3, #18
 800d7c4:	e7d0      	b.n	800d768 <_dtoa_r+0x238>
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7ca:	e7f5      	b.n	800d7b8 <_dtoa_r+0x288>
 800d7cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7ce:	9300      	str	r3, [sp, #0]
 800d7d0:	9307      	str	r3, [sp, #28]
 800d7d2:	e7d7      	b.n	800d784 <_dtoa_r+0x254>
 800d7d4:	3101      	adds	r1, #1
 800d7d6:	0052      	lsls	r2, r2, #1
 800d7d8:	e7d8      	b.n	800d78c <_dtoa_r+0x25c>
 800d7da:	bf00      	nop
 800d7dc:	f3af 8000 	nop.w
 800d7e0:	636f4361 	.word	0x636f4361
 800d7e4:	3fd287a7 	.word	0x3fd287a7
 800d7e8:	8b60c8b3 	.word	0x8b60c8b3
 800d7ec:	3fc68a28 	.word	0x3fc68a28
 800d7f0:	509f79fb 	.word	0x509f79fb
 800d7f4:	3fd34413 	.word	0x3fd34413
 800d7f8:	08011bea 	.word	0x08011bea
 800d7fc:	08011cac 	.word	0x08011cac
 800d800:	7ff00000 	.word	0x7ff00000
 800d804:	08011bc2 	.word	0x08011bc2
 800d808:	3ff80000 	.word	0x3ff80000
 800d80c:	08011e08 	.word	0x08011e08
 800d810:	08011d04 	.word	0x08011d04
 800d814:	08011ca8 	.word	0x08011ca8
 800d818:	08011bc1 	.word	0x08011bc1
 800d81c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d820:	6018      	str	r0, [r3, #0]
 800d822:	9b07      	ldr	r3, [sp, #28]
 800d824:	2b0e      	cmp	r3, #14
 800d826:	f200 80a4 	bhi.w	800d972 <_dtoa_r+0x442>
 800d82a:	2c00      	cmp	r4, #0
 800d82c:	f000 80a1 	beq.w	800d972 <_dtoa_r+0x442>
 800d830:	2f00      	cmp	r7, #0
 800d832:	dd33      	ble.n	800d89c <_dtoa_r+0x36c>
 800d834:	4bad      	ldr	r3, [pc, #692]	@ (800daec <_dtoa_r+0x5bc>)
 800d836:	f007 020f 	and.w	r2, r7, #15
 800d83a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d83e:	ed93 7b00 	vldr	d7, [r3]
 800d842:	05f8      	lsls	r0, r7, #23
 800d844:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d848:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d84c:	d516      	bpl.n	800d87c <_dtoa_r+0x34c>
 800d84e:	4ba8      	ldr	r3, [pc, #672]	@ (800daf0 <_dtoa_r+0x5c0>)
 800d850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d854:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d858:	f7f2 fff8 	bl	800084c <__aeabi_ddiv>
 800d85c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d860:	f004 040f 	and.w	r4, r4, #15
 800d864:	2603      	movs	r6, #3
 800d866:	4da2      	ldr	r5, [pc, #648]	@ (800daf0 <_dtoa_r+0x5c0>)
 800d868:	b954      	cbnz	r4, 800d880 <_dtoa_r+0x350>
 800d86a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d86e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d872:	f7f2 ffeb 	bl	800084c <__aeabi_ddiv>
 800d876:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d87a:	e028      	b.n	800d8ce <_dtoa_r+0x39e>
 800d87c:	2602      	movs	r6, #2
 800d87e:	e7f2      	b.n	800d866 <_dtoa_r+0x336>
 800d880:	07e1      	lsls	r1, r4, #31
 800d882:	d508      	bpl.n	800d896 <_dtoa_r+0x366>
 800d884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d888:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d88c:	f7f2 feb4 	bl	80005f8 <__aeabi_dmul>
 800d890:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d894:	3601      	adds	r6, #1
 800d896:	1064      	asrs	r4, r4, #1
 800d898:	3508      	adds	r5, #8
 800d89a:	e7e5      	b.n	800d868 <_dtoa_r+0x338>
 800d89c:	f000 80d2 	beq.w	800da44 <_dtoa_r+0x514>
 800d8a0:	427c      	negs	r4, r7
 800d8a2:	4b92      	ldr	r3, [pc, #584]	@ (800daec <_dtoa_r+0x5bc>)
 800d8a4:	4d92      	ldr	r5, [pc, #584]	@ (800daf0 <_dtoa_r+0x5c0>)
 800d8a6:	f004 020f 	and.w	r2, r4, #15
 800d8aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d8b6:	f7f2 fe9f 	bl	80005f8 <__aeabi_dmul>
 800d8ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8be:	1124      	asrs	r4, r4, #4
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	2602      	movs	r6, #2
 800d8c4:	2c00      	cmp	r4, #0
 800d8c6:	f040 80b2 	bne.w	800da2e <_dtoa_r+0x4fe>
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d1d3      	bne.n	800d876 <_dtoa_r+0x346>
 800d8ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d8d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f000 80b7 	beq.w	800da48 <_dtoa_r+0x518>
 800d8da:	4b86      	ldr	r3, [pc, #536]	@ (800daf4 <_dtoa_r+0x5c4>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	4620      	mov	r0, r4
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	f7f3 f8fb 	bl	8000adc <__aeabi_dcmplt>
 800d8e6:	2800      	cmp	r0, #0
 800d8e8:	f000 80ae 	beq.w	800da48 <_dtoa_r+0x518>
 800d8ec:	9b07      	ldr	r3, [sp, #28]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f000 80aa 	beq.w	800da48 <_dtoa_r+0x518>
 800d8f4:	9b00      	ldr	r3, [sp, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	dd37      	ble.n	800d96a <_dtoa_r+0x43a>
 800d8fa:	1e7b      	subs	r3, r7, #1
 800d8fc:	9304      	str	r3, [sp, #16]
 800d8fe:	4620      	mov	r0, r4
 800d900:	4b7d      	ldr	r3, [pc, #500]	@ (800daf8 <_dtoa_r+0x5c8>)
 800d902:	2200      	movs	r2, #0
 800d904:	4629      	mov	r1, r5
 800d906:	f7f2 fe77 	bl	80005f8 <__aeabi_dmul>
 800d90a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d90e:	9c00      	ldr	r4, [sp, #0]
 800d910:	3601      	adds	r6, #1
 800d912:	4630      	mov	r0, r6
 800d914:	f7f2 fe06 	bl	8000524 <__aeabi_i2d>
 800d918:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d91c:	f7f2 fe6c 	bl	80005f8 <__aeabi_dmul>
 800d920:	4b76      	ldr	r3, [pc, #472]	@ (800dafc <_dtoa_r+0x5cc>)
 800d922:	2200      	movs	r2, #0
 800d924:	f7f2 fcb2 	bl	800028c <__adddf3>
 800d928:	4605      	mov	r5, r0
 800d92a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d92e:	2c00      	cmp	r4, #0
 800d930:	f040 808d 	bne.w	800da4e <_dtoa_r+0x51e>
 800d934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d938:	4b71      	ldr	r3, [pc, #452]	@ (800db00 <_dtoa_r+0x5d0>)
 800d93a:	2200      	movs	r2, #0
 800d93c:	f7f2 fca4 	bl	8000288 <__aeabi_dsub>
 800d940:	4602      	mov	r2, r0
 800d942:	460b      	mov	r3, r1
 800d944:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d948:	462a      	mov	r2, r5
 800d94a:	4633      	mov	r3, r6
 800d94c:	f7f3 f8e4 	bl	8000b18 <__aeabi_dcmpgt>
 800d950:	2800      	cmp	r0, #0
 800d952:	f040 828b 	bne.w	800de6c <_dtoa_r+0x93c>
 800d956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d95a:	462a      	mov	r2, r5
 800d95c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d960:	f7f3 f8bc 	bl	8000adc <__aeabi_dcmplt>
 800d964:	2800      	cmp	r0, #0
 800d966:	f040 8128 	bne.w	800dbba <_dtoa_r+0x68a>
 800d96a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d96e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d972:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d974:	2b00      	cmp	r3, #0
 800d976:	f2c0 815a 	blt.w	800dc2e <_dtoa_r+0x6fe>
 800d97a:	2f0e      	cmp	r7, #14
 800d97c:	f300 8157 	bgt.w	800dc2e <_dtoa_r+0x6fe>
 800d980:	4b5a      	ldr	r3, [pc, #360]	@ (800daec <_dtoa_r+0x5bc>)
 800d982:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d986:	ed93 7b00 	vldr	d7, [r3]
 800d98a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	ed8d 7b00 	vstr	d7, [sp]
 800d992:	da03      	bge.n	800d99c <_dtoa_r+0x46c>
 800d994:	9b07      	ldr	r3, [sp, #28]
 800d996:	2b00      	cmp	r3, #0
 800d998:	f340 8101 	ble.w	800db9e <_dtoa_r+0x66e>
 800d99c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d9a0:	4656      	mov	r6, sl
 800d9a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9a6:	4620      	mov	r0, r4
 800d9a8:	4629      	mov	r1, r5
 800d9aa:	f7f2 ff4f 	bl	800084c <__aeabi_ddiv>
 800d9ae:	f7f3 f8d3 	bl	8000b58 <__aeabi_d2iz>
 800d9b2:	4680      	mov	r8, r0
 800d9b4:	f7f2 fdb6 	bl	8000524 <__aeabi_i2d>
 800d9b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9bc:	f7f2 fe1c 	bl	80005f8 <__aeabi_dmul>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d9cc:	f7f2 fc5c 	bl	8000288 <__aeabi_dsub>
 800d9d0:	f806 4b01 	strb.w	r4, [r6], #1
 800d9d4:	9d07      	ldr	r5, [sp, #28]
 800d9d6:	eba6 040a 	sub.w	r4, r6, sl
 800d9da:	42a5      	cmp	r5, r4
 800d9dc:	4602      	mov	r2, r0
 800d9de:	460b      	mov	r3, r1
 800d9e0:	f040 8117 	bne.w	800dc12 <_dtoa_r+0x6e2>
 800d9e4:	f7f2 fc52 	bl	800028c <__adddf3>
 800d9e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9ec:	4604      	mov	r4, r0
 800d9ee:	460d      	mov	r5, r1
 800d9f0:	f7f3 f892 	bl	8000b18 <__aeabi_dcmpgt>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	f040 80f9 	bne.w	800dbec <_dtoa_r+0x6bc>
 800d9fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9fe:	4620      	mov	r0, r4
 800da00:	4629      	mov	r1, r5
 800da02:	f7f3 f861 	bl	8000ac8 <__aeabi_dcmpeq>
 800da06:	b118      	cbz	r0, 800da10 <_dtoa_r+0x4e0>
 800da08:	f018 0f01 	tst.w	r8, #1
 800da0c:	f040 80ee 	bne.w	800dbec <_dtoa_r+0x6bc>
 800da10:	4649      	mov	r1, r9
 800da12:	4658      	mov	r0, fp
 800da14:	f000 ffdc 	bl	800e9d0 <_Bfree>
 800da18:	2300      	movs	r3, #0
 800da1a:	7033      	strb	r3, [r6, #0]
 800da1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800da1e:	3701      	adds	r7, #1
 800da20:	601f      	str	r7, [r3, #0]
 800da22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800da24:	2b00      	cmp	r3, #0
 800da26:	f000 831d 	beq.w	800e064 <_dtoa_r+0xb34>
 800da2a:	601e      	str	r6, [r3, #0]
 800da2c:	e31a      	b.n	800e064 <_dtoa_r+0xb34>
 800da2e:	07e2      	lsls	r2, r4, #31
 800da30:	d505      	bpl.n	800da3e <_dtoa_r+0x50e>
 800da32:	e9d5 2300 	ldrd	r2, r3, [r5]
 800da36:	f7f2 fddf 	bl	80005f8 <__aeabi_dmul>
 800da3a:	3601      	adds	r6, #1
 800da3c:	2301      	movs	r3, #1
 800da3e:	1064      	asrs	r4, r4, #1
 800da40:	3508      	adds	r5, #8
 800da42:	e73f      	b.n	800d8c4 <_dtoa_r+0x394>
 800da44:	2602      	movs	r6, #2
 800da46:	e742      	b.n	800d8ce <_dtoa_r+0x39e>
 800da48:	9c07      	ldr	r4, [sp, #28]
 800da4a:	9704      	str	r7, [sp, #16]
 800da4c:	e761      	b.n	800d912 <_dtoa_r+0x3e2>
 800da4e:	4b27      	ldr	r3, [pc, #156]	@ (800daec <_dtoa_r+0x5bc>)
 800da50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800da5a:	4454      	add	r4, sl
 800da5c:	2900      	cmp	r1, #0
 800da5e:	d053      	beq.n	800db08 <_dtoa_r+0x5d8>
 800da60:	4928      	ldr	r1, [pc, #160]	@ (800db04 <_dtoa_r+0x5d4>)
 800da62:	2000      	movs	r0, #0
 800da64:	f7f2 fef2 	bl	800084c <__aeabi_ddiv>
 800da68:	4633      	mov	r3, r6
 800da6a:	462a      	mov	r2, r5
 800da6c:	f7f2 fc0c 	bl	8000288 <__aeabi_dsub>
 800da70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da74:	4656      	mov	r6, sl
 800da76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da7a:	f7f3 f86d 	bl	8000b58 <__aeabi_d2iz>
 800da7e:	4605      	mov	r5, r0
 800da80:	f7f2 fd50 	bl	8000524 <__aeabi_i2d>
 800da84:	4602      	mov	r2, r0
 800da86:	460b      	mov	r3, r1
 800da88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da8c:	f7f2 fbfc 	bl	8000288 <__aeabi_dsub>
 800da90:	3530      	adds	r5, #48	@ 0x30
 800da92:	4602      	mov	r2, r0
 800da94:	460b      	mov	r3, r1
 800da96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da9a:	f806 5b01 	strb.w	r5, [r6], #1
 800da9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800daa2:	f7f3 f81b 	bl	8000adc <__aeabi_dcmplt>
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d171      	bne.n	800db8e <_dtoa_r+0x65e>
 800daaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800daae:	4911      	ldr	r1, [pc, #68]	@ (800daf4 <_dtoa_r+0x5c4>)
 800dab0:	2000      	movs	r0, #0
 800dab2:	f7f2 fbe9 	bl	8000288 <__aeabi_dsub>
 800dab6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800daba:	f7f3 f80f 	bl	8000adc <__aeabi_dcmplt>
 800dabe:	2800      	cmp	r0, #0
 800dac0:	f040 8095 	bne.w	800dbee <_dtoa_r+0x6be>
 800dac4:	42a6      	cmp	r6, r4
 800dac6:	f43f af50 	beq.w	800d96a <_dtoa_r+0x43a>
 800daca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dace:	4b0a      	ldr	r3, [pc, #40]	@ (800daf8 <_dtoa_r+0x5c8>)
 800dad0:	2200      	movs	r2, #0
 800dad2:	f7f2 fd91 	bl	80005f8 <__aeabi_dmul>
 800dad6:	4b08      	ldr	r3, [pc, #32]	@ (800daf8 <_dtoa_r+0x5c8>)
 800dad8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dadc:	2200      	movs	r2, #0
 800dade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dae2:	f7f2 fd89 	bl	80005f8 <__aeabi_dmul>
 800dae6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800daea:	e7c4      	b.n	800da76 <_dtoa_r+0x546>
 800daec:	08011e08 	.word	0x08011e08
 800daf0:	08011de0 	.word	0x08011de0
 800daf4:	3ff00000 	.word	0x3ff00000
 800daf8:	40240000 	.word	0x40240000
 800dafc:	401c0000 	.word	0x401c0000
 800db00:	40140000 	.word	0x40140000
 800db04:	3fe00000 	.word	0x3fe00000
 800db08:	4631      	mov	r1, r6
 800db0a:	4628      	mov	r0, r5
 800db0c:	f7f2 fd74 	bl	80005f8 <__aeabi_dmul>
 800db10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800db14:	9415      	str	r4, [sp, #84]	@ 0x54
 800db16:	4656      	mov	r6, sl
 800db18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db1c:	f7f3 f81c 	bl	8000b58 <__aeabi_d2iz>
 800db20:	4605      	mov	r5, r0
 800db22:	f7f2 fcff 	bl	8000524 <__aeabi_i2d>
 800db26:	4602      	mov	r2, r0
 800db28:	460b      	mov	r3, r1
 800db2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db2e:	f7f2 fbab 	bl	8000288 <__aeabi_dsub>
 800db32:	3530      	adds	r5, #48	@ 0x30
 800db34:	f806 5b01 	strb.w	r5, [r6], #1
 800db38:	4602      	mov	r2, r0
 800db3a:	460b      	mov	r3, r1
 800db3c:	42a6      	cmp	r6, r4
 800db3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800db42:	f04f 0200 	mov.w	r2, #0
 800db46:	d124      	bne.n	800db92 <_dtoa_r+0x662>
 800db48:	4bac      	ldr	r3, [pc, #688]	@ (800ddfc <_dtoa_r+0x8cc>)
 800db4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800db4e:	f7f2 fb9d 	bl	800028c <__adddf3>
 800db52:	4602      	mov	r2, r0
 800db54:	460b      	mov	r3, r1
 800db56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db5a:	f7f2 ffdd 	bl	8000b18 <__aeabi_dcmpgt>
 800db5e:	2800      	cmp	r0, #0
 800db60:	d145      	bne.n	800dbee <_dtoa_r+0x6be>
 800db62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800db66:	49a5      	ldr	r1, [pc, #660]	@ (800ddfc <_dtoa_r+0x8cc>)
 800db68:	2000      	movs	r0, #0
 800db6a:	f7f2 fb8d 	bl	8000288 <__aeabi_dsub>
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db76:	f7f2 ffb1 	bl	8000adc <__aeabi_dcmplt>
 800db7a:	2800      	cmp	r0, #0
 800db7c:	f43f aef5 	beq.w	800d96a <_dtoa_r+0x43a>
 800db80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800db82:	1e73      	subs	r3, r6, #1
 800db84:	9315      	str	r3, [sp, #84]	@ 0x54
 800db86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db8a:	2b30      	cmp	r3, #48	@ 0x30
 800db8c:	d0f8      	beq.n	800db80 <_dtoa_r+0x650>
 800db8e:	9f04      	ldr	r7, [sp, #16]
 800db90:	e73e      	b.n	800da10 <_dtoa_r+0x4e0>
 800db92:	4b9b      	ldr	r3, [pc, #620]	@ (800de00 <_dtoa_r+0x8d0>)
 800db94:	f7f2 fd30 	bl	80005f8 <__aeabi_dmul>
 800db98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db9c:	e7bc      	b.n	800db18 <_dtoa_r+0x5e8>
 800db9e:	d10c      	bne.n	800dbba <_dtoa_r+0x68a>
 800dba0:	4b98      	ldr	r3, [pc, #608]	@ (800de04 <_dtoa_r+0x8d4>)
 800dba2:	2200      	movs	r2, #0
 800dba4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dba8:	f7f2 fd26 	bl	80005f8 <__aeabi_dmul>
 800dbac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dbb0:	f7f2 ffa8 	bl	8000b04 <__aeabi_dcmpge>
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	f000 8157 	beq.w	800de68 <_dtoa_r+0x938>
 800dbba:	2400      	movs	r4, #0
 800dbbc:	4625      	mov	r5, r4
 800dbbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbc0:	43db      	mvns	r3, r3
 800dbc2:	9304      	str	r3, [sp, #16]
 800dbc4:	4656      	mov	r6, sl
 800dbc6:	2700      	movs	r7, #0
 800dbc8:	4621      	mov	r1, r4
 800dbca:	4658      	mov	r0, fp
 800dbcc:	f000 ff00 	bl	800e9d0 <_Bfree>
 800dbd0:	2d00      	cmp	r5, #0
 800dbd2:	d0dc      	beq.n	800db8e <_dtoa_r+0x65e>
 800dbd4:	b12f      	cbz	r7, 800dbe2 <_dtoa_r+0x6b2>
 800dbd6:	42af      	cmp	r7, r5
 800dbd8:	d003      	beq.n	800dbe2 <_dtoa_r+0x6b2>
 800dbda:	4639      	mov	r1, r7
 800dbdc:	4658      	mov	r0, fp
 800dbde:	f000 fef7 	bl	800e9d0 <_Bfree>
 800dbe2:	4629      	mov	r1, r5
 800dbe4:	4658      	mov	r0, fp
 800dbe6:	f000 fef3 	bl	800e9d0 <_Bfree>
 800dbea:	e7d0      	b.n	800db8e <_dtoa_r+0x65e>
 800dbec:	9704      	str	r7, [sp, #16]
 800dbee:	4633      	mov	r3, r6
 800dbf0:	461e      	mov	r6, r3
 800dbf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbf6:	2a39      	cmp	r2, #57	@ 0x39
 800dbf8:	d107      	bne.n	800dc0a <_dtoa_r+0x6da>
 800dbfa:	459a      	cmp	sl, r3
 800dbfc:	d1f8      	bne.n	800dbf0 <_dtoa_r+0x6c0>
 800dbfe:	9a04      	ldr	r2, [sp, #16]
 800dc00:	3201      	adds	r2, #1
 800dc02:	9204      	str	r2, [sp, #16]
 800dc04:	2230      	movs	r2, #48	@ 0x30
 800dc06:	f88a 2000 	strb.w	r2, [sl]
 800dc0a:	781a      	ldrb	r2, [r3, #0]
 800dc0c:	3201      	adds	r2, #1
 800dc0e:	701a      	strb	r2, [r3, #0]
 800dc10:	e7bd      	b.n	800db8e <_dtoa_r+0x65e>
 800dc12:	4b7b      	ldr	r3, [pc, #492]	@ (800de00 <_dtoa_r+0x8d0>)
 800dc14:	2200      	movs	r2, #0
 800dc16:	f7f2 fcef 	bl	80005f8 <__aeabi_dmul>
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	4604      	mov	r4, r0
 800dc20:	460d      	mov	r5, r1
 800dc22:	f7f2 ff51 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc26:	2800      	cmp	r0, #0
 800dc28:	f43f aebb 	beq.w	800d9a2 <_dtoa_r+0x472>
 800dc2c:	e6f0      	b.n	800da10 <_dtoa_r+0x4e0>
 800dc2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dc30:	2a00      	cmp	r2, #0
 800dc32:	f000 80db 	beq.w	800ddec <_dtoa_r+0x8bc>
 800dc36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc38:	2a01      	cmp	r2, #1
 800dc3a:	f300 80bf 	bgt.w	800ddbc <_dtoa_r+0x88c>
 800dc3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800dc40:	2a00      	cmp	r2, #0
 800dc42:	f000 80b7 	beq.w	800ddb4 <_dtoa_r+0x884>
 800dc46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dc4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dc4c:	4646      	mov	r6, r8
 800dc4e:	9a08      	ldr	r2, [sp, #32]
 800dc50:	2101      	movs	r1, #1
 800dc52:	441a      	add	r2, r3
 800dc54:	4658      	mov	r0, fp
 800dc56:	4498      	add	r8, r3
 800dc58:	9208      	str	r2, [sp, #32]
 800dc5a:	f000 ffb7 	bl	800ebcc <__i2b>
 800dc5e:	4605      	mov	r5, r0
 800dc60:	b15e      	cbz	r6, 800dc7a <_dtoa_r+0x74a>
 800dc62:	9b08      	ldr	r3, [sp, #32]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	dd08      	ble.n	800dc7a <_dtoa_r+0x74a>
 800dc68:	42b3      	cmp	r3, r6
 800dc6a:	9a08      	ldr	r2, [sp, #32]
 800dc6c:	bfa8      	it	ge
 800dc6e:	4633      	movge	r3, r6
 800dc70:	eba8 0803 	sub.w	r8, r8, r3
 800dc74:	1af6      	subs	r6, r6, r3
 800dc76:	1ad3      	subs	r3, r2, r3
 800dc78:	9308      	str	r3, [sp, #32]
 800dc7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc7c:	b1f3      	cbz	r3, 800dcbc <_dtoa_r+0x78c>
 800dc7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	f000 80b7 	beq.w	800ddf4 <_dtoa_r+0x8c4>
 800dc86:	b18c      	cbz	r4, 800dcac <_dtoa_r+0x77c>
 800dc88:	4629      	mov	r1, r5
 800dc8a:	4622      	mov	r2, r4
 800dc8c:	4658      	mov	r0, fp
 800dc8e:	f001 f85d 	bl	800ed4c <__pow5mult>
 800dc92:	464a      	mov	r2, r9
 800dc94:	4601      	mov	r1, r0
 800dc96:	4605      	mov	r5, r0
 800dc98:	4658      	mov	r0, fp
 800dc9a:	f000 ffad 	bl	800ebf8 <__multiply>
 800dc9e:	4649      	mov	r1, r9
 800dca0:	9004      	str	r0, [sp, #16]
 800dca2:	4658      	mov	r0, fp
 800dca4:	f000 fe94 	bl	800e9d0 <_Bfree>
 800dca8:	9b04      	ldr	r3, [sp, #16]
 800dcaa:	4699      	mov	r9, r3
 800dcac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcae:	1b1a      	subs	r2, r3, r4
 800dcb0:	d004      	beq.n	800dcbc <_dtoa_r+0x78c>
 800dcb2:	4649      	mov	r1, r9
 800dcb4:	4658      	mov	r0, fp
 800dcb6:	f001 f849 	bl	800ed4c <__pow5mult>
 800dcba:	4681      	mov	r9, r0
 800dcbc:	2101      	movs	r1, #1
 800dcbe:	4658      	mov	r0, fp
 800dcc0:	f000 ff84 	bl	800ebcc <__i2b>
 800dcc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	f000 81cf 	beq.w	800e06c <_dtoa_r+0xb3c>
 800dcce:	461a      	mov	r2, r3
 800dcd0:	4601      	mov	r1, r0
 800dcd2:	4658      	mov	r0, fp
 800dcd4:	f001 f83a 	bl	800ed4c <__pow5mult>
 800dcd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	4604      	mov	r4, r0
 800dcde:	f300 8095 	bgt.w	800de0c <_dtoa_r+0x8dc>
 800dce2:	9b02      	ldr	r3, [sp, #8]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	f040 8087 	bne.w	800ddf8 <_dtoa_r+0x8c8>
 800dcea:	9b03      	ldr	r3, [sp, #12]
 800dcec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f040 8089 	bne.w	800de08 <_dtoa_r+0x8d8>
 800dcf6:	9b03      	ldr	r3, [sp, #12]
 800dcf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dcfc:	0d1b      	lsrs	r3, r3, #20
 800dcfe:	051b      	lsls	r3, r3, #20
 800dd00:	b12b      	cbz	r3, 800dd0e <_dtoa_r+0x7de>
 800dd02:	9b08      	ldr	r3, [sp, #32]
 800dd04:	3301      	adds	r3, #1
 800dd06:	9308      	str	r3, [sp, #32]
 800dd08:	f108 0801 	add.w	r8, r8, #1
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	f000 81b0 	beq.w	800e078 <_dtoa_r+0xb48>
 800dd18:	6923      	ldr	r3, [r4, #16]
 800dd1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd1e:	6918      	ldr	r0, [r3, #16]
 800dd20:	f000 ff08 	bl	800eb34 <__hi0bits>
 800dd24:	f1c0 0020 	rsb	r0, r0, #32
 800dd28:	9b08      	ldr	r3, [sp, #32]
 800dd2a:	4418      	add	r0, r3
 800dd2c:	f010 001f 	ands.w	r0, r0, #31
 800dd30:	d077      	beq.n	800de22 <_dtoa_r+0x8f2>
 800dd32:	f1c0 0320 	rsb	r3, r0, #32
 800dd36:	2b04      	cmp	r3, #4
 800dd38:	dd6b      	ble.n	800de12 <_dtoa_r+0x8e2>
 800dd3a:	9b08      	ldr	r3, [sp, #32]
 800dd3c:	f1c0 001c 	rsb	r0, r0, #28
 800dd40:	4403      	add	r3, r0
 800dd42:	4480      	add	r8, r0
 800dd44:	4406      	add	r6, r0
 800dd46:	9308      	str	r3, [sp, #32]
 800dd48:	f1b8 0f00 	cmp.w	r8, #0
 800dd4c:	dd05      	ble.n	800dd5a <_dtoa_r+0x82a>
 800dd4e:	4649      	mov	r1, r9
 800dd50:	4642      	mov	r2, r8
 800dd52:	4658      	mov	r0, fp
 800dd54:	f001 f854 	bl	800ee00 <__lshift>
 800dd58:	4681      	mov	r9, r0
 800dd5a:	9b08      	ldr	r3, [sp, #32]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	dd05      	ble.n	800dd6c <_dtoa_r+0x83c>
 800dd60:	4621      	mov	r1, r4
 800dd62:	461a      	mov	r2, r3
 800dd64:	4658      	mov	r0, fp
 800dd66:	f001 f84b 	bl	800ee00 <__lshift>
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d059      	beq.n	800de26 <_dtoa_r+0x8f6>
 800dd72:	4621      	mov	r1, r4
 800dd74:	4648      	mov	r0, r9
 800dd76:	f001 f8af 	bl	800eed8 <__mcmp>
 800dd7a:	2800      	cmp	r0, #0
 800dd7c:	da53      	bge.n	800de26 <_dtoa_r+0x8f6>
 800dd7e:	1e7b      	subs	r3, r7, #1
 800dd80:	9304      	str	r3, [sp, #16]
 800dd82:	4649      	mov	r1, r9
 800dd84:	2300      	movs	r3, #0
 800dd86:	220a      	movs	r2, #10
 800dd88:	4658      	mov	r0, fp
 800dd8a:	f000 fe43 	bl	800ea14 <__multadd>
 800dd8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd90:	4681      	mov	r9, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	f000 8172 	beq.w	800e07c <_dtoa_r+0xb4c>
 800dd98:	2300      	movs	r3, #0
 800dd9a:	4629      	mov	r1, r5
 800dd9c:	220a      	movs	r2, #10
 800dd9e:	4658      	mov	r0, fp
 800dda0:	f000 fe38 	bl	800ea14 <__multadd>
 800dda4:	9b00      	ldr	r3, [sp, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	4605      	mov	r5, r0
 800ddaa:	dc67      	bgt.n	800de7c <_dtoa_r+0x94c>
 800ddac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddae:	2b02      	cmp	r3, #2
 800ddb0:	dc41      	bgt.n	800de36 <_dtoa_r+0x906>
 800ddb2:	e063      	b.n	800de7c <_dtoa_r+0x94c>
 800ddb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ddb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ddba:	e746      	b.n	800dc4a <_dtoa_r+0x71a>
 800ddbc:	9b07      	ldr	r3, [sp, #28]
 800ddbe:	1e5c      	subs	r4, r3, #1
 800ddc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddc2:	42a3      	cmp	r3, r4
 800ddc4:	bfbf      	itttt	lt
 800ddc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ddc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ddca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ddcc:	1ae3      	sublt	r3, r4, r3
 800ddce:	bfb4      	ite	lt
 800ddd0:	18d2      	addlt	r2, r2, r3
 800ddd2:	1b1c      	subge	r4, r3, r4
 800ddd4:	9b07      	ldr	r3, [sp, #28]
 800ddd6:	bfbc      	itt	lt
 800ddd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ddda:	2400      	movlt	r4, #0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	bfb5      	itete	lt
 800dde0:	eba8 0603 	sublt.w	r6, r8, r3
 800dde4:	9b07      	ldrge	r3, [sp, #28]
 800dde6:	2300      	movlt	r3, #0
 800dde8:	4646      	movge	r6, r8
 800ddea:	e730      	b.n	800dc4e <_dtoa_r+0x71e>
 800ddec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ddee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ddf0:	4646      	mov	r6, r8
 800ddf2:	e735      	b.n	800dc60 <_dtoa_r+0x730>
 800ddf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ddf6:	e75c      	b.n	800dcb2 <_dtoa_r+0x782>
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	e788      	b.n	800dd0e <_dtoa_r+0x7de>
 800ddfc:	3fe00000 	.word	0x3fe00000
 800de00:	40240000 	.word	0x40240000
 800de04:	40140000 	.word	0x40140000
 800de08:	9b02      	ldr	r3, [sp, #8]
 800de0a:	e780      	b.n	800dd0e <_dtoa_r+0x7de>
 800de0c:	2300      	movs	r3, #0
 800de0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800de10:	e782      	b.n	800dd18 <_dtoa_r+0x7e8>
 800de12:	d099      	beq.n	800dd48 <_dtoa_r+0x818>
 800de14:	9a08      	ldr	r2, [sp, #32]
 800de16:	331c      	adds	r3, #28
 800de18:	441a      	add	r2, r3
 800de1a:	4498      	add	r8, r3
 800de1c:	441e      	add	r6, r3
 800de1e:	9208      	str	r2, [sp, #32]
 800de20:	e792      	b.n	800dd48 <_dtoa_r+0x818>
 800de22:	4603      	mov	r3, r0
 800de24:	e7f6      	b.n	800de14 <_dtoa_r+0x8e4>
 800de26:	9b07      	ldr	r3, [sp, #28]
 800de28:	9704      	str	r7, [sp, #16]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	dc20      	bgt.n	800de70 <_dtoa_r+0x940>
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de32:	2b02      	cmp	r3, #2
 800de34:	dd1e      	ble.n	800de74 <_dtoa_r+0x944>
 800de36:	9b00      	ldr	r3, [sp, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f47f aec0 	bne.w	800dbbe <_dtoa_r+0x68e>
 800de3e:	4621      	mov	r1, r4
 800de40:	2205      	movs	r2, #5
 800de42:	4658      	mov	r0, fp
 800de44:	f000 fde6 	bl	800ea14 <__multadd>
 800de48:	4601      	mov	r1, r0
 800de4a:	4604      	mov	r4, r0
 800de4c:	4648      	mov	r0, r9
 800de4e:	f001 f843 	bl	800eed8 <__mcmp>
 800de52:	2800      	cmp	r0, #0
 800de54:	f77f aeb3 	ble.w	800dbbe <_dtoa_r+0x68e>
 800de58:	4656      	mov	r6, sl
 800de5a:	2331      	movs	r3, #49	@ 0x31
 800de5c:	f806 3b01 	strb.w	r3, [r6], #1
 800de60:	9b04      	ldr	r3, [sp, #16]
 800de62:	3301      	adds	r3, #1
 800de64:	9304      	str	r3, [sp, #16]
 800de66:	e6ae      	b.n	800dbc6 <_dtoa_r+0x696>
 800de68:	9c07      	ldr	r4, [sp, #28]
 800de6a:	9704      	str	r7, [sp, #16]
 800de6c:	4625      	mov	r5, r4
 800de6e:	e7f3      	b.n	800de58 <_dtoa_r+0x928>
 800de70:	9b07      	ldr	r3, [sp, #28]
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de76:	2b00      	cmp	r3, #0
 800de78:	f000 8104 	beq.w	800e084 <_dtoa_r+0xb54>
 800de7c:	2e00      	cmp	r6, #0
 800de7e:	dd05      	ble.n	800de8c <_dtoa_r+0x95c>
 800de80:	4629      	mov	r1, r5
 800de82:	4632      	mov	r2, r6
 800de84:	4658      	mov	r0, fp
 800de86:	f000 ffbb 	bl	800ee00 <__lshift>
 800de8a:	4605      	mov	r5, r0
 800de8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d05a      	beq.n	800df48 <_dtoa_r+0xa18>
 800de92:	6869      	ldr	r1, [r5, #4]
 800de94:	4658      	mov	r0, fp
 800de96:	f000 fd5b 	bl	800e950 <_Balloc>
 800de9a:	4606      	mov	r6, r0
 800de9c:	b928      	cbnz	r0, 800deaa <_dtoa_r+0x97a>
 800de9e:	4b84      	ldr	r3, [pc, #528]	@ (800e0b0 <_dtoa_r+0xb80>)
 800dea0:	4602      	mov	r2, r0
 800dea2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dea6:	f7ff bb5a 	b.w	800d55e <_dtoa_r+0x2e>
 800deaa:	692a      	ldr	r2, [r5, #16]
 800deac:	3202      	adds	r2, #2
 800deae:	0092      	lsls	r2, r2, #2
 800deb0:	f105 010c 	add.w	r1, r5, #12
 800deb4:	300c      	adds	r0, #12
 800deb6:	f7ff fa76 	bl	800d3a6 <memcpy>
 800deba:	2201      	movs	r2, #1
 800debc:	4631      	mov	r1, r6
 800debe:	4658      	mov	r0, fp
 800dec0:	f000 ff9e 	bl	800ee00 <__lshift>
 800dec4:	f10a 0301 	add.w	r3, sl, #1
 800dec8:	9307      	str	r3, [sp, #28]
 800deca:	9b00      	ldr	r3, [sp, #0]
 800decc:	4453      	add	r3, sl
 800dece:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ded0:	9b02      	ldr	r3, [sp, #8]
 800ded2:	f003 0301 	and.w	r3, r3, #1
 800ded6:	462f      	mov	r7, r5
 800ded8:	930a      	str	r3, [sp, #40]	@ 0x28
 800deda:	4605      	mov	r5, r0
 800dedc:	9b07      	ldr	r3, [sp, #28]
 800dede:	4621      	mov	r1, r4
 800dee0:	3b01      	subs	r3, #1
 800dee2:	4648      	mov	r0, r9
 800dee4:	9300      	str	r3, [sp, #0]
 800dee6:	f7ff fa9b 	bl	800d420 <quorem>
 800deea:	4639      	mov	r1, r7
 800deec:	9002      	str	r0, [sp, #8]
 800deee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800def2:	4648      	mov	r0, r9
 800def4:	f000 fff0 	bl	800eed8 <__mcmp>
 800def8:	462a      	mov	r2, r5
 800defa:	9008      	str	r0, [sp, #32]
 800defc:	4621      	mov	r1, r4
 800defe:	4658      	mov	r0, fp
 800df00:	f001 f806 	bl	800ef10 <__mdiff>
 800df04:	68c2      	ldr	r2, [r0, #12]
 800df06:	4606      	mov	r6, r0
 800df08:	bb02      	cbnz	r2, 800df4c <_dtoa_r+0xa1c>
 800df0a:	4601      	mov	r1, r0
 800df0c:	4648      	mov	r0, r9
 800df0e:	f000 ffe3 	bl	800eed8 <__mcmp>
 800df12:	4602      	mov	r2, r0
 800df14:	4631      	mov	r1, r6
 800df16:	4658      	mov	r0, fp
 800df18:	920e      	str	r2, [sp, #56]	@ 0x38
 800df1a:	f000 fd59 	bl	800e9d0 <_Bfree>
 800df1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df22:	9e07      	ldr	r6, [sp, #28]
 800df24:	ea43 0102 	orr.w	r1, r3, r2
 800df28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df2a:	4319      	orrs	r1, r3
 800df2c:	d110      	bne.n	800df50 <_dtoa_r+0xa20>
 800df2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800df32:	d029      	beq.n	800df88 <_dtoa_r+0xa58>
 800df34:	9b08      	ldr	r3, [sp, #32]
 800df36:	2b00      	cmp	r3, #0
 800df38:	dd02      	ble.n	800df40 <_dtoa_r+0xa10>
 800df3a:	9b02      	ldr	r3, [sp, #8]
 800df3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800df40:	9b00      	ldr	r3, [sp, #0]
 800df42:	f883 8000 	strb.w	r8, [r3]
 800df46:	e63f      	b.n	800dbc8 <_dtoa_r+0x698>
 800df48:	4628      	mov	r0, r5
 800df4a:	e7bb      	b.n	800dec4 <_dtoa_r+0x994>
 800df4c:	2201      	movs	r2, #1
 800df4e:	e7e1      	b.n	800df14 <_dtoa_r+0x9e4>
 800df50:	9b08      	ldr	r3, [sp, #32]
 800df52:	2b00      	cmp	r3, #0
 800df54:	db04      	blt.n	800df60 <_dtoa_r+0xa30>
 800df56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800df58:	430b      	orrs	r3, r1
 800df5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800df5c:	430b      	orrs	r3, r1
 800df5e:	d120      	bne.n	800dfa2 <_dtoa_r+0xa72>
 800df60:	2a00      	cmp	r2, #0
 800df62:	dded      	ble.n	800df40 <_dtoa_r+0xa10>
 800df64:	4649      	mov	r1, r9
 800df66:	2201      	movs	r2, #1
 800df68:	4658      	mov	r0, fp
 800df6a:	f000 ff49 	bl	800ee00 <__lshift>
 800df6e:	4621      	mov	r1, r4
 800df70:	4681      	mov	r9, r0
 800df72:	f000 ffb1 	bl	800eed8 <__mcmp>
 800df76:	2800      	cmp	r0, #0
 800df78:	dc03      	bgt.n	800df82 <_dtoa_r+0xa52>
 800df7a:	d1e1      	bne.n	800df40 <_dtoa_r+0xa10>
 800df7c:	f018 0f01 	tst.w	r8, #1
 800df80:	d0de      	beq.n	800df40 <_dtoa_r+0xa10>
 800df82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800df86:	d1d8      	bne.n	800df3a <_dtoa_r+0xa0a>
 800df88:	9a00      	ldr	r2, [sp, #0]
 800df8a:	2339      	movs	r3, #57	@ 0x39
 800df8c:	7013      	strb	r3, [r2, #0]
 800df8e:	4633      	mov	r3, r6
 800df90:	461e      	mov	r6, r3
 800df92:	3b01      	subs	r3, #1
 800df94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800df98:	2a39      	cmp	r2, #57	@ 0x39
 800df9a:	d052      	beq.n	800e042 <_dtoa_r+0xb12>
 800df9c:	3201      	adds	r2, #1
 800df9e:	701a      	strb	r2, [r3, #0]
 800dfa0:	e612      	b.n	800dbc8 <_dtoa_r+0x698>
 800dfa2:	2a00      	cmp	r2, #0
 800dfa4:	dd07      	ble.n	800dfb6 <_dtoa_r+0xa86>
 800dfa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dfaa:	d0ed      	beq.n	800df88 <_dtoa_r+0xa58>
 800dfac:	9a00      	ldr	r2, [sp, #0]
 800dfae:	f108 0301 	add.w	r3, r8, #1
 800dfb2:	7013      	strb	r3, [r2, #0]
 800dfb4:	e608      	b.n	800dbc8 <_dtoa_r+0x698>
 800dfb6:	9b07      	ldr	r3, [sp, #28]
 800dfb8:	9a07      	ldr	r2, [sp, #28]
 800dfba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dfbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d028      	beq.n	800e016 <_dtoa_r+0xae6>
 800dfc4:	4649      	mov	r1, r9
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	220a      	movs	r2, #10
 800dfca:	4658      	mov	r0, fp
 800dfcc:	f000 fd22 	bl	800ea14 <__multadd>
 800dfd0:	42af      	cmp	r7, r5
 800dfd2:	4681      	mov	r9, r0
 800dfd4:	f04f 0300 	mov.w	r3, #0
 800dfd8:	f04f 020a 	mov.w	r2, #10
 800dfdc:	4639      	mov	r1, r7
 800dfde:	4658      	mov	r0, fp
 800dfe0:	d107      	bne.n	800dff2 <_dtoa_r+0xac2>
 800dfe2:	f000 fd17 	bl	800ea14 <__multadd>
 800dfe6:	4607      	mov	r7, r0
 800dfe8:	4605      	mov	r5, r0
 800dfea:	9b07      	ldr	r3, [sp, #28]
 800dfec:	3301      	adds	r3, #1
 800dfee:	9307      	str	r3, [sp, #28]
 800dff0:	e774      	b.n	800dedc <_dtoa_r+0x9ac>
 800dff2:	f000 fd0f 	bl	800ea14 <__multadd>
 800dff6:	4629      	mov	r1, r5
 800dff8:	4607      	mov	r7, r0
 800dffa:	2300      	movs	r3, #0
 800dffc:	220a      	movs	r2, #10
 800dffe:	4658      	mov	r0, fp
 800e000:	f000 fd08 	bl	800ea14 <__multadd>
 800e004:	4605      	mov	r5, r0
 800e006:	e7f0      	b.n	800dfea <_dtoa_r+0xaba>
 800e008:	9b00      	ldr	r3, [sp, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	bfcc      	ite	gt
 800e00e:	461e      	movgt	r6, r3
 800e010:	2601      	movle	r6, #1
 800e012:	4456      	add	r6, sl
 800e014:	2700      	movs	r7, #0
 800e016:	4649      	mov	r1, r9
 800e018:	2201      	movs	r2, #1
 800e01a:	4658      	mov	r0, fp
 800e01c:	f000 fef0 	bl	800ee00 <__lshift>
 800e020:	4621      	mov	r1, r4
 800e022:	4681      	mov	r9, r0
 800e024:	f000 ff58 	bl	800eed8 <__mcmp>
 800e028:	2800      	cmp	r0, #0
 800e02a:	dcb0      	bgt.n	800df8e <_dtoa_r+0xa5e>
 800e02c:	d102      	bne.n	800e034 <_dtoa_r+0xb04>
 800e02e:	f018 0f01 	tst.w	r8, #1
 800e032:	d1ac      	bne.n	800df8e <_dtoa_r+0xa5e>
 800e034:	4633      	mov	r3, r6
 800e036:	461e      	mov	r6, r3
 800e038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e03c:	2a30      	cmp	r2, #48	@ 0x30
 800e03e:	d0fa      	beq.n	800e036 <_dtoa_r+0xb06>
 800e040:	e5c2      	b.n	800dbc8 <_dtoa_r+0x698>
 800e042:	459a      	cmp	sl, r3
 800e044:	d1a4      	bne.n	800df90 <_dtoa_r+0xa60>
 800e046:	9b04      	ldr	r3, [sp, #16]
 800e048:	3301      	adds	r3, #1
 800e04a:	9304      	str	r3, [sp, #16]
 800e04c:	2331      	movs	r3, #49	@ 0x31
 800e04e:	f88a 3000 	strb.w	r3, [sl]
 800e052:	e5b9      	b.n	800dbc8 <_dtoa_r+0x698>
 800e054:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e056:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e0b4 <_dtoa_r+0xb84>
 800e05a:	b11b      	cbz	r3, 800e064 <_dtoa_r+0xb34>
 800e05c:	f10a 0308 	add.w	r3, sl, #8
 800e060:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e062:	6013      	str	r3, [r2, #0]
 800e064:	4650      	mov	r0, sl
 800e066:	b019      	add	sp, #100	@ 0x64
 800e068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e06c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e06e:	2b01      	cmp	r3, #1
 800e070:	f77f ae37 	ble.w	800dce2 <_dtoa_r+0x7b2>
 800e074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e076:	930a      	str	r3, [sp, #40]	@ 0x28
 800e078:	2001      	movs	r0, #1
 800e07a:	e655      	b.n	800dd28 <_dtoa_r+0x7f8>
 800e07c:	9b00      	ldr	r3, [sp, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	f77f aed6 	ble.w	800de30 <_dtoa_r+0x900>
 800e084:	4656      	mov	r6, sl
 800e086:	4621      	mov	r1, r4
 800e088:	4648      	mov	r0, r9
 800e08a:	f7ff f9c9 	bl	800d420 <quorem>
 800e08e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e092:	f806 8b01 	strb.w	r8, [r6], #1
 800e096:	9b00      	ldr	r3, [sp, #0]
 800e098:	eba6 020a 	sub.w	r2, r6, sl
 800e09c:	4293      	cmp	r3, r2
 800e09e:	ddb3      	ble.n	800e008 <_dtoa_r+0xad8>
 800e0a0:	4649      	mov	r1, r9
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	220a      	movs	r2, #10
 800e0a6:	4658      	mov	r0, fp
 800e0a8:	f000 fcb4 	bl	800ea14 <__multadd>
 800e0ac:	4681      	mov	r9, r0
 800e0ae:	e7ea      	b.n	800e086 <_dtoa_r+0xb56>
 800e0b0:	08011d04 	.word	0x08011d04
 800e0b4:	08011c9f 	.word	0x08011c9f

0800e0b8 <_free_r>:
 800e0b8:	b538      	push	{r3, r4, r5, lr}
 800e0ba:	4605      	mov	r5, r0
 800e0bc:	2900      	cmp	r1, #0
 800e0be:	d041      	beq.n	800e144 <_free_r+0x8c>
 800e0c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0c4:	1f0c      	subs	r4, r1, #4
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	bfb8      	it	lt
 800e0ca:	18e4      	addlt	r4, r4, r3
 800e0cc:	f000 fc34 	bl	800e938 <__malloc_lock>
 800e0d0:	4a1d      	ldr	r2, [pc, #116]	@ (800e148 <_free_r+0x90>)
 800e0d2:	6813      	ldr	r3, [r2, #0]
 800e0d4:	b933      	cbnz	r3, 800e0e4 <_free_r+0x2c>
 800e0d6:	6063      	str	r3, [r4, #4]
 800e0d8:	6014      	str	r4, [r2, #0]
 800e0da:	4628      	mov	r0, r5
 800e0dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0e0:	f000 bc30 	b.w	800e944 <__malloc_unlock>
 800e0e4:	42a3      	cmp	r3, r4
 800e0e6:	d908      	bls.n	800e0fa <_free_r+0x42>
 800e0e8:	6820      	ldr	r0, [r4, #0]
 800e0ea:	1821      	adds	r1, r4, r0
 800e0ec:	428b      	cmp	r3, r1
 800e0ee:	bf01      	itttt	eq
 800e0f0:	6819      	ldreq	r1, [r3, #0]
 800e0f2:	685b      	ldreq	r3, [r3, #4]
 800e0f4:	1809      	addeq	r1, r1, r0
 800e0f6:	6021      	streq	r1, [r4, #0]
 800e0f8:	e7ed      	b.n	800e0d6 <_free_r+0x1e>
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	b10b      	cbz	r3, 800e104 <_free_r+0x4c>
 800e100:	42a3      	cmp	r3, r4
 800e102:	d9fa      	bls.n	800e0fa <_free_r+0x42>
 800e104:	6811      	ldr	r1, [r2, #0]
 800e106:	1850      	adds	r0, r2, r1
 800e108:	42a0      	cmp	r0, r4
 800e10a:	d10b      	bne.n	800e124 <_free_r+0x6c>
 800e10c:	6820      	ldr	r0, [r4, #0]
 800e10e:	4401      	add	r1, r0
 800e110:	1850      	adds	r0, r2, r1
 800e112:	4283      	cmp	r3, r0
 800e114:	6011      	str	r1, [r2, #0]
 800e116:	d1e0      	bne.n	800e0da <_free_r+0x22>
 800e118:	6818      	ldr	r0, [r3, #0]
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	6053      	str	r3, [r2, #4]
 800e11e:	4408      	add	r0, r1
 800e120:	6010      	str	r0, [r2, #0]
 800e122:	e7da      	b.n	800e0da <_free_r+0x22>
 800e124:	d902      	bls.n	800e12c <_free_r+0x74>
 800e126:	230c      	movs	r3, #12
 800e128:	602b      	str	r3, [r5, #0]
 800e12a:	e7d6      	b.n	800e0da <_free_r+0x22>
 800e12c:	6820      	ldr	r0, [r4, #0]
 800e12e:	1821      	adds	r1, r4, r0
 800e130:	428b      	cmp	r3, r1
 800e132:	bf04      	itt	eq
 800e134:	6819      	ldreq	r1, [r3, #0]
 800e136:	685b      	ldreq	r3, [r3, #4]
 800e138:	6063      	str	r3, [r4, #4]
 800e13a:	bf04      	itt	eq
 800e13c:	1809      	addeq	r1, r1, r0
 800e13e:	6021      	streq	r1, [r4, #0]
 800e140:	6054      	str	r4, [r2, #4]
 800e142:	e7ca      	b.n	800e0da <_free_r+0x22>
 800e144:	bd38      	pop	{r3, r4, r5, pc}
 800e146:	bf00      	nop
 800e148:	20000894 	.word	0x20000894

0800e14c <rshift>:
 800e14c:	6903      	ldr	r3, [r0, #16]
 800e14e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e152:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e156:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e15a:	f100 0414 	add.w	r4, r0, #20
 800e15e:	dd45      	ble.n	800e1ec <rshift+0xa0>
 800e160:	f011 011f 	ands.w	r1, r1, #31
 800e164:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e168:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e16c:	d10c      	bne.n	800e188 <rshift+0x3c>
 800e16e:	f100 0710 	add.w	r7, r0, #16
 800e172:	4629      	mov	r1, r5
 800e174:	42b1      	cmp	r1, r6
 800e176:	d334      	bcc.n	800e1e2 <rshift+0x96>
 800e178:	1a9b      	subs	r3, r3, r2
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	1eea      	subs	r2, r5, #3
 800e17e:	4296      	cmp	r6, r2
 800e180:	bf38      	it	cc
 800e182:	2300      	movcc	r3, #0
 800e184:	4423      	add	r3, r4
 800e186:	e015      	b.n	800e1b4 <rshift+0x68>
 800e188:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e18c:	f1c1 0820 	rsb	r8, r1, #32
 800e190:	40cf      	lsrs	r7, r1
 800e192:	f105 0e04 	add.w	lr, r5, #4
 800e196:	46a1      	mov	r9, r4
 800e198:	4576      	cmp	r6, lr
 800e19a:	46f4      	mov	ip, lr
 800e19c:	d815      	bhi.n	800e1ca <rshift+0x7e>
 800e19e:	1a9a      	subs	r2, r3, r2
 800e1a0:	0092      	lsls	r2, r2, #2
 800e1a2:	3a04      	subs	r2, #4
 800e1a4:	3501      	adds	r5, #1
 800e1a6:	42ae      	cmp	r6, r5
 800e1a8:	bf38      	it	cc
 800e1aa:	2200      	movcc	r2, #0
 800e1ac:	18a3      	adds	r3, r4, r2
 800e1ae:	50a7      	str	r7, [r4, r2]
 800e1b0:	b107      	cbz	r7, 800e1b4 <rshift+0x68>
 800e1b2:	3304      	adds	r3, #4
 800e1b4:	1b1a      	subs	r2, r3, r4
 800e1b6:	42a3      	cmp	r3, r4
 800e1b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e1bc:	bf08      	it	eq
 800e1be:	2300      	moveq	r3, #0
 800e1c0:	6102      	str	r2, [r0, #16]
 800e1c2:	bf08      	it	eq
 800e1c4:	6143      	streq	r3, [r0, #20]
 800e1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1ca:	f8dc c000 	ldr.w	ip, [ip]
 800e1ce:	fa0c fc08 	lsl.w	ip, ip, r8
 800e1d2:	ea4c 0707 	orr.w	r7, ip, r7
 800e1d6:	f849 7b04 	str.w	r7, [r9], #4
 800e1da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e1de:	40cf      	lsrs	r7, r1
 800e1e0:	e7da      	b.n	800e198 <rshift+0x4c>
 800e1e2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e1e6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e1ea:	e7c3      	b.n	800e174 <rshift+0x28>
 800e1ec:	4623      	mov	r3, r4
 800e1ee:	e7e1      	b.n	800e1b4 <rshift+0x68>

0800e1f0 <__hexdig_fun>:
 800e1f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e1f4:	2b09      	cmp	r3, #9
 800e1f6:	d802      	bhi.n	800e1fe <__hexdig_fun+0xe>
 800e1f8:	3820      	subs	r0, #32
 800e1fa:	b2c0      	uxtb	r0, r0
 800e1fc:	4770      	bx	lr
 800e1fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e202:	2b05      	cmp	r3, #5
 800e204:	d801      	bhi.n	800e20a <__hexdig_fun+0x1a>
 800e206:	3847      	subs	r0, #71	@ 0x47
 800e208:	e7f7      	b.n	800e1fa <__hexdig_fun+0xa>
 800e20a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e20e:	2b05      	cmp	r3, #5
 800e210:	d801      	bhi.n	800e216 <__hexdig_fun+0x26>
 800e212:	3827      	subs	r0, #39	@ 0x27
 800e214:	e7f1      	b.n	800e1fa <__hexdig_fun+0xa>
 800e216:	2000      	movs	r0, #0
 800e218:	4770      	bx	lr
	...

0800e21c <__gethex>:
 800e21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e220:	b085      	sub	sp, #20
 800e222:	468a      	mov	sl, r1
 800e224:	9302      	str	r3, [sp, #8]
 800e226:	680b      	ldr	r3, [r1, #0]
 800e228:	9001      	str	r0, [sp, #4]
 800e22a:	4690      	mov	r8, r2
 800e22c:	1c9c      	adds	r4, r3, #2
 800e22e:	46a1      	mov	r9, r4
 800e230:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e234:	2830      	cmp	r0, #48	@ 0x30
 800e236:	d0fa      	beq.n	800e22e <__gethex+0x12>
 800e238:	eba9 0303 	sub.w	r3, r9, r3
 800e23c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e240:	f7ff ffd6 	bl	800e1f0 <__hexdig_fun>
 800e244:	4605      	mov	r5, r0
 800e246:	2800      	cmp	r0, #0
 800e248:	d168      	bne.n	800e31c <__gethex+0x100>
 800e24a:	49a0      	ldr	r1, [pc, #640]	@ (800e4cc <__gethex+0x2b0>)
 800e24c:	2201      	movs	r2, #1
 800e24e:	4648      	mov	r0, r9
 800e250:	f7fe ffc3 	bl	800d1da <strncmp>
 800e254:	4607      	mov	r7, r0
 800e256:	2800      	cmp	r0, #0
 800e258:	d167      	bne.n	800e32a <__gethex+0x10e>
 800e25a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e25e:	4626      	mov	r6, r4
 800e260:	f7ff ffc6 	bl	800e1f0 <__hexdig_fun>
 800e264:	2800      	cmp	r0, #0
 800e266:	d062      	beq.n	800e32e <__gethex+0x112>
 800e268:	4623      	mov	r3, r4
 800e26a:	7818      	ldrb	r0, [r3, #0]
 800e26c:	2830      	cmp	r0, #48	@ 0x30
 800e26e:	4699      	mov	r9, r3
 800e270:	f103 0301 	add.w	r3, r3, #1
 800e274:	d0f9      	beq.n	800e26a <__gethex+0x4e>
 800e276:	f7ff ffbb 	bl	800e1f0 <__hexdig_fun>
 800e27a:	fab0 f580 	clz	r5, r0
 800e27e:	096d      	lsrs	r5, r5, #5
 800e280:	f04f 0b01 	mov.w	fp, #1
 800e284:	464a      	mov	r2, r9
 800e286:	4616      	mov	r6, r2
 800e288:	3201      	adds	r2, #1
 800e28a:	7830      	ldrb	r0, [r6, #0]
 800e28c:	f7ff ffb0 	bl	800e1f0 <__hexdig_fun>
 800e290:	2800      	cmp	r0, #0
 800e292:	d1f8      	bne.n	800e286 <__gethex+0x6a>
 800e294:	498d      	ldr	r1, [pc, #564]	@ (800e4cc <__gethex+0x2b0>)
 800e296:	2201      	movs	r2, #1
 800e298:	4630      	mov	r0, r6
 800e29a:	f7fe ff9e 	bl	800d1da <strncmp>
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	d13f      	bne.n	800e322 <__gethex+0x106>
 800e2a2:	b944      	cbnz	r4, 800e2b6 <__gethex+0x9a>
 800e2a4:	1c74      	adds	r4, r6, #1
 800e2a6:	4622      	mov	r2, r4
 800e2a8:	4616      	mov	r6, r2
 800e2aa:	3201      	adds	r2, #1
 800e2ac:	7830      	ldrb	r0, [r6, #0]
 800e2ae:	f7ff ff9f 	bl	800e1f0 <__hexdig_fun>
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d1f8      	bne.n	800e2a8 <__gethex+0x8c>
 800e2b6:	1ba4      	subs	r4, r4, r6
 800e2b8:	00a7      	lsls	r7, r4, #2
 800e2ba:	7833      	ldrb	r3, [r6, #0]
 800e2bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e2c0:	2b50      	cmp	r3, #80	@ 0x50
 800e2c2:	d13e      	bne.n	800e342 <__gethex+0x126>
 800e2c4:	7873      	ldrb	r3, [r6, #1]
 800e2c6:	2b2b      	cmp	r3, #43	@ 0x2b
 800e2c8:	d033      	beq.n	800e332 <__gethex+0x116>
 800e2ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800e2cc:	d034      	beq.n	800e338 <__gethex+0x11c>
 800e2ce:	1c71      	adds	r1, r6, #1
 800e2d0:	2400      	movs	r4, #0
 800e2d2:	7808      	ldrb	r0, [r1, #0]
 800e2d4:	f7ff ff8c 	bl	800e1f0 <__hexdig_fun>
 800e2d8:	1e43      	subs	r3, r0, #1
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	2b18      	cmp	r3, #24
 800e2de:	d830      	bhi.n	800e342 <__gethex+0x126>
 800e2e0:	f1a0 0210 	sub.w	r2, r0, #16
 800e2e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e2e8:	f7ff ff82 	bl	800e1f0 <__hexdig_fun>
 800e2ec:	f100 3cff 	add.w	ip, r0, #4294967295
 800e2f0:	fa5f fc8c 	uxtb.w	ip, ip
 800e2f4:	f1bc 0f18 	cmp.w	ip, #24
 800e2f8:	f04f 030a 	mov.w	r3, #10
 800e2fc:	d91e      	bls.n	800e33c <__gethex+0x120>
 800e2fe:	b104      	cbz	r4, 800e302 <__gethex+0xe6>
 800e300:	4252      	negs	r2, r2
 800e302:	4417      	add	r7, r2
 800e304:	f8ca 1000 	str.w	r1, [sl]
 800e308:	b1ed      	cbz	r5, 800e346 <__gethex+0x12a>
 800e30a:	f1bb 0f00 	cmp.w	fp, #0
 800e30e:	bf0c      	ite	eq
 800e310:	2506      	moveq	r5, #6
 800e312:	2500      	movne	r5, #0
 800e314:	4628      	mov	r0, r5
 800e316:	b005      	add	sp, #20
 800e318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e31c:	2500      	movs	r5, #0
 800e31e:	462c      	mov	r4, r5
 800e320:	e7b0      	b.n	800e284 <__gethex+0x68>
 800e322:	2c00      	cmp	r4, #0
 800e324:	d1c7      	bne.n	800e2b6 <__gethex+0x9a>
 800e326:	4627      	mov	r7, r4
 800e328:	e7c7      	b.n	800e2ba <__gethex+0x9e>
 800e32a:	464e      	mov	r6, r9
 800e32c:	462f      	mov	r7, r5
 800e32e:	2501      	movs	r5, #1
 800e330:	e7c3      	b.n	800e2ba <__gethex+0x9e>
 800e332:	2400      	movs	r4, #0
 800e334:	1cb1      	adds	r1, r6, #2
 800e336:	e7cc      	b.n	800e2d2 <__gethex+0xb6>
 800e338:	2401      	movs	r4, #1
 800e33a:	e7fb      	b.n	800e334 <__gethex+0x118>
 800e33c:	fb03 0002 	mla	r0, r3, r2, r0
 800e340:	e7ce      	b.n	800e2e0 <__gethex+0xc4>
 800e342:	4631      	mov	r1, r6
 800e344:	e7de      	b.n	800e304 <__gethex+0xe8>
 800e346:	eba6 0309 	sub.w	r3, r6, r9
 800e34a:	3b01      	subs	r3, #1
 800e34c:	4629      	mov	r1, r5
 800e34e:	2b07      	cmp	r3, #7
 800e350:	dc0a      	bgt.n	800e368 <__gethex+0x14c>
 800e352:	9801      	ldr	r0, [sp, #4]
 800e354:	f000 fafc 	bl	800e950 <_Balloc>
 800e358:	4604      	mov	r4, r0
 800e35a:	b940      	cbnz	r0, 800e36e <__gethex+0x152>
 800e35c:	4b5c      	ldr	r3, [pc, #368]	@ (800e4d0 <__gethex+0x2b4>)
 800e35e:	4602      	mov	r2, r0
 800e360:	21e4      	movs	r1, #228	@ 0xe4
 800e362:	485c      	ldr	r0, [pc, #368]	@ (800e4d4 <__gethex+0x2b8>)
 800e364:	f7ff f83e 	bl	800d3e4 <__assert_func>
 800e368:	3101      	adds	r1, #1
 800e36a:	105b      	asrs	r3, r3, #1
 800e36c:	e7ef      	b.n	800e34e <__gethex+0x132>
 800e36e:	f100 0a14 	add.w	sl, r0, #20
 800e372:	2300      	movs	r3, #0
 800e374:	4655      	mov	r5, sl
 800e376:	469b      	mov	fp, r3
 800e378:	45b1      	cmp	r9, r6
 800e37a:	d337      	bcc.n	800e3ec <__gethex+0x1d0>
 800e37c:	f845 bb04 	str.w	fp, [r5], #4
 800e380:	eba5 050a 	sub.w	r5, r5, sl
 800e384:	10ad      	asrs	r5, r5, #2
 800e386:	6125      	str	r5, [r4, #16]
 800e388:	4658      	mov	r0, fp
 800e38a:	f000 fbd3 	bl	800eb34 <__hi0bits>
 800e38e:	016d      	lsls	r5, r5, #5
 800e390:	f8d8 6000 	ldr.w	r6, [r8]
 800e394:	1a2d      	subs	r5, r5, r0
 800e396:	42b5      	cmp	r5, r6
 800e398:	dd54      	ble.n	800e444 <__gethex+0x228>
 800e39a:	1bad      	subs	r5, r5, r6
 800e39c:	4629      	mov	r1, r5
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f000 ff67 	bl	800f272 <__any_on>
 800e3a4:	4681      	mov	r9, r0
 800e3a6:	b178      	cbz	r0, 800e3c8 <__gethex+0x1ac>
 800e3a8:	1e6b      	subs	r3, r5, #1
 800e3aa:	1159      	asrs	r1, r3, #5
 800e3ac:	f003 021f 	and.w	r2, r3, #31
 800e3b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e3b4:	f04f 0901 	mov.w	r9, #1
 800e3b8:	fa09 f202 	lsl.w	r2, r9, r2
 800e3bc:	420a      	tst	r2, r1
 800e3be:	d003      	beq.n	800e3c8 <__gethex+0x1ac>
 800e3c0:	454b      	cmp	r3, r9
 800e3c2:	dc36      	bgt.n	800e432 <__gethex+0x216>
 800e3c4:	f04f 0902 	mov.w	r9, #2
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f7ff febe 	bl	800e14c <rshift>
 800e3d0:	442f      	add	r7, r5
 800e3d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e3d6:	42bb      	cmp	r3, r7
 800e3d8:	da42      	bge.n	800e460 <__gethex+0x244>
 800e3da:	9801      	ldr	r0, [sp, #4]
 800e3dc:	4621      	mov	r1, r4
 800e3de:	f000 faf7 	bl	800e9d0 <_Bfree>
 800e3e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	6013      	str	r3, [r2, #0]
 800e3e8:	25a3      	movs	r5, #163	@ 0xa3
 800e3ea:	e793      	b.n	800e314 <__gethex+0xf8>
 800e3ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e3f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800e3f2:	d012      	beq.n	800e41a <__gethex+0x1fe>
 800e3f4:	2b20      	cmp	r3, #32
 800e3f6:	d104      	bne.n	800e402 <__gethex+0x1e6>
 800e3f8:	f845 bb04 	str.w	fp, [r5], #4
 800e3fc:	f04f 0b00 	mov.w	fp, #0
 800e400:	465b      	mov	r3, fp
 800e402:	7830      	ldrb	r0, [r6, #0]
 800e404:	9303      	str	r3, [sp, #12]
 800e406:	f7ff fef3 	bl	800e1f0 <__hexdig_fun>
 800e40a:	9b03      	ldr	r3, [sp, #12]
 800e40c:	f000 000f 	and.w	r0, r0, #15
 800e410:	4098      	lsls	r0, r3
 800e412:	ea4b 0b00 	orr.w	fp, fp, r0
 800e416:	3304      	adds	r3, #4
 800e418:	e7ae      	b.n	800e378 <__gethex+0x15c>
 800e41a:	45b1      	cmp	r9, r6
 800e41c:	d8ea      	bhi.n	800e3f4 <__gethex+0x1d8>
 800e41e:	492b      	ldr	r1, [pc, #172]	@ (800e4cc <__gethex+0x2b0>)
 800e420:	9303      	str	r3, [sp, #12]
 800e422:	2201      	movs	r2, #1
 800e424:	4630      	mov	r0, r6
 800e426:	f7fe fed8 	bl	800d1da <strncmp>
 800e42a:	9b03      	ldr	r3, [sp, #12]
 800e42c:	2800      	cmp	r0, #0
 800e42e:	d1e1      	bne.n	800e3f4 <__gethex+0x1d8>
 800e430:	e7a2      	b.n	800e378 <__gethex+0x15c>
 800e432:	1ea9      	subs	r1, r5, #2
 800e434:	4620      	mov	r0, r4
 800e436:	f000 ff1c 	bl	800f272 <__any_on>
 800e43a:	2800      	cmp	r0, #0
 800e43c:	d0c2      	beq.n	800e3c4 <__gethex+0x1a8>
 800e43e:	f04f 0903 	mov.w	r9, #3
 800e442:	e7c1      	b.n	800e3c8 <__gethex+0x1ac>
 800e444:	da09      	bge.n	800e45a <__gethex+0x23e>
 800e446:	1b75      	subs	r5, r6, r5
 800e448:	4621      	mov	r1, r4
 800e44a:	9801      	ldr	r0, [sp, #4]
 800e44c:	462a      	mov	r2, r5
 800e44e:	f000 fcd7 	bl	800ee00 <__lshift>
 800e452:	1b7f      	subs	r7, r7, r5
 800e454:	4604      	mov	r4, r0
 800e456:	f100 0a14 	add.w	sl, r0, #20
 800e45a:	f04f 0900 	mov.w	r9, #0
 800e45e:	e7b8      	b.n	800e3d2 <__gethex+0x1b6>
 800e460:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e464:	42bd      	cmp	r5, r7
 800e466:	dd6f      	ble.n	800e548 <__gethex+0x32c>
 800e468:	1bed      	subs	r5, r5, r7
 800e46a:	42ae      	cmp	r6, r5
 800e46c:	dc34      	bgt.n	800e4d8 <__gethex+0x2bc>
 800e46e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e472:	2b02      	cmp	r3, #2
 800e474:	d022      	beq.n	800e4bc <__gethex+0x2a0>
 800e476:	2b03      	cmp	r3, #3
 800e478:	d024      	beq.n	800e4c4 <__gethex+0x2a8>
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d115      	bne.n	800e4aa <__gethex+0x28e>
 800e47e:	42ae      	cmp	r6, r5
 800e480:	d113      	bne.n	800e4aa <__gethex+0x28e>
 800e482:	2e01      	cmp	r6, #1
 800e484:	d10b      	bne.n	800e49e <__gethex+0x282>
 800e486:	9a02      	ldr	r2, [sp, #8]
 800e488:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e48c:	6013      	str	r3, [r2, #0]
 800e48e:	2301      	movs	r3, #1
 800e490:	6123      	str	r3, [r4, #16]
 800e492:	f8ca 3000 	str.w	r3, [sl]
 800e496:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e498:	2562      	movs	r5, #98	@ 0x62
 800e49a:	601c      	str	r4, [r3, #0]
 800e49c:	e73a      	b.n	800e314 <__gethex+0xf8>
 800e49e:	1e71      	subs	r1, r6, #1
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f000 fee6 	bl	800f272 <__any_on>
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	d1ed      	bne.n	800e486 <__gethex+0x26a>
 800e4aa:	9801      	ldr	r0, [sp, #4]
 800e4ac:	4621      	mov	r1, r4
 800e4ae:	f000 fa8f 	bl	800e9d0 <_Bfree>
 800e4b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	6013      	str	r3, [r2, #0]
 800e4b8:	2550      	movs	r5, #80	@ 0x50
 800e4ba:	e72b      	b.n	800e314 <__gethex+0xf8>
 800e4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d1f3      	bne.n	800e4aa <__gethex+0x28e>
 800e4c2:	e7e0      	b.n	800e486 <__gethex+0x26a>
 800e4c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d1dd      	bne.n	800e486 <__gethex+0x26a>
 800e4ca:	e7ee      	b.n	800e4aa <__gethex+0x28e>
 800e4cc:	08011a5c 	.word	0x08011a5c
 800e4d0:	08011d04 	.word	0x08011d04
 800e4d4:	08011d15 	.word	0x08011d15
 800e4d8:	1e6f      	subs	r7, r5, #1
 800e4da:	f1b9 0f00 	cmp.w	r9, #0
 800e4de:	d130      	bne.n	800e542 <__gethex+0x326>
 800e4e0:	b127      	cbz	r7, 800e4ec <__gethex+0x2d0>
 800e4e2:	4639      	mov	r1, r7
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	f000 fec4 	bl	800f272 <__any_on>
 800e4ea:	4681      	mov	r9, r0
 800e4ec:	117a      	asrs	r2, r7, #5
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e4f4:	f007 071f 	and.w	r7, r7, #31
 800e4f8:	40bb      	lsls	r3, r7
 800e4fa:	4213      	tst	r3, r2
 800e4fc:	4629      	mov	r1, r5
 800e4fe:	4620      	mov	r0, r4
 800e500:	bf18      	it	ne
 800e502:	f049 0902 	orrne.w	r9, r9, #2
 800e506:	f7ff fe21 	bl	800e14c <rshift>
 800e50a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e50e:	1b76      	subs	r6, r6, r5
 800e510:	2502      	movs	r5, #2
 800e512:	f1b9 0f00 	cmp.w	r9, #0
 800e516:	d047      	beq.n	800e5a8 <__gethex+0x38c>
 800e518:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e51c:	2b02      	cmp	r3, #2
 800e51e:	d015      	beq.n	800e54c <__gethex+0x330>
 800e520:	2b03      	cmp	r3, #3
 800e522:	d017      	beq.n	800e554 <__gethex+0x338>
 800e524:	2b01      	cmp	r3, #1
 800e526:	d109      	bne.n	800e53c <__gethex+0x320>
 800e528:	f019 0f02 	tst.w	r9, #2
 800e52c:	d006      	beq.n	800e53c <__gethex+0x320>
 800e52e:	f8da 3000 	ldr.w	r3, [sl]
 800e532:	ea49 0903 	orr.w	r9, r9, r3
 800e536:	f019 0f01 	tst.w	r9, #1
 800e53a:	d10e      	bne.n	800e55a <__gethex+0x33e>
 800e53c:	f045 0510 	orr.w	r5, r5, #16
 800e540:	e032      	b.n	800e5a8 <__gethex+0x38c>
 800e542:	f04f 0901 	mov.w	r9, #1
 800e546:	e7d1      	b.n	800e4ec <__gethex+0x2d0>
 800e548:	2501      	movs	r5, #1
 800e54a:	e7e2      	b.n	800e512 <__gethex+0x2f6>
 800e54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e54e:	f1c3 0301 	rsb	r3, r3, #1
 800e552:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e556:	2b00      	cmp	r3, #0
 800e558:	d0f0      	beq.n	800e53c <__gethex+0x320>
 800e55a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e55e:	f104 0314 	add.w	r3, r4, #20
 800e562:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e566:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e56a:	f04f 0c00 	mov.w	ip, #0
 800e56e:	4618      	mov	r0, r3
 800e570:	f853 2b04 	ldr.w	r2, [r3], #4
 800e574:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e578:	d01b      	beq.n	800e5b2 <__gethex+0x396>
 800e57a:	3201      	adds	r2, #1
 800e57c:	6002      	str	r2, [r0, #0]
 800e57e:	2d02      	cmp	r5, #2
 800e580:	f104 0314 	add.w	r3, r4, #20
 800e584:	d13c      	bne.n	800e600 <__gethex+0x3e4>
 800e586:	f8d8 2000 	ldr.w	r2, [r8]
 800e58a:	3a01      	subs	r2, #1
 800e58c:	42b2      	cmp	r2, r6
 800e58e:	d109      	bne.n	800e5a4 <__gethex+0x388>
 800e590:	1171      	asrs	r1, r6, #5
 800e592:	2201      	movs	r2, #1
 800e594:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e598:	f006 061f 	and.w	r6, r6, #31
 800e59c:	fa02 f606 	lsl.w	r6, r2, r6
 800e5a0:	421e      	tst	r6, r3
 800e5a2:	d13a      	bne.n	800e61a <__gethex+0x3fe>
 800e5a4:	f045 0520 	orr.w	r5, r5, #32
 800e5a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5aa:	601c      	str	r4, [r3, #0]
 800e5ac:	9b02      	ldr	r3, [sp, #8]
 800e5ae:	601f      	str	r7, [r3, #0]
 800e5b0:	e6b0      	b.n	800e314 <__gethex+0xf8>
 800e5b2:	4299      	cmp	r1, r3
 800e5b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e5b8:	d8d9      	bhi.n	800e56e <__gethex+0x352>
 800e5ba:	68a3      	ldr	r3, [r4, #8]
 800e5bc:	459b      	cmp	fp, r3
 800e5be:	db17      	blt.n	800e5f0 <__gethex+0x3d4>
 800e5c0:	6861      	ldr	r1, [r4, #4]
 800e5c2:	9801      	ldr	r0, [sp, #4]
 800e5c4:	3101      	adds	r1, #1
 800e5c6:	f000 f9c3 	bl	800e950 <_Balloc>
 800e5ca:	4681      	mov	r9, r0
 800e5cc:	b918      	cbnz	r0, 800e5d6 <__gethex+0x3ba>
 800e5ce:	4b1a      	ldr	r3, [pc, #104]	@ (800e638 <__gethex+0x41c>)
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	2184      	movs	r1, #132	@ 0x84
 800e5d4:	e6c5      	b.n	800e362 <__gethex+0x146>
 800e5d6:	6922      	ldr	r2, [r4, #16]
 800e5d8:	3202      	adds	r2, #2
 800e5da:	f104 010c 	add.w	r1, r4, #12
 800e5de:	0092      	lsls	r2, r2, #2
 800e5e0:	300c      	adds	r0, #12
 800e5e2:	f7fe fee0 	bl	800d3a6 <memcpy>
 800e5e6:	4621      	mov	r1, r4
 800e5e8:	9801      	ldr	r0, [sp, #4]
 800e5ea:	f000 f9f1 	bl	800e9d0 <_Bfree>
 800e5ee:	464c      	mov	r4, r9
 800e5f0:	6923      	ldr	r3, [r4, #16]
 800e5f2:	1c5a      	adds	r2, r3, #1
 800e5f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e5f8:	6122      	str	r2, [r4, #16]
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	615a      	str	r2, [r3, #20]
 800e5fe:	e7be      	b.n	800e57e <__gethex+0x362>
 800e600:	6922      	ldr	r2, [r4, #16]
 800e602:	455a      	cmp	r2, fp
 800e604:	dd0b      	ble.n	800e61e <__gethex+0x402>
 800e606:	2101      	movs	r1, #1
 800e608:	4620      	mov	r0, r4
 800e60a:	f7ff fd9f 	bl	800e14c <rshift>
 800e60e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e612:	3701      	adds	r7, #1
 800e614:	42bb      	cmp	r3, r7
 800e616:	f6ff aee0 	blt.w	800e3da <__gethex+0x1be>
 800e61a:	2501      	movs	r5, #1
 800e61c:	e7c2      	b.n	800e5a4 <__gethex+0x388>
 800e61e:	f016 061f 	ands.w	r6, r6, #31
 800e622:	d0fa      	beq.n	800e61a <__gethex+0x3fe>
 800e624:	4453      	add	r3, sl
 800e626:	f1c6 0620 	rsb	r6, r6, #32
 800e62a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e62e:	f000 fa81 	bl	800eb34 <__hi0bits>
 800e632:	42b0      	cmp	r0, r6
 800e634:	dbe7      	blt.n	800e606 <__gethex+0x3ea>
 800e636:	e7f0      	b.n	800e61a <__gethex+0x3fe>
 800e638:	08011d04 	.word	0x08011d04

0800e63c <L_shift>:
 800e63c:	f1c2 0208 	rsb	r2, r2, #8
 800e640:	0092      	lsls	r2, r2, #2
 800e642:	b570      	push	{r4, r5, r6, lr}
 800e644:	f1c2 0620 	rsb	r6, r2, #32
 800e648:	6843      	ldr	r3, [r0, #4]
 800e64a:	6804      	ldr	r4, [r0, #0]
 800e64c:	fa03 f506 	lsl.w	r5, r3, r6
 800e650:	432c      	orrs	r4, r5
 800e652:	40d3      	lsrs	r3, r2
 800e654:	6004      	str	r4, [r0, #0]
 800e656:	f840 3f04 	str.w	r3, [r0, #4]!
 800e65a:	4288      	cmp	r0, r1
 800e65c:	d3f4      	bcc.n	800e648 <L_shift+0xc>
 800e65e:	bd70      	pop	{r4, r5, r6, pc}

0800e660 <__match>:
 800e660:	b530      	push	{r4, r5, lr}
 800e662:	6803      	ldr	r3, [r0, #0]
 800e664:	3301      	adds	r3, #1
 800e666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e66a:	b914      	cbnz	r4, 800e672 <__match+0x12>
 800e66c:	6003      	str	r3, [r0, #0]
 800e66e:	2001      	movs	r0, #1
 800e670:	bd30      	pop	{r4, r5, pc}
 800e672:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e676:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e67a:	2d19      	cmp	r5, #25
 800e67c:	bf98      	it	ls
 800e67e:	3220      	addls	r2, #32
 800e680:	42a2      	cmp	r2, r4
 800e682:	d0f0      	beq.n	800e666 <__match+0x6>
 800e684:	2000      	movs	r0, #0
 800e686:	e7f3      	b.n	800e670 <__match+0x10>

0800e688 <__hexnan>:
 800e688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e68c:	680b      	ldr	r3, [r1, #0]
 800e68e:	6801      	ldr	r1, [r0, #0]
 800e690:	115e      	asrs	r6, r3, #5
 800e692:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e696:	f013 031f 	ands.w	r3, r3, #31
 800e69a:	b087      	sub	sp, #28
 800e69c:	bf18      	it	ne
 800e69e:	3604      	addne	r6, #4
 800e6a0:	2500      	movs	r5, #0
 800e6a2:	1f37      	subs	r7, r6, #4
 800e6a4:	4682      	mov	sl, r0
 800e6a6:	4690      	mov	r8, r2
 800e6a8:	9301      	str	r3, [sp, #4]
 800e6aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800e6ae:	46b9      	mov	r9, r7
 800e6b0:	463c      	mov	r4, r7
 800e6b2:	9502      	str	r5, [sp, #8]
 800e6b4:	46ab      	mov	fp, r5
 800e6b6:	784a      	ldrb	r2, [r1, #1]
 800e6b8:	1c4b      	adds	r3, r1, #1
 800e6ba:	9303      	str	r3, [sp, #12]
 800e6bc:	b342      	cbz	r2, 800e710 <__hexnan+0x88>
 800e6be:	4610      	mov	r0, r2
 800e6c0:	9105      	str	r1, [sp, #20]
 800e6c2:	9204      	str	r2, [sp, #16]
 800e6c4:	f7ff fd94 	bl	800e1f0 <__hexdig_fun>
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	d151      	bne.n	800e770 <__hexnan+0xe8>
 800e6cc:	9a04      	ldr	r2, [sp, #16]
 800e6ce:	9905      	ldr	r1, [sp, #20]
 800e6d0:	2a20      	cmp	r2, #32
 800e6d2:	d818      	bhi.n	800e706 <__hexnan+0x7e>
 800e6d4:	9b02      	ldr	r3, [sp, #8]
 800e6d6:	459b      	cmp	fp, r3
 800e6d8:	dd13      	ble.n	800e702 <__hexnan+0x7a>
 800e6da:	454c      	cmp	r4, r9
 800e6dc:	d206      	bcs.n	800e6ec <__hexnan+0x64>
 800e6de:	2d07      	cmp	r5, #7
 800e6e0:	dc04      	bgt.n	800e6ec <__hexnan+0x64>
 800e6e2:	462a      	mov	r2, r5
 800e6e4:	4649      	mov	r1, r9
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	f7ff ffa8 	bl	800e63c <L_shift>
 800e6ec:	4544      	cmp	r4, r8
 800e6ee:	d952      	bls.n	800e796 <__hexnan+0x10e>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	f1a4 0904 	sub.w	r9, r4, #4
 800e6f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e6fa:	f8cd b008 	str.w	fp, [sp, #8]
 800e6fe:	464c      	mov	r4, r9
 800e700:	461d      	mov	r5, r3
 800e702:	9903      	ldr	r1, [sp, #12]
 800e704:	e7d7      	b.n	800e6b6 <__hexnan+0x2e>
 800e706:	2a29      	cmp	r2, #41	@ 0x29
 800e708:	d157      	bne.n	800e7ba <__hexnan+0x132>
 800e70a:	3102      	adds	r1, #2
 800e70c:	f8ca 1000 	str.w	r1, [sl]
 800e710:	f1bb 0f00 	cmp.w	fp, #0
 800e714:	d051      	beq.n	800e7ba <__hexnan+0x132>
 800e716:	454c      	cmp	r4, r9
 800e718:	d206      	bcs.n	800e728 <__hexnan+0xa0>
 800e71a:	2d07      	cmp	r5, #7
 800e71c:	dc04      	bgt.n	800e728 <__hexnan+0xa0>
 800e71e:	462a      	mov	r2, r5
 800e720:	4649      	mov	r1, r9
 800e722:	4620      	mov	r0, r4
 800e724:	f7ff ff8a 	bl	800e63c <L_shift>
 800e728:	4544      	cmp	r4, r8
 800e72a:	d936      	bls.n	800e79a <__hexnan+0x112>
 800e72c:	f1a8 0204 	sub.w	r2, r8, #4
 800e730:	4623      	mov	r3, r4
 800e732:	f853 1b04 	ldr.w	r1, [r3], #4
 800e736:	f842 1f04 	str.w	r1, [r2, #4]!
 800e73a:	429f      	cmp	r7, r3
 800e73c:	d2f9      	bcs.n	800e732 <__hexnan+0xaa>
 800e73e:	1b3b      	subs	r3, r7, r4
 800e740:	f023 0303 	bic.w	r3, r3, #3
 800e744:	3304      	adds	r3, #4
 800e746:	3401      	adds	r4, #1
 800e748:	3e03      	subs	r6, #3
 800e74a:	42b4      	cmp	r4, r6
 800e74c:	bf88      	it	hi
 800e74e:	2304      	movhi	r3, #4
 800e750:	4443      	add	r3, r8
 800e752:	2200      	movs	r2, #0
 800e754:	f843 2b04 	str.w	r2, [r3], #4
 800e758:	429f      	cmp	r7, r3
 800e75a:	d2fb      	bcs.n	800e754 <__hexnan+0xcc>
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	b91b      	cbnz	r3, 800e768 <__hexnan+0xe0>
 800e760:	4547      	cmp	r7, r8
 800e762:	d128      	bne.n	800e7b6 <__hexnan+0x12e>
 800e764:	2301      	movs	r3, #1
 800e766:	603b      	str	r3, [r7, #0]
 800e768:	2005      	movs	r0, #5
 800e76a:	b007      	add	sp, #28
 800e76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e770:	3501      	adds	r5, #1
 800e772:	2d08      	cmp	r5, #8
 800e774:	f10b 0b01 	add.w	fp, fp, #1
 800e778:	dd06      	ble.n	800e788 <__hexnan+0x100>
 800e77a:	4544      	cmp	r4, r8
 800e77c:	d9c1      	bls.n	800e702 <__hexnan+0x7a>
 800e77e:	2300      	movs	r3, #0
 800e780:	f844 3c04 	str.w	r3, [r4, #-4]
 800e784:	2501      	movs	r5, #1
 800e786:	3c04      	subs	r4, #4
 800e788:	6822      	ldr	r2, [r4, #0]
 800e78a:	f000 000f 	and.w	r0, r0, #15
 800e78e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e792:	6020      	str	r0, [r4, #0]
 800e794:	e7b5      	b.n	800e702 <__hexnan+0x7a>
 800e796:	2508      	movs	r5, #8
 800e798:	e7b3      	b.n	800e702 <__hexnan+0x7a>
 800e79a:	9b01      	ldr	r3, [sp, #4]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d0dd      	beq.n	800e75c <__hexnan+0xd4>
 800e7a0:	f1c3 0320 	rsb	r3, r3, #32
 800e7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7a8:	40da      	lsrs	r2, r3
 800e7aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e7ae:	4013      	ands	r3, r2
 800e7b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e7b4:	e7d2      	b.n	800e75c <__hexnan+0xd4>
 800e7b6:	3f04      	subs	r7, #4
 800e7b8:	e7d0      	b.n	800e75c <__hexnan+0xd4>
 800e7ba:	2004      	movs	r0, #4
 800e7bc:	e7d5      	b.n	800e76a <__hexnan+0xe2>
	...

0800e7c0 <malloc>:
 800e7c0:	4b02      	ldr	r3, [pc, #8]	@ (800e7cc <malloc+0xc>)
 800e7c2:	4601      	mov	r1, r0
 800e7c4:	6818      	ldr	r0, [r3, #0]
 800e7c6:	f000 b825 	b.w	800e814 <_malloc_r>
 800e7ca:	bf00      	nop
 800e7cc:	20000250 	.word	0x20000250

0800e7d0 <sbrk_aligned>:
 800e7d0:	b570      	push	{r4, r5, r6, lr}
 800e7d2:	4e0f      	ldr	r6, [pc, #60]	@ (800e810 <sbrk_aligned+0x40>)
 800e7d4:	460c      	mov	r4, r1
 800e7d6:	6831      	ldr	r1, [r6, #0]
 800e7d8:	4605      	mov	r5, r0
 800e7da:	b911      	cbnz	r1, 800e7e2 <sbrk_aligned+0x12>
 800e7dc:	f000 ffa6 	bl	800f72c <_sbrk_r>
 800e7e0:	6030      	str	r0, [r6, #0]
 800e7e2:	4621      	mov	r1, r4
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	f000 ffa1 	bl	800f72c <_sbrk_r>
 800e7ea:	1c43      	adds	r3, r0, #1
 800e7ec:	d103      	bne.n	800e7f6 <sbrk_aligned+0x26>
 800e7ee:	f04f 34ff 	mov.w	r4, #4294967295
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	bd70      	pop	{r4, r5, r6, pc}
 800e7f6:	1cc4      	adds	r4, r0, #3
 800e7f8:	f024 0403 	bic.w	r4, r4, #3
 800e7fc:	42a0      	cmp	r0, r4
 800e7fe:	d0f8      	beq.n	800e7f2 <sbrk_aligned+0x22>
 800e800:	1a21      	subs	r1, r4, r0
 800e802:	4628      	mov	r0, r5
 800e804:	f000 ff92 	bl	800f72c <_sbrk_r>
 800e808:	3001      	adds	r0, #1
 800e80a:	d1f2      	bne.n	800e7f2 <sbrk_aligned+0x22>
 800e80c:	e7ef      	b.n	800e7ee <sbrk_aligned+0x1e>
 800e80e:	bf00      	nop
 800e810:	20000890 	.word	0x20000890

0800e814 <_malloc_r>:
 800e814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e818:	1ccd      	adds	r5, r1, #3
 800e81a:	f025 0503 	bic.w	r5, r5, #3
 800e81e:	3508      	adds	r5, #8
 800e820:	2d0c      	cmp	r5, #12
 800e822:	bf38      	it	cc
 800e824:	250c      	movcc	r5, #12
 800e826:	2d00      	cmp	r5, #0
 800e828:	4606      	mov	r6, r0
 800e82a:	db01      	blt.n	800e830 <_malloc_r+0x1c>
 800e82c:	42a9      	cmp	r1, r5
 800e82e:	d904      	bls.n	800e83a <_malloc_r+0x26>
 800e830:	230c      	movs	r3, #12
 800e832:	6033      	str	r3, [r6, #0]
 800e834:	2000      	movs	r0, #0
 800e836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e83a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e910 <_malloc_r+0xfc>
 800e83e:	f000 f87b 	bl	800e938 <__malloc_lock>
 800e842:	f8d8 3000 	ldr.w	r3, [r8]
 800e846:	461c      	mov	r4, r3
 800e848:	bb44      	cbnz	r4, 800e89c <_malloc_r+0x88>
 800e84a:	4629      	mov	r1, r5
 800e84c:	4630      	mov	r0, r6
 800e84e:	f7ff ffbf 	bl	800e7d0 <sbrk_aligned>
 800e852:	1c43      	adds	r3, r0, #1
 800e854:	4604      	mov	r4, r0
 800e856:	d158      	bne.n	800e90a <_malloc_r+0xf6>
 800e858:	f8d8 4000 	ldr.w	r4, [r8]
 800e85c:	4627      	mov	r7, r4
 800e85e:	2f00      	cmp	r7, #0
 800e860:	d143      	bne.n	800e8ea <_malloc_r+0xd6>
 800e862:	2c00      	cmp	r4, #0
 800e864:	d04b      	beq.n	800e8fe <_malloc_r+0xea>
 800e866:	6823      	ldr	r3, [r4, #0]
 800e868:	4639      	mov	r1, r7
 800e86a:	4630      	mov	r0, r6
 800e86c:	eb04 0903 	add.w	r9, r4, r3
 800e870:	f000 ff5c 	bl	800f72c <_sbrk_r>
 800e874:	4581      	cmp	r9, r0
 800e876:	d142      	bne.n	800e8fe <_malloc_r+0xea>
 800e878:	6821      	ldr	r1, [r4, #0]
 800e87a:	1a6d      	subs	r5, r5, r1
 800e87c:	4629      	mov	r1, r5
 800e87e:	4630      	mov	r0, r6
 800e880:	f7ff ffa6 	bl	800e7d0 <sbrk_aligned>
 800e884:	3001      	adds	r0, #1
 800e886:	d03a      	beq.n	800e8fe <_malloc_r+0xea>
 800e888:	6823      	ldr	r3, [r4, #0]
 800e88a:	442b      	add	r3, r5
 800e88c:	6023      	str	r3, [r4, #0]
 800e88e:	f8d8 3000 	ldr.w	r3, [r8]
 800e892:	685a      	ldr	r2, [r3, #4]
 800e894:	bb62      	cbnz	r2, 800e8f0 <_malloc_r+0xdc>
 800e896:	f8c8 7000 	str.w	r7, [r8]
 800e89a:	e00f      	b.n	800e8bc <_malloc_r+0xa8>
 800e89c:	6822      	ldr	r2, [r4, #0]
 800e89e:	1b52      	subs	r2, r2, r5
 800e8a0:	d420      	bmi.n	800e8e4 <_malloc_r+0xd0>
 800e8a2:	2a0b      	cmp	r2, #11
 800e8a4:	d917      	bls.n	800e8d6 <_malloc_r+0xc2>
 800e8a6:	1961      	adds	r1, r4, r5
 800e8a8:	42a3      	cmp	r3, r4
 800e8aa:	6025      	str	r5, [r4, #0]
 800e8ac:	bf18      	it	ne
 800e8ae:	6059      	strne	r1, [r3, #4]
 800e8b0:	6863      	ldr	r3, [r4, #4]
 800e8b2:	bf08      	it	eq
 800e8b4:	f8c8 1000 	streq.w	r1, [r8]
 800e8b8:	5162      	str	r2, [r4, r5]
 800e8ba:	604b      	str	r3, [r1, #4]
 800e8bc:	4630      	mov	r0, r6
 800e8be:	f000 f841 	bl	800e944 <__malloc_unlock>
 800e8c2:	f104 000b 	add.w	r0, r4, #11
 800e8c6:	1d23      	adds	r3, r4, #4
 800e8c8:	f020 0007 	bic.w	r0, r0, #7
 800e8cc:	1ac2      	subs	r2, r0, r3
 800e8ce:	bf1c      	itt	ne
 800e8d0:	1a1b      	subne	r3, r3, r0
 800e8d2:	50a3      	strne	r3, [r4, r2]
 800e8d4:	e7af      	b.n	800e836 <_malloc_r+0x22>
 800e8d6:	6862      	ldr	r2, [r4, #4]
 800e8d8:	42a3      	cmp	r3, r4
 800e8da:	bf0c      	ite	eq
 800e8dc:	f8c8 2000 	streq.w	r2, [r8]
 800e8e0:	605a      	strne	r2, [r3, #4]
 800e8e2:	e7eb      	b.n	800e8bc <_malloc_r+0xa8>
 800e8e4:	4623      	mov	r3, r4
 800e8e6:	6864      	ldr	r4, [r4, #4]
 800e8e8:	e7ae      	b.n	800e848 <_malloc_r+0x34>
 800e8ea:	463c      	mov	r4, r7
 800e8ec:	687f      	ldr	r7, [r7, #4]
 800e8ee:	e7b6      	b.n	800e85e <_malloc_r+0x4a>
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	42a3      	cmp	r3, r4
 800e8f6:	d1fb      	bne.n	800e8f0 <_malloc_r+0xdc>
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	6053      	str	r3, [r2, #4]
 800e8fc:	e7de      	b.n	800e8bc <_malloc_r+0xa8>
 800e8fe:	230c      	movs	r3, #12
 800e900:	6033      	str	r3, [r6, #0]
 800e902:	4630      	mov	r0, r6
 800e904:	f000 f81e 	bl	800e944 <__malloc_unlock>
 800e908:	e794      	b.n	800e834 <_malloc_r+0x20>
 800e90a:	6005      	str	r5, [r0, #0]
 800e90c:	e7d6      	b.n	800e8bc <_malloc_r+0xa8>
 800e90e:	bf00      	nop
 800e910:	20000894 	.word	0x20000894

0800e914 <__ascii_mbtowc>:
 800e914:	b082      	sub	sp, #8
 800e916:	b901      	cbnz	r1, 800e91a <__ascii_mbtowc+0x6>
 800e918:	a901      	add	r1, sp, #4
 800e91a:	b142      	cbz	r2, 800e92e <__ascii_mbtowc+0x1a>
 800e91c:	b14b      	cbz	r3, 800e932 <__ascii_mbtowc+0x1e>
 800e91e:	7813      	ldrb	r3, [r2, #0]
 800e920:	600b      	str	r3, [r1, #0]
 800e922:	7812      	ldrb	r2, [r2, #0]
 800e924:	1e10      	subs	r0, r2, #0
 800e926:	bf18      	it	ne
 800e928:	2001      	movne	r0, #1
 800e92a:	b002      	add	sp, #8
 800e92c:	4770      	bx	lr
 800e92e:	4610      	mov	r0, r2
 800e930:	e7fb      	b.n	800e92a <__ascii_mbtowc+0x16>
 800e932:	f06f 0001 	mvn.w	r0, #1
 800e936:	e7f8      	b.n	800e92a <__ascii_mbtowc+0x16>

0800e938 <__malloc_lock>:
 800e938:	4801      	ldr	r0, [pc, #4]	@ (800e940 <__malloc_lock+0x8>)
 800e93a:	f7fe bd32 	b.w	800d3a2 <__retarget_lock_acquire_recursive>
 800e93e:	bf00      	nop
 800e940:	2000088c 	.word	0x2000088c

0800e944 <__malloc_unlock>:
 800e944:	4801      	ldr	r0, [pc, #4]	@ (800e94c <__malloc_unlock+0x8>)
 800e946:	f7fe bd2d 	b.w	800d3a4 <__retarget_lock_release_recursive>
 800e94a:	bf00      	nop
 800e94c:	2000088c 	.word	0x2000088c

0800e950 <_Balloc>:
 800e950:	b570      	push	{r4, r5, r6, lr}
 800e952:	69c6      	ldr	r6, [r0, #28]
 800e954:	4604      	mov	r4, r0
 800e956:	460d      	mov	r5, r1
 800e958:	b976      	cbnz	r6, 800e978 <_Balloc+0x28>
 800e95a:	2010      	movs	r0, #16
 800e95c:	f7ff ff30 	bl	800e7c0 <malloc>
 800e960:	4602      	mov	r2, r0
 800e962:	61e0      	str	r0, [r4, #28]
 800e964:	b920      	cbnz	r0, 800e970 <_Balloc+0x20>
 800e966:	4b18      	ldr	r3, [pc, #96]	@ (800e9c8 <_Balloc+0x78>)
 800e968:	4818      	ldr	r0, [pc, #96]	@ (800e9cc <_Balloc+0x7c>)
 800e96a:	216b      	movs	r1, #107	@ 0x6b
 800e96c:	f7fe fd3a 	bl	800d3e4 <__assert_func>
 800e970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e974:	6006      	str	r6, [r0, #0]
 800e976:	60c6      	str	r6, [r0, #12]
 800e978:	69e6      	ldr	r6, [r4, #28]
 800e97a:	68f3      	ldr	r3, [r6, #12]
 800e97c:	b183      	cbz	r3, 800e9a0 <_Balloc+0x50>
 800e97e:	69e3      	ldr	r3, [r4, #28]
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e986:	b9b8      	cbnz	r0, 800e9b8 <_Balloc+0x68>
 800e988:	2101      	movs	r1, #1
 800e98a:	fa01 f605 	lsl.w	r6, r1, r5
 800e98e:	1d72      	adds	r2, r6, #5
 800e990:	0092      	lsls	r2, r2, #2
 800e992:	4620      	mov	r0, r4
 800e994:	f000 fee1 	bl	800f75a <_calloc_r>
 800e998:	b160      	cbz	r0, 800e9b4 <_Balloc+0x64>
 800e99a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e99e:	e00e      	b.n	800e9be <_Balloc+0x6e>
 800e9a0:	2221      	movs	r2, #33	@ 0x21
 800e9a2:	2104      	movs	r1, #4
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f000 fed8 	bl	800f75a <_calloc_r>
 800e9aa:	69e3      	ldr	r3, [r4, #28]
 800e9ac:	60f0      	str	r0, [r6, #12]
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d1e4      	bne.n	800e97e <_Balloc+0x2e>
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	bd70      	pop	{r4, r5, r6, pc}
 800e9b8:	6802      	ldr	r2, [r0, #0]
 800e9ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e9be:	2300      	movs	r3, #0
 800e9c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e9c4:	e7f7      	b.n	800e9b6 <_Balloc+0x66>
 800e9c6:	bf00      	nop
 800e9c8:	08011bea 	.word	0x08011bea
 800e9cc:	08011d75 	.word	0x08011d75

0800e9d0 <_Bfree>:
 800e9d0:	b570      	push	{r4, r5, r6, lr}
 800e9d2:	69c6      	ldr	r6, [r0, #28]
 800e9d4:	4605      	mov	r5, r0
 800e9d6:	460c      	mov	r4, r1
 800e9d8:	b976      	cbnz	r6, 800e9f8 <_Bfree+0x28>
 800e9da:	2010      	movs	r0, #16
 800e9dc:	f7ff fef0 	bl	800e7c0 <malloc>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	61e8      	str	r0, [r5, #28]
 800e9e4:	b920      	cbnz	r0, 800e9f0 <_Bfree+0x20>
 800e9e6:	4b09      	ldr	r3, [pc, #36]	@ (800ea0c <_Bfree+0x3c>)
 800e9e8:	4809      	ldr	r0, [pc, #36]	@ (800ea10 <_Bfree+0x40>)
 800e9ea:	218f      	movs	r1, #143	@ 0x8f
 800e9ec:	f7fe fcfa 	bl	800d3e4 <__assert_func>
 800e9f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9f4:	6006      	str	r6, [r0, #0]
 800e9f6:	60c6      	str	r6, [r0, #12]
 800e9f8:	b13c      	cbz	r4, 800ea0a <_Bfree+0x3a>
 800e9fa:	69eb      	ldr	r3, [r5, #28]
 800e9fc:	6862      	ldr	r2, [r4, #4]
 800e9fe:	68db      	ldr	r3, [r3, #12]
 800ea00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea04:	6021      	str	r1, [r4, #0]
 800ea06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea0a:	bd70      	pop	{r4, r5, r6, pc}
 800ea0c:	08011bea 	.word	0x08011bea
 800ea10:	08011d75 	.word	0x08011d75

0800ea14 <__multadd>:
 800ea14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea18:	690d      	ldr	r5, [r1, #16]
 800ea1a:	4607      	mov	r7, r0
 800ea1c:	460c      	mov	r4, r1
 800ea1e:	461e      	mov	r6, r3
 800ea20:	f101 0c14 	add.w	ip, r1, #20
 800ea24:	2000      	movs	r0, #0
 800ea26:	f8dc 3000 	ldr.w	r3, [ip]
 800ea2a:	b299      	uxth	r1, r3
 800ea2c:	fb02 6101 	mla	r1, r2, r1, r6
 800ea30:	0c1e      	lsrs	r6, r3, #16
 800ea32:	0c0b      	lsrs	r3, r1, #16
 800ea34:	fb02 3306 	mla	r3, r2, r6, r3
 800ea38:	b289      	uxth	r1, r1
 800ea3a:	3001      	adds	r0, #1
 800ea3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea40:	4285      	cmp	r5, r0
 800ea42:	f84c 1b04 	str.w	r1, [ip], #4
 800ea46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ea4a:	dcec      	bgt.n	800ea26 <__multadd+0x12>
 800ea4c:	b30e      	cbz	r6, 800ea92 <__multadd+0x7e>
 800ea4e:	68a3      	ldr	r3, [r4, #8]
 800ea50:	42ab      	cmp	r3, r5
 800ea52:	dc19      	bgt.n	800ea88 <__multadd+0x74>
 800ea54:	6861      	ldr	r1, [r4, #4]
 800ea56:	4638      	mov	r0, r7
 800ea58:	3101      	adds	r1, #1
 800ea5a:	f7ff ff79 	bl	800e950 <_Balloc>
 800ea5e:	4680      	mov	r8, r0
 800ea60:	b928      	cbnz	r0, 800ea6e <__multadd+0x5a>
 800ea62:	4602      	mov	r2, r0
 800ea64:	4b0c      	ldr	r3, [pc, #48]	@ (800ea98 <__multadd+0x84>)
 800ea66:	480d      	ldr	r0, [pc, #52]	@ (800ea9c <__multadd+0x88>)
 800ea68:	21ba      	movs	r1, #186	@ 0xba
 800ea6a:	f7fe fcbb 	bl	800d3e4 <__assert_func>
 800ea6e:	6922      	ldr	r2, [r4, #16]
 800ea70:	3202      	adds	r2, #2
 800ea72:	f104 010c 	add.w	r1, r4, #12
 800ea76:	0092      	lsls	r2, r2, #2
 800ea78:	300c      	adds	r0, #12
 800ea7a:	f7fe fc94 	bl	800d3a6 <memcpy>
 800ea7e:	4621      	mov	r1, r4
 800ea80:	4638      	mov	r0, r7
 800ea82:	f7ff ffa5 	bl	800e9d0 <_Bfree>
 800ea86:	4644      	mov	r4, r8
 800ea88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ea8c:	3501      	adds	r5, #1
 800ea8e:	615e      	str	r6, [r3, #20]
 800ea90:	6125      	str	r5, [r4, #16]
 800ea92:	4620      	mov	r0, r4
 800ea94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea98:	08011d04 	.word	0x08011d04
 800ea9c:	08011d75 	.word	0x08011d75

0800eaa0 <__s2b>:
 800eaa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaa4:	460c      	mov	r4, r1
 800eaa6:	4615      	mov	r5, r2
 800eaa8:	461f      	mov	r7, r3
 800eaaa:	2209      	movs	r2, #9
 800eaac:	3308      	adds	r3, #8
 800eaae:	4606      	mov	r6, r0
 800eab0:	fb93 f3f2 	sdiv	r3, r3, r2
 800eab4:	2100      	movs	r1, #0
 800eab6:	2201      	movs	r2, #1
 800eab8:	429a      	cmp	r2, r3
 800eaba:	db09      	blt.n	800ead0 <__s2b+0x30>
 800eabc:	4630      	mov	r0, r6
 800eabe:	f7ff ff47 	bl	800e950 <_Balloc>
 800eac2:	b940      	cbnz	r0, 800ead6 <__s2b+0x36>
 800eac4:	4602      	mov	r2, r0
 800eac6:	4b19      	ldr	r3, [pc, #100]	@ (800eb2c <__s2b+0x8c>)
 800eac8:	4819      	ldr	r0, [pc, #100]	@ (800eb30 <__s2b+0x90>)
 800eaca:	21d3      	movs	r1, #211	@ 0xd3
 800eacc:	f7fe fc8a 	bl	800d3e4 <__assert_func>
 800ead0:	0052      	lsls	r2, r2, #1
 800ead2:	3101      	adds	r1, #1
 800ead4:	e7f0      	b.n	800eab8 <__s2b+0x18>
 800ead6:	9b08      	ldr	r3, [sp, #32]
 800ead8:	6143      	str	r3, [r0, #20]
 800eada:	2d09      	cmp	r5, #9
 800eadc:	f04f 0301 	mov.w	r3, #1
 800eae0:	6103      	str	r3, [r0, #16]
 800eae2:	dd16      	ble.n	800eb12 <__s2b+0x72>
 800eae4:	f104 0909 	add.w	r9, r4, #9
 800eae8:	46c8      	mov	r8, r9
 800eaea:	442c      	add	r4, r5
 800eaec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eaf0:	4601      	mov	r1, r0
 800eaf2:	3b30      	subs	r3, #48	@ 0x30
 800eaf4:	220a      	movs	r2, #10
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	f7ff ff8c 	bl	800ea14 <__multadd>
 800eafc:	45a0      	cmp	r8, r4
 800eafe:	d1f5      	bne.n	800eaec <__s2b+0x4c>
 800eb00:	f1a5 0408 	sub.w	r4, r5, #8
 800eb04:	444c      	add	r4, r9
 800eb06:	1b2d      	subs	r5, r5, r4
 800eb08:	1963      	adds	r3, r4, r5
 800eb0a:	42bb      	cmp	r3, r7
 800eb0c:	db04      	blt.n	800eb18 <__s2b+0x78>
 800eb0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb12:	340a      	adds	r4, #10
 800eb14:	2509      	movs	r5, #9
 800eb16:	e7f6      	b.n	800eb06 <__s2b+0x66>
 800eb18:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eb1c:	4601      	mov	r1, r0
 800eb1e:	3b30      	subs	r3, #48	@ 0x30
 800eb20:	220a      	movs	r2, #10
 800eb22:	4630      	mov	r0, r6
 800eb24:	f7ff ff76 	bl	800ea14 <__multadd>
 800eb28:	e7ee      	b.n	800eb08 <__s2b+0x68>
 800eb2a:	bf00      	nop
 800eb2c:	08011d04 	.word	0x08011d04
 800eb30:	08011d75 	.word	0x08011d75

0800eb34 <__hi0bits>:
 800eb34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eb38:	4603      	mov	r3, r0
 800eb3a:	bf36      	itet	cc
 800eb3c:	0403      	lslcc	r3, r0, #16
 800eb3e:	2000      	movcs	r0, #0
 800eb40:	2010      	movcc	r0, #16
 800eb42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eb46:	bf3c      	itt	cc
 800eb48:	021b      	lslcc	r3, r3, #8
 800eb4a:	3008      	addcc	r0, #8
 800eb4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb50:	bf3c      	itt	cc
 800eb52:	011b      	lslcc	r3, r3, #4
 800eb54:	3004      	addcc	r0, #4
 800eb56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb5a:	bf3c      	itt	cc
 800eb5c:	009b      	lslcc	r3, r3, #2
 800eb5e:	3002      	addcc	r0, #2
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	db05      	blt.n	800eb70 <__hi0bits+0x3c>
 800eb64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eb68:	f100 0001 	add.w	r0, r0, #1
 800eb6c:	bf08      	it	eq
 800eb6e:	2020      	moveq	r0, #32
 800eb70:	4770      	bx	lr

0800eb72 <__lo0bits>:
 800eb72:	6803      	ldr	r3, [r0, #0]
 800eb74:	4602      	mov	r2, r0
 800eb76:	f013 0007 	ands.w	r0, r3, #7
 800eb7a:	d00b      	beq.n	800eb94 <__lo0bits+0x22>
 800eb7c:	07d9      	lsls	r1, r3, #31
 800eb7e:	d421      	bmi.n	800ebc4 <__lo0bits+0x52>
 800eb80:	0798      	lsls	r0, r3, #30
 800eb82:	bf49      	itett	mi
 800eb84:	085b      	lsrmi	r3, r3, #1
 800eb86:	089b      	lsrpl	r3, r3, #2
 800eb88:	2001      	movmi	r0, #1
 800eb8a:	6013      	strmi	r3, [r2, #0]
 800eb8c:	bf5c      	itt	pl
 800eb8e:	6013      	strpl	r3, [r2, #0]
 800eb90:	2002      	movpl	r0, #2
 800eb92:	4770      	bx	lr
 800eb94:	b299      	uxth	r1, r3
 800eb96:	b909      	cbnz	r1, 800eb9c <__lo0bits+0x2a>
 800eb98:	0c1b      	lsrs	r3, r3, #16
 800eb9a:	2010      	movs	r0, #16
 800eb9c:	b2d9      	uxtb	r1, r3
 800eb9e:	b909      	cbnz	r1, 800eba4 <__lo0bits+0x32>
 800eba0:	3008      	adds	r0, #8
 800eba2:	0a1b      	lsrs	r3, r3, #8
 800eba4:	0719      	lsls	r1, r3, #28
 800eba6:	bf04      	itt	eq
 800eba8:	091b      	lsreq	r3, r3, #4
 800ebaa:	3004      	addeq	r0, #4
 800ebac:	0799      	lsls	r1, r3, #30
 800ebae:	bf04      	itt	eq
 800ebb0:	089b      	lsreq	r3, r3, #2
 800ebb2:	3002      	addeq	r0, #2
 800ebb4:	07d9      	lsls	r1, r3, #31
 800ebb6:	d403      	bmi.n	800ebc0 <__lo0bits+0x4e>
 800ebb8:	085b      	lsrs	r3, r3, #1
 800ebba:	f100 0001 	add.w	r0, r0, #1
 800ebbe:	d003      	beq.n	800ebc8 <__lo0bits+0x56>
 800ebc0:	6013      	str	r3, [r2, #0]
 800ebc2:	4770      	bx	lr
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	4770      	bx	lr
 800ebc8:	2020      	movs	r0, #32
 800ebca:	4770      	bx	lr

0800ebcc <__i2b>:
 800ebcc:	b510      	push	{r4, lr}
 800ebce:	460c      	mov	r4, r1
 800ebd0:	2101      	movs	r1, #1
 800ebd2:	f7ff febd 	bl	800e950 <_Balloc>
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	b928      	cbnz	r0, 800ebe6 <__i2b+0x1a>
 800ebda:	4b05      	ldr	r3, [pc, #20]	@ (800ebf0 <__i2b+0x24>)
 800ebdc:	4805      	ldr	r0, [pc, #20]	@ (800ebf4 <__i2b+0x28>)
 800ebde:	f240 1145 	movw	r1, #325	@ 0x145
 800ebe2:	f7fe fbff 	bl	800d3e4 <__assert_func>
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	6144      	str	r4, [r0, #20]
 800ebea:	6103      	str	r3, [r0, #16]
 800ebec:	bd10      	pop	{r4, pc}
 800ebee:	bf00      	nop
 800ebf0:	08011d04 	.word	0x08011d04
 800ebf4:	08011d75 	.word	0x08011d75

0800ebf8 <__multiply>:
 800ebf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebfc:	4614      	mov	r4, r2
 800ebfe:	690a      	ldr	r2, [r1, #16]
 800ec00:	6923      	ldr	r3, [r4, #16]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	bfa8      	it	ge
 800ec06:	4623      	movge	r3, r4
 800ec08:	460f      	mov	r7, r1
 800ec0a:	bfa4      	itt	ge
 800ec0c:	460c      	movge	r4, r1
 800ec0e:	461f      	movge	r7, r3
 800ec10:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ec14:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ec18:	68a3      	ldr	r3, [r4, #8]
 800ec1a:	6861      	ldr	r1, [r4, #4]
 800ec1c:	eb0a 0609 	add.w	r6, sl, r9
 800ec20:	42b3      	cmp	r3, r6
 800ec22:	b085      	sub	sp, #20
 800ec24:	bfb8      	it	lt
 800ec26:	3101      	addlt	r1, #1
 800ec28:	f7ff fe92 	bl	800e950 <_Balloc>
 800ec2c:	b930      	cbnz	r0, 800ec3c <__multiply+0x44>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	4b44      	ldr	r3, [pc, #272]	@ (800ed44 <__multiply+0x14c>)
 800ec32:	4845      	ldr	r0, [pc, #276]	@ (800ed48 <__multiply+0x150>)
 800ec34:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ec38:	f7fe fbd4 	bl	800d3e4 <__assert_func>
 800ec3c:	f100 0514 	add.w	r5, r0, #20
 800ec40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ec44:	462b      	mov	r3, r5
 800ec46:	2200      	movs	r2, #0
 800ec48:	4543      	cmp	r3, r8
 800ec4a:	d321      	bcc.n	800ec90 <__multiply+0x98>
 800ec4c:	f107 0114 	add.w	r1, r7, #20
 800ec50:	f104 0214 	add.w	r2, r4, #20
 800ec54:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ec58:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ec5c:	9302      	str	r3, [sp, #8]
 800ec5e:	1b13      	subs	r3, r2, r4
 800ec60:	3b15      	subs	r3, #21
 800ec62:	f023 0303 	bic.w	r3, r3, #3
 800ec66:	3304      	adds	r3, #4
 800ec68:	f104 0715 	add.w	r7, r4, #21
 800ec6c:	42ba      	cmp	r2, r7
 800ec6e:	bf38      	it	cc
 800ec70:	2304      	movcc	r3, #4
 800ec72:	9301      	str	r3, [sp, #4]
 800ec74:	9b02      	ldr	r3, [sp, #8]
 800ec76:	9103      	str	r1, [sp, #12]
 800ec78:	428b      	cmp	r3, r1
 800ec7a:	d80c      	bhi.n	800ec96 <__multiply+0x9e>
 800ec7c:	2e00      	cmp	r6, #0
 800ec7e:	dd03      	ble.n	800ec88 <__multiply+0x90>
 800ec80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d05b      	beq.n	800ed40 <__multiply+0x148>
 800ec88:	6106      	str	r6, [r0, #16]
 800ec8a:	b005      	add	sp, #20
 800ec8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec90:	f843 2b04 	str.w	r2, [r3], #4
 800ec94:	e7d8      	b.n	800ec48 <__multiply+0x50>
 800ec96:	f8b1 a000 	ldrh.w	sl, [r1]
 800ec9a:	f1ba 0f00 	cmp.w	sl, #0
 800ec9e:	d024      	beq.n	800ecea <__multiply+0xf2>
 800eca0:	f104 0e14 	add.w	lr, r4, #20
 800eca4:	46a9      	mov	r9, r5
 800eca6:	f04f 0c00 	mov.w	ip, #0
 800ecaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ecae:	f8d9 3000 	ldr.w	r3, [r9]
 800ecb2:	fa1f fb87 	uxth.w	fp, r7
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	fb0a 330b 	mla	r3, sl, fp, r3
 800ecbc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ecc0:	f8d9 7000 	ldr.w	r7, [r9]
 800ecc4:	4463      	add	r3, ip
 800ecc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ecca:	fb0a c70b 	mla	r7, sl, fp, ip
 800ecce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ecd8:	4572      	cmp	r2, lr
 800ecda:	f849 3b04 	str.w	r3, [r9], #4
 800ecde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ece2:	d8e2      	bhi.n	800ecaa <__multiply+0xb2>
 800ece4:	9b01      	ldr	r3, [sp, #4]
 800ece6:	f845 c003 	str.w	ip, [r5, r3]
 800ecea:	9b03      	ldr	r3, [sp, #12]
 800ecec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ecf0:	3104      	adds	r1, #4
 800ecf2:	f1b9 0f00 	cmp.w	r9, #0
 800ecf6:	d021      	beq.n	800ed3c <__multiply+0x144>
 800ecf8:	682b      	ldr	r3, [r5, #0]
 800ecfa:	f104 0c14 	add.w	ip, r4, #20
 800ecfe:	46ae      	mov	lr, r5
 800ed00:	f04f 0a00 	mov.w	sl, #0
 800ed04:	f8bc b000 	ldrh.w	fp, [ip]
 800ed08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ed0c:	fb09 770b 	mla	r7, r9, fp, r7
 800ed10:	4457      	add	r7, sl
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ed18:	f84e 3b04 	str.w	r3, [lr], #4
 800ed1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ed20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed24:	f8be 3000 	ldrh.w	r3, [lr]
 800ed28:	fb09 330a 	mla	r3, r9, sl, r3
 800ed2c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ed30:	4562      	cmp	r2, ip
 800ed32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed36:	d8e5      	bhi.n	800ed04 <__multiply+0x10c>
 800ed38:	9f01      	ldr	r7, [sp, #4]
 800ed3a:	51eb      	str	r3, [r5, r7]
 800ed3c:	3504      	adds	r5, #4
 800ed3e:	e799      	b.n	800ec74 <__multiply+0x7c>
 800ed40:	3e01      	subs	r6, #1
 800ed42:	e79b      	b.n	800ec7c <__multiply+0x84>
 800ed44:	08011d04 	.word	0x08011d04
 800ed48:	08011d75 	.word	0x08011d75

0800ed4c <__pow5mult>:
 800ed4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed50:	4615      	mov	r5, r2
 800ed52:	f012 0203 	ands.w	r2, r2, #3
 800ed56:	4607      	mov	r7, r0
 800ed58:	460e      	mov	r6, r1
 800ed5a:	d007      	beq.n	800ed6c <__pow5mult+0x20>
 800ed5c:	4c25      	ldr	r4, [pc, #148]	@ (800edf4 <__pow5mult+0xa8>)
 800ed5e:	3a01      	subs	r2, #1
 800ed60:	2300      	movs	r3, #0
 800ed62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed66:	f7ff fe55 	bl	800ea14 <__multadd>
 800ed6a:	4606      	mov	r6, r0
 800ed6c:	10ad      	asrs	r5, r5, #2
 800ed6e:	d03d      	beq.n	800edec <__pow5mult+0xa0>
 800ed70:	69fc      	ldr	r4, [r7, #28]
 800ed72:	b97c      	cbnz	r4, 800ed94 <__pow5mult+0x48>
 800ed74:	2010      	movs	r0, #16
 800ed76:	f7ff fd23 	bl	800e7c0 <malloc>
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	61f8      	str	r0, [r7, #28]
 800ed7e:	b928      	cbnz	r0, 800ed8c <__pow5mult+0x40>
 800ed80:	4b1d      	ldr	r3, [pc, #116]	@ (800edf8 <__pow5mult+0xac>)
 800ed82:	481e      	ldr	r0, [pc, #120]	@ (800edfc <__pow5mult+0xb0>)
 800ed84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ed88:	f7fe fb2c 	bl	800d3e4 <__assert_func>
 800ed8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed90:	6004      	str	r4, [r0, #0]
 800ed92:	60c4      	str	r4, [r0, #12]
 800ed94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ed98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed9c:	b94c      	cbnz	r4, 800edb2 <__pow5mult+0x66>
 800ed9e:	f240 2171 	movw	r1, #625	@ 0x271
 800eda2:	4638      	mov	r0, r7
 800eda4:	f7ff ff12 	bl	800ebcc <__i2b>
 800eda8:	2300      	movs	r3, #0
 800edaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800edae:	4604      	mov	r4, r0
 800edb0:	6003      	str	r3, [r0, #0]
 800edb2:	f04f 0900 	mov.w	r9, #0
 800edb6:	07eb      	lsls	r3, r5, #31
 800edb8:	d50a      	bpl.n	800edd0 <__pow5mult+0x84>
 800edba:	4631      	mov	r1, r6
 800edbc:	4622      	mov	r2, r4
 800edbe:	4638      	mov	r0, r7
 800edc0:	f7ff ff1a 	bl	800ebf8 <__multiply>
 800edc4:	4631      	mov	r1, r6
 800edc6:	4680      	mov	r8, r0
 800edc8:	4638      	mov	r0, r7
 800edca:	f7ff fe01 	bl	800e9d0 <_Bfree>
 800edce:	4646      	mov	r6, r8
 800edd0:	106d      	asrs	r5, r5, #1
 800edd2:	d00b      	beq.n	800edec <__pow5mult+0xa0>
 800edd4:	6820      	ldr	r0, [r4, #0]
 800edd6:	b938      	cbnz	r0, 800ede8 <__pow5mult+0x9c>
 800edd8:	4622      	mov	r2, r4
 800edda:	4621      	mov	r1, r4
 800eddc:	4638      	mov	r0, r7
 800edde:	f7ff ff0b 	bl	800ebf8 <__multiply>
 800ede2:	6020      	str	r0, [r4, #0]
 800ede4:	f8c0 9000 	str.w	r9, [r0]
 800ede8:	4604      	mov	r4, r0
 800edea:	e7e4      	b.n	800edb6 <__pow5mult+0x6a>
 800edec:	4630      	mov	r0, r6
 800edee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edf2:	bf00      	nop
 800edf4:	08011dd0 	.word	0x08011dd0
 800edf8:	08011bea 	.word	0x08011bea
 800edfc:	08011d75 	.word	0x08011d75

0800ee00 <__lshift>:
 800ee00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee04:	460c      	mov	r4, r1
 800ee06:	6849      	ldr	r1, [r1, #4]
 800ee08:	6923      	ldr	r3, [r4, #16]
 800ee0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee0e:	68a3      	ldr	r3, [r4, #8]
 800ee10:	4607      	mov	r7, r0
 800ee12:	4691      	mov	r9, r2
 800ee14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee18:	f108 0601 	add.w	r6, r8, #1
 800ee1c:	42b3      	cmp	r3, r6
 800ee1e:	db0b      	blt.n	800ee38 <__lshift+0x38>
 800ee20:	4638      	mov	r0, r7
 800ee22:	f7ff fd95 	bl	800e950 <_Balloc>
 800ee26:	4605      	mov	r5, r0
 800ee28:	b948      	cbnz	r0, 800ee3e <__lshift+0x3e>
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	4b28      	ldr	r3, [pc, #160]	@ (800eed0 <__lshift+0xd0>)
 800ee2e:	4829      	ldr	r0, [pc, #164]	@ (800eed4 <__lshift+0xd4>)
 800ee30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ee34:	f7fe fad6 	bl	800d3e4 <__assert_func>
 800ee38:	3101      	adds	r1, #1
 800ee3a:	005b      	lsls	r3, r3, #1
 800ee3c:	e7ee      	b.n	800ee1c <__lshift+0x1c>
 800ee3e:	2300      	movs	r3, #0
 800ee40:	f100 0114 	add.w	r1, r0, #20
 800ee44:	f100 0210 	add.w	r2, r0, #16
 800ee48:	4618      	mov	r0, r3
 800ee4a:	4553      	cmp	r3, sl
 800ee4c:	db33      	blt.n	800eeb6 <__lshift+0xb6>
 800ee4e:	6920      	ldr	r0, [r4, #16]
 800ee50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee54:	f104 0314 	add.w	r3, r4, #20
 800ee58:	f019 091f 	ands.w	r9, r9, #31
 800ee5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ee64:	d02b      	beq.n	800eebe <__lshift+0xbe>
 800ee66:	f1c9 0e20 	rsb	lr, r9, #32
 800ee6a:	468a      	mov	sl, r1
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	6818      	ldr	r0, [r3, #0]
 800ee70:	fa00 f009 	lsl.w	r0, r0, r9
 800ee74:	4310      	orrs	r0, r2
 800ee76:	f84a 0b04 	str.w	r0, [sl], #4
 800ee7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee7e:	459c      	cmp	ip, r3
 800ee80:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee84:	d8f3      	bhi.n	800ee6e <__lshift+0x6e>
 800ee86:	ebac 0304 	sub.w	r3, ip, r4
 800ee8a:	3b15      	subs	r3, #21
 800ee8c:	f023 0303 	bic.w	r3, r3, #3
 800ee90:	3304      	adds	r3, #4
 800ee92:	f104 0015 	add.w	r0, r4, #21
 800ee96:	4584      	cmp	ip, r0
 800ee98:	bf38      	it	cc
 800ee9a:	2304      	movcc	r3, #4
 800ee9c:	50ca      	str	r2, [r1, r3]
 800ee9e:	b10a      	cbz	r2, 800eea4 <__lshift+0xa4>
 800eea0:	f108 0602 	add.w	r6, r8, #2
 800eea4:	3e01      	subs	r6, #1
 800eea6:	4638      	mov	r0, r7
 800eea8:	612e      	str	r6, [r5, #16]
 800eeaa:	4621      	mov	r1, r4
 800eeac:	f7ff fd90 	bl	800e9d0 <_Bfree>
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeb6:	f842 0f04 	str.w	r0, [r2, #4]!
 800eeba:	3301      	adds	r3, #1
 800eebc:	e7c5      	b.n	800ee4a <__lshift+0x4a>
 800eebe:	3904      	subs	r1, #4
 800eec0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eec4:	f841 2f04 	str.w	r2, [r1, #4]!
 800eec8:	459c      	cmp	ip, r3
 800eeca:	d8f9      	bhi.n	800eec0 <__lshift+0xc0>
 800eecc:	e7ea      	b.n	800eea4 <__lshift+0xa4>
 800eece:	bf00      	nop
 800eed0:	08011d04 	.word	0x08011d04
 800eed4:	08011d75 	.word	0x08011d75

0800eed8 <__mcmp>:
 800eed8:	690a      	ldr	r2, [r1, #16]
 800eeda:	4603      	mov	r3, r0
 800eedc:	6900      	ldr	r0, [r0, #16]
 800eede:	1a80      	subs	r0, r0, r2
 800eee0:	b530      	push	{r4, r5, lr}
 800eee2:	d10e      	bne.n	800ef02 <__mcmp+0x2a>
 800eee4:	3314      	adds	r3, #20
 800eee6:	3114      	adds	r1, #20
 800eee8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eeec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eef0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eef4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eef8:	4295      	cmp	r5, r2
 800eefa:	d003      	beq.n	800ef04 <__mcmp+0x2c>
 800eefc:	d205      	bcs.n	800ef0a <__mcmp+0x32>
 800eefe:	f04f 30ff 	mov.w	r0, #4294967295
 800ef02:	bd30      	pop	{r4, r5, pc}
 800ef04:	42a3      	cmp	r3, r4
 800ef06:	d3f3      	bcc.n	800eef0 <__mcmp+0x18>
 800ef08:	e7fb      	b.n	800ef02 <__mcmp+0x2a>
 800ef0a:	2001      	movs	r0, #1
 800ef0c:	e7f9      	b.n	800ef02 <__mcmp+0x2a>
	...

0800ef10 <__mdiff>:
 800ef10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef14:	4689      	mov	r9, r1
 800ef16:	4606      	mov	r6, r0
 800ef18:	4611      	mov	r1, r2
 800ef1a:	4648      	mov	r0, r9
 800ef1c:	4614      	mov	r4, r2
 800ef1e:	f7ff ffdb 	bl	800eed8 <__mcmp>
 800ef22:	1e05      	subs	r5, r0, #0
 800ef24:	d112      	bne.n	800ef4c <__mdiff+0x3c>
 800ef26:	4629      	mov	r1, r5
 800ef28:	4630      	mov	r0, r6
 800ef2a:	f7ff fd11 	bl	800e950 <_Balloc>
 800ef2e:	4602      	mov	r2, r0
 800ef30:	b928      	cbnz	r0, 800ef3e <__mdiff+0x2e>
 800ef32:	4b3f      	ldr	r3, [pc, #252]	@ (800f030 <__mdiff+0x120>)
 800ef34:	f240 2137 	movw	r1, #567	@ 0x237
 800ef38:	483e      	ldr	r0, [pc, #248]	@ (800f034 <__mdiff+0x124>)
 800ef3a:	f7fe fa53 	bl	800d3e4 <__assert_func>
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef44:	4610      	mov	r0, r2
 800ef46:	b003      	add	sp, #12
 800ef48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef4c:	bfbc      	itt	lt
 800ef4e:	464b      	movlt	r3, r9
 800ef50:	46a1      	movlt	r9, r4
 800ef52:	4630      	mov	r0, r6
 800ef54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ef58:	bfba      	itte	lt
 800ef5a:	461c      	movlt	r4, r3
 800ef5c:	2501      	movlt	r5, #1
 800ef5e:	2500      	movge	r5, #0
 800ef60:	f7ff fcf6 	bl	800e950 <_Balloc>
 800ef64:	4602      	mov	r2, r0
 800ef66:	b918      	cbnz	r0, 800ef70 <__mdiff+0x60>
 800ef68:	4b31      	ldr	r3, [pc, #196]	@ (800f030 <__mdiff+0x120>)
 800ef6a:	f240 2145 	movw	r1, #581	@ 0x245
 800ef6e:	e7e3      	b.n	800ef38 <__mdiff+0x28>
 800ef70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ef74:	6926      	ldr	r6, [r4, #16]
 800ef76:	60c5      	str	r5, [r0, #12]
 800ef78:	f109 0310 	add.w	r3, r9, #16
 800ef7c:	f109 0514 	add.w	r5, r9, #20
 800ef80:	f104 0e14 	add.w	lr, r4, #20
 800ef84:	f100 0b14 	add.w	fp, r0, #20
 800ef88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ef8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ef90:	9301      	str	r3, [sp, #4]
 800ef92:	46d9      	mov	r9, fp
 800ef94:	f04f 0c00 	mov.w	ip, #0
 800ef98:	9b01      	ldr	r3, [sp, #4]
 800ef9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ef9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800efa2:	9301      	str	r3, [sp, #4]
 800efa4:	fa1f f38a 	uxth.w	r3, sl
 800efa8:	4619      	mov	r1, r3
 800efaa:	b283      	uxth	r3, r0
 800efac:	1acb      	subs	r3, r1, r3
 800efae:	0c00      	lsrs	r0, r0, #16
 800efb0:	4463      	add	r3, ip
 800efb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800efb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800efba:	b29b      	uxth	r3, r3
 800efbc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800efc0:	4576      	cmp	r6, lr
 800efc2:	f849 3b04 	str.w	r3, [r9], #4
 800efc6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800efca:	d8e5      	bhi.n	800ef98 <__mdiff+0x88>
 800efcc:	1b33      	subs	r3, r6, r4
 800efce:	3b15      	subs	r3, #21
 800efd0:	f023 0303 	bic.w	r3, r3, #3
 800efd4:	3415      	adds	r4, #21
 800efd6:	3304      	adds	r3, #4
 800efd8:	42a6      	cmp	r6, r4
 800efda:	bf38      	it	cc
 800efdc:	2304      	movcc	r3, #4
 800efde:	441d      	add	r5, r3
 800efe0:	445b      	add	r3, fp
 800efe2:	461e      	mov	r6, r3
 800efe4:	462c      	mov	r4, r5
 800efe6:	4544      	cmp	r4, r8
 800efe8:	d30e      	bcc.n	800f008 <__mdiff+0xf8>
 800efea:	f108 0103 	add.w	r1, r8, #3
 800efee:	1b49      	subs	r1, r1, r5
 800eff0:	f021 0103 	bic.w	r1, r1, #3
 800eff4:	3d03      	subs	r5, #3
 800eff6:	45a8      	cmp	r8, r5
 800eff8:	bf38      	it	cc
 800effa:	2100      	movcc	r1, #0
 800effc:	440b      	add	r3, r1
 800effe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f002:	b191      	cbz	r1, 800f02a <__mdiff+0x11a>
 800f004:	6117      	str	r7, [r2, #16]
 800f006:	e79d      	b.n	800ef44 <__mdiff+0x34>
 800f008:	f854 1b04 	ldr.w	r1, [r4], #4
 800f00c:	46e6      	mov	lr, ip
 800f00e:	0c08      	lsrs	r0, r1, #16
 800f010:	fa1c fc81 	uxtah	ip, ip, r1
 800f014:	4471      	add	r1, lr
 800f016:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f01a:	b289      	uxth	r1, r1
 800f01c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f020:	f846 1b04 	str.w	r1, [r6], #4
 800f024:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f028:	e7dd      	b.n	800efe6 <__mdiff+0xd6>
 800f02a:	3f01      	subs	r7, #1
 800f02c:	e7e7      	b.n	800effe <__mdiff+0xee>
 800f02e:	bf00      	nop
 800f030:	08011d04 	.word	0x08011d04
 800f034:	08011d75 	.word	0x08011d75

0800f038 <__ulp>:
 800f038:	b082      	sub	sp, #8
 800f03a:	ed8d 0b00 	vstr	d0, [sp]
 800f03e:	9a01      	ldr	r2, [sp, #4]
 800f040:	4b0f      	ldr	r3, [pc, #60]	@ (800f080 <__ulp+0x48>)
 800f042:	4013      	ands	r3, r2
 800f044:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f048:	2b00      	cmp	r3, #0
 800f04a:	dc08      	bgt.n	800f05e <__ulp+0x26>
 800f04c:	425b      	negs	r3, r3
 800f04e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f052:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f056:	da04      	bge.n	800f062 <__ulp+0x2a>
 800f058:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f05c:	4113      	asrs	r3, r2
 800f05e:	2200      	movs	r2, #0
 800f060:	e008      	b.n	800f074 <__ulp+0x3c>
 800f062:	f1a2 0314 	sub.w	r3, r2, #20
 800f066:	2b1e      	cmp	r3, #30
 800f068:	bfda      	itte	le
 800f06a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f06e:	40da      	lsrle	r2, r3
 800f070:	2201      	movgt	r2, #1
 800f072:	2300      	movs	r3, #0
 800f074:	4619      	mov	r1, r3
 800f076:	4610      	mov	r0, r2
 800f078:	ec41 0b10 	vmov	d0, r0, r1
 800f07c:	b002      	add	sp, #8
 800f07e:	4770      	bx	lr
 800f080:	7ff00000 	.word	0x7ff00000

0800f084 <__b2d>:
 800f084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f088:	6906      	ldr	r6, [r0, #16]
 800f08a:	f100 0814 	add.w	r8, r0, #20
 800f08e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f092:	1f37      	subs	r7, r6, #4
 800f094:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f098:	4610      	mov	r0, r2
 800f09a:	f7ff fd4b 	bl	800eb34 <__hi0bits>
 800f09e:	f1c0 0320 	rsb	r3, r0, #32
 800f0a2:	280a      	cmp	r0, #10
 800f0a4:	600b      	str	r3, [r1, #0]
 800f0a6:	491b      	ldr	r1, [pc, #108]	@ (800f114 <__b2d+0x90>)
 800f0a8:	dc15      	bgt.n	800f0d6 <__b2d+0x52>
 800f0aa:	f1c0 0c0b 	rsb	ip, r0, #11
 800f0ae:	fa22 f30c 	lsr.w	r3, r2, ip
 800f0b2:	45b8      	cmp	r8, r7
 800f0b4:	ea43 0501 	orr.w	r5, r3, r1
 800f0b8:	bf34      	ite	cc
 800f0ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f0be:	2300      	movcs	r3, #0
 800f0c0:	3015      	adds	r0, #21
 800f0c2:	fa02 f000 	lsl.w	r0, r2, r0
 800f0c6:	fa23 f30c 	lsr.w	r3, r3, ip
 800f0ca:	4303      	orrs	r3, r0
 800f0cc:	461c      	mov	r4, r3
 800f0ce:	ec45 4b10 	vmov	d0, r4, r5
 800f0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0d6:	45b8      	cmp	r8, r7
 800f0d8:	bf3a      	itte	cc
 800f0da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f0de:	f1a6 0708 	subcc.w	r7, r6, #8
 800f0e2:	2300      	movcs	r3, #0
 800f0e4:	380b      	subs	r0, #11
 800f0e6:	d012      	beq.n	800f10e <__b2d+0x8a>
 800f0e8:	f1c0 0120 	rsb	r1, r0, #32
 800f0ec:	fa23 f401 	lsr.w	r4, r3, r1
 800f0f0:	4082      	lsls	r2, r0
 800f0f2:	4322      	orrs	r2, r4
 800f0f4:	4547      	cmp	r7, r8
 800f0f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f0fa:	bf8c      	ite	hi
 800f0fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f100:	2200      	movls	r2, #0
 800f102:	4083      	lsls	r3, r0
 800f104:	40ca      	lsrs	r2, r1
 800f106:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f10a:	4313      	orrs	r3, r2
 800f10c:	e7de      	b.n	800f0cc <__b2d+0x48>
 800f10e:	ea42 0501 	orr.w	r5, r2, r1
 800f112:	e7db      	b.n	800f0cc <__b2d+0x48>
 800f114:	3ff00000 	.word	0x3ff00000

0800f118 <__d2b>:
 800f118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f11c:	460f      	mov	r7, r1
 800f11e:	2101      	movs	r1, #1
 800f120:	ec59 8b10 	vmov	r8, r9, d0
 800f124:	4616      	mov	r6, r2
 800f126:	f7ff fc13 	bl	800e950 <_Balloc>
 800f12a:	4604      	mov	r4, r0
 800f12c:	b930      	cbnz	r0, 800f13c <__d2b+0x24>
 800f12e:	4602      	mov	r2, r0
 800f130:	4b23      	ldr	r3, [pc, #140]	@ (800f1c0 <__d2b+0xa8>)
 800f132:	4824      	ldr	r0, [pc, #144]	@ (800f1c4 <__d2b+0xac>)
 800f134:	f240 310f 	movw	r1, #783	@ 0x30f
 800f138:	f7fe f954 	bl	800d3e4 <__assert_func>
 800f13c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f140:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f144:	b10d      	cbz	r5, 800f14a <__d2b+0x32>
 800f146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f14a:	9301      	str	r3, [sp, #4]
 800f14c:	f1b8 0300 	subs.w	r3, r8, #0
 800f150:	d023      	beq.n	800f19a <__d2b+0x82>
 800f152:	4668      	mov	r0, sp
 800f154:	9300      	str	r3, [sp, #0]
 800f156:	f7ff fd0c 	bl	800eb72 <__lo0bits>
 800f15a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f15e:	b1d0      	cbz	r0, 800f196 <__d2b+0x7e>
 800f160:	f1c0 0320 	rsb	r3, r0, #32
 800f164:	fa02 f303 	lsl.w	r3, r2, r3
 800f168:	430b      	orrs	r3, r1
 800f16a:	40c2      	lsrs	r2, r0
 800f16c:	6163      	str	r3, [r4, #20]
 800f16e:	9201      	str	r2, [sp, #4]
 800f170:	9b01      	ldr	r3, [sp, #4]
 800f172:	61a3      	str	r3, [r4, #24]
 800f174:	2b00      	cmp	r3, #0
 800f176:	bf0c      	ite	eq
 800f178:	2201      	moveq	r2, #1
 800f17a:	2202      	movne	r2, #2
 800f17c:	6122      	str	r2, [r4, #16]
 800f17e:	b1a5      	cbz	r5, 800f1aa <__d2b+0x92>
 800f180:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f184:	4405      	add	r5, r0
 800f186:	603d      	str	r5, [r7, #0]
 800f188:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f18c:	6030      	str	r0, [r6, #0]
 800f18e:	4620      	mov	r0, r4
 800f190:	b003      	add	sp, #12
 800f192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f196:	6161      	str	r1, [r4, #20]
 800f198:	e7ea      	b.n	800f170 <__d2b+0x58>
 800f19a:	a801      	add	r0, sp, #4
 800f19c:	f7ff fce9 	bl	800eb72 <__lo0bits>
 800f1a0:	9b01      	ldr	r3, [sp, #4]
 800f1a2:	6163      	str	r3, [r4, #20]
 800f1a4:	3020      	adds	r0, #32
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	e7e8      	b.n	800f17c <__d2b+0x64>
 800f1aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f1ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f1b2:	6038      	str	r0, [r7, #0]
 800f1b4:	6918      	ldr	r0, [r3, #16]
 800f1b6:	f7ff fcbd 	bl	800eb34 <__hi0bits>
 800f1ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f1be:	e7e5      	b.n	800f18c <__d2b+0x74>
 800f1c0:	08011d04 	.word	0x08011d04
 800f1c4:	08011d75 	.word	0x08011d75

0800f1c8 <__ratio>:
 800f1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1cc:	b085      	sub	sp, #20
 800f1ce:	e9cd 1000 	strd	r1, r0, [sp]
 800f1d2:	a902      	add	r1, sp, #8
 800f1d4:	f7ff ff56 	bl	800f084 <__b2d>
 800f1d8:	9800      	ldr	r0, [sp, #0]
 800f1da:	a903      	add	r1, sp, #12
 800f1dc:	ec55 4b10 	vmov	r4, r5, d0
 800f1e0:	f7ff ff50 	bl	800f084 <__b2d>
 800f1e4:	9b01      	ldr	r3, [sp, #4]
 800f1e6:	6919      	ldr	r1, [r3, #16]
 800f1e8:	9b00      	ldr	r3, [sp, #0]
 800f1ea:	691b      	ldr	r3, [r3, #16]
 800f1ec:	1ac9      	subs	r1, r1, r3
 800f1ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f1f2:	1a9b      	subs	r3, r3, r2
 800f1f4:	ec5b ab10 	vmov	sl, fp, d0
 800f1f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	bfce      	itee	gt
 800f200:	462a      	movgt	r2, r5
 800f202:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f206:	465a      	movle	r2, fp
 800f208:	462f      	mov	r7, r5
 800f20a:	46d9      	mov	r9, fp
 800f20c:	bfcc      	ite	gt
 800f20e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f212:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f216:	464b      	mov	r3, r9
 800f218:	4652      	mov	r2, sl
 800f21a:	4620      	mov	r0, r4
 800f21c:	4639      	mov	r1, r7
 800f21e:	f7f1 fb15 	bl	800084c <__aeabi_ddiv>
 800f222:	ec41 0b10 	vmov	d0, r0, r1
 800f226:	b005      	add	sp, #20
 800f228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f22c <__copybits>:
 800f22c:	3901      	subs	r1, #1
 800f22e:	b570      	push	{r4, r5, r6, lr}
 800f230:	1149      	asrs	r1, r1, #5
 800f232:	6914      	ldr	r4, [r2, #16]
 800f234:	3101      	adds	r1, #1
 800f236:	f102 0314 	add.w	r3, r2, #20
 800f23a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f23e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f242:	1f05      	subs	r5, r0, #4
 800f244:	42a3      	cmp	r3, r4
 800f246:	d30c      	bcc.n	800f262 <__copybits+0x36>
 800f248:	1aa3      	subs	r3, r4, r2
 800f24a:	3b11      	subs	r3, #17
 800f24c:	f023 0303 	bic.w	r3, r3, #3
 800f250:	3211      	adds	r2, #17
 800f252:	42a2      	cmp	r2, r4
 800f254:	bf88      	it	hi
 800f256:	2300      	movhi	r3, #0
 800f258:	4418      	add	r0, r3
 800f25a:	2300      	movs	r3, #0
 800f25c:	4288      	cmp	r0, r1
 800f25e:	d305      	bcc.n	800f26c <__copybits+0x40>
 800f260:	bd70      	pop	{r4, r5, r6, pc}
 800f262:	f853 6b04 	ldr.w	r6, [r3], #4
 800f266:	f845 6f04 	str.w	r6, [r5, #4]!
 800f26a:	e7eb      	b.n	800f244 <__copybits+0x18>
 800f26c:	f840 3b04 	str.w	r3, [r0], #4
 800f270:	e7f4      	b.n	800f25c <__copybits+0x30>

0800f272 <__any_on>:
 800f272:	f100 0214 	add.w	r2, r0, #20
 800f276:	6900      	ldr	r0, [r0, #16]
 800f278:	114b      	asrs	r3, r1, #5
 800f27a:	4298      	cmp	r0, r3
 800f27c:	b510      	push	{r4, lr}
 800f27e:	db11      	blt.n	800f2a4 <__any_on+0x32>
 800f280:	dd0a      	ble.n	800f298 <__any_on+0x26>
 800f282:	f011 011f 	ands.w	r1, r1, #31
 800f286:	d007      	beq.n	800f298 <__any_on+0x26>
 800f288:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f28c:	fa24 f001 	lsr.w	r0, r4, r1
 800f290:	fa00 f101 	lsl.w	r1, r0, r1
 800f294:	428c      	cmp	r4, r1
 800f296:	d10b      	bne.n	800f2b0 <__any_on+0x3e>
 800f298:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f29c:	4293      	cmp	r3, r2
 800f29e:	d803      	bhi.n	800f2a8 <__any_on+0x36>
 800f2a0:	2000      	movs	r0, #0
 800f2a2:	bd10      	pop	{r4, pc}
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	e7f7      	b.n	800f298 <__any_on+0x26>
 800f2a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f2ac:	2900      	cmp	r1, #0
 800f2ae:	d0f5      	beq.n	800f29c <__any_on+0x2a>
 800f2b0:	2001      	movs	r0, #1
 800f2b2:	e7f6      	b.n	800f2a2 <__any_on+0x30>

0800f2b4 <__ascii_wctomb>:
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	4608      	mov	r0, r1
 800f2b8:	b141      	cbz	r1, 800f2cc <__ascii_wctomb+0x18>
 800f2ba:	2aff      	cmp	r2, #255	@ 0xff
 800f2bc:	d904      	bls.n	800f2c8 <__ascii_wctomb+0x14>
 800f2be:	228a      	movs	r2, #138	@ 0x8a
 800f2c0:	601a      	str	r2, [r3, #0]
 800f2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c6:	4770      	bx	lr
 800f2c8:	700a      	strb	r2, [r1, #0]
 800f2ca:	2001      	movs	r0, #1
 800f2cc:	4770      	bx	lr

0800f2ce <__ssputs_r>:
 800f2ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2d2:	688e      	ldr	r6, [r1, #8]
 800f2d4:	461f      	mov	r7, r3
 800f2d6:	42be      	cmp	r6, r7
 800f2d8:	680b      	ldr	r3, [r1, #0]
 800f2da:	4682      	mov	sl, r0
 800f2dc:	460c      	mov	r4, r1
 800f2de:	4690      	mov	r8, r2
 800f2e0:	d82d      	bhi.n	800f33e <__ssputs_r+0x70>
 800f2e2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f2e6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f2ea:	d026      	beq.n	800f33a <__ssputs_r+0x6c>
 800f2ec:	6965      	ldr	r5, [r4, #20]
 800f2ee:	6909      	ldr	r1, [r1, #16]
 800f2f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f2f4:	eba3 0901 	sub.w	r9, r3, r1
 800f2f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f2fc:	1c7b      	adds	r3, r7, #1
 800f2fe:	444b      	add	r3, r9
 800f300:	106d      	asrs	r5, r5, #1
 800f302:	429d      	cmp	r5, r3
 800f304:	bf38      	it	cc
 800f306:	461d      	movcc	r5, r3
 800f308:	0553      	lsls	r3, r2, #21
 800f30a:	d527      	bpl.n	800f35c <__ssputs_r+0x8e>
 800f30c:	4629      	mov	r1, r5
 800f30e:	f7ff fa81 	bl	800e814 <_malloc_r>
 800f312:	4606      	mov	r6, r0
 800f314:	b360      	cbz	r0, 800f370 <__ssputs_r+0xa2>
 800f316:	6921      	ldr	r1, [r4, #16]
 800f318:	464a      	mov	r2, r9
 800f31a:	f7fe f844 	bl	800d3a6 <memcpy>
 800f31e:	89a3      	ldrh	r3, [r4, #12]
 800f320:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f328:	81a3      	strh	r3, [r4, #12]
 800f32a:	6126      	str	r6, [r4, #16]
 800f32c:	6165      	str	r5, [r4, #20]
 800f32e:	444e      	add	r6, r9
 800f330:	eba5 0509 	sub.w	r5, r5, r9
 800f334:	6026      	str	r6, [r4, #0]
 800f336:	60a5      	str	r5, [r4, #8]
 800f338:	463e      	mov	r6, r7
 800f33a:	42be      	cmp	r6, r7
 800f33c:	d900      	bls.n	800f340 <__ssputs_r+0x72>
 800f33e:	463e      	mov	r6, r7
 800f340:	6820      	ldr	r0, [r4, #0]
 800f342:	4632      	mov	r2, r6
 800f344:	4641      	mov	r1, r8
 800f346:	f000 f9d7 	bl	800f6f8 <memmove>
 800f34a:	68a3      	ldr	r3, [r4, #8]
 800f34c:	1b9b      	subs	r3, r3, r6
 800f34e:	60a3      	str	r3, [r4, #8]
 800f350:	6823      	ldr	r3, [r4, #0]
 800f352:	4433      	add	r3, r6
 800f354:	6023      	str	r3, [r4, #0]
 800f356:	2000      	movs	r0, #0
 800f358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f35c:	462a      	mov	r2, r5
 800f35e:	f000 fa10 	bl	800f782 <_realloc_r>
 800f362:	4606      	mov	r6, r0
 800f364:	2800      	cmp	r0, #0
 800f366:	d1e0      	bne.n	800f32a <__ssputs_r+0x5c>
 800f368:	6921      	ldr	r1, [r4, #16]
 800f36a:	4650      	mov	r0, sl
 800f36c:	f7fe fea4 	bl	800e0b8 <_free_r>
 800f370:	230c      	movs	r3, #12
 800f372:	f8ca 3000 	str.w	r3, [sl]
 800f376:	89a3      	ldrh	r3, [r4, #12]
 800f378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f37c:	81a3      	strh	r3, [r4, #12]
 800f37e:	f04f 30ff 	mov.w	r0, #4294967295
 800f382:	e7e9      	b.n	800f358 <__ssputs_r+0x8a>

0800f384 <_svfiprintf_r>:
 800f384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f388:	4698      	mov	r8, r3
 800f38a:	898b      	ldrh	r3, [r1, #12]
 800f38c:	061b      	lsls	r3, r3, #24
 800f38e:	b09d      	sub	sp, #116	@ 0x74
 800f390:	4607      	mov	r7, r0
 800f392:	460d      	mov	r5, r1
 800f394:	4614      	mov	r4, r2
 800f396:	d510      	bpl.n	800f3ba <_svfiprintf_r+0x36>
 800f398:	690b      	ldr	r3, [r1, #16]
 800f39a:	b973      	cbnz	r3, 800f3ba <_svfiprintf_r+0x36>
 800f39c:	2140      	movs	r1, #64	@ 0x40
 800f39e:	f7ff fa39 	bl	800e814 <_malloc_r>
 800f3a2:	6028      	str	r0, [r5, #0]
 800f3a4:	6128      	str	r0, [r5, #16]
 800f3a6:	b930      	cbnz	r0, 800f3b6 <_svfiprintf_r+0x32>
 800f3a8:	230c      	movs	r3, #12
 800f3aa:	603b      	str	r3, [r7, #0]
 800f3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f3b0:	b01d      	add	sp, #116	@ 0x74
 800f3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b6:	2340      	movs	r3, #64	@ 0x40
 800f3b8:	616b      	str	r3, [r5, #20]
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3be:	2320      	movs	r3, #32
 800f3c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f3c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3c8:	2330      	movs	r3, #48	@ 0x30
 800f3ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f568 <_svfiprintf_r+0x1e4>
 800f3ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f3d2:	f04f 0901 	mov.w	r9, #1
 800f3d6:	4623      	mov	r3, r4
 800f3d8:	469a      	mov	sl, r3
 800f3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3de:	b10a      	cbz	r2, 800f3e4 <_svfiprintf_r+0x60>
 800f3e0:	2a25      	cmp	r2, #37	@ 0x25
 800f3e2:	d1f9      	bne.n	800f3d8 <_svfiprintf_r+0x54>
 800f3e4:	ebba 0b04 	subs.w	fp, sl, r4
 800f3e8:	d00b      	beq.n	800f402 <_svfiprintf_r+0x7e>
 800f3ea:	465b      	mov	r3, fp
 800f3ec:	4622      	mov	r2, r4
 800f3ee:	4629      	mov	r1, r5
 800f3f0:	4638      	mov	r0, r7
 800f3f2:	f7ff ff6c 	bl	800f2ce <__ssputs_r>
 800f3f6:	3001      	adds	r0, #1
 800f3f8:	f000 80a7 	beq.w	800f54a <_svfiprintf_r+0x1c6>
 800f3fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3fe:	445a      	add	r2, fp
 800f400:	9209      	str	r2, [sp, #36]	@ 0x24
 800f402:	f89a 3000 	ldrb.w	r3, [sl]
 800f406:	2b00      	cmp	r3, #0
 800f408:	f000 809f 	beq.w	800f54a <_svfiprintf_r+0x1c6>
 800f40c:	2300      	movs	r3, #0
 800f40e:	f04f 32ff 	mov.w	r2, #4294967295
 800f412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f416:	f10a 0a01 	add.w	sl, sl, #1
 800f41a:	9304      	str	r3, [sp, #16]
 800f41c:	9307      	str	r3, [sp, #28]
 800f41e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f422:	931a      	str	r3, [sp, #104]	@ 0x68
 800f424:	4654      	mov	r4, sl
 800f426:	2205      	movs	r2, #5
 800f428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f42c:	484e      	ldr	r0, [pc, #312]	@ (800f568 <_svfiprintf_r+0x1e4>)
 800f42e:	f7f0 fecf 	bl	80001d0 <memchr>
 800f432:	9a04      	ldr	r2, [sp, #16]
 800f434:	b9d8      	cbnz	r0, 800f46e <_svfiprintf_r+0xea>
 800f436:	06d0      	lsls	r0, r2, #27
 800f438:	bf44      	itt	mi
 800f43a:	2320      	movmi	r3, #32
 800f43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f440:	0711      	lsls	r1, r2, #28
 800f442:	bf44      	itt	mi
 800f444:	232b      	movmi	r3, #43	@ 0x2b
 800f446:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f44a:	f89a 3000 	ldrb.w	r3, [sl]
 800f44e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f450:	d015      	beq.n	800f47e <_svfiprintf_r+0xfa>
 800f452:	9a07      	ldr	r2, [sp, #28]
 800f454:	4654      	mov	r4, sl
 800f456:	2000      	movs	r0, #0
 800f458:	f04f 0c0a 	mov.w	ip, #10
 800f45c:	4621      	mov	r1, r4
 800f45e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f462:	3b30      	subs	r3, #48	@ 0x30
 800f464:	2b09      	cmp	r3, #9
 800f466:	d94b      	bls.n	800f500 <_svfiprintf_r+0x17c>
 800f468:	b1b0      	cbz	r0, 800f498 <_svfiprintf_r+0x114>
 800f46a:	9207      	str	r2, [sp, #28]
 800f46c:	e014      	b.n	800f498 <_svfiprintf_r+0x114>
 800f46e:	eba0 0308 	sub.w	r3, r0, r8
 800f472:	fa09 f303 	lsl.w	r3, r9, r3
 800f476:	4313      	orrs	r3, r2
 800f478:	9304      	str	r3, [sp, #16]
 800f47a:	46a2      	mov	sl, r4
 800f47c:	e7d2      	b.n	800f424 <_svfiprintf_r+0xa0>
 800f47e:	9b03      	ldr	r3, [sp, #12]
 800f480:	1d19      	adds	r1, r3, #4
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	9103      	str	r1, [sp, #12]
 800f486:	2b00      	cmp	r3, #0
 800f488:	bfbb      	ittet	lt
 800f48a:	425b      	neglt	r3, r3
 800f48c:	f042 0202 	orrlt.w	r2, r2, #2
 800f490:	9307      	strge	r3, [sp, #28]
 800f492:	9307      	strlt	r3, [sp, #28]
 800f494:	bfb8      	it	lt
 800f496:	9204      	strlt	r2, [sp, #16]
 800f498:	7823      	ldrb	r3, [r4, #0]
 800f49a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f49c:	d10a      	bne.n	800f4b4 <_svfiprintf_r+0x130>
 800f49e:	7863      	ldrb	r3, [r4, #1]
 800f4a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4a2:	d132      	bne.n	800f50a <_svfiprintf_r+0x186>
 800f4a4:	9b03      	ldr	r3, [sp, #12]
 800f4a6:	1d1a      	adds	r2, r3, #4
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	9203      	str	r2, [sp, #12]
 800f4ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f4b0:	3402      	adds	r4, #2
 800f4b2:	9305      	str	r3, [sp, #20]
 800f4b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f578 <_svfiprintf_r+0x1f4>
 800f4b8:	7821      	ldrb	r1, [r4, #0]
 800f4ba:	2203      	movs	r2, #3
 800f4bc:	4650      	mov	r0, sl
 800f4be:	f7f0 fe87 	bl	80001d0 <memchr>
 800f4c2:	b138      	cbz	r0, 800f4d4 <_svfiprintf_r+0x150>
 800f4c4:	9b04      	ldr	r3, [sp, #16]
 800f4c6:	eba0 000a 	sub.w	r0, r0, sl
 800f4ca:	2240      	movs	r2, #64	@ 0x40
 800f4cc:	4082      	lsls	r2, r0
 800f4ce:	4313      	orrs	r3, r2
 800f4d0:	3401      	adds	r4, #1
 800f4d2:	9304      	str	r3, [sp, #16]
 800f4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4d8:	4824      	ldr	r0, [pc, #144]	@ (800f56c <_svfiprintf_r+0x1e8>)
 800f4da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f4de:	2206      	movs	r2, #6
 800f4e0:	f7f0 fe76 	bl	80001d0 <memchr>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	d036      	beq.n	800f556 <_svfiprintf_r+0x1d2>
 800f4e8:	4b21      	ldr	r3, [pc, #132]	@ (800f570 <_svfiprintf_r+0x1ec>)
 800f4ea:	bb1b      	cbnz	r3, 800f534 <_svfiprintf_r+0x1b0>
 800f4ec:	9b03      	ldr	r3, [sp, #12]
 800f4ee:	3307      	adds	r3, #7
 800f4f0:	f023 0307 	bic.w	r3, r3, #7
 800f4f4:	3308      	adds	r3, #8
 800f4f6:	9303      	str	r3, [sp, #12]
 800f4f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4fa:	4433      	add	r3, r6
 800f4fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4fe:	e76a      	b.n	800f3d6 <_svfiprintf_r+0x52>
 800f500:	fb0c 3202 	mla	r2, ip, r2, r3
 800f504:	460c      	mov	r4, r1
 800f506:	2001      	movs	r0, #1
 800f508:	e7a8      	b.n	800f45c <_svfiprintf_r+0xd8>
 800f50a:	2300      	movs	r3, #0
 800f50c:	3401      	adds	r4, #1
 800f50e:	9305      	str	r3, [sp, #20]
 800f510:	4619      	mov	r1, r3
 800f512:	f04f 0c0a 	mov.w	ip, #10
 800f516:	4620      	mov	r0, r4
 800f518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f51c:	3a30      	subs	r2, #48	@ 0x30
 800f51e:	2a09      	cmp	r2, #9
 800f520:	d903      	bls.n	800f52a <_svfiprintf_r+0x1a6>
 800f522:	2b00      	cmp	r3, #0
 800f524:	d0c6      	beq.n	800f4b4 <_svfiprintf_r+0x130>
 800f526:	9105      	str	r1, [sp, #20]
 800f528:	e7c4      	b.n	800f4b4 <_svfiprintf_r+0x130>
 800f52a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f52e:	4604      	mov	r4, r0
 800f530:	2301      	movs	r3, #1
 800f532:	e7f0      	b.n	800f516 <_svfiprintf_r+0x192>
 800f534:	ab03      	add	r3, sp, #12
 800f536:	9300      	str	r3, [sp, #0]
 800f538:	462a      	mov	r2, r5
 800f53a:	4b0e      	ldr	r3, [pc, #56]	@ (800f574 <_svfiprintf_r+0x1f0>)
 800f53c:	a904      	add	r1, sp, #16
 800f53e:	4638      	mov	r0, r7
 800f540:	f7fc ff52 	bl	800c3e8 <_printf_float>
 800f544:	1c42      	adds	r2, r0, #1
 800f546:	4606      	mov	r6, r0
 800f548:	d1d6      	bne.n	800f4f8 <_svfiprintf_r+0x174>
 800f54a:	89ab      	ldrh	r3, [r5, #12]
 800f54c:	065b      	lsls	r3, r3, #25
 800f54e:	f53f af2d 	bmi.w	800f3ac <_svfiprintf_r+0x28>
 800f552:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f554:	e72c      	b.n	800f3b0 <_svfiprintf_r+0x2c>
 800f556:	ab03      	add	r3, sp, #12
 800f558:	9300      	str	r3, [sp, #0]
 800f55a:	462a      	mov	r2, r5
 800f55c:	4b05      	ldr	r3, [pc, #20]	@ (800f574 <_svfiprintf_r+0x1f0>)
 800f55e:	a904      	add	r1, sp, #16
 800f560:	4638      	mov	r0, r7
 800f562:	f7fd f9d9 	bl	800c918 <_printf_i>
 800f566:	e7ed      	b.n	800f544 <_svfiprintf_r+0x1c0>
 800f568:	08011ed0 	.word	0x08011ed0
 800f56c:	08011eda 	.word	0x08011eda
 800f570:	0800c3e9 	.word	0x0800c3e9
 800f574:	0800f2cf 	.word	0x0800f2cf
 800f578:	08011ed6 	.word	0x08011ed6

0800f57c <__sflush_r>:
 800f57c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f584:	0716      	lsls	r6, r2, #28
 800f586:	4605      	mov	r5, r0
 800f588:	460c      	mov	r4, r1
 800f58a:	d454      	bmi.n	800f636 <__sflush_r+0xba>
 800f58c:	684b      	ldr	r3, [r1, #4]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	dc02      	bgt.n	800f598 <__sflush_r+0x1c>
 800f592:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f594:	2b00      	cmp	r3, #0
 800f596:	dd48      	ble.n	800f62a <__sflush_r+0xae>
 800f598:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f59a:	2e00      	cmp	r6, #0
 800f59c:	d045      	beq.n	800f62a <__sflush_r+0xae>
 800f59e:	2300      	movs	r3, #0
 800f5a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f5a4:	682f      	ldr	r7, [r5, #0]
 800f5a6:	6a21      	ldr	r1, [r4, #32]
 800f5a8:	602b      	str	r3, [r5, #0]
 800f5aa:	d030      	beq.n	800f60e <__sflush_r+0x92>
 800f5ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f5ae:	89a3      	ldrh	r3, [r4, #12]
 800f5b0:	0759      	lsls	r1, r3, #29
 800f5b2:	d505      	bpl.n	800f5c0 <__sflush_r+0x44>
 800f5b4:	6863      	ldr	r3, [r4, #4]
 800f5b6:	1ad2      	subs	r2, r2, r3
 800f5b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f5ba:	b10b      	cbz	r3, 800f5c0 <__sflush_r+0x44>
 800f5bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f5be:	1ad2      	subs	r2, r2, r3
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5c4:	6a21      	ldr	r1, [r4, #32]
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	47b0      	blx	r6
 800f5ca:	1c43      	adds	r3, r0, #1
 800f5cc:	89a3      	ldrh	r3, [r4, #12]
 800f5ce:	d106      	bne.n	800f5de <__sflush_r+0x62>
 800f5d0:	6829      	ldr	r1, [r5, #0]
 800f5d2:	291d      	cmp	r1, #29
 800f5d4:	d82b      	bhi.n	800f62e <__sflush_r+0xb2>
 800f5d6:	4a2a      	ldr	r2, [pc, #168]	@ (800f680 <__sflush_r+0x104>)
 800f5d8:	410a      	asrs	r2, r1
 800f5da:	07d6      	lsls	r6, r2, #31
 800f5dc:	d427      	bmi.n	800f62e <__sflush_r+0xb2>
 800f5de:	2200      	movs	r2, #0
 800f5e0:	6062      	str	r2, [r4, #4]
 800f5e2:	04d9      	lsls	r1, r3, #19
 800f5e4:	6922      	ldr	r2, [r4, #16]
 800f5e6:	6022      	str	r2, [r4, #0]
 800f5e8:	d504      	bpl.n	800f5f4 <__sflush_r+0x78>
 800f5ea:	1c42      	adds	r2, r0, #1
 800f5ec:	d101      	bne.n	800f5f2 <__sflush_r+0x76>
 800f5ee:	682b      	ldr	r3, [r5, #0]
 800f5f0:	b903      	cbnz	r3, 800f5f4 <__sflush_r+0x78>
 800f5f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800f5f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f5f6:	602f      	str	r7, [r5, #0]
 800f5f8:	b1b9      	cbz	r1, 800f62a <__sflush_r+0xae>
 800f5fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f5fe:	4299      	cmp	r1, r3
 800f600:	d002      	beq.n	800f608 <__sflush_r+0x8c>
 800f602:	4628      	mov	r0, r5
 800f604:	f7fe fd58 	bl	800e0b8 <_free_r>
 800f608:	2300      	movs	r3, #0
 800f60a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f60c:	e00d      	b.n	800f62a <__sflush_r+0xae>
 800f60e:	2301      	movs	r3, #1
 800f610:	4628      	mov	r0, r5
 800f612:	47b0      	blx	r6
 800f614:	4602      	mov	r2, r0
 800f616:	1c50      	adds	r0, r2, #1
 800f618:	d1c9      	bne.n	800f5ae <__sflush_r+0x32>
 800f61a:	682b      	ldr	r3, [r5, #0]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d0c6      	beq.n	800f5ae <__sflush_r+0x32>
 800f620:	2b1d      	cmp	r3, #29
 800f622:	d001      	beq.n	800f628 <__sflush_r+0xac>
 800f624:	2b16      	cmp	r3, #22
 800f626:	d11e      	bne.n	800f666 <__sflush_r+0xea>
 800f628:	602f      	str	r7, [r5, #0]
 800f62a:	2000      	movs	r0, #0
 800f62c:	e022      	b.n	800f674 <__sflush_r+0xf8>
 800f62e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f632:	b21b      	sxth	r3, r3
 800f634:	e01b      	b.n	800f66e <__sflush_r+0xf2>
 800f636:	690f      	ldr	r7, [r1, #16]
 800f638:	2f00      	cmp	r7, #0
 800f63a:	d0f6      	beq.n	800f62a <__sflush_r+0xae>
 800f63c:	0793      	lsls	r3, r2, #30
 800f63e:	680e      	ldr	r6, [r1, #0]
 800f640:	bf08      	it	eq
 800f642:	694b      	ldreq	r3, [r1, #20]
 800f644:	600f      	str	r7, [r1, #0]
 800f646:	bf18      	it	ne
 800f648:	2300      	movne	r3, #0
 800f64a:	eba6 0807 	sub.w	r8, r6, r7
 800f64e:	608b      	str	r3, [r1, #8]
 800f650:	f1b8 0f00 	cmp.w	r8, #0
 800f654:	dde9      	ble.n	800f62a <__sflush_r+0xae>
 800f656:	6a21      	ldr	r1, [r4, #32]
 800f658:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f65a:	4643      	mov	r3, r8
 800f65c:	463a      	mov	r2, r7
 800f65e:	4628      	mov	r0, r5
 800f660:	47b0      	blx	r6
 800f662:	2800      	cmp	r0, #0
 800f664:	dc08      	bgt.n	800f678 <__sflush_r+0xfc>
 800f666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f66a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f66e:	81a3      	strh	r3, [r4, #12]
 800f670:	f04f 30ff 	mov.w	r0, #4294967295
 800f674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f678:	4407      	add	r7, r0
 800f67a:	eba8 0800 	sub.w	r8, r8, r0
 800f67e:	e7e7      	b.n	800f650 <__sflush_r+0xd4>
 800f680:	dfbffffe 	.word	0xdfbffffe

0800f684 <_fflush_r>:
 800f684:	b538      	push	{r3, r4, r5, lr}
 800f686:	690b      	ldr	r3, [r1, #16]
 800f688:	4605      	mov	r5, r0
 800f68a:	460c      	mov	r4, r1
 800f68c:	b913      	cbnz	r3, 800f694 <_fflush_r+0x10>
 800f68e:	2500      	movs	r5, #0
 800f690:	4628      	mov	r0, r5
 800f692:	bd38      	pop	{r3, r4, r5, pc}
 800f694:	b118      	cbz	r0, 800f69e <_fflush_r+0x1a>
 800f696:	6a03      	ldr	r3, [r0, #32]
 800f698:	b90b      	cbnz	r3, 800f69e <_fflush_r+0x1a>
 800f69a:	f7fd fcfd 	bl	800d098 <__sinit>
 800f69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d0f3      	beq.n	800f68e <_fflush_r+0xa>
 800f6a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f6a8:	07d0      	lsls	r0, r2, #31
 800f6aa:	d404      	bmi.n	800f6b6 <_fflush_r+0x32>
 800f6ac:	0599      	lsls	r1, r3, #22
 800f6ae:	d402      	bmi.n	800f6b6 <_fflush_r+0x32>
 800f6b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6b2:	f7fd fe76 	bl	800d3a2 <__retarget_lock_acquire_recursive>
 800f6b6:	4628      	mov	r0, r5
 800f6b8:	4621      	mov	r1, r4
 800f6ba:	f7ff ff5f 	bl	800f57c <__sflush_r>
 800f6be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6c0:	07da      	lsls	r2, r3, #31
 800f6c2:	4605      	mov	r5, r0
 800f6c4:	d4e4      	bmi.n	800f690 <_fflush_r+0xc>
 800f6c6:	89a3      	ldrh	r3, [r4, #12]
 800f6c8:	059b      	lsls	r3, r3, #22
 800f6ca:	d4e1      	bmi.n	800f690 <_fflush_r+0xc>
 800f6cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6ce:	f7fd fe69 	bl	800d3a4 <__retarget_lock_release_recursive>
 800f6d2:	e7dd      	b.n	800f690 <_fflush_r+0xc>

0800f6d4 <fiprintf>:
 800f6d4:	b40e      	push	{r1, r2, r3}
 800f6d6:	b503      	push	{r0, r1, lr}
 800f6d8:	4601      	mov	r1, r0
 800f6da:	ab03      	add	r3, sp, #12
 800f6dc:	4805      	ldr	r0, [pc, #20]	@ (800f6f4 <fiprintf+0x20>)
 800f6de:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6e2:	6800      	ldr	r0, [r0, #0]
 800f6e4:	9301      	str	r3, [sp, #4]
 800f6e6:	f000 f8a3 	bl	800f830 <_vfiprintf_r>
 800f6ea:	b002      	add	sp, #8
 800f6ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6f0:	b003      	add	sp, #12
 800f6f2:	4770      	bx	lr
 800f6f4:	20000250 	.word	0x20000250

0800f6f8 <memmove>:
 800f6f8:	4288      	cmp	r0, r1
 800f6fa:	b510      	push	{r4, lr}
 800f6fc:	eb01 0402 	add.w	r4, r1, r2
 800f700:	d902      	bls.n	800f708 <memmove+0x10>
 800f702:	4284      	cmp	r4, r0
 800f704:	4623      	mov	r3, r4
 800f706:	d807      	bhi.n	800f718 <memmove+0x20>
 800f708:	1e43      	subs	r3, r0, #1
 800f70a:	42a1      	cmp	r1, r4
 800f70c:	d008      	beq.n	800f720 <memmove+0x28>
 800f70e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f712:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f716:	e7f8      	b.n	800f70a <memmove+0x12>
 800f718:	4402      	add	r2, r0
 800f71a:	4601      	mov	r1, r0
 800f71c:	428a      	cmp	r2, r1
 800f71e:	d100      	bne.n	800f722 <memmove+0x2a>
 800f720:	bd10      	pop	{r4, pc}
 800f722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f72a:	e7f7      	b.n	800f71c <memmove+0x24>

0800f72c <_sbrk_r>:
 800f72c:	b538      	push	{r3, r4, r5, lr}
 800f72e:	4d06      	ldr	r5, [pc, #24]	@ (800f748 <_sbrk_r+0x1c>)
 800f730:	2300      	movs	r3, #0
 800f732:	4604      	mov	r4, r0
 800f734:	4608      	mov	r0, r1
 800f736:	602b      	str	r3, [r5, #0]
 800f738:	f7f8 f96e 	bl	8007a18 <_sbrk>
 800f73c:	1c43      	adds	r3, r0, #1
 800f73e:	d102      	bne.n	800f746 <_sbrk_r+0x1a>
 800f740:	682b      	ldr	r3, [r5, #0]
 800f742:	b103      	cbz	r3, 800f746 <_sbrk_r+0x1a>
 800f744:	6023      	str	r3, [r4, #0]
 800f746:	bd38      	pop	{r3, r4, r5, pc}
 800f748:	20000888 	.word	0x20000888

0800f74c <abort>:
 800f74c:	b508      	push	{r3, lr}
 800f74e:	2006      	movs	r0, #6
 800f750:	f000 fa42 	bl	800fbd8 <raise>
 800f754:	2001      	movs	r0, #1
 800f756:	f7f8 f8e7 	bl	8007928 <_exit>

0800f75a <_calloc_r>:
 800f75a:	b570      	push	{r4, r5, r6, lr}
 800f75c:	fba1 5402 	umull	r5, r4, r1, r2
 800f760:	b93c      	cbnz	r4, 800f772 <_calloc_r+0x18>
 800f762:	4629      	mov	r1, r5
 800f764:	f7ff f856 	bl	800e814 <_malloc_r>
 800f768:	4606      	mov	r6, r0
 800f76a:	b928      	cbnz	r0, 800f778 <_calloc_r+0x1e>
 800f76c:	2600      	movs	r6, #0
 800f76e:	4630      	mov	r0, r6
 800f770:	bd70      	pop	{r4, r5, r6, pc}
 800f772:	220c      	movs	r2, #12
 800f774:	6002      	str	r2, [r0, #0]
 800f776:	e7f9      	b.n	800f76c <_calloc_r+0x12>
 800f778:	462a      	mov	r2, r5
 800f77a:	4621      	mov	r1, r4
 800f77c:	f7fd fd25 	bl	800d1ca <memset>
 800f780:	e7f5      	b.n	800f76e <_calloc_r+0x14>

0800f782 <_realloc_r>:
 800f782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f786:	4680      	mov	r8, r0
 800f788:	4615      	mov	r5, r2
 800f78a:	460c      	mov	r4, r1
 800f78c:	b921      	cbnz	r1, 800f798 <_realloc_r+0x16>
 800f78e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f792:	4611      	mov	r1, r2
 800f794:	f7ff b83e 	b.w	800e814 <_malloc_r>
 800f798:	b92a      	cbnz	r2, 800f7a6 <_realloc_r+0x24>
 800f79a:	f7fe fc8d 	bl	800e0b8 <_free_r>
 800f79e:	2400      	movs	r4, #0
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7a6:	f000 fa33 	bl	800fc10 <_malloc_usable_size_r>
 800f7aa:	4285      	cmp	r5, r0
 800f7ac:	4606      	mov	r6, r0
 800f7ae:	d802      	bhi.n	800f7b6 <_realloc_r+0x34>
 800f7b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f7b4:	d8f4      	bhi.n	800f7a0 <_realloc_r+0x1e>
 800f7b6:	4629      	mov	r1, r5
 800f7b8:	4640      	mov	r0, r8
 800f7ba:	f7ff f82b 	bl	800e814 <_malloc_r>
 800f7be:	4607      	mov	r7, r0
 800f7c0:	2800      	cmp	r0, #0
 800f7c2:	d0ec      	beq.n	800f79e <_realloc_r+0x1c>
 800f7c4:	42b5      	cmp	r5, r6
 800f7c6:	462a      	mov	r2, r5
 800f7c8:	4621      	mov	r1, r4
 800f7ca:	bf28      	it	cs
 800f7cc:	4632      	movcs	r2, r6
 800f7ce:	f7fd fdea 	bl	800d3a6 <memcpy>
 800f7d2:	4621      	mov	r1, r4
 800f7d4:	4640      	mov	r0, r8
 800f7d6:	f7fe fc6f 	bl	800e0b8 <_free_r>
 800f7da:	463c      	mov	r4, r7
 800f7dc:	e7e0      	b.n	800f7a0 <_realloc_r+0x1e>

0800f7de <__sfputc_r>:
 800f7de:	6893      	ldr	r3, [r2, #8]
 800f7e0:	3b01      	subs	r3, #1
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	b410      	push	{r4}
 800f7e6:	6093      	str	r3, [r2, #8]
 800f7e8:	da08      	bge.n	800f7fc <__sfputc_r+0x1e>
 800f7ea:	6994      	ldr	r4, [r2, #24]
 800f7ec:	42a3      	cmp	r3, r4
 800f7ee:	db01      	blt.n	800f7f4 <__sfputc_r+0x16>
 800f7f0:	290a      	cmp	r1, #10
 800f7f2:	d103      	bne.n	800f7fc <__sfputc_r+0x1e>
 800f7f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7f8:	f000 b932 	b.w	800fa60 <__swbuf_r>
 800f7fc:	6813      	ldr	r3, [r2, #0]
 800f7fe:	1c58      	adds	r0, r3, #1
 800f800:	6010      	str	r0, [r2, #0]
 800f802:	7019      	strb	r1, [r3, #0]
 800f804:	4608      	mov	r0, r1
 800f806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f80a:	4770      	bx	lr

0800f80c <__sfputs_r>:
 800f80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f80e:	4606      	mov	r6, r0
 800f810:	460f      	mov	r7, r1
 800f812:	4614      	mov	r4, r2
 800f814:	18d5      	adds	r5, r2, r3
 800f816:	42ac      	cmp	r4, r5
 800f818:	d101      	bne.n	800f81e <__sfputs_r+0x12>
 800f81a:	2000      	movs	r0, #0
 800f81c:	e007      	b.n	800f82e <__sfputs_r+0x22>
 800f81e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f822:	463a      	mov	r2, r7
 800f824:	4630      	mov	r0, r6
 800f826:	f7ff ffda 	bl	800f7de <__sfputc_r>
 800f82a:	1c43      	adds	r3, r0, #1
 800f82c:	d1f3      	bne.n	800f816 <__sfputs_r+0xa>
 800f82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f830 <_vfiprintf_r>:
 800f830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f834:	460d      	mov	r5, r1
 800f836:	b09d      	sub	sp, #116	@ 0x74
 800f838:	4614      	mov	r4, r2
 800f83a:	4698      	mov	r8, r3
 800f83c:	4606      	mov	r6, r0
 800f83e:	b118      	cbz	r0, 800f848 <_vfiprintf_r+0x18>
 800f840:	6a03      	ldr	r3, [r0, #32]
 800f842:	b90b      	cbnz	r3, 800f848 <_vfiprintf_r+0x18>
 800f844:	f7fd fc28 	bl	800d098 <__sinit>
 800f848:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f84a:	07d9      	lsls	r1, r3, #31
 800f84c:	d405      	bmi.n	800f85a <_vfiprintf_r+0x2a>
 800f84e:	89ab      	ldrh	r3, [r5, #12]
 800f850:	059a      	lsls	r2, r3, #22
 800f852:	d402      	bmi.n	800f85a <_vfiprintf_r+0x2a>
 800f854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f856:	f7fd fda4 	bl	800d3a2 <__retarget_lock_acquire_recursive>
 800f85a:	89ab      	ldrh	r3, [r5, #12]
 800f85c:	071b      	lsls	r3, r3, #28
 800f85e:	d501      	bpl.n	800f864 <_vfiprintf_r+0x34>
 800f860:	692b      	ldr	r3, [r5, #16]
 800f862:	b99b      	cbnz	r3, 800f88c <_vfiprintf_r+0x5c>
 800f864:	4629      	mov	r1, r5
 800f866:	4630      	mov	r0, r6
 800f868:	f000 f938 	bl	800fadc <__swsetup_r>
 800f86c:	b170      	cbz	r0, 800f88c <_vfiprintf_r+0x5c>
 800f86e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f870:	07dc      	lsls	r4, r3, #31
 800f872:	d504      	bpl.n	800f87e <_vfiprintf_r+0x4e>
 800f874:	f04f 30ff 	mov.w	r0, #4294967295
 800f878:	b01d      	add	sp, #116	@ 0x74
 800f87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f87e:	89ab      	ldrh	r3, [r5, #12]
 800f880:	0598      	lsls	r0, r3, #22
 800f882:	d4f7      	bmi.n	800f874 <_vfiprintf_r+0x44>
 800f884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f886:	f7fd fd8d 	bl	800d3a4 <__retarget_lock_release_recursive>
 800f88a:	e7f3      	b.n	800f874 <_vfiprintf_r+0x44>
 800f88c:	2300      	movs	r3, #0
 800f88e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f890:	2320      	movs	r3, #32
 800f892:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f896:	f8cd 800c 	str.w	r8, [sp, #12]
 800f89a:	2330      	movs	r3, #48	@ 0x30
 800f89c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fa4c <_vfiprintf_r+0x21c>
 800f8a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f8a4:	f04f 0901 	mov.w	r9, #1
 800f8a8:	4623      	mov	r3, r4
 800f8aa:	469a      	mov	sl, r3
 800f8ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8b0:	b10a      	cbz	r2, 800f8b6 <_vfiprintf_r+0x86>
 800f8b2:	2a25      	cmp	r2, #37	@ 0x25
 800f8b4:	d1f9      	bne.n	800f8aa <_vfiprintf_r+0x7a>
 800f8b6:	ebba 0b04 	subs.w	fp, sl, r4
 800f8ba:	d00b      	beq.n	800f8d4 <_vfiprintf_r+0xa4>
 800f8bc:	465b      	mov	r3, fp
 800f8be:	4622      	mov	r2, r4
 800f8c0:	4629      	mov	r1, r5
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	f7ff ffa2 	bl	800f80c <__sfputs_r>
 800f8c8:	3001      	adds	r0, #1
 800f8ca:	f000 80a7 	beq.w	800fa1c <_vfiprintf_r+0x1ec>
 800f8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8d0:	445a      	add	r2, fp
 800f8d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f8d4:	f89a 3000 	ldrb.w	r3, [sl]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	f000 809f 	beq.w	800fa1c <_vfiprintf_r+0x1ec>
 800f8de:	2300      	movs	r3, #0
 800f8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8e8:	f10a 0a01 	add.w	sl, sl, #1
 800f8ec:	9304      	str	r3, [sp, #16]
 800f8ee:	9307      	str	r3, [sp, #28]
 800f8f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f8f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f8f6:	4654      	mov	r4, sl
 800f8f8:	2205      	movs	r2, #5
 800f8fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8fe:	4853      	ldr	r0, [pc, #332]	@ (800fa4c <_vfiprintf_r+0x21c>)
 800f900:	f7f0 fc66 	bl	80001d0 <memchr>
 800f904:	9a04      	ldr	r2, [sp, #16]
 800f906:	b9d8      	cbnz	r0, 800f940 <_vfiprintf_r+0x110>
 800f908:	06d1      	lsls	r1, r2, #27
 800f90a:	bf44      	itt	mi
 800f90c:	2320      	movmi	r3, #32
 800f90e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f912:	0713      	lsls	r3, r2, #28
 800f914:	bf44      	itt	mi
 800f916:	232b      	movmi	r3, #43	@ 0x2b
 800f918:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f91c:	f89a 3000 	ldrb.w	r3, [sl]
 800f920:	2b2a      	cmp	r3, #42	@ 0x2a
 800f922:	d015      	beq.n	800f950 <_vfiprintf_r+0x120>
 800f924:	9a07      	ldr	r2, [sp, #28]
 800f926:	4654      	mov	r4, sl
 800f928:	2000      	movs	r0, #0
 800f92a:	f04f 0c0a 	mov.w	ip, #10
 800f92e:	4621      	mov	r1, r4
 800f930:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f934:	3b30      	subs	r3, #48	@ 0x30
 800f936:	2b09      	cmp	r3, #9
 800f938:	d94b      	bls.n	800f9d2 <_vfiprintf_r+0x1a2>
 800f93a:	b1b0      	cbz	r0, 800f96a <_vfiprintf_r+0x13a>
 800f93c:	9207      	str	r2, [sp, #28]
 800f93e:	e014      	b.n	800f96a <_vfiprintf_r+0x13a>
 800f940:	eba0 0308 	sub.w	r3, r0, r8
 800f944:	fa09 f303 	lsl.w	r3, r9, r3
 800f948:	4313      	orrs	r3, r2
 800f94a:	9304      	str	r3, [sp, #16]
 800f94c:	46a2      	mov	sl, r4
 800f94e:	e7d2      	b.n	800f8f6 <_vfiprintf_r+0xc6>
 800f950:	9b03      	ldr	r3, [sp, #12]
 800f952:	1d19      	adds	r1, r3, #4
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	9103      	str	r1, [sp, #12]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	bfbb      	ittet	lt
 800f95c:	425b      	neglt	r3, r3
 800f95e:	f042 0202 	orrlt.w	r2, r2, #2
 800f962:	9307      	strge	r3, [sp, #28]
 800f964:	9307      	strlt	r3, [sp, #28]
 800f966:	bfb8      	it	lt
 800f968:	9204      	strlt	r2, [sp, #16]
 800f96a:	7823      	ldrb	r3, [r4, #0]
 800f96c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f96e:	d10a      	bne.n	800f986 <_vfiprintf_r+0x156>
 800f970:	7863      	ldrb	r3, [r4, #1]
 800f972:	2b2a      	cmp	r3, #42	@ 0x2a
 800f974:	d132      	bne.n	800f9dc <_vfiprintf_r+0x1ac>
 800f976:	9b03      	ldr	r3, [sp, #12]
 800f978:	1d1a      	adds	r2, r3, #4
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	9203      	str	r2, [sp, #12]
 800f97e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f982:	3402      	adds	r4, #2
 800f984:	9305      	str	r3, [sp, #20]
 800f986:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fa5c <_vfiprintf_r+0x22c>
 800f98a:	7821      	ldrb	r1, [r4, #0]
 800f98c:	2203      	movs	r2, #3
 800f98e:	4650      	mov	r0, sl
 800f990:	f7f0 fc1e 	bl	80001d0 <memchr>
 800f994:	b138      	cbz	r0, 800f9a6 <_vfiprintf_r+0x176>
 800f996:	9b04      	ldr	r3, [sp, #16]
 800f998:	eba0 000a 	sub.w	r0, r0, sl
 800f99c:	2240      	movs	r2, #64	@ 0x40
 800f99e:	4082      	lsls	r2, r0
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	3401      	adds	r4, #1
 800f9a4:	9304      	str	r3, [sp, #16]
 800f9a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9aa:	4829      	ldr	r0, [pc, #164]	@ (800fa50 <_vfiprintf_r+0x220>)
 800f9ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f9b0:	2206      	movs	r2, #6
 800f9b2:	f7f0 fc0d 	bl	80001d0 <memchr>
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	d03f      	beq.n	800fa3a <_vfiprintf_r+0x20a>
 800f9ba:	4b26      	ldr	r3, [pc, #152]	@ (800fa54 <_vfiprintf_r+0x224>)
 800f9bc:	bb1b      	cbnz	r3, 800fa06 <_vfiprintf_r+0x1d6>
 800f9be:	9b03      	ldr	r3, [sp, #12]
 800f9c0:	3307      	adds	r3, #7
 800f9c2:	f023 0307 	bic.w	r3, r3, #7
 800f9c6:	3308      	adds	r3, #8
 800f9c8:	9303      	str	r3, [sp, #12]
 800f9ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9cc:	443b      	add	r3, r7
 800f9ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9d0:	e76a      	b.n	800f8a8 <_vfiprintf_r+0x78>
 800f9d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9d6:	460c      	mov	r4, r1
 800f9d8:	2001      	movs	r0, #1
 800f9da:	e7a8      	b.n	800f92e <_vfiprintf_r+0xfe>
 800f9dc:	2300      	movs	r3, #0
 800f9de:	3401      	adds	r4, #1
 800f9e0:	9305      	str	r3, [sp, #20]
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	f04f 0c0a 	mov.w	ip, #10
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9ee:	3a30      	subs	r2, #48	@ 0x30
 800f9f0:	2a09      	cmp	r2, #9
 800f9f2:	d903      	bls.n	800f9fc <_vfiprintf_r+0x1cc>
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d0c6      	beq.n	800f986 <_vfiprintf_r+0x156>
 800f9f8:	9105      	str	r1, [sp, #20]
 800f9fa:	e7c4      	b.n	800f986 <_vfiprintf_r+0x156>
 800f9fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa00:	4604      	mov	r4, r0
 800fa02:	2301      	movs	r3, #1
 800fa04:	e7f0      	b.n	800f9e8 <_vfiprintf_r+0x1b8>
 800fa06:	ab03      	add	r3, sp, #12
 800fa08:	9300      	str	r3, [sp, #0]
 800fa0a:	462a      	mov	r2, r5
 800fa0c:	4b12      	ldr	r3, [pc, #72]	@ (800fa58 <_vfiprintf_r+0x228>)
 800fa0e:	a904      	add	r1, sp, #16
 800fa10:	4630      	mov	r0, r6
 800fa12:	f7fc fce9 	bl	800c3e8 <_printf_float>
 800fa16:	4607      	mov	r7, r0
 800fa18:	1c78      	adds	r0, r7, #1
 800fa1a:	d1d6      	bne.n	800f9ca <_vfiprintf_r+0x19a>
 800fa1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa1e:	07d9      	lsls	r1, r3, #31
 800fa20:	d405      	bmi.n	800fa2e <_vfiprintf_r+0x1fe>
 800fa22:	89ab      	ldrh	r3, [r5, #12]
 800fa24:	059a      	lsls	r2, r3, #22
 800fa26:	d402      	bmi.n	800fa2e <_vfiprintf_r+0x1fe>
 800fa28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa2a:	f7fd fcbb 	bl	800d3a4 <__retarget_lock_release_recursive>
 800fa2e:	89ab      	ldrh	r3, [r5, #12]
 800fa30:	065b      	lsls	r3, r3, #25
 800fa32:	f53f af1f 	bmi.w	800f874 <_vfiprintf_r+0x44>
 800fa36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa38:	e71e      	b.n	800f878 <_vfiprintf_r+0x48>
 800fa3a:	ab03      	add	r3, sp, #12
 800fa3c:	9300      	str	r3, [sp, #0]
 800fa3e:	462a      	mov	r2, r5
 800fa40:	4b05      	ldr	r3, [pc, #20]	@ (800fa58 <_vfiprintf_r+0x228>)
 800fa42:	a904      	add	r1, sp, #16
 800fa44:	4630      	mov	r0, r6
 800fa46:	f7fc ff67 	bl	800c918 <_printf_i>
 800fa4a:	e7e4      	b.n	800fa16 <_vfiprintf_r+0x1e6>
 800fa4c:	08011ed0 	.word	0x08011ed0
 800fa50:	08011eda 	.word	0x08011eda
 800fa54:	0800c3e9 	.word	0x0800c3e9
 800fa58:	0800f80d 	.word	0x0800f80d
 800fa5c:	08011ed6 	.word	0x08011ed6

0800fa60 <__swbuf_r>:
 800fa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa62:	460e      	mov	r6, r1
 800fa64:	4614      	mov	r4, r2
 800fa66:	4605      	mov	r5, r0
 800fa68:	b118      	cbz	r0, 800fa72 <__swbuf_r+0x12>
 800fa6a:	6a03      	ldr	r3, [r0, #32]
 800fa6c:	b90b      	cbnz	r3, 800fa72 <__swbuf_r+0x12>
 800fa6e:	f7fd fb13 	bl	800d098 <__sinit>
 800fa72:	69a3      	ldr	r3, [r4, #24]
 800fa74:	60a3      	str	r3, [r4, #8]
 800fa76:	89a3      	ldrh	r3, [r4, #12]
 800fa78:	071a      	lsls	r2, r3, #28
 800fa7a:	d501      	bpl.n	800fa80 <__swbuf_r+0x20>
 800fa7c:	6923      	ldr	r3, [r4, #16]
 800fa7e:	b943      	cbnz	r3, 800fa92 <__swbuf_r+0x32>
 800fa80:	4621      	mov	r1, r4
 800fa82:	4628      	mov	r0, r5
 800fa84:	f000 f82a 	bl	800fadc <__swsetup_r>
 800fa88:	b118      	cbz	r0, 800fa92 <__swbuf_r+0x32>
 800fa8a:	f04f 37ff 	mov.w	r7, #4294967295
 800fa8e:	4638      	mov	r0, r7
 800fa90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa92:	6823      	ldr	r3, [r4, #0]
 800fa94:	6922      	ldr	r2, [r4, #16]
 800fa96:	1a98      	subs	r0, r3, r2
 800fa98:	6963      	ldr	r3, [r4, #20]
 800fa9a:	b2f6      	uxtb	r6, r6
 800fa9c:	4283      	cmp	r3, r0
 800fa9e:	4637      	mov	r7, r6
 800faa0:	dc05      	bgt.n	800faae <__swbuf_r+0x4e>
 800faa2:	4621      	mov	r1, r4
 800faa4:	4628      	mov	r0, r5
 800faa6:	f7ff fded 	bl	800f684 <_fflush_r>
 800faaa:	2800      	cmp	r0, #0
 800faac:	d1ed      	bne.n	800fa8a <__swbuf_r+0x2a>
 800faae:	68a3      	ldr	r3, [r4, #8]
 800fab0:	3b01      	subs	r3, #1
 800fab2:	60a3      	str	r3, [r4, #8]
 800fab4:	6823      	ldr	r3, [r4, #0]
 800fab6:	1c5a      	adds	r2, r3, #1
 800fab8:	6022      	str	r2, [r4, #0]
 800faba:	701e      	strb	r6, [r3, #0]
 800fabc:	6962      	ldr	r2, [r4, #20]
 800fabe:	1c43      	adds	r3, r0, #1
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d004      	beq.n	800face <__swbuf_r+0x6e>
 800fac4:	89a3      	ldrh	r3, [r4, #12]
 800fac6:	07db      	lsls	r3, r3, #31
 800fac8:	d5e1      	bpl.n	800fa8e <__swbuf_r+0x2e>
 800faca:	2e0a      	cmp	r6, #10
 800facc:	d1df      	bne.n	800fa8e <__swbuf_r+0x2e>
 800face:	4621      	mov	r1, r4
 800fad0:	4628      	mov	r0, r5
 800fad2:	f7ff fdd7 	bl	800f684 <_fflush_r>
 800fad6:	2800      	cmp	r0, #0
 800fad8:	d0d9      	beq.n	800fa8e <__swbuf_r+0x2e>
 800fada:	e7d6      	b.n	800fa8a <__swbuf_r+0x2a>

0800fadc <__swsetup_r>:
 800fadc:	b538      	push	{r3, r4, r5, lr}
 800fade:	4b29      	ldr	r3, [pc, #164]	@ (800fb84 <__swsetup_r+0xa8>)
 800fae0:	4605      	mov	r5, r0
 800fae2:	6818      	ldr	r0, [r3, #0]
 800fae4:	460c      	mov	r4, r1
 800fae6:	b118      	cbz	r0, 800faf0 <__swsetup_r+0x14>
 800fae8:	6a03      	ldr	r3, [r0, #32]
 800faea:	b90b      	cbnz	r3, 800faf0 <__swsetup_r+0x14>
 800faec:	f7fd fad4 	bl	800d098 <__sinit>
 800faf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faf4:	0719      	lsls	r1, r3, #28
 800faf6:	d422      	bmi.n	800fb3e <__swsetup_r+0x62>
 800faf8:	06da      	lsls	r2, r3, #27
 800fafa:	d407      	bmi.n	800fb0c <__swsetup_r+0x30>
 800fafc:	2209      	movs	r2, #9
 800fafe:	602a      	str	r2, [r5, #0]
 800fb00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb04:	81a3      	strh	r3, [r4, #12]
 800fb06:	f04f 30ff 	mov.w	r0, #4294967295
 800fb0a:	e033      	b.n	800fb74 <__swsetup_r+0x98>
 800fb0c:	0758      	lsls	r0, r3, #29
 800fb0e:	d512      	bpl.n	800fb36 <__swsetup_r+0x5a>
 800fb10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb12:	b141      	cbz	r1, 800fb26 <__swsetup_r+0x4a>
 800fb14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb18:	4299      	cmp	r1, r3
 800fb1a:	d002      	beq.n	800fb22 <__swsetup_r+0x46>
 800fb1c:	4628      	mov	r0, r5
 800fb1e:	f7fe facb 	bl	800e0b8 <_free_r>
 800fb22:	2300      	movs	r3, #0
 800fb24:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb26:	89a3      	ldrh	r3, [r4, #12]
 800fb28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fb2c:	81a3      	strh	r3, [r4, #12]
 800fb2e:	2300      	movs	r3, #0
 800fb30:	6063      	str	r3, [r4, #4]
 800fb32:	6923      	ldr	r3, [r4, #16]
 800fb34:	6023      	str	r3, [r4, #0]
 800fb36:	89a3      	ldrh	r3, [r4, #12]
 800fb38:	f043 0308 	orr.w	r3, r3, #8
 800fb3c:	81a3      	strh	r3, [r4, #12]
 800fb3e:	6923      	ldr	r3, [r4, #16]
 800fb40:	b94b      	cbnz	r3, 800fb56 <__swsetup_r+0x7a>
 800fb42:	89a3      	ldrh	r3, [r4, #12]
 800fb44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fb48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb4c:	d003      	beq.n	800fb56 <__swsetup_r+0x7a>
 800fb4e:	4621      	mov	r1, r4
 800fb50:	4628      	mov	r0, r5
 800fb52:	f000 f88b 	bl	800fc6c <__smakebuf_r>
 800fb56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb5a:	f013 0201 	ands.w	r2, r3, #1
 800fb5e:	d00a      	beq.n	800fb76 <__swsetup_r+0x9a>
 800fb60:	2200      	movs	r2, #0
 800fb62:	60a2      	str	r2, [r4, #8]
 800fb64:	6962      	ldr	r2, [r4, #20]
 800fb66:	4252      	negs	r2, r2
 800fb68:	61a2      	str	r2, [r4, #24]
 800fb6a:	6922      	ldr	r2, [r4, #16]
 800fb6c:	b942      	cbnz	r2, 800fb80 <__swsetup_r+0xa4>
 800fb6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb72:	d1c5      	bne.n	800fb00 <__swsetup_r+0x24>
 800fb74:	bd38      	pop	{r3, r4, r5, pc}
 800fb76:	0799      	lsls	r1, r3, #30
 800fb78:	bf58      	it	pl
 800fb7a:	6962      	ldrpl	r2, [r4, #20]
 800fb7c:	60a2      	str	r2, [r4, #8]
 800fb7e:	e7f4      	b.n	800fb6a <__swsetup_r+0x8e>
 800fb80:	2000      	movs	r0, #0
 800fb82:	e7f7      	b.n	800fb74 <__swsetup_r+0x98>
 800fb84:	20000250 	.word	0x20000250

0800fb88 <_raise_r>:
 800fb88:	291f      	cmp	r1, #31
 800fb8a:	b538      	push	{r3, r4, r5, lr}
 800fb8c:	4605      	mov	r5, r0
 800fb8e:	460c      	mov	r4, r1
 800fb90:	d904      	bls.n	800fb9c <_raise_r+0x14>
 800fb92:	2316      	movs	r3, #22
 800fb94:	6003      	str	r3, [r0, #0]
 800fb96:	f04f 30ff 	mov.w	r0, #4294967295
 800fb9a:	bd38      	pop	{r3, r4, r5, pc}
 800fb9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fb9e:	b112      	cbz	r2, 800fba6 <_raise_r+0x1e>
 800fba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fba4:	b94b      	cbnz	r3, 800fbba <_raise_r+0x32>
 800fba6:	4628      	mov	r0, r5
 800fba8:	f000 f830 	bl	800fc0c <_getpid_r>
 800fbac:	4622      	mov	r2, r4
 800fbae:	4601      	mov	r1, r0
 800fbb0:	4628      	mov	r0, r5
 800fbb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbb6:	f000 b817 	b.w	800fbe8 <_kill_r>
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d00a      	beq.n	800fbd4 <_raise_r+0x4c>
 800fbbe:	1c59      	adds	r1, r3, #1
 800fbc0:	d103      	bne.n	800fbca <_raise_r+0x42>
 800fbc2:	2316      	movs	r3, #22
 800fbc4:	6003      	str	r3, [r0, #0]
 800fbc6:	2001      	movs	r0, #1
 800fbc8:	e7e7      	b.n	800fb9a <_raise_r+0x12>
 800fbca:	2100      	movs	r1, #0
 800fbcc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	4798      	blx	r3
 800fbd4:	2000      	movs	r0, #0
 800fbd6:	e7e0      	b.n	800fb9a <_raise_r+0x12>

0800fbd8 <raise>:
 800fbd8:	4b02      	ldr	r3, [pc, #8]	@ (800fbe4 <raise+0xc>)
 800fbda:	4601      	mov	r1, r0
 800fbdc:	6818      	ldr	r0, [r3, #0]
 800fbde:	f7ff bfd3 	b.w	800fb88 <_raise_r>
 800fbe2:	bf00      	nop
 800fbe4:	20000250 	.word	0x20000250

0800fbe8 <_kill_r>:
 800fbe8:	b538      	push	{r3, r4, r5, lr}
 800fbea:	4d07      	ldr	r5, [pc, #28]	@ (800fc08 <_kill_r+0x20>)
 800fbec:	2300      	movs	r3, #0
 800fbee:	4604      	mov	r4, r0
 800fbf0:	4608      	mov	r0, r1
 800fbf2:	4611      	mov	r1, r2
 800fbf4:	602b      	str	r3, [r5, #0]
 800fbf6:	f7f7 fe87 	bl	8007908 <_kill>
 800fbfa:	1c43      	adds	r3, r0, #1
 800fbfc:	d102      	bne.n	800fc04 <_kill_r+0x1c>
 800fbfe:	682b      	ldr	r3, [r5, #0]
 800fc00:	b103      	cbz	r3, 800fc04 <_kill_r+0x1c>
 800fc02:	6023      	str	r3, [r4, #0]
 800fc04:	bd38      	pop	{r3, r4, r5, pc}
 800fc06:	bf00      	nop
 800fc08:	20000888 	.word	0x20000888

0800fc0c <_getpid_r>:
 800fc0c:	f7f7 be74 	b.w	80078f8 <_getpid>

0800fc10 <_malloc_usable_size_r>:
 800fc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc14:	1f18      	subs	r0, r3, #4
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	bfbc      	itt	lt
 800fc1a:	580b      	ldrlt	r3, [r1, r0]
 800fc1c:	18c0      	addlt	r0, r0, r3
 800fc1e:	4770      	bx	lr

0800fc20 <__swhatbuf_r>:
 800fc20:	b570      	push	{r4, r5, r6, lr}
 800fc22:	460c      	mov	r4, r1
 800fc24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc28:	2900      	cmp	r1, #0
 800fc2a:	b096      	sub	sp, #88	@ 0x58
 800fc2c:	4615      	mov	r5, r2
 800fc2e:	461e      	mov	r6, r3
 800fc30:	da0d      	bge.n	800fc4e <__swhatbuf_r+0x2e>
 800fc32:	89a3      	ldrh	r3, [r4, #12]
 800fc34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fc38:	f04f 0100 	mov.w	r1, #0
 800fc3c:	bf14      	ite	ne
 800fc3e:	2340      	movne	r3, #64	@ 0x40
 800fc40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fc44:	2000      	movs	r0, #0
 800fc46:	6031      	str	r1, [r6, #0]
 800fc48:	602b      	str	r3, [r5, #0]
 800fc4a:	b016      	add	sp, #88	@ 0x58
 800fc4c:	bd70      	pop	{r4, r5, r6, pc}
 800fc4e:	466a      	mov	r2, sp
 800fc50:	f000 f848 	bl	800fce4 <_fstat_r>
 800fc54:	2800      	cmp	r0, #0
 800fc56:	dbec      	blt.n	800fc32 <__swhatbuf_r+0x12>
 800fc58:	9901      	ldr	r1, [sp, #4]
 800fc5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fc5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fc62:	4259      	negs	r1, r3
 800fc64:	4159      	adcs	r1, r3
 800fc66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc6a:	e7eb      	b.n	800fc44 <__swhatbuf_r+0x24>

0800fc6c <__smakebuf_r>:
 800fc6c:	898b      	ldrh	r3, [r1, #12]
 800fc6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc70:	079d      	lsls	r5, r3, #30
 800fc72:	4606      	mov	r6, r0
 800fc74:	460c      	mov	r4, r1
 800fc76:	d507      	bpl.n	800fc88 <__smakebuf_r+0x1c>
 800fc78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc7c:	6023      	str	r3, [r4, #0]
 800fc7e:	6123      	str	r3, [r4, #16]
 800fc80:	2301      	movs	r3, #1
 800fc82:	6163      	str	r3, [r4, #20]
 800fc84:	b003      	add	sp, #12
 800fc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc88:	ab01      	add	r3, sp, #4
 800fc8a:	466a      	mov	r2, sp
 800fc8c:	f7ff ffc8 	bl	800fc20 <__swhatbuf_r>
 800fc90:	9f00      	ldr	r7, [sp, #0]
 800fc92:	4605      	mov	r5, r0
 800fc94:	4639      	mov	r1, r7
 800fc96:	4630      	mov	r0, r6
 800fc98:	f7fe fdbc 	bl	800e814 <_malloc_r>
 800fc9c:	b948      	cbnz	r0, 800fcb2 <__smakebuf_r+0x46>
 800fc9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fca2:	059a      	lsls	r2, r3, #22
 800fca4:	d4ee      	bmi.n	800fc84 <__smakebuf_r+0x18>
 800fca6:	f023 0303 	bic.w	r3, r3, #3
 800fcaa:	f043 0302 	orr.w	r3, r3, #2
 800fcae:	81a3      	strh	r3, [r4, #12]
 800fcb0:	e7e2      	b.n	800fc78 <__smakebuf_r+0xc>
 800fcb2:	89a3      	ldrh	r3, [r4, #12]
 800fcb4:	6020      	str	r0, [r4, #0]
 800fcb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcba:	81a3      	strh	r3, [r4, #12]
 800fcbc:	9b01      	ldr	r3, [sp, #4]
 800fcbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fcc2:	b15b      	cbz	r3, 800fcdc <__smakebuf_r+0x70>
 800fcc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcc8:	4630      	mov	r0, r6
 800fcca:	f000 f81d 	bl	800fd08 <_isatty_r>
 800fcce:	b128      	cbz	r0, 800fcdc <__smakebuf_r+0x70>
 800fcd0:	89a3      	ldrh	r3, [r4, #12]
 800fcd2:	f023 0303 	bic.w	r3, r3, #3
 800fcd6:	f043 0301 	orr.w	r3, r3, #1
 800fcda:	81a3      	strh	r3, [r4, #12]
 800fcdc:	89a3      	ldrh	r3, [r4, #12]
 800fcde:	431d      	orrs	r5, r3
 800fce0:	81a5      	strh	r5, [r4, #12]
 800fce2:	e7cf      	b.n	800fc84 <__smakebuf_r+0x18>

0800fce4 <_fstat_r>:
 800fce4:	b538      	push	{r3, r4, r5, lr}
 800fce6:	4d07      	ldr	r5, [pc, #28]	@ (800fd04 <_fstat_r+0x20>)
 800fce8:	2300      	movs	r3, #0
 800fcea:	4604      	mov	r4, r0
 800fcec:	4608      	mov	r0, r1
 800fcee:	4611      	mov	r1, r2
 800fcf0:	602b      	str	r3, [r5, #0]
 800fcf2:	f7f7 fe69 	bl	80079c8 <_fstat>
 800fcf6:	1c43      	adds	r3, r0, #1
 800fcf8:	d102      	bne.n	800fd00 <_fstat_r+0x1c>
 800fcfa:	682b      	ldr	r3, [r5, #0]
 800fcfc:	b103      	cbz	r3, 800fd00 <_fstat_r+0x1c>
 800fcfe:	6023      	str	r3, [r4, #0]
 800fd00:	bd38      	pop	{r3, r4, r5, pc}
 800fd02:	bf00      	nop
 800fd04:	20000888 	.word	0x20000888

0800fd08 <_isatty_r>:
 800fd08:	b538      	push	{r3, r4, r5, lr}
 800fd0a:	4d06      	ldr	r5, [pc, #24]	@ (800fd24 <_isatty_r+0x1c>)
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	4604      	mov	r4, r0
 800fd10:	4608      	mov	r0, r1
 800fd12:	602b      	str	r3, [r5, #0]
 800fd14:	f7f7 fe68 	bl	80079e8 <_isatty>
 800fd18:	1c43      	adds	r3, r0, #1
 800fd1a:	d102      	bne.n	800fd22 <_isatty_r+0x1a>
 800fd1c:	682b      	ldr	r3, [r5, #0]
 800fd1e:	b103      	cbz	r3, 800fd22 <_isatty_r+0x1a>
 800fd20:	6023      	str	r3, [r4, #0]
 800fd22:	bd38      	pop	{r3, r4, r5, pc}
 800fd24:	20000888 	.word	0x20000888

0800fd28 <atan2>:
 800fd28:	f000 bbc6 	b.w	80104b8 <__ieee754_atan2>
 800fd2c:	0000      	movs	r0, r0
	...

0800fd30 <hypot>:
 800fd30:	b508      	push	{r3, lr}
 800fd32:	ed2d 8b06 	vpush	{d8-d10}
 800fd36:	eeb0 aa40 	vmov.f32	s20, s0
 800fd3a:	eef0 aa60 	vmov.f32	s21, s1
 800fd3e:	eeb0 9a41 	vmov.f32	s18, s2
 800fd42:	eef0 9a61 	vmov.f32	s19, s3
 800fd46:	f000 fc7d 	bl	8010644 <__ieee754_hypot>
 800fd4a:	eeb0 8a40 	vmov.f32	s16, s0
 800fd4e:	eef0 8a60 	vmov.f32	s17, s1
 800fd52:	f000 f8c9 	bl	800fee8 <finite>
 800fd56:	b998      	cbnz	r0, 800fd80 <hypot+0x50>
 800fd58:	eeb0 0a4a 	vmov.f32	s0, s20
 800fd5c:	eef0 0a6a 	vmov.f32	s1, s21
 800fd60:	f000 f8c2 	bl	800fee8 <finite>
 800fd64:	b160      	cbz	r0, 800fd80 <hypot+0x50>
 800fd66:	eeb0 0a49 	vmov.f32	s0, s18
 800fd6a:	eef0 0a69 	vmov.f32	s1, s19
 800fd6e:	f000 f8bb 	bl	800fee8 <finite>
 800fd72:	b128      	cbz	r0, 800fd80 <hypot+0x50>
 800fd74:	f7fd faea 	bl	800d34c <__errno>
 800fd78:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800fd90 <hypot+0x60>
 800fd7c:	2322      	movs	r3, #34	@ 0x22
 800fd7e:	6003      	str	r3, [r0, #0]
 800fd80:	eeb0 0a48 	vmov.f32	s0, s16
 800fd84:	eef0 0a68 	vmov.f32	s1, s17
 800fd88:	ecbd 8b06 	vpop	{d8-d10}
 800fd8c:	bd08      	pop	{r3, pc}
 800fd8e:	bf00      	nop
 800fd90:	00000000 	.word	0x00000000
 800fd94:	7ff00000 	.word	0x7ff00000

0800fd98 <cos>:
 800fd98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd9a:	ec53 2b10 	vmov	r2, r3, d0
 800fd9e:	4826      	ldr	r0, [pc, #152]	@ (800fe38 <cos+0xa0>)
 800fda0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fda4:	4281      	cmp	r1, r0
 800fda6:	d806      	bhi.n	800fdb6 <cos+0x1e>
 800fda8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800fe30 <cos+0x98>
 800fdac:	b005      	add	sp, #20
 800fdae:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdb2:	f000 b9fd 	b.w	80101b0 <__kernel_cos>
 800fdb6:	4821      	ldr	r0, [pc, #132]	@ (800fe3c <cos+0xa4>)
 800fdb8:	4281      	cmp	r1, r0
 800fdba:	d908      	bls.n	800fdce <cos+0x36>
 800fdbc:	4610      	mov	r0, r2
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	f7f0 fa62 	bl	8000288 <__aeabi_dsub>
 800fdc4:	ec41 0b10 	vmov	d0, r0, r1
 800fdc8:	b005      	add	sp, #20
 800fdca:	f85d fb04 	ldr.w	pc, [sp], #4
 800fdce:	4668      	mov	r0, sp
 800fdd0:	f000 fd4e 	bl	8010870 <__ieee754_rem_pio2>
 800fdd4:	f000 0003 	and.w	r0, r0, #3
 800fdd8:	2801      	cmp	r0, #1
 800fdda:	d00b      	beq.n	800fdf4 <cos+0x5c>
 800fddc:	2802      	cmp	r0, #2
 800fdde:	d015      	beq.n	800fe0c <cos+0x74>
 800fde0:	b9d8      	cbnz	r0, 800fe1a <cos+0x82>
 800fde2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fde6:	ed9d 0b00 	vldr	d0, [sp]
 800fdea:	f000 f9e1 	bl	80101b0 <__kernel_cos>
 800fdee:	ec51 0b10 	vmov	r0, r1, d0
 800fdf2:	e7e7      	b.n	800fdc4 <cos+0x2c>
 800fdf4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fdf8:	ed9d 0b00 	vldr	d0, [sp]
 800fdfc:	f000 faa0 	bl	8010340 <__kernel_sin>
 800fe00:	ec53 2b10 	vmov	r2, r3, d0
 800fe04:	4610      	mov	r0, r2
 800fe06:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fe0a:	e7db      	b.n	800fdc4 <cos+0x2c>
 800fe0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe10:	ed9d 0b00 	vldr	d0, [sp]
 800fe14:	f000 f9cc 	bl	80101b0 <__kernel_cos>
 800fe18:	e7f2      	b.n	800fe00 <cos+0x68>
 800fe1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe1e:	ed9d 0b00 	vldr	d0, [sp]
 800fe22:	2001      	movs	r0, #1
 800fe24:	f000 fa8c 	bl	8010340 <__kernel_sin>
 800fe28:	e7e1      	b.n	800fdee <cos+0x56>
 800fe2a:	bf00      	nop
 800fe2c:	f3af 8000 	nop.w
	...
 800fe38:	3fe921fb 	.word	0x3fe921fb
 800fe3c:	7fefffff 	.word	0x7fefffff

0800fe40 <sin>:
 800fe40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe42:	ec53 2b10 	vmov	r2, r3, d0
 800fe46:	4826      	ldr	r0, [pc, #152]	@ (800fee0 <sin+0xa0>)
 800fe48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fe4c:	4281      	cmp	r1, r0
 800fe4e:	d807      	bhi.n	800fe60 <sin+0x20>
 800fe50:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800fed8 <sin+0x98>
 800fe54:	2000      	movs	r0, #0
 800fe56:	b005      	add	sp, #20
 800fe58:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe5c:	f000 ba70 	b.w	8010340 <__kernel_sin>
 800fe60:	4820      	ldr	r0, [pc, #128]	@ (800fee4 <sin+0xa4>)
 800fe62:	4281      	cmp	r1, r0
 800fe64:	d908      	bls.n	800fe78 <sin+0x38>
 800fe66:	4610      	mov	r0, r2
 800fe68:	4619      	mov	r1, r3
 800fe6a:	f7f0 fa0d 	bl	8000288 <__aeabi_dsub>
 800fe6e:	ec41 0b10 	vmov	d0, r0, r1
 800fe72:	b005      	add	sp, #20
 800fe74:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe78:	4668      	mov	r0, sp
 800fe7a:	f000 fcf9 	bl	8010870 <__ieee754_rem_pio2>
 800fe7e:	f000 0003 	and.w	r0, r0, #3
 800fe82:	2801      	cmp	r0, #1
 800fe84:	d00c      	beq.n	800fea0 <sin+0x60>
 800fe86:	2802      	cmp	r0, #2
 800fe88:	d011      	beq.n	800feae <sin+0x6e>
 800fe8a:	b9e8      	cbnz	r0, 800fec8 <sin+0x88>
 800fe8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe90:	ed9d 0b00 	vldr	d0, [sp]
 800fe94:	2001      	movs	r0, #1
 800fe96:	f000 fa53 	bl	8010340 <__kernel_sin>
 800fe9a:	ec51 0b10 	vmov	r0, r1, d0
 800fe9e:	e7e6      	b.n	800fe6e <sin+0x2e>
 800fea0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fea4:	ed9d 0b00 	vldr	d0, [sp]
 800fea8:	f000 f982 	bl	80101b0 <__kernel_cos>
 800feac:	e7f5      	b.n	800fe9a <sin+0x5a>
 800feae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800feb2:	ed9d 0b00 	vldr	d0, [sp]
 800feb6:	2001      	movs	r0, #1
 800feb8:	f000 fa42 	bl	8010340 <__kernel_sin>
 800febc:	ec53 2b10 	vmov	r2, r3, d0
 800fec0:	4610      	mov	r0, r2
 800fec2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fec6:	e7d2      	b.n	800fe6e <sin+0x2e>
 800fec8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fecc:	ed9d 0b00 	vldr	d0, [sp]
 800fed0:	f000 f96e 	bl	80101b0 <__kernel_cos>
 800fed4:	e7f2      	b.n	800febc <sin+0x7c>
 800fed6:	bf00      	nop
	...
 800fee0:	3fe921fb 	.word	0x3fe921fb
 800fee4:	7fefffff 	.word	0x7fefffff

0800fee8 <finite>:
 800fee8:	b082      	sub	sp, #8
 800feea:	ed8d 0b00 	vstr	d0, [sp]
 800feee:	9801      	ldr	r0, [sp, #4]
 800fef0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800fef4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800fef8:	0fc0      	lsrs	r0, r0, #31
 800fefa:	b002      	add	sp, #8
 800fefc:	4770      	bx	lr

0800fefe <fmax>:
 800fefe:	b508      	push	{r3, lr}
 800ff00:	ed2d 8b04 	vpush	{d8-d9}
 800ff04:	eeb0 8a40 	vmov.f32	s16, s0
 800ff08:	eef0 8a60 	vmov.f32	s17, s1
 800ff0c:	eeb0 9a41 	vmov.f32	s18, s2
 800ff10:	eef0 9a61 	vmov.f32	s19, s3
 800ff14:	f000 f848 	bl	800ffa8 <__fpclassifyd>
 800ff18:	b950      	cbnz	r0, 800ff30 <fmax+0x32>
 800ff1a:	eeb0 8a49 	vmov.f32	s16, s18
 800ff1e:	eef0 8a69 	vmov.f32	s17, s19
 800ff22:	eeb0 0a48 	vmov.f32	s0, s16
 800ff26:	eef0 0a68 	vmov.f32	s1, s17
 800ff2a:	ecbd 8b04 	vpop	{d8-d9}
 800ff2e:	bd08      	pop	{r3, pc}
 800ff30:	eeb0 0a49 	vmov.f32	s0, s18
 800ff34:	eef0 0a69 	vmov.f32	s1, s19
 800ff38:	f000 f836 	bl	800ffa8 <__fpclassifyd>
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	d0f0      	beq.n	800ff22 <fmax+0x24>
 800ff40:	ec53 2b19 	vmov	r2, r3, d9
 800ff44:	ec51 0b18 	vmov	r0, r1, d8
 800ff48:	f7f0 fde6 	bl	8000b18 <__aeabi_dcmpgt>
 800ff4c:	2800      	cmp	r0, #0
 800ff4e:	d0e4      	beq.n	800ff1a <fmax+0x1c>
 800ff50:	e7e7      	b.n	800ff22 <fmax+0x24>

0800ff52 <fmin>:
 800ff52:	b508      	push	{r3, lr}
 800ff54:	ed2d 8b04 	vpush	{d8-d9}
 800ff58:	eeb0 8a40 	vmov.f32	s16, s0
 800ff5c:	eef0 8a60 	vmov.f32	s17, s1
 800ff60:	eeb0 9a41 	vmov.f32	s18, s2
 800ff64:	eef0 9a61 	vmov.f32	s19, s3
 800ff68:	f000 f81e 	bl	800ffa8 <__fpclassifyd>
 800ff6c:	b950      	cbnz	r0, 800ff84 <fmin+0x32>
 800ff6e:	eeb0 8a49 	vmov.f32	s16, s18
 800ff72:	eef0 8a69 	vmov.f32	s17, s19
 800ff76:	eeb0 0a48 	vmov.f32	s0, s16
 800ff7a:	eef0 0a68 	vmov.f32	s1, s17
 800ff7e:	ecbd 8b04 	vpop	{d8-d9}
 800ff82:	bd08      	pop	{r3, pc}
 800ff84:	eeb0 0a49 	vmov.f32	s0, s18
 800ff88:	eef0 0a69 	vmov.f32	s1, s19
 800ff8c:	f000 f80c 	bl	800ffa8 <__fpclassifyd>
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d0f0      	beq.n	800ff76 <fmin+0x24>
 800ff94:	ec53 2b19 	vmov	r2, r3, d9
 800ff98:	ec51 0b18 	vmov	r0, r1, d8
 800ff9c:	f7f0 fd9e 	bl	8000adc <__aeabi_dcmplt>
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d0e4      	beq.n	800ff6e <fmin+0x1c>
 800ffa4:	e7e7      	b.n	800ff76 <fmin+0x24>
	...

0800ffa8 <__fpclassifyd>:
 800ffa8:	ec51 0b10 	vmov	r0, r1, d0
 800ffac:	b510      	push	{r4, lr}
 800ffae:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800ffb2:	460b      	mov	r3, r1
 800ffb4:	d019      	beq.n	800ffea <__fpclassifyd+0x42>
 800ffb6:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800ffba:	490e      	ldr	r1, [pc, #56]	@ (800fff4 <__fpclassifyd+0x4c>)
 800ffbc:	428a      	cmp	r2, r1
 800ffbe:	d90e      	bls.n	800ffde <__fpclassifyd+0x36>
 800ffc0:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800ffc4:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800ffc8:	428a      	cmp	r2, r1
 800ffca:	d908      	bls.n	800ffde <__fpclassifyd+0x36>
 800ffcc:	4a0a      	ldr	r2, [pc, #40]	@ (800fff8 <__fpclassifyd+0x50>)
 800ffce:	4213      	tst	r3, r2
 800ffd0:	d007      	beq.n	800ffe2 <__fpclassifyd+0x3a>
 800ffd2:	4294      	cmp	r4, r2
 800ffd4:	d107      	bne.n	800ffe6 <__fpclassifyd+0x3e>
 800ffd6:	fab0 f080 	clz	r0, r0
 800ffda:	0940      	lsrs	r0, r0, #5
 800ffdc:	bd10      	pop	{r4, pc}
 800ffde:	2004      	movs	r0, #4
 800ffe0:	e7fc      	b.n	800ffdc <__fpclassifyd+0x34>
 800ffe2:	2003      	movs	r0, #3
 800ffe4:	e7fa      	b.n	800ffdc <__fpclassifyd+0x34>
 800ffe6:	2000      	movs	r0, #0
 800ffe8:	e7f8      	b.n	800ffdc <__fpclassifyd+0x34>
 800ffea:	2800      	cmp	r0, #0
 800ffec:	d1ee      	bne.n	800ffcc <__fpclassifyd+0x24>
 800ffee:	2002      	movs	r0, #2
 800fff0:	e7f4      	b.n	800ffdc <__fpclassifyd+0x34>
 800fff2:	bf00      	nop
 800fff4:	7fdfffff 	.word	0x7fdfffff
 800fff8:	7ff00000 	.word	0x7ff00000

0800fffc <__ieee754_sqrt>:
 800fffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010000:	4a68      	ldr	r2, [pc, #416]	@ (80101a4 <__ieee754_sqrt+0x1a8>)
 8010002:	ec55 4b10 	vmov	r4, r5, d0
 8010006:	43aa      	bics	r2, r5
 8010008:	462b      	mov	r3, r5
 801000a:	4621      	mov	r1, r4
 801000c:	d110      	bne.n	8010030 <__ieee754_sqrt+0x34>
 801000e:	4622      	mov	r2, r4
 8010010:	4620      	mov	r0, r4
 8010012:	4629      	mov	r1, r5
 8010014:	f7f0 faf0 	bl	80005f8 <__aeabi_dmul>
 8010018:	4602      	mov	r2, r0
 801001a:	460b      	mov	r3, r1
 801001c:	4620      	mov	r0, r4
 801001e:	4629      	mov	r1, r5
 8010020:	f7f0 f934 	bl	800028c <__adddf3>
 8010024:	4604      	mov	r4, r0
 8010026:	460d      	mov	r5, r1
 8010028:	ec45 4b10 	vmov	d0, r4, r5
 801002c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010030:	2d00      	cmp	r5, #0
 8010032:	dc0e      	bgt.n	8010052 <__ieee754_sqrt+0x56>
 8010034:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010038:	4322      	orrs	r2, r4
 801003a:	d0f5      	beq.n	8010028 <__ieee754_sqrt+0x2c>
 801003c:	b19d      	cbz	r5, 8010066 <__ieee754_sqrt+0x6a>
 801003e:	4622      	mov	r2, r4
 8010040:	4620      	mov	r0, r4
 8010042:	4629      	mov	r1, r5
 8010044:	f7f0 f920 	bl	8000288 <__aeabi_dsub>
 8010048:	4602      	mov	r2, r0
 801004a:	460b      	mov	r3, r1
 801004c:	f7f0 fbfe 	bl	800084c <__aeabi_ddiv>
 8010050:	e7e8      	b.n	8010024 <__ieee754_sqrt+0x28>
 8010052:	152a      	asrs	r2, r5, #20
 8010054:	d115      	bne.n	8010082 <__ieee754_sqrt+0x86>
 8010056:	2000      	movs	r0, #0
 8010058:	e009      	b.n	801006e <__ieee754_sqrt+0x72>
 801005a:	0acb      	lsrs	r3, r1, #11
 801005c:	3a15      	subs	r2, #21
 801005e:	0549      	lsls	r1, r1, #21
 8010060:	2b00      	cmp	r3, #0
 8010062:	d0fa      	beq.n	801005a <__ieee754_sqrt+0x5e>
 8010064:	e7f7      	b.n	8010056 <__ieee754_sqrt+0x5a>
 8010066:	462a      	mov	r2, r5
 8010068:	e7fa      	b.n	8010060 <__ieee754_sqrt+0x64>
 801006a:	005b      	lsls	r3, r3, #1
 801006c:	3001      	adds	r0, #1
 801006e:	02dc      	lsls	r4, r3, #11
 8010070:	d5fb      	bpl.n	801006a <__ieee754_sqrt+0x6e>
 8010072:	1e44      	subs	r4, r0, #1
 8010074:	1b12      	subs	r2, r2, r4
 8010076:	f1c0 0420 	rsb	r4, r0, #32
 801007a:	fa21 f404 	lsr.w	r4, r1, r4
 801007e:	4323      	orrs	r3, r4
 8010080:	4081      	lsls	r1, r0
 8010082:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010086:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801008a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801008e:	07d2      	lsls	r2, r2, #31
 8010090:	bf5c      	itt	pl
 8010092:	005b      	lslpl	r3, r3, #1
 8010094:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010098:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801009c:	bf58      	it	pl
 801009e:	0049      	lslpl	r1, r1, #1
 80100a0:	2600      	movs	r6, #0
 80100a2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80100a6:	106d      	asrs	r5, r5, #1
 80100a8:	0049      	lsls	r1, r1, #1
 80100aa:	2016      	movs	r0, #22
 80100ac:	4632      	mov	r2, r6
 80100ae:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80100b2:	1917      	adds	r7, r2, r4
 80100b4:	429f      	cmp	r7, r3
 80100b6:	bfde      	ittt	le
 80100b8:	193a      	addle	r2, r7, r4
 80100ba:	1bdb      	suble	r3, r3, r7
 80100bc:	1936      	addle	r6, r6, r4
 80100be:	0fcf      	lsrs	r7, r1, #31
 80100c0:	3801      	subs	r0, #1
 80100c2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80100c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80100ca:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80100ce:	d1f0      	bne.n	80100b2 <__ieee754_sqrt+0xb6>
 80100d0:	4604      	mov	r4, r0
 80100d2:	2720      	movs	r7, #32
 80100d4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80100d8:	429a      	cmp	r2, r3
 80100da:	eb00 0e0c 	add.w	lr, r0, ip
 80100de:	db02      	blt.n	80100e6 <__ieee754_sqrt+0xea>
 80100e0:	d113      	bne.n	801010a <__ieee754_sqrt+0x10e>
 80100e2:	458e      	cmp	lr, r1
 80100e4:	d811      	bhi.n	801010a <__ieee754_sqrt+0x10e>
 80100e6:	f1be 0f00 	cmp.w	lr, #0
 80100ea:	eb0e 000c 	add.w	r0, lr, ip
 80100ee:	da42      	bge.n	8010176 <__ieee754_sqrt+0x17a>
 80100f0:	2800      	cmp	r0, #0
 80100f2:	db40      	blt.n	8010176 <__ieee754_sqrt+0x17a>
 80100f4:	f102 0801 	add.w	r8, r2, #1
 80100f8:	1a9b      	subs	r3, r3, r2
 80100fa:	458e      	cmp	lr, r1
 80100fc:	bf88      	it	hi
 80100fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010102:	eba1 010e 	sub.w	r1, r1, lr
 8010106:	4464      	add	r4, ip
 8010108:	4642      	mov	r2, r8
 801010a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801010e:	3f01      	subs	r7, #1
 8010110:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010114:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010118:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801011c:	d1dc      	bne.n	80100d8 <__ieee754_sqrt+0xdc>
 801011e:	4319      	orrs	r1, r3
 8010120:	d01b      	beq.n	801015a <__ieee754_sqrt+0x15e>
 8010122:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80101a8 <__ieee754_sqrt+0x1ac>
 8010126:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80101ac <__ieee754_sqrt+0x1b0>
 801012a:	e9da 0100 	ldrd	r0, r1, [sl]
 801012e:	e9db 2300 	ldrd	r2, r3, [fp]
 8010132:	f7f0 f8a9 	bl	8000288 <__aeabi_dsub>
 8010136:	e9da 8900 	ldrd	r8, r9, [sl]
 801013a:	4602      	mov	r2, r0
 801013c:	460b      	mov	r3, r1
 801013e:	4640      	mov	r0, r8
 8010140:	4649      	mov	r1, r9
 8010142:	f7f0 fcd5 	bl	8000af0 <__aeabi_dcmple>
 8010146:	b140      	cbz	r0, 801015a <__ieee754_sqrt+0x15e>
 8010148:	f1b4 3fff 	cmp.w	r4, #4294967295
 801014c:	e9da 0100 	ldrd	r0, r1, [sl]
 8010150:	e9db 2300 	ldrd	r2, r3, [fp]
 8010154:	d111      	bne.n	801017a <__ieee754_sqrt+0x17e>
 8010156:	3601      	adds	r6, #1
 8010158:	463c      	mov	r4, r7
 801015a:	1072      	asrs	r2, r6, #1
 801015c:	0863      	lsrs	r3, r4, #1
 801015e:	07f1      	lsls	r1, r6, #31
 8010160:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010164:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010168:	bf48      	it	mi
 801016a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801016e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010172:	4618      	mov	r0, r3
 8010174:	e756      	b.n	8010024 <__ieee754_sqrt+0x28>
 8010176:	4690      	mov	r8, r2
 8010178:	e7be      	b.n	80100f8 <__ieee754_sqrt+0xfc>
 801017a:	f7f0 f887 	bl	800028c <__adddf3>
 801017e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010182:	4602      	mov	r2, r0
 8010184:	460b      	mov	r3, r1
 8010186:	4640      	mov	r0, r8
 8010188:	4649      	mov	r1, r9
 801018a:	f7f0 fca7 	bl	8000adc <__aeabi_dcmplt>
 801018e:	b120      	cbz	r0, 801019a <__ieee754_sqrt+0x19e>
 8010190:	1ca0      	adds	r0, r4, #2
 8010192:	bf08      	it	eq
 8010194:	3601      	addeq	r6, #1
 8010196:	3402      	adds	r4, #2
 8010198:	e7df      	b.n	801015a <__ieee754_sqrt+0x15e>
 801019a:	1c63      	adds	r3, r4, #1
 801019c:	f023 0401 	bic.w	r4, r3, #1
 80101a0:	e7db      	b.n	801015a <__ieee754_sqrt+0x15e>
 80101a2:	bf00      	nop
 80101a4:	7ff00000 	.word	0x7ff00000
 80101a8:	200002a8 	.word	0x200002a8
 80101ac:	200002a0 	.word	0x200002a0

080101b0 <__kernel_cos>:
 80101b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b4:	ec57 6b10 	vmov	r6, r7, d0
 80101b8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80101bc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80101c0:	ed8d 1b00 	vstr	d1, [sp]
 80101c4:	d206      	bcs.n	80101d4 <__kernel_cos+0x24>
 80101c6:	4630      	mov	r0, r6
 80101c8:	4639      	mov	r1, r7
 80101ca:	f7f0 fcc5 	bl	8000b58 <__aeabi_d2iz>
 80101ce:	2800      	cmp	r0, #0
 80101d0:	f000 8088 	beq.w	80102e4 <__kernel_cos+0x134>
 80101d4:	4632      	mov	r2, r6
 80101d6:	463b      	mov	r3, r7
 80101d8:	4630      	mov	r0, r6
 80101da:	4639      	mov	r1, r7
 80101dc:	f7f0 fa0c 	bl	80005f8 <__aeabi_dmul>
 80101e0:	4b51      	ldr	r3, [pc, #324]	@ (8010328 <__kernel_cos+0x178>)
 80101e2:	2200      	movs	r2, #0
 80101e4:	4604      	mov	r4, r0
 80101e6:	460d      	mov	r5, r1
 80101e8:	f7f0 fa06 	bl	80005f8 <__aeabi_dmul>
 80101ec:	a340      	add	r3, pc, #256	@ (adr r3, 80102f0 <__kernel_cos+0x140>)
 80101ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f2:	4682      	mov	sl, r0
 80101f4:	468b      	mov	fp, r1
 80101f6:	4620      	mov	r0, r4
 80101f8:	4629      	mov	r1, r5
 80101fa:	f7f0 f9fd 	bl	80005f8 <__aeabi_dmul>
 80101fe:	a33e      	add	r3, pc, #248	@ (adr r3, 80102f8 <__kernel_cos+0x148>)
 8010200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010204:	f7f0 f842 	bl	800028c <__adddf3>
 8010208:	4622      	mov	r2, r4
 801020a:	462b      	mov	r3, r5
 801020c:	f7f0 f9f4 	bl	80005f8 <__aeabi_dmul>
 8010210:	a33b      	add	r3, pc, #236	@ (adr r3, 8010300 <__kernel_cos+0x150>)
 8010212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010216:	f7f0 f837 	bl	8000288 <__aeabi_dsub>
 801021a:	4622      	mov	r2, r4
 801021c:	462b      	mov	r3, r5
 801021e:	f7f0 f9eb 	bl	80005f8 <__aeabi_dmul>
 8010222:	a339      	add	r3, pc, #228	@ (adr r3, 8010308 <__kernel_cos+0x158>)
 8010224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010228:	f7f0 f830 	bl	800028c <__adddf3>
 801022c:	4622      	mov	r2, r4
 801022e:	462b      	mov	r3, r5
 8010230:	f7f0 f9e2 	bl	80005f8 <__aeabi_dmul>
 8010234:	a336      	add	r3, pc, #216	@ (adr r3, 8010310 <__kernel_cos+0x160>)
 8010236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023a:	f7f0 f825 	bl	8000288 <__aeabi_dsub>
 801023e:	4622      	mov	r2, r4
 8010240:	462b      	mov	r3, r5
 8010242:	f7f0 f9d9 	bl	80005f8 <__aeabi_dmul>
 8010246:	a334      	add	r3, pc, #208	@ (adr r3, 8010318 <__kernel_cos+0x168>)
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	f7f0 f81e 	bl	800028c <__adddf3>
 8010250:	4622      	mov	r2, r4
 8010252:	462b      	mov	r3, r5
 8010254:	f7f0 f9d0 	bl	80005f8 <__aeabi_dmul>
 8010258:	4622      	mov	r2, r4
 801025a:	462b      	mov	r3, r5
 801025c:	f7f0 f9cc 	bl	80005f8 <__aeabi_dmul>
 8010260:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010264:	4604      	mov	r4, r0
 8010266:	460d      	mov	r5, r1
 8010268:	4630      	mov	r0, r6
 801026a:	4639      	mov	r1, r7
 801026c:	f7f0 f9c4 	bl	80005f8 <__aeabi_dmul>
 8010270:	460b      	mov	r3, r1
 8010272:	4602      	mov	r2, r0
 8010274:	4629      	mov	r1, r5
 8010276:	4620      	mov	r0, r4
 8010278:	f7f0 f806 	bl	8000288 <__aeabi_dsub>
 801027c:	4b2b      	ldr	r3, [pc, #172]	@ (801032c <__kernel_cos+0x17c>)
 801027e:	4598      	cmp	r8, r3
 8010280:	4606      	mov	r6, r0
 8010282:	460f      	mov	r7, r1
 8010284:	d810      	bhi.n	80102a8 <__kernel_cos+0xf8>
 8010286:	4602      	mov	r2, r0
 8010288:	460b      	mov	r3, r1
 801028a:	4650      	mov	r0, sl
 801028c:	4659      	mov	r1, fp
 801028e:	f7ef fffb 	bl	8000288 <__aeabi_dsub>
 8010292:	460b      	mov	r3, r1
 8010294:	4926      	ldr	r1, [pc, #152]	@ (8010330 <__kernel_cos+0x180>)
 8010296:	4602      	mov	r2, r0
 8010298:	2000      	movs	r0, #0
 801029a:	f7ef fff5 	bl	8000288 <__aeabi_dsub>
 801029e:	ec41 0b10 	vmov	d0, r0, r1
 80102a2:	b003      	add	sp, #12
 80102a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102a8:	4b22      	ldr	r3, [pc, #136]	@ (8010334 <__kernel_cos+0x184>)
 80102aa:	4921      	ldr	r1, [pc, #132]	@ (8010330 <__kernel_cos+0x180>)
 80102ac:	4598      	cmp	r8, r3
 80102ae:	bf8c      	ite	hi
 80102b0:	4d21      	ldrhi	r5, [pc, #132]	@ (8010338 <__kernel_cos+0x188>)
 80102b2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80102b6:	2400      	movs	r4, #0
 80102b8:	4622      	mov	r2, r4
 80102ba:	462b      	mov	r3, r5
 80102bc:	2000      	movs	r0, #0
 80102be:	f7ef ffe3 	bl	8000288 <__aeabi_dsub>
 80102c2:	4622      	mov	r2, r4
 80102c4:	4680      	mov	r8, r0
 80102c6:	4689      	mov	r9, r1
 80102c8:	462b      	mov	r3, r5
 80102ca:	4650      	mov	r0, sl
 80102cc:	4659      	mov	r1, fp
 80102ce:	f7ef ffdb 	bl	8000288 <__aeabi_dsub>
 80102d2:	4632      	mov	r2, r6
 80102d4:	463b      	mov	r3, r7
 80102d6:	f7ef ffd7 	bl	8000288 <__aeabi_dsub>
 80102da:	4602      	mov	r2, r0
 80102dc:	460b      	mov	r3, r1
 80102de:	4640      	mov	r0, r8
 80102e0:	4649      	mov	r1, r9
 80102e2:	e7da      	b.n	801029a <__kernel_cos+0xea>
 80102e4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8010320 <__kernel_cos+0x170>
 80102e8:	e7db      	b.n	80102a2 <__kernel_cos+0xf2>
 80102ea:	bf00      	nop
 80102ec:	f3af 8000 	nop.w
 80102f0:	be8838d4 	.word	0xbe8838d4
 80102f4:	bda8fae9 	.word	0xbda8fae9
 80102f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80102fc:	3e21ee9e 	.word	0x3e21ee9e
 8010300:	809c52ad 	.word	0x809c52ad
 8010304:	3e927e4f 	.word	0x3e927e4f
 8010308:	19cb1590 	.word	0x19cb1590
 801030c:	3efa01a0 	.word	0x3efa01a0
 8010310:	16c15177 	.word	0x16c15177
 8010314:	3f56c16c 	.word	0x3f56c16c
 8010318:	5555554c 	.word	0x5555554c
 801031c:	3fa55555 	.word	0x3fa55555
 8010320:	00000000 	.word	0x00000000
 8010324:	3ff00000 	.word	0x3ff00000
 8010328:	3fe00000 	.word	0x3fe00000
 801032c:	3fd33332 	.word	0x3fd33332
 8010330:	3ff00000 	.word	0x3ff00000
 8010334:	3fe90000 	.word	0x3fe90000
 8010338:	3fd20000 	.word	0x3fd20000
 801033c:	00000000 	.word	0x00000000

08010340 <__kernel_sin>:
 8010340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010344:	ec55 4b10 	vmov	r4, r5, d0
 8010348:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801034c:	b085      	sub	sp, #20
 801034e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8010352:	ed8d 1b02 	vstr	d1, [sp, #8]
 8010356:	4680      	mov	r8, r0
 8010358:	d205      	bcs.n	8010366 <__kernel_sin+0x26>
 801035a:	4620      	mov	r0, r4
 801035c:	4629      	mov	r1, r5
 801035e:	f7f0 fbfb 	bl	8000b58 <__aeabi_d2iz>
 8010362:	2800      	cmp	r0, #0
 8010364:	d052      	beq.n	801040c <__kernel_sin+0xcc>
 8010366:	4622      	mov	r2, r4
 8010368:	462b      	mov	r3, r5
 801036a:	4620      	mov	r0, r4
 801036c:	4629      	mov	r1, r5
 801036e:	f7f0 f943 	bl	80005f8 <__aeabi_dmul>
 8010372:	4682      	mov	sl, r0
 8010374:	468b      	mov	fp, r1
 8010376:	4602      	mov	r2, r0
 8010378:	460b      	mov	r3, r1
 801037a:	4620      	mov	r0, r4
 801037c:	4629      	mov	r1, r5
 801037e:	f7f0 f93b 	bl	80005f8 <__aeabi_dmul>
 8010382:	a342      	add	r3, pc, #264	@ (adr r3, 801048c <__kernel_sin+0x14c>)
 8010384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010388:	e9cd 0100 	strd	r0, r1, [sp]
 801038c:	4650      	mov	r0, sl
 801038e:	4659      	mov	r1, fp
 8010390:	f7f0 f932 	bl	80005f8 <__aeabi_dmul>
 8010394:	a33f      	add	r3, pc, #252	@ (adr r3, 8010494 <__kernel_sin+0x154>)
 8010396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039a:	f7ef ff75 	bl	8000288 <__aeabi_dsub>
 801039e:	4652      	mov	r2, sl
 80103a0:	465b      	mov	r3, fp
 80103a2:	f7f0 f929 	bl	80005f8 <__aeabi_dmul>
 80103a6:	a33d      	add	r3, pc, #244	@ (adr r3, 801049c <__kernel_sin+0x15c>)
 80103a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ac:	f7ef ff6e 	bl	800028c <__adddf3>
 80103b0:	4652      	mov	r2, sl
 80103b2:	465b      	mov	r3, fp
 80103b4:	f7f0 f920 	bl	80005f8 <__aeabi_dmul>
 80103b8:	a33a      	add	r3, pc, #232	@ (adr r3, 80104a4 <__kernel_sin+0x164>)
 80103ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103be:	f7ef ff63 	bl	8000288 <__aeabi_dsub>
 80103c2:	4652      	mov	r2, sl
 80103c4:	465b      	mov	r3, fp
 80103c6:	f7f0 f917 	bl	80005f8 <__aeabi_dmul>
 80103ca:	a338      	add	r3, pc, #224	@ (adr r3, 80104ac <__kernel_sin+0x16c>)
 80103cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d0:	f7ef ff5c 	bl	800028c <__adddf3>
 80103d4:	4606      	mov	r6, r0
 80103d6:	460f      	mov	r7, r1
 80103d8:	f1b8 0f00 	cmp.w	r8, #0
 80103dc:	d11b      	bne.n	8010416 <__kernel_sin+0xd6>
 80103de:	4602      	mov	r2, r0
 80103e0:	460b      	mov	r3, r1
 80103e2:	4650      	mov	r0, sl
 80103e4:	4659      	mov	r1, fp
 80103e6:	f7f0 f907 	bl	80005f8 <__aeabi_dmul>
 80103ea:	a325      	add	r3, pc, #148	@ (adr r3, 8010480 <__kernel_sin+0x140>)
 80103ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f0:	f7ef ff4a 	bl	8000288 <__aeabi_dsub>
 80103f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103f8:	f7f0 f8fe 	bl	80005f8 <__aeabi_dmul>
 80103fc:	4602      	mov	r2, r0
 80103fe:	460b      	mov	r3, r1
 8010400:	4620      	mov	r0, r4
 8010402:	4629      	mov	r1, r5
 8010404:	f7ef ff42 	bl	800028c <__adddf3>
 8010408:	4604      	mov	r4, r0
 801040a:	460d      	mov	r5, r1
 801040c:	ec45 4b10 	vmov	d0, r4, r5
 8010410:	b005      	add	sp, #20
 8010412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801041a:	4b1b      	ldr	r3, [pc, #108]	@ (8010488 <__kernel_sin+0x148>)
 801041c:	2200      	movs	r2, #0
 801041e:	f7f0 f8eb 	bl	80005f8 <__aeabi_dmul>
 8010422:	4632      	mov	r2, r6
 8010424:	4680      	mov	r8, r0
 8010426:	4689      	mov	r9, r1
 8010428:	463b      	mov	r3, r7
 801042a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801042e:	f7f0 f8e3 	bl	80005f8 <__aeabi_dmul>
 8010432:	4602      	mov	r2, r0
 8010434:	460b      	mov	r3, r1
 8010436:	4640      	mov	r0, r8
 8010438:	4649      	mov	r1, r9
 801043a:	f7ef ff25 	bl	8000288 <__aeabi_dsub>
 801043e:	4652      	mov	r2, sl
 8010440:	465b      	mov	r3, fp
 8010442:	f7f0 f8d9 	bl	80005f8 <__aeabi_dmul>
 8010446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801044a:	f7ef ff1d 	bl	8000288 <__aeabi_dsub>
 801044e:	a30c      	add	r3, pc, #48	@ (adr r3, 8010480 <__kernel_sin+0x140>)
 8010450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010454:	4606      	mov	r6, r0
 8010456:	460f      	mov	r7, r1
 8010458:	e9dd 0100 	ldrd	r0, r1, [sp]
 801045c:	f7f0 f8cc 	bl	80005f8 <__aeabi_dmul>
 8010460:	4602      	mov	r2, r0
 8010462:	460b      	mov	r3, r1
 8010464:	4630      	mov	r0, r6
 8010466:	4639      	mov	r1, r7
 8010468:	f7ef ff10 	bl	800028c <__adddf3>
 801046c:	4602      	mov	r2, r0
 801046e:	460b      	mov	r3, r1
 8010470:	4620      	mov	r0, r4
 8010472:	4629      	mov	r1, r5
 8010474:	f7ef ff08 	bl	8000288 <__aeabi_dsub>
 8010478:	e7c6      	b.n	8010408 <__kernel_sin+0xc8>
 801047a:	bf00      	nop
 801047c:	f3af 8000 	nop.w
 8010480:	55555549 	.word	0x55555549
 8010484:	3fc55555 	.word	0x3fc55555
 8010488:	3fe00000 	.word	0x3fe00000
 801048c:	5acfd57c 	.word	0x5acfd57c
 8010490:	3de5d93a 	.word	0x3de5d93a
 8010494:	8a2b9ceb 	.word	0x8a2b9ceb
 8010498:	3e5ae5e6 	.word	0x3e5ae5e6
 801049c:	57b1fe7d 	.word	0x57b1fe7d
 80104a0:	3ec71de3 	.word	0x3ec71de3
 80104a4:	19c161d5 	.word	0x19c161d5
 80104a8:	3f2a01a0 	.word	0x3f2a01a0
 80104ac:	1110f8a6 	.word	0x1110f8a6
 80104b0:	3f811111 	.word	0x3f811111
 80104b4:	00000000 	.word	0x00000000

080104b8 <__ieee754_atan2>:
 80104b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104bc:	ec57 6b11 	vmov	r6, r7, d1
 80104c0:	4273      	negs	r3, r6
 80104c2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8010640 <__ieee754_atan2+0x188>
 80104c6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80104ca:	4333      	orrs	r3, r6
 80104cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80104d0:	4543      	cmp	r3, r8
 80104d2:	ec51 0b10 	vmov	r0, r1, d0
 80104d6:	4635      	mov	r5, r6
 80104d8:	d809      	bhi.n	80104ee <__ieee754_atan2+0x36>
 80104da:	4244      	negs	r4, r0
 80104dc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80104e0:	4304      	orrs	r4, r0
 80104e2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80104e6:	4544      	cmp	r4, r8
 80104e8:	468e      	mov	lr, r1
 80104ea:	4681      	mov	r9, r0
 80104ec:	d907      	bls.n	80104fe <__ieee754_atan2+0x46>
 80104ee:	4632      	mov	r2, r6
 80104f0:	463b      	mov	r3, r7
 80104f2:	f7ef fecb 	bl	800028c <__adddf3>
 80104f6:	ec41 0b10 	vmov	d0, r0, r1
 80104fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104fe:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8010502:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8010506:	4334      	orrs	r4, r6
 8010508:	d103      	bne.n	8010512 <__ieee754_atan2+0x5a>
 801050a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801050e:	f000 bbab 	b.w	8010c68 <atan>
 8010512:	17bc      	asrs	r4, r7, #30
 8010514:	f004 0402 	and.w	r4, r4, #2
 8010518:	ea53 0909 	orrs.w	r9, r3, r9
 801051c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010520:	d107      	bne.n	8010532 <__ieee754_atan2+0x7a>
 8010522:	2c02      	cmp	r4, #2
 8010524:	d05f      	beq.n	80105e6 <__ieee754_atan2+0x12e>
 8010526:	2c03      	cmp	r4, #3
 8010528:	d1e5      	bne.n	80104f6 <__ieee754_atan2+0x3e>
 801052a:	a141      	add	r1, pc, #260	@ (adr r1, 8010630 <__ieee754_atan2+0x178>)
 801052c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010530:	e7e1      	b.n	80104f6 <__ieee754_atan2+0x3e>
 8010532:	4315      	orrs	r5, r2
 8010534:	d106      	bne.n	8010544 <__ieee754_atan2+0x8c>
 8010536:	f1be 0f00 	cmp.w	lr, #0
 801053a:	da5f      	bge.n	80105fc <__ieee754_atan2+0x144>
 801053c:	a13e      	add	r1, pc, #248	@ (adr r1, 8010638 <__ieee754_atan2+0x180>)
 801053e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010542:	e7d8      	b.n	80104f6 <__ieee754_atan2+0x3e>
 8010544:	4542      	cmp	r2, r8
 8010546:	d10f      	bne.n	8010568 <__ieee754_atan2+0xb0>
 8010548:	4293      	cmp	r3, r2
 801054a:	f104 34ff 	add.w	r4, r4, #4294967295
 801054e:	d107      	bne.n	8010560 <__ieee754_atan2+0xa8>
 8010550:	2c02      	cmp	r4, #2
 8010552:	d84c      	bhi.n	80105ee <__ieee754_atan2+0x136>
 8010554:	4b34      	ldr	r3, [pc, #208]	@ (8010628 <__ieee754_atan2+0x170>)
 8010556:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801055a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801055e:	e7ca      	b.n	80104f6 <__ieee754_atan2+0x3e>
 8010560:	2c02      	cmp	r4, #2
 8010562:	d848      	bhi.n	80105f6 <__ieee754_atan2+0x13e>
 8010564:	4b31      	ldr	r3, [pc, #196]	@ (801062c <__ieee754_atan2+0x174>)
 8010566:	e7f6      	b.n	8010556 <__ieee754_atan2+0x9e>
 8010568:	4543      	cmp	r3, r8
 801056a:	d0e4      	beq.n	8010536 <__ieee754_atan2+0x7e>
 801056c:	1a9b      	subs	r3, r3, r2
 801056e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8010572:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010576:	da1e      	bge.n	80105b6 <__ieee754_atan2+0xfe>
 8010578:	2f00      	cmp	r7, #0
 801057a:	da01      	bge.n	8010580 <__ieee754_atan2+0xc8>
 801057c:	323c      	adds	r2, #60	@ 0x3c
 801057e:	db1e      	blt.n	80105be <__ieee754_atan2+0x106>
 8010580:	4632      	mov	r2, r6
 8010582:	463b      	mov	r3, r7
 8010584:	f7f0 f962 	bl	800084c <__aeabi_ddiv>
 8010588:	ec41 0b10 	vmov	d0, r0, r1
 801058c:	f000 fd04 	bl	8010f98 <fabs>
 8010590:	f000 fb6a 	bl	8010c68 <atan>
 8010594:	ec51 0b10 	vmov	r0, r1, d0
 8010598:	2c01      	cmp	r4, #1
 801059a:	d013      	beq.n	80105c4 <__ieee754_atan2+0x10c>
 801059c:	2c02      	cmp	r4, #2
 801059e:	d015      	beq.n	80105cc <__ieee754_atan2+0x114>
 80105a0:	2c00      	cmp	r4, #0
 80105a2:	d0a8      	beq.n	80104f6 <__ieee754_atan2+0x3e>
 80105a4:	a318      	add	r3, pc, #96	@ (adr r3, 8010608 <__ieee754_atan2+0x150>)
 80105a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105aa:	f7ef fe6d 	bl	8000288 <__aeabi_dsub>
 80105ae:	a318      	add	r3, pc, #96	@ (adr r3, 8010610 <__ieee754_atan2+0x158>)
 80105b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b4:	e014      	b.n	80105e0 <__ieee754_atan2+0x128>
 80105b6:	a118      	add	r1, pc, #96	@ (adr r1, 8010618 <__ieee754_atan2+0x160>)
 80105b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105bc:	e7ec      	b.n	8010598 <__ieee754_atan2+0xe0>
 80105be:	2000      	movs	r0, #0
 80105c0:	2100      	movs	r1, #0
 80105c2:	e7e9      	b.n	8010598 <__ieee754_atan2+0xe0>
 80105c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80105c8:	4619      	mov	r1, r3
 80105ca:	e794      	b.n	80104f6 <__ieee754_atan2+0x3e>
 80105cc:	a30e      	add	r3, pc, #56	@ (adr r3, 8010608 <__ieee754_atan2+0x150>)
 80105ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d2:	f7ef fe59 	bl	8000288 <__aeabi_dsub>
 80105d6:	4602      	mov	r2, r0
 80105d8:	460b      	mov	r3, r1
 80105da:	a10d      	add	r1, pc, #52	@ (adr r1, 8010610 <__ieee754_atan2+0x158>)
 80105dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105e0:	f7ef fe52 	bl	8000288 <__aeabi_dsub>
 80105e4:	e787      	b.n	80104f6 <__ieee754_atan2+0x3e>
 80105e6:	a10a      	add	r1, pc, #40	@ (adr r1, 8010610 <__ieee754_atan2+0x158>)
 80105e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105ec:	e783      	b.n	80104f6 <__ieee754_atan2+0x3e>
 80105ee:	a10c      	add	r1, pc, #48	@ (adr r1, 8010620 <__ieee754_atan2+0x168>)
 80105f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105f4:	e77f      	b.n	80104f6 <__ieee754_atan2+0x3e>
 80105f6:	2000      	movs	r0, #0
 80105f8:	2100      	movs	r1, #0
 80105fa:	e77c      	b.n	80104f6 <__ieee754_atan2+0x3e>
 80105fc:	a106      	add	r1, pc, #24	@ (adr r1, 8010618 <__ieee754_atan2+0x160>)
 80105fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010602:	e778      	b.n	80104f6 <__ieee754_atan2+0x3e>
 8010604:	f3af 8000 	nop.w
 8010608:	33145c07 	.word	0x33145c07
 801060c:	3ca1a626 	.word	0x3ca1a626
 8010610:	54442d18 	.word	0x54442d18
 8010614:	400921fb 	.word	0x400921fb
 8010618:	54442d18 	.word	0x54442d18
 801061c:	3ff921fb 	.word	0x3ff921fb
 8010620:	54442d18 	.word	0x54442d18
 8010624:	3fe921fb 	.word	0x3fe921fb
 8010628:	08011f00 	.word	0x08011f00
 801062c:	08011ee8 	.word	0x08011ee8
 8010630:	54442d18 	.word	0x54442d18
 8010634:	c00921fb 	.word	0xc00921fb
 8010638:	54442d18 	.word	0x54442d18
 801063c:	bff921fb 	.word	0xbff921fb
 8010640:	7ff00000 	.word	0x7ff00000

08010644 <__ieee754_hypot>:
 8010644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010648:	ec51 0b10 	vmov	r0, r1, d0
 801064c:	ec53 2b11 	vmov	r2, r3, d1
 8010650:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 8010654:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8010658:	42a5      	cmp	r5, r4
 801065a:	b087      	sub	sp, #28
 801065c:	da05      	bge.n	801066a <__ieee754_hypot+0x26>
 801065e:	462e      	mov	r6, r5
 8010660:	4625      	mov	r5, r4
 8010662:	4634      	mov	r4, r6
 8010664:	4606      	mov	r6, r0
 8010666:	4610      	mov	r0, r2
 8010668:	4632      	mov	r2, r6
 801066a:	1b2b      	subs	r3, r5, r4
 801066c:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8010670:	4629      	mov	r1, r5
 8010672:	4682      	mov	sl, r0
 8010674:	46ab      	mov	fp, r5
 8010676:	4616      	mov	r6, r2
 8010678:	4627      	mov	r7, r4
 801067a:	dd05      	ble.n	8010688 <__ieee754_hypot+0x44>
 801067c:	4623      	mov	r3, r4
 801067e:	f7ef fe05 	bl	800028c <__adddf3>
 8010682:	4682      	mov	sl, r0
 8010684:	468b      	mov	fp, r1
 8010686:	e016      	b.n	80106b6 <__ieee754_hypot+0x72>
 8010688:	4b75      	ldr	r3, [pc, #468]	@ (8010860 <__ieee754_hypot+0x21c>)
 801068a:	429d      	cmp	r5, r3
 801068c:	f340 8096 	ble.w	80107bc <__ieee754_hypot+0x178>
 8010690:	4b74      	ldr	r3, [pc, #464]	@ (8010864 <__ieee754_hypot+0x220>)
 8010692:	429d      	cmp	r5, r3
 8010694:	dd14      	ble.n	80106c0 <__ieee754_hypot+0x7c>
 8010696:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801069a:	4305      	orrs	r5, r0
 801069c:	d004      	beq.n	80106a8 <__ieee754_hypot+0x64>
 801069e:	4623      	mov	r3, r4
 80106a0:	f7ef fdf4 	bl	800028c <__adddf3>
 80106a4:	4682      	mov	sl, r0
 80106a6:	468b      	mov	fp, r1
 80106a8:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 80106ac:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 80106b0:	4334      	orrs	r4, r6
 80106b2:	f000 80d2 	beq.w	801085a <__ieee754_hypot+0x216>
 80106b6:	ec4b ab10 	vmov	d0, sl, fp
 80106ba:	b007      	add	sp, #28
 80106bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106c0:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 80106c4:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 80106c8:	46ab      	mov	fp, r5
 80106ca:	4627      	mov	r7, r4
 80106cc:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80106d0:	9301      	str	r3, [sp, #4]
 80106d2:	4b65      	ldr	r3, [pc, #404]	@ (8010868 <__ieee754_hypot+0x224>)
 80106d4:	429c      	cmp	r4, r3
 80106d6:	dc19      	bgt.n	801070c <__ieee754_hypot+0xc8>
 80106d8:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80106dc:	da70      	bge.n	80107c0 <__ieee754_hypot+0x17c>
 80106de:	4633      	mov	r3, r6
 80106e0:	4323      	orrs	r3, r4
 80106e2:	d0e8      	beq.n	80106b6 <__ieee754_hypot+0x72>
 80106e4:	4b61      	ldr	r3, [pc, #388]	@ (801086c <__ieee754_hypot+0x228>)
 80106e6:	2200      	movs	r2, #0
 80106e8:	4630      	mov	r0, r6
 80106ea:	4639      	mov	r1, r7
 80106ec:	f7ef ff84 	bl	80005f8 <__aeabi_dmul>
 80106f0:	4b5e      	ldr	r3, [pc, #376]	@ (801086c <__ieee754_hypot+0x228>)
 80106f2:	4606      	mov	r6, r0
 80106f4:	460f      	mov	r7, r1
 80106f6:	4650      	mov	r0, sl
 80106f8:	4659      	mov	r1, fp
 80106fa:	2200      	movs	r2, #0
 80106fc:	f7ef ff7c 	bl	80005f8 <__aeabi_dmul>
 8010700:	9b01      	ldr	r3, [sp, #4]
 8010702:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8010706:	4682      	mov	sl, r0
 8010708:	468b      	mov	fp, r1
 801070a:	9301      	str	r3, [sp, #4]
 801070c:	4632      	mov	r2, r6
 801070e:	463b      	mov	r3, r7
 8010710:	4650      	mov	r0, sl
 8010712:	4659      	mov	r1, fp
 8010714:	f7ef fdb8 	bl	8000288 <__aeabi_dsub>
 8010718:	4602      	mov	r2, r0
 801071a:	460b      	mov	r3, r1
 801071c:	4680      	mov	r8, r0
 801071e:	4689      	mov	r9, r1
 8010720:	4630      	mov	r0, r6
 8010722:	4639      	mov	r1, r7
 8010724:	f7f0 f9da 	bl	8000adc <__aeabi_dcmplt>
 8010728:	2200      	movs	r2, #0
 801072a:	2800      	cmp	r0, #0
 801072c:	d053      	beq.n	80107d6 <__ieee754_hypot+0x192>
 801072e:	462b      	mov	r3, r5
 8010730:	4610      	mov	r0, r2
 8010732:	4629      	mov	r1, r5
 8010734:	4614      	mov	r4, r2
 8010736:	f7ef ff5f 	bl	80005f8 <__aeabi_dmul>
 801073a:	4632      	mov	r2, r6
 801073c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010740:	463b      	mov	r3, r7
 8010742:	4630      	mov	r0, r6
 8010744:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8010748:	f7ef ff56 	bl	80005f8 <__aeabi_dmul>
 801074c:	4622      	mov	r2, r4
 801074e:	4606      	mov	r6, r0
 8010750:	460f      	mov	r7, r1
 8010752:	462b      	mov	r3, r5
 8010754:	4650      	mov	r0, sl
 8010756:	4659      	mov	r1, fp
 8010758:	f7ef fd98 	bl	800028c <__adddf3>
 801075c:	4622      	mov	r2, r4
 801075e:	4680      	mov	r8, r0
 8010760:	4689      	mov	r9, r1
 8010762:	462b      	mov	r3, r5
 8010764:	4650      	mov	r0, sl
 8010766:	4659      	mov	r1, fp
 8010768:	f7ef fd8e 	bl	8000288 <__aeabi_dsub>
 801076c:	4602      	mov	r2, r0
 801076e:	460b      	mov	r3, r1
 8010770:	4640      	mov	r0, r8
 8010772:	4649      	mov	r1, r9
 8010774:	f7ef ff40 	bl	80005f8 <__aeabi_dmul>
 8010778:	4602      	mov	r2, r0
 801077a:	460b      	mov	r3, r1
 801077c:	4630      	mov	r0, r6
 801077e:	4639      	mov	r1, r7
 8010780:	f7ef fd82 	bl	8000288 <__aeabi_dsub>
 8010784:	4602      	mov	r2, r0
 8010786:	460b      	mov	r3, r1
 8010788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801078c:	f7ef fd7c 	bl	8000288 <__aeabi_dsub>
 8010790:	ec41 0b10 	vmov	d0, r0, r1
 8010794:	f7ff fc32 	bl	800fffc <__ieee754_sqrt>
 8010798:	9b01      	ldr	r3, [sp, #4]
 801079a:	ec5b ab10 	vmov	sl, fp, d0
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d089      	beq.n	80106b6 <__ieee754_hypot+0x72>
 80107a2:	051b      	lsls	r3, r3, #20
 80107a4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80107a8:	2000      	movs	r0, #0
 80107aa:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80107ae:	4602      	mov	r2, r0
 80107b0:	460b      	mov	r3, r1
 80107b2:	4650      	mov	r0, sl
 80107b4:	4659      	mov	r1, fp
 80107b6:	f7ef ff1f 	bl	80005f8 <__aeabi_dmul>
 80107ba:	e762      	b.n	8010682 <__ieee754_hypot+0x3e>
 80107bc:	2300      	movs	r3, #0
 80107be:	e787      	b.n	80106d0 <__ieee754_hypot+0x8c>
 80107c0:	9b01      	ldr	r3, [sp, #4]
 80107c2:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 80107c6:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 80107ca:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80107ce:	9301      	str	r3, [sp, #4]
 80107d0:	46ab      	mov	fp, r5
 80107d2:	4627      	mov	r7, r4
 80107d4:	e79a      	b.n	801070c <__ieee754_hypot+0xc8>
 80107d6:	4623      	mov	r3, r4
 80107d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80107dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107e0:	2200      	movs	r2, #0
 80107e2:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 80107e6:	4614      	mov	r4, r2
 80107e8:	461d      	mov	r5, r3
 80107ea:	f7ef ff05 	bl	80005f8 <__aeabi_dmul>
 80107ee:	4642      	mov	r2, r8
 80107f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80107f4:	464b      	mov	r3, r9
 80107f6:	4640      	mov	r0, r8
 80107f8:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 80107fc:	f7ef fefc 	bl	80005f8 <__aeabi_dmul>
 8010800:	4652      	mov	r2, sl
 8010802:	465b      	mov	r3, fp
 8010804:	4680      	mov	r8, r0
 8010806:	4689      	mov	r9, r1
 8010808:	4650      	mov	r0, sl
 801080a:	4659      	mov	r1, fp
 801080c:	f7ef fd3e 	bl	800028c <__adddf3>
 8010810:	4622      	mov	r2, r4
 8010812:	462b      	mov	r3, r5
 8010814:	f7ef fd38 	bl	8000288 <__aeabi_dsub>
 8010818:	4632      	mov	r2, r6
 801081a:	463b      	mov	r3, r7
 801081c:	f7ef feec 	bl	80005f8 <__aeabi_dmul>
 8010820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010824:	4682      	mov	sl, r0
 8010826:	468b      	mov	fp, r1
 8010828:	4630      	mov	r0, r6
 801082a:	4639      	mov	r1, r7
 801082c:	f7ef fd2c 	bl	8000288 <__aeabi_dsub>
 8010830:	4622      	mov	r2, r4
 8010832:	462b      	mov	r3, r5
 8010834:	f7ef fee0 	bl	80005f8 <__aeabi_dmul>
 8010838:	4602      	mov	r2, r0
 801083a:	460b      	mov	r3, r1
 801083c:	4650      	mov	r0, sl
 801083e:	4659      	mov	r1, fp
 8010840:	f7ef fd24 	bl	800028c <__adddf3>
 8010844:	4602      	mov	r2, r0
 8010846:	460b      	mov	r3, r1
 8010848:	4640      	mov	r0, r8
 801084a:	4649      	mov	r1, r9
 801084c:	f7ef fd1c 	bl	8000288 <__aeabi_dsub>
 8010850:	4602      	mov	r2, r0
 8010852:	460b      	mov	r3, r1
 8010854:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010858:	e798      	b.n	801078c <__ieee754_hypot+0x148>
 801085a:	46b2      	mov	sl, r6
 801085c:	46bb      	mov	fp, r7
 801085e:	e72a      	b.n	80106b6 <__ieee754_hypot+0x72>
 8010860:	5f300000 	.word	0x5f300000
 8010864:	7fefffff 	.word	0x7fefffff
 8010868:	20afffff 	.word	0x20afffff
 801086c:	7fd00000 	.word	0x7fd00000

08010870 <__ieee754_rem_pio2>:
 8010870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010874:	ec57 6b10 	vmov	r6, r7, d0
 8010878:	4bc5      	ldr	r3, [pc, #788]	@ (8010b90 <__ieee754_rem_pio2+0x320>)
 801087a:	b08d      	sub	sp, #52	@ 0x34
 801087c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010880:	4598      	cmp	r8, r3
 8010882:	4604      	mov	r4, r0
 8010884:	9704      	str	r7, [sp, #16]
 8010886:	d807      	bhi.n	8010898 <__ieee754_rem_pio2+0x28>
 8010888:	2200      	movs	r2, #0
 801088a:	2300      	movs	r3, #0
 801088c:	ed80 0b00 	vstr	d0, [r0]
 8010890:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010894:	2500      	movs	r5, #0
 8010896:	e028      	b.n	80108ea <__ieee754_rem_pio2+0x7a>
 8010898:	4bbe      	ldr	r3, [pc, #760]	@ (8010b94 <__ieee754_rem_pio2+0x324>)
 801089a:	4598      	cmp	r8, r3
 801089c:	d878      	bhi.n	8010990 <__ieee754_rem_pio2+0x120>
 801089e:	9b04      	ldr	r3, [sp, #16]
 80108a0:	4dbd      	ldr	r5, [pc, #756]	@ (8010b98 <__ieee754_rem_pio2+0x328>)
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	4630      	mov	r0, r6
 80108a6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8010b58 <__ieee754_rem_pio2+0x2e8>)
 80108a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ac:	4639      	mov	r1, r7
 80108ae:	dd38      	ble.n	8010922 <__ieee754_rem_pio2+0xb2>
 80108b0:	f7ef fcea 	bl	8000288 <__aeabi_dsub>
 80108b4:	45a8      	cmp	r8, r5
 80108b6:	4606      	mov	r6, r0
 80108b8:	460f      	mov	r7, r1
 80108ba:	d01a      	beq.n	80108f2 <__ieee754_rem_pio2+0x82>
 80108bc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8010b60 <__ieee754_rem_pio2+0x2f0>)
 80108be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c2:	f7ef fce1 	bl	8000288 <__aeabi_dsub>
 80108c6:	4602      	mov	r2, r0
 80108c8:	460b      	mov	r3, r1
 80108ca:	4680      	mov	r8, r0
 80108cc:	4689      	mov	r9, r1
 80108ce:	4630      	mov	r0, r6
 80108d0:	4639      	mov	r1, r7
 80108d2:	f7ef fcd9 	bl	8000288 <__aeabi_dsub>
 80108d6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8010b60 <__ieee754_rem_pio2+0x2f0>)
 80108d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108dc:	f7ef fcd4 	bl	8000288 <__aeabi_dsub>
 80108e0:	e9c4 8900 	strd	r8, r9, [r4]
 80108e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80108e8:	2501      	movs	r5, #1
 80108ea:	4628      	mov	r0, r5
 80108ec:	b00d      	add	sp, #52	@ 0x34
 80108ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108f2:	a39d      	add	r3, pc, #628	@ (adr r3, 8010b68 <__ieee754_rem_pio2+0x2f8>)
 80108f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f8:	f7ef fcc6 	bl	8000288 <__aeabi_dsub>
 80108fc:	a39c      	add	r3, pc, #624	@ (adr r3, 8010b70 <__ieee754_rem_pio2+0x300>)
 80108fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010902:	4606      	mov	r6, r0
 8010904:	460f      	mov	r7, r1
 8010906:	f7ef fcbf 	bl	8000288 <__aeabi_dsub>
 801090a:	4602      	mov	r2, r0
 801090c:	460b      	mov	r3, r1
 801090e:	4680      	mov	r8, r0
 8010910:	4689      	mov	r9, r1
 8010912:	4630      	mov	r0, r6
 8010914:	4639      	mov	r1, r7
 8010916:	f7ef fcb7 	bl	8000288 <__aeabi_dsub>
 801091a:	a395      	add	r3, pc, #596	@ (adr r3, 8010b70 <__ieee754_rem_pio2+0x300>)
 801091c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010920:	e7dc      	b.n	80108dc <__ieee754_rem_pio2+0x6c>
 8010922:	f7ef fcb3 	bl	800028c <__adddf3>
 8010926:	45a8      	cmp	r8, r5
 8010928:	4606      	mov	r6, r0
 801092a:	460f      	mov	r7, r1
 801092c:	d018      	beq.n	8010960 <__ieee754_rem_pio2+0xf0>
 801092e:	a38c      	add	r3, pc, #560	@ (adr r3, 8010b60 <__ieee754_rem_pio2+0x2f0>)
 8010930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010934:	f7ef fcaa 	bl	800028c <__adddf3>
 8010938:	4602      	mov	r2, r0
 801093a:	460b      	mov	r3, r1
 801093c:	4680      	mov	r8, r0
 801093e:	4689      	mov	r9, r1
 8010940:	4630      	mov	r0, r6
 8010942:	4639      	mov	r1, r7
 8010944:	f7ef fca0 	bl	8000288 <__aeabi_dsub>
 8010948:	a385      	add	r3, pc, #532	@ (adr r3, 8010b60 <__ieee754_rem_pio2+0x2f0>)
 801094a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094e:	f7ef fc9d 	bl	800028c <__adddf3>
 8010952:	f04f 35ff 	mov.w	r5, #4294967295
 8010956:	e9c4 8900 	strd	r8, r9, [r4]
 801095a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801095e:	e7c4      	b.n	80108ea <__ieee754_rem_pio2+0x7a>
 8010960:	a381      	add	r3, pc, #516	@ (adr r3, 8010b68 <__ieee754_rem_pio2+0x2f8>)
 8010962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010966:	f7ef fc91 	bl	800028c <__adddf3>
 801096a:	a381      	add	r3, pc, #516	@ (adr r3, 8010b70 <__ieee754_rem_pio2+0x300>)
 801096c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010970:	4606      	mov	r6, r0
 8010972:	460f      	mov	r7, r1
 8010974:	f7ef fc8a 	bl	800028c <__adddf3>
 8010978:	4602      	mov	r2, r0
 801097a:	460b      	mov	r3, r1
 801097c:	4680      	mov	r8, r0
 801097e:	4689      	mov	r9, r1
 8010980:	4630      	mov	r0, r6
 8010982:	4639      	mov	r1, r7
 8010984:	f7ef fc80 	bl	8000288 <__aeabi_dsub>
 8010988:	a379      	add	r3, pc, #484	@ (adr r3, 8010b70 <__ieee754_rem_pio2+0x300>)
 801098a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098e:	e7de      	b.n	801094e <__ieee754_rem_pio2+0xde>
 8010990:	4b82      	ldr	r3, [pc, #520]	@ (8010b9c <__ieee754_rem_pio2+0x32c>)
 8010992:	4598      	cmp	r8, r3
 8010994:	f200 80d1 	bhi.w	8010b3a <__ieee754_rem_pio2+0x2ca>
 8010998:	f000 fafe 	bl	8010f98 <fabs>
 801099c:	ec57 6b10 	vmov	r6, r7, d0
 80109a0:	a375      	add	r3, pc, #468	@ (adr r3, 8010b78 <__ieee754_rem_pio2+0x308>)
 80109a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a6:	4630      	mov	r0, r6
 80109a8:	4639      	mov	r1, r7
 80109aa:	f7ef fe25 	bl	80005f8 <__aeabi_dmul>
 80109ae:	4b7c      	ldr	r3, [pc, #496]	@ (8010ba0 <__ieee754_rem_pio2+0x330>)
 80109b0:	2200      	movs	r2, #0
 80109b2:	f7ef fc6b 	bl	800028c <__adddf3>
 80109b6:	f7f0 f8cf 	bl	8000b58 <__aeabi_d2iz>
 80109ba:	4605      	mov	r5, r0
 80109bc:	f7ef fdb2 	bl	8000524 <__aeabi_i2d>
 80109c0:	4602      	mov	r2, r0
 80109c2:	460b      	mov	r3, r1
 80109c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80109c8:	a363      	add	r3, pc, #396	@ (adr r3, 8010b58 <__ieee754_rem_pio2+0x2e8>)
 80109ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ce:	f7ef fe13 	bl	80005f8 <__aeabi_dmul>
 80109d2:	4602      	mov	r2, r0
 80109d4:	460b      	mov	r3, r1
 80109d6:	4630      	mov	r0, r6
 80109d8:	4639      	mov	r1, r7
 80109da:	f7ef fc55 	bl	8000288 <__aeabi_dsub>
 80109de:	a360      	add	r3, pc, #384	@ (adr r3, 8010b60 <__ieee754_rem_pio2+0x2f0>)
 80109e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e4:	4682      	mov	sl, r0
 80109e6:	468b      	mov	fp, r1
 80109e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109ec:	f7ef fe04 	bl	80005f8 <__aeabi_dmul>
 80109f0:	2d1f      	cmp	r5, #31
 80109f2:	4606      	mov	r6, r0
 80109f4:	460f      	mov	r7, r1
 80109f6:	dc0c      	bgt.n	8010a12 <__ieee754_rem_pio2+0x1a2>
 80109f8:	4b6a      	ldr	r3, [pc, #424]	@ (8010ba4 <__ieee754_rem_pio2+0x334>)
 80109fa:	1e6a      	subs	r2, r5, #1
 80109fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a00:	4543      	cmp	r3, r8
 8010a02:	d006      	beq.n	8010a12 <__ieee754_rem_pio2+0x1a2>
 8010a04:	4632      	mov	r2, r6
 8010a06:	463b      	mov	r3, r7
 8010a08:	4650      	mov	r0, sl
 8010a0a:	4659      	mov	r1, fp
 8010a0c:	f7ef fc3c 	bl	8000288 <__aeabi_dsub>
 8010a10:	e00e      	b.n	8010a30 <__ieee754_rem_pio2+0x1c0>
 8010a12:	463b      	mov	r3, r7
 8010a14:	4632      	mov	r2, r6
 8010a16:	4650      	mov	r0, sl
 8010a18:	4659      	mov	r1, fp
 8010a1a:	f7ef fc35 	bl	8000288 <__aeabi_dsub>
 8010a1e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010a22:	9305      	str	r3, [sp, #20]
 8010a24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010a28:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010a2c:	2b10      	cmp	r3, #16
 8010a2e:	dc02      	bgt.n	8010a36 <__ieee754_rem_pio2+0x1c6>
 8010a30:	e9c4 0100 	strd	r0, r1, [r4]
 8010a34:	e039      	b.n	8010aaa <__ieee754_rem_pio2+0x23a>
 8010a36:	a34c      	add	r3, pc, #304	@ (adr r3, 8010b68 <__ieee754_rem_pio2+0x2f8>)
 8010a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a40:	f7ef fdda 	bl	80005f8 <__aeabi_dmul>
 8010a44:	4606      	mov	r6, r0
 8010a46:	460f      	mov	r7, r1
 8010a48:	4602      	mov	r2, r0
 8010a4a:	460b      	mov	r3, r1
 8010a4c:	4650      	mov	r0, sl
 8010a4e:	4659      	mov	r1, fp
 8010a50:	f7ef fc1a 	bl	8000288 <__aeabi_dsub>
 8010a54:	4602      	mov	r2, r0
 8010a56:	460b      	mov	r3, r1
 8010a58:	4680      	mov	r8, r0
 8010a5a:	4689      	mov	r9, r1
 8010a5c:	4650      	mov	r0, sl
 8010a5e:	4659      	mov	r1, fp
 8010a60:	f7ef fc12 	bl	8000288 <__aeabi_dsub>
 8010a64:	4632      	mov	r2, r6
 8010a66:	463b      	mov	r3, r7
 8010a68:	f7ef fc0e 	bl	8000288 <__aeabi_dsub>
 8010a6c:	a340      	add	r3, pc, #256	@ (adr r3, 8010b70 <__ieee754_rem_pio2+0x300>)
 8010a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a72:	4606      	mov	r6, r0
 8010a74:	460f      	mov	r7, r1
 8010a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a7a:	f7ef fdbd 	bl	80005f8 <__aeabi_dmul>
 8010a7e:	4632      	mov	r2, r6
 8010a80:	463b      	mov	r3, r7
 8010a82:	f7ef fc01 	bl	8000288 <__aeabi_dsub>
 8010a86:	4602      	mov	r2, r0
 8010a88:	460b      	mov	r3, r1
 8010a8a:	4606      	mov	r6, r0
 8010a8c:	460f      	mov	r7, r1
 8010a8e:	4640      	mov	r0, r8
 8010a90:	4649      	mov	r1, r9
 8010a92:	f7ef fbf9 	bl	8000288 <__aeabi_dsub>
 8010a96:	9a05      	ldr	r2, [sp, #20]
 8010a98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010a9c:	1ad3      	subs	r3, r2, r3
 8010a9e:	2b31      	cmp	r3, #49	@ 0x31
 8010aa0:	dc20      	bgt.n	8010ae4 <__ieee754_rem_pio2+0x274>
 8010aa2:	e9c4 0100 	strd	r0, r1, [r4]
 8010aa6:	46c2      	mov	sl, r8
 8010aa8:	46cb      	mov	fp, r9
 8010aaa:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010aae:	4650      	mov	r0, sl
 8010ab0:	4642      	mov	r2, r8
 8010ab2:	464b      	mov	r3, r9
 8010ab4:	4659      	mov	r1, fp
 8010ab6:	f7ef fbe7 	bl	8000288 <__aeabi_dsub>
 8010aba:	463b      	mov	r3, r7
 8010abc:	4632      	mov	r2, r6
 8010abe:	f7ef fbe3 	bl	8000288 <__aeabi_dsub>
 8010ac2:	9b04      	ldr	r3, [sp, #16]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010aca:	f6bf af0e 	bge.w	80108ea <__ieee754_rem_pio2+0x7a>
 8010ace:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8010ad2:	6063      	str	r3, [r4, #4]
 8010ad4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010ad8:	f8c4 8000 	str.w	r8, [r4]
 8010adc:	60a0      	str	r0, [r4, #8]
 8010ade:	60e3      	str	r3, [r4, #12]
 8010ae0:	426d      	negs	r5, r5
 8010ae2:	e702      	b.n	80108ea <__ieee754_rem_pio2+0x7a>
 8010ae4:	a326      	add	r3, pc, #152	@ (adr r3, 8010b80 <__ieee754_rem_pio2+0x310>)
 8010ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010aee:	f7ef fd83 	bl	80005f8 <__aeabi_dmul>
 8010af2:	4606      	mov	r6, r0
 8010af4:	460f      	mov	r7, r1
 8010af6:	4602      	mov	r2, r0
 8010af8:	460b      	mov	r3, r1
 8010afa:	4640      	mov	r0, r8
 8010afc:	4649      	mov	r1, r9
 8010afe:	f7ef fbc3 	bl	8000288 <__aeabi_dsub>
 8010b02:	4602      	mov	r2, r0
 8010b04:	460b      	mov	r3, r1
 8010b06:	4682      	mov	sl, r0
 8010b08:	468b      	mov	fp, r1
 8010b0a:	4640      	mov	r0, r8
 8010b0c:	4649      	mov	r1, r9
 8010b0e:	f7ef fbbb 	bl	8000288 <__aeabi_dsub>
 8010b12:	4632      	mov	r2, r6
 8010b14:	463b      	mov	r3, r7
 8010b16:	f7ef fbb7 	bl	8000288 <__aeabi_dsub>
 8010b1a:	a31b      	add	r3, pc, #108	@ (adr r3, 8010b88 <__ieee754_rem_pio2+0x318>)
 8010b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b20:	4606      	mov	r6, r0
 8010b22:	460f      	mov	r7, r1
 8010b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b28:	f7ef fd66 	bl	80005f8 <__aeabi_dmul>
 8010b2c:	4632      	mov	r2, r6
 8010b2e:	463b      	mov	r3, r7
 8010b30:	f7ef fbaa 	bl	8000288 <__aeabi_dsub>
 8010b34:	4606      	mov	r6, r0
 8010b36:	460f      	mov	r7, r1
 8010b38:	e764      	b.n	8010a04 <__ieee754_rem_pio2+0x194>
 8010b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8010ba8 <__ieee754_rem_pio2+0x338>)
 8010b3c:	4598      	cmp	r8, r3
 8010b3e:	d935      	bls.n	8010bac <__ieee754_rem_pio2+0x33c>
 8010b40:	4632      	mov	r2, r6
 8010b42:	463b      	mov	r3, r7
 8010b44:	4630      	mov	r0, r6
 8010b46:	4639      	mov	r1, r7
 8010b48:	f7ef fb9e 	bl	8000288 <__aeabi_dsub>
 8010b4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010b50:	e9c4 0100 	strd	r0, r1, [r4]
 8010b54:	e69e      	b.n	8010894 <__ieee754_rem_pio2+0x24>
 8010b56:	bf00      	nop
 8010b58:	54400000 	.word	0x54400000
 8010b5c:	3ff921fb 	.word	0x3ff921fb
 8010b60:	1a626331 	.word	0x1a626331
 8010b64:	3dd0b461 	.word	0x3dd0b461
 8010b68:	1a600000 	.word	0x1a600000
 8010b6c:	3dd0b461 	.word	0x3dd0b461
 8010b70:	2e037073 	.word	0x2e037073
 8010b74:	3ba3198a 	.word	0x3ba3198a
 8010b78:	6dc9c883 	.word	0x6dc9c883
 8010b7c:	3fe45f30 	.word	0x3fe45f30
 8010b80:	2e000000 	.word	0x2e000000
 8010b84:	3ba3198a 	.word	0x3ba3198a
 8010b88:	252049c1 	.word	0x252049c1
 8010b8c:	397b839a 	.word	0x397b839a
 8010b90:	3fe921fb 	.word	0x3fe921fb
 8010b94:	4002d97b 	.word	0x4002d97b
 8010b98:	3ff921fb 	.word	0x3ff921fb
 8010b9c:	413921fb 	.word	0x413921fb
 8010ba0:	3fe00000 	.word	0x3fe00000
 8010ba4:	08011f18 	.word	0x08011f18
 8010ba8:	7fefffff 	.word	0x7fefffff
 8010bac:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010bb0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8010bb4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010bb8:	4630      	mov	r0, r6
 8010bba:	460f      	mov	r7, r1
 8010bbc:	f7ef ffcc 	bl	8000b58 <__aeabi_d2iz>
 8010bc0:	f7ef fcb0 	bl	8000524 <__aeabi_i2d>
 8010bc4:	4602      	mov	r2, r0
 8010bc6:	460b      	mov	r3, r1
 8010bc8:	4630      	mov	r0, r6
 8010bca:	4639      	mov	r1, r7
 8010bcc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010bd0:	f7ef fb5a 	bl	8000288 <__aeabi_dsub>
 8010bd4:	4b22      	ldr	r3, [pc, #136]	@ (8010c60 <__ieee754_rem_pio2+0x3f0>)
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	f7ef fd0e 	bl	80005f8 <__aeabi_dmul>
 8010bdc:	460f      	mov	r7, r1
 8010bde:	4606      	mov	r6, r0
 8010be0:	f7ef ffba 	bl	8000b58 <__aeabi_d2iz>
 8010be4:	f7ef fc9e 	bl	8000524 <__aeabi_i2d>
 8010be8:	4602      	mov	r2, r0
 8010bea:	460b      	mov	r3, r1
 8010bec:	4630      	mov	r0, r6
 8010bee:	4639      	mov	r1, r7
 8010bf0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010bf4:	f7ef fb48 	bl	8000288 <__aeabi_dsub>
 8010bf8:	4b19      	ldr	r3, [pc, #100]	@ (8010c60 <__ieee754_rem_pio2+0x3f0>)
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	f7ef fcfc 	bl	80005f8 <__aeabi_dmul>
 8010c00:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8010c04:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010c08:	f04f 0803 	mov.w	r8, #3
 8010c0c:	2600      	movs	r6, #0
 8010c0e:	2700      	movs	r7, #0
 8010c10:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010c14:	4632      	mov	r2, r6
 8010c16:	463b      	mov	r3, r7
 8010c18:	46c2      	mov	sl, r8
 8010c1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8010c1e:	f7ef ff53 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c22:	2800      	cmp	r0, #0
 8010c24:	d1f4      	bne.n	8010c10 <__ieee754_rem_pio2+0x3a0>
 8010c26:	4b0f      	ldr	r3, [pc, #60]	@ (8010c64 <__ieee754_rem_pio2+0x3f4>)
 8010c28:	9301      	str	r3, [sp, #4]
 8010c2a:	2302      	movs	r3, #2
 8010c2c:	9300      	str	r3, [sp, #0]
 8010c2e:	462a      	mov	r2, r5
 8010c30:	4653      	mov	r3, sl
 8010c32:	4621      	mov	r1, r4
 8010c34:	a806      	add	r0, sp, #24
 8010c36:	f000 f9b7 	bl	8010fa8 <__kernel_rem_pio2>
 8010c3a:	9b04      	ldr	r3, [sp, #16]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	4605      	mov	r5, r0
 8010c40:	f6bf ae53 	bge.w	80108ea <__ieee754_rem_pio2+0x7a>
 8010c44:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010c48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010c4c:	e9c4 2300 	strd	r2, r3, [r4]
 8010c50:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010c54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010c58:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010c5c:	e740      	b.n	8010ae0 <__ieee754_rem_pio2+0x270>
 8010c5e:	bf00      	nop
 8010c60:	41700000 	.word	0x41700000
 8010c64:	08011f98 	.word	0x08011f98

08010c68 <atan>:
 8010c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c6c:	ec55 4b10 	vmov	r4, r5, d0
 8010c70:	4bbf      	ldr	r3, [pc, #764]	@ (8010f70 <atan+0x308>)
 8010c72:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8010c76:	429e      	cmp	r6, r3
 8010c78:	46ab      	mov	fp, r5
 8010c7a:	d918      	bls.n	8010cae <atan+0x46>
 8010c7c:	4bbd      	ldr	r3, [pc, #756]	@ (8010f74 <atan+0x30c>)
 8010c7e:	429e      	cmp	r6, r3
 8010c80:	d801      	bhi.n	8010c86 <atan+0x1e>
 8010c82:	d109      	bne.n	8010c98 <atan+0x30>
 8010c84:	b144      	cbz	r4, 8010c98 <atan+0x30>
 8010c86:	4622      	mov	r2, r4
 8010c88:	462b      	mov	r3, r5
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	4629      	mov	r1, r5
 8010c8e:	f7ef fafd 	bl	800028c <__adddf3>
 8010c92:	4604      	mov	r4, r0
 8010c94:	460d      	mov	r5, r1
 8010c96:	e006      	b.n	8010ca6 <atan+0x3e>
 8010c98:	f1bb 0f00 	cmp.w	fp, #0
 8010c9c:	f340 812b 	ble.w	8010ef6 <atan+0x28e>
 8010ca0:	a597      	add	r5, pc, #604	@ (adr r5, 8010f00 <atan+0x298>)
 8010ca2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010ca6:	ec45 4b10 	vmov	d0, r4, r5
 8010caa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cae:	4bb2      	ldr	r3, [pc, #712]	@ (8010f78 <atan+0x310>)
 8010cb0:	429e      	cmp	r6, r3
 8010cb2:	d813      	bhi.n	8010cdc <atan+0x74>
 8010cb4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010cb8:	429e      	cmp	r6, r3
 8010cba:	d80c      	bhi.n	8010cd6 <atan+0x6e>
 8010cbc:	a392      	add	r3, pc, #584	@ (adr r3, 8010f08 <atan+0x2a0>)
 8010cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	4629      	mov	r1, r5
 8010cc6:	f7ef fae1 	bl	800028c <__adddf3>
 8010cca:	4bac      	ldr	r3, [pc, #688]	@ (8010f7c <atan+0x314>)
 8010ccc:	2200      	movs	r2, #0
 8010cce:	f7ef ff23 	bl	8000b18 <__aeabi_dcmpgt>
 8010cd2:	2800      	cmp	r0, #0
 8010cd4:	d1e7      	bne.n	8010ca6 <atan+0x3e>
 8010cd6:	f04f 3aff 	mov.w	sl, #4294967295
 8010cda:	e029      	b.n	8010d30 <atan+0xc8>
 8010cdc:	f000 f95c 	bl	8010f98 <fabs>
 8010ce0:	4ba7      	ldr	r3, [pc, #668]	@ (8010f80 <atan+0x318>)
 8010ce2:	429e      	cmp	r6, r3
 8010ce4:	ec55 4b10 	vmov	r4, r5, d0
 8010ce8:	f200 80bc 	bhi.w	8010e64 <atan+0x1fc>
 8010cec:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010cf0:	429e      	cmp	r6, r3
 8010cf2:	f200 809e 	bhi.w	8010e32 <atan+0x1ca>
 8010cf6:	4622      	mov	r2, r4
 8010cf8:	462b      	mov	r3, r5
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	4629      	mov	r1, r5
 8010cfe:	f7ef fac5 	bl	800028c <__adddf3>
 8010d02:	4b9e      	ldr	r3, [pc, #632]	@ (8010f7c <atan+0x314>)
 8010d04:	2200      	movs	r2, #0
 8010d06:	f7ef fabf 	bl	8000288 <__aeabi_dsub>
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	4606      	mov	r6, r0
 8010d0e:	460f      	mov	r7, r1
 8010d10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010d14:	4620      	mov	r0, r4
 8010d16:	4629      	mov	r1, r5
 8010d18:	f7ef fab8 	bl	800028c <__adddf3>
 8010d1c:	4602      	mov	r2, r0
 8010d1e:	460b      	mov	r3, r1
 8010d20:	4630      	mov	r0, r6
 8010d22:	4639      	mov	r1, r7
 8010d24:	f7ef fd92 	bl	800084c <__aeabi_ddiv>
 8010d28:	f04f 0a00 	mov.w	sl, #0
 8010d2c:	4604      	mov	r4, r0
 8010d2e:	460d      	mov	r5, r1
 8010d30:	4622      	mov	r2, r4
 8010d32:	462b      	mov	r3, r5
 8010d34:	4620      	mov	r0, r4
 8010d36:	4629      	mov	r1, r5
 8010d38:	f7ef fc5e 	bl	80005f8 <__aeabi_dmul>
 8010d3c:	4602      	mov	r2, r0
 8010d3e:	460b      	mov	r3, r1
 8010d40:	4680      	mov	r8, r0
 8010d42:	4689      	mov	r9, r1
 8010d44:	f7ef fc58 	bl	80005f8 <__aeabi_dmul>
 8010d48:	a371      	add	r3, pc, #452	@ (adr r3, 8010f10 <atan+0x2a8>)
 8010d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d4e:	4606      	mov	r6, r0
 8010d50:	460f      	mov	r7, r1
 8010d52:	f7ef fc51 	bl	80005f8 <__aeabi_dmul>
 8010d56:	a370      	add	r3, pc, #448	@ (adr r3, 8010f18 <atan+0x2b0>)
 8010d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d5c:	f7ef fa96 	bl	800028c <__adddf3>
 8010d60:	4632      	mov	r2, r6
 8010d62:	463b      	mov	r3, r7
 8010d64:	f7ef fc48 	bl	80005f8 <__aeabi_dmul>
 8010d68:	a36d      	add	r3, pc, #436	@ (adr r3, 8010f20 <atan+0x2b8>)
 8010d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6e:	f7ef fa8d 	bl	800028c <__adddf3>
 8010d72:	4632      	mov	r2, r6
 8010d74:	463b      	mov	r3, r7
 8010d76:	f7ef fc3f 	bl	80005f8 <__aeabi_dmul>
 8010d7a:	a36b      	add	r3, pc, #428	@ (adr r3, 8010f28 <atan+0x2c0>)
 8010d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d80:	f7ef fa84 	bl	800028c <__adddf3>
 8010d84:	4632      	mov	r2, r6
 8010d86:	463b      	mov	r3, r7
 8010d88:	f7ef fc36 	bl	80005f8 <__aeabi_dmul>
 8010d8c:	a368      	add	r3, pc, #416	@ (adr r3, 8010f30 <atan+0x2c8>)
 8010d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d92:	f7ef fa7b 	bl	800028c <__adddf3>
 8010d96:	4632      	mov	r2, r6
 8010d98:	463b      	mov	r3, r7
 8010d9a:	f7ef fc2d 	bl	80005f8 <__aeabi_dmul>
 8010d9e:	a366      	add	r3, pc, #408	@ (adr r3, 8010f38 <atan+0x2d0>)
 8010da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da4:	f7ef fa72 	bl	800028c <__adddf3>
 8010da8:	4642      	mov	r2, r8
 8010daa:	464b      	mov	r3, r9
 8010dac:	f7ef fc24 	bl	80005f8 <__aeabi_dmul>
 8010db0:	a363      	add	r3, pc, #396	@ (adr r3, 8010f40 <atan+0x2d8>)
 8010db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db6:	4680      	mov	r8, r0
 8010db8:	4689      	mov	r9, r1
 8010dba:	4630      	mov	r0, r6
 8010dbc:	4639      	mov	r1, r7
 8010dbe:	f7ef fc1b 	bl	80005f8 <__aeabi_dmul>
 8010dc2:	a361      	add	r3, pc, #388	@ (adr r3, 8010f48 <atan+0x2e0>)
 8010dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc8:	f7ef fa5e 	bl	8000288 <__aeabi_dsub>
 8010dcc:	4632      	mov	r2, r6
 8010dce:	463b      	mov	r3, r7
 8010dd0:	f7ef fc12 	bl	80005f8 <__aeabi_dmul>
 8010dd4:	a35e      	add	r3, pc, #376	@ (adr r3, 8010f50 <atan+0x2e8>)
 8010dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dda:	f7ef fa55 	bl	8000288 <__aeabi_dsub>
 8010dde:	4632      	mov	r2, r6
 8010de0:	463b      	mov	r3, r7
 8010de2:	f7ef fc09 	bl	80005f8 <__aeabi_dmul>
 8010de6:	a35c      	add	r3, pc, #368	@ (adr r3, 8010f58 <atan+0x2f0>)
 8010de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dec:	f7ef fa4c 	bl	8000288 <__aeabi_dsub>
 8010df0:	4632      	mov	r2, r6
 8010df2:	463b      	mov	r3, r7
 8010df4:	f7ef fc00 	bl	80005f8 <__aeabi_dmul>
 8010df8:	a359      	add	r3, pc, #356	@ (adr r3, 8010f60 <atan+0x2f8>)
 8010dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dfe:	f7ef fa43 	bl	8000288 <__aeabi_dsub>
 8010e02:	4632      	mov	r2, r6
 8010e04:	463b      	mov	r3, r7
 8010e06:	f7ef fbf7 	bl	80005f8 <__aeabi_dmul>
 8010e0a:	4602      	mov	r2, r0
 8010e0c:	460b      	mov	r3, r1
 8010e0e:	4640      	mov	r0, r8
 8010e10:	4649      	mov	r1, r9
 8010e12:	f7ef fa3b 	bl	800028c <__adddf3>
 8010e16:	4622      	mov	r2, r4
 8010e18:	462b      	mov	r3, r5
 8010e1a:	f7ef fbed 	bl	80005f8 <__aeabi_dmul>
 8010e1e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010e22:	4602      	mov	r2, r0
 8010e24:	460b      	mov	r3, r1
 8010e26:	d148      	bne.n	8010eba <atan+0x252>
 8010e28:	4620      	mov	r0, r4
 8010e2a:	4629      	mov	r1, r5
 8010e2c:	f7ef fa2c 	bl	8000288 <__aeabi_dsub>
 8010e30:	e72f      	b.n	8010c92 <atan+0x2a>
 8010e32:	4b52      	ldr	r3, [pc, #328]	@ (8010f7c <atan+0x314>)
 8010e34:	2200      	movs	r2, #0
 8010e36:	4620      	mov	r0, r4
 8010e38:	4629      	mov	r1, r5
 8010e3a:	f7ef fa25 	bl	8000288 <__aeabi_dsub>
 8010e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8010f7c <atan+0x314>)
 8010e40:	4606      	mov	r6, r0
 8010e42:	460f      	mov	r7, r1
 8010e44:	2200      	movs	r2, #0
 8010e46:	4620      	mov	r0, r4
 8010e48:	4629      	mov	r1, r5
 8010e4a:	f7ef fa1f 	bl	800028c <__adddf3>
 8010e4e:	4602      	mov	r2, r0
 8010e50:	460b      	mov	r3, r1
 8010e52:	4630      	mov	r0, r6
 8010e54:	4639      	mov	r1, r7
 8010e56:	f7ef fcf9 	bl	800084c <__aeabi_ddiv>
 8010e5a:	f04f 0a01 	mov.w	sl, #1
 8010e5e:	4604      	mov	r4, r0
 8010e60:	460d      	mov	r5, r1
 8010e62:	e765      	b.n	8010d30 <atan+0xc8>
 8010e64:	4b47      	ldr	r3, [pc, #284]	@ (8010f84 <atan+0x31c>)
 8010e66:	429e      	cmp	r6, r3
 8010e68:	d21c      	bcs.n	8010ea4 <atan+0x23c>
 8010e6a:	4b47      	ldr	r3, [pc, #284]	@ (8010f88 <atan+0x320>)
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	4620      	mov	r0, r4
 8010e70:	4629      	mov	r1, r5
 8010e72:	f7ef fa09 	bl	8000288 <__aeabi_dsub>
 8010e76:	4b44      	ldr	r3, [pc, #272]	@ (8010f88 <atan+0x320>)
 8010e78:	4606      	mov	r6, r0
 8010e7a:	460f      	mov	r7, r1
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	4620      	mov	r0, r4
 8010e80:	4629      	mov	r1, r5
 8010e82:	f7ef fbb9 	bl	80005f8 <__aeabi_dmul>
 8010e86:	4b3d      	ldr	r3, [pc, #244]	@ (8010f7c <atan+0x314>)
 8010e88:	2200      	movs	r2, #0
 8010e8a:	f7ef f9ff 	bl	800028c <__adddf3>
 8010e8e:	4602      	mov	r2, r0
 8010e90:	460b      	mov	r3, r1
 8010e92:	4630      	mov	r0, r6
 8010e94:	4639      	mov	r1, r7
 8010e96:	f7ef fcd9 	bl	800084c <__aeabi_ddiv>
 8010e9a:	f04f 0a02 	mov.w	sl, #2
 8010e9e:	4604      	mov	r4, r0
 8010ea0:	460d      	mov	r5, r1
 8010ea2:	e745      	b.n	8010d30 <atan+0xc8>
 8010ea4:	4622      	mov	r2, r4
 8010ea6:	462b      	mov	r3, r5
 8010ea8:	4938      	ldr	r1, [pc, #224]	@ (8010f8c <atan+0x324>)
 8010eaa:	2000      	movs	r0, #0
 8010eac:	f7ef fcce 	bl	800084c <__aeabi_ddiv>
 8010eb0:	f04f 0a03 	mov.w	sl, #3
 8010eb4:	4604      	mov	r4, r0
 8010eb6:	460d      	mov	r5, r1
 8010eb8:	e73a      	b.n	8010d30 <atan+0xc8>
 8010eba:	4b35      	ldr	r3, [pc, #212]	@ (8010f90 <atan+0x328>)
 8010ebc:	4e35      	ldr	r6, [pc, #212]	@ (8010f94 <atan+0x32c>)
 8010ebe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec6:	f7ef f9df 	bl	8000288 <__aeabi_dsub>
 8010eca:	4622      	mov	r2, r4
 8010ecc:	462b      	mov	r3, r5
 8010ece:	f7ef f9db 	bl	8000288 <__aeabi_dsub>
 8010ed2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010ed6:	4602      	mov	r2, r0
 8010ed8:	460b      	mov	r3, r1
 8010eda:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010ede:	f7ef f9d3 	bl	8000288 <__aeabi_dsub>
 8010ee2:	f1bb 0f00 	cmp.w	fp, #0
 8010ee6:	4604      	mov	r4, r0
 8010ee8:	460d      	mov	r5, r1
 8010eea:	f6bf aedc 	bge.w	8010ca6 <atan+0x3e>
 8010eee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010ef2:	461d      	mov	r5, r3
 8010ef4:	e6d7      	b.n	8010ca6 <atan+0x3e>
 8010ef6:	a51c      	add	r5, pc, #112	@ (adr r5, 8010f68 <atan+0x300>)
 8010ef8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010efc:	e6d3      	b.n	8010ca6 <atan+0x3e>
 8010efe:	bf00      	nop
 8010f00:	54442d18 	.word	0x54442d18
 8010f04:	3ff921fb 	.word	0x3ff921fb
 8010f08:	8800759c 	.word	0x8800759c
 8010f0c:	7e37e43c 	.word	0x7e37e43c
 8010f10:	e322da11 	.word	0xe322da11
 8010f14:	3f90ad3a 	.word	0x3f90ad3a
 8010f18:	24760deb 	.word	0x24760deb
 8010f1c:	3fa97b4b 	.word	0x3fa97b4b
 8010f20:	a0d03d51 	.word	0xa0d03d51
 8010f24:	3fb10d66 	.word	0x3fb10d66
 8010f28:	c54c206e 	.word	0xc54c206e
 8010f2c:	3fb745cd 	.word	0x3fb745cd
 8010f30:	920083ff 	.word	0x920083ff
 8010f34:	3fc24924 	.word	0x3fc24924
 8010f38:	5555550d 	.word	0x5555550d
 8010f3c:	3fd55555 	.word	0x3fd55555
 8010f40:	2c6a6c2f 	.word	0x2c6a6c2f
 8010f44:	bfa2b444 	.word	0xbfa2b444
 8010f48:	52defd9a 	.word	0x52defd9a
 8010f4c:	3fadde2d 	.word	0x3fadde2d
 8010f50:	af749a6d 	.word	0xaf749a6d
 8010f54:	3fb3b0f2 	.word	0x3fb3b0f2
 8010f58:	fe231671 	.word	0xfe231671
 8010f5c:	3fbc71c6 	.word	0x3fbc71c6
 8010f60:	9998ebc4 	.word	0x9998ebc4
 8010f64:	3fc99999 	.word	0x3fc99999
 8010f68:	54442d18 	.word	0x54442d18
 8010f6c:	bff921fb 	.word	0xbff921fb
 8010f70:	440fffff 	.word	0x440fffff
 8010f74:	7ff00000 	.word	0x7ff00000
 8010f78:	3fdbffff 	.word	0x3fdbffff
 8010f7c:	3ff00000 	.word	0x3ff00000
 8010f80:	3ff2ffff 	.word	0x3ff2ffff
 8010f84:	40038000 	.word	0x40038000
 8010f88:	3ff80000 	.word	0x3ff80000
 8010f8c:	bff00000 	.word	0xbff00000
 8010f90:	080120a0 	.word	0x080120a0
 8010f94:	080120c0 	.word	0x080120c0

08010f98 <fabs>:
 8010f98:	ec51 0b10 	vmov	r0, r1, d0
 8010f9c:	4602      	mov	r2, r0
 8010f9e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010fa2:	ec43 2b10 	vmov	d0, r2, r3
 8010fa6:	4770      	bx	lr

08010fa8 <__kernel_rem_pio2>:
 8010fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fac:	ed2d 8b02 	vpush	{d8}
 8010fb0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8010fb4:	f112 0f14 	cmn.w	r2, #20
 8010fb8:	9306      	str	r3, [sp, #24]
 8010fba:	9104      	str	r1, [sp, #16]
 8010fbc:	4bbe      	ldr	r3, [pc, #760]	@ (80112b8 <__kernel_rem_pio2+0x310>)
 8010fbe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8010fc0:	9008      	str	r0, [sp, #32]
 8010fc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010fc6:	9300      	str	r3, [sp, #0]
 8010fc8:	9b06      	ldr	r3, [sp, #24]
 8010fca:	f103 33ff 	add.w	r3, r3, #4294967295
 8010fce:	bfa8      	it	ge
 8010fd0:	1ed4      	subge	r4, r2, #3
 8010fd2:	9305      	str	r3, [sp, #20]
 8010fd4:	bfb2      	itee	lt
 8010fd6:	2400      	movlt	r4, #0
 8010fd8:	2318      	movge	r3, #24
 8010fda:	fb94 f4f3 	sdivge	r4, r4, r3
 8010fde:	f06f 0317 	mvn.w	r3, #23
 8010fe2:	fb04 3303 	mla	r3, r4, r3, r3
 8010fe6:	eb03 0b02 	add.w	fp, r3, r2
 8010fea:	9b00      	ldr	r3, [sp, #0]
 8010fec:	9a05      	ldr	r2, [sp, #20]
 8010fee:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80112a8 <__kernel_rem_pio2+0x300>
 8010ff2:	eb03 0802 	add.w	r8, r3, r2
 8010ff6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010ff8:	1aa7      	subs	r7, r4, r2
 8010ffa:	ae20      	add	r6, sp, #128	@ 0x80
 8010ffc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011000:	2500      	movs	r5, #0
 8011002:	4545      	cmp	r5, r8
 8011004:	dd13      	ble.n	801102e <__kernel_rem_pio2+0x86>
 8011006:	9b06      	ldr	r3, [sp, #24]
 8011008:	aa20      	add	r2, sp, #128	@ 0x80
 801100a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801100e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8011012:	f04f 0800 	mov.w	r8, #0
 8011016:	9b00      	ldr	r3, [sp, #0]
 8011018:	4598      	cmp	r8, r3
 801101a:	dc31      	bgt.n	8011080 <__kernel_rem_pio2+0xd8>
 801101c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80112a8 <__kernel_rem_pio2+0x300>
 8011020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011024:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011028:	462f      	mov	r7, r5
 801102a:	2600      	movs	r6, #0
 801102c:	e01b      	b.n	8011066 <__kernel_rem_pio2+0xbe>
 801102e:	42ef      	cmn	r7, r5
 8011030:	d407      	bmi.n	8011042 <__kernel_rem_pio2+0x9a>
 8011032:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011036:	f7ef fa75 	bl	8000524 <__aeabi_i2d>
 801103a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801103e:	3501      	adds	r5, #1
 8011040:	e7df      	b.n	8011002 <__kernel_rem_pio2+0x5a>
 8011042:	ec51 0b18 	vmov	r0, r1, d8
 8011046:	e7f8      	b.n	801103a <__kernel_rem_pio2+0x92>
 8011048:	e9d7 2300 	ldrd	r2, r3, [r7]
 801104c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011050:	f7ef fad2 	bl	80005f8 <__aeabi_dmul>
 8011054:	4602      	mov	r2, r0
 8011056:	460b      	mov	r3, r1
 8011058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801105c:	f7ef f916 	bl	800028c <__adddf3>
 8011060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011064:	3601      	adds	r6, #1
 8011066:	9b05      	ldr	r3, [sp, #20]
 8011068:	429e      	cmp	r6, r3
 801106a:	f1a7 0708 	sub.w	r7, r7, #8
 801106e:	ddeb      	ble.n	8011048 <__kernel_rem_pio2+0xa0>
 8011070:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011074:	f108 0801 	add.w	r8, r8, #1
 8011078:	ecaa 7b02 	vstmia	sl!, {d7}
 801107c:	3508      	adds	r5, #8
 801107e:	e7ca      	b.n	8011016 <__kernel_rem_pio2+0x6e>
 8011080:	9b00      	ldr	r3, [sp, #0]
 8011082:	f8dd 8000 	ldr.w	r8, [sp]
 8011086:	aa0c      	add	r2, sp, #48	@ 0x30
 8011088:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801108c:	930a      	str	r3, [sp, #40]	@ 0x28
 801108e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011090:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011094:	9309      	str	r3, [sp, #36]	@ 0x24
 8011096:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801109a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801109c:	ab98      	add	r3, sp, #608	@ 0x260
 801109e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80110a2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80110a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80110aa:	ac0c      	add	r4, sp, #48	@ 0x30
 80110ac:	ab70      	add	r3, sp, #448	@ 0x1c0
 80110ae:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80110b2:	46a1      	mov	r9, r4
 80110b4:	46c2      	mov	sl, r8
 80110b6:	f1ba 0f00 	cmp.w	sl, #0
 80110ba:	f1a5 0508 	sub.w	r5, r5, #8
 80110be:	dc77      	bgt.n	80111b0 <__kernel_rem_pio2+0x208>
 80110c0:	4658      	mov	r0, fp
 80110c2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80110c6:	f000 fac7 	bl	8011658 <scalbn>
 80110ca:	ec57 6b10 	vmov	r6, r7, d0
 80110ce:	2200      	movs	r2, #0
 80110d0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80110d4:	4630      	mov	r0, r6
 80110d6:	4639      	mov	r1, r7
 80110d8:	f7ef fa8e 	bl	80005f8 <__aeabi_dmul>
 80110dc:	ec41 0b10 	vmov	d0, r0, r1
 80110e0:	f000 fb3a 	bl	8011758 <floor>
 80110e4:	4b75      	ldr	r3, [pc, #468]	@ (80112bc <__kernel_rem_pio2+0x314>)
 80110e6:	ec51 0b10 	vmov	r0, r1, d0
 80110ea:	2200      	movs	r2, #0
 80110ec:	f7ef fa84 	bl	80005f8 <__aeabi_dmul>
 80110f0:	4602      	mov	r2, r0
 80110f2:	460b      	mov	r3, r1
 80110f4:	4630      	mov	r0, r6
 80110f6:	4639      	mov	r1, r7
 80110f8:	f7ef f8c6 	bl	8000288 <__aeabi_dsub>
 80110fc:	460f      	mov	r7, r1
 80110fe:	4606      	mov	r6, r0
 8011100:	f7ef fd2a 	bl	8000b58 <__aeabi_d2iz>
 8011104:	9002      	str	r0, [sp, #8]
 8011106:	f7ef fa0d 	bl	8000524 <__aeabi_i2d>
 801110a:	4602      	mov	r2, r0
 801110c:	460b      	mov	r3, r1
 801110e:	4630      	mov	r0, r6
 8011110:	4639      	mov	r1, r7
 8011112:	f7ef f8b9 	bl	8000288 <__aeabi_dsub>
 8011116:	f1bb 0f00 	cmp.w	fp, #0
 801111a:	4606      	mov	r6, r0
 801111c:	460f      	mov	r7, r1
 801111e:	dd6c      	ble.n	80111fa <__kernel_rem_pio2+0x252>
 8011120:	f108 31ff 	add.w	r1, r8, #4294967295
 8011124:	ab0c      	add	r3, sp, #48	@ 0x30
 8011126:	9d02      	ldr	r5, [sp, #8]
 8011128:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801112c:	f1cb 0018 	rsb	r0, fp, #24
 8011130:	fa43 f200 	asr.w	r2, r3, r0
 8011134:	4415      	add	r5, r2
 8011136:	4082      	lsls	r2, r0
 8011138:	1a9b      	subs	r3, r3, r2
 801113a:	aa0c      	add	r2, sp, #48	@ 0x30
 801113c:	9502      	str	r5, [sp, #8]
 801113e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011142:	f1cb 0217 	rsb	r2, fp, #23
 8011146:	fa43 f902 	asr.w	r9, r3, r2
 801114a:	f1b9 0f00 	cmp.w	r9, #0
 801114e:	dd64      	ble.n	801121a <__kernel_rem_pio2+0x272>
 8011150:	9b02      	ldr	r3, [sp, #8]
 8011152:	2200      	movs	r2, #0
 8011154:	3301      	adds	r3, #1
 8011156:	9302      	str	r3, [sp, #8]
 8011158:	4615      	mov	r5, r2
 801115a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801115e:	4590      	cmp	r8, r2
 8011160:	f300 80b8 	bgt.w	80112d4 <__kernel_rem_pio2+0x32c>
 8011164:	f1bb 0f00 	cmp.w	fp, #0
 8011168:	dd07      	ble.n	801117a <__kernel_rem_pio2+0x1d2>
 801116a:	f1bb 0f01 	cmp.w	fp, #1
 801116e:	f000 80bf 	beq.w	80112f0 <__kernel_rem_pio2+0x348>
 8011172:	f1bb 0f02 	cmp.w	fp, #2
 8011176:	f000 80c6 	beq.w	8011306 <__kernel_rem_pio2+0x35e>
 801117a:	f1b9 0f02 	cmp.w	r9, #2
 801117e:	d14c      	bne.n	801121a <__kernel_rem_pio2+0x272>
 8011180:	4632      	mov	r2, r6
 8011182:	463b      	mov	r3, r7
 8011184:	494e      	ldr	r1, [pc, #312]	@ (80112c0 <__kernel_rem_pio2+0x318>)
 8011186:	2000      	movs	r0, #0
 8011188:	f7ef f87e 	bl	8000288 <__aeabi_dsub>
 801118c:	4606      	mov	r6, r0
 801118e:	460f      	mov	r7, r1
 8011190:	2d00      	cmp	r5, #0
 8011192:	d042      	beq.n	801121a <__kernel_rem_pio2+0x272>
 8011194:	4658      	mov	r0, fp
 8011196:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80112b0 <__kernel_rem_pio2+0x308>
 801119a:	f000 fa5d 	bl	8011658 <scalbn>
 801119e:	4630      	mov	r0, r6
 80111a0:	4639      	mov	r1, r7
 80111a2:	ec53 2b10 	vmov	r2, r3, d0
 80111a6:	f7ef f86f 	bl	8000288 <__aeabi_dsub>
 80111aa:	4606      	mov	r6, r0
 80111ac:	460f      	mov	r7, r1
 80111ae:	e034      	b.n	801121a <__kernel_rem_pio2+0x272>
 80111b0:	4b44      	ldr	r3, [pc, #272]	@ (80112c4 <__kernel_rem_pio2+0x31c>)
 80111b2:	2200      	movs	r2, #0
 80111b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111b8:	f7ef fa1e 	bl	80005f8 <__aeabi_dmul>
 80111bc:	f7ef fccc 	bl	8000b58 <__aeabi_d2iz>
 80111c0:	f7ef f9b0 	bl	8000524 <__aeabi_i2d>
 80111c4:	4b40      	ldr	r3, [pc, #256]	@ (80112c8 <__kernel_rem_pio2+0x320>)
 80111c6:	2200      	movs	r2, #0
 80111c8:	4606      	mov	r6, r0
 80111ca:	460f      	mov	r7, r1
 80111cc:	f7ef fa14 	bl	80005f8 <__aeabi_dmul>
 80111d0:	4602      	mov	r2, r0
 80111d2:	460b      	mov	r3, r1
 80111d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111d8:	f7ef f856 	bl	8000288 <__aeabi_dsub>
 80111dc:	f7ef fcbc 	bl	8000b58 <__aeabi_d2iz>
 80111e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80111e4:	f849 0b04 	str.w	r0, [r9], #4
 80111e8:	4639      	mov	r1, r7
 80111ea:	4630      	mov	r0, r6
 80111ec:	f7ef f84e 	bl	800028c <__adddf3>
 80111f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80111f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111f8:	e75d      	b.n	80110b6 <__kernel_rem_pio2+0x10e>
 80111fa:	d107      	bne.n	801120c <__kernel_rem_pio2+0x264>
 80111fc:	f108 33ff 	add.w	r3, r8, #4294967295
 8011200:	aa0c      	add	r2, sp, #48	@ 0x30
 8011202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011206:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801120a:	e79e      	b.n	801114a <__kernel_rem_pio2+0x1a2>
 801120c:	4b2f      	ldr	r3, [pc, #188]	@ (80112cc <__kernel_rem_pio2+0x324>)
 801120e:	2200      	movs	r2, #0
 8011210:	f7ef fc78 	bl	8000b04 <__aeabi_dcmpge>
 8011214:	2800      	cmp	r0, #0
 8011216:	d143      	bne.n	80112a0 <__kernel_rem_pio2+0x2f8>
 8011218:	4681      	mov	r9, r0
 801121a:	2200      	movs	r2, #0
 801121c:	2300      	movs	r3, #0
 801121e:	4630      	mov	r0, r6
 8011220:	4639      	mov	r1, r7
 8011222:	f7ef fc51 	bl	8000ac8 <__aeabi_dcmpeq>
 8011226:	2800      	cmp	r0, #0
 8011228:	f000 80bf 	beq.w	80113aa <__kernel_rem_pio2+0x402>
 801122c:	f108 33ff 	add.w	r3, r8, #4294967295
 8011230:	2200      	movs	r2, #0
 8011232:	9900      	ldr	r1, [sp, #0]
 8011234:	428b      	cmp	r3, r1
 8011236:	da6e      	bge.n	8011316 <__kernel_rem_pio2+0x36e>
 8011238:	2a00      	cmp	r2, #0
 801123a:	f000 8089 	beq.w	8011350 <__kernel_rem_pio2+0x3a8>
 801123e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011242:	ab0c      	add	r3, sp, #48	@ 0x30
 8011244:	f1ab 0b18 	sub.w	fp, fp, #24
 8011248:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d0f6      	beq.n	801123e <__kernel_rem_pio2+0x296>
 8011250:	4658      	mov	r0, fp
 8011252:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80112b0 <__kernel_rem_pio2+0x308>
 8011256:	f000 f9ff 	bl	8011658 <scalbn>
 801125a:	f108 0301 	add.w	r3, r8, #1
 801125e:	00da      	lsls	r2, r3, #3
 8011260:	9205      	str	r2, [sp, #20]
 8011262:	ec55 4b10 	vmov	r4, r5, d0
 8011266:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011268:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80112c4 <__kernel_rem_pio2+0x31c>
 801126c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8011270:	4646      	mov	r6, r8
 8011272:	f04f 0a00 	mov.w	sl, #0
 8011276:	2e00      	cmp	r6, #0
 8011278:	f280 80cf 	bge.w	801141a <__kernel_rem_pio2+0x472>
 801127c:	4644      	mov	r4, r8
 801127e:	2c00      	cmp	r4, #0
 8011280:	f2c0 80fd 	blt.w	801147e <__kernel_rem_pio2+0x4d6>
 8011284:	4b12      	ldr	r3, [pc, #72]	@ (80112d0 <__kernel_rem_pio2+0x328>)
 8011286:	461f      	mov	r7, r3
 8011288:	ab70      	add	r3, sp, #448	@ 0x1c0
 801128a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801128e:	9306      	str	r3, [sp, #24]
 8011290:	f04f 0a00 	mov.w	sl, #0
 8011294:	f04f 0b00 	mov.w	fp, #0
 8011298:	2600      	movs	r6, #0
 801129a:	eba8 0504 	sub.w	r5, r8, r4
 801129e:	e0e2      	b.n	8011466 <__kernel_rem_pio2+0x4be>
 80112a0:	f04f 0902 	mov.w	r9, #2
 80112a4:	e754      	b.n	8011150 <__kernel_rem_pio2+0x1a8>
 80112a6:	bf00      	nop
	...
 80112b4:	3ff00000 	.word	0x3ff00000
 80112b8:	08012120 	.word	0x08012120
 80112bc:	40200000 	.word	0x40200000
 80112c0:	3ff00000 	.word	0x3ff00000
 80112c4:	3e700000 	.word	0x3e700000
 80112c8:	41700000 	.word	0x41700000
 80112cc:	3fe00000 	.word	0x3fe00000
 80112d0:	080120e0 	.word	0x080120e0
 80112d4:	f854 3b04 	ldr.w	r3, [r4], #4
 80112d8:	b945      	cbnz	r5, 80112ec <__kernel_rem_pio2+0x344>
 80112da:	b123      	cbz	r3, 80112e6 <__kernel_rem_pio2+0x33e>
 80112dc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80112e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80112e4:	2301      	movs	r3, #1
 80112e6:	3201      	adds	r2, #1
 80112e8:	461d      	mov	r5, r3
 80112ea:	e738      	b.n	801115e <__kernel_rem_pio2+0x1b6>
 80112ec:	1acb      	subs	r3, r1, r3
 80112ee:	e7f7      	b.n	80112e0 <__kernel_rem_pio2+0x338>
 80112f0:	f108 32ff 	add.w	r2, r8, #4294967295
 80112f4:	ab0c      	add	r3, sp, #48	@ 0x30
 80112f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112fa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80112fe:	a90c      	add	r1, sp, #48	@ 0x30
 8011300:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011304:	e739      	b.n	801117a <__kernel_rem_pio2+0x1d2>
 8011306:	f108 32ff 	add.w	r2, r8, #4294967295
 801130a:	ab0c      	add	r3, sp, #48	@ 0x30
 801130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011310:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011314:	e7f3      	b.n	80112fe <__kernel_rem_pio2+0x356>
 8011316:	a90c      	add	r1, sp, #48	@ 0x30
 8011318:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801131c:	3b01      	subs	r3, #1
 801131e:	430a      	orrs	r2, r1
 8011320:	e787      	b.n	8011232 <__kernel_rem_pio2+0x28a>
 8011322:	3401      	adds	r4, #1
 8011324:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011328:	2a00      	cmp	r2, #0
 801132a:	d0fa      	beq.n	8011322 <__kernel_rem_pio2+0x37a>
 801132c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801132e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011332:	eb0d 0503 	add.w	r5, sp, r3
 8011336:	9b06      	ldr	r3, [sp, #24]
 8011338:	aa20      	add	r2, sp, #128	@ 0x80
 801133a:	4443      	add	r3, r8
 801133c:	f108 0701 	add.w	r7, r8, #1
 8011340:	3d98      	subs	r5, #152	@ 0x98
 8011342:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8011346:	4444      	add	r4, r8
 8011348:	42bc      	cmp	r4, r7
 801134a:	da04      	bge.n	8011356 <__kernel_rem_pio2+0x3ae>
 801134c:	46a0      	mov	r8, r4
 801134e:	e6a2      	b.n	8011096 <__kernel_rem_pio2+0xee>
 8011350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011352:	2401      	movs	r4, #1
 8011354:	e7e6      	b.n	8011324 <__kernel_rem_pio2+0x37c>
 8011356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011358:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801135c:	f7ef f8e2 	bl	8000524 <__aeabi_i2d>
 8011360:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8011628 <__kernel_rem_pio2+0x680>
 8011364:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011368:	ed8d 7b02 	vstr	d7, [sp, #8]
 801136c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011370:	46b2      	mov	sl, r6
 8011372:	f04f 0800 	mov.w	r8, #0
 8011376:	9b05      	ldr	r3, [sp, #20]
 8011378:	4598      	cmp	r8, r3
 801137a:	dd05      	ble.n	8011388 <__kernel_rem_pio2+0x3e0>
 801137c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011380:	3701      	adds	r7, #1
 8011382:	eca5 7b02 	vstmia	r5!, {d7}
 8011386:	e7df      	b.n	8011348 <__kernel_rem_pio2+0x3a0>
 8011388:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801138c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011390:	f7ef f932 	bl	80005f8 <__aeabi_dmul>
 8011394:	4602      	mov	r2, r0
 8011396:	460b      	mov	r3, r1
 8011398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801139c:	f7ee ff76 	bl	800028c <__adddf3>
 80113a0:	f108 0801 	add.w	r8, r8, #1
 80113a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113a8:	e7e5      	b.n	8011376 <__kernel_rem_pio2+0x3ce>
 80113aa:	f1cb 0000 	rsb	r0, fp, #0
 80113ae:	ec47 6b10 	vmov	d0, r6, r7
 80113b2:	f000 f951 	bl	8011658 <scalbn>
 80113b6:	ec55 4b10 	vmov	r4, r5, d0
 80113ba:	4b9d      	ldr	r3, [pc, #628]	@ (8011630 <__kernel_rem_pio2+0x688>)
 80113bc:	2200      	movs	r2, #0
 80113be:	4620      	mov	r0, r4
 80113c0:	4629      	mov	r1, r5
 80113c2:	f7ef fb9f 	bl	8000b04 <__aeabi_dcmpge>
 80113c6:	b300      	cbz	r0, 801140a <__kernel_rem_pio2+0x462>
 80113c8:	4b9a      	ldr	r3, [pc, #616]	@ (8011634 <__kernel_rem_pio2+0x68c>)
 80113ca:	2200      	movs	r2, #0
 80113cc:	4620      	mov	r0, r4
 80113ce:	4629      	mov	r1, r5
 80113d0:	f7ef f912 	bl	80005f8 <__aeabi_dmul>
 80113d4:	f7ef fbc0 	bl	8000b58 <__aeabi_d2iz>
 80113d8:	4606      	mov	r6, r0
 80113da:	f7ef f8a3 	bl	8000524 <__aeabi_i2d>
 80113de:	4b94      	ldr	r3, [pc, #592]	@ (8011630 <__kernel_rem_pio2+0x688>)
 80113e0:	2200      	movs	r2, #0
 80113e2:	f7ef f909 	bl	80005f8 <__aeabi_dmul>
 80113e6:	460b      	mov	r3, r1
 80113e8:	4602      	mov	r2, r0
 80113ea:	4629      	mov	r1, r5
 80113ec:	4620      	mov	r0, r4
 80113ee:	f7ee ff4b 	bl	8000288 <__aeabi_dsub>
 80113f2:	f7ef fbb1 	bl	8000b58 <__aeabi_d2iz>
 80113f6:	ab0c      	add	r3, sp, #48	@ 0x30
 80113f8:	f10b 0b18 	add.w	fp, fp, #24
 80113fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011400:	f108 0801 	add.w	r8, r8, #1
 8011404:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011408:	e722      	b.n	8011250 <__kernel_rem_pio2+0x2a8>
 801140a:	4620      	mov	r0, r4
 801140c:	4629      	mov	r1, r5
 801140e:	f7ef fba3 	bl	8000b58 <__aeabi_d2iz>
 8011412:	ab0c      	add	r3, sp, #48	@ 0x30
 8011414:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011418:	e71a      	b.n	8011250 <__kernel_rem_pio2+0x2a8>
 801141a:	ab0c      	add	r3, sp, #48	@ 0x30
 801141c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011420:	f7ef f880 	bl	8000524 <__aeabi_i2d>
 8011424:	4622      	mov	r2, r4
 8011426:	462b      	mov	r3, r5
 8011428:	f7ef f8e6 	bl	80005f8 <__aeabi_dmul>
 801142c:	4652      	mov	r2, sl
 801142e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8011432:	465b      	mov	r3, fp
 8011434:	4620      	mov	r0, r4
 8011436:	4629      	mov	r1, r5
 8011438:	f7ef f8de 	bl	80005f8 <__aeabi_dmul>
 801143c:	3e01      	subs	r6, #1
 801143e:	4604      	mov	r4, r0
 8011440:	460d      	mov	r5, r1
 8011442:	e718      	b.n	8011276 <__kernel_rem_pio2+0x2ce>
 8011444:	9906      	ldr	r1, [sp, #24]
 8011446:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801144a:	9106      	str	r1, [sp, #24]
 801144c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011450:	f7ef f8d2 	bl	80005f8 <__aeabi_dmul>
 8011454:	4602      	mov	r2, r0
 8011456:	460b      	mov	r3, r1
 8011458:	4650      	mov	r0, sl
 801145a:	4659      	mov	r1, fp
 801145c:	f7ee ff16 	bl	800028c <__adddf3>
 8011460:	3601      	adds	r6, #1
 8011462:	4682      	mov	sl, r0
 8011464:	468b      	mov	fp, r1
 8011466:	9b00      	ldr	r3, [sp, #0]
 8011468:	429e      	cmp	r6, r3
 801146a:	dc01      	bgt.n	8011470 <__kernel_rem_pio2+0x4c8>
 801146c:	42b5      	cmp	r5, r6
 801146e:	dae9      	bge.n	8011444 <__kernel_rem_pio2+0x49c>
 8011470:	ab48      	add	r3, sp, #288	@ 0x120
 8011472:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011476:	e9c5 ab00 	strd	sl, fp, [r5]
 801147a:	3c01      	subs	r4, #1
 801147c:	e6ff      	b.n	801127e <__kernel_rem_pio2+0x2d6>
 801147e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011480:	2b02      	cmp	r3, #2
 8011482:	dc0b      	bgt.n	801149c <__kernel_rem_pio2+0x4f4>
 8011484:	2b00      	cmp	r3, #0
 8011486:	dc39      	bgt.n	80114fc <__kernel_rem_pio2+0x554>
 8011488:	d05d      	beq.n	8011546 <__kernel_rem_pio2+0x59e>
 801148a:	9b02      	ldr	r3, [sp, #8]
 801148c:	f003 0007 	and.w	r0, r3, #7
 8011490:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8011494:	ecbd 8b02 	vpop	{d8}
 8011498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801149c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801149e:	2b03      	cmp	r3, #3
 80114a0:	d1f3      	bne.n	801148a <__kernel_rem_pio2+0x4e2>
 80114a2:	9b05      	ldr	r3, [sp, #20]
 80114a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80114a8:	eb0d 0403 	add.w	r4, sp, r3
 80114ac:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80114b0:	4625      	mov	r5, r4
 80114b2:	46c2      	mov	sl, r8
 80114b4:	f1ba 0f00 	cmp.w	sl, #0
 80114b8:	f1a5 0508 	sub.w	r5, r5, #8
 80114bc:	dc6b      	bgt.n	8011596 <__kernel_rem_pio2+0x5ee>
 80114be:	4645      	mov	r5, r8
 80114c0:	2d01      	cmp	r5, #1
 80114c2:	f1a4 0408 	sub.w	r4, r4, #8
 80114c6:	f300 8087 	bgt.w	80115d8 <__kernel_rem_pio2+0x630>
 80114ca:	9c05      	ldr	r4, [sp, #20]
 80114cc:	ab48      	add	r3, sp, #288	@ 0x120
 80114ce:	441c      	add	r4, r3
 80114d0:	2000      	movs	r0, #0
 80114d2:	2100      	movs	r1, #0
 80114d4:	f1b8 0f01 	cmp.w	r8, #1
 80114d8:	f300 809c 	bgt.w	8011614 <__kernel_rem_pio2+0x66c>
 80114dc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80114e0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80114e4:	f1b9 0f00 	cmp.w	r9, #0
 80114e8:	f040 80a6 	bne.w	8011638 <__kernel_rem_pio2+0x690>
 80114ec:	9b04      	ldr	r3, [sp, #16]
 80114ee:	e9c3 7800 	strd	r7, r8, [r3]
 80114f2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80114f6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80114fa:	e7c6      	b.n	801148a <__kernel_rem_pio2+0x4e2>
 80114fc:	9d05      	ldr	r5, [sp, #20]
 80114fe:	ab48      	add	r3, sp, #288	@ 0x120
 8011500:	441d      	add	r5, r3
 8011502:	4644      	mov	r4, r8
 8011504:	2000      	movs	r0, #0
 8011506:	2100      	movs	r1, #0
 8011508:	2c00      	cmp	r4, #0
 801150a:	da35      	bge.n	8011578 <__kernel_rem_pio2+0x5d0>
 801150c:	f1b9 0f00 	cmp.w	r9, #0
 8011510:	d038      	beq.n	8011584 <__kernel_rem_pio2+0x5dc>
 8011512:	4602      	mov	r2, r0
 8011514:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011518:	9c04      	ldr	r4, [sp, #16]
 801151a:	e9c4 2300 	strd	r2, r3, [r4]
 801151e:	4602      	mov	r2, r0
 8011520:	460b      	mov	r3, r1
 8011522:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8011526:	f7ee feaf 	bl	8000288 <__aeabi_dsub>
 801152a:	ad4a      	add	r5, sp, #296	@ 0x128
 801152c:	2401      	movs	r4, #1
 801152e:	45a0      	cmp	r8, r4
 8011530:	da2b      	bge.n	801158a <__kernel_rem_pio2+0x5e2>
 8011532:	f1b9 0f00 	cmp.w	r9, #0
 8011536:	d002      	beq.n	801153e <__kernel_rem_pio2+0x596>
 8011538:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801153c:	4619      	mov	r1, r3
 801153e:	9b04      	ldr	r3, [sp, #16]
 8011540:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011544:	e7a1      	b.n	801148a <__kernel_rem_pio2+0x4e2>
 8011546:	9c05      	ldr	r4, [sp, #20]
 8011548:	ab48      	add	r3, sp, #288	@ 0x120
 801154a:	441c      	add	r4, r3
 801154c:	2000      	movs	r0, #0
 801154e:	2100      	movs	r1, #0
 8011550:	f1b8 0f00 	cmp.w	r8, #0
 8011554:	da09      	bge.n	801156a <__kernel_rem_pio2+0x5c2>
 8011556:	f1b9 0f00 	cmp.w	r9, #0
 801155a:	d002      	beq.n	8011562 <__kernel_rem_pio2+0x5ba>
 801155c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011560:	4619      	mov	r1, r3
 8011562:	9b04      	ldr	r3, [sp, #16]
 8011564:	e9c3 0100 	strd	r0, r1, [r3]
 8011568:	e78f      	b.n	801148a <__kernel_rem_pio2+0x4e2>
 801156a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801156e:	f7ee fe8d 	bl	800028c <__adddf3>
 8011572:	f108 38ff 	add.w	r8, r8, #4294967295
 8011576:	e7eb      	b.n	8011550 <__kernel_rem_pio2+0x5a8>
 8011578:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801157c:	f7ee fe86 	bl	800028c <__adddf3>
 8011580:	3c01      	subs	r4, #1
 8011582:	e7c1      	b.n	8011508 <__kernel_rem_pio2+0x560>
 8011584:	4602      	mov	r2, r0
 8011586:	460b      	mov	r3, r1
 8011588:	e7c6      	b.n	8011518 <__kernel_rem_pio2+0x570>
 801158a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801158e:	f7ee fe7d 	bl	800028c <__adddf3>
 8011592:	3401      	adds	r4, #1
 8011594:	e7cb      	b.n	801152e <__kernel_rem_pio2+0x586>
 8011596:	ed95 7b00 	vldr	d7, [r5]
 801159a:	ed8d 7b00 	vstr	d7, [sp]
 801159e:	ed95 7b02 	vldr	d7, [r5, #8]
 80115a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115a6:	ec53 2b17 	vmov	r2, r3, d7
 80115aa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80115ae:	f7ee fe6d 	bl	800028c <__adddf3>
 80115b2:	4602      	mov	r2, r0
 80115b4:	460b      	mov	r3, r1
 80115b6:	4606      	mov	r6, r0
 80115b8:	460f      	mov	r7, r1
 80115ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115be:	f7ee fe63 	bl	8000288 <__aeabi_dsub>
 80115c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80115c6:	f7ee fe61 	bl	800028c <__adddf3>
 80115ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80115ce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80115d2:	e9c5 6700 	strd	r6, r7, [r5]
 80115d6:	e76d      	b.n	80114b4 <__kernel_rem_pio2+0x50c>
 80115d8:	ed94 7b00 	vldr	d7, [r4]
 80115dc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80115e0:	ec51 0b17 	vmov	r0, r1, d7
 80115e4:	4652      	mov	r2, sl
 80115e6:	465b      	mov	r3, fp
 80115e8:	ed8d 7b00 	vstr	d7, [sp]
 80115ec:	f7ee fe4e 	bl	800028c <__adddf3>
 80115f0:	4602      	mov	r2, r0
 80115f2:	460b      	mov	r3, r1
 80115f4:	4606      	mov	r6, r0
 80115f6:	460f      	mov	r7, r1
 80115f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115fc:	f7ee fe44 	bl	8000288 <__aeabi_dsub>
 8011600:	4652      	mov	r2, sl
 8011602:	465b      	mov	r3, fp
 8011604:	f7ee fe42 	bl	800028c <__adddf3>
 8011608:	3d01      	subs	r5, #1
 801160a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801160e:	e9c4 6700 	strd	r6, r7, [r4]
 8011612:	e755      	b.n	80114c0 <__kernel_rem_pio2+0x518>
 8011614:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011618:	f7ee fe38 	bl	800028c <__adddf3>
 801161c:	f108 38ff 	add.w	r8, r8, #4294967295
 8011620:	e758      	b.n	80114d4 <__kernel_rem_pio2+0x52c>
 8011622:	bf00      	nop
 8011624:	f3af 8000 	nop.w
	...
 8011630:	41700000 	.word	0x41700000
 8011634:	3e700000 	.word	0x3e700000
 8011638:	9b04      	ldr	r3, [sp, #16]
 801163a:	9a04      	ldr	r2, [sp, #16]
 801163c:	601f      	str	r7, [r3, #0]
 801163e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8011642:	605c      	str	r4, [r3, #4]
 8011644:	609d      	str	r5, [r3, #8]
 8011646:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801164a:	60d3      	str	r3, [r2, #12]
 801164c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011650:	6110      	str	r0, [r2, #16]
 8011652:	6153      	str	r3, [r2, #20]
 8011654:	e719      	b.n	801148a <__kernel_rem_pio2+0x4e2>
 8011656:	bf00      	nop

08011658 <scalbn>:
 8011658:	b570      	push	{r4, r5, r6, lr}
 801165a:	ec55 4b10 	vmov	r4, r5, d0
 801165e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011662:	4606      	mov	r6, r0
 8011664:	462b      	mov	r3, r5
 8011666:	b991      	cbnz	r1, 801168e <scalbn+0x36>
 8011668:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801166c:	4323      	orrs	r3, r4
 801166e:	d03d      	beq.n	80116ec <scalbn+0x94>
 8011670:	4b35      	ldr	r3, [pc, #212]	@ (8011748 <scalbn+0xf0>)
 8011672:	4620      	mov	r0, r4
 8011674:	4629      	mov	r1, r5
 8011676:	2200      	movs	r2, #0
 8011678:	f7ee ffbe 	bl	80005f8 <__aeabi_dmul>
 801167c:	4b33      	ldr	r3, [pc, #204]	@ (801174c <scalbn+0xf4>)
 801167e:	429e      	cmp	r6, r3
 8011680:	4604      	mov	r4, r0
 8011682:	460d      	mov	r5, r1
 8011684:	da0f      	bge.n	80116a6 <scalbn+0x4e>
 8011686:	a328      	add	r3, pc, #160	@ (adr r3, 8011728 <scalbn+0xd0>)
 8011688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168c:	e01e      	b.n	80116cc <scalbn+0x74>
 801168e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011692:	4291      	cmp	r1, r2
 8011694:	d10b      	bne.n	80116ae <scalbn+0x56>
 8011696:	4622      	mov	r2, r4
 8011698:	4620      	mov	r0, r4
 801169a:	4629      	mov	r1, r5
 801169c:	f7ee fdf6 	bl	800028c <__adddf3>
 80116a0:	4604      	mov	r4, r0
 80116a2:	460d      	mov	r5, r1
 80116a4:	e022      	b.n	80116ec <scalbn+0x94>
 80116a6:	460b      	mov	r3, r1
 80116a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80116ac:	3936      	subs	r1, #54	@ 0x36
 80116ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80116b2:	4296      	cmp	r6, r2
 80116b4:	dd0d      	ble.n	80116d2 <scalbn+0x7a>
 80116b6:	2d00      	cmp	r5, #0
 80116b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8011730 <scalbn+0xd8>)
 80116ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116be:	da02      	bge.n	80116c6 <scalbn+0x6e>
 80116c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8011738 <scalbn+0xe0>)
 80116c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8011730 <scalbn+0xd8>)
 80116c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116cc:	f7ee ff94 	bl	80005f8 <__aeabi_dmul>
 80116d0:	e7e6      	b.n	80116a0 <scalbn+0x48>
 80116d2:	1872      	adds	r2, r6, r1
 80116d4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80116d8:	428a      	cmp	r2, r1
 80116da:	dcec      	bgt.n	80116b6 <scalbn+0x5e>
 80116dc:	2a00      	cmp	r2, #0
 80116de:	dd08      	ble.n	80116f2 <scalbn+0x9a>
 80116e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80116e4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80116e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80116ec:	ec45 4b10 	vmov	d0, r4, r5
 80116f0:	bd70      	pop	{r4, r5, r6, pc}
 80116f2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80116f6:	da08      	bge.n	801170a <scalbn+0xb2>
 80116f8:	2d00      	cmp	r5, #0
 80116fa:	a10b      	add	r1, pc, #44	@ (adr r1, 8011728 <scalbn+0xd0>)
 80116fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011700:	dac1      	bge.n	8011686 <scalbn+0x2e>
 8011702:	a10f      	add	r1, pc, #60	@ (adr r1, 8011740 <scalbn+0xe8>)
 8011704:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011708:	e7bd      	b.n	8011686 <scalbn+0x2e>
 801170a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801170e:	3236      	adds	r2, #54	@ 0x36
 8011710:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011714:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011718:	4620      	mov	r0, r4
 801171a:	4b0d      	ldr	r3, [pc, #52]	@ (8011750 <scalbn+0xf8>)
 801171c:	4629      	mov	r1, r5
 801171e:	2200      	movs	r2, #0
 8011720:	e7d4      	b.n	80116cc <scalbn+0x74>
 8011722:	bf00      	nop
 8011724:	f3af 8000 	nop.w
 8011728:	c2f8f359 	.word	0xc2f8f359
 801172c:	01a56e1f 	.word	0x01a56e1f
 8011730:	8800759c 	.word	0x8800759c
 8011734:	7e37e43c 	.word	0x7e37e43c
 8011738:	8800759c 	.word	0x8800759c
 801173c:	fe37e43c 	.word	0xfe37e43c
 8011740:	c2f8f359 	.word	0xc2f8f359
 8011744:	81a56e1f 	.word	0x81a56e1f
 8011748:	43500000 	.word	0x43500000
 801174c:	ffff3cb0 	.word	0xffff3cb0
 8011750:	3c900000 	.word	0x3c900000
 8011754:	00000000 	.word	0x00000000

08011758 <floor>:
 8011758:	ec51 0b10 	vmov	r0, r1, d0
 801175c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011764:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8011768:	2e13      	cmp	r6, #19
 801176a:	460c      	mov	r4, r1
 801176c:	4605      	mov	r5, r0
 801176e:	4680      	mov	r8, r0
 8011770:	dc34      	bgt.n	80117dc <floor+0x84>
 8011772:	2e00      	cmp	r6, #0
 8011774:	da17      	bge.n	80117a6 <floor+0x4e>
 8011776:	a332      	add	r3, pc, #200	@ (adr r3, 8011840 <floor+0xe8>)
 8011778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801177c:	f7ee fd86 	bl	800028c <__adddf3>
 8011780:	2200      	movs	r2, #0
 8011782:	2300      	movs	r3, #0
 8011784:	f7ef f9c8 	bl	8000b18 <__aeabi_dcmpgt>
 8011788:	b150      	cbz	r0, 80117a0 <floor+0x48>
 801178a:	2c00      	cmp	r4, #0
 801178c:	da55      	bge.n	801183a <floor+0xe2>
 801178e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8011792:	432c      	orrs	r4, r5
 8011794:	2500      	movs	r5, #0
 8011796:	42ac      	cmp	r4, r5
 8011798:	4c2b      	ldr	r4, [pc, #172]	@ (8011848 <floor+0xf0>)
 801179a:	bf08      	it	eq
 801179c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80117a0:	4621      	mov	r1, r4
 80117a2:	4628      	mov	r0, r5
 80117a4:	e023      	b.n	80117ee <floor+0x96>
 80117a6:	4f29      	ldr	r7, [pc, #164]	@ (801184c <floor+0xf4>)
 80117a8:	4137      	asrs	r7, r6
 80117aa:	ea01 0307 	and.w	r3, r1, r7
 80117ae:	4303      	orrs	r3, r0
 80117b0:	d01d      	beq.n	80117ee <floor+0x96>
 80117b2:	a323      	add	r3, pc, #140	@ (adr r3, 8011840 <floor+0xe8>)
 80117b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b8:	f7ee fd68 	bl	800028c <__adddf3>
 80117bc:	2200      	movs	r2, #0
 80117be:	2300      	movs	r3, #0
 80117c0:	f7ef f9aa 	bl	8000b18 <__aeabi_dcmpgt>
 80117c4:	2800      	cmp	r0, #0
 80117c6:	d0eb      	beq.n	80117a0 <floor+0x48>
 80117c8:	2c00      	cmp	r4, #0
 80117ca:	bfbe      	ittt	lt
 80117cc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80117d0:	4133      	asrlt	r3, r6
 80117d2:	18e4      	addlt	r4, r4, r3
 80117d4:	ea24 0407 	bic.w	r4, r4, r7
 80117d8:	2500      	movs	r5, #0
 80117da:	e7e1      	b.n	80117a0 <floor+0x48>
 80117dc:	2e33      	cmp	r6, #51	@ 0x33
 80117de:	dd0a      	ble.n	80117f6 <floor+0x9e>
 80117e0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80117e4:	d103      	bne.n	80117ee <floor+0x96>
 80117e6:	4602      	mov	r2, r0
 80117e8:	460b      	mov	r3, r1
 80117ea:	f7ee fd4f 	bl	800028c <__adddf3>
 80117ee:	ec41 0b10 	vmov	d0, r0, r1
 80117f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117f6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80117fa:	f04f 37ff 	mov.w	r7, #4294967295
 80117fe:	40df      	lsrs	r7, r3
 8011800:	4207      	tst	r7, r0
 8011802:	d0f4      	beq.n	80117ee <floor+0x96>
 8011804:	a30e      	add	r3, pc, #56	@ (adr r3, 8011840 <floor+0xe8>)
 8011806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180a:	f7ee fd3f 	bl	800028c <__adddf3>
 801180e:	2200      	movs	r2, #0
 8011810:	2300      	movs	r3, #0
 8011812:	f7ef f981 	bl	8000b18 <__aeabi_dcmpgt>
 8011816:	2800      	cmp	r0, #0
 8011818:	d0c2      	beq.n	80117a0 <floor+0x48>
 801181a:	2c00      	cmp	r4, #0
 801181c:	da0a      	bge.n	8011834 <floor+0xdc>
 801181e:	2e14      	cmp	r6, #20
 8011820:	d101      	bne.n	8011826 <floor+0xce>
 8011822:	3401      	adds	r4, #1
 8011824:	e006      	b.n	8011834 <floor+0xdc>
 8011826:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801182a:	2301      	movs	r3, #1
 801182c:	40b3      	lsls	r3, r6
 801182e:	441d      	add	r5, r3
 8011830:	4545      	cmp	r5, r8
 8011832:	d3f6      	bcc.n	8011822 <floor+0xca>
 8011834:	ea25 0507 	bic.w	r5, r5, r7
 8011838:	e7b2      	b.n	80117a0 <floor+0x48>
 801183a:	2500      	movs	r5, #0
 801183c:	462c      	mov	r4, r5
 801183e:	e7af      	b.n	80117a0 <floor+0x48>
 8011840:	8800759c 	.word	0x8800759c
 8011844:	7e37e43c 	.word	0x7e37e43c
 8011848:	bff00000 	.word	0xbff00000
 801184c:	000fffff 	.word	0x000fffff

08011850 <_init>:
 8011850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011852:	bf00      	nop
 8011854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011856:	bc08      	pop	{r3}
 8011858:	469e      	mov	lr, r3
 801185a:	4770      	bx	lr

0801185c <_fini>:
 801185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801185e:	bf00      	nop
 8011860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011862:	bc08      	pop	{r3}
 8011864:	469e      	mov	lr, r3
 8011866:	4770      	bx	lr
